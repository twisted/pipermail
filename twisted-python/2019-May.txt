From glyph at twistedmatrix.com  Wed May  1 00:01:00 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 30 Apr 2019 23:01:00 -0700
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <31ac3952-157e-4af7-bad3-7d47f36bbc08@egh.com>
References: <31ac3952-157e-4af7-bad3-7d47f36bbc08@egh.com>
Message-ID: <90BFB5FF-5AE3-4E74-866D-F14721CF9387@twistedmatrix.com>

> On Apr 28, 2019, at 8:01 AM, John Santos <john at egh.com> wrote:
> I've been having ongoing problems accessing the TwistedMatrix site.  (Tried both Firefox and Chrome from my home PC.)
> 
The site was having some issues and the server badly needed a reboot during the time you were trying to access it.
> I've been trying to log in to update issue 9629 below to report it is a duplicate of a known problem.  (Can't tell you WHICH known problem because I can't search the Twisted tickets.)
> 
Hopefully the search function is back?  But also you can try searching with Google, using 'site:twistedmatrix.com/trac/ticket'.
> On Monday evening, when I submitted this issue, I filled in the form and nothing appeared to happen.  (I may have even submitted it twice.)
> 
> I searched the tickets and discovered 1) it didn't appear (so no ticket?) and 2) it seemed to be the same as a previously reported problem, so I added a comment to the previous ticket that I was seeing the same issue and a little context that might help.  (I only started seeing it with Twisted 19.2.0, but the original report said it was under 18.4.0 which I had been running uneventfully since last summer.)
> 
> Anyway, I got no feedback, so I assumed my initial attempt to create a ticket had failed.
> 
> Someone with access, please mark #9629 as a duplicate and close.
> 
Done.  Looks like https://twistedmatrix.com/trac/ticket/9462 <https://twistedmatrix.com/trac/ticket/9462> was the issue in question; I see your comment on it.

Thanks for writing the email to follow up :).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190430/b8d86832/attachment.html>

From john at egh.com  Wed May  1 01:07:55 2019
From: john at egh.com (John Santos)
Date: Wed, 1 May 2019 03:07:55 -0400
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <90BFB5FF-5AE3-4E74-866D-F14721CF9387@twistedmatrix.com>
References: <31ac3952-157e-4af7-bad3-7d47f36bbc08@egh.com>
 <90BFB5FF-5AE3-4E74-866D-F14721CF9387@twistedmatrix.com>
Message-ID: <ae9afb79-522e-81c4-f226-2bd1be8139e3@egh.com>

On 5/1/2019 02:01 AM, Glyph wrote:
>> On Apr 28, 2019, at 8:01 AM, John Santos <john at egh.com 
>> <mailto:john at egh.com>> wrote:
>>
>> I've been having ongoing problems accessing the TwistedMatrix site.  
>> (Tried both Firefox and Chrome from my home PC.)
>>
> The site was having some issues and the server badly needed a reboot 
> during the time you were trying to access it.
>>
>> I've been trying to log in to update issue 9629 below to report it is 
>> a duplicate of a known problem.  (Can't tell you WHICH known problem 
>> because I can't search the Twisted tickets.)
>>
> Hopefully the search function is back?  But also you can try searching 
> with Google, using 'site:twistedmatrix.com/trac/ticket' 
> <http://twistedmatrix.com/trac/ticket'>.
>>
>> On Monday evening, when I submitted this issue, I filled in the form 
>> and nothing appeared to happen.  (I may have even submitted it twice.)
>>
>> I searched the tickets and discovered 1) it didn't appear (so no 
>> ticket?) and 2) it seemed to be the same as a previously reported 
>> problem, so I added a comment to the previous ticket that I was seeing 
>> the same issue and a little context that might help.  (I only started 
>> seeing it with Twisted 19.2.0, but the original report said it was 
>> under 18.4.0 which I had been running uneventfully since last summer.)
>>
>> Anyway, I got no feedback, so I assumed my initial attempt to create a 
>> ticket had failed.
>>
>> Someone with access, please mark #9629 as a duplicate and close.
>>
> Done.  Looks like https://twistedmatrix.com/trac/ticket/9462 was the 
> issue in question; I see your comment on it.
> 
> Thanks for writing the email to follow up :).
> 
> -g

Yes, that's it.  Thanks, Glyph.  (I always get a warm feeling when I see 
a bug* get stomped even when it's just because it's a duplicate!)

I also saw your later comment that it might be related to #7926.  I 
suspect you are correct, though it makes my brain hurt to try to follow 
it.  I think TLS is trying to deal more sensibly with connections 
getting intentionally shut down by either end, but issues still arise 
when shutdowns happen in the middle of negotiations.  (Which broaches 
the issue "can this be leveraged into a DOS attack?", on top of just 
trying to deal with it correctly.)  In my case, though, I think the 
issue pops up when my server times out and closes the connection, but 
the client end (a vanilla web browser such as Firefox or Chrome) doesn't 
do exactly what the TLS server code expects.  Which side (client or 
server) is behaving incorrectly?  I have no idea.

[*] a computer bug**, not a real bug, for any hard-core Buddhists or 
Jains lurking... ;-)
[**] I've seen the original Mark II/Grace Hopper bug.  It was actually a 
large moth, scotch-taped to the console log...  Found a picture at 
https://www.atlasobscura.com/places/grace-hoppers-bug  (Maybe you can 
tell I'm in full work-avoidance mode.)

PS the web site is working much better today, thanks.

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539


From trac at twistedmatrix.com  Sun May  5 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 05 May 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1557036318.55.4174896439906003079@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190505/429db423/attachment.html>

From trac at twistedmatrix.com  Sun May 12 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 12 May 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1557641118.35.2016423685753123785@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190512/2df4170b/attachment.html>

From chris at withers.org  Mon May 13 08:26:01 2019
From: chris at withers.org (Chris Withers)
Date: Mon, 13 May 2019 15:26:01 +0100
Subject: [Twisted-Python] finding out what's blocking the reactor
Message-ID: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>

Hi All,

On some busy instances of the app I'm working with/on, we see websocket 
connections being dropped due to not ping/ponging in time, I'm fairly 
sure this is as a result of some user-written callbacks blocking the 
reactor for long periods of time (seconds...).

What's the best way to debug a twisted application to find out what's 
blocking the reactor?

cheers,

Chris


From glyph at twistedmatrix.com  Mon May 13 10:46:40 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 13 May 2019 09:46:40 -0700
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
Message-ID: <7016A6B6-44F0-437A-90EA-38BE7B5D33CD@twistedmatrix.com>



> On May 13, 2019, at 7:26 AM, Chris Withers <chris at withers.org> wrote:
> 
> Hi All,
> 
> On some busy instances of the app I'm working with/on, we see websocket connections being dropped due to not ping/ponging in time, I'm fairly sure this is as a result of some user-written callbacks blocking the reactor for long periods of time (seconds...).
> 
> What's the best way to debug a twisted application to find out what's blocking the reactor?

I don’t know about “the best”, but I’ve had some success with https://vmprof.readthedocs.io/en/latest and https://github.com/ggreer/twisted_hang depending on what you’re looking for.

Let us know if these work out!

-g


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190513/89ad3a50/attachment.html>

From barry.scott at forcepoint.com  Tue May 14 09:39:24 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Tue, 14 May 2019 15:39:24 +0000
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
Message-ID: <5127710.BgWIjmJy6L@barry-scott-desktop>

On Monday, 13 May 2019 15:26:01 BST Chris Withers wrote:
> Hi All,
> 
> On some busy instances of the app I'm working with/on, we see websocket
> connections being dropped due to not ping/ponging in time, I'm fairly
> sure this is as a result of some user-written callbacks blocking the
> reactor for long periods of time (seconds...).
> 
> What's the best way to debug a twisted application to find out what's
> blocking the reactor?

Is the process CPU bound or IO bound?

If CPU bound then cprofile or the tool Glyph mentioned would help.

This advice is from a Linux perspective.

If its IO bound the you may be waiting on a blocking operation.
You could use strace on the process to see what its doing.

As its hung for seconds you could connect gdb to the process and see a python 
backtrace using the py-bt command. You are likely to catch the offending code.

The normal bt command will show you what the last python command it calling.

You could adding logging to your code to show the time of callback entry and 
exit.

If all else fails patch the twisted code to time callbacks and report the slow 
ones.

Barry

> 
> cheers,
> 
> Chris
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From werner at thieprojects.ch  Tue May 14 15:14:51 2019
From: werner at thieprojects.ch (Werner Thie)
Date: Tue, 14 May 2019 11:14:51 -1000
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <5127710.BgWIjmJy6L@barry-scott-desktop>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <5127710.BgWIjmJy6L@barry-scott-desktop>
Message-ID: <d848cd86-9acb-4162-2e63-bddd5a946016@thieprojects.ch>

Hi all

with periods of seemingly no activity the gc comes to mind.

Is the working set size stable or ever increasing, swap operations might
block activity of the process

I had problems in the beginning with twisted, because I was holding on
to a lot of objects and thus creating  circular non collectible object
references leading to ever increasing work sets over time, with the gc
hitting me hard once in a while.

First check I do always is keep an eye on the size of the process at
constant network load, size shrinking when network load is dwindling and
increasing when network load is growing. If it is possible to manipulate
network load precisely then returning to the same load should give you
the same process size after some time repeatedly.

As a reference I have twisted processes running with up times measured
in years on FreeBSD.

Werner

On 5/14/19 05:39, Scott, Barry wrote:
> On Monday, 13 May 2019 15:26:01 BST Chris Withers wrote:
>> Hi All,
>>
>> On some busy instances of the app I'm working with/on, we see websocket
>> connections being dropped due to not ping/ponging in time, I'm fairly
>> sure this is as a result of some user-written callbacks blocking the
>> reactor for long periods of time (seconds...).
>>
>> What's the best way to debug a twisted application to find out what's
>> blocking the reactor?
> Is the process CPU bound or IO bound?
>
> If CPU bound then cprofile or the tool Glyph mentioned would help.
>
> This advice is from a Linux perspective.
>
> If its IO bound the you may be waiting on a blocking operation.
> You could use strace on the process to see what its doing.
>
> As its hung for seconds you could connect gdb to the process and see a python 
> backtrace using the py-bt command. You are likely to catch the offending code.
>
> The normal bt command will show you what the last python command it calling.
>
> You could adding logging to your code to show the time of callback entry and 
> exit.
>
> If all else fails patch the twisted code to time callbacks and report the slow 
> ones.
>
> Barry
>
>> cheers,
>>
>> Chris
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From glyph at twistedmatrix.com  Wed May 15 00:32:49 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 14 May 2019 23:32:49 -0700
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <5127710.BgWIjmJy6L@barry-scott-desktop>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <5127710.BgWIjmJy6L@barry-scott-desktop>
Message-ID: <56D9B282-B1F8-4895-9C8B-C8A47918CEA1@twistedmatrix.com>



> On May 14, 2019, at 8:39 AM, Scott, Barry <barry.scott at forcepoint.com> wrote:
> 
> On Monday, 13 May 2019 15:26:01 BST Chris Withers wrote:
>> Hi All,
>> 
>> On some busy instances of the app I'm working with/on, we see websocket
>> connections being dropped due to not ping/ponging in time, I'm fairly
>> sure this is as a result of some user-written callbacks blocking the
>> reactor for long periods of time (seconds...).
>> 
>> What's the best way to debug a twisted application to find out what's
>> blocking the reactor?
> 
> Is the process CPU bound or IO bound?
> 
> If CPU bound then cprofile or the tool Glyph mentioned would help.

The tool I mentioned (vmprof) is not a CPU profiler, and will help with I/O bound tasks as well.  cProfile can also tell you about wall clock time, but has other limitations that might not make it suitable for this.

-g

> This advice is from a Linux perspective.
> 
> If its IO bound the you may be waiting on a blocking operation.
> You could use strace on the process to see what its doing.
> 
> As its hung for seconds you could connect gdb to the process and see a python 
> backtrace using the py-bt command. You are likely to catch the offending code.
> 
> The normal bt command will show you what the last python command it calling.
> 
> You could adding logging to your code to show the time of callback entry and 
> exit.
> 
> If all else fails patch the twisted code to time callbacks and report the slow 
> ones.
> 
> Barry
> 
>> 
>> cheers,
>> 
>> Chris
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From chris at withers.org  Tue May 14 23:30:54 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 15 May 2019 06:30:54 +0100
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <d848cd86-9acb-4162-2e63-bddd5a946016@thieprojects.ch>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <5127710.BgWIjmJy6L@barry-scott-desktop>
 <d848cd86-9acb-4162-2e63-bddd5a946016@thieprojects.ch>
Message-ID: <075fe2b4-ce04-7fe9-8250-d777fdd06047@withers.org>

On 14/05/2019 22:14, Werner Thie wrote:
> Hi all
> 
> with periods of seemingly no activity the gc comes to mind.

Hmm, gc blocking the process is an interesting thought, what evidence 
would you see with gdb, etc, to show that this was the problem?

Chris


From chris at withers.org  Tue May 14 23:27:30 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 15 May 2019 06:27:30 +0100
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <5127710.BgWIjmJy6L@barry-scott-desktop>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <5127710.BgWIjmJy6L@barry-scott-desktop>
Message-ID: <c63ad7cc-e792-98aa-d404-aa8f9b5c9c29@withers.org>

On 14/05/2019 16:39, Scott, Barry wrote:
> On Monday, 13 May 2019 15:26:01 BST Chris Withers wrote:
>> Hi All,
>>
>> On some busy instances of the app I'm working with/on, we see websocket
>> connections being dropped due to not ping/ponging in time, I'm fairly
>> sure this is as a result of some user-written callbacks blocking the
>> reactor for long periods of time (seconds...).
>>
>> What's the best way to debug a twisted application to find out what's
>> blocking the reactor?
> 
> Is the process CPU bound or IO bound?

Yes ;-)

> If CPU bound then cprofile or the tool Glyph mentioned would help.
> 
> This advice is from a Linux perspective.
> 
> If its IO bound the you may be waiting on a blocking operation.
> You could use strace on the process to see what its doing.

Good call on strace, will do so next time one of these happens.

> As its hung for seconds you could connect gdb to the process and see a python
> backtrace using the py-bt command. You are likely to catch the offending code.

I'm failing miserably to get gdb to find debug symbols for python. I've 
installed the system python's debug symbols rpm, I've installed gdb .py 
that ships in the python source tree (so at least I *have* a py-bt 
command now!) - what am I likely to be missing?

> You could adding logging to your code to show the time of callback entry and
> exit.

Right, but if the callback yields, that will be falsely shown as 
blocking, no?

cheers,

Chris


From maarten at treewalker.org  Wed May 15 04:38:43 2019
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Wed, 15 May 2019 12:38:43 +0200
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <075fe2b4-ce04-7fe9-8250-d777fdd06047@withers.org>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <d848cd86-9acb-4162-2e63-bddd5a946016@thieprojects.ch>
 <075fe2b4-ce04-7fe9-8250-d777fdd06047@withers.org>
Message-ID: <1757307.lFlHL5C1Ud@hyperion>

On Wednesday, 15 May 2019 07:30:54 CEST Chris Withers wrote:
> On 14/05/2019 22:14, Werner Thie wrote:
> > Hi all
> > 
> > with periods of seemingly no activity the gc comes to mind.
> 
> Hmm, gc blocking the process is an interesting thought, what evidence
> would you see with gdb, etc, to show that this was the problem?

A simple way is to call gc.disable() and see if the problem goes away.

Note that gc.disable() only disables the mark-and-sweep part of garbage 
collection, which is the part that can cause the Python interpreter to 
freeze. It doesn't disable garbage collection when the refcount of an 
object reaches zero.

Bye,
		Maarten




From barry.scott at forcepoint.com  Wed May 15 05:08:52 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Wed, 15 May 2019 11:08:52 +0000
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <c63ad7cc-e792-98aa-d404-aa8f9b5c9c29@withers.org>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <5127710.BgWIjmJy6L@barry-scott-desktop>
 <c63ad7cc-e792-98aa-d404-aa8f9b5c9c29@withers.org>
Message-ID: <119843095.qYWDFDJFEp@barry-scott-desktop>

On Wednesday, 15 May 2019 06:27:30 BST Chris Withers wrote:
> On 14/05/2019 16:39, Scott, Barry wrote:
> > On Monday, 13 May 2019 15:26:01 BST Chris Withers wrote:
> >> Hi All,
> >> 
> >> On some busy instances of the app I'm working with/on, we see websocket
> >> connections being dropped due to not ping/ponging in time, I'm fairly
> >> sure this is as a result of some user-written callbacks blocking the
> >> reactor for long periods of time (seconds...).
> >> 
> >> What's the best way to debug a twisted application to find out what's
> >> blocking the reactor?
> > 
> > Is the process CPU bound or IO bound?
> 
> Yes ;-)
> 
> > If CPU bound then cprofile or the tool Glyph mentioned would help.
> > 
> > This advice is from a Linux perspective.
> > 
> > If its IO bound the you may be waiting on a blocking operation.
> > You could use strace on the process to see what its doing.
> 
> Good call on strace, will do so next time one of these happens.
> 
> > As its hung for seconds you could connect gdb to the process and see a
> > python backtrace using the py-bt command. You are likely to catch the
> > offending code.
> I'm failing miserably to get gdb to find debug symbols for python. I've
> installed the system python's debug symbols rpm, I've installed gdb .py
> that ships in the python source tree (so at least I *have* a py-bt
> command now!) - what am I likely to be missing?

At least on Fedora/Centos when you run up gdb you get a message that tells
you the the command to run to install missing symbols. This is what I see on
Fedora 30 for example:

$ gdb python3
GNU gdb (GDB) Fedora 8.2.91.20190424-24.fc30
... skip ...
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from python3...
(No debugging symbols found in python3)
Missing separate debuginfos, use: dnf debuginfo-install 
python3-3.7.3-1.fc30.x86_64
(gdb) 

Then I quit gdb and run the sudo dnf as suggested.

Then next time you run gdb it will suggest even mode debug info to install.
You can often skip that, you have all you need to see python code.

> > You could adding logging to your code to show the time of callback entry
> > and exit.
> 
> Right, but if the callback yields, that will be falsely shown as
> blocking, no?

I'm not used to using yield with twisted. But it will not block.

> 
> cheers,
> 
> Chris





From barry.scott at forcepoint.com  Wed May 15 05:11:29 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Wed, 15 May 2019 11:11:29 +0000
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <075fe2b4-ce04-7fe9-8250-d777fdd06047@withers.org>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <d848cd86-9acb-4162-2e63-bddd5a946016@thieprojects.ch>
 <075fe2b4-ce04-7fe9-8250-d777fdd06047@withers.org>
Message-ID: <6041653.oyV1gAGG9S@barry-scott-desktop>

On Wednesday, 15 May 2019 06:30:54 BST Chris Withers wrote:
> On 14/05/2019 22:14, Werner Thie wrote:
> > Hi all
> > 
> > with periods of seemingly no activity the gc comes to mind.
> 
> Hmm, gc blocking the process is an interesting thought, what evidence
> would you see with gdb, etc, to show that this was the problem?

In my experience gc is low level noise only.
Our work load is very heavy and its never been an issue.

Barry

> 
> Chris
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From maarten at treewalker.org  Wed May 15 06:19:48 2019
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Wed, 15 May 2019 14:19:48 +0200
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <6041653.oyV1gAGG9S@barry-scott-desktop>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <075fe2b4-ce04-7fe9-8250-d777fdd06047@withers.org>
 <6041653.oyV1gAGG9S@barry-scott-desktop>
Message-ID: <24370753.IIvyks4El3@hyperion>

On Wednesday, 15 May 2019 13:11:29 CEST Scott, Barry wrote:

> In my experience gc is low level noise only.
> Our work load is very heavy and its never been an issue.

It depends entirely on how many objects you have. With a few GBs worth 
of relatively small objects, a full garbage collection cycle can take 
over a minute. But in normal circumstances, the overhead indeed isn't 
relevant.

Bye,
		Maarten




From werner at thieprojects.ch  Wed May 15 14:22:29 2019
From: werner at thieprojects.ch (Werner Thie)
Date: Wed, 15 May 2019 10:22:29 -1000
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <24370753.IIvyks4El3@hyperion>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <075fe2b4-ce04-7fe9-8250-d777fdd06047@withers.org>
 <6041653.oyV1gAGG9S@barry-scott-desktop> <24370753.IIvyks4El3@hyperion>
Message-ID: <58afcc24-a2dd-da9e-8b69-b411a8e91be8@thieprojects.ch>

Aloha

the code below has proven to be a life saver together with manhole. It
might be a bit outdated but I usually create a manhole access allowing
me to inspect the server from within then using dumpObjects to look at
the sea of objects in the running process.

Even only watching the inner workings of a server is quite fun and
illuminating.

Werner

exc =[
"function",
"type",
"list",
"dict",
"tuple",
"wrapper_descriptor",
"module",
"method_descriptor",
"member_descriptor",
"instancemethod",
"builtin_function_or_method",
"frame",
"classmethod",
"classmethod_descriptor",
"_Environ",
"MemoryError",
"_Printer",
"_Helper",
"getset_descriptor",
"weakref"
]
inc =[
]
prev ={}
#delta - print delta between current and previous run
#limit - only print object count bigger than limit
#inc - include named objects in the dump
#exc - exclude named obects in the dump
defdumpObjects(delta=True, limit=0, include=inc, exclude=[]):
globalprev
ifinclude !=[] andexclude !=[]:
print'cannot use include and exclude at the same time'
return
print'working with:'
print' delta: ', delta
print' limit: ', limit
print' include: ', include
print' exclude: ', exclude
objects ={}
gc.collect()
oo =gc.get_objects()
foro inoo:
ifgetattr(o, "__class__", None):
name =o.__class__.__name__
if((exclude ==[] andinclude ==[]) or\
(exclude !=[] andname notinexclude) or\
(include !=[] andname ininclude)):
objects[name] =objects.get(name, 0) +1
## if more:
## print o
pk =prev.keys()
pk.sort()
names =objects.keys()
names.sort()
forname innames:
iflimit ==0orobjects[name] >limit:
ifnotprev.has_key(name):
prev[name] =objects[name]
dt =objects[name] -prev[name]
ifdelta ordt !=0:
print'%0.6d-- %0.6d-- '%(dt, objects[name]), name
prev[name] =objects[name]
defgetObjects(oname):
"""
gets an object list with all the named objects out of the sea of
gc'ed objects
"""
olist =[]
objects ={}
gc.collect()
oo =gc.get_objects()
foro inoo:
ifgetattr(o, "__class__", None):
name =o.__class__.__name__
if(name ==oname):
olist.append(o)
returnolist
On 5/15/19 02:19, Maarten ter Huurne wrote:
> On Wednesday, 15 May 2019 13:11:29 CEST Scott, Barry wrote:
>
>> In my experience gc is low level noise only.
>> Our work load is very heavy and its never been an issue.
> It depends entirely on how many objects you have. With a few GBs worth 
> of relatively small objects, a full garbage collection cycle can take 
> over a minute. But in normal circumstances, the overhead indeed isn't 
> relevant.
>
> Bye,
> 		Maarten
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190515/d3e9841f/attachment.html>

From trac at twistedmatrix.com  Sun May 19 00:05:17 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 19 May 2019 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1558245917.58.2374757704889409474@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190519/e4e088f6/attachment.html>

From thomas.westfeld at currenta.de  Mon May 20 01:21:33 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Mon, 20 May 2019 07:21:33 +0000
Subject: [Twisted-Python] Twisted Agent Python 2 ->3 Porting Pitfalls
Message-ID: <97d4876afa29415dbd96d7c566ff3920@BYEX35.de.bayer.cnb>

Dear all,

I just migrated some quite basic twisted code from Python 2.7 to Python 3. Everything worked quite nicely, the main issue was the correct handling of strings vs. bytes.

There was a mean error I made when using the Twisted Agent http client: I specified the method as a Unicode string, instead of using Agent.request(b'GET',b'http://whatever.com'). The mean thing is that the code does not produce any error. It connects to the server via TCP but then stops.

It is given correctly in the examples of the docs and also in the source code, but wouldn't it make things easier to make a type check in the request method if the method parameter is of type Unicode and raise an error?

Best regards,
Thomas Westfeld

From dholth at gmail.com  Thu May 23 06:47:32 2019
From: dholth at gmail.com (Daniel Holth)
Date: Thu, 23 May 2019 08:47:32 -0400
Subject: [Twisted-Python] magical and seamless asyncio support
In-Reply-To: <CB7FC780-FCBD-4150-A6A8-73F21C644103@twistedmatrix.com>
References: <CB7FC780-FCBD-4150-A6A8-73F21C644103@twistedmatrix.com>
Message-ID: <CAG8k2+5i=GKXVf-zfnxNCF0Bsgk+ptzrijQTfctSqKO69LrTNA@mail.gmail.com>

+1 that would be so helpful. "How can I use Django views in my Pyramid
application?" As a newcomer I have no idea whether a similar question
makes sense with the different async libraries. If the answer was
*yes* it would be simpler.


From glyph at twistedmatrix.com  Thu May 23 21:44:46 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 23 May 2019 20:44:46 -0700
Subject: [Twisted-Python] magical and seamless asyncio support
In-Reply-To: <CAG8k2+5i=GKXVf-zfnxNCF0Bsgk+ptzrijQTfctSqKO69LrTNA@mail.gmail.com>
References: <CB7FC780-FCBD-4150-A6A8-73F21C644103@twistedmatrix.com>
 <CAG8k2+5i=GKXVf-zfnxNCF0Bsgk+ptzrijQTfctSqKO69LrTNA@mail.gmail.com>
Message-ID: <DD683C9C-77CF-4BE6-8F2E-43EF44B2D86B@twistedmatrix.com>



> On May 23, 2019, at 5:47 AM, Daniel Holth <dholth at gmail.com> wrote:
> 
> +1 that would be so helpful. "How can I use Django views in my Pyramid
> application?" As a newcomer I have no idea whether a similar question
> makes sense with the different async libraries. If the answer was
> *yes* it would be simpler.

Great!

Any part of it you'd care to volunteer to implement? :)

-g


From twm at freecog.net  Thu May 23 22:08:42 2019
From: twm at freecog.net (Tom Most)
Date: Thu, 23 May 2019 21:08:42 -0700
Subject: [Twisted-Python] Twisted Agent Python 2 ->3 Porting Pitfalls
In-Reply-To: <97d4876afa29415dbd96d7c566ff3920@BYEX35.de.bayer.cnb>
References: <97d4876afa29415dbd96d7c566ff3920@BYEX35.de.bayer.cnb>
Message-ID: <246329e9-8fd9-4c70-b51a-e5da7b7698f9@www.fastmail.com>

This looks like a straightforward bug to me. I don't see any reason we can't change the implementation to either raise TypeError immediately or accept a string, since any code that passes a string doesn't work right now. Would you file a bug at https://twistedmatrix.com/trac/newticket?

---Tom

-- 
  Tom Most
  twm at freecog.net

On Mon, May 20, 2019, at 12:22 AM, Thomas Westfeld wrote:
> Dear all,
> 
> I just migrated some quite basic twisted code from Python 2.7 to Python 
> 3. Everything worked quite nicely, the main issue was the correct 
> handling of strings vs. bytes.
> 
> There was a mean error I made when using the Twisted Agent http client: 
> I specified the method as a Unicode string, instead of using 
> Agent.request(b'GET',b'http://whatever.com'). The mean thing is that 
> the code does not produce any error. It connects to the server via TCP 
> but then stops.
> 
> It is given correctly in the examples of the docs and also in the 
> source code, but wouldn't it make things easier to make a type check in 
> the request method if the method parameter is of type Unicode and raise 
> an error?
> 
> Best regards,
> Thomas Westfeld
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From glyph at twistedmatrix.com  Fri May 24 00:50:09 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 23 May 2019 23:50:09 -0700
Subject: [Twisted-Python] Twisted Agent Python 2 ->3 Porting Pitfalls
In-Reply-To: <246329e9-8fd9-4c70-b51a-e5da7b7698f9@www.fastmail.com>
References: <97d4876afa29415dbd96d7c566ff3920@BYEX35.de.bayer.cnb>
 <246329e9-8fd9-4c70-b51a-e5da7b7698f9@www.fastmail.com>
Message-ID: <39EFBFAC-6C14-4EE5-BC6D-338871D8AA6E@twistedmatrix.com>

I definitely agree with this!

-g

> On May 23, 2019, at 9:08 PM, Tom Most <twm at freecog.net> wrote:
> 
> This looks like a straightforward bug to me. I don't see any reason we can't change the implementation to either raise TypeError immediately or accept a string, since any code that passes a string doesn't work right now. Would you file a bug at https://twistedmatrix.com/trac/newticket?
> 
> ---Tom
> 
> -- 
>  Tom Most
>  twm at freecog.net
> 
> On Mon, May 20, 2019, at 12:22 AM, Thomas Westfeld wrote:
>> Dear all,
>> 
>> I just migrated some quite basic twisted code from Python 2.7 to Python 
>> 3. Everything worked quite nicely, the main issue was the correct 
>> handling of strings vs. bytes.
>> 
>> There was a mean error I made when using the Twisted Agent http client: 
>> I specified the method as a Unicode string, instead of using 
>> Agent.request(b'GET',b'http://whatever.com'). The mean thing is that 
>> the code does not produce any error. It connects to the server via TCP 
>> but then stops.
>> 
>> It is given correctly in the examples of the docs and also in the 
>> source code, but wouldn't it make things easier to make a type check in 
>> the request method if the method parameter is of type Unicode and raise 
>> an error?
>> 
>> Best regards,
>> Thomas Westfeld
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From jayachar88 at gmail.com  Fri May 24 06:19:13 2019
From: jayachar88 at gmail.com (Jayanth Acharya)
Date: Fri, 24 May 2019 17:49:13 +0530
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
Message-ID: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>

Hi,

Quick intro - I am new to Python, and come from Java background (with some
exposure to NIO). I am part of a small team setup for testing of some 5G
telecom network software that have micro-service decomposition and the
components communicate with each other using REST interface over HTTP/2.0
(over TLS).

>From my reading so far, I've come to realize that they don't use the
edge-HTTP/2.0 approach i.e. delegate HTTP/2.0 termination to nginx as proxy
then talk HTTP/1.1 internally, but each component is a HTTP/2.0 endpoint
(client and server as they switch roles).

My understanding is that Twisted framework supports HTTP/2.0 via hyper-h2.
>From a very quick read of the Twisted docs (and some stackoverflow Q&A) I
get the impression that it is possible to use Flask as the RESTful
web-service framework using HTTP/2.0 for the server-end, but perhaps there
is no Twisted framework provided HTTP/2.0 client at similar level of
abstraction, and one perhaps needs to use hyper-h2 at more nuts-n-bolts
level. I hope I am completely wrong on the latter part.

If someone could shed some clarity on the above, and if possible point to
some relevant tutorials and samples that may help me get started would be
highly appreciated.

cheers,
Jay
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190524/a248f93a/attachment.html>

From meejah at meejah.ca  Fri May 24 08:21:33 2019
From: meejah at meejah.ca (meejah)
Date: Fri, 24 May 2019 18:21:33 +0400
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 (Jayanth Acharya's message of "Fri, 24 May 2019 17:49:13 +0530")
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
Message-ID: <861s0ox79u.fsf@atlantis.meejah.ca>

Jayanth Acharya <jayachar88 at gmail.com> writes:

> From a very quick read of the Twisted docs (and some stackoverflow
> Q&A) I get the impression that it is possible to use Flask as the
> RESTful web-service framework using HTTP/2.0 for the server-end, but
> perhaps there is no Twisted framework provided HTTP/2.0 client at
> similar level of abstraction, and one perhaps needs to use hyper-h2 at
> more nuts-n-bolts level. I hope I am completely wrong on the latter
> part.

Flask is a threaded/synchronous framework. Klein provides something
similar based on Twisted on the server-side, and treq provides something
like requests at the client side.

Depending on what you're doing, you might also be interested in
Crossbar.io and Autobahn which provide RPC and PubSub services. There is
a "REST Bridge" here to bridge from plain HTTP (including HTTP/2)
services to the WAMP protocol (which does RPC and PubSub).

-- 
meejah


From jayachar88 at gmail.com  Fri May 24 11:52:55 2019
From: jayachar88 at gmail.com (Jayanth Acharya)
Date: Fri, 24 May 2019 23:22:55 +0530
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <861s0ox79u.fsf@atlantis.meejah.ca>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
Message-ID: <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>

Thanks Meejah. Appreciate your clearing up that Flask is not based on
twisted, not sure I got that impression earlier.
Checked Klein, and it seems quite promising (and seem quite similar to
Flask, from developer standpoint). From the documentation it was not quite
evident to me, as to how to use HTTP2 under Klein.
I did find a reference to HTTP2 in this pull-request, but again not clear
to me: https://github.com/twisted/klein/pull/113

Checked treq, but is it really advantageous over request ? Also found no
reference to HTTP2 in treq documents.

Alao thanks for the references to Crossbar.io and Autobahn. Will check them
out shortly.

cheers,
Jay


On Fri, May 24, 2019 at 7:52 PM meejah <meejah at meejah.ca> wrote:

> Jayanth Acharya <jayachar88 at gmail.com> writes:
>
> > From a very quick read of the Twisted docs (and some stackoverflow
> > Q&A) I get the impression that it is possible to use Flask as the
> > RESTful web-service framework using HTTP/2.0 for the server-end, but
> > perhaps there is no Twisted framework provided HTTP/2.0 client at
> > similar level of abstraction, and one perhaps needs to use hyper-h2 at
> > more nuts-n-bolts level. I hope I am completely wrong on the latter
> > part.
>
> Flask is a threaded/synchronous framework. Klein provides something
> similar based on Twisted on the server-side, and treq provides something
> like requests at the client side.
>
> Depending on what you're doing, you might also be interested in
> Crossbar.io and Autobahn which provide RPC and PubSub services. There is
> a "REST Bridge" here to bridge from plain HTTP (including HTTP/2)
> services to the WAMP protocol (which does RPC and PubSub).
>
> --
> meejah
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190524/eaf34416/attachment-0001.html>

From meejah at meejah.ca  Fri May 24 14:35:43 2019
From: meejah at meejah.ca (meejah)
Date: Sat, 25 May 2019 00:35:43 +0400
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
 (Jayanth Acharya's message of "Fri, 24 May 2019 23:22:55 +0530")
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
Message-ID: <86sgt3wpy8.fsf@atlantis.meejah.ca>

Jayanth Acharya <jayachar88 at gmail.com> writes:

> Checked Klein, and it seems quite promising (and seem quite similar to
> Flask, from developer standpoint). From the documentation it was not
> quite evident to me, as to how to use HTTP2 under Klein.

Klein uses Twisted Web underneath. So, it's "merely" a matter of
installing the right things essentially.

> Checked treq, but is it really advantageous over request ? Also found
> no reference to HTTP2 in treq documents.

Yes, because "requests" is a synchronous library that won't use Twisted
at all. As above, treq uses twisted web so it will use http2 if the
underlying twisted has been set up to use http2 (by installing the right
things).

p.s. if you need real-time help/discussion, #twisted on freenode is a
friendly and active channel.

Cheers,
meejah


From hawkowl at atleastfornow.net  Fri May 24 14:37:27 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sat, 25 May 2019 06:37:27 +1000
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <86sgt3wpy8.fsf@atlantis.meejah.ca>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
 <86sgt3wpy8.fsf@atlantis.meejah.ca>
Message-ID: <CAMxb2is0gNvchcvqCQnnMU8trGL3JT10BM8s-r+v+FPby6MwYA@mail.gmail.com>

To note -- Twisted does not currently have HTTP/2 client support, only
server support. Treq will not talk H2 at the moment, but Klein+Twisted will
happily serve it up.

- Amber

On Sat., 25 May 2019, 06:35 meejah, <meejah at meejah.ca> wrote:

> Jayanth Acharya <jayachar88 at gmail.com> writes:
>
> > Checked Klein, and it seems quite promising (and seem quite similar to
> > Flask, from developer standpoint). From the documentation it was not
> > quite evident to me, as to how to use HTTP2 under Klein.
>
> Klein uses Twisted Web underneath. So, it's "merely" a matter of
> installing the right things essentially.
>
> > Checked treq, but is it really advantageous over request ? Also found
> > no reference to HTTP2 in treq documents.
>
> Yes, because "requests" is a synchronous library that won't use Twisted
> at all. As above, treq uses twisted web so it will use http2 if the
> underlying twisted has been set up to use http2 (by installing the right
> things).
>
> p.s. if you need real-time help/discussion, #twisted on freenode is a
> friendly and active channel.
>
> Cheers,
> meejah
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190525/bbf348fb/attachment.html>

From glyph at twistedmatrix.com  Sat May 25 14:31:05 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 25 May 2019 13:31:05 -0700
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <CAMxb2is0gNvchcvqCQnnMU8trGL3JT10BM8s-r+v+FPby6MwYA@mail.gmail.com>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
 <86sgt3wpy8.fsf@atlantis.meejah.ca>
 <CAMxb2is0gNvchcvqCQnnMU8trGL3JT10BM8s-r+v+FPby6MwYA@mail.gmail.com>
Message-ID: <5B4BC97F-AEEA-4F0F-9754-E645C4925E0D@twistedmatrix.com>



> On May 24, 2019, at 1:37 PM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> To note -- Twisted does not currently have HTTP/2 client support, only server support. Treq will not talk H2 at the moment, but Klein+Twisted will happily serve it up.

This is simply a matter of nobody having implemented it yet though - if anyone would like to hook up twisted.web.client.Agent, and thereby treq, to HTTP/2, that would be great!

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190525/28688772/attachment.html>

From trac at twistedmatrix.com  Sun May 26 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 26 May 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1558850718.35.6863483362273029213@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190526/279488c2/attachment.html>

From jayachar88 at gmail.com  Sun May 26 01:17:45 2019
From: jayachar88 at gmail.com (Jayanth Acharya)
Date: Sun, 26 May 2019 12:47:45 +0530
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <CAMxb2is0gNvchcvqCQnnMU8trGL3JT10BM8s-r+v+FPby6MwYA@mail.gmail.com>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
 <86sgt3wpy8.fsf@atlantis.meejah.ca>
 <CAMxb2is0gNvchcvqCQnnMU8trGL3JT10BM8s-r+v+FPby6MwYA@mail.gmail.com>
Message-ID: <CAHDL-sy7HgVcuspGA7GMb5dK9x8TbxvKVdE1iUyaSf0BCgzn7g@mail.gmail.com>

Thanks for clearing that up.

On Sat, May 25, 2019 at 2:08 AM Amber Brown <hawkowl at atleastfornow.net>
wrote:

> To note -- Twisted does not currently have HTTP/2 client support, only
> server support. Treq will not talk H2 at the moment, but Klein+Twisted will
> happily serve it up.
>
> - Amber
>
> On Sat., 25 May 2019, 06:35 meejah, <meejah at meejah.ca> wrote:
>
>> Jayanth Acharya <jayachar88 at gmail.com> writes:
>>
>> > Checked Klein, and it seems quite promising (and seem quite similar to
>> > Flask, from developer standpoint). From the documentation it was not
>> > quite evident to me, as to how to use HTTP2 under Klein.
>>
>> Klein uses Twisted Web underneath. So, it's "merely" a matter of
>> installing the right things essentially.
>>
>> > Checked treq, but is it really advantageous over request ? Also found
>> > no reference to HTTP2 in treq documents.
>>
>> Yes, because "requests" is a synchronous library that won't use Twisted
>> at all. As above, treq uses twisted web so it will use http2 if the
>> underlying twisted has been set up to use http2 (by installing the right
>> things).
>>
>> p.s. if you need real-time help/discussion, #twisted on freenode is a
>> friendly and active channel.
>>
>> Cheers,
>> meejah
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190526/faacd374/attachment.html>

From jayachar88 at gmail.com  Sun May 26 01:19:27 2019
From: jayachar88 at gmail.com (Jayanth Acharya)
Date: Sun, 26 May 2019 12:49:27 +0530
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <5B4BC97F-AEEA-4F0F-9754-E645C4925E0D@twistedmatrix.com>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
 <86sgt3wpy8.fsf@atlantis.meejah.ca>
 <CAMxb2is0gNvchcvqCQnnMU8trGL3JT10BM8s-r+v+FPby6MwYA@mail.gmail.com>
 <5B4BC97F-AEEA-4F0F-9754-E645C4925E0D@twistedmatrix.com>
Message-ID: <CAHDL-sx5+c5Ui6MdHp9S6bcs2wG5YPZyyNmi-0QTsbc0VmKsMA@mail.gmail.com>

Thanks, understood. My Python knowledge is somewhat rudimentary and Twisted
knowledge even more so, but if the current project at hand can afford some
lax, I will see if I could help in any way. Even though Twisted is an
open-source, volunteer driven/implemented project, is there a roadmap for
Twisted ?

On Sun, May 26, 2019 at 2:01 AM Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On May 24, 2019, at 1:37 PM, Amber Brown <hawkowl at atleastfornow.net>
> wrote:
>
> To note -- Twisted does not currently have HTTP/2 client support, only
> server support. Treq will not talk H2 at the moment, but Klein+Twisted will
> happily serve it up.
>
>
> This is simply a matter of nobody having implemented it yet though - if
> anyone would like to hook up twisted.web.client.Agent, and thereby treq, to
> HTTP/2, that would be great!
>
> -g
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190526/b68cd482/attachment-0001.html>

From glyph at twistedmatrix.com  Sun May 26 01:32:44 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 26 May 2019 00:32:44 -0700
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <CAHDL-sx5+c5Ui6MdHp9S6bcs2wG5YPZyyNmi-0QTsbc0VmKsMA@mail.gmail.com>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
 <86sgt3wpy8.fsf@atlantis.meejah.ca>
 <CAMxb2is0gNvchcvqCQnnMU8trGL3JT10BM8s-r+v+FPby6MwYA@mail.gmail.com>
 <5B4BC97F-AEEA-4F0F-9754-E645C4925E0D@twistedmatrix.com>
 <CAHDL-sx5+c5Ui6MdHp9S6bcs2wG5YPZyyNmi-0QTsbc0VmKsMA@mail.gmail.com>
Message-ID: <145F9C48-C601-47BB-B0A0-9A7017DD0BE7@twistedmatrix.com>



> On May 26, 2019, at 12:19 AM, Jayanth Acharya <jayachar88 at gmail.com> wrote:
> 
> Thanks, understood. My Python knowledge is somewhat rudimentary and Twisted knowledge even more so, but if the current project at hand can afford some lax, I will see if I could help in any way. Even though Twisted is an open-source, volunteer driven/implemented project, is there a roadmap for Twisted ?
> 

Not really.  We do have >2000 open bugs, and we would like to have zero, so that is a roadmap of a kind :). But my attempts at roadmap-setting emails to this list have largely gone unanswered, so I'm not sure we have consensus around big long-term vision.

However, in general we want better integration with the stdlib asyncio, more debugging niceties, better practical logging tools, an overhauled HTTP server interface, and to eliminate the remainder of our py2-only legacy (as you can see here: http://blog.habnab.it/twisted-depgraph/ <http://blog.habnab.it/twisted-depgraph/> we're *almost* there!).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190526/1528f871/attachment.html>

From twm at freecog.net  Sun May 26 22:04:06 2019
From: twm at freecog.net (Tom Most)
Date: Sun, 26 May 2019 21:04:06 -0700
Subject: [Twisted-Python] Twisted Agent Python 2 ->3 Porting Pitfalls
In-Reply-To: <39EFBFAC-6C14-4EE5-BC6D-338871D8AA6E@twistedmatrix.com>
References: <97d4876afa29415dbd96d7c566ff3920@BYEX35.de.bayer.cnb>
 <246329e9-8fd9-4c70-b51a-e5da7b7698f9@www.fastmail.com>
 <39EFBFAC-6C14-4EE5-BC6D-338871D8AA6E@twistedmatrix.com>
Message-ID: <e1f6605d-d21f-467c-818d-f0b601cbcea8@www.fastmail.com>

I filed https://twistedmatrix.com/trac/ticket/9643 and submitted a PR: https://github.com/twisted/twisted/pull/1146

---Tom

On Thu, May 23, 2019, at 11:50 PM, Glyph wrote:
> I definitely agree with this!
> 
> -g
> 
> > On May 23, 2019, at 9:08 PM, Tom Most <twm at freecog.net> wrote:
> > 
> > This looks like a straightforward bug to me. I don't see any reason we can't change the implementation to either raise TypeError immediately or accept a string, since any code that passes a string doesn't work right now. Would you file a bug at https://twistedmatrix.com/trac/newticket?
> > 
> > ---Tom
> > 
> > -- 
> >  Tom Most
> >  twm at freecog.net
> > 
> > On Mon, May 20, 2019, at 12:22 AM, Thomas Westfeld wrote:
> >> Dear all,
> >> 
> >> I just migrated some quite basic twisted code from Python 2.7 to Python 
> >> 3. Everything worked quite nicely, the main issue was the correct 
> >> handling of strings vs. bytes.
> >> 
> >> There was a mean error I made when using the Twisted Agent http client: 
> >> I specified the method as a Unicode string, instead of using 
> >> Agent.request(b'GET',b'http://whatever.com'). The mean thing is that 
> >> the code does not produce any error. It connects to the server via TCP 
> >> but then stops.
> >> 
> >> It is given correctly in the examples of the docs and also in the 
> >> source code, but wouldn't it make things easier to make a type check in 
> >> the request method if the method parameter is of type Unicode and raise 
> >> an error?
> >> 
> >> Best regards,
> >> Thomas Westfeld
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >> 
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From contact at evilham.com  Mon May 27 03:16:54 2019
From: contact at evilham.com (Evilham)
Date: Mon, 27 May 2019 11:16:54 +0200
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
Message-ID: <fab69c35-a2ac-4173-ba61-ddd3c8c42f59@yggdrasil.evilham.com>

Hello,

On dv., maig 24 2019, Jayanth Acharya wrote:

> Thanks Meejah. Appreciate your clearing up that Flask is not 
> based on
> twisted, not sure I got that impression earlier.
> Checked Klein, and it seems quite promising (and seem quite 
> similar to
> Flask, from developer standpoint). From the documentation it was 
> not quite
> evident to me, as to how to use HTTP2 under Klein.
> I did find a reference to HTTP2 in this pull-request, but again 
> not clear
> to me: https://github.com/twisted/klein/pull/113
>
> Checked treq, but is it really advantageous over request ? Also 
> found no
> reference to HTTP2 in treq documents.
>
> Alao thanks for the references to Crossbar.io and Autobahn. Will 
> check them
> out shortly.


Just let me add something that may have been "obvious to everyone" 
on that PR and not to you at that point, but it will be "obvious" 
to you after the next 5-20 minutes:

Notice how that PR introduces the "endpoints" concept, that is a 
*very* useful concept in Twisted, which basically allows you to 
add support for pretty much any transport without any effort.

So, if you want to run an HTTP2 server, you need two things:

1. Read this bit of the klein and twisted documentation:
   https://klein.readthedocs.io/en/latest/examples/alternativerunning.html#example-ipv6-tls-unix-sockets-endpoints
   https://twistedmatrix.com/documents/current/core/howto/endpoints.html
2. Then you have to install the optional twisted[http2] dependency 
*and* because HTTP2 requires TLS, you have to enable that by using 
the endpoints API (e.g. in klein).

That's it for the server.

Twisted's documentation *could* be a bit better on this, if you 
want to take a go at it, I'm reasonably sure everyone would be 
happy.

The only mention I found for http2 on twisted docs is:
https://twistedmatrix.com/documents/current/installation/howto/optional.html?highlight=http2
There is also this article which AFAIK still applies, except the 
optional dependency is twisted[http2] instead of twisted[h2]:
https://pawelmhm.github.io/python/twisted/http2/python3/2016/07/30/twisted-http2.html

Notice that an easy one would be to edit the documentation I 
linked to before, and add an example that runs an HTTP2 server, 
future people like you will be able to find a small example with 
the search bar :-).
--
Evilham


From glyph at twistedmatrix.com  Mon May 27 16:15:17 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 27 May 2019 15:15:17 -0700
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <fab69c35-a2ac-4173-ba61-ddd3c8c42f59@yggdrasil.evilham.com>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
 <fab69c35-a2ac-4173-ba61-ddd3c8c42f59@yggdrasil.evilham.com>
Message-ID: <6A414C4B-F58B-4A75-B665-111A76F78410@twistedmatrix.com>

> On May 27, 2019, at 2:16 AM, Evilham <contact at evilham.com> wrote:
> 
> Twisted's documentation *could* be a bit better on this, if you want to take a go at it, I'm reasonably sure everyone would be happy.

Certainly I am happy any time anyone has a go at improving Twisted's docs - and this is an area I'd wager lots of people are interested in!

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190527/e629d3b5/attachment.html>

From thomas.westfeld at currenta.de  Tue May 28 00:14:56 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Tue, 28 May 2019 06:14:56 +0000
Subject: [Twisted-Python] Twisted Agent Python 2 ->3 Porting Pitfalls
In-Reply-To: <e1f6605d-d21f-467c-818d-f0b601cbcea8@www.fastmail.com>
References: <97d4876afa29415dbd96d7c566ff3920@BYEX35.de.bayer.cnb>
 <246329e9-8fd9-4c70-b51a-e5da7b7698f9@www.fastmail.com>
 <39EFBFAC-6C14-4EE5-BC6D-338871D8AA6E@twistedmatrix.com>
 <e1f6605d-d21f-467c-818d-f0b601cbcea8@www.fastmail.com>
Message-ID: <796af17c79b344a5b3bf1a75d30bfe82@BYEX35.de.bayer.cnb>

Dear Tom,

thanks for helping me out. I really appreciate it.

Best regards,
Thomas

-----Original Message-----
From: Twisted-Python [mailto:twisted-python-bounces at twistedmatrix.com] On 
Behalf Of Tom Most
Sent: Monday, May 27, 2019 6:04 AM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] Twisted Agent Python 2 ->3 Porting Pitfalls

I filed https://twistedmatrix.com/trac/ticket/9643 and submitted a PR: 
https://github.com/twisted/twisted/pull/1146

---Tom

On Thu, May 23, 2019, at 11:50 PM, Glyph wrote:
> I definitely agree with this!
>
> -g
>
> > On May 23, 2019, at 9:08 PM, Tom Most <twm at freecog.net> wrote:
> >
> > This looks like a straightforward bug to me. I don't see any reason we 
> > can't change the implementation to either raise TypeError immediately or 
> > accept a string, since any code that passes a string doesn't work right 
> > now. Would you file a bug at https://twistedmatrix.com/trac/newticket?
> >
> > ---Tom
> >
> > -- 
> >  Tom Most
> >  twm at freecog.net
> >
> > On Mon, May 20, 2019, at 12:22 AM, Thomas Westfeld wrote:
> >> Dear all,
> >>
> >> I just migrated some quite basic twisted code from Python 2.7 to Python
> >> 3. Everything worked quite nicely, the main issue was the correct
> >> handling of strings vs. bytes.
> >>
> >> There was a mean error I made when using the Twisted Agent http client:
> >> I specified the method as a Unicode string, instead of using
> >> Agent.request(b'GET',b'http://whatever.com'). The mean thing is that
> >> the code does not produce any error. It connects to the server via TCP
> >> but then stops.
> >>
> >> It is given correctly in the examples of the docs and also in the
> >> source code, but wouldn't it make things easier to make a type check in
> >> the request method if the method parameter is of type Unicode and raise
> >> an error?
> >>
> >> Best regards,
> >> Thomas Westfeld
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 6085 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20190528/a06bff97/attachment.bin>

From thomas.westfeld at currenta.de  Tue May 28 04:22:10 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Tue, 28 May 2019 10:22:10 +0000
Subject: [Twisted-Python] ldaptor problem with STARTTLS and python 3
Message-ID: <0bcc1651c6194595bde96b5890c2545c@BYEX35.de.bayer.cnb>

Dear all,

I am experiencing an error when trying to use the quick usage example posted on the ldaptor github page https://github.com/twisted/ldaptor . I have included the starttls command to promote the connection to an encrypted one, but I am experiencing an deprecation warning:

DeprecationWarning: LDAPStartTLSInvalidResponseName.__str__ method is deprecated and will not be used for getting bytes representation in the future releases, use LDAPStartTLSInvalidResponseName.toWire instead
  category=DeprecationWarning)

This puzzles me as I cannot track this error down. The usual strategy to introduce debugging print statements or start the debugger like "import pdb; pdb.set_trace()" does not work. I would appreciate help here how to debug this deferred code.

Besides this warning I am receiving no output whatsoever. Also print statements in the example method do not print anything, which is strange to me.

To debug it on a networking level, I have wiresharked the ldap communication and it seems fine (see below):

REQUEST

Transmission Control Protocol, Src Port: 53964, Dst Port: 389, Seq: 1, Ack: 1, Len: 31
Lightweight Directory Access Protocol
    LDAPMessage extendedReq(1)
        messageID: 1
        protocolOp: extendedReq (23)
            extendedReq
                requestName: 1.3.6.1.4.1.1466.20037 (LDAP_START_TLS_OID)
        [Response In: 2587]

RESPONSE

Transmission Control Protocol, Src Port: 389, Dst Port: 53964, Seq: 1, Ack: 32, Len: 46
Lightweight Directory Access Protocol
    LDAPMessage extendedResp(1)
        messageID: 1
        protocolOp: extendedResp (24)
            extendedResp
                resultCode: success (0)
                matchedDN: 
                errorMessage: 
                responseName: 1.3.6.1.4.1.1466.20037 (LDAP_START_TLS_OID)
        [Response To: 2581]
        [Time: 0.245555000 seconds]

I have posted the example code with the starttls command in this gist:

https://gist.github.com/westfeld/bb1d5e8727ce13910623933e041e9782

Thanks for your help!

Best regards,
Thomas

From adi at roiban.ro  Tue May 28 04:38:47 2019
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 28 May 2019 11:38:47 +0100
Subject: [Twisted-Python] ldaptor problem with STARTTLS and python 3
In-Reply-To: <0bcc1651c6194595bde96b5890c2545c@BYEX35.de.bayer.cnb>
References: <0bcc1651c6194595bde96b5890c2545c@BYEX35.de.bayer.cnb>
Message-ID: <CAFycZ9cxBHHqhiWP7hm+_ufvFHe12uvzNV0XzHoDZnZG-0nPGg@mail.gmail.com>

On Tue, 28 May 2019 at 11:22, Thomas Westfeld
<thomas.westfeld at currenta.de> wrote:
>
> Dear all,
>
> I am experiencing an error when trying to use the quick usage example posted on the ldaptor github page https://github.com/twisted/ldaptor . I have included the starttls command to promote the connection to an encrypted one, but I am experiencing an deprecation warning:
>
> DeprecationWarning: LDAPStartTLSInvalidResponseName.__str__ method is deprecated and will not be used for getting bytes representation in the future releases, use LDAPStartTLSInvalidResponseName.toWire instead
>   category=DeprecationWarning)
>
> This puzzles me as I cannot track this error down. The usual strategy to introduce debugging print statements or start the debugger like "import pdb; pdb.set_trace()" does not work. I would appreciate help here how to debug this deferred code.
>
> Besides this warning I am receiving no output whatsoever. Also print statements in the example method do not print anything, which is strange to me.
>
> To debug it on a networking level, I have wiresharked the ldap communication and it seems fine (see below):
>
> REQUEST
>
> Transmission Control Protocol, Src Port: 53964, Dst Port: 389, Seq: 1, Ack: 1, Len: 31
> Lightweight Directory Access Protocol
>     LDAPMessage extendedReq(1)
>         messageID: 1
>         protocolOp: extendedReq (23)
>             extendedReq
>                 requestName: 1.3.6.1.4.1.1466.20037 (LDAP_START_TLS_OID)
>         [Response In: 2587]
>
> RESPONSE
>
> Transmission Control Protocol, Src Port: 389, Dst Port: 53964, Seq: 1, Ack: 32, Len: 46
> Lightweight Directory Access Protocol
>     LDAPMessage extendedResp(1)
>         messageID: 1
>         protocolOp: extendedResp (24)
>             extendedResp
>                 resultCode: success (0)
>                 matchedDN:
>                 errorMessage:
>                 responseName: 1.3.6.1.4.1.1466.20037 (LDAP_START_TLS_OID)
>         [Response To: 2581]
>         [Time: 0.245555000 seconds]
>
> I have posted the example code with the starttls command in this gist:
>
> https://gist.github.com/westfeld/bb1d5e8727ce13910623933e041e9782

It looks like a bug.

With the Python3 migration the usage of the implicit __str__ for
serialization/marshaling of the LDAP messages was removed.

Please add a new issue/ticket/bug in Github for ldaptor.

I am debugging these things by patching the ldap code and adding a PDB call here
https://github.com/twisted/ldaptor/blob/d3c191921bd32c359a3e4974c2251f9af852ab2b/ldaptor/_encoder.py#L56

then you can go up and see where str is called, and consider if it
should be repalced with .toWire()

Cheers

-- 
Adi Roiban


From griatch at gmail.com  Tue May 28 05:04:05 2019
From: griatch at gmail.com (Griatch Art)
Date: Tue, 28 May 2019 13:04:05 +0200
Subject: [Twisted-Python] Binary wheels for Twisted on Windows?
Message-ID: <CAJmuMNd9LfSjahxGEf2H15BXZDkUmxgRJ6dEvJnosDH1mhPK_g@mail.gmail.com>

Hi,

I'm investigating installing the Evennia MU* server on Windows. We use
Twisted and will be requiring Python3.7 in our next release. I need to make
easy-to-use install instructions since a lot of Windows users use our
library.

I tested with a Windows7 64bit VM and installed everything from scratch to
emulate what a non-dev Windows user would see. I don't have Windows10 so
can't compare to the install experience there (but Windows7 64bit is still
relevant, having something like 24% of the active Windows user-base
according to Steam).

Using pip to install Evennia, at the Twisted requirement install step I run
into an error telling me that I need "Microsoft Visual C++ build tools"
from the URL https://visualstudio.microsoft.com/downloads. The first issue
is that there does not appear to be any build-tools package named like that
on that page or sub-page (at least not what I could find after digging
around). I tried to install a few similarly-named packages, like "Visual
Studio Build Tools", but  had no luck getting past the Twisted install
point. So that recommendation-string should likely be updated.

The thing is though, while I could probably personally figure out how to
set it up eventually, our Windows users are likely the least tech-savvy of
our users. Requiring them to set up a compiler environment (despite us
telling them that Python code does not need compilation) a bit too much.
It seems Twisted has distributed binary Windows wheels in the past, would
it be possible to get them again? Or should I recommend some other,
specific install procedure for our Windows users?

Cheers,
Griatch, Evennia dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190528/3d82a394/attachment.html>

From barry.scott at forcepoint.com  Tue May 28 06:49:53 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Tue, 28 May 2019 12:49:53 +0000
Subject: [Twisted-Python] Binary wheels for Twisted on Windows?
In-Reply-To: <CAJmuMNd9LfSjahxGEf2H15BXZDkUmxgRJ6dEvJnosDH1mhPK_g@mail.gmail.com>
References: <CAJmuMNd9LfSjahxGEf2H15BXZDkUmxgRJ6dEvJnosDH1mhPK_g@mail.gmail.com>
Message-ID: <12678863.H2nu75emEu@barry-scott-desktop>

On Tuesday, 28 May 2019 12:04:05 BST Griatch Art wrote:
> Hi,
> 
> I'm investigating installing the Evennia MU* server on Windows. We use
> Twisted and will be requiring Python3.7 in our next release. I need to make
> easy-to-use install instructions since a lot of Windows users use our
> library.
> 
> I tested with a Windows7 64bit VM and installed everything from scratch to
> emulate what a non-dev Windows user would see. I don't have Windows10 so
> can't compare to the install experience there (but Windows7 64bit is still
> relevant, having something like 24% of the active Windows user-base
> according to Steam).
> 
> Using pip to install Evennia, at the Twisted requirement install step I run
> into an error telling me that I need "Microsoft Visual C++ build tools"
> from the URL https://visualstudio.microsoft.com/downloads. The first issue
> is that there does not appear to be any build-tools package named like that
> on that page or sub-page (at least not what I could find after digging
> around). I tried to install a few similarly-named packages, like "Visual
> Studio Build Tools", but  had no luck getting past the Twisted install
> point. So that recommendation-string should likely be updated.
> 
> The thing is though, while I could probably personally figure out how to
> set it up eventually, our Windows users are likely the least tech-savvy of
> our users. Requiring them to set up a compiler environment (despite us
> telling them that Python code does not need compilation) a bit too much.
> It seems Twisted has distributed binary Windows wheels in the past, would
> it be possible to get them again? Or should I recommend some other,
> specific install procedure for our Windows users?
> 
> Cheers,
> Griatch, Evennia dev

What I do for my python projects on windows is turn them into a setup.exe that 
the user can run in the traditional way. There are many tools to help you do 
this. Then the user does not need to install anything except your setup.exe.

You do not need python installed on the users system.
And you can sort out the compilation issues when you kit the project.

Make sure you use the right version of visual C++ that matches your
python version.  See https://wiki.python.org/moin/WindowsCompilers
(Assume the same compiler for 3.7 and 3.8 as 3.6).

I package pysvn, Barry's Emacs and SCM workbench this way for windows.
You can use a similar approach for macOS.

Barry




From thomas.westfeld at currenta.de  Tue May 28 08:05:29 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Tue, 28 May 2019 14:05:29 +0000
Subject: [Twisted-Python] Binary wheels for Twisted on Windows?
In-Reply-To: <12678863.H2nu75emEu@barry-scott-desktop>
References: <CAJmuMNd9LfSjahxGEf2H15BXZDkUmxgRJ6dEvJnosDH1mhPK_g@mail.gmail.com>
 <12678863.H2nu75emEu@barry-scott-desktop>
Message-ID: <d320a2e14d4d4457b6f5e3b1bcbb8747@BYEX35.de.bayer.cnb>

>On Tuesday, 28 May 2019 12:04:05 BST Griatch Art wrote:
>> Hi,
>>
>> I'm investigating installing the Evennia MU* server on Windows. We use
>> Twisted and will be requiring Python3.7 in our next release. I need to make
>> easy-to-use install instructions since a lot of Windows users use our
>> library.
>>
>> I tested with a Windows7 64bit VM and installed everything from scratch to
>> emulate what a non-dev Windows user would see. I don't have Windows10 so
>> can't compare to the install experience there (but Windows7 64bit is still
>> relevant, having something like 24% of the active Windows user-base
>> according to Steam).
>>
>> Using pip to install Evennia, at the Twisted requirement install step I run
>> into an error telling me that I need "Microsoft Visual C++ build tools"
>> from the URL https://visualstudio.microsoft.com/downloads. The first issue
>> is that there does not appear to be any build-tools package named like that
>> on that page or sub-page (at least not what I could find after digging
>> around). I tried to install a few similarly-named packages, like "Visual
>> Studio Build Tools", but  had no luck getting past the Twisted install
>> point. So that recommendation-string should likely be updated.
>>
>> The thing is though, while I could probably personally figure out how to
>> set it up eventually, our Windows users are likely the least tech-savvy of
>> our users. Requiring them to set up a compiler environment (despite us
>> telling them that Python code does not need compilation) a bit too much.
>> It seems Twisted has distributed binary Windows wheels in the past, would
>> it be possible to get them again? Or should I recommend some other,
>> specific install procedure for our Windows users?
>>
>> Cheers,
>> Griatch, Evennia dev
>
>What I do for my python projects on windows is turn them into a setup.exe that
>the user can run in the traditional way. There are many tools to help you do
>this. Then the user does not need to install anything except your setup.exe.
>
>You do not need python installed on the users system.
>And you can sort out the compilation issues when you kit the project.
>
>Make sure you use the right version of visual C++ that matches your
>python version.  See https://wiki.python.org/moin/WindowsCompilers
>(Assume the same compiler for 3.7 and 3.8 as 3.6).
>
>I package pysvn, Barry's Emacs and SCM workbench this way for windows.
>You can use a similar approach for macOS.
>
>Barry
>
Hi Barry,

that sounds very interesting. Could you give me a hint which toolchain you are using to create a all in one setup.exe including Python and the dependencies needed?

Thanks,
Thomas

From barry.scott at forcepoint.com  Tue May 28 08:57:35 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Tue, 28 May 2019 14:57:35 +0000
Subject: [Twisted-Python] Binary wheels for Twisted on Windows?
In-Reply-To: <d320a2e14d4d4457b6f5e3b1bcbb8747@BYEX35.de.bayer.cnb>
References: <CAJmuMNd9LfSjahxGEf2H15BXZDkUmxgRJ6dEvJnosDH1mhPK_g@mail.gmail.com>
 <12678863.H2nu75emEu@barry-scott-desktop>
 <d320a2e14d4d4457b6f5e3b1bcbb8747@BYEX35.de.bayer.cnb>
Message-ID: <2380286.KybYbdcnpE@barry-scott-desktop>

On Tuesday, 28 May 2019 15:05:29 BST Thomas Westfeld wrote:
> >On Tuesday, 28 May 2019 12:04:05 BST Griatch Art wrote:
> >
> >> Hi,
> >>
> >>
> >>
> >> I'm investigating installing the Evennia MU* server on Windows. We use
> >> Twisted and will be requiring Python3.7 in our next release. I need to
> >> make
 easy-to-use install instructions since a lot of Windows users use
> >> our library.
> >>
> >>
> >>
> >> I tested with a Windows7 64bit VM and installed everything from scratch
> >> to
> >> emulate what a non-dev Windows user would see. I don't have Windows10 so
> >> can't compare to the install experience there (but Windows7 64bit is
> >> still
> >> relevant, having something like 24% of the active Windows user-base
> >> according to Steam).
> >>
> >>
> >>
> >> Using pip to install Evennia, at the Twisted requirement install step I
> >> run
 into an error telling me that I need "Microsoft Visual C++ build
> >> tools" from the URL https://visualstudio.microsoft.com/downloads. The
> >> first issue is that there does not appear to be any build-tools package
> >> named like that on that page or sub-page (at least not what I could find
> >> after digging around). I tried to install a few similarly-named
> >> packages, like "Visual Studio Build Tools", but  had no luck getting
> >> past the Twisted install point. So that recommendation-string should
> >> likely be updated.
> >>
> >>
> >>
> >> The thing is though, while I could probably personally figure out how to
> >> set it up eventually, our Windows users are likely the least tech-savvy
> >> of
> >> our users. Requiring them to set up a compiler environment (despite us
> >> telling them that Python code does not need compilation) a bit too much.
> >> It seems Twisted has distributed binary Windows wheels in the past,
> >> would
> >> it be possible to get them again? Or should I recommend some other,
> >> specific install procedure for our Windows users?
> >>
> >>
> >>
> >> Cheers,
> >> Griatch, Evennia dev
> >
> >
> >What I do for my python projects on windows is turn them into a setup.exe
> >that
 the user can run in the traditional way. There are many tools to
> >help you do this. Then the user does not need to install anything except
> >your setup.exe. 
> >You do not need python installed on the users system.
> >And you can sort out the compilation issues when you kit the project.
> >
> >Make sure you use the right version of visual C++ that matches your
> >python version.  See https://wiki.python.org/moin/WindowsCompilers
> >(Assume the same compiler for 3.7 and 3.8 as 3.6).
> >
> >I package pysvn, Barry's Emacs and SCM workbench this way for windows.
> >You can use a similar approach for macOS.
> >
> >Barry
> >
> 
> Hi Barry,
> 
> that sounds very interesting. Could you give me a hint which toolchain you
> are using to create a all in one setup.exe including Python and the
> dependencies needed?

You can see the code I use for Barry's Emacs on github. Barry's Emacs
uses PyQt for its

Here is the script that builds the app:

https://github.com/barry-scott/BarrysEmacs/blob/master/Editor/PyQtBEmacs/
bemacs-windows.cmd

It uses https://pypi.org/project/win-app-packager/ to do the heavy lifting.
I have already built the python extension that is used by this point in the 
build process.

Then look at this script that builds the setup.exe:

https://github.com/barry-scott/BarrysEmacs/blob/master/Kits/Windows/build-windows.cmd

It uses Inno installer from http://www.jrsoftware.org/isinfo.php

Barry




From thomas.westfeld at currenta.de  Wed May 29 01:20:56 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Wed, 29 May 2019 07:20:56 +0000
Subject: [Twisted-Python] ldaptor problem with STARTTLS and python 3
In-Reply-To: <CAFycZ9cxBHHqhiWP7hm+_ufvFHe12uvzNV0XzHoDZnZG-0nPGg@mail.gmail.com>
References: <0bcc1651c6194595bde96b5890c2545c@BYEX35.de.bayer.cnb>
 <CAFycZ9cxBHHqhiWP7hm+_ufvFHe12uvzNV0XzHoDZnZG-0nPGg@mail.gmail.com>
Message-ID: <3c96142b2aac452098339162f0f095e9@BYEX35.de.bayer.cnb>

>-----Original Message-----
>From: Twisted-Python [mailto:twisted-python-bounces at twistedmatrix.com] On
>Behalf Of Adi Roiban
>Sent: Tuesday, May 28, 2019 12:39 PM
>To: Twisted general discussion
>Subject: Re: [Twisted-Python] ldaptor problem with STARTTLS and python 3
>
>On Tue, 28 May 2019 at 11:22, Thomas Westfeld
><thomas.westfeld at currenta.de> wrote:
>>
>> Dear all,
>>
>> I am experiencing an error when trying to use the quick usage example posted on
>the ldaptor github page https://github.com/twisted/ldaptor . I have included the
>starttls command to promote the connection to an encrypted one, but I am
>experiencing an deprecation warning:
>>
>> DeprecationWarning: LDAPStartTLSInvalidResponseName.__str__ method is
>deprecated and will not be used for getting bytes representation in the future
>releases, use LDAPStartTLSInvalidResponseName.toWire instead
>>   category=DeprecationWarning)
>>
>> This puzzles me as I cannot track this error down. The usual strategy to introduce
>debugging print statements or start the debugger like "import pdb; pdb.set_trace()"
>does not work. I would appreciate help here how to debug this deferred code.
>>
>> Besides this warning I am receiving no output whatsoever. Also print statements in
>the example method do not print anything, which is strange to me.
>>
>> To debug it on a networking level, I have wiresharked the ldap communication and
>it seems fine (see below):
>>
>> REQUEST
>>
>> Transmission Control Protocol, Src Port: 53964, Dst Port: 389, Seq: 1, Ack: 1,
>Len: 31
>> Lightweight Directory Access Protocol
>>     LDAPMessage extendedReq(1)
>>         messageID: 1
>>         protocolOp: extendedReq (23)
>>             extendedReq
>>                 requestName: 1.3.6.1.4.1.1466.20037 (LDAP_START_TLS_OID)
>>         [Response In: 2587]
>>
>> RESPONSE
>>
>> Transmission Control Protocol, Src Port: 389, Dst Port: 53964, Seq: 1, Ack: 32,
>Len: 46
>> Lightweight Directory Access Protocol
>>     LDAPMessage extendedResp(1)
>>         messageID: 1
>>         protocolOp: extendedResp (24)
>>             extendedResp
>>                 resultCode: success (0)
>>                 matchedDN:
>>                 errorMessage:
>>                 responseName: 1.3.6.1.4.1.1466.20037 (LDAP_START_TLS_OID)
>>         [Response To: 2581]
>>         [Time: 0.245555000 seconds]
>>
>> I have posted the example code with the starttls command in this gist:
>>
>> https://gist.github.com/westfeld/bb1d5e8727ce13910623933e041e9782
>
>It looks like a bug.
>
>With the Python3 migration the usage of the implicit __str__ for
>serialization/marshaling of the LDAP messages was removed.
>
>Please add a new issue/ticket/bug in Github for ldaptor.
>
>I am debugging these things by patching the ldap code and adding a PDB call here
>https://github.com/twisted/ldaptor/blob/d3c191921bd32c359a3e4974c2251f9af852a
>b2b/ldaptor/_encoder.py#L56
>
>then you can go up and see where str is called, and consider if it
>should be repalced with .toWire()
>
>Cheers
>
>--
>Adi Roiban

Dear all,

it turns out to be an issue with binary vs. string. The __str__ method was called by the errback only. This has been fixed in pull request #147 already. All the observed errors have been fixed in the pre-release 19.1 version of ldaptor. The example is working with STARTTLS when using HEAD.

Thanks for the great community for fixing things so quickly.

I am looking forward to the 19.1. release.


Regards,
Thomas

From adi at roiban.ro  Wed May 29 07:15:16 2019
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 29 May 2019 14:15:16 +0100
Subject: [Twisted-Python] ldaptor problem with STARTTLS and python 3
In-Reply-To: <3c96142b2aac452098339162f0f095e9@BYEX35.de.bayer.cnb>
References: <0bcc1651c6194595bde96b5890c2545c@BYEX35.de.bayer.cnb>
 <CAFycZ9cxBHHqhiWP7hm+_ufvFHe12uvzNV0XzHoDZnZG-0nPGg@mail.gmail.com>
 <3c96142b2aac452098339162f0f095e9@BYEX35.de.bayer.cnb>
Message-ID: <CAFycZ9ev3O1-6Vof1TkVDLVmK0gLwPOZaApJdctmTum0Hg8R_Q@mail.gmail.com>

On Wed, 29 May 2019 at 08:21, Thomas Westfeld
<thomas.westfeld at currenta.de> wrote:
>

[snip]

> Dear all,
>
> it turns out to be an issue with binary vs. string. The __str__ method was called by the errback only. This has been fixed in pull request #147 already. All the observed errors have been fixed in the pre-release 19.1 version of ldaptor. The example is working with STARTTLS when using HEAD.
>
> Thanks for the great community for fixing things so quickly.
>
> I am looking forward to the 19.1. release.
>

Hi Thomas,

If you have time, you can check https://github.com/twisted/ldaptor/pull/148

I guess that once that PR is merged we can make a new public release

Are you testing this on Python2 or Python3?

-- 
Adi Roiban


From thomas.westfeld at currenta.de  Wed May 29 08:42:53 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Wed, 29 May 2019 14:42:53 +0000
Subject: [Twisted-Python] ldaptor problem with STARTTLS and python 3
In-Reply-To: <CAFycZ9ev3O1-6Vof1TkVDLVmK0gLwPOZaApJdctmTum0Hg8R_Q@mail.gmail.com>
References: <0bcc1651c6194595bde96b5890c2545c@BYEX35.de.bayer.cnb>
 <CAFycZ9cxBHHqhiWP7hm+_ufvFHe12uvzNV0XzHoDZnZG-0nPGg@mail.gmail.com>
 <3c96142b2aac452098339162f0f095e9@BYEX35.de.bayer.cnb>
 <CAFycZ9ev3O1-6Vof1TkVDLVmK0gLwPOZaApJdctmTum0Hg8R_Q@mail.gmail.com>
Message-ID: <482ca95837a74b5bb2918224429f8c27@BYEX35.de.bayer.cnb>

>On Wed, 29 May 2019 at 08:21, Thomas Westfeld
><thomas.westfeld at currenta.de> wrote:
>>
>
>[snip]
>
>> Dear all,
>>
>> it turns out to be an issue with binary vs. string. The __str__ method was called by
>the errback only. This has been fixed in pull request #147 already. All the observed
>errors have been fixed in the pre-release 19.1 version of ldaptor. The example is
>working with STARTTLS when using HEAD.
>>
>> Thanks for the great community for fixing things so quickly.
>>
>> I am looking forward to the 19.1. release.
>>
>
>Hi Thomas,
>
>If you have time, you can check https://github.com/twisted/ldaptor/pull/148
>
>I guess that once that PR is merged we can make a new public release
>
>Are you testing this on Python2 or Python3?
>

I am testing this both on Python 2.7 and on Python 3.6, however for my production setting I want to go to Python 3.6 or 3.7 respectively. The sundowning of Python 2.7 forced me to port my programs.

>--
>Adi Roiban
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

From glyph at twistedmatrix.com  Thu May 30 13:05:59 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 30 May 2019 12:05:59 -0700
Subject: [Twisted-Python] farewell to twisted.news
Message-ID: <DB85B199-B55E-412D-A855-81E626210941@twistedmatrix.com>

I've just approved a PR to deprecate twisted.news, which paves the way for its removal, as Hawkie brought up over a year ago: https://twistedmatrix.com/pipermail/twisted-python/2018-April/031882.html <https://twistedmatrix.com/pipermail/twisted-python/2018-April/031882.html>

As such, I've removed the success story from our website which references twisted.news:

https://twistedmatrix.com/trac/wiki/SuccessStories?action=diff&version=33 <https://twistedmatrix.com/trac/wiki/SuccessStories?action=diff&version=33>

If you love NNTP, and would like to help this package stick around by maintaining it, that would be great!  However, please note that at this point it's not worth discussing unless you have the actual free time to dedicate to doing the py3 port, cleaning up the test coverage, and generally keeping it updated and maintained going forward.  Any PR wanting to un-deprecate it is also going to have to get it working on py3 :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190530/cf5877e3/attachment.html>

From hs at ox.cx  Fri May 31 00:39:58 2019
From: hs at ox.cx (Hynek Schlawack)
Date: Fri, 31 May 2019 08:39:58 +0200
Subject: [Twisted-Python] farewell to twisted.news
In-Reply-To: <DB85B199-B55E-412D-A855-81E626210941@twistedmatrix.com>
References: <DB85B199-B55E-412D-A855-81E626210941@twistedmatrix.com>
Message-ID: <7BE76BCE-AE24-4AE6-96E0-13660750ADC4@ox.cx>

> If you love NNTP, and would like to help this package stick around by maintaining it, that would be great!  However, please note that at this point it's not worth discussing unless you have the actual free time to dedicate to doing the py3 port, cleaning up the test coverage, and generally keeping it updated and maintained going forward.  Any PR wanting to un-deprecate it is also going to have to get it working on py3 :-).

I don’t think this is necessarily the narrative that ought to be had in 2019.

I’d push for: if you love NNTP and want it to stick around, do all the work, put it on PyPI, and if it’s good, we’ll move it into the Twisted orga on GitHub.  NNTP support looks quite independent to me and at this point we can/should apply Amber’s core summit talk to Twisted’s batteries just as well..

Cheers,
—h

P.S. Please don’t storm out of the room. ;)

From glyph at twistedmatrix.com  Fri May 31 01:01:50 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 31 May 2019 00:01:50 -0700
Subject: [Twisted-Python] farewell to twisted.news
In-Reply-To: <7BE76BCE-AE24-4AE6-96E0-13660750ADC4@ox.cx>
References: <DB85B199-B55E-412D-A855-81E626210941@twistedmatrix.com>
 <7BE76BCE-AE24-4AE6-96E0-13660750ADC4@ox.cx>
Message-ID: <BE9F7D07-67B0-4712-B597-2BD0AE27F019@twistedmatrix.com>



> On May 30, 2019, at 11:39 PM, Hynek Schlawack <hs at ox.cx> wrote:
> 
>> If you love NNTP, and would like to help this package stick around by maintaining it, that would be great!  However, please note that at this point it's not worth discussing unless you have the actual free time to dedicate to doing the py3 port, cleaning up the test coverage, and generally keeping it updated and maintained going forward.  Any PR wanting to un-deprecate it is also going to have to get it working on py3 :-).
> 
> I don’t think this is necessarily the narrative that ought to be had in 2019.
> 
> I’d push for: if you love NNTP and want it to stick around, do all the work, put it on PyPI, and if it’s good, we’ll move it into the Twisted orga on GitHub.  NNTP support looks quite independent to me and at this point we can/should apply Amber’s core summit talk to Twisted’s batteries just as well..

This is a nice hypothetical, since I very much doubt that anyone cares enough to resurrect NNTP, so it's nice to discuss without the possibility that reality will rear its ugly head ;-).

In principle I agree with you.  The major practical issue that gets in the way here, if we were to, say, try to do this with twisted.mail, twisted.conch, and twisted.positioning tomorrow (and that makes the existing somewhat large matrix of ancillary projects under the Twisted org somewhat of a maintenance nightmare) is the non-replicability of our various CI setups.

I do ~nothing (other than code reviews) to maintain Twisted these days except for shuffle YAML files back and forth between Appveyor and Travis and Circle and Azure and Codecov and Read The Docs and Coveralls and frankly I'm a bit sick of it.  Already, Klein, Treq, and the Divmod universe lag/diverge somewhat; Ldaptor is completely separately maintained.  The idea of manually redoing this work across a massively exploded matrix of subprojects makes me dizzy.

That said this problem is far from intractable.  Computers are great at automating things, especially other computers.  One thing that occurs to me is that if we maintained a repository containing a cookiecutter template that could be re-run to regenerate the best-practice CI configuration for each project from some minimal configuration ("what python versions do you support", "do you have C modules", "what operating systems do you care about testing on"), rather than editing the CI configuration directly, we could possibly make cross-cutting CI changes there, and then re-apply it to all relevant projects.

This will only become more critical as we do stuff like auto-release to PyPI, uploading wheels from CI artifacts.  Which we're doing, like, any day now, right? :)

And, hey, Hynek, you're an expert on how open source projects should be set up, right?  Didn't you give a talk about it recently?  Maybe you could make that repeatable? ;-)

If spinning up a new project were as simple as "run this script to create a repo already hooked up to all the maximally-awesome Twisted-level continuous integration goodness", I'd feel much better about our already-planned (deferred, filepath) and possible future (basically all protocols but HTTP and AMP probably) split-out projects.

Finally of course we need that bot that we keep talking about which allows external contributors to re-request reviews so we can build https://twistedmatrix.com/highscores/ <https://twistedmatrix.com/highscores/> and https://twisted.reviews/ <https://twisted.reviews/> on Github, so that other projects can have a unified view across the whole Twisted org ;-).

> Cheers,
> —h
> 
> P.S. Please don’t storm out of the room. ;)

Heaven forfend.

-g


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190531/45867aa3/attachment.html>

From glyph at twistedmatrix.com  Fri May 31 22:54:16 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 31 May 2019 21:54:16 -0700
Subject: [Twisted-Python] Binary wheels for Twisted on Windows?
In-Reply-To: <12678863.H2nu75emEu@barry-scott-desktop>
References: <CAJmuMNd9LfSjahxGEf2H15BXZDkUmxgRJ6dEvJnosDH1mhPK_g@mail.gmail.com>
 <12678863.H2nu75emEu@barry-scott-desktop>
Message-ID: <866C699E-A708-4A3F-9A0D-E9CB539FCFCD@twistedmatrix.com>


> On May 28, 2019, at 5:49 AM, Scott, Barry <barry.scott at forcepoint.com> wrote:
> 
> What I do for my python projects on windows is turn them into a setup.exe that 
> the user can run in the traditional way. There are many tools to help you do 
> this. Then the user does not need to install anything except your setup.exe.
> 

This works nicely for projects which are intended as applications, but for development dependencies it's a bit of a headache.  We used to do this with Twisted and stopped because it causes too many problems with people trying to follow best practices (setting up virtualenvs, for example).

We can fix this problem with binary wheels, and we should.  Releases to PyPI should be automatically made by CI, and then we don't have to bother anyone to actually keep a personal development environment around at release time.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190531/4c7ad356/attachment.html>

From glyph at twistedmatrix.com  Wed May  1 00:01:00 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 30 Apr 2019 23:01:00 -0700
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <31ac3952-157e-4af7-bad3-7d47f36bbc08@egh.com>
References: <31ac3952-157e-4af7-bad3-7d47f36bbc08@egh.com>
Message-ID: <90BFB5FF-5AE3-4E74-866D-F14721CF9387@twistedmatrix.com>

> On Apr 28, 2019, at 8:01 AM, John Santos <john at egh.com> wrote:
> I've been having ongoing problems accessing the TwistedMatrix site.  (Tried both Firefox and Chrome from my home PC.)
> 
The site was having some issues and the server badly needed a reboot during the time you were trying to access it.
> I've been trying to log in to update issue 9629 below to report it is a duplicate of a known problem.  (Can't tell you WHICH known problem because I can't search the Twisted tickets.)
> 
Hopefully the search function is back?  But also you can try searching with Google, using 'site:twistedmatrix.com/trac/ticket'.
> On Monday evening, when I submitted this issue, I filled in the form and nothing appeared to happen.  (I may have even submitted it twice.)
> 
> I searched the tickets and discovered 1) it didn't appear (so no ticket?) and 2) it seemed to be the same as a previously reported problem, so I added a comment to the previous ticket that I was seeing the same issue and a little context that might help.  (I only started seeing it with Twisted 19.2.0, but the original report said it was under 18.4.0 which I had been running uneventfully since last summer.)
> 
> Anyway, I got no feedback, so I assumed my initial attempt to create a ticket had failed.
> 
> Someone with access, please mark #9629 as a duplicate and close.
> 
Done.  Looks like https://twistedmatrix.com/trac/ticket/9462 <https://twistedmatrix.com/trac/ticket/9462> was the issue in question; I see your comment on it.

Thanks for writing the email to follow up :).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190430/b8d86832/attachment-0002.html>

From john at egh.com  Wed May  1 01:07:55 2019
From: john at egh.com (John Santos)
Date: Wed, 1 May 2019 03:07:55 -0400
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <90BFB5FF-5AE3-4E74-866D-F14721CF9387@twistedmatrix.com>
References: <31ac3952-157e-4af7-bad3-7d47f36bbc08@egh.com>
 <90BFB5FF-5AE3-4E74-866D-F14721CF9387@twistedmatrix.com>
Message-ID: <ae9afb79-522e-81c4-f226-2bd1be8139e3@egh.com>

On 5/1/2019 02:01 AM, Glyph wrote:
>> On Apr 28, 2019, at 8:01 AM, John Santos <john at egh.com 
>> <mailto:john at egh.com>> wrote:
>>
>> I've been having ongoing problems accessing the TwistedMatrix site.  
>> (Tried both Firefox and Chrome from my home PC.)
>>
> The site was having some issues and the server badly needed a reboot 
> during the time you were trying to access it.
>>
>> I've been trying to log in to update issue 9629 below to report it is 
>> a duplicate of a known problem.  (Can't tell you WHICH known problem 
>> because I can't search the Twisted tickets.)
>>
> Hopefully the search function is back?  But also you can try searching 
> with Google, using 'site:twistedmatrix.com/trac/ticket' 
> <http://twistedmatrix.com/trac/ticket'>.
>>
>> On Monday evening, when I submitted this issue, I filled in the form 
>> and nothing appeared to happen.  (I may have even submitted it twice.)
>>
>> I searched the tickets and discovered 1) it didn't appear (so no 
>> ticket?) and 2) it seemed to be the same as a previously reported 
>> problem, so I added a comment to the previous ticket that I was seeing 
>> the same issue and a little context that might help.  (I only started 
>> seeing it with Twisted 19.2.0, but the original report said it was 
>> under 18.4.0 which I had been running uneventfully since last summer.)
>>
>> Anyway, I got no feedback, so I assumed my initial attempt to create a 
>> ticket had failed.
>>
>> Someone with access, please mark #9629 as a duplicate and close.
>>
> Done.  Looks like https://twistedmatrix.com/trac/ticket/9462 was the 
> issue in question; I see your comment on it.
> 
> Thanks for writing the email to follow up :).
> 
> -g

Yes, that's it.  Thanks, Glyph.  (I always get a warm feeling when I see 
a bug* get stomped even when it's just because it's a duplicate!)

I also saw your later comment that it might be related to #7926.  I 
suspect you are correct, though it makes my brain hurt to try to follow 
it.  I think TLS is trying to deal more sensibly with connections 
getting intentionally shut down by either end, but issues still arise 
when shutdowns happen in the middle of negotiations.  (Which broaches 
the issue "can this be leveraged into a DOS attack?", on top of just 
trying to deal with it correctly.)  In my case, though, I think the 
issue pops up when my server times out and closes the connection, but 
the client end (a vanilla web browser such as Firefox or Chrome) doesn't 
do exactly what the TLS server code expects.  Which side (client or 
server) is behaving incorrectly?  I have no idea.

[*] a computer bug**, not a real bug, for any hard-core Buddhists or 
Jains lurking... ;-)
[**] I've seen the original Mark II/Grace Hopper bug.  It was actually a 
large moth, scotch-taped to the console log...  Found a picture at 
https://www.atlasobscura.com/places/grace-hoppers-bug  (Maybe you can 
tell I'm in full work-avoidance mode.)

PS the web site is working much better today, thanks.

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539



From trac at twistedmatrix.com  Sun May  5 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 05 May 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1557036318.55.4174896439906003079@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190505/429db423/attachment-0002.html>

From trac at twistedmatrix.com  Sun May 12 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 12 May 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1557641118.35.2016423685753123785@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190512/2df4170b/attachment-0002.html>

From chris at withers.org  Mon May 13 08:26:01 2019
From: chris at withers.org (Chris Withers)
Date: Mon, 13 May 2019 15:26:01 +0100
Subject: [Twisted-Python] finding out what's blocking the reactor
Message-ID: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>

Hi All,

On some busy instances of the app I'm working with/on, we see websocket 
connections being dropped due to not ping/ponging in time, I'm fairly 
sure this is as a result of some user-written callbacks blocking the 
reactor for long periods of time (seconds...).

What's the best way to debug a twisted application to find out what's 
blocking the reactor?

cheers,

Chris



From glyph at twistedmatrix.com  Mon May 13 10:46:40 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 13 May 2019 09:46:40 -0700
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
Message-ID: <7016A6B6-44F0-437A-90EA-38BE7B5D33CD@twistedmatrix.com>



> On May 13, 2019, at 7:26 AM, Chris Withers <chris at withers.org> wrote:
> 
> Hi All,
> 
> On some busy instances of the app I'm working with/on, we see websocket connections being dropped due to not ping/ponging in time, I'm fairly sure this is as a result of some user-written callbacks blocking the reactor for long periods of time (seconds...).
> 
> What's the best way to debug a twisted application to find out what's blocking the reactor?

I don’t know about “the best”, but I’ve had some success with https://vmprof.readthedocs.io/en/latest and https://github.com/ggreer/twisted_hang depending on what you’re looking for.

Let us know if these work out!

-g


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190513/89ad3a50/attachment-0002.html>

From barry.scott at forcepoint.com  Tue May 14 09:39:24 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Tue, 14 May 2019 15:39:24 +0000
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
Message-ID: <5127710.BgWIjmJy6L@barry-scott-desktop>

On Monday, 13 May 2019 15:26:01 BST Chris Withers wrote:
> Hi All,
> 
> On some busy instances of the app I'm working with/on, we see websocket
> connections being dropped due to not ping/ponging in time, I'm fairly
> sure this is as a result of some user-written callbacks blocking the
> reactor for long periods of time (seconds...).
> 
> What's the best way to debug a twisted application to find out what's
> blocking the reactor?

Is the process CPU bound or IO bound?

If CPU bound then cprofile or the tool Glyph mentioned would help.

This advice is from a Linux perspective.

If its IO bound the you may be waiting on a blocking operation.
You could use strace on the process to see what its doing.

As its hung for seconds you could connect gdb to the process and see a python 
backtrace using the py-bt command. You are likely to catch the offending code.

The normal bt command will show you what the last python command it calling.

You could adding logging to your code to show the time of callback entry and 
exit.

If all else fails patch the twisted code to time callbacks and report the slow 
ones.

Barry

> 
> cheers,
> 
> Chris
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From werner at thieprojects.ch  Tue May 14 15:14:51 2019
From: werner at thieprojects.ch (Werner Thie)
Date: Tue, 14 May 2019 11:14:51 -1000
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <5127710.BgWIjmJy6L@barry-scott-desktop>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <5127710.BgWIjmJy6L@barry-scott-desktop>
Message-ID: <d848cd86-9acb-4162-2e63-bddd5a946016@thieprojects.ch>

Hi all

with periods of seemingly no activity the gc comes to mind.

Is the working set size stable or ever increasing, swap operations might
block activity of the process

I had problems in the beginning with twisted, because I was holding on
to a lot of objects and thus creating  circular non collectible object
references leading to ever increasing work sets over time, with the gc
hitting me hard once in a while.

First check I do always is keep an eye on the size of the process at
constant network load, size shrinking when network load is dwindling and
increasing when network load is growing. If it is possible to manipulate
network load precisely then returning to the same load should give you
the same process size after some time repeatedly.

As a reference I have twisted processes running with up times measured
in years on FreeBSD.

Werner

On 5/14/19 05:39, Scott, Barry wrote:
> On Monday, 13 May 2019 15:26:01 BST Chris Withers wrote:
>> Hi All,
>>
>> On some busy instances of the app I'm working with/on, we see websocket
>> connections being dropped due to not ping/ponging in time, I'm fairly
>> sure this is as a result of some user-written callbacks blocking the
>> reactor for long periods of time (seconds...).
>>
>> What's the best way to debug a twisted application to find out what's
>> blocking the reactor?
> Is the process CPU bound or IO bound?
>
> If CPU bound then cprofile or the tool Glyph mentioned would help.
>
> This advice is from a Linux perspective.
>
> If its IO bound the you may be waiting on a blocking operation.
> You could use strace on the process to see what its doing.
>
> As its hung for seconds you could connect gdb to the process and see a python 
> backtrace using the py-bt command. You are likely to catch the offending code.
>
> The normal bt command will show you what the last python command it calling.
>
> You could adding logging to your code to show the time of callback entry and 
> exit.
>
> If all else fails patch the twisted code to time callbacks and report the slow 
> ones.
>
> Barry
>
>> cheers,
>>
>> Chris
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Wed May 15 00:32:49 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 14 May 2019 23:32:49 -0700
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <5127710.BgWIjmJy6L@barry-scott-desktop>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <5127710.BgWIjmJy6L@barry-scott-desktop>
Message-ID: <56D9B282-B1F8-4895-9C8B-C8A47918CEA1@twistedmatrix.com>



> On May 14, 2019, at 8:39 AM, Scott, Barry <barry.scott at forcepoint.com> wrote:
> 
> On Monday, 13 May 2019 15:26:01 BST Chris Withers wrote:
>> Hi All,
>> 
>> On some busy instances of the app I'm working with/on, we see websocket
>> connections being dropped due to not ping/ponging in time, I'm fairly
>> sure this is as a result of some user-written callbacks blocking the
>> reactor for long periods of time (seconds...).
>> 
>> What's the best way to debug a twisted application to find out what's
>> blocking the reactor?
> 
> Is the process CPU bound or IO bound?
> 
> If CPU bound then cprofile or the tool Glyph mentioned would help.

The tool I mentioned (vmprof) is not a CPU profiler, and will help with I/O bound tasks as well.  cProfile can also tell you about wall clock time, but has other limitations that might not make it suitable for this.

-g

> This advice is from a Linux perspective.
> 
> If its IO bound the you may be waiting on a blocking operation.
> You could use strace on the process to see what its doing.
> 
> As its hung for seconds you could connect gdb to the process and see a python 
> backtrace using the py-bt command. You are likely to catch the offending code.
> 
> The normal bt command will show you what the last python command it calling.
> 
> You could adding logging to your code to show the time of callback entry and 
> exit.
> 
> If all else fails patch the twisted code to time callbacks and report the slow 
> ones.
> 
> Barry
> 
>> 
>> cheers,
>> 
>> Chris
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From chris at withers.org  Tue May 14 23:30:54 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 15 May 2019 06:30:54 +0100
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <d848cd86-9acb-4162-2e63-bddd5a946016@thieprojects.ch>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <5127710.BgWIjmJy6L@barry-scott-desktop>
 <d848cd86-9acb-4162-2e63-bddd5a946016@thieprojects.ch>
Message-ID: <075fe2b4-ce04-7fe9-8250-d777fdd06047@withers.org>

On 14/05/2019 22:14, Werner Thie wrote:
> Hi all
> 
> with periods of seemingly no activity the gc comes to mind.

Hmm, gc blocking the process is an interesting thought, what evidence 
would you see with gdb, etc, to show that this was the problem?

Chris



From chris at withers.org  Tue May 14 23:27:30 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 15 May 2019 06:27:30 +0100
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <5127710.BgWIjmJy6L@barry-scott-desktop>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <5127710.BgWIjmJy6L@barry-scott-desktop>
Message-ID: <c63ad7cc-e792-98aa-d404-aa8f9b5c9c29@withers.org>

On 14/05/2019 16:39, Scott, Barry wrote:
> On Monday, 13 May 2019 15:26:01 BST Chris Withers wrote:
>> Hi All,
>>
>> On some busy instances of the app I'm working with/on, we see websocket
>> connections being dropped due to not ping/ponging in time, I'm fairly
>> sure this is as a result of some user-written callbacks blocking the
>> reactor for long periods of time (seconds...).
>>
>> What's the best way to debug a twisted application to find out what's
>> blocking the reactor?
> 
> Is the process CPU bound or IO bound?

Yes ;-)

> If CPU bound then cprofile or the tool Glyph mentioned would help.
> 
> This advice is from a Linux perspective.
> 
> If its IO bound the you may be waiting on a blocking operation.
> You could use strace on the process to see what its doing.

Good call on strace, will do so next time one of these happens.

> As its hung for seconds you could connect gdb to the process and see a python
> backtrace using the py-bt command. You are likely to catch the offending code.

I'm failing miserably to get gdb to find debug symbols for python. I've 
installed the system python's debug symbols rpm, I've installed gdb .py 
that ships in the python source tree (so at least I *have* a py-bt 
command now!) - what am I likely to be missing?

> You could adding logging to your code to show the time of callback entry and
> exit.

Right, but if the callback yields, that will be falsely shown as 
blocking, no?

cheers,

Chris



From maarten at treewalker.org  Wed May 15 04:38:43 2019
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Wed, 15 May 2019 12:38:43 +0200
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <075fe2b4-ce04-7fe9-8250-d777fdd06047@withers.org>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <d848cd86-9acb-4162-2e63-bddd5a946016@thieprojects.ch>
 <075fe2b4-ce04-7fe9-8250-d777fdd06047@withers.org>
Message-ID: <1757307.lFlHL5C1Ud@hyperion>

On Wednesday, 15 May 2019 07:30:54 CEST Chris Withers wrote:
> On 14/05/2019 22:14, Werner Thie wrote:
> > Hi all
> > 
> > with periods of seemingly no activity the gc comes to mind.
> 
> Hmm, gc blocking the process is an interesting thought, what evidence
> would you see with gdb, etc, to show that this was the problem?

A simple way is to call gc.disable() and see if the problem goes away.

Note that gc.disable() only disables the mark-and-sweep part of garbage 
collection, which is the part that can cause the Python interpreter to 
freeze. It doesn't disable garbage collection when the refcount of an 
object reaches zero.

Bye,
		Maarten





From barry.scott at forcepoint.com  Wed May 15 05:08:52 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Wed, 15 May 2019 11:08:52 +0000
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <c63ad7cc-e792-98aa-d404-aa8f9b5c9c29@withers.org>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <5127710.BgWIjmJy6L@barry-scott-desktop>
 <c63ad7cc-e792-98aa-d404-aa8f9b5c9c29@withers.org>
Message-ID: <119843095.qYWDFDJFEp@barry-scott-desktop>

On Wednesday, 15 May 2019 06:27:30 BST Chris Withers wrote:
> On 14/05/2019 16:39, Scott, Barry wrote:
> > On Monday, 13 May 2019 15:26:01 BST Chris Withers wrote:
> >> Hi All,
> >> 
> >> On some busy instances of the app I'm working with/on, we see websocket
> >> connections being dropped due to not ping/ponging in time, I'm fairly
> >> sure this is as a result of some user-written callbacks blocking the
> >> reactor for long periods of time (seconds...).
> >> 
> >> What's the best way to debug a twisted application to find out what's
> >> blocking the reactor?
> > 
> > Is the process CPU bound or IO bound?
> 
> Yes ;-)
> 
> > If CPU bound then cprofile or the tool Glyph mentioned would help.
> > 
> > This advice is from a Linux perspective.
> > 
> > If its IO bound the you may be waiting on a blocking operation.
> > You could use strace on the process to see what its doing.
> 
> Good call on strace, will do so next time one of these happens.
> 
> > As its hung for seconds you could connect gdb to the process and see a
> > python backtrace using the py-bt command. You are likely to catch the
> > offending code.
> I'm failing miserably to get gdb to find debug symbols for python. I've
> installed the system python's debug symbols rpm, I've installed gdb .py
> that ships in the python source tree (so at least I *have* a py-bt
> command now!) - what am I likely to be missing?

At least on Fedora/Centos when you run up gdb you get a message that tells
you the the command to run to install missing symbols. This is what I see on
Fedora 30 for example:

$ gdb python3
GNU gdb (GDB) Fedora 8.2.91.20190424-24.fc30
... skip ...
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from python3...
(No debugging symbols found in python3)
Missing separate debuginfos, use: dnf debuginfo-install 
python3-3.7.3-1.fc30.x86_64
(gdb) 

Then I quit gdb and run the sudo dnf as suggested.

Then next time you run gdb it will suggest even mode debug info to install.
You can often skip that, you have all you need to see python code.

> > You could adding logging to your code to show the time of callback entry
> > and exit.
> 
> Right, but if the callback yields, that will be falsely shown as
> blocking, no?

I'm not used to using yield with twisted. But it will not block.

> 
> cheers,
> 
> Chris






From barry.scott at forcepoint.com  Wed May 15 05:11:29 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Wed, 15 May 2019 11:11:29 +0000
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <075fe2b4-ce04-7fe9-8250-d777fdd06047@withers.org>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <d848cd86-9acb-4162-2e63-bddd5a946016@thieprojects.ch>
 <075fe2b4-ce04-7fe9-8250-d777fdd06047@withers.org>
Message-ID: <6041653.oyV1gAGG9S@barry-scott-desktop>

On Wednesday, 15 May 2019 06:30:54 BST Chris Withers wrote:
> On 14/05/2019 22:14, Werner Thie wrote:
> > Hi all
> > 
> > with periods of seemingly no activity the gc comes to mind.
> 
> Hmm, gc blocking the process is an interesting thought, what evidence
> would you see with gdb, etc, to show that this was the problem?

In my experience gc is low level noise only.
Our work load is very heavy and its never been an issue.

Barry

> 
> Chris
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From maarten at treewalker.org  Wed May 15 06:19:48 2019
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Wed, 15 May 2019 14:19:48 +0200
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <6041653.oyV1gAGG9S@barry-scott-desktop>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <075fe2b4-ce04-7fe9-8250-d777fdd06047@withers.org>
 <6041653.oyV1gAGG9S@barry-scott-desktop>
Message-ID: <24370753.IIvyks4El3@hyperion>

On Wednesday, 15 May 2019 13:11:29 CEST Scott, Barry wrote:

> In my experience gc is low level noise only.
> Our work load is very heavy and its never been an issue.

It depends entirely on how many objects you have. With a few GBs worth 
of relatively small objects, a full garbage collection cycle can take 
over a minute. But in normal circumstances, the overhead indeed isn't 
relevant.

Bye,
		Maarten





From werner at thieprojects.ch  Wed May 15 14:22:29 2019
From: werner at thieprojects.ch (Werner Thie)
Date: Wed, 15 May 2019 10:22:29 -1000
Subject: [Twisted-Python] finding out what's blocking the reactor
In-Reply-To: <24370753.IIvyks4El3@hyperion>
References: <445214d9-5b90-57fc-21a6-2ad3aa3e62a9@withers.org>
 <075fe2b4-ce04-7fe9-8250-d777fdd06047@withers.org>
 <6041653.oyV1gAGG9S@barry-scott-desktop> <24370753.IIvyks4El3@hyperion>
Message-ID: <58afcc24-a2dd-da9e-8b69-b411a8e91be8@thieprojects.ch>

Aloha

the code below has proven to be a life saver together with manhole. It
might be a bit outdated but I usually create a manhole access allowing
me to inspect the server from within then using dumpObjects to look at
the sea of objects in the running process.

Even only watching the inner workings of a server is quite fun and
illuminating.

Werner

exc =[
"function",
"type",
"list",
"dict",
"tuple",
"wrapper_descriptor",
"module",
"method_descriptor",
"member_descriptor",
"instancemethod",
"builtin_function_or_method",
"frame",
"classmethod",
"classmethod_descriptor",
"_Environ",
"MemoryError",
"_Printer",
"_Helper",
"getset_descriptor",
"weakref"
]
inc =[
]
prev ={}
#delta - print delta between current and previous run
#limit - only print object count bigger than limit
#inc - include named objects in the dump
#exc - exclude named obects in the dump
defdumpObjects(delta=True, limit=0, include=inc, exclude=[]):
globalprev
ifinclude !=[] andexclude !=[]:
print'cannot use include and exclude at the same time'
return
print'working with:'
print' delta: ', delta
print' limit: ', limit
print' include: ', include
print' exclude: ', exclude
objects ={}
gc.collect()
oo =gc.get_objects()
foro inoo:
ifgetattr(o, "__class__", None):
name =o.__class__.__name__
if((exclude ==[] andinclude ==[]) or\
(exclude !=[] andname notinexclude) or\
(include !=[] andname ininclude)):
objects[name] =objects.get(name, 0) +1
## if more:
## print o
pk =prev.keys()
pk.sort()
names =objects.keys()
names.sort()
forname innames:
iflimit ==0orobjects[name] >limit:
ifnotprev.has_key(name):
prev[name] =objects[name]
dt =objects[name] -prev[name]
ifdelta ordt !=0:
print'%0.6d-- %0.6d-- '%(dt, objects[name]), name
prev[name] =objects[name]
defgetObjects(oname):
"""
gets an object list with all the named objects out of the sea of
gc'ed objects
"""
olist =[]
objects ={}
gc.collect()
oo =gc.get_objects()
foro inoo:
ifgetattr(o, "__class__", None):
name =o.__class__.__name__
if(name ==oname):
olist.append(o)
returnolist
On 5/15/19 02:19, Maarten ter Huurne wrote:
> On Wednesday, 15 May 2019 13:11:29 CEST Scott, Barry wrote:
>
>> In my experience gc is low level noise only.
>> Our work load is very heavy and its never been an issue.
> It depends entirely on how many objects you have. With a few GBs worth 
> of relatively small objects, a full garbage collection cycle can take 
> over a minute. But in normal circumstances, the overhead indeed isn't 
> relevant.
>
> Bye,
> 		Maarten
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190515/d3e9841f/attachment-0002.html>

From trac at twistedmatrix.com  Sun May 19 00:05:17 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 19 May 2019 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1558245917.58.2374757704889409474@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190519/e4e088f6/attachment-0002.html>

From thomas.westfeld at currenta.de  Mon May 20 01:21:33 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Mon, 20 May 2019 07:21:33 +0000
Subject: [Twisted-Python] Twisted Agent Python 2 ->3 Porting Pitfalls
Message-ID: <97d4876afa29415dbd96d7c566ff3920@BYEX35.de.bayer.cnb>

Dear all,

I just migrated some quite basic twisted code from Python 2.7 to Python 3. Everything worked quite nicely, the main issue was the correct handling of strings vs. bytes.

There was a mean error I made when using the Twisted Agent http client: I specified the method as a Unicode string, instead of using Agent.request(b'GET',b'http://whatever.com'). The mean thing is that the code does not produce any error. It connects to the server via TCP but then stops.

It is given correctly in the examples of the docs and also in the source code, but wouldn't it make things easier to make a type check in the request method if the method parameter is of type Unicode and raise an error?

Best regards,
Thomas Westfeld

From dholth at gmail.com  Thu May 23 06:47:32 2019
From: dholth at gmail.com (Daniel Holth)
Date: Thu, 23 May 2019 08:47:32 -0400
Subject: [Twisted-Python] magical and seamless asyncio support
In-Reply-To: <CB7FC780-FCBD-4150-A6A8-73F21C644103@twistedmatrix.com>
References: <CB7FC780-FCBD-4150-A6A8-73F21C644103@twistedmatrix.com>
Message-ID: <CAG8k2+5i=GKXVf-zfnxNCF0Bsgk+ptzrijQTfctSqKO69LrTNA@mail.gmail.com>

+1 that would be so helpful. "How can I use Django views in my Pyramid
application?" As a newcomer I have no idea whether a similar question
makes sense with the different async libraries. If the answer was
*yes* it would be simpler.



From glyph at twistedmatrix.com  Thu May 23 21:44:46 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 23 May 2019 20:44:46 -0700
Subject: [Twisted-Python] magical and seamless asyncio support
In-Reply-To: <CAG8k2+5i=GKXVf-zfnxNCF0Bsgk+ptzrijQTfctSqKO69LrTNA@mail.gmail.com>
References: <CB7FC780-FCBD-4150-A6A8-73F21C644103@twistedmatrix.com>
 <CAG8k2+5i=GKXVf-zfnxNCF0Bsgk+ptzrijQTfctSqKO69LrTNA@mail.gmail.com>
Message-ID: <DD683C9C-77CF-4BE6-8F2E-43EF44B2D86B@twistedmatrix.com>



> On May 23, 2019, at 5:47 AM, Daniel Holth <dholth at gmail.com> wrote:
> 
> +1 that would be so helpful. "How can I use Django views in my Pyramid
> application?" As a newcomer I have no idea whether a similar question
> makes sense with the different async libraries. If the answer was
> *yes* it would be simpler.

Great!

Any part of it you'd care to volunteer to implement? :)

-g



From twm at freecog.net  Thu May 23 22:08:42 2019
From: twm at freecog.net (Tom Most)
Date: Thu, 23 May 2019 21:08:42 -0700
Subject: [Twisted-Python] Twisted Agent Python 2 ->3 Porting Pitfalls
In-Reply-To: <97d4876afa29415dbd96d7c566ff3920@BYEX35.de.bayer.cnb>
References: <97d4876afa29415dbd96d7c566ff3920@BYEX35.de.bayer.cnb>
Message-ID: <246329e9-8fd9-4c70-b51a-e5da7b7698f9@www.fastmail.com>

This looks like a straightforward bug to me. I don't see any reason we can't change the implementation to either raise TypeError immediately or accept a string, since any code that passes a string doesn't work right now. Would you file a bug at https://twistedmatrix.com/trac/newticket?

---Tom

-- 
  Tom Most
  twm at freecog.net

On Mon, May 20, 2019, at 12:22 AM, Thomas Westfeld wrote:
> Dear all,
> 
> I just migrated some quite basic twisted code from Python 2.7 to Python 
> 3. Everything worked quite nicely, the main issue was the correct 
> handling of strings vs. bytes.
> 
> There was a mean error I made when using the Twisted Agent http client: 
> I specified the method as a Unicode string, instead of using 
> Agent.request(b'GET',b'http://whatever.com'). The mean thing is that 
> the code does not produce any error. It connects to the server via TCP 
> but then stops.
> 
> It is given correctly in the examples of the docs and also in the 
> source code, but wouldn't it make things easier to make a type check in 
> the request method if the method parameter is of type Unicode and raise 
> an error?
> 
> Best regards,
> Thomas Westfeld
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From glyph at twistedmatrix.com  Fri May 24 00:50:09 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 23 May 2019 23:50:09 -0700
Subject: [Twisted-Python] Twisted Agent Python 2 ->3 Porting Pitfalls
In-Reply-To: <246329e9-8fd9-4c70-b51a-e5da7b7698f9@www.fastmail.com>
References: <97d4876afa29415dbd96d7c566ff3920@BYEX35.de.bayer.cnb>
 <246329e9-8fd9-4c70-b51a-e5da7b7698f9@www.fastmail.com>
Message-ID: <39EFBFAC-6C14-4EE5-BC6D-338871D8AA6E@twistedmatrix.com>

I definitely agree with this!

-g

> On May 23, 2019, at 9:08 PM, Tom Most <twm at freecog.net> wrote:
> 
> This looks like a straightforward bug to me. I don't see any reason we can't change the implementation to either raise TypeError immediately or accept a string, since any code that passes a string doesn't work right now. Would you file a bug at https://twistedmatrix.com/trac/newticket?
> 
> ---Tom
> 
> -- 
>  Tom Most
>  twm at freecog.net
> 
> On Mon, May 20, 2019, at 12:22 AM, Thomas Westfeld wrote:
>> Dear all,
>> 
>> I just migrated some quite basic twisted code from Python 2.7 to Python 
>> 3. Everything worked quite nicely, the main issue was the correct 
>> handling of strings vs. bytes.
>> 
>> There was a mean error I made when using the Twisted Agent http client: 
>> I specified the method as a Unicode string, instead of using 
>> Agent.request(b'GET',b'http://whatever.com'). The mean thing is that 
>> the code does not produce any error. It connects to the server via TCP 
>> but then stops.
>> 
>> It is given correctly in the examples of the docs and also in the 
>> source code, but wouldn't it make things easier to make a type check in 
>> the request method if the method parameter is of type Unicode and raise 
>> an error?
>> 
>> Best regards,
>> Thomas Westfeld
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From jayachar88 at gmail.com  Fri May 24 06:19:13 2019
From: jayachar88 at gmail.com (Jayanth Acharya)
Date: Fri, 24 May 2019 17:49:13 +0530
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
Message-ID: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>

Hi,

Quick intro - I am new to Python, and come from Java background (with some
exposure to NIO). I am part of a small team setup for testing of some 5G
telecom network software that have micro-service decomposition and the
components communicate with each other using REST interface over HTTP/2.0
(over TLS).

>From my reading so far, I've come to realize that they don't use the
edge-HTTP/2.0 approach i.e. delegate HTTP/2.0 termination to nginx as proxy
then talk HTTP/1.1 internally, but each component is a HTTP/2.0 endpoint
(client and server as they switch roles).

My understanding is that Twisted framework supports HTTP/2.0 via hyper-h2.
>From a very quick read of the Twisted docs (and some stackoverflow Q&A) I
get the impression that it is possible to use Flask as the RESTful
web-service framework using HTTP/2.0 for the server-end, but perhaps there
is no Twisted framework provided HTTP/2.0 client at similar level of
abstraction, and one perhaps needs to use hyper-h2 at more nuts-n-bolts
level. I hope I am completely wrong on the latter part.

If someone could shed some clarity on the above, and if possible point to
some relevant tutorials and samples that may help me get started would be
highly appreciated.

cheers,
Jay
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190524/a248f93a/attachment-0002.html>

From meejah at meejah.ca  Fri May 24 08:21:33 2019
From: meejah at meejah.ca (meejah)
Date: Fri, 24 May 2019 18:21:33 +0400
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 (Jayanth Acharya's message of "Fri, 24 May 2019 17:49:13 +0530")
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
Message-ID: <861s0ox79u.fsf@atlantis.meejah.ca>

Jayanth Acharya <jayachar88 at gmail.com> writes:

> From a very quick read of the Twisted docs (and some stackoverflow
> Q&A) I get the impression that it is possible to use Flask as the
> RESTful web-service framework using HTTP/2.0 for the server-end, but
> perhaps there is no Twisted framework provided HTTP/2.0 client at
> similar level of abstraction, and one perhaps needs to use hyper-h2 at
> more nuts-n-bolts level. I hope I am completely wrong on the latter
> part.

Flask is a threaded/synchronous framework. Klein provides something
similar based on Twisted on the server-side, and treq provides something
like requests at the client side.

Depending on what you're doing, you might also be interested in
Crossbar.io and Autobahn which provide RPC and PubSub services. There is
a "REST Bridge" here to bridge from plain HTTP (including HTTP/2)
services to the WAMP protocol (which does RPC and PubSub).

-- 
meejah



From jayachar88 at gmail.com  Fri May 24 11:52:55 2019
From: jayachar88 at gmail.com (Jayanth Acharya)
Date: Fri, 24 May 2019 23:22:55 +0530
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <861s0ox79u.fsf@atlantis.meejah.ca>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
Message-ID: <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>

Thanks Meejah. Appreciate your clearing up that Flask is not based on
twisted, not sure I got that impression earlier.
Checked Klein, and it seems quite promising (and seem quite similar to
Flask, from developer standpoint). From the documentation it was not quite
evident to me, as to how to use HTTP2 under Klein.
I did find a reference to HTTP2 in this pull-request, but again not clear
to me: https://github.com/twisted/klein/pull/113

Checked treq, but is it really advantageous over request ? Also found no
reference to HTTP2 in treq documents.

Alao thanks for the references to Crossbar.io and Autobahn. Will check them
out shortly.

cheers,
Jay


On Fri, May 24, 2019 at 7:52 PM meejah <meejah at meejah.ca> wrote:

> Jayanth Acharya <jayachar88 at gmail.com> writes:
>
> > From a very quick read of the Twisted docs (and some stackoverflow
> > Q&A) I get the impression that it is possible to use Flask as the
> > RESTful web-service framework using HTTP/2.0 for the server-end, but
> > perhaps there is no Twisted framework provided HTTP/2.0 client at
> > similar level of abstraction, and one perhaps needs to use hyper-h2 at
> > more nuts-n-bolts level. I hope I am completely wrong on the latter
> > part.
>
> Flask is a threaded/synchronous framework. Klein provides something
> similar based on Twisted on the server-side, and treq provides something
> like requests at the client side.
>
> Depending on what you're doing, you might also be interested in
> Crossbar.io and Autobahn which provide RPC and PubSub services. There is
> a "REST Bridge" here to bridge from plain HTTP (including HTTP/2)
> services to the WAMP protocol (which does RPC and PubSub).
>
> --
> meejah
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190524/eaf34416/attachment-0002.html>

From meejah at meejah.ca  Fri May 24 14:35:43 2019
From: meejah at meejah.ca (meejah)
Date: Sat, 25 May 2019 00:35:43 +0400
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
 (Jayanth Acharya's message of "Fri, 24 May 2019 23:22:55 +0530")
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
Message-ID: <86sgt3wpy8.fsf@atlantis.meejah.ca>

Jayanth Acharya <jayachar88 at gmail.com> writes:

> Checked Klein, and it seems quite promising (and seem quite similar to
> Flask, from developer standpoint). From the documentation it was not
> quite evident to me, as to how to use HTTP2 under Klein.

Klein uses Twisted Web underneath. So, it's "merely" a matter of
installing the right things essentially.

> Checked treq, but is it really advantageous over request ? Also found
> no reference to HTTP2 in treq documents.

Yes, because "requests" is a synchronous library that won't use Twisted
at all. As above, treq uses twisted web so it will use http2 if the
underlying twisted has been set up to use http2 (by installing the right
things).

p.s. if you need real-time help/discussion, #twisted on freenode is a
friendly and active channel.

Cheers,
meejah



From hawkowl at atleastfornow.net  Fri May 24 14:37:27 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sat, 25 May 2019 06:37:27 +1000
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <86sgt3wpy8.fsf@atlantis.meejah.ca>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
 <86sgt3wpy8.fsf@atlantis.meejah.ca>
Message-ID: <CAMxb2is0gNvchcvqCQnnMU8trGL3JT10BM8s-r+v+FPby6MwYA@mail.gmail.com>

To note -- Twisted does not currently have HTTP/2 client support, only
server support. Treq will not talk H2 at the moment, but Klein+Twisted will
happily serve it up.

- Amber

On Sat., 25 May 2019, 06:35 meejah, <meejah at meejah.ca> wrote:

> Jayanth Acharya <jayachar88 at gmail.com> writes:
>
> > Checked Klein, and it seems quite promising (and seem quite similar to
> > Flask, from developer standpoint). From the documentation it was not
> > quite evident to me, as to how to use HTTP2 under Klein.
>
> Klein uses Twisted Web underneath. So, it's "merely" a matter of
> installing the right things essentially.
>
> > Checked treq, but is it really advantageous over request ? Also found
> > no reference to HTTP2 in treq documents.
>
> Yes, because "requests" is a synchronous library that won't use Twisted
> at all. As above, treq uses twisted web so it will use http2 if the
> underlying twisted has been set up to use http2 (by installing the right
> things).
>
> p.s. if you need real-time help/discussion, #twisted on freenode is a
> friendly and active channel.
>
> Cheers,
> meejah
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190525/bbf348fb/attachment-0002.html>

From glyph at twistedmatrix.com  Sat May 25 14:31:05 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 25 May 2019 13:31:05 -0700
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <CAMxb2is0gNvchcvqCQnnMU8trGL3JT10BM8s-r+v+FPby6MwYA@mail.gmail.com>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
 <86sgt3wpy8.fsf@atlantis.meejah.ca>
 <CAMxb2is0gNvchcvqCQnnMU8trGL3JT10BM8s-r+v+FPby6MwYA@mail.gmail.com>
Message-ID: <5B4BC97F-AEEA-4F0F-9754-E645C4925E0D@twistedmatrix.com>



> On May 24, 2019, at 1:37 PM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> To note -- Twisted does not currently have HTTP/2 client support, only server support. Treq will not talk H2 at the moment, but Klein+Twisted will happily serve it up.

This is simply a matter of nobody having implemented it yet though - if anyone would like to hook up twisted.web.client.Agent, and thereby treq, to HTTP/2, that would be great!

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190525/28688772/attachment-0002.html>

From trac at twistedmatrix.com  Sun May 26 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 26 May 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1558850718.35.6863483362273029213@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190526/279488c2/attachment-0002.html>

From jayachar88 at gmail.com  Sun May 26 01:17:45 2019
From: jayachar88 at gmail.com (Jayanth Acharya)
Date: Sun, 26 May 2019 12:47:45 +0530
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <CAMxb2is0gNvchcvqCQnnMU8trGL3JT10BM8s-r+v+FPby6MwYA@mail.gmail.com>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
 <86sgt3wpy8.fsf@atlantis.meejah.ca>
 <CAMxb2is0gNvchcvqCQnnMU8trGL3JT10BM8s-r+v+FPby6MwYA@mail.gmail.com>
Message-ID: <CAHDL-sy7HgVcuspGA7GMb5dK9x8TbxvKVdE1iUyaSf0BCgzn7g@mail.gmail.com>

Thanks for clearing that up.

On Sat, May 25, 2019 at 2:08 AM Amber Brown <hawkowl at atleastfornow.net>
wrote:

> To note -- Twisted does not currently have HTTP/2 client support, only
> server support. Treq will not talk H2 at the moment, but Klein+Twisted will
> happily serve it up.
>
> - Amber
>
> On Sat., 25 May 2019, 06:35 meejah, <meejah at meejah.ca> wrote:
>
>> Jayanth Acharya <jayachar88 at gmail.com> writes:
>>
>> > Checked Klein, and it seems quite promising (and seem quite similar to
>> > Flask, from developer standpoint). From the documentation it was not
>> > quite evident to me, as to how to use HTTP2 under Klein.
>>
>> Klein uses Twisted Web underneath. So, it's "merely" a matter of
>> installing the right things essentially.
>>
>> > Checked treq, but is it really advantageous over request ? Also found
>> > no reference to HTTP2 in treq documents.
>>
>> Yes, because "requests" is a synchronous library that won't use Twisted
>> at all. As above, treq uses twisted web so it will use http2 if the
>> underlying twisted has been set up to use http2 (by installing the right
>> things).
>>
>> p.s. if you need real-time help/discussion, #twisted on freenode is a
>> friendly and active channel.
>>
>> Cheers,
>> meejah
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190526/faacd374/attachment-0002.html>

From jayachar88 at gmail.com  Sun May 26 01:19:27 2019
From: jayachar88 at gmail.com (Jayanth Acharya)
Date: Sun, 26 May 2019 12:49:27 +0530
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <5B4BC97F-AEEA-4F0F-9754-E645C4925E0D@twistedmatrix.com>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
 <86sgt3wpy8.fsf@atlantis.meejah.ca>
 <CAMxb2is0gNvchcvqCQnnMU8trGL3JT10BM8s-r+v+FPby6MwYA@mail.gmail.com>
 <5B4BC97F-AEEA-4F0F-9754-E645C4925E0D@twistedmatrix.com>
Message-ID: <CAHDL-sx5+c5Ui6MdHp9S6bcs2wG5YPZyyNmi-0QTsbc0VmKsMA@mail.gmail.com>

Thanks, understood. My Python knowledge is somewhat rudimentary and Twisted
knowledge even more so, but if the current project at hand can afford some
lax, I will see if I could help in any way. Even though Twisted is an
open-source, volunteer driven/implemented project, is there a roadmap for
Twisted ?

On Sun, May 26, 2019 at 2:01 AM Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On May 24, 2019, at 1:37 PM, Amber Brown <hawkowl at atleastfornow.net>
> wrote:
>
> To note -- Twisted does not currently have HTTP/2 client support, only
> server support. Treq will not talk H2 at the moment, but Klein+Twisted will
> happily serve it up.
>
>
> This is simply a matter of nobody having implemented it yet though - if
> anyone would like to hook up twisted.web.client.Agent, and thereby treq, to
> HTTP/2, that would be great!
>
> -g
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190526/b68cd482/attachment-0002.html>

From glyph at twistedmatrix.com  Sun May 26 01:32:44 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 26 May 2019 00:32:44 -0700
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <CAHDL-sx5+c5Ui6MdHp9S6bcs2wG5YPZyyNmi-0QTsbc0VmKsMA@mail.gmail.com>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
 <86sgt3wpy8.fsf@atlantis.meejah.ca>
 <CAMxb2is0gNvchcvqCQnnMU8trGL3JT10BM8s-r+v+FPby6MwYA@mail.gmail.com>
 <5B4BC97F-AEEA-4F0F-9754-E645C4925E0D@twistedmatrix.com>
 <CAHDL-sx5+c5Ui6MdHp9S6bcs2wG5YPZyyNmi-0QTsbc0VmKsMA@mail.gmail.com>
Message-ID: <145F9C48-C601-47BB-B0A0-9A7017DD0BE7@twistedmatrix.com>



> On May 26, 2019, at 12:19 AM, Jayanth Acharya <jayachar88 at gmail.com> wrote:
> 
> Thanks, understood. My Python knowledge is somewhat rudimentary and Twisted knowledge even more so, but if the current project at hand can afford some lax, I will see if I could help in any way. Even though Twisted is an open-source, volunteer driven/implemented project, is there a roadmap for Twisted ?
> 

Not really.  We do have >2000 open bugs, and we would like to have zero, so that is a roadmap of a kind :). But my attempts at roadmap-setting emails to this list have largely gone unanswered, so I'm not sure we have consensus around big long-term vision.

However, in general we want better integration with the stdlib asyncio, more debugging niceties, better practical logging tools, an overhauled HTTP server interface, and to eliminate the remainder of our py2-only legacy (as you can see here: http://blog.habnab.it/twisted-depgraph/ <http://blog.habnab.it/twisted-depgraph/> we're *almost* there!).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190526/1528f871/attachment-0002.html>

From twm at freecog.net  Sun May 26 22:04:06 2019
From: twm at freecog.net (Tom Most)
Date: Sun, 26 May 2019 21:04:06 -0700
Subject: [Twisted-Python] Twisted Agent Python 2 ->3 Porting Pitfalls
In-Reply-To: <39EFBFAC-6C14-4EE5-BC6D-338871D8AA6E@twistedmatrix.com>
References: <97d4876afa29415dbd96d7c566ff3920@BYEX35.de.bayer.cnb>
 <246329e9-8fd9-4c70-b51a-e5da7b7698f9@www.fastmail.com>
 <39EFBFAC-6C14-4EE5-BC6D-338871D8AA6E@twistedmatrix.com>
Message-ID: <e1f6605d-d21f-467c-818d-f0b601cbcea8@www.fastmail.com>

I filed https://twistedmatrix.com/trac/ticket/9643 and submitted a PR: https://github.com/twisted/twisted/pull/1146

---Tom

On Thu, May 23, 2019, at 11:50 PM, Glyph wrote:
> I definitely agree with this!
> 
> -g
> 
> > On May 23, 2019, at 9:08 PM, Tom Most <twm at freecog.net> wrote:
> > 
> > This looks like a straightforward bug to me. I don't see any reason we can't change the implementation to either raise TypeError immediately or accept a string, since any code that passes a string doesn't work right now. Would you file a bug at https://twistedmatrix.com/trac/newticket?
> > 
> > ---Tom
> > 
> > -- 
> >  Tom Most
> >  twm at freecog.net
> > 
> > On Mon, May 20, 2019, at 12:22 AM, Thomas Westfeld wrote:
> >> Dear all,
> >> 
> >> I just migrated some quite basic twisted code from Python 2.7 to Python 
> >> 3. Everything worked quite nicely, the main issue was the correct 
> >> handling of strings vs. bytes.
> >> 
> >> There was a mean error I made when using the Twisted Agent http client: 
> >> I specified the method as a Unicode string, instead of using 
> >> Agent.request(b'GET',b'http://whatever.com'). The mean thing is that 
> >> the code does not produce any error. It connects to the server via TCP 
> >> but then stops.
> >> 
> >> It is given correctly in the examples of the docs and also in the 
> >> source code, but wouldn't it make things easier to make a type check in 
> >> the request method if the method parameter is of type Unicode and raise 
> >> an error?
> >> 
> >> Best regards,
> >> Thomas Westfeld
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >> 
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From contact at evilham.com  Mon May 27 03:16:54 2019
From: contact at evilham.com (Evilham)
Date: Mon, 27 May 2019 11:16:54 +0200
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
Message-ID: <fab69c35-a2ac-4173-ba61-ddd3c8c42f59@yggdrasil.evilham.com>

Hello,

On dv., maig 24 2019, Jayanth Acharya wrote:

> Thanks Meejah. Appreciate your clearing up that Flask is not 
> based on
> twisted, not sure I got that impression earlier.
> Checked Klein, and it seems quite promising (and seem quite 
> similar to
> Flask, from developer standpoint). From the documentation it was 
> not quite
> evident to me, as to how to use HTTP2 under Klein.
> I did find a reference to HTTP2 in this pull-request, but again 
> not clear
> to me: https://github.com/twisted/klein/pull/113
>
> Checked treq, but is it really advantageous over request ? Also 
> found no
> reference to HTTP2 in treq documents.
>
> Alao thanks for the references to Crossbar.io and Autobahn. Will 
> check them
> out shortly.


Just let me add something that may have been "obvious to everyone" 
on that PR and not to you at that point, but it will be "obvious" 
to you after the next 5-20 minutes:

Notice how that PR introduces the "endpoints" concept, that is a 
*very* useful concept in Twisted, which basically allows you to 
add support for pretty much any transport without any effort.

So, if you want to run an HTTP2 server, you need two things:

1. Read this bit of the klein and twisted documentation:
   https://klein.readthedocs.io/en/latest/examples/alternativerunning.html#example-ipv6-tls-unix-sockets-endpoints
   https://twistedmatrix.com/documents/current/core/howto/endpoints.html
2. Then you have to install the optional twisted[http2] dependency 
*and* because HTTP2 requires TLS, you have to enable that by using 
the endpoints API (e.g. in klein).

That's it for the server.

Twisted's documentation *could* be a bit better on this, if you 
want to take a go at it, I'm reasonably sure everyone would be 
happy.

The only mention I found for http2 on twisted docs is:
https://twistedmatrix.com/documents/current/installation/howto/optional.html?highlight=http2
There is also this article which AFAIK still applies, except the 
optional dependency is twisted[http2] instead of twisted[h2]:
https://pawelmhm.github.io/python/twisted/http2/python3/2016/07/30/twisted-http2.html

Notice that an easy one would be to edit the documentation I 
linked to before, and add an example that runs an HTTP2 server, 
future people like you will be able to find a small example with 
the search bar :-).
--
Evilham



From glyph at twistedmatrix.com  Mon May 27 16:15:17 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 27 May 2019 15:15:17 -0700
Subject: [Twisted-Python] Twisted for http/2 (RESTful) webservices -
 client/server
In-Reply-To: <fab69c35-a2ac-4173-ba61-ddd3c8c42f59@yggdrasil.evilham.com>
References: <CAHDL-sx5ZJ9fA8oPbuA-EugJ54RhgTUJFG4QBY6i=ELtbfs3LA@mail.gmail.com>
 <861s0ox79u.fsf@atlantis.meejah.ca>
 <CAHDL-sw0Rssi4fJfnvdVnXt-fcmSRUVedmzVwQhHfc-Fr7Ej_w@mail.gmail.com>
 <fab69c35-a2ac-4173-ba61-ddd3c8c42f59@yggdrasil.evilham.com>
Message-ID: <6A414C4B-F58B-4A75-B665-111A76F78410@twistedmatrix.com>

> On May 27, 2019, at 2:16 AM, Evilham <contact at evilham.com> wrote:
> 
> Twisted's documentation *could* be a bit better on this, if you want to take a go at it, I'm reasonably sure everyone would be happy.

Certainly I am happy any time anyone has a go at improving Twisted's docs - and this is an area I'd wager lots of people are interested in!

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190527/e629d3b5/attachment-0002.html>

From thomas.westfeld at currenta.de  Tue May 28 00:14:56 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Tue, 28 May 2019 06:14:56 +0000
Subject: [Twisted-Python] Twisted Agent Python 2 ->3 Porting Pitfalls
In-Reply-To: <e1f6605d-d21f-467c-818d-f0b601cbcea8@www.fastmail.com>
References: <97d4876afa29415dbd96d7c566ff3920@BYEX35.de.bayer.cnb>
 <246329e9-8fd9-4c70-b51a-e5da7b7698f9@www.fastmail.com>
 <39EFBFAC-6C14-4EE5-BC6D-338871D8AA6E@twistedmatrix.com>
 <e1f6605d-d21f-467c-818d-f0b601cbcea8@www.fastmail.com>
Message-ID: <796af17c79b344a5b3bf1a75d30bfe82@BYEX35.de.bayer.cnb>

Dear Tom,

thanks for helping me out. I really appreciate it.

Best regards,
Thomas

-----Original Message-----
From: Twisted-Python [mailto:twisted-python-bounces at twistedmatrix.com] On 
Behalf Of Tom Most
Sent: Monday, May 27, 2019 6:04 AM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] Twisted Agent Python 2 ->3 Porting Pitfalls

I filed https://twistedmatrix.com/trac/ticket/9643 and submitted a PR: 
https://github.com/twisted/twisted/pull/1146

---Tom

On Thu, May 23, 2019, at 11:50 PM, Glyph wrote:
> I definitely agree with this!
>
> -g
>
> > On May 23, 2019, at 9:08 PM, Tom Most <twm at freecog.net> wrote:
> >
> > This looks like a straightforward bug to me. I don't see any reason we 
> > can't change the implementation to either raise TypeError immediately or 
> > accept a string, since any code that passes a string doesn't work right 
> > now. Would you file a bug at https://twistedmatrix.com/trac/newticket?
> >
> > ---Tom
> >
> > -- 
> >  Tom Most
> >  twm at freecog.net
> >
> > On Mon, May 20, 2019, at 12:22 AM, Thomas Westfeld wrote:
> >> Dear all,
> >>
> >> I just migrated some quite basic twisted code from Python 2.7 to Python
> >> 3. Everything worked quite nicely, the main issue was the correct
> >> handling of strings vs. bytes.
> >>
> >> There was a mean error I made when using the Twisted Agent http client:
> >> I specified the method as a Unicode string, instead of using
> >> Agent.request(b'GET',b'http://whatever.com'). The mean thing is that
> >> the code does not produce any error. It connects to the server via TCP
> >> but then stops.
> >>
> >> It is given correctly in the examples of the docs and also in the
> >> source code, but wouldn't it make things easier to make a type check in
> >> the request method if the method parameter is of type Unicode and raise
> >> an error?
> >>
> >> Best regards,
> >> Thomas Westfeld
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 6085 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20190528/a06bff97/attachment-0002.bin>

From thomas.westfeld at currenta.de  Tue May 28 04:22:10 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Tue, 28 May 2019 10:22:10 +0000
Subject: [Twisted-Python] ldaptor problem with STARTTLS and python 3
Message-ID: <0bcc1651c6194595bde96b5890c2545c@BYEX35.de.bayer.cnb>

Dear all,

I am experiencing an error when trying to use the quick usage example posted on the ldaptor github page https://github.com/twisted/ldaptor . I have included the starttls command to promote the connection to an encrypted one, but I am experiencing an deprecation warning:

DeprecationWarning: LDAPStartTLSInvalidResponseName.__str__ method is deprecated and will not be used for getting bytes representation in the future releases, use LDAPStartTLSInvalidResponseName.toWire instead
  category=DeprecationWarning)

This puzzles me as I cannot track this error down. The usual strategy to introduce debugging print statements or start the debugger like "import pdb; pdb.set_trace()" does not work. I would appreciate help here how to debug this deferred code.

Besides this warning I am receiving no output whatsoever. Also print statements in the example method do not print anything, which is strange to me.

To debug it on a networking level, I have wiresharked the ldap communication and it seems fine (see below):

REQUEST

Transmission Control Protocol, Src Port: 53964, Dst Port: 389, Seq: 1, Ack: 1, Len: 31
Lightweight Directory Access Protocol
    LDAPMessage extendedReq(1)
        messageID: 1
        protocolOp: extendedReq (23)
            extendedReq
                requestName: 1.3.6.1.4.1.1466.20037 (LDAP_START_TLS_OID)
        [Response In: 2587]

RESPONSE

Transmission Control Protocol, Src Port: 389, Dst Port: 53964, Seq: 1, Ack: 32, Len: 46
Lightweight Directory Access Protocol
    LDAPMessage extendedResp(1)
        messageID: 1
        protocolOp: extendedResp (24)
            extendedResp
                resultCode: success (0)
                matchedDN: 
                errorMessage: 
                responseName: 1.3.6.1.4.1.1466.20037 (LDAP_START_TLS_OID)
        [Response To: 2581]
        [Time: 0.245555000 seconds]

I have posted the example code with the starttls command in this gist:

https://gist.github.com/westfeld/bb1d5e8727ce13910623933e041e9782

Thanks for your help!

Best regards,
Thomas

From adi at roiban.ro  Tue May 28 04:38:47 2019
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 28 May 2019 11:38:47 +0100
Subject: [Twisted-Python] ldaptor problem with STARTTLS and python 3
In-Reply-To: <0bcc1651c6194595bde96b5890c2545c@BYEX35.de.bayer.cnb>
References: <0bcc1651c6194595bde96b5890c2545c@BYEX35.de.bayer.cnb>
Message-ID: <CAFycZ9cxBHHqhiWP7hm+_ufvFHe12uvzNV0XzHoDZnZG-0nPGg@mail.gmail.com>

On Tue, 28 May 2019 at 11:22, Thomas Westfeld
<thomas.westfeld at currenta.de> wrote:
>
> Dear all,
>
> I am experiencing an error when trying to use the quick usage example posted on the ldaptor github page https://github.com/twisted/ldaptor . I have included the starttls command to promote the connection to an encrypted one, but I am experiencing an deprecation warning:
>
> DeprecationWarning: LDAPStartTLSInvalidResponseName.__str__ method is deprecated and will not be used for getting bytes representation in the future releases, use LDAPStartTLSInvalidResponseName.toWire instead
>   category=DeprecationWarning)
>
> This puzzles me as I cannot track this error down. The usual strategy to introduce debugging print statements or start the debugger like "import pdb; pdb.set_trace()" does not work. I would appreciate help here how to debug this deferred code.
>
> Besides this warning I am receiving no output whatsoever. Also print statements in the example method do not print anything, which is strange to me.
>
> To debug it on a networking level, I have wiresharked the ldap communication and it seems fine (see below):
>
> REQUEST
>
> Transmission Control Protocol, Src Port: 53964, Dst Port: 389, Seq: 1, Ack: 1, Len: 31
> Lightweight Directory Access Protocol
>     LDAPMessage extendedReq(1)
>         messageID: 1
>         protocolOp: extendedReq (23)
>             extendedReq
>                 requestName: 1.3.6.1.4.1.1466.20037 (LDAP_START_TLS_OID)
>         [Response In: 2587]
>
> RESPONSE
>
> Transmission Control Protocol, Src Port: 389, Dst Port: 53964, Seq: 1, Ack: 32, Len: 46
> Lightweight Directory Access Protocol
>     LDAPMessage extendedResp(1)
>         messageID: 1
>         protocolOp: extendedResp (24)
>             extendedResp
>                 resultCode: success (0)
>                 matchedDN:
>                 errorMessage:
>                 responseName: 1.3.6.1.4.1.1466.20037 (LDAP_START_TLS_OID)
>         [Response To: 2581]
>         [Time: 0.245555000 seconds]
>
> I have posted the example code with the starttls command in this gist:
>
> https://gist.github.com/westfeld/bb1d5e8727ce13910623933e041e9782

It looks like a bug.

With the Python3 migration the usage of the implicit __str__ for
serialization/marshaling of the LDAP messages was removed.

Please add a new issue/ticket/bug in Github for ldaptor.

I am debugging these things by patching the ldap code and adding a PDB call here
https://github.com/twisted/ldaptor/blob/d3c191921bd32c359a3e4974c2251f9af852ab2b/ldaptor/_encoder.py#L56

then you can go up and see where str is called, and consider if it
should be repalced with .toWire()

Cheers

-- 
Adi Roiban



From griatch at gmail.com  Tue May 28 05:04:05 2019
From: griatch at gmail.com (Griatch Art)
Date: Tue, 28 May 2019 13:04:05 +0200
Subject: [Twisted-Python] Binary wheels for Twisted on Windows?
Message-ID: <CAJmuMNd9LfSjahxGEf2H15BXZDkUmxgRJ6dEvJnosDH1mhPK_g@mail.gmail.com>

Hi,

I'm investigating installing the Evennia MU* server on Windows. We use
Twisted and will be requiring Python3.7 in our next release. I need to make
easy-to-use install instructions since a lot of Windows users use our
library.

I tested with a Windows7 64bit VM and installed everything from scratch to
emulate what a non-dev Windows user would see. I don't have Windows10 so
can't compare to the install experience there (but Windows7 64bit is still
relevant, having something like 24% of the active Windows user-base
according to Steam).

Using pip to install Evennia, at the Twisted requirement install step I run
into an error telling me that I need "Microsoft Visual C++ build tools"
from the URL https://visualstudio.microsoft.com/downloads. The first issue
is that there does not appear to be any build-tools package named like that
on that page or sub-page (at least not what I could find after digging
around). I tried to install a few similarly-named packages, like "Visual
Studio Build Tools", but  had no luck getting past the Twisted install
point. So that recommendation-string should likely be updated.

The thing is though, while I could probably personally figure out how to
set it up eventually, our Windows users are likely the least tech-savvy of
our users. Requiring them to set up a compiler environment (despite us
telling them that Python code does not need compilation) a bit too much.
It seems Twisted has distributed binary Windows wheels in the past, would
it be possible to get them again? Or should I recommend some other,
specific install procedure for our Windows users?

Cheers,
Griatch, Evennia dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190528/3d82a394/attachment-0002.html>

From barry.scott at forcepoint.com  Tue May 28 06:49:53 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Tue, 28 May 2019 12:49:53 +0000
Subject: [Twisted-Python] Binary wheels for Twisted on Windows?
In-Reply-To: <CAJmuMNd9LfSjahxGEf2H15BXZDkUmxgRJ6dEvJnosDH1mhPK_g@mail.gmail.com>
References: <CAJmuMNd9LfSjahxGEf2H15BXZDkUmxgRJ6dEvJnosDH1mhPK_g@mail.gmail.com>
Message-ID: <12678863.H2nu75emEu@barry-scott-desktop>

On Tuesday, 28 May 2019 12:04:05 BST Griatch Art wrote:
> Hi,
> 
> I'm investigating installing the Evennia MU* server on Windows. We use
> Twisted and will be requiring Python3.7 in our next release. I need to make
> easy-to-use install instructions since a lot of Windows users use our
> library.
> 
> I tested with a Windows7 64bit VM and installed everything from scratch to
> emulate what a non-dev Windows user would see. I don't have Windows10 so
> can't compare to the install experience there (but Windows7 64bit is still
> relevant, having something like 24% of the active Windows user-base
> according to Steam).
> 
> Using pip to install Evennia, at the Twisted requirement install step I run
> into an error telling me that I need "Microsoft Visual C++ build tools"
> from the URL https://visualstudio.microsoft.com/downloads. The first issue
> is that there does not appear to be any build-tools package named like that
> on that page or sub-page (at least not what I could find after digging
> around). I tried to install a few similarly-named packages, like "Visual
> Studio Build Tools", but  had no luck getting past the Twisted install
> point. So that recommendation-string should likely be updated.
> 
> The thing is though, while I could probably personally figure out how to
> set it up eventually, our Windows users are likely the least tech-savvy of
> our users. Requiring them to set up a compiler environment (despite us
> telling them that Python code does not need compilation) a bit too much.
> It seems Twisted has distributed binary Windows wheels in the past, would
> it be possible to get them again? Or should I recommend some other,
> specific install procedure for our Windows users?
> 
> Cheers,
> Griatch, Evennia dev

What I do for my python projects on windows is turn them into a setup.exe that 
the user can run in the traditional way. There are many tools to help you do 
this. Then the user does not need to install anything except your setup.exe.

You do not need python installed on the users system.
And you can sort out the compilation issues when you kit the project.

Make sure you use the right version of visual C++ that matches your
python version.  See https://wiki.python.org/moin/WindowsCompilers
(Assume the same compiler for 3.7 and 3.8 as 3.6).

I package pysvn, Barry's Emacs and SCM workbench this way for windows.
You can use a similar approach for macOS.

Barry





From thomas.westfeld at currenta.de  Tue May 28 08:05:29 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Tue, 28 May 2019 14:05:29 +0000
Subject: [Twisted-Python] Binary wheels for Twisted on Windows?
In-Reply-To: <12678863.H2nu75emEu@barry-scott-desktop>
References: <CAJmuMNd9LfSjahxGEf2H15BXZDkUmxgRJ6dEvJnosDH1mhPK_g@mail.gmail.com>
 <12678863.H2nu75emEu@barry-scott-desktop>
Message-ID: <d320a2e14d4d4457b6f5e3b1bcbb8747@BYEX35.de.bayer.cnb>

>On Tuesday, 28 May 2019 12:04:05 BST Griatch Art wrote:
>> Hi,
>>
>> I'm investigating installing the Evennia MU* server on Windows. We use
>> Twisted and will be requiring Python3.7 in our next release. I need to make
>> easy-to-use install instructions since a lot of Windows users use our
>> library.
>>
>> I tested with a Windows7 64bit VM and installed everything from scratch to
>> emulate what a non-dev Windows user would see. I don't have Windows10 so
>> can't compare to the install experience there (but Windows7 64bit is still
>> relevant, having something like 24% of the active Windows user-base
>> according to Steam).
>>
>> Using pip to install Evennia, at the Twisted requirement install step I run
>> into an error telling me that I need "Microsoft Visual C++ build tools"
>> from the URL https://visualstudio.microsoft.com/downloads. The first issue
>> is that there does not appear to be any build-tools package named like that
>> on that page or sub-page (at least not what I could find after digging
>> around). I tried to install a few similarly-named packages, like "Visual
>> Studio Build Tools", but  had no luck getting past the Twisted install
>> point. So that recommendation-string should likely be updated.
>>
>> The thing is though, while I could probably personally figure out how to
>> set it up eventually, our Windows users are likely the least tech-savvy of
>> our users. Requiring them to set up a compiler environment (despite us
>> telling them that Python code does not need compilation) a bit too much.
>> It seems Twisted has distributed binary Windows wheels in the past, would
>> it be possible to get them again? Or should I recommend some other,
>> specific install procedure for our Windows users?
>>
>> Cheers,
>> Griatch, Evennia dev
>
>What I do for my python projects on windows is turn them into a setup.exe that
>the user can run in the traditional way. There are many tools to help you do
>this. Then the user does not need to install anything except your setup.exe.
>
>You do not need python installed on the users system.
>And you can sort out the compilation issues when you kit the project.
>
>Make sure you use the right version of visual C++ that matches your
>python version.  See https://wiki.python.org/moin/WindowsCompilers
>(Assume the same compiler for 3.7 and 3.8 as 3.6).
>
>I package pysvn, Barry's Emacs and SCM workbench this way for windows.
>You can use a similar approach for macOS.
>
>Barry
>
Hi Barry,

that sounds very interesting. Could you give me a hint which toolchain you are using to create a all in one setup.exe including Python and the dependencies needed?

Thanks,
Thomas

From barry.scott at forcepoint.com  Tue May 28 08:57:35 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Tue, 28 May 2019 14:57:35 +0000
Subject: [Twisted-Python] Binary wheels for Twisted on Windows?
In-Reply-To: <d320a2e14d4d4457b6f5e3b1bcbb8747@BYEX35.de.bayer.cnb>
References: <CAJmuMNd9LfSjahxGEf2H15BXZDkUmxgRJ6dEvJnosDH1mhPK_g@mail.gmail.com>
 <12678863.H2nu75emEu@barry-scott-desktop>
 <d320a2e14d4d4457b6f5e3b1bcbb8747@BYEX35.de.bayer.cnb>
Message-ID: <2380286.KybYbdcnpE@barry-scott-desktop>

On Tuesday, 28 May 2019 15:05:29 BST Thomas Westfeld wrote:
> >On Tuesday, 28 May 2019 12:04:05 BST Griatch Art wrote:
> >
> >> Hi,
> >>
> >>
> >>
> >> I'm investigating installing the Evennia MU* server on Windows. We use
> >> Twisted and will be requiring Python3.7 in our next release. I need to
> >> make
 easy-to-use install instructions since a lot of Windows users use
> >> our library.
> >>
> >>
> >>
> >> I tested with a Windows7 64bit VM and installed everything from scratch
> >> to
> >> emulate what a non-dev Windows user would see. I don't have Windows10 so
> >> can't compare to the install experience there (but Windows7 64bit is
> >> still
> >> relevant, having something like 24% of the active Windows user-base
> >> according to Steam).
> >>
> >>
> >>
> >> Using pip to install Evennia, at the Twisted requirement install step I
> >> run
 into an error telling me that I need "Microsoft Visual C++ build
> >> tools" from the URL https://visualstudio.microsoft.com/downloads. The
> >> first issue is that there does not appear to be any build-tools package
> >> named like that on that page or sub-page (at least not what I could find
> >> after digging around). I tried to install a few similarly-named
> >> packages, like "Visual Studio Build Tools", but  had no luck getting
> >> past the Twisted install point. So that recommendation-string should
> >> likely be updated.
> >>
> >>
> >>
> >> The thing is though, while I could probably personally figure out how to
> >> set it up eventually, our Windows users are likely the least tech-savvy
> >> of
> >> our users. Requiring them to set up a compiler environment (despite us
> >> telling them that Python code does not need compilation) a bit too much.
> >> It seems Twisted has distributed binary Windows wheels in the past,
> >> would
> >> it be possible to get them again? Or should I recommend some other,
> >> specific install procedure for our Windows users?
> >>
> >>
> >>
> >> Cheers,
> >> Griatch, Evennia dev
> >
> >
> >What I do for my python projects on windows is turn them into a setup.exe
> >that
 the user can run in the traditional way. There are many tools to
> >help you do this. Then the user does not need to install anything except
> >your setup.exe. 
> >You do not need python installed on the users system.
> >And you can sort out the compilation issues when you kit the project.
> >
> >Make sure you use the right version of visual C++ that matches your
> >python version.  See https://wiki.python.org/moin/WindowsCompilers
> >(Assume the same compiler for 3.7 and 3.8 as 3.6).
> >
> >I package pysvn, Barry's Emacs and SCM workbench this way for windows.
> >You can use a similar approach for macOS.
> >
> >Barry
> >
> 
> Hi Barry,
> 
> that sounds very interesting. Could you give me a hint which toolchain you
> are using to create a all in one setup.exe including Python and the
> dependencies needed?

You can see the code I use for Barry's Emacs on github. Barry's Emacs
uses PyQt for its

Here is the script that builds the app:

https://github.com/barry-scott/BarrysEmacs/blob/master/Editor/PyQtBEmacs/
bemacs-windows.cmd

It uses https://pypi.org/project/win-app-packager/ to do the heavy lifting.
I have already built the python extension that is used by this point in the 
build process.

Then look at this script that builds the setup.exe:

https://github.com/barry-scott/BarrysEmacs/blob/master/Kits/Windows/build-windows.cmd

It uses Inno installer from http://www.jrsoftware.org/isinfo.php

Barry





From thomas.westfeld at currenta.de  Wed May 29 01:20:56 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Wed, 29 May 2019 07:20:56 +0000
Subject: [Twisted-Python] ldaptor problem with STARTTLS and python 3
In-Reply-To: <CAFycZ9cxBHHqhiWP7hm+_ufvFHe12uvzNV0XzHoDZnZG-0nPGg@mail.gmail.com>
References: <0bcc1651c6194595bde96b5890c2545c@BYEX35.de.bayer.cnb>
 <CAFycZ9cxBHHqhiWP7hm+_ufvFHe12uvzNV0XzHoDZnZG-0nPGg@mail.gmail.com>
Message-ID: <3c96142b2aac452098339162f0f095e9@BYEX35.de.bayer.cnb>

>-----Original Message-----
>From: Twisted-Python [mailto:twisted-python-bounces at twistedmatrix.com] On
>Behalf Of Adi Roiban
>Sent: Tuesday, May 28, 2019 12:39 PM
>To: Twisted general discussion
>Subject: Re: [Twisted-Python] ldaptor problem with STARTTLS and python 3
>
>On Tue, 28 May 2019 at 11:22, Thomas Westfeld
><thomas.westfeld at currenta.de> wrote:
>>
>> Dear all,
>>
>> I am experiencing an error when trying to use the quick usage example posted on
>the ldaptor github page https://github.com/twisted/ldaptor . I have included the
>starttls command to promote the connection to an encrypted one, but I am
>experiencing an deprecation warning:
>>
>> DeprecationWarning: LDAPStartTLSInvalidResponseName.__str__ method is
>deprecated and will not be used for getting bytes representation in the future
>releases, use LDAPStartTLSInvalidResponseName.toWire instead
>>   category=DeprecationWarning)
>>
>> This puzzles me as I cannot track this error down. The usual strategy to introduce
>debugging print statements or start the debugger like "import pdb; pdb.set_trace()"
>does not work. I would appreciate help here how to debug this deferred code.
>>
>> Besides this warning I am receiving no output whatsoever. Also print statements in
>the example method do not print anything, which is strange to me.
>>
>> To debug it on a networking level, I have wiresharked the ldap communication and
>it seems fine (see below):
>>
>> REQUEST
>>
>> Transmission Control Protocol, Src Port: 53964, Dst Port: 389, Seq: 1, Ack: 1,
>Len: 31
>> Lightweight Directory Access Protocol
>>     LDAPMessage extendedReq(1)
>>         messageID: 1
>>         protocolOp: extendedReq (23)
>>             extendedReq
>>                 requestName: 1.3.6.1.4.1.1466.20037 (LDAP_START_TLS_OID)
>>         [Response In: 2587]
>>
>> RESPONSE
>>
>> Transmission Control Protocol, Src Port: 389, Dst Port: 53964, Seq: 1, Ack: 32,
>Len: 46
>> Lightweight Directory Access Protocol
>>     LDAPMessage extendedResp(1)
>>         messageID: 1
>>         protocolOp: extendedResp (24)
>>             extendedResp
>>                 resultCode: success (0)
>>                 matchedDN:
>>                 errorMessage:
>>                 responseName: 1.3.6.1.4.1.1466.20037 (LDAP_START_TLS_OID)
>>         [Response To: 2581]
>>         [Time: 0.245555000 seconds]
>>
>> I have posted the example code with the starttls command in this gist:
>>
>> https://gist.github.com/westfeld/bb1d5e8727ce13910623933e041e9782
>
>It looks like a bug.
>
>With the Python3 migration the usage of the implicit __str__ for
>serialization/marshaling of the LDAP messages was removed.
>
>Please add a new issue/ticket/bug in Github for ldaptor.
>
>I am debugging these things by patching the ldap code and adding a PDB call here
>https://github.com/twisted/ldaptor/blob/d3c191921bd32c359a3e4974c2251f9af852a
>b2b/ldaptor/_encoder.py#L56
>
>then you can go up and see where str is called, and consider if it
>should be repalced with .toWire()
>
>Cheers
>
>--
>Adi Roiban

Dear all,

it turns out to be an issue with binary vs. string. The __str__ method was called by the errback only. This has been fixed in pull request #147 already. All the observed errors have been fixed in the pre-release 19.1 version of ldaptor. The example is working with STARTTLS when using HEAD.

Thanks for the great community for fixing things so quickly.

I am looking forward to the 19.1. release.


Regards,
Thomas

From adi at roiban.ro  Wed May 29 07:15:16 2019
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 29 May 2019 14:15:16 +0100
Subject: [Twisted-Python] ldaptor problem with STARTTLS and python 3
In-Reply-To: <3c96142b2aac452098339162f0f095e9@BYEX35.de.bayer.cnb>
References: <0bcc1651c6194595bde96b5890c2545c@BYEX35.de.bayer.cnb>
 <CAFycZ9cxBHHqhiWP7hm+_ufvFHe12uvzNV0XzHoDZnZG-0nPGg@mail.gmail.com>
 <3c96142b2aac452098339162f0f095e9@BYEX35.de.bayer.cnb>
Message-ID: <CAFycZ9ev3O1-6Vof1TkVDLVmK0gLwPOZaApJdctmTum0Hg8R_Q@mail.gmail.com>

On Wed, 29 May 2019 at 08:21, Thomas Westfeld
<thomas.westfeld at currenta.de> wrote:
>

[snip]

> Dear all,
>
> it turns out to be an issue with binary vs. string. The __str__ method was called by the errback only. This has been fixed in pull request #147 already. All the observed errors have been fixed in the pre-release 19.1 version of ldaptor. The example is working with STARTTLS when using HEAD.
>
> Thanks for the great community for fixing things so quickly.
>
> I am looking forward to the 19.1. release.
>

Hi Thomas,

If you have time, you can check https://github.com/twisted/ldaptor/pull/148

I guess that once that PR is merged we can make a new public release

Are you testing this on Python2 or Python3?

-- 
Adi Roiban



From thomas.westfeld at currenta.de  Wed May 29 08:42:53 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Wed, 29 May 2019 14:42:53 +0000
Subject: [Twisted-Python] ldaptor problem with STARTTLS and python 3
In-Reply-To: <CAFycZ9ev3O1-6Vof1TkVDLVmK0gLwPOZaApJdctmTum0Hg8R_Q@mail.gmail.com>
References: <0bcc1651c6194595bde96b5890c2545c@BYEX35.de.bayer.cnb>
 <CAFycZ9cxBHHqhiWP7hm+_ufvFHe12uvzNV0XzHoDZnZG-0nPGg@mail.gmail.com>
 <3c96142b2aac452098339162f0f095e9@BYEX35.de.bayer.cnb>
 <CAFycZ9ev3O1-6Vof1TkVDLVmK0gLwPOZaApJdctmTum0Hg8R_Q@mail.gmail.com>
Message-ID: <482ca95837a74b5bb2918224429f8c27@BYEX35.de.bayer.cnb>

>On Wed, 29 May 2019 at 08:21, Thomas Westfeld
><thomas.westfeld at currenta.de> wrote:
>>
>
>[snip]
>
>> Dear all,
>>
>> it turns out to be an issue with binary vs. string. The __str__ method was called by
>the errback only. This has been fixed in pull request #147 already. All the observed
>errors have been fixed in the pre-release 19.1 version of ldaptor. The example is
>working with STARTTLS when using HEAD.
>>
>> Thanks for the great community for fixing things so quickly.
>>
>> I am looking forward to the 19.1. release.
>>
>
>Hi Thomas,
>
>If you have time, you can check https://github.com/twisted/ldaptor/pull/148
>
>I guess that once that PR is merged we can make a new public release
>
>Are you testing this on Python2 or Python3?
>

I am testing this both on Python 2.7 and on Python 3.6, however for my production setting I want to go to Python 3.6 or 3.7 respectively. The sundowning of Python 2.7 forced me to port my programs.

>--
>Adi Roiban
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

From glyph at twistedmatrix.com  Thu May 30 13:05:59 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 30 May 2019 12:05:59 -0700
Subject: [Twisted-Python] farewell to twisted.news
Message-ID: <DB85B199-B55E-412D-A855-81E626210941@twistedmatrix.com>

I've just approved a PR to deprecate twisted.news, which paves the way for its removal, as Hawkie brought up over a year ago: https://twistedmatrix.com/pipermail/twisted-python/2018-April/031882.html <https://twistedmatrix.com/pipermail/twisted-python/2018-April/031882.html>

As such, I've removed the success story from our website which references twisted.news:

https://twistedmatrix.com/trac/wiki/SuccessStories?action=diff&version=33 <https://twistedmatrix.com/trac/wiki/SuccessStories?action=diff&version=33>

If you love NNTP, and would like to help this package stick around by maintaining it, that would be great!  However, please note that at this point it's not worth discussing unless you have the actual free time to dedicate to doing the py3 port, cleaning up the test coverage, and generally keeping it updated and maintained going forward.  Any PR wanting to un-deprecate it is also going to have to get it working on py3 :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190530/cf5877e3/attachment-0002.html>

From hs at ox.cx  Fri May 31 00:39:58 2019
From: hs at ox.cx (Hynek Schlawack)
Date: Fri, 31 May 2019 08:39:58 +0200
Subject: [Twisted-Python] farewell to twisted.news
In-Reply-To: <DB85B199-B55E-412D-A855-81E626210941@twistedmatrix.com>
References: <DB85B199-B55E-412D-A855-81E626210941@twistedmatrix.com>
Message-ID: <7BE76BCE-AE24-4AE6-96E0-13660750ADC4@ox.cx>

> If you love NNTP, and would like to help this package stick around by maintaining it, that would be great!  However, please note that at this point it's not worth discussing unless you have the actual free time to dedicate to doing the py3 port, cleaning up the test coverage, and generally keeping it updated and maintained going forward.  Any PR wanting to un-deprecate it is also going to have to get it working on py3 :-).

I don’t think this is necessarily the narrative that ought to be had in 2019.

I’d push for: if you love NNTP and want it to stick around, do all the work, put it on PyPI, and if it’s good, we’ll move it into the Twisted orga on GitHub.  NNTP support looks quite independent to me and at this point we can/should apply Amber’s core summit talk to Twisted’s batteries just as well..

Cheers,
—h

P.S. Please don’t storm out of the room. ;)


From glyph at twistedmatrix.com  Fri May 31 01:01:50 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 31 May 2019 00:01:50 -0700
Subject: [Twisted-Python] farewell to twisted.news
In-Reply-To: <7BE76BCE-AE24-4AE6-96E0-13660750ADC4@ox.cx>
References: <DB85B199-B55E-412D-A855-81E626210941@twistedmatrix.com>
 <7BE76BCE-AE24-4AE6-96E0-13660750ADC4@ox.cx>
Message-ID: <BE9F7D07-67B0-4712-B597-2BD0AE27F019@twistedmatrix.com>



> On May 30, 2019, at 11:39 PM, Hynek Schlawack <hs at ox.cx> wrote:
> 
>> If you love NNTP, and would like to help this package stick around by maintaining it, that would be great!  However, please note that at this point it's not worth discussing unless you have the actual free time to dedicate to doing the py3 port, cleaning up the test coverage, and generally keeping it updated and maintained going forward.  Any PR wanting to un-deprecate it is also going to have to get it working on py3 :-).
> 
> I don’t think this is necessarily the narrative that ought to be had in 2019.
> 
> I’d push for: if you love NNTP and want it to stick around, do all the work, put it on PyPI, and if it’s good, we’ll move it into the Twisted orga on GitHub.  NNTP support looks quite independent to me and at this point we can/should apply Amber’s core summit talk to Twisted’s batteries just as well..

This is a nice hypothetical, since I very much doubt that anyone cares enough to resurrect NNTP, so it's nice to discuss without the possibility that reality will rear its ugly head ;-).

In principle I agree with you.  The major practical issue that gets in the way here, if we were to, say, try to do this with twisted.mail, twisted.conch, and twisted.positioning tomorrow (and that makes the existing somewhat large matrix of ancillary projects under the Twisted org somewhat of a maintenance nightmare) is the non-replicability of our various CI setups.

I do ~nothing (other than code reviews) to maintain Twisted these days except for shuffle YAML files back and forth between Appveyor and Travis and Circle and Azure and Codecov and Read The Docs and Coveralls and frankly I'm a bit sick of it.  Already, Klein, Treq, and the Divmod universe lag/diverge somewhat; Ldaptor is completely separately maintained.  The idea of manually redoing this work across a massively exploded matrix of subprojects makes me dizzy.

That said this problem is far from intractable.  Computers are great at automating things, especially other computers.  One thing that occurs to me is that if we maintained a repository containing a cookiecutter template that could be re-run to regenerate the best-practice CI configuration for each project from some minimal configuration ("what python versions do you support", "do you have C modules", "what operating systems do you care about testing on"), rather than editing the CI configuration directly, we could possibly make cross-cutting CI changes there, and then re-apply it to all relevant projects.

This will only become more critical as we do stuff like auto-release to PyPI, uploading wheels from CI artifacts.  Which we're doing, like, any day now, right? :)

And, hey, Hynek, you're an expert on how open source projects should be set up, right?  Didn't you give a talk about it recently?  Maybe you could make that repeatable? ;-)

If spinning up a new project were as simple as "run this script to create a repo already hooked up to all the maximally-awesome Twisted-level continuous integration goodness", I'd feel much better about our already-planned (deferred, filepath) and possible future (basically all protocols but HTTP and AMP probably) split-out projects.

Finally of course we need that bot that we keep talking about which allows external contributors to re-request reviews so we can build https://twistedmatrix.com/highscores/ <https://twistedmatrix.com/highscores/> and https://twisted.reviews/ <https://twisted.reviews/> on Github, so that other projects can have a unified view across the whole Twisted org ;-).

> Cheers,
> —h
> 
> P.S. Please don’t storm out of the room. ;)

Heaven forfend.

-g


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190531/45867aa3/attachment-0002.html>

From glyph at twistedmatrix.com  Fri May 31 22:54:16 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 31 May 2019 21:54:16 -0700
Subject: [Twisted-Python] Binary wheels for Twisted on Windows?
In-Reply-To: <12678863.H2nu75emEu@barry-scott-desktop>
References: <CAJmuMNd9LfSjahxGEf2H15BXZDkUmxgRJ6dEvJnosDH1mhPK_g@mail.gmail.com>
 <12678863.H2nu75emEu@barry-scott-desktop>
Message-ID: <866C699E-A708-4A3F-9A0D-E9CB539FCFCD@twistedmatrix.com>


> On May 28, 2019, at 5:49 AM, Scott, Barry <barry.scott at forcepoint.com> wrote:
> 
> What I do for my python projects on windows is turn them into a setup.exe that 
> the user can run in the traditional way. There are many tools to help you do 
> this. Then the user does not need to install anything except your setup.exe.
> 

This works nicely for projects which are intended as applications, but for development dependencies it's a bit of a headache.  We used to do this with Twisted and stopped because it causes too many problems with people trying to follow best practices (setting up virtualenvs, for example).

We can fix this problem with binary wheels, and we should.  Releases to PyPI should be automatically made by CI, and then we don't have to bother anyone to actually keep a personal development environment around at release time.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190531/4c7ad356/attachment-0002.html>

