From glyph at twistedmatrix.com  Thu May  1 05:28:15 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 1 May 2014 04:28:15 -0700
Subject: [Twisted-Python] Twisted 14.0.0pre5 Announcement
In-Reply-To: <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
References: <71A8C978-FA2F-4DD3-9E7B-14F6EA923953@atleastfornow.net>
 <5545EFD0-9DED-4BCF-91AA-C218DA62C393@atleastfornow.net>
 <89F32CDC-62ED-4C94-92A6-314647D7DA74@atleastfornow.net>
 <CA+t4pawt3xoebz3rmx90GgLyCXnngHmU90fk9CcmV8PLifdCug@mail.gmail.com>
 <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
Message-ID: <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>

On Apr 29, 2014, at 3:16 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> Excellent!
> 
> If anyone else has some applications they run, please try out pre5!
> 
> -hawkowl

I've upgraded <https://glyph.im/> (and therefore <https://glyph.twistedmatrix.com/> and <https://pip2014.com/> and <https://tm.tl/> and a number of other sites that nobody cares about) to the prerelease: <https://asciinema.org/a/9216>.

Smooth sailing so far, except for this one peculiarity; it crashes ssltest now:

<https://www.ssllabs.com/ssltest/analyze.html?d=tm.tl>

This might have nothing to do with the prerelease (for unrelated reasons I had to perform some other upgrades before I got around to it).

Also it looks like a bug on ssllabs' side of things, not a problem with Twisted.  But if someone slightly more experienced with TLS wanted to look at the traffic from that server it might be interesting.

-glyph




From hs at ox.cx  Thu May  1 05:56:23 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 01 May 2014 13:56:23 +0200
Subject: [Twisted-Python] Twisted 14.0.0pre5 Announcement
In-Reply-To: <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>
References: <71A8C978-FA2F-4DD3-9E7B-14F6EA923953@atleastfornow.net>
 <5545EFD0-9DED-4BCF-91AA-C218DA62C393@atleastfornow.net>
 <89F32CDC-62ED-4C94-92A6-314647D7DA74@atleastfornow.net>
 <CA+t4pawt3xoebz3rmx90GgLyCXnngHmU90fk9CcmV8PLifdCug@mail.gmail.com>
 <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
 <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>
Message-ID: <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>

On 1 May 2014, at 13:28, Glyph wrote:

> I've upgraded <https://glyph.im/> (and therefore 
> <https://glyph.twistedmatrix.com/> and <https://pip2014.com/> and 
> <https://tm.tl/> and a number of other sites that nobody cares about) 
> to the prerelease: <https://asciinema.org/a/9216>.
>
> Smooth sailing so far, except for this one peculiarity; it crashes 
> ssltest now:
>
> <https://www.ssllabs.com/ssltest/analyze.html?d=tm.tl>
>
> This might have nothing to do with the prerelease (for unrelated 
> reasons I had to perform some other upgrades before I got around to 
> it).
>
> Also it looks like a bug on ssllabs' side of things, not a problem 
> with Twisted.  But if someone slightly more experienced with TLS 
> wanted to look at the traffic from that server it might be 
> interesting.

When I connect to the hosts you mention using openssl (don?t forget to 
set -servername if you play along) I only get TLSv1.  Is it possible 
that there?s some custom TLS code laying around?

?h

P.S. The cert chain is apparently completely wrong: 
http://glui.me/?i=ek3zvx7v2wrlsgm/2014-05-01_at_13.55.png/  Apparently 
you send out an anchor but missing an intermediate certificate?


From hawkowl at atleastfornow.net  Thu May  1 06:08:05 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Thu, 1 May 2014 20:08:05 +0800
Subject: [Twisted-Python] Twisted 14.0.0pre5 Announcement
In-Reply-To: <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
References: <71A8C978-FA2F-4DD3-9E7B-14F6EA923953@atleastfornow.net>
 <5545EFD0-9DED-4BCF-91AA-C218DA62C393@atleastfornow.net>
 <89F32CDC-62ED-4C94-92A6-314647D7DA74@atleastfornow.net>
 <CA+t4pawt3xoebz3rmx90GgLyCXnngHmU90fk9CcmV8PLifdCug@mail.gmail.com>
 <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
 <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>
 <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
Message-ID: <3023A61F-0E76-4EAE-A197-00D914C40BA9@atleastfornow.net>

FWIW, https://www.ssllabs.com/ssltest/analyze.html?d=blog.dreid.org is on 14.0pre5, and it seems to work, so? (it even gets A+!!!!!)

-hawkowl

On 1 May 2014, at 19:56, Hynek Schlawack <hs at ox.cx> wrote:

> On 1 May 2014, at 13:28, Glyph wrote:
> 
>> I've upgraded <https://glyph.im/> (and therefore <https://glyph.twistedmatrix.com/> and <https://pip2014.com/> and <https://tm.tl/> and a number of other sites that nobody cares about) to the prerelease: <https://asciinema.org/a/9216>.
>> 
>> Smooth sailing so far, except for this one peculiarity; it crashes ssltest now:
>> 
>> <https://www.ssllabs.com/ssltest/analyze.html?d=tm.tl>
>> 
>> This might have nothing to do with the prerelease (for unrelated reasons I had to perform some other upgrades before I got around to it).
>> 
>> Also it looks like a bug on ssllabs' side of things, not a problem with Twisted.  But if someone slightly more experienced with TLS wanted to look at the traffic from that server it might be interesting.
> 
> When I connect to the hosts you mention using openssl (don?t forget to set -servername if you play along) I only get TLSv1.  Is it possible that there?s some custom TLS code laying around?
> 
> ?h
> 
> P.S. The cert chain is apparently completely wrong: http://glui.me/?i=ek3zvx7v2wrlsgm/2014-05-01_at_13.55.png/  Apparently you send out an anchor but missing an intermediate certificate?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140501/c3acb6f3/attachment.pgp>

From glyph at twistedmatrix.com  Thu May  1 13:23:02 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 May 2014 12:23:02 -0700
Subject: [Twisted-Python]
 =?iso-8859-1?q?Some_comments_regarding_=235190_-?=
 =?iso-8859-1?q?_=60=60RFC_6125_=28=22Service_Identity=22=29_implementatio?=
 =?iso-8859-1?q?n=B4=B4?=
In-Reply-To: <20140430122130.6354.1569482577.divmod.xquotient.52@top>
References: <20140430122130.6354.1569482577.divmod.xquotient.52@top>
Message-ID: <C9EA14EB-C6A7-48DD-924A-5662E82BD119@twistedmatrix.com>


On Apr 30, 2014, at 5:21 AM, exarkun at twistedmatrix.com wrote:

> I've just noticed that the changeset for #5190 included some untested code.  Specifically, there are no tests for the code which detects missing dependencies and emits warnings about them.

My bad.  Well, technically hawkowl's bad; hawkowl is a committer and did the review and therefore has all the criminal liability in this case, but as the author who wrote the code I bear some responsibility, at least in some abstract, hypothetical sense ;-).

Thanks for working on the fix; it looks like the relevant ticket is <https://twistedmatrix.com/trac/ticket/7097>.  I'll try to review that as soon as it's ready; let me know.

> I'd previously noticed that this code was broken but hadn't realized this was because it was untested.

Neither the author nor the reviewer realized this either, apparently.  Certainly it wasn't an intentional omission.

> I don't think there's any disagreement whatsoever over Twisted's testing requirements.  All code must have full line and branch coverage (as reported by the coverage.py tool).  Developers, please write tests for all of your code (and please learn to do test-driven development - it will make this task easier, I promise).  Reviewers, please don't accept proposed changes that include untested code.

The problem with code like this is that, in some configurations, it is in fact reported as covered by coverage.py.  It requires manual examination to get the intersection of a diff and a coverage report, and even when you do, we still have too many places where it's "okay" to skip coverage.

As the author I looked at coverage periodically and it looked sort of like what I expected.  Since I was testing multiple installed-library configurations I had used "coverage combine" which misleadingly told me that it was all covered (although this particular code should have been tested independently without requiring a combined run).  And I'm sure the reviewer thought about it a little bit, but even if they'd looked at a coverage report, it might have looked like it was OK to skip these particular lines.  And I was in fact doing test-driven development; I didn't add the warning code there until I was looking at a failing test because one of the buildbots didn't have one of my expected dependencies installed, and I made my tests pass locally by having an environment without those dependencies installed locally either.

Yes, I understand how this isn't really 100% TDD, and that a failure on a buildbot should have resulted in me writing a new test; mistakes were made etc.  But all TDD necessarily involves the occasional error/error/pass where there really ought to have been a pass/fail/pass - if we understood what was going on with all of our code all the time we probably wouldn't need tests in the first place :-).  It's a bit disingenuous to say that I need to "learn to do test-driven development" to avoid mistakes like this, though.

On the other side of the equation, I imagine that a reviewer looking at this, even carefully considering coverage, might see a missed line on some buildbot or in their local run and then thought "oh, of course, but that line will be run if I had/didn't have that library installed".  And there are some bits of code which are acceptable to cover in this manner (except they should have direct test coverage from actual tests, rather than just importing the test module, which coverage.py won't show you).  It's a quite subtle point to understand that this particular kind of code should actually be fully covered in all configurations.  Especially because these tests are smack in the middle of a file which will be validly missing coverage in some supported configurations (no pyOpenSSL installed) and surrounded with thickets of conditionals and test skips to optionally import more dependencies than just this one.

We should remain vigilant, but I think that if we want to really reduce errors like this in the future we need to make them easier to spot.  Failing that we need to have more specific suggestions.  In this case, I happen to know that I do TDD and that Hawkowl was is aware of the standard on coverage issues (and is at least aware of coverage.py, whether or not it was run as part of this review), so those two suggestions aren't going to help as we're already doing them.  Any time the solution to a problem is "everybody should just try harder" that seems like a bet against human fallibility.

So until someone has a month to spend on an all-singing all-dancing combined ratcheting coverage report for all the builders and a fantastic visualization for its output which highlights every possible coverage issue, here are some specific suggestions which might avoid some parts of this class of error:

For authors (what I could have done better):

I know I said they're inevitable, but whenever you get an error/pass, always consider where you could make it a clean fail/pass instead.  You (and by "you" I obviously mean "me") think you understand why an error happened but the only way to really demonstrate you understand it well enough to convert it into an assertion that fails with a useful error message.
Be intensely suspicious of any code that needs to run at import time.  I did stuff the warning into a function, which at least doesn't leak local variables, but I probably could have moved this warning somewhere easier to manage, and would have noticed warnings coming out of tests as opposed to just being printed at the beginning.  Declarative like deprecatedModuleAttribute automate some of the magic for making code-level artifacts emit warnings when bound to and used rather than accidents of their initial import, so make use of those. (I'm still thinking about how I could have applied that in this specific case; I probably could have.)
Configure your development environment to be more aggressive about warnings (at least for now, eventually trial should fix this for you, see <https://twistedmatrix.com/trac/ticket/6348>).  I don't think it would have helped in this particular case because the warning itself is emitted at import time (see point 2) but this sort of mistake crops up unfortunately frequently related to deprecation warnings, which are a bit more common, and could often be caught by a better setup.  I recently changed my PYTHONWARNINGS environment variable to 'all::DeprecationWarning,all::UserWarning', and that seems to catch most things.  (Unfortunately setting it to simply 'all' produces too much noise from the stdlib and dependencies so it's better to be slightly more restrictive.)

For reviewers (what hawkowl could have done better):

Run coverage.  Particularly, run coverage just on the relevant and changed test modules, and make sure the system under test gets run directly and just accidentally executed by running the code.
I know I've been reminding reviewers lately to give clear feedback about what elements of reviews are suggestions and which are required fixes for violations of policy, and that may produce the subjective impression that I've been asking for faster or less careful reviews.  If so, I should correct that impression: I would like there to be less bike shedding, but it's still pretty important that the ?10 million reactor actually work.  Any lack of test coverage is at least a potential policy violation.  Even if you think you understand why it's missing, even if it looks like a platform variance that doesn't make sense to test on the machine you're running, always ask the author to explain or justify why coverage isn't there, if it could be added to a cross-platform test with a reasonable (or, in many cases, even an existing) fake; if there's no relevant fake and it would be too much work, maybe we need to file a ticket for implementing some test support.
Especially if you're dealing with a new feature or a significant behavior change, always try to actually run and interact with the code and look at its output.  In this case, noticing the whitespace / formatting errors in the warning messages might have lead us to spot the coverage error earlier.  (Jean-Paul made some comments to me when he noticed it, but it was an off-the-cuff thing after the branch had already been landed and not part of a code review; context is important here, as evidenced by the fact that it took him some time to realize that it was indicative of a test coverage issue!

If anyone else has any ideas.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140501/fe5aa030/attachment.html>

From glyph at twistedmatrix.com  Thu May  1 13:28:17 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 May 2014 12:28:17 -0700
Subject: [Twisted-Python] Twisted 14.0.0pre5 Announcement
In-Reply-To: <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
References: <71A8C978-FA2F-4DD3-9E7B-14F6EA923953@atleastfornow.net>
 <5545EFD0-9DED-4BCF-91AA-C218DA62C393@atleastfornow.net>
 <89F32CDC-62ED-4C94-92A6-314647D7DA74@atleastfornow.net>
 <CA+t4pawt3xoebz3rmx90GgLyCXnngHmU90fk9CcmV8PLifdCug@mail.gmail.com>
 <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
 <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>
 <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
Message-ID: <B9A5ABB9-011C-4884-BD53-D64677D9F6D5@twistedmatrix.com>

On May 1, 2014, at 4:56 AM, Hynek Schlawack <hs at ox.cx> wrote:

> When I connect to the hosts you mention using openssl (don?t forget to set -servername if you play along) I only get TLSv1.  Is it possible that there?s some custom TLS code laying around?

As far as I can see, only <https://github.com/glyph/txsni>.  It constructs the CertificateOptions in <https://github.com/glyph/txsni/blob/master/txsni/only_noticed_pypi_pem_after_i_wrote_this.py> (whose name suggests a change I need to make to this library).  Am I forgetting some cool new options to CertificateOptions?

The machine is an Ubuntu 14.04 machine with libssl1.0.0:libssl1.0.1f-ubuntu-don't-have-a-heart-attack-it's-actually-g (I seriously wish they wouldn't do that with security patches).

Any other packages I should be looking for?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140501/07ed1786/attachment.html>

From glyph at twistedmatrix.com  Thu May  1 13:29:00 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 May 2014 12:29:00 -0700
Subject: [Twisted-Python] Twisted 14.0.0pre5 Announcement
In-Reply-To: <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
References: <71A8C978-FA2F-4DD3-9E7B-14F6EA923953@atleastfornow.net>
 <5545EFD0-9DED-4BCF-91AA-C218DA62C393@atleastfornow.net>
 <89F32CDC-62ED-4C94-92A6-314647D7DA74@atleastfornow.net>
 <CA+t4pawt3xoebz3rmx90GgLyCXnngHmU90fk9CcmV8PLifdCug@mail.gmail.com>
 <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
 <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>
 <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
Message-ID: <2C02938B-5D0C-49FA-B04C-F4D3292183B9@twistedmatrix.com>

On May 1, 2014, at 4:56 AM, Hynek Schlawack <hs at ox.cx> wrote:

> P.S. The cert chain is apparently completely wrong: http://glui.me/?i=ek3zvx7v2wrlsgm/2014-05-01_at_13.55.png/  Apparently you send out an anchor but missing an intermediate certificate?

What even is a pem, how can a chain be correct I don't even know.  I used 'cat' to put some stuff into files.  This was not crashing ssltest before :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140501/8e3405df/attachment-0001.html>

From hs at ox.cx  Thu May  1 14:08:20 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 01 May 2014 22:08:20 +0200
Subject: [Twisted-Python] Twisted 14.0.0pre5 Announcement
In-Reply-To: <B9A5ABB9-011C-4884-BD53-D64677D9F6D5@twistedmatrix.com>
References: <71A8C978-FA2F-4DD3-9E7B-14F6EA923953@atleastfornow.net>
 <5545EFD0-9DED-4BCF-91AA-C218DA62C393@atleastfornow.net>
 <89F32CDC-62ED-4C94-92A6-314647D7DA74@atleastfornow.net>
 <CA+t4pawt3xoebz3rmx90GgLyCXnngHmU90fk9CcmV8PLifdCug@mail.gmail.com>
 <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
 <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>
 <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
 <B9A5ABB9-011C-4884-BD53-D64677D9F6D5@twistedmatrix.com>
Message-ID: <DC166470-7F8D-4240-B720-7A049F9A71C6@ox.cx>

On 1 May 2014, at 21:28, Glyph Lefkowitz wrote:

>> When I connect to the hosts you mention using openssl (don?t forget 
>> to set -servername if you play along) I only get TLSv1.  Is it 
>> possible that there?s some custom TLS code laying around?
>
> As far as I can see, only <https://github.com/glyph/txsni>.  It 
> constructs the CertificateOptions in 
> <https://github.com/glyph/txsni/blob/master/txsni/only_noticed_pypi_pem_after_i_wrote_this.py> 
> (whose name suggests a change I need to make to this library).  Am I 
> forgetting some cool new options to CertificateOptions?

If you want DHE, you need to load DH parameters: 
http://twisted.readthedocs.org/en/latest/core/howto/ssl.html#tls-protocol-options 
too.

Why your server only accepts TLSv1 is beyond me off the cuff.

> The machine is an Ubuntu 14.04 machine with 
> libssl1.0.0:libssl1.0.1f-ubuntu-don't-have-a-heart-attack-it's-actually-g 
> (I seriously wish they wouldn't do that with security patches).

Well, that?s what distributions do. *shrug*  They don?t update your 
software so nothing breaks; they just fix the security issues (thus 
it?s not necessarily g, Ubuntu?s fix *can* be very different from 
what OpenSSL did.


From glyph at twistedmatrix.com  Thu May  1 13:33:54 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 May 2014 12:33:54 -0700
Subject: [Twisted-Python] read the docs versions (was Re: adding endpoint
	plugins)
In-Reply-To: <74CA910F-B09C-4017-A7C3-A1FF4729B946@stufft.io>
References: <CAFN1edq3opwu37tSmad-aYG7K_AwTjik-HmzA_YejtAd1LHBrw@mail.gmail.com>
 <20140430141416.6354.407951741.divmod.xquotient.68@top>
 <CA+U=zK2dQbq2V864_=xFQbV4Znag6WHZzahB_SvDDbHLjcCVjg@mail.gmail.com>
 <D2C6DAF1-E7B0-4DEE-9CED-99758536D2A5@twistedmatrix.com>
 <74CA910F-B09C-4017-A7C3-A1FF4729B946@stufft.io>
Message-ID: <4C738ADD-A9C9-460A-89F1-D80033C4E5A5@twistedmatrix.com>


On Apr 30, 2014, at 12:09 PM, Donald Stufft <donald at stufft.io> wrote:

> There is a drop down for default release in the RTD admin panel.

The drop down isn't super helpful:



But I noticed that page also has a huuuuuge list of branches on it, so I checked off the most recent 14.0 branch and now it's toiling away.

We should add this to the release process.  Hawkowl?

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140501/8fbc2230/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PastedGraphic-1.png
Type: image/png
Size: 95693 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140501/8fbc2230/attachment-0001.png>

From glyph at twistedmatrix.com  Thu May  1 16:19:04 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 May 2014 15:19:04 -0700
Subject: [Twisted-Python] Twisted 14.0.0pre5 Announcement
In-Reply-To: <DC166470-7F8D-4240-B720-7A049F9A71C6@ox.cx>
References: <71A8C978-FA2F-4DD3-9E7B-14F6EA923953@atleastfornow.net>
 <5545EFD0-9DED-4BCF-91AA-C218DA62C393@atleastfornow.net>
 <89F32CDC-62ED-4C94-92A6-314647D7DA74@atleastfornow.net>
 <CA+t4pawt3xoebz3rmx90GgLyCXnngHmU90fk9CcmV8PLifdCug@mail.gmail.com>
 <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
 <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>
 <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
 <B9A5ABB9-011C-4884-BD53-D64677D9F6D5@twistedmatrix.com>
 <DC166470-7F8D-4240-B720-7A049F9A71C6@ox.cx>
Message-ID: <22E8FFC2-3A8B-4889-AFEE-D23B5CE1D9A1@twistedmatrix.com>


On May 1, 2014, at 1:08 PM, Hynek Schlawack <hs at ox.cx> wrote:

> On 1 May 2014, at 21:28, Glyph Lefkowitz wrote:
> 
>>> When I connect to the hosts you mention using openssl (don?t forget to set -servername if you play along) I only get TLSv1.  Is it possible that there?s some custom TLS code laying around?
>> 
>> As far as I can see, only <https://github.com/glyph/txsni>.  It constructs the CertificateOptions in <https://github.com/glyph/txsni/blob/master/txsni/only_noticed_pypi_pem_after_i_wrote_this.py> (whose name suggests a change I need to make to this library).  Am I forgetting some cool new options to CertificateOptions?
> 
> If you want DHE, you need to load DH parameters:http://twisted.readthedocs.org/en/latest/core/howto/ssl.html#tls-protocol-options too.

I'm going to make txsni use pem, and then get the automagical DH params version with 0.4 ;-).

> Why your server only accepts TLSv1 is beyond me off the cuff.

Oh hah, I think I got it: in order to do SNI with OpenSSL, you need an _initial_ context.  For me, in txSNI, that's an incredibly poorly-set-up one just specifying TLSv1_METHOD, here: <https://github.com/glyph/txsni/blob/master/txsni/snimap.py#L11>

I should probably have a default DEFAULT.pem symlink in there or something.

Another name hosted on that domain is <https://www.ssllabs.com/ssltest/analyze.html?d=glyph.twistedmatrix.com> which doesn't have any of the spurious chain errors.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140501/5e9ca37b/attachment.html>

From sank.daniel at gmail.com  Thu May  1 22:55:59 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 1 May 2014 21:55:59 -0700
Subject: [Twisted-Python] pb objects unexpectedly change identity
In-Reply-To: <CAKN9TDJ02ayP-XsxTfyeU5ONn8tFFyHHT1RRyDdD=-FN8G2fqQ@mail.gmail.com>
References: <CAKN9TD+BDk_00uNfw=PecB3PLN6bS7UcvqotBP6qxp0cMbHavA@mail.gmail.com>
 <CAKN9TDJ02ayP-XsxTfyeU5ONn8tFFyHHT1RRyDdD=-FN8G2fqQ@mail.gmail.com>
Message-ID: <CAKN9TDLPLwZHv-Ni2=Gjtfr8PfyBw9ky6viezQZRaNTMrad-jw@mail.gmail.com>

Dear twisted users,

I have discovered the cause of this strange behavior. This is a good one.

The object exposed to you as a client when you receive a RemoteCache is not
the same object which is passed in as "self" to observe_* methods. In the
source code, there is a pair of objects created when a RemoteCache is
received. One of them is given to the client, and the other remains in the
shadows of pb for reasons I don't yet understand. For some reason
remoteMessageReceived delegates observe_* methods to the object which is
not the one given to the client. This means that normal methods and
observe_* methods get different self arguments.

The authors seemed to try to cover this up by forcing the two objects to
share the same __dict__ and __class__. Of course this does not give the
objects the same id, which was the source of my problem.

I have reported this issue here: https://twistedmatrix.com/trac/ticket/7274

I am interested in fixing this bug. What is the right way to get help from
people who know the code? I have some simple questions I'd like to ask so
that I go in the right direction while fixing this.

-Daniel



On Wed, Apr 30, 2014 at 8:09 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> Dear Twisted users,
>
> To my amazement I have reproduced this strange behaviour in an even
> simpler program. Attached are a pb client/server which illustrate
> unexpected behaviour of the id of a pb.RemoteCache. To run the example, run
> server.py and then client.py (with resources.py in the same working
> directory).
>
> You will see output like this (line numbers added by me)
>
> ====
> 1. RemoteCache 29403544 initialized
> 2. Client received RemoteCache: id=29403544
> 3. RemoteCache: while responding to observe_add I think my id is 29403760
> 4. Client: The RemoteCache's ide is 29403544
> ...
> ====
>
> 1. When the RemoteCache is initialized it thinks its id is 29403544.
> 2. The client agrees that it has received a RemoteCache with id 29403544.
> 3. When the RemoteCache is inside observe_add it thinks its id is 29403760.
> 4. The client still thinks the RemoteCache's id is 29403544.
>
> If you let the program run it will continue to loop between the
> RemoteCache reporting its id while in observe_add, and the client reporting
> the id of the RemoteCache. The two reported ids are always the same unequal
> numbers.
>
> The question appears to be "Why does the id reported by a RemoteCache's
> while inside an observe_* method differ the id reported by objects owning
> references to that RemoteCache?"
>
> Thank you for your time,
> Daniel
>
>
>
>
> On Wed, Apr 30, 2014 at 11:00 AM, Daniel Sank <sank.daniel at gmail.com>wrote:
>
>> Dear twisted users,
>>
>> I think I have found some surprising behavior in perspective broker. I
>> define a subclass of pb.RemoteCache which has a method managed by a
>> descriptor. The descriptor keeps track of the instances it manages in a set.
>>
>> When the RemoteCache is first received by the client, it accesses the
>> descriptor-ified method inside setCopyableState. At that time the
>> RemoteCache's id is a certain value X. Then later when the RemoteCache is
>> notified of a change by the server side Cacheable, it again accesses the
>> descriptor-ified method, but at this time it's id is Y, and Y!=X.
>>
>> I attach to this post a simple working example which displays the
>> behavior described above. To run, first run server.py and then run
>> client.py. You will see a little bit of output, the most important part
>> being
>>
>> ===
>> Client received RemoteCache: id=45952496
>>
>> Asking server to update
>> TD 45921680 (test.RemoteCache.add) accessed by <test.RemoteCache instance
>> at 2BD2DC8>: id=45952456
>> RemoteCache id=45952496
>> ===
>>
>> To understand the details of the output please see descriptor.py. The id
>> of the RemoteCache is first reported as 45952496 when the client receives
>> it. Then, when the descriptor is accessed, the id of the accessing instance
>> is reported as 45952456, which is different. Then, when in the last line we
>> print out the id of the RemoteCache we're back to 45952496.
>>
>> Is there some reason that a RemoteCache's id can change during its life
>> time?
>>
>> --
>> Daniel Sank
>> Department of Physics
>> Broida Hall
>> University of California
>> Santa Barbara, CA 93117
>> (805)893-3899
>>
>
>
>
> --
> Daniel Sank
> Department of Physics
> Broida Hall
> University of California
> Santa Barbara, CA 93117
> (805)893-3899
>



-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140501/3f3e59cc/attachment.html>

From dstainton415 at gmail.com  Fri May  2 07:59:05 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Fri, 2 May 2014 13:59:05 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
Message-ID: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>

Greetings,

Today I wrote an endpoint parser for Meejah's txtorcon Tor Hidden
Service endpoint.

Now that we have foolscap ported to twisted endpoints (branch needs
review but I should probably rebase first) we'd like to be able to
simply specify an "onion" endpoint descriptor in Tahoe-LAFS
configuration... that way foolscap receives the descriptor and uses
serverFromString to generate the endpoint object.

This will work fine for the txsocksx tor client endpoint parser I
wrote... However the txtorcon Tor Hidden Service endpoint setup
requires a deferred to fire once the tor process is started... This
means that the endpoint parser needs to return a deferred. But this
breaks the interface!... meaning that foolscap or any other api using
this onion endpoint parser will have to special case the situation
where serverFromString returns a deferred.

Terrible! Or do you think this is not so terrible?
I am curious to know your thoughts and if any of you have alternate
solutions... since I am obviously doing it wrong.

Here's my txtorcon onion endpoint parser:
https://github.com/david415/txtorcon/blob/endpoint_parser_plugin/examples/hiddenservice_endpoint_parser.py

And here's some example code that uses it:
https://github.com/david415/txtorcon/blob/endpoint_parser_plugin/examples/launch_tor_endpoint.py

By the way (just in case you don't know)... you can test this parser
by placing it in the twisted/plugins directory... here's how I do it:

cd projects/virtualenv-1.11.1/
./virtualenv.py ~/virtenv-endpoints-test
. ~/virtenv-endpoints-test/bin/activate
usewithtor pip install twisted
cd ~/projects
git clone https://github.com/david415/txtorcon.git
# defaults to my endpoint_parser_plugin branch
cd txtorcon
usewithtor python setup.py install
cd examples # CWD is now /home/human/projects/txtorcon/examples
cp hiddenservice_endpoint_parser.py
/home/human/virtenv-endpoints-test/lib/python2.7/site-packages/twisted/plugins
# and then run the example code that uses this endpoint parser
python launch_tor_endpoint.py



Cheers,

David


From mithrandi at mithrandi.net  Fri May  2 08:20:38 2014
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 2 May 2014 16:20:38 +0200
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
Message-ID: <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>

On 2 May 2014 15:59, David Stainton <dstainton415 at gmail.com> wrote:
> This will work fine for the txsocksx tor client endpoint parser I
> wrote... However the txtorcon Tor Hidden Service endpoint setup
> requires a deferred to fire once the tor process is started... This
> means that the endpoint parser needs to return a deferred. But this
> breaks the interface!... meaning that foolscap or any other api using
> this onion endpoint parser will have to special case the situation
> where serverFromString returns a deferred.

I think you're approaching this from the wrong angle; instead of
starting the tor process during parsing of the endpoint, I think it
would make more sense to start the tor process when the endpoint is
started.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From hawkowl at atleastfornow.net  Fri May  2 08:40:19 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Fri, 2 May 2014 22:40:19 +0800
Subject: [Twisted-Python] read the docs versions (was Re: adding
	endpoint plugins)
In-Reply-To: <4C738ADD-A9C9-460A-89F1-D80033C4E5A5@twistedmatrix.com>
References: <CAFN1edq3opwu37tSmad-aYG7K_AwTjik-HmzA_YejtAd1LHBrw@mail.gmail.com>
 <20140430141416.6354.407951741.divmod.xquotient.68@top>
 <CA+U=zK2dQbq2V864_=xFQbV4Znag6WHZzahB_SvDDbHLjcCVjg@mail.gmail.com>
 <D2C6DAF1-E7B0-4DEE-9CED-99758536D2A5@twistedmatrix.com>
 <74CA910F-B09C-4017-A7C3-A1FF4729B946@stufft.io>
 <4C738ADD-A9C9-460A-89F1-D80033C4E5A5@twistedmatrix.com>
Message-ID: <4E122C40-7CB0-493D-B5A3-2AFE12AAA395@atleastfornow.net>

Sounds like a good idea, I'll make a note to do it and write it in the release process once I've done it. 

- HawkOwl

> On 2 May 2014, at 3:33, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Apr 30, 2014, at 12:09 PM, Donald Stufft <donald at stufft.io> wrote:
>> 
>> There is a drop down for default release in the RTD admin panel.
> 
> The drop down isn't super helpful:
> 
> <PastedGraphic-1.png>
> 
> But I noticed that page also has a huuuuuge list of branches on it, so I checked off the most recent 14.0 branch and now it's toiling away.
> 
> We should add this to the release process.  Hawkowl?
> 
> -g
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140502/23521119/attachment.html>

From dstainton415 at gmail.com  Fri May  2 08:53:39 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Fri, 2 May 2014 14:53:39 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
Message-ID: <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>

I get what you are saying... but let's back up a second;
foolscap (in my branch
https://github.com/david415/foolscap/tree/endpoint_descriptors_server2)
uses clientFromString and serverFromString to translate twisted
endpoint descriptors into endpoint objects... AND foolscap
doesn't know any details about how the endpoint wire protocols work...
and we'd like to keep it that way. That's really the point of this
exercise.

The calling party using foolscap... in this case Tahoe-LAFS also
doesn't know anything about any wire protocols.
It simply receives twisted endpoint descriptors from the user and
passes them to foolscap.

On Fri, May 2, 2014 at 2:20 PM, Tristan Seligmann
<mithrandi at mithrandi.net> wrote:
> On 2 May 2014 15:59, David Stainton <dstainton415 at gmail.com> wrote:
>> This will work fine for the txsocksx tor client endpoint parser I
>> wrote... However the txtorcon Tor Hidden Service endpoint setup
>> requires a deferred to fire once the tor process is started... This
>> means that the endpoint parser needs to return a deferred. But this
>> breaks the interface!... meaning that foolscap or any other api using
>> this onion endpoint parser will have to special case the situation
>> where serverFromString returns a deferred.
>
> I think you're approaching this from the wrong angle; instead of
> starting the tor process during parsing of the endpoint, I think it
> would make more sense to start the tor process when the endpoint is
> started.
> --
> mithrandi, i Ainil en-Balandor, a faer Ambar
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From exarkun at twistedmatrix.com  Fri May  2 09:01:17 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 02 May 2014 15:01:17 -0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
 deferred
In-Reply-To: <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
 <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>
Message-ID: <20140502150117.6354.2006790020.divmod.xquotient.125@top>

On 02:53 pm, dstainton415 at gmail.com wrote:
>I get what you are saying... but let's back up a second;
>foolscap (in my branch
>https://github.com/david415/foolscap/tree/endpoint_descriptors_server2)
>uses clientFromString and serverFromString to translate twisted
>endpoint descriptors into endpoint objects... AND foolscap
>doesn't know any details about how the endpoint wire protocols work...
>and we'd like to keep it that way. That's really the point of this
>exercise.
>
>The calling party using foolscap... in this case Tahoe-LAFS also
>doesn't know anything about any wire protocols.
>It simply receives twisted endpoint descriptors from the user and
>passes them to foolscap.

But Foolscap does know about *endpoints*.  It knows to call `listen` or 
`connect` on them.  Both of those methods return a `Deferred`.  Any 
setup work you need to do you should be able to do in the implementation 
of those methods and however long it takes is how long it takes - just 
don't fire the `Deferred` until it is ready.

Jean-Paul


From dstainton415 at gmail.com  Fri May  2 09:13:10 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Fri, 2 May 2014 15:13:10 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <20140502150117.6354.2006790020.divmod.xquotient.125@top>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
 <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>
 <20140502150117.6354.2006790020.divmod.xquotient.125@top>
Message-ID: <CAFN1edr4FLsmavcucMT3mfNTduAHtDOXA4K7okxDPSmhQ+LkTg@mail.gmail.com>

Ah ha! Of course it is so obvious now that you point it out to me.
The onion endpoint parser can do this setup work in it's  `listen`
method which returns a `Deferred`.
Thanks for your observation/advice!

Cheers!

David

On Fri, May 2, 2014 at 3:01 PM,  <exarkun at twistedmatrix.com> wrote:
> On 02:53 pm, dstainton415 at gmail.com wrote:
>>
>> I get what you are saying... but let's back up a second;
>> foolscap (in my branch
>> https://github.com/david415/foolscap/tree/endpoint_descriptors_server2)
>> uses clientFromString and serverFromString to translate twisted
>> endpoint descriptors into endpoint objects... AND foolscap
>> doesn't know any details about how the endpoint wire protocols work...
>> and we'd like to keep it that way. That's really the point of this
>> exercise.
>>
>> The calling party using foolscap... in this case Tahoe-LAFS also
>> doesn't know anything about any wire protocols.
>> It simply receives twisted endpoint descriptors from the user and
>> passes them to foolscap.
>
>
> But Foolscap does know about *endpoints*.  It knows to call `listen` or
> `connect` on them.  Both of those methods return a `Deferred`.  Any setup
> work you need to do you should be able to do in the implementation of those
> methods and however long it takes is how long it takes - just don't fire the
> `Deferred` until it is ready.
>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From meejah at meejah.ca  Fri May  2 14:02:45 2014
From: meejah at meejah.ca (meejah)
Date: Sat, 03 May 2014 00:02:45 +0400
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <CAFN1edr4FLsmavcucMT3mfNTduAHtDOXA4K7okxDPSmhQ+LkTg@mail.gmail.com>
 (David Stainton's message of "Fri, 2 May 2014 15:13:10 +0000")
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
 <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>
 <20140502150117.6354.2006790020.divmod.xquotient.125@top>
 <CAFN1edr4FLsmavcucMT3mfNTduAHtDOXA4K7okxDPSmhQ+LkTg@mail.gmail.com>
Message-ID: <868uqk9cey.fsf@atlantis.meejah.ca>

David Stainton <dstainton415 at gmail.com> writes:

> Ah ha! Of course it is so obvious now that you point it out to me.
> The onion endpoint parser can do this setup work in it's  `listen`
> method which returns a `Deferred`.
> Thanks for your observation/advice!

Cool! Thanks for doing this. Can I pull it into txtorcon when it's
finished?

Also (more from the Tor end), someone specifying a service will also
want to specify the keys for that service. Following the 'ssl' stuff, I
guess something like "onion:80:hiddenServiceDir=/dev/shm/foo" might be
appropriate? Or perhaps even a way to specify the private key directly?

...and to bikeshed a bit, what about "anontcp:" as a prefix? Then for
client-side strings, it could look similar
(e.g. "anontcp:encrypted.google.com:443") which could in worst-case
launch a new tor instance, wait for it to bootstrap etc in
connect(). Perhaps "looking similar" is a non-feature, though :)
Another point for this is that "someday" tor will have UDP support...

thanks,
meejah


From glyph at twistedmatrix.com  Fri May  2 15:16:20 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 May 2014 14:16:20 -0700
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <868uqk9cey.fsf@atlantis.meejah.ca>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
 <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>
 <20140502150117.6354.2006790020.divmod.xquotient.125@top>
 <CAFN1edr4FLsmavcucMT3mfNTduAHtDOXA4K7okxDPSmhQ+LkTg@mail.gmail.com>
 <868uqk9cey.fsf@atlantis.meejah.ca>
Message-ID: <2C7BB29E-2626-40A5-B603-BF8144B21322@twistedmatrix.com>

On May 2, 2014, at 1:02 PM, meejah <meejah at meejah.ca> wrote:

> Another point for this is that "someday" tor will have UDP support...

There's a reason that the existing interfaces all have "stream" in their names :-).

The main reason we didn't do "datagram" at the same time is that there's a pretty clear client/server division in all stream endpoints (one side has to initiate, the other side has to respond) but given the possibilities for multicast / fan-out / fan-in with datagram sockets, "just do what UDP does" didn't seem obviously correct.

I'd love it if someone with an interest would make some datagram endpoint interfaces though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140502/3f872acd/attachment.html>

From glyph at twistedmatrix.com  Fri May  2 15:18:40 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 May 2014 14:18:40 -0700
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
Message-ID: <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>


On May 2, 2014, at 6:59 AM, David Stainton <dstainton415 at gmail.com> wrote:

> Today I wrote an endpoint parser for Meejah's txtorcon Tor Hidden
> Service endpoint.

This is fantastic.  Basically this is _exactly_ the use-case that we had in mind when designing the endpoint parser plugin APIs.

Thanks so much for doing it.

(I hope you'll contribute it to txtorcon when you're done...)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140502/c94c669b/attachment.html>

From dstainton415 at gmail.com  Fri May  2 18:09:03 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 3 May 2014 00:09:03 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <868uqk9cey.fsf@atlantis.meejah.ca>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
 <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>
 <20140502150117.6354.2006790020.divmod.xquotient.125@top>
 <CAFN1edr4FLsmavcucMT3mfNTduAHtDOXA4K7okxDPSmhQ+LkTg@mail.gmail.com>
 <868uqk9cey.fsf@atlantis.meejah.ca>
Message-ID: <CAFN1edoZ2A9Zr=M7wU+5WBHtCFUWoi2i6UQMgSUX=_0wNGuYQQ@mail.gmail.com>

>> Ah ha! Of course it is so obvious now that you point it out to me.
>> The onion endpoint parser can do this setup work in it's  `listen`
>> method which returns a `Deferred`.
>> Thanks for your observation/advice!
>
> Cool! Thanks for doing this. Can I pull it into txtorcon when it's
> finished?

Yes of course! I have every intention of helping out the Tor project
as much as I can... I want as many developers to benefit from this as
possible so that many more applications can and will utilize the tor
network... for anonymity, censorship resistance and great good.

> Also (more from the Tor end), someone specifying a service will also
> want to specify the keys for that service. Following the 'ssl' stuff, I
> guess something like "onion:80:hiddenServiceDir=/dev/shm/foo" might be
> appropriate? Or perhaps even a way to specify the private key directly?

Yes... precisely what I was thinking. For now specifying a directory
containing keys might be good enough...
but like you say... I should also provide a way to specify the private
key directly. Sounds good!

> ...and to bikeshed a bit, what about "anontcp:" as a prefix? Then for

Yes I agree this is essentially in the bikeshed category of discussions.
Let's try to reach consensus. Perhaps off the tahoe-lafs and twisted
mailing lists... and perhaps on the tor-dev list.
I look forward to collaborating with you (and anyone else who wants to
help out).

> client-side strings, it could look similar
> (e.g. "anontcp:encrypted.google.com:443") which could in worst-case
> launch a new tor instance, wait for it to bootstrap etc in
> connect(). Perhaps "looking similar" is a non-feature, though :)

Yeah... earlier today I also got the naive client side tor endpoint
parser working.
It uses txsocksx of course. I briefly chatted with the txsocksx author
_habnabit on #twisted about possible designs for the client side tor
endpoints. Basically we seem to all be on the same page.... in that
there may well be a need for multiple types of client side endpoints;
We can have an endpoint that has internal logic to retry the tor
connection on various ports; 9050, 9150... and another tor client side
endpoint that launches it's own tor process (using txtorcon of course)
and then uses txsocksx to establish the socks connection to tor.
Or maybe it'll be the same endpoint that behaves according to the
arguments it's passed.

> Another point for this is that "someday" tor will have UDP support...
>
> thanks,
> meejah

cheers,

david


From dstainton415 at gmail.com  Fri May  2 18:20:36 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 3 May 2014 00:20:36 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <2C7BB29E-2626-40A5-B603-BF8144B21322@twistedmatrix.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
 <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>
 <20140502150117.6354.2006790020.divmod.xquotient.125@top>
 <CAFN1edr4FLsmavcucMT3mfNTduAHtDOXA4K7okxDPSmhQ+LkTg@mail.gmail.com>
 <868uqk9cey.fsf@atlantis.meejah.ca>
 <2C7BB29E-2626-40A5-B603-BF8144B21322@twistedmatrix.com>
Message-ID: <CAFN1edqKdV6Bui3sRCZXFJM5QspCfyfxKqZACceu8kCJooay9Q@mail.gmail.com>

Ah yeah... twisted endpoints that support udp...
Perhaps when Yawning Angel finishes Lightweight Obfuscated Datagram
Protocol (LODP) there will be interesting things we can do with
this... and a more immediate perceived need for twisted datagram
endpoint interfaces.


On Fri, May 2, 2014 at 9:16 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> On May 2, 2014, at 1:02 PM, meejah <meejah at meejah.ca> wrote:
>
> Another point for this is that "someday" tor will have UDP support...
>
>
> There's a reason that the existing interfaces all have "stream" in their
> names :-).
>
> The main reason we didn't do "datagram" at the same time is that there's a
> pretty clear client/server division in all stream endpoints (one side has to
> initiate, the other side has to respond) but given the possibilities for
> multicast / fan-out / fan-in with datagram sockets, "just do what UDP does"
> didn't seem obviously correct.
>
> I'd love it if someone with an interest would make some datagram endpoint
> interfaces though.
>
> -glyph
>


From dstainton415 at gmail.com  Fri May  2 18:45:10 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 3 May 2014 00:45:10 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
Message-ID: <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>

Thanks. Sure thing. Yes I have every intention of contributing
endpoint parsers to txtorcon and txsocksx for use with tor.
Both of these could make it much easier for developers to make their
applications tor friendly.

The endpoints/endpoint parsers api is brilliant! When the tor
client/server endpoint parsers are complete then Tahoe-LAFS for
instance can simply use these endpoints without any code changes at
all. Of course I'm not saying that is all that is required for
Tahoe-LAFS to be "tor friendly"... we have detailed other
considerations in trac tickets:
https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517
http://foolscap.lothar.com/trac/ticket/203

I'm starting to think about the deployment issues... Perhaps someone
on the list knows of the "correct" setup.py (distutils/setuputils?)
procedure to deploy twisted plugins? I shall have to research this
soon. For now my hacky development/testing flow works OK.


On Fri, May 2, 2014 at 9:18 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> On May 2, 2014, at 6:59 AM, David Stainton <dstainton415 at gmail.com> wrote:
>
> Today I wrote an endpoint parser for Meejah's txtorcon Tor Hidden
> Service endpoint.
>
>
> This is fantastic.  Basically this is _exactly_ the use-case that we had in
> mind when designing the endpoint parser plugin APIs.
>
> Thanks so much for doing it.
>
> (I hope you'll contribute it to txtorcon when you're done...)
>
> -glyph
>


From glyph at twistedmatrix.com  Fri May  2 23:09:29 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 2 May 2014 22:09:29 -0700
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
 <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
Message-ID: <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>

On May 2, 2014, at 5:45 PM, David Stainton <dstainton415 at gmail.com> wrote:

> I'm starting to think about the deployment issues... Perhaps someone
> on the list knows of the "correct" setup.py (distutils/setuputils?)
> procedure to deploy twisted plugins? I shall have to research this
> soon. For now my hacky development/testing flow works OK.


This stack overflow question still hasn't gotten a great answer:
<https://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py-for-a-twistd-twisted-plugin-that-works-with-setuptools>
If you figure something out, please post it there.

However, assuming a post-deluvian version of pip, this simple setup appears to work OK for me:
<https://github.com/glyph/txsni/blob/master/setup.py#L16>
and I haven't found a setup that breaks it yet.

-glyph



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140502/43ca64bf/attachment-0001.html>

From exarkun at twistedmatrix.com  Sat May  3 06:20:41 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 03 May 2014 12:20:41 -0000
Subject: [Twisted-Python]
 =?utf-8?q?Some_comments_regarding_=235190_-_=60?=
 =?utf-8?q?=60RFC_6125_=28=22Service_Identity=22=29_implementation=C2=B4?=
 =?utf-8?b?wrQ=?=
In-Reply-To: <C9EA14EB-C6A7-48DD-924A-5662E82BD119@twistedmatrix.com>
References: <20140430122130.6354.1569482577.divmod.xquotient.52@top>
 <C9EA14EB-C6A7-48DD-924A-5662E82BD119@twistedmatrix.com>
Message-ID: <20140503122041.6354.1241503771.divmod.xquotient.163@top>

On 1 May, 07:23 pm, glyph at twistedmatrix.com wrote:
>
>On Apr 30, 2014, at 5:21 AM, exarkun at twistedmatrix.com wrote:
>>I've just noticed that the changeset for #5190 included some untested 
>>code.  Specifically, there are no tests for the code which detects 
>>missing dependencies and emits warnings about them.
>
>My bad.  Well, technically hawkowl's bad; hawkowl is a committer and 
>did the review and therefore has all the criminal liability in this 
>case, but as the author who wrote the code I bear some responsibility, 
>at least in some abstract, hypothetical sense ;-).

My hope is that by drawing attention to examples of this kind of mistake 
will help us avoid making the mistake in the future.  Considering what 
my email prompted you to write, I think it may work. :)
>
>Thanks for working on the fix; it looks like the relevant ticket is 
><https://twistedmatrix.com/trac/ticket/7097>.  I'll try to review that 
>as soon as it's ready; let me know.

No problem.  I probably should have started my previous email with 
thanks to you and hawkowl for working on that feature.  It is *really* 
good to have service identity checking support in Twisted.
>>
>>I'd previously noticed that this code was broken but hadn't realized 
>>this was because it was untested.
>
>Neither the author nor the reviewer realized this either, apparently. 
>Certainly it wasn't an intentional omission.
>>I don't think there's any disagreement whatsoever over Twisted's 
>>testing requirements.  All code must have full line and branch 
>>coverage (as reported by the coverage.py tool).  Developers, please 
>>write tests for all of your code (and please learn to do test-driven 
>>development - it will make this task easier, I promise).  Reviewers, 
>>please don't accept proposed changes that include untested code.
>
>The problem with code like this is that, in some configurations, it is 
>in fact reported as covered by coverage.py.  It requires manual 
>examination to get the intersection of a diff and a coverage report, 
>and even when you do, we still have too many places where it's "okay" 
>to skip coverage.

This is true - but I'm not sure the code in this case is particularly 
special.  It's nearly always possible to write code and tests such that 
coverage.py says your code is covered but without actually having any 
meaningful test coverage of the implementation.  After all, coverage.py 
only knows that a line ran or didn't.

The problem of platform- or environment-specific code requiring multiple 
branches which can never always all run is an extra challenge but I 
think a widely applicable solution is to not do that.  To add to your 
comments below, if there is platform- or environment-specific code then 
parameterize it on the environment and write tests for all of the cases.
>
>As the author I looked at coverage periodically and it looked sort of 
>like what I expected.  Since I was testing multiple installed-library 
>configurations I had used "coverage combine" which misleadingly told me 
>that it was all covered (although this particular code should have been 
>tested independently without requiring a combined run).  And I'm sure 
>the reviewer thought about it a little bit, but even if they'd looked 
>at a coverage report, it might have looked like it was OK to skip these 
>particular lines.  And I was in fact doing test-driven development; I 
>didn't add the warning code there until I was looking at a failing test 
>because one of the buildbots didn't have one of my expected 
>dependencies installed, and I made my tests pass locally by having an 
>environment without those dependencies installed locally either.
>
>Yes, I understand how this isn't really 100% TDD, and that a failure on 
>a buildbot should have resulted in me writing a new test; mistakes were 
>made etc.  But all TDD necessarily involves the occasional 
>error/error/pass where there really ought to have been a pass/fail/pass 
>- if we understood what was going on with all of our code all the time 
>we probably wouldn't need tests in the first place :-).  It's a bit 
>disingenuous to say that I need to "learn to do test-driven 
>development" to avoid mistakes like this, though.
>
>On the other side of the equation, I imagine that a reviewer looking at 
>this, even carefully considering coverage, might see a missed line on 
>some buildbot or in their local run and then thought "oh, of course, 
>but that line will be run if I had/didn't have that library installed". 
>And there are some bits of code which are acceptable to cover in this 
>manner (except they should have direct test coverage from actual tests, 
>rather than just importing the test module, which coverage.py won't 
>show you).  It's a quite subtle point to understand that this 
>particular kind of code should actually be fully covered in all 
>configurations.  Especially because these tests are smack in the middle 
>of a file which will be validly missing coverage in some supported 
>configurations (no pyOpenSSL installed) and surrounded with thickets of 
>conditionals and test skips to optionally import more dependencies than 
>just this one.
>
>We should remain vigilant, but I think that if we want to really reduce 
>errors like this in the future we need to make them easier to spot. 
>Failing that we need to have more specific suggestions.  In this case, 
>I happen to know that I do TDD and that Hawkowl was is aware of the 
>standard on coverage issues (and is at least aware of coverage.py, 
>whether or not it was run as part of this review), so those two 
>suggestions aren't going to help as we're already doing them.  Any time 
>the solution to a problem is "everybody should just try harder" that 
>seems like a bet against human fallibility.
>
>So until someone has a month to spend on an all-singing all-dancing 
>combined ratcheting coverage report for all the builders and a 
>fantastic visualization for its output which highlights every possible 
>coverage issue, here are some specific suggestions which might avoid 
>some parts of this class of error:

I don't think we even have a plan for a tool that will report whether a 
change introduces code that isn't *really* tested (contrast "tested" 
with "executed").

I think this may be an area where we do actually need to rely on people 
doing a good job.  Perhaps to counter balance that we need to eliminate 
more of the other crap involved in the development process?  For 
example, if reviewers never had to spend any time thinking about whether 
the whitespace in a change was correct, they would have that much more 
brain power to apply to assessing the quality of the test suite.
>
>For authors (what I could have done better):
>
>I know I said they're inevitable, but whenever you get an error/pass, 
>always consider where you could make it a clean fail/pass instead.  You 
>(and by "you" I obviously mean "me") think you understand why an error 
>happened but the only way to really demonstrate you understand it well 
>enough to convert it into an assertion that fails with a useful error 
>message.
>Be intensely suspicious of any code that needs to run at import time. 
>I did stuff the warning into a function, which at least doesn't leak 
>local variables, but I probably could have moved this warning somewhere 
>easier to manage, and would have noticed warnings coming out of tests 
>as opposed to just being printed at the beginning.  Declarative like 
>deprecatedModuleAttribute automate some of the magic for making code- 
>level artifacts emit warnings when bound to and used rather than 
>accidents of their initial import, so make use of those. (I'm still 
>thinking about how I could have applied that in this specific case; I 
>probably could have.)
>Configure your development environment to be more aggressive about 
>warnings (at least for now, eventually trial should fix this for you, 
>see <https://twistedmatrix.com/trac/ticket/6348>).  I don't think it 
>would have helped in this particular case because the warning itself is 
>emitted at import time (see point 2) but this sort of mistake crops up 
>unfortunately frequently related to deprecation warnings, which are a 
>bit more common, and could often be caught by a better setup.  I 
>recently changed my PYTHONWARNINGS environment variable to 
>'all::DeprecationWarning,all::UserWarning', and that seems to catch 
>most things.  (Unfortunately setting it to simply 'all' produces too 
>much noise from the stdlib and dependencies so it's better to be 
>slightly more restrictive.)
>
>For reviewers (what hawkowl could have done better):
>
>Run coverage.  Particularly, run coverage just on the relevant and 
>changed test modules, and make sure the system under test gets run 
>directly and just accidentally executed by running the code.
>I know I've been reminding reviewers lately to give clear feedback 
>about what elements of reviews are suggestions and which are required 
>fixes for violations of policy, and that may produce the subjective 
>impression that I've been asking for faster or less careful reviews. 
>If so, I should correct that impression: I would like there to be less 
>bike shedding, but it's still pretty important that the ?10 million 
>reactor actually work.  Any lack of test coverage is at least a 
>potential policy violation.  Even if you think you understand why it's 
>missing, even if it looks like a platform variance that doesn't make 
>sense to test on the machine you're running, always ask the author to 
>explain or justify why coverage isn't there, if it could be added to a 
>cross-platform test with a reasonable (or, in many cases, even an 
>existing) fake; if there's no relevant fake and it would be too much 
>work, maybe we need to file a ticket for implementing some test 
>support.
>Especially if you're dealing with a new feature or a significant 
>behavior change, always try to actually run and interact with the code 
>and look at its output.  In this case, noticing the whitespace / 
>formatting errors in the warning messages might have lead us to spot 
>the coverage error earlier.  (Jean-Paul made some comments to me when 
>he noticed it, but it was an off-the-cuff thing after the branch had 
>already been landed and not part of a code review; context is important 
>here, as evidenced by the fact that it took him some time to realize 
>that it was indicative of a test coverage issue!

Thanks!  These are great suggestions.  Can we record them in a way that 
lets all Twisted contributors learn from this case (instead of only the 
people reading this thread) - but without adding to the already 
unreasonably large quantity of text new contributors are ostensibly 
already responsible for reading?

How's the unified Contributing-to-Twisted documentation effort coming?

Jean-Paul


From glyph at twistedmatrix.com  Sat May  3 13:49:15 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 3 May 2014 12:49:15 -0700
Subject: [Twisted-Python]
 =?iso-8859-1?q?Some_comments_regarding_=235190_-?=
 =?iso-8859-1?q?_=60=60RFC_6125_=28=22Service_Identity=22=29_implementatio?=
 =?iso-8859-1?q?n=B4=B4?=
In-Reply-To: <20140503122041.6354.1241503771.divmod.xquotient.163@top>
References: <20140430122130.6354.1569482577.divmod.xquotient.52@top>
 <C9EA14EB-C6A7-48DD-924A-5662E82BD119@twistedmatrix.com>
 <20140503122041.6354.1241503771.divmod.xquotient.163@top>
Message-ID: <08612AA3-93F1-4ACA-A4F4-CCE1F5BF1CD2@twistedmatrix.com>


On May 3, 2014, at 5:20 AM, exarkun at twistedmatrix.com wrote:

> On 1 May, 07:23 pm, glyph at twistedmatrix.com wrote:
>> 
>> On Apr 30, 2014, at 5:21 AM, exarkun at twistedmatrix.com wrote:
>>> I've just noticed that the changeset for #5190 included some untested code.  Specifically, there are no tests for the code which detects missing dependencies and emits warnings about them.
>> 
>> My bad.  Well, technically hawkowl's bad; hawkowl is a committer and did the review and therefore has all the criminal liability in this case, but as the author who wrote the code I bear some responsibility, at least in some abstract, hypothetical sense ;-).
> 
> My hope is that by drawing attention to examples of this kind of mistake will help us avoid making the mistake in the future.  Considering what my email prompted you to write, I think it may work. :)

Mission accomplished, I guess :-).  Please continue doing so.  I wish that every commit to trunk would prompt a thread on this list, really.  Despite the epically ridiculous amount of email I get, this list is still a bit too low-traffic for my taste.

>> Thanks for working on the fix; it looks like the relevant ticket is <https://twistedmatrix.com/trac/ticket/7097>.  I'll try to review that as soon as it's ready; let me know.
> 
> No problem.  I probably should have started my previous email with thanks to you and hawkowl for working on that feature.  It is *really* good to have service identity checking support in Twisted.

Thanks for saying so.

>> The problem with code like this is that, in some configurations, it is in fact reported as covered by coverage.py.  It requires manual examination to get the intersection of a diff and a coverage report, and even when you do, we still have too many places where it's "okay" to skip coverage.
> 
> This is true - but I'm not sure the code in this case is particularly special.  It's nearly always possible to write code and tests such that coverage.py says your code is covered but without actually having any meaningful test coverage of the implementation.  After all, coverage.py only knows that a line ran or didn't.
> 
> The problem of platform- or environment-specific code requiring multiple branches which can never always all run is an extra challenge but I think a widely applicable solution is to not do that.  To add to your comments below, if there is platform- or environment-specific code then parameterize it on the environment and write tests for all of the cases.

I think what really makes this an extra challenge is that we (well, all Python programmers, really) have a smattering of different idioms for cases like this and we don't have a succinct way of expressing the optional dependency both in the import, the implementation, and the tests.

>> So until someone has a month to spend on an all-singing all-dancing combined ratcheting coverage report for all the builders and a fantastic visualization for its output which highlights every possible coverage issue, here are some specific suggestions which might avoid some parts of this class of error:
> 
> I don't think we even have a plan for a tool that will report whether a change introduces code that isn't *really* tested (contrast "tested" with "executed").

Indeed not.  So we need some ideas in the meanwhile :-).

> I think this may be an area where we do actually need to rely on people doing a good job. Perhaps to counter balance that we need to eliminate more of the other crap involved in the development process?  For example, if reviewers never had to spend any time thinking about whether the whitespace in a change was correct, they would have that much more brain power to apply to assessing the quality of the test suite.

Speaking of thanking people for things, we should also thank richard wall, david reid, you, and hawkowl for maintenance of twistedchecker.  It's a lot better than it was :).

> Thanks!  These are great suggestions.  Can we record them in a way that lets all Twisted contributors learn from this case (instead of only the people reading this thread) - but without adding to the already unreasonably large quantity of text new contributors are ostensibly already responsible for reading?

Those sound like diametrically opposed ideas :-).

> How's the unified Contributing-to-Twisted documentation effort coming?

Yeah, how is that coming?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140503/f3abe6a0/attachment.html>

From trac at twistedmatrix.com  Sun May  4 00:05:16 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 04 May 2014 06:05:16 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1399183516.04.9051349321822873887@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140504/673aa15e/attachment.html>

From juanito1982 at gmail.com  Sun May  4 02:31:58 2014
From: juanito1982 at gmail.com (=?UTF-8?Q?Juan_Antonio_Iba=C3=B1ez_Santorum?=)
Date: Sun, 4 May 2014 10:31:58 +0200
Subject: [Twisted-Python] Log level using Twistd
In-Reply-To: <20140430115523.6354.1752102256.divmod.xquotient.43@top>
References: <CAHLYDCuJevGZu=yTZhfjYU8SjVcxasqLkk7w2TrtUt9B9QwxJw@mail.gmail.com>
 <20140430115523.6354.1752102256.divmod.xquotient.43@top>
Message-ID: <CAHLYDCsipuu3CHy+CWh8d-pM7dOz2dqt03Qx8NwNujoq2PTEXg@mail.gmail.com>

Thank you Jean-Paul

It works ok using the PythonLoggingObserver

Regards


2014-04-30 13:55 GMT+02:00 <exarkun at twistedmatrix.com>:

> On 08:57 am, juanito1982 at gmail.com wrote:
>
>> Hello,
>>
>>  I am trying to modify loglevel withou result. I configure my app logging
>> inside the tac file as:
>>
>
> You omitted the imports necessary to interpret the example code with
> certainty but I'll make some guesses.  Next time post a complete, self-
> contained example.
>
> This line:
>
>
>> logging.basicConfig(level=logging.ERROR, format="%(asctime)s ---
>> %(name)s -
>> %(levelname)s - %(message)s")
>>
>
> configures the standard library logging module.
>
> This line:
>
>
>> logfile = DailyLogFile("gdumper.log", "/var/log")
>>
>
> creates a log writer from the Twisted logging system that will write to a
> file.
>
> And this line:
>
>>
>> application.setComponent(ILogObserver, FileLogObserver(logfile).emit)
>>
>
> makes `twistd` configure Twisted's logging system with a log observer that
> will use that log writer to record log events.
>
> Twisted's logging system and the standard library logging system are
> separate things, though.  Configuring the standard library logging system
> will not make any difference to Twisted's logging system.
>
> If you want log messages emitted by `log.msg` and `log.err` to traverse
> the standard library logging system then the minimum you need to do is use
> `twisted.python.log.PythonLoggingObserver` instead of `FileLogObserver`.
>
> `PythonLoggingObserver` observes log events in the Twisted logging system
> and sends them to the standard library logging system.
>
> Once you do that you may be able to configure the standard library logging
> system to behave as you desire.
>
> Jean-Paul
>
>  logging.basicConfig call seems do not apply as I get both log.msg and
>> log.err messages into the log. Is there any other way to set up log level?
>>
>> Regards
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140504/2a7cf868/attachment-0001.html>

From glyph at twistedmatrix.com  Sun May  4 20:17:28 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 4 May 2014 19:17:28 -0700
Subject: [Twisted-Python] overly specific ImportError assert for python 3?
Message-ID: <8ECA522C-7E90-4CD5-B37A-BAFB3AD3AAB1@twistedmatrix.com>

cyli was working on <https://twistedmatrix.com/trac/ticket/7144> and encountered this peculiar failure on her branch (and not on trunk): <https://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212/steps/shell/logs/stdio>.

The interesting bit of the failure is that in one case, the ImportError's message is "import of 'service_identity' halted; None in sys.modules" and on trunk it's apparently 'No module named service_identity'.

The branch in question changes conch, which isn't even tested on python 3.

So... anyone have an idea what's going on?

-g

From tom.prince at ualberta.net  Mon May  5 02:07:30 2014
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 05 May 2014 02:07:30 -0600
Subject: [Twisted-Python] Distributing apilinks.py
In-Reply-To: <CAFycZ9emvGU+E9dt6ZHv=gvCW29fstPvH5m_85qDt_EbPObDBg@mail.gmail.com>
References: <CAFycZ9emvGU+E9dt6ZHv=gvCW29fstPvH5m_85qDt_EbPObDBg@mail.gmail.com>
Message-ID: <874n147inx.fsf@hermes.hocat.ca>

Eventually, apilinks should just go away. I think I have convinced
Michael (pydoctor's maintainer) that pydoctor should just genereate an
objects.inv that sphinx can read. Then the regular :py:*: annoations can
be used, rather than the apilinks ones (which interpert <> backwards
anyway).

That doesn't address the issue of what to do in the mean time. Looking
at the code, it looks very similar to what the builtin extlinks
extension does; except that apilinks wants `path.to.object <title> and
extlinks wants `title <path.to.object>`. (But I guess this doesn't
address the issue of # in the links being put in the wrong place. But,
https://twistedmatrix.com/documents/current/api/twisted.web.iweb.IRequest.getSession.html
does exists (probably to make this kind of linking work.

  Tom


From adi at roiban.ro  Mon May  5 02:23:09 2014
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 5 May 2014 11:23:09 +0300
Subject: [Twisted-Python] Distributing apilinks.py
In-Reply-To: <874n147inx.fsf@hermes.hocat.ca>
References: <CAFycZ9emvGU+E9dt6ZHv=gvCW29fstPvH5m_85qDt_EbPObDBg@mail.gmail.com>
 <874n147inx.fsf@hermes.hocat.ca>
Message-ID: <CAFycZ9ePiKu9BduSHytbuYbjPr7QUeKC0U0G1u5ghWVqAFORhA@mail.gmail.com>

Hi Tom,

Many, many thanks for pushing this forward!

IRequest.getSession.html and extlinks is a workaround, but I hope that
we can fix the source problem soon so that we don't have to stick with
the workaround for to long.

Is there a ticket in pydoctor for the generation of objects.inv ?

Michael, are you convinced that it would be nice for pydoctor to
generate objects.inv ?

I think that implementing this feature could help other project using
only sphinx for both narrative and api documentation.
I can try to send a patch for that.

Thanks!



On 5 May 2014 11:07, Tom Prince <tom.prince at ualberta.net> wrote:
> Eventually, apilinks should just go away. I think I have convinced
> Michael (pydoctor's maintainer) that pydoctor should just genereate an
> objects.inv that sphinx can read. Then the regular :py:*: annoations can
> be used, rather than the apilinks ones (which interpert <> backwards
> anyway).
>
> That doesn't address the issue of what to do in the mean time. Looking
> at the code, it looks very similar to what the builtin extlinks
> extension does; except that apilinks wants `path.to.object <title> and
> extlinks wants `title <path.to.object>`. (But I guess this doesn't
> address the issue of # in the links being put in the wrong place. But,
> https://twistedmatrix.com/documents/current/api/twisted.web.iweb.IRequest.getSession.html
> does exists (probably to make this kind of linking work.
>
>   Tom



-- 
Adi Roiban


From techtonik at gmail.com  Mon May  5 03:43:09 2014
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 5 May 2014 12:43:09 +0300
Subject: [Twisted-Python] Serial interface for software program
Message-ID: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>

Hello, network hackers,

Recently I've got a Raspberry Pi and a friend showed me its serial
interface and helped to setup it. I was stunned. What I saw - you open
serial terminal, and you jump in into the middle of boot section. Just
open a terminal and you see what's going on inside of R.Pi. Any time.
That's was an intro. =)

For a long time I wanted the same interface for debugging software
programs. When I was hacking on Spyder I found that my human brain is
too limited to squeeze details of dynamic of interaction of objects at
run-time. Spyder is written in Python with Qt, and it is a parallel
application much like any Twisted app is. But I wanted to push the
progress, I have to deal with complexity, so I badly needed to be able
to draw a video of interaction at run-time. That was the problem I
tried to solve.

And for the first step I needed a way to connect to Spyder at run-time
and see what's going on. I didn't know how to call that way before,
but now I have a rather accurate wording - "a serial interface for an
application". That is the background for the question I am trying to
ask.

What is the best way to implement such interface considering the
following properties:
1. it needs to be simple (so that you can quickly create python script
that reads the info)
2. it needs to be universal (so that script for one app worked for other)
3. it should be asynchronous (connected terminal should not degrade performance)
4. it needs to be reliable (at least detecting missing packets)
5. and cross-platform (and pure python)

Why Twisted? For the first I think that this problem is actual for
people who are dealing with complexity of dynamic and interconnected
systems built with the help of Twisted. For the second I believe it
can only be solved or analyzed by people skilled in interprocess and
internetwork communications.

One button test:
1. program behaves weird
2. user hits the button
3. terminal pops up
4. shows a lot of data for a running program

I am interested to know.
1. how the button should discover the program
network port seems cool, but what about two parallel programs? what
about different programs that provide this interface?

2. how terminal receives the data
i see it as line based - one line - one event, everything is text

3. how to make it fast
TCP clearly won't here

4. how to send the data
what if two threads (or parallel code) produce serial data? who should
run the server that serves connected terminals, and how other thread
will send message to this server? you can not run two TCP servers on
the same port on the app side, so is there an alternative? how to
detect missing data in a stream? how to avoid dealing with incomplete
packets and low level network details?

Thanks. I'd like to get back to hacking on Spyder one day, but this is
a stumbling block for me every time I think about it or any program of
compared complexity.
-- 
anatoly t.


From exarkun at twistedmatrix.com  Mon May  5 05:43:36 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 05 May 2014 11:43:36 -0000
Subject: [Twisted-Python] overly specific ImportError assert for python
	3?
In-Reply-To: <8ECA522C-7E90-4CD5-B37A-BAFB3AD3AAB1@twistedmatrix.com>
References: <8ECA522C-7E90-4CD5-B37A-BAFB3AD3AAB1@twistedmatrix.com>
Message-ID: <20140505114336.6354.1234946521.divmod.xquotient.173@top>

On 02:17 am, glyph at twistedmatrix.com wrote:
>cyli was working on <https://twistedmatrix.com/trac/ticket/7144> and 
>encountered this peculiar failure on her branch (and not on trunk): 
><https://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212/steps/shell/logs/stdio>.
>
>The interesting bit of the failure is that in one case, the 
>ImportError's message is "import of 'service_identity' halted; None in 
>sys.modules" and on trunk it's apparently 'No module named 
>service_identity'.
>
>The branch in question changes conch, which isn't even tested on python 
>3.
>
>So... anyone have an idea what's going on?

Here's the "versions" report from a build on that builder which recently 
succeeded:

http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2210/steps 
/report-module-versions/logs/versions

And here's the "versions" report from a build of that branch on that 
builder:

http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212/steps 
/report-module-versions/logs/versions

Notice that the state of a somewhat relevant dependency is different 
between the two builds.  Backing up, look at which build slave did each 
of those builds:

http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2210
http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212

So I suppose the test only passes by accident on trunk because it 
happened to be run on one slave with one configuration rather than the 
other slave with the other configuration...

Considering we seem to have no mechanism whatsoever for ensuring the 
configuration of two different slaves for a particular builder is the 
same, I wonder if we should reconsider using multiple slaves for 
individual builders.

Jean-Paul


From _ at lvh.io  Mon May  5 09:42:38 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 5 May 2014 10:42:38 -0500
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
Message-ID: <CAE_Hg6ajBqwicKxGm1g_6cO5WA6gppvMFVtDXWF2uVOnmV9g8Q@mail.gmail.com>

Hi Anatoly,


Do you know about manhole? I made a video that also demos axiom, but it
should show you what manhole does :)

https://www.youtube.com/watch?v=3-UZiO-AnLc

Essentially it's "repl in a running process".


hth
lvh


On Mon, May 5, 2014 at 4:43 AM, anatoly techtonik <techtonik at gmail.com>wrote:

> Hello, network hackers,
>
> Recently I've got a Raspberry Pi and a friend showed me its serial
> interface and helped to setup it. I was stunned. What I saw - you open
> serial terminal, and you jump in into the middle of boot section. Just
> open a terminal and you see what's going on inside of R.Pi. Any time.
> That's was an intro. =)
>
> For a long time I wanted the same interface for debugging software
> programs. When I was hacking on Spyder I found that my human brain is
> too limited to squeeze details of dynamic of interaction of objects at
> run-time. Spyder is written in Python with Qt, and it is a parallel
> application much like any Twisted app is. But I wanted to push the
> progress, I have to deal with complexity, so I badly needed to be able
> to draw a video of interaction at run-time. That was the problem I
> tried to solve.
>
> And for the first step I needed a way to connect to Spyder at run-time
> and see what's going on. I didn't know how to call that way before,
> but now I have a rather accurate wording - "a serial interface for an
> application". That is the background for the question I am trying to
> ask.
>
> What is the best way to implement such interface considering the
> following properties:
> 1. it needs to be simple (so that you can quickly create python script
> that reads the info)
> 2. it needs to be universal (so that script for one app worked for other)
> 3. it should be asynchronous (connected terminal should not degrade
> performance)
> 4. it needs to be reliable (at least detecting missing packets)
> 5. and cross-platform (and pure python)
>
> Why Twisted? For the first I think that this problem is actual for
> people who are dealing with complexity of dynamic and interconnected
> systems built with the help of Twisted. For the second I believe it
> can only be solved or analyzed by people skilled in interprocess and
> internetwork communications.
>
> One button test:
> 1. program behaves weird
> 2. user hits the button
> 3. terminal pops up
> 4. shows a lot of data for a running program
>
> I am interested to know.
> 1. how the button should discover the program
> network port seems cool, but what about two parallel programs? what
> about different programs that provide this interface?
>
> 2. how terminal receives the data
> i see it as line based - one line - one event, everything is text
>
> 3. how to make it fast
> TCP clearly won't here
>
> 4. how to send the data
> what if two threads (or parallel code) produce serial data? who should
> run the server that serves connected terminals, and how other thread
> will send message to this server? you can not run two TCP servers on
> the same port on the app side, so is there an alternative? how to
> detect missing data in a stream? how to avoid dealing with incomplete
> packets and low level network details?
>
> Thanks. I'd like to get back to hacking on Spyder one day, but this is
> a stumbling block for me every time I think about it or any program of
> compared complexity.
> --
> anatoly t.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140505/79fd3356/attachment.html>

From itamar at itamarst.org  Mon May  5 11:24:17 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 05 May 2014 13:24:17 -0400
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
Message-ID: <5367C941.7020007@itamarst.org>

If Spyder *just* uses Qt, it's a single-threaded event loop. There's a 
3rd party event loop for Twisted that runs on top of Qt (qt4reactor), 
which would allow Twisted and Qt code to run in the same thread.

-Itamar


From glyph at twistedmatrix.com  Mon May  5 12:46:28 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 5 May 2014 11:46:28 -0700
Subject: [Twisted-Python] overly specific ImportError assert for python
	3?
In-Reply-To: <20140505114336.6354.1234946521.divmod.xquotient.173@top>
References: <8ECA522C-7E90-4CD5-B37A-BAFB3AD3AAB1@twistedmatrix.com>
 <20140505114336.6354.1234946521.divmod.xquotient.173@top>
Message-ID: <2E13B7A5-E61E-4C1A-B0F2-996E4F21D082@twistedmatrix.com>


On May 5, 2014, at 4:43 AM, exarkun at twistedmatrix.com wrote:

> On 02:17 am, glyph at twistedmatrix.com wrote:
>> cyli was working on <https://twistedmatrix.com/trac/ticket/7144> and encountered this peculiar failure on her branch (and not on trunk): <https://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212/steps/shell/logs/stdio>.
>> 
>> The interesting bit of the failure is that in one case, the ImportError's message is "import of 'service_identity' halted; None in sys.modules" and on trunk it's apparently 'No module named service_identity'.
>> 
>> The branch in question changes conch, which isn't even tested on python 3.
>> 
>> So... anyone have an idea what's going on?
> 
> Here's the "versions" report from a build on that builder which recently succeeded:
> 
> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2210/steps /report-module-versions/logs/versions
> 
> And here's the "versions" report from a build of that branch on that builder:
> 
> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212/steps /report-module-versions/logs/versions
> 
> Notice that the state of a somewhat relevant dependency is different between the two builds.  Backing up, look at which build slave did each of those builds:
> 
> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2210
> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212
> 
> So I suppose the test only passes by accident on trunk because it happened to be run on one slave with one configuration rather than the other slave with the other configuration...
> 
> Considering we seem to have no mechanism whatsoever for ensuring the configuration of two different slaves for a particular builder is the same, I wonder if we should reconsider using multiple slaves for individual builders.

Actually, one of the areas I was hoping that we could focus on for 14.1 would be to upgrade our packaging infrastructure and have our builders acquire dependencies automatically via 'pip install' or similar.

See for example <https://twistedmatrix.com/trac/ticket/3696>.

It's interesting to me that I've had issues with the divergent dependencies on this exact builder twice, and both times re-building trunk multiple times has happened to always hit the "good" builder, making it look like the branch is somehow at fault.  What's up with that?  Just luck of the draw

-glyph



From glyph at twistedmatrix.com  Mon May  5 12:48:15 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 5 May 2014 11:48:15 -0700
Subject: [Twisted-Python] Distributing apilinks.py
In-Reply-To: <874n147inx.fsf@hermes.hocat.ca>
References: <CAFycZ9emvGU+E9dt6ZHv=gvCW29fstPvH5m_85qDt_EbPObDBg@mail.gmail.com>
 <874n147inx.fsf@hermes.hocat.ca>
Message-ID: <35B861B5-BB3B-41BC-AB2C-3DA2F5946AC1@twistedmatrix.com>

On May 5, 2014, at 1:07 AM, Tom Prince <tom.prince at ualberta.net> wrote:

> Eventually, apilinks should just go away. I think I have convinced
> Michael (pydoctor's maintainer) that pydoctor should just genereate an
> objects.inv that sphinx can read. Then the regular :py:*: annoations can
> be used, rather than the apilinks ones

This would be very nice.  Did you file an actual bug on pydoctor or is this a conversation which will be momentarily forgotten? :)

>  (which interpert <> backwards anyway).

Yes, this annoyed me greatly. :-\.

-glyph



From sank.daniel at gmail.com  Mon May  5 12:49:02 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 5 May 2014 11:49:02 -0700
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <5367C941.7020007@itamarst.org>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
 <5367C941.7020007@itamarst.org>
Message-ID: <CAKN9TDJTpJTffc4-rPix8byySe8LoMz0CJg+xutQrTTwrCra4w@mail.gmail.com>

> There's a 3rd party event loop for Twisted that runs on top of Qt
(qt4reactor), which would
> allow Twisted and Qt code to run in the same thread.

Speaking of which, why isn't that thing officially part of twisted? Super
useful.

Daniel



On Mon, May 5, 2014 at 10:24 AM, Itamar Turner-Trauring <itamar at itamarst.org
> wrote:

> If Spyder *just* uses Qt, it's a single-threaded event loop. There's a 3rd
> party event loop for Twisted that runs on top of Qt (qt4reactor), which
> would allow Twisted and Qt code to run in the same thread.
>
> -Itamar
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140505/0a9ca8bb/attachment.html>

From exarkun at twistedmatrix.com  Mon May  5 13:06:00 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 05 May 2014 19:06:00 -0000
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <CAKN9TDJTpJTffc4-rPix8byySe8LoMz0CJg+xutQrTTwrCra4w@mail.gmail.com>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
 <5367C941.7020007@itamarst.org>
 <CAKN9TDJTpJTffc4-rPix8byySe8LoMz0CJg+xutQrTTwrCra4w@mail.gmail.com>
Message-ID: <20140505190600.6354.951754893.divmod.xquotient.184@top>

On 06:49 pm, sank.daniel at gmail.com wrote:
>>There's a 3rd party event loop for Twisted that runs on top of Qt
>(qt4reactor), which would
>>allow Twisted and Qt code to run in the same thread.
>
>Speaking of which, why isn't that thing officially part of twisted? 
>Super
>useful.

The PyQt team insists that the PyQt license is incompatible with 
Twisted's license (this is an intentional simplification, you can read 
more about the issue on PyQt's website if you really care).

Since PySide now exists this is potentially no longer an issue. 
However, the last thing I heard about using PySide to run the Qt reactor 
is that it segfaulted sometimes.

So perhaps the reason is that someone needs to do some work to determine 
if PySide is actually safe to use with the Qt reactor now and, if it is, 
shuffle some code around.

However, I'm not even sure if the GUI reactors *should* be distributed 
as part of the main Twisted package.  They are already first-class 
reactors via the plugin system.  Independent releases let them track 
changes in the GUI library they're each concerned with more quickly than 
they could if they were part of Twisted itself.

Perhaps there are other reasons, like simplicity of packaging or quality 
of continuous integration testing, that would override those issues and 
make it worth bringing Qt reactor back into Twisted.  Sorting that out 
is also a task that requires someone interested to step up an do some 
work, though. :)

Jean-Paul


From dustin at v.igoro.us  Mon May  5 14:22:41 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Mon, 5 May 2014 16:22:41 -0400
Subject: [Twisted-Python] overly specific ImportError assert for python
	3?
In-Reply-To: <2E13B7A5-E61E-4C1A-B0F2-996E4F21D082@twistedmatrix.com>
References: <8ECA522C-7E90-4CD5-B37A-BAFB3AD3AAB1@twistedmatrix.com>
 <20140505114336.6354.1234946521.divmod.xquotient.173@top>
 <2E13B7A5-E61E-4C1A-B0F2-996E4F21D082@twistedmatrix.com>
Message-ID: <CAJtE5vQEgBBGsj44AMfEHbLHT--7aSeNj=brTw1y7BqsMLMs9Q@mail.gmail.com>

Using 'pip freeze' to print versions can help, as can either using
requirements.txt or 'pip install -U' to do the installs.

On Mon, May 5, 2014 at 2:46 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On May 5, 2014, at 4:43 AM, exarkun at twistedmatrix.com wrote:
>
>> On 02:17 am, glyph at twistedmatrix.com wrote:
>>> cyli was working on <https://twistedmatrix.com/trac/ticket/7144> and encountered this peculiar failure on her branch (and not on trunk): <https://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212/steps/shell/logs/stdio>.
>>>
>>> The interesting bit of the failure is that in one case, the ImportError's message is "import of 'service_identity' halted; None in sys.modules" and on trunk it's apparently 'No module named service_identity'.
>>>
>>> The branch in question changes conch, which isn't even tested on python 3.
>>>
>>> So... anyone have an idea what's going on?
>>
>> Here's the "versions" report from a build on that builder which recently succeeded:
>>
>> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2210/steps /report-module-versions/logs/versions
>>
>> And here's the "versions" report from a build of that branch on that builder:
>>
>> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212/steps /report-module-versions/logs/versions
>>
>> Notice that the state of a somewhat relevant dependency is different between the two builds.  Backing up, look at which build slave did each of those builds:
>>
>> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2210
>> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212
>>
>> So I suppose the test only passes by accident on trunk because it happened to be run on one slave with one configuration rather than the other slave with the other configuration...
>>
>> Considering we seem to have no mechanism whatsoever for ensuring the configuration of two different slaves for a particular builder is the same, I wonder if we should reconsider using multiple slaves for individual builders.
>
> Actually, one of the areas I was hoping that we could focus on for 14.1 would be to upgrade our packaging infrastructure and have our builders acquire dependencies automatically via 'pip install' or similar.
>
> See for example <https://twistedmatrix.com/trac/ticket/3696>.
>
> It's interesting to me that I've had issues with the divergent dependencies on this exact builder twice, and both times re-building trunk multiple times has happened to always hit the "good" builder, making it look like the branch is somehow at fault.  What's up with that?  Just luck of the draw
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From itamar at itamarst.org  Mon May  5 19:02:04 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 05 May 2014 21:02:04 -0400
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <20140505190600.6354.951754893.divmod.xquotient.184@top>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
 <5367C941.7020007@itamarst.org>
 <CAKN9TDJTpJTffc4-rPix8byySe8LoMz0CJg+xutQrTTwrCra4w@mail.gmail.com>
 <20140505190600.6354.951754893.divmod.xquotient.184@top>
Message-ID: <5368348C.6070401@itamarst.org>

On 05/05/2014 03:06 PM, exarkun at twistedmatrix.com wrote:
>
> However, I'm not even sure if the GUI reactors *should* be distributed 
> as part of the main Twisted package.  They are already first-class 
> reactors via the plugin system.  Independent releases let them track 
> changes in the GUI library they're each concerned with more quickly 
> than they could if they were part of Twisted itself.

Someone remind me to file a "ReactorBuilder doesn't support external 
reactors" ticket tomorrow...


From dstainton415 at gmail.com  Mon May  5 19:52:21 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Tue, 6 May 2014 01:52:21 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
 <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
 <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>
Message-ID: <CAFN1edrLu1wf7cfDHdmg0MJ0OdvWKUYX3LY-dE3VpZ2Ysrr8WQ@mail.gmail.com>

OK... I decided that txtorcon's endpoint constructor should only take
string arguments besides the reactor arg...
because serverFromString passes only str args to the endpoint constructor.

I wrote the endpoint parser to be as simple as possible.
The endpoint's `listen` method now handles the tor configuration and
launch logic... and returns a deferred which will
fire with an IListenPort.

The pip method definitely works... my code works but prints traceback
with this error:
"Unexpected error while writing cache file"
Do you as well?

Here's my endpoint parser plugin:
https://github.com/david415/txtorcon/blob/endpoint_parser_plugin-rewrite3/twisted/plugins/txtorcon_endpoint_parser.py

Here's how I install it:
cd ~/projects/virtualenv-1.11.5
./virtualenv.py ~/virtenv-txtorcon
. ~/virtenv-txtorcon/bin/activate
usewithtor pip install twisted
cd ~/projects
git clone https://github.com/david415/txtorcon.git
cd txtorcon
git checkout endpoint_parser_plugin-rewrite3
python setup.py install


Running the example code:
cd examples
python launch_tor_endpoint.py
Unexpected error while writing cache file
Traceback (most recent call last):
  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/internet/endpoints.py",
line 1465, in serverFromString
    return _serverFromStringLegacy(reactor, description, _NO_DEFAULT)
  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/internet/endpoints.py",
line 1393, in _serverFromStringLegacy
    nameOrPlugin, args, kw = _parseServer(description, None, default)
  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/internet/endpoints.py",
line 1380, in _parseServer
    for plugin in getPlugins(IStreamServerEndpointStringParser):
  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/plugin.py",
line 209, in getPlugins
    allDropins = getCache(package)
--- <exception caught here> ---
  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/plugin.py",
line 181, in getCache
    dropinPath.setContent(pickle.dumps(dropinDotCache))
exceptions.AttributeError: 'ZipPath' object has no attribute 'setContent'
I have set up a hidden service, advertised at: <<class
'twisted.internet.tcp.Port'> of twisted.web.server.Site on 55141>
http://mqrcnytlnh4xynmh.onion:80
locally listening on IPv4Address(TCP, '127.0.0.1', 55141)

and txtorcon's setup.py output:
python setup.py install
WARNING: not using PyPi over SSH!
running install
running bdist_egg
running egg_info
writing requirements to txtorcon.egg-info/requires.txt
writing txtorcon.egg-info/PKG-INFO
writing top-level names to txtorcon.egg-info/top_level.txt
writing dependency_links to txtorcon.egg-info/dependency_links.txt
package init file 'twisted/plugins/__init__.py' not found (or not a
regular file)
reading manifest file 'txtorcon.egg-info/SOURCES.txt'
reading manifest template 'MANIFEST.in'
warning: no files found matching 'scripts/*.py'
warning: no previously-included files found matching 'docs/_static/*~'
warning: no previously-included files found matching 'examples/*~'
writing manifest file 'txtorcon.egg-info/SOURCES.txt'
installing library code to build/bdist.linux-x86_64/egg
running install_lib
running build_py
creating build/bdist.linux-x86_64/egg
creating build/bdist.linux-x86_64/egg/twisted
creating build/bdist.linux-x86_64/egg/twisted/plugins
copying build/lib.linux-x86_64-2.7/twisted/plugins/txtorcon_endpoint_parser.py
-> build/bdist.linux-x86_64/egg/twisted/plugins
creating build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/stream.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/log.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/torconfig.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/router.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/torcontrolprotocol.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/circuit.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/addrmap.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/interface.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/spaghetti.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/torstate.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/torinfo.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/__init__.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/util.py ->
build/bdist.linux-x86_64/egg/txtorcon
byte-compiling build/bdist.linux-x86_64/egg/twisted/plugins/txtorcon_endpoint_parser.py
to txtorcon_endpoint_parser.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/stream.py to stream.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/log.py to log.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/torconfig.py to
torconfig.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/router.py to router.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/torcontrolprotocol.py
to torcontrolprotocol.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/circuit.py to circuit.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/addrmap.py to addrmap.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/interface.py to
interface.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/spaghetti.py to
spaghetti.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/torstate.py to torstate.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/torinfo.py to torinfo.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/__init__.py to __init__.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/util.py to util.pyc
installing package data to build/bdist.linux-x86_64/egg
running install_data
creating build/bdist.linux-x86_64/egg/share
creating build/bdist.linux-x86_64/egg/share/txtorcon
copying INSTALL -> build/bdist.linux-x86_64/egg/share/txtorcon
copying README.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying TODO -> build/bdist.linux-x86_64/egg/share/txtorcon
copying meejah.asc -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/apilinks_sphinxext.py ->
build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/conf.py -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/Makefile -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/txtorcon-interface.rst ->
build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/txtorcon-launching.rst ->
build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/txtorcon-state.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/txtorcon.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/txtorcon-util.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/examples.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/releases.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/walkthrough.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/introduction.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/txtorcon-config.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/index.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/txtorcon-protocol.rst ->
build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/_static/logo.png -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/_static/haiku.css -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/_static/avatar.png -> build/bdist.linux-x86_64/egg/share/txtorcon
creating build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/monitor.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/launch_tor.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/webui_server.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/stream_circuit_logger.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/launch_tor_with_simplehttpd.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/launch_tor_endpoint.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/circuit_for_next_stream.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/dump_config.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/schedule_bandwidth.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/disallow_streams_by_port.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/attach_streams_by_country.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/launch_tor_with_hiddenservice.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/circuit_failure_rates.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/tor_info.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
creating build/bdist.linux-x86_64/egg/EGG-INFO
copying txtorcon.egg-info/PKG-INFO -> build/bdist.linux-x86_64/egg/EGG-INFO
copying txtorcon.egg-info/SOURCES.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
copying txtorcon.egg-info/dependency_links.txt ->
build/bdist.linux-x86_64/egg/EGG-INFO
copying txtorcon.egg-info/requires.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
copying txtorcon.egg-info/top_level.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
zip_safe flag not set; analyzing archive contents...
creating 'dist/txtorcon-0.9.2-py2.7.egg' and adding
'build/bdist.linux-x86_64/egg' to it
removing 'build/bdist.linux-x86_64/egg' (and everything under it)
Processing txtorcon-0.9.2-py2.7.egg
Copying txtorcon-0.9.2-py2.7.egg to
/home/human/virtenv-txtorcon/lib/python2.7/site-packages
Adding txtorcon 0.9.2 to easy-install.pth file

Installed /home/human/virtenv-txtorcon/lib/python2.7/site-packages/txtorcon-0.9.2-py2.7.egg
Processing dependencies for txtorcon==0.9.2
Searching for zope.interface==4.1.1
Best match: zope.interface 4.1.1
Adding zope.interface 4.1.1 to easy-install.pth file

Using /home/human/virtenv-txtorcon/lib/python2.7/site-packages
Searching for Twisted==13.2.0
Best match: Twisted 13.2.0
Adding Twisted 13.2.0 to easy-install.pth file

Using /home/human/virtenv-txtorcon/lib/python2.7/site-packages
Searching for setuptools==3.4.4
Best match: setuptools 3.4.4
Adding setuptools 3.4.4 to easy-install.pth file
Installing easy_install-3.4 script to /home/human/virtenv-txtorcon/bin
Installing easy_install script to /home/human/virtenv-txtorcon/bin

Using /home/human/virtenv-txtorcon/lib/python2.7/site-packages
Finished processing dependencies for txtorcon==0.9.2


> This stack overflow question still hasn't gotten a great answer:
> <https://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py-for-a-twistd-twisted-plugin-that-works-with-setuptools>
> If you figure something out, please post it there.
>
> However, assuming a post-deluvian version of pip, this simple setup appears
> to work OK for me:
> <https://github.com/glyph/txsni/blob/master/setup.py#L16>
> and I haven't found a setup that breaks it yet.
>
> -glyph
>
>
>


From glyph at twistedmatrix.com  Mon May  5 21:00:11 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 5 May 2014 20:00:11 -0700
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <5368348C.6070401@itamarst.org>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
 <5367C941.7020007@itamarst.org>
 <CAKN9TDJTpJTffc4-rPix8byySe8LoMz0CJg+xutQrTTwrCra4w@mail.gmail.com>
 <20140505190600.6354.951754893.divmod.xquotient.184@top>
 <5368348C.6070401@itamarst.org>
Message-ID: <F8D7BA09-40EC-4FF6-AAF3-F9992BC69DEF@twistedmatrix.com>


On May 5, 2014, at 6:02 PM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

> On 05/05/2014 03:06 PM, exarkun at twistedmatrix.com wrote:
>> 
>> However, I'm not even sure if the GUI reactors *should* be distributed as part of the main Twisted package.  They are already first-class reactors via the plugin system.  Independent releases let them track changes in the GUI library they're each concerned with more quickly than they could if they were part of Twisted itself.
> 
> Someone remind me to file a "ReactorBuilder doesn't support external reactors" ticket tomorrow...

File a "ReactorBuilder doesn't support external reactors" ticket tomorrow.

-glyph

From glyph at twistedmatrix.com  Mon May  5 23:31:31 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 5 May 2014 22:31:31 -0700
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <CAFN1edrLu1wf7cfDHdmg0MJ0OdvWKUYX3LY-dE3VpZ2Ysrr8WQ@mail.gmail.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
 <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
 <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>
 <CAFN1edrLu1wf7cfDHdmg0MJ0OdvWKUYX3LY-dE3VpZ2Ysrr8WQ@mail.gmail.com>
Message-ID: <B9DA601A-E4DA-45E4-979A-94C6AE618332@twistedmatrix.com>


On May 5, 2014, at 6:52 PM, David Stainton <dstainton415 at gmail.com> wrote:

> OK... I decided that txtorcon's endpoint constructor should only take
> string arguments besides the reactor arg...
> because serverFromString passes only str args to the endpoint constructor.

I strongly suggest that this is wrong.

The endpoint constructor should do _construction_.  The endpoint parser should do _parsing_.  The task of parsing is of taking strings and producing meaningful values.

You may want to have the endpoint parser actually live in a separate method in txtorcon rather than putting it into the plugin itself, and leave the plugin simply the task of plugging in, but the parsing method should not be called __init__.

(Also, don't use asserts.  This is probably indicative of a weakness in the parsing API we've provided, but you should likely raise something like UsageError.)

> I wrote the endpoint parser to be as simple as possible.
> The endpoint's `listen` method now handles the tor configuration and
> launch logic... and returns a deferred which will
> fire with an IListenPort.

Great.

> The pip method definitely works... my code works but prints traceback
> with this error:
> "Unexpected error while writing cache file"
> Do you as well?
> 

What exactly is 'usewithtor'?

> usewithtor pip install twisted



> Running the example code:
> cd examples
> python launch_tor_endpoint.py
> Unexpected error while writing cache file
> Traceback (most recent call last):
>  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/internet/endpoints.py",
> line 1465, in serverFromString
>    return _serverFromStringLegacy(reactor, description, _NO_DEFAULT)
>  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/internet/endpoints.py",
> line 1393, in _serverFromStringLegacy
>    nameOrPlugin, args, kw = _parseServer(description, None, default)
>  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/internet/endpoints.py",
> line 1380, in _parseServer
>    for plugin in getPlugins(IStreamServerEndpointStringParser):
>  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/plugin.py",
> line 209, in getPlugins
>    allDropins = getCache(package)
> --- <exception caught here> ---
>  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/plugin.py",
> line 181, in getCache
>    dropinPath.setContent(pickle.dumps(dropinDotCache))
> exceptions.AttributeError: 'ZipPath' object has no attribute 'setContent'
> I have set up a hidden service, advertised at: <<class
> 'twisted.internet.tcp.Port'> of twisted.web.server.Site on 55141>

This traceback is actually harmless, if annoying.  It's trying to generate the plugin cache, which is explained here:

<https://twistedmatrix.com/documents/current/core/howto/plugin.html#auto3>

> http://mqrcnytlnh4xynmh.onion:80
> locally listening on IPv4Address(TCP, '127.0.0.1', 55141)
> 
> and txtorcon's setup.py output:
> python setup.py install


> running bdist_egg
 ^ This right here is your problem.

There are a couple of solutions, in order of increasing complexity:

Don't build eggs.  Why are you building eggs?  Eggs are unfortunately a huge problem magnet.  I don't think 'pip install' builds eggs; I don't manually run setup.py anywhere any more because I assume pip understands these concerns better than I do.
Set zip_safe in your setup.py to False, which will turn your egg into a directory rather than a directory.
Figure out a way to hook the _build_ step specifically so you can run getPlugins() to generate the dropin cache before zipping up your zip file.  Twisted plugins actually do work within zip files, but nobody has bothered working out the setuptools incantation to get them to generate at the appropriate time for building an egg.  This is extra tricky because you only want to generate this dropin.cache file if the dropin is going to live inside an egg; otherwise, it would conflict with the communal dropin.cache file generated at install time.  This option will be the most confusing and frustrating for you, but I hope you choose it, because it would be GREAT to have a Right Way? to address this problem in a Twisted plugin project's setup.py :).

> zip_safe flag not set; analyzing archive contents...

It's probably best to set zip_safe one way or the other though, even if you want to set it to 'true'.  Letting setuptools guess like this will, unsurprisingly, get you unpredictable results.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140505/f17e4a33/attachment.html>

From tom.prince at ualberta.net  Tue May  6 02:15:34 2014
From: tom.prince at ualberta.net (Tom Prince)
Date: Tue, 06 May 2014 02:15:34 -0600
Subject: [Twisted-Python] Distributing apilinks.py
In-Reply-To: <35B861B5-BB3B-41BC-AB2C-3DA2F5946AC1@twistedmatrix.com>
References: <CAFycZ9emvGU+E9dt6ZHv=gvCW29fstPvH5m_85qDt_EbPObDBg@mail.gmail.com>
 <874n147inx.fsf@hermes.hocat.ca>
 <35B861B5-BB3B-41BC-AB2C-3DA2F5946AC1@twistedmatrix.com>
Message-ID: <87d2frl3vd.fsf@loki.hocat.ca>

Glyph <glyph at twistedmatrix.com> writes:

> This would be very nice.  Did you file an actual bug on pydoctor or is this a conversation which will be momentarily forgotten? :)

Not exactly, but
https://bugs.launchpad.net/pydoctor/+bug/1246713
and
https://bugs.launchpad.net/pydoctor/+bug/1287458
both document that solution.


From dstainton415 at gmail.com  Tue May  6 05:38:13 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Tue, 6 May 2014 11:38:13 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <B9DA601A-E4DA-45E4-979A-94C6AE618332@twistedmatrix.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
 <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
 <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>
 <CAFN1edrLu1wf7cfDHdmg0MJ0OdvWKUYX3LY-dE3VpZ2Ysrr8WQ@mail.gmail.com>
 <B9DA601A-E4DA-45E4-979A-94C6AE618332@twistedmatrix.com>
Message-ID: <CAFN1edprzLY+7mr9Z9d-SNjvKfWwMRb8E0KWNz98SjdS98UB6A@mail.gmail.com>

> The endpoint constructor should do _construction_.  The endpoint parser
> should do _parsing_.  The task of parsing is of taking strings and producing
> meaningful values.

Ah yeah I see what you mean. OK... I changed it:
https://github.com/david415/txtorcon/commit/1e96d550c40bef1be1b45c3c975c0da0bf6a2949

> You may want to have the endpoint parser actually live in a separate method
> in txtorcon rather than putting it into the plugin itself, and leave the
> plugin simply the task of plugging in, but the parsing method should not be
> called __init__.

Done.

> (Also, don't use asserts.  This is probably indicative of a weakness in the
> parsing API we've provided, but you should likely raise something like
> UsageError.)

OK... I changed that part too.

> What exactly is 'usewithtor'?
>
> usewithtor pip install twisted

It's torsocks. It performs an LD_PRELOAD hack to force programs to use tor.
Here's some torsocks info:

https://trac.torproject.org/projects/tor/wiki/doc/torsocks
https://gitweb.torproject.org/torsocks.git
https://lists.torproject.org/pipermail/tor-dev/2014-April/006649.html

Torsocks is useful... but a terrible hack... and this reminds me:

I'm hoping that the effort to make Tahoe-LAFS more Tor-friendly will
result in well documented
solutions. I would hope that this would make it easier for other
developers to make their twisted apps more Tor-friendly as well.
I do not think we have all the solution details worked out yet...

We'd like to stop using torsocks with Tahoe-LAFS and instead use
twisted endpoints...
which is why I ported the Foolscap client side to use twisted endpoints.
(str4d already ported the Foolscap server side to use endpoints)

https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517

This trac ticket discusses various ideas to make Tahoe more Tor friendly...
including this endpoint related idea that I've been thinking about
lately in trac comment 16
(https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517#comment:16) by leif
:

"""My current thought is that Tahoe should have an "always_use_tor"
option which causes all furls to be rewritten as tor: endpoints before
being passed to foolscap. If this option is not enabled, tor
connections will be made if a tor endpoint is used, but not otherwise.
So, users of mixed tor/non-tor grids can leave it disabled if they
prefer faster connections to non-tor nodes."""

This is necessary for a tahoe client wanting to use a public grid over
tor... because the grid's introducer node is going to
announce tcp endpoints not tor endpoints.

However I was thinking that the "only_tor" mode for tahoe (mentioned
here https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517#comment:15 )
could be implemented in tahoe... it could filter endpoint descriptors
by calling clientFromString or serverFromString and then checking the
object type.... or is this a terrible way to do it? I'm not sure. The
thing is... tahoe wouldn't normally
know anything about endpoints because it uses Foolscap which could use
endpoints (it does in my branch
https://github.com/david415/foolscap/tree/endpoint_descriptors_server2).

> Don't build eggs.  Why are you building eggs?  Eggs are unfortunately a huge
> problem magnet.  I don't think 'pip install' builds eggs; I don't manually
> run setup.py anywhere any more because I assume pip understands these
> concerns better than I do.

Ah OK yeah it works just fine when installed with pip.

> Figure out a way to hook the _build_ step specifically so you can run
> getPlugins() to generate the dropin cache before zipping up your zip file.
> Twisted plugins actually do work within zip files, but nobody has bothered
> working out the setuptools incantation to get them to generate at the
> appropriate time for building an egg.  This is extra tricky because you only
> want to generate this dropin.cache file if the dropin is going to live
> inside an egg; otherwise, it would conflict with the communal dropin.cache
> file generated at install time.  This option will be the most confusing and
> frustrating for you, but I hope you choose it, because it would be GREAT to
> have a Right Way? to address this problem in a Twisted plugin project's
> setup.py :).

OK... I'll try to get it working that way... but for now a pip install
seems to work fine.

> zip_safe flag not set; analyzing archive contents...
>
>
> It's probably best to set zip_safe one way or the other though, even if you
> want to set it to 'true'.  Letting setuptools guess like this will,
> unsurprisingly, get you unpredictable results.


From glyph at twistedmatrix.com  Tue May  6 15:25:17 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 6 May 2014 14:25:17 -0700
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <CAFN1edprzLY+7mr9Z9d-SNjvKfWwMRb8E0KWNz98SjdS98UB6A@mail.gmail.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
 <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
 <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>
 <CAFN1edrLu1wf7cfDHdmg0MJ0OdvWKUYX3LY-dE3VpZ2Ysrr8WQ@mail.gmail.com>
 <B9DA601A-E4DA-45E4-979A-94C6AE618332@twistedmatrix.com>
 <CAFN1edprzLY+7mr9Z9d-SNjvKfWwMRb8E0KWNz98SjdS98UB6A@mail.gmail.com>
Message-ID: <3C6C714E-B471-4DFE-BC35-7BF81EF2E147@twistedmatrix.com>

On May 6, 2014, at 4:38 AM, David Stainton <dstainton415 at gmail.com> wrote:

> However I was thinking that the "only_tor" mode for tahoe (mentioned
> here https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517#comment:15 )
> could be implemented in tahoe... it could filter endpoint descriptors
> by calling clientFromString or serverFromString and then checking the
> object type.... or is this a terrible way to do it? I'm not sure. The
> thing is... tahoe wouldn't normally
> know anything about endpoints because it uses Foolscap which could use
> endpoints (it does in my branch
> https://github.com/david415/foolscap/tree/endpoint_descriptors_server2).

That sounds pretty ugly.  If you want a specific string parser that only calls your own one specific endpoint type, perhaps don't bother querying for plugins at all, just call your own directly?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140506/b2ffe288/attachment.html>

From techtonik at gmail.com  Wed May  7 01:35:15 2014
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 7 May 2014 10:35:15 +0300
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <CAE_Hg6ajBqwicKxGm1g_6cO5WA6gppvMFVtDXWF2uVOnmV9g8Q@mail.gmail.com>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
 <CAE_Hg6ajBqwicKxGm1g_6cO5WA6gppvMFVtDXWF2uVOnmV9g8Q@mail.gmail.com>
Message-ID: <CAPkN8xJAgGAs4M3UoEtnXciMmTiKyNEdNLAxz2Y=K+MfRNrS7w@mail.gmail.com>

Hi Laurens,

Well, Manhole looks way more advanced than my idea. I just need to
be able to tap into one way application event stream - there is no input
from the other side, so application doesn't need to prepare for that.

So, serial != terminal. There might be in future, but now I am more
interested in accessibility of tap interface rather than its features.

On Mon, May 5, 2014 at 6:42 PM, Laurens Van Houtven <_ at lvh.io> wrote:
> Hi Anatoly,
>
>
> Do you know about manhole? I made a video that also demos axiom, but it
> should show you what manhole does :)
>
> https://www.youtube.com/watch?v=3-UZiO-AnLc
>
> Essentially it's "repl in a running process".
>
>
> hth
> lvh
>
>
> On Mon, May 5, 2014 at 4:43 AM, anatoly techtonik <techtonik at gmail.com>
> wrote:
>>
>> Hello, network hackers,
>>
>> Recently I've got a Raspberry Pi and a friend showed me its serial
>> interface and helped to setup it. I was stunned. What I saw - you open
>> serial terminal, and you jump in into the middle of boot section. Just
>> open a terminal and you see what's going on inside of R.Pi. Any time.
>> That's was an intro. =)
>>
>> For a long time I wanted the same interface for debugging software
>> programs. When I was hacking on Spyder I found that my human brain is
>> too limited to squeeze details of dynamic of interaction of objects at
>> run-time. Spyder is written in Python with Qt, and it is a parallel
>> application much like any Twisted app is. But I wanted to push the
>> progress, I have to deal with complexity, so I badly needed to be able
>> to draw a video of interaction at run-time. That was the problem I
>> tried to solve.
>>
>> And for the first step I needed a way to connect to Spyder at run-time
>> and see what's going on. I didn't know how to call that way before,
>> but now I have a rather accurate wording - "a serial interface for an
>> application". That is the background for the question I am trying to
>> ask.
>>
>> What is the best way to implement such interface considering the
>> following properties:
>> 1. it needs to be simple (so that you can quickly create python script
>> that reads the info)
>> 2. it needs to be universal (so that script for one app worked for other)
>> 3. it should be asynchronous (connected terminal should not degrade
>> performance)
>> 4. it needs to be reliable (at least detecting missing packets)
>> 5. and cross-platform (and pure python)
>>
>> Why Twisted? For the first I think that this problem is actual for
>> people who are dealing with complexity of dynamic and interconnected
>> systems built with the help of Twisted. For the second I believe it
>> can only be solved or analyzed by people skilled in interprocess and
>> internetwork communications.
>>
>> One button test:
>> 1. program behaves weird
>> 2. user hits the button
>> 3. terminal pops up
>> 4. shows a lot of data for a running program
>>
>> I am interested to know.
>> 1. how the button should discover the program
>> network port seems cool, but what about two parallel programs? what
>> about different programs that provide this interface?
>>
>> 2. how terminal receives the data
>> i see it as line based - one line - one event, everything is text
>>
>> 3. how to make it fast
>> TCP clearly won't here
>>
>> 4. how to send the data
>> what if two threads (or parallel code) produce serial data? who should
>> run the server that serves connected terminals, and how other thread
>> will send message to this server? you can not run two TCP servers on
>> the same port on the app side, so is there an alternative? how to
>> detect missing data in a stream? how to avoid dealing with incomplete
>> packets and low level network details?
>>
>> Thanks. I'd like to get back to hacking on Spyder one day, but this is
>> a stumbling block for me every time I think about it or any program of
>> compared complexity.
>> --
>> anatoly t.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
anatoly t.


From techtonik at gmail.com  Wed May  7 01:47:07 2014
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 7 May 2014 10:47:07 +0300
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <5367C941.7020007@itamarst.org>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
 <5367C941.7020007@itamarst.org>
Message-ID: <CAPkN8x+58jiw5ojp0xm=gVH=D19wMVz-ApBRAnuPUyaiSyX3fg@mail.gmail.com>

On Mon, May 5, 2014 at 8:24 PM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> If Spyder *just* uses Qt, it's a single-threaded event loop. There's a 3rd
> party event loop for Twisted that runs on top of Qt (qt4reactor), which
> would allow Twisted and Qt code to run in the same thread.

Spyder executes interpreters (seen by users as consoles) in separate threads:
https://bitbucket.org/spyder-ide/spyderlib/src/5c0af92927a342bb0eb561c1729198d3d96ab74e/spyderlib/interpreter.py?at=default#cl-47
and also monitors them to provide code completion, calltips and other features:
https://bitbucket.org/spyder-ide/spyderlib/src/5c0af92927a342bb0eb561c1729198d3d96ab74e/spyderlib/widgets/externalshell/monitor.py?at=default#cl-116

What I need is a mechanism to discover Spyder instances, attach to them
and see what (possibly prepared events) are occurring. It is important that
events are multiplexed into single stream for detecting race conditions. I
need as simple interface as possible and not Python specific even, that's
why I asked it on the network protocol level (which classic serial interface
operates on).


From techtonik at gmail.com  Wed May  7 01:50:48 2014
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 7 May 2014 10:50:48 +0300
Subject: [Twisted-Python] ReactorBuilder doesn't support external reactors
 ticket reminder (Was: Serial interface for software program)
Message-ID: <CAPkN8xK+01fhtsb-=8h+ykdN6b5EfUN2fGHP3bCcAaUk9UsGMw@mail.gmail.com>

On Tue, May 6, 2014 at 4:02 AM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On 05/05/2014 03:06 PM, exarkun at twistedmatrix.com wrote:
>>
>> However, I'm not even sure if the GUI reactors *should* be distributed as
>> part of the main Twisted package.  They are already first-class reactors via
>> the plugin system.  Independent releases let them track changes in the GUI
>> library they're each concerned with more quickly than they could if they
>> were part of Twisted itself.
>
>
> Someone remind me to file a "ReactorBuilder doesn't support external
> reactors" ticket tomorrow...

File a "ReactorBuilder doesn't support external reactors" today. )
-- 
anatoly t.


From techtonik at gmail.com  Wed May  7 01:57:24 2014
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 7 May 2014 10:57:24 +0300
Subject: [Twisted-Python] qt4reactor on PySide (Was: Serial interface for
 software program)
Message-ID: <CAPkN8xJYAABnRD3tFsG9Z1rh=ZCra_qy8Kgj2U5-CzLr9p_gDg@mail.gmail.com>

On Mon, May 5, 2014 at 10:06 PM,  <exarkun at twistedmatrix.com> wrote:
> On 06:49 pm, sank.daniel at gmail.com wrote:
>>>
>>> There's a 3rd party event loop for Twisted that runs on top of Qt
>>> (qt4reactor), which would
>>> allow Twisted and Qt code to run in the same thread.
>>
>> Speaking of which, why isn't that thing officially part of twisted? Super
>> useful.
>
> The PyQt team insists that the PyQt license is incompatible with Twisted's
> license (this is an intentional simplification, you can read more about the
> issue on PyQt's website if you really care).
>
> Since PySide now exists this is potentially no longer an issue. However, the
> last thing I heard about using PySide to run the Qt reactor is that it
> segfaulted sometimes.
>
> So perhaps the reason is that someone needs to do some work to determine if
> PySide is actually safe to use with the Qt reactor now and, if it is,
> shuffle some code around.

I think Twisted users just need to start using it, have this doc at hand -
https://code.google.com/p/spyderlib/wiki/HowToDebugQtCrash -
and register on https://bugreports.qt-project.org/ if there is a trouble
(or just mail PySide list).

> However, I'm not even sure if the GUI reactors *should* be distributed as
> part of the main Twisted package.  They are already first-class reactors via
> the plugin system.  Independent releases let them track changes in the GUI
> library they're each concerned with more quickly than they could if they
> were part of Twisted itself.
>
> Perhaps there are other reasons, like simplicity of packaging or quality of
> continuous integration testing, that would override those issues and make it
> worth bringing Qt reactor back into Twisted.  Sorting that out is also a
> task that requires someone interested to step up an do some work, though. :)

The question was - why super useful Qt reactor loop is not a part of Twisted.
I think that if it is really useful, it should,
-- 
anatoly t.


From exarkun at twistedmatrix.com  Wed May  7 05:40:59 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 07 May 2014 11:40:59 -0000
Subject: [Twisted-Python] qt4reactor on PySide (Was: Serial interface
 for software program)
In-Reply-To: <CAPkN8xJYAABnRD3tFsG9Z1rh=ZCra_qy8Kgj2U5-CzLr9p_gDg@mail.gmail.com>
References: <CAPkN8xJYAABnRD3tFsG9Z1rh=ZCra_qy8Kgj2U5-CzLr9p_gDg@mail.gmail.com>
Message-ID: <20140507114059.12809.1668209907.divmod.xquotient.4@top>

On 07:57 am, techtonik at gmail.com wrote:
>On Mon, May 5, 2014 at 10:06 PM,  <exarkun at twistedmatrix.com> wrote:
>>
>>So perhaps the reason is that someone needs to do some work to 
>>determine if
>>PySide is actually safe to use with the Qt reactor now and, if it is,
>>shuffle some code around.
>
>I think Twisted users just need to start using it, have this doc at 
>hand -
>https://code.google.com/p/spyderlib/wiki/HowToDebugQtCrash -
>and register on https://bugreports.qt-project.org/ if there is a 
>trouble
>(or just mail PySide list).

By all means, please use it and report bugs in the appropriate place.

Jean-Paul


From killiands at gmail.com  Wed May  7 07:47:37 2014
From: killiands at gmail.com (Killian De Smedt)
Date: Wed, 7 May 2014 15:47:37 +0200
Subject: [Twisted-Python] doWrite called on a twisted.internet.unix.Port
Message-ID: <CAG5JYFtZf_4y6+V8Opc1tQqYMjD104aCYRraC3YQcM8BgmBZwQ@mail.gmail.com>

Hello everybody,

I sometimes see the following error logged by a twisted application, it
only happens sporadically and I cannot even reproduce when trying to
re-execute the exact sequence of those failures. So giving an SSCCE is
quite impossible for now (sorry). Given this trace it's also hard to find
what was actually called/executed.

Unhandled Error
Traceback (most recent call last):
  File "/path/to/twisted.zip/twisted/python/log.py", line 88, in
callWithLogger

  File "/path/to/twisted.zip/twisted/python/log.py", line 73, in
callWithContext

  File "/path/to/twisted.zip/twisted/python/context.py", line 118, in
callWithContext

  File "/path/to/twisted.zip/twisted/python/context.py", line 81, in
callWithContext

--- <exception caught here> ---
  File "/path/to/twisted.zip/twisted/internet/posixbase.py", line 619, in
_doReadOrWrite

  File "/path/to/twisted.zip/twisted/internet/base.py", line 1117, in
doWrite

exceptions.RuntimeError: doWrite called on a twisted.internet.unix.Port

I cannot reproduce the scenario where this goes wrong, in the application
there is only a single unix socket which is handled as follows:

class cmd_protocol(basic.Int32StringReceiver):
    def stringReceived(self, command):
        self.factory.callback(command, self.send_response)

    def send_response(self, code, message):
        self.sendString(response_msg(result_code = code, message =
message).SerializeToString()) //response_msg is a google protobuf class

class cmd_factory(protocol.ServerFactory):
    protocol = cmd_protocol
    def __init__(self, callback, *args, **kwargs):
        self.callback = callback

class cmd_server(object):
    def __init__(self, socket_file, callback, delete_previous_socket =
True):
        if delete_previous_socket:
            try:
                os.remove(socket_file)
            except OSError:
                pass
        reactor.listenUNIX(socket_file, cmd_factory(callback))
#@UndefinedVariable

Does anybody have any idea what could trigger the doWrite internally or how
I at least I can start debugging this?

Thank you,

Killian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140507/4584e5b4/attachment.html>

From hawkowl at atleastfornow.net  Wed May  7 08:07:52 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Wed, 7 May 2014 22:07:52 +0800
Subject: [Twisted-Python] The Twisted 14.0 Release Pre-Post-Mortem,
	and Where To From Here
Message-ID: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>

Hi everyone,

I?m sure that some of you have been following the past seven or so weeks of Twisted 14.0 release shenanigans, and this email hopes to explain what went wrong, what we can do better next time, and where we can go from here.

Problem 1: Twisted 14.0.0pre1 had a regression. This was not noticed in the prerelease stage because it was not marked as a regression, where the RM does a check for open regressions on the milestone.
What we can do better next time: Tickets that are regressions need to be marked as regressions and applied to the release milestone. If you think it might be a regression - even slightly - mark it as such, and comment that you are not sure. It?s easier to find the ticket later and decide it is not actually a regression than have to abort a release because it?s come up after a prerelease.

Problem 2: The fix for the regression was not merged into pre1, the release was rerolled from trunk. This meant some pyOpenSSL and TLS improvements got into the 14.0 release from pre2 onwards, but introduced new regressions.
What we can do better next time: Do not reroll from trunk to get bug fixes - merge them into the release branch. 

Problem 3: The fixes for the regressions were finished after some delay, since the fixes had to be written and reviewed. This introduced delays into the 14.0 release cycle.
What we can do better next time: Rather than fix regressions introduced, the ticket that introduced them should be reverted.

Problem 4: The fixes for the regressions did not merge cleanly with the release branch. Some 35+ tickets were merged between pre1 and the release of the regression fix into trunk.
What we can do better next time: Bug fixes should be based off the release branch, not trunk. This reduces the likelihood of code churn or unknown dependencies causing problems during the merge.

Problem 5: There was mixed communication whether one of the regression fixes was to be introduced in 14.0 or in a bug fix release (14.0.1).
What we can do better: If a fix is intended for merging in to a prerelease, it should be raised on the mailing list, so that there is more visibility for its intentions.

Problem 6: I personally made several mistakes along the way - from screwing up svn merges to interpreting the ?abort the release and incorporate the bugfix? to apply the initial regression fix. Since the TLS changes were topical, I decided that having them out ASAP would be better than not.
What we can do better: Improved docs/automation to reduce the margin for RM error, and better automation to make a new release to get out important features really easy.

These are the major problems which I have identified - I?m sure there?s plenty more, and I would like people to list them if I have not - even if they make me look like an idiot ;). We can learn from it, I?m sure.

So, this leaves where to from now. I see a few options, with my estimates for work and risk that it?ll explode:

1 - Most work, high risk - Work on making the regression fixes merge cleanly with 14.0.0pre5. This is big-ish task with room for error, since there was some underlying code churn.
2 - Some work, medium risk - Release 14.0.0pre5 as 14.0 final, and I (or another RM if I?m no longer trusted ;) ) initiate the 14.1 release immediately.
3 - Least work, highish risk - Scrap 14.0, begin the 14.1 release immediately. since 14.0 tags become 14.1 tags, and we just have to hope that there?s no regressions in the 39 tickets fixed between pre1 and now. This may introduce issues (since 14.0 is an un-release, and there are questions about what this does to our deprecation windows).

If I am to be honest, I much prefer option #3, but I would like opinions from other developers, before I go causing more problems than I already have :)

Regards,
HawkOwl

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140507/ce265795/attachment.pgp>

From exarkun at twistedmatrix.com  Wed May  7 08:11:23 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 07 May 2014 14:11:23 -0000
Subject: [Twisted-Python] doWrite called on a twisted.internet.unix.Port
In-Reply-To: <CAG5JYFtZf_4y6+V8Opc1tQqYMjD104aCYRraC3YQcM8BgmBZwQ@mail.gmail.com>
References: <CAG5JYFtZf_4y6+V8Opc1tQqYMjD104aCYRraC3YQcM8BgmBZwQ@mail.gmail.com>
Message-ID: <20140507141123.12809.1006896501.divmod.xquotient.8@top>

On 01:47 pm, killiands at gmail.com wrote:
>Hello everybody,
>
>I sometimes see the following error logged by a twisted application, it
>only happens sporadically and I cannot even reproduce when trying to
>re-execute the exact sequence of those failures. So giving an SSCCE is
>quite impossible for now (sorry). Given this trace it's also hard to 
>find
>what was actually called/executed.

I've seen something like this with a somewhat old version of Twisted and 
a custom reactor.  I never tracked down the cause.

What version of Twisted are you using, what platform are you on, and 
what reactor are you using?

Another useful bit of debug information would be to hack up the 
reactor's `addWriter` method to do a check of the argument.  The call 
stack at *that* point (when the argument is a Port) is more interesting 
than the call stack at the point where `doWrite` is called.

Jean-Paul


From _ at lvh.io  Wed May  7 08:15:53 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 7 May 2014 09:15:53 -0500
Subject: [Twisted-Python] The Twisted 14.0 Release Pre-Post-Mortem,
 and Where To From Here
In-Reply-To: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
References: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
Message-ID: <CAE_Hg6Znw2nGcoxw029yQOMBDiEoL=RnvkVixOB0wkErEnBnmg@mail.gmail.com>

Hi!
?

First of all, thank you so much for working on this. Secondly, provided we
don't find any regressions in pre5, option 2 seems the least footgunny to
me :)


hth
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140507/9a847a17/attachment.html>

From hs at ox.cx  Wed May  7 08:34:12 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Wed, 07 May 2014 16:34:12 +0200
Subject: [Twisted-Python] The Twisted 14.0 Release Pre-Post-Mortem,
 and Where To From Here
In-Reply-To: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
References: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
Message-ID: <EFFAAC71-BCD8-4221-B9F2-C960658D6DC6@ox.cx>

On 7 May 2014, at 16:07, HawkOwl wrote:

> 2 - Some work, medium risk - Release 14.0.0pre5 as 14.0 final,

I?m +1 on this one.  The pre5 has been widely tested and the only real issues are some embarrassing but inconsequential typos.  Let?s get this out before we introduce *real* problems.

> and I (or another RM if I?m no longer trusted ;) )

Nonsense, you?re doing great work.

> initiate the 14.1 release immediately.

You can try to do a 14.0.1 for all I care but those space errors IMHO don?t really warrant a point release (except that it would give us some practice for times when we need it as glyph pointed out on IRC).
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: OpenPGP digital signature
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140507/d26e1208/attachment.pgp>

From itamar at itamarst.org  Wed May  7 08:42:08 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 07 May 2014 10:42:08 -0400
Subject: [Twisted-Python] The Twisted 14.0 Release Pre-Post-Mortem,
 and Where To From Here
In-Reply-To: <EFFAAC71-BCD8-4221-B9F2-C960658D6DC6@ox.cx>
References: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
 <EFFAAC71-BCD8-4221-B9F2-C960658D6DC6@ox.cx>
Message-ID: <28591a3fc46f27abd0eabba4440d351b@itamarst.org>

 

A diff between the 14.0.0pre5 branch and trunk suggests merging it into
trunk would do bad things, so I'm not sure it's releasable as is... This
may be operator error on my part though. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140507/f9e7a134/attachment-0001.html>

From killiands at gmail.com  Wed May  7 09:09:03 2014
From: killiands at gmail.com (Killian De Smedt)
Date: Wed, 7 May 2014 17:09:03 +0200
Subject: [Twisted-Python] doWrite called on a twisted.internet.unix.Port
In-Reply-To: <20140507141123.12809.1006896501.divmod.xquotient.8@top>
References: <CAG5JYFtZf_4y6+V8Opc1tQqYMjD104aCYRraC3YQcM8BgmBZwQ@mail.gmail.com>
 <20140507141123.12809.1006896501.divmod.xquotient.8@top>
Message-ID: <CAG5JYFvmuJyditu9HKueWKnCg4N92QToYn=BovzzNugOfX2mwA@mail.gmail.com>

Hi Exarkun,

Thanks for the quick response. I should have specified those things
immediately.
I manually merged the UDP ipv6 branch in the trunk somewhere in august and
used that one, the version number is reported as [twisted, version 13.1.0].
The platform is always centos though the centos version might range from
5.x to 6.x, 32 bit, but most of the time it runs on a centos 5.2
installation (kernel on my working machine is 2.6.18). Python is 2.7.1 .
I use the default reactor which should come down to the epoll one.

I'll try to hack up the addwriter, it shouldn't be that hard to for just
that application.

Thank you,

Killian


On 7 May 2014 16:11, <exarkun at twistedmatrix.com> wrote:

> On 01:47 pm, killiands at gmail.com wrote:
>
>> Hello everybody,
>>
>> I sometimes see the following error logged by a twisted application, it
>> only happens sporadically and I cannot even reproduce when trying to
>> re-execute the exact sequence of those failures. So giving an SSCCE is
>> quite impossible for now (sorry). Given this trace it's also hard to find
>> what was actually called/executed.
>>
>
> I've seen something like this with a somewhat old version of Twisted and a
> custom reactor.  I never tracked down the cause.
>
> What version of Twisted are you using, what platform are you on, and what
> reactor are you using?
>
> Another useful bit of debug information would be to hack up the reactor's
> `addWriter` method to do a check of the argument.  The call stack at *that*
> point (when the argument is a Port) is more interesting than the call stack
> at the point where `doWrite` is called.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Killian De Smedt
mobile: +32 486/825 951
mail: killiands at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140507/cd146b35/attachment.html>

From glyph at twistedmatrix.com  Wed May  7 15:40:06 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 May 2014 14:40:06 -0700
Subject: [Twisted-Python] The Twisted 14.0 Release Pre-Post-Mortem,
	and Where To From Here
In-Reply-To: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
References: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
Message-ID: <3B44A2B8-E51E-477F-B5E3-0678C3F6DF5A@twistedmatrix.com>


On May 7, 2014, at 7:07 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> Hi everyone,

Hi HawkOwl,

> I?m sure that some of you have been following the past seven or so weeks of Twisted 14.0 release shenanigans, and this email hopes to explain what went wrong,

Given that there does not appear to be a 14.0 final, shouldn't this be "what is still going wrong"?  This is more like a death rattle, not a post mortem ;-).

> what we can do better next time, and where we can go from here.

Thank so much for doing this.  I'm sorry the 14.0 release process has been a tough one, and that its toughness has been partially my fault.

However, I'm glad that this has provoked some reflection and discussion.  The fact that you've done such a thorough analysis almost makes a challenging release cycle worth it :).

> Problem 1: Twisted 14.0.0pre1 had a regression. This was not noticed in the prerelease stage because it was not marked as a regression, where the RM does a check for open regressions on the milestone.

When you say it was "not noticed in the prerelease stage", do you just mean it didn't show up before the pre-release was made?

Also, in the future, can you always include specific links to the tickets involved in the problems encountered?  I'm not exactly sure which regressions we're talking about in pre1.

> What we can do better next time: Tickets that are regressions need to be marked as regressions and applied to the release milestone. If you think it might be a regression - even slightly - mark it as such, and comment that you are not sure. It?s easier to find the ticket later and decide it is not actually a regression than have to abort a release because it?s come up after a prerelease.

At the same time, I feel like I should stress like this, by itself, was not a huge problem.  Specifically, rolling a second pre-release is okay.  It's a bit unfortunate that the regression was not tagged in advance of the release, but discovering issues and fixing them is exactly what the pre-release process is for.

> Problem 2: The fix for the regression was not merged into pre1, the release was rerolled from trunk. This meant some pyOpenSSL and TLS improvements got into the 14.0 release from pre2 onwards, but introduced new regressions.
> What we can do better next time: Do not reroll from trunk to get bug fixes - merge them into the release branch. 

Another problem here, that I can take full blame for, was that the communication involved was fragmented and not terribly consistent.  HawkOwl would ask a question on IRC, I would give an answer, then a couple of hours later someone else would give an apparently contradictory answer to a follow-up question.  I don't think that we were actually disagreeing all that much, but at a number of points, it became a game of telephone.  Also, I'd sometimes ask a question about the release process, and someone would tell me something they thought HawkOwl had said or a guess as to what might come next, which I took to be the actual plan.

Particularly, I was very confused at various points as to whether the next prerelease was going to have things backported, which things were going to be backported, or whether we were re-rolling from trunk.  I think that, similarly, HawkOwl was very confused as to what I _wanted_ to happen.

In the future, when we're communicating about the release process, we should probably try harder than usual to have all the discussion in a persistent forum so that it's obvious where the state of things is.  Maybe that means the mailing list, maybe the release ticket, but IRC has proven to be a particularly inappropriate and unreliable channel for this kind of discussion.

If we _do_ have a discussion on IRC, following the precedent that some more responsible members of the community have set, and copying a summary or trimmed transcript of the relevant conclusions into the ticket or to the list should be a requirement.

To get a head start on this, I have put a link to this very discussion on the ticket. <https://twistedmatrix.com/trac/ticket/7039#comment:23>

And a final point on communication: on release branches, sensible commit messages are particularly important.  On most branches, individual commit messages can be a bit less than helpful because they're eventually all bundled up into a squash commit (hopefully one day a proper merge commit) with its own useful commit message.  That commit message can fill in any gaps left by unhelpful individual commits.

On release branches, however, every individual commit has release implications, so explaining why things are being done is extra important.  For example, this sequence of events is confusing: <https://twistedmatrix.com/trac/changeset/42616> <https://twistedmatrix.com/trac/changeset/42617>.  Which merge is being reverted?  (I can kinda guess it's the immediately preceding commit, but...) Did a build fail or something?  Which build?  Were some commits merged incorrectly?  Not hypothetical questions, by the way, I am seriously wondering what happened there :-).

> Problem 3: The fixes for the regressions were finished after some delay, since the fixes had to be written and reviewed. This introduced delays into the 14.0 release cycle.
> What we can do better next time: Rather than fix regressions introduced, the ticket that introduced them should be reverted.

Yup.

> Problem 4: The fixes for the regressions did not merge cleanly with the release branch. Some 35+ tickets were merged between pre1 and the release of the regression fix into trunk.

The fact that PyCon was happening at the same time definitely did not help.  For what it's worth, I _really_ tried as hard as I could to finish that stuff before the sprints.  But 14.0 probably should have just come out before then anyway :-).

> What we can do better next time: Bug fixes should be based off the release branch, not trunk. This reduces the likelihood of code churn or unknown dependencies causing problems during the merge.

This was one of the aforementioned problems with communication.

> Problem 5: There was mixed communication whether one of the regression fixes was to be introduced in 14.0 or in a bug fix release (14.0.1).
> What we can do better: If a fix is intended for merging in to a prerelease, it should be raised on the mailing list, so that there is more visibility for its intentions.

There should probably also be a comment on the release ticket.

> Problem 6: I personally made several mistakes along the way - from screwing up svn merges to interpreting the ?abort the release and incorporate the bugfix? to apply the initial regression fix. Since the TLS changes were topical, I decided that having them out ASAP would be better than not.

Again: communication, communication, communication.  I didn't know about any screwed-up SVN merges and wasn't super clear on when releases were aborted.  I would have tried to help more if I knew about the issues with the release branch as they were occurring.

> What we can do better: Improved docs/automation to reduce the margin for RM error, and better automation to make a new release to get out important features really easy.

The release process _is_ getting easier and easier, but sometimes we still act like it's really hard and thereby introduce additional complexity and difficulties.

> These are the major problems which I have identified - I?m sure there?s plenty more, and I would like people to list them if I have not - even if they make me look like an idiot ;). We can learn from it, I?m sure.
> 
> So, this leaves where to from now. I see a few options, with my estimates for work and risk that it?ll explode:
> 
> 1 - Most work, high risk - Work on making the regression fixes merge cleanly with 14.0.0pre5. This is big-ish task with room for error, since there was some underlying code churn.

Just to be clear, "the regression" that we're talking about is <https://twistedmatrix.com/trac/ticket/7097>, right?

> 2 - Some work, medium risk - Release 14.0.0pre5 as 14.0 final,

I would most prefer this option.  Embarrassing as the errors in the message fixed by 7097 are, I think it's acceptable to say that this is not a particularly meaningful regression.  For me personally it stretches the definition of "regression" a little bit, because it's information about new functionality, not a change or break in old functionality.  And emitting a new warning is (pretty much by definition) never a "regression" because part of our compatibility policy contract is that your code has to be tolerant to warnings being emitted.

To be fair, it stretches the definition, but it still technically adheres to it.  Importing twisted's TLS support without service_identity installed is a supported thing, it used to do something "correct", it's moved to do something "incorrect" because there is incorrect text emitted.  Still, if I had to classify it without input from anyone else I'd probably call it a "new bug".

Critically, users applications won't be broken by this.  They'll see some ugly or possibly incorrect text which will be fixed in an update which will hopefully follow on pretty quickly.  Not to mention that there's an easy fix for this by installing the relevant dependency.

> and I (or another RM if I?m no longer trusted ;) )

Honestly, at this point, I trust you a bit more with the release process.  Up until this point, you've had only easy successes, which (as you can see!) is a little dangerous ;-).  An experience of a failure that you have clearly articulated the reasons for strikes me as a very useful skill-building exercise.

> initiate the 14.1 release immediately.

More releases are always better!

> 3 - Least work, highish risk - Scrap 14.0, begin the 14.1 release immediately. since 14.0 tags become 14.1 tags, and we just have to hope that there?s no regressions in the 39 tickets fixed between pre1 and now. This may introduce issues (since 14.0 is an un-release, and there are questions about what this does to our deprecation windows).

I think that trying to cram in more features to 14.0 got us into a mess in the first place, so throwing our hands up at this point and trying to shepherd 39 _more_ features into this release, potentially delaying things even longer, does not strike me as a good idea.

> If I am to be honest, I much prefer option #3, but I would like opinions from other developers, before I go causing more problems than I already have :)

I can see why #3 is tempting, but trunk has got a lot of churn on it right now and I'm relieved we didn't attempt to re-roll post-PyCon despite the merge difficulties.

More than I'd prefer option 2 though, I'd prefer that everyone interested weigh in and we make a decision quickly so that the release process doesn't drag on further; I should reiterate that I still trust our glorious release manager HawkOwl to make this decision and be responsible for it, so I'm providing input but I'm not giving any orders here.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140507/541d6aca/attachment.html>

From glyph at twistedmatrix.com  Wed May  7 15:58:56 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 May 2014 14:58:56 -0700
Subject: [Twisted-Python] The Twisted 14.0 Release Pre-Post-Mortem,
	and Where To From Here
In-Reply-To: <28591a3fc46f27abd0eabba4440d351b@itamarst.org>
References: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
 <EFFAAC71-BCD8-4221-B9F2-C960658D6DC6@ox.cx>
 <28591a3fc46f27abd0eabba4440d351b@itamarst.org>
Message-ID: <06588DFE-3B54-4340-9D22-EA32733F0D35@twistedmatrix.com>


On May 7, 2014, at 7:42 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> A diff between the 14.0.0pre5 branch and trunk suggests merging it into trunk would do bad things, so I'm not sure it's releasable as is... This may be operator error on my part though.
> 
This doesn't look significant.

A squash merge in git gives me these conflicts:

Unmerged paths:

	both modified:      twisted/internet/_sslverify.py
	deleted by them:    twisted/topfiles/5190.feature

The conflict in _sslverify.py is trivial, a single hunk that looks like this:

diff --cc twisted/internet/_sslverify.py
index 5fbdc58,0d2e312..0000000
--- a/twisted/internet/_sslverify.py
+++ b/twisted/internet/_sslverify.py
@@@ -1493,15 -1479,6 +1493,18 @@@ class OpenSSLCertificateOptions(object)
          return ctx
  
  
++<<<<<<< HEAD
 +
 +OpenSSLCertificateOptions.__getstate__ = deprecated(
 +        Version("Twisted", 14, 1, 0),
 +        "a real persistence system")(OpenSSLCertificateOptions.__getstate__)
 +OpenSSLCertificateOptions.__setstate__ = deprecated(
 +        Version("Twisted", 14, 1, 0),
 +        "a real persistence system")(OpenSSLCertificateOptions.__setstate__)
 +
 +
++=======
++>>>>>>> origin/releases/release-14.0.0-7039-3
  
  class _OpenSSLECCurve(FancyEqMixin, object):
      """

so simply deleting the conflict markers ought to merge it satisfactorily.  If I do so and run the tests they pass.

5190.feature can simply be deleted in trunk.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140507/86231784/attachment-0001.html>

From hawkowl at atleastfornow.net  Wed May  7 16:08:10 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Thu, 8 May 2014 06:08:10 +0800
Subject: [Twisted-Python] The Twisted 14.0 Release Pre-Post-Mortem,
	and Where To From Here
In-Reply-To: <3B44A2B8-E51E-477F-B5E3-0678C3F6DF5A@twistedmatrix.com>
References: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
 <3B44A2B8-E51E-477F-B5E3-0678C3F6DF5A@twistedmatrix.com>
Message-ID: <E1451DD3-4FF8-4349-BB3F-753BED739261@atleastfornow.net>


On 8 May 2014, at 5:40, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> 
> On May 7, 2014, at 7:07 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:
> 
>> Hi everyone,
> 
> Hi HawkOwl,
> 
>> I?m sure that some of you have been following the past seven or so weeks of Twisted 14.0 release shenanigans, and this email hopes to explain what went wrong,
> 
> Given that there does not appear to be a 14.0 final, shouldn't this be "what is still going wrong"?  This is more like a death rattle, not a post mortem ;-).

Pre-post-mortem! :)

> 
>> what we can do better next time, and where we can go from here.
> 
> Thank so much for doing this.  I'm sorry the 14.0 release process has been a tough one, and that its toughness has been partially my fault.
> 
> However, I'm glad that this has provoked some reflection and discussion.  The fact that you've done such a thorough analysis almost makes a challenging release cycle worth it :).
> 
>> Problem 1: Twisted 14.0.0pre1 had a regression. This was not noticed in the prerelease stage because it was not marked as a regression, where the RM does a check for open regressions on the milestone.
> 
> When you say it was "not noticed in the prerelease stage", do you just mean it didn't show up before the pre-release was made?
> 
> Also, in the future, can you always include specific links to the tickets involved in the problems encountered?  I'm not exactly sure which regressions we're talking about in pre1.

This regression was https://twistedmatrix.com/trac/ticket/6926 - ie. that all our docs would be wrong.

> 
>> What we can do better next time: Tickets that are regressions need to be marked as regressions and applied to the release milestone. If you think it might be a regression - even slightly - mark it as such, and comment that you are not sure. It?s easier to find the ticket later and decide it is not actually a regression than have to abort a release because it?s come up after a prerelease.
> 
> At the same time, I feel like I should stress like this, by itself, was not a huge problem.  Specifically, rolling a second pre-release is okay.  It's a bit unfortunate that the regression was not tagged in advance of the release, but discovering issues and fixing them is exactly what the pre-release process is for.
> 
>> Problem 2: The fix for the regression was not merged into pre1, the release was rerolled from trunk. This meant some pyOpenSSL and TLS improvements got into the 14.0 release from pre2 onwards, but introduced new regressions.
>> What we can do better next time: Do not reroll from trunk to get bug fixes - merge them into the release branch. 
> 
> Another problem here, that I can take full blame for, was that the communication involved was fragmented and not terribly consistent.  HawkOwl would ask a question on IRC, I would give an answer, then a couple of hours later someone else would give an apparently contradictory answer to a follow-up question.  I don't think that we were actually disagreeing all that much, but at a number of points, it became a game of telephone.  Also, I'd sometimes ask a question about the release process, and someone would tell me something they thought HawkOwl had said or a guess as to what might come next, which I took to be the actual plan.
> 
> Particularly, I was very confused at various points as to whether the next prerelease was going to have things backported, which things were going to be backported, or whether we were re-rolling from trunk.  I think that, similarly, HawkOwl was very confused as to what I _wanted_ to happen.
> 
> In the future, when we're communicating about the release process, we should probably try harder than usual to have all the discussion in a persistent forum so that it's obvious where the state of things is.  Maybe that means the mailing list, maybe the release ticket, but IRC has proven to be a particularly inappropriate and unreliable channel for this kind of discussion.
> 
> If we _do_ have a discussion on IRC, following the precedent that some more responsible members of the community have set, and copying a summary or trimmed transcript of the relevant conclusions into the ticket or to the list should be a requirement.
> 
> To get a head start on this, I have put a link to this very discussion on the ticket. <https://twistedmatrix.com/trac/ticket/7039#comment:23>
> 
> And a final point on communication: on release branches, sensible commit messages are particularly important.  On most branches, individual commit messages can be a bit less than helpful because they're eventually all bundled up into a squash commit (hopefully one day a proper merge commit) with its own useful commit message.  That commit message can fill in any gaps left by unhelpful individual commits.
> 
> On release branches, however, every individual commit has release implications, so explaining why things are being done is extra important.  For example, this sequence of events is confusing: <https://twistedmatrix.com/trac/changeset/42616> <https://twistedmatrix.com/trac/changeset/42617>.  Which merge is being reverted?  (I can kinda guess it's the immediately preceding commit, but...) Did a build fail or something?  Which build?  Were some commits merged incorrectly?  Not hypothetical questions, by the way, I am seriously wondering what happened there :-).

That was me screwing up the merge of 7097 - which was causing conflicts and all sorts of weirdness.

> 
>> Problem 3: The fixes for the regressions were finished after some delay, since the fixes had to be written and reviewed. This introduced delays into the 14.0 release cycle.
>> What we can do better next time: Rather than fix regressions introduced, the ticket that introduced them should be reverted.
> 
> Yup.
> 
>> Problem 4: The fixes for the regressions did not merge cleanly with the release branch. Some 35+ tickets were merged between pre1 and the release of the regression fix into trunk.
> 
> The fact that PyCon was happening at the same time definitely did not help.  For what it's worth, I _really_ tried as hard as I could to finish that stuff before the sprints.  But 14.0 probably should have just come out before then anyway :-).
> 
>> What we can do better next time: Bug fixes should be based off the release branch, not trunk. This reduces the likelihood of code churn or unknown dependencies causing problems during the merge.
> 
> This was one of the aforementioned problems with communication.
> 
>> Problem 5: There was mixed communication whether one of the regression fixes was to be introduced in 14.0 or in a bug fix release (14.0.1).
>> What we can do better: If a fix is intended for merging in to a prerelease, it should be raised on the mailing list, so that there is more visibility for its intentions.
> 
> There should probably also be a comment on the release ticket.
> 
>> Problem 6: I personally made several mistakes along the way - from screwing up svn merges to interpreting the ?abort the release and incorporate the bugfix? to apply the initial regression fix. Since the TLS changes were topical, I decided that having them out ASAP would be better than not.
> 
> Again: communication, communication, communication.  I didn't know about any screwed-up SVN merges and wasn't super clear on when releases were aborted.  I would have tried to help more if I knew about the issues with the release branch as they were occurring.

The merge problems was why we have 4 14.0 release branches, remember? :)

> 
>> What we can do better: Improved docs/automation to reduce the margin for RM error, and better automation to make a new release to get out important features really easy.
> 
> The release process _is_ getting easier and easier, but sometimes we still act like it's really hard and thereby introduce additional complexity and difficulties.
> 
>> These are the major problems which I have identified - I?m sure there?s plenty more, and I would like people to list them if I have not - even if they make me look like an idiot ;). We can learn from it, I?m sure.
>> 
>> So, this leaves where to from now. I see a few options, with my estimates for work and risk that it?ll explode:
>> 
>> 1 - Most work, high risk - Work on making the regression fixes merge cleanly with 14.0.0pre5. This is big-ish task with room for error, since there was some underlying code churn.
> 
> Just to be clear, "the regression" that we're talking about is <https://twistedmatrix.com/trac/ticket/7097>, right?

Yes.

> 
>> 2 - Some work, medium risk - Release 14.0.0pre5 as 14.0 final,
> 
> I would most prefer this option.  Embarrassing as the errors in the message fixed by 7097 are, I think it's acceptable to say that this is not a particularly meaningful regression.  For me personally it stretches the definition of "regression" a little bit, because it's information about new functionality, not a change or break in old functionality.  And emitting a new warning is (pretty much by definition) never a "regression" because part of our compatibility policy contract is that your code has to be tolerant to warnings being emitted.
> 
> To be fair, it stretches the definition, but it still technically adheres to it.  Importing twisted's TLS support without service_identity installed is a supported thing, it used to do something "correct", it's moved to do something "incorrect" because there is incorrect text emitted.  Still, if I had to classify it without input from anyone else I'd probably call it a "new bug".
> 
> Critically, users applications won't be broken by this.  They'll see some ugly or possibly incorrect text which will be fixed in an update which will hopefully follow on pretty quickly.  Not to mention that there's an easy fix for this by installing the relevant dependency.

Now that I?ve slept on it, I?m thinking #2 might actually be the best way forward.

> 
>> and I (or another RM if I?m no longer trusted ;) )
> 
> Honestly, at this point, I trust you a bit more with the release process.  Up until this point, you've had only easy successes, which (as you can see!) is a little dangerous ;-).  An experience of a failure that you have clearly articulated the reasons for strikes me as a very useful skill-building exercise.
> 

Hopefully a skill I won?t have to use again, but? ;)

>> initiate the 14.1 release immediately.
> 
> More releases are always better!
> 

True!

>> 3 - Least work, highish risk - Scrap 14.0, begin the 14.1 release immediately. since 14.0 tags become 14.1 tags, and we just have to hope that there?s no regressions in the 39 tickets fixed between pre1 and now. This may introduce issues (since 14.0 is an un-release, and there are questions about what this does to our deprecation windows).
> 
> I think that trying to cram in more features to 14.0 got us into a mess in the first place, so throwing our hands up at this point and trying to shepherd 39 _more_ features into this release, potentially delaying things even longer, does not strike me as a good idea.
> 
>> If I am to be honest, I much prefer option #3, but I would like opinions from other developers, before I go causing more problems than I already have :)
> 
> I can see why #3 is tempting, but trunk has got a lot of churn on it right now and I'm relieved we didn't attempt to re-roll post-PyCon despite the merge difficulties.
> 
> More than I'd prefer option 2 though, I'd prefer that everyone interested weigh in and we make a decision quickly so that the release process doesn't drag on further; I should reiterate that I still trust our glorious release manager HawkOwl to make this decision and be responsible for it, so I'm providing input but I'm not giving any orders here.

Agreed.

I?m going to give this another work day for people to weigh in on. Otherwise, I will go with option #2, get pre5-as-14.0 out the door, cut a 14.1 prerelease, and get that ball rolling. Now that I?ve had some rest between worrying about how much I?ve screwed up the release, that seems like the best way forward :)

But for now, I?m off to play Ingress in the rain before work! :)

- hawkie

> 
> -glyph
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140508/b4845ee5/attachment.pgp>

From jayshah30392 at gmail.com  Sat May 10 08:29:51 2014
From: jayshah30392 at gmail.com (Jay Shah)
Date: Sat, 10 May 2014 16:29:51 +0200
Subject: [Twisted-Python] TCP and ICMP
Message-ID: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>

Hiee All,

I have very simple question. I have already implemented custom reactor for
handling ICMP requests (reference: txnettools) . My problem is: i am
implementing tcp traceroute. I have handled all icmp time exceed messages.
But, i want to handle tcp syn-ack reply which i am getting from remote
server.
How can i do that ?
Can i start listening to TCP syn req or replies on the same reactor on
which i am listening to icmp replies ?
or
should i install new custom reactor for listening to tcp replies ?
I want to parse SYN ACK request ONLY. Neither I want to make a new
connection with remote server nor handling them! I just need syn ack
replies to be parsed so that i can figure out whether i have reached my
destination or not.
thank you.

Jay Shah
(Technische Universit?t M?nchen,
M?nchen, Deutschland
Tel. +49 176 7266 7259 )
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140510/209b43c3/attachment.html>

From trac at twistedmatrix.com  Sun May 11 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 11 May 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1399788315.33.6250612958931555981@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140511/306f40aa/attachment.html>

From twisted at tomvn.com  Sun May 11 03:01:16 2014
From: twisted at tomvn.com (Tom van Neerijnen)
Date: Sun, 11 May 2014 10:01:16 +0100
Subject: [Twisted-Python] TCP and ICMP
In-Reply-To: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>
References: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>
Message-ID: <CAMwy1tw3-PBWWGEexaNxegiwhOhWjy3vPA-qVw473qB8EKt_SQ@mail.gmail.com>

You might find something to use in
http://twistedmatrix.com/documents/current/api/twisted.pair.html, or at
least an idea of how to implement it from one of the existing components.


On Sat, May 10, 2014 at 3:29 PM, Jay Shah <jayshah30392 at gmail.com> wrote:

> Hiee All,
>
> I have very simple question. I have already implemented custom reactor for
> handling ICMP requests (reference: txnettools) . My problem is: i am
> implementing tcp traceroute. I have handled all icmp time exceed messages.
> But, i want to handle tcp syn-ack reply which i am getting from remote
> server.
> How can i do that ?
> Can i start listening to TCP syn req or replies on the same reactor on
> which i am listening to icmp replies ?
> or
> should i install new custom reactor for listening to tcp replies ?
> I want to parse SYN ACK request ONLY. Neither I want to make a new
> connection with remote server nor handling them! I just need syn ack
> replies to be parsed so that i can figure out whether i have reached my
> destination or not.
> thank you.
>
> Jay Shah
> (Technische Universit?t M?nchen,
> M?nchen, Deutschland
> Tel. +49 176 7266 7259 )
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140511/de086639/attachment.html>

From dstainton415 at gmail.com  Sun May 11 04:15:19 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Sun, 11 May 2014 10:15:19 +0000
Subject: [Twisted-Python] TCP and ICMP
In-Reply-To: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>
References: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>
Message-ID: <CAFN1edqbJFMQeRTKz=ASQLJyA0Y165i0sTcYEDKXm=rDcHam=A@mail.gmail.com>

Hi Jay Shah,

I started (but never finished) to implement a tcp traceroute (with
interesting features) for OONI (Open Observatory of Network
Interference... a Tor Project project) probe. You might use parts of
the ooniprobe api to capture your packets... It's written using
Twisted and I'm fairly certain they've already implemented TCP
traceroute... but you still may want to implement your own... because
it's a fun thing to write, you'd learn a lot... and your traceroute
might have interesting features. I think the ooni interface uses raw
sockets to capture packets.

Through my research I became aware of two other linux kernel
interfaces of interest to capturing packets:
- NFLOG
- NFQUEUE

You'd have to write twisted interfaces for these linux kernel
interfaces... but you can also find some mediocre quality code
examples of this on blog posts. I had a bit of trouble with dropped
packets reusing a twisted interface I found for NFQUEUE; this might've
been a problem with the queued packets not getting consumed quick
enough before the queue limit was reached... not sure.

Cheers,

David

On Sat, May 10, 2014 at 2:29 PM, Jay Shah <jayshah30392 at gmail.com> wrote:
> Hiee All,
>
> I have very simple question. I have already implemented custom reactor for
> handling ICMP requests (reference: txnettools) . My problem is: i am
> implementing tcp traceroute. I have handled all icmp time exceed messages.
> But, i want to handle tcp syn-ack reply which i am getting from remote
> server.
> How can i do that ?
> Can i start listening to TCP syn req or replies on the same reactor on which
> i am listening to icmp replies ?
> or
> should i install new custom reactor for listening to tcp replies ?
> I want to parse SYN ACK request ONLY. Neither I want to make a new
> connection with remote server nor handling them! I just need syn ack replies
> to be parsed so that i can figure out whether i have reached my destination
> or not.
> thank you.
>
> Jay Shah
> (Technische Universit?t M?nchen,
> M?nchen, Deutschland
> Tel. +49 176 7266 7259 )
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From adi at roiban.ro  Sun May 11 06:02:42 2014
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 11 May 2014 15:02:42 +0300
Subject: [Twisted-Python] Distributing apilinks.py
In-Reply-To: <87d2frl3vd.fsf@loki.hocat.ca>
References: <CAFycZ9emvGU+E9dt6ZHv=gvCW29fstPvH5m_85qDt_EbPObDBg@mail.gmail.com>
 <874n147inx.fsf@hermes.hocat.ca>
 <35B861B5-BB3B-41BC-AB2C-3DA2F5946AC1@twistedmatrix.com>
 <87d2frl3vd.fsf@loki.hocat.ca>
Message-ID: <CAFycZ9cxfX6-WMwwG0DSHUsN=C_xZyY1sk4+X-=8ZAkwLBGdug@mail.gmail.com>

On 6 May 2014 11:15, Tom Prince <tom.prince at ualberta.net> wrote:
> Glyph <glyph at twistedmatrix.com> writes:
>
>> This would be very nice.  Did you file an actual bug on pydoctor or is this a conversation which will be momentarily forgotten? :)
>
> Not exactly, but
> https://bugs.launchpad.net/pydoctor/+bug/1246713

I tried to push this ticket forward and added a comments. Feedback is
much appreciated.

> https://bugs.launchpad.net/pydoctor/+bug/1287458
> both document that solution.

I have submitted a patch for pydoctor

https://code.launchpad.net/~adiroiban/pydoctor/1287458-objects.inv/+merge/219116

I have created a new ticket to support linking based on objects.inv.
Please add your feedback.

https://bugs.launchpad.net/pydoctor/+bug/1318325

Thanks!

-- 
Adi Roiban


From itamar at itamarst.org  Sun May 11 06:35:46 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 11 May 2014 08:35:46 -0400
Subject: [Twisted-Python] TCP and ICMP
In-Reply-To: <CAMwy1tw3-PBWWGEexaNxegiwhOhWjy3vPA-qVw473qB8EKt_SQ@mail.gmail.com>
References: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>
 <CAMwy1tw3-PBWWGEexaNxegiwhOhWjy3vPA-qVw473qB8EKt_SQ@mail.gmail.com>
Message-ID: <536F6EA2.5080404@itamarst.org>

On 05/11/2014 05:01 AM, Tom van Neerijnen wrote:
> You might find something to use in 
> http://twistedmatrix.com/documents/current/api/twisted.pair.html, or 
> at least an idea of how to implement it from one of the existing 
> components.
>
I believe the version of twisted.pair in 14.0 (or release candidates) is 
vastly improved: rewritten, has documentation, etc..


From hawkowl at atleastfornow.net  Mon May 12 05:07:15 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Mon, 12 May 2014 19:07:15 +0800
Subject: [Twisted-Python] Twisted 14.0.0 Release Announcement
Message-ID: <52611128-3708-40CE-86F5-C63FE9054A6B@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 14.0! It has been a long road to get here, but we?ve done it! 

The highlights of this release are:

- Twisted Positioning (`twisted.positioning`) makes its entry into Twisted! It comes ready to talk with common GPS devices, and will supersede `twisted.protocols.gps`.

- A wealth of SSL/TLS improvements, including ECDHE support, TLS Service Identity (with service_identity on PyPI), a stronger default set of ciphers, and strengthening against attacks such as CRIME. A Twisted Web server with pyOpenSSL 0.14 is capable of getting an A in Qualys SSL Labs tests out of the box, and A+ with small application modifications. Twisted Agent can also now do HTTPS hostname verification.

- Python 3 improvements, including the ability for `pip install` to install all ported modules.

- Twisted Pair?s TUN/TAP support has been overhauled, with documentation and full test coverage.

- Significant documentation improvements, including more API documentation for Twisted Mail & Twisted Names, narrative documentation for Twisted Names, and a migration to Sphinx for building Twisted narrative docs.

- Support is dropped for pyOpenSSL older than 0.10 and Windows XP.

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>) .

Many thanks to everyone who had a part in this release - we?ve got some big things landed, and if it weren?t for the support of developers (both core and occasional), the Twisted Software Foundation, or people giving feedback and filing bugs, we?d have never got it done.

Twisted Regards,
HawkOwl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140512/a50572a1/attachment.pgp>

From hs at ox.cx  Mon May 12 05:40:02 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Mon, 12 May 2014 13:40:02 +0200
Subject: [Twisted-Python] Twisted 14.0.0 Release Announcement
In-Reply-To: <52611128-3708-40CE-86F5-C63FE9054A6B@atleastfornow.net>
References: <52611128-3708-40CE-86F5-C63FE9054A6B@atleastfornow.net>
Message-ID: <224D84CF-5124-41D8-B07E-21D6F1CEEE70@ox.cx>

On 12 May 2014, at 13:07, HawkOwl wrote:

> On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 14.0! It has been a long road to get here, but we?ve done it!

Thank you so much for pushing this through!  Barring unpleasant surprises, this is a wonderful release!
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: OpenPGP digital signature
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140512/bfa3f4df/attachment.pgp>

From glyph at twistedmatrix.com  Mon May 12 13:20:42 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 12 May 2014 12:20:42 -0700
Subject: [Twisted-Python] TCP and ICMP
In-Reply-To: <536F6EA2.5080404@itamarst.org>
References: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>
 <CAMwy1tw3-PBWWGEexaNxegiwhOhWjy3vPA-qVw473qB8EKt_SQ@mail.gmail.com>
 <536F6EA2.5080404@itamarst.org>
Message-ID: <1A63448C-A118-45B7-AEB5-310643DB7C06@twistedmatrix.com>


On May 11, 2014, at 5:35 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

> I believe the version of twisted.pair in 14.0 (or release candidates) is vastly improved: rewritten, has documentation, etc..

I am pretty sure this only applies to TUN/TAP support, not all of twisted.pair.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140512/2a900651/attachment.html>

From glyph at twistedmatrix.com  Mon May 12 13:21:47 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 12 May 2014 12:21:47 -0700
Subject: [Twisted-Python] [Twisted-web] Twisted 14.0.0 Release
	Announcement
In-Reply-To: <52611128-3708-40CE-86F5-C63FE9054A6B@atleastfornow.net>
References: <52611128-3708-40CE-86F5-C63FE9054A6B@atleastfornow.net>
Message-ID: <2B16A476-4F01-499A-8CF9-F7D3806DBD11@twistedmatrix.com>


On May 12, 2014, at 4:07 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> Twisted Agent can also now do HTTPS hostname verification.

I feel that it's important to note that Twisted Web's client Agent *does* do HTTPS hostname verification by default; you don't need to turn it on ;).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140512/4897b983/attachment.html>

From kevin.horn at gmail.com  Tue May 13 08:30:52 2014
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 13 May 2014 09:30:52 -0500
Subject: [Twisted-Python] TCP and ICMP
In-Reply-To: <1A63448C-A118-45B7-AEB5-310643DB7C06@twistedmatrix.com>
References: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>
 <CAMwy1tw3-PBWWGEexaNxegiwhOhWjy3vPA-qVw473qB8EKt_SQ@mail.gmail.com>
 <536F6EA2.5080404@itamarst.org>
 <1A63448C-A118-45B7-AEB5-310643DB7C06@twistedmatrix.com>
Message-ID: <CA+U=zK0+G005qJFrvuuCKpOOiWgOrFfGe1xaOukzM3EAqru9mQ@mail.gmail.com>

On Mon, May 12, 2014 at 2:20 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 11, 2014, at 5:35 AM, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
>
> I believe the version of twisted.pair in 14.0 (or release candidates) is
> vastly improved: rewritten, has documentation, etc..
>
>
> I am pretty sure this only applies to TUN/TAP support, not all of
> twisted.pair.
>
> -glyph
>
>
This does appear to be the case.  In fact the documentation gives the
impression (to me at least) that twisted.pair is _only_ a TUN/TAP library.

Still better than no documentation at all, though.

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140513/e9520eff/attachment.html>

From itamar at itamarst.org  Fri May 16 08:49:18 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 16 May 2014 10:49:18 -0400
Subject: [Twisted-Python] ANN: Eliot: a framework for Logging as Storytelling
Message-ID: <44dd90e39614b15807d456aba91ebc49@itamarst.org>

 

Eliot provides a structured logging and tracing system for Python that
generates log messages describing a forest of nested actions. Actions
start and eventually finish, successfully or not. Log messages thus tell
a story: what happened and what caused it. 

Here's what your logs might look like before using Eliot: 

Going to validate http://example.com/index.html [1].
Started download attempted.
Download succeeded!
Missing <title> element in "/html/body".
Bad HTML entity in "/html/body/p[2]".
2 validation errors found!

After switching to Eliot you'll get a tree of messages with both message
contents and causal relationships encoded in a structured format: 

	* {"action_type": "validate_page", "action_status": "started", "url":
"http://example.com/index.html" [1]} 

 	* {"action_type": "download", "action_status": "started"}
 	* {"action_type": "download", "action_status": "succeeded"}

	* {"action_type": "validate_html", "action_status": "started"} 

 	* {"message_type": "validation_error", "error_type": "missing_title",
"xpath": "/html/head"}
 	* {"message_type": "validation_error", "error_type": "bad_entity",
"xpath": "/html/body/p[2]"}

 	* {"action_type": "validate_html", "action_status": "failed",
"exception": "validator.ValidationFailed"}

 	* {"action_type": "validate_page", "action_status": "failed",
"exception": "validator.ValidationFailed"}

Features: 

 	* Structured, typed log messages.
 	* Ability to log actions, not just point-in-time information: log
messages become a trace of program execution.
 	* Excellent support for unit testing your logging code.
 	* Emphasis on performance, including no blocking I/O in logging code
path.
 	* Optional Twisted support.
 	* Designed for JSON output, usable by Logstash/Elasticsearch.
 	* Supports CPython 2.7, 3.3 and PyPy.

Eliot is released by HybridCluster [2] under the Apache 2.0 License. 

To install: 

$ pip install eliot

Downloads are available on PyPI [3]. 

Documentation can be found on Read The Docs [4]. 

Bugs and feature requests should be filed at the project Github page
[5]. 

 

Links:
------
[1] http://example.com/index.html
[2] https://hybridcluster.github.io
[3] https://pypi.python.org/pypi/eliot
[4] https://eliot.readthedocs.org/
[5] https://github.com/hybridcluster/eliot
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140516/39677344/attachment.html>

From _ at lvh.io  Sat May 17 07:53:06 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Sat, 17 May 2014 15:53:06 +0200
Subject: [Twisted-Python] [ANN] thimble 0.1.0
Message-ID: <CAE_Hg6YPbNspurj2o51GPc_2xORxbcx8qhm_M4eA9uxc1j3Aig@mail.gmail.com>

Hi everyone!


thimble is a library that makes it easy to wrap blocking objects with a
thread pool to give you an async API. In particular, it lets you
selectively wrap blocking methods, and takes an explicit reactor and thread
pool, making it at least slightly harder to do the obvious but potentially
bad thing and tricky to test thing (global reactor state, using the reactor
thread pool).

(It's a thimble because it lets you play with threads without pricking
yourself :-))

This is a small library: it doesn't really fix any big engineering
problems, and that's okay. It just removes a bunch of boilerplate I've seen
in many a Twisted software project, usually boilerplate that's implemented
using the suboptimal methods described above.

The README should run you through it real quick:
https://pypi.python.org/pypi/thimble

This is just an early release. I expect that the documentation isn't good
enough to get best practices out the door, particularly in setting up
thread pools. I think it's pretty decent and probably already worth a look,
though :-)

Thanks to Rackspace for letting me write it open source & on company time
:-)

hth
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140517/6fb01638/attachment.html>

From trac at twistedmatrix.com  Sun May 18 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 18 May 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1400393115.51.2518743899807750440@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140518/97acacca/attachment.html>

From glyph at twistedmatrix.com  Sun May 18 16:19:53 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 18 May 2014 15:19:53 -0700
Subject: [Twisted-Python] [ANN] thimble 0.1.0
In-Reply-To: <CAE_Hg6YPbNspurj2o51GPc_2xORxbcx8qhm_M4eA9uxc1j3Aig@mail.gmail.com>
References: <CAE_Hg6YPbNspurj2o51GPc_2xORxbcx8qhm_M4eA9uxc1j3Aig@mail.gmail.com>
Message-ID: <B80233DA-5B02-4532-B90A-326482008B30@twistedmatrix.com>

On May 17, 2014, at 6:53 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> Hi everyone!

> thimble is a library that makes it easy to wrap blocking objects with a thread pool to give you an async API. In particular, it lets you selectively wrap blocking methods, and takes an explicit reactor and thread pool, making it at least slightly harder to do the obvious but potentially bad thing and tricky to test thing (global reactor state, using the reactor thread pool). 

Thanks for putting this together.

> (It's a thimble because it lets you play with threads without pricking yourself :-))

I love the name, and the rationale :).

> This is a small library: it doesn't really fix any big engineering problems, and that's okay. It just removes a bunch of boilerplate I've seen in many a Twisted software project, usually boilerplate that's implemented using the suboptimal methods described above.

I think this is the sort of thing that should move into Twisted itself, eventually.  Thoughts?

> The README should run you through it real quick: https://pypi.python.org/pypi/thimble
> 
> This is just an early release. I expect that the documentation isn't good enough to get best practices out the door, particularly in setting up thread pools. I think it's pretty decent and probably already worth a look, though :-)
> 
> Thanks to Rackspace for letting me write it open source & on company time :-)
> 
> hth
> lvh
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140518/5fb70ec2/attachment.html>

From adi at roiban.ro  Mon May 19 00:27:10 2014
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 19 May 2014 09:27:10 +0300
Subject: [Twisted-Python] Why would someone need SSHTransportAddress?
Message-ID: <CAFycZ9f2pac0in6tdVUvQhnHP4zLX-waKhrT1hPmo_U1E4p5ag@mail.gmail.com>

This email is bases on comment from https://twistedmatrix.com/trac/ticket/5999

I fail to see the reason why SSHTransportAddress exist and why would
anyone need It.

SSHTransportAddress is an IAddress which has a single member called
"address" and which is an IAddress ...

In case SSHTransportAddress is useful and people should start using
it, maybe this is a bug in SSHTransportAddress documentation as it
should stat why someone want to use it instead of directly using any
address define in twisted.internet.address

SSHTransportAddress was introduced in this ticket
https://twistedmatrix.com/trac/ticket/2997 and since it was reviewed
and approved by 2 other persons, I guess that I am the only one
failing to understand
to purpose of this class.

Thanks!

-- 
Adi Roiban


From _ at lvh.io  Mon May 19 03:29:13 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 19 May 2014 11:29:13 +0200
Subject: [Twisted-Python] [ANN] thimble 0.1.0
In-Reply-To: <B80233DA-5B02-4532-B90A-326482008B30@twistedmatrix.com>
References: <CAE_Hg6YPbNspurj2o51GPc_2xORxbcx8qhm_M4eA9uxc1j3Aig@mail.gmail.com>
 <B80233DA-5B02-4532-B90A-326482008B30@twistedmatrix.com>
Message-ID: <CAE_Hg6aJZDTKo5gFoh17hie7RgN+Ho1ZGwvRqAbuZes3jtooDA@mail.gmail.com>

On Mon, May 19, 2014 at 12:19 AM, Glyph <glyph at twistedmatrix.com> wrote:

> I think this is the sort of thing that should move into Twisted itself,
> eventually.  Thoughts?
>

I agree! There's a few things I'd like to work out with the freedom to
break things of a v0.x.x semver version before that happens though.

Notably, this thing assumes that all attribute accesses are thread-safe and
synchronous. That's often true, but hey, this is Python, so you get to do
whatever you want when you access an attribute (and @property even makes it
easy to do so). Also because right now I'm suggesting a pool with a singled
thread for synchronized access to an object that isn't thread safe;
especially if you *know* the object isn't thread safe you probably want
something to take care of attribute access too :-)

hth
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140519/e1ee7bed/attachment.html>

From exarkun at twistedmatrix.com  Mon May 19 09:59:12 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 19 May 2014 15:59:12 -0000
Subject: [Twisted-Python] Why would someone need SSHTransportAddress?
In-Reply-To: <CAFycZ9f2pac0in6tdVUvQhnHP4zLX-waKhrT1hPmo_U1E4p5ag@mail.gmail.com>
References: <CAFycZ9f2pac0in6tdVUvQhnHP4zLX-waKhrT1hPmo_U1E4p5ag@mail.gmail.com>
Message-ID: <20140519155912.5287.1813510360.divmod.xquotient.12@top>

On 06:27 am, adi at roiban.ro wrote:
>This email is bases on comment from 
>https://twistedmatrix.com/trac/ticket/5999
>
>I fail to see the reason why SSHTransportAddress exist and why would
>anyone need It.

Here are a couple ideas.

You have a library that accepts a connection and does some things with 
it.  You want to log the operations that are taken using the connection 
and you want to include information in those logs about which connection 
you did things with.  You choose to use the addresses of the local and 
remote sides of the connection to identify it.

You have a library that accepts a connection and wants to be able to set 
up another connection like it to the same remote address.  You get the 
remote address using the transport's `getPeer` method.

Though you may have established the SSH connection over a TCP/IPv4 
connection, neither of these uses can be accomplished if the SSH 
connection, when treated as a transport, merely uses an `IPv4Address` 
instance to represent the address of the remote end of the connection. 
Using `IPv4Address` gives you no way to differentiate between an SSH 
connection running over a TCP/IPv4 connection and a plain TCP/IPv4 
connection without SSH.

In practice, `SSHTransportAddress` is missing the information you would 
need to implement either of these scenarios.  However, that seems more 
like an argument for adding the missing information to that address type 
rather than discarding the address type.

Jean-Paul


From exarkun at twistedmatrix.com  Mon May 19 12:24:14 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 19 May 2014 18:24:14 -0000
Subject: [Twisted-Python] IOpenSSLClientConnectionCreator was ContextFactory,
 now it's IOpenSSLClientConnectionCreator not ContextFactory
Message-ID: <20140519182414.5287.1008274228.divmod.xquotient.40@top>

Hello,

I just noticed that #7098 expanded the meaning of the objects Twisted 
typically refers to as "context factories".

Prior to #7098, these were things that implemented a `getContext` method 
that returned an `OpenSSL.SSL.Context` instance.

Subsequent to #7098, these are now *either* that or an object that 
provides `IOpenSSLClientConnectionCreator`.

It seems that parts of Twisted itself were updated to reflect this 
change.  For example, the very bottom of the TLS implementation stack in 
Twisted, `twisted.protocols.tls`, acknowledges this change (I imagine 
this was unavoidable).  Also, way on the other side of Twisted, 
`twisted.web.client.Agent` takes advantage of this change to implement 
the great new certificate and hostname validation features introduced in 
14.0.0.

However, other parts of Twisted itself were not updated.  For example, 
the layers that sit in between `twisted.protocols.tls` and 
`twisted.web.client.Agent` weren't touched much.  `SSL4ClientEndpoint`, 
for example, still documents its `sslContextFactory` as "SSL 
Configuration information as an instance of 
L{twisted.internet.ssl.ContextFactory}.".  And, somewhat insanely I 
think, `IReactorSSL.connectSSL` still says "@param contextFactory: a 
L{twisted.internet.ssl.ClientContextFactory} object.".

Merely from a documentation standpoint, this seems suboptimal.  From a 
compatibility standpoint...  Well, it seems incompatible to me.  Perhaps 
this is an instance where the compatibility policy can be broken (though 
really that's academic since 14.0.0 has already been released, the 
policy has been broken already) but I don't recall any explicit 
discussion about a decision to do this.

I *hope* and suspect there won't be much fall-out from this change 
considering it's hard to implement TLS and as far as I know there are no 
third-party implementations of `IReactorSSL` (GNUTLS came to mind but 
they have their own incompatible interface afaict).  In other words, 
maybe we'll get lucky this time.

I wrote this email instead of filing tickets about the documentation 
problems because doing the latter was implicit acknowledgement that this 
incompatible change is okay.  Having written the email now, I see 
there's probably no going back, regardless.  Maybe we can learn 
something from this incident and avoid repeating it with a more popular 
interface, though.

We could probably add a description of this particular kind of 
incompatible change to the `CompatibilityPolicy` wiki page.  If 
reviewers read that page, then they'll know to watch out for it.

And of course (assuming we're committed to this direction, which we seem 
to be) we need to fix the rest of the "contextFactory" documentation 
throughout Twisted.  I'll go file one ticket related to that now...

Jean-Paul


From dstainton415 at gmail.com  Mon May 19 12:48:07 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Mon, 19 May 2014 18:48:07 +0000
Subject: [Twisted-Python] Why would someone need SSHTransportAddress?
In-Reply-To: <20140519155912.5287.1813510360.divmod.xquotient.12@top>
References: <CAFycZ9f2pac0in6tdVUvQhnHP4zLX-waKhrT1hPmo_U1E4p5ag@mail.gmail.com>
 <20140519155912.5287.1813510360.divmod.xquotient.12@top>
Message-ID: <CAFN1edoXSZobgyGn0Gv8MkyP_KRVdTEE9sG-yae=9BPY=ZxnSg@mail.gmail.com>

It seems like a fairly common idiom to setup some sort of TCP server
with a kernel selected port
via an endpoint descriptor like this:

def getListeningPort(listeningPort):
    address = listeningPort.getHost()
    endpointDesc = convertAddressToEndpointDesc(address)
    sendAnnouncement(endpointDesc)

endpoint = serverFromString(self.reactor, 'tcp:0')
d = endpoint.listen(MyProtocolFactory())
d.addCallback(getListeningPort)

...
later on a remote client receives the endpoint string and uses it to connect:

endpointDesc = getAnnouncement()
endpoint = clientFromString(endpointDesc)
endpoint.connect(MyFactory())

For the Tor Hidden Services endpoint (work in progress) I've
implemented IAddress and IListeningPort:
https://github.com/david415/txtorcon/blob/endpoint_parser_plugin-rewrite4/txtorcon/torconfig.py#L106-L160

Creating a Tor Hidden Service endpoint without specifying a "hidden
services directory" containing an rsa private key and a hostname file
causes the endpoint object to create a new Tor Hidden Service. This is
conceptually similar to the case where we create a TCP server endpoint
with the port number set to zero. In both cases the fired
IListeningPort implementation should tell us what we need to know in
order to construct a client endpoint descriptor string.

I was thinking that it would be great if the process of creating these
endpoint strings from an IAddress implementation should/could be
endpoint agnostic. It should work even if the endpoint descriptors
have no notion of hosts or ports... For protocols like TCP it is
non-obvious how to do this correctly because the host cannot be
correctly guessed in the face of NAT routers etc... as mentioned here:
https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.ITransport.html#getPeer

This is why the above TCP example is flawed; however the equivalent
example with the Tor endpoints will work perfectly and is not affected
by NAT routers:
https://github.com/david415/txsocksx/blob/tor_deferred_dispatcher/examples/tor-dispatch-onion.py#L39-L63

The TorOnionAddress has all the information it needs to create a Tor
client endpoint... except for the endpoint type identifier and a set
of rules from constructing endpoint strings... which perhaps the
TorOnionAddress should get from the TCPHiddenServiceEndpointParser?
Perhaps if the user were to pass in more information to the server
endpoint object then the TCP IListeningPort implementation would be
able to correctly produce a TCP client endpoint strings. Or maybe this
just doesn't make sense for protocols like TCP.



On Mon, May 19, 2014 at 3:59 PM,  <exarkun at twistedmatrix.com> wrote:
> On 06:27 am, adi at roiban.ro wrote:
>>
>> This email is bases on comment from
>> https://twistedmatrix.com/trac/ticket/5999
>>
>> I fail to see the reason why SSHTransportAddress exist and why would
>> anyone need It.
>
>
> Here are a couple ideas.
>
> You have a library that accepts a connection and does some things with it.
> You want to log the operations that are taken using the connection and you
> want to include information in those logs about which connection you did
> things with.  You choose to use the addresses of the local and remote sides
> of the connection to identify it.
>
> You have a library that accepts a connection and wants to be able to set up
> another connection like it to the same remote address.  You get the remote
> address using the transport's `getPeer` method.
>
> Though you may have established the SSH connection over a TCP/IPv4
> connection, neither of these uses can be accomplished if the SSH connection,
> when treated as a transport, merely uses an `IPv4Address` instance to
> represent the address of the remote end of the connection. Using
> `IPv4Address` gives you no way to differentiate between an SSH connection
> running over a TCP/IPv4 connection and a plain TCP/IPv4 connection without
> SSH.
>
> In practice, `SSHTransportAddress` is missing the information you would need
> to implement either of these scenarios.  However, that seems more like an
> argument for adding the missing information to that address type rather than
> discarding the address type.
>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From glyph at twistedmatrix.com  Tue May 20 02:37:37 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 20 May 2014 01:37:37 -0700
Subject: [Twisted-Python] [ANN] thimble 0.1.0
In-Reply-To: <CAE_Hg6aJZDTKo5gFoh17hie7RgN+Ho1ZGwvRqAbuZes3jtooDA@mail.gmail.com>
References: <CAE_Hg6YPbNspurj2o51GPc_2xORxbcx8qhm_M4eA9uxc1j3Aig@mail.gmail.com>
 <B80233DA-5B02-4532-B90A-326482008B30@twistedmatrix.com>
 <CAE_Hg6aJZDTKo5gFoh17hie7RgN+Ho1ZGwvRqAbuZes3jtooDA@mail.gmail.com>
Message-ID: <05E06172-62FC-4834-B283-EA1C9504F7F5@twistedmatrix.com>


On May 19, 2014, at 2:29 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> On Mon, May 19, 2014 at 12:19 AM, Glyph <glyph at twistedmatrix.com> wrote:
> I think this is the sort of thing that should move into Twisted itself, eventually.  Thoughts?
> 
> I agree! There's a few things I'd like to work out with the freedom to break things of a v0.x.x semver version before that happens though.

Oh, definitely.  Hence: eventually.

> Notably, this thing assumes that all attribute accesses are thread-safe and synchronous. That's often true, but hey, this is Python, so you get to do whatever you want when you access an attribute (and @property even makes it easy to do so). Also because right now I'm suggesting a pool with a singled thread for synchronized access to an object that isn't thread safe; especially if you *know* the object isn't thread safe you probably want something to take care of attribute access too :-)

Just write a decorator that programmatically verifies that everything about the attribute it's decorating is thread-safe.  Simple!  ;-)

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140520/4ec1a3b0/attachment.html>

From glyph at twistedmatrix.com  Tue May 20 03:27:08 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 20 May 2014 02:27:08 -0700
Subject: [Twisted-Python] IOpenSSLClientConnectionCreator was
	ContextFactory,
	now it's IOpenSSLClientConnectionCreator not ContextFactory
In-Reply-To: <20140519182414.5287.1008274228.divmod.xquotient.40@top>
References: <20140519182414.5287.1008274228.divmod.xquotient.40@top>
Message-ID: <A7832E9B-6B12-4B54-8AC0-616BBBA9DB83@twistedmatrix.com>


On May 19, 2014, at 11:24 AM, exarkun at twistedmatrix.com wrote:

> Prior to #7098, these were things that implemented a `getContext` method that returned an `OpenSSL.SSL.Context` instance.

I should note that this was poorly documented everywhere (in fact, one of the main things I noticed when working on the cluster of problems related to #7098 was that nothing really explained what a "context factory" was).

> Subsequent to #7098, these are now *either* that or an object that provides `IOpenSSLClientConnectionCreator`.

Yes, this is correct.

> However, other parts of Twisted itself were not updated.  For example, the layers that sit in between `twisted.protocols.tls` and `twisted.web.client.Agent` weren't touched much.

Are you referring to anything other than SSL4ClientEndpoint?

> `SSL4ClientEndpoint`, for example, still documents its `sslContextFactory` as "SSL Configuration information as an instance of L{twisted.internet.ssl.ContextFactory}.".  And, somewhat insanely I think, `IReactorSSL.connectSSL` still says "@param contextFactory: a L{twisted.internet.ssl.ClientContextFactory} object.".

"Insanely" might be overstating it.  Incorrectly, maybe :-).

> Merely from a documentation standpoint, this seems suboptimal.  From a compatibility standpoint...  Well, it seems incompatible to me.  Perhaps this is an instance where the compatibility policy can be broken (though really that's academic since 14.0.0 has already been released, the policy has been broken already) but I don't recall any explicit discussion about a decision to do this.

At the time, I thought really hard about how to perform this change in a compatible way, and I thought I'd come up with something that was in line with the compatibility policy.  Apparently my reviewer agreed.  I even thought I discussed it with you, since you were sitting right there ;-).  Perhaps it was someone else at the sprint.  Upon reflection though, I think you're right, and it is technically incompatible.  I only say "technically" because I don't think third-party implementations exist, not because this type of incompatibility should be OK or the policy should be changed.

My reasoning went like this:

If you can import the new interface to declare that you implement it, then of course your contextFactory expects to have the new methods declared on it.  So there's no possibility of passing in an object which does not provide that interface and getting a surprise AttributeError.

If you want to work with older versions of Twisted and span the compatibility gap, then it's easy enough to determine if the new interface is available.

To be clear, the case I didn't consider, the thing that makes this an incompatible change, is that if you have a new version of Twisted, where the new interfaces are available, and your shiny new IOpenSSLClientConnectionCreator provides them, but does not provide the old-style "getContext", then a perfectly valid 3rd-party implementation of IReactorSSL will unconditionally call getContext on your fancy new object and explode.

In other words, IReactorSSL has changed incompatibly, because the type of one of its arguments has changed incompatibly.

If I had done this only to, for example, SSL4ClientEndpoint's constructor, I think it actually would have been a compatible change.  In order to provoke this behavior in that case, you'd need to monkeypatch SSL4ClientEndpoint itself.

> I *hope* and suspect there won't be much fall-out from this change considering it's hard to implement TLS and as far as I know there are no third-party implementations of `IReactorSSL` (GNUTLS came to mind but they have their own incompatible interface afaict).  In other words, maybe we'll get lucky this time.

I did check various code-search sites to see how folks were using it, and... yes, basically nobody has implemented IReactorSSL, as far as I can tell.  I did learn that a lot of people vendor in Twisted though: do you know Twisted 10.2 apparently is in Chromium's build tools directory?  Anyway, if someone had actually implemented it, this problem might have occurred to me earlier.

If we were going to make this mistake and learn from it, then this seems like the ideal place to have done so.

> I wrote this email instead of filing tickets about the documentation problems because doing the latter was implicit acknowledgement that this incompatible change is okay.  Having written the email now, I see there's probably no going back, regardless.  Maybe we can learn something from this incident and avoid repeating it with a more popular interface, though.

So, just from a technical perspective, how could we have avoided this?

If we were to go with the suggested 'version' attribute on interfaces, I think that we would still have basically the same problem.  We could increment IReactorSSL to version 2, but that still obliges the caller with the new-style context factory to always check that attribute before attempting to call it. That seems like a pyrrhic victory; satisfying our currently stated victory condition without actually satisfying the goal of not breaking software that implements IReactorSSL.  In fairness, it does, at least, give the developer of the offending code a way to fix it, but the developer of the offending code (the one that calls IReactorSSL) is unlikely to be the one who notices it.

We could have declared a new interface (Or IReactorSSL version 2) with a new method, connectSSL_Ex, which had the new signature.  In that case, at least, you'd be aware that you were calling a new method that might not be available on older Twisted versions and might think to check the presence of IReactorSSL_2 or IReactorSSL.version.

I'd say we could have only changed SSL4ClientEndpoint/SSL4ServerEndpoint and just planned to deprecate IReactorSSL entirely, but that would have left 'ITLSTransport' in the lurch, using crappy old interfaces, unless we implemented generalized protocol switching.

This still leaves me scratching my head as to how I could have noticed the change was incompatible in time, though, which is possibly the more interesting question.  I guess I do read CompatibilityPolicy from time to time so this suggestion might have worked:

> We could probably add a description of this particular kind of incompatible change to the `CompatibilityPolicy` wiki page.  If reviewers read that page, then they'll know to watch out for it.

"Don't change the type of any public interface's arguments; for example: ..."?

I was going to say something about how we might want certain interfaces to not allow 3rd-party implementations, except there are plenty of 3rd-party places that IReactorSSL is imported... they just happen to inherit our existing implementation of the interface, because it's the one everyone wants anyway.

> And of course (assuming we're committed to this direction, which we seem to be) we need to fix the rest of the "contextFactory" documentation throughout Twisted.  I'll go file one ticket related to that now...

Yes, this seems like some necessary follow-up work; reverting at this point would be pretty pointless.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140520/3e874e2c/attachment-0001.html>

From lacrima.maxim at gmail.com  Tue May 20 03:40:51 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Tue, 20 May 2014 12:40:51 +0300
Subject: [Twisted-Python] Porting Twisted to Python 3.
Message-ID: <CAKef57PD5my4d6ajCEJtz+Ud9KvFCxyw8EH=Qpz9ed5X7D+MtQ@mail.gmail.com>

Hello!

I can see that Python 3 support in Twisted is incomplete. I was able to
`pip install twisted` on Python 3, but I couldn't run a simple example
program using Twisted Agent.

A simple `from twisted.web.client import Agent` causes `ImportError: No
module named 'twisted.python.systemd'`

I would like to help in porting Twisted to Python 3. I have a couple of
questions.

My initial idea was to run some twisted tests with trial and start from
there. But it looks like trial is not ported to python3 and also I think
many tests themselves are not python3 aware.

So what is a recommended workflow?

As for Twisted Agent... URL and its parsed components are now bytes, but
`Agent._getEndpoint` operates on str, and so do other functions
(`isIPAddress`, `isIPv6Address`), causing type and other errors.

I would like to fix this (at least to try), but I need some guidance.

Thank you.

-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140520/9425453f/attachment.html>

From itamar at itamarst.org  Tue May 20 04:50:13 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 20 May 2014 06:50:13 -0400
Subject: [Twisted-Python] Porting Twisted to Python 3.
In-Reply-To: <CAKef57PD5my4d6ajCEJtz+Ud9KvFCxyw8EH=Qpz9ed5X7D+MtQ@mail.gmail.com>
References: <CAKef57PD5my4d6ajCEJtz+Ud9KvFCxyw8EH=Qpz9ed5X7D+MtQ@mail.gmail.com>
Message-ID: <537B3365.9060506@itamarst.org>

On 05/20/2014 05:40 AM, Maxim Lacrima wrote:
> Hello!
>
> I can see that Python 3 support in Twisted is incomplete. I was able 
> to `pip install twisted` on Python 3, but I couldn't run a simple 
> example program using Twisted Agent.
>
> A simple `from twisted.web.client import Agent` causes `ImportError: 
> No module named 'twisted.python.systemd'`
>
> I would like to help in porting Twisted to Python 3. I have a couple 
> of questions.
>
> My initial idea was to run some twisted tests with trial and start 
> from there. But it looks like trial is not ported to python3 and also 
> I think many tests themselves are not python3 aware.

The trial command-line tool is not ported, but the library part is.

admin/run-python3-tests 
<https://twistedmatrix.com/trac/browser/trunk/admin/run-python3-tests> 
will run Twisted's tests on Python 3.

> So what is a recommended workflow?
>

See https://twistedmatrix.com/trac/wiki/Plan/Python3

> As for Twisted Agent... URL and its parsed components are now bytes, 
> but `Agent._getEndpoint` operates on str, and so do other functions 
> (`isIPAddress`, `isIPv6Address`), causing type and other errors.

Probably Agent would probably need to be modified to explicitly take 
bytes on both Python 2 and Python 3, since URLs are bytes.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140520/b83a1865/attachment.html>

From lacrima.maxim at gmail.com  Tue May 20 05:56:51 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Tue, 20 May 2014 14:56:51 +0300
Subject: [Twisted-Python] Porting Twisted to Python 3.
In-Reply-To: <537B3365.9060506@itamarst.org>
References: <CAKef57PD5my4d6ajCEJtz+Ud9KvFCxyw8EH=Qpz9ed5X7D+MtQ@mail.gmail.com>
 <537B3365.9060506@itamarst.org>
Message-ID: <CAKef57PSiMy2+rB+yXgg7bMUC=MqDHDz4yiMn5zd3WvB+EtteA@mail.gmail.com>

Thanks. That wiki page has enough info to get started.


On 20 May 2014 13:50, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

>  On 05/20/2014 05:40 AM, Maxim Lacrima wrote:
>
> Hello!
>
>  I can see that Python 3 support in Twisted is incomplete. I was able to
> `pip install twisted` on Python 3, but I couldn't run a simple example
> program using Twisted Agent.
>
>  A simple `from twisted.web.client import Agent` causes `ImportError: No
> module named 'twisted.python.systemd'`
>
>  I would like to help in porting Twisted to Python 3. I have a couple of
> questions.
>
>  My initial idea was to run some twisted tests with trial and start from
> there. But it looks like trial is not ported to python3 and also I think
> many tests themselves are not python3 aware.
>
>
> The trial command-line tool is not ported, but the library part is.
>
> admin/run-python3-tests<https://twistedmatrix.com/trac/browser/trunk/admin/run-python3-tests>will run Twisted's tests on Python 3.
>
>
>  So what is a recommended workflow?
>
>
> See https://twistedmatrix.com/trac/wiki/Plan/Python3
>
>
>  As for Twisted Agent... URL and its parsed components are now bytes, but
> `Agent._getEndpoint` operates on str, and so do other functions
> (`isIPAddress`, `isIPv6Address`), causing type and other errors.
>
>
> Probably Agent would probably need to be modified to explicitly take bytes
> on both Python 2 and Python 3, since URLs are bytes.
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140520/a1279def/attachment.html>

From exarkun at twistedmatrix.com  Tue May 20 06:30:11 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 20 May 2014 12:30:11 -0000
Subject: [Twisted-Python] Porting Twisted to Python 3.
In-Reply-To: <537B3365.9060506@itamarst.org>
References: <CAKef57PD5my4d6ajCEJtz+Ud9KvFCxyw8EH=Qpz9ed5X7D+MtQ@mail.gmail.com>
 <537B3365.9060506@itamarst.org>
Message-ID: <20140520123011.5287.251329237.divmod.xquotient.44@top>

On 10:50 am, itamar at itamarst.org wrote:
>>So what is a recommended workflow?
>
>See https://twistedmatrix.com/trac/wiki/Plan/Python3

Something missing from that page is the very helpful tool that someone 
(sorry, I forget who) developed at PyCon for rendering the module 
dependency graph including information about what modules have already 
been ported to Python 3.

This tool is pretty helpful because, for the most part, you *have* to 
start at "leaves" in the unported part of the graph.

Does anyone know who was working on that tool and whether it's online 
somewhere?

Jean-Paul


From lacrima.maxim at gmail.com  Thu May 22 09:54:46 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Thu, 22 May 2014 18:54:46 +0300
Subject: [Twisted-Python] Porting Twisted to Python 3.
In-Reply-To: <20140520123011.5287.251329237.divmod.xquotient.44@top>
References: <CAKef57PD5my4d6ajCEJtz+Ud9KvFCxyw8EH=Qpz9ed5X7D+MtQ@mail.gmail.com>
 <537B3365.9060506@itamarst.org>
 <20140520123011.5287.251329237.divmod.xquotient.44@top>
Message-ID: <CAKef57NgwHrCK8s6yozSEgG1QrHPoxs+s75N1vYq2fO_mT2Hog@mail.gmail.com>

Hi Jean-Paul,

Thanks for your advice.

Since nobody suggested a tool I created one myself, and here is a "graph"
for `twisted.web.client`: http://jsfiddle.net/gu8DX/embedded/result/ . It's
not a completely correct graph (because a node will miss edges to modules,
that have already been imported earlier in another subtree), but anyway it
shows all "leaves", so it's easy to pick what to work on. From the graph I
can see that `twisted.web.iweb`, `twisted.web.http`,
`twisted.internet._sslverify`, `twisted.web.error` and
`twisted.python.win32` are "almost ported". I will skip win32. So if I am
correct I can start on remaining four modules, or to write tests for
`Agent` directly and see how it goes.

Thank you.




On 20 May 2014 15:30, <exarkun at twistedmatrix.com> wrote:

> On 10:50 am, itamar at itamarst.org wrote:
>
>> So what is a recommended workflow?
>>>
>>
>> See https://twistedmatrix.com/trac/wiki/Plan/Python3
>>
>
> Something missing from that page is the very helpful tool that someone
> (sorry, I forget who) developed at PyCon for rendering the module
> dependency graph including information about what modules have already been
> ported to Python 3.
>
> This tool is pretty helpful because, for the most part, you *have* to
> start at "leaves" in the unported part of the graph.
>
> Does anyone know who was working on that tool and whether it's online
> somewhere?
>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140522/088b50ce/attachment.html>

From conrad.p.dean at gmail.com  Thu May 22 12:29:21 2014
From: conrad.p.dean at gmail.com (Conrad Dean)
Date: Thu, 22 May 2014 13:29:21 -0500
Subject: [Twisted-Python] Porting Twisted to Python 3.
In-Reply-To: <CAKef57NgwHrCK8s6yozSEgG1QrHPoxs+s75N1vYq2fO_mT2Hog@mail.gmail.com>
References: <CAKef57PD5my4d6ajCEJtz+Ud9KvFCxyw8EH=Qpz9ed5X7D+MtQ@mail.gmail.com>
 <537B3365.9060506@itamarst.org>
 <20140520123011.5287.251329237.divmod.xquotient.44@top>
 <CAKef57NgwHrCK8s6yozSEgG1QrHPoxs+s75N1vYq2fO_mT2Hog@mail.gmail.com>
Message-ID: <CAGR-8zmkPfRrakxKH=U-nDQ-yHjTsDbXBGDkswFbkj3Q-WwfYQ@mail.gmail.com>

Does the graph take into account dependencies of the tests as well?  A few
months ago I started on what I thought was a leaf, but its tests had
dependences on other modules that forced me to look at porting other
modules first.


On Thu, May 22, 2014 at 10:54 AM, Maxim Lacrima <lacrima.maxim at gmail.com>wrote:

> Hi Jean-Paul,
>
> Thanks for your advice.
>
> Since nobody suggested a tool I created one myself, and here is a "graph"
> for `twisted.web.client`: http://jsfiddle.net/gu8DX/embedded/result/ .
> It's not a completely correct graph (because a node will miss edges to
> modules, that have already been imported earlier in another subtree), but
> anyway it shows all "leaves", so it's easy to pick what to work on. From
> the graph I can see that `twisted.web.iweb`, `twisted.web.http`,
> `twisted.internet._sslverify`, `twisted.web.error` and
> `twisted.python.win32` are "almost ported". I will skip win32. So if I am
> correct I can start on remaining four modules, or to write tests for
> `Agent` directly and see how it goes.
>
> Thank you.
>
>
>
>
> On 20 May 2014 15:30, <exarkun at twistedmatrix.com> wrote:
>
>> On 10:50 am, itamar at itamarst.org wrote:
>>
>>> So what is a recommended workflow?
>>>>
>>>
>>> See https://twistedmatrix.com/trac/wiki/Plan/Python3
>>>
>>
>> Something missing from that page is the very helpful tool that someone
>> (sorry, I forget who) developed at PyCon for rendering the module
>> dependency graph including information about what modules have already been
>> ported to Python 3.
>>
>> This tool is pretty helpful because, for the most part, you *have* to
>> start at "leaves" in the unported part of the graph.
>>
>> Does anyone know who was working on that tool and whether it's online
>> somewhere?
>>
>> Jean-Paul
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> --
> Regards,
> Maxim
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140522/da5ad7a3/attachment.html>

From exarkun at twistedmatrix.com  Fri May 23 07:11:35 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 23 May 2014 13:11:35 -0000
Subject: [Twisted-Python] Status of trac upgrade
Message-ID: <20140523131135.5287.1046664963.divmod.xquotient.53@top>

Hello,

I was just wondering what the current status of the effort to upgrade 
trac on twistedmatrix.com is.

Thanks,
Jean-Paul


From killiands at gmail.com  Fri May 23 07:49:47 2014
From: killiands at gmail.com (Killian De Smedt)
Date: Fri, 23 May 2014 15:49:47 +0200
Subject: [Twisted-Python] doWrite called on a twisted.internet.unix.Port
In-Reply-To: <CAG5JYFvmuJyditu9HKueWKnCg4N92QToYn=BovzzNugOfX2mwA@mail.gmail.com>
References: <CAG5JYFtZf_4y6+V8Opc1tQqYMjD104aCYRraC3YQcM8BgmBZwQ@mail.gmail.com>
 <20140507141123.12809.1006896501.divmod.xquotient.8@top>
 <CAG5JYFvmuJyditu9HKueWKnCg4N92QToYn=BovzzNugOfX2mwA@mail.gmail.com>
Message-ID: <CAG5JYFt8NnyYuZOq6SRegYiCToAce9PKAAupEZn5AApzCkUGvg@mail.gmail.com>

Hi Exarkun,

I tried hacking the addWriter method as follows:
        add_writer_orig = reactor.__class__.addWriter #@UndefinedVariable
        def my_add_writer(self, writer):
            logging.warn(writer.__class__.__mro__)
            logging.warn(''.join(traceback.format_stack()))
            if isinstance(writer,Port):
                raise Exception("Shouldn't add a port as a writer")
            return add_writer_orig(self, writer)
        reactor.addWriter = types.MethodType(my_add_writer,reactor)
But I actually got nothing out of it. I also noticed this backtrace (or
similar) is sometimes with a Udp.Port, not only a Unix.Port:
Unhandled Error
Traceback (most recent call last):
  File "/path/to/twisted.zip/twisted/python/log.py", line 88, in
callWithLogger
  File "/path/to/twisted.zip/twisted/python/log.py", line 73, in
callWithContext
  File "/path/to/twisted.zip/twisted/python/context.py", line 118, in
callWithContext
  File "/path/to/twisted.zip/twisted/python/context.py", line 81, in
callWithContext
--- <exception caught here> ---
  File "/path/to/twisted.zip/twisted/internet/posixbase.py", line 619, in
_doReadOrWrite
  File "/path/to/twisted.zip/twisted/internet/base.py", line 1117, in
doWrite
exceptions.RuntimeError: doWrite called on a twisted.internet.udp.Port

 Any other ideas how I could find out the culprit?

Thank you,

Killian


On 7 May 2014 17:09, Killian De Smedt <killiands at gmail.com> wrote:

> Hi Exarkun,
>
> Thanks for the quick response. I should have specified those things
> immediately.
> I manually merged the UDP ipv6 branch in the trunk somewhere in august and
> used that one, the version number is reported as [twisted, version 13.1.0].
> The platform is always centos though the centos version might range from
> 5.x to 6.x, 32 bit, but most of the time it runs on a centos 5.2
> installation (kernel on my working machine is 2.6.18). Python is 2.7.1 .
>  I use the default reactor which should come down to the epoll one.
>
> I'll try to hack up the addwriter, it shouldn't be that hard to for just
> that application.
>
> Thank you,
>
> Killian
>
>
> On 7 May 2014 16:11, <exarkun at twistedmatrix.com> wrote:
>
>> On 01:47 pm, killiands at gmail.com wrote:
>>
>>> Hello everybody,
>>>
>>> I sometimes see the following error logged by a twisted application, it
>>> only happens sporadically and I cannot even reproduce when trying to
>>> re-execute the exact sequence of those failures. So giving an SSCCE is
>>> quite impossible for now (sorry). Given this trace it's also hard to find
>>> what was actually called/executed.
>>>
>>
>> I've seen something like this with a somewhat old version of Twisted and
>> a custom reactor.  I never tracked down the cause.
>>
>> What version of Twisted are you using, what platform are you on, and what
>> reactor are you using?
>>
>> Another useful bit of debug information would be to hack up the reactor's
>> `addWriter` method to do a check of the argument.  The call stack at *that*
>> point (when the argument is a Port) is more interesting than the call stack
>> at the point where `doWrite` is called.
>>
>> Jean-Paul
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> --
> Killian De Smedt
> mobile: +32 486/825 951
> mail: killiands at gmail.com
>



-- 
Killian De Smedt
mobile: +32 486/825 951
mail: killiands at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140523/e4571712/attachment.html>

From exarkun at twistedmatrix.com  Fri May 23 08:56:27 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 23 May 2014 14:56:27 -0000
Subject: [Twisted-Python] doWrite called on a twisted.internet.unix.Port
In-Reply-To: <CAG5JYFt8NnyYuZOq6SRegYiCToAce9PKAAupEZn5AApzCkUGvg@mail.gmail.com>
References: <CAG5JYFtZf_4y6+V8Opc1tQqYMjD104aCYRraC3YQcM8BgmBZwQ@mail.gmail.com>
 <20140507141123.12809.1006896501.divmod.xquotient.8@top>
 <CAG5JYFvmuJyditu9HKueWKnCg4N92QToYn=BovzzNugOfX2mwA@mail.gmail.com>
 <CAG5JYFt8NnyYuZOq6SRegYiCToAce9PKAAupEZn5AApzCkUGvg@mail.gmail.com>
Message-ID: <20140523145627.5287.2007686315.divmod.xquotient.70@top>

On 01:49 pm, killiands at gmail.com wrote:
>Hi Exarkun,
>
>I tried hacking the addWriter method as follows:
>        add_writer_orig = reactor.__class__.addWriter 
>#@UndefinedVariable
>        def my_add_writer(self, writer):
>            logging.warn(writer.__class__.__mro__)
>            logging.warn(''.join(traceback.format_stack()))
>            if isinstance(writer,Port):
>                raise Exception("Shouldn't add a port as a writer")
>            return add_writer_orig(self, writer)
>        reactor.addWriter = types.MethodType(my_add_writer,reactor)
>But I actually got nothing out of it.

This seems alright to me.  I'm not sure why it hasn't revealed any extra 
information.  Did you test it in the trivial case?  For example, set it 
up and then do:

    port = reactor.listenTCP(0, Factory.forProtocol(Protocol))
    port.startWriting()

If you don't see anything logged then there's something wrong with the 
instrumentation.

Here's a slightly different version.  I don't see any reason why it 
would work if your version doesn't, it's basically doing the same thing. 
Maybe there's some obscure detail that prevents your version from 
working, though.

    from __future__ import print_function

    from traceback import print_stack

    from twisted.internet import reactor
    from twisted.internet.interfaces import IListeningPort
    from twisted.internet.protocol import Protocol, Factory

    def addWriter(writer):
        if IListeningPort.providedBy(writer):
            print("Adding a listening port as a writer: ", writer)
            print_stack()
        return reactor.__class__.addWriter(reactor, writer)

    reactor.addWriter = addWriter

    # Demonstrates that it works in the trivial case.
    port = reactor.listenTCP(0, Factory.forProtocol(Protocol))
    port.startWriting()

Another scenario that occurs to me is that the port itself is never 
added as a writer.  Instead, some other object that is actually supposed 
to write sometimes is added.  Then, the file descriptor for that object 
is closed.  Then, a new port is created and is accidentally assigned the 
same integer as its file descriptor as the one that just got closed. 
Plus, you're using a reactor that doesn't notice when file descriptors 
are closed (this is a complex and subtle corner case and the handling 
varies between reactors because the underlying platform behavior varies 
and it's really difficult, if not impossible, to paper over differences 
in this area due to missing platform services).

Another question about your environment, does the process that is 
affected by this error ever launch any child processes or fork for any 
other reason (having duplicates of the file descriptor, which often 
happens when you fork, is one way this issue can affect the epoll 
reactor)?
Another debug strategy might be to strace all file-descriptor related 
syscalls and see if you can catch an integer being reused and then being 
subject to this error.  Logging the port's file descriptor in the port's 
doWrite might help with this too.

Jean-Paul
>I also noticed this backtrace (or
>similar) is sometimes with a Udp.Port, not only a Unix.Port:
>Unhandled Error
>Traceback (most recent call last):
>  File "/path/to/twisted.zip/twisted/python/log.py", line 88, in
>callWithLogger
>  File "/path/to/twisted.zip/twisted/python/log.py", line 73, in
>callWithContext
>  File "/path/to/twisted.zip/twisted/python/context.py", line 118, in
>callWithContext
>  File "/path/to/twisted.zip/twisted/python/context.py", line 81, in
>callWithContext
>--- <exception caught here> ---
>  File "/path/to/twisted.zip/twisted/internet/posixbase.py", line 619, 
>in
>_doReadOrWrite
>  File "/path/to/twisted.zip/twisted/internet/base.py", line 1117, in
>doWrite
>exceptions.RuntimeError: doWrite called on a twisted.internet.udp.Port
>
>Any other ideas how I could find out the culprit?
>
>Thank you,
>
>Killian
>
>
>On 7 May 2014 17:09, Killian De Smedt <killiands at gmail.com> wrote:
>>Hi Exarkun,
>>
>>Thanks for the quick response. I should have specified those things
>>immediately.
>>I manually merged the UDP ipv6 branch in the trunk somewhere in august 
>>and
>>used that one, the version number is reported as [twisted, version 
>>13.1.0].
>>The platform is always centos though the centos version might range 
>>from
>>5.x to 6.x, 32 bit, but most of the time it runs on a centos 5.2
>>installation (kernel on my working machine is 2.6.18). Python is 2.7.1 
>>.
>>  I use the default reactor which should come down to the epoll one.
>>
>>I'll try to hack up the addwriter, it shouldn't be that hard to for 
>>just
>>that application.
>>
>>Thank you,
>>
>>Killian
>>
>>
>>On 7 May 2014 16:11, <exarkun at twistedmatrix.com> wrote:
>>>On 01:47 pm, killiands at gmail.com wrote:
>>>>Hello everybody,
>>>>
>>>>I sometimes see the following error logged by a twisted application, 
>>>>it
>>>>only happens sporadically and I cannot even reproduce when trying to
>>>>re-execute the exact sequence of those failures. So giving an SSCCE 
>>>>is
>>>>quite impossible for now (sorry). Given this trace it's also hard to 
>>>>find
>>>>what was actually called/executed.
>>>
>>>I've seen something like this with a somewhat old version of Twisted 
>>>and
>>>a custom reactor.  I never tracked down the cause.
>>>
>>>What version of Twisted are you using, what platform are you on, and 
>>>what
>>>reactor are you using?
>>>
>>>Another useful bit of debug information would be to hack up the 
>>>reactor's
>>>`addWriter` method to do a check of the argument.  The call stack at 
>>>*that*
>>>point (when the argument is a Port) is more interesting than the call 
>>>stack
>>>at the point where `doWrite` is called.
>>>
>>>Jean-Paul
>>>
>>>_______________________________________________
>>>Twisted-Python mailing list
>>>Twisted-Python at twistedmatrix.com
>>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>>--
>>Killian De Smedt
>>mobile: +32 486/825 951
>>mail: killiands at gmail.com
>
>
>
>--
>Killian De Smedt
>mobile: +32 486/825 951
>mail: killiands at gmail.com


From trac at twistedmatrix.com  Sun May 25 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 25 May 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1400997915.99.2566524424229559521@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140525/f1664a70/attachment.html>

From jonas.brunsgaard at gmail.com  Mon May 26 06:27:48 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Mon, 26 May 2014 14:27:48 +0200
Subject: [Twisted-Python] Code question - semantic meaning of
	IServiceCollection(parent, parent)
Message-ID: <CACVXvXpis9_WiS-+Czv-sVkfV_uhDqPkGpf30qqrGXoAiXVONA@mail.gmail.com>

Hello all

Will someone explain to me what happens when you call an Interface
with arguments, and why the same argument twice?

My problem is to understand the semantics of the line

    parent = IServiceCollection(parent, parent)

part of

    def setServiceParent(self, parent):
        if self.parent is not None:
            self.disownServiceParent()
        parent = IServiceCollection(parent, parent)
        self.parent = parent
        self.parent.addService(self)

in twisted.application.service

Thanks in advance.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140526/e541b8d8/attachment.html>

From dustin at v.igoro.us  Mon May 26 06:57:00 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Mon, 26 May 2014 08:57:00 -0400
Subject: [Twisted-Python] Code question - semantic meaning of
 IServiceCollection(parent, parent)
In-Reply-To: <CACVXvXpis9_WiS-+Czv-sVkfV_uhDqPkGpf30qqrGXoAiXVONA@mail.gmail.com>
References: <CACVXvXpis9_WiS-+Czv-sVkfV_uhDqPkGpf30qqrGXoAiXVONA@mail.gmail.com>
Message-ID: <CAJtE5vSS2ZUCG5O=-b4FjT47UNaAb-+_j8p09w+pJUvwAsCh1A@mail.gmail.com>

It's certainly not an obvious syntax, but it "casts" the first
argument into a provider of the interface, defaulting to the second
argument if this is not possible.

For example, if `parent` isn't a provider of `IServiceCollection`, but
there's an adapter registered to covert to `IServiceCollection` from
`type(parent)`, then that adapter will be called.  If there's no such
adapter, the cast will return `parent`.

Dustin

On Mon, May 26, 2014 at 8:27 AM, Jonas Brunsgaard
<jonas.brunsgaard at gmail.com> wrote:
> Hello all
>
> Will someone explain to me what happens when you call an Interface with
> arguments, and why the same argument twice?
>
>
>
> My problem is to understand the semantics of the line
>
>     parent = IServiceCollection(parent, parent)
>
>
>
> part of
>
>     def setServiceParent(self, parent):
>
>         if self.parent is not None:
>
>             self.disownServiceParent()
>         parent = IServiceCollection(parent, parent)
>
>         self.parent = parent
>         self.parent.addService(self)
>
>
>
> in twisted.application.service
>
> Thanks in advance.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From full_access at bk.ru  Mon May 26 08:12:36 2014
From: full_access at bk.ru (Merovingian)
Date: Mon, 26 May 2014 18:12:36 +0400
Subject: [Twisted-Python] Importing reactor changes PATHs?
Message-ID: <53834BD4.6010902@bk.ru>

Hello,

Python 2.7.5 32 bit on Windows.
Twisted 13.2.0

     import ctypes
     dll = ctypes.CDLL("ssleay32.dll")

Loads dll from the current folder

     import ctypes
     from twisted.internet import reactor
     dll = ctypes.CDLL("ssleay32.dll")

Loads dll from Python27\lib\site-packages\OpenSSL
How so? How can I prevent reactor from changing the PATH (or whatever 
it's changing)?



From msc at contact.de  Mon May 26 08:26:10 2014
From: msc at contact.de (Michael Schlenker)
Date: Mon, 26 May 2014 16:26:10 +0200
Subject: [Twisted-Python] Importing reactor changes PATHs?
In-Reply-To: <53834BD4.6010902@bk.ru>
References: <53834BD4.6010902@bk.ru>
Message-ID: <53834F02.6030209@contact.de>

Am 26.05.2014 16:12, schrieb Merovingian:
> Hello,
> 
> Python 2.7.5 32 bit on Windows.
> Twisted 13.2.0
> 
>     import ctypes
>     dll = ctypes.CDLL("ssleay32.dll")
> 
> Loads dll from the current folder
> 
>     import ctypes
>     from twisted.internet import reactor
>     dll = ctypes.CDLL("ssleay32.dll")
> 
> Loads dll from Python27\lib\site-packages\OpenSSL
> How so? How can I prevent reactor from changing the PATH (or whatever
> it's changing)?

It might not be PATH.

There are a ton of options, e.g. the Manifest in use, Application
configuration files, registry settings or code used in Python to change
the ActivationContext when loading things.

In addition, you might already have loaded the 'ssleay32.dll' in the
reactor call, so the second call doesn't really load it anymore.

In fact, 'twisted.internet import reactor' does just that, it loads its
own copy of 'ssleay32.dll', and as your ctypes call does not specifiy an
absolute path or sets up any activation context, you get the already
loaded DLL.

Michael

-- 
Michael Schlenker
Software Architect

CONTACT Software GmbH           Tel.:   +49 (421) 20153-80
Wiener Stra?e 1-3               Fax:    +49 (421) 20153-41
28359 Bremen
http://www.contact.de/          E-Mail: msc at contact.de

Sitz der Gesellschaft: Bremen
Gesch?ftsf?hrer: Karl Heinz Zachries, Ralf Holtgrefe
Eingetragen im Handelsregister des Amtsgerichts Bremen unter HRB 13215


From jonas.brunsgaard at gmail.com  Mon May 26 17:23:43 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Tue, 27 May 2014 01:23:43 +0200
Subject: [Twisted-Python] Code question - semantic meaning of
 IServiceCollection(parent, parent)
In-Reply-To: <CAJtE5vSS2ZUCG5O=-b4FjT47UNaAb-+_j8p09w+pJUvwAsCh1A@mail.gmail.com>
References: <CACVXvXpis9_WiS-+Czv-sVkfV_uhDqPkGpf30qqrGXoAiXVONA@mail.gmail.com>
 <CAJtE5vSS2ZUCG5O=-b4FjT47UNaAb-+_j8p09w+pJUvwAsCh1A@mail.gmail.com>
Message-ID: <CACVXvXoWKdisa5YPr3QFJU6GYOZ-3OyzSwyfvCJGiKZODaYvjw@mail.gmail.com>

Thanks Dustin, I got it ;)


On Mon, May 26, 2014 at 2:57 PM, Dustin J. Mitchell <dustin at v.igoro.us>wrote:

> It's certainly not an obvious syntax, but it "casts" the first
> argument into a provider of the interface, defaulting to the second
> argument if this is not possible.
>
> For example, if `parent` isn't a provider of `IServiceCollection`, but
> there's an adapter registered to covert to `IServiceCollection` from
> `type(parent)`, then that adapter will be called.  If there's no such
> adapter, the cast will return `parent`.
>
> Dustin
>
> On Mon, May 26, 2014 at 8:27 AM, Jonas Brunsgaard
> <jonas.brunsgaard at gmail.com> wrote:
> > Hello all
> >
> > Will someone explain to me what happens when you call an Interface with
> > arguments, and why the same argument twice?
> >
> >
> >
> > My problem is to understand the semantics of the line
> >
> >     parent = IServiceCollection(parent, parent)
> >
> >
> >
> > part of
> >
> >     def setServiceParent(self, parent):
> >
> >         if self.parent is not None:
> >
> >             self.disownServiceParent()
> >         parent = IServiceCollection(parent, parent)
> >
> >         self.parent = parent
> >         self.parent.addService(self)
> >
> >
> >
> > in twisted.application.service
> >
> > Thanks in advance.
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140527/cdfc6260/attachment.html>

From hs at ox.cx  Thu May 29 07:13:01 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 29 May 2014 15:13:01 +0200
Subject: [Twisted-Python] Status of trac upgrade
In-Reply-To: <20140523131135.5287.1046664963.divmod.xquotient.53@top>
References: <20140523131135.5287.1046664963.divmod.xquotient.53@top>
Message-ID: <439D634B-3C9F-4256-8BEB-7770073AFCEB@ox.cx>

On 23 May 2014, at 15:11, exarkun at twistedmatrix.com wrote:

> I was just wondering what the current status of the effort to upgrade 
> trac on twistedmatrix.com is.

I could hear the crickets all the way down to Madagascar.

So what *is* the status?  The current state is really hardly bearable; 
the spam is taking completely over. :(  Wasn?t there a successful dry 
run at the PyCon sprints?

Cheers
Hynek

***

Also JFTR and related to our old plans to utilize GitHub somehow: it 
seems like Phabricator would be much rather worth our time as it allows 
for a complete review workflow: 
http://cramer.io/2014/05/03/on-pull-requests/


From jon at multani.info  Thu May 29 07:55:37 2014
From: jon at multani.info (Jonathan Ballet)
Date: Thu, 29 May 2014 21:55:37 +0800
Subject: [Twisted-Python] Status of trac upgrade
In-Reply-To: <439D634B-3C9F-4256-8BEB-7770073AFCEB@ox.cx>
References: <20140523131135.5287.1046664963.divmod.xquotient.53@top>
 <439D634B-3C9F-4256-8BEB-7770073AFCEB@ox.cx>
Message-ID: <20140529135529.GA23375@danio.home>

On Thu, May 29, 2014 at 03:13:01PM +0200, Hynek Schlawack wrote:
> On 23 May 2014, at 15:11, exarkun at twistedmatrix.com wrote:
> 
> >I was just wondering what the current status of the effort to upgrade trac
> >on twistedmatrix.com is.
> 
> I could hear the crickets all the way down to Madagascar.
> 
> So what *is* the status?  The current state is really hardly bearable; the
> spam is taking completely over. :(  Wasn?t there a successful dry run at the
> PyCon sprints?

For this matter: I expressed a few times my interest here to help
Twisted move to Git, and upgrading Trac was a requirement.
Although I basically don't have any special rights in the Twisted
project (oh, I can edit the wiki now!), I would be happy to help in any
ways to complete this migration, I'm just not sure what I can do, and
how it can be done.

However, I really won't be able to do anything before end of July, but
after that, I will be able to dedicate time to help on this, and
hopefully the Git migration (or things connected to) as well...

 Jonathan


From dustin at v.igoro.us  Thu May 29 09:12:32 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Thu, 29 May 2014 11:12:32 -0400
Subject: [Twisted-Python] Status of trac upgrade
In-Reply-To: <20140529135529.GA23375@danio.home>
References: <20140523131135.5287.1046664963.divmod.xquotient.53@top>
 <439D634B-3C9F-4256-8BEB-7770073AFCEB@ox.cx>
 <20140529135529.GA23375@danio.home>
Message-ID: <CAJtE5vRmskDrkx1pYVWj7+9mkuy_bZO6mjR0_fz4Dv9y4Te7dA@mail.gmail.com>

Buildbot just upgraded to Trac-1.0, and with the addition of a number
of custom plugins, we've gotten the spam situation under control.

It took a long time, but it was definitely worth it!

Dustin

On Thu, May 29, 2014 at 9:55 AM, Jonathan Ballet <jon at multani.info> wrote:
> On Thu, May 29, 2014 at 03:13:01PM +0200, Hynek Schlawack wrote:
>> On 23 May 2014, at 15:11, exarkun at twistedmatrix.com wrote:
>>
>> >I was just wondering what the current status of the effort to upgrade trac
>> >on twistedmatrix.com is.
>>
>> I could hear the crickets all the way down to Madagascar.
>>
>> So what *is* the status?  The current state is really hardly bearable; the
>> spam is taking completely over. :(  Wasn?t there a successful dry run at the
>> PyCon sprints?
>
> For this matter: I expressed a few times my interest here to help
> Twisted move to Git, and upgrading Trac was a requirement.
> Although I basically don't have any special rights in the Twisted
> project (oh, I can edit the wiki now!), I would be happy to help in any
> ways to complete this migration, I'm just not sure what I can do, and
> how it can be done.
>
> However, I really won't be able to do anything before end of July, but
> after that, I will be able to dedicate time to help on this, and
> hopefully the Git migration (or things connected to) as well...
>
>  Jonathan
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From glyph at twistedmatrix.com  Thu May 29 10:56:33 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 29 May 2014 09:56:33 -0700
Subject: [Twisted-Python] Status of trac upgrade
In-Reply-To: <CAJtE5vRmskDrkx1pYVWj7+9mkuy_bZO6mjR0_fz4Dv9y4Te7dA@mail.gmail.com>
References: <20140523131135.5287.1046664963.divmod.xquotient.53@top>
 <439D634B-3C9F-4256-8BEB-7770073AFCEB@ox.cx>
 <20140529135529.GA23375@danio.home>
 <CAJtE5vRmskDrkx1pYVWj7+9mkuy_bZO6mjR0_fz4Dv9y4Te7dA@mail.gmail.com>
Message-ID: <1A31C170-43AD-4A3F-B1BF-9AC4E882093B@twistedmatrix.com>

On May 29, 2014, at 8:12 AM, Dustin J. Mitchell <dustin at v.igoro.us> wrote:

> It took a long time, but it was definitely worth it!

Thanks for this input, Dustin.  It is actually _super_ useful, for me at least, to learn that there is in fact a light at the end of this tunnel :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140529/8fd179c7/attachment.html>

From venkteshguttedar at gmail.com  Thu May 29 13:00:10 2014
From: venkteshguttedar at gmail.com (VENKTESH GUTTEDAR)
Date: Fri, 30 May 2014 00:30:10 +0530
Subject: [Twisted-Python] Twisted.email.smtp Module ERROR
Message-ID: <CA+iwz4=oE81AjAAb5nBrzSf25UYkRFa1OUJ=4j=+GG+0djxYiw@mail.gmail.com>

Hello,

        i have written a script to send email by using the twisted smtplib
in which i am trying to import the ESMTPSenderFactory from
twisted.mail.smtp. but its giving the error as import error : no module
name mail.smtp. so please someone help me to get rid of this error. i am
using python 2.7 in ubuntu 13.10.

thank you.

-- 
Regards :
Venktesh Guttedar.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140530/7b6d026c/attachment.html>

From exarkun at twistedmatrix.com  Thu May 29 13:04:07 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 29 May 2014 19:04:07 -0000
Subject: [Twisted-Python] Twisted.email.smtp Module ERROR
In-Reply-To: <CA+iwz4=oE81AjAAb5nBrzSf25UYkRFa1OUJ=4j=+GG+0djxYiw@mail.gmail.com>
References: <CA+iwz4=oE81AjAAb5nBrzSf25UYkRFa1OUJ=4j=+GG+0djxYiw@mail.gmail.com>
Message-ID: <20140529190407.5287.648089933.divmod.xquotient.71@top>

On 07:00 pm, venkteshguttedar at gmail.com wrote:
>Hello,
>
>        i have written a script to send email by using the twisted 
>smtplib
>in which i am trying to import the ESMTPSenderFactory from
>twisted.mail.smtp. but its giving the error as import error : no module
>name mail.smtp. so please someone help me to get rid of this error. i 
>am
>using python 2.7 in ubuntu 13.10.

Sounds like you didn't install Twisted Mail.

But please see http://sscce.org/

Jean-Paul


From wanghe at gsrtvu.cn  Thu May 29 14:11:21 2014
From: wanghe at gsrtvu.cn (=?GBK?B?uMrL4LXntPM=?=)
Date: Fri, 30 May 2014 04:11:21 +0800
Subject: [Twisted-Python] Auto-Re:  Twisted.email.smtp Module ERROR
Message-ID: <140530041121fed9d2316632ef7c454d0131f418b9fe@gsrtvu.cn>

????????!

From piper.masden at gmail.com  Fri May 30 00:13:58 2014
From: piper.masden at gmail.com (Piper Masden)
Date: Fri, 30 May 2014 00:13:58 -0600
Subject: [Twisted-Python] deferToThread and trial
Message-ID: <CAJjaOENSQ1Ca8vLSjuad_X5GjuecrWkhp7Q=fgL5+i5XaUiQGw@mail.gmail.com>

I have some Klein code that uses deferToThread for I/O. It looks something
like this:

@app.route('/', methods=['GET']
def index(request, *args, **kwargs):
    d = deferToThread(some_blocking_db_select_function)

    def serialize(db_object):
        return json.dumps({
            'id': db_object,
            })
    d.addCallback(serialize)
    return d

I have a test that executes this function, and the deferToThread returns a
Deferred, but that deferred never fires its callback, and so when I use
successResultOf expecting a success result, no result is found.

When I use twistd to run the Klein application, everything works fine (the
deferred fires and I get a json string in the body of the response). What's
different about the trial environment that deferToThread might not fire its
callback? Do I need to explicitly set up a thread pool in trial that I
don't have to set up using twistd?  Any help would be appreciated.

-Piper
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140530/faa694f7/attachment.html>

From jonathan+twisted at jsphere.com  Fri May 30 03:40:53 2014
From: jonathan+twisted at jsphere.com (Jonathan Jacobs)
Date: Fri, 30 May 2014 11:40:53 +0200
Subject: [Twisted-Python] deferToThread and trial
In-Reply-To: <CAJjaOENSQ1Ca8vLSjuad_X5GjuecrWkhp7Q=fgL5+i5XaUiQGw@mail.gmail.com>
References: <CAJjaOENSQ1Ca8vLSjuad_X5GjuecrWkhp7Q=fgL5+i5XaUiQGw@mail.gmail.com>
Message-ID: <E4E6567B37AA4BFD959111DAF834FC52@jsphere.com>

Hi Piper,  

`successResultOf` is intended to be called on a Deferred which has a result (meaning `Deferred.errback` or `Deferred.callback` has been called on it already.) [1] In this case presumably your blocking call hasn?t finished (or even started?) by the time the assertion is executed, hence the Deferred has no result.

The usual case for using `successResultOf` is when you have a Deferred that you?re delivering results to synchronously (probably by way of calling `Deferred.callback` from your test) to determine if the callback chain produces the expected final result.

Without debating the merits of preferring to avoid interaction with the real world in unit tests, you can return a Deferred from your test method to run the reactor for you until the Deferred has fired and its callbacks have run. [2] You probably want to add some callbacks, to perform some assertions about the result, to the Deferred you?ll be returning.

[1] <http://twistedmatrix.com/documents/current/api/twisted.trial._synctest._Assertions.html#successResultOf>
[2] <http://twistedmatrix.com/documents/current/core/howto/testing.html#leave-the-reactor-as-you-found-it>

--  
Jonathan


On Friday 30 May 2014 at 8:13 AM, Piper Masden wrote:

> I have some Klein code that uses deferToThread for I/O. It looks something like this:
>  
> @app.route('/', methods=['GET']
> def index(request, *args, **kwargs):
>     d = deferToThread(some_blocking_db_select_function)
>  
>     def serialize(db_object):
>         return json.dumps({
>             'id': db_object,
>             })
>     d.addCallback(serialize)
>     return d
>  
> I have a test that executes this function, and the deferToThread returns a Deferred, but that deferred never fires its callback, and so when I use successResultOf expecting a success result, no result is found.  
>  
> When I use twistd to run the Klein application, everything works fine (the deferred fires and I get a json string in the body of the response). What's different about the trial environment that deferToThread might not fire its callback? Do I need to explicitly set up a thread pool in trial that I don't have to set up using twistd?  Any help would be appreciated.
>  
>  


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140530/f653d60d/attachment.html>

From dustin at v.igoro.us  Fri May 30 06:43:58 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Fri, 30 May 2014 08:43:58 -0400
Subject: [Twisted-Python] deferToThread and trial
In-Reply-To: <CAJjaOENSQ1Ca8vLSjuad_X5GjuecrWkhp7Q=fgL5+i5XaUiQGw@mail.gmail.com>
References: <CAJjaOENSQ1Ca8vLSjuad_X5GjuecrWkhp7Q=fgL5+i5XaUiQGw@mail.gmail.com>
Message-ID: <CAJtE5vTGz505XDx8ptLooVz05Z5bMJu1ksySESqmcei=UiWiMQ@mail.gmail.com>

On Fri, May 30, 2014 at 2:13 AM, Piper Masden <piper.masden at gmail.com> wrote:
> I have a test that executes this function, and the deferToThread returns a
> Deferred, but that deferred never fires its callback, and so when I use
> successResultOf expecting a success result, no result is found.

"Never", or just not before you check its result?  I don't think
successResultOf blocks waiting for the Deferred to fire.

Instead, you need to wait for the deferred within your test:

def testIndex(self):
  d = index(..)
  @d.addCallback
  def check(result):
      self.assertEqual(result, ..)
  return d

(this could be prettier with inlineCallbacks, but this should give you the idea)

Dustin


From meejah at meejah.ca  Sat May 31 00:59:24 2014
From: meejah at meejah.ca (meejah)
Date: Sat, 31 May 2014 10:59:24 +0400
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <3C6C714E-B471-4DFE-BC35-7BF81EF2E147@twistedmatrix.com>
 (glyph@twistedmatrix.com's message of "Tue, 6 May 2014 14:25:17
 -0700")
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
 <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
 <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>
 <CAFN1edrLu1wf7cfDHdmg0MJ0OdvWKUYX3LY-dE3VpZ2Ysrr8WQ@mail.gmail.com>
 <B9DA601A-E4DA-45E4-979A-94C6AE618332@twistedmatrix.com>
 <CAFN1edprzLY+7mr9Z9d-SNjvKfWwMRb8E0KWNz98SjdS98UB6A@mail.gmail.com>
 <3C6C714E-B471-4DFE-BC35-7BF81EF2E147@twistedmatrix.com>
Message-ID: <86a99yjuwj.fsf@atlantis.meejah.ca>


As a followup to all this, I have just merged a branch with a refactored
endpoint parser. tomprince (I believe) on #twisted suggested some SSH
endpoint code to look at, which inspired the @classmethod style way of
getting a TCPHiddenServiceEndpoint instance configured differently.

Nearly all the code is in endpoints.py if anyone is interested, here:

    https://github.com/meejah/txtorcon/blob/master/txtorcon/endpoints.py#L117

If you do look, I'd certainly appreciate any comments.
(The tests are in test/test_endpoints.py)

Anyway, one really cool thing now that txtorcon supports endpoints is
that you can install it, and then easily make Twisted Web serve some
content as a hidden service (launching a Tor instance first, etc):

   twistd -n web --port "onion:80" --path ~/public_html

...or of course make any service at all available as a hidden service,
as long as it uses endpoints.

-- 
meejah
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 489 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140531/459734f8/attachment.pgp>

From exarkun at twistedmatrix.com  Sat May 31 12:32:18 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 31 May 2014 18:32:18 -0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
 deferred
In-Reply-To: <86a99yjuwj.fsf@atlantis.meejah.ca>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
 <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
 <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>
 <CAFN1edrLu1wf7cfDHdmg0MJ0OdvWKUYX3LY-dE3VpZ2Ysrr8WQ@mail.gmail.com>
 <B9DA601A-E4DA-45E4-979A-94C6AE618332@twistedmatrix.com>
 <CAFN1edprzLY+7mr9Z9d-SNjvKfWwMRb8E0KWNz98SjdS98UB6A@mail.gmail.com>
 <3C6C714E-B471-4DFE-BC35-7BF81EF2E147@twistedmatrix.com>
 <86a99yjuwj.fsf@atlantis.meejah.ca>
Message-ID: <20140531183218.5287.193293421.divmod.xquotient.73@top>

On 06:59 am, meejah at meejah.ca wrote:
>
>[snip]
>
>Anyway, one really cool thing now that txtorcon supports endpoints is
>that you can install it, and then easily make Twisted Web serve some
>content as a hidden service (launching a Tor instance first, etc):
>
>   twistd -n web --port "onion:80" --path ~/public_html
>
>...or of course make any service at all available as a hidden service,
>as long as it uses endpoints.

Very cool!  Thanks for sharing.

Jean-Paul


From itamar at itamarst.org  Sat May 31 14:08:13 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 31 May 2014 16:08:13 -0400
Subject: [Twisted-Python] ANN: Crochet 1.3.0 - Use Twisted Anywhere!
Message-ID: <538A36AD.30304@itamarst.org>

Crochet is an MIT-licensed library that makes it easier to use Twisted 
from regular blocking code. Some use cases include:

  * Easily use Twisted from a blocking framework like Django or Flask.
  * Write a library that provides a blocking API, but uses Twisted for
    its implementation.
  * Port blocking code to Twisted more easily, by keeping a backwards
    compatibility layer.
  * Allow normal Twisted programs that use threads to interact with
    Twisted more cleanly from their threaded parts. For example this can
    be useful when using Twisted as a WSGI container.

This is a bugfix release, recommended for all users of Crochet.

Crochet can be downloaded from https://pypi.python.org/pypi/crochet or 
by running:

     $ pip install crochet

Documentation can be found at http://crochet.readthedocs.org 
<https://crochet.readthedocs.org/>

Bugs and feature requests should be filed at the project 
https://github.com/itamarst/crochet

Here?s an example of a program using Crochet. Notice that you get a 
completely blocking interface to Twisted and do not need to run the 
Twisted reactor, the event loop, yourself.

#!/usr/bin/python
"""
Do a DNS lookup using Twisted's APIs.
"""
from  __future__  import  print_function

# The Twisted code we'll be using:
from  twisted.names  import  client

from  crochet  import  setup,  wait_for
setup()


# Crochet layer, wrapping Twisted's DNS library in a blocking call.
@wait_for(timeout=5.0)
def  gethostbyname(name):
     """Lookup the IP of a given hostname.

     Unlike socket.gethostbyname() which can take an arbitrary amount of time
     to finish, this function will raise crochet.TimeoutError if more than 5
     seconds elapse without an answer being received.
     """
     d  =  client.lookupAddress(name)
     d.addCallback(lambda  result:  result[0][0].payload.dottedQuad())
     return  d


if  __name__  ==  '__main__':
     # Application code using the public API - notice it works in a normal
     # blocking manner, with no event loop visible:
     import  sys
     name  =  sys.argv[1]
     ip  =  gethostbyname(name)
     print(name,  "->",  ip)

Run on the command line:

> $ python blockingdns.py twistedmatrix.com
> twistedmatrix.com -> 66.35.39.66

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140531/742ebe31/attachment.html>

From wanghe at gsrtvu.cn  Sat May 31 23:40:38 2014
From: wanghe at gsrtvu.cn (=?GBK?B?uMrL4LXntPM=?=)
Date: Sun, 01 Jun 2014 13:40:38 +0800
Subject: [Twisted-Python] Auto-Re:  Weekly Bug Summary
Message-ID: <14060113403865cfd1d2acd95e372562238a9c6d1d68@gsrtvu.cn>

????????!

From glyph at twistedmatrix.com  Thu May  1 05:28:15 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 1 May 2014 04:28:15 -0700
Subject: [Twisted-Python] Twisted 14.0.0pre5 Announcement
In-Reply-To: <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
References: <71A8C978-FA2F-4DD3-9E7B-14F6EA923953@atleastfornow.net>
 <5545EFD0-9DED-4BCF-91AA-C218DA62C393@atleastfornow.net>
 <89F32CDC-62ED-4C94-92A6-314647D7DA74@atleastfornow.net>
 <CA+t4pawt3xoebz3rmx90GgLyCXnngHmU90fk9CcmV8PLifdCug@mail.gmail.com>
 <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
Message-ID: <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>

On Apr 29, 2014, at 3:16 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> Excellent!
> 
> If anyone else has some applications they run, please try out pre5!
> 
> -hawkowl

I've upgraded <https://glyph.im/> (and therefore <https://glyph.twistedmatrix.com/> and <https://pip2014.com/> and <https://tm.tl/> and a number of other sites that nobody cares about) to the prerelease: <https://asciinema.org/a/9216>.

Smooth sailing so far, except for this one peculiarity; it crashes ssltest now:

<https://www.ssllabs.com/ssltest/analyze.html?d=tm.tl>

This might have nothing to do with the prerelease (for unrelated reasons I had to perform some other upgrades before I got around to it).

Also it looks like a bug on ssllabs' side of things, not a problem with Twisted.  But if someone slightly more experienced with TLS wanted to look at the traffic from that server it might be interesting.

-glyph





From hs at ox.cx  Thu May  1 05:56:23 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 01 May 2014 13:56:23 +0200
Subject: [Twisted-Python] Twisted 14.0.0pre5 Announcement
In-Reply-To: <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>
References: <71A8C978-FA2F-4DD3-9E7B-14F6EA923953@atleastfornow.net>
 <5545EFD0-9DED-4BCF-91AA-C218DA62C393@atleastfornow.net>
 <89F32CDC-62ED-4C94-92A6-314647D7DA74@atleastfornow.net>
 <CA+t4pawt3xoebz3rmx90GgLyCXnngHmU90fk9CcmV8PLifdCug@mail.gmail.com>
 <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
 <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>
Message-ID: <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>

On 1 May 2014, at 13:28, Glyph wrote:

> I've upgraded <https://glyph.im/> (and therefore 
> <https://glyph.twistedmatrix.com/> and <https://pip2014.com/> and 
> <https://tm.tl/> and a number of other sites that nobody cares about) 
> to the prerelease: <https://asciinema.org/a/9216>.
>
> Smooth sailing so far, except for this one peculiarity; it crashes 
> ssltest now:
>
> <https://www.ssllabs.com/ssltest/analyze.html?d=tm.tl>
>
> This might have nothing to do with the prerelease (for unrelated 
> reasons I had to perform some other upgrades before I got around to 
> it).
>
> Also it looks like a bug on ssllabs' side of things, not a problem 
> with Twisted.  But if someone slightly more experienced with TLS 
> wanted to look at the traffic from that server it might be 
> interesting.

When I connect to the hosts you mention using openssl (don’t forget to 
set -servername if you play along) I only get TLSv1.  Is it possible 
that there’s some custom TLS code laying around?

—h

P.S. The cert chain is apparently completely wrong: 
http://glui.me/?i=ek3zvx7v2wrlsgm/2014-05-01_at_13.55.png/  Apparently 
you send out an anchor but missing an intermediate certificate?



From hawkowl at atleastfornow.net  Thu May  1 06:08:05 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Thu, 1 May 2014 20:08:05 +0800
Subject: [Twisted-Python] Twisted 14.0.0pre5 Announcement
In-Reply-To: <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
References: <71A8C978-FA2F-4DD3-9E7B-14F6EA923953@atleastfornow.net>
 <5545EFD0-9DED-4BCF-91AA-C218DA62C393@atleastfornow.net>
 <89F32CDC-62ED-4C94-92A6-314647D7DA74@atleastfornow.net>
 <CA+t4pawt3xoebz3rmx90GgLyCXnngHmU90fk9CcmV8PLifdCug@mail.gmail.com>
 <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
 <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>
 <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
Message-ID: <3023A61F-0E76-4EAE-A197-00D914C40BA9@atleastfornow.net>

FWIW, https://www.ssllabs.com/ssltest/analyze.html?d=blog.dreid.org is on 14.0pre5, and it seems to work, so… (it even gets A+!!!!!)

-hawkowl

On 1 May 2014, at 19:56, Hynek Schlawack <hs at ox.cx> wrote:

> On 1 May 2014, at 13:28, Glyph wrote:
> 
>> I've upgraded <https://glyph.im/> (and therefore <https://glyph.twistedmatrix.com/> and <https://pip2014.com/> and <https://tm.tl/> and a number of other sites that nobody cares about) to the prerelease: <https://asciinema.org/a/9216>.
>> 
>> Smooth sailing so far, except for this one peculiarity; it crashes ssltest now:
>> 
>> <https://www.ssllabs.com/ssltest/analyze.html?d=tm.tl>
>> 
>> This might have nothing to do with the prerelease (for unrelated reasons I had to perform some other upgrades before I got around to it).
>> 
>> Also it looks like a bug on ssllabs' side of things, not a problem with Twisted.  But if someone slightly more experienced with TLS wanted to look at the traffic from that server it might be interesting.
> 
> When I connect to the hosts you mention using openssl (don’t forget to set -servername if you play along) I only get TLSv1.  Is it possible that there’s some custom TLS code laying around?
> 
> —h
> 
> P.S. The cert chain is apparently completely wrong: http://glui.me/?i=ek3zvx7v2wrlsgm/2014-05-01_at_13.55.png/  Apparently you send out an anchor but missing an intermediate certificate?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20140501/c3acb6f3/attachment.sig>

From glyph at twistedmatrix.com  Thu May  1 13:23:02 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 May 2014 12:23:02 -0700
Subject: [Twisted-Python]
 =?iso-8859-1?q?Some_comments_regarding_=235190_-?=
 =?iso-8859-1?q?_=60=60RFC_6125_=28=22Service_Identity=22=29_implementatio?=
 =?iso-8859-1?q?n=B4=B4?=
In-Reply-To: <20140430122130.6354.1569482577.divmod.xquotient.52@top>
References: <20140430122130.6354.1569482577.divmod.xquotient.52@top>
Message-ID: <C9EA14EB-C6A7-48DD-924A-5662E82BD119@twistedmatrix.com>


On Apr 30, 2014, at 5:21 AM, exarkun at twistedmatrix.com wrote:

> I've just noticed that the changeset for #5190 included some untested code.  Specifically, there are no tests for the code which detects missing dependencies and emits warnings about them.

My bad.  Well, technically hawkowl's bad; hawkowl is a committer and did the review and therefore has all the criminal liability in this case, but as the author who wrote the code I bear some responsibility, at least in some abstract, hypothetical sense ;-).

Thanks for working on the fix; it looks like the relevant ticket is <https://twistedmatrix.com/trac/ticket/7097>.  I'll try to review that as soon as it's ready; let me know.

> I'd previously noticed that this code was broken but hadn't realized this was because it was untested.

Neither the author nor the reviewer realized this either, apparently.  Certainly it wasn't an intentional omission.

> I don't think there's any disagreement whatsoever over Twisted's testing requirements.  All code must have full line and branch coverage (as reported by the coverage.py tool).  Developers, please write tests for all of your code (and please learn to do test-driven development - it will make this task easier, I promise).  Reviewers, please don't accept proposed changes that include untested code.

The problem with code like this is that, in some configurations, it is in fact reported as covered by coverage.py.  It requires manual examination to get the intersection of a diff and a coverage report, and even when you do, we still have too many places where it's "okay" to skip coverage.

As the author I looked at coverage periodically and it looked sort of like what I expected.  Since I was testing multiple installed-library configurations I had used "coverage combine" which misleadingly told me that it was all covered (although this particular code should have been tested independently without requiring a combined run).  And I'm sure the reviewer thought about it a little bit, but even if they'd looked at a coverage report, it might have looked like it was OK to skip these particular lines.  And I was in fact doing test-driven development; I didn't add the warning code there until I was looking at a failing test because one of the buildbots didn't have one of my expected dependencies installed, and I made my tests pass locally by having an environment without those dependencies installed locally either.

Yes, I understand how this isn't really 100% TDD, and that a failure on a buildbot should have resulted in me writing a new test; mistakes were made etc.  But all TDD necessarily involves the occasional error/error/pass where there really ought to have been a pass/fail/pass - if we understood what was going on with all of our code all the time we probably wouldn't need tests in the first place :-).  It's a bit disingenuous to say that I need to "learn to do test-driven development" to avoid mistakes like this, though.

On the other side of the equation, I imagine that a reviewer looking at this, even carefully considering coverage, might see a missed line on some buildbot or in their local run and then thought "oh, of course, but that line will be run if I had/didn't have that library installed".  And there are some bits of code which are acceptable to cover in this manner (except they should have direct test coverage from actual tests, rather than just importing the test module, which coverage.py won't show you).  It's a quite subtle point to understand that this particular kind of code should actually be fully covered in all configurations.  Especially because these tests are smack in the middle of a file which will be validly missing coverage in some supported configurations (no pyOpenSSL installed) and surrounded with thickets of conditionals and test skips to optionally import more dependencies than just this one.

We should remain vigilant, but I think that if we want to really reduce errors like this in the future we need to make them easier to spot.  Failing that we need to have more specific suggestions.  In this case, I happen to know that I do TDD and that Hawkowl was is aware of the standard on coverage issues (and is at least aware of coverage.py, whether or not it was run as part of this review), so those two suggestions aren't going to help as we're already doing them.  Any time the solution to a problem is "everybody should just try harder" that seems like a bet against human fallibility.

So until someone has a month to spend on an all-singing all-dancing combined ratcheting coverage report for all the builders and a fantastic visualization for its output which highlights every possible coverage issue, here are some specific suggestions which might avoid some parts of this class of error:

For authors (what I could have done better):

I know I said they're inevitable, but whenever you get an error/pass, always consider where you could make it a clean fail/pass instead.  You (and by "you" I obviously mean "me") think you understand why an error happened but the only way to really demonstrate you understand it well enough to convert it into an assertion that fails with a useful error message.
Be intensely suspicious of any code that needs to run at import time.  I did stuff the warning into a function, which at least doesn't leak local variables, but I probably could have moved this warning somewhere easier to manage, and would have noticed warnings coming out of tests as opposed to just being printed at the beginning.  Declarative like deprecatedModuleAttribute automate some of the magic for making code-level artifacts emit warnings when bound to and used rather than accidents of their initial import, so make use of those. (I'm still thinking about how I could have applied that in this specific case; I probably could have.)
Configure your development environment to be more aggressive about warnings (at least for now, eventually trial should fix this for you, see <https://twistedmatrix.com/trac/ticket/6348>).  I don't think it would have helped in this particular case because the warning itself is emitted at import time (see point 2) but this sort of mistake crops up unfortunately frequently related to deprecation warnings, which are a bit more common, and could often be caught by a better setup.  I recently changed my PYTHONWARNINGS environment variable to 'all::DeprecationWarning,all::UserWarning', and that seems to catch most things.  (Unfortunately setting it to simply 'all' produces too much noise from the stdlib and dependencies so it's better to be slightly more restrictive.)

For reviewers (what hawkowl could have done better):

Run coverage.  Particularly, run coverage just on the relevant and changed test modules, and make sure the system under test gets run directly and just accidentally executed by running the code.
I know I've been reminding reviewers lately to give clear feedback about what elements of reviews are suggestions and which are required fixes for violations of policy, and that may produce the subjective impression that I've been asking for faster or less careful reviews.  If so, I should correct that impression: I would like there to be less bike shedding, but it's still pretty important that the £10 million reactor actually work.  Any lack of test coverage is at least a potential policy violation.  Even if you think you understand why it's missing, even if it looks like a platform variance that doesn't make sense to test on the machine you're running, always ask the author to explain or justify why coverage isn't there, if it could be added to a cross-platform test with a reasonable (or, in many cases, even an existing) fake; if there's no relevant fake and it would be too much work, maybe we need to file a ticket for implementing some test support.
Especially if you're dealing with a new feature or a significant behavior change, always try to actually run and interact with the code and look at its output.  In this case, noticing the whitespace / formatting errors in the warning messages might have lead us to spot the coverage error earlier.  (Jean-Paul made some comments to me when he noticed it, but it was an off-the-cuff thing after the branch had already been landed and not part of a code review; context is important here, as evidenced by the fact that it took him some time to realize that it was indicative of a test coverage issue!

If anyone else has any ideas.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140501/fe5aa030/attachment-0002.html>

From glyph at twistedmatrix.com  Thu May  1 13:28:17 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 May 2014 12:28:17 -0700
Subject: [Twisted-Python] Twisted 14.0.0pre5 Announcement
In-Reply-To: <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
References: <71A8C978-FA2F-4DD3-9E7B-14F6EA923953@atleastfornow.net>
 <5545EFD0-9DED-4BCF-91AA-C218DA62C393@atleastfornow.net>
 <89F32CDC-62ED-4C94-92A6-314647D7DA74@atleastfornow.net>
 <CA+t4pawt3xoebz3rmx90GgLyCXnngHmU90fk9CcmV8PLifdCug@mail.gmail.com>
 <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
 <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>
 <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
Message-ID: <B9A5ABB9-011C-4884-BD53-D64677D9F6D5@twistedmatrix.com>

On May 1, 2014, at 4:56 AM, Hynek Schlawack <hs at ox.cx> wrote:

> When I connect to the hosts you mention using openssl (don’t forget to set -servername if you play along) I only get TLSv1.  Is it possible that there’s some custom TLS code laying around?

As far as I can see, only <https://github.com/glyph/txsni>.  It constructs the CertificateOptions in <https://github.com/glyph/txsni/blob/master/txsni/only_noticed_pypi_pem_after_i_wrote_this.py> (whose name suggests a change I need to make to this library).  Am I forgetting some cool new options to CertificateOptions?

The machine is an Ubuntu 14.04 machine with libssl1.0.0:libssl1.0.1f-ubuntu-don't-have-a-heart-attack-it's-actually-g (I seriously wish they wouldn't do that with security patches).

Any other packages I should be looking for?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140501/07ed1786/attachment-0002.html>

From glyph at twistedmatrix.com  Thu May  1 13:29:00 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 May 2014 12:29:00 -0700
Subject: [Twisted-Python] Twisted 14.0.0pre5 Announcement
In-Reply-To: <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
References: <71A8C978-FA2F-4DD3-9E7B-14F6EA923953@atleastfornow.net>
 <5545EFD0-9DED-4BCF-91AA-C218DA62C393@atleastfornow.net>
 <89F32CDC-62ED-4C94-92A6-314647D7DA74@atleastfornow.net>
 <CA+t4pawt3xoebz3rmx90GgLyCXnngHmU90fk9CcmV8PLifdCug@mail.gmail.com>
 <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
 <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>
 <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
Message-ID: <2C02938B-5D0C-49FA-B04C-F4D3292183B9@twistedmatrix.com>

On May 1, 2014, at 4:56 AM, Hynek Schlawack <hs at ox.cx> wrote:

> P.S. The cert chain is apparently completely wrong: http://glui.me/?i=ek3zvx7v2wrlsgm/2014-05-01_at_13.55.png/  Apparently you send out an anchor but missing an intermediate certificate?

What even is a pem, how can a chain be correct I don't even know.  I used 'cat' to put some stuff into files.  This was not crashing ssltest before :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140501/8e3405df/attachment-0002.html>

From hs at ox.cx  Thu May  1 14:08:20 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 01 May 2014 22:08:20 +0200
Subject: [Twisted-Python] Twisted 14.0.0pre5 Announcement
In-Reply-To: <B9A5ABB9-011C-4884-BD53-D64677D9F6D5@twistedmatrix.com>
References: <71A8C978-FA2F-4DD3-9E7B-14F6EA923953@atleastfornow.net>
 <5545EFD0-9DED-4BCF-91AA-C218DA62C393@atleastfornow.net>
 <89F32CDC-62ED-4C94-92A6-314647D7DA74@atleastfornow.net>
 <CA+t4pawt3xoebz3rmx90GgLyCXnngHmU90fk9CcmV8PLifdCug@mail.gmail.com>
 <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
 <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>
 <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
 <B9A5ABB9-011C-4884-BD53-D64677D9F6D5@twistedmatrix.com>
Message-ID: <DC166470-7F8D-4240-B720-7A049F9A71C6@ox.cx>

On 1 May 2014, at 21:28, Glyph Lefkowitz wrote:

>> When I connect to the hosts you mention using openssl (don’t forget 
>> to set -servername if you play along) I only get TLSv1.  Is it 
>> possible that there’s some custom TLS code laying around?
>
> As far as I can see, only <https://github.com/glyph/txsni>.  It 
> constructs the CertificateOptions in 
> <https://github.com/glyph/txsni/blob/master/txsni/only_noticed_pypi_pem_after_i_wrote_this.py> 
> (whose name suggests a change I need to make to this library).  Am I 
> forgetting some cool new options to CertificateOptions?

If you want DHE, you need to load DH parameters: 
http://twisted.readthedocs.org/en/latest/core/howto/ssl.html#tls-protocol-options 
too.

Why your server only accepts TLSv1 is beyond me off the cuff.

> The machine is an Ubuntu 14.04 machine with 
> libssl1.0.0:libssl1.0.1f-ubuntu-don't-have-a-heart-attack-it's-actually-g 
> (I seriously wish they wouldn't do that with security patches).

Well, that’s what distributions do. *shrug*  They don’t update your 
software so nothing breaks; they just fix the security issues (thus 
it’s not necessarily g, Ubuntu’s fix *can* be very different from 
what OpenSSL did.



From glyph at twistedmatrix.com  Thu May  1 13:33:54 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 May 2014 12:33:54 -0700
Subject: [Twisted-Python] read the docs versions (was Re: adding endpoint
	plugins)
In-Reply-To: <74CA910F-B09C-4017-A7C3-A1FF4729B946@stufft.io>
References: <CAFN1edq3opwu37tSmad-aYG7K_AwTjik-HmzA_YejtAd1LHBrw@mail.gmail.com>
 <20140430141416.6354.407951741.divmod.xquotient.68@top>
 <CA+U=zK2dQbq2V864_=xFQbV4Znag6WHZzahB_SvDDbHLjcCVjg@mail.gmail.com>
 <D2C6DAF1-E7B0-4DEE-9CED-99758536D2A5@twistedmatrix.com>
 <74CA910F-B09C-4017-A7C3-A1FF4729B946@stufft.io>
Message-ID: <4C738ADD-A9C9-460A-89F1-D80033C4E5A5@twistedmatrix.com>


On Apr 30, 2014, at 12:09 PM, Donald Stufft <donald at stufft.io> wrote:

> There is a drop down for default release in the RTD admin panel.

The drop down isn't super helpful:



But I noticed that page also has a huuuuuge list of branches on it, so I checked off the most recent 14.0 branch and now it's toiling away.

We should add this to the release process.  Hawkowl?

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140501/8fbc2230/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PastedGraphic-1.png
Type: image/png
Size: 95693 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140501/8fbc2230/attachment-0002.png>

From glyph at twistedmatrix.com  Thu May  1 16:19:04 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 May 2014 15:19:04 -0700
Subject: [Twisted-Python] Twisted 14.0.0pre5 Announcement
In-Reply-To: <DC166470-7F8D-4240-B720-7A049F9A71C6@ox.cx>
References: <71A8C978-FA2F-4DD3-9E7B-14F6EA923953@atleastfornow.net>
 <5545EFD0-9DED-4BCF-91AA-C218DA62C393@atleastfornow.net>
 <89F32CDC-62ED-4C94-92A6-314647D7DA74@atleastfornow.net>
 <CA+t4pawt3xoebz3rmx90GgLyCXnngHmU90fk9CcmV8PLifdCug@mail.gmail.com>
 <1BD5EB67-705D-47D2-B3BB-57DAE5FD0C01@atleastfornow.net>
 <4B4A0FC6-76FA-4DD8-A7C8-90F6D65BF71E@twistedmatrix.com>
 <5CBFF84A-DB51-4E57-85CE-C29873AA5146@ox.cx>
 <B9A5ABB9-011C-4884-BD53-D64677D9F6D5@twistedmatrix.com>
 <DC166470-7F8D-4240-B720-7A049F9A71C6@ox.cx>
Message-ID: <22E8FFC2-3A8B-4889-AFEE-D23B5CE1D9A1@twistedmatrix.com>


On May 1, 2014, at 1:08 PM, Hynek Schlawack <hs at ox.cx> wrote:

> On 1 May 2014, at 21:28, Glyph Lefkowitz wrote:
> 
>>> When I connect to the hosts you mention using openssl (don’t forget to set -servername if you play along) I only get TLSv1.  Is it possible that there’s some custom TLS code laying around?
>> 
>> As far as I can see, only <https://github.com/glyph/txsni>.  It constructs the CertificateOptions in <https://github.com/glyph/txsni/blob/master/txsni/only_noticed_pypi_pem_after_i_wrote_this.py> (whose name suggests a change I need to make to this library).  Am I forgetting some cool new options to CertificateOptions?
> 
> If you want DHE, you need to load DH parameters:http://twisted.readthedocs.org/en/latest/core/howto/ssl.html#tls-protocol-options too.

I'm going to make txsni use pem, and then get the automagical DH params version with 0.4 ;-).

> Why your server only accepts TLSv1 is beyond me off the cuff.

Oh hah, I think I got it: in order to do SNI with OpenSSL, you need an _initial_ context.  For me, in txSNI, that's an incredibly poorly-set-up one just specifying TLSv1_METHOD, here: <https://github.com/glyph/txsni/blob/master/txsni/snimap.py#L11>

I should probably have a default DEFAULT.pem symlink in there or something.

Another name hosted on that domain is <https://www.ssllabs.com/ssltest/analyze.html?d=glyph.twistedmatrix.com> which doesn't have any of the spurious chain errors.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140501/5e9ca37b/attachment-0002.html>

From sank.daniel at gmail.com  Thu May  1 22:55:59 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 1 May 2014 21:55:59 -0700
Subject: [Twisted-Python] pb objects unexpectedly change identity
In-Reply-To: <CAKN9TDJ02ayP-XsxTfyeU5ONn8tFFyHHT1RRyDdD=-FN8G2fqQ@mail.gmail.com>
References: <CAKN9TD+BDk_00uNfw=PecB3PLN6bS7UcvqotBP6qxp0cMbHavA@mail.gmail.com>
 <CAKN9TDJ02ayP-XsxTfyeU5ONn8tFFyHHT1RRyDdD=-FN8G2fqQ@mail.gmail.com>
Message-ID: <CAKN9TDLPLwZHv-Ni2=Gjtfr8PfyBw9ky6viezQZRaNTMrad-jw@mail.gmail.com>

Dear twisted users,

I have discovered the cause of this strange behavior. This is a good one.

The object exposed to you as a client when you receive a RemoteCache is not
the same object which is passed in as "self" to observe_* methods. In the
source code, there is a pair of objects created when a RemoteCache is
received. One of them is given to the client, and the other remains in the
shadows of pb for reasons I don't yet understand. For some reason
remoteMessageReceived delegates observe_* methods to the object which is
not the one given to the client. This means that normal methods and
observe_* methods get different self arguments.

The authors seemed to try to cover this up by forcing the two objects to
share the same __dict__ and __class__. Of course this does not give the
objects the same id, which was the source of my problem.

I have reported this issue here: https://twistedmatrix.com/trac/ticket/7274

I am interested in fixing this bug. What is the right way to get help from
people who know the code? I have some simple questions I'd like to ask so
that I go in the right direction while fixing this.

-Daniel



On Wed, Apr 30, 2014 at 8:09 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> Dear Twisted users,
>
> To my amazement I have reproduced this strange behaviour in an even
> simpler program. Attached are a pb client/server which illustrate
> unexpected behaviour of the id of a pb.RemoteCache. To run the example, run
> server.py and then client.py (with resources.py in the same working
> directory).
>
> You will see output like this (line numbers added by me)
>
> ====
> 1. RemoteCache 29403544 initialized
> 2. Client received RemoteCache: id=29403544
> 3. RemoteCache: while responding to observe_add I think my id is 29403760
> 4. Client: The RemoteCache's ide is 29403544
> ...
> ====
>
> 1. When the RemoteCache is initialized it thinks its id is 29403544.
> 2. The client agrees that it has received a RemoteCache with id 29403544.
> 3. When the RemoteCache is inside observe_add it thinks its id is 29403760.
> 4. The client still thinks the RemoteCache's id is 29403544.
>
> If you let the program run it will continue to loop between the
> RemoteCache reporting its id while in observe_add, and the client reporting
> the id of the RemoteCache. The two reported ids are always the same unequal
> numbers.
>
> The question appears to be "Why does the id reported by a RemoteCache's
> while inside an observe_* method differ the id reported by objects owning
> references to that RemoteCache?"
>
> Thank you for your time,
> Daniel
>
>
>
>
> On Wed, Apr 30, 2014 at 11:00 AM, Daniel Sank <sank.daniel at gmail.com>wrote:
>
>> Dear twisted users,
>>
>> I think I have found some surprising behavior in perspective broker. I
>> define a subclass of pb.RemoteCache which has a method managed by a
>> descriptor. The descriptor keeps track of the instances it manages in a set.
>>
>> When the RemoteCache is first received by the client, it accesses the
>> descriptor-ified method inside setCopyableState. At that time the
>> RemoteCache's id is a certain value X. Then later when the RemoteCache is
>> notified of a change by the server side Cacheable, it again accesses the
>> descriptor-ified method, but at this time it's id is Y, and Y!=X.
>>
>> I attach to this post a simple working example which displays the
>> behavior described above. To run, first run server.py and then run
>> client.py. You will see a little bit of output, the most important part
>> being
>>
>> ===
>> Client received RemoteCache: id=45952496
>>
>> Asking server to update
>> TD 45921680 (test.RemoteCache.add) accessed by <test.RemoteCache instance
>> at 2BD2DC8>: id=45952456
>> RemoteCache id=45952496
>> ===
>>
>> To understand the details of the output please see descriptor.py. The id
>> of the RemoteCache is first reported as 45952496 when the client receives
>> it. Then, when the descriptor is accessed, the id of the accessing instance
>> is reported as 45952456, which is different. Then, when in the last line we
>> print out the id of the RemoteCache we're back to 45952496.
>>
>> Is there some reason that a RemoteCache's id can change during its life
>> time?
>>
>> --
>> Daniel Sank
>> Department of Physics
>> Broida Hall
>> University of California
>> Santa Barbara, CA 93117
>> (805)893-3899
>>
>
>
>
> --
> Daniel Sank
> Department of Physics
> Broida Hall
> University of California
> Santa Barbara, CA 93117
> (805)893-3899
>



-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140501/3f3e59cc/attachment-0002.html>

From dstainton415 at gmail.com  Fri May  2 07:59:05 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Fri, 2 May 2014 13:59:05 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
Message-ID: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>

Greetings,

Today I wrote an endpoint parser for Meejah's txtorcon Tor Hidden
Service endpoint.

Now that we have foolscap ported to twisted endpoints (branch needs
review but I should probably rebase first) we'd like to be able to
simply specify an "onion" endpoint descriptor in Tahoe-LAFS
configuration... that way foolscap receives the descriptor and uses
serverFromString to generate the endpoint object.

This will work fine for the txsocksx tor client endpoint parser I
wrote... However the txtorcon Tor Hidden Service endpoint setup
requires a deferred to fire once the tor process is started... This
means that the endpoint parser needs to return a deferred. But this
breaks the interface!... meaning that foolscap or any other api using
this onion endpoint parser will have to special case the situation
where serverFromString returns a deferred.

Terrible! Or do you think this is not so terrible?
I am curious to know your thoughts and if any of you have alternate
solutions... since I am obviously doing it wrong.

Here's my txtorcon onion endpoint parser:
https://github.com/david415/txtorcon/blob/endpoint_parser_plugin/examples/hiddenservice_endpoint_parser.py

And here's some example code that uses it:
https://github.com/david415/txtorcon/blob/endpoint_parser_plugin/examples/launch_tor_endpoint.py

By the way (just in case you don't know)... you can test this parser
by placing it in the twisted/plugins directory... here's how I do it:

cd projects/virtualenv-1.11.1/
./virtualenv.py ~/virtenv-endpoints-test
. ~/virtenv-endpoints-test/bin/activate
usewithtor pip install twisted
cd ~/projects
git clone https://github.com/david415/txtorcon.git
# defaults to my endpoint_parser_plugin branch
cd txtorcon
usewithtor python setup.py install
cd examples # CWD is now /home/human/projects/txtorcon/examples
cp hiddenservice_endpoint_parser.py
/home/human/virtenv-endpoints-test/lib/python2.7/site-packages/twisted/plugins
# and then run the example code that uses this endpoint parser
python launch_tor_endpoint.py



Cheers,

David



From mithrandi at mithrandi.net  Fri May  2 08:20:38 2014
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 2 May 2014 16:20:38 +0200
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
Message-ID: <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>

On 2 May 2014 15:59, David Stainton <dstainton415 at gmail.com> wrote:
> This will work fine for the txsocksx tor client endpoint parser I
> wrote... However the txtorcon Tor Hidden Service endpoint setup
> requires a deferred to fire once the tor process is started... This
> means that the endpoint parser needs to return a deferred. But this
> breaks the interface!... meaning that foolscap or any other api using
> this onion endpoint parser will have to special case the situation
> where serverFromString returns a deferred.

I think you're approaching this from the wrong angle; instead of
starting the tor process during parsing of the endpoint, I think it
would make more sense to start the tor process when the endpoint is
started.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From hawkowl at atleastfornow.net  Fri May  2 08:40:19 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Fri, 2 May 2014 22:40:19 +0800
Subject: [Twisted-Python] read the docs versions (was Re: adding
	endpoint plugins)
In-Reply-To: <4C738ADD-A9C9-460A-89F1-D80033C4E5A5@twistedmatrix.com>
References: <CAFN1edq3opwu37tSmad-aYG7K_AwTjik-HmzA_YejtAd1LHBrw@mail.gmail.com>
 <20140430141416.6354.407951741.divmod.xquotient.68@top>
 <CA+U=zK2dQbq2V864_=xFQbV4Znag6WHZzahB_SvDDbHLjcCVjg@mail.gmail.com>
 <D2C6DAF1-E7B0-4DEE-9CED-99758536D2A5@twistedmatrix.com>
 <74CA910F-B09C-4017-A7C3-A1FF4729B946@stufft.io>
 <4C738ADD-A9C9-460A-89F1-D80033C4E5A5@twistedmatrix.com>
Message-ID: <4E122C40-7CB0-493D-B5A3-2AFE12AAA395@atleastfornow.net>

Sounds like a good idea, I'll make a note to do it and write it in the release process once I've done it. 

- HawkOwl

> On 2 May 2014, at 3:33, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Apr 30, 2014, at 12:09 PM, Donald Stufft <donald at stufft.io> wrote:
>> 
>> There is a drop down for default release in the RTD admin panel.
> 
> The drop down isn't super helpful:
> 
> <PastedGraphic-1.png>
> 
> But I noticed that page also has a huuuuuge list of branches on it, so I checked off the most recent 14.0 branch and now it's toiling away.
> 
> We should add this to the release process.  Hawkowl?
> 
> -g
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140502/23521119/attachment-0002.html>

From dstainton415 at gmail.com  Fri May  2 08:53:39 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Fri, 2 May 2014 14:53:39 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
Message-ID: <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>

I get what you are saying... but let's back up a second;
foolscap (in my branch
https://github.com/david415/foolscap/tree/endpoint_descriptors_server2)
uses clientFromString and serverFromString to translate twisted
endpoint descriptors into endpoint objects... AND foolscap
doesn't know any details about how the endpoint wire protocols work...
and we'd like to keep it that way. That's really the point of this
exercise.

The calling party using foolscap... in this case Tahoe-LAFS also
doesn't know anything about any wire protocols.
It simply receives twisted endpoint descriptors from the user and
passes them to foolscap.

On Fri, May 2, 2014 at 2:20 PM, Tristan Seligmann
<mithrandi at mithrandi.net> wrote:
> On 2 May 2014 15:59, David Stainton <dstainton415 at gmail.com> wrote:
>> This will work fine for the txsocksx tor client endpoint parser I
>> wrote... However the txtorcon Tor Hidden Service endpoint setup
>> requires a deferred to fire once the tor process is started... This
>> means that the endpoint parser needs to return a deferred. But this
>> breaks the interface!... meaning that foolscap or any other api using
>> this onion endpoint parser will have to special case the situation
>> where serverFromString returns a deferred.
>
> I think you're approaching this from the wrong angle; instead of
> starting the tor process during parsing of the endpoint, I think it
> would make more sense to start the tor process when the endpoint is
> started.
> --
> mithrandi, i Ainil en-Balandor, a faer Ambar
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Fri May  2 09:01:17 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 02 May 2014 15:01:17 -0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
 deferred
In-Reply-To: <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
 <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>
Message-ID: <20140502150117.6354.2006790020.divmod.xquotient.125@top>

On 02:53 pm, dstainton415 at gmail.com wrote:
>I get what you are saying... but let's back up a second;
>foolscap (in my branch
>https://github.com/david415/foolscap/tree/endpoint_descriptors_server2)
>uses clientFromString and serverFromString to translate twisted
>endpoint descriptors into endpoint objects... AND foolscap
>doesn't know any details about how the endpoint wire protocols work...
>and we'd like to keep it that way. That's really the point of this
>exercise.
>
>The calling party using foolscap... in this case Tahoe-LAFS also
>doesn't know anything about any wire protocols.
>It simply receives twisted endpoint descriptors from the user and
>passes them to foolscap.

But Foolscap does know about *endpoints*.  It knows to call `listen` or 
`connect` on them.  Both of those methods return a `Deferred`.  Any 
setup work you need to do you should be able to do in the implementation 
of those methods and however long it takes is how long it takes - just 
don't fire the `Deferred` until it is ready.

Jean-Paul



From dstainton415 at gmail.com  Fri May  2 09:13:10 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Fri, 2 May 2014 15:13:10 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <20140502150117.6354.2006790020.divmod.xquotient.125@top>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
 <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>
 <20140502150117.6354.2006790020.divmod.xquotient.125@top>
Message-ID: <CAFN1edr4FLsmavcucMT3mfNTduAHtDOXA4K7okxDPSmhQ+LkTg@mail.gmail.com>

Ah ha! Of course it is so obvious now that you point it out to me.
The onion endpoint parser can do this setup work in it's  `listen`
method which returns a `Deferred`.
Thanks for your observation/advice!

Cheers!

David

On Fri, May 2, 2014 at 3:01 PM,  <exarkun at twistedmatrix.com> wrote:
> On 02:53 pm, dstainton415 at gmail.com wrote:
>>
>> I get what you are saying... but let's back up a second;
>> foolscap (in my branch
>> https://github.com/david415/foolscap/tree/endpoint_descriptors_server2)
>> uses clientFromString and serverFromString to translate twisted
>> endpoint descriptors into endpoint objects... AND foolscap
>> doesn't know any details about how the endpoint wire protocols work...
>> and we'd like to keep it that way. That's really the point of this
>> exercise.
>>
>> The calling party using foolscap... in this case Tahoe-LAFS also
>> doesn't know anything about any wire protocols.
>> It simply receives twisted endpoint descriptors from the user and
>> passes them to foolscap.
>
>
> But Foolscap does know about *endpoints*.  It knows to call `listen` or
> `connect` on them.  Both of those methods return a `Deferred`.  Any setup
> work you need to do you should be able to do in the implementation of those
> methods and however long it takes is how long it takes - just don't fire the
> `Deferred` until it is ready.
>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From meejah at meejah.ca  Fri May  2 14:02:45 2014
From: meejah at meejah.ca (meejah)
Date: Sat, 03 May 2014 00:02:45 +0400
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <CAFN1edr4FLsmavcucMT3mfNTduAHtDOXA4K7okxDPSmhQ+LkTg@mail.gmail.com>
 (David Stainton's message of "Fri, 2 May 2014 15:13:10 +0000")
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
 <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>
 <20140502150117.6354.2006790020.divmod.xquotient.125@top>
 <CAFN1edr4FLsmavcucMT3mfNTduAHtDOXA4K7okxDPSmhQ+LkTg@mail.gmail.com>
Message-ID: <868uqk9cey.fsf@atlantis.meejah.ca>

David Stainton <dstainton415 at gmail.com> writes:

> Ah ha! Of course it is so obvious now that you point it out to me.
> The onion endpoint parser can do this setup work in it's  `listen`
> method which returns a `Deferred`.
> Thanks for your observation/advice!

Cool! Thanks for doing this. Can I pull it into txtorcon when it's
finished?

Also (more from the Tor end), someone specifying a service will also
want to specify the keys for that service. Following the 'ssl' stuff, I
guess something like "onion:80:hiddenServiceDir=/dev/shm/foo" might be
appropriate? Or perhaps even a way to specify the private key directly?

...and to bikeshed a bit, what about "anontcp:" as a prefix? Then for
client-side strings, it could look similar
(e.g. "anontcp:encrypted.google.com:443") which could in worst-case
launch a new tor instance, wait for it to bootstrap etc in
connect(). Perhaps "looking similar" is a non-feature, though :)
Another point for this is that "someday" tor will have UDP support...

thanks,
meejah



From glyph at twistedmatrix.com  Fri May  2 15:16:20 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 May 2014 14:16:20 -0700
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <868uqk9cey.fsf@atlantis.meejah.ca>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
 <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>
 <20140502150117.6354.2006790020.divmod.xquotient.125@top>
 <CAFN1edr4FLsmavcucMT3mfNTduAHtDOXA4K7okxDPSmhQ+LkTg@mail.gmail.com>
 <868uqk9cey.fsf@atlantis.meejah.ca>
Message-ID: <2C7BB29E-2626-40A5-B603-BF8144B21322@twistedmatrix.com>

On May 2, 2014, at 1:02 PM, meejah <meejah at meejah.ca> wrote:

> Another point for this is that "someday" tor will have UDP support...

There's a reason that the existing interfaces all have "stream" in their names :-).

The main reason we didn't do "datagram" at the same time is that there's a pretty clear client/server division in all stream endpoints (one side has to initiate, the other side has to respond) but given the possibilities for multicast / fan-out / fan-in with datagram sockets, "just do what UDP does" didn't seem obviously correct.

I'd love it if someone with an interest would make some datagram endpoint interfaces though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140502/3f872acd/attachment-0002.html>

From glyph at twistedmatrix.com  Fri May  2 15:18:40 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 May 2014 14:18:40 -0700
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
Message-ID: <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>


On May 2, 2014, at 6:59 AM, David Stainton <dstainton415 at gmail.com> wrote:

> Today I wrote an endpoint parser for Meejah's txtorcon Tor Hidden
> Service endpoint.

This is fantastic.  Basically this is _exactly_ the use-case that we had in mind when designing the endpoint parser plugin APIs.

Thanks so much for doing it.

(I hope you'll contribute it to txtorcon when you're done...)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140502/c94c669b/attachment-0002.html>

From dstainton415 at gmail.com  Fri May  2 18:09:03 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 3 May 2014 00:09:03 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <868uqk9cey.fsf@atlantis.meejah.ca>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
 <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>
 <20140502150117.6354.2006790020.divmod.xquotient.125@top>
 <CAFN1edr4FLsmavcucMT3mfNTduAHtDOXA4K7okxDPSmhQ+LkTg@mail.gmail.com>
 <868uqk9cey.fsf@atlantis.meejah.ca>
Message-ID: <CAFN1edoZ2A9Zr=M7wU+5WBHtCFUWoi2i6UQMgSUX=_0wNGuYQQ@mail.gmail.com>

>> Ah ha! Of course it is so obvious now that you point it out to me.
>> The onion endpoint parser can do this setup work in it's  `listen`
>> method which returns a `Deferred`.
>> Thanks for your observation/advice!
>
> Cool! Thanks for doing this. Can I pull it into txtorcon when it's
> finished?

Yes of course! I have every intention of helping out the Tor project
as much as I can... I want as many developers to benefit from this as
possible so that many more applications can and will utilize the tor
network... for anonymity, censorship resistance and great good.

> Also (more from the Tor end), someone specifying a service will also
> want to specify the keys for that service. Following the 'ssl' stuff, I
> guess something like "onion:80:hiddenServiceDir=/dev/shm/foo" might be
> appropriate? Or perhaps even a way to specify the private key directly?

Yes... precisely what I was thinking. For now specifying a directory
containing keys might be good enough...
but like you say... I should also provide a way to specify the private
key directly. Sounds good!

> ...and to bikeshed a bit, what about "anontcp:" as a prefix? Then for

Yes I agree this is essentially in the bikeshed category of discussions.
Let's try to reach consensus. Perhaps off the tahoe-lafs and twisted
mailing lists... and perhaps on the tor-dev list.
I look forward to collaborating with you (and anyone else who wants to
help out).

> client-side strings, it could look similar
> (e.g. "anontcp:encrypted.google.com:443") which could in worst-case
> launch a new tor instance, wait for it to bootstrap etc in
> connect(). Perhaps "looking similar" is a non-feature, though :)

Yeah... earlier today I also got the naive client side tor endpoint
parser working.
It uses txsocksx of course. I briefly chatted with the txsocksx author
_habnabit on #twisted about possible designs for the client side tor
endpoints. Basically we seem to all be on the same page.... in that
there may well be a need for multiple types of client side endpoints;
We can have an endpoint that has internal logic to retry the tor
connection on various ports; 9050, 9150... and another tor client side
endpoint that launches it's own tor process (using txtorcon of course)
and then uses txsocksx to establish the socks connection to tor.
Or maybe it'll be the same endpoint that behaves according to the
arguments it's passed.

> Another point for this is that "someday" tor will have UDP support...
>
> thanks,
> meejah

cheers,

david



From dstainton415 at gmail.com  Fri May  2 18:20:36 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 3 May 2014 00:20:36 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <2C7BB29E-2626-40A5-B603-BF8144B21322@twistedmatrix.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <CAMcKhMSN3cj_k4f8QZC4VDzSEh7VHaoaVQZPzkg1j3BomGJ+rw@mail.gmail.com>
 <CAFN1edov=y=37jhDJ4daGv_hxV_fJQ8guF1Tbd_mZ9Spb6xrZw@mail.gmail.com>
 <20140502150117.6354.2006790020.divmod.xquotient.125@top>
 <CAFN1edr4FLsmavcucMT3mfNTduAHtDOXA4K7okxDPSmhQ+LkTg@mail.gmail.com>
 <868uqk9cey.fsf@atlantis.meejah.ca>
 <2C7BB29E-2626-40A5-B603-BF8144B21322@twistedmatrix.com>
Message-ID: <CAFN1edqKdV6Bui3sRCZXFJM5QspCfyfxKqZACceu8kCJooay9Q@mail.gmail.com>

Ah yeah... twisted endpoints that support udp...
Perhaps when Yawning Angel finishes Lightweight Obfuscated Datagram
Protocol (LODP) there will be interesting things we can do with
this... and a more immediate perceived need for twisted datagram
endpoint interfaces.


On Fri, May 2, 2014 at 9:16 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> On May 2, 2014, at 1:02 PM, meejah <meejah at meejah.ca> wrote:
>
> Another point for this is that "someday" tor will have UDP support...
>
>
> There's a reason that the existing interfaces all have "stream" in their
> names :-).
>
> The main reason we didn't do "datagram" at the same time is that there's a
> pretty clear client/server division in all stream endpoints (one side has to
> initiate, the other side has to respond) but given the possibilities for
> multicast / fan-out / fan-in with datagram sockets, "just do what UDP does"
> didn't seem obviously correct.
>
> I'd love it if someone with an interest would make some datagram endpoint
> interfaces though.
>
> -glyph
>



From dstainton415 at gmail.com  Fri May  2 18:45:10 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 3 May 2014 00:45:10 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
Message-ID: <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>

Thanks. Sure thing. Yes I have every intention of contributing
endpoint parsers to txtorcon and txsocksx for use with tor.
Both of these could make it much easier for developers to make their
applications tor friendly.

The endpoints/endpoint parsers api is brilliant! When the tor
client/server endpoint parsers are complete then Tahoe-LAFS for
instance can simply use these endpoints without any code changes at
all. Of course I'm not saying that is all that is required for
Tahoe-LAFS to be "tor friendly"... we have detailed other
considerations in trac tickets:
https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517
http://foolscap.lothar.com/trac/ticket/203

I'm starting to think about the deployment issues... Perhaps someone
on the list knows of the "correct" setup.py (distutils/setuputils?)
procedure to deploy twisted plugins? I shall have to research this
soon. For now my hacky development/testing flow works OK.


On Fri, May 2, 2014 at 9:18 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> On May 2, 2014, at 6:59 AM, David Stainton <dstainton415 at gmail.com> wrote:
>
> Today I wrote an endpoint parser for Meejah's txtorcon Tor Hidden
> Service endpoint.
>
>
> This is fantastic.  Basically this is _exactly_ the use-case that we had in
> mind when designing the endpoint parser plugin APIs.
>
> Thanks so much for doing it.
>
> (I hope you'll contribute it to txtorcon when you're done...)
>
> -glyph
>



From glyph at twistedmatrix.com  Fri May  2 23:09:29 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 2 May 2014 22:09:29 -0700
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
 <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
Message-ID: <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>

On May 2, 2014, at 5:45 PM, David Stainton <dstainton415 at gmail.com> wrote:

> I'm starting to think about the deployment issues... Perhaps someone
> on the list knows of the "correct" setup.py (distutils/setuputils?)
> procedure to deploy twisted plugins? I shall have to research this
> soon. For now my hacky development/testing flow works OK.


This stack overflow question still hasn't gotten a great answer:
<https://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py-for-a-twistd-twisted-plugin-that-works-with-setuptools>
If you figure something out, please post it there.

However, assuming a post-deluvian version of pip, this simple setup appears to work OK for me:
<https://github.com/glyph/txsni/blob/master/setup.py#L16>
and I haven't found a setup that breaks it yet.

-glyph



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140502/43ca64bf/attachment-0002.html>

From exarkun at twistedmatrix.com  Sat May  3 06:20:41 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 03 May 2014 12:20:41 -0000
Subject: [Twisted-Python]
 =?utf-8?q?Some_comments_regarding_=235190_-_=60?=
 =?utf-8?q?=60RFC_6125_=28=22Service_Identity=22=29_implementation=C2=B4?=
 =?utf-8?b?wrQ=?=
In-Reply-To: <C9EA14EB-C6A7-48DD-924A-5662E82BD119@twistedmatrix.com>
References: <20140430122130.6354.1569482577.divmod.xquotient.52@top>
 <C9EA14EB-C6A7-48DD-924A-5662E82BD119@twistedmatrix.com>
Message-ID: <20140503122041.6354.1241503771.divmod.xquotient.163@top>

On 1 May, 07:23 pm, glyph at twistedmatrix.com wrote:
>
>On Apr 30, 2014, at 5:21 AM, exarkun at twistedmatrix.com wrote:
>>I've just noticed that the changeset for #5190 included some untested 
>>code.  Specifically, there are no tests for the code which detects 
>>missing dependencies and emits warnings about them.
>
>My bad.  Well, technically hawkowl's bad; hawkowl is a committer and 
>did the review and therefore has all the criminal liability in this 
>case, but as the author who wrote the code I bear some responsibility, 
>at least in some abstract, hypothetical sense ;-).

My hope is that by drawing attention to examples of this kind of mistake 
will help us avoid making the mistake in the future.  Considering what 
my email prompted you to write, I think it may work. :)
>
>Thanks for working on the fix; it looks like the relevant ticket is 
><https://twistedmatrix.com/trac/ticket/7097>.  I'll try to review that 
>as soon as it's ready; let me know.

No problem.  I probably should have started my previous email with 
thanks to you and hawkowl for working on that feature.  It is *really* 
good to have service identity checking support in Twisted.
>>
>>I'd previously noticed that this code was broken but hadn't realized 
>>this was because it was untested.
>
>Neither the author nor the reviewer realized this either, apparently. 
>Certainly it wasn't an intentional omission.
>>I don't think there's any disagreement whatsoever over Twisted's 
>>testing requirements.  All code must have full line and branch 
>>coverage (as reported by the coverage.py tool).  Developers, please 
>>write tests for all of your code (and please learn to do test-driven 
>>development - it will make this task easier, I promise).  Reviewers, 
>>please don't accept proposed changes that include untested code.
>
>The problem with code like this is that, in some configurations, it is 
>in fact reported as covered by coverage.py.  It requires manual 
>examination to get the intersection of a diff and a coverage report, 
>and even when you do, we still have too many places where it's "okay" 
>to skip coverage.

This is true - but I'm not sure the code in this case is particularly 
special.  It's nearly always possible to write code and tests such that 
coverage.py says your code is covered but without actually having any 
meaningful test coverage of the implementation.  After all, coverage.py 
only knows that a line ran or didn't.

The problem of platform- or environment-specific code requiring multiple 
branches which can never always all run is an extra challenge but I 
think a widely applicable solution is to not do that.  To add to your 
comments below, if there is platform- or environment-specific code then 
parameterize it on the environment and write tests for all of the cases.
>
>As the author I looked at coverage periodically and it looked sort of 
>like what I expected.  Since I was testing multiple installed-library 
>configurations I had used "coverage combine" which misleadingly told me 
>that it was all covered (although this particular code should have been 
>tested independently without requiring a combined run).  And I'm sure 
>the reviewer thought about it a little bit, but even if they'd looked 
>at a coverage report, it might have looked like it was OK to skip these 
>particular lines.  And I was in fact doing test-driven development; I 
>didn't add the warning code there until I was looking at a failing test 
>because one of the buildbots didn't have one of my expected 
>dependencies installed, and I made my tests pass locally by having an 
>environment without those dependencies installed locally either.
>
>Yes, I understand how this isn't really 100% TDD, and that a failure on 
>a buildbot should have resulted in me writing a new test; mistakes were 
>made etc.  But all TDD necessarily involves the occasional 
>error/error/pass where there really ought to have been a pass/fail/pass 
>- if we understood what was going on with all of our code all the time 
>we probably wouldn't need tests in the first place :-).  It's a bit 
>disingenuous to say that I need to "learn to do test-driven 
>development" to avoid mistakes like this, though.
>
>On the other side of the equation, I imagine that a reviewer looking at 
>this, even carefully considering coverage, might see a missed line on 
>some buildbot or in their local run and then thought "oh, of course, 
>but that line will be run if I had/didn't have that library installed". 
>And there are some bits of code which are acceptable to cover in this 
>manner (except they should have direct test coverage from actual tests, 
>rather than just importing the test module, which coverage.py won't 
>show you).  It's a quite subtle point to understand that this 
>particular kind of code should actually be fully covered in all 
>configurations.  Especially because these tests are smack in the middle 
>of a file which will be validly missing coverage in some supported 
>configurations (no pyOpenSSL installed) and surrounded with thickets of 
>conditionals and test skips to optionally import more dependencies than 
>just this one.
>
>We should remain vigilant, but I think that if we want to really reduce 
>errors like this in the future we need to make them easier to spot. 
>Failing that we need to have more specific suggestions.  In this case, 
>I happen to know that I do TDD and that Hawkowl was is aware of the 
>standard on coverage issues (and is at least aware of coverage.py, 
>whether or not it was run as part of this review), so those two 
>suggestions aren't going to help as we're already doing them.  Any time 
>the solution to a problem is "everybody should just try harder" that 
>seems like a bet against human fallibility.
>
>So until someone has a month to spend on an all-singing all-dancing 
>combined ratcheting coverage report for all the builders and a 
>fantastic visualization for its output which highlights every possible 
>coverage issue, here are some specific suggestions which might avoid 
>some parts of this class of error:

I don't think we even have a plan for a tool that will report whether a 
change introduces code that isn't *really* tested (contrast "tested" 
with "executed").

I think this may be an area where we do actually need to rely on people 
doing a good job.  Perhaps to counter balance that we need to eliminate 
more of the other crap involved in the development process?  For 
example, if reviewers never had to spend any time thinking about whether 
the whitespace in a change was correct, they would have that much more 
brain power to apply to assessing the quality of the test suite.
>
>For authors (what I could have done better):
>
>I know I said they're inevitable, but whenever you get an error/pass, 
>always consider where you could make it a clean fail/pass instead.  You 
>(and by "you" I obviously mean "me") think you understand why an error 
>happened but the only way to really demonstrate you understand it well 
>enough to convert it into an assertion that fails with a useful error 
>message.
>Be intensely suspicious of any code that needs to run at import time. 
>I did stuff the warning into a function, which at least doesn't leak 
>local variables, but I probably could have moved this warning somewhere 
>easier to manage, and would have noticed warnings coming out of tests 
>as opposed to just being printed at the beginning.  Declarative like 
>deprecatedModuleAttribute automate some of the magic for making code- 
>level artifacts emit warnings when bound to and used rather than 
>accidents of their initial import, so make use of those. (I'm still 
>thinking about how I could have applied that in this specific case; I 
>probably could have.)
>Configure your development environment to be more aggressive about 
>warnings (at least for now, eventually trial should fix this for you, 
>see <https://twistedmatrix.com/trac/ticket/6348>).  I don't think it 
>would have helped in this particular case because the warning itself is 
>emitted at import time (see point 2) but this sort of mistake crops up 
>unfortunately frequently related to deprecation warnings, which are a 
>bit more common, and could often be caught by a better setup.  I 
>recently changed my PYTHONWARNINGS environment variable to 
>'all::DeprecationWarning,all::UserWarning', and that seems to catch 
>most things.  (Unfortunately setting it to simply 'all' produces too 
>much noise from the stdlib and dependencies so it's better to be 
>slightly more restrictive.)
>
>For reviewers (what hawkowl could have done better):
>
>Run coverage.  Particularly, run coverage just on the relevant and 
>changed test modules, and make sure the system under test gets run 
>directly and just accidentally executed by running the code.
>I know I've been reminding reviewers lately to give clear feedback 
>about what elements of reviews are suggestions and which are required 
>fixes for violations of policy, and that may produce the subjective 
>impression that I've been asking for faster or less careful reviews. 
>If so, I should correct that impression: I would like there to be less 
>bike shedding, but it's still pretty important that the £10 million 
>reactor actually work.  Any lack of test coverage is at least a 
>potential policy violation.  Even if you think you understand why it's 
>missing, even if it looks like a platform variance that doesn't make 
>sense to test on the machine you're running, always ask the author to 
>explain or justify why coverage isn't there, if it could be added to a 
>cross-platform test with a reasonable (or, in many cases, even an 
>existing) fake; if there's no relevant fake and it would be too much 
>work, maybe we need to file a ticket for implementing some test 
>support.
>Especially if you're dealing with a new feature or a significant 
>behavior change, always try to actually run and interact with the code 
>and look at its output.  In this case, noticing the whitespace / 
>formatting errors in the warning messages might have lead us to spot 
>the coverage error earlier.  (Jean-Paul made some comments to me when 
>he noticed it, but it was an off-the-cuff thing after the branch had 
>already been landed and not part of a code review; context is important 
>here, as evidenced by the fact that it took him some time to realize 
>that it was indicative of a test coverage issue!

Thanks!  These are great suggestions.  Can we record them in a way that 
lets all Twisted contributors learn from this case (instead of only the 
people reading this thread) - but without adding to the already 
unreasonably large quantity of text new contributors are ostensibly 
already responsible for reading?

How's the unified Contributing-to-Twisted documentation effort coming?

Jean-Paul



From glyph at twistedmatrix.com  Sat May  3 13:49:15 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 3 May 2014 12:49:15 -0700
Subject: [Twisted-Python]
 =?iso-8859-1?q?Some_comments_regarding_=235190_-?=
 =?iso-8859-1?q?_=60=60RFC_6125_=28=22Service_Identity=22=29_implementatio?=
 =?iso-8859-1?q?n=B4=B4?=
In-Reply-To: <20140503122041.6354.1241503771.divmod.xquotient.163@top>
References: <20140430122130.6354.1569482577.divmod.xquotient.52@top>
 <C9EA14EB-C6A7-48DD-924A-5662E82BD119@twistedmatrix.com>
 <20140503122041.6354.1241503771.divmod.xquotient.163@top>
Message-ID: <08612AA3-93F1-4ACA-A4F4-CCE1F5BF1CD2@twistedmatrix.com>


On May 3, 2014, at 5:20 AM, exarkun at twistedmatrix.com wrote:

> On 1 May, 07:23 pm, glyph at twistedmatrix.com wrote:
>> 
>> On Apr 30, 2014, at 5:21 AM, exarkun at twistedmatrix.com wrote:
>>> I've just noticed that the changeset for #5190 included some untested code.  Specifically, there are no tests for the code which detects missing dependencies and emits warnings about them.
>> 
>> My bad.  Well, technically hawkowl's bad; hawkowl is a committer and did the review and therefore has all the criminal liability in this case, but as the author who wrote the code I bear some responsibility, at least in some abstract, hypothetical sense ;-).
> 
> My hope is that by drawing attention to examples of this kind of mistake will help us avoid making the mistake in the future.  Considering what my email prompted you to write, I think it may work. :)

Mission accomplished, I guess :-).  Please continue doing so.  I wish that every commit to trunk would prompt a thread on this list, really.  Despite the epically ridiculous amount of email I get, this list is still a bit too low-traffic for my taste.

>> Thanks for working on the fix; it looks like the relevant ticket is <https://twistedmatrix.com/trac/ticket/7097>.  I'll try to review that as soon as it's ready; let me know.
> 
> No problem.  I probably should have started my previous email with thanks to you and hawkowl for working on that feature.  It is *really* good to have service identity checking support in Twisted.

Thanks for saying so.

>> The problem with code like this is that, in some configurations, it is in fact reported as covered by coverage.py.  It requires manual examination to get the intersection of a diff and a coverage report, and even when you do, we still have too many places where it's "okay" to skip coverage.
> 
> This is true - but I'm not sure the code in this case is particularly special.  It's nearly always possible to write code and tests such that coverage.py says your code is covered but without actually having any meaningful test coverage of the implementation.  After all, coverage.py only knows that a line ran or didn't.
> 
> The problem of platform- or environment-specific code requiring multiple branches which can never always all run is an extra challenge but I think a widely applicable solution is to not do that.  To add to your comments below, if there is platform- or environment-specific code then parameterize it on the environment and write tests for all of the cases.

I think what really makes this an extra challenge is that we (well, all Python programmers, really) have a smattering of different idioms for cases like this and we don't have a succinct way of expressing the optional dependency both in the import, the implementation, and the tests.

>> So until someone has a month to spend on an all-singing all-dancing combined ratcheting coverage report for all the builders and a fantastic visualization for its output which highlights every possible coverage issue, here are some specific suggestions which might avoid some parts of this class of error:
> 
> I don't think we even have a plan for a tool that will report whether a change introduces code that isn't *really* tested (contrast "tested" with "executed").

Indeed not.  So we need some ideas in the meanwhile :-).

> I think this may be an area where we do actually need to rely on people doing a good job. Perhaps to counter balance that we need to eliminate more of the other crap involved in the development process?  For example, if reviewers never had to spend any time thinking about whether the whitespace in a change was correct, they would have that much more brain power to apply to assessing the quality of the test suite.

Speaking of thanking people for things, we should also thank richard wall, david reid, you, and hawkowl for maintenance of twistedchecker.  It's a lot better than it was :).

> Thanks!  These are great suggestions.  Can we record them in a way that lets all Twisted contributors learn from this case (instead of only the people reading this thread) - but without adding to the already unreasonably large quantity of text new contributors are ostensibly already responsible for reading?

Those sound like diametrically opposed ideas :-).

> How's the unified Contributing-to-Twisted documentation effort coming?

Yeah, how is that coming?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140503/f3abe6a0/attachment-0002.html>

From trac at twistedmatrix.com  Sun May  4 00:05:16 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 04 May 2014 06:05:16 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1399183516.04.9051349321822873887@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140504/673aa15e/attachment-0002.html>

From juanito1982 at gmail.com  Sun May  4 02:31:58 2014
From: juanito1982 at gmail.com (=?UTF-8?Q?Juan_Antonio_Iba=C3=B1ez_Santorum?=)
Date: Sun, 4 May 2014 10:31:58 +0200
Subject: [Twisted-Python] Log level using Twistd
In-Reply-To: <20140430115523.6354.1752102256.divmod.xquotient.43@top>
References: <CAHLYDCuJevGZu=yTZhfjYU8SjVcxasqLkk7w2TrtUt9B9QwxJw@mail.gmail.com>
 <20140430115523.6354.1752102256.divmod.xquotient.43@top>
Message-ID: <CAHLYDCsipuu3CHy+CWh8d-pM7dOz2dqt03Qx8NwNujoq2PTEXg@mail.gmail.com>

Thank you Jean-Paul

It works ok using the PythonLoggingObserver

Regards


2014-04-30 13:55 GMT+02:00 <exarkun at twistedmatrix.com>:

> On 08:57 am, juanito1982 at gmail.com wrote:
>
>> Hello,
>>
>>  I am trying to modify loglevel withou result. I configure my app logging
>> inside the tac file as:
>>
>
> You omitted the imports necessary to interpret the example code with
> certainty but I'll make some guesses.  Next time post a complete, self-
> contained example.
>
> This line:
>
>
>> logging.basicConfig(level=logging.ERROR, format="%(asctime)s ---
>> %(name)s -
>> %(levelname)s - %(message)s")
>>
>
> configures the standard library logging module.
>
> This line:
>
>
>> logfile = DailyLogFile("gdumper.log", "/var/log")
>>
>
> creates a log writer from the Twisted logging system that will write to a
> file.
>
> And this line:
>
>>
>> application.setComponent(ILogObserver, FileLogObserver(logfile).emit)
>>
>
> makes `twistd` configure Twisted's logging system with a log observer that
> will use that log writer to record log events.
>
> Twisted's logging system and the standard library logging system are
> separate things, though.  Configuring the standard library logging system
> will not make any difference to Twisted's logging system.
>
> If you want log messages emitted by `log.msg` and `log.err` to traverse
> the standard library logging system then the minimum you need to do is use
> `twisted.python.log.PythonLoggingObserver` instead of `FileLogObserver`.
>
> `PythonLoggingObserver` observes log events in the Twisted logging system
> and sends them to the standard library logging system.
>
> Once you do that you may be able to configure the standard library logging
> system to behave as you desire.
>
> Jean-Paul
>
>  logging.basicConfig call seems do not apply as I get both log.msg and
>> log.err messages into the log. Is there any other way to set up log level?
>>
>> Regards
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140504/2a7cf868/attachment-0002.html>

From glyph at twistedmatrix.com  Sun May  4 20:17:28 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 4 May 2014 19:17:28 -0700
Subject: [Twisted-Python] overly specific ImportError assert for python 3?
Message-ID: <8ECA522C-7E90-4CD5-B37A-BAFB3AD3AAB1@twistedmatrix.com>

cyli was working on <https://twistedmatrix.com/trac/ticket/7144> and encountered this peculiar failure on her branch (and not on trunk): <https://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212/steps/shell/logs/stdio>.

The interesting bit of the failure is that in one case, the ImportError's message is "import of 'service_identity' halted; None in sys.modules" and on trunk it's apparently 'No module named service_identity'.

The branch in question changes conch, which isn't even tested on python 3.

So... anyone have an idea what's going on?

-g


From tom.prince at ualberta.net  Mon May  5 02:07:30 2014
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 05 May 2014 02:07:30 -0600
Subject: [Twisted-Python] Distributing apilinks.py
In-Reply-To: <CAFycZ9emvGU+E9dt6ZHv=gvCW29fstPvH5m_85qDt_EbPObDBg@mail.gmail.com>
References: <CAFycZ9emvGU+E9dt6ZHv=gvCW29fstPvH5m_85qDt_EbPObDBg@mail.gmail.com>
Message-ID: <874n147inx.fsf@hermes.hocat.ca>

Eventually, apilinks should just go away. I think I have convinced
Michael (pydoctor's maintainer) that pydoctor should just genereate an
objects.inv that sphinx can read. Then the regular :py:*: annoations can
be used, rather than the apilinks ones (which interpert <> backwards
anyway).

That doesn't address the issue of what to do in the mean time. Looking
at the code, it looks very similar to what the builtin extlinks
extension does; except that apilinks wants `path.to.object <title> and
extlinks wants `title <path.to.object>`. (But I guess this doesn't
address the issue of # in the links being put in the wrong place. But,
https://twistedmatrix.com/documents/current/api/twisted.web.iweb.IRequest.getSession.html
does exists (probably to make this kind of linking work.

  Tom



From adi at roiban.ro  Mon May  5 02:23:09 2014
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 5 May 2014 11:23:09 +0300
Subject: [Twisted-Python] Distributing apilinks.py
In-Reply-To: <874n147inx.fsf@hermes.hocat.ca>
References: <CAFycZ9emvGU+E9dt6ZHv=gvCW29fstPvH5m_85qDt_EbPObDBg@mail.gmail.com>
 <874n147inx.fsf@hermes.hocat.ca>
Message-ID: <CAFycZ9ePiKu9BduSHytbuYbjPr7QUeKC0U0G1u5ghWVqAFORhA@mail.gmail.com>

Hi Tom,

Many, many thanks for pushing this forward!

IRequest.getSession.html and extlinks is a workaround, but I hope that
we can fix the source problem soon so that we don't have to stick with
the workaround for to long.

Is there a ticket in pydoctor for the generation of objects.inv ?

Michael, are you convinced that it would be nice for pydoctor to
generate objects.inv ?

I think that implementing this feature could help other project using
only sphinx for both narrative and api documentation.
I can try to send a patch for that.

Thanks!



On 5 May 2014 11:07, Tom Prince <tom.prince at ualberta.net> wrote:
> Eventually, apilinks should just go away. I think I have convinced
> Michael (pydoctor's maintainer) that pydoctor should just genereate an
> objects.inv that sphinx can read. Then the regular :py:*: annoations can
> be used, rather than the apilinks ones (which interpert <> backwards
> anyway).
>
> That doesn't address the issue of what to do in the mean time. Looking
> at the code, it looks very similar to what the builtin extlinks
> extension does; except that apilinks wants `path.to.object <title> and
> extlinks wants `title <path.to.object>`. (But I guess this doesn't
> address the issue of # in the links being put in the wrong place. But,
> https://twistedmatrix.com/documents/current/api/twisted.web.iweb.IRequest.getSession.html
> does exists (probably to make this kind of linking work.
>
>   Tom



-- 
Adi Roiban



From techtonik at gmail.com  Mon May  5 03:43:09 2014
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 5 May 2014 12:43:09 +0300
Subject: [Twisted-Python] Serial interface for software program
Message-ID: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>

Hello, network hackers,

Recently I've got a Raspberry Pi and a friend showed me its serial
interface and helped to setup it. I was stunned. What I saw - you open
serial terminal, and you jump in into the middle of boot section. Just
open a terminal and you see what's going on inside of R.Pi. Any time.
That's was an intro. =)

For a long time I wanted the same interface for debugging software
programs. When I was hacking on Spyder I found that my human brain is
too limited to squeeze details of dynamic of interaction of objects at
run-time. Spyder is written in Python with Qt, and it is a parallel
application much like any Twisted app is. But I wanted to push the
progress, I have to deal with complexity, so I badly needed to be able
to draw a video of interaction at run-time. That was the problem I
tried to solve.

And for the first step I needed a way to connect to Spyder at run-time
and see what's going on. I didn't know how to call that way before,
but now I have a rather accurate wording - "a serial interface for an
application". That is the background for the question I am trying to
ask.

What is the best way to implement such interface considering the
following properties:
1. it needs to be simple (so that you can quickly create python script
that reads the info)
2. it needs to be universal (so that script for one app worked for other)
3. it should be asynchronous (connected terminal should not degrade performance)
4. it needs to be reliable (at least detecting missing packets)
5. and cross-platform (and pure python)

Why Twisted? For the first I think that this problem is actual for
people who are dealing with complexity of dynamic and interconnected
systems built with the help of Twisted. For the second I believe it
can only be solved or analyzed by people skilled in interprocess and
internetwork communications.

One button test:
1. program behaves weird
2. user hits the button
3. terminal pops up
4. shows a lot of data for a running program

I am interested to know.
1. how the button should discover the program
network port seems cool, but what about two parallel programs? what
about different programs that provide this interface?

2. how terminal receives the data
i see it as line based - one line - one event, everything is text

3. how to make it fast
TCP clearly won't here

4. how to send the data
what if two threads (or parallel code) produce serial data? who should
run the server that serves connected terminals, and how other thread
will send message to this server? you can not run two TCP servers on
the same port on the app side, so is there an alternative? how to
detect missing data in a stream? how to avoid dealing with incomplete
packets and low level network details?

Thanks. I'd like to get back to hacking on Spyder one day, but this is
a stumbling block for me every time I think about it or any program of
compared complexity.
-- 
anatoly t.



From exarkun at twistedmatrix.com  Mon May  5 05:43:36 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 05 May 2014 11:43:36 -0000
Subject: [Twisted-Python] overly specific ImportError assert for python
	3?
In-Reply-To: <8ECA522C-7E90-4CD5-B37A-BAFB3AD3AAB1@twistedmatrix.com>
References: <8ECA522C-7E90-4CD5-B37A-BAFB3AD3AAB1@twistedmatrix.com>
Message-ID: <20140505114336.6354.1234946521.divmod.xquotient.173@top>

On 02:17 am, glyph at twistedmatrix.com wrote:
>cyli was working on <https://twistedmatrix.com/trac/ticket/7144> and 
>encountered this peculiar failure on her branch (and not on trunk): 
><https://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212/steps/shell/logs/stdio>.
>
>The interesting bit of the failure is that in one case, the 
>ImportError's message is "import of 'service_identity' halted; None in 
>sys.modules" and on trunk it's apparently 'No module named 
>service_identity'.
>
>The branch in question changes conch, which isn't even tested on python 
>3.
>
>So... anyone have an idea what's going on?

Here's the "versions" report from a build on that builder which recently 
succeeded:

http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2210/steps 
/report-module-versions/logs/versions

And here's the "versions" report from a build of that branch on that 
builder:

http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212/steps 
/report-module-versions/logs/versions

Notice that the state of a somewhat relevant dependency is different 
between the two builds.  Backing up, look at which build slave did each 
of those builds:

http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2210
http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212

So I suppose the test only passes by accident on trunk because it 
happened to be run on one slave with one configuration rather than the 
other slave with the other configuration...

Considering we seem to have no mechanism whatsoever for ensuring the 
configuration of two different slaves for a particular builder is the 
same, I wonder if we should reconsider using multiple slaves for 
individual builders.

Jean-Paul



From _ at lvh.io  Mon May  5 09:42:38 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 5 May 2014 10:42:38 -0500
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
Message-ID: <CAE_Hg6ajBqwicKxGm1g_6cO5WA6gppvMFVtDXWF2uVOnmV9g8Q@mail.gmail.com>

Hi Anatoly,


Do you know about manhole? I made a video that also demos axiom, but it
should show you what manhole does :)

https://www.youtube.com/watch?v=3-UZiO-AnLc

Essentially it's "repl in a running process".


hth
lvh


On Mon, May 5, 2014 at 4:43 AM, anatoly techtonik <techtonik at gmail.com>wrote:

> Hello, network hackers,
>
> Recently I've got a Raspberry Pi and a friend showed me its serial
> interface and helped to setup it. I was stunned. What I saw - you open
> serial terminal, and you jump in into the middle of boot section. Just
> open a terminal and you see what's going on inside of R.Pi. Any time.
> That's was an intro. =)
>
> For a long time I wanted the same interface for debugging software
> programs. When I was hacking on Spyder I found that my human brain is
> too limited to squeeze details of dynamic of interaction of objects at
> run-time. Spyder is written in Python with Qt, and it is a parallel
> application much like any Twisted app is. But I wanted to push the
> progress, I have to deal with complexity, so I badly needed to be able
> to draw a video of interaction at run-time. That was the problem I
> tried to solve.
>
> And for the first step I needed a way to connect to Spyder at run-time
> and see what's going on. I didn't know how to call that way before,
> but now I have a rather accurate wording - "a serial interface for an
> application". That is the background for the question I am trying to
> ask.
>
> What is the best way to implement such interface considering the
> following properties:
> 1. it needs to be simple (so that you can quickly create python script
> that reads the info)
> 2. it needs to be universal (so that script for one app worked for other)
> 3. it should be asynchronous (connected terminal should not degrade
> performance)
> 4. it needs to be reliable (at least detecting missing packets)
> 5. and cross-platform (and pure python)
>
> Why Twisted? For the first I think that this problem is actual for
> people who are dealing with complexity of dynamic and interconnected
> systems built with the help of Twisted. For the second I believe it
> can only be solved or analyzed by people skilled in interprocess and
> internetwork communications.
>
> One button test:
> 1. program behaves weird
> 2. user hits the button
> 3. terminal pops up
> 4. shows a lot of data for a running program
>
> I am interested to know.
> 1. how the button should discover the program
> network port seems cool, but what about two parallel programs? what
> about different programs that provide this interface?
>
> 2. how terminal receives the data
> i see it as line based - one line - one event, everything is text
>
> 3. how to make it fast
> TCP clearly won't here
>
> 4. how to send the data
> what if two threads (or parallel code) produce serial data? who should
> run the server that serves connected terminals, and how other thread
> will send message to this server? you can not run two TCP servers on
> the same port on the app side, so is there an alternative? how to
> detect missing data in a stream? how to avoid dealing with incomplete
> packets and low level network details?
>
> Thanks. I'd like to get back to hacking on Spyder one day, but this is
> a stumbling block for me every time I think about it or any program of
> compared complexity.
> --
> anatoly t.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140505/79fd3356/attachment-0002.html>

From itamar at itamarst.org  Mon May  5 11:24:17 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 05 May 2014 13:24:17 -0400
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
Message-ID: <5367C941.7020007@itamarst.org>

If Spyder *just* uses Qt, it's a single-threaded event loop. There's a 
3rd party event loop for Twisted that runs on top of Qt (qt4reactor), 
which would allow Twisted and Qt code to run in the same thread.

-Itamar



From glyph at twistedmatrix.com  Mon May  5 12:46:28 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 5 May 2014 11:46:28 -0700
Subject: [Twisted-Python] overly specific ImportError assert for python
	3?
In-Reply-To: <20140505114336.6354.1234946521.divmod.xquotient.173@top>
References: <8ECA522C-7E90-4CD5-B37A-BAFB3AD3AAB1@twistedmatrix.com>
 <20140505114336.6354.1234946521.divmod.xquotient.173@top>
Message-ID: <2E13B7A5-E61E-4C1A-B0F2-996E4F21D082@twistedmatrix.com>


On May 5, 2014, at 4:43 AM, exarkun at twistedmatrix.com wrote:

> On 02:17 am, glyph at twistedmatrix.com wrote:
>> cyli was working on <https://twistedmatrix.com/trac/ticket/7144> and encountered this peculiar failure on her branch (and not on trunk): <https://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212/steps/shell/logs/stdio>.
>> 
>> The interesting bit of the failure is that in one case, the ImportError's message is "import of 'service_identity' halted; None in sys.modules" and on trunk it's apparently 'No module named service_identity'.
>> 
>> The branch in question changes conch, which isn't even tested on python 3.
>> 
>> So... anyone have an idea what's going on?
> 
> Here's the "versions" report from a build on that builder which recently succeeded:
> 
> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2210/steps /report-module-versions/logs/versions
> 
> And here's the "versions" report from a build of that branch on that builder:
> 
> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212/steps /report-module-versions/logs/versions
> 
> Notice that the state of a somewhat relevant dependency is different between the two builds.  Backing up, look at which build slave did each of those builds:
> 
> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2210
> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212
> 
> So I suppose the test only passes by accident on trunk because it happened to be run on one slave with one configuration rather than the other slave with the other configuration...
> 
> Considering we seem to have no mechanism whatsoever for ensuring the configuration of two different slaves for a particular builder is the same, I wonder if we should reconsider using multiple slaves for individual builders.

Actually, one of the areas I was hoping that we could focus on for 14.1 would be to upgrade our packaging infrastructure and have our builders acquire dependencies automatically via 'pip install' or similar.

See for example <https://twistedmatrix.com/trac/ticket/3696>.

It's interesting to me that I've had issues with the divergent dependencies on this exact builder twice, and both times re-building trunk multiple times has happened to always hit the "good" builder, making it look like the branch is somehow at fault.  What's up with that?  Just luck of the draw

-glyph




From glyph at twistedmatrix.com  Mon May  5 12:48:15 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 5 May 2014 11:48:15 -0700
Subject: [Twisted-Python] Distributing apilinks.py
In-Reply-To: <874n147inx.fsf@hermes.hocat.ca>
References: <CAFycZ9emvGU+E9dt6ZHv=gvCW29fstPvH5m_85qDt_EbPObDBg@mail.gmail.com>
 <874n147inx.fsf@hermes.hocat.ca>
Message-ID: <35B861B5-BB3B-41BC-AB2C-3DA2F5946AC1@twistedmatrix.com>

On May 5, 2014, at 1:07 AM, Tom Prince <tom.prince at ualberta.net> wrote:

> Eventually, apilinks should just go away. I think I have convinced
> Michael (pydoctor's maintainer) that pydoctor should just genereate an
> objects.inv that sphinx can read. Then the regular :py:*: annoations can
> be used, rather than the apilinks ones

This would be very nice.  Did you file an actual bug on pydoctor or is this a conversation which will be momentarily forgotten? :)

>  (which interpert <> backwards anyway).

Yes, this annoyed me greatly. :-\.

-glyph




From sank.daniel at gmail.com  Mon May  5 12:49:02 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 5 May 2014 11:49:02 -0700
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <5367C941.7020007@itamarst.org>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
 <5367C941.7020007@itamarst.org>
Message-ID: <CAKN9TDJTpJTffc4-rPix8byySe8LoMz0CJg+xutQrTTwrCra4w@mail.gmail.com>

> There's a 3rd party event loop for Twisted that runs on top of Qt
(qt4reactor), which would
> allow Twisted and Qt code to run in the same thread.

Speaking of which, why isn't that thing officially part of twisted? Super
useful.

Daniel



On Mon, May 5, 2014 at 10:24 AM, Itamar Turner-Trauring <itamar at itamarst.org
> wrote:

> If Spyder *just* uses Qt, it's a single-threaded event loop. There's a 3rd
> party event loop for Twisted that runs on top of Qt (qt4reactor), which
> would allow Twisted and Qt code to run in the same thread.
>
> -Itamar
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140505/0a9ca8bb/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon May  5 13:06:00 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 05 May 2014 19:06:00 -0000
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <CAKN9TDJTpJTffc4-rPix8byySe8LoMz0CJg+xutQrTTwrCra4w@mail.gmail.com>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
 <5367C941.7020007@itamarst.org>
 <CAKN9TDJTpJTffc4-rPix8byySe8LoMz0CJg+xutQrTTwrCra4w@mail.gmail.com>
Message-ID: <20140505190600.6354.951754893.divmod.xquotient.184@top>

On 06:49 pm, sank.daniel at gmail.com wrote:
>>There's a 3rd party event loop for Twisted that runs on top of Qt
>(qt4reactor), which would
>>allow Twisted and Qt code to run in the same thread.
>
>Speaking of which, why isn't that thing officially part of twisted? 
>Super
>useful.

The PyQt team insists that the PyQt license is incompatible with 
Twisted's license (this is an intentional simplification, you can read 
more about the issue on PyQt's website if you really care).

Since PySide now exists this is potentially no longer an issue. 
However, the last thing I heard about using PySide to run the Qt reactor 
is that it segfaulted sometimes.

So perhaps the reason is that someone needs to do some work to determine 
if PySide is actually safe to use with the Qt reactor now and, if it is, 
shuffle some code around.

However, I'm not even sure if the GUI reactors *should* be distributed 
as part of the main Twisted package.  They are already first-class 
reactors via the plugin system.  Independent releases let them track 
changes in the GUI library they're each concerned with more quickly than 
they could if they were part of Twisted itself.

Perhaps there are other reasons, like simplicity of packaging or quality 
of continuous integration testing, that would override those issues and 
make it worth bringing Qt reactor back into Twisted.  Sorting that out 
is also a task that requires someone interested to step up an do some 
work, though. :)

Jean-Paul



From dustin at v.igoro.us  Mon May  5 14:22:41 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Mon, 5 May 2014 16:22:41 -0400
Subject: [Twisted-Python] overly specific ImportError assert for python
	3?
In-Reply-To: <2E13B7A5-E61E-4C1A-B0F2-996E4F21D082@twistedmatrix.com>
References: <8ECA522C-7E90-4CD5-B37A-BAFB3AD3AAB1@twistedmatrix.com>
 <20140505114336.6354.1234946521.divmod.xquotient.173@top>
 <2E13B7A5-E61E-4C1A-B0F2-996E4F21D082@twistedmatrix.com>
Message-ID: <CAJtE5vQEgBBGsj44AMfEHbLHT--7aSeNj=brTw1y7BqsMLMs9Q@mail.gmail.com>

Using 'pip freeze' to print versions can help, as can either using
requirements.txt or 'pip install -U' to do the installs.

On Mon, May 5, 2014 at 2:46 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On May 5, 2014, at 4:43 AM, exarkun at twistedmatrix.com wrote:
>
>> On 02:17 am, glyph at twistedmatrix.com wrote:
>>> cyli was working on <https://twistedmatrix.com/trac/ticket/7144> and encountered this peculiar failure on her branch (and not on trunk): <https://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212/steps/shell/logs/stdio>.
>>>
>>> The interesting bit of the failure is that in one case, the ImportError's message is "import of 'service_identity' halted; None in sys.modules" and on trunk it's apparently 'No module named service_identity'.
>>>
>>> The branch in question changes conch, which isn't even tested on python 3.
>>>
>>> So... anyone have an idea what's going on?
>>
>> Here's the "versions" report from a build on that builder which recently succeeded:
>>
>> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2210/steps /report-module-versions/logs/versions
>>
>> And here's the "versions" report from a build of that branch on that builder:
>>
>> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212/steps /report-module-versions/logs/versions
>>
>> Notice that the state of a somewhat relevant dependency is different between the two builds.  Backing up, look at which build slave did each of those builds:
>>
>> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2210
>> http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/2212
>>
>> So I suppose the test only passes by accident on trunk because it happened to be run on one slave with one configuration rather than the other slave with the other configuration...
>>
>> Considering we seem to have no mechanism whatsoever for ensuring the configuration of two different slaves for a particular builder is the same, I wonder if we should reconsider using multiple slaves for individual builders.
>
> Actually, one of the areas I was hoping that we could focus on for 14.1 would be to upgrade our packaging infrastructure and have our builders acquire dependencies automatically via 'pip install' or similar.
>
> See for example <https://twistedmatrix.com/trac/ticket/3696>.
>
> It's interesting to me that I've had issues with the divergent dependencies on this exact builder twice, and both times re-building trunk multiple times has happened to always hit the "good" builder, making it look like the branch is somehow at fault.  What's up with that?  Just luck of the draw
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From itamar at itamarst.org  Mon May  5 19:02:04 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 05 May 2014 21:02:04 -0400
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <20140505190600.6354.951754893.divmod.xquotient.184@top>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
 <5367C941.7020007@itamarst.org>
 <CAKN9TDJTpJTffc4-rPix8byySe8LoMz0CJg+xutQrTTwrCra4w@mail.gmail.com>
 <20140505190600.6354.951754893.divmod.xquotient.184@top>
Message-ID: <5368348C.6070401@itamarst.org>

On 05/05/2014 03:06 PM, exarkun at twistedmatrix.com wrote:
>
> However, I'm not even sure if the GUI reactors *should* be distributed 
> as part of the main Twisted package.  They are already first-class 
> reactors via the plugin system.  Independent releases let them track 
> changes in the GUI library they're each concerned with more quickly 
> than they could if they were part of Twisted itself.

Someone remind me to file a "ReactorBuilder doesn't support external 
reactors" ticket tomorrow...



From dstainton415 at gmail.com  Mon May  5 19:52:21 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Tue, 6 May 2014 01:52:21 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
 <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
 <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>
Message-ID: <CAFN1edrLu1wf7cfDHdmg0MJ0OdvWKUYX3LY-dE3VpZ2Ysrr8WQ@mail.gmail.com>

OK... I decided that txtorcon's endpoint constructor should only take
string arguments besides the reactor arg...
because serverFromString passes only str args to the endpoint constructor.

I wrote the endpoint parser to be as simple as possible.
The endpoint's `listen` method now handles the tor configuration and
launch logic... and returns a deferred which will
fire with an IListenPort.

The pip method definitely works... my code works but prints traceback
with this error:
"Unexpected error while writing cache file"
Do you as well?

Here's my endpoint parser plugin:
https://github.com/david415/txtorcon/blob/endpoint_parser_plugin-rewrite3/twisted/plugins/txtorcon_endpoint_parser.py

Here's how I install it:
cd ~/projects/virtualenv-1.11.5
./virtualenv.py ~/virtenv-txtorcon
. ~/virtenv-txtorcon/bin/activate
usewithtor pip install twisted
cd ~/projects
git clone https://github.com/david415/txtorcon.git
cd txtorcon
git checkout endpoint_parser_plugin-rewrite3
python setup.py install


Running the example code:
cd examples
python launch_tor_endpoint.py
Unexpected error while writing cache file
Traceback (most recent call last):
  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/internet/endpoints.py",
line 1465, in serverFromString
    return _serverFromStringLegacy(reactor, description, _NO_DEFAULT)
  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/internet/endpoints.py",
line 1393, in _serverFromStringLegacy
    nameOrPlugin, args, kw = _parseServer(description, None, default)
  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/internet/endpoints.py",
line 1380, in _parseServer
    for plugin in getPlugins(IStreamServerEndpointStringParser):
  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/plugin.py",
line 209, in getPlugins
    allDropins = getCache(package)
--- <exception caught here> ---
  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/plugin.py",
line 181, in getCache
    dropinPath.setContent(pickle.dumps(dropinDotCache))
exceptions.AttributeError: 'ZipPath' object has no attribute 'setContent'
I have set up a hidden service, advertised at: <<class
'twisted.internet.tcp.Port'> of twisted.web.server.Site on 55141>
http://mqrcnytlnh4xynmh.onion:80
locally listening on IPv4Address(TCP, '127.0.0.1', 55141)

and txtorcon's setup.py output:
python setup.py install
WARNING: not using PyPi over SSH!
running install
running bdist_egg
running egg_info
writing requirements to txtorcon.egg-info/requires.txt
writing txtorcon.egg-info/PKG-INFO
writing top-level names to txtorcon.egg-info/top_level.txt
writing dependency_links to txtorcon.egg-info/dependency_links.txt
package init file 'twisted/plugins/__init__.py' not found (or not a
regular file)
reading manifest file 'txtorcon.egg-info/SOURCES.txt'
reading manifest template 'MANIFEST.in'
warning: no files found matching 'scripts/*.py'
warning: no previously-included files found matching 'docs/_static/*~'
warning: no previously-included files found matching 'examples/*~'
writing manifest file 'txtorcon.egg-info/SOURCES.txt'
installing library code to build/bdist.linux-x86_64/egg
running install_lib
running build_py
creating build/bdist.linux-x86_64/egg
creating build/bdist.linux-x86_64/egg/twisted
creating build/bdist.linux-x86_64/egg/twisted/plugins
copying build/lib.linux-x86_64-2.7/twisted/plugins/txtorcon_endpoint_parser.py
-> build/bdist.linux-x86_64/egg/twisted/plugins
creating build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/stream.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/log.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/torconfig.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/router.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/torcontrolprotocol.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/circuit.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/addrmap.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/interface.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/spaghetti.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/torstate.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/torinfo.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/__init__.py ->
build/bdist.linux-x86_64/egg/txtorcon
copying build/lib.linux-x86_64-2.7/txtorcon/util.py ->
build/bdist.linux-x86_64/egg/txtorcon
byte-compiling build/bdist.linux-x86_64/egg/twisted/plugins/txtorcon_endpoint_parser.py
to txtorcon_endpoint_parser.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/stream.py to stream.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/log.py to log.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/torconfig.py to
torconfig.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/router.py to router.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/torcontrolprotocol.py
to torcontrolprotocol.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/circuit.py to circuit.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/addrmap.py to addrmap.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/interface.py to
interface.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/spaghetti.py to
spaghetti.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/torstate.py to torstate.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/torinfo.py to torinfo.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/__init__.py to __init__.pyc
byte-compiling build/bdist.linux-x86_64/egg/txtorcon/util.py to util.pyc
installing package data to build/bdist.linux-x86_64/egg
running install_data
creating build/bdist.linux-x86_64/egg/share
creating build/bdist.linux-x86_64/egg/share/txtorcon
copying INSTALL -> build/bdist.linux-x86_64/egg/share/txtorcon
copying README.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying TODO -> build/bdist.linux-x86_64/egg/share/txtorcon
copying meejah.asc -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/apilinks_sphinxext.py ->
build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/conf.py -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/Makefile -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/txtorcon-interface.rst ->
build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/txtorcon-launching.rst ->
build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/txtorcon-state.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/txtorcon.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/txtorcon-util.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/examples.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/releases.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/walkthrough.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/introduction.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/txtorcon-config.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/index.rst -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/txtorcon-protocol.rst ->
build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/_static/logo.png -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/_static/haiku.css -> build/bdist.linux-x86_64/egg/share/txtorcon
copying docs/_static/avatar.png -> build/bdist.linux-x86_64/egg/share/txtorcon
creating build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/monitor.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/launch_tor.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/webui_server.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/stream_circuit_logger.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/launch_tor_with_simplehttpd.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/launch_tor_endpoint.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/circuit_for_next_stream.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/dump_config.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/schedule_bandwidth.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/disallow_streams_by_port.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/attach_streams_by_country.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/launch_tor_with_hiddenservice.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/circuit_failure_rates.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
copying examples/tor_info.py ->
build/bdist.linux-x86_64/egg/share/txtorcon/examples
creating build/bdist.linux-x86_64/egg/EGG-INFO
copying txtorcon.egg-info/PKG-INFO -> build/bdist.linux-x86_64/egg/EGG-INFO
copying txtorcon.egg-info/SOURCES.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
copying txtorcon.egg-info/dependency_links.txt ->
build/bdist.linux-x86_64/egg/EGG-INFO
copying txtorcon.egg-info/requires.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
copying txtorcon.egg-info/top_level.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
zip_safe flag not set; analyzing archive contents...
creating 'dist/txtorcon-0.9.2-py2.7.egg' and adding
'build/bdist.linux-x86_64/egg' to it
removing 'build/bdist.linux-x86_64/egg' (and everything under it)
Processing txtorcon-0.9.2-py2.7.egg
Copying txtorcon-0.9.2-py2.7.egg to
/home/human/virtenv-txtorcon/lib/python2.7/site-packages
Adding txtorcon 0.9.2 to easy-install.pth file

Installed /home/human/virtenv-txtorcon/lib/python2.7/site-packages/txtorcon-0.9.2-py2.7.egg
Processing dependencies for txtorcon==0.9.2
Searching for zope.interface==4.1.1
Best match: zope.interface 4.1.1
Adding zope.interface 4.1.1 to easy-install.pth file

Using /home/human/virtenv-txtorcon/lib/python2.7/site-packages
Searching for Twisted==13.2.0
Best match: Twisted 13.2.0
Adding Twisted 13.2.0 to easy-install.pth file

Using /home/human/virtenv-txtorcon/lib/python2.7/site-packages
Searching for setuptools==3.4.4
Best match: setuptools 3.4.4
Adding setuptools 3.4.4 to easy-install.pth file
Installing easy_install-3.4 script to /home/human/virtenv-txtorcon/bin
Installing easy_install script to /home/human/virtenv-txtorcon/bin

Using /home/human/virtenv-txtorcon/lib/python2.7/site-packages
Finished processing dependencies for txtorcon==0.9.2


> This stack overflow question still hasn't gotten a great answer:
> <https://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py-for-a-twistd-twisted-plugin-that-works-with-setuptools>
> If you figure something out, please post it there.
>
> However, assuming a post-deluvian version of pip, this simple setup appears
> to work OK for me:
> <https://github.com/glyph/txsni/blob/master/setup.py#L16>
> and I haven't found a setup that breaks it yet.
>
> -glyph
>
>
>



From glyph at twistedmatrix.com  Mon May  5 21:00:11 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 5 May 2014 20:00:11 -0700
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <5368348C.6070401@itamarst.org>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
 <5367C941.7020007@itamarst.org>
 <CAKN9TDJTpJTffc4-rPix8byySe8LoMz0CJg+xutQrTTwrCra4w@mail.gmail.com>
 <20140505190600.6354.951754893.divmod.xquotient.184@top>
 <5368348C.6070401@itamarst.org>
Message-ID: <F8D7BA09-40EC-4FF6-AAF3-F9992BC69DEF@twistedmatrix.com>


On May 5, 2014, at 6:02 PM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

> On 05/05/2014 03:06 PM, exarkun at twistedmatrix.com wrote:
>> 
>> However, I'm not even sure if the GUI reactors *should* be distributed as part of the main Twisted package.  They are already first-class reactors via the plugin system.  Independent releases let them track changes in the GUI library they're each concerned with more quickly than they could if they were part of Twisted itself.
> 
> Someone remind me to file a "ReactorBuilder doesn't support external reactors" ticket tomorrow...

File a "ReactorBuilder doesn't support external reactors" ticket tomorrow.

-glyph


From glyph at twistedmatrix.com  Mon May  5 23:31:31 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 5 May 2014 22:31:31 -0700
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <CAFN1edrLu1wf7cfDHdmg0MJ0OdvWKUYX3LY-dE3VpZ2Ysrr8WQ@mail.gmail.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
 <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
 <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>
 <CAFN1edrLu1wf7cfDHdmg0MJ0OdvWKUYX3LY-dE3VpZ2Ysrr8WQ@mail.gmail.com>
Message-ID: <B9DA601A-E4DA-45E4-979A-94C6AE618332@twistedmatrix.com>


On May 5, 2014, at 6:52 PM, David Stainton <dstainton415 at gmail.com> wrote:

> OK... I decided that txtorcon's endpoint constructor should only take
> string arguments besides the reactor arg...
> because serverFromString passes only str args to the endpoint constructor.

I strongly suggest that this is wrong.

The endpoint constructor should do _construction_.  The endpoint parser should do _parsing_.  The task of parsing is of taking strings and producing meaningful values.

You may want to have the endpoint parser actually live in a separate method in txtorcon rather than putting it into the plugin itself, and leave the plugin simply the task of plugging in, but the parsing method should not be called __init__.

(Also, don't use asserts.  This is probably indicative of a weakness in the parsing API we've provided, but you should likely raise something like UsageError.)

> I wrote the endpoint parser to be as simple as possible.
> The endpoint's `listen` method now handles the tor configuration and
> launch logic... and returns a deferred which will
> fire with an IListenPort.

Great.

> The pip method definitely works... my code works but prints traceback
> with this error:
> "Unexpected error while writing cache file"
> Do you as well?
> 

What exactly is 'usewithtor'?

> usewithtor pip install twisted



> Running the example code:
> cd examples
> python launch_tor_endpoint.py
> Unexpected error while writing cache file
> Traceback (most recent call last):
>  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/internet/endpoints.py",
> line 1465, in serverFromString
>    return _serverFromStringLegacy(reactor, description, _NO_DEFAULT)
>  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/internet/endpoints.py",
> line 1393, in _serverFromStringLegacy
>    nameOrPlugin, args, kw = _parseServer(description, None, default)
>  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/internet/endpoints.py",
> line 1380, in _parseServer
>    for plugin in getPlugins(IStreamServerEndpointStringParser):
>  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/plugin.py",
> line 209, in getPlugins
>    allDropins = getCache(package)
> --- <exception caught here> ---
>  File "/home/human/virtenv-txtorcon/local/lib/python2.7/site-packages/twisted/plugin.py",
> line 181, in getCache
>    dropinPath.setContent(pickle.dumps(dropinDotCache))
> exceptions.AttributeError: 'ZipPath' object has no attribute 'setContent'
> I have set up a hidden service, advertised at: <<class
> 'twisted.internet.tcp.Port'> of twisted.web.server.Site on 55141>

This traceback is actually harmless, if annoying.  It's trying to generate the plugin cache, which is explained here:

<https://twistedmatrix.com/documents/current/core/howto/plugin.html#auto3>

> http://mqrcnytlnh4xynmh.onion:80
> locally listening on IPv4Address(TCP, '127.0.0.1', 55141)
> 
> and txtorcon's setup.py output:
> python setup.py install


> running bdist_egg
 ^ This right here is your problem.

There are a couple of solutions, in order of increasing complexity:

Don't build eggs.  Why are you building eggs?  Eggs are unfortunately a huge problem magnet.  I don't think 'pip install' builds eggs; I don't manually run setup.py anywhere any more because I assume pip understands these concerns better than I do.
Set zip_safe in your setup.py to False, which will turn your egg into a directory rather than a directory.
Figure out a way to hook the _build_ step specifically so you can run getPlugins() to generate the dropin cache before zipping up your zip file.  Twisted plugins actually do work within zip files, but nobody has bothered working out the setuptools incantation to get them to generate at the appropriate time for building an egg.  This is extra tricky because you only want to generate this dropin.cache file if the dropin is going to live inside an egg; otherwise, it would conflict with the communal dropin.cache file generated at install time.  This option will be the most confusing and frustrating for you, but I hope you choose it, because it would be GREAT to have a Right Way™ to address this problem in a Twisted plugin project's setup.py :).

> zip_safe flag not set; analyzing archive contents...

It's probably best to set zip_safe one way or the other though, even if you want to set it to 'true'.  Letting setuptools guess like this will, unsurprisingly, get you unpredictable results.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140505/f17e4a33/attachment-0002.html>

From tom.prince at ualberta.net  Tue May  6 02:15:34 2014
From: tom.prince at ualberta.net (Tom Prince)
Date: Tue, 06 May 2014 02:15:34 -0600
Subject: [Twisted-Python] Distributing apilinks.py
In-Reply-To: <35B861B5-BB3B-41BC-AB2C-3DA2F5946AC1@twistedmatrix.com>
References: <CAFycZ9emvGU+E9dt6ZHv=gvCW29fstPvH5m_85qDt_EbPObDBg@mail.gmail.com>
 <874n147inx.fsf@hermes.hocat.ca>
 <35B861B5-BB3B-41BC-AB2C-3DA2F5946AC1@twistedmatrix.com>
Message-ID: <87d2frl3vd.fsf@loki.hocat.ca>

Glyph <glyph at twistedmatrix.com> writes:

> This would be very nice.  Did you file an actual bug on pydoctor or is this a conversation which will be momentarily forgotten? :)

Not exactly, but
https://bugs.launchpad.net/pydoctor/+bug/1246713
and
https://bugs.launchpad.net/pydoctor/+bug/1287458
both document that solution.



From dstainton415 at gmail.com  Tue May  6 05:38:13 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Tue, 6 May 2014 11:38:13 +0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <B9DA601A-E4DA-45E4-979A-94C6AE618332@twistedmatrix.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
 <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
 <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>
 <CAFN1edrLu1wf7cfDHdmg0MJ0OdvWKUYX3LY-dE3VpZ2Ysrr8WQ@mail.gmail.com>
 <B9DA601A-E4DA-45E4-979A-94C6AE618332@twistedmatrix.com>
Message-ID: <CAFN1edprzLY+7mr9Z9d-SNjvKfWwMRb8E0KWNz98SjdS98UB6A@mail.gmail.com>

> The endpoint constructor should do _construction_.  The endpoint parser
> should do _parsing_.  The task of parsing is of taking strings and producing
> meaningful values.

Ah yeah I see what you mean. OK... I changed it:
https://github.com/david415/txtorcon/commit/1e96d550c40bef1be1b45c3c975c0da0bf6a2949

> You may want to have the endpoint parser actually live in a separate method
> in txtorcon rather than putting it into the plugin itself, and leave the
> plugin simply the task of plugging in, but the parsing method should not be
> called __init__.

Done.

> (Also, don't use asserts.  This is probably indicative of a weakness in the
> parsing API we've provided, but you should likely raise something like
> UsageError.)

OK... I changed that part too.

> What exactly is 'usewithtor'?
>
> usewithtor pip install twisted

It's torsocks. It performs an LD_PRELOAD hack to force programs to use tor.
Here's some torsocks info:

https://trac.torproject.org/projects/tor/wiki/doc/torsocks
https://gitweb.torproject.org/torsocks.git
https://lists.torproject.org/pipermail/tor-dev/2014-April/006649.html

Torsocks is useful... but a terrible hack... and this reminds me:

I'm hoping that the effort to make Tahoe-LAFS more Tor-friendly will
result in well documented
solutions. I would hope that this would make it easier for other
developers to make their twisted apps more Tor-friendly as well.
I do not think we have all the solution details worked out yet...

We'd like to stop using torsocks with Tahoe-LAFS and instead use
twisted endpoints...
which is why I ported the Foolscap client side to use twisted endpoints.
(str4d already ported the Foolscap server side to use endpoints)

https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517

This trac ticket discusses various ideas to make Tahoe more Tor friendly...
including this endpoint related idea that I've been thinking about
lately in trac comment 16
(https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517#comment:16) by leif
:

"""My current thought is that Tahoe should have an "always_use_tor"
option which causes all furls to be rewritten as tor: endpoints before
being passed to foolscap. If this option is not enabled, tor
connections will be made if a tor endpoint is used, but not otherwise.
So, users of mixed tor/non-tor grids can leave it disabled if they
prefer faster connections to non-tor nodes."""

This is necessary for a tahoe client wanting to use a public grid over
tor... because the grid's introducer node is going to
announce tcp endpoints not tor endpoints.

However I was thinking that the "only_tor" mode for tahoe (mentioned
here https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517#comment:15 )
could be implemented in tahoe... it could filter endpoint descriptors
by calling clientFromString or serverFromString and then checking the
object type.... or is this a terrible way to do it? I'm not sure. The
thing is... tahoe wouldn't normally
know anything about endpoints because it uses Foolscap which could use
endpoints (it does in my branch
https://github.com/david415/foolscap/tree/endpoint_descriptors_server2).

> Don't build eggs.  Why are you building eggs?  Eggs are unfortunately a huge
> problem magnet.  I don't think 'pip install' builds eggs; I don't manually
> run setup.py anywhere any more because I assume pip understands these
> concerns better than I do.

Ah OK yeah it works just fine when installed with pip.

> Figure out a way to hook the _build_ step specifically so you can run
> getPlugins() to generate the dropin cache before zipping up your zip file.
> Twisted plugins actually do work within zip files, but nobody has bothered
> working out the setuptools incantation to get them to generate at the
> appropriate time for building an egg.  This is extra tricky because you only
> want to generate this dropin.cache file if the dropin is going to live
> inside an egg; otherwise, it would conflict with the communal dropin.cache
> file generated at install time.  This option will be the most confusing and
> frustrating for you, but I hope you choose it, because it would be GREAT to
> have a Right Way™ to address this problem in a Twisted plugin project's
> setup.py :).

OK... I'll try to get it working that way... but for now a pip install
seems to work fine.

> zip_safe flag not set; analyzing archive contents...
>
>
> It's probably best to set zip_safe one way or the other though, even if you
> want to set it to 'true'.  Letting setuptools guess like this will,
> unsurprisingly, get you unpredictable results.



From glyph at twistedmatrix.com  Tue May  6 15:25:17 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 6 May 2014 14:25:17 -0700
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <CAFN1edprzLY+7mr9Z9d-SNjvKfWwMRb8E0KWNz98SjdS98UB6A@mail.gmail.com>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
 <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
 <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>
 <CAFN1edrLu1wf7cfDHdmg0MJ0OdvWKUYX3LY-dE3VpZ2Ysrr8WQ@mail.gmail.com>
 <B9DA601A-E4DA-45E4-979A-94C6AE618332@twistedmatrix.com>
 <CAFN1edprzLY+7mr9Z9d-SNjvKfWwMRb8E0KWNz98SjdS98UB6A@mail.gmail.com>
Message-ID: <3C6C714E-B471-4DFE-BC35-7BF81EF2E147@twistedmatrix.com>

On May 6, 2014, at 4:38 AM, David Stainton <dstainton415 at gmail.com> wrote:

> However I was thinking that the "only_tor" mode for tahoe (mentioned
> here https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517#comment:15 )
> could be implemented in tahoe... it could filter endpoint descriptors
> by calling clientFromString or serverFromString and then checking the
> object type.... or is this a terrible way to do it? I'm not sure. The
> thing is... tahoe wouldn't normally
> know anything about endpoints because it uses Foolscap which could use
> endpoints (it does in my branch
> https://github.com/david415/foolscap/tree/endpoint_descriptors_server2).

That sounds pretty ugly.  If you want a specific string parser that only calls your own one specific endpoint type, perhaps don't bother querying for plugins at all, just call your own directly?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140506/b2ffe288/attachment-0002.html>

From techtonik at gmail.com  Wed May  7 01:35:15 2014
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 7 May 2014 10:35:15 +0300
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <CAE_Hg6ajBqwicKxGm1g_6cO5WA6gppvMFVtDXWF2uVOnmV9g8Q@mail.gmail.com>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
 <CAE_Hg6ajBqwicKxGm1g_6cO5WA6gppvMFVtDXWF2uVOnmV9g8Q@mail.gmail.com>
Message-ID: <CAPkN8xJAgGAs4M3UoEtnXciMmTiKyNEdNLAxz2Y=K+MfRNrS7w@mail.gmail.com>

Hi Laurens,

Well, Manhole looks way more advanced than my idea. I just need to
be able to tap into one way application event stream - there is no input
from the other side, so application doesn't need to prepare for that.

So, serial != terminal. There might be in future, but now I am more
interested in accessibility of tap interface rather than its features.

On Mon, May 5, 2014 at 6:42 PM, Laurens Van Houtven <_ at lvh.io> wrote:
> Hi Anatoly,
>
>
> Do you know about manhole? I made a video that also demos axiom, but it
> should show you what manhole does :)
>
> https://www.youtube.com/watch?v=3-UZiO-AnLc
>
> Essentially it's "repl in a running process".
>
>
> hth
> lvh
>
>
> On Mon, May 5, 2014 at 4:43 AM, anatoly techtonik <techtonik at gmail.com>
> wrote:
>>
>> Hello, network hackers,
>>
>> Recently I've got a Raspberry Pi and a friend showed me its serial
>> interface and helped to setup it. I was stunned. What I saw - you open
>> serial terminal, and you jump in into the middle of boot section. Just
>> open a terminal and you see what's going on inside of R.Pi. Any time.
>> That's was an intro. =)
>>
>> For a long time I wanted the same interface for debugging software
>> programs. When I was hacking on Spyder I found that my human brain is
>> too limited to squeeze details of dynamic of interaction of objects at
>> run-time. Spyder is written in Python with Qt, and it is a parallel
>> application much like any Twisted app is. But I wanted to push the
>> progress, I have to deal with complexity, so I badly needed to be able
>> to draw a video of interaction at run-time. That was the problem I
>> tried to solve.
>>
>> And for the first step I needed a way to connect to Spyder at run-time
>> and see what's going on. I didn't know how to call that way before,
>> but now I have a rather accurate wording - "a serial interface for an
>> application". That is the background for the question I am trying to
>> ask.
>>
>> What is the best way to implement such interface considering the
>> following properties:
>> 1. it needs to be simple (so that you can quickly create python script
>> that reads the info)
>> 2. it needs to be universal (so that script for one app worked for other)
>> 3. it should be asynchronous (connected terminal should not degrade
>> performance)
>> 4. it needs to be reliable (at least detecting missing packets)
>> 5. and cross-platform (and pure python)
>>
>> Why Twisted? For the first I think that this problem is actual for
>> people who are dealing with complexity of dynamic and interconnected
>> systems built with the help of Twisted. For the second I believe it
>> can only be solved or analyzed by people skilled in interprocess and
>> internetwork communications.
>>
>> One button test:
>> 1. program behaves weird
>> 2. user hits the button
>> 3. terminal pops up
>> 4. shows a lot of data for a running program
>>
>> I am interested to know.
>> 1. how the button should discover the program
>> network port seems cool, but what about two parallel programs? what
>> about different programs that provide this interface?
>>
>> 2. how terminal receives the data
>> i see it as line based - one line - one event, everything is text
>>
>> 3. how to make it fast
>> TCP clearly won't here
>>
>> 4. how to send the data
>> what if two threads (or parallel code) produce serial data? who should
>> run the server that serves connected terminals, and how other thread
>> will send message to this server? you can not run two TCP servers on
>> the same port on the app side, so is there an alternative? how to
>> detect missing data in a stream? how to avoid dealing with incomplete
>> packets and low level network details?
>>
>> Thanks. I'd like to get back to hacking on Spyder one day, but this is
>> a stumbling block for me every time I think about it or any program of
>> compared complexity.
>> --
>> anatoly t.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
anatoly t.



From techtonik at gmail.com  Wed May  7 01:47:07 2014
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 7 May 2014 10:47:07 +0300
Subject: [Twisted-Python] Serial interface for software program
In-Reply-To: <5367C941.7020007@itamarst.org>
References: <CAPkN8xLe2VyFuMWJp8K8aqrR9Tyd0RqD_m=sHaM6su6ShKiSbw@mail.gmail.com>
 <5367C941.7020007@itamarst.org>
Message-ID: <CAPkN8x+58jiw5ojp0xm=gVH=D19wMVz-ApBRAnuPUyaiSyX3fg@mail.gmail.com>

On Mon, May 5, 2014 at 8:24 PM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> If Spyder *just* uses Qt, it's a single-threaded event loop. There's a 3rd
> party event loop for Twisted that runs on top of Qt (qt4reactor), which
> would allow Twisted and Qt code to run in the same thread.

Spyder executes interpreters (seen by users as consoles) in separate threads:
https://bitbucket.org/spyder-ide/spyderlib/src/5c0af92927a342bb0eb561c1729198d3d96ab74e/spyderlib/interpreter.py?at=default#cl-47
and also monitors them to provide code completion, calltips and other features:
https://bitbucket.org/spyder-ide/spyderlib/src/5c0af92927a342bb0eb561c1729198d3d96ab74e/spyderlib/widgets/externalshell/monitor.py?at=default#cl-116

What I need is a mechanism to discover Spyder instances, attach to them
and see what (possibly prepared events) are occurring. It is important that
events are multiplexed into single stream for detecting race conditions. I
need as simple interface as possible and not Python specific even, that's
why I asked it on the network protocol level (which classic serial interface
operates on).



From techtonik at gmail.com  Wed May  7 01:50:48 2014
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 7 May 2014 10:50:48 +0300
Subject: [Twisted-Python] ReactorBuilder doesn't support external reactors
 ticket reminder (Was: Serial interface for software program)
Message-ID: <CAPkN8xK+01fhtsb-=8h+ykdN6b5EfUN2fGHP3bCcAaUk9UsGMw@mail.gmail.com>

On Tue, May 6, 2014 at 4:02 AM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On 05/05/2014 03:06 PM, exarkun at twistedmatrix.com wrote:
>>
>> However, I'm not even sure if the GUI reactors *should* be distributed as
>> part of the main Twisted package.  They are already first-class reactors via
>> the plugin system.  Independent releases let them track changes in the GUI
>> library they're each concerned with more quickly than they could if they
>> were part of Twisted itself.
>
>
> Someone remind me to file a "ReactorBuilder doesn't support external
> reactors" ticket tomorrow...

File a "ReactorBuilder doesn't support external reactors" today. )
-- 
anatoly t.



From techtonik at gmail.com  Wed May  7 01:57:24 2014
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 7 May 2014 10:57:24 +0300
Subject: [Twisted-Python] qt4reactor on PySide (Was: Serial interface for
 software program)
Message-ID: <CAPkN8xJYAABnRD3tFsG9Z1rh=ZCra_qy8Kgj2U5-CzLr9p_gDg@mail.gmail.com>

On Mon, May 5, 2014 at 10:06 PM,  <exarkun at twistedmatrix.com> wrote:
> On 06:49 pm, sank.daniel at gmail.com wrote:
>>>
>>> There's a 3rd party event loop for Twisted that runs on top of Qt
>>> (qt4reactor), which would
>>> allow Twisted and Qt code to run in the same thread.
>>
>> Speaking of which, why isn't that thing officially part of twisted? Super
>> useful.
>
> The PyQt team insists that the PyQt license is incompatible with Twisted's
> license (this is an intentional simplification, you can read more about the
> issue on PyQt's website if you really care).
>
> Since PySide now exists this is potentially no longer an issue. However, the
> last thing I heard about using PySide to run the Qt reactor is that it
> segfaulted sometimes.
>
> So perhaps the reason is that someone needs to do some work to determine if
> PySide is actually safe to use with the Qt reactor now and, if it is,
> shuffle some code around.

I think Twisted users just need to start using it, have this doc at hand -
https://code.google.com/p/spyderlib/wiki/HowToDebugQtCrash -
and register on https://bugreports.qt-project.org/ if there is a trouble
(or just mail PySide list).

> However, I'm not even sure if the GUI reactors *should* be distributed as
> part of the main Twisted package.  They are already first-class reactors via
> the plugin system.  Independent releases let them track changes in the GUI
> library they're each concerned with more quickly than they could if they
> were part of Twisted itself.
>
> Perhaps there are other reasons, like simplicity of packaging or quality of
> continuous integration testing, that would override those issues and make it
> worth bringing Qt reactor back into Twisted.  Sorting that out is also a
> task that requires someone interested to step up an do some work, though. :)

The question was - why super useful Qt reactor loop is not a part of Twisted.
I think that if it is really useful, it should,
-- 
anatoly t.



From exarkun at twistedmatrix.com  Wed May  7 05:40:59 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 07 May 2014 11:40:59 -0000
Subject: [Twisted-Python] qt4reactor on PySide (Was: Serial interface
 for software program)
In-Reply-To: <CAPkN8xJYAABnRD3tFsG9Z1rh=ZCra_qy8Kgj2U5-CzLr9p_gDg@mail.gmail.com>
References: <CAPkN8xJYAABnRD3tFsG9Z1rh=ZCra_qy8Kgj2U5-CzLr9p_gDg@mail.gmail.com>
Message-ID: <20140507114059.12809.1668209907.divmod.xquotient.4@top>

On 07:57 am, techtonik at gmail.com wrote:
>On Mon, May 5, 2014 at 10:06 PM,  <exarkun at twistedmatrix.com> wrote:
>>
>>So perhaps the reason is that someone needs to do some work to 
>>determine if
>>PySide is actually safe to use with the Qt reactor now and, if it is,
>>shuffle some code around.
>
>I think Twisted users just need to start using it, have this doc at 
>hand -
>https://code.google.com/p/spyderlib/wiki/HowToDebugQtCrash -
>and register on https://bugreports.qt-project.org/ if there is a 
>trouble
>(or just mail PySide list).

By all means, please use it and report bugs in the appropriate place.

Jean-Paul



From killiands at gmail.com  Wed May  7 07:47:37 2014
From: killiands at gmail.com (Killian De Smedt)
Date: Wed, 7 May 2014 15:47:37 +0200
Subject: [Twisted-Python] doWrite called on a twisted.internet.unix.Port
Message-ID: <CAG5JYFtZf_4y6+V8Opc1tQqYMjD104aCYRraC3YQcM8BgmBZwQ@mail.gmail.com>

Hello everybody,

I sometimes see the following error logged by a twisted application, it
only happens sporadically and I cannot even reproduce when trying to
re-execute the exact sequence of those failures. So giving an SSCCE is
quite impossible for now (sorry). Given this trace it's also hard to find
what was actually called/executed.

Unhandled Error
Traceback (most recent call last):
  File "/path/to/twisted.zip/twisted/python/log.py", line 88, in
callWithLogger

  File "/path/to/twisted.zip/twisted/python/log.py", line 73, in
callWithContext

  File "/path/to/twisted.zip/twisted/python/context.py", line 118, in
callWithContext

  File "/path/to/twisted.zip/twisted/python/context.py", line 81, in
callWithContext

--- <exception caught here> ---
  File "/path/to/twisted.zip/twisted/internet/posixbase.py", line 619, in
_doReadOrWrite

  File "/path/to/twisted.zip/twisted/internet/base.py", line 1117, in
doWrite

exceptions.RuntimeError: doWrite called on a twisted.internet.unix.Port

I cannot reproduce the scenario where this goes wrong, in the application
there is only a single unix socket which is handled as follows:

class cmd_protocol(basic.Int32StringReceiver):
    def stringReceived(self, command):
        self.factory.callback(command, self.send_response)

    def send_response(self, code, message):
        self.sendString(response_msg(result_code = code, message =
message).SerializeToString()) //response_msg is a google protobuf class

class cmd_factory(protocol.ServerFactory):
    protocol = cmd_protocol
    def __init__(self, callback, *args, **kwargs):
        self.callback = callback

class cmd_server(object):
    def __init__(self, socket_file, callback, delete_previous_socket =
True):
        if delete_previous_socket:
            try:
                os.remove(socket_file)
            except OSError:
                pass
        reactor.listenUNIX(socket_file, cmd_factory(callback))
#@UndefinedVariable

Does anybody have any idea what could trigger the doWrite internally or how
I at least I can start debugging this?

Thank you,

Killian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140507/4584e5b4/attachment-0002.html>

From hawkowl at atleastfornow.net  Wed May  7 08:07:52 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Wed, 7 May 2014 22:07:52 +0800
Subject: [Twisted-Python] The Twisted 14.0 Release Pre-Post-Mortem,
	and Where To From Here
Message-ID: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>

Hi everyone,

I’m sure that some of you have been following the past seven or so weeks of Twisted 14.0 release shenanigans, and this email hopes to explain what went wrong, what we can do better next time, and where we can go from here.

Problem 1: Twisted 14.0.0pre1 had a regression. This was not noticed in the prerelease stage because it was not marked as a regression, where the RM does a check for open regressions on the milestone.
What we can do better next time: Tickets that are regressions need to be marked as regressions and applied to the release milestone. If you think it might be a regression - even slightly - mark it as such, and comment that you are not sure. It’s easier to find the ticket later and decide it is not actually a regression than have to abort a release because it’s come up after a prerelease.

Problem 2: The fix for the regression was not merged into pre1, the release was rerolled from trunk. This meant some pyOpenSSL and TLS improvements got into the 14.0 release from pre2 onwards, but introduced new regressions.
What we can do better next time: Do not reroll from trunk to get bug fixes - merge them into the release branch. 

Problem 3: The fixes for the regressions were finished after some delay, since the fixes had to be written and reviewed. This introduced delays into the 14.0 release cycle.
What we can do better next time: Rather than fix regressions introduced, the ticket that introduced them should be reverted.

Problem 4: The fixes for the regressions did not merge cleanly with the release branch. Some 35+ tickets were merged between pre1 and the release of the regression fix into trunk.
What we can do better next time: Bug fixes should be based off the release branch, not trunk. This reduces the likelihood of code churn or unknown dependencies causing problems during the merge.

Problem 5: There was mixed communication whether one of the regression fixes was to be introduced in 14.0 or in a bug fix release (14.0.1).
What we can do better: If a fix is intended for merging in to a prerelease, it should be raised on the mailing list, so that there is more visibility for its intentions.

Problem 6: I personally made several mistakes along the way - from screwing up svn merges to interpreting the “abort the release and incorporate the bugfix” to apply the initial regression fix. Since the TLS changes were topical, I decided that having them out ASAP would be better than not.
What we can do better: Improved docs/automation to reduce the margin for RM error, and better automation to make a new release to get out important features really easy.

These are the major problems which I have identified - I’m sure there’s plenty more, and I would like people to list them if I have not - even if they make me look like an idiot ;). We can learn from it, I’m sure.

So, this leaves where to from now. I see a few options, with my estimates for work and risk that it’ll explode:

1 - Most work, high risk - Work on making the regression fixes merge cleanly with 14.0.0pre5. This is big-ish task with room for error, since there was some underlying code churn.
2 - Some work, medium risk - Release 14.0.0pre5 as 14.0 final, and I (or another RM if I’m no longer trusted ;) ) initiate the 14.1 release immediately.
3 - Least work, highish risk - Scrap 14.0, begin the 14.1 release immediately. since 14.0 tags become 14.1 tags, and we just have to hope that there’s no regressions in the 39 tickets fixed between pre1 and now. This may introduce issues (since 14.0 is an un-release, and there are questions about what this does to our deprecation windows).

If I am to be honest, I much prefer option #3, but I would like opinions from other developers, before I go causing more problems than I already have :)

Regards,
HawkOwl

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20140507/ce265795/attachment.sig>

From exarkun at twistedmatrix.com  Wed May  7 08:11:23 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 07 May 2014 14:11:23 -0000
Subject: [Twisted-Python] doWrite called on a twisted.internet.unix.Port
In-Reply-To: <CAG5JYFtZf_4y6+V8Opc1tQqYMjD104aCYRraC3YQcM8BgmBZwQ@mail.gmail.com>
References: <CAG5JYFtZf_4y6+V8Opc1tQqYMjD104aCYRraC3YQcM8BgmBZwQ@mail.gmail.com>
Message-ID: <20140507141123.12809.1006896501.divmod.xquotient.8@top>

On 01:47 pm, killiands at gmail.com wrote:
>Hello everybody,
>
>I sometimes see the following error logged by a twisted application, it
>only happens sporadically and I cannot even reproduce when trying to
>re-execute the exact sequence of those failures. So giving an SSCCE is
>quite impossible for now (sorry). Given this trace it's also hard to 
>find
>what was actually called/executed.

I've seen something like this with a somewhat old version of Twisted and 
a custom reactor.  I never tracked down the cause.

What version of Twisted are you using, what platform are you on, and 
what reactor are you using?

Another useful bit of debug information would be to hack up the 
reactor's `addWriter` method to do a check of the argument.  The call 
stack at *that* point (when the argument is a Port) is more interesting 
than the call stack at the point where `doWrite` is called.

Jean-Paul



From _ at lvh.io  Wed May  7 08:15:53 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 7 May 2014 09:15:53 -0500
Subject: [Twisted-Python] The Twisted 14.0 Release Pre-Post-Mortem,
 and Where To From Here
In-Reply-To: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
References: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
Message-ID: <CAE_Hg6Znw2nGcoxw029yQOMBDiEoL=RnvkVixOB0wkErEnBnmg@mail.gmail.com>

Hi!
​

First of all, thank you so much for working on this. Secondly, provided we
don't find any regressions in pre5, option 2 seems the least footgunny to
me :)


hth
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140507/9a847a17/attachment-0002.html>

From hs at ox.cx  Wed May  7 08:34:12 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Wed, 07 May 2014 16:34:12 +0200
Subject: [Twisted-Python] The Twisted 14.0 Release Pre-Post-Mortem,
 and Where To From Here
In-Reply-To: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
References: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
Message-ID: <EFFAAC71-BCD8-4221-B9F2-C960658D6DC6@ox.cx>

On 7 May 2014, at 16:07, HawkOwl wrote:

> 2 - Some work, medium risk - Release 14.0.0pre5 as 14.0 final,

I’m +1 on this one.  The pre5 has been widely tested and the only real issues are some embarrassing but inconsequential typos.  Let’s get this out before we introduce *real* problems.

> and I (or another RM if I’m no longer trusted ;) )

Nonsense, you’re doing great work.

> initiate the 14.1 release immediately.

You can try to do a 14.0.1 for all I care but those space errors IMHO don’t really warrant a point release (except that it would give us some practice for times when we need it as glyph pointed out on IRC).
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20140507/d26e1208/attachment.sig>

From itamar at itamarst.org  Wed May  7 08:42:08 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 07 May 2014 10:42:08 -0400
Subject: [Twisted-Python] The Twisted 14.0 Release Pre-Post-Mortem,
 and Where To From Here
In-Reply-To: <EFFAAC71-BCD8-4221-B9F2-C960658D6DC6@ox.cx>
References: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
 <EFFAAC71-BCD8-4221-B9F2-C960658D6DC6@ox.cx>
Message-ID: <28591a3fc46f27abd0eabba4440d351b@itamarst.org>

 

A diff between the 14.0.0pre5 branch and trunk suggests merging it into
trunk would do bad things, so I'm not sure it's releasable as is... This
may be operator error on my part though. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140507/f9e7a134/attachment-0002.html>

From killiands at gmail.com  Wed May  7 09:09:03 2014
From: killiands at gmail.com (Killian De Smedt)
Date: Wed, 7 May 2014 17:09:03 +0200
Subject: [Twisted-Python] doWrite called on a twisted.internet.unix.Port
In-Reply-To: <20140507141123.12809.1006896501.divmod.xquotient.8@top>
References: <CAG5JYFtZf_4y6+V8Opc1tQqYMjD104aCYRraC3YQcM8BgmBZwQ@mail.gmail.com>
 <20140507141123.12809.1006896501.divmod.xquotient.8@top>
Message-ID: <CAG5JYFvmuJyditu9HKueWKnCg4N92QToYn=BovzzNugOfX2mwA@mail.gmail.com>

Hi Exarkun,

Thanks for the quick response. I should have specified those things
immediately.
I manually merged the UDP ipv6 branch in the trunk somewhere in august and
used that one, the version number is reported as [twisted, version 13.1.0].
The platform is always centos though the centos version might range from
5.x to 6.x, 32 bit, but most of the time it runs on a centos 5.2
installation (kernel on my working machine is 2.6.18). Python is 2.7.1 .
I use the default reactor which should come down to the epoll one.

I'll try to hack up the addwriter, it shouldn't be that hard to for just
that application.

Thank you,

Killian


On 7 May 2014 16:11, <exarkun at twistedmatrix.com> wrote:

> On 01:47 pm, killiands at gmail.com wrote:
>
>> Hello everybody,
>>
>> I sometimes see the following error logged by a twisted application, it
>> only happens sporadically and I cannot even reproduce when trying to
>> re-execute the exact sequence of those failures. So giving an SSCCE is
>> quite impossible for now (sorry). Given this trace it's also hard to find
>> what was actually called/executed.
>>
>
> I've seen something like this with a somewhat old version of Twisted and a
> custom reactor.  I never tracked down the cause.
>
> What version of Twisted are you using, what platform are you on, and what
> reactor are you using?
>
> Another useful bit of debug information would be to hack up the reactor's
> `addWriter` method to do a check of the argument.  The call stack at *that*
> point (when the argument is a Port) is more interesting than the call stack
> at the point where `doWrite` is called.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Killian De Smedt
mobile: +32 486/825 951
mail: killiands at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140507/cd146b35/attachment-0002.html>

From glyph at twistedmatrix.com  Wed May  7 15:40:06 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 May 2014 14:40:06 -0700
Subject: [Twisted-Python] The Twisted 14.0 Release Pre-Post-Mortem,
	and Where To From Here
In-Reply-To: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
References: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
Message-ID: <3B44A2B8-E51E-477F-B5E3-0678C3F6DF5A@twistedmatrix.com>


On May 7, 2014, at 7:07 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> Hi everyone,

Hi HawkOwl,

> I’m sure that some of you have been following the past seven or so weeks of Twisted 14.0 release shenanigans, and this email hopes to explain what went wrong,

Given that there does not appear to be a 14.0 final, shouldn't this be "what is still going wrong"?  This is more like a death rattle, not a post mortem ;-).

> what we can do better next time, and where we can go from here.

Thank so much for doing this.  I'm sorry the 14.0 release process has been a tough one, and that its toughness has been partially my fault.

However, I'm glad that this has provoked some reflection and discussion.  The fact that you've done such a thorough analysis almost makes a challenging release cycle worth it :).

> Problem 1: Twisted 14.0.0pre1 had a regression. This was not noticed in the prerelease stage because it was not marked as a regression, where the RM does a check for open regressions on the milestone.

When you say it was "not noticed in the prerelease stage", do you just mean it didn't show up before the pre-release was made?

Also, in the future, can you always include specific links to the tickets involved in the problems encountered?  I'm not exactly sure which regressions we're talking about in pre1.

> What we can do better next time: Tickets that are regressions need to be marked as regressions and applied to the release milestone. If you think it might be a regression - even slightly - mark it as such, and comment that you are not sure. It’s easier to find the ticket later and decide it is not actually a regression than have to abort a release because it’s come up after a prerelease.

At the same time, I feel like I should stress like this, by itself, was not a huge problem.  Specifically, rolling a second pre-release is okay.  It's a bit unfortunate that the regression was not tagged in advance of the release, but discovering issues and fixing them is exactly what the pre-release process is for.

> Problem 2: The fix for the regression was not merged into pre1, the release was rerolled from trunk. This meant some pyOpenSSL and TLS improvements got into the 14.0 release from pre2 onwards, but introduced new regressions.
> What we can do better next time: Do not reroll from trunk to get bug fixes - merge them into the release branch. 

Another problem here, that I can take full blame for, was that the communication involved was fragmented and not terribly consistent.  HawkOwl would ask a question on IRC, I would give an answer, then a couple of hours later someone else would give an apparently contradictory answer to a follow-up question.  I don't think that we were actually disagreeing all that much, but at a number of points, it became a game of telephone.  Also, I'd sometimes ask a question about the release process, and someone would tell me something they thought HawkOwl had said or a guess as to what might come next, which I took to be the actual plan.

Particularly, I was very confused at various points as to whether the next prerelease was going to have things backported, which things were going to be backported, or whether we were re-rolling from trunk.  I think that, similarly, HawkOwl was very confused as to what I _wanted_ to happen.

In the future, when we're communicating about the release process, we should probably try harder than usual to have all the discussion in a persistent forum so that it's obvious where the state of things is.  Maybe that means the mailing list, maybe the release ticket, but IRC has proven to be a particularly inappropriate and unreliable channel for this kind of discussion.

If we _do_ have a discussion on IRC, following the precedent that some more responsible members of the community have set, and copying a summary or trimmed transcript of the relevant conclusions into the ticket or to the list should be a requirement.

To get a head start on this, I have put a link to this very discussion on the ticket. <https://twistedmatrix.com/trac/ticket/7039#comment:23>

And a final point on communication: on release branches, sensible commit messages are particularly important.  On most branches, individual commit messages can be a bit less than helpful because they're eventually all bundled up into a squash commit (hopefully one day a proper merge commit) with its own useful commit message.  That commit message can fill in any gaps left by unhelpful individual commits.

On release branches, however, every individual commit has release implications, so explaining why things are being done is extra important.  For example, this sequence of events is confusing: <https://twistedmatrix.com/trac/changeset/42616> <https://twistedmatrix.com/trac/changeset/42617>.  Which merge is being reverted?  (I can kinda guess it's the immediately preceding commit, but...) Did a build fail or something?  Which build?  Were some commits merged incorrectly?  Not hypothetical questions, by the way, I am seriously wondering what happened there :-).

> Problem 3: The fixes for the regressions were finished after some delay, since the fixes had to be written and reviewed. This introduced delays into the 14.0 release cycle.
> What we can do better next time: Rather than fix regressions introduced, the ticket that introduced them should be reverted.

Yup.

> Problem 4: The fixes for the regressions did not merge cleanly with the release branch. Some 35+ tickets were merged between pre1 and the release of the regression fix into trunk.

The fact that PyCon was happening at the same time definitely did not help.  For what it's worth, I _really_ tried as hard as I could to finish that stuff before the sprints.  But 14.0 probably should have just come out before then anyway :-).

> What we can do better next time: Bug fixes should be based off the release branch, not trunk. This reduces the likelihood of code churn or unknown dependencies causing problems during the merge.

This was one of the aforementioned problems with communication.

> Problem 5: There was mixed communication whether one of the regression fixes was to be introduced in 14.0 or in a bug fix release (14.0.1).
> What we can do better: If a fix is intended for merging in to a prerelease, it should be raised on the mailing list, so that there is more visibility for its intentions.

There should probably also be a comment on the release ticket.

> Problem 6: I personally made several mistakes along the way - from screwing up svn merges to interpreting the “abort the release and incorporate the bugfix” to apply the initial regression fix. Since the TLS changes were topical, I decided that having them out ASAP would be better than not.

Again: communication, communication, communication.  I didn't know about any screwed-up SVN merges and wasn't super clear on when releases were aborted.  I would have tried to help more if I knew about the issues with the release branch as they were occurring.

> What we can do better: Improved docs/automation to reduce the margin for RM error, and better automation to make a new release to get out important features really easy.

The release process _is_ getting easier and easier, but sometimes we still act like it's really hard and thereby introduce additional complexity and difficulties.

> These are the major problems which I have identified - I’m sure there’s plenty more, and I would like people to list them if I have not - even if they make me look like an idiot ;). We can learn from it, I’m sure.
> 
> So, this leaves where to from now. I see a few options, with my estimates for work and risk that it’ll explode:
> 
> 1 - Most work, high risk - Work on making the regression fixes merge cleanly with 14.0.0pre5. This is big-ish task with room for error, since there was some underlying code churn.

Just to be clear, "the regression" that we're talking about is <https://twistedmatrix.com/trac/ticket/7097>, right?

> 2 - Some work, medium risk - Release 14.0.0pre5 as 14.0 final,

I would most prefer this option.  Embarrassing as the errors in the message fixed by 7097 are, I think it's acceptable to say that this is not a particularly meaningful regression.  For me personally it stretches the definition of "regression" a little bit, because it's information about new functionality, not a change or break in old functionality.  And emitting a new warning is (pretty much by definition) never a "regression" because part of our compatibility policy contract is that your code has to be tolerant to warnings being emitted.

To be fair, it stretches the definition, but it still technically adheres to it.  Importing twisted's TLS support without service_identity installed is a supported thing, it used to do something "correct", it's moved to do something "incorrect" because there is incorrect text emitted.  Still, if I had to classify it without input from anyone else I'd probably call it a "new bug".

Critically, users applications won't be broken by this.  They'll see some ugly or possibly incorrect text which will be fixed in an update which will hopefully follow on pretty quickly.  Not to mention that there's an easy fix for this by installing the relevant dependency.

> and I (or another RM if I’m no longer trusted ;) )

Honestly, at this point, I trust you a bit more with the release process.  Up until this point, you've had only easy successes, which (as you can see!) is a little dangerous ;-).  An experience of a failure that you have clearly articulated the reasons for strikes me as a very useful skill-building exercise.

> initiate the 14.1 release immediately.

More releases are always better!

> 3 - Least work, highish risk - Scrap 14.0, begin the 14.1 release immediately. since 14.0 tags become 14.1 tags, and we just have to hope that there’s no regressions in the 39 tickets fixed between pre1 and now. This may introduce issues (since 14.0 is an un-release, and there are questions about what this does to our deprecation windows).

I think that trying to cram in more features to 14.0 got us into a mess in the first place, so throwing our hands up at this point and trying to shepherd 39 _more_ features into this release, potentially delaying things even longer, does not strike me as a good idea.

> If I am to be honest, I much prefer option #3, but I would like opinions from other developers, before I go causing more problems than I already have :)

I can see why #3 is tempting, but trunk has got a lot of churn on it right now and I'm relieved we didn't attempt to re-roll post-PyCon despite the merge difficulties.

More than I'd prefer option 2 though, I'd prefer that everyone interested weigh in and we make a decision quickly so that the release process doesn't drag on further; I should reiterate that I still trust our glorious release manager HawkOwl to make this decision and be responsible for it, so I'm providing input but I'm not giving any orders here.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140507/541d6aca/attachment-0002.html>

From glyph at twistedmatrix.com  Wed May  7 15:58:56 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 May 2014 14:58:56 -0700
Subject: [Twisted-Python] The Twisted 14.0 Release Pre-Post-Mortem,
	and Where To From Here
In-Reply-To: <28591a3fc46f27abd0eabba4440d351b@itamarst.org>
References: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
 <EFFAAC71-BCD8-4221-B9F2-C960658D6DC6@ox.cx>
 <28591a3fc46f27abd0eabba4440d351b@itamarst.org>
Message-ID: <06588DFE-3B54-4340-9D22-EA32733F0D35@twistedmatrix.com>


On May 7, 2014, at 7:42 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> A diff between the 14.0.0pre5 branch and trunk suggests merging it into trunk would do bad things, so I'm not sure it's releasable as is... This may be operator error on my part though.
> 
This doesn't look significant.

A squash merge in git gives me these conflicts:

Unmerged paths:

	both modified:      twisted/internet/_sslverify.py
	deleted by them:    twisted/topfiles/5190.feature

The conflict in _sslverify.py is trivial, a single hunk that looks like this:

diff --cc twisted/internet/_sslverify.py
index 5fbdc58,0d2e312..0000000
--- a/twisted/internet/_sslverify.py
+++ b/twisted/internet/_sslverify.py
@@@ -1493,15 -1479,6 +1493,18 @@@ class OpenSSLCertificateOptions(object)
          return ctx
  
  
++<<<<<<< HEAD
 +
 +OpenSSLCertificateOptions.__getstate__ = deprecated(
 +        Version("Twisted", 14, 1, 0),
 +        "a real persistence system")(OpenSSLCertificateOptions.__getstate__)
 +OpenSSLCertificateOptions.__setstate__ = deprecated(
 +        Version("Twisted", 14, 1, 0),
 +        "a real persistence system")(OpenSSLCertificateOptions.__setstate__)
 +
 +
++=======
++>>>>>>> origin/releases/release-14.0.0-7039-3
  
  class _OpenSSLECCurve(FancyEqMixin, object):
      """

so simply deleting the conflict markers ought to merge it satisfactorily.  If I do so and run the tests they pass.

5190.feature can simply be deleted in trunk.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140507/86231784/attachment-0002.html>

From hawkowl at atleastfornow.net  Wed May  7 16:08:10 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Thu, 8 May 2014 06:08:10 +0800
Subject: [Twisted-Python] The Twisted 14.0 Release Pre-Post-Mortem,
	and Where To From Here
In-Reply-To: <3B44A2B8-E51E-477F-B5E3-0678C3F6DF5A@twistedmatrix.com>
References: <50C81102-2B0F-4033-90C4-F6998DD51B11@atleastfornow.net>
 <3B44A2B8-E51E-477F-B5E3-0678C3F6DF5A@twistedmatrix.com>
Message-ID: <E1451DD3-4FF8-4349-BB3F-753BED739261@atleastfornow.net>


On 8 May 2014, at 5:40, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> 
> On May 7, 2014, at 7:07 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:
> 
>> Hi everyone,
> 
> Hi HawkOwl,
> 
>> I’m sure that some of you have been following the past seven or so weeks of Twisted 14.0 release shenanigans, and this email hopes to explain what went wrong,
> 
> Given that there does not appear to be a 14.0 final, shouldn't this be "what is still going wrong"?  This is more like a death rattle, not a post mortem ;-).

Pre-post-mortem! :)

> 
>> what we can do better next time, and where we can go from here.
> 
> Thank so much for doing this.  I'm sorry the 14.0 release process has been a tough one, and that its toughness has been partially my fault.
> 
> However, I'm glad that this has provoked some reflection and discussion.  The fact that you've done such a thorough analysis almost makes a challenging release cycle worth it :).
> 
>> Problem 1: Twisted 14.0.0pre1 had a regression. This was not noticed in the prerelease stage because it was not marked as a regression, where the RM does a check for open regressions on the milestone.
> 
> When you say it was "not noticed in the prerelease stage", do you just mean it didn't show up before the pre-release was made?
> 
> Also, in the future, can you always include specific links to the tickets involved in the problems encountered?  I'm not exactly sure which regressions we're talking about in pre1.

This regression was https://twistedmatrix.com/trac/ticket/6926 - ie. that all our docs would be wrong.

> 
>> What we can do better next time: Tickets that are regressions need to be marked as regressions and applied to the release milestone. If you think it might be a regression - even slightly - mark it as such, and comment that you are not sure. It’s easier to find the ticket later and decide it is not actually a regression than have to abort a release because it’s come up after a prerelease.
> 
> At the same time, I feel like I should stress like this, by itself, was not a huge problem.  Specifically, rolling a second pre-release is okay.  It's a bit unfortunate that the regression was not tagged in advance of the release, but discovering issues and fixing them is exactly what the pre-release process is for.
> 
>> Problem 2: The fix for the regression was not merged into pre1, the release was rerolled from trunk. This meant some pyOpenSSL and TLS improvements got into the 14.0 release from pre2 onwards, but introduced new regressions.
>> What we can do better next time: Do not reroll from trunk to get bug fixes - merge them into the release branch. 
> 
> Another problem here, that I can take full blame for, was that the communication involved was fragmented and not terribly consistent.  HawkOwl would ask a question on IRC, I would give an answer, then a couple of hours later someone else would give an apparently contradictory answer to a follow-up question.  I don't think that we were actually disagreeing all that much, but at a number of points, it became a game of telephone.  Also, I'd sometimes ask a question about the release process, and someone would tell me something they thought HawkOwl had said or a guess as to what might come next, which I took to be the actual plan.
> 
> Particularly, I was very confused at various points as to whether the next prerelease was going to have things backported, which things were going to be backported, or whether we were re-rolling from trunk.  I think that, similarly, HawkOwl was very confused as to what I _wanted_ to happen.
> 
> In the future, when we're communicating about the release process, we should probably try harder than usual to have all the discussion in a persistent forum so that it's obvious where the state of things is.  Maybe that means the mailing list, maybe the release ticket, but IRC has proven to be a particularly inappropriate and unreliable channel for this kind of discussion.
> 
> If we _do_ have a discussion on IRC, following the precedent that some more responsible members of the community have set, and copying a summary or trimmed transcript of the relevant conclusions into the ticket or to the list should be a requirement.
> 
> To get a head start on this, I have put a link to this very discussion on the ticket. <https://twistedmatrix.com/trac/ticket/7039#comment:23>
> 
> And a final point on communication: on release branches, sensible commit messages are particularly important.  On most branches, individual commit messages can be a bit less than helpful because they're eventually all bundled up into a squash commit (hopefully one day a proper merge commit) with its own useful commit message.  That commit message can fill in any gaps left by unhelpful individual commits.
> 
> On release branches, however, every individual commit has release implications, so explaining why things are being done is extra important.  For example, this sequence of events is confusing: <https://twistedmatrix.com/trac/changeset/42616> <https://twistedmatrix.com/trac/changeset/42617>.  Which merge is being reverted?  (I can kinda guess it's the immediately preceding commit, but...) Did a build fail or something?  Which build?  Were some commits merged incorrectly?  Not hypothetical questions, by the way, I am seriously wondering what happened there :-).

That was me screwing up the merge of 7097 - which was causing conflicts and all sorts of weirdness.

> 
>> Problem 3: The fixes for the regressions were finished after some delay, since the fixes had to be written and reviewed. This introduced delays into the 14.0 release cycle.
>> What we can do better next time: Rather than fix regressions introduced, the ticket that introduced them should be reverted.
> 
> Yup.
> 
>> Problem 4: The fixes for the regressions did not merge cleanly with the release branch. Some 35+ tickets were merged between pre1 and the release of the regression fix into trunk.
> 
> The fact that PyCon was happening at the same time definitely did not help.  For what it's worth, I _really_ tried as hard as I could to finish that stuff before the sprints.  But 14.0 probably should have just come out before then anyway :-).
> 
>> What we can do better next time: Bug fixes should be based off the release branch, not trunk. This reduces the likelihood of code churn or unknown dependencies causing problems during the merge.
> 
> This was one of the aforementioned problems with communication.
> 
>> Problem 5: There was mixed communication whether one of the regression fixes was to be introduced in 14.0 or in a bug fix release (14.0.1).
>> What we can do better: If a fix is intended for merging in to a prerelease, it should be raised on the mailing list, so that there is more visibility for its intentions.
> 
> There should probably also be a comment on the release ticket.
> 
>> Problem 6: I personally made several mistakes along the way - from screwing up svn merges to interpreting the “abort the release and incorporate the bugfix” to apply the initial regression fix. Since the TLS changes were topical, I decided that having them out ASAP would be better than not.
> 
> Again: communication, communication, communication.  I didn't know about any screwed-up SVN merges and wasn't super clear on when releases were aborted.  I would have tried to help more if I knew about the issues with the release branch as they were occurring.

The merge problems was why we have 4 14.0 release branches, remember? :)

> 
>> What we can do better: Improved docs/automation to reduce the margin for RM error, and better automation to make a new release to get out important features really easy.
> 
> The release process _is_ getting easier and easier, but sometimes we still act like it's really hard and thereby introduce additional complexity and difficulties.
> 
>> These are the major problems which I have identified - I’m sure there’s plenty more, and I would like people to list them if I have not - even if they make me look like an idiot ;). We can learn from it, I’m sure.
>> 
>> So, this leaves where to from now. I see a few options, with my estimates for work and risk that it’ll explode:
>> 
>> 1 - Most work, high risk - Work on making the regression fixes merge cleanly with 14.0.0pre5. This is big-ish task with room for error, since there was some underlying code churn.
> 
> Just to be clear, "the regression" that we're talking about is <https://twistedmatrix.com/trac/ticket/7097>, right?

Yes.

> 
>> 2 - Some work, medium risk - Release 14.0.0pre5 as 14.0 final,
> 
> I would most prefer this option.  Embarrassing as the errors in the message fixed by 7097 are, I think it's acceptable to say that this is not a particularly meaningful regression.  For me personally it stretches the definition of "regression" a little bit, because it's information about new functionality, not a change or break in old functionality.  And emitting a new warning is (pretty much by definition) never a "regression" because part of our compatibility policy contract is that your code has to be tolerant to warnings being emitted.
> 
> To be fair, it stretches the definition, but it still technically adheres to it.  Importing twisted's TLS support without service_identity installed is a supported thing, it used to do something "correct", it's moved to do something "incorrect" because there is incorrect text emitted.  Still, if I had to classify it without input from anyone else I'd probably call it a "new bug".
> 
> Critically, users applications won't be broken by this.  They'll see some ugly or possibly incorrect text which will be fixed in an update which will hopefully follow on pretty quickly.  Not to mention that there's an easy fix for this by installing the relevant dependency.

Now that I’ve slept on it, I’m thinking #2 might actually be the best way forward.

> 
>> and I (or another RM if I’m no longer trusted ;) )
> 
> Honestly, at this point, I trust you a bit more with the release process.  Up until this point, you've had only easy successes, which (as you can see!) is a little dangerous ;-).  An experience of a failure that you have clearly articulated the reasons for strikes me as a very useful skill-building exercise.
> 

Hopefully a skill I won’t have to use again, but… ;)

>> initiate the 14.1 release immediately.
> 
> More releases are always better!
> 

True!

>> 3 - Least work, highish risk - Scrap 14.0, begin the 14.1 release immediately. since 14.0 tags become 14.1 tags, and we just have to hope that there’s no regressions in the 39 tickets fixed between pre1 and now. This may introduce issues (since 14.0 is an un-release, and there are questions about what this does to our deprecation windows).
> 
> I think that trying to cram in more features to 14.0 got us into a mess in the first place, so throwing our hands up at this point and trying to shepherd 39 _more_ features into this release, potentially delaying things even longer, does not strike me as a good idea.
> 
>> If I am to be honest, I much prefer option #3, but I would like opinions from other developers, before I go causing more problems than I already have :)
> 
> I can see why #3 is tempting, but trunk has got a lot of churn on it right now and I'm relieved we didn't attempt to re-roll post-PyCon despite the merge difficulties.
> 
> More than I'd prefer option 2 though, I'd prefer that everyone interested weigh in and we make a decision quickly so that the release process doesn't drag on further; I should reiterate that I still trust our glorious release manager HawkOwl to make this decision and be responsible for it, so I'm providing input but I'm not giving any orders here.

Agreed.

I’m going to give this another work day for people to weigh in on. Otherwise, I will go with option #2, get pre5-as-14.0 out the door, cut a 14.1 prerelease, and get that ball rolling. Now that I’ve had some rest between worrying about how much I’ve screwed up the release, that seems like the best way forward :)

But for now, I’m off to play Ingress in the rain before work! :)

- hawkie

> 
> -glyph
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20140508/b4845ee5/attachment.sig>

From jayshah30392 at gmail.com  Sat May 10 08:29:51 2014
From: jayshah30392 at gmail.com (Jay Shah)
Date: Sat, 10 May 2014 16:29:51 +0200
Subject: [Twisted-Python] TCP and ICMP
Message-ID: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>

Hiee All,

I have very simple question. I have already implemented custom reactor for
handling ICMP requests (reference: txnettools) . My problem is: i am
implementing tcp traceroute. I have handled all icmp time exceed messages.
But, i want to handle tcp syn-ack reply which i am getting from remote
server.
How can i do that ?
Can i start listening to TCP syn req or replies on the same reactor on
which i am listening to icmp replies ?
or
should i install new custom reactor for listening to tcp replies ?
I want to parse SYN ACK request ONLY. Neither I want to make a new
connection with remote server nor handling them! I just need syn ack
replies to be parsed so that i can figure out whether i have reached my
destination or not.
thank you.

Jay Shah
(Technische Universität München,
München, Deutschland
Tel. +49 176 7266 7259 )
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140510/209b43c3/attachment-0002.html>

From trac at twistedmatrix.com  Sun May 11 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 11 May 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1399788315.33.6250612958931555981@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140511/306f40aa/attachment-0002.html>

From twisted at tomvn.com  Sun May 11 03:01:16 2014
From: twisted at tomvn.com (Tom van Neerijnen)
Date: Sun, 11 May 2014 10:01:16 +0100
Subject: [Twisted-Python] TCP and ICMP
In-Reply-To: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>
References: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>
Message-ID: <CAMwy1tw3-PBWWGEexaNxegiwhOhWjy3vPA-qVw473qB8EKt_SQ@mail.gmail.com>

You might find something to use in
http://twistedmatrix.com/documents/current/api/twisted.pair.html, or at
least an idea of how to implement it from one of the existing components.


On Sat, May 10, 2014 at 3:29 PM, Jay Shah <jayshah30392 at gmail.com> wrote:

> Hiee All,
>
> I have very simple question. I have already implemented custom reactor for
> handling ICMP requests (reference: txnettools) . My problem is: i am
> implementing tcp traceroute. I have handled all icmp time exceed messages.
> But, i want to handle tcp syn-ack reply which i am getting from remote
> server.
> How can i do that ?
> Can i start listening to TCP syn req or replies on the same reactor on
> which i am listening to icmp replies ?
> or
> should i install new custom reactor for listening to tcp replies ?
> I want to parse SYN ACK request ONLY. Neither I want to make a new
> connection with remote server nor handling them! I just need syn ack
> replies to be parsed so that i can figure out whether i have reached my
> destination or not.
> thank you.
>
> Jay Shah
> (Technische Universität München,
> München, Deutschland
> Tel. +49 176 7266 7259 )
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140511/de086639/attachment-0002.html>

From dstainton415 at gmail.com  Sun May 11 04:15:19 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Sun, 11 May 2014 10:15:19 +0000
Subject: [Twisted-Python] TCP and ICMP
In-Reply-To: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>
References: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>
Message-ID: <CAFN1edqbJFMQeRTKz=ASQLJyA0Y165i0sTcYEDKXm=rDcHam=A@mail.gmail.com>

Hi Jay Shah,

I started (but never finished) to implement a tcp traceroute (with
interesting features) for OONI (Open Observatory of Network
Interference... a Tor Project project) probe. You might use parts of
the ooniprobe api to capture your packets... It's written using
Twisted and I'm fairly certain they've already implemented TCP
traceroute... but you still may want to implement your own... because
it's a fun thing to write, you'd learn a lot... and your traceroute
might have interesting features. I think the ooni interface uses raw
sockets to capture packets.

Through my research I became aware of two other linux kernel
interfaces of interest to capturing packets:
- NFLOG
- NFQUEUE

You'd have to write twisted interfaces for these linux kernel
interfaces... but you can also find some mediocre quality code
examples of this on blog posts. I had a bit of trouble with dropped
packets reusing a twisted interface I found for NFQUEUE; this might've
been a problem with the queued packets not getting consumed quick
enough before the queue limit was reached... not sure.

Cheers,

David

On Sat, May 10, 2014 at 2:29 PM, Jay Shah <jayshah30392 at gmail.com> wrote:
> Hiee All,
>
> I have very simple question. I have already implemented custom reactor for
> handling ICMP requests (reference: txnettools) . My problem is: i am
> implementing tcp traceroute. I have handled all icmp time exceed messages.
> But, i want to handle tcp syn-ack reply which i am getting from remote
> server.
> How can i do that ?
> Can i start listening to TCP syn req or replies on the same reactor on which
> i am listening to icmp replies ?
> or
> should i install new custom reactor for listening to tcp replies ?
> I want to parse SYN ACK request ONLY. Neither I want to make a new
> connection with remote server nor handling them! I just need syn ack replies
> to be parsed so that i can figure out whether i have reached my destination
> or not.
> thank you.
>
> Jay Shah
> (Technische Universität München,
> München, Deutschland
> Tel. +49 176 7266 7259 )
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From adi at roiban.ro  Sun May 11 06:02:42 2014
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 11 May 2014 15:02:42 +0300
Subject: [Twisted-Python] Distributing apilinks.py
In-Reply-To: <87d2frl3vd.fsf@loki.hocat.ca>
References: <CAFycZ9emvGU+E9dt6ZHv=gvCW29fstPvH5m_85qDt_EbPObDBg@mail.gmail.com>
 <874n147inx.fsf@hermes.hocat.ca>
 <35B861B5-BB3B-41BC-AB2C-3DA2F5946AC1@twistedmatrix.com>
 <87d2frl3vd.fsf@loki.hocat.ca>
Message-ID: <CAFycZ9cxfX6-WMwwG0DSHUsN=C_xZyY1sk4+X-=8ZAkwLBGdug@mail.gmail.com>

On 6 May 2014 11:15, Tom Prince <tom.prince at ualberta.net> wrote:
> Glyph <glyph at twistedmatrix.com> writes:
>
>> This would be very nice.  Did you file an actual bug on pydoctor or is this a conversation which will be momentarily forgotten? :)
>
> Not exactly, but
> https://bugs.launchpad.net/pydoctor/+bug/1246713

I tried to push this ticket forward and added a comments. Feedback is
much appreciated.

> https://bugs.launchpad.net/pydoctor/+bug/1287458
> both document that solution.

I have submitted a patch for pydoctor

https://code.launchpad.net/~adiroiban/pydoctor/1287458-objects.inv/+merge/219116

I have created a new ticket to support linking based on objects.inv.
Please add your feedback.

https://bugs.launchpad.net/pydoctor/+bug/1318325

Thanks!

-- 
Adi Roiban



From itamar at itamarst.org  Sun May 11 06:35:46 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 11 May 2014 08:35:46 -0400
Subject: [Twisted-Python] TCP and ICMP
In-Reply-To: <CAMwy1tw3-PBWWGEexaNxegiwhOhWjy3vPA-qVw473qB8EKt_SQ@mail.gmail.com>
References: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>
 <CAMwy1tw3-PBWWGEexaNxegiwhOhWjy3vPA-qVw473qB8EKt_SQ@mail.gmail.com>
Message-ID: <536F6EA2.5080404@itamarst.org>

On 05/11/2014 05:01 AM, Tom van Neerijnen wrote:
> You might find something to use in 
> http://twistedmatrix.com/documents/current/api/twisted.pair.html, or 
> at least an idea of how to implement it from one of the existing 
> components.
>
I believe the version of twisted.pair in 14.0 (or release candidates) is 
vastly improved: rewritten, has documentation, etc..



From hawkowl at atleastfornow.net  Mon May 12 05:07:15 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Mon, 12 May 2014 19:07:15 +0800
Subject: [Twisted-Python] Twisted 14.0.0 Release Announcement
Message-ID: <52611128-3708-40CE-86F5-C63FE9054A6B@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 14.0! It has been a long road to get here, but we’ve done it! 

The highlights of this release are:

- Twisted Positioning (`twisted.positioning`) makes its entry into Twisted! It comes ready to talk with common GPS devices, and will supersede `twisted.protocols.gps`.

- A wealth of SSL/TLS improvements, including ECDHE support, TLS Service Identity (with service_identity on PyPI), a stronger default set of ciphers, and strengthening against attacks such as CRIME. A Twisted Web server with pyOpenSSL 0.14 is capable of getting an A in Qualys SSL Labs tests out of the box, and A+ with small application modifications. Twisted Agent can also now do HTTPS hostname verification.

- Python 3 improvements, including the ability for `pip install` to install all ported modules.

- Twisted Pair’s TUN/TAP support has been overhauled, with documentation and full test coverage.

- Significant documentation improvements, including more API documentation for Twisted Mail & Twisted Names, narrative documentation for Twisted Names, and a migration to Sphinx for building Twisted narrative docs.

- Support is dropped for pyOpenSSL older than 0.10 and Windows XP.

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>) .

Many thanks to everyone who had a part in this release - we’ve got some big things landed, and if it weren’t for the support of developers (both core and occasional), the Twisted Software Foundation, or people giving feedback and filing bugs, we’d have never got it done.

Twisted Regards,
HawkOwl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20140512/a50572a1/attachment.sig>

From hs at ox.cx  Mon May 12 05:40:02 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Mon, 12 May 2014 13:40:02 +0200
Subject: [Twisted-Python] Twisted 14.0.0 Release Announcement
In-Reply-To: <52611128-3708-40CE-86F5-C63FE9054A6B@atleastfornow.net>
References: <52611128-3708-40CE-86F5-C63FE9054A6B@atleastfornow.net>
Message-ID: <224D84CF-5124-41D8-B07E-21D6F1CEEE70@ox.cx>

On 12 May 2014, at 13:07, HawkOwl wrote:

> On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 14.0! It has been a long road to get here, but we’ve done it!

Thank you so much for pushing this through!  Barring unpleasant surprises, this is a wonderful release!
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20140512/bfa3f4df/attachment.sig>

From glyph at twistedmatrix.com  Mon May 12 13:20:42 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 12 May 2014 12:20:42 -0700
Subject: [Twisted-Python] TCP and ICMP
In-Reply-To: <536F6EA2.5080404@itamarst.org>
References: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>
 <CAMwy1tw3-PBWWGEexaNxegiwhOhWjy3vPA-qVw473qB8EKt_SQ@mail.gmail.com>
 <536F6EA2.5080404@itamarst.org>
Message-ID: <1A63448C-A118-45B7-AEB5-310643DB7C06@twistedmatrix.com>


On May 11, 2014, at 5:35 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

> I believe the version of twisted.pair in 14.0 (or release candidates) is vastly improved: rewritten, has documentation, etc..

I am pretty sure this only applies to TUN/TAP support, not all of twisted.pair.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140512/2a900651/attachment-0002.html>

From glyph at twistedmatrix.com  Mon May 12 13:21:47 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 12 May 2014 12:21:47 -0700
Subject: [Twisted-Python] [Twisted-web] Twisted 14.0.0 Release
	Announcement
In-Reply-To: <52611128-3708-40CE-86F5-C63FE9054A6B@atleastfornow.net>
References: <52611128-3708-40CE-86F5-C63FE9054A6B@atleastfornow.net>
Message-ID: <2B16A476-4F01-499A-8CF9-F7D3806DBD11@twistedmatrix.com>


On May 12, 2014, at 4:07 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> Twisted Agent can also now do HTTPS hostname verification.

I feel that it's important to note that Twisted Web's client Agent *does* do HTTPS hostname verification by default; you don't need to turn it on ;).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140512/4897b983/attachment-0002.html>

From kevin.horn at gmail.com  Tue May 13 08:30:52 2014
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 13 May 2014 09:30:52 -0500
Subject: [Twisted-Python] TCP and ICMP
In-Reply-To: <1A63448C-A118-45B7-AEB5-310643DB7C06@twistedmatrix.com>
References: <CADnuy_Om53LQfredZQjoPMvno235Z0wLG_s417K8HV49DcoX_Q@mail.gmail.com>
 <CAMwy1tw3-PBWWGEexaNxegiwhOhWjy3vPA-qVw473qB8EKt_SQ@mail.gmail.com>
 <536F6EA2.5080404@itamarst.org>
 <1A63448C-A118-45B7-AEB5-310643DB7C06@twistedmatrix.com>
Message-ID: <CA+U=zK0+G005qJFrvuuCKpOOiWgOrFfGe1xaOukzM3EAqru9mQ@mail.gmail.com>

On Mon, May 12, 2014 at 2:20 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 11, 2014, at 5:35 AM, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
>
> I believe the version of twisted.pair in 14.0 (or release candidates) is
> vastly improved: rewritten, has documentation, etc..
>
>
> I am pretty sure this only applies to TUN/TAP support, not all of
> twisted.pair.
>
> -glyph
>
>
This does appear to be the case.  In fact the documentation gives the
impression (to me at least) that twisted.pair is _only_ a TUN/TAP library.

Still better than no documentation at all, though.

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140513/e9520eff/attachment-0002.html>

From itamar at itamarst.org  Fri May 16 08:49:18 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 16 May 2014 10:49:18 -0400
Subject: [Twisted-Python] ANN: Eliot: a framework for Logging as Storytelling
Message-ID: <44dd90e39614b15807d456aba91ebc49@itamarst.org>

 

Eliot provides a structured logging and tracing system for Python that
generates log messages describing a forest of nested actions. Actions
start and eventually finish, successfully or not. Log messages thus tell
a story: what happened and what caused it. 

Here's what your logs might look like before using Eliot: 

Going to validate http://example.com/index.html [1].
Started download attempted.
Download succeeded!
Missing <title> element in "/html/body".
Bad HTML entity in "/html/body/p[2]".
2 validation errors found!

After switching to Eliot you'll get a tree of messages with both message
contents and causal relationships encoded in a structured format: 

	* {"action_type": "validate_page", "action_status": "started", "url":
"http://example.com/index.html" [1]} 

 	* {"action_type": "download", "action_status": "started"}
 	* {"action_type": "download", "action_status": "succeeded"}

	* {"action_type": "validate_html", "action_status": "started"} 

 	* {"message_type": "validation_error", "error_type": "missing_title",
"xpath": "/html/head"}
 	* {"message_type": "validation_error", "error_type": "bad_entity",
"xpath": "/html/body/p[2]"}

 	* {"action_type": "validate_html", "action_status": "failed",
"exception": "validator.ValidationFailed"}

 	* {"action_type": "validate_page", "action_status": "failed",
"exception": "validator.ValidationFailed"}

Features: 

 	* Structured, typed log messages.
 	* Ability to log actions, not just point-in-time information: log
messages become a trace of program execution.
 	* Excellent support for unit testing your logging code.
 	* Emphasis on performance, including no blocking I/O in logging code
path.
 	* Optional Twisted support.
 	* Designed for JSON output, usable by Logstash/Elasticsearch.
 	* Supports CPython 2.7, 3.3 and PyPy.

Eliot is released by HybridCluster [2] under the Apache 2.0 License. 

To install: 

$ pip install eliot

Downloads are available on PyPI [3]. 

Documentation can be found on Read The Docs [4]. 

Bugs and feature requests should be filed at the project Github page
[5]. 

 

Links:
------
[1] http://example.com/index.html
[2] https://hybridcluster.github.io
[3] https://pypi.python.org/pypi/eliot
[4] https://eliot.readthedocs.org/
[5] https://github.com/hybridcluster/eliot
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140516/39677344/attachment-0002.html>

From _ at lvh.io  Sat May 17 07:53:06 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Sat, 17 May 2014 15:53:06 +0200
Subject: [Twisted-Python] [ANN] thimble 0.1.0
Message-ID: <CAE_Hg6YPbNspurj2o51GPc_2xORxbcx8qhm_M4eA9uxc1j3Aig@mail.gmail.com>

Hi everyone!


thimble is a library that makes it easy to wrap blocking objects with a
thread pool to give you an async API. In particular, it lets you
selectively wrap blocking methods, and takes an explicit reactor and thread
pool, making it at least slightly harder to do the obvious but potentially
bad thing and tricky to test thing (global reactor state, using the reactor
thread pool).

(It's a thimble because it lets you play with threads without pricking
yourself :-))

This is a small library: it doesn't really fix any big engineering
problems, and that's okay. It just removes a bunch of boilerplate I've seen
in many a Twisted software project, usually boilerplate that's implemented
using the suboptimal methods described above.

The README should run you through it real quick:
https://pypi.python.org/pypi/thimble

This is just an early release. I expect that the documentation isn't good
enough to get best practices out the door, particularly in setting up
thread pools. I think it's pretty decent and probably already worth a look,
though :-)

Thanks to Rackspace for letting me write it open source & on company time
:-)

hth
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140517/6fb01638/attachment-0002.html>

From trac at twistedmatrix.com  Sun May 18 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 18 May 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1400393115.51.2518743899807750440@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140518/97acacca/attachment-0002.html>

From glyph at twistedmatrix.com  Sun May 18 16:19:53 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 18 May 2014 15:19:53 -0700
Subject: [Twisted-Python] [ANN] thimble 0.1.0
In-Reply-To: <CAE_Hg6YPbNspurj2o51GPc_2xORxbcx8qhm_M4eA9uxc1j3Aig@mail.gmail.com>
References: <CAE_Hg6YPbNspurj2o51GPc_2xORxbcx8qhm_M4eA9uxc1j3Aig@mail.gmail.com>
Message-ID: <B80233DA-5B02-4532-B90A-326482008B30@twistedmatrix.com>

On May 17, 2014, at 6:53 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> Hi everyone!

> thimble is a library that makes it easy to wrap blocking objects with a thread pool to give you an async API. In particular, it lets you selectively wrap blocking methods, and takes an explicit reactor and thread pool, making it at least slightly harder to do the obvious but potentially bad thing and tricky to test thing (global reactor state, using the reactor thread pool). 

Thanks for putting this together.

> (It's a thimble because it lets you play with threads without pricking yourself :-))

I love the name, and the rationale :).

> This is a small library: it doesn't really fix any big engineering problems, and that's okay. It just removes a bunch of boilerplate I've seen in many a Twisted software project, usually boilerplate that's implemented using the suboptimal methods described above.

I think this is the sort of thing that should move into Twisted itself, eventually.  Thoughts?

> The README should run you through it real quick: https://pypi.python.org/pypi/thimble
> 
> This is just an early release. I expect that the documentation isn't good enough to get best practices out the door, particularly in setting up thread pools. I think it's pretty decent and probably already worth a look, though :-)
> 
> Thanks to Rackspace for letting me write it open source & on company time :-)
> 
> hth
> lvh
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140518/5fb70ec2/attachment-0002.html>

From adi at roiban.ro  Mon May 19 00:27:10 2014
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 19 May 2014 09:27:10 +0300
Subject: [Twisted-Python] Why would someone need SSHTransportAddress?
Message-ID: <CAFycZ9f2pac0in6tdVUvQhnHP4zLX-waKhrT1hPmo_U1E4p5ag@mail.gmail.com>

This email is bases on comment from https://twistedmatrix.com/trac/ticket/5999

I fail to see the reason why SSHTransportAddress exist and why would
anyone need It.

SSHTransportAddress is an IAddress which has a single member called
"address" and which is an IAddress ...

In case SSHTransportAddress is useful and people should start using
it, maybe this is a bug in SSHTransportAddress documentation as it
should stat why someone want to use it instead of directly using any
address define in twisted.internet.address

SSHTransportAddress was introduced in this ticket
https://twistedmatrix.com/trac/ticket/2997 and since it was reviewed
and approved by 2 other persons, I guess that I am the only one
failing to understand
to purpose of this class.

Thanks!

-- 
Adi Roiban



From _ at lvh.io  Mon May 19 03:29:13 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 19 May 2014 11:29:13 +0200
Subject: [Twisted-Python] [ANN] thimble 0.1.0
In-Reply-To: <B80233DA-5B02-4532-B90A-326482008B30@twistedmatrix.com>
References: <CAE_Hg6YPbNspurj2o51GPc_2xORxbcx8qhm_M4eA9uxc1j3Aig@mail.gmail.com>
 <B80233DA-5B02-4532-B90A-326482008B30@twistedmatrix.com>
Message-ID: <CAE_Hg6aJZDTKo5gFoh17hie7RgN+Ho1ZGwvRqAbuZes3jtooDA@mail.gmail.com>

On Mon, May 19, 2014 at 12:19 AM, Glyph <glyph at twistedmatrix.com> wrote:

> I think this is the sort of thing that should move into Twisted itself,
> eventually.  Thoughts?
>

I agree! There's a few things I'd like to work out with the freedom to
break things of a v0.x.x semver version before that happens though.

Notably, this thing assumes that all attribute accesses are thread-safe and
synchronous. That's often true, but hey, this is Python, so you get to do
whatever you want when you access an attribute (and @property even makes it
easy to do so). Also because right now I'm suggesting a pool with a singled
thread for synchronized access to an object that isn't thread safe;
especially if you *know* the object isn't thread safe you probably want
something to take care of attribute access too :-)

hth
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140519/e1ee7bed/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon May 19 09:59:12 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 19 May 2014 15:59:12 -0000
Subject: [Twisted-Python] Why would someone need SSHTransportAddress?
In-Reply-To: <CAFycZ9f2pac0in6tdVUvQhnHP4zLX-waKhrT1hPmo_U1E4p5ag@mail.gmail.com>
References: <CAFycZ9f2pac0in6tdVUvQhnHP4zLX-waKhrT1hPmo_U1E4p5ag@mail.gmail.com>
Message-ID: <20140519155912.5287.1813510360.divmod.xquotient.12@top>

On 06:27 am, adi at roiban.ro wrote:
>This email is bases on comment from 
>https://twistedmatrix.com/trac/ticket/5999
>
>I fail to see the reason why SSHTransportAddress exist and why would
>anyone need It.

Here are a couple ideas.

You have a library that accepts a connection and does some things with 
it.  You want to log the operations that are taken using the connection 
and you want to include information in those logs about which connection 
you did things with.  You choose to use the addresses of the local and 
remote sides of the connection to identify it.

You have a library that accepts a connection and wants to be able to set 
up another connection like it to the same remote address.  You get the 
remote address using the transport's `getPeer` method.

Though you may have established the SSH connection over a TCP/IPv4 
connection, neither of these uses can be accomplished if the SSH 
connection, when treated as a transport, merely uses an `IPv4Address` 
instance to represent the address of the remote end of the connection. 
Using `IPv4Address` gives you no way to differentiate between an SSH 
connection running over a TCP/IPv4 connection and a plain TCP/IPv4 
connection without SSH.

In practice, `SSHTransportAddress` is missing the information you would 
need to implement either of these scenarios.  However, that seems more 
like an argument for adding the missing information to that address type 
rather than discarding the address type.

Jean-Paul



From exarkun at twistedmatrix.com  Mon May 19 12:24:14 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 19 May 2014 18:24:14 -0000
Subject: [Twisted-Python] IOpenSSLClientConnectionCreator was ContextFactory,
 now it's IOpenSSLClientConnectionCreator not ContextFactory
Message-ID: <20140519182414.5287.1008274228.divmod.xquotient.40@top>

Hello,

I just noticed that #7098 expanded the meaning of the objects Twisted 
typically refers to as "context factories".

Prior to #7098, these were things that implemented a `getContext` method 
that returned an `OpenSSL.SSL.Context` instance.

Subsequent to #7098, these are now *either* that or an object that 
provides `IOpenSSLClientConnectionCreator`.

It seems that parts of Twisted itself were updated to reflect this 
change.  For example, the very bottom of the TLS implementation stack in 
Twisted, `twisted.protocols.tls`, acknowledges this change (I imagine 
this was unavoidable).  Also, way on the other side of Twisted, 
`twisted.web.client.Agent` takes advantage of this change to implement 
the great new certificate and hostname validation features introduced in 
14.0.0.

However, other parts of Twisted itself were not updated.  For example, 
the layers that sit in between `twisted.protocols.tls` and 
`twisted.web.client.Agent` weren't touched much.  `SSL4ClientEndpoint`, 
for example, still documents its `sslContextFactory` as "SSL 
Configuration information as an instance of 
L{twisted.internet.ssl.ContextFactory}.".  And, somewhat insanely I 
think, `IReactorSSL.connectSSL` still says "@param contextFactory: a 
L{twisted.internet.ssl.ClientContextFactory} object.".

Merely from a documentation standpoint, this seems suboptimal.  From a 
compatibility standpoint...  Well, it seems incompatible to me.  Perhaps 
this is an instance where the compatibility policy can be broken (though 
really that's academic since 14.0.0 has already been released, the 
policy has been broken already) but I don't recall any explicit 
discussion about a decision to do this.

I *hope* and suspect there won't be much fall-out from this change 
considering it's hard to implement TLS and as far as I know there are no 
third-party implementations of `IReactorSSL` (GNUTLS came to mind but 
they have their own incompatible interface afaict).  In other words, 
maybe we'll get lucky this time.

I wrote this email instead of filing tickets about the documentation 
problems because doing the latter was implicit acknowledgement that this 
incompatible change is okay.  Having written the email now, I see 
there's probably no going back, regardless.  Maybe we can learn 
something from this incident and avoid repeating it with a more popular 
interface, though.

We could probably add a description of this particular kind of 
incompatible change to the `CompatibilityPolicy` wiki page.  If 
reviewers read that page, then they'll know to watch out for it.

And of course (assuming we're committed to this direction, which we seem 
to be) we need to fix the rest of the "contextFactory" documentation 
throughout Twisted.  I'll go file one ticket related to that now...

Jean-Paul



From dstainton415 at gmail.com  Mon May 19 12:48:07 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Mon, 19 May 2014 18:48:07 +0000
Subject: [Twisted-Python] Why would someone need SSHTransportAddress?
In-Reply-To: <20140519155912.5287.1813510360.divmod.xquotient.12@top>
References: <CAFycZ9f2pac0in6tdVUvQhnHP4zLX-waKhrT1hPmo_U1E4p5ag@mail.gmail.com>
 <20140519155912.5287.1813510360.divmod.xquotient.12@top>
Message-ID: <CAFN1edoXSZobgyGn0Gv8MkyP_KRVdTEE9sG-yae=9BPY=ZxnSg@mail.gmail.com>

It seems like a fairly common idiom to setup some sort of TCP server
with a kernel selected port
via an endpoint descriptor like this:

def getListeningPort(listeningPort):
    address = listeningPort.getHost()
    endpointDesc = convertAddressToEndpointDesc(address)
    sendAnnouncement(endpointDesc)

endpoint = serverFromString(self.reactor, 'tcp:0')
d = endpoint.listen(MyProtocolFactory())
d.addCallback(getListeningPort)

...
later on a remote client receives the endpoint string and uses it to connect:

endpointDesc = getAnnouncement()
endpoint = clientFromString(endpointDesc)
endpoint.connect(MyFactory())

For the Tor Hidden Services endpoint (work in progress) I've
implemented IAddress and IListeningPort:
https://github.com/david415/txtorcon/blob/endpoint_parser_plugin-rewrite4/txtorcon/torconfig.py#L106-L160

Creating a Tor Hidden Service endpoint without specifying a "hidden
services directory" containing an rsa private key and a hostname file
causes the endpoint object to create a new Tor Hidden Service. This is
conceptually similar to the case where we create a TCP server endpoint
with the port number set to zero. In both cases the fired
IListeningPort implementation should tell us what we need to know in
order to construct a client endpoint descriptor string.

I was thinking that it would be great if the process of creating these
endpoint strings from an IAddress implementation should/could be
endpoint agnostic. It should work even if the endpoint descriptors
have no notion of hosts or ports... For protocols like TCP it is
non-obvious how to do this correctly because the host cannot be
correctly guessed in the face of NAT routers etc... as mentioned here:
https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.ITransport.html#getPeer

This is why the above TCP example is flawed; however the equivalent
example with the Tor endpoints will work perfectly and is not affected
by NAT routers:
https://github.com/david415/txsocksx/blob/tor_deferred_dispatcher/examples/tor-dispatch-onion.py#L39-L63

The TorOnionAddress has all the information it needs to create a Tor
client endpoint... except for the endpoint type identifier and a set
of rules from constructing endpoint strings... which perhaps the
TorOnionAddress should get from the TCPHiddenServiceEndpointParser?
Perhaps if the user were to pass in more information to the server
endpoint object then the TCP IListeningPort implementation would be
able to correctly produce a TCP client endpoint strings. Or maybe this
just doesn't make sense for protocols like TCP.



On Mon, May 19, 2014 at 3:59 PM,  <exarkun at twistedmatrix.com> wrote:
> On 06:27 am, adi at roiban.ro wrote:
>>
>> This email is bases on comment from
>> https://twistedmatrix.com/trac/ticket/5999
>>
>> I fail to see the reason why SSHTransportAddress exist and why would
>> anyone need It.
>
>
> Here are a couple ideas.
>
> You have a library that accepts a connection and does some things with it.
> You want to log the operations that are taken using the connection and you
> want to include information in those logs about which connection you did
> things with.  You choose to use the addresses of the local and remote sides
> of the connection to identify it.
>
> You have a library that accepts a connection and wants to be able to set up
> another connection like it to the same remote address.  You get the remote
> address using the transport's `getPeer` method.
>
> Though you may have established the SSH connection over a TCP/IPv4
> connection, neither of these uses can be accomplished if the SSH connection,
> when treated as a transport, merely uses an `IPv4Address` instance to
> represent the address of the remote end of the connection. Using
> `IPv4Address` gives you no way to differentiate between an SSH connection
> running over a TCP/IPv4 connection and a plain TCP/IPv4 connection without
> SSH.
>
> In practice, `SSHTransportAddress` is missing the information you would need
> to implement either of these scenarios.  However, that seems more like an
> argument for adding the missing information to that address type rather than
> discarding the address type.
>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Tue May 20 02:37:37 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 20 May 2014 01:37:37 -0700
Subject: [Twisted-Python] [ANN] thimble 0.1.0
In-Reply-To: <CAE_Hg6aJZDTKo5gFoh17hie7RgN+Ho1ZGwvRqAbuZes3jtooDA@mail.gmail.com>
References: <CAE_Hg6YPbNspurj2o51GPc_2xORxbcx8qhm_M4eA9uxc1j3Aig@mail.gmail.com>
 <B80233DA-5B02-4532-B90A-326482008B30@twistedmatrix.com>
 <CAE_Hg6aJZDTKo5gFoh17hie7RgN+Ho1ZGwvRqAbuZes3jtooDA@mail.gmail.com>
Message-ID: <05E06172-62FC-4834-B283-EA1C9504F7F5@twistedmatrix.com>


On May 19, 2014, at 2:29 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> On Mon, May 19, 2014 at 12:19 AM, Glyph <glyph at twistedmatrix.com> wrote:
> I think this is the sort of thing that should move into Twisted itself, eventually.  Thoughts?
> 
> I agree! There's a few things I'd like to work out with the freedom to break things of a v0.x.x semver version before that happens though.

Oh, definitely.  Hence: eventually.

> Notably, this thing assumes that all attribute accesses are thread-safe and synchronous. That's often true, but hey, this is Python, so you get to do whatever you want when you access an attribute (and @property even makes it easy to do so). Also because right now I'm suggesting a pool with a singled thread for synchronized access to an object that isn't thread safe; especially if you *know* the object isn't thread safe you probably want something to take care of attribute access too :-)

Just write a decorator that programmatically verifies that everything about the attribute it's decorating is thread-safe.  Simple!  ;-)

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140520/4ec1a3b0/attachment-0002.html>

From glyph at twistedmatrix.com  Tue May 20 03:27:08 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 20 May 2014 02:27:08 -0700
Subject: [Twisted-Python] IOpenSSLClientConnectionCreator was
	ContextFactory,
	now it's IOpenSSLClientConnectionCreator not ContextFactory
In-Reply-To: <20140519182414.5287.1008274228.divmod.xquotient.40@top>
References: <20140519182414.5287.1008274228.divmod.xquotient.40@top>
Message-ID: <A7832E9B-6B12-4B54-8AC0-616BBBA9DB83@twistedmatrix.com>


On May 19, 2014, at 11:24 AM, exarkun at twistedmatrix.com wrote:

> Prior to #7098, these were things that implemented a `getContext` method that returned an `OpenSSL.SSL.Context` instance.

I should note that this was poorly documented everywhere (in fact, one of the main things I noticed when working on the cluster of problems related to #7098 was that nothing really explained what a "context factory" was).

> Subsequent to #7098, these are now *either* that or an object that provides `IOpenSSLClientConnectionCreator`.

Yes, this is correct.

> However, other parts of Twisted itself were not updated.  For example, the layers that sit in between `twisted.protocols.tls` and `twisted.web.client.Agent` weren't touched much.

Are you referring to anything other than SSL4ClientEndpoint?

> `SSL4ClientEndpoint`, for example, still documents its `sslContextFactory` as "SSL Configuration information as an instance of L{twisted.internet.ssl.ContextFactory}.".  And, somewhat insanely I think, `IReactorSSL.connectSSL` still says "@param contextFactory: a L{twisted.internet.ssl.ClientContextFactory} object.".

"Insanely" might be overstating it.  Incorrectly, maybe :-).

> Merely from a documentation standpoint, this seems suboptimal.  From a compatibility standpoint...  Well, it seems incompatible to me.  Perhaps this is an instance where the compatibility policy can be broken (though really that's academic since 14.0.0 has already been released, the policy has been broken already) but I don't recall any explicit discussion about a decision to do this.

At the time, I thought really hard about how to perform this change in a compatible way, and I thought I'd come up with something that was in line with the compatibility policy.  Apparently my reviewer agreed.  I even thought I discussed it with you, since you were sitting right there ;-).  Perhaps it was someone else at the sprint.  Upon reflection though, I think you're right, and it is technically incompatible.  I only say "technically" because I don't think third-party implementations exist, not because this type of incompatibility should be OK or the policy should be changed.

My reasoning went like this:

If you can import the new interface to declare that you implement it, then of course your contextFactory expects to have the new methods declared on it.  So there's no possibility of passing in an object which does not provide that interface and getting a surprise AttributeError.

If you want to work with older versions of Twisted and span the compatibility gap, then it's easy enough to determine if the new interface is available.

To be clear, the case I didn't consider, the thing that makes this an incompatible change, is that if you have a new version of Twisted, where the new interfaces are available, and your shiny new IOpenSSLClientConnectionCreator provides them, but does not provide the old-style "getContext", then a perfectly valid 3rd-party implementation of IReactorSSL will unconditionally call getContext on your fancy new object and explode.

In other words, IReactorSSL has changed incompatibly, because the type of one of its arguments has changed incompatibly.

If I had done this only to, for example, SSL4ClientEndpoint's constructor, I think it actually would have been a compatible change.  In order to provoke this behavior in that case, you'd need to monkeypatch SSL4ClientEndpoint itself.

> I *hope* and suspect there won't be much fall-out from this change considering it's hard to implement TLS and as far as I know there are no third-party implementations of `IReactorSSL` (GNUTLS came to mind but they have their own incompatible interface afaict).  In other words, maybe we'll get lucky this time.

I did check various code-search sites to see how folks were using it, and... yes, basically nobody has implemented IReactorSSL, as far as I can tell.  I did learn that a lot of people vendor in Twisted though: do you know Twisted 10.2 apparently is in Chromium's build tools directory?  Anyway, if someone had actually implemented it, this problem might have occurred to me earlier.

If we were going to make this mistake and learn from it, then this seems like the ideal place to have done so.

> I wrote this email instead of filing tickets about the documentation problems because doing the latter was implicit acknowledgement that this incompatible change is okay.  Having written the email now, I see there's probably no going back, regardless.  Maybe we can learn something from this incident and avoid repeating it with a more popular interface, though.

So, just from a technical perspective, how could we have avoided this?

If we were to go with the suggested 'version' attribute on interfaces, I think that we would still have basically the same problem.  We could increment IReactorSSL to version 2, but that still obliges the caller with the new-style context factory to always check that attribute before attempting to call it. That seems like a pyrrhic victory; satisfying our currently stated victory condition without actually satisfying the goal of not breaking software that implements IReactorSSL.  In fairness, it does, at least, give the developer of the offending code a way to fix it, but the developer of the offending code (the one that calls IReactorSSL) is unlikely to be the one who notices it.

We could have declared a new interface (Or IReactorSSL version 2) with a new method, connectSSL_Ex, which had the new signature.  In that case, at least, you'd be aware that you were calling a new method that might not be available on older Twisted versions and might think to check the presence of IReactorSSL_2 or IReactorSSL.version.

I'd say we could have only changed SSL4ClientEndpoint/SSL4ServerEndpoint and just planned to deprecate IReactorSSL entirely, but that would have left 'ITLSTransport' in the lurch, using crappy old interfaces, unless we implemented generalized protocol switching.

This still leaves me scratching my head as to how I could have noticed the change was incompatible in time, though, which is possibly the more interesting question.  I guess I do read CompatibilityPolicy from time to time so this suggestion might have worked:

> We could probably add a description of this particular kind of incompatible change to the `CompatibilityPolicy` wiki page.  If reviewers read that page, then they'll know to watch out for it.

"Don't change the type of any public interface's arguments; for example: ..."?

I was going to say something about how we might want certain interfaces to not allow 3rd-party implementations, except there are plenty of 3rd-party places that IReactorSSL is imported... they just happen to inherit our existing implementation of the interface, because it's the one everyone wants anyway.

> And of course (assuming we're committed to this direction, which we seem to be) we need to fix the rest of the "contextFactory" documentation throughout Twisted.  I'll go file one ticket related to that now...

Yes, this seems like some necessary follow-up work; reverting at this point would be pretty pointless.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140520/3e874e2c/attachment-0002.html>

From lacrima.maxim at gmail.com  Tue May 20 03:40:51 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Tue, 20 May 2014 12:40:51 +0300
Subject: [Twisted-Python] Porting Twisted to Python 3.
Message-ID: <CAKef57PD5my4d6ajCEJtz+Ud9KvFCxyw8EH=Qpz9ed5X7D+MtQ@mail.gmail.com>

Hello!

I can see that Python 3 support in Twisted is incomplete. I was able to
`pip install twisted` on Python 3, but I couldn't run a simple example
program using Twisted Agent.

A simple `from twisted.web.client import Agent` causes `ImportError: No
module named 'twisted.python.systemd'`

I would like to help in porting Twisted to Python 3. I have a couple of
questions.

My initial idea was to run some twisted tests with trial and start from
there. But it looks like trial is not ported to python3 and also I think
many tests themselves are not python3 aware.

So what is a recommended workflow?

As for Twisted Agent... URL and its parsed components are now bytes, but
`Agent._getEndpoint` operates on str, and so do other functions
(`isIPAddress`, `isIPv6Address`), causing type and other errors.

I would like to fix this (at least to try), but I need some guidance.

Thank you.

-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140520/9425453f/attachment-0002.html>

From itamar at itamarst.org  Tue May 20 04:50:13 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 20 May 2014 06:50:13 -0400
Subject: [Twisted-Python] Porting Twisted to Python 3.
In-Reply-To: <CAKef57PD5my4d6ajCEJtz+Ud9KvFCxyw8EH=Qpz9ed5X7D+MtQ@mail.gmail.com>
References: <CAKef57PD5my4d6ajCEJtz+Ud9KvFCxyw8EH=Qpz9ed5X7D+MtQ@mail.gmail.com>
Message-ID: <537B3365.9060506@itamarst.org>

On 05/20/2014 05:40 AM, Maxim Lacrima wrote:
> Hello!
>
> I can see that Python 3 support in Twisted is incomplete. I was able 
> to `pip install twisted` on Python 3, but I couldn't run a simple 
> example program using Twisted Agent.
>
> A simple `from twisted.web.client import Agent` causes `ImportError: 
> No module named 'twisted.python.systemd'`
>
> I would like to help in porting Twisted to Python 3. I have a couple 
> of questions.
>
> My initial idea was to run some twisted tests with trial and start 
> from there. But it looks like trial is not ported to python3 and also 
> I think many tests themselves are not python3 aware.

The trial command-line tool is not ported, but the library part is.

admin/run-python3-tests 
<https://twistedmatrix.com/trac/browser/trunk/admin/run-python3-tests> 
will run Twisted's tests on Python 3.

> So what is a recommended workflow?
>

See https://twistedmatrix.com/trac/wiki/Plan/Python3

> As for Twisted Agent... URL and its parsed components are now bytes, 
> but `Agent._getEndpoint` operates on str, and so do other functions 
> (`isIPAddress`, `isIPv6Address`), causing type and other errors.

Probably Agent would probably need to be modified to explicitly take 
bytes on both Python 2 and Python 3, since URLs are bytes.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140520/b83a1865/attachment-0002.html>

From lacrima.maxim at gmail.com  Tue May 20 05:56:51 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Tue, 20 May 2014 14:56:51 +0300
Subject: [Twisted-Python] Porting Twisted to Python 3.
In-Reply-To: <537B3365.9060506@itamarst.org>
References: <CAKef57PD5my4d6ajCEJtz+Ud9KvFCxyw8EH=Qpz9ed5X7D+MtQ@mail.gmail.com>
 <537B3365.9060506@itamarst.org>
Message-ID: <CAKef57PSiMy2+rB+yXgg7bMUC=MqDHDz4yiMn5zd3WvB+EtteA@mail.gmail.com>

Thanks. That wiki page has enough info to get started.


On 20 May 2014 13:50, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

>  On 05/20/2014 05:40 AM, Maxim Lacrima wrote:
>
> Hello!
>
>  I can see that Python 3 support in Twisted is incomplete. I was able to
> `pip install twisted` on Python 3, but I couldn't run a simple example
> program using Twisted Agent.
>
>  A simple `from twisted.web.client import Agent` causes `ImportError: No
> module named 'twisted.python.systemd'`
>
>  I would like to help in porting Twisted to Python 3. I have a couple of
> questions.
>
>  My initial idea was to run some twisted tests with trial and start from
> there. But it looks like trial is not ported to python3 and also I think
> many tests themselves are not python3 aware.
>
>
> The trial command-line tool is not ported, but the library part is.
>
> admin/run-python3-tests<https://twistedmatrix.com/trac/browser/trunk/admin/run-python3-tests>will run Twisted's tests on Python 3.
>
>
>  So what is a recommended workflow?
>
>
> See https://twistedmatrix.com/trac/wiki/Plan/Python3
>
>
>  As for Twisted Agent... URL and its parsed components are now bytes, but
> `Agent._getEndpoint` operates on str, and so do other functions
> (`isIPAddress`, `isIPv6Address`), causing type and other errors.
>
>
> Probably Agent would probably need to be modified to explicitly take bytes
> on both Python 2 and Python 3, since URLs are bytes.
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140520/a1279def/attachment-0002.html>

From exarkun at twistedmatrix.com  Tue May 20 06:30:11 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 20 May 2014 12:30:11 -0000
Subject: [Twisted-Python] Porting Twisted to Python 3.
In-Reply-To: <537B3365.9060506@itamarst.org>
References: <CAKef57PD5my4d6ajCEJtz+Ud9KvFCxyw8EH=Qpz9ed5X7D+MtQ@mail.gmail.com>
 <537B3365.9060506@itamarst.org>
Message-ID: <20140520123011.5287.251329237.divmod.xquotient.44@top>

On 10:50 am, itamar at itamarst.org wrote:
>>So what is a recommended workflow?
>
>See https://twistedmatrix.com/trac/wiki/Plan/Python3

Something missing from that page is the very helpful tool that someone 
(sorry, I forget who) developed at PyCon for rendering the module 
dependency graph including information about what modules have already 
been ported to Python 3.

This tool is pretty helpful because, for the most part, you *have* to 
start at "leaves" in the unported part of the graph.

Does anyone know who was working on that tool and whether it's online 
somewhere?

Jean-Paul



From lacrima.maxim at gmail.com  Thu May 22 09:54:46 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Thu, 22 May 2014 18:54:46 +0300
Subject: [Twisted-Python] Porting Twisted to Python 3.
In-Reply-To: <20140520123011.5287.251329237.divmod.xquotient.44@top>
References: <CAKef57PD5my4d6ajCEJtz+Ud9KvFCxyw8EH=Qpz9ed5X7D+MtQ@mail.gmail.com>
 <537B3365.9060506@itamarst.org>
 <20140520123011.5287.251329237.divmod.xquotient.44@top>
Message-ID: <CAKef57NgwHrCK8s6yozSEgG1QrHPoxs+s75N1vYq2fO_mT2Hog@mail.gmail.com>

Hi Jean-Paul,

Thanks for your advice.

Since nobody suggested a tool I created one myself, and here is a "graph"
for `twisted.web.client`: http://jsfiddle.net/gu8DX/embedded/result/ . It's
not a completely correct graph (because a node will miss edges to modules,
that have already been imported earlier in another subtree), but anyway it
shows all "leaves", so it's easy to pick what to work on. From the graph I
can see that `twisted.web.iweb`, `twisted.web.http`,
`twisted.internet._sslverify`, `twisted.web.error` and
`twisted.python.win32` are "almost ported". I will skip win32. So if I am
correct I can start on remaining four modules, or to write tests for
`Agent` directly and see how it goes.

Thank you.




On 20 May 2014 15:30, <exarkun at twistedmatrix.com> wrote:

> On 10:50 am, itamar at itamarst.org wrote:
>
>> So what is a recommended workflow?
>>>
>>
>> See https://twistedmatrix.com/trac/wiki/Plan/Python3
>>
>
> Something missing from that page is the very helpful tool that someone
> (sorry, I forget who) developed at PyCon for rendering the module
> dependency graph including information about what modules have already been
> ported to Python 3.
>
> This tool is pretty helpful because, for the most part, you *have* to
> start at "leaves" in the unported part of the graph.
>
> Does anyone know who was working on that tool and whether it's online
> somewhere?
>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140522/088b50ce/attachment-0002.html>

From conrad.p.dean at gmail.com  Thu May 22 12:29:21 2014
From: conrad.p.dean at gmail.com (Conrad Dean)
Date: Thu, 22 May 2014 13:29:21 -0500
Subject: [Twisted-Python] Porting Twisted to Python 3.
In-Reply-To: <CAKef57NgwHrCK8s6yozSEgG1QrHPoxs+s75N1vYq2fO_mT2Hog@mail.gmail.com>
References: <CAKef57PD5my4d6ajCEJtz+Ud9KvFCxyw8EH=Qpz9ed5X7D+MtQ@mail.gmail.com>
 <537B3365.9060506@itamarst.org>
 <20140520123011.5287.251329237.divmod.xquotient.44@top>
 <CAKef57NgwHrCK8s6yozSEgG1QrHPoxs+s75N1vYq2fO_mT2Hog@mail.gmail.com>
Message-ID: <CAGR-8zmkPfRrakxKH=U-nDQ-yHjTsDbXBGDkswFbkj3Q-WwfYQ@mail.gmail.com>

Does the graph take into account dependencies of the tests as well?  A few
months ago I started on what I thought was a leaf, but its tests had
dependences on other modules that forced me to look at porting other
modules first.


On Thu, May 22, 2014 at 10:54 AM, Maxim Lacrima <lacrima.maxim at gmail.com>wrote:

> Hi Jean-Paul,
>
> Thanks for your advice.
>
> Since nobody suggested a tool I created one myself, and here is a "graph"
> for `twisted.web.client`: http://jsfiddle.net/gu8DX/embedded/result/ .
> It's not a completely correct graph (because a node will miss edges to
> modules, that have already been imported earlier in another subtree), but
> anyway it shows all "leaves", so it's easy to pick what to work on. From
> the graph I can see that `twisted.web.iweb`, `twisted.web.http`,
> `twisted.internet._sslverify`, `twisted.web.error` and
> `twisted.python.win32` are "almost ported". I will skip win32. So if I am
> correct I can start on remaining four modules, or to write tests for
> `Agent` directly and see how it goes.
>
> Thank you.
>
>
>
>
> On 20 May 2014 15:30, <exarkun at twistedmatrix.com> wrote:
>
>> On 10:50 am, itamar at itamarst.org wrote:
>>
>>> So what is a recommended workflow?
>>>>
>>>
>>> See https://twistedmatrix.com/trac/wiki/Plan/Python3
>>>
>>
>> Something missing from that page is the very helpful tool that someone
>> (sorry, I forget who) developed at PyCon for rendering the module
>> dependency graph including information about what modules have already been
>> ported to Python 3.
>>
>> This tool is pretty helpful because, for the most part, you *have* to
>> start at "leaves" in the unported part of the graph.
>>
>> Does anyone know who was working on that tool and whether it's online
>> somewhere?
>>
>> Jean-Paul
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> --
> Regards,
> Maxim
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140522/da5ad7a3/attachment-0002.html>

From exarkun at twistedmatrix.com  Fri May 23 07:11:35 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 23 May 2014 13:11:35 -0000
Subject: [Twisted-Python] Status of trac upgrade
Message-ID: <20140523131135.5287.1046664963.divmod.xquotient.53@top>

Hello,

I was just wondering what the current status of the effort to upgrade 
trac on twistedmatrix.com is.

Thanks,
Jean-Paul



From killiands at gmail.com  Fri May 23 07:49:47 2014
From: killiands at gmail.com (Killian De Smedt)
Date: Fri, 23 May 2014 15:49:47 +0200
Subject: [Twisted-Python] doWrite called on a twisted.internet.unix.Port
In-Reply-To: <CAG5JYFvmuJyditu9HKueWKnCg4N92QToYn=BovzzNugOfX2mwA@mail.gmail.com>
References: <CAG5JYFtZf_4y6+V8Opc1tQqYMjD104aCYRraC3YQcM8BgmBZwQ@mail.gmail.com>
 <20140507141123.12809.1006896501.divmod.xquotient.8@top>
 <CAG5JYFvmuJyditu9HKueWKnCg4N92QToYn=BovzzNugOfX2mwA@mail.gmail.com>
Message-ID: <CAG5JYFt8NnyYuZOq6SRegYiCToAce9PKAAupEZn5AApzCkUGvg@mail.gmail.com>

Hi Exarkun,

I tried hacking the addWriter method as follows:
        add_writer_orig = reactor.__class__.addWriter #@UndefinedVariable
        def my_add_writer(self, writer):
            logging.warn(writer.__class__.__mro__)
            logging.warn(''.join(traceback.format_stack()))
            if isinstance(writer,Port):
                raise Exception("Shouldn't add a port as a writer")
            return add_writer_orig(self, writer)
        reactor.addWriter = types.MethodType(my_add_writer,reactor)
But I actually got nothing out of it. I also noticed this backtrace (or
similar) is sometimes with a Udp.Port, not only a Unix.Port:
Unhandled Error
Traceback (most recent call last):
  File "/path/to/twisted.zip/twisted/python/log.py", line 88, in
callWithLogger
  File "/path/to/twisted.zip/twisted/python/log.py", line 73, in
callWithContext
  File "/path/to/twisted.zip/twisted/python/context.py", line 118, in
callWithContext
  File "/path/to/twisted.zip/twisted/python/context.py", line 81, in
callWithContext
--- <exception caught here> ---
  File "/path/to/twisted.zip/twisted/internet/posixbase.py", line 619, in
_doReadOrWrite
  File "/path/to/twisted.zip/twisted/internet/base.py", line 1117, in
doWrite
exceptions.RuntimeError: doWrite called on a twisted.internet.udp.Port

 Any other ideas how I could find out the culprit?

Thank you,

Killian


On 7 May 2014 17:09, Killian De Smedt <killiands at gmail.com> wrote:

> Hi Exarkun,
>
> Thanks for the quick response. I should have specified those things
> immediately.
> I manually merged the UDP ipv6 branch in the trunk somewhere in august and
> used that one, the version number is reported as [twisted, version 13.1.0].
> The platform is always centos though the centos version might range from
> 5.x to 6.x, 32 bit, but most of the time it runs on a centos 5.2
> installation (kernel on my working machine is 2.6.18). Python is 2.7.1 .
>  I use the default reactor which should come down to the epoll one.
>
> I'll try to hack up the addwriter, it shouldn't be that hard to for just
> that application.
>
> Thank you,
>
> Killian
>
>
> On 7 May 2014 16:11, <exarkun at twistedmatrix.com> wrote:
>
>> On 01:47 pm, killiands at gmail.com wrote:
>>
>>> Hello everybody,
>>>
>>> I sometimes see the following error logged by a twisted application, it
>>> only happens sporadically and I cannot even reproduce when trying to
>>> re-execute the exact sequence of those failures. So giving an SSCCE is
>>> quite impossible for now (sorry). Given this trace it's also hard to find
>>> what was actually called/executed.
>>>
>>
>> I've seen something like this with a somewhat old version of Twisted and
>> a custom reactor.  I never tracked down the cause.
>>
>> What version of Twisted are you using, what platform are you on, and what
>> reactor are you using?
>>
>> Another useful bit of debug information would be to hack up the reactor's
>> `addWriter` method to do a check of the argument.  The call stack at *that*
>> point (when the argument is a Port) is more interesting than the call stack
>> at the point where `doWrite` is called.
>>
>> Jean-Paul
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> --
> Killian De Smedt
> mobile: +32 486/825 951
> mail: killiands at gmail.com
>



-- 
Killian De Smedt
mobile: +32 486/825 951
mail: killiands at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140523/e4571712/attachment-0002.html>

From exarkun at twistedmatrix.com  Fri May 23 08:56:27 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 23 May 2014 14:56:27 -0000
Subject: [Twisted-Python] doWrite called on a twisted.internet.unix.Port
In-Reply-To: <CAG5JYFt8NnyYuZOq6SRegYiCToAce9PKAAupEZn5AApzCkUGvg@mail.gmail.com>
References: <CAG5JYFtZf_4y6+V8Opc1tQqYMjD104aCYRraC3YQcM8BgmBZwQ@mail.gmail.com>
 <20140507141123.12809.1006896501.divmod.xquotient.8@top>
 <CAG5JYFvmuJyditu9HKueWKnCg4N92QToYn=BovzzNugOfX2mwA@mail.gmail.com>
 <CAG5JYFt8NnyYuZOq6SRegYiCToAce9PKAAupEZn5AApzCkUGvg@mail.gmail.com>
Message-ID: <20140523145627.5287.2007686315.divmod.xquotient.70@top>

On 01:49 pm, killiands at gmail.com wrote:
>Hi Exarkun,
>
>I tried hacking the addWriter method as follows:
>        add_writer_orig = reactor.__class__.addWriter 
>#@UndefinedVariable
>        def my_add_writer(self, writer):
>            logging.warn(writer.__class__.__mro__)
>            logging.warn(''.join(traceback.format_stack()))
>            if isinstance(writer,Port):
>                raise Exception("Shouldn't add a port as a writer")
>            return add_writer_orig(self, writer)
>        reactor.addWriter = types.MethodType(my_add_writer,reactor)
>But I actually got nothing out of it.

This seems alright to me.  I'm not sure why it hasn't revealed any extra 
information.  Did you test it in the trivial case?  For example, set it 
up and then do:

    port = reactor.listenTCP(0, Factory.forProtocol(Protocol))
    port.startWriting()

If you don't see anything logged then there's something wrong with the 
instrumentation.

Here's a slightly different version.  I don't see any reason why it 
would work if your version doesn't, it's basically doing the same thing. 
Maybe there's some obscure detail that prevents your version from 
working, though.

    from __future__ import print_function

    from traceback import print_stack

    from twisted.internet import reactor
    from twisted.internet.interfaces import IListeningPort
    from twisted.internet.protocol import Protocol, Factory

    def addWriter(writer):
        if IListeningPort.providedBy(writer):
            print("Adding a listening port as a writer: ", writer)
            print_stack()
        return reactor.__class__.addWriter(reactor, writer)

    reactor.addWriter = addWriter

    # Demonstrates that it works in the trivial case.
    port = reactor.listenTCP(0, Factory.forProtocol(Protocol))
    port.startWriting()

Another scenario that occurs to me is that the port itself is never 
added as a writer.  Instead, some other object that is actually supposed 
to write sometimes is added.  Then, the file descriptor for that object 
is closed.  Then, a new port is created and is accidentally assigned the 
same integer as its file descriptor as the one that just got closed. 
Plus, you're using a reactor that doesn't notice when file descriptors 
are closed (this is a complex and subtle corner case and the handling 
varies between reactors because the underlying platform behavior varies 
and it's really difficult, if not impossible, to paper over differences 
in this area due to missing platform services).

Another question about your environment, does the process that is 
affected by this error ever launch any child processes or fork for any 
other reason (having duplicates of the file descriptor, which often 
happens when you fork, is one way this issue can affect the epoll 
reactor)?
Another debug strategy might be to strace all file-descriptor related 
syscalls and see if you can catch an integer being reused and then being 
subject to this error.  Logging the port's file descriptor in the port's 
doWrite might help with this too.

Jean-Paul
>I also noticed this backtrace (or
>similar) is sometimes with a Udp.Port, not only a Unix.Port:
>Unhandled Error
>Traceback (most recent call last):
>  File "/path/to/twisted.zip/twisted/python/log.py", line 88, in
>callWithLogger
>  File "/path/to/twisted.zip/twisted/python/log.py", line 73, in
>callWithContext
>  File "/path/to/twisted.zip/twisted/python/context.py", line 118, in
>callWithContext
>  File "/path/to/twisted.zip/twisted/python/context.py", line 81, in
>callWithContext
>--- <exception caught here> ---
>  File "/path/to/twisted.zip/twisted/internet/posixbase.py", line 619, 
>in
>_doReadOrWrite
>  File "/path/to/twisted.zip/twisted/internet/base.py", line 1117, in
>doWrite
>exceptions.RuntimeError: doWrite called on a twisted.internet.udp.Port
>
>Any other ideas how I could find out the culprit?
>
>Thank you,
>
>Killian
>
>
>On 7 May 2014 17:09, Killian De Smedt <killiands at gmail.com> wrote:
>>Hi Exarkun,
>>
>>Thanks for the quick response. I should have specified those things
>>immediately.
>>I manually merged the UDP ipv6 branch in the trunk somewhere in august 
>>and
>>used that one, the version number is reported as [twisted, version 
>>13.1.0].
>>The platform is always centos though the centos version might range 
>>from
>>5.x to 6.x, 32 bit, but most of the time it runs on a centos 5.2
>>installation (kernel on my working machine is 2.6.18). Python is 2.7.1 
>>.
>>  I use the default reactor which should come down to the epoll one.
>>
>>I'll try to hack up the addwriter, it shouldn't be that hard to for 
>>just
>>that application.
>>
>>Thank you,
>>
>>Killian
>>
>>
>>On 7 May 2014 16:11, <exarkun at twistedmatrix.com> wrote:
>>>On 01:47 pm, killiands at gmail.com wrote:
>>>>Hello everybody,
>>>>
>>>>I sometimes see the following error logged by a twisted application, 
>>>>it
>>>>only happens sporadically and I cannot even reproduce when trying to
>>>>re-execute the exact sequence of those failures. So giving an SSCCE 
>>>>is
>>>>quite impossible for now (sorry). Given this trace it's also hard to 
>>>>find
>>>>what was actually called/executed.
>>>
>>>I've seen something like this with a somewhat old version of Twisted 
>>>and
>>>a custom reactor.  I never tracked down the cause.
>>>
>>>What version of Twisted are you using, what platform are you on, and 
>>>what
>>>reactor are you using?
>>>
>>>Another useful bit of debug information would be to hack up the 
>>>reactor's
>>>`addWriter` method to do a check of the argument.  The call stack at 
>>>*that*
>>>point (when the argument is a Port) is more interesting than the call 
>>>stack
>>>at the point where `doWrite` is called.
>>>
>>>Jean-Paul
>>>
>>>_______________________________________________
>>>Twisted-Python mailing list
>>>Twisted-Python at twistedmatrix.com
>>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>>--
>>Killian De Smedt
>>mobile: +32 486/825 951
>>mail: killiands at gmail.com
>
>
>
>--
>Killian De Smedt
>mobile: +32 486/825 951
>mail: killiands at gmail.com



From trac at twistedmatrix.com  Sun May 25 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 25 May 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1400997915.99.2566524424229559521@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140525/f1664a70/attachment-0002.html>

From jonas.brunsgaard at gmail.com  Mon May 26 06:27:48 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Mon, 26 May 2014 14:27:48 +0200
Subject: [Twisted-Python] Code question - semantic meaning of
	IServiceCollection(parent, parent)
Message-ID: <CACVXvXpis9_WiS-+Czv-sVkfV_uhDqPkGpf30qqrGXoAiXVONA@mail.gmail.com>

Hello all

Will someone explain to me what happens when you call an Interface
with arguments, and why the same argument twice?

My problem is to understand the semantics of the line

    parent = IServiceCollection(parent, parent)

part of

    def setServiceParent(self, parent):
        if self.parent is not None:
            self.disownServiceParent()
        parent = IServiceCollection(parent, parent)
        self.parent = parent
        self.parent.addService(self)

in twisted.application.service

Thanks in advance.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140526/e541b8d8/attachment-0002.html>

From dustin at v.igoro.us  Mon May 26 06:57:00 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Mon, 26 May 2014 08:57:00 -0400
Subject: [Twisted-Python] Code question - semantic meaning of
 IServiceCollection(parent, parent)
In-Reply-To: <CACVXvXpis9_WiS-+Czv-sVkfV_uhDqPkGpf30qqrGXoAiXVONA@mail.gmail.com>
References: <CACVXvXpis9_WiS-+Czv-sVkfV_uhDqPkGpf30qqrGXoAiXVONA@mail.gmail.com>
Message-ID: <CAJtE5vSS2ZUCG5O=-b4FjT47UNaAb-+_j8p09w+pJUvwAsCh1A@mail.gmail.com>

It's certainly not an obvious syntax, but it "casts" the first
argument into a provider of the interface, defaulting to the second
argument if this is not possible.

For example, if `parent` isn't a provider of `IServiceCollection`, but
there's an adapter registered to covert to `IServiceCollection` from
`type(parent)`, then that adapter will be called.  If there's no such
adapter, the cast will return `parent`.

Dustin

On Mon, May 26, 2014 at 8:27 AM, Jonas Brunsgaard
<jonas.brunsgaard at gmail.com> wrote:
> Hello all
>
> Will someone explain to me what happens when you call an Interface with
> arguments, and why the same argument twice?
>
>
>
> My problem is to understand the semantics of the line
>
>     parent = IServiceCollection(parent, parent)
>
>
>
> part of
>
>     def setServiceParent(self, parent):
>
>         if self.parent is not None:
>
>             self.disownServiceParent()
>         parent = IServiceCollection(parent, parent)
>
>         self.parent = parent
>         self.parent.addService(self)
>
>
>
> in twisted.application.service
>
> Thanks in advance.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From full_access at bk.ru  Mon May 26 08:12:36 2014
From: full_access at bk.ru (Merovingian)
Date: Mon, 26 May 2014 18:12:36 +0400
Subject: [Twisted-Python] Importing reactor changes PATHs?
Message-ID: <53834BD4.6010902@bk.ru>

Hello,

Python 2.7.5 32 bit on Windows.
Twisted 13.2.0

     import ctypes
     dll = ctypes.CDLL("ssleay32.dll")

Loads dll from the current folder

     import ctypes
     from twisted.internet import reactor
     dll = ctypes.CDLL("ssleay32.dll")

Loads dll from Python27\lib\site-packages\OpenSSL
How so? How can I prevent reactor from changing the PATH (or whatever 
it's changing)?




From msc at contact.de  Mon May 26 08:26:10 2014
From: msc at contact.de (Michael Schlenker)
Date: Mon, 26 May 2014 16:26:10 +0200
Subject: [Twisted-Python] Importing reactor changes PATHs?
In-Reply-To: <53834BD4.6010902@bk.ru>
References: <53834BD4.6010902@bk.ru>
Message-ID: <53834F02.6030209@contact.de>

Am 26.05.2014 16:12, schrieb Merovingian:
> Hello,
> 
> Python 2.7.5 32 bit on Windows.
> Twisted 13.2.0
> 
>     import ctypes
>     dll = ctypes.CDLL("ssleay32.dll")
> 
> Loads dll from the current folder
> 
>     import ctypes
>     from twisted.internet import reactor
>     dll = ctypes.CDLL("ssleay32.dll")
> 
> Loads dll from Python27\lib\site-packages\OpenSSL
> How so? How can I prevent reactor from changing the PATH (or whatever
> it's changing)?

It might not be PATH.

There are a ton of options, e.g. the Manifest in use, Application
configuration files, registry settings or code used in Python to change
the ActivationContext when loading things.

In addition, you might already have loaded the 'ssleay32.dll' in the
reactor call, so the second call doesn't really load it anymore.

In fact, 'twisted.internet import reactor' does just that, it loads its
own copy of 'ssleay32.dll', and as your ctypes call does not specifiy an
absolute path or sets up any activation context, you get the already
loaded DLL.

Michael

-- 
Michael Schlenker
Software Architect

CONTACT Software GmbH           Tel.:   +49 (421) 20153-80
Wiener Straße 1-3               Fax:    +49 (421) 20153-41
28359 Bremen
http://www.contact.de/          E-Mail: msc at contact.de

Sitz der Gesellschaft: Bremen
Geschäftsführer: Karl Heinz Zachries, Ralf Holtgrefe
Eingetragen im Handelsregister des Amtsgerichts Bremen unter HRB 13215



From jonas.brunsgaard at gmail.com  Mon May 26 17:23:43 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Tue, 27 May 2014 01:23:43 +0200
Subject: [Twisted-Python] Code question - semantic meaning of
 IServiceCollection(parent, parent)
In-Reply-To: <CAJtE5vSS2ZUCG5O=-b4FjT47UNaAb-+_j8p09w+pJUvwAsCh1A@mail.gmail.com>
References: <CACVXvXpis9_WiS-+Czv-sVkfV_uhDqPkGpf30qqrGXoAiXVONA@mail.gmail.com>
 <CAJtE5vSS2ZUCG5O=-b4FjT47UNaAb-+_j8p09w+pJUvwAsCh1A@mail.gmail.com>
Message-ID: <CACVXvXoWKdisa5YPr3QFJU6GYOZ-3OyzSwyfvCJGiKZODaYvjw@mail.gmail.com>

Thanks Dustin, I got it ;)


On Mon, May 26, 2014 at 2:57 PM, Dustin J. Mitchell <dustin at v.igoro.us>wrote:

> It's certainly not an obvious syntax, but it "casts" the first
> argument into a provider of the interface, defaulting to the second
> argument if this is not possible.
>
> For example, if `parent` isn't a provider of `IServiceCollection`, but
> there's an adapter registered to covert to `IServiceCollection` from
> `type(parent)`, then that adapter will be called.  If there's no such
> adapter, the cast will return `parent`.
>
> Dustin
>
> On Mon, May 26, 2014 at 8:27 AM, Jonas Brunsgaard
> <jonas.brunsgaard at gmail.com> wrote:
> > Hello all
> >
> > Will someone explain to me what happens when you call an Interface with
> > arguments, and why the same argument twice?
> >
> >
> >
> > My problem is to understand the semantics of the line
> >
> >     parent = IServiceCollection(parent, parent)
> >
> >
> >
> > part of
> >
> >     def setServiceParent(self, parent):
> >
> >         if self.parent is not None:
> >
> >             self.disownServiceParent()
> >         parent = IServiceCollection(parent, parent)
> >
> >         self.parent = parent
> >         self.parent.addService(self)
> >
> >
> >
> > in twisted.application.service
> >
> > Thanks in advance.
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140527/cdfc6260/attachment-0002.html>

From hs at ox.cx  Thu May 29 07:13:01 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 29 May 2014 15:13:01 +0200
Subject: [Twisted-Python] Status of trac upgrade
In-Reply-To: <20140523131135.5287.1046664963.divmod.xquotient.53@top>
References: <20140523131135.5287.1046664963.divmod.xquotient.53@top>
Message-ID: <439D634B-3C9F-4256-8BEB-7770073AFCEB@ox.cx>

On 23 May 2014, at 15:11, exarkun at twistedmatrix.com wrote:

> I was just wondering what the current status of the effort to upgrade 
> trac on twistedmatrix.com is.

I could hear the crickets all the way down to Madagascar.

So what *is* the status?  The current state is really hardly bearable; 
the spam is taking completely over. :(  Wasn’t there a successful dry 
run at the PyCon sprints?

Cheers
Hynek

***

Also JFTR and related to our old plans to utilize GitHub somehow: it 
seems like Phabricator would be much rather worth our time as it allows 
for a complete review workflow: 
http://cramer.io/2014/05/03/on-pull-requests/



From jon at multani.info  Thu May 29 07:55:37 2014
From: jon at multani.info (Jonathan Ballet)
Date: Thu, 29 May 2014 21:55:37 +0800
Subject: [Twisted-Python] Status of trac upgrade
In-Reply-To: <439D634B-3C9F-4256-8BEB-7770073AFCEB@ox.cx>
References: <20140523131135.5287.1046664963.divmod.xquotient.53@top>
 <439D634B-3C9F-4256-8BEB-7770073AFCEB@ox.cx>
Message-ID: <20140529135529.GA23375@danio.home>

On Thu, May 29, 2014 at 03:13:01PM +0200, Hynek Schlawack wrote:
> On 23 May 2014, at 15:11, exarkun at twistedmatrix.com wrote:
> 
> >I was just wondering what the current status of the effort to upgrade trac
> >on twistedmatrix.com is.
> 
> I could hear the crickets all the way down to Madagascar.
> 
> So what *is* the status?  The current state is really hardly bearable; the
> spam is taking completely over. :(  Wasn’t there a successful dry run at the
> PyCon sprints?

For this matter: I expressed a few times my interest here to help
Twisted move to Git, and upgrading Trac was a requirement.
Although I basically don't have any special rights in the Twisted
project (oh, I can edit the wiki now!), I would be happy to help in any
ways to complete this migration, I'm just not sure what I can do, and
how it can be done.

However, I really won't be able to do anything before end of July, but
after that, I will be able to dedicate time to help on this, and
hopefully the Git migration (or things connected to) as well...

 Jonathan



From dustin at v.igoro.us  Thu May 29 09:12:32 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Thu, 29 May 2014 11:12:32 -0400
Subject: [Twisted-Python] Status of trac upgrade
In-Reply-To: <20140529135529.GA23375@danio.home>
References: <20140523131135.5287.1046664963.divmod.xquotient.53@top>
 <439D634B-3C9F-4256-8BEB-7770073AFCEB@ox.cx>
 <20140529135529.GA23375@danio.home>
Message-ID: <CAJtE5vRmskDrkx1pYVWj7+9mkuy_bZO6mjR0_fz4Dv9y4Te7dA@mail.gmail.com>

Buildbot just upgraded to Trac-1.0, and with the addition of a number
of custom plugins, we've gotten the spam situation under control.

It took a long time, but it was definitely worth it!

Dustin

On Thu, May 29, 2014 at 9:55 AM, Jonathan Ballet <jon at multani.info> wrote:
> On Thu, May 29, 2014 at 03:13:01PM +0200, Hynek Schlawack wrote:
>> On 23 May 2014, at 15:11, exarkun at twistedmatrix.com wrote:
>>
>> >I was just wondering what the current status of the effort to upgrade trac
>> >on twistedmatrix.com is.
>>
>> I could hear the crickets all the way down to Madagascar.
>>
>> So what *is* the status?  The current state is really hardly bearable; the
>> spam is taking completely over. :(  Wasn’t there a successful dry run at the
>> PyCon sprints?
>
> For this matter: I expressed a few times my interest here to help
> Twisted move to Git, and upgrading Trac was a requirement.
> Although I basically don't have any special rights in the Twisted
> project (oh, I can edit the wiki now!), I would be happy to help in any
> ways to complete this migration, I'm just not sure what I can do, and
> how it can be done.
>
> However, I really won't be able to do anything before end of July, but
> after that, I will be able to dedicate time to help on this, and
> hopefully the Git migration (or things connected to) as well...
>
>  Jonathan
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Thu May 29 10:56:33 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 29 May 2014 09:56:33 -0700
Subject: [Twisted-Python] Status of trac upgrade
In-Reply-To: <CAJtE5vRmskDrkx1pYVWj7+9mkuy_bZO6mjR0_fz4Dv9y4Te7dA@mail.gmail.com>
References: <20140523131135.5287.1046664963.divmod.xquotient.53@top>
 <439D634B-3C9F-4256-8BEB-7770073AFCEB@ox.cx>
 <20140529135529.GA23375@danio.home>
 <CAJtE5vRmskDrkx1pYVWj7+9mkuy_bZO6mjR0_fz4Dv9y4Te7dA@mail.gmail.com>
Message-ID: <1A31C170-43AD-4A3F-B1BF-9AC4E882093B@twistedmatrix.com>

On May 29, 2014, at 8:12 AM, Dustin J. Mitchell <dustin at v.igoro.us> wrote:

> It took a long time, but it was definitely worth it!

Thanks for this input, Dustin.  It is actually _super_ useful, for me at least, to learn that there is in fact a light at the end of this tunnel :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140529/8fd179c7/attachment-0002.html>

From venkteshguttedar at gmail.com  Thu May 29 13:00:10 2014
From: venkteshguttedar at gmail.com (VENKTESH GUTTEDAR)
Date: Fri, 30 May 2014 00:30:10 +0530
Subject: [Twisted-Python] Twisted.email.smtp Module ERROR
Message-ID: <CA+iwz4=oE81AjAAb5nBrzSf25UYkRFa1OUJ=4j=+GG+0djxYiw@mail.gmail.com>

Hello,

        i have written a script to send email by using the twisted smtplib
in which i am trying to import the ESMTPSenderFactory from
twisted.mail.smtp. but its giving the error as import error : no module
name mail.smtp. so please someone help me to get rid of this error. i am
using python 2.7 in ubuntu 13.10.

thank you.

-- 
Regards :
Venktesh Guttedar.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140530/7b6d026c/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu May 29 13:04:07 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 29 May 2014 19:04:07 -0000
Subject: [Twisted-Python] Twisted.email.smtp Module ERROR
In-Reply-To: <CA+iwz4=oE81AjAAb5nBrzSf25UYkRFa1OUJ=4j=+GG+0djxYiw@mail.gmail.com>
References: <CA+iwz4=oE81AjAAb5nBrzSf25UYkRFa1OUJ=4j=+GG+0djxYiw@mail.gmail.com>
Message-ID: <20140529190407.5287.648089933.divmod.xquotient.71@top>

On 07:00 pm, venkteshguttedar at gmail.com wrote:
>Hello,
>
>        i have written a script to send email by using the twisted 
>smtplib
>in which i am trying to import the ESMTPSenderFactory from
>twisted.mail.smtp. but its giving the error as import error : no module
>name mail.smtp. so please someone help me to get rid of this error. i 
>am
>using python 2.7 in ubuntu 13.10.

Sounds like you didn't install Twisted Mail.

But please see http://sscce.org/

Jean-Paul



From wanghe at gsrtvu.cn  Thu May 29 14:11:21 2014
From: wanghe at gsrtvu.cn (=?GBK?B?uMrL4LXntPM=?=)
Date: Fri, 30 May 2014 04:11:21 +0800
Subject: [Twisted-Python] Auto-Re:  Twisted.email.smtp Module ERROR
Message-ID: <140530041121fed9d2316632ef7c454d0131f418b9fe@gsrtvu.cn>

您发的邮件收到了!

From piper.masden at gmail.com  Fri May 30 00:13:58 2014
From: piper.masden at gmail.com (Piper Masden)
Date: Fri, 30 May 2014 00:13:58 -0600
Subject: [Twisted-Python] deferToThread and trial
Message-ID: <CAJjaOENSQ1Ca8vLSjuad_X5GjuecrWkhp7Q=fgL5+i5XaUiQGw@mail.gmail.com>

I have some Klein code that uses deferToThread for I/O. It looks something
like this:

@app.route('/', methods=['GET']
def index(request, *args, **kwargs):
    d = deferToThread(some_blocking_db_select_function)

    def serialize(db_object):
        return json.dumps({
            'id': db_object,
            })
    d.addCallback(serialize)
    return d

I have a test that executes this function, and the deferToThread returns a
Deferred, but that deferred never fires its callback, and so when I use
successResultOf expecting a success result, no result is found.

When I use twistd to run the Klein application, everything works fine (the
deferred fires and I get a json string in the body of the response). What's
different about the trial environment that deferToThread might not fire its
callback? Do I need to explicitly set up a thread pool in trial that I
don't have to set up using twistd?  Any help would be appreciated.

-Piper
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140530/faa694f7/attachment-0002.html>

From jonathan+twisted at jsphere.com  Fri May 30 03:40:53 2014
From: jonathan+twisted at jsphere.com (Jonathan Jacobs)
Date: Fri, 30 May 2014 11:40:53 +0200
Subject: [Twisted-Python] deferToThread and trial
In-Reply-To: <CAJjaOENSQ1Ca8vLSjuad_X5GjuecrWkhp7Q=fgL5+i5XaUiQGw@mail.gmail.com>
References: <CAJjaOENSQ1Ca8vLSjuad_X5GjuecrWkhp7Q=fgL5+i5XaUiQGw@mail.gmail.com>
Message-ID: <E4E6567B37AA4BFD959111DAF834FC52@jsphere.com>

Hi Piper,  

`successResultOf` is intended to be called on a Deferred which has a result (meaning `Deferred.errback` or `Deferred.callback` has been called on it already.) [1] In this case presumably your blocking call hasn’t finished (or even started?) by the time the assertion is executed, hence the Deferred has no result.

The usual case for using `successResultOf` is when you have a Deferred that you’re delivering results to synchronously (probably by way of calling `Deferred.callback` from your test) to determine if the callback chain produces the expected final result.

Without debating the merits of preferring to avoid interaction with the real world in unit tests, you can return a Deferred from your test method to run the reactor for you until the Deferred has fired and its callbacks have run. [2] You probably want to add some callbacks, to perform some assertions about the result, to the Deferred you’ll be returning.

[1] <http://twistedmatrix.com/documents/current/api/twisted.trial._synctest._Assertions.html#successResultOf>
[2] <http://twistedmatrix.com/documents/current/core/howto/testing.html#leave-the-reactor-as-you-found-it>

--  
Jonathan


On Friday 30 May 2014 at 8:13 AM, Piper Masden wrote:

> I have some Klein code that uses deferToThread for I/O. It looks something like this:
>  
> @app.route('/', methods=['GET']
> def index(request, *args, **kwargs):
>     d = deferToThread(some_blocking_db_select_function)
>  
>     def serialize(db_object):
>         return json.dumps({
>             'id': db_object,
>             })
>     d.addCallback(serialize)
>     return d
>  
> I have a test that executes this function, and the deferToThread returns a Deferred, but that deferred never fires its callback, and so when I use successResultOf expecting a success result, no result is found.  
>  
> When I use twistd to run the Klein application, everything works fine (the deferred fires and I get a json string in the body of the response). What's different about the trial environment that deferToThread might not fire its callback? Do I need to explicitly set up a thread pool in trial that I don't have to set up using twistd?  Any help would be appreciated.
>  
>  


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140530/f653d60d/attachment-0002.html>

From dustin at v.igoro.us  Fri May 30 06:43:58 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Fri, 30 May 2014 08:43:58 -0400
Subject: [Twisted-Python] deferToThread and trial
In-Reply-To: <CAJjaOENSQ1Ca8vLSjuad_X5GjuecrWkhp7Q=fgL5+i5XaUiQGw@mail.gmail.com>
References: <CAJjaOENSQ1Ca8vLSjuad_X5GjuecrWkhp7Q=fgL5+i5XaUiQGw@mail.gmail.com>
Message-ID: <CAJtE5vTGz505XDx8ptLooVz05Z5bMJu1ksySESqmcei=UiWiMQ@mail.gmail.com>

On Fri, May 30, 2014 at 2:13 AM, Piper Masden <piper.masden at gmail.com> wrote:
> I have a test that executes this function, and the deferToThread returns a
> Deferred, but that deferred never fires its callback, and so when I use
> successResultOf expecting a success result, no result is found.

"Never", or just not before you check its result?  I don't think
successResultOf blocks waiting for the Deferred to fire.

Instead, you need to wait for the deferred within your test:

def testIndex(self):
  d = index(..)
  @d.addCallback
  def check(result):
      self.assertEqual(result, ..)
  return d

(this could be prettier with inlineCallbacks, but this should give you the idea)

Dustin



From meejah at meejah.ca  Sat May 31 00:59:24 2014
From: meejah at meejah.ca (meejah)
Date: Sat, 31 May 2014 10:59:24 +0400
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
	deferred
In-Reply-To: <3C6C714E-B471-4DFE-BC35-7BF81EF2E147@twistedmatrix.com>
 (glyph@twistedmatrix.com's message of "Tue, 6 May 2014 14:25:17
 -0700")
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
 <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
 <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>
 <CAFN1edrLu1wf7cfDHdmg0MJ0OdvWKUYX3LY-dE3VpZ2Ysrr8WQ@mail.gmail.com>
 <B9DA601A-E4DA-45E4-979A-94C6AE618332@twistedmatrix.com>
 <CAFN1edprzLY+7mr9Z9d-SNjvKfWwMRb8E0KWNz98SjdS98UB6A@mail.gmail.com>
 <3C6C714E-B471-4DFE-BC35-7BF81EF2E147@twistedmatrix.com>
Message-ID: <86a99yjuwj.fsf@atlantis.meejah.ca>


As a followup to all this, I have just merged a branch with a refactored
endpoint parser. tomprince (I believe) on #twisted suggested some SSH
endpoint code to look at, which inspired the @classmethod style way of
getting a TCPHiddenServiceEndpoint instance configured differently.

Nearly all the code is in endpoints.py if anyone is interested, here:

    https://github.com/meejah/txtorcon/blob/master/txtorcon/endpoints.py#L117

If you do look, I'd certainly appreciate any comments.
(The tests are in test/test_endpoints.py)

Anyway, one really cool thing now that txtorcon supports endpoints is
that you can install it, and then easily make Twisted Web serve some
content as a hidden service (launching a Tor instance first, etc):

   twistd -n web --port "onion:80" --path ~/public_html

...or of course make any service at all available as a hidden service,
as long as it uses endpoints.

-- 
meejah
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 489 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140531/459734f8/attachment.sig>

From exarkun at twistedmatrix.com  Sat May 31 12:32:18 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 31 May 2014 18:32:18 -0000
Subject: [Twisted-Python] tor hidden service endpoint parser returns a
 deferred
In-Reply-To: <86a99yjuwj.fsf@atlantis.meejah.ca>
References: <CAFN1edo_DNsAkcMPDbEUeDz3HJ1CKzO66rvOBUDSyEd-WezQsA@mail.gmail.com>
 <0034EA45-CE6C-427A-B540-651DBE9B79BF@twistedmatrix.com>
 <CAFN1edpthJmynS-skzpiLZMOW49+oK5w3hdgq65_RqyjmW+D=w@mail.gmail.com>
 <58FD32F0-F3B4-4C21-8EE9-5D52187485FF@twistedmatrix.com>
 <CAFN1edrLu1wf7cfDHdmg0MJ0OdvWKUYX3LY-dE3VpZ2Ysrr8WQ@mail.gmail.com>
 <B9DA601A-E4DA-45E4-979A-94C6AE618332@twistedmatrix.com>
 <CAFN1edprzLY+7mr9Z9d-SNjvKfWwMRb8E0KWNz98SjdS98UB6A@mail.gmail.com>
 <3C6C714E-B471-4DFE-BC35-7BF81EF2E147@twistedmatrix.com>
 <86a99yjuwj.fsf@atlantis.meejah.ca>
Message-ID: <20140531183218.5287.193293421.divmod.xquotient.73@top>

On 06:59 am, meejah at meejah.ca wrote:
>
>[snip]
>
>Anyway, one really cool thing now that txtorcon supports endpoints is
>that you can install it, and then easily make Twisted Web serve some
>content as a hidden service (launching a Tor instance first, etc):
>
>   twistd -n web --port "onion:80" --path ~/public_html
>
>...or of course make any service at all available as a hidden service,
>as long as it uses endpoints.

Very cool!  Thanks for sharing.

Jean-Paul



From itamar at itamarst.org  Sat May 31 14:08:13 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 31 May 2014 16:08:13 -0400
Subject: [Twisted-Python] ANN: Crochet 1.3.0 - Use Twisted Anywhere!
Message-ID: <538A36AD.30304@itamarst.org>

Crochet is an MIT-licensed library that makes it easier to use Twisted 
from regular blocking code. Some use cases include:

  * Easily use Twisted from a blocking framework like Django or Flask.
  * Write a library that provides a blocking API, but uses Twisted for
    its implementation.
  * Port blocking code to Twisted more easily, by keeping a backwards
    compatibility layer.
  * Allow normal Twisted programs that use threads to interact with
    Twisted more cleanly from their threaded parts. For example this can
    be useful when using Twisted as a WSGI container.

This is a bugfix release, recommended for all users of Crochet.

Crochet can be downloaded from https://pypi.python.org/pypi/crochet or 
by running:

     $ pip install crochet

Documentation can be found at http://crochet.readthedocs.org 
<https://crochet.readthedocs.org/>

Bugs and feature requests should be filed at the project 
https://github.com/itamarst/crochet

Here’s an example of a program using Crochet. Notice that you get a 
completely blocking interface to Twisted and do not need to run the 
Twisted reactor, the event loop, yourself.

#!/usr/bin/python
"""
Do a DNS lookup using Twisted's APIs.
"""
from  __future__  import  print_function

# The Twisted code we'll be using:
from  twisted.names  import  client

from  crochet  import  setup,  wait_for
setup()


# Crochet layer, wrapping Twisted's DNS library in a blocking call.
@wait_for(timeout=5.0)
def  gethostbyname(name):
     """Lookup the IP of a given hostname.

     Unlike socket.gethostbyname() which can take an arbitrary amount of time
     to finish, this function will raise crochet.TimeoutError if more than 5
     seconds elapse without an answer being received.
     """
     d  =  client.lookupAddress(name)
     d.addCallback(lambda  result:  result[0][0].payload.dottedQuad())
     return  d


if  __name__  ==  '__main__':
     # Application code using the public API - notice it works in a normal
     # blocking manner, with no event loop visible:
     import  sys
     name  =  sys.argv[1]
     ip  =  gethostbyname(name)
     print(name,  "->",  ip)

Run on the command line:

> $ python blockingdns.py twistedmatrix.com
> twistedmatrix.com -> 66.35.39.66

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140531/742ebe31/attachment-0002.html>

From wanghe at gsrtvu.cn  Sat May 31 23:40:38 2014
From: wanghe at gsrtvu.cn (=?GBK?B?uMrL4LXntPM=?=)
Date: Sun, 01 Jun 2014 13:40:38 +0800
Subject: [Twisted-Python] Auto-Re:  Weekly Bug Summary
Message-ID: <14060113403865cfd1d2acd95e372562238a9c6d1d68@gsrtvu.cn>

您发的邮件收到了!

