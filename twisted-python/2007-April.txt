From exarkun at twistedmatrix.com  Sun Apr  1 00:05:01 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 01 Apr 2007 04:05:01 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1175400301.42.1173024084@twistedmatrix.com

Bug summary
______________________
Summary for 2007-03-25 through 2007-04-01
Bugs opened: 12    Bugs closed: 4  Total open bugs: 889 (+8)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +7  |Highest:  +0          |Core:     +6           
|Enhancement:  +4  |High:     +1          |Ftp:      +2           
|Task:         -1  |Normal:   +8          |Names:    -1           
                   |Low:      +1          |Web:      +1           
                                          |Web2:     +1           
                                          |Website:  +1           


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2539] Add epoll reactor to the choosing-reactor doc (opened by therve)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2539

[#1160] FTPClient failed commands return a FirstError (opened by orbitz)
    defect          ftp        http://twistedmatrix.com/trac/ticket/1160

                    ===== High =====
[#1107] [PATCH] FTPClient does not fire current commands errback on connectionLost (opened by orbitz)
    defect          ftp        http://twistedmatrix.com/trac/ticket/1107

                    ===== Normal =====
[#2540] twistd daemonizing before calling setup code (opened by hagna)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2540

[#2541] Decide on and document Python version support policy (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2541

[#2542] twisted.web.microdom.Node.isEqualToNode does no actual comparison (opened by dreid)
    defect          web        http://twistedmatrix.com/trac/ticket/2542

[#2543] "Noone" isn't a word (opened by indigo)
    defect          core       http://twistedmatrix.com/trac/ticket/2543

[#2544] twisted.web2.channel.[s]cgi contain multiple uses of a function that doesn't exist. (opened by dreid)
    defect          web2       http://twistedmatrix.com/trac/ticket/2544

[#2545] Multiple select reactors to support use of Twisted by non-Twisted libraries (opened by j1m)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2545

[#2546] Are stream/push producers assumed to start paused or unpaused?  Need more docs. :) (opened by j1m)
    defect          core       http://twistedmatrix.com/trac/ticket/2546

[#2547] API Docs has no info about attributes (opened by redbaron)
    enhancement     website    http://twistedmatrix.com/trac/ticket/2547

                    ===== Low =====
[#2548] Need IClientFactory? (opened by j1m)
    defect          core       http://twistedmatrix.com/trac/ticket/2548



Closed Bugs
______________________
                    ===== Highest =====
[#2414] Refactor DNSProtocol and DNSDatagramProtocol (opened by therve, closed by therve, fixed)
    enhancement     names      http://twistedmatrix.com/trac/ticket/2414

[#2426] Delete the s*** at the end of failure.py (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2426

[#1160] FTPClient failed commands return a FirstError (opened by orbitz, closed by therve, )
    defect          ftp        http://twistedmatrix.com/trac/ticket/1160

                    ===== High =====
[#1107] [PATCH] FTPClient does not fire current commands errback on connectionLost (opened by orbitz, closed by therve, )
    defect          ftp        http://twistedmatrix.com/trac/ticket/1107





From littlesweetmelon at gmail.com  Sun Apr  1 23:19:05 2007
From: littlesweetmelon at gmail.com (=?GB2312?B?zPC5zw==?=)
Date: Mon, 2 Apr 2007 11:19:05 +0800
Subject: [Twisted-Python] 3 basic questions about connectionLost,
	reactor stop and design
Message-ID: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>

Hi all,
Expecting your kind answer regardless how primary my questions are.  ^_^
Q1: Protocols has a method: connectionLost(self, reason). What is the
type of the second parameter? I see it sometimes is
twisted.internet.error.XXX. But who pass this param?

Can I break a connection by passing my own 'reason'?
The method transport.lostConnection is disappointment to me because I
cannot pass any parameter to it to indicate the reason.

Q2: How to cleanly exit a twist program?
Eg: When a twisted client called transport.lostConnection or cut off
net wire physically, only the connection is broken. The reactor is
still running in the event loop.  -_-!!

What is the proper place to put reactor.stop()? Is there any other way
to normally exit a twist program?

Q3: Let's continue my previous question about 'class attribute'. Phil
Mayers gave the key to me:
'if you then modify an instance, the class and
other instances are not, and those modifications OVERRIDE ANY
CONFLICTING ones on the class.'
class A:
    i = 0
p = A()
q = A()
p.i = 1
p.__dict__        # member varible added
>>> {'i': 1}
p.__class__.i = 2 # explicit access to A.i
q.i
>>> 2             # shared A.i
Therefore, in my opinion, the class attribute A::i is always shared by
instances. Different from C++, python 'p.i = 1' will add {'i': 1} to
p.__dict__, which makes 'i' as the

'member varible' to instance 'p'. It seems 'getattr' prefers 'member
variable' than 'class attribute'. So later access to 'p.i' will refer
to 'member variable', and the 'class

attribute' is masked. But if I use p.__class__.i explicitly, the
masked 'class attribute' appears. Till now, Have I misunderstood
anything? ^_^

Finally, my question is why twisted use class attribute so widely? Is
there any benefit? In my opinion, __init__ function is the only good
place to define 'attributes'. But

twist distributes 'attributes' in two forms: class and __init__. I
want to know the idiom to decide which attribute should be put into
which part.

Thank you for your patience!

--
ShenLei



From daedalus at eigenmagic.com  Mon Apr  2 02:07:03 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Mon, 02 Apr 2007 16:07:03 +1000
Subject: [Twisted-Python] twisted pysnmp status
In-Reply-To: <460D4171.1090202@vrplumber.com>
References: <460B2722.7020900@BrendanSimon.com>
	<460C1652.1040504@vrplumber.com> <1175228562.7273.30.camel@localhost>
	<460D4171.1090202@vrplumber.com>
Message-ID: <1175494023.7824.17.camel@localhost>

On Fri, 2007-03-30 at 12:57 -0400, Mike C. Fletcher wrote:
> Justin Warren wrote:
> ...
> > The performance of PySNMP (many years ago) was the main reason we wrote
> > libsnmp; PySNMP seemed to have been written from a very CompSci
> > perspective with full abstract ASN.1 model that gets subclassed to SNMP
> > via many steps, all of which slow it down. We went for a more
> > engineering approach, hardcoding lookup tables for values that never
> > change for the specific ASN.1 instanciation that is SNMP, for example.
> >
> > libsnmp isn't integrated into twisted, though we do use it with twisted
> > with great success in seafelt; there has been some interest in
> > integrating libsnmp with twisted in recent times. libsnmp also lacks
> > SNMPv3 support, only because we haven't had a need to add it yet, but
> > this means it probably doesn't meet your needs.
> >   
> Actually, would meet our client's needs well enough.  SNMPv3 isn't a 
> requirement, just a small nicety for them.

Neato. That was our approach also, given the relatively small number of
devices, etc. that implement SNMPv3 and the development effort required.
It will get added when there is sufficient need.

> > However, I am interested in both of these goals: twisted integration,
> > and SNMPv3 support, so perhaps if there enough people interested in such
> > an outcome we could work together to achieve it?
> >   
> Looking over your code it seems like it would be fairly easy to make it 
> an option in TwistedSNMP.  Currently TwistedSNMP has an abstraction 
> point that allows regular or speed-enhanced PySNMP to be used.  By the 
> look of it a very simple wrapper module would let libsnmp provide the 
> (small set of) features we use (basically just encode/decode and 
> translation of result values to/from Pythonic values with a few "type" 
> operations as well (OID, EndOfMibView, that kind of thing)).

That should certainly be fairly simple with libsnmp, yes.

> BTW, I notice that none of your code uses GetBulk (though you define 
> it)?  Bulk operations were a *huge* speed win for our application.  
> Hopefully you're doing it in your real-world code.

Not that I recall, probably because we haven't hit a speed hurdle that
would be solved by using it thus far. We've had more issues with SNMP
bugs on remote devices, such as certain brands of wireless router
crashing when polled with multi-variable SNMP packets. :)

> Anyway, I'll see if there's any interest from the customer in trying out 
> libsnmp with the code-base.  That would let me take company time to work 
> on integrating it into TwistedSNMP.  They almost certainly don't care 
> enough to have it do v3 operations, but raw speed on v2 operations is 
> something they may care about enough to pay for a few hours of work.

Cool. Let me know how you get on.

-- 
Justin Warren <daedalus at eigenmagic.com>



From itamar at itamarst.org  Mon Apr  2 07:51:24 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 02 Apr 2007 07:51:24 -0400
Subject: [Twisted-Python] 3 basic questions about connectionLost,
	reactor stop and design
In-Reply-To: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>
References: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>
Message-ID: <1175514684.23023.12.camel@localhost.localdomain>

On Mon, 2007-04-02 at 11:19 +0800, ?? wrote:
> Hi all,
> Expecting your kind answer regardless how primary my questions are.  ^_^
> Q1: Protocols has a method: connectionLost(self, reason). What is the
> type of the second parameter? I see it sometimes is
> twisted.internet.error.XXX. But who pass this param?

It's typically a twisted.python.failure.Failure wrapping, as you said,
t.i.error.ConnectionLost or ConnectionDone. It's called by the reactor.

> Can I break a connection by passing my own 'reason'?

That is not supported, no.

> What is the proper place to put reactor.stop()? Is there any other way
> to normally exit a twist program?

reactor.stop() is the way to go, yes. Call it when you want the program
to start.

> Finally, my question is why twisted use class attribute so widely? Is
> there any benefit? In my opinion, __init__ function is the only good
> place to define 'attributes'. But
> 
> twist distributes 'attributes' in two forms: class and __init__. I
> want to know the idiom to decide which attribute should be put into
> which part.

I don't think there's any specific reason why we use one or the other
(though one should never use mutable ones in this way.) If you're
happier always using __init__ then by all means do so.




From nico at tekNico.net  Mon Apr  2 08:16:54 2007
From: nico at tekNico.net (Nicola Larosa)
Date: Mon, 02 Apr 2007 14:16:54 +0200
Subject: [Twisted-Python] Re: 3 basic questions about connectionLost,
	reactor stop and design
In-Reply-To: <1175514684.23023.12.camel@localhost.localdomain>
References: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>
	<1175514684.23023.12.camel@localhost.localdomain>
Message-ID: <4610F436.3090007@tekNico.net>

Itamar Shtull-Trauring wrote:
> reactor.stop() is the way to go, yes. Call it when you want the program
> to start.

To be able to do that you would have to recall John and George from heaven,
reform the Beatles, pay them a lot to compose "Stop Me Down", and use that
as the sound theme.


-- 
Nicola Larosa - http://www.tekNico.net/

We need to hug authority into surrender. [...] The edifice of power is
only the illusion of power once we realise that the power lies with us.
 -- David Icke, November 2006





From marian.schubert at gmail.com  Mon Apr  2 08:27:02 2007
From: marian.schubert at gmail.com (Marian Schubert)
Date: Mon, 2 Apr 2007 14:27:02 +0200
Subject: [Twisted-Python] Re: 3 basic questions about connectionLost,
	reactor stop and design
In-Reply-To: <4610F436.3090007@tekNico.net>
References: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>
	<1175514684.23023.12.camel@localhost.localdomain>
	<4610F436.3090007@tekNico.net>
Message-ID: <a0839b890704020527q707f8382y8bd9265f9baeae26@mail.gmail.com>

On 4/2/07, Nicola Larosa <nico at teknico.net> wrote:
> Itamar Shtull-Trauring wrote:
> > reactor.stop() is the way to go, yes. Call it when you want the program
> > to start.
>
> To be able to do that you would have to recall John and George from heaven,
> reform the Beatles, pay them a lot to compose "Stop Me Down", and use that
> as the sound theme.

Maybe it's win32 specific feature .)

--
MS



From andrew-twisted at puzzling.org  Mon Apr  2 08:58:08 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 2 Apr 2007 22:58:08 +1000
Subject: [Twisted-Python] 3 basic questions about connectionLost,
	reactor stop and design
In-Reply-To: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>
References: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>
Message-ID: <20070402125808.GB13700@steerpike.home.puzzling.org>

?? wrote:
[...]
> 
> Finally, my question is why twisted use class attribute so widely? Is
> there any benefit? In my opinion, __init__ function is the only good
> place to define 'attributes'. But
> 
> twist distributes 'attributes' in two forms: class and __init__. I
> want to know the idiom to decide which attribute should be put into
> which part.

No particular reason, but here are some small reasons for using class
attributes:

   * their presence (and initial value) is visible in the declaration of the
     class, rather than requiring reading the code of the __init__ method;
   * as a result, the variables (and initial values) will be automatically
     listed by tools like epydoc and pydoctor (if the author forgets to
     explicitly describe these attributes in the docstrings);
   * they require less typing from the code author than an assignment to
     "self.foo" in __init__;
   * if the class doesn't have an __init__ method yet, it saves even more typing
     to use a class variable than to add an __init__ just to set an instance
     variable;
   * they slightly reduce memory consumption.

I'm not sure these reasons are good enough to compensate for the confusion this
idiom can cause, but they're the ones I can think of.  I suspect in Twisted's
case the main reasons are the "less typing" ones rather than anything else.

-Andrew.




From littlesweetmelon at gmail.com  Mon Apr  2 09:41:39 2007
From: littlesweetmelon at gmail.com (=?GB2312?B?zPC5zw==?=)
Date: Mon, 2 Apr 2007 21:41:39 +0800
Subject: [Twisted-Python] 3 basic questions about connectionLost,
	reactor stop and design
In-Reply-To: <20070402125808.GB13700@steerpike.home.puzzling.org>
References: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>
	<20070402125808.GB13700@steerpike.home.puzzling.org>
Message-ID: <cdb837ea0704020641h7f63d998x5539ff17fc7ec105@mail.gmail.com>

Great. That's what I wanted to know, thanks :)



From daniel at keystonewood.com  Mon Apr  2 10:39:39 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Mon, 2 Apr 2007 10:39:39 -0400
Subject: [Twisted-Python] Synchronization techniques
Message-ID: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>

Hello fellow twisters,

I am developing a twisted application on Mac OS X (using Perspective  
Broker) in which the server component runs shell scripts to post  
orders to an accounting system. The accounting system is developed  
and maintained by a third party vendor, and is therefore beyond my  
control. For a given command the scripts must be executed in order,  
and all commands that affect the accounting system must be  
synchronized. For example:


class AccountingService(pb.Root):

     def remote_post_order(self, data):
         self.lock.acquire()
         try:
             # put data in 'trans.dat' file
             # ...

             process = TwistedProcess()
             process.check_call(["load_dat.sh", "trans.dat"])
             process.check_call(["post_trx.sh"])
         finally:
             self.lock.release()


The process.check_call() method has (nearly) the same semantics as  
the check_call() method in Python's built-in subprocess module, and  
the lock has (nearly) the same semantics as Python's built-in  
threading.Lock class. Unfortunately, I cannot use those built-in  
methods/classes because they do not play nice with Twisted--I get  
'Interrupted system call' errors from subprocess.check_call(), and (I  
think) my server could deadlock if I used threading.Lock. So I  
developed a few helper classes to hack around these Twisted mis- 
features (questions follow the code):


from Queue import Queue, Empty
from twisted.internet.error import ProcessTerminated
from twisted.internet.protocol import ProcessProtocol

class ProcessError(Exception): pass


class ProcessErrorHandler(ProcessProtocol):

     def __init__(self):
         self.errbuf = []
         self.errors = []
         self.waiting = True

     def errReceived(self, text):
         self.errbuf.append(text)

     def processEnded(self, status):
         if self.errbuf:
             self.errors.append("".join(self.errbuf))
         if isinstance(status.value, ProcessTerminated):
             self.errors.append(status.getErrorMessage())
         self.waiting = False

     def hasError(self):
         return bool(self.errors)

     def raiseError(self):
         raise ProcessError("\n".join(self.errors))


class TwistedProcess(object):

     def __init__(self, reactor=None):
         if reactor is None:
             from twisted.internet import reactor
         self.reactor = reactor

     def check_call(self, cmd):
         status = ProcessErrorHandler()
         self.reactor.spawnProcess(status, cmd[0], cmd, env=os.environ)
         while status.waiting:
             self.reactor.iterate(0.05)
         if status.hasError():
             status.raiseError()


class TwistedLock(object):
     """A lock object for Twisted

     The lock is instantiated in a released state.
     """

     def __init__(self, reactor=None):
         if reactor is None:
             from twisted.internet import reactor
         self.reactor = reactor
         self.queue = Queue(1)
         self.release()

     def acquire(self):
         """Acquire the lock

         This method returns immediately when the lock is acquired.  
It "blocks"
         (i.e. iterates the reactor) indefinitely while it waits for  
the lock to
         be released.
         """
         while True:
             try:
                 self.queue.get_nowait()
             except Empty:
                 # pseudo block (iterate the reactor) while waiting  
for the lock to be released
                 self.reactor.iterate(0.05)
             else:
                 break # the lock has been acquired

     def release(self):
         """Release the lock

         Raises Queue.Full if the lock was not acquired exactly once  
since it was
         last released.
         """
         self.queue.put_nowait("TOKEN")


Questions:
1. Is reactor.iterate() meant to be used this way (see  
TwistedLock.acquire() and TwistedProcess.check_call())? If not, what  
is the right way to do those things? I've read everything I can find  
on reactor.iterate() and while it seems to be the only way to do what  
I need to do, its use is often strongly discouraged. Why is it so  
difficult for twisted to handle non-async code?

2. Is my suspicion that the server could deadlock if I used  
threading.Lock correct? Note: the server is not multi-threaded  
(unless twisted is doing something with threads that I am not aware of).
Example scenario:
     req 1: acquire lock
     req 1: spawn sub-process
     req 1: iterate reactor while waiting for process to complete
     req 2: acquire lock (block and wait)
     SERVER IS DEAD-LOCKED ?

3. Is there a better way to do what I'm trying to do here? (getting a  
new accounting system is not an option :)

~ Daniel





From matt at zgroupplc.com  Mon Apr  2 11:47:07 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Mon, 2 Apr 2007 16:47:07 +0100
Subject: [Twisted-Python] listenTCP(), tcp.Port()
Message-ID: <BBECF1BD-4D89-4020-9CCF-9914EBD16181@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi All,

I want to create a simple server that listens for data but I do not  
want to specify the port, I want the port to be automatically  
selected based on the currently available ports on the system. Is  
there any way to do this using Twisted?

Using PHP it is a simple matter of:

// Create a socket
$sock = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP);

// Get the port number used
@socket_getsockname($sock, $ip, $port);

Where $ip and $port are passed by reference and result in the values  
for the socket's ip address and port.

Looking at tcp.Port(), it doesn't seem like there is any provision  
for dynamically selecting an available port. Or am I missing something?

Regards,

Matt



m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGESWCyI6MkdKPngkRAjXyAJ9Yd9o/vWeYG9PhB1NbphbGgN2quwCdHRDh
DqF0IRAxqhcKLoKMeH+Ebwg=
=8qwC
-----END PGP SIGNATURE-----



From radix at twistedmatrix.com  Mon Apr  2 12:04:02 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 2 Apr 2007 12:04:02 -0400
Subject: [Twisted-Python] listenTCP(), tcp.Port()
In-Reply-To: <BBECF1BD-4D89-4020-9CCF-9914EBD16181@zgroupplc.com>
References: <BBECF1BD-4D89-4020-9CCF-9914EBD16181@zgroupplc.com>
Message-ID: <60ed19d40704020904u354931bfmcb87ef091ddc40a3@mail.gmail.com>

On 4/2/07, Matthew Glubb <matt at zgroupplc.com> wrote:
> Hi All,
>
> I want to create a simple server that listens for data but I do not
> want to specify the port, I want the port to be automatically
> selected based on the currently available ports on the system. Is
> there any way to do this using Twisted?
>
> Looking at tcp.Port(), it doesn't seem like there is any provision
> for dynamically selecting an available port. Or am I missing something?

The way you do this on unix is by listening on port 0. The port to
listen on will then be dynamically selected by the kernel.

port.getHost().port will give you the port number that was selected.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From matt at zgroupplc.com  Mon Apr  2 12:20:13 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Mon, 2 Apr 2007 17:20:13 +0100
Subject: [Twisted-Python] listenTCP(), tcp.Port()
In-Reply-To: <BBECF1BD-4D89-4020-9CCF-9914EBD16181@zgroupplc.com>
References: <BBECF1BD-4D89-4020-9CCF-9914EBD16181@zgroupplc.com>
Message-ID: <3A9551BA-3836-4856-A1B8-E91925CE432F@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Don't worry about this. I see that I pass zero as the port number in  
listenTCP().

Should read before I type :)

On 2 Apr 2007, at 16:47, Matthew Glubb wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Hi All,
>
> I want to create a simple server that listens for data but I do not  
> want to specify the port, I want the port to be automatically  
> selected based on the currently available ports on the system. Is  
> there any way to do this using Twisted?
>
> Using PHP it is a simple matter of:
>
> // Create a socket
> $sock = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
>
> // Get the port number used
> @socket_getsockname($sock, $ip, $port);
>
> Where $ip and $port are passed by reference and result in the  
> values for the socket's ip address and port.
>
> Looking at tcp.Port(), it doesn't seem like there is any provision  
> for dynamically selecting an available port. Or am I missing  
> something?
>
> Regards,
>
> Matt
>
>
>
> m a t t h e w   g l u b b
>
> ______________________________________________________________________ 
> __
> Z Group PLC
>
> Tel: +44 (0) 8700 111 173
> Fax: +44 (0) 8707 051 393
> Txt: +44 (0) 7800 140 877
> Web: <http://www.zgroupplc.com/>
>
> This  email  and  any  files  transmitted  with it are   
> confidential and
> intended solely for the use of the individual or entity to whom  
> they are
> addressed.  The opinions  expressed in this mail are those of the  
> author
> and do not necessarily  represent the views of the company.  If you  
> have
> received this email in error please notify <service at zgroupplc.com>
>
>
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.1 (Darwin)
>
> iD8DBQFGESWCyI6MkdKPngkRAjXyAJ9Yd9o/vWeYG9PhB1NbphbGgN2quwCdHRDh
> DqF0IRAxqhcKLoKMeH+Ebwg=
> =8qwC
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGES1AyI6MkdKPngkRAhzCAKCJMv2Jt96ecZVsanJGAWDVYdRR1wCfXXWi
T2thVWz83KV09IlpvrzqWeM=
=C3tN
-----END PGP SIGNATURE-----



From itamar at itamarst.org  Mon Apr  2 12:32:02 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 2 Apr 2007 12:32:02 -0400 (EDT)
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
Message-ID: <25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>

> 1. Is reactor.iterate() meant to be used this way (see
> TwistedLock.acquire() and TwistedProcess.check_call())? If not, what
> is the right way to do those things? I've read everything I can find
> on reactor.iterate() and while it seems to be the only way to do what
> I need to do, its use is often strongly discouraged. Why is it so
> difficult for twisted to handle non-async code?

You should never call reactor.iterate().

> 2. Is my suspicion that the server could deadlock if I used
> threading.Lock correct?

Yes. And the Queue model uses threading.Lock, so using it can also
deadlock you.

> 3. Is there a better way to do what I'm trying to do here? (getting a
> new accounting system is not an option :)

twisted.internet.defer.DeferredLock and some of the related classes are
what you ought to be using.




From robomancer at gmail.com  Tue Apr  3 12:13:45 2007
From: robomancer at gmail.com (robomancer)
Date: Tue, 3 Apr 2007 12:13:45 -0400
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
Message-ID: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>

Hello all,

I'm looking to use Twisted for distributing computation over a small
number (~10) of PCs.  I'm wondering if anyone else has some experience
with this -- particularly if there is already a solution out there
that I can use, so that I'm not reinventing the wheel.  Here's a rough
outline of what I'd like:

Setup phase: given a config file containing a list of machines and the
# of CPUs on each machine, update the source code on each machine and
start an appropriate number of experiment runners.

Run phase: a "master" process assigns an experiment to each runner.
When we get a result back, log the result to a file and send a new
experiment to that runner.  Repeat until all experiments are done.

Here are my constraints:

1) The high-level code (at least) is all in Python, so the experiment
runners can collect their results by just calling Python functions.

2) I can set up ssh keys on each machine such that logging in remotely
can happen without a password.

3) I don't really have to worry about authentication: I can assume
that all machines are either on a non-internet-connected LAN or that
firewall rules are set up so that the ports aren't accessible except
from the "master" machine.

4) I need to be able to add and remove compute nodes at runtime, so I
need some sort of admin shell.  However, I can wait for
currently-processing experiments to finish, so I don't have to worry
about the complexity of restarting experiments or migrating them to
other machines.

5) It'd be nice (but not required) if the experiment runners could all
log some critical messages to the master process.

This seems like it would only take a few hours to implement in Twisted
(probably with PB), but I wanted to make sure I'm not reinventing the
wheel, because it seems likely that someone has done this before.



From bv at bnl.gov  Tue Apr  3 12:41:03 2007
From: bv at bnl.gov (Brett Viren)
Date: Tue, 03 Apr 2007 12:41:03 -0400
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
	(robomancer@gmail.com's message of "Tue,
	3 Apr 2007 12:13:45 -0400")
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
Message-ID: <ir4slbhqulc.fsf@lycastus.phy.bnl.gov>

robomancer <robomancer at gmail.com> writes:

> I'm looking to use Twisted for distributing computation over a small
> number (~10) of PCs.  I'm wondering if anyone else has some experience
> with this -- particularly if there is already a solution out there
> that I can use, so that I'm not reinventing the wheel. 

[OT: non-twisted discussion follows]

It seems you are wanting a hybrid between a batch queueing system and
a data management system.

Any reason not to use something like Torque (nee' OpenPBS) for the
batch part?

http://www.clusterresources.com/pages/products/torque-resource-manager.php

Or, if your nodes are also interactively used (ie, workstations by
day, batch nodes by night) you might look at condor:

http://www.cs.wisc.edu/condor/

Both are free-ish.


More info on what your data is like is probably needed for ideas on
the second part.

-Brett.



From fperez.net at gmail.com  Tue Apr  3 12:48:44 2007
From: fperez.net at gmail.com (Fernando Perez)
Date: Tue, 3 Apr 2007 10:48:44 -0600
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
Message-ID: <db6b5ecc0704030948r1b4f411dh254ba20d47203cdd@mail.gmail.com>

On 4/3/07, robomancer <robomancer at gmail.com> wrote:

> I'm looking to use Twisted for distributing computation over a small
> number (~10) of PCs.  I'm wondering if anyone else has some experience
> with this -- particularly if there is already a solution out there
> that I can use, so that I'm not reinventing the wheel.  Here's a rough
> outline of what I'd like:

[...]

http://ipython.scipy.org/moin/Parallel_Computing

If you give us until next week, things will be cleaner.  We're in the
middle of transitioning from our first dev branch ('chainsaw') into
the one that will become the stable development line ('saw').  Both
can be checked out, but saw will, in a few days, be "released" for
regular work (albeit still considered to be a development system).

It's all Twisted-based, and help/contributions from other devs will be
obviously welcome.

Cheers,

f



From robomancer at gmail.com  Tue Apr  3 13:08:05 2007
From: robomancer at gmail.com (robomancer)
Date: Tue, 3 Apr 2007 13:08:05 -0400
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <ir4slbhqulc.fsf@lycastus.phy.bnl.gov>
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
	<ir4slbhqulc.fsf@lycastus.phy.bnl.gov>
Message-ID: <fdcd12710704031008w72277a61odaec8f01df80b503@mail.gmail.com>

> It seems you are wanting a hybrid between a batch queueing system and
> a data management system.
>
> Any reason not to use something like Torque (nee' OpenPBS) for the
> batch part?
>
> http://www.clusterresources.com/pages/products/torque-resource-manager.php

Thanks for the references.  Torque seems like a good possibility, but
a bit heavyweight for my tastes; I'd rather have something small and
flexible that I can easily edit to suit my needs.  That's why I'd
prefer a solution in Python (whether or not it involves Twisted).  I
really am looking only at small-scale stuff -- I have no need for
fault tolerance or scalability beyond maybe 5-10 nodes.

> More info on what your data is like is probably needed for ideas on
> the second part.

All I need is the ability to test several different algorithms on
several different input files. Each algorithm has a variety of
parameter settings, so for every experiment I need to record which
algorithm was used, the parameters, which input file was used, and the
quality of the result (from -1 to 1).  I don't think a data management
system is necessary here; I was basically planning on using .csv files
to store experiment settings and results.   Again, I'm aiming for
lightweight, not enterprise-grade :)



From matt at zgroupplc.com  Tue Apr  3 13:16:54 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Tue, 3 Apr 2007 18:16:54 +0100
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <db6b5ecc0704030948r1b4f411dh254ba20d47203cdd@mail.gmail.com>
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
	<db6b5ecc0704030948r1b4f411dh254ba20d47203cdd@mail.gmail.com>
Message-ID: <933D1915-D3E7-4ECE-B56E-6FBC98A4AF37@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Fernando,

On 3 Apr 2007, at 17:48, Fernando Perez wrote:

> http://ipython.scipy.org/moin/Parallel_Computing

Are you using the PB, a custom protocol or a combination of the two  
to make your remote calls?

Regards,


Matt



m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGEowKyI6MkdKPngkRAhsQAJ93yKqsTiKgw1VGMmlnFeOuGnQpKQCgmgjk
WBkKbP1esCZxV6JwK0o988M=
=wH2L
-----END PGP SIGNATURE-----



From robomancer at gmail.com  Tue Apr  3 13:19:34 2007
From: robomancer at gmail.com (robomancer)
Date: Tue, 3 Apr 2007 13:19:34 -0400
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <db6b5ecc0704030948r1b4f411dh254ba20d47203cdd@mail.gmail.com>
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
	<db6b5ecc0704030948r1b4f411dh254ba20d47203cdd@mail.gmail.com>
Message-ID: <fdcd12710704031019h167375c5j1a2a7fefa1f057b9@mail.gmail.com>

> http://ipython.scipy.org/moin/Parallel_Computing
>
> If you give us until next week, things will be cleaner.  We're in the
> middle of transitioning from our first dev branch ('chainsaw') into
> the one that will become the stable development line ('saw').  Both
> can be checked out, but saw will, in a few days, be "released" for
> regular work (albeit still considered to be a development system).
>
> It's all Twisted-based, and help/contributions from other devs will be
> obviously welcome.

Thanks!  This looks really promising.  Is there a place I can sign up
to be notified when saw is ready?



From general at eepatents.com  Tue Apr  3 16:59:23 2007
From: general at eepatents.com (Ed Suominen)
Date: Tue, 03 Apr 2007 16:59:23 -0400
Subject: [Twisted-Python] Re: Using Twisted for distributed computation
	/	experiment running
In-Reply-To: <E1HYmMW-0002f5-02@pyramid.twistedmatrix.com>
References: <E1HYmMW-0002f5-02@pyramid.twistedmatrix.com>
Message-ID: <4612C02B.8050701@eepatents.com>

> robomancer <robomancer at gmail.com> writes:
> 
>> I'm looking to use Twisted for distributing computation over a small
>> number (~10) of PCs.  I'm wondering if anyone else has some experience
>> with this -- particularly if there is already a solution out there
>> that I can use, so that I'm not reinventing the wheel. 

Take a look at the asynCluster sub-package within my Twisted-Goodies
project, http://foss.eepatents.com/Twisted-Goodies.

Source (SVN):
http://foss.eepatents.com/Twisted-Goodies/browser/trunk/twisted_goodies/asyncluster

API:
http://foss.eepatents.com/api/twisted-goodies/twisted_goodies.asyncluster.html

Best regards,
Ed Suominen



From daniel at keystonewood.com  Tue Apr  3 17:07:34 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Tue, 3 Apr 2007 17:07:34 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
Message-ID: <F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>

Thanks for the response Itamar,

>> 1. Is reactor.iterate() meant to be used this way (see
>> TwistedLock.acquire() and TwistedProcess.check_call())? If not, what
>> is the right way to do those things? I've read everything I can find
>> on reactor.iterate() and while it seems to be the only way to do what
>> I need to do, its use is often strongly discouraged. Why is it so
>> difficult for twisted to handle non-async code?
>
> You should never call reactor.iterate().

There really needs to be a way to do this:

d = getDeferred()
result = reactor.waitFor(d)

Or even better:

d = getDeferred()
result = d.waitFor()

The waitFor() method returns the result of the deferred or raises an  
exception if the deferred failed. This would allow a much more  
intuitive way to do the same type of thing that inlineCallbacks()  
allows. Why is this not implemented?

>
>> 2. Is my suspicion that the server could deadlock if I used
>> threading.Lock correct?
>
> Yes. And the Queue model uses threading.Lock, so using it can also
> deadlock you.

Right, but I'm using Queue.get_nowait() and Queue.put_nowait(),  
neither of which block, so that shouldn't be a problem.

>
>> 3. Is there a better way to do what I'm trying to do here? (getting a
>> new accounting system is not an option :)
>
> twisted.internet.defer.DeferredLock and some of the related classes  
> are
> what you ought to be using.

Unfortunately that only gets me half way there. DeferredLock.acquire 
() returns a deferred. How do I return the result of a deferred from  
a PB remote_xxx() function?

Thanks,
Daniel






From bob at redivi.com  Tue Apr  3 17:22:17 2007
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 3 Apr 2007 14:22:17 -0700
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
Message-ID: <6a36e7290704031422y283d781y36ff09aaba91adf9@mail.gmail.com>

On 4/3/07, Daniel Miller <daniel at keystonewood.com> wrote:
> Thanks for the response Itamar,
>
> >> 1. Is reactor.iterate() meant to be used this way (see
> >> TwistedLock.acquire() and TwistedProcess.check_call())? If not, what
> >> is the right way to do those things? I've read everything I can find
> >> on reactor.iterate() and while it seems to be the only way to do what
> >> I need to do, its use is often strongly discouraged. Why is it so
> >> difficult for twisted to handle non-async code?
> >
> > You should never call reactor.iterate().
>
> There really needs to be a way to do this:
>
> d = getDeferred()
> result = reactor.waitFor(d)
>
> Or even better:
>
> d = getDeferred()
> result = d.waitFor()
>
> The waitFor() method returns the result of the deferred or raises an
> exception if the deferred failed. This would allow a much more
> intuitive way to do the same type of thing that inlineCallbacks()
> allows. Why is this not implemented?

Because it's not possible.

-bob



From tim at mail.mew.co.jp  Tue Apr  3 20:33:43 2007
From: tim at mail.mew.co.jp (Tim Flink)
Date: Wed, 04 Apr 2007 09:33:43 +0900
Subject: [Twisted-Python] 64bit Installation Problems
Message-ID: <4612F267.4090302@mail.mew.co.jp>

I am trying to install Twisted2.5.0 and have been having some problems. When I run the main setup.py, TwistedCore is installed into /usr/lib64/python23/ while everything else (conch, lore, mail, names, news, runner, web and words) is installed into /ur/lib/python23.

So now when I try to import anything outside of core (like Web) I get:
exceptions.ImportError: No module named web

Is there a way to force TwistedCore to build and install as 32bit or force everything else to install as 64bit?

Thanks,

Tim

System Info:
CentOS 4.4 x86_64
Python 2.3.4
Zope Interface 3.3.0




From itamar at itamarst.org  Tue Apr  3 20:42:06 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 03 Apr 2007 20:42:06 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
Message-ID: <1175647326.5424.0.camel@localhost.localdomain>

On Tue, 2007-04-03 at 17:07 -0400, Daniel Miller wrote:

> > twisted.internet.defer.DeferredLock and some of the related classes  
> > are
> > what you ought to be using.
> 
> Unfortunately that only gets me half way there. DeferredLock.acquire 
> () returns a deferred. How do I return the result of a deferred from  
> a PB remote_xxx() function?

Just return the Deferred from the remote_xxx() function.

As for Queue - you may as well just use a list. But probably you want
DeferredQueue.




From warner at lothar.com  Wed Apr  4 00:36:12 2007
From: warner at lothar.com (Brian Warner)
Date: Tue, 03 Apr 2007 21:36:12 -0700 (PDT)
Subject: [Twisted-Python] Foolscap-0.1.1 released
Message-ID: <20070403.213612.74734554.warner@lothar.com>

I've just released Foolscap-0.1.1, the next-generation-of-PB RPC library,
available in the usual place at:

 http://twistedmatrix.com/trac/wiki/FoolsCap
 http://twistedmatrix.com/~warner/Foolscap/

This release enhances many of the "constraints" (a form of explicit
typechecking that can be applied to messages sent over the wire), fixes a
long-standing bug in Tub.stopService() which makes it easier to write trial
unit tests for code which uses Foolscap (and which was hopefully responsible
for many of the spurious test failures we've seen in the past), and adds a
one-way no-response 'callRemoteOnly' method. Full details are in the release
notes, attached below.

Due to the implementation of callRemoteOnly, this release is *not*
wire-protocol compatible with the previous 0.1.0 release. Fortunately, it
knows this, and the version-negotiation code will refuse to connect to an
incompatible peer.

Many thanks to my employer, AllMyData.com, for supporting development of this
release. We're starting to use it for an internal project, and we're
discovering all sorts of usability improvements that need to be made. The
next batch will probably be centered around the needs of long-running server
programs: specifically persistent mapping from externally-visible (but
generally unguessable) names to internal handler objects, such that each time
the process gets restarted, the same name maps to the next incarnation of the
handler object. We already have this facility for the private key (and thus
the TubID), but now it would be nice to have it for individual objects.


have a well-connected day,
 -Brian



* Release 0.1.1 (03 Apr 2007)

** Incompatibility Warning

Because of the technique used to implement callRemoteOnly() (specifically the
commandeering of reqID=0), this release is not compatible with the previous
release. The protocol negotiation version numbers have been bumped to avoid
confusion, meaning that 0.1.0 Tubs will refuse to connect to 0.1.1 Tubs, and
vice versa. Be aware that the errors reported when this occurs may not be
ideal, in particular I think the "reconnector" (tub.connectTo) might not log
this sort of connection failure in a very useful way.

** changes to Constraints

Method specifications inside RemoteInterfaces can now accept or return
'Referenceable' to indicate that they will accept a Referenceable of any
sort. Likewise, they can use something like 'RIFoo' to indicate that they
want a Referenceable or RemoteReference that implements RIFoo. Note that this
restriction does not quite nail down the directionality: in particular there
is not yet a way to specify that the method will only accept a Referenceable
and not a RemoteReference. I'm waiting to see if such a thing is actually
useful before implementing it. As an example:

class RIUser(RemoteInterface):
    def get_age():
        return int

class RIUserListing(RemoteInterface):
    def get_user(name=str):
        """Get the User object for a given name."""
        return RIUser

In addition, several constraints have been enhanced. StringConstraint and
ListConstraint now accept a minLength= argument, and StringConstraint also
takes a regular expression to apply to the string it inspects (the regexp can
either be passed as a string or as the output of re.compile()). There is a
new SetConstraint object, with 'SetOf' as a short alias. Some examples:

HexIdConstraint = StringConstraint(minLength=20, maxLength=20,
                                   regexp=r'[\dA-Fa-f]+')
class RITable(RemoteInterface):
    def get_users_by_id(id=HexIdConstraint):
        """Get a set of User objects; all will have the same ID number."""
        return SetOf(RIUser, maxLength=200)

These constraints should be imported from foolscap.schema . Once the
constraint interface is stabilized and documented, these classes will
probably be moved into foolscap/__init__.py so that you can just do 'from
foolscap import SetOf', etc.

*** UnconstrainedMethod

To disable schema checking for a specific method, use UnconstrainedMethod in
the RemoteInterface definition:

from foolscap.remoteinterface import UnconstrainedMethod

class RIUse(RemoteInterface):
    def set_phone_number(area_code=int, number=int):
        return bool
    set_arbitrary_data = UnconstrainedMethod

The schema-checking code will allow any sorts of arguments through to this
remote method, and allow any return value. This is like schema.Any(), but for
entire methods instead of just specific values. Obviously, using this defeats
te whole purpose of schema checking, but in some circumstances it might be
preferable to allow one or two unconstrained methods rather than resorting to
leaving the entire class left unconstrained (by not declaring a
RemoteInterface at all).

*** internal schema implementation changes

Constraints underwent a massive internal refactoring in this release, to
avoid a number of messy circular imports. The new way to convert a
"shorthand" description (like 'str') into an actual constraint object (like
StringConstraint) is to adapt it to IConstraint.

In addition, all constraints were moved closer to their associated
slicer/unslicer definitions. For example, SetConstraint is defined in
foolscap.slicers.set, right next to SetSlicer and SetUnslicer. The
constraints for basic tokens (like lists and ints) live in
foolscap.constraint .

** callRemoteOnly

A new "fire and forget" API was added to tell Foolscap that you want to send
a message to the remote end, but do not care when or even whether it arrives.
These messages are guaranteed to not fire an errback if the connection is
already lost (DeadReferenceError) or if the connection is lost before the
message is delivered or the response comes back (ConnectionLost). At present,
this no-error philosophy is so strong that even schema Violation exceptions
are suppressed, and the callRemoteOnly() method always returns None instead
of a Deferred. This last part might change in the future.

This is most useful for messages that are tightly coupled to the connection
itself, such that if the connection is lost, then it won't matter whether the
message was received or not. If the only state that the message modifies is
both scoped to the connection (i.e. not used anywhere else in the receiving
application) and only affects *inbound* data, then callRemoteOnly might be
useful. It may involve less error-checking code on the senders side, and it
may involve fewer round trips (since no response will be generated when the
message is delivered).

As a contrived example, a message which informs the far end that all
subsequent messages on this connection will sent entirely in uppercase (such
that the recipient should apply some sort of filter to them) would be
suitable for callRemoteOnly. The sender does not need to know exactly when
the message has been received, since Foolscap guarantees that all
subsequently sent messages will be delivered *after* the 'SetUpperCase'
message. And, the sender does not need to know whether the connection was
lost before or after the receipt of the message, since the establishment of a
new connection will reset this 'uppercase' flag back to some known
initial-contact state.

  rref.callRemoteOnly("set_uppercase", True)  # returns None!

This method is intended to parallel the 'deliverOnly' method used in E's
CapTP protocol. It is also used (or will be used) in some internal Foolscap
messages to reduce unnecessary network traffic.

** new Slicers: builtin set/frozenset

Code has been added to allow Foolscap to handle the built-in 'set' and
'frozenset' types that were introduced in python-2.4 . The wire protocol does
not distinguish between 'set' and 'sets.Set', nor between 'frozenset' and
'sets.ImmutableSet'.

For the sake of compatibility, everything that comes out of the deserializer
uses the pre-2.4 'sets' module. Unfortunately that means that a 'set' sent
into a Foolscap connection will come back out as a 'sets.Set'. 'set' and
'sets.Set' are not entirely interoperable, and concise things like 'added =
new_things - old_things' will not work if the objects are of different types
(but note that things like 'added = new_things.difference(old_things)' *do*
work).

The current workaround is for remote methods to coerce everything to a
locally-preferred form before use. Better solutions to this are still being
sought. The most promising approach is for Foolscap to unconditionally
deserialize to the builtin types on python >= 2.4, but then an application
which works fine on 2.3 (by using sets.Set) will fail when moved to 2.4 .

** Tub.stopService now indicates full connection shutdown, helping Trial tests

Like all twisted.application.service.MultiService instances, the
Tub.stopService() method returns a Deferred that indicates when shutdown has
finished. Previously, this Deferred could fire a bit early, when network
connections were still trying to deliver the last bits of data. This caused
problems with the Trial unit test framework, which insist upon having a clean
reactor between tests.

Trial test writers who use Foolscap should include the following sequence in
their twisted.trial.unittest.TestCase.tearDown() methods:

def tearDown(self):
    from foolscap.eventual import flushEventualQueue
    d = tub.stopService()
    d.addCallback(flushEventualQueue)
    return d

This will insure that all network activity is complete, and that all message
deliveries thus triggered have been retired. This activity includes any
outbound connections that were initiated (but not completed, or finished
negotiating), as well as any listening sockets.

The only remaining problem I've seen so far is with reactor.resolve(), which
is used to translate DNS names into addresses, and has a window during which
you can shut down the Tub and it will leave a cleanup timer lying around. The
only solution I've found is to avoid using DNS names in URLs. Of course for
real applications this does not matter: it only makes a difference in Trial
unit tests which are making heavy use of short-lived Tubs and connections.



From johann.borck at densedata.com  Wed Apr  4 03:14:13 2007
From: johann.borck at densedata.com (Johann Borck)
Date: Wed, 04 Apr 2007 09:14:13 +0200
Subject: [Twisted-Python] 64bit Installation Problems
In-Reply-To: <4612F267.4090302@mail.mew.co.jp>
References: <4612F267.4090302@mail.mew.co.jp>
Message-ID: <46135045.30602@densedata.com>

Tim Flink wrote:
> I am trying to install Twisted2.5.0 and have been having some problems. When I run the main setup.py, TwistedCore is installed into /usr/lib64/python23/ while everything else (conch, lore, mail, names, news, runner, web and words) is installed into /ur/lib/python23.
>
> So now when I try to import anything outside of core (like Web) I get:
> exceptions.ImportError: No module named web
>
> Is there a way to force TwistedCore to build and install as 32bit or force everything else to install as 64bit?
>
>   
It's recommended to install twisted separate from the python tree and
just put it on the PYTHONPATH. Also it's a good thing to keep a custom
python installation that's known to work with the specific version of
twisted to prevent the package-manager of the distro to make
incompatible changes (dunno what CentOS does, though). Apart from that,
you could put /usr/lib/python23/(site-packages) on the PYTHONPATH, or
copy the stuff to the other location. AFAIK this has nothing to do with
32/64bit but just where the installer copies the packages by default, If
you want a 32bit version, you'll need a chroot with a separate system.

Johann






From robert at gravina.com  Wed Apr  4 03:40:52 2007
From: robert at gravina.com (Robert Gravina)
Date: Wed, 4 Apr 2007 16:40:52 +0900
Subject: [Twisted-Python] Foolscap-0.1.1 released
In-Reply-To: <20070403.213612.74734554.warner@lothar.com>
References: <20070403.213612.74734554.warner@lothar.com>
Message-ID: <94B5BFD3-F733-4DF1-B1E9-648C44D655A0@gravina.com>


On Apr 4, 2007, at 1:36 PM, Brian Warner wrote:

> I've just released Foolscap-0.1.1, the next-generation-of-PB RPC  
> library,
> available in the usual place at:
>
>  http://twistedmatrix.com/trac/wiki/FoolsCap
>  http://twistedmatrix.com/~warner/Foolscap/
>

Wow, I had a read through the docs you made based on oldpb (http:// 
twistedmatrix.com/~warner/Foolscap/copyable.html and http:// 
twistedmatrix.com/~warner/Foolscap/using-pb.html) and think I finally  
understand what Foolscap is about :)

- I like how you've simplified Referenceable/Copyable/Cacheable to  
just the one type - Referenceable - while making the whole thing more  
powerful in the process.
- Being able to pass RemoteReferences to a third party - very cool!
- Serialisers are a great idea! I often want to send classes down the  
wire without having to subclass them. Also, many python types can be  
serialised now (e.g. datetime - I don't think these work with PB, so  
I have to convert them to strings and back again... I do this with  
Decimals too.... yuck!)
-  You can write a  Slicer/Unslicer pair to get an object that is  
copied by value the first time it sent and then copied by reference  
all later times. I *really* would like to be able to do that. I'm  
writing application now where uses create objects with lots of  
references to other objects so this would be very useful as I'm often  
sending these objects to clients again as they are updated, or are  
returned from some remote procedure call etc. and it would be nice if  
the client saw these as the same object.

Other parts of Foolscap I've yet to understand, but I just wanted to  
say I like where PB is heading.

Robert





From littlesweetmelon at gmail.com  Wed Apr  4 06:11:04 2007
From: littlesweetmelon at gmail.com (=?GB2312?B?zPC5zw==?=)
Date: Wed, 4 Apr 2007 18:11:04 +0800
Subject: [Twisted-Python] 3 questions about async,
	threading and dynamic protocol selection
Message-ID: <cdb837ea0704040311h2daaa185i9a96a6e4127171bc@mail.gmail.com>

Q1: How to determine a function is 'blocking action' or not?
Any function needs CPU times. Indeed, a computational-intensive
function is blocking action. But how small/fast function can be
classified as non-blocking? Twist requires all user functions to be
non-blocked. If reactor calls a blocking function, what will happen?
In my mind, reactor maintains a command queue internally (just like
windows message queue). The blocking function only postpones the
execution of other queued functions, but it does not break the logic
of the program. Is that right?

Q2: Today when I go through the twist document, I am confused about
the threading problem in reactor.
What is the different between 'reactor.callFromThread' and a plain
call in reactor loop?
def callFromThread(f):
            self.threadCallQueue.append((f, args, kw))
            self.wakeUp()
It seems equivalent to reactor.callLater(0, f...).
What is the real circumstance for calling callFromThread?
Further more, how to determine a function is thread-safe in python?
Why the twist doc says: "writing data to a transport from a protocol
is not thread-safe."?

Q3: In my application, I need a facility to dynamically select a
protocol to communicate with the server.
Eg: When connected, the server sent a string to client to indicate the
version of protocol it used. Then, the client can load the proper
protocol. But I don't know how to implement this. A 'Factory' can only
create one kind of 'Protocol', and it seems the instances of
'Protocol' cannot share the connection (Transport object) to a server.
Could you give me some clues?

Thank you.

--
ShenLei



From glyph at divmod.com  Wed Apr  4 06:34:46 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 04 Apr 2007 10:34:46 -0000
Subject: [Twisted-Python] 64bit Installation Problems
In-Reply-To: <46135045.30602@densedata.com>
References: <4612F267.4090302@mail.mew.co.jp>
	<46135045.30602@densedata.com>
Message-ID: <20070404103446.7769.1477470278.divmod.xquotient.1985@joule.divmod.com>

On 07:14 am, johann.borck at densedata.com wrote:
>Tim Flink wrote:
>>I am trying to install Twisted2.5.0 and have been having some 
>>problems. When I run the main setup.py, TwistedCore is installed into 
>>/usr/lib64/python23/ while everything else (conch, lore, mail, names, 
>>news, runner, web and words) is installed into /ur/lib/python23.

>It's recommended to install twisted separate from the python tree and
>just put it on the PYTHONPATH.

This is what I do for Twisted *development*, but for deployment, it is 
suggested to build packages for your OS and have them managed by your 
package manager.  The issue Tim is describing makes it sound like it 
would be difficult to build those packages for 64bit centOS.

It sounds like this is simply a bug in either Twisted or distutils. 
I've had similar issues in the past, but I rarely use 64bit OSes so I 
assumed they were personal misconfigurations.  Tim, if you could track 
down this issue further and report a bug in our tracker (if it's a 
Twisted issue) I'd be much obliged.

You may discover it's a bug in Python which has been fixed in a version 
later than 2.3, in which case you are likely out of luck - you might 
just have to upgrade to  a more recent Python version.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070404/1c7a0e0f/attachment.htm 

From glyph at divmod.com  Wed Apr  4 06:45:59 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 04 Apr 2007 10:45:59 -0000
Subject: [Twisted-Python] 3 questions about async,
	threading and dynamic protocol selection
In-Reply-To: <cdb837ea0704040311h2daaa185i9a96a6e4127171bc@mail.gmail.com>
References: <cdb837ea0704040311h2daaa185i9a96a6e4127171bc@mail.gmail.com>
Message-ID: <20070404104559.7769.1455216493.divmod.xquotient.2004@joule.divmod.com>

Hi u1CtDC,

On 10:11 am, littlesweetmelon at gmail.com wrote:
>Q1: How to determine a function is 'blocking action' or not?
>Any function needs CPU times. Indeed, a computational-intensive
>function is blocking action. But how small/fast function can be
>classified as non-blocking? Twist requires all user functions to be
>non-blocked. If reactor calls a blocking function, what will happen?
>In my mind, reactor maintains a command queue internally (just like
>windows message queue). The blocking function only postpones the
>execution of other queued functions, but it does not break the logic
>of the program. Is that right?

You've basically answered your own question here.  A "blocking action" 
is one where your users will not want to wait for it :).
>Q2: Today when I go through the twist document, I am confused about
>the threading problem in reactor.
>What is the different between 'reactor.callFromThread' and a plain
>call in reactor loop?
>def callFromThread(f):
>            self.threadCallQueue.append((f, args, kw))
>            self.wakeUp()
>It seems equivalent to reactor.callLater(0, f...).
>What is the real circumstance for calling callFromThread?

callLater is not thread-safe.  callFromThread is designed to be called, 
well, from a thread.  You use callFromThread from threads *other* than 
the thread where the reactor is running, in order to wake up the reactor 
thread and have it do something - usually something that involves 
calling a non-thread-safe Twisted API.
>Further more, how to determine a function is thread-safe in python?

As in any other language, ask the person who wrote it.  There is no 
other way to determine if a function is thread-safe.  In any language 
with dynamic run-time dispatch, determining this without talking to the 
author of the code in question reduces to the halting problem.
>Why the twist doc says: "writing data to a transport from a protocol
>is not thread-safe."?

Nothing in Twisted is thread-safe (other than callFromThread) but this 
is a particularly common error and we wanted to stress it.
>Q3: In my application, I need a facility to dynamically select a
>protocol to communicate with the server.
>Eg: When connected, the server sent a string to client to indicate the
>version of protocol it used. Then, the client can load the proper
>protocol. But I don't know how to implement this. A 'Factory' can only
>create one kind of 'Protocol', and it seems the instances of
>'Protocol' cannot share the connection (Transport object) to a server.
>Could you give me some clues?

The protocol that you are implementing includes a "version" message. 
Unless you have a "Protocol" object connected to receive the data and 
decode that message, you can't decide which version to use for 
subsequent messages.  Simply implement a "Protocol" which understands 
that "version" message and changes its behavior accordingly.

For an example of how you might switch to a completely different 
protocol object, see

http://twistedmatrix.com/trac/browser/trunk/twisted/protocols/amp.py#L1524

The techniques involved are quite nuanced, however, and are probably not 
appropriate for someone just learning about Twisted.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070404/bcaec2db/attachment.htm 

From nico at tekNico.net  Wed Apr  4 08:43:54 2007
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 04 Apr 2007 14:43:54 +0200
Subject: [Twisted-Python] Re: 3 questions about async,
	threading and dynamic protocol selection
In-Reply-To: <20070404104559.7769.1455216493.divmod.xquotient.2004@joule.divmod.com>
References: <cdb837ea0704040311h2daaa185i9a96a6e4127171bc@mail.gmail.com>
	<20070404104559.7769.1455216493.divmod.xquotient.2004@joule.divmod.com>
Message-ID: <46139D8A.2080903@tekNico.net>

> littlesweetmelon at gmail.com wrote:
>> Q1: How to determine a function is 'blocking action' or not? Any
>> function needs CPU times. Indeed, a computational-intensive function
>> is blocking action. But how small/fast function can be classified as
>> non-blocking?

glyph at divmod.com wrote:
> You've basically answered your own question here.  A "blocking action" 
> is one where your users will not want to wait for it :).

A value typically used as a reference point, on a human time scale, is a
hundredth of a second, that is, 0.01s, that is, 10ms. If that's the maximum
processing time of each event, you may expect a rate of at least 100 events
per second, with a good overall event flow in the system, depending on the
system load.


>> Twist requires all user functions to be non-blocked. If reactor calls
>> a blocking function, what will happen? In my mind, reactor maintains a
>> command queue internally (just like windows message queue). The
>> blocking function only postpones the execution of other queued
>> functions, but it does not break the logic of the program. Is that
>> right?

Yes, that's right. The processing of subsequent events will be delayed, but
the program will still run correctly, *if* its correctness does not
depend on the timing of event processing.


-- 
Nicola Larosa - http://www.tekNico.net/

E-mail can be saved by your ISP or by the IT department
in your corporation. Gmail, for example, saves everything,
even if you delete it. -- Bruce Schneier, November 2006




From radix at twistedmatrix.com  Wed Apr  4 09:46:40 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 4 Apr 2007 09:46:40 -0400
Subject: [Twisted-Python] Re: 3 questions about async,
	threading and dynamic protocol selection
In-Reply-To: <46139D8A.2080903@tekNico.net>
References: <cdb837ea0704040311h2daaa185i9a96a6e4127171bc@mail.gmail.com>
	<20070404104559.7769.1455216493.divmod.xquotient.2004@joule.divmod.com>
	<46139D8A.2080903@tekNico.net>
Message-ID: <60ed19d40704040646n3f7c1cfbo261074aa58650d5e@mail.gmail.com>

On 4/4/07, Nicola Larosa <nico at teknico.net> wrote:
> > littlesweetmelon at gmail.com wrote:
> >> Twist requires all user functions to be non-blocked. If reactor calls
> >> a blocking function, what will happen? In my mind, reactor maintains a
> >> command queue internally (just like windows message queue). The
> >> blocking function only postpones the execution of other queued
> >> functions, but it does not break the logic of the program. Is that
> >> right?
>
> Yes, that's right. The processing of subsequent events will be delayed, but
> the program will still run correctly, *if* its correctness does not
> depend on the timing of event processing.

However, I want to stress that technically Twisted is not maintaining
a command queue relevant to this situation. Yes, it does have a queue
of scheduled calls, but when you're just talking about running some
code that blocks, it's not Twisted which is preventing further things
from happening, it is the sequential nature of the code itself.
There's no need to queue things up when Python itself, when executing
"a(); b()", prevents 'b' from executing before 'a' has returned.


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From brian.costlow at gmail.com  Wed Apr  4 10:37:20 2007
From: brian.costlow at gmail.com (Brian Costlow)
Date: Wed, 4 Apr 2007 10:37:20 -0400
Subject: [Twisted-Python] Question about plugins tutorial
Message-ID: <89d8b1b00704040737u5c1f30bao34b10478865870ec@mail.gmail.com>

I've been reading through the tutorial section on Twisted Plugins at:

http://twistedmatrix.com/projects/core/documentation/howto/plugin.html

I have a question about this code (the actual plugin from the tutorial)

from twisted.plugin import IPlugin
from matsim import imatsim

class SimpleMaterial(object):
    implements(IPlugin, imatsim.IMaterial)

    def __init__(self, yieldStressFactor, dielectricConstant):
        self._yieldStressFactor = yieldStressFactor
        self.dielectricConstant = dielectricConstant

    def yieldStress(self, temperature):
        return self._yieldStressFactor * temperature

steelPlate = SimpleMaterial(2.06842719e11, 2.7 + 0.2j)
brassPlate = SimpleMaterial(1.03421359e11, 1.4 + 0.5j)

The tutorial implies, but does not say directly, that plug-ins should
not just define a class that implements IPlugin and your interface,
but instantiate an object. This code (also from the example) iterates
over returned plugins (actually according to the example, the objects
steelPlate and brassPlate).

def displayAllKnownMaterials():
    for material in getPlugins(imatsim.IMaterial):
        displayMaterial(material)

If my understanding is correct, then

# plugin
class Foo(object):
    implements(IPlugin, imyplugins.IMyPlugIn)

    def fooStuff(self):
        # do foo stuff
# end plugin

#call plugin from app
for n in getPlugins(imyplugins.IMyPlugIn):
    n.fooStuff()

Won't work. I'd need to do this

# plugin
 class Foo(object):
     implements(IPlugin, imyplugins.IMyPlugIn)

     def fooStuff(self):
         # do foo stuff

f = Foo()
 # end plugin

 #call plugin from app
for n in getPlugins(imyplugins.IMyPlugIn):
     n.fooStuff()

But I'm looking at the Plugins as a way to abstract multiple back-end
actions taken in response to data recieved by a number of asynchronous
events (off of LineReciever and XML-RPC). The plug-in is going to need
to keep some intermediate state data in some cases, which won't work
if they all get the same object. So I was thinking of something along
these lines:

# plugin
  class Foo(object):
      implements(IPlugin, imyplugins.IMyPlugIn)

      def fooStuff(self):
          # do foo stuff

    def fooFactory(self):
        return Foo()

 f = Foo()
  # end plugin

  #call plugin from app
 for n in getPlugins(imyplugins.IMyPlugIn):
    o = n.fooFactory()
      o.fooStuff()


Does this make sense? Is there a better way in the twisted framework
to handle this?



From radix at twistedmatrix.com  Wed Apr  4 10:46:33 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 4 Apr 2007 10:46:33 -0400
Subject: [Twisted-Python] Question about plugins tutorial
In-Reply-To: <89d8b1b00704040737u5c1f30bao34b10478865870ec@mail.gmail.com>
References: <89d8b1b00704040737u5c1f30bao34b10478865870ec@mail.gmail.com>
Message-ID: <60ed19d40704040746k4e1e39eaw552592af7a1d7371@mail.gmail.com>

On 4/4/07, Brian Costlow <brian.costlow at gmail.com> wrote:
> But I'm looking at the Plugins as a way to abstract multiple back-end
> actions taken in response to data recieved by a number of asynchronous
> events (off of LineReciever and XML-RPC). The plug-in is going to need
> to keep some intermediate state data in some cases, which won't work
> if they all get the same object. So I was thinking of something along
> these lines:
>
> # plugin
>   class Foo(object):
>       implements(IPlugin, imyplugins.IMyPlugIn)
>
>       def fooStuff(self):
>           # do foo stuff
>
>     def fooFactory(self):
>         return Foo()
>
>  f = Foo()
>   # end plugin
>
>   #call plugin from app
>  for n in getPlugins(imyplugins.IMyPlugIn):
>     o = n.fooFactory()
>       o.fooStuff()
>
>
> Does this make sense? Is there a better way in the twisted framework
> to handle this?

Yep: making your plugins factories is a common pattern. There's also
often a conditional checking something about 'n' before calling the
fooFactory on it (for example, is it the one the user requested by
name? etc)

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From itamar at itamarst.org  Wed Apr  4 11:36:54 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 04 Apr 2007 11:36:54 -0400
Subject: [Twisted-Python] Question about plugins tutorial
In-Reply-To: <89d8b1b00704040737u5c1f30bao34b10478865870ec@mail.gmail.com>
References: <89d8b1b00704040737u5c1f30bao34b10478865870ec@mail.gmail.com>
Message-ID: <1175701014.19230.3.camel@localhost.localdomain>

On Wed, 2007-04-04 at 10:37 -0400, Brian Costlow wrote:

> But I'm looking at the Plugins as a way to abstract multiple back-end
> actions taken in response to data recieved by a number of asynchronous
> events (off of LineReciever and XML-RPC). 

This is only useful if you need to plug-in new actions, either by 3rd
parties or as a configuration measure. If the actions are fixed, an
easier way to do it is command dispatch to appropriately named methods,
like the way XML-RPC dispatches a "foobar" command to the method
xmlrpc_foobar, or to appropriate command-handling objects.




From daniel at keystonewood.com  Wed Apr  4 12:35:10 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Wed, 4 Apr 2007 12:35:10 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <1175647326.5424.0.camel@localhost.localdomain>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
Message-ID: <D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>

On Apr 3, 2007, at 8:42 PM, Itamar Shtull-Trauring wrote:

> On Tue, 2007-04-03 at 17:07 -0400, Daniel Miller wrote:
>
>>> twisted.internet.defer.DeferredLock and some of the related classes
>>> are
>>> what you ought to be using.
>>
>> Unfortunately that only gets me half way there. DeferredLock.acquire
>> () returns a deferred. How do I return the result of a deferred from
>> a PB remote_xxx() function?
>
> Just return the Deferred from the remote_xxx() function.
>

Thanks, I didn't know I could return a deferred from a PB remote_xxx 
() method. That detail doesn't seem to be documented in the  
Perspective Broker documentation, which I have read quite a few  
times. Maybe this could be highlighted in the "Complete Example" [0]  
section of the PB usage documentation? The examples use the  
TwistedQuotes application, and the IQuoter.getQuote() method always  
returns a string (at least I couldn't find any implementations that  
return a deferred). However, that would require rewriting most if not  
all implementations of IQuoter to return deferred's and/or the code  
that calls IQuoter.getQuote(), which demonstrates the viral nature of  
twisted when used in conjunction with other libraries.

So anyway, I rewrote my server-side library to do it the twisted way  
and return deferred's instead trying rig up some way of waiting for  
them. I still think it would be super useful to be able to pseudo- 
block on a deferred (i.e. allow the reactor to process other events  
while waiting for the deferred). It is very annoying to have to  
rewrite many layers of code when twisted is introduced into a  
program. I did find gthreadless.py, and maybe that would do it.  
Unfortunately discussion on that seems to have been dropped some time  
ago...

For the record, I've included updated versions of the previously  
posted code below. I'd be happy if someone pointed out if I'm doing  
anything wrong (with respect to twisted) in this code.

Thanks,
Daniel

[0] <http://twistedmatrix.com/projects/core/documentation/howto/pb- 
usage.html#auto1>

~~~~~~~~~

from twisted.internet.defer import Deferred, DeferredLock
from twisted.internet.error import ProcessTerminated
from twisted.internet.protocol import ProcessProtocol
from twisted.python.failure import Failure

class LockProxy(object):
     """A proxy that synchronizes method calls on a given subject"""

     def __init__(self, subject):
         self.lock = DeferredLock()
         self.subject = subject

     def __getattr__(self, name):
         value = getattr(self.subject, name)
         if hasattr(value, "im_self") and value.im_self is self.subject:
             def func(*args, **kw):
                 def callback(lock, *args, **kw):
                     try:
                         result = value(*args, **kw)
                     except:
                         lock.release()
                         raise
                     if isinstance(result, Deferred):
                         def release(arg, lock):
                             lock.release()
                             return arg
                         result.addBoth(release, lock)
                     else:
                         lock.release()
                     return result
                 dfr = self.lock.acquire()
                 dfr.addCallback(callback, *args, **kw)
                 return dfr
             return func
         return value

class ProcessError(Exception): pass

class ProcessErrorHandler(ProcessProtocol):

     def __init__(self, deferred):
         self.deferred = deferred
         self.errbuf = []
         self.errors = []

     def errReceived(self, text):
         self.errbuf.append(text)

     def processEnded(self, status):
         if self.errbuf:
             self.errors.append("".join(self.errbuf))
         if isinstance(status.value, ProcessTerminated):
             self.errors.append(status.getErrorMessage())
         if self.errors:
             err = Failure(ProcessError("\n".join(self.errors)))
             self.deferred.errback(err)
         else:
             self.deferred.callback(self)
         self.deferred = None

class TwistedProcess(object):

     def __init__(self, reactor=None, protocol=ProcessErrorHandler):
         if reactor is None:
             from twisted.internet import reactor
         self.reactor = reactor
         self.protocol = protocol

     def check_call(self, cmd):
         dfr = Deferred()
         protocol = self.protocol(dfr)
         self.reactor.spawnProcess(protocol, cmd[0], cmd,  
env=os.environ)
         return dfr





From ellisonbg.net at gmail.com  Wed Apr  4 13:25:21 2007
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 4 Apr 2007 11:25:21 -0600
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <1175647326.5424.0.camel@localhost.localdomain>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
Message-ID: <6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>

The issue brought up in this thread is one that we (the IPython dev
team) has thought about a lot.  There are really two questions about
having true synchronization primitives (something like d.waitFor() or
blockOn(d)):

1.  Can they be implemented in python/twisted in a reliable and robust way?

2.  Should you use them in your code?

Unfortunately, the answer to (1) seems to be no - at least not without
completely refactoring the core of twisted to support this capability
from the ground level.  The tempting way of doing it currently is to
call reactor.iterate() to spin the event loop at a particular point.
We have code in IPython that does this:

http://projects.scipy.org/ipython/ipython/browser/ipython/branches/saw/ipython1/kernel/blockon.py
[DON'T USE THIS CODE!]

For very simple things this code works just fine.

d = functionThatReturnsADeferred()
r = blockOn(d)          # spin the reactor until d fires.

The problem is that if you start to use blockOn in various places in
your code, a single call to blockOn (which calls reactor.iterate())
could trigger other calls to blockOn (which will attempt to call
reactor.iterate() again).  The twisted reactor is simply not designed
to be doubly iterated like this - it leads to all sorts of really
weird problems that are _impossible_ to track down.

This is why people are saying "it can't be done."  I should mention
that it might be possible to implement these things in stackless.

So what about (2)?  Ignoring the fact that such constructs can't be
implemented reliably (let's imagine they could be), should you want to
use them?  I think the answer is this:

The design of Twisted reflects the realities of an asynchronous, event
driven world where things can and do go wrong when you least expect
it.  The error handling decision tree of Deferreds are a reflection of
this reality.  If you try to make this stuff go away (we have tried ma
ny times - we are slow learners and very stubborn) you will be
punished and there will be "weeping and gnashing of teeth."  This
punishment will take the form of buggy code that is difficult to
maintain and extend.

With all that said, I have encountered a few highly unusual cases
where I really did want blockOn to exist.  These cases had the
characteristic that they couldn't be done any other way in Twisted.
The answer in this case is to ditch twisted and use a tool that is
better suited to the problem.  But in my experience these cases only
pop up about 0.00001% of the time.

Brian



From paul-lists at perforge.com  Wed Apr  4 13:34:32 2007
From: paul-lists at perforge.com (Paul G)
Date: Wed, 4 Apr 2007 13:34:32 -0400
Subject: [Twisted-Python] Synchronization techniques
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com><25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com><F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com><1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
Message-ID: <1c8b201c776df$81f26700$6302a8c0@dcore>

Daniel Miller wrote:
-- snip --
> So anyway, I rewrote my server-side library to do it the twisted way
> and return deferred's instead trying rig up some way of waiting for
> them. I still think it would be super useful to be able to pseudo-
> block on a deferred (i.e. allow the reactor to process other events
> while waiting for the deferred). It is very annoying to have to
> rewrite many layers of code when twisted is introduced into a
> program. I did find gthreadless.py, and maybe that would do it.
> Unfortunately discussion on that seems to have been dropped some time
> ago...

you can still use that method *if* you're willing to patch your cpython with 
the stackless changes and live with the requirement that this be done on all 
cpythons your code is going to run on. short of that, or using evil bytecode 
hacks, it's not really possible to implement - you need the ability to save, 
switch and restore stacks plus call into the middle of a function. while 
this can be done with generators, it is virtually equivalent to splitting 
your functions into a top/bottom half and is not directly supported, so it 
ends up looking ugly. if pypy ever gets to the point where it's usable in 
production (has the required c extensions ported and runs close in speed to 
cpython on non-trivial code), syntactic support for such usage could be 
added. please note that if you hadn't wanted to take advantage of being in 
an event loop, you could have easily stuck your code - unchanged - into a 
thread pool (via apis helpfully provided by twisted) and just written a few 
lines of code to adapt the interfaces.

this has little to do with twisted, which - imo - does a wonderful job of 
making the (for some, abeit not me personally) difficult execution flow 
model palatable and clear. twisted might be a very good framework, but it 
isn't an async fairy that sneaks into your room at night and - if you've 
been good - rewrites your code to be all twisty and eventful and leaves a 
quarter under your pillow.

with all that said, the sooner you start thinking of a program as a series 
of events being emitted and handled, the better for you and your twisted 
code - everything will become very natural at that point instead of looking 
like an idiosyncracy. while there are a few languages, like erlang for 
example, that express event loops with cooperative threading syntax 
(processes, messages and futures), i'm of the opinion that it's actually 
harmful to hide the event loop details from people who haven't started 
thinking that way yet - they should be simply syntactic sugar for when 
you've already grokked the model. it's inherently impossible to write good 
concurrent code without this insight, including preemptiver multithreading 
code as well. writing preemption and smp safe mt code boils down to 
understanding the chain of processing each 'event', where such event is 
access to shared data, goes through and the interaction between two or more 
such events descending down this chain - this is the only effective way i've 
found to think about memory barriers and cache coherency for example. just 
like grokking functional programming, grokking this will make you (the 
impersonal pronoun version) a better programmer (fwiw, it's made functional 
programming easier to get for me personally).

cheers,
-p 




From glyph at divmod.com  Wed Apr  4 13:43:02 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 04 Apr 2007 17:43:02 -0000
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
Message-ID: <20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>

On 04:35 pm, daniel at keystonewood.com wrote:
>On Apr 3, 2007, at 8:42 PM, Itamar Shtull-Trauring wrote:
>>On Tue, 2007-04-03 at 17:07 -0400, Daniel Miller wrote:
>>>>twisted.internet.defer.DeferredLock and some of the related classes
>>>>are
>>>>what you ought to be using.
>>>
>>>Unfortunately that only gets me half way there. DeferredLock.acquire
>>>() returns a deferred. How do I return the result of a deferred from
>>>a PB remote_xxx() function?
>>
>>Just return the Deferred from the remote_xxx() function.
>
>Thanks, I didn't know I could return a deferred from a PB remote_xxx () 
>method. That detail doesn't seem to be documented in the  Perspective 
>Broker documentation, which I have read quite a few  times.

The PB documentation is not too great.  Perhaps this paper would be 
helpful to you, if you haven't seen it:

http://www.lothar.com/tech/papers/PyCon-2003/pb-pycon/pb.html#auto7

    """
    In addition, the remote method can itself return a Deferred instead 
of an
    actual return value. When that Deferreds fires, the data given to the
    callback will be serialized and returned to the original caller.
    """
>Maybe this could be highlighted in the "Complete Example" [0]  section 
>of the PB usage documentation? The examples use the  TwistedQuotes 
>application, and the IQuoter.getQuote() method always  returns a string 
>(at least I couldn't find any implementations that  return a deferred).

Please feel free to write some patches for the documentation, or open a 
doc bug describing this issue in more detail.  It's definitely an under- 
documented feature of PB.
>However, that would require rewriting most if not  all implementations 
>of IQuoter to return deferred's and/or the code  that calls 
>IQuoter.getQuote(), which demonstrates the viral nature of  twisted 
>when used in conjunction with other libraries.

I don't think that would really be the terrible burden that you suggest, 
considering the relatively small amount of tutorial documentation that 
implements or calls IQuoter.  One could also propose a separate 
interface, IDeferredQuoter, to make the distinction clearer.
>So anyway, I rewrote my server-side library to do it the twisted way 
>and return deferred's instead trying rig up some way of waiting for 
>them. I still think it would be super useful to be able to pseudo- 
>block on a deferred (i.e. allow the reactor to process other events 
>while waiting for the deferred). It is very annoying to have to 
>rewrite many layers of code when twisted is introduced into a  program. 
>I did find gthreadless.py, and maybe that would do it.  Unfortunately 
>discussion on that seems to have been dropped some time  ago...

I'm afraid that the feature you want doesn't make any sense and is, in a 
broad sense, impossible.  There are some things like it which might be 
possible - for example, http://twistedmatrix.com/trac/ticket/2545 - but 
the reactor is not reentrant and in some sense could not be made 
reentrant.

Consider this innocuous looking block of code:

    from twisted.internet.protocol import Protocol
    from make_believe import magicallyBlockOn

    class MagicalProtocol(Protocol):
        def dataReceived(self, data):
            commands = (self.buf + data).split()
            self.buf = commands[-1]
            for command in commands[:-1]:
                if command == 'QUIT':
                    self.transport.loseConnection()
                    return
                else:
                    # Deferreds are hard, let's go shopping
                    page = 
magicallyBlockOn(getPage("http://example.com/%s" %
                                                    (command,)))
                    self.transport.write("SIZE:"+len(page))

If you were using Deferreds to track the result of the 'getPage' 
operation, you could cancel the callbacks that write to the transport in 
connectionLost.  However, with magical blocking, one dataReceived method 
might be interleaved with another.  That means that every time through 
the loop, you have to check to see if the transport has already been 
disconnected - the code as presented here is buggy and will spuriously 
fail depending on the order of the connection being lost and the remote 
page being retrieved.

In this example I've been careful to accumulate all the buffer- 
management and parsing logic at the top of the method, before any 
potential re-entrancy can happen, but other code (most everything in 
Twisted's existing protocol implementations, not to mention just about 
all application code) would not be so lucky.

It might be quite feasible to implement a microthreaded runtime 
environment that lived on _top_ of Twisted and explicitly accounted for 
issues like these, but that would not really be substantially different 
than 2.5+inlineCallbacks.
>For the record, I've included updated versions of the previously 
>posted code below. I'd be happy if someone pointed out if I'm doing 
>anything wrong (with respect to twisted) in this code.

Nothing immediately jumps out at me.  I've had to write similar code in 
the past, though, and when I've had to do that, an explicit state 
machine for the state of the subprocess (or whatever asynchronous 
resource must be acquired) has been easier to deal with than a lock- 
oriented approach to it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070404/a5152cc2/attachment.htm 

From paul-lists at perforge.com  Wed Apr  4 13:49:57 2007
From: paul-lists at perforge.com (Paul G)
Date: Wed, 4 Apr 2007 13:49:57 -0400
Subject: [Twisted-Python] Synchronization techniques
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com><25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com><F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com><1175647326.5424.0.camel@localhost.localdomain>
	<6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>
Message-ID: <1c8be01c776e1$b2d85670$6302a8c0@dcore>

Brian Granger wrote:
> So what about (2)?  Ignoring the fact that such constructs can't be
> implemented reliably (let's imagine they could be), should you want to
> use them?  I think the answer is this:
>
> The design of Twisted reflects the realities of an asynchronous, event
> driven world where things can and do go wrong when you least expect
> it.  The error handling decision tree of Deferreds are a reflection of
> this reality.  If you try to make this stuff go away (we have tried ma
> ny times - we are slow learners and very stubborn) you will be
> punished and there will be "weeping and gnashing of teeth."  This
> punishment will take the form of buggy code that is difficult to
> maintain and extend.

agreed, it's what i wrote in the email i've just sent out. if you look at 
some parts of twisted, like pb, and actually try to use them, you'll find 
that it's extremely liberating and useful not to have things hidden from you 
because this sort of infantilization can only end in tears. continuing with 
the pb example, based on personal experience, not having the network 
communications disguised and hidden from you by ordinary function calls 
makes writing non-trivial code practical, nevermind easy. i can't tell you 
how many projects i've seen that used this hiding back when it was en vogue, 
and all of them to a t were either completely borked or barely functional. 
this is all about having the tools to deal with the problem domain using 
concepts that map it properly - you can't deal with asynchrony without 
having it reified, with every consequence that entails. i spent a 
non-trivial amount of time a long time ago playing with generators, bytecode 
hacks and preprocessors to hide this stuff (it's not as damaging to hide it 
selectively once you already thoroughly understand what's going on under the 
hood) and came to the conclusion that i was wrong to want that. now if i 
could do the same with cigarettes and beer .. ;]

cheers,
-p 




From nico at tekNico.net  Wed Apr  4 14:00:38 2007
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 04 Apr 2007 20:00:38 +0200
Subject: [Twisted-Python] Re: Synchronization techniques
In-Reply-To: <1c8b201c776df$81f26700$6302a8c0@dcore>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com><25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com><F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com><1175647326.5424.0.camel@localhost.localdomain>	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
	<1c8b201c776df$81f26700$6302a8c0@dcore>
Message-ID: <ev0p47$hfb$1@sea.gmane.org>

Paul G wrote:
> while there are a few languages, like erlang for example, that express
> event loops with cooperative threading syntax (processes, messages and
> futures), i'm of the opinion that it's actually harmful to hide the
> event loop details from people who haven't started thinking that way yet
> - they should be simply syntactic sugar for when you've already grokked
> the model.

IIUC, the same holds true for inline callbacks, right?

http://twistedmatrix.com/documents/current/api/twisted.internet.defer.html#inlineCallbacks

-- 
Nicola Larosa - http://www.tekNico.net/

E-mail can be saved by your ISP or by the IT department
in your corporation. Gmail, for example, saves everything,
even if you delete it. -- Bruce Schneier, November 2006




From glyph at divmod.com  Wed Apr  4 14:17:04 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 04 Apr 2007 18:17:04 -0000
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>
Message-ID: <20070404181704.7769.37732181.divmod.xquotient.2128@joule.divmod.com>


On 05:25 pm, ellisonbg.net at gmail.com wrote:
>The issue brought up in this thread is one that we (the IPython dev
>team) has thought about a lot.  There are really two questions about
>having true synchronization primitives (something like d.waitFor() or
>blockOn(d)):
>
>1.  Can they be implemented in python/twisted in a reliable and robust 
>way?

The real question here doesn't involve the words "in python/twisted" :).
>2.  Should you use them in your code?

>Unfortunately, the answer to (1) seems to be no - at least not without
>completely refactoring the core of twisted to support this capability
>from the ground level.  The tempting way of doing it currently is to
>call reactor.iterate() to spin the event loop at a particular point.
>We have code in IPython that does this:
>
>http://projects.scipy.org/ipython/ipython/browser/ipython/branches/saw/ipython1/kernel/blockon.py
>[DON'T USE THIS CODE!]
>
>For very simple things this code works just fine.

I think you mean, "in some cases this code appears to work".  Working 
"just fine" implies that it is robust and supported.  This is an 
actively deprecated programming style and there are numerous known 
problems (besides the ones you've already documented here) with doing 
it.
>d = functionThatReturnsADeferred()
>r = blockOn(d)          # spin the reactor until d fires.
>
>The problem is that if you start to use blockOn in various places in
>your code, a single call to blockOn (which calls reactor.iterate())
>could trigger other calls to blockOn (which will attempt to call
>reactor.iterate() again).  The twisted reactor is simply not designed
>to be doubly iterated like this - it leads to all sorts of really
>weird problems that are _impossible_ to track down.

These "weird" problems are the entirely predictable result of violating 
every assumption that code makes about its run-time environment when it 
is written and tested.  An analogous operation would be to write C code 
to forcibly delete Python objects rather than go through the garbage 
collector because you *really know*, *just this one time*, that you want 
to free that memory.  If you're careful to never touch that object 
again, you might be able to avoid a segfault, but I think most people 
would agree that all bets are off at that point.

This might seem like an exaggerated problem, but I have actually seen 
code like that more than once written by dyed-in-the-wool C programmers 
who didn't "get" how Python's object model worked.  It's the same with 
dyed-in-the-wool non-concurrent programmers approaching concurrent 
systems for the first time.
>This is why people are saying "it can't be done."  I should mention
>that it might be possible to implement these things in stackless.

If you were to implement these things in stackless, you would still have 
to deal with the inherently problematic issue of apparently "sequential" 
code being run recursively when it does not expect to be.  In order to 
prevent this, you would likely have a completely different programming 
model where something properly event-driven, like Twisted itself, were 
scheduling "user code" which was written using a different programming 
style.

For certain problems such things are a good approach.  For example, in 
AI code with extremely deeply nested ad-hoc decision trees modeled as if 
statements and for loops, the cost of stack ripping becomes high both 
conceptually and performance-wise, and it is more natural to model 
individual agents as individual control flows (or "cooperative 
threads").  This sort of code, though, would be written in a style more 
like Erlang, with almost no shared state at all.  Part of Twisted's 
appeal is that it makes mutable state-sharing between disparate systems 
straightforward.  In other words, it is a different programming model 
for a different set of problems that would require a different pile of 
infrastructure.

It may well be possible to implement such a layer on top of Twisted, but 
there is a curious thing that takes place when people begin to tackle 
this problem.  Pretty much everyone eventually comes to the realization 
that this isn't a good idea for their problem domain, and what they 
*actually* want is to wish away the difficulties associated with 
concurrency and pretend that they can "just block" and everything will 
be OK.  The ones who really, really need it (like people dealing with 
the aforementioned AI problems) already know their requirements and 
quietly go ahead and implement what they need, without any hand-wringing 
about how hard programming with Deferreds is or how they'd really like 
to block on one.
>So what about (2)?  Ignoring the fact that such constructs can't be
>implemented reliably (let's imagine they could be), should you want to
>use them?  I think the answer is this:

>The design of Twisted reflects the realities of an asynchronous, event
>driven world where things can and do go wrong when you least expect
>it.  The error handling decision tree of Deferreds are a reflection of
>this reality.  If you try to make this stuff go away (we have tried ma
>ny times - we are slow learners and very stubborn) you will be
>punished and there will be "weeping and gnashing of teeth."  This
>punishment will take the form of buggy code that is difficult to
>maintain and extend.

It sounds like we broadly agree here :).
>With all that said, I have encountered a few highly unusual cases
>where I really did want blockOn to exist.  These cases had the
>characteristic that they couldn't be done any other way in Twisted.
>The answer in this case is to ditch twisted and use a tool that is
>better suited to the problem.  But in my experience these cases only
>pop up about 0.00001% of the time.

I am very curious about your 0.00001% case.  Not that I don't believe 
such cases exist, but in every case but one (twisted ticket #2545) the 
issue has actually been a documentation problem with Twisted, where it 
wasn't clear how to do something the "normal" way with Deferreds and 
such.  I'd like to know if there is another such doc bug we should be 
filing :).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070404/de501080/attachment.htm 

From paul-lists at perforge.com  Wed Apr  4 14:28:06 2007
From: paul-lists at perforge.com (Paul G)
Date: Wed, 4 Apr 2007 14:28:06 -0400
Subject: [Twisted-Python] Re: Synchronization techniques
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com><25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com><F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com><1175647326.5424.0.camel@localhost.localdomain>	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com><1c8b201c776df$81f26700$6302a8c0@dcore>
	<ev0p47$hfb$1@sea.gmane.org>
Message-ID: <1c8cc01c776e6$fd873240$6302a8c0@dcore>

Nicola Larosa wrote:
> Paul G wrote:
>> while there are a few languages, like erlang for example, that
>> express event loops with cooperative threading syntax (processes,
>> messages and futures), i'm of the opinion that it's actually harmful
>> to hide the event loop details from people who haven't started
>> thinking that way yet - they should be simply syntactic sugar for
>> when you've already grokked the model.
>
> IIUC, the same holds true for inline callbacks, right?
>
> http://twistedmatrix.com/documents/current/api/twisted.internet.defer.html#inlineCallbacks

nice, haven't seen that yet. it's not quite what i was agitating against - 
you still see an explicit async cutpoint and still have to realize what's 
going on. while i personally wouldn't recommend using this method all 
throughout, it does look to be very useful for situations where you'll never 
need to reuse the bottom half.

-p 




From mithrandi-twisted-python at mithrandi.za.net  Wed Apr  4 16:10:30 2007
From: mithrandi-twisted-python at mithrandi.za.net (Tristan Seligmann)
Date: Wed, 4 Apr 2007 22:10:30 +0200
Subject: [Twisted-Python] Question about plugins tutorial
In-Reply-To: <89d8b1b00704040737u5c1f30bao34b10478865870ec@mail.gmail.com>
References: <89d8b1b00704040737u5c1f30bao34b10478865870ec@mail.gmail.com>
Message-ID: <20070404201030.GD655@mithrandi.za.net>

* Brian Costlow <brian.costlow at gmail.com> [2007-04-04 10:37:20 -0400]:

> # plugin
>  class Foo(object):
>      implements(IPlugin, imyplugins.IMyPlugIn)
> 
>      def fooStuff(self):
>          # do foo stuff
> 
>    def fooFactory(self):
>        return Foo()
> 
> f = Foo()
>  # end plugin
> 
>  #call plugin from app
> for n in getPlugins(imyplugins.IMyPlugIn):
>    o = n.fooFactory()
>      o.fooStuff()
> 
> 
> Does this make sense? Is there a better way in the twisted framework
> to handle this?

The other replies to your posts raise some good points, but I would just
like to point out that classes themselves can be used as plugins. For
example:

class Foo(object):
    classProvides(IPlugin, IMyPlugin):

    def fooStuff(self):
        """Does foo stuff."""

for cls in getPlugins(IMyPlugin):
    o = cls()
    o.fooStuff()

-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070404/add198e0/attachment.pgp 

From ellisonbg.net at gmail.com  Wed Apr  4 16:32:37 2007
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 4 Apr 2007 14:32:37 -0600
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <20070404181704.7769.37732181.divmod.xquotient.2128@joule.divmod.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>
	<20070404181704.7769.37732181.divmod.xquotient.2128@joule.divmod.com>
Message-ID: <6ce0ac130704041332m439d43d3q2e30daff82f11e3e@mail.gmail.com>

> >With all that said, I have encountered a few highly unusual cases
> >where I really did want blockOn to exist.  These cases had the
> >characteristic that they couldn't be done any other way in Twisted.
> >The answer in this case is to ditch twisted and use a tool that is
> >better suited to the problem.  But in my experience these cases only
> >pop up about 0.00001% of the time.
>
> I am very curious about your 0.00001% case.  Not that I don't believe such
> cases exist, but in every case but one (twisted ticket #2545) the issue has
> actually been a documentation problem with Twisted, where it wasn't clear
> how to do something the "normal" way with Deferreds and such.  I'd like to
> know if there is another such doc bug we should be filing :).

The cases I am thinking about is not an example of a doc bug.  The
most relevant one is related to using Twisted in an interactive python
(really IPython most of the time) session.  There are two difficulties
we keep running into:

1.  The interactive python interpreter is a completely synchronous
universe - getting the reactor running in this context seems like a
hack.  The only way I have seen this done is by running the reactor in
a different thread.  The problem with this is that it is inevitable
that you end up wanting to do things with Deferreds in the main thread
where user code is running.  But, as I understand it, Twisted is not
thread safe, so at that point, you are playing with (threaded) fire.

2.  Users expect certain things in an interactive python session that
don't mesh well with Twisted and the asynchronous universe:

>>> psi = computeWavefunctionForHydrogen()
>>> psi.getEnergy(1)
-13.6
# here the user looks at the energy (a human if statement) and decides
if they actually want to
# make the following plot.  If the answer were not -13.6, they would
not make the plot.
>>> plot(psi.getState(1))

Even if you could get the reactor running in an interactive python
session it would be crazy to have to write something like (in an
interactive session):

>>> d = computeWavefunctionForHydrogen()
>>> def printAndPlot(psi, n):
>>>     print psi.getEnergy(n)
>>>     if abs(psi.getEnergy(n) - (psi.getEnergy(n)) < 1.0e-4:
>>>         plot(psi.getState(n))
>>> d.addCallback(printAndPlot, 1)

The problem we are having is that we would like to use Twisted network
clients in functions like computeWavefunctionForHydrogen.  But we
simply can't as there is no way of returning the actual result to the
user.  I can't emphasize enough that end users of such code
(scientists) "just want the damn result" (not a deferred) and are
willing to wait for it.  Thus in classes/functions that need to block
for an actual result, we don't use twisted - we use blocking sockets
instead.

In blockOn existed, the implementation of
computeWavefunctionForHydrogen could look like:

def computeWavefunctionForHydrogen():
    d = doRemoteComputationOnServerUsingTwisted()
    return blockOn(d)

The important point is that doRemoteComputationOnServerUsingTwisted is
the only place where anything involving the network is happening in
this process.  This type of code occurs mainly in clients.  In server
code you are usually also listening on sockets, so there could be
other asyncronous events that occur.  But in interactive client code,
the network event are often very contained and isolated.

One thing we have done in our blocking client code is to create
something we call a PendingResult object.  It is basically a fully
synchronous version of a deferred that allows a user to  poll for or
block on a result that is being computed elsewhere.  It is designed
for interactive usage, where only blocking sockets are used.

Brian



From glyph at divmod.com  Wed Apr  4 17:40:00 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 04 Apr 2007 21:40:00 -0000
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <6ce0ac130704041332m439d43d3q2e30daff82f11e3e@mail.gmail.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>
	<20070404181704.7769.37732181.divmod.xquotient.2128@joule.divmod.com>
	<6ce0ac130704041332m439d43d3q2e30daff82f11e3e@mail.gmail.com>
Message-ID: <20070404214000.7769.1687353046.divmod.xquotient.2170@joule.divmod.com>

On 08:32 pm, ellisonbg.net at gmail.com wrote:
>>I am very curious about your 0.00001% case.  Not that I don't believe 
>>such
>>cases exist, but in every case but one (twisted ticket #2545) the 
>>issue has
>>actually been a documentation problem with Twisted, where it wasn't 
>>clear
>>how to do something the "normal" way with Deferreds and such.  I'd 
>>like to
>>know if there is another such doc bug we should be filing :).
>
>The cases I am thinking about is not an example of a doc bug.  The
>most relevant one is related to using Twisted in an interactive python
>(really IPython most of the time) session.  There are two difficulties
>we keep running into:

Hmm.  I hope you're not the guy I talked to at PyCon (I didn't catch 
his/your name) because I'm about to feel very foolish repeating myself 
here, especially if at some point in the interim you responded to this 
and I didn't notice.
>1.  The interactive python interpreter is a completely synchronous
>universe - getting the reactor running in this context seems like a
>hack.  The only way I have seen this done is by running the reactor in
>a different thread.  The problem with this is that it is inevitable
>that you end up wanting to do things with Deferreds in the main thread
>where user code is running.  But, as I understand it, Twisted is not
>thread safe, so at that point, you are playing with (threaded) fire.

IPython's shell is not the same as the standard Python interpreter. 
It's already its own program and therefore has a fair amount of freedom 
in what it does with user input.

Run "python -m twisted/conch/stdio" for an example of an interactive 
session that is held in a non-blocking way.  Not blocking in the code 
*doesn't* mean not blocking for the user - it just means having the 
option not to block.
>2.  Users expect certain things in an interactive python session that
>don't mesh well with Twisted and the asynchronous universe:

This is _exactly_ the documentation issue I was talking about :).
>>>>psi = computeWavefunctionForHydrogen()
>>>>psi.getEnergy(1)
>-13.6
># here the user looks at the energy (a human if statement) and decides
>if they actually want to
># make the following plot.  If the answer were not -13.6, they would
>not make the plot.
>>>>plot(psi.getState(1))
>
>Even if you could get the reactor running in an interactive python
>session it would be crazy to have to write something like (in an
>interactive session):
>>>>d = computeWavefunctionForHydrogen()
>>>>def printAndPlot(psi, n):
>>>>     print psi.getEnergy(n)
>>>>     if abs(psi.getEnergy(n) - (psi.getEnergy(n)) < 1.0e-4:
>>>>         plot(psi.getState(n))
>>>>d.addCallback(printAndPlot, 1)

Here's a screenshot of an interactive session using the command above:

http://twistedmatrix.com/users/glyph/images/content/screenshots/psi- 
energy.png

Unfortunately it doesn't animate, but there is a 1-second pause between 
"<Deferred #0>" and "Deferred #0 called back:".  It's a bit crude since 
it is "deferred-oriented" right now, rather than result oriented, but a 
few clever implementation tricks could easily eliminate the distinction 
(like the "_.result" line).

Is that the kind of user-interaction you want?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070404/c16895ca/attachment.htm 

From twisted-python at 2xlp.com  Wed Apr  4 19:01:23 2007
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 4 Apr 2007 19:01:23 -0400
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
Message-ID: <6C1050DD-11F7-4A8C-84BD-63C4454A9B5E@2xlp.com>


On Apr 3, 2007, at 12:13 PM, robomancer wrote:
> Run phase: a "master" process assigns an experiment to each runner.
> When we get a result back, log the result to a file and send a new
> experiment to that runner.  Repeat until all experiments are done.

As something quick & dirty...

couldn't you just :
	a) have a postgres db on 1 machine and run a master on that.
	b) run slave nodes on all the other machines in reactor loops
	c) master installs commands / file data into postgres
	d) children poll postgres for commands, execute & log to pg as  
necessary

its not elegant at all, but you could do that really really fast.   
you don't have to worry about nodes talking to one another - and they  
can be specifically assigned tasks.


// Jonathan Vanasco

| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
| SyndiClick.com
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      FindMeOn.com - The cure for Multiple Web Personality Disorder
|      Web Identity Management and 3D Social Networking
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      RoadSound.com - Tools For Bands, Stuff For Fans
|      Collaborative Online Management And Syndication Tools
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -





From ellisonbg.net at gmail.com  Wed Apr  4 23:19:20 2007
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 4 Apr 2007 21:19:20 -0600
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <933D1915-D3E7-4ECE-B56E-6FBC98A4AF37@zgroupplc.com>
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
	<db6b5ecc0704030948r1b4f411dh254ba20d47203cdd@mail.gmail.com>
	<933D1915-D3E7-4ECE-B56E-6FBC98A4AF37@zgroupplc.com>
Message-ID: <6ce0ac130704042019o53f0a86er1abe9a740bc77cc9@mail.gmail.com>

> Are you using the PB, a custom protocol or a combination of the two
> to make your remote calls?

Our older version (called chainsaw) uses our own custom protocol by
default.  The newer version uses both PB and xmlrpc/rawhttp in
different places.  But, we have been very careful to design everything
using interfaces and adapters - thus all the network protocols can be
replaced/swapped out for new ones by:

1) writing a few adapter classes that adapt a given protocol to our interaces
2)  changing a single line in a config file to have the new protocol used.

With that said, we are moving more in the raw http direction because
it is so good at streaming large things around.  PB is nice but not
good at that.  Also, using http allows us to develop nice browser
based apps that use all this stuff.

> Regards,
>
>
> Matt
>
>
>
> m a t t h e w   g l u b b
>
> ________________________________________________________________________
> Z Group PLC
>
> Tel: +44 (0) 8700 111 173
> Fax: +44 (0) 8707 051 393
> Txt: +44 (0) 7800 140 877
> Web: <http://www.zgroupplc.com/>
>
> This  email  and  any  files  transmitted  with it are  confidential and
> intended solely for the use of the individual or entity to whom they are
> addressed.  The opinions  expressed in this mail are those of the author
> and do not necessarily  represent the views of the company.  If you have
> received this email in error please notify <service at zgroupplc.com>
>
>
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.1 (Darwin)
>
> iD8DBQFGEowKyI6MkdKPngkRAhsQAJ93yKqsTiKgw1VGMmlnFeOuGnQpKQCgmgjk
> WBkKbP1esCZxV6JwK0o988M=
> =wH2L
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From ellisonbg.net at gmail.com  Wed Apr  4 23:21:54 2007
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 4 Apr 2007 21:21:54 -0600
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <fdcd12710704031019h167375c5j1a2a7fefa1f057b9@mail.gmail.com>
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
	<db6b5ecc0704030948r1b4f411dh254ba20d47203cdd@mail.gmail.com>
	<fdcd12710704031019h167375c5j1a2a7fefa1f057b9@mail.gmail.com>
Message-ID: <6ce0ac130704042021k40e04c5dl1a5c4804f177fdb7@mail.gmail.com>

> Thanks!  This looks really promising.  Is there a place I can sign up
> to be notified when saw is ready?

Sure, we will announce saw on both the ipython-users and ipython-dev lists:

http://projects.scipy.org/mailman/listinfo/ipython-user
http://projects.scipy.org/mailman/listinfo/ipython-dev

In the meantime, the best source of info about saw is the talk that I
gave at pycon:

http://ipython.scipy.org/talks/0702_pycon/ipython1/

Cheers,

Brian


> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From daniel at keystonewood.com  Thu Apr  5 00:25:12 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Thu, 5 Apr 2007 00:25:12 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
	<20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>
Message-ID: <F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>

On Apr 4, 2007, at 1:43 PM, glyph at divmod.com wrote:

> On 04:35 pm, daniel at keystonewood.com wrote:
> >On Apr 3, 2007, at 8:42 PM, Itamar Shtull-Trauring wrote:
> >>On Tue, 2007-04-03 at 17:07 -0400, Daniel Miller wrote:
> >>>>twisted.internet.defer.DeferredLock and some of the related  
> classes
> >>>>are
> >>>>what you ought to be using.
> >>>
> >>>Unfortunately that only gets me half way there.  
> DeferredLock.acquire
> >>>() returns a deferred. How do I return the result of a deferred  
> from
> >>>a PB remote_xxx() function?
> >>
> >>Just return the Deferred from the remote_xxx() function.
> >
> >Thanks, I didn't know I could return a deferred from a PB  
> remote_xxx ()
> >method. That detail doesn't seem to be documented in the   
> Perspective Broker
> >documentation, which I have read quite a few  times.
>
> The PB documentation is not too great.  Perhaps this paper would be  
> helpful to you, if you haven't seen it:
>
> http://www.lothar.com/tech/papers/PyCon-2003/pb-pycon/pb.html#auto7
>
>     """
>     In addition, the remote method can itself return a Deferred  
> instead of an
>     actual return value. When that Deferreds fires, the data given  
> to the
>     callback will be serialized and returned to the original caller.
>     """

Thanks, I had not read that before, and that does explain it.  
Although it's such a short note that it could be easily missed. It  
would be much better to have a code example.

>
> > Maybe this could be
> >highlighted in the "Complete Example" [0]  section of the PB usage
> >documentation? The examples use the  TwistedQuotes application,  
> and the
> >IQuoter.getQuote() method always  returns a string (at least I  
> couldn't find
> >any implementations that  return a deferred).
>
> Please feel free to write some patches for the documentation, or  
> open a doc bug describing this issue in more detail.  It's  
> definitely an under-documented feature of PB.

I'll try to do that sometime soon.

>
> >However, that would require
> >rewriting most if not  all implementations of IQuoter to return  
> deferred's
> >and/or the code  that calls IQuoter.getQuote(), which demonstrates  
> the viral
> >nature of  twisted when used in conjunction with other libraries.
>
> I don't think that would really be the terrible burden that you  
> suggest, considering the relatively small amount of tutorial  
> documentation that implements or calls IQuoter.  One could also  
> propose a separate interface, IDeferredQuoter, to make the  
> distinction clearer.

Well of course it's no big deal to change IQuoter, but that specific  
case wasn't really my point. My point is that in the real world it's  
a BAD THING to have to rewrite perfectly good/working/tested code  
just because we want to use twisted. But this is exactly what  
happened to me when twisted was introduced into my project.

>
> >So anyway, I rewrote my server-side library to do it the twisted  
> way  and
> >return deferred's instead trying rig up some way of waiting for   
> them. I
> >still think it would be super useful to be able to pseudo- block on a
> >deferred (i.e. allow the reactor to process other events  while  
> waiting for
> >the deferred). It is very annoying to have to  rewrite many layers  
> of code
> >when twisted is introduced into a  program. I did find  
> gthreadless.py, and
> >maybe that would do it.  Unfortunately discussion on that seems to  
> have been
> >dropped some time  ago...
>
> I'm afraid that the feature you want doesn't make any sense and is,  
> in a broad sense, impossible.

Maybe it's impossible for you to see things the way I see them  
because you have become drunk on Twisted Kool-Aide. In my specific  
case I am running twisted in a single-threaded environment with a  
single synchronized resource where each request that needs to access  
that resource must gain an exclusive lock before doing anything with  
it (a classic locking scenario). This is not "I'm being lazy and I do  
not want to learn how to use Deferreds." Rather, it is a requirement  
that is dictated by the system with which I am communicating (it does  
not support concurrent access through the API provided by the  
vendor). Thus, my code would be much simpler (both to write and  
maintain) if I had blockOn(), and it would not have any risk of dead  
lock or other such concurrency bugs. You might ask why I bother to  
use Twisted? -- Perspective Broker is the most elegant way I could  
find to call remote methods in Python. If it were abstracted from  
Twisted to become a fully synchronous library I would use that  
instead, but at this point it seems that if I want PB I am stuck with  
Twisted too.

In short, this feature does "make sense" in my environment. Whether  
it's possible or not is another matter entirely.

>  There are some things like it which might be possible - for  
> example, http://twistedmatrix.com/trac/ticket/2545 - but the  
> reactor is not reentrant and in some sense could not be made  
> reentrant.
>
> Consider this innocuous looking block of code:
>
>     from twisted.internet.protocol import Protocol
>     from make_believe import magicallyBlockOn
>
>     class MagicalProtocol(Protocol):
>         def dataReceived(self, data):
>             commands = (self.buf + data).split()
>             self.buf = commands[-1]
>             for command in commands[:-1]:
>                 if command == 'QUIT':
>                     self.transport.loseConnection()
>                     return
>                 else:
>                     # Deferreds are hard, let's go shopping
>                     page = magicallyBlockOn(getPage("http:// 
> example.com/%s" %
>                                                     (command,)))
>                     self.transport.write("SIZE:"+len(page))

You're "Deferreds are hard" comment is an insult. You make it sound  
like I don't want to think. If I didn't want to think I wouldn't be  
be a software developer.

This code obviously won't work because the getPage() has to wait and  
another dataReceived() call could come in with a QUIT command while  
the first one is still waiting for getPage(). Instead you'd need to  
accumulate the data in a buffer and then do your command processing  
logic after all data has been received--that is, if you want to use  
blockOn(getPage(...))--it probably wouldn't be the smartest way to do  
this because it would be nice to start getting pages before we  
receive all of the data. But this is just one case that doesn't work  
with blockOn(). I've never said that it would magically make every  
case easier, it just makes some less complicated cases very much  
simpler.

Everything I've read about this issue suggests that the twisted  
developers just don't want to give people what they want because it  
would allow them to shoot themselves in the foot (for example, by  
using blockOn() in a multi-threaded environment or in inappropriate  
places such as the example above). But this is Python and we're  
consenting adults. With the proper warnings a feature like this could  
make twisted much more palatable for people with large existing  
projects that do not wish to rewrite entire sections of code just to  
work with deferreds. It would allow people to get the easiest thing  
working as quickly as possible, and then go back and write the  
optimal deferred implementation later when performance/blocking/etc.  
becomes an issue.

Most people that would use blockOn() would probably use it in an  
entirely synchronous fashion where there would only be one deferred  
being processed at any given time. In these cases blockOn() would  
work just fine (if inefficiently). From your point of view that  
probably totally defeats the purpose of using twisted, but as I have  
pointed out above there are other useful features in twisted beside  
its deferred mechanism (PB).

The concept that I am thinking of seems entirely possible, although I  
am sure it would require rewriting existing reactor implementations.  
However, in the long run that seems like a small cost if twisted  
could be more widely adopted because it would play nicer with  
existing non-async code.

>
> If you were using Deferreds to track the result of the 'getPage'  
> operation, you could cancel the callbacks that write to the  
> transport in connectionLost.  However, with magical blocking, one  
> dataReceived method might be interleaved with another.  That means  
> that every time through the loop, you have to check to see if the  
> transport has already been disconnected - the code as presented  
> here is buggy and will spuriously fail depending on the order of  
> the connection being lost and the remote page being retrieved.
>
> In this example I've been careful to accumulate all the buffer- 
> management and parsing logic at the top of the method, before any  
> potential re-entrancy can happen, but other code (most everything  
> in Twisted's existing protocol implementations, not to mention just  
> about all application code) would not be so lucky.
>
> It might be quite feasible to implement a microthreaded runtime  
> environment that lived on _top_ of Twisted and explicitly accounted  
> for issues like these, but that would not really be substantially  
> different than 2.5+inlineCallbacks.
>
> >For the record, I've included updated versions of the previously   
> posted
> >code below. I'd be happy if someone pointed out if I'm doing   
> anything wrong
> >(with respect to twisted) in this code.
>
> Nothing immediately jumps out at me.

Thanks for the review.

~ Daniel





From ellisonbg.net at gmail.com  Thu Apr  5 01:54:04 2007
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 4 Apr 2007 23:54:04 -0600
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
	<20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>
	<F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>
Message-ID: <6ce0ac130704042254g4058f697p83dca8ee0086d536@mail.gmail.com>

>
> > >So anyway, I rewrote my server-side library to do it the twisted
> > way  and
> > >return deferred's instead trying rig up some way of waiting for
> > them. I
> > >still think it would be super useful to be able to pseudo- block on a
> > >deferred (i.e. allow the reactor to process other events  while
> > waiting for
> > >the deferred). It is very annoying to have to  rewrite many layers
> > of code
> > >when twisted is introduced into a  program. I did find
> > gthreadless.py, and
> > >maybe that would do it.  Unfortunately discussion on that seems to
> > have been
> > >dropped some time  ago...
> >
> > I'm afraid that the feature you want doesn't make any sense and is,
> > in a broad sense, impossible.
>
> Maybe it's impossible for you to see things the way I see them
> because you have become drunk on Twisted Kool-Aide. In my specific
> case I am running twisted in a single-threaded environment with a
> single synchronized resource where each request that needs to access
> that resource must gain an exclusive lock before doing anything with
> it (a classic locking scenario). This is not "I'm being lazy and I do
> not want to learn how to use Deferreds." Rather, it is a requirement
> that is dictated by the system with which I am communicating (it does
> not support concurrent access through the API provided by the
> vendor).

We have a very similar situation in IPython.  We have a twisted server
that is managing access to a bunch of other processes (talking over
PB) that each don't support concurrent access.

> Thus, my code would be much simpler (both to write and
> maintain) if I had blockOn(), and it would not have any risk of dead
> lock or other such concurrency bugs.

I do disagree with this.  In our case, we simply use a FIFO queue
based on Deferreds to manage multiple requests to a single resource
that does not support concurrent access.  It is very simple and
explicit.  Even if you had blockOn() you would still have to have
queue to manage the multiple requests, right?  I don't at all see why
it would be simpler if blockOn existed.

> You're "Deferreds are hard" comment is an insult. You make it sound
> like I don't want to think. If I didn't want to think I wouldn't be
> be a software developer.

Just for the record:  I think Deferreds _are_ hard, even damn hard -
at least if you want to do something non-trivial that has robust error
handling.  Some of the callback/errback decision trees we have in our
code are insane and took days to get right and test fully.  The point
is that doing these complex things would be even more insane without
twisted.

> Everything I've read about this issue suggests that the twisted
> developers just don't want to give people what they want because it
> would allow them to shoot themselves in the foot (for example, by
> using blockOn() in a multi-threaded environment or in inappropriate
> places such as the example above).

Personally, I would love a completely robust blockOn to exist.  I
would use it in certain cases.  But the bottom line is that many
people have tried to do this, but that have all failed.  Their
collective wisdom (with which I agree) is that it can't be done
without completely redesigning twisted's internals - if at all -
without breaking the overall programming model in twisted.  Most of us
are not ready to throw the baby out with the bathwater.

> Most people that would use blockOn() would probably use it in an
> entirely synchronous fashion where there would only be one deferred
> being processed at any given time. In these cases blockOn() would
> work just fine (if inefficiently). From your point of view that
> probably totally defeats the purpose of using twisted, but as I have
> pointed out above there are other useful features in twisted beside
> its deferred mechanism (PB).

I thought the same thing when I first wrote the version of blockOn
that we tried in IPython.  As time went along though, I quickly
discovered that these assumptions are simply wrong.  It doesn't work
just fine.

> The concept that I am thinking of seems entirely possible, although I
> am sure it would require rewriting existing reactor implementations.
> However, in the long run that seems like a small cost if twisted
> could be more widely adopted because it would play nicer with
> existing non-async code.

Currently my own gut feeling is that there is something intrinsic to
Twisted's asynchronous programming model that makes a construct like
blockOn impossible to implement (even if you re-wrote a reactor)
without introducing new types of deadlocks and indeterminant behavior
into the system.  Thus it is not simply an issue of us not being smart
enough to figure out how to do it.  It seems more fundamental than
that.

Actually, I think I see why (at least in part) it is problematic.  If
blockOn exists, the following can happen:

def compute(a, b):
    d = a.computeSomething()
    # Lets say that b.state = 1 as of here
    result = blockOn(d)
    # Because the reactor just ran for an iondeterminant amount of
time, b.state could have
    # changed - or maybe not.
    # Thus the return value of this function is essentially a random result.
    return b.state + result

To eliminate such indeterminacies, new constructs would need to be
created to handle such situations:

def compute(a, b):
    d = a.computeSomething()
    # Lets say that b.state = 1 as of here
    acquire(b.state)    # This gets a lock on b.state
    result = blockOn(d)
    result += b.state
    # b.state =1 still
    release(b.state)   # release the lock
    return result

But now you can get deadlocks as blockOn switches to another code
path.  Things start to look just like threads at this point and the
Kool-Aide starts to taste bitter.

Brian



From glyph at divmod.com  Thu Apr  5 05:53:37 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 05 Apr 2007 09:53:37 -0000
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
	<20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>
	<F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>
Message-ID: <20070405095337.7769.357965633.divmod.xquotient.2267@joule.divmod.com>

On 04:25 am, daniel at keystonewood.com wrote:
>On Apr 4, 2007, at 1:43 PM, glyph at divmod.com wrote:
>>On 04:35 pm, daniel at keystonewood.com wrote:
>> >On Apr 3, 2007, at 8:42 PM, Itamar Shtull-Trauring wrote:
>> >>On Tue, 2007-04-03 at 17:07 -0400, Daniel Miller wrote:

>Well of course it's no big deal to change IQuoter, but that specific 
>case wasn't really my point. My point is that in the real world it's  a 
>BAD THING to have to rewrite perfectly good/working/tested code  just 
>because we want to use twisted. But this is exactly what  happened to 
>me when twisted was introduced into my project.

Hmm.  Well, I don't know about the "real world" - haven't visited in a 
while - but in the magical fairy kingdom where *I* live, it is generally 
considered a good idea to globally consider the implications of a new 
programming model on "good/working/tested code".  Networks and 
concurrency, in particular, have this pesky habit of introducing 
entirely new error conditions into previously "working" code, breaking 
all of its assumptions.  This isn't specific to Twisted, but Twisted 
does deal with networks and concurrency quite a bit.
>>I'm afraid that the feature you want doesn't make any sense and is, 
>>in a broad sense, impossible.

>Maybe it's impossible for you to see things the way I see them  because 
>you have become drunk on Twisted Kool-Aide.

You are making it sound like you are bringing a fresh new idea to the 
discussion here, which I've never heard before and am unwilling to 
consider because I'm inflexible in my thinking.  That's not what's 
happening.  This is a frequently-debunked and well-understood issue in 
the Twisted community.  It seems to come up about once per year.  See my 
now apparently prescient blog post as of last April:

    http://glyf.livejournal.com/40037.html
>In my specific  case I am running twisted in a single-threaded 
>environment with a  single synchronized resource where each request 
>that needs to access  that resource must gain an exclusive lock before 
>doing anything with  it (a classic locking scenario). This is not "I'm 
>being lazy and I do  not want to learn how to use Deferreds." Rather, 
>it is a requirement  that is dictated by the system with which I am 
>communicating (it does  not support concurrent access through the API 
>provided by the  vendor). Thus, my code would be much simpler (both to 
>write and  maintain) if I had blockOn(), and it would not have any risk 
>of dead  lock or other such concurrency bugs.

You're confusing two things here.

On the one hand, you want mutual exclusion for an external resource, 
which blocks.

On the other, you want semantics for implementing that mutual exclusion 
via blocking in your own process.

The former, as you have already demonstrated, can be implemented without 
the latter.  The question is, would your code actually be simpler to 
write and to maintain if you had blockOn?  Nothing you've said so far 
indicates that it would actually be more maintainable, and I've tried 
(although perhaps failed) to illustrate the high cost of the *apparent* 
simplicity at the moment of implementation.

It strikes me that the process actually making the foreign API call 
could just block "for real" which would solve the mutual exclusion issue 
- callers into the PB layer would appear to be getting concurrent 
access, but responses would be implicitly queued up.

Another solution here would be for Twisted to have a nice convenience 
API for dispatching tasks to a process pool.  Right now setting up a 
process pool is conceptually easy but mechanically difficult; you have 
to do a lot of typing and make a lot of irrelevant decisions (AMP or PB 
or pickle?  stdio or sockets?).
>You might ask why I bother to use Twisted? -- Perspective Broker is the 
>most elegant way I could  find to call remote methods in Python. If it 
>were abstracted from  Twisted to become a fully synchronous library I 
>would use that  instead, but at this point it seems that if I want PB I 
>am stuck with Twisted too.

This is another area where the feature request doesn't quite make sense. 
It would be possible to implement something that looked kinda-sorta like 
PB, which dealt with a single request/response pair over a single 
socket, in an apparently synchronous and blocking manner.  However, PB 
itself is a fully symmetrical protocol where the server can send 
messages to the client at any time, so a full PB implementation is not 
really possible when any message can be replied to with a "busy, poor 
implementation doesn't allow me to answer that message in this state" 
error.

For a lot of PB applications - those it was designed for, for example, 
online games - you absolutely need full two-way communication.
>In short, this feature does "make sense" in my environment. Whether 
>it's possible or not is another matter entirely.

I am still not convinced.  You can feel free to stop trying to convince 
me though, or you can write a patch which we can then discuss.
>You're "Deferreds are hard" comment is an insult. You make it sound 
>like I don't want to think.

You've also insulted me by implication of not living in the "real world" 
and being "drunk" on "Kool-Aide [sic]".  I think that this feature is a 
symptom of muddy thinking, since I've seen it dozens of times before, 
and I'm not going to apologize to you for thinking that.

The difference between the jabs we're trading here is that I'm not using 
any software that *you* wrote, and I'm not insulting you at the same 
time I'm posting to a mailing list for that software while demanding 
impossible features.
>If I didn't want to think I wouldn't be  be a software developer.

I don't think that you "don't want to think", I think that you're 
mistaken.  However, if indeed you didn't want to think, this is hardly a 
defense, as you'd clearly not be alone in the software development 
profession, such as it is.  c.f. http://worsethanfailure.com/
>This code obviously won't work because the getPage() has to wait and 
>another dataReceived() call could come in with a QUIT command while 
>the first one is still waiting for getPage(). Instead you'd need to 
>accumulate the data in a buffer and then do your command processing 
>logic after all data has been received--that is, if you want to use 
>blockOn(getPage(...))--it probably wouldn't be the smartest way to do 
>this because it would be nice to start getting pages before we  receive 
>all of the data. But this is just one case that doesn't work  with 
>blockOn(). I've never said that it would magically make every  case 
>easier, it just makes some less complicated cases very much  simpler.

It makes some cases appear simpler *at the expense* of breaking lots of 
other, correctly-written code, which depends on not having 20 levels of 
naive "blockOn" calls above them on the stack.  It's analogous to how 
there are restrictions on "user code" in UNIX and you're not allowed to 
handle interrupts directly because the point of the kernel is to allow 
multiple processes to run at the same time.  The original point of 
Twisted was a high degree of frustration that so many libraries for 
speaking protocols implemented their own, incompatible event-loops.
>Everything I've read about this issue suggests that the twisted 
>developers just don't want to give people what they want because it 
>would allow them to shoot themselves in the foot (for example, by 
>using blockOn() in a multi-threaded environment or in inappropriate 
>places such as the example above). But this is Python and we're 
>consenting adults. With the proper warnings a feature like this could 
>make twisted much more palatable for people with large existing 
>projects that do not wish to rewrite entire sections of code just to 
>work with deferreds. It would allow people to get the easiest thing 
>working as quickly as possible, and then go back and write the  optimal 
>deferred implementation later when performance/blocking/etc.  becomes 
>an issue.

I agree that it would be nice to allow programs to get on the Twisted 
bandwagon slowly, and to integrate more cleanly with foreign concurrency 
mechanisms like microthreads and database transactions.  This is exactly 
what Jim Fulton is working on with the multi-reactor stuff for ZEO.  You 
can't have one reentrant reactor, but you *can*, at least conceptually, 
have one reactor start another reactor and wait for it to complete a 
particular operation.  If you'd like to help other projects gradually 
adapt to Twisted, perhaps you would like to contribute something to 
ticket #2545.

To follow my earlier analogy, this is like the hypervisor and user-mode- 
kernel facilities in various UNIXes; if you're not allowed to do 
something in the kernel, it's OK to start your own kernel.
>Most people that would use blockOn() would probably use it in an 
>entirely synchronous fashion where there would only be one deferred 
>being processed at any given time. In these cases blockOn() would  work 
>just fine (if inefficiently). From your point of view that  probably 
>totally defeats the purpose of using twisted, but as I have  pointed 
>out above there are other useful features in twisted beside  its 
>deferred mechanism (PB).

... and as *I've* pointed out above, PB is only possible _because_ of 
Twisted's event loop.  In fact Deferreds were directly extracted from PB 
- originally every PB method had "pbcallback" and "pberrback" keyword 
arguments, and the Deferred class was the encapsulation of that so that 
PB methods could be easily chained and their results passed to other 
systems.
>The concept that I am thinking of seems entirely possible, although I 
>am sure it would require rewriting existing reactor implementations. 
>However, in the long run that seems like a small cost if twisted  could 
>be more widely adopted because it would play nicer with  existing non- 
>async code.

If you want to try and go implement this, you can discover just how 
small the cost is :).  If, in the course of implementing such a thing, 
you manage to get clean, coherent semantics for "blockOn", and it passes 
the full test suite (etc etc) I would not reject such a thing out of 
hand.  I am suggesting that it is impossible to get coherent semantics 
for blockOn, and if you submit an implementation I'll point out the 
specific brokenness of a particular approach, but my main point is that 
it's impossible because of specific problems, not that it's 
unacceptable.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070405/4d41b231/attachment.htm 

From matteo.acerbi at gmail.com  Thu Apr  5 06:08:42 2007
From: matteo.acerbi at gmail.com (matteo acerbi)
Date: Thu, 5 Apr 2007 12:08:42 +0200
Subject: [Twisted-Python] Conch filetransfer *client* example?
Message-ID: <606bc0770704050308v436169dcx7131184a8829f7f5@mail.gmail.com>

Hello all!

I'm a Twisted *and* Python beginner, so please don't treat me
badly. :-)

I'm looking for a way to transfer files via SFTP (or SCP) and,
as I'm going to use conch to execute commands remotely
(already did some working tests), I'd like to use the same
package to transfer some files (copying them from the
twisted-running host to the remote one).

I have nothing more than a ssh server on the remote host,
can't even rely on a python interpreter, so please don't suggest
me to transfer files some other way.

Does anyone have a simple example showing how to use the
*client* classes of twisted.conch.ssh.filetransfer?

I'm really stuck on this...

Thanks to anyone that will reply!

Cheers,
Matteo



From daniel at keystonewood.com  Thu Apr  5 09:53:56 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Thu, 5 Apr 2007 09:53:56 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <20070405095337.7769.357965633.divmod.xquotient.2267@joule.divmod.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
	<20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>
	<F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>
	<20070405095337.7769.357965633.divmod.xquotient.2267@joule.divmod.com>
Message-ID: <E0987C5F-E9A2-4AF6-B504-BACB97F637A4@keystonewood.com>

On Apr 5, 2007, at 5:53 AM, glyph at divmod.com wrote:

> >>I'm afraid that the feature you want doesn't make any sense and  
> is,  in a
> >>broad sense, impossible.
>
> >Maybe it's impossible for you to see things the way I see them   
> because you
> >have become drunk on Twisted Kool-Aide.
>
> You are making it sound like you are bringing a fresh new idea to  
> the discussion here, which I've never heard before and am unwilling  
> to consider because I'm inflexible in my thinking.  That's not  
> what's happening.

I'm sorry I wrote that...it was inflammatory and did not bring any  
value to the conversation. Please accept my apology.

> >In my specific  case I am running
> >twisted in a single-threaded environment with a  single synchronized
> >resource where each request that needs to access  that resource  
> must gain an
> >exclusive lock before doing anything with  it (a classic locking  
> scenario).
> >This is not "I'm being lazy and I do  not want to learn how to use
> >Deferreds." Rather, it is a requirement  that is dictated by the  
> system with
> >which I am communicating (it does  not support concurrent access  
> through the
> >API provided by the  vendor). Thus, my code would be much simpler  
> (both to
> >write and  maintain) if I had blockOn(), and it would not have any  
> risk of
> >dead  lock or other such concurrency bugs.
>
> You're confusing two things here.
>
> On the one hand, you want mutual exclusion for an external  
> resource, which blocks.
>
> On the other, you want semantics for implementing that mutual  
> exclusion via blocking in your own process.
>

The external "blocking" resource is just a shell script that takes  
some time t run. It does not acquire any shared resources that would  
result in dead lock and it will always return (maybe with an error,  
but it will return) unless something terrible happens (e.g. plug is  
pulled on server, fire, etc.).

>
> The former, as you have already demonstrated, can be implemented  
> without the latter.  The question is, would your code actually be  
> simpler to write and to maintain if you had blockOn?  Nothing  
> you've said so far indicates that it would actually be more  
> maintainable, and I've tried (although perhaps failed) to  
> illustrate the high cost of the *apparent* simplicity at the moment  
> of implementation.

It would be more maintainable because it would look just like normal  
sequential python code:

lock.acquire() # uses blockOn() to acquire a DeferredLock
try:
     process.check_call(['script1.sh']) # uses blockOn(spawnProcess 
(...)) internally
     process.check_call(['script2.sh'])
finally:
     lock.release()

This is very simple and very easy to maintain. It could be written  
with inlineCallbacks fairly easily as well:

yield lock.acquire()
try:
     yield process.check_call(...)
     yeild process.check_call(...)
finally:
     lock.release()

That's pretty nice (so nice I might just rewrite my code that way).  
My complaint is that the code must have knowledge of the twisted  
environment (why else would it yield the result of process.check_call 
()?). I do not really see the conceptual difference between these two  
code blocks except one yields to and one calls into the reactor event  
loop. Is there some other inherent problem with the first example? Of  
course you need to make sure that the code inside the try/finally  
block does not try to acquire the lock again, but that's a basic  
concurrency problem which can even happen in the next example.

Moving on, in a fully deferred world we have this:

def deflock(func, *args, **kw):
     def callback(lock, *args, **kw):
         try:
             result = func(*args, **kw)
         except:
             lock.release()
             raise
         if isinstance(result, Deferred):
             def release(arg, lock):
                 lock.release()
                 return arg
             result.addBoth(release, lock)
         else:
             lock.release()
         return result
     dfr = self.lock.acquire()
     dfr.addCallback(callback, *args, **kw)
     return dfr

def dostuff():
     def deferproc(result, cmd):
         return process.check_call(cmd) # returns a deferred
     dfr = deferproc(None, ["script1.sh"])
     dfr.addCallback(defproc, ["script2.sh"])
     return dfr

dfr = deflock(dostuff)

... you get the picture.

Notice the code to acquire/release the lock--there are three  
different calls to lock.release() in there, and they all must be  
carefully sorted out to make sure that exactly one of them will be  
called in any given scenario--that's hard to maintain.

>
> It strikes me that the process actually making the foreign API call  
> could just block "for real" which would solve the mutual exclusion  
> issue - callers into the PB layer would appear to be getting  
> concurrent access, but responses would be implicitly queued up.

Right, that would work and that's exactly what subprocess.check_call 
() (the real python built-in version) would do. Unfortunately twisted  
does not work with the subprocess module--spawnProcess() is the only  
alternative I found that actually works and that means I have to use  
a deferred.

>
> Another solution here would be for Twisted to have a nice  
> convenience API for dispatching tasks to a process pool.  Right now  
> setting up a process pool is conceptually easy but mechanically  
> difficult; you have to do a lot of typing and make a lot of  
> irrelevant decisions (AMP or PB or pickle?  stdio or sockets?).

That sounds nice.

>
> >You might ask why I bother to
> >use Twisted? -- Perspective Broker is the most elegant way I  
> could  find to
> >call remote methods in Python. If it were abstracted from  Twisted  
> to become
> >a fully synchronous library I would use that  instead, but at this  
> point it
> >seems that if I want PB I am stuck with Twisted too.
>
> This is another area where the feature request doesn't quite make  
> sense.  It would be possible to implement something that looked  
> kinda-sorta like PB, which dealt with a single request/response  
> pair over a single socket, in an apparently synchronous and  
> blocking manner.  However, PB itself is a fully symmetrical  
> protocol where the server can send messages to the client at any  
> time, so a full PB implementation is not really possible when any  
> message can be replied to with a "busy, poor implementation doesn't  
> allow me to answer that message in this state" error.

I understand that PB is fully symmetrical. In my case I am only using  
half (client makes request, server responds). Would it make sense to  
relax the constraints when PB is used in this way?

>
> >Everything I've read about this issue suggests that the twisted   
> developers
> >just don't want to give people what they want because it  would  
> allow them
> >to shoot themselves in the foot (for example, by  using blockOn()  
> in a
> >multi-threaded environment or in inappropriate  places such as the  
> example
> >above). But this is Python and we're  consenting adults. With the  
> proper
> >warnings a feature like this could  make twisted much more  
> palatable for
> >people with large existing  projects that do not wish to rewrite  
> entire
> >sections of code just to  work with deferreds. It would allow  
> people to get
> >the easiest thing  working as quickly as possible, and then go  
> back and
> >write the  optimal deferred implementation later when
> >performance/blocking/etc.  becomes an issue.
>
> I agree that it would be nice to allow programs to get on the  
> Twisted bandwagon slowly, and to integrate more cleanly with  
> foreign concurrency mechanisms like microthreads and database  
> transactions.  This is exactly what Jim Fulton is working on with  
> the multi-reactor stuff for ZEO.  You can't have one reentrant  
> reactor, but you *can*, at least conceptually, have one reactor  
> start another reactor and wait for it to complete a particular  
> operation.  If you'd like to help other projects gradually adapt to  
> Twisted, perhaps you would like to contribute something to ticket  
> #2545.

This looks very interesting. I'll try to help out with this effort if  
I can find some time.

Thanks for taking time to read my ramblings and understand the  
problems that I am having (even if we don't quite agree on the  
simplest solutions). Your input is valuable, and I am indebted to you  
for providing free support in your spare time.

~ Daniel





From john at johnnypops.demon.co.uk  Thu Apr  5 10:52:01 2007
From: john at johnnypops.demon.co.uk (John Popplewell)
Date: Thu, 5 Apr 2007 15:52:01 +0100
Subject: [Twisted-Python] Conch filetransfer *client* example?
In-Reply-To: <606bc0770704050308v436169dcx7131184a8829f7f5@mail.gmail.com>
References: <606bc0770704050308v436169dcx7131184a8829f7f5@mail.gmail.com>
Message-ID: <20070405145201.GH19769@rosa.blake>

On Thu, Apr 05, 2007 at 12:08:42PM +0200, matteo acerbi wrote:
> Hello all!
> 
> I'm a Twisted *and* Python beginner, so please don't treat me
> badly. :-)
Hi matteo,

I'm new here myself.

> I'm looking for a way to transfer files via SFTP (or SCP) and,
> as I'm going to use conch to execute commands remotely
> (already did some working tests), I'd like to use the same
> package to transfer some files (copying them from the
> twisted-running host to the remote one).
>
><snip!>
>
> Does anyone have a simple example showing how to use the
> *client* classes of twisted.conch.ssh.filetransfer?
I had trouble finding examples as well.
Try 'twisted/conch/scripts/cftp.py', 'conch.py' and 'tkconch.py'.

Note: I don't think any of them work on Windows (not sure about
'tkconch.py') and there are a couple of minor bugs, patches here:
http://twistedmatrix.com/trac/ticket/2519

Hope that helps,

regards,
John.




From andrew-twisted at puzzling.org  Thu Apr  5 10:57:19 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 6 Apr 2007 00:57:19 +1000
Subject: [Twisted-Python] Conch filetransfer *client* example?
In-Reply-To: <606bc0770704050308v436169dcx7131184a8829f7f5@mail.gmail.com>
References: <606bc0770704050308v436169dcx7131184a8829f7f5@mail.gmail.com>
Message-ID: <20070405145719.GE1508@steerpike.home.puzzling.org>

matteo acerbi wrote:
[...]
> 
> Does anyone have a simple example showing how to use the
> *client* classes of twisted.conch.ssh.filetransfer?

It's not a particularly simple example, but the "cftp" program that comes with
Conch (see bin/conch/cftp and twisted/conch/scripts/cftp.py if you're looking at
SVN checkout) is an example of an SFTP client using Conch.

-Andrew.




From general at eepatents.com  Thu Apr  5 11:42:16 2007
From: general at eepatents.com (Ed Suominen)
Date: Thu, 05 Apr 2007 11:42:16 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <E0987C5F-E9A2-4AF6-B504-BACB97F637A4@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>	<1175647326.5424.0.camel@localhost.localdomain>	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>	<20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>	<F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>	<20070405095337.7769.357965633.divmod.xquotient.2267@joule.divmod.com>
	<E0987C5F-E9A2-4AF6-B504-BACB97F637A4@keystonewood.com>
Message-ID: <461518D8.2090204@eepatents.com>

Daniel Miller wrote:
> I'm sorry I wrote that...it was inflammatory and did not bring any value
> to the conversation. Please accept my apology.

That really shows some class. Thanks for saying it.

>> Another solution here would be for Twisted to have a nice convenience
>> API for dispatching tasks to a process pool.  Right now setting up a
>> process pool is conceptually easy but mechanically difficult; you have
>> to do a lot of typing and make a lot of irrelevant decisions (AMP or
>> PB or pickle?  stdio or sockets?).
> 
> That sounds nice.

There's been a lot of interest in this, including from Glyph Lefkowitz.
The taskqueue API in my twisted-goodies package could be easily adapted
to do it, using an implementation of IWorker that works with python
interpreter processes rather than threads. (See
http://foss.eepatents.com/api/twisted-goodies/taskqueue.workers.html.)
Note that you can queue to remote workers with the API just as it stands
now, see RemoteCallWorker and RemoteInterfaceWorker.

If anyone wants to take a shot at a process pool using a ProcessWorker,
I'll be happy to help. And if there's interest in having the result go
into Twisted proper under an MIT license, I remain open to that.

Best regards, Ed



From glyph at divmod.com  Thu Apr  5 11:47:50 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 05 Apr 2007 15:47:50 -0000
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <E0987C5F-E9A2-4AF6-B504-BACB97F637A4@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
	<20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>
	<F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>
	<20070405095337.7769.357965633.divmod.xquotient.2267@joule.divmod.com>
	<E0987C5F-E9A2-4AF6-B504-BACB97F637A4@keystonewood.com>
Message-ID: <20070405154750.7769.109606011.divmod.xquotient.2398@joule.divmod.com>

On 01:53 pm, daniel at keystonewood.com wrote:
>On Apr 5, 2007, at 5:53 AM, glyph at divmod.com wrote:
>> >>I'm afraid that the feature you want doesn't make any sense and  is, 
>>in a
>> >>broad sense, impossible.
>>
>> >Maybe it's impossible for you to see things the way I see them 
>>because you
>> >have become drunk on Twisted Kool-Aide.
>>
>>You are making it sound like you are bringing a fresh new idea to  the 
>>discussion here, which I've never heard before and am unwilling  to 
>>consider because I'm inflexible in my thinking.  That's not  what's 
>>happening.
>
>I'm sorry I wrote that...it was inflammatory and did not bring any 
>value to the conversation. Please accept my apology.

Thank you, I very much appreciate the sentiment!  I'm glad to see you 
also only quoted the actually useful / productive parts of my response 
too ;).
>The external "blocking" resource is just a shell script that takes 
>some time t run. It does not acquire any shared resources that would 
>result in dead lock and it will always return (maybe with an error, 
>but it will return) unless something terrible happens (e.g. plug is 
>pulled on server, fire, etc.).

I thought I understood what was going on, but now I'm confused again. 
Why do you need mutual exclusion at all if it doesn't acquire any shared 
resources?  Couldn't you just run it concurrently?
>It would be more maintainable because it would look just like normal 
>sequential python code:

Yes, it would *look* like sequential python code.  But it wouldn't be 
:).  There's a heck of a lot that can happen in acquire(); your whole 
application could run for ten minutes on that one line of code.  Worst 
of all, it would only happen in extreme situations, so testing or 
debugging issues that are caused by it becomes even more difficult.

<snip blocking code>
>This is very simple and very easy to maintain. It could be written 
>with inlineCallbacks fairly easily as well:
>
>yield lock.acquire()
>try:
>     yield process.check_call(...)
>     yeild process.check_call(...)
>finally:
>     lock.release()
>
>That's pretty nice (so nice I might just rewrite my code that way).

I'm glad you think so.  I was originally not too happy about 
inlineCallbacks (its predecessors did not do so well) but I keep seeing 
examples like this which it makes look much nicer.
>My complaint is that the code must have knowledge of the twisted 
>environment (why else would it yield the result of process.check_call 
>()?). I do not really see the conceptual difference between these two 
>code blocks except one yields to and one calls into the reactor event 
>loop. Is there some other inherent problem with the first example? Of 
>course you need to make sure that the code inside the try/finally 
>block does not try to acquire the lock again, but that's a basic 
>concurrency problem which can even happen in the next example.

This is really the key thing.  If you're running your code in the 
Twisted environment, and you want it to be correct, it really must know 
about the Twisted environment.  The simple presence of the 'yield' 
keyword at every level where a Deferred is being returned forces you to 
acknowledge, "yes, I know that a context switch may occur here". 
Without it, any function could suddenly and radically change the 
assumptions that all of its callers were allowed to make.
>Moving on, in a fully deferred world we have this:

<snip ugly stuff>
>... you get the picture.
>
>Notice the code to acquire/release the lock--there are three  different 
>calls to lock.release() in there, and they all must be  carefully 
>sorted out to make sure that exactly one of them will be  called in any 
>given scenario --that's hard to maintain.

There are other ways to deal with that.  maybeDeferred, for example, 
will make sure you always get a Deferred back and that it looks vaguely 
correct.
>Right, that would work and that's exactly what subprocess.check_call () 
>(the real python built-in version) would do. Unfortunately twisted 
>does not work with the subprocess module--spawnProcess() is the only 
>alternative I found that actually works and that means I have to use  a 
>deferred.

The only thing I have to say about that is:
    http://twistedmatrix.com/trac/ticket/733
>>Another solution here would be for Twisted to have a nice  convenience 
>>API for dispatching tasks to a process pool.  Right now  setting up a 
>>process pool is conceptually easy but mechanically  difficult; you 
>>have to do a lot of typing and make a lot of  irrelevant decisions 
>>(AMP or PB or pickle? stdio or sockets?).
>
>That sounds nice.

Something I'd be doing in my copious spare time, if I had any.
>I understand that PB is fully symmetrical. In my case I am only using 
>half (client makes request, server responds). Would it make sense to 
>relax the constraints when PB is used in this way?

I don't know if it would be feasible to do the work required for PB, due 
to other, less fundamental implementation issues.  However, it was a 
design goal of AMP that it be possible to implement a "naive", only-a 
-few-lines-of-Python version for drop-in ease-of-use comparable to 
XMLRPC while still providing the actual "good" version in Twisted 
itself.  I have heard rumors to the effect that Eric Mangold actually 
wrote such a thing, but I don't know where it is.
>>#2545.
>
>This looks very interesting. I'll try to help out with this effort if 
>I can find some time.

Thanks.
>Thanks for taking time to read my ramblings and understand the 
>problems that I am having (even if we don't quite agree on the 
>simplest solutions). Your input is valuable, and I am indebted to you 
>for providing free support in your spare time.

Thanks very much for taking the time to acknowledge this.  You leave me 
here with the impression that writing these emails was time well spent. 
And, thanks in advance for working on any of those tickets I gave you 
links to ;-).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070405/da4f9e94/attachment.htm 

From daniel at keystonewood.com  Thu Apr  5 14:09:53 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Thu, 5 Apr 2007 14:09:53 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <20070405154750.7769.109606011.divmod.xquotient.2398@joule.divmod.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
	<20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>
	<F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>
	<20070405095337.7769.357965633.divmod.xquotient.2267@joule.divmod.com>
	<E0987C5F-E9A2-4AF6-B504-BACB97F637A4@keystonewood.com>
	<20070405154750.7769.109606011.divmod.xquotient.2398@joule.divmod.com>
Message-ID: <04D67B29-A3EB-407B-A057-BC8E8770F64C@keystonewood.com>

> >The external "blocking" resource is just a shell script that  
> takes  some
> >time t run. It does not acquire any shared resources that would   
> result in
> >dead lock and it will always return (maybe with an error,  but it  
> will
> >return) unless something terrible happens (e.g. plug is  pulled on  
> server,
> >fire, etc.).
>
> I thought I understood what was going on, but now I'm confused  
> again.  Why do you need mutual exclusion at all if it doesn't  
> acquire any shared resources?  Couldn't you just run it concurrently?

I guess I said that wrong. When I said "it does not acquire any  
shared resources" I was referring to the external system being  
manipulated by the shell script. That effectively means that the  
shell script is the shared resource and it can only be called in a  
synchronous manner. The script is essentially posting a transaction,  
which must be done in an atomic fashion with regard to my code. I  
know this is very ugly, and I'd love to fix it. Unfortunately it's  
not my system so I can't.

We can keep going around and around about this but there's no need.  
My immediate problem was solved when I learned that I could return a  
deferred from a PB remote_xxx() method.

What I would like to continue to discuss is whether all code that  
calls something that does deferred logic must be immediately aware of  
that fact.

> >It would be more maintainable because it would look just like normal
> >sequential python code:
>
> Yes, it would *look* like sequential python code.  But it wouldn't  
> be :).  There's a heck of a lot that can happen in acquire(); your  
> whole application could run for ten minutes on that one line of  
> code.  Worst of all, it would only happen in extreme situations, so  
> testing or debugging issues that are caused by it becomes even more  
> difficult.

This could happen with any deferred logic. As long as the code has  
the proper concurrency logic this is not a problem--even if it takes  
10 minutes. In today's operating systems something like that could  
even happen in plain old synchronous single-threaded code if the OS  
decided to give some other process priority for that long (unlikely  
but possible).

>
> >My complaint is that the code must have knowledge of the twisted   
> environment
> >(why else would it yield the result of process.check_call ()?). I  
> do not
> >really see the conceptual difference between these two  code  
> blocks except
> >one yields to and one calls into the reactor event  loop. Is there  
> some
> >other inherent problem with the first example? Of  course you need  
> to make
> >sure that the code inside the try/finally  block does not try to  
> acquire the
> >lock again, but that's a basic  concurrency problem which can even  
> happen in
> >the next example.
>
> This is really the key thing.  If you're running your code in the  
> Twisted environment, and you want it to be correct, it really must  
> know about the Twisted environment.  The simple presence of the  
> 'yield' keyword at every level where a Deferred is being returned  
> forces you to acknowledge, "yes, I know that a context switch may  
> occur here".  Without it, any function could suddenly and radically  
> change the assumptions that all of its callers were allowed to make.

So it's really a matter of being explicit...and it's true that  
"explicit is better than implicit" but then again, "practicality  
beats purity" :-) It would be super nice to be able to provide the  
exact interface of a normal python module/class/function and have  
twisted logic going on inside. When used properly it would be very  
powerful. Of course doing something like this is definitely not  
entirely innocent, and there should be warnings provided with  
implementations that may block (as there should be with any other  
piece of concurrency-related code that may block). But it's not nice  
to force everyone to use an awkward interface just to try to help  
them avoid mistakes.

~ Daniel





From dkarbott at comcast.net  Thu Apr  5 14:21:15 2007
From: dkarbott at comcast.net (dkarbott at comcast.net)
Date: Thu, 05 Apr 2007 18:21:15 +0000
Subject: [Twisted-Python] SSL Negotiation / connectionMade() callback
Message-ID: <040520071821.6697.46153E1A000E643500001A2922135396539B9B010D9D0E050B@comcast.net>

Hi:
I've been playing around with twisted a little.  I have written an internet.protocol.Protocol subclass that I want to run over SSL.   It seems that the Protocol.connectionMade() callback gets invoked before SSL negotiation is complete. 

Ideally, I don't want my Protocol to send any data until the SSL negotiation is completley finished.

Is there an easy way to get callback when the SSL negotiation is done?

Info:
Twisted Version: 2.0.1 (emerge'd from gentoo portage)
Also, I have the SSL context factories set up to do client authentication.

Any help would be much appreciated.

-- Darrell



From slamb at slamb.org  Thu Apr  5 14:59:03 2007
From: slamb at slamb.org (Scott Lamb)
Date: Thu, 5 Apr 2007 11:59:03 -0700
Subject: [Twisted-Python] 64bit Installation Problems
In-Reply-To: <20070404103446.7769.1477470278.divmod.xquotient.1985@joule.divmod.com>
References: <4612F267.4090302@mail.mew.co.jp> <46135045.30602@densedata.com>
	<20070404103446.7769.1477470278.divmod.xquotient.1985@joule.divmod.com>
Message-ID: <A230AB69-A819-4FF7-8F88-539EAF175FEA@slamb.org>

*grumble* *grumble* I responded to this same thread on buildbot-devel  
yesterday. <http://sourceforge.net/mailarchive/forum.php? 
thread_name=4613203A.1040500%40mail.mew.co.jp&forum_name=buildbot- 
devel> Please don't post the same topic separately to multiple lists.

On Apr 4, 2007, at 3:34 AM, glyph at divmod.com wrote:
> This is what I do for Twisted *development*, but for deployment, it  
> is suggested to build packages for your OS and have them managed by  
> your package manager.  The issue Tim is describing makes it sound  
> like it would be difficult to build those packages for 64bit centOS.
>
> It sounds like this is simply a bug in either Twisted or  
> distutils.  I've had similar issues in the past, but I rarely use  
> 64bit OSes so I assumed they were personal misconfigurations.  Tim,  
> if you could track down this issue further and report a bug in our  
> tracker (if it's a Twisted issue) I'd be much obliged.
>
> You may discover it's a bug in Python which has been fixed in a  
> version later than 2.3, in which case you are likely out of luck -  
> you might just have to upgrade to  a more recent Python version.

http://mail.python.org/pipermail/python-dev/2006-March/062462.html
http://mail.python.org/pipermail/python-dev/2006-March/062548.html

Apparently there's disagreement between how RedHat installs Python on  
x86_64 and how the Python people designed it to be installed.  
Hopefully one of them will bend eventually; until then I just install  
all of the twisted stuff into the arch-dependent directory.

(This has the unfortunate disadvantage that you need to rebuild .rpms  
like python-twisted-web on each architecture, even though they  
contain no architecture-specific code. For that reason I hope  
RedHat's way wins out.)

I have source RPMs that do this at <http://rosalyn.dyn.slamb.org/yum/ 
centos4/SRPMS/>, should anyone be interested. I gave quick build  
instructions in the buildbot-devel thread linked above.

-- 
Scott Lamb <http://www.slamb.org/>





From manlio_perillo at libero.it  Thu Apr  5 15:09:36 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu, 05 Apr 2007 21:09:36 +0200
Subject: [Twisted-Python] twisted 2.5 on Debian
Message-ID: <46154970.7060302@libero.it>

Hi.

Why twisted 2.5 is still not available in Debian?


Thanks   Manlio Perillo



From matteo.acerbi at gmail.com  Thu Apr  5 15:56:04 2007
From: matteo.acerbi at gmail.com (matteo acerbi)
Date: Thu, 5 Apr 2007 21:56:04 +0200
Subject: [Twisted-Python] Conch filetransfer *client* example?
In-Reply-To: <20070405145201.GH19769@rosa.blake>
References: <606bc0770704050308v436169dcx7131184a8829f7f5@mail.gmail.com>
	<20070405145201.GH19769@rosa.blake>
Message-ID: <606bc0770704051256q4d2f3cf0pb3de1e5c73df656c@mail.gmail.com>

2007/4/5, John Popplewell <john at johnnypops.demon.co.uk>:
>
> I had trouble finding examples as well.
> Try 'twisted/conch/scripts/cftp.py', 'conch.py' and 'tkconch.py'.

I hadn't noticed those ones!

> Note: I don't think any of them work on Windows

Luckily I don't need Windows. :-)

> and there are a couple of minor bugs, patches here:
> http://twistedmatrix.com/trac/ticket/2519
>
> Hope that helps,

That surely will!

Thanks a lot to both you and Andrew.

Regards,
Matteo



From mithrandi-twisted-python at mithrandi.za.net  Thu Apr  5 20:41:04 2007
From: mithrandi-twisted-python at mithrandi.za.net (Tristan Seligmann)
Date: Fri, 6 Apr 2007 02:41:04 +0200
Subject: [Twisted-Python] twisted 2.5 on Debian
In-Reply-To: <46154970.7060302@libero.it>
References: <46154970.7060302@libero.it>
Message-ID: <20070406004103.GA22538@mithrandi.za.net>

* Manlio Perillo <manlio_perillo at libero.it> [2007-04-05 21:09:36 +0200]:

> Hi.
> 
> Why twisted 2.5 is still not available in Debian?

This question would be more appropriately addressed to the maintainer of
the Twisted packages in Debian, Matthias Klose <doko at debian.org>. You
might also consider filing a wishlist severity bug requesting that
Twisted 2.5 be packaged. I suspect, however, that the impending release
of etch may be the reason that this has not yet been done.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070406/80b917a7/attachment.pgp 

From andrewfr_ice at yahoo.com  Fri Apr  6 07:25:23 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Fri, 6 Apr 2007 04:25:23 -0700 (PDT)
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <E1HZDD5-0001dh-02@pyramid.twistedmatrix.com>
Message-ID: <387637.45140.qm@web34213.mail.mud.yahoo.com>

Hello Brian:

I have just recently started reading this thread.

>1.  The interactive python interpreter is a
completely >synchronous universe - getting the reactor
running in >this context seems like a hack.  The only
way I have >seen this done is by running the reactor
in
>a different thread.  The problem with this is that it
>is inevitable that you end up wanting to do things
>with Deferreds in the main thread where user code is
>running.  But, as I understand it, Twisted is not
>thread safe, so at that point, you are playing with
>(threaded) fire.

I recented subscribed to this mailing list to ask
questions about integrating Stackless with Twisted....


I execute Stackless and Twisted in their own threads.
Otherwise when the Twisted reactor blocks, Stackless
tasklets (read threads) that could otherwise run,
would be blocked too.

I start the Stackless thread with a
reactor.callInThread().  Because of thread safety, I
use the callFromThread() method to make Twisted calls.
Also for safety and performance, I make the threads
communicate through a deque (I took Phil Mayer's
suggestion).

As for deferreds. Essentially I make the deferreds and
Stackless threads communicate through channels. So
Stackless tasklets block until there is input. 

There are still a few issues and I am still conducting
tests, However things seem to be working...

One of the Stackless members, Carlos de Paula has
started a repository that includes Twisted/Stackless
examples. There are examples using the Perspective
Broker and callInThread/callFromThread.

http://code.google.com/p/stacklessexamples/wiki/StacklessTwisted

Cheers,
Andrew


 
____________________________________________________________________________________
No need to miss a message. Get email on-the-go 
with Yahoo! Mail for Mobile. Get started.
http://mobile.yahoo.com/mail 



From glyph at divmod.com  Fri Apr  6 07:47:44 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 06 Apr 2007 11:47:44 -0000
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <387637.45140.qm@web34213.mail.mud.yahoo.com>
References: <E1HZDD5-0001dh-02@pyramid.twistedmatrix.com>
	<387637.45140.qm@web34213.mail.mud.yahoo.com>
Message-ID: <20070406114744.7769.836631852.divmod.xquotient.2419@joule.divmod.com>

On 11:25 am, andrewfr_ice at yahoo.com wrote:
>I execute Stackless and Twisted in their own threads.
>Otherwise when the Twisted reactor blocks, Stackless
>tasklets (read threads) that could otherwise run,
>would be blocked too.

Stackless tasklets that "want to run" ought to be running due to events 
transpiring.  One kind of event is "time passes" (reactor.callLater), 
other types of events are user interaction (like callbacks in a UI such 
as GTK) or I/O events (dataReceived, connectionLost, et. al.)

There should be no need for native threads in a Twisted+Stackless 
universe.  Even if all your tasklets constantly want to be doing work, 
they should be able to do that via a tasklet scheduler that is always 
running with a 0 callLater timeout.

Do you think this would be possible?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070406/375a1f94/attachment.htm 

From radix at twistedmatrix.com  Fri Apr  6 12:02:27 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 6 Apr 2007 12:02:27 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <20070406114744.7769.836631852.divmod.xquotient.2419@joule.divmod.com>
References: <E1HZDD5-0001dh-02@pyramid.twistedmatrix.com>
	<387637.45140.qm@web34213.mail.mud.yahoo.com>
	<20070406114744.7769.836631852.divmod.xquotient.2419@joule.divmod.com>
Message-ID: <60ed19d40704060902l59ea6cd9y70a89ece42f559fc@mail.gmail.com>

On 4/6/07, glyph at divmod.com <glyph at divmod.com> wrote:
> On 11:25 am, andrewfr_ice at yahoo.com wrote:
> >I execute Stackless and Twisted in their own threads.
> >Otherwise when the Twisted reactor blocks, Stackless
> >tasklets (read threads) that could otherwise run,
> >would be blocked too.
>
> Stackless tasklets that "want to run" ought to be running due to events
> transpiring.  One kind of event is "time passes" (reactor.callLater), other
> types of events are user interaction (like callbacks in a UI such as GTK) or
> I/O events (dataReceived, connectionLost, et. al.)
>
> There should be no need for native threads in a Twisted+Stackless universe.
> Even if all your tasklets constantly want to be doing work, they should be
> able to do that via a tasklet scheduler that is always running with a 0
> callLater timeout.

Thanks for putting it so succinctly. That's what I've been trying to
tell people :-) (in other media).

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From list-ener at strank.info  Fri Apr  6 14:18:00 2007
From: list-ener at strank.info (Stefan Rank)
Date: Fri, 06 Apr 2007 20:18:00 +0200
Subject: [Twisted-Python] Re: Synchronization techniques
In-Reply-To: <20070404214000.7769.1687353046.divmod.xquotient.2170@joule.divmod.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>	<1175647326.5424.0.camel@localhost.localdomain>	<6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>	<20070404181704.7769.37732181.divmod.xquotient.2128@joule.divmod.com>	<6ce0ac130704041332m439d43d3q2e30daff82f11e3e@mail.gmail.com>
	<20070404214000.7769.1687353046.divmod.xquotient.2170@joule.divmod.com>
Message-ID: <46168ED8.9040601@strank.info>

on 04.04.2007 23:40 glyph at divmod.com said the following:
<snip>
> 
> Run "python -m twisted/conch/stdio" for an example of an interactive 
> session that is held in a non-blocking way.  Not blocking in the code 
> *doesn't* mean not blocking for the user - it just means having the 
> option not to block.
> 
>  >2.  Users expect certain things in an interactive python session that
>  >don't mesh well with Twisted and the asynchronous universe:
> 
> This is _exactly_ the documentation issue I was talking about :).
> 
>  >>>>psi = computeWavefunctionForHydrogen()
>  >>>>psi.getEnergy(1)
>  >-13.6
>  ># here the user looks at the energy (a human if statement) and decides
>  >if they actually want to
>  ># make the following plot.  If the answer were not -13.6, they would
>  >not make the plot.
>  >>>>plot(psi.getState(1))
>  >
>  >Even if you could get the reactor running in an interactive python
>  >session it would be crazy to have to write something like (in an
>  >interactive session):
>  >>>>d = computeWavefunctionForHydrogen()
>  >>>>def printAndPlot(psi, n):
>  >>>>     print psi.getEnergy(n)
>  >>>>     if abs(psi.getEnergy(n) - (psi.getEnergy(n)) < 1.0e-4:
>  >>>>         plot(psi.getState(n))
>  >>>>d.addCallback(printAndPlot, 1)
> 
> Here's a screenshot of an interactive session using the command above:
> 
> http://twistedmatrix.com/users/glyph/images/content/screenshots/psi-energy.png
> 
> Unfortunately it doesn't animate, but there is a 1-second pause between 
> "<Deferred #0>" and "Deferred #0 called back:".  It's a bit crude since 
> it is "deferred-oriented" right now, rather than result oriented, but a 
> few clever implementation tricks could easily eliminate the distinction 
> (like the "_.result" line).

Am I right that this is a screenshot of the manhole client?

I just recently tried to embed the IPython shell into a twisted application.
AFAIK this is currently only possible using a separate thread
(there is an ASPN cookbook entry).

I would like to list here what I think is necessary to make this 
possible without using threads. Hopefully, you can correct me where I am 
wrong.

The main IPython class has a main loop (InteractiveShell.interact) that 
uses raw_input. Further, it first sets up pyreadline for handling 
command-line niceties inside raw_input.

For embedding this in twisted, the twisted reactor needs to be the one 
calling IPython/pyreadline when necessary.
On the IPython level, I think this should be "easy" by subclassing the 
Shell and splitting/rearranging the relevant code, so that it can be 
called back at the point where raw_input would normally return.
(I did not look at the new IPython saw branch...)

On the twisted side, I think that something like twisted.internet.stdio 
  would be calling back?
Or rather something like twisted.conch.insults?

I suspect that it would be hard to recode pyreadline in a way that it 
could be called back by twisted?
So to get readline support, something like readline would need to be 
implemented using t.i.stdio / insults.

Does this seem possible, so far? :-)

cheers,
stefan




From glyph at divmod.com  Fri Apr  6 17:28:49 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 06 Apr 2007 21:28:49 -0000
Subject: [Twisted-Python] Re: Synchronization techniques
In-Reply-To: <46168ED8.9040601@strank.info>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>
	<20070404181704.7769.37732181.divmod.xquotient.2128@joule.divmod.com>
	<6ce0ac130704041332m439d43d3q2e30daff82f11e3e@mail.gmail.com>
	<20070404214000.7769.1687353046.divmod.xquotient.2170@joule.divmod.com>
	<46168ED8.9040601@strank.info>
Message-ID: <20070406212849.7769.1052979193.divmod.xquotient.2642@joule.divmod.com>

On 06:18 pm, list-ener at strank.info wrote:
>on 04.04.2007 23:40 glyph at divmod.com said the following:
><snip>

>>Run "python -m twisted/conch/stdio" for an example of an interactive
<snip>
>>Here's a screenshot of an interactive session using the command above:

>Am I right that this is a screenshot of the manhole client?

Sort of.  It's the manhole server (I don't know what you mean by 
"client") running on standard IO, run via 'python -m 
twisted/conch/stdio'.
>For embedding this in twisted, the twisted reactor needs to be the one 
>calling IPython/pyreadline when necessary.
>On the IPython level, I think this should be "easy" by subclassing the 
>Shell and splitting/rearranging the relevant code, so that it can be 
>called back at the point where raw_input would normally return.
>(I did not look at the new IPython saw branch...)

>On the twisted side, I think that something like twisted.internet.stdio 
>would be calling back?

Rather than IPython calling into raw_input, the loop that calls 
raw_input would have to be changed to a function that takes a string. 
This would almost certainly be the trickiest part, since it seems there 
are about two dozen places (at a quick glance) in ipython that call 
raw_input.
>Or rather something like twisted.conch.insults?

insults will be getting its events from twisted.internet.stdio, so both 
will be involved.
>I suspect that it would be hard to recode pyreadline in a way that it 
>could be called back by twisted?
>So to get readline support, something like readline would need to be 
>implemented using t.i.stdio / insults.
>
>Does this seem possible, so far? :-)

To me, sure - although I hardly have the time to do it :).  There have 
been a few forays into line-editing code for insults, although I'm not 
clear of the current state of the art, JP Calderone should be returning 
from vacation soon and will probably have some light to shed on the 
issue.  I don't know much about pyreadline.  There may be code there 
that's reusable, maybe not, but in any event it is a goal of the insults 
library to provide high-quality event-driven line-editing.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070406/a7887903/attachment.htm 

From andrewfr_ice at yahoo.com  Fri Apr  6 18:13:07 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Fri, 6 Apr 2007 15:13:07 -0700 (PDT)
Subject: [Twisted-Python] Synchronization
In-Reply-To: <E1HZqtW-0007og-02@pyramid.twistedmatrix.com>
Message-ID: <932767.5808.qm@web34206.mail.mud.yahoo.com>

Hello Glyph:

>Stackless tasklets that "want to run" ought to be
>running due to events transpiring.  One kind of event
>is "time passes" (reactor.callLater), 
>other types of events are user interaction (like
>callbacks in a UI such as GTK) or I/O events
>(dataReceived, connectionLost, et. al.)

I am still relatively new to Twisted...  In the past,
I tried using loopingCall. In turn, the task would
make a call to stackless.schedule() that would allow
waiting tasklets to execute. The problem was that
certain tests would fail resulting in reactor errors
or deferreds would not fire. Also I really don't have
an understanding of what happens when a callback calls
stackless.schedule(). So I would like to avoid this
construct if I can.
  
(I posted all the aforementioned in the "Advice on
Writing a Custom Reactor." )

As a note, under the two threads approach, I still
lost "deferreds." However placing a time.sleep() after
calling a deferred method, would result in the
deferred properly functioning. I am operating under
the suspicion that there is some issue involving the
GIL. This is one of the "issues" I mentioned in my
previous post. 

>There should be no need for native threads in a
>Twisted+Stackless universe.  Even if all your
tasklets >constantly want to be doing work, they
should be able >to do that via a tasklet scheduler
that is always 
>running with a 0 callLater timeout. Do you think this
>would be possible?

Glyph, I modified my web server example (in the
Twisted/Stackless code examples repository). Now the
code is:

reactor.listenTCP(port, MyHttpFactory())
reactor.callLater(1, stackless.schedule)
reactor.run()

Unfortunately the tick tasklet does not pump out
numbers until my web browser makes a request....
(Hopefully) I am doing something wrong?

Glyph, once again, I apologise for being a newbie. I
thought there should be no need for native threads in
a Twisted/Stackless universe too. However by adding an
additional thread, my application works, the solution
is relatively clean, and I have a better understanding
of what is happening. 

Right now, the important thing is that I am reaping
the benefits of Twisted/Stackless which allow me to
focus on WS-BPEL specific programming. Without
Stackless and Twisted, I couldn't do a fraction of
what I am currently achieving. Also by posting my
problems in the Stackless mailing list, I found out
that there are many other people interested in using
Stackless with Twisted. Still I will always be on the
lookout for the right Twisted way to do things. 

Cheers,
Andrew






 
____________________________________________________________________________________
Need Mail bonding?
Go to the Yahoo! Mail Q&A for great tips from Yahoo! Answers users.
http://answers.yahoo.com/dir/?link=list&sid=396546091



From manlio_perillo at libero.it  Sat Apr  7 04:48:05 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 07 Apr 2007 10:48:05 +0200
Subject: [Twisted-Python] twisted 2.5 on Debian
In-Reply-To: <20070406004103.GA22538@mithrandi.za.net>
References: <46154970.7060302@libero.it>
	<20070406004103.GA22538@mithrandi.za.net>
Message-ID: <46175AC5.4020309@libero.it>

Tristan Seligmann ha scritto:
> * Manlio Perillo <manlio_perillo at libero.it> [2007-04-05 21:09:36 +0200]:
> 
>> Hi.
>>
>> Why twisted 2.5 is still not available in Debian?
> 
> This question would be more appropriately addressed to the maintainer of
> the Twisted packages in Debian, Matthias Klose <doko at debian.org>. 

Ok, thanks.

> You
> might also consider filing a wishlist severity bug requesting that
> Twisted 2.5 be packaged. I suspect, however, that the impending release
> of etch may be the reason that this has not yet been done.
> 

The package is in Ubuntu feisty, but not in Debian experimental.
I do not think the release of etch is the problem, since, as an example, 
the latest version of SQLAlchemy is already in experimental
(in date 2007-03-24).


Regards  Manlio Perillo



From antonio.bardazzi at gmail.com  Sat Apr  7 10:18:53 2007
From: antonio.bardazzi at gmail.com (Antonio Bardazzi)
Date: Sat, 7 Apr 2007 16:18:53 +0200
Subject: [Twisted-Python] utils.getProcessOutput lacks uid and gid for
	IReactorProcess.spawnProcess
Message-ID: <4a53758c0704070718g701363cdkc7054027a9636b32@mail.gmail.com>

utils.getProcessOutput(executable, args=(), env={}, path='.',
reactor=None, errortoo=0)

I think is useful for getProcessOutput to accepts also uid and gid for
spawnProcess

IReactorProcess.spawnProcess(processProtocol, executable, args=(),
env={}, path=None, id=None, gid=None, usePTY=0, childFDs=None)

17c17
< def _callProtocolWithDeferred(protocol, executable, args, env, path,
reactor=None):
---
> def _callProtocolWithDeferred(protocol, executable, args, env, path, reactor=None, uid=None, gid=None):
23c23
<     reactor.spawnProcess(p, executable, (executable,)+tuple(args), env, path)
---
>     reactor.spawnProcess(p, executable, (executable,)+tuple(args), env, path, uid=uid, gid=gid)
54c54
< def getProcessOutput(executable, args=(), env={}, path='.', reactor=None,
---
> def getProcessOutput(executable, args=(), env={}, path='.', reactor=None, uid=None, gid=None,
77c77,78
<                                      reactor)
---
>                                      reactor,
>                                      uid=uid, gid=gid)
170d170
<
-------------- next part --------------
A non-text attachment was scrubbed...
Name: utils.getProcessOutput_uid_and_gid.patch.gz
Type: application/x-gzip
Size: 294 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070407/f7c1e8a2/attachment.bin 

From glyph at divmod.com  Sat Apr  7 10:35:33 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 07 Apr 2007 14:35:33 -0000
Subject: [Twisted-Python] utils.getProcessOutput lacks uid and gid for
	IReactorProcess.spawnProcess
In-Reply-To: <4a53758c0704070718g701363cdkc7054027a9636b32@mail.gmail.com>
References: <4a53758c0704070718g701363cdkc7054027a9636b32@mail.gmail.com>
Message-ID: <20070407143533.7769.1770065051.divmod.xquotient.2650@joule.divmod.com>




On 02:18 pm, antonio.bardazzi at gmail.com wrote:
>I think is useful for getProcessOutput to accepts also uid and gid for
>spawnProcess

Hi Antonio,

Thanks for your interest.  If you want to contribute to Twisted, have a 
look at this page:

    http://twistedmatrix.com/trac/wiki/TwistedDevelopment

Briefly, your submission should:

* be in unified diff format
* be attached to a ticket in the tracker
* include unit tests
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070407/5fdb66fc/attachment.htm 

From exarkun at twistedmatrix.com  Sun Apr  8 00:05:02 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 08 Apr 2007 04:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1176005102.28.665442695@twistedmatrix.com

Bug summary
______________________
Summary for 2007-04-01 through 2007-04-08
Bugs opened: 7    Bugs closed: 5  Total open bugs: 891 (+2)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +1  |Highest:  -2          |Core:     +2           
|Enhancement:  +1  |High:     -1          |Ftp:      -2           
|Task:         +0  |Normal:   +4          |Trial:    -1           
                   |Low:      +1          |Web:      +0           
                                          |Web2:     +2           
                                          |Website:  +0           
                                          |Words:    +1           


New / Reopened Bugs
______________________
                    ===== High =====
[#2554] strange connect timeouts (opened by gudron) (CLOSED, invalid)
    task            web        http://twistedmatrix.com/trac/ticket/2554

                    ===== Normal =====
[#2549] XMPPAuthenticator does not try non-SASL authentication (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2549

[#2551] Get rid of reference to wxsupport in choosing reactor howto (opened by itamarst)
    defect          core       http://twistedmatrix.com/trac/ticket/2551

[#2552] broken links in intro.xhtml (opened by stan)
    defect          web2       http://twistedmatrix.com/trac/ticket/2552

[#2553] Projects page links to old versions of code (opened by wiml) (CLOSED, duplicate)
    enhancement     website    http://twistedmatrix.com/trac/ticket/2553

[#2555] Documentation update: deferred results in PB (opened by daniel)
    defect          core       http://twistedmatrix.com/trac/ticket/2555

                    ===== Low =====
[#2550] redundant directoryListing method in twisted.web2.static.File class (opened by stan)
    defect          web2       http://twistedmatrix.com/trac/ticket/2550



Closed Bugs
______________________
                    ===== Highest =====
[#1160] FTPClient failed commands return a FirstError (opened by orbitz, closed by therve, fixed)
    defect          ftp        http://twistedmatrix.com/trac/ticket/1160

[#2482] TrialRunners need separate workingDirectory under Windows (opened by therve, closed by therve, fixed)
    defect          trial      http://twistedmatrix.com/trac/ticket/2482

                    ===== High =====
[#1107] [PATCH] FTPClient does not fire current commands errback on connectionLost (opened by orbitz, closed by therve, fixed)
    defect          ftp        http://twistedmatrix.com/trac/ticket/1107

[#2554] strange connect timeouts (opened by gudron, closed by exarkun, invalid)
    task            web        http://twistedmatrix.com/trac/ticket/2554

                    ===== Normal =====
[#2553] Projects page links to old versions of code (opened by wiml, closed by ralphm, duplicate)
    enhancement     website    http://twistedmatrix.com/trac/ticket/2553





From exarkun at divmod.com  Sun Apr  8 10:51:25 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 8 Apr 2007 10:51:25 -0400
Subject: readline-like behavior inside Twisted (was Re: [Twisted-Python] Re:
	Synchronization techniques)
In-Reply-To: <20070406212849.7769.1052979193.divmod.xquotient.2642@joule.divmod.com>
Message-ID: <20070408145125.18920.1518675638.divmod.quotient.9346@ohm>

On Fri, 06 Apr 2007 21:28:49 -0000, glyph at divmod.com wrote:
>On 06:18 pm, list-ener at strank.info wrote:
>>on 04.04.2007 23:40 glyph at divmod.com said the following:
>><snip>
>
>>>Run "python -m twisted/conch/stdio" for an example of an interactive
><snip>
>>>Here's a screenshot of an interactive session using the command above:
>
>>Am I right that this is a screenshot of the manhole client?
>
>Sort of.  It's the manhole server (I don't know what you mean by "client") 
>running on standard IO, run via 'python -m twisted/conch/stdio'.
>>For embedding this in twisted, the twisted reactor needs to be the one 
>>calling IPython/pyreadline when necessary.
>>On the IPython level, I think this should be "easy" by subclassing the 
>>Shell and splitting/rearranging the relevant code, so that it can be called 
>>back at the point where raw_input would normally return.
>>(I did not look at the new IPython saw branch...)
>
>>On the twisted side, I think that something like twisted.internet.stdio 
>>would be calling back?
>
>Rather than IPython calling into raw_input, the loop that calls raw_input 
>would have to be changed to a function that takes a string. This would 
>almost certainly be the trickiest part, since it seems there are about two 
>dozen places (at a quick glance) in ipython that call raw_input.
>>Or rather something like twisted.conch.insults?
>
>insults will be getting its events from twisted.internet.stdio, so both will 
>be involved.
>>I suspect that it would be hard to recode pyreadline in a way that it could 
>>be called back by twisted?
>>So to get readline support, something like readline would need to be 
>>implemented using t.i.stdio / insults.
>>
>>Does this seem possible, so far? :-)
>
>To me, sure - although I hardly have the time to do it :).  There have been 
>a few forays into line-editing code for insults, although I'm not clear of 
>the current state of the art, JP Calderone should be returning from vacation 
>soon and will probably have some light to shed on the issue.  I don't know 
>much about pyreadline.  There may be code there that's reusable, maybe not, 
>but in any event it is a goal of the insults library to provide high-quality 
>event-driven line-editing.
>

I haven't looked at pyreadline before, although I did take a look at UNC a
long time ago.  Taking a quick look at the code, it looks like converting
pyreadline to be Twisted friendly may be doable.  The most obvious change
that would be required is for each point in the code which calls getkeypress
or getchar to be changed to instead respond to an event.  The ideal way to
do this would be with a nice state machine which accounts for all the legal
inputs and states the input system can be in.  A slightly less nice way which
would probably be much easier to implement would be to add getkeypress and
getchar implementations which return Deferreds and then use inlineCallbacks
to avoid having to make significant changes to any of the callers.  This is
worse since it leaves the code a bit of a mess, but it might be useful as an
experiment.

As for insults, I expect it has a less complete implementation of all of the
typical readline features you or your users are interested in, but it is
gradually improving.  What would actually be really excellent is if both
insults and pyreadline used the same underlying readline model code which
was devoid of input/output code, then each could focus on the part it should
really care about (dealing with events or talking to a windows console or
what have you) and improvements to the actually interesting behavior in the
readline model could be shared between the two.

To some extend insults already has this (I've tried to factor as much of the
interesting behavior out away from the Twisted parts), and I see this is also
how at least some of pyreadline is structured (eg lineeditor/history.py), so
it might actually be feasible to merge the two backends into one shared
thing.

Jean-Paul



From roland.hedberg at adm.umu.se  Mon Apr  9 09:21:50 2007
From: roland.hedberg at adm.umu.se (Roland Hedberg)
Date: Mon, 09 Apr 2007 15:21:50 +0200
Subject: [Twisted-Python] Cannot pickle <type 'DB'> objects
Message-ID: <461A3DEE.1060003@adm.umu.se>

Hi!

I've written a system that consists of a central module, one or more
receiver modules and one or more sender modules.

Different modules might handle different protocols, and this is one of
the reasons I choose twisted as framework.

But now I've got a problem I don't know how to solve.

One of the sender modules is depending on another package and that
package opens a sleepycat database at initialization.

Which is not playing nice with mktap. So, now when I use mktap I get an
exception with the error code shown on the subject line of this mail.

Is there anyway by which I can tell mktap to "forget" about the
sleepycat database or ... ?

-- Roland






From exarkun at divmod.com  Mon Apr  9 09:34:05 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 9 Apr 2007 09:34:05 -0400
Subject: [Twisted-Python] Cannot pickle <type 'DB'> objects
In-Reply-To: <461A3DEE.1060003@adm.umu.se>
Message-ID: <20070409133405.18920.2039463152.divmod.quotient.9716@ohm>

On Mon, 09 Apr 2007 15:21:50 +0200, Roland Hedberg <roland.hedberg at adm.umu.se> wrote:
>Hi!
>
>I've written a system that consists of a central module, one or more
>receiver modules and one or more sender modules.
>
>Different modules might handle different protocols, and this is one of
>the reasons I choose twisted as framework.
>
>But now I've got a problem I don't know how to solve.
>
>One of the sender modules is depending on another package and that
>package opens a sleepycat database at initialization.
>
>Which is not playing nice with mktap. So, now when I use mktap I get an
>exception with the error code shown on the subject line of this mail.
>
>Is there anyway by which I can tell mktap to "forget" about the
>sleepycat database or ... ?

Two possibilities jump out at me:

  - Don't invoke the initialization code of that package in makeService,
    wait until the startService method of the service you create is called,
    and invoke it then.  This will prevent the DB from being opened until
    the application is actually started (ie, when twistd is run).

  - Don't use mktap, just use twistd: since Twisted 2.5, these two are
    roughly equivalent:

      mktap foo --bar
      twistd -f foo.tap

    vs

      twistd foo --bar

    The most significant difference being that the latter doesn't create a
    tap file initially.

Jean-Paul



From micahel at gmail.com  Mon Apr  9 10:33:26 2007
From: micahel at gmail.com (Michael Hudson)
Date: Mon, 9 Apr 2007 14:33:26 +0000 (UTC)
Subject: [Twisted-Python] Re: readline-like behavior inside Twisted (was Re:
	Re:	Synchronization techniques)
References: <20070406212849.7769.1052979193.divmod.xquotient.2642@joule.divmod.com>
	<20070408145125.18920.1518675638.divmod.quotient.9346@ohm>
Message-ID: <loom.20070409T163040-218@post.gmane.org>

Jean-Paul Calderone <exarkun <at> divmod.com> writes:

> I haven't looked at pyreadline before, although I did take a look at UNC a
> long time ago.  Taking a quick look at the code, it looks like converting
> pyreadline to be Twisted friendly may be doable. 

This isn't really a followup, but it seems worthwhile to mention that GNU
readline itself has a callback interface (rl_callback_read_char) that would be
suitable for using with Twisted.  You'd have to use ctypes or something to get
to it, but it's there.

Cheers,
mwh





From exarkun at divmod.com  Mon Apr  9 11:12:24 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 9 Apr 2007 11:12:24 -0400
Subject: [Twisted-Python] Re: readline-like behavior inside Twisted (was
	Re: Re:	Synchronization techniques)
In-Reply-To: <loom.20070409T163040-218@post.gmane.org>
Message-ID: <20070409151224.18920.1597642202.divmod.quotient.9738@ohm>

On Mon, 9 Apr 2007 14:33:26 +0000 (UTC), Michael Hudson <micahel at gmail.com> wrote:
>Jean-Paul Calderone <exarkun <at> divmod.com> writes:
>
>> I haven't looked at pyreadline before, although I did take a look at UNC a
>> long time ago.  Taking a quick look at the code, it looks like converting
>> pyreadline to be Twisted friendly may be doable.
>
>This isn't really a followup, but it seems worthwhile to mention that GNU
>readline itself has a callback interface (rl_callback_read_char) that would be
>suitable for using with Twisted.  You'd have to use ctypes or something to get
>to it, but it's there.

Good point, I'd forgotten about that API.

Jean-Paul



From glyph at divmod.com  Mon Apr  9 11:53:24 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 09 Apr 2007 15:53:24 -0000
Subject: [Twisted-Python] Cannot pickle <type 'DB'> objects
In-Reply-To: <20070409133405.18920.2039463152.divmod.quotient.9716@ohm>
References: <461A3DEE.1060003@adm.umu.se>
	<20070409133405.18920.2039463152.divmod.quotient.9716@ohm>
Message-ID: <20070409155324.7769.377391570.divmod.xquotient.2667@joule.divmod.com>

On 01:34 pm, exarkun at divmod.com wrote:
>On Mon, 09 Apr 2007 15:21:50 +0200, Roland Hedberg 
><roland.hedberg at adm.umu.se> wrote:

>>Is there anyway by which I can tell mktap to "forget" about the
>>sleepycat database or ... ?

>Two possibilities jump out at me:
>
>  - Don't invoke the initialization code of that package in makeService,
>    wait until the startService method of the service you create is 
>called,
>    and invoke it then.  This will prevent the DB from being opened 
>until
>    the application is actually started (ie, when twistd is run).

This has the added advantage of working with the --uid and --gid options 
of twistd as well.  If your objects are created as the service is 
created, they will be created (and the database opened) as root.  You 
almost always want to wait until the service actually starts up, i.e. 
until Twisted has already daemonized, already shed privileges, to 
actually open files and databases.
>  - Don't use mktap, just use twistd

There is also probably no reason to use mktap for a case like this any 
more though, and there are no tests to ensure that pickles remain 
compatible across Twisted or Python versions.  Not only are there no 
automated tests, but as far as I know nobody is still using taps as a 
method persisting configuration any more, so it is unlikely there is any 
mechanism for us to notice if pickle compatibility is broken.

In other words, you're probably better off taking both of JP's 
suggestions rather than just one.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070409/8042406b/attachment.htm 

From micahel at gmail.com  Mon Apr  9 13:47:16 2007
From: micahel at gmail.com (Michael Hudson)
Date: Mon, 9 Apr 2007 17:47:16 +0000 (UTC)
Subject: [Twisted-Python] Re: readline-like behavior inside Twisted
	(was	Re:Re:	Synchronization techniques)
References: <loom.20070409T163040-218@post.gmane.org>
	<20070409151224.18920.1597642202.divmod.quotient.9738@ohm>
Message-ID: <loom.20070409T194633-599@post.gmane.org>

Jean-Paul Calderone <exarkun <at> divmod.com> writes:

> 
> On Mon, 9 Apr 2007 14:33:26 +0000 (UTC), Michael Hudson <micahel <at>
gmail.com> wrote:
> >Jean-Paul Calderone <exarkun <at> divmod.com> writes:
> >
> >> I haven't looked at pyreadline before, although I did take a look at UNC a
> >> long time ago.  Taking a quick look at the code, it looks like converting
> >> pyreadline to be Twisted friendly may be doable.
> >
> >This isn't really a followup, but it seems worthwhile to mention that GNU
> >readline itself has a callback interface (rl_callback_read_char) that would be
> >suitable for using with Twisted.  You'd have to use ctypes or something to get
> >to it, but it's there.
> 
> Good point, I'd forgotten about that API.

Make sure you use readline 5.1 (or newer) though, otherwise your app will hang
when the user presses C-r :-)

Cheers,
mwh




From sknutti at sanz.com  Mon Apr  9 17:03:51 2007
From: sknutti at sanz.com (Scott Knutti)
Date: Mon, 09 Apr 2007 15:03:51 -0600
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
Message-ID: <461AAA37.8000306@sanz.com>

Hello,

Can anyone point me to some examples of using the TaskQueue code from 
Twisted-Goodies? 

Thanks,
Scott Knutti



From general at eepatents.com  Mon Apr  9 20:32:10 2007
From: general at eepatents.com (Ed Suominen)
Date: Mon, 09 Apr 2007 17:32:10 -0700
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <461AAA37.8000306@sanz.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<461AAA37.8000306@sanz.com>
Message-ID: <461ADB0A.30201@eepatents.com>

Scott Knutti wrote:
> Can anyone point me to some examples of using the TaskQueue code from
> Twisted-Goodies?

As its author I've used it as follows, in no particular order:

1. In sAync, to do sequential database transactions in a single thread.
See http://foss.eepatents.com/sAsync/browser/trunk/sasync/database.py

2. In DynamicSite (which serves foss.eepatents.com and some other sites)
to run Trac stuff in a single thread. This implementation does some work
to deal with occasional freezes of the Trac WSGI application. When the
queue gets too backed up, Trac is rudely forced into finishing up and
moving on. See
http://foss.eepatents.com/DynamicSite/browser/trunk/dynamicsite/wsgi.py

3. In a GUI application (not publicly released) with PB to dispatch
various commands of different priorities to a centralized server.

4. In the asynCluster sub-package of Twisted-Goodies itself to dispatch
jobs from a server to available cluster nodes. See
http://foss.eepatents.com/Twisted-Goodies/browser/trunk/twisted_goodies/asyncluster/master/jobs.py

Naturally, I would be very interested in hearing about any other
applications that are out there or being worked on. :-)

Best regards, Ed



From terry at jon.es  Mon Apr  9 21:38:51 2007
From: terry at jon.es (Terry Jones)
Date: Tue, 10 Apr 2007 03:38:51 +0200
Subject: [Twisted-Python] Trial docs?
Message-ID: <17946.60075.835931.964805@terry-jones-computer.local>

Within the last month, someone mentioned to me that Trial was one of the
better-documented components of Twisted.

I just decided to write a couple of quick unit tests for talking to a
Twisted web2 server. No problem, I thought, I'll just dig up that Trial
documentation...

  - Go to http://twistedmatrix.com/trac/ and click on Twisted Projects.
    Click on Twisted Trial.  There's nothing there, just a link to thoughts
    on future dev and a link into the tracker.

  - I notice a DOCS link at the top right. Non-obvious, but that must be
    it. But no, this takes me to the top of the Twisted documentation and I
    see no link for Trial.

  - But there's a FAQ, so I go there. There's one mention of trial, but
    it's not to do with documentation.

  - Google "twisted trial documentation". There are some one year old links
    to a page talking about how to improve the Trial documentation via
    chatting in IRC. I scan the first page of hits - none of them lead me
    back into the twisted site.

  - Back on the Twisted site I look for a search box, and there is one.
    Yay. Enter 'trial' and I get back 76+ pages of hits, the first of which
    is virtually all trac issue links, plus some mention of monkey
    patching, which doesn't sound relevant.

  - Well, I have the Twisted tree checked out, so I'll look there. Nothing.

  - Maybe there's some documentation in the tarball? Back to the Twisted
    home page, download, untar, find, nroff -man, etc. There's something,
    but just invocation options.

  - I run trial at the command line. More invocation options.


I guess we'll all agree that this could be improved.

I don't mind reading code. I wish someone would just tell me up front that
that's what I should do. Or is it? I really don't know in this case. I just
know that if there is any documentation for Trial it's pretty well hidden.

Just doing the above and now sending this mail (with the aim of improving
things for others) has taken me probably 45 minutes, on top of which my
fingers now ache. I wish I could have used all these keystrokes to do other
stuff.

I think the Trial page at http://twistedmatrix.com/trac/wiki/TwistedTrial
should be changed to say something like this:

  Documentation:

  Trial is currently undocumented.

  However, you can find some information by

    - Studying the example usage of trial in X project found in the Y
      directory of the Twisted tarball (or wherever).
    - Reading the trial manpage in the Twisted tarball, which will show you
      trial command line invocation arguments.
    - Reading the source code, which you can find in the Twisted tarball at
      X, or which you can see in the tracker at Y.

  Please feel free to contribute, etc.

I'm happy to edit the wiki if one of you will fill in the X and Y's in the
above.

Terry



From jml at mumak.net  Mon Apr  9 22:45:42 2007
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 10 Apr 2007 12:45:42 +1000
Subject: [Twisted-Python] Trial docs?
In-Reply-To: <17946.60075.835931.964805@terry-jones-computer.local>
References: <17946.60075.835931.964805@terry-jones-computer.local>
Message-ID: <d06a5cd30704091945l555b8283iedf3972b19e4873c@mail.gmail.com>

On 4/10/07, Terry Jones <terry at jon.es> wrote:
> Within the last month, someone mentioned to me that Trial was one of the
> better-documented components of Twisted.
>
> I just decided to write a couple of quick unit tests for talking to a
> Twisted web2 server. No problem, I thought, I'll just dig up that Trial
> documentation...

Hey Terry,

I'm sorry that finding Trial documentation has been such a chore for
you. I'd definitely like to make it more accessible so that Trial
itself can be more pleasant to use.

Thanks for writing such a full email too. This sort of thing really
helps me question why things are as they are, which is a good first
step to improving the documentation.

>   - Go to http://twistedmatrix.com/trac/ and click on Twisted Projects.
>     Click on Twisted Trial.  There's nothing there, just a link to thoughts
>     on future dev and a link into the tracker.

This is an unfortunate situation. Part of the issue is that Trial is a
significantly-sized, relatively independent part of Twisted Core, so
it falls into something of an organisational nether-world.

That said, I doubt the project page for Twisted Core is significantly better.

>   - I notice a DOCS link at the top right. Non-obvious, but that must be
>     it. But no, this takes me to the top of the Twisted documentation and I
>     see no link for Trial.
>

You'll notice that the "DOCS" link appears on every page, outside of
the context. This links to Twisted's documentation.

It's interesting that you didn't consider looking into Twisted's
documentation to find out more about Trial. It seems we could do a
better job at communicating Twisted's structure here.

>   - But there's a FAQ, so I go there. There's one mention of trial, but
>     it's not to do with documentation.
>

Note to self: review FAQ.

>   - Google "twisted trial documentation". There are some one year old links
>     to a page talking about how to improve the Trial documentation via
>     chatting in IRC. I scan the first page of hits - none of them lead me
>     back into the twisted site.
>
>   - Back on the Twisted site I look for a search box, and there is one.
>     Yay. Enter 'trial' and I get back 76+ pages of hits, the first of which
>     is virtually all trac issue links, plus some mention of monkey
>     patching, which doesn't sound relevant.
>

OK, now that is Trac's fault. You'll notice that the Trac search page
lets you uncheck the "Ticket" and "Changeset" boxes so that you can
just search the wiki. It's not particularly intuitive.

It's also sub-optimal that we require Twisted users to master Trac's
idiosyncrasies.

>   - Well, I have the Twisted tree checked out, so I'll look there. Nothing.
>

groff -man -Tascii doc/core/man/trial.1  | less

I'm guessing the confusion here is that you weren't expecting the
Trial docs to be under 'core'?

>   - Maybe there's some documentation in the tarball? Back to the Twisted
>     home page, download, untar, find, nroff -man, etc. There's something,
>     but just invocation options.
>
>   - I run trial at the command line. More invocation options.
>

In your travels you missed on the part of Trial's documentation that
is actually much better than most of Twisted: the API docs.

http://twistedmatrix.com/documents/current/api/twisted.trial.html

>
> I guess we'll all agree that this could be improved.
>

Indeed!

> I don't mind reading code. I wish someone would just tell me up front that
> that's what I should do. Or is it? I really don't know in this case. I just
> know that if there is any documentation for Trial it's pretty well hidden.
>

Right. I think it's a good policy to explicitly recommend reading code
if there aren't any better docs.

> Just doing the above and now sending this mail (with the aim of improving
> things for others) has taken me probably 45 minutes, on top of which my
> fingers now ache. I wish I could have used all these keystrokes to do other
> stuff.
>

Rest assured, this email is definitely valuable. So, although you may
have been able to do better stuff, you are certainly making my job
easier.

Thomas is working on a better Trial document which should solve some
of these problems. The presentation on the website is a separate, and
possibly more pressing issue, which I'll file a bug for.

In the interim, if you have any problems using Trial, you can (almost)
always contact me on IRC.

cheers,
jml



From terry at jon.es  Mon Apr  9 23:13:29 2007
From: terry at jon.es (Terry Jones)
Date: Tue, 10 Apr 2007 05:13:29 +0200
Subject: [Twisted-Python] Trial docs?
In-Reply-To: Your message at 12:45:42 on Tuesday, 10 April 2007
References: <17946.60075.835931.964805@terry-jones-computer.local>
	<d06a5cd30704091945l555b8283iedf3972b19e4873c@mail.gmail.com>
Message-ID: <17947.217.807751.302396@terry-jones-computer.local>

Hi jml

| On 4/10/07, Terry Jones <terry at jon.es> wrote:
| Thanks for writing such a full email too. This sort of thing really
| helps me question why things are as they are, which is a good first
| step to improving the documentation.

Great. I also always find it useful to have outsiders and first-timers make
comments. It's probably impossible to look with fresh eyes at things you've
spent a ton of time working on. I know I can't do it - partly through lack
of time, energy, inclination :-)

| >   - Go to http://twistedmatrix.com/trac/ and click on Twisted Projects.
| >     Click on Twisted Trial.  There's nothing there, just a link to
| >     thoughts on future dev and a link into the tracker.
| 
| This is an unfortunate situation. Part of the issue is that Trial is a
| significantly-sized, relatively independent part of Twisted Core, so
| it falls into something of an organisational nether-world.

OK, but that wiki page is your chance to say so, or say something.

| It's interesting that you didn't consider looking into Twisted's
| documentation to find out more about Trial.

>From the home page I go to http://twistedmatrix.com/trac/wiki/Documentation
and I don't see a link for Trial. Part of what's misleading here is that
there are explicit links for various projects, and Trial is listed as a
project on the page I just came from. So, a specific recommendation: add
Trial to the list of projects, and say "Trial is documented in the core
documentation" with a link.

Following your suggestion, I now click on Core Documentation. On the page I
land on, I immediately search for Trial, but there is no hit. Specific rec:
add the word Trial somewhere on this page so users and Google etc. can see
it.

But I do see a link called "Tips for writing tests for Twisted code". Is
that or is that not Trial documentation I wonder? The destination page is
howto/testing.html and at the top it does look like I've arrived at the
right place. Is that what you meant? But after a few sentences it does
degenerate into tips that are too advanced. Shouldn't someone tell me for
example what Twisted class I should subclass in making a test suite, before
telling me to leave the reactor (what reactor? thinks the newbie) as I
found it?

| >   - Back on the Twisted site I look for a search box, and there is one.
| >     Yay. Enter 'trial' and I get back 76+ pages of hits, the first of
| >     which is virtually all trac issue links, plus some mention of monkey
| >     patching, which doesn't sound relevant.
| 
| OK, now that is Trac's fault. You'll notice that the Trac search page
| lets you uncheck the "Ticket" and "Changeset" boxes so that you can
| just search the wiki. It's not particularly intuitive.

Can the default be changed to just search the wiki? Perhaps just on
searches from the main page? That looks like it would just be a matter of
dropping changeset=on and ticket=on from the URL.  I know, that's probably
a trac thing, but it might help.

| groff -man -Tascii doc/core/man/trial.1  | less

Thanks. I'm old :-)  And on my machine:

    $ file /usr/bin/nroff
    /usr/bin/nroff: Bourne shell script text executable
    $ grep Emulate /usr/bin/nroff
    # Emulate nroff with groff.

| I'm guessing the confusion here is that you weren't expecting the
| Trial docs to be under 'core'?

Yes, that's part of it (see above about seeing Trial listed as a project
but then not seeing it under the projects on the main doc page).

| http://twistedmatrix.com/documents/current/api/twisted.trial.html

So I did!  That's great, thanks. It's exactly the kind of doc I'd like to
be reading - nicely fomatted and giving confidence that it's clearly
machine generated (and therefore stands a chance of being up to date).

A link to that page would have really helped.

| Right. I think it's a good policy to explicitly recommend reading code
| if there aren't any better docs.

Me too. And the doc strings in the code are (relatively) pretty good.

| Rest assured, this email is definitely valuable. So, although you may
| have been able to do better stuff, you are certainly making my job
| easier.

And vice versa (much more of the vice versa, of course). So thanks back.

| Thomas is working on a better Trial document which should solve some
| of these problems. The presentation on the website is a separate, and
| possibly more pressing issue, which I'll file a bug for.

I'll make some interim cosmetic changes to the wiki if you like. (Where
interim has its usual meaning: will only be there for a couple of years...)

| In the interim, if you have any problems using Trial, you can (almost)
| always contact me on IRC.

OK, thanks.

Terry



From glyph at divmod.com  Tue Apr 10 00:54:43 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 10 Apr 2007 04:54:43 -0000
Subject: [Twisted-Python] Trial docs?
In-Reply-To: <17946.60075.835931.964805@terry-jones-computer.local>
References: <17946.60075.835931.964805@terry-jones-computer.local>
Message-ID: <20070410045443.7769.2069500529.divmod.xquotient.2685@joule.divmod.com>

On 01:38 am, terry at jon.es wrote:
>Within the last month, someone mentioned to me that Trial was one of 
>the
>better-documented components of Twisted.

Terry, if I was the one who committed this terrible crime against you, I 
apologize.  I hope that, if that was the case, it was simply a 
miscommunication and I had actually said something like "trial (ought to 
be) one of the better-documented components of Twisted".

The best documentation I know of for trial right now (and the only thing 
I routinely consult) is "trial --help".
>I guess we'll all agree that this could be improved.

Indeed.
>Just doing the above and now sending this mail (with the aim of 
>improving
>things for others) has taken me probably 45 minutes, on top of which my
>fingers now ache. I wish I could have used all these keystrokes to do 
>other
>stuff.

As the esteemed Mr. Lange already said, this email *was* very valuable. 
Thank you.
>I'm happy to edit the wiki if one of you will fill in the X and Y's in 
>the
>above.

What's your login name for trac?  I think someone will need to give you 
edit permission, if they haven't already.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070410/a615e01b/attachment.htm 

From terry at jon.es  Tue Apr 10 06:10:39 2007
From: terry at jon.es (Terry Jones)
Date: Tue, 10 Apr 2007 12:10:39 +0200
Subject: [Twisted-Python] Trial docs?
In-Reply-To: Your message at 04:54:43 on Tuesday, 10 April 2007
References: <17946.60075.835931.964805@terry-jones-computer.local>
	<20070410045443.7769.2069500529.divmod.xquotient.2685@joule.divmod.com>
Message-ID: <17947.25247.895953.850645@terry-jones-computer.local>

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:
glyph> On 01:38 am, terry at jon.es wrote:
>> Within the last month, someone mentioned to me that Trial was one of the
>> better-documented components of Twisted.

glyph> Terry, if I was the one who committed this terrible crime against
glyph> you, I apologize.

Nope, not you. Also I don't think the person was necessarily wrong, they
just didn't also tell me _where_ it was documented.

glyph> The best documentation I know of for trial right now (and the only
glyph> thing I routinely consult) is "trial --help".

That's good for invocation. But it doesn't tell you how to write tests :-)

glyph> What's your login name for trac?  I think someone will need to give
glyph> you edit permission, if they haven't already.

It's terrycojones. I already have edit perms though, thanks.

Terry




From andrewfr_ice at yahoo.com  Tue Apr 10 07:15:35 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Tue, 10 Apr 2007 04:15:35 -0700 (PDT)
Subject: [Twisted-Python] Question about Writing a Stackless Friendly Reactor
Message-ID: <20070410111535.40282.qmail@web34211.mail.mud.yahoo.com>

Hello :

I have been using Twisted with Stackless. I am
interested in writing a more Stackless "friendly"
reactor. I believe a stackless friendly reactor would
call stackless.schedule() whenever possible.

I notice there are different types of reactor. I have
been looking at SelectReactor and its base case,
Posixbase. It seems easy enough to modify MainLoop to
put in a stackless.schedule(). However this approach
does not seem to be the most maintainable or
effective, since I would be overriding MainLoop only
to put in one line. What is the proper Twisted
approach to doing this?

Cheers,
Andrew


       
____________________________________________________________________________________
Get your own web address.  
Have a HUGE year through Yahoo! Small Business.
http://smallbusiness.yahoo.com/domains/?p=BESTDEAL



From matt at zgroupplc.com  Tue Apr 10 08:02:06 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Tue, 10 Apr 2007 13:02:06 +0100
Subject: [Twisted-Python] Memcached
Message-ID: <F07E7130-906E-44F8-BFE8-4ED892E81B28@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi All,

I was wondering whether anyone has written a twisted protocol class /  
module for memcached? I am currently developing an application that  
makes use of memcached. I really don't like the fact that the  
memcache operations are blocking within my nice deferred environment.  
In lieu of a deferred memcache operation, would it be wise to place  
this functionality in a twisted thread?

Would anyone be interested in a twisted module for memcached or would  
the additional overhead render it useless (too slow)?

Regards,


Matt


m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGG3zByI6MkdKPngkRAvRjAKCyC/96jtFHLTu+ouw+KK9wE4OIeQCeIDsJ
wH1IgSPsRSFrX1/HXKmnWPE=
=akr3
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Tue Apr 10 08:20:11 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 10 Apr 2007 08:20:11 -0400
Subject: [Twisted-Python] Question about Writing a Stackless Friendly
	Reactor
In-Reply-To: <20070410111535.40282.qmail@web34211.mail.mud.yahoo.com>
Message-ID: <20070410122011.18920.1593477302.divmod.quotient.10034@ohm>

On Tue, 10 Apr 2007 04:15:35 -0700 (PDT), Andrew Francis <andrewfr_ice at yahoo.com> wrote:
>Hello :
>
>I have been using Twisted with Stackless. I am
>interested in writing a more Stackless "friendly"
>reactor. I believe a stackless friendly reactor would
>call stackless.schedule() whenever possible.
>
>I notice there are different types of reactor. I have
>been looking at SelectReactor and its base case,
>Posixbase. It seems easy enough to modify MainLoop to
>put in a stackless.schedule(). However this approach
>does not seem to be the most maintainable or
>effective, since I would be overriding MainLoop only
>to put in one line. What is the proper Twisted
>approach to doing this?

Please see the archives for previous discussions on this topic.

Thanks,

Jean-Paul



From exarkun at divmod.com  Tue Apr 10 08:21:29 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 10 Apr 2007 08:21:29 -0400
Subject: [Twisted-Python] Memcached
In-Reply-To: <F07E7130-906E-44F8-BFE8-4ED892E81B28@zgroupplc.com>
Message-ID: <20070410122129.18920.219140231.divmod.quotient.10035@ohm>

On Tue, 10 Apr 2007 13:02:06 +0100, Matthew Glubb <matt at zgroupplc.com> wrote:
>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>Hi All,
>
>I was wondering whether anyone has written a twisted protocol class / 
>module for memcached? I am currently developing an application that  makes 
>use of memcached. I really don't like the fact that the  memcache operations 
>are blocking within my nice deferred environment.  In lieu of a deferred 
>memcache operation, would it be wise to place  this functionality in a 
>twisted thread?
>
>Would anyone be interested in a twisted module for memcached or would  the 
>additional overhead render it useless (too slow)?
>

Some work has been done on this recently:

  http://twistedmatrix.com/trac/ticket/2506

Jean-Paul



From matt at zgroupplc.com  Tue Apr 10 08:44:55 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Tue, 10 Apr 2007 13:44:55 +0100
Subject: [Twisted-Python] Memcached
In-Reply-To: <20070410122129.18920.219140231.divmod.quotient.10035@ohm>
References: <20070410122129.18920.219140231.divmod.quotient.10035@ohm>
Message-ID: <3D0A211D-E2E1-48A6-AE6B-7511F81CFA4F@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Ah! Thanks Jean-Paul. I should RTFM ;)

On 10 Apr 2007, at 13:21, Jean-Paul Calderone wrote:

> On Tue, 10 Apr 2007 13:02:06 +0100, Matthew Glubb  
> <matt at zgroupplc.com> wrote:
>> -----BEGIN PGP SIGNED MESSAGE-----
>> Hash: SHA1
>>
>> Hi All,
>>
>> I was wondering whether anyone has written a twisted protocol  
>> class / module for memcached? I am currently developing an  
>> application that  makes use of memcached. I really don't like the  
>> fact that the  memcache operations are blocking within my nice  
>> deferred environment.  In lieu of a deferred memcache operation,  
>> would it be wise to place  this functionality in a twisted thread?
>>
>> Would anyone be interested in a twisted module for memcached or  
>> would  the additional overhead render it useless (too slow)?
>>
>
> Some work has been done on this recently:
>
>  http://twistedmatrix.com/trac/ticket/2506
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGG4bHyI6MkdKPngkRApE0AKCBWEEa+LepG5hQ1QYC9Pjm1/cXzwCfTTxJ
ymtlEJjYXbsM7brMY8IapLo=
=aFj2
-----END PGP SIGNATURE-----



From twisted-python at 2xlp.com  Tue Apr 10 19:46:14 2007
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Tue, 10 Apr 2007 19:46:14 -0400
Subject: [Twisted-Python] Memcached
In-Reply-To: <F07E7130-906E-44F8-BFE8-4ED892E81B28@zgroupplc.com>
References: <F07E7130-906E-44F8-BFE8-4ED892E81B28@zgroupplc.com>
Message-ID: <96591DE0-7B46-413D-95A3-EB63A87A17F6@2xlp.com>


On Apr 10, 2007, at 8:02 AM, Matthew Glubb wrote:
> Hi All,
>
> I was wondering whether anyone has written a twisted protocol  
> class / module for memcached? I am currently developing an  
> application that makes use of memcached. I really don't like the  
> fact that the memcache operations are blocking within my nice  
> deferred environment. In lieu of a deferred memcache operation,  
> would it be wise to place this functionality in a twisted thread?

what kind of blocking issues have you been experiencing?
memcached has never given me significant/visible issues .


// Jonathan Vanasco

| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - -
| FindMeOn.com - The cure for Multiple Web Personality Disorder
| Web Identity Management and 3D Social Networking
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - -
| RoadSound.com - Tools For Bands, Stuff For Fans
| Collaborative Online Management And Syndication Tools
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - -





From glyph at divmod.com  Wed Apr 11 00:12:01 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 11 Apr 2007 04:12:01 -0000
Subject: [Twisted-Python] Question about Writing a Stackless Friendly
	Reactor
In-Reply-To: <20070410111535.40282.qmail@web34211.mail.mud.yahoo.com>
References: <20070410111535.40282.qmail@web34211.mail.mud.yahoo.com>
Message-ID: <20070411041201.7769.1256405426.divmod.xquotient.2697@joule.divmod.com>

On 10 Apr, 11:15 am, andrewfr_ice at yahoo.com wrote:
>I have been using Twisted with Stackless. I am
>interested in writing a more Stackless "friendly"
>reactor. I believe a stackless friendly reactor would
>call stackless.schedule() whenever possible.

I disagree.  Separate reactor implementations are for different OS 
multiplexing mechanisms.  stackless.schedule() should *not* be called 
"whenever possible", but rather, whenever stackless tasks have something 
to do.
>I notice there are different types of reactor. I have
>been looking at SelectReactor and its base case,
>Posixbase. It seems easy enough to modify MainLoop to
>put in a stackless.schedule(). However this approach
>does not seem to be the most maintainable or
>effective, since I would be overriding MainLoop only
>to put in one line. What is the proper Twisted
>approach to doing this?

Don't implement a reactor :).

I recently replied to a very similar question in a different thread:

    http://article.gmane.org/gmane.comp.python.twisted/13946

What about my answer there was not clear?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070411/fcaa5181/attachment.htm 

From matusis at matusis.com  Wed Apr 11 03:51:49 2007
From: matusis at matusis.com (Alec Matusis)
Date: Wed, 11 Apr 2007 00:51:49 -0700
Subject: [Twisted-Python] epoll reactor problems
Message-ID: <022301c77c0e$436446a0$ca2cd3e0$@com>

We just switched 2 types of production servers to epoll reactor( Twisted
2.5) from poll reactor (Twisted 2.2).

The CPU%% utilization of the first type of server that does not do much
except occasionally pushing messages to about 5000 clients dropped from
about 40% to 8%, which is very good.

 

The second type of server is more complicated. The CPU utilization of that
server (as measured by top) went down from 40% to about 15% after switching
to epoll.

Here is the problem: after about 10min of running that server with CPU%%
staying at about 15%, the CPU suddenly jumps to 99.9% for that process and
just stays there. We reproduced this several times. The server remains
responsive, even when top shows 99.9% CPU. (Which is very different from
99.9% CPU from real load when we used poll- we are intimately familiar with
the performance in that regime unfortunately.)

The kernel is 2.6.11.4-21.12-smp

 

Can anybody help with this 99.9% CPU epoll problem?

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070411/98bd1b0c/attachment.htm 

From matt at zgroupplc.com  Wed Apr 11 03:53:39 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Wed, 11 Apr 2007 08:53:39 +0100
Subject: [Twisted-Python] Memcached
In-Reply-To: <96591DE0-7B46-413D-95A3-EB63A87A17F6@2xlp.com>
References: <F07E7130-906E-44F8-BFE8-4ED892E81B28@zgroupplc.com>
	<96591DE0-7B46-413D-95A3-EB63A87A17F6@2xlp.com>
Message-ID: <4DE543DC-CBE0-45B0-B9F4-69F7B8FE7C70@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Jonathan,

On 11 Apr 2007, at 00:46, Jonathan Vanasco wrote:

>> the memcache operations are blocking within my nice deferred  
>> environment. In lieu of a deferred memcache operation, would it be  
>> wise to place this functionality in a twisted thread?
>
> what kind of blocking issues have you been experiencing?
> memcached has never given me significant/visible issues .

Its not that I have experienced any blocking issues. Its a conceptual  
worry more than anything. I know that memcache is fast but, in  
essence, the standard memcached client library still presents a  
blocking operation within my nice deferred environment. Call me  
pedantic but I'd like to maintain conceptual rigour. If you are  
saying that for you it hasn't been a problem then I will happily take  
your word for it.

Thanks for your reply,

Matt



m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGHJQGyI6MkdKPngkRAjeXAJ9XjOdz5W2Y5ungZG1j7KnA7NnCswCgg2Xk
J+x/L1R2Uwv8/EK83K3tv6A=
=wOrG
-----END PGP SIGNATURE-----



From warner at lothar.com  Wed Apr 11 04:11:25 2007
From: warner at lothar.com (Brian Warner)
Date: Wed, 11 Apr 2007 01:11:25 -0700
Subject: [Twisted-Python] Foolscap-0.1.1 released
In-Reply-To: <94B5BFD3-F733-4DF1-B1E9-648C44D655A0@gravina.com> (Robert
	Gravina's message of "Wed, 4 Apr 2007 16:40:52 +0900")
References: <20070403.213612.74734554.warner@lothar.com>
	<94B5BFD3-F733-4DF1-B1E9-648C44D655A0@gravina.com>
Message-ID: <876483baaa.fsf@lothar.com>

Robert Gravina <robert at gravina.com> writes:

> Wow, I had a read through the docs you made based on oldpb (http://
> twistedmatrix.com/~warner/Foolscap/copyable.html and http://
> twistedmatrix.com/~warner/Foolscap/using-pb.html) and think I finally
> understand what Foolscap is about :)

Thanks!

> - I like how you've simplified Referenceable/Copyable/Cacheable to just the
> one type - Referenceable - while making the whole thing more  powerful in the
> process.

Well, to be honest, this is more a result of not having gotten around to
implementing Cacheable (or really finishing work on Copyable) than an
explicit design decision. But yes, the fundamental operation is the
Slicer/Unslicer pair, and Referenceables are just the pass-by-reference form
of this (and Copyables are just the pass-by-copy form). I suspect that
Cacheable is best implemented with something fairly application-specific, and
so I'm inclined to gather some use cases before providing explicit support
within Foolscap (and possibly corralling people into a non-ideal solution).

> - Being able to pass RemoteReferences to a third party - very cool!

This is a big new feature, and makes things much more transparent. The actual
implementation is going to change at some point (to provide some better
ordering guarantees, and reduce the amount of traffic on the wire), but the
user-visible API will remain the same: just pass your object through a
callRemote() somehow.

> - Serialisers are a great idea! I often want to send classes down the wire
> without having to subclass them. Also, many python types can be  serialised
> now (e.g. datetime - I don't think these work with PB, so  I have to convert
> them to strings and back again... I do this with  Decimals too.... yuck!)

Yeah, the ability to register an ISlicer adapter is what makes this powerful.
You can register an adapter for some arbitrary 3rd-party class and it will
get used to serialize the instances, no matter how buried they might be
inside the object graph. I'm still looking for common patterns and useful
refactorings here, though. If you have examples of ways that this is helpful,
please feel free to post them. For example, I'm not sure if the helper
classes for Copyable are actually all that helpful, because I haven't yet hit
a personal need to do pass-by-copy with anything larger than a dict.

> -  You can write a  Slicer/Unslicer pair to get an object that is copied by
> value the first time it sent and then copied by reference  all later times. I
> *really* would like to be able to do that.

The ISlicer interface should be powerful enough to do that, although I should
mention that the definition of "first time" is a bit hazy. Look at
foolscap.referenceable.ReferenceableSlicer.sliceBody() for an example of how
it detects "first time" versus later times. There is a network optimization
that we could make if we didn't need to make this distinction (it would mean
the 'decref' message wouldn't need a response), but since I want to send
RemoteInterface names on that first time and not thereafter, I'm inclined to
retain the distinction.

The biggest thing I want to figure out how to add is an object that's
serialized somewhere in-between Referenceable and Copyable. My use-case is a
little music-player client/server app I wrote: the server has a list of Song
objects which it can give to the client for display to (and selection by) the
user, and the client sends back the Song that it wants to add to the
playlist. Each Song has a set of strings describing the artist name, album
name, song title, etc. For the purpose of referencing which song to play, I
want Song to be Referenceable. For the purpose of carrying those strings
along with the Song (so the client can display a list of song titles), I want
it to be Copyable. Ideally, the first time the Song was sent over the wire,
it would be serialized as a connection-local ID (aka 'clid') plus a set of
immutable attributes. The client-side SongCopy should have attributes that
can be read, and when it gets sent back to the server in a playlist, it
should be serialized with just the clid.

I figure this might be a useful enough pattern to warrant a base class or
some kind of support code within Foolscap (maybe a CopyableAndReferenceable
class?), but I haven't yet figured out how it ought to be implemented.

> Other parts of Foolscap I've yet to understand, but I just wanted to say I
> like where PB is heading.

Thanks! There's a lot of code that I've implemented and started to use, but
have not yet started to document (like eventual-send, or much of the
schema/constraint mechanics). And there more that I've written but haven't
figured out how to use yet (like promises), and even more that's still in the
design stages (like remote promises, promise-pipelining, and automatic
keepalives). It's been very educational thus far, and promises (no pun
intended) to be even more interesting in the next couple months.

cheers,
 -Brian



From matusis at matusis.com  Wed Apr 11 04:15:08 2007
From: matusis at matusis.com (Alec Matusis)
Date: Wed, 11 Apr 2007 01:15:08 -0700
Subject: [Twisted-Python] Re: epoll reactor problems
Message-ID: <023801c77c11$853a7ec0$8faf7c40$@com>

PS. One more piece of data: we just switched that server back to poll, still
on Twisted 2.5. The CPU is at 30-45% stable, with exactly the same usage. So
this is either caused by the epoll() itself, or by the epoll reactor in
twisted.

From: Alec Matusis [mailto:matusis at matusis.com] 
Sent: Wednesday, April 11, 2007 12:52 AM
To: 'Twisted general discussion'
Subject: epoll reactor problems

We just switched 2 types of production servers to epoll reactor( Twisted
2.5) from poll reactor (Twisted 2.2).
The CPU%% utilization of the first type of server that does not do much
except occasionally pushing messages to about 5000 clients dropped from
about 40% to 8%, which is very good.

The second type of server is more complicated. The CPU utilization of that
server (as measured by top) went down from 40% to about 15% after switching
to epoll.
Here is the problem: after about 10min of running that server with CPU%%
staying at about 15%, the CPU suddenly jumps to 99.9% for that process and
just stays there. We reproduced this several times. The server remains
responsive, even when top shows 99.9% CPU. (Which is very different from
99.9% CPU from real load when we used poll- we are intimately familiar with
the performance in that regime unfortunately.)
The kernel is 2.6.11.4-21.12-smp

Can anybody help with this 99.9% CPU epoll problem?






From therve at free.fr  Wed Apr 11 04:24:58 2007
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Wed, 11 Apr 2007 10:24:58 +0200
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <022301c77c0e$436446a0$ca2cd3e0$@com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
Message-ID: <20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>

Quoting Alec Matusis <matusis at matusis.com>:

> We just switched 2 types of production servers to epoll reactor( Twisted
> 2.5) from poll reactor (Twisted 2.2).
>
> The CPU%% utilization of the first type of server that does not do much
> except occasionally pushing messages to about 5000 clients dropped from
> about 40% to 8%, which is very good.

That's great.

> The second type of server is more complicated. The CPU utilization of that
> server (as measured by top) went down from 40% to about 15% after switching
> to epoll.
>
> Here is the problem: after about 10min of running that server with CPU%%
> staying at about 15%, the CPU suddenly jumps to 99.9% for that process and
> just stays there. We reproduced this several times. The server remains
> responsive, even when top shows 99.9% CPU. (Which is very different from
> 99.9% CPU from real load when we used poll- we are intimately familiar with
> the performance in that regime unfortunately.)
>
> The kernel is 2.6.11.4-21.12-smp
>
> Can anybody help with this 99.9% CPU epoll problem?

We would probably need more information. What's your version of python? 
Can you
provide a reproductible example? Did you try to do a strace on your running
server to see what's going on?

As your load was already 99 before using epoll, can it be an application
problem?

-- 
Thomas





From matusis at matusis.com  Wed Apr 11 05:03:06 2007
From: matusis at matusis.com (Alec Matusis)
Date: Wed, 11 Apr 2007 02:03:06 -0700
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
Message-ID: <025001c77c18$3906e140$ab14a3c0$@com>

> We would probably need more information. What's your version of python?

We are using Python 2.4.1

> Can you
> provide a reproductible example? 

It's hard to provide a reproducible example: we observe this problem only on
the live servers. So I do not know how to simplify the code (it has 40000+
lines) such that the problem still remains, since we would have to try it on
real users...

Did you try to do a strace on your
> running
> server to see what's going on?

I did run strace- it made the server unresponsive, so it had to be
restarted. Here is the output from the problematic server at 99% CPU:
alecm at web10 ~> strace -p 5315
Process 5315 attached - interrupt to quit
--- SIGSTOP (Stopped (signal)) @ 0 (0) ---
--- SIGSTOP (Stopped (signal)) @ 0 (0) ---
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023, u64=12304606485815493631}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 30) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423, u64=12304606485815493031}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 29) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023, u64=12304606485815493631}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 28) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLIN, {u32=201, u64=12304606485815492809}}, {0, {u32=32,
u64=206158430240}}, {EPOLLWRNORM|EPOLLONESHOT|EPOLLET|0x3fffa820,
{u32=32767, u64=23749657318424575}}, {0, {u32=5315, u64=5315}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0, u64=0}},
{0, {u32=4294945068, u64=140737488333100}}}, 1434, 27) = 6
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
recvfrom(201, "getmore:20\r\n\0", 65536, 0, NULL, NULL) = 13
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0xb9d030, FUTEX_WAKE, 1)          = 0
futex(0x8a3350, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023, u64=12304606485815493631}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 26) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423, u64=12304606485815493031}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 25) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023, u64=12304606485815493631}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 24) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423, u64=12304606485815493031}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 23) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023, u64=12304606485815493631}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 22) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423, u64=12304606485815493031}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 22) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023, u64=12304606485815493631}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 21) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423, u64=12304606485815493031}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 20) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0

 Interestingly, strace on another type of server, that runs only at 9% CPU
does not crash it. Here is that strace for comparison: 

alecm at web10 ~> strace -p 4131
Process 4131 attached - interrupt to quit
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLIN, {u32=1740, u64=12304606485815494348}}}, 1728, 26) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
recvfrom(1740, "\r\n", 65536, 0, NULL, NULL) = 2
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1740, {EPOLLIN|EPOLLOUT, {u32=1740,
u64=12304606485815494348}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLOUT, {u32=1740, u64=12304606485815494348}}}, 1728, 1) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
sendto(1740, "\r\n\0", 3, 0, NULL, 0)   = 3
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1740, {EPOLLIN, {u32=1740,
u64=12304606485815494348}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {}, 1728, 0)              = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {}, 1728, 0)              = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {}, 1728, 0)              = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLIN, {u32=1734, u64=12304606485815494342}}}, 1728, 92) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
recvfrom(1734, "\r\n", 65536, 0, NULL, NULL) = 2
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1734, {EPOLLIN|EPOLLOUT, {u32=1734,
u64=12304606485815494342}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLOUT, {u32=1734, u64=12304606485815494342}}}, 1728, 69)
= 1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
sendto(1734, "\r\n\0", 3, 0, NULL, 0)   = 3
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1734, {EPOLLIN, {u32=1734,
u64=12304606485815494342}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLIN, {u32=1680, u64=12304606485815494288}}}, 1728, 68) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
recvfrom(1680, "\r\n", 65536, 0, NULL, NULL) = 2
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1680, {EPOLLIN|EPOLLOUT, {u32=1680,
u64=12304606485815494288}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLOUT, {u32=1680, u64=12304606485815494288}}}, 1728, 30)
= 1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
sendto(1680, "\r\n\0", 3, 0, NULL, 0)   = 3
epoll_ctl(4, EPOLL_CTL_MOD, 1680, {EPOLLIN, {u32=1680,
u64=12304606485815494288}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLIN, {u32=1748, u64=12304606485815494356}}}, 1728, 29) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
recvfrom(1748, "\r\n", 65536, 0, NULL, NULL) = 2
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1748, {EPOLLIN|EPOLLOUT, {u32=1748,
u64=12304606485815494356}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLOUT, {u32=1748, u64=12304606485815494356}}}, 1728, 25)
= 1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
sendto(1748, "\r\n\0", 3, 0, NULL, 0)   = 3
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1748, {EPOLLIN, {u32=1748,
u64=12304606485815494356}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLIN, {u32=1573, u64=12304606485815494181}}}, 1728, 24) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
recvfrom(1573, "\r\n", 65536, 0, NULL, NULL) = 2
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1573, {EPOLLIN|EPOLLOUT, {u32=1573,
u64=12304606485815494181}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLOUT, {u32=1573, u64=12304606485815494181}}}, 1728, 8) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
sendto(1573, "\r\n\0", 3, 0, NULL, 0)   = 3
epoll_ctl(4, EPOLL_CTL_MOD, 1573, {EPOLLIN, {u32=1573,
u64=12304606485815494181}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLIN, {u32=1681, u64=12304606485815494289}}}, 1728, 7) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
recvfrom(1681, "\r\n", 65536, 0, NULL, NULL) = 2
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1681, {EPOLLIN|EPOLLOUT, {u32=1681,
u64=12304606485815494289}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLOUT, {u32=1681, u64=12304606485815494289}}}, 1728, 2) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
sendto(1681, "\r\n\0", 3, 0, NULL, 0)   = 3
epoll_ctl(4, EPOLL_CTL_MOD, 1681, {EPOLLIN, {u32=1681,
u64=12304606485815494289}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {}, 1728, 1)              = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0

> As your load was already 99 before using epoll, can it be an
> application
> problem?

Our load with poll reaches 99% only during the daytime. We did all this at
night, when the load is only 30-40% with poll. Indeed, after we reverted
back to poll, the load went back to 35% and will remain there until the
morning.

It looked to me like a runaway process: as soon as the load went over ~25%
on the problematic server, it continued to rise till it reached 99.9% within
less than 1 min.


> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Thomas Herv?
> Sent: Wednesday, April 11, 2007 1:25 AM
> To: twisted-python at twistedmatrix.com
> Subject: Re: [Twisted-Python] epoll reactor problems
> 
> Quoting Alec Matusis <matusis at matusis.com>:
> 
> > We just switched 2 types of production servers to epoll reactor(
> Twisted
> > 2.5) from poll reactor (Twisted 2.2).
> >
> > The CPU%% utilization of the first type of server that does not do
> much
> > except occasionally pushing messages to about 5000 clients dropped
> from
> > about 40% to 8%, which is very good.
> 
> That's great.
> 
> > The second type of server is more complicated. The CPU utilization of
> that
> > server (as measured by top) went down from 40% to about 15% after
> switching
> > to epoll.
> >
> > Here is the problem: after about 10min of running that server with
> CPU%%
> > staying at about 15%, the CPU suddenly jumps to 99.9% for that
> process and
> > just stays there. We reproduced this several times. The server
> remains
> > responsive, even when top shows 99.9% CPU. (Which is very different
> from
> > 99.9% CPU from real load when we used poll- we are intimately
> familiar with
> > the performance in that regime unfortunately.)
> >
> > The kernel is 2.6.11.4-21.12-smp
> >
> > Can anybody help with this 99.9% CPU epoll problem?
> 
> We would probably need more information. What's your version of python?
> Can you
> provide a reproductible example? Did you try to do a strace on your
> running
> server to see what's going on?
> 
> As your load was already 99 before using epoll, can it be an
> application
> problem?
> 
> --
> Thomas
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From therve at free.fr  Wed Apr 11 05:42:59 2007
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Wed, 11 Apr 2007 11:42:59 +0200
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <025001c77c18$3906e140$ab14a3c0$@com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
	<025001c77c18$3906e140$ab14a3c0$@com>
Message-ID: <20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>

Quoting Alec Matusis <matusis at matusis.com>:

>> We would probably need more information. What's your version of python?
>
> We are using Python 2.4.1

That's old (debian stable ? :)). I don't say that'll solve your 
problem, but you
could try with 2.4.4 (warning, not 2.4.3).

>> Can you
>> provide a reproductible example?
>
> It's hard to provide a reproducible example: we observe this problem only on
> the live servers. So I do not know how to simplify the code (it has 40000+
> lines) such that the problem still remains, since we would have to try it on
> real users...

OK...

> Did you try to do a strace on your
>> running
>> server to see what's going on?
>
> I did run strace- it made the server unresponsive, so it had to be
> restarted. Here is the output from the problematic server at 99% CPU:

> epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023, u64=12304606485815493631}},
> {EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
> POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
> {EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
> u64=22827751178240}}, {0, {u32=0, u64=0}},
> {EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
> u64=18097643565645823}}}, 1434, 30) = 5

This part is highly suspect. The flags on the fd should not reach these 
values.

What's the global state of the process? Memory, number of opened fd ?

-- 
Thomas





From ross at burtonini.com  Wed Apr 11 05:42:47 2007
From: ross at burtonini.com (Ross Burton)
Date: Wed, 11 Apr 2007 10:42:47 +0100
Subject: [Twisted-Python] Wrapping functions that return deferreds
Message-ID: <1176284567.6121.8.camel@blackadder>

Hi,

I have a library that has a call() method, which returns a Deferred.  My
application used to just use .addCallback() but obviously that doesn't
have any error handling.  I then switched to .addCallbacks() so that I
could call a common error handler (to pop up a dialog) but that got
tedious to add to every invocation so I thought I'd be cunning and wrap
the call() method.

def wrap_deferred (func):
    def wrapped(*args, **kwargs):
        d = func (*args, **kwargs)
        d.addErrback (handle_twisted_error)
        return d
    return wrapped

# flickr is the object, call is the method I'm overriding
flickr.call = wrap_deferred (flickr.call)

# Then later in my app
flickr.call(foo).addCallback(handleFoo)

However, this doesn't work: I get the standard unhandled error in
deferred handling.  Can anyone spot the mistake I'm making?

Thanks,
Ross
-- 
Ross Burton                                 mail: ross at burtonini.com
                                          jabber: ross at burtonini.com
                                     www: http://www.burtonini.com./
 PGP Fingerprint: 1A21 F5B0 D8D0 CFE3 81D4 E25A 2D09 E447 D0B4 33DF






From antoine.pitrou at wengo.com  Wed Apr 11 06:05:37 2007
From: antoine.pitrou at wengo.com (Antoine Pitrou)
Date: Wed, 11 Apr 2007 12:05:37 +0200
Subject: [Twisted-Python] Wrapping functions that return deferreds
In-Reply-To: <1176284567.6121.8.camel@blackadder>
References: <1176284567.6121.8.camel@blackadder>
Message-ID: <1176285937.6818.9.camel@antoine-ubuntu>


Le mercredi 11 avril 2007 ? 10:42 +0100, Ross Burton a ?crit :
> def wrap_deferred (func):
>     def wrapped(*args, **kwargs):
>         d = func (*args, **kwargs)
>         d.addErrback (handle_twisted_error)
>         return d
>     return wrapped
> 
> # flickr is the object, call is the method I'm overriding
> flickr.call = wrap_deferred (flickr.call)
> 
> # Then later in my app
> flickr.call(foo).addCallback(handleFoo)

Since you add the errback before adding the callback, errors happening
in handleFoo will not get caught by the errback.






From matusis at matusis.com  Wed Apr 11 06:15:52 2007
From: matusis at matusis.com (Alec Matusis)
Date: Wed, 11 Apr 2007 03:15:52 -0700
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>	<025001c77c18$3906e140$ab14a3c0$@com>
	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
Message-ID: <026a01c77c22$63141020$293c3060$@com>

> That's old (debian stable ? :)). I don't say that'll solve your
> problem, but you
> could try with 2.4.4 (warning, not 2.4.3).

It's SuSE stable ;-) Our stuff on that machine is pretty convoluted now, so
we will probably have a chance to test with 2.4.4 only in a week, when we
add a brand new server with 2.4.4.

> {EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRB
> AND|E
> > POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
> > {EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
> > u64=22827751178240}}, {0, {u32=0, u64=0}},
> > {EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820,
> {u32=32767,
> > u64=18097643565645823}}}, 1434, 30) = 5
> 
> This part is highly suspect. The flags on the fd should not reach these
> values.

I noticed a difference between this from the 99.9% CPU server:

epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423, u64=12304606485815493031}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1432, 68) = 5

and this from a normal server running at 5% CPU:

epoll_wait(4, {{EPOLLIN, {u32=1769, u64=12304606485815494377}}, {0,
{u32=4294944684, u64=140737488332716}}}, 1728, 17) = 2

What does this mean?

> What's the global state of the process? Memory, number of opened fd ?

We immediately reverted to poll, so I do not have it in front of me. The RSS
size was 45MB, and the number of open fd I do not know: it should have been
about 1500, but I did not check.

I can do another test run with epoll in about 20hrs, since I do not want to
upset users too much. If you have some specific data I should get from the
test run, please let me know now.

Thanks
Alec
 


> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Thomas Herv?
> Sent: Wednesday, April 11, 2007 2:43 AM
> To: 'Twisted general discussion'
> Subject: RE: [Twisted-Python] epoll reactor problems
> 
> Quoting Alec Matusis <matusis at matusis.com>:
> 
> >> We would probably need more information. What's your version of
> python?
> >
> > We are using Python 2.4.1
> 
> That's old (debian stable ? :)). I don't say that'll solve your
> problem, but you
> could try with 2.4.4 (warning, not 2.4.3).
> 
> >> Can you
> >> provide a reproductible example?
> >
> > It's hard to provide a reproducible example: we observe this problem
> only on
> > the live servers. So I do not know how to simplify the code (it has
> 40000+
> > lines) such that the problem still remains, since we would have to
> try it on
> > real users...
> 
> OK...
> 
> > Did you try to do a strace on your
> >> running
> >> server to see what's going on?
> >
> > I did run strace- it made the server unresponsive, so it had to be
> > restarted. Here is the output from the problematic server at 99% CPU:
> 
> > epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023,
> u64=12304606485815493631}},
> >
> {EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRB
> AND|E
> > POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
> > {EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
> > u64=22827751178240}}, {0, {u32=0, u64=0}},
> > {EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820,
> {u32=32767,
> > u64=18097643565645823}}}, 1434, 30) = 5
> 
> This part is highly suspect. The flags on the fd should not reach these
> values.
> 
> What's the global state of the process? Memory, number of opened fd ?
> 
> --
> Thomas
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From therve at free.fr  Wed Apr 11 07:47:11 2007
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Wed, 11 Apr 2007 13:47:11 +0200
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <026a01c77c22$63141020$293c3060$@com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
	<025001c77c18$3906e140$ab14a3c0$@com>
	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
	<026a01c77c22$63141020$293c3060$@com>
Message-ID: <20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>

Quoting Alec Matusis <matusis at matusis.com>:

>> That's old (debian stable ? :)). I don't say that'll solve your
>> problem, but you
>> could try with 2.4.4 (warning, not 2.4.3).
>
> It's SuSE stable ;-) Our stuff on that machine is pretty convoluted now, so
> we will probably have a chance to test with 2.4.4 only in a week, when we
> add a brand new server with 2.4.4.

OK. That is just another thing to try, I don't see obvious reasons why 
it could
work better on 2.4.4, but...

> I noticed a difference between this from the 99.9% CPU server:
>
> epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423, u64=12304606485815493031}},
> {EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
> POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
> {EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
> u64=22827751178240}}, {0, {u32=0, u64=0}},
> {EPOLLOUT|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
> u64=18097643565645823}}}, 1432, 68) = 5
>
> and this from a normal server running at 5% CPU:
>
> epoll_wait(4, {{EPOLLIN, {u32=1769, u64=12304606485815494377}}, {0,
> {u32=4294944684, u64=140737488332716}}}, 1728, 17) = 2
>
> What does this mean?

The flags set on your sockets are generally EPOLLIN or EPOLLOUT: data 
to read or
available for write. I don't know much about the other flags. EPOLLERR 
is set if
the fd has been closed for example. EPOLLET is *highly* suspect, because it
should only be there if set in the user code. The documentation of other flags
is really terse...


>> What's the global state of the process? Memory, number of opened fd ?
>
> We immediately reverted to poll, so I do not have it in front of me. The RSS
> size was 45MB, and the number of open fd I do not know: it should have been
> about 1500, but I did not check.

Hum... it may come from running out of file descriptors, so you'd better check
your settings for this.

> I can do another test run with epoll in about 20hrs, since I do not want to
> upset users too much.

Of course :).

> If you have some specific data I should get from the
> test run, please let me know now.

Every information would be useful. The most useful information would be 
to know
when it begins to act strangely, and if there is something that happend 
at this
moment. Otherwise, number of fds, memory, netstat output, strace output...

-- 
Thomas





From andrewfr_ice at yahoo.com  Wed Apr 11 08:56:57 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Wed, 11 Apr 2007 05:56:57 -0700 (PDT)
Subject: [Twisted-Python] Question about Writing a Stackless Friendly
	Reactor
In-Reply-To: <E1HbYko-0004OB-02@pyramid.twistedmatrix.com>
Message-ID: <909658.95506.qm@web34207.mail.mud.yahoo.com>

Hello Glyph:

>I disagree.  Separate reactor implementations are for
>different OS multiplexing mechanisms.
>stackless.schedule() should *not* be called 
>"whenever possible", but rather, whenever stackless
>tasks have something to do.

To the best of my understanding, if one is using
Stackless cooperative scheduling, a tasklet should
yield, that is, call schedule() when it is finished
doing work. Otherwise, other tasklets that could run,
will not get an opportunity.

In a Stackless application, the reactor is running in
a tasklet. Leaving aside the issue of channels, if the
reactor does not call schedule(), other tasklets will
not run. 

For most applications, the Twisted Reactor blocking
the application is not an issue since the tasklets
have nothing to do if they do not have input  In the
case of my application, the blocking is an issue...

That said, we can write simple programmes to
illustrate this (or fix my first example). For
instance, I illustrate the aforementioned on the
Stackless Google code page.

http://code.google.com/p/stacklessexamples/wiki/StacklessTwisted

In the first example, the tick tasklet will print only
after the request handler has received input. In the
second threaded example, the tick tasklet will start
printing immediately. 

I am looking for ways of getting the behaviour of the
second example without using threads (or Twisted tasks
that make schedule() calls)

>Don't implement a reactor :).

I think subclassing SelectorReactor may give me much
of what I want. I suspect this is an unTwisted way of
doing things. I am still experimenting with
approaches.

>I recently replied to a very similar question in a
>different thread:

>http://article.gmane.org/gmane.comp.python.twisted/13946

>What about my answer there was not clear?

I don't agree with a part of the premise. That aside,
I tried using reactor.callLater(). It didn't help.
Perhaps I am using it wrong. 

Cheers,
Andrew




       
____________________________________________________________________________________
Need Mail bonding?
Go to the Yahoo! Mail Q&A for great tips from Yahoo! Answers users.
http://answers.yahoo.com/dir/?link=list&sid=396546091



From terry at jon.es  Wed Apr 11 09:37:36 2007
From: terry at jon.es (Terry Jones)
Date: Wed, 11 Apr 2007 15:37:36 +0200
Subject: [Twisted-Python] Trial docs?
In-Reply-To: Your message at 04:54:43 on Tuesday, 10 April 2007
References: <17946.60075.835931.964805@terry-jones-computer.local>
	<20070410045443.7769.2069500529.divmod.xquotient.2685@joule.divmod.com>
Message-ID: <17948.58528.554987.793114@terry-jones-computer.local>

| What's your login name for trac?  I think someone will need to give you
| edit permission, if they haven't already.

Hi Glyph.

I just went to add a few things to the top-level Trial page and see that I
do need edit perms. I was mistaken - I've only changed stuff over at
divmod.org.  It's terrycojones.

Terry



From ross at burtonini.com  Wed Apr 11 09:35:10 2007
From: ross at burtonini.com (Ross Burton)
Date: Wed, 11 Apr 2007 14:35:10 +0100
Subject: [Twisted-Python] Re: Wrapping functions that return deferreds
In-Reply-To: <1176285937.6818.9.camel@antoine-ubuntu>
References: <1176284567.6121.8.camel@blackadder>
	<1176285937.6818.9.camel@antoine-ubuntu>
Message-ID: <1176298510.6121.24.camel@blackadder>

On Wed, 2007-04-11 at 12:05 +0200, Antoine Pitrou wrote:
> Le mercredi 11 avril 2007 ? 10:42 +0100, Ross Burton a ?crit :
> > def wrap_deferred (func):
> >     def wrapped(*args, **kwargs):
> >         d = func (*args, **kwargs)
> >         d.addErrback (handle_twisted_error)
> >         return d
> >     return wrapped
> > 
> > # flickr is the object, call is the method I'm overriding
> > flickr.call = wrap_deferred (flickr.call)
> > 
> > # Then later in my app
> > flickr.call(foo).addCallback(handleFoo)
> 
> Since you add the errback before adding the callback, errors happening
> in handleFoo will not get caught by the errback.

That is fine -- handleFoo doesn't throw any errors.  The deferred
returned by the original call() is calling errBack().

Ross
-- 
Ross Burton                                 mail: ross at burtonini.com
                                          jabber: ross at burtonini.com
                                     www: http://www.burtonini.com./
 PGP Fingerprint: 1A21 F5B0 D8D0 CFE3 81D4 E25A 2D09 E447 D0B4 33DF






From iacovou at gmail.com  Wed Apr 11 10:39:54 2007
From: iacovou at gmail.com (kgi)
Date: Wed, 11 Apr 2007 17:39:54 +0300
Subject: [Twisted-Python] Foolscap-0.1.1 released
In-Reply-To: <20070403.213612.74734554.warner@lothar.com>
References: <20070403.213612.74734554.warner@lothar.com>
Message-ID: <200704111739.54508.iacovou@gmail.com>

On Wednesday 04 April 2007 07:36, Brian Warner wrote:
> I've just released Foolscap-0.1.1, the next-generation-of-PB RPC library,

Hi Brian,

Thanks for the latest release; Foolscap is turning out to be very powerful and 
pleasant to use. I appreciate all your work.

I have two questions.

1. I'm trying to create an UnauthenticatedTub that listens on a 
system-assigned port (that is, on "tcp:0"). (I do this because I pass the 
underlying Referenceable to a remote server, and the random port is just a 
convenience to assist in debugging).

Combining the example in the documentation and the comments in foolscap/pb.py 
(particularly the Listener class) implies that something like this might be 
possible:

class MyServer ( Referenceable ):
    def remote_Foo ( self, blah ):
        return blah

myserver = MyServer()
tub = UnauthenticatedTub()
l = tub.listenOn("tcp:0")
tub.setLocation("localhost:%d" % l.getPortnum() )
url = tub.registerReference(myserver, "my-service")
print "the object is available at:", url

tub.startService()
reactor.run()

However, when code like this runs, it falls foul of the "assert 
self.s.running" at pb.py:73 (in getPortnum()).

This seems to imply that the reactor needs to be running before we can 
actually assign a port, so we can't call setLocation() or registerReference() 
until this is done. However, I can't see where I would hang my callback to 
perform the remained of the setup once the reactor had started.

2. I sent an email a while back about a possible bug I found; the archived 
version is here:

  http://twistedmatrix.com/pipermail/twisted-python/2007-March/014914.html

The behaviour I describe is still present in SVN, so I run against a patched 
install which seems to cure the problem, although I'm not claiming that it's 
The Right Way to solve it.

Cheers,

Ricky



From radix at twistedmatrix.com  Wed Apr 11 10:46:23 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 11 Apr 2007 10:46:23 -0400
Subject: [Twisted-Python] Trial docs?
In-Reply-To: <17948.58528.554987.793114@terry-jones-computer.local>
References: <17946.60075.835931.964805@terry-jones-computer.local>
	<20070410045443.7769.2069500529.divmod.xquotient.2685@joule.divmod.com>
	<17948.58528.554987.793114@terry-jones-computer.local>
Message-ID: <60ed19d40704110746j187f4bf9ma19039403ed27afc@mail.gmail.com>

On 4/11/07, Terry Jones <terry at jon.es> wrote:
> | What's your login name for trac?  I think someone will need to give you
> | edit permission, if they haven't already.
>
> Hi Glyph.
>
> I just went to add a few things to the top-level Trial page and see that I
> do need edit perms. I was mistaken - I've only changed stuff over at
> divmod.org.  It's terrycojones.

Added.


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From itamar at itamarst.org  Wed Apr 11 10:54:20 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 11 Apr 2007 10:54:20 -0400
Subject: [Twisted-Python] Foolscap-0.1.1 released
In-Reply-To: <200704111739.54508.iacovou@gmail.com>
References: <20070403.213612.74734554.warner@lothar.com>
	<200704111739.54508.iacovou@gmail.com>
Message-ID: <1176303260.25557.0.camel@localhost.localdomain>

On Wed, 2007-04-11 at 17:39 +0300, kgi wrote:

> 2. I sent an email a while back about a possible bug I found; the archived 
> version is here:

Please add bugs to the issue tracker on our website, so they don't get
lost.




From twisted-python at 2xlp.com  Wed Apr 11 13:12:31 2007
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 11 Apr 2007 13:12:31 -0400
Subject: [Twisted-Python] Threadpool analysis?
Message-ID: <DAB07213-8B3C-40C9-BDEC-617ADC00236B@2xlp.com>


My threadpool on a webspider keeps locking up.  I've been using  
manhole and sys._current_frames to try and figure out whats going  
wrong -- and i've fixed a few issues.

I'm wondering though if anyone has developed some sort of threadpool  
analysis plugin -- something that monitors when threads check in/ out  
- maybe store stuff using rrd.

Also I'm wondering if there's a good /idiomatic way to mark/monitor  
threads -- I want to monitor certain stuff that I call defer to  
thread on,  I don't really care about other  stuff in the threadpool.

Thanks.

// Jonathan Vanasco

| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
| SyndiClick.com
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      FindMeOn.com - The cure for Multiple Web Personality Disorder
|      Web Identity Management and 3D Social Networking
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      RoadSound.com - Tools For Bands, Stuff For Fans
|      Collaborative Online Management And Syndication Tools
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -





From matusis at matusis.com  Wed Apr 11 14:38:02 2007
From: matusis at matusis.com (Alec Matusis)
Date: Wed, 11 Apr 2007 11:38:02 -0700
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>	<025001c77c18$3906e140$ab14a3c0$@com>	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>	<026a01c77c22$63141020$293c3060$@com>
	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>
Message-ID: <00c801c77c68$8a13e0b0$9e3ba210$@com>

I am now suspecting there is something strange with Twisted 2.5:

Both servers now show 99.9% CPU using top:

 PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
6929 alecm     16   0  148m  82m 3588 R 99.9  2.1 414:29.24 twistd

4083 alecm     17   0  135m  70m 3640 R 99.9  1.8 421:00.05 twistd

The first one 6929 is using poll now, 4083 is using epoll. For this time of
the day with Twisted 2.2 and poll the usual CPU would be 15% for 4083 and
80% for 6229. These numbers were pretty stable every day over at leats a
month.
Both servers seem to be responsive however. There were no code changes.

ps shows different %CPU at the same time:

#ps -C twistd -o pcpu,cmd,pid,size
%CPU CMD                           PID    SZ
61.0 /usr/bin/python /usr/local/  4083 82240
66.5 /usr/bin/python /usr/local/  6929 97300

I wonder if we should revert to Twisted 2.2 ASAP


> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Thomas Herv?
> Sent: Wednesday, April 11, 2007 4:47 AM
> To: twisted-python at twistedmatrix.com
> Subject: RE: [Twisted-Python] epoll reactor problems
> 
> Quoting Alec Matusis <matusis at matusis.com>:
> 
> >> That's old (debian stable ? :)). I don't say that'll solve your
> >> problem, but you
> >> could try with 2.4.4 (warning, not 2.4.3).
> >
> > It's SuSE stable ;-) Our stuff on that machine is pretty convoluted
> now, so
> > we will probably have a chance to test with 2.4.4 only in a week,
> when we
> > add a brand new server with 2.4.4.
> 
> OK. That is just another thing to try, I don't see obvious reasons why
> it could
> work better on 2.4.4, but...
> 
> > I noticed a difference between this from the 99.9% CPU server:
> >
> > epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423,
> u64=12304606485815493031}},
> >
> {EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRB
> AND|E
> > POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
> > {EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
> > u64=22827751178240}}, {0, {u32=0, u64=0}},
> > {EPOLLOUT|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
> > u64=18097643565645823}}}, 1432, 68) = 5
> >
> > and this from a normal server running at 5% CPU:
> >
> > epoll_wait(4, {{EPOLLIN, {u32=1769, u64=12304606485815494377}}, {0,
> > {u32=4294944684, u64=140737488332716}}}, 1728, 17) = 2
> >
> > What does this mean?
> 
> The flags set on your sockets are generally EPOLLIN or EPOLLOUT: data
> to read or
> available for write. I don't know much about the other flags. EPOLLERR
> is set if
> the fd has been closed for example. EPOLLET is *highly* suspect,
> because it
> should only be there if set in the user code. The documentation of
> other flags
> is really terse...
> 
> 
> >> What's the global state of the process? Memory, number of opened fd
> ?
> >
> > We immediately reverted to poll, so I do not have it in front of me.
> The RSS
> > size was 45MB, and the number of open fd I do not know: it should
> have been
> > about 1500, but I did not check.
> 
> Hum... it may come from running out of file descriptors, so you'd
> better check
> your settings for this.
> 
> > I can do another test run with epoll in about 20hrs, since I do not
> want to
> > upset users too much.
> 
> Of course :).
> 
> > If you have some specific data I should get from the
> > test run, please let me know now.
> 
> Every information would be useful. The most useful information would be
> to know
> when it begins to act strangely, and if there is something that happend
> at this
> moment. Otherwise, number of fds, memory, netstat output, strace
> output...
> 
> --
> Thomas
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From glyph at divmod.com  Wed Apr 11 15:27:31 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 11 Apr 2007 19:27:31 -0000
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <00c801c77c68$8a13e0b0$9e3ba210$@com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
	<025001c77c18$3906e140$ab14a3c0$@com>
	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
	<026a01c77c22$63141020$293c3060$@com>
	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>
	<00c801c77c68$8a13e0b0$9e3ba210$@com>
Message-ID: <20070411192731.7769.729194544.divmod.xquotient.2702@joule.divmod.com>

On 06:38 pm, matusis at matusis.com wrote:
>I wonder if we should revert to Twisted 2.2 ASAP

I can't speak to your deployment requirements, but it sounds like this 
inquiry could lead to some extremely valuable information to fix this 
issue in the next release of Twisted.  Would it be possible to replicate 
this issue with your application in some kind of load-testing 
environment so that we can analyze it "in the lab"?  Although I'd really 
like to see this through to a satisfying conclusion, I don't want your 
application to have to pay the cost of fixing Twisted.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070411/321364bf/attachment.htm 

From exarkun at divmod.com  Wed Apr 11 15:29:11 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 11 Apr 2007 15:29:11 -0400
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <00c801c77c68$8a13e0b0$9e3ba210$@com>
Message-ID: <20070411192911.18920.509631046.divmod.quotient.10583@ohm>

On Wed, 11 Apr 2007 11:38:02 -0700, Alec Matusis <matusis at matusis.com> wrote:
>I am now suspecting there is something strange with Twisted 2.5:
>
>Both servers now show 99.9% CPU using top:
>
> PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
>6929 alecm     16   0  148m  82m 3588 R 99.9  2.1 414:29.24 twistd
>
>4083 alecm     17   0  135m  70m 3640 R 99.9  1.8 421:00.05 twistd
>
>The first one 6929 is using poll now, 4083 is using epoll. For this time of
>the day with Twisted 2.2 and poll the usual CPU would be 15% for 4083 and
>80% for 6229. These numbers were pretty stable every day over at leats a
>month.
>Both servers seem to be responsive however. There were no code changes.
>
>ps shows different %CPU at the same time:
>
>#ps -C twistd -o pcpu,cmd,pid,size
>%CPU CMD                           PID    SZ
>61.0 /usr/bin/python /usr/local/  4083 82240
>66.5 /usr/bin/python /usr/local/  6929 97300
>
>I wonder if we should revert to Twisted 2.2 ASAP
>

I can't speak to whether or not you want to do that, but I can suggest
that if you can provide a more detailed bug report, then any problem in
Twisted will probably be fixed for you.

Jean-Paul



From matusis at matusis.com  Wed Apr 11 16:01:34 2007
From: matusis at matusis.com (Alec Matusis)
Date: Wed, 11 Apr 2007 13:01:34 -0700
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <20070411192731.7769.729194544.divmod.xquotient.2702@joule.divmod.com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>	<025001c77c18$3906e140$ab14a3c0$@com>	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>	<026a01c77c22$63141020$293c3060$@com>	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>	<00c801c77c68$8a13e0b0$9e3ba210$@com>
	<20070411192731.7769.729194544.divmod.xquotient.2702@joule.divmod.com>
Message-ID: <00f701c77c74$35a784d0$a0f68e70$@com>

We have tested the upgrade to 2.5 on our dev and stage, and we have not run into this problem. So the only way I know how to demonstrate it is to look on live. We are in San Francisco. I wonder if anybody from Twisted is in the Bay Area, then maybe we can get together, ssh into the live servers and examine it.

Otherwise, I will have to look into  creating a simpler load testing environment with fake clients: this would take me a bit of time?

From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of glyph at divmod.com
Sent: Wednesday, April 11, 2007 12:28 PM
To: Twisted general discussion
Subject: RE: [Twisted-Python] epoll reactor problems

On 06:38 pm, matusis at matusis.com wrote:

>I wonder if we should revert to Twisted 2.2 ASAP

I can't speak to your deployment requirements, but it sounds like this inquiry could lead to some extremely valuable information to fix this issue in the next release of Twisted.  Would it be possible to replicate this issue with your application in some kind of load-testing environment so that we can analyze it "in the lab"?  Although I'd really like to see this through to a satisfying conclusion, I don't want your application to have to pay the cost of fixing Twisted.




From p.mayers at imperial.ac.uk  Wed Apr 11 17:02:27 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 11 Apr 2007 22:02:27 +0100
Subject: [Twisted-Python] Threadpool analysis?
In-Reply-To: <DAB07213-8B3C-40C9-BDEC-617ADC00236B@2xlp.com>
References: <DAB07213-8B3C-40C9-BDEC-617ADC00236B@2xlp.com>
Message-ID: <461D4CE3.7060902@imperial.ac.uk>

Jonathan Vanasco wrote:
> 
> My threadpool on a webspider keeps locking up.  I've been using manhole 
> and sys._current_frames to try and figure out whats going wrong -- and 
> i've fixed a few issues.

Why are you using a threadpool with Twisted?



From twisted-python at 2xlp.com  Wed Apr 11 18:12:39 2007
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 11 Apr 2007 18:12:39 -0400
Subject: [Twisted-Python] Threadpool analysis?
In-Reply-To: <461D4CE3.7060902@imperial.ac.uk>
References: <DAB07213-8B3C-40C9-BDEC-617ADC00236B@2xlp.com>
	<461D4CE3.7060902@imperial.ac.uk>
Message-ID: <CAE5C43D-9FC3-43C1-A960-68BBB034EDD7@2xlp.com>


On Apr 11, 2007, at 5:02 PM, Phil Mayers wrote:

> Why are you using a threadpool with Twisted?


I'm not using one directly -- I'm using deferToThread , which twisted  
manages via its own threadpool.  Stuff is locking up, so i'm using  
manhole to try and see wtf is going on.



// Jonathan Vanasco

| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
| SyndiClick.com
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      FindMeOn.com - The cure for Multiple Web Personality Disorder
|      Web Identity Management and 3D Social Networking
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      RoadSound.com - Tools For Bands, Stuff For Fans
|      Collaborative Online Management And Syndication Tools
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -





From p.mayers at imperial.ac.uk  Wed Apr 11 19:22:53 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 12 Apr 2007 00:22:53 +0100
Subject: [Twisted-Python] Threadpool analysis?
In-Reply-To: <CAE5C43D-9FC3-43C1-A960-68BBB034EDD7@2xlp.com>
References: <DAB07213-8B3C-40C9-BDEC-617ADC00236B@2xlp.com>	<461D4CE3.7060902@imperial.ac.uk>
	<CAE5C43D-9FC3-43C1-A960-68BBB034EDD7@2xlp.com>
Message-ID: <461D6DCD.6050002@imperial.ac.uk>

Jonathan Vanasco wrote:
> 
> On Apr 11, 2007, at 5:02 PM, Phil Mayers wrote:
> 
>> Why are you using a threadpool with Twisted?
> 
> 
> I'm not using one directly -- I'm using deferToThread , which twisted 
> manages via its own threadpool.  Stuff is locking up, so i'm using 
> manhole to try and see wtf is going on.

Ok. What are you running in deferToThread?

More generally, you said things keep locking up. How, what are the 
symptoms? What OS and version are you using, how many outstanding 
requests have you deferToThread'ed, etc.

Answering your original question more directly, you can monitor basic 
info about that usage like so:

import time

COUNT = 0

def myDeferToThread(*p, **kw):
     global COUNT
     COUNT += 1
     stime = time.time()
     def cb(val):
         etime = time.time()
         global COUNT
         COUNT -= 1
         print "deferToThread returned in %.1fsec" % (etime-stime,)
         return val
     return deferToThread(*p, **kw).addCallback(cb)

You can using a task.LoopingCall to report the outstanding number 
periodically. You can even get sophisticated and use an increasing 
sequence number like so:

OUTSTANDING = {}
SEQUENCE = 0

def myDeferToThread(*p, **kw):
     global SEQUENCE
     global OUTSTANDING
     SEQUENCE += 1
     argstr = 'p=%r kw=%r' % (p, kw)
     OUTSTANDING[SEQUENCE] = argstr
     def cb(val):
         args = OUTSTANDING[SEQUENCE]
         del OUTSTANDING[SEQUENCE]
         print "%s returned" % (args,)
         return val
     return deferToThread(*p, **kw).addCallback(cb)

...or something along those lines.

Some of which might help you.



From daedalus at eigenmagic.com  Wed Apr 11 20:26:51 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Thu, 12 Apr 2007 10:26:51 +1000
Subject: [Twisted-Python] Implementing an event manager in twisted
Message-ID: <1176337611.7007.31.camel@localhost>

Hi folks,

I have had an idea to implement an event manager to glue a few different
system components together, and I am wondering which pieces of twisted
would be best suited to the task, or even if I should attempt it at all.

I have programs that poll for data.
I have a database that stores polled information.
I have programs that listen for data to be provided to them from
external entities.

I have a desire to provide scheduler functionality (at time x, take
action y).

It seems to me that I could join all of these things via an event
manager:

A program polls for data, succeeds and notifies the event manager of the
data that was polled. The event manager notifies a 'poll storage' object
that stores the data in the database. It could also notify other things.

Data is received from an external entity by a listener. The listener
notifies the event manager of the data. The event manager notifies an
object that stores it in the database, or runs a script, or uploads
something to flickr, or whatever.

Time passes. The event manager notifies interested objects that this is
so. They take whatever action they deem necessary.

None of this is new, so I wonder what others have done in this area? Am
I heading down a dangerous path? What are the traps for new players? Has
someone already written something that does all of this that I can use,
saving myself time and headaches?

-- 
Justin Warren <daedalus at eigenmagic.com>



From andrew-twisted at puzzling.org  Wed Apr 11 21:00:13 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 12 Apr 2007 11:00:13 +1000
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <00c801c77c68$8a13e0b0$9e3ba210$@com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
	<025001c77c18$3906e140$ab14a3c0$@com>
	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
	<026a01c77c22$63141020$293c3060$@com>
	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>
	<00c801c77c68$8a13e0b0$9e3ba210$@com>
Message-ID: <20070412010013.GB6345@steerpike.home.puzzling.org>

Alec Matusis wrote:
> I am now suspecting there is something strange with Twisted 2.5:
> 
> Both servers now show 99.9% CPU using top:

It would be nice to know where in the code it is spending all that time.

I would consider installing the debug symbols for python, and getting a C and
python backtrace with gdb.  (use the .gdbinit file from
http://svn.python.org/view/python/trunk/Misc/gdbinit?rev=39492&view=auto to get
the "pystack" gdb command, you may need the patch to it from
http://jcalderone.livejournal.com/28224.html too).

Or maybe even install a simple SIGUSR1 signal handler than dumps a backtrace,
and send SIGUSR1 to your process repeatedly while it's at 99.9% CPU.  Or a
SIGUSR1 handler to install a trace hook (like the twistd --spew option does).

The idea either way is to find out by random sampling what code is executing;
presumably it's doing the same redundant work over and over, so it shouldn't
take many samples to find one code path that is occurring frequently.

Then hopefully that extra information will hint at what the problem is.

-Andrew.




From andrew-twisted at puzzling.org  Wed Apr 11 21:06:42 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 12 Apr 2007 11:06:42 +1000
Subject: [Twisted-Python] Threadpool analysis?
In-Reply-To: <CAE5C43D-9FC3-43C1-A960-68BBB034EDD7@2xlp.com>
References: <DAB07213-8B3C-40C9-BDEC-617ADC00236B@2xlp.com>
	<461D4CE3.7060902@imperial.ac.uk>
	<CAE5C43D-9FC3-43C1-A960-68BBB034EDD7@2xlp.com>
Message-ID: <20070412010642.GC6345@steerpike.home.puzzling.org>

Jonathan Vanasco wrote:
> 
> On Apr 11, 2007, at 5:02 PM, Phil Mayers wrote:
> 
> >Why are you using a threadpool with Twisted?
> 
> 
> I'm not using one directly -- I'm using deferToThread , which twisted  
> manages via its own threadpool.  Stuff is locking up, so i'm using  
> manhole to try and see wtf is going on.

Keep in mind that deferToThread uses the reactor's threadpool, which by default
only has a fairly small number of threads.  So if you are trying to run many
long-running operations via deferToThread, it may take a long time for them to
get served.  It may be better to start your own threadpool
(twisted.python.threadpool) if you depend heavily on it.

Also, the easiest way to find out what the state the threads started by a thread
pool are in is by looking at the ThreadPool object; you could inspect the
tp.q.qsize(), len(tp.threads), etc.

You could also look at threading.enumerate() in the standard library.

-Andrew.




From twisted-python at 2xlp.com  Wed Apr 11 21:21:11 2007
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 11 Apr 2007 21:21:11 -0400
Subject: [Twisted-Python] Threadpool analysis?
In-Reply-To: <20070412010642.GC6345@steerpike.home.puzzling.org>
References: <DAB07213-8B3C-40C9-BDEC-617ADC00236B@2xlp.com>
	<461D4CE3.7060902@imperial.ac.uk>
	<CAE5C43D-9FC3-43C1-A960-68BBB034EDD7@2xlp.com>
	<20070412010642.GC6345@steerpike.home.puzzling.org>
Message-ID: <8C34146D-8A4D-4032-8A30-7A9DFD97D2C9@2xlp.com>


On Apr 11, 2007, at 9:06 PM, Andrew Bennetts wrote:

> Keep in mind that deferToThread uses the reactor's threadpool,  
> which by default
> only has a fairly small number of threads.  So if you are trying to  
> run many
> long-running operations via deferToThread, it may take a long time  
> for them to
> get served.  It may be better to start your own threadpool
> (twisted.python.threadpool) if you depend heavily on it.

http://twistedmatrix.com/documents/current/api/ 
twisted.internet.interfaces.IReactorThreads.html#suggestThreadPoolSize

i'm running it with 20 right now, but i've done 40 with no sweat.

// Jonathan Vanasco

| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - -
| FindMeOn.com - The cure for Multiple Web Personality Disorder
| Web Identity Management and 3D Social Networking
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - -
| RoadSound.com - Tools For Bands, Stuff For Fans
| Collaborative Online Management And Syndication Tools
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - -





From ppergame at gmail.com  Wed Apr 11 21:55:17 2007
From: ppergame at gmail.com (Pavel Pergamenshchik)
Date: Wed, 11 Apr 2007 18:55:17 -0700
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <20070412010013.GB6345@steerpike.home.puzzling.org>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
	<025001c77c18$3906e140$ab14a3c0$@com>
	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
	<026a01c77c22$63141020$293c3060$@com>
	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>
	<00c801c77c68$8a13e0b0$9e3ba210$@com>
	<20070412010013.GB6345@steerpike.home.puzzling.org>
Message-ID: <4a5c1b500704111855j54a5836dw2bfb71b519bddc9@mail.gmail.com>

On 4/11/07, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
>
> Alec Matusis wrote:
> > I am now suspecting there is something strange with Twisted 2.5:
> >
> > Both servers now show 99.9% CPU using top:
>
> It would be nice to know where in the code it is spending all that time.


It would appear from the earlier strace output that the code is busy dealing
with bogus epoll_wait results. Sounds like a buggy kernel.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070411/c42d940c/attachment.htm 

From list-ener at strank.info  Thu Apr 12 04:45:35 2007
From: list-ener at strank.info (Stefan Rank)
Date: Thu, 12 Apr 2007 10:45:35 +0200
Subject: [Twisted-Python] IPython embedded in twisted (and Re: readline-like
 behavior inside Twisted)
In-Reply-To: <20070408145125.18920.1518675638.divmod.quotient.9346@ohm>
References: <20070406212849.7769.1052979193.divmod.xquotient.2642@joule.divmod.com>
	<20070408145125.18920.1518675638.divmod.quotient.9346@ohm>
Message-ID: <461DF1AF.4090409@strank.info>

Hi,

on 08.04.2007 16:51 Jean-Paul Calderone said the following:
<snip>
> What would actually be really excellent is if both
> insults and pyreadline used the same underlying readline model code which
> was devoid of input/output code, then each could focus on the part it 
> should
> really care about (dealing with events or talking to a windows console or
> what have you) and improvements to the actually interesting behavior in the
> readline model could be shared between the two.
> 
> To some extend insults already has this (I've tried to factor as much of 
> the
> interesting behavior out away from the Twisted parts), and I see this is 
> also
> how at least some of pyreadline is structured (eg 
> lineeditor/history.py), so
> it might actually be feasible to merge the two backends into one shared
> thing.

That would be perfect.

on 09.04.2007 16:33 Michael Hudson said the following:
<snip>
> This isn't really a followup, but it seems worthwhile to mention that GNU
> readline itself has a callback interface (rl_callback_read_char) that would be
> suitable for using with Twisted.  You'd have to use ctypes or something to get
> to it, but it's there.

Seems even better. This interface, however, wants to consume the input 
itself, so a t.i.stdio-alike would need to poll/select for input events 
and then call rl_callback_read_char to actually consume them, right?


Attached is my ugly first attempt at embedding IPython in twisted 
without threads.
(no readline behaviour, only tried it on Windows)

Hopefully this catches the interest of someone with more 
time/knowledge... ;-)

Will also post on the IPython list to see if they would be willing to 
change their code to be more callback-friendly.

cheers,
stefan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: testtwistedipython.py
Type: text/x-python
Size: 12974 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070412/2d518160/attachment.py 

From manuel.arias at gmail.com  Thu Apr 12 12:40:24 2007
From: manuel.arias at gmail.com (Manuel Arias)
Date: Thu, 12 Apr 2007 09:40:24 -0700
Subject: [Twisted-Python] Implementing an event manager in twisted
In-Reply-To: <1176337611.7007.31.camel@localhost>
References: <1176337611.7007.31.camel@localhost>
Message-ID: <aba35c4f0704120940r45161805tf15891727a50d141@mail.gmail.com>

Hi Justin,

The scheduling is easily doable using twisted as a scheduler eg) callLater
or task.LoopingCall.

Writing an event dispatcher isn't too tough either. A very simple one allows
you to register using a hash-able "name" object eg) a string. You call the
dispatcher with the same object when you want to notify the registered
handlers. Twisted has one see:
http://twistedmatrix.com/docum<http://twistedmatrix.com/documents/current/api/twisted.python.dispatch.EventDispatcher.html>
ents/current/api/twisted.python<http://twistedmatrix.com/documents/current/api/twisted.python.dispatch.EventDispatcher.html>
.dispatch.EventDispatcher.html<http://twistedmatrix.com/documents/current/api/twisted.python.dispatch.EventDispatcher.html>.
That could easily be tied in to generating events from a listener
having
received data.

It seems that you have various programs that you want to coordinate using
twisted. One way to accomplish this is like you said to write an event
manager with twisted. Your listeners would connect (how? over sockets using
existing protocols or write your own...or use Perspective Broker) to your
twisted event manager to generate "received data" events. Your "received
data" event handlers could spawn processes and pipe the data to them, or you
can use twisted's adbapi to store the data in the database.


On 4/11/07, Justin Warren <daedalus at eigenmagic.com> wrote:
> Hi folks,
>
> I have had an idea to implement an event manager to glue a few different
> system components together, and I am wondering which pieces of twisted
> would be best suited to the task, or even if I should attempt it at all.
>
> I have programs that poll for data.
> I have a database that stores polled information.
> I have programs that listen for data to be provided to them from
> external entities.
>
> I have a desire to provide scheduler functionality (at time x, take
> action y).
>
> It seems to me that I could join all of these things via an event
> manager:
>
> A program polls for data, succeeds and notifies the event manager of the
> data that was polled. The event manager notifies a 'poll storage' object
> that stores the data in the database. It could also notify other things.
>
> Data is received from an external entity by a listener. The listener
> notifies the event manager of the data. The event manager notifies an
> object that stores it in the database, or runs a script, or uploads
> something to flickr, or whatever.
>
> Time passes. The event manager notifies interested objects that this is
> so. They take whatever action they deem necessary.
>
> None of this is new, so I wonder what others have done in this area? Am
> I heading down a dangerous path? What are the traps for new players? Has
> someone already written something that does all of this that I can use,
> saving myself time and headaches?
>
> --
> Justin Warren <daedalus at eigenmagic.com>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070412/6d24a71d/attachment.htm 

From matt at zgroupplc.com  Thu Apr 12 12:53:25 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Thu, 12 Apr 2007 17:53:25 +0100
Subject: [Twisted-Python] The Trial of the DirtyReactorError
Message-ID: <B88241EF-A5CF-4E90-A972-F3250E7E6ABD@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi All,

I have to say that I am largely getting along famously with Twisted  
(and Python) now.

I have started writing unit tests for my application and when I run  
them using trial I sometimes get DirtyReactorErrors ('reactor left in  
unclean state'). This is a nice error. It tells me that I am not  
shutting down resources correctly which would otherwise be left  
hanging around and be difficult to debug.

I understand why this is occurring, its a simple matter of calling  
tcp.Port.stopListening() to suppress the error. However, I am more  
concerned with learning about where the most appropriate place to run  
this routine would be. I am not happy about running it in the unit  
test as it doesn't solve the problem, it just suppresses it. I can't  
seem to find an easy way to stop a port from listening from within a  
ServerFactory. Should I be writing a class that wraps the  
ServerFactory to run tcp.Port.stopListening() at the appropriate time?

Please bear in mind that I am creating multiple 'one-shot' servers  
that are always shut down as soon as they have done their business. I  
am guessing that the stopService methods would be more appropriate  
for a conventional server that serves multiple clients / requests.

Your thoughts?

Thanks a lot for your time :)

Matt


m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGHmQKyI6MkdKPngkRAlkwAJ4zebpjOsfItDtqIaRJbj0kyN7jhACdHvYC
17YRmuZNefQfCxCesMStUWI=
=dh4Z
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Thu Apr 12 13:06:13 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 12 Apr 2007 13:06:13 -0400
Subject: [Twisted-Python] Implementing an event manager in twisted
In-Reply-To: <aba35c4f0704120940r45161805tf15891727a50d141@mail.gmail.com>
Message-ID: <20070412170613.19381.432063232.divmod.quotient.33@ohm>

On Thu, 12 Apr 2007 09:40:24 -0700, Manuel Arias <manuel.arias at gmail.com> wrote:
>Hi Justin,
>
>The scheduling is easily doable using twisted as a scheduler eg) callLater
>or task.LoopingCall.
>
>Writing an event dispatcher isn't too tough either. A very simple one allows
>you to register using a hash-able "name" object eg) a string. You call the
>dispatcher with the same object when you want to notify the registered
>handlers. Twisted has one see:
>http://twistedmatrix.com/docum<http://twistedmatrix.com/documents/current/api/twisted.python.dispatch.EventDispatcher.html>
>ents/current/api/twisted.python<http://twistedmatrix.com/documents/current/api/twisted.python.dispatch.EventDispatcher.html>
>.dispatch.EventDispatcher.html<http://twistedmatrix.com/documents/current/api/twisted.python.dispatch.EventDispatcher.html>.

Note that this is deprecated and new software should not use it.  Feel free
to copy it into your own project if you think it's useful, but it hardly does
anything at all.

Jean-Paul



From glyph at divmod.com  Thu Apr 12 14:12:04 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 12 Apr 2007 18:12:04 -0000
Subject: [Twisted-Python] Implementing an event manager in twisted
In-Reply-To: <1176337611.7007.31.camel@localhost>
References: <1176337611.7007.31.camel@localhost>
Message-ID: <20070412181204.7769.542117799.divmod.xquotient.2716@joule.divmod.com>

On 12:26 am, daedalus at eigenmagic.com wrote:
>I have had an idea to implement an event manager to glue a few 
>different
>system components together, and I am wondering which pieces of twisted
>would be best suited to the task, or even if I should attempt it at 
>all.

Nothing about what you're suggesting sounds dangerous or weird.  In 
fact, it really sounds like what Twisted is already :).  If you want to 
write a layer over it to provide higher-level events, that's fine; most 
Twisted applications do something of the sort.  The one thing I'd 
caution you against is attempting to make something at the same level of 
abstraction as Twisted by building on top of Twisted.  That would just 
add complexity and overhead without any benefit.  So here are some 
things you've described which sound, to me, exactly like what Twisted 
already does:
>I have a desire to provide scheduler functionality (at time x, take
>action y).

This sounds like reactor.callLater().  (Or if you're talking about 
persistent scheduling, axiom's IScheduler.schedule).
>Data is received from an external entity by a listener.

This sounds like IProtocol's dataReceived method.
>A program polls for data, succeeds and notifies the event manager of 
>the
>data that was polled. The event manager notifies a 'poll storage' 
>object
>that stores the data in the database. It could also notify other 
>things.

In python, "notifying things" is just calling functions or methods; in 
the most advanced case, it's still just calling functions or methods 
which have been placed into a list.  Twisted has lots of such lists, and 
it doesn't seem worthwhile to me to unify them into a central structure.

If it does make sense to you to unify them, you might want to look at 
Louie: http://pylouie.org/ .  I've never used it and I don't really get 
what it's for, but several folks that I know seem to like it a lot for 
gluing events together.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070412/e34f2b27/attachment.htm 

From glyph at divmod.com  Thu Apr 12 14:56:06 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 12 Apr 2007 18:56:06 -0000
Subject: [Twisted-Python] The Trial of the DirtyReactorError
In-Reply-To: <B88241EF-A5CF-4E90-A972-F3250E7E6ABD@zgroupplc.com>
References: <B88241EF-A5CF-4E90-A972-F3250E7E6ABD@zgroupplc.com>
Message-ID: <20070412185606.7769.1982208738.divmod.xquotient.2797@joule.divmod.com>

On 04:53 pm, matt at zgroupplc.com wrote:
>I understand why this is occurring, its a simple matter of calling 
>tcp.Port.stopListening() to suppress the error. However, I am more 
>concerned with learning about where the most appropriate place to run 
>this routine would be. I am not happy about running it in the unit 
>test as it doesn't solve the problem, it just suppresses it.

Putting the stopListening call into the middle of the actual test method 
would definitely be wrong.

However, putting the listenTCP in the setUp and the stopListening in the 
tearDown would be entirely appropriate.  If the code under test 
dynamically calls stopListening and might fail before then, then a 
tearDown by itself might be appropriate.
>I can't  seem to find an easy way to stop a port from listening from 
>within a  ServerFactory. Should I be writing a class that wraps the 
>ServerFactory to run tcp.Port.stopListening() at the appropriate time?

This is, in part, a weakness of the IProtocolFactory interface.  Calls 
to doStart and doStop should really receive an IListeningPort argument.

However, this is a minor wart.  listenTCP returns the Port, and hooking 
this up to your server factory in application code should be easy 
enough.
>Please bear in mind that I am creating multiple 'one-shot' servers 
>that are always shut down as soon as they have done their business. I 
>am guessing that the stopService methods would be more appropriate  for 
>a conventional server that serves multiple clients / requests.

If they are "always shut down", what event currently shuts them down? 
Have your test trigger that event.  If they're one-shot, then perhaps 
the method that calls listenTCP should be on the factory itself, making 
it even easier to keep track of the Port instance it is associated with.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070412/1906a032/attachment.htm 

From daedalus at eigenmagic.com  Thu Apr 12 19:35:41 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Fri, 13 Apr 2007 09:35:41 +1000
Subject: Trial adbapi tip. Was: [Twisted-Python] The Trial of the
	DirtyReactorError
In-Reply-To: <B88241EF-A5CF-4E90-A972-F3250E7E6ABD@zgroupplc.com>
References: <B88241EF-A5CF-4E90-A972-F3250E7E6ABD@zgroupplc.com>
Message-ID: <1176420942.28992.12.camel@fnord.melbourne.eigenmagic.net>

On Thu, 2007-04-12 at 17:53 +0100, Matthew Glubb wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> Hi All,
> 
> I have to say that I am largely getting along famously with Twisted  
> (and Python) now.
> 
> I have started writing unit tests for my application and when I run  
> them using trial I sometimes get DirtyReactorErrors ('reactor left in  
> unclean state'). This is a nice error. It tells me that I am not  
> shutting down resources correctly which would otherwise be left  
> hanging around and be difficult to debug.

On this note, I have a little tip to anyone new to writing Trial tests,
as I am:

If you use adbapi to talk to a database, be aware that it uses a
threadpool in order to make something that is synchronous into something
asynchronous. In an ordinary program, the threadpool is started and shut
down for you by the reactor, but it probably won't be in your tests
because of the way the reactor works with trial. I am using a
twisted.enterprise.adbapi.ConnectionPool, for example.

What you need is to call ConnectionPool.start() from within your
unittest setUp(), and to call ConnectionPool.close() in tearDown(). This
explicitly starts and stops the threadpool at the appropriate times.
>From memory, the start() will kindof automatically get called when you
set up the object, but close() will not. If you don't explicitly call
close(), trial will 'hang' because it's actually waiting for the
threadpool to exit, which never happens. You don't get a 'reactor left
in unclean state' error.

I hope that saves someone the couple of hours of head scratching and
reading code that I went through.

-- 
Justin Warren <daedalus at eigenmagic.com>



From daedalus at eigenmagic.com  Thu Apr 12 19:57:49 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Fri, 13 Apr 2007 09:57:49 +1000
Subject: [Twisted-Python] Implementing an event manager in twisted
In-Reply-To: <20070412181204.7769.542117799.divmod.xquotient.2716@joule.divmod.com>
References: <1176337611.7007.31.camel@localhost>
	<20070412181204.7769.542117799.divmod.xquotient.2716@joule.divmod.com>
Message-ID: <1176422270.28992.32.camel@fnord.melbourne.eigenmagic.net>

On Thu, 2007-04-12 at 18:12 +0000, glyph at divmod.com wrote:
> On 12:26 am, daedalus at eigenmagic.com wrote:
> 
> >I have had an idea to implement an event manager to glue a few
> different
> >system components together, and I am wondering which pieces of
> twisted
> >would be best suited to the task, or even if I should attempt it at
> all.
> 
> Nothing about what you're suggesting sounds dangerous or weird.  In
> fact, it really sounds like what Twisted is already :).  If you want
> to write a layer over it to provide higher-level events, that's fine;
> most Twisted applications do something of the sort.  The one thing I'd
> caution you against is attempting to make something at the same level
> of abstraction as Twisted by building on top of Twisted.  That would
> just add complexity and overhead without any benefit.  So here are
> some things you've described which sound, to me, exactly like what
> Twisted already does:

Whew. :) I certainly don't plan to re-implement Twisted, since it
already exists and it's ace; I want something at a higher level. My aim
here is to make my existing application(s) even more modular so that
functionality can be added and extended in a simple, common way. This
principle has already provided excellent benefits in the past.

> >I have a desire to provide scheduler functionality (at time x, take
> >action y).
> 
> This sounds like reactor.callLater().  (Or if you're talking about
> persistent scheduling, axiom's IScheduler.schedule).

Yes, it will be persistent scheduling, so I'll check out IScheduler. "30
seconds have passed" would most likely be a reactor.callLater(30,
timePassed) thing though, yes, inside an EventProducer type object.

> >Data is received from an external entity by a listener.
> 
> This sounds like IProtocol's dataReceived method.

Yes, and I use it to great effect within the existing code. By listener,
I really mean a daemon process that listens, and there may be many of
them. Rather than have a single, monolithic twistd with many Services, I
think I would prefer a multi-process model so that each individual
process can be started/stopped independently, new ones can be written
that just talk to the event manager API, etc. In this way, the listener
process would purely listen for incoming data (eg: SNMP Traps), and then
talk to the event manager when it does.

In fact, now that I think about it, it would be neat if the event
manager API could allow third party programs to talk to the event
manager via a standard protocol, such as XML-RPC. Such programs could
then be written in the author's favourite language, which may not be
Python+twisted, and potentially operate on remote systems.

> >A program polls for data, succeeds and notifies the event manager of
> the
> >data that was polled. The event manager notifies a 'poll storage'
> object
> >that stores the data in the database. It could also notify other
> things.
> 
> In python, "notifying things" is just calling functions or methods; in
> the most advanced case, it's still just calling functions or methods
> which have been placed into a list.  Twisted has lots of such lists,
> and it doesn't seem worthwhile to me to unify them into a central
> structure.

True, though the more I think about it, I think I want an RPC mechanism
of some kind, and I believe Perspective Broker is such a beast? I
haven't really looked at it yet, but I've long been intrigued by what
people have been saying about it.

So it seems I want to add a veneer of RPC to my programs to allow them
to communicate at a distance. Imagine a poller process on one host, an
SNMP trap listener on another, a database storage process on still
another. This sort of modularity would provide excellent scalability.

Any suggestions for people's favourite ways of doing this with twisted?

> If it does make sense to you to unify them, you might want to look at
> Louie: http://pylouie.org/ .  I've never used it and I don't really
> get what it's for, but several folks that I know seem to like it a lot
> for gluing events together.

I'll check it out.

Thanks for the great responses so far, too. :)

-- 
Justin Warren <daedalus at eigenmagic.com>



From matusis at matusis.com  Thu Apr 12 21:50:40 2007
From: matusis at matusis.com (Alec Matusis)
Date: Thu, 12 Apr 2007 18:50:40 -0700
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <20070411192731.7769.729194544.divmod.xquotient.2702@joule.divmod.com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>	<025001c77c18$3906e140$ab14a3c0$@com>	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>	<026a01c77c22$63141020$293c3060$@com>	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>	<00c801c77c68$8a13e0b0$9e3ba210$@com>
	<20070411192731.7769.729194544.divmod.xquotient.2702@joule.divmod.com>
Message-ID: <01dd01c77d6e$24e85930$6eb90b90$@com>

>  Would it be possible to replicate this issue with your application in some kind of load-testing environment so that we can analyze it "in the lab"?  

 

So far, we could not replicate this in the lab- with thousands of fake multithreaded clients the behavior is normal.

Thus far, we have run this for 2 days with twisted 2.5 with poll and epoll, and we are now seeing big memory leaks that did not occur on 2.2, especially on epoll, in addition to 99.9% CPU.

Back on 2.2 one of our servers was slowly leaking memory, going from 45MB to about 500MB in about 10 days. On epoll in 2.5 it went from 45MB to 1.9g in a couple of hours, almost taking the machine down. The other server did not have memory leak on 2.2, staying at 70MB for weeks at a time. In one day it went from 70MB to 80MB on epoll in 2.5. Both show 99% CPU, so I suspect the memory leaks may be caused by skipping garbage collection because the process is too busy. Interestingly, the actual performance on epoll is not bad, the servers remain responsive even where the poll-based reactor in 2.2 was having difficulties.

 

We must revert to 2.2 tonight.

 

I emailed you and Jean-Paul. If you like, we can arrange ssh to our live servers, then you could look at it on Twisted 2.2 first, then we will switch again to 2.5 and then you can examine it when it?s unstable.

 

 

 

From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of glyph at divmod.com
Sent: Wednesday, April 11, 2007 12:28 PM
To: Twisted general discussion
Subject: RE: [Twisted-Python] epoll reactor problems

 

On 06:38 pm, matusis at matusis.com wrote:

>I wonder if we should revert to Twisted 2.2 ASAP

I can't speak to your deployment requirements, but it sounds like this inquiry could lead to some extremely valuable information to fix this issue in the next release of Twisted.  Would it be possible to replicate this issue with your application in some kind of load-testing environment so that we can analyze it "in the lab"?  Although I'd really like to see this through to a satisfying conclusion, I don't want your application to have to pay the cost of fixing Twisted.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070412/7e9871d4/attachment.htm 

From warner at lothar.com  Fri Apr 13 01:22:44 2007
From: warner at lothar.com (Brian Warner)
Date: Thu, 12 Apr 2007 22:22:44 -0700
Subject: [Twisted-Python] Foolscap-0.1.1 released
In-Reply-To: <200704111739.54508.iacovou@gmail.com> (iacovou@gmail.com's
	message of "Wed, 11 Apr 2007 17:39:54 +0300")
References: <20070403.213612.74734554.warner@lothar.com>
	<200704111739.54508.iacovou@gmail.com>
Message-ID: <874pnketln.fsf@lothar.com>

kgi <iacovou at gmail.com> writes:

> Thanks for the latest release; Foolscap is turning out to be very powerful
> and pleasant to use. I appreciate all your work.

Thanks!

> 1. I'm trying to create an UnauthenticatedTub that listens on a 
> system-assigned port (that is, on "tcp:0"). (I do this because I pass the 
> underlying Referenceable to a remote server, and the random port is just a 
> convenience to assist in debugging).
>
> tub = UnauthenticatedTub()
> l = tub.listenOn("tcp:0")
> tub.setLocation("localhost:%d" % l.getPortnum() )
> url = tub.registerReference(myserver, "my-service")
> print "the object is available at:", url
>
> tub.startService()
> reactor.run()

> However, when code like this runs, it falls foul of the "assert 
> self.s.running" at pb.py:73 (in getPortnum()).
>
> This seems to imply that the reactor needs to be running before we can
> actually assign a port, so we can't call setLocation() or
> registerReference() until this is done.

Close.. it requires that the Tub has been started, which is a slightly weaker
requirement than the reactor being running. If you rearrange the order of
operations to do:

 tub = UnauthenticatedTub()
 tub.startService()
 l = tub.listenOn("tcp:0")
 tub.setLocation("localhost:%d" % l.getPortnum() )
 url = tub.registerReference(myserver, "my-service")
 print "the object is available at:", url

 reactor.run()

Then you should find that it starts working ok.

Port numbers are allocated as soon as the Tub service is started, and isn't
"slow" (in the sense that it requires multiple turns of the reactor to
complete). The Tub is not supposed to do any network IO until it is started,
so it won't allocate the port until that point, but it doesn't really need to
be post-reactor.run().

(incidentally, if you need to know when the reactor has started for other
reasons, you can use reactor.callWhenRunning(cb))

The current version of Foolscap doesn't quite honor this "don't start until I
tell you to" rule: if you do getReference() before startService(), it will
cheerfully initiate outbound network connections anyways. This will be fixed
at some point.

> 2. I sent an email a while back about a possible bug I found; the archived 
> version is here:
>
>   http://twistedmatrix.com/pipermail/twisted-python/2007-March/014914.html

Yeah, sorry about not responding to that.. things got busy that month :).

(to be honest there are probably a number of issues with Copyable, as I
haven't personally used it nearly as much as the rest of Foolscap.)

Reading over your note, I think your analysis is exactly right.
Copyable.slice() is obligated to set self.streamable before any child objects
might get seralized, which means before the first yield(). I'll fix this
tonight. I wonder why the unit tests didn't catch it..

thanks!
 -Brian



From matt at zgroupplc.com  Fri Apr 13 03:19:45 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Fri, 13 Apr 2007 08:19:45 +0100
Subject: [Twisted-Python] The Trial of the DirtyReactorError
In-Reply-To: <20070412185606.7769.1982208738.divmod.xquotient.2797@joule.divmod.com>
References: <B88241EF-A5CF-4E90-A972-F3250E7E6ABD@zgroupplc.com>
	<20070412185606.7769.1982208738.divmod.xquotient.2797@joule.divmod.com>
Message-ID: <C52C1E79-15F0-48E4-A341-B029859C1272@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Thanks for your advice, glyph. I'll probably end up calling listenTCP  
from within the factory and shutting it down on call or errback.

Regards,

Matt

On 12 Apr 2007, at 19:56, glyph at divmod.com wrote:

> On 04:53 pm, matt at zgroupplc.com wrote:
>> I understand why this is occurring, its a simple matter of calling  
>> tcp.Port.stopListening() to suppress the error. However, I am more  
>> concerned with learning about where the most appropriate place to  
>> run this routine would be. I am not happy about running it in the  
>> unit test as it doesn't solve the problem, it just suppresses it.
>
> Putting the stopListening call into the middle of the actual test  
> method would definitely be wrong.
>
> However, putting the listenTCP in the setUp and the stopListening  
> in the tearDown would be entirely appropriate.  If the code under  
> test dynamically calls stopListening and might fail before then,  
> then a tearDown by itself might be appropriate.
>> I can't  seem to find an easy way to stop a port from listening  
>> from within a  ServerFactory. Should I be writing a class that  
>> wraps the ServerFactory to run tcp.Port.stopListening() at the  
>> appropriate time?
>
> This is, in part, a weakness of the IProtocolFactory interface.   
> Calls to doStart and doStop should really receive an IListeningPort  
> argument.
>
> However, this is a minor wart.  listenTCP returns the Port, and  
> hooking this up to your server factory in application code should  
> be easy enough.
>> Please bear in mind that I am creating multiple 'one-shot' servers  
>> that are always shut down as soon as they have done their  
>> business. I am guessing that the stopService methods would be more  
>> appropriate  for a conventional server that serves multiple  
>> clients / requests.
>
> If they are "always shut down", what event currently shuts them  
> down? Have your test trigger that event.  If they're one-shot, then  
> perhaps the method that calls listenTCP should be on the factory  
> itself, making it even easier to keep track of the Port instance it  
> is associated with.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGHy8UyI6MkdKPngkRAlH6AJ9bKzXeD2resG9USuAnWwCvoEaVEgCePCDy
rGROSFHTjmkQgBDHdDQ09o0=
=k9Gq
-----END PGP SIGNATURE-----



From nico at tekNico.net  Fri Apr 13 04:22:11 2007
From: nico at tekNico.net (Nicola Larosa)
Date: Fri, 13 Apr 2007 10:22:11 +0200
Subject: [Twisted-Python] Re: Implementing an event manager in twisted
In-Reply-To: <1176422270.28992.32.camel@fnord.melbourne.eigenmagic.net>
References: <1176337611.7007.31.camel@localhost>	<20070412181204.7769.542117799.divmod.xquotient.2716@joule.divmod.com>
	<1176422270.28992.32.camel@fnord.melbourne.eigenmagic.net>
Message-ID: <461F3DB3.6080109@tekNico.net>

Justin Warren wrote:
> Any suggestions for people's favourite ways of doing this with twisted?

Perspective Broker, or Foolscap (aka newPB), or AMP.


-- 
Nicola Larosa - http://www.tekNico.net/

Just being alive, It can really hurt
And these moments given, Are a gift from time
Just let us try, To give these moments back
To those we love, To those who will survive
 -- Kate Bush, Moments Of Pleasure, Red Shoes, 1993





From matt at zgroupplc.com  Fri Apr 13 05:15:28 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Fri, 13 Apr 2007 10:15:28 +0100
Subject: [Twisted-Python] The Trial of the DirtyReactorError
In-Reply-To: <20070412185606.7769.1982208738.divmod.xquotient.2797@joule.divmod.com>
References: <B88241EF-A5CF-4E90-A972-F3250E7E6ABD@zgroupplc.com>
	<20070412185606.7769.1982208738.divmod.xquotient.2797@joule.divmod.com>
Message-ID: <733E34B2-A470-4ABE-9B3F-AC1C789DF719@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi All,

Following on from my DirtyReactorError errors whilst running unit  
tests under trial I opted, as glyph suggested, to call listenTCP  
inside the ServerFactory in order to keep track of the port and shut  
it down cleanly.

On 12 Apr 2007, at 19:56, glyph at divmod.com wrote:

> If they are "always shut down", what event currently shuts them  
> down? Have your test trigger that event.  If they're one-shot, then  
> perhaps the method that calls listenTCP should be on the factory  
> itself, making it even easier to keep track of the Port instance it  
> is associated with.

This causes me a problem. When a client connection is lost, I want to  
shutdown the server. The only way that I can see to do this is by the  
connectionLost event calling a method in my ServerFactory that shuts  
down the listening port:

class Echo(basic.LineOnlyReceiver):

     def connectionLost(self, reason):
         self.factory.shutdown(reason)

class EchoServerFactory(protocol.ServerFactory):
     protocol = Echo
     port = None

     def __init__(self, port):
         self.port = reactor.listenTCP(port, self)

     def shutdown(self, reason):
         self.port.stopListening()

*However*, this results in the following error:

twisted.trial.util.PendingTimedCallsError: pendingTimedCalls still  
pending (consider setting twisted.internet.base.DelayedCall.debug =  
True): <DelayedCall 24706704 [-0.00161504745483s] called=0  
cancelled=0 Port.connectionLost(<twisted.python.failure.Failure  
<class 'twisted.internet.error.ConnectionDone'>>)

Obviously, tcp.Port.stopListening() results in the  
Echo.connectionLost event being triggered, which in turn calls  
EchoServerFactory.shutdown(), which triggers an additional  
Echo.connectionLost event. It seems that tcp.Port.connected is not  
being updated quickly enough to prevent the additional pendingTimedCalls

My question therefore is how is it possible to cleanly shut down a  
server when a client connection is lost?

Apologies if I am being a complete idiot about this. I am still a  
relatively twisted newbie ;)

Regards,

Matt


m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGH0ozyI6MkdKPngkRAk0xAJ0ZmZk6FsRAkrzP2WJYy4lrIOvJiACeJSwP
AEAEWw/w2vexi4AHOqdba4M=
=NSmv
-----END PGP SIGNATURE-----



From itamar at itamarst.org  Fri Apr 13 08:43:36 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 13 Apr 2007 08:43:36 -0400
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <01dd01c77d6e$24e85930$6eb90b90$@com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
	<025001c77c18$3906e140$ab14a3c0$@com>
	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
	<026a01c77c22$63141020$293c3060$@com>
	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>
	<00c801c77c68$8a13e0b0$9e3ba210$@com>
	<20070411192731.7769.729194544.divmod.xquotient.2702@joule.divmod.com>
	<01dd01c77d6e$24e85930$6eb90b90$@com>
Message-ID: <1176468217.29350.9.camel@localhost.localdomain>

On Thu, 2007-04-12 at 18:50 -0700, Alec Matusis wrote:

> So far, we could not replicate this in the lab- with thousands of fake
> multithreaded clients the behavior is normal.

Are you using same version of Python and same kernel on test machine and
production?

If you have memory leaks, there are various utility libraries out there
that will show you what the most common objects in your Python program
are; you might want to try those.




From exarkun at divmod.com  Fri Apr 13 11:22:05 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 13 Apr 2007 11:22:05 -0400
Subject: [Twisted-Python] The Trial of the DirtyReactorError
In-Reply-To: <733E34B2-A470-4ABE-9B3F-AC1C789DF719@zgroupplc.com>
Message-ID: <20070413152205.19381.954094387.divmod.quotient.509@ohm>

On Fri, 13 Apr 2007 10:15:28 +0100, Matthew Glubb <matt at zgroupplc.com> wrote:
>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>Hi All,
>
>Following on from my DirtyReactorError errors whilst running unit  tests 
>under trial I opted, as glyph suggested, to call listenTCP  inside the 
>ServerFactory in order to keep track of the port and shut  it down cleanly.
>
>On 12 Apr 2007, at 19:56, glyph at divmod.com wrote:
>>If they are "always shut down", what event currently shuts them  down? Have 
>>your test trigger that event.  If they're one-shot, then  perhaps the 
>>method that calls listenTCP should be on the factory  itself, making it 
>>even easier to keep track of the Port instance it  is associated with.
>
>This causes me a problem. When a client connection is lost, I want to 
>shutdown the server. The only way that I can see to do this is by the 
>connectionLost event calling a method in my ServerFactory that shuts  down 
>the listening port:
>
>class Echo(basic.LineOnlyReceiver):
>
>     def connectionLost(self, reason):
>         self.factory.shutdown(reason)
>
>class EchoServerFactory(protocol.ServerFactory):
>     protocol = Echo
>     port = None
>
>     def __init__(self, port):
>         self.port = reactor.listenTCP(port, self)
>
>     def shutdown(self, reason):
>         self.port.stopListening()
>
>*However*, this results in the following error:
>
>twisted.trial.util.PendingTimedCallsError: pendingTimedCalls still  pending 
>(consider setting twisted.internet.base.DelayedCall.debug =  True): 
><DelayedCall 24706704 [-0.00161504745483s] called=0  cancelled=0 
>Port.connectionLost(<twisted.python.failure.Failure  <class 
>'twisted.internet.error.ConnectionDone'>>)
>
>Obviously, tcp.Port.stopListening() results in the  Echo.connectionLost 
>event being triggered, which in turn calls  EchoServerFactory.shutdown(), 
>which triggers an additional  Echo.connectionLost event. It seems that 
>tcp.Port.connected is not  being updated quickly enough to prevent the 
>additional pendingTimedCalls
>

Port.stopListening can return a Deferred if shutdown is not immediately
completed.  In this case, you need to have trial wait for this Deferred
to fire before letting the test finish.  Also, Port.stopListening does
not cause Echo.connectionLost to be called.  Shutting down a port only
prevents new connections from being made to it, it does not disconnect
any existing connections.  Even if it did, it would be a bug if it gave
duplication connection lost notifications to any protocol. ;)

>My question therefore is how is it possible to cleanly shut down a  server 
>when a client connection is lost?

You might also consider disabling the port when the connection is /made/.
This reduces the size of the window available for a second connection to
be made, and as I mentioned above, has no affect on the already-established
connection.

Jean-Paul



From matt at zgroupplc.com  Fri Apr 13 12:03:31 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Fri, 13 Apr 2007 17:03:31 +0100
Subject: [Twisted-Python] The Trial of the DirtyReactorError
In-Reply-To: <20070413152205.19381.954094387.divmod.quotient.509@ohm>
References: <20070413152205.19381.954094387.divmod.quotient.509@ohm>
Message-ID: <1E179E63-F5B2-421E-9587-3A12DDB62147@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Jean-Paul,

On 13 Apr 2007, at 16:22, Jean-Paul Calderone wrote:

> Port.stopListening can return a Deferred if shutdown is not  
> immediately
> completed.  In this case, you need to have trial wait for this  
> Deferred
> to fire before letting the test finish.

Ah. That's handy to know. Thanks.

>   Also, Port.stopListening does
> not cause Echo.connectionLost to be called.  Shutting down a port only

Yes, I have realised this now. I was getting confused with another  
event, and thought connectionLost was getting called as a result of  
port shutdown. tcp.Port.stopListening() now works fine from within  
the ServerFactory.

> You might also consider disabling the port when the connection is / 
> made/.
> This reduces the size of the window available for a second  
> connection to
> be made, and as I mentioned above, has no affect on the already- 
> established
> connection.

I have actually implemented the ListenOverflowProtocol in the server.  
This seems to do what it says on the tin!

Thanks for you help and patience :)

Matt



m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGH6nWyI6MkdKPngkRAnoqAKCm2tZzlNn53dhXTM9ivBcUk2B1qACfdY6W
Dg2YtME3powiuyEoXACvXu0=
=XM/y
-----END PGP SIGNATURE-----



From andrewfr_ice at yahoo.com  Fri Apr 13 13:35:49 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Fri, 13 Apr 2007 10:35:49 -0700 (PDT)
Subject: [Twisted-Python] Implementing an event manager in twisted
In-Reply-To: <E1HcAxa-0003ZW-02@pyramid.twistedmatrix.com>
Message-ID: <647897.7783.qm@web34201.mail.mud.yahoo.com>

Hello Justin:

>Whew. :) I certainly don't plan to re-implement
>Twisted, since it already exists and it's ace; I want
>something at a higher level. My aim here is to make
>my existing application(s) even more modular so that
>functionality can be added and extended in a simple,
>common way. This principle has already provided
>excellent benefits in the past.

A good book on Event management is David Luckham's
"The Power of Events: An Introduction to Complex Event
Processing in Distributed Enterprise Systems."

I think the higher level stuff revolves around the
event pattern language (also known as the trigger
language)- how one defines an event and the mechanisms
for detecting events.  

I am developing a WS-BPEL processor. Not many people
know about WS-BPEL. WS-BPEL is a language that has
event handlers that are based on time and web service
calls. To correctly implement the specification, I
also have to deal with triggering activities based on
patterns in a message or attributes of the SOAP
header.

My experiences so far....

For time based stuff, Twisted is pretty strong (in
opposition - Stackless is weak). I use TaskLoopCall
help implement time and alarm triggered stuff.  

For web services, I have been writing classes that
represent end-point-references based on the WSA
standard. For instance, a tasklet in my WS-BPEL
processor tells (or subscribes to) my "event manager"
that it is interested in a particular EPR (say a SOAP
message with a "buy" operation). In turn, a scheduler
suspends the tasklet. When my Twisted based Request
Handler receives a http request, as a part of the
response, the handler creates an EPR representing the
client end and sends it to the event manager.  If the
"event manager" can match the incoming EPR, it will
ask the scheduler to wake up the associated tasklet.

So far, this works fairly well. For 80% of stuff,
Twisted and Stackless work really well together. My
EPR classes are still pretty rough. However in a month
or two, they should be in better shape. I am not sure
if anyone is really interested but I would be more
than happy to put it out there.

Cheers,
Andrew




__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From twisted-python at 2xlp.com  Fri Apr 13 14:42:54 2007
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Fri, 13 Apr 2007 14:42:54 -0400
Subject: [Twisted-Python] confusion with general web serving
Message-ID: <1D7106E5-BA4C-4603-A25C-2D22A3A93223@2xlp.com>

i'm missing a key piece of connectivity here:

i'm building a twisted daemon to serve files.  right now it will  
serve off a local structure, in the future it will do that + handle  
proxying to s3.

I stripped out all the app specific code below.  my issue is that i  
can't figure out how to display a file on the system for a url, short  
of slurping it

i thought static.File would have soemthing to do with it, but I can't  
figure out how to get it into the http.Request.process routine.

suggestions ?

----------------------------------------------------

class UserphotoRequestHandler(http.Request):
	re_userphoto= re.compile("""^\w{32}(?:_[smlt])?.jpg$""")
	def process(self):
		if self.path == '/favicon.ico':
			self.finish()
			return

		if not self.re_userphoto.findall( self.path ):
			return return_notFound()

		myFilname= self.db_lookup():
		if not myFilname:
			return return_notFound()

		# how do i render myFilename ?				
		self.finish()

	def return_notFound( self ):
		self.setResponseCode(http.NOT_FOUND)
		self.write("invalid request.")
		self.finish()

class UserphotoHttp(http.HTTPChannel):
	requestFactory = UserphotoRequestHandler

class UserphotoHttpFactory(http.HTTPFactory):
	protocol= UserphotoHttp

if __name__ == "__main__":
	from twisted.internet import reactor
	reactor.listenTCP(7087, UserphotoHttpFactory())
	reactor.run( )



From grywacz at gmail.com  Fri Apr 13 15:52:02 2007
From: grywacz at gmail.com (Karol Nowak)
Date: Fri, 13 Apr 2007 21:52:02 +0200
Subject: [Twisted-Python] Jabber support in Twisted Words
Message-ID: <65a759e00704131252i5736f55bxd802a6ee5c6de8e0@mail.gmail.com>

Hi,

I'm looking for a Python XMPP library for a new project that I'm writing and
I have to questions regarding Twisted Words:

 * How XMPP compliant are its jabber components (anywhere near 100% of the
base specification?)?
 * Which version of Python is required to run Twisted Words?

Thanks in advance for any help. :)

-- 
regards
Karol 'grzywacz' Nowak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070413/2c2cabc4/attachment.htm 

From exarkun at twistedmatrix.com  Sun Apr 15 00:05:01 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 15 Apr 2007 04:05:01 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1176609901.89.996810443@twistedmatrix.com

Bug summary
______________________
Summary for 2007-04-08 through 2007-04-15
Bugs opened: 16    Bugs closed: 5  Total open bugs: 902 (+11)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +8  |Highest:  -1          |Core:      +4          
|Enhancement:  +2  |High:     +2          |Foolscap:  +1          
|Task:         +2  |Normal:  +10          |Trial:     +3          
                   |Low:      +1          |Web:       +2          
                                          |Web2:      +1          
                                          |Website:   +1          


New / Reopened Bugs
______________________
                    ===== High =====
[#2554] strange connect timeouts (opened by gudron)
    task            web        http://twistedmatrix.com/trac/ticket/2554

                    ===== Normal =====
[#2556] cfreactor breaks twisted.trial (opened by bromine)
    defect          core       http://twistedmatrix.com/trac/ticket/2556

[#2557] links on front page obscure one another (opened by zooko)
    defect          website    http://twistedmatrix.com/trac/ticket/2557

[#2558] noise about unclean reactor makes it hard for me to read trial output (opened by zooko)
    defect          trial      http://twistedmatrix.com/trac/ticket/2558

[#2559] trial runs unit tests in an arbitrary order (opened by zooko) (CLOSED, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/2559

[#2560] tests which time out don't get their tearDown() methods called (opened by zooko) (CLOSED, invalid)
    defect          trial      http://twistedmatrix.com/trac/ticket/2560

[#2561] .py/.pyc mismatch causes internal trial error (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2561

[#2562] No test coverage for amp unhandled client-side failures (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2562

[#2563] __file__ is relative in test module when invoked via "trial foo/bar.py" (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2563

[#2564] 'maximum recursion depth exceeded' when closing loopback transports (opened by j1m)
    defect          core       http://twistedmatrix.com/trac/ticket/2564

[#2565] Exception occurring in Foolscap CopyableSlicer. (opened by kgi)
    defect          foolscap   http://twistedmatrix.com/trac/ticket/2565

[#2566] Request for listenUDPOnce (or similar) (opened by Peaker) (CLOSED, wontfix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2566

[#2567] twisted.python.log.err does not have useful docstring (opened by konrads)
    defect          core       http://twistedmatrix.com/trac/ticket/2567

[#2568] trial cleanThreads breaks run until-failure (opened by therve) (CLOSED, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/2568

[#2570] mechanism for specifying a cred checker for twistd plugins to use (opened by glyph)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2570

                    ===== Low =====
[#2569] web2 has no examples for HTTP client (opened by konrads)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2569



Closed Bugs
______________________
                    ===== Highest =====
[#2356] twisted/test/test_banana.py uses StringIO incorrectly (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2356

                    ===== Normal =====
[#2560] tests which time out don't get their tearDown() methods called (opened by zooko, closed by therve, invalid)
    defect          trial      http://twistedmatrix.com/trac/ticket/2560

[#2566] Request for listenUDPOnce (or similar) (opened by Peaker, closed by exarkun, wontfix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2566

[#2568] trial cleanThreads breaks run until-failure (opened by therve, closed by therve, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/2568

[#2559] trial runs unit tests in an arbitrary order (opened by zooko, closed by therve, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/2559





From p.mayers at imperial.ac.uk  Sun Apr 15 07:45:14 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 15 Apr 2007 12:45:14 +0100
Subject: [Twisted-Python] confusion with general web serving
In-Reply-To: <1D7106E5-BA4C-4603-A25C-2D22A3A93223@2xlp.com>
References: <1D7106E5-BA4C-4603-A25C-2D22A3A93223@2xlp.com>
Message-ID: <4622104A.3020206@imperial.ac.uk>

Jonathan Vanasco wrote:
> i'm missing a key piece of connectivity here:
> 
> i'm building a twisted daemon to serve files.  right now it will serve 
> off a local structure, in the future it will do that + handle proxying 
> to s3.
> 
> I stripped out all the app specific code below.  my issue is that i 
> can't figure out how to display a file on the system for a url, short of 
> slurping it
> 
> i thought static.File would have soemthing to do with it, but I can't 
> figure out how to get it into the http.Request.process routine.

You're asking on the wrong list really - you should ask on twisted-web

Your problem is that you're trying to implement the HTTP protocol. Don't 
do that, it's not needed. You need to hook the protocol up to a "site" 
into which you can put components.

This is well documented. See:

http://twistedmatrix.com/projects/web/documentation/howto/using-twistedweb.html#auto2



From twisted-python at 2xlp.com  Mon Apr 16 19:05:49 2007
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Mon, 16 Apr 2007 19:05:49 -0400
Subject: [Twisted-Python] confusion with general web serving
In-Reply-To: <4622104A.3020206@imperial.ac.uk>
References: <1D7106E5-BA4C-4603-A25C-2D22A3A93223@2xlp.com>
	<4622104A.3020206@imperial.ac.uk>
Message-ID: <239A602C-AA4C-49CE-AE28-BB1EBC118842@2xlp.com>


On Apr 15, 2007, at 7:45 AM, Phil Mayers wrote:

> Jonathan Vanasco wrote:
>> i'm missing a key piece of connectivity here:
>> i'm building a twisted daemon to serve files.  right now it will  
>> serve off a local structure, in the future it will do that +  
>> handle proxying to s3.
>> I stripped out all the app specific code below.  my issue is that  
>> i can't figure out how to display a file on the system for a url,  
>> short of slurping it
>> i thought static.File would have soemthing to do with it, but I  
>> can't figure out how to get it into the http.Request.process routine.
>
> You're asking on the wrong list really - you should ask on twisted-web
>
> Your problem is that you're trying to implement the HTTP protocol.  
> Don't do that, it's not needed. You need to hook the protocol up to  
> a "site" into which you can put components.
>
> This is well documented. See:
>
> http://twistedmatrix.com/projects/web/documentation/howto/using- 
> twistedweb.html#auto2


Thanks, I''ll check out the other list.

I hadn't read that howto -- just the oreilley book and the overall  
design of the daemn seemed more inline with using the protocol ( as  
I'll mixing up proxy , static, and dynamic files ) than the web  
examples in the book.



// Jonathan Vanasco

| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
| SyndiClick.com
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      FindMeOn.com - The cure for Multiple Web Personality Disorder
|      Web Identity Management and 3D Social Networking
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      RoadSound.com - Tools For Bands, Stuff For Fans
|      Collaborative Online Management And Syndication Tools
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -





From amcouper at gmail.com  Tue Apr 17 11:56:15 2007
From: amcouper at gmail.com (Alex Couper)
Date: Tue, 17 Apr 2007 15:56:15 +0000
Subject: [Twisted-Python] SSL and Perspective broker
In-Reply-To: <a8fa98110704170843y3599fc54k46939ce10555f147@mail.gmail.com>
References: <a8fa98110704170843y3599fc54k46939ce10555f147@mail.gmail.com>
Message-ID: <a8fa98110704170856h6bff84c4se21eed4dd25405ac@mail.gmail.com>

Attached are three files: a server, a client and a ssl certificate

Thanks to twisteds remote calls, I can successfully call functions on the
server from the client (or send objects if I need to).
Fantastic

What I can't seem to do, is get the SSL to secure the server from a
non-authorised client (one that has access to stunnel.pem). So that if the
client does not have the correct certificate it cannot connect to the
server.

What am I doing wrong?

I have adapted some code found
here<http://www.lothar.com/tech/papers/PyCon-2003/pb-pycon/pb.html>for
this example.

Alex Couper
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070417/7478c4aa/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pb-server1.py
Type: text/x-python
Size: 1104 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070417/7478c4aa/attachment.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pb-client1.py
Type: text/x-python
Size: 2058 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070417/7478c4aa/attachment-0001.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: stunnel.pem
Type: application/octet-stream
Size: 1660 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070417/7478c4aa/attachment.obj 

From zooko at zooko.com  Tue Apr 17 12:22:09 2007
From: zooko at zooko.com (zooko at zooko.com)
Date: Tue, 17 Apr 2007 10:22:09 -0600
Subject: [Twisted-Python] epoll reactor problems 
In-Reply-To: <20070412010013.GB6345@steerpike.home.puzzling.org> 
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
	<025001c77c18$3906e140$ab14a3c0$@com>
	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
	<026a01c77c22$63141020$293c3060$@com>
	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>
	<00c801c77c68$8a13e0b0$9e3ba210$@com>
	<20070412010013.GB6345@steerpike.home.puzzling.org>
Message-ID: <20070417162209.3E6B775C41@yumyum.zooko.com>


> It would be nice to know where in the code it is spending all that time.
> 
> I would consider installing the debug symbols for python, and getting a C and
> python backtrace with gdb.

oprofile is also an excellent tool, and very little disruptive to the behavior
of your production server.

Regards,

Zooko




From amcouper at gmail.com  Wed Apr 18 12:04:24 2007
From: amcouper at gmail.com (Alex Couper)
Date: Wed, 18 Apr 2007 16:04:24 +0000
Subject: [Twisted-Python] SSL and Perspective Broker - 2nd attempt
Message-ID: <a8fa98110704180904v71eccc69x7642b950a9ec692a@mail.gmail.com>

##Sorry about that, not sure why the first one didn't attach the message:##

Attached are three files: a server, a client and a ssl certificate

Thanks to twisteds remote calls, I can successfully call functions on the
server from the client (or send objects if I need to).
Fantastic

What I can't seem to do, is get the SSL to secure the server from a
non-authorised client (one that has access to stunnel.pem). So that if the
client does not have the correct certificate it cannot connect to the
server.

What am I doing wrong?

I have adapted some code found
here<http://www.lothar.com/tech/papers/PyCon-2003/pb-pycon/pb.html>for
this example.

Alex Couper
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070418/0f2fc90c/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pb-client1.py
Type: text/x-python
Size: 2058 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070418/0f2fc90c/attachment.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pb-server1.py
Type: text/x-python
Size: 1104 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070418/0f2fc90c/attachment-0001.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: stunnel.pem
Type: application/octet-stream
Size: 1660 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070418/0f2fc90c/attachment.obj 

From amcouper at gmail.com  Wed Apr 18 12:08:33 2007
From: amcouper at gmail.com (Alex Couper)
Date: Wed, 18 Apr 2007 16:08:33 +0000
Subject: [Twisted-Python] SSL and Perspective Broker - 3rd attempt
Message-ID: <a8fa98110704180908p48f4d9edh63761f4f80d339cd@mail.gmail.com>

##Sorry about that, I had some rich text formatting in the first two messages:##

Attached are three files: a server, a client and a ssl certificate

Thanks to twisteds remote calls, I can successfully call functions on
the server from the client (or send objects if I need to).
Fantastic

  What I can't seem to do, is get the SSL to secure the server from a
non-authorised client (one that has access to stunnel.pem). So that if
the client does not have the correct certificate it cannot connect to
the server.

What am I doing wrong?

I have adapted some code found here for this example:
http://www.lothar.com/tech/papers/PyCon-2003/pb-pycon/pb.html#auto3

Alex Couper
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pb-client1.py
Type: text/x-python
Size: 2058 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070418/899319f6/attachment.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pb-server1.py
Type: text/x-python
Size: 1104 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070418/899319f6/attachment-0001.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: stunnel.pem
Type: application/octet-stream
Size: 1660 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070418/899319f6/attachment.obj 

From mcfletch at vrplumber.com  Wed Apr 18 13:13:58 2007
From: mcfletch at vrplumber.com (Mike C. Fletcher)
Date: Wed, 18 Apr 2007 13:13:58 -0400
Subject: [Twisted-Python] twisted pysnmp status
In-Reply-To: <1175494023.7824.17.camel@localhost>
References: <460B2722.7020900@BrendanSimon.com>	<460C1652.1040504@vrplumber.com>
	<1175228562.7273.30.camel@localhost>	<460D4171.1090202@vrplumber.com>
	<1175494023.7824.17.camel@localhost>
Message-ID: <462651D6.3060702@vrplumber.com>

Justin Warren wrote:
> On Fri, 2007-03-30 at 12:57 -0400, Mike C. Fletcher wrote:
>   
>> Justin Warren wrote:
>>
>>     
...
>> Anyway, I'll see if there's any interest from the customer in trying out 
>> libsnmp with the code-base.  That would let me take company time to work 
>> on integrating it into TwistedSNMP.  They almost certainly don't care 
>> enough to have it do v3 operations, but raw speed on v2 operations is 
>> something they may care about enough to pay for a few hours of work.
>>     
>
> Cool. Let me know how you get on.
>
>   
No one jumped all over the idea.  Probably not going to happen as a result.

Sorry about that,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From daedalus at eigenmagic.com  Wed Apr 18 19:24:11 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Thu, 19 Apr 2007 09:24:11 +1000
Subject: [Twisted-Python] twisted pysnmp status
In-Reply-To: <462651D6.3060702@vrplumber.com>
References: <460B2722.7020900@BrendanSimon.com>
	<460C1652.1040504@vrplumber.com> <1175228562.7273.30.camel@localhost>
	<460D4171.1090202@vrplumber.com> <1175494023.7824.17.camel@localhost>
	<462651D6.3060702@vrplumber.com>
Message-ID: <1176938651.7841.4.camel@localhost>

On Wed, 2007-04-18 at 13:13 -0400, Mike C. Fletcher wrote:
> Justin Warren wrote:
> > On Fri, 2007-03-30 at 12:57 -0400, Mike C. Fletcher wrote:
> >   
> >> Justin Warren wrote:
> >>
> >>     
> ...
> >> Anyway, I'll see if there's any interest from the customer in trying out 
> >> libsnmp with the code-base.  That would let me take company time to work 
> >> on integrating it into TwistedSNMP.  They almost certainly don't care 
> >> enough to have it do v3 operations, but raw speed on v2 operations is 
> >> something they may care about enough to pay for a few hours of work.
> >>     
> >
> > Cool. Let me know how you get on.
> >
> >   
> No one jumped all over the idea.  Probably not going to happen as a result.
> 
> Sorry about that,
> Mike

Hey, no problem. It'll probably happen when I need to add some new
features into our code, or someone else will have a pressing need.

-- 
Justin Warren <daedalus at eigenmagic.com>



From devPyPlTw at verizon.net  Wed Apr 18 21:41:36 2007
From: devPyPlTw at verizon.net (Ed Manlove)
Date: Wed, 18 Apr 2007 20:41:36 -0500
Subject: [Twisted-Python] Reactor hangs on second call to reactor.run
Message-ID: <4626C8D0.7020204@verizon.net>

I am creating a Plone product which uses Twisted's nntp module to fetch 
newsgroup postings and display them within my Plone site.  Within a 
Plone template I call the Plone External Method, XXXnewsreader. The 
first time I view the page containing this external method it runs fine 
but the second time it hangs.

I've run the python debugger and it appears to be running an infinite 
loop within the function mainloop within the class PosixReactorBase.

Can anyone share some ideas about what I may be doing wrong here or why 
the reactor appears to be stuck in the mainlop func?  Thanks for any 
assistance in advance.

I am running under Windows XP using Twisted 2.5.0 and using Plone 2.1.3, 
Zope 2.8.7-final, python 2.3.5.

Ed



def XXXnewsreader(self):
     print self.REQUEST.form
     n = XXXNewsGroup('localhost','local.programming')
     n.run_XXXNewsGroup()
     return n.result


class XXXDefaultNewsGroupPageProcedure(nntp.NNTPClient):

     def connectionMade(self):
         #pdb.set_trace()
         nntp.NNTPClient.connectionMade(self)
         self.fetchGroup(self.factory.newsgroup)

     def gotGroup(self, groupInfo):
         estNumMsgs, first, last, groupName, type, status = groupInfo
         first = int(first)
         last = int(last)
         start = max(first, last-self.factory.headerCount);
         self.headersToFetch = range(start, last+1)
         self.headerCount = len(self.headersToFetch)
         self.fetchNextHeader()

     def fetchNextHeader(self):
         if self.headersToFetch:
             nextHeaderId = self.headersToFetch.pop(0)
             print "Fetching header %i of %i..." % (
                 self.headerCount-len(self.headersToFetch),
                 self.headerCount),
             self.fetchHead(nextHeaderId)
         else:
             self.quit()
             self.factory.deferred.callback(self.factory.headers)

     def gotHead(self, header):
         print "OK"
         self.factory.handleHeader(header)
         self.fetchNextHeader()

     def getHeadFailed(self, errorMessage):
         print errorMessage
         self.fetchNextHeader()

     def getGroupFailed(self, errorMessage):
         self.factory.defered.errback(Exception(errorMessage))
         self.quit()
         self.transport.loseConnection()

     def connectionLost(self, error):
         if not self.factory.deferred.called:
             self.factory.deferred.errback(error)

class XXXDefaultNewsGroupPageFactory(protocol.ClientFactory):
     protocol = XXXDefaultNewsGroupPageProcedure

     def __init__(self, deferred, newsgroup, headerCount=5):
         self.newsgroup = newsgroup
         self.headerCount = headerCount
         self.headers = []
         self.deferred = deferred  # defer.Deferred()

     def handleHeader(self, headerData):
         header = HeaderParser(Message).parsestr(headerData, True);
         self.headers.append(header)
         temail = parseaddr(header['from'])
         realName, emailAddress = temail

class XXXNewsGroup:

     def __init__(self, nntpserver, newsgroup):
         self.server = nntpserver
         self.newsgroup = newsgroup
         self.deferred = defer.Deferred()
         self.result = ''

     def run_XXXNewsGroup(self):
         #pdb.set_trace()
         factory = XXXDefaultNewsGroupPageFactory(self.deferred, 
self.newsgroup)
         self.deferred.addCallback(
             self._toHTMLsuccess).addErrback(
             self.handleError)
         self.deferred.addCallback(
             self.handleSuccess).addErrback(
             self.handleError)
         reactor.connectTCP(self.server, 119, factory)
         reactor.run(installSignalHandlers=0)
         return self.result

     def _toHTMLsuccess(self, results):
         str = '<ul>\n'

         for header in results:
             temail = parseaddr(header['from'])
             realName, emailAddress = temail

             str += '  <ul>\n'
             str += '    <li>%s</li>\n' % header['subject']
             str += '    <li>%s</li>\n' % realName
             str += '    <li>%s</li>\n' % header['date']
             str += '  </ul>\n'

         str += '</ul>\n'
         return str

     def handleSuccess(self, result):
         self.result = result
         pdb.set_trace()
         reactor.stop()

     def handleError(self, error):
         self.result = error.getErrorMessage()
         print self.result
         reactor.stop()




From exarkun at divmod.com  Wed Apr 18 20:51:10 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 18 Apr 2007 20:51:10 -0400
Subject: [Twisted-Python] Reactor hangs on second call to reactor.run
In-Reply-To: <4626C8D0.7020204@verizon.net>
Message-ID: <20070419005110.19381.1540330354.divmod.quotient.2853@ohm>

On Wed, 18 Apr 2007 20:41:36 -0500, Ed Manlove <devpypltw at verizon.net> wrote:
>I am creating a Plone product which uses Twisted's nntp module to fetch 
>newsgroup postings and display them within my Plone site.  Within a Plone 
>template I call the Plone External Method, XXXnewsreader. The first time I 
>view the page containing this external method it runs fine but the second 
>time it hangs.
>
>I've run the python debugger and it appears to be running an infinite loop 
>within the function mainloop within the class PosixReactorBase.
>
>Can anyone share some ideas about what I may be doing wrong here or why the 
>reactor appears to be stuck in the mainlop func?  Thanks for any assistance 
>in advance.
>
>I am running under Windows XP using Twisted 2.5.0 and using Plone 2.1.3, 
>Zope 2.8.7-final, python 2.3.5.

Starting reactors multiple times is not currently a supported feature.

Jean-Paul



From devPyPlTw at verizon.net  Wed Apr 18 22:19:58 2007
From: devPyPlTw at verizon.net (Ed Manlove)
Date: Wed, 18 Apr 2007 21:19:58 -0500
Subject: [Twisted-Python] Reactor hangs on second call to reactor.run
In-Reply-To: <20070419005110.19381.1540330354.divmod.quotient.2853@ohm>
References: <20070419005110.19381.1540330354.divmod.quotient.2853@ohm>
Message-ID: <4626D1CE.7000103@verizon.net>

Jean-Paul Calderone wrote:
> On Wed, 18 Apr 2007 20:41:36 -0500, Ed Manlove <devpypltw at verizon.net> 
> wrote:
>> I am creating a Plone product which uses Twisted's nntp module to 
>> fetch newsgroup postings and display them within my Plone site.  
>> Within a Plone template I call the Plone External Method, 
>> XXXnewsreader. The first time I view the page containing this external 
>> method it runs fine but the second time it hangs.
>>
>> I've run the python debugger and it appears to be running an infinite 
>> loop within the function mainloop within the class PosixReactorBase.
>>
>> Can anyone share some ideas about what I may be doing wrong here or 
>> why the reactor appears to be stuck in the mainlop func?  Thanks for 
>> any assistance in advance.
>>
>> I am running under Windows XP using Twisted 2.5.0 and using Plone 
>> 2.1.3, Zope 2.8.7-final, python 2.3.5.
> 
> Starting reactors multiple times is not currently a supported feature.
> 
> Jean-Paul
> 

But is restarting the reactor supported?  I'm sorry if I was not clear 
but after the requested data is received I call reactor.stop() and 
return back to Plone/Zope engine. If later another request is made I 
will call the reactor.run(installSignalHandlers=0).  But again this will
only be done after a call to reactor.stop and within a different 
function call.

Does this matter or is this what mean by starting the reactor multiple 
times?

Ed




From exarkun at divmod.com  Wed Apr 18 22:03:20 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 18 Apr 2007 22:03:20 -0400
Subject: [Twisted-Python] Reactor hangs on second call to reactor.run
In-Reply-To: <4626D1CE.7000103@verizon.net>
Message-ID: <20070419020320.19381.1584578935.divmod.quotient.2875@ohm>

On Wed, 18 Apr 2007 21:19:58 -0500, Ed Manlove <devpypltw at verizon.net> wrote:
> [snip]
>
>But is restarting the reactor supported?  I'm sorry if I was not clear but 
>after the requested data is received I call reactor.stop() and return back 
>to Plone/Zope engine. If later another request is made I will call the 
>reactor.run(installSignalHandlers=0).  But again this will
>only be done after a call to reactor.stop and within a different function 
>call.
>
>Does this matter or is this what mean by starting the reactor multiple 
>times?

This is indeed what I mean.

Jean-Paul



From jml at mumak.net  Fri Apr 20 01:50:32 2007
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 20 Apr 2007 15:50:32 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20027 - Merge forward so
	that we can run trial.
In-Reply-To: <E1HekgB-0007xm-00@wolfwood>
References: <E1HekgB-0007xm-00@wolfwood>
Message-ID: <d06a5cd30704192250l7170aaf4ndcbf6fcec099e6f0@mail.gmail.com>

On 4/20/07, David Reid <dreid at wolfwood.twistedmatrix.com> wrote:
> Author: dreid
> Date: Thu Apr 19 22:25:02 2007
> New Revision: 20027
>
> Added:
>    branches/endpoints-1442-2/twisted/internet/endpoints.py
>       - copied unchanged from r20025, /branches/endpoints-1442/twisted/internet/endpoints.py
>    branches/endpoints-1442-2/twisted/test/test_address.py
>       - copied unchanged from r20025, /branches/endpoints-1442/twisted/test/test_address.py
>    branches/endpoints-1442-2/twisted/test/test_endpoints.py
>       - copied unchanged from r20025, /branches/endpoints-1442/twisted/test/test_endpoints.py
> Modified:
>    branches/endpoints-1442-2/twisted/internet/address.py
>    branches/endpoints-1442-2/twisted/internet/interfaces.py
>
> Log:
> Merge forward so that we can run trial.

What was going on to cause this?

(I guess that one of the disadvantages of merging forward is that you
see the wrong set of changes in the commit email.)

cheers,
jml



From rschroev_nospam_ml at fastmail.fm  Fri Apr 20 14:28:22 2007
From: rschroev_nospam_ml at fastmail.fm (Roel Schroeven)
Date: Fri, 20 Apr 2007 20:28:22 +0200
Subject: [Twisted-Python] UDP + TCP + Serial
Message-ID: <f0b0o6$7rm$1@sea.gmane.org>

I'm looking for a way to combine serial input with UDP (and possibly 
TCP) communication.

Currently I have a very simple quick-and-dirty script using pyserial and 
the socket module without Twisted that reads line-based data from a 
serial port and sends it out using UDP. It works very well, but 
functional and reliability requirements are growing and I'm looking for 
a better design. New functionality that we'll need is connection to a 
database, two-way network communication to control the program while 
it's running, and perhaps the ability to use encrypted connections for 
the output data.

Twisted seems nice, but apart from a few simple hello-world-style test I 
don't have any experience with it. It doesn't seem too difficult though, 
except for one thing: I can't find any concrete information on how to 
combine serial communication and network communication. What reactor do 
I need? How do I initialize it? How can I make it listen to both a 
serial port and one or more UDP and/or TCP ports? I need to do this on 
Linux, but it would be nice to have it working on Windows too.

Many thanks,
Roel

-- 
If I have been able to see further, it was only because I stood
on the shoulders of giants.  -- Isaac Newton

Roel Schroeven




From hoadley at gmail.com  Fri Apr 20 14:54:19 2007
From: hoadley at gmail.com (Rob Hoadley)
Date: Fri, 20 Apr 2007 11:54:19 -0700
Subject: [Twisted-Python] Specialized mail server
Message-ID: <9bb390e70704201154i571f32b4s77d4bad31558c87c@mail.gmail.com>

Hello,

I'm building a new specialized mail server using twisted.mail and wanted to
get some feedback from the twisted community.

Some background:

The goal of the mail server is to answer and categorize all our bounces.
This includes bounces from our outbound mail servers that never make it to a
remote server or queue timeouts (i call these conversational bounces) and
bounces via the return-path (non-conversational bounces) that made it to the
remote mailserver but get bounced after remote mailserver acceptance.

If you are familiar with non-conversational bounces you'll know that you are
not guaranteed to get a bounce email in a standard format.  It all depends
on the foreign mailserver software and policies.

To handle the variations in bounce messages, I'm going to make a bounce
server that is configurable via addition of new rules similar to the
ipchains.  Each rule is a regex and the rules will look similar to the
Mailman bounce code regex's.  These rules are stored in a db with a whole
test system written around the rules to protect against bad rule entry and
fallback points to previous rule sets.  For the purposes of the server, the
idea is to start at the top of the rule chain and work your way down.  So
really, I'm just talking about a bunch of regex's w/processing if a regex is
hit or a final action if the none of the regex's are hit.

I've already built a specialized twisted mail server with a db lookup on
incoming mail that handles some of our other email (roughly 7-10K emails per
day) so I'm pretty familiar with the way twisted.mail works.  Where I need
some help is in the area of higher-volume matters.  I anticipate this
mailserver could get between 40-80K emails per day.  ( I work for a Email
Service Provider, our bounce percentage rates are low ).

My questions are as follows:

1) I've used qmail in the past.  If you are familiar with qmail, you
configure a locals number which tells you the number of concurrent emails
qmail can process locally.  This is different from the number of smtp
connections ( I'm not so much worried about that ).  qmail just forks a new
process up to the locals number and queues up other mail.

in eomRecieved what is the best manner to safeguard that I don't knock over
the server by processing 100 emails in short succession with the regex's?

2) Are there any examples of a high volume email server that somewhat
follows my processing requirements? I've googled around and not found any
examples.  It feels like I should be looking for a queue implementation
within a twisted.mail server.  I've looked at some of the Queue classes
within the twisted.mail code and I wanted to know if this is the right
direction?

3) If you have experience using twisted.mail have you had any problems with
this volume of mail with some sort of minor/major processing on each
incoming mail.  If you've just saved to disk have you had problems with a
load of say 200-300K emails per day?

I appreciate any help or comments.

thanks

-rob
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070420/b77beaef/attachment.htm 

From wthie at thiengineering.ch  Fri Apr 20 16:29:25 2007
From: wthie at thiengineering.ch (Werner Thie)
Date: Fri, 20 Apr 2007 22:29:25 +0200
Subject: [Twisted-Python] UDP + TCP + Serial
In-Reply-To: <f0b0o6$7rm$1@sea.gmane.org>
References: <f0b0o6$7rm$1@sea.gmane.org>
Message-ID: <462922A5.1030501@thiengineering.ch>

Might be that I have something useful for you - please see the attached 
zipped code. Basic idea was to have a serially connected device 
accepting commands and delivering status information connected to a 
browser via a server delivering LiveFragments.

A few problems remain open, like:
   - how does one uniquely connect only one browser capable of sendign 
commands (the SPS is a single resource)

   - are other browsers able to connect and do a status display only

Forgive me if I did did not use twisted/nevow/athenain in all aspects 
correctly, but with lots of source/doc re- and rereading I was able to 
bring it that far. If there are patterns I should avoid or correct I 
will gladly do so if pointed out to me.

Thanks, Werner


Roel Schroeven wrote:
> I'm looking for a way to combine serial input with UDP (and possibly 
> TCP) communication.
> 
> Currently I have a very simple quick-and-dirty script using pyserial and 
> the socket module without Twisted that reads line-based data from a 
> serial port and sends it out using UDP. It works very well, but 
> functional and reliability requirements are growing and I'm looking for 
> a better design. New functionality that we'll need is connection to a 
> database, two-way network communication to control the program while 
> it's running, and perhaps the ability to use encrypted connections for 
> the output data.
> 
> Twisted seems nice, but apart from a few simple hello-world-style test I 
> don't have any experience with it. It doesn't seem too difficult though, 
> except for one thing: I can't find any concrete information on how to 
> combine serial communication and network communication. What reactor do 
> I need? How do I initialize it? How can I make it listen to both a 
> serial port and one or more UDP and/or TCP ports? I need to do this on 
> Linux, but it would be nice to have it working on Windows too.
> 
> Many thanks,
> Roel
> 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: sps.zip
Type: application/x-zip-compressed
Size: 4272 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070420/713b5897/attachment.bin 

From exarkun at twistedmatrix.com  Sun Apr 22 00:05:01 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 22 Apr 2007 04:05:01 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1177214701.47.1629327045@twistedmatrix.com

Bug summary
______________________
Summary for 2007-04-15 through 2007-04-22
Bugs opened: 17    Bugs closed: 3  Total open bugs: 916 (+14)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +9  |Highest:  +4          |Conch:     +1          
|Enhancement:  +4  |High:     +1          |Core:     +10          
|Task:         +1  |Normal:   +9          |Names:     +1          
                   |Lowest:   +0          |Pydoctor:  +0          
                                          |Web2:      +1          
                                          |Website:   +1          


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2574] improve twistd logging setup factoring to remove duplicate code and simplify extending it (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/2574

[#2575] There should be a way to create a LogFile instance from a full file path (opened by therve)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2575

[#2585] words examples index is missing some links (opened by therve)
    enhancement     website    http://twistedmatrix.com/trac/ticket/2585

[#2587] twisted.conch.manhole.Manhole.__init__ passes extra arguments to parent initializer (opened by exarkun)
    defect          conch      http://twistedmatrix.com/trac/ticket/2587

                    ===== High =====
[#2571] convert twistd options into structured objects for testing and manipulation (opened by glyph)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2571

                    ===== Normal =====
[#2572] twistd changes to rundir inconsistently across different platforms (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2572

[#2573] _twistd_unix.py and _twistw.py inconsistent in default logfile name handling (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2573

[#2576] a better message in place of "no epytext found"? (opened by kumar303) (CLOSED, fixed)
    enhancement     pydoctor   http://twistedmatrix.com/trac/ticket/2576

[#2578] Low fidelity of twisted.protocol.loopback transports (opened by j1m)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2578

[#2579] Race condition with connector.stopConnecting (opened by arkanes)
    defect          core       http://twistedmatrix.com/trac/ticket/2579

[#2580] twisted.web2.stream infinite loop (opened by gthomas)
    defect          web2       http://twistedmatrix.com/trac/ticket/2580

[#2581] Unhandled CannotListenError in DNS query (opened by p1mrx)
    defect          names      http://twistedmatrix.com/trac/ticket/2581

[#2582] Documentation "deferredindepth.html" incorrect output (opened by jaimecham)
    defect          core       http://twistedmatrix.com/trac/ticket/2582

[#2583] Documentation "deferredindepth" illustrative diagrams (opened by jaimecham)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2583

[#2584] Possible intermittent failure in twisted.test.test_modules (opened by jml)
    defect          core       http://twistedmatrix.com/trac/ticket/2584

[#2586] twisted.python.logfile.LogFile's defaultMode parameter is undocumented, untested, insecure (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2586

                    ===== Lowest =====
[#2577] "twistd stop" plugin (opened by itamarst) (CLOSED, duplicate)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2577



Closed Bugs
______________________
                    ===== Normal =====
[#1122] fix for gtk2reacton warnings (opened by libber, closed by itamarst, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1122

[#2576] a better message in place of "no epytext found"? (opened by kumar303, closed by mwh, fixed)
    enhancement     pydoctor   http://twistedmatrix.com/trac/ticket/2576

                    ===== Lowest =====
[#2577] "twistd stop" plugin (opened by itamarst, closed by glyph, duplicate)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2577





From paulswartz at gmail.com  Sun Apr 22 20:31:07 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Sun, 22 Apr 2007 20:31:07 -0400
Subject: [Twisted-Python] WANTED: Conch use-cases!
Message-ID: <324cfb540704221731id58382br13df80c82199042e@mail.gmail.com>

Hi everyone!  It's z3p, the prodigal Conch developer.  As part of
Google's Summer of Code, I'll be fixing bugs, making the code nicer,
and adding some functionality.  The big piece of functionality I'll be
adding is a connectSSH() function (see
http://twistedmatrix.com/trac/ticket/1975).  Unfortunately, I haven't
been really using Conch for a while, and I'm not sure how actual
people are using it.
If you're using Conch (or another SSH library, like Paramiko), I'd
really appreciate it if you could add something to the bug tracker
about how you're using it and what you'd like out of an API, so that I
can best suit actual uses.

Thanks!
-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From jml at mumak.net  Sun Apr 22 20:40:43 2007
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 23 Apr 2007 10:40:43 +1000
Subject: [Twisted-Python] WANTED: Conch use-cases!
In-Reply-To: <324cfb540704221731id58382br13df80c82199042e@mail.gmail.com>
References: <324cfb540704221731id58382br13df80c82199042e@mail.gmail.com>
Message-ID: <d06a5cd30704221740m6277e071r28c61a5d9453b38b@mail.gmail.com>

On 4/23/07, Paul Swartz <paulswartz at gmail.com> wrote:
> Hi everyone!  It's z3p, the prodigal Conch developer.  As part of
> Google's Summer of Code, I'll be fixing bugs, making the code nicer,
> and adding some functionality.  The big piece of functionality I'll be
> adding is a connectSSH() function (see
> http://twistedmatrix.com/trac/ticket/1975).  Unfortunately, I haven't
> been really using Conch for a while, and I'm not sure how actual
> people are using it.
> If you're using Conch (or another SSH library, like Paramiko), I'd
> really appreciate it if you could add something to the bug tracker
> about how you're using it and what you'd like out of an API, so that I
> can best suit actual uses.

Hey Paul,

I'm very, very glad to hear that you'll be cleaning Conch up.

I have a couple of use-cases that I'll be posting to the bug tracker a
little bit later.

However, I just wanted to mention that one of my main desires for
Conch is an improved test suite. (You've probably heard me being a
little rude about this before). I would love to be able to help with
making the tests more unit-y and less resource-y, so please ping me as
often as you need, and let me (and the rest of the community) know of
any subtasks that can be handed off.

cheers,
jml



From jml at mumak.net  Sun Apr 22 21:55:02 2007
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 23 Apr 2007 11:55:02 +1000
Subject: [Twisted-Python] WANTED: Conch use-cases!
In-Reply-To: <d06a5cd30704221740m6277e071r28c61a5d9453b38b@mail.gmail.com>
References: <324cfb540704221731id58382br13df80c82199042e@mail.gmail.com>
	<d06a5cd30704221740m6277e071r28c61a5d9453b38b@mail.gmail.com>
Message-ID: <d06a5cd30704221855v4d444ab9x2f5e519b6cdacca8@mail.gmail.com>

On 4/23/07, Jonathan Lange <jml at mumak.net> wrote:
> On 4/23/07, Paul Swartz <paulswartz at gmail.com> wrote:
> > If you're using Conch (or another SSH library, like Paramiko), I'd
> > really appreciate it if you could add something to the bug tracker
> > about how you're using it and what you'd like out of an API, so that I
> > can best suit actual uses.
>
> I have a couple of use-cases that I'll be posting to the bug tracker a
> little bit later.
>

OK, I've filed a bunch of use-cases as tickets.

Because these describe things that we are already doing successfully,
they aren't really defects, enhancements or tasks, and so don't
_really_ belong on Trac. You should probably find some other way of
organising your use-cases (a wiki page perhaps).

I've thus prefixed all of my tickets with '[USE CASE]' and given them
all the keyword 'usecase', to indicate their unusual natures.

cheers,
jml



From andrew-twisted at puzzling.org  Sun Apr 22 22:47:11 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 23 Apr 2007 12:47:11 +1000
Subject: [Twisted-Python] WANTED: Conch use-cases!
In-Reply-To: <d06a5cd30704221855v4d444ab9x2f5e519b6cdacca8@mail.gmail.com>
References: <324cfb540704221731id58382br13df80c82199042e@mail.gmail.com>
	<d06a5cd30704221740m6277e071r28c61a5d9453b38b@mail.gmail.com>
	<d06a5cd30704221855v4d444ab9x2f5e519b6cdacca8@mail.gmail.com>
Message-ID: <20070423024711.GA11436@steerpike.home.puzzling.org>

Jonathan Lange wrote:
> On 4/23/07, Jonathan Lange <jml at mumak.net> wrote:
[...]
> 
> OK, I've filed a bunch of use-cases as tickets.
> 
> Because these describe things that we are already doing successfully,
> they aren't really defects, enhancements or tasks, and so don't
> _really_ belong on Trac. You should probably find some other way of
> organising your use-cases (a wiki page perhaps).

A wiki page sounds sensible to me, too.

-Andrew.




From p.mayers at imperial.ac.uk  Mon Apr 23 05:58:27 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 23 Apr 2007 10:58:27 +0100
Subject: [Twisted-Python] WANTED: Conch use-cases!
In-Reply-To: <d06a5cd30704221740m6277e071r28c61a5d9453b38b@mail.gmail.com>
References: <324cfb540704221731id58382br13df80c82199042e@mail.gmail.com>
	<d06a5cd30704221740m6277e071r28c61a5d9453b38b@mail.gmail.com>
Message-ID: <462C8343.6020405@imperial.ac.uk>

> Hey Paul,
> 
> I'm very, very glad to hear that you'll be cleaning Conch up.

Likewise.

My use-case is connecting to various embedded systems (primarily routers 
such as Cisco/Extreme/Juniper, firewalls such at Netscreen and layer2 
switches such as Cisco/HP/3Com) and either running SCP, SFTP or various 
CLI commands. The latter is basically a better Expect.

Compatibility with the (many) buggy SSH servers out there.

http://twistedmatrix.com/trac/ticket/1902

...is one issue we suffer. I would *adore* it if the various bug 
workarounds present in clients (e.g. Putty) could be present and 
unit-tested in Conch.

You may also be interested in some basic SCP support I coded, and 
tail-over-SFTP support:

http://twistedmatrix.com/trac/ticket/2594

Good luck!



From andrewfr_ice at yahoo.com  Tue Apr 24 15:49:47 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Tue, 24 Apr 2007 12:49:47 -0700 (PDT)
Subject: [Twisted-Python] Advice on Debugging Stackless/Twisted Problem
	involving Deferreds
Message-ID: <453821.33843.qm@web34206.mail.mud.yahoo.com>

Hello Colleagues:

I am try to debug a problem involving Stackless and
Twisted (once again). I don't see why Twisted and
Stackless cannot inter-operate. I enclosed an example
to illustrate the problem. I use Twisted 2.5 and
Stackless 2.5 3.1b3 on Windows XP.

The goal of the enclosed programme is to suspend and
resume Stackless tasklets making network calls without
blocking the entire Stackless Python application.
Under the hood, Twisted is used. The problem is that
programme prematurely terminates - the deferred
connected to client.getPage() is never called. 

I want to figure out exactly what is going on (in the
past I have gone on wild goose chases involving
threads and reactors).

Using print statements and pdb (I find it rough using
pdb with Stackless Python), the Twisted symptoms are:

1) ConnectTCP is successfully called. However the
actual call is never made (i.e., I monitored my Apache
web server's access.log). As a side note, I haven't
quite figured out how the HTTPClientFactory interacts
with the Twisted reactor. 
 
2) The deferred is never called.

3) Twisted seems to stop in MainLoop(), I am not sure
where.

4) No errors are generated.

The Stackless symptoms are:

A) The programme terminates, implying all the tasklets
except the main tasklet are blocked (or disappeared).

B) (Connected to A) All the channels are waiting for
writers (I look at the channel.__reduce__()).

Any insights would help. At this point, I like to
focus my attention on the Twisted side since this is
where my knowledge is the weakest. I am still reading
Twisted code. I am trying to get Manhole running but I
am having problems with the gtk library. 

It would help greatly if it could be pointed out where
I should place set_trace()/break points and print
statements to see what is happening to the deferred
call. If someone is set up for both Twisted and
Stackless and run the example, that would be super!

On the Stackless side, what am I missing? I haven't
detected any TaskletExit exceptions being thrown. I
was thinking deadlock, but this seems unlikely. Is
there a way to conduct a post-mortem on tasklets?

Hopefully I have made a silly mistake...

Cheers,
Andrew


~~~

#!/usr/bin/env python
"""
TestProcessor.py
April 24th, 2007

The purpose of this programme is to suspend a request
handler,
make a series of calls involving deferreds, and resume
the
request handler. This test does not work.

The main tasklet makes a series of synchronous
API calls : the first is to wait for a http request.
The second
is to get a web page. The last is to send a http
reply.

Under the hood, a tasklet "the processor" suspends and
resumes
tasklets waiting for IO events.

The programme works fine for:

def execute(self):
    self.processor.getWebPage()

(the programme will just run)

and

def execute(self):
    self.processor.getHttpRequest()
    self.processor.sendHttpResponse()

(use a HTML form with method POST)

However when 

def execute(self):
    self.processor.getHttpRequest()
    self.processor.getWebPage()
    self.processor.sendHttpResponse()

combination are done, something bad happens and the
programme
ends pre-maturely

"""

from twisted.internet.defer                          
import Deferred
from twisted.python.failure                          
import Failure
from twisted.internet                                
import reactor
from twisted.web                                     
import client
from twisted.web                                     
import http
import stackless
import pdb
import time
import sys

MESSAGE = {0 : "client_response",
           1 : "receive_response",
           2 : "reply_response" }

CLIENT_RESPONSE = 0
RECEIVE_RESPONSE = 1
REPLY_RESPONSE = 2

message = """<html><head></head><body>hello
world</body></html>"""


def pump():
    while (1):
      stackless.schedule()
    
    
class Response(object):
    def __init_(self):
        return


class Request(object):
    def __init__(self):
        return
    
"""
run Twisted in its own tasklet
"""
def twistedReactor():
    reactor.run()


"""
a housekeeping data structure to hide how tasklets are
suspended and resumed. For now, we use channels. Not
sure
how easy it is to replace this with
capture/remove/insert
"""
class Activity(object):
    def __init__(self):
        self.channel = stackless.channel()
        return

    def __repr__(self):
        return str(self.channel.__reduce__())
    
    def resume(self, response):
        self.channel.send(response)
            
    def suspend(self):
        print "[suspending]"
        return self.channel.receive()
    



"""
The Twisted Web server
"""
class Server(object):
    
    """
    Twisted sends network events to the processor via
    a channel
    """
    def execute(self, port, requestChannel):
        MyRequestHandler.requestChannel =
requestChannel
        reactor.listenTCP(port, MyHttpFactory())
        return


class MyRequestHandler(http.Request):
    
    def process(self):
            
        print "request handler :",
stackless.getcurrent()    
        myChannel = stackless.channel()
        
        response = Response()
        response.type = RECEIVE_RESPONSE
        response.path = self.path
        response.channel = myChannel
        response.body = self.content
        
        """
        send information back to the processor about
the
        HTTP request. Include a private channel so the
        processor can send back a reply
        """
        MyRequestHandler.requestChannel.send(response)
        
        """
        send the reply to the client
        """
        reply = myChannel.receive()
        self.write(reply.message)
        self.finish()
        
        """
        tell the processor that request handler has
        finished
        """
        ack = Response()
        ack.type = REPLY_RESPONSE
        ack.body = None
        ack.requestId = reply.requestId
        
        MyRequestHandler.requestChannel.send(ack)
        return
        
        
class MyHttp(http.HTTPChannel):
    requestFactory = MyRequestHandler
    
    
class MyHttpFactory(http.HTTPFactory):
    protocol = MyHttp
    
    
"""
The ClientConnection represents a deferred Twisted
call
"""
class ClientConnection(object):
    
    """
    include a requestId so the processor can associate
completed
    messages with outstanding requests
    """
    def __init__(self, channel, address, requestId):
        self.address = address
        self.channel = channel
        self.requestId = requestId
        return
    
    def __handleResponse__(self, pageData):
        print "__handleResponse__ started"
        
        print "deferred tasklet :",
stackless.getcurrent()
        
        response = Response()
        response.requestId = self.requestId
        response.type = CLIENT_RESPONSE
        response.body = pageData
        
        self.channel.send(response)
        print "__handleResponse__ finished"
        return
    
    #ignore errors for now
    def __handleError__(self, failure):
        print "__handleError__"
        return
    
    def connect(self):
       
client.getPage(self.address).addCallback(self.__handleResponse__).addErrback(self.__handleError__)
    
        return


"""
The TestTasklet makes a series of calls to the
processor
"""
class TestTasklet(object):
    def __init__(self, processor):
        self.processor = processor
        return
    
    """
    note - don't care about what is returned.
    """
    def execute(self):
        try:
            """
            the processor ensures that one call must
            complete before the other starts. Besides
            they all run in the same tasklet.
            """
            self.processor.getHttpRequest("/")
           
self.processor.getWebPage('http://localhost')
            self.processor.sendHttpResponse(message)
        except  :
            print sys.exc_info()
        return


class TestProcessor(object):
    
    def __init__(self, channel):
        self.flag = True
        self.channel = channel
        self.tasklets = {}
        self.requests = {}
        self.requestId = 0
        self.serverChannel = None
        self.receiveActivity = None
        return
    
    
    """
    just return the tasklet associated with the
getHttpRequest()
    """
    def __match__(self):
        return self.receiveActivity
    
    
    def __getTaskletEntry__(self):
        tasklet = stackless.getcurrent()
        if not self.tasklets.has_key(tasklet):
            self.tasklets[tasklet] = Activity()
        return self.tasklets[tasklet]
           
           
    #associate a request with a tasklet
    #for now don't worry about set_atomic
    def __addRequest__(self, activity):
        self.requestId = self.requestId + 1
        print "[requestId " + str(self.requestId) +
"]"
        self.requests[self.requestId] = activity
        return self.requestId
           
           
    #get a request       
    def __getRequest__(self, requestId):
        print "[resuming request " + str(requestId) +
"]"
        return self.requests[requestId]
    
           
    def __removeRequest__(self, requestId):
        del self.requests[requestId]
           
           
    """
    API 
    """
    def getHttpRequest(self, path):
        print "getHttpRequest started"
        #pdb.set_trace()
        activity = self.__getTaskletEntry__()
        requestId = self.__addRequest__(activity)
        self.receiveActivity = (requestId, activity)
        result = activity.suspend()
        self.serverChannel = result.channel
        self.__removeRequest__(requestId)
        print "getHttpRequest finished"
        return result
    
    
    def getWebPage(self, address):
        print "getWebPage started"
        #pdb.set_trace()
        activity = self.__getTaskletEntry__()
        requestId = self.__addRequest__(activity)
        ClientConnection(self.channel, address,
requestId).connect()
        result = activity.suspend()
        self.__removeRequest__(requestId)
        print "getWebPage finished"
        return result
    
    
    def sendHttpResponse(self, message):
        print "sendHttpResponse started"
        activity = self.__getTaskletEntry__()
        requestId = self.__addRequest__(activity)
        request = Request()
        request.message = message
        request.requestId = requestId
        self.serverChannel.send(request)
        result = activity.suspend()
        self.__removeRequest__(requestId)
        print "sendHttpResponse finished"
        return 
    
    
    """
    Event processing 
    """
    def processEvents(self):
        while (self.flag):
            response = self.channel.receive()
            
            if response.type == RECEIVE_RESPONSE:
                """
                for now just blindly match any HTTP
request
                """
                requestId, activity = self.__match__()
                response.requestId = requestId
            
            """
            get the tasklet associated with the event
            and resume it, giving it a result in the
process
            """
            activity =
self.__getRequest__(response.requestId)
            activity.resume(response)
            
        print "finished processing"    
        return
    
try:    
    print "test starting"    
    channel = stackless.channel()
    #stackless.tasklet(pump)()
    processor = TestProcessor(channel)
    print "processor",
stackless.tasklet(processor.processEvents)()
    print "TaskTasklet",
stackless.tasklet(TestTasklet(processor).execute)()
    print "Server",
stackless.tasklet(Server().execute)(8000, channel)
    print "reactor tasklet: ",
stackless.tasklet(twistedReactor)()
except:
    print sys.exc_info()
    reactor.stop()
    
"""
should run indefinitely
"""
while (stackless.getruncount() > 1):
    stackless.schedule()

print "this is the channel count and blocked
tasklets:", channel.__reduce__()

print "dump request table"

for activityObject in processor.requests.values():
    print activityObject

print "dump RH channel"
print processor.receiveActivity






__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From exarkun at divmod.com  Tue Apr 24 17:20:33 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 24 Apr 2007 17:20:33 -0400
Subject: [Twisted-Python] Advice on Debugging Stackless/Twisted Problem
	involving Deferreds
In-Reply-To: <453821.33843.qm@web34206.mail.mud.yahoo.com>
Message-ID: <20070424212033.19381.318701034.divmod.quotient.4890@ohm>

On Tue, 24 Apr 2007 12:49:47 -0700 (PDT), Andrew Francis 
> [snip]

Could you re-send the program as an attachment?  It seems to have been
mangled fairly badly in the original email.

Jean-Paul



From jacob at internet24.de  Wed Apr 25 07:15:55 2007
From: jacob at internet24.de (Thomas Jacob)
Date: Wed, 25 Apr 2007 13:15:55 +0200
Subject: [Twisted-Python] Different logging class for .tac file run by twistd
Message-ID: <1177499755.14331.14.camel@enterprise>

I would like to replace the default logger of
twistd with my own (a version of DailyLogFile).

Now it's possible to use startLogging just like
in a stand-alone twisted app, but twistd will
still start the standard logger (twistd.log),
so now I have two different log files.

<.tac-file>
....
application = service.Application("someapp")
...
web = internet.TCPServer(1234, server.Site(..))
web.setServiceParent(application)

log.startLogging(DailyLogFile(LOG_FILE, LOG_DIR, LOG_MODE))
<end .tac-file>

Any hints how to prevent the second, default
twistd log file?




From therve at free.fr  Wed Apr 25 07:59:21 2007
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Wed, 25 Apr 2007 13:59:21 +0200
Subject: [Twisted-Python] Different logging class for .tac file run by
	twistd
In-Reply-To: <1177499755.14331.14.camel@enterprise>
References: <1177499755.14331.14.camel@enterprise>
Message-ID: <20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>

Quoting Thomas Jacob <jacob at internet24.de>:

> I would like to replace the default logger of
> twistd with my own (a version of DailyLogFile).
>
> Now it's possible to use startLogging just like
> in a stand-alone twisted app, but twistd will
> still start the standard logger (twistd.log),
> so now I have two different log files.
>
> <.tac-file>
> ....
> application = service.Application("someapp")
> ...
> web = internet.TCPServer(1234, server.Site(..))
> web.setServiceParent(application)
>
> log.startLogging(DailyLogFile(LOG_FILE, LOG_DIR, LOG_MODE))
> <end .tac-file>
>
> Any hints how to prevent the second, default
> twistd log file?


Currently, the only way I know is to do this:

from twisted.python import log
log.theLogPublisher.observers.pop(0)

Now, this is one of the thing that should be fixed for the next release 
(I hope)
with http://twistedmatrix.com/trac/ticket/638

-- 
Thomas






From rodsenra at gpr.com.br  Wed Apr 25 08:46:20 2007
From: rodsenra at gpr.com.br (Rodrigo Senra)
Date: Wed, 25 Apr 2007 09:46:20 -0300
Subject: [Twisted-Python] Re: [Stackless] Advice on Debugging
 Stackless/Twisted Problem involving Deferreds
In-Reply-To: <453821.33843.qm@web34206.mail.mud.yahoo.com>
References: <453821.33843.qm@web34206.mail.mud.yahoo.com>
Message-ID: <20070425094620.2d78e028@Fenix>


[ Andrew Francis ]:

|Hello Colleagues:
|
|I am try to debug a problem involving Stackless and
|Twisted (once again). I don't see why Twisted and
|Stackless cannot inter-operate. 

# snip 
|
|Using print statements and pdb (I find it rough using
|pdb with Stackless Python), the Twisted symptoms are:
|
|1) ConnectTCP is successfully called. However the
|actual call is never made (i.e., I monitored my Apache
|web server's access.log). As a side note, I haven't
|quite figured out how the HTTPClientFactory interacts
|with the Twisted reactor. 
|2) The deferred is never called.
|3) Twisted seems to stop in MainLoop(),
|4) No errors are generated.

Have you tried to enable defered debugging [1] ?
If might give you some clues regarding what happens
before the main loop halts.

http://twistedmatrix.com/documents/current/api/twisted.internet.defer.html#setDebugging

cheers,
Senra

http://rodrigo.senra.nom.br



From einar.twisted at norsk-esport.no  Wed Apr 25 09:26:05 2007
From: einar.twisted at norsk-esport.no (=?ISO-8859-1?Q?=22Einar_S=2E_Ids=F8=22?=)
Date: Wed, 25 Apr 2007 15:26:05 +0200
Subject: [Twisted-Python] Different logging class for .tac file run by
	twistd
In-Reply-To: <20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>
References: <1177499755.14331.14.camel@enterprise>
	<20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>
Message-ID: <462F56ED.7000006@norsk-esport.no>

Thomas Herv? wrote:
> Currently, the only way I know is to do this:
> 
> from twisted.python import log
> log.theLogPublisher.observers.pop(0)

Or equivalently, as suggested to me on this list in February:
log.removeObserver(log.theLogPublisher.observers[0])

Cheers,
Einar




From andrewfr_ice at yahoo.com  Wed Apr 25 14:37:34 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Wed, 25 Apr 2007 11:37:34 -0700 (PDT)
Subject: [Twisted-Python] Advice on Debugging Stackless/Twisted
In-Reply-To: <E1Hgkqa-0008ME-02@pyramid.twistedmatrix.com>
Message-ID: <145067.98777.qm@web34203.mail.mud.yahoo.com>

Hello Jean-Paul:

>Could you re-send the program as an attachment?  It
>seems to have been mangled fairly badly in the
>original >email.

Sorry about that. I have enclosed an attachment.
Thanks!

Cheers,
Andrew

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: TestProcessor8.py
Type: text/x-python
Size: 9934 bytes
Desc: 2447817608-TestProcessor8.py
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070425/b9efeae8/attachment.py 

From andrewfr_ice at yahoo.com  Wed Apr 25 14:40:04 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Wed, 25 Apr 2007 11:40:04 -0700 (PDT)
Subject: [Twisted-Python] Re: [Stackless] Advice on Debugging
	Stackless/Twisted Problem involving Deferreds
In-Reply-To: <20070425094620.2d78e028@Fenix>
Message-ID: <194362.9678.qm@web34214.mail.mud.yahoo.com>

Hello Rodrigo:

--- Rodrigo Senra <rodsenra at gpr.com.br> wrote:

> Have you tried to enable defered debugging [1] ?
> If might give you some clues regarding what happens
> before the main loop halts.
> 
>
>http://twistedmatrix.com/documents/current/api/twisted.internet.defer.html#setDebugging

I didn't know about this method. Thanks! I am trying
to figure out how it is used (the documentation
implies something has to go wrong).

Cheers,
Andrew

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From jacob at internet24.de  Thu Apr 26 05:45:30 2007
From: jacob at internet24.de (Thomas Jacob)
Date: Thu, 26 Apr 2007 11:45:30 +0200
Subject: [Twisted-Python] Different logging class for .tac file run by
	twistd
In-Reply-To: <20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>
References: <1177499755.14331.14.camel@enterprise>
	<20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>
Message-ID: <1177580730.17849.9.camel@enterprise>

Thanks for the hint!

But this needs to be done after the app has already started.
And thus after the twistd default logger has already logged its first
lines.

Which probably means the default logger
will always log/rotate a bit before my custom
logger gets a chance, right?

So best use syslog as the initial logger....

On Wed, 2007-04-25 at 13:59 +0200, Thomas Herv? wrote:
> 
> Currently, the only way I know is to do this:
> 
> from twisted.python import log
> log.theLogPublisher.observers.pop(0)
> 
> Now, this is one of the thing that should be fixed for the next release 
> (I hope)
> with http://twistedmatrix.com/trac/ticket/638





From therve at free.fr  Thu Apr 26 06:30:10 2007
From: therve at free.fr (Thomas =?utf-8?b?SGVydsOp?=)
Date: Thu, 26 Apr 2007 12:30:10 +0200
Subject: [Twisted-Python] Different logging class for .tac file run by
	twistd
In-Reply-To: <1177580730.17849.9.camel@enterprise>
References: <1177499755.14331.14.camel@enterprise>
	<20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>
	<1177580730.17849.9.camel@enterprise>
Message-ID: <20070426123010.kedjnsgohizcc8g4@wasabox.wasabout.net>

Quoting Thomas Jacob <jacob at internet24.de>:

> Thanks for the hint!
>
> But this needs to be done after the app has already started.
> And thus after the twistd default logger has already logged its first
> lines.

True.

> Which probably means the default logger
> will always log/rotate a bit before my custom
> logger gets a chance, right?

Yes, but is that a problem ? In my case, the only visible things is a 
twistd.log
file next to other log files. Not really harmful.

-- 
Thomas





From jacob at internet24.de  Thu Apr 26 07:21:51 2007
From: jacob at internet24.de (Thomas Jacob)
Date: Thu, 26 Apr 2007 13:21:51 +0200
Subject: [Twisted-Python] Different logging class for .tac file run by
	twistd
In-Reply-To: <20070426123010.kedjnsgohizcc8g4@wasabox.wasabout.net>
References: <1177499755.14331.14.camel@enterprise>
	<20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>
	<1177580730.17849.9.camel@enterprise>
	<20070426123010.kedjnsgohizcc8g4@wasabox.wasabout.net>
Message-ID: <1177586511.18178.23.camel@enterprise>

No it's not a real problem, it's just that Twisted in general is very
clean, so....

> Yes, but is that a problem ? In my case, the only visible things is a 
> twistd.log
> file next to other log files. Not really harmful.





From python at blackslens.com  Thu Apr 26 11:23:43 2007
From: python at blackslens.com (Black)
Date: Thu, 26 Apr 2007 11:23:43 -0400
Subject: [Twisted-Python] qtreactor and OSX
Message-ID: <7D8D31A5-7E89-4FB6-86EE-F044C81BDC71@blackslens.com>

	
I have a program that uses QT and twisted. I've had no problem  
running it on a Linux machine, but when I moved it over to a Mac, I  
get the following error:

Traceback (most recent call last):
   File "cursor_test.py", line 8, in <module>
     from twisted.internet import qtreactor
   File "/Library/Frameworks/Python.framework/Versions/2.5/lib/ 
python2.5/site-packages/twisted/internet/qtreactor.py", line 7, in  
<module>
     from twisted.plugins.qtreactor_stub import errorMessage
ImportError: No module named qtreactor_stub


When I look in /Library/Frameworks/Python.framework/Versions/2.5/lib/ 
python2.5/site-packages/twisted/plugins, qtreactor_stub.py is indeed  
not present. Has anyone seen this before and can tell me what is  
going on here?

Any guidance would be appreciated...
Black



From exarkun at divmod.com  Thu Apr 26 11:54:46 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 26 Apr 2007 11:54:46 -0400
Subject: [Twisted-Python] qtreactor and OSX
In-Reply-To: <7D8D31A5-7E89-4FB6-86EE-F044C81BDC71@blackslens.com>
Message-ID: <20070426155446.19381.2012359656.divmod.quotient.5535@ohm>

On Thu, 26 Apr 2007 11:23:43 -0400, Black <python at blackslens.com> wrote:
>
>I have a program that uses QT and twisted. I've had no problem  running it 
>on a Linux machine, but when I moved it over to a Mac, I  get the following 
>error:
>
>Traceback (most recent call last):
>   File "cursor_test.py", line 8, in <module>
>     from twisted.internet import qtreactor
>   File "/Library/Frameworks/Python.framework/Versions/2.5/lib/ python2.5 
>/site-packages/twisted/internet/qtreactor.py", line 7, in  <module>
>     from twisted.plugins.qtreactor_stub import errorMessage
>ImportError: No module named qtreactor_stub
>
>
>When I look in /Library/Frameworks/Python.framework/Versions/2.5/lib/ 
>python2.5/site-packages/twisted/plugins, qtreactor_stub.py is indeed  not 
>present. Has anyone seen this before and can tell me what is  going on here?
>
>Any guidance would be appreciated...

This seems to be a bug in Twisted.  The module which it *should* be importing
is twisted.plugins.twisted_qtstub (which I am guessing you have).

Renaming twisted_qtstub to qtreactor_stub or changing qtreactor.py to import
the name that actually exists should fix this.

Jean-Paul



From hoadley at gmail.com  Thu Apr 26 12:53:56 2007
From: hoadley at gmail.com (Rob Hoadley)
Date: Thu, 26 Apr 2007 09:53:56 -0700
Subject: [Twisted-Python] Different logging class for .tac file run by
	twistd
In-Reply-To: <1177586511.18178.23.camel@enterprise>
References: <1177499755.14331.14.camel@enterprise>
	<20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>
	<1177580730.17849.9.camel@enterprise>
	<20070426123010.kedjnsgohizcc8g4@wasabox.wasabout.net>
	<1177586511.18178.23.camel@enterprise>
Message-ID: <9bb390e70704260953o145d7c28n9b7b607dd2b8f26c@mail.gmail.com>

> No it's not a real problem, it's just that Twisted in general is very
> clean, so....



I've kept things as clean as I can by adding the twistd option
--logfile=same_as_LOG_DIR_LOG_FILE
using your LOG_FILE example above.  Additionally, adding the code to drop
the initial log observer and a log service.

The twistd log then logs the three or four lines and then get's dropped
after the tac code starts and hits the logobserver line.  Then, the log
defined in your tac starts up and takes over from there. It keeps the
twistd.log out of the picture.

-rob


> Yes, but is that a problem ? In my case, the only visible things is a
> > twistd.log
> > file next to other log files. Not really harmful.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070426/f472df37/attachment.htm 

From rampeters at gmail.com  Thu Apr 26 13:57:09 2007
From: rampeters at gmail.com (Ram Peters)
Date: Thu, 26 Apr 2007 13:57:09 -0400
Subject: [Twisted-Python] newb: Twisted-Goodies asynch cluster and TaskQueue
Message-ID: <81b45360704261057n276e6bdicc06058ec7464d23@mail.gmail.com>

I have  several log files to parse every hour.  I am thinking of using
Twisted-Goodies asynch cluster and TaskQueue.  What I wanted to do is
assign part of the file or a single file, in the taskqueue and set
different client (node) to do the parsing.  Number of logfiles and
size
of log files may increase in the future.

My question is, are these right tool to use for this task?  Is there
any examples that uses asynch cluster and TaskQueue?

Thank You.



From general at eepatents.com  Thu Apr 26 15:26:56 2007
From: general at eepatents.com (Ed Suominen)
Date: Thu, 26 Apr 2007 15:26:56 -0400
Subject: [Twisted-Python] newb: Twisted-Goodies asynch cluster and
	TaskQueue
In-Reply-To: <81b45360704261057n276e6bdicc06058ec7464d23@mail.gmail.com>
References: <81b45360704261057n276e6bdicc06058ec7464d23@mail.gmail.com>
Message-ID: <4630FD00.1030203@eepatents.com>

Ram Peters wrote:
> I have  several log files to parse every hour.  I am thinking of
> using Twisted-Goodies asynch cluster and TaskQueue.  What I wanted to
> do is assign part of the file or a single file, in the taskqueue and
> set different client (node) to do the parsing.  Number of logfiles
> and size of log files may increase in the future.
> 
> My question is, are these right tool to use for this task?  Is there 
> any examples that uses asynch cluster and TaskQueue?

Well, I think it would be, but then I'm a bit biased, as the author!

My guess is that, unless the log files take more than a few minutes each
to parse, you'd be best off assigning the parsing of each file to its
own job. Each job goes into the queue for dispatching to the nodes as
they become available. You certainly could split the parsing of a file
into separate jobs if that makes sense, though.

To avoid having to read the file contents into memory for each job, you
might want to include a chunked-download PB referenceable object as an
argument to the job call. The node can do remote calls on the
referenceable that it receives to get the file data on a non-queued
"back channel" of sorts. (The same PB & TCP connection would be used,
but it would be independent of the task queue.)

I'm interested in seeing how others use asynCluster to distribute work
among different nodes, and would be willing to give you some help via
private email if you like. I have a chunked-download PB referenceable
that you could use, too. (It's pretty basic, just slightly modified from
what PB itself provides.)

Best regards,
Ed Suominen




From rampeters at gmail.com  Thu Apr 26 22:50:09 2007
From: rampeters at gmail.com (Ram Peters)
Date: Thu, 26 Apr 2007 22:50:09 -0400
Subject: [Twisted-Python] newb: Twisted-Goodies asynch cluster and
	TaskQueue
In-Reply-To: <4630FD00.1030203@eepatents.com>
References: <81b45360704261057n276e6bdicc06058ec7464d23@mail.gmail.com>
	<4630FD00.1030203@eepatents.com>
Message-ID: <81b45360704261950y4c7c2f56v4e5dd51b1a91382b@mail.gmail.com>

> I'm interested in seeing how others use asynCluster to distribute work
> among different nodes, and would be willing to give you some help via
> private email if you like. I have a chunked-download PB referenceable
> that you could use, too. (It's pretty basic, just slightly modified from
> what PB itself provides.)

At the moment, I think I am going to put this on a back burner.  When
I decided to implement it, I will probably ask you for help.

One more thing I wanted to ask you:

I am also thinking of using asynCluster & TaskQueue in another
project, where web server sends an python object (upon certain event
being triggered by the user), to the remote backend server. This
backend server puts the object in the queue and assigns a node to
update necessary database tables.  If I use asynCluster, then
asynCluster server would recieve the object and then I need to put
this in TaskQueue so that asysncCluster Client can retrieve it, check
certain conditions and update the appropriate database tables.

My question is, can I do this kind of stuff with asyncCluster and
TaskQueue and what issues I may have to consider?

Thank you.



From python at blackslens.com  Thu Apr 26 22:59:16 2007
From: python at blackslens.com (Black)
Date: Thu, 26 Apr 2007 22:59:16 -0400
Subject: [Twisted-Python] qtreactor and OSX
In-Reply-To: <20070426155446.19381.2012359656.divmod.quotient.5535@ohm>
References: <20070426155446.19381.2012359656.divmod.quotient.5535@ohm>
Message-ID: <AA736E68-1D0E-4603-B33F-01601E12550F@blackslens.com>


On Apr 26, 2007, at 11:54 AM, Jean-Paul Calderone wrote:

> On Thu, 26 Apr 2007 11:23:43 -0400, Black <python at blackslens.com>  
> wrote:
>>
>> I have a program that uses QT and twisted. I've had no problem   
>> running it on a Linux machine, but when I moved it over to a Mac,  
>> I  get the following error:
>>
>> Traceback (most recent call last):
>>   File "cursor_test.py", line 8, in <module>
>>     from twisted.internet import qtreactor
>>   File "/Library/Frameworks/Python.framework/Versions/2.5/lib/  
>> python2.5 /site-packages/twisted/internet/qtreactor.py", line 7,  
>> in  <module>
>>     from twisted.plugins.qtreactor_stub import errorMessage
>> ImportError: No module named qtreactor_stub
>>
>>
>> When I look in /Library/Frameworks/Python.framework/Versions/2.5/ 
>> lib/ python2.5/site-packages/twisted/plugins, qtreactor_stub.py is  
>> indeed  not present. Has anyone seen this before and can tell me  
>> what is  going on here?
>>
>> Any guidance would be appreciated...
>
> This seems to be a bug in Twisted.  The module which it *should* be  
> importing
> is twisted.plugins.twisted_qtstub (which I am guessing you have).
>
> Renaming twisted_qtstub to qtreactor_stub or changing qtreactor.py  
> to import
> the name that actually exists should fix this.
>
> Jean-Paul


Thanks. I did some poking and I didn't have twisted_qtstub either.  
I'm not sure why, but I rebuilt from source and discovered that all  
it does at this point is raise an exception to tell me that qtreactor  
is no longer included in the Twisted distribution... Alas.

However, it also points to a place to download the necessary parts -  
I'll post it again here on the theory that I'm no the only one who  
couldn't find it initially:

http://twistedmatrix.com/trac/wiki/QTReactor





From matt at zgroupplc.com  Fri Apr 27 06:51:05 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Fri, 27 Apr 2007 11:51:05 +0100
Subject: [Twisted-Python] Load testing twistd + twisted.soap
Message-ID: <24B83043-F677-42EE-9377-F2C5CCA06DA5@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi All,

I am attempting to write a simple load test for my soap web services.  
I am running the application under twistd and using trial for unit  
tests. I understand that for a real load test, I would use a tool  
like ab or http_load in a more scientific environment but I want to  
get a quick feel for how well a twisted application stands up against  
low levels of load on my dev box and I feel that there is merit in  
setting a baseline level of performance in a unit test.

I am running into problems with the following:

class SOAPTestCase(BaseTestCase):

     url = 'http://localhost:8080/'

     def setUp(self):
         self.proxy = Proxy(self.url)

     def testMutipleAPCs(self):
         """Assert that multiple APCs succeed"""
         deferred = defer.Deferred()
         for i in range(100):
             d = self.testAPCTimeout()
             d.chainDeferred(deferred)
         return deferred

     def testAPCTimeout(self):
         deferred = self.proxy.callRemote('processApc', 0,  
self._getRandomString())
         deferred.addBoth(self.APCTimeout)
         return deferred

     def APCTimeout(self, result):
         requestIdForApc, requestDataForApc, errorFlag, result = result

         self.assertEqual(result, res)
         self.assertTrue(isinstance(requestIdForApc, str))
         self.assertEqual(id, requestIdForApc)
         self.assertTrue(isinstance(requestDataForApc, str))
         self.assertEqual(data, requestDataForApc)

         self.assertTrue(isinstance(errorFlag, str))
         self.assertEqual(cp.cp_base.getErrorFlag(cp.cp_base.APC,  
err), errorFlag)

For a start, I get a lot of 'reactor left in unclean state' warnings.  
This number of twisted.internet.tcp.Client instances that this  
reports on is never usually all of them:

twisted.trial.util.DirtyReactorError: THIS WILL BECOME AN ERROR SOON!  
reactor left in unclean state, the following Selectables were left  
over:  <<class 'twisted.internet.tcp.Client'> to ('localhost', 8080)  
at 1782390> <<class 'twisted.internet.tcp.Client'> to ('localhost',  
8080) at 1782150> ...

In addition I get pending time calls still pending:

twisted.trial.util.PendingTimedCallsError: pendingTimedCalls still  
pending (consider setting twisted.internet.base.DelayedCall.debug =  
True): <DelayedCall 24636392 [24.8269200325s] called=0 cancelled=0  
Client.failIfNotConnected(TimeoutError('',))> ...

Does any twisted genius have any idea what I am doing wrong?

Regards,


Matt


m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGMdWcyI6MkdKPngkRAqTgAJ9I9dxz3B3EYPMfY8fY09kVqmVMdACfSqa2
wPgXzPQMX+FgKcC41oWEQA8=
=V8JT
-----END PGP SIGNATURE-----



From rschroev_nospam_ml at fastmail.fm  Fri Apr 27 11:18:22 2007
From: rschroev_nospam_ml at fastmail.fm (Roel Schroeven)
Date: Fri, 27 Apr 2007 17:18:22 +0200
Subject: [Twisted-Python] Re: UDP + TCP + Serial
In-Reply-To: <462922A5.1030501@thiengineering.ch>
References: <f0b0o6$7rm$1@sea.gmane.org> <462922A5.1030501@thiengineering.ch>
Message-ID: <f0t47u$9l3$1@sea.gmane.org>

Werner Thie schreef:
> Might be that I have something useful for you - please see the attached 
> zipped code. Basic idea was to have a serially connected device 
> accepting commands and delivering status information connected to a 
> browser via a server delivering LiveFragments.
> 
> A few problems remain open, like:
>    - how does one uniquely connect only one browser capable of sendign 
> commands (the SPS is a single resource)
> 
>    - are other browsers able to connect and do a status display only
> 
> Forgive me if I did did not use twisted/nevow/athenain in all aspects 
> correctly, but with lots of source/doc re- and rereading I was able to 
> bring it that far. If there are patterns I should avoid or correct I 
> will gladly do so if pointed out to me.

Thank you for your answer. Sorry for my late answer -- I haven't had 
much time to respond in the meantime. I will have a look at your code.

Cheers,
Roel

-- 
If I have been able to see further, it was only because I stood
on the shoulders of giants.  -- Isaac Newton

Roel Schroeven




From aryeh at bigfoot.com  Fri Apr 27 11:36:45 2007
From: aryeh at bigfoot.com (Arye)
Date: Fri, 27 Apr 2007 17:36:45 +0200
Subject: [Twisted-Python] sAsync example.
Message-ID: <6f63a0ad0704270836n15b798a6ka530a36b9c3657c4@mail.gmail.com>

Hello all,
I was able to run the "semi-functional Twisted XML-RPC Server"
example, available on http://foss.eepatents.com/sAsync/wiki/Examples
successfully.

However, I have the error message below on the server side when
changing the database from sqlite to postgres.

Any info would be greatly appreciated.

Arye.

___________________begin
C:\AH\WORK\tutorials\SAsync\OrigPG>\Python24\python.exe \Python24\scripts\twistd
.py -noy server.py
2007/04/27 16:41 Paris, Madrid [-] Log opened.
2007/04/27 16:41 Paris, Madrid [-] twistd 2.1.0
(C:\Python24\python.exe 2.4.4) starting up
2007/04/27 16:41 Paris, Madrid [-] reactor class:
twisted.internet.selectreactor.SelectReactor
2007/04/27 16:41 Paris, Madrid [-] Loading server.py...
2007/04/27 16:41 Paris, Madrid [-] Loaded.
2007/04/27 16:41 Paris, Madrid [-] twisted.web.server.Site starting on 8080
2007/04/27 16:41 Paris, Madrid [-] Starting factory
<twisted.web.server.Site instance at 0x011A7C38>
2007/04/27 16:41 Paris, Madrid [-] Traceback (most recent call last):
        Failure: psycopg2.ProgrammingError: no results to fetch

2007/04/27 16:41 Paris, Madrid [-] 127.0.0.1 - - [27/Apr/2007:14:41:52
+0000] "POST /RPC2 HTTP/1.0" 200 263 "-" "Twisted/XMLRPClib"
2007/04/27 17:00 Paris, Madrid [-] Received SIGINT, shutting down.
2007/04/27 17:00 Paris, Madrid [-] (Port 8080 Closed)
2007/04/27 17:00 Paris, Madrid [-] Stopping factory
<twisted.web.server.Site instance at 0x011A7C38>
2007/04/27 17:00 Paris, Madrid [-] Main loop terminated.
2007/04/27 17:00 Paris, Madrid [-] Server Shut Down.
___________________end



From rampeters at gmail.com  Sat Apr 28 12:21:11 2007
From: rampeters at gmail.com (Ram Peters)
Date: Sat, 28 Apr 2007 12:21:11 -0400
Subject: [Twisted-Python] Twisted-Goodies: asyncluster Getting Started
Message-ID: <81b45360704280921n75f1397axb944c664ec6fc6ae@mail.gmail.com>

Is there a readme file or an example how to setup server and client
and add jobs to it.  If someone can share a simple example, it would
be great.  I think this is a good tool.  I am a newb.  Example would
be great so the masses can hop on.

Thank you.



From exarkun at twistedmatrix.com  Sun Apr 29 00:05:02 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 29 Apr 2007 04:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1177819502.35.1973184899@twistedmatrix.com

Bug summary
______________________
Summary for 2007-04-22 through 2007-04-29
Bugs opened: 22    Bugs closed: 12  Total open bugs: 926 (+10)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +3  |Highest:  -4          |Conch:    +7           
|Enhancement:  +8  |Normal:  +15          |Core:     +0           
|Task:         -1  |Low:      -1          |Trial:    +3           
                                          |Vfs:      +1           
                                          |Web2:     +0           
                                          |Website:  -2           
                                          |Words:    +1           


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2604] SFTP VFS adapter mishandles renaming directories (opened by jml)
    defect          vfs        http://twistedmatrix.com/trac/ticket/2604

[#2606] XMPP SASL DIGEST-MD5 authentication breaks with jabberd 2.1.4 (opened by ralphm) (CLOSED, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2606

[#2609] Namespace issues with prefixes reuse in twisted.words.xish. (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2609

                    ===== Normal =====
[#2588] Quick way of telling which release a revision came under (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2588

[#2589] trial --help should warn of the dangers of --temp-directory (opened by jml)
    defect          trial      http://twistedmatrix.com/trac/ticket/2589

[#2590] [USE CASE] SFTP server (opened by jml)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2590

[#2591] [USE CASE] XML-RPC driven authentication (opened by jml)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2591

[#2592] [USE CASE] Responding to authentication events (opened by jml)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2592

[#2593] [USE CASE] Virtual file system for SFTP service (opened by jml)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2593

[#2594] Very very basic SCP support (opened by philmayers)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2594

[#2596] Questionable priority assigned to _allowedMethods in twisted.web2.resource.RenderMixin (opened by terrycojones)
    defect          web2       http://twistedmatrix.com/trac/ticket/2596

[#2597] trac: TypeError: <lambda>() got multiple values for keyword argument 'asc' (opened by slamb) (CLOSED, wontfix)
    defect          website    http://twistedmatrix.com/trac/ticket/2597

[#2598] Monkey-patching support code (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2598

[#2599] trial enhancment - rerun failures against specific revision (opened by bigdog)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2599

[#2600] dtrial - specify which machines (platforms) should be used to execute tests (opened by bigdog) (CLOSED, duplicate)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2600

[#2601] Improve plugin documentation (opened by aknuds-1)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2601

[#2602] dtrial - add -exarkun option to exeucte all of your tests on exarkuns machine (opened by bigdog) (CLOSED, wontfix)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2602

[#2603] Simple API for using the conch SFTP client (opened by jml)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2603

[#2605] stdlib unittest change breaks a trial test (opened by therve)
    defect          trial      http://twistedmatrix.com/trac/ticket/2605

[#2607] conch.checks.SSHPublicKeyDatabase calls os.seteuid/os.setegid even if it's not necessary (opened by therve)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2607

[#2608] twisted.internet.qtreactor tries to import a module which never exists (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2608

                    ===== Low =====
[#2595] sftp and ftp should share (possibly via adapter) same filesystem interface (opened by itamarst)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2595



Closed Bugs
______________________
                    ===== Highest =====
[#2574] improve twistd logging setup factoring to remove duplicate code and simplify extending it (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2574

[#1844] StringTransport should behave more like a real transport (opened by washort, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1844

[#2585] words examples index is missing some links (opened by therve, closed by therve, fixed)
    enhancement     website    http://twistedmatrix.com/trac/ticket/2585

[#2539] Add epoll reactor to the choosing-reactor doc (opened by therve, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2539

[#2587] twisted.conch.manhole.Manhole.__init__ passes extra arguments to parent initializer (opened by exarkun, closed by exarkun, fixed)
    defect          conch      http://twistedmatrix.com/trac/ticket/2587

[#2606] XMPP SASL DIGEST-MD5 authentication breaks with jabberd 2.1.4 (opened by ralphm, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2606

[#2575] There should be a way to create a LogFile instance from a full file path (opened by therve, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2575

                    ===== Normal =====
[#2597] trac: TypeError: <lambda>() got multiple values for keyword argument 'asc' (opened by slamb, closed by exarkun, wontfix)
    defect          website    http://twistedmatrix.com/trac/ticket/2597

[#2602] dtrial - add -exarkun option to exeucte all of your tests on exarkuns machine (opened by bigdog, closed by jml, wontfix)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2602

[#2600] dtrial - specify which machines (platforms) should be used to execute tests (opened by bigdog, closed by jml, duplicate)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2600

                    ===== Low =====
[#2580] twisted.web2.stream infinite loop (opened by gthomas, closed by gthomas, duplicate)
    defect          web2       http://twistedmatrix.com/trac/ticket/2580

[#959 ] Generate documentation from lore automatically after checkins (opened by hypatia, closed by therve, duplicate)
    enhancement     website    http://twistedmatrix.com/trac/ticket/959





From exarkun at divmod.com  Sun Apr 29 09:35:50 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 29 Apr 2007 09:35:50 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
 decorator which stores all of the function and method calls
In-Reply-To: <E1Hi26e-0008Qs-00@wolfwood>
Message-ID: <20070429133550.19381.583607652.divmod.quotient.6265@ohm>

On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange <jml at wolfwood.twistedmatrix.com> wrote:
>Author: jml
>Date: Sat Apr 28 23:37:56 2007
>New Revision: 20094
>
>Modified:
>   branches/spew-decorator/twisted/python/util.py
>   branches/spew-decorator/twisted/test/test_util.py
>
>Log:
>Add a spewing decorator which stores all of the function and method calls
>within a function in a structured data object.
>

What ticket is this associated with?

Also, there is already an improved spew function in Epsilon which does nice
things like track call depth and exception propagation and call arguments.

Jean-Paul



From eprparadocs at gmail.com  Sun Apr 29 11:36:42 2007
From: eprparadocs at gmail.com (Chaz.)
Date: Sun, 29 Apr 2007 11:36:42 -0400
Subject: [Twisted-Python] Looking for an answer...
Message-ID: <4634BB8A.8080405@gmail.com>

I have programmed very traditional systems passed on fork and pthreads 
and have used state machine systems. Last year I started working with 
Twisted Matrix. Each has their appropriate application.

I started thinking about how to implement the following in Twisted, and 
realized I don't know if it is possible. I thought I would ask the list 
to find out if someone can come up with an answer.

Suppose I have a sequence of instructions, some of which can take a long 
time. For example in a non-Twisted Matrix system I would do:

	....do some computation....

	proxy = xmlrpc.Proxy("http://....")
	proxy.CallRemote(....)

	... take the results of the CallRemote and use them...

In this example I assume CallRemote() only returns a result when it has 
completed.

In the Twisted Matrix system I would do something like:

	...do some computation....
	proxy = twisted.web.xmlrpc.Proxy("http://...")
	defer = proxy.CallRemote(...)
	defer.addErrback(fcs_storeErr,...)
         defer.addCallback(fcs_storeDone,...)

And I would define fcs_StoreErr() and fcs_storeDone(). In 
fcs_storeDone() I would take the results from the CallRemote() and 
process them.

My question is easy (the answer might be hard):

	Can I emulate the non-Twisted example in the Twisted Matrix
system. In other words can I create something like CallRemote() which 
returns only there is a result to process and get away from having to 
explicitly use a defer?

Peace,
Chaz



From itamar at itamarst.org  Sun Apr 29 12:45:16 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 29 Apr 2007 12:45:16 -0400
Subject: [Twisted-Python] Looking for an answer...
In-Reply-To: <4634BB8A.8080405@gmail.com>
References: <4634BB8A.8080405@gmail.com>
Message-ID: <1177865116.7353.0.camel@localhost.localdomain>

On Sun, 2007-04-29 at 11:36 -0400, Chaz. wrote:

> 	Can I emulate the non-Twisted example in the Twisted Matrix
> system. In other words can I create something like CallRemote() which 
> returns only there is a result to process and get away from having to 
> explicitly use a defer?

You might want to look at twisted.internet.defer.inlineCallbacks.

-- 
Itamar Shtull-Trauring
http://itamarst.org





From jml at mumak.net  Sun Apr 29 19:04:24 2007
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 30 Apr 2007 09:04:24 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <20070429133550.19381.583607652.divmod.quotient.6265@ohm>
References: <E1Hi26e-0008Qs-00@wolfwood>
	<20070429133550.19381.583607652.divmod.quotient.6265@ohm>
Message-ID: <d06a5cd30704291604r422cd22do8c207580f6108c06@mail.gmail.com>

On 4/29/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange <jml at wolfwood.twistedmatrix.com> wrote:
> >Author: jml
> >Date: Sat Apr 28 23:37:56 2007
> >New Revision: 20094
> >
> >Modified:
> >   branches/spew-decorator/twisted/python/util.py
> >   branches/spew-decorator/twisted/test/test_util.py
> >
> >Log:
> >Add a spewing decorator which stores all of the function and method calls
> >within a function in a structured data object.
> >
>
> What ticket is this associated with?
>

None, as yet.

> Also, there is already an improved spew function in Epsilon which does nice
> things like track call depth and exception propagation and call arguments.
>

Should it go into Twisted?

cheers,
jml



From exarkun at divmod.com  Sun Apr 29 22:30:50 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 29 Apr 2007 22:30:50 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <d06a5cd30704291604r422cd22do8c207580f6108c06@mail.gmail.com>
Message-ID: <20070430023050.19381.565813081.divmod.quotient.6401@ohm>

On Mon, 30 Apr 2007 09:04:24 +1000, Jonathan Lange <jml at mumak.net> wrote:
>On 4/29/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>>On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange 
>><jml at wolfwood.twistedmatrix.com> wrote:
>> >Author: jml
>> >Date: Sat Apr 28 23:37:56 2007
>> >New Revision: 20094
>> >
>> >Modified:
>> >   branches/spew-decorator/twisted/python/util.py
>> >   branches/spew-decorator/twisted/test/test_util.py
>> >
>> >Log:
>> >Add a spewing decorator which stores all of the function and method calls
>> >within a function in a structured data object.
>> >
>>
>>What ticket is this associated with?
>
>None, as yet.

I guess we should avoid having branches without tickets.  There's still the
sandbox to develop stuff where the direction is uncertain.

>>Also, there is already an improved spew function in Epsilon which does nice
>>things like track call depth and exception propagation and call arguments.
>
>Should it go into Twisted?
>

I don't have any problem with it going into Twisted, and if you're
looking for more informative spewage, it's definitely handy.

I would suggest it unequivocally, but it has no unit tests (it's pretty
old).  It's probably salvageable, but even if it not, it should at least
suggest some useful things.

Jean-Paul



From jml at mumak.net  Sun Apr 29 22:45:59 2007
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 30 Apr 2007 12:45:59 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <20070430023050.19381.565813081.divmod.quotient.6401@ohm>
References: <d06a5cd30704291604r422cd22do8c207580f6108c06@mail.gmail.com>
	<20070430023050.19381.565813081.divmod.quotient.6401@ohm>
Message-ID: <d06a5cd30704291945k29ef86bfr2238f43ad02d378a@mail.gmail.com>

On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Mon, 30 Apr 2007 09:04:24 +1000, Jonathan Lange <jml at mumak.net> wrote:
> >On 4/29/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> >>On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange
> >><jml at wolfwood.twistedmatrix.com> wrote:
> >> >Author: jml
> >> >Date: Sat Apr 28 23:37:56 2007
> >> >New Revision: 20094
> >> >
> >> >Modified:
> >> >   branches/spew-decorator/twisted/python/util.py
> >> >   branches/spew-decorator/twisted/test/test_util.py
> >> >
> >> >Log:
> >> >Add a spewing decorator which stores all of the function and method calls
> >> >within a function in a structured data object.
> >> >
> >>
> >>What ticket is this associated with?
> >
> >None, as yet.
>
> I guess we should avoid having branches without tickets.  There's still the
> sandbox to develop stuff where the direction is uncertain.

What's wrong with renaming the branch to include a ticket number after
a suitable ticket has been filed?

I thought the sandbox was for random bits of junk code[1] and
Foolscap, not branches of Twisted.

cheers,
jml

[1] FWIW, these days I just push branches up to
launchpad.net/~jml/+junk/foo to achieve the same effect as a commit to
sandbox.



From exarkun at divmod.com  Sun Apr 29 23:24:36 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 29 Apr 2007 23:24:36 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <d06a5cd30704291945k29ef86bfr2238f43ad02d378a@mail.gmail.com>
Message-ID: <20070430032436.19381.1071396258.divmod.quotient.6411@ohm>

On Mon, 30 Apr 2007 12:45:59 +1000, Jonathan Lange <jml at mumak.net> wrote:
>On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>>On Mon, 30 Apr 2007 09:04:24 +1000, Jonathan Lange <jml at mumak.net> wrote:
>> >On 4/29/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>> >>On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange
>> >><jml at wolfwood.twistedmatrix.com> wrote:
>> >> >Author: jml
>> >> >Date: Sat Apr 28 23:37:56 2007
>> >> >New Revision: 20094
>> >> >
>> >> >Modified:
>> >> >   branches/spew-decorator/twisted/python/util.py
>> >> >   branches/spew-decorator/twisted/test/test_util.py
>> >> >
>> >> >Log:
>> >> >Add a spewing decorator which stores all of the function and method 
>>calls
>> >> >within a function in a structured data object.
>> >> >
>> >>
>> >>What ticket is this associated with?
>> >
>> >None, as yet.
>>
>>I guess we should avoid having branches without tickets.  There's still the
>>sandbox to develop stuff where the direction is uncertain.
>
>What's wrong with renaming the branch to include a ticket number after
>a suitable ticket has been filed?

That operation is unsupported by the tool-chain.  But even so, for the
reasons below, it's better to start things off with a ticket, rather than
eventually introduce one.

>
>I thought the sandbox was for random bits of junk code[1] and
>Foolscap, not branches of Twisted.

More or less, yes.  Anything goes in the sandbox.  Sticking whole Twisted
branches there probably isn't the best idea on the world, but developing
functionality that actually needs to go into the Twisted tree probably also
shouldn't be undertaken without some minimal amount of planning.  That's
supposed to be part of what tickets are for (although I recognize that
sometimes they do not end up filling that role).  When I suggested the
sandbox, I really had in mind the development of some spewer-related
functionality in an independent module with little or no Twisted integration
(since from a quick look at the branch, that seemed to be what the code
looked like so far).

In case that's a little too muddled and fuzzy to make sense, here's another
angle.  A ticket serves as a point where the relevance, utility, correctness,
whatever, of a change can be discussed.  If someone is interested in some
development which is taking place, they should be able to find that point
easily and without interactive assistance from anyone.  If not, their input
may be lost or delayed until it is useless or integrating it costs more than
the ultimate payoff.

The kind of "just-in-time" ticket creation that already happens so frequently
in Twisted development is something it would be nice to move away from.  It's
completely fine to find a bug, create a ticket, and develop a fix in a brief
period of time and I don't want to discourage that.  However, and this is
really close to the heart of UQDS, for refactoring and feature enhancements,
the end result is much improved by input from other people.  Leaving a little
time between ticket creation and actual development doesn't guarantee that
any useful input will be offered by other developers, but it at least presents
the possibility.  If development starts _before_ anyone else even knows what
it's about, obviously that doesn't present any window at all.  This really
also applies to bug fixes, but I think it's at least /possible/ in some of
those cases for the necessary change to be sufficiently straightforward such
that the process works well enough with only two developers involved.

If any of this seems unreasonable, please say so and let's discuss it.  The
goal here is to make Twisted the best piece of software we can make it,
nothing else.

Jean-Paul



From jml at mumak.net  Mon Apr 30 04:01:23 2007
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 30 Apr 2007 18:01:23 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <20070430032436.19381.1071396258.divmod.quotient.6411@ohm>
References: <d06a5cd30704291945k29ef86bfr2238f43ad02d378a@mail.gmail.com>
	<20070430032436.19381.1071396258.divmod.quotient.6411@ohm>
Message-ID: <d06a5cd30704300101p4b305897mad134f4d04ec5fc5@mail.gmail.com>

On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Mon, 30 Apr 2007 12:45:59 +1000, Jonathan Lange <jml at mumak.net> wrote:
> >On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> >>On Mon, 30 Apr 2007 09:04:24 +1000, Jonathan Lange <jml at mumak.net> wrote:
> >> >On 4/29/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> >> >>On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange
> >> >><jml at wolfwood.twistedmatrix.com> wrote:
> >> >> >Author: jml
> >> >> >Date: Sat Apr 28 23:37:56 2007
> >> >> >New Revision: 20094
> >> >> >
> >> >> >Modified:
> >> >> >   branches/spew-decorator/twisted/python/util.py
> >> >> >   branches/spew-decorator/twisted/test/test_util.py
> >> >> >
> >> >> >Log:
> >> >> >Add a spewing decorator which stores all of the function and method
> >>calls
> >> >> >within a function in a structured data object.
> >> >> >
> >> >>
> >> >>What ticket is this associated with?
> >> >
> >> >None, as yet.
> >>
> >>I guess we should avoid having branches without tickets.  There's still the
> >>sandbox to develop stuff where the direction is uncertain.
> >
> >What's wrong with renaming the branch to include a ticket number after
> >a suitable ticket has been filed?
>
> That operation is unsupported by the tool-chain.  But even so, for the
> reasons below, it's better to start things off with a ticket, rather than
> eventually introduce one.
>
> >
> >I thought the sandbox was for random bits of junk code[1] and
> >Foolscap, not branches of Twisted.
>
> More or less, yes.  Anything goes in the sandbox.  Sticking whole Twisted
> branches there probably isn't the best idea on the world, but developing
> functionality that actually needs to go into the Twisted tree probably also
> shouldn't be undertaken without some minimal amount of planning.  That's
> supposed to be part of what tickets are for (although I recognize that
> sometimes they do not end up filling that role).  When I suggested the
> sandbox, I really had in mind the development of some spewer-related
> functionality in an independent module with little or no Twisted integration
> (since from a quick look at the branch, that seemed to be what the code
> looked like so far).
>
> In case that's a little too muddled and fuzzy to make sense, here's another
> angle.  A ticket serves as a point where the relevance, utility, correctness,
> whatever, of a change can be discussed.  If someone is interested in some
> development which is taking place, they should be able to find that point
> easily and without interactive assistance from anyone.  If not, their input
> may be lost or delayed until it is useless or integrating it costs more than
> the ultimate payoff.
>
> The kind of "just-in-time" ticket creation that already happens so frequently
> in Twisted development is something it would be nice to move away from.  It's
> completely fine to find a bug, create a ticket, and develop a fix in a brief
> period of time and I don't want to discourage that.  However, and this is
> really close to the heart of UQDS, for refactoring and feature enhancements,
> the end result is much improved by input from other people.  Leaving a little
> time between ticket creation and actual development doesn't guarantee that
> any useful input will be offered by other developers, but it at least presents
> the possibility.  If development starts _before_ anyone else even knows what
> it's about, obviously that doesn't present any window at all.  This really
> also applies to bug fixes, but I think it's at least /possible/ in some of
> those cases for the necessary change to be sufficiently straightforward such
> that the process works well enough with only two developers involved.
>
> If any of this seems unreasonable, please say so and let's discuss it.  The
> goal here is to make Twisted the best piece of software we can make it,
> nothing else.
>


Thanks for the thoughtful reply.

>From my perspective, the problem here is that strict adherence to UQDS
as described in your email is that there is no real room for
exploratory coding.

At other times, I have wanted to muck around doing some Trial
refactoring, I filed a ticket which stated my intentions with all the
clarity available, something along the lines of "muck around doing
trial refactoring". I was chastised for filing such a ticket (fair
enough, it's a lousy ticket), so I stopped working along those lines.

This time, I decided to not file a ticket, because I did not want to
prematurely problem of concisely defining my work. I am being
chastised (albeit gently) for such work, and I will probably stop
working on this code.



From jml at mumak.net  Mon Apr 30 04:02:38 2007
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 30 Apr 2007 18:02:38 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <d06a5cd30704300101p4b305897mad134f4d04ec5fc5@mail.gmail.com>
References: <d06a5cd30704291945k29ef86bfr2238f43ad02d378a@mail.gmail.com>
	<20070430032436.19381.1071396258.divmod.quotient.6411@ohm>
	<d06a5cd30704300101p4b305897mad134f4d04ec5fc5@mail.gmail.com>
Message-ID: <d06a5cd30704300102y3bcd3a12gf78a95f69f0becca@mail.gmail.com>

I sent this email by accident during the process of drafting. Please
ignore until I write my email in full.

On 4/30/07, Jonathan Lange <jml at mumak.net> wrote:
> On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> > On Mon, 30 Apr 2007 12:45:59 +1000, Jonathan Lange <jml at mumak.net> wrote:
> > >On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> > >>On Mon, 30 Apr 2007 09:04:24 +1000, Jonathan Lange <jml at mumak.net> wrote:
> > >> >On 4/29/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> > >> >>On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange
> > >> >><jml at wolfwood.twistedmatrix.com> wrote:
> > >> >> >Author: jml
> > >> >> >Date: Sat Apr 28 23:37:56 2007
> > >> >> >New Revision: 20094
> > >> >> >
> > >> >> >Modified:
> > >> >> >   branches/spew-decorator/twisted/python/util.py
> > >> >> >   branches/spew-decorator/twisted/test/test_util.py
> > >> >> >
> > >> >> >Log:
> > >> >> >Add a spewing decorator which stores all of the function and method
> > >>calls
> > >> >> >within a function in a structured data object.
> > >> >> >
> > >> >>
> > >> >>What ticket is this associated with?
> > >> >
> > >> >None, as yet.
> > >>
> > >>I guess we should avoid having branches without tickets.  There's still the
> > >>sandbox to develop stuff where the direction is uncertain.
> > >
> > >What's wrong with renaming the branch to include a ticket number after
> > >a suitable ticket has been filed?
> >
> > That operation is unsupported by the tool-chain.  But even so, for the
> > reasons below, it's better to start things off with a ticket, rather than
> > eventually introduce one.
> >
> > >
> > >I thought the sandbox was for random bits of junk code[1] and
> > >Foolscap, not branches of Twisted.
> >
> > More or less, yes.  Anything goes in the sandbox.  Sticking whole Twisted
> > branches there probably isn't the best idea on the world, but developing
> > functionality that actually needs to go into the Twisted tree probably also
> > shouldn't be undertaken without some minimal amount of planning.  That's
> > supposed to be part of what tickets are for (although I recognize that
> > sometimes they do not end up filling that role).  When I suggested the
> > sandbox, I really had in mind the development of some spewer-related
> > functionality in an independent module with little or no Twisted integration
> > (since from a quick look at the branch, that seemed to be what the code
> > looked like so far).
> >
> > In case that's a little too muddled and fuzzy to make sense, here's another
> > angle.  A ticket serves as a point where the relevance, utility, correctness,
> > whatever, of a change can be discussed.  If someone is interested in some
> > development which is taking place, they should be able to find that point
> > easily and without interactive assistance from anyone.  If not, their input
> > may be lost or delayed until it is useless or integrating it costs more than
> > the ultimate payoff.
> >
> > The kind of "just-in-time" ticket creation that already happens so frequently
> > in Twisted development is something it would be nice to move away from.  It's
> > completely fine to find a bug, create a ticket, and develop a fix in a brief
> > period of time and I don't want to discourage that.  However, and this is
> > really close to the heart of UQDS, for refactoring and feature enhancements,
> > the end result is much improved by input from other people.  Leaving a little
> > time between ticket creation and actual development doesn't guarantee that
> > any useful input will be offered by other developers, but it at least presents
> > the possibility.  If development starts _before_ anyone else even knows what
> > it's about, obviously that doesn't present any window at all.  This really
> > also applies to bug fixes, but I think it's at least /possible/ in some of
> > those cases for the necessary change to be sufficiently straightforward such
> > that the process works well enough with only two developers involved.
> >
> > If any of this seems unreasonable, please say so and let's discuss it.  The
> > goal here is to make Twisted the best piece of software we can make it,
> > nothing else.
> >
>
>
> Thanks for the thoughtful reply.
>
> From my perspective, the problem here is that strict adherence to UQDS
> as described in your email is that there is no real room for
> exploratory coding.
>
> At other times, I have wanted to muck around doing some Trial
> refactoring, I filed a ticket which stated my intentions with all the
> clarity available, something along the lines of "muck around doing
> trial refactoring". I was chastised for filing such a ticket (fair
> enough, it's a lousy ticket), so I stopped working along those lines.
>
> This time, I decided to not file a ticket, because I did not want to
> prematurely problem of concisely defining my work. I am being
> chastised (albeit gently) for such work, and I will probably stop
> working on this code.
>



From jml at mumak.net  Mon Apr 30 04:42:52 2007
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 30 Apr 2007 18:42:52 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <d06a5cd30704300101p4b305897mad134f4d04ec5fc5@mail.gmail.com>
References: <d06a5cd30704291945k29ef86bfr2238f43ad02d378a@mail.gmail.com>
	<20070430032436.19381.1071396258.divmod.quotient.6411@ohm>
	<d06a5cd30704300101p4b305897mad134f4d04ec5fc5@mail.gmail.com>
Message-ID: <d06a5cd30704300142m52908a90t6af08195cfe5781b@mail.gmail.com>

On 4/30/07, Jonathan Lange <jml at mumak.net> wrote:
> On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> > On Mon, 30 Apr 2007 12:45:59 +1000, Jonathan Lange <jml at mumak.net> wrote:
> > >On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> > >>On Mon, 30 Apr 2007 09:04:24 +1000, Jonathan Lange <jml at mumak.net> wrote:
> > >> >On 4/29/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> > >> >>On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange
> > >> >><jml at wolfwood.twistedmatrix.com> wrote:
> > >> >> >Author: jml
> > >> >> >Date: Sat Apr 28 23:37:56 2007
> > >> >> >New Revision: 20094
> > >> >> >
> > >> >> >Modified:
> > >> >> >   branches/spew-decorator/twisted/python/util.py
> > >> >> >   branches/spew-decorator/twisted/test/test_util.py
> > >> >> >
> > >> >> >Log:
> > >> >> >Add a spewing decorator which stores all of the function and method
> > >>calls
> > >> >> >within a function in a structured data object.
> > >> >> >
> > >> >>
> > >> >>What ticket is this associated with?
> > >> >
> > >> >None, as yet.
> > >>
> > >>I guess we should avoid having branches without tickets.  There's still the
> > >>sandbox to develop stuff where the direction is uncertain.
> > >
> > >What's wrong with renaming the branch to include a ticket number after
> > >a suitable ticket has been filed?
> >
> > That operation is unsupported by the tool-chain.  But even so, for the
> > reasons below, it's better to start things off with a ticket, rather than
> > eventually introduce one.
> >
> > >
> > >I thought the sandbox was for random bits of junk code[1] and
> > >Foolscap, not branches of Twisted.
> >
> > More or less, yes.  Anything goes in the sandbox.  Sticking whole Twisted
> > branches there probably isn't the best idea on the world, but developing
> > functionality that actually needs to go into the Twisted tree probably also
> > shouldn't be undertaken without some minimal amount of planning.  That's
> > supposed to be part of what tickets are for (although I recognize that
> > sometimes they do not end up filling that role).  When I suggested the
> > sandbox, I really had in mind the development of some spewer-related
> > functionality in an independent module with little or no Twisted integration
> > (since from a quick look at the branch, that seemed to be what the code
> > looked like so far).
> >
> > In case that's a little too muddled and fuzzy to make sense, here's another
> > angle.  A ticket serves as a point where the relevance, utility, correctness,
> > whatever, of a change can be discussed.  If someone is interested in some
> > development which is taking place, they should be able to find that point
> > easily and without interactive assistance from anyone.  If not, their input
> > may be lost or delayed until it is useless or integrating it costs more than
> > the ultimate payoff.
> >
> > The kind of "just-in-time" ticket creation that already happens so frequently
> > in Twisted development is something it would be nice to move away from.  It's
> > completely fine to find a bug, create a ticket, and develop a fix in a brief
> > period of time and I don't want to discourage that.  However, and this is
> > really close to the heart of UQDS, for refactoring and feature enhancements,
> > the end result is much improved by input from other people.  Leaving a little
> > time between ticket creation and actual development doesn't guarantee that
> > any useful input will be offered by other developers, but it at least presents
> > the possibility.  If development starts _before_ anyone else even knows what
> > it's about, obviously that doesn't present any window at all.  This really
> > also applies to bug fixes, but I think it's at least /possible/ in some of
> > those cases for the necessary change to be sufficiently straightforward such
> > that the process works well enough with only two developers involved.
> >
> > If any of this seems unreasonable, please say so and let's discuss it.  The
> > goal here is to make Twisted the best piece of software we can make it,
> > nothing else.
> >
>
>
> Thanks for the thoughtful reply.
>
> From my perspective, the problem here is that strict adherence to UQDS
> as described in your email is that there is no real room for
> exploratory coding.
>
> At other times, I have wanted to muck around doing some Trial
> refactoring, I filed a ticket which stated my intentions with all the
> clarity available, something along the lines of "muck around doing
> trial refactoring". I was chastised for filing such a ticket (fair
> enough, it's a lousy ticket), so I stopped working along those lines.
>
> This time, I decided to not file a ticket, because I did not want to
> prematurely problem of concisely defining my work. I am being
> chastised (albeit gently) for such work, and I will probably stop
> working on this code.
>

Actually, on reflection, I'll leave that email as is. It's blunter
than I would have made it otherwise, but it accurately represents my
opinions.

However, I will note:

- I could have chosen to work on this branch offline. In which case,
the code wouldn't have been available for review at all.
- The very fact of this thread indicates that there is a window for discussion.
- Every branch has chance to be reviewed, and thus discussed.
- The time penalty of discussion is significant to me because of my timezone.
- I really do think discussion is good. However, I think that planning
as a group is not always worth the cost.

My goal is more complex than making Twisted the best software
possible. My goal is to be able to sit down and work on Twisted even
if I don't have a fully specified, fully approved goal in mind.

cheers,
jml



From andrew-twisted at puzzling.org  Mon Apr 30 04:47:03 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 30 Apr 2007 18:47:03 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <20070430032436.19381.1071396258.divmod.quotient.6411@ohm>
References: <d06a5cd30704291945k29ef86bfr2238f43ad02d378a@mail.gmail.com>
	<20070430032436.19381.1071396258.divmod.quotient.6411@ohm>
Message-ID: <20070430084703.GB15094@steerpike.home.puzzling.org>

Jean-Paul Calderone wrote:
[...]
> 
> In case that's a little too muddled and fuzzy to make sense, here's another
> angle.  A ticket serves as a point where the relevance, utility, 
> correctness,
> whatever, of a change can be discussed.  If someone is interested in some
> development which is taking place, they should be able to find that point
> easily and without interactive assistance from anyone.  If not, their input
> may be lost or delayed until it is useless or integrating it costs more than
> the ultimate payoff.

Some quick observations:

  * the reasons for using tickets you give here (a place to discuss a change, a
    central place to look for development in progress, facilitating early
    discussion of a change) are not given on the official UQDS page
    (http://www.divmod.org/trac/wiki/UltimateQualityDevelopmentSystem).
  * the official UQDS page gives reasons for using tickets that are irrelevant
    to volunteer contributions: "a way to manage distractions and continuously
    re-focus on what's really important."  Open source volunteers are scratching
    itches.  Whatever they are working on *is* what's important.  Other things
    may be important to other people, and they are certainly welcome to file
    tickets asking for things to be done, but that's outside of stated role of
    UQDS: that's just ordinary bug (and feature request) tracking.

I think it is useful to have a place to discuss a branch *once it is ready for
public consumption*.  A developer should *not* be discouraged from using version
control tools just because they haven't decided exactly what direction they are
going in yet, or even if their experiment is worthwhile.

I think that developers *should* be encouraged to share their in development
work early and often, because as you say input from others is often helpful.
But forcing them to jump through the hoops of filing tickets (thus requiring
them to have a clear statement exactly what they are working when they might not
know yet) seems like a bad idea.  Have you never started hacking on something
without a clear idea of if this was something worthwhile or not, or even exactly
what it might be good for?  This is a useful and legimitate form of development.
Or are you saying that a ticket titled "Do stuff!" is fine? :)

A final thought... we *do* have a place to discuss branches without tickets, as
you have demonstrated: this mailing list :)

-Andrew.




From Sven-Erik.Tiberg at ltu.se  Mon Apr 30 06:40:39 2007
From: Sven-Erik.Tiberg at ltu.se (Sven-Erik Tiberg)
Date: Mon, 30 Apr 2007 12:40:39 +0200
Subject: [Twisted-Python] UDP + TCP + Serial
In-Reply-To: <462922A5.1030501@thiengineering.ch>
Message-ID: <668D1B8AD729C94DB91D17EC19B8BB910565BF6E@EMMA.personal.adp.ltu.se>

Thanks Werner.

Can be usefull in our project too, trying to connect a X3D ( Interactive
3D ) with mathworks/Simulink model over UDP. Simulink module done
runnning in RT-mode, X3D-model done, working on the UDP module to X3D.
Hope to have a shared interactive 3D viewer application readdy may 10
-07.

BG
Sven-Erik Tiberg

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Werner
Thie
Sent: den 20 april 2007 22:29
To: Twisted general discussion
Subject: Re: [Twisted-Python] UDP + TCP + Serial

Might be that I have something useful for you - please see the attached
zipped code. Basic idea was to have a serially connected device
accepting commands and delivering status information connected to a
browser via a server delivering LiveFragments.

A few problems remain open, like:
   - how does one uniquely connect only one browser capable of sendign
commands (the SPS is a single resource)

   - are other browsers able to connect and do a status display only

Forgive me if I did did not use twisted/nevow/athenain in all aspects
correctly, but with lots of source/doc re- and rereading I was able to
bring it that far. If there are patterns I should avoid or correct I
will gladly do so if pointed out to me.

Thanks, Werner


Roel Schroeven wrote:
> I'm looking for a way to combine serial input with UDP (and possibly
> TCP) communication.
> 
> Currently I have a very simple quick-and-dirty script using pyserial 
> and the socket module without Twisted that reads line-based data from 
> a serial port and sends it out using UDP. It works very well, but 
> functional and reliability requirements are growing and I'm looking 
> for a better design. New functionality that we'll need is connection 
> to a database, two-way network communication to control the program 
> while it's running, and perhaps the ability to use encrypted 
> connections for the output data.
> 
> Twisted seems nice, but apart from a few simple hello-world-style test

> I don't have any experience with it. It doesn't seem too difficult 
> though, except for one thing: I can't find any concrete information on

> how to combine serial communication and network communication. What 
> reactor do I need? How do I initialize it? How can I make it listen to

> both a serial port and one or more UDP and/or TCP ports? I need to do 
> this on Linux, but it would be nice to have it working on Windows too.
> 
> Many thanks,
> Roel
> 



From glyph at divmod.com  Mon Apr 30 13:08:59 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 30 Apr 2007 17:08:59 -0000
Subject: exploratory coding and the purpose of UQDS (Re: [Twisted-Python] Re:
	[Twisted-commits] r20094)
In-Reply-To: <d06a5cd30704300142m52908a90t6af08195cfe5781b@mail.gmail.com>
References: <d06a5cd30704291945k29ef86bfr2238f43ad02d378a@mail.gmail.com>
	<20070430032436.19381.1071396258.divmod.quotient.6411@ohm>
	<d06a5cd30704300101p4b305897mad134f4d04ec5fc5@mail.gmail.com>
	<d06a5cd30704300142m52908a90t6af08195cfe5781b@mail.gmail.com>
Message-ID: <20070430170859.18153.410539343.divmod.xquotient.123@joule.divmod.com>

I'll respond to a few specific things JML said here, but I want to get 
across my personal view of the purpose and benefits of the process we're 
using.  I specifically told JML to make a branch and continue with these 
changes before he got started, and I still think that was the right 
thing to do.

UQDS was instituted on Twisted because tracking changes to Twisted was 
becoming too difficult.  Some changes were critical bugfixes, some were 
random whitespace twiddling, and some introduced regressions.  It was 
designed in the first place (for Divmod) because we were having similar 
issues in a different context.

In other words, not all change is progress.  The goal of UQDS was to 
provide a way to encourage and ensure that all changes to *trunk* are, 
in fact, progress, and Twisted is always improving, so that we don't 
need to burn our energy tracking down bugs or gratuitously bad design 
decisions after they've been merged to trunk and people have begun 
depending on them.  I think it has been very successful at meeting this 
goal.

It's true that the UQDS document on the Divmod wiki does specify that 
the lifetime of a task in UQDS begins with the creation of a ticket. 
For the context that I originally wrote "If it's not in the tracker, you 
shouldn't be working on it.", i.e. the full-time developers at Divmod, 
that makes perfect sense.  In a commercial environment, management needs 
to have a clear idea of where all the resources of the company are being 
deployed.

I would go so far as to say that it makes sense for Twisted as well, 
insofar as UQDS manages our workflow.  However, Twisted SVN does things 
other than UQDS (the trunk/doc/fun/Twisted.Quotes exception and the 
sandbox, to name two notable things) and I don't think that every branch 
needs to be backed by a ticket.  I'd rather have non-ticketed branches 
that we can delete as prototypes than a profusion of vague tickets which 
only their author understands.  (In other words, SVN branches are not 
always necessarily part of the UQDS workflow, but tickets are.)

It's fine by me if there is tons of bad, broken code that gets checked 
in to branches (as long as it is then deleted - see below).  Sometimes, 
the only way to learn how to implement a feature correctly is to 
implement it incorrectly.  Sometimes the only way to figure out what 
feature you're implementing is to mess around for a while and see what 
kind of code you write.  This is especially true of refactoring.

The policy on having tickets applies to anything wanting a review, and 
therefore, anything that hopes to go to trunk.  If you have done some 
work in a branch which you want reviewed, you still need to explain, for 
the reviewer's benefit, what it is that the change is supposed to 
accomplish in a ticket.  Again, this is especially true of refactoring - 
it's fine to noodle around for a while trying to discover a better shape 
for the code, but once you've found one, it's important to clearly 
express *why* the new shape is better rather than simply different. 
Just because the description eventually needs to be written doesn't mean 
it needs to be the first thing that happens, though.

There is one caveat to creating branches for experimentation.  I think 
it's rude to leave dead branches around.  This can be mitigated by using 
ticket numbers, because someone else can come along later, notice that 
the branch refers to a closed ticket, and delete it.  Open branches have 
a cost: "svn ls svn://svn.twistedmatrix.com/svn/Twisted/branches" 
should, at a glance, give an indication as to what's in progress in 
Twisted right now, and dead branches obscure that view and make it 
difficult to get a feel for what's going on.  Right now there are 133 
entries there, and it's probably time for some pruning.  So I think it's 
reasonable to say that if you leave a ticket-number-free branch around 
for more than a month, don't be surprised if someone else deletes it. 
(But please delete it yourself before it comes to that.)

However, deletion or rejection should not necessarily be seen as a 
failure, either of the developer or of the process.  The whole *point* 
of using branches as temporary development lines is that, sometimes, 
those lines end without reaching trunk.  Each rejected branch should be 
a learning experience.

Another important thing to keep in mind, as long as I'm talking about 
how to use and not use branches: don't *ever* deploy Twisted from a 
branch, and this goes triple for a branch created for experimentation. 
Such branches are still at the mercy of a reviewer, and may be 
substantially changed or deleted.  Eventually, *all* branches will be 
deleted, as they are merged to trunk and become obsolete.

On 08:42 am, jml at mumak.net wrote:
>>This time, I decided to not file a ticket, because I did not want to
>>prematurely problem of concisely defining my work. I am being
>>chastised (albeit gently) for such work, and I will probably stop
>>working on this code.

Please don't.  This kind of clean-up can be very important.  I don't 
know if the particular changes in this branch are, but certainly the 
changes which can come out of exploratory coding are useful.
>However, I will note:
>- The time penalty of discussion is significant to me because of my 
>timezone.

An important feature of UQDS is its asynchrony.  Although branches have 
to be reviewed before they're merged, to the extent that changes do not 
directly depend upon one another, it's critical that someone be able to 
sit down and work on feature X, then feature Y, then feature Z, without 
stopping each time to wait 24 hours for a review and then again for the 
second review.  With 24 hours (or more!) of context-switch latency, the 
inability to pipeline requests could completely kill development speed.

This asynchrony should apply to all aspects of the process, including 
discussion of requirements and design goals.  The key feature of a 
heavyweight (read: broken) process is that a developer who is itching to 
do some work has to sit around and wait for permission from a committee 
to do so.
>- I really do think discussion is good. However, I think that planning
>as a group is not always worth the cost.

Enforcement by consensus is great.  Design by consensus (i.e. committee) 
is, unfortunately, terrible.  I never intended UQDS to require that. 
The best sort of group design is when one person has an idea and 
champions it and the group offers criticism and analysis.  Having the 
idea in the first place can require writing some code.
>My goal is more complex than making Twisted the best software
>possible. My goal is to be able to sit down and work on Twisted even
>if I don't have a fully specified, fully approved goal in mind.

As I see it, irrespective of their priorities, the latter is a 
prerequisite for the former.  If, as an open source project, we can't 
harness the power of people's idle time, I think we're doomed.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070430/1a903516/attachment.htm 

From littlesweetmelon at gmail.com  Sun Apr  1 21:19:05 2007
From: littlesweetmelon at gmail.com (=?GB2312?B?zPC5zw==?=)
Date: Mon, 2 Apr 2007 11:19:05 +0800
Subject: [Twisted-Python] 3 basic questions about connectionLost,
	reactor stop and design
Message-ID: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>

Hi all,
Expecting your kind answer regardless how primary my questions are.  ^_^
Q1: Protocols has a method: connectionLost(self, reason). What is the
type of the second parameter? I see it sometimes is
twisted.internet.error.XXX. But who pass this param?

Can I break a connection by passing my own 'reason'?
The method transport.lostConnection is disappointment to me because I
cannot pass any parameter to it to indicate the reason.

Q2: How to cleanly exit a twist program?
Eg: When a twisted client called transport.lostConnection or cut off
net wire physically, only the connection is broken. The reactor is
still running in the event loop.  -_-!!

What is the proper place to put reactor.stop()? Is there any other way
to normally exit a twist program?

Q3: Let's continue my previous question about 'class attribute'. Phil
Mayers gave the key to me:
'if you then modify an instance, the class and
other instances are not, and those modifications OVERRIDE ANY
CONFLICTING ones on the class.'
class A:
    i = 0
p = A()
q = A()
p.i = 1
p.__dict__        # member varible added
>>> {'i': 1}
p.__class__.i = 2 # explicit access to A.i
q.i
>>> 2             # shared A.i
Therefore, in my opinion, the class attribute A::i is always shared by
instances. Different from C++, python 'p.i = 1' will add {'i': 1} to
p.__dict__, which makes 'i' as the

'member varible' to instance 'p'. It seems 'getattr' prefers 'member
variable' than 'class attribute'. So later access to 'p.i' will refer
to 'member variable', and the 'class

attribute' is masked. But if I use p.__class__.i explicitly, the
masked 'class attribute' appears. Till now, Have I misunderstood
anything? ^_^

Finally, my question is why twisted use class attribute so widely? Is
there any benefit? In my opinion, __init__ function is the only good
place to define 'attributes'. But

twist distributes 'attributes' in two forms: class and __init__. I
want to know the idiom to decide which attribute should be put into
which part.

Thank you for your patience!

--
ShenLei



From daedalus at eigenmagic.com  Mon Apr  2 00:07:03 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Mon, 02 Apr 2007 16:07:03 +1000
Subject: [Twisted-Python] twisted pysnmp status
In-Reply-To: <460D4171.1090202@vrplumber.com>
References: <460B2722.7020900@BrendanSimon.com>
	<460C1652.1040504@vrplumber.com> <1175228562.7273.30.camel@localhost>
	<460D4171.1090202@vrplumber.com>
Message-ID: <1175494023.7824.17.camel@localhost>

On Fri, 2007-03-30 at 12:57 -0400, Mike C. Fletcher wrote:
> Justin Warren wrote:
> ...
> > The performance of PySNMP (many years ago) was the main reason we wrote
> > libsnmp; PySNMP seemed to have been written from a very CompSci
> > perspective with full abstract ASN.1 model that gets subclassed to SNMP
> > via many steps, all of which slow it down. We went for a more
> > engineering approach, hardcoding lookup tables for values that never
> > change for the specific ASN.1 instanciation that is SNMP, for example.
> >
> > libsnmp isn't integrated into twisted, though we do use it with twisted
> > with great success in seafelt; there has been some interest in
> > integrating libsnmp with twisted in recent times. libsnmp also lacks
> > SNMPv3 support, only because we haven't had a need to add it yet, but
> > this means it probably doesn't meet your needs.
> >   
> Actually, would meet our client's needs well enough.  SNMPv3 isn't a 
> requirement, just a small nicety for them.

Neato. That was our approach also, given the relatively small number of
devices, etc. that implement SNMPv3 and the development effort required.
It will get added when there is sufficient need.

> > However, I am interested in both of these goals: twisted integration,
> > and SNMPv3 support, so perhaps if there enough people interested in such
> > an outcome we could work together to achieve it?
> >   
> Looking over your code it seems like it would be fairly easy to make it 
> an option in TwistedSNMP.  Currently TwistedSNMP has an abstraction 
> point that allows regular or speed-enhanced PySNMP to be used.  By the 
> look of it a very simple wrapper module would let libsnmp provide the 
> (small set of) features we use (basically just encode/decode and 
> translation of result values to/from Pythonic values with a few "type" 
> operations as well (OID, EndOfMibView, that kind of thing)).

That should certainly be fairly simple with libsnmp, yes.

> BTW, I notice that none of your code uses GetBulk (though you define 
> it)?  Bulk operations were a *huge* speed win for our application.  
> Hopefully you're doing it in your real-world code.

Not that I recall, probably because we haven't hit a speed hurdle that
would be solved by using it thus far. We've had more issues with SNMP
bugs on remote devices, such as certain brands of wireless router
crashing when polled with multi-variable SNMP packets. :)

> Anyway, I'll see if there's any interest from the customer in trying out 
> libsnmp with the code-base.  That would let me take company time to work 
> on integrating it into TwistedSNMP.  They almost certainly don't care 
> enough to have it do v3 operations, but raw speed on v2 operations is 
> something they may care about enough to pay for a few hours of work.

Cool. Let me know how you get on.

-- 
Justin Warren <daedalus at eigenmagic.com>



From itamar at itamarst.org  Mon Apr  2 05:51:24 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 02 Apr 2007 07:51:24 -0400
Subject: [Twisted-Python] 3 basic questions about connectionLost,
	reactor stop and design
In-Reply-To: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>
References: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>
Message-ID: <1175514684.23023.12.camel@localhost.localdomain>

On Mon, 2007-04-02 at 11:19 +0800, 甜瓜 wrote:
> Hi all,
> Expecting your kind answer regardless how primary my questions are.  ^_^
> Q1: Protocols has a method: connectionLost(self, reason). What is the
> type of the second parameter? I see it sometimes is
> twisted.internet.error.XXX. But who pass this param?

It's typically a twisted.python.failure.Failure wrapping, as you said,
t.i.error.ConnectionLost or ConnectionDone. It's called by the reactor.

> Can I break a connection by passing my own 'reason'?

That is not supported, no.

> What is the proper place to put reactor.stop()? Is there any other way
> to normally exit a twist program?

reactor.stop() is the way to go, yes. Call it when you want the program
to start.

> Finally, my question is why twisted use class attribute so widely? Is
> there any benefit? In my opinion, __init__ function is the only good
> place to define 'attributes'. But
> 
> twist distributes 'attributes' in two forms: class and __init__. I
> want to know the idiom to decide which attribute should be put into
> which part.

I don't think there's any specific reason why we use one or the other
(though one should never use mutable ones in this way.) If you're
happier always using __init__ then by all means do so.




From nico at tekNico.net  Mon Apr  2 06:16:54 2007
From: nico at tekNico.net (Nicola Larosa)
Date: Mon, 02 Apr 2007 14:16:54 +0200
Subject: [Twisted-Python] Re: 3 basic questions about connectionLost,
	reactor stop and design
In-Reply-To: <1175514684.23023.12.camel@localhost.localdomain>
References: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>
	<1175514684.23023.12.camel@localhost.localdomain>
Message-ID: <4610F436.3090007@tekNico.net>

Itamar Shtull-Trauring wrote:
> reactor.stop() is the way to go, yes. Call it when you want the program
> to start.

To be able to do that you would have to recall John and George from heaven,
reform the Beatles, pay them a lot to compose "Stop Me Down", and use that
as the sound theme.


-- 
Nicola Larosa - http://www.tekNico.net/

We need to hug authority into surrender. [...] The edifice of power is
only the illusion of power once we realise that the power lies with us.
 -- David Icke, November 2006





From marian.schubert at gmail.com  Mon Apr  2 06:27:02 2007
From: marian.schubert at gmail.com (Marian Schubert)
Date: Mon, 2 Apr 2007 14:27:02 +0200
Subject: [Twisted-Python] Re: 3 basic questions about connectionLost,
	reactor stop and design
In-Reply-To: <4610F436.3090007@tekNico.net>
References: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>
	<1175514684.23023.12.camel@localhost.localdomain>
	<4610F436.3090007@tekNico.net>
Message-ID: <a0839b890704020527q707f8382y8bd9265f9baeae26@mail.gmail.com>

On 4/2/07, Nicola Larosa <nico at teknico.net> wrote:
> Itamar Shtull-Trauring wrote:
> > reactor.stop() is the way to go, yes. Call it when you want the program
> > to start.
>
> To be able to do that you would have to recall John and George from heaven,
> reform the Beatles, pay them a lot to compose "Stop Me Down", and use that
> as the sound theme.

Maybe it's win32 specific feature .)

--
MS



From andrew-twisted at puzzling.org  Mon Apr  2 06:58:08 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 2 Apr 2007 22:58:08 +1000
Subject: [Twisted-Python] 3 basic questions about connectionLost,
	reactor stop and design
In-Reply-To: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>
References: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>
Message-ID: <20070402125808.GB13700@steerpike.home.puzzling.org>

甜瓜 wrote:
[...]
> 
> Finally, my question is why twisted use class attribute so widely? Is
> there any benefit? In my opinion, __init__ function is the only good
> place to define 'attributes'. But
> 
> twist distributes 'attributes' in two forms: class and __init__. I
> want to know the idiom to decide which attribute should be put into
> which part.

No particular reason, but here are some small reasons for using class
attributes:

   * their presence (and initial value) is visible in the declaration of the
     class, rather than requiring reading the code of the __init__ method;
   * as a result, the variables (and initial values) will be automatically
     listed by tools like epydoc and pydoctor (if the author forgets to
     explicitly describe these attributes in the docstrings);
   * they require less typing from the code author than an assignment to
     "self.foo" in __init__;
   * if the class doesn't have an __init__ method yet, it saves even more typing
     to use a class variable than to add an __init__ just to set an instance
     variable;
   * they slightly reduce memory consumption.

I'm not sure these reasons are good enough to compensate for the confusion this
idiom can cause, but they're the ones I can think of.  I suspect in Twisted's
case the main reasons are the "less typing" ones rather than anything else.

-Andrew.




From littlesweetmelon at gmail.com  Mon Apr  2 07:41:39 2007
From: littlesweetmelon at gmail.com (=?GB2312?B?zPC5zw==?=)
Date: Mon, 2 Apr 2007 21:41:39 +0800
Subject: [Twisted-Python] 3 basic questions about connectionLost,
	reactor stop and design
In-Reply-To: <20070402125808.GB13700@steerpike.home.puzzling.org>
References: <cdb837ea0704012019h6af47578u5d004a2c33a5a8b@mail.gmail.com>
	<20070402125808.GB13700@steerpike.home.puzzling.org>
Message-ID: <cdb837ea0704020641h7f63d998x5539ff17fc7ec105@mail.gmail.com>

Great. That's what I wanted to know, thanks :)



From daniel at keystonewood.com  Mon Apr  2 08:39:39 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Mon, 2 Apr 2007 10:39:39 -0400
Subject: [Twisted-Python] Synchronization techniques
Message-ID: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>

Hello fellow twisters,

I am developing a twisted application on Mac OS X (using Perspective  
Broker) in which the server component runs shell scripts to post  
orders to an accounting system. The accounting system is developed  
and maintained by a third party vendor, and is therefore beyond my  
control. For a given command the scripts must be executed in order,  
and all commands that affect the accounting system must be  
synchronized. For example:


class AccountingService(pb.Root):

     def remote_post_order(self, data):
         self.lock.acquire()
         try:
             # put data in 'trans.dat' file
             # ...

             process = TwistedProcess()
             process.check_call(["load_dat.sh", "trans.dat"])
             process.check_call(["post_trx.sh"])
         finally:
             self.lock.release()


The process.check_call() method has (nearly) the same semantics as  
the check_call() method in Python's built-in subprocess module, and  
the lock has (nearly) the same semantics as Python's built-in  
threading.Lock class. Unfortunately, I cannot use those built-in  
methods/classes because they do not play nice with Twisted--I get  
'Interrupted system call' errors from subprocess.check_call(), and (I  
think) my server could deadlock if I used threading.Lock. So I  
developed a few helper classes to hack around these Twisted mis- 
features (questions follow the code):


from Queue import Queue, Empty
from twisted.internet.error import ProcessTerminated
from twisted.internet.protocol import ProcessProtocol

class ProcessError(Exception): pass


class ProcessErrorHandler(ProcessProtocol):

     def __init__(self):
         self.errbuf = []
         self.errors = []
         self.waiting = True

     def errReceived(self, text):
         self.errbuf.append(text)

     def processEnded(self, status):
         if self.errbuf:
             self.errors.append("".join(self.errbuf))
         if isinstance(status.value, ProcessTerminated):
             self.errors.append(status.getErrorMessage())
         self.waiting = False

     def hasError(self):
         return bool(self.errors)

     def raiseError(self):
         raise ProcessError("\n".join(self.errors))


class TwistedProcess(object):

     def __init__(self, reactor=None):
         if reactor is None:
             from twisted.internet import reactor
         self.reactor = reactor

     def check_call(self, cmd):
         status = ProcessErrorHandler()
         self.reactor.spawnProcess(status, cmd[0], cmd, env=os.environ)
         while status.waiting:
             self.reactor.iterate(0.05)
         if status.hasError():
             status.raiseError()


class TwistedLock(object):
     """A lock object for Twisted

     The lock is instantiated in a released state.
     """

     def __init__(self, reactor=None):
         if reactor is None:
             from twisted.internet import reactor
         self.reactor = reactor
         self.queue = Queue(1)
         self.release()

     def acquire(self):
         """Acquire the lock

         This method returns immediately when the lock is acquired.  
It "blocks"
         (i.e. iterates the reactor) indefinitely while it waits for  
the lock to
         be released.
         """
         while True:
             try:
                 self.queue.get_nowait()
             except Empty:
                 # pseudo block (iterate the reactor) while waiting  
for the lock to be released
                 self.reactor.iterate(0.05)
             else:
                 break # the lock has been acquired

     def release(self):
         """Release the lock

         Raises Queue.Full if the lock was not acquired exactly once  
since it was
         last released.
         """
         self.queue.put_nowait("TOKEN")


Questions:
1. Is reactor.iterate() meant to be used this way (see  
TwistedLock.acquire() and TwistedProcess.check_call())? If not, what  
is the right way to do those things? I've read everything I can find  
on reactor.iterate() and while it seems to be the only way to do what  
I need to do, its use is often strongly discouraged. Why is it so  
difficult for twisted to handle non-async code?

2. Is my suspicion that the server could deadlock if I used  
threading.Lock correct? Note: the server is not multi-threaded  
(unless twisted is doing something with threads that I am not aware of).
Example scenario:
     req 1: acquire lock
     req 1: spawn sub-process
     req 1: iterate reactor while waiting for process to complete
     req 2: acquire lock (block and wait)
     SERVER IS DEAD-LOCKED ?

3. Is there a better way to do what I'm trying to do here? (getting a  
new accounting system is not an option :)

~ Daniel





From matt at zgroupplc.com  Mon Apr  2 09:47:07 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Mon, 2 Apr 2007 16:47:07 +0100
Subject: [Twisted-Python] listenTCP(), tcp.Port()
Message-ID: <BBECF1BD-4D89-4020-9CCF-9914EBD16181@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi All,

I want to create a simple server that listens for data but I do not  
want to specify the port, I want the port to be automatically  
selected based on the currently available ports on the system. Is  
there any way to do this using Twisted?

Using PHP it is a simple matter of:

// Create a socket
$sock = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP);

// Get the port number used
@socket_getsockname($sock, $ip, $port);

Where $ip and $port are passed by reference and result in the values  
for the socket's ip address and port.

Looking at tcp.Port(), it doesn't seem like there is any provision  
for dynamically selecting an available port. Or am I missing something?

Regards,

Matt



m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGESWCyI6MkdKPngkRAjXyAJ9Yd9o/vWeYG9PhB1NbphbGgN2quwCdHRDh
DqF0IRAxqhcKLoKMeH+Ebwg=
=8qwC
-----END PGP SIGNATURE-----



From radix at twistedmatrix.com  Mon Apr  2 10:04:02 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 2 Apr 2007 12:04:02 -0400
Subject: [Twisted-Python] listenTCP(), tcp.Port()
In-Reply-To: <BBECF1BD-4D89-4020-9CCF-9914EBD16181@zgroupplc.com>
References: <BBECF1BD-4D89-4020-9CCF-9914EBD16181@zgroupplc.com>
Message-ID: <60ed19d40704020904u354931bfmcb87ef091ddc40a3@mail.gmail.com>

On 4/2/07, Matthew Glubb <matt at zgroupplc.com> wrote:
> Hi All,
>
> I want to create a simple server that listens for data but I do not
> want to specify the port, I want the port to be automatically
> selected based on the currently available ports on the system. Is
> there any way to do this using Twisted?
>
> Looking at tcp.Port(), it doesn't seem like there is any provision
> for dynamically selecting an available port. Or am I missing something?

The way you do this on unix is by listening on port 0. The port to
listen on will then be dynamically selected by the kernel.

port.getHost().port will give you the port number that was selected.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From matt at zgroupplc.com  Mon Apr  2 10:20:13 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Mon, 2 Apr 2007 17:20:13 +0100
Subject: [Twisted-Python] listenTCP(), tcp.Port()
In-Reply-To: <BBECF1BD-4D89-4020-9CCF-9914EBD16181@zgroupplc.com>
References: <BBECF1BD-4D89-4020-9CCF-9914EBD16181@zgroupplc.com>
Message-ID: <3A9551BA-3836-4856-A1B8-E91925CE432F@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Don't worry about this. I see that I pass zero as the port number in  
listenTCP().

Should read before I type :)

On 2 Apr 2007, at 16:47, Matthew Glubb wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Hi All,
>
> I want to create a simple server that listens for data but I do not  
> want to specify the port, I want the port to be automatically  
> selected based on the currently available ports on the system. Is  
> there any way to do this using Twisted?
>
> Using PHP it is a simple matter of:
>
> // Create a socket
> $sock = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
>
> // Get the port number used
> @socket_getsockname($sock, $ip, $port);
>
> Where $ip and $port are passed by reference and result in the  
> values for the socket's ip address and port.
>
> Looking at tcp.Port(), it doesn't seem like there is any provision  
> for dynamically selecting an available port. Or am I missing  
> something?
>
> Regards,
>
> Matt
>
>
>
> m a t t h e w   g l u b b
>
> ______________________________________________________________________ 
> __
> Z Group PLC
>
> Tel: +44 (0) 8700 111 173
> Fax: +44 (0) 8707 051 393
> Txt: +44 (0) 7800 140 877
> Web: <http://www.zgroupplc.com/>
>
> This  email  and  any  files  transmitted  with it are   
> confidential and
> intended solely for the use of the individual or entity to whom  
> they are
> addressed.  The opinions  expressed in this mail are those of the  
> author
> and do not necessarily  represent the views of the company.  If you  
> have
> received this email in error please notify <service at zgroupplc.com>
>
>
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.1 (Darwin)
>
> iD8DBQFGESWCyI6MkdKPngkRAjXyAJ9Yd9o/vWeYG9PhB1NbphbGgN2quwCdHRDh
> DqF0IRAxqhcKLoKMeH+Ebwg=
> =8qwC
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGES1AyI6MkdKPngkRAhzCAKCJMv2Jt96ecZVsanJGAWDVYdRR1wCfXXWi
T2thVWz83KV09IlpvrzqWeM=
=C3tN
-----END PGP SIGNATURE-----



From itamar at itamarst.org  Mon Apr  2 10:32:02 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 2 Apr 2007 12:32:02 -0400 (EDT)
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
Message-ID: <25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>

> 1. Is reactor.iterate() meant to be used this way (see
> TwistedLock.acquire() and TwistedProcess.check_call())? If not, what
> is the right way to do those things? I've read everything I can find
> on reactor.iterate() and while it seems to be the only way to do what
> I need to do, its use is often strongly discouraged. Why is it so
> difficult for twisted to handle non-async code?

You should never call reactor.iterate().

> 2. Is my suspicion that the server could deadlock if I used
> threading.Lock correct?

Yes. And the Queue model uses threading.Lock, so using it can also
deadlock you.

> 3. Is there a better way to do what I'm trying to do here? (getting a
> new accounting system is not an option :)

twisted.internet.defer.DeferredLock and some of the related classes are
what you ought to be using.




From robomancer at gmail.com  Tue Apr  3 10:13:45 2007
From: robomancer at gmail.com (robomancer)
Date: Tue, 3 Apr 2007 12:13:45 -0400
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
Message-ID: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>

Hello all,

I'm looking to use Twisted for distributing computation over a small
number (~10) of PCs.  I'm wondering if anyone else has some experience
with this -- particularly if there is already a solution out there
that I can use, so that I'm not reinventing the wheel.  Here's a rough
outline of what I'd like:

Setup phase: given a config file containing a list of machines and the
# of CPUs on each machine, update the source code on each machine and
start an appropriate number of experiment runners.

Run phase: a "master" process assigns an experiment to each runner.
When we get a result back, log the result to a file and send a new
experiment to that runner.  Repeat until all experiments are done.

Here are my constraints:

1) The high-level code (at least) is all in Python, so the experiment
runners can collect their results by just calling Python functions.

2) I can set up ssh keys on each machine such that logging in remotely
can happen without a password.

3) I don't really have to worry about authentication: I can assume
that all machines are either on a non-internet-connected LAN or that
firewall rules are set up so that the ports aren't accessible except
from the "master" machine.

4) I need to be able to add and remove compute nodes at runtime, so I
need some sort of admin shell.  However, I can wait for
currently-processing experiments to finish, so I don't have to worry
about the complexity of restarting experiments or migrating them to
other machines.

5) It'd be nice (but not required) if the experiment runners could all
log some critical messages to the master process.

This seems like it would only take a few hours to implement in Twisted
(probably with PB), but I wanted to make sure I'm not reinventing the
wheel, because it seems likely that someone has done this before.



From bv at bnl.gov  Tue Apr  3 10:41:03 2007
From: bv at bnl.gov (Brett Viren)
Date: Tue, 03 Apr 2007 12:41:03 -0400
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
	(robomancer@gmail.com's message of "Tue,
	3 Apr 2007 12:13:45 -0400")
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
Message-ID: <ir4slbhqulc.fsf@lycastus.phy.bnl.gov>

robomancer <robomancer at gmail.com> writes:

> I'm looking to use Twisted for distributing computation over a small
> number (~10) of PCs.  I'm wondering if anyone else has some experience
> with this -- particularly if there is already a solution out there
> that I can use, so that I'm not reinventing the wheel. 

[OT: non-twisted discussion follows]

It seems you are wanting a hybrid between a batch queueing system and
a data management system.

Any reason not to use something like Torque (nee' OpenPBS) for the
batch part?

http://www.clusterresources.com/pages/products/torque-resource-manager.php

Or, if your nodes are also interactively used (ie, workstations by
day, batch nodes by night) you might look at condor:

http://www.cs.wisc.edu/condor/

Both are free-ish.


More info on what your data is like is probably needed for ideas on
the second part.

-Brett.



From fperez.net at gmail.com  Tue Apr  3 10:48:44 2007
From: fperez.net at gmail.com (Fernando Perez)
Date: Tue, 3 Apr 2007 10:48:44 -0600
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
Message-ID: <db6b5ecc0704030948r1b4f411dh254ba20d47203cdd@mail.gmail.com>

On 4/3/07, robomancer <robomancer at gmail.com> wrote:

> I'm looking to use Twisted for distributing computation over a small
> number (~10) of PCs.  I'm wondering if anyone else has some experience
> with this -- particularly if there is already a solution out there
> that I can use, so that I'm not reinventing the wheel.  Here's a rough
> outline of what I'd like:

[...]

http://ipython.scipy.org/moin/Parallel_Computing

If you give us until next week, things will be cleaner.  We're in the
middle of transitioning from our first dev branch ('chainsaw') into
the one that will become the stable development line ('saw').  Both
can be checked out, but saw will, in a few days, be "released" for
regular work (albeit still considered to be a development system).

It's all Twisted-based, and help/contributions from other devs will be
obviously welcome.

Cheers,

f



From robomancer at gmail.com  Tue Apr  3 11:08:05 2007
From: robomancer at gmail.com (robomancer)
Date: Tue, 3 Apr 2007 13:08:05 -0400
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <ir4slbhqulc.fsf@lycastus.phy.bnl.gov>
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
	<ir4slbhqulc.fsf@lycastus.phy.bnl.gov>
Message-ID: <fdcd12710704031008w72277a61odaec8f01df80b503@mail.gmail.com>

> It seems you are wanting a hybrid between a batch queueing system and
> a data management system.
>
> Any reason not to use something like Torque (nee' OpenPBS) for the
> batch part?
>
> http://www.clusterresources.com/pages/products/torque-resource-manager.php

Thanks for the references.  Torque seems like a good possibility, but
a bit heavyweight for my tastes; I'd rather have something small and
flexible that I can easily edit to suit my needs.  That's why I'd
prefer a solution in Python (whether or not it involves Twisted).  I
really am looking only at small-scale stuff -- I have no need for
fault tolerance or scalability beyond maybe 5-10 nodes.

> More info on what your data is like is probably needed for ideas on
> the second part.

All I need is the ability to test several different algorithms on
several different input files. Each algorithm has a variety of
parameter settings, so for every experiment I need to record which
algorithm was used, the parameters, which input file was used, and the
quality of the result (from -1 to 1).  I don't think a data management
system is necessary here; I was basically planning on using .csv files
to store experiment settings and results.   Again, I'm aiming for
lightweight, not enterprise-grade :)



From matt at zgroupplc.com  Tue Apr  3 11:16:54 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Tue, 3 Apr 2007 18:16:54 +0100
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <db6b5ecc0704030948r1b4f411dh254ba20d47203cdd@mail.gmail.com>
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
	<db6b5ecc0704030948r1b4f411dh254ba20d47203cdd@mail.gmail.com>
Message-ID: <933D1915-D3E7-4ECE-B56E-6FBC98A4AF37@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Fernando,

On 3 Apr 2007, at 17:48, Fernando Perez wrote:

> http://ipython.scipy.org/moin/Parallel_Computing

Are you using the PB, a custom protocol or a combination of the two  
to make your remote calls?

Regards,


Matt



m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGEowKyI6MkdKPngkRAhsQAJ93yKqsTiKgw1VGMmlnFeOuGnQpKQCgmgjk
WBkKbP1esCZxV6JwK0o988M=
=wH2L
-----END PGP SIGNATURE-----



From robomancer at gmail.com  Tue Apr  3 11:19:34 2007
From: robomancer at gmail.com (robomancer)
Date: Tue, 3 Apr 2007 13:19:34 -0400
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <db6b5ecc0704030948r1b4f411dh254ba20d47203cdd@mail.gmail.com>
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
	<db6b5ecc0704030948r1b4f411dh254ba20d47203cdd@mail.gmail.com>
Message-ID: <fdcd12710704031019h167375c5j1a2a7fefa1f057b9@mail.gmail.com>

> http://ipython.scipy.org/moin/Parallel_Computing
>
> If you give us until next week, things will be cleaner.  We're in the
> middle of transitioning from our first dev branch ('chainsaw') into
> the one that will become the stable development line ('saw').  Both
> can be checked out, but saw will, in a few days, be "released" for
> regular work (albeit still considered to be a development system).
>
> It's all Twisted-based, and help/contributions from other devs will be
> obviously welcome.

Thanks!  This looks really promising.  Is there a place I can sign up
to be notified when saw is ready?



From general at eepatents.com  Tue Apr  3 14:59:23 2007
From: general at eepatents.com (Ed Suominen)
Date: Tue, 03 Apr 2007 16:59:23 -0400
Subject: [Twisted-Python] Re: Using Twisted for distributed computation
	/	experiment running
In-Reply-To: <E1HYmMW-0002f5-02@pyramid.twistedmatrix.com>
References: <E1HYmMW-0002f5-02@pyramid.twistedmatrix.com>
Message-ID: <4612C02B.8050701@eepatents.com>

> robomancer <robomancer at gmail.com> writes:
> 
>> I'm looking to use Twisted for distributing computation over a small
>> number (~10) of PCs.  I'm wondering if anyone else has some experience
>> with this -- particularly if there is already a solution out there
>> that I can use, so that I'm not reinventing the wheel. 

Take a look at the asynCluster sub-package within my Twisted-Goodies
project, http://foss.eepatents.com/Twisted-Goodies.

Source (SVN):
http://foss.eepatents.com/Twisted-Goodies/browser/trunk/twisted_goodies/asyncluster

API:
http://foss.eepatents.com/api/twisted-goodies/twisted_goodies.asyncluster.html

Best regards,
Ed Suominen



From daniel at keystonewood.com  Tue Apr  3 15:07:34 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Tue, 3 Apr 2007 17:07:34 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
Message-ID: <F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>

Thanks for the response Itamar,

>> 1. Is reactor.iterate() meant to be used this way (see
>> TwistedLock.acquire() and TwistedProcess.check_call())? If not, what
>> is the right way to do those things? I've read everything I can find
>> on reactor.iterate() and while it seems to be the only way to do what
>> I need to do, its use is often strongly discouraged. Why is it so
>> difficult for twisted to handle non-async code?
>
> You should never call reactor.iterate().

There really needs to be a way to do this:

d = getDeferred()
result = reactor.waitFor(d)

Or even better:

d = getDeferred()
result = d.waitFor()

The waitFor() method returns the result of the deferred or raises an  
exception if the deferred failed. This would allow a much more  
intuitive way to do the same type of thing that inlineCallbacks()  
allows. Why is this not implemented?

>
>> 2. Is my suspicion that the server could deadlock if I used
>> threading.Lock correct?
>
> Yes. And the Queue model uses threading.Lock, so using it can also
> deadlock you.

Right, but I'm using Queue.get_nowait() and Queue.put_nowait(),  
neither of which block, so that shouldn't be a problem.

>
>> 3. Is there a better way to do what I'm trying to do here? (getting a
>> new accounting system is not an option :)
>
> twisted.internet.defer.DeferredLock and some of the related classes  
> are
> what you ought to be using.

Unfortunately that only gets me half way there. DeferredLock.acquire 
() returns a deferred. How do I return the result of a deferred from  
a PB remote_xxx() function?

Thanks,
Daniel






From bob at redivi.com  Tue Apr  3 15:22:17 2007
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 3 Apr 2007 14:22:17 -0700
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
Message-ID: <6a36e7290704031422y283d781y36ff09aaba91adf9@mail.gmail.com>

On 4/3/07, Daniel Miller <daniel at keystonewood.com> wrote:
> Thanks for the response Itamar,
>
> >> 1. Is reactor.iterate() meant to be used this way (see
> >> TwistedLock.acquire() and TwistedProcess.check_call())? If not, what
> >> is the right way to do those things? I've read everything I can find
> >> on reactor.iterate() and while it seems to be the only way to do what
> >> I need to do, its use is often strongly discouraged. Why is it so
> >> difficult for twisted to handle non-async code?
> >
> > You should never call reactor.iterate().
>
> There really needs to be a way to do this:
>
> d = getDeferred()
> result = reactor.waitFor(d)
>
> Or even better:
>
> d = getDeferred()
> result = d.waitFor()
>
> The waitFor() method returns the result of the deferred or raises an
> exception if the deferred failed. This would allow a much more
> intuitive way to do the same type of thing that inlineCallbacks()
> allows. Why is this not implemented?

Because it's not possible.

-bob



From tim at mail.mew.co.jp  Tue Apr  3 18:33:43 2007
From: tim at mail.mew.co.jp (Tim Flink)
Date: Wed, 04 Apr 2007 09:33:43 +0900
Subject: [Twisted-Python] 64bit Installation Problems
Message-ID: <4612F267.4090302@mail.mew.co.jp>

I am trying to install Twisted2.5.0 and have been having some problems. When I run the main setup.py, TwistedCore is installed into /usr/lib64/python23/ while everything else (conch, lore, mail, names, news, runner, web and words) is installed into /ur/lib/python23.

So now when I try to import anything outside of core (like Web) I get:
exceptions.ImportError: No module named web

Is there a way to force TwistedCore to build and install as 32bit or force everything else to install as 64bit?

Thanks,

Tim

System Info:
CentOS 4.4 x86_64
Python 2.3.4
Zope Interface 3.3.0




From itamar at itamarst.org  Tue Apr  3 18:42:06 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 03 Apr 2007 20:42:06 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
Message-ID: <1175647326.5424.0.camel@localhost.localdomain>

On Tue, 2007-04-03 at 17:07 -0400, Daniel Miller wrote:

> > twisted.internet.defer.DeferredLock and some of the related classes  
> > are
> > what you ought to be using.
> 
> Unfortunately that only gets me half way there. DeferredLock.acquire 
> () returns a deferred. How do I return the result of a deferred from  
> a PB remote_xxx() function?

Just return the Deferred from the remote_xxx() function.

As for Queue - you may as well just use a list. But probably you want
DeferredQueue.




From warner at lothar.com  Tue Apr  3 22:36:12 2007
From: warner at lothar.com (Brian Warner)
Date: Tue, 03 Apr 2007 21:36:12 -0700 (PDT)
Subject: [Twisted-Python] Foolscap-0.1.1 released
Message-ID: <20070403.213612.74734554.warner@lothar.com>

I've just released Foolscap-0.1.1, the next-generation-of-PB RPC library,
available in the usual place at:

 http://twistedmatrix.com/trac/wiki/FoolsCap
 http://twistedmatrix.com/~warner/Foolscap/

This release enhances many of the "constraints" (a form of explicit
typechecking that can be applied to messages sent over the wire), fixes a
long-standing bug in Tub.stopService() which makes it easier to write trial
unit tests for code which uses Foolscap (and which was hopefully responsible
for many of the spurious test failures we've seen in the past), and adds a
one-way no-response 'callRemoteOnly' method. Full details are in the release
notes, attached below.

Due to the implementation of callRemoteOnly, this release is *not*
wire-protocol compatible with the previous 0.1.0 release. Fortunately, it
knows this, and the version-negotiation code will refuse to connect to an
incompatible peer.

Many thanks to my employer, AllMyData.com, for supporting development of this
release. We're starting to use it for an internal project, and we're
discovering all sorts of usability improvements that need to be made. The
next batch will probably be centered around the needs of long-running server
programs: specifically persistent mapping from externally-visible (but
generally unguessable) names to internal handler objects, such that each time
the process gets restarted, the same name maps to the next incarnation of the
handler object. We already have this facility for the private key (and thus
the TubID), but now it would be nice to have it for individual objects.


have a well-connected day,
 -Brian



* Release 0.1.1 (03 Apr 2007)

** Incompatibility Warning

Because of the technique used to implement callRemoteOnly() (specifically the
commandeering of reqID=0), this release is not compatible with the previous
release. The protocol negotiation version numbers have been bumped to avoid
confusion, meaning that 0.1.0 Tubs will refuse to connect to 0.1.1 Tubs, and
vice versa. Be aware that the errors reported when this occurs may not be
ideal, in particular I think the "reconnector" (tub.connectTo) might not log
this sort of connection failure in a very useful way.

** changes to Constraints

Method specifications inside RemoteInterfaces can now accept or return
'Referenceable' to indicate that they will accept a Referenceable of any
sort. Likewise, they can use something like 'RIFoo' to indicate that they
want a Referenceable or RemoteReference that implements RIFoo. Note that this
restriction does not quite nail down the directionality: in particular there
is not yet a way to specify that the method will only accept a Referenceable
and not a RemoteReference. I'm waiting to see if such a thing is actually
useful before implementing it. As an example:

class RIUser(RemoteInterface):
    def get_age():
        return int

class RIUserListing(RemoteInterface):
    def get_user(name=str):
        """Get the User object for a given name."""
        return RIUser

In addition, several constraints have been enhanced. StringConstraint and
ListConstraint now accept a minLength= argument, and StringConstraint also
takes a regular expression to apply to the string it inspects (the regexp can
either be passed as a string or as the output of re.compile()). There is a
new SetConstraint object, with 'SetOf' as a short alias. Some examples:

HexIdConstraint = StringConstraint(minLength=20, maxLength=20,
                                   regexp=r'[\dA-Fa-f]+')
class RITable(RemoteInterface):
    def get_users_by_id(id=HexIdConstraint):
        """Get a set of User objects; all will have the same ID number."""
        return SetOf(RIUser, maxLength=200)

These constraints should be imported from foolscap.schema . Once the
constraint interface is stabilized and documented, these classes will
probably be moved into foolscap/__init__.py so that you can just do 'from
foolscap import SetOf', etc.

*** UnconstrainedMethod

To disable schema checking for a specific method, use UnconstrainedMethod in
the RemoteInterface definition:

from foolscap.remoteinterface import UnconstrainedMethod

class RIUse(RemoteInterface):
    def set_phone_number(area_code=int, number=int):
        return bool
    set_arbitrary_data = UnconstrainedMethod

The schema-checking code will allow any sorts of arguments through to this
remote method, and allow any return value. This is like schema.Any(), but for
entire methods instead of just specific values. Obviously, using this defeats
te whole purpose of schema checking, but in some circumstances it might be
preferable to allow one or two unconstrained methods rather than resorting to
leaving the entire class left unconstrained (by not declaring a
RemoteInterface at all).

*** internal schema implementation changes

Constraints underwent a massive internal refactoring in this release, to
avoid a number of messy circular imports. The new way to convert a
"shorthand" description (like 'str') into an actual constraint object (like
StringConstraint) is to adapt it to IConstraint.

In addition, all constraints were moved closer to their associated
slicer/unslicer definitions. For example, SetConstraint is defined in
foolscap.slicers.set, right next to SetSlicer and SetUnslicer. The
constraints for basic tokens (like lists and ints) live in
foolscap.constraint .

** callRemoteOnly

A new "fire and forget" API was added to tell Foolscap that you want to send
a message to the remote end, but do not care when or even whether it arrives.
These messages are guaranteed to not fire an errback if the connection is
already lost (DeadReferenceError) or if the connection is lost before the
message is delivered or the response comes back (ConnectionLost). At present,
this no-error philosophy is so strong that even schema Violation exceptions
are suppressed, and the callRemoteOnly() method always returns None instead
of a Deferred. This last part might change in the future.

This is most useful for messages that are tightly coupled to the connection
itself, such that if the connection is lost, then it won't matter whether the
message was received or not. If the only state that the message modifies is
both scoped to the connection (i.e. not used anywhere else in the receiving
application) and only affects *inbound* data, then callRemoteOnly might be
useful. It may involve less error-checking code on the senders side, and it
may involve fewer round trips (since no response will be generated when the
message is delivered).

As a contrived example, a message which informs the far end that all
subsequent messages on this connection will sent entirely in uppercase (such
that the recipient should apply some sort of filter to them) would be
suitable for callRemoteOnly. The sender does not need to know exactly when
the message has been received, since Foolscap guarantees that all
subsequently sent messages will be delivered *after* the 'SetUpperCase'
message. And, the sender does not need to know whether the connection was
lost before or after the receipt of the message, since the establishment of a
new connection will reset this 'uppercase' flag back to some known
initial-contact state.

  rref.callRemoteOnly("set_uppercase", True)  # returns None!

This method is intended to parallel the 'deliverOnly' method used in E's
CapTP protocol. It is also used (or will be used) in some internal Foolscap
messages to reduce unnecessary network traffic.

** new Slicers: builtin set/frozenset

Code has been added to allow Foolscap to handle the built-in 'set' and
'frozenset' types that were introduced in python-2.4 . The wire protocol does
not distinguish between 'set' and 'sets.Set', nor between 'frozenset' and
'sets.ImmutableSet'.

For the sake of compatibility, everything that comes out of the deserializer
uses the pre-2.4 'sets' module. Unfortunately that means that a 'set' sent
into a Foolscap connection will come back out as a 'sets.Set'. 'set' and
'sets.Set' are not entirely interoperable, and concise things like 'added =
new_things - old_things' will not work if the objects are of different types
(but note that things like 'added = new_things.difference(old_things)' *do*
work).

The current workaround is for remote methods to coerce everything to a
locally-preferred form before use. Better solutions to this are still being
sought. The most promising approach is for Foolscap to unconditionally
deserialize to the builtin types on python >= 2.4, but then an application
which works fine on 2.3 (by using sets.Set) will fail when moved to 2.4 .

** Tub.stopService now indicates full connection shutdown, helping Trial tests

Like all twisted.application.service.MultiService instances, the
Tub.stopService() method returns a Deferred that indicates when shutdown has
finished. Previously, this Deferred could fire a bit early, when network
connections were still trying to deliver the last bits of data. This caused
problems with the Trial unit test framework, which insist upon having a clean
reactor between tests.

Trial test writers who use Foolscap should include the following sequence in
their twisted.trial.unittest.TestCase.tearDown() methods:

def tearDown(self):
    from foolscap.eventual import flushEventualQueue
    d = tub.stopService()
    d.addCallback(flushEventualQueue)
    return d

This will insure that all network activity is complete, and that all message
deliveries thus triggered have been retired. This activity includes any
outbound connections that were initiated (but not completed, or finished
negotiating), as well as any listening sockets.

The only remaining problem I've seen so far is with reactor.resolve(), which
is used to translate DNS names into addresses, and has a window during which
you can shut down the Tub and it will leave a cleanup timer lying around. The
only solution I've found is to avoid using DNS names in URLs. Of course for
real applications this does not matter: it only makes a difference in Trial
unit tests which are making heavy use of short-lived Tubs and connections.



From johann.borck at densedata.com  Wed Apr  4 01:14:13 2007
From: johann.borck at densedata.com (Johann Borck)
Date: Wed, 04 Apr 2007 09:14:13 +0200
Subject: [Twisted-Python] 64bit Installation Problems
In-Reply-To: <4612F267.4090302@mail.mew.co.jp>
References: <4612F267.4090302@mail.mew.co.jp>
Message-ID: <46135045.30602@densedata.com>

Tim Flink wrote:
> I am trying to install Twisted2.5.0 and have been having some problems. When I run the main setup.py, TwistedCore is installed into /usr/lib64/python23/ while everything else (conch, lore, mail, names, news, runner, web and words) is installed into /ur/lib/python23.
>
> So now when I try to import anything outside of core (like Web) I get:
> exceptions.ImportError: No module named web
>
> Is there a way to force TwistedCore to build and install as 32bit or force everything else to install as 64bit?
>
>   
It's recommended to install twisted separate from the python tree and
just put it on the PYTHONPATH. Also it's a good thing to keep a custom
python installation that's known to work with the specific version of
twisted to prevent the package-manager of the distro to make
incompatible changes (dunno what CentOS does, though). Apart from that,
you could put /usr/lib/python23/(site-packages) on the PYTHONPATH, or
copy the stuff to the other location. AFAIK this has nothing to do with
32/64bit but just where the installer copies the packages by default, If
you want a 32bit version, you'll need a chroot with a separate system.

Johann






From robert at gravina.com  Wed Apr  4 01:40:52 2007
From: robert at gravina.com (Robert Gravina)
Date: Wed, 4 Apr 2007 16:40:52 +0900
Subject: [Twisted-Python] Foolscap-0.1.1 released
In-Reply-To: <20070403.213612.74734554.warner@lothar.com>
References: <20070403.213612.74734554.warner@lothar.com>
Message-ID: <94B5BFD3-F733-4DF1-B1E9-648C44D655A0@gravina.com>


On Apr 4, 2007, at 1:36 PM, Brian Warner wrote:

> I've just released Foolscap-0.1.1, the next-generation-of-PB RPC  
> library,
> available in the usual place at:
>
>  http://twistedmatrix.com/trac/wiki/FoolsCap
>  http://twistedmatrix.com/~warner/Foolscap/
>

Wow, I had a read through the docs you made based on oldpb (http:// 
twistedmatrix.com/~warner/Foolscap/copyable.html and http:// 
twistedmatrix.com/~warner/Foolscap/using-pb.html) and think I finally  
understand what Foolscap is about :)

- I like how you've simplified Referenceable/Copyable/Cacheable to  
just the one type - Referenceable - while making the whole thing more  
powerful in the process.
- Being able to pass RemoteReferences to a third party - very cool!
- Serialisers are a great idea! I often want to send classes down the  
wire without having to subclass them. Also, many python types can be  
serialised now (e.g. datetime - I don't think these work with PB, so  
I have to convert them to strings and back again... I do this with  
Decimals too.... yuck!)
-  You can write a  Slicer/Unslicer pair to get an object that is  
copied by value the first time it sent and then copied by reference  
all later times. I *really* would like to be able to do that. I'm  
writing application now where uses create objects with lots of  
references to other objects so this would be very useful as I'm often  
sending these objects to clients again as they are updated, or are  
returned from some remote procedure call etc. and it would be nice if  
the client saw these as the same object.

Other parts of Foolscap I've yet to understand, but I just wanted to  
say I like where PB is heading.

Robert





From littlesweetmelon at gmail.com  Wed Apr  4 04:11:04 2007
From: littlesweetmelon at gmail.com (=?GB2312?B?zPC5zw==?=)
Date: Wed, 4 Apr 2007 18:11:04 +0800
Subject: [Twisted-Python] 3 questions about async,
	threading and dynamic protocol selection
Message-ID: <cdb837ea0704040311h2daaa185i9a96a6e4127171bc@mail.gmail.com>

Q1: How to determine a function is 'blocking action' or not?
Any function needs CPU times. Indeed, a computational-intensive
function is blocking action. But how small/fast function can be
classified as non-blocking? Twist requires all user functions to be
non-blocked. If reactor calls a blocking function, what will happen?
In my mind, reactor maintains a command queue internally (just like
windows message queue). The blocking function only postpones the
execution of other queued functions, but it does not break the logic
of the program. Is that right?

Q2: Today when I go through the twist document, I am confused about
the threading problem in reactor.
What is the different between 'reactor.callFromThread' and a plain
call in reactor loop?
def callFromThread(f):
            self.threadCallQueue.append((f, args, kw))
            self.wakeUp()
It seems equivalent to reactor.callLater(0, f...).
What is the real circumstance for calling callFromThread?
Further more, how to determine a function is thread-safe in python?
Why the twist doc says: "writing data to a transport from a protocol
is not thread-safe."?

Q3: In my application, I need a facility to dynamically select a
protocol to communicate with the server.
Eg: When connected, the server sent a string to client to indicate the
version of protocol it used. Then, the client can load the proper
protocol. But I don't know how to implement this. A 'Factory' can only
create one kind of 'Protocol', and it seems the instances of
'Protocol' cannot share the connection (Transport object) to a server.
Could you give me some clues?

Thank you.

--
ShenLei



From glyph at divmod.com  Wed Apr  4 04:34:46 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 04 Apr 2007 10:34:46 -0000
Subject: [Twisted-Python] 64bit Installation Problems
In-Reply-To: <46135045.30602@densedata.com>
References: <4612F267.4090302@mail.mew.co.jp>
	<46135045.30602@densedata.com>
Message-ID: <20070404103446.7769.1477470278.divmod.xquotient.1985@joule.divmod.com>

On 07:14 am, johann.borck at densedata.com wrote:
>Tim Flink wrote:
>>I am trying to install Twisted2.5.0 and have been having some 
>>problems. When I run the main setup.py, TwistedCore is installed into 
>>/usr/lib64/python23/ while everything else (conch, lore, mail, names, 
>>news, runner, web and words) is installed into /ur/lib/python23.

>It's recommended to install twisted separate from the python tree and
>just put it on the PYTHONPATH.

This is what I do for Twisted *development*, but for deployment, it is 
suggested to build packages for your OS and have them managed by your 
package manager.  The issue Tim is describing makes it sound like it 
would be difficult to build those packages for 64bit centOS.

It sounds like this is simply a bug in either Twisted or distutils. 
I've had similar issues in the past, but I rarely use 64bit OSes so I 
assumed they were personal misconfigurations.  Tim, if you could track 
down this issue further and report a bug in our tracker (if it's a 
Twisted issue) I'd be much obliged.

You may discover it's a bug in Python which has been fixed in a version 
later than 2.3, in which case you are likely out of luck - you might 
just have to upgrade to  a more recent Python version.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070404/1c7a0e0f/attachment.html>

From glyph at divmod.com  Wed Apr  4 04:45:59 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 04 Apr 2007 10:45:59 -0000
Subject: [Twisted-Python] 3 questions about async,
	threading and dynamic protocol selection
In-Reply-To: <cdb837ea0704040311h2daaa185i9a96a6e4127171bc@mail.gmail.com>
References: <cdb837ea0704040311h2daaa185i9a96a6e4127171bc@mail.gmail.com>
Message-ID: <20070404104559.7769.1455216493.divmod.xquotient.2004@joule.divmod.com>

Hi u1CtDC,

On 10:11 am, littlesweetmelon at gmail.com wrote:
>Q1: How to determine a function is 'blocking action' or not?
>Any function needs CPU times. Indeed, a computational-intensive
>function is blocking action. But how small/fast function can be
>classified as non-blocking? Twist requires all user functions to be
>non-blocked. If reactor calls a blocking function, what will happen?
>In my mind, reactor maintains a command queue internally (just like
>windows message queue). The blocking function only postpones the
>execution of other queued functions, but it does not break the logic
>of the program. Is that right?

You've basically answered your own question here.  A "blocking action" 
is one where your users will not want to wait for it :).
>Q2: Today when I go through the twist document, I am confused about
>the threading problem in reactor.
>What is the different between 'reactor.callFromThread' and a plain
>call in reactor loop?
>def callFromThread(f):
>            self.threadCallQueue.append((f, args, kw))
>            self.wakeUp()
>It seems equivalent to reactor.callLater(0, f...).
>What is the real circumstance for calling callFromThread?

callLater is not thread-safe.  callFromThread is designed to be called, 
well, from a thread.  You use callFromThread from threads *other* than 
the thread where the reactor is running, in order to wake up the reactor 
thread and have it do something - usually something that involves 
calling a non-thread-safe Twisted API.
>Further more, how to determine a function is thread-safe in python?

As in any other language, ask the person who wrote it.  There is no 
other way to determine if a function is thread-safe.  In any language 
with dynamic run-time dispatch, determining this without talking to the 
author of the code in question reduces to the halting problem.
>Why the twist doc says: "writing data to a transport from a protocol
>is not thread-safe."?

Nothing in Twisted is thread-safe (other than callFromThread) but this 
is a particularly common error and we wanted to stress it.
>Q3: In my application, I need a facility to dynamically select a
>protocol to communicate with the server.
>Eg: When connected, the server sent a string to client to indicate the
>version of protocol it used. Then, the client can load the proper
>protocol. But I don't know how to implement this. A 'Factory' can only
>create one kind of 'Protocol', and it seems the instances of
>'Protocol' cannot share the connection (Transport object) to a server.
>Could you give me some clues?

The protocol that you are implementing includes a "version" message. 
Unless you have a "Protocol" object connected to receive the data and 
decode that message, you can't decide which version to use for 
subsequent messages.  Simply implement a "Protocol" which understands 
that "version" message and changes its behavior accordingly.

For an example of how you might switch to a completely different 
protocol object, see

http://twistedmatrix.com/trac/browser/trunk/twisted/protocols/amp.py#L1524

The techniques involved are quite nuanced, however, and are probably not 
appropriate for someone just learning about Twisted.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070404/bcaec2db/attachment.html>

From nico at tekNico.net  Wed Apr  4 06:43:54 2007
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 04 Apr 2007 14:43:54 +0200
Subject: [Twisted-Python] Re: 3 questions about async,
	threading and dynamic protocol selection
In-Reply-To: <20070404104559.7769.1455216493.divmod.xquotient.2004@joule.divmod.com>
References: <cdb837ea0704040311h2daaa185i9a96a6e4127171bc@mail.gmail.com>
	<20070404104559.7769.1455216493.divmod.xquotient.2004@joule.divmod.com>
Message-ID: <46139D8A.2080903@tekNico.net>

> littlesweetmelon at gmail.com wrote:
>> Q1: How to determine a function is 'blocking action' or not? Any
>> function needs CPU times. Indeed, a computational-intensive function
>> is blocking action. But how small/fast function can be classified as
>> non-blocking?

glyph at divmod.com wrote:
> You've basically answered your own question here.  A "blocking action" 
> is one where your users will not want to wait for it :).

A value typically used as a reference point, on a human time scale, is a
hundredth of a second, that is, 0.01s, that is, 10ms. If that's the maximum
processing time of each event, you may expect a rate of at least 100 events
per second, with a good overall event flow in the system, depending on the
system load.


>> Twist requires all user functions to be non-blocked. If reactor calls
>> a blocking function, what will happen? In my mind, reactor maintains a
>> command queue internally (just like windows message queue). The
>> blocking function only postpones the execution of other queued
>> functions, but it does not break the logic of the program. Is that
>> right?

Yes, that's right. The processing of subsequent events will be delayed, but
the program will still run correctly, *if* its correctness does not
depend on the timing of event processing.


-- 
Nicola Larosa - http://www.tekNico.net/

E-mail can be saved by your ISP or by the IT department
in your corporation. Gmail, for example, saves everything,
even if you delete it. -- Bruce Schneier, November 2006




From radix at twistedmatrix.com  Wed Apr  4 07:46:40 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 4 Apr 2007 09:46:40 -0400
Subject: [Twisted-Python] Re: 3 questions about async,
	threading and dynamic protocol selection
In-Reply-To: <46139D8A.2080903@tekNico.net>
References: <cdb837ea0704040311h2daaa185i9a96a6e4127171bc@mail.gmail.com>
	<20070404104559.7769.1455216493.divmod.xquotient.2004@joule.divmod.com>
	<46139D8A.2080903@tekNico.net>
Message-ID: <60ed19d40704040646n3f7c1cfbo261074aa58650d5e@mail.gmail.com>

On 4/4/07, Nicola Larosa <nico at teknico.net> wrote:
> > littlesweetmelon at gmail.com wrote:
> >> Twist requires all user functions to be non-blocked. If reactor calls
> >> a blocking function, what will happen? In my mind, reactor maintains a
> >> command queue internally (just like windows message queue). The
> >> blocking function only postpones the execution of other queued
> >> functions, but it does not break the logic of the program. Is that
> >> right?
>
> Yes, that's right. The processing of subsequent events will be delayed, but
> the program will still run correctly, *if* its correctness does not
> depend on the timing of event processing.

However, I want to stress that technically Twisted is not maintaining
a command queue relevant to this situation. Yes, it does have a queue
of scheduled calls, but when you're just talking about running some
code that blocks, it's not Twisted which is preventing further things
from happening, it is the sequential nature of the code itself.
There's no need to queue things up when Python itself, when executing
"a(); b()", prevents 'b' from executing before 'a' has returned.


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From brian.costlow at gmail.com  Wed Apr  4 08:37:20 2007
From: brian.costlow at gmail.com (Brian Costlow)
Date: Wed, 4 Apr 2007 10:37:20 -0400
Subject: [Twisted-Python] Question about plugins tutorial
Message-ID: <89d8b1b00704040737u5c1f30bao34b10478865870ec@mail.gmail.com>

I've been reading through the tutorial section on Twisted Plugins at:

http://twistedmatrix.com/projects/core/documentation/howto/plugin.html

I have a question about this code (the actual plugin from the tutorial)

from twisted.plugin import IPlugin
from matsim import imatsim

class SimpleMaterial(object):
    implements(IPlugin, imatsim.IMaterial)

    def __init__(self, yieldStressFactor, dielectricConstant):
        self._yieldStressFactor = yieldStressFactor
        self.dielectricConstant = dielectricConstant

    def yieldStress(self, temperature):
        return self._yieldStressFactor * temperature

steelPlate = SimpleMaterial(2.06842719e11, 2.7 + 0.2j)
brassPlate = SimpleMaterial(1.03421359e11, 1.4 + 0.5j)

The tutorial implies, but does not say directly, that plug-ins should
not just define a class that implements IPlugin and your interface,
but instantiate an object. This code (also from the example) iterates
over returned plugins (actually according to the example, the objects
steelPlate and brassPlate).

def displayAllKnownMaterials():
    for material in getPlugins(imatsim.IMaterial):
        displayMaterial(material)

If my understanding is correct, then

# plugin
class Foo(object):
    implements(IPlugin, imyplugins.IMyPlugIn)

    def fooStuff(self):
        # do foo stuff
# end plugin

#call plugin from app
for n in getPlugins(imyplugins.IMyPlugIn):
    n.fooStuff()

Won't work. I'd need to do this

# plugin
 class Foo(object):
     implements(IPlugin, imyplugins.IMyPlugIn)

     def fooStuff(self):
         # do foo stuff

f = Foo()
 # end plugin

 #call plugin from app
for n in getPlugins(imyplugins.IMyPlugIn):
     n.fooStuff()

But I'm looking at the Plugins as a way to abstract multiple back-end
actions taken in response to data recieved by a number of asynchronous
events (off of LineReciever and XML-RPC). The plug-in is going to need
to keep some intermediate state data in some cases, which won't work
if they all get the same object. So I was thinking of something along
these lines:

# plugin
  class Foo(object):
      implements(IPlugin, imyplugins.IMyPlugIn)

      def fooStuff(self):
          # do foo stuff

    def fooFactory(self):
        return Foo()

 f = Foo()
  # end plugin

  #call plugin from app
 for n in getPlugins(imyplugins.IMyPlugIn):
    o = n.fooFactory()
      o.fooStuff()


Does this make sense? Is there a better way in the twisted framework
to handle this?



From radix at twistedmatrix.com  Wed Apr  4 08:46:33 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 4 Apr 2007 10:46:33 -0400
Subject: [Twisted-Python] Question about plugins tutorial
In-Reply-To: <89d8b1b00704040737u5c1f30bao34b10478865870ec@mail.gmail.com>
References: <89d8b1b00704040737u5c1f30bao34b10478865870ec@mail.gmail.com>
Message-ID: <60ed19d40704040746k4e1e39eaw552592af7a1d7371@mail.gmail.com>

On 4/4/07, Brian Costlow <brian.costlow at gmail.com> wrote:
> But I'm looking at the Plugins as a way to abstract multiple back-end
> actions taken in response to data recieved by a number of asynchronous
> events (off of LineReciever and XML-RPC). The plug-in is going to need
> to keep some intermediate state data in some cases, which won't work
> if they all get the same object. So I was thinking of something along
> these lines:
>
> # plugin
>   class Foo(object):
>       implements(IPlugin, imyplugins.IMyPlugIn)
>
>       def fooStuff(self):
>           # do foo stuff
>
>     def fooFactory(self):
>         return Foo()
>
>  f = Foo()
>   # end plugin
>
>   #call plugin from app
>  for n in getPlugins(imyplugins.IMyPlugIn):
>     o = n.fooFactory()
>       o.fooStuff()
>
>
> Does this make sense? Is there a better way in the twisted framework
> to handle this?

Yep: making your plugins factories is a common pattern. There's also
often a conditional checking something about 'n' before calling the
fooFactory on it (for example, is it the one the user requested by
name? etc)

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From itamar at itamarst.org  Wed Apr  4 09:36:54 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 04 Apr 2007 11:36:54 -0400
Subject: [Twisted-Python] Question about plugins tutorial
In-Reply-To: <89d8b1b00704040737u5c1f30bao34b10478865870ec@mail.gmail.com>
References: <89d8b1b00704040737u5c1f30bao34b10478865870ec@mail.gmail.com>
Message-ID: <1175701014.19230.3.camel@localhost.localdomain>

On Wed, 2007-04-04 at 10:37 -0400, Brian Costlow wrote:

> But I'm looking at the Plugins as a way to abstract multiple back-end
> actions taken in response to data recieved by a number of asynchronous
> events (off of LineReciever and XML-RPC). 

This is only useful if you need to plug-in new actions, either by 3rd
parties or as a configuration measure. If the actions are fixed, an
easier way to do it is command dispatch to appropriately named methods,
like the way XML-RPC dispatches a "foobar" command to the method
xmlrpc_foobar, or to appropriate command-handling objects.




From daniel at keystonewood.com  Wed Apr  4 10:35:10 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Wed, 4 Apr 2007 12:35:10 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <1175647326.5424.0.camel@localhost.localdomain>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
Message-ID: <D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>

On Apr 3, 2007, at 8:42 PM, Itamar Shtull-Trauring wrote:

> On Tue, 2007-04-03 at 17:07 -0400, Daniel Miller wrote:
>
>>> twisted.internet.defer.DeferredLock and some of the related classes
>>> are
>>> what you ought to be using.
>>
>> Unfortunately that only gets me half way there. DeferredLock.acquire
>> () returns a deferred. How do I return the result of a deferred from
>> a PB remote_xxx() function?
>
> Just return the Deferred from the remote_xxx() function.
>

Thanks, I didn't know I could return a deferred from a PB remote_xxx 
() method. That detail doesn't seem to be documented in the  
Perspective Broker documentation, which I have read quite a few  
times. Maybe this could be highlighted in the "Complete Example" [0]  
section of the PB usage documentation? The examples use the  
TwistedQuotes application, and the IQuoter.getQuote() method always  
returns a string (at least I couldn't find any implementations that  
return a deferred). However, that would require rewriting most if not  
all implementations of IQuoter to return deferred's and/or the code  
that calls IQuoter.getQuote(), which demonstrates the viral nature of  
twisted when used in conjunction with other libraries.

So anyway, I rewrote my server-side library to do it the twisted way  
and return deferred's instead trying rig up some way of waiting for  
them. I still think it would be super useful to be able to pseudo- 
block on a deferred (i.e. allow the reactor to process other events  
while waiting for the deferred). It is very annoying to have to  
rewrite many layers of code when twisted is introduced into a  
program. I did find gthreadless.py, and maybe that would do it.  
Unfortunately discussion on that seems to have been dropped some time  
ago...

For the record, I've included updated versions of the previously  
posted code below. I'd be happy if someone pointed out if I'm doing  
anything wrong (with respect to twisted) in this code.

Thanks,
Daniel

[0] <http://twistedmatrix.com/projects/core/documentation/howto/pb- 
usage.html#auto1>

~~~~~~~~~

from twisted.internet.defer import Deferred, DeferredLock
from twisted.internet.error import ProcessTerminated
from twisted.internet.protocol import ProcessProtocol
from twisted.python.failure import Failure

class LockProxy(object):
     """A proxy that synchronizes method calls on a given subject"""

     def __init__(self, subject):
         self.lock = DeferredLock()
         self.subject = subject

     def __getattr__(self, name):
         value = getattr(self.subject, name)
         if hasattr(value, "im_self") and value.im_self is self.subject:
             def func(*args, **kw):
                 def callback(lock, *args, **kw):
                     try:
                         result = value(*args, **kw)
                     except:
                         lock.release()
                         raise
                     if isinstance(result, Deferred):
                         def release(arg, lock):
                             lock.release()
                             return arg
                         result.addBoth(release, lock)
                     else:
                         lock.release()
                     return result
                 dfr = self.lock.acquire()
                 dfr.addCallback(callback, *args, **kw)
                 return dfr
             return func
         return value

class ProcessError(Exception): pass

class ProcessErrorHandler(ProcessProtocol):

     def __init__(self, deferred):
         self.deferred = deferred
         self.errbuf = []
         self.errors = []

     def errReceived(self, text):
         self.errbuf.append(text)

     def processEnded(self, status):
         if self.errbuf:
             self.errors.append("".join(self.errbuf))
         if isinstance(status.value, ProcessTerminated):
             self.errors.append(status.getErrorMessage())
         if self.errors:
             err = Failure(ProcessError("\n".join(self.errors)))
             self.deferred.errback(err)
         else:
             self.deferred.callback(self)
         self.deferred = None

class TwistedProcess(object):

     def __init__(self, reactor=None, protocol=ProcessErrorHandler):
         if reactor is None:
             from twisted.internet import reactor
         self.reactor = reactor
         self.protocol = protocol

     def check_call(self, cmd):
         dfr = Deferred()
         protocol = self.protocol(dfr)
         self.reactor.spawnProcess(protocol, cmd[0], cmd,  
env=os.environ)
         return dfr





From ellisonbg.net at gmail.com  Wed Apr  4 11:25:21 2007
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 4 Apr 2007 11:25:21 -0600
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <1175647326.5424.0.camel@localhost.localdomain>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
Message-ID: <6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>

The issue brought up in this thread is one that we (the IPython dev
team) has thought about a lot.  There are really two questions about
having true synchronization primitives (something like d.waitFor() or
blockOn(d)):

1.  Can they be implemented in python/twisted in a reliable and robust way?

2.  Should you use them in your code?

Unfortunately, the answer to (1) seems to be no - at least not without
completely refactoring the core of twisted to support this capability
from the ground level.  The tempting way of doing it currently is to
call reactor.iterate() to spin the event loop at a particular point.
We have code in IPython that does this:

http://projects.scipy.org/ipython/ipython/browser/ipython/branches/saw/ipython1/kernel/blockon.py
[DON'T USE THIS CODE!]

For very simple things this code works just fine.

d = functionThatReturnsADeferred()
r = blockOn(d)          # spin the reactor until d fires.

The problem is that if you start to use blockOn in various places in
your code, a single call to blockOn (which calls reactor.iterate())
could trigger other calls to blockOn (which will attempt to call
reactor.iterate() again).  The twisted reactor is simply not designed
to be doubly iterated like this - it leads to all sorts of really
weird problems that are _impossible_ to track down.

This is why people are saying "it can't be done."  I should mention
that it might be possible to implement these things in stackless.

So what about (2)?  Ignoring the fact that such constructs can't be
implemented reliably (let's imagine they could be), should you want to
use them?  I think the answer is this:

The design of Twisted reflects the realities of an asynchronous, event
driven world where things can and do go wrong when you least expect
it.  The error handling decision tree of Deferreds are a reflection of
this reality.  If you try to make this stuff go away (we have tried ma
ny times - we are slow learners and very stubborn) you will be
punished and there will be "weeping and gnashing of teeth."  This
punishment will take the form of buggy code that is difficult to
maintain and extend.

With all that said, I have encountered a few highly unusual cases
where I really did want blockOn to exist.  These cases had the
characteristic that they couldn't be done any other way in Twisted.
The answer in this case is to ditch twisted and use a tool that is
better suited to the problem.  But in my experience these cases only
pop up about 0.00001% of the time.

Brian



From paul-lists at perforge.com  Wed Apr  4 11:34:32 2007
From: paul-lists at perforge.com (Paul G)
Date: Wed, 4 Apr 2007 13:34:32 -0400
Subject: [Twisted-Python] Synchronization techniques
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com><25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com><F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com><1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
Message-ID: <1c8b201c776df$81f26700$6302a8c0@dcore>

Daniel Miller wrote:
-- snip --
> So anyway, I rewrote my server-side library to do it the twisted way
> and return deferred's instead trying rig up some way of waiting for
> them. I still think it would be super useful to be able to pseudo-
> block on a deferred (i.e. allow the reactor to process other events
> while waiting for the deferred). It is very annoying to have to
> rewrite many layers of code when twisted is introduced into a
> program. I did find gthreadless.py, and maybe that would do it.
> Unfortunately discussion on that seems to have been dropped some time
> ago...

you can still use that method *if* you're willing to patch your cpython with 
the stackless changes and live with the requirement that this be done on all 
cpythons your code is going to run on. short of that, or using evil bytecode 
hacks, it's not really possible to implement - you need the ability to save, 
switch and restore stacks plus call into the middle of a function. while 
this can be done with generators, it is virtually equivalent to splitting 
your functions into a top/bottom half and is not directly supported, so it 
ends up looking ugly. if pypy ever gets to the point where it's usable in 
production (has the required c extensions ported and runs close in speed to 
cpython on non-trivial code), syntactic support for such usage could be 
added. please note that if you hadn't wanted to take advantage of being in 
an event loop, you could have easily stuck your code - unchanged - into a 
thread pool (via apis helpfully provided by twisted) and just written a few 
lines of code to adapt the interfaces.

this has little to do with twisted, which - imo - does a wonderful job of 
making the (for some, abeit not me personally) difficult execution flow 
model palatable and clear. twisted might be a very good framework, but it 
isn't an async fairy that sneaks into your room at night and - if you've 
been good - rewrites your code to be all twisty and eventful and leaves a 
quarter under your pillow.

with all that said, the sooner you start thinking of a program as a series 
of events being emitted and handled, the better for you and your twisted 
code - everything will become very natural at that point instead of looking 
like an idiosyncracy. while there are a few languages, like erlang for 
example, that express event loops with cooperative threading syntax 
(processes, messages and futures), i'm of the opinion that it's actually 
harmful to hide the event loop details from people who haven't started 
thinking that way yet - they should be simply syntactic sugar for when 
you've already grokked the model. it's inherently impossible to write good 
concurrent code without this insight, including preemptiver multithreading 
code as well. writing preemption and smp safe mt code boils down to 
understanding the chain of processing each 'event', where such event is 
access to shared data, goes through and the interaction between two or more 
such events descending down this chain - this is the only effective way i've 
found to think about memory barriers and cache coherency for example. just 
like grokking functional programming, grokking this will make you (the 
impersonal pronoun version) a better programmer (fwiw, it's made functional 
programming easier to get for me personally).

cheers,
-p 




From glyph at divmod.com  Wed Apr  4 11:43:02 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 04 Apr 2007 17:43:02 -0000
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
Message-ID: <20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>

On 04:35 pm, daniel at keystonewood.com wrote:
>On Apr 3, 2007, at 8:42 PM, Itamar Shtull-Trauring wrote:
>>On Tue, 2007-04-03 at 17:07 -0400, Daniel Miller wrote:
>>>>twisted.internet.defer.DeferredLock and some of the related classes
>>>>are
>>>>what you ought to be using.
>>>
>>>Unfortunately that only gets me half way there. DeferredLock.acquire
>>>() returns a deferred. How do I return the result of a deferred from
>>>a PB remote_xxx() function?
>>
>>Just return the Deferred from the remote_xxx() function.
>
>Thanks, I didn't know I could return a deferred from a PB remote_xxx () 
>method. That detail doesn't seem to be documented in the  Perspective 
>Broker documentation, which I have read quite a few  times.

The PB documentation is not too great.  Perhaps this paper would be 
helpful to you, if you haven't seen it:

http://www.lothar.com/tech/papers/PyCon-2003/pb-pycon/pb.html#auto7

    """
    In addition, the remote method can itself return a Deferred instead 
of an
    actual return value. When that Deferreds fires, the data given to the
    callback will be serialized and returned to the original caller.
    """
>Maybe this could be highlighted in the "Complete Example" [0]  section 
>of the PB usage documentation? The examples use the  TwistedQuotes 
>application, and the IQuoter.getQuote() method always  returns a string 
>(at least I couldn't find any implementations that  return a deferred).

Please feel free to write some patches for the documentation, or open a 
doc bug describing this issue in more detail.  It's definitely an under- 
documented feature of PB.
>However, that would require rewriting most if not  all implementations 
>of IQuoter to return deferred's and/or the code  that calls 
>IQuoter.getQuote(), which demonstrates the viral nature of  twisted 
>when used in conjunction with other libraries.

I don't think that would really be the terrible burden that you suggest, 
considering the relatively small amount of tutorial documentation that 
implements or calls IQuoter.  One could also propose a separate 
interface, IDeferredQuoter, to make the distinction clearer.
>So anyway, I rewrote my server-side library to do it the twisted way 
>and return deferred's instead trying rig up some way of waiting for 
>them. I still think it would be super useful to be able to pseudo- 
>block on a deferred (i.e. allow the reactor to process other events 
>while waiting for the deferred). It is very annoying to have to 
>rewrite many layers of code when twisted is introduced into a  program. 
>I did find gthreadless.py, and maybe that would do it.  Unfortunately 
>discussion on that seems to have been dropped some time  ago...

I'm afraid that the feature you want doesn't make any sense and is, in a 
broad sense, impossible.  There are some things like it which might be 
possible - for example, http://twistedmatrix.com/trac/ticket/2545 - but 
the reactor is not reentrant and in some sense could not be made 
reentrant.

Consider this innocuous looking block of code:

    from twisted.internet.protocol import Protocol
    from make_believe import magicallyBlockOn

    class MagicalProtocol(Protocol):
        def dataReceived(self, data):
            commands = (self.buf + data).split()
            self.buf = commands[-1]
            for command in commands[:-1]:
                if command == 'QUIT':
                    self.transport.loseConnection()
                    return
                else:
                    # Deferreds are hard, let's go shopping
                    page = 
magicallyBlockOn(getPage("http://example.com/%s" %
                                                    (command,)))
                    self.transport.write("SIZE:"+len(page))

If you were using Deferreds to track the result of the 'getPage' 
operation, you could cancel the callbacks that write to the transport in 
connectionLost.  However, with magical blocking, one dataReceived method 
might be interleaved with another.  That means that every time through 
the loop, you have to check to see if the transport has already been 
disconnected - the code as presented here is buggy and will spuriously 
fail depending on the order of the connection being lost and the remote 
page being retrieved.

In this example I've been careful to accumulate all the buffer- 
management and parsing logic at the top of the method, before any 
potential re-entrancy can happen, but other code (most everything in 
Twisted's existing protocol implementations, not to mention just about 
all application code) would not be so lucky.

It might be quite feasible to implement a microthreaded runtime 
environment that lived on _top_ of Twisted and explicitly accounted for 
issues like these, but that would not really be substantially different 
than 2.5+inlineCallbacks.
>For the record, I've included updated versions of the previously 
>posted code below. I'd be happy if someone pointed out if I'm doing 
>anything wrong (with respect to twisted) in this code.

Nothing immediately jumps out at me.  I've had to write similar code in 
the past, though, and when I've had to do that, an explicit state 
machine for the state of the subprocess (or whatever asynchronous 
resource must be acquired) has been easier to deal with than a lock- 
oriented approach to it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070404/a5152cc2/attachment.html>

From paul-lists at perforge.com  Wed Apr  4 11:49:57 2007
From: paul-lists at perforge.com (Paul G)
Date: Wed, 4 Apr 2007 13:49:57 -0400
Subject: [Twisted-Python] Synchronization techniques
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com><25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com><F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com><1175647326.5424.0.camel@localhost.localdomain>
	<6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>
Message-ID: <1c8be01c776e1$b2d85670$6302a8c0@dcore>

Brian Granger wrote:
> So what about (2)?  Ignoring the fact that such constructs can't be
> implemented reliably (let's imagine they could be), should you want to
> use them?  I think the answer is this:
>
> The design of Twisted reflects the realities of an asynchronous, event
> driven world where things can and do go wrong when you least expect
> it.  The error handling decision tree of Deferreds are a reflection of
> this reality.  If you try to make this stuff go away (we have tried ma
> ny times - we are slow learners and very stubborn) you will be
> punished and there will be "weeping and gnashing of teeth."  This
> punishment will take the form of buggy code that is difficult to
> maintain and extend.

agreed, it's what i wrote in the email i've just sent out. if you look at 
some parts of twisted, like pb, and actually try to use them, you'll find 
that it's extremely liberating and useful not to have things hidden from you 
because this sort of infantilization can only end in tears. continuing with 
the pb example, based on personal experience, not having the network 
communications disguised and hidden from you by ordinary function calls 
makes writing non-trivial code practical, nevermind easy. i can't tell you 
how many projects i've seen that used this hiding back when it was en vogue, 
and all of them to a t were either completely borked or barely functional. 
this is all about having the tools to deal with the problem domain using 
concepts that map it properly - you can't deal with asynchrony without 
having it reified, with every consequence that entails. i spent a 
non-trivial amount of time a long time ago playing with generators, bytecode 
hacks and preprocessors to hide this stuff (it's not as damaging to hide it 
selectively once you already thoroughly understand what's going on under the 
hood) and came to the conclusion that i was wrong to want that. now if i 
could do the same with cigarettes and beer .. ;]

cheers,
-p 




From nico at tekNico.net  Wed Apr  4 12:00:38 2007
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 04 Apr 2007 20:00:38 +0200
Subject: [Twisted-Python] Re: Synchronization techniques
In-Reply-To: <1c8b201c776df$81f26700$6302a8c0@dcore>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com><25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com><F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com><1175647326.5424.0.camel@localhost.localdomain>	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
	<1c8b201c776df$81f26700$6302a8c0@dcore>
Message-ID: <ev0p47$hfb$1@sea.gmane.org>

Paul G wrote:
> while there are a few languages, like erlang for example, that express
> event loops with cooperative threading syntax (processes, messages and
> futures), i'm of the opinion that it's actually harmful to hide the
> event loop details from people who haven't started thinking that way yet
> - they should be simply syntactic sugar for when you've already grokked
> the model.

IIUC, the same holds true for inline callbacks, right?

http://twistedmatrix.com/documents/current/api/twisted.internet.defer.html#inlineCallbacks

-- 
Nicola Larosa - http://www.tekNico.net/

E-mail can be saved by your ISP or by the IT department
in your corporation. Gmail, for example, saves everything,
even if you delete it. -- Bruce Schneier, November 2006




From glyph at divmod.com  Wed Apr  4 12:17:04 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 04 Apr 2007 18:17:04 -0000
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>
Message-ID: <20070404181704.7769.37732181.divmod.xquotient.2128@joule.divmod.com>


On 05:25 pm, ellisonbg.net at gmail.com wrote:
>The issue brought up in this thread is one that we (the IPython dev
>team) has thought about a lot.  There are really two questions about
>having true synchronization primitives (something like d.waitFor() or
>blockOn(d)):
>
>1.  Can they be implemented in python/twisted in a reliable and robust 
>way?

The real question here doesn't involve the words "in python/twisted" :).
>2.  Should you use them in your code?

>Unfortunately, the answer to (1) seems to be no - at least not without
>completely refactoring the core of twisted to support this capability
>from the ground level.  The tempting way of doing it currently is to
>call reactor.iterate() to spin the event loop at a particular point.
>We have code in IPython that does this:
>
>http://projects.scipy.org/ipython/ipython/browser/ipython/branches/saw/ipython1/kernel/blockon.py
>[DON'T USE THIS CODE!]
>
>For very simple things this code works just fine.

I think you mean, "in some cases this code appears to work".  Working 
"just fine" implies that it is robust and supported.  This is an 
actively deprecated programming style and there are numerous known 
problems (besides the ones you've already documented here) with doing 
it.
>d = functionThatReturnsADeferred()
>r = blockOn(d)          # spin the reactor until d fires.
>
>The problem is that if you start to use blockOn in various places in
>your code, a single call to blockOn (which calls reactor.iterate())
>could trigger other calls to blockOn (which will attempt to call
>reactor.iterate() again).  The twisted reactor is simply not designed
>to be doubly iterated like this - it leads to all sorts of really
>weird problems that are _impossible_ to track down.

These "weird" problems are the entirely predictable result of violating 
every assumption that code makes about its run-time environment when it 
is written and tested.  An analogous operation would be to write C code 
to forcibly delete Python objects rather than go through the garbage 
collector because you *really know*, *just this one time*, that you want 
to free that memory.  If you're careful to never touch that object 
again, you might be able to avoid a segfault, but I think most people 
would agree that all bets are off at that point.

This might seem like an exaggerated problem, but I have actually seen 
code like that more than once written by dyed-in-the-wool C programmers 
who didn't "get" how Python's object model worked.  It's the same with 
dyed-in-the-wool non-concurrent programmers approaching concurrent 
systems for the first time.
>This is why people are saying "it can't be done."  I should mention
>that it might be possible to implement these things in stackless.

If you were to implement these things in stackless, you would still have 
to deal with the inherently problematic issue of apparently "sequential" 
code being run recursively when it does not expect to be.  In order to 
prevent this, you would likely have a completely different programming 
model where something properly event-driven, like Twisted itself, were 
scheduling "user code" which was written using a different programming 
style.

For certain problems such things are a good approach.  For example, in 
AI code with extremely deeply nested ad-hoc decision trees modeled as if 
statements and for loops, the cost of stack ripping becomes high both 
conceptually and performance-wise, and it is more natural to model 
individual agents as individual control flows (or "cooperative 
threads").  This sort of code, though, would be written in a style more 
like Erlang, with almost no shared state at all.  Part of Twisted's 
appeal is that it makes mutable state-sharing between disparate systems 
straightforward.  In other words, it is a different programming model 
for a different set of problems that would require a different pile of 
infrastructure.

It may well be possible to implement such a layer on top of Twisted, but 
there is a curious thing that takes place when people begin to tackle 
this problem.  Pretty much everyone eventually comes to the realization 
that this isn't a good idea for their problem domain, and what they 
*actually* want is to wish away the difficulties associated with 
concurrency and pretend that they can "just block" and everything will 
be OK.  The ones who really, really need it (like people dealing with 
the aforementioned AI problems) already know their requirements and 
quietly go ahead and implement what they need, without any hand-wringing 
about how hard programming with Deferreds is or how they'd really like 
to block on one.
>So what about (2)?  Ignoring the fact that such constructs can't be
>implemented reliably (let's imagine they could be), should you want to
>use them?  I think the answer is this:

>The design of Twisted reflects the realities of an asynchronous, event
>driven world where things can and do go wrong when you least expect
>it.  The error handling decision tree of Deferreds are a reflection of
>this reality.  If you try to make this stuff go away (we have tried ma
>ny times - we are slow learners and very stubborn) you will be
>punished and there will be "weeping and gnashing of teeth."  This
>punishment will take the form of buggy code that is difficult to
>maintain and extend.

It sounds like we broadly agree here :).
>With all that said, I have encountered a few highly unusual cases
>where I really did want blockOn to exist.  These cases had the
>characteristic that they couldn't be done any other way in Twisted.
>The answer in this case is to ditch twisted and use a tool that is
>better suited to the problem.  But in my experience these cases only
>pop up about 0.00001% of the time.

I am very curious about your 0.00001% case.  Not that I don't believe 
such cases exist, but in every case but one (twisted ticket #2545) the 
issue has actually been a documentation problem with Twisted, where it 
wasn't clear how to do something the "normal" way with Deferreds and 
such.  I'd like to know if there is another such doc bug we should be 
filing :).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070404/de501080/attachment.html>

From paul-lists at perforge.com  Wed Apr  4 12:28:06 2007
From: paul-lists at perforge.com (Paul G)
Date: Wed, 4 Apr 2007 14:28:06 -0400
Subject: [Twisted-Python] Re: Synchronization techniques
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com><25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com><F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com><1175647326.5424.0.camel@localhost.localdomain>	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com><1c8b201c776df$81f26700$6302a8c0@dcore>
	<ev0p47$hfb$1@sea.gmane.org>
Message-ID: <1c8cc01c776e6$fd873240$6302a8c0@dcore>

Nicola Larosa wrote:
> Paul G wrote:
>> while there are a few languages, like erlang for example, that
>> express event loops with cooperative threading syntax (processes,
>> messages and futures), i'm of the opinion that it's actually harmful
>> to hide the event loop details from people who haven't started
>> thinking that way yet - they should be simply syntactic sugar for
>> when you've already grokked the model.
>
> IIUC, the same holds true for inline callbacks, right?
>
> http://twistedmatrix.com/documents/current/api/twisted.internet.defer.html#inlineCallbacks

nice, haven't seen that yet. it's not quite what i was agitating against - 
you still see an explicit async cutpoint and still have to realize what's 
going on. while i personally wouldn't recommend using this method all 
throughout, it does look to be very useful for situations where you'll never 
need to reuse the bottom half.

-p 




From mithrandi-twisted-python at mithrandi.za.net  Wed Apr  4 14:10:30 2007
From: mithrandi-twisted-python at mithrandi.za.net (Tristan Seligmann)
Date: Wed, 4 Apr 2007 22:10:30 +0200
Subject: [Twisted-Python] Question about plugins tutorial
In-Reply-To: <89d8b1b00704040737u5c1f30bao34b10478865870ec@mail.gmail.com>
References: <89d8b1b00704040737u5c1f30bao34b10478865870ec@mail.gmail.com>
Message-ID: <20070404201030.GD655@mithrandi.za.net>

* Brian Costlow <brian.costlow at gmail.com> [2007-04-04 10:37:20 -0400]:

> # plugin
>  class Foo(object):
>      implements(IPlugin, imyplugins.IMyPlugIn)
> 
>      def fooStuff(self):
>          # do foo stuff
> 
>    def fooFactory(self):
>        return Foo()
> 
> f = Foo()
>  # end plugin
> 
>  #call plugin from app
> for n in getPlugins(imyplugins.IMyPlugIn):
>    o = n.fooFactory()
>      o.fooStuff()
> 
> 
> Does this make sense? Is there a better way in the twisted framework
> to handle this?

The other replies to your posts raise some good points, but I would just
like to point out that classes themselves can be used as plugins. For
example:

class Foo(object):
    classProvides(IPlugin, IMyPlugin):

    def fooStuff(self):
        """Does foo stuff."""

for cls in getPlugins(IMyPlugin):
    o = cls()
    o.fooStuff()

-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20070404/add198e0/attachment.sig>

From ellisonbg.net at gmail.com  Wed Apr  4 14:32:37 2007
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 4 Apr 2007 14:32:37 -0600
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <20070404181704.7769.37732181.divmod.xquotient.2128@joule.divmod.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>
	<20070404181704.7769.37732181.divmod.xquotient.2128@joule.divmod.com>
Message-ID: <6ce0ac130704041332m439d43d3q2e30daff82f11e3e@mail.gmail.com>

> >With all that said, I have encountered a few highly unusual cases
> >where I really did want blockOn to exist.  These cases had the
> >characteristic that they couldn't be done any other way in Twisted.
> >The answer in this case is to ditch twisted and use a tool that is
> >better suited to the problem.  But in my experience these cases only
> >pop up about 0.00001% of the time.
>
> I am very curious about your 0.00001% case.  Not that I don't believe such
> cases exist, but in every case but one (twisted ticket #2545) the issue has
> actually been a documentation problem with Twisted, where it wasn't clear
> how to do something the "normal" way with Deferreds and such.  I'd like to
> know if there is another such doc bug we should be filing :).

The cases I am thinking about is not an example of a doc bug.  The
most relevant one is related to using Twisted in an interactive python
(really IPython most of the time) session.  There are two difficulties
we keep running into:

1.  The interactive python interpreter is a completely synchronous
universe - getting the reactor running in this context seems like a
hack.  The only way I have seen this done is by running the reactor in
a different thread.  The problem with this is that it is inevitable
that you end up wanting to do things with Deferreds in the main thread
where user code is running.  But, as I understand it, Twisted is not
thread safe, so at that point, you are playing with (threaded) fire.

2.  Users expect certain things in an interactive python session that
don't mesh well with Twisted and the asynchronous universe:

>>> psi = computeWavefunctionForHydrogen()
>>> psi.getEnergy(1)
-13.6
# here the user looks at the energy (a human if statement) and decides
if they actually want to
# make the following plot.  If the answer were not -13.6, they would
not make the plot.
>>> plot(psi.getState(1))

Even if you could get the reactor running in an interactive python
session it would be crazy to have to write something like (in an
interactive session):

>>> d = computeWavefunctionForHydrogen()
>>> def printAndPlot(psi, n):
>>>     print psi.getEnergy(n)
>>>     if abs(psi.getEnergy(n) - (psi.getEnergy(n)) < 1.0e-4:
>>>         plot(psi.getState(n))
>>> d.addCallback(printAndPlot, 1)

The problem we are having is that we would like to use Twisted network
clients in functions like computeWavefunctionForHydrogen.  But we
simply can't as there is no way of returning the actual result to the
user.  I can't emphasize enough that end users of such code
(scientists) "just want the damn result" (not a deferred) and are
willing to wait for it.  Thus in classes/functions that need to block
for an actual result, we don't use twisted - we use blocking sockets
instead.

In blockOn existed, the implementation of
computeWavefunctionForHydrogen could look like:

def computeWavefunctionForHydrogen():
    d = doRemoteComputationOnServerUsingTwisted()
    return blockOn(d)

The important point is that doRemoteComputationOnServerUsingTwisted is
the only place where anything involving the network is happening in
this process.  This type of code occurs mainly in clients.  In server
code you are usually also listening on sockets, so there could be
other asyncronous events that occur.  But in interactive client code,
the network event are often very contained and isolated.

One thing we have done in our blocking client code is to create
something we call a PendingResult object.  It is basically a fully
synchronous version of a deferred that allows a user to  poll for or
block on a result that is being computed elsewhere.  It is designed
for interactive usage, where only blocking sockets are used.

Brian



From glyph at divmod.com  Wed Apr  4 15:40:00 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 04 Apr 2007 21:40:00 -0000
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <6ce0ac130704041332m439d43d3q2e30daff82f11e3e@mail.gmail.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>
	<20070404181704.7769.37732181.divmod.xquotient.2128@joule.divmod.com>
	<6ce0ac130704041332m439d43d3q2e30daff82f11e3e@mail.gmail.com>
Message-ID: <20070404214000.7769.1687353046.divmod.xquotient.2170@joule.divmod.com>

On 08:32 pm, ellisonbg.net at gmail.com wrote:
>>I am very curious about your 0.00001% case.  Not that I don't believe 
>>such
>>cases exist, but in every case but one (twisted ticket #2545) the 
>>issue has
>>actually been a documentation problem with Twisted, where it wasn't 
>>clear
>>how to do something the "normal" way with Deferreds and such.  I'd 
>>like to
>>know if there is another such doc bug we should be filing :).
>
>The cases I am thinking about is not an example of a doc bug.  The
>most relevant one is related to using Twisted in an interactive python
>(really IPython most of the time) session.  There are two difficulties
>we keep running into:

Hmm.  I hope you're not the guy I talked to at PyCon (I didn't catch 
his/your name) because I'm about to feel very foolish repeating myself 
here, especially if at some point in the interim you responded to this 
and I didn't notice.
>1.  The interactive python interpreter is a completely synchronous
>universe - getting the reactor running in this context seems like a
>hack.  The only way I have seen this done is by running the reactor in
>a different thread.  The problem with this is that it is inevitable
>that you end up wanting to do things with Deferreds in the main thread
>where user code is running.  But, as I understand it, Twisted is not
>thread safe, so at that point, you are playing with (threaded) fire.

IPython's shell is not the same as the standard Python interpreter. 
It's already its own program and therefore has a fair amount of freedom 
in what it does with user input.

Run "python -m twisted/conch/stdio" for an example of an interactive 
session that is held in a non-blocking way.  Not blocking in the code 
*doesn't* mean not blocking for the user - it just means having the 
option not to block.
>2.  Users expect certain things in an interactive python session that
>don't mesh well with Twisted and the asynchronous universe:

This is _exactly_ the documentation issue I was talking about :).
>>>>psi = computeWavefunctionForHydrogen()
>>>>psi.getEnergy(1)
>-13.6
># here the user looks at the energy (a human if statement) and decides
>if they actually want to
># make the following plot.  If the answer were not -13.6, they would
>not make the plot.
>>>>plot(psi.getState(1))
>
>Even if you could get the reactor running in an interactive python
>session it would be crazy to have to write something like (in an
>interactive session):
>>>>d = computeWavefunctionForHydrogen()
>>>>def printAndPlot(psi, n):
>>>>     print psi.getEnergy(n)
>>>>     if abs(psi.getEnergy(n) - (psi.getEnergy(n)) < 1.0e-4:
>>>>         plot(psi.getState(n))
>>>>d.addCallback(printAndPlot, 1)

Here's a screenshot of an interactive session using the command above:

http://twistedmatrix.com/users/glyph/images/content/screenshots/psi- 
energy.png

Unfortunately it doesn't animate, but there is a 1-second pause between 
"<Deferred #0>" and "Deferred #0 called back:".  It's a bit crude since 
it is "deferred-oriented" right now, rather than result oriented, but a 
few clever implementation tricks could easily eliminate the distinction 
(like the "_.result" line).

Is that the kind of user-interaction you want?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070404/c16895ca/attachment.html>

From twisted-python at 2xlp.com  Wed Apr  4 17:01:23 2007
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 4 Apr 2007 19:01:23 -0400
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
Message-ID: <6C1050DD-11F7-4A8C-84BD-63C4454A9B5E@2xlp.com>


On Apr 3, 2007, at 12:13 PM, robomancer wrote:
> Run phase: a "master" process assigns an experiment to each runner.
> When we get a result back, log the result to a file and send a new
> experiment to that runner.  Repeat until all experiments are done.

As something quick & dirty...

couldn't you just :
	a) have a postgres db on 1 machine and run a master on that.
	b) run slave nodes on all the other machines in reactor loops
	c) master installs commands / file data into postgres
	d) children poll postgres for commands, execute & log to pg as  
necessary

its not elegant at all, but you could do that really really fast.   
you don't have to worry about nodes talking to one another - and they  
can be specifically assigned tasks.


// Jonathan Vanasco

| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
| SyndiClick.com
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      FindMeOn.com - The cure for Multiple Web Personality Disorder
|      Web Identity Management and 3D Social Networking
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      RoadSound.com - Tools For Bands, Stuff For Fans
|      Collaborative Online Management And Syndication Tools
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -





From ellisonbg.net at gmail.com  Wed Apr  4 21:19:20 2007
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 4 Apr 2007 21:19:20 -0600
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <933D1915-D3E7-4ECE-B56E-6FBC98A4AF37@zgroupplc.com>
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
	<db6b5ecc0704030948r1b4f411dh254ba20d47203cdd@mail.gmail.com>
	<933D1915-D3E7-4ECE-B56E-6FBC98A4AF37@zgroupplc.com>
Message-ID: <6ce0ac130704042019o53f0a86er1abe9a740bc77cc9@mail.gmail.com>

> Are you using the PB, a custom protocol or a combination of the two
> to make your remote calls?

Our older version (called chainsaw) uses our own custom protocol by
default.  The newer version uses both PB and xmlrpc/rawhttp in
different places.  But, we have been very careful to design everything
using interfaces and adapters - thus all the network protocols can be
replaced/swapped out for new ones by:

1) writing a few adapter classes that adapt a given protocol to our interaces
2)  changing a single line in a config file to have the new protocol used.

With that said, we are moving more in the raw http direction because
it is so good at streaming large things around.  PB is nice but not
good at that.  Also, using http allows us to develop nice browser
based apps that use all this stuff.

> Regards,
>
>
> Matt
>
>
>
> m a t t h e w   g l u b b
>
> ________________________________________________________________________
> Z Group PLC
>
> Tel: +44 (0) 8700 111 173
> Fax: +44 (0) 8707 051 393
> Txt: +44 (0) 7800 140 877
> Web: <http://www.zgroupplc.com/>
>
> This  email  and  any  files  transmitted  with it are  confidential and
> intended solely for the use of the individual or entity to whom they are
> addressed.  The opinions  expressed in this mail are those of the author
> and do not necessarily  represent the views of the company.  If you have
> received this email in error please notify <service at zgroupplc.com>
>
>
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.1 (Darwin)
>
> iD8DBQFGEowKyI6MkdKPngkRAhsQAJ93yKqsTiKgw1VGMmlnFeOuGnQpKQCgmgjk
> WBkKbP1esCZxV6JwK0o988M=
> =wH2L
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From ellisonbg.net at gmail.com  Wed Apr  4 21:21:54 2007
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 4 Apr 2007 21:21:54 -0600
Subject: [Twisted-Python] Using Twisted for distributed computation /
	experiment running?
In-Reply-To: <fdcd12710704031019h167375c5j1a2a7fefa1f057b9@mail.gmail.com>
References: <fdcd12710704030913w788dce53mde36657e982afd27@mail.gmail.com>
	<db6b5ecc0704030948r1b4f411dh254ba20d47203cdd@mail.gmail.com>
	<fdcd12710704031019h167375c5j1a2a7fefa1f057b9@mail.gmail.com>
Message-ID: <6ce0ac130704042021k40e04c5dl1a5c4804f177fdb7@mail.gmail.com>

> Thanks!  This looks really promising.  Is there a place I can sign up
> to be notified when saw is ready?

Sure, we will announce saw on both the ipython-users and ipython-dev lists:

http://projects.scipy.org/mailman/listinfo/ipython-user
http://projects.scipy.org/mailman/listinfo/ipython-dev

In the meantime, the best source of info about saw is the talk that I
gave at pycon:

http://ipython.scipy.org/talks/0702_pycon/ipython1/

Cheers,

Brian


> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From daniel at keystonewood.com  Wed Apr  4 22:25:12 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Thu, 5 Apr 2007 00:25:12 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
	<20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>
Message-ID: <F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>

On Apr 4, 2007, at 1:43 PM, glyph at divmod.com wrote:

> On 04:35 pm, daniel at keystonewood.com wrote:
> >On Apr 3, 2007, at 8:42 PM, Itamar Shtull-Trauring wrote:
> >>On Tue, 2007-04-03 at 17:07 -0400, Daniel Miller wrote:
> >>>>twisted.internet.defer.DeferredLock and some of the related  
> classes
> >>>>are
> >>>>what you ought to be using.
> >>>
> >>>Unfortunately that only gets me half way there.  
> DeferredLock.acquire
> >>>() returns a deferred. How do I return the result of a deferred  
> from
> >>>a PB remote_xxx() function?
> >>
> >>Just return the Deferred from the remote_xxx() function.
> >
> >Thanks, I didn't know I could return a deferred from a PB  
> remote_xxx ()
> >method. That detail doesn't seem to be documented in the   
> Perspective Broker
> >documentation, which I have read quite a few  times.
>
> The PB documentation is not too great.  Perhaps this paper would be  
> helpful to you, if you haven't seen it:
>
> http://www.lothar.com/tech/papers/PyCon-2003/pb-pycon/pb.html#auto7
>
>     """
>     In addition, the remote method can itself return a Deferred  
> instead of an
>     actual return value. When that Deferreds fires, the data given  
> to the
>     callback will be serialized and returned to the original caller.
>     """

Thanks, I had not read that before, and that does explain it.  
Although it's such a short note that it could be easily missed. It  
would be much better to have a code example.

>
> > Maybe this could be
> >highlighted in the "Complete Example" [0]  section of the PB usage
> >documentation? The examples use the  TwistedQuotes application,  
> and the
> >IQuoter.getQuote() method always  returns a string (at least I  
> couldn't find
> >any implementations that  return a deferred).
>
> Please feel free to write some patches for the documentation, or  
> open a doc bug describing this issue in more detail.  It's  
> definitely an under-documented feature of PB.

I'll try to do that sometime soon.

>
> >However, that would require
> >rewriting most if not  all implementations of IQuoter to return  
> deferred's
> >and/or the code  that calls IQuoter.getQuote(), which demonstrates  
> the viral
> >nature of  twisted when used in conjunction with other libraries.
>
> I don't think that would really be the terrible burden that you  
> suggest, considering the relatively small amount of tutorial  
> documentation that implements or calls IQuoter.  One could also  
> propose a separate interface, IDeferredQuoter, to make the  
> distinction clearer.

Well of course it's no big deal to change IQuoter, but that specific  
case wasn't really my point. My point is that in the real world it's  
a BAD THING to have to rewrite perfectly good/working/tested code  
just because we want to use twisted. But this is exactly what  
happened to me when twisted was introduced into my project.

>
> >So anyway, I rewrote my server-side library to do it the twisted  
> way  and
> >return deferred's instead trying rig up some way of waiting for   
> them. I
> >still think it would be super useful to be able to pseudo- block on a
> >deferred (i.e. allow the reactor to process other events  while  
> waiting for
> >the deferred). It is very annoying to have to  rewrite many layers  
> of code
> >when twisted is introduced into a  program. I did find  
> gthreadless.py, and
> >maybe that would do it.  Unfortunately discussion on that seems to  
> have been
> >dropped some time  ago...
>
> I'm afraid that the feature you want doesn't make any sense and is,  
> in a broad sense, impossible.

Maybe it's impossible for you to see things the way I see them  
because you have become drunk on Twisted Kool-Aide. In my specific  
case I am running twisted in a single-threaded environment with a  
single synchronized resource where each request that needs to access  
that resource must gain an exclusive lock before doing anything with  
it (a classic locking scenario). This is not "I'm being lazy and I do  
not want to learn how to use Deferreds." Rather, it is a requirement  
that is dictated by the system with which I am communicating (it does  
not support concurrent access through the API provided by the  
vendor). Thus, my code would be much simpler (both to write and  
maintain) if I had blockOn(), and it would not have any risk of dead  
lock or other such concurrency bugs. You might ask why I bother to  
use Twisted? -- Perspective Broker is the most elegant way I could  
find to call remote methods in Python. If it were abstracted from  
Twisted to become a fully synchronous library I would use that  
instead, but at this point it seems that if I want PB I am stuck with  
Twisted too.

In short, this feature does "make sense" in my environment. Whether  
it's possible or not is another matter entirely.

>  There are some things like it which might be possible - for  
> example, http://twistedmatrix.com/trac/ticket/2545 - but the  
> reactor is not reentrant and in some sense could not be made  
> reentrant.
>
> Consider this innocuous looking block of code:
>
>     from twisted.internet.protocol import Protocol
>     from make_believe import magicallyBlockOn
>
>     class MagicalProtocol(Protocol):
>         def dataReceived(self, data):
>             commands = (self.buf + data).split()
>             self.buf = commands[-1]
>             for command in commands[:-1]:
>                 if command == 'QUIT':
>                     self.transport.loseConnection()
>                     return
>                 else:
>                     # Deferreds are hard, let's go shopping
>                     page = magicallyBlockOn(getPage("http:// 
> example.com/%s" %
>                                                     (command,)))
>                     self.transport.write("SIZE:"+len(page))

You're "Deferreds are hard" comment is an insult. You make it sound  
like I don't want to think. If I didn't want to think I wouldn't be  
be a software developer.

This code obviously won't work because the getPage() has to wait and  
another dataReceived() call could come in with a QUIT command while  
the first one is still waiting for getPage(). Instead you'd need to  
accumulate the data in a buffer and then do your command processing  
logic after all data has been received--that is, if you want to use  
blockOn(getPage(...))--it probably wouldn't be the smartest way to do  
this because it would be nice to start getting pages before we  
receive all of the data. But this is just one case that doesn't work  
with blockOn(). I've never said that it would magically make every  
case easier, it just makes some less complicated cases very much  
simpler.

Everything I've read about this issue suggests that the twisted  
developers just don't want to give people what they want because it  
would allow them to shoot themselves in the foot (for example, by  
using blockOn() in a multi-threaded environment or in inappropriate  
places such as the example above). But this is Python and we're  
consenting adults. With the proper warnings a feature like this could  
make twisted much more palatable for people with large existing  
projects that do not wish to rewrite entire sections of code just to  
work with deferreds. It would allow people to get the easiest thing  
working as quickly as possible, and then go back and write the  
optimal deferred implementation later when performance/blocking/etc.  
becomes an issue.

Most people that would use blockOn() would probably use it in an  
entirely synchronous fashion where there would only be one deferred  
being processed at any given time. In these cases blockOn() would  
work just fine (if inefficiently). From your point of view that  
probably totally defeats the purpose of using twisted, but as I have  
pointed out above there are other useful features in twisted beside  
its deferred mechanism (PB).

The concept that I am thinking of seems entirely possible, although I  
am sure it would require rewriting existing reactor implementations.  
However, in the long run that seems like a small cost if twisted  
could be more widely adopted because it would play nicer with  
existing non-async code.

>
> If you were using Deferreds to track the result of the 'getPage'  
> operation, you could cancel the callbacks that write to the  
> transport in connectionLost.  However, with magical blocking, one  
> dataReceived method might be interleaved with another.  That means  
> that every time through the loop, you have to check to see if the  
> transport has already been disconnected - the code as presented  
> here is buggy and will spuriously fail depending on the order of  
> the connection being lost and the remote page being retrieved.
>
> In this example I've been careful to accumulate all the buffer- 
> management and parsing logic at the top of the method, before any  
> potential re-entrancy can happen, but other code (most everything  
> in Twisted's existing protocol implementations, not to mention just  
> about all application code) would not be so lucky.
>
> It might be quite feasible to implement a microthreaded runtime  
> environment that lived on _top_ of Twisted and explicitly accounted  
> for issues like these, but that would not really be substantially  
> different than 2.5+inlineCallbacks.
>
> >For the record, I've included updated versions of the previously   
> posted
> >code below. I'd be happy if someone pointed out if I'm doing   
> anything wrong
> >(with respect to twisted) in this code.
>
> Nothing immediately jumps out at me.

Thanks for the review.

~ Daniel





From ellisonbg.net at gmail.com  Wed Apr  4 23:54:04 2007
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 4 Apr 2007 23:54:04 -0600
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
	<20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>
	<F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>
Message-ID: <6ce0ac130704042254g4058f697p83dca8ee0086d536@mail.gmail.com>

>
> > >So anyway, I rewrote my server-side library to do it the twisted
> > way  and
> > >return deferred's instead trying rig up some way of waiting for
> > them. I
> > >still think it would be super useful to be able to pseudo- block on a
> > >deferred (i.e. allow the reactor to process other events  while
> > waiting for
> > >the deferred). It is very annoying to have to  rewrite many layers
> > of code
> > >when twisted is introduced into a  program. I did find
> > gthreadless.py, and
> > >maybe that would do it.  Unfortunately discussion on that seems to
> > have been
> > >dropped some time  ago...
> >
> > I'm afraid that the feature you want doesn't make any sense and is,
> > in a broad sense, impossible.
>
> Maybe it's impossible for you to see things the way I see them
> because you have become drunk on Twisted Kool-Aide. In my specific
> case I am running twisted in a single-threaded environment with a
> single synchronized resource where each request that needs to access
> that resource must gain an exclusive lock before doing anything with
> it (a classic locking scenario). This is not "I'm being lazy and I do
> not want to learn how to use Deferreds." Rather, it is a requirement
> that is dictated by the system with which I am communicating (it does
> not support concurrent access through the API provided by the
> vendor).

We have a very similar situation in IPython.  We have a twisted server
that is managing access to a bunch of other processes (talking over
PB) that each don't support concurrent access.

> Thus, my code would be much simpler (both to write and
> maintain) if I had blockOn(), and it would not have any risk of dead
> lock or other such concurrency bugs.

I do disagree with this.  In our case, we simply use a FIFO queue
based on Deferreds to manage multiple requests to a single resource
that does not support concurrent access.  It is very simple and
explicit.  Even if you had blockOn() you would still have to have
queue to manage the multiple requests, right?  I don't at all see why
it would be simpler if blockOn existed.

> You're "Deferreds are hard" comment is an insult. You make it sound
> like I don't want to think. If I didn't want to think I wouldn't be
> be a software developer.

Just for the record:  I think Deferreds _are_ hard, even damn hard -
at least if you want to do something non-trivial that has robust error
handling.  Some of the callback/errback decision trees we have in our
code are insane and took days to get right and test fully.  The point
is that doing these complex things would be even more insane without
twisted.

> Everything I've read about this issue suggests that the twisted
> developers just don't want to give people what they want because it
> would allow them to shoot themselves in the foot (for example, by
> using blockOn() in a multi-threaded environment or in inappropriate
> places such as the example above).

Personally, I would love a completely robust blockOn to exist.  I
would use it in certain cases.  But the bottom line is that many
people have tried to do this, but that have all failed.  Their
collective wisdom (with which I agree) is that it can't be done
without completely redesigning twisted's internals - if at all -
without breaking the overall programming model in twisted.  Most of us
are not ready to throw the baby out with the bathwater.

> Most people that would use blockOn() would probably use it in an
> entirely synchronous fashion where there would only be one deferred
> being processed at any given time. In these cases blockOn() would
> work just fine (if inefficiently). From your point of view that
> probably totally defeats the purpose of using twisted, but as I have
> pointed out above there are other useful features in twisted beside
> its deferred mechanism (PB).

I thought the same thing when I first wrote the version of blockOn
that we tried in IPython.  As time went along though, I quickly
discovered that these assumptions are simply wrong.  It doesn't work
just fine.

> The concept that I am thinking of seems entirely possible, although I
> am sure it would require rewriting existing reactor implementations.
> However, in the long run that seems like a small cost if twisted
> could be more widely adopted because it would play nicer with
> existing non-async code.

Currently my own gut feeling is that there is something intrinsic to
Twisted's asynchronous programming model that makes a construct like
blockOn impossible to implement (even if you re-wrote a reactor)
without introducing new types of deadlocks and indeterminant behavior
into the system.  Thus it is not simply an issue of us not being smart
enough to figure out how to do it.  It seems more fundamental than
that.

Actually, I think I see why (at least in part) it is problematic.  If
blockOn exists, the following can happen:

def compute(a, b):
    d = a.computeSomething()
    # Lets say that b.state = 1 as of here
    result = blockOn(d)
    # Because the reactor just ran for an iondeterminant amount of
time, b.state could have
    # changed - or maybe not.
    # Thus the return value of this function is essentially a random result.
    return b.state + result

To eliminate such indeterminacies, new constructs would need to be
created to handle such situations:

def compute(a, b):
    d = a.computeSomething()
    # Lets say that b.state = 1 as of here
    acquire(b.state)    # This gets a lock on b.state
    result = blockOn(d)
    result += b.state
    # b.state =1 still
    release(b.state)   # release the lock
    return result

But now you can get deadlocks as blockOn switches to another code
path.  Things start to look just like threads at this point and the
Kool-Aide starts to taste bitter.

Brian



From glyph at divmod.com  Thu Apr  5 03:53:37 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 05 Apr 2007 09:53:37 -0000
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
	<20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>
	<F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>
Message-ID: <20070405095337.7769.357965633.divmod.xquotient.2267@joule.divmod.com>

On 04:25 am, daniel at keystonewood.com wrote:
>On Apr 4, 2007, at 1:43 PM, glyph at divmod.com wrote:
>>On 04:35 pm, daniel at keystonewood.com wrote:
>> >On Apr 3, 2007, at 8:42 PM, Itamar Shtull-Trauring wrote:
>> >>On Tue, 2007-04-03 at 17:07 -0400, Daniel Miller wrote:

>Well of course it's no big deal to change IQuoter, but that specific 
>case wasn't really my point. My point is that in the real world it's  a 
>BAD THING to have to rewrite perfectly good/working/tested code  just 
>because we want to use twisted. But this is exactly what  happened to 
>me when twisted was introduced into my project.

Hmm.  Well, I don't know about the "real world" - haven't visited in a 
while - but in the magical fairy kingdom where *I* live, it is generally 
considered a good idea to globally consider the implications of a new 
programming model on "good/working/tested code".  Networks and 
concurrency, in particular, have this pesky habit of introducing 
entirely new error conditions into previously "working" code, breaking 
all of its assumptions.  This isn't specific to Twisted, but Twisted 
does deal with networks and concurrency quite a bit.
>>I'm afraid that the feature you want doesn't make any sense and is, 
>>in a broad sense, impossible.

>Maybe it's impossible for you to see things the way I see them  because 
>you have become drunk on Twisted Kool-Aide.

You are making it sound like you are bringing a fresh new idea to the 
discussion here, which I've never heard before and am unwilling to 
consider because I'm inflexible in my thinking.  That's not what's 
happening.  This is a frequently-debunked and well-understood issue in 
the Twisted community.  It seems to come up about once per year.  See my 
now apparently prescient blog post as of last April:

    http://glyf.livejournal.com/40037.html
>In my specific  case I am running twisted in a single-threaded 
>environment with a  single synchronized resource where each request 
>that needs to access  that resource must gain an exclusive lock before 
>doing anything with  it (a classic locking scenario). This is not "I'm 
>being lazy and I do  not want to learn how to use Deferreds." Rather, 
>it is a requirement  that is dictated by the system with which I am 
>communicating (it does  not support concurrent access through the API 
>provided by the  vendor). Thus, my code would be much simpler (both to 
>write and  maintain) if I had blockOn(), and it would not have any risk 
>of dead  lock or other such concurrency bugs.

You're confusing two things here.

On the one hand, you want mutual exclusion for an external resource, 
which blocks.

On the other, you want semantics for implementing that mutual exclusion 
via blocking in your own process.

The former, as you have already demonstrated, can be implemented without 
the latter.  The question is, would your code actually be simpler to 
write and to maintain if you had blockOn?  Nothing you've said so far 
indicates that it would actually be more maintainable, and I've tried 
(although perhaps failed) to illustrate the high cost of the *apparent* 
simplicity at the moment of implementation.

It strikes me that the process actually making the foreign API call 
could just block "for real" which would solve the mutual exclusion issue 
- callers into the PB layer would appear to be getting concurrent 
access, but responses would be implicitly queued up.

Another solution here would be for Twisted to have a nice convenience 
API for dispatching tasks to a process pool.  Right now setting up a 
process pool is conceptually easy but mechanically difficult; you have 
to do a lot of typing and make a lot of irrelevant decisions (AMP or PB 
or pickle?  stdio or sockets?).
>You might ask why I bother to use Twisted? -- Perspective Broker is the 
>most elegant way I could  find to call remote methods in Python. If it 
>were abstracted from  Twisted to become a fully synchronous library I 
>would use that  instead, but at this point it seems that if I want PB I 
>am stuck with Twisted too.

This is another area where the feature request doesn't quite make sense. 
It would be possible to implement something that looked kinda-sorta like 
PB, which dealt with a single request/response pair over a single 
socket, in an apparently synchronous and blocking manner.  However, PB 
itself is a fully symmetrical protocol where the server can send 
messages to the client at any time, so a full PB implementation is not 
really possible when any message can be replied to with a "busy, poor 
implementation doesn't allow me to answer that message in this state" 
error.

For a lot of PB applications - those it was designed for, for example, 
online games - you absolutely need full two-way communication.
>In short, this feature does "make sense" in my environment. Whether 
>it's possible or not is another matter entirely.

I am still not convinced.  You can feel free to stop trying to convince 
me though, or you can write a patch which we can then discuss.
>You're "Deferreds are hard" comment is an insult. You make it sound 
>like I don't want to think.

You've also insulted me by implication of not living in the "real world" 
and being "drunk" on "Kool-Aide [sic]".  I think that this feature is a 
symptom of muddy thinking, since I've seen it dozens of times before, 
and I'm not going to apologize to you for thinking that.

The difference between the jabs we're trading here is that I'm not using 
any software that *you* wrote, and I'm not insulting you at the same 
time I'm posting to a mailing list for that software while demanding 
impossible features.
>If I didn't want to think I wouldn't be  be a software developer.

I don't think that you "don't want to think", I think that you're 
mistaken.  However, if indeed you didn't want to think, this is hardly a 
defense, as you'd clearly not be alone in the software development 
profession, such as it is.  c.f. http://worsethanfailure.com/
>This code obviously won't work because the getPage() has to wait and 
>another dataReceived() call could come in with a QUIT command while 
>the first one is still waiting for getPage(). Instead you'd need to 
>accumulate the data in a buffer and then do your command processing 
>logic after all data has been received--that is, if you want to use 
>blockOn(getPage(...))--it probably wouldn't be the smartest way to do 
>this because it would be nice to start getting pages before we  receive 
>all of the data. But this is just one case that doesn't work  with 
>blockOn(). I've never said that it would magically make every  case 
>easier, it just makes some less complicated cases very much  simpler.

It makes some cases appear simpler *at the expense* of breaking lots of 
other, correctly-written code, which depends on not having 20 levels of 
naive "blockOn" calls above them on the stack.  It's analogous to how 
there are restrictions on "user code" in UNIX and you're not allowed to 
handle interrupts directly because the point of the kernel is to allow 
multiple processes to run at the same time.  The original point of 
Twisted was a high degree of frustration that so many libraries for 
speaking protocols implemented their own, incompatible event-loops.
>Everything I've read about this issue suggests that the twisted 
>developers just don't want to give people what they want because it 
>would allow them to shoot themselves in the foot (for example, by 
>using blockOn() in a multi-threaded environment or in inappropriate 
>places such as the example above). But this is Python and we're 
>consenting adults. With the proper warnings a feature like this could 
>make twisted much more palatable for people with large existing 
>projects that do not wish to rewrite entire sections of code just to 
>work with deferreds. It would allow people to get the easiest thing 
>working as quickly as possible, and then go back and write the  optimal 
>deferred implementation later when performance/blocking/etc.  becomes 
>an issue.

I agree that it would be nice to allow programs to get on the Twisted 
bandwagon slowly, and to integrate more cleanly with foreign concurrency 
mechanisms like microthreads and database transactions.  This is exactly 
what Jim Fulton is working on with the multi-reactor stuff for ZEO.  You 
can't have one reentrant reactor, but you *can*, at least conceptually, 
have one reactor start another reactor and wait for it to complete a 
particular operation.  If you'd like to help other projects gradually 
adapt to Twisted, perhaps you would like to contribute something to 
ticket #2545.

To follow my earlier analogy, this is like the hypervisor and user-mode- 
kernel facilities in various UNIXes; if you're not allowed to do 
something in the kernel, it's OK to start your own kernel.
>Most people that would use blockOn() would probably use it in an 
>entirely synchronous fashion where there would only be one deferred 
>being processed at any given time. In these cases blockOn() would  work 
>just fine (if inefficiently). From your point of view that  probably 
>totally defeats the purpose of using twisted, but as I have  pointed 
>out above there are other useful features in twisted beside  its 
>deferred mechanism (PB).

... and as *I've* pointed out above, PB is only possible _because_ of 
Twisted's event loop.  In fact Deferreds were directly extracted from PB 
- originally every PB method had "pbcallback" and "pberrback" keyword 
arguments, and the Deferred class was the encapsulation of that so that 
PB methods could be easily chained and their results passed to other 
systems.
>The concept that I am thinking of seems entirely possible, although I 
>am sure it would require rewriting existing reactor implementations. 
>However, in the long run that seems like a small cost if twisted  could 
>be more widely adopted because it would play nicer with  existing non- 
>async code.

If you want to try and go implement this, you can discover just how 
small the cost is :).  If, in the course of implementing such a thing, 
you manage to get clean, coherent semantics for "blockOn", and it passes 
the full test suite (etc etc) I would not reject such a thing out of 
hand.  I am suggesting that it is impossible to get coherent semantics 
for blockOn, and if you submit an implementation I'll point out the 
specific brokenness of a particular approach, but my main point is that 
it's impossible because of specific problems, not that it's 
unacceptable.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070405/4d41b231/attachment.html>

From matteo.acerbi at gmail.com  Thu Apr  5 04:08:42 2007
From: matteo.acerbi at gmail.com (matteo acerbi)
Date: Thu, 5 Apr 2007 12:08:42 +0200
Subject: [Twisted-Python] Conch filetransfer *client* example?
Message-ID: <606bc0770704050308v436169dcx7131184a8829f7f5@mail.gmail.com>

Hello all!

I'm a Twisted *and* Python beginner, so please don't treat me
badly. :-)

I'm looking for a way to transfer files via SFTP (or SCP) and,
as I'm going to use conch to execute commands remotely
(already did some working tests), I'd like to use the same
package to transfer some files (copying them from the
twisted-running host to the remote one).

I have nothing more than a ssh server on the remote host,
can't even rely on a python interpreter, so please don't suggest
me to transfer files some other way.

Does anyone have a simple example showing how to use the
*client* classes of twisted.conch.ssh.filetransfer?

I'm really stuck on this...

Thanks to anyone that will reply!

Cheers,
Matteo



From daniel at keystonewood.com  Thu Apr  5 07:53:56 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Thu, 5 Apr 2007 09:53:56 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <20070405095337.7769.357965633.divmod.xquotient.2267@joule.divmod.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
	<20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>
	<F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>
	<20070405095337.7769.357965633.divmod.xquotient.2267@joule.divmod.com>
Message-ID: <E0987C5F-E9A2-4AF6-B504-BACB97F637A4@keystonewood.com>

On Apr 5, 2007, at 5:53 AM, glyph at divmod.com wrote:

> >>I'm afraid that the feature you want doesn't make any sense and  
> is,  in a
> >>broad sense, impossible.
>
> >Maybe it's impossible for you to see things the way I see them   
> because you
> >have become drunk on Twisted Kool-Aide.
>
> You are making it sound like you are bringing a fresh new idea to  
> the discussion here, which I've never heard before and am unwilling  
> to consider because I'm inflexible in my thinking.  That's not  
> what's happening.

I'm sorry I wrote that...it was inflammatory and did not bring any  
value to the conversation. Please accept my apology.

> >In my specific  case I am running
> >twisted in a single-threaded environment with a  single synchronized
> >resource where each request that needs to access  that resource  
> must gain an
> >exclusive lock before doing anything with  it (a classic locking  
> scenario).
> >This is not "I'm being lazy and I do  not want to learn how to use
> >Deferreds." Rather, it is a requirement  that is dictated by the  
> system with
> >which I am communicating (it does  not support concurrent access  
> through the
> >API provided by the  vendor). Thus, my code would be much simpler  
> (both to
> >write and  maintain) if I had blockOn(), and it would not have any  
> risk of
> >dead  lock or other such concurrency bugs.
>
> You're confusing two things here.
>
> On the one hand, you want mutual exclusion for an external  
> resource, which blocks.
>
> On the other, you want semantics for implementing that mutual  
> exclusion via blocking in your own process.
>

The external "blocking" resource is just a shell script that takes  
some time t run. It does not acquire any shared resources that would  
result in dead lock and it will always return (maybe with an error,  
but it will return) unless something terrible happens (e.g. plug is  
pulled on server, fire, etc.).

>
> The former, as you have already demonstrated, can be implemented  
> without the latter.  The question is, would your code actually be  
> simpler to write and to maintain if you had blockOn?  Nothing  
> you've said so far indicates that it would actually be more  
> maintainable, and I've tried (although perhaps failed) to  
> illustrate the high cost of the *apparent* simplicity at the moment  
> of implementation.

It would be more maintainable because it would look just like normal  
sequential python code:

lock.acquire() # uses blockOn() to acquire a DeferredLock
try:
     process.check_call(['script1.sh']) # uses blockOn(spawnProcess 
(...)) internally
     process.check_call(['script2.sh'])
finally:
     lock.release()

This is very simple and very easy to maintain. It could be written  
with inlineCallbacks fairly easily as well:

yield lock.acquire()
try:
     yield process.check_call(...)
     yeild process.check_call(...)
finally:
     lock.release()

That's pretty nice (so nice I might just rewrite my code that way).  
My complaint is that the code must have knowledge of the twisted  
environment (why else would it yield the result of process.check_call 
()?). I do not really see the conceptual difference between these two  
code blocks except one yields to and one calls into the reactor event  
loop. Is there some other inherent problem with the first example? Of  
course you need to make sure that the code inside the try/finally  
block does not try to acquire the lock again, but that's a basic  
concurrency problem which can even happen in the next example.

Moving on, in a fully deferred world we have this:

def deflock(func, *args, **kw):
     def callback(lock, *args, **kw):
         try:
             result = func(*args, **kw)
         except:
             lock.release()
             raise
         if isinstance(result, Deferred):
             def release(arg, lock):
                 lock.release()
                 return arg
             result.addBoth(release, lock)
         else:
             lock.release()
         return result
     dfr = self.lock.acquire()
     dfr.addCallback(callback, *args, **kw)
     return dfr

def dostuff():
     def deferproc(result, cmd):
         return process.check_call(cmd) # returns a deferred
     dfr = deferproc(None, ["script1.sh"])
     dfr.addCallback(defproc, ["script2.sh"])
     return dfr

dfr = deflock(dostuff)

... you get the picture.

Notice the code to acquire/release the lock--there are three  
different calls to lock.release() in there, and they all must be  
carefully sorted out to make sure that exactly one of them will be  
called in any given scenario--that's hard to maintain.

>
> It strikes me that the process actually making the foreign API call  
> could just block "for real" which would solve the mutual exclusion  
> issue - callers into the PB layer would appear to be getting  
> concurrent access, but responses would be implicitly queued up.

Right, that would work and that's exactly what subprocess.check_call 
() (the real python built-in version) would do. Unfortunately twisted  
does not work with the subprocess module--spawnProcess() is the only  
alternative I found that actually works and that means I have to use  
a deferred.

>
> Another solution here would be for Twisted to have a nice  
> convenience API for dispatching tasks to a process pool.  Right now  
> setting up a process pool is conceptually easy but mechanically  
> difficult; you have to do a lot of typing and make a lot of  
> irrelevant decisions (AMP or PB or pickle?  stdio or sockets?).

That sounds nice.

>
> >You might ask why I bother to
> >use Twisted? -- Perspective Broker is the most elegant way I  
> could  find to
> >call remote methods in Python. If it were abstracted from  Twisted  
> to become
> >a fully synchronous library I would use that  instead, but at this  
> point it
> >seems that if I want PB I am stuck with Twisted too.
>
> This is another area where the feature request doesn't quite make  
> sense.  It would be possible to implement something that looked  
> kinda-sorta like PB, which dealt with a single request/response  
> pair over a single socket, in an apparently synchronous and  
> blocking manner.  However, PB itself is a fully symmetrical  
> protocol where the server can send messages to the client at any  
> time, so a full PB implementation is not really possible when any  
> message can be replied to with a "busy, poor implementation doesn't  
> allow me to answer that message in this state" error.

I understand that PB is fully symmetrical. In my case I am only using  
half (client makes request, server responds). Would it make sense to  
relax the constraints when PB is used in this way?

>
> >Everything I've read about this issue suggests that the twisted   
> developers
> >just don't want to give people what they want because it  would  
> allow them
> >to shoot themselves in the foot (for example, by  using blockOn()  
> in a
> >multi-threaded environment or in inappropriate  places such as the  
> example
> >above). But this is Python and we're  consenting adults. With the  
> proper
> >warnings a feature like this could  make twisted much more  
> palatable for
> >people with large existing  projects that do not wish to rewrite  
> entire
> >sections of code just to  work with deferreds. It would allow  
> people to get
> >the easiest thing  working as quickly as possible, and then go  
> back and
> >write the  optimal deferred implementation later when
> >performance/blocking/etc.  becomes an issue.
>
> I agree that it would be nice to allow programs to get on the  
> Twisted bandwagon slowly, and to integrate more cleanly with  
> foreign concurrency mechanisms like microthreads and database  
> transactions.  This is exactly what Jim Fulton is working on with  
> the multi-reactor stuff for ZEO.  You can't have one reentrant  
> reactor, but you *can*, at least conceptually, have one reactor  
> start another reactor and wait for it to complete a particular  
> operation.  If you'd like to help other projects gradually adapt to  
> Twisted, perhaps you would like to contribute something to ticket  
> #2545.

This looks very interesting. I'll try to help out with this effort if  
I can find some time.

Thanks for taking time to read my ramblings and understand the  
problems that I am having (even if we don't quite agree on the  
simplest solutions). Your input is valuable, and I am indebted to you  
for providing free support in your spare time.

~ Daniel





From john at johnnypops.demon.co.uk  Thu Apr  5 08:52:01 2007
From: john at johnnypops.demon.co.uk (John Popplewell)
Date: Thu, 5 Apr 2007 15:52:01 +0100
Subject: [Twisted-Python] Conch filetransfer *client* example?
In-Reply-To: <606bc0770704050308v436169dcx7131184a8829f7f5@mail.gmail.com>
References: <606bc0770704050308v436169dcx7131184a8829f7f5@mail.gmail.com>
Message-ID: <20070405145201.GH19769@rosa.blake>

On Thu, Apr 05, 2007 at 12:08:42PM +0200, matteo acerbi wrote:
> Hello all!
> 
> I'm a Twisted *and* Python beginner, so please don't treat me
> badly. :-)
Hi matteo,

I'm new here myself.

> I'm looking for a way to transfer files via SFTP (or SCP) and,
> as I'm going to use conch to execute commands remotely
> (already did some working tests), I'd like to use the same
> package to transfer some files (copying them from the
> twisted-running host to the remote one).
>
><snip!>
>
> Does anyone have a simple example showing how to use the
> *client* classes of twisted.conch.ssh.filetransfer?
I had trouble finding examples as well.
Try 'twisted/conch/scripts/cftp.py', 'conch.py' and 'tkconch.py'.

Note: I don't think any of them work on Windows (not sure about
'tkconch.py') and there are a couple of minor bugs, patches here:
http://twistedmatrix.com/trac/ticket/2519

Hope that helps,

regards,
John.




From andrew-twisted at puzzling.org  Thu Apr  5 08:57:19 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 6 Apr 2007 00:57:19 +1000
Subject: [Twisted-Python] Conch filetransfer *client* example?
In-Reply-To: <606bc0770704050308v436169dcx7131184a8829f7f5@mail.gmail.com>
References: <606bc0770704050308v436169dcx7131184a8829f7f5@mail.gmail.com>
Message-ID: <20070405145719.GE1508@steerpike.home.puzzling.org>

matteo acerbi wrote:
[...]
> 
> Does anyone have a simple example showing how to use the
> *client* classes of twisted.conch.ssh.filetransfer?

It's not a particularly simple example, but the "cftp" program that comes with
Conch (see bin/conch/cftp and twisted/conch/scripts/cftp.py if you're looking at
SVN checkout) is an example of an SFTP client using Conch.

-Andrew.




From general at eepatents.com  Thu Apr  5 09:42:16 2007
From: general at eepatents.com (Ed Suominen)
Date: Thu, 05 Apr 2007 11:42:16 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <E0987C5F-E9A2-4AF6-B504-BACB97F637A4@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>	<1175647326.5424.0.camel@localhost.localdomain>	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>	<20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>	<F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>	<20070405095337.7769.357965633.divmod.xquotient.2267@joule.divmod.com>
	<E0987C5F-E9A2-4AF6-B504-BACB97F637A4@keystonewood.com>
Message-ID: <461518D8.2090204@eepatents.com>

Daniel Miller wrote:
> I'm sorry I wrote that...it was inflammatory and did not bring any value
> to the conversation. Please accept my apology.

That really shows some class. Thanks for saying it.

>> Another solution here would be for Twisted to have a nice convenience
>> API for dispatching tasks to a process pool.  Right now setting up a
>> process pool is conceptually easy but mechanically difficult; you have
>> to do a lot of typing and make a lot of irrelevant decisions (AMP or
>> PB or pickle?  stdio or sockets?).
> 
> That sounds nice.

There's been a lot of interest in this, including from Glyph Lefkowitz.
The taskqueue API in my twisted-goodies package could be easily adapted
to do it, using an implementation of IWorker that works with python
interpreter processes rather than threads. (See
http://foss.eepatents.com/api/twisted-goodies/taskqueue.workers.html.)
Note that you can queue to remote workers with the API just as it stands
now, see RemoteCallWorker and RemoteInterfaceWorker.

If anyone wants to take a shot at a process pool using a ProcessWorker,
I'll be happy to help. And if there's interest in having the result go
into Twisted proper under an MIT license, I remain open to that.

Best regards, Ed



From glyph at divmod.com  Thu Apr  5 09:47:50 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 05 Apr 2007 15:47:50 -0000
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <E0987C5F-E9A2-4AF6-B504-BACB97F637A4@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
	<20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>
	<F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>
	<20070405095337.7769.357965633.divmod.xquotient.2267@joule.divmod.com>
	<E0987C5F-E9A2-4AF6-B504-BACB97F637A4@keystonewood.com>
Message-ID: <20070405154750.7769.109606011.divmod.xquotient.2398@joule.divmod.com>

On 01:53 pm, daniel at keystonewood.com wrote:
>On Apr 5, 2007, at 5:53 AM, glyph at divmod.com wrote:
>> >>I'm afraid that the feature you want doesn't make any sense and  is, 
>>in a
>> >>broad sense, impossible.
>>
>> >Maybe it's impossible for you to see things the way I see them 
>>because you
>> >have become drunk on Twisted Kool-Aide.
>>
>>You are making it sound like you are bringing a fresh new idea to  the 
>>discussion here, which I've never heard before and am unwilling  to 
>>consider because I'm inflexible in my thinking.  That's not  what's 
>>happening.
>
>I'm sorry I wrote that...it was inflammatory and did not bring any 
>value to the conversation. Please accept my apology.

Thank you, I very much appreciate the sentiment!  I'm glad to see you 
also only quoted the actually useful / productive parts of my response 
too ;).
>The external "blocking" resource is just a shell script that takes 
>some time t run. It does not acquire any shared resources that would 
>result in dead lock and it will always return (maybe with an error, 
>but it will return) unless something terrible happens (e.g. plug is 
>pulled on server, fire, etc.).

I thought I understood what was going on, but now I'm confused again. 
Why do you need mutual exclusion at all if it doesn't acquire any shared 
resources?  Couldn't you just run it concurrently?
>It would be more maintainable because it would look just like normal 
>sequential python code:

Yes, it would *look* like sequential python code.  But it wouldn't be 
:).  There's a heck of a lot that can happen in acquire(); your whole 
application could run for ten minutes on that one line of code.  Worst 
of all, it would only happen in extreme situations, so testing or 
debugging issues that are caused by it becomes even more difficult.

<snip blocking code>
>This is very simple and very easy to maintain. It could be written 
>with inlineCallbacks fairly easily as well:
>
>yield lock.acquire()
>try:
>     yield process.check_call(...)
>     yeild process.check_call(...)
>finally:
>     lock.release()
>
>That's pretty nice (so nice I might just rewrite my code that way).

I'm glad you think so.  I was originally not too happy about 
inlineCallbacks (its predecessors did not do so well) but I keep seeing 
examples like this which it makes look much nicer.
>My complaint is that the code must have knowledge of the twisted 
>environment (why else would it yield the result of process.check_call 
>()?). I do not really see the conceptual difference between these two 
>code blocks except one yields to and one calls into the reactor event 
>loop. Is there some other inherent problem with the first example? Of 
>course you need to make sure that the code inside the try/finally 
>block does not try to acquire the lock again, but that's a basic 
>concurrency problem which can even happen in the next example.

This is really the key thing.  If you're running your code in the 
Twisted environment, and you want it to be correct, it really must know 
about the Twisted environment.  The simple presence of the 'yield' 
keyword at every level where a Deferred is being returned forces you to 
acknowledge, "yes, I know that a context switch may occur here". 
Without it, any function could suddenly and radically change the 
assumptions that all of its callers were allowed to make.
>Moving on, in a fully deferred world we have this:

<snip ugly stuff>
>... you get the picture.
>
>Notice the code to acquire/release the lock--there are three  different 
>calls to lock.release() in there, and they all must be  carefully 
>sorted out to make sure that exactly one of them will be  called in any 
>given scenario --that's hard to maintain.

There are other ways to deal with that.  maybeDeferred, for example, 
will make sure you always get a Deferred back and that it looks vaguely 
correct.
>Right, that would work and that's exactly what subprocess.check_call () 
>(the real python built-in version) would do. Unfortunately twisted 
>does not work with the subprocess module--spawnProcess() is the only 
>alternative I found that actually works and that means I have to use  a 
>deferred.

The only thing I have to say about that is:
    http://twistedmatrix.com/trac/ticket/733
>>Another solution here would be for Twisted to have a nice  convenience 
>>API for dispatching tasks to a process pool.  Right now  setting up a 
>>process pool is conceptually easy but mechanically  difficult; you 
>>have to do a lot of typing and make a lot of  irrelevant decisions 
>>(AMP or PB or pickle? stdio or sockets?).
>
>That sounds nice.

Something I'd be doing in my copious spare time, if I had any.
>I understand that PB is fully symmetrical. In my case I am only using 
>half (client makes request, server responds). Would it make sense to 
>relax the constraints when PB is used in this way?

I don't know if it would be feasible to do the work required for PB, due 
to other, less fundamental implementation issues.  However, it was a 
design goal of AMP that it be possible to implement a "naive", only-a 
-few-lines-of-Python version for drop-in ease-of-use comparable to 
XMLRPC while still providing the actual "good" version in Twisted 
itself.  I have heard rumors to the effect that Eric Mangold actually 
wrote such a thing, but I don't know where it is.
>>#2545.
>
>This looks very interesting. I'll try to help out with this effort if 
>I can find some time.

Thanks.
>Thanks for taking time to read my ramblings and understand the 
>problems that I am having (even if we don't quite agree on the 
>simplest solutions). Your input is valuable, and I am indebted to you 
>for providing free support in your spare time.

Thanks very much for taking the time to acknowledge this.  You leave me 
here with the impression that writing these emails was time well spent. 
And, thanks in advance for working on any of those tickets I gave you 
links to ;-).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070405/da4f9e94/attachment.html>

From daniel at keystonewood.com  Thu Apr  5 12:09:53 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Thu, 5 Apr 2007 14:09:53 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <20070405154750.7769.109606011.divmod.xquotient.2398@joule.divmod.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<D76E8423-DCD3-4711-86F6-C9DD07782C66@keystonewood.com>
	<20070404174302.7769.1269595541.divmod.xquotient.2072@joule.divmod.com>
	<F929DDF9-5640-4DC6-9D41-AFA878B4C412@keystonewood.com>
	<20070405095337.7769.357965633.divmod.xquotient.2267@joule.divmod.com>
	<E0987C5F-E9A2-4AF6-B504-BACB97F637A4@keystonewood.com>
	<20070405154750.7769.109606011.divmod.xquotient.2398@joule.divmod.com>
Message-ID: <04D67B29-A3EB-407B-A057-BC8E8770F64C@keystonewood.com>

> >The external "blocking" resource is just a shell script that  
> takes  some
> >time t run. It does not acquire any shared resources that would   
> result in
> >dead lock and it will always return (maybe with an error,  but it  
> will
> >return) unless something terrible happens (e.g. plug is  pulled on  
> server,
> >fire, etc.).
>
> I thought I understood what was going on, but now I'm confused  
> again.  Why do you need mutual exclusion at all if it doesn't  
> acquire any shared resources?  Couldn't you just run it concurrently?

I guess I said that wrong. When I said "it does not acquire any  
shared resources" I was referring to the external system being  
manipulated by the shell script. That effectively means that the  
shell script is the shared resource and it can only be called in a  
synchronous manner. The script is essentially posting a transaction,  
which must be done in an atomic fashion with regard to my code. I  
know this is very ugly, and I'd love to fix it. Unfortunately it's  
not my system so I can't.

We can keep going around and around about this but there's no need.  
My immediate problem was solved when I learned that I could return a  
deferred from a PB remote_xxx() method.

What I would like to continue to discuss is whether all code that  
calls something that does deferred logic must be immediately aware of  
that fact.

> >It would be more maintainable because it would look just like normal
> >sequential python code:
>
> Yes, it would *look* like sequential python code.  But it wouldn't  
> be :).  There's a heck of a lot that can happen in acquire(); your  
> whole application could run for ten minutes on that one line of  
> code.  Worst of all, it would only happen in extreme situations, so  
> testing or debugging issues that are caused by it becomes even more  
> difficult.

This could happen with any deferred logic. As long as the code has  
the proper concurrency logic this is not a problem--even if it takes  
10 minutes. In today's operating systems something like that could  
even happen in plain old synchronous single-threaded code if the OS  
decided to give some other process priority for that long (unlikely  
but possible).

>
> >My complaint is that the code must have knowledge of the twisted   
> environment
> >(why else would it yield the result of process.check_call ()?). I  
> do not
> >really see the conceptual difference between these two  code  
> blocks except
> >one yields to and one calls into the reactor event  loop. Is there  
> some
> >other inherent problem with the first example? Of  course you need  
> to make
> >sure that the code inside the try/finally  block does not try to  
> acquire the
> >lock again, but that's a basic  concurrency problem which can even  
> happen in
> >the next example.
>
> This is really the key thing.  If you're running your code in the  
> Twisted environment, and you want it to be correct, it really must  
> know about the Twisted environment.  The simple presence of the  
> 'yield' keyword at every level where a Deferred is being returned  
> forces you to acknowledge, "yes, I know that a context switch may  
> occur here".  Without it, any function could suddenly and radically  
> change the assumptions that all of its callers were allowed to make.

So it's really a matter of being explicit...and it's true that  
"explicit is better than implicit" but then again, "practicality  
beats purity" :-) It would be super nice to be able to provide the  
exact interface of a normal python module/class/function and have  
twisted logic going on inside. When used properly it would be very  
powerful. Of course doing something like this is definitely not  
entirely innocent, and there should be warnings provided with  
implementations that may block (as there should be with any other  
piece of concurrency-related code that may block). But it's not nice  
to force everyone to use an awkward interface just to try to help  
them avoid mistakes.

~ Daniel





From dkarbott at comcast.net  Thu Apr  5 12:21:15 2007
From: dkarbott at comcast.net (dkarbott at comcast.net)
Date: Thu, 05 Apr 2007 18:21:15 +0000
Subject: [Twisted-Python] SSL Negotiation / connectionMade() callback
Message-ID: <040520071821.6697.46153E1A000E643500001A2922135396539B9B010D9D0E050B@comcast.net>

Hi:
I've been playing around with twisted a little.  I have written an internet.protocol.Protocol subclass that I want to run over SSL.   It seems that the Protocol.connectionMade() callback gets invoked before SSL negotiation is complete. 

Ideally, I don't want my Protocol to send any data until the SSL negotiation is completley finished.

Is there an easy way to get callback when the SSL negotiation is done?

Info:
Twisted Version: 2.0.1 (emerge'd from gentoo portage)
Also, I have the SSL context factories set up to do client authentication.

Any help would be much appreciated.

-- Darrell



From slamb at slamb.org  Thu Apr  5 12:59:03 2007
From: slamb at slamb.org (Scott Lamb)
Date: Thu, 5 Apr 2007 11:59:03 -0700
Subject: [Twisted-Python] 64bit Installation Problems
In-Reply-To: <20070404103446.7769.1477470278.divmod.xquotient.1985@joule.divmod.com>
References: <4612F267.4090302@mail.mew.co.jp> <46135045.30602@densedata.com>
	<20070404103446.7769.1477470278.divmod.xquotient.1985@joule.divmod.com>
Message-ID: <A230AB69-A819-4FF7-8F88-539EAF175FEA@slamb.org>

*grumble* *grumble* I responded to this same thread on buildbot-devel  
yesterday. <http://sourceforge.net/mailarchive/forum.php? 
thread_name=4613203A.1040500%40mail.mew.co.jp&forum_name=buildbot- 
devel> Please don't post the same topic separately to multiple lists.

On Apr 4, 2007, at 3:34 AM, glyph at divmod.com wrote:
> This is what I do for Twisted *development*, but for deployment, it  
> is suggested to build packages for your OS and have them managed by  
> your package manager.  The issue Tim is describing makes it sound  
> like it would be difficult to build those packages for 64bit centOS.
>
> It sounds like this is simply a bug in either Twisted or  
> distutils.  I've had similar issues in the past, but I rarely use  
> 64bit OSes so I assumed they were personal misconfigurations.  Tim,  
> if you could track down this issue further and report a bug in our  
> tracker (if it's a Twisted issue) I'd be much obliged.
>
> You may discover it's a bug in Python which has been fixed in a  
> version later than 2.3, in which case you are likely out of luck -  
> you might just have to upgrade to  a more recent Python version.

http://mail.python.org/pipermail/python-dev/2006-March/062462.html
http://mail.python.org/pipermail/python-dev/2006-March/062548.html

Apparently there's disagreement between how RedHat installs Python on  
x86_64 and how the Python people designed it to be installed.  
Hopefully one of them will bend eventually; until then I just install  
all of the twisted stuff into the arch-dependent directory.

(This has the unfortunate disadvantage that you need to rebuild .rpms  
like python-twisted-web on each architecture, even though they  
contain no architecture-specific code. For that reason I hope  
RedHat's way wins out.)

I have source RPMs that do this at <http://rosalyn.dyn.slamb.org/yum/ 
centos4/SRPMS/>, should anyone be interested. I gave quick build  
instructions in the buildbot-devel thread linked above.

-- 
Scott Lamb <http://www.slamb.org/>





From manlio_perillo at libero.it  Thu Apr  5 13:09:36 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu, 05 Apr 2007 21:09:36 +0200
Subject: [Twisted-Python] twisted 2.5 on Debian
Message-ID: <46154970.7060302@libero.it>

Hi.

Why twisted 2.5 is still not available in Debian?


Thanks   Manlio Perillo



From matteo.acerbi at gmail.com  Thu Apr  5 13:56:04 2007
From: matteo.acerbi at gmail.com (matteo acerbi)
Date: Thu, 5 Apr 2007 21:56:04 +0200
Subject: [Twisted-Python] Conch filetransfer *client* example?
In-Reply-To: <20070405145201.GH19769@rosa.blake>
References: <606bc0770704050308v436169dcx7131184a8829f7f5@mail.gmail.com>
	<20070405145201.GH19769@rosa.blake>
Message-ID: <606bc0770704051256q4d2f3cf0pb3de1e5c73df656c@mail.gmail.com>

2007/4/5, John Popplewell <john at johnnypops.demon.co.uk>:
>
> I had trouble finding examples as well.
> Try 'twisted/conch/scripts/cftp.py', 'conch.py' and 'tkconch.py'.

I hadn't noticed those ones!

> Note: I don't think any of them work on Windows

Luckily I don't need Windows. :-)

> and there are a couple of minor bugs, patches here:
> http://twistedmatrix.com/trac/ticket/2519
>
> Hope that helps,

That surely will!

Thanks a lot to both you and Andrew.

Regards,
Matteo



From mithrandi-twisted-python at mithrandi.za.net  Thu Apr  5 18:41:04 2007
From: mithrandi-twisted-python at mithrandi.za.net (Tristan Seligmann)
Date: Fri, 6 Apr 2007 02:41:04 +0200
Subject: [Twisted-Python] twisted 2.5 on Debian
In-Reply-To: <46154970.7060302@libero.it>
References: <46154970.7060302@libero.it>
Message-ID: <20070406004103.GA22538@mithrandi.za.net>

* Manlio Perillo <manlio_perillo at libero.it> [2007-04-05 21:09:36 +0200]:

> Hi.
> 
> Why twisted 2.5 is still not available in Debian?

This question would be more appropriately addressed to the maintainer of
the Twisted packages in Debian, Matthias Klose <doko at debian.org>. You
might also consider filing a wishlist severity bug requesting that
Twisted 2.5 be packaged. I suspect, however, that the impending release
of etch may be the reason that this has not yet been done.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20070406/80b917a7/attachment.sig>

From andrewfr_ice at yahoo.com  Fri Apr  6 05:25:23 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Fri, 6 Apr 2007 04:25:23 -0700 (PDT)
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <E1HZDD5-0001dh-02@pyramid.twistedmatrix.com>
Message-ID: <387637.45140.qm@web34213.mail.mud.yahoo.com>

Hello Brian:

I have just recently started reading this thread.

>1.  The interactive python interpreter is a
completely >synchronous universe - getting the reactor
running in >this context seems like a hack.  The only
way I have >seen this done is by running the reactor
in
>a different thread.  The problem with this is that it
>is inevitable that you end up wanting to do things
>with Deferreds in the main thread where user code is
>running.  But, as I understand it, Twisted is not
>thread safe, so at that point, you are playing with
>(threaded) fire.

I recented subscribed to this mailing list to ask
questions about integrating Stackless with Twisted....


I execute Stackless and Twisted in their own threads.
Otherwise when the Twisted reactor blocks, Stackless
tasklets (read threads) that could otherwise run,
would be blocked too.

I start the Stackless thread with a
reactor.callInThread().  Because of thread safety, I
use the callFromThread() method to make Twisted calls.
Also for safety and performance, I make the threads
communicate through a deque (I took Phil Mayer's
suggestion).

As for deferreds. Essentially I make the deferreds and
Stackless threads communicate through channels. So
Stackless tasklets block until there is input. 

There are still a few issues and I am still conducting
tests, However things seem to be working...

One of the Stackless members, Carlos de Paula has
started a repository that includes Twisted/Stackless
examples. There are examples using the Perspective
Broker and callInThread/callFromThread.

http://code.google.com/p/stacklessexamples/wiki/StacklessTwisted

Cheers,
Andrew


 
____________________________________________________________________________________
No need to miss a message. Get email on-the-go 
with Yahoo! Mail for Mobile. Get started.
http://mobile.yahoo.com/mail 



From glyph at divmod.com  Fri Apr  6 05:47:44 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 06 Apr 2007 11:47:44 -0000
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <387637.45140.qm@web34213.mail.mud.yahoo.com>
References: <E1HZDD5-0001dh-02@pyramid.twistedmatrix.com>
	<387637.45140.qm@web34213.mail.mud.yahoo.com>
Message-ID: <20070406114744.7769.836631852.divmod.xquotient.2419@joule.divmod.com>

On 11:25 am, andrewfr_ice at yahoo.com wrote:
>I execute Stackless and Twisted in their own threads.
>Otherwise when the Twisted reactor blocks, Stackless
>tasklets (read threads) that could otherwise run,
>would be blocked too.

Stackless tasklets that "want to run" ought to be running due to events 
transpiring.  One kind of event is "time passes" (reactor.callLater), 
other types of events are user interaction (like callbacks in a UI such 
as GTK) or I/O events (dataReceived, connectionLost, et. al.)

There should be no need for native threads in a Twisted+Stackless 
universe.  Even if all your tasklets constantly want to be doing work, 
they should be able to do that via a tasklet scheduler that is always 
running with a 0 callLater timeout.

Do you think this would be possible?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070406/375a1f94/attachment.html>

From radix at twistedmatrix.com  Fri Apr  6 10:02:27 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 6 Apr 2007 12:02:27 -0400
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <20070406114744.7769.836631852.divmod.xquotient.2419@joule.divmod.com>
References: <E1HZDD5-0001dh-02@pyramid.twistedmatrix.com>
	<387637.45140.qm@web34213.mail.mud.yahoo.com>
	<20070406114744.7769.836631852.divmod.xquotient.2419@joule.divmod.com>
Message-ID: <60ed19d40704060902l59ea6cd9y70a89ece42f559fc@mail.gmail.com>

On 4/6/07, glyph at divmod.com <glyph at divmod.com> wrote:
> On 11:25 am, andrewfr_ice at yahoo.com wrote:
> >I execute Stackless and Twisted in their own threads.
> >Otherwise when the Twisted reactor blocks, Stackless
> >tasklets (read threads) that could otherwise run,
> >would be blocked too.
>
> Stackless tasklets that "want to run" ought to be running due to events
> transpiring.  One kind of event is "time passes" (reactor.callLater), other
> types of events are user interaction (like callbacks in a UI such as GTK) or
> I/O events (dataReceived, connectionLost, et. al.)
>
> There should be no need for native threads in a Twisted+Stackless universe.
> Even if all your tasklets constantly want to be doing work, they should be
> able to do that via a tasklet scheduler that is always running with a 0
> callLater timeout.

Thanks for putting it so succinctly. That's what I've been trying to
tell people :-) (in other media).

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From list-ener at strank.info  Fri Apr  6 12:18:00 2007
From: list-ener at strank.info (Stefan Rank)
Date: Fri, 06 Apr 2007 20:18:00 +0200
Subject: [Twisted-Python] Re: Synchronization techniques
In-Reply-To: <20070404214000.7769.1687353046.divmod.xquotient.2170@joule.divmod.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>	<1175647326.5424.0.camel@localhost.localdomain>	<6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>	<20070404181704.7769.37732181.divmod.xquotient.2128@joule.divmod.com>	<6ce0ac130704041332m439d43d3q2e30daff82f11e3e@mail.gmail.com>
	<20070404214000.7769.1687353046.divmod.xquotient.2170@joule.divmod.com>
Message-ID: <46168ED8.9040601@strank.info>

on 04.04.2007 23:40 glyph at divmod.com said the following:
<snip>
> 
> Run "python -m twisted/conch/stdio" for an example of an interactive 
> session that is held in a non-blocking way.  Not blocking in the code 
> *doesn't* mean not blocking for the user - it just means having the 
> option not to block.
> 
>  >2.  Users expect certain things in an interactive python session that
>  >don't mesh well with Twisted and the asynchronous universe:
> 
> This is _exactly_ the documentation issue I was talking about :).
> 
>  >>>>psi = computeWavefunctionForHydrogen()
>  >>>>psi.getEnergy(1)
>  >-13.6
>  ># here the user looks at the energy (a human if statement) and decides
>  >if they actually want to
>  ># make the following plot.  If the answer were not -13.6, they would
>  >not make the plot.
>  >>>>plot(psi.getState(1))
>  >
>  >Even if you could get the reactor running in an interactive python
>  >session it would be crazy to have to write something like (in an
>  >interactive session):
>  >>>>d = computeWavefunctionForHydrogen()
>  >>>>def printAndPlot(psi, n):
>  >>>>     print psi.getEnergy(n)
>  >>>>     if abs(psi.getEnergy(n) - (psi.getEnergy(n)) < 1.0e-4:
>  >>>>         plot(psi.getState(n))
>  >>>>d.addCallback(printAndPlot, 1)
> 
> Here's a screenshot of an interactive session using the command above:
> 
> http://twistedmatrix.com/users/glyph/images/content/screenshots/psi-energy.png
> 
> Unfortunately it doesn't animate, but there is a 1-second pause between 
> "<Deferred #0>" and "Deferred #0 called back:".  It's a bit crude since 
> it is "deferred-oriented" right now, rather than result oriented, but a 
> few clever implementation tricks could easily eliminate the distinction 
> (like the "_.result" line).

Am I right that this is a screenshot of the manhole client?

I just recently tried to embed the IPython shell into a twisted application.
AFAIK this is currently only possible using a separate thread
(there is an ASPN cookbook entry).

I would like to list here what I think is necessary to make this 
possible without using threads. Hopefully, you can correct me where I am 
wrong.

The main IPython class has a main loop (InteractiveShell.interact) that 
uses raw_input. Further, it first sets up pyreadline for handling 
command-line niceties inside raw_input.

For embedding this in twisted, the twisted reactor needs to be the one 
calling IPython/pyreadline when necessary.
On the IPython level, I think this should be "easy" by subclassing the 
Shell and splitting/rearranging the relevant code, so that it can be 
called back at the point where raw_input would normally return.
(I did not look at the new IPython saw branch...)

On the twisted side, I think that something like twisted.internet.stdio 
  would be calling back?
Or rather something like twisted.conch.insults?

I suspect that it would be hard to recode pyreadline in a way that it 
could be called back by twisted?
So to get readline support, something like readline would need to be 
implemented using t.i.stdio / insults.

Does this seem possible, so far? :-)

cheers,
stefan




From glyph at divmod.com  Fri Apr  6 15:28:49 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 06 Apr 2007 21:28:49 -0000
Subject: [Twisted-Python] Re: Synchronization techniques
In-Reply-To: <46168ED8.9040601@strank.info>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<25446.63.107.91.99.1175531522.squirrel@webmail.zoteca.com>
	<F46FC6D1-EE07-4DA3-A7E1-959003749DF8@keystonewood.com>
	<1175647326.5424.0.camel@localhost.localdomain>
	<6ce0ac130704041025g3092ffb9wbb6de6a9dbefcbad@mail.gmail.com>
	<20070404181704.7769.37732181.divmod.xquotient.2128@joule.divmod.com>
	<6ce0ac130704041332m439d43d3q2e30daff82f11e3e@mail.gmail.com>
	<20070404214000.7769.1687353046.divmod.xquotient.2170@joule.divmod.com>
	<46168ED8.9040601@strank.info>
Message-ID: <20070406212849.7769.1052979193.divmod.xquotient.2642@joule.divmod.com>

On 06:18 pm, list-ener at strank.info wrote:
>on 04.04.2007 23:40 glyph at divmod.com said the following:
><snip>

>>Run "python -m twisted/conch/stdio" for an example of an interactive
<snip>
>>Here's a screenshot of an interactive session using the command above:

>Am I right that this is a screenshot of the manhole client?

Sort of.  It's the manhole server (I don't know what you mean by 
"client") running on standard IO, run via 'python -m 
twisted/conch/stdio'.
>For embedding this in twisted, the twisted reactor needs to be the one 
>calling IPython/pyreadline when necessary.
>On the IPython level, I think this should be "easy" by subclassing the 
>Shell and splitting/rearranging the relevant code, so that it can be 
>called back at the point where raw_input would normally return.
>(I did not look at the new IPython saw branch...)

>On the twisted side, I think that something like twisted.internet.stdio 
>would be calling back?

Rather than IPython calling into raw_input, the loop that calls 
raw_input would have to be changed to a function that takes a string. 
This would almost certainly be the trickiest part, since it seems there 
are about two dozen places (at a quick glance) in ipython that call 
raw_input.
>Or rather something like twisted.conch.insults?

insults will be getting its events from twisted.internet.stdio, so both 
will be involved.
>I suspect that it would be hard to recode pyreadline in a way that it 
>could be called back by twisted?
>So to get readline support, something like readline would need to be 
>implemented using t.i.stdio / insults.
>
>Does this seem possible, so far? :-)

To me, sure - although I hardly have the time to do it :).  There have 
been a few forays into line-editing code for insults, although I'm not 
clear of the current state of the art, JP Calderone should be returning 
from vacation soon and will probably have some light to shed on the 
issue.  I don't know much about pyreadline.  There may be code there 
that's reusable, maybe not, but in any event it is a goal of the insults 
library to provide high-quality event-driven line-editing.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070406/a7887903/attachment.html>

From andrewfr_ice at yahoo.com  Fri Apr  6 16:13:07 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Fri, 6 Apr 2007 15:13:07 -0700 (PDT)
Subject: [Twisted-Python] Synchronization
In-Reply-To: <E1HZqtW-0007og-02@pyramid.twistedmatrix.com>
Message-ID: <932767.5808.qm@web34206.mail.mud.yahoo.com>

Hello Glyph:

>Stackless tasklets that "want to run" ought to be
>running due to events transpiring.  One kind of event
>is "time passes" (reactor.callLater), 
>other types of events are user interaction (like
>callbacks in a UI such as GTK) or I/O events
>(dataReceived, connectionLost, et. al.)

I am still relatively new to Twisted...  In the past,
I tried using loopingCall. In turn, the task would
make a call to stackless.schedule() that would allow
waiting tasklets to execute. The problem was that
certain tests would fail resulting in reactor errors
or deferreds would not fire. Also I really don't have
an understanding of what happens when a callback calls
stackless.schedule(). So I would like to avoid this
construct if I can.
  
(I posted all the aforementioned in the "Advice on
Writing a Custom Reactor." )

As a note, under the two threads approach, I still
lost "deferreds." However placing a time.sleep() after
calling a deferred method, would result in the
deferred properly functioning. I am operating under
the suspicion that there is some issue involving the
GIL. This is one of the "issues" I mentioned in my
previous post. 

>There should be no need for native threads in a
>Twisted+Stackless universe.  Even if all your
tasklets >constantly want to be doing work, they
should be able >to do that via a tasklet scheduler
that is always 
>running with a 0 callLater timeout. Do you think this
>would be possible?

Glyph, I modified my web server example (in the
Twisted/Stackless code examples repository). Now the
code is:

reactor.listenTCP(port, MyHttpFactory())
reactor.callLater(1, stackless.schedule)
reactor.run()

Unfortunately the tick tasklet does not pump out
numbers until my web browser makes a request....
(Hopefully) I am doing something wrong?

Glyph, once again, I apologise for being a newbie. I
thought there should be no need for native threads in
a Twisted/Stackless universe too. However by adding an
additional thread, my application works, the solution
is relatively clean, and I have a better understanding
of what is happening. 

Right now, the important thing is that I am reaping
the benefits of Twisted/Stackless which allow me to
focus on WS-BPEL specific programming. Without
Stackless and Twisted, I couldn't do a fraction of
what I am currently achieving. Also by posting my
problems in the Stackless mailing list, I found out
that there are many other people interested in using
Stackless with Twisted. Still I will always be on the
lookout for the right Twisted way to do things. 

Cheers,
Andrew






 
____________________________________________________________________________________
Need Mail bonding?
Go to the Yahoo! Mail Q&A for great tips from Yahoo! Answers users.
http://answers.yahoo.com/dir/?link=list&sid=396546091



From manlio_perillo at libero.it  Sat Apr  7 02:48:05 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 07 Apr 2007 10:48:05 +0200
Subject: [Twisted-Python] twisted 2.5 on Debian
In-Reply-To: <20070406004103.GA22538@mithrandi.za.net>
References: <46154970.7060302@libero.it>
	<20070406004103.GA22538@mithrandi.za.net>
Message-ID: <46175AC5.4020309@libero.it>

Tristan Seligmann ha scritto:
> * Manlio Perillo <manlio_perillo at libero.it> [2007-04-05 21:09:36 +0200]:
> 
>> Hi.
>>
>> Why twisted 2.5 is still not available in Debian?
> 
> This question would be more appropriately addressed to the maintainer of
> the Twisted packages in Debian, Matthias Klose <doko at debian.org>. 

Ok, thanks.

> You
> might also consider filing a wishlist severity bug requesting that
> Twisted 2.5 be packaged. I suspect, however, that the impending release
> of etch may be the reason that this has not yet been done.
> 

The package is in Ubuntu feisty, but not in Debian experimental.
I do not think the release of etch is the problem, since, as an example, 
the latest version of SQLAlchemy is already in experimental
(in date 2007-03-24).


Regards  Manlio Perillo



From antonio.bardazzi at gmail.com  Sat Apr  7 08:18:53 2007
From: antonio.bardazzi at gmail.com (Antonio Bardazzi)
Date: Sat, 7 Apr 2007 16:18:53 +0200
Subject: [Twisted-Python] utils.getProcessOutput lacks uid and gid for
	IReactorProcess.spawnProcess
Message-ID: <4a53758c0704070718g701363cdkc7054027a9636b32@mail.gmail.com>

utils.getProcessOutput(executable, args=(), env={}, path='.',
reactor=None, errortoo=0)

I think is useful for getProcessOutput to accepts also uid and gid for
spawnProcess

IReactorProcess.spawnProcess(processProtocol, executable, args=(),
env={}, path=None, id=None, gid=None, usePTY=0, childFDs=None)

17c17
< def _callProtocolWithDeferred(protocol, executable, args, env, path,
reactor=None):
---
> def _callProtocolWithDeferred(protocol, executable, args, env, path, reactor=None, uid=None, gid=None):
23c23
<     reactor.spawnProcess(p, executable, (executable,)+tuple(args), env, path)
---
>     reactor.spawnProcess(p, executable, (executable,)+tuple(args), env, path, uid=uid, gid=gid)
54c54
< def getProcessOutput(executable, args=(), env={}, path='.', reactor=None,
---
> def getProcessOutput(executable, args=(), env={}, path='.', reactor=None, uid=None, gid=None,
77c77,78
<                                      reactor)
---
>                                      reactor,
>                                      uid=uid, gid=gid)
170d170
<
-------------- next part --------------
A non-text attachment was scrubbed...
Name: utils.getProcessOutput_uid_and_gid.patch.gz
Type: application/x-gzip
Size: 294 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070407/f7c1e8a2/attachment-0002.bin>

From glyph at divmod.com  Sat Apr  7 08:35:33 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 07 Apr 2007 14:35:33 -0000
Subject: [Twisted-Python] utils.getProcessOutput lacks uid and gid for
	IReactorProcess.spawnProcess
In-Reply-To: <4a53758c0704070718g701363cdkc7054027a9636b32@mail.gmail.com>
References: <4a53758c0704070718g701363cdkc7054027a9636b32@mail.gmail.com>
Message-ID: <20070407143533.7769.1770065051.divmod.xquotient.2650@joule.divmod.com>




On 02:18 pm, antonio.bardazzi at gmail.com wrote:
>I think is useful for getProcessOutput to accepts also uid and gid for
>spawnProcess

Hi Antonio,

Thanks for your interest.  If you want to contribute to Twisted, have a 
look at this page:

    http://twistedmatrix.com/trac/wiki/TwistedDevelopment

Briefly, your submission should:

* be in unified diff format
* be attached to a ticket in the tracker
* include unit tests
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070407/5fdb66fc/attachment.html>

From exarkun at twistedmatrix.com  Sat Apr  7 22:05:02 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 08 Apr 2007 04:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1176005102.28.665442695@twistedmatrix.com

Bug summary
______________________
Summary for 2007-04-01 through 2007-04-08
Bugs opened: 7    Bugs closed: 5  Total open bugs: 891 (+2)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +1  |Highest:  -2          |Core:     +2           
|Enhancement:  +1  |High:     -1          |Ftp:      -2           
|Task:         +0  |Normal:   +4          |Trial:    -1           
                   |Low:      +1          |Web:      +0           
                                          |Web2:     +2           
                                          |Website:  +0           
                                          |Words:    +1           


New / Reopened Bugs
______________________
                    ===== High =====
[#2554] strange connect timeouts (opened by gudron) (CLOSED, invalid)
    task            web        http://twistedmatrix.com/trac/ticket/2554

                    ===== Normal =====
[#2549] XMPPAuthenticator does not try non-SASL authentication (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2549

[#2551] Get rid of reference to wxsupport in choosing reactor howto (opened by itamarst)
    defect          core       http://twistedmatrix.com/trac/ticket/2551

[#2552] broken links in intro.xhtml (opened by stan)
    defect          web2       http://twistedmatrix.com/trac/ticket/2552

[#2553] Projects page links to old versions of code (opened by wiml) (CLOSED, duplicate)
    enhancement     website    http://twistedmatrix.com/trac/ticket/2553

[#2555] Documentation update: deferred results in PB (opened by daniel)
    defect          core       http://twistedmatrix.com/trac/ticket/2555

                    ===== Low =====
[#2550] redundant directoryListing method in twisted.web2.static.File class (opened by stan)
    defect          web2       http://twistedmatrix.com/trac/ticket/2550



Closed Bugs
______________________
                    ===== Highest =====
[#1160] FTPClient failed commands return a FirstError (opened by orbitz, closed by therve, fixed)
    defect          ftp        http://twistedmatrix.com/trac/ticket/1160

[#2482] TrialRunners need separate workingDirectory under Windows (opened by therve, closed by therve, fixed)
    defect          trial      http://twistedmatrix.com/trac/ticket/2482

                    ===== High =====
[#1107] [PATCH] FTPClient does not fire current commands errback on connectionLost (opened by orbitz, closed by therve, fixed)
    defect          ftp        http://twistedmatrix.com/trac/ticket/1107

[#2554] strange connect timeouts (opened by gudron, closed by exarkun, invalid)
    task            web        http://twistedmatrix.com/trac/ticket/2554

                    ===== Normal =====
[#2553] Projects page links to old versions of code (opened by wiml, closed by ralphm, duplicate)
    enhancement     website    http://twistedmatrix.com/trac/ticket/2553





From exarkun at divmod.com  Sun Apr  8 08:51:25 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 8 Apr 2007 10:51:25 -0400
Subject: readline-like behavior inside Twisted (was Re: [Twisted-Python] Re:
	Synchronization techniques)
In-Reply-To: <20070406212849.7769.1052979193.divmod.xquotient.2642@joule.divmod.com>
Message-ID: <20070408145125.18920.1518675638.divmod.quotient.9346@ohm>

On Fri, 06 Apr 2007 21:28:49 -0000, glyph at divmod.com wrote:
>On 06:18 pm, list-ener at strank.info wrote:
>>on 04.04.2007 23:40 glyph at divmod.com said the following:
>><snip>
>
>>>Run "python -m twisted/conch/stdio" for an example of an interactive
><snip>
>>>Here's a screenshot of an interactive session using the command above:
>
>>Am I right that this is a screenshot of the manhole client?
>
>Sort of.  It's the manhole server (I don't know what you mean by "client") 
>running on standard IO, run via 'python -m twisted/conch/stdio'.
>>For embedding this in twisted, the twisted reactor needs to be the one 
>>calling IPython/pyreadline when necessary.
>>On the IPython level, I think this should be "easy" by subclassing the 
>>Shell and splitting/rearranging the relevant code, so that it can be called 
>>back at the point where raw_input would normally return.
>>(I did not look at the new IPython saw branch...)
>
>>On the twisted side, I think that something like twisted.internet.stdio 
>>would be calling back?
>
>Rather than IPython calling into raw_input, the loop that calls raw_input 
>would have to be changed to a function that takes a string. This would 
>almost certainly be the trickiest part, since it seems there are about two 
>dozen places (at a quick glance) in ipython that call raw_input.
>>Or rather something like twisted.conch.insults?
>
>insults will be getting its events from twisted.internet.stdio, so both will 
>be involved.
>>I suspect that it would be hard to recode pyreadline in a way that it could 
>>be called back by twisted?
>>So to get readline support, something like readline would need to be 
>>implemented using t.i.stdio / insults.
>>
>>Does this seem possible, so far? :-)
>
>To me, sure - although I hardly have the time to do it :).  There have been 
>a few forays into line-editing code for insults, although I'm not clear of 
>the current state of the art, JP Calderone should be returning from vacation 
>soon and will probably have some light to shed on the issue.  I don't know 
>much about pyreadline.  There may be code there that's reusable, maybe not, 
>but in any event it is a goal of the insults library to provide high-quality 
>event-driven line-editing.
>

I haven't looked at pyreadline before, although I did take a look at UNC a
long time ago.  Taking a quick look at the code, it looks like converting
pyreadline to be Twisted friendly may be doable.  The most obvious change
that would be required is for each point in the code which calls getkeypress
or getchar to be changed to instead respond to an event.  The ideal way to
do this would be with a nice state machine which accounts for all the legal
inputs and states the input system can be in.  A slightly less nice way which
would probably be much easier to implement would be to add getkeypress and
getchar implementations which return Deferreds and then use inlineCallbacks
to avoid having to make significant changes to any of the callers.  This is
worse since it leaves the code a bit of a mess, but it might be useful as an
experiment.

As for insults, I expect it has a less complete implementation of all of the
typical readline features you or your users are interested in, but it is
gradually improving.  What would actually be really excellent is if both
insults and pyreadline used the same underlying readline model code which
was devoid of input/output code, then each could focus on the part it should
really care about (dealing with events or talking to a windows console or
what have you) and improvements to the actually interesting behavior in the
readline model could be shared between the two.

To some extend insults already has this (I've tried to factor as much of the
interesting behavior out away from the Twisted parts), and I see this is also
how at least some of pyreadline is structured (eg lineeditor/history.py), so
it might actually be feasible to merge the two backends into one shared
thing.

Jean-Paul



From roland.hedberg at adm.umu.se  Mon Apr  9 07:21:50 2007
From: roland.hedberg at adm.umu.se (Roland Hedberg)
Date: Mon, 09 Apr 2007 15:21:50 +0200
Subject: [Twisted-Python] Cannot pickle <type 'DB'> objects
Message-ID: <461A3DEE.1060003@adm.umu.se>

Hi!

I've written a system that consists of a central module, one or more
receiver modules and one or more sender modules.

Different modules might handle different protocols, and this is one of
the reasons I choose twisted as framework.

But now I've got a problem I don't know how to solve.

One of the sender modules is depending on another package and that
package opens a sleepycat database at initialization.

Which is not playing nice with mktap. So, now when I use mktap I get an
exception with the error code shown on the subject line of this mail.

Is there anyway by which I can tell mktap to "forget" about the
sleepycat database or ... ?

-- Roland






From exarkun at divmod.com  Mon Apr  9 07:34:05 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 9 Apr 2007 09:34:05 -0400
Subject: [Twisted-Python] Cannot pickle <type 'DB'> objects
In-Reply-To: <461A3DEE.1060003@adm.umu.se>
Message-ID: <20070409133405.18920.2039463152.divmod.quotient.9716@ohm>

On Mon, 09 Apr 2007 15:21:50 +0200, Roland Hedberg <roland.hedberg at adm.umu.se> wrote:
>Hi!
>
>I've written a system that consists of a central module, one or more
>receiver modules and one or more sender modules.
>
>Different modules might handle different protocols, and this is one of
>the reasons I choose twisted as framework.
>
>But now I've got a problem I don't know how to solve.
>
>One of the sender modules is depending on another package and that
>package opens a sleepycat database at initialization.
>
>Which is not playing nice with mktap. So, now when I use mktap I get an
>exception with the error code shown on the subject line of this mail.
>
>Is there anyway by which I can tell mktap to "forget" about the
>sleepycat database or ... ?

Two possibilities jump out at me:

  - Don't invoke the initialization code of that package in makeService,
    wait until the startService method of the service you create is called,
    and invoke it then.  This will prevent the DB from being opened until
    the application is actually started (ie, when twistd is run).

  - Don't use mktap, just use twistd: since Twisted 2.5, these two are
    roughly equivalent:

      mktap foo --bar
      twistd -f foo.tap

    vs

      twistd foo --bar

    The most significant difference being that the latter doesn't create a
    tap file initially.

Jean-Paul



From micahel at gmail.com  Mon Apr  9 08:33:26 2007
From: micahel at gmail.com (Michael Hudson)
Date: Mon, 9 Apr 2007 14:33:26 +0000 (UTC)
Subject: [Twisted-Python] Re: readline-like behavior inside Twisted (was Re:
	Re:	Synchronization techniques)
References: <20070406212849.7769.1052979193.divmod.xquotient.2642@joule.divmod.com>
	<20070408145125.18920.1518675638.divmod.quotient.9346@ohm>
Message-ID: <loom.20070409T163040-218@post.gmane.org>

Jean-Paul Calderone <exarkun <at> divmod.com> writes:

> I haven't looked at pyreadline before, although I did take a look at UNC a
> long time ago.  Taking a quick look at the code, it looks like converting
> pyreadline to be Twisted friendly may be doable. 

This isn't really a followup, but it seems worthwhile to mention that GNU
readline itself has a callback interface (rl_callback_read_char) that would be
suitable for using with Twisted.  You'd have to use ctypes or something to get
to it, but it's there.

Cheers,
mwh





From exarkun at divmod.com  Mon Apr  9 09:12:24 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 9 Apr 2007 11:12:24 -0400
Subject: [Twisted-Python] Re: readline-like behavior inside Twisted (was
	Re: Re:	Synchronization techniques)
In-Reply-To: <loom.20070409T163040-218@post.gmane.org>
Message-ID: <20070409151224.18920.1597642202.divmod.quotient.9738@ohm>

On Mon, 9 Apr 2007 14:33:26 +0000 (UTC), Michael Hudson <micahel at gmail.com> wrote:
>Jean-Paul Calderone <exarkun <at> divmod.com> writes:
>
>> I haven't looked at pyreadline before, although I did take a look at UNC a
>> long time ago.  Taking a quick look at the code, it looks like converting
>> pyreadline to be Twisted friendly may be doable.
>
>This isn't really a followup, but it seems worthwhile to mention that GNU
>readline itself has a callback interface (rl_callback_read_char) that would be
>suitable for using with Twisted.  You'd have to use ctypes or something to get
>to it, but it's there.

Good point, I'd forgotten about that API.

Jean-Paul



From glyph at divmod.com  Mon Apr  9 09:53:24 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 09 Apr 2007 15:53:24 -0000
Subject: [Twisted-Python] Cannot pickle <type 'DB'> objects
In-Reply-To: <20070409133405.18920.2039463152.divmod.quotient.9716@ohm>
References: <461A3DEE.1060003@adm.umu.se>
	<20070409133405.18920.2039463152.divmod.quotient.9716@ohm>
Message-ID: <20070409155324.7769.377391570.divmod.xquotient.2667@joule.divmod.com>

On 01:34 pm, exarkun at divmod.com wrote:
>On Mon, 09 Apr 2007 15:21:50 +0200, Roland Hedberg 
><roland.hedberg at adm.umu.se> wrote:

>>Is there anyway by which I can tell mktap to "forget" about the
>>sleepycat database or ... ?

>Two possibilities jump out at me:
>
>  - Don't invoke the initialization code of that package in makeService,
>    wait until the startService method of the service you create is 
>called,
>    and invoke it then.  This will prevent the DB from being opened 
>until
>    the application is actually started (ie, when twistd is run).

This has the added advantage of working with the --uid and --gid options 
of twistd as well.  If your objects are created as the service is 
created, they will be created (and the database opened) as root.  You 
almost always want to wait until the service actually starts up, i.e. 
until Twisted has already daemonized, already shed privileges, to 
actually open files and databases.
>  - Don't use mktap, just use twistd

There is also probably no reason to use mktap for a case like this any 
more though, and there are no tests to ensure that pickles remain 
compatible across Twisted or Python versions.  Not only are there no 
automated tests, but as far as I know nobody is still using taps as a 
method persisting configuration any more, so it is unlikely there is any 
mechanism for us to notice if pickle compatibility is broken.

In other words, you're probably better off taking both of JP's 
suggestions rather than just one.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070409/8042406b/attachment.html>

From micahel at gmail.com  Mon Apr  9 11:47:16 2007
From: micahel at gmail.com (Michael Hudson)
Date: Mon, 9 Apr 2007 17:47:16 +0000 (UTC)
Subject: [Twisted-Python] Re: readline-like behavior inside Twisted
	(was	Re:Re:	Synchronization techniques)
References: <loom.20070409T163040-218@post.gmane.org>
	<20070409151224.18920.1597642202.divmod.quotient.9738@ohm>
Message-ID: <loom.20070409T194633-599@post.gmane.org>

Jean-Paul Calderone <exarkun <at> divmod.com> writes:

> 
> On Mon, 9 Apr 2007 14:33:26 +0000 (UTC), Michael Hudson <micahel <at>
gmail.com> wrote:
> >Jean-Paul Calderone <exarkun <at> divmod.com> writes:
> >
> >> I haven't looked at pyreadline before, although I did take a look at UNC a
> >> long time ago.  Taking a quick look at the code, it looks like converting
> >> pyreadline to be Twisted friendly may be doable.
> >
> >This isn't really a followup, but it seems worthwhile to mention that GNU
> >readline itself has a callback interface (rl_callback_read_char) that would be
> >suitable for using with Twisted.  You'd have to use ctypes or something to get
> >to it, but it's there.
> 
> Good point, I'd forgotten about that API.

Make sure you use readline 5.1 (or newer) though, otherwise your app will hang
when the user presses C-r :-)

Cheers,
mwh




From sknutti at sanz.com  Mon Apr  9 15:03:51 2007
From: sknutti at sanz.com (Scott Knutti)
Date: Mon, 09 Apr 2007 15:03:51 -0600
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
Message-ID: <461AAA37.8000306@sanz.com>

Hello,

Can anyone point me to some examples of using the TaskQueue code from 
Twisted-Goodies? 

Thanks,
Scott Knutti



From general at eepatents.com  Mon Apr  9 18:32:10 2007
From: general at eepatents.com (Ed Suominen)
Date: Mon, 09 Apr 2007 17:32:10 -0700
Subject: [Twisted-Python] Synchronization techniques
In-Reply-To: <461AAA37.8000306@sanz.com>
References: <EEC78FEB-7994-4757-BC60-314BFA70EE0E@keystonewood.com>
	<461AAA37.8000306@sanz.com>
Message-ID: <461ADB0A.30201@eepatents.com>

Scott Knutti wrote:
> Can anyone point me to some examples of using the TaskQueue code from
> Twisted-Goodies?

As its author I've used it as follows, in no particular order:

1. In sAync, to do sequential database transactions in a single thread.
See http://foss.eepatents.com/sAsync/browser/trunk/sasync/database.py

2. In DynamicSite (which serves foss.eepatents.com and some other sites)
to run Trac stuff in a single thread. This implementation does some work
to deal with occasional freezes of the Trac WSGI application. When the
queue gets too backed up, Trac is rudely forced into finishing up and
moving on. See
http://foss.eepatents.com/DynamicSite/browser/trunk/dynamicsite/wsgi.py

3. In a GUI application (not publicly released) with PB to dispatch
various commands of different priorities to a centralized server.

4. In the asynCluster sub-package of Twisted-Goodies itself to dispatch
jobs from a server to available cluster nodes. See
http://foss.eepatents.com/Twisted-Goodies/browser/trunk/twisted_goodies/asyncluster/master/jobs.py

Naturally, I would be very interested in hearing about any other
applications that are out there or being worked on. :-)

Best regards, Ed



From terry at jon.es  Mon Apr  9 19:38:51 2007
From: terry at jon.es (Terry Jones)
Date: Tue, 10 Apr 2007 03:38:51 +0200
Subject: [Twisted-Python] Trial docs?
Message-ID: <17946.60075.835931.964805@terry-jones-computer.local>

Within the last month, someone mentioned to me that Trial was one of the
better-documented components of Twisted.

I just decided to write a couple of quick unit tests for talking to a
Twisted web2 server. No problem, I thought, I'll just dig up that Trial
documentation...

  - Go to http://twistedmatrix.com/trac/ and click on Twisted Projects.
    Click on Twisted Trial.  There's nothing there, just a link to thoughts
    on future dev and a link into the tracker.

  - I notice a DOCS link at the top right. Non-obvious, but that must be
    it. But no, this takes me to the top of the Twisted documentation and I
    see no link for Trial.

  - But there's a FAQ, so I go there. There's one mention of trial, but
    it's not to do with documentation.

  - Google "twisted trial documentation". There are some one year old links
    to a page talking about how to improve the Trial documentation via
    chatting in IRC. I scan the first page of hits - none of them lead me
    back into the twisted site.

  - Back on the Twisted site I look for a search box, and there is one.
    Yay. Enter 'trial' and I get back 76+ pages of hits, the first of which
    is virtually all trac issue links, plus some mention of monkey
    patching, which doesn't sound relevant.

  - Well, I have the Twisted tree checked out, so I'll look there. Nothing.

  - Maybe there's some documentation in the tarball? Back to the Twisted
    home page, download, untar, find, nroff -man, etc. There's something,
    but just invocation options.

  - I run trial at the command line. More invocation options.


I guess we'll all agree that this could be improved.

I don't mind reading code. I wish someone would just tell me up front that
that's what I should do. Or is it? I really don't know in this case. I just
know that if there is any documentation for Trial it's pretty well hidden.

Just doing the above and now sending this mail (with the aim of improving
things for others) has taken me probably 45 minutes, on top of which my
fingers now ache. I wish I could have used all these keystrokes to do other
stuff.

I think the Trial page at http://twistedmatrix.com/trac/wiki/TwistedTrial
should be changed to say something like this:

  Documentation:

  Trial is currently undocumented.

  However, you can find some information by

    - Studying the example usage of trial in X project found in the Y
      directory of the Twisted tarball (or wherever).
    - Reading the trial manpage in the Twisted tarball, which will show you
      trial command line invocation arguments.
    - Reading the source code, which you can find in the Twisted tarball at
      X, or which you can see in the tracker at Y.

  Please feel free to contribute, etc.

I'm happy to edit the wiki if one of you will fill in the X and Y's in the
above.

Terry



From jml at mumak.net  Mon Apr  9 20:45:42 2007
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 10 Apr 2007 12:45:42 +1000
Subject: [Twisted-Python] Trial docs?
In-Reply-To: <17946.60075.835931.964805@terry-jones-computer.local>
References: <17946.60075.835931.964805@terry-jones-computer.local>
Message-ID: <d06a5cd30704091945l555b8283iedf3972b19e4873c@mail.gmail.com>

On 4/10/07, Terry Jones <terry at jon.es> wrote:
> Within the last month, someone mentioned to me that Trial was one of the
> better-documented components of Twisted.
>
> I just decided to write a couple of quick unit tests for talking to a
> Twisted web2 server. No problem, I thought, I'll just dig up that Trial
> documentation...

Hey Terry,

I'm sorry that finding Trial documentation has been such a chore for
you. I'd definitely like to make it more accessible so that Trial
itself can be more pleasant to use.

Thanks for writing such a full email too. This sort of thing really
helps me question why things are as they are, which is a good first
step to improving the documentation.

>   - Go to http://twistedmatrix.com/trac/ and click on Twisted Projects.
>     Click on Twisted Trial.  There's nothing there, just a link to thoughts
>     on future dev and a link into the tracker.

This is an unfortunate situation. Part of the issue is that Trial is a
significantly-sized, relatively independent part of Twisted Core, so
it falls into something of an organisational nether-world.

That said, I doubt the project page for Twisted Core is significantly better.

>   - I notice a DOCS link at the top right. Non-obvious, but that must be
>     it. But no, this takes me to the top of the Twisted documentation and I
>     see no link for Trial.
>

You'll notice that the "DOCS" link appears on every page, outside of
the context. This links to Twisted's documentation.

It's interesting that you didn't consider looking into Twisted's
documentation to find out more about Trial. It seems we could do a
better job at communicating Twisted's structure here.

>   - But there's a FAQ, so I go there. There's one mention of trial, but
>     it's not to do with documentation.
>

Note to self: review FAQ.

>   - Google "twisted trial documentation". There are some one year old links
>     to a page talking about how to improve the Trial documentation via
>     chatting in IRC. I scan the first page of hits - none of them lead me
>     back into the twisted site.
>
>   - Back on the Twisted site I look for a search box, and there is one.
>     Yay. Enter 'trial' and I get back 76+ pages of hits, the first of which
>     is virtually all trac issue links, plus some mention of monkey
>     patching, which doesn't sound relevant.
>

OK, now that is Trac's fault. You'll notice that the Trac search page
lets you uncheck the "Ticket" and "Changeset" boxes so that you can
just search the wiki. It's not particularly intuitive.

It's also sub-optimal that we require Twisted users to master Trac's
idiosyncrasies.

>   - Well, I have the Twisted tree checked out, so I'll look there. Nothing.
>

groff -man -Tascii doc/core/man/trial.1  | less

I'm guessing the confusion here is that you weren't expecting the
Trial docs to be under 'core'?

>   - Maybe there's some documentation in the tarball? Back to the Twisted
>     home page, download, untar, find, nroff -man, etc. There's something,
>     but just invocation options.
>
>   - I run trial at the command line. More invocation options.
>

In your travels you missed on the part of Trial's documentation that
is actually much better than most of Twisted: the API docs.

http://twistedmatrix.com/documents/current/api/twisted.trial.html

>
> I guess we'll all agree that this could be improved.
>

Indeed!

> I don't mind reading code. I wish someone would just tell me up front that
> that's what I should do. Or is it? I really don't know in this case. I just
> know that if there is any documentation for Trial it's pretty well hidden.
>

Right. I think it's a good policy to explicitly recommend reading code
if there aren't any better docs.

> Just doing the above and now sending this mail (with the aim of improving
> things for others) has taken me probably 45 minutes, on top of which my
> fingers now ache. I wish I could have used all these keystrokes to do other
> stuff.
>

Rest assured, this email is definitely valuable. So, although you may
have been able to do better stuff, you are certainly making my job
easier.

Thomas is working on a better Trial document which should solve some
of these problems. The presentation on the website is a separate, and
possibly more pressing issue, which I'll file a bug for.

In the interim, if you have any problems using Trial, you can (almost)
always contact me on IRC.

cheers,
jml



From terry at jon.es  Mon Apr  9 21:13:29 2007
From: terry at jon.es (Terry Jones)
Date: Tue, 10 Apr 2007 05:13:29 +0200
Subject: [Twisted-Python] Trial docs?
In-Reply-To: Your message at 12:45:42 on Tuesday, 10 April 2007
References: <17946.60075.835931.964805@terry-jones-computer.local>
	<d06a5cd30704091945l555b8283iedf3972b19e4873c@mail.gmail.com>
Message-ID: <17947.217.807751.302396@terry-jones-computer.local>

Hi jml

| On 4/10/07, Terry Jones <terry at jon.es> wrote:
| Thanks for writing such a full email too. This sort of thing really
| helps me question why things are as they are, which is a good first
| step to improving the documentation.

Great. I also always find it useful to have outsiders and first-timers make
comments. It's probably impossible to look with fresh eyes at things you've
spent a ton of time working on. I know I can't do it - partly through lack
of time, energy, inclination :-)

| >   - Go to http://twistedmatrix.com/trac/ and click on Twisted Projects.
| >     Click on Twisted Trial.  There's nothing there, just a link to
| >     thoughts on future dev and a link into the tracker.
| 
| This is an unfortunate situation. Part of the issue is that Trial is a
| significantly-sized, relatively independent part of Twisted Core, so
| it falls into something of an organisational nether-world.

OK, but that wiki page is your chance to say so, or say something.

| It's interesting that you didn't consider looking into Twisted's
| documentation to find out more about Trial.

>From the home page I go to http://twistedmatrix.com/trac/wiki/Documentation
and I don't see a link for Trial. Part of what's misleading here is that
there are explicit links for various projects, and Trial is listed as a
project on the page I just came from. So, a specific recommendation: add
Trial to the list of projects, and say "Trial is documented in the core
documentation" with a link.

Following your suggestion, I now click on Core Documentation. On the page I
land on, I immediately search for Trial, but there is no hit. Specific rec:
add the word Trial somewhere on this page so users and Google etc. can see
it.

But I do see a link called "Tips for writing tests for Twisted code". Is
that or is that not Trial documentation I wonder? The destination page is
howto/testing.html and at the top it does look like I've arrived at the
right place. Is that what you meant? But after a few sentences it does
degenerate into tips that are too advanced. Shouldn't someone tell me for
example what Twisted class I should subclass in making a test suite, before
telling me to leave the reactor (what reactor? thinks the newbie) as I
found it?

| >   - Back on the Twisted site I look for a search box, and there is one.
| >     Yay. Enter 'trial' and I get back 76+ pages of hits, the first of
| >     which is virtually all trac issue links, plus some mention of monkey
| >     patching, which doesn't sound relevant.
| 
| OK, now that is Trac's fault. You'll notice that the Trac search page
| lets you uncheck the "Ticket" and "Changeset" boxes so that you can
| just search the wiki. It's not particularly intuitive.

Can the default be changed to just search the wiki? Perhaps just on
searches from the main page? That looks like it would just be a matter of
dropping changeset=on and ticket=on from the URL.  I know, that's probably
a trac thing, but it might help.

| groff -man -Tascii doc/core/man/trial.1  | less

Thanks. I'm old :-)  And on my machine:

    $ file /usr/bin/nroff
    /usr/bin/nroff: Bourne shell script text executable
    $ grep Emulate /usr/bin/nroff
    # Emulate nroff with groff.

| I'm guessing the confusion here is that you weren't expecting the
| Trial docs to be under 'core'?

Yes, that's part of it (see above about seeing Trial listed as a project
but then not seeing it under the projects on the main doc page).

| http://twistedmatrix.com/documents/current/api/twisted.trial.html

So I did!  That's great, thanks. It's exactly the kind of doc I'd like to
be reading - nicely fomatted and giving confidence that it's clearly
machine generated (and therefore stands a chance of being up to date).

A link to that page would have really helped.

| Right. I think it's a good policy to explicitly recommend reading code
| if there aren't any better docs.

Me too. And the doc strings in the code are (relatively) pretty good.

| Rest assured, this email is definitely valuable. So, although you may
| have been able to do better stuff, you are certainly making my job
| easier.

And vice versa (much more of the vice versa, of course). So thanks back.

| Thomas is working on a better Trial document which should solve some
| of these problems. The presentation on the website is a separate, and
| possibly more pressing issue, which I'll file a bug for.

I'll make some interim cosmetic changes to the wiki if you like. (Where
interim has its usual meaning: will only be there for a couple of years...)

| In the interim, if you have any problems using Trial, you can (almost)
| always contact me on IRC.

OK, thanks.

Terry



From glyph at divmod.com  Mon Apr  9 22:54:43 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 10 Apr 2007 04:54:43 -0000
Subject: [Twisted-Python] Trial docs?
In-Reply-To: <17946.60075.835931.964805@terry-jones-computer.local>
References: <17946.60075.835931.964805@terry-jones-computer.local>
Message-ID: <20070410045443.7769.2069500529.divmod.xquotient.2685@joule.divmod.com>

On 01:38 am, terry at jon.es wrote:
>Within the last month, someone mentioned to me that Trial was one of 
>the
>better-documented components of Twisted.

Terry, if I was the one who committed this terrible crime against you, I 
apologize.  I hope that, if that was the case, it was simply a 
miscommunication and I had actually said something like "trial (ought to 
be) one of the better-documented components of Twisted".

The best documentation I know of for trial right now (and the only thing 
I routinely consult) is "trial --help".
>I guess we'll all agree that this could be improved.

Indeed.
>Just doing the above and now sending this mail (with the aim of 
>improving
>things for others) has taken me probably 45 minutes, on top of which my
>fingers now ache. I wish I could have used all these keystrokes to do 
>other
>stuff.

As the esteemed Mr. Lange already said, this email *was* very valuable. 
Thank you.
>I'm happy to edit the wiki if one of you will fill in the X and Y's in 
>the
>above.

What's your login name for trac?  I think someone will need to give you 
edit permission, if they haven't already.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070410/a615e01b/attachment.html>

From terry at jon.es  Tue Apr 10 04:10:39 2007
From: terry at jon.es (Terry Jones)
Date: Tue, 10 Apr 2007 12:10:39 +0200
Subject: [Twisted-Python] Trial docs?
In-Reply-To: Your message at 04:54:43 on Tuesday, 10 April 2007
References: <17946.60075.835931.964805@terry-jones-computer.local>
	<20070410045443.7769.2069500529.divmod.xquotient.2685@joule.divmod.com>
Message-ID: <17947.25247.895953.850645@terry-jones-computer.local>

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:
glyph> On 01:38 am, terry at jon.es wrote:
>> Within the last month, someone mentioned to me that Trial was one of the
>> better-documented components of Twisted.

glyph> Terry, if I was the one who committed this terrible crime against
glyph> you, I apologize.

Nope, not you. Also I don't think the person was necessarily wrong, they
just didn't also tell me _where_ it was documented.

glyph> The best documentation I know of for trial right now (and the only
glyph> thing I routinely consult) is "trial --help".

That's good for invocation. But it doesn't tell you how to write tests :-)

glyph> What's your login name for trac?  I think someone will need to give
glyph> you edit permission, if they haven't already.

It's terrycojones. I already have edit perms though, thanks.

Terry




From andrewfr_ice at yahoo.com  Tue Apr 10 05:15:35 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Tue, 10 Apr 2007 04:15:35 -0700 (PDT)
Subject: [Twisted-Python] Question about Writing a Stackless Friendly Reactor
Message-ID: <20070410111535.40282.qmail@web34211.mail.mud.yahoo.com>

Hello :

I have been using Twisted with Stackless. I am
interested in writing a more Stackless "friendly"
reactor. I believe a stackless friendly reactor would
call stackless.schedule() whenever possible.

I notice there are different types of reactor. I have
been looking at SelectReactor and its base case,
Posixbase. It seems easy enough to modify MainLoop to
put in a stackless.schedule(). However this approach
does not seem to be the most maintainable or
effective, since I would be overriding MainLoop only
to put in one line. What is the proper Twisted
approach to doing this?

Cheers,
Andrew


       
____________________________________________________________________________________
Get your own web address.  
Have a HUGE year through Yahoo! Small Business.
http://smallbusiness.yahoo.com/domains/?p=BESTDEAL



From matt at zgroupplc.com  Tue Apr 10 06:02:06 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Tue, 10 Apr 2007 13:02:06 +0100
Subject: [Twisted-Python] Memcached
Message-ID: <F07E7130-906E-44F8-BFE8-4ED892E81B28@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi All,

I was wondering whether anyone has written a twisted protocol class /  
module for memcached? I am currently developing an application that  
makes use of memcached. I really don't like the fact that the  
memcache operations are blocking within my nice deferred environment.  
In lieu of a deferred memcache operation, would it be wise to place  
this functionality in a twisted thread?

Would anyone be interested in a twisted module for memcached or would  
the additional overhead render it useless (too slow)?

Regards,


Matt


m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGG3zByI6MkdKPngkRAvRjAKCyC/96jtFHLTu+ouw+KK9wE4OIeQCeIDsJ
wH1IgSPsRSFrX1/HXKmnWPE=
=akr3
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Tue Apr 10 06:20:11 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 10 Apr 2007 08:20:11 -0400
Subject: [Twisted-Python] Question about Writing a Stackless Friendly
	Reactor
In-Reply-To: <20070410111535.40282.qmail@web34211.mail.mud.yahoo.com>
Message-ID: <20070410122011.18920.1593477302.divmod.quotient.10034@ohm>

On Tue, 10 Apr 2007 04:15:35 -0700 (PDT), Andrew Francis <andrewfr_ice at yahoo.com> wrote:
>Hello :
>
>I have been using Twisted with Stackless. I am
>interested in writing a more Stackless "friendly"
>reactor. I believe a stackless friendly reactor would
>call stackless.schedule() whenever possible.
>
>I notice there are different types of reactor. I have
>been looking at SelectReactor and its base case,
>Posixbase. It seems easy enough to modify MainLoop to
>put in a stackless.schedule(). However this approach
>does not seem to be the most maintainable or
>effective, since I would be overriding MainLoop only
>to put in one line. What is the proper Twisted
>approach to doing this?

Please see the archives for previous discussions on this topic.

Thanks,

Jean-Paul



From exarkun at divmod.com  Tue Apr 10 06:21:29 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 10 Apr 2007 08:21:29 -0400
Subject: [Twisted-Python] Memcached
In-Reply-To: <F07E7130-906E-44F8-BFE8-4ED892E81B28@zgroupplc.com>
Message-ID: <20070410122129.18920.219140231.divmod.quotient.10035@ohm>

On Tue, 10 Apr 2007 13:02:06 +0100, Matthew Glubb <matt at zgroupplc.com> wrote:
>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>Hi All,
>
>I was wondering whether anyone has written a twisted protocol class / 
>module for memcached? I am currently developing an application that  makes 
>use of memcached. I really don't like the fact that the  memcache operations 
>are blocking within my nice deferred environment.  In lieu of a deferred 
>memcache operation, would it be wise to place  this functionality in a 
>twisted thread?
>
>Would anyone be interested in a twisted module for memcached or would  the 
>additional overhead render it useless (too slow)?
>

Some work has been done on this recently:

  http://twistedmatrix.com/trac/ticket/2506

Jean-Paul



From matt at zgroupplc.com  Tue Apr 10 06:44:55 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Tue, 10 Apr 2007 13:44:55 +0100
Subject: [Twisted-Python] Memcached
In-Reply-To: <20070410122129.18920.219140231.divmod.quotient.10035@ohm>
References: <20070410122129.18920.219140231.divmod.quotient.10035@ohm>
Message-ID: <3D0A211D-E2E1-48A6-AE6B-7511F81CFA4F@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Ah! Thanks Jean-Paul. I should RTFM ;)

On 10 Apr 2007, at 13:21, Jean-Paul Calderone wrote:

> On Tue, 10 Apr 2007 13:02:06 +0100, Matthew Glubb  
> <matt at zgroupplc.com> wrote:
>> -----BEGIN PGP SIGNED MESSAGE-----
>> Hash: SHA1
>>
>> Hi All,
>>
>> I was wondering whether anyone has written a twisted protocol  
>> class / module for memcached? I am currently developing an  
>> application that  makes use of memcached. I really don't like the  
>> fact that the  memcache operations are blocking within my nice  
>> deferred environment.  In lieu of a deferred memcache operation,  
>> would it be wise to place  this functionality in a twisted thread?
>>
>> Would anyone be interested in a twisted module for memcached or  
>> would  the additional overhead render it useless (too slow)?
>>
>
> Some work has been done on this recently:
>
>  http://twistedmatrix.com/trac/ticket/2506
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGG4bHyI6MkdKPngkRApE0AKCBWEEa+LepG5hQ1QYC9Pjm1/cXzwCfTTxJ
ymtlEJjYXbsM7brMY8IapLo=
=aFj2
-----END PGP SIGNATURE-----



From twisted-python at 2xlp.com  Tue Apr 10 17:46:14 2007
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Tue, 10 Apr 2007 19:46:14 -0400
Subject: [Twisted-Python] Memcached
In-Reply-To: <F07E7130-906E-44F8-BFE8-4ED892E81B28@zgroupplc.com>
References: <F07E7130-906E-44F8-BFE8-4ED892E81B28@zgroupplc.com>
Message-ID: <96591DE0-7B46-413D-95A3-EB63A87A17F6@2xlp.com>


On Apr 10, 2007, at 8:02 AM, Matthew Glubb wrote:
> Hi All,
>
> I was wondering whether anyone has written a twisted protocol  
> class / module for memcached? I am currently developing an  
> application that makes use of memcached. I really don't like the  
> fact that the memcache operations are blocking within my nice  
> deferred environment. In lieu of a deferred memcache operation,  
> would it be wise to place this functionality in a twisted thread?

what kind of blocking issues have you been experiencing?
memcached has never given me significant/visible issues .


// Jonathan Vanasco

| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - -
| FindMeOn.com - The cure for Multiple Web Personality Disorder
| Web Identity Management and 3D Social Networking
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - -
| RoadSound.com - Tools For Bands, Stuff For Fans
| Collaborative Online Management And Syndication Tools
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - -





From glyph at divmod.com  Tue Apr 10 22:12:01 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 11 Apr 2007 04:12:01 -0000
Subject: [Twisted-Python] Question about Writing a Stackless Friendly
	Reactor
In-Reply-To: <20070410111535.40282.qmail@web34211.mail.mud.yahoo.com>
References: <20070410111535.40282.qmail@web34211.mail.mud.yahoo.com>
Message-ID: <20070411041201.7769.1256405426.divmod.xquotient.2697@joule.divmod.com>

On 10 Apr, 11:15 am, andrewfr_ice at yahoo.com wrote:
>I have been using Twisted with Stackless. I am
>interested in writing a more Stackless "friendly"
>reactor. I believe a stackless friendly reactor would
>call stackless.schedule() whenever possible.

I disagree.  Separate reactor implementations are for different OS 
multiplexing mechanisms.  stackless.schedule() should *not* be called 
"whenever possible", but rather, whenever stackless tasks have something 
to do.
>I notice there are different types of reactor. I have
>been looking at SelectReactor and its base case,
>Posixbase. It seems easy enough to modify MainLoop to
>put in a stackless.schedule(). However this approach
>does not seem to be the most maintainable or
>effective, since I would be overriding MainLoop only
>to put in one line. What is the proper Twisted
>approach to doing this?

Don't implement a reactor :).

I recently replied to a very similar question in a different thread:

    http://article.gmane.org/gmane.comp.python.twisted/13946

What about my answer there was not clear?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070411/fcaa5181/attachment.html>

From matusis at matusis.com  Wed Apr 11 01:51:49 2007
From: matusis at matusis.com (Alec Matusis)
Date: Wed, 11 Apr 2007 00:51:49 -0700
Subject: [Twisted-Python] epoll reactor problems
Message-ID: <022301c77c0e$436446a0$ca2cd3e0$@com>

We just switched 2 types of production servers to epoll reactor( Twisted
2.5) from poll reactor (Twisted 2.2).

The CPU%% utilization of the first type of server that does not do much
except occasionally pushing messages to about 5000 clients dropped from
about 40% to 8%, which is very good.

 

The second type of server is more complicated. The CPU utilization of that
server (as measured by top) went down from 40% to about 15% after switching
to epoll.

Here is the problem: after about 10min of running that server with CPU%%
staying at about 15%, the CPU suddenly jumps to 99.9% for that process and
just stays there. We reproduced this several times. The server remains
responsive, even when top shows 99.9% CPU. (Which is very different from
99.9% CPU from real load when we used poll- we are intimately familiar with
the performance in that regime unfortunately.)

The kernel is 2.6.11.4-21.12-smp

 

Can anybody help with this 99.9% CPU epoll problem?

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070411/98bd1b0c/attachment.html>

From matt at zgroupplc.com  Wed Apr 11 01:53:39 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Wed, 11 Apr 2007 08:53:39 +0100
Subject: [Twisted-Python] Memcached
In-Reply-To: <96591DE0-7B46-413D-95A3-EB63A87A17F6@2xlp.com>
References: <F07E7130-906E-44F8-BFE8-4ED892E81B28@zgroupplc.com>
	<96591DE0-7B46-413D-95A3-EB63A87A17F6@2xlp.com>
Message-ID: <4DE543DC-CBE0-45B0-B9F4-69F7B8FE7C70@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Jonathan,

On 11 Apr 2007, at 00:46, Jonathan Vanasco wrote:

>> the memcache operations are blocking within my nice deferred  
>> environment. In lieu of a deferred memcache operation, would it be  
>> wise to place this functionality in a twisted thread?
>
> what kind of blocking issues have you been experiencing?
> memcached has never given me significant/visible issues .

Its not that I have experienced any blocking issues. Its a conceptual  
worry more than anything. I know that memcache is fast but, in  
essence, the standard memcached client library still presents a  
blocking operation within my nice deferred environment. Call me  
pedantic but I'd like to maintain conceptual rigour. If you are  
saying that for you it hasn't been a problem then I will happily take  
your word for it.

Thanks for your reply,

Matt



m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGHJQGyI6MkdKPngkRAjeXAJ9XjOdz5W2Y5ungZG1j7KnA7NnCswCgg2Xk
J+x/L1R2Uwv8/EK83K3tv6A=
=wOrG
-----END PGP SIGNATURE-----



From warner at lothar.com  Wed Apr 11 02:11:25 2007
From: warner at lothar.com (Brian Warner)
Date: Wed, 11 Apr 2007 01:11:25 -0700
Subject: [Twisted-Python] Foolscap-0.1.1 released
In-Reply-To: <94B5BFD3-F733-4DF1-B1E9-648C44D655A0@gravina.com> (Robert
	Gravina's message of "Wed, 4 Apr 2007 16:40:52 +0900")
References: <20070403.213612.74734554.warner@lothar.com>
	<94B5BFD3-F733-4DF1-B1E9-648C44D655A0@gravina.com>
Message-ID: <876483baaa.fsf@lothar.com>

Robert Gravina <robert at gravina.com> writes:

> Wow, I had a read through the docs you made based on oldpb (http://
> twistedmatrix.com/~warner/Foolscap/copyable.html and http://
> twistedmatrix.com/~warner/Foolscap/using-pb.html) and think I finally
> understand what Foolscap is about :)

Thanks!

> - I like how you've simplified Referenceable/Copyable/Cacheable to just the
> one type - Referenceable - while making the whole thing more  powerful in the
> process.

Well, to be honest, this is more a result of not having gotten around to
implementing Cacheable (or really finishing work on Copyable) than an
explicit design decision. But yes, the fundamental operation is the
Slicer/Unslicer pair, and Referenceables are just the pass-by-reference form
of this (and Copyables are just the pass-by-copy form). I suspect that
Cacheable is best implemented with something fairly application-specific, and
so I'm inclined to gather some use cases before providing explicit support
within Foolscap (and possibly corralling people into a non-ideal solution).

> - Being able to pass RemoteReferences to a third party - very cool!

This is a big new feature, and makes things much more transparent. The actual
implementation is going to change at some point (to provide some better
ordering guarantees, and reduce the amount of traffic on the wire), but the
user-visible API will remain the same: just pass your object through a
callRemote() somehow.

> - Serialisers are a great idea! I often want to send classes down the wire
> without having to subclass them. Also, many python types can be  serialised
> now (e.g. datetime - I don't think these work with PB, so  I have to convert
> them to strings and back again... I do this with  Decimals too.... yuck!)

Yeah, the ability to register an ISlicer adapter is what makes this powerful.
You can register an adapter for some arbitrary 3rd-party class and it will
get used to serialize the instances, no matter how buried they might be
inside the object graph. I'm still looking for common patterns and useful
refactorings here, though. If you have examples of ways that this is helpful,
please feel free to post them. For example, I'm not sure if the helper
classes for Copyable are actually all that helpful, because I haven't yet hit
a personal need to do pass-by-copy with anything larger than a dict.

> -  You can write a  Slicer/Unslicer pair to get an object that is copied by
> value the first time it sent and then copied by reference  all later times. I
> *really* would like to be able to do that.

The ISlicer interface should be powerful enough to do that, although I should
mention that the definition of "first time" is a bit hazy. Look at
foolscap.referenceable.ReferenceableSlicer.sliceBody() for an example of how
it detects "first time" versus later times. There is a network optimization
that we could make if we didn't need to make this distinction (it would mean
the 'decref' message wouldn't need a response), but since I want to send
RemoteInterface names on that first time and not thereafter, I'm inclined to
retain the distinction.

The biggest thing I want to figure out how to add is an object that's
serialized somewhere in-between Referenceable and Copyable. My use-case is a
little music-player client/server app I wrote: the server has a list of Song
objects which it can give to the client for display to (and selection by) the
user, and the client sends back the Song that it wants to add to the
playlist. Each Song has a set of strings describing the artist name, album
name, song title, etc. For the purpose of referencing which song to play, I
want Song to be Referenceable. For the purpose of carrying those strings
along with the Song (so the client can display a list of song titles), I want
it to be Copyable. Ideally, the first time the Song was sent over the wire,
it would be serialized as a connection-local ID (aka 'clid') plus a set of
immutable attributes. The client-side SongCopy should have attributes that
can be read, and when it gets sent back to the server in a playlist, it
should be serialized with just the clid.

I figure this might be a useful enough pattern to warrant a base class or
some kind of support code within Foolscap (maybe a CopyableAndReferenceable
class?), but I haven't yet figured out how it ought to be implemented.

> Other parts of Foolscap I've yet to understand, but I just wanted to say I
> like where PB is heading.

Thanks! There's a lot of code that I've implemented and started to use, but
have not yet started to document (like eventual-send, or much of the
schema/constraint mechanics). And there more that I've written but haven't
figured out how to use yet (like promises), and even more that's still in the
design stages (like remote promises, promise-pipelining, and automatic
keepalives). It's been very educational thus far, and promises (no pun
intended) to be even more interesting in the next couple months.

cheers,
 -Brian



From matusis at matusis.com  Wed Apr 11 02:15:08 2007
From: matusis at matusis.com (Alec Matusis)
Date: Wed, 11 Apr 2007 01:15:08 -0700
Subject: [Twisted-Python] Re: epoll reactor problems
Message-ID: <023801c77c11$853a7ec0$8faf7c40$@com>

PS. One more piece of data: we just switched that server back to poll, still
on Twisted 2.5. The CPU is at 30-45% stable, with exactly the same usage. So
this is either caused by the epoll() itself, or by the epoll reactor in
twisted.

From: Alec Matusis [mailto:matusis at matusis.com] 
Sent: Wednesday, April 11, 2007 12:52 AM
To: 'Twisted general discussion'
Subject: epoll reactor problems

We just switched 2 types of production servers to epoll reactor( Twisted
2.5) from poll reactor (Twisted 2.2).
The CPU%% utilization of the first type of server that does not do much
except occasionally pushing messages to about 5000 clients dropped from
about 40% to 8%, which is very good.

The second type of server is more complicated. The CPU utilization of that
server (as measured by top) went down from 40% to about 15% after switching
to epoll.
Here is the problem: after about 10min of running that server with CPU%%
staying at about 15%, the CPU suddenly jumps to 99.9% for that process and
just stays there. We reproduced this several times. The server remains
responsive, even when top shows 99.9% CPU. (Which is very different from
99.9% CPU from real load when we used poll- we are intimately familiar with
the performance in that regime unfortunately.)
The kernel is 2.6.11.4-21.12-smp

Can anybody help with this 99.9% CPU epoll problem?






From therve at free.fr  Wed Apr 11 02:24:58 2007
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Wed, 11 Apr 2007 10:24:58 +0200
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <022301c77c0e$436446a0$ca2cd3e0$@com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
Message-ID: <20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>

Quoting Alec Matusis <matusis at matusis.com>:

> We just switched 2 types of production servers to epoll reactor( Twisted
> 2.5) from poll reactor (Twisted 2.2).
>
> The CPU%% utilization of the first type of server that does not do much
> except occasionally pushing messages to about 5000 clients dropped from
> about 40% to 8%, which is very good.

That's great.

> The second type of server is more complicated. The CPU utilization of that
> server (as measured by top) went down from 40% to about 15% after switching
> to epoll.
>
> Here is the problem: after about 10min of running that server with CPU%%
> staying at about 15%, the CPU suddenly jumps to 99.9% for that process and
> just stays there. We reproduced this several times. The server remains
> responsive, even when top shows 99.9% CPU. (Which is very different from
> 99.9% CPU from real load when we used poll- we are intimately familiar with
> the performance in that regime unfortunately.)
>
> The kernel is 2.6.11.4-21.12-smp
>
> Can anybody help with this 99.9% CPU epoll problem?

We would probably need more information. What's your version of python? 
Can you
provide a reproductible example? Did you try to do a strace on your running
server to see what's going on?

As your load was already 99 before using epoll, can it be an application
problem?

-- 
Thomas





From matusis at matusis.com  Wed Apr 11 03:03:06 2007
From: matusis at matusis.com (Alec Matusis)
Date: Wed, 11 Apr 2007 02:03:06 -0700
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
Message-ID: <025001c77c18$3906e140$ab14a3c0$@com>

> We would probably need more information. What's your version of python?

We are using Python 2.4.1

> Can you
> provide a reproductible example? 

It's hard to provide a reproducible example: we observe this problem only on
the live servers. So I do not know how to simplify the code (it has 40000+
lines) such that the problem still remains, since we would have to try it on
real users...

Did you try to do a strace on your
> running
> server to see what's going on?

I did run strace- it made the server unresponsive, so it had to be
restarted. Here is the output from the problematic server at 99% CPU:
alecm at web10 ~> strace -p 5315
Process 5315 attached - interrupt to quit
--- SIGSTOP (Stopped (signal)) @ 0 (0) ---
--- SIGSTOP (Stopped (signal)) @ 0 (0) ---
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023, u64=12304606485815493631}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 30) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423, u64=12304606485815493031}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 29) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023, u64=12304606485815493631}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 28) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLIN, {u32=201, u64=12304606485815492809}}, {0, {u32=32,
u64=206158430240}}, {EPOLLWRNORM|EPOLLONESHOT|EPOLLET|0x3fffa820,
{u32=32767, u64=23749657318424575}}, {0, {u32=5315, u64=5315}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0, u64=0}},
{0, {u32=4294945068, u64=140737488333100}}}, 1434, 27) = 6
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
recvfrom(201, "getmore:20\r\n\0", 65536, 0, NULL, NULL) = 13
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0xb9d030, FUTEX_WAKE, 1)          = 0
futex(0x8a3350, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023, u64=12304606485815493631}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 26) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423, u64=12304606485815493031}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 25) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023, u64=12304606485815493631}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 24) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423, u64=12304606485815493031}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 23) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023, u64=12304606485815493631}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 22) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423, u64=12304606485815493031}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 22) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023, u64=12304606485815493631}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 21) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423, u64=12304606485815493031}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1434, 20) = 5
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0
futex(0x7ce7f0, FUTEX_WAKE, 1)          = 0

 Interestingly, strace on another type of server, that runs only at 9% CPU
does not crash it. Here is that strace for comparison: 

alecm at web10 ~> strace -p 4131
Process 4131 attached - interrupt to quit
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLIN, {u32=1740, u64=12304606485815494348}}}, 1728, 26) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
recvfrom(1740, "\r\n", 65536, 0, NULL, NULL) = 2
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1740, {EPOLLIN|EPOLLOUT, {u32=1740,
u64=12304606485815494348}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLOUT, {u32=1740, u64=12304606485815494348}}}, 1728, 1) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
sendto(1740, "\r\n\0", 3, 0, NULL, 0)   = 3
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1740, {EPOLLIN, {u32=1740,
u64=12304606485815494348}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {}, 1728, 0)              = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {}, 1728, 0)              = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {}, 1728, 0)              = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLIN, {u32=1734, u64=12304606485815494342}}}, 1728, 92) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
recvfrom(1734, "\r\n", 65536, 0, NULL, NULL) = 2
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1734, {EPOLLIN|EPOLLOUT, {u32=1734,
u64=12304606485815494342}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLOUT, {u32=1734, u64=12304606485815494342}}}, 1728, 69)
= 1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
sendto(1734, "\r\n\0", 3, 0, NULL, 0)   = 3
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1734, {EPOLLIN, {u32=1734,
u64=12304606485815494342}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLIN, {u32=1680, u64=12304606485815494288}}}, 1728, 68) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
recvfrom(1680, "\r\n", 65536, 0, NULL, NULL) = 2
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1680, {EPOLLIN|EPOLLOUT, {u32=1680,
u64=12304606485815494288}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLOUT, {u32=1680, u64=12304606485815494288}}}, 1728, 30)
= 1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
sendto(1680, "\r\n\0", 3, 0, NULL, 0)   = 3
epoll_ctl(4, EPOLL_CTL_MOD, 1680, {EPOLLIN, {u32=1680,
u64=12304606485815494288}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLIN, {u32=1748, u64=12304606485815494356}}}, 1728, 29) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
recvfrom(1748, "\r\n", 65536, 0, NULL, NULL) = 2
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1748, {EPOLLIN|EPOLLOUT, {u32=1748,
u64=12304606485815494356}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLOUT, {u32=1748, u64=12304606485815494356}}}, 1728, 25)
= 1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
sendto(1748, "\r\n\0", 3, 0, NULL, 0)   = 3
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1748, {EPOLLIN, {u32=1748,
u64=12304606485815494356}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLIN, {u32=1573, u64=12304606485815494181}}}, 1728, 24) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
recvfrom(1573, "\r\n", 65536, 0, NULL, NULL) = 2
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1573, {EPOLLIN|EPOLLOUT, {u32=1573,
u64=12304606485815494181}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLOUT, {u32=1573, u64=12304606485815494181}}}, 1728, 8) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
sendto(1573, "\r\n\0", 3, 0, NULL, 0)   = 3
epoll_ctl(4, EPOLL_CTL_MOD, 1573, {EPOLLIN, {u32=1573,
u64=12304606485815494181}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLIN, {u32=1681, u64=12304606485815494289}}}, 1728, 7) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
recvfrom(1681, "\r\n", 65536, 0, NULL, NULL) = 2
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_ctl(4, EPOLL_CTL_MOD, 1681, {EPOLLIN|EPOLLOUT, {u32=1681,
u64=12304606485815494289}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {{EPOLLOUT, {u32=1681, u64=12304606485815494289}}}, 1728, 2) =
1
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
sendto(1681, "\r\n\0", 3, 0, NULL, 0)   = 3
epoll_ctl(4, EPOLL_CTL_MOD, 1681, {EPOLLIN, {u32=1681,
u64=12304606485815494289}}) = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
epoll_wait(4, {}, 1728, 1)              = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0
futex(0x859a10, FUTEX_WAKE, 1)          = 0

> As your load was already 99 before using epoll, can it be an
> application
> problem?

Our load with poll reaches 99% only during the daytime. We did all this at
night, when the load is only 30-40% with poll. Indeed, after we reverted
back to poll, the load went back to 35% and will remain there until the
morning.

It looked to me like a runaway process: as soon as the load went over ~25%
on the problematic server, it continued to rise till it reached 99.9% within
less than 1 min.


> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Thomas Hervé
> Sent: Wednesday, April 11, 2007 1:25 AM
> To: twisted-python at twistedmatrix.com
> Subject: Re: [Twisted-Python] epoll reactor problems
> 
> Quoting Alec Matusis <matusis at matusis.com>:
> 
> > We just switched 2 types of production servers to epoll reactor(
> Twisted
> > 2.5) from poll reactor (Twisted 2.2).
> >
> > The CPU%% utilization of the first type of server that does not do
> much
> > except occasionally pushing messages to about 5000 clients dropped
> from
> > about 40% to 8%, which is very good.
> 
> That's great.
> 
> > The second type of server is more complicated. The CPU utilization of
> that
> > server (as measured by top) went down from 40% to about 15% after
> switching
> > to epoll.
> >
> > Here is the problem: after about 10min of running that server with
> CPU%%
> > staying at about 15%, the CPU suddenly jumps to 99.9% for that
> process and
> > just stays there. We reproduced this several times. The server
> remains
> > responsive, even when top shows 99.9% CPU. (Which is very different
> from
> > 99.9% CPU from real load when we used poll- we are intimately
> familiar with
> > the performance in that regime unfortunately.)
> >
> > The kernel is 2.6.11.4-21.12-smp
> >
> > Can anybody help with this 99.9% CPU epoll problem?
> 
> We would probably need more information. What's your version of python?
> Can you
> provide a reproductible example? Did you try to do a strace on your
> running
> server to see what's going on?
> 
> As your load was already 99 before using epoll, can it be an
> application
> problem?
> 
> --
> Thomas
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From therve at free.fr  Wed Apr 11 03:42:59 2007
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Wed, 11 Apr 2007 11:42:59 +0200
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <025001c77c18$3906e140$ab14a3c0$@com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
	<025001c77c18$3906e140$ab14a3c0$@com>
Message-ID: <20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>

Quoting Alec Matusis <matusis at matusis.com>:

>> We would probably need more information. What's your version of python?
>
> We are using Python 2.4.1

That's old (debian stable ? :)). I don't say that'll solve your 
problem, but you
could try with 2.4.4 (warning, not 2.4.3).

>> Can you
>> provide a reproductible example?
>
> It's hard to provide a reproducible example: we observe this problem only on
> the live servers. So I do not know how to simplify the code (it has 40000+
> lines) such that the problem still remains, since we would have to try it on
> real users...

OK...

> Did you try to do a strace on your
>> running
>> server to see what's going on?
>
> I did run strace- it made the server unresponsive, so it had to be
> restarted. Here is the output from the problematic server at 99% CPU:

> epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023, u64=12304606485815493631}},
> {EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
> POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
> {EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
> u64=22827751178240}}, {0, {u32=0, u64=0}},
> {EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
> u64=18097643565645823}}}, 1434, 30) = 5

This part is highly suspect. The flags on the fd should not reach these 
values.

What's the global state of the process? Memory, number of opened fd ?

-- 
Thomas





From ross at burtonini.com  Wed Apr 11 03:42:47 2007
From: ross at burtonini.com (Ross Burton)
Date: Wed, 11 Apr 2007 10:42:47 +0100
Subject: [Twisted-Python] Wrapping functions that return deferreds
Message-ID: <1176284567.6121.8.camel@blackadder>

Hi,

I have a library that has a call() method, which returns a Deferred.  My
application used to just use .addCallback() but obviously that doesn't
have any error handling.  I then switched to .addCallbacks() so that I
could call a common error handler (to pop up a dialog) but that got
tedious to add to every invocation so I thought I'd be cunning and wrap
the call() method.

def wrap_deferred (func):
    def wrapped(*args, **kwargs):
        d = func (*args, **kwargs)
        d.addErrback (handle_twisted_error)
        return d
    return wrapped

# flickr is the object, call is the method I'm overriding
flickr.call = wrap_deferred (flickr.call)

# Then later in my app
flickr.call(foo).addCallback(handleFoo)

However, this doesn't work: I get the standard unhandled error in
deferred handling.  Can anyone spot the mistake I'm making?

Thanks,
Ross
-- 
Ross Burton                                 mail: ross at burtonini.com
                                          jabber: ross at burtonini.com
                                     www: http://www.burtonini.com./
 PGP Fingerprint: 1A21 F5B0 D8D0 CFE3 81D4 E25A 2D09 E447 D0B4 33DF






From antoine.pitrou at wengo.com  Wed Apr 11 04:05:37 2007
From: antoine.pitrou at wengo.com (Antoine Pitrou)
Date: Wed, 11 Apr 2007 12:05:37 +0200
Subject: [Twisted-Python] Wrapping functions that return deferreds
In-Reply-To: <1176284567.6121.8.camel@blackadder>
References: <1176284567.6121.8.camel@blackadder>
Message-ID: <1176285937.6818.9.camel@antoine-ubuntu>


Le mercredi 11 avril 2007 à 10:42 +0100, Ross Burton a écrit :
> def wrap_deferred (func):
>     def wrapped(*args, **kwargs):
>         d = func (*args, **kwargs)
>         d.addErrback (handle_twisted_error)
>         return d
>     return wrapped
> 
> # flickr is the object, call is the method I'm overriding
> flickr.call = wrap_deferred (flickr.call)
> 
> # Then later in my app
> flickr.call(foo).addCallback(handleFoo)

Since you add the errback before adding the callback, errors happening
in handleFoo will not get caught by the errback.






From matusis at matusis.com  Wed Apr 11 04:15:52 2007
From: matusis at matusis.com (Alec Matusis)
Date: Wed, 11 Apr 2007 03:15:52 -0700
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>	<025001c77c18$3906e140$ab14a3c0$@com>
	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
Message-ID: <026a01c77c22$63141020$293c3060$@com>

> That's old (debian stable ? :)). I don't say that'll solve your
> problem, but you
> could try with 2.4.4 (warning, not 2.4.3).

It's SuSE stable ;-) Our stuff on that machine is pretty convoluted now, so
we will probably have a chance to test with 2.4.4 only in a week, when we
add a brand new server with 2.4.4.

> {EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRB
> AND|E
> > POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
> > {EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
> > u64=22827751178240}}, {0, {u32=0, u64=0}},
> > {EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820,
> {u32=32767,
> > u64=18097643565645823}}}, 1434, 30) = 5
> 
> This part is highly suspect. The flags on the fd should not reach these
> values.

I noticed a difference between this from the 99.9% CPU server:

epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423, u64=12304606485815493031}},
{EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
{EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
u64=22827751178240}}, {0, {u32=0, u64=0}},
{EPOLLOUT|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
u64=18097643565645823}}}, 1432, 68) = 5

and this from a normal server running at 5% CPU:

epoll_wait(4, {{EPOLLIN, {u32=1769, u64=12304606485815494377}}, {0,
{u32=4294944684, u64=140737488332716}}}, 1728, 17) = 2

What does this mean?

> What's the global state of the process? Memory, number of opened fd ?

We immediately reverted to poll, so I do not have it in front of me. The RSS
size was 45MB, and the number of open fd I do not know: it should have been
about 1500, but I did not check.

I can do another test run with epoll in about 20hrs, since I do not want to
upset users too much. If you have some specific data I should get from the
test run, please let me know now.

Thanks
Alec
 


> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Thomas Hervé
> Sent: Wednesday, April 11, 2007 2:43 AM
> To: 'Twisted general discussion'
> Subject: RE: [Twisted-Python] epoll reactor problems
> 
> Quoting Alec Matusis <matusis at matusis.com>:
> 
> >> We would probably need more information. What's your version of
> python?
> >
> > We are using Python 2.4.1
> 
> That's old (debian stable ? :)). I don't say that'll solve your
> problem, but you
> could try with 2.4.4 (warning, not 2.4.3).
> 
> >> Can you
> >> provide a reproductible example?
> >
> > It's hard to provide a reproducible example: we observe this problem
> only on
> > the live servers. So I do not know how to simplify the code (it has
> 40000+
> > lines) such that the problem still remains, since we would have to
> try it on
> > real users...
> 
> OK...
> 
> > Did you try to do a strace on your
> >> running
> >> server to see what's going on?
> >
> > I did run strace- it made the server unresponsive, so it had to be
> > restarted. Here is the output from the problematic server at 99% CPU:
> 
> > epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=1023,
> u64=12304606485815493631}},
> >
> {EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRB
> AND|E
> > POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
> > {EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
> > u64=22827751178240}}, {0, {u32=0, u64=0}},
> > {EPOLLOUT|EPOLLWRNORM|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820,
> {u32=32767,
> > u64=18097643565645823}}}, 1434, 30) = 5
> 
> This part is highly suspect. The flags on the fd should not reach these
> values.
> 
> What's the global state of the process? Memory, number of opened fd ?
> 
> --
> Thomas
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From therve at free.fr  Wed Apr 11 05:47:11 2007
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Wed, 11 Apr 2007 13:47:11 +0200
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <026a01c77c22$63141020$293c3060$@com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
	<025001c77c18$3906e140$ab14a3c0$@com>
	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
	<026a01c77c22$63141020$293c3060$@com>
Message-ID: <20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>

Quoting Alec Matusis <matusis at matusis.com>:

>> That's old (debian stable ? :)). I don't say that'll solve your
>> problem, but you
>> could try with 2.4.4 (warning, not 2.4.3).
>
> It's SuSE stable ;-) Our stuff on that machine is pretty convoluted now, so
> we will probably have a chance to test with 2.4.4 only in a week, when we
> add a brand new server with 2.4.4.

OK. That is just another thing to try, I don't see obvious reasons why 
it could
work better on 2.4.4, but...

> I noticed a difference between this from the 99.9% CPU server:
>
> epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423, u64=12304606485815493031}},
> {EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRBAND|E
> POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
> {EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
> u64=22827751178240}}, {0, {u32=0, u64=0}},
> {EPOLLOUT|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
> u64=18097643565645823}}}, 1432, 68) = 5
>
> and this from a normal server running at 5% CPU:
>
> epoll_wait(4, {{EPOLLIN, {u32=1769, u64=12304606485815494377}}, {0,
> {u32=4294944684, u64=140737488332716}}}, 1728, 17) = 2
>
> What does this mean?

The flags set on your sockets are generally EPOLLIN or EPOLLOUT: data 
to read or
available for write. I don't know much about the other flags. EPOLLERR 
is set if
the fd has been closed for example. EPOLLET is *highly* suspect, because it
should only be there if set in the user code. The documentation of other flags
is really terse...


>> What's the global state of the process? Memory, number of opened fd ?
>
> We immediately reverted to poll, so I do not have it in front of me. The RSS
> size was 45MB, and the number of open fd I do not know: it should have been
> about 1500, but I did not check.

Hum... it may come from running out of file descriptors, so you'd better check
your settings for this.

> I can do another test run with epoll in about 20hrs, since I do not want to
> upset users too much.

Of course :).

> If you have some specific data I should get from the
> test run, please let me know now.

Every information would be useful. The most useful information would be 
to know
when it begins to act strangely, and if there is something that happend 
at this
moment. Otherwise, number of fds, memory, netstat output, strace output...

-- 
Thomas





From andrewfr_ice at yahoo.com  Wed Apr 11 06:56:57 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Wed, 11 Apr 2007 05:56:57 -0700 (PDT)
Subject: [Twisted-Python] Question about Writing a Stackless Friendly
	Reactor
In-Reply-To: <E1HbYko-0004OB-02@pyramid.twistedmatrix.com>
Message-ID: <909658.95506.qm@web34207.mail.mud.yahoo.com>

Hello Glyph:

>I disagree.  Separate reactor implementations are for
>different OS multiplexing mechanisms.
>stackless.schedule() should *not* be called 
>"whenever possible", but rather, whenever stackless
>tasks have something to do.

To the best of my understanding, if one is using
Stackless cooperative scheduling, a tasklet should
yield, that is, call schedule() when it is finished
doing work. Otherwise, other tasklets that could run,
will not get an opportunity.

In a Stackless application, the reactor is running in
a tasklet. Leaving aside the issue of channels, if the
reactor does not call schedule(), other tasklets will
not run. 

For most applications, the Twisted Reactor blocking
the application is not an issue since the tasklets
have nothing to do if they do not have input  In the
case of my application, the blocking is an issue...

That said, we can write simple programmes to
illustrate this (or fix my first example). For
instance, I illustrate the aforementioned on the
Stackless Google code page.

http://code.google.com/p/stacklessexamples/wiki/StacklessTwisted

In the first example, the tick tasklet will print only
after the request handler has received input. In the
second threaded example, the tick tasklet will start
printing immediately. 

I am looking for ways of getting the behaviour of the
second example without using threads (or Twisted tasks
that make schedule() calls)

>Don't implement a reactor :).

I think subclassing SelectorReactor may give me much
of what I want. I suspect this is an unTwisted way of
doing things. I am still experimenting with
approaches.

>I recently replied to a very similar question in a
>different thread:

>http://article.gmane.org/gmane.comp.python.twisted/13946

>What about my answer there was not clear?

I don't agree with a part of the premise. That aside,
I tried using reactor.callLater(). It didn't help.
Perhaps I am using it wrong. 

Cheers,
Andrew




       
____________________________________________________________________________________
Need Mail bonding?
Go to the Yahoo! Mail Q&A for great tips from Yahoo! Answers users.
http://answers.yahoo.com/dir/?link=list&sid=396546091



From terry at jon.es  Wed Apr 11 07:37:36 2007
From: terry at jon.es (Terry Jones)
Date: Wed, 11 Apr 2007 15:37:36 +0200
Subject: [Twisted-Python] Trial docs?
In-Reply-To: Your message at 04:54:43 on Tuesday, 10 April 2007
References: <17946.60075.835931.964805@terry-jones-computer.local>
	<20070410045443.7769.2069500529.divmod.xquotient.2685@joule.divmod.com>
Message-ID: <17948.58528.554987.793114@terry-jones-computer.local>

| What's your login name for trac?  I think someone will need to give you
| edit permission, if they haven't already.

Hi Glyph.

I just went to add a few things to the top-level Trial page and see that I
do need edit perms. I was mistaken - I've only changed stuff over at
divmod.org.  It's terrycojones.

Terry



From ross at burtonini.com  Wed Apr 11 07:35:10 2007
From: ross at burtonini.com (Ross Burton)
Date: Wed, 11 Apr 2007 14:35:10 +0100
Subject: [Twisted-Python] Re: Wrapping functions that return deferreds
In-Reply-To: <1176285937.6818.9.camel@antoine-ubuntu>
References: <1176284567.6121.8.camel@blackadder>
	<1176285937.6818.9.camel@antoine-ubuntu>
Message-ID: <1176298510.6121.24.camel@blackadder>

On Wed, 2007-04-11 at 12:05 +0200, Antoine Pitrou wrote:
> Le mercredi 11 avril 2007 à 10:42 +0100, Ross Burton a écrit :
> > def wrap_deferred (func):
> >     def wrapped(*args, **kwargs):
> >         d = func (*args, **kwargs)
> >         d.addErrback (handle_twisted_error)
> >         return d
> >     return wrapped
> > 
> > # flickr is the object, call is the method I'm overriding
> > flickr.call = wrap_deferred (flickr.call)
> > 
> > # Then later in my app
> > flickr.call(foo).addCallback(handleFoo)
> 
> Since you add the errback before adding the callback, errors happening
> in handleFoo will not get caught by the errback.

That is fine -- handleFoo doesn't throw any errors.  The deferred
returned by the original call() is calling errBack().

Ross
-- 
Ross Burton                                 mail: ross at burtonini.com
                                          jabber: ross at burtonini.com
                                     www: http://www.burtonini.com./
 PGP Fingerprint: 1A21 F5B0 D8D0 CFE3 81D4 E25A 2D09 E447 D0B4 33DF






From iacovou at gmail.com  Wed Apr 11 08:39:54 2007
From: iacovou at gmail.com (kgi)
Date: Wed, 11 Apr 2007 17:39:54 +0300
Subject: [Twisted-Python] Foolscap-0.1.1 released
In-Reply-To: <20070403.213612.74734554.warner@lothar.com>
References: <20070403.213612.74734554.warner@lothar.com>
Message-ID: <200704111739.54508.iacovou@gmail.com>

On Wednesday 04 April 2007 07:36, Brian Warner wrote:
> I've just released Foolscap-0.1.1, the next-generation-of-PB RPC library,

Hi Brian,

Thanks for the latest release; Foolscap is turning out to be very powerful and 
pleasant to use. I appreciate all your work.

I have two questions.

1. I'm trying to create an UnauthenticatedTub that listens on a 
system-assigned port (that is, on "tcp:0"). (I do this because I pass the 
underlying Referenceable to a remote server, and the random port is just a 
convenience to assist in debugging).

Combining the example in the documentation and the comments in foolscap/pb.py 
(particularly the Listener class) implies that something like this might be 
possible:

class MyServer ( Referenceable ):
    def remote_Foo ( self, blah ):
        return blah

myserver = MyServer()
tub = UnauthenticatedTub()
l = tub.listenOn("tcp:0")
tub.setLocation("localhost:%d" % l.getPortnum() )
url = tub.registerReference(myserver, "my-service")
print "the object is available at:", url

tub.startService()
reactor.run()

However, when code like this runs, it falls foul of the "assert 
self.s.running" at pb.py:73 (in getPortnum()).

This seems to imply that the reactor needs to be running before we can 
actually assign a port, so we can't call setLocation() or registerReference() 
until this is done. However, I can't see where I would hang my callback to 
perform the remained of the setup once the reactor had started.

2. I sent an email a while back about a possible bug I found; the archived 
version is here:

  http://twistedmatrix.com/pipermail/twisted-python/2007-March/014914.html

The behaviour I describe is still present in SVN, so I run against a patched 
install which seems to cure the problem, although I'm not claiming that it's 
The Right Way to solve it.

Cheers,

Ricky



From radix at twistedmatrix.com  Wed Apr 11 08:46:23 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 11 Apr 2007 10:46:23 -0400
Subject: [Twisted-Python] Trial docs?
In-Reply-To: <17948.58528.554987.793114@terry-jones-computer.local>
References: <17946.60075.835931.964805@terry-jones-computer.local>
	<20070410045443.7769.2069500529.divmod.xquotient.2685@joule.divmod.com>
	<17948.58528.554987.793114@terry-jones-computer.local>
Message-ID: <60ed19d40704110746j187f4bf9ma19039403ed27afc@mail.gmail.com>

On 4/11/07, Terry Jones <terry at jon.es> wrote:
> | What's your login name for trac?  I think someone will need to give you
> | edit permission, if they haven't already.
>
> Hi Glyph.
>
> I just went to add a few things to the top-level Trial page and see that I
> do need edit perms. I was mistaken - I've only changed stuff over at
> divmod.org.  It's terrycojones.

Added.


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From itamar at itamarst.org  Wed Apr 11 08:54:20 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 11 Apr 2007 10:54:20 -0400
Subject: [Twisted-Python] Foolscap-0.1.1 released
In-Reply-To: <200704111739.54508.iacovou@gmail.com>
References: <20070403.213612.74734554.warner@lothar.com>
	<200704111739.54508.iacovou@gmail.com>
Message-ID: <1176303260.25557.0.camel@localhost.localdomain>

On Wed, 2007-04-11 at 17:39 +0300, kgi wrote:

> 2. I sent an email a while back about a possible bug I found; the archived 
> version is here:

Please add bugs to the issue tracker on our website, so they don't get
lost.




From twisted-python at 2xlp.com  Wed Apr 11 11:12:31 2007
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 11 Apr 2007 13:12:31 -0400
Subject: [Twisted-Python] Threadpool analysis?
Message-ID: <DAB07213-8B3C-40C9-BDEC-617ADC00236B@2xlp.com>


My threadpool on a webspider keeps locking up.  I've been using  
manhole and sys._current_frames to try and figure out whats going  
wrong -- and i've fixed a few issues.

I'm wondering though if anyone has developed some sort of threadpool  
analysis plugin -- something that monitors when threads check in/ out  
- maybe store stuff using rrd.

Also I'm wondering if there's a good /idiomatic way to mark/monitor  
threads -- I want to monitor certain stuff that I call defer to  
thread on,  I don't really care about other  stuff in the threadpool.

Thanks.

// Jonathan Vanasco

| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
| SyndiClick.com
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      FindMeOn.com - The cure for Multiple Web Personality Disorder
|      Web Identity Management and 3D Social Networking
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      RoadSound.com - Tools For Bands, Stuff For Fans
|      Collaborative Online Management And Syndication Tools
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -





From matusis at matusis.com  Wed Apr 11 12:38:02 2007
From: matusis at matusis.com (Alec Matusis)
Date: Wed, 11 Apr 2007 11:38:02 -0700
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>	<025001c77c18$3906e140$ab14a3c0$@com>	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>	<026a01c77c22$63141020$293c3060$@com>
	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>
Message-ID: <00c801c77c68$8a13e0b0$9e3ba210$@com>

I am now suspecting there is something strange with Twisted 2.5:

Both servers now show 99.9% CPU using top:

 PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
6929 alecm     16   0  148m  82m 3588 R 99.9  2.1 414:29.24 twistd

4083 alecm     17   0  135m  70m 3640 R 99.9  1.8 421:00.05 twistd

The first one 6929 is using poll now, 4083 is using epoll. For this time of
the day with Twisted 2.2 and poll the usual CPU would be 15% for 4083 and
80% for 6229. These numbers were pretty stable every day over at leats a
month.
Both servers seem to be responsive however. There were no code changes.

ps shows different %CPU at the same time:

#ps -C twistd -o pcpu,cmd,pid,size
%CPU CMD                           PID    SZ
61.0 /usr/bin/python /usr/local/  4083 82240
66.5 /usr/bin/python /usr/local/  6929 97300

I wonder if we should revert to Twisted 2.2 ASAP


> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Thomas Hervé
> Sent: Wednesday, April 11, 2007 4:47 AM
> To: twisted-python at twistedmatrix.com
> Subject: RE: [Twisted-Python] epoll reactor problems
> 
> Quoting Alec Matusis <matusis at matusis.com>:
> 
> >> That's old (debian stable ? :)). I don't say that'll solve your
> >> problem, but you
> >> could try with 2.4.4 (warning, not 2.4.3).
> >
> > It's SuSE stable ;-) Our stuff on that machine is pretty convoluted
> now, so
> > we will probably have a chance to test with 2.4.4 only in a week,
> when we
> > add a brand new server with 2.4.4.
> 
> OK. That is just another thing to try, I don't see obvious reasons why
> it could
> work better on 2.4.4, but...
> 
> > I noticed a difference between this from the 99.9% CPU server:
> >
> > epoll_wait(4, {{EPOLLERR|EPOLLHUP, {u32=423,
> u64=12304606485815493031}},
> >
> {EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLRDNORM|EPOLLRDBAND|EPOLLWRNORM|EPOLLWRB
> AND|E
> > POLLMSG|EPOLLERR|EPOLLHUP|0x7820, {u32=5529648, u64=5529648}},
> > {EPOLLIN|EPOLLPRI|EPOLLRDNORM|EPOLLRDBAND|EPOLLMSG|0x1000, {u32=0,
> > u64=22827751178240}}, {0, {u32=0, u64=0}},
> > {EPOLLOUT|EPOLLERR|EPOLLONESHOT|EPOLLET|0x3fffa820, {u32=32767,
> > u64=18097643565645823}}}, 1432, 68) = 5
> >
> > and this from a normal server running at 5% CPU:
> >
> > epoll_wait(4, {{EPOLLIN, {u32=1769, u64=12304606485815494377}}, {0,
> > {u32=4294944684, u64=140737488332716}}}, 1728, 17) = 2
> >
> > What does this mean?
> 
> The flags set on your sockets are generally EPOLLIN or EPOLLOUT: data
> to read or
> available for write. I don't know much about the other flags. EPOLLERR
> is set if
> the fd has been closed for example. EPOLLET is *highly* suspect,
> because it
> should only be there if set in the user code. The documentation of
> other flags
> is really terse...
> 
> 
> >> What's the global state of the process? Memory, number of opened fd
> ?
> >
> > We immediately reverted to poll, so I do not have it in front of me.
> The RSS
> > size was 45MB, and the number of open fd I do not know: it should
> have been
> > about 1500, but I did not check.
> 
> Hum... it may come from running out of file descriptors, so you'd
> better check
> your settings for this.
> 
> > I can do another test run with epoll in about 20hrs, since I do not
> want to
> > upset users too much.
> 
> Of course :).
> 
> > If you have some specific data I should get from the
> > test run, please let me know now.
> 
> Every information would be useful. The most useful information would be
> to know
> when it begins to act strangely, and if there is something that happend
> at this
> moment. Otherwise, number of fds, memory, netstat output, strace
> output...
> 
> --
> Thomas
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From glyph at divmod.com  Wed Apr 11 13:27:31 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 11 Apr 2007 19:27:31 -0000
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <00c801c77c68$8a13e0b0$9e3ba210$@com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
	<025001c77c18$3906e140$ab14a3c0$@com>
	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
	<026a01c77c22$63141020$293c3060$@com>
	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>
	<00c801c77c68$8a13e0b0$9e3ba210$@com>
Message-ID: <20070411192731.7769.729194544.divmod.xquotient.2702@joule.divmod.com>

On 06:38 pm, matusis at matusis.com wrote:
>I wonder if we should revert to Twisted 2.2 ASAP

I can't speak to your deployment requirements, but it sounds like this 
inquiry could lead to some extremely valuable information to fix this 
issue in the next release of Twisted.  Would it be possible to replicate 
this issue with your application in some kind of load-testing 
environment so that we can analyze it "in the lab"?  Although I'd really 
like to see this through to a satisfying conclusion, I don't want your 
application to have to pay the cost of fixing Twisted.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070411/321364bf/attachment.html>

From exarkun at divmod.com  Wed Apr 11 13:29:11 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 11 Apr 2007 15:29:11 -0400
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <00c801c77c68$8a13e0b0$9e3ba210$@com>
Message-ID: <20070411192911.18920.509631046.divmod.quotient.10583@ohm>

On Wed, 11 Apr 2007 11:38:02 -0700, Alec Matusis <matusis at matusis.com> wrote:
>I am now suspecting there is something strange with Twisted 2.5:
>
>Both servers now show 99.9% CPU using top:
>
> PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
>6929 alecm     16   0  148m  82m 3588 R 99.9  2.1 414:29.24 twistd
>
>4083 alecm     17   0  135m  70m 3640 R 99.9  1.8 421:00.05 twistd
>
>The first one 6929 is using poll now, 4083 is using epoll. For this time of
>the day with Twisted 2.2 and poll the usual CPU would be 15% for 4083 and
>80% for 6229. These numbers were pretty stable every day over at leats a
>month.
>Both servers seem to be responsive however. There were no code changes.
>
>ps shows different %CPU at the same time:
>
>#ps -C twistd -o pcpu,cmd,pid,size
>%CPU CMD                           PID    SZ
>61.0 /usr/bin/python /usr/local/  4083 82240
>66.5 /usr/bin/python /usr/local/  6929 97300
>
>I wonder if we should revert to Twisted 2.2 ASAP
>

I can't speak to whether or not you want to do that, but I can suggest
that if you can provide a more detailed bug report, then any problem in
Twisted will probably be fixed for you.

Jean-Paul



From matusis at matusis.com  Wed Apr 11 14:01:34 2007
From: matusis at matusis.com (Alec Matusis)
Date: Wed, 11 Apr 2007 13:01:34 -0700
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <20070411192731.7769.729194544.divmod.xquotient.2702@joule.divmod.com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>	<025001c77c18$3906e140$ab14a3c0$@com>	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>	<026a01c77c22$63141020$293c3060$@com>	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>	<00c801c77c68$8a13e0b0$9e3ba210$@com>
	<20070411192731.7769.729194544.divmod.xquotient.2702@joule.divmod.com>
Message-ID: <00f701c77c74$35a784d0$a0f68e70$@com>

We have tested the upgrade to 2.5 on our dev and stage, and we have not run into this problem. So the only way I know how to demonstrate it is to look on live. We are in San Francisco. I wonder if anybody from Twisted is in the Bay Area, then maybe we can get together, ssh into the live servers and examine it.

Otherwise, I will have to look into  creating a simpler load testing environment with fake clients: this would take me a bit of time…

From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of glyph at divmod.com
Sent: Wednesday, April 11, 2007 12:28 PM
To: Twisted general discussion
Subject: RE: [Twisted-Python] epoll reactor problems

On 06:38 pm, matusis at matusis.com wrote:

>I wonder if we should revert to Twisted 2.2 ASAP

I can't speak to your deployment requirements, but it sounds like this inquiry could lead to some extremely valuable information to fix this issue in the next release of Twisted.  Would it be possible to replicate this issue with your application in some kind of load-testing environment so that we can analyze it "in the lab"?  Although I'd really like to see this through to a satisfying conclusion, I don't want your application to have to pay the cost of fixing Twisted.




From p.mayers at imperial.ac.uk  Wed Apr 11 15:02:27 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 11 Apr 2007 22:02:27 +0100
Subject: [Twisted-Python] Threadpool analysis?
In-Reply-To: <DAB07213-8B3C-40C9-BDEC-617ADC00236B@2xlp.com>
References: <DAB07213-8B3C-40C9-BDEC-617ADC00236B@2xlp.com>
Message-ID: <461D4CE3.7060902@imperial.ac.uk>

Jonathan Vanasco wrote:
> 
> My threadpool on a webspider keeps locking up.  I've been using manhole 
> and sys._current_frames to try and figure out whats going wrong -- and 
> i've fixed a few issues.

Why are you using a threadpool with Twisted?



From twisted-python at 2xlp.com  Wed Apr 11 16:12:39 2007
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 11 Apr 2007 18:12:39 -0400
Subject: [Twisted-Python] Threadpool analysis?
In-Reply-To: <461D4CE3.7060902@imperial.ac.uk>
References: <DAB07213-8B3C-40C9-BDEC-617ADC00236B@2xlp.com>
	<461D4CE3.7060902@imperial.ac.uk>
Message-ID: <CAE5C43D-9FC3-43C1-A960-68BBB034EDD7@2xlp.com>


On Apr 11, 2007, at 5:02 PM, Phil Mayers wrote:

> Why are you using a threadpool with Twisted?


I'm not using one directly -- I'm using deferToThread , which twisted  
manages via its own threadpool.  Stuff is locking up, so i'm using  
manhole to try and see wtf is going on.



// Jonathan Vanasco

| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
| SyndiClick.com
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      FindMeOn.com - The cure for Multiple Web Personality Disorder
|      Web Identity Management and 3D Social Networking
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      RoadSound.com - Tools For Bands, Stuff For Fans
|      Collaborative Online Management And Syndication Tools
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -





From p.mayers at imperial.ac.uk  Wed Apr 11 17:22:53 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 12 Apr 2007 00:22:53 +0100
Subject: [Twisted-Python] Threadpool analysis?
In-Reply-To: <CAE5C43D-9FC3-43C1-A960-68BBB034EDD7@2xlp.com>
References: <DAB07213-8B3C-40C9-BDEC-617ADC00236B@2xlp.com>	<461D4CE3.7060902@imperial.ac.uk>
	<CAE5C43D-9FC3-43C1-A960-68BBB034EDD7@2xlp.com>
Message-ID: <461D6DCD.6050002@imperial.ac.uk>

Jonathan Vanasco wrote:
> 
> On Apr 11, 2007, at 5:02 PM, Phil Mayers wrote:
> 
>> Why are you using a threadpool with Twisted?
> 
> 
> I'm not using one directly -- I'm using deferToThread , which twisted 
> manages via its own threadpool.  Stuff is locking up, so i'm using 
> manhole to try and see wtf is going on.

Ok. What are you running in deferToThread?

More generally, you said things keep locking up. How, what are the 
symptoms? What OS and version are you using, how many outstanding 
requests have you deferToThread'ed, etc.

Answering your original question more directly, you can monitor basic 
info about that usage like so:

import time

COUNT = 0

def myDeferToThread(*p, **kw):
     global COUNT
     COUNT += 1
     stime = time.time()
     def cb(val):
         etime = time.time()
         global COUNT
         COUNT -= 1
         print "deferToThread returned in %.1fsec" % (etime-stime,)
         return val
     return deferToThread(*p, **kw).addCallback(cb)

You can using a task.LoopingCall to report the outstanding number 
periodically. You can even get sophisticated and use an increasing 
sequence number like so:

OUTSTANDING = {}
SEQUENCE = 0

def myDeferToThread(*p, **kw):
     global SEQUENCE
     global OUTSTANDING
     SEQUENCE += 1
     argstr = 'p=%r kw=%r' % (p, kw)
     OUTSTANDING[SEQUENCE] = argstr
     def cb(val):
         args = OUTSTANDING[SEQUENCE]
         del OUTSTANDING[SEQUENCE]
         print "%s returned" % (args,)
         return val
     return deferToThread(*p, **kw).addCallback(cb)

...or something along those lines.

Some of which might help you.



From daedalus at eigenmagic.com  Wed Apr 11 18:26:51 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Thu, 12 Apr 2007 10:26:51 +1000
Subject: [Twisted-Python] Implementing an event manager in twisted
Message-ID: <1176337611.7007.31.camel@localhost>

Hi folks,

I have had an idea to implement an event manager to glue a few different
system components together, and I am wondering which pieces of twisted
would be best suited to the task, or even if I should attempt it at all.

I have programs that poll for data.
I have a database that stores polled information.
I have programs that listen for data to be provided to them from
external entities.

I have a desire to provide scheduler functionality (at time x, take
action y).

It seems to me that I could join all of these things via an event
manager:

A program polls for data, succeeds and notifies the event manager of the
data that was polled. The event manager notifies a 'poll storage' object
that stores the data in the database. It could also notify other things.

Data is received from an external entity by a listener. The listener
notifies the event manager of the data. The event manager notifies an
object that stores it in the database, or runs a script, or uploads
something to flickr, or whatever.

Time passes. The event manager notifies interested objects that this is
so. They take whatever action they deem necessary.

None of this is new, so I wonder what others have done in this area? Am
I heading down a dangerous path? What are the traps for new players? Has
someone already written something that does all of this that I can use,
saving myself time and headaches?

-- 
Justin Warren <daedalus at eigenmagic.com>



From andrew-twisted at puzzling.org  Wed Apr 11 19:00:13 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 12 Apr 2007 11:00:13 +1000
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <00c801c77c68$8a13e0b0$9e3ba210$@com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
	<025001c77c18$3906e140$ab14a3c0$@com>
	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
	<026a01c77c22$63141020$293c3060$@com>
	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>
	<00c801c77c68$8a13e0b0$9e3ba210$@com>
Message-ID: <20070412010013.GB6345@steerpike.home.puzzling.org>

Alec Matusis wrote:
> I am now suspecting there is something strange with Twisted 2.5:
> 
> Both servers now show 99.9% CPU using top:

It would be nice to know where in the code it is spending all that time.

I would consider installing the debug symbols for python, and getting a C and
python backtrace with gdb.  (use the .gdbinit file from
http://svn.python.org/view/python/trunk/Misc/gdbinit?rev=39492&view=auto to get
the "pystack" gdb command, you may need the patch to it from
http://jcalderone.livejournal.com/28224.html too).

Or maybe even install a simple SIGUSR1 signal handler than dumps a backtrace,
and send SIGUSR1 to your process repeatedly while it's at 99.9% CPU.  Or a
SIGUSR1 handler to install a trace hook (like the twistd --spew option does).

The idea either way is to find out by random sampling what code is executing;
presumably it's doing the same redundant work over and over, so it shouldn't
take many samples to find one code path that is occurring frequently.

Then hopefully that extra information will hint at what the problem is.

-Andrew.




From andrew-twisted at puzzling.org  Wed Apr 11 19:06:42 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 12 Apr 2007 11:06:42 +1000
Subject: [Twisted-Python] Threadpool analysis?
In-Reply-To: <CAE5C43D-9FC3-43C1-A960-68BBB034EDD7@2xlp.com>
References: <DAB07213-8B3C-40C9-BDEC-617ADC00236B@2xlp.com>
	<461D4CE3.7060902@imperial.ac.uk>
	<CAE5C43D-9FC3-43C1-A960-68BBB034EDD7@2xlp.com>
Message-ID: <20070412010642.GC6345@steerpike.home.puzzling.org>

Jonathan Vanasco wrote:
> 
> On Apr 11, 2007, at 5:02 PM, Phil Mayers wrote:
> 
> >Why are you using a threadpool with Twisted?
> 
> 
> I'm not using one directly -- I'm using deferToThread , which twisted  
> manages via its own threadpool.  Stuff is locking up, so i'm using  
> manhole to try and see wtf is going on.

Keep in mind that deferToThread uses the reactor's threadpool, which by default
only has a fairly small number of threads.  So if you are trying to run many
long-running operations via deferToThread, it may take a long time for them to
get served.  It may be better to start your own threadpool
(twisted.python.threadpool) if you depend heavily on it.

Also, the easiest way to find out what the state the threads started by a thread
pool are in is by looking at the ThreadPool object; you could inspect the
tp.q.qsize(), len(tp.threads), etc.

You could also look at threading.enumerate() in the standard library.

-Andrew.




From twisted-python at 2xlp.com  Wed Apr 11 19:21:11 2007
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 11 Apr 2007 21:21:11 -0400
Subject: [Twisted-Python] Threadpool analysis?
In-Reply-To: <20070412010642.GC6345@steerpike.home.puzzling.org>
References: <DAB07213-8B3C-40C9-BDEC-617ADC00236B@2xlp.com>
	<461D4CE3.7060902@imperial.ac.uk>
	<CAE5C43D-9FC3-43C1-A960-68BBB034EDD7@2xlp.com>
	<20070412010642.GC6345@steerpike.home.puzzling.org>
Message-ID: <8C34146D-8A4D-4032-8A30-7A9DFD97D2C9@2xlp.com>


On Apr 11, 2007, at 9:06 PM, Andrew Bennetts wrote:

> Keep in mind that deferToThread uses the reactor's threadpool,  
> which by default
> only has a fairly small number of threads.  So if you are trying to  
> run many
> long-running operations via deferToThread, it may take a long time  
> for them to
> get served.  It may be better to start your own threadpool
> (twisted.python.threadpool) if you depend heavily on it.

http://twistedmatrix.com/documents/current/api/ 
twisted.internet.interfaces.IReactorThreads.html#suggestThreadPoolSize

i'm running it with 20 right now, but i've done 40 with no sweat.

// Jonathan Vanasco

| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - -
| FindMeOn.com - The cure for Multiple Web Personality Disorder
| Web Identity Management and 3D Social Networking
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - -
| RoadSound.com - Tools For Bands, Stuff For Fans
| Collaborative Online Management And Syndication Tools
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - -





From ppergame at gmail.com  Wed Apr 11 19:55:17 2007
From: ppergame at gmail.com (Pavel Pergamenshchik)
Date: Wed, 11 Apr 2007 18:55:17 -0700
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <20070412010013.GB6345@steerpike.home.puzzling.org>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
	<025001c77c18$3906e140$ab14a3c0$@com>
	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
	<026a01c77c22$63141020$293c3060$@com>
	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>
	<00c801c77c68$8a13e0b0$9e3ba210$@com>
	<20070412010013.GB6345@steerpike.home.puzzling.org>
Message-ID: <4a5c1b500704111855j54a5836dw2bfb71b519bddc9@mail.gmail.com>

On 4/11/07, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
>
> Alec Matusis wrote:
> > I am now suspecting there is something strange with Twisted 2.5:
> >
> > Both servers now show 99.9% CPU using top:
>
> It would be nice to know where in the code it is spending all that time.


It would appear from the earlier strace output that the code is busy dealing
with bogus epoll_wait results. Sounds like a buggy kernel.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070411/c42d940c/attachment.html>

From list-ener at strank.info  Thu Apr 12 02:45:35 2007
From: list-ener at strank.info (Stefan Rank)
Date: Thu, 12 Apr 2007 10:45:35 +0200
Subject: [Twisted-Python] IPython embedded in twisted (and Re: readline-like
 behavior inside Twisted)
In-Reply-To: <20070408145125.18920.1518675638.divmod.quotient.9346@ohm>
References: <20070406212849.7769.1052979193.divmod.xquotient.2642@joule.divmod.com>
	<20070408145125.18920.1518675638.divmod.quotient.9346@ohm>
Message-ID: <461DF1AF.4090409@strank.info>

Hi,

on 08.04.2007 16:51 Jean-Paul Calderone said the following:
<snip>
> What would actually be really excellent is if both
> insults and pyreadline used the same underlying readline model code which
> was devoid of input/output code, then each could focus on the part it 
> should
> really care about (dealing with events or talking to a windows console or
> what have you) and improvements to the actually interesting behavior in the
> readline model could be shared between the two.
> 
> To some extend insults already has this (I've tried to factor as much of 
> the
> interesting behavior out away from the Twisted parts), and I see this is 
> also
> how at least some of pyreadline is structured (eg 
> lineeditor/history.py), so
> it might actually be feasible to merge the two backends into one shared
> thing.

That would be perfect.

on 09.04.2007 16:33 Michael Hudson said the following:
<snip>
> This isn't really a followup, but it seems worthwhile to mention that GNU
> readline itself has a callback interface (rl_callback_read_char) that would be
> suitable for using with Twisted.  You'd have to use ctypes or something to get
> to it, but it's there.

Seems even better. This interface, however, wants to consume the input 
itself, so a t.i.stdio-alike would need to poll/select for input events 
and then call rl_callback_read_char to actually consume them, right?


Attached is my ugly first attempt at embedding IPython in twisted 
without threads.
(no readline behaviour, only tried it on Windows)

Hopefully this catches the interest of someone with more 
time/knowledge... ;-)

Will also post on the IPython list to see if they would be willing to 
change their code to be more callback-friendly.

cheers,
stefan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: testtwistedipython.py
Type: text/x-python
Size: 12974 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070412/2d518160/attachment-0002.py>

From manuel.arias at gmail.com  Thu Apr 12 10:40:24 2007
From: manuel.arias at gmail.com (Manuel Arias)
Date: Thu, 12 Apr 2007 09:40:24 -0700
Subject: [Twisted-Python] Implementing an event manager in twisted
In-Reply-To: <1176337611.7007.31.camel@localhost>
References: <1176337611.7007.31.camel@localhost>
Message-ID: <aba35c4f0704120940r45161805tf15891727a50d141@mail.gmail.com>

Hi Justin,

The scheduling is easily doable using twisted as a scheduler eg) callLater
or task.LoopingCall.

Writing an event dispatcher isn't too tough either. A very simple one allows
you to register using a hash-able "name" object eg) a string. You call the
dispatcher with the same object when you want to notify the registered
handlers. Twisted has one see:
http://twistedmatrix.com/docum<http://twistedmatrix.com/documents/current/api/twisted.python.dispatch.EventDispatcher.html>
ents/current/api/twisted.python<http://twistedmatrix.com/documents/current/api/twisted.python.dispatch.EventDispatcher.html>
.dispatch.EventDispatcher.html<http://twistedmatrix.com/documents/current/api/twisted.python.dispatch.EventDispatcher.html>.
That could easily be tied in to generating events from a listener
having
received data.

It seems that you have various programs that you want to coordinate using
twisted. One way to accomplish this is like you said to write an event
manager with twisted. Your listeners would connect (how? over sockets using
existing protocols or write your own...or use Perspective Broker) to your
twisted event manager to generate "received data" events. Your "received
data" event handlers could spawn processes and pipe the data to them, or you
can use twisted's adbapi to store the data in the database.


On 4/11/07, Justin Warren <daedalus at eigenmagic.com> wrote:
> Hi folks,
>
> I have had an idea to implement an event manager to glue a few different
> system components together, and I am wondering which pieces of twisted
> would be best suited to the task, or even if I should attempt it at all.
>
> I have programs that poll for data.
> I have a database that stores polled information.
> I have programs that listen for data to be provided to them from
> external entities.
>
> I have a desire to provide scheduler functionality (at time x, take
> action y).
>
> It seems to me that I could join all of these things via an event
> manager:
>
> A program polls for data, succeeds and notifies the event manager of the
> data that was polled. The event manager notifies a 'poll storage' object
> that stores the data in the database. It could also notify other things.
>
> Data is received from an external entity by a listener. The listener
> notifies the event manager of the data. The event manager notifies an
> object that stores it in the database, or runs a script, or uploads
> something to flickr, or whatever.
>
> Time passes. The event manager notifies interested objects that this is
> so. They take whatever action they deem necessary.
>
> None of this is new, so I wonder what others have done in this area? Am
> I heading down a dangerous path? What are the traps for new players? Has
> someone already written something that does all of this that I can use,
> saving myself time and headaches?
>
> --
> Justin Warren <daedalus at eigenmagic.com>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070412/6d24a71d/attachment.html>

From matt at zgroupplc.com  Thu Apr 12 10:53:25 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Thu, 12 Apr 2007 17:53:25 +0100
Subject: [Twisted-Python] The Trial of the DirtyReactorError
Message-ID: <B88241EF-A5CF-4E90-A972-F3250E7E6ABD@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi All,

I have to say that I am largely getting along famously with Twisted  
(and Python) now.

I have started writing unit tests for my application and when I run  
them using trial I sometimes get DirtyReactorErrors ('reactor left in  
unclean state'). This is a nice error. It tells me that I am not  
shutting down resources correctly which would otherwise be left  
hanging around and be difficult to debug.

I understand why this is occurring, its a simple matter of calling  
tcp.Port.stopListening() to suppress the error. However, I am more  
concerned with learning about where the most appropriate place to run  
this routine would be. I am not happy about running it in the unit  
test as it doesn't solve the problem, it just suppresses it. I can't  
seem to find an easy way to stop a port from listening from within a  
ServerFactory. Should I be writing a class that wraps the  
ServerFactory to run tcp.Port.stopListening() at the appropriate time?

Please bear in mind that I am creating multiple 'one-shot' servers  
that are always shut down as soon as they have done their business. I  
am guessing that the stopService methods would be more appropriate  
for a conventional server that serves multiple clients / requests.

Your thoughts?

Thanks a lot for your time :)

Matt


m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGHmQKyI6MkdKPngkRAlkwAJ4zebpjOsfItDtqIaRJbj0kyN7jhACdHvYC
17YRmuZNefQfCxCesMStUWI=
=dh4Z
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Thu Apr 12 11:06:13 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 12 Apr 2007 13:06:13 -0400
Subject: [Twisted-Python] Implementing an event manager in twisted
In-Reply-To: <aba35c4f0704120940r45161805tf15891727a50d141@mail.gmail.com>
Message-ID: <20070412170613.19381.432063232.divmod.quotient.33@ohm>

On Thu, 12 Apr 2007 09:40:24 -0700, Manuel Arias <manuel.arias at gmail.com> wrote:
>Hi Justin,
>
>The scheduling is easily doable using twisted as a scheduler eg) callLater
>or task.LoopingCall.
>
>Writing an event dispatcher isn't too tough either. A very simple one allows
>you to register using a hash-able "name" object eg) a string. You call the
>dispatcher with the same object when you want to notify the registered
>handlers. Twisted has one see:
>http://twistedmatrix.com/docum<http://twistedmatrix.com/documents/current/api/twisted.python.dispatch.EventDispatcher.html>
>ents/current/api/twisted.python<http://twistedmatrix.com/documents/current/api/twisted.python.dispatch.EventDispatcher.html>
>.dispatch.EventDispatcher.html<http://twistedmatrix.com/documents/current/api/twisted.python.dispatch.EventDispatcher.html>.

Note that this is deprecated and new software should not use it.  Feel free
to copy it into your own project if you think it's useful, but it hardly does
anything at all.

Jean-Paul



From glyph at divmod.com  Thu Apr 12 12:12:04 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 12 Apr 2007 18:12:04 -0000
Subject: [Twisted-Python] Implementing an event manager in twisted
In-Reply-To: <1176337611.7007.31.camel@localhost>
References: <1176337611.7007.31.camel@localhost>
Message-ID: <20070412181204.7769.542117799.divmod.xquotient.2716@joule.divmod.com>

On 12:26 am, daedalus at eigenmagic.com wrote:
>I have had an idea to implement an event manager to glue a few 
>different
>system components together, and I am wondering which pieces of twisted
>would be best suited to the task, or even if I should attempt it at 
>all.

Nothing about what you're suggesting sounds dangerous or weird.  In 
fact, it really sounds like what Twisted is already :).  If you want to 
write a layer over it to provide higher-level events, that's fine; most 
Twisted applications do something of the sort.  The one thing I'd 
caution you against is attempting to make something at the same level of 
abstraction as Twisted by building on top of Twisted.  That would just 
add complexity and overhead without any benefit.  So here are some 
things you've described which sound, to me, exactly like what Twisted 
already does:
>I have a desire to provide scheduler functionality (at time x, take
>action y).

This sounds like reactor.callLater().  (Or if you're talking about 
persistent scheduling, axiom's IScheduler.schedule).
>Data is received from an external entity by a listener.

This sounds like IProtocol's dataReceived method.
>A program polls for data, succeeds and notifies the event manager of 
>the
>data that was polled. The event manager notifies a 'poll storage' 
>object
>that stores the data in the database. It could also notify other 
>things.

In python, "notifying things" is just calling functions or methods; in 
the most advanced case, it's still just calling functions or methods 
which have been placed into a list.  Twisted has lots of such lists, and 
it doesn't seem worthwhile to me to unify them into a central structure.

If it does make sense to you to unify them, you might want to look at 
Louie: http://pylouie.org/ .  I've never used it and I don't really get 
what it's for, but several folks that I know seem to like it a lot for 
gluing events together.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070412/e34f2b27/attachment.html>

From glyph at divmod.com  Thu Apr 12 12:56:06 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 12 Apr 2007 18:56:06 -0000
Subject: [Twisted-Python] The Trial of the DirtyReactorError
In-Reply-To: <B88241EF-A5CF-4E90-A972-F3250E7E6ABD@zgroupplc.com>
References: <B88241EF-A5CF-4E90-A972-F3250E7E6ABD@zgroupplc.com>
Message-ID: <20070412185606.7769.1982208738.divmod.xquotient.2797@joule.divmod.com>

On 04:53 pm, matt at zgroupplc.com wrote:
>I understand why this is occurring, its a simple matter of calling 
>tcp.Port.stopListening() to suppress the error. However, I am more 
>concerned with learning about where the most appropriate place to run 
>this routine would be. I am not happy about running it in the unit 
>test as it doesn't solve the problem, it just suppresses it.

Putting the stopListening call into the middle of the actual test method 
would definitely be wrong.

However, putting the listenTCP in the setUp and the stopListening in the 
tearDown would be entirely appropriate.  If the code under test 
dynamically calls stopListening and might fail before then, then a 
tearDown by itself might be appropriate.
>I can't  seem to find an easy way to stop a port from listening from 
>within a  ServerFactory. Should I be writing a class that wraps the 
>ServerFactory to run tcp.Port.stopListening() at the appropriate time?

This is, in part, a weakness of the IProtocolFactory interface.  Calls 
to doStart and doStop should really receive an IListeningPort argument.

However, this is a minor wart.  listenTCP returns the Port, and hooking 
this up to your server factory in application code should be easy 
enough.
>Please bear in mind that I am creating multiple 'one-shot' servers 
>that are always shut down as soon as they have done their business. I 
>am guessing that the stopService methods would be more appropriate  for 
>a conventional server that serves multiple clients / requests.

If they are "always shut down", what event currently shuts them down? 
Have your test trigger that event.  If they're one-shot, then perhaps 
the method that calls listenTCP should be on the factory itself, making 
it even easier to keep track of the Port instance it is associated with.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070412/1906a032/attachment.html>

From daedalus at eigenmagic.com  Thu Apr 12 17:35:41 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Fri, 13 Apr 2007 09:35:41 +1000
Subject: Trial adbapi tip. Was: [Twisted-Python] The Trial of the
	DirtyReactorError
In-Reply-To: <B88241EF-A5CF-4E90-A972-F3250E7E6ABD@zgroupplc.com>
References: <B88241EF-A5CF-4E90-A972-F3250E7E6ABD@zgroupplc.com>
Message-ID: <1176420942.28992.12.camel@fnord.melbourne.eigenmagic.net>

On Thu, 2007-04-12 at 17:53 +0100, Matthew Glubb wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> Hi All,
> 
> I have to say that I am largely getting along famously with Twisted  
> (and Python) now.
> 
> I have started writing unit tests for my application and when I run  
> them using trial I sometimes get DirtyReactorErrors ('reactor left in  
> unclean state'). This is a nice error. It tells me that I am not  
> shutting down resources correctly which would otherwise be left  
> hanging around and be difficult to debug.

On this note, I have a little tip to anyone new to writing Trial tests,
as I am:

If you use adbapi to talk to a database, be aware that it uses a
threadpool in order to make something that is synchronous into something
asynchronous. In an ordinary program, the threadpool is started and shut
down for you by the reactor, but it probably won't be in your tests
because of the way the reactor works with trial. I am using a
twisted.enterprise.adbapi.ConnectionPool, for example.

What you need is to call ConnectionPool.start() from within your
unittest setUp(), and to call ConnectionPool.close() in tearDown(). This
explicitly starts and stops the threadpool at the appropriate times.
>From memory, the start() will kindof automatically get called when you
set up the object, but close() will not. If you don't explicitly call
close(), trial will 'hang' because it's actually waiting for the
threadpool to exit, which never happens. You don't get a 'reactor left
in unclean state' error.

I hope that saves someone the couple of hours of head scratching and
reading code that I went through.

-- 
Justin Warren <daedalus at eigenmagic.com>



From daedalus at eigenmagic.com  Thu Apr 12 17:57:49 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Fri, 13 Apr 2007 09:57:49 +1000
Subject: [Twisted-Python] Implementing an event manager in twisted
In-Reply-To: <20070412181204.7769.542117799.divmod.xquotient.2716@joule.divmod.com>
References: <1176337611.7007.31.camel@localhost>
	<20070412181204.7769.542117799.divmod.xquotient.2716@joule.divmod.com>
Message-ID: <1176422270.28992.32.camel@fnord.melbourne.eigenmagic.net>

On Thu, 2007-04-12 at 18:12 +0000, glyph at divmod.com wrote:
> On 12:26 am, daedalus at eigenmagic.com wrote:
> 
> >I have had an idea to implement an event manager to glue a few
> different
> >system components together, and I am wondering which pieces of
> twisted
> >would be best suited to the task, or even if I should attempt it at
> all.
> 
> Nothing about what you're suggesting sounds dangerous or weird.  In
> fact, it really sounds like what Twisted is already :).  If you want
> to write a layer over it to provide higher-level events, that's fine;
> most Twisted applications do something of the sort.  The one thing I'd
> caution you against is attempting to make something at the same level
> of abstraction as Twisted by building on top of Twisted.  That would
> just add complexity and overhead without any benefit.  So here are
> some things you've described which sound, to me, exactly like what
> Twisted already does:

Whew. :) I certainly don't plan to re-implement Twisted, since it
already exists and it's ace; I want something at a higher level. My aim
here is to make my existing application(s) even more modular so that
functionality can be added and extended in a simple, common way. This
principle has already provided excellent benefits in the past.

> >I have a desire to provide scheduler functionality (at time x, take
> >action y).
> 
> This sounds like reactor.callLater().  (Or if you're talking about
> persistent scheduling, axiom's IScheduler.schedule).

Yes, it will be persistent scheduling, so I'll check out IScheduler. "30
seconds have passed" would most likely be a reactor.callLater(30,
timePassed) thing though, yes, inside an EventProducer type object.

> >Data is received from an external entity by a listener.
> 
> This sounds like IProtocol's dataReceived method.

Yes, and I use it to great effect within the existing code. By listener,
I really mean a daemon process that listens, and there may be many of
them. Rather than have a single, monolithic twistd with many Services, I
think I would prefer a multi-process model so that each individual
process can be started/stopped independently, new ones can be written
that just talk to the event manager API, etc. In this way, the listener
process would purely listen for incoming data (eg: SNMP Traps), and then
talk to the event manager when it does.

In fact, now that I think about it, it would be neat if the event
manager API could allow third party programs to talk to the event
manager via a standard protocol, such as XML-RPC. Such programs could
then be written in the author's favourite language, which may not be
Python+twisted, and potentially operate on remote systems.

> >A program polls for data, succeeds and notifies the event manager of
> the
> >data that was polled. The event manager notifies a 'poll storage'
> object
> >that stores the data in the database. It could also notify other
> things.
> 
> In python, "notifying things" is just calling functions or methods; in
> the most advanced case, it's still just calling functions or methods
> which have been placed into a list.  Twisted has lots of such lists,
> and it doesn't seem worthwhile to me to unify them into a central
> structure.

True, though the more I think about it, I think I want an RPC mechanism
of some kind, and I believe Perspective Broker is such a beast? I
haven't really looked at it yet, but I've long been intrigued by what
people have been saying about it.

So it seems I want to add a veneer of RPC to my programs to allow them
to communicate at a distance. Imagine a poller process on one host, an
SNMP trap listener on another, a database storage process on still
another. This sort of modularity would provide excellent scalability.

Any suggestions for people's favourite ways of doing this with twisted?

> If it does make sense to you to unify them, you might want to look at
> Louie: http://pylouie.org/ .  I've never used it and I don't really
> get what it's for, but several folks that I know seem to like it a lot
> for gluing events together.

I'll check it out.

Thanks for the great responses so far, too. :)

-- 
Justin Warren <daedalus at eigenmagic.com>



From matusis at matusis.com  Thu Apr 12 19:50:40 2007
From: matusis at matusis.com (Alec Matusis)
Date: Thu, 12 Apr 2007 18:50:40 -0700
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <20070411192731.7769.729194544.divmod.xquotient.2702@joule.divmod.com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>	<025001c77c18$3906e140$ab14a3c0$@com>	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>	<026a01c77c22$63141020$293c3060$@com>	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>	<00c801c77c68$8a13e0b0$9e3ba210$@com>
	<20070411192731.7769.729194544.divmod.xquotient.2702@joule.divmod.com>
Message-ID: <01dd01c77d6e$24e85930$6eb90b90$@com>

>  Would it be possible to replicate this issue with your application in some kind of load-testing environment so that we can analyze it "in the lab"?  

 

So far, we could not replicate this in the lab- with thousands of fake multithreaded clients the behavior is normal.

Thus far, we have run this for 2 days with twisted 2.5 with poll and epoll, and we are now seeing big memory leaks that did not occur on 2.2, especially on epoll, in addition to 99.9% CPU.

Back on 2.2 one of our servers was slowly leaking memory, going from 45MB to about 500MB in about 10 days. On epoll in 2.5 it went from 45MB to 1.9g in a couple of hours, almost taking the machine down. The other server did not have memory leak on 2.2, staying at 70MB for weeks at a time. In one day it went from 70MB to 80MB on epoll in 2.5. Both show 99% CPU, so I suspect the memory leaks may be caused by skipping garbage collection because the process is too busy. Interestingly, the actual performance on epoll is not bad, the servers remain responsive even where the poll-based reactor in 2.2 was having difficulties.

 

We must revert to 2.2 tonight.

 

I emailed you and Jean-Paul. If you like, we can arrange ssh to our live servers, then you could look at it on Twisted 2.2 first, then we will switch again to 2.5 and then you can examine it when it’s unstable.

 

 

 

From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of glyph at divmod.com
Sent: Wednesday, April 11, 2007 12:28 PM
To: Twisted general discussion
Subject: RE: [Twisted-Python] epoll reactor problems

 

On 06:38 pm, matusis at matusis.com wrote:

>I wonder if we should revert to Twisted 2.2 ASAP

I can't speak to your deployment requirements, but it sounds like this inquiry could lead to some extremely valuable information to fix this issue in the next release of Twisted.  Would it be possible to replicate this issue with your application in some kind of load-testing environment so that we can analyze it "in the lab"?  Although I'd really like to see this through to a satisfying conclusion, I don't want your application to have to pay the cost of fixing Twisted.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070412/7e9871d4/attachment.html>

From warner at lothar.com  Thu Apr 12 23:22:44 2007
From: warner at lothar.com (Brian Warner)
Date: Thu, 12 Apr 2007 22:22:44 -0700
Subject: [Twisted-Python] Foolscap-0.1.1 released
In-Reply-To: <200704111739.54508.iacovou@gmail.com> (iacovou@gmail.com's
	message of "Wed, 11 Apr 2007 17:39:54 +0300")
References: <20070403.213612.74734554.warner@lothar.com>
	<200704111739.54508.iacovou@gmail.com>
Message-ID: <874pnketln.fsf@lothar.com>

kgi <iacovou at gmail.com> writes:

> Thanks for the latest release; Foolscap is turning out to be very powerful
> and pleasant to use. I appreciate all your work.

Thanks!

> 1. I'm trying to create an UnauthenticatedTub that listens on a 
> system-assigned port (that is, on "tcp:0"). (I do this because I pass the 
> underlying Referenceable to a remote server, and the random port is just a 
> convenience to assist in debugging).
>
> tub = UnauthenticatedTub()
> l = tub.listenOn("tcp:0")
> tub.setLocation("localhost:%d" % l.getPortnum() )
> url = tub.registerReference(myserver, "my-service")
> print "the object is available at:", url
>
> tub.startService()
> reactor.run()

> However, when code like this runs, it falls foul of the "assert 
> self.s.running" at pb.py:73 (in getPortnum()).
>
> This seems to imply that the reactor needs to be running before we can
> actually assign a port, so we can't call setLocation() or
> registerReference() until this is done.

Close.. it requires that the Tub has been started, which is a slightly weaker
requirement than the reactor being running. If you rearrange the order of
operations to do:

 tub = UnauthenticatedTub()
 tub.startService()
 l = tub.listenOn("tcp:0")
 tub.setLocation("localhost:%d" % l.getPortnum() )
 url = tub.registerReference(myserver, "my-service")
 print "the object is available at:", url

 reactor.run()

Then you should find that it starts working ok.

Port numbers are allocated as soon as the Tub service is started, and isn't
"slow" (in the sense that it requires multiple turns of the reactor to
complete). The Tub is not supposed to do any network IO until it is started,
so it won't allocate the port until that point, but it doesn't really need to
be post-reactor.run().

(incidentally, if you need to know when the reactor has started for other
reasons, you can use reactor.callWhenRunning(cb))

The current version of Foolscap doesn't quite honor this "don't start until I
tell you to" rule: if you do getReference() before startService(), it will
cheerfully initiate outbound network connections anyways. This will be fixed
at some point.

> 2. I sent an email a while back about a possible bug I found; the archived 
> version is here:
>
>   http://twistedmatrix.com/pipermail/twisted-python/2007-March/014914.html

Yeah, sorry about not responding to that.. things got busy that month :).

(to be honest there are probably a number of issues with Copyable, as I
haven't personally used it nearly as much as the rest of Foolscap.)

Reading over your note, I think your analysis is exactly right.
Copyable.slice() is obligated to set self.streamable before any child objects
might get seralized, which means before the first yield(). I'll fix this
tonight. I wonder why the unit tests didn't catch it..

thanks!
 -Brian



From matt at zgroupplc.com  Fri Apr 13 01:19:45 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Fri, 13 Apr 2007 08:19:45 +0100
Subject: [Twisted-Python] The Trial of the DirtyReactorError
In-Reply-To: <20070412185606.7769.1982208738.divmod.xquotient.2797@joule.divmod.com>
References: <B88241EF-A5CF-4E90-A972-F3250E7E6ABD@zgroupplc.com>
	<20070412185606.7769.1982208738.divmod.xquotient.2797@joule.divmod.com>
Message-ID: <C52C1E79-15F0-48E4-A341-B029859C1272@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Thanks for your advice, glyph. I'll probably end up calling listenTCP  
from within the factory and shutting it down on call or errback.

Regards,

Matt

On 12 Apr 2007, at 19:56, glyph at divmod.com wrote:

> On 04:53 pm, matt at zgroupplc.com wrote:
>> I understand why this is occurring, its a simple matter of calling  
>> tcp.Port.stopListening() to suppress the error. However, I am more  
>> concerned with learning about where the most appropriate place to  
>> run this routine would be. I am not happy about running it in the  
>> unit test as it doesn't solve the problem, it just suppresses it.
>
> Putting the stopListening call into the middle of the actual test  
> method would definitely be wrong.
>
> However, putting the listenTCP in the setUp and the stopListening  
> in the tearDown would be entirely appropriate.  If the code under  
> test dynamically calls stopListening and might fail before then,  
> then a tearDown by itself might be appropriate.
>> I can't  seem to find an easy way to stop a port from listening  
>> from within a  ServerFactory. Should I be writing a class that  
>> wraps the ServerFactory to run tcp.Port.stopListening() at the  
>> appropriate time?
>
> This is, in part, a weakness of the IProtocolFactory interface.   
> Calls to doStart and doStop should really receive an IListeningPort  
> argument.
>
> However, this is a minor wart.  listenTCP returns the Port, and  
> hooking this up to your server factory in application code should  
> be easy enough.
>> Please bear in mind that I am creating multiple 'one-shot' servers  
>> that are always shut down as soon as they have done their  
>> business. I am guessing that the stopService methods would be more  
>> appropriate  for a conventional server that serves multiple  
>> clients / requests.
>
> If they are "always shut down", what event currently shuts them  
> down? Have your test trigger that event.  If they're one-shot, then  
> perhaps the method that calls listenTCP should be on the factory  
> itself, making it even easier to keep track of the Port instance it  
> is associated with.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGHy8UyI6MkdKPngkRAlH6AJ9bKzXeD2resG9USuAnWwCvoEaVEgCePCDy
rGROSFHTjmkQgBDHdDQ09o0=
=k9Gq
-----END PGP SIGNATURE-----



From nico at tekNico.net  Fri Apr 13 02:22:11 2007
From: nico at tekNico.net (Nicola Larosa)
Date: Fri, 13 Apr 2007 10:22:11 +0200
Subject: [Twisted-Python] Re: Implementing an event manager in twisted
In-Reply-To: <1176422270.28992.32.camel@fnord.melbourne.eigenmagic.net>
References: <1176337611.7007.31.camel@localhost>	<20070412181204.7769.542117799.divmod.xquotient.2716@joule.divmod.com>
	<1176422270.28992.32.camel@fnord.melbourne.eigenmagic.net>
Message-ID: <461F3DB3.6080109@tekNico.net>

Justin Warren wrote:
> Any suggestions for people's favourite ways of doing this with twisted?

Perspective Broker, or Foolscap (aka newPB), or AMP.


-- 
Nicola Larosa - http://www.tekNico.net/

Just being alive, It can really hurt
And these moments given, Are a gift from time
Just let us try, To give these moments back
To those we love, To those who will survive
 -- Kate Bush, Moments Of Pleasure, Red Shoes, 1993





From matt at zgroupplc.com  Fri Apr 13 03:15:28 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Fri, 13 Apr 2007 10:15:28 +0100
Subject: [Twisted-Python] The Trial of the DirtyReactorError
In-Reply-To: <20070412185606.7769.1982208738.divmod.xquotient.2797@joule.divmod.com>
References: <B88241EF-A5CF-4E90-A972-F3250E7E6ABD@zgroupplc.com>
	<20070412185606.7769.1982208738.divmod.xquotient.2797@joule.divmod.com>
Message-ID: <733E34B2-A470-4ABE-9B3F-AC1C789DF719@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi All,

Following on from my DirtyReactorError errors whilst running unit  
tests under trial I opted, as glyph suggested, to call listenTCP  
inside the ServerFactory in order to keep track of the port and shut  
it down cleanly.

On 12 Apr 2007, at 19:56, glyph at divmod.com wrote:

> If they are "always shut down", what event currently shuts them  
> down? Have your test trigger that event.  If they're one-shot, then  
> perhaps the method that calls listenTCP should be on the factory  
> itself, making it even easier to keep track of the Port instance it  
> is associated with.

This causes me a problem. When a client connection is lost, I want to  
shutdown the server. The only way that I can see to do this is by the  
connectionLost event calling a method in my ServerFactory that shuts  
down the listening port:

class Echo(basic.LineOnlyReceiver):

     def connectionLost(self, reason):
         self.factory.shutdown(reason)

class EchoServerFactory(protocol.ServerFactory):
     protocol = Echo
     port = None

     def __init__(self, port):
         self.port = reactor.listenTCP(port, self)

     def shutdown(self, reason):
         self.port.stopListening()

*However*, this results in the following error:

twisted.trial.util.PendingTimedCallsError: pendingTimedCalls still  
pending (consider setting twisted.internet.base.DelayedCall.debug =  
True): <DelayedCall 24706704 [-0.00161504745483s] called=0  
cancelled=0 Port.connectionLost(<twisted.python.failure.Failure  
<class 'twisted.internet.error.ConnectionDone'>>)

Obviously, tcp.Port.stopListening() results in the  
Echo.connectionLost event being triggered, which in turn calls  
EchoServerFactory.shutdown(), which triggers an additional  
Echo.connectionLost event. It seems that tcp.Port.connected is not  
being updated quickly enough to prevent the additional pendingTimedCalls

My question therefore is how is it possible to cleanly shut down a  
server when a client connection is lost?

Apologies if I am being a complete idiot about this. I am still a  
relatively twisted newbie ;)

Regards,

Matt


m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGH0ozyI6MkdKPngkRAk0xAJ0ZmZk6FsRAkrzP2WJYy4lrIOvJiACeJSwP
AEAEWw/w2vexi4AHOqdba4M=
=NSmv
-----END PGP SIGNATURE-----



From itamar at itamarst.org  Fri Apr 13 06:43:36 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 13 Apr 2007 08:43:36 -0400
Subject: [Twisted-Python] epoll reactor problems
In-Reply-To: <01dd01c77d6e$24e85930$6eb90b90$@com>
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
	<025001c77c18$3906e140$ab14a3c0$@com>
	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
	<026a01c77c22$63141020$293c3060$@com>
	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>
	<00c801c77c68$8a13e0b0$9e3ba210$@com>
	<20070411192731.7769.729194544.divmod.xquotient.2702@joule.divmod.com>
	<01dd01c77d6e$24e85930$6eb90b90$@com>
Message-ID: <1176468217.29350.9.camel@localhost.localdomain>

On Thu, 2007-04-12 at 18:50 -0700, Alec Matusis wrote:

> So far, we could not replicate this in the lab- with thousands of fake
> multithreaded clients the behavior is normal.

Are you using same version of Python and same kernel on test machine and
production?

If you have memory leaks, there are various utility libraries out there
that will show you what the most common objects in your Python program
are; you might want to try those.




From exarkun at divmod.com  Fri Apr 13 09:22:05 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 13 Apr 2007 11:22:05 -0400
Subject: [Twisted-Python] The Trial of the DirtyReactorError
In-Reply-To: <733E34B2-A470-4ABE-9B3F-AC1C789DF719@zgroupplc.com>
Message-ID: <20070413152205.19381.954094387.divmod.quotient.509@ohm>

On Fri, 13 Apr 2007 10:15:28 +0100, Matthew Glubb <matt at zgroupplc.com> wrote:
>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>Hi All,
>
>Following on from my DirtyReactorError errors whilst running unit  tests 
>under trial I opted, as glyph suggested, to call listenTCP  inside the 
>ServerFactory in order to keep track of the port and shut  it down cleanly.
>
>On 12 Apr 2007, at 19:56, glyph at divmod.com wrote:
>>If they are "always shut down", what event currently shuts them  down? Have 
>>your test trigger that event.  If they're one-shot, then  perhaps the 
>>method that calls listenTCP should be on the factory  itself, making it 
>>even easier to keep track of the Port instance it  is associated with.
>
>This causes me a problem. When a client connection is lost, I want to 
>shutdown the server. The only way that I can see to do this is by the 
>connectionLost event calling a method in my ServerFactory that shuts  down 
>the listening port:
>
>class Echo(basic.LineOnlyReceiver):
>
>     def connectionLost(self, reason):
>         self.factory.shutdown(reason)
>
>class EchoServerFactory(protocol.ServerFactory):
>     protocol = Echo
>     port = None
>
>     def __init__(self, port):
>         self.port = reactor.listenTCP(port, self)
>
>     def shutdown(self, reason):
>         self.port.stopListening()
>
>*However*, this results in the following error:
>
>twisted.trial.util.PendingTimedCallsError: pendingTimedCalls still  pending 
>(consider setting twisted.internet.base.DelayedCall.debug =  True): 
><DelayedCall 24706704 [-0.00161504745483s] called=0  cancelled=0 
>Port.connectionLost(<twisted.python.failure.Failure  <class 
>'twisted.internet.error.ConnectionDone'>>)
>
>Obviously, tcp.Port.stopListening() results in the  Echo.connectionLost 
>event being triggered, which in turn calls  EchoServerFactory.shutdown(), 
>which triggers an additional  Echo.connectionLost event. It seems that 
>tcp.Port.connected is not  being updated quickly enough to prevent the 
>additional pendingTimedCalls
>

Port.stopListening can return a Deferred if shutdown is not immediately
completed.  In this case, you need to have trial wait for this Deferred
to fire before letting the test finish.  Also, Port.stopListening does
not cause Echo.connectionLost to be called.  Shutting down a port only
prevents new connections from being made to it, it does not disconnect
any existing connections.  Even if it did, it would be a bug if it gave
duplication connection lost notifications to any protocol. ;)

>My question therefore is how is it possible to cleanly shut down a  server 
>when a client connection is lost?

You might also consider disabling the port when the connection is /made/.
This reduces the size of the window available for a second connection to
be made, and as I mentioned above, has no affect on the already-established
connection.

Jean-Paul



From matt at zgroupplc.com  Fri Apr 13 10:03:31 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Fri, 13 Apr 2007 17:03:31 +0100
Subject: [Twisted-Python] The Trial of the DirtyReactorError
In-Reply-To: <20070413152205.19381.954094387.divmod.quotient.509@ohm>
References: <20070413152205.19381.954094387.divmod.quotient.509@ohm>
Message-ID: <1E179E63-F5B2-421E-9587-3A12DDB62147@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Jean-Paul,

On 13 Apr 2007, at 16:22, Jean-Paul Calderone wrote:

> Port.stopListening can return a Deferred if shutdown is not  
> immediately
> completed.  In this case, you need to have trial wait for this  
> Deferred
> to fire before letting the test finish.

Ah. That's handy to know. Thanks.

>   Also, Port.stopListening does
> not cause Echo.connectionLost to be called.  Shutting down a port only

Yes, I have realised this now. I was getting confused with another  
event, and thought connectionLost was getting called as a result of  
port shutdown. tcp.Port.stopListening() now works fine from within  
the ServerFactory.

> You might also consider disabling the port when the connection is / 
> made/.
> This reduces the size of the window available for a second  
> connection to
> be made, and as I mentioned above, has no affect on the already- 
> established
> connection.

I have actually implemented the ListenOverflowProtocol in the server.  
This seems to do what it says on the tin!

Thanks for you help and patience :)

Matt



m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGH6nWyI6MkdKPngkRAnoqAKCm2tZzlNn53dhXTM9ivBcUk2B1qACfdY6W
Dg2YtME3powiuyEoXACvXu0=
=XM/y
-----END PGP SIGNATURE-----



From andrewfr_ice at yahoo.com  Fri Apr 13 11:35:49 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Fri, 13 Apr 2007 10:35:49 -0700 (PDT)
Subject: [Twisted-Python] Implementing an event manager in twisted
In-Reply-To: <E1HcAxa-0003ZW-02@pyramid.twistedmatrix.com>
Message-ID: <647897.7783.qm@web34201.mail.mud.yahoo.com>

Hello Justin:

>Whew. :) I certainly don't plan to re-implement
>Twisted, since it already exists and it's ace; I want
>something at a higher level. My aim here is to make
>my existing application(s) even more modular so that
>functionality can be added and extended in a simple,
>common way. This principle has already provided
>excellent benefits in the past.

A good book on Event management is David Luckham's
"The Power of Events: An Introduction to Complex Event
Processing in Distributed Enterprise Systems."

I think the higher level stuff revolves around the
event pattern language (also known as the trigger
language)- how one defines an event and the mechanisms
for detecting events.  

I am developing a WS-BPEL processor. Not many people
know about WS-BPEL. WS-BPEL is a language that has
event handlers that are based on time and web service
calls. To correctly implement the specification, I
also have to deal with triggering activities based on
patterns in a message or attributes of the SOAP
header.

My experiences so far....

For time based stuff, Twisted is pretty strong (in
opposition - Stackless is weak). I use TaskLoopCall
help implement time and alarm triggered stuff.  

For web services, I have been writing classes that
represent end-point-references based on the WSA
standard. For instance, a tasklet in my WS-BPEL
processor tells (or subscribes to) my "event manager"
that it is interested in a particular EPR (say a SOAP
message with a "buy" operation). In turn, a scheduler
suspends the tasklet. When my Twisted based Request
Handler receives a http request, as a part of the
response, the handler creates an EPR representing the
client end and sends it to the event manager.  If the
"event manager" can match the incoming EPR, it will
ask the scheduler to wake up the associated tasklet.

So far, this works fairly well. For 80% of stuff,
Twisted and Stackless work really well together. My
EPR classes are still pretty rough. However in a month
or two, they should be in better shape. I am not sure
if anyone is really interested but I would be more
than happy to put it out there.

Cheers,
Andrew




__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From twisted-python at 2xlp.com  Fri Apr 13 12:42:54 2007
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Fri, 13 Apr 2007 14:42:54 -0400
Subject: [Twisted-Python] confusion with general web serving
Message-ID: <1D7106E5-BA4C-4603-A25C-2D22A3A93223@2xlp.com>

i'm missing a key piece of connectivity here:

i'm building a twisted daemon to serve files.  right now it will  
serve off a local structure, in the future it will do that + handle  
proxying to s3.

I stripped out all the app specific code below.  my issue is that i  
can't figure out how to display a file on the system for a url, short  
of slurping it

i thought static.File would have soemthing to do with it, but I can't  
figure out how to get it into the http.Request.process routine.

suggestions ?

----------------------------------------------------

class UserphotoRequestHandler(http.Request):
	re_userphoto= re.compile("""^\w{32}(?:_[smlt])?.jpg$""")
	def process(self):
		if self.path == '/favicon.ico':
			self.finish()
			return

		if not self.re_userphoto.findall( self.path ):
			return return_notFound()

		myFilname= self.db_lookup():
		if not myFilname:
			return return_notFound()

		# how do i render myFilename ?				
		self.finish()

	def return_notFound( self ):
		self.setResponseCode(http.NOT_FOUND)
		self.write("invalid request.")
		self.finish()

class UserphotoHttp(http.HTTPChannel):
	requestFactory = UserphotoRequestHandler

class UserphotoHttpFactory(http.HTTPFactory):
	protocol= UserphotoHttp

if __name__ == "__main__":
	from twisted.internet import reactor
	reactor.listenTCP(7087, UserphotoHttpFactory())
	reactor.run( )



From grywacz at gmail.com  Fri Apr 13 13:52:02 2007
From: grywacz at gmail.com (Karol Nowak)
Date: Fri, 13 Apr 2007 21:52:02 +0200
Subject: [Twisted-Python] Jabber support in Twisted Words
Message-ID: <65a759e00704131252i5736f55bxd802a6ee5c6de8e0@mail.gmail.com>

Hi,

I'm looking for a Python XMPP library for a new project that I'm writing and
I have to questions regarding Twisted Words:

 * How XMPP compliant are its jabber components (anywhere near 100% of the
base specification?)?
 * Which version of Python is required to run Twisted Words?

Thanks in advance for any help. :)

-- 
regards
Karol 'grzywacz' Nowak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070413/2c2cabc4/attachment.html>

From exarkun at twistedmatrix.com  Sat Apr 14 22:05:01 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 15 Apr 2007 04:05:01 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1176609901.89.996810443@twistedmatrix.com

Bug summary
______________________
Summary for 2007-04-08 through 2007-04-15
Bugs opened: 16    Bugs closed: 5  Total open bugs: 902 (+11)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +8  |Highest:  -1          |Core:      +4          
|Enhancement:  +2  |High:     +2          |Foolscap:  +1          
|Task:         +2  |Normal:  +10          |Trial:     +3          
                   |Low:      +1          |Web:       +2          
                                          |Web2:      +1          
                                          |Website:   +1          


New / Reopened Bugs
______________________
                    ===== High =====
[#2554] strange connect timeouts (opened by gudron)
    task            web        http://twistedmatrix.com/trac/ticket/2554

                    ===== Normal =====
[#2556] cfreactor breaks twisted.trial (opened by bromine)
    defect          core       http://twistedmatrix.com/trac/ticket/2556

[#2557] links on front page obscure one another (opened by zooko)
    defect          website    http://twistedmatrix.com/trac/ticket/2557

[#2558] noise about unclean reactor makes it hard for me to read trial output (opened by zooko)
    defect          trial      http://twistedmatrix.com/trac/ticket/2558

[#2559] trial runs unit tests in an arbitrary order (opened by zooko) (CLOSED, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/2559

[#2560] tests which time out don't get their tearDown() methods called (opened by zooko) (CLOSED, invalid)
    defect          trial      http://twistedmatrix.com/trac/ticket/2560

[#2561] .py/.pyc mismatch causes internal trial error (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2561

[#2562] No test coverage for amp unhandled client-side failures (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2562

[#2563] __file__ is relative in test module when invoked via "trial foo/bar.py" (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2563

[#2564] 'maximum recursion depth exceeded' when closing loopback transports (opened by j1m)
    defect          core       http://twistedmatrix.com/trac/ticket/2564

[#2565] Exception occurring in Foolscap CopyableSlicer. (opened by kgi)
    defect          foolscap   http://twistedmatrix.com/trac/ticket/2565

[#2566] Request for listenUDPOnce (or similar) (opened by Peaker) (CLOSED, wontfix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2566

[#2567] twisted.python.log.err does not have useful docstring (opened by konrads)
    defect          core       http://twistedmatrix.com/trac/ticket/2567

[#2568] trial cleanThreads breaks run until-failure (opened by therve) (CLOSED, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/2568

[#2570] mechanism for specifying a cred checker for twistd plugins to use (opened by glyph)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2570

                    ===== Low =====
[#2569] web2 has no examples for HTTP client (opened by konrads)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2569



Closed Bugs
______________________
                    ===== Highest =====
[#2356] twisted/test/test_banana.py uses StringIO incorrectly (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2356

                    ===== Normal =====
[#2560] tests which time out don't get their tearDown() methods called (opened by zooko, closed by therve, invalid)
    defect          trial      http://twistedmatrix.com/trac/ticket/2560

[#2566] Request for listenUDPOnce (or similar) (opened by Peaker, closed by exarkun, wontfix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2566

[#2568] trial cleanThreads breaks run until-failure (opened by therve, closed by therve, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/2568

[#2559] trial runs unit tests in an arbitrary order (opened by zooko, closed by therve, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/2559





From p.mayers at imperial.ac.uk  Sun Apr 15 05:45:14 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 15 Apr 2007 12:45:14 +0100
Subject: [Twisted-Python] confusion with general web serving
In-Reply-To: <1D7106E5-BA4C-4603-A25C-2D22A3A93223@2xlp.com>
References: <1D7106E5-BA4C-4603-A25C-2D22A3A93223@2xlp.com>
Message-ID: <4622104A.3020206@imperial.ac.uk>

Jonathan Vanasco wrote:
> i'm missing a key piece of connectivity here:
> 
> i'm building a twisted daemon to serve files.  right now it will serve 
> off a local structure, in the future it will do that + handle proxying 
> to s3.
> 
> I stripped out all the app specific code below.  my issue is that i 
> can't figure out how to display a file on the system for a url, short of 
> slurping it
> 
> i thought static.File would have soemthing to do with it, but I can't 
> figure out how to get it into the http.Request.process routine.

You're asking on the wrong list really - you should ask on twisted-web

Your problem is that you're trying to implement the HTTP protocol. Don't 
do that, it's not needed. You need to hook the protocol up to a "site" 
into which you can put components.

This is well documented. See:

http://twistedmatrix.com/projects/web/documentation/howto/using-twistedweb.html#auto2



From twisted-python at 2xlp.com  Mon Apr 16 17:05:49 2007
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Mon, 16 Apr 2007 19:05:49 -0400
Subject: [Twisted-Python] confusion with general web serving
In-Reply-To: <4622104A.3020206@imperial.ac.uk>
References: <1D7106E5-BA4C-4603-A25C-2D22A3A93223@2xlp.com>
	<4622104A.3020206@imperial.ac.uk>
Message-ID: <239A602C-AA4C-49CE-AE28-BB1EBC118842@2xlp.com>


On Apr 15, 2007, at 7:45 AM, Phil Mayers wrote:

> Jonathan Vanasco wrote:
>> i'm missing a key piece of connectivity here:
>> i'm building a twisted daemon to serve files.  right now it will  
>> serve off a local structure, in the future it will do that +  
>> handle proxying to s3.
>> I stripped out all the app specific code below.  my issue is that  
>> i can't figure out how to display a file on the system for a url,  
>> short of slurping it
>> i thought static.File would have soemthing to do with it, but I  
>> can't figure out how to get it into the http.Request.process routine.
>
> You're asking on the wrong list really - you should ask on twisted-web
>
> Your problem is that you're trying to implement the HTTP protocol.  
> Don't do that, it's not needed. You need to hook the protocol up to  
> a "site" into which you can put components.
>
> This is well documented. See:
>
> http://twistedmatrix.com/projects/web/documentation/howto/using- 
> twistedweb.html#auto2


Thanks, I''ll check out the other list.

I hadn't read that howto -- just the oreilley book and the overall  
design of the daemn seemed more inline with using the protocol ( as  
I'll mixing up proxy , static, and dynamic files ) than the web  
examples in the book.



// Jonathan Vanasco

| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
| SyndiClick.com
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      FindMeOn.com - The cure for Multiple Web Personality Disorder
|      Web Identity Management and 3D Social Networking
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -
|      RoadSound.com - Tools For Bands, Stuff For Fans
|      Collaborative Online Management And Syndication Tools
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
- - - - - - - - - - - - - - - - - - -





From amcouper at gmail.com  Tue Apr 17 09:56:15 2007
From: amcouper at gmail.com (Alex Couper)
Date: Tue, 17 Apr 2007 15:56:15 +0000
Subject: [Twisted-Python] SSL and Perspective broker
In-Reply-To: <a8fa98110704170843y3599fc54k46939ce10555f147@mail.gmail.com>
References: <a8fa98110704170843y3599fc54k46939ce10555f147@mail.gmail.com>
Message-ID: <a8fa98110704170856h6bff84c4se21eed4dd25405ac@mail.gmail.com>

Attached are three files: a server, a client and a ssl certificate

Thanks to twisteds remote calls, I can successfully call functions on the
server from the client (or send objects if I need to).
Fantastic

What I can't seem to do, is get the SSL to secure the server from a
non-authorised client (one that has access to stunnel.pem). So that if the
client does not have the correct certificate it cannot connect to the
server.

What am I doing wrong?

I have adapted some code found
here<http://www.lothar.com/tech/papers/PyCon-2003/pb-pycon/pb.html>for
this example.

Alex Couper
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070417/7478c4aa/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pb-server1.py
Type: text/x-python
Size: 1105 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070417/7478c4aa/attachment-0004.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pb-client1.py
Type: text/x-python
Size: 2059 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070417/7478c4aa/attachment-0005.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: stunnel.pem
Type: application/octet-stream
Size: 1661 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070417/7478c4aa/attachment-0002.obj>

From zooko at zooko.com  Tue Apr 17 10:22:09 2007
From: zooko at zooko.com (zooko at zooko.com)
Date: Tue, 17 Apr 2007 10:22:09 -0600
Subject: [Twisted-Python] epoll reactor problems 
In-Reply-To: <20070412010013.GB6345@steerpike.home.puzzling.org> 
References: <022301c77c0e$436446a0$ca2cd3e0$@com>
	<20070411102458.f1vi30h4d2jkgsgc@wasabox.wasabout.net>
	<025001c77c18$3906e140$ab14a3c0$@com>
	<20070411114259.enugoirnp6qsc4ws@wasabox.wasabout.net>
	<026a01c77c22$63141020$293c3060$@com>
	<20070411134711.8coqb2m00ihw8g8o@wasabox.wasabout.net>
	<00c801c77c68$8a13e0b0$9e3ba210$@com>
	<20070412010013.GB6345@steerpike.home.puzzling.org>
Message-ID: <20070417162209.3E6B775C41@yumyum.zooko.com>


> It would be nice to know where in the code it is spending all that time.
> 
> I would consider installing the debug symbols for python, and getting a C and
> python backtrace with gdb.

oprofile is also an excellent tool, and very little disruptive to the behavior
of your production server.

Regards,

Zooko




From amcouper at gmail.com  Wed Apr 18 10:04:24 2007
From: amcouper at gmail.com (Alex Couper)
Date: Wed, 18 Apr 2007 16:04:24 +0000
Subject: [Twisted-Python] SSL and Perspective Broker - 2nd attempt
Message-ID: <a8fa98110704180904v71eccc69x7642b950a9ec692a@mail.gmail.com>

##Sorry about that, not sure why the first one didn't attach the message:##

Attached are three files: a server, a client and a ssl certificate

Thanks to twisteds remote calls, I can successfully call functions on the
server from the client (or send objects if I need to).
Fantastic

What I can't seem to do, is get the SSL to secure the server from a
non-authorised client (one that has access to stunnel.pem). So that if the
client does not have the correct certificate it cannot connect to the
server.

What am I doing wrong?

I have adapted some code found
here<http://www.lothar.com/tech/papers/PyCon-2003/pb-pycon/pb.html>for
this example.

Alex Couper
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070418/0f2fc90c/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pb-client1.py
Type: text/x-python
Size: 2059 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070418/0f2fc90c/attachment-0004.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pb-server1.py
Type: text/x-python
Size: 1105 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070418/0f2fc90c/attachment-0005.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: stunnel.pem
Type: application/octet-stream
Size: 1661 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070418/0f2fc90c/attachment-0002.obj>

From amcouper at gmail.com  Wed Apr 18 10:08:33 2007
From: amcouper at gmail.com (Alex Couper)
Date: Wed, 18 Apr 2007 16:08:33 +0000
Subject: [Twisted-Python] SSL and Perspective Broker - 3rd attempt
Message-ID: <a8fa98110704180908p48f4d9edh63761f4f80d339cd@mail.gmail.com>

##Sorry about that, I had some rich text formatting in the first two messages:##

Attached are three files: a server, a client and a ssl certificate

Thanks to twisteds remote calls, I can successfully call functions on
the server from the client (or send objects if I need to).
Fantastic

  What I can't seem to do, is get the SSL to secure the server from a
non-authorised client (one that has access to stunnel.pem). So that if
the client does not have the correct certificate it cannot connect to
the server.

What am I doing wrong?

I have adapted some code found here for this example:
http://www.lothar.com/tech/papers/PyCon-2003/pb-pycon/pb.html#auto3

Alex Couper
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pb-client1.py
Type: text/x-python
Size: 2059 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070418/899319f6/attachment-0004.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pb-server1.py
Type: text/x-python
Size: 1105 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070418/899319f6/attachment-0005.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: stunnel.pem
Type: application/octet-stream
Size: 1661 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070418/899319f6/attachment-0002.obj>

From mcfletch at vrplumber.com  Wed Apr 18 11:13:58 2007
From: mcfletch at vrplumber.com (Mike C. Fletcher)
Date: Wed, 18 Apr 2007 13:13:58 -0400
Subject: [Twisted-Python] twisted pysnmp status
In-Reply-To: <1175494023.7824.17.camel@localhost>
References: <460B2722.7020900@BrendanSimon.com>	<460C1652.1040504@vrplumber.com>
	<1175228562.7273.30.camel@localhost>	<460D4171.1090202@vrplumber.com>
	<1175494023.7824.17.camel@localhost>
Message-ID: <462651D6.3060702@vrplumber.com>

Justin Warren wrote:
> On Fri, 2007-03-30 at 12:57 -0400, Mike C. Fletcher wrote:
>   
>> Justin Warren wrote:
>>
>>     
...
>> Anyway, I'll see if there's any interest from the customer in trying out 
>> libsnmp with the code-base.  That would let me take company time to work 
>> on integrating it into TwistedSNMP.  They almost certainly don't care 
>> enough to have it do v3 operations, but raw speed on v2 operations is 
>> something they may care about enough to pay for a few hours of work.
>>     
>
> Cool. Let me know how you get on.
>
>   
No one jumped all over the idea.  Probably not going to happen as a result.

Sorry about that,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From daedalus at eigenmagic.com  Wed Apr 18 17:24:11 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Thu, 19 Apr 2007 09:24:11 +1000
Subject: [Twisted-Python] twisted pysnmp status
In-Reply-To: <462651D6.3060702@vrplumber.com>
References: <460B2722.7020900@BrendanSimon.com>
	<460C1652.1040504@vrplumber.com> <1175228562.7273.30.camel@localhost>
	<460D4171.1090202@vrplumber.com> <1175494023.7824.17.camel@localhost>
	<462651D6.3060702@vrplumber.com>
Message-ID: <1176938651.7841.4.camel@localhost>

On Wed, 2007-04-18 at 13:13 -0400, Mike C. Fletcher wrote:
> Justin Warren wrote:
> > On Fri, 2007-03-30 at 12:57 -0400, Mike C. Fletcher wrote:
> >   
> >> Justin Warren wrote:
> >>
> >>     
> ...
> >> Anyway, I'll see if there's any interest from the customer in trying out 
> >> libsnmp with the code-base.  That would let me take company time to work 
> >> on integrating it into TwistedSNMP.  They almost certainly don't care 
> >> enough to have it do v3 operations, but raw speed on v2 operations is 
> >> something they may care about enough to pay for a few hours of work.
> >>     
> >
> > Cool. Let me know how you get on.
> >
> >   
> No one jumped all over the idea.  Probably not going to happen as a result.
> 
> Sorry about that,
> Mike

Hey, no problem. It'll probably happen when I need to add some new
features into our code, or someone else will have a pressing need.

-- 
Justin Warren <daedalus at eigenmagic.com>



From devPyPlTw at verizon.net  Wed Apr 18 19:41:36 2007
From: devPyPlTw at verizon.net (Ed Manlove)
Date: Wed, 18 Apr 2007 20:41:36 -0500
Subject: [Twisted-Python] Reactor hangs on second call to reactor.run
Message-ID: <4626C8D0.7020204@verizon.net>

I am creating a Plone product which uses Twisted's nntp module to fetch 
newsgroup postings and display them within my Plone site.  Within a 
Plone template I call the Plone External Method, XXXnewsreader. The 
first time I view the page containing this external method it runs fine 
but the second time it hangs.

I've run the python debugger and it appears to be running an infinite 
loop within the function mainloop within the class PosixReactorBase.

Can anyone share some ideas about what I may be doing wrong here or why 
the reactor appears to be stuck in the mainlop func?  Thanks for any 
assistance in advance.

I am running under Windows XP using Twisted 2.5.0 and using Plone 2.1.3, 
Zope 2.8.7-final, python 2.3.5.

Ed



def XXXnewsreader(self):
     print self.REQUEST.form
     n = XXXNewsGroup('localhost','local.programming')
     n.run_XXXNewsGroup()
     return n.result


class XXXDefaultNewsGroupPageProcedure(nntp.NNTPClient):

     def connectionMade(self):
         #pdb.set_trace()
         nntp.NNTPClient.connectionMade(self)
         self.fetchGroup(self.factory.newsgroup)

     def gotGroup(self, groupInfo):
         estNumMsgs, first, last, groupName, type, status = groupInfo
         first = int(first)
         last = int(last)
         start = max(first, last-self.factory.headerCount);
         self.headersToFetch = range(start, last+1)
         self.headerCount = len(self.headersToFetch)
         self.fetchNextHeader()

     def fetchNextHeader(self):
         if self.headersToFetch:
             nextHeaderId = self.headersToFetch.pop(0)
             print "Fetching header %i of %i..." % (
                 self.headerCount-len(self.headersToFetch),
                 self.headerCount),
             self.fetchHead(nextHeaderId)
         else:
             self.quit()
             self.factory.deferred.callback(self.factory.headers)

     def gotHead(self, header):
         print "OK"
         self.factory.handleHeader(header)
         self.fetchNextHeader()

     def getHeadFailed(self, errorMessage):
         print errorMessage
         self.fetchNextHeader()

     def getGroupFailed(self, errorMessage):
         self.factory.defered.errback(Exception(errorMessage))
         self.quit()
         self.transport.loseConnection()

     def connectionLost(self, error):
         if not self.factory.deferred.called:
             self.factory.deferred.errback(error)

class XXXDefaultNewsGroupPageFactory(protocol.ClientFactory):
     protocol = XXXDefaultNewsGroupPageProcedure

     def __init__(self, deferred, newsgroup, headerCount=5):
         self.newsgroup = newsgroup
         self.headerCount = headerCount
         self.headers = []
         self.deferred = deferred  # defer.Deferred()

     def handleHeader(self, headerData):
         header = HeaderParser(Message).parsestr(headerData, True);
         self.headers.append(header)
         temail = parseaddr(header['from'])
         realName, emailAddress = temail

class XXXNewsGroup:

     def __init__(self, nntpserver, newsgroup):
         self.server = nntpserver
         self.newsgroup = newsgroup
         self.deferred = defer.Deferred()
         self.result = ''

     def run_XXXNewsGroup(self):
         #pdb.set_trace()
         factory = XXXDefaultNewsGroupPageFactory(self.deferred, 
self.newsgroup)
         self.deferred.addCallback(
             self._toHTMLsuccess).addErrback(
             self.handleError)
         self.deferred.addCallback(
             self.handleSuccess).addErrback(
             self.handleError)
         reactor.connectTCP(self.server, 119, factory)
         reactor.run(installSignalHandlers=0)
         return self.result

     def _toHTMLsuccess(self, results):
         str = '<ul>\n'

         for header in results:
             temail = parseaddr(header['from'])
             realName, emailAddress = temail

             str += '  <ul>\n'
             str += '    <li>%s</li>\n' % header['subject']
             str += '    <li>%s</li>\n' % realName
             str += '    <li>%s</li>\n' % header['date']
             str += '  </ul>\n'

         str += '</ul>\n'
         return str

     def handleSuccess(self, result):
         self.result = result
         pdb.set_trace()
         reactor.stop()

     def handleError(self, error):
         self.result = error.getErrorMessage()
         print self.result
         reactor.stop()




From exarkun at divmod.com  Wed Apr 18 18:51:10 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 18 Apr 2007 20:51:10 -0400
Subject: [Twisted-Python] Reactor hangs on second call to reactor.run
In-Reply-To: <4626C8D0.7020204@verizon.net>
Message-ID: <20070419005110.19381.1540330354.divmod.quotient.2853@ohm>

On Wed, 18 Apr 2007 20:41:36 -0500, Ed Manlove <devpypltw at verizon.net> wrote:
>I am creating a Plone product which uses Twisted's nntp module to fetch 
>newsgroup postings and display them within my Plone site.  Within a Plone 
>template I call the Plone External Method, XXXnewsreader. The first time I 
>view the page containing this external method it runs fine but the second 
>time it hangs.
>
>I've run the python debugger and it appears to be running an infinite loop 
>within the function mainloop within the class PosixReactorBase.
>
>Can anyone share some ideas about what I may be doing wrong here or why the 
>reactor appears to be stuck in the mainlop func?  Thanks for any assistance 
>in advance.
>
>I am running under Windows XP using Twisted 2.5.0 and using Plone 2.1.3, 
>Zope 2.8.7-final, python 2.3.5.

Starting reactors multiple times is not currently a supported feature.

Jean-Paul



From devPyPlTw at verizon.net  Wed Apr 18 20:19:58 2007
From: devPyPlTw at verizon.net (Ed Manlove)
Date: Wed, 18 Apr 2007 21:19:58 -0500
Subject: [Twisted-Python] Reactor hangs on second call to reactor.run
In-Reply-To: <20070419005110.19381.1540330354.divmod.quotient.2853@ohm>
References: <20070419005110.19381.1540330354.divmod.quotient.2853@ohm>
Message-ID: <4626D1CE.7000103@verizon.net>

Jean-Paul Calderone wrote:
> On Wed, 18 Apr 2007 20:41:36 -0500, Ed Manlove <devpypltw at verizon.net> 
> wrote:
>> I am creating a Plone product which uses Twisted's nntp module to 
>> fetch newsgroup postings and display them within my Plone site.  
>> Within a Plone template I call the Plone External Method, 
>> XXXnewsreader. The first time I view the page containing this external 
>> method it runs fine but the second time it hangs.
>>
>> I've run the python debugger and it appears to be running an infinite 
>> loop within the function mainloop within the class PosixReactorBase.
>>
>> Can anyone share some ideas about what I may be doing wrong here or 
>> why the reactor appears to be stuck in the mainlop func?  Thanks for 
>> any assistance in advance.
>>
>> I am running under Windows XP using Twisted 2.5.0 and using Plone 
>> 2.1.3, Zope 2.8.7-final, python 2.3.5.
> 
> Starting reactors multiple times is not currently a supported feature.
> 
> Jean-Paul
> 

But is restarting the reactor supported?  I'm sorry if I was not clear 
but after the requested data is received I call reactor.stop() and 
return back to Plone/Zope engine. If later another request is made I 
will call the reactor.run(installSignalHandlers=0).  But again this will
only be done after a call to reactor.stop and within a different 
function call.

Does this matter or is this what mean by starting the reactor multiple 
times?

Ed




From exarkun at divmod.com  Wed Apr 18 20:03:20 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 18 Apr 2007 22:03:20 -0400
Subject: [Twisted-Python] Reactor hangs on second call to reactor.run
In-Reply-To: <4626D1CE.7000103@verizon.net>
Message-ID: <20070419020320.19381.1584578935.divmod.quotient.2875@ohm>

On Wed, 18 Apr 2007 21:19:58 -0500, Ed Manlove <devpypltw at verizon.net> wrote:
> [snip]
>
>But is restarting the reactor supported?  I'm sorry if I was not clear but 
>after the requested data is received I call reactor.stop() and return back 
>to Plone/Zope engine. If later another request is made I will call the 
>reactor.run(installSignalHandlers=0).  But again this will
>only be done after a call to reactor.stop and within a different function 
>call.
>
>Does this matter or is this what mean by starting the reactor multiple 
>times?

This is indeed what I mean.

Jean-Paul



From jml at mumak.net  Thu Apr 19 23:50:32 2007
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 20 Apr 2007 15:50:32 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20027 - Merge forward so
	that we can run trial.
In-Reply-To: <E1HekgB-0007xm-00@wolfwood>
References: <E1HekgB-0007xm-00@wolfwood>
Message-ID: <d06a5cd30704192250l7170aaf4ndcbf6fcec099e6f0@mail.gmail.com>

On 4/20/07, David Reid <dreid at wolfwood.twistedmatrix.com> wrote:
> Author: dreid
> Date: Thu Apr 19 22:25:02 2007
> New Revision: 20027
>
> Added:
>    branches/endpoints-1442-2/twisted/internet/endpoints.py
>       - copied unchanged from r20025, /branches/endpoints-1442/twisted/internet/endpoints.py
>    branches/endpoints-1442-2/twisted/test/test_address.py
>       - copied unchanged from r20025, /branches/endpoints-1442/twisted/test/test_address.py
>    branches/endpoints-1442-2/twisted/test/test_endpoints.py
>       - copied unchanged from r20025, /branches/endpoints-1442/twisted/test/test_endpoints.py
> Modified:
>    branches/endpoints-1442-2/twisted/internet/address.py
>    branches/endpoints-1442-2/twisted/internet/interfaces.py
>
> Log:
> Merge forward so that we can run trial.

What was going on to cause this?

(I guess that one of the disadvantages of merging forward is that you
see the wrong set of changes in the commit email.)

cheers,
jml



From rschroev_nospam_ml at fastmail.fm  Fri Apr 20 12:28:22 2007
From: rschroev_nospam_ml at fastmail.fm (Roel Schroeven)
Date: Fri, 20 Apr 2007 20:28:22 +0200
Subject: [Twisted-Python] UDP + TCP + Serial
Message-ID: <f0b0o6$7rm$1@sea.gmane.org>

I'm looking for a way to combine serial input with UDP (and possibly 
TCP) communication.

Currently I have a very simple quick-and-dirty script using pyserial and 
the socket module without Twisted that reads line-based data from a 
serial port and sends it out using UDP. It works very well, but 
functional and reliability requirements are growing and I'm looking for 
a better design. New functionality that we'll need is connection to a 
database, two-way network communication to control the program while 
it's running, and perhaps the ability to use encrypted connections for 
the output data.

Twisted seems nice, but apart from a few simple hello-world-style test I 
don't have any experience with it. It doesn't seem too difficult though, 
except for one thing: I can't find any concrete information on how to 
combine serial communication and network communication. What reactor do 
I need? How do I initialize it? How can I make it listen to both a 
serial port and one or more UDP and/or TCP ports? I need to do this on 
Linux, but it would be nice to have it working on Windows too.

Many thanks,
Roel

-- 
If I have been able to see further, it was only because I stood
on the shoulders of giants.  -- Isaac Newton

Roel Schroeven




From hoadley at gmail.com  Fri Apr 20 12:54:19 2007
From: hoadley at gmail.com (Rob Hoadley)
Date: Fri, 20 Apr 2007 11:54:19 -0700
Subject: [Twisted-Python] Specialized mail server
Message-ID: <9bb390e70704201154i571f32b4s77d4bad31558c87c@mail.gmail.com>

Hello,

I'm building a new specialized mail server using twisted.mail and wanted to
get some feedback from the twisted community.

Some background:

The goal of the mail server is to answer and categorize all our bounces.
This includes bounces from our outbound mail servers that never make it to a
remote server or queue timeouts (i call these conversational bounces) and
bounces via the return-path (non-conversational bounces) that made it to the
remote mailserver but get bounced after remote mailserver acceptance.

If you are familiar with non-conversational bounces you'll know that you are
not guaranteed to get a bounce email in a standard format.  It all depends
on the foreign mailserver software and policies.

To handle the variations in bounce messages, I'm going to make a bounce
server that is configurable via addition of new rules similar to the
ipchains.  Each rule is a regex and the rules will look similar to the
Mailman bounce code regex's.  These rules are stored in a db with a whole
test system written around the rules to protect against bad rule entry and
fallback points to previous rule sets.  For the purposes of the server, the
idea is to start at the top of the rule chain and work your way down.  So
really, I'm just talking about a bunch of regex's w/processing if a regex is
hit or a final action if the none of the regex's are hit.

I've already built a specialized twisted mail server with a db lookup on
incoming mail that handles some of our other email (roughly 7-10K emails per
day) so I'm pretty familiar with the way twisted.mail works.  Where I need
some help is in the area of higher-volume matters.  I anticipate this
mailserver could get between 40-80K emails per day.  ( I work for a Email
Service Provider, our bounce percentage rates are low ).

My questions are as follows:

1) I've used qmail in the past.  If you are familiar with qmail, you
configure a locals number which tells you the number of concurrent emails
qmail can process locally.  This is different from the number of smtp
connections ( I'm not so much worried about that ).  qmail just forks a new
process up to the locals number and queues up other mail.

in eomRecieved what is the best manner to safeguard that I don't knock over
the server by processing 100 emails in short succession with the regex's?

2) Are there any examples of a high volume email server that somewhat
follows my processing requirements? I've googled around and not found any
examples.  It feels like I should be looking for a queue implementation
within a twisted.mail server.  I've looked at some of the Queue classes
within the twisted.mail code and I wanted to know if this is the right
direction?

3) If you have experience using twisted.mail have you had any problems with
this volume of mail with some sort of minor/major processing on each
incoming mail.  If you've just saved to disk have you had problems with a
load of say 200-300K emails per day?

I appreciate any help or comments.

thanks

-rob
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070420/b77beaef/attachment.html>

From wthie at thiengineering.ch  Fri Apr 20 14:29:25 2007
From: wthie at thiengineering.ch (Werner Thie)
Date: Fri, 20 Apr 2007 22:29:25 +0200
Subject: [Twisted-Python] UDP + TCP + Serial
In-Reply-To: <f0b0o6$7rm$1@sea.gmane.org>
References: <f0b0o6$7rm$1@sea.gmane.org>
Message-ID: <462922A5.1030501@thiengineering.ch>

Might be that I have something useful for you - please see the attached 
zipped code. Basic idea was to have a serially connected device 
accepting commands and delivering status information connected to a 
browser via a server delivering LiveFragments.

A few problems remain open, like:
   - how does one uniquely connect only one browser capable of sendign 
commands (the SPS is a single resource)

   - are other browsers able to connect and do a status display only

Forgive me if I did did not use twisted/nevow/athenain in all aspects 
correctly, but with lots of source/doc re- and rereading I was able to 
bring it that far. If there are patterns I should avoid or correct I 
will gladly do so if pointed out to me.

Thanks, Werner


Roel Schroeven wrote:
> I'm looking for a way to combine serial input with UDP (and possibly 
> TCP) communication.
> 
> Currently I have a very simple quick-and-dirty script using pyserial and 
> the socket module without Twisted that reads line-based data from a 
> serial port and sends it out using UDP. It works very well, but 
> functional and reliability requirements are growing and I'm looking for 
> a better design. New functionality that we'll need is connection to a 
> database, two-way network communication to control the program while 
> it's running, and perhaps the ability to use encrypted connections for 
> the output data.
> 
> Twisted seems nice, but apart from a few simple hello-world-style test I 
> don't have any experience with it. It doesn't seem too difficult though, 
> except for one thing: I can't find any concrete information on how to 
> combine serial communication and network communication. What reactor do 
> I need? How do I initialize it? How can I make it listen to both a 
> serial port and one or more UDP and/or TCP ports? I need to do this on 
> Linux, but it would be nice to have it working on Windows too.
> 
> Many thanks,
> Roel
> 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: sps.zip
Type: application/x-zip-compressed
Size: 4272 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070420/713b5897/attachment-0002.bin>

From exarkun at twistedmatrix.com  Sat Apr 21 22:05:01 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 22 Apr 2007 04:05:01 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1177214701.47.1629327045@twistedmatrix.com

Bug summary
______________________
Summary for 2007-04-15 through 2007-04-22
Bugs opened: 17    Bugs closed: 3  Total open bugs: 916 (+14)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +9  |Highest:  +4          |Conch:     +1          
|Enhancement:  +4  |High:     +1          |Core:     +10          
|Task:         +1  |Normal:   +9          |Names:     +1          
                   |Lowest:   +0          |Pydoctor:  +0          
                                          |Web2:      +1          
                                          |Website:   +1          


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2574] improve twistd logging setup factoring to remove duplicate code and simplify extending it (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/2574

[#2575] There should be a way to create a LogFile instance from a full file path (opened by therve)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2575

[#2585] words examples index is missing some links (opened by therve)
    enhancement     website    http://twistedmatrix.com/trac/ticket/2585

[#2587] twisted.conch.manhole.Manhole.__init__ passes extra arguments to parent initializer (opened by exarkun)
    defect          conch      http://twistedmatrix.com/trac/ticket/2587

                    ===== High =====
[#2571] convert twistd options into structured objects for testing and manipulation (opened by glyph)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2571

                    ===== Normal =====
[#2572] twistd changes to rundir inconsistently across different platforms (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2572

[#2573] _twistd_unix.py and _twistw.py inconsistent in default logfile name handling (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2573

[#2576] a better message in place of "no epytext found"? (opened by kumar303) (CLOSED, fixed)
    enhancement     pydoctor   http://twistedmatrix.com/trac/ticket/2576

[#2578] Low fidelity of twisted.protocol.loopback transports (opened by j1m)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2578

[#2579] Race condition with connector.stopConnecting (opened by arkanes)
    defect          core       http://twistedmatrix.com/trac/ticket/2579

[#2580] twisted.web2.stream infinite loop (opened by gthomas)
    defect          web2       http://twistedmatrix.com/trac/ticket/2580

[#2581] Unhandled CannotListenError in DNS query (opened by p1mrx)
    defect          names      http://twistedmatrix.com/trac/ticket/2581

[#2582] Documentation "deferredindepth.html" incorrect output (opened by jaimecham)
    defect          core       http://twistedmatrix.com/trac/ticket/2582

[#2583] Documentation "deferredindepth" illustrative diagrams (opened by jaimecham)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2583

[#2584] Possible intermittent failure in twisted.test.test_modules (opened by jml)
    defect          core       http://twistedmatrix.com/trac/ticket/2584

[#2586] twisted.python.logfile.LogFile's defaultMode parameter is undocumented, untested, insecure (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2586

                    ===== Lowest =====
[#2577] "twistd stop" plugin (opened by itamarst) (CLOSED, duplicate)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2577



Closed Bugs
______________________
                    ===== Normal =====
[#1122] fix for gtk2reacton warnings (opened by libber, closed by itamarst, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1122

[#2576] a better message in place of "no epytext found"? (opened by kumar303, closed by mwh, fixed)
    enhancement     pydoctor   http://twistedmatrix.com/trac/ticket/2576

                    ===== Lowest =====
[#2577] "twistd stop" plugin (opened by itamarst, closed by glyph, duplicate)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2577





From paulswartz at gmail.com  Sun Apr 22 18:31:07 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Sun, 22 Apr 2007 20:31:07 -0400
Subject: [Twisted-Python] WANTED: Conch use-cases!
Message-ID: <324cfb540704221731id58382br13df80c82199042e@mail.gmail.com>

Hi everyone!  It's z3p, the prodigal Conch developer.  As part of
Google's Summer of Code, I'll be fixing bugs, making the code nicer,
and adding some functionality.  The big piece of functionality I'll be
adding is a connectSSH() function (see
http://twistedmatrix.com/trac/ticket/1975).  Unfortunately, I haven't
been really using Conch for a while, and I'm not sure how actual
people are using it.
If you're using Conch (or another SSH library, like Paramiko), I'd
really appreciate it if you could add something to the bug tracker
about how you're using it and what you'd like out of an API, so that I
can best suit actual uses.

Thanks!
-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From jml at mumak.net  Sun Apr 22 18:40:43 2007
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 23 Apr 2007 10:40:43 +1000
Subject: [Twisted-Python] WANTED: Conch use-cases!
In-Reply-To: <324cfb540704221731id58382br13df80c82199042e@mail.gmail.com>
References: <324cfb540704221731id58382br13df80c82199042e@mail.gmail.com>
Message-ID: <d06a5cd30704221740m6277e071r28c61a5d9453b38b@mail.gmail.com>

On 4/23/07, Paul Swartz <paulswartz at gmail.com> wrote:
> Hi everyone!  It's z3p, the prodigal Conch developer.  As part of
> Google's Summer of Code, I'll be fixing bugs, making the code nicer,
> and adding some functionality.  The big piece of functionality I'll be
> adding is a connectSSH() function (see
> http://twistedmatrix.com/trac/ticket/1975).  Unfortunately, I haven't
> been really using Conch for a while, and I'm not sure how actual
> people are using it.
> If you're using Conch (or another SSH library, like Paramiko), I'd
> really appreciate it if you could add something to the bug tracker
> about how you're using it and what you'd like out of an API, so that I
> can best suit actual uses.

Hey Paul,

I'm very, very glad to hear that you'll be cleaning Conch up.

I have a couple of use-cases that I'll be posting to the bug tracker a
little bit later.

However, I just wanted to mention that one of my main desires for
Conch is an improved test suite. (You've probably heard me being a
little rude about this before). I would love to be able to help with
making the tests more unit-y and less resource-y, so please ping me as
often as you need, and let me (and the rest of the community) know of
any subtasks that can be handed off.

cheers,
jml



From jml at mumak.net  Sun Apr 22 19:55:02 2007
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 23 Apr 2007 11:55:02 +1000
Subject: [Twisted-Python] WANTED: Conch use-cases!
In-Reply-To: <d06a5cd30704221740m6277e071r28c61a5d9453b38b@mail.gmail.com>
References: <324cfb540704221731id58382br13df80c82199042e@mail.gmail.com>
	<d06a5cd30704221740m6277e071r28c61a5d9453b38b@mail.gmail.com>
Message-ID: <d06a5cd30704221855v4d444ab9x2f5e519b6cdacca8@mail.gmail.com>

On 4/23/07, Jonathan Lange <jml at mumak.net> wrote:
> On 4/23/07, Paul Swartz <paulswartz at gmail.com> wrote:
> > If you're using Conch (or another SSH library, like Paramiko), I'd
> > really appreciate it if you could add something to the bug tracker
> > about how you're using it and what you'd like out of an API, so that I
> > can best suit actual uses.
>
> I have a couple of use-cases that I'll be posting to the bug tracker a
> little bit later.
>

OK, I've filed a bunch of use-cases as tickets.

Because these describe things that we are already doing successfully,
they aren't really defects, enhancements or tasks, and so don't
_really_ belong on Trac. You should probably find some other way of
organising your use-cases (a wiki page perhaps).

I've thus prefixed all of my tickets with '[USE CASE]' and given them
all the keyword 'usecase', to indicate their unusual natures.

cheers,
jml



From andrew-twisted at puzzling.org  Sun Apr 22 20:47:11 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 23 Apr 2007 12:47:11 +1000
Subject: [Twisted-Python] WANTED: Conch use-cases!
In-Reply-To: <d06a5cd30704221855v4d444ab9x2f5e519b6cdacca8@mail.gmail.com>
References: <324cfb540704221731id58382br13df80c82199042e@mail.gmail.com>
	<d06a5cd30704221740m6277e071r28c61a5d9453b38b@mail.gmail.com>
	<d06a5cd30704221855v4d444ab9x2f5e519b6cdacca8@mail.gmail.com>
Message-ID: <20070423024711.GA11436@steerpike.home.puzzling.org>

Jonathan Lange wrote:
> On 4/23/07, Jonathan Lange <jml at mumak.net> wrote:
[...]
> 
> OK, I've filed a bunch of use-cases as tickets.
> 
> Because these describe things that we are already doing successfully,
> they aren't really defects, enhancements or tasks, and so don't
> _really_ belong on Trac. You should probably find some other way of
> organising your use-cases (a wiki page perhaps).

A wiki page sounds sensible to me, too.

-Andrew.




From p.mayers at imperial.ac.uk  Mon Apr 23 03:58:27 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 23 Apr 2007 10:58:27 +0100
Subject: [Twisted-Python] WANTED: Conch use-cases!
In-Reply-To: <d06a5cd30704221740m6277e071r28c61a5d9453b38b@mail.gmail.com>
References: <324cfb540704221731id58382br13df80c82199042e@mail.gmail.com>
	<d06a5cd30704221740m6277e071r28c61a5d9453b38b@mail.gmail.com>
Message-ID: <462C8343.6020405@imperial.ac.uk>

> Hey Paul,
> 
> I'm very, very glad to hear that you'll be cleaning Conch up.

Likewise.

My use-case is connecting to various embedded systems (primarily routers 
such as Cisco/Extreme/Juniper, firewalls such at Netscreen and layer2 
switches such as Cisco/HP/3Com) and either running SCP, SFTP or various 
CLI commands. The latter is basically a better Expect.

Compatibility with the (many) buggy SSH servers out there.

http://twistedmatrix.com/trac/ticket/1902

...is one issue we suffer. I would *adore* it if the various bug 
workarounds present in clients (e.g. Putty) could be present and 
unit-tested in Conch.

You may also be interested in some basic SCP support I coded, and 
tail-over-SFTP support:

http://twistedmatrix.com/trac/ticket/2594

Good luck!



From andrewfr_ice at yahoo.com  Tue Apr 24 13:49:47 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Tue, 24 Apr 2007 12:49:47 -0700 (PDT)
Subject: [Twisted-Python] Advice on Debugging Stackless/Twisted Problem
	involving Deferreds
Message-ID: <453821.33843.qm@web34206.mail.mud.yahoo.com>

Hello Colleagues:

I am try to debug a problem involving Stackless and
Twisted (once again). I don't see why Twisted and
Stackless cannot inter-operate. I enclosed an example
to illustrate the problem. I use Twisted 2.5 and
Stackless 2.5 3.1b3 on Windows XP.

The goal of the enclosed programme is to suspend and
resume Stackless tasklets making network calls without
blocking the entire Stackless Python application.
Under the hood, Twisted is used. The problem is that
programme prematurely terminates - the deferred
connected to client.getPage() is never called. 

I want to figure out exactly what is going on (in the
past I have gone on wild goose chases involving
threads and reactors).

Using print statements and pdb (I find it rough using
pdb with Stackless Python), the Twisted symptoms are:

1) ConnectTCP is successfully called. However the
actual call is never made (i.e., I monitored my Apache
web server's access.log). As a side note, I haven't
quite figured out how the HTTPClientFactory interacts
with the Twisted reactor. 
 
2) The deferred is never called.

3) Twisted seems to stop in MainLoop(), I am not sure
where.

4) No errors are generated.

The Stackless symptoms are:

A) The programme terminates, implying all the tasklets
except the main tasklet are blocked (or disappeared).

B) (Connected to A) All the channels are waiting for
writers (I look at the channel.__reduce__()).

Any insights would help. At this point, I like to
focus my attention on the Twisted side since this is
where my knowledge is the weakest. I am still reading
Twisted code. I am trying to get Manhole running but I
am having problems with the gtk library. 

It would help greatly if it could be pointed out where
I should place set_trace()/break points and print
statements to see what is happening to the deferred
call. If someone is set up for both Twisted and
Stackless and run the example, that would be super!

On the Stackless side, what am I missing? I haven't
detected any TaskletExit exceptions being thrown. I
was thinking deadlock, but this seems unlikely. Is
there a way to conduct a post-mortem on tasklets?

Hopefully I have made a silly mistake...

Cheers,
Andrew


~~~

#!/usr/bin/env python
"""
TestProcessor.py
April 24th, 2007

The purpose of this programme is to suspend a request
handler,
make a series of calls involving deferreds, and resume
the
request handler. This test does not work.

The main tasklet makes a series of synchronous
API calls : the first is to wait for a http request.
The second
is to get a web page. The last is to send a http
reply.

Under the hood, a tasklet "the processor" suspends and
resumes
tasklets waiting for IO events.

The programme works fine for:

def execute(self):
    self.processor.getWebPage()

(the programme will just run)

and

def execute(self):
    self.processor.getHttpRequest()
    self.processor.sendHttpResponse()

(use a HTML form with method POST)

However when 

def execute(self):
    self.processor.getHttpRequest()
    self.processor.getWebPage()
    self.processor.sendHttpResponse()

combination are done, something bad happens and the
programme
ends pre-maturely

"""

from twisted.internet.defer                          
import Deferred
from twisted.python.failure                          
import Failure
from twisted.internet                                
import reactor
from twisted.web                                     
import client
from twisted.web                                     
import http
import stackless
import pdb
import time
import sys

MESSAGE = {0 : "client_response",
           1 : "receive_response",
           2 : "reply_response" }

CLIENT_RESPONSE = 0
RECEIVE_RESPONSE = 1
REPLY_RESPONSE = 2

message = """<html><head></head><body>hello
world</body></html>"""


def pump():
    while (1):
      stackless.schedule()
    
    
class Response(object):
    def __init_(self):
        return


class Request(object):
    def __init__(self):
        return
    
"""
run Twisted in its own tasklet
"""
def twistedReactor():
    reactor.run()


"""
a housekeeping data structure to hide how tasklets are
suspended and resumed. For now, we use channels. Not
sure
how easy it is to replace this with
capture/remove/insert
"""
class Activity(object):
    def __init__(self):
        self.channel = stackless.channel()
        return

    def __repr__(self):
        return str(self.channel.__reduce__())
    
    def resume(self, response):
        self.channel.send(response)
            
    def suspend(self):
        print "[suspending]"
        return self.channel.receive()
    



"""
The Twisted Web server
"""
class Server(object):
    
    """
    Twisted sends network events to the processor via
    a channel
    """
    def execute(self, port, requestChannel):
        MyRequestHandler.requestChannel =
requestChannel
        reactor.listenTCP(port, MyHttpFactory())
        return


class MyRequestHandler(http.Request):
    
    def process(self):
            
        print "request handler :",
stackless.getcurrent()    
        myChannel = stackless.channel()
        
        response = Response()
        response.type = RECEIVE_RESPONSE
        response.path = self.path
        response.channel = myChannel
        response.body = self.content
        
        """
        send information back to the processor about
the
        HTTP request. Include a private channel so the
        processor can send back a reply
        """
        MyRequestHandler.requestChannel.send(response)
        
        """
        send the reply to the client
        """
        reply = myChannel.receive()
        self.write(reply.message)
        self.finish()
        
        """
        tell the processor that request handler has
        finished
        """
        ack = Response()
        ack.type = REPLY_RESPONSE
        ack.body = None
        ack.requestId = reply.requestId
        
        MyRequestHandler.requestChannel.send(ack)
        return
        
        
class MyHttp(http.HTTPChannel):
    requestFactory = MyRequestHandler
    
    
class MyHttpFactory(http.HTTPFactory):
    protocol = MyHttp
    
    
"""
The ClientConnection represents a deferred Twisted
call
"""
class ClientConnection(object):
    
    """
    include a requestId so the processor can associate
completed
    messages with outstanding requests
    """
    def __init__(self, channel, address, requestId):
        self.address = address
        self.channel = channel
        self.requestId = requestId
        return
    
    def __handleResponse__(self, pageData):
        print "__handleResponse__ started"
        
        print "deferred tasklet :",
stackless.getcurrent()
        
        response = Response()
        response.requestId = self.requestId
        response.type = CLIENT_RESPONSE
        response.body = pageData
        
        self.channel.send(response)
        print "__handleResponse__ finished"
        return
    
    #ignore errors for now
    def __handleError__(self, failure):
        print "__handleError__"
        return
    
    def connect(self):
       
client.getPage(self.address).addCallback(self.__handleResponse__).addErrback(self.__handleError__)
    
        return


"""
The TestTasklet makes a series of calls to the
processor
"""
class TestTasklet(object):
    def __init__(self, processor):
        self.processor = processor
        return
    
    """
    note - don't care about what is returned.
    """
    def execute(self):
        try:
            """
            the processor ensures that one call must
            complete before the other starts. Besides
            they all run in the same tasklet.
            """
            self.processor.getHttpRequest("/")
           
self.processor.getWebPage('http://localhost')
            self.processor.sendHttpResponse(message)
        except  :
            print sys.exc_info()
        return


class TestProcessor(object):
    
    def __init__(self, channel):
        self.flag = True
        self.channel = channel
        self.tasklets = {}
        self.requests = {}
        self.requestId = 0
        self.serverChannel = None
        self.receiveActivity = None
        return
    
    
    """
    just return the tasklet associated with the
getHttpRequest()
    """
    def __match__(self):
        return self.receiveActivity
    
    
    def __getTaskletEntry__(self):
        tasklet = stackless.getcurrent()
        if not self.tasklets.has_key(tasklet):
            self.tasklets[tasklet] = Activity()
        return self.tasklets[tasklet]
           
           
    #associate a request with a tasklet
    #for now don't worry about set_atomic
    def __addRequest__(self, activity):
        self.requestId = self.requestId + 1
        print "[requestId " + str(self.requestId) +
"]"
        self.requests[self.requestId] = activity
        return self.requestId
           
           
    #get a request       
    def __getRequest__(self, requestId):
        print "[resuming request " + str(requestId) +
"]"
        return self.requests[requestId]
    
           
    def __removeRequest__(self, requestId):
        del self.requests[requestId]
           
           
    """
    API 
    """
    def getHttpRequest(self, path):
        print "getHttpRequest started"
        #pdb.set_trace()
        activity = self.__getTaskletEntry__()
        requestId = self.__addRequest__(activity)
        self.receiveActivity = (requestId, activity)
        result = activity.suspend()
        self.serverChannel = result.channel
        self.__removeRequest__(requestId)
        print "getHttpRequest finished"
        return result
    
    
    def getWebPage(self, address):
        print "getWebPage started"
        #pdb.set_trace()
        activity = self.__getTaskletEntry__()
        requestId = self.__addRequest__(activity)
        ClientConnection(self.channel, address,
requestId).connect()
        result = activity.suspend()
        self.__removeRequest__(requestId)
        print "getWebPage finished"
        return result
    
    
    def sendHttpResponse(self, message):
        print "sendHttpResponse started"
        activity = self.__getTaskletEntry__()
        requestId = self.__addRequest__(activity)
        request = Request()
        request.message = message
        request.requestId = requestId
        self.serverChannel.send(request)
        result = activity.suspend()
        self.__removeRequest__(requestId)
        print "sendHttpResponse finished"
        return 
    
    
    """
    Event processing 
    """
    def processEvents(self):
        while (self.flag):
            response = self.channel.receive()
            
            if response.type == RECEIVE_RESPONSE:
                """
                for now just blindly match any HTTP
request
                """
                requestId, activity = self.__match__()
                response.requestId = requestId
            
            """
            get the tasklet associated with the event
            and resume it, giving it a result in the
process
            """
            activity =
self.__getRequest__(response.requestId)
            activity.resume(response)
            
        print "finished processing"    
        return
    
try:    
    print "test starting"    
    channel = stackless.channel()
    #stackless.tasklet(pump)()
    processor = TestProcessor(channel)
    print "processor",
stackless.tasklet(processor.processEvents)()
    print "TaskTasklet",
stackless.tasklet(TestTasklet(processor).execute)()
    print "Server",
stackless.tasklet(Server().execute)(8000, channel)
    print "reactor tasklet: ",
stackless.tasklet(twistedReactor)()
except:
    print sys.exc_info()
    reactor.stop()
    
"""
should run indefinitely
"""
while (stackless.getruncount() > 1):
    stackless.schedule()

print "this is the channel count and blocked
tasklets:", channel.__reduce__()

print "dump request table"

for activityObject in processor.requests.values():
    print activityObject

print "dump RH channel"
print processor.receiveActivity






__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From exarkun at divmod.com  Tue Apr 24 15:20:33 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 24 Apr 2007 17:20:33 -0400
Subject: [Twisted-Python] Advice on Debugging Stackless/Twisted Problem
	involving Deferreds
In-Reply-To: <453821.33843.qm@web34206.mail.mud.yahoo.com>
Message-ID: <20070424212033.19381.318701034.divmod.quotient.4890@ohm>

On Tue, 24 Apr 2007 12:49:47 -0700 (PDT), Andrew Francis 
> [snip]

Could you re-send the program as an attachment?  It seems to have been
mangled fairly badly in the original email.

Jean-Paul



From jacob at internet24.de  Wed Apr 25 05:15:55 2007
From: jacob at internet24.de (Thomas Jacob)
Date: Wed, 25 Apr 2007 13:15:55 +0200
Subject: [Twisted-Python] Different logging class for .tac file run by twistd
Message-ID: <1177499755.14331.14.camel@enterprise>

I would like to replace the default logger of
twistd with my own (a version of DailyLogFile).

Now it's possible to use startLogging just like
in a stand-alone twisted app, but twistd will
still start the standard logger (twistd.log),
so now I have two different log files.

<.tac-file>
....
application = service.Application("someapp")
...
web = internet.TCPServer(1234, server.Site(..))
web.setServiceParent(application)

log.startLogging(DailyLogFile(LOG_FILE, LOG_DIR, LOG_MODE))
<end .tac-file>

Any hints how to prevent the second, default
twistd log file?




From therve at free.fr  Wed Apr 25 05:59:21 2007
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Wed, 25 Apr 2007 13:59:21 +0200
Subject: [Twisted-Python] Different logging class for .tac file run by
	twistd
In-Reply-To: <1177499755.14331.14.camel@enterprise>
References: <1177499755.14331.14.camel@enterprise>
Message-ID: <20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>

Quoting Thomas Jacob <jacob at internet24.de>:

> I would like to replace the default logger of
> twistd with my own (a version of DailyLogFile).
>
> Now it's possible to use startLogging just like
> in a stand-alone twisted app, but twistd will
> still start the standard logger (twistd.log),
> so now I have two different log files.
>
> <.tac-file>
> ....
> application = service.Application("someapp")
> ...
> web = internet.TCPServer(1234, server.Site(..))
> web.setServiceParent(application)
>
> log.startLogging(DailyLogFile(LOG_FILE, LOG_DIR, LOG_MODE))
> <end .tac-file>
>
> Any hints how to prevent the second, default
> twistd log file?


Currently, the only way I know is to do this:

from twisted.python import log
log.theLogPublisher.observers.pop(0)

Now, this is one of the thing that should be fixed for the next release 
(I hope)
with http://twistedmatrix.com/trac/ticket/638

-- 
Thomas






From rodsenra at gpr.com.br  Wed Apr 25 06:46:20 2007
From: rodsenra at gpr.com.br (Rodrigo Senra)
Date: Wed, 25 Apr 2007 09:46:20 -0300
Subject: [Twisted-Python] Re: [Stackless] Advice on Debugging
 Stackless/Twisted Problem involving Deferreds
In-Reply-To: <453821.33843.qm@web34206.mail.mud.yahoo.com>
References: <453821.33843.qm@web34206.mail.mud.yahoo.com>
Message-ID: <20070425094620.2d78e028@Fenix>


[ Andrew Francis ]:

|Hello Colleagues:
|
|I am try to debug a problem involving Stackless and
|Twisted (once again). I don't see why Twisted and
|Stackless cannot inter-operate. 

# snip 
|
|Using print statements and pdb (I find it rough using
|pdb with Stackless Python), the Twisted symptoms are:
|
|1) ConnectTCP is successfully called. However the
|actual call is never made (i.e., I monitored my Apache
|web server's access.log). As a side note, I haven't
|quite figured out how the HTTPClientFactory interacts
|with the Twisted reactor. 
|2) The deferred is never called.
|3) Twisted seems to stop in MainLoop(),
|4) No errors are generated.

Have you tried to enable defered debugging [1] ?
If might give you some clues regarding what happens
before the main loop halts.

http://twistedmatrix.com/documents/current/api/twisted.internet.defer.html#setDebugging

cheers,
Senra

http://rodrigo.senra.nom.br



From einar.twisted at norsk-esport.no  Wed Apr 25 07:26:05 2007
From: einar.twisted at norsk-esport.no (=?ISO-8859-1?Q?=22Einar_S=2E_Ids=F8=22?=)
Date: Wed, 25 Apr 2007 15:26:05 +0200
Subject: [Twisted-Python] Different logging class for .tac file run by
	twistd
In-Reply-To: <20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>
References: <1177499755.14331.14.camel@enterprise>
	<20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>
Message-ID: <462F56ED.7000006@norsk-esport.no>

Thomas Hervé wrote:
> Currently, the only way I know is to do this:
> 
> from twisted.python import log
> log.theLogPublisher.observers.pop(0)

Or equivalently, as suggested to me on this list in February:
log.removeObserver(log.theLogPublisher.observers[0])

Cheers,
Einar




From andrewfr_ice at yahoo.com  Wed Apr 25 12:37:34 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Wed, 25 Apr 2007 11:37:34 -0700 (PDT)
Subject: [Twisted-Python] Advice on Debugging Stackless/Twisted
In-Reply-To: <E1Hgkqa-0008ME-02@pyramid.twistedmatrix.com>
Message-ID: <145067.98777.qm@web34203.mail.mud.yahoo.com>

Hello Jean-Paul:

>Could you re-send the program as an attachment?  It
>seems to have been mangled fairly badly in the
>original >email.

Sorry about that. I have enclosed an attachment.
Thanks!

Cheers,
Andrew

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: TestProcessor8.py
Type: text/x-python
Size: 9934 bytes
Desc: 2447817608-TestProcessor8.py
URL: </pipermail/twisted-python/attachments/20070425/b9efeae8/attachment-0002.py>

From andrewfr_ice at yahoo.com  Wed Apr 25 12:40:04 2007
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Wed, 25 Apr 2007 11:40:04 -0700 (PDT)
Subject: [Twisted-Python] Re: [Stackless] Advice on Debugging
	Stackless/Twisted Problem involving Deferreds
In-Reply-To: <20070425094620.2d78e028@Fenix>
Message-ID: <194362.9678.qm@web34214.mail.mud.yahoo.com>

Hello Rodrigo:

--- Rodrigo Senra <rodsenra at gpr.com.br> wrote:

> Have you tried to enable defered debugging [1] ?
> If might give you some clues regarding what happens
> before the main loop halts.
> 
>
>http://twistedmatrix.com/documents/current/api/twisted.internet.defer.html#setDebugging

I didn't know about this method. Thanks! I am trying
to figure out how it is used (the documentation
implies something has to go wrong).

Cheers,
Andrew

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From jacob at internet24.de  Thu Apr 26 03:45:30 2007
From: jacob at internet24.de (Thomas Jacob)
Date: Thu, 26 Apr 2007 11:45:30 +0200
Subject: [Twisted-Python] Different logging class for .tac file run by
	twistd
In-Reply-To: <20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>
References: <1177499755.14331.14.camel@enterprise>
	<20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>
Message-ID: <1177580730.17849.9.camel@enterprise>

Thanks for the hint!

But this needs to be done after the app has already started.
And thus after the twistd default logger has already logged its first
lines.

Which probably means the default logger
will always log/rotate a bit before my custom
logger gets a chance, right?

So best use syslog as the initial logger....

On Wed, 2007-04-25 at 13:59 +0200, Thomas Hervé wrote:
> 
> Currently, the only way I know is to do this:
> 
> from twisted.python import log
> log.theLogPublisher.observers.pop(0)
> 
> Now, this is one of the thing that should be fixed for the next release 
> (I hope)
> with http://twistedmatrix.com/trac/ticket/638





From therve at free.fr  Thu Apr 26 04:30:10 2007
From: therve at free.fr (Thomas =?utf-8?b?SGVydsOp?=)
Date: Thu, 26 Apr 2007 12:30:10 +0200
Subject: [Twisted-Python] Different logging class for .tac file run by
	twistd
In-Reply-To: <1177580730.17849.9.camel@enterprise>
References: <1177499755.14331.14.camel@enterprise>
	<20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>
	<1177580730.17849.9.camel@enterprise>
Message-ID: <20070426123010.kedjnsgohizcc8g4@wasabox.wasabout.net>

Quoting Thomas Jacob <jacob at internet24.de>:

> Thanks for the hint!
>
> But this needs to be done after the app has already started.
> And thus after the twistd default logger has already logged its first
> lines.

True.

> Which probably means the default logger
> will always log/rotate a bit before my custom
> logger gets a chance, right?

Yes, but is that a problem ? In my case, the only visible things is a 
twistd.log
file next to other log files. Not really harmful.

-- 
Thomas





From jacob at internet24.de  Thu Apr 26 05:21:51 2007
From: jacob at internet24.de (Thomas Jacob)
Date: Thu, 26 Apr 2007 13:21:51 +0200
Subject: [Twisted-Python] Different logging class for .tac file run by
	twistd
In-Reply-To: <20070426123010.kedjnsgohizcc8g4@wasabox.wasabout.net>
References: <1177499755.14331.14.camel@enterprise>
	<20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>
	<1177580730.17849.9.camel@enterprise>
	<20070426123010.kedjnsgohizcc8g4@wasabox.wasabout.net>
Message-ID: <1177586511.18178.23.camel@enterprise>

No it's not a real problem, it's just that Twisted in general is very
clean, so....

> Yes, but is that a problem ? In my case, the only visible things is a 
> twistd.log
> file next to other log files. Not really harmful.





From python at blackslens.com  Thu Apr 26 09:23:43 2007
From: python at blackslens.com (Black)
Date: Thu, 26 Apr 2007 11:23:43 -0400
Subject: [Twisted-Python] qtreactor and OSX
Message-ID: <7D8D31A5-7E89-4FB6-86EE-F044C81BDC71@blackslens.com>

	
I have a program that uses QT and twisted. I've had no problem  
running it on a Linux machine, but when I moved it over to a Mac, I  
get the following error:

Traceback (most recent call last):
   File "cursor_test.py", line 8, in <module>
     from twisted.internet import qtreactor
   File "/Library/Frameworks/Python.framework/Versions/2.5/lib/ 
python2.5/site-packages/twisted/internet/qtreactor.py", line 7, in  
<module>
     from twisted.plugins.qtreactor_stub import errorMessage
ImportError: No module named qtreactor_stub


When I look in /Library/Frameworks/Python.framework/Versions/2.5/lib/ 
python2.5/site-packages/twisted/plugins, qtreactor_stub.py is indeed  
not present. Has anyone seen this before and can tell me what is  
going on here?

Any guidance would be appreciated...
Black



From exarkun at divmod.com  Thu Apr 26 09:54:46 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 26 Apr 2007 11:54:46 -0400
Subject: [Twisted-Python] qtreactor and OSX
In-Reply-To: <7D8D31A5-7E89-4FB6-86EE-F044C81BDC71@blackslens.com>
Message-ID: <20070426155446.19381.2012359656.divmod.quotient.5535@ohm>

On Thu, 26 Apr 2007 11:23:43 -0400, Black <python at blackslens.com> wrote:
>
>I have a program that uses QT and twisted. I've had no problem  running it 
>on a Linux machine, but when I moved it over to a Mac, I  get the following 
>error:
>
>Traceback (most recent call last):
>   File "cursor_test.py", line 8, in <module>
>     from twisted.internet import qtreactor
>   File "/Library/Frameworks/Python.framework/Versions/2.5/lib/ python2.5 
>/site-packages/twisted/internet/qtreactor.py", line 7, in  <module>
>     from twisted.plugins.qtreactor_stub import errorMessage
>ImportError: No module named qtreactor_stub
>
>
>When I look in /Library/Frameworks/Python.framework/Versions/2.5/lib/ 
>python2.5/site-packages/twisted/plugins, qtreactor_stub.py is indeed  not 
>present. Has anyone seen this before and can tell me what is  going on here?
>
>Any guidance would be appreciated...

This seems to be a bug in Twisted.  The module which it *should* be importing
is twisted.plugins.twisted_qtstub (which I am guessing you have).

Renaming twisted_qtstub to qtreactor_stub or changing qtreactor.py to import
the name that actually exists should fix this.

Jean-Paul



From hoadley at gmail.com  Thu Apr 26 10:53:56 2007
From: hoadley at gmail.com (Rob Hoadley)
Date: Thu, 26 Apr 2007 09:53:56 -0700
Subject: [Twisted-Python] Different logging class for .tac file run by
	twistd
In-Reply-To: <1177586511.18178.23.camel@enterprise>
References: <1177499755.14331.14.camel@enterprise>
	<20070425135921.adzn3zgn6itc4o08@wasabox.wasabout.net>
	<1177580730.17849.9.camel@enterprise>
	<20070426123010.kedjnsgohizcc8g4@wasabox.wasabout.net>
	<1177586511.18178.23.camel@enterprise>
Message-ID: <9bb390e70704260953o145d7c28n9b7b607dd2b8f26c@mail.gmail.com>

> No it's not a real problem, it's just that Twisted in general is very
> clean, so....



I've kept things as clean as I can by adding the twistd option
--logfile=same_as_LOG_DIR_LOG_FILE
using your LOG_FILE example above.  Additionally, adding the code to drop
the initial log observer and a log service.

The twistd log then logs the three or four lines and then get's dropped
after the tac code starts and hits the logobserver line.  Then, the log
defined in your tac starts up and takes over from there. It keeps the
twistd.log out of the picture.

-rob


> Yes, but is that a problem ? In my case, the only visible things is a
> > twistd.log
> > file next to other log files. Not really harmful.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070426/f472df37/attachment.html>

From rampeters at gmail.com  Thu Apr 26 11:57:09 2007
From: rampeters at gmail.com (Ram Peters)
Date: Thu, 26 Apr 2007 13:57:09 -0400
Subject: [Twisted-Python] newb: Twisted-Goodies asynch cluster and TaskQueue
Message-ID: <81b45360704261057n276e6bdicc06058ec7464d23@mail.gmail.com>

I have  several log files to parse every hour.  I am thinking of using
Twisted-Goodies asynch cluster and TaskQueue.  What I wanted to do is
assign part of the file or a single file, in the taskqueue and set
different client (node) to do the parsing.  Number of logfiles and
size
of log files may increase in the future.

My question is, are these right tool to use for this task?  Is there
any examples that uses asynch cluster and TaskQueue?

Thank You.



From general at eepatents.com  Thu Apr 26 13:26:56 2007
From: general at eepatents.com (Ed Suominen)
Date: Thu, 26 Apr 2007 15:26:56 -0400
Subject: [Twisted-Python] newb: Twisted-Goodies asynch cluster and
	TaskQueue
In-Reply-To: <81b45360704261057n276e6bdicc06058ec7464d23@mail.gmail.com>
References: <81b45360704261057n276e6bdicc06058ec7464d23@mail.gmail.com>
Message-ID: <4630FD00.1030203@eepatents.com>

Ram Peters wrote:
> I have  several log files to parse every hour.  I am thinking of
> using Twisted-Goodies asynch cluster and TaskQueue.  What I wanted to
> do is assign part of the file or a single file, in the taskqueue and
> set different client (node) to do the parsing.  Number of logfiles
> and size of log files may increase in the future.
> 
> My question is, are these right tool to use for this task?  Is there 
> any examples that uses asynch cluster and TaskQueue?

Well, I think it would be, but then I'm a bit biased, as the author!

My guess is that, unless the log files take more than a few minutes each
to parse, you'd be best off assigning the parsing of each file to its
own job. Each job goes into the queue for dispatching to the nodes as
they become available. You certainly could split the parsing of a file
into separate jobs if that makes sense, though.

To avoid having to read the file contents into memory for each job, you
might want to include a chunked-download PB referenceable object as an
argument to the job call. The node can do remote calls on the
referenceable that it receives to get the file data on a non-queued
"back channel" of sorts. (The same PB & TCP connection would be used,
but it would be independent of the task queue.)

I'm interested in seeing how others use asynCluster to distribute work
among different nodes, and would be willing to give you some help via
private email if you like. I have a chunked-download PB referenceable
that you could use, too. (It's pretty basic, just slightly modified from
what PB itself provides.)

Best regards,
Ed Suominen




From rampeters at gmail.com  Thu Apr 26 20:50:09 2007
From: rampeters at gmail.com (Ram Peters)
Date: Thu, 26 Apr 2007 22:50:09 -0400
Subject: [Twisted-Python] newb: Twisted-Goodies asynch cluster and
	TaskQueue
In-Reply-To: <4630FD00.1030203@eepatents.com>
References: <81b45360704261057n276e6bdicc06058ec7464d23@mail.gmail.com>
	<4630FD00.1030203@eepatents.com>
Message-ID: <81b45360704261950y4c7c2f56v4e5dd51b1a91382b@mail.gmail.com>

> I'm interested in seeing how others use asynCluster to distribute work
> among different nodes, and would be willing to give you some help via
> private email if you like. I have a chunked-download PB referenceable
> that you could use, too. (It's pretty basic, just slightly modified from
> what PB itself provides.)

At the moment, I think I am going to put this on a back burner.  When
I decided to implement it, I will probably ask you for help.

One more thing I wanted to ask you:

I am also thinking of using asynCluster & TaskQueue in another
project, where web server sends an python object (upon certain event
being triggered by the user), to the remote backend server. This
backend server puts the object in the queue and assigns a node to
update necessary database tables.  If I use asynCluster, then
asynCluster server would recieve the object and then I need to put
this in TaskQueue so that asysncCluster Client can retrieve it, check
certain conditions and update the appropriate database tables.

My question is, can I do this kind of stuff with asyncCluster and
TaskQueue and what issues I may have to consider?

Thank you.



From python at blackslens.com  Thu Apr 26 20:59:16 2007
From: python at blackslens.com (Black)
Date: Thu, 26 Apr 2007 22:59:16 -0400
Subject: [Twisted-Python] qtreactor and OSX
In-Reply-To: <20070426155446.19381.2012359656.divmod.quotient.5535@ohm>
References: <20070426155446.19381.2012359656.divmod.quotient.5535@ohm>
Message-ID: <AA736E68-1D0E-4603-B33F-01601E12550F@blackslens.com>


On Apr 26, 2007, at 11:54 AM, Jean-Paul Calderone wrote:

> On Thu, 26 Apr 2007 11:23:43 -0400, Black <python at blackslens.com>  
> wrote:
>>
>> I have a program that uses QT and twisted. I've had no problem   
>> running it on a Linux machine, but when I moved it over to a Mac,  
>> I  get the following error:
>>
>> Traceback (most recent call last):
>>   File "cursor_test.py", line 8, in <module>
>>     from twisted.internet import qtreactor
>>   File "/Library/Frameworks/Python.framework/Versions/2.5/lib/  
>> python2.5 /site-packages/twisted/internet/qtreactor.py", line 7,  
>> in  <module>
>>     from twisted.plugins.qtreactor_stub import errorMessage
>> ImportError: No module named qtreactor_stub
>>
>>
>> When I look in /Library/Frameworks/Python.framework/Versions/2.5/ 
>> lib/ python2.5/site-packages/twisted/plugins, qtreactor_stub.py is  
>> indeed  not present. Has anyone seen this before and can tell me  
>> what is  going on here?
>>
>> Any guidance would be appreciated...
>
> This seems to be a bug in Twisted.  The module which it *should* be  
> importing
> is twisted.plugins.twisted_qtstub (which I am guessing you have).
>
> Renaming twisted_qtstub to qtreactor_stub or changing qtreactor.py  
> to import
> the name that actually exists should fix this.
>
> Jean-Paul


Thanks. I did some poking and I didn't have twisted_qtstub either.  
I'm not sure why, but I rebuilt from source and discovered that all  
it does at this point is raise an exception to tell me that qtreactor  
is no longer included in the Twisted distribution... Alas.

However, it also points to a place to download the necessary parts -  
I'll post it again here on the theory that I'm no the only one who  
couldn't find it initially:

http://twistedmatrix.com/trac/wiki/QTReactor





From matt at zgroupplc.com  Fri Apr 27 04:51:05 2007
From: matt at zgroupplc.com (Matthew Glubb)
Date: Fri, 27 Apr 2007 11:51:05 +0100
Subject: [Twisted-Python] Load testing twistd + twisted.soap
Message-ID: <24B83043-F677-42EE-9377-F2C5CCA06DA5@zgroupplc.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi All,

I am attempting to write a simple load test for my soap web services.  
I am running the application under twistd and using trial for unit  
tests. I understand that for a real load test, I would use a tool  
like ab or http_load in a more scientific environment but I want to  
get a quick feel for how well a twisted application stands up against  
low levels of load on my dev box and I feel that there is merit in  
setting a baseline level of performance in a unit test.

I am running into problems with the following:

class SOAPTestCase(BaseTestCase):

     url = 'http://localhost:8080/'

     def setUp(self):
         self.proxy = Proxy(self.url)

     def testMutipleAPCs(self):
         """Assert that multiple APCs succeed"""
         deferred = defer.Deferred()
         for i in range(100):
             d = self.testAPCTimeout()
             d.chainDeferred(deferred)
         return deferred

     def testAPCTimeout(self):
         deferred = self.proxy.callRemote('processApc', 0,  
self._getRandomString())
         deferred.addBoth(self.APCTimeout)
         return deferred

     def APCTimeout(self, result):
         requestIdForApc, requestDataForApc, errorFlag, result = result

         self.assertEqual(result, res)
         self.assertTrue(isinstance(requestIdForApc, str))
         self.assertEqual(id, requestIdForApc)
         self.assertTrue(isinstance(requestDataForApc, str))
         self.assertEqual(data, requestDataForApc)

         self.assertTrue(isinstance(errorFlag, str))
         self.assertEqual(cp.cp_base.getErrorFlag(cp.cp_base.APC,  
err), errorFlag)

For a start, I get a lot of 'reactor left in unclean state' warnings.  
This number of twisted.internet.tcp.Client instances that this  
reports on is never usually all of them:

twisted.trial.util.DirtyReactorError: THIS WILL BECOME AN ERROR SOON!  
reactor left in unclean state, the following Selectables were left  
over:  <<class 'twisted.internet.tcp.Client'> to ('localhost', 8080)  
at 1782390> <<class 'twisted.internet.tcp.Client'> to ('localhost',  
8080) at 1782150> ...

In addition I get pending time calls still pending:

twisted.trial.util.PendingTimedCallsError: pendingTimedCalls still  
pending (consider setting twisted.internet.base.DelayedCall.debug =  
True): <DelayedCall 24636392 [24.8269200325s] called=0 cancelled=0  
Client.failIfNotConnected(TimeoutError('',))> ...

Does any twisted genius have any idea what I am doing wrong?

Regards,


Matt


m a t t h e w   g l u b b

________________________________________________________________________
Z Group PLC

Tel: +44 (0) 8700 111 173
Fax: +44 (0) 8707 051 393
Txt: +44 (0) 7800 140 877
Web: <http://www.zgroupplc.com/>

This  email  and  any  files  transmitted  with it are  confidential and
intended solely for the use of the individual or entity to whom they are
addressed.  The opinions  expressed in this mail are those of the author
and do not necessarily  represent the views of the company.  If you have
received this email in error please notify <service at zgroupplc.com>



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFGMdWcyI6MkdKPngkRAqTgAJ9I9dxz3B3EYPMfY8fY09kVqmVMdACfSqa2
wPgXzPQMX+FgKcC41oWEQA8=
=V8JT
-----END PGP SIGNATURE-----



From rschroev_nospam_ml at fastmail.fm  Fri Apr 27 09:18:22 2007
From: rschroev_nospam_ml at fastmail.fm (Roel Schroeven)
Date: Fri, 27 Apr 2007 17:18:22 +0200
Subject: [Twisted-Python] Re: UDP + TCP + Serial
In-Reply-To: <462922A5.1030501@thiengineering.ch>
References: <f0b0o6$7rm$1@sea.gmane.org> <462922A5.1030501@thiengineering.ch>
Message-ID: <f0t47u$9l3$1@sea.gmane.org>

Werner Thie schreef:
> Might be that I have something useful for you - please see the attached 
> zipped code. Basic idea was to have a serially connected device 
> accepting commands and delivering status information connected to a 
> browser via a server delivering LiveFragments.
> 
> A few problems remain open, like:
>    - how does one uniquely connect only one browser capable of sendign 
> commands (the SPS is a single resource)
> 
>    - are other browsers able to connect and do a status display only
> 
> Forgive me if I did did not use twisted/nevow/athenain in all aspects 
> correctly, but with lots of source/doc re- and rereading I was able to 
> bring it that far. If there are patterns I should avoid or correct I 
> will gladly do so if pointed out to me.

Thank you for your answer. Sorry for my late answer -- I haven't had 
much time to respond in the meantime. I will have a look at your code.

Cheers,
Roel

-- 
If I have been able to see further, it was only because I stood
on the shoulders of giants.  -- Isaac Newton

Roel Schroeven




From aryeh at bigfoot.com  Fri Apr 27 09:36:45 2007
From: aryeh at bigfoot.com (Arye)
Date: Fri, 27 Apr 2007 17:36:45 +0200
Subject: [Twisted-Python] sAsync example.
Message-ID: <6f63a0ad0704270836n15b798a6ka530a36b9c3657c4@mail.gmail.com>

Hello all,
I was able to run the "semi-functional Twisted XML-RPC Server"
example, available on http://foss.eepatents.com/sAsync/wiki/Examples
successfully.

However, I have the error message below on the server side when
changing the database from sqlite to postgres.

Any info would be greatly appreciated.

Arye.

___________________begin
C:\AH\WORK\tutorials\SAsync\OrigPG>\Python24\python.exe \Python24\scripts\twistd
.py -noy server.py
2007/04/27 16:41 Paris, Madrid [-] Log opened.
2007/04/27 16:41 Paris, Madrid [-] twistd 2.1.0
(C:\Python24\python.exe 2.4.4) starting up
2007/04/27 16:41 Paris, Madrid [-] reactor class:
twisted.internet.selectreactor.SelectReactor
2007/04/27 16:41 Paris, Madrid [-] Loading server.py...
2007/04/27 16:41 Paris, Madrid [-] Loaded.
2007/04/27 16:41 Paris, Madrid [-] twisted.web.server.Site starting on 8080
2007/04/27 16:41 Paris, Madrid [-] Starting factory
<twisted.web.server.Site instance at 0x011A7C38>
2007/04/27 16:41 Paris, Madrid [-] Traceback (most recent call last):
        Failure: psycopg2.ProgrammingError: no results to fetch

2007/04/27 16:41 Paris, Madrid [-] 127.0.0.1 - - [27/Apr/2007:14:41:52
+0000] "POST /RPC2 HTTP/1.0" 200 263 "-" "Twisted/XMLRPClib"
2007/04/27 17:00 Paris, Madrid [-] Received SIGINT, shutting down.
2007/04/27 17:00 Paris, Madrid [-] (Port 8080 Closed)
2007/04/27 17:00 Paris, Madrid [-] Stopping factory
<twisted.web.server.Site instance at 0x011A7C38>
2007/04/27 17:00 Paris, Madrid [-] Main loop terminated.
2007/04/27 17:00 Paris, Madrid [-] Server Shut Down.
___________________end



From rampeters at gmail.com  Sat Apr 28 10:21:11 2007
From: rampeters at gmail.com (Ram Peters)
Date: Sat, 28 Apr 2007 12:21:11 -0400
Subject: [Twisted-Python] Twisted-Goodies: asyncluster Getting Started
Message-ID: <81b45360704280921n75f1397axb944c664ec6fc6ae@mail.gmail.com>

Is there a readme file or an example how to setup server and client
and add jobs to it.  If someone can share a simple example, it would
be great.  I think this is a good tool.  I am a newb.  Example would
be great so the masses can hop on.

Thank you.



From exarkun at twistedmatrix.com  Sat Apr 28 22:05:02 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 29 Apr 2007 04:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1177819502.35.1973184899@twistedmatrix.com

Bug summary
______________________
Summary for 2007-04-22 through 2007-04-29
Bugs opened: 22    Bugs closed: 12  Total open bugs: 926 (+10)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +3  |Highest:  -4          |Conch:    +7           
|Enhancement:  +8  |Normal:  +15          |Core:     +0           
|Task:         -1  |Low:      -1          |Trial:    +3           
                                          |Vfs:      +1           
                                          |Web2:     +0           
                                          |Website:  -2           
                                          |Words:    +1           


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2604] SFTP VFS adapter mishandles renaming directories (opened by jml)
    defect          vfs        http://twistedmatrix.com/trac/ticket/2604

[#2606] XMPP SASL DIGEST-MD5 authentication breaks with jabberd 2.1.4 (opened by ralphm) (CLOSED, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2606

[#2609] Namespace issues with prefixes reuse in twisted.words.xish. (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2609

                    ===== Normal =====
[#2588] Quick way of telling which release a revision came under (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2588

[#2589] trial --help should warn of the dangers of --temp-directory (opened by jml)
    defect          trial      http://twistedmatrix.com/trac/ticket/2589

[#2590] [USE CASE] SFTP server (opened by jml)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2590

[#2591] [USE CASE] XML-RPC driven authentication (opened by jml)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2591

[#2592] [USE CASE] Responding to authentication events (opened by jml)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2592

[#2593] [USE CASE] Virtual file system for SFTP service (opened by jml)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2593

[#2594] Very very basic SCP support (opened by philmayers)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2594

[#2596] Questionable priority assigned to _allowedMethods in twisted.web2.resource.RenderMixin (opened by terrycojones)
    defect          web2       http://twistedmatrix.com/trac/ticket/2596

[#2597] trac: TypeError: <lambda>() got multiple values for keyword argument 'asc' (opened by slamb) (CLOSED, wontfix)
    defect          website    http://twistedmatrix.com/trac/ticket/2597

[#2598] Monkey-patching support code (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2598

[#2599] trial enhancment - rerun failures against specific revision (opened by bigdog)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2599

[#2600] dtrial - specify which machines (platforms) should be used to execute tests (opened by bigdog) (CLOSED, duplicate)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2600

[#2601] Improve plugin documentation (opened by aknuds-1)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2601

[#2602] dtrial - add -exarkun option to exeucte all of your tests on exarkuns machine (opened by bigdog) (CLOSED, wontfix)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2602

[#2603] Simple API for using the conch SFTP client (opened by jml)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2603

[#2605] stdlib unittest change breaks a trial test (opened by therve)
    defect          trial      http://twistedmatrix.com/trac/ticket/2605

[#2607] conch.checks.SSHPublicKeyDatabase calls os.seteuid/os.setegid even if it's not necessary (opened by therve)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2607

[#2608] twisted.internet.qtreactor tries to import a module which never exists (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2608

                    ===== Low =====
[#2595] sftp and ftp should share (possibly via adapter) same filesystem interface (opened by itamarst)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/2595



Closed Bugs
______________________
                    ===== Highest =====
[#2574] improve twistd logging setup factoring to remove duplicate code and simplify extending it (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2574

[#1844] StringTransport should behave more like a real transport (opened by washort, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1844

[#2585] words examples index is missing some links (opened by therve, closed by therve, fixed)
    enhancement     website    http://twistedmatrix.com/trac/ticket/2585

[#2539] Add epoll reactor to the choosing-reactor doc (opened by therve, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2539

[#2587] twisted.conch.manhole.Manhole.__init__ passes extra arguments to parent initializer (opened by exarkun, closed by exarkun, fixed)
    defect          conch      http://twistedmatrix.com/trac/ticket/2587

[#2606] XMPP SASL DIGEST-MD5 authentication breaks with jabberd 2.1.4 (opened by ralphm, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2606

[#2575] There should be a way to create a LogFile instance from a full file path (opened by therve, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2575

                    ===== Normal =====
[#2597] trac: TypeError: <lambda>() got multiple values for keyword argument 'asc' (opened by slamb, closed by exarkun, wontfix)
    defect          website    http://twistedmatrix.com/trac/ticket/2597

[#2602] dtrial - add -exarkun option to exeucte all of your tests on exarkuns machine (opened by bigdog, closed by jml, wontfix)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2602

[#2600] dtrial - specify which machines (platforms) should be used to execute tests (opened by bigdog, closed by jml, duplicate)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2600

                    ===== Low =====
[#2580] twisted.web2.stream infinite loop (opened by gthomas, closed by gthomas, duplicate)
    defect          web2       http://twistedmatrix.com/trac/ticket/2580

[#959 ] Generate documentation from lore automatically after checkins (opened by hypatia, closed by therve, duplicate)
    enhancement     website    http://twistedmatrix.com/trac/ticket/959





From exarkun at divmod.com  Sun Apr 29 07:35:50 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 29 Apr 2007 09:35:50 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
 decorator which stores all of the function and method calls
In-Reply-To: <E1Hi26e-0008Qs-00@wolfwood>
Message-ID: <20070429133550.19381.583607652.divmod.quotient.6265@ohm>

On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange <jml at wolfwood.twistedmatrix.com> wrote:
>Author: jml
>Date: Sat Apr 28 23:37:56 2007
>New Revision: 20094
>
>Modified:
>   branches/spew-decorator/twisted/python/util.py
>   branches/spew-decorator/twisted/test/test_util.py
>
>Log:
>Add a spewing decorator which stores all of the function and method calls
>within a function in a structured data object.
>

What ticket is this associated with?

Also, there is already an improved spew function in Epsilon which does nice
things like track call depth and exception propagation and call arguments.

Jean-Paul



From eprparadocs at gmail.com  Sun Apr 29 09:36:42 2007
From: eprparadocs at gmail.com (Chaz.)
Date: Sun, 29 Apr 2007 11:36:42 -0400
Subject: [Twisted-Python] Looking for an answer...
Message-ID: <4634BB8A.8080405@gmail.com>

I have programmed very traditional systems passed on fork and pthreads 
and have used state machine systems. Last year I started working with 
Twisted Matrix. Each has their appropriate application.

I started thinking about how to implement the following in Twisted, and 
realized I don't know if it is possible. I thought I would ask the list 
to find out if someone can come up with an answer.

Suppose I have a sequence of instructions, some of which can take a long 
time. For example in a non-Twisted Matrix system I would do:

	....do some computation....

	proxy = xmlrpc.Proxy("http://....")
	proxy.CallRemote(....)

	... take the results of the CallRemote and use them...

In this example I assume CallRemote() only returns a result when it has 
completed.

In the Twisted Matrix system I would do something like:

	...do some computation....
	proxy = twisted.web.xmlrpc.Proxy("http://...")
	defer = proxy.CallRemote(...)
	defer.addErrback(fcs_storeErr,...)
         defer.addCallback(fcs_storeDone,...)

And I would define fcs_StoreErr() and fcs_storeDone(). In 
fcs_storeDone() I would take the results from the CallRemote() and 
process them.

My question is easy (the answer might be hard):

	Can I emulate the non-Twisted example in the Twisted Matrix
system. In other words can I create something like CallRemote() which 
returns only there is a result to process and get away from having to 
explicitly use a defer?

Peace,
Chaz



From itamar at itamarst.org  Sun Apr 29 10:45:16 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 29 Apr 2007 12:45:16 -0400
Subject: [Twisted-Python] Looking for an answer...
In-Reply-To: <4634BB8A.8080405@gmail.com>
References: <4634BB8A.8080405@gmail.com>
Message-ID: <1177865116.7353.0.camel@localhost.localdomain>

On Sun, 2007-04-29 at 11:36 -0400, Chaz. wrote:

> 	Can I emulate the non-Twisted example in the Twisted Matrix
> system. In other words can I create something like CallRemote() which 
> returns only there is a result to process and get away from having to 
> explicitly use a defer?

You might want to look at twisted.internet.defer.inlineCallbacks.

-- 
Itamar Shtull-Trauring
http://itamarst.org





From jml at mumak.net  Sun Apr 29 17:04:24 2007
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 30 Apr 2007 09:04:24 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <20070429133550.19381.583607652.divmod.quotient.6265@ohm>
References: <E1Hi26e-0008Qs-00@wolfwood>
	<20070429133550.19381.583607652.divmod.quotient.6265@ohm>
Message-ID: <d06a5cd30704291604r422cd22do8c207580f6108c06@mail.gmail.com>

On 4/29/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange <jml at wolfwood.twistedmatrix.com> wrote:
> >Author: jml
> >Date: Sat Apr 28 23:37:56 2007
> >New Revision: 20094
> >
> >Modified:
> >   branches/spew-decorator/twisted/python/util.py
> >   branches/spew-decorator/twisted/test/test_util.py
> >
> >Log:
> >Add a spewing decorator which stores all of the function and method calls
> >within a function in a structured data object.
> >
>
> What ticket is this associated with?
>

None, as yet.

> Also, there is already an improved spew function in Epsilon which does nice
> things like track call depth and exception propagation and call arguments.
>

Should it go into Twisted?

cheers,
jml



From exarkun at divmod.com  Sun Apr 29 20:30:50 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 29 Apr 2007 22:30:50 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <d06a5cd30704291604r422cd22do8c207580f6108c06@mail.gmail.com>
Message-ID: <20070430023050.19381.565813081.divmod.quotient.6401@ohm>

On Mon, 30 Apr 2007 09:04:24 +1000, Jonathan Lange <jml at mumak.net> wrote:
>On 4/29/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>>On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange 
>><jml at wolfwood.twistedmatrix.com> wrote:
>> >Author: jml
>> >Date: Sat Apr 28 23:37:56 2007
>> >New Revision: 20094
>> >
>> >Modified:
>> >   branches/spew-decorator/twisted/python/util.py
>> >   branches/spew-decorator/twisted/test/test_util.py
>> >
>> >Log:
>> >Add a spewing decorator which stores all of the function and method calls
>> >within a function in a structured data object.
>> >
>>
>>What ticket is this associated with?
>
>None, as yet.

I guess we should avoid having branches without tickets.  There's still the
sandbox to develop stuff where the direction is uncertain.

>>Also, there is already an improved spew function in Epsilon which does nice
>>things like track call depth and exception propagation and call arguments.
>
>Should it go into Twisted?
>

I don't have any problem with it going into Twisted, and if you're
looking for more informative spewage, it's definitely handy.

I would suggest it unequivocally, but it has no unit tests (it's pretty
old).  It's probably salvageable, but even if it not, it should at least
suggest some useful things.

Jean-Paul



From jml at mumak.net  Sun Apr 29 20:45:59 2007
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 30 Apr 2007 12:45:59 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <20070430023050.19381.565813081.divmod.quotient.6401@ohm>
References: <d06a5cd30704291604r422cd22do8c207580f6108c06@mail.gmail.com>
	<20070430023050.19381.565813081.divmod.quotient.6401@ohm>
Message-ID: <d06a5cd30704291945k29ef86bfr2238f43ad02d378a@mail.gmail.com>

On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Mon, 30 Apr 2007 09:04:24 +1000, Jonathan Lange <jml at mumak.net> wrote:
> >On 4/29/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> >>On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange
> >><jml at wolfwood.twistedmatrix.com> wrote:
> >> >Author: jml
> >> >Date: Sat Apr 28 23:37:56 2007
> >> >New Revision: 20094
> >> >
> >> >Modified:
> >> >   branches/spew-decorator/twisted/python/util.py
> >> >   branches/spew-decorator/twisted/test/test_util.py
> >> >
> >> >Log:
> >> >Add a spewing decorator which stores all of the function and method calls
> >> >within a function in a structured data object.
> >> >
> >>
> >>What ticket is this associated with?
> >
> >None, as yet.
>
> I guess we should avoid having branches without tickets.  There's still the
> sandbox to develop stuff where the direction is uncertain.

What's wrong with renaming the branch to include a ticket number after
a suitable ticket has been filed?

I thought the sandbox was for random bits of junk code[1] and
Foolscap, not branches of Twisted.

cheers,
jml

[1] FWIW, these days I just push branches up to
launchpad.net/~jml/+junk/foo to achieve the same effect as a commit to
sandbox.



From exarkun at divmod.com  Sun Apr 29 21:24:36 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 29 Apr 2007 23:24:36 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <d06a5cd30704291945k29ef86bfr2238f43ad02d378a@mail.gmail.com>
Message-ID: <20070430032436.19381.1071396258.divmod.quotient.6411@ohm>

On Mon, 30 Apr 2007 12:45:59 +1000, Jonathan Lange <jml at mumak.net> wrote:
>On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>>On Mon, 30 Apr 2007 09:04:24 +1000, Jonathan Lange <jml at mumak.net> wrote:
>> >On 4/29/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>> >>On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange
>> >><jml at wolfwood.twistedmatrix.com> wrote:
>> >> >Author: jml
>> >> >Date: Sat Apr 28 23:37:56 2007
>> >> >New Revision: 20094
>> >> >
>> >> >Modified:
>> >> >   branches/spew-decorator/twisted/python/util.py
>> >> >   branches/spew-decorator/twisted/test/test_util.py
>> >> >
>> >> >Log:
>> >> >Add a spewing decorator which stores all of the function and method 
>>calls
>> >> >within a function in a structured data object.
>> >> >
>> >>
>> >>What ticket is this associated with?
>> >
>> >None, as yet.
>>
>>I guess we should avoid having branches without tickets.  There's still the
>>sandbox to develop stuff where the direction is uncertain.
>
>What's wrong with renaming the branch to include a ticket number after
>a suitable ticket has been filed?

That operation is unsupported by the tool-chain.  But even so, for the
reasons below, it's better to start things off with a ticket, rather than
eventually introduce one.

>
>I thought the sandbox was for random bits of junk code[1] and
>Foolscap, not branches of Twisted.

More or less, yes.  Anything goes in the sandbox.  Sticking whole Twisted
branches there probably isn't the best idea on the world, but developing
functionality that actually needs to go into the Twisted tree probably also
shouldn't be undertaken without some minimal amount of planning.  That's
supposed to be part of what tickets are for (although I recognize that
sometimes they do not end up filling that role).  When I suggested the
sandbox, I really had in mind the development of some spewer-related
functionality in an independent module with little or no Twisted integration
(since from a quick look at the branch, that seemed to be what the code
looked like so far).

In case that's a little too muddled and fuzzy to make sense, here's another
angle.  A ticket serves as a point where the relevance, utility, correctness,
whatever, of a change can be discussed.  If someone is interested in some
development which is taking place, they should be able to find that point
easily and without interactive assistance from anyone.  If not, their input
may be lost or delayed until it is useless or integrating it costs more than
the ultimate payoff.

The kind of "just-in-time" ticket creation that already happens so frequently
in Twisted development is something it would be nice to move away from.  It's
completely fine to find a bug, create a ticket, and develop a fix in a brief
period of time and I don't want to discourage that.  However, and this is
really close to the heart of UQDS, for refactoring and feature enhancements,
the end result is much improved by input from other people.  Leaving a little
time between ticket creation and actual development doesn't guarantee that
any useful input will be offered by other developers, but it at least presents
the possibility.  If development starts _before_ anyone else even knows what
it's about, obviously that doesn't present any window at all.  This really
also applies to bug fixes, but I think it's at least /possible/ in some of
those cases for the necessary change to be sufficiently straightforward such
that the process works well enough with only two developers involved.

If any of this seems unreasonable, please say so and let's discuss it.  The
goal here is to make Twisted the best piece of software we can make it,
nothing else.

Jean-Paul



From jml at mumak.net  Mon Apr 30 02:01:23 2007
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 30 Apr 2007 18:01:23 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <20070430032436.19381.1071396258.divmod.quotient.6411@ohm>
References: <d06a5cd30704291945k29ef86bfr2238f43ad02d378a@mail.gmail.com>
	<20070430032436.19381.1071396258.divmod.quotient.6411@ohm>
Message-ID: <d06a5cd30704300101p4b305897mad134f4d04ec5fc5@mail.gmail.com>

On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Mon, 30 Apr 2007 12:45:59 +1000, Jonathan Lange <jml at mumak.net> wrote:
> >On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> >>On Mon, 30 Apr 2007 09:04:24 +1000, Jonathan Lange <jml at mumak.net> wrote:
> >> >On 4/29/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> >> >>On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange
> >> >><jml at wolfwood.twistedmatrix.com> wrote:
> >> >> >Author: jml
> >> >> >Date: Sat Apr 28 23:37:56 2007
> >> >> >New Revision: 20094
> >> >> >
> >> >> >Modified:
> >> >> >   branches/spew-decorator/twisted/python/util.py
> >> >> >   branches/spew-decorator/twisted/test/test_util.py
> >> >> >
> >> >> >Log:
> >> >> >Add a spewing decorator which stores all of the function and method
> >>calls
> >> >> >within a function in a structured data object.
> >> >> >
> >> >>
> >> >>What ticket is this associated with?
> >> >
> >> >None, as yet.
> >>
> >>I guess we should avoid having branches without tickets.  There's still the
> >>sandbox to develop stuff where the direction is uncertain.
> >
> >What's wrong with renaming the branch to include a ticket number after
> >a suitable ticket has been filed?
>
> That operation is unsupported by the tool-chain.  But even so, for the
> reasons below, it's better to start things off with a ticket, rather than
> eventually introduce one.
>
> >
> >I thought the sandbox was for random bits of junk code[1] and
> >Foolscap, not branches of Twisted.
>
> More or less, yes.  Anything goes in the sandbox.  Sticking whole Twisted
> branches there probably isn't the best idea on the world, but developing
> functionality that actually needs to go into the Twisted tree probably also
> shouldn't be undertaken without some minimal amount of planning.  That's
> supposed to be part of what tickets are for (although I recognize that
> sometimes they do not end up filling that role).  When I suggested the
> sandbox, I really had in mind the development of some spewer-related
> functionality in an independent module with little or no Twisted integration
> (since from a quick look at the branch, that seemed to be what the code
> looked like so far).
>
> In case that's a little too muddled and fuzzy to make sense, here's another
> angle.  A ticket serves as a point where the relevance, utility, correctness,
> whatever, of a change can be discussed.  If someone is interested in some
> development which is taking place, they should be able to find that point
> easily and without interactive assistance from anyone.  If not, their input
> may be lost or delayed until it is useless or integrating it costs more than
> the ultimate payoff.
>
> The kind of "just-in-time" ticket creation that already happens so frequently
> in Twisted development is something it would be nice to move away from.  It's
> completely fine to find a bug, create a ticket, and develop a fix in a brief
> period of time and I don't want to discourage that.  However, and this is
> really close to the heart of UQDS, for refactoring and feature enhancements,
> the end result is much improved by input from other people.  Leaving a little
> time between ticket creation and actual development doesn't guarantee that
> any useful input will be offered by other developers, but it at least presents
> the possibility.  If development starts _before_ anyone else even knows what
> it's about, obviously that doesn't present any window at all.  This really
> also applies to bug fixes, but I think it's at least /possible/ in some of
> those cases for the necessary change to be sufficiently straightforward such
> that the process works well enough with only two developers involved.
>
> If any of this seems unreasonable, please say so and let's discuss it.  The
> goal here is to make Twisted the best piece of software we can make it,
> nothing else.
>


Thanks for the thoughtful reply.

>From my perspective, the problem here is that strict adherence to UQDS
as described in your email is that there is no real room for
exploratory coding.

At other times, I have wanted to muck around doing some Trial
refactoring, I filed a ticket which stated my intentions with all the
clarity available, something along the lines of "muck around doing
trial refactoring". I was chastised for filing such a ticket (fair
enough, it's a lousy ticket), so I stopped working along those lines.

This time, I decided to not file a ticket, because I did not want to
prematurely problem of concisely defining my work. I am being
chastised (albeit gently) for such work, and I will probably stop
working on this code.



From jml at mumak.net  Mon Apr 30 02:02:38 2007
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 30 Apr 2007 18:02:38 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <d06a5cd30704300101p4b305897mad134f4d04ec5fc5@mail.gmail.com>
References: <d06a5cd30704291945k29ef86bfr2238f43ad02d378a@mail.gmail.com>
	<20070430032436.19381.1071396258.divmod.quotient.6411@ohm>
	<d06a5cd30704300101p4b305897mad134f4d04ec5fc5@mail.gmail.com>
Message-ID: <d06a5cd30704300102y3bcd3a12gf78a95f69f0becca@mail.gmail.com>

I sent this email by accident during the process of drafting. Please
ignore until I write my email in full.

On 4/30/07, Jonathan Lange <jml at mumak.net> wrote:
> On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> > On Mon, 30 Apr 2007 12:45:59 +1000, Jonathan Lange <jml at mumak.net> wrote:
> > >On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> > >>On Mon, 30 Apr 2007 09:04:24 +1000, Jonathan Lange <jml at mumak.net> wrote:
> > >> >On 4/29/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> > >> >>On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange
> > >> >><jml at wolfwood.twistedmatrix.com> wrote:
> > >> >> >Author: jml
> > >> >> >Date: Sat Apr 28 23:37:56 2007
> > >> >> >New Revision: 20094
> > >> >> >
> > >> >> >Modified:
> > >> >> >   branches/spew-decorator/twisted/python/util.py
> > >> >> >   branches/spew-decorator/twisted/test/test_util.py
> > >> >> >
> > >> >> >Log:
> > >> >> >Add a spewing decorator which stores all of the function and method
> > >>calls
> > >> >> >within a function in a structured data object.
> > >> >> >
> > >> >>
> > >> >>What ticket is this associated with?
> > >> >
> > >> >None, as yet.
> > >>
> > >>I guess we should avoid having branches without tickets.  There's still the
> > >>sandbox to develop stuff where the direction is uncertain.
> > >
> > >What's wrong with renaming the branch to include a ticket number after
> > >a suitable ticket has been filed?
> >
> > That operation is unsupported by the tool-chain.  But even so, for the
> > reasons below, it's better to start things off with a ticket, rather than
> > eventually introduce one.
> >
> > >
> > >I thought the sandbox was for random bits of junk code[1] and
> > >Foolscap, not branches of Twisted.
> >
> > More or less, yes.  Anything goes in the sandbox.  Sticking whole Twisted
> > branches there probably isn't the best idea on the world, but developing
> > functionality that actually needs to go into the Twisted tree probably also
> > shouldn't be undertaken without some minimal amount of planning.  That's
> > supposed to be part of what tickets are for (although I recognize that
> > sometimes they do not end up filling that role).  When I suggested the
> > sandbox, I really had in mind the development of some spewer-related
> > functionality in an independent module with little or no Twisted integration
> > (since from a quick look at the branch, that seemed to be what the code
> > looked like so far).
> >
> > In case that's a little too muddled and fuzzy to make sense, here's another
> > angle.  A ticket serves as a point where the relevance, utility, correctness,
> > whatever, of a change can be discussed.  If someone is interested in some
> > development which is taking place, they should be able to find that point
> > easily and without interactive assistance from anyone.  If not, their input
> > may be lost or delayed until it is useless or integrating it costs more than
> > the ultimate payoff.
> >
> > The kind of "just-in-time" ticket creation that already happens so frequently
> > in Twisted development is something it would be nice to move away from.  It's
> > completely fine to find a bug, create a ticket, and develop a fix in a brief
> > period of time and I don't want to discourage that.  However, and this is
> > really close to the heart of UQDS, for refactoring and feature enhancements,
> > the end result is much improved by input from other people.  Leaving a little
> > time between ticket creation and actual development doesn't guarantee that
> > any useful input will be offered by other developers, but it at least presents
> > the possibility.  If development starts _before_ anyone else even knows what
> > it's about, obviously that doesn't present any window at all.  This really
> > also applies to bug fixes, but I think it's at least /possible/ in some of
> > those cases for the necessary change to be sufficiently straightforward such
> > that the process works well enough with only two developers involved.
> >
> > If any of this seems unreasonable, please say so and let's discuss it.  The
> > goal here is to make Twisted the best piece of software we can make it,
> > nothing else.
> >
>
>
> Thanks for the thoughtful reply.
>
> From my perspective, the problem here is that strict adherence to UQDS
> as described in your email is that there is no real room for
> exploratory coding.
>
> At other times, I have wanted to muck around doing some Trial
> refactoring, I filed a ticket which stated my intentions with all the
> clarity available, something along the lines of "muck around doing
> trial refactoring". I was chastised for filing such a ticket (fair
> enough, it's a lousy ticket), so I stopped working along those lines.
>
> This time, I decided to not file a ticket, because I did not want to
> prematurely problem of concisely defining my work. I am being
> chastised (albeit gently) for such work, and I will probably stop
> working on this code.
>



From jml at mumak.net  Mon Apr 30 02:42:52 2007
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 30 Apr 2007 18:42:52 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <d06a5cd30704300101p4b305897mad134f4d04ec5fc5@mail.gmail.com>
References: <d06a5cd30704291945k29ef86bfr2238f43ad02d378a@mail.gmail.com>
	<20070430032436.19381.1071396258.divmod.quotient.6411@ohm>
	<d06a5cd30704300101p4b305897mad134f4d04ec5fc5@mail.gmail.com>
Message-ID: <d06a5cd30704300142m52908a90t6af08195cfe5781b@mail.gmail.com>

On 4/30/07, Jonathan Lange <jml at mumak.net> wrote:
> On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> > On Mon, 30 Apr 2007 12:45:59 +1000, Jonathan Lange <jml at mumak.net> wrote:
> > >On 4/30/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> > >>On Mon, 30 Apr 2007 09:04:24 +1000, Jonathan Lange <jml at mumak.net> wrote:
> > >> >On 4/29/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> > >> >>On Sat, 28 Apr 2007 23:37:57 -0600, Jonathan Lange
> > >> >><jml at wolfwood.twistedmatrix.com> wrote:
> > >> >> >Author: jml
> > >> >> >Date: Sat Apr 28 23:37:56 2007
> > >> >> >New Revision: 20094
> > >> >> >
> > >> >> >Modified:
> > >> >> >   branches/spew-decorator/twisted/python/util.py
> > >> >> >   branches/spew-decorator/twisted/test/test_util.py
> > >> >> >
> > >> >> >Log:
> > >> >> >Add a spewing decorator which stores all of the function and method
> > >>calls
> > >> >> >within a function in a structured data object.
> > >> >> >
> > >> >>
> > >> >>What ticket is this associated with?
> > >> >
> > >> >None, as yet.
> > >>
> > >>I guess we should avoid having branches without tickets.  There's still the
> > >>sandbox to develop stuff where the direction is uncertain.
> > >
> > >What's wrong with renaming the branch to include a ticket number after
> > >a suitable ticket has been filed?
> >
> > That operation is unsupported by the tool-chain.  But even so, for the
> > reasons below, it's better to start things off with a ticket, rather than
> > eventually introduce one.
> >
> > >
> > >I thought the sandbox was for random bits of junk code[1] and
> > >Foolscap, not branches of Twisted.
> >
> > More or less, yes.  Anything goes in the sandbox.  Sticking whole Twisted
> > branches there probably isn't the best idea on the world, but developing
> > functionality that actually needs to go into the Twisted tree probably also
> > shouldn't be undertaken without some minimal amount of planning.  That's
> > supposed to be part of what tickets are for (although I recognize that
> > sometimes they do not end up filling that role).  When I suggested the
> > sandbox, I really had in mind the development of some spewer-related
> > functionality in an independent module with little or no Twisted integration
> > (since from a quick look at the branch, that seemed to be what the code
> > looked like so far).
> >
> > In case that's a little too muddled and fuzzy to make sense, here's another
> > angle.  A ticket serves as a point where the relevance, utility, correctness,
> > whatever, of a change can be discussed.  If someone is interested in some
> > development which is taking place, they should be able to find that point
> > easily and without interactive assistance from anyone.  If not, their input
> > may be lost or delayed until it is useless or integrating it costs more than
> > the ultimate payoff.
> >
> > The kind of "just-in-time" ticket creation that already happens so frequently
> > in Twisted development is something it would be nice to move away from.  It's
> > completely fine to find a bug, create a ticket, and develop a fix in a brief
> > period of time and I don't want to discourage that.  However, and this is
> > really close to the heart of UQDS, for refactoring and feature enhancements,
> > the end result is much improved by input from other people.  Leaving a little
> > time between ticket creation and actual development doesn't guarantee that
> > any useful input will be offered by other developers, but it at least presents
> > the possibility.  If development starts _before_ anyone else even knows what
> > it's about, obviously that doesn't present any window at all.  This really
> > also applies to bug fixes, but I think it's at least /possible/ in some of
> > those cases for the necessary change to be sufficiently straightforward such
> > that the process works well enough with only two developers involved.
> >
> > If any of this seems unreasonable, please say so and let's discuss it.  The
> > goal here is to make Twisted the best piece of software we can make it,
> > nothing else.
> >
>
>
> Thanks for the thoughtful reply.
>
> From my perspective, the problem here is that strict adherence to UQDS
> as described in your email is that there is no real room for
> exploratory coding.
>
> At other times, I have wanted to muck around doing some Trial
> refactoring, I filed a ticket which stated my intentions with all the
> clarity available, something along the lines of "muck around doing
> trial refactoring". I was chastised for filing such a ticket (fair
> enough, it's a lousy ticket), so I stopped working along those lines.
>
> This time, I decided to not file a ticket, because I did not want to
> prematurely problem of concisely defining my work. I am being
> chastised (albeit gently) for such work, and I will probably stop
> working on this code.
>

Actually, on reflection, I'll leave that email as is. It's blunter
than I would have made it otherwise, but it accurately represents my
opinions.

However, I will note:

- I could have chosen to work on this branch offline. In which case,
the code wouldn't have been available for review at all.
- The very fact of this thread indicates that there is a window for discussion.
- Every branch has chance to be reviewed, and thus discussed.
- The time penalty of discussion is significant to me because of my timezone.
- I really do think discussion is good. However, I think that planning
as a group is not always worth the cost.

My goal is more complex than making Twisted the best software
possible. My goal is to be able to sit down and work on Twisted even
if I don't have a fully specified, fully approved goal in mind.

cheers,
jml



From andrew-twisted at puzzling.org  Mon Apr 30 02:47:03 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 30 Apr 2007 18:47:03 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20094 - Add a spewing
	decorator which stores all of the function and method calls
In-Reply-To: <20070430032436.19381.1071396258.divmod.quotient.6411@ohm>
References: <d06a5cd30704291945k29ef86bfr2238f43ad02d378a@mail.gmail.com>
	<20070430032436.19381.1071396258.divmod.quotient.6411@ohm>
Message-ID: <20070430084703.GB15094@steerpike.home.puzzling.org>

Jean-Paul Calderone wrote:
[...]
> 
> In case that's a little too muddled and fuzzy to make sense, here's another
> angle.  A ticket serves as a point where the relevance, utility, 
> correctness,
> whatever, of a change can be discussed.  If someone is interested in some
> development which is taking place, they should be able to find that point
> easily and without interactive assistance from anyone.  If not, their input
> may be lost or delayed until it is useless or integrating it costs more than
> the ultimate payoff.

Some quick observations:

  * the reasons for using tickets you give here (a place to discuss a change, a
    central place to look for development in progress, facilitating early
    discussion of a change) are not given on the official UQDS page
    (http://www.divmod.org/trac/wiki/UltimateQualityDevelopmentSystem).
  * the official UQDS page gives reasons for using tickets that are irrelevant
    to volunteer contributions: "a way to manage distractions and continuously
    re-focus on what's really important."  Open source volunteers are scratching
    itches.  Whatever they are working on *is* what's important.  Other things
    may be important to other people, and they are certainly welcome to file
    tickets asking for things to be done, but that's outside of stated role of
    UQDS: that's just ordinary bug (and feature request) tracking.

I think it is useful to have a place to discuss a branch *once it is ready for
public consumption*.  A developer should *not* be discouraged from using version
control tools just because they haven't decided exactly what direction they are
going in yet, or even if their experiment is worthwhile.

I think that developers *should* be encouraged to share their in development
work early and often, because as you say input from others is often helpful.
But forcing them to jump through the hoops of filing tickets (thus requiring
them to have a clear statement exactly what they are working when they might not
know yet) seems like a bad idea.  Have you never started hacking on something
without a clear idea of if this was something worthwhile or not, or even exactly
what it might be good for?  This is a useful and legimitate form of development.
Or are you saying that a ticket titled "Do stuff!" is fine? :)

A final thought... we *do* have a place to discuss branches without tickets, as
you have demonstrated: this mailing list :)

-Andrew.




From Sven-Erik.Tiberg at ltu.se  Mon Apr 30 04:40:39 2007
From: Sven-Erik.Tiberg at ltu.se (Sven-Erik Tiberg)
Date: Mon, 30 Apr 2007 12:40:39 +0200
Subject: [Twisted-Python] UDP + TCP + Serial
In-Reply-To: <462922A5.1030501@thiengineering.ch>
Message-ID: <668D1B8AD729C94DB91D17EC19B8BB910565BF6E@EMMA.personal.adp.ltu.se>

Thanks Werner.

Can be usefull in our project too, trying to connect a X3D ( Interactive
3D ) with mathworks/Simulink model over UDP. Simulink module done
runnning in RT-mode, X3D-model done, working on the UDP module to X3D.
Hope to have a shared interactive 3D viewer application readdy may 10
-07.

BG
Sven-Erik Tiberg

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Werner
Thie
Sent: den 20 april 2007 22:29
To: Twisted general discussion
Subject: Re: [Twisted-Python] UDP + TCP + Serial

Might be that I have something useful for you - please see the attached
zipped code. Basic idea was to have a serially connected device
accepting commands and delivering status information connected to a
browser via a server delivering LiveFragments.

A few problems remain open, like:
   - how does one uniquely connect only one browser capable of sendign
commands (the SPS is a single resource)

   - are other browsers able to connect and do a status display only

Forgive me if I did did not use twisted/nevow/athenain in all aspects
correctly, but with lots of source/doc re- and rereading I was able to
bring it that far. If there are patterns I should avoid or correct I
will gladly do so if pointed out to me.

Thanks, Werner


Roel Schroeven wrote:
> I'm looking for a way to combine serial input with UDP (and possibly
> TCP) communication.
> 
> Currently I have a very simple quick-and-dirty script using pyserial 
> and the socket module without Twisted that reads line-based data from 
> a serial port and sends it out using UDP. It works very well, but 
> functional and reliability requirements are growing and I'm looking 
> for a better design. New functionality that we'll need is connection 
> to a database, two-way network communication to control the program 
> while it's running, and perhaps the ability to use encrypted 
> connections for the output data.
> 
> Twisted seems nice, but apart from a few simple hello-world-style test

> I don't have any experience with it. It doesn't seem too difficult 
> though, except for one thing: I can't find any concrete information on

> how to combine serial communication and network communication. What 
> reactor do I need? How do I initialize it? How can I make it listen to

> both a serial port and one or more UDP and/or TCP ports? I need to do 
> this on Linux, but it would be nice to have it working on Windows too.
> 
> Many thanks,
> Roel
> 



From glyph at divmod.com  Mon Apr 30 11:08:59 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 30 Apr 2007 17:08:59 -0000
Subject: exploratory coding and the purpose of UQDS (Re: [Twisted-Python] Re:
	[Twisted-commits] r20094)
In-Reply-To: <d06a5cd30704300142m52908a90t6af08195cfe5781b@mail.gmail.com>
References: <d06a5cd30704291945k29ef86bfr2238f43ad02d378a@mail.gmail.com>
	<20070430032436.19381.1071396258.divmod.quotient.6411@ohm>
	<d06a5cd30704300101p4b305897mad134f4d04ec5fc5@mail.gmail.com>
	<d06a5cd30704300142m52908a90t6af08195cfe5781b@mail.gmail.com>
Message-ID: <20070430170859.18153.410539343.divmod.xquotient.123@joule.divmod.com>

I'll respond to a few specific things JML said here, but I want to get 
across my personal view of the purpose and benefits of the process we're 
using.  I specifically told JML to make a branch and continue with these 
changes before he got started, and I still think that was the right 
thing to do.

UQDS was instituted on Twisted because tracking changes to Twisted was 
becoming too difficult.  Some changes were critical bugfixes, some were 
random whitespace twiddling, and some introduced regressions.  It was 
designed in the first place (for Divmod) because we were having similar 
issues in a different context.

In other words, not all change is progress.  The goal of UQDS was to 
provide a way to encourage and ensure that all changes to *trunk* are, 
in fact, progress, and Twisted is always improving, so that we don't 
need to burn our energy tracking down bugs or gratuitously bad design 
decisions after they've been merged to trunk and people have begun 
depending on them.  I think it has been very successful at meeting this 
goal.

It's true that the UQDS document on the Divmod wiki does specify that 
the lifetime of a task in UQDS begins with the creation of a ticket. 
For the context that I originally wrote "If it's not in the tracker, you 
shouldn't be working on it.", i.e. the full-time developers at Divmod, 
that makes perfect sense.  In a commercial environment, management needs 
to have a clear idea of where all the resources of the company are being 
deployed.

I would go so far as to say that it makes sense for Twisted as well, 
insofar as UQDS manages our workflow.  However, Twisted SVN does things 
other than UQDS (the trunk/doc/fun/Twisted.Quotes exception and the 
sandbox, to name two notable things) and I don't think that every branch 
needs to be backed by a ticket.  I'd rather have non-ticketed branches 
that we can delete as prototypes than a profusion of vague tickets which 
only their author understands.  (In other words, SVN branches are not 
always necessarily part of the UQDS workflow, but tickets are.)

It's fine by me if there is tons of bad, broken code that gets checked 
in to branches (as long as it is then deleted - see below).  Sometimes, 
the only way to learn how to implement a feature correctly is to 
implement it incorrectly.  Sometimes the only way to figure out what 
feature you're implementing is to mess around for a while and see what 
kind of code you write.  This is especially true of refactoring.

The policy on having tickets applies to anything wanting a review, and 
therefore, anything that hopes to go to trunk.  If you have done some 
work in a branch which you want reviewed, you still need to explain, for 
the reviewer's benefit, what it is that the change is supposed to 
accomplish in a ticket.  Again, this is especially true of refactoring - 
it's fine to noodle around for a while trying to discover a better shape 
for the code, but once you've found one, it's important to clearly 
express *why* the new shape is better rather than simply different. 
Just because the description eventually needs to be written doesn't mean 
it needs to be the first thing that happens, though.

There is one caveat to creating branches for experimentation.  I think 
it's rude to leave dead branches around.  This can be mitigated by using 
ticket numbers, because someone else can come along later, notice that 
the branch refers to a closed ticket, and delete it.  Open branches have 
a cost: "svn ls svn://svn.twistedmatrix.com/svn/Twisted/branches" 
should, at a glance, give an indication as to what's in progress in 
Twisted right now, and dead branches obscure that view and make it 
difficult to get a feel for what's going on.  Right now there are 133 
entries there, and it's probably time for some pruning.  So I think it's 
reasonable to say that if you leave a ticket-number-free branch around 
for more than a month, don't be surprised if someone else deletes it. 
(But please delete it yourself before it comes to that.)

However, deletion or rejection should not necessarily be seen as a 
failure, either of the developer or of the process.  The whole *point* 
of using branches as temporary development lines is that, sometimes, 
those lines end without reaching trunk.  Each rejected branch should be 
a learning experience.

Another important thing to keep in mind, as long as I'm talking about 
how to use and not use branches: don't *ever* deploy Twisted from a 
branch, and this goes triple for a branch created for experimentation. 
Such branches are still at the mercy of a reviewer, and may be 
substantially changed or deleted.  Eventually, *all* branches will be 
deleted, as they are merged to trunk and become obsolete.

On 08:42 am, jml at mumak.net wrote:
>>This time, I decided to not file a ticket, because I did not want to
>>prematurely problem of concisely defining my work. I am being
>>chastised (albeit gently) for such work, and I will probably stop
>>working on this code.

Please don't.  This kind of clean-up can be very important.  I don't 
know if the particular changes in this branch are, but certainly the 
changes which can come out of exploratory coding are useful.
>However, I will note:
>- The time penalty of discussion is significant to me because of my 
>timezone.

An important feature of UQDS is its asynchrony.  Although branches have 
to be reviewed before they're merged, to the extent that changes do not 
directly depend upon one another, it's critical that someone be able to 
sit down and work on feature X, then feature Y, then feature Z, without 
stopping each time to wait 24 hours for a review and then again for the 
second review.  With 24 hours (or more!) of context-switch latency, the 
inability to pipeline requests could completely kill development speed.

This asynchrony should apply to all aspects of the process, including 
discussion of requirements and design goals.  The key feature of a 
heavyweight (read: broken) process is that a developer who is itching to 
do some work has to sit around and wait for permission from a committee 
to do so.
>- I really do think discussion is good. However, I think that planning
>as a group is not always worth the cost.

Enforcement by consensus is great.  Design by consensus (i.e. committee) 
is, unfortunately, terrible.  I never intended UQDS to require that. 
The best sort of group design is when one person has an idea and 
champions it and the group offers criticism and analysis.  Having the 
idea in the first place can require writing some code.
>My goal is more complex than making Twisted the best software
>possible. My goal is to be able to sit down and work on Twisted even
>if I don't have a fully specified, fully approved goal in mind.

As I see it, irrespective of their priorities, the latter is a 
prerequisite for the former.  If, as an open source project, we can't 
harness the power of people's idle time, I think we're doomed.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070430/1a903516/attachment.html>

