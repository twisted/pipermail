From free at 64studio.com  Mon Dec  1 04:55:45 2014
From: free at 64studio.com (Free Ekanayaka)
Date: Mon, 1 Dec 2014 12:55:45 +0100
Subject: [Twisted-Python] HTTP combined log format in twisted.web.http
 changed from 13.2.0 to 14.0.0
In-Reply-To: <CABJ6WihNk2-yPSeUNCfA5OajPy9kLW=7pNDfak+6MN=X9Hd_zw@mail.gmail.com>
References: <CABJ6WihNk2-yPSeUNCfA5OajPy9kLW=7pNDfak+6MN=X9Hd_zw@mail.gmail.com>
Message-ID: <CABJ6WigizK=rAY5k19zCM5szF6-+JX7mB8=53MCP+wxvceL4Tg@mail.gmail.com>

On Tue, Nov 25, 2014 at 4:26 PM, Free Ekanayaka <free at 64studio.com> wrote:

> Hi,
>
> it was
>
>             line = '%s - - %s "%s" %d %s "%s" "%s"\n' % (
>
> in 13.2.0 (twisted/web/http.py line 1920), and it's
>
>         u'"%(ip)s" - - %(timestamp)s "%(method)s %(uri)s %(protocol)s" '
>
> so basically the client IP now gets wrapped within double quotes, e.g. a
> log line that was looking like:
>
> 1.2.3.4 - - [25/Oct/2004:12:31:59 +0000] "GET /dummy HTTP/1.0" 123 - "-"
> "-"
>
> it now looks like:
>
> "1.2.3.4" - - [25/Oct/2004:12:31:59 +0000] "GET /dummy HTTP/1.0" 123 - "-"
> "-"
>
> as one can see in the unit tests in test_web.py too.
>
> What's the reason for this change?
>
> It feels it can potentially break code that parses log files and it also
> seems to diverge from the format described on the Apache web site:
>
> http://httpd.apache.org/docs/1.3/logs.html
>

I've inspected a bit the diff that introduced this change and read the
comments
on the relevant ticket, but couldn't figure out the reason for the change,
so I
filed #7730 to keep track of the issue.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141201/da458b9f/attachment.html>

From glyph at twistedmatrix.com  Mon Dec  1 16:56:48 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 2 Dec 2014 00:56:48 +0100
Subject: [Twisted-Python] hey pypy fans
Message-ID: <5B9AB0E9-6C02-4B2D-A64B-1E831338C3FA@twistedmatrix.com>

We (and by "we" I mean the greater part of Twisted Matrix Labs, including myself) frequently recommend the combination of PyPy and Twisted in production, yet PyPy is not a supported platform according to our own rules for platform support.

I propose we change that.

Until yesterday, even our unsupported builder was offline and broken.  I've set up a reasonably configured PyPy builder with many dependencies installed (although not PyCrypto, since that doesn't support PyPy).

There are some build failures, but not an overwhelming number:

<http://buildbot.twistedmatrix.com/builders/trusty64-pypy-2.4/builds/1/steps/trial/logs/problems <http://buildbot.twistedmatrix.com/builders/trusty64-pypy-2.4/builds/1/steps/trial/logs/problems>>

Most of these are meta-programming issues, a couple have to do with garbage-collector interactions, and there is at least one with an issue with spawnProcess.  If any of these failures make sense to you, please file bugs and submit patches.

I've created a milestone for this:

<https://twistedmatrix.com/trac/milestone/PyPy-support <https://twistedmatrix.com/trac/milestone/PyPy-support>>

so please feel free to put your tickets into it.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141202/622b95b2/attachment.html>

From adi at roiban.ro  Tue Dec  2 03:02:20 2014
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 2 Dec 2014 10:02:20 +0000
Subject: [Twisted-Python] doc bloat
In-Reply-To: <CBFD7586-9EB0-4F12-9F5B-B9B4140397C9@twistedmatrix.com>
References: <D114730E-21D4-42F1-A8EB-98C3FD1243E7@twistedmatrix.com>
 <CBFD7586-9EB0-4F12-9F5B-B9B4140397C9@twistedmatrix.com>
Message-ID: <CAFycZ9dpZSH3rzc-WP2mC6frv9RdFQjV1aQa8O9-udkxYCvHSA@mail.gmail.com>

As a Twisted API users, I don't find a big problem the fact that __repr__
docstring is presented by pydoctor together with the other method,

As a Twisted contributor, I don't like when I have to copy/paste docstring
from an interface or from an inherited class ... or too explicity state
that the type of None is NoneType... and then to add a link to it :)


> As a first approximation, I think we could ask twistedchecker to stop
enforcing docstring requirements for objects directly matching a "private"
naming pattern.

Is there a ticket/issue for that?
What does `stop enforcing docstring requirements` mean?

I think that docstring are important, and testing code or private methods
is still code which should be maintained and it should have docstrings, but
it would be nice not to ask for
strict @param @type @return @rtype.

-------

+1 for getting serious about twistedcker ...

I would be happy to help with twistedchecker, as well as with the other
automated tools.

What do you say if we put all problems/issues/comments here
https://github.com/twisted/twistedchecker/issues
and have 2 or 3 people who can decide if an issues is accepted, or help
define the right behaviour or reject it and then also review the pull
requests.

Right now there are many "undecided" or not tagged tickets, and I don't
know which one is a real problem or not.

One important requirement to move things forward is to provide quick
feedback, both for the initial issue report and the review.
Waiting months to get feedback from a patch is not fun and is a sign that
core developers don't care about the newly proposed changes.

----------

+1 for getting serious about the other code checkers: pyflakes and
pydoctor. Right now, is a PITA to run all these tools on your local
computer ...

Cheers
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141202/7f786dd8/attachment.html>

From exarkun at twistedmatrix.com  Tue Dec  2 12:05:39 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 02 Dec 2014 19:05:39 -0000
Subject: [Twisted-Python] doc bloat
In-Reply-To: <CAFycZ9dpZSH3rzc-WP2mC6frv9RdFQjV1aQa8O9-udkxYCvHSA@mail.gmail.com>
References: <D114730E-21D4-42F1-A8EB-98C3FD1243E7@twistedmatrix.com>
 <CBFD7586-9EB0-4F12-9F5B-B9B4140397C9@twistedmatrix.com>
 <CAFycZ9dpZSH3rzc-WP2mC6frv9RdFQjV1aQa8O9-udkxYCvHSA@mail.gmail.com>
Message-ID: <20141202190539.23969.240747748.divmod.xquotient.29@top>

On 10:02 am, adi at roiban.ro wrote:
>As a Twisted API users, I don't find a big problem the fact that 
>__repr__
>docstring is presented by pydoctor together with the other method,
>
>As a Twisted contributor, I don't like when I have to copy/paste 
>docstring
>from an interface or from an inherited class ...

I hate it when people do this, too.  I never want anyone to do this. 
When I review changes in which this appears, I ask the author to change 
the submission to include useful, non-redundant documentation instead.

The coding standard doesn't explicitly say that you should not copy the 
docstring from an implementation to an interface - but this is a good 
example of the kind of thing our documentation can't be expected to 
cover.  Copying an interface docstring to an implementation is just one 
of the many possible bad practices a developer could engage in; a list 
of all possible bad practices would make the developer documentation 
infinitely long.

To the larger issue, I think the most productive thing to do would be to 
actually look at our code base and see if there are glaring examples of 
useless documentation.  If we can generalize from these examples to a 
rule, we can add that rule to the project policy (preferably encoded in 
a tool, not as prose in the developer documentation).

I'm a little bit tempted to agree with the `__repr__` case.  People who 
are reading the API documentation might not be put off by documentation 
for these methods but are they helped in any way?  I think that most of 
the time they probably aren't.  I'm basing this on times I can recall 
having written a `__repr__` docstring and how I had to struggle to put 
useful words into that docstring instead of pointless boilerplate.  I 
still think it would be good to collect a bunch of actual `__repr__` 
docstrings from Twisted and see if such evidence supports this 
conclusion.
>or too explicity state
>that the type of None is NoneType... and then to add a link to it :)

It sounds like there's agreement on this point, at least.  For what it's 
worth, this seems uncontroversial to me: the type of `None` is 
`NoneType` and the only instance of `NoneType` is `None`.  Documenting 
one or the other conveys all possible information there is to convey so 
documenting one should be enough.  Even if we wanted the rendered 
version of the documentation for this case to be redundant, pydoctor can 
synthesize that redundancy - it doesn't need the source material to be 
redundant.
>
>>As a first approximation, I think we could ask twistedchecker to stop
>enforcing docstring requirements for objects directly matching a 
>"private"
>naming pattern.
>
>Is there a ticket/issue for that?
>What does `stop enforcing docstring requirements` mean?
>
>I think that docstring are important, and testing code or private 
>methods
>is still code which should be maintained and it should have docstrings, 
>but
>it would be nice not to ask for
>strict @param @type @return @rtype.

Eh.  Test code has to be maintained just like anything else.  As the de 
facto specification for most features, it's perhaps (but only perhaps) 
more important to have everything clearly documented in a test suite.  I 
think that requiring parameter and return type documentation in the test 
suite is a very good thing.

However, requiring the same degree of documentation for *all* code may 
not be necessary.  If a test method defines a simple nested function, 
perhaps that doesn't need a docstring.  This is another thing we could 
inspect the current Twisted codebase for.  Are there lots of useless 
docstrings on nested function definitions purely for the sake of 
twistedchecker?  Or are there undocumented nested functions that are 
actually a little bit difficult to understand on their own?

Jean-Paul
>-------
>
>+1 for getting serious about twistedcker ...
>
>I would be happy to help with twistedchecker, as well as with the other
>automated tools.
>
>What do you say if we put all problems/issues/comments here
>https://github.com/twisted/twistedchecker/issues
>and have 2 or 3 people who can decide if an issues is accepted, or help
>define the right behaviour or reject it and then also review the pull
>requests.
>
>Right now there are many "undecided" or not tagged tickets, and I don't
>know which one is a real problem or not.
>
>One important requirement to move things forward is to provide quick
>feedback, both for the initial issue report and the review.
>Waiting months to get feedback from a patch is not fun and is a sign 
>that
>core developers don't care about the newly proposed changes.
>
>----------
>
>+1 for getting serious about the other code checkers: pyflakes and
>pydoctor. Right now, is a PITA to run all these tools on your local
>computer ...
>
>Cheers
>--
>Adi Roiban


From adam at dormchatapp.com  Tue Dec  2 15:30:15 2014
From: adam at dormchatapp.com (Adam)
Date: Tue, 2 Dec 2014 17:30:15 -0500
Subject: [Twisted-Python] Python Twisted Questions
Message-ID: <CA+fVc1Hfh=OqUG3S+Kpa=ZBzOUg_A3Dz8qqmFV2-oszJLo52Yw@mail.gmail.com>

Hi All,



I have a two-part question I was hoping someone smarter than me could help
out with. :)



1. Please find attached Python script. We have integrated the Twisted
framework with iOS for chat module. Attached is our Python demo code in
which we have implemented this. The issue is when we try to connect with
the server through the terminal, we are getting the complete correct
response without any error. But when it was integrated on the iOS app, data
is getting received in chunks (i.e. if data exceeds 1366 bytes or above in
json size it comes in pieces which creates a problem when sending and
receiving chats)



2. Please find attached the iOS source code for Socket programming.



In this we have used sample code of iOS for Socket communication.



Once you run the app it will try auto-connecting to server and, once the
connection is established with server it will show the "GetData" button.



Using this button you can hit one command with the server chat module and
in response, the app will get the data from the server.



The issue here is we are not able to get all of the response data at once
as it gets distributed into packets and sent to the client one-by-one. When
we are getting this data alone in a number of packets then there is no
problem reconstructing it. But when the server is sending 2-3 different
types of datasets on the same socket then the different data packets are
not sequential, meaning it's not sending data2 first and once finished
sending data3 it will send data3. These data2 and data3 packets get mixed
and the client is getting the example shown below:



Data2 Packets:

Packet2_1

Packet2_2

Packet2_3

Packet2_4





Data3 Packets:

Packet3_1

Packet3_2

Packet3_3

Packet3_4





Receiving Order:

Packet2_1

Packet2_2

Packet3_1

Packet2_3

Packet3_2

Packet3_3

Packet2_4

Packet3_4



As you can see the receiving order is that of two different data sets,
which we are not able to reconstruct due to the wrong sequence of packets.





If any of this is confusing/requires further explanation, just let me know.
Also, if there is a better forum for me to direct this question just let me
know as well.



Thank you in advance for your help!



-Adam
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141202/73b71f0f/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo.py
Type: text/x-python-script
Size: 8515 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141202/73b71f0f/attachment-0001.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: SocketSampleDemo.zip
Type: application/zip
Size: 36445 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141202/73b71f0f/attachment-0001.zip>

From glyph at twistedmatrix.com  Tue Dec  2 17:55:16 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Dec 2014 01:55:16 +0100
Subject: [Twisted-Python] doc bloat
In-Reply-To: <20141202190539.23969.240747748.divmod.xquotient.29@top>
References: <D114730E-21D4-42F1-A8EB-98C3FD1243E7@twistedmatrix.com>
 <CBFD7586-9EB0-4F12-9F5B-B9B4140397C9@twistedmatrix.com>
 <CAFycZ9dpZSH3rzc-WP2mC6frv9RdFQjV1aQa8O9-udkxYCvHSA@mail.gmail.com>
 <20141202190539.23969.240747748.divmod.xquotient.29@top>
Message-ID: <31E42FCE-250A-4AA2-AAFD-5E2A39871A18@twistedmatrix.com>


> On Dec 2, 2014, at 20:05, exarkun at twistedmatrix.com wrote:

> Are there lots of useless docstrings on nested function definitions purely for the sake of twistedchecker?  Or are there undocumented nested functions that are actually a little bit difficult to understand on their own?

twistedchecker does not presently require nested function definitions to have docstrings.  I recently merged a fix to an incongruity where it was requiring this of classes defined within functions: <https://github.com/twisted/twistedchecker/commit/4af4e97f99d6e5f683b65272a8dbe7bce2087aa7>.  So this one, at least, we can cross off for the future :).

-glyph

From glyph at twistedmatrix.com  Tue Dec  2 18:21:45 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Dec 2014 02:21:45 +0100
Subject: [Twisted-Python] Python Twisted Questions
In-Reply-To: <CA+fVc1Hfh=OqUG3S+Kpa=ZBzOUg_A3Dz8qqmFV2-oszJLo52Yw@mail.gmail.com>
References: <CA+fVc1Hfh=OqUG3S+Kpa=ZBzOUg_A3Dz8qqmFV2-oszJLo52Yw@mail.gmail.com>
Message-ID: <BE1313DF-AAF9-48B0-9F04-A63C9D656130@twistedmatrix.com>


> On Dec 2, 2014, at 23:30, Adam <adam at dormchatapp.com> wrote:

I assume you're using this tutorial?

<http://www.raywenderlich.com/3932/networking-tutorial-for-ios-how-to-create-a-socket-based-iphone-app-and-server <http://www.raywenderlich.com/3932/networking-tutorial-for-ios-how-to-create-a-socket-based-iphone-app-and-server>>

It is unfortunate that this has not been updated with better information, it seems to confuse a lot of people making iOS applications ;).
> 1. Please find attached Python script. We have integrated the Twisted framework with iOS for chat module. Attached is our Python demo code in which we have implemented this. The issue is when we try to connect with the server through the terminal, we are getting the complete correct response without any error. But when it was integrated on the iOS app, data is getting received in chunks (i.e. if data exceeds 1366 bytes or above in json size it comes in pieces which creates a problem when sending and receiving chats)
> 
This is a frequently asked question:

<https://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith <https://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith>>

In other words, if you want a message-oriented protocol, you can't just use dataReceived.

For sending short JSON structures back and forth, line-delimited data structures are a reasonable choice.  On the Twisted side, you can use twisted.protocols.basic.LineReceiver, and override lineReceived instead of dataReceived.

On the iOS side, you need a radically different structure for buffering your input; you can't just stuff it into a buffer on the stack.  One quick hacky way to do this would be to give your object a NSString bufferString instance variable, and do bufferString = [bufferString stringByAppendingString: [[NSString alloc] initWithBytes:buffer length:len encoding:NSASCIIStringEncoding]]; NSArray* lines = [bufferString componentsSeparatedByString: @"\r\n"];, bufferString = [lines lastObject];, then loop over the other items in lines.

Keep in mind you also need to do this for output; as you send output to the server, you may not be able to send all of it at once, so you need to keep a buffer, and keep track of how much you've written, etc.

Or you could just build Python into your app on iOS and run Twisted in there.  If you manage to get that working be sure to let us know how it goes :-).  I am lead to believe that <http://omz-software.com/pythonista/> contains a template for at least getting the Python runtime going...

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141203/bef4468e/attachment.html>

From exarkun at twistedmatrix.com  Wed Dec  3 10:46:57 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 03 Dec 2014 17:46:57 -0000
Subject: [Twisted-Python] doc bloat
In-Reply-To: <31E42FCE-250A-4AA2-AAFD-5E2A39871A18@twistedmatrix.com>
References: <D114730E-21D4-42F1-A8EB-98C3FD1243E7@twistedmatrix.com>
 <CBFD7586-9EB0-4F12-9F5B-B9B4140397C9@twistedmatrix.com>
 <CAFycZ9dpZSH3rzc-WP2mC6frv9RdFQjV1aQa8O9-udkxYCvHSA@mail.gmail.com>
 <20141202190539.23969.240747748.divmod.xquotient.29@top>
 <31E42FCE-250A-4AA2-AAFD-5E2A39871A18@twistedmatrix.com>
Message-ID: <20141203174657.23969.1079878189.divmod.xquotient.34@top>

On 12:55 am, glyph at twistedmatrix.com wrote:
>
>>On Dec 2, 2014, at 20:05, exarkun at twistedmatrix.com wrote:
>
>>Are there lots of useless docstrings on nested function definitions 
>>purely for the sake of twistedchecker?  Or are there undocumented 
>>nested functions that are actually a little bit difficult to 
>>understand on their own?
>
>twistedchecker does not presently require nested function definitions 
>to have docstrings.  I recently merged a fix to an incongruity where it 
>was requiring this of classes defined within functions: 
><https://github.com/twisted/twistedchecker/commit/4af4e97f99d6e5f683b65272a8dbe7bce2087aa7>. 
>So this one, at least, we can cross off for the future :).

The broader context of this suggestion was that we should inspect the 
codebase to see what policy changes would improve the quality of the 
code/documentation while reducing the effort required to develop and 
maintain it.

It sounds like you have some ideas about such changes already.  Does 
that mean you'd like to suggest them (presumably in the form of issues 
filed against twistedhecker) instead of doing this investigation?

Jean-Paul


From adi at roiban.ro  Wed Dec  3 11:02:37 2014
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 3 Dec 2014 18:02:37 +0000
Subject: [Twisted-Python] doc bloat
In-Reply-To: <31E42FCE-250A-4AA2-AAFD-5E2A39871A18@twistedmatrix.com>
References: <D114730E-21D4-42F1-A8EB-98C3FD1243E7@twistedmatrix.com>
 <CBFD7586-9EB0-4F12-9F5B-B9B4140397C9@twistedmatrix.com>
 <CAFycZ9dpZSH3rzc-WP2mC6frv9RdFQjV1aQa8O9-udkxYCvHSA@mail.gmail.com>
 <20141202190539.23969.240747748.divmod.xquotient.29@top>
 <31E42FCE-250A-4AA2-AAFD-5E2A39871A18@twistedmatrix.com>
Message-ID: <CAFycZ9cspbURV5xmsWsj7=XgB6tRXZRjobpU61KVpgQis+pwbg@mail.gmail.com>

On 3 December 2014 at 00:55, Glyph <glyph at twistedmatrix.com> wrote:

>
> > On Dec 2, 2014, at 20:05, exarkun at twistedmatrix.com wrote:
>
> > Are there lots of useless docstrings on nested function definitions
> purely for the sake of twistedchecker?  Or are there undocumented nested
> functions that are actually a little bit difficult to understand on their
> own?
>
>
> twistedchecker does not presently require nested function

>From my experience, even nested functions need a sentence to describe
them....there are many nested functions used as deferred callbacks and I
prefer to have a sentence describing when they are called.

For callback methods I still don't know whether I should name based on what
they do or after the condition in which they are called. I prefer to name
them after what they do, but also to document in the docstring the
condition

But I don't think that nested functions required extensive apidoc/pydoctor
markup.

----------

In order to survey the current code, maybe we can create a wiki page, and
while reading/writing/reviewing code we can extract examples and put them
in the wiki page.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141203/f94d6e90/attachment.html>

From jasonjwwilliams at gmail.com  Wed Dec  3 13:03:15 2014
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Wed, 3 Dec 2014 13:03:15 -0700
Subject: [Twisted-Python] Silverberg CQL Driver
Message-ID: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>

Is anyone using the silverberg CQL (Cassandra) library for Twisted in
production? Just curious what people's experience with it is, since it
appears to be the most recently updated Twisted/CQL project.

-J
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141203/7eb6b31d/attachment.html>

From radix at twistedmatrix.com  Wed Dec  3 13:52:39 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 3 Dec 2014 14:52:39 -0600
Subject: [Twisted-Python] Silverberg CQL Driver
In-Reply-To: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>
References: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>
Message-ID: <2A763BE2-4CCC-40B4-8A26-185E8D49D3D1@twistedmatrix.com>

Yes, we use it in production in the Rackspace Otter project: https://github.com/rackerlabs/otter <https://github.com/rackerlabs/otter> 

The particular file we most use it in is here: https://github.com/rackerlabs/otter/blob/master/otter/models/cass.py#L530 <https://github.com/rackerlabs/otter/blob/master/otter/models/cass.py#L530> ? the connection attribute of that class is a silverberg client.

I?ve not personally touched that code but I know we've been using it in production for about a year.

-radix


> On Dec 3, 2014, at 2:03 PM, Jason J. W. Williams <jasonjwwilliams at gmail.com> wrote:
> 
> Is anyone using the silverberg CQL (Cassandra) library for Twisted in production? Just curious what people's experience with it is, since it appears to be the most recently updated Twisted/CQL project.
> 
> -J
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141203/301eaa94/attachment.html>

From roberto.polli at babel.it  Wed Dec  3 14:55:07 2014
From: roberto.polli at babel.it (Roberto Polli)
Date: Wed, 03 Dec 2014 22:55:07 +0100
Subject: [Twisted-Python] patch for t.p.logger.SyslogObserver (was #7549)
In-Reply-To: <3415350.qaLh0yVden@rpolli>
References: <2791328.hqOZV1DUty@rpolli>
 <8F3D48AE-0F9C-4BA3-97C1-1A3F9BC0B748@twistedmatrix.com>
 <3415350.qaLh0yVden@rpolli>
Message-ID: <2277994.xEdSQS5uQa@rpolli>

Hi Glyph|all,

I just noticed the t.p.logger is gone (or integrated). This made 
the patch for supporting logLevels in t.p.syslog straightforward: 

https://twistedmatrix.com/trac/attachment/ticket/7549/syslog-loglevels-7549.patch

There are plenty of tests and it worked nicely on my env,
allowing rsyslog to split my twistd app log in various files with different
priorities.

If you see some flaw in the tests just let me know... once I roll it 
for a while on my apps I'll put the ticket in review.

Sorry for the great delay :( 
Peace,
R.

-- 
Roberto Polli



From adi at roiban.ro  Thu Dec  4 06:48:21 2014
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 4 Dec 2014 13:48:21 +0000
Subject: [Twisted-Python] Automatically get dependencies in Buildbot
Message-ID: <CAFycZ9fhKZ7W51mzO=PercE0iVrWf_LTL0s=s4RzmEkPdgTEmw@mail.gmail.com>

Hi,

What do you say if Twisted buildbot would  be change to automatically
update dependencies before each test?

I have pushed some code here
https://github.com/twisted-infra/twisted-buildbot-configuration/pull/7 just
to start the conversation.

In this way, it  should be much easier to add new dependencies or to update
current dependencies... For example the patch from #7066 can not be tested
on current infrastructure.

I think the GitHub review is a better place to discuss this.

I have used a similar approach on my project which depends on about 100
packages (runtime, buildtime, ex sphinx and testing) and the whole step
takes 2 seconds (Unix/Linux/Windows) with a local cache and a local network
PyPi mirror (https://pypi.python.org/pypi/pypiserver)
With fixed version in dependencies, I never got any trouble.

Cheers
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141204/eec673d4/attachment.html>

From grigorescu_ciprian at yahoo.com  Thu Dec  4 10:33:21 2014
From: grigorescu_ciprian at yahoo.com (Grigorescu Ciprian)
Date: Thu, 4 Dec 2014 17:33:21 +0000 (UTC)
Subject: [Twisted-Python] Catch clientConnectionLost in a Factory
Message-ID: <418175901.5066979.1417714401622.JavaMail.yahoo@jws10651.mail.bf1.yahoo.com>

Hello,
I have a small problem. I using SMTPClient and ClientFactory in order to send emails. I have something like:????observer['workers'] = total mails to send(connections)
??? 
??? def got_result(*args):
??????? observer['results'] += 1

??? def got_error(err):
??????? observer['errors'] += 1

??? def got_end(_):
??????? if observer['results'] + observer['errors'] == observer['workers']:
??????????? reactor.stop()

??? factory = SomeFactory(...)??? reactor.connectTCP(...)
??? d.addCallbacks(got_result, got_error)
??? d.addBoth(got_end)

class SomeFactory(ClientFactory):

??? def clientConnectionLost(self, connector, reason):
??????? self.error_handle(reason)

??? def error_handle(self, reason):
??????? if self.deferred is not None:
??????????? d, self.deferred = self.deferred, None
??????????? d.errback(reason)


Everything? is working ok if I don't have errors like: [Failure instance: Traceback (failure with no frames): <class 'twisted.internet.error.ConnectionLost'>: Connection to the other side was lost in a non-clean fashion: Connection lost.When I have a error like that, the rector is not stopping because the error counter is not incrementing. But when I kill the reactor, got_error() receive the errors and observer['results'] + observer['errors'] == observer['workers'] is evaluated and the reactor stops(with a error of course, Can't stop reactor that isn't running :)).

I don't understand how can I make this work. Can someone help me?
Thanks,

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141204/be425009/attachment.html>

From glyph at twistedmatrix.com  Thu Dec  4 13:24:30 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 4 Dec 2014 21:24:30 +0100
Subject: [Twisted-Python] doc bloat
In-Reply-To: <20141203174657.23969.1079878189.divmod.xquotient.34@top>
References: <D114730E-21D4-42F1-A8EB-98C3FD1243E7@twistedmatrix.com>
 <CBFD7586-9EB0-4F12-9F5B-B9B4140397C9@twistedmatrix.com>
 <CAFycZ9dpZSH3rzc-WP2mC6frv9RdFQjV1aQa8O9-udkxYCvHSA@mail.gmail.com>
 <20141202190539.23969.240747748.divmod.xquotient.29@top>
 <31E42FCE-250A-4AA2-AAFD-5E2A39871A18@twistedmatrix.com>
 <20141203174657.23969.1079878189.divmod.xquotient.34@top>
Message-ID: <BB436431-FD74-45A0-9B4D-217CC732FD51@twistedmatrix.com>


> On Dec 3, 2014, at 18:46, exarkun at twistedmatrix.com wrote:
> 
> On 12:55 am, glyph at twistedmatrix.com wrote:
>> 
>>> On Dec 2, 2014, at 20:05, exarkun at twistedmatrix.com wrote:
>> 
>>> Are there lots of useless docstrings on nested function definitions purely for the sake of twistedchecker?  Or are there undocumented nested functions that are actually a little bit difficult to understand on their own?
>> 
>> twistedchecker does not presently require nested function definitions to have docstrings.  I recently merged a fix to an incongruity where it was requiring this of classes defined within functions: <https://github.com/twisted/twistedchecker/commit/4af4e97f99d6e5f683b65272a8dbe7bce2087aa7>. So this one, at least, we can cross off for the future :).
> 
> The broader context of this suggestion was that we should inspect the codebase to see what policy changes would improve the quality of the code/documentation while reducing the effort required to develop and maintain it.
> 
> It sounds like you have some ideas about such changes already.  Does that mean you'd like to suggest them (presumably in the form of issues filed against twistedhecker) instead of doing this investigation?

In this one case, I believed I was simply bringing our tooling into line with existing policy.  twistedchecker already doesn't require docstrings on callbacks, it seemed like a clear bug that it required docstrings on those callbacks if they existed inside a class statement.

The letter of the policy is a little ambiguous, and perhaps it should be updated.  <https://twistedmatrix.com/documents/current/core/development/policy/coding-standard.html#docstrings <https://twistedmatrix.com/documents/current/core/development/policy/coding-standard.html#docstrings>> says docstrings "should" always be used, but it doesn't say "must".  And, as written, it has no exception for callbacks, which clearly contravenes our existing tooling and practice.

I do have a couple of other more specific ideas and I will almost certainly file twistedchecker issues for them :).

More broadly speaking I think it would be great to have some investigation into our code-quality issues.  I think that there are definitely lots of useless docstrings for the sake of twistedchecker, and I'm not quite sure how to classify those.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141204/20995ae4/attachment.html>

From glyph at twistedmatrix.com  Thu Dec  4 13:27:46 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 4 Dec 2014 21:27:46 +0100
Subject: [Twisted-Python] patch for t.p.logger.SyslogObserver (was #7549)
In-Reply-To: <2277994.xEdSQS5uQa@rpolli>
References: <2791328.hqOZV1DUty@rpolli>
 <8F3D48AE-0F9C-4BA3-97C1-1A3F9BC0B748@twistedmatrix.com>
 <3415350.qaLh0yVden@rpolli> <2277994.xEdSQS5uQa@rpolli>
Message-ID: <4E107FFC-5FED-4551-AB64-F27947296617@twistedmatrix.com>


> On Dec 3, 2014, at 22:55, Roberto Polli <roberto.polli at babel.it> wrote:
> 
> Hi Glyph|all,
> 
> I just noticed the t.p.logger is gone (or integrated). This made 
> the patch for supporting logLevels in t.p.syslog straightforward: 

It's not dead, it's just... resting.

More details here: <http://twistedmatrix.com/trac/milestone/New%20Logging%20System <http://twistedmatrix.com/trac/milestone/New%20Logging%20System>>

> https://twistedmatrix.com/trac/attachment/ticket/7549/syslog-loglevels-7549.patch
> 
> There are plenty of tests and it worked nicely on my env,
> allowing rsyslog to split my twistd app log in various files with different
> priorities.
> 
> If you see some flaw in the tests just let me know... once I roll it 
> for a while on my apps I'll put the ticket in review.
> 
> Sorry for the great delay :( 

Thanks for your contribution!  I'll probably only look at the tests once it's in review, though ;).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141204/105c6dce/attachment.html>

From glyph at twistedmatrix.com  Thu Dec  4 13:30:51 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 4 Dec 2014 21:30:51 +0100
Subject: [Twisted-Python] Automatically get dependencies in Buildbot
In-Reply-To: <CAFycZ9fhKZ7W51mzO=PercE0iVrWf_LTL0s=s4RzmEkPdgTEmw@mail.gmail.com>
References: <CAFycZ9fhKZ7W51mzO=PercE0iVrWf_LTL0s=s4RzmEkPdgTEmw@mail.gmail.com>
Message-ID: <EE52E45A-87BE-43C8-8E69-79B88E583DA4@twistedmatrix.com>


> On Dec 4, 2014, at 14:48, Adi Roiban <adi at roiban.ro> wrote:
> 
> I think the GitHub review is a better place to discuss this.

It looks like adi got his wish - in case anyone else is interested, <https://github.com/twisted-infra/twisted-buildbot-configuration/pull/7 <https://github.com/twisted-infra/twisted-buildbot-configuration/pull/7>> has been quite active :).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141204/e2b836a9/attachment.html>

From roberto.polli at babel.it  Fri Dec  5 05:52:18 2014
From: roberto.polli at babel.it (Roberto Polli)
Date: Fri, 05 Dec 2014 13:52:18 +0100
Subject: [Twisted-Python] patch for t.p.logger.SyslogObserver (was #7549)
In-Reply-To: <4E107FFC-5FED-4551-AB64-F27947296617@twistedmatrix.com>
References: <2791328.hqOZV1DUty@rpolli> <2277994.xEdSQS5uQa@rpolli>
 <4E107FFC-5FED-4551-AB64-F27947296617@twistedmatrix.com>
Message-ID: <1915627.e1khLz6WT8@rpolli>

On Thursday 04 December 2014 21:27:46 Glyph wrote:
> Thanks for your contribution!  I'll probably only look at the tests once
> it's in review, though ;).
Ok, I'll search in list if there's somebody interested in trying the patch...

Peace,
R.
-- 
Roberto Polli
Community Manager
Babel - a business unit of Par-Tec S.p.A. - http://www.babel.it 
T: +39.06.9826.9651 M: +39.340.652.2736 F: +39.06.9826.9680
P.zza S.Benedetto da Norcia, 33 - 00040 Pomezia (Roma)

CONFIDENZIALE: Questo messaggio ed i suoi allegati sono di carattere 
confidenziale per i destinatari in indirizzo.
E' vietato l'inoltro non autorizzato a destinatari diversi da quelli indicati 
nel messaggio originale.
Se ricevuto per errore, l'uso del contenuto e' proibito; si prega di 
comunicarlo al mittente e cancellarlo immediatamente.


From tobias.oberstein at tavendo.de  Fri Dec  5 09:27:56 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 5 Dec 2014 08:27:56 -0800
Subject: [Twisted-Python] Looking for Python/Twisted developer to work on
	Open-source
Message-ID: <634914A010D0B943A035D226786325D44974B62CA1@EXVMBX020-12.exch020.serverdata.net>

Hi,

we're looking for an experienced, dedicated Python / Twisted developer to work on http://crossbar.io/ helping us move faster.

The code base is around 40k LOC right now, all open-source here

https://github.com/crossbario/crossbar
https://github.com/tavendo/AutobahnPython

This stuff is all new, probably non-trivial, but I'd say technically exciting.  Means: a "challenge" should be something that wakes you up;)

We have big plans, and we're starting to see strong uptake - both community and commercial, in particular in IoT.

You'll work remotely, as you like, when and where you like. Payment by hours for now, maybe more down the road. 

If you are interested, please respond by mail, including some interesting bits about you, plus your GitHub handle (or similar), expectations, time zone and rate.

If you are not interested, please forward;)

Cheers,
/Tobias


From alexandre at quessy.net  Sat Dec  6 11:15:39 2014
From: alexandre at quessy.net (Alexandre Quessy)
Date: Sat, 6 Dec 2014 13:15:39 -0500
Subject: [Twisted-Python] Mixing Python threads and Twisted code
Message-ID: <CACjeMqQbX5-+H5ds1DCAZiAFkU=EYfYNk0tDVTq_RY+OKvg9qw@mail.gmail.com>

Hello everyone,

What happens if some code starts a thread while I am using Twisted's
reactor?

Here is what I need to use:
https://github.com/ekulyk/PythonPusherClient/blob/master/pusherclient/connection.py#L12

This thread polls some socket to handle received TCP messages. It appears
it has been very slow in production. Is it this mix of twisted and
non-twisted threading that causes this brutal slowdown? If so, how can I
easily speed it up without having to twistify the library I need to use?
(and practically rewrite it)

Thank you,
-- 
Alexandre Quessy - ???? - ???????
http://alexandre.quessy.net - Artiste en nouveaux m?dias
http://perte-de-signal.org - Membre de Perte de signal
http://sourcelibre.net - D?veloppement logiciel et conception de sites Web
http://labalab.ca - Impliqu? dans Lab?Lab - communaut? de pratique en arts
num?riques
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141206/76657c9f/attachment.html>

From exarkun at twistedmatrix.com  Sat Dec  6 11:47:51 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Dec 2014 18:47:51 -0000
Subject: [Twisted-Python] Mixing Python threads and Twisted code
In-Reply-To: <CACjeMqQbX5-+H5ds1DCAZiAFkU=EYfYNk0tDVTq_RY+OKvg9qw@mail.gmail.com>
References: <CACjeMqQbX5-+H5ds1DCAZiAFkU=EYfYNk0tDVTq_RY+OKvg9qw@mail.gmail.com>
Message-ID: <20141206184751.23969.1685530235.divmod.xquotient.39@top>

On 06:15 pm, alexandre at quessy.net wrote:
>Hello everyone,
>
>What happens if some code starts a thread while I am using Twisted's
>reactor?

Nothing special.
>Here is what I need to use:
>https://github.com/ekulyk/PythonPusherClient/blob/master/pusherclient/connection.py#L12
>
>This thread polls some socket to handle received TCP messages. It 
>appears
>it has been very slow in production. Is it this mix of twisted and
>non-twisted threading that causes this brutal slowdown?

Not likely.  Twisted doesn't have its own threading implementation. 
Twisted has a threadpool module which is a thin layer on top of Python's 
threading module.
>If so, how can I
>easily speed it up without having to twistify the library I need to 
>use?
>(and practically rewrite it)

Profile it.  Find the particular operations that are slow.  Then you'll 
be one step closer to knowing how to speed things up.

Jean-Paul


From trac at twistedmatrix.com  Sun Dec  7 00:05:17 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 07 Dec 2014 07:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1417935917.98.8427750577423996578@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141207/64369f27/attachment.html>

From alexandre at quessy.net  Sun Dec  7 16:05:23 2014
From: alexandre at quessy.net (Alexandre Quessy)
Date: Sun, 7 Dec 2014 18:05:23 -0500
Subject: [Twisted-Python] Mixing Python threads and Twisted code
In-Reply-To: <20141206184751.23969.1685530235.divmod.xquotient.39@top>
References: <CACjeMqQbX5-+H5ds1DCAZiAFkU=EYfYNk0tDVTq_RY+OKvg9qw@mail.gmail.com>
 <20141206184751.23969.1685530235.divmod.xquotient.39@top>
Message-ID: <CACjeMqR0GKhU_Oo78OcYgN-XNZeNuHkQ1MLkGgArOs_+FO+LuQ@mail.gmail.com>

Hello everyone,
Thanks Jean-Paul for the tips!

Now, I figured out that this thread was calling some callbacks, which in
turn were either sending some UDP using a child of Twisted's datagram
protocol, or launching processes using t.p.procutils.which and
t.i.utils.getProcessOutputAndValue. None of this is guaranteed to be
thread-safe, according to
http://twistedmatrix.com/documents/current/core/howto/threading.html.

I just added a reactor.callFromThread before calling my callbacks, and it
should now be much faster...

Best,

2014-12-06 13:47 GMT-05:00 <exarkun at twistedmatrix.com>:

> On 06:15 pm, alexandre at quessy.net wrote:
>
>> Hello everyone,
>>
>> What happens if some code starts a thread while I am using Twisted's
>> reactor?
>>
>
> Nothing special.
>
>> Here is what I need to use:
>> https://github.com/ekulyk/PythonPusherClient/blob/master/pusherclient/
>> connection.py#L12
>>
>> This thread polls some socket to handle received TCP messages. It appears
>> it has been very slow in production. Is it this mix of twisted and
>> non-twisted threading that causes this brutal slowdown?
>>
>
> Not likely.  Twisted doesn't have its own threading implementation.
> Twisted has a threadpool module which is a thin layer on top of Python's
> threading module.
>
>> If so, how can I
>> easily speed it up without having to twistify the library I need to use?
>> (and practically rewrite it)
>>
>
> Profile it.  Find the particular operations that are slow.  Then you'll be
> one step closer to knowing how to speed things up.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alexandre Quessy - ???? - ???????
http://alexandre.quessy.net - Artiste en nouveaux m?dias
http://perte-de-signal.org - Membre de Perte de signal
http://sourcelibre.net - D?veloppement logiciel et conception de sites Web
http://labalab.ca - Impliqu? dans Lab?Lab - communaut? de pratique en arts
num?riques
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141207/8ebc6d04/attachment.html>

From mikeepps756 at gmail.com  Tue Dec  9 09:08:27 2014
From: mikeepps756 at gmail.com (Mike Epps)
Date: Tue, 9 Dec 2014 19:08:27 +0300
Subject: [Twisted-Python] Mixing Twisted with Kivy
Message-ID: <CAPTefu1w6Ewf4RB9Q9CfRtWE6fR1hcH67j4dW6ATgB7p7Fa9VA@mail.gmail.com>

Hello,
Im looking for examples of mixing twisted with kivy. The only examples I
have seen are from the kivy site but they do not include examples that show
how to use the kv language files separate from the python code. I would
appreciate any links that show such examples.
thnx..
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141209/277bbd16/attachment.html>

From itamar at itamarst.org  Wed Dec 10 11:19:57 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 10 Dec 2014 13:19:57 -0500
Subject: [Twisted-Python] ANN: Eliot 0.6: Logging for Complex & Distributed
	Systems
Message-ID: <30fa71b3f56970a946f32cb18f66794e@itamarst.org>

 
Eliot is a logging system designed not only for simple applications but
for complex applications as well, including distributed systems. Eliot
supports simple structured messages but can also record a causal chain
of actions happening within and across process boundaries: a logical
trace of the system's operation. 

Structured, action-oriented logging is a great help when debugging
problems. For example, here are the combined logs of a request
originating from a client process being sent to a server. Notice how
easy it is to figure out the cause of the problem, even though it's
opaque to the client: 

process='client' task_uuid='40be6df2' task_level=[1] action_type='main'
 action_status='started'

process='client' task_uuid='40be6df2' task_level=[2, 1]
action_type='http_request'
 action_status='started' x=5 y=0

process='server' task_uuid='40be6df2' task_level=[2, 2, 1]
action_type='eliot:remote_task'
 action_status='started'

process='server' task_uuid='40be6df2' task_level=[2, 2, 2, 1]
action_type='divide'
 action_status='started' x=5 y=0

process='server' task_uuid='40be6df2' task_level=[2, 2, 2, 2]
action_type='divide'
 action_status='failed' exception='exceptions.ZeroDivisionError'
reason='integer division or modulo by zero'

process='server' task_uuid='40be6df2' task_level=[2, 2, 3]
action_type='eliot:remote_task'
 action_status='failed' exception='exceptions.ZeroDivisionError'
reason='integer division or modulo by zero'

process='client' task_uuid='40be6df2' task_level=[2, 3]
action_type='http_request'
 action_status='failed' exception='requests.exception.HTTPError'
reason='500 Server Error: INTERNAL SERVER ERROR'

process='client' task_uuid='40be6df2' task_level=[3] action_type='main'
 action_status='failed' exception='requests.exception.HTTPError'
reason='500 Server Error: INTERNAL SERVER ERROR'

WHAT'S NEW IN 0.6.0

Incompatible output format change! In previous versions the ordering of
messages and actions was ambiguous and could not be deduced from
out-of-order logs, and even where it was possible sorting correctly was
difficult. To fix this the action_counter field was removed and now all
messages can be uniquely located within a specific task by the values in
an _improved task_level field_ [1]. 

Features: 

 	* Eliot tasks can now _span multiple processes and threads_ [2],
allowing for easy tracing of actions in distributed applications.
 	* _eliot.add_global_fields_ [3] allows adding fields with specific
values to all Eliot messages logged by your program. This can be used to
e.g. distinguish between log messages from different processes by
including relevant identifying information.

Bug fixes: 

 	* On Python 3 files that accept unicode (e.g. sys.stdout) should now
work.

Downloads are available on PyPI [4]. 

Documentation can be found on Read The Docs [5]. 

Bugs and feature requests should be filed at the project Github page
[6]. 

You can ask for help on IRC at the #eliot channel on irc.freenode.net
[7]. 
 

Links:
------
[1] http://eliot.readthedocs.org/en/0.6.0/fields.html#task-fields
[2]
http://eliot.readthedocs.org/en/0.6.0/threads.html#cross-process-tasks
[3] http://eliot.readthedocs.org/en/0.6.0/output.html#add-global-fields
[4] https://pypi.python.org/pypi/eliot
[5] https://eliot.readthedocs.org/
[6] https://github.com/ClusterHQ/eliot
[7] http://irc.freenode.net
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141210/ee1b1928/attachment.html>

From glyph at twistedmatrix.com  Thu Dec 11 16:47:18 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 12 Dec 2014 00:47:18 +0100
Subject: [Twisted-Python] Tubes!
In-Reply-To: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
Message-ID: <33AFD868-F24B-45DC-908C-E5850C19A9A0@twistedmatrix.com>


> On Jul 10, 2014, at 21:32, exarkun at twistedmatrix.com wrote:
> 
> Tubes have been largely Glyph's effort (though a lot of people have contributed in one way or another).  And a large effort it's been. Development is proceeding in a Twisted branch and comes to over three thousand lines of additions so far.
> 
> Given the large size of the implementation and the long time that this effort has been underway (I remember the Twisted meetup at the Rackspace offices that *I* attended when I was visiting SF... a year and a half ago... at which point tubes wasn't exactly a brand new project) I'd like to re-raise the idea that the best next step for the project is to see some distribution in its *current* state.

When Jean-Paul originally wrote this message, I strongly disagreed.

In the intervening six months, I've been working on Tubes on and off.  In the last couple of weeks, I've had a bit of time to make a concerted effort to improve the branch, and it is starting to approach something like a finished state: there is still a lot of polish necessary, but as I've tested them against more and more use-cases, the core abstractions seem to be holding up rather well, and several rounds of increasingly elaborate use-cases did not result in any big rewrites or mystifying un-debuggable re-entrancy scenarios in the implementation.

One change Thomas Herv? assisted me in making today was to remove Deferred support from the core of "tube" itself, and instead factor it out into a separate module.  Interested readers may find that module here:

<https://github.com/twisted/twisted/blob/tubes-1956-8/twisted/tubes/undefer.py>

It's not finished (mostly it needs testing for errbacks and the addition of yielding non-Deferred values).

This change radically simplifies the conceptual model around consuming asynchronous results within the implementation. If you want to deal with results instead of Deferreds, you just create this tube that turns Deferreds into their results - the only special-casing inside tube itself is a special value that says "when you yield this, don't actually emit an output to the next drain in the series".

Another thing that this change does is illustrate the fact that literally nothing in the core part of Tubes has come to depend on Twisted - and indeed, as the factoring has improved over time, the coupling between Twisted and the core Tubes abstraction has become looser and looser.  This is a very good thing architecturally.  Examining the few remaining points of coupling, there are pretty much only two: twisted's logging serves as the global error-handler hook (which can be easily changed to a simple bootstrapping API) and the use of Failure as the "reason" parameter to the .flowStopped and .stopped methods.  This was copied from IProtocol, of course, but I think that upon reflection it is a bad idea.  Failure, even at its best, is simply an abstraction over exception-as-raised.  For Deferreds, this makes sense; asynchronous errors are similar to, and may be directly caused by, code raising an unexpected exception.  However, although Tubes are analogous, a raised exception is an anomalous way for a flow to terminate, and I think the right thing to do there is actually to unconditionally log the exception, passing only a token value saying "application error" into the flowStopped method itself; the main use-case for the "reason" parameter is to distinguish between subtly different protocol conditions which may cause a connection termination; it's not an appropriate place to start handling unexpected exceptions.  (When I have written code that does this using Twisted the inevitable result is an exception whose traceback disappears mysteriously and makes debugging a pain.)

To sum up, the more this abstraction decouples from other things within Twisted, the more it becomes depended upon rather than itself doing the depending, the cleaner, simpler, and easier to use it gets.

So now I think I was wrong.  I now agree with Jean-Paul, and in fact the pendulum of my opinion has swung a bit farther in the other direction.  Not only should Tubes be released independently, I think they are a lower-level library that Twisted should eventually depend on.  This library could just as easily have adapters for other loops, like tornado and asyncio, as well as providing potentially interesting support for doing things like eventually replacing Deferreds - see for example <https://pypi.python.org/pypi/effect>.

So rather than have a single "tubes" package, I think I will break the branch into two pieces:

The "tubes" package itself, which will have no external dependencies and will pretty much just be buffer-management, fan-in, fan-out, buffering, throttling, filtering, routing, and framing-protocol code, intended to remain separate for the long term.  This will probably mean some small amount of code duplication between LineReceiver et. al. and tubes.framing, but that seems fine to me.

The "twisted+tubes" package, perhaps named "helical" (since that is (A) an adjective that describes something which is (B) twisted and (C) also a tube), that depends on tubes and twisted, includes the integration points for endpoint, deferreds, and protocol, and which may be suitable for merging into Twisted later.

I'm traveling at the moment and might not have much time to work on this in the coming week, so if anyone wants to comment on these plans you have plenty of time :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141212/dde765e7/attachment.html>

From itamar at itamarst.org  Thu Dec 11 16:55:28 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 11 Dec 2014 18:55:28 -0500
Subject: [Twisted-Python] Tubes!
In-Reply-To: <33AFD868-F24B-45DC-908C-E5850C19A9A0@twistedmatrix.com>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <33AFD868-F24B-45DC-908C-E5850C19A9A0@twistedmatrix.com>
Message-ID: <548A2EF0.9020608@itamarst.org>

I would suggest including the Twisted support inside tubes as a first 
pass, restricted to a module (e.g. tubes.helical). Less overhead and as 
long as it's optional it's not preventing anyone from using tubes with 
other frameworks.

Otherwise, +100.


From donald at stufft.io  Thu Dec 11 17:00:26 2014
From: donald at stufft.io (Donald Stufft)
Date: Thu, 11 Dec 2014 19:00:26 -0500
Subject: [Twisted-Python] Tubes!
In-Reply-To: <548A2EF0.9020608@itamarst.org>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <33AFD868-F24B-45DC-908C-E5850C19A9A0@twistedmatrix.com>
 <548A2EF0.9020608@itamarst.org>
Message-ID: <305293C0-E41E-43E4-9D2F-8C78CD20B72F@stufft.io>


> On Dec 11, 2014, at 6:55 PM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> I would suggest including the Twisted support inside tubes as a first pass, restricted to a module (e.g. tubes.helical). Less overhead and as long as it's optional it's not preventing anyone from using tubes with other frameworks.
> 
> Otherwise, +100.

If you do this, I would just do something like tubes.integrations.{twisted,tornado,asyncio} etc.

---
Donald Stufft
PGP: 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA



From radix at twistedmatrix.com  Thu Dec 11 17:09:17 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 11 Dec 2014 18:09:17 -0600
Subject: [Twisted-Python] Tubes!
In-Reply-To: <305293C0-E41E-43E4-9D2F-8C78CD20B72F@stufft.io>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <33AFD868-F24B-45DC-908C-E5850C19A9A0@twistedmatrix.com>
 <548A2EF0.9020608@itamarst.org>
 <305293C0-E41E-43E4-9D2F-8C78CD20B72F@stufft.io>
Message-ID: <90140F63-0A97-49B3-A5A1-8EF39ACE1A60@twistedmatrix.com>


> On Dec 11, 2014, at 6:00 PM, Donald Stufft <donald at stufft.io> wrote:
> 
> 
>> On Dec 11, 2014, at 6:55 PM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
>> 
>> I would suggest including the Twisted support inside tubes as a first pass, restricted to a module (e.g. tubes.helical). Less overhead and as long as it's optional it's not preventing anyone from using tubes with other frameworks.
>> 
>> Otherwise, +100.
> 
> If you do this, I would just do something like tubes.integrations.{twisted,tornado,asyncio} etc.
> 


I think I prefer integration modules to be separate, though I myself have broken this rule in the Effect library (which has an effect.twisted module). I think I may separate it out to another library if I ever release Effect as a non-alpha. Keeping integration libraries separate keeps your dependencies nice and simple. And we live in a world where installing dependencies is trivial now, right? :)

But yeah, +100. I?m really happy you came to this conclusion.

-radix

From sank.daniel at gmail.com  Thu Dec 11 23:43:42 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 11 Dec 2014 22:43:42 -0800
Subject: [Twisted-Python] Tubes!
In-Reply-To: <90140F63-0A97-49B3-A5A1-8EF39ACE1A60@twistedmatrix.com>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <33AFD868-F24B-45DC-908C-E5850C19A9A0@twistedmatrix.com>
 <548A2EF0.9020608@itamarst.org>
 <305293C0-E41E-43E4-9D2F-8C78CD20B72F@stufft.io>
 <90140F63-0A97-49B3-A5A1-8EF39ACE1A60@twistedmatrix.com>
Message-ID: <CAKN9TD+dA0+AYtonk5MCmxakp68xvv5dJUL=1T77U3_OPN7fpA@mail.gmail.com>

A helix is twisted but isn't necessarily a tube. Macaroni on the other
hand...

On Thu, Dec 11, 2014 at 4:09 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:
>
>
> > On Dec 11, 2014, at 6:00 PM, Donald Stufft <donald at stufft.io> wrote:
> >
> >
> >> On Dec 11, 2014, at 6:55 PM, Itamar Turner-Trauring <
> itamar at itamarst.org> wrote:
> >>
> >> I would suggest including the Twisted support inside tubes as a first
> pass, restricted to a module (e.g. tubes.helical). Less overhead and as
> long as it's optional it's not preventing anyone from using tubes with
> other frameworks.
> >>
> >> Otherwise, +100.
> >
> > If you do this, I would just do something like
> tubes.integrations.{twisted,tornado,asyncio} etc.
> >
>
>
> I think I prefer integration modules to be separate, though I myself have
> broken this rule in the Effect library (which has an effect.twisted
> module). I think I may separate it out to another library if I ever release
> Effect as a non-alpha. Keeping integration libraries separate keeps your
> dependencies nice and simple. And we live in a world where installing
> dependencies is trivial now, right? :)
>
> But yeah, +100. I?m really happy you came to this conclusion.
>
> -radix
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141211/4acc8af6/attachment-0001.html>

From trac at twistedmatrix.com  Sun Dec 14 00:05:16 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 14 Dec 2014 07:05:16 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1418540716.86.7528449025740691277@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141214/f5a13930/attachment.html>

From adam at dormchatapp.com  Thu Dec 18 11:31:18 2014
From: adam at dormchatapp.com (Adam Michalski)
Date: Thu, 18 Dec 2014 10:31:18 -0800 (PST)
Subject: [Twisted-Python] =?utf-8?q?Python_Twisted_Questions=E2=80=8B?=
 =?utf-8?b?4oCL4oCL4oCL?=
In-Reply-To: <1418781491602.376b09de@Nodemailer>
References: <1418781491602.376b09de@Nodemailer>
Message-ID: <1418927477437.094c5a46@Nodemailer>

Hi All!
 ?
 Thanks so much for the response. We?ve looked into it and here are our findings:
 ?
 ?
 We have implemented Linereceiver in our original script to receive the data.
 ?
 It?s working successfully if we connect to the server through terminal ? i.e. we?re getting proper input from terminal client and also proper response is received to the terminal client.
 ?
 It fails when we try to integrate this with the iOS. i.e. it?s connecting to the server successfully but not getting the inputs properly from the iOS client.
 ?
 e.g., if the command is:
 ?
 "demo:{"userid":"1","chatroomid":"1"}"
 ?
 On server I am getting the below:
 ?
 demo:{
 ?
 Please find attached the python script.
 ?
 Note: This seems to be an iOS specific Python issue - when running the same script from Mac OS X it is functioning as expected. If there?s anyone you believe we should redirect the question towards, just let me know. :)
 ?
 Again, I really appreciate your help with this. You?ve been super helpful.
 ?
 -Adam
 Founder, DormChat
 dormchat.com
 
 
Begin forwarded message:

On Tuesday, Dec 2, 2014 at 8:22 PM, Glyph <glyph at twistedmatrix.com>, wrote:


 On Dec 2, 2014, at 23:30, Adam <adam at dormchatapp.com> wrote: 

I assume you're using this tutorial?
 

 <http://www.raywenderlich.com/3932/networking-tutorial-for-ios-how-to-create-a-socket-based-iphone-app-and-server>
 

 It is unfortunate that this has not been updated with better information, it seems to confuse a lot of people making iOS applications ;).
  1. Please find attached Python script.?We have integrated the Twisted framework with iOS for chat module. Attached is our Python demo code in which we have implemented this. The issue is when we try to connect with the server through the terminal, we are getting the complete correct response without any error. But when it was integrated on the iOS app, data is getting received in chunks (i.e. if data exceeds 1366 bytes or above in json size it comes in pieces which creates a problem when sending and receiving chats)

This is a frequently asked question:
 

 <https://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith>

 
In other words, if you want a message-oriented protocol, you can't just use dataReceived.
 

 For sending short JSON structures back and forth, line-delimited data structures are a reasonable choice. ?On the Twisted side, you can use twisted.protocols.basic.LineReceiver, and override lineReceived instead of dataReceived.
 

 On the iOS side, you need a radically different structure for buffering your input; you can't just stuff it into a buffer on the stack. ?One quick hacky way to do this would be to give your object a NSString bufferString instance variable, and do bufferString = [bufferString stringByAppendingString: [[NSString?alloc]?initWithBytes:buffer length:len encoding:NSASCIIStringEncoding]]; NSArray* lines = [bufferString componentsSeparatedByString: @"\r\n"];, bufferString = [lines lastObject];, then loop over the other items in lines.
 

 Keep in mind you also need to do this for output; as you send output to the server, you may not be able to send all of it at once, so you need to keep a buffer, and keep track of how much you've written, etc.
 

 Or you could just build Python into your app on iOS and run Twisted in there. ?If you manage to get that working be sure to let us know how it goes :-). ?I am lead to believe that <http://omz-software.com/pythonista/> contains a template for at least getting the Python runtime going...
 

 -glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141218/bee2460f/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: newdemo.py
Type: application/octet-stream
Size: 9196 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141218/bee2460f/attachment.obj>

From trac at twistedmatrix.com  Sun Dec 21 00:05:16 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 21 Dec 2014 07:05:16 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1419145516.99.8899354704451720435@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141221/6bdce11d/attachment.html>

From adi.lavi at cortica.com  Sun Dec 21 04:47:11 2014
From: adi.lavi at cortica.com (Adi Lavi)
Date: Sun, 21 Dec 2014 13:47:11 +0200
Subject: [Twisted-Python] Scrapy spiders waiting in reactor thread when
 callFromThread gets call repeatedly
Message-ID: <CANED_30Lh0CaQuX=i8je4Z4W855UZf5pJnUuhVxFsjFUig3jag@mail.gmail.com>

Hi,
I am using Pika's asynchronous consumer implementation with Scrapy and
Twisted. I have twisted reactor running on the main thread, and Rabbit
consumer running on a background thread. When I get a message and want to
start my spider, I use 'callFromThread' to wake the reactor thread, init
the spider and start crawling.

Alas, on high load of Q messages, I find that because 'callFromThread' is
called all the time, Scrapy does not start downloading until there is some
'break' in these calls.

I am wondering what is the best approach to gain high scale with Scrapy,
Twisted and RabbitMQ. Should I continue using the current design, and
simply do some buffering or batching to reduce the 'callFromThread'
frequency? Perhaps I should use a synchronous design?

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141221/3351d230/attachment.html>

From clayton.daley at gmail.com  Sun Dec 21 14:05:44 2014
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sun, 21 Dec 2014 16:05:44 -0500
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
Message-ID: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>

Are there any major disadvantages of using pymongo with callInThread
instead of txmongo?  I'd like to take advantage of some newer features in
pymongo (unfortunately not available in txmongo) and it's certainly easier
to maintain feature parity using callInThread.

Clayton Daley
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141221/b52b2677/attachment.html>

From dynamicgl at gmail.com  Mon Dec 22 23:51:03 2014
From: dynamicgl at gmail.com (Gelin Yan)
Date: Tue, 23 Dec 2014 14:51:03 +0800
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
Message-ID: <CABkOF6Q-A_96kzX=DyLhWn1HF9CBiRu+BrkuuVviCozAxL7H7g@mail.gmail.com>

On Mon, Dec 22, 2014 at 5:05 AM, Clayton Daley <clayton.daley at gmail.com>
wrote:

> Are there any major disadvantages of using pymongo with callInThread
> instead of txmongo?  I'd like to take advantage of some newer features in
> pymongo (unfortunately not available in txmongo) and it's certainly easier
> to maintain feature parity using callInThread.
>
> Clayton Daley
>
>
>
Hi Clayton

    Txmongo has been inactive for a while so I suggest using pymongo &
twisted thread pool. I have been using them for a couple of years and they
work quite well.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141223/e1bef73e/attachment.html>

From dustin at v.igoro.us  Tue Dec 23 08:49:47 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Tue, 23 Dec 2014 10:49:47 -0500
Subject: [Twisted-Python] Scrapy spiders waiting in reactor thread when
 callFromThread gets call repeatedly
In-Reply-To: <CANED_30Lh0CaQuX=i8je4Z4W855UZf5pJnUuhVxFsjFUig3jag@mail.gmail.com>
References: <CANED_30Lh0CaQuX=i8je4Z4W855UZf5pJnUuhVxFsjFUig3jag@mail.gmail.com>
Message-ID: <CAJtE5vQT66fVk=UuadH_H=fwJYaLUvYAfmVgm0918LFfBpsvJg@mail.gmail.com>

What *is* happening?  Underneath, callFromThread is basically just
setting a flag and writing to a file descriptor or some similar thing
to wake the reactor from its polling sleep.  Even at very high load,
the reactor should be multiplexing reads from that file descriptor
(which can act as a form of batching) with actual scraping.

Dustin

On Sun, Dec 21, 2014 at 6:47 AM, Adi Lavi <adi.lavi at cortica.com> wrote:
> Hi,
> I am using Pika's asynchronous consumer implementation with Scrapy and
> Twisted. I have twisted reactor running on the main thread, and Rabbit
> consumer running on a background thread. When I get a message and want to
> start my spider, I use 'callFromThread' to wake the reactor thread, init the
> spider and start crawling.
>
> Alas, on high load of Q messages, I find that because 'callFromThread' is
> called all the time, Scrapy does not start downloading until there is some
> 'break' in these calls.
>
> I am wondering what is the best approach to gain high scale with Scrapy,
> Twisted and RabbitMQ. Should I continue using the current design, and simply
> do some buffering or batching to reduce the 'callFromThread' frequency?
> Perhaps I should use a synchronous design?
>
> Thanks
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From clayton.daley at gmail.com  Wed Dec 24 17:26:53 2014
From: clayton.daley at gmail.com (Clayton Daley)
Date: Wed, 24 Dec 2014 19:26:53 -0500
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CABkOF6Q-A_96kzX=DyLhWn1HF9CBiRu+BrkuuVviCozAxL7H7g@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <CABkOF6Q-A_96kzX=DyLhWn1HF9CBiRu+BrkuuVviCozAxL7H7g@mail.gmail.com>
Message-ID: <CACKEAnW8W4cHjvgQ8iHX+3z8yXjGcXZoa=NbqsWZoS+Pdmk5Qw@mail.gmail.com>

Thanks.  Are you aware of any resources that clarify which pymongo calls
are lazy and which actually result in calls to the Mongo server (thus
really benefit from derferToThread)?


Clayton Daley
clayton.daley at gmail.com
513.505.1236

On Tue, Dec 23, 2014 at 1:51 AM, Gelin Yan <dynamicgl at gmail.com> wrote:

>
>
> On Mon, Dec 22, 2014 at 5:05 AM, Clayton Daley <clayton.daley at gmail.com>
> wrote:
>
>> Are there any major disadvantages of using pymongo with callInThread
>> instead of txmongo?  I'd like to take advantage of some newer features in
>> pymongo (unfortunately not available in txmongo) and it's certainly easier
>> to maintain feature parity using callInThread.
>>
>> Clayton Daley
>>
>>
>>
> Hi Clayton
>
>     Txmongo has been inactive for a while so I suggest using pymongo &
> twisted thread pool. I have been using them for a couple of years and they
> work quite well.
>
> Regards
>
> gelin yan
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141224/ebabd89f/attachment.html>

From glyph at twistedmatrix.com  Fri Dec 26 17:13:50 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 26 Dec 2014 16:13:50 -0800
Subject: [Twisted-Python] tubes now a separate project
Message-ID: <A4213218-40A9-424E-AF4A-64A4781B8CF2@twistedmatrix.com>

Apropos of recent discussion, I have moved tubes <https://tm.tl/1956> to github <https://github.com/twisted/tubes/>.

I've filed some issues there and plan to file more.  Please start sending pull requests if you'd like to work on it with me.

-glyph

From glyph at twistedmatrix.com  Fri Dec 26 17:26:30 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 26 Dec 2014 16:26:30 -0800
Subject: [Twisted-Python] tubes now a separate project
In-Reply-To: <A4213218-40A9-424E-AF4A-64A4781B8CF2@twistedmatrix.com>
References: <A4213218-40A9-424E-AF4A-64A4781B8CF2@twistedmatrix.com>
Message-ID: <C9F6D0D3-EA88-42BC-9983-327B773B47E6@twistedmatrix.com>


> On Dec 26, 2014, at 4:13 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> Apropos of recent discussion, I have moved tubes <https://tm.tl/1956> to github <https://github.com/twisted/tubes/>.
> 
> I've filed some issues there and plan to file more.  Please start sending pull requests if you'd like to work on it with me.

Also possibly of interest: you can now try out tubes via

pip install git+https://github.com/twisted/tubes

I am going to be putting something on PyPI soon; I've gotten in touch with the person who registered <https://warehouse.python.org/project/tubes/> and then apparently did nothing with it via their bitbucket account but have not heard back yet.  If anyone has a more direct contact method I'd be happy if you could put me in touch :-).

-glyph



From sank.daniel at gmail.com  Sat Dec 27 08:30:05 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sat, 27 Dec 2014 10:30:05 -0500
Subject: [Twisted-Python] not terrible object oriented rpc system in js?
Message-ID: <CAKN9TDK5KPKOTX2PRhbKYi=kdEK0xYmrBw=5-Or1WCC-PsadjQ@mail.gmail.com>

Are you guys aware of anything which solves the same kind of problem as
t.s.pb but in js? I asked about this on the js stack exchange chat room and
the general response was that there's isn't anything. I figured y'all might
know more.

-- 
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141227/a5fbb9ff/attachment.html>

From exarkun at twistedmatrix.com  Sat Dec 27 10:46:52 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 27 Dec 2014 17:46:52 -0000
Subject: [Twisted-Python] tubes now a separate project
In-Reply-To: <A4213218-40A9-424E-AF4A-64A4781B8CF2@twistedmatrix.com>
References: <A4213218-40A9-424E-AF4A-64A4781B8CF2@twistedmatrix.com>
Message-ID: <20141227174652.24248.29234780.divmod.xquotient.1@top>

On 12:13 am, glyph at twistedmatrix.com wrote:
>Apropos of recent discussion, I have moved tubes <https://tm.tl/1956> 
>to github <https://github.com/twisted/tubes/>.
>
>I've filed some issues there and plan to file more.  Please start 
>sending pull requests if you'd like to work on it with me.

Cool!  Thank you very much for this.  I'm looking forward to doing some 
serious playing around with this.

Jean-Paul


From sauer.jens at yahoo.de  Sat Dec 27 11:23:29 2014
From: sauer.jens at yahoo.de (Jens Sauer)
Date: Sat, 27 Dec 2014 18:23:29 +0000 (UTC)
Subject: [Twisted-Python] not terrible object oriented rpc system in js?
In-Reply-To: <CAKN9TDK5KPKOTX2PRhbKYi=kdEK0xYmrBw=5-Or1WCC-PsadjQ@mail.gmail.com>
References: <CAKN9TDK5KPKOTX2PRhbKYi=kdEK0xYmrBw=5-Or1WCC-PsadjQ@mail.gmail.com>
Message-ID: <1787893211.1857814.1419704609087.JavaMail.yahoo@jws11114.mail.ir2.yahoo.com>

Hi Daniel,
whats about node.js with?http://uber.github.io/multitransport-jsonrpc/
Regards
J.Sauer
      Von: Daniel Sank <sank.daniel at gmail.com>
 An: twisted-python <twisted-python at twistedmatrix.com> 
 Gesendet: 16:30 Samstag, 27.Dezember 2014
 Betreff: [Twisted-Python] not terrible object oriented rpc system in js?
   
Are you guys aware of anything which solves the same kind of problem as t.s.pb but in js? I asked about this on the js stack exchange chat room and the general response was that there's isn't anything. I figured y'all might know more.

-- 
Daniel Sank



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141227/32c69c84/attachment.html>

From sank.daniel at gmail.com  Sat Dec 27 13:06:13 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sat, 27 Dec 2014 15:06:13 -0500
Subject: [Twisted-Python] not terrible object oriented rpc system in js?
In-Reply-To: <1787893211.1857814.1419704609087.JavaMail.yahoo@jws11114.mail.ir2.yahoo.com>
References: <CAKN9TDK5KPKOTX2PRhbKYi=kdEK0xYmrBw=5-Or1WCC-PsadjQ@mail.gmail.com>
 <1787893211.1857814.1419704609087.JavaMail.yahoo@jws11114.mail.ir2.yahoo.com>
Message-ID: <CAKN9TDLqNrObAVtJeLzsaL3i6JW8C1pPv7Vp6Tqb701c7kt0KA@mail.gmail.com>

This looks promising. Thanks.

On Sat, Dec 27, 2014 at 1:23 PM, Jens Sauer <sauer.jens at yahoo.de> wrote:

> Hi Daniel,
>
> whats about node.js with http://uber.github.io/multitransport-jsonrpc/
>
> Regards
>
> J.Sauer
>
>   ------------------------------
>  *Von:* Daniel Sank <sank.daniel at gmail.com>
> *An:* twisted-python <twisted-python at twistedmatrix.com>
> *Gesendet:* 16:30 Samstag, 27.Dezember 2014
> *Betreff:* [Twisted-Python] not terrible object oriented rpc system in js?
>
> Are you guys aware of anything which solves the same kind of problem as
> t.s.pb but in js? I asked about this on the js stack exchange chat room and
> the general response was that there's isn't anything. I figured y'all might
> know more.
>
> --
> Daniel Sank
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141227/f0f0426c/attachment.html>

From clayton.daley at gmail.com  Sat Dec 27 17:43:32 2014
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sat, 27 Dec 2014 19:43:32 -0500
Subject: [Twisted-Python] not terrible object oriented rpc system in js?
In-Reply-To: <CAKN9TDLqNrObAVtJeLzsaL3i6JW8C1pPv7Vp6Tqb701c7kt0KA@mail.gmail.com>
References: <CAKN9TDK5KPKOTX2PRhbKYi=kdEK0xYmrBw=5-Or1WCC-PsadjQ@mail.gmail.com>
 <1787893211.1857814.1419704609087.JavaMail.yahoo@jws11114.mail.ir2.yahoo.com>
 <CAKN9TDLqNrObAVtJeLzsaL3i6JW8C1pPv7Vp6Tqb701c7kt0KA@mail.gmail.com>
Message-ID: <CACKEAnUo1mpBxS6DYBoydCM3yemJQCDw4rs-GL_O6hMHg+8J=w@mail.gmail.com>

Not sure which features of PB matter to you, but I just started playing
with Autobahn/Crossbar. It's

   - A JSON-based RPC (and/or pubsub) system,
   - With clients in many languages (JS, Python, C++, etc.), and
   - The ability to make cross-language RPC calls

Out of the box, object serialization is limited (likely to ensure
cross-platform compatibility), but the serializer is (purportedly)
pluggable.


Clayton Daley
clayton.daley at gmail.com
513.505.1236

On Sat, Dec 27, 2014 at 3:06 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> This looks promising. Thanks.
>
> On Sat, Dec 27, 2014 at 1:23 PM, Jens Sauer <sauer.jens at yahoo.de> wrote:
>
>> Hi Daniel,
>>
>> whats about node.js with http://uber.github.io/multitransport-jsonrpc/
>>
>> Regards
>>
>> J.Sauer
>>
>>   ------------------------------
>>  *Von:* Daniel Sank <sank.daniel at gmail.com>
>> *An:* twisted-python <twisted-python at twistedmatrix.com>
>> *Gesendet:* 16:30 Samstag, 27.Dezember 2014
>> *Betreff:* [Twisted-Python] not terrible object oriented rpc system in
>> js?
>>
>> Are you guys aware of anything which solves the same kind of problem as
>> t.s.pb but in js? I asked about this on the js stack exchange chat room and
>> the general response was that there's isn't anything. I figured y'all might
>> know more.
>>
>> --
>> Daniel Sank
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> Daniel Sank
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141227/f30fda0e/attachment.html>

From clayton.daley at gmail.com  Sat Dec 27 17:48:05 2014
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sat, 27 Dec 2014 19:48:05 -0500
Subject: [Twisted-Python] Sigs/Archive
Message-ID: <CACKEAnUoTG6zFYLgz+q4coKVMnBsFg63zzam3Enseq6FG3wzvw@mail.gmail.com>

I forgot to delete my tel from my sig in a reply.  Is there anything I can
do to avoid leaving it published in the archives indefinitely?

Thanks,

Clayton Daley
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141227/0a209fd2/attachment.html>

From kebin70 at gmail.com  Sat Dec 27 19:51:10 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Sat, 27 Dec 2014 18:51:10 -0800
Subject: [Twisted-Python] not terrible object oriented rpc system in js?
In-Reply-To: <CACKEAnUo1mpBxS6DYBoydCM3yemJQCDw4rs-GL_O6hMHg+8J=w@mail.gmail.com>
References: <CAKN9TDK5KPKOTX2PRhbKYi=kdEK0xYmrBw=5-Or1WCC-PsadjQ@mail.gmail.com>
 <1787893211.1857814.1419704609087.JavaMail.yahoo@jws11114.mail.ir2.yahoo.com>
 <CAKN9TDLqNrObAVtJeLzsaL3i6JW8C1pPv7Vp6Tqb701c7kt0KA@mail.gmail.com>
 <CACKEAnUo1mpBxS6DYBoydCM3yemJQCDw4rs-GL_O6hMHg+8J=w@mail.gmail.com>
Message-ID: <CAA-sNEZqn7-X7ObHrD6ov1eKm2yRQvWhqxfYHjkROySq7PkDqg@mail.gmail.com>

flood with 50 permutations?

On Sat, Dec 27, 2014 at 4:43 PM, Clayton Daley <clayton.daley at gmail.com>
wrote:

> Not sure which features of PB matter to you, but I just started playing
> with Autobahn/Crossbar. It's
>
>    - A JSON-based RPC (and/or pubsub) system,
>    - With clients in many languages (JS, Python, C++, etc.), and
>    - The ability to make cross-language RPC calls
>
> Out of the box, object serialization is limited (likely to ensure
> cross-platform compatibility), but the serializer is (purportedly)
> pluggable.
>
>
> Clayton Daley
> clayton.daley at gmail.com
> 513.505.1236
>
> On Sat, Dec 27, 2014 at 3:06 PM, Daniel Sank <sank.daniel at gmail.com>
> wrote:
>
>> This looks promising. Thanks.
>>
>> On Sat, Dec 27, 2014 at 1:23 PM, Jens Sauer <sauer.jens at yahoo.de> wrote:
>>
>>> Hi Daniel,
>>>
>>> whats about node.js with http://uber.github.io/multitransport-jsonrpc/
>>>
>>> Regards
>>>
>>> J.Sauer
>>>
>>>   ------------------------------
>>>  *Von:* Daniel Sank <sank.daniel at gmail.com>
>>> *An:* twisted-python <twisted-python at twistedmatrix.com>
>>> *Gesendet:* 16:30 Samstag, 27.Dezember 2014
>>> *Betreff:* [Twisted-Python] not terrible object oriented rpc system in
>>> js?
>>>
>>> Are you guys aware of anything which solves the same kind of problem as
>>> t.s.pb but in js? I asked about this on the js stack exchange chat room and
>>> the general response was that there's isn't anything. I figured y'all might
>>> know more.
>>>
>>> --
>>> Daniel Sank
>>>
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>
>>
>> --
>> Daniel Sank
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141227/da55cef3/attachment-0001.html>

From trac at twistedmatrix.com  Sun Dec 28 00:05:20 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 28 Dec 2014 07:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1419750320.1.3537549555123560540@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141228/165ee2e7/attachment.html>

From jamesbroadhead at gmail.com  Mon Dec 29 11:17:36 2014
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Mon, 29 Dec 2014 18:17:36 +0000
Subject: [Twisted-Python] Silverberg CQL Driver
In-Reply-To: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>
References: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>
Message-ID: <CA+hid6FbkebfpuOXzcUQ+zZWwtUR=nVJr+Z80OFzmi80Ho5QVQ@mail.gmail.com>

We (TweetDeck at Twitter) have been using a patched version of Telephus for 3
years now.

We've had problems in the past where it would cause problems with down and
flaky seed hosts, so ymmv.

It's available here: https://github.com/tweetdeck/Telephus

On 3 December 2014 at 20:03, Jason J. W. Williams <jasonjwwilliams at gmail.com
> wrote:

> Is anyone using the silverberg CQL (Cassandra) library for Twisted in
> production? Just curious what people's experience with it is, since it
> appears to be the most recently updated Twisted/CQL project.
>
> -J
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141229/a6ab6b0c/attachment.html>

From jasonjwwilliams at gmail.com  Mon Dec 29 12:11:12 2014
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Mon, 29 Dec 2014 11:11:12 -0800
Subject: [Twisted-Python] Silverberg CQL Driver
In-Reply-To: <2A763BE2-4CCC-40B4-8A26-185E8D49D3D1@twistedmatrix.com>
References: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>
 <2A763BE2-4CCC-40B4-8A26-185E8D49D3D1@twistedmatrix.com>
Message-ID: <CAHZAEpfswVjrquqmP_nUOXY3oEH6OM-UmeDwLaPmenfwr7+dAQ@mail.gmail.com>

Thanks radix. I noticed the README says Python >= 2.7 is a pre-req but the
changelog for 0.1.7 says "fixed incompatibility with Python 2.6". Are y'all
running it with 2.6 or 2.7?

-J

On Wed, Dec 3, 2014 at 12:52 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> Yes, we use it in production in the Rackspace Otter project:
> https://github.com/rackerlabs/otter
>
> The particular file we most use it in is here:
> https://github.com/rackerlabs/otter/blob/master/otter/models/cass.py#L530 ?
> the connection attribute of that class is a silverberg client.
>
> I?ve not personally touched that code but I know we've been using it in
> production for about a year.
>
> -radix
>
>
> On Dec 3, 2014, at 2:03 PM, Jason J. W. Williams <
> jasonjwwilliams at gmail.com> wrote:
>
> Is anyone using the silverberg CQL (Cassandra) library for Twisted in
> production? Just curious what people's experience with it is, since it
> appears to be the most recently updated Twisted/CQL project.
>
> -J
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141229/6ca22b9c/attachment.html>

From jasonjwwilliams at gmail.com  Mon Dec 29 12:11:50 2014
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Mon, 29 Dec 2014 11:11:50 -0800
Subject: [Twisted-Python] Silverberg CQL Driver
In-Reply-To: <CA+hid6FbkebfpuOXzcUQ+zZWwtUR=nVJr+Z80OFzmi80Ho5QVQ@mail.gmail.com>
References: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>
 <CA+hid6FbkebfpuOXzcUQ+zZWwtUR=nVJr+Z80OFzmi80Ho5QVQ@mail.gmail.com>
Message-ID: <CAHZAEpdQYEUz6fRoOVK6Qj_W=yzH7hAn27BdU77+PgES6c8ZfQ@mail.gmail.com>

Hi James,

Have you guys tried Silverberg? Wondering if its less flakly.

-J

On Mon, Dec 29, 2014 at 10:17 AM, James Broadhead
<jamesbroadhead at gmail.com> wrote:
> We (TweetDeck at Twitter) have been using a patched version of Telephus for 3
> years now.
>
> We've had problems in the past where it would cause problems with down and
> flaky seed hosts, so ymmv.
>
> It's available here: https://github.com/tweetdeck/Telephus
>
> On 3 December 2014 at 20:03, Jason J. W. Williams
> <jasonjwwilliams at gmail.com> wrote:
>>
>> Is anyone using the silverberg CQL (Cassandra) library for Twisted in
>> production? Just curious what people's experience with it is, since it
>> appears to be the most recently updated Twisted/CQL project.
>>
>> -J
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From glyph at twistedmatrix.com  Mon Dec 29 13:46:39 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 29 Dec 2014 12:46:39 -0800
Subject: [Twisted-Python] tubes now a separate project
In-Reply-To: <20141227174652.24248.29234780.divmod.xquotient.1@top>
References: <A4213218-40A9-424E-AF4A-64A4781B8CF2@twistedmatrix.com>
 <20141227174652.24248.29234780.divmod.xquotient.1@top>
Message-ID: <E2A1846A-376D-4E69-9E44-2B8A6EBF58F4@twistedmatrix.com>


> On Dec 27, 2014, at 9:46 AM, exarkun at twistedmatrix.com wrote:
> 
> On 12:13 am, glyph at twistedmatrix.com wrote:
>> Apropos of recent discussion, I have moved tubes <https://tm.tl/1956> to github <https://github.com/twisted/tubes/>.
>> 
>> I've filed some issues there and plan to file more.  Please start sending pull requests if you'd like to work on it with me.
> 
> Cool!  Thank you very much for this.  I'm looking forward to doing some serious playing around with this.

Thanks for your encouragement and interest.  I look forward to hearing more from you about it :).

I've also gotten control of the PyPI package and uploaded some packages:

https://warehouse.python.org/project/Tubes/ <https://warehouse.python.org/project/Tubes/>

So you can "pip install tubes" and something will happen.  Not the right thing, mind you, 0.0.0 is the version number for a reason :).  But something.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141229/a9dd63ee/attachment.html>

From radix at twistedmatrix.com  Mon Dec 29 13:49:47 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 29 Dec 2014 14:49:47 -0600
Subject: [Twisted-Python] Silverberg CQL Driver
In-Reply-To: <CAHZAEpfswVjrquqmP_nUOXY3oEH6OM-UmeDwLaPmenfwr7+dAQ@mail.gmail.com>
References: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>
 <2A763BE2-4CCC-40B4-8A26-185E8D49D3D1@twistedmatrix.com>
 <CAHZAEpfswVjrquqmP_nUOXY3oEH6OM-UmeDwLaPmenfwr7+dAQ@mail.gmail.com>
Message-ID: <A05A32ED-B763-41F6-90A6-8DFCD8E5C25A@twistedmatrix.com>


>> On Dec 3, 2014, at 2:03 PM, Jason J. W. Williams <jasonjwwilliams at gmail.com <mailto:jasonjwwilliams at gmail.com>> wrote:
>> 
>> Is anyone using the silverberg CQL (Cassandra) library for Twisted in production? Just curious what people's experience with it is, since it appears to be the most recently updated Twisted/CQL project.



> On Wed, Dec 3, 2014 at 12:52 PM, Christopher Armstrong <radix at twistedmatrix.com <mailto:radix at twistedmatrix.com>> wrote:
> Yes, we use it in production in the Rackspace Otter project: https://github.com/rackerlabs/otter <https://github.com/rackerlabs/otter> 
> 
> The particular file we most use it in is here: https://github.com/rackerlabs/otter/blob/master/otter/models/cass.py#L530 <https://github.com/rackerlabs/otter/blob/master/otter/models/cass.py#L530> ? the connection attribute of that class is a silverberg client.
> 
> I?ve not personally touched that code but I know we've been using it in production for about a year.


> On Dec 29, 2014, at 1:11 PM, Jason J. W. Williams <jasonjwwilliams at gmail.com> wrote:
> 
> Thanks radix. I noticed the README says Python >= 2.7 is a pre-req but the changelog for 0.1.7 says "fixed incompatibility with Python 2.6". Are y'all running it with 2.6 or 2.7?


Otter runs on Python 2.7. It looks like builds are run against 2.6 on Travis CI, but they?re in ?allowed to fail? mode ? but still passing 100%.

-radix

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141229/dc858c96/attachment.html>

From psi29a at gmail.com  Tue Dec 30 02:50:30 2014
From: psi29a at gmail.com (bret curtis)
Date: Tue, 30 Dec 2014 10:50:30 +0100
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CABkOF6Q-A_96kzX=DyLhWn1HF9CBiRu+BrkuuVviCozAxL7H7g@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <CABkOF6Q-A_96kzX=DyLhWn1HF9CBiRu+BrkuuVviCozAxL7H7g@mail.gmail.com>
Message-ID: <CA+LhZ9-Zx5yd1wnxOdXjvNatC=107=Y=SW_HzV3zpBQcpxV2jQ@mail.gmail.com>

On Tue, Dec 23, 2014 at 7:51 AM, Gelin Yan <dynamicgl at gmail.com> wrote:

>
>
> On Mon, Dec 22, 2014 at 5:05 AM, Clayton Daley <clayton.daley at gmail.com>
> wrote:
>
>> Are there any major disadvantages of using pymongo with callInThread
>> instead of txmongo?  I'd like to take advantage of some newer features in
>> pymongo (unfortunately not available in txmongo) and it's certainly easier
>> to maintain feature parity using callInThread.
>>
>> Clayton Daley
>>
>>
>>
> Hi Clayton
>
>     Txmongo has been inactive for a while so I suggest using pymongo &
> twisted thread pool. I have been using them for a couple of years and they
> work quite well.
>
> Regards
>
> gelin yan
>

Hey guys,

just wanted to drop in and say that txmongo isn't dead. We (Amplidata) just
recently sent a merge request to add SSL (authentication/encryption)
support[1] that Alexandre will review after the holidays. While Alexandre
isn't currently developing txmongo, he does review and accept pull
requests. So while the community is small, it is still alive.

Amplidata (the company I work for) has also expressed an interest in
getting txmongo up to speed with PyMongo, similar in how we got Ldaptor and
its myriad forks to converge and development happening again.[2][3]

Is there any interest in seeing txmongo be developed further? What are some
of the pain points that people would rather defer to thread PyMongo instead
of using async txmongo?

Cheers,
Bret

[1] https://github.com/fiorix/mongo-async-python-driver/pull/67
[2] https://twistedmatrix.com/pipermail/twisted-python/2014-July/028489.html
[3] https://github.com/twisted/ldaptor
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141230/adc77a6a/attachment-0001.html>

From glyph at twistedmatrix.com  Tue Dec 30 05:16:40 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 30 Dec 2014 04:16:40 -0800
Subject: [Twisted-Python] tubes now a separate project
In-Reply-To: <E2A1846A-376D-4E69-9E44-2B8A6EBF58F4@twistedmatrix.com>
References: <A4213218-40A9-424E-AF4A-64A4781B8CF2@twistedmatrix.com>
 <20141227174652.24248.29234780.divmod.xquotient.1@top>
 <E2A1846A-376D-4E69-9E44-2B8A6EBF58F4@twistedmatrix.com>
Message-ID: <C8829FBA-D129-458D-B851-C8505FC4D2AC@twistedmatrix.com>


> On Dec 29, 2014, at 12:46 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 27, 2014, at 9:46 AM, exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com> wrote:
>> 
>> On 12:13 am, glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com> wrote:
>>> Apropos of recent discussion, I have moved tubes <https://tm.tl/1956 <https://tm.tl/1956>> to github <https://github.com/twisted/tubes/ <https://github.com/twisted/tubes/>>.
>>> 
>>> I've filed some issues there and plan to file more.  Please start sending pull requests if you'd like to work on it with me.
>> 
>> Cool!  Thank you very much for this.  I'm looking forward to doing some serious playing around with this.
> 
> Thanks for your encouragement and interest.  I look forward to hearing more from you about it :).
> 
> I've also gotten control of the PyPI package and uploaded some packages:
> 
> https://warehouse.python.org/project/Tubes/ <https://warehouse.python.org/project/Tubes/>
> 
> So you can "pip install tubes" and something will happen.  Not the right thing, mind you, 0.0.0 is the version number for a reason :).  But something.

Tubes is now on readthedocs:

<https://tubes.readthedocs.org/en/latest/ <https://tubes.readthedocs.org/en/latest/>>

and travis:

<https://travis-ci.org/twisted/tubes <https://travis-ci.org/twisted/tubes>>

and coveralls:

<https://coveralls.io/r/twisted/tubes?branch=master <https://coveralls.io/r/twisted/tubes?branch=master>>

and all the badges for these various things are green:

<https://github.com/twisted/tubes/blob/master/README.rst <https://github.com/twisted/tubes/blob/master/README.rst>>

including 100% twistedchecker-clean and 100% pydoctor-clean.

So the code is in a good position to start accepting pull requests now.

> -glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141230/05924f5a/attachment.html>

From clayton.daley at gmail.com  Tue Dec 30 15:23:28 2014
From: clayton.daley at gmail.com (Clayton Daley)
Date: Tue, 30 Dec 2014 17:23:28 -0500
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CA+LhZ9-Zx5yd1wnxOdXjvNatC=107=Y=SW_HzV3zpBQcpxV2jQ@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <CABkOF6Q-A_96kzX=DyLhWn1HF9CBiRu+BrkuuVviCozAxL7H7g@mail.gmail.com>
 <CA+LhZ9-Zx5yd1wnxOdXjvNatC=107=Y=SW_HzV3zpBQcpxV2jQ@mail.gmail.com>
Message-ID: <CACKEAnXabnwdJmfxaXP2HKqcJno9h=dn5G-T1sFj_yHsH_ZiXA@mail.gmail.com>

I'm still in "proof of concept" mode so take my comments with a grain of
salt... but my question was motivated by datetime issues:

   - After switching to txmongo, timedelta seemed to break. Turns out it
   breaks autobahn as well so I may need to solve the problem sooner... but
   it's a material difference.
   - I also wanted to take advantage of some timezone stuff purportedly
   included in newer versions of pymongo (but I haven't fully implemented
   anything yet to verify).

When it comes to interest in txmongo:

   - Insofar as it would address the question of lazy calls (and possible
   hassles like not-lazy iterators), it would be a welcome simplification to
   deferToThread.
   - At the same time, I don't see any intrinsic benefit to rebuild the
   client all-the-way-down.  If it were possible to wrap PyMongo in a
   lazy-aware (and deferred returning) wrapper... that would be enough for me.
   - If a wrapper reduces the work to maintain the project at parity, I'd
   redouble my support for the approach. No need to commit volunteer
   supporters (current and/or future) to more work than absolutely necessary.

Clayton Daley

On Tue, Dec 30, 2014 at 4:50 AM, bret curtis <psi29a at gmail.com> wrote:

> On Tue, Dec 23, 2014 at 7:51 AM, Gelin Yan <dynamicgl at gmail.com> wrote:
>
>>
>>
>> On Mon, Dec 22, 2014 at 5:05 AM, Clayton Daley <clayton.daley at gmail.com>
>> wrote:
>>
>>> Are there any major disadvantages of using pymongo with callInThread
>>> instead of txmongo?  I'd like to take advantage of some newer features in
>>> pymongo (unfortunately not available in txmongo) and it's certainly easier
>>> to maintain feature parity using callInThread.
>>>
>>> Clayton Daley
>>>
>>>
>>>
>> Hi Clayton
>>
>>     Txmongo has been inactive for a while so I suggest using pymongo &
>> twisted thread pool. I have been using them for a couple of years and they
>> work quite well.
>>
>> Regards
>>
>> gelin yan
>>
>
> Hey guys,
>
> just wanted to drop in and say that txmongo isn't dead. We (Amplidata)
> just recently sent a merge request to add SSL (authentication/encryption)
> support[1] that Alexandre will review after the holidays. While Alexandre
> isn't currently developing txmongo, he does review and accept pull
> requests. So while the community is small, it is still alive.
>
> Amplidata (the company I work for) has also expressed an interest in
> getting txmongo up to speed with PyMongo, similar in how we got Ldaptor and
> its myriad forks to converge and development happening again.[2][3]
>
> Is there any interest in seeing txmongo be developed further? What are
> some of the pain points that people would rather defer to thread PyMongo
> instead of using async txmongo?
>
> Cheers,
> Bret
>
> [1] https://github.com/fiorix/mongo-async-python-driver/pull/67
> [2]
> https://twistedmatrix.com/pipermail/twisted-python/2014-July/028489.html
> [3] https://github.com/twisted/ldaptor
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20141230/5650faf5/attachment.html>

From free at 64studio.com  Mon Dec  1 04:55:45 2014
From: free at 64studio.com (Free Ekanayaka)
Date: Mon, 1 Dec 2014 12:55:45 +0100
Subject: [Twisted-Python] HTTP combined log format in twisted.web.http
 changed from 13.2.0 to 14.0.0
In-Reply-To: <CABJ6WihNk2-yPSeUNCfA5OajPy9kLW=7pNDfak+6MN=X9Hd_zw@mail.gmail.com>
References: <CABJ6WihNk2-yPSeUNCfA5OajPy9kLW=7pNDfak+6MN=X9Hd_zw@mail.gmail.com>
Message-ID: <CABJ6WigizK=rAY5k19zCM5szF6-+JX7mB8=53MCP+wxvceL4Tg@mail.gmail.com>

On Tue, Nov 25, 2014 at 4:26 PM, Free Ekanayaka <free at 64studio.com> wrote:

> Hi,
>
> it was
>
>             line = '%s - - %s "%s" %d %s "%s" "%s"\n' % (
>
> in 13.2.0 (twisted/web/http.py line 1920), and it's
>
>         u'"%(ip)s" - - %(timestamp)s "%(method)s %(uri)s %(protocol)s" '
>
> so basically the client IP now gets wrapped within double quotes, e.g. a
> log line that was looking like:
>
> 1.2.3.4 - - [25/Oct/2004:12:31:59 +0000] "GET /dummy HTTP/1.0" 123 - "-"
> "-"
>
> it now looks like:
>
> "1.2.3.4" - - [25/Oct/2004:12:31:59 +0000] "GET /dummy HTTP/1.0" 123 - "-"
> "-"
>
> as one can see in the unit tests in test_web.py too.
>
> What's the reason for this change?
>
> It feels it can potentially break code that parses log files and it also
> seems to diverge from the format described on the Apache web site:
>
> http://httpd.apache.org/docs/1.3/logs.html
>

I've inspected a bit the diff that introduced this change and read the
comments
on the relevant ticket, but couldn't figure out the reason for the change,
so I
filed #7730 to keep track of the issue.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141201/da458b9f/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Dec  1 16:56:48 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 2 Dec 2014 00:56:48 +0100
Subject: [Twisted-Python] hey pypy fans
Message-ID: <5B9AB0E9-6C02-4B2D-A64B-1E831338C3FA@twistedmatrix.com>

We (and by "we" I mean the greater part of Twisted Matrix Labs, including myself) frequently recommend the combination of PyPy and Twisted in production, yet PyPy is not a supported platform according to our own rules for platform support.

I propose we change that.

Until yesterday, even our unsupported builder was offline and broken.  I've set up a reasonably configured PyPy builder with many dependencies installed (although not PyCrypto, since that doesn't support PyPy).

There are some build failures, but not an overwhelming number:

<http://buildbot.twistedmatrix.com/builders/trusty64-pypy-2.4/builds/1/steps/trial/logs/problems <http://buildbot.twistedmatrix.com/builders/trusty64-pypy-2.4/builds/1/steps/trial/logs/problems>>

Most of these are meta-programming issues, a couple have to do with garbage-collector interactions, and there is at least one with an issue with spawnProcess.  If any of these failures make sense to you, please file bugs and submit patches.

I've created a milestone for this:

<https://twistedmatrix.com/trac/milestone/PyPy-support <https://twistedmatrix.com/trac/milestone/PyPy-support>>

so please feel free to put your tickets into it.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141202/622b95b2/attachment-0002.html>

From adi at roiban.ro  Tue Dec  2 03:02:20 2014
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 2 Dec 2014 10:02:20 +0000
Subject: [Twisted-Python] doc bloat
In-Reply-To: <CBFD7586-9EB0-4F12-9F5B-B9B4140397C9@twistedmatrix.com>
References: <D114730E-21D4-42F1-A8EB-98C3FD1243E7@twistedmatrix.com>
 <CBFD7586-9EB0-4F12-9F5B-B9B4140397C9@twistedmatrix.com>
Message-ID: <CAFycZ9dpZSH3rzc-WP2mC6frv9RdFQjV1aQa8O9-udkxYCvHSA@mail.gmail.com>

As a Twisted API users, I don't find a big problem the fact that __repr__
docstring is presented by pydoctor together with the other method,

As a Twisted contributor, I don't like when I have to copy/paste docstring
from an interface or from an inherited class ... or too explicity state
that the type of None is NoneType... and then to add a link to it :)


> As a first approximation, I think we could ask twistedchecker to stop
enforcing docstring requirements for objects directly matching a "private"
naming pattern.

Is there a ticket/issue for that?
What does `stop enforcing docstring requirements` mean?

I think that docstring are important, and testing code or private methods
is still code which should be maintained and it should have docstrings, but
it would be nice not to ask for
strict @param @type @return @rtype.

-------

+1 for getting serious about twistedcker ...

I would be happy to help with twistedchecker, as well as with the other
automated tools.

What do you say if we put all problems/issues/comments here
https://github.com/twisted/twistedchecker/issues
and have 2 or 3 people who can decide if an issues is accepted, or help
define the right behaviour or reject it and then also review the pull
requests.

Right now there are many "undecided" or not tagged tickets, and I don't
know which one is a real problem or not.

One important requirement to move things forward is to provide quick
feedback, both for the initial issue report and the review.
Waiting months to get feedback from a patch is not fun and is a sign that
core developers don't care about the newly proposed changes.

----------

+1 for getting serious about the other code checkers: pyflakes and
pydoctor. Right now, is a PITA to run all these tools on your local
computer ...

Cheers
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141202/7f786dd8/attachment-0002.html>

From exarkun at twistedmatrix.com  Tue Dec  2 12:05:39 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 02 Dec 2014 19:05:39 -0000
Subject: [Twisted-Python] doc bloat
In-Reply-To: <CAFycZ9dpZSH3rzc-WP2mC6frv9RdFQjV1aQa8O9-udkxYCvHSA@mail.gmail.com>
References: <D114730E-21D4-42F1-A8EB-98C3FD1243E7@twistedmatrix.com>
 <CBFD7586-9EB0-4F12-9F5B-B9B4140397C9@twistedmatrix.com>
 <CAFycZ9dpZSH3rzc-WP2mC6frv9RdFQjV1aQa8O9-udkxYCvHSA@mail.gmail.com>
Message-ID: <20141202190539.23969.240747748.divmod.xquotient.29@top>

On 10:02 am, adi at roiban.ro wrote:
>As a Twisted API users, I don't find a big problem the fact that 
>__repr__
>docstring is presented by pydoctor together with the other method,
>
>As a Twisted contributor, I don't like when I have to copy/paste 
>docstring
>from an interface or from an inherited class ...

I hate it when people do this, too.  I never want anyone to do this. 
When I review changes in which this appears, I ask the author to change 
the submission to include useful, non-redundant documentation instead.

The coding standard doesn't explicitly say that you should not copy the 
docstring from an implementation to an interface - but this is a good 
example of the kind of thing our documentation can't be expected to 
cover.  Copying an interface docstring to an implementation is just one 
of the many possible bad practices a developer could engage in; a list 
of all possible bad practices would make the developer documentation 
infinitely long.

To the larger issue, I think the most productive thing to do would be to 
actually look at our code base and see if there are glaring examples of 
useless documentation.  If we can generalize from these examples to a 
rule, we can add that rule to the project policy (preferably encoded in 
a tool, not as prose in the developer documentation).

I'm a little bit tempted to agree with the `__repr__` case.  People who 
are reading the API documentation might not be put off by documentation 
for these methods but are they helped in any way?  I think that most of 
the time they probably aren't.  I'm basing this on times I can recall 
having written a `__repr__` docstring and how I had to struggle to put 
useful words into that docstring instead of pointless boilerplate.  I 
still think it would be good to collect a bunch of actual `__repr__` 
docstrings from Twisted and see if such evidence supports this 
conclusion.
>or too explicity state
>that the type of None is NoneType... and then to add a link to it :)

It sounds like there's agreement on this point, at least.  For what it's 
worth, this seems uncontroversial to me: the type of `None` is 
`NoneType` and the only instance of `NoneType` is `None`.  Documenting 
one or the other conveys all possible information there is to convey so 
documenting one should be enough.  Even if we wanted the rendered 
version of the documentation for this case to be redundant, pydoctor can 
synthesize that redundancy - it doesn't need the source material to be 
redundant.
>
>>As a first approximation, I think we could ask twistedchecker to stop
>enforcing docstring requirements for objects directly matching a 
>"private"
>naming pattern.
>
>Is there a ticket/issue for that?
>What does `stop enforcing docstring requirements` mean?
>
>I think that docstring are important, and testing code or private 
>methods
>is still code which should be maintained and it should have docstrings, 
>but
>it would be nice not to ask for
>strict @param @type @return @rtype.

Eh.  Test code has to be maintained just like anything else.  As the de 
facto specification for most features, it's perhaps (but only perhaps) 
more important to have everything clearly documented in a test suite.  I 
think that requiring parameter and return type documentation in the test 
suite is a very good thing.

However, requiring the same degree of documentation for *all* code may 
not be necessary.  If a test method defines a simple nested function, 
perhaps that doesn't need a docstring.  This is another thing we could 
inspect the current Twisted codebase for.  Are there lots of useless 
docstrings on nested function definitions purely for the sake of 
twistedchecker?  Or are there undocumented nested functions that are 
actually a little bit difficult to understand on their own?

Jean-Paul
>-------
>
>+1 for getting serious about twistedcker ...
>
>I would be happy to help with twistedchecker, as well as with the other
>automated tools.
>
>What do you say if we put all problems/issues/comments here
>https://github.com/twisted/twistedchecker/issues
>and have 2 or 3 people who can decide if an issues is accepted, or help
>define the right behaviour or reject it and then also review the pull
>requests.
>
>Right now there are many "undecided" or not tagged tickets, and I don't
>know which one is a real problem or not.
>
>One important requirement to move things forward is to provide quick
>feedback, both for the initial issue report and the review.
>Waiting months to get feedback from a patch is not fun and is a sign 
>that
>core developers don't care about the newly proposed changes.
>
>----------
>
>+1 for getting serious about the other code checkers: pyflakes and
>pydoctor. Right now, is a PITA to run all these tools on your local
>computer ...
>
>Cheers
>--
>Adi Roiban



From adam at dormchatapp.com  Tue Dec  2 15:30:15 2014
From: adam at dormchatapp.com (Adam)
Date: Tue, 2 Dec 2014 17:30:15 -0500
Subject: [Twisted-Python] Python Twisted Questions
Message-ID: <CA+fVc1Hfh=OqUG3S+Kpa=ZBzOUg_A3Dz8qqmFV2-oszJLo52Yw@mail.gmail.com>

Hi All,



I have a two-part question I was hoping someone smarter than me could help
out with. :)



1. Please find attached Python script. We have integrated the Twisted
framework with iOS for chat module. Attached is our Python demo code in
which we have implemented this. The issue is when we try to connect with
the server through the terminal, we are getting the complete correct
response without any error. But when it was integrated on the iOS app, data
is getting received in chunks (i.e. if data exceeds 1366 bytes or above in
json size it comes in pieces which creates a problem when sending and
receiving chats)



2. Please find attached the iOS source code for Socket programming.



In this we have used sample code of iOS for Socket communication.



Once you run the app it will try auto-connecting to server and, once the
connection is established with server it will show the "GetData" button.



Using this button you can hit one command with the server chat module and
in response, the app will get the data from the server.



The issue here is we are not able to get all of the response data at once
as it gets distributed into packets and sent to the client one-by-one. When
we are getting this data alone in a number of packets then there is no
problem reconstructing it. But when the server is sending 2-3 different
types of datasets on the same socket then the different data packets are
not sequential, meaning it's not sending data2 first and once finished
sending data3 it will send data3. These data2 and data3 packets get mixed
and the client is getting the example shown below:



Data2 Packets:

Packet2_1

Packet2_2

Packet2_3

Packet2_4





Data3 Packets:

Packet3_1

Packet3_2

Packet3_3

Packet3_4





Receiving Order:

Packet2_1

Packet2_2

Packet3_1

Packet2_3

Packet3_2

Packet3_3

Packet2_4

Packet3_4



As you can see the receiving order is that of two different data sets,
which we are not able to reconstruct due to the wrong sequence of packets.





If any of this is confusing/requires further explanation, just let me know.
Also, if there is a better forum for me to direct this question just let me
know as well.



Thank you in advance for your help!



-Adam
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141202/73b71f0f/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo.py
Type: text/x-python-script
Size: 8515 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20141202/73b71f0f/attachment-0002.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: SocketSampleDemo.zip
Type: application/zip
Size: 36445 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20141202/73b71f0f/attachment-0002.zip>

From glyph at twistedmatrix.com  Tue Dec  2 17:55:16 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Dec 2014 01:55:16 +0100
Subject: [Twisted-Python] doc bloat
In-Reply-To: <20141202190539.23969.240747748.divmod.xquotient.29@top>
References: <D114730E-21D4-42F1-A8EB-98C3FD1243E7@twistedmatrix.com>
 <CBFD7586-9EB0-4F12-9F5B-B9B4140397C9@twistedmatrix.com>
 <CAFycZ9dpZSH3rzc-WP2mC6frv9RdFQjV1aQa8O9-udkxYCvHSA@mail.gmail.com>
 <20141202190539.23969.240747748.divmod.xquotient.29@top>
Message-ID: <31E42FCE-250A-4AA2-AAFD-5E2A39871A18@twistedmatrix.com>


> On Dec 2, 2014, at 20:05, exarkun at twistedmatrix.com wrote:

> Are there lots of useless docstrings on nested function definitions purely for the sake of twistedchecker?  Or are there undocumented nested functions that are actually a little bit difficult to understand on their own?

twistedchecker does not presently require nested function definitions to have docstrings.  I recently merged a fix to an incongruity where it was requiring this of classes defined within functions: <https://github.com/twisted/twistedchecker/commit/4af4e97f99d6e5f683b65272a8dbe7bce2087aa7>.  So this one, at least, we can cross off for the future :).

-glyph


From glyph at twistedmatrix.com  Tue Dec  2 18:21:45 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Dec 2014 02:21:45 +0100
Subject: [Twisted-Python] Python Twisted Questions
In-Reply-To: <CA+fVc1Hfh=OqUG3S+Kpa=ZBzOUg_A3Dz8qqmFV2-oszJLo52Yw@mail.gmail.com>
References: <CA+fVc1Hfh=OqUG3S+Kpa=ZBzOUg_A3Dz8qqmFV2-oszJLo52Yw@mail.gmail.com>
Message-ID: <BE1313DF-AAF9-48B0-9F04-A63C9D656130@twistedmatrix.com>


> On Dec 2, 2014, at 23:30, Adam <adam at dormchatapp.com> wrote:

I assume you're using this tutorial?

<http://www.raywenderlich.com/3932/networking-tutorial-for-ios-how-to-create-a-socket-based-iphone-app-and-server <http://www.raywenderlich.com/3932/networking-tutorial-for-ios-how-to-create-a-socket-based-iphone-app-and-server>>

It is unfortunate that this has not been updated with better information, it seems to confuse a lot of people making iOS applications ;).
> 1. Please find attached Python script. We have integrated the Twisted framework with iOS for chat module. Attached is our Python demo code in which we have implemented this. The issue is when we try to connect with the server through the terminal, we are getting the complete correct response without any error. But when it was integrated on the iOS app, data is getting received in chunks (i.e. if data exceeds 1366 bytes or above in json size it comes in pieces which creates a problem when sending and receiving chats)
> 
This is a frequently asked question:

<https://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith <https://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith>>

In other words, if you want a message-oriented protocol, you can't just use dataReceived.

For sending short JSON structures back and forth, line-delimited data structures are a reasonable choice.  On the Twisted side, you can use twisted.protocols.basic.LineReceiver, and override lineReceived instead of dataReceived.

On the iOS side, you need a radically different structure for buffering your input; you can't just stuff it into a buffer on the stack.  One quick hacky way to do this would be to give your object a NSString bufferString instance variable, and do bufferString = [bufferString stringByAppendingString: [[NSString alloc] initWithBytes:buffer length:len encoding:NSASCIIStringEncoding]]; NSArray* lines = [bufferString componentsSeparatedByString: @"\r\n"];, bufferString = [lines lastObject];, then loop over the other items in lines.

Keep in mind you also need to do this for output; as you send output to the server, you may not be able to send all of it at once, so you need to keep a buffer, and keep track of how much you've written, etc.

Or you could just build Python into your app on iOS and run Twisted in there.  If you manage to get that working be sure to let us know how it goes :-).  I am lead to believe that <http://omz-software.com/pythonista/> contains a template for at least getting the Python runtime going...

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141203/bef4468e/attachment-0002.html>

From exarkun at twistedmatrix.com  Wed Dec  3 10:46:57 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 03 Dec 2014 17:46:57 -0000
Subject: [Twisted-Python] doc bloat
In-Reply-To: <31E42FCE-250A-4AA2-AAFD-5E2A39871A18@twistedmatrix.com>
References: <D114730E-21D4-42F1-A8EB-98C3FD1243E7@twistedmatrix.com>
 <CBFD7586-9EB0-4F12-9F5B-B9B4140397C9@twistedmatrix.com>
 <CAFycZ9dpZSH3rzc-WP2mC6frv9RdFQjV1aQa8O9-udkxYCvHSA@mail.gmail.com>
 <20141202190539.23969.240747748.divmod.xquotient.29@top>
 <31E42FCE-250A-4AA2-AAFD-5E2A39871A18@twistedmatrix.com>
Message-ID: <20141203174657.23969.1079878189.divmod.xquotient.34@top>

On 12:55 am, glyph at twistedmatrix.com wrote:
>
>>On Dec 2, 2014, at 20:05, exarkun at twistedmatrix.com wrote:
>
>>Are there lots of useless docstrings on nested function definitions 
>>purely for the sake of twistedchecker?  Or are there undocumented 
>>nested functions that are actually a little bit difficult to 
>>understand on their own?
>
>twistedchecker does not presently require nested function definitions 
>to have docstrings.  I recently merged a fix to an incongruity where it 
>was requiring this of classes defined within functions: 
><https://github.com/twisted/twistedchecker/commit/4af4e97f99d6e5f683b65272a8dbe7bce2087aa7>. 
>So this one, at least, we can cross off for the future :).

The broader context of this suggestion was that we should inspect the 
codebase to see what policy changes would improve the quality of the 
code/documentation while reducing the effort required to develop and 
maintain it.

It sounds like you have some ideas about such changes already.  Does 
that mean you'd like to suggest them (presumably in the form of issues 
filed against twistedhecker) instead of doing this investigation?

Jean-Paul



From adi at roiban.ro  Wed Dec  3 11:02:37 2014
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 3 Dec 2014 18:02:37 +0000
Subject: [Twisted-Python] doc bloat
In-Reply-To: <31E42FCE-250A-4AA2-AAFD-5E2A39871A18@twistedmatrix.com>
References: <D114730E-21D4-42F1-A8EB-98C3FD1243E7@twistedmatrix.com>
 <CBFD7586-9EB0-4F12-9F5B-B9B4140397C9@twistedmatrix.com>
 <CAFycZ9dpZSH3rzc-WP2mC6frv9RdFQjV1aQa8O9-udkxYCvHSA@mail.gmail.com>
 <20141202190539.23969.240747748.divmod.xquotient.29@top>
 <31E42FCE-250A-4AA2-AAFD-5E2A39871A18@twistedmatrix.com>
Message-ID: <CAFycZ9cspbURV5xmsWsj7=XgB6tRXZRjobpU61KVpgQis+pwbg@mail.gmail.com>

On 3 December 2014 at 00:55, Glyph <glyph at twistedmatrix.com> wrote:

>
> > On Dec 2, 2014, at 20:05, exarkun at twistedmatrix.com wrote:
>
> > Are there lots of useless docstrings on nested function definitions
> purely for the sake of twistedchecker?  Or are there undocumented nested
> functions that are actually a little bit difficult to understand on their
> own?
>
>
> twistedchecker does not presently require nested function

>From my experience, even nested functions need a sentence to describe
them....there are many nested functions used as deferred callbacks and I
prefer to have a sentence describing when they are called.

For callback methods I still don't know whether I should name based on what
they do or after the condition in which they are called. I prefer to name
them after what they do, but also to document in the docstring the
condition

But I don't think that nested functions required extensive apidoc/pydoctor
markup.

----------

In order to survey the current code, maybe we can create a wiki page, and
while reading/writing/reviewing code we can extract examples and put them
in the wiki page.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141203/f94d6e90/attachment-0002.html>

From jasonjwwilliams at gmail.com  Wed Dec  3 13:03:15 2014
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Wed, 3 Dec 2014 13:03:15 -0700
Subject: [Twisted-Python] Silverberg CQL Driver
Message-ID: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>

Is anyone using the silverberg CQL (Cassandra) library for Twisted in
production? Just curious what people's experience with it is, since it
appears to be the most recently updated Twisted/CQL project.

-J
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141203/7eb6b31d/attachment-0002.html>

From radix at twistedmatrix.com  Wed Dec  3 13:52:39 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 3 Dec 2014 14:52:39 -0600
Subject: [Twisted-Python] Silverberg CQL Driver
In-Reply-To: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>
References: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>
Message-ID: <2A763BE2-4CCC-40B4-8A26-185E8D49D3D1@twistedmatrix.com>

Yes, we use it in production in the Rackspace Otter project: https://github.com/rackerlabs/otter <https://github.com/rackerlabs/otter> 

The particular file we most use it in is here: https://github.com/rackerlabs/otter/blob/master/otter/models/cass.py#L530 <https://github.com/rackerlabs/otter/blob/master/otter/models/cass.py#L530> — the connection attribute of that class is a silverberg client.

I’ve not personally touched that code but I know we've been using it in production for about a year.

-radix


> On Dec 3, 2014, at 2:03 PM, Jason J. W. Williams <jasonjwwilliams at gmail.com> wrote:
> 
> Is anyone using the silverberg CQL (Cassandra) library for Twisted in production? Just curious what people's experience with it is, since it appears to be the most recently updated Twisted/CQL project.
> 
> -J
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141203/301eaa94/attachment-0002.html>

From roberto.polli at babel.it  Wed Dec  3 14:55:07 2014
From: roberto.polli at babel.it (Roberto Polli)
Date: Wed, 03 Dec 2014 22:55:07 +0100
Subject: [Twisted-Python] patch for t.p.logger.SyslogObserver (was #7549)
In-Reply-To: <3415350.qaLh0yVden@rpolli>
References: <2791328.hqOZV1DUty@rpolli>
 <8F3D48AE-0F9C-4BA3-97C1-1A3F9BC0B748@twistedmatrix.com>
 <3415350.qaLh0yVden@rpolli>
Message-ID: <2277994.xEdSQS5uQa@rpolli>

Hi Glyph|all,

I just noticed the t.p.logger is gone (or integrated). This made 
the patch for supporting logLevels in t.p.syslog straightforward: 

https://twistedmatrix.com/trac/attachment/ticket/7549/syslog-loglevels-7549.patch

There are plenty of tests and it worked nicely on my env,
allowing rsyslog to split my twistd app log in various files with different
priorities.

If you see some flaw in the tests just let me know... once I roll it 
for a while on my apps I'll put the ticket in review.

Sorry for the great delay :( 
Peace,
R.

-- 
Roberto Polli




From adi at roiban.ro  Thu Dec  4 06:48:21 2014
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 4 Dec 2014 13:48:21 +0000
Subject: [Twisted-Python] Automatically get dependencies in Buildbot
Message-ID: <CAFycZ9fhKZ7W51mzO=PercE0iVrWf_LTL0s=s4RzmEkPdgTEmw@mail.gmail.com>

Hi,

What do you say if Twisted buildbot would  be change to automatically
update dependencies before each test?

I have pushed some code here
https://github.com/twisted-infra/twisted-buildbot-configuration/pull/7 just
to start the conversation.

In this way, it  should be much easier to add new dependencies or to update
current dependencies... For example the patch from #7066 can not be tested
on current infrastructure.

I think the GitHub review is a better place to discuss this.

I have used a similar approach on my project which depends on about 100
packages (runtime, buildtime, ex sphinx and testing) and the whole step
takes 2 seconds (Unix/Linux/Windows) with a local cache and a local network
PyPi mirror (https://pypi.python.org/pypi/pypiserver)
With fixed version in dependencies, I never got any trouble.

Cheers
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141204/eec673d4/attachment-0002.html>

From grigorescu_ciprian at yahoo.com  Thu Dec  4 10:33:21 2014
From: grigorescu_ciprian at yahoo.com (Grigorescu Ciprian)
Date: Thu, 4 Dec 2014 17:33:21 +0000 (UTC)
Subject: [Twisted-Python] Catch clientConnectionLost in a Factory
Message-ID: <418175901.5066979.1417714401622.JavaMail.yahoo@jws10651.mail.bf1.yahoo.com>

Hello,
I have a small problem. I using SMTPClient and ClientFactory in order to send emails. I have something like:    observer['workers'] = total mails to send(connections)
    
    def got_result(*args):
        observer['results'] += 1

    def got_error(err):
        observer['errors'] += 1

    def got_end(_):
        if observer['results'] + observer['errors'] == observer['workers']:
            reactor.stop()

    factory = SomeFactory(...)    reactor.connectTCP(...)
    d.addCallbacks(got_result, got_error)
    d.addBoth(got_end)

class SomeFactory(ClientFactory):

    def clientConnectionLost(self, connector, reason):
        self.error_handle(reason)

    def error_handle(self, reason):
        if self.deferred is not None:
            d, self.deferred = self.deferred, None
            d.errback(reason)


Everything  is working ok if I don't have errors like: [Failure instance: Traceback (failure with no frames): <class 'twisted.internet.error.ConnectionLost'>: Connection to the other side was lost in a non-clean fashion: Connection lost.When I have a error like that, the rector is not stopping because the error counter is not incrementing. But when I kill the reactor, got_error() receive the errors and observer['results'] + observer['errors'] == observer['workers'] is evaluated and the reactor stops(with a error of course, Can't stop reactor that isn't running :)).

I don't understand how can I make this work. Can someone help me?
Thanks,

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141204/be425009/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec  4 13:24:30 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 4 Dec 2014 21:24:30 +0100
Subject: [Twisted-Python] doc bloat
In-Reply-To: <20141203174657.23969.1079878189.divmod.xquotient.34@top>
References: <D114730E-21D4-42F1-A8EB-98C3FD1243E7@twistedmatrix.com>
 <CBFD7586-9EB0-4F12-9F5B-B9B4140397C9@twistedmatrix.com>
 <CAFycZ9dpZSH3rzc-WP2mC6frv9RdFQjV1aQa8O9-udkxYCvHSA@mail.gmail.com>
 <20141202190539.23969.240747748.divmod.xquotient.29@top>
 <31E42FCE-250A-4AA2-AAFD-5E2A39871A18@twistedmatrix.com>
 <20141203174657.23969.1079878189.divmod.xquotient.34@top>
Message-ID: <BB436431-FD74-45A0-9B4D-217CC732FD51@twistedmatrix.com>


> On Dec 3, 2014, at 18:46, exarkun at twistedmatrix.com wrote:
> 
> On 12:55 am, glyph at twistedmatrix.com wrote:
>> 
>>> On Dec 2, 2014, at 20:05, exarkun at twistedmatrix.com wrote:
>> 
>>> Are there lots of useless docstrings on nested function definitions purely for the sake of twistedchecker?  Or are there undocumented nested functions that are actually a little bit difficult to understand on their own?
>> 
>> twistedchecker does not presently require nested function definitions to have docstrings.  I recently merged a fix to an incongruity where it was requiring this of classes defined within functions: <https://github.com/twisted/twistedchecker/commit/4af4e97f99d6e5f683b65272a8dbe7bce2087aa7>. So this one, at least, we can cross off for the future :).
> 
> The broader context of this suggestion was that we should inspect the codebase to see what policy changes would improve the quality of the code/documentation while reducing the effort required to develop and maintain it.
> 
> It sounds like you have some ideas about such changes already.  Does that mean you'd like to suggest them (presumably in the form of issues filed against twistedhecker) instead of doing this investigation?

In this one case, I believed I was simply bringing our tooling into line with existing policy.  twistedchecker already doesn't require docstrings on callbacks, it seemed like a clear bug that it required docstrings on those callbacks if they existed inside a class statement.

The letter of the policy is a little ambiguous, and perhaps it should be updated.  <https://twistedmatrix.com/documents/current/core/development/policy/coding-standard.html#docstrings <https://twistedmatrix.com/documents/current/core/development/policy/coding-standard.html#docstrings>> says docstrings "should" always be used, but it doesn't say "must".  And, as written, it has no exception for callbacks, which clearly contravenes our existing tooling and practice.

I do have a couple of other more specific ideas and I will almost certainly file twistedchecker issues for them :).

More broadly speaking I think it would be great to have some investigation into our code-quality issues.  I think that there are definitely lots of useless docstrings for the sake of twistedchecker, and I'm not quite sure how to classify those.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141204/20995ae4/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec  4 13:27:46 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 4 Dec 2014 21:27:46 +0100
Subject: [Twisted-Python] patch for t.p.logger.SyslogObserver (was #7549)
In-Reply-To: <2277994.xEdSQS5uQa@rpolli>
References: <2791328.hqOZV1DUty@rpolli>
 <8F3D48AE-0F9C-4BA3-97C1-1A3F9BC0B748@twistedmatrix.com>
 <3415350.qaLh0yVden@rpolli> <2277994.xEdSQS5uQa@rpolli>
Message-ID: <4E107FFC-5FED-4551-AB64-F27947296617@twistedmatrix.com>


> On Dec 3, 2014, at 22:55, Roberto Polli <roberto.polli at babel.it> wrote:
> 
> Hi Glyph|all,
> 
> I just noticed the t.p.logger is gone (or integrated). This made 
> the patch for supporting logLevels in t.p.syslog straightforward: 

It's not dead, it's just... resting.

More details here: <http://twistedmatrix.com/trac/milestone/New%20Logging%20System <http://twistedmatrix.com/trac/milestone/New%20Logging%20System>>

> https://twistedmatrix.com/trac/attachment/ticket/7549/syslog-loglevels-7549.patch
> 
> There are plenty of tests and it worked nicely on my env,
> allowing rsyslog to split my twistd app log in various files with different
> priorities.
> 
> If you see some flaw in the tests just let me know... once I roll it 
> for a while on my apps I'll put the ticket in review.
> 
> Sorry for the great delay :( 

Thanks for your contribution!  I'll probably only look at the tests once it's in review, though ;).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141204/105c6dce/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec  4 13:30:51 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 4 Dec 2014 21:30:51 +0100
Subject: [Twisted-Python] Automatically get dependencies in Buildbot
In-Reply-To: <CAFycZ9fhKZ7W51mzO=PercE0iVrWf_LTL0s=s4RzmEkPdgTEmw@mail.gmail.com>
References: <CAFycZ9fhKZ7W51mzO=PercE0iVrWf_LTL0s=s4RzmEkPdgTEmw@mail.gmail.com>
Message-ID: <EE52E45A-87BE-43C8-8E69-79B88E583DA4@twistedmatrix.com>


> On Dec 4, 2014, at 14:48, Adi Roiban <adi at roiban.ro> wrote:
> 
> I think the GitHub review is a better place to discuss this.

It looks like adi got his wish - in case anyone else is interested, <https://github.com/twisted-infra/twisted-buildbot-configuration/pull/7 <https://github.com/twisted-infra/twisted-buildbot-configuration/pull/7>> has been quite active :).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141204/e2b836a9/attachment-0002.html>

From roberto.polli at babel.it  Fri Dec  5 05:52:18 2014
From: roberto.polli at babel.it (Roberto Polli)
Date: Fri, 05 Dec 2014 13:52:18 +0100
Subject: [Twisted-Python] patch for t.p.logger.SyslogObserver (was #7549)
In-Reply-To: <4E107FFC-5FED-4551-AB64-F27947296617@twistedmatrix.com>
References: <2791328.hqOZV1DUty@rpolli> <2277994.xEdSQS5uQa@rpolli>
 <4E107FFC-5FED-4551-AB64-F27947296617@twistedmatrix.com>
Message-ID: <1915627.e1khLz6WT8@rpolli>

On Thursday 04 December 2014 21:27:46 Glyph wrote:
> Thanks for your contribution!  I'll probably only look at the tests once
> it's in review, though ;).
Ok, I'll search in list if there's somebody interested in trying the patch...

Peace,
R.
-- 
Roberto Polli
Community Manager
Babel - a business unit of Par-Tec S.p.A. - http://www.babel.it 
T: +39.06.9826.9651 M: +39.340.652.2736 F: +39.06.9826.9680
P.zza S.Benedetto da Norcia, 33 - 00040 Pomezia (Roma)

CONFIDENZIALE: Questo messaggio ed i suoi allegati sono di carattere 
confidenziale per i destinatari in indirizzo.
E' vietato l'inoltro non autorizzato a destinatari diversi da quelli indicati 
nel messaggio originale.
Se ricevuto per errore, l'uso del contenuto e' proibito; si prega di 
comunicarlo al mittente e cancellarlo immediatamente.



From tobias.oberstein at tavendo.de  Fri Dec  5 09:27:56 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 5 Dec 2014 08:27:56 -0800
Subject: [Twisted-Python] Looking for Python/Twisted developer to work on
	Open-source
Message-ID: <634914A010D0B943A035D226786325D44974B62CA1@EXVMBX020-12.exch020.serverdata.net>

Hi,

we're looking for an experienced, dedicated Python / Twisted developer to work on http://crossbar.io/ helping us move faster.

The code base is around 40k LOC right now, all open-source here

https://github.com/crossbario/crossbar
https://github.com/tavendo/AutobahnPython

This stuff is all new, probably non-trivial, but I'd say technically exciting.  Means: a "challenge" should be something that wakes you up;)

We have big plans, and we're starting to see strong uptake - both community and commercial, in particular in IoT.

You'll work remotely, as you like, when and where you like. Payment by hours for now, maybe more down the road. 

If you are interested, please respond by mail, including some interesting bits about you, plus your GitHub handle (or similar), expectations, time zone and rate.

If you are not interested, please forward;)

Cheers,
/Tobias



From alexandre at quessy.net  Sat Dec  6 11:15:39 2014
From: alexandre at quessy.net (Alexandre Quessy)
Date: Sat, 6 Dec 2014 13:15:39 -0500
Subject: [Twisted-Python] Mixing Python threads and Twisted code
Message-ID: <CACjeMqQbX5-+H5ds1DCAZiAFkU=EYfYNk0tDVTq_RY+OKvg9qw@mail.gmail.com>

Hello everyone,

What happens if some code starts a thread while I am using Twisted's
reactor?

Here is what I need to use:
https://github.com/ekulyk/PythonPusherClient/blob/master/pusherclient/connection.py#L12

This thread polls some socket to handle received TCP messages. It appears
it has been very slow in production. Is it this mix of twisted and
non-twisted threading that causes this brutal slowdown? If so, how can I
easily speed it up without having to twistify the library I need to use?
(and practically rewrite it)

Thank you,
-- 
Alexandre Quessy - 亚历山大 - ألكسندر
http://alexandre.quessy.net - Artiste en nouveaux médias
http://perte-de-signal.org - Membre de Perte de signal
http://sourcelibre.net - Développement logiciel et conception de sites Web
http://labalab.ca - Impliqué dans LabàLab - communauté de pratique en arts
numériques
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141206/76657c9f/attachment-0002.html>

From exarkun at twistedmatrix.com  Sat Dec  6 11:47:51 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Dec 2014 18:47:51 -0000
Subject: [Twisted-Python] Mixing Python threads and Twisted code
In-Reply-To: <CACjeMqQbX5-+H5ds1DCAZiAFkU=EYfYNk0tDVTq_RY+OKvg9qw@mail.gmail.com>
References: <CACjeMqQbX5-+H5ds1DCAZiAFkU=EYfYNk0tDVTq_RY+OKvg9qw@mail.gmail.com>
Message-ID: <20141206184751.23969.1685530235.divmod.xquotient.39@top>

On 06:15 pm, alexandre at quessy.net wrote:
>Hello everyone,
>
>What happens if some code starts a thread while I am using Twisted's
>reactor?

Nothing special.
>Here is what I need to use:
>https://github.com/ekulyk/PythonPusherClient/blob/master/pusherclient/connection.py#L12
>
>This thread polls some socket to handle received TCP messages. It 
>appears
>it has been very slow in production. Is it this mix of twisted and
>non-twisted threading that causes this brutal slowdown?

Not likely.  Twisted doesn't have its own threading implementation. 
Twisted has a threadpool module which is a thin layer on top of Python's 
threading module.
>If so, how can I
>easily speed it up without having to twistify the library I need to 
>use?
>(and practically rewrite it)

Profile it.  Find the particular operations that are slow.  Then you'll 
be one step closer to knowing how to speed things up.

Jean-Paul



From trac at twistedmatrix.com  Sun Dec  7 00:05:17 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 07 Dec 2014 07:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1417935917.98.8427750577423996578@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141207/64369f27/attachment-0002.html>

From alexandre at quessy.net  Sun Dec  7 16:05:23 2014
From: alexandre at quessy.net (Alexandre Quessy)
Date: Sun, 7 Dec 2014 18:05:23 -0500
Subject: [Twisted-Python] Mixing Python threads and Twisted code
In-Reply-To: <20141206184751.23969.1685530235.divmod.xquotient.39@top>
References: <CACjeMqQbX5-+H5ds1DCAZiAFkU=EYfYNk0tDVTq_RY+OKvg9qw@mail.gmail.com>
 <20141206184751.23969.1685530235.divmod.xquotient.39@top>
Message-ID: <CACjeMqR0GKhU_Oo78OcYgN-XNZeNuHkQ1MLkGgArOs_+FO+LuQ@mail.gmail.com>

Hello everyone,
Thanks Jean-Paul for the tips!

Now, I figured out that this thread was calling some callbacks, which in
turn were either sending some UDP using a child of Twisted's datagram
protocol, or launching processes using t.p.procutils.which and
t.i.utils.getProcessOutputAndValue. None of this is guaranteed to be
thread-safe, according to
http://twistedmatrix.com/documents/current/core/howto/threading.html.

I just added a reactor.callFromThread before calling my callbacks, and it
should now be much faster...

Best,

2014-12-06 13:47 GMT-05:00 <exarkun at twistedmatrix.com>:

> On 06:15 pm, alexandre at quessy.net wrote:
>
>> Hello everyone,
>>
>> What happens if some code starts a thread while I am using Twisted's
>> reactor?
>>
>
> Nothing special.
>
>> Here is what I need to use:
>> https://github.com/ekulyk/PythonPusherClient/blob/master/pusherclient/
>> connection.py#L12
>>
>> This thread polls some socket to handle received TCP messages. It appears
>> it has been very slow in production. Is it this mix of twisted and
>> non-twisted threading that causes this brutal slowdown?
>>
>
> Not likely.  Twisted doesn't have its own threading implementation.
> Twisted has a threadpool module which is a thin layer on top of Python's
> threading module.
>
>> If so, how can I
>> easily speed it up without having to twistify the library I need to use?
>> (and practically rewrite it)
>>
>
> Profile it.  Find the particular operations that are slow.  Then you'll be
> one step closer to knowing how to speed things up.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alexandre Quessy - 亚历山大 - ألكسندر
http://alexandre.quessy.net - Artiste en nouveaux médias
http://perte-de-signal.org - Membre de Perte de signal
http://sourcelibre.net - Développement logiciel et conception de sites Web
http://labalab.ca - Impliqué dans LabàLab - communauté de pratique en arts
numériques
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141207/8ebc6d04/attachment-0002.html>

From mikeepps756 at gmail.com  Tue Dec  9 09:08:27 2014
From: mikeepps756 at gmail.com (Mike Epps)
Date: Tue, 9 Dec 2014 19:08:27 +0300
Subject: [Twisted-Python] Mixing Twisted with Kivy
Message-ID: <CAPTefu1w6Ewf4RB9Q9CfRtWE6fR1hcH67j4dW6ATgB7p7Fa9VA@mail.gmail.com>

Hello,
Im looking for examples of mixing twisted with kivy. The only examples I
have seen are from the kivy site but they do not include examples that show
how to use the kv language files separate from the python code. I would
appreciate any links that show such examples.
thnx..
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141209/277bbd16/attachment-0002.html>

From itamar at itamarst.org  Wed Dec 10 11:19:57 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 10 Dec 2014 13:19:57 -0500
Subject: [Twisted-Python] ANN: Eliot 0.6: Logging for Complex & Distributed
	Systems
Message-ID: <30fa71b3f56970a946f32cb18f66794e@itamarst.org>

 
Eliot is a logging system designed not only for simple applications but
for complex applications as well, including distributed systems. Eliot
supports simple structured messages but can also record a causal chain
of actions happening within and across process boundaries: a logical
trace of the system's operation. 

Structured, action-oriented logging is a great help when debugging
problems. For example, here are the combined logs of a request
originating from a client process being sent to a server. Notice how
easy it is to figure out the cause of the problem, even though it's
opaque to the client: 

process='client' task_uuid='40be6df2' task_level=[1] action_type='main'
 action_status='started'

process='client' task_uuid='40be6df2' task_level=[2, 1]
action_type='http_request'
 action_status='started' x=5 y=0

process='server' task_uuid='40be6df2' task_level=[2, 2, 1]
action_type='eliot:remote_task'
 action_status='started'

process='server' task_uuid='40be6df2' task_level=[2, 2, 2, 1]
action_type='divide'
 action_status='started' x=5 y=0

process='server' task_uuid='40be6df2' task_level=[2, 2, 2, 2]
action_type='divide'
 action_status='failed' exception='exceptions.ZeroDivisionError'
reason='integer division or modulo by zero'

process='server' task_uuid='40be6df2' task_level=[2, 2, 3]
action_type='eliot:remote_task'
 action_status='failed' exception='exceptions.ZeroDivisionError'
reason='integer division or modulo by zero'

process='client' task_uuid='40be6df2' task_level=[2, 3]
action_type='http_request'
 action_status='failed' exception='requests.exception.HTTPError'
reason='500 Server Error: INTERNAL SERVER ERROR'

process='client' task_uuid='40be6df2' task_level=[3] action_type='main'
 action_status='failed' exception='requests.exception.HTTPError'
reason='500 Server Error: INTERNAL SERVER ERROR'

WHAT'S NEW IN 0.6.0

Incompatible output format change! In previous versions the ordering of
messages and actions was ambiguous and could not be deduced from
out-of-order logs, and even where it was possible sorting correctly was
difficult. To fix this the action_counter field was removed and now all
messages can be uniquely located within a specific task by the values in
an _improved task_level field_ [1]. 

Features: 

 	* Eliot tasks can now _span multiple processes and threads_ [2],
allowing for easy tracing of actions in distributed applications.
 	* _eliot.add_global_fields_ [3] allows adding fields with specific
values to all Eliot messages logged by your program. This can be used to
e.g. distinguish between log messages from different processes by
including relevant identifying information.

Bug fixes: 

 	* On Python 3 files that accept unicode (e.g. sys.stdout) should now
work.

Downloads are available on PyPI [4]. 

Documentation can be found on Read The Docs [5]. 

Bugs and feature requests should be filed at the project Github page
[6]. 

You can ask for help on IRC at the #eliot channel on irc.freenode.net
[7]. 
 

Links:
------
[1] http://eliot.readthedocs.org/en/0.6.0/fields.html#task-fields
[2]
http://eliot.readthedocs.org/en/0.6.0/threads.html#cross-process-tasks
[3] http://eliot.readthedocs.org/en/0.6.0/output.html#add-global-fields
[4] https://pypi.python.org/pypi/eliot
[5] https://eliot.readthedocs.org/
[6] https://github.com/ClusterHQ/eliot
[7] http://irc.freenode.net
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141210/ee1b1928/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec 11 16:47:18 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 12 Dec 2014 00:47:18 +0100
Subject: [Twisted-Python] Tubes!
In-Reply-To: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
Message-ID: <33AFD868-F24B-45DC-908C-E5850C19A9A0@twistedmatrix.com>


> On Jul 10, 2014, at 21:32, exarkun at twistedmatrix.com wrote:
> 
> Tubes have been largely Glyph's effort (though a lot of people have contributed in one way or another).  And a large effort it's been. Development is proceeding in a Twisted branch and comes to over three thousand lines of additions so far.
> 
> Given the large size of the implementation and the long time that this effort has been underway (I remember the Twisted meetup at the Rackspace offices that *I* attended when I was visiting SF... a year and a half ago... at which point tubes wasn't exactly a brand new project) I'd like to re-raise the idea that the best next step for the project is to see some distribution in its *current* state.

When Jean-Paul originally wrote this message, I strongly disagreed.

In the intervening six months, I've been working on Tubes on and off.  In the last couple of weeks, I've had a bit of time to make a concerted effort to improve the branch, and it is starting to approach something like a finished state: there is still a lot of polish necessary, but as I've tested them against more and more use-cases, the core abstractions seem to be holding up rather well, and several rounds of increasingly elaborate use-cases did not result in any big rewrites or mystifying un-debuggable re-entrancy scenarios in the implementation.

One change Thomas Hervé assisted me in making today was to remove Deferred support from the core of "tube" itself, and instead factor it out into a separate module.  Interested readers may find that module here:

<https://github.com/twisted/twisted/blob/tubes-1956-8/twisted/tubes/undefer.py>

It's not finished (mostly it needs testing for errbacks and the addition of yielding non-Deferred values).

This change radically simplifies the conceptual model around consuming asynchronous results within the implementation. If you want to deal with results instead of Deferreds, you just create this tube that turns Deferreds into their results - the only special-casing inside tube itself is a special value that says "when you yield this, don't actually emit an output to the next drain in the series".

Another thing that this change does is illustrate the fact that literally nothing in the core part of Tubes has come to depend on Twisted - and indeed, as the factoring has improved over time, the coupling between Twisted and the core Tubes abstraction has become looser and looser.  This is a very good thing architecturally.  Examining the few remaining points of coupling, there are pretty much only two: twisted's logging serves as the global error-handler hook (which can be easily changed to a simple bootstrapping API) and the use of Failure as the "reason" parameter to the .flowStopped and .stopped methods.  This was copied from IProtocol, of course, but I think that upon reflection it is a bad idea.  Failure, even at its best, is simply an abstraction over exception-as-raised.  For Deferreds, this makes sense; asynchronous errors are similar to, and may be directly caused by, code raising an unexpected exception.  However, although Tubes are analogous, a raised exception is an anomalous way for a flow to terminate, and I think the right thing to do there is actually to unconditionally log the exception, passing only a token value saying "application error" into the flowStopped method itself; the main use-case for the "reason" parameter is to distinguish between subtly different protocol conditions which may cause a connection termination; it's not an appropriate place to start handling unexpected exceptions.  (When I have written code that does this using Twisted the inevitable result is an exception whose traceback disappears mysteriously and makes debugging a pain.)

To sum up, the more this abstraction decouples from other things within Twisted, the more it becomes depended upon rather than itself doing the depending, the cleaner, simpler, and easier to use it gets.

So now I think I was wrong.  I now agree with Jean-Paul, and in fact the pendulum of my opinion has swung a bit farther in the other direction.  Not only should Tubes be released independently, I think they are a lower-level library that Twisted should eventually depend on.  This library could just as easily have adapters for other loops, like tornado and asyncio, as well as providing potentially interesting support for doing things like eventually replacing Deferreds - see for example <https://pypi.python.org/pypi/effect>.

So rather than have a single "tubes" package, I think I will break the branch into two pieces:

The "tubes" package itself, which will have no external dependencies and will pretty much just be buffer-management, fan-in, fan-out, buffering, throttling, filtering, routing, and framing-protocol code, intended to remain separate for the long term.  This will probably mean some small amount of code duplication between LineReceiver et. al. and tubes.framing, but that seems fine to me.

The "twisted+tubes" package, perhaps named "helical" (since that is (A) an adjective that describes something which is (B) twisted and (C) also a tube), that depends on tubes and twisted, includes the integration points for endpoint, deferreds, and protocol, and which may be suitable for merging into Twisted later.

I'm traveling at the moment and might not have much time to work on this in the coming week, so if anyone wants to comment on these plans you have plenty of time :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141212/dde765e7/attachment-0002.html>

From itamar at itamarst.org  Thu Dec 11 16:55:28 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 11 Dec 2014 18:55:28 -0500
Subject: [Twisted-Python] Tubes!
In-Reply-To: <33AFD868-F24B-45DC-908C-E5850C19A9A0@twistedmatrix.com>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <33AFD868-F24B-45DC-908C-E5850C19A9A0@twistedmatrix.com>
Message-ID: <548A2EF0.9020608@itamarst.org>

I would suggest including the Twisted support inside tubes as a first 
pass, restricted to a module (e.g. tubes.helical). Less overhead and as 
long as it's optional it's not preventing anyone from using tubes with 
other frameworks.

Otherwise, +100.



From donald at stufft.io  Thu Dec 11 17:00:26 2014
From: donald at stufft.io (Donald Stufft)
Date: Thu, 11 Dec 2014 19:00:26 -0500
Subject: [Twisted-Python] Tubes!
In-Reply-To: <548A2EF0.9020608@itamarst.org>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <33AFD868-F24B-45DC-908C-E5850C19A9A0@twistedmatrix.com>
 <548A2EF0.9020608@itamarst.org>
Message-ID: <305293C0-E41E-43E4-9D2F-8C78CD20B72F@stufft.io>


> On Dec 11, 2014, at 6:55 PM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> I would suggest including the Twisted support inside tubes as a first pass, restricted to a module (e.g. tubes.helical). Less overhead and as long as it's optional it's not preventing anyone from using tubes with other frameworks.
> 
> Otherwise, +100.

If you do this, I would just do something like tubes.integrations.{twisted,tornado,asyncio} etc.

---
Donald Stufft
PGP: 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA




From radix at twistedmatrix.com  Thu Dec 11 17:09:17 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 11 Dec 2014 18:09:17 -0600
Subject: [Twisted-Python] Tubes!
In-Reply-To: <305293C0-E41E-43E4-9D2F-8C78CD20B72F@stufft.io>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <33AFD868-F24B-45DC-908C-E5850C19A9A0@twistedmatrix.com>
 <548A2EF0.9020608@itamarst.org>
 <305293C0-E41E-43E4-9D2F-8C78CD20B72F@stufft.io>
Message-ID: <90140F63-0A97-49B3-A5A1-8EF39ACE1A60@twistedmatrix.com>


> On Dec 11, 2014, at 6:00 PM, Donald Stufft <donald at stufft.io> wrote:
> 
> 
>> On Dec 11, 2014, at 6:55 PM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
>> 
>> I would suggest including the Twisted support inside tubes as a first pass, restricted to a module (e.g. tubes.helical). Less overhead and as long as it's optional it's not preventing anyone from using tubes with other frameworks.
>> 
>> Otherwise, +100.
> 
> If you do this, I would just do something like tubes.integrations.{twisted,tornado,asyncio} etc.
> 


I think I prefer integration modules to be separate, though I myself have broken this rule in the Effect library (which has an effect.twisted module). I think I may separate it out to another library if I ever release Effect as a non-alpha. Keeping integration libraries separate keeps your dependencies nice and simple. And we live in a world where installing dependencies is trivial now, right? :)

But yeah, +100. I’m really happy you came to this conclusion.

-radix


From sank.daniel at gmail.com  Thu Dec 11 23:43:42 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 11 Dec 2014 22:43:42 -0800
Subject: [Twisted-Python] Tubes!
In-Reply-To: <90140F63-0A97-49B3-A5A1-8EF39ACE1A60@twistedmatrix.com>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <33AFD868-F24B-45DC-908C-E5850C19A9A0@twistedmatrix.com>
 <548A2EF0.9020608@itamarst.org>
 <305293C0-E41E-43E4-9D2F-8C78CD20B72F@stufft.io>
 <90140F63-0A97-49B3-A5A1-8EF39ACE1A60@twistedmatrix.com>
Message-ID: <CAKN9TD+dA0+AYtonk5MCmxakp68xvv5dJUL=1T77U3_OPN7fpA@mail.gmail.com>

A helix is twisted but isn't necessarily a tube. Macaroni on the other
hand...

On Thu, Dec 11, 2014 at 4:09 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:
>
>
> > On Dec 11, 2014, at 6:00 PM, Donald Stufft <donald at stufft.io> wrote:
> >
> >
> >> On Dec 11, 2014, at 6:55 PM, Itamar Turner-Trauring <
> itamar at itamarst.org> wrote:
> >>
> >> I would suggest including the Twisted support inside tubes as a first
> pass, restricted to a module (e.g. tubes.helical). Less overhead and as
> long as it's optional it's not preventing anyone from using tubes with
> other frameworks.
> >>
> >> Otherwise, +100.
> >
> > If you do this, I would just do something like
> tubes.integrations.{twisted,tornado,asyncio} etc.
> >
>
>
> I think I prefer integration modules to be separate, though I myself have
> broken this rule in the Effect library (which has an effect.twisted
> module). I think I may separate it out to another library if I ever release
> Effect as a non-alpha. Keeping integration libraries separate keeps your
> dependencies nice and simple. And we live in a world where installing
> dependencies is trivial now, right? :)
>
> But yeah, +100. I’m really happy you came to this conclusion.
>
> -radix
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141211/4acc8af6/attachment-0002.html>

From trac at twistedmatrix.com  Sun Dec 14 00:05:16 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 14 Dec 2014 07:05:16 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1418540716.86.7528449025740691277@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141214/f5a13930/attachment-0002.html>

From adam at dormchatapp.com  Thu Dec 18 11:31:18 2014
From: adam at dormchatapp.com (Adam Michalski)
Date: Thu, 18 Dec 2014 10:31:18 -0800 (PST)
Subject: [Twisted-Python] =?utf-8?q?Python_Twisted_Questions=E2=80=8B?=
 =?utf-8?b?4oCL4oCL4oCL?=
In-Reply-To: <1418781491602.376b09de@Nodemailer>
References: <1418781491602.376b09de@Nodemailer>
Message-ID: <1418927477437.094c5a46@Nodemailer>

Hi All!
  
 Thanks so much for the response. We’ve looked into it and here are our findings:
  
  
 We have implemented Linereceiver in our original script to receive the data.
  
 It’s working successfully if we connect to the server through terminal – i.e. we’re getting proper input from terminal client and also proper response is received to the terminal client.
  
 It fails when we try to integrate this with the iOS. i.e. it’s connecting to the server successfully but not getting the inputs properly from the iOS client.
  
 e.g., if the command is:
  
 "demo:{"userid":"1","chatroomid":"1"}"
  
 On server I am getting the below:
  
 demo:{
  
 Please find attached the python script.
  
 Note: This seems to be an iOS specific Python issue - when running the same script from Mac OS X it is functioning as expected. If there’s anyone you believe we should redirect the question towards, just let me know. :)
  
 Again, I really appreciate your help with this. You’ve been super helpful.
  
 -Adam
 Founder, DormChat
 dormchat.com
 
 
Begin forwarded message:

On Tuesday, Dec 2, 2014 at 8:22 PM, Glyph <glyph at twistedmatrix.com>, wrote:


 On Dec 2, 2014, at 23:30, Adam <adam at dormchatapp.com> wrote: 

I assume you're using this tutorial?
 

 <http://www.raywenderlich.com/3932/networking-tutorial-for-ios-how-to-create-a-socket-based-iphone-app-and-server>
 

 It is unfortunate that this has not been updated with better information, it seems to confuse a lot of people making iOS applications ;).
  1. Please find attached Python script. We have integrated the Twisted framework with iOS for chat module. Attached is our Python demo code in which we have implemented this. The issue is when we try to connect with the server through the terminal, we are getting the complete correct response without any error. But when it was integrated on the iOS app, data is getting received in chunks (i.e. if data exceeds 1366 bytes or above in json size it comes in pieces which creates a problem when sending and receiving chats)

This is a frequently asked question:
 

 <https://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith>

 
In other words, if you want a message-oriented protocol, you can't just use dataReceived.
 

 For sending short JSON structures back and forth, line-delimited data structures are a reasonable choice.  On the Twisted side, you can use twisted.protocols.basic.LineReceiver, and override lineReceived instead of dataReceived.
 

 On the iOS side, you need a radically different structure for buffering your input; you can't just stuff it into a buffer on the stack.  One quick hacky way to do this would be to give your object a NSString bufferString instance variable, and do bufferString = [bufferString stringByAppendingString: [[NSString alloc] initWithBytes:buffer length:len encoding:NSASCIIStringEncoding]]; NSArray* lines = [bufferString componentsSeparatedByString: @"\r\n"];, bufferString = [lines lastObject];, then loop over the other items in lines.
 

 Keep in mind you also need to do this for output; as you send output to the server, you may not be able to send all of it at once, so you need to keep a buffer, and keep track of how much you've written, etc.
 

 Or you could just build Python into your app on iOS and run Twisted in there.  If you manage to get that working be sure to let us know how it goes :-).  I am lead to believe that <http://omz-software.com/pythonista/> contains a template for at least getting the Python runtime going...
 

 -glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141218/bee2460f/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: newdemo.py
Type: application/octet-stream
Size: 9196 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20141218/bee2460f/attachment-0002.obj>

From trac at twistedmatrix.com  Sun Dec 21 00:05:16 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 21 Dec 2014 07:05:16 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1419145516.99.8899354704451720435@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141221/6bdce11d/attachment-0002.html>

From adi.lavi at cortica.com  Sun Dec 21 04:47:11 2014
From: adi.lavi at cortica.com (Adi Lavi)
Date: Sun, 21 Dec 2014 13:47:11 +0200
Subject: [Twisted-Python] Scrapy spiders waiting in reactor thread when
 callFromThread gets call repeatedly
Message-ID: <CANED_30Lh0CaQuX=i8je4Z4W855UZf5pJnUuhVxFsjFUig3jag@mail.gmail.com>

Hi,
I am using Pika's asynchronous consumer implementation with Scrapy and
Twisted. I have twisted reactor running on the main thread, and Rabbit
consumer running on a background thread. When I get a message and want to
start my spider, I use 'callFromThread' to wake the reactor thread, init
the spider and start crawling.

Alas, on high load of Q messages, I find that because 'callFromThread' is
called all the time, Scrapy does not start downloading until there is some
'break' in these calls.

I am wondering what is the best approach to gain high scale with Scrapy,
Twisted and RabbitMQ. Should I continue using the current design, and
simply do some buffering or batching to reduce the 'callFromThread'
frequency? Perhaps I should use a synchronous design?

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141221/3351d230/attachment-0002.html>

From clayton.daley at gmail.com  Sun Dec 21 14:05:44 2014
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sun, 21 Dec 2014 16:05:44 -0500
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
Message-ID: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>

Are there any major disadvantages of using pymongo with callInThread
instead of txmongo?  I'd like to take advantage of some newer features in
pymongo (unfortunately not available in txmongo) and it's certainly easier
to maintain feature parity using callInThread.

Clayton Daley
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141221/b52b2677/attachment-0002.html>

From dynamicgl at gmail.com  Mon Dec 22 23:51:03 2014
From: dynamicgl at gmail.com (Gelin Yan)
Date: Tue, 23 Dec 2014 14:51:03 +0800
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
Message-ID: <CABkOF6Q-A_96kzX=DyLhWn1HF9CBiRu+BrkuuVviCozAxL7H7g@mail.gmail.com>

On Mon, Dec 22, 2014 at 5:05 AM, Clayton Daley <clayton.daley at gmail.com>
wrote:

> Are there any major disadvantages of using pymongo with callInThread
> instead of txmongo?  I'd like to take advantage of some newer features in
> pymongo (unfortunately not available in txmongo) and it's certainly easier
> to maintain feature parity using callInThread.
>
> Clayton Daley
>
>
>
Hi Clayton

    Txmongo has been inactive for a while so I suggest using pymongo &
twisted thread pool. I have been using them for a couple of years and they
work quite well.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141223/e1bef73e/attachment-0002.html>

From dustin at v.igoro.us  Tue Dec 23 08:49:47 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Tue, 23 Dec 2014 10:49:47 -0500
Subject: [Twisted-Python] Scrapy spiders waiting in reactor thread when
 callFromThread gets call repeatedly
In-Reply-To: <CANED_30Lh0CaQuX=i8je4Z4W855UZf5pJnUuhVxFsjFUig3jag@mail.gmail.com>
References: <CANED_30Lh0CaQuX=i8je4Z4W855UZf5pJnUuhVxFsjFUig3jag@mail.gmail.com>
Message-ID: <CAJtE5vQT66fVk=UuadH_H=fwJYaLUvYAfmVgm0918LFfBpsvJg@mail.gmail.com>

What *is* happening?  Underneath, callFromThread is basically just
setting a flag and writing to a file descriptor or some similar thing
to wake the reactor from its polling sleep.  Even at very high load,
the reactor should be multiplexing reads from that file descriptor
(which can act as a form of batching) with actual scraping.

Dustin

On Sun, Dec 21, 2014 at 6:47 AM, Adi Lavi <adi.lavi at cortica.com> wrote:
> Hi,
> I am using Pika's asynchronous consumer implementation with Scrapy and
> Twisted. I have twisted reactor running on the main thread, and Rabbit
> consumer running on a background thread. When I get a message and want to
> start my spider, I use 'callFromThread' to wake the reactor thread, init the
> spider and start crawling.
>
> Alas, on high load of Q messages, I find that because 'callFromThread' is
> called all the time, Scrapy does not start downloading until there is some
> 'break' in these calls.
>
> I am wondering what is the best approach to gain high scale with Scrapy,
> Twisted and RabbitMQ. Should I continue using the current design, and simply
> do some buffering or batching to reduce the 'callFromThread' frequency?
> Perhaps I should use a synchronous design?
>
> Thanks
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From clayton.daley at gmail.com  Wed Dec 24 17:26:53 2014
From: clayton.daley at gmail.com (Clayton Daley)
Date: Wed, 24 Dec 2014 19:26:53 -0500
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CABkOF6Q-A_96kzX=DyLhWn1HF9CBiRu+BrkuuVviCozAxL7H7g@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <CABkOF6Q-A_96kzX=DyLhWn1HF9CBiRu+BrkuuVviCozAxL7H7g@mail.gmail.com>
Message-ID: <CACKEAnW8W4cHjvgQ8iHX+3z8yXjGcXZoa=NbqsWZoS+Pdmk5Qw@mail.gmail.com>

Thanks.  Are you aware of any resources that clarify which pymongo calls
are lazy and which actually result in calls to the Mongo server (thus
really benefit from derferToThread)?


Clayton Daley
clayton.daley at gmail.com
513.505.1236

On Tue, Dec 23, 2014 at 1:51 AM, Gelin Yan <dynamicgl at gmail.com> wrote:

>
>
> On Mon, Dec 22, 2014 at 5:05 AM, Clayton Daley <clayton.daley at gmail.com>
> wrote:
>
>> Are there any major disadvantages of using pymongo with callInThread
>> instead of txmongo?  I'd like to take advantage of some newer features in
>> pymongo (unfortunately not available in txmongo) and it's certainly easier
>> to maintain feature parity using callInThread.
>>
>> Clayton Daley
>>
>>
>>
> Hi Clayton
>
>     Txmongo has been inactive for a while so I suggest using pymongo &
> twisted thread pool. I have been using them for a couple of years and they
> work quite well.
>
> Regards
>
> gelin yan
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141224/ebabd89f/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Dec 26 17:13:50 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 26 Dec 2014 16:13:50 -0800
Subject: [Twisted-Python] tubes now a separate project
Message-ID: <A4213218-40A9-424E-AF4A-64A4781B8CF2@twistedmatrix.com>

Apropos of recent discussion, I have moved tubes <https://tm.tl/1956> to github <https://github.com/twisted/tubes/>.

I've filed some issues there and plan to file more.  Please start sending pull requests if you'd like to work on it with me.

-glyph


From glyph at twistedmatrix.com  Fri Dec 26 17:26:30 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 26 Dec 2014 16:26:30 -0800
Subject: [Twisted-Python] tubes now a separate project
In-Reply-To: <A4213218-40A9-424E-AF4A-64A4781B8CF2@twistedmatrix.com>
References: <A4213218-40A9-424E-AF4A-64A4781B8CF2@twistedmatrix.com>
Message-ID: <C9F6D0D3-EA88-42BC-9983-327B773B47E6@twistedmatrix.com>


> On Dec 26, 2014, at 4:13 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> Apropos of recent discussion, I have moved tubes <https://tm.tl/1956> to github <https://github.com/twisted/tubes/>.
> 
> I've filed some issues there and plan to file more.  Please start sending pull requests if you'd like to work on it with me.

Also possibly of interest: you can now try out tubes via

pip install git+https://github.com/twisted/tubes

I am going to be putting something on PyPI soon; I've gotten in touch with the person who registered <https://warehouse.python.org/project/tubes/> and then apparently did nothing with it via their bitbucket account but have not heard back yet.  If anyone has a more direct contact method I'd be happy if you could put me in touch :-).

-glyph




From sank.daniel at gmail.com  Sat Dec 27 08:30:05 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sat, 27 Dec 2014 10:30:05 -0500
Subject: [Twisted-Python] not terrible object oriented rpc system in js?
Message-ID: <CAKN9TDK5KPKOTX2PRhbKYi=kdEK0xYmrBw=5-Or1WCC-PsadjQ@mail.gmail.com>

Are you guys aware of anything which solves the same kind of problem as
t.s.pb but in js? I asked about this on the js stack exchange chat room and
the general response was that there's isn't anything. I figured y'all might
know more.

-- 
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141227/a5fbb9ff/attachment-0002.html>

From exarkun at twistedmatrix.com  Sat Dec 27 10:46:52 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 27 Dec 2014 17:46:52 -0000
Subject: [Twisted-Python] tubes now a separate project
In-Reply-To: <A4213218-40A9-424E-AF4A-64A4781B8CF2@twistedmatrix.com>
References: <A4213218-40A9-424E-AF4A-64A4781B8CF2@twistedmatrix.com>
Message-ID: <20141227174652.24248.29234780.divmod.xquotient.1@top>

On 12:13 am, glyph at twistedmatrix.com wrote:
>Apropos of recent discussion, I have moved tubes <https://tm.tl/1956> 
>to github <https://github.com/twisted/tubes/>.
>
>I've filed some issues there and plan to file more.  Please start 
>sending pull requests if you'd like to work on it with me.

Cool!  Thank you very much for this.  I'm looking forward to doing some 
serious playing around with this.

Jean-Paul



From sauer.jens at yahoo.de  Sat Dec 27 11:23:29 2014
From: sauer.jens at yahoo.de (Jens Sauer)
Date: Sat, 27 Dec 2014 18:23:29 +0000 (UTC)
Subject: [Twisted-Python] not terrible object oriented rpc system in js?
In-Reply-To: <CAKN9TDK5KPKOTX2PRhbKYi=kdEK0xYmrBw=5-Or1WCC-PsadjQ@mail.gmail.com>
References: <CAKN9TDK5KPKOTX2PRhbKYi=kdEK0xYmrBw=5-Or1WCC-PsadjQ@mail.gmail.com>
Message-ID: <1787893211.1857814.1419704609087.JavaMail.yahoo@jws11114.mail.ir2.yahoo.com>

Hi Daniel,
whats about node.js with http://uber.github.io/multitransport-jsonrpc/
Regards
J.Sauer
      Von: Daniel Sank <sank.daniel at gmail.com>
 An: twisted-python <twisted-python at twistedmatrix.com> 
 Gesendet: 16:30 Samstag, 27.Dezember 2014
 Betreff: [Twisted-Python] not terrible object oriented rpc system in js?
   
Are you guys aware of anything which solves the same kind of problem as t.s.pb but in js? I asked about this on the js stack exchange chat room and the general response was that there's isn't anything. I figured y'all might know more.

-- 
Daniel Sank



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141227/32c69c84/attachment-0002.html>

From sank.daniel at gmail.com  Sat Dec 27 13:06:13 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sat, 27 Dec 2014 15:06:13 -0500
Subject: [Twisted-Python] not terrible object oriented rpc system in js?
In-Reply-To: <1787893211.1857814.1419704609087.JavaMail.yahoo@jws11114.mail.ir2.yahoo.com>
References: <CAKN9TDK5KPKOTX2PRhbKYi=kdEK0xYmrBw=5-Or1WCC-PsadjQ@mail.gmail.com>
 <1787893211.1857814.1419704609087.JavaMail.yahoo@jws11114.mail.ir2.yahoo.com>
Message-ID: <CAKN9TDLqNrObAVtJeLzsaL3i6JW8C1pPv7Vp6Tqb701c7kt0KA@mail.gmail.com>

This looks promising. Thanks.

On Sat, Dec 27, 2014 at 1:23 PM, Jens Sauer <sauer.jens at yahoo.de> wrote:

> Hi Daniel,
>
> whats about node.js with http://uber.github.io/multitransport-jsonrpc/
>
> Regards
>
> J.Sauer
>
>   ------------------------------
>  *Von:* Daniel Sank <sank.daniel at gmail.com>
> *An:* twisted-python <twisted-python at twistedmatrix.com>
> *Gesendet:* 16:30 Samstag, 27.Dezember 2014
> *Betreff:* [Twisted-Python] not terrible object oriented rpc system in js?
>
> Are you guys aware of anything which solves the same kind of problem as
> t.s.pb but in js? I asked about this on the js stack exchange chat room and
> the general response was that there's isn't anything. I figured y'all might
> know more.
>
> --
> Daniel Sank
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141227/f0f0426c/attachment-0002.html>

From clayton.daley at gmail.com  Sat Dec 27 17:43:32 2014
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sat, 27 Dec 2014 19:43:32 -0500
Subject: [Twisted-Python] not terrible object oriented rpc system in js?
In-Reply-To: <CAKN9TDLqNrObAVtJeLzsaL3i6JW8C1pPv7Vp6Tqb701c7kt0KA@mail.gmail.com>
References: <CAKN9TDK5KPKOTX2PRhbKYi=kdEK0xYmrBw=5-Or1WCC-PsadjQ@mail.gmail.com>
 <1787893211.1857814.1419704609087.JavaMail.yahoo@jws11114.mail.ir2.yahoo.com>
 <CAKN9TDLqNrObAVtJeLzsaL3i6JW8C1pPv7Vp6Tqb701c7kt0KA@mail.gmail.com>
Message-ID: <CACKEAnUo1mpBxS6DYBoydCM3yemJQCDw4rs-GL_O6hMHg+8J=w@mail.gmail.com>

Not sure which features of PB matter to you, but I just started playing
with Autobahn/Crossbar. It's

   - A JSON-based RPC (and/or pubsub) system,
   - With clients in many languages (JS, Python, C++, etc.), and
   - The ability to make cross-language RPC calls

Out of the box, object serialization is limited (likely to ensure
cross-platform compatibility), but the serializer is (purportedly)
pluggable.


Clayton Daley
clayton.daley at gmail.com
513.505.1236

On Sat, Dec 27, 2014 at 3:06 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> This looks promising. Thanks.
>
> On Sat, Dec 27, 2014 at 1:23 PM, Jens Sauer <sauer.jens at yahoo.de> wrote:
>
>> Hi Daniel,
>>
>> whats about node.js with http://uber.github.io/multitransport-jsonrpc/
>>
>> Regards
>>
>> J.Sauer
>>
>>   ------------------------------
>>  *Von:* Daniel Sank <sank.daniel at gmail.com>
>> *An:* twisted-python <twisted-python at twistedmatrix.com>
>> *Gesendet:* 16:30 Samstag, 27.Dezember 2014
>> *Betreff:* [Twisted-Python] not terrible object oriented rpc system in
>> js?
>>
>> Are you guys aware of anything which solves the same kind of problem as
>> t.s.pb but in js? I asked about this on the js stack exchange chat room and
>> the general response was that there's isn't anything. I figured y'all might
>> know more.
>>
>> --
>> Daniel Sank
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> Daniel Sank
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141227/f30fda0e/attachment-0002.html>

From clayton.daley at gmail.com  Sat Dec 27 17:48:05 2014
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sat, 27 Dec 2014 19:48:05 -0500
Subject: [Twisted-Python] Sigs/Archive
Message-ID: <CACKEAnUoTG6zFYLgz+q4coKVMnBsFg63zzam3Enseq6FG3wzvw@mail.gmail.com>

I forgot to delete my tel from my sig in a reply.  Is there anything I can
do to avoid leaving it published in the archives indefinitely?

Thanks,

Clayton Daley
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141227/0a209fd2/attachment-0002.html>

From kebin70 at gmail.com  Sat Dec 27 19:51:10 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Sat, 27 Dec 2014 18:51:10 -0800
Subject: [Twisted-Python] not terrible object oriented rpc system in js?
In-Reply-To: <CACKEAnUo1mpBxS6DYBoydCM3yemJQCDw4rs-GL_O6hMHg+8J=w@mail.gmail.com>
References: <CAKN9TDK5KPKOTX2PRhbKYi=kdEK0xYmrBw=5-Or1WCC-PsadjQ@mail.gmail.com>
 <1787893211.1857814.1419704609087.JavaMail.yahoo@jws11114.mail.ir2.yahoo.com>
 <CAKN9TDLqNrObAVtJeLzsaL3i6JW8C1pPv7Vp6Tqb701c7kt0KA@mail.gmail.com>
 <CACKEAnUo1mpBxS6DYBoydCM3yemJQCDw4rs-GL_O6hMHg+8J=w@mail.gmail.com>
Message-ID: <CAA-sNEZqn7-X7ObHrD6ov1eKm2yRQvWhqxfYHjkROySq7PkDqg@mail.gmail.com>

flood with 50 permutations?

On Sat, Dec 27, 2014 at 4:43 PM, Clayton Daley <clayton.daley at gmail.com>
wrote:

> Not sure which features of PB matter to you, but I just started playing
> with Autobahn/Crossbar. It's
>
>    - A JSON-based RPC (and/or pubsub) system,
>    - With clients in many languages (JS, Python, C++, etc.), and
>    - The ability to make cross-language RPC calls
>
> Out of the box, object serialization is limited (likely to ensure
> cross-platform compatibility), but the serializer is (purportedly)
> pluggable.
>
>
> Clayton Daley
> clayton.daley at gmail.com
> 513.505.1236
>
> On Sat, Dec 27, 2014 at 3:06 PM, Daniel Sank <sank.daniel at gmail.com>
> wrote:
>
>> This looks promising. Thanks.
>>
>> On Sat, Dec 27, 2014 at 1:23 PM, Jens Sauer <sauer.jens at yahoo.de> wrote:
>>
>>> Hi Daniel,
>>>
>>> whats about node.js with http://uber.github.io/multitransport-jsonrpc/
>>>
>>> Regards
>>>
>>> J.Sauer
>>>
>>>   ------------------------------
>>>  *Von:* Daniel Sank <sank.daniel at gmail.com>
>>> *An:* twisted-python <twisted-python at twistedmatrix.com>
>>> *Gesendet:* 16:30 Samstag, 27.Dezember 2014
>>> *Betreff:* [Twisted-Python] not terrible object oriented rpc system in
>>> js?
>>>
>>> Are you guys aware of anything which solves the same kind of problem as
>>> t.s.pb but in js? I asked about this on the js stack exchange chat room and
>>> the general response was that there's isn't anything. I figured y'all might
>>> know more.
>>>
>>> --
>>> Daniel Sank
>>>
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>
>>
>> --
>> Daniel Sank
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141227/da55cef3/attachment-0002.html>

From trac at twistedmatrix.com  Sun Dec 28 00:05:20 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 28 Dec 2014 07:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1419750320.1.3537549555123560540@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141228/165ee2e7/attachment-0002.html>

From jamesbroadhead at gmail.com  Mon Dec 29 11:17:36 2014
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Mon, 29 Dec 2014 18:17:36 +0000
Subject: [Twisted-Python] Silverberg CQL Driver
In-Reply-To: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>
References: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>
Message-ID: <CA+hid6FbkebfpuOXzcUQ+zZWwtUR=nVJr+Z80OFzmi80Ho5QVQ@mail.gmail.com>

We (TweetDeck at Twitter) have been using a patched version of Telephus for 3
years now.

We've had problems in the past where it would cause problems with down and
flaky seed hosts, so ymmv.

It's available here: https://github.com/tweetdeck/Telephus

On 3 December 2014 at 20:03, Jason J. W. Williams <jasonjwwilliams at gmail.com
> wrote:

> Is anyone using the silverberg CQL (Cassandra) library for Twisted in
> production? Just curious what people's experience with it is, since it
> appears to be the most recently updated Twisted/CQL project.
>
> -J
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141229/a6ab6b0c/attachment-0002.html>

From jasonjwwilliams at gmail.com  Mon Dec 29 12:11:12 2014
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Mon, 29 Dec 2014 11:11:12 -0800
Subject: [Twisted-Python] Silverberg CQL Driver
In-Reply-To: <2A763BE2-4CCC-40B4-8A26-185E8D49D3D1@twistedmatrix.com>
References: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>
 <2A763BE2-4CCC-40B4-8A26-185E8D49D3D1@twistedmatrix.com>
Message-ID: <CAHZAEpfswVjrquqmP_nUOXY3oEH6OM-UmeDwLaPmenfwr7+dAQ@mail.gmail.com>

Thanks radix. I noticed the README says Python >= 2.7 is a pre-req but the
changelog for 0.1.7 says "fixed incompatibility with Python 2.6". Are y'all
running it with 2.6 or 2.7?

-J

On Wed, Dec 3, 2014 at 12:52 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> Yes, we use it in production in the Rackspace Otter project:
> https://github.com/rackerlabs/otter
>
> The particular file we most use it in is here:
> https://github.com/rackerlabs/otter/blob/master/otter/models/cass.py#L530 —
> the connection attribute of that class is a silverberg client.
>
> I’ve not personally touched that code but I know we've been using it in
> production for about a year.
>
> -radix
>
>
> On Dec 3, 2014, at 2:03 PM, Jason J. W. Williams <
> jasonjwwilliams at gmail.com> wrote:
>
> Is anyone using the silverberg CQL (Cassandra) library for Twisted in
> production? Just curious what people's experience with it is, since it
> appears to be the most recently updated Twisted/CQL project.
>
> -J
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141229/6ca22b9c/attachment-0002.html>

From jasonjwwilliams at gmail.com  Mon Dec 29 12:11:50 2014
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Mon, 29 Dec 2014 11:11:50 -0800
Subject: [Twisted-Python] Silverberg CQL Driver
In-Reply-To: <CA+hid6FbkebfpuOXzcUQ+zZWwtUR=nVJr+Z80OFzmi80Ho5QVQ@mail.gmail.com>
References: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>
 <CA+hid6FbkebfpuOXzcUQ+zZWwtUR=nVJr+Z80OFzmi80Ho5QVQ@mail.gmail.com>
Message-ID: <CAHZAEpdQYEUz6fRoOVK6Qj_W=yzH7hAn27BdU77+PgES6c8ZfQ@mail.gmail.com>

Hi James,

Have you guys tried Silverberg? Wondering if its less flakly.

-J

On Mon, Dec 29, 2014 at 10:17 AM, James Broadhead
<jamesbroadhead at gmail.com> wrote:
> We (TweetDeck at Twitter) have been using a patched version of Telephus for 3
> years now.
>
> We've had problems in the past where it would cause problems with down and
> flaky seed hosts, so ymmv.
>
> It's available here: https://github.com/tweetdeck/Telephus
>
> On 3 December 2014 at 20:03, Jason J. W. Williams
> <jasonjwwilliams at gmail.com> wrote:
>>
>> Is anyone using the silverberg CQL (Cassandra) library for Twisted in
>> production? Just curious what people's experience with it is, since it
>> appears to be the most recently updated Twisted/CQL project.
>>
>> -J
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From glyph at twistedmatrix.com  Mon Dec 29 13:46:39 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 29 Dec 2014 12:46:39 -0800
Subject: [Twisted-Python] tubes now a separate project
In-Reply-To: <20141227174652.24248.29234780.divmod.xquotient.1@top>
References: <A4213218-40A9-424E-AF4A-64A4781B8CF2@twistedmatrix.com>
 <20141227174652.24248.29234780.divmod.xquotient.1@top>
Message-ID: <E2A1846A-376D-4E69-9E44-2B8A6EBF58F4@twistedmatrix.com>


> On Dec 27, 2014, at 9:46 AM, exarkun at twistedmatrix.com wrote:
> 
> On 12:13 am, glyph at twistedmatrix.com wrote:
>> Apropos of recent discussion, I have moved tubes <https://tm.tl/1956> to github <https://github.com/twisted/tubes/>.
>> 
>> I've filed some issues there and plan to file more.  Please start sending pull requests if you'd like to work on it with me.
> 
> Cool!  Thank you very much for this.  I'm looking forward to doing some serious playing around with this.

Thanks for your encouragement and interest.  I look forward to hearing more from you about it :).

I've also gotten control of the PyPI package and uploaded some packages:

https://warehouse.python.org/project/Tubes/ <https://warehouse.python.org/project/Tubes/>

So you can "pip install tubes" and something will happen.  Not the right thing, mind you, 0.0.0 is the version number for a reason :).  But something.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141229/a9dd63ee/attachment-0002.html>

From radix at twistedmatrix.com  Mon Dec 29 13:49:47 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 29 Dec 2014 14:49:47 -0600
Subject: [Twisted-Python] Silverberg CQL Driver
In-Reply-To: <CAHZAEpfswVjrquqmP_nUOXY3oEH6OM-UmeDwLaPmenfwr7+dAQ@mail.gmail.com>
References: <CAHZAEpcC_O6D3iEGhK1G462msSgG9m7CXVqmcSeqxEvsNyUfSg@mail.gmail.com>
 <2A763BE2-4CCC-40B4-8A26-185E8D49D3D1@twistedmatrix.com>
 <CAHZAEpfswVjrquqmP_nUOXY3oEH6OM-UmeDwLaPmenfwr7+dAQ@mail.gmail.com>
Message-ID: <A05A32ED-B763-41F6-90A6-8DFCD8E5C25A@twistedmatrix.com>


>> On Dec 3, 2014, at 2:03 PM, Jason J. W. Williams <jasonjwwilliams at gmail.com <mailto:jasonjwwilliams at gmail.com>> wrote:
>> 
>> Is anyone using the silverberg CQL (Cassandra) library for Twisted in production? Just curious what people's experience with it is, since it appears to be the most recently updated Twisted/CQL project.



> On Wed, Dec 3, 2014 at 12:52 PM, Christopher Armstrong <radix at twistedmatrix.com <mailto:radix at twistedmatrix.com>> wrote:
> Yes, we use it in production in the Rackspace Otter project: https://github.com/rackerlabs/otter <https://github.com/rackerlabs/otter> 
> 
> The particular file we most use it in is here: https://github.com/rackerlabs/otter/blob/master/otter/models/cass.py#L530 <https://github.com/rackerlabs/otter/blob/master/otter/models/cass.py#L530> — the connection attribute of that class is a silverberg client.
> 
> I’ve not personally touched that code but I know we've been using it in production for about a year.


> On Dec 29, 2014, at 1:11 PM, Jason J. W. Williams <jasonjwwilliams at gmail.com> wrote:
> 
> Thanks radix. I noticed the README says Python >= 2.7 is a pre-req but the changelog for 0.1.7 says "fixed incompatibility with Python 2.6". Are y'all running it with 2.6 or 2.7?


Otter runs on Python 2.7. It looks like builds are run against 2.6 on Travis CI, but they’re in “allowed to fail” mode — but still passing 100%.

-radix

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141229/dc858c96/attachment-0002.html>

From psi29a at gmail.com  Tue Dec 30 02:50:30 2014
From: psi29a at gmail.com (bret curtis)
Date: Tue, 30 Dec 2014 10:50:30 +0100
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CABkOF6Q-A_96kzX=DyLhWn1HF9CBiRu+BrkuuVviCozAxL7H7g@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <CABkOF6Q-A_96kzX=DyLhWn1HF9CBiRu+BrkuuVviCozAxL7H7g@mail.gmail.com>
Message-ID: <CA+LhZ9-Zx5yd1wnxOdXjvNatC=107=Y=SW_HzV3zpBQcpxV2jQ@mail.gmail.com>

On Tue, Dec 23, 2014 at 7:51 AM, Gelin Yan <dynamicgl at gmail.com> wrote:

>
>
> On Mon, Dec 22, 2014 at 5:05 AM, Clayton Daley <clayton.daley at gmail.com>
> wrote:
>
>> Are there any major disadvantages of using pymongo with callInThread
>> instead of txmongo?  I'd like to take advantage of some newer features in
>> pymongo (unfortunately not available in txmongo) and it's certainly easier
>> to maintain feature parity using callInThread.
>>
>> Clayton Daley
>>
>>
>>
> Hi Clayton
>
>     Txmongo has been inactive for a while so I suggest using pymongo &
> twisted thread pool. I have been using them for a couple of years and they
> work quite well.
>
> Regards
>
> gelin yan
>

Hey guys,

just wanted to drop in and say that txmongo isn't dead. We (Amplidata) just
recently sent a merge request to add SSL (authentication/encryption)
support[1] that Alexandre will review after the holidays. While Alexandre
isn't currently developing txmongo, he does review and accept pull
requests. So while the community is small, it is still alive.

Amplidata (the company I work for) has also expressed an interest in
getting txmongo up to speed with PyMongo, similar in how we got Ldaptor and
its myriad forks to converge and development happening again.[2][3]

Is there any interest in seeing txmongo be developed further? What are some
of the pain points that people would rather defer to thread PyMongo instead
of using async txmongo?

Cheers,
Bret

[1] https://github.com/fiorix/mongo-async-python-driver/pull/67
[2] https://twistedmatrix.com/pipermail/twisted-python/2014-July/028489.html
[3] https://github.com/twisted/ldaptor
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141230/adc77a6a/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Dec 30 05:16:40 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 30 Dec 2014 04:16:40 -0800
Subject: [Twisted-Python] tubes now a separate project
In-Reply-To: <E2A1846A-376D-4E69-9E44-2B8A6EBF58F4@twistedmatrix.com>
References: <A4213218-40A9-424E-AF4A-64A4781B8CF2@twistedmatrix.com>
 <20141227174652.24248.29234780.divmod.xquotient.1@top>
 <E2A1846A-376D-4E69-9E44-2B8A6EBF58F4@twistedmatrix.com>
Message-ID: <C8829FBA-D129-458D-B851-C8505FC4D2AC@twistedmatrix.com>


> On Dec 29, 2014, at 12:46 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 27, 2014, at 9:46 AM, exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com> wrote:
>> 
>> On 12:13 am, glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com> wrote:
>>> Apropos of recent discussion, I have moved tubes <https://tm.tl/1956 <https://tm.tl/1956>> to github <https://github.com/twisted/tubes/ <https://github.com/twisted/tubes/>>.
>>> 
>>> I've filed some issues there and plan to file more.  Please start sending pull requests if you'd like to work on it with me.
>> 
>> Cool!  Thank you very much for this.  I'm looking forward to doing some serious playing around with this.
> 
> Thanks for your encouragement and interest.  I look forward to hearing more from you about it :).
> 
> I've also gotten control of the PyPI package and uploaded some packages:
> 
> https://warehouse.python.org/project/Tubes/ <https://warehouse.python.org/project/Tubes/>
> 
> So you can "pip install tubes" and something will happen.  Not the right thing, mind you, 0.0.0 is the version number for a reason :).  But something.

Tubes is now on readthedocs:

<https://tubes.readthedocs.org/en/latest/ <https://tubes.readthedocs.org/en/latest/>>

and travis:

<https://travis-ci.org/twisted/tubes <https://travis-ci.org/twisted/tubes>>

and coveralls:

<https://coveralls.io/r/twisted/tubes?branch=master <https://coveralls.io/r/twisted/tubes?branch=master>>

and all the badges for these various things are green:

<https://github.com/twisted/tubes/blob/master/README.rst <https://github.com/twisted/tubes/blob/master/README.rst>>

including 100% twistedchecker-clean and 100% pydoctor-clean.

So the code is in a good position to start accepting pull requests now.

> -glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141230/05924f5a/attachment-0002.html>

From clayton.daley at gmail.com  Tue Dec 30 15:23:28 2014
From: clayton.daley at gmail.com (Clayton Daley)
Date: Tue, 30 Dec 2014 17:23:28 -0500
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CA+LhZ9-Zx5yd1wnxOdXjvNatC=107=Y=SW_HzV3zpBQcpxV2jQ@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <CABkOF6Q-A_96kzX=DyLhWn1HF9CBiRu+BrkuuVviCozAxL7H7g@mail.gmail.com>
 <CA+LhZ9-Zx5yd1wnxOdXjvNatC=107=Y=SW_HzV3zpBQcpxV2jQ@mail.gmail.com>
Message-ID: <CACKEAnXabnwdJmfxaXP2HKqcJno9h=dn5G-T1sFj_yHsH_ZiXA@mail.gmail.com>

I'm still in "proof of concept" mode so take my comments with a grain of
salt... but my question was motivated by datetime issues:

   - After switching to txmongo, timedelta seemed to break. Turns out it
   breaks autobahn as well so I may need to solve the problem sooner... but
   it's a material difference.
   - I also wanted to take advantage of some timezone stuff purportedly
   included in newer versions of pymongo (but I haven't fully implemented
   anything yet to verify).

When it comes to interest in txmongo:

   - Insofar as it would address the question of lazy calls (and possible
   hassles like not-lazy iterators), it would be a welcome simplification to
   deferToThread.
   - At the same time, I don't see any intrinsic benefit to rebuild the
   client all-the-way-down.  If it were possible to wrap PyMongo in a
   lazy-aware (and deferred returning) wrapper... that would be enough for me.
   - If a wrapper reduces the work to maintain the project at parity, I'd
   redouble my support for the approach. No need to commit volunteer
   supporters (current and/or future) to more work than absolutely necessary.

Clayton Daley

On Tue, Dec 30, 2014 at 4:50 AM, bret curtis <psi29a at gmail.com> wrote:

> On Tue, Dec 23, 2014 at 7:51 AM, Gelin Yan <dynamicgl at gmail.com> wrote:
>
>>
>>
>> On Mon, Dec 22, 2014 at 5:05 AM, Clayton Daley <clayton.daley at gmail.com>
>> wrote:
>>
>>> Are there any major disadvantages of using pymongo with callInThread
>>> instead of txmongo?  I'd like to take advantage of some newer features in
>>> pymongo (unfortunately not available in txmongo) and it's certainly easier
>>> to maintain feature parity using callInThread.
>>>
>>> Clayton Daley
>>>
>>>
>>>
>> Hi Clayton
>>
>>     Txmongo has been inactive for a while so I suggest using pymongo &
>> twisted thread pool. I have been using them for a couple of years and they
>> work quite well.
>>
>> Regards
>>
>> gelin yan
>>
>
> Hey guys,
>
> just wanted to drop in and say that txmongo isn't dead. We (Amplidata)
> just recently sent a merge request to add SSL (authentication/encryption)
> support[1] that Alexandre will review after the holidays. While Alexandre
> isn't currently developing txmongo, he does review and accept pull
> requests. So while the community is small, it is still alive.
>
> Amplidata (the company I work for) has also expressed an interest in
> getting txmongo up to speed with PyMongo, similar in how we got Ldaptor and
> its myriad forks to converge and development happening again.[2][3]
>
> Is there any interest in seeing txmongo be developed further? What are
> some of the pain points that people would rather defer to thread PyMongo
> instead of using async txmongo?
>
> Cheers,
> Bret
>
> [1] https://github.com/fiorix/mongo-async-python-driver/pull/67
> [2]
> https://twistedmatrix.com/pipermail/twisted-python/2014-July/028489.html
> [3] https://github.com/twisted/ldaptor
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20141230/5650faf5/attachment-0002.html>

