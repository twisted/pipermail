From trac at twistedmatrix.com  Sun Nov  3 00:05:23 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 Nov 2013 06:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1383458723.0.1733070509540367186@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131103/a9008656/attachment.html>

From exarkun at twistedmatrix.com  Tue Nov  5 15:25:39 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 05 Nov 2013 22:25:39 -0000
Subject: [Twisted-Python] Bristol (England!) sprint hosted by HybridCluster
Message-ID: <20131105222539.8349.455028162.divmod.xquotient.262@top>

Greetings all,

I'm pleased to invite you to join Tom Prince (2013 Twisted Fellow), Luke 
Marsden (founder of HybridCluster), and the HybridCluster team 
(including myself!) for the first Twisted sprint hosted by 
HybridCluster!

The sprint will take place on December 7th in central Bristol (exact 
location to be determined) from 11AM until no one remains capable of 
higher brain function(*).

As usual sprint topics will surely be wide ranging - bring your favorite 
pet project, a personal loathing for unresolved bugs, or just find 
someone interesting to work with when you show up (personally, I'll 
probably be trying to add APIs to support more easily testing Agent- 
using applications).

HybridCluster is a small Bristol-based company building high density web 
hosting platform using Twisted for all manner of tasks - from SSH, HTTP, 
SMTP, POP3, and IMAP4 to internal cluster coordination and asynchronous 
SQL access.

Watch this space for a follow-up post giving details about the venue 
(and free food!).  In the meantime feel free to contact me or post to 
the list with any other questions.

Jean-Paul

(*) Due to excessive hacking.  Certainly not because of any kind of mind 
control technology deployed by the TSF.


From sangiovanni at nweb.it  Wed Nov  6 03:08:03 2013
From: sangiovanni at nweb.it (Fabio Sangiovanni)
Date: Wed, 6 Nov 2013 11:08:03 +0100
Subject: [Twisted-Python] (newbie!) smtp to message object
Message-ID: <527A1503.7030608@nweb.it>

Hello list,

I'm new to twisted and to python in general, so still deep in the 
learning process.
Please forgive any faulty assumptions you'll find in this post :)

I'm trying to accomplish to the following task: realize a tool that acts 
as a proxy between the SMTP domain and the 'objects' domain. That is: a 
daemon that listens for SMTP connections (relayed sessions from Postfix) 
and bundles everything that belongs to a single session (envelope 
sender, envelope recipients, headers, body) into an object (it will 
probably become a JSON one day, not decided yet). The aim is to allow 
further processing (es. publishing to a queue) of a self-contained item.

My (draft) implementation can be reached at http://pastebin.com/mbRztuid

My main concerns are:
1) am I using the right classes? My implementation leverages 
twisted.mail.smtp, is this correct?
2) I've overridden smtp.SMTP._cbToValidate; I really don't like this 
very much (I'd like to leave the protocol untouched) but it's the only 
way I've come up with (after several days of experiments :) ) to have 
one single payload down the line (in smtp.SMTP.do_DATA), and not one 
copy of the message for every single recipient. May this have bad 
consequences?
3) what do you think about the overall approach? could it have been done 
differently/better?

Thanks a lot for your help!

Fabio
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131106/d827aa01/attachment.html>

From _ at lvh.io  Wed Nov  6 03:57:59 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 6 Nov 2013 11:57:59 +0100
Subject: [Twisted-Python] Error unmerging r40589
Message-ID: <CAE_Hg6ZFcNcuduW=DYf1LUL5jbTWXQRyH720jZyox53hA+fxVQ@mail.gmail.com>

Hi,


I tried to review #2053. Unfortunately, the patch had a wrong name and a
wrong topfile (the author was convinced they were working on 2503). I
noticed the wrong patch name, but missed the wrong topfile. So, I'm trying
to unmerge that revision (40589) from trunk using  "svn merge -c -40589 .".
That part works, but a pre-commit hook is preventing me from committing,
because it insists that I'm not deleting a topfile, even though it looks to
me like I am:


trunk ? svn
status
?
A  +    twisted/test/test_import.py
D       twisted/topfiles/2503.removal
trunk ? svn commit -m "Unmerge remove-test-import-2053

Reopens: #2053

This branch accidentally had the wrong topfile.
"
Adding         twisted/test/test_import.py
Deleting       twisted/topfiles/2503.removal
svn: E165001: Commit failed (details follow):
svn: E165001: Commit blocked by pre-commit hook (exit code 1) with output:
Must remove a <ticket>.{feature,bugfix,doc,removal,misc} file for re-opened
tickets.  For further details, refer to
http://twistedmatrix.com/trac/wiki/ReviewProcess#Newsfiles


thanks in advance
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131106/4f85af07/attachment.html>

From staceysern at gmail.com  Wed Nov  6 04:09:00 2013
From: staceysern at gmail.com (Stacey Sern)
Date: Wed, 6 Nov 2013 06:09:00 -0500
Subject: [Twisted-Python] (newbie!) smtp to message object
In-Reply-To: <527A1503.7030608@nweb.it>
References: <527A1503.7030608@nweb.it>
Message-ID: <0D7D5E1F-BD46-4FAC-B244-5838F336F33B@gmail.com>

Hi,

I also tried to figure out how to deliver one copy of a message instead of one for every recipient for a Twisted server tutorial (ticket #3324) which hasn't yet been finalized.  Here's the way I went about it but I'd appreciate comments on the approach as well.

For the IMessageDelivery.validateTo method, it generates the real IMessage object when it receives the first recipient.  After that, it returns a NullMessage object for each subsequent recipient.  The NullMessage object is called for each line received as part of the message but does nothing with it.  Then you don't need to change _cbToValidate.  Here's you're code with the modifications http://pastebin.com/6nFXiTgK.

Stacey



On Nov 6, 2013, at 5:08 AM, Fabio Sangiovanni <sangiovanni at nweb.it> wrote:

> Hello list,
> 
> I'm new to twisted and to python in general, so still deep in the learning process.
> Please forgive any faulty assumptions you'll find in this post :)
> 
> I'm trying to accomplish to the following task: realize a tool that acts as a proxy between the SMTP domain and the 'objects' domain. That is: a daemon that listens for SMTP connections (relayed sessions from Postfix) and bundles everything that belongs to a single session (envelope sender, envelope recipients, headers, body) into an object (it will probably become a JSON one day, not decided yet). The aim is to allow further processing (es. publishing to a queue) of a self-contained item.
> 
> My (draft) implementation can be reached at http://pastebin.com/mbRztuid
> 
> My main concerns are:
> 1) am I using the right classes? My implementation leverages twisted.mail.smtp, is this correct?
> 2) I've overridden smtp.SMTP._cbToValidate; I really don't like this very much (I'd like to leave the protocol     untouched) but it's the only way I've come up with (after several days of experiments :) ) to have one single payload down the line (in smtp.SMTP.do_DATA), and not one copy of the message for every single recipient. May this have bad consequences?
> 3) what do you think about the overall approach? could it have been done differently/better?
> 
> Thanks a lot for your help!
> 
> Fabio
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131106/0acb093a/attachment.html>

From _ at lvh.io  Wed Nov  6 04:33:44 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 6 Nov 2013 12:33:44 +0100
Subject: [Twisted-Python] Error unmerging r40589
In-Reply-To: <CAE_Hg6ZFcNcuduW=DYf1LUL5jbTWXQRyH720jZyox53hA+fxVQ@mail.gmail.com>
References: <CAE_Hg6ZFcNcuduW=DYf1LUL5jbTWXQRyH720jZyox53hA+fxVQ@mail.gmail.com>
Message-ID: <CAE_Hg6bxEiGJrtGH5Xx9ftm6sv+crHcQ9wADrfmsRUk0a14g5w@mail.gmail.com>

Hi everyone,


This was resolved. The error message is (of course) incorrect; the issue
relates to trying to reopen a different ticket from the topfile you're
removing. I've filed a ticket on twisted's trac integration:
https://bugs.launchpad.net/twisted-trac-integration/+bug/1248491

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131106/b9f4dbeb/attachment.html>

From sangiovanni at nweb.it  Wed Nov  6 04:35:23 2013
From: sangiovanni at nweb.it (Fabio Sangiovanni)
Date: Wed, 6 Nov 2013 12:35:23 +0100
Subject: [Twisted-Python] (newbie!) smtp to message object
In-Reply-To: <0D7D5E1F-BD46-4FAC-B244-5838F336F33B@gmail.com>
References: <527A1503.7030608@nweb.it>
 <0D7D5E1F-BD46-4FAC-B244-5838F336F33B@gmail.com>
Message-ID: <527A297B.2050606@nweb.it>

Il 06/11/13 12:09, Stacey Sern ha scritto:
> Hi,
>
> I also tried to figure out how to deliver one copy of a message 
> instead of one for every recipient for a Twisted server tutorial 
> (ticket #3324) which hasn't yet been finalized.  Here's the way I went 
> about it but I'd appreciate comments on the approach as well.
>
> For the IMessageDelivery.validateTo method, it generates the real 
> IMessage object when it receives the first recipient.  After that, it 
> returns a NullMessage object for each subsequent recipient.  The 
> NullMessage object is called for each line received as part of the 
> message but does nothing with it.  Then you don't need to change 
> _cbToValidate.  Here's you're code with the modifications 
> http://pastebin.com/6nFXiTgK.
>
> Stacey
Hi Stacey,
thanks for your reply.

I think your approach is cleaner than mine! Thanks!
My only concern is this loop in smtp.SMTP.do_DATA:

for (user, msgFunc) in recipients:
[...]

that implies a scan of the whole list of messages (made of the 'real' 
message and of the other NullMessages).
I don't know how it can really impact on performances, though. I aimed 
at not creating 'fake' messages at all, but it's not clear to me if it's 
even possible without overriding _cbToValidate.

Let's keep in touch!

Fabio
>
>
>
> On Nov 6, 2013, at 5:08 AM, Fabio Sangiovanni <sangiovanni at nweb.it 
> <mailto:sangiovanni at nweb.it>> wrote:
>
>> Hello list,
>>
>> I'm new to twisted and to python in general, so still deep in the 
>> learning process.
>> Please forgive any faulty assumptions you'll find in this post :)
>>
>> I'm trying to accomplish to the following task: realize a tool that 
>> acts as a proxy between the SMTP domain and the 'objects' domain. 
>> That is: a daemon that listens for SMTP connections (relayed sessions 
>> from Postfix) and bundles everything that belongs to a single session 
>> (envelope sender, envelope recipients, headers, body) into an object 
>> (it will probably become a JSON one day, not decided yet). The aim is 
>> to allow further processing (es. publishing to a queue) of a 
>> self-contained item.
>>
>> My (draft) implementation can be reached at http://pastebin.com/mbRztuid
>>
>> My main concerns are:
>> 1) am I using the right classes? My implementation leverages 
>> twisted.mail.smtp, is this correct?
>> 2) I've overridden smtp.SMTP._cbToValidate; I really don't like this 
>> very much (I'd like to leave the protocol untouched) but it's the 
>> only way I've come up with (after several days of experiments :) ) to 
>> have one single payload down the line (in smtp.SMTP.do_DATA), and not 
>> one copy of the message for every single recipient. May this have bad 
>> consequences?
>> 3) what do you think about the overall approach? could it have been 
>> done differently/better?
>>
>> Thanks a lot for your help!
>>
>> Fabio
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com 
>> <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131106/67b6eef5/attachment-0001.html>

From rmeijer at xs4all.nl  Wed Nov  6 04:43:24 2013
From: rmeijer at xs4all.nl (Rob Meijer)
Date: Wed, 6 Nov 2013 12:43:24 +0100
Subject: [Twisted-Python] Determine TLS version from within request handler
	? (twisted web)
Message-ID: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>

I'm using twisted web for an https connection. At first I start with
creating and configuring a ssl.DefaultOpenSSLContextFactory derived class
that disables SSLv2 and SSLv3. So (basically we're left with TLS1.0 and
up) and forces the use of a single strong (non RC4 but BEAST vulnerable)
cipher.

Than I have a http.HTTPFactory derived class with a 'buildProtocol'that
return a http.HTTPChannel derived object, that in turn returns a
http.Request derived object.

Than reactor.listenSSL is invoked with both the SSL factory and the HTTP
factory. Now my problem. I don't really understand how these two are
connected once the request handler gets invoked.

What I would like to do is that I would want to allow TLS1.0 users to use
the server, but only after explicitly agreeing that they understand the
risks involved with using an old BEAST vulnerable browser.

Is there any way to retrieve info on what TLS version has been negotiated
from within the HTTP request handler? I've been walking the 'self' object
a bit, and self.transport.getHandle() seems to have some tls stuff like
'get_cipher_list' and 'get_peer_certificate', but the simple TLS version
number does not seem to be available.

Is the twisted web API simply insuficient to retreive this information
from within the request handler, or am I missing something here?

T.I.A,

Rob



From exarkun at twistedmatrix.com  Wed Nov  6 07:20:32 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 06 Nov 2013 14:20:32 -0000
Subject: [Twisted-Python] (newbie!) smtp to message object
In-Reply-To: <527A297B.2050606@nweb.it>
References: <527A1503.7030608@nweb.it>
 <0D7D5E1F-BD46-4FAC-B244-5838F336F33B@gmail.com>
 <527A297B.2050606@nweb.it>
Message-ID: <20131106142032.8349.105773680.divmod.xquotient.335@top>

On 11:35 am, sangiovanni at nweb.it wrote:
>Il 06/11/13 12:09, Stacey Sern ha scritto:
>>Hi,
>>
>>I also tried to figure out how to deliver one copy of a message 
>>instead of one for every recipient for a Twisted server tutorial 
>>(ticket #3324) which hasn't yet been finalized.  Here's the way I went 
>>about it but I'd appreciate comments on the approach as well.
>>
>>For the IMessageDelivery.validateTo method, it generates the real 
>>IMessage object when it receives the first recipient.  After that, it 
>>returns a NullMessage object for each subsequent recipient.  The 
>>NullMessage object is called for each line received as part of the 
>>message but does nothing with it.  Then you don't need to change 
>>_cbToValidate.  Here's you're code with the modifications 
>>http://pastebin.com/6nFXiTgK.
>>
>>Stacey
>Hi Stacey,
>thanks for your reply.
>
>I think your approach is cleaner than mine! Thanks!
>My only concern is this loop in smtp.SMTP.do_DATA:
>
>for (user, msgFunc) in recipients:
>[...]
>
>that implies a scan of the whole list of messages (made of the 'real' 
>message and of the other NullMessages).
>I don't know how it can really impact on performances, though. I aimed 
>at not creating 'fake' messages at all, but it's not clear to me if 
>it's even possible without overriding _cbToValidate.

The performance impact of this is going to be minimal.

On a runtime like PyPy, the impact *may* even be zero.

Jean-Paul
>Let's keep in touch!
>
>Fabio
>>
>>
>>
>>On Nov 6, 2013, at 5:08 AM, Fabio Sangiovanni <sangiovanni at nweb.it 
>><mailto:sangiovanni at nweb.it>> wrote:
>>>Hello list,
>>>
>>>I'm new to twisted and to python in general, so still deep in the 
>>>learning process.
>>>Please forgive any faulty assumptions you'll find in this post :)
>>>
>>>I'm trying to accomplish to the following task: realize a tool that 
>>>acts as a proxy between the SMTP domain and the 'objects' domain. 
>>>That is: a daemon that listens for SMTP connections (relayed sessions 
>>>from Postfix) and bundles everything that belongs to a single session 
>>>(envelope sender, envelope recipients, headers, body) into an object 
>>>(it will probably become a JSON one day, not decided yet). The aim is 
>>>to allow further processing (es. publishing to a queue) of a self- 
>>>contained item.
>>>
>>>My (draft) implementation can be reached at 
>>>http://pastebin.com/mbRztuid
>>>
>>>My main concerns are:
>>>1) am I using the right classes? My implementation leverages 
>>>twisted.mail.smtp, is this correct?
>>>2) I've overridden smtp.SMTP._cbToValidate; I really don't like this 
>>>very much (I'd like to leave the protocol untouched) but it's the 
>>>only way I've come up with (after several days of experiments :) ) to 
>>>have one single payload down the line (in smtp.SMTP.do_DATA), and not 
>>>one copy of the message for every single recipient. May this have bad 
>>>consequences?
>>>3) what do you think about the overall approach? could it have been 
>>>done differently/better?
>>>
>>>Thanks a lot for your help!
>>>
>>>Fabio
>>>_______________________________________________
>>>Twisted-Python mailing list
>>>Twisted-Python at twistedmatrix.com <mailto:Twisted- 
>>>Python at twistedmatrix.com>
>>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From sangiovanni at nweb.it  Wed Nov  6 07:32:31 2013
From: sangiovanni at nweb.it (Fabio Sangiovanni)
Date: Wed, 6 Nov 2013 15:32:31 +0100
Subject: [Twisted-Python] (newbie!) smtp to message object
In-Reply-To: <20131106142032.8349.105773680.divmod.xquotient.335@top>
References: <527A1503.7030608@nweb.it>
 <0D7D5E1F-BD46-4FAC-B244-5838F336F33B@gmail.com> <527A297B.2050606@nweb.it>
 <20131106142032.8349.105773680.divmod.xquotient.335@top>
Message-ID: <527A52FF.8070209@nweb.it>

Il 06/11/13 15:20, exarkun at twistedmatrix.com ha scritto:
> On 11:35 am, sangiovanni at nweb.it wrote:
>> Il 06/11/13 12:09, Stacey Sern ha scritto:
>>> Hi,
>>>
>>> I also tried to figure out how to deliver one copy of a message 
>>> instead of one for every recipient for a Twisted server tutorial 
>>> (ticket #3324) which hasn't yet been finalized.  Here's the way I 
>>> went about it but I'd appreciate comments on the approach as well.
>>>
>>> For the IMessageDelivery.validateTo method, it generates the real 
>>> IMessage object when it receives the first recipient. After that, it 
>>> returns a NullMessage object for each subsequent recipient.  The 
>>> NullMessage object is called for each line received as part of the 
>>> message but does nothing with it.  Then you don't need to change 
>>> _cbToValidate.  Here's you're code with the modifications 
>>> http://pastebin.com/6nFXiTgK.
>>>
>>> Stacey
>> Hi Stacey,
>> thanks for your reply.
>>
>> I think your approach is cleaner than mine! Thanks!
>> My only concern is this loop in smtp.SMTP.do_DATA:
>>
>> for (user, msgFunc) in recipients:
>> [...]
>>
>> that implies a scan of the whole list of messages (made of the 'real' 
>> message and of the other NullMessages).
>> I don't know how it can really impact on performances, though. I 
>> aimed at not creating 'fake' messages at all, but it's not clear to 
>> me if it's even possible without overriding _cbToValidate.
>
> The performance impact of this is going to be minimal.
>
> On a runtime like PyPy, the impact *may* even be zero.
>
> Jean-Paul
Thanks Jean-Paul,
I'll go the way suggested by Stacey, then.
Any other suggestions about my approach?

Thanks again!
>> Let's keep in touch!
>>
>> Fabio
>>>
>>>
>>>
>>> On Nov 6, 2013, at 5:08 AM, Fabio Sangiovanni <sangiovanni at nweb.it 
>>> <mailto:sangiovanni at nweb.it>> wrote:
>>>> Hello list,
>>>>
>>>> I'm new to twisted and to python in general, so still deep in the 
>>>> learning process.
>>>> Please forgive any faulty assumptions you'll find in this post :)
>>>>
>>>> I'm trying to accomplish to the following task: realize a tool that 
>>>> acts as a proxy between the SMTP domain and the 'objects' domain. 
>>>> That is: a daemon that listens for SMTP connections (relayed 
>>>> sessions from Postfix) and bundles everything that belongs to a 
>>>> single session (envelope sender, envelope recipients, headers, 
>>>> body) into an object (it will probably become a JSON one day, not 
>>>> decided yet). The aim is to allow further processing (es. 
>>>> publishing to a queue) of a self- contained item.
>>>>
>>>> My (draft) implementation can be reached at 
>>>> http://pastebin.com/mbRztuid
>>>>
>>>> My main concerns are:
>>>> 1) am I using the right classes? My implementation leverages 
>>>> twisted.mail.smtp, is this correct?
>>>> 2) I've overridden smtp.SMTP._cbToValidate; I really don't like 
>>>> this very much (I'd like to leave the protocol untouched) but it's 
>>>> the only way I've come up with (after several days of experiments 
>>>> :) ) to have one single payload down the line (in 
>>>> smtp.SMTP.do_DATA), and not one copy of the message for every 
>>>> single recipient. May this have bad consequences?
>>>> 3) what do you think about the overall approach? could it have been 
>>>> done differently/better?
>>>>
>>>> Thanks a lot for your help!
>>>>
>>>> Fabio
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com <mailto:Twisted- 
>>>> Python at twistedmatrix.com>
>>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at twistedmatrix.com  Wed Nov  6 07:38:27 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 06 Nov 2013 14:38:27 -0000
Subject: [Twisted-Python] Determine TLS version from within request
 handler ? (twisted web)
In-Reply-To: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>
References: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>
Message-ID: <20131106143827.8349.1534318774.divmod.xquotient.371@top>

On 11:43 am, rmeijer at xs4all.nl wrote:
>I'm using twisted web for an https connection. At first I start with
>creating and configuring a ssl.DefaultOpenSSLContextFactory derived 
>class
>that disables SSLv2 and SSLv3. So (basically we're left with TLS1.0 and
>up) and forces the use of a single strong (non RC4 but BEAST 
>vulnerable)
>cipher.
>
>Than I have a http.HTTPFactory derived class with a 'buildProtocol'that
>return a http.HTTPChannel derived object, that in turn returns a
>http.Request derived object.
>
>Than reactor.listenSSL is invoked with both the SSL factory and the 
>HTTP
>factory. Now my problem. I don't really understand how these two are
>connected once the request handler gets invoked.
>
>What I would like to do is that I would want to allow TLS1.0 users to 
>use
>the server, but only after explicitly agreeing that they understand the
>risks involved with using an old BEAST vulnerable browser.
>
>Is there any way to retrieve info on what TLS version has been 
>negotiated
>from within the HTTP request handler? I've been walking the 'self' 
>object
>a bit, and self.transport.getHandle() seems to have some tls stuff like
>'get_cipher_list' and 'get_peer_certificate', but the simple TLS 
>version
>number does not seem to be available.

The object you get back from `self.transport.getHandle()` happens to be 
an object from pyOpenSSL - an instance of OpenSSL.SSL.Connection.  While 
reading the following, though, bear in mind that `getHandle` doesn't 
make much of a promise about what it will return.  Other transports may 
return something else and future versions of Twisted may change the 
result as well.

The API that OpenSSL appears to offer for determining what protocol 
version is in use appears to be SSL_get_version().  This returns a 
string like "SSLv2" or "TLSv1" (the documentation doesn't say anything 
about TLSv1.1 or TLSv1.2 but *presumably* if you have a version of 
OpenSSL that implements either of these protocols and one of them is 
negotiated on a connection then SSL_get_version() will identify them in 
its result).

pyOpenSSL, however, does not expose this method.  So in order to get the 
information you need you may need to contribute a binding for this 
method to pyOpenSSL.

Jean-Paul
>Is the twisted web API simply insuficient to retreive this information
>from within the request handler, or am I missing something here?
>
>T.I.A,
>
>Rob


From raketenschnitzel at gmx.de  Wed Nov  6 10:31:34 2013
From: raketenschnitzel at gmx.de (Toni Rosemann)
Date: Wed, 6 Nov 2013 18:31:34 +0100 (CET)
Subject: [Twisted-Python] Strange DataLoosing Problem after some time of
	connection
Message-ID: <trinity-c74995be-d4aa-4e84-8bdd-9e64709fef13-1383759094632@3capp-gmx-bs54>

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131106/45f09284/attachment.html>

From dynamicgl at gmail.com  Wed Nov  6 11:07:56 2013
From: dynamicgl at gmail.com (Gelin Yan)
Date: Thu, 7 Nov 2013 02:07:56 +0800
Subject: [Twisted-Python] Strange DataLoosing Problem after some time of
	connection
In-Reply-To: <trinity-c74995be-d4aa-4e84-8bdd-9e64709fef13-1383759094632@3capp-gmx-bs54>
References: <trinity-c74995be-d4aa-4e84-8bdd-9e64709fef13-1383759094632@3capp-gmx-bs54>
Message-ID: <CABkOF6T8Cz4fQG0c__BerKoU_hXxDOr=7KeuQ0ab1UWNgvYVgg@mail.gmail.com>

On Thu, Nov 7, 2013 at 1:31 AM, Toni Rosemann <raketenschnitzel at gmx.de>wrote:

> Hey there,
>
> Setup:
> -i got a Server which is running a Delphi application on Windows7 using
> WinSocketComponents
> -i got a Client (Raspberry Pi) which is running my python client
> application with twisted
> -the server collects data which the client is sending, sometimes the
> server sends back
>
> Problem:
> -the client connects and starts sending, the communication works fine at
> first
> -after some time (rigth now i see no correlation or principle) the server
> won't get any messages anymore, although the client keeps sending (or at
> least the client keeps calling the sendMessage() function
> ->the client is still able to receive messages!
>
> I have no clue whats happening. There is no suspicious behavior nor a
> exception call.
> When i stop the client, the server recognizes a disconnect, but before, no
> disconnect is recognized.
> Has anyone of you an idea or does anyone see a mistake in the design of my
> Factory or Protocol?
> Are there known problems with the combination of python twisted and
> WinSocket of Windows?
>
>

 Have you implemented any acknowledgment in your application?

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131107/cb6d8a35/attachment-0001.html>

From raketenschnitzel at gmx.de  Thu Nov  7 03:12:20 2013
From: raketenschnitzel at gmx.de (Toni Rosemann)
Date: Thu, 7 Nov 2013 11:12:20 +0100 (CET)
Subject: [Twisted-Python] Strange DataLoosing Problem after some time of
 connection
In-Reply-To: <CABkOF6T8Cz4fQG0c__BerKoU_hXxDOr=7KeuQ0ab1UWNgvYVgg@mail.gmail.com>
References: <trinity-c74995be-d4aa-4e84-8bdd-9e64709fef13-1383759094632@3capp-gmx-bs54>, 
 <CABkOF6T8Cz4fQG0c__BerKoU_hXxDOr=7KeuQ0ab1UWNgvYVgg@mail.gmail.com>
Message-ID: <trinity-b794c538-30d2-491d-83ee-9301bee42022-1383819140113@3capp-gmx-bs20>

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131107/697c8ec4/attachment.html>

From ewong at pw-wspx.org  Fri Nov  8 01:50:37 2013
From: ewong at pw-wspx.org (Edmund Wong)
Date: Fri, 08 Nov 2013 16:50:37 +0800
Subject: [Twisted-Python] twisted irc client + packet capturing
Message-ID: <527CA5DD.70306@pw-wspx.org>

Hi,

I've created a script that would log on to an irc server, while
capturing packets.

I came across the following link:

http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/

But I'm using pycap (http://pycap.sourceforge.net/), but I'm having
some difficulties with getting it to work.

Here's the code:

# Copyright (c) Twisted Matrix Laboratories.
# See LICENSE for details.

# twisted imports
from twisted.words.protocols import irc
from twisted.internet import reactor, protocol
from twisted.python import log
from twisted.internet.defer import Deferred

# system imports
import time, sys

import pycap.capture

def run_pcap(f):
     p = pycap.capture.capture('eth0')
     p.filter('src host ! 192.168.1.100 and dst host ! 192.168.1.100 and 
dst port 25')
     packet = None
     print "Listening...\n"
     while 1:
        if packet:
           print "Received packet."
           reactor.callFromThread(f, packet)
        else:
           print "no packet\n"
        packet = p.next()

class LogBot(irc.IRCClient):
     """A logging IRC bot."""

     nickname = "testbot"

     def packetShow(self, packet):
         """ booga """
         msg = "Port 25 hit | From:[%s] To:[%s]" % (packet[1].source, 
packet[1].destination)
         self.msg(self.channel, msg)

     def connectionMade(self):
         irc.IRCClient.connectionMade(self)
         print "Setting up callInThread\n"
         reactor.callInThread(run_pcap, self.packetShow)
         print "Finished setting up callInThread\n"

     def connectionLost(self, reason):
         irc.IRCClient.connectionLost(self, reason)

     # callbacks for events

     def signedOn(self):
         """Called when bot has succesfully signed on to server."""
         print "Signing on to %s.\n" % self.factory.channel
         # self.join(self.factory.channel)
         self.sendLine("JOIN %s" % (self.factory.channel,))

     def joined(self, channel):
         """This will get called when the bot joins the channel."""
         print "Joining channel %s." % channel

     def privmsg(self, user, channel, msg):
         """This will get called when the bot receives a message."""
         user = user.split('!', 1)[0]

         # Check to see if they're sending me a private message
         if channel == self.nickname:
             msg = "It isn't nice to whisper!  Play nice with the group."
             self.msg(user, msg)
             return

         # Otherwise check to see if it is a message directed at me
         if msg.startswith(self.nickname + ":"):
             msg = "%s: I am a log bot" % user
             self.msg(channel, msg)

     def action(self, user, channel, msg):
         """This will get called when the bot sees someone do an action."""
         user = user.split('!', 1)[0]

     # irc callbacks

     def irc_NICK(self, prefix, params):
         """Called when an IRC user changes their nickname."""
         old_nick = prefix.split('!')[0]
         new_nick = params[0]


     # For fun, override the method that determines how a nickname is 
changed on
     # collisions. The default method appends an underscore.
     def alterCollidedNick(self, nickname):
         """
         Generate an altered version of a nickname that caused a 
collision in an
         effort to create an unused related name for subsequent 
registration.
         """
         return nickname + '^'

class LogBotFactory(protocol.ClientFactory):
     """A factory for LogBots.

     A new protocol instance will be created each time we connect to the 
server.
     """

     def __init__(self, channel):
         self.channel = channel

     def buildProtocol(self, addr):
         p = LogBot()
         p.factory = self
         return p

     def clientConnectionLost(self, connector, reason):
         """If we get disconnected, reconnect to server."""
         connector.connect()

     def clientConnectionFailed(self, connector, reason):
         print "connection failed:", reason
         reactor.stop()


if __name__ == '__main__':
     # create factory protocol and application
     f = LogBotFactory("#testx")

     # connect factory to this host and port
     reactor.connectTCP("192.168.1.170", 6667, f)

     # run bot
     reactor.run()

I was told that perhaps I could use twisted.pair,
but I have no idea how to use the module.  The
documentation is lacking and I've only just started
programming in Twisted.

Any help appreciated.

Edmund



From bino at indoakses-online.com  Fri Nov  8 02:23:11 2013
From: bino at indoakses-online.com (bino at indoakses-online.com)
Date: Fri, 8 Nov 2013 16:23:11 +0700
Subject: [Twisted-Python] twisted irc client + packet capturing
In-Reply-To: <527CA5DD.70306@pw-wspx.org>
References: <527CA5DD.70306@pw-wspx.org>
Message-ID: <f617aa46e81fdb53b5b6937ae2a1a9a8.squirrel@localhost>

> Hi,
>
> I've created a script that would log on to an irc server, while
> capturing packets.
>
> I came across the following link:
>
> http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
>
> But I'm using pycap (http://pycap.sourceforge.net/), but I'm having
> some difficulties with getting it to work.

my 'dirty' workaround suggestion :

1. Write a twisted based IRC bot that also have a UDP server function
2. Write a pycap based script that capture packet and other things ...and
udp-send itu to #1


Sincerely
-bino-



From exarkun at twistedmatrix.com  Fri Nov  8 05:08:55 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Nov 2013 12:08:55 -0000
Subject: [Twisted-Python] twisted irc client + packet capturing
In-Reply-To: <527CA5DD.70306@pw-wspx.org>
References: <527CA5DD.70306@pw-wspx.org>
Message-ID: <20131108120855.8349.1701346083.divmod.xquotient.386@top>

On 08:50 am, ewong at pw-wspx.org wrote:
>Hi,
>
>I've created a script that would log on to an irc server, while
>capturing packets.
>
>I came across the following link:
>
>http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python- 
>packet-sniffer/
>
>But I'm using pycap (http://pycap.sourceforge.net/), but I'm having
>some difficulties with getting it to work.
>
>Here's the code:
>
># Copyright (c) Twisted Matrix Laboratories.
># See LICENSE for details.
>
># twisted imports
>from twisted.words.protocols import irc
>from twisted.internet import reactor, protocol
>from twisted.python import log
>from twisted.internet.defer import Deferred
>
># system imports
>import time, sys
>
>import pycap.capture
>
>def run_pcap(f):
>     p = pycap.capture.capture('eth0')
>     p.filter('src host ! 192.168.1.100 and dst host ! 192.168.1.100 and 
>dst port 25')
>     packet = None
>     print "Listening...\n"
>     while 1:
>        if packet:
>           print "Received packet."
>           reactor.callFromThread(f, packet)
>        else:
>           print "no packet\n"
>        packet = p.next()
>
>class LogBot(irc.IRCClient):
>     """A logging IRC bot."""
>
>     nickname = "testbot"
>
>     def packetShow(self, packet):
>         """ booga """
>         msg = "Port 25 hit | From:[%s] To:[%s]" % (packet[1].source, 
>packet[1].destination)
>         self.msg(self.channel, msg)
>
>     def connectionMade(self):
>         irc.IRCClient.connectionMade(self)
>         print "Setting up callInThread\n"
>         reactor.callInThread(run_pcap, self.packetShow)
>         print "Finished setting up callInThread\n"
>
>     def connectionLost(self, reason):
>         irc.IRCClient.connectionLost(self, reason)
>
>     # callbacks for events
>
>     def signedOn(self):
>         """Called when bot has succesfully signed on to server."""
>         print "Signing on to %s.\n" % self.factory.channel
>         # self.join(self.factory.channel)
>         self.sendLine("JOIN %s" % (self.factory.channel,))
>
>     def joined(self, channel):
>         """This will get called when the bot joins the channel."""
>         print "Joining channel %s." % channel
>
>     def privmsg(self, user, channel, msg):
>         """This will get called when the bot receives a message."""
>         user = user.split('!', 1)[0]
>
>         # Check to see if they're sending me a private message
>         if channel == self.nickname:
>             msg = "It isn't nice to whisper!  Play nice with the 
>group."
>             self.msg(user, msg)
>             return
>
>         # Otherwise check to see if it is a message directed at me
>         if msg.startswith(self.nickname + ":"):
>             msg = "%s: I am a log bot" % user
>             self.msg(channel, msg)
>
>     def action(self, user, channel, msg):
>         """This will get called when the bot sees someone do an 
>action."""
>         user = user.split('!', 1)[0]
>
>     # irc callbacks
>
>     def irc_NICK(self, prefix, params):
>         """Called when an IRC user changes their nickname."""
>         old_nick = prefix.split('!')[0]
>         new_nick = params[0]
>
>
>     # For fun, override the method that determines how a nickname is 
>changed on
>     # collisions. The default method appends an underscore.
>     def alterCollidedNick(self, nickname):
>         """
>         Generate an altered version of a nickname that caused a 
>collision in an
>         effort to create an unused related name for subsequent 
>registration.
>         """
>         return nickname + '^'
>
>class LogBotFactory(protocol.ClientFactory):
>     """A factory for LogBots.
>
>     A new protocol instance will be created each time we connect to the 
>server.
>     """
>
>     def __init__(self, channel):
>         self.channel = channel
>
>     def buildProtocol(self, addr):
>         p = LogBot()
>         p.factory = self
>         return p
>
>     def clientConnectionLost(self, connector, reason):
>         """If we get disconnected, reconnect to server."""
>         connector.connect()
>
>     def clientConnectionFailed(self, connector, reason):
>         print "connection failed:", reason
>         reactor.stop()
>
>
>if __name__ == '__main__':
>     # create factory protocol and application
>     f = LogBotFactory("#testx")
>
>     # connect factory to this host and port
>     reactor.connectTCP("192.168.1.170", 6667, f)
>
>     # run bot
>     reactor.run()
>
>I was told that perhaps I could use twisted.pair,
>but I have no idea how to use the module.  The
>documentation is lacking and I've only just started
>programming in Twisted.
>
>Any help appreciated.

I don't know if Twisted Pair will work better for you but you can find 
the start of some documentation about it in this branch:

  https://twistedmatrix.com/trac/browser/branches/tuntap-pytun-6169-3

Additionally, this branch removes the Twisted Pair dependency on the 
"eunuchs" module which is abandoned and difficult to find.

Jean-Paul


From dstainton415 at gmail.com  Fri Nov  8 08:11:20 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Fri, 8 Nov 2013 07:11:20 -0800
Subject: [Twisted-Python] twisted irc client + packet capturing
In-Reply-To: <527CA5DD.70306@pw-wspx.org>
References: <527CA5DD.70306@pw-wspx.org>
Message-ID: <CAFN1edri9X0KECqPO=jO42x3=6Y1J4w9yMpP6JBu7hoEkkaJcA@mail.gmail.com>

I got my sniffer to work in Twisted... but then I'm not using pycap :
https://github.com/david415/hushVPN/blob/master/nflog_reader.py

I use the NetLinkFilter socket via this python cffi:
https://github.com/mk-fg/scapy-nflog-capture
Anyhow this allows me to control which packets my sniffer picks up via
iptables rules like this:

iptables -A INPUT -p tcp --dport 22 -j NFLOG


Cheers!

David


On Fri, Nov 8, 2013 at 12:50 AM, Edmund Wong <ewong at pw-wspx.org> wrote:
> Hi,
>
> I've created a script that would log on to an irc server, while
> capturing packets.
>
> I came across the following link:
>
> http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
>
> But I'm using pycap (http://pycap.sourceforge.net/), but I'm having
> some difficulties with getting it to work.
>
> Here's the code:
>
> # Copyright (c) Twisted Matrix Laboratories.
> # See LICENSE for details.
>
> # twisted imports
> from twisted.words.protocols import irc
> from twisted.internet import reactor, protocol
> from twisted.python import log
> from twisted.internet.defer import Deferred
>
> # system imports
> import time, sys
>
> import pycap.capture
>
> def run_pcap(f):
>     p = pycap.capture.capture('eth0')
>     p.filter('src host ! 192.168.1.100 and dst host ! 192.168.1.100 and dst
> port 25')
>     packet = None
>     print "Listening...\n"
>     while 1:
>        if packet:
>           print "Received packet."
>           reactor.callFromThread(f, packet)
>        else:
>           print "no packet\n"
>        packet = p.next()
>
> class LogBot(irc.IRCClient):
>     """A logging IRC bot."""
>
>     nickname = "testbot"
>
>     def packetShow(self, packet):
>         """ booga """
>         msg = "Port 25 hit | From:[%s] To:[%s]" % (packet[1].source,
> packet[1].destination)
>         self.msg(self.channel, msg)
>
>     def connectionMade(self):
>         irc.IRCClient.connectionMade(self)
>         print "Setting up callInThread\n"
>         reactor.callInThread(run_pcap, self.packetShow)
>         print "Finished setting up callInThread\n"
>
>     def connectionLost(self, reason):
>         irc.IRCClient.connectionLost(self, reason)
>
>     # callbacks for events
>
>     def signedOn(self):
>         """Called when bot has succesfully signed on to server."""
>         print "Signing on to %s.\n" % self.factory.channel
>         # self.join(self.factory.channel)
>         self.sendLine("JOIN %s" % (self.factory.channel,))
>
>     def joined(self, channel):
>         """This will get called when the bot joins the channel."""
>         print "Joining channel %s." % channel
>
>     def privmsg(self, user, channel, msg):
>         """This will get called when the bot receives a message."""
>         user = user.split('!', 1)[0]
>
>         # Check to see if they're sending me a private message
>         if channel == self.nickname:
>             msg = "It isn't nice to whisper!  Play nice with the group."
>             self.msg(user, msg)
>             return
>
>         # Otherwise check to see if it is a message directed at me
>         if msg.startswith(self.nickname + ":"):
>             msg = "%s: I am a log bot" % user
>             self.msg(channel, msg)
>
>     def action(self, user, channel, msg):
>         """This will get called when the bot sees someone do an action."""
>         user = user.split('!', 1)[0]
>
>     # irc callbacks
>
>     def irc_NICK(self, prefix, params):
>         """Called when an IRC user changes their nickname."""
>         old_nick = prefix.split('!')[0]
>         new_nick = params[0]
>
>
>     # For fun, override the method that determines how a nickname is changed
> on
>     # collisions. The default method appends an underscore.
>     def alterCollidedNick(self, nickname):
>         """
>         Generate an altered version of a nickname that caused a collision in
> an
>         effort to create an unused related name for subsequent registration.
>         """
>         return nickname + '^'
>
> class LogBotFactory(protocol.ClientFactory):
>     """A factory for LogBots.
>
>     A new protocol instance will be created each time we connect to the
> server.
>     """
>
>     def __init__(self, channel):
>         self.channel = channel
>
>     def buildProtocol(self, addr):
>         p = LogBot()
>         p.factory = self
>         return p
>
>     def clientConnectionLost(self, connector, reason):
>         """If we get disconnected, reconnect to server."""
>         connector.connect()
>
>     def clientConnectionFailed(self, connector, reason):
>         print "connection failed:", reason
>         reactor.stop()
>
>
> if __name__ == '__main__':
>     # create factory protocol and application
>     f = LogBotFactory("#testx")
>
>     # connect factory to this host and port
>     reactor.connectTCP("192.168.1.170", 6667, f)
>
>     # run bot
>     reactor.run()
>
> I was told that perhaps I could use twisted.pair,
> but I have no idea how to use the module.  The
> documentation is lacking and I've only just started
> programming in Twisted.
>
> Any help appreciated.
>
> Edmund
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From akersof at gmail.com  Fri Nov  8 09:16:48 2013
From: akersof at gmail.com (Sofiane Akermoun)
Date: Fri, 8 Nov 2013 17:16:48 +0100
Subject: [Twisted-Python] twisted irc client + packet capturing
In-Reply-To: <CAFN1edri9X0KECqPO=jO42x3=6Y1J4w9yMpP6JBu7hoEkkaJcA@mail.gmail.com>
References: <527CA5DD.70306@pw-wspx.org>
 <CAFN1edri9X0KECqPO=jO42x3=6Y1J4w9yMpP6JBu7hoEkkaJcA@mail.gmail.com>
Message-ID: <CAN0_x-KXrfqzodWh5CabHMomUUZ8g=GidWH9gER-MkM0HsS1ZA@mail.gmail.com>

Hello,

1) create a pcapdevice
I use pcapy because it can return a file descriptor of the new
pcapdevice created

2) Use abstract.FileDescriptor
With absbract.FileDescriptor you can wrap the previvous pcapdevice
with its file descriptor into some that twisted can use properly into
the reactor. With abstract.FileDescriptor you will create an event
based pcapdevice which will read data when they income without
blocking anything and without using thread.

3) plug you twisted-like pcapdevice into your application.
Now with a pcapdevice based on abstract.FileDescriptor you can use it
into you twisted application without any problem

I will try to speed up my developpement process to show you a little
module that could permit you to do it really easly.
I am actually coding the dissector of the packet received.

kinds regards,

Sofiane Akermoun


2013/11/8 David Stainton <dstainton415 at gmail.com>:
> I got my sniffer to work in Twisted... but then I'm not using pycap :
> https://github.com/david415/hushVPN/blob/master/nflog_reader.py
>
> I use the NetLinkFilter socket via this python cffi:
> https://github.com/mk-fg/scapy-nflog-capture
> Anyhow this allows me to control which packets my sniffer picks up via
> iptables rules like this:
>
> iptables -A INPUT -p tcp --dport 22 -j NFLOG
>
>
> Cheers!
>
> David
>
>
> On Fri, Nov 8, 2013 at 12:50 AM, Edmund Wong <ewong at pw-wspx.org> wrote:
>> Hi,
>>
>> I've created a script that would log on to an irc server, while
>> capturing packets.
>>
>> I came across the following link:
>>
>> http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
>>
>> But I'm using pycap (http://pycap.sourceforge.net/), but I'm having
>> some difficulties with getting it to work.
>>
>> Here's the code:
>>
>> # Copyright (c) Twisted Matrix Laboratories.
>> # See LICENSE for details.
>>
>> # twisted imports
>> from twisted.words.protocols import irc
>> from twisted.internet import reactor, protocol
>> from twisted.python import log
>> from twisted.internet.defer import Deferred
>>
>> # system imports
>> import time, sys
>>
>> import pycap.capture
>>
>> def run_pcap(f):
>>     p = pycap.capture.capture('eth0')
>>     p.filter('src host ! 192.168.1.100 and dst host ! 192.168.1.100 and dst
>> port 25')
>>     packet = None
>>     print "Listening...\n"
>>     while 1:
>>        if packet:
>>           print "Received packet."
>>           reactor.callFromThread(f, packet)
>>        else:
>>           print "no packet\n"
>>        packet = p.next()
>>
>> class LogBot(irc.IRCClient):
>>     """A logging IRC bot."""
>>
>>     nickname = "testbot"
>>
>>     def packetShow(self, packet):
>>         """ booga """
>>         msg = "Port 25 hit | From:[%s] To:[%s]" % (packet[1].source,
>> packet[1].destination)
>>         self.msg(self.channel, msg)
>>
>>     def connectionMade(self):
>>         irc.IRCClient.connectionMade(self)
>>         print "Setting up callInThread\n"
>>         reactor.callInThread(run_pcap, self.packetShow)
>>         print "Finished setting up callInThread\n"
>>
>>     def connectionLost(self, reason):
>>         irc.IRCClient.connectionLost(self, reason)
>>
>>     # callbacks for events
>>
>>     def signedOn(self):
>>         """Called when bot has succesfully signed on to server."""
>>         print "Signing on to %s.\n" % self.factory.channel
>>         # self.join(self.factory.channel)
>>         self.sendLine("JOIN %s" % (self.factory.channel,))
>>
>>     def joined(self, channel):
>>         """This will get called when the bot joins the channel."""
>>         print "Joining channel %s." % channel
>>
>>     def privmsg(self, user, channel, msg):
>>         """This will get called when the bot receives a message."""
>>         user = user.split('!', 1)[0]
>>
>>         # Check to see if they're sending me a private message
>>         if channel == self.nickname:
>>             msg = "It isn't nice to whisper!  Play nice with the group."
>>             self.msg(user, msg)
>>             return
>>
>>         # Otherwise check to see if it is a message directed at me
>>         if msg.startswith(self.nickname + ":"):
>>             msg = "%s: I am a log bot" % user
>>             self.msg(channel, msg)
>>
>>     def action(self, user, channel, msg):
>>         """This will get called when the bot sees someone do an action."""
>>         user = user.split('!', 1)[0]
>>
>>     # irc callbacks
>>
>>     def irc_NICK(self, prefix, params):
>>         """Called when an IRC user changes their nickname."""
>>         old_nick = prefix.split('!')[0]
>>         new_nick = params[0]
>>
>>
>>     # For fun, override the method that determines how a nickname is changed
>> on
>>     # collisions. The default method appends an underscore.
>>     def alterCollidedNick(self, nickname):
>>         """
>>         Generate an altered version of a nickname that caused a collision in
>> an
>>         effort to create an unused related name for subsequent registration.
>>         """
>>         return nickname + '^'
>>
>> class LogBotFactory(protocol.ClientFactory):
>>     """A factory for LogBots.
>>
>>     A new protocol instance will be created each time we connect to the
>> server.
>>     """
>>
>>     def __init__(self, channel):
>>         self.channel = channel
>>
>>     def buildProtocol(self, addr):
>>         p = LogBot()
>>         p.factory = self
>>         return p
>>
>>     def clientConnectionLost(self, connector, reason):
>>         """If we get disconnected, reconnect to server."""
>>         connector.connect()
>>
>>     def clientConnectionFailed(self, connector, reason):
>>         print "connection failed:", reason
>>         reactor.stop()
>>
>>
>> if __name__ == '__main__':
>>     # create factory protocol and application
>>     f = LogBotFactory("#testx")
>>
>>     # connect factory to this host and port
>>     reactor.connectTCP("192.168.1.170", 6667, f)
>>
>>     # run bot
>>     reactor.run()
>>
>> I was told that perhaps I could use twisted.pair,
>> but I have no idea how to use the module.  The
>> documentation is lacking and I've only just started
>> programming in Twisted.
>>
>> Any help appreciated.
>>
>> Edmund
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
Sofiane AKERMOUN
akersof at gmail.com


From jamesbroadhead at gmail.com  Fri Nov  8 09:42:31 2013
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Fri, 8 Nov 2013 16:42:31 +0000
Subject: [Twisted-Python] Bristol (England!) sprint hosted by
	HybridCluster
In-Reply-To: <20131105222539.8349.455028162.divmod.xquotient.262@top>
References: <20131105222539.8349.455028162.divmod.xquotient.262@top>
Message-ID: <CA+hid6FYmQxGjQ7eRRqLnW-uOGiDsL7tkS-idHHM7Y81_DQStA@mail.gmail.com>

Sounds exciting -- there have been some changes to trial that I've been
thinking about for a little while, so this would be a great opportunity.

Would you mind if I distributed this email farther afield? To
python-uk at python.org for instance (or are you waiting until you have a
fixed venue?)


On 5 November 2013 22:25, <exarkun at twistedmatrix.com> wrote:

> Greetings all,
>
> I'm pleased to invite you to join Tom Prince (2013 Twisted Fellow), Luke
> Marsden (founder of HybridCluster), and the HybridCluster team (including
> myself!) for the first Twisted sprint hosted by HybridCluster!
>
> The sprint will take place on December 7th in central Bristol (exact
> location to be determined) from 11AM until no one remains capable of higher
> brain function(*).
>
> As usual sprint topics will surely be wide ranging - bring your favorite
> pet project, a personal loathing for unresolved bugs, or just find someone
> interesting to work with when you show up (personally, I'll probably be
> trying to add APIs to support more easily testing Agent- using
> applications).
>
> HybridCluster is a small Bristol-based company building high density web
> hosting platform using Twisted for all manner of tasks - from SSH, HTTP,
> SMTP, POP3, and IMAP4 to internal cluster coordination and asynchronous SQL
> access.
>
> Watch this space for a follow-up post giving details about the venue (and
> free food!).  In the meantime feel free to contact me or post to the list
> with any other questions.
>
> Jean-Paul
>
> (*) Due to excessive hacking.  Certainly not because of any kind of mind
> control technology deployed by the TSF.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131108/8a818d02/attachment.html>

From p.mayers at imperial.ac.uk  Fri Nov  8 10:01:09 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 08 Nov 2013 17:01:09 +0000
Subject: [Twisted-Python] twisted irc client + packet capturing
In-Reply-To: <CAN0_x-KXrfqzodWh5CabHMomUUZ8g=GidWH9gER-MkM0HsS1ZA@mail.gmail.com>
References: <527CA5DD.70306@pw-wspx.org>
 <CAFN1edri9X0KECqPO=jO42x3=6Y1J4w9yMpP6JBu7hoEkkaJcA@mail.gmail.com>
 <CAN0_x-KXrfqzodWh5CabHMomUUZ8g=GidWH9gER-MkM0HsS1ZA@mail.gmail.com>
Message-ID: <527D18D5.90005@imperial.ac.uk>

Another option is to run tcpdump as a sub-process writing to stdout, and 
write a ProcessProtocol to parse the pcap stream. This is not terribly 
difficult, and can actually have some advantages - if your python 
process blocks for too long you can lose captured packets, but by 
letting tcpdump aggressively drive the reading of the socket, you can 
(ab)use the pipe() buffers to hold a small backlog.

[If you need even more aggressive buffering, replace tcpdump with gulp]

If you do this you should extract packet timestamps from the pcap 
stream, not the wall clock.

I have code to do this, if anyone can't figure it out themselves.


From exarkun at twistedmatrix.com  Fri Nov  8 11:13:11 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Nov 2013 18:13:11 -0000
Subject: [Twisted-Python] Bristol (England!) sprint hosted by
	HybridCluster
Message-ID: <20131108181311.8349.1397706264.divmod.xquotient.393@top>

On 04:42 pm, jamesbroadhead at gmail.com wrote:
>Sounds exciting -- there have been some changes to trial that I've been
>thinking about for a little while, so this would be a great 
>opportunity.
>
>Would you mind if I distributed this email farther afield? To
>python-uk at python.org for instance (or are you waiting until you have a
>fixed venue?)

Hi James,

Please feel free to widen the distribution.  I'm going to post a follow- 
up to the original message with information about the venue in just a 
minute.

Hope to see you there!

Jean-Paul
>
>On 5 November 2013 22:25, <exarkun at twistedmatrix.com> wrote:
>>Greetings all,
>>
>>I'm pleased to invite you to join Tom Prince (2013 Twisted Fellow), 
>>Luke
>>Marsden (founder of HybridCluster), and the HybridCluster team 
>>(including
>>myself!) for the first Twisted sprint hosted by HybridCluster!
>>
>>The sprint will take place on December 7th in central Bristol (exact
>>location to be determined) from 11AM until no one remains capable of 
>>higher
>>brain function(*).
>>
>>As usual sprint topics will surely be wide ranging - bring your 
>>favorite
>>pet project, a personal loathing for unresolved bugs, or just find 
>>someone
>>interesting to work with when you show up (personally, I'll probably 
>>be
>>trying to add APIs to support more easily testing Agent- using
>>applications).
>>
>>HybridCluster is a small Bristol-based company building high density 
>>web
>>hosting platform using Twisted for all manner of tasks - from SSH, 
>>HTTP,
>>SMTP, POP3, and IMAP4 to internal cluster coordination and 
>>asynchronous SQL
>>access.
>>
>>Watch this space for a follow-up post giving details about the venue 
>>(and
>>free food!).  In the meantime feel free to contact me or post to the 
>>list
>>with any other questions.
>>
>>Jean-Paul
>>
>>(*) Due to excessive hacking.  Certainly not because of any kind of 
>>mind
>>control technology deployed by the TSF.
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From hawkowl at atleastfornow.net  Fri Nov  8 11:49:24 2013
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Sat, 09 Nov 2013 02:49:24 +0800
Subject: [Twisted-Python] Twisted 13.2.0 Release Announcement
Message-ID: <527D3234.1040507@atleastfornow.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On behalf of Twisted Matrix Laboratories, I am honoured to announce
the release of Twisted 13.2!

The highlights of this release are:

 * Twisted now includes a HostnameEndpoint implementation which uses
IPv4 and IPv6 in parallel, speeding up the connection by using
whichever connects first (the 'Happy Eyeballs'/RFC 6555 algorithm).
(#4859)

 * Improved support for Cancellable Deferreds by kaizhang, our GSoC
student. (#4320, #6532, #6572, #6639)

 * Improved Twisted.Mail documentation by shira, our Outreach Program
for Women intern. (#6649, #6652)

 * twistd now waits for the application to start successfully before
exiting after daemonization. (#823)

 * SSL server endpoint string descriptions now support the
specification of chain certificates. (#6499)

 * Over 70 closed tickets since 13.1.0.

For more information, check the NEWS file (link provided below).

You can find the downloads at <https://pypi.python.org/pypi/Twisted>
(or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>) .
The NEWS file is also available at
<http://twistedmatrix.com/Releases/Twisted/13.2/NEWS.txt>.

Many thanks to everyone who had a part in this release - the
supporters of the Twisted Software Foundation, the developers who
contributed code as well as documentation, and all the people building
great things with Twisted!

Twisted Regards,
HawkOwl
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.15 (GNU/Linux)

iQEcBAEBAgAGBQJSfTI0AAoJECMItHnTkkoRDzgH/0hbsTLrBVklSjFXINgjNZcE
9IEwFcXsWGElv066Nmt7Nm2CQ0idIJHosx58re8LKK9F/xK3CWlCceJOeS+npNfE
y3CnuBRxJYWC+xdy/WTgLV26LkFi2TzqYJT+r6AfS8KUhOJCUJ3H+x8G2SeDlin+
eED64X4ftbs22tSz3RkCkpT++L6inPvVWhwpQhn+GqnS4oBqjbjcYpwJ8+wFfy72
6qe6OcXsoUxM72nbZ1vLg4WE5nbv3It+HnR9PYJTY9VFv8sNeGzb/VEfLpeFJG7f
bZImycCh2Flp3OKVzaELmWc+hYDsWT/TuaQYYw6IJYqvFCoTuEQFsdtJuuVBZoQ=
=Attd
-----END PGP SIGNATURE-----


From exarkun at twistedmatrix.com  Fri Nov  8 12:31:10 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Nov 2013 19:31:10 -0000
Subject: [Twisted-Python] Bristol (England!) sprint hosted by
	HybridCluster
In-Reply-To: <20131105222539.8349.455028162.divmod.xquotient.262@top>
References: <20131105222539.8349.455028162.divmod.xquotient.262@top>
Message-ID: <20131108193110.8349.896392936.divmod.xquotient.542@top>

On 5 Nov, 10:25 pm, exarkun at twistedmatrix.com wrote:
>Greetings all,
>
>I'm pleased to invite you to join Tom Prince (2013 Twisted Fellow), 
>Luke Marsden (founder of HybridCluster), and the HybridCluster team 
>(including myself!) for the first Twisted sprint hosted by 
>HybridCluster!
>
>The sprint will take place on December 7th in central Bristol (exact 
>location to be determined) from 11AM until no one remains capable of 
>higher brain function(*).

Hello again,

The exact location of the sprint has been selected.  The sprint will be 
held at SETsquared Business Acceleration Centre, Bristol:

http://goo.gl/maps/1HUsW

When you arrive at Temple Meads train station:

   After passing through the barriers, exit the building through the main 
entrance on the left.
   Walk down the concourse on the right hand-side.

   At the bottom of the road on the corner there is a Caffe Gusto.

   The entrance to the building (sprint venue) is next to theirs on the 
right.

You'll need some assistance getting in the door.  When you get there 
either call +447791750420 to speak to Luke or email jean- 
paul at hybridcluster.com (with the latter probably being a bit higher 
latency).

Jean-Paul
>
>As usual sprint topics will surely be wide ranging - bring your 
>favorite pet project, a personal loathing for unresolved bugs, or just 
>find someone interesting to work with when you show up (personally, 
>I'll probably be trying to add APIs to support more easily testing 
>Agent- using applications).
>
>HybridCluster is a small Bristol-based company building high density 
>web hosting platform using Twisted for all manner of tasks - from SSH, 
>HTTP, SMTP, POP3, and IMAP4 to internal cluster coordination and 
>asynchronous SQL access.
>
>Watch this space for a follow-up post giving details about the venue 
>(and free food!).  In the meantime feel free to contact me or post to 
>the list with any other questions.
>
>Jean-Paul
>
>(*) Due to excessive hacking.  Certainly not because of any kind of 
>mind control technology deployed by the TSF.
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From JOHN at egh.com  Fri Nov  8 12:37:34 2013
From: JOHN at egh.com (John Santos)
Date: Fri, 8 Nov 2013 14:37:34 -0500
Subject: [Twisted-Python] Twisted 13.2.0 Release Announcement
In-Reply-To: <527D3234.1040507@atleastfornow.net>
Message-ID: <1131108142916.32476B-100000@Ives.egh.com>


A little late to the party, but since you asked for feedback, I installed
13.2.0pre1 last night.  No problems with Twisted itself, but I made the
mistake of updating (or trying to update) all the other component
packages, including Python, openssl, gmp, pyOpenSSL, pycrypto (my app uses
SSH to talk to interactive clients), and lots of other bits and pieces.

Lesson:  Only update one thing at a time, unless there are explicit
dependencies!  Especially if you are stuck on a fairly old Linux distro
(SLES 10, at least for the time being)!

But the Twisted part was a piece of cake.

Now I get to do it all again, but it should be easy this time...


On Sat, 9 Nov 2013, HawkOwl wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> On behalf of Twisted Matrix Laboratories, I am honoured to announce
> the release of Twisted 13.2!
> 
> The highlights of this release are:
> 
>  * Twisted now includes a HostnameEndpoint implementation which uses
> IPv4 and IPv6 in parallel, speeding up the connection by using
> whichever connects first (the 'Happy Eyeballs'/RFC 6555 algorithm).
> (#4859)
> 
>  * Improved support for Cancellable Deferreds by kaizhang, our GSoC
> student. (#4320, #6532, #6572, #6639)
> 
>  * Improved Twisted.Mail documentation by shira, our Outreach Program
> for Women intern. (#6649, #6652)
> 
>  * twistd now waits for the application to start successfully before
> exiting after daemonization. (#823)
> 
>  * SSL server endpoint string descriptions now support the
> specification of chain certificates. (#6499)
> 
>  * Over 70 closed tickets since 13.1.0.
> 
> For more information, check the NEWS file (link provided below).
> 
> You can find the downloads at <https://pypi.python.org/pypi/Twisted>
> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>) .
> The NEWS file is also available at
> <http://twistedmatrix.com/Releases/Twisted/13.2/NEWS.txt>.
> 
> Many thanks to everyone who had a part in this release - the
> supporters of the Twisted Software Foundation, the developers who
> contributed code as well as documentation, and all the people building
> great things with Twisted!
> 
> Twisted Regards,
> HawkOwl
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.15 (GNU/Linux)
> 
> iQEcBAEBAgAGBQJSfTI0AAoJECMItHnTkkoRDzgH/0hbsTLrBVklSjFXINgjNZcE
> 9IEwFcXsWGElv066Nmt7Nm2CQ0idIJHosx58re8LKK9F/xK3CWlCceJOeS+npNfE
> y3CnuBRxJYWC+xdy/WTgLV26LkFi2TzqYJT+r6AfS8KUhOJCUJ3H+x8G2SeDlin+
> eED64X4ftbs22tSz3RkCkpT++L6inPvVWhwpQhn+GqnS4oBqjbjcYpwJ8+wFfy72
> 6qe6OcXsoUxM72nbZ1vLg4WE5nbv3It+HnR9PYJTY9VFv8sNeGzb/VEfLpeFJG7f
> bZImycCh2Flp3OKVzaELmWc+hYDsWT/TuaQYYw6IJYqvFCoTuEQFsdtJuuVBZoQ=
> =Attd
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539



From hawkowl at atleastfornow.net  Fri Nov  8 13:23:41 2013
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Sat, 09 Nov 2013 04:23:41 +0800
Subject: [Twisted-Python] Twisted 13.2.0 Release Announcement
In-Reply-To: <1131108142916.32476B-100000@Ives.egh.com>
References: <1131108142916.32476B-100000@Ives.egh.com>
Message-ID: <527D484D.10704@atleastfornow.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi John,

There's no code changes between pre1 and full release - so you
shouldn't have any problems! :)

- -hawkowl

On 09/11/13 03:37, John Santos wrote:
> 
> A little late to the party, but since you asked for feedback, I
> installed 13.2.0pre1 last night.  No problems with Twisted itself,
> but I made the mistake of updating (or trying to update) all the
> other component packages, including Python, openssl, gmp,
> pyOpenSSL, pycrypto (my app uses SSH to talk to interactive
> clients), and lots of other bits and pieces.
> 
> Lesson:  Only update one thing at a time, unless there are
> explicit dependencies!  Especially if you are stuck on a fairly old
> Linux distro (SLES 10, at least for the time being)!
> 
> But the Twisted part was a piece of cake.
> 
> Now I get to do it all again, but it should be easy this time...
> 
> 
> On Sat, 9 Nov 2013, HawkOwl wrote:
> 
> On behalf of Twisted Matrix Laboratories, I am honoured to
> announce the release of Twisted 13.2!
> 
> The highlights of this release are:
> 
> * Twisted now includes a HostnameEndpoint implementation which
> uses IPv4 and IPv6 in parallel, speeding up the connection by
> using whichever connects first (the 'Happy Eyeballs'/RFC 6555
> algorithm). (#4859)
> 
> * Improved support for Cancellable Deferreds by kaizhang, our GSoC 
> student. (#4320, #6532, #6572, #6639)
> 
> * Improved Twisted.Mail documentation by shira, our Outreach
> Program for Women intern. (#6649, #6652)
> 
> * twistd now waits for the application to start successfully
> before exiting after daemonization. (#823)
> 
> * SSL server endpoint string descriptions now support the 
> specification of chain certificates. (#6499)
> 
> * Over 70 closed tickets since 13.1.0.
> 
> For more information, check the NEWS file (link provided below).
> 
> You can find the downloads at
> <https://pypi.python.org/pypi/Twisted> (or alternatively
> <http://twistedmatrix.com/trac/wiki/Downloads>) . The NEWS file is
> also available at 
> <http://twistedmatrix.com/Releases/Twisted/13.2/NEWS.txt>.
> 
> Many thanks to everyone who had a part in this release - the 
> supporters of the Twisted Software Foundation, the developers who 
> contributed code as well as documentation, and all the people
> building great things with Twisted!
> 
> Twisted Regards, HawkOwl
>> 
>> _______________________________________________ Twisted-Python
>> mailing list Twisted-Python at twistedmatrix.com 
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.15 (GNU/Linux)

iQEcBAEBAgAGBQJSfUhNAAoJECMItHnTkkoRPTkH/1exNGgSy0XAwfgOPMEzriPm
NeWSXdQhg3BkXfrl601+npzqPwEJ0DPJcdResyN8k9aNb/22Y0HXBbl58WB98OB5
3NU08rpi7uipDFQ2OPSc248DGcLH0zWi2H/ITkwVhpI7pD+Zd3JMBFGbq+WGk1BK
jl7QzYW8N8X+hRPmtHIX34aBy6oy72/GMArq7bexMipnWLfA8kdX/hiqyhe/Qa9j
dtZFZg8Jk2QLXehIQhlC7bn0XPRf1ZzuYgmC9ZS3/6kEYE5fQA04B7/Q+wUSipI+
dWA0YjvKj2Nb3uvs/9fkQUQJPQMoulZtWFXfonqugtdBkb3fVWWY/nZyCM4wJGU=
=cSB7
-----END PGP SIGNATURE-----


From m-lists at the-moon.net  Sat Nov  9 04:44:50 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Sat, 9 Nov 2013 11:44:50 +0000
Subject: [Twisted-Python] Bristol (England!) sprint hosted by
	HybridCluster
Message-ID: <CABefbUrt=JZ73XoFbbuMWiXKuLj8hBkXkX==JandJALjWUUEDA@mail.gmail.com>

On 5 November 2013 22:25,  <exarkun at twistedmatrix.com> wrote:
> I'm pleased to invite you to join Tom Prince (2013 Twisted Fellow), Luke
> Marsden (founder of HybridCluster), and the HybridCluster team (including
> myself!) for the first Twisted sprint hosted by HybridCluster!

Count me in. I'll probably try and do some more work on Twisted Names.

-RichardW.


From trac at twistedmatrix.com  Sun Nov 10 00:05:22 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 Nov 2013 07:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1384067122.03.7838649750315673631@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131110/265a7574/attachment.html>

From bino at indoakses-online.com  Mon Nov 11 01:15:55 2013
From: bino at indoakses-online.com (bino at indoakses-online.com)
Date: Mon, 11 Nov 2013 15:15:55 +0700
Subject: [Twisted-Python] question : use existing tac file with tap.
Message-ID: <72e53e6792b13a1ad0c9b1dcbde91145.squirrel@localhost>

Dear All.

Currently I have a single '.tac' file that use MultiService()

Ended with
----------------

#Create Application
print 'create application'
application = service.Application("Serial MultiService Example")
#Creating Multi Service
multiService = service.MultiService()
...
...
multiService.setServiceParent(application)

--------------
currently it works just fine


Now, i need to to able to run it using some parameter from the commandline.
I kne that I have to take 'tap' path.
I read http://docs.huihoo.com/python/twisted/howto/tap.html but (thanks to
my lame brain) failed to understand on how to implement this to my
existing script.

Kindly please tell me how to do it or give me realy basic example on
using/migrating tac file with Twisted Application Plugin.

Sincerely
-bino-



From rmeijer at xs4all.nl  Mon Nov 11 01:45:05 2013
From: rmeijer at xs4all.nl (Rob Meijer)
Date: Mon, 11 Nov 2013 09:45:05 +0100
Subject: [Twisted-Python] Determine TLS version from within request
 handler ? (twisted web)
In-Reply-To: <20131106143827.8349.1534318774.divmod.xquotient.371@top>
References: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>
 <20131106143827.8349.1534318774.divmod.xquotient.371@top>
Message-ID: <8af01e767be5317d016f6258bd46c7f7.squirrel@webmail.xs4all.nl>

On Wed, November 6, 2013 15:38, exarkun at twistedmatrix.com wrote:
> On 11:43 am, rmeijer at xs4all.nl wrote:
>>I'm using twisted web for an https connection. At first I start with
>>creating and configuring a ssl.DefaultOpenSSLContextFactory derived
>>class
>>that disables SSLv2 and SSLv3. So (basically we're left with TLS1.0 and
>>up) and forces the use of a single strong (non RC4 but BEAST
>>vulnerable)
>>cipher.
>>
>>Than I have a http.HTTPFactory derived class with a 'buildProtocol'that
>>return a http.HTTPChannel derived object, that in turn returns a
>>http.Request derived object.
>>
>>Than reactor.listenSSL is invoked with both the SSL factory and the
>>HTTP
>>factory. Now my problem. I don't really understand how these two are
>>connected once the request handler gets invoked.
>>
>>What I would like to do is that I would want to allow TLS1.0 users to
>>use
>>the server, but only after explicitly agreeing that they understand the
>>risks involved with using an old BEAST vulnerable browser.
>>
>>Is there any way to retrieve info on what TLS version has been
>>negotiated
>>from within the HTTP request handler? I've been walking the 'self'
>>object
>>a bit, and self.transport.getHandle() seems to have some tls stuff like
>>'get_cipher_list' and 'get_peer_certificate', but the simple TLS
>>version
>>number does not seem to be available.
>
> The object you get back from `self.transport.getHandle()` happens to be
> an object from pyOpenSSL - an instance of OpenSSL.SSL.Connection.  While
> reading the following, though, bear in mind that `getHandle` doesn't
> make much of a promise about what it will return.  Other transports may
> return something else and future versions of Twisted may change the
> result as well.
>
> The API that OpenSSL appears to offer for determining what protocol
> version is in use appears to be SSL_get_version().  This returns a
> string like "SSLv2" or "TLSv1" (the documentation doesn't say anything
> about TLSv1.1 or TLSv1.2 but *presumably* if you have a version of
> OpenSSL that implements either of these protocols and one of them is
> negotiated on a connection then SSL_get_version() will identify them in
> its result).
>
> pyOpenSSL, however, does not expose this method.  So in order to get the
> information you need you may need to contribute a binding for this
> method to pyOpenSSL.
>
> Jean-Paul

Hi Jean-Paul,

Tnx very much for your answer. I've now ended up with what I think is a
bit of a hack. I've consulted the wikipedia page on TLS :

http://en.wikipedia.org/wiki/Transport_Layer_Security#Web_browsers

and added some code that checks the browser version as reported un the
user-agent header against the minimum version of major browsers that
report to have TLS1.1 support both implemented and enabled by default.
I'm not fully satisfied with this one, but unfortunately it seems to be
the only viable option for my current project :-(


Tnx,

Rob



From ewong at pw-wspx.org  Mon Nov 11 02:57:28 2013
From: ewong at pw-wspx.org (Edmund Wong)
Date: Mon, 11 Nov 2013 17:57:28 +0800
Subject: [Twisted-Python] twisted irc client + packet capturing
In-Reply-To: <527CA5DD.70306@pw-wspx.org>
References: <527CA5DD.70306@pw-wspx.org>
Message-ID: <5280AA08.7030908@pw-wspx.org>

Thanks all for your pointers and ways to do
this packet capturing.  Going to try 'em all,
if I can.

Edmund


From werner at thieprojects.ch  Mon Nov 11 09:49:50 2013
From: werner at thieprojects.ch (Werner Thie)
Date: Mon, 11 Nov 2013 06:49:50 -1000
Subject: [Twisted-Python] Determine TLS version from within request
 handler ? (twisted web)
In-Reply-To: <8af01e767be5317d016f6258bd46c7f7.squirrel@webmail.xs4all.nl>
References: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>
 <20131106143827.8349.1534318774.divmod.xquotient.371@top>
 <8af01e767be5317d016f6258bd46c7f7.squirrel@webmail.xs4all.nl>
Message-ID: <52810AAE.3090107@thieprojects.ch>

On 11/10/13 10:45 PM, Rob Meijer wrote:
> On Wed, November 6, 2013 15:38, exarkun at twistedmatrix.com wrote:
>> On 11:43 am, rmeijer at xs4all.nl wrote:
>>> I'm using twisted web for an https connection. At first I start with
>>> creating and configuring a ssl.DefaultOpenSSLContextFactory derived
>>> class
>>> that disables SSLv2 and SSLv3. So (basically we're left with TLS1.0 and
>>> up) and forces the use of a single strong (non RC4 but BEAST
>>> vulnerable)
>>> cipher.
>>>
>>> Than I have a http.HTTPFactory derived class with a 'buildProtocol'that
>>> return a http.HTTPChannel derived object, that in turn returns a
>>> http.Request derived object.
>>>
>>> Than reactor.listenSSL is invoked with both the SSL factory and the
>>> HTTP
>>> factory. Now my problem. I don't really understand how these two are
>>> connected once the request handler gets invoked.
>>>
>>> What I would like to do is that I would want to allow TLS1.0 users to
>>> use
>>> the server, but only after explicitly agreeing that they understand the
>>> risks involved with using an old BEAST vulnerable browser.
>>>
>>> Is there any way to retrieve info on what TLS version has been
>>> negotiated
>> >from within the HTTP request handler? I've been walking the 'self'
>>> object
>>> a bit, and self.transport.getHandle() seems to have some tls stuff like
>>> 'get_cipher_list' and 'get_peer_certificate', but the simple TLS
>>> version
>>> number does not seem to be available.
>>
>> The object you get back from `self.transport.getHandle()` happens to be
>> an object from pyOpenSSL - an instance of OpenSSL.SSL.Connection.  While
>> reading the following, though, bear in mind that `getHandle` doesn't
>> make much of a promise about what it will return.  Other transports may
>> return something else and future versions of Twisted may change the
>> result as well.
>>
>> The API that OpenSSL appears to offer for determining what protocol
>> version is in use appears to be SSL_get_version().  This returns a
>> string like "SSLv2" or "TLSv1" (the documentation doesn't say anything
>> about TLSv1.1 or TLSv1.2 but *presumably* if you have a version of
>> OpenSSL that implements either of these protocols and one of them is
>> negotiated on a connection then SSL_get_version() will identify them in
>> its result).
>>
>> pyOpenSSL, however, does not expose this method.  So in order to get the
>> information you need you may need to contribute a binding for this
>> method to pyOpenSSL.
>>
>> Jean-Paul
>
> Hi Jean-Paul,
>
> Tnx very much for your answer. I've now ended up with what I think is a
> bit of a hack. I've consulted the wikipedia page on TLS :
>
> http://en.wikipedia.org/wiki/Transport_Layer_Security#Web_browsers
>
> and added some code that checks the browser version as reported un the
> user-agent header against the minimum version of major browsers that
> report to have TLS1.1 support both implemented and enabled by default.
> I'm not fully satisfied with this one, but unfortunately it seems to be
> the only viable option for my current project :-(
>

Hi Rob

Seeing that you are checking the UA header, I have a bit of information 
concerning UA detection code, which lead to me filing a bug report for 
nevow which stumbles over this problem

https://bugs.launchpad.net/nevow/+bug/1249946

As you can see from the link in bug report, IE11 is posing as many 
beasts, but in standard mode the UA string is

'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko'

HTH, Werner


From burak at nehbit.net  Mon Nov 11 12:49:30 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Mon, 11 Nov 2013 14:49:30 -0500
Subject: [Twisted-Python] Introducing Aether, a peer-to-peer,
 anonymous forums app built with Twisted
In-Reply-To: <52810AAE.3090107@thieprojects.ch>
References: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>
 <20131106143827.8349.1534318774.divmod.xquotient.371@top>
 <8af01e767be5317d016f6258bd46c7f7.squirrel@webmail.xs4all.nl>
 <52810AAE.3090107@thieprojects.ch>
Message-ID: <etPan.528134ca.7724c67e.5961@Buraks-MacBook-Pro.local>

Hi everyone,

I wanted to share with you the yearlong project I have been working on, which led me to discover Twisted besides many other things. It?s using Twisted for all peer-to-peer network connections. This also has led me to produce a Qt5 reactor for Twisted (anyone needs this, I can send, MIT)

The app is here: http://www.getaether.net

Aether is a desktop application that provides its users anonymous public spaces for discussion. It?s pretty close to the archetypal form (reddit / slashdot) with votes and else.

The networking backend is Twisted (AMP). The way distribution works is this: If an user upvotes a post, the user?s computer will start to distribute that post. When an user receives a post, if the post received does not have at least ten (an arbitrary number) copies in computers around him, it will mark the post as under extinction danger, and start to distribute it.?

The number of upvotes are the number of times an user sees the same post in other computers. The posts are then lined up according to their upvotes. That?s mostly all there is to it. Oh and it?s encrypted to teeth :). (TLS_RSA_WITH_AES_256_CBC_SHA, 2048 bit RSA keys)

The code is here:

https://github.com/nehbit/aether-public/

Since this is the first project I have built using Twisted (and the reason I discovered & learned it in the first place), I wanted to share it with you. I?d welcome all critique / comments?this is a long term project, and I?m just starting out. Critique on Twisted code, (which is all over the place) is especially welcomed.

I have sought help from some of you before, and all the reply I have received had been unfailingly kind. So this is a collective thank?you for this mailing list and for the general Twisted / Python community, without which Aether would not exist.

Best,
Burak



On November 11, 2013 at 11:52:39 AM, Werner Thie (werner at thieprojects.ch) wrote:

On 11/10/13 10:45 PM, Rob Meijer wrote:  
> On Wed, November 6, 2013 15:38, exarkun at twistedmatrix.com wrote:  
>> On 11:43 am, rmeijer at xs4all.nl wrote:  
>>> I'm using twisted web for an https connection. At first I start with  
>>> creating and configuring a ssl.DefaultOpenSSLContextFactory derived  
>>> class  
>>> that disables SSLv2 and SSLv3. So (basically we're left with TLS1.0 and  
>>> up) and forces the use of a single strong (non RC4 but BEAST  
>>> vulnerable)  
>>> cipher.  
>>>  
>>> Than I have a http.HTTPFactory derived class with a 'buildProtocol'that  
>>> return a http.HTTPChannel derived object, that in turn returns a  
>>> http.Request derived object.  
>>>  
>>> Than reactor.listenSSL is invoked with both the SSL factory and the  
>>> HTTP  
>>> factory. Now my problem. I don't really understand how these two are  
>>> connected once the request handler gets invoked.  
>>>  
>>> What I would like to do is that I would want to allow TLS1.0 users to  
>>> use  
>>> the server, but only after explicitly agreeing that they understand the  
>>> risks involved with using an old BEAST vulnerable browser.  
>>>  
>>> Is there any way to retrieve info on what TLS version has been  
>>> negotiated  
>> >from within the HTTP request handler? I've been walking the 'self'  
>>> object  
>>> a bit, and self.transport.getHandle() seems to have some tls stuff like  
>>> 'get_cipher_list' and 'get_peer_certificate', but the simple TLS  
>>> version  
>>> number does not seem to be available.  
>>  
>> The object you get back from `self.transport.getHandle()` happens to be  
>> an object from pyOpenSSL - an instance of OpenSSL.SSL.Connection. While  
>> reading the following, though, bear in mind that `getHandle` doesn't  
>> make much of a promise about what it will return. Other transports may  
>> return something else and future versions of Twisted may change the  
>> result as well.  
>>  
>> The API that OpenSSL appears to offer for determining what protocol  
>> version is in use appears to be SSL_get_version(). This returns a  
>> string like "SSLv2" or "TLSv1" (the documentation doesn't say anything  
>> about TLSv1.1 or TLSv1.2 but *presumably* if you have a version of  
>> OpenSSL that implements either of these protocols and one of them is  
>> negotiated on a connection then SSL_get_version() will identify them in  
>> its result).  
>>  
>> pyOpenSSL, however, does not expose this method. So in order to get the  
>> information you need you may need to contribute a binding for this  
>> method to pyOpenSSL.  
>>  
>> Jean-Paul  
>  
> Hi Jean-Paul,  
>  
> Tnx very much for your answer. I've now ended up with what I think is a  
> bit of a hack. I've consulted the wikipedia page on TLS :  
>  
> http://en.wikipedia.org/wiki/Transport_Layer_Security#Web_browsers  
>  
> and added some code that checks the browser version as reported un the  
> user-agent header against the minimum version of major browsers that  
> report to have TLS1.1 support both implemented and enabled by default.  
> I'm not fully satisfied with this one, but unfortunately it seems to be  
> the only viable option for my current project :-(  
>  

Hi Rob  

Seeing that you are checking the UA header, I have a bit of information  
concerning UA detection code, which lead to me filing a bug report for  
nevow which stumbles over this problem  

https://bugs.launchpad.net/nevow/+bug/1249946  

As you can see from the link in bug report, IE11 is posing as many  
beasts, but in standard mode the UA string is  

'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko'  

HTH, Werner  

_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131111/2fa3fb21/attachment.html>

From glyph at twistedmatrix.com  Mon Nov 11 17:13:35 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 11 Nov 2013 16:13:35 -0800
Subject: [Twisted-Python] Introducing Aether, a peer-to-peer,
	anonymous forums app built with Twisted
In-Reply-To: <etPan.528134ca.7724c67e.5961@Buraks-MacBook-Pro.local>
References: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>
 <20131106143827.8349.1534318774.divmod.xquotient.371@top>
 <8af01e767be5317d016f6258bd46c7f7.squirrel@webmail.xs4all.nl>
 <52810AAE.3090107@thieprojects.ch>
 <etPan.528134ca.7724c67e.5961@Buraks-MacBook-Pro.local>
Message-ID: <C2ABC870-9DEB-49D9-9C6F-6ADC918CEC15@twistedmatrix.com>


On Nov 11, 2013, at 11:49 AM, Burak Nehbit <burak at nehbit.net> wrote:

> Hi everyone,
> 
> I wanted to share with you the yearlong project I have been working on, which led me to discover Twisted besides many other things. It?s using Twisted for all peer-to-peer network connections. This also has led me to produce a Qt5 reactor for Twisted (anyone needs this, I can send, MIT)

Hi Burak,

Thanks very much for choosing to use Twisted for this project!  It looks interesting :).  And thanks again for your kind words about the community :).

It looks like this is definitely making some significant and interesting security-related claims.  Do you have plans for getting it audited?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131111/dba35509/attachment.html>

From burak at nehbit.net  Mon Nov 11 17:31:05 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Mon, 11 Nov 2013 19:31:05 -0500
Subject: [Twisted-Python] Introducing Aether, a peer-to-peer,
 anonymous forums app built with Twisted
In-Reply-To: <C2ABC870-9DEB-49D9-9C6F-6ADC918CEC15@twistedmatrix.com>
References: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>
 <20131106143827.8349.1534318774.divmod.xquotient.371@top>
 <8af01e767be5317d016f6258bd46c7f7.squirrel@webmail.xs4all.nl>
 <52810AAE.3090107@thieprojects.ch>
 <etPan.528134ca.7724c67e.5961@Buraks-MacBook-Pro.local>
 <C2ABC870-9DEB-49D9-9C6F-6ADC918CEC15@twistedmatrix.com>
Message-ID: <etPan.528176c9.4f4ef005.5961@Buraks-MacBook-Pro.local>

Hi Glyph,

It looks like this is definitely making some significant and interesting security-related claims. ?Do you have plans for getting it audited?

I?m making more of anonymity claims and less of security. It is secure only in peer?to?peer connections, in that the connection between peers are encrypted. But all data that is distributed on Aether is public, so there is no secrecy, at all. I do not authenticate people either. The only reason the connection between peers are encrypted is it being a defence against a global passive adversary. So the the example goes, I do protect my users from the eye of Mordor (dragnet surveillance) but if Nazguls are in your home (your computer is seized), I can?t save you from that. I do in fact offer some protection for the latter case, too, but I?m less sure of its extent, so I am not touting it until I?m more confident.?

Protection against a dragnet is rather obvious: encrypt everything. Unless you?re a special target, you?ll be safe.?

Protection against seizure is a little bit more complex: I am not committing any information into the database* that can reduce your plausible deniability. So at the point you post an item, you?re no different than another sharer of that item both to the network and to your computer.

* I actually do commit one piece of information: If a post is created by the local user, it will have a flag describing it to be so, so the user?s client can notify the user of replies to that post. I am planning to convert this feature to ?subscribe to posts or threads? and remove the flag. So even the local computer won?t have any information about whether the post was received from the network or created locally, but the user will still continue to receive replies as he is subscribed to that post.

Audit? I would love to. I was talking to Laurens about this a few weeks ago for the security, but there hasn?t been a formal audit. I don?t have the resources to pay for that, unfortunately. If anyone wants to do it, I?d be glad to help.?

Best,
Burak



On November 11, 2013 at 7:16:00 PM, Glyph (glyph at twistedmatrix.com) wrote:


On Nov 11, 2013, at 11:49 AM, Burak Nehbit <burak at nehbit.net> wrote:

Hi everyone,

I wanted to share with you the yearlong project I have been working on, which led me to discover Twisted besides many other things. It?s using Twisted for all peer-to-peer network connections. This also has led me to produce a Qt5 reactor for Twisted (anyone needs this, I can send, MIT)

Hi Burak,

Thanks very much for choosing to use Twisted for this project! ?It looks interesting :). ?And thanks again for your kind words about the community :).

It looks like this is definitely making some significant and interesting security-related claims. ?Do you have plans for getting it audited?

-glyph

_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131111/c9a2eb27/attachment-0001.html>

From tobias.oberstein at tavendo.de  Tue Nov 12 12:48:04 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 12 Nov 2013 11:48:04 -0800
Subject: [Twisted-Python] FreeBSD buildslaves: change proposal
Message-ID: <634914A010D0B943A035D226786325D4446A0D962E@EXVMBX020-12.exch020.serverdata.net>

Hi,

we (Tavendo) currently operate 2 Twisted/FreeBSD buildslaves:

a) FreeBSD 8.2, i386 with 1 builder (CPy 2.7)
=> part of the list of "officially supported" builders

b) FreeBSD 9.1, amd64 with 2 builders (CPy 2.7 and PyPy)
=> only listed under "unsupported"

We would like to change that into the following:

c) one FreeBSD amd64 host with 3 builders

c1) CPy 2.7 (supported)
c2) PyPy 2.2 (supported)
c3) PyPy Nightly (unsupported)

Here are some reasons:

- FreeBSD 8.2 is very old (read, unsupported) now, FreeBSD 10 is around the corner, and 9.2 the current official stable release
- i386 is .. getting obscure. Does _anybody_ run FreeBSD i386 anymore?
- there are ongoing workarounds to support that thing .. time that could be spent better
- we want to run a PyPy slave for the PyPy project on that same host (this allows to produce the PyPy/Nightlies .. on a daily basis .. and immediately run Twisted trials against that)
- someone needs to run a PyPy slave anyway .. the current one is broken

- the current Twisted 13.2 has run 100% clean on above b) (CPy) : http://buildbot.twistedmatrix.com/builders/freebsd-9.1-amd64-python2.7/builds/198

So, I'd like to ask Twisted developers if above makes sense, and you would support this way forward.

I've been in contact with PyPy developers, and there seems to be clear interest in improving support for both Twisted and FreeBSD (hence the cross-post).

In general, Tavendo is committed to contribute time & material making Twisted + CPy|PyPy + FreeBSD a combination fully (even better) supported and actually first-class in terms of features, compatibility and performance.

We think < Twisted + PyPy + FreeBSD > in particular has great potential and can provide an extremely powerful stack:

"The _complete_ power to serve."

.. stealing from FreeBSD's motto here - heh, and sorry the the marketing blurb .. I just couldn't resist;)
Thanks!

/Tobias

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131112/28f5334f/attachment.html>

From sank.daniel at gmail.com  Tue Nov 12 13:18:12 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Tue, 12 Nov 2013 12:18:12 -0800
Subject: [Twisted-Python] Is a Viewable Cacheable a good idea?
Message-ID: <CAKN9TDJ7fSifOaWyLFg4Rde9ymW_gbwP_XFAegnxHF8-or9cdA@mail.gmail.com>

Suppose I want to make a networked stockroom program with perspective
broker. We have a user side client object,

class Client(pb.Referenceable):
    def connect(self):
        # host, port, factory, and credentials come from elsewhere
        reactor.connectTCP(host, port, factory)
        d = self.factory.login(credentials, self)
        d.addCallback(self.connected)

    def connected(self, perspective):
        if perspective:
            self.perspective = perspective

and a "corresponding" server side User,

class User(pb.Avatar):
    def __init__(self, name, server, mind):
        self.name = name
        self.server = server
        self.client = mind #This is a remote reference to a Client

    def logout(self):
        ...logic...

We have the IRealm implementer,

@implementer(portal.IRealm)
class Server(object):
    """I manage games and produce Avatars"""
    def __init__(self, loggingPath):
        self.users = {}
        self.stockrooms = set()

    def requestAvatar(self, avatarId, mind, *interfaces):
        assert pb.IPerspective in interfaces
        user = self.users.setdefault(avatarId, User(avatarId, self, mind))
        return pb.IPerspective, user, user.logout

and finally we have the Stockroom

class Stockroom(object):
    ...logic...

Now I'd like for my Clients to be able to remove/add items to the
stockroom. Using only the code above I'd have to add perspective_*
methods to the User. These methods would direct the Client's intent to
the appropriate Stockroom. Changes made to the Stockroom would then
have to be announced to any interested Clients by invoking the
appropriate Users' mind property.

This seems very awkward. I'd rather just have the Stockrooms be
Viewable so that Clients can invoke methods on them directly. If the
Stockroom were _also_ Cacheable then changes on a Stockroom would
automatically propagate to the client process.

Is simultaneously sub-classing Viewable and Cacheable a good idea?

Am I thinking about this properly?

Regards and thanks in advance,
Daniel Sank

-- 
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899


From tobias.oberstein at tavendo.de  Tue Nov 12 14:00:56 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 12 Nov 2013 13:00:56 -0800
Subject: [Twisted-Python] WG: FreeBSD buildslaves: change proposal
Message-ID: <634914A010D0B943A035D226786325D4446A0D96BF@EXVMBX020-12.exch020.serverdata.net>

somehow the Twisted list rejects my posts lately;(

Von: Tobias Oberstein 
Gesendet: Dienstag, 12. November 2013 20:48
An: Twisted general discussion (twisted-python at twistedmatrix.com)
Cc: pypy-dev at python.org
Betreff: FreeBSD buildslaves: change proposal

Hi,

we (Tavendo) currently operate 2 Twisted/FreeBSD buildslaves:

a) FreeBSD 8.2, i386 with 1 builder (CPy 2.7)
=> part of the list of "officially supported" builders

b) FreeBSD 9.1, amd64 with 2 builders (CPy 2.7 and PyPy)
=> only listed under "unsupported"

We would like to change that into the following:

c) one FreeBSD amd64 host with 3 builders

c1) CPy 2.7 (supported)
c2) PyPy 2.2 (supported)
c3) PyPy Nightly (unsupported)

Here are some reasons:

- FreeBSD 8.2 is very old (read, unsupported) now, FreeBSD 10 is around the corner, and 9.2 the current official stable release
- i386 is .. getting obscure. Does _anybody_ run FreeBSD i386 anymore?
- there are ongoing workarounds to support that thing .. time that could be spent better
- we want to run a PyPy slave for the PyPy project on that same host (this allows to produce the PyPy/Nightlies .. on a daily basis .. and immediately run Twisted trials against that)
- someone needs to run a PyPy slave anyway .. the current one is broken
- the current Twisted 13.2 has run 100% clean on above b) (CPy) : http://buildbot.twistedmatrix.com/builders/freebsd-9.1-amd64-python2.7/builds/198

So, I'd like to ask Twisted developers if above makes sense, and you would support this way forward.

I've been in contact with PyPy developers, and there seems to be clear interest in improving support for both Twisted and FreeBSD (hence the cross-post).

In general, Tavendo is committed to contribute time & material making Twisted + CPy|PyPy + FreeBSD a combination fully (even better) supported and actually first-class in terms of features, compatibility and performance.

We think < Twisted + PyPy + FreeBSD > in particular has great potential and can provide an extremely powerful stack:

"The _complete_ power to serve."

.. stealing from FreeBSD's motto here - heh, and sorry the the marketing blurb .. I just couldn't resist;)

Thanks!

/Tobias



From jonas.brunsgaard at gmail.com  Wed Nov 13 04:27:50 2013
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Wed, 13 Nov 2013 12:27:50 +0100
Subject: [Twisted-Python] DirtyReactorAggregateError: Reactor was unclean. -
	What to do?
Message-ID: <CACVXvXqstzDb4504ZuGtWd3QZ8EEsjmhRKQiYUZ+p_M+4VPGAA@mail.gmail.com>

Dear list

I may need som advise to get som testing wokring.

I have a server for service a, which creates a client for service b to get
som data:

 class StateHandler(object):
    implements(State.Iface)

    def __init__(self):
        #do stuff
        self.loaddata()

     @inlineCallbacks
    def loaddata(self):
        try:
            conn = yield ClientCreator(
                reactor,
                TTwisted.ThriftClientProtocol,
                dsClient,

TBinaryProtocol.TBinaryProtocolFactory()).connectTCP("10.70.10.30", 7246)
                data = yield conn.client.getAllAuthenticationData()
            #process data
            conn.transport.loseConnection()

I use trail to test this service, code is bolow:

class TestStateStore(unittest.TestCase):

     @defer.inlineCallbacks
    def setUp(self):
        self.handler = StateHandler()
        self.processor = State.Processor(self.handler)
        self.pfactory = TBinaryProtocol.TBinaryProtocolFactory()
        self.server = reactor.listenTCP(
            0,
            TTwisted.ThriftServerFactory(self.processor, self.pfactory),
            interface="127.0.0.1")
        self.portNo = self.server.getHost().port
        self.txclient = yield ClientCreator(
            reactor,
             TTwisted.ThriftClientProtocol,
            State.Client,
            self.pfactory).connectTCP("127.0.0.1", self.portNo)
        self.client = self.txclient.client

    @defer.inlineCallbacks
    def tearDown(self):
        self.txclient.transport.loseConnection()
        yield self.server.stopListening()


    def test_dummy(self):
        self.assertEquals(True, True)

When I run test it fails with the following error message.

ERROR]
Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
<DelayedCall 0x29d99e0 [29.9931809902s] called=0 cancelled=0
Client.failIfNotConnected(TimeoutError('',))>

oc.tests.test_state_service.TestStateStore.test_dummy
===============================================================================
[ERROR]
Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<<class 'twisted.internet.tcp.Client'> to ('10.70.10.30', 7246) at 29d2c10>

oc.tests.test_state_service.TestStateStore.test_dummy
-------------------------------------------------------------------------------
Ran 1 tests in 0.010s

To me it seems like Trail shuts down the reactor and throws an error, due
to the fact that the reactor is unclean, because the server client is still
active, or at least not cleaned up. How do I work around this problem, any
help is very appreciated.

--
Jonas Brunsgaard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131113/9ded9b27/attachment-0001.html>

From grindizer at gmail.com  Wed Nov 13 04:32:11 2013
From: grindizer at gmail.com (Flint)
Date: Wed, 13 Nov 2013 12:32:11 +0100
Subject: [Twisted-Python] Is a Viewable Cacheable a good idea?
In-Reply-To: <CAKN9TDJ7fSifOaWyLFg4Rde9ymW_gbwP_XFAegnxHF8-or9cdA@mail.gmail.com>
References: <CAKN9TDJ7fSifOaWyLFg4Rde9ymW_gbwP_XFAegnxHF8-or9cdA@mail.gmail.com>
Message-ID: <CALpq1pYg_nY8B5sW3Jv5HDS4vSzYqpFUAWjLKHpoQ0AvGviLeA@mail.gmail.com>

Hi,

>> Is simultaneously sub-classing Viewable and Cacheable a good idea?
I am not sure it would work, at least not as you expect.
Viewable and Cacheable both implement a different version of jellyFor
(which will decides how object is seen on the other side of the connection).
If you sub-class both of them your resulting class will act either as a
cacheable or as a viewable depending on how you sub-class them -- at least
for the serialization part.

For your problem, It seems to me that you're trying to do 2 things:
1 - manage a server side object of stockroom(s)
2 - keep a copy of that object(s) synchronized in clients.

So may be (IMHO) you could have one viewable object acting like a
stockroom-manager that clients will (remote)call to make changes on the
server side stockroom-object,
And a cacheable stockroom-object, that you will sync with client.

That said, note that, there is no magic in the sync process when using
cacheable, you will have to propagate the change made to the cacheable
object yourself, by implementing the observe_ methods.
And when you make any changes to the server copy you will have to call
those observe_ methods on all clients, just as you said you would do in
your example.

Another option would be to stockroom object with copyable items and
implement getter method in the stockroom-manager, so clients would be able
to query only data that they need, when they need it, and then do not fire
all the sync stuff each time your stockroom is updates.
Besides cacheable object are said to be used for big object that do not
change frequently, which is not the case of your stockroom I guess.

Hope this help.
--
Nacim.






2013/11/12 Daniel Sank <sank.daniel at gmail.com>

> Suppose I want to make a networked stockroom program with perspective
> broker. We have a user side client object,
>
> class Client(pb.Referenceable):
>     def connect(self):
>         # host, port, factory, and credentials come from elsewhere
>         reactor.connectTCP(host, port, factory)
>         d = self.factory.login(credentials, self)
>         d.addCallback(self.connected)
>
>     def connected(self, perspective):
>         if perspective:
>             self.perspective = perspective
>
> and a "corresponding" server side User,
>
> class User(pb.Avatar):
>     def __init__(self, name, server, mind):
>         self.name = name
>         self.server = server
>         self.client = mind #This is a remote reference to a Client
>
>     def logout(self):
>         ...logic...
>
> We have the IRealm implementer,
>
> @implementer(portal.IRealm)
> class Server(object):
>     """I manage games and produce Avatars"""
>     def __init__(self, loggingPath):
>         self.users = {}
>         self.stockrooms = set()
>
>     def requestAvatar(self, avatarId, mind, *interfaces):
>         assert pb.IPerspective in interfaces
>         user = self.users.setdefault(avatarId, User(avatarId, self, mind))
>         return pb.IPerspective, user, user.logout
>
> and finally we have the Stockroom
>
> class Stockroom(object):
>     ...logic...
>
> Now I'd like for my Clients to be able to remove/add items to the
> stockroom. Using only the code above I'd have to add perspective_*
> methods to the User. These methods would direct the Client's intent to
> the appropriate Stockroom. Changes made to the Stockroom would then
> have to be announced to any interested Clients by invoking the
> appropriate Users' mind property.
>
> This seems very awkward. I'd rather just have the Stockrooms be
> Viewable so that Clients can invoke methods on them directly. If the
> Stockroom were _also_ Cacheable then changes on a Stockroom would
> automatically propagate to the client process.
>
> Is simultaneously sub-classing Viewable and Cacheable a good idea?
>
> Am I thinking about this properly?
>
> Regards and thanks in advance,
> Daniel Sank
>
> --
> Department of Physics
> Broida Hall
> University of California
> Santa Barbara, CA 93117
> (805)893-3899
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131113/cceb234c/attachment.html>

From clayton_hd at hotmail.com  Fri Nov 15 12:38:00 2013
From: clayton_hd at hotmail.com (Clayton Vicente)
Date: Fri, 15 Nov 2013 20:38:00 +0100
Subject: [Twisted-Python] =?iso-8859-1?q?Xbmc_Don=B4t_close_after_run_a_sc?=
 =?iso-8859-1?q?ript_with_Twisted?=
Message-ID: <SNT147-W4291FAA3C10EBA98988297FEFB0@phx.gbl>

Hi guys, i start to play with Twisted. My main intention is to create a add-on for run in a Raspberry Pi (Raspbmc). For now almost every thing is working fine.Here is the link of the add-onhttps://dl.dropboxusercontent.com/u/89557567/script.cavplustcp-0.1.4.zipMy only problem is that the Xbmc (running in a Raspbmc) never close if i have Twisted running.In the default.py i have a function that will run after the Xbmc abort request. def _killConnections(self):        if(self.server1):           self.server1.stopListening()        if(self.server2):           self.server2.stopListening()        if(self.client1):           self.client1.disconnect()        if(self.client2):           self.client2.disconnect()        protocol.transport.loseConnection()         xbmc.log(msg="reactor stop")              reactor.stop()I tested in a Windows 7 and works fine, the script close the connections and then the Xbmc close. If i remove this function the Xbmc will never close.The problem is with this script running in a linux OS. The Xbmc try to close the script, but don?t work, so the Xbmc will freeze.Can you guys help me ?ThanksRegardsClayton
 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131115/bb7817b2/attachment.html>

From twisted at tomvn.com  Sat Nov 16 07:09:48 2013
From: twisted at tomvn.com (Tom van Neerijnen)
Date: Sat, 16 Nov 2013 14:09:48 +0000
Subject: [Twisted-Python] Returning a deferred from buildProtocol
	t.i.p.Factory
Message-ID: <CAMwy1tyGTDZCoPYpQOPeqnSA-g9qC0A=+nLE2UYCs13_C_QmZA@mail.gmail.com>

Hi all

I'm building a simple TCP load balancer based on a code snippet from Glyph
on SO:
http://stackoverflow.com/questions/4096061/general-question-regarding-wether-or-not-use-twisted-in-tcp-proxy-project

It's served me well but I can't work out how to convert Glyphs round robin
retrieval of the server endpoint into an async balancing decision in the
buildProtocol method of the Factory. If I return a deferred here it fails
with an AttributeError: Deferred instance has no attribute 'makeConnection'.

Currently I'm working around this by running a separate management loop
that periodically updates a dictionary with all the data necessary to make
my routing decision so that I can do it without a deferred. This worries me
because I may be making my decision on slightly stale data and I'd really
like this to be a real time decision as the connection comes in. Does
anyone have a clever way of doing this?

An example is below. The hashed out buildProtocol is a synchronous decision
which works. Thanks in advance!

from twisted.internet.protocol import Factory
from twisted.protocols.portforward import ProxyFactory
from twisted.internet import reactor, defer
import random

from twisted.python import log
import sys
log.startLogging(sys.stderr)

local_ports = set([1024, 1025])

def port_routing_decision_sync():
    return random.choice(list(local_ports))

def port_routing_decision_async():
    d = defer.Deferred()
    reactor.callLater(1, d.callback, port_routing_decision_sync())
    return d

class Balancer(Factory):
    # def buildProtocol(self, addr):
    #     port = port_routing_decision_sync()
    #     print "connecting to local port {}".format(port)
    #     return ProxyFactory("127.0.0.1", port).buildProtocol(addr)

    @defer.inlineCallbacks
    def buildProtocol(self, addr):
        port = yield port_routing_decision_async()
        print "connecting to local port {}".format(port)
        defer.returnValue(ProxyFactory("127.0.0.1",
port).buildProtocol(addr))

def main():
    factory = Balancer()
    reactor.listenTCP(5678, factory)
    reactor.run()

if __name__ == "__main__":
    main()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131116/f2c9eadb/attachment.html>

From ldanielburr at me.com  Sat Nov 16 09:21:53 2013
From: ldanielburr at me.com (L. Daniel Burr)
Date: Sat, 16 Nov 2013 10:21:53 -0600
Subject: [Twisted-Python] Returning a deferred from
	buildProtocol	t.i.p.Factory
In-Reply-To: <CAMwy1tyGTDZCoPYpQOPeqnSA-g9qC0A=+nLE2UYCs13_C_QmZA@mail.gmail.com>
References: <CAMwy1tyGTDZCoPYpQOPeqnSA-g9qC0A=+nLE2UYCs13_C_QmZA@mail.gmail.com>
Message-ID: <52879BA1.1010201@me.com>

Hi Tom,

On 11/16/13 8:09 AM, Tom van Neerijnen wrote:
> Hi all
>
> I'm building a simple TCP load balancer based on a code snippet from 
> Glyph on SO: 
> http://stackoverflow.com/questions/4096061/general-question-regarding-wether-or-not-use-twisted-in-tcp-proxy-project
>
> It's served me well but I can't work out how to convert Glyphs round 
> robin retrieval of the server endpoint into an async balancing 
> decision in the buildProtocol method of the Factory. If I return a 
> deferred here it fails with an AttributeError: Deferred instance has 
> no attribute 'makeConnection'.
[SNIP]

Have you considered using https://pypi.python.org/pypi/txLoadBalancer as 
the basis for your load-balancer?  It supports random, round-robin, 
least-connections, and weighted, so perhaps it would suit your needs.

Hope this helps,

L. Daniel Burr


From dstainton415 at gmail.com  Sat Nov 16 11:14:59 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 16 Nov 2013 10:14:59 -0800
Subject: [Twisted-Python] Ticket #1330 - Socks V5 functionality
Message-ID: <CAFN1edrNd-Q=BgOyqseWonb_WsHNx+ejJqAKWSzym4ax8p4SVQ@mail.gmail.com>

Hi, I'd like to help out and write unit tests for the Socks v5 code in
this ticket:
https://twistedmatrix.com/trac/ticket/1330

Should I write something very similar to this?? ::
http://twistedmatrix.com/trac/browser/trunk/twisted/test/test_socks.py

My goal is getting socksv5 client and server code merged to mainline
Twisted with unit tests.

Cheers,

David


From ltaylor.volks at gmail.com  Sat Nov 16 12:05:11 2013
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Sat, 16 Nov 2013 12:05:11 -0700
Subject: [Twisted-Python] Returning a deferred from buildProtocol
	t.i.p.Factory
In-Reply-To: <CAMwy1tyGTDZCoPYpQOPeqnSA-g9qC0A=+nLE2UYCs13_C_QmZA@mail.gmail.com>
References: <CAMwy1tyGTDZCoPYpQOPeqnSA-g9qC0A=+nLE2UYCs13_C_QmZA@mail.gmail.com>
Message-ID: <979A680E-DD89-4D9B-9AE8-F3910F74C18B@gmail.com>


On Nov 16, 2013, at 7:09 AM, Tom van Neerijnen wrote:

> Hi all
> 
> I'm building a simple TCP load balancer based on a code snippet from Glyph on SO: http://stackoverflow.com/questions/4096061/general-question-regarding-wether-or-not-use-twisted-in-tcp-proxy-project
> 
> It's served me well but I can't work out how to convert Glyphs round robin retrieval of the server endpoint into an async balancing decision in the buildProtocol method of the Factory. If I return a deferred here it fails with an AttributeError: Deferred instance has no attribute 'makeConnection'.
> 
> Currently I'm working around this by running a separate management loop that periodically updates a dictionary with all the data necessary to make my routing decision so that I can do it without a deferred. This worries me because I may be making my decision on slightly stale data and I'd really like this to be a real time decision as the connection comes in. Does anyone have a clever way of doing this?
> 


Hi Tom,

One possibly unexpected aspect of using @inlineCallbacks is that the decorated function itself returns a Deferred. This is why you see the AttributeError...the machinery calling buildProtocol expects an IProtocol instance (or None), and the function is returning a Deferred.   `defer.returnValue()` is provided to the callback on that Deferred, not as a direct return value from the decorated function.

If you want to make the routing decision when the client connects, then you could push the decision-making process down into the Protocol itself.

Here's a quick mockup overriding connectionMade in a ProxyServer protocol subclass. It calls the factory routing function (which may or may not return a deferred), and connects the proxy once the decision has been made.


from twisted.internet.protocol import Factory
from twisted.protocols.portforward import ProxyServer


class Balancer(Factory):
    protocol = RoutingProxyServer
    routing_func = port_routing_decision_async


class RoutingProxyServer(ProxyServer):

    def connectionMade(self):
        # Don't read anything from the connecting client until we have
        # somewhere to send it to.
        self.transport.pauseProducing()

        client = self.clientProtocolFactory()
        client.setServer(self)
        
        if self.reactor is None:
            from twisted.internet import reactor
            self.reactor = reactor
        
        def connectProxy(host, port):
            self.reactor.connectTCP(host, port, client)

        d = maybeDeferred(self.factory.routing_func)
        d.addCallback(connectProxy)
        d.addErrback(log.err)


Lucas





> An example is below. The hashed out buildProtocol is a synchronous decision which works. Thanks in advance!
> 
> from twisted.internet.protocol import Factory
> from twisted.protocols.portforward import ProxyFactory
> from twisted.internet import reactor, defer
> import random
> 
> from twisted.python import log
> import sys
> log.startLogging(sys.stderr)
> 
> local_ports = set([1024, 1025])
> 
> def port_routing_decision_sync():
>     return random.choice(list(local_ports))
> 
> def port_routing_decision_async():
>     d = defer.Deferred()
>     reactor.callLater(1, d.callback, port_routing_decision_sync())
>     return d
> 
> class Balancer(Factory):
>     # def buildProtocol(self, addr):
>     #     port = port_routing_decision_sync()
>     #     print "connecting to local port {}".format(port)
>     #     return ProxyFactory("127.0.0.1", port).buildProtocol(addr)
> 
>     @defer.inlineCallbacks
>     def buildProtocol(self, addr):
>         port = yield port_routing_decision_async()
>         print "connecting to local port {}".format(port)
>         defer.returnValue(ProxyFactory("127.0.0.1", port).buildProtocol(addr))
> 
> def main():
>     factory = Balancer()
>     reactor.listenTCP(5678, factory)
>     reactor.run()
> 
> if __name__ == "__main__":
>     main()

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131116/b6f70e6c/attachment.html>

From exarkun at twistedmatrix.com  Sat Nov 16 12:44:34 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 16 Nov 2013 19:44:34 -0000
Subject: [Twisted-Python] Ticket #1330 - Socks V5 functionality
In-Reply-To: <CAFN1edrNd-Q=BgOyqseWonb_WsHNx+ejJqAKWSzym4ax8p4SVQ@mail.gmail.com>
References: <CAFN1edrNd-Q=BgOyqseWonb_WsHNx+ejJqAKWSzym4ax8p4SVQ@mail.gmail.com>
Message-ID: <20131116194434.15706.1987930455.divmod.xquotient.27@top>

On 06:14 pm, dstainton415 at gmail.com wrote:
>Hi, I'd like to help out and write unit tests for the Socks v5 code in
>this ticket:
>https://twistedmatrix.com/trac/ticket/1330
>
>Should I write something very similar to this?? ::
>http://twistedmatrix.com/trac/browser/trunk/twisted/test/test_socks.py
>
>My goal is getting socksv5 client and server code merged to mainline
>Twisted with unit tests.


twisted/test/test_socks.py is a bad example of a test suite.  Here are 
the things about it you should not emulate:

  * It has documentation that is far from complete.  Documentation is 
just as important in unit tests as elsewhere.  In particular, 
documenting the intent of every test method is critical otherwise the 
test suite is very difficult to maintain.

  * It exercises too much code in each test method.  Well written test 
methods do a single very simple thing.  A good rule of thumb is that 
there should only be one `TestCase.assert...` method call in each test 
method.

  * It uses some `TestCase.assert...` methods which are deprecated or 
soon to be deprecated.  `assert_` is the main offender here.

  * It doesn't completely cover the implementation (probably because the 
implementation wasn't developed test-driven).  You can achieve full test 
coverage without doing test-driven development but it takes more 
discipline.  I suggest doing a test-driven implementation of the SOCKSv5 
functionality you want (the easy approach to this is to start writing 
tests, then copy the *smallest* possible piece of the existing, untested 
implementation into your new implementation to make those tests pass; 
repeat until you have all of the desired functionality).

  * `StringTCPTransport` seems redundant.  `StringTransport` offers all 
of this functionality already.

  * Many names used in the module don't follow the Twisted name 
convention (most obviously, "under_scores" are used throughout rather 
than "camelCase").

  * Native strings are used to represent byte strings throughout.

  * The protocol interface is uniformly misused (it should call 
`makeConnection` not `connectionMade`)

Hope this helps,
Jean-Paul


From dstainton415 at gmail.com  Sat Nov 16 13:28:53 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 16 Nov 2013 12:28:53 -0800
Subject: [Twisted-Python] Ticket #1330 - Socks V5 functionality
In-Reply-To: <20131116194434.15706.1987930455.divmod.xquotient.27@top>
References: <CAFN1edrNd-Q=BgOyqseWonb_WsHNx+ejJqAKWSzym4ax8p4SVQ@mail.gmail.com>
 <20131116194434.15706.1987930455.divmod.xquotient.27@top>
Message-ID: <CAFN1edojXa93qJ52SCi8kYT+=HWmwT4TFNDhWV3VBTWtUsfrng@mail.gmail.com>

Hi Jean-Paul,

Thanks for all the info, observations about the existing code and for
the coding advice!

I think I should only implement the socks 5 server side
since txsocksx seems to have the client implementation covered.
Some of the Tor developers use it...

I'm not used to test driven development. I'll give it a try and
implement the SOCKSv5 server functionality...


Cheers!

David

On Sat, Nov 16, 2013 at 11:44 AM,  <exarkun at twistedmatrix.com> wrote:
> On 06:14 pm, dstainton415 at gmail.com wrote:
>>
>> Hi, I'd like to help out and write unit tests for the Socks v5 code in
>> this ticket:
>> https://twistedmatrix.com/trac/ticket/1330
>>
>> Should I write something very similar to this?? ::
>> http://twistedmatrix.com/trac/browser/trunk/twisted/test/test_socks.py
>>
>> My goal is getting socksv5 client and server code merged to mainline
>> Twisted with unit tests.
>
>
>
> twisted/test/test_socks.py is a bad example of a test suite.  Here are the
> things about it you should not emulate:
>
>  * It has documentation that is far from complete.  Documentation is just as
> important in unit tests as elsewhere.  In particular, documenting the intent
> of every test method is critical otherwise the test suite is very difficult
> to maintain.
>
>  * It exercises too much code in each test method.  Well written test
> methods do a single very simple thing.  A good rule of thumb is that there
> should only be one `TestCase.assert...` method call in each test method.
>
>  * It uses some `TestCase.assert...` methods which are deprecated or soon to
> be deprecated.  `assert_` is the main offender here.
>
>  * It doesn't completely cover the implementation (probably because the
> implementation wasn't developed test-driven).  You can achieve full test
> coverage without doing test-driven development but it takes more discipline.
> I suggest doing a test-driven implementation of the SOCKSv5 functionality
> you want (the easy approach to this is to start writing tests, then copy the
> *smallest* possible piece of the existing, untested implementation into your
> new implementation to make those tests pass; repeat until you have all of
> the desired functionality).
>
>  * `StringTCPTransport` seems redundant.  `StringTransport` offers all of
> this functionality already.
>
>  * Many names used in the module don't follow the Twisted name convention
> (most obviously, "under_scores" are used throughout rather than
> "camelCase").
>
>  * Native strings are used to represent byte strings throughout.
>
>  * The protocol interface is uniformly misused (it should call
> `makeConnection` not `connectionMade`)
>
> Hope this helps,
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From trac at twistedmatrix.com  Sun Nov 17 00:05:17 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 Nov 2013 07:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1384671917.91.7587235641305290891@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131117/6c5385b5/attachment-0001.html>

From yangyouxiu at gmail.com  Sun Nov 17 02:19:20 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Sun, 17 Nov 2013 17:19:20 +0800
Subject: [Twisted-Python] how to change an qt4 applicaion using twisted?
Message-ID: <201311171718460284357@gmail.com>


Hi,all?
I have to change an QT application to client-server model, and i found twisted and qt4 reactor. But i don't know where to start? how should i do to split the qt application? what's the step. as for the server, what should i 
initialize?
thanks all.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131117/7256f5fb/attachment.html>

From _ at lvh.io  Sun Nov 17 02:57:23 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sun, 17 Nov 2013 10:57:23 +0100
Subject: [Twisted-Python] how to change an qt4 applicaion using twisted?
In-Reply-To: <201311171718460284357@gmail.com>
References: <201311171718460284357@gmail.com>
Message-ID: <CAE_Hg6ZdiSTdYCLKcY_r85T-4pkzfUMH0AZfouY0EtRfFR+sjg@mail.gmail.com>

Hi yangyouxiu,


Like Twisted, Qt (and almost all GUI toolkits) work on a single thread,
evented mechanism, with an event loop at its core. Qt4Reactor, I believe,
just merges these two loops into one loop.

The documentation for Qt4Reactor should tell you how to do that. Presumably
there's a reactor.install() somewhere :)


good luck
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131117/a63c54c1/attachment.html>

From yangyouxiu at gmail.com  Sun Nov 17 03:10:30 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Sun, 17 Nov 2013 18:10:30 +0800
Subject: [Twisted-Python] how to change an qt4 applicaion using twisted?
References: <201311171718460284357@gmail.com>, 
 <CAE_Hg6ZdiSTdYCLKcY_r85T-4pkzfUMH0AZfouY0EtRfFR+sjg@mail.gmail.com>
Message-ID: <2013111718102654081815@gmail.com>

Thank you very much.

Is it reasonable to bulid only one protocol to deal with datas tranports between client and server ? If in this way, i believe i have to write lots of case to deal with the message, such as to call differnent method,it's impressive.
Is there any suggestions?




???
??

From: Laurens Van Houtven
Date: 2013-11-17 17:57
To: Twisted general discussion
Subject: Re: [Twisted-Python] how to change an qt4 applicaion using twisted?
Hi yangyouxiu,



Like Twisted, Qt (and almost all GUI toolkits) work on a single thread, evented mechanism, with an event loop at its core. Qt4Reactor, I believe, just merges these two loops into one loop.


The documentation for Qt4Reactor should tell you how to do that. Presumably there's a reactor.install() somewhere :)



good luck
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131117/f771426c/attachment.html>

From _ at lvh.io  Sun Nov 17 05:34:14 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sun, 17 Nov 2013 13:34:14 +0100
Subject: [Twisted-Python] how to change an qt4 applicaion using twisted?
In-Reply-To: <2013111718102654081815@gmail.com>
References: <201311171718460284357@gmail.com>
 <CAE_Hg6ZdiSTdYCLKcY_r85T-4pkzfUMH0AZfouY0EtRfFR+sjg@mail.gmail.com>
 <2013111718102654081815@gmail.com>
Message-ID: <CAE_Hg6YuYxHGNKCet14Jz3QggC=pXYfdp8O7=Ox+3Vy7JUFfsA@mail.gmail.com>

On Sun, Nov 17, 2013 at 11:10 AM, yangyouxiu <yangyouxiu at gmail.com> wrote:

>  Thank you very much.
>
> Is it reasonable to bulid only one protocol to deal with datas tranports
> between client and server ? If in this way, i believe i have to write lots
> of case to deal with the message, such as to call differnent method,it's
> impressive.
> Is there any suggestions?
>

It might be. For simple client<->server interactions using messages, it may
be a much better idea to use some existing machinery instead. Many APIs use
REST. Twisted provides the tools to do REST, but it also provides other
(IMHO better) mechanisms. For example: AMP is a message-based asynchronous
protocol. Alternatively, twisted provides PB, which allows you to share
objects over the wire.

If you like the mental model of a client and a server sending messages to
each other, AMP is probably your thing :)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131117/095312d3/attachment.html>

From ayik at freebsd.or.id  Sun Nov 17 08:43:48 2013
From: ayik at freebsd.or.id (Sayid Munawar)
Date: Sun, 17 Nov 2013 22:43:48 +0700
Subject: [Twisted-Python] question : use existing tac file with tap.
In-Reply-To: <72e53e6792b13a1ad0c9b1dcbde91145.squirrel@localhost>
References: <72e53e6792b13a1ad0c9b1dcbde91145.squirrel@localhost>
Message-ID: <121564E5A45D4AD6A75D395CD2112BEA@freebsd.or.id>

Hi Bino, 

i _never_ write code using twisted (yet, i hope), but reading your question lead me to one (i think) example:

https://github.com/praekelt/vumi/blob/develop/vumi/servicemaker.py#L174

hope it helps 

-- 
Sayid Munawar
Sent with Sparrow (http://www.sparrowmailapp.com/?sig)


On Monday, 11 November 2013 at 3:15 PM, bino at indoakses-online.com wrote:

> Dear All.
> 
> Currently I have a single '.tac' file that use MultiService()
> 
> Ended with
> ----------------
> 
> #Create Application
> print 'create application'
> application = service.Application("Serial MultiService Example")
> #Creating Multi Service
> multiService = service.MultiService()
> ...
> ...
> multiService.setServiceParent(application)
> 
> --------------
> currently it works just fine
> 
> 
> Now, i need to to able to run it using some parameter from the commandline.
> I kne that I have to take 'tap' path.
> I read http://docs.huihoo.com/python/twisted/howto/tap.html but (thanks to
> my lame brain) failed to understand on how to implement this to my
> existing script.
> 
> Kindly please tell me how to do it or give me realy basic example on
> using/migrating tac file with Twisted Application Plugin.
> 
> Sincerely
> -bino-
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com (mailto:Twisted-Python at twistedmatrix.com)
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131117/42618373/attachment.html>

From sank.daniel at gmail.com  Sun Nov 17 10:01:33 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sun, 17 Nov 2013 09:01:33 -0800
Subject: [Twisted-Python] how to change an qt4 applicaion using twisted?
In-Reply-To: <CAE_Hg6YuYxHGNKCet14Jz3QggC=pXYfdp8O7=Ox+3Vy7JUFfsA@mail.gmail.com>
References: <201311171718460284357@gmail.com>
 <CAE_Hg6ZdiSTdYCLKcY_r85T-4pkzfUMH0AZfouY0EtRfFR+sjg@mail.gmail.com>
 <2013111718102654081815@gmail.com>
 <CAE_Hg6YuYxHGNKCet14Jz3QggC=pXYfdp8O7=Ox+3Vy7JUFfsA@mail.gmail.com>
Message-ID: <CAKN9TD+9A0_eOQQ8a_HxCnH6P+kf4dLLzCFWg6s-9VN1qDywxw@mail.gmail.com>

Yangyouxiu,

I can definitely help you with this as I've recently written a chat
server/client with twisted+PyQt4 and am working on a more complex
program that uses PyQt4 with twisted's perspective broker.

I have attached five files:

1. client-pyqtreactor.py is a chat client using pyqtreactor and PyQt4.
2. ui.ui is the user interface file loaded by client-pyqtreactor.py
3. server.py is a chat server using asyncore. Note that the server
need not use PyQt4 as it has no GUI.
4. constants.py contains configuration data for the client and server
5. qt4reactor.py is the custom reactor

Put these all in the same directory, then run the server, then run
some clients. When the client window appears click "connect" and then
you can use it just like any other network chat program.

I hope this helps, and if anyone has suggestions on how to improve the
client code please tell me, as I intend on using it as part of a
tutorial on twsited+PyQt4.

Danie Sank
-------------- next part --------------
A non-text attachment was scrubbed...
Name: client-pyqtreactor.py
Type: application/binary
Size: 3136 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131117/dc3c1da8/attachment-0004.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: constants.py
Type: application/binary
Size: 60 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131117/dc3c1da8/attachment-0005.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: qt4reactor.py
Type: application/binary
Size: 7686 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131117/dc3c1da8/attachment-0006.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: server.py
Type: application/binary
Size: 2260 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131117/dc3c1da8/attachment-0007.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: ui.ui
Type: application/octet-stream
Size: 2144 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131117/dc3c1da8/attachment-0001.obj>

From sank.daniel at gmail.com  Sun Nov 17 10:13:43 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sun, 17 Nov 2013 09:13:43 -0800
Subject: [Twisted-Python] Is a Viewable Cacheable a good idea?
In-Reply-To: <CALpq1pYg_nY8B5sW3Jv5HDS4vSzYqpFUAWjLKHpoQ0AvGviLeA@mail.gmail.com>
References: <CAKN9TDJ7fSifOaWyLFg4Rde9ymW_gbwP_XFAegnxHF8-or9cdA@mail.gmail.com>
 <CALpq1pYg_nY8B5sW3Jv5HDS4vSzYqpFUAWjLKHpoQ0AvGviLeA@mail.gmail.com>
Message-ID: <CAKN9TDJkhipyZU63AHbdMRnz2MwCRUMqWoB0QffpQq9O+rD4aA@mail.gmail.com>

> So may be (IMHO) you could have one viewable object acting like a stockroom-manager
> that clients will (remote)call to make changes on the server side stockroom-object, and
> a cacheable stockroom-object, that you will sync with client.

Now that I've been working on this for a while and understand what
_doesn't_ work I see why your suggestion here is a very good one.
Thank you.

The one funny aspect of using a single manager object is that whenever
I want to modify an element in the stockroom I have to pass the
manager a reference to the object I'm trying to modify:

myViewpointToTheManager.callRemote("purchaseItem", myRemoteCacheOfSomeItem)

It seems slightly distasteful to have to call a generic purchase
method for _any_ object I might want to buy.

That said I think I've figured out a good way to handle this whole
thing. I attach to this email a file containing some classes that
allow interaction both by talking to a Viewable manager or by invoking
remote methods on the managed objects themselves. An explanation of
intended use is given in the source code.

I hope this is helpful to others.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: viewableCacheable.py
Type: application/binary
Size: 4325 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131117/8e577a3a/attachment.bin>

From twisted at tomvn.com  Sun Nov 17 10:44:05 2013
From: twisted at tomvn.com (Tom van Neerijnen)
Date: Sun, 17 Nov 2013 17:44:05 +0000
Subject: [Twisted-Python] Returning a deferred from buildProtocol
	t.i.p.Factory
In-Reply-To: <979A680E-DD89-4D9B-9AE8-F3910F74C18B@gmail.com>
References: <CAMwy1tyGTDZCoPYpQOPeqnSA-g9qC0A=+nLE2UYCs13_C_QmZA@mail.gmail.com>
 <979A680E-DD89-4D9B-9AE8-F3910F74C18B@gmail.com>
Message-ID: <CAMwy1typfbvqvD_VCzXfhJST9yD7MJmF7DZEPc4tGd8ee8+CEQ@mail.gmail.com>

Thanks for both those suggestions.
I'll be taking a closer look at txLoadbabancer when I get time as it looks
like it'll take care of a lot of my desired functionality out the box.
To get started tho I'll move my async routing decision call into the
protocol as suggested.

Is there any reason why the internal calls to buildProtocol shouldn't be
wrapped in a maybeDeferred?


On Sat, Nov 16, 2013 at 7:05 PM, Lucas Taylor <ltaylor.volks at gmail.com>wrote:

>
> On Nov 16, 2013, at 7:09 AM, Tom van Neerijnen wrote:
>
> Hi all
>
> I'm building a simple TCP load balancer based on a code snippet from Glyph
> on SO:
> http://stackoverflow.com/questions/4096061/general-question-regarding-wether-or-not-use-twisted-in-tcp-proxy-project
>
> It's served me well but I can't work out how to convert Glyphs round robin
> retrieval of the server endpoint into an async balancing decision in the
> buildProtocol method of the Factory. If I return a deferred here it fails
> with an AttributeError: Deferred instance has no attribute 'makeConnection'.
>
> Currently I'm working around this by running a separate management loop
> that periodically updates a dictionary with all the data necessary to make
> my routing decision so that I can do it without a deferred. This worries me
> because I may be making my decision on slightly stale data and I'd really
> like this to be a real time decision as the connection comes in. Does
> anyone have a clever way of doing this?
>
>
>
> Hi Tom,
>
> One possibly unexpected aspect of using @inlineCallbacks is that the
> decorated function itself returns a Deferred. This is why you see the
> AttributeError...the machinery calling buildProtocol expects an IProtocol
> instance (or None), and the function is returning a Deferred.
> `defer.returnValue()` is provided to the callback on that Deferred, not as
> a direct return value from the decorated function.
>
> If you want to make the routing decision when the client connects, then
> you could push the decision-making process down into the Protocol itself.
>
> Here's a quick mockup overriding connectionMade in a ProxyServer protocol
> subclass. It calls the factory routing function (which may or may not
> return a deferred), and connects the proxy once the decision has been made.
>
>
> from twisted.internet.protocol import Factory
> from twisted.protocols.portforward import ProxyServer
>
>
> class Balancer(Factory):
>     protocol = RoutingProxyServer
>     routing_func = port_routing_decision_async
>
>
> class RoutingProxyServer(ProxyServer):
>
>     def connectionMade(self):
>         # Don't read anything from the connecting client until we have
>         # somewhere to send it to.
>         self.transport.pauseProducing()
>
>         client = self.clientProtocolFactory()
>         client.setServer(self)
>
>         if self.reactor is None:
>             from twisted.internet import reactor
>             self.reactor = reactor
>
>         def connectProxy(host, port):
>             self.reactor.connectTCP(host, port, client)
>
>         d = maybeDeferred(self.factory.routing_func)
>         d.addCallback(connectProxy)
>         d.addErrback(log.err)
>
>
> Lucas
>
>
>
>
>
> An example is below. The hashed out buildProtocol is a synchronous
> decision which works. Thanks in advance!
>
> from twisted.internet.protocol import Factory
> from twisted.protocols.portforward import ProxyFactory
> from twisted.internet import reactor, defer
> import random
>
> from twisted.python import log
> import sys
> log.startLogging(sys.stderr)
>
> local_ports = set([1024, 1025])
>
> def port_routing_decision_sync():
>     return random.choice(list(local_ports))
>
> def port_routing_decision_async():
>     d = defer.Deferred()
>     reactor.callLater(1, d.callback, port_routing_decision_sync())
>     return d
>
> class Balancer(Factory):
>     # def buildProtocol(self, addr):
>     #     port = port_routing_decision_sync()
>     #     print "connecting to local port {}".format(port)
>     #     return ProxyFactory("127.0.0.1", port).buildProtocol(addr)
>
>     @defer.inlineCallbacks
>     def buildProtocol(self, addr):
>         port = yield port_routing_decision_async()
>         print "connecting to local port {}".format(port)
>         defer.returnValue(ProxyFactory("127.0.0.1",
> port).buildProtocol(addr))
>
> def main():
>     factory = Balancer()
>     reactor.listenTCP(5678, factory)
>     reactor.run()
>
> if __name__ == "__main__":
>     main()
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131117/96725b12/attachment.html>

From exarkun at twistedmatrix.com  Sun Nov 17 13:08:15 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 Nov 2013 20:08:15 -0000
Subject: [Twisted-Python] Returning a deferred from buildProtocol
 t.i.p.Factory
In-Reply-To: <CAMwy1typfbvqvD_VCzXfhJST9yD7MJmF7DZEPc4tGd8ee8+CEQ@mail.gmail.com>
References: <CAMwy1tyGTDZCoPYpQOPeqnSA-g9qC0A=+nLE2UYCs13_C_QmZA@mail.gmail.com>
 <979A680E-DD89-4D9B-9AE8-F3910F74C18B@gmail.com>
 <CAMwy1typfbvqvD_VCzXfhJST9yD7MJmF7DZEPc4tGd8ee8+CEQ@mail.gmail.com>
Message-ID: <20131117200815.15706.211386549.divmod.xquotient.45@top>

On 05:44 pm, twisted at tomvn.com wrote:
>Thanks for both those suggestions.
>I'll be taking a closer look at txLoadbabancer when I get time as it 
>looks
>like it'll take care of a lot of my desired functionality out the box.
>To get started tho I'll move my async routing decision call into the
>protocol as suggested.
>
>Is there any reason why the internal calls to buildProtocol shouldn't 
>be
>wrapped in a maybeDeferred?

I'm not sure what you mean by "internal" here.  I think you might mean 
"calls to buildProtocol made by reactor implementations".  It is a 
mistake to take this perspective, though.  If buildProtocol is allowed 
to return a Deferred sometimes then *all* callers have to be prepared to 
handle a Deferred (by using `maybeDeferred` or using some other 
strategy).

This points to the reason *buildProtocol* can't be allowed to return a 
Deferred.  It is already defined as not returning a Deferred and 
changing this definition would potentially break every call, both those 
in reactor implementations and elsewhere (and there are plenty of other 
places that call `buildProtocol`).

Whether there is any good reason we could not introduce a new interface 
that is like `buildProtocol` but is also allowed to return a Deferred is 
another (more interesting :) question.  I can't think of any offhand.

The reactor would probably want to avoid monitoring new connections for 
read or write events until this Deferred fired (but bonus points if it 
still monitors it for connection lost and cancels the Deferred if this 
happens before it fires).  That's all relatively straightforward to 
implement though, for someone sufficiently motivated.

Jean-Paul


From kevin.horn at gmail.com  Sun Nov 17 15:35:17 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Sun, 17 Nov 2013 16:35:17 -0600
Subject: [Twisted-Python] Ticket #1330 - Socks V5 functionality
In-Reply-To: <CAFN1edojXa93qJ52SCi8kYT+=HWmwT4TFNDhWV3VBTWtUsfrng@mail.gmail.com>
References: <CAFN1edrNd-Q=BgOyqseWonb_WsHNx+ejJqAKWSzym4ax8p4SVQ@mail.gmail.com>
 <20131116194434.15706.1987930455.divmod.xquotient.27@top>
 <CAFN1edojXa93qJ52SCi8kYT+=HWmwT4TFNDhWV3VBTWtUsfrng@mail.gmail.com>
Message-ID: <CA+U=zK3J-Hm5v3JUm5UYh3iCWCoukKFaTsHrNJ77mx0xTpFJpQ@mail.gmail.com>

David,

You may also wish to take a look at Proxy65, which is a socks5 proxy
specifically for XMPP XEP-0065.  I have no idea how complete or correct it
is, and it's pretty old, but it might be helpful.

https://code.google.com/p/proxy65/


On Sat, Nov 16, 2013 at 2:28 PM, David Stainton <dstainton415 at gmail.com>wrote:

> Hi Jean-Paul,
>
> Thanks for all the info, observations about the existing code and for
> the coding advice!
>
> I think I should only implement the socks 5 server side
> since txsocksx seems to have the client implementation covered.
> Some of the Tor developers use it...
>
> I'm not used to test driven development. I'll give it a try and
> implement the SOCKSv5 server functionality...
>
>
> Cheers!
>
> David
>
> On Sat, Nov 16, 2013 at 11:44 AM,  <exarkun at twistedmatrix.com> wrote:
> > On 06:14 pm, dstainton415 at gmail.com wrote:
> >>
> >> Hi, I'd like to help out and write unit tests for the Socks v5 code in
> >> this ticket:
> >> https://twistedmatrix.com/trac/ticket/1330
> >>
> >> Should I write something very similar to this?? ::
> >> http://twistedmatrix.com/trac/browser/trunk/twisted/test/test_socks.py
> >>
> >> My goal is getting socksv5 client and server code merged to mainline
> >> Twisted with unit tests.
> >
> >
> >
> > twisted/test/test_socks.py is a bad example of a test suite.  Here are
> the
> > things about it you should not emulate:
> >
> >  * It has documentation that is far from complete.  Documentation is
> just as
> > important in unit tests as elsewhere.  In particular, documenting the
> intent
> > of every test method is critical otherwise the test suite is very
> difficult
> > to maintain.
> >
> >  * It exercises too much code in each test method.  Well written test
> > methods do a single very simple thing.  A good rule of thumb is that
> there
> > should only be one `TestCase.assert...` method call in each test method.
> >
> >  * It uses some `TestCase.assert...` methods which are deprecated or
> soon to
> > be deprecated.  `assert_` is the main offender here.
> >
> >  * It doesn't completely cover the implementation (probably because the
> > implementation wasn't developed test-driven).  You can achieve full test
> > coverage without doing test-driven development but it takes more
> discipline.
> > I suggest doing a test-driven implementation of the SOCKSv5 functionality
> > you want (the easy approach to this is to start writing tests, then copy
> the
> > *smallest* possible piece of the existing, untested implementation into
> your
> > new implementation to make those tests pass; repeat until you have all of
> > the desired functionality).
> >
> >  * `StringTCPTransport` seems redundant.  `StringTransport` offers all of
> > this functionality already.
> >
> >  * Many names used in the module don't follow the Twisted name convention
> > (most obviously, "under_scores" are used throughout rather than
> > "camelCase").
> >
> >  * Native strings are used to represent byte strings throughout.
> >
> >  * The protocol interface is uniformly misused (it should call
> > `makeConnection` not `connectionMade`)
> >
> > Hope this helps,
> > Jean-Paul
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131117/2d70cf66/attachment.html>

From yangyouxiu at gmail.com  Sun Nov 17 17:31:25 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Mon, 18 Nov 2013 08:31:25 +0800
Subject: [Twisted-Python] how to change an qt4 applicaion using twisted?
References: <201311171718460284357@gmail.com>, 
 <CAE_Hg6ZdiSTdYCLKcY_r85T-4pkzfUMH0AZfouY0EtRfFR+sjg@mail.gmail.com>, 
 <2013111718102654081815@gmail.com>, 
 <CAE_Hg6YuYxHGNKCet14Jz3QggC=pXYfdp8O7=Ox+3Vy7JUFfsA@mail.gmail.com>, 
 <CAKN9TD+9A0_eOQQ8a_HxCnH6P+kf4dLLzCFWg6s-9VN1qDywxw@mail.gmail.com>
Message-ID: <2013111808311216632122@gmail.com>

Thanks for all the suggestions.
I will try your advices.




???
??

From: Daniel Sank
Date: 2013-11-18 01:01
To: Twisted general discussion
Subject: Re: [Twisted-Python] how to change an qt4 applicaion using twisted?
Yangyouxiu,

I can definitely help you with this as I've recently written a chat
server/client with twisted+PyQt4 and am working on a more complex
program that uses PyQt4 with twisted's perspective broker.

I have attached five files:

1. client-pyqtreactor.py is a chat client using pyqtreactor and PyQt4.
2. ui.ui is the user interface file loaded by client-pyqtreactor.py
3. server.py is a chat server using asyncore. Note that the server
need not use PyQt4 as it has no GUI.
4. constants.py contains configuration data for the client and server
5. qt4reactor.py is the custom reactor

Put these all in the same directory, then run the server, then run
some clients. When the client window appears click "connect" and then
you can use it just like any other network chat program.

I hope this helps, and if anyone has suggestions on how to improve the
client code please tell me, as I intend on using it as part of a
tutorial on twsited+PyQt4.

Danie Sank



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131118/e99b892a/attachment.html>

From sank.daniel at gmail.com  Sun Nov 17 18:20:24 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sun, 17 Nov 2013 17:20:24 -0800
Subject: [Twisted-Python] perspective argument missing from Viewable.view_*
Message-ID: <CAKN9TDKmd+6AqXugNSHRHEE3WRLUVXzVXVwXCwFS7vKVXX4zUQ@mail.gmail.com>

I'm trying to understand exactly how context management works in
perspective broker. I thought the point of Viewable was that you
always know who's calling. However if I run the simple fully working
example pasted below, I see that the perspective argument is None.
What gives?

Kind regards,
Daniel Sank

# Server

import twisted.spread.pb as pb
import twisted.internet.reactor as reactor

class Server(pb.Root):
    def __init__(self):
        self.v = MyViewable()

    def remote_getViewable(self):
        return self.v

class MyViewable(pb.Viewable):
    def view_foo(self, perspective):
        print ("Perspective %s"%perspective)


if __name__ == "__main__":
    reactor.listenTCP(54321, pb.PBServerFactory(Server()))
    print("Starting reactor")
    reactor.run()

# Client

import twisted.spread.pb as pb
import twisted.internet.reactor as reactor
from twisted.internet.defer import inlineCallbacks

@inlineCallbacks
def gotRoot(root):
    v1 = yield root.callRemote("getViewable")
    v2 = yield root.callRemote("getViewable")
    print(v1)
    print(v2)
    yield v1.callRemote("foo")
    yield v2.callRemote("foo")

factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 54321, factory)
d = factory.getRootObject()
d.addCallback(gotRoot)
reactor.run()


From grindizer at gmail.com  Mon Nov 18 03:14:12 2013
From: grindizer at gmail.com (Flint)
Date: Mon, 18 Nov 2013 11:14:12 +0100
Subject: [Twisted-Python] perspective argument missing from
	Viewable.view_*
In-Reply-To: <CAKN9TDKmd+6AqXugNSHRHEE3WRLUVXzVXVwXCwFS7vKVXX4zUQ@mail.gmail.com>
References: <CAKN9TDKmd+6AqXugNSHRHEE3WRLUVXzVXVwXCwFS7vKVXX4zUQ@mail.gmail.com>
Message-ID: <CALpq1pa2rL4-aZoCkyZKp5gLCbbe2p4qhz7Jp_ebf8fjZ32r=w@mail.gmail.com>

Hi Daniel.

To get the perspective you have to implements the IPerspective interface
(generally throw subclassing pb.Avatar class), and attach a login portal to
your server.
Client then have to authenticate to the server, only then you will receive
the perspective object representing the "logged" user into your view_ and
perspective_ method.

>From the code you gave clients are not "identifyed", my guess is this is
why you get None.

--
Nacim


2013/11/18 Daniel Sank <sank.daniel at gmail.com>

> I'm trying to understand exactly how context management works in
> perspective broker. I thought the point of Viewable was that you
> always know who's calling. However if I run the simple fully working
> example pasted below, I see that the perspective argument is None.
> What gives?
>
> Kind regards,
> Daniel Sank
>
> # Server
>
> import twisted.spread.pb as pb
> import twisted.internet.reactor as reactor
>
> class Server(pb.Root):
>     def __init__(self):
>         self.v = MyViewable()
>
>     def remote_getViewable(self):
>         return self.v
>
> class MyViewable(pb.Viewable):
>     def view_foo(self, perspective):
>         print ("Perspective %s"%perspective)
>
>
> if __name__ == "__main__":
>     reactor.listenTCP(54321, pb.PBServerFactory(Server()))
>     print("Starting reactor")
>     reactor.run()
>
> # Client
>
> import twisted.spread.pb as pb
> import twisted.internet.reactor as reactor
> from twisted.internet.defer import inlineCallbacks
>
> @inlineCallbacks
> def gotRoot(root):
>     v1 = yield root.callRemote("getViewable")
>     v2 = yield root.callRemote("getViewable")
>     print(v1)
>     print(v2)
>     yield v1.callRemote("foo")
>     yield v2.callRemote("foo")
>
> factory = pb.PBClientFactory()
> reactor.connectTCP("localhost", 54321, factory)
> d = factory.getRootObject()
> d.addCallback(gotRoot)
> reactor.run()
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131118/14886f86/attachment-0001.html>

From tobias.oberstein at tavendo.de  Mon Nov 18 10:45:55 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 18 Nov 2013 09:45:55 -0800
Subject: [Twisted-Python] FreeBSD buildslaves: change proposal
In-Reply-To: <634914A010D0B943A035D226786325D4446A0D96BF@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4446A0D96BF@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <634914A010D0B943A035D226786325D4446A18C095@EXVMBX020-12.exch020.serverdata.net>

Alright, the new buildslave is active, the old ones retired.

http://buildbot.twistedmatrix.com/buildslaves/tavendo-freebsd-9.2-amd64

There are a couple of env issues as well as test issues .. I'll look into both ..

/Tobias


From sank.daniel at gmail.com  Mon Nov 18 10:56:40 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 18 Nov 2013 09:56:40 -0800
Subject: [Twisted-Python] perspective argument missing from
	Viewable.view_*
In-Reply-To: <CALpq1pa2rL4-aZoCkyZKp5gLCbbe2p4qhz7Jp_ebf8fjZ32r=w@mail.gmail.com>
References: <CAKN9TDKmd+6AqXugNSHRHEE3WRLUVXzVXVwXCwFS7vKVXX4zUQ@mail.gmail.com>
 <CALpq1pa2rL4-aZoCkyZKp5gLCbbe2p4qhz7Jp_ebf8fjZ32r=w@mail.gmail.com>
Message-ID: <CAKN9TDKrHguRbCVjC4CAcN1ycLmnRT-qBEwAvz3LiOTcJ3kLJQ@mail.gmail.com>

> Client then have to authenticate to the server, only then you will receive the
> perspective object representing the "logged" user into your view_ and
> perspective_ method.

I am confused by this. When I use the cred system the client gets a
remote reference to an Avatar on which it can call perspective_*
methods. How does this translate into having the proper perspective
passed into calls to view_* methods on other objects?


From sank.daniel at gmail.com  Mon Nov 18 23:12:02 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 18 Nov 2013 22:12:02 -0800
Subject: [Twisted-Python] perspective argument missing from
	Viewable.view_*
In-Reply-To: <CAKN9TDKrHguRbCVjC4CAcN1ycLmnRT-qBEwAvz3LiOTcJ3kLJQ@mail.gmail.com>
References: <CAKN9TDKmd+6AqXugNSHRHEE3WRLUVXzVXVwXCwFS7vKVXX4zUQ@mail.gmail.com>
 <CALpq1pa2rL4-aZoCkyZKp5gLCbbe2p4qhz7Jp_ebf8fjZ32r=w@mail.gmail.com>
 <CAKN9TDKrHguRbCVjC4CAcN1ycLmnRT-qBEwAvz3LiOTcJ3kLJQ@mail.gmail.com>
Message-ID: <CAKN9TD+peKK-eFJwC_+--DzzYFe3W41MJkqvH1m9jz9DP=kgiQ@mail.gmail.com>

>> Client then have to authenticate to the server, only then you will receive
>> the perspective object representing the "logged" user into your
>  view_ and perspective_ method.

> I am confused by this. When I use the cred system the client gets a
> remote reference to an Avatar on which it can call perspective_*
> methods. How does this translate into having the proper perspective
> passed into calls to view_* methods on other objects?

I figured out what's going on. If I send a Viewable to the client like this:

myAvatar.mind.callRemote("takeViewable", instanceOfViewable)

then the client's subsequent calls to the viewable arrive with the
perspective argument set to None. It seems that to make Viewable work
properly I have return the Viewable instance from a perspective_*
method on the Avatar. For example

class MyAvatar(pb.Avatar):
    perspective_getViewable(self):
        ...
        return instanceOfViewable

This is not indicated in the documentation. I looked into fixing it
myself but it seems there's somewhat of an activation barrier in
submitting documentation fixes. Hopefully I will climb over that
barrier soon.

This raises the question of how to enable a single human with a single
connection to act as more than one client in a pb managed system.

Regards,
Daniel Sank


From yangyouxiu at gmail.com  Tue Nov 19 23:42:09 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Wed, 20 Nov 2013 14:42:09 +0800
Subject: [Twisted-Python] How to call remote server method to read a file on
	the server machine useing perspective broker ?
Message-ID: <2013112014420099656036@gmail.com>

Hi, all!
I'm trying to read a file on the server with pb, and got an error. Following is my code, what's the problem?

***********************pb1server.py
#!/usr/bin/env python

# Copyright (c) Twisted Matrix Laboratories.
# See LICENSE for details.

from twisted.spread import pb

class Two(pb.Referenceable):
    def remote_three(self, arg):
        print "Two.three was given", arg
        f=open('/home/gddw/Desktop/test','wr')
        content = f.readline()
        print content
class One(pb.Root):
    def remote_getTwo(self):
        two = Two()
        print "returning a Two called", two
        return two

from twisted.internet import reactor
reactor.listenTCP(8800, pb.PBServerFactory(One()))
reactor.run()
*************************pb1client.py
#!/usr/bin/env python

# Copyright (c) Twisted Matrix Laboratories.
# See LICENSE for details.

from twisted.spread import pb
from twisted.internet import reactor

def main():
    factory = pb.PBClientFactory()
    reactor.connectTCP("localhost", 8800, factory)
    def1 = factory.getRootObject()
    def1.addCallbacks(got_obj1, err_obj1)
    reactor.run()

def err_obj1(reason):
    print "error getting first object", reason
    reactor.stop()

def got_obj1(obj1):
    print "got first object:", obj1
    print "asking it to getTwo"
    def2 = obj1.callRemote("getTwo")
    def2.addCallbacks(got_obj2)

def got_obj2(obj2):
    print "got second object:", obj2
    print "telling it to do three(12)"
    obj2.callRemote("three", 12)
main()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131120/4c7d7fc8/attachment.html>

From sank.daniel at gmail.com  Tue Nov 19 23:59:53 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Tue, 19 Nov 2013 22:59:53 -0800
Subject: [Twisted-Python] How to call remote server method to read a
 file on the server machine useing perspective broker ?
In-Reply-To: <2013112014420099656036@gmail.com>
References: <2013112014420099656036@gmail.com>
Message-ID: <CAKN9TDJK8+jmGKifOkx3WrYCMjrE5c9wTkOkBd3VoM2A7bhmPA@mail.gmail.com>

Did you try reading the error message?

I don't think 'wr' is an allowed mode for open()


From yangyouxiu at gmail.com  Wed Nov 20 00:07:10 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Wed, 20 Nov 2013 15:07:10 +0800
Subject: [Twisted-Python] How to call remote server method to read a
	file on the server machine useing perspective broker ?
References: <2013112014420099656036@gmail.com>, 
 <CAKN9TDJK8+jmGKifOkx3WrYCMjrE5c9wTkOkBd3VoM2A7bhmPA@mail.gmail.com>
Message-ID: <2013112015065018431438@gmail.com>


Thank you very much!

You are right. It should be 'r+' mode, ^_^

From: Daniel Sank
Date: 2013-11-20 14:59
To: Twisted general discussion
Subject: Re: [Twisted-Python] How to call remote server method to read a file on the server machine useing perspective broker ?
Did you try reading the error message?

I don't think 'wr' is an allowed mode for open()

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131120/b7d6e66b/attachment.html>

From sank.daniel at gmail.com  Wed Nov 20 00:30:28 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Tue, 19 Nov 2013 23:30:28 -0800
Subject: [Twisted-Python] How to call remote server method to read a
 file on the server machine useing perspective broker ?
In-Reply-To: <2013112015065018431438@gmail.com>
References: <2013112014420099656036@gmail.com>
 <CAKN9TDJK8+jmGKifOkx3WrYCMjrE5c9wTkOkBd3VoM2A7bhmPA@mail.gmail.com>
 <2013112015065018431438@gmail.com>
Message-ID: <CAKN9TD+GZBR-mazeiatwADhvueqF5p0ho5dYDTYypRW8CVDYbQ@mail.gmail.com>

> You are right. It should be 'r+' mode, ^_^

Yes, reading the error message can be useful... ;)


From _ at lvh.io  Wed Nov 20 09:50:53 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 20 Nov 2013 17:50:53 +0100
Subject: [Twisted-Python] AMP Argument.toBox's proto argument is a
 locator, not the proto?
In-Reply-To: <59B7D7CB-1BB5-4048-8FCE-85F55B83FC51@twistedmatrix.com>
References: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>
 <E911B264-65A6-4BBF-8E76-4B88803F5E1B@twistedmatrix.com>
 <CAE_Hg6Z-ocrkb2+hWFDM55Cvt=YVQp3Mb9BFKZ8QO7rB+0Q73Q@mail.gmail.com>
 <8E13BB54-88C0-4647-B785-D44323091B88@twistedmatrix.com>
 <CAE_Hg6bsf8=2ZAg8As=Ju_Mf5hLXVPCqb+ksDRnq3pHTjnpAxg@mail.gmail.com>
 <59B7D7CB-1BB5-4048-8FCE-85F55B83FC51@twistedmatrix.com>
Message-ID: <CAE_Hg6Z5UdD7JY5MJUOaVXeVCB_wE+s=JbUG7-+6JJuBvTxjfA@mail.gmail.com>

*deep necromantic thread magic*

On Thu, Oct 3, 2013 at 11:54 AM, Glyph <glyph at twistedmatrix.com> wrote:

> If I can change "proto" to mean "actually the protocol not something else"
> then that seems plenty easy to add, and it would definitely be cool if
> people don't have to mess with this nonsense themselves for something as
> ostensibly simple as having access to the protocol :-)
>
> Keep in mind that in the authentication case I mentioned, your post-auth
> object may well subclass AMP and therefore "actually" be a protocol; but it
> still won't have a transport.  What do you propose happen in that case?
>

Isn't the post-auth object a box receiver? I mean, yes, it can be a box
receiver by virtue of subclassing AMP and therefore *secretly* being a
proto. I'd be totally fine (for my use case) to just have the transport
available somewhere :) (The transport that the AMP bytes are being sent
over; so not, say, a TCP transport underlying a TLS connection or
something.)

For fixing this (I'll file tickets if you confirm):

- ResponderLocator's behavior is pretty much just broken. It's using
Command.makeResponse. That says it wants an AMP. It's clearly just getting
a responder locator. However, it seems like the problem here is
makeResponse's crappy interface. It shouldn't want an AMP. So, we should
fix makeResponse's docstring, and all of the other cases where t.p.amp asks
for an AMP and shouldn't.
- The proto argument name is stupid. Can we fix it?
- There should be a new method on IArgumentType, parallel to fromBox (but
not toBox?), that gets a reference to the transport passed to it. If so:
where does it get that?

Does that sound about right?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131120/6f4c58cd/attachment.html>

From tobias.oberstein at tavendo.de  Wed Nov 20 10:46:05 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 20 Nov 2013 09:46:05 -0800
Subject: [Twisted-Python] Update: FreeBSD builders
Message-ID: <634914A010D0B943A035D226786325D4446A256B49@EXVMBX020-12.exch020.serverdata.net>

Hi,

the 3 builders for the new FreeBSD 9.2 x86-64 slave are up and running:

http://buildbot.twistedmatrix.com/buildslaves/tavendo-freebsd-9.2-amd64

Nov 20 09:42 	601a9d1cb6eb... 	failure 	freebsd-9.2-amd64-python2.7 		#12 	Failed 1 test (select) 1 test (poll) 3 tests (kqueue)
Nov 20 09:42 	601a9d1cb6eb... 	failure 	freebsd-9.2-amd64-pypy2.2 		#8 	Failed 28 tests (select) 28 tests (poll) 93 tests (kqueue)
Nov 20 09:42 	601a9d1cb6eb... 	failure 	freebsd-9.2-amd64-pypy-nightly 	#6 	Failed 28 tests (select) 28 tests (poll) 31 tests (kqueue)

CPy 2.7:	this is a vanilla build from Python 2.7.6 sources
PyPy 2.2:	this is a vanilla build from PyPy 2.2 sources
PyPy Nightly:	this is build by the PyPy buildslave (running on the same host) from PyPy head

All binaries are compiled using Clang 3.3 (which will be the default toolchain beginning with FreeBSD 10, kernel to userland).

The biggest issue that was causing a bunch of IPv6 tests to fail is already solved and merged:

https://twistedmatrix.com/trac/ticket/6843

Thanks Jean-Paul (exarkun) and Laurens (lvh)!

Regarding the remaining failing tests:

1) CPy 2.7 / select & poll reactors

There is 1 identified issue left: https://twistedmatrix.com/trac/ticket/6846

2) CPy 2.7 / kqueue reactor

Apart from #6846, in above run, there are 2 failing tests.

My problem is: I think I have seen the _same revision_ yield between 0 - 4 failing tests for kqueue. I'll watch that, and then see.

3) PyPy 2.2 & nightly / select & poll reactors

I would focus on these 28 failing tests first, since they are "stable" both across PyPy 2.2 / Nightly and select/poll reactors.

>From a first quick lock, there might be some low hanging fruit - tests that probably test CPy specific behavior like.

I guess analyzing and fixing the PyPy related issues won't happen tomorrow. It'll take some time.

Cheers,
Tobias


From sank.daniel at gmail.com  Wed Nov 20 16:54:58 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Wed, 20 Nov 2013 15:54:58 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed by
	Avatars?
Message-ID: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>

>From some experimentation I find that the only way to make a Viewable
get a meaningful perspective argument when executing view_* methods is
to make sure that the references to that Viewable are given to clients
as return values from perspective_* methods called on a pb.Avatar.

In particular, if the Avatar gives a client a reference to a Viewable
by passing it as an argument to a remote_* method on the client,
subsequent invocations of view_* methods by the client result in
perspective argument in view_* methods being None.

I have attached a complete working example of a client and server that
succinctly illustrates this issue.

Question: Is there a way to distribute un-asked for references to
Viewables that properly get the perspective argument in their view_*
methods?

Sincerely,
Daniel Sank
-------------- next part --------------
A non-text attachment was scrubbed...
Name: client.py
Type: text/x-python
Size: 837 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131120/b4f53395/attachment.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: server.py
Type: text/x-python
Size: 1201 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131120/b4f53395/attachment-0001.py>

From _ at lvh.io  Fri Nov 22 05:10:03 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 22 Nov 2013 13:10:03 +0100
Subject: [Twisted-Python] Some thoughts hacking with AMP (was: something
 about multiplexing and accessing protocols)
Message-ID: <CAE_Hg6bGG9uiOrJUV4FzFzLH0Cb=2burj489+eAzv21NYoqjNQ@mail.gmail.com>

Hi,

Some thoughts while hacking:

- The argument having access to the responder locator and then eventually
it going to a responder function is kind of useless, usually. The responder
function already has a reference to the locator, usually called "self" :)
- The locator object can be shared between different connections, so a hack
using the current status quo where you get the proto using the responder
locator is... well, hacky.

Also, I do really really want the protocol and not the transport. This is
because I want to pass a reference to the protocol around so that later I
can call callRemote on it. That I can also get the transport is mostly just
gravy so that I can return nice things for my fake transport's
getHost/getPeer.

So, to reiterate:

- I think all the docstrings should reflect the real situation. I guess I
need to file a ticket for that.
- Maybe there should be a new API that passes the proto (and actually means
"proto" ;))

I think I have some code up (or will have some code up soon, depending on
when you read this email) that does have sort-of working multiplexed
transports:

https://github.com/lvh/txampext

When done, this will be available from pypi as txampext==0.0.6.

If anyone is interested in this, the next big feature mark will be
integrating _habnabit's AMP producer stuff, so that it's not just
transports, but IConsumer/IProducer transports as well.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131122/26690668/attachment.html>

From glyph at twistedmatrix.com  Fri Nov 22 12:00:41 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 22 Nov 2013 11:00:41 -0800
Subject: [Twisted-Python] Some thoughts hacking with AMP (was: something
	about multiplexing and accessing protocols)
In-Reply-To: <CAE_Hg6bGG9uiOrJUV4FzFzLH0Cb=2burj489+eAzv21NYoqjNQ@mail.gmail.com>
References: <CAE_Hg6bGG9uiOrJUV4FzFzLH0Cb=2burj489+eAzv21NYoqjNQ@mail.gmail.com>
Message-ID: <439FA800-6EE8-41AE-9929-96D17984DA7B@twistedmatrix.com>


On Nov 22, 2013, at 4:10 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> Also, I do really really want the protocol and not the transport. This is because I want to pass a reference to the protocol around so that later I can call callRemote on it. That I can also get the transport is mostly just gravy so that I can return nice things for my fake transport's getHost/getPeer.

Except that maybe your protocol is just a BinaryBoxProtocol, and has no callRemote method.  Or maybe it's actually HTTP and feeding things to AMP after some deserialization pass, like via JSON (aren't you even doing this already in some other code?).  Is there even a "protocol" visible to this code in that case?

If your contract is that you accept an IProtocol, then what you can do is pretty much just call dataReceived and connectionLost ;-) unless you have some other reason to believe it provides some other interfaces.

> So, to reiterate:
> 
> - I think all the docstrings should reflect the real situation. I guess I need to file a ticket for that.

Well, that's definitely true.

> - Maybe there should be a new API that passes the proto (and actually means "proto" ;))

I still think that before providing this new mechanism we need *some* way of declaring that we expect more from "the protocol".

> I think I have some code up (or will have some code up soon, depending on when you read this email) that does have sort-of working multiplexed transports:

Cool.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131122/f69f8799/attachment.html>

From sank.daniel at gmail.com  Fri Nov 22 12:20:27 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 22 Nov 2013 11:20:27 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed
	by Avatars?
In-Reply-To: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
References: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
Message-ID: <CAKN9TDJeswWiutcN1FVv=v03fSvCu1sSTVT2RDXthrk8uhQ+Ug@mail.gmail.com>

> Question: Is there a way to distribute un-asked for references to
> Viewables that properly get the perspective argument in their view_*
> methods?

I think this is a pretty reasonable question but nobody's biting. Did
I do something wrong in the way I asked?


From glyph at twistedmatrix.com  Fri Nov 22 12:02:57 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 22 Nov 2013 11:02:57 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed
	by Avatars?
In-Reply-To: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
References: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
Message-ID: <B3B41670-6D95-4C2D-8098-06FE476656C8@twistedmatrix.com>


On Nov 20, 2013, at 3:54 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> From some experimentation I find that the only way to make a Viewable
> get a meaningful perspective argument when executing view_* methods is
> to make sure that the references to that Viewable are given to clients
> as return values from perspective_* methods called on a pb.Avatar.
> 
> In particular, if the Avatar gives a client a reference to a Viewable
> by passing it as an argument to a remote_* method on the client,
> subsequent invocations of view_* methods by the client result in
> perspective argument in view_* methods being None.
> 
> I have attached a complete working example of a client and server that
> succinctly illustrates this issue.
> 
> Question: Is there a way to distribute un-asked for references to
> Viewables that properly get the perspective argument in their view_*
> methods?

So, this strikes me as incredibly subtle, and likely a bug, but the fix is not immediately obvious to me.

Viewable objects are associated with their perspective when they are serialized.  They are associated with the perspective which is serializing them.

The "mind" object, passed by the client during the login process, can be just about anything - but one property that all "mind" objects share is that they are serialized *before authentication even occurs*, so there is no Avatar object and therefore no perspective around.  Therefore the ViewPoint which gets stored in the remote reference cache will have a perspective of None, and all subsequent calls made to that reference will have no perspective.

One way to fix this is to manually construct a ViewPoint rather than a Viewable and pass that to the client.  But I do think that we should find a way to make your use-case work, to, or at the very least document the reasons why it doesn't in a comprehensible way...

It's been a *very* long time since I took such a hard look at PB.  Good catch!

-glyph

From sank.daniel at gmail.com  Fri Nov 22 13:01:54 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 22 Nov 2013 12:01:54 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed
	by Avatars?
In-Reply-To: <B3B41670-6D95-4C2D-8098-06FE476656C8@twistedmatrix.com>
References: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
 <B3B41670-6D95-4C2D-8098-06FE476656C8@twistedmatrix.com>
Message-ID: <CAKN9TD+u5s+hw=w7VXtUDqDh3QC589PXhikeNL8-7d+ADokjog@mail.gmail.com>

Thanks much for the reply.

> So, this strikes me as incredibly subtle, and likely a bug

Should I file a ticket?

> One way to fix this is to manually construct a ViewPoint rather than a Viewable and pass that to the client.

If someone would be willing to supply a very simple demonstration of
this I would appreciate it very much.

> But I do think that we should find a way to make your use-case work, to, or at the very
> least document the reasons why it doesn't in a comprehensible way...

I am willing to help but as of right now I only know how to use
perspective broker; I do not know how it works under the hood.

I have been collecting notes on bugs in the perspective broker
documentation. I promise to submit a documentation patch when I have a
first draft of my project up and running.

Regards,
Daniel Sank


From glyph at twistedmatrix.com  Fri Nov 22 14:01:27 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 22 Nov 2013 13:01:27 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed
	by Avatars?
In-Reply-To: <CAKN9TD+u5s+hw=w7VXtUDqDh3QC589PXhikeNL8-7d+ADokjog@mail.gmail.com>
References: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
 <B3B41670-6D95-4C2D-8098-06FE476656C8@twistedmatrix.com>
 <CAKN9TD+u5s+hw=w7VXtUDqDh3QC589PXhikeNL8-7d+ADokjog@mail.gmail.com>
Message-ID: <AE1833E2-EDDA-4F2E-B4B8-B8967CBFC711@twistedmatrix.com>


On Nov 22, 2013, at 12:01 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> Thanks much for the reply.
> 
>> So, this strikes me as incredibly subtle, and likely a bug
> 
> Should I file a ticket?

Absolutely.

>> One way to fix this is to manually construct a ViewPoint rather than a Viewable and pass that to the client.
> 
> If someone would be willing to supply a very simple demonstration of
> this I would appreciate it very much.

It's a very simple change to your server; your client remains the same.  Just construct a ViewPoint with the user as perspective around your viewable.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: server.py
Type: text/x-python-script
Size: 1232 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131122/1751845c/attachment.bin>
-------------- next part --------------

>> But I do think that we should find a way to make your use-case work, to, or at the very
>> least document the reasons why it doesn't in a comprehensible way...
> 
> I am willing to help but as of right now I only know how to use
> perspective broker; I do not know how it works under the hood.

Well, it's open source, so the hood opens right up, go ahead and pop it :-).

> I have been collecting notes on bugs in the perspective broker
> documentation. I promise to submit a documentation patch when I have a
> first draft of my project up and running.


Please feel free to submit _many_ bugs, if there are many issues :-).

-glyph

From sank.daniel at gmail.com  Fri Nov 22 14:19:13 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 22 Nov 2013 13:19:13 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed
	by Avatars?
In-Reply-To: <AE1833E2-EDDA-4F2E-B4B8-B8967CBFC711@twistedmatrix.com>
References: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
 <B3B41670-6D95-4C2D-8098-06FE476656C8@twistedmatrix.com>
 <CAKN9TD+u5s+hw=w7VXtUDqDh3QC589PXhikeNL8-7d+ADokjog@mail.gmail.com>
 <AE1833E2-EDDA-4F2E-B4B8-B8967CBFC711@twistedmatrix.com>
Message-ID: <CAKN9TDKiMXnWHXYfdxw6hPBwHhKVyF5sHq9nF0tRY55FqWaKWQ@mail.gmail.com>

>>> One way to fix this is to manually construct a ViewPoint rather than a Viewable and pass that to the client.
>>
>> If someone would be willing to supply a very simple demonstration of
>> this I would appreciate it very much.
>
> It's a very simple change to your server; your client remains the same.  Just construct a
> ViewPoint with the user as perspective around your viewable.

I just looked at the viewpoint api docs. I believe I understand. Thank you.

>> I am willing to help but as of right now I only know how to use
>> perspective broker; I do not know how it works under the hood.
>
> Well, it's open source, so the hood opens right up, go ahead and pop it :-).

Indeed I will do so. I just meant to indicate that as I have no prior
experience with the source I cannot promise any sort of timeliness for
a fix.

>> I have been collecting notes on bugs in the perspective broker
>> documentation. I promise to submit a documentation patch when I have a
>> first draft of my project up and running.
>
> Please feel free to submit _many_ bugs, if there are many issues :-).

There are indeed many issues, however they are inter-related. As I
said, I will try to make some sense out of what needs to be fixed and
file (and fix!) tickets in as orderly a fashion as I can.

-Daniel Sank


From ron at ronsdesk.com  Fri Nov 22 22:32:35 2013
From: ron at ronsdesk.com (Ron Segal)
Date: Sat, 23 Nov 2013 05:32:35 +0000 (UTC)
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
 <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>
 <81E2EC36-5D3E-44A1-A465-7381CBE695CB@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C53D@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <loom.20131123T061959-660@post.gmane.org>

Tobias Oberstein <tobias.oberstein <at> tavendo.de> writes:

> 
> > > E.g., as a start, we could have a dedicated page on the Twistedmatrix
> > > Web site "Twisted for Things" for intro and collecting links, articles
> > > etc
> > 
> > Fun fact: the very first class in the very first thing that would eventually
> > become Twisted was called "Thing".  
> 
> What a prevision;)
> 
> > 
> > > Dummy question: how would I contribute to the Trac-based Web site
> > content?
> > 
> > Just click on the "edit" button at the bottom of any wiki page.  Some of the
> > pages (like the front page) are locked to prevent abuse, but I can give you
> > whatever extra permissions you need if you want to work on the site.
> 
> Yes please, I'd like to contribute to the site.
> 
> I have visited a dozen pages from the Index, and I have no "edit" button
.. nowhere. I am logged in
> ("oberstet") .. I can file/edit tickets.
> 
> I would start by creating a new page, following
http://twistedmatrix.com/trac/wiki/WikiNewPage, and -
> at this point - only add a link to the new page from the Index page.
> 
> A general question regarding using Trac as a Website system: the landing
page does only links to a couple of
> further pages.
> How are user supposed to navigate around? Always via the Index page?
> 
> You know, I haven't done a lot systematic looking around exactly for that
reason .. when I look for Twisted
> docs/pages, I basically Google for them (sometimes restricting the search
to Twistedmatrix).
> The UX of the Website is .. unusual .. or I just don't get it.
> 
> /Tobias
> 
> > 
> > -glyph
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python <at> twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

Following with interest.  Seeking a CoAP Python client capability that includes:
- Support for IPV6 to talk directly to server motes in constrained 6LoWPAN
WSNs. (the large IPV6 address space is for me intrinsic to the IoT concept)
- Security for the same, so presumably DTLS.
Both of these needed and particularly security, for any serious monitoring
and control applications.
Best wishes
Ron





From sangiovanni at nweb.it  Sat Nov 23 03:36:01 2013
From: sangiovanni at nweb.it (Fabio Sangiovanni)
Date: Sat, 23 Nov 2013 11:36:01 +0100
Subject: [Twisted-Python] [twisted.mail][newbie] return tempfail (4xx) after
	eomReceived()
Message-ID: <52908511.2050706@nweb.it>

Hello list,

I'm trying to code an SMTP server that stores received messages in a 
queue (es. RabbitMQ or Redis).
I'm figuring out how to do it with Twisted, and so far I managed to 
print to console the messages the way I want.
I'm trying to understand now how to return a tempfail code (4xx) from 
within eomReceived(), so to simulate (and, in the future, handle) 
temporary unavailabilities of the queuing system, and thus to delegate 
to the client the handling/retrying of the delivery (there will be 
postfix in front of my smtp server, so it will keep the message in its 
spool).
I ended up digging in the code until I found the _messageHandled 
callback of the SMTP class, that's added to the deferred returned by 
eomReceived. I admit I'm not very accustomed to deferreds yet, but I can 
only see 250 and 550 response code inside it. I suspect that I should 
return the 4xx code in one of the deferred's callbacks/errbacks *before* 
_messageHandled, but I really can't imagine how. Would you please give 
me some hints about how to accomplish the task? Am I looking to the 
right direction at all?

Thanks a lot,
Fabio


From _ at lvh.io  Sat Nov 23 04:15:53 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sat, 23 Nov 2013 12:15:53 +0100
Subject: [Twisted-Python] Some thoughts hacking with AMP (was: something
 about multiplexing and accessing protocols)
In-Reply-To: <439FA800-6EE8-41AE-9929-96D17984DA7B@twistedmatrix.com>
References: <CAE_Hg6bGG9uiOrJUV4FzFzLH0Cb=2burj489+eAzv21NYoqjNQ@mail.gmail.com>
 <439FA800-6EE8-41AE-9929-96D17984DA7B@twistedmatrix.com>
Message-ID: <CAE_Hg6YoONxwdS2=wd-wHD4_geBzsw+S2nXMWjzD4cY3sAdajQ@mail.gmail.com>

On Fri, Nov 22, 2013 at 8:00 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Nov 22, 2013, at 4:10 AM, Laurens Van Houtven <_ at lvh.io> wrote:
>
> Also, I do really really want the protocol and not the transport. This is
> because I want to pass a reference to the protocol around so that later I
> can call callRemote on it. That I can also get the transport is mostly just
> gravy so that I can return nice things for my fake transport's
> getHost/getPeer.
>
> Except that maybe your protocol is just a BinaryBoxProtocol, and has no
> callRemote method.  Or maybe it's actually HTTP and feeding things to AMP
> after some deserialization pass, like via JSON (aren't you even doing this
> already in some other code?).  Is there even a "protocol" visible to this
> code in that case?
>

Yep and yep:
 - I guess I mean IBoxReceiver? The thing with callRemote on it ;)
 - I'm doing that, and that's what I hope to do again here :)

> - Maybe there should be a new API that passes the proto (and actually
> means "proto" ;))
>
>
> I still think that before providing this new mechanism we need *some* way
> of declaring that we expect more from "the protocol".
>

Yep!


>  I think I have some code up (or will have some code up soon, depending on
> when you read this email) that does have sort-of working multiplexed
> transports:
>
>
> Cool.
>

For what it's worth, I hacked together something in docs/examples that
works. I'll see what I have to do to get it to work over a browser, and see
what I can expose as API :)



> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131123/472c414c/attachment.html>

From wasilak at gmail.com  Sat Nov 23 05:03:29 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Sat, 23 Nov 2013 13:03:29 +0100
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <loom.20131123T061959-660@post.gmane.org>
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
 <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>
 <81E2EC36-5D3E-44A1-A465-7381CBE695CB@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C53D@EXVMBX020-12.exch020.serverdata.net>
 <loom.20131123T061959-660@post.gmane.org>
Message-ID: <CAFUtXGxAdweHn6Eam-JZ6tqzKyj+BDYRgSfG1gD4obn-NQ_26w@mail.gmail.com>

Ron,

Following with interest.  Seeking a CoAP Python client capability that
> includes:
> - Support for IPV6 to talk directly to server motes in constrained 6LoWPAN
> WSNs. (the large IPV6 address space is for me intrinsic to the IoT concept)
> - Security for the same, so presumably DTLS.
> Both of these needed and particularly security, for any serious monitoring
> and control applications.
>

IPv6 is my target too. In general I've managed to run some tests with
txThings and Contiki powered 6LoWPAN motes. My points below:

1. Twisted doesn't officially support UDP IPv6 yet - however there was
great progress lately - see ticket #5086 (
http://twistedmatrix.com/trac/ticket/5086). Someone else should probably
comment on that, but it seems to be close to the finish line

2. You can easily add unofficial IPv6 support (basic unicast) by modifying
twisted/internet/udp.py. I'll email you the details.

3. There is a problem with txThings IPv6 server, because in most operating
systems source address of datagram is determined in round robin fashion. It
may cause the source address of the response to be different than
destination address of the request. CoAP client drops such responses and
sends RST. I haven't solved the problem yet. However if you need only
client you should be okay for now.

4. DTLS is currently not supported. I agree it's a must for any real life
application. There are some Python DTLS implementations out there, but I
haven't tried to use them with Twisted yet.

5. I don't know of any non-Twisted Python CoAP libraries with full IPv6 and
DTLS support. This week there was CoAP Plugtest event in Las Vegas (ended
yesterday) - when IETF Core working group publishes some report, it might
be a good summary of existing CoAP implementations. According to the first
summary DTLS plugtest had 66% success rate - which means it's a though
topic.

Best regards
Maciej Wasilak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131123/b124940e/attachment.html>

From exarkun at twistedmatrix.com  Sat Nov 23 05:08:34 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 23 Nov 2013 12:08:34 -0000
Subject: [Twisted-Python] [twisted.mail][newbie] return tempfail (4xx)
 after eomReceived()
In-Reply-To: <52908511.2050706@nweb.it>
References: <52908511.2050706@nweb.it>
Message-ID: <20131123120834.7593.1739550027.divmod.xquotient.0@top>

On 10:36 am, sangiovanni at nweb.it wrote:
>Hello list,
>
>I'm trying to code an SMTP server that stores received messages in a 
>queue (es. RabbitMQ or Redis).
>I'm figuring out how to do it with Twisted, and so far I managed to 
>print to console the messages the way I want.
>I'm trying to understand now how to return a tempfail code (4xx) from 
>within eomReceived(), so to simulate (and, in the future, handle) 
>temporary unavailabilities of the queuing system, and thus to delegate 
>to the client the handling/retrying of the delivery (there will be 
>postfix in front of my smtp server, so it will keep the message in its 
>spool).
>I ended up digging in the code until I found the _messageHandled 
>callback of the SMTP class, that's added to the deferred returned by 
>eomReceived. I admit I'm not very accustomed to deferreds yet, but I 
>can only see 250 and 550 response code inside it. I suspect that I 
>should return the 4xx code in one of the deferred's callbacks/errbacks 
>*before* _messageHandled, but I really can't imagine how. Would you 
>please give me some hints about how to accomplish the task? Am I 
>looking to the right direction at all?

See https://twistedmatrix.com/trac/ticket/4904

Jean-Paul


From p.mayers at imperial.ac.uk  Sat Nov 23 05:38:29 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 23 Nov 2013 12:38:29 +0000
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <CAFUtXGxAdweHn6Eam-JZ6tqzKyj+BDYRgSfG1gD4obn-NQ_26w@mail.gmail.com>
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
 <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>
 <81E2EC36-5D3E-44A1-A465-7381CBE695CB@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C53D@EXVMBX020-12.exch020.serverdata.net>
 <loom.20131123T061959-660@post.gmane.org>
 <CAFUtXGxAdweHn6Eam-JZ6tqzKyj+BDYRgSfG1gD4obn-NQ_26w@mail.gmail.com>
Message-ID: <5290A1C5.2020006@imperial.ac.uk>

On 23/11/13 12:03, Maciej Wasilak wrote:

> 3. There is a problem with txThings IPv6 server, because in most
> operating systems source address of datagram is determined in round
> robin fashion. It may cause the source address of the response to be
> different than destination address of the request.

This is in general a bit of a pain with UDP apps.

In Twisted, the easiest solution is to specifically bind the UDP sockets 
to the IP address(es) on the host, and always reply on the same 
protocol/transport you received on.

You may find the "netifaces" package helpful for getting a list of IPs 
in a cross-platform manner.

In theory you can avoid doing this if you have sendmsg/recvmsg support, 
but Twisted doesn't have this (yet).


From trac at twistedmatrix.com  Sun Nov 24 00:05:17 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 Nov 2013 07:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1385276717.24.3903768172259438408@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131124/9d8c039d/attachment.html>

From jonas.brunsgaard at gmail.com  Sun Nov 24 12:35:05 2013
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Sun, 24 Nov 2013 20:35:05 +0100
Subject: [Twisted-Python] How to get ServerOptions in tac file.
Message-ID: <CACVXvXq80LojO-A=c3-TyzSfC3WAJrKvqZQ7u7B-S8pffk6jCA@mail.gmail.com>

Is there an easy way get an options object from the  .tac file?

I my .tac file i have the following.

fh = logging.FileHandler('/var/log/ocmg/datastore.log')

I would like to be able et replace '/var/log/ocmg/datastore.log' with the
logfile option given by the user at the command line.

Any suggestions?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131124/c0d38cf5/attachment.html>

From exarkun at twistedmatrix.com  Sun Nov 24 13:43:52 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Nov 2013 20:43:52 -0000
Subject: [Twisted-Python] How to get ServerOptions in tac file.
In-Reply-To: <CACVXvXq80LojO-A=c3-TyzSfC3WAJrKvqZQ7u7B-S8pffk6jCA@mail.gmail.com>
References: <CACVXvXq80LojO-A=c3-TyzSfC3WAJrKvqZQ7u7B-S8pffk6jCA@mail.gmail.com>
Message-ID: <20131124204352.5996.765012586.divmod.xquotient.3@top>

On 07:35 pm, jonas.brunsgaard at gmail.com wrote:
>Is there an easy way get an options object from the  .tac file?
>
>I my .tac file i have the following.
>
>fh = logging.FileHandler('/var/log/ocmg/datastore.log')
>
>I would like to be able et replace '/var/log/ocmg/datastore.log' with 
>the
>logfile option given by the user at the command line.
>
>Any suggestions?

See http://stackoverflow.com/questions/18244050/

Jean-Paul


From jonas.brunsgaard at gmail.com  Sun Nov 24 16:55:51 2013
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Mon, 25 Nov 2013 00:55:51 +0100
Subject: [Twisted-Python] How to get ServerOptions in tac file.
In-Reply-To: <20131124204352.5996.765012586.divmod.xquotient.3@top>
References: <CACVXvXq80LojO-A=c3-TyzSfC3WAJrKvqZQ7u7B-S8pffk6jCA@mail.gmail.com>
 <20131124204352.5996.765012586.divmod.xquotient.3@top>
Message-ID: <CACVXvXpYcgLVLx5=_aKvAwE4RtitaSttPOOPdMzhNmdG+CQiaw@mail.gmail.com>

On Sun, Nov 24, 2013 at 9:43 PM, <exarkun at twistedmatrix.com> wrote:

> On 07:35 pm, jonas.brunsgaard at gmail.com wrote:
>
>> Is there an easy way get an options object from the  .tac file?
>>
>> I my .tac file i have the following.
>>
>> fh = logging.FileHandler('/var/log/ocmg/datastore.log')
>>
>> I would like to be able et replace '/var/log/ocmg/datastore.log' with the
>> logfile option given by the user at the command line.
>>
>> Any suggestions?
>>
>
> See http://stackoverflow.com/questions/18244050/


Okay. Thank you for the answer!

Does anyone know if there are any plans to update, the logging system
in twistd at some point, so it integrates better with native python logging
system?

I have to use the following logging scheme (glog - google logging)

I1125 00:38:34. 309273 140138991519488 log.py:443] Main loop terminated.
I1125 00:38:34. 309624 140138991519488 log.py:443] Server Shut Down.
I1125 00:41:09. 665297 140705081902848 log.py:443] Loaded.

would the easiest way to accomplich this be to just implement a
logger and use the --logger option with twisted?

Idealy I also need more log levels, is that possible?


> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131125/b3dd5595/attachment.html>

From yangyouxiu at gmail.com  Sun Nov 24 19:29:41 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Mon, 25 Nov 2013 10:29:41 +0800
Subject: [Twisted-Python] How to debug the client-server pyqt project using
	twisted framework?
Message-ID: <201311251029355552645@gmail.com>

Hi, all!
I'm developing an client-server pyqt application. Is there an easier way to debug? Now, I can only run client and server, then click the button on the client and watch responce of the server? 

What's the method and what's the tool?

Thanks all.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131125/923e281d/attachment.html>

From sank.daniel at gmail.com  Sun Nov 24 22:52:05 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sun, 24 Nov 2013 21:52:05 -0800
Subject: [Twisted-Python] How to debug the client-server pyqt project
 using twisted framework?
In-Reply-To: <201311251029355552645@gmail.com>
References: <201311251029355552645@gmail.com>
Message-ID: <CAKN9TDLit2nRQtJq+PDdH0RyrNh-rwckuR0Y4utW7JAY+3RQWw@mail.gmail.com>

Yangyouxiu,

I was recently trying to solve the same problem for my own project.
Twisted apparently has some built-in testing facilities:

http://twistedmatrix.com/documents/current/core/howto/trial.html

Does this help at all?


From yangyouxiu at gmail.com  Sun Nov 24 23:34:59 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Mon, 25 Nov 2013 14:34:59 +0800
Subject: [Twisted-Python] How to debug the client-server pyqt project
	using twisted framework?
References: <201311251029355552645@gmail.com>, 
 <CAKN9TDLit2nRQtJq+PDdH0RyrNh-rwckuR0Y4utW7JAY+3RQWw@mail.gmail.com>
Message-ID: <201311251434530260429@gmail.com>

Daniel Sank,
Thank you very much.
Trial may be a solution. But i have no idea about using trail in qt application testing. 

From: Daniel Sank
Date: 2013-11-25 13:52
To: Twisted general discussion
Subject: Re: [Twisted-Python] How to debug the client-server pyqt project using twisted framework?
Yangyouxiu,

I was recently trying to solve the same problem for my own project.
Twisted apparently has some built-in testing facilities:

http://twistedmatrix.com/documents/current/core/howto/trial.html

Does this help at all?

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131125/ee0ab27e/attachment.html>

From sank.daniel at gmail.com  Mon Nov 25 00:30:17 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sun, 24 Nov 2013 23:30:17 -0800
Subject: [Twisted-Python] How to debug the client-server pyqt project
 using twisted framework?
In-Reply-To: <201311251434530260429@gmail.com>
References: <201311251029355552645@gmail.com>
 <CAKN9TDLit2nRQtJq+PDdH0RyrNh-rwckuR0Y4utW7JAY+3RQWw@mail.gmail.com>
 <201311251434530260429@gmail.com>
Message-ID: <CAKN9TDL8tJ3aVSSHhbWRXLFp97oEzDFUJUEGvNyHAp0iVK-D3A@mail.gmail.com>

> But i have no idea about using trail in qt application testing.

Neither do I. As I said I'm trying to figure this out for myself as
well. If I learn anything useful I'll let you know.

I would say that you probably can write most of your application
without worrying about the GUI at all. In that case you should be able
to unit-test your program as you would any other program. What I've
been doing is just programming callbacks to do what will eventually be
done by users clicking buttons and that sort of thing.

I should add to this that I have _not_ figured out how to use Trial
with perspective broker yet.


From yangyouxiu at gmail.com  Mon Nov 25 00:35:44 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Mon, 25 Nov 2013 15:35:44 +0800
Subject: [Twisted-Python] How to debug the client-server pyqt project
	using twisted framework?
References: <201311251029355552645@gmail.com>, 
 <CAKN9TDLit2nRQtJq+PDdH0RyrNh-rwckuR0Y4utW7JAY+3RQWw@mail.gmail.com>, 
 <201311251434530260429@gmail.com>, 
 <CAKN9TDL8tJ3aVSSHhbWRXLFp97oEzDFUJUEGvNyHAp0iVK-D3A@mail.gmail.com>
Message-ID: <2013112515354057666511@gmail.com>

Daniel Sank,

Thanks very much. ^_^
From: Daniel Sank
Date: 2013-11-25 15:30
To: Twisted general discussion
Subject: Re: [Twisted-Python] How to debug the client-server pyqt project using twisted framework?
> But i have no idea about using trail in qt application testing.

Neither do I. As I said I'm trying to figure this out for myself as
well. If I learn anything useful I'll let you know.

I would say that you probably can write most of your application
without worrying about the GUI at all. In that case you should be able
to unit-test your program as you would any other program. What I've
been doing is just programming callbacks to do what will eventually be
done by users clicking buttons and that sort of thing.

I should add to this that I have _not_ figured out how to use Trial
with perspective broker yet.

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131125/cd1ee538/attachment-0001.html>

From ron at ronsdesk.com  Mon Nov 25 00:55:10 2013
From: ron at ronsdesk.com (Ron Segal)
Date: Mon, 25 Nov 2013 07:55:10 +0000 (UTC)
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
 <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>
 <81E2EC36-5D3E-44A1-A465-7381CBE695CB@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C53D@EXVMBX020-12.exch020.serverdata.net>
 <loom.20131123T061959-660@post.gmane.org>
 <CAFUtXGxAdweHn6Eam-JZ6tqzKyj+BDYRgSfG1gD4obn-NQ_26w@mail.gmail.com>
Message-ID: <loom.20131125T084957-644@post.gmane.org>

Maciej Wasilak <wasilak <at> gmail.com> writes:

> 
> Ron,
> 
> 
> Following with interest. ?Seeking a CoAP Python client capability that
includes:
> - Support for IPV6 to talk directly to server motes in constrained 6LoWPAN
> WSNs. (the large IPV6 address space is for me intrinsic to the IoT concept)
> - Security for the same, so presumably DTLS.
> Both of these needed and particularly security, for any serious monitoring
> and control applications.
> 
> 
> IPv6 is my target too. In general I've managed to run some tests with
txThings and Contiki 
> powered 6LoWPAN motes. My points below:1. Twisted doesn't officially
support UDP IPv6 yet - however there was great progress lately - see ticket
#5086 (http://twistedmatrix.com/trac/ticket/5086). Someone else should
probably comment on that, but it seems to be close to the finish line
> 
> 2. You can easily add unofficial IPv6 support (basic unicast) by modifying
twisted/internet/udp.py. I'll email you the details.
> 
> 3. There is a problem with txThings IPv6 server, because in most operating
systems source address of datagram is determined in round robin fashion. It
may cause the source address of the response to be different than
destination address of the request. CoAP client drops such responses and
sends RST. I haven't solved the problem yet. However if you need only client
you should be okay for now.
> 
> 4. DTLS is currently not supported. I agree it's a must for any real life
application. There are some Python DTLS implementations out there, but I
haven't tried to use them with Twisted yet.
> 
> 5. I don't know of any non-Twisted Python CoAP libraries with full IPv6
and DTLS support. This week there was CoAP Plugtest event in Las Vegas
(ended yesterday) - when IETF Core working group publishes some report, it
might be a good summary of existing CoAP implementations. According to the
first summary DTLS plugtest had 66% success rate - which means it's a though
topic. 
> 
> 
> Best regards
> 
> Maciej Wasilak
> 
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python <at> twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

Maciej, thank you, very interesting. But I guess not such good news for the
serious use of CoAP right now.

The percentage 'pass' for interoperability tests of DTLS are perhaps no
surprise, as unless a standard is very tight there will be slightly
different interpretations.

Really appreciate your providing details for getting an IPV6 CoAP client
working with Twisted.

Best wishes

Ron








From sangiovanni at nweb.it  Mon Nov 25 03:06:44 2013
From: sangiovanni at nweb.it (Fabio Sangiovanni)
Date: Mon, 25 Nov 2013 11:06:44 +0100
Subject: [Twisted-Python] [twisted.mail][newbie] return tempfail (4xx)
 after eomReceived()
In-Reply-To: <20131123120834.7593.1739550027.divmod.xquotient.0@top>
References: <52908511.2050706@nweb.it>
 <20131123120834.7593.1739550027.divmod.xquotient.0@top>
Message-ID: <52932134.2090109@nweb.it>

Hi,

thanks for your anwser, and forgive my late follow up.
So, I understand that this feature is currently missing in twisted. I 
suppose that the only thing to do in my case is to override the 
_messageHandled method, and implement all the logic needed to my 
purpose. Is this correct? Are you aware of some technique other people 
adopted?

Thanks a lot,
Fabio

On 23/11/13 13:08, exarkun at twistedmatrix.com wrote:
> On 10:36 am, sangiovanni at nweb.it wrote:
>> Hello list,
>>
>> I'm trying to code an SMTP server that stores received messages in a 
>> queue (es. RabbitMQ or Redis).
>> I'm figuring out how to do it with Twisted, and so far I managed to 
>> print to console the messages the way I want.
>> I'm trying to understand now how to return a tempfail code (4xx) from 
>> within eomReceived(), so to simulate (and, in the future, handle) 
>> temporary unavailabilities of the queuing system, and thus to 
>> delegate to the client the handling/retrying of the delivery (there 
>> will be postfix in front of my smtp server, so it will keep the 
>> message in its spool).
>> I ended up digging in the code until I found the _messageHandled 
>> callback of the SMTP class, that's added to the deferred returned by 
>> eomReceived. I admit I'm not very accustomed to deferreds yet, but I 
>> can only see 250 and 550 response code inside it. I suspect that I 
>> should return the 4xx code in one of the deferred's 
>> callbacks/errbacks *before* _messageHandled, but I really can't 
>> imagine how. Would you please give me some hints about how to 
>> accomplish the task? Am I looking to the right direction at all?
>
> See https://twistedmatrix.com/trac/ticket/4904
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at twistedmatrix.com  Mon Nov 25 04:33:28 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 25 Nov 2013 11:33:28 -0000
Subject: [Twisted-Python] logging (was: How to get ServerOptions in tac
	file.)
In-Reply-To: <CACVXvXpYcgLVLx5=_aKvAwE4RtitaSttPOOPdMzhNmdG+CQiaw@mail.gmail.com>
References: <CACVXvXq80LojO-A=c3-TyzSfC3WAJrKvqZQ7u7B-S8pffk6jCA@mail.gmail.com>
 <20131124204352.5996.765012586.divmod.xquotient.3@top>
 <CACVXvXpYcgLVLx5=_aKvAwE4RtitaSttPOOPdMzhNmdG+CQiaw@mail.gmail.com>
Message-ID: <20131125113328.6607.1820539344.divmod.xquotient.2@top>

On 24 Nov, 11:55 pm, jonas.brunsgaard at gmail.com wrote:
>
>Does anyone know if there are any plans to update, the logging system
>in twistd at some point, so it integrates better with native python 
>logging
>system?

What does "integrates better" mean?
>I have to use the following logging scheme (glog - google logging)
>
>I1125 00:38:34. 309273 140138991519488 log.py:443] Main loop 
>terminated.
>I1125 00:38:34. 309624 140138991519488 log.py:443] Server Shut Down.
>I1125 00:41:09. 665297 140705081902848 log.py:443] Loaded.
>
>would the easiest way to accomplich this be to just implement a
>logger and use the --logger option with twisted?
>
>Idealy I also need more log levels, is that possible?

twisted.python.log doesn't explicitly support log levels.  Instead, it 
supports arbitrary structured data (log levels are one example of this).

    log.msg(level="DEBUG", ...)

What else are you looking for?

Jean-Paul


From exarkun at twistedmatrix.com  Mon Nov 25 04:36:31 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 25 Nov 2013 11:36:31 -0000
Subject: [Twisted-Python] [twisted.mail][newbie] return tempfail (4xx)
 after eomReceived()
In-Reply-To: <52932134.2090109@nweb.it>
References: <52908511.2050706@nweb.it>
 <20131123120834.7593.1739550027.divmod.xquotient.0@top>
 <52932134.2090109@nweb.it>
Message-ID: <20131125113631.6607.608108631.divmod.xquotient.6@top>

On 10:06 am, sangiovanni at nweb.it wrote:
>Hi,
>
>thanks for your anwser, and forgive my late follow up.
>So, I understand that this feature is currently missing in twisted. I 
>suppose that the only thing to do in my case is to override the 
>_messageHandled method, and implement all the logic needed to my 
>purpose. Is this correct? Are you aware of some technique other people 
>adopted?

Names that start with "_" are private and subject to change in any new 
Twisted release.  In other words, there are no compatibility guarantees 
for such names.

If you're comfortable with future Twisted releases breaking this feature 
of your software then yes, this sounds like a workable approach.

Another approach would be to contribute to Twisted - help resolve the 
ticket I linked to by introducing a new public API for controling the 
response code.

Jean-Paul


From exarkun at twistedmatrix.com  Mon Nov 25 09:06:58 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 25 Nov 2013 16:06:58 -0000
Subject: [Twisted-Python] Bristol (England!) sprint hosted by
	HybridCluster
In-Reply-To: <20131108193110.8349.896392936.divmod.xquotient.542@top>
References: <20131105222539.8349.455028162.divmod.xquotient.262@top>
 <20131108193110.8349.896392936.divmod.xquotient.542@top>
Message-ID: <20131125160658.6607.687758537.divmod.xquotient.40@top>

On 8 Nov, 07:31 pm, exarkun at twistedmatrix.com wrote:
>On 5 Nov, 10:25 pm, exarkun at twistedmatrix.com wrote:
>>Greetings all,
>>
>>I'm pleased to invite you to join Tom Prince (2013 Twisted Fellow), 
>>Luke Marsden (founder of HybridCluster), and the HybridCluster team 
>>(including myself!) for the first Twisted sprint hosted by 
>>HybridCluster!
>>
>>The sprint will take place on December 7th in central Bristol (exact 
>>location to be determined) from 11AM until no one remains capable of 
>>higher brain function(*).
>
>Hello again,
>
>The exact location of the sprint has been selected.  The sprint will be 
>held at SETsquared Business Acceleration Centre, Bristol:
>
>http://goo.gl/maps/1HUsW

Hello everybody,

Just a reminder, there is a sprint!  There is now also a meetup page for 
the sprint, you can RSVP there if you like:

  http://bit.ly/1i8Pnq4

Jean-Paul


From m-lists at the-moon.net  Mon Nov 25 09:56:20 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Mon, 25 Nov 2013 16:56:20 +0000
Subject: [Twisted-Python] EDNS(0) and DNSSEC support in Twisted Names
Message-ID: <CABefbUqbyuAPRVb2P9AbkHvm=m9eH2rFSbsH2k6S6y1LYg09dA@mail.gmail.com>

Hello,

I'm happy to announce that I've won some funding from The NLnet
Foundation DNS Security Fund (http://www.nlnet.nl/dnssec/), to add
EDNS(0) and DNSSEC (and possibly DANE) support to Twisted.

The current project plan can be found here:
 * https://twistedmatrix.com/trac/wiki/EDNS0

If there are any DNS enthusiasts / experts on this list, I'd
appreciate your feedback -- on the plan and on the implementation (as
it evolves). Please reply to this email with your thoughts.

Tom Prince has kindly agreed to do some "express" code and design
reviews for me. That'll be a great help given the current length of
the review queue.
 * https://twistedmatrix.com/trac/report/25

But the more eyes on the code the better, so please consider helping
out with code reviews if you can. (I'm happy to trade reviews if
you've got your own branch / patch waiting to be reviewed.)

I've been given a head start in this project by the patches
contributed by Bob Novas and Phil Mayers, so thank you both. I hope
you'll be able monitor what I'm doing and steer me in the right
direction.

Thanks also to Itamar who encouraged me to apply for the funding and
to Tom Prince and everyone who helped me draft the proposal.

I'll be working on this at the Twisted Sprint in Bristol, UK on
December 7th; where I'll be delighted to discuss the project and
demonstrate what I've been up to. Hope to see you there!

-Richard Wall (rwall in #twisted and #twisted-dev)


From koblucki at yahoo.com  Mon Nov 25 12:27:42 2013
From: koblucki at yahoo.com (Krzysztof Oblucki)
Date: Mon, 25 Nov 2013 11:27:42 -0800 (PST)
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of an
	incoming message
Message-ID: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>

Hello,
I am trying to write an IMAP proxy to modify headers and the body of an incoming message using twisted. ?I am new to python and twisted so maybe this is why I either picked the wrong route or don't have the skills to get through some issues and I'm hoping that some you fine list members can point me in the right direction.

I started by using the IMAP4Client and IMAP4Server to do the proxying. ?However, I realized that in certain cases, the IMAP4Server requires synchronous results but since I need to do an async call using the client the handling is not working properly. ?I ran into this when implementing getFlags() in the IMessage and I am not sure how I can get out of this short of changing the IMAP4Server code to handle Deferreds.

Am I on the right track? ?Is imap4 lib the right tool for this job? ?If so, is modifying IMAP4Server to handle Deferreds the right thing to do? ?If not, what would you recommend?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131125/39575a82/attachment.html>

From glyph at twistedmatrix.com  Mon Nov 25 15:29:58 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Nov 2013 14:29:58 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed
	by Avatars?
In-Reply-To: <CAKN9TDJeswWiutcN1FVv=v03fSvCu1sSTVT2RDXthrk8uhQ+Ug@mail.gmail.com>
References: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
 <CAKN9TDJeswWiutcN1FVv=v03fSvCu1sSTVT2RDXthrk8uhQ+Ug@mail.gmail.com>
Message-ID: <925D310F-59DA-4B43-BCC3-DBE63FD18C62@twistedmatrix.com>


On Nov 22, 2013, at 11:20 AM, Daniel Sank <sank.daniel at gmail.com> wrote:

>> Question: Is there a way to distribute un-asked for references to
>> Viewables that properly get the perspective argument in their view_*
>> methods?
> 
> I think this is a pretty reasonable question but nobody's biting. Did
> I do something wrong in the way I asked?

This is what I was trying to answer when I said to construct and return a ViewPoint explicitly instead of hoping that it gets implicitly associated through the process of serialization.  If that's not the answer you were looking for, could you clarify the question?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131125/86e56be2/attachment.html>

From sank.daniel at gmail.com  Mon Nov 25 16:20:02 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 25 Nov 2013 15:20:02 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed
	by Avatars?
In-Reply-To: <925D310F-59DA-4B43-BCC3-DBE63FD18C62@twistedmatrix.com>
References: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
 <CAKN9TDJeswWiutcN1FVv=v03fSvCu1sSTVT2RDXthrk8uhQ+Ug@mail.gmail.com>
 <925D310F-59DA-4B43-BCC3-DBE63FD18C62@twistedmatrix.com>
Message-ID: <CAKN9TDLTb80wjD36iDa99GtZH+sEXva3eXWrhYXK5E0vc10YNg@mail.gmail.com>

>>> Question: Is there a way to distribute un-asked for references to
>>> Viewables that properly get the perspective argument in their view_*
>>> methods?
>>>
>>>
>> I think this is a pretty reasonable question but nobody's biting. Did
>> I do something wrong in the way I asked?
>>
>>
> This is what I was trying to answer when I said to construct and return a ViewPoint explicitly
> instead of hoping that it gets implicitly associated through the process of serialization.  If
> that's not the answer you were looking for, could you clarify the question?

You answered it for sure! The email in which I asked why nobody was
biting was sent before anyone responded. Thanks again :)

-Daniel


From anhquankitty at gmail.com  Mon Nov 25 21:05:24 2013
From: anhquankitty at gmail.com (Quan Tong Anh)
Date: Tue, 26 Nov 2013 11:05:24 +0700
Subject: [Twisted-Python] carbon-relay eating CPU - EAGAIN (Resource
	temporarily unavailable)?
Message-ID: <CAFQpocqEfiY4HNPFqnFXfW23aYK1keo+tAWOiZAy6iwVA39q3Q@mail.gmail.com>

 - Python 2.7.3
 - [twisted, version 13.1.0]
 - xen-domU

`atop` shows that `carbon-relay` is eating 80, 90% USRCPU. From the
`strace`:

    accept(7, {sa_family=AF_INET, sin_port=htons(60649),
sin_addr=inet_addr("192.237.222.81")}, [16]) = 257
    accept(7, {sa_family=AF_INET, sin_port=htons(51564),
sin_addr=inet_addr("166.78.1.48")}, [16]) = 257
    accept(7, 0x7ffff4679550, [16])         = -1 EAGAIN (Resource
temporarily unavailable)
    accept(7, {sa_family=AF_INET, sin_port=htons(33654),
sin_addr=inet_addr("198.61.194.248")}, [16]) = 257
    accept(7, {sa_family=AF_INET, sin_port=htons(50037),
sin_addr=inet_addr("166.78.181.204")}, [16]) = 257
    accept(7, 0x7ffff4679550, [16])         = -1 EAGAIN (Resource
temporarily unavailable)

The strange thing is: even restart the service, it seems stuck at fd 7
everytime running `strace`. Does it mean this fd is not being cleanup
properly?

I have increased the number of open files:

**/proc/2891/limits**

    Limit                     Soft Limit           Hard Limit
Units
    Max cpu time              unlimited            unlimited
 seconds
    Max file size             unlimited            unlimited
 bytes
    Max data size             unlimited            unlimited
 bytes
    Max stack size            8388608              unlimited
 bytes
    Max core file size        0                    unlimited
 bytes
    Max resident set          unlimited            unlimited
 bytes
    Max processes             15834                15834
 processes
    Max open files            16384                16384
 files
    Max locked memory         65536                65536
 bytes
    Max address space         unlimited            unlimited
 bytes
    Max file locks            unlimited            unlimited
 locks
    Max pending signals       15834                15834
 signals
    Max msgqueue size         819200               819200
bytes
    Max nice priority         0                    0
    Max realtime priority     0                    0
    Max realtime timeout      unlimited            unlimited            us


then it decreases down to ~ 50%.

My problem looks like similar to this [thread](
http://twistedmatrix.com/pipermail/twisted-python/2008-September/018361.html)
but since we have a few sockets in TIME_WAIT state, I don't think that
enable the `tw_recycle` can help. About the `tcp_syncookies`, I don't see
any related message in the syslog.

This is what I get when trying to start `carbon-relay` in debug mode:

    26/11/2013 02:22:14 :: [listener] MetricPickleReceiver connection with
50.56.249.127:48772 lost: Connection to the other side was lost in a
non-clean fashion: Connection lost.
    26/11/2013 02:22:14 :: [listener] MetricPickleReceiver connection with
198.101.241.101:50672 lost: Connection to the other side was lost in a
non-clean fashion: Connection lost.
    26/11/2013 02:22:14 :: [listener] MetricPickleReceiver connection with
166.78.2.167:43346 lost: Connection to the other side was lost in a
non-clean fashion: Connection lost.

This is from `twisted`:

    class ConnectionLost(ConnectionClosed):
        """Connection to the other side was lost in a non-clean fashion"""

        def __str__(self):
            s = self.__doc__.strip().splitlines()[0]
            if self.args:
                s = '%s: %s' % (s, ' '.join(self.args))
            s = '%s.' % s
            return s

I also have tried to [debug with `gdb`](
https://wiki.python.org/moin/DebuggingWithGdb) but `pystack` returns
nothing.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131126/70aae0d4/attachment-0001.html>

From p.mayers at imperial.ac.uk  Tue Nov 26 04:51:40 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 26 Nov 2013 11:51:40 +0000
Subject: [Twisted-Python] carbon-relay eating CPU - EAGAIN (Resource
 temporarily unavailable)?
In-Reply-To: <CAFQpocqEfiY4HNPFqnFXfW23aYK1keo+tAWOiZAy6iwVA39q3Q@mail.gmail.com>
References: <CAFQpocqEfiY4HNPFqnFXfW23aYK1keo+tAWOiZAy6iwVA39q3Q@mail.gmail.com>
Message-ID: <52948B4C.3010707@imperial.ac.uk>

On 26/11/13 04:05, Quan Tong Anh wrote:
>   - Python 2.7.3
>   - [twisted, version 13.1.0]
>   - xen-domU

I assume xen-domU means "Linux" as the guest OS; which kernel version, 
out of interest.

>
> `atop` shows that `carbon-relay` is eating 80, 90% USRCPU. From the

I don't know about anyone else, but I don't know what carbon-relay is. A 
quick google suggests it's part of that graphite monitoring/RRD 
replacement thing; which version are you running (Or: what reactor is it 
using)?

How many open files do you have?


> `strace`:

Without timestamps it's difficult to interpret this unambiguously; that 
could be a microsecond or minute we're seeing ;o)

> The strange thing is: even restart the service, it seems stuck at fd 7
> everytime running `strace`. Does it mean this fd is not being cleanup
> properly?

No. fd numbers are allocated starting from 0 and going upwards. The same 
process running the same startup code every time will tend (not always, 
since it's order-dependent) to use the same file descriptors for the 
same things, modulo close/open events.


From anhquankitty at gmail.com  Tue Nov 26 06:54:39 2013
From: anhquankitty at gmail.com (Quan Tong Anh)
Date: Tue, 26 Nov 2013 20:54:39 +0700
Subject: [Twisted-Python] carbon-relay eating CPU - EAGAIN (Resource
 temporarily unavailable)?
In-Reply-To: <52948B4C.3010707@imperial.ac.uk>
References: <CAFQpocqEfiY4HNPFqnFXfW23aYK1keo+tAWOiZAy6iwVA39q3Q@mail.gmail.com>
 <52948B4C.3010707@imperial.ac.uk>
Message-ID: <CAFQpocqVcYNBAfffCVkpCArr_yHVT4foQAsvdciwxdaf-0LKZg@mail.gmail.com>

On Tue, Nov 26, 2013 at 6:51 PM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

>
> I assume xen-domU means "Linux" as the guest OS; which kernel version, out
> of interest.


3.2.0-53-virtual


>
> I don't know about anyone else, but I don't know what carbon-relay is. A
> quick google suggests it's part of that graphite monitoring/RRD replacement
> thing; which version are you running (Or: what reactor is it using)?
>

Yes, it's here:
https://graphite.readthedocs.org/en/latest/carbon-daemons.html#carbon-relay-py

The version I'm using is 0.9.12.


>
> How many open files do you have?
>

1664.


>
>
>  `strace`:
>>
>
> Without timestamps it's difficult to interpret this unambiguously; that
> could be a microsecond or minute we're seeing ;o)


Here's for you:

13:51:31 accept(7, {sa_family=AF_INET, sin_port=htons(57236),
sin_addr=inet_addr("198.61.194.221")}, [16]) = 216

13:51:31 accept(7, {sa_family=AF_INET, sin_port=htons(39755),
sin_addr=inet_addr("50.56.175.61")}, [16]) = 216

13:51:31 accept(7, 0x7fff2eebc270, [16]) = -1 EAGAIN (Resource temporarily
unavailable)

13:51:31 accept(7, {sa_family=AF_INET, sin_port=htons(49236),
sin_addr=inet_addr("198.101.238.239")}, [16]) = 216

13:51:31 accept(7, {sa_family=AF_INET, sin_port=htons(49639),
sin_addr=inet_addr("166.78.2.103")}, [16]) = 216
13:51:31 accept(7, 0x7fff2eebc270, [16]) = -1 EAGAIN (Resource temporarily
unavailable)
...

There are about 20 to 30 connections per second.


>> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131126/ac20f814/attachment.html>

From radix at twistedmatrix.com  Tue Nov 26 08:07:42 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 26 Nov 2013 09:07:42 -0600
Subject: [Twisted-Python] carbon-relay eating CPU - EAGAIN (Resource
 temporarily unavailable)?
In-Reply-To: <CAFQpocqEfiY4HNPFqnFXfW23aYK1keo+tAWOiZAy6iwVA39q3Q@mail.gmail.com>
References: <CAFQpocqEfiY4HNPFqnFXfW23aYK1keo+tAWOiZAy6iwVA39q3Q@mail.gmail.com>
Message-ID: <CAPkRfUTJ76nxXeFMSXUYt-woBKWAqXDrtxHqKz8XfinKFt7ibA@mail.gmail.com>

Hi Quan Tong Anh.

On Mon, Nov 25, 2013 at 10:05 PM, Quan Tong Anh <anhquankitty at gmail.com>wrote:

>  - Python 2.7.3
>  - [twisted, version 13.1.0]
>  - xen-domU
>
> `atop` shows that `carbon-relay` is eating 80, 90% USRCPU. From the
> `strace`:
>
>     accept(7, {sa_family=AF_INET, sin_port=htons(60649),
> sin_addr=inet_addr("192.237.222.81")}, [16]) = 257
>     accept(7, {sa_family=AF_INET, sin_port=htons(51564),
> sin_addr=inet_addr("166.78.1.48")}, [16]) = 257
>     accept(7, 0x7ffff4679550, [16])         = -1 EAGAIN (Resource
> temporarily unavailable)
>     accept(7, {sa_family=AF_INET, sin_port=htons(33654),
> sin_addr=inet_addr("198.61.194.248")}, [16]) = 257
>     accept(7, {sa_family=AF_INET, sin_port=htons(50037),
> sin_addr=inet_addr("166.78.181.204")}, [16]) = 257
>     accept(7, 0x7ffff4679550, [16])         = -1 EAGAIN (Resource
> temporarily unavailable)
>
> The strange thing is: even restart the service, it seems stuck at fd 7
> everytime running `strace`. Does it mean this fd is not being cleanup
> properly?
>

You have given a lot of data, but haven't actually described a problem.
Nothing is "stuck" at FD 7, it's simply a listening socket file descriptor,
and the way listening sockets work is you call accept() repeatedly on them
to get incoming connections.

accept() returning EAGAIN is normal behavior and should basically be
ignored. Twisted handles this case appropriately. From the man page:

       EAGAIN or EWOULDBLOCK
              The socket is marked nonblocking and no connections are
present to be accepted.  POSIX.1-2001 allows either error to be returned
for this case, and does not require these constants to have the same value,
so a portable application should check for both possibilities.

Is there actually something wrong with your service? Can you explain the
behavior you're seeing and how it differs from the behavior you want to
see? If the problem is only "carbon uses a lot of CPU", maybe the problem
is either just that carbon is inefficient or you need to scale up to more
instances?



-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131126/3c5066a4/attachment.html>

From peter.westlake at pobox.com  Wed Nov 27 07:58:30 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Wed, 27 Nov 2013 14:58:30 +0000
Subject: [Twisted-Python] Could Service.startService return a Deferred?
Message-ID: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>

I have a Twisted application with several Services. One of them has a
startService method that does some setup asynchronously. This can go
wrong if the next service to start makes a call to the first one, and it
isn't ready yet. One way round it would be to make all methods on the
slow service returned a Deferred (e.g.
"self.slow_init.addCallback(self.actual_method)", but it seems a shame
to have to do that every time when the situation only occurs when the
daemon starts up. So would it be possible for t.a.s.Service.startService
to be allowed to return a Deferred? Then the next service would only be
started up when the Deferred fired.

Peter.


From haggardii at gmail.com  Wed Nov 27 08:33:26 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Wed, 27 Nov 2013 08:33:26 -0700
Subject: [Twisted-Python] Could Service.startService return a Deferred?
In-Reply-To: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
References: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
Message-ID: <CAL+xXwOosjXAKn3qYNiVH9TxJphBF1Yjf_f+64ei7=a4vf-Buw@mail.gmail.com>

Peter,

I assume you're using a MultiService to hold all of these services.
You could delay adding the dependent services to the MultiService
until the setup service has finished doing what it does.

For instance, something like this (untested):

class SetupService(Service):

    def __init__(self):
        self.done = defer.Deferred()

    def startService(self):
        # do things
        self.done.callback(None)


def makeService(...):
    ms = MultiService()

    setup = SetupService()
    setup.done.addCallback(addTheOtherServicesTo, ms)


Or maybe there's a better built-in way to do this that I don't know about.

Matt


On Wed, Nov 27, 2013 at 7:58 AM, Peter Westlake
<peter.westlake at pobox.com> wrote:
> I have a Twisted application with several Services. One of them has a
> startService method that does some setup asynchronously. This can go
> wrong if the next service to start makes a call to the first one, and it
> isn't ready yet. One way round it would be to make all methods on the
> slow service returned a Deferred (e.g.
> "self.slow_init.addCallback(self.actual_method)", but it seems a shame
> to have to do that every time when the situation only occurs when the
> daemon starts up. So would it be possible for t.a.s.Service.startService
> to be allowed to return a Deferred? Then the next service would only be
> started up when the Deferred fired.
>
> Peter.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From sank.daniel at gmail.com  Wed Nov 27 09:34:24 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Wed, 27 Nov 2013 08:34:24 -0800
Subject: [Twisted-Python] Why must RemoteCacheObservers be hashable?
Message-ID: <CAKN9TDJW7CVBqECOqwtW3eKGpkp0sYj=tDopqqEgODfN9btF5A@mail.gmail.com>

I just wrote up a class that allows dicts to be be pb.Cacheable.
Everything works hunky-dory but only if I implement __hash__, which is
problematic for mutable objects for reasons explained thoroughly
elsewhere. The problem comes from
twisted.spread.flavors.RemoteCacheObserver:

class RemoteCacheObserver:
...
    def __hash__(self):
        """Generate a hash unique to all L{RemoteCacheObserver}s for
this broker/perspective/cached triplet
        """

        return (  (hash(self.broker) % 2**10)
                + (hash(self.perspective) % 2**10)
                + (hash(self.cached) % 2**10))

As we can see, self.cached (which is the pb.Cacheable instance) must
be hashable.

Why?


From exarkun at twistedmatrix.com  Wed Nov 27 10:13:41 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 27 Nov 2013 17:13:41 -0000
Subject: [Twisted-Python] Could Service.startService return a Deferred?
In-Reply-To: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
References: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
Message-ID: <20131127171341.6892.508316338.divmod.xquotient.3@top>

On 02:58 pm, peter.westlake at pobox.com wrote:
>I have a Twisted application with several Services. One of them has a
>startService method that does some setup asynchronously. This can go
>wrong if the next service to start makes a call to the first one, and 
>it
>isn't ready yet. One way round it would be to make all methods on the
>slow service returned a Deferred (e.g.
>"self.slow_init.addCallback(self.actual_method)", but it seems a shame
>to have to do that every time when the situation only occurs when the
>daemon starts up. So would it be possible for 
>t.a.s.Service.startService
>to be allowed to return a Deferred? Then the next service would only be
>started up when the Deferred fired.

Probably not.

There is some discussion on 
<https://twistedmatrix.com/trac/ticket/5941>.

Jean-Paul


From peter.westlake at pobox.com  Wed Nov 27 11:00:46 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Wed, 27 Nov 2013 18:00:46 +0000
Subject: [Twisted-Python] Could Service.startService return a Deferred?
In-Reply-To: <20131127171341.6892.508316338.divmod.xquotient.3@top>
References: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
 <20131127171341.6892.508316338.divmod.xquotient.3@top>
Message-ID: <1385575246.2688.52810605.13D011CA@webmail.messagingengine.com>

On Wed, Nov 27, 2013, at 17:13, exarkun at twistedmatrix.com wrote:
> On 02:58 pm, peter.westlake at pobox.com wrote:
> ... So would it be possible for 
> >t.a.s.Service.startService
> >to be allowed to return a Deferred? Then the next service would only be
> >started up when the Deferred fired.
> 
> Probably not.
> 
> There is some discussion on 
> <https://twistedmatrix.com/trac/ticket/5941>.

That's helpful, thanks. I hadn't realized that startService was called
before the reactor started.

Instead, I've passed in a Deferred to each service that needs to wait.
How does this look?

# -*- mode: python -*-
from twisted.application import service
from twisted.internet import defer, reactor
from twisted.internet.task import deferLater

application = service.Application('Dependencies')

def report(error):
    print 'ERROR', error
    reactor.stop()

class Runner(service.Service):
    def __init__(self, baton):
        self.baton = baton

    def startService(self):
        print 'startService', self.name, reactor.running
        self.baton.addCallback(lambda ignore:deferLater(reactor, 1.0,
        self.realStartService))
        self.baton.addErrback(report)

    def realStartService(self):
        print 'realStartService', self.name, reactor.running

baton = defer.succeed('pass me to each service')

foo = Runner(baton)
foo.setName('foo')
foo.setServiceParent(application)

bar = Runner(baton)
bar.setName('bar')
bar.setServiceParent(application)

Peter.




From exarkun at twistedmatrix.com  Wed Nov 27 12:20:18 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 27 Nov 2013 19:20:18 -0000
Subject: [Twisted-Python] Could Service.startService return a Deferred?
In-Reply-To: <1385575246.2688.52810605.13D011CA@webmail.messagingengine.com>
References: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
 <20131127171341.6892.508316338.divmod.xquotient.3@top>
 <1385575246.2688.52810605.13D011CA@webmail.messagingengine.com>
Message-ID: <20131127192018.6892.1747918954.divmod.xquotient.22@top>

On 06:00 pm, peter.westlake at pobox.com wrote:
>On Wed, Nov 27, 2013, at 17:13, exarkun at twistedmatrix.com wrote:
>>On 02:58 pm, peter.westlake at pobox.com wrote:
>>... So would it be possible for
>> >t.a.s.Service.startService
>> >to be allowed to return a Deferred? Then the next service would only 
>>be
>> >started up when the Deferred fired.
>>
>>Probably not.
>>
>>There is some discussion on
>><https://twistedmatrix.com/trac/ticket/5941>.
>
>That's helpful, thanks. I hadn't realized that startService was called
>before the reactor started.
>
>Instead, I've passed in a Deferred to each service that needs to wait.
>How does this look?
>
># -*- mode: python -*-
>from twisted.application import service
>from twisted.internet import defer, reactor
>from twisted.internet.task import deferLater
>
>application = service.Application('Dependencies')
>
>def report(error):
>    print 'ERROR', error
>    reactor.stop()
>
>class Runner(service.Service):
>    def __init__(self, baton):
>        self.baton = baton
>
>    def startService(self):
>        print 'startService', self.name, reactor.running
>        self.baton.addCallback(lambda ignore:deferLater(reactor, 1.0,
>        self.realStartService))
>        self.baton.addErrback(report)

I'd be concerned with the state of `Runner` at this point in the 
process.

What happens if the application gets shut down while that `deferLater` 
is still pending?

`stopService` has a harder job because it might need to deal with a 
service that is partially initialized or a service that is completely 
initialized (and "partially initialized" may cover a multitude of 
different states depending on the complexity of your service).
>
>    def realStartService(self):
>        print 'realStartService', self.name, reactor.running
>
>baton = defer.succeed('pass me to each service')
>
>foo = Runner(baton)
>foo.setName('foo')
>foo.setServiceParent(application)
>
>bar = Runner(baton)
>bar.setName('bar')
>bar.setServiceParent(application)

What about something like this instead?

  @implementer(IService)
  class Runner(object):
      ...
      @classmethod
      def loadFromWhatever(cls, name):
          return deferLater(reactor, Runner, name)

      def __init__(self, name):
          self.name = name

      def startService(self):
          self.running = True
          print 'realStartService', self.name, reactor.running

  def parent(service):
      application.setServiceParent(service)

  loading = Runner.initializeFromWhatever("foo")
  loading.addCallback(parent)
  loading.addCallback(lambda ignored: 
Runner.initializeFromWhatever("bar"))
  loading.addCallback(parent)
  loading.addErrback(stopTheReactorOrWhatever)

The advantage I see of this approach is that a `Runner` never exists in
the service hierarchy until it is fully initialized, started, and 
running.

If a `Runner` is only partially ready and the process shuts down then 
its `stopService` method isn't called because it's not part of the 
service hierarchy.

I could definitely imagine a library to help with this kind of thing. 
For example, perhaps you want the above encapsulated as:

  asynchronouslySetUpServices(application, [
      lambda: Runner.initializeFromWhatever("foo"),
      lambda: Runner.initialifrFromWhatever("bar")])

And maybe then you want to add in some logic so that if the application 
gets shut down while some things are still being initialized then you 
cancel their Deferred.  Then you have good cleanup support for the 
uninitialized case - without complicating `stopService` (the cleanup 
logic is isolated in the implementation of Deferred cancellation where 
it belongs - eg, with this `deferLater`-based asynchronousness it's 
alreay present since deferLater implements cancellation already).

Jean-Paul


From glyph at twistedmatrix.com  Wed Nov 27 15:14:20 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 27 Nov 2013 14:14:20 -0800
Subject: [Twisted-Python] EDNS(0) and DNSSEC support in Twisted Names
In-Reply-To: <CABefbUqbyuAPRVb2P9AbkHvm=m9eH2rFSbsH2k6S6y1LYg09dA@mail.gmail.com>
References: <CABefbUqbyuAPRVb2P9AbkHvm=m9eH2rFSbsH2k6S6y1LYg09dA@mail.gmail.com>
Message-ID: <F2EA75CC-52A7-4526-82FE-6538928D3BEF@twistedmatrix.com>


On Nov 25, 2013, at 8:56 AM, Richard Wall <m-lists at the-moon.net> wrote:

> Hello,
> 
> I'm happy to announce that I've won some funding from The NLnet
> Foundation DNS Security Fund (http://www.nlnet.nl/dnssec/), to add
> EDNS(0) and DNSSEC (and possibly DANE) support to Twisted.
> 
> The current project plan can be found here:
> * https://twistedmatrix.com/trac/wiki/EDNS0
> 
> If there are any DNS enthusiasts / experts on this list, I'd
> appreciate your feedback -- on the plan and on the implementation (as
> it evolves). Please reply to this email with your thoughts.
> 
> Tom Prince has kindly agreed to do some "express" code and design
> reviews for me. That'll be a great help given the current length of
> the review queue.
> * https://twistedmatrix.com/trac/report/25
> 
> But the more eyes on the code the better, so please consider helping
> out with code reviews if you can. (I'm happy to trade reviews if
> you've got your own branch / patch waiting to be reviewed.)
> 
> I've been given a head start in this project by the patches
> contributed by Bob Novas and Phil Mayers, so thank you both. I hope
> you'll be able monitor what I'm doing and steer me in the right
> direction.
> 
> Thanks also to Itamar who encouraged me to apply for the funding and
> to Tom Prince and everyone who helped me draft the proposal.
> 
> I'll be working on this at the Twisted Sprint in Bristol, UK on
> December 7th; where I'll be delighted to discuss the project and
> demonstrate what I've been up to. Hope to see you there!
> 
> -Richard Wall (rwall in #twisted and #twisted-dev)

Congratulations, Richard.  Thanks a ton for helping to improve twisted.names.  Lack of DNSSEC has been a sore point with a few people I've talked to about adopting twisted.names in favor of ... shall we say, "legacy" DNS solutions ;-).

-glyph

From koblucki at yahoo.com  Wed Nov 27 17:02:40 2013
From: koblucki at yahoo.com (Krzysztof Oblucki)
Date: Wed, 27 Nov 2013 16:02:40 -0800 (PST)
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of
	an incoming message
In-Reply-To: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
References: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
Message-ID: <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>

Maybe I asked the wrong question? ?Is it possible to use the imap4 library from twisted to write an imap4 proxy?


________________________________
 From: Krzysztof Oblucki <koblucki at yahoo.com>
To: "twisted-python at twistedmatrix.com" <twisted-python at twistedmatrix.com> 
Sent: Monday, November 25, 2013 11:27 AM
Subject: IMAP4 Proxy to add headers and modify body of an incoming message
 


Hello,
I am trying to write an IMAP proxy to modify headers and the body of an incoming message using twisted. ?I am new to python and twisted so maybe this is why I either picked the wrong route or don't have the skills to get through some issues and I'm hoping that some you fine list members can point me in the right direction.

I started by using the IMAP4Client and IMAP4Server to do the proxying. ?However, I realized that in certain cases, the IMAP4Server requires synchronous results but since I need to do an async call using the client the handling is not working properly. ?I ran into this when implementing getFlags() in the IMessage and I am not sure how I can get out of this short of changing the IMAP4Server code to handle Deferreds.

Am I on the right track? ?Is imap4 lib the right tool for this job? ?If so, is modifying IMAP4Server to handle Deferreds the right thing to do? ?If not, what would you recommend?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131127/614b175d/attachment.html>

From exarkun at twistedmatrix.com  Wed Nov 27 18:18:10 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 28 Nov 2013 01:18:10 -0000
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of
 an incoming message
In-Reply-To: <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>
References: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>
Message-ID: <20131128011810.6892.1184824544.divmod.xquotient.36@top>

>From: Krzysztof Oblucki <koblucki at yahoo.com>
>To: "twisted-python at twistedmatrix.com" <twisted- 
>python at twistedmatrix.com>
>Sent: Monday, November 25, 2013 11:27 AM
>Subject: IMAP4 Proxy to add headers and modify body of an incoming 
>message
>
>Hello,
>I am trying to write an IMAP proxy to modify headers and the body of an 
>incoming message using twisted. ?I am new to python and twisted so 
>maybe this is why I either picked the wrong route or don't have the 
>skills to get through some issues and I'm hoping that some you fine 
>list members can point me in the right direction.
>
>I started by using the IMAP4Client and IMAP4Server to do the proxying. 
>However, I realized that in certain cases, the IMAP4Server requires 
>synchronous results but since I need to do an async call using the 
>client the handling is not working properly. ?I ran into this when 
>implementing getFlags() in the IMessage and I am not sure how I can get 
>out of this short of changing the IMAP4Server code to handle Deferreds.
>
>Am I on the right track? ?Is imap4 lib the right tool for this job? ?If 
>so, is modifying IMAP4Server to handle Deferreds the right thing to do? 
>If not, what would you recommend?

Sounds like you diagnosed the problem correctly.  IMAP4Server needs to 
handle Deferreds here and doesn't currently.

Jean-Paul


From koblucki at yahoo.com  Wed Nov 27 19:39:13 2013
From: koblucki at yahoo.com (Krzysztof Oblucki)
Date: Wed, 27 Nov 2013 18:39:13 -0800 (PST)
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of
	an incoming message
In-Reply-To: <20131128011810.6892.1184824544.divmod.xquotient.36@top>
References: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>
 <20131128011810.6892.1184824544.divmod.xquotient.36@top>
Message-ID: <1385606353.19825.YahooMailNeo@web181604.mail.ne1.yahoo.com>

Awesome, that's what I've been trying to do for the past couple of days. ?Definitely learning a lot of new things :)


________________________________
 From: "exarkun at twistedmatrix.com" <exarkun at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Wednesday, November 27, 2013 5:18 PM
Subject: Re: [Twisted-Python] IMAP4 Proxy to add headers and modify body of an incoming message
 

> From: Krzysztof Oblucki <koblucki at yahoo.com>
> To: "twisted-python at twistedmatrix.com" <twisted- python at twistedmatrix.com>
> Sent: Monday, November 25, 2013 11:27 AM
> Subject: IMAP4 Proxy to add headers and modify body of an incoming message
> 
> Hello,
> I am trying to write an IMAP proxy to modify headers and the body of an incoming message using twisted. ?I am new to python and twisted so maybe this is why I either picked the wrong route or don't have the skills to get through some issues and I'm hoping that some you fine list members can point me in the right direction.
> 
> I started by using the IMAP4Client and IMAP4Server to do the proxying. However, I realized that in certain cases, the IMAP4Server requires synchronous results but since I need to do an async call using the client the handling is not working properly. ?I ran into this when implementing getFlags() in the IMessage and I am not sure how I can get out of this short of changing the IMAP4Server code to handle Deferreds.
> 
> Am I on the right track? ?Is imap4 lib the right tool for this job? ?If so, is modifying IMAP4Server to handle Deferreds the right thing to do? If not, what would you recommend?

Sounds like you diagnosed the problem correctly.? IMAP4Server needs to handle Deferreds here and doesn't currently.

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131127/d564bbf5/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Nov 28 00:34:08 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 27 Nov 2013 23:34:08 -0800
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of
	an incoming message
In-Reply-To: <1385606353.19825.YahooMailNeo@web181604.mail.ne1.yahoo.com>
References: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>
 <20131128011810.6892.1184824544.divmod.xquotient.36@top>
 <1385606353.19825.YahooMailNeo@web181604.mail.ne1.yahoo.com>
Message-ID: <1E59951F-686C-40B1-A7F3-0529A612B8A2@twistedmatrix.com>


On Nov 27, 2013, at 6:39 PM, Krzysztof Oblucki <koblucki at yahoo.com> wrote:
>>> Am I on the right track?  Is imap4 lib the right tool for this job?  If so, is modifying IMAP4Server to handle Deferreds the right thing to do? If not, what would you recommend?
>> 
>> Sounds like you diagnosed the problem correctly.  IMAP4Server needs to handle Deferreds here and doesn't currently.
> Awesome, that's what I've been trying to do for the past couple of days.  Definitely learning a lot of new things :)

Perhaps you should file a ticket for this?  (Searching for one first, of course, to see if it already exists).

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131127/cb56fca9/attachment.html>

From peter.westlake at pobox.com  Thu Nov 28 08:01:16 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Thu, 28 Nov 2013 15:01:16 +0000
Subject: [Twisted-Python] Could Service.startService return a Deferred?
In-Reply-To: <20131127192018.6892.1747918954.divmod.xquotient.22@top>
References: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
 <20131127171341.6892.508316338.divmod.xquotient.3@top>
 <1385575246.2688.52810605.13D011CA@webmail.messagingengine.com>
 <20131127192018.6892.1747918954.divmod.xquotient.22@top>
Message-ID: <1385650876.9277.53151729.78F55A96@webmail.messagingengine.com>

On Wed, Nov 27, 2013, at 19:20, exarkun at twistedmatrix.com wrote:
> On 06:00 pm, peter.westlake at pobox.com wrote:
... 

> >class Runner(service.Service):
> >    def __init__(self, baton):
> >        self.baton = baton
> >
> >    def startService(self):
> >        print 'startService', self.name, reactor.running
> >        self.baton.addCallback(lambda ignore:deferLater(reactor, 1.0,
> >        self.realStartService))
> >        self.baton.addErrback(report)
> 
> I'd be concerned with the state of `Runner` at this point in the 
> process.
> 
> What happens if the application gets shut down while that `deferLater` 
> is still pending?
> 
> `stopService` has a harder job because it might need to deal with a 
> service that is partially initialized or a service that is completely 
> initialized (and "partially initialized" may cover a multitude of 
> different states depending on the complexity of your service).
> >
...
> 
> What about something like this instead?
> 
>   @implementer(IService)
>   class Runner(object):
>       ...
>       @classmethod
>       def loadFromWhatever(cls, name):
>           return deferLater(reactor, Runner, name)
> 
>       def __init__(self, name):
>           self.name = name
> 
>       def startService(self):
>           self.running = True
>           print 'realStartService', self.name, reactor.running
> 
>   def parent(service):
>       application.setServiceParent(service)
> 
>   loading = Runner.initializeFromWhatever("foo")
>   loading.addCallback(parent)
>   loading.addCallback(lambda ignored: 
> Runner.initializeFromWhatever("bar"))
>   loading.addCallback(parent)
>   loading.addErrback(stopTheReactorOrWhatever)
> 
> The advantage I see of this approach is that a `Runner` never exists in
> the service hierarchy until it is fully initialized, started, and 
> running.
> 
> If a `Runner` is only partially ready and the process shuts down then 
> its `stopService` method isn't called because it's not part of the 
> service hierarchy.

I'll do that, thank you!

Could the documentation for Service say something about which methods
can be called when? For instance, it would never have occurred to me
that
setServiceParent could be called after control had passed out of the
.tac
file and the reactor had started running. I see from the source that it
calls
startService, but this is definitely the sort of non-obvious tip that it
would
be helpful to have written down. Likewise the fact that startService
normally runs before the reactor starts.

Out of interest, was there a reason for not making Runner a subclass
of Service? There are some methods of IService that this version
doesn't implement.

> I could definitely imagine a library to help with this kind of thing. 
> For example, perhaps you want the above encapsulated as:
> 
>   asynchronouslySetUpServices(application, [
>       lambda: Runner.initializeFromWhatever("foo"),
>       lambda: Runner.initialifrFromWhatever("bar")])
> 
> And maybe then you want to add in some logic so that if the application 
> gets shut down while some things are still being initialized then you 
> cancel their Deferred.  Then you have good cleanup support for the 
> uninitialized case - without complicating `stopService` (the cleanup 
> logic is isolated in the implementation of Deferred cancellation where 
> it belongs - eg, with this `deferLater`-based asynchronousness it's 
> alreay present since deferLater implements cancellation already).

I'll add it to my list of things to do one of these years :-)
Would you like to put in a ticket with a spec?

Thanks for the help,

Peter.


From dustin at v.igoro.us  Thu Nov 28 08:25:37 2013
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Thu, 28 Nov 2013 10:25:37 -0500
Subject: [Twisted-Python] Could Service.startService return a Deferred?
In-Reply-To: <1385650876.9277.53151729.78F55A96@webmail.messagingengine.com>
References: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
 <20131127171341.6892.508316338.divmod.xquotient.3@top>
 <1385575246.2688.52810605.13D011CA@webmail.messagingengine.com>
 <20131127192018.6892.1747918954.divmod.xquotient.22@top>
 <1385650876.9277.53151729.78F55A96@webmail.messagingengine.com>
Message-ID: <CAJtE5vQ1v-CXYCzZSWBFSxUnY-KYGndc87n3PygRU4NiAHTRhw@mail.gmail.com>

This is kind of an ongoing bugaboo for me, too.  Buildbot uses
services *heavily*, and at runtime (to support reconfigs, etc.).
We've had to work around issues like stop being called before
asynchronous starts complete using DeferredLocks and other such fun.

I filed a bug with some of my issues -
https://twistedmatrix.com/trac/ticket/6813

It'd be great to fix some of this in the existing implementation, but
#4366 seems to demonstrate that this is impossible without breaking
compatibility.  So, maybe we need to introduce a new service hierarchy
-- perhaps with some ability to use the existing Service classes as
child services.

I'd be interested to hear thoughts on the matter.

Dustin


From peter.westlake at pobox.com  Thu Nov 28 09:39:40 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Thu, 28 Nov 2013 16:39:40 +0000
Subject: [Twisted-Python] Could Service.startService return a Deferred?
In-Reply-To: <20131127192018.6892.1747918954.divmod.xquotient.22@top>
References: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
 <20131127171341.6892.508316338.divmod.xquotient.3@top>
 <1385575246.2688.52810605.13D011CA@webmail.messagingengine.com>
 <20131127192018.6892.1747918954.divmod.xquotient.22@top>
Message-ID: <1385656780.17501.53203789.460B4572@webmail.messagingengine.com>

On Wed, Nov 27, 2013, at 19:20, exarkun at twistedmatrix.com wrote:
... 
> What about something like this instead?
> 
>   @implementer(IService)
>   class Runner(object):
>       ...
>       @classmethod
>       def loadFromWhatever(cls, name):
>           return deferLater(reactor, Runner, name)
> 
>       def __init__(self, name):
>           self.name = name
> 
>       def startService(self):
>           self.running = True
>           print 'realStartService', self.name, reactor.running
> 
>   def parent(service):
>       application.setServiceParent(service)

A small detail: should this be service.setServiceParent(application)?

Peter.
 
>   loading = Runner.initializeFromWhatever("foo")
>   loading.addCallback(parent)
>   loading.addCallback(lambda ignored: 
> Runner.initializeFromWhatever("bar"))
>   loading.addCallback(parent)
>   loading.addErrback(stopTheReactorOrWhatever)
> 
> The advantage I see of this approach is that a `Runner` never exists in
> the service hierarchy until it is fully initialized, started, and 
> running.
> 
> If a `Runner` is only partially ready and the process shuts down then 
> its `stopService` method isn't called because it's not part of the 
> service hierarchy.
> 
> I could definitely imagine a library to help with this kind of thing. 
> For example, perhaps you want the above encapsulated as:
> 
>   asynchronouslySetUpServices(application, [
>       lambda: Runner.initializeFromWhatever("foo"),
>       lambda: Runner.initialifrFromWhatever("bar")])
> 
> And maybe then you want to add in some logic so that if the application 
> gets shut down while some things are still being initialized then you 
> cancel their Deferred.  Then you have good cleanup support for the 
> uninitialized case - without complicating `stopService` (the cleanup 
> logic is isolated in the implementation of Deferred cancellation where 
> it belongs - eg, with this `deferLater`-based asynchronousness it's 
> alreay present since deferLater implements cancellation already).
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From koblucki at yahoo.com  Thu Nov 28 13:10:43 2013
From: koblucki at yahoo.com (Krzysztof Oblucki)
Date: Thu, 28 Nov 2013 12:10:43 -0800
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of
	an incoming message
In-Reply-To: <1E59951F-686C-40B1-A7F3-0529A612B8A2@twistedmatrix.com>
References: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>
 <20131128011810.6892.1184824544.divmod.xquotient.36@top>
 <1385606353.19825.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1E59951F-686C-40B1-A7F3-0529A612B8A2@twistedmatrix.com>
Message-ID: <A0CE1AC5-9FF2-44B4-A03B-F9C4A2AFB772@yahoo.com>

I will do that. I'm struggling with doing this myself so far because of my noobness but making small progress every day.

Sent from my BatPhone

> On Nov 27, 2013, at 23:34, Glyph <glyph at twistedmatrix.com> wrote:
> 
> 
> On Nov 27, 2013, at 6:39 PM, Krzysztof Oblucki <koblucki at yahoo.com> wrote:
>>>> Am I on the right track?  Is imap4 lib the right tool for this job?  If so, is modifying IMAP4Server to handle Deferreds the right thing to do? If not, what would you recommend?
>>> 
>>> Sounds like you diagnosed the problem correctly.  IMAP4Server needs to handle Deferreds here and doesn't currently.
>> Awesome, that's what I've been trying to do for the past couple of days.  Definitely learning a lot of new things :)
> 
> Perhaps you should file a ticket for this?  (Searching for one first, of course, to see if it already exists).
> 
> Thanks,
> 
> -glyph
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131128/980205de/attachment.html>

From glyph at twistedmatrix.com  Thu Nov 28 21:07:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 28 Nov 2013 20:07:31 -0800
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of
	an incoming message
In-Reply-To: <A0CE1AC5-9FF2-44B4-A03B-F9C4A2AFB772@yahoo.com>
References: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>
 <20131128011810.6892.1184824544.divmod.xquotient.36@top>
 <1385606353.19825.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1E59951F-686C-40B1-A7F3-0529A612B8A2@twistedmatrix.com>
 <A0CE1AC5-9FF2-44B4-A03B-F9C4A2AFB772@yahoo.com>
Message-ID: <D11179D4-AE70-4B2D-8EA4-33BD07BDE707@twistedmatrix.com>

On Nov 28, 2013, at 12:10 PM, Krzysztof Oblucki <koblucki at yahoo.com> wrote:

> I will do that. I'm struggling with doing this myself so far because of my noobness but making small progress every day.

Feel free to ask here for any help you might need :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131128/68ae3d01/attachment.html>

From koblucki at yahoo.com  Thu Nov 28 23:44:37 2013
From: koblucki at yahoo.com (Krzysztof Oblucki)
Date: Thu, 28 Nov 2013 22:44:37 -0800
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of
	an incoming message
In-Reply-To: <D11179D4-AE70-4B2D-8EA4-33BD07BDE707@twistedmatrix.com>
References: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>
 <20131128011810.6892.1184824544.divmod.xquotient.36@top>
 <1385606353.19825.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1E59951F-686C-40B1-A7F3-0529A612B8A2@twistedmatrix.com>
 <A0CE1AC5-9FF2-44B4-A03B-F9C4A2AFB772@yahoo.com>
 <D11179D4-AE70-4B2D-8EA4-33BD07BDE707@twistedmatrix.com>
Message-ID: <61015005-51A6-4C9C-BEF7-24252050624E@yahoo.com>

It would be great if I could get some pointers as to the correct way of doing it. If I were to start with search_DELETED what would be your recommendation?

Sent from my BatPhone

> On Nov 28, 2013, at 20:07, Glyph <glyph at twistedmatrix.com> wrote:
> 
>> On Nov 28, 2013, at 12:10 PM, Krzysztof Oblucki <koblucki at yahoo.com> wrote:
>> 
>> I will do that. I'm struggling with doing this myself so far because of my noobness but making small progress every day.
> 
> Feel free to ask here for any help you might need :).
> 
> -glyph
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131128/88efe248/attachment.html>

From sank.daniel at gmail.com  Fri Nov 29 23:23:59 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 29 Nov 2013 22:23:59 -0800
Subject: [Twisted-Python] Unpersistable instead of pb.Avatar
Message-ID: <CAKN9TDLgv9Q91u8dnzL8e7eB3mSFKZ=jw1c4whJU9-zOsdHYdw@mail.gmail.com>

If I try to instance a pb.Avatar subclass and send it to a peer
manually, the object that the peer receives is an Unpersistable
instead of a real remote reference to the pb.Avatar. How do I fix this
and actually send out new perspectives to users?

Here's why I want to do this:

Suppose I have a network chess program using perspective broker. When
a user process logs in it receives a remote reference to a
perspective, which is an instance of a pb.Avatar subclass. Suppose
that perspective manages the user's ability to interact with a game
lobby. For example, the perspective may implement perspective_joinGame
allowing the user to partake in a game of chess. This part I know how
to do using the cred system.

Now suppose the user wants to join multiple games of chess
simultaneously. It doesn't make sense to use the same perspective in
both games because then every time the user wanted to announce
intended action we'd have to constantly pass around extra objects to
keep track of which game that perspective is trying to interact with.
A similar problem occurs if the same user wants to play as both
players in a single game. In other words, it would be nice to separate
the responsibilities of the user from those of the "player."

If I'm not thinking about this correctly please advise.

Thank you for your time,
Daniel Sank


From trac at twistedmatrix.com  Sun Nov  3 00:05:23 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 Nov 2013 06:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1383458723.0.1733070509540367186@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131103/a9008656/attachment-0002.html>

From exarkun at twistedmatrix.com  Tue Nov  5 15:25:39 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 05 Nov 2013 22:25:39 -0000
Subject: [Twisted-Python] Bristol (England!) sprint hosted by HybridCluster
Message-ID: <20131105222539.8349.455028162.divmod.xquotient.262@top>

Greetings all,

I'm pleased to invite you to join Tom Prince (2013 Twisted Fellow), Luke 
Marsden (founder of HybridCluster), and the HybridCluster team 
(including myself!) for the first Twisted sprint hosted by 
HybridCluster!

The sprint will take place on December 7th in central Bristol (exact 
location to be determined) from 11AM until no one remains capable of 
higher brain function(*).

As usual sprint topics will surely be wide ranging - bring your favorite 
pet project, a personal loathing for unresolved bugs, or just find 
someone interesting to work with when you show up (personally, I'll 
probably be trying to add APIs to support more easily testing Agent- 
using applications).

HybridCluster is a small Bristol-based company building high density web 
hosting platform using Twisted for all manner of tasks - from SSH, HTTP, 
SMTP, POP3, and IMAP4 to internal cluster coordination and asynchronous 
SQL access.

Watch this space for a follow-up post giving details about the venue 
(and free food!).  In the meantime feel free to contact me or post to 
the list with any other questions.

Jean-Paul

(*) Due to excessive hacking.  Certainly not because of any kind of mind 
control technology deployed by the TSF.



From sangiovanni at nweb.it  Wed Nov  6 03:08:03 2013
From: sangiovanni at nweb.it (Fabio Sangiovanni)
Date: Wed, 6 Nov 2013 11:08:03 +0100
Subject: [Twisted-Python] (newbie!) smtp to message object
Message-ID: <527A1503.7030608@nweb.it>

Hello list,

I'm new to twisted and to python in general, so still deep in the 
learning process.
Please forgive any faulty assumptions you'll find in this post :)

I'm trying to accomplish to the following task: realize a tool that acts 
as a proxy between the SMTP domain and the 'objects' domain. That is: a 
daemon that listens for SMTP connections (relayed sessions from Postfix) 
and bundles everything that belongs to a single session (envelope 
sender, envelope recipients, headers, body) into an object (it will 
probably become a JSON one day, not decided yet). The aim is to allow 
further processing (es. publishing to a queue) of a self-contained item.

My (draft) implementation can be reached at http://pastebin.com/mbRztuid

My main concerns are:
1) am I using the right classes? My implementation leverages 
twisted.mail.smtp, is this correct?
2) I've overridden smtp.SMTP._cbToValidate; I really don't like this 
very much (I'd like to leave the protocol untouched) but it's the only 
way I've come up with (after several days of experiments :) ) to have 
one single payload down the line (in smtp.SMTP.do_DATA), and not one 
copy of the message for every single recipient. May this have bad 
consequences?
3) what do you think about the overall approach? could it have been done 
differently/better?

Thanks a lot for your help!

Fabio
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131106/d827aa01/attachment-0002.html>

From _ at lvh.io  Wed Nov  6 03:57:59 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 6 Nov 2013 11:57:59 +0100
Subject: [Twisted-Python] Error unmerging r40589
Message-ID: <CAE_Hg6ZFcNcuduW=DYf1LUL5jbTWXQRyH720jZyox53hA+fxVQ@mail.gmail.com>

Hi,


I tried to review #2053. Unfortunately, the patch had a wrong name and a
wrong topfile (the author was convinced they were working on 2503). I
noticed the wrong patch name, but missed the wrong topfile. So, I'm trying
to unmerge that revision (40589) from trunk using  "svn merge -c -40589 .".
That part works, but a pre-commit hook is preventing me from committing,
because it insists that I'm not deleting a topfile, even though it looks to
me like I am:


trunk ❯ svn
status
⏎
A  +    twisted/test/test_import.py
D       twisted/topfiles/2503.removal
trunk ❯ svn commit -m "Unmerge remove-test-import-2053

Reopens: #2053

This branch accidentally had the wrong topfile.
"
Adding         twisted/test/test_import.py
Deleting       twisted/topfiles/2503.removal
svn: E165001: Commit failed (details follow):
svn: E165001: Commit blocked by pre-commit hook (exit code 1) with output:
Must remove a <ticket>.{feature,bugfix,doc,removal,misc} file for re-opened
tickets.  For further details, refer to
http://twistedmatrix.com/trac/wiki/ReviewProcess#Newsfiles


thanks in advance
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131106/4f85af07/attachment-0002.html>

From staceysern at gmail.com  Wed Nov  6 04:09:00 2013
From: staceysern at gmail.com (Stacey Sern)
Date: Wed, 6 Nov 2013 06:09:00 -0500
Subject: [Twisted-Python] (newbie!) smtp to message object
In-Reply-To: <527A1503.7030608@nweb.it>
References: <527A1503.7030608@nweb.it>
Message-ID: <0D7D5E1F-BD46-4FAC-B244-5838F336F33B@gmail.com>

Hi,

I also tried to figure out how to deliver one copy of a message instead of one for every recipient for a Twisted server tutorial (ticket #3324) which hasn't yet been finalized.  Here's the way I went about it but I'd appreciate comments on the approach as well.

For the IMessageDelivery.validateTo method, it generates the real IMessage object when it receives the first recipient.  After that, it returns a NullMessage object for each subsequent recipient.  The NullMessage object is called for each line received as part of the message but does nothing with it.  Then you don't need to change _cbToValidate.  Here's you're code with the modifications http://pastebin.com/6nFXiTgK.

Stacey



On Nov 6, 2013, at 5:08 AM, Fabio Sangiovanni <sangiovanni at nweb.it> wrote:

> Hello list,
> 
> I'm new to twisted and to python in general, so still deep in the learning process.
> Please forgive any faulty assumptions you'll find in this post :)
> 
> I'm trying to accomplish to the following task: realize a tool that acts as a proxy between the SMTP domain and the 'objects' domain. That is: a daemon that listens for SMTP connections (relayed sessions from Postfix) and bundles everything that belongs to a single session (envelope sender, envelope recipients, headers, body) into an object (it will probably become a JSON one day, not decided yet). The aim is to allow further processing (es. publishing to a queue) of a self-contained item.
> 
> My (draft) implementation can be reached at http://pastebin.com/mbRztuid
> 
> My main concerns are:
> 1) am I using the right classes? My implementation leverages twisted.mail.smtp, is this correct?
> 2) I've overridden smtp.SMTP._cbToValidate; I really don't like this very much (I'd like to leave the protocol     untouched) but it's the only way I've come up with (after several days of experiments :) ) to have one single payload down the line (in smtp.SMTP.do_DATA), and not one copy of the message for every single recipient. May this have bad consequences?
> 3) what do you think about the overall approach? could it have been done differently/better?
> 
> Thanks a lot for your help!
> 
> Fabio
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131106/0acb093a/attachment-0002.html>

From _ at lvh.io  Wed Nov  6 04:33:44 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 6 Nov 2013 12:33:44 +0100
Subject: [Twisted-Python] Error unmerging r40589
In-Reply-To: <CAE_Hg6ZFcNcuduW=DYf1LUL5jbTWXQRyH720jZyox53hA+fxVQ@mail.gmail.com>
References: <CAE_Hg6ZFcNcuduW=DYf1LUL5jbTWXQRyH720jZyox53hA+fxVQ@mail.gmail.com>
Message-ID: <CAE_Hg6bxEiGJrtGH5Xx9ftm6sv+crHcQ9wADrfmsRUk0a14g5w@mail.gmail.com>

Hi everyone,


This was resolved. The error message is (of course) incorrect; the issue
relates to trying to reopen a different ticket from the topfile you're
removing. I've filed a ticket on twisted's trac integration:
https://bugs.launchpad.net/twisted-trac-integration/+bug/1248491

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131106/b9f4dbeb/attachment-0002.html>

From sangiovanni at nweb.it  Wed Nov  6 04:35:23 2013
From: sangiovanni at nweb.it (Fabio Sangiovanni)
Date: Wed, 6 Nov 2013 12:35:23 +0100
Subject: [Twisted-Python] (newbie!) smtp to message object
In-Reply-To: <0D7D5E1F-BD46-4FAC-B244-5838F336F33B@gmail.com>
References: <527A1503.7030608@nweb.it>
 <0D7D5E1F-BD46-4FAC-B244-5838F336F33B@gmail.com>
Message-ID: <527A297B.2050606@nweb.it>

Il 06/11/13 12:09, Stacey Sern ha scritto:
> Hi,
>
> I also tried to figure out how to deliver one copy of a message 
> instead of one for every recipient for a Twisted server tutorial 
> (ticket #3324) which hasn't yet been finalized.  Here's the way I went 
> about it but I'd appreciate comments on the approach as well.
>
> For the IMessageDelivery.validateTo method, it generates the real 
> IMessage object when it receives the first recipient.  After that, it 
> returns a NullMessage object for each subsequent recipient.  The 
> NullMessage object is called for each line received as part of the 
> message but does nothing with it.  Then you don't need to change 
> _cbToValidate.  Here's you're code with the modifications 
> http://pastebin.com/6nFXiTgK.
>
> Stacey
Hi Stacey,
thanks for your reply.

I think your approach is cleaner than mine! Thanks!
My only concern is this loop in smtp.SMTP.do_DATA:

for (user, msgFunc) in recipients:
[...]

that implies a scan of the whole list of messages (made of the 'real' 
message and of the other NullMessages).
I don't know how it can really impact on performances, though. I aimed 
at not creating 'fake' messages at all, but it's not clear to me if it's 
even possible without overriding _cbToValidate.

Let's keep in touch!

Fabio
>
>
>
> On Nov 6, 2013, at 5:08 AM, Fabio Sangiovanni <sangiovanni at nweb.it 
> <mailto:sangiovanni at nweb.it>> wrote:
>
>> Hello list,
>>
>> I'm new to twisted and to python in general, so still deep in the 
>> learning process.
>> Please forgive any faulty assumptions you'll find in this post :)
>>
>> I'm trying to accomplish to the following task: realize a tool that 
>> acts as a proxy between the SMTP domain and the 'objects' domain. 
>> That is: a daemon that listens for SMTP connections (relayed sessions 
>> from Postfix) and bundles everything that belongs to a single session 
>> (envelope sender, envelope recipients, headers, body) into an object 
>> (it will probably become a JSON one day, not decided yet). The aim is 
>> to allow further processing (es. publishing to a queue) of a 
>> self-contained item.
>>
>> My (draft) implementation can be reached at http://pastebin.com/mbRztuid
>>
>> My main concerns are:
>> 1) am I using the right classes? My implementation leverages 
>> twisted.mail.smtp, is this correct?
>> 2) I've overridden smtp.SMTP._cbToValidate; I really don't like this 
>> very much (I'd like to leave the protocol untouched) but it's the 
>> only way I've come up with (after several days of experiments :) ) to 
>> have one single payload down the line (in smtp.SMTP.do_DATA), and not 
>> one copy of the message for every single recipient. May this have bad 
>> consequences?
>> 3) what do you think about the overall approach? could it have been 
>> done differently/better?
>>
>> Thanks a lot for your help!
>>
>> Fabio
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com 
>> <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131106/67b6eef5/attachment-0002.html>

From rmeijer at xs4all.nl  Wed Nov  6 04:43:24 2013
From: rmeijer at xs4all.nl (Rob Meijer)
Date: Wed, 6 Nov 2013 12:43:24 +0100
Subject: [Twisted-Python] Determine TLS version from within request handler
	? (twisted web)
Message-ID: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>

I'm using twisted web for an https connection. At first I start with
creating and configuring a ssl.DefaultOpenSSLContextFactory derived class
that disables SSLv2 and SSLv3. So (basically we're left with TLS1.0 and
up) and forces the use of a single strong (non RC4 but BEAST vulnerable)
cipher.

Than I have a http.HTTPFactory derived class with a 'buildProtocol'that
return a http.HTTPChannel derived object, that in turn returns a
http.Request derived object.

Than reactor.listenSSL is invoked with both the SSL factory and the HTTP
factory. Now my problem. I don't really understand how these two are
connected once the request handler gets invoked.

What I would like to do is that I would want to allow TLS1.0 users to use
the server, but only after explicitly agreeing that they understand the
risks involved with using an old BEAST vulnerable browser.

Is there any way to retrieve info on what TLS version has been negotiated
from within the HTTP request handler? I've been walking the 'self' object
a bit, and self.transport.getHandle() seems to have some tls stuff like
'get_cipher_list' and 'get_peer_certificate', but the simple TLS version
number does not seem to be available.

Is the twisted web API simply insuficient to retreive this information
from within the request handler, or am I missing something here?

T.I.A,

Rob




From exarkun at twistedmatrix.com  Wed Nov  6 07:20:32 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 06 Nov 2013 14:20:32 -0000
Subject: [Twisted-Python] (newbie!) smtp to message object
In-Reply-To: <527A297B.2050606@nweb.it>
References: <527A1503.7030608@nweb.it>
 <0D7D5E1F-BD46-4FAC-B244-5838F336F33B@gmail.com>
 <527A297B.2050606@nweb.it>
Message-ID: <20131106142032.8349.105773680.divmod.xquotient.335@top>

On 11:35 am, sangiovanni at nweb.it wrote:
>Il 06/11/13 12:09, Stacey Sern ha scritto:
>>Hi,
>>
>>I also tried to figure out how to deliver one copy of a message 
>>instead of one for every recipient for a Twisted server tutorial 
>>(ticket #3324) which hasn't yet been finalized.  Here's the way I went 
>>about it but I'd appreciate comments on the approach as well.
>>
>>For the IMessageDelivery.validateTo method, it generates the real 
>>IMessage object when it receives the first recipient.  After that, it 
>>returns a NullMessage object for each subsequent recipient.  The 
>>NullMessage object is called for each line received as part of the 
>>message but does nothing with it.  Then you don't need to change 
>>_cbToValidate.  Here's you're code with the modifications 
>>http://pastebin.com/6nFXiTgK.
>>
>>Stacey
>Hi Stacey,
>thanks for your reply.
>
>I think your approach is cleaner than mine! Thanks!
>My only concern is this loop in smtp.SMTP.do_DATA:
>
>for (user, msgFunc) in recipients:
>[...]
>
>that implies a scan of the whole list of messages (made of the 'real' 
>message and of the other NullMessages).
>I don't know how it can really impact on performances, though. I aimed 
>at not creating 'fake' messages at all, but it's not clear to me if 
>it's even possible without overriding _cbToValidate.

The performance impact of this is going to be minimal.

On a runtime like PyPy, the impact *may* even be zero.

Jean-Paul
>Let's keep in touch!
>
>Fabio
>>
>>
>>
>>On Nov 6, 2013, at 5:08 AM, Fabio Sangiovanni <sangiovanni at nweb.it 
>><mailto:sangiovanni at nweb.it>> wrote:
>>>Hello list,
>>>
>>>I'm new to twisted and to python in general, so still deep in the 
>>>learning process.
>>>Please forgive any faulty assumptions you'll find in this post :)
>>>
>>>I'm trying to accomplish to the following task: realize a tool that 
>>>acts as a proxy between the SMTP domain and the 'objects' domain. 
>>>That is: a daemon that listens for SMTP connections (relayed sessions 
>>>from Postfix) and bundles everything that belongs to a single session 
>>>(envelope sender, envelope recipients, headers, body) into an object 
>>>(it will probably become a JSON one day, not decided yet). The aim is 
>>>to allow further processing (es. publishing to a queue) of a self- 
>>>contained item.
>>>
>>>My (draft) implementation can be reached at 
>>>http://pastebin.com/mbRztuid
>>>
>>>My main concerns are:
>>>1) am I using the right classes? My implementation leverages 
>>>twisted.mail.smtp, is this correct?
>>>2) I've overridden smtp.SMTP._cbToValidate; I really don't like this 
>>>very much (I'd like to leave the protocol untouched) but it's the 
>>>only way I've come up with (after several days of experiments :) ) to 
>>>have one single payload down the line (in smtp.SMTP.do_DATA), and not 
>>>one copy of the message for every single recipient. May this have bad 
>>>consequences?
>>>3) what do you think about the overall approach? could it have been 
>>>done differently/better?
>>>
>>>Thanks a lot for your help!
>>>
>>>Fabio
>>>_______________________________________________
>>>Twisted-Python mailing list
>>>Twisted-Python at twistedmatrix.com <mailto:Twisted- 
>>>Python at twistedmatrix.com>
>>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From sangiovanni at nweb.it  Wed Nov  6 07:32:31 2013
From: sangiovanni at nweb.it (Fabio Sangiovanni)
Date: Wed, 6 Nov 2013 15:32:31 +0100
Subject: [Twisted-Python] (newbie!) smtp to message object
In-Reply-To: <20131106142032.8349.105773680.divmod.xquotient.335@top>
References: <527A1503.7030608@nweb.it>
 <0D7D5E1F-BD46-4FAC-B244-5838F336F33B@gmail.com> <527A297B.2050606@nweb.it>
 <20131106142032.8349.105773680.divmod.xquotient.335@top>
Message-ID: <527A52FF.8070209@nweb.it>

Il 06/11/13 15:20, exarkun at twistedmatrix.com ha scritto:
> On 11:35 am, sangiovanni at nweb.it wrote:
>> Il 06/11/13 12:09, Stacey Sern ha scritto:
>>> Hi,
>>>
>>> I also tried to figure out how to deliver one copy of a message 
>>> instead of one for every recipient for a Twisted server tutorial 
>>> (ticket #3324) which hasn't yet been finalized.  Here's the way I 
>>> went about it but I'd appreciate comments on the approach as well.
>>>
>>> For the IMessageDelivery.validateTo method, it generates the real 
>>> IMessage object when it receives the first recipient. After that, it 
>>> returns a NullMessage object for each subsequent recipient.  The 
>>> NullMessage object is called for each line received as part of the 
>>> message but does nothing with it.  Then you don't need to change 
>>> _cbToValidate.  Here's you're code with the modifications 
>>> http://pastebin.com/6nFXiTgK.
>>>
>>> Stacey
>> Hi Stacey,
>> thanks for your reply.
>>
>> I think your approach is cleaner than mine! Thanks!
>> My only concern is this loop in smtp.SMTP.do_DATA:
>>
>> for (user, msgFunc) in recipients:
>> [...]
>>
>> that implies a scan of the whole list of messages (made of the 'real' 
>> message and of the other NullMessages).
>> I don't know how it can really impact on performances, though. I 
>> aimed at not creating 'fake' messages at all, but it's not clear to 
>> me if it's even possible without overriding _cbToValidate.
>
> The performance impact of this is going to be minimal.
>
> On a runtime like PyPy, the impact *may* even be zero.
>
> Jean-Paul
Thanks Jean-Paul,
I'll go the way suggested by Stacey, then.
Any other suggestions about my approach?

Thanks again!
>> Let's keep in touch!
>>
>> Fabio
>>>
>>>
>>>
>>> On Nov 6, 2013, at 5:08 AM, Fabio Sangiovanni <sangiovanni at nweb.it 
>>> <mailto:sangiovanni at nweb.it>> wrote:
>>>> Hello list,
>>>>
>>>> I'm new to twisted and to python in general, so still deep in the 
>>>> learning process.
>>>> Please forgive any faulty assumptions you'll find in this post :)
>>>>
>>>> I'm trying to accomplish to the following task: realize a tool that 
>>>> acts as a proxy between the SMTP domain and the 'objects' domain. 
>>>> That is: a daemon that listens for SMTP connections (relayed 
>>>> sessions from Postfix) and bundles everything that belongs to a 
>>>> single session (envelope sender, envelope recipients, headers, 
>>>> body) into an object (it will probably become a JSON one day, not 
>>>> decided yet). The aim is to allow further processing (es. 
>>>> publishing to a queue) of a self- contained item.
>>>>
>>>> My (draft) implementation can be reached at 
>>>> http://pastebin.com/mbRztuid
>>>>
>>>> My main concerns are:
>>>> 1) am I using the right classes? My implementation leverages 
>>>> twisted.mail.smtp, is this correct?
>>>> 2) I've overridden smtp.SMTP._cbToValidate; I really don't like 
>>>> this very much (I'd like to leave the protocol untouched) but it's 
>>>> the only way I've come up with (after several days of experiments 
>>>> :) ) to have one single payload down the line (in 
>>>> smtp.SMTP.do_DATA), and not one copy of the message for every 
>>>> single recipient. May this have bad consequences?
>>>> 3) what do you think about the overall approach? could it have been 
>>>> done differently/better?
>>>>
>>>> Thanks a lot for your help!
>>>>
>>>> Fabio
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com <mailto:Twisted- 
>>>> Python at twistedmatrix.com>
>>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From exarkun at twistedmatrix.com  Wed Nov  6 07:38:27 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 06 Nov 2013 14:38:27 -0000
Subject: [Twisted-Python] Determine TLS version from within request
 handler ? (twisted web)
In-Reply-To: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>
References: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>
Message-ID: <20131106143827.8349.1534318774.divmod.xquotient.371@top>

On 11:43 am, rmeijer at xs4all.nl wrote:
>I'm using twisted web for an https connection. At first I start with
>creating and configuring a ssl.DefaultOpenSSLContextFactory derived 
>class
>that disables SSLv2 and SSLv3. So (basically we're left with TLS1.0 and
>up) and forces the use of a single strong (non RC4 but BEAST 
>vulnerable)
>cipher.
>
>Than I have a http.HTTPFactory derived class with a 'buildProtocol'that
>return a http.HTTPChannel derived object, that in turn returns a
>http.Request derived object.
>
>Than reactor.listenSSL is invoked with both the SSL factory and the 
>HTTP
>factory. Now my problem. I don't really understand how these two are
>connected once the request handler gets invoked.
>
>What I would like to do is that I would want to allow TLS1.0 users to 
>use
>the server, but only after explicitly agreeing that they understand the
>risks involved with using an old BEAST vulnerable browser.
>
>Is there any way to retrieve info on what TLS version has been 
>negotiated
>from within the HTTP request handler? I've been walking the 'self' 
>object
>a bit, and self.transport.getHandle() seems to have some tls stuff like
>'get_cipher_list' and 'get_peer_certificate', but the simple TLS 
>version
>number does not seem to be available.

The object you get back from `self.transport.getHandle()` happens to be 
an object from pyOpenSSL - an instance of OpenSSL.SSL.Connection.  While 
reading the following, though, bear in mind that `getHandle` doesn't 
make much of a promise about what it will return.  Other transports may 
return something else and future versions of Twisted may change the 
result as well.

The API that OpenSSL appears to offer for determining what protocol 
version is in use appears to be SSL_get_version().  This returns a 
string like "SSLv2" or "TLSv1" (the documentation doesn't say anything 
about TLSv1.1 or TLSv1.2 but *presumably* if you have a version of 
OpenSSL that implements either of these protocols and one of them is 
negotiated on a connection then SSL_get_version() will identify them in 
its result).

pyOpenSSL, however, does not expose this method.  So in order to get the 
information you need you may need to contribute a binding for this 
method to pyOpenSSL.

Jean-Paul
>Is the twisted web API simply insuficient to retreive this information
>from within the request handler, or am I missing something here?
>
>T.I.A,
>
>Rob



From raketenschnitzel at gmx.de  Wed Nov  6 10:31:34 2013
From: raketenschnitzel at gmx.de (Toni Rosemann)
Date: Wed, 6 Nov 2013 18:31:34 +0100 (CET)
Subject: [Twisted-Python] Strange DataLoosing Problem after some time of
	connection
Message-ID: <trinity-c74995be-d4aa-4e84-8bdd-9e64709fef13-1383759094632@3capp-gmx-bs54>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131106/45f09284/attachment-0002.html>

From dynamicgl at gmail.com  Wed Nov  6 11:07:56 2013
From: dynamicgl at gmail.com (Gelin Yan)
Date: Thu, 7 Nov 2013 02:07:56 +0800
Subject: [Twisted-Python] Strange DataLoosing Problem after some time of
	connection
In-Reply-To: <trinity-c74995be-d4aa-4e84-8bdd-9e64709fef13-1383759094632@3capp-gmx-bs54>
References: <trinity-c74995be-d4aa-4e84-8bdd-9e64709fef13-1383759094632@3capp-gmx-bs54>
Message-ID: <CABkOF6T8Cz4fQG0c__BerKoU_hXxDOr=7KeuQ0ab1UWNgvYVgg@mail.gmail.com>

On Thu, Nov 7, 2013 at 1:31 AM, Toni Rosemann <raketenschnitzel at gmx.de>wrote:

> Hey there,
>
> Setup:
> -i got a Server which is running a Delphi application on Windows7 using
> WinSocketComponents
> -i got a Client (Raspberry Pi) which is running my python client
> application with twisted
> -the server collects data which the client is sending, sometimes the
> server sends back
>
> Problem:
> -the client connects and starts sending, the communication works fine at
> first
> -after some time (rigth now i see no correlation or principle) the server
> won't get any messages anymore, although the client keeps sending (or at
> least the client keeps calling the sendMessage() function
> ->the client is still able to receive messages!
>
> I have no clue whats happening. There is no suspicious behavior nor a
> exception call.
> When i stop the client, the server recognizes a disconnect, but before, no
> disconnect is recognized.
> Has anyone of you an idea or does anyone see a mistake in the design of my
> Factory or Protocol?
> Are there known problems with the combination of python twisted and
> WinSocket of Windows?
>
>

 Have you implemented any acknowledgment in your application?

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131107/cb6d8a35/attachment-0002.html>

From raketenschnitzel at gmx.de  Thu Nov  7 03:12:20 2013
From: raketenschnitzel at gmx.de (Toni Rosemann)
Date: Thu, 7 Nov 2013 11:12:20 +0100 (CET)
Subject: [Twisted-Python] Strange DataLoosing Problem after some time of
 connection
In-Reply-To: <CABkOF6T8Cz4fQG0c__BerKoU_hXxDOr=7KeuQ0ab1UWNgvYVgg@mail.gmail.com>
References: <trinity-c74995be-d4aa-4e84-8bdd-9e64709fef13-1383759094632@3capp-gmx-bs54>, 
 <CABkOF6T8Cz4fQG0c__BerKoU_hXxDOr=7KeuQ0ab1UWNgvYVgg@mail.gmail.com>
Message-ID: <trinity-b794c538-30d2-491d-83ee-9301bee42022-1383819140113@3capp-gmx-bs20>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131107/697c8ec4/attachment-0002.html>

From ewong at pw-wspx.org  Fri Nov  8 01:50:37 2013
From: ewong at pw-wspx.org (Edmund Wong)
Date: Fri, 08 Nov 2013 16:50:37 +0800
Subject: [Twisted-Python] twisted irc client + packet capturing
Message-ID: <527CA5DD.70306@pw-wspx.org>

Hi,

I've created a script that would log on to an irc server, while
capturing packets.

I came across the following link:

http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/

But I'm using pycap (http://pycap.sourceforge.net/), but I'm having
some difficulties with getting it to work.

Here's the code:

# Copyright (c) Twisted Matrix Laboratories.
# See LICENSE for details.

# twisted imports
from twisted.words.protocols import irc
from twisted.internet import reactor, protocol
from twisted.python import log
from twisted.internet.defer import Deferred

# system imports
import time, sys

import pycap.capture

def run_pcap(f):
     p = pycap.capture.capture('eth0')
     p.filter('src host ! 192.168.1.100 and dst host ! 192.168.1.100 and 
dst port 25')
     packet = None
     print "Listening...\n"
     while 1:
        if packet:
           print "Received packet."
           reactor.callFromThread(f, packet)
        else:
           print "no packet\n"
        packet = p.next()

class LogBot(irc.IRCClient):
     """A logging IRC bot."""

     nickname = "testbot"

     def packetShow(self, packet):
         """ booga """
         msg = "Port 25 hit | From:[%s] To:[%s]" % (packet[1].source, 
packet[1].destination)
         self.msg(self.channel, msg)

     def connectionMade(self):
         irc.IRCClient.connectionMade(self)
         print "Setting up callInThread\n"
         reactor.callInThread(run_pcap, self.packetShow)
         print "Finished setting up callInThread\n"

     def connectionLost(self, reason):
         irc.IRCClient.connectionLost(self, reason)

     # callbacks for events

     def signedOn(self):
         """Called when bot has succesfully signed on to server."""
         print "Signing on to %s.\n" % self.factory.channel
         # self.join(self.factory.channel)
         self.sendLine("JOIN %s" % (self.factory.channel,))

     def joined(self, channel):
         """This will get called when the bot joins the channel."""
         print "Joining channel %s." % channel

     def privmsg(self, user, channel, msg):
         """This will get called when the bot receives a message."""
         user = user.split('!', 1)[0]

         # Check to see if they're sending me a private message
         if channel == self.nickname:
             msg = "It isn't nice to whisper!  Play nice with the group."
             self.msg(user, msg)
             return

         # Otherwise check to see if it is a message directed at me
         if msg.startswith(self.nickname + ":"):
             msg = "%s: I am a log bot" % user
             self.msg(channel, msg)

     def action(self, user, channel, msg):
         """This will get called when the bot sees someone do an action."""
         user = user.split('!', 1)[0]

     # irc callbacks

     def irc_NICK(self, prefix, params):
         """Called when an IRC user changes their nickname."""
         old_nick = prefix.split('!')[0]
         new_nick = params[0]


     # For fun, override the method that determines how a nickname is 
changed on
     # collisions. The default method appends an underscore.
     def alterCollidedNick(self, nickname):
         """
         Generate an altered version of a nickname that caused a 
collision in an
         effort to create an unused related name for subsequent 
registration.
         """
         return nickname + '^'

class LogBotFactory(protocol.ClientFactory):
     """A factory for LogBots.

     A new protocol instance will be created each time we connect to the 
server.
     """

     def __init__(self, channel):
         self.channel = channel

     def buildProtocol(self, addr):
         p = LogBot()
         p.factory = self
         return p

     def clientConnectionLost(self, connector, reason):
         """If we get disconnected, reconnect to server."""
         connector.connect()

     def clientConnectionFailed(self, connector, reason):
         print "connection failed:", reason
         reactor.stop()


if __name__ == '__main__':
     # create factory protocol and application
     f = LogBotFactory("#testx")

     # connect factory to this host and port
     reactor.connectTCP("192.168.1.170", 6667, f)

     # run bot
     reactor.run()

I was told that perhaps I could use twisted.pair,
but I have no idea how to use the module.  The
documentation is lacking and I've only just started
programming in Twisted.

Any help appreciated.

Edmund




From bino at indoakses-online.com  Fri Nov  8 02:23:11 2013
From: bino at indoakses-online.com (bino at indoakses-online.com)
Date: Fri, 8 Nov 2013 16:23:11 +0700
Subject: [Twisted-Python] twisted irc client + packet capturing
In-Reply-To: <527CA5DD.70306@pw-wspx.org>
References: <527CA5DD.70306@pw-wspx.org>
Message-ID: <f617aa46e81fdb53b5b6937ae2a1a9a8.squirrel@localhost>

> Hi,
>
> I've created a script that would log on to an irc server, while
> capturing packets.
>
> I came across the following link:
>
> http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
>
> But I'm using pycap (http://pycap.sourceforge.net/), but I'm having
> some difficulties with getting it to work.

my 'dirty' workaround suggestion :

1. Write a twisted based IRC bot that also have a UDP server function
2. Write a pycap based script that capture packet and other things ...and
udp-send itu to #1


Sincerely
-bino-




From exarkun at twistedmatrix.com  Fri Nov  8 05:08:55 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Nov 2013 12:08:55 -0000
Subject: [Twisted-Python] twisted irc client + packet capturing
In-Reply-To: <527CA5DD.70306@pw-wspx.org>
References: <527CA5DD.70306@pw-wspx.org>
Message-ID: <20131108120855.8349.1701346083.divmod.xquotient.386@top>

On 08:50 am, ewong at pw-wspx.org wrote:
>Hi,
>
>I've created a script that would log on to an irc server, while
>capturing packets.
>
>I came across the following link:
>
>http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python- 
>packet-sniffer/
>
>But I'm using pycap (http://pycap.sourceforge.net/), but I'm having
>some difficulties with getting it to work.
>
>Here's the code:
>
># Copyright (c) Twisted Matrix Laboratories.
># See LICENSE for details.
>
># twisted imports
>from twisted.words.protocols import irc
>from twisted.internet import reactor, protocol
>from twisted.python import log
>from twisted.internet.defer import Deferred
>
># system imports
>import time, sys
>
>import pycap.capture
>
>def run_pcap(f):
>     p = pycap.capture.capture('eth0')
>     p.filter('src host ! 192.168.1.100 and dst host ! 192.168.1.100 and 
>dst port 25')
>     packet = None
>     print "Listening...\n"
>     while 1:
>        if packet:
>           print "Received packet."
>           reactor.callFromThread(f, packet)
>        else:
>           print "no packet\n"
>        packet = p.next()
>
>class LogBot(irc.IRCClient):
>     """A logging IRC bot."""
>
>     nickname = "testbot"
>
>     def packetShow(self, packet):
>         """ booga """
>         msg = "Port 25 hit | From:[%s] To:[%s]" % (packet[1].source, 
>packet[1].destination)
>         self.msg(self.channel, msg)
>
>     def connectionMade(self):
>         irc.IRCClient.connectionMade(self)
>         print "Setting up callInThread\n"
>         reactor.callInThread(run_pcap, self.packetShow)
>         print "Finished setting up callInThread\n"
>
>     def connectionLost(self, reason):
>         irc.IRCClient.connectionLost(self, reason)
>
>     # callbacks for events
>
>     def signedOn(self):
>         """Called when bot has succesfully signed on to server."""
>         print "Signing on to %s.\n" % self.factory.channel
>         # self.join(self.factory.channel)
>         self.sendLine("JOIN %s" % (self.factory.channel,))
>
>     def joined(self, channel):
>         """This will get called when the bot joins the channel."""
>         print "Joining channel %s." % channel
>
>     def privmsg(self, user, channel, msg):
>         """This will get called when the bot receives a message."""
>         user = user.split('!', 1)[0]
>
>         # Check to see if they're sending me a private message
>         if channel == self.nickname:
>             msg = "It isn't nice to whisper!  Play nice with the 
>group."
>             self.msg(user, msg)
>             return
>
>         # Otherwise check to see if it is a message directed at me
>         if msg.startswith(self.nickname + ":"):
>             msg = "%s: I am a log bot" % user
>             self.msg(channel, msg)
>
>     def action(self, user, channel, msg):
>         """This will get called when the bot sees someone do an 
>action."""
>         user = user.split('!', 1)[0]
>
>     # irc callbacks
>
>     def irc_NICK(self, prefix, params):
>         """Called when an IRC user changes their nickname."""
>         old_nick = prefix.split('!')[0]
>         new_nick = params[0]
>
>
>     # For fun, override the method that determines how a nickname is 
>changed on
>     # collisions. The default method appends an underscore.
>     def alterCollidedNick(self, nickname):
>         """
>         Generate an altered version of a nickname that caused a 
>collision in an
>         effort to create an unused related name for subsequent 
>registration.
>         """
>         return nickname + '^'
>
>class LogBotFactory(protocol.ClientFactory):
>     """A factory for LogBots.
>
>     A new protocol instance will be created each time we connect to the 
>server.
>     """
>
>     def __init__(self, channel):
>         self.channel = channel
>
>     def buildProtocol(self, addr):
>         p = LogBot()
>         p.factory = self
>         return p
>
>     def clientConnectionLost(self, connector, reason):
>         """If we get disconnected, reconnect to server."""
>         connector.connect()
>
>     def clientConnectionFailed(self, connector, reason):
>         print "connection failed:", reason
>         reactor.stop()
>
>
>if __name__ == '__main__':
>     # create factory protocol and application
>     f = LogBotFactory("#testx")
>
>     # connect factory to this host and port
>     reactor.connectTCP("192.168.1.170", 6667, f)
>
>     # run bot
>     reactor.run()
>
>I was told that perhaps I could use twisted.pair,
>but I have no idea how to use the module.  The
>documentation is lacking and I've only just started
>programming in Twisted.
>
>Any help appreciated.

I don't know if Twisted Pair will work better for you but you can find 
the start of some documentation about it in this branch:

  https://twistedmatrix.com/trac/browser/branches/tuntap-pytun-6169-3

Additionally, this branch removes the Twisted Pair dependency on the 
"eunuchs" module which is abandoned and difficult to find.

Jean-Paul



From dstainton415 at gmail.com  Fri Nov  8 08:11:20 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Fri, 8 Nov 2013 07:11:20 -0800
Subject: [Twisted-Python] twisted irc client + packet capturing
In-Reply-To: <527CA5DD.70306@pw-wspx.org>
References: <527CA5DD.70306@pw-wspx.org>
Message-ID: <CAFN1edri9X0KECqPO=jO42x3=6Y1J4w9yMpP6JBu7hoEkkaJcA@mail.gmail.com>

I got my sniffer to work in Twisted... but then I'm not using pycap :
https://github.com/david415/hushVPN/blob/master/nflog_reader.py

I use the NetLinkFilter socket via this python cffi:
https://github.com/mk-fg/scapy-nflog-capture
Anyhow this allows me to control which packets my sniffer picks up via
iptables rules like this:

iptables -A INPUT -p tcp --dport 22 -j NFLOG


Cheers!

David


On Fri, Nov 8, 2013 at 12:50 AM, Edmund Wong <ewong at pw-wspx.org> wrote:
> Hi,
>
> I've created a script that would log on to an irc server, while
> capturing packets.
>
> I came across the following link:
>
> http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
>
> But I'm using pycap (http://pycap.sourceforge.net/), but I'm having
> some difficulties with getting it to work.
>
> Here's the code:
>
> # Copyright (c) Twisted Matrix Laboratories.
> # See LICENSE for details.
>
> # twisted imports
> from twisted.words.protocols import irc
> from twisted.internet import reactor, protocol
> from twisted.python import log
> from twisted.internet.defer import Deferred
>
> # system imports
> import time, sys
>
> import pycap.capture
>
> def run_pcap(f):
>     p = pycap.capture.capture('eth0')
>     p.filter('src host ! 192.168.1.100 and dst host ! 192.168.1.100 and dst
> port 25')
>     packet = None
>     print "Listening...\n"
>     while 1:
>        if packet:
>           print "Received packet."
>           reactor.callFromThread(f, packet)
>        else:
>           print "no packet\n"
>        packet = p.next()
>
> class LogBot(irc.IRCClient):
>     """A logging IRC bot."""
>
>     nickname = "testbot"
>
>     def packetShow(self, packet):
>         """ booga """
>         msg = "Port 25 hit | From:[%s] To:[%s]" % (packet[1].source,
> packet[1].destination)
>         self.msg(self.channel, msg)
>
>     def connectionMade(self):
>         irc.IRCClient.connectionMade(self)
>         print "Setting up callInThread\n"
>         reactor.callInThread(run_pcap, self.packetShow)
>         print "Finished setting up callInThread\n"
>
>     def connectionLost(self, reason):
>         irc.IRCClient.connectionLost(self, reason)
>
>     # callbacks for events
>
>     def signedOn(self):
>         """Called when bot has succesfully signed on to server."""
>         print "Signing on to %s.\n" % self.factory.channel
>         # self.join(self.factory.channel)
>         self.sendLine("JOIN %s" % (self.factory.channel,))
>
>     def joined(self, channel):
>         """This will get called when the bot joins the channel."""
>         print "Joining channel %s." % channel
>
>     def privmsg(self, user, channel, msg):
>         """This will get called when the bot receives a message."""
>         user = user.split('!', 1)[0]
>
>         # Check to see if they're sending me a private message
>         if channel == self.nickname:
>             msg = "It isn't nice to whisper!  Play nice with the group."
>             self.msg(user, msg)
>             return
>
>         # Otherwise check to see if it is a message directed at me
>         if msg.startswith(self.nickname + ":"):
>             msg = "%s: I am a log bot" % user
>             self.msg(channel, msg)
>
>     def action(self, user, channel, msg):
>         """This will get called when the bot sees someone do an action."""
>         user = user.split('!', 1)[0]
>
>     # irc callbacks
>
>     def irc_NICK(self, prefix, params):
>         """Called when an IRC user changes their nickname."""
>         old_nick = prefix.split('!')[0]
>         new_nick = params[0]
>
>
>     # For fun, override the method that determines how a nickname is changed
> on
>     # collisions. The default method appends an underscore.
>     def alterCollidedNick(self, nickname):
>         """
>         Generate an altered version of a nickname that caused a collision in
> an
>         effort to create an unused related name for subsequent registration.
>         """
>         return nickname + '^'
>
> class LogBotFactory(protocol.ClientFactory):
>     """A factory for LogBots.
>
>     A new protocol instance will be created each time we connect to the
> server.
>     """
>
>     def __init__(self, channel):
>         self.channel = channel
>
>     def buildProtocol(self, addr):
>         p = LogBot()
>         p.factory = self
>         return p
>
>     def clientConnectionLost(self, connector, reason):
>         """If we get disconnected, reconnect to server."""
>         connector.connect()
>
>     def clientConnectionFailed(self, connector, reason):
>         print "connection failed:", reason
>         reactor.stop()
>
>
> if __name__ == '__main__':
>     # create factory protocol and application
>     f = LogBotFactory("#testx")
>
>     # connect factory to this host and port
>     reactor.connectTCP("192.168.1.170", 6667, f)
>
>     # run bot
>     reactor.run()
>
> I was told that perhaps I could use twisted.pair,
> but I have no idea how to use the module.  The
> documentation is lacking and I've only just started
> programming in Twisted.
>
> Any help appreciated.
>
> Edmund
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From akersof at gmail.com  Fri Nov  8 09:16:48 2013
From: akersof at gmail.com (Sofiane Akermoun)
Date: Fri, 8 Nov 2013 17:16:48 +0100
Subject: [Twisted-Python] twisted irc client + packet capturing
In-Reply-To: <CAFN1edri9X0KECqPO=jO42x3=6Y1J4w9yMpP6JBu7hoEkkaJcA@mail.gmail.com>
References: <527CA5DD.70306@pw-wspx.org>
 <CAFN1edri9X0KECqPO=jO42x3=6Y1J4w9yMpP6JBu7hoEkkaJcA@mail.gmail.com>
Message-ID: <CAN0_x-KXrfqzodWh5CabHMomUUZ8g=GidWH9gER-MkM0HsS1ZA@mail.gmail.com>

Hello,

1) create a pcapdevice
I use pcapy because it can return a file descriptor of the new
pcapdevice created

2) Use abstract.FileDescriptor
With absbract.FileDescriptor you can wrap the previvous pcapdevice
with its file descriptor into some that twisted can use properly into
the reactor. With abstract.FileDescriptor you will create an event
based pcapdevice which will read data when they income without
blocking anything and without using thread.

3) plug you twisted-like pcapdevice into your application.
Now with a pcapdevice based on abstract.FileDescriptor you can use it
into you twisted application without any problem

I will try to speed up my developpement process to show you a little
module that could permit you to do it really easly.
I am actually coding the dissector of the packet received.

kinds regards,

Sofiane Akermoun


2013/11/8 David Stainton <dstainton415 at gmail.com>:
> I got my sniffer to work in Twisted... but then I'm not using pycap :
> https://github.com/david415/hushVPN/blob/master/nflog_reader.py
>
> I use the NetLinkFilter socket via this python cffi:
> https://github.com/mk-fg/scapy-nflog-capture
> Anyhow this allows me to control which packets my sniffer picks up via
> iptables rules like this:
>
> iptables -A INPUT -p tcp --dport 22 -j NFLOG
>
>
> Cheers!
>
> David
>
>
> On Fri, Nov 8, 2013 at 12:50 AM, Edmund Wong <ewong at pw-wspx.org> wrote:
>> Hi,
>>
>> I've created a script that would log on to an irc server, while
>> capturing packets.
>>
>> I came across the following link:
>>
>> http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
>>
>> But I'm using pycap (http://pycap.sourceforge.net/), but I'm having
>> some difficulties with getting it to work.
>>
>> Here's the code:
>>
>> # Copyright (c) Twisted Matrix Laboratories.
>> # See LICENSE for details.
>>
>> # twisted imports
>> from twisted.words.protocols import irc
>> from twisted.internet import reactor, protocol
>> from twisted.python import log
>> from twisted.internet.defer import Deferred
>>
>> # system imports
>> import time, sys
>>
>> import pycap.capture
>>
>> def run_pcap(f):
>>     p = pycap.capture.capture('eth0')
>>     p.filter('src host ! 192.168.1.100 and dst host ! 192.168.1.100 and dst
>> port 25')
>>     packet = None
>>     print "Listening...\n"
>>     while 1:
>>        if packet:
>>           print "Received packet."
>>           reactor.callFromThread(f, packet)
>>        else:
>>           print "no packet\n"
>>        packet = p.next()
>>
>> class LogBot(irc.IRCClient):
>>     """A logging IRC bot."""
>>
>>     nickname = "testbot"
>>
>>     def packetShow(self, packet):
>>         """ booga """
>>         msg = "Port 25 hit | From:[%s] To:[%s]" % (packet[1].source,
>> packet[1].destination)
>>         self.msg(self.channel, msg)
>>
>>     def connectionMade(self):
>>         irc.IRCClient.connectionMade(self)
>>         print "Setting up callInThread\n"
>>         reactor.callInThread(run_pcap, self.packetShow)
>>         print "Finished setting up callInThread\n"
>>
>>     def connectionLost(self, reason):
>>         irc.IRCClient.connectionLost(self, reason)
>>
>>     # callbacks for events
>>
>>     def signedOn(self):
>>         """Called when bot has succesfully signed on to server."""
>>         print "Signing on to %s.\n" % self.factory.channel
>>         # self.join(self.factory.channel)
>>         self.sendLine("JOIN %s" % (self.factory.channel,))
>>
>>     def joined(self, channel):
>>         """This will get called when the bot joins the channel."""
>>         print "Joining channel %s." % channel
>>
>>     def privmsg(self, user, channel, msg):
>>         """This will get called when the bot receives a message."""
>>         user = user.split('!', 1)[0]
>>
>>         # Check to see if they're sending me a private message
>>         if channel == self.nickname:
>>             msg = "It isn't nice to whisper!  Play nice with the group."
>>             self.msg(user, msg)
>>             return
>>
>>         # Otherwise check to see if it is a message directed at me
>>         if msg.startswith(self.nickname + ":"):
>>             msg = "%s: I am a log bot" % user
>>             self.msg(channel, msg)
>>
>>     def action(self, user, channel, msg):
>>         """This will get called when the bot sees someone do an action."""
>>         user = user.split('!', 1)[0]
>>
>>     # irc callbacks
>>
>>     def irc_NICK(self, prefix, params):
>>         """Called when an IRC user changes their nickname."""
>>         old_nick = prefix.split('!')[0]
>>         new_nick = params[0]
>>
>>
>>     # For fun, override the method that determines how a nickname is changed
>> on
>>     # collisions. The default method appends an underscore.
>>     def alterCollidedNick(self, nickname):
>>         """
>>         Generate an altered version of a nickname that caused a collision in
>> an
>>         effort to create an unused related name for subsequent registration.
>>         """
>>         return nickname + '^'
>>
>> class LogBotFactory(protocol.ClientFactory):
>>     """A factory for LogBots.
>>
>>     A new protocol instance will be created each time we connect to the
>> server.
>>     """
>>
>>     def __init__(self, channel):
>>         self.channel = channel
>>
>>     def buildProtocol(self, addr):
>>         p = LogBot()
>>         p.factory = self
>>         return p
>>
>>     def clientConnectionLost(self, connector, reason):
>>         """If we get disconnected, reconnect to server."""
>>         connector.connect()
>>
>>     def clientConnectionFailed(self, connector, reason):
>>         print "connection failed:", reason
>>         reactor.stop()
>>
>>
>> if __name__ == '__main__':
>>     # create factory protocol and application
>>     f = LogBotFactory("#testx")
>>
>>     # connect factory to this host and port
>>     reactor.connectTCP("192.168.1.170", 6667, f)
>>
>>     # run bot
>>     reactor.run()
>>
>> I was told that perhaps I could use twisted.pair,
>> but I have no idea how to use the module.  The
>> documentation is lacking and I've only just started
>> programming in Twisted.
>>
>> Any help appreciated.
>>
>> Edmund
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
Sofiane AKERMOUN
akersof at gmail.com



From jamesbroadhead at gmail.com  Fri Nov  8 09:42:31 2013
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Fri, 8 Nov 2013 16:42:31 +0000
Subject: [Twisted-Python] Bristol (England!) sprint hosted by
	HybridCluster
In-Reply-To: <20131105222539.8349.455028162.divmod.xquotient.262@top>
References: <20131105222539.8349.455028162.divmod.xquotient.262@top>
Message-ID: <CA+hid6FYmQxGjQ7eRRqLnW-uOGiDsL7tkS-idHHM7Y81_DQStA@mail.gmail.com>

Sounds exciting -- there have been some changes to trial that I've been
thinking about for a little while, so this would be a great opportunity.

Would you mind if I distributed this email farther afield? To
python-uk at python.org for instance (or are you waiting until you have a
fixed venue?)


On 5 November 2013 22:25, <exarkun at twistedmatrix.com> wrote:

> Greetings all,
>
> I'm pleased to invite you to join Tom Prince (2013 Twisted Fellow), Luke
> Marsden (founder of HybridCluster), and the HybridCluster team (including
> myself!) for the first Twisted sprint hosted by HybridCluster!
>
> The sprint will take place on December 7th in central Bristol (exact
> location to be determined) from 11AM until no one remains capable of higher
> brain function(*).
>
> As usual sprint topics will surely be wide ranging - bring your favorite
> pet project, a personal loathing for unresolved bugs, or just find someone
> interesting to work with when you show up (personally, I'll probably be
> trying to add APIs to support more easily testing Agent- using
> applications).
>
> HybridCluster is a small Bristol-based company building high density web
> hosting platform using Twisted for all manner of tasks - from SSH, HTTP,
> SMTP, POP3, and IMAP4 to internal cluster coordination and asynchronous SQL
> access.
>
> Watch this space for a follow-up post giving details about the venue (and
> free food!).  In the meantime feel free to contact me or post to the list
> with any other questions.
>
> Jean-Paul
>
> (*) Due to excessive hacking.  Certainly not because of any kind of mind
> control technology deployed by the TSF.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131108/8a818d02/attachment-0002.html>

From p.mayers at imperial.ac.uk  Fri Nov  8 10:01:09 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 08 Nov 2013 17:01:09 +0000
Subject: [Twisted-Python] twisted irc client + packet capturing
In-Reply-To: <CAN0_x-KXrfqzodWh5CabHMomUUZ8g=GidWH9gER-MkM0HsS1ZA@mail.gmail.com>
References: <527CA5DD.70306@pw-wspx.org>
 <CAFN1edri9X0KECqPO=jO42x3=6Y1J4w9yMpP6JBu7hoEkkaJcA@mail.gmail.com>
 <CAN0_x-KXrfqzodWh5CabHMomUUZ8g=GidWH9gER-MkM0HsS1ZA@mail.gmail.com>
Message-ID: <527D18D5.90005@imperial.ac.uk>

Another option is to run tcpdump as a sub-process writing to stdout, and 
write a ProcessProtocol to parse the pcap stream. This is not terribly 
difficult, and can actually have some advantages - if your python 
process blocks for too long you can lose captured packets, but by 
letting tcpdump aggressively drive the reading of the socket, you can 
(ab)use the pipe() buffers to hold a small backlog.

[If you need even more aggressive buffering, replace tcpdump with gulp]

If you do this you should extract packet timestamps from the pcap 
stream, not the wall clock.

I have code to do this, if anyone can't figure it out themselves.



From exarkun at twistedmatrix.com  Fri Nov  8 11:13:11 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Nov 2013 18:13:11 -0000
Subject: [Twisted-Python] Bristol (England!) sprint hosted by
	HybridCluster
Message-ID: <20131108181311.8349.1397706264.divmod.xquotient.393@top>

On 04:42 pm, jamesbroadhead at gmail.com wrote:
>Sounds exciting -- there have been some changes to trial that I've been
>thinking about for a little while, so this would be a great 
>opportunity.
>
>Would you mind if I distributed this email farther afield? To
>python-uk at python.org for instance (or are you waiting until you have a
>fixed venue?)

Hi James,

Please feel free to widen the distribution.  I'm going to post a follow- 
up to the original message with information about the venue in just a 
minute.

Hope to see you there!

Jean-Paul
>
>On 5 November 2013 22:25, <exarkun at twistedmatrix.com> wrote:
>>Greetings all,
>>
>>I'm pleased to invite you to join Tom Prince (2013 Twisted Fellow), 
>>Luke
>>Marsden (founder of HybridCluster), and the HybridCluster team 
>>(including
>>myself!) for the first Twisted sprint hosted by HybridCluster!
>>
>>The sprint will take place on December 7th in central Bristol (exact
>>location to be determined) from 11AM until no one remains capable of 
>>higher
>>brain function(*).
>>
>>As usual sprint topics will surely be wide ranging - bring your 
>>favorite
>>pet project, a personal loathing for unresolved bugs, or just find 
>>someone
>>interesting to work with when you show up (personally, I'll probably 
>>be
>>trying to add APIs to support more easily testing Agent- using
>>applications).
>>
>>HybridCluster is a small Bristol-based company building high density 
>>web
>>hosting platform using Twisted for all manner of tasks - from SSH, 
>>HTTP,
>>SMTP, POP3, and IMAP4 to internal cluster coordination and 
>>asynchronous SQL
>>access.
>>
>>Watch this space for a follow-up post giving details about the venue 
>>(and
>>free food!).  In the meantime feel free to contact me or post to the 
>>list
>>with any other questions.
>>
>>Jean-Paul
>>
>>(*) Due to excessive hacking.  Certainly not because of any kind of 
>>mind
>>control technology deployed by the TSF.
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From hawkowl at atleastfornow.net  Fri Nov  8 11:49:24 2013
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Sat, 09 Nov 2013 02:49:24 +0800
Subject: [Twisted-Python] Twisted 13.2.0 Release Announcement
Message-ID: <527D3234.1040507@atleastfornow.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On behalf of Twisted Matrix Laboratories, I am honoured to announce
the release of Twisted 13.2!

The highlights of this release are:

 * Twisted now includes a HostnameEndpoint implementation which uses
IPv4 and IPv6 in parallel, speeding up the connection by using
whichever connects first (the 'Happy Eyeballs'/RFC 6555 algorithm).
(#4859)

 * Improved support for Cancellable Deferreds by kaizhang, our GSoC
student. (#4320, #6532, #6572, #6639)

 * Improved Twisted.Mail documentation by shira, our Outreach Program
for Women intern. (#6649, #6652)

 * twistd now waits for the application to start successfully before
exiting after daemonization. (#823)

 * SSL server endpoint string descriptions now support the
specification of chain certificates. (#6499)

 * Over 70 closed tickets since 13.1.0.

For more information, check the NEWS file (link provided below).

You can find the downloads at <https://pypi.python.org/pypi/Twisted>
(or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>) .
The NEWS file is also available at
<http://twistedmatrix.com/Releases/Twisted/13.2/NEWS.txt>.

Many thanks to everyone who had a part in this release - the
supporters of the Twisted Software Foundation, the developers who
contributed code as well as documentation, and all the people building
great things with Twisted!

Twisted Regards,
HawkOwl
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.15 (GNU/Linux)

iQEcBAEBAgAGBQJSfTI0AAoJECMItHnTkkoRDzgH/0hbsTLrBVklSjFXINgjNZcE
9IEwFcXsWGElv066Nmt7Nm2CQ0idIJHosx58re8LKK9F/xK3CWlCceJOeS+npNfE
y3CnuBRxJYWC+xdy/WTgLV26LkFi2TzqYJT+r6AfS8KUhOJCUJ3H+x8G2SeDlin+
eED64X4ftbs22tSz3RkCkpT++L6inPvVWhwpQhn+GqnS4oBqjbjcYpwJ8+wFfy72
6qe6OcXsoUxM72nbZ1vLg4WE5nbv3It+HnR9PYJTY9VFv8sNeGzb/VEfLpeFJG7f
bZImycCh2Flp3OKVzaELmWc+hYDsWT/TuaQYYw6IJYqvFCoTuEQFsdtJuuVBZoQ=
=Attd
-----END PGP SIGNATURE-----



From exarkun at twistedmatrix.com  Fri Nov  8 12:31:10 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Nov 2013 19:31:10 -0000
Subject: [Twisted-Python] Bristol (England!) sprint hosted by
	HybridCluster
In-Reply-To: <20131105222539.8349.455028162.divmod.xquotient.262@top>
References: <20131105222539.8349.455028162.divmod.xquotient.262@top>
Message-ID: <20131108193110.8349.896392936.divmod.xquotient.542@top>

On 5 Nov, 10:25 pm, exarkun at twistedmatrix.com wrote:
>Greetings all,
>
>I'm pleased to invite you to join Tom Prince (2013 Twisted Fellow), 
>Luke Marsden (founder of HybridCluster), and the HybridCluster team 
>(including myself!) for the first Twisted sprint hosted by 
>HybridCluster!
>
>The sprint will take place on December 7th in central Bristol (exact 
>location to be determined) from 11AM until no one remains capable of 
>higher brain function(*).

Hello again,

The exact location of the sprint has been selected.  The sprint will be 
held at SETsquared Business Acceleration Centre, Bristol:

http://goo.gl/maps/1HUsW

When you arrive at Temple Meads train station:

   After passing through the barriers, exit the building through the main 
entrance on the left.
   Walk down the concourse on the right hand-side.

   At the bottom of the road on the corner there is a Caffe Gusto.

   The entrance to the building (sprint venue) is next to theirs on the 
right.

You'll need some assistance getting in the door.  When you get there 
either call +447791750420 to speak to Luke or email jean- 
paul at hybridcluster.com (with the latter probably being a bit higher 
latency).

Jean-Paul
>
>As usual sprint topics will surely be wide ranging - bring your 
>favorite pet project, a personal loathing for unresolved bugs, or just 
>find someone interesting to work with when you show up (personally, 
>I'll probably be trying to add APIs to support more easily testing 
>Agent- using applications).
>
>HybridCluster is a small Bristol-based company building high density 
>web hosting platform using Twisted for all manner of tasks - from SSH, 
>HTTP, SMTP, POP3, and IMAP4 to internal cluster coordination and 
>asynchronous SQL access.
>
>Watch this space for a follow-up post giving details about the venue 
>(and free food!).  In the meantime feel free to contact me or post to 
>the list with any other questions.
>
>Jean-Paul
>
>(*) Due to excessive hacking.  Certainly not because of any kind of 
>mind control technology deployed by the TSF.
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From JOHN at egh.com  Fri Nov  8 12:37:34 2013
From: JOHN at egh.com (John Santos)
Date: Fri, 8 Nov 2013 14:37:34 -0500
Subject: [Twisted-Python] Twisted 13.2.0 Release Announcement
In-Reply-To: <527D3234.1040507@atleastfornow.net>
Message-ID: <1131108142916.32476B-100000@Ives.egh.com>


A little late to the party, but since you asked for feedback, I installed
13.2.0pre1 last night.  No problems with Twisted itself, but I made the
mistake of updating (or trying to update) all the other component
packages, including Python, openssl, gmp, pyOpenSSL, pycrypto (my app uses
SSH to talk to interactive clients), and lots of other bits and pieces.

Lesson:  Only update one thing at a time, unless there are explicit
dependencies!  Especially if you are stuck on a fairly old Linux distro
(SLES 10, at least for the time being)!

But the Twisted part was a piece of cake.

Now I get to do it all again, but it should be easy this time...


On Sat, 9 Nov 2013, HawkOwl wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> On behalf of Twisted Matrix Laboratories, I am honoured to announce
> the release of Twisted 13.2!
> 
> The highlights of this release are:
> 
>  * Twisted now includes a HostnameEndpoint implementation which uses
> IPv4 and IPv6 in parallel, speeding up the connection by using
> whichever connects first (the 'Happy Eyeballs'/RFC 6555 algorithm).
> (#4859)
> 
>  * Improved support for Cancellable Deferreds by kaizhang, our GSoC
> student. (#4320, #6532, #6572, #6639)
> 
>  * Improved Twisted.Mail documentation by shira, our Outreach Program
> for Women intern. (#6649, #6652)
> 
>  * twistd now waits for the application to start successfully before
> exiting after daemonization. (#823)
> 
>  * SSL server endpoint string descriptions now support the
> specification of chain certificates. (#6499)
> 
>  * Over 70 closed tickets since 13.1.0.
> 
> For more information, check the NEWS file (link provided below).
> 
> You can find the downloads at <https://pypi.python.org/pypi/Twisted>
> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>) .
> The NEWS file is also available at
> <http://twistedmatrix.com/Releases/Twisted/13.2/NEWS.txt>.
> 
> Many thanks to everyone who had a part in this release - the
> supporters of the Twisted Software Foundation, the developers who
> contributed code as well as documentation, and all the people building
> great things with Twisted!
> 
> Twisted Regards,
> HawkOwl
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.15 (GNU/Linux)
> 
> iQEcBAEBAgAGBQJSfTI0AAoJECMItHnTkkoRDzgH/0hbsTLrBVklSjFXINgjNZcE
> 9IEwFcXsWGElv066Nmt7Nm2CQ0idIJHosx58re8LKK9F/xK3CWlCceJOeS+npNfE
> y3CnuBRxJYWC+xdy/WTgLV26LkFi2TzqYJT+r6AfS8KUhOJCUJ3H+x8G2SeDlin+
> eED64X4ftbs22tSz3RkCkpT++L6inPvVWhwpQhn+GqnS4oBqjbjcYpwJ8+wFfy72
> 6qe6OcXsoUxM72nbZ1vLg4WE5nbv3It+HnR9PYJTY9VFv8sNeGzb/VEfLpeFJG7f
> bZImycCh2Flp3OKVzaELmWc+hYDsWT/TuaQYYw6IJYqvFCoTuEQFsdtJuuVBZoQ=
> =Attd
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539




From hawkowl at atleastfornow.net  Fri Nov  8 13:23:41 2013
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Sat, 09 Nov 2013 04:23:41 +0800
Subject: [Twisted-Python] Twisted 13.2.0 Release Announcement
In-Reply-To: <1131108142916.32476B-100000@Ives.egh.com>
References: <1131108142916.32476B-100000@Ives.egh.com>
Message-ID: <527D484D.10704@atleastfornow.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi John,

There's no code changes between pre1 and full release - so you
shouldn't have any problems! :)

- -hawkowl

On 09/11/13 03:37, John Santos wrote:
> 
> A little late to the party, but since you asked for feedback, I
> installed 13.2.0pre1 last night.  No problems with Twisted itself,
> but I made the mistake of updating (or trying to update) all the
> other component packages, including Python, openssl, gmp,
> pyOpenSSL, pycrypto (my app uses SSH to talk to interactive
> clients), and lots of other bits and pieces.
> 
> Lesson:  Only update one thing at a time, unless there are
> explicit dependencies!  Especially if you are stuck on a fairly old
> Linux distro (SLES 10, at least for the time being)!
> 
> But the Twisted part was a piece of cake.
> 
> Now I get to do it all again, but it should be easy this time...
> 
> 
> On Sat, 9 Nov 2013, HawkOwl wrote:
> 
> On behalf of Twisted Matrix Laboratories, I am honoured to
> announce the release of Twisted 13.2!
> 
> The highlights of this release are:
> 
> * Twisted now includes a HostnameEndpoint implementation which
> uses IPv4 and IPv6 in parallel, speeding up the connection by
> using whichever connects first (the 'Happy Eyeballs'/RFC 6555
> algorithm). (#4859)
> 
> * Improved support for Cancellable Deferreds by kaizhang, our GSoC 
> student. (#4320, #6532, #6572, #6639)
> 
> * Improved Twisted.Mail documentation by shira, our Outreach
> Program for Women intern. (#6649, #6652)
> 
> * twistd now waits for the application to start successfully
> before exiting after daemonization. (#823)
> 
> * SSL server endpoint string descriptions now support the 
> specification of chain certificates. (#6499)
> 
> * Over 70 closed tickets since 13.1.0.
> 
> For more information, check the NEWS file (link provided below).
> 
> You can find the downloads at
> <https://pypi.python.org/pypi/Twisted> (or alternatively
> <http://twistedmatrix.com/trac/wiki/Downloads>) . The NEWS file is
> also available at 
> <http://twistedmatrix.com/Releases/Twisted/13.2/NEWS.txt>.
> 
> Many thanks to everyone who had a part in this release - the 
> supporters of the Twisted Software Foundation, the developers who 
> contributed code as well as documentation, and all the people
> building great things with Twisted!
> 
> Twisted Regards, HawkOwl
>> 
>> _______________________________________________ Twisted-Python
>> mailing list Twisted-Python at twistedmatrix.com 
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.15 (GNU/Linux)

iQEcBAEBAgAGBQJSfUhNAAoJECMItHnTkkoRPTkH/1exNGgSy0XAwfgOPMEzriPm
NeWSXdQhg3BkXfrl601+npzqPwEJ0DPJcdResyN8k9aNb/22Y0HXBbl58WB98OB5
3NU08rpi7uipDFQ2OPSc248DGcLH0zWi2H/ITkwVhpI7pD+Zd3JMBFGbq+WGk1BK
jl7QzYW8N8X+hRPmtHIX34aBy6oy72/GMArq7bexMipnWLfA8kdX/hiqyhe/Qa9j
dtZFZg8Jk2QLXehIQhlC7bn0XPRf1ZzuYgmC9ZS3/6kEYE5fQA04B7/Q+wUSipI+
dWA0YjvKj2Nb3uvs/9fkQUQJPQMoulZtWFXfonqugtdBkb3fVWWY/nZyCM4wJGU=
=cSB7
-----END PGP SIGNATURE-----



From m-lists at the-moon.net  Sat Nov  9 04:44:50 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Sat, 9 Nov 2013 11:44:50 +0000
Subject: [Twisted-Python] Bristol (England!) sprint hosted by
	HybridCluster
Message-ID: <CABefbUrt=JZ73XoFbbuMWiXKuLj8hBkXkX==JandJALjWUUEDA@mail.gmail.com>

On 5 November 2013 22:25,  <exarkun at twistedmatrix.com> wrote:
> I'm pleased to invite you to join Tom Prince (2013 Twisted Fellow), Luke
> Marsden (founder of HybridCluster), and the HybridCluster team (including
> myself!) for the first Twisted sprint hosted by HybridCluster!

Count me in. I'll probably try and do some more work on Twisted Names.

-RichardW.



From trac at twistedmatrix.com  Sun Nov 10 00:05:22 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 Nov 2013 07:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1384067122.03.7838649750315673631@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131110/265a7574/attachment-0002.html>

From bino at indoakses-online.com  Mon Nov 11 01:15:55 2013
From: bino at indoakses-online.com (bino at indoakses-online.com)
Date: Mon, 11 Nov 2013 15:15:55 +0700
Subject: [Twisted-Python] question : use existing tac file with tap.
Message-ID: <72e53e6792b13a1ad0c9b1dcbde91145.squirrel@localhost>

Dear All.

Currently I have a single '.tac' file that use MultiService()

Ended with
----------------

#Create Application
print 'create application'
application = service.Application("Serial MultiService Example")
#Creating Multi Service
multiService = service.MultiService()
...
...
multiService.setServiceParent(application)

--------------
currently it works just fine


Now, i need to to able to run it using some parameter from the commandline.
I kne that I have to take 'tap' path.
I read http://docs.huihoo.com/python/twisted/howto/tap.html but (thanks to
my lame brain) failed to understand on how to implement this to my
existing script.

Kindly please tell me how to do it or give me realy basic example on
using/migrating tac file with Twisted Application Plugin.

Sincerely
-bino-




From rmeijer at xs4all.nl  Mon Nov 11 01:45:05 2013
From: rmeijer at xs4all.nl (Rob Meijer)
Date: Mon, 11 Nov 2013 09:45:05 +0100
Subject: [Twisted-Python] Determine TLS version from within request
 handler ? (twisted web)
In-Reply-To: <20131106143827.8349.1534318774.divmod.xquotient.371@top>
References: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>
 <20131106143827.8349.1534318774.divmod.xquotient.371@top>
Message-ID: <8af01e767be5317d016f6258bd46c7f7.squirrel@webmail.xs4all.nl>

On Wed, November 6, 2013 15:38, exarkun at twistedmatrix.com wrote:
> On 11:43 am, rmeijer at xs4all.nl wrote:
>>I'm using twisted web for an https connection. At first I start with
>>creating and configuring a ssl.DefaultOpenSSLContextFactory derived
>>class
>>that disables SSLv2 and SSLv3. So (basically we're left with TLS1.0 and
>>up) and forces the use of a single strong (non RC4 but BEAST
>>vulnerable)
>>cipher.
>>
>>Than I have a http.HTTPFactory derived class with a 'buildProtocol'that
>>return a http.HTTPChannel derived object, that in turn returns a
>>http.Request derived object.
>>
>>Than reactor.listenSSL is invoked with both the SSL factory and the
>>HTTP
>>factory. Now my problem. I don't really understand how these two are
>>connected once the request handler gets invoked.
>>
>>What I would like to do is that I would want to allow TLS1.0 users to
>>use
>>the server, but only after explicitly agreeing that they understand the
>>risks involved with using an old BEAST vulnerable browser.
>>
>>Is there any way to retrieve info on what TLS version has been
>>negotiated
>>from within the HTTP request handler? I've been walking the 'self'
>>object
>>a bit, and self.transport.getHandle() seems to have some tls stuff like
>>'get_cipher_list' and 'get_peer_certificate', but the simple TLS
>>version
>>number does not seem to be available.
>
> The object you get back from `self.transport.getHandle()` happens to be
> an object from pyOpenSSL - an instance of OpenSSL.SSL.Connection.  While
> reading the following, though, bear in mind that `getHandle` doesn't
> make much of a promise about what it will return.  Other transports may
> return something else and future versions of Twisted may change the
> result as well.
>
> The API that OpenSSL appears to offer for determining what protocol
> version is in use appears to be SSL_get_version().  This returns a
> string like "SSLv2" or "TLSv1" (the documentation doesn't say anything
> about TLSv1.1 or TLSv1.2 but *presumably* if you have a version of
> OpenSSL that implements either of these protocols and one of them is
> negotiated on a connection then SSL_get_version() will identify them in
> its result).
>
> pyOpenSSL, however, does not expose this method.  So in order to get the
> information you need you may need to contribute a binding for this
> method to pyOpenSSL.
>
> Jean-Paul

Hi Jean-Paul,

Tnx very much for your answer. I've now ended up with what I think is a
bit of a hack. I've consulted the wikipedia page on TLS :

http://en.wikipedia.org/wiki/Transport_Layer_Security#Web_browsers

and added some code that checks the browser version as reported un the
user-agent header against the minimum version of major browsers that
report to have TLS1.1 support both implemented and enabled by default.
I'm not fully satisfied with this one, but unfortunately it seems to be
the only viable option for my current project :-(


Tnx,

Rob




From ewong at pw-wspx.org  Mon Nov 11 02:57:28 2013
From: ewong at pw-wspx.org (Edmund Wong)
Date: Mon, 11 Nov 2013 17:57:28 +0800
Subject: [Twisted-Python] twisted irc client + packet capturing
In-Reply-To: <527CA5DD.70306@pw-wspx.org>
References: <527CA5DD.70306@pw-wspx.org>
Message-ID: <5280AA08.7030908@pw-wspx.org>

Thanks all for your pointers and ways to do
this packet capturing.  Going to try 'em all,
if I can.

Edmund



From werner at thieprojects.ch  Mon Nov 11 09:49:50 2013
From: werner at thieprojects.ch (Werner Thie)
Date: Mon, 11 Nov 2013 06:49:50 -1000
Subject: [Twisted-Python] Determine TLS version from within request
 handler ? (twisted web)
In-Reply-To: <8af01e767be5317d016f6258bd46c7f7.squirrel@webmail.xs4all.nl>
References: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>
 <20131106143827.8349.1534318774.divmod.xquotient.371@top>
 <8af01e767be5317d016f6258bd46c7f7.squirrel@webmail.xs4all.nl>
Message-ID: <52810AAE.3090107@thieprojects.ch>

On 11/10/13 10:45 PM, Rob Meijer wrote:
> On Wed, November 6, 2013 15:38, exarkun at twistedmatrix.com wrote:
>> On 11:43 am, rmeijer at xs4all.nl wrote:
>>> I'm using twisted web for an https connection. At first I start with
>>> creating and configuring a ssl.DefaultOpenSSLContextFactory derived
>>> class
>>> that disables SSLv2 and SSLv3. So (basically we're left with TLS1.0 and
>>> up) and forces the use of a single strong (non RC4 but BEAST
>>> vulnerable)
>>> cipher.
>>>
>>> Than I have a http.HTTPFactory derived class with a 'buildProtocol'that
>>> return a http.HTTPChannel derived object, that in turn returns a
>>> http.Request derived object.
>>>
>>> Than reactor.listenSSL is invoked with both the SSL factory and the
>>> HTTP
>>> factory. Now my problem. I don't really understand how these two are
>>> connected once the request handler gets invoked.
>>>
>>> What I would like to do is that I would want to allow TLS1.0 users to
>>> use
>>> the server, but only after explicitly agreeing that they understand the
>>> risks involved with using an old BEAST vulnerable browser.
>>>
>>> Is there any way to retrieve info on what TLS version has been
>>> negotiated
>> >from within the HTTP request handler? I've been walking the 'self'
>>> object
>>> a bit, and self.transport.getHandle() seems to have some tls stuff like
>>> 'get_cipher_list' and 'get_peer_certificate', but the simple TLS
>>> version
>>> number does not seem to be available.
>>
>> The object you get back from `self.transport.getHandle()` happens to be
>> an object from pyOpenSSL - an instance of OpenSSL.SSL.Connection.  While
>> reading the following, though, bear in mind that `getHandle` doesn't
>> make much of a promise about what it will return.  Other transports may
>> return something else and future versions of Twisted may change the
>> result as well.
>>
>> The API that OpenSSL appears to offer for determining what protocol
>> version is in use appears to be SSL_get_version().  This returns a
>> string like "SSLv2" or "TLSv1" (the documentation doesn't say anything
>> about TLSv1.1 or TLSv1.2 but *presumably* if you have a version of
>> OpenSSL that implements either of these protocols and one of them is
>> negotiated on a connection then SSL_get_version() will identify them in
>> its result).
>>
>> pyOpenSSL, however, does not expose this method.  So in order to get the
>> information you need you may need to contribute a binding for this
>> method to pyOpenSSL.
>>
>> Jean-Paul
>
> Hi Jean-Paul,
>
> Tnx very much for your answer. I've now ended up with what I think is a
> bit of a hack. I've consulted the wikipedia page on TLS :
>
> http://en.wikipedia.org/wiki/Transport_Layer_Security#Web_browsers
>
> and added some code that checks the browser version as reported un the
> user-agent header against the minimum version of major browsers that
> report to have TLS1.1 support both implemented and enabled by default.
> I'm not fully satisfied with this one, but unfortunately it seems to be
> the only viable option for my current project :-(
>

Hi Rob

Seeing that you are checking the UA header, I have a bit of information 
concerning UA detection code, which lead to me filing a bug report for 
nevow which stumbles over this problem

https://bugs.launchpad.net/nevow/+bug/1249946

As you can see from the link in bug report, IE11 is posing as many 
beasts, but in standard mode the UA string is

'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko'

HTH, Werner



From burak at nehbit.net  Mon Nov 11 12:49:30 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Mon, 11 Nov 2013 14:49:30 -0500
Subject: [Twisted-Python] Introducing Aether, a peer-to-peer,
 anonymous forums app built with Twisted
In-Reply-To: <52810AAE.3090107@thieprojects.ch>
References: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>
 <20131106143827.8349.1534318774.divmod.xquotient.371@top>
 <8af01e767be5317d016f6258bd46c7f7.squirrel@webmail.xs4all.nl>
 <52810AAE.3090107@thieprojects.ch>
Message-ID: <etPan.528134ca.7724c67e.5961@Buraks-MacBook-Pro.local>

Hi everyone,

I wanted to share with you the yearlong project I have been working on, which led me to discover Twisted besides many other things. It’s using Twisted for all peer-to-peer network connections. This also has led me to produce a Qt5 reactor for Twisted (anyone needs this, I can send, MIT)

The app is here: http://www.getaether.net

Aether is a desktop application that provides its users anonymous public spaces for discussion. It’s pretty close to the archetypal form (reddit / slashdot) with votes and else.

The networking backend is Twisted (AMP). The way distribution works is this: If an user upvotes a post, the user’s computer will start to distribute that post. When an user receives a post, if the post received does not have at least ten (an arbitrary number) copies in computers around him, it will mark the post as under extinction danger, and start to distribute it. 

The number of upvotes are the number of times an user sees the same post in other computers. The posts are then lined up according to their upvotes. That’s mostly all there is to it. Oh and it’s encrypted to teeth :). (TLS_RSA_WITH_AES_256_CBC_SHA, 2048 bit RSA keys)

The code is here:

https://github.com/nehbit/aether-public/

Since this is the first project I have built using Twisted (and the reason I discovered & learned it in the first place), I wanted to share it with you. I’d welcome all critique / comments—this is a long term project, and I’m just starting out. Critique on Twisted code, (which is all over the place) is especially welcomed.

I have sought help from some of you before, and all the reply I have received had been unfailingly kind. So this is a collective thank–you for this mailing list and for the general Twisted / Python community, without which Aether would not exist.

Best,
Burak



On November 11, 2013 at 11:52:39 AM, Werner Thie (werner at thieprojects.ch) wrote:

On 11/10/13 10:45 PM, Rob Meijer wrote:  
> On Wed, November 6, 2013 15:38, exarkun at twistedmatrix.com wrote:  
>> On 11:43 am, rmeijer at xs4all.nl wrote:  
>>> I'm using twisted web for an https connection. At first I start with  
>>> creating and configuring a ssl.DefaultOpenSSLContextFactory derived  
>>> class  
>>> that disables SSLv2 and SSLv3. So (basically we're left with TLS1.0 and  
>>> up) and forces the use of a single strong (non RC4 but BEAST  
>>> vulnerable)  
>>> cipher.  
>>>  
>>> Than I have a http.HTTPFactory derived class with a 'buildProtocol'that  
>>> return a http.HTTPChannel derived object, that in turn returns a  
>>> http.Request derived object.  
>>>  
>>> Than reactor.listenSSL is invoked with both the SSL factory and the  
>>> HTTP  
>>> factory. Now my problem. I don't really understand how these two are  
>>> connected once the request handler gets invoked.  
>>>  
>>> What I would like to do is that I would want to allow TLS1.0 users to  
>>> use  
>>> the server, but only after explicitly agreeing that they understand the  
>>> risks involved with using an old BEAST vulnerable browser.  
>>>  
>>> Is there any way to retrieve info on what TLS version has been  
>>> negotiated  
>> >from within the HTTP request handler? I've been walking the 'self'  
>>> object  
>>> a bit, and self.transport.getHandle() seems to have some tls stuff like  
>>> 'get_cipher_list' and 'get_peer_certificate', but the simple TLS  
>>> version  
>>> number does not seem to be available.  
>>  
>> The object you get back from `self.transport.getHandle()` happens to be  
>> an object from pyOpenSSL - an instance of OpenSSL.SSL.Connection. While  
>> reading the following, though, bear in mind that `getHandle` doesn't  
>> make much of a promise about what it will return. Other transports may  
>> return something else and future versions of Twisted may change the  
>> result as well.  
>>  
>> The API that OpenSSL appears to offer for determining what protocol  
>> version is in use appears to be SSL_get_version(). This returns a  
>> string like "SSLv2" or "TLSv1" (the documentation doesn't say anything  
>> about TLSv1.1 or TLSv1.2 but *presumably* if you have a version of  
>> OpenSSL that implements either of these protocols and one of them is  
>> negotiated on a connection then SSL_get_version() will identify them in  
>> its result).  
>>  
>> pyOpenSSL, however, does not expose this method. So in order to get the  
>> information you need you may need to contribute a binding for this  
>> method to pyOpenSSL.  
>>  
>> Jean-Paul  
>  
> Hi Jean-Paul,  
>  
> Tnx very much for your answer. I've now ended up with what I think is a  
> bit of a hack. I've consulted the wikipedia page on TLS :  
>  
> http://en.wikipedia.org/wiki/Transport_Layer_Security#Web_browsers  
>  
> and added some code that checks the browser version as reported un the  
> user-agent header against the minimum version of major browsers that  
> report to have TLS1.1 support both implemented and enabled by default.  
> I'm not fully satisfied with this one, but unfortunately it seems to be  
> the only viable option for my current project :-(  
>  

Hi Rob  

Seeing that you are checking the UA header, I have a bit of information  
concerning UA detection code, which lead to me filing a bug report for  
nevow which stumbles over this problem  

https://bugs.launchpad.net/nevow/+bug/1249946  

As you can see from the link in bug report, IE11 is posing as many  
beasts, but in standard mode the UA string is  

'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko'  

HTH, Werner  

_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131111/2fa3fb21/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Nov 11 17:13:35 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 11 Nov 2013 16:13:35 -0800
Subject: [Twisted-Python] Introducing Aether, a peer-to-peer,
	anonymous forums app built with Twisted
In-Reply-To: <etPan.528134ca.7724c67e.5961@Buraks-MacBook-Pro.local>
References: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>
 <20131106143827.8349.1534318774.divmod.xquotient.371@top>
 <8af01e767be5317d016f6258bd46c7f7.squirrel@webmail.xs4all.nl>
 <52810AAE.3090107@thieprojects.ch>
 <etPan.528134ca.7724c67e.5961@Buraks-MacBook-Pro.local>
Message-ID: <C2ABC870-9DEB-49D9-9C6F-6ADC918CEC15@twistedmatrix.com>


On Nov 11, 2013, at 11:49 AM, Burak Nehbit <burak at nehbit.net> wrote:

> Hi everyone,
> 
> I wanted to share with you the yearlong project I have been working on, which led me to discover Twisted besides many other things. It’s using Twisted for all peer-to-peer network connections. This also has led me to produce a Qt5 reactor for Twisted (anyone needs this, I can send, MIT)

Hi Burak,

Thanks very much for choosing to use Twisted for this project!  It looks interesting :).  And thanks again for your kind words about the community :).

It looks like this is definitely making some significant and interesting security-related claims.  Do you have plans for getting it audited?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131111/dba35509/attachment-0002.html>

From burak at nehbit.net  Mon Nov 11 17:31:05 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Mon, 11 Nov 2013 19:31:05 -0500
Subject: [Twisted-Python] Introducing Aether, a peer-to-peer,
 anonymous forums app built with Twisted
In-Reply-To: <C2ABC870-9DEB-49D9-9C6F-6ADC918CEC15@twistedmatrix.com>
References: <8c39dc05b2eb20388476cfdcc5836647.squirrel@webmail.xs4all.nl>
 <20131106143827.8349.1534318774.divmod.xquotient.371@top>
 <8af01e767be5317d016f6258bd46c7f7.squirrel@webmail.xs4all.nl>
 <52810AAE.3090107@thieprojects.ch>
 <etPan.528134ca.7724c67e.5961@Buraks-MacBook-Pro.local>
 <C2ABC870-9DEB-49D9-9C6F-6ADC918CEC15@twistedmatrix.com>
Message-ID: <etPan.528176c9.4f4ef005.5961@Buraks-MacBook-Pro.local>

Hi Glyph,

It looks like this is definitely making some significant and interesting security-related claims.  Do you have plans for getting it audited?

I’m making more of anonymity claims and less of security. It is secure only in peer–to–peer connections, in that the connection between peers are encrypted. But all data that is distributed on Aether is public, so there is no secrecy, at all. I do not authenticate people either. The only reason the connection between peers are encrypted is it being a defence against a global passive adversary. So the the example goes, I do protect my users from the eye of Mordor (dragnet surveillance) but if Nazguls are in your home (your computer is seized), I can’t save you from that. I do in fact offer some protection for the latter case, too, but I’m less sure of its extent, so I am not touting it until I’m more confident. 

Protection against a dragnet is rather obvious: encrypt everything. Unless you’re a special target, you’ll be safe. 

Protection against seizure is a little bit more complex: I am not committing any information into the database* that can reduce your plausible deniability. So at the point you post an item, you’re no different than another sharer of that item both to the network and to your computer.

* I actually do commit one piece of information: If a post is created by the local user, it will have a flag describing it to be so, so the user’s client can notify the user of replies to that post. I am planning to convert this feature to ‘subscribe to posts or threads’ and remove the flag. So even the local computer won’t have any information about whether the post was received from the network or created locally, but the user will still continue to receive replies as he is subscribed to that post.

Audit— I would love to. I was talking to Laurens about this a few weeks ago for the security, but there hasn’t been a formal audit. I don’t have the resources to pay for that, unfortunately. If anyone wants to do it, I’d be glad to help. 

Best,
Burak



On November 11, 2013 at 7:16:00 PM, Glyph (glyph at twistedmatrix.com) wrote:


On Nov 11, 2013, at 11:49 AM, Burak Nehbit <burak at nehbit.net> wrote:

Hi everyone,

I wanted to share with you the yearlong project I have been working on, which led me to discover Twisted besides many other things. It’s using Twisted for all peer-to-peer network connections. This also has led me to produce a Qt5 reactor for Twisted (anyone needs this, I can send, MIT)

Hi Burak,

Thanks very much for choosing to use Twisted for this project!  It looks interesting :).  And thanks again for your kind words about the community :).

It looks like this is definitely making some significant and interesting security-related claims.  Do you have plans for getting it audited?

-glyph

_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131111/c9a2eb27/attachment-0002.html>

From tobias.oberstein at tavendo.de  Tue Nov 12 12:48:04 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 12 Nov 2013 11:48:04 -0800
Subject: [Twisted-Python] FreeBSD buildslaves: change proposal
Message-ID: <634914A010D0B943A035D226786325D4446A0D962E@EXVMBX020-12.exch020.serverdata.net>

Hi,

we (Tavendo) currently operate 2 Twisted/FreeBSD buildslaves:

a) FreeBSD 8.2, i386 with 1 builder (CPy 2.7)
=> part of the list of "officially supported" builders

b) FreeBSD 9.1, amd64 with 2 builders (CPy 2.7 and PyPy)
=> only listed under "unsupported"

We would like to change that into the following:

c) one FreeBSD amd64 host with 3 builders

c1) CPy 2.7 (supported)
c2) PyPy 2.2 (supported)
c3) PyPy Nightly (unsupported)

Here are some reasons:

- FreeBSD 8.2 is very old (read, unsupported) now, FreeBSD 10 is around the corner, and 9.2 the current official stable release
- i386 is .. getting obscure. Does _anybody_ run FreeBSD i386 anymore?
- there are ongoing workarounds to support that thing .. time that could be spent better
- we want to run a PyPy slave for the PyPy project on that same host (this allows to produce the PyPy/Nightlies .. on a daily basis .. and immediately run Twisted trials against that)
- someone needs to run a PyPy slave anyway .. the current one is broken

- the current Twisted 13.2 has run 100% clean on above b) (CPy) : http://buildbot.twistedmatrix.com/builders/freebsd-9.1-amd64-python2.7/builds/198

So, I'd like to ask Twisted developers if above makes sense, and you would support this way forward.

I've been in contact with PyPy developers, and there seems to be clear interest in improving support for both Twisted and FreeBSD (hence the cross-post).

In general, Tavendo is committed to contribute time & material making Twisted + CPy|PyPy + FreeBSD a combination fully (even better) supported and actually first-class in terms of features, compatibility and performance.

We think < Twisted + PyPy + FreeBSD > in particular has great potential and can provide an extremely powerful stack:

"The _complete_ power to serve."

.. stealing from FreeBSD's motto here - heh, and sorry the the marketing blurb .. I just couldn't resist;)
Thanks!

/Tobias

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131112/28f5334f/attachment-0002.html>

From sank.daniel at gmail.com  Tue Nov 12 13:18:12 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Tue, 12 Nov 2013 12:18:12 -0800
Subject: [Twisted-Python] Is a Viewable Cacheable a good idea?
Message-ID: <CAKN9TDJ7fSifOaWyLFg4Rde9ymW_gbwP_XFAegnxHF8-or9cdA@mail.gmail.com>

Suppose I want to make a networked stockroom program with perspective
broker. We have a user side client object,

class Client(pb.Referenceable):
    def connect(self):
        # host, port, factory, and credentials come from elsewhere
        reactor.connectTCP(host, port, factory)
        d = self.factory.login(credentials, self)
        d.addCallback(self.connected)

    def connected(self, perspective):
        if perspective:
            self.perspective = perspective

and a "corresponding" server side User,

class User(pb.Avatar):
    def __init__(self, name, server, mind):
        self.name = name
        self.server = server
        self.client = mind #This is a remote reference to a Client

    def logout(self):
        ...logic...

We have the IRealm implementer,

@implementer(portal.IRealm)
class Server(object):
    """I manage games and produce Avatars"""
    def __init__(self, loggingPath):
        self.users = {}
        self.stockrooms = set()

    def requestAvatar(self, avatarId, mind, *interfaces):
        assert pb.IPerspective in interfaces
        user = self.users.setdefault(avatarId, User(avatarId, self, mind))
        return pb.IPerspective, user, user.logout

and finally we have the Stockroom

class Stockroom(object):
    ...logic...

Now I'd like for my Clients to be able to remove/add items to the
stockroom. Using only the code above I'd have to add perspective_*
methods to the User. These methods would direct the Client's intent to
the appropriate Stockroom. Changes made to the Stockroom would then
have to be announced to any interested Clients by invoking the
appropriate Users' mind property.

This seems very awkward. I'd rather just have the Stockrooms be
Viewable so that Clients can invoke methods on them directly. If the
Stockroom were _also_ Cacheable then changes on a Stockroom would
automatically propagate to the client process.

Is simultaneously sub-classing Viewable and Cacheable a good idea?

Am I thinking about this properly?

Regards and thanks in advance,
Daniel Sank

-- 
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899



From tobias.oberstein at tavendo.de  Tue Nov 12 14:00:56 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 12 Nov 2013 13:00:56 -0800
Subject: [Twisted-Python] WG: FreeBSD buildslaves: change proposal
Message-ID: <634914A010D0B943A035D226786325D4446A0D96BF@EXVMBX020-12.exch020.serverdata.net>

somehow the Twisted list rejects my posts lately;(

Von: Tobias Oberstein 
Gesendet: Dienstag, 12. November 2013 20:48
An: Twisted general discussion (twisted-python at twistedmatrix.com)
Cc: pypy-dev at python.org
Betreff: FreeBSD buildslaves: change proposal

Hi,

we (Tavendo) currently operate 2 Twisted/FreeBSD buildslaves:

a) FreeBSD 8.2, i386 with 1 builder (CPy 2.7)
=> part of the list of "officially supported" builders

b) FreeBSD 9.1, amd64 with 2 builders (CPy 2.7 and PyPy)
=> only listed under "unsupported"

We would like to change that into the following:

c) one FreeBSD amd64 host with 3 builders

c1) CPy 2.7 (supported)
c2) PyPy 2.2 (supported)
c3) PyPy Nightly (unsupported)

Here are some reasons:

- FreeBSD 8.2 is very old (read, unsupported) now, FreeBSD 10 is around the corner, and 9.2 the current official stable release
- i386 is .. getting obscure. Does _anybody_ run FreeBSD i386 anymore?
- there are ongoing workarounds to support that thing .. time that could be spent better
- we want to run a PyPy slave for the PyPy project on that same host (this allows to produce the PyPy/Nightlies .. on a daily basis .. and immediately run Twisted trials against that)
- someone needs to run a PyPy slave anyway .. the current one is broken
- the current Twisted 13.2 has run 100% clean on above b) (CPy) : http://buildbot.twistedmatrix.com/builders/freebsd-9.1-amd64-python2.7/builds/198

So, I'd like to ask Twisted developers if above makes sense, and you would support this way forward.

I've been in contact with PyPy developers, and there seems to be clear interest in improving support for both Twisted and FreeBSD (hence the cross-post).

In general, Tavendo is committed to contribute time & material making Twisted + CPy|PyPy + FreeBSD a combination fully (even better) supported and actually first-class in terms of features, compatibility and performance.

We think < Twisted + PyPy + FreeBSD > in particular has great potential and can provide an extremely powerful stack:

"The _complete_ power to serve."

.. stealing from FreeBSD's motto here - heh, and sorry the the marketing blurb .. I just couldn't resist;)

Thanks!

/Tobias




From jonas.brunsgaard at gmail.com  Wed Nov 13 04:27:50 2013
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Wed, 13 Nov 2013 12:27:50 +0100
Subject: [Twisted-Python] DirtyReactorAggregateError: Reactor was unclean. -
	What to do?
Message-ID: <CACVXvXqstzDb4504ZuGtWd3QZ8EEsjmhRKQiYUZ+p_M+4VPGAA@mail.gmail.com>

Dear list

I may need som advise to get som testing wokring.

I have a server for service a, which creates a client for service b to get
som data:

 class StateHandler(object):
    implements(State.Iface)

    def __init__(self):
        #do stuff
        self.loaddata()

     @inlineCallbacks
    def loaddata(self):
        try:
            conn = yield ClientCreator(
                reactor,
                TTwisted.ThriftClientProtocol,
                dsClient,

TBinaryProtocol.TBinaryProtocolFactory()).connectTCP("10.70.10.30", 7246)
                data = yield conn.client.getAllAuthenticationData()
            #process data
            conn.transport.loseConnection()

I use trail to test this service, code is bolow:

class TestStateStore(unittest.TestCase):

     @defer.inlineCallbacks
    def setUp(self):
        self.handler = StateHandler()
        self.processor = State.Processor(self.handler)
        self.pfactory = TBinaryProtocol.TBinaryProtocolFactory()
        self.server = reactor.listenTCP(
            0,
            TTwisted.ThriftServerFactory(self.processor, self.pfactory),
            interface="127.0.0.1")
        self.portNo = self.server.getHost().port
        self.txclient = yield ClientCreator(
            reactor,
             TTwisted.ThriftClientProtocol,
            State.Client,
            self.pfactory).connectTCP("127.0.0.1", self.portNo)
        self.client = self.txclient.client

    @defer.inlineCallbacks
    def tearDown(self):
        self.txclient.transport.loseConnection()
        yield self.server.stopListening()


    def test_dummy(self):
        self.assertEquals(True, True)

When I run test it fails with the following error message.

ERROR]
Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
<DelayedCall 0x29d99e0 [29.9931809902s] called=0 cancelled=0
Client.failIfNotConnected(TimeoutError('',))>

oc.tests.test_state_service.TestStateStore.test_dummy
===============================================================================
[ERROR]
Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<<class 'twisted.internet.tcp.Client'> to ('10.70.10.30', 7246) at 29d2c10>

oc.tests.test_state_service.TestStateStore.test_dummy
-------------------------------------------------------------------------------
Ran 1 tests in 0.010s

To me it seems like Trail shuts down the reactor and throws an error, due
to the fact that the reactor is unclean, because the server client is still
active, or at least not cleaned up. How do I work around this problem, any
help is very appreciated.

--
Jonas Brunsgaard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131113/9ded9b27/attachment-0002.html>

From grindizer at gmail.com  Wed Nov 13 04:32:11 2013
From: grindizer at gmail.com (Flint)
Date: Wed, 13 Nov 2013 12:32:11 +0100
Subject: [Twisted-Python] Is a Viewable Cacheable a good idea?
In-Reply-To: <CAKN9TDJ7fSifOaWyLFg4Rde9ymW_gbwP_XFAegnxHF8-or9cdA@mail.gmail.com>
References: <CAKN9TDJ7fSifOaWyLFg4Rde9ymW_gbwP_XFAegnxHF8-or9cdA@mail.gmail.com>
Message-ID: <CALpq1pYg_nY8B5sW3Jv5HDS4vSzYqpFUAWjLKHpoQ0AvGviLeA@mail.gmail.com>

Hi,

>> Is simultaneously sub-classing Viewable and Cacheable a good idea?
I am not sure it would work, at least not as you expect.
Viewable and Cacheable both implement a different version of jellyFor
(which will decides how object is seen on the other side of the connection).
If you sub-class both of them your resulting class will act either as a
cacheable or as a viewable depending on how you sub-class them -- at least
for the serialization part.

For your problem, It seems to me that you're trying to do 2 things:
1 - manage a server side object of stockroom(s)
2 - keep a copy of that object(s) synchronized in clients.

So may be (IMHO) you could have one viewable object acting like a
stockroom-manager that clients will (remote)call to make changes on the
server side stockroom-object,
And a cacheable stockroom-object, that you will sync with client.

That said, note that, there is no magic in the sync process when using
cacheable, you will have to propagate the change made to the cacheable
object yourself, by implementing the observe_ methods.
And when you make any changes to the server copy you will have to call
those observe_ methods on all clients, just as you said you would do in
your example.

Another option would be to stockroom object with copyable items and
implement getter method in the stockroom-manager, so clients would be able
to query only data that they need, when they need it, and then do not fire
all the sync stuff each time your stockroom is updates.
Besides cacheable object are said to be used for big object that do not
change frequently, which is not the case of your stockroom I guess.

Hope this help.
--
Nacim.






2013/11/12 Daniel Sank <sank.daniel at gmail.com>

> Suppose I want to make a networked stockroom program with perspective
> broker. We have a user side client object,
>
> class Client(pb.Referenceable):
>     def connect(self):
>         # host, port, factory, and credentials come from elsewhere
>         reactor.connectTCP(host, port, factory)
>         d = self.factory.login(credentials, self)
>         d.addCallback(self.connected)
>
>     def connected(self, perspective):
>         if perspective:
>             self.perspective = perspective
>
> and a "corresponding" server side User,
>
> class User(pb.Avatar):
>     def __init__(self, name, server, mind):
>         self.name = name
>         self.server = server
>         self.client = mind #This is a remote reference to a Client
>
>     def logout(self):
>         ...logic...
>
> We have the IRealm implementer,
>
> @implementer(portal.IRealm)
> class Server(object):
>     """I manage games and produce Avatars"""
>     def __init__(self, loggingPath):
>         self.users = {}
>         self.stockrooms = set()
>
>     def requestAvatar(self, avatarId, mind, *interfaces):
>         assert pb.IPerspective in interfaces
>         user = self.users.setdefault(avatarId, User(avatarId, self, mind))
>         return pb.IPerspective, user, user.logout
>
> and finally we have the Stockroom
>
> class Stockroom(object):
>     ...logic...
>
> Now I'd like for my Clients to be able to remove/add items to the
> stockroom. Using only the code above I'd have to add perspective_*
> methods to the User. These methods would direct the Client's intent to
> the appropriate Stockroom. Changes made to the Stockroom would then
> have to be announced to any interested Clients by invoking the
> appropriate Users' mind property.
>
> This seems very awkward. I'd rather just have the Stockrooms be
> Viewable so that Clients can invoke methods on them directly. If the
> Stockroom were _also_ Cacheable then changes on a Stockroom would
> automatically propagate to the client process.
>
> Is simultaneously sub-classing Viewable and Cacheable a good idea?
>
> Am I thinking about this properly?
>
> Regards and thanks in advance,
> Daniel Sank
>
> --
> Department of Physics
> Broida Hall
> University of California
> Santa Barbara, CA 93117
> (805)893-3899
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131113/cceb234c/attachment-0002.html>

From clayton_hd at hotmail.com  Fri Nov 15 12:38:00 2013
From: clayton_hd at hotmail.com (Clayton Vicente)
Date: Fri, 15 Nov 2013 20:38:00 +0100
Subject: [Twisted-Python] =?iso-8859-1?q?Xbmc_Don=B4t_close_after_run_a_sc?=
 =?iso-8859-1?q?ript_with_Twisted?=
Message-ID: <SNT147-W4291FAA3C10EBA98988297FEFB0@phx.gbl>

Hi guys, i start to play with Twisted. My main intention is to create a add-on for run in a Raspberry Pi (Raspbmc). For now almost every thing is working fine.Here is the link of the add-onhttps://dl.dropboxusercontent.com/u/89557567/script.cavplustcp-0.1.4.zipMy only problem is that the Xbmc (running in a Raspbmc) never close if i have Twisted running.In the default.py i have a function that will run after the Xbmc abort request. def _killConnections(self):        if(self.server1):           self.server1.stopListening()        if(self.server2):           self.server2.stopListening()        if(self.client1):           self.client1.disconnect()        if(self.client2):           self.client2.disconnect()        protocol.transport.loseConnection()         xbmc.log(msg="reactor stop")              reactor.stop()I tested in a Windows 7 and works fine, the script close the connections and then the Xbmc close. If i remove this function the Xbmc will never close.The problem is with this script running in a linux OS. The Xbmc try to close the script, but don´t work, so the Xbmc will freeze.Can you guys help me ?ThanksRegardsClayton
 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131115/bb7817b2/attachment-0002.html>

From twisted at tomvn.com  Sat Nov 16 07:09:48 2013
From: twisted at tomvn.com (Tom van Neerijnen)
Date: Sat, 16 Nov 2013 14:09:48 +0000
Subject: [Twisted-Python] Returning a deferred from buildProtocol
	t.i.p.Factory
Message-ID: <CAMwy1tyGTDZCoPYpQOPeqnSA-g9qC0A=+nLE2UYCs13_C_QmZA@mail.gmail.com>

Hi all

I'm building a simple TCP load balancer based on a code snippet from Glyph
on SO:
http://stackoverflow.com/questions/4096061/general-question-regarding-wether-or-not-use-twisted-in-tcp-proxy-project

It's served me well but I can't work out how to convert Glyphs round robin
retrieval of the server endpoint into an async balancing decision in the
buildProtocol method of the Factory. If I return a deferred here it fails
with an AttributeError: Deferred instance has no attribute 'makeConnection'.

Currently I'm working around this by running a separate management loop
that periodically updates a dictionary with all the data necessary to make
my routing decision so that I can do it without a deferred. This worries me
because I may be making my decision on slightly stale data and I'd really
like this to be a real time decision as the connection comes in. Does
anyone have a clever way of doing this?

An example is below. The hashed out buildProtocol is a synchronous decision
which works. Thanks in advance!

from twisted.internet.protocol import Factory
from twisted.protocols.portforward import ProxyFactory
from twisted.internet import reactor, defer
import random

from twisted.python import log
import sys
log.startLogging(sys.stderr)

local_ports = set([1024, 1025])

def port_routing_decision_sync():
    return random.choice(list(local_ports))

def port_routing_decision_async():
    d = defer.Deferred()
    reactor.callLater(1, d.callback, port_routing_decision_sync())
    return d

class Balancer(Factory):
    # def buildProtocol(self, addr):
    #     port = port_routing_decision_sync()
    #     print "connecting to local port {}".format(port)
    #     return ProxyFactory("127.0.0.1", port).buildProtocol(addr)

    @defer.inlineCallbacks
    def buildProtocol(self, addr):
        port = yield port_routing_decision_async()
        print "connecting to local port {}".format(port)
        defer.returnValue(ProxyFactory("127.0.0.1",
port).buildProtocol(addr))

def main():
    factory = Balancer()
    reactor.listenTCP(5678, factory)
    reactor.run()

if __name__ == "__main__":
    main()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131116/f2c9eadb/attachment-0002.html>

From ldanielburr at me.com  Sat Nov 16 09:21:53 2013
From: ldanielburr at me.com (L. Daniel Burr)
Date: Sat, 16 Nov 2013 10:21:53 -0600
Subject: [Twisted-Python] Returning a deferred from
	buildProtocol	t.i.p.Factory
In-Reply-To: <CAMwy1tyGTDZCoPYpQOPeqnSA-g9qC0A=+nLE2UYCs13_C_QmZA@mail.gmail.com>
References: <CAMwy1tyGTDZCoPYpQOPeqnSA-g9qC0A=+nLE2UYCs13_C_QmZA@mail.gmail.com>
Message-ID: <52879BA1.1010201@me.com>

Hi Tom,

On 11/16/13 8:09 AM, Tom van Neerijnen wrote:
> Hi all
>
> I'm building a simple TCP load balancer based on a code snippet from 
> Glyph on SO: 
> http://stackoverflow.com/questions/4096061/general-question-regarding-wether-or-not-use-twisted-in-tcp-proxy-project
>
> It's served me well but I can't work out how to convert Glyphs round 
> robin retrieval of the server endpoint into an async balancing 
> decision in the buildProtocol method of the Factory. If I return a 
> deferred here it fails with an AttributeError: Deferred instance has 
> no attribute 'makeConnection'.
[SNIP]

Have you considered using https://pypi.python.org/pypi/txLoadBalancer as 
the basis for your load-balancer?  It supports random, round-robin, 
least-connections, and weighted, so perhaps it would suit your needs.

Hope this helps,

L. Daniel Burr



From dstainton415 at gmail.com  Sat Nov 16 11:14:59 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 16 Nov 2013 10:14:59 -0800
Subject: [Twisted-Python] Ticket #1330 - Socks V5 functionality
Message-ID: <CAFN1edrNd-Q=BgOyqseWonb_WsHNx+ejJqAKWSzym4ax8p4SVQ@mail.gmail.com>

Hi, I'd like to help out and write unit tests for the Socks v5 code in
this ticket:
https://twistedmatrix.com/trac/ticket/1330

Should I write something very similar to this?? ::
http://twistedmatrix.com/trac/browser/trunk/twisted/test/test_socks.py

My goal is getting socksv5 client and server code merged to mainline
Twisted with unit tests.

Cheers,

David



From ltaylor.volks at gmail.com  Sat Nov 16 12:05:11 2013
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Sat, 16 Nov 2013 12:05:11 -0700
Subject: [Twisted-Python] Returning a deferred from buildProtocol
	t.i.p.Factory
In-Reply-To: <CAMwy1tyGTDZCoPYpQOPeqnSA-g9qC0A=+nLE2UYCs13_C_QmZA@mail.gmail.com>
References: <CAMwy1tyGTDZCoPYpQOPeqnSA-g9qC0A=+nLE2UYCs13_C_QmZA@mail.gmail.com>
Message-ID: <979A680E-DD89-4D9B-9AE8-F3910F74C18B@gmail.com>


On Nov 16, 2013, at 7:09 AM, Tom van Neerijnen wrote:

> Hi all
> 
> I'm building a simple TCP load balancer based on a code snippet from Glyph on SO: http://stackoverflow.com/questions/4096061/general-question-regarding-wether-or-not-use-twisted-in-tcp-proxy-project
> 
> It's served me well but I can't work out how to convert Glyphs round robin retrieval of the server endpoint into an async balancing decision in the buildProtocol method of the Factory. If I return a deferred here it fails with an AttributeError: Deferred instance has no attribute 'makeConnection'.
> 
> Currently I'm working around this by running a separate management loop that periodically updates a dictionary with all the data necessary to make my routing decision so that I can do it without a deferred. This worries me because I may be making my decision on slightly stale data and I'd really like this to be a real time decision as the connection comes in. Does anyone have a clever way of doing this?
> 


Hi Tom,

One possibly unexpected aspect of using @inlineCallbacks is that the decorated function itself returns a Deferred. This is why you see the AttributeError...the machinery calling buildProtocol expects an IProtocol instance (or None), and the function is returning a Deferred.   `defer.returnValue()` is provided to the callback on that Deferred, not as a direct return value from the decorated function.

If you want to make the routing decision when the client connects, then you could push the decision-making process down into the Protocol itself.

Here's a quick mockup overriding connectionMade in a ProxyServer protocol subclass. It calls the factory routing function (which may or may not return a deferred), and connects the proxy once the decision has been made.


from twisted.internet.protocol import Factory
from twisted.protocols.portforward import ProxyServer


class Balancer(Factory):
    protocol = RoutingProxyServer
    routing_func = port_routing_decision_async


class RoutingProxyServer(ProxyServer):

    def connectionMade(self):
        # Don't read anything from the connecting client until we have
        # somewhere to send it to.
        self.transport.pauseProducing()

        client = self.clientProtocolFactory()
        client.setServer(self)
        
        if self.reactor is None:
            from twisted.internet import reactor
            self.reactor = reactor
        
        def connectProxy(host, port):
            self.reactor.connectTCP(host, port, client)

        d = maybeDeferred(self.factory.routing_func)
        d.addCallback(connectProxy)
        d.addErrback(log.err)


Lucas





> An example is below. The hashed out buildProtocol is a synchronous decision which works. Thanks in advance!
> 
> from twisted.internet.protocol import Factory
> from twisted.protocols.portforward import ProxyFactory
> from twisted.internet import reactor, defer
> import random
> 
> from twisted.python import log
> import sys
> log.startLogging(sys.stderr)
> 
> local_ports = set([1024, 1025])
> 
> def port_routing_decision_sync():
>     return random.choice(list(local_ports))
> 
> def port_routing_decision_async():
>     d = defer.Deferred()
>     reactor.callLater(1, d.callback, port_routing_decision_sync())
>     return d
> 
> class Balancer(Factory):
>     # def buildProtocol(self, addr):
>     #     port = port_routing_decision_sync()
>     #     print "connecting to local port {}".format(port)
>     #     return ProxyFactory("127.0.0.1", port).buildProtocol(addr)
> 
>     @defer.inlineCallbacks
>     def buildProtocol(self, addr):
>         port = yield port_routing_decision_async()
>         print "connecting to local port {}".format(port)
>         defer.returnValue(ProxyFactory("127.0.0.1", port).buildProtocol(addr))
> 
> def main():
>     factory = Balancer()
>     reactor.listenTCP(5678, factory)
>     reactor.run()
> 
> if __name__ == "__main__":
>     main()

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131116/b6f70e6c/attachment-0002.html>

From exarkun at twistedmatrix.com  Sat Nov 16 12:44:34 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 16 Nov 2013 19:44:34 -0000
Subject: [Twisted-Python] Ticket #1330 - Socks V5 functionality
In-Reply-To: <CAFN1edrNd-Q=BgOyqseWonb_WsHNx+ejJqAKWSzym4ax8p4SVQ@mail.gmail.com>
References: <CAFN1edrNd-Q=BgOyqseWonb_WsHNx+ejJqAKWSzym4ax8p4SVQ@mail.gmail.com>
Message-ID: <20131116194434.15706.1987930455.divmod.xquotient.27@top>

On 06:14 pm, dstainton415 at gmail.com wrote:
>Hi, I'd like to help out and write unit tests for the Socks v5 code in
>this ticket:
>https://twistedmatrix.com/trac/ticket/1330
>
>Should I write something very similar to this?? ::
>http://twistedmatrix.com/trac/browser/trunk/twisted/test/test_socks.py
>
>My goal is getting socksv5 client and server code merged to mainline
>Twisted with unit tests.


twisted/test/test_socks.py is a bad example of a test suite.  Here are 
the things about it you should not emulate:

  * It has documentation that is far from complete.  Documentation is 
just as important in unit tests as elsewhere.  In particular, 
documenting the intent of every test method is critical otherwise the 
test suite is very difficult to maintain.

  * It exercises too much code in each test method.  Well written test 
methods do a single very simple thing.  A good rule of thumb is that 
there should only be one `TestCase.assert...` method call in each test 
method.

  * It uses some `TestCase.assert...` methods which are deprecated or 
soon to be deprecated.  `assert_` is the main offender here.

  * It doesn't completely cover the implementation (probably because the 
implementation wasn't developed test-driven).  You can achieve full test 
coverage without doing test-driven development but it takes more 
discipline.  I suggest doing a test-driven implementation of the SOCKSv5 
functionality you want (the easy approach to this is to start writing 
tests, then copy the *smallest* possible piece of the existing, untested 
implementation into your new implementation to make those tests pass; 
repeat until you have all of the desired functionality).

  * `StringTCPTransport` seems redundant.  `StringTransport` offers all 
of this functionality already.

  * Many names used in the module don't follow the Twisted name 
convention (most obviously, "under_scores" are used throughout rather 
than "camelCase").

  * Native strings are used to represent byte strings throughout.

  * The protocol interface is uniformly misused (it should call 
`makeConnection` not `connectionMade`)

Hope this helps,
Jean-Paul



From dstainton415 at gmail.com  Sat Nov 16 13:28:53 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 16 Nov 2013 12:28:53 -0800
Subject: [Twisted-Python] Ticket #1330 - Socks V5 functionality
In-Reply-To: <20131116194434.15706.1987930455.divmod.xquotient.27@top>
References: <CAFN1edrNd-Q=BgOyqseWonb_WsHNx+ejJqAKWSzym4ax8p4SVQ@mail.gmail.com>
 <20131116194434.15706.1987930455.divmod.xquotient.27@top>
Message-ID: <CAFN1edojXa93qJ52SCi8kYT+=HWmwT4TFNDhWV3VBTWtUsfrng@mail.gmail.com>

Hi Jean-Paul,

Thanks for all the info, observations about the existing code and for
the coding advice!

I think I should only implement the socks 5 server side
since txsocksx seems to have the client implementation covered.
Some of the Tor developers use it...

I'm not used to test driven development. I'll give it a try and
implement the SOCKSv5 server functionality...


Cheers!

David

On Sat, Nov 16, 2013 at 11:44 AM,  <exarkun at twistedmatrix.com> wrote:
> On 06:14 pm, dstainton415 at gmail.com wrote:
>>
>> Hi, I'd like to help out and write unit tests for the Socks v5 code in
>> this ticket:
>> https://twistedmatrix.com/trac/ticket/1330
>>
>> Should I write something very similar to this?? ::
>> http://twistedmatrix.com/trac/browser/trunk/twisted/test/test_socks.py
>>
>> My goal is getting socksv5 client and server code merged to mainline
>> Twisted with unit tests.
>
>
>
> twisted/test/test_socks.py is a bad example of a test suite.  Here are the
> things about it you should not emulate:
>
>  * It has documentation that is far from complete.  Documentation is just as
> important in unit tests as elsewhere.  In particular, documenting the intent
> of every test method is critical otherwise the test suite is very difficult
> to maintain.
>
>  * It exercises too much code in each test method.  Well written test
> methods do a single very simple thing.  A good rule of thumb is that there
> should only be one `TestCase.assert...` method call in each test method.
>
>  * It uses some `TestCase.assert...` methods which are deprecated or soon to
> be deprecated.  `assert_` is the main offender here.
>
>  * It doesn't completely cover the implementation (probably because the
> implementation wasn't developed test-driven).  You can achieve full test
> coverage without doing test-driven development but it takes more discipline.
> I suggest doing a test-driven implementation of the SOCKSv5 functionality
> you want (the easy approach to this is to start writing tests, then copy the
> *smallest* possible piece of the existing, untested implementation into your
> new implementation to make those tests pass; repeat until you have all of
> the desired functionality).
>
>  * `StringTCPTransport` seems redundant.  `StringTransport` offers all of
> this functionality already.
>
>  * Many names used in the module don't follow the Twisted name convention
> (most obviously, "under_scores" are used throughout rather than
> "camelCase").
>
>  * Native strings are used to represent byte strings throughout.
>
>  * The protocol interface is uniformly misused (it should call
> `makeConnection` not `connectionMade`)
>
> Hope this helps,
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From trac at twistedmatrix.com  Sun Nov 17 00:05:17 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 Nov 2013 07:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1384671917.91.7587235641305290891@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131117/6c5385b5/attachment-0002.html>

From yangyouxiu at gmail.com  Sun Nov 17 02:19:20 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Sun, 17 Nov 2013 17:19:20 +0800
Subject: [Twisted-Python] how to change an qt4 applicaion using twisted?
Message-ID: <201311171718460284357@gmail.com>


Hi,all！
I have to change an QT application to client-server model, and i found twisted and qt4 reactor. But i don't know where to start? how should i do to split the qt application? what's the step. as for the server, what should i 
initialize?
thanks all.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131117/7256f5fb/attachment-0002.html>

From _ at lvh.io  Sun Nov 17 02:57:23 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sun, 17 Nov 2013 10:57:23 +0100
Subject: [Twisted-Python] how to change an qt4 applicaion using twisted?
In-Reply-To: <201311171718460284357@gmail.com>
References: <201311171718460284357@gmail.com>
Message-ID: <CAE_Hg6ZdiSTdYCLKcY_r85T-4pkzfUMH0AZfouY0EtRfFR+sjg@mail.gmail.com>

Hi yangyouxiu,


Like Twisted, Qt (and almost all GUI toolkits) work on a single thread,
evented mechanism, with an event loop at its core. Qt4Reactor, I believe,
just merges these two loops into one loop.

The documentation for Qt4Reactor should tell you how to do that. Presumably
there's a reactor.install() somewhere :)


good luck
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131117/a63c54c1/attachment-0002.html>

From yangyouxiu at gmail.com  Sun Nov 17 03:10:30 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Sun, 17 Nov 2013 18:10:30 +0800
Subject: [Twisted-Python] how to change an qt4 applicaion using twisted?
References: <201311171718460284357@gmail.com>, 
 <CAE_Hg6ZdiSTdYCLKcY_r85T-4pkzfUMH0AZfouY0EtRfFR+sjg@mail.gmail.com>
Message-ID: <2013111718102654081815@gmail.com>

Thank you very much.

Is it reasonable to bulid only one protocol to deal with datas tranports between client and server ？ If in this way, i believe i have to write lots of case to deal with the message, such as to call differnent method,it's impressive.
Is there any suggestions?




杨有秀
敬上

From: Laurens Van Houtven
Date: 2013-11-17 17:57
To: Twisted general discussion
Subject: Re: [Twisted-Python] how to change an qt4 applicaion using twisted?
Hi yangyouxiu,



Like Twisted, Qt (and almost all GUI toolkits) work on a single thread, evented mechanism, with an event loop at its core. Qt4Reactor, I believe, just merges these two loops into one loop.


The documentation for Qt4Reactor should tell you how to do that. Presumably there's a reactor.install() somewhere :)



good luck
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131117/f771426c/attachment-0002.html>

From _ at lvh.io  Sun Nov 17 05:34:14 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sun, 17 Nov 2013 13:34:14 +0100
Subject: [Twisted-Python] how to change an qt4 applicaion using twisted?
In-Reply-To: <2013111718102654081815@gmail.com>
References: <201311171718460284357@gmail.com>
 <CAE_Hg6ZdiSTdYCLKcY_r85T-4pkzfUMH0AZfouY0EtRfFR+sjg@mail.gmail.com>
 <2013111718102654081815@gmail.com>
Message-ID: <CAE_Hg6YuYxHGNKCet14Jz3QggC=pXYfdp8O7=Ox+3Vy7JUFfsA@mail.gmail.com>

On Sun, Nov 17, 2013 at 11:10 AM, yangyouxiu <yangyouxiu at gmail.com> wrote:

>  Thank you very much.
>
> Is it reasonable to bulid only one protocol to deal with datas tranports
> between client and server ？ If in this way, i believe i have to write lots
> of case to deal with the message, such as to call differnent method,it's
> impressive.
> Is there any suggestions?
>

It might be. For simple client<->server interactions using messages, it may
be a much better idea to use some existing machinery instead. Many APIs use
REST. Twisted provides the tools to do REST, but it also provides other
(IMHO better) mechanisms. For example: AMP is a message-based asynchronous
protocol. Alternatively, twisted provides PB, which allows you to share
objects over the wire.

If you like the mental model of a client and a server sending messages to
each other, AMP is probably your thing :)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131117/095312d3/attachment-0002.html>

From ayik at freebsd.or.id  Sun Nov 17 08:43:48 2013
From: ayik at freebsd.or.id (Sayid Munawar)
Date: Sun, 17 Nov 2013 22:43:48 +0700
Subject: [Twisted-Python] question : use existing tac file with tap.
In-Reply-To: <72e53e6792b13a1ad0c9b1dcbde91145.squirrel@localhost>
References: <72e53e6792b13a1ad0c9b1dcbde91145.squirrel@localhost>
Message-ID: <121564E5A45D4AD6A75D395CD2112BEA@freebsd.or.id>

Hi Bino, 

i _never_ write code using twisted (yet, i hope), but reading your question lead me to one (i think) example:

https://github.com/praekelt/vumi/blob/develop/vumi/servicemaker.py#L174

hope it helps 

-- 
Sayid Munawar
Sent with Sparrow (http://www.sparrowmailapp.com/?sig)


On Monday, 11 November 2013 at 3:15 PM, bino at indoakses-online.com wrote:

> Dear All.
> 
> Currently I have a single '.tac' file that use MultiService()
> 
> Ended with
> ----------------
> 
> #Create Application
> print 'create application'
> application = service.Application("Serial MultiService Example")
> #Creating Multi Service
> multiService = service.MultiService()
> ...
> ...
> multiService.setServiceParent(application)
> 
> --------------
> currently it works just fine
> 
> 
> Now, i need to to able to run it using some parameter from the commandline.
> I kne that I have to take 'tap' path.
> I read http://docs.huihoo.com/python/twisted/howto/tap.html but (thanks to
> my lame brain) failed to understand on how to implement this to my
> existing script.
> 
> Kindly please tell me how to do it or give me realy basic example on
> using/migrating tac file with Twisted Application Plugin.
> 
> Sincerely
> -bino-
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com (mailto:Twisted-Python at twistedmatrix.com)
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131117/42618373/attachment-0002.html>

From sank.daniel at gmail.com  Sun Nov 17 10:01:33 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sun, 17 Nov 2013 09:01:33 -0800
Subject: [Twisted-Python] how to change an qt4 applicaion using twisted?
In-Reply-To: <CAE_Hg6YuYxHGNKCet14Jz3QggC=pXYfdp8O7=Ox+3Vy7JUFfsA@mail.gmail.com>
References: <201311171718460284357@gmail.com>
 <CAE_Hg6ZdiSTdYCLKcY_r85T-4pkzfUMH0AZfouY0EtRfFR+sjg@mail.gmail.com>
 <2013111718102654081815@gmail.com>
 <CAE_Hg6YuYxHGNKCet14Jz3QggC=pXYfdp8O7=Ox+3Vy7JUFfsA@mail.gmail.com>
Message-ID: <CAKN9TD+9A0_eOQQ8a_HxCnH6P+kf4dLLzCFWg6s-9VN1qDywxw@mail.gmail.com>

Yangyouxiu,

I can definitely help you with this as I've recently written a chat
server/client with twisted+PyQt4 and am working on a more complex
program that uses PyQt4 with twisted's perspective broker.

I have attached five files:

1. client-pyqtreactor.py is a chat client using pyqtreactor and PyQt4.
2. ui.ui is the user interface file loaded by client-pyqtreactor.py
3. server.py is a chat server using asyncore. Note that the server
need not use PyQt4 as it has no GUI.
4. constants.py contains configuration data for the client and server
5. qt4reactor.py is the custom reactor

Put these all in the same directory, then run the server, then run
some clients. When the client window appears click "connect" and then
you can use it just like any other network chat program.

I hope this helps, and if anyone has suggestions on how to improve the
client code please tell me, as I intend on using it as part of a
tutorial on twsited+PyQt4.

Danie Sank
-------------- next part --------------
A non-text attachment was scrubbed...
Name: client-pyqtreactor.py
Type: application/binary
Size: 3136 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20131117/dc3c1da8/attachment-0008.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: constants.py
Type: application/binary
Size: 60 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20131117/dc3c1da8/attachment-0009.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: qt4reactor.py
Type: application/binary
Size: 7686 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20131117/dc3c1da8/attachment-0010.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: server.py
Type: application/binary
Size: 2260 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20131117/dc3c1da8/attachment-0011.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: ui.ui
Type: application/octet-stream
Size: 2144 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20131117/dc3c1da8/attachment-0002.obj>

From sank.daniel at gmail.com  Sun Nov 17 10:13:43 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sun, 17 Nov 2013 09:13:43 -0800
Subject: [Twisted-Python] Is a Viewable Cacheable a good idea?
In-Reply-To: <CALpq1pYg_nY8B5sW3Jv5HDS4vSzYqpFUAWjLKHpoQ0AvGviLeA@mail.gmail.com>
References: <CAKN9TDJ7fSifOaWyLFg4Rde9ymW_gbwP_XFAegnxHF8-or9cdA@mail.gmail.com>
 <CALpq1pYg_nY8B5sW3Jv5HDS4vSzYqpFUAWjLKHpoQ0AvGviLeA@mail.gmail.com>
Message-ID: <CAKN9TDJkhipyZU63AHbdMRnz2MwCRUMqWoB0QffpQq9O+rD4aA@mail.gmail.com>

> So may be (IMHO) you could have one viewable object acting like a stockroom-manager
> that clients will (remote)call to make changes on the server side stockroom-object, and
> a cacheable stockroom-object, that you will sync with client.

Now that I've been working on this for a while and understand what
_doesn't_ work I see why your suggestion here is a very good one.
Thank you.

The one funny aspect of using a single manager object is that whenever
I want to modify an element in the stockroom I have to pass the
manager a reference to the object I'm trying to modify:

myViewpointToTheManager.callRemote("purchaseItem", myRemoteCacheOfSomeItem)

It seems slightly distasteful to have to call a generic purchase
method for _any_ object I might want to buy.

That said I think I've figured out a good way to handle this whole
thing. I attach to this email a file containing some classes that
allow interaction both by talking to a Viewable manager or by invoking
remote methods on the managed objects themselves. An explanation of
intended use is given in the source code.

I hope this is helpful to others.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: viewableCacheable.py
Type: application/binary
Size: 4325 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20131117/8e577a3a/attachment-0002.bin>

From twisted at tomvn.com  Sun Nov 17 10:44:05 2013
From: twisted at tomvn.com (Tom van Neerijnen)
Date: Sun, 17 Nov 2013 17:44:05 +0000
Subject: [Twisted-Python] Returning a deferred from buildProtocol
	t.i.p.Factory
In-Reply-To: <979A680E-DD89-4D9B-9AE8-F3910F74C18B@gmail.com>
References: <CAMwy1tyGTDZCoPYpQOPeqnSA-g9qC0A=+nLE2UYCs13_C_QmZA@mail.gmail.com>
 <979A680E-DD89-4D9B-9AE8-F3910F74C18B@gmail.com>
Message-ID: <CAMwy1typfbvqvD_VCzXfhJST9yD7MJmF7DZEPc4tGd8ee8+CEQ@mail.gmail.com>

Thanks for both those suggestions.
I'll be taking a closer look at txLoadbabancer when I get time as it looks
like it'll take care of a lot of my desired functionality out the box.
To get started tho I'll move my async routing decision call into the
protocol as suggested.

Is there any reason why the internal calls to buildProtocol shouldn't be
wrapped in a maybeDeferred?


On Sat, Nov 16, 2013 at 7:05 PM, Lucas Taylor <ltaylor.volks at gmail.com>wrote:

>
> On Nov 16, 2013, at 7:09 AM, Tom van Neerijnen wrote:
>
> Hi all
>
> I'm building a simple TCP load balancer based on a code snippet from Glyph
> on SO:
> http://stackoverflow.com/questions/4096061/general-question-regarding-wether-or-not-use-twisted-in-tcp-proxy-project
>
> It's served me well but I can't work out how to convert Glyphs round robin
> retrieval of the server endpoint into an async balancing decision in the
> buildProtocol method of the Factory. If I return a deferred here it fails
> with an AttributeError: Deferred instance has no attribute 'makeConnection'.
>
> Currently I'm working around this by running a separate management loop
> that periodically updates a dictionary with all the data necessary to make
> my routing decision so that I can do it without a deferred. This worries me
> because I may be making my decision on slightly stale data and I'd really
> like this to be a real time decision as the connection comes in. Does
> anyone have a clever way of doing this?
>
>
>
> Hi Tom,
>
> One possibly unexpected aspect of using @inlineCallbacks is that the
> decorated function itself returns a Deferred. This is why you see the
> AttributeError...the machinery calling buildProtocol expects an IProtocol
> instance (or None), and the function is returning a Deferred.
> `defer.returnValue()` is provided to the callback on that Deferred, not as
> a direct return value from the decorated function.
>
> If you want to make the routing decision when the client connects, then
> you could push the decision-making process down into the Protocol itself.
>
> Here's a quick mockup overriding connectionMade in a ProxyServer protocol
> subclass. It calls the factory routing function (which may or may not
> return a deferred), and connects the proxy once the decision has been made.
>
>
> from twisted.internet.protocol import Factory
> from twisted.protocols.portforward import ProxyServer
>
>
> class Balancer(Factory):
>     protocol = RoutingProxyServer
>     routing_func = port_routing_decision_async
>
>
> class RoutingProxyServer(ProxyServer):
>
>     def connectionMade(self):
>         # Don't read anything from the connecting client until we have
>         # somewhere to send it to.
>         self.transport.pauseProducing()
>
>         client = self.clientProtocolFactory()
>         client.setServer(self)
>
>         if self.reactor is None:
>             from twisted.internet import reactor
>             self.reactor = reactor
>
>         def connectProxy(host, port):
>             self.reactor.connectTCP(host, port, client)
>
>         d = maybeDeferred(self.factory.routing_func)
>         d.addCallback(connectProxy)
>         d.addErrback(log.err)
>
>
> Lucas
>
>
>
>
>
> An example is below. The hashed out buildProtocol is a synchronous
> decision which works. Thanks in advance!
>
> from twisted.internet.protocol import Factory
> from twisted.protocols.portforward import ProxyFactory
> from twisted.internet import reactor, defer
> import random
>
> from twisted.python import log
> import sys
> log.startLogging(sys.stderr)
>
> local_ports = set([1024, 1025])
>
> def port_routing_decision_sync():
>     return random.choice(list(local_ports))
>
> def port_routing_decision_async():
>     d = defer.Deferred()
>     reactor.callLater(1, d.callback, port_routing_decision_sync())
>     return d
>
> class Balancer(Factory):
>     # def buildProtocol(self, addr):
>     #     port = port_routing_decision_sync()
>     #     print "connecting to local port {}".format(port)
>     #     return ProxyFactory("127.0.0.1", port).buildProtocol(addr)
>
>     @defer.inlineCallbacks
>     def buildProtocol(self, addr):
>         port = yield port_routing_decision_async()
>         print "connecting to local port {}".format(port)
>         defer.returnValue(ProxyFactory("127.0.0.1",
> port).buildProtocol(addr))
>
> def main():
>     factory = Balancer()
>     reactor.listenTCP(5678, factory)
>     reactor.run()
>
> if __name__ == "__main__":
>     main()
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131117/96725b12/attachment-0002.html>

From exarkun at twistedmatrix.com  Sun Nov 17 13:08:15 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 Nov 2013 20:08:15 -0000
Subject: [Twisted-Python] Returning a deferred from buildProtocol
 t.i.p.Factory
In-Reply-To: <CAMwy1typfbvqvD_VCzXfhJST9yD7MJmF7DZEPc4tGd8ee8+CEQ@mail.gmail.com>
References: <CAMwy1tyGTDZCoPYpQOPeqnSA-g9qC0A=+nLE2UYCs13_C_QmZA@mail.gmail.com>
 <979A680E-DD89-4D9B-9AE8-F3910F74C18B@gmail.com>
 <CAMwy1typfbvqvD_VCzXfhJST9yD7MJmF7DZEPc4tGd8ee8+CEQ@mail.gmail.com>
Message-ID: <20131117200815.15706.211386549.divmod.xquotient.45@top>

On 05:44 pm, twisted at tomvn.com wrote:
>Thanks for both those suggestions.
>I'll be taking a closer look at txLoadbabancer when I get time as it 
>looks
>like it'll take care of a lot of my desired functionality out the box.
>To get started tho I'll move my async routing decision call into the
>protocol as suggested.
>
>Is there any reason why the internal calls to buildProtocol shouldn't 
>be
>wrapped in a maybeDeferred?

I'm not sure what you mean by "internal" here.  I think you might mean 
"calls to buildProtocol made by reactor implementations".  It is a 
mistake to take this perspective, though.  If buildProtocol is allowed 
to return a Deferred sometimes then *all* callers have to be prepared to 
handle a Deferred (by using `maybeDeferred` or using some other 
strategy).

This points to the reason *buildProtocol* can't be allowed to return a 
Deferred.  It is already defined as not returning a Deferred and 
changing this definition would potentially break every call, both those 
in reactor implementations and elsewhere (and there are plenty of other 
places that call `buildProtocol`).

Whether there is any good reason we could not introduce a new interface 
that is like `buildProtocol` but is also allowed to return a Deferred is 
another (more interesting :) question.  I can't think of any offhand.

The reactor would probably want to avoid monitoring new connections for 
read or write events until this Deferred fired (but bonus points if it 
still monitors it for connection lost and cancels the Deferred if this 
happens before it fires).  That's all relatively straightforward to 
implement though, for someone sufficiently motivated.

Jean-Paul



From kevin.horn at gmail.com  Sun Nov 17 15:35:17 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Sun, 17 Nov 2013 16:35:17 -0600
Subject: [Twisted-Python] Ticket #1330 - Socks V5 functionality
In-Reply-To: <CAFN1edojXa93qJ52SCi8kYT+=HWmwT4TFNDhWV3VBTWtUsfrng@mail.gmail.com>
References: <CAFN1edrNd-Q=BgOyqseWonb_WsHNx+ejJqAKWSzym4ax8p4SVQ@mail.gmail.com>
 <20131116194434.15706.1987930455.divmod.xquotient.27@top>
 <CAFN1edojXa93qJ52SCi8kYT+=HWmwT4TFNDhWV3VBTWtUsfrng@mail.gmail.com>
Message-ID: <CA+U=zK3J-Hm5v3JUm5UYh3iCWCoukKFaTsHrNJ77mx0xTpFJpQ@mail.gmail.com>

David,

You may also wish to take a look at Proxy65, which is a socks5 proxy
specifically for XMPP XEP-0065.  I have no idea how complete or correct it
is, and it's pretty old, but it might be helpful.

https://code.google.com/p/proxy65/


On Sat, Nov 16, 2013 at 2:28 PM, David Stainton <dstainton415 at gmail.com>wrote:

> Hi Jean-Paul,
>
> Thanks for all the info, observations about the existing code and for
> the coding advice!
>
> I think I should only implement the socks 5 server side
> since txsocksx seems to have the client implementation covered.
> Some of the Tor developers use it...
>
> I'm not used to test driven development. I'll give it a try and
> implement the SOCKSv5 server functionality...
>
>
> Cheers!
>
> David
>
> On Sat, Nov 16, 2013 at 11:44 AM,  <exarkun at twistedmatrix.com> wrote:
> > On 06:14 pm, dstainton415 at gmail.com wrote:
> >>
> >> Hi, I'd like to help out and write unit tests for the Socks v5 code in
> >> this ticket:
> >> https://twistedmatrix.com/trac/ticket/1330
> >>
> >> Should I write something very similar to this?? ::
> >> http://twistedmatrix.com/trac/browser/trunk/twisted/test/test_socks.py
> >>
> >> My goal is getting socksv5 client and server code merged to mainline
> >> Twisted with unit tests.
> >
> >
> >
> > twisted/test/test_socks.py is a bad example of a test suite.  Here are
> the
> > things about it you should not emulate:
> >
> >  * It has documentation that is far from complete.  Documentation is
> just as
> > important in unit tests as elsewhere.  In particular, documenting the
> intent
> > of every test method is critical otherwise the test suite is very
> difficult
> > to maintain.
> >
> >  * It exercises too much code in each test method.  Well written test
> > methods do a single very simple thing.  A good rule of thumb is that
> there
> > should only be one `TestCase.assert...` method call in each test method.
> >
> >  * It uses some `TestCase.assert...` methods which are deprecated or
> soon to
> > be deprecated.  `assert_` is the main offender here.
> >
> >  * It doesn't completely cover the implementation (probably because the
> > implementation wasn't developed test-driven).  You can achieve full test
> > coverage without doing test-driven development but it takes more
> discipline.
> > I suggest doing a test-driven implementation of the SOCKSv5 functionality
> > you want (the easy approach to this is to start writing tests, then copy
> the
> > *smallest* possible piece of the existing, untested implementation into
> your
> > new implementation to make those tests pass; repeat until you have all of
> > the desired functionality).
> >
> >  * `StringTCPTransport` seems redundant.  `StringTransport` offers all of
> > this functionality already.
> >
> >  * Many names used in the module don't follow the Twisted name convention
> > (most obviously, "under_scores" are used throughout rather than
> > "camelCase").
> >
> >  * Native strings are used to represent byte strings throughout.
> >
> >  * The protocol interface is uniformly misused (it should call
> > `makeConnection` not `connectionMade`)
> >
> > Hope this helps,
> > Jean-Paul
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131117/2d70cf66/attachment-0002.html>

From yangyouxiu at gmail.com  Sun Nov 17 17:31:25 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Mon, 18 Nov 2013 08:31:25 +0800
Subject: [Twisted-Python] how to change an qt4 applicaion using twisted?
References: <201311171718460284357@gmail.com>, 
 <CAE_Hg6ZdiSTdYCLKcY_r85T-4pkzfUMH0AZfouY0EtRfFR+sjg@mail.gmail.com>, 
 <2013111718102654081815@gmail.com>, 
 <CAE_Hg6YuYxHGNKCet14Jz3QggC=pXYfdp8O7=Ox+3Vy7JUFfsA@mail.gmail.com>, 
 <CAKN9TD+9A0_eOQQ8a_HxCnH6P+kf4dLLzCFWg6s-9VN1qDywxw@mail.gmail.com>
Message-ID: <2013111808311216632122@gmail.com>

Thanks for all the suggestions.
I will try your advices.




杨有秀
敬上

From: Daniel Sank
Date: 2013-11-18 01:01
To: Twisted general discussion
Subject: Re: [Twisted-Python] how to change an qt4 applicaion using twisted?
Yangyouxiu,

I can definitely help you with this as I've recently written a chat
server/client with twisted+PyQt4 and am working on a more complex
program that uses PyQt4 with twisted's perspective broker.

I have attached five files:

1. client-pyqtreactor.py is a chat client using pyqtreactor and PyQt4.
2. ui.ui is the user interface file loaded by client-pyqtreactor.py
3. server.py is a chat server using asyncore. Note that the server
need not use PyQt4 as it has no GUI.
4. constants.py contains configuration data for the client and server
5. qt4reactor.py is the custom reactor

Put these all in the same directory, then run the server, then run
some clients. When the client window appears click "connect" and then
you can use it just like any other network chat program.

I hope this helps, and if anyone has suggestions on how to improve the
client code please tell me, as I intend on using it as part of a
tutorial on twsited+PyQt4.

Danie Sank



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131118/e99b892a/attachment-0002.html>

From sank.daniel at gmail.com  Sun Nov 17 18:20:24 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sun, 17 Nov 2013 17:20:24 -0800
Subject: [Twisted-Python] perspective argument missing from Viewable.view_*
Message-ID: <CAKN9TDKmd+6AqXugNSHRHEE3WRLUVXzVXVwXCwFS7vKVXX4zUQ@mail.gmail.com>

I'm trying to understand exactly how context management works in
perspective broker. I thought the point of Viewable was that you
always know who's calling. However if I run the simple fully working
example pasted below, I see that the perspective argument is None.
What gives?

Kind regards,
Daniel Sank

# Server

import twisted.spread.pb as pb
import twisted.internet.reactor as reactor

class Server(pb.Root):
    def __init__(self):
        self.v = MyViewable()

    def remote_getViewable(self):
        return self.v

class MyViewable(pb.Viewable):
    def view_foo(self, perspective):
        print ("Perspective %s"%perspective)


if __name__ == "__main__":
    reactor.listenTCP(54321, pb.PBServerFactory(Server()))
    print("Starting reactor")
    reactor.run()

# Client

import twisted.spread.pb as pb
import twisted.internet.reactor as reactor
from twisted.internet.defer import inlineCallbacks

@inlineCallbacks
def gotRoot(root):
    v1 = yield root.callRemote("getViewable")
    v2 = yield root.callRemote("getViewable")
    print(v1)
    print(v2)
    yield v1.callRemote("foo")
    yield v2.callRemote("foo")

factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 54321, factory)
d = factory.getRootObject()
d.addCallback(gotRoot)
reactor.run()



From grindizer at gmail.com  Mon Nov 18 03:14:12 2013
From: grindizer at gmail.com (Flint)
Date: Mon, 18 Nov 2013 11:14:12 +0100
Subject: [Twisted-Python] perspective argument missing from
	Viewable.view_*
In-Reply-To: <CAKN9TDKmd+6AqXugNSHRHEE3WRLUVXzVXVwXCwFS7vKVXX4zUQ@mail.gmail.com>
References: <CAKN9TDKmd+6AqXugNSHRHEE3WRLUVXzVXVwXCwFS7vKVXX4zUQ@mail.gmail.com>
Message-ID: <CALpq1pa2rL4-aZoCkyZKp5gLCbbe2p4qhz7Jp_ebf8fjZ32r=w@mail.gmail.com>

Hi Daniel.

To get the perspective you have to implements the IPerspective interface
(generally throw subclassing pb.Avatar class), and attach a login portal to
your server.
Client then have to authenticate to the server, only then you will receive
the perspective object representing the "logged" user into your view_ and
perspective_ method.

>From the code you gave clients are not "identifyed", my guess is this is
why you get None.

--
Nacim


2013/11/18 Daniel Sank <sank.daniel at gmail.com>

> I'm trying to understand exactly how context management works in
> perspective broker. I thought the point of Viewable was that you
> always know who's calling. However if I run the simple fully working
> example pasted below, I see that the perspective argument is None.
> What gives?
>
> Kind regards,
> Daniel Sank
>
> # Server
>
> import twisted.spread.pb as pb
> import twisted.internet.reactor as reactor
>
> class Server(pb.Root):
>     def __init__(self):
>         self.v = MyViewable()
>
>     def remote_getViewable(self):
>         return self.v
>
> class MyViewable(pb.Viewable):
>     def view_foo(self, perspective):
>         print ("Perspective %s"%perspective)
>
>
> if __name__ == "__main__":
>     reactor.listenTCP(54321, pb.PBServerFactory(Server()))
>     print("Starting reactor")
>     reactor.run()
>
> # Client
>
> import twisted.spread.pb as pb
> import twisted.internet.reactor as reactor
> from twisted.internet.defer import inlineCallbacks
>
> @inlineCallbacks
> def gotRoot(root):
>     v1 = yield root.callRemote("getViewable")
>     v2 = yield root.callRemote("getViewable")
>     print(v1)
>     print(v2)
>     yield v1.callRemote("foo")
>     yield v2.callRemote("foo")
>
> factory = pb.PBClientFactory()
> reactor.connectTCP("localhost", 54321, factory)
> d = factory.getRootObject()
> d.addCallback(gotRoot)
> reactor.run()
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131118/14886f86/attachment-0002.html>

From tobias.oberstein at tavendo.de  Mon Nov 18 10:45:55 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 18 Nov 2013 09:45:55 -0800
Subject: [Twisted-Python] FreeBSD buildslaves: change proposal
In-Reply-To: <634914A010D0B943A035D226786325D4446A0D96BF@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4446A0D96BF@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <634914A010D0B943A035D226786325D4446A18C095@EXVMBX020-12.exch020.serverdata.net>

Alright, the new buildslave is active, the old ones retired.

http://buildbot.twistedmatrix.com/buildslaves/tavendo-freebsd-9.2-amd64

There are a couple of env issues as well as test issues .. I'll look into both ..

/Tobias



From sank.daniel at gmail.com  Mon Nov 18 10:56:40 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 18 Nov 2013 09:56:40 -0800
Subject: [Twisted-Python] perspective argument missing from
	Viewable.view_*
In-Reply-To: <CALpq1pa2rL4-aZoCkyZKp5gLCbbe2p4qhz7Jp_ebf8fjZ32r=w@mail.gmail.com>
References: <CAKN9TDKmd+6AqXugNSHRHEE3WRLUVXzVXVwXCwFS7vKVXX4zUQ@mail.gmail.com>
 <CALpq1pa2rL4-aZoCkyZKp5gLCbbe2p4qhz7Jp_ebf8fjZ32r=w@mail.gmail.com>
Message-ID: <CAKN9TDKrHguRbCVjC4CAcN1ycLmnRT-qBEwAvz3LiOTcJ3kLJQ@mail.gmail.com>

> Client then have to authenticate to the server, only then you will receive the
> perspective object representing the "logged" user into your view_ and
> perspective_ method.

I am confused by this. When I use the cred system the client gets a
remote reference to an Avatar on which it can call perspective_*
methods. How does this translate into having the proper perspective
passed into calls to view_* methods on other objects?



From sank.daniel at gmail.com  Mon Nov 18 23:12:02 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 18 Nov 2013 22:12:02 -0800
Subject: [Twisted-Python] perspective argument missing from
	Viewable.view_*
In-Reply-To: <CAKN9TDKrHguRbCVjC4CAcN1ycLmnRT-qBEwAvz3LiOTcJ3kLJQ@mail.gmail.com>
References: <CAKN9TDKmd+6AqXugNSHRHEE3WRLUVXzVXVwXCwFS7vKVXX4zUQ@mail.gmail.com>
 <CALpq1pa2rL4-aZoCkyZKp5gLCbbe2p4qhz7Jp_ebf8fjZ32r=w@mail.gmail.com>
 <CAKN9TDKrHguRbCVjC4CAcN1ycLmnRT-qBEwAvz3LiOTcJ3kLJQ@mail.gmail.com>
Message-ID: <CAKN9TD+peKK-eFJwC_+--DzzYFe3W41MJkqvH1m9jz9DP=kgiQ@mail.gmail.com>

>> Client then have to authenticate to the server, only then you will receive
>> the perspective object representing the "logged" user into your
>  view_ and perspective_ method.

> I am confused by this. When I use the cred system the client gets a
> remote reference to an Avatar on which it can call perspective_*
> methods. How does this translate into having the proper perspective
> passed into calls to view_* methods on other objects?

I figured out what's going on. If I send a Viewable to the client like this:

myAvatar.mind.callRemote("takeViewable", instanceOfViewable)

then the client's subsequent calls to the viewable arrive with the
perspective argument set to None. It seems that to make Viewable work
properly I have return the Viewable instance from a perspective_*
method on the Avatar. For example

class MyAvatar(pb.Avatar):
    perspective_getViewable(self):
        ...
        return instanceOfViewable

This is not indicated in the documentation. I looked into fixing it
myself but it seems there's somewhat of an activation barrier in
submitting documentation fixes. Hopefully I will climb over that
barrier soon.

This raises the question of how to enable a single human with a single
connection to act as more than one client in a pb managed system.

Regards,
Daniel Sank



From yangyouxiu at gmail.com  Tue Nov 19 23:42:09 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Wed, 20 Nov 2013 14:42:09 +0800
Subject: [Twisted-Python] How to call remote server method to read a file on
	the server machine useing perspective broker ?
Message-ID: <2013112014420099656036@gmail.com>

Hi, all!
I'm trying to read a file on the server with pb, and got an error. Following is my code, what's the problem?

***********************pb1server.py
#!/usr/bin/env python

# Copyright (c) Twisted Matrix Laboratories.
# See LICENSE for details.

from twisted.spread import pb

class Two(pb.Referenceable):
    def remote_three(self, arg):
        print "Two.three was given", arg
        f=open('/home/gddw/Desktop/test','wr')
        content = f.readline()
        print content
class One(pb.Root):
    def remote_getTwo(self):
        two = Two()
        print "returning a Two called", two
        return two

from twisted.internet import reactor
reactor.listenTCP(8800, pb.PBServerFactory(One()))
reactor.run()
*************************pb1client.py
#!/usr/bin/env python

# Copyright (c) Twisted Matrix Laboratories.
# See LICENSE for details.

from twisted.spread import pb
from twisted.internet import reactor

def main():
    factory = pb.PBClientFactory()
    reactor.connectTCP("localhost", 8800, factory)
    def1 = factory.getRootObject()
    def1.addCallbacks(got_obj1, err_obj1)
    reactor.run()

def err_obj1(reason):
    print "error getting first object", reason
    reactor.stop()

def got_obj1(obj1):
    print "got first object:", obj1
    print "asking it to getTwo"
    def2 = obj1.callRemote("getTwo")
    def2.addCallbacks(got_obj2)

def got_obj2(obj2):
    print "got second object:", obj2
    print "telling it to do three(12)"
    obj2.callRemote("three", 12)
main()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131120/4c7d7fc8/attachment-0002.html>

From sank.daniel at gmail.com  Tue Nov 19 23:59:53 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Tue, 19 Nov 2013 22:59:53 -0800
Subject: [Twisted-Python] How to call remote server method to read a
 file on the server machine useing perspective broker ?
In-Reply-To: <2013112014420099656036@gmail.com>
References: <2013112014420099656036@gmail.com>
Message-ID: <CAKN9TDJK8+jmGKifOkx3WrYCMjrE5c9wTkOkBd3VoM2A7bhmPA@mail.gmail.com>

Did you try reading the error message?

I don't think 'wr' is an allowed mode for open()



From yangyouxiu at gmail.com  Wed Nov 20 00:07:10 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Wed, 20 Nov 2013 15:07:10 +0800
Subject: [Twisted-Python] How to call remote server method to read a
	file on the server machine useing perspective broker ?
References: <2013112014420099656036@gmail.com>, 
 <CAKN9TDJK8+jmGKifOkx3WrYCMjrE5c9wTkOkBd3VoM2A7bhmPA@mail.gmail.com>
Message-ID: <2013112015065018431438@gmail.com>


Thank you very much!

You are right. It should be 'r+' mode, ^_^

From: Daniel Sank
Date: 2013-11-20 14:59
To: Twisted general discussion
Subject: Re: [Twisted-Python] How to call remote server method to read a file on the server machine useing perspective broker ?
Did you try reading the error message?

I don't think 'wr' is an allowed mode for open()

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131120/b7d6e66b/attachment-0002.html>

From sank.daniel at gmail.com  Wed Nov 20 00:30:28 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Tue, 19 Nov 2013 23:30:28 -0800
Subject: [Twisted-Python] How to call remote server method to read a
 file on the server machine useing perspective broker ?
In-Reply-To: <2013112015065018431438@gmail.com>
References: <2013112014420099656036@gmail.com>
 <CAKN9TDJK8+jmGKifOkx3WrYCMjrE5c9wTkOkBd3VoM2A7bhmPA@mail.gmail.com>
 <2013112015065018431438@gmail.com>
Message-ID: <CAKN9TD+GZBR-mazeiatwADhvueqF5p0ho5dYDTYypRW8CVDYbQ@mail.gmail.com>

> You are right. It should be 'r+' mode, ^_^

Yes, reading the error message can be useful... ;)



From _ at lvh.io  Wed Nov 20 09:50:53 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 20 Nov 2013 17:50:53 +0100
Subject: [Twisted-Python] AMP Argument.toBox's proto argument is a
 locator, not the proto?
In-Reply-To: <59B7D7CB-1BB5-4048-8FCE-85F55B83FC51@twistedmatrix.com>
References: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>
 <E911B264-65A6-4BBF-8E76-4B88803F5E1B@twistedmatrix.com>
 <CAE_Hg6Z-ocrkb2+hWFDM55Cvt=YVQp3Mb9BFKZ8QO7rB+0Q73Q@mail.gmail.com>
 <8E13BB54-88C0-4647-B785-D44323091B88@twistedmatrix.com>
 <CAE_Hg6bsf8=2ZAg8As=Ju_Mf5hLXVPCqb+ksDRnq3pHTjnpAxg@mail.gmail.com>
 <59B7D7CB-1BB5-4048-8FCE-85F55B83FC51@twistedmatrix.com>
Message-ID: <CAE_Hg6Z5UdD7JY5MJUOaVXeVCB_wE+s=JbUG7-+6JJuBvTxjfA@mail.gmail.com>

*deep necromantic thread magic*

On Thu, Oct 3, 2013 at 11:54 AM, Glyph <glyph at twistedmatrix.com> wrote:

> If I can change "proto" to mean "actually the protocol not something else"
> then that seems plenty easy to add, and it would definitely be cool if
> people don't have to mess with this nonsense themselves for something as
> ostensibly simple as having access to the protocol :-)
>
> Keep in mind that in the authentication case I mentioned, your post-auth
> object may well subclass AMP and therefore "actually" be a protocol; but it
> still won't have a transport.  What do you propose happen in that case?
>

Isn't the post-auth object a box receiver? I mean, yes, it can be a box
receiver by virtue of subclassing AMP and therefore *secretly* being a
proto. I'd be totally fine (for my use case) to just have the transport
available somewhere :) (The transport that the AMP bytes are being sent
over; so not, say, a TCP transport underlying a TLS connection or
something.)

For fixing this (I'll file tickets if you confirm):

- ResponderLocator's behavior is pretty much just broken. It's using
Command.makeResponse. That says it wants an AMP. It's clearly just getting
a responder locator. However, it seems like the problem here is
makeResponse's crappy interface. It shouldn't want an AMP. So, we should
fix makeResponse's docstring, and all of the other cases where t.p.amp asks
for an AMP and shouldn't.
- The proto argument name is stupid. Can we fix it?
- There should be a new method on IArgumentType, parallel to fromBox (but
not toBox?), that gets a reference to the transport passed to it. If so:
where does it get that?

Does that sound about right?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131120/6f4c58cd/attachment-0002.html>

From tobias.oberstein at tavendo.de  Wed Nov 20 10:46:05 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 20 Nov 2013 09:46:05 -0800
Subject: [Twisted-Python] Update: FreeBSD builders
Message-ID: <634914A010D0B943A035D226786325D4446A256B49@EXVMBX020-12.exch020.serverdata.net>

Hi,

the 3 builders for the new FreeBSD 9.2 x86-64 slave are up and running:

http://buildbot.twistedmatrix.com/buildslaves/tavendo-freebsd-9.2-amd64

Nov 20 09:42 	601a9d1cb6eb... 	failure 	freebsd-9.2-amd64-python2.7 		#12 	Failed 1 test (select) 1 test (poll) 3 tests (kqueue)
Nov 20 09:42 	601a9d1cb6eb... 	failure 	freebsd-9.2-amd64-pypy2.2 		#8 	Failed 28 tests (select) 28 tests (poll) 93 tests (kqueue)
Nov 20 09:42 	601a9d1cb6eb... 	failure 	freebsd-9.2-amd64-pypy-nightly 	#6 	Failed 28 tests (select) 28 tests (poll) 31 tests (kqueue)

CPy 2.7:	this is a vanilla build from Python 2.7.6 sources
PyPy 2.2:	this is a vanilla build from PyPy 2.2 sources
PyPy Nightly:	this is build by the PyPy buildslave (running on the same host) from PyPy head

All binaries are compiled using Clang 3.3 (which will be the default toolchain beginning with FreeBSD 10, kernel to userland).

The biggest issue that was causing a bunch of IPv6 tests to fail is already solved and merged:

https://twistedmatrix.com/trac/ticket/6843

Thanks Jean-Paul (exarkun) and Laurens (lvh)!

Regarding the remaining failing tests:

1) CPy 2.7 / select & poll reactors

There is 1 identified issue left: https://twistedmatrix.com/trac/ticket/6846

2) CPy 2.7 / kqueue reactor

Apart from #6846, in above run, there are 2 failing tests.

My problem is: I think I have seen the _same revision_ yield between 0 - 4 failing tests for kqueue. I'll watch that, and then see.

3) PyPy 2.2 & nightly / select & poll reactors

I would focus on these 28 failing tests first, since they are "stable" both across PyPy 2.2 / Nightly and select/poll reactors.

>From a first quick lock, there might be some low hanging fruit - tests that probably test CPy specific behavior like.

I guess analyzing and fixing the PyPy related issues won't happen tomorrow. It'll take some time.

Cheers,
Tobias



From sank.daniel at gmail.com  Wed Nov 20 16:54:58 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Wed, 20 Nov 2013 15:54:58 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed by
	Avatars?
Message-ID: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>

>From some experimentation I find that the only way to make a Viewable
get a meaningful perspective argument when executing view_* methods is
to make sure that the references to that Viewable are given to clients
as return values from perspective_* methods called on a pb.Avatar.

In particular, if the Avatar gives a client a reference to a Viewable
by passing it as an argument to a remote_* method on the client,
subsequent invocations of view_* methods by the client result in
perspective argument in view_* methods being None.

I have attached a complete working example of a client and server that
succinctly illustrates this issue.

Question: Is there a way to distribute un-asked for references to
Viewables that properly get the perspective argument in their view_*
methods?

Sincerely,
Daniel Sank
-------------- next part --------------
A non-text attachment was scrubbed...
Name: client.py
Type: text/x-python
Size: 837 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20131120/b4f53395/attachment-0004.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: server.py
Type: text/x-python
Size: 1201 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20131120/b4f53395/attachment-0005.py>

From _ at lvh.io  Fri Nov 22 05:10:03 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 22 Nov 2013 13:10:03 +0100
Subject: [Twisted-Python] Some thoughts hacking with AMP (was: something
 about multiplexing and accessing protocols)
Message-ID: <CAE_Hg6bGG9uiOrJUV4FzFzLH0Cb=2burj489+eAzv21NYoqjNQ@mail.gmail.com>

Hi,

Some thoughts while hacking:

- The argument having access to the responder locator and then eventually
it going to a responder function is kind of useless, usually. The responder
function already has a reference to the locator, usually called "self" :)
- The locator object can be shared between different connections, so a hack
using the current status quo where you get the proto using the responder
locator is... well, hacky.

Also, I do really really want the protocol and not the transport. This is
because I want to pass a reference to the protocol around so that later I
can call callRemote on it. That I can also get the transport is mostly just
gravy so that I can return nice things for my fake transport's
getHost/getPeer.

So, to reiterate:

- I think all the docstrings should reflect the real situation. I guess I
need to file a ticket for that.
- Maybe there should be a new API that passes the proto (and actually means
"proto" ;))

I think I have some code up (or will have some code up soon, depending on
when you read this email) that does have sort-of working multiplexed
transports:

https://github.com/lvh/txampext

When done, this will be available from pypi as txampext==0.0.6.

If anyone is interested in this, the next big feature mark will be
integrating _habnabit's AMP producer stuff, so that it's not just
transports, but IConsumer/IProducer transports as well.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131122/26690668/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Nov 22 12:00:41 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 22 Nov 2013 11:00:41 -0800
Subject: [Twisted-Python] Some thoughts hacking with AMP (was: something
	about multiplexing and accessing protocols)
In-Reply-To: <CAE_Hg6bGG9uiOrJUV4FzFzLH0Cb=2burj489+eAzv21NYoqjNQ@mail.gmail.com>
References: <CAE_Hg6bGG9uiOrJUV4FzFzLH0Cb=2burj489+eAzv21NYoqjNQ@mail.gmail.com>
Message-ID: <439FA800-6EE8-41AE-9929-96D17984DA7B@twistedmatrix.com>


On Nov 22, 2013, at 4:10 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> Also, I do really really want the protocol and not the transport. This is because I want to pass a reference to the protocol around so that later I can call callRemote on it. That I can also get the transport is mostly just gravy so that I can return nice things for my fake transport's getHost/getPeer.

Except that maybe your protocol is just a BinaryBoxProtocol, and has no callRemote method.  Or maybe it's actually HTTP and feeding things to AMP after some deserialization pass, like via JSON (aren't you even doing this already in some other code?).  Is there even a "protocol" visible to this code in that case?

If your contract is that you accept an IProtocol, then what you can do is pretty much just call dataReceived and connectionLost ;-) unless you have some other reason to believe it provides some other interfaces.

> So, to reiterate:
> 
> - I think all the docstrings should reflect the real situation. I guess I need to file a ticket for that.

Well, that's definitely true.

> - Maybe there should be a new API that passes the proto (and actually means "proto" ;))

I still think that before providing this new mechanism we need *some* way of declaring that we expect more from "the protocol".

> I think I have some code up (or will have some code up soon, depending on when you read this email) that does have sort-of working multiplexed transports:

Cool.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131122/f69f8799/attachment-0002.html>

From sank.daniel at gmail.com  Fri Nov 22 12:20:27 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 22 Nov 2013 11:20:27 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed
	by Avatars?
In-Reply-To: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
References: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
Message-ID: <CAKN9TDJeswWiutcN1FVv=v03fSvCu1sSTVT2RDXthrk8uhQ+Ug@mail.gmail.com>

> Question: Is there a way to distribute un-asked for references to
> Viewables that properly get the perspective argument in their view_*
> methods?

I think this is a pretty reasonable question but nobody's biting. Did
I do something wrong in the way I asked?



From glyph at twistedmatrix.com  Fri Nov 22 12:02:57 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 22 Nov 2013 11:02:57 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed
	by Avatars?
In-Reply-To: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
References: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
Message-ID: <B3B41670-6D95-4C2D-8098-06FE476656C8@twistedmatrix.com>


On Nov 20, 2013, at 3:54 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> From some experimentation I find that the only way to make a Viewable
> get a meaningful perspective argument when executing view_* methods is
> to make sure that the references to that Viewable are given to clients
> as return values from perspective_* methods called on a pb.Avatar.
> 
> In particular, if the Avatar gives a client a reference to a Viewable
> by passing it as an argument to a remote_* method on the client,
> subsequent invocations of view_* methods by the client result in
> perspective argument in view_* methods being None.
> 
> I have attached a complete working example of a client and server that
> succinctly illustrates this issue.
> 
> Question: Is there a way to distribute un-asked for references to
> Viewables that properly get the perspective argument in their view_*
> methods?

So, this strikes me as incredibly subtle, and likely a bug, but the fix is not immediately obvious to me.

Viewable objects are associated with their perspective when they are serialized.  They are associated with the perspective which is serializing them.

The "mind" object, passed by the client during the login process, can be just about anything - but one property that all "mind" objects share is that they are serialized *before authentication even occurs*, so there is no Avatar object and therefore no perspective around.  Therefore the ViewPoint which gets stored in the remote reference cache will have a perspective of None, and all subsequent calls made to that reference will have no perspective.

One way to fix this is to manually construct a ViewPoint rather than a Viewable and pass that to the client.  But I do think that we should find a way to make your use-case work, to, or at the very least document the reasons why it doesn't in a comprehensible way...

It's been a *very* long time since I took such a hard look at PB.  Good catch!

-glyph


From sank.daniel at gmail.com  Fri Nov 22 13:01:54 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 22 Nov 2013 12:01:54 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed
	by Avatars?
In-Reply-To: <B3B41670-6D95-4C2D-8098-06FE476656C8@twistedmatrix.com>
References: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
 <B3B41670-6D95-4C2D-8098-06FE476656C8@twistedmatrix.com>
Message-ID: <CAKN9TD+u5s+hw=w7VXtUDqDh3QC589PXhikeNL8-7d+ADokjog@mail.gmail.com>

Thanks much for the reply.

> So, this strikes me as incredibly subtle, and likely a bug

Should I file a ticket?

> One way to fix this is to manually construct a ViewPoint rather than a Viewable and pass that to the client.

If someone would be willing to supply a very simple demonstration of
this I would appreciate it very much.

> But I do think that we should find a way to make your use-case work, to, or at the very
> least document the reasons why it doesn't in a comprehensible way...

I am willing to help but as of right now I only know how to use
perspective broker; I do not know how it works under the hood.

I have been collecting notes on bugs in the perspective broker
documentation. I promise to submit a documentation patch when I have a
first draft of my project up and running.

Regards,
Daniel Sank



From glyph at twistedmatrix.com  Fri Nov 22 14:01:27 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 22 Nov 2013 13:01:27 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed
	by Avatars?
In-Reply-To: <CAKN9TD+u5s+hw=w7VXtUDqDh3QC589PXhikeNL8-7d+ADokjog@mail.gmail.com>
References: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
 <B3B41670-6D95-4C2D-8098-06FE476656C8@twistedmatrix.com>
 <CAKN9TD+u5s+hw=w7VXtUDqDh3QC589PXhikeNL8-7d+ADokjog@mail.gmail.com>
Message-ID: <AE1833E2-EDDA-4F2E-B4B8-B8967CBFC711@twistedmatrix.com>


On Nov 22, 2013, at 12:01 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> Thanks much for the reply.
> 
>> So, this strikes me as incredibly subtle, and likely a bug
> 
> Should I file a ticket?

Absolutely.

>> One way to fix this is to manually construct a ViewPoint rather than a Viewable and pass that to the client.
> 
> If someone would be willing to supply a very simple demonstration of
> this I would appreciate it very much.

It's a very simple change to your server; your client remains the same.  Just construct a ViewPoint with the user as perspective around your viewable.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: server.py
Type: text/x-python-script
Size: 1232 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20131122/1751845c/attachment-0002.bin>
-------------- next part --------------

>> But I do think that we should find a way to make your use-case work, to, or at the very
>> least document the reasons why it doesn't in a comprehensible way...
> 
> I am willing to help but as of right now I only know how to use
> perspective broker; I do not know how it works under the hood.

Well, it's open source, so the hood opens right up, go ahead and pop it :-).

> I have been collecting notes on bugs in the perspective broker
> documentation. I promise to submit a documentation patch when I have a
> first draft of my project up and running.


Please feel free to submit _many_ bugs, if there are many issues :-).

-glyph

From sank.daniel at gmail.com  Fri Nov 22 14:19:13 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 22 Nov 2013 13:19:13 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed
	by Avatars?
In-Reply-To: <AE1833E2-EDDA-4F2E-B4B8-B8967CBFC711@twistedmatrix.com>
References: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
 <B3B41670-6D95-4C2D-8098-06FE476656C8@twistedmatrix.com>
 <CAKN9TD+u5s+hw=w7VXtUDqDh3QC589PXhikeNL8-7d+ADokjog@mail.gmail.com>
 <AE1833E2-EDDA-4F2E-B4B8-B8967CBFC711@twistedmatrix.com>
Message-ID: <CAKN9TDKiMXnWHXYfdxw6hPBwHhKVyF5sHq9nF0tRY55FqWaKWQ@mail.gmail.com>

>>> One way to fix this is to manually construct a ViewPoint rather than a Viewable and pass that to the client.
>>
>> If someone would be willing to supply a very simple demonstration of
>> this I would appreciate it very much.
>
> It's a very simple change to your server; your client remains the same.  Just construct a
> ViewPoint with the user as perspective around your viewable.

I just looked at the viewpoint api docs. I believe I understand. Thank you.

>> I am willing to help but as of right now I only know how to use
>> perspective broker; I do not know how it works under the hood.
>
> Well, it's open source, so the hood opens right up, go ahead and pop it :-).

Indeed I will do so. I just meant to indicate that as I have no prior
experience with the source I cannot promise any sort of timeliness for
a fix.

>> I have been collecting notes on bugs in the perspective broker
>> documentation. I promise to submit a documentation patch when I have a
>> first draft of my project up and running.
>
> Please feel free to submit _many_ bugs, if there are many issues :-).

There are indeed many issues, however they are inter-related. As I
said, I will try to make some sense out of what needs to be fixed and
file (and fix!) tickets in as orderly a fashion as I can.

-Daniel Sank



From ron at ronsdesk.com  Fri Nov 22 22:32:35 2013
From: ron at ronsdesk.com (Ron Segal)
Date: Sat, 23 Nov 2013 05:32:35 +0000 (UTC)
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
 <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>
 <81E2EC36-5D3E-44A1-A465-7381CBE695CB@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C53D@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <loom.20131123T061959-660@post.gmane.org>

Tobias Oberstein <tobias.oberstein <at> tavendo.de> writes:

> 
> > > E.g., as a start, we could have a dedicated page on the Twistedmatrix
> > > Web site "Twisted for Things" for intro and collecting links, articles
> > > etc
> > 
> > Fun fact: the very first class in the very first thing that would eventually
> > become Twisted was called "Thing".  
> 
> What a prevision;)
> 
> > 
> > > Dummy question: how would I contribute to the Trac-based Web site
> > content?
> > 
> > Just click on the "edit" button at the bottom of any wiki page.  Some of the
> > pages (like the front page) are locked to prevent abuse, but I can give you
> > whatever extra permissions you need if you want to work on the site.
> 
> Yes please, I'd like to contribute to the site.
> 
> I have visited a dozen pages from the Index, and I have no "edit" button
.. nowhere. I am logged in
> ("oberstet") .. I can file/edit tickets.
> 
> I would start by creating a new page, following
http://twistedmatrix.com/trac/wiki/WikiNewPage, and -
> at this point - only add a link to the new page from the Index page.
> 
> A general question regarding using Trac as a Website system: the landing
page does only links to a couple of
> further pages.
> How are user supposed to navigate around? Always via the Index page?
> 
> You know, I haven't done a lot systematic looking around exactly for that
reason .. when I look for Twisted
> docs/pages, I basically Google for them (sometimes restricting the search
to Twistedmatrix).
> The UX of the Website is .. unusual .. or I just don't get it.
> 
> /Tobias
> 
> > 
> > -glyph
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python <at> twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

Following with interest.  Seeking a CoAP Python client capability that includes:
- Support for IPV6 to talk directly to server motes in constrained 6LoWPAN
WSNs. (the large IPV6 address space is for me intrinsic to the IoT concept)
- Security for the same, so presumably DTLS.
Both of these needed and particularly security, for any serious monitoring
and control applications.
Best wishes
Ron






From sangiovanni at nweb.it  Sat Nov 23 03:36:01 2013
From: sangiovanni at nweb.it (Fabio Sangiovanni)
Date: Sat, 23 Nov 2013 11:36:01 +0100
Subject: [Twisted-Python] [twisted.mail][newbie] return tempfail (4xx) after
	eomReceived()
Message-ID: <52908511.2050706@nweb.it>

Hello list,

I'm trying to code an SMTP server that stores received messages in a 
queue (es. RabbitMQ or Redis).
I'm figuring out how to do it with Twisted, and so far I managed to 
print to console the messages the way I want.
I'm trying to understand now how to return a tempfail code (4xx) from 
within eomReceived(), so to simulate (and, in the future, handle) 
temporary unavailabilities of the queuing system, and thus to delegate 
to the client the handling/retrying of the delivery (there will be 
postfix in front of my smtp server, so it will keep the message in its 
spool).
I ended up digging in the code until I found the _messageHandled 
callback of the SMTP class, that's added to the deferred returned by 
eomReceived. I admit I'm not very accustomed to deferreds yet, but I can 
only see 250 and 550 response code inside it. I suspect that I should 
return the 4xx code in one of the deferred's callbacks/errbacks *before* 
_messageHandled, but I really can't imagine how. Would you please give 
me some hints about how to accomplish the task? Am I looking to the 
right direction at all?

Thanks a lot,
Fabio



From _ at lvh.io  Sat Nov 23 04:15:53 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sat, 23 Nov 2013 12:15:53 +0100
Subject: [Twisted-Python] Some thoughts hacking with AMP (was: something
 about multiplexing and accessing protocols)
In-Reply-To: <439FA800-6EE8-41AE-9929-96D17984DA7B@twistedmatrix.com>
References: <CAE_Hg6bGG9uiOrJUV4FzFzLH0Cb=2burj489+eAzv21NYoqjNQ@mail.gmail.com>
 <439FA800-6EE8-41AE-9929-96D17984DA7B@twistedmatrix.com>
Message-ID: <CAE_Hg6YoONxwdS2=wd-wHD4_geBzsw+S2nXMWjzD4cY3sAdajQ@mail.gmail.com>

On Fri, Nov 22, 2013 at 8:00 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Nov 22, 2013, at 4:10 AM, Laurens Van Houtven <_ at lvh.io> wrote:
>
> Also, I do really really want the protocol and not the transport. This is
> because I want to pass a reference to the protocol around so that later I
> can call callRemote on it. That I can also get the transport is mostly just
> gravy so that I can return nice things for my fake transport's
> getHost/getPeer.
>
> Except that maybe your protocol is just a BinaryBoxProtocol, and has no
> callRemote method.  Or maybe it's actually HTTP and feeding things to AMP
> after some deserialization pass, like via JSON (aren't you even doing this
> already in some other code?).  Is there even a "protocol" visible to this
> code in that case?
>

Yep and yep:
 - I guess I mean IBoxReceiver? The thing with callRemote on it ;)
 - I'm doing that, and that's what I hope to do again here :)

> - Maybe there should be a new API that passes the proto (and actually
> means "proto" ;))
>
>
> I still think that before providing this new mechanism we need *some* way
> of declaring that we expect more from "the protocol".
>

Yep!


>  I think I have some code up (or will have some code up soon, depending on
> when you read this email) that does have sort-of working multiplexed
> transports:
>
>
> Cool.
>

For what it's worth, I hacked together something in docs/examples that
works. I'll see what I have to do to get it to work over a browser, and see
what I can expose as API :)



> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131123/472c414c/attachment-0002.html>

From wasilak at gmail.com  Sat Nov 23 05:03:29 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Sat, 23 Nov 2013 13:03:29 +0100
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <loom.20131123T061959-660@post.gmane.org>
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
 <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>
 <81E2EC36-5D3E-44A1-A465-7381CBE695CB@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C53D@EXVMBX020-12.exch020.serverdata.net>
 <loom.20131123T061959-660@post.gmane.org>
Message-ID: <CAFUtXGxAdweHn6Eam-JZ6tqzKyj+BDYRgSfG1gD4obn-NQ_26w@mail.gmail.com>

Ron,

Following with interest.  Seeking a CoAP Python client capability that
> includes:
> - Support for IPV6 to talk directly to server motes in constrained 6LoWPAN
> WSNs. (the large IPV6 address space is for me intrinsic to the IoT concept)
> - Security for the same, so presumably DTLS.
> Both of these needed and particularly security, for any serious monitoring
> and control applications.
>

IPv6 is my target too. In general I've managed to run some tests with
txThings and Contiki powered 6LoWPAN motes. My points below:

1. Twisted doesn't officially support UDP IPv6 yet - however there was
great progress lately - see ticket #5086 (
http://twistedmatrix.com/trac/ticket/5086). Someone else should probably
comment on that, but it seems to be close to the finish line

2. You can easily add unofficial IPv6 support (basic unicast) by modifying
twisted/internet/udp.py. I'll email you the details.

3. There is a problem with txThings IPv6 server, because in most operating
systems source address of datagram is determined in round robin fashion. It
may cause the source address of the response to be different than
destination address of the request. CoAP client drops such responses and
sends RST. I haven't solved the problem yet. However if you need only
client you should be okay for now.

4. DTLS is currently not supported. I agree it's a must for any real life
application. There are some Python DTLS implementations out there, but I
haven't tried to use them with Twisted yet.

5. I don't know of any non-Twisted Python CoAP libraries with full IPv6 and
DTLS support. This week there was CoAP Plugtest event in Las Vegas (ended
yesterday) - when IETF Core working group publishes some report, it might
be a good summary of existing CoAP implementations. According to the first
summary DTLS plugtest had 66% success rate - which means it's a though
topic.

Best regards
Maciej Wasilak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131123/b124940e/attachment-0002.html>

From exarkun at twistedmatrix.com  Sat Nov 23 05:08:34 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 23 Nov 2013 12:08:34 -0000
Subject: [Twisted-Python] [twisted.mail][newbie] return tempfail (4xx)
 after eomReceived()
In-Reply-To: <52908511.2050706@nweb.it>
References: <52908511.2050706@nweb.it>
Message-ID: <20131123120834.7593.1739550027.divmod.xquotient.0@top>

On 10:36 am, sangiovanni at nweb.it wrote:
>Hello list,
>
>I'm trying to code an SMTP server that stores received messages in a 
>queue (es. RabbitMQ or Redis).
>I'm figuring out how to do it with Twisted, and so far I managed to 
>print to console the messages the way I want.
>I'm trying to understand now how to return a tempfail code (4xx) from 
>within eomReceived(), so to simulate (and, in the future, handle) 
>temporary unavailabilities of the queuing system, and thus to delegate 
>to the client the handling/retrying of the delivery (there will be 
>postfix in front of my smtp server, so it will keep the message in its 
>spool).
>I ended up digging in the code until I found the _messageHandled 
>callback of the SMTP class, that's added to the deferred returned by 
>eomReceived. I admit I'm not very accustomed to deferreds yet, but I 
>can only see 250 and 550 response code inside it. I suspect that I 
>should return the 4xx code in one of the deferred's callbacks/errbacks 
>*before* _messageHandled, but I really can't imagine how. Would you 
>please give me some hints about how to accomplish the task? Am I 
>looking to the right direction at all?

See https://twistedmatrix.com/trac/ticket/4904

Jean-Paul



From p.mayers at imperial.ac.uk  Sat Nov 23 05:38:29 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 23 Nov 2013 12:38:29 +0000
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <CAFUtXGxAdweHn6Eam-JZ6tqzKyj+BDYRgSfG1gD4obn-NQ_26w@mail.gmail.com>
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
 <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>
 <81E2EC36-5D3E-44A1-A465-7381CBE695CB@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C53D@EXVMBX020-12.exch020.serverdata.net>
 <loom.20131123T061959-660@post.gmane.org>
 <CAFUtXGxAdweHn6Eam-JZ6tqzKyj+BDYRgSfG1gD4obn-NQ_26w@mail.gmail.com>
Message-ID: <5290A1C5.2020006@imperial.ac.uk>

On 23/11/13 12:03, Maciej Wasilak wrote:

> 3. There is a problem with txThings IPv6 server, because in most
> operating systems source address of datagram is determined in round
> robin fashion. It may cause the source address of the response to be
> different than destination address of the request.

This is in general a bit of a pain with UDP apps.

In Twisted, the easiest solution is to specifically bind the UDP sockets 
to the IP address(es) on the host, and always reply on the same 
protocol/transport you received on.

You may find the "netifaces" package helpful for getting a list of IPs 
in a cross-platform manner.

In theory you can avoid doing this if you have sendmsg/recvmsg support, 
but Twisted doesn't have this (yet).



From trac at twistedmatrix.com  Sun Nov 24 00:05:17 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 Nov 2013 07:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1385276717.24.3903768172259438408@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131124/9d8c039d/attachment-0002.html>

From jonas.brunsgaard at gmail.com  Sun Nov 24 12:35:05 2013
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Sun, 24 Nov 2013 20:35:05 +0100
Subject: [Twisted-Python] How to get ServerOptions in tac file.
Message-ID: <CACVXvXq80LojO-A=c3-TyzSfC3WAJrKvqZQ7u7B-S8pffk6jCA@mail.gmail.com>

Is there an easy way get an options object from the  .tac file?

I my .tac file i have the following.

fh = logging.FileHandler('/var/log/ocmg/datastore.log')

I would like to be able et replace '/var/log/ocmg/datastore.log' with the
logfile option given by the user at the command line.

Any suggestions?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131124/c0d38cf5/attachment-0002.html>

From exarkun at twistedmatrix.com  Sun Nov 24 13:43:52 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Nov 2013 20:43:52 -0000
Subject: [Twisted-Python] How to get ServerOptions in tac file.
In-Reply-To: <CACVXvXq80LojO-A=c3-TyzSfC3WAJrKvqZQ7u7B-S8pffk6jCA@mail.gmail.com>
References: <CACVXvXq80LojO-A=c3-TyzSfC3WAJrKvqZQ7u7B-S8pffk6jCA@mail.gmail.com>
Message-ID: <20131124204352.5996.765012586.divmod.xquotient.3@top>

On 07:35 pm, jonas.brunsgaard at gmail.com wrote:
>Is there an easy way get an options object from the  .tac file?
>
>I my .tac file i have the following.
>
>fh = logging.FileHandler('/var/log/ocmg/datastore.log')
>
>I would like to be able et replace '/var/log/ocmg/datastore.log' with 
>the
>logfile option given by the user at the command line.
>
>Any suggestions?

See http://stackoverflow.com/questions/18244050/

Jean-Paul



From jonas.brunsgaard at gmail.com  Sun Nov 24 16:55:51 2013
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Mon, 25 Nov 2013 00:55:51 +0100
Subject: [Twisted-Python] How to get ServerOptions in tac file.
In-Reply-To: <20131124204352.5996.765012586.divmod.xquotient.3@top>
References: <CACVXvXq80LojO-A=c3-TyzSfC3WAJrKvqZQ7u7B-S8pffk6jCA@mail.gmail.com>
 <20131124204352.5996.765012586.divmod.xquotient.3@top>
Message-ID: <CACVXvXpYcgLVLx5=_aKvAwE4RtitaSttPOOPdMzhNmdG+CQiaw@mail.gmail.com>

On Sun, Nov 24, 2013 at 9:43 PM, <exarkun at twistedmatrix.com> wrote:

> On 07:35 pm, jonas.brunsgaard at gmail.com wrote:
>
>> Is there an easy way get an options object from the  .tac file?
>>
>> I my .tac file i have the following.
>>
>> fh = logging.FileHandler('/var/log/ocmg/datastore.log')
>>
>> I would like to be able et replace '/var/log/ocmg/datastore.log' with the
>> logfile option given by the user at the command line.
>>
>> Any suggestions?
>>
>
> See http://stackoverflow.com/questions/18244050/


Okay. Thank you for the answer!

Does anyone know if there are any plans to update, the logging system
in twistd at some point, so it integrates better with native python logging
system?

I have to use the following logging scheme (glog - google logging)

I1125 00:38:34. 309273 140138991519488 log.py:443] Main loop terminated.
I1125 00:38:34. 309624 140138991519488 log.py:443] Server Shut Down.
I1125 00:41:09. 665297 140705081902848 log.py:443] Loaded.

would the easiest way to accomplich this be to just implement a
logger and use the --logger option with twisted?

Idealy I also need more log levels, is that possible?


> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131125/b3dd5595/attachment-0002.html>

From yangyouxiu at gmail.com  Sun Nov 24 19:29:41 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Mon, 25 Nov 2013 10:29:41 +0800
Subject: [Twisted-Python] How to debug the client-server pyqt project using
	twisted framework?
Message-ID: <201311251029355552645@gmail.com>

Hi, all!
I'm developing an client-server pyqt application. Is there an easier way to debug? Now, I can only run client and server, then click the button on the client and watch responce of the server? 

What's the method and what's the tool?

Thanks all.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131125/923e281d/attachment-0002.html>

From sank.daniel at gmail.com  Sun Nov 24 22:52:05 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sun, 24 Nov 2013 21:52:05 -0800
Subject: [Twisted-Python] How to debug the client-server pyqt project
 using twisted framework?
In-Reply-To: <201311251029355552645@gmail.com>
References: <201311251029355552645@gmail.com>
Message-ID: <CAKN9TDLit2nRQtJq+PDdH0RyrNh-rwckuR0Y4utW7JAY+3RQWw@mail.gmail.com>

Yangyouxiu,

I was recently trying to solve the same problem for my own project.
Twisted apparently has some built-in testing facilities:

http://twistedmatrix.com/documents/current/core/howto/trial.html

Does this help at all?



From yangyouxiu at gmail.com  Sun Nov 24 23:34:59 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Mon, 25 Nov 2013 14:34:59 +0800
Subject: [Twisted-Python] How to debug the client-server pyqt project
	using twisted framework?
References: <201311251029355552645@gmail.com>, 
 <CAKN9TDLit2nRQtJq+PDdH0RyrNh-rwckuR0Y4utW7JAY+3RQWw@mail.gmail.com>
Message-ID: <201311251434530260429@gmail.com>

Daniel Sank,
Thank you very much.
Trial may be a solution. But i have no idea about using trail in qt application testing. 

From: Daniel Sank
Date: 2013-11-25 13:52
To: Twisted general discussion
Subject: Re: [Twisted-Python] How to debug the client-server pyqt project using twisted framework?
Yangyouxiu,

I was recently trying to solve the same problem for my own project.
Twisted apparently has some built-in testing facilities:

http://twistedmatrix.com/documents/current/core/howto/trial.html

Does this help at all?

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131125/ee0ab27e/attachment-0002.html>

From sank.daniel at gmail.com  Mon Nov 25 00:30:17 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sun, 24 Nov 2013 23:30:17 -0800
Subject: [Twisted-Python] How to debug the client-server pyqt project
 using twisted framework?
In-Reply-To: <201311251434530260429@gmail.com>
References: <201311251029355552645@gmail.com>
 <CAKN9TDLit2nRQtJq+PDdH0RyrNh-rwckuR0Y4utW7JAY+3RQWw@mail.gmail.com>
 <201311251434530260429@gmail.com>
Message-ID: <CAKN9TDL8tJ3aVSSHhbWRXLFp97oEzDFUJUEGvNyHAp0iVK-D3A@mail.gmail.com>

> But i have no idea about using trail in qt application testing.

Neither do I. As I said I'm trying to figure this out for myself as
well. If I learn anything useful I'll let you know.

I would say that you probably can write most of your application
without worrying about the GUI at all. In that case you should be able
to unit-test your program as you would any other program. What I've
been doing is just programming callbacks to do what will eventually be
done by users clicking buttons and that sort of thing.

I should add to this that I have _not_ figured out how to use Trial
with perspective broker yet.



From yangyouxiu at gmail.com  Mon Nov 25 00:35:44 2013
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Mon, 25 Nov 2013 15:35:44 +0800
Subject: [Twisted-Python] How to debug the client-server pyqt project
	using twisted framework?
References: <201311251029355552645@gmail.com>, 
 <CAKN9TDLit2nRQtJq+PDdH0RyrNh-rwckuR0Y4utW7JAY+3RQWw@mail.gmail.com>, 
 <201311251434530260429@gmail.com>, 
 <CAKN9TDL8tJ3aVSSHhbWRXLFp97oEzDFUJUEGvNyHAp0iVK-D3A@mail.gmail.com>
Message-ID: <2013112515354057666511@gmail.com>

Daniel Sank,

Thanks very much. ^_^
From: Daniel Sank
Date: 2013-11-25 15:30
To: Twisted general discussion
Subject: Re: [Twisted-Python] How to debug the client-server pyqt project using twisted framework?
> But i have no idea about using trail in qt application testing.

Neither do I. As I said I'm trying to figure this out for myself as
well. If I learn anything useful I'll let you know.

I would say that you probably can write most of your application
without worrying about the GUI at all. In that case you should be able
to unit-test your program as you would any other program. What I've
been doing is just programming callbacks to do what will eventually be
done by users clicking buttons and that sort of thing.

I should add to this that I have _not_ figured out how to use Trial
with perspective broker yet.

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131125/cd1ee538/attachment-0002.html>

From ron at ronsdesk.com  Mon Nov 25 00:55:10 2013
From: ron at ronsdesk.com (Ron Segal)
Date: Mon, 25 Nov 2013 07:55:10 +0000 (UTC)
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
 <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>
 <81E2EC36-5D3E-44A1-A465-7381CBE695CB@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C53D@EXVMBX020-12.exch020.serverdata.net>
 <loom.20131123T061959-660@post.gmane.org>
 <CAFUtXGxAdweHn6Eam-JZ6tqzKyj+BDYRgSfG1gD4obn-NQ_26w@mail.gmail.com>
Message-ID: <loom.20131125T084957-644@post.gmane.org>

Maciej Wasilak <wasilak <at> gmail.com> writes:

> 
> Ron,
> 
> 
> Following with interest.  Seeking a CoAP Python client capability that
includes:
> - Support for IPV6 to talk directly to server motes in constrained 6LoWPAN
> WSNs. (the large IPV6 address space is for me intrinsic to the IoT concept)
> - Security for the same, so presumably DTLS.
> Both of these needed and particularly security, for any serious monitoring
> and control applications.
> 
> 
> IPv6 is my target too. In general I've managed to run some tests with
txThings and Contiki 
> powered 6LoWPAN motes. My points below:1. Twisted doesn't officially
support UDP IPv6 yet - however there was great progress lately - see ticket
#5086 (http://twistedmatrix.com/trac/ticket/5086). Someone else should
probably comment on that, but it seems to be close to the finish line
> 
> 2. You can easily add unofficial IPv6 support (basic unicast) by modifying
twisted/internet/udp.py. I'll email you the details.
> 
> 3. There is a problem with txThings IPv6 server, because in most operating
systems source address of datagram is determined in round robin fashion. It
may cause the source address of the response to be different than
destination address of the request. CoAP client drops such responses and
sends RST. I haven't solved the problem yet. However if you need only client
you should be okay for now.
> 
> 4. DTLS is currently not supported. I agree it's a must for any real life
application. There are some Python DTLS implementations out there, but I
haven't tried to use them with Twisted yet.
> 
> 5. I don't know of any non-Twisted Python CoAP libraries with full IPv6
and DTLS support. This week there was CoAP Plugtest event in Las Vegas
(ended yesterday) - when IETF Core working group publishes some report, it
might be a good summary of existing CoAP implementations. According to the
first summary DTLS plugtest had 66% success rate - which means it's a though
topic. 
> 
> 
> Best regards
> 
> Maciej Wasilak
> 
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python <at> twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

Maciej, thank you, very interesting. But I guess not such good news for the
serious use of CoAP right now.

The percentage 'pass' for interoperability tests of DTLS are perhaps no
surprise, as unless a standard is very tight there will be slightly
different interpretations.

Really appreciate your providing details for getting an IPV6 CoAP client
working with Twisted.

Best wishes

Ron









From sangiovanni at nweb.it  Mon Nov 25 03:06:44 2013
From: sangiovanni at nweb.it (Fabio Sangiovanni)
Date: Mon, 25 Nov 2013 11:06:44 +0100
Subject: [Twisted-Python] [twisted.mail][newbie] return tempfail (4xx)
 after eomReceived()
In-Reply-To: <20131123120834.7593.1739550027.divmod.xquotient.0@top>
References: <52908511.2050706@nweb.it>
 <20131123120834.7593.1739550027.divmod.xquotient.0@top>
Message-ID: <52932134.2090109@nweb.it>

Hi,

thanks for your anwser, and forgive my late follow up.
So, I understand that this feature is currently missing in twisted. I 
suppose that the only thing to do in my case is to override the 
_messageHandled method, and implement all the logic needed to my 
purpose. Is this correct? Are you aware of some technique other people 
adopted?

Thanks a lot,
Fabio

On 23/11/13 13:08, exarkun at twistedmatrix.com wrote:
> On 10:36 am, sangiovanni at nweb.it wrote:
>> Hello list,
>>
>> I'm trying to code an SMTP server that stores received messages in a 
>> queue (es. RabbitMQ or Redis).
>> I'm figuring out how to do it with Twisted, and so far I managed to 
>> print to console the messages the way I want.
>> I'm trying to understand now how to return a tempfail code (4xx) from 
>> within eomReceived(), so to simulate (and, in the future, handle) 
>> temporary unavailabilities of the queuing system, and thus to 
>> delegate to the client the handling/retrying of the delivery (there 
>> will be postfix in front of my smtp server, so it will keep the 
>> message in its spool).
>> I ended up digging in the code until I found the _messageHandled 
>> callback of the SMTP class, that's added to the deferred returned by 
>> eomReceived. I admit I'm not very accustomed to deferreds yet, but I 
>> can only see 250 and 550 response code inside it. I suspect that I 
>> should return the 4xx code in one of the deferred's 
>> callbacks/errbacks *before* _messageHandled, but I really can't 
>> imagine how. Would you please give me some hints about how to 
>> accomplish the task? Am I looking to the right direction at all?
>
> See https://twistedmatrix.com/trac/ticket/4904
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From exarkun at twistedmatrix.com  Mon Nov 25 04:33:28 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 25 Nov 2013 11:33:28 -0000
Subject: [Twisted-Python] logging (was: How to get ServerOptions in tac
	file.)
In-Reply-To: <CACVXvXpYcgLVLx5=_aKvAwE4RtitaSttPOOPdMzhNmdG+CQiaw@mail.gmail.com>
References: <CACVXvXq80LojO-A=c3-TyzSfC3WAJrKvqZQ7u7B-S8pffk6jCA@mail.gmail.com>
 <20131124204352.5996.765012586.divmod.xquotient.3@top>
 <CACVXvXpYcgLVLx5=_aKvAwE4RtitaSttPOOPdMzhNmdG+CQiaw@mail.gmail.com>
Message-ID: <20131125113328.6607.1820539344.divmod.xquotient.2@top>

On 24 Nov, 11:55 pm, jonas.brunsgaard at gmail.com wrote:
>
>Does anyone know if there are any plans to update, the logging system
>in twistd at some point, so it integrates better with native python 
>logging
>system?

What does "integrates better" mean?
>I have to use the following logging scheme (glog - google logging)
>
>I1125 00:38:34. 309273 140138991519488 log.py:443] Main loop 
>terminated.
>I1125 00:38:34. 309624 140138991519488 log.py:443] Server Shut Down.
>I1125 00:41:09. 665297 140705081902848 log.py:443] Loaded.
>
>would the easiest way to accomplich this be to just implement a
>logger and use the --logger option with twisted?
>
>Idealy I also need more log levels, is that possible?

twisted.python.log doesn't explicitly support log levels.  Instead, it 
supports arbitrary structured data (log levels are one example of this).

    log.msg(level="DEBUG", ...)

What else are you looking for?

Jean-Paul



From exarkun at twistedmatrix.com  Mon Nov 25 04:36:31 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 25 Nov 2013 11:36:31 -0000
Subject: [Twisted-Python] [twisted.mail][newbie] return tempfail (4xx)
 after eomReceived()
In-Reply-To: <52932134.2090109@nweb.it>
References: <52908511.2050706@nweb.it>
 <20131123120834.7593.1739550027.divmod.xquotient.0@top>
 <52932134.2090109@nweb.it>
Message-ID: <20131125113631.6607.608108631.divmod.xquotient.6@top>

On 10:06 am, sangiovanni at nweb.it wrote:
>Hi,
>
>thanks for your anwser, and forgive my late follow up.
>So, I understand that this feature is currently missing in twisted. I 
>suppose that the only thing to do in my case is to override the 
>_messageHandled method, and implement all the logic needed to my 
>purpose. Is this correct? Are you aware of some technique other people 
>adopted?

Names that start with "_" are private and subject to change in any new 
Twisted release.  In other words, there are no compatibility guarantees 
for such names.

If you're comfortable with future Twisted releases breaking this feature 
of your software then yes, this sounds like a workable approach.

Another approach would be to contribute to Twisted - help resolve the 
ticket I linked to by introducing a new public API for controling the 
response code.

Jean-Paul



From exarkun at twistedmatrix.com  Mon Nov 25 09:06:58 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 25 Nov 2013 16:06:58 -0000
Subject: [Twisted-Python] Bristol (England!) sprint hosted by
	HybridCluster
In-Reply-To: <20131108193110.8349.896392936.divmod.xquotient.542@top>
References: <20131105222539.8349.455028162.divmod.xquotient.262@top>
 <20131108193110.8349.896392936.divmod.xquotient.542@top>
Message-ID: <20131125160658.6607.687758537.divmod.xquotient.40@top>

On 8 Nov, 07:31 pm, exarkun at twistedmatrix.com wrote:
>On 5 Nov, 10:25 pm, exarkun at twistedmatrix.com wrote:
>>Greetings all,
>>
>>I'm pleased to invite you to join Tom Prince (2013 Twisted Fellow), 
>>Luke Marsden (founder of HybridCluster), and the HybridCluster team 
>>(including myself!) for the first Twisted sprint hosted by 
>>HybridCluster!
>>
>>The sprint will take place on December 7th in central Bristol (exact 
>>location to be determined) from 11AM until no one remains capable of 
>>higher brain function(*).
>
>Hello again,
>
>The exact location of the sprint has been selected.  The sprint will be 
>held at SETsquared Business Acceleration Centre, Bristol:
>
>http://goo.gl/maps/1HUsW

Hello everybody,

Just a reminder, there is a sprint!  There is now also a meetup page for 
the sprint, you can RSVP there if you like:

  http://bit.ly/1i8Pnq4

Jean-Paul



From m-lists at the-moon.net  Mon Nov 25 09:56:20 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Mon, 25 Nov 2013 16:56:20 +0000
Subject: [Twisted-Python] EDNS(0) and DNSSEC support in Twisted Names
Message-ID: <CABefbUqbyuAPRVb2P9AbkHvm=m9eH2rFSbsH2k6S6y1LYg09dA@mail.gmail.com>

Hello,

I'm happy to announce that I've won some funding from The NLnet
Foundation DNS Security Fund (http://www.nlnet.nl/dnssec/), to add
EDNS(0) and DNSSEC (and possibly DANE) support to Twisted.

The current project plan can be found here:
 * https://twistedmatrix.com/trac/wiki/EDNS0

If there are any DNS enthusiasts / experts on this list, I'd
appreciate your feedback -- on the plan and on the implementation (as
it evolves). Please reply to this email with your thoughts.

Tom Prince has kindly agreed to do some "express" code and design
reviews for me. That'll be a great help given the current length of
the review queue.
 * https://twistedmatrix.com/trac/report/25

But the more eyes on the code the better, so please consider helping
out with code reviews if you can. (I'm happy to trade reviews if
you've got your own branch / patch waiting to be reviewed.)

I've been given a head start in this project by the patches
contributed by Bob Novas and Phil Mayers, so thank you both. I hope
you'll be able monitor what I'm doing and steer me in the right
direction.

Thanks also to Itamar who encouraged me to apply for the funding and
to Tom Prince and everyone who helped me draft the proposal.

I'll be working on this at the Twisted Sprint in Bristol, UK on
December 7th; where I'll be delighted to discuss the project and
demonstrate what I've been up to. Hope to see you there!

-Richard Wall (rwall in #twisted and #twisted-dev)



From koblucki at yahoo.com  Mon Nov 25 12:27:42 2013
From: koblucki at yahoo.com (Krzysztof Oblucki)
Date: Mon, 25 Nov 2013 11:27:42 -0800 (PST)
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of an
	incoming message
Message-ID: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>

Hello,
I am trying to write an IMAP proxy to modify headers and the body of an incoming message using twisted.  I am new to python and twisted so maybe this is why I either picked the wrong route or don't have the skills to get through some issues and I'm hoping that some you fine list members can point me in the right direction.

I started by using the IMAP4Client and IMAP4Server to do the proxying.  However, I realized that in certain cases, the IMAP4Server requires synchronous results but since I need to do an async call using the client the handling is not working properly.  I ran into this when implementing getFlags() in the IMessage and I am not sure how I can get out of this short of changing the IMAP4Server code to handle Deferreds.

Am I on the right track?  Is imap4 lib the right tool for this job?  If so, is modifying IMAP4Server to handle Deferreds the right thing to do?  If not, what would you recommend?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131125/39575a82/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Nov 25 15:29:58 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Nov 2013 14:29:58 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed
	by Avatars?
In-Reply-To: <CAKN9TDJeswWiutcN1FVv=v03fSvCu1sSTVT2RDXthrk8uhQ+Ug@mail.gmail.com>
References: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
 <CAKN9TDJeswWiutcN1FVv=v03fSvCu1sSTVT2RDXthrk8uhQ+Ug@mail.gmail.com>
Message-ID: <925D310F-59DA-4B43-BCC3-DBE63FD18C62@twistedmatrix.com>


On Nov 22, 2013, at 11:20 AM, Daniel Sank <sank.daniel at gmail.com> wrote:

>> Question: Is there a way to distribute un-asked for references to
>> Viewables that properly get the perspective argument in their view_*
>> methods?
> 
> I think this is a pretty reasonable question but nobody's biting. Did
> I do something wrong in the way I asked?

This is what I was trying to answer when I said to construct and return a ViewPoint explicitly instead of hoping that it gets implicitly associated through the process of serialization.  If that's not the answer you were looking for, could you clarify the question?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131125/86e56be2/attachment-0002.html>

From sank.daniel at gmail.com  Mon Nov 25 16:20:02 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 25 Nov 2013 15:20:02 -0800
Subject: [Twisted-Python] Do Viewables absolutely have to be return'ed
	by Avatars?
In-Reply-To: <925D310F-59DA-4B43-BCC3-DBE63FD18C62@twistedmatrix.com>
References: <CAKN9TDK-Pe8JWFPQqk7L3aQ0CtOKfrotkJ3C786q7O51bejZwg@mail.gmail.com>
 <CAKN9TDJeswWiutcN1FVv=v03fSvCu1sSTVT2RDXthrk8uhQ+Ug@mail.gmail.com>
 <925D310F-59DA-4B43-BCC3-DBE63FD18C62@twistedmatrix.com>
Message-ID: <CAKN9TDLTb80wjD36iDa99GtZH+sEXva3eXWrhYXK5E0vc10YNg@mail.gmail.com>

>>> Question: Is there a way to distribute un-asked for references to
>>> Viewables that properly get the perspective argument in their view_*
>>> methods?
>>>
>>>
>> I think this is a pretty reasonable question but nobody's biting. Did
>> I do something wrong in the way I asked?
>>
>>
> This is what I was trying to answer when I said to construct and return a ViewPoint explicitly
> instead of hoping that it gets implicitly associated through the process of serialization.  If
> that's not the answer you were looking for, could you clarify the question?

You answered it for sure! The email in which I asked why nobody was
biting was sent before anyone responded. Thanks again :)

-Daniel



From anhquankitty at gmail.com  Mon Nov 25 21:05:24 2013
From: anhquankitty at gmail.com (Quan Tong Anh)
Date: Tue, 26 Nov 2013 11:05:24 +0700
Subject: [Twisted-Python] carbon-relay eating CPU - EAGAIN (Resource
	temporarily unavailable)?
Message-ID: <CAFQpocqEfiY4HNPFqnFXfW23aYK1keo+tAWOiZAy6iwVA39q3Q@mail.gmail.com>

 - Python 2.7.3
 - [twisted, version 13.1.0]
 - xen-domU

`atop` shows that `carbon-relay` is eating 80, 90% USRCPU. From the
`strace`:

    accept(7, {sa_family=AF_INET, sin_port=htons(60649),
sin_addr=inet_addr("192.237.222.81")}, [16]) = 257
    accept(7, {sa_family=AF_INET, sin_port=htons(51564),
sin_addr=inet_addr("166.78.1.48")}, [16]) = 257
    accept(7, 0x7ffff4679550, [16])         = -1 EAGAIN (Resource
temporarily unavailable)
    accept(7, {sa_family=AF_INET, sin_port=htons(33654),
sin_addr=inet_addr("198.61.194.248")}, [16]) = 257
    accept(7, {sa_family=AF_INET, sin_port=htons(50037),
sin_addr=inet_addr("166.78.181.204")}, [16]) = 257
    accept(7, 0x7ffff4679550, [16])         = -1 EAGAIN (Resource
temporarily unavailable)

The strange thing is: even restart the service, it seems stuck at fd 7
everytime running `strace`. Does it mean this fd is not being cleanup
properly?

I have increased the number of open files:

**/proc/2891/limits**

    Limit                     Soft Limit           Hard Limit
Units
    Max cpu time              unlimited            unlimited
 seconds
    Max file size             unlimited            unlimited
 bytes
    Max data size             unlimited            unlimited
 bytes
    Max stack size            8388608              unlimited
 bytes
    Max core file size        0                    unlimited
 bytes
    Max resident set          unlimited            unlimited
 bytes
    Max processes             15834                15834
 processes
    Max open files            16384                16384
 files
    Max locked memory         65536                65536
 bytes
    Max address space         unlimited            unlimited
 bytes
    Max file locks            unlimited            unlimited
 locks
    Max pending signals       15834                15834
 signals
    Max msgqueue size         819200               819200
bytes
    Max nice priority         0                    0
    Max realtime priority     0                    0
    Max realtime timeout      unlimited            unlimited            us


then it decreases down to ~ 50%.

My problem looks like similar to this [thread](
http://twistedmatrix.com/pipermail/twisted-python/2008-September/018361.html)
but since we have a few sockets in TIME_WAIT state, I don't think that
enable the `tw_recycle` can help. About the `tcp_syncookies`, I don't see
any related message in the syslog.

This is what I get when trying to start `carbon-relay` in debug mode:

    26/11/2013 02:22:14 :: [listener] MetricPickleReceiver connection with
50.56.249.127:48772 lost: Connection to the other side was lost in a
non-clean fashion: Connection lost.
    26/11/2013 02:22:14 :: [listener] MetricPickleReceiver connection with
198.101.241.101:50672 lost: Connection to the other side was lost in a
non-clean fashion: Connection lost.
    26/11/2013 02:22:14 :: [listener] MetricPickleReceiver connection with
166.78.2.167:43346 lost: Connection to the other side was lost in a
non-clean fashion: Connection lost.

This is from `twisted`:

    class ConnectionLost(ConnectionClosed):
        """Connection to the other side was lost in a non-clean fashion"""

        def __str__(self):
            s = self.__doc__.strip().splitlines()[0]
            if self.args:
                s = '%s: %s' % (s, ' '.join(self.args))
            s = '%s.' % s
            return s

I also have tried to [debug with `gdb`](
https://wiki.python.org/moin/DebuggingWithGdb) but `pystack` returns
nothing.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131126/70aae0d4/attachment-0002.html>

From p.mayers at imperial.ac.uk  Tue Nov 26 04:51:40 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 26 Nov 2013 11:51:40 +0000
Subject: [Twisted-Python] carbon-relay eating CPU - EAGAIN (Resource
 temporarily unavailable)?
In-Reply-To: <CAFQpocqEfiY4HNPFqnFXfW23aYK1keo+tAWOiZAy6iwVA39q3Q@mail.gmail.com>
References: <CAFQpocqEfiY4HNPFqnFXfW23aYK1keo+tAWOiZAy6iwVA39q3Q@mail.gmail.com>
Message-ID: <52948B4C.3010707@imperial.ac.uk>

On 26/11/13 04:05, Quan Tong Anh wrote:
>   - Python 2.7.3
>   - [twisted, version 13.1.0]
>   - xen-domU

I assume xen-domU means "Linux" as the guest OS; which kernel version, 
out of interest.

>
> `atop` shows that `carbon-relay` is eating 80, 90% USRCPU. From the

I don't know about anyone else, but I don't know what carbon-relay is. A 
quick google suggests it's part of that graphite monitoring/RRD 
replacement thing; which version are you running (Or: what reactor is it 
using)?

How many open files do you have?


> `strace`:

Without timestamps it's difficult to interpret this unambiguously; that 
could be a microsecond or minute we're seeing ;o)

> The strange thing is: even restart the service, it seems stuck at fd 7
> everytime running `strace`. Does it mean this fd is not being cleanup
> properly?

No. fd numbers are allocated starting from 0 and going upwards. The same 
process running the same startup code every time will tend (not always, 
since it's order-dependent) to use the same file descriptors for the 
same things, modulo close/open events.



From anhquankitty at gmail.com  Tue Nov 26 06:54:39 2013
From: anhquankitty at gmail.com (Quan Tong Anh)
Date: Tue, 26 Nov 2013 20:54:39 +0700
Subject: [Twisted-Python] carbon-relay eating CPU - EAGAIN (Resource
 temporarily unavailable)?
In-Reply-To: <52948B4C.3010707@imperial.ac.uk>
References: <CAFQpocqEfiY4HNPFqnFXfW23aYK1keo+tAWOiZAy6iwVA39q3Q@mail.gmail.com>
 <52948B4C.3010707@imperial.ac.uk>
Message-ID: <CAFQpocqVcYNBAfffCVkpCArr_yHVT4foQAsvdciwxdaf-0LKZg@mail.gmail.com>

On Tue, Nov 26, 2013 at 6:51 PM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

>
> I assume xen-domU means "Linux" as the guest OS; which kernel version, out
> of interest.


3.2.0-53-virtual


>
> I don't know about anyone else, but I don't know what carbon-relay is. A
> quick google suggests it's part of that graphite monitoring/RRD replacement
> thing; which version are you running (Or: what reactor is it using)?
>

Yes, it's here:
https://graphite.readthedocs.org/en/latest/carbon-daemons.html#carbon-relay-py

The version I'm using is 0.9.12.


>
> How many open files do you have?
>

1664.


>
>
>  `strace`:
>>
>
> Without timestamps it's difficult to interpret this unambiguously; that
> could be a microsecond or minute we're seeing ;o)


Here's for you:

13:51:31 accept(7, {sa_family=AF_INET, sin_port=htons(57236),
sin_addr=inet_addr("198.61.194.221")}, [16]) = 216

13:51:31 accept(7, {sa_family=AF_INET, sin_port=htons(39755),
sin_addr=inet_addr("50.56.175.61")}, [16]) = 216

13:51:31 accept(7, 0x7fff2eebc270, [16]) = -1 EAGAIN (Resource temporarily
unavailable)

13:51:31 accept(7, {sa_family=AF_INET, sin_port=htons(49236),
sin_addr=inet_addr("198.101.238.239")}, [16]) = 216

13:51:31 accept(7, {sa_family=AF_INET, sin_port=htons(49639),
sin_addr=inet_addr("166.78.2.103")}, [16]) = 216
13:51:31 accept(7, 0x7fff2eebc270, [16]) = -1 EAGAIN (Resource temporarily
unavailable)
...

There are about 20 to 30 connections per second.


>> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131126/ac20f814/attachment-0002.html>

From radix at twistedmatrix.com  Tue Nov 26 08:07:42 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 26 Nov 2013 09:07:42 -0600
Subject: [Twisted-Python] carbon-relay eating CPU - EAGAIN (Resource
 temporarily unavailable)?
In-Reply-To: <CAFQpocqEfiY4HNPFqnFXfW23aYK1keo+tAWOiZAy6iwVA39q3Q@mail.gmail.com>
References: <CAFQpocqEfiY4HNPFqnFXfW23aYK1keo+tAWOiZAy6iwVA39q3Q@mail.gmail.com>
Message-ID: <CAPkRfUTJ76nxXeFMSXUYt-woBKWAqXDrtxHqKz8XfinKFt7ibA@mail.gmail.com>

Hi Quan Tong Anh.

On Mon, Nov 25, 2013 at 10:05 PM, Quan Tong Anh <anhquankitty at gmail.com>wrote:

>  - Python 2.7.3
>  - [twisted, version 13.1.0]
>  - xen-domU
>
> `atop` shows that `carbon-relay` is eating 80, 90% USRCPU. From the
> `strace`:
>
>     accept(7, {sa_family=AF_INET, sin_port=htons(60649),
> sin_addr=inet_addr("192.237.222.81")}, [16]) = 257
>     accept(7, {sa_family=AF_INET, sin_port=htons(51564),
> sin_addr=inet_addr("166.78.1.48")}, [16]) = 257
>     accept(7, 0x7ffff4679550, [16])         = -1 EAGAIN (Resource
> temporarily unavailable)
>     accept(7, {sa_family=AF_INET, sin_port=htons(33654),
> sin_addr=inet_addr("198.61.194.248")}, [16]) = 257
>     accept(7, {sa_family=AF_INET, sin_port=htons(50037),
> sin_addr=inet_addr("166.78.181.204")}, [16]) = 257
>     accept(7, 0x7ffff4679550, [16])         = -1 EAGAIN (Resource
> temporarily unavailable)
>
> The strange thing is: even restart the service, it seems stuck at fd 7
> everytime running `strace`. Does it mean this fd is not being cleanup
> properly?
>

You have given a lot of data, but haven't actually described a problem.
Nothing is "stuck" at FD 7, it's simply a listening socket file descriptor,
and the way listening sockets work is you call accept() repeatedly on them
to get incoming connections.

accept() returning EAGAIN is normal behavior and should basically be
ignored. Twisted handles this case appropriately. From the man page:

       EAGAIN or EWOULDBLOCK
              The socket is marked nonblocking and no connections are
present to be accepted.  POSIX.1-2001 allows either error to be returned
for this case, and does not require these constants to have the same value,
so a portable application should check for both possibilities.

Is there actually something wrong with your service? Can you explain the
behavior you're seeing and how it differs from the behavior you want to
see? If the problem is only "carbon uses a lot of CPU", maybe the problem
is either just that carbon is inefficient or you need to scale up to more
instances?



-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131126/3c5066a4/attachment-0002.html>

From peter.westlake at pobox.com  Wed Nov 27 07:58:30 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Wed, 27 Nov 2013 14:58:30 +0000
Subject: [Twisted-Python] Could Service.startService return a Deferred?
Message-ID: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>

I have a Twisted application with several Services. One of them has a
startService method that does some setup asynchronously. This can go
wrong if the next service to start makes a call to the first one, and it
isn't ready yet. One way round it would be to make all methods on the
slow service returned a Deferred (e.g.
"self.slow_init.addCallback(self.actual_method)", but it seems a shame
to have to do that every time when the situation only occurs when the
daemon starts up. So would it be possible for t.a.s.Service.startService
to be allowed to return a Deferred? Then the next service would only be
started up when the Deferred fired.

Peter.



From haggardii at gmail.com  Wed Nov 27 08:33:26 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Wed, 27 Nov 2013 08:33:26 -0700
Subject: [Twisted-Python] Could Service.startService return a Deferred?
In-Reply-To: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
References: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
Message-ID: <CAL+xXwOosjXAKn3qYNiVH9TxJphBF1Yjf_f+64ei7=a4vf-Buw@mail.gmail.com>

Peter,

I assume you're using a MultiService to hold all of these services.
You could delay adding the dependent services to the MultiService
until the setup service has finished doing what it does.

For instance, something like this (untested):

class SetupService(Service):

    def __init__(self):
        self.done = defer.Deferred()

    def startService(self):
        # do things
        self.done.callback(None)


def makeService(...):
    ms = MultiService()

    setup = SetupService()
    setup.done.addCallback(addTheOtherServicesTo, ms)


Or maybe there's a better built-in way to do this that I don't know about.

Matt


On Wed, Nov 27, 2013 at 7:58 AM, Peter Westlake
<peter.westlake at pobox.com> wrote:
> I have a Twisted application with several Services. One of them has a
> startService method that does some setup asynchronously. This can go
> wrong if the next service to start makes a call to the first one, and it
> isn't ready yet. One way round it would be to make all methods on the
> slow service returned a Deferred (e.g.
> "self.slow_init.addCallback(self.actual_method)", but it seems a shame
> to have to do that every time when the situation only occurs when the
> daemon starts up. So would it be possible for t.a.s.Service.startService
> to be allowed to return a Deferred? Then the next service would only be
> started up when the Deferred fired.
>
> Peter.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From sank.daniel at gmail.com  Wed Nov 27 09:34:24 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Wed, 27 Nov 2013 08:34:24 -0800
Subject: [Twisted-Python] Why must RemoteCacheObservers be hashable?
Message-ID: <CAKN9TDJW7CVBqECOqwtW3eKGpkp0sYj=tDopqqEgODfN9btF5A@mail.gmail.com>

I just wrote up a class that allows dicts to be be pb.Cacheable.
Everything works hunky-dory but only if I implement __hash__, which is
problematic for mutable objects for reasons explained thoroughly
elsewhere. The problem comes from
twisted.spread.flavors.RemoteCacheObserver:

class RemoteCacheObserver:
...
    def __hash__(self):
        """Generate a hash unique to all L{RemoteCacheObserver}s for
this broker/perspective/cached triplet
        """

        return (  (hash(self.broker) % 2**10)
                + (hash(self.perspective) % 2**10)
                + (hash(self.cached) % 2**10))

As we can see, self.cached (which is the pb.Cacheable instance) must
be hashable.

Why?



From exarkun at twistedmatrix.com  Wed Nov 27 10:13:41 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 27 Nov 2013 17:13:41 -0000
Subject: [Twisted-Python] Could Service.startService return a Deferred?
In-Reply-To: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
References: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
Message-ID: <20131127171341.6892.508316338.divmod.xquotient.3@top>

On 02:58 pm, peter.westlake at pobox.com wrote:
>I have a Twisted application with several Services. One of them has a
>startService method that does some setup asynchronously. This can go
>wrong if the next service to start makes a call to the first one, and 
>it
>isn't ready yet. One way round it would be to make all methods on the
>slow service returned a Deferred (e.g.
>"self.slow_init.addCallback(self.actual_method)", but it seems a shame
>to have to do that every time when the situation only occurs when the
>daemon starts up. So would it be possible for 
>t.a.s.Service.startService
>to be allowed to return a Deferred? Then the next service would only be
>started up when the Deferred fired.

Probably not.

There is some discussion on 
<https://twistedmatrix.com/trac/ticket/5941>.

Jean-Paul



From peter.westlake at pobox.com  Wed Nov 27 11:00:46 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Wed, 27 Nov 2013 18:00:46 +0000
Subject: [Twisted-Python] Could Service.startService return a Deferred?
In-Reply-To: <20131127171341.6892.508316338.divmod.xquotient.3@top>
References: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
 <20131127171341.6892.508316338.divmod.xquotient.3@top>
Message-ID: <1385575246.2688.52810605.13D011CA@webmail.messagingengine.com>

On Wed, Nov 27, 2013, at 17:13, exarkun at twistedmatrix.com wrote:
> On 02:58 pm, peter.westlake at pobox.com wrote:
> ... So would it be possible for 
> >t.a.s.Service.startService
> >to be allowed to return a Deferred? Then the next service would only be
> >started up when the Deferred fired.
> 
> Probably not.
> 
> There is some discussion on 
> <https://twistedmatrix.com/trac/ticket/5941>.

That's helpful, thanks. I hadn't realized that startService was called
before the reactor started.

Instead, I've passed in a Deferred to each service that needs to wait.
How does this look?

# -*- mode: python -*-
from twisted.application import service
from twisted.internet import defer, reactor
from twisted.internet.task import deferLater

application = service.Application('Dependencies')

def report(error):
    print 'ERROR', error
    reactor.stop()

class Runner(service.Service):
    def __init__(self, baton):
        self.baton = baton

    def startService(self):
        print 'startService', self.name, reactor.running
        self.baton.addCallback(lambda ignore:deferLater(reactor, 1.0,
        self.realStartService))
        self.baton.addErrback(report)

    def realStartService(self):
        print 'realStartService', self.name, reactor.running

baton = defer.succeed('pass me to each service')

foo = Runner(baton)
foo.setName('foo')
foo.setServiceParent(application)

bar = Runner(baton)
bar.setName('bar')
bar.setServiceParent(application)

Peter.





From exarkun at twistedmatrix.com  Wed Nov 27 12:20:18 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 27 Nov 2013 19:20:18 -0000
Subject: [Twisted-Python] Could Service.startService return a Deferred?
In-Reply-To: <1385575246.2688.52810605.13D011CA@webmail.messagingengine.com>
References: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
 <20131127171341.6892.508316338.divmod.xquotient.3@top>
 <1385575246.2688.52810605.13D011CA@webmail.messagingengine.com>
Message-ID: <20131127192018.6892.1747918954.divmod.xquotient.22@top>

On 06:00 pm, peter.westlake at pobox.com wrote:
>On Wed, Nov 27, 2013, at 17:13, exarkun at twistedmatrix.com wrote:
>>On 02:58 pm, peter.westlake at pobox.com wrote:
>>... So would it be possible for
>> >t.a.s.Service.startService
>> >to be allowed to return a Deferred? Then the next service would only 
>>be
>> >started up when the Deferred fired.
>>
>>Probably not.
>>
>>There is some discussion on
>><https://twistedmatrix.com/trac/ticket/5941>.
>
>That's helpful, thanks. I hadn't realized that startService was called
>before the reactor started.
>
>Instead, I've passed in a Deferred to each service that needs to wait.
>How does this look?
>
># -*- mode: python -*-
>from twisted.application import service
>from twisted.internet import defer, reactor
>from twisted.internet.task import deferLater
>
>application = service.Application('Dependencies')
>
>def report(error):
>    print 'ERROR', error
>    reactor.stop()
>
>class Runner(service.Service):
>    def __init__(self, baton):
>        self.baton = baton
>
>    def startService(self):
>        print 'startService', self.name, reactor.running
>        self.baton.addCallback(lambda ignore:deferLater(reactor, 1.0,
>        self.realStartService))
>        self.baton.addErrback(report)

I'd be concerned with the state of `Runner` at this point in the 
process.

What happens if the application gets shut down while that `deferLater` 
is still pending?

`stopService` has a harder job because it might need to deal with a 
service that is partially initialized or a service that is completely 
initialized (and "partially initialized" may cover a multitude of 
different states depending on the complexity of your service).
>
>    def realStartService(self):
>        print 'realStartService', self.name, reactor.running
>
>baton = defer.succeed('pass me to each service')
>
>foo = Runner(baton)
>foo.setName('foo')
>foo.setServiceParent(application)
>
>bar = Runner(baton)
>bar.setName('bar')
>bar.setServiceParent(application)

What about something like this instead?

  @implementer(IService)
  class Runner(object):
      ...
      @classmethod
      def loadFromWhatever(cls, name):
          return deferLater(reactor, Runner, name)

      def __init__(self, name):
          self.name = name

      def startService(self):
          self.running = True
          print 'realStartService', self.name, reactor.running

  def parent(service):
      application.setServiceParent(service)

  loading = Runner.initializeFromWhatever("foo")
  loading.addCallback(parent)
  loading.addCallback(lambda ignored: 
Runner.initializeFromWhatever("bar"))
  loading.addCallback(parent)
  loading.addErrback(stopTheReactorOrWhatever)

The advantage I see of this approach is that a `Runner` never exists in
the service hierarchy until it is fully initialized, started, and 
running.

If a `Runner` is only partially ready and the process shuts down then 
its `stopService` method isn't called because it's not part of the 
service hierarchy.

I could definitely imagine a library to help with this kind of thing. 
For example, perhaps you want the above encapsulated as:

  asynchronouslySetUpServices(application, [
      lambda: Runner.initializeFromWhatever("foo"),
      lambda: Runner.initialifrFromWhatever("bar")])

And maybe then you want to add in some logic so that if the application 
gets shut down while some things are still being initialized then you 
cancel their Deferred.  Then you have good cleanup support for the 
uninitialized case - without complicating `stopService` (the cleanup 
logic is isolated in the implementation of Deferred cancellation where 
it belongs - eg, with this `deferLater`-based asynchronousness it's 
alreay present since deferLater implements cancellation already).

Jean-Paul



From glyph at twistedmatrix.com  Wed Nov 27 15:14:20 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 27 Nov 2013 14:14:20 -0800
Subject: [Twisted-Python] EDNS(0) and DNSSEC support in Twisted Names
In-Reply-To: <CABefbUqbyuAPRVb2P9AbkHvm=m9eH2rFSbsH2k6S6y1LYg09dA@mail.gmail.com>
References: <CABefbUqbyuAPRVb2P9AbkHvm=m9eH2rFSbsH2k6S6y1LYg09dA@mail.gmail.com>
Message-ID: <F2EA75CC-52A7-4526-82FE-6538928D3BEF@twistedmatrix.com>


On Nov 25, 2013, at 8:56 AM, Richard Wall <m-lists at the-moon.net> wrote:

> Hello,
> 
> I'm happy to announce that I've won some funding from The NLnet
> Foundation DNS Security Fund (http://www.nlnet.nl/dnssec/), to add
> EDNS(0) and DNSSEC (and possibly DANE) support to Twisted.
> 
> The current project plan can be found here:
> * https://twistedmatrix.com/trac/wiki/EDNS0
> 
> If there are any DNS enthusiasts / experts on this list, I'd
> appreciate your feedback -- on the plan and on the implementation (as
> it evolves). Please reply to this email with your thoughts.
> 
> Tom Prince has kindly agreed to do some "express" code and design
> reviews for me. That'll be a great help given the current length of
> the review queue.
> * https://twistedmatrix.com/trac/report/25
> 
> But the more eyes on the code the better, so please consider helping
> out with code reviews if you can. (I'm happy to trade reviews if
> you've got your own branch / patch waiting to be reviewed.)
> 
> I've been given a head start in this project by the patches
> contributed by Bob Novas and Phil Mayers, so thank you both. I hope
> you'll be able monitor what I'm doing and steer me in the right
> direction.
> 
> Thanks also to Itamar who encouraged me to apply for the funding and
> to Tom Prince and everyone who helped me draft the proposal.
> 
> I'll be working on this at the Twisted Sprint in Bristol, UK on
> December 7th; where I'll be delighted to discuss the project and
> demonstrate what I've been up to. Hope to see you there!
> 
> -Richard Wall (rwall in #twisted and #twisted-dev)

Congratulations, Richard.  Thanks a ton for helping to improve twisted.names.  Lack of DNSSEC has been a sore point with a few people I've talked to about adopting twisted.names in favor of ... shall we say, "legacy" DNS solutions ;-).

-glyph


From koblucki at yahoo.com  Wed Nov 27 17:02:40 2013
From: koblucki at yahoo.com (Krzysztof Oblucki)
Date: Wed, 27 Nov 2013 16:02:40 -0800 (PST)
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of
	an incoming message
In-Reply-To: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
References: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
Message-ID: <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>

Maybe I asked the wrong question?  Is it possible to use the imap4 library from twisted to write an imap4 proxy?


________________________________
 From: Krzysztof Oblucki <koblucki at yahoo.com>
To: "twisted-python at twistedmatrix.com" <twisted-python at twistedmatrix.com> 
Sent: Monday, November 25, 2013 11:27 AM
Subject: IMAP4 Proxy to add headers and modify body of an incoming message
 


Hello,
I am trying to write an IMAP proxy to modify headers and the body of an incoming message using twisted.  I am new to python and twisted so maybe this is why I either picked the wrong route or don't have the skills to get through some issues and I'm hoping that some you fine list members can point me in the right direction.

I started by using the IMAP4Client and IMAP4Server to do the proxying.  However, I realized that in certain cases, the IMAP4Server requires synchronous results but since I need to do an async call using the client the handling is not working properly.  I ran into this when implementing getFlags() in the IMessage and I am not sure how I can get out of this short of changing the IMAP4Server code to handle Deferreds.

Am I on the right track?  Is imap4 lib the right tool for this job?  If so, is modifying IMAP4Server to handle Deferreds the right thing to do?  If not, what would you recommend?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131127/614b175d/attachment-0002.html>

From exarkun at twistedmatrix.com  Wed Nov 27 18:18:10 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 28 Nov 2013 01:18:10 -0000
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of
 an incoming message
In-Reply-To: <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>
References: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>
Message-ID: <20131128011810.6892.1184824544.divmod.xquotient.36@top>

>From: Krzysztof Oblucki <koblucki at yahoo.com>
>To: "twisted-python at twistedmatrix.com" <twisted- 
>python at twistedmatrix.com>
>Sent: Monday, November 25, 2013 11:27 AM
>Subject: IMAP4 Proxy to add headers and modify body of an incoming 
>message
>
>Hello,
>I am trying to write an IMAP proxy to modify headers and the body of an 
>incoming message using twisted.  I am new to python and twisted so 
>maybe this is why I either picked the wrong route or don't have the 
>skills to get through some issues and I'm hoping that some you fine 
>list members can point me in the right direction.
>
>I started by using the IMAP4Client and IMAP4Server to do the proxying. 
>However, I realized that in certain cases, the IMAP4Server requires 
>synchronous results but since I need to do an async call using the 
>client the handling is not working properly.  I ran into this when 
>implementing getFlags() in the IMessage and I am not sure how I can get 
>out of this short of changing the IMAP4Server code to handle Deferreds.
>
>Am I on the right track?  Is imap4 lib the right tool for this job?  If 
>so, is modifying IMAP4Server to handle Deferreds the right thing to do? 
>If not, what would you recommend?

Sounds like you diagnosed the problem correctly.  IMAP4Server needs to 
handle Deferreds here and doesn't currently.

Jean-Paul



From koblucki at yahoo.com  Wed Nov 27 19:39:13 2013
From: koblucki at yahoo.com (Krzysztof Oblucki)
Date: Wed, 27 Nov 2013 18:39:13 -0800 (PST)
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of
	an incoming message
In-Reply-To: <20131128011810.6892.1184824544.divmod.xquotient.36@top>
References: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>
 <20131128011810.6892.1184824544.divmod.xquotient.36@top>
Message-ID: <1385606353.19825.YahooMailNeo@web181604.mail.ne1.yahoo.com>

Awesome, that's what I've been trying to do for the past couple of days.  Definitely learning a lot of new things :)


________________________________
 From: "exarkun at twistedmatrix.com" <exarkun at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Wednesday, November 27, 2013 5:18 PM
Subject: Re: [Twisted-Python] IMAP4 Proxy to add headers and modify body of an incoming message
 

> From: Krzysztof Oblucki <koblucki at yahoo.com>
> To: "twisted-python at twistedmatrix.com" <twisted- python at twistedmatrix.com>
> Sent: Monday, November 25, 2013 11:27 AM
> Subject: IMAP4 Proxy to add headers and modify body of an incoming message
> 
> Hello,
> I am trying to write an IMAP proxy to modify headers and the body of an incoming message using twisted.  I am new to python and twisted so maybe this is why I either picked the wrong route or don't have the skills to get through some issues and I'm hoping that some you fine list members can point me in the right direction.
> 
> I started by using the IMAP4Client and IMAP4Server to do the proxying. However, I realized that in certain cases, the IMAP4Server requires synchronous results but since I need to do an async call using the client the handling is not working properly.  I ran into this when implementing getFlags() in the IMessage and I am not sure how I can get out of this short of changing the IMAP4Server code to handle Deferreds.
> 
> Am I on the right track?  Is imap4 lib the right tool for this job?  If so, is modifying IMAP4Server to handle Deferreds the right thing to do? If not, what would you recommend?

Sounds like you diagnosed the problem correctly.  IMAP4Server needs to handle Deferreds here and doesn't currently.

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131127/d564bbf5/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Nov 28 00:34:08 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 27 Nov 2013 23:34:08 -0800
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of
	an incoming message
In-Reply-To: <1385606353.19825.YahooMailNeo@web181604.mail.ne1.yahoo.com>
References: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>
 <20131128011810.6892.1184824544.divmod.xquotient.36@top>
 <1385606353.19825.YahooMailNeo@web181604.mail.ne1.yahoo.com>
Message-ID: <1E59951F-686C-40B1-A7F3-0529A612B8A2@twistedmatrix.com>


On Nov 27, 2013, at 6:39 PM, Krzysztof Oblucki <koblucki at yahoo.com> wrote:
>>> Am I on the right track?  Is imap4 lib the right tool for this job?  If so, is modifying IMAP4Server to handle Deferreds the right thing to do? If not, what would you recommend?
>> 
>> Sounds like you diagnosed the problem correctly.  IMAP4Server needs to handle Deferreds here and doesn't currently.
> Awesome, that's what I've been trying to do for the past couple of days.  Definitely learning a lot of new things :)

Perhaps you should file a ticket for this?  (Searching for one first, of course, to see if it already exists).

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131127/cb56fca9/attachment-0002.html>

From peter.westlake at pobox.com  Thu Nov 28 08:01:16 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Thu, 28 Nov 2013 15:01:16 +0000
Subject: [Twisted-Python] Could Service.startService return a Deferred?
In-Reply-To: <20131127192018.6892.1747918954.divmod.xquotient.22@top>
References: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
 <20131127171341.6892.508316338.divmod.xquotient.3@top>
 <1385575246.2688.52810605.13D011CA@webmail.messagingengine.com>
 <20131127192018.6892.1747918954.divmod.xquotient.22@top>
Message-ID: <1385650876.9277.53151729.78F55A96@webmail.messagingengine.com>

On Wed, Nov 27, 2013, at 19:20, exarkun at twistedmatrix.com wrote:
> On 06:00 pm, peter.westlake at pobox.com wrote:
... 

> >class Runner(service.Service):
> >    def __init__(self, baton):
> >        self.baton = baton
> >
> >    def startService(self):
> >        print 'startService', self.name, reactor.running
> >        self.baton.addCallback(lambda ignore:deferLater(reactor, 1.0,
> >        self.realStartService))
> >        self.baton.addErrback(report)
> 
> I'd be concerned with the state of `Runner` at this point in the 
> process.
> 
> What happens if the application gets shut down while that `deferLater` 
> is still pending?
> 
> `stopService` has a harder job because it might need to deal with a 
> service that is partially initialized or a service that is completely 
> initialized (and "partially initialized" may cover a multitude of 
> different states depending on the complexity of your service).
> >
...
> 
> What about something like this instead?
> 
>   @implementer(IService)
>   class Runner(object):
>       ...
>       @classmethod
>       def loadFromWhatever(cls, name):
>           return deferLater(reactor, Runner, name)
> 
>       def __init__(self, name):
>           self.name = name
> 
>       def startService(self):
>           self.running = True
>           print 'realStartService', self.name, reactor.running
> 
>   def parent(service):
>       application.setServiceParent(service)
> 
>   loading = Runner.initializeFromWhatever("foo")
>   loading.addCallback(parent)
>   loading.addCallback(lambda ignored: 
> Runner.initializeFromWhatever("bar"))
>   loading.addCallback(parent)
>   loading.addErrback(stopTheReactorOrWhatever)
> 
> The advantage I see of this approach is that a `Runner` never exists in
> the service hierarchy until it is fully initialized, started, and 
> running.
> 
> If a `Runner` is only partially ready and the process shuts down then 
> its `stopService` method isn't called because it's not part of the 
> service hierarchy.

I'll do that, thank you!

Could the documentation for Service say something about which methods
can be called when? For instance, it would never have occurred to me
that
setServiceParent could be called after control had passed out of the
.tac
file and the reactor had started running. I see from the source that it
calls
startService, but this is definitely the sort of non-obvious tip that it
would
be helpful to have written down. Likewise the fact that startService
normally runs before the reactor starts.

Out of interest, was there a reason for not making Runner a subclass
of Service? There are some methods of IService that this version
doesn't implement.

> I could definitely imagine a library to help with this kind of thing. 
> For example, perhaps you want the above encapsulated as:
> 
>   asynchronouslySetUpServices(application, [
>       lambda: Runner.initializeFromWhatever("foo"),
>       lambda: Runner.initialifrFromWhatever("bar")])
> 
> And maybe then you want to add in some logic so that if the application 
> gets shut down while some things are still being initialized then you 
> cancel their Deferred.  Then you have good cleanup support for the 
> uninitialized case - without complicating `stopService` (the cleanup 
> logic is isolated in the implementation of Deferred cancellation where 
> it belongs - eg, with this `deferLater`-based asynchronousness it's 
> alreay present since deferLater implements cancellation already).

I'll add it to my list of things to do one of these years :-)
Would you like to put in a ticket with a spec?

Thanks for the help,

Peter.



From dustin at v.igoro.us  Thu Nov 28 08:25:37 2013
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Thu, 28 Nov 2013 10:25:37 -0500
Subject: [Twisted-Python] Could Service.startService return a Deferred?
In-Reply-To: <1385650876.9277.53151729.78F55A96@webmail.messagingengine.com>
References: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
 <20131127171341.6892.508316338.divmod.xquotient.3@top>
 <1385575246.2688.52810605.13D011CA@webmail.messagingengine.com>
 <20131127192018.6892.1747918954.divmod.xquotient.22@top>
 <1385650876.9277.53151729.78F55A96@webmail.messagingengine.com>
Message-ID: <CAJtE5vQ1v-CXYCzZSWBFSxUnY-KYGndc87n3PygRU4NiAHTRhw@mail.gmail.com>

This is kind of an ongoing bugaboo for me, too.  Buildbot uses
services *heavily*, and at runtime (to support reconfigs, etc.).
We've had to work around issues like stop being called before
asynchronous starts complete using DeferredLocks and other such fun.

I filed a bug with some of my issues -
https://twistedmatrix.com/trac/ticket/6813

It'd be great to fix some of this in the existing implementation, but
#4366 seems to demonstrate that this is impossible without breaking
compatibility.  So, maybe we need to introduce a new service hierarchy
-- perhaps with some ability to use the existing Service classes as
child services.

I'd be interested to hear thoughts on the matter.

Dustin



From peter.westlake at pobox.com  Thu Nov 28 09:39:40 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Thu, 28 Nov 2013 16:39:40 +0000
Subject: [Twisted-Python] Could Service.startService return a Deferred?
In-Reply-To: <20131127192018.6892.1747918954.divmod.xquotient.22@top>
References: <1385564310.31251.52740113.608E9A45@webmail.messagingengine.com>
 <20131127171341.6892.508316338.divmod.xquotient.3@top>
 <1385575246.2688.52810605.13D011CA@webmail.messagingengine.com>
 <20131127192018.6892.1747918954.divmod.xquotient.22@top>
Message-ID: <1385656780.17501.53203789.460B4572@webmail.messagingengine.com>

On Wed, Nov 27, 2013, at 19:20, exarkun at twistedmatrix.com wrote:
... 
> What about something like this instead?
> 
>   @implementer(IService)
>   class Runner(object):
>       ...
>       @classmethod
>       def loadFromWhatever(cls, name):
>           return deferLater(reactor, Runner, name)
> 
>       def __init__(self, name):
>           self.name = name
> 
>       def startService(self):
>           self.running = True
>           print 'realStartService', self.name, reactor.running
> 
>   def parent(service):
>       application.setServiceParent(service)

A small detail: should this be service.setServiceParent(application)?

Peter.
 
>   loading = Runner.initializeFromWhatever("foo")
>   loading.addCallback(parent)
>   loading.addCallback(lambda ignored: 
> Runner.initializeFromWhatever("bar"))
>   loading.addCallback(parent)
>   loading.addErrback(stopTheReactorOrWhatever)
> 
> The advantage I see of this approach is that a `Runner` never exists in
> the service hierarchy until it is fully initialized, started, and 
> running.
> 
> If a `Runner` is only partially ready and the process shuts down then 
> its `stopService` method isn't called because it's not part of the 
> service hierarchy.
> 
> I could definitely imagine a library to help with this kind of thing. 
> For example, perhaps you want the above encapsulated as:
> 
>   asynchronouslySetUpServices(application, [
>       lambda: Runner.initializeFromWhatever("foo"),
>       lambda: Runner.initialifrFromWhatever("bar")])
> 
> And maybe then you want to add in some logic so that if the application 
> gets shut down while some things are still being initialized then you 
> cancel their Deferred.  Then you have good cleanup support for the 
> uninitialized case - without complicating `stopService` (the cleanup 
> logic is isolated in the implementation of Deferred cancellation where 
> it belongs - eg, with this `deferLater`-based asynchronousness it's 
> alreay present since deferLater implements cancellation already).
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From koblucki at yahoo.com  Thu Nov 28 13:10:43 2013
From: koblucki at yahoo.com (Krzysztof Oblucki)
Date: Thu, 28 Nov 2013 12:10:43 -0800
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of
	an incoming message
In-Reply-To: <1E59951F-686C-40B1-A7F3-0529A612B8A2@twistedmatrix.com>
References: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>
 <20131128011810.6892.1184824544.divmod.xquotient.36@top>
 <1385606353.19825.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1E59951F-686C-40B1-A7F3-0529A612B8A2@twistedmatrix.com>
Message-ID: <A0CE1AC5-9FF2-44B4-A03B-F9C4A2AFB772@yahoo.com>

I will do that. I'm struggling with doing this myself so far because of my noobness but making small progress every day.

Sent from my BatPhone

> On Nov 27, 2013, at 23:34, Glyph <glyph at twistedmatrix.com> wrote:
> 
> 
> On Nov 27, 2013, at 6:39 PM, Krzysztof Oblucki <koblucki at yahoo.com> wrote:
>>>> Am I on the right track?  Is imap4 lib the right tool for this job?  If so, is modifying IMAP4Server to handle Deferreds the right thing to do? If not, what would you recommend?
>>> 
>>> Sounds like you diagnosed the problem correctly.  IMAP4Server needs to handle Deferreds here and doesn't currently.
>> Awesome, that's what I've been trying to do for the past couple of days.  Definitely learning a lot of new things :)
> 
> Perhaps you should file a ticket for this?  (Searching for one first, of course, to see if it already exists).
> 
> Thanks,
> 
> -glyph
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131128/980205de/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Nov 28 21:07:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 28 Nov 2013 20:07:31 -0800
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of
	an incoming message
In-Reply-To: <A0CE1AC5-9FF2-44B4-A03B-F9C4A2AFB772@yahoo.com>
References: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>
 <20131128011810.6892.1184824544.divmod.xquotient.36@top>
 <1385606353.19825.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1E59951F-686C-40B1-A7F3-0529A612B8A2@twistedmatrix.com>
 <A0CE1AC5-9FF2-44B4-A03B-F9C4A2AFB772@yahoo.com>
Message-ID: <D11179D4-AE70-4B2D-8EA4-33BD07BDE707@twistedmatrix.com>

On Nov 28, 2013, at 12:10 PM, Krzysztof Oblucki <koblucki at yahoo.com> wrote:

> I will do that. I'm struggling with doing this myself so far because of my noobness but making small progress every day.

Feel free to ask here for any help you might need :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131128/68ae3d01/attachment-0002.html>

From koblucki at yahoo.com  Thu Nov 28 23:44:37 2013
From: koblucki at yahoo.com (Krzysztof Oblucki)
Date: Thu, 28 Nov 2013 22:44:37 -0800
Subject: [Twisted-Python] IMAP4 Proxy to add headers and modify body of
	an incoming message
In-Reply-To: <D11179D4-AE70-4B2D-8EA4-33BD07BDE707@twistedmatrix.com>
References: <1385407662.75252.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1385596960.22519.YahooMailNeo@web181605.mail.ne1.yahoo.com>
 <20131128011810.6892.1184824544.divmod.xquotient.36@top>
 <1385606353.19825.YahooMailNeo@web181604.mail.ne1.yahoo.com>
 <1E59951F-686C-40B1-A7F3-0529A612B8A2@twistedmatrix.com>
 <A0CE1AC5-9FF2-44B4-A03B-F9C4A2AFB772@yahoo.com>
 <D11179D4-AE70-4B2D-8EA4-33BD07BDE707@twistedmatrix.com>
Message-ID: <61015005-51A6-4C9C-BEF7-24252050624E@yahoo.com>

It would be great if I could get some pointers as to the correct way of doing it. If I were to start with search_DELETED what would be your recommendation?

Sent from my BatPhone

> On Nov 28, 2013, at 20:07, Glyph <glyph at twistedmatrix.com> wrote:
> 
>> On Nov 28, 2013, at 12:10 PM, Krzysztof Oblucki <koblucki at yahoo.com> wrote:
>> 
>> I will do that. I'm struggling with doing this myself so far because of my noobness but making small progress every day.
> 
> Feel free to ask here for any help you might need :).
> 
> -glyph
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131128/88efe248/attachment-0002.html>

From sank.daniel at gmail.com  Fri Nov 29 23:23:59 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 29 Nov 2013 22:23:59 -0800
Subject: [Twisted-Python] Unpersistable instead of pb.Avatar
Message-ID: <CAKN9TDLgv9Q91u8dnzL8e7eB3mSFKZ=jw1c4whJU9-zOsdHYdw@mail.gmail.com>

If I try to instance a pb.Avatar subclass and send it to a peer
manually, the object that the peer receives is an Unpersistable
instead of a real remote reference to the pb.Avatar. How do I fix this
and actually send out new perspectives to users?

Here's why I want to do this:

Suppose I have a network chess program using perspective broker. When
a user process logs in it receives a remote reference to a
perspective, which is an instance of a pb.Avatar subclass. Suppose
that perspective manages the user's ability to interact with a game
lobby. For example, the perspective may implement perspective_joinGame
allowing the user to partake in a game of chess. This part I know how
to do using the cred system.

Now suppose the user wants to join multiple games of chess
simultaneously. It doesn't make sense to use the same perspective in
both games because then every time the user wanted to announce
intended action we'd have to constantly pass around extra objects to
keep track of which game that perspective is trying to interact with.
A similar problem occurs if the same user wants to play as both
players in a single game. In other words, it would be nice to separate
the responsibilities of the user from those of the "player."

If I'm not thinking about this correctly please advise.

Thank you for your time,
Daniel Sank



