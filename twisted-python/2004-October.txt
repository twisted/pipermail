From iap_yeh at abit.com.tw  Fri Oct  1 05:40:09 2004
From: iap_yeh at abit.com.tw (Iap, Singuan)
Date: Fri, 1 Oct 2004 17:40:09 +0800
Subject: [Twisted-Python] Newbie question: How to reference the "__main__"
In-Reply-To: <414EA83E.7010400@donfu.com>
Message-ID: <JAEIICFHFJDILEEGFIKIIELMCCAA.iap_yeh@abit.com.tw>

Hi,

I starts my daemon (server.py) by
$twistd -noy server.py


In server.py
----------------------------------------
config=Configuration()


In somewhere.py,
----------------------------------------
import __main__
config=__main__.config ### Don't work, since __main__ is twistd, not
server.py
## how do I get the config in server.py?

Thanks.

Iap, Singuan






From simon at hedberg.net  Fri Oct  1 07:26:33 2004
From: simon at hedberg.net (Simon)
Date: Fri, 1 Oct 2004 13:26:33 +0200
Subject: [Twisted-Python] About adodb
Message-ID: <000101c4a7a9$81633290$456271d5@hp>

Dave, thanks for your reply.

>I'm not too familiar with ADOdb, what are the benefits?
Quoting the author:
"You might ask why Python needs a database abstraction library when
Python provides the official DB API. Unfortunately the DB API does not
encapsulate differences in the database implementations. For example, to
select a limited number of rows, say 10 rows, you would have to use very
different SQL for different databases. [...]
These differences are handled by ADOdb (using SelectLimit), but not by
the Python DB API. Other important database differences transparently
handled by ADOdb include date-formating, associative arrays (records as
dictionaries) and LOB-handling."

>By rewrite, do you mean that the new version only uses
>ADOdb, or have you added ADOdb as a supported back-end?
ADOdb adds a level of abstraction on top of db-api. I wrote a version of
ConnectionPool that uses adodb connections instead of the regular dbapi
connections and cursors. If this is something python developers find
useful, i don't know. I guess it isn't as necessary as in php (which i'm
switching from) where no common db-api exists, but I still think it's
quite a nice thing.

>sqlreflector and row could definitely use a reworking.
>I don't think they are used much. I think people mainly
>use adbapi and write their own object mapping system.
>What sort of things did you have in mind?
Well mainly validating the data assigned to a rowobject so one can be
sure it makes it into the db (checking data length, proper dates etc).
But if row and sqlreflector isn't used I'll probably build something new
instead of going through that code. I'm thinking of using the db_row
module (http://opensource.theopalgroup.com) which seems to offer
efficient row data access.

/Simon
(STemplar)




From itamar at itamarst.org  Fri Oct  1 11:04:53 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 01 Oct 2004 11:04:53 -0400
Subject: [Twisted-Python] Newbie question: How to reference the "__main__"
In-Reply-To: <JAEIICFHFJDILEEGFIKIIELMCCAA.iap_yeh@abit.com.tw>
References: <JAEIICFHFJDILEEGFIKIIELMCCAA.iap_yeh@abit.com.tw>
Message-ID: <1096643092.25488.49.camel@sheriffpony>

On Fri, 2004-10-01 at 05:40, Iap, Singuan wrote:

> In server.py
> ----------------------------------------
> config=Configuration()
somewhere.MyObject.addConfig(config)

and then MyObject can access the config.




From maoy at cis.upenn.edu  Fri Oct  1 11:32:36 2004
From: maoy at cis.upenn.edu (Yun Mao)
Date: Fri, 1 Oct 2004 11:32:36 -0400 (EDT)
Subject: [Twisted-Python] Newbie question: How to reference the "__main__"
In-Reply-To: <1096643092.25488.49.camel@sheriffpony>
References: <JAEIICFHFJDILEEGFIKIIELMCCAA.iap_yeh@abit.com.tw>
	<1096643092.25488.49.camel@sheriffpony>
Message-ID: <Pine.LNX.4.56.0410011130570.5567@klondike.cis.upenn.edu>

but the sys.argv[1:] is going to be twistd's argument, including
"-noy","xxx.tac", etc. right? it isn't exactly what he wanted, is it?

Yun


On Fri, 1 Oct 2004, Itamar Shtull-Trauring wrote:

> On Fri, 2004-10-01 at 05:40, Iap, Singuan wrote:
>
> > In server.py
> > ----------------------------------------
> > config=Configuration()
> somewhere.MyObject.addConfig(config)
>
> and then MyObject can access the config.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From itamar at itamarst.org  Fri Oct  1 11:59:51 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 01 Oct 2004 11:59:51 -0400
Subject: [Twisted-Python] ANN: Fusion 0.1, C++ / Twisted integration
Message-ID: <1096646391.25487.62.camel@sheriffpony>

This allows you to write protocols for UDP, multicast and TCP in C++. In
theory this can make the protocol much faster since it's easier to
prevent data copying etc.. The TCP writing support is not efficient yet,
though, as it still uses Twisted's current buffering system.

Tested with 1.3.0 and 2.0 from trunk. No API stability guaranteed.

http://itamarst.org/software/fusion-0.1.tar.gz or
sandbox/itamar/cppreactor in Twisted SVN.

Disclaimer: if you want to make your Twisted code go faster this is NOT
the first thing you should try. Nor the second, third or fourth.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From itamar at itamarst.org  Fri Oct  1 13:10:06 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 01 Oct 2004 13:10:06 -0400
Subject: [Twisted-Python] ANN: Fusion 0.1, C++ / Twisted integration
In-Reply-To: <1096646391.25487.62.camel@sheriffpony>
References: <1096646391.25487.62.camel@sheriffpony>
Message-ID: <1096650605.25486.64.camel@sheriffpony>

I should also mention that development has been funded by my employer,
ITA Software (http://itasoftware.com). We're hiring :)




From mfenniak at pobox.com  Fri Oct  1 14:43:30 2004
From: mfenniak at pobox.com (Mathieu Fenniak)
Date: Fri, 1 Oct 2004 12:43:30 -0600
Subject: [Twisted-Python] PATCH: twisted.web.client Basic/Digest
	Authentication
Message-ID: <CA3316B4-13D9-11D9-97E5-000D9335B826@pobox.com>

The attached patch adds support for HTTP authentication to 
twisted.web.client.  It supports both basic and digest authentication.  
This patch adds a new module, twisted.web.auth, which I hope to expand 
in the future to support digest server-side authentication.  A new 
class is also added to twisted.web.error, which passes on the 
WWW-Authenticate headers such that authentication could be handled 
externally.

I have never contributed before to Twisted, so I'd appreciate feedback 
on this patch.  It works, and is pretty clean code, but I don't know if 
there are some practices I might be breaking without being aware.

This patch is based on repository v.11878.

--
Mathieu Fenniak <mfenniak at pobox.com>
http://stompstompstomp.com/

-------------- next part --------------
A non-text attachment was scrubbed...
Name: twisted-client-auth.diff
Type: application/octet-stream
Size: 10547 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20041001/04d76272/attachment.obj 

From cce at clarkevans.com  Fri Oct  1 15:18:01 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 1 Oct 2004 15:18:01 -0400
Subject: [Twisted-Python] PATCH: twisted.web.client Basic/Digest
	Authentication
In-Reply-To: <CA3316B4-13D9-11D9-97E5-000D9335B826@pobox.com>
References: <CA3316B4-13D9-11D9-97E5-000D9335B826@pobox.com>
Message-ID: <20041001191800.GA77957@prometheusresearch.com>

Hello Mathieu,

This sounds like a wonderful patch.  I've had to use libcurl
and urllib2 in order to use digest authentication. I have
a few comments:

 - For any patch with substantial functionality to be accepted,
   it must be accompanied with corresponding test suite. 
   
 - It was suggested on IRC that the digest algorithms should go
   into twisted.cred so that other protocols (such as SMTP)
   could also use these authentication mechanism.
   
 - I've written server-side digest authorization sandbox/cce/digest.py
   but I do admit, it's probably pretty ugly.

Cheers!

Clark


On Fri, Oct 01, 2004 at 12:43:30PM -0600, Mathieu Fenniak wrote:
| The attached patch adds support for HTTP authentication to 
| twisted.web.client.  It supports both basic and digest authentication.  
| This patch adds a new module, twisted.web.auth, which I hope to expand 
| in the future to support digest server-side authentication.  A new 
| class is also added to twisted.web.error, which passes on the 
| WWW-Authenticate headers such that authentication could be handled 
| externally.
| 
| I have never contributed before to Twisted, so I'd appreciate feedback 
| on this patch.  It works, and is pretty clean code, but I don't know if 
| there are some practices I might be breaking without being aware.
| 
| This patch is based on repository v.11878.
| 
| --
| Mathieu Fenniak <mfenniak at pobox.com>
| http://stompstompstomp.com/
| 


| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
Clark C. Evans                      Prometheus Research, LLC.
                                    http://www.prometheusresearch.com/
    o                               office: +1.203.777.2550 
  ~/ ,                              mobile: +1.203.444.0557 
 //
((   Prometheus Research: Transforming Data Into Knowledge
 \\  ,
   \/    - Research Exchange Database
   /\    - Survey & Assessment Technologies
   ` \   - Software Tools for Researchers
    ~ *



From dave at krondo.com  Fri Oct  1 23:01:26 2004
From: dave at krondo.com (Dave Peticolas)
Date: Fri, 01 Oct 2004 20:01:26 -0700
Subject: [Twisted-Python] About adodb
In-Reply-To: <000101c4a7a9$81633290$456271d5@hp>
References: <000101c4a7a9$81633290$456271d5@hp>
Message-ID: <1096686086.18123.67.camel@oneiros>

On Fri, 2004-10-01 at 04:26, Simon wrote:
> Dave, thanks for your reply.
> 
> >I'm not too familiar with ADOdb, what are the benefits?
> Quoting the author:
> "You might ask why Python needs a database abstraction library when
> Python provides the official DB API. Unfortunately the DB API does not
> encapsulate differences in the database implementations. For example, to
> select a limited number of rows, say 10 rows, you would have to use very
> different SQL for different databases. [...]
> These differences are handled by ADOdb (using SelectLimit), but not by
> the Python DB API. Other important database differences transparently
> handled by ADOdb include date-formating, associative arrays (records as
> dictionaries) and LOB-handling."

That sound useful. Does the python adodb implementation allow you to
use datetime objects transparently?


> >By rewrite, do you mean that the new version only uses
> >ADOdb, or have you added ADOdb as a supported back-end?
> ADOdb adds a level of abstraction on top of db-api. I wrote a version of
> ConnectionPool that uses adodb connections instead of the regular dbapi
> connections and cursors. If this is something python developers find
> useful, i don't know. I guess it isn't as necessary as in php (which i'm
> switching from) where no common db-api exists, but I still think it's
> quite a nice thing.

So this would implement a super-set of the adbapi interface, then?
I think this would probably be a useful addition.


> >sqlreflector and row could definitely use a reworking.
> >I don't think they are used much. I think people mainly
> >use adbapi and write their own object mapping system.
> >What sort of things did you have in mind?
> Well mainly validating the data assigned to a rowobject so one can be
> sure it makes it into the db (checking data length, proper dates etc).
> But if row and sqlreflector isn't used I'll probably build something new
> instead of going through that code. I'm thinking of using the db_row
> module (http://opensource.theopalgroup.com) which seems to offer
> efficient row data access.

db_row has already been mentioned on this list as a nice module.
But wouldn't the associative array aspects of adodb eliminate the need
for db_row?

dave





From simon at hedberg.net  Sat Oct  2 05:35:37 2004
From: simon at hedberg.net (Simon)
Date: Sat, 2 Oct 2004 11:35:37 +0200
Subject: [Twisted-Python] About adodb
In-Reply-To: <1096686086.18123.67.camel@oneiros>
Message-ID: <000801c4a863$2c69b3d0$456271d5@hp>

>db_row has already been mentioned on this list as a nice module. 
>But wouldn't the associative array aspects of adodb eliminate the need
for db_row?

Yep, functionwise it would be pretty much the same. db_row however has
the advantage of using a different storage mechanism eliminating the
need for a dictionary in each object (using __slots__). If you load a
lot of objects that should be an advantage. My idea is to subclass
db_row to add some data validation routines. Perhaps we could add some
foreignkey functionality also to make it a worthy replacement of
RowObject.

/Simon




From p.mayers at imperial.ac.uk  Sun Oct  3 09:26:15 2004
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 03 Oct 2004 14:26:15 +0100
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <1096230335.19062.22.camel@sheriffpony>
References: <41570B4E.9090109@imperial.ac.uk>	<1096224850.19065.17.camel@sheriffpony>	<41571A05.7050508@imperial.ac.uk>
	<1096230335.19062.22.camel@sheriffpony>
Message-ID: <415FFDF7.50503@imperial.ac.uk>

Itamar Shtull-Trauring wrote:

> 
> 
>>I'm also slightly concerned about the number of function calls involved 
>>in jumping in and out of the reactor that many times a second (several 
>>thousand, if I can get it to go as fast as my previous code) given how 
>>expensive they are under Python. It would certainly be quicker to 
>>implement this inside the reactor.mainLoop.
> 
> 
> Just have a single reactor.callLater(0, f), and f() then calls all the
> functions you want done in that iteration.

Ok, just a quick note to people - I solved this as suggested, however 
reactor.callLater(0, func) does not work; because 0 always means *now*, 
you get the queuing problem:

class SNMP(protocol.DatagramProtocol):
     def datagramReceived(self, data, addr):
         pdu = self.decode(data)
         self.timeouts.remove(pdu.deferred)
         self.queue(pdu.deferred.callback, (pdu,))

     def queue(self, func, pargs):
         if not self.calls:
             # Schedule a receive at some later date
             reactor.callLater(0.001, self.dequeue)
         self.calls.append((func, pargs))

     def dequeue(self):
         if not self.calls:
             return
         func, pargs = self.calls.pop(0)
         # The problem is here - this function will almost certainly
         # be a protocol action that will generate another transmit PDU
         # With many clients, the many transmits can overflow the input
         # queue while we're spinning inside code
         func(*pargs)
         if self.calls:
             # To avoid the problem, wait "delta" (some small number)
             # rather than zero; this will ensure a select() happens
             # before the callLater
             reactor.callLater(0.001, self.dequeue)

class Agent:
     def __init__(self, host, proto):
         self.proto = proto
     def start(self):
         d = self.proto.query(self.host, 'get', oid1, oid2)
         d.addCallbacks(self.step2, self.error)
     def step2(self, pdu):
         # Do some stuff
         d = self.proto.query(self.host, 'get', self.whatnow[pdu])
         d.addCallbacks(self.step3, self.error)

proto = SNMP()
for hostname in sys.argv[1:]:
     a = Agent(hostname, proto)
     # Start up one at a time, to avoid startup surge
     proto.queue(a.start, None)
from twisted.internet import reactor
reactor.run()

I hope I'm explaining what's going on here - but if not, don't worry, 
the problem is more or less solved for me, thanks for the assistance. 
The only minor remaining niggle is that the static 0.001 value to 
callLater limits my theoretical max throughput to 1000 queries/sec. The 
only way to do without that parameter would be to execute a select() 
inside every function call in runUntilCurrent I think. As it happens, 
1000/sec is more than the box can do anyway, so it's not a problem at 
the moment!



From itamar at itamarst.org  Sun Oct  3 10:28:27 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 03 Oct 2004 10:28:27 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <415FFDF7.50503@imperial.ac.uk>
References: <41570B4E.9090109@imperial.ac.uk>
	<1096224850.19065.17.camel@sheriffpony>	<41571A05.7050508@imperial.ac.uk>
	<1096230335.19062.22.camel@sheriffpony> <415FFDF7.50503@imperial.ac.uk>
Message-ID: <1096813707.29728.0.camel@sheriffpony>

callLater(0, f) does not mean 'now', it means 'next iteration'.




From exarkun at divmod.com  Sun Oct  3 12:08:22 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sun, 03 Oct 2004 16:08:22 GMT
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <1096813707.29728.0.camel@sheriffpony>
Message-ID: <20041003160822.29723.1429913293.divmod.quotient.9325@ohm>

On Sun, 03 Oct 2004 10:28:27 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>callLater(0, f) does not mean 'now', it means 'next iteration'.
> 
> 

  But as you know, due to an implementation bug, it _behaves_ as if it meant "now" when called from a function that is being called from a callLater().

  Hopefully someone will get 'round to fixing this before 2.0.

  Jp



From itamar at itamarst.org  Sun Oct  3 15:54:03 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 03 Oct 2004 15:54:03 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <20041003160822.29723.1429913293.divmod.quotient.9325@ohm>
References: <20041003160822.29723.1429913293.divmod.quotient.9325@ohm>
Message-ID: <1096833243.29735.2.camel@sheriffpony>

!

Do we have an open issue for this?




From foom at fuhm.net  Sun Oct  3 16:12:42 2004
From: foom at fuhm.net (James Y Knight)
Date: Sun, 3 Oct 2004 16:12:42 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <1096833243.29735.2.camel@sheriffpony>
References: <20041003160822.29723.1429913293.divmod.quotient.9325@ohm>
	<1096833243.29735.2.camel@sheriffpony>
Message-ID: <94DF2694-1578-11D9-B112-000A95A50FB2@fuhm.net>

On Oct 3, 2004, at 3:54 PM, Itamar Shtull-Trauring wrote:
> Do we have an open issue for this?

I believe it's fixed by http://www.twistedmatrix.com/bugs/issue707, 
although that issue isn't really about this bug.

James




From foom at fuhm.net  Sun Oct  3 16:20:30 2004
From: foom at fuhm.net (James Y Knight)
Date: Sun, 3 Oct 2004 16:20:30 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <AC3AAF7A-1579-11D9-B112-000A95A50FB2@fuhm.net>

Bug summary
______________________
Since 2004-09-25 17:50:20.840000:
   Bugs opened: 3   Bugs closed: 12   Total open bugs: 302 (-9)

New / Reopened Bugs
______________________
twisted/xish/domish.py bug breaks jabber protocol implementation  (12 
hours ago)
        http://www.twistedmatrix.com/bugs/issue734 opened by doko

twisted's SIGCHLD handler breaks popen.  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue733 opened by jknight

test_journal.Service defines addtime twice in the same scope and uses 
undefined name "journal"  (7 days ago)
CLOSED http://www.twistedmatrix.com/bugs/issue732 opened by exarkun

Bugs Closed
______________________
t.p.c.MetaInterface.__getattr__  causes infinite recursion  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue730 opened by slyphon

test_journal.Service defines addtime twice in the same scope and uses 
undefined name "journal"  (7 days ago)
        http://www.twistedmatrix.com/bugs/issue732 opened by exarkun

udp.Port and udp.ConnectedPort use isinstance  (2 months ago)
        http://www.twistedmatrix.com/bugs/issue651 opened by burris

[PATCH] twisted.protocols.portforward has a couple of problems.  (7 
months ago)
        http://www.twistedmatrix.com/bugs/issue527 opened by Omnifarious

[MAIL] SMTPSenderFactory has unintended side effect  (7 months ago)
        http://www.twistedmatrix.com/bugs/issue540 opened by mjs

twistd -y fails with dos-style newlines  (5 months ago)
        http://www.twistedmatrix.com/bugs/issue595 opened by phed

twisted.internet.{tcp,udp}.Port lie when port == 0  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue725 opened by anthony

twisted.names.dns.Record_NULL is stupid  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue729 opened by anthony

ReconnectingClientFactory can fail to reconnect on connection timeouts  
(2 weeks ago)
        http://www.twistedmatrix.com/bugs/issue722 opened by exarkun

[CORE] Add process support to default reactor on windows  (5 months ago)
        http://www.twistedmatrix.com/bugs/issue598 opened by itamarst

Persistant Adapters at adapter registration time  (6 months ago)
        http://www.twistedmatrix.com/bugs/issue556 opened by ironfroggy

tempfile.mkstemp in twisted.python.compat  (2 weeks ago)
        http://www.twistedmatrix.com/bugs/issue713 opened by yacc




From iap_yeh at abit.com.tw  Sun Oct  3 22:16:54 2004
From: iap_yeh at abit.com.tw (Iap, Singuan)
Date: Mon, 4 Oct 2004 10:16:54 +0800
Subject: [Twisted-Python] Newbie question: How to reference the "__main__"
In-Reply-To: <Pine.LNX.4.56.0410011130570.5567@klondike.cis.upenn.edu>
Message-ID: <JAEIICFHFJDILEEGFIKIKEMBCCAA.iap_yeh@abit.com.tw>

I have a work-around like this:

import __main__
__main__.config=Configuration()

And  access it in other modules by:

import __main__
config=__main__.config

But I don't think that is a good idea.
There must be more simple and extensible way, I guess.

Iap, Singuan


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Yun Mao
Sent: Friday, October 01, 2004 11:33 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] Newbie question: How to reference the
"__main__"


but the sys.argv[1:] is going to be twistd's argument, including
"-noy","xxx.tac", etc. right? it isn't exactly what he wanted, is it?

Yun


On Fri, 1 Oct 2004, Itamar Shtull-Trauring wrote:

> On Fri, 2004-10-01 at 05:40, Iap, Singuan wrote:
>
> > In server.py
> > ----------------------------------------
> > config=Configuration()
> somewhere.MyObject.addConfig(config)
>
> and then MyObject can access the config.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From uwe at oss4u.com  Sun Oct  3 22:29:01 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sun, 3 Oct 2004 19:29:01 -0700
Subject: [Twisted-Python] Newbie question: How to reference the "__main__"
In-Reply-To: <JAEIICFHFJDILEEGFIKIKEMBCCAA.iap_yeh@abit.com.tw>
References: <JAEIICFHFJDILEEGFIKIKEMBCCAA.iap_yeh@abit.com.tw>
Message-ID: <200410031929.01970.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Just use a singleton design for your Configuration class

class Configuration:
	class __impl:
		def __init__(self):
			# do your stuff here
                        #
	

    	__instance = __impl()

    	def __getattr__(self,attr):
     	   return getattr(self.__instance,attr)

    	def __setattr__(self,attr,value):
     	   return setattr(self.__instance, attr, value)
	

whenever you instanciate Configuration the inner __impl instance will always 
be the same. Maybe I missed something above - just look up the singleton 
design in the python cookbook (activestate.com)

Hope that helps

UC


On Sunday 03 October 2004 07:16 pm, Iap, Singuan wrote:
> I have a work-around like this:
>
> import __main__
> __main__.config=Configuration()
>
> And  access it in other modules by:
>
> import __main__
> config=__main__.config
>
> But I don't think that is a good idea.
> There must be more simple and extensible way, I guess.
>
> Iap, Singuan
>
>
> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Yun Mao
> Sent: Friday, October 01, 2004 11:33 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] Newbie question: How to reference the
> "__main__"
>
>
> but the sys.argv[1:] is going to be twistd's argument, including
> "-noy","xxx.tac", etc. right? it isn't exactly what he wanted, is it?
>
> Yun
>
> On Fri, 1 Oct 2004, Itamar Shtull-Trauring wrote:
> > On Fri, 2004-10-01 at 05:40, Iap, Singuan wrote:
> > > In server.py
> > > ----------------------------------------
> > > config=Configuration()
> >
> > somewhere.MyObject.addConfig(config)
> >
> > and then MyObject can access the config.
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

- -- 
	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFBYLVtjqGXBvRToM4RAlLWAKDSfoSU0vgN5WC0jc1R4EWkhCcEtgCg01DW
XdOI9yXBfld26J//pdFjBY0=
=Svl5
-----END PGP SIGNATURE-----




From itamar at itamarst.org  Mon Oct  4 11:36:42 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 04 Oct 2004 11:36:42 -0400
Subject: [Twisted-Python] Proposed change to buffering
Message-ID: <1096904202.30448.17.camel@sheriffpony>

Now that we don't do write-at-once, lists are easier to use. 

Benefits: Allows protocols with many small writes to not have to do
their own buffering (e.g. http, imap4 as currently coded, PB, IRC,
telnet, etc. etc.)

Problems: Bit more overhead for large writes.

There's also a bit of code change in tcp.py for the SSL code.

Index: abstract.py
===================================================================
--- abstract.py	(revision 11908)
+++ abstract.py	(working copy)
@@ -43,7 +43,9 @@
         if not reactor:
             from twisted.internet import reactor
         self.reactor = reactor
-
+        self._tempDataBuffer = [] # will be added to dataBuffer in doWrite
+        self._tempDataLen = 0
+    
     def connectionLost(self, reason):
         """The connection was lost.
 
@@ -81,6 +83,9 @@
         there; a result of 0 implies no write was done, and a result of None
         indicates that a write was done.
         """
+        self.dataBuffer += "".join(self._tempDataBuffer)
+        self._tempDataBuffer = []
+        self._tempDataLen = 0
         # Send as much data as you can.
         if self.offset:
             l = self.writeSomeData(buffer(self.dataBuffer, self.offset))
@@ -131,15 +136,16 @@
         if not self.connected:
             return
         if data:
-            self.dataBuffer = self.dataBuffer + data
+            self._tempDataBuffer.append(data)
+            self._tempDataLen += len(data)
             if self.producer is not None:
-                if len(self.dataBuffer) > self.bufferSize:
+                if len(self.dataBuffer) + self._tempDataLen > self.bufferSize:
                     self.producerPaused = 1
                     self.producer.pauseProducing()
             self.startWriting()
 
     def writeSequence(self, iovec):
-        self.write("".join(iovec))
+        self._tempDataBuffer.extend(iovec)
 
     def loseConnection(self):
         """Close the connection at the next available opportunity.





From itamar at itamarst.org  Mon Oct  4 11:38:46 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 04 Oct 2004 11:38:46 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <415FFDF7.50503@imperial.ac.uk>
References: <41570B4E.9090109@imperial.ac.uk>
	<1096224850.19065.17.camel@sheriffpony>	<41571A05.7050508@imperial.ac.uk>
	<1096230335.19062.22.camel@sheriffpony> <415FFDF7.50503@imperial.ac.uk>
Message-ID: <1096904326.30442.19.camel@sheriffpony>

On Sun, 2004-10-03 at 09:26, Phil Mayers wrote:

> I hope I'm explaining what's going on here - but if not, don't worry, 
> the problem is more or less solved for me, thanks for the assistance. 
> The only minor remaining niggle is that the static 0.001 value to 
> callLater limits my theoretical max throughput to 1000 queries/sec.

Using twisted.internet.task.LoopingCall should allow you higher speeds,
as it's smarter than simply calling callLater repeatedly.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From itamar at itamarst.org  Mon Oct  4 12:04:20 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 04 Oct 2004 12:04:20 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <94DF2694-1578-11D9-B112-000A95A50FB2@fuhm.net>
References: <20041003160822.29723.1429913293.divmod.quotient.9325@ohm>
	<1096833243.29735.2.camel@sheriffpony>
	<94DF2694-1578-11D9-B112-000A95A50FB2@fuhm.net>
Message-ID: <1096905859.30442.43.camel@sheriffpony>

On Sun, 2004-10-03 at 16:12, James Y Knight wrote:

> I believe it's fixed by http://www.twistedmatrix.com/bugs/issue707, 
> although that issue isn't really about this bug.

Have we figured out what to do about heapq on 2.2?




From maoy at cis.upenn.edu  Mon Oct  4 12:24:06 2004
From: maoy at cis.upenn.edu (Yun Mao)
Date: Mon, 4 Oct 2004 12:24:06 -0400 (EDT)
Subject: [Twisted-Python] DHARMA: a project based on twisted python
In-Reply-To: <200410031929.01970.uwe@oss4u.com>
References: <JAEIICFHFJDILEEGFIKIKEMBCCAA.iap_yeh@abit.com.tw>
	<200410031929.01970.uwe@oss4u.com>
Message-ID: <Pine.LNX.4.56.0410041209320.7794@klondike.cis.upenn.edu>

Dear Twisted folks,

I'm very happy to annouce a beta release of DHARMA project. DHARMA
(Distributed Home Agent For Robust Mobile Access) is a research project
focusing on providing robust mobile network connectivity. It creates an
end-to-end session layer on top of transport layer to provide robust
access, transparently mask of unexpected network failures and network
interface change. You can suspend/resume your TCP connection with little
efforts. DHARMA supports legacy TCP applications with proxy technology.
When end-to-end deployment is not available, DHARMA intelligently select
the proxy (Home agent) for you from more than 200 nodes all over the
world to minimize the routing overhead.

The DHARMA core is heavily based on twisted python, and has almost the
same abstraction of TCP operations, such as connectSession, listenSession,
etc. DHARMA also has a Web-based interface which is built on top of Nevow
0.2.

The detailed information is available at http://dharma.cis.upenn.edu

Want to have 200 proxies all over the planet for you? Send us a mail to
get an account for free. :)

Cheers,

Yun




From foom at fuhm.net  Mon Oct  4 13:18:11 2004
From: foom at fuhm.net (James Y Knight)
Date: Mon, 4 Oct 2004 13:18:11 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <1096905859.30442.43.camel@sheriffpony>
References: <20041003160822.29723.1429913293.divmod.quotient.9325@ohm>
	<1096833243.29735.2.camel@sheriffpony>
	<94DF2694-1578-11D9-B112-000A95A50FB2@fuhm.net>
	<1096905859.30442.43.camel@sheriffpony>
Message-ID: <5E2A7C30-1629-11D9-B112-000A95A50FB2@fuhm.net>

On Oct 4, 2004, at 12:04 PM, Itamar Shtull-Trauring wrote:
> On Sun, 2004-10-03 at 16:12, James Y Knight wrote:
>
>> I believe it's fixed by http://www.twistedmatrix.com/bugs/issue707,
>> although that issue isn't really about this bug.
>
> Have we figured out what to do about heapq on 2.2?

Include a copy of it in our compatibility library. See thread 
"Including code under PSF license for backwards compatibility?".

James




From mailinglist at ltsai.com  Tue Oct  5 08:15:29 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Tue, 05 Oct 2004 20:15:29 +0800
Subject: [Twisted-Python] assignKeyAttr in row object
Message-ID: <cju394$16g$1@sea.gmane.org>

Dear all,

What is the assignKeyAttr method used for in a row object? Is it similar 
to a primary key that can be used to identity the instance?


Liming




From lists at garbagedump.com  Tue Oct  5 09:00:36 2004
From: lists at garbagedump.com (C Wegrzyn)
Date: Tue, 05 Oct 2004 13:00:36 +0000
Subject: [Twisted-Python] Documentation?
In-Reply-To: <cju394$16g$1@sea.gmane.org>
References: <cju394$16g$1@sea.gmane.org>
Message-ID: <41629AF4.3020500@garbagedump.com>

Is there any other documentation on using Twisted other than that on the 
Twisted site?

Chuck Wegrzyn




From dave at krondo.com  Tue Oct  5 11:03:19 2004
From: dave at krondo.com (Dave Peticolas)
Date: Tue, 05 Oct 2004 08:03:19 -0700
Subject: [Twisted-Python] About adodb
In-Reply-To: <000801c4a863$2c69b3d0$456271d5@hp>
References: <000801c4a863$2c69b3d0$456271d5@hp>
Message-ID: <1096988598.11401.11.camel@oneiros>

On Sat, 2004-10-02 at 02:35, Simon wrote:
> >db_row has already been mentioned on this list as a nice module. 
> >But wouldn't the associative array aspects of adodb eliminate the need
> for db_row?
> 
> Yep, functionwise it would be pretty much the same. db_row however has
> the advantage of using a different storage mechanism eliminating the
> need for a dictionary in each object (using __slots__). If you load a
> lot of objects that should be an advantage. My idea is to subclass
> db_row to add some data validation routines. Perhaps we could add some
> foreignkey functionality also to make it a worthy replacement of
> RowObject.

That sounds like a good plan. An extension to adbapi to return
db_row objects would be helpful too. There is a patch to do that
now: http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue632
But I think db_row is a better solution. Maybe you could post your
code to that bug?

thanks,
dave





From dave at krondo.com  Tue Oct  5 11:16:12 2004
From: dave at krondo.com (Dave Peticolas)
Date: Tue, 05 Oct 2004 08:16:12 -0700
Subject: [Twisted-Python] assignKeyAttr in row object
In-Reply-To: <cju394$16g$1@sea.gmane.org>
References: <cju394$16g$1@sea.gmane.org>
Message-ID: <1096989372.11401.13.camel@oneiros>

On Tue, 2004-10-05 at 05:15, Tsai Li Ming wrote:
> Dear all,
> 
> What is the assignKeyAttr method used for in a row object? Is it similar 
> to a primary key that can be used to identity the instance?

Yes, assignKeyAttr is used to change the primary key of a row object.

dave





From mailinglist at ltsai.com  Tue Oct  5 11:33:58 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Tue, 05 Oct 2004 23:33:58 +0800
Subject: [Twisted-Python] Re: assignKeyAttr in row object
In-Reply-To: <1096989372.11401.13.camel@oneiros>
References: <cju394$16g$1@sea.gmane.org> <1096989372.11401.13.camel@oneiros>
Message-ID: <cjuetl$571$1@sea.gmane.org>

Dave Peticolas wrote:
> On Tue, 2004-10-05 at 05:15, Tsai Li Ming wrote:
> 
>>Dear all,
>>
>>What is the assignKeyAttr method used for in a row object? Is it similar 
>>to a primary key that can be used to identity the instance?
> 
> 
> Yes, assignKeyAttr is used to change the primary key of a row object.
> 
> dave

Hi Dave,

Is it necessary to use assignKeyAttr? From the source code, it doesn't 
seem to do anything special, except to change the primary key(s)?

def assignKeyAttr(self, attrName, value):
         """Assign to a key attribute.

         This cannot be done through normal means to protect changing
         keys of db objects.
         """
         found = 0
         for keyColumn, type in self.rowKeyColumns:
             if keyColumn == attrName:
                 found = 1
         if not found:
             raise DBError("%s is not a key columns." % attrName)
         self.__dict__[attrName] = value

Alternatively, I could set the primary key manually.
newRoom = RoomRow()
newRoom.roomID = get_unique _id()
#newRoom.assignKeyAttr("roomID", get_unique _id())
reflector.insertRow(newRoom).addCallback(onInsert)

Liming




From mailinglist at ltsai.com  Tue Oct  5 11:54:41 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Tue, 05 Oct 2004 23:54:41 +0800
Subject: [Twisted-Python] Re: assignKeyAttr in row object
In-Reply-To: <cjuetl$571$1@sea.gmane.org>
References: <cju394$16g$1@sea.gmane.org> <1096989372.11401.13.camel@oneiros>
	<cjuetl$571$1@sea.gmane.org>
Message-ID: <cjug4f$8tn$1@sea.gmane.org>

Tsai Li Ming wrote:
> Dave Peticolas wrote:
> 
>> On Tue, 2004-10-05 at 05:15, Tsai Li Ming wrote:
>>
>>> Dear all,
>>>
>>> What is the assignKeyAttr method used for in a row object? Is it 
>>> similar to a primary key that can be used to identity the instance?
>>
>>
>>
>> Yes, assignKeyAttr is used to change the primary key of a row object.
>>
>> dave
> 
> 
> Hi Dave,
> 
> Is it necessary to use assignKeyAttr? From the source code, it doesn't 
> seem to do anything special, except to change the primary key(s)?
> 
> def assignKeyAttr(self, attrName, value):
>         """Assign to a key attribute.
> 
>         This cannot be done through normal means to protect changing
>         keys of db objects.
>         """
>         found = 0
>         for keyColumn, type in self.rowKeyColumns:
>             if keyColumn == attrName:
>                 found = 1
>         if not found:
>             raise DBError("%s is not a key columns." % attrName)
>         self.__dict__[attrName] = value
> 
> Alternatively, I could set the primary key manually.
> newRoom = RoomRow()
> newRoom.roomID = get_unique _id()
> #newRoom.assignKeyAttr("roomID", get_unique _id())
> reflector.insertRow(newRoom).addCallback(onInsert)
> 
> Liming

My mistake. Twisted has the __setattr__ defined so that key values must 
be changed via assignKeyAttr.

Liming




From ibmub80 at yahoo.com  Wed Oct  6 06:28:36 2004
From: ibmub80 at yahoo.com (Ibrahim Mubarak)
Date: Wed, 6 Oct 2004 03:28:36 -0700 (PDT)
Subject: [Twisted-Python] Sending other things than strings in UDP packets
Message-ID: <20041006102836.17467.qmail@web50902.mail.yahoo.com>

Hi,

I am working on a UDP server. I can send and recieve packets with their data in strings with no
problems. However, I was wondering if there is a way to populate the data portion of the packet
with data types other than strings. And to be able to stick a number of values, might be of
different types, together in the same packet.

I looked at PB. It is not what I need. I need a low level control on what I add to the packets I
send and how I can read packets I recieve.

Thanks,
ib

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From andrew-twisted at puzzling.org  Wed Oct  6 07:03:56 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 6 Oct 2004 13:03:56 +0200
Subject: [Twisted-Python] Sending other things than strings in UDP packets
In-Reply-To: <20041006102836.17467.qmail@web50902.mail.yahoo.com>
References: <20041006102836.17467.qmail@web50902.mail.yahoo.com>
Message-ID: <20041006110356.GA5420@frobozz>

On Wed, Oct 06, 2004 at 03:28:36AM -0700, Ibrahim Mubarak wrote:
> Hi,
> 
> I am working on a UDP server. I can send and recieve packets with their data in strings with no
> problems. However, I was wondering if there is a way to populate the data portion of the packet
> with data types other than strings. And to be able to stick a number of values, might be of
> different types, together in the same packet.

UDP is a datagram transport -- it sends packets of some number of bytes with
no guarantees of order or even delivery, beyond that if a packet is
delivered, it will be delivered whole.  All it knows about the payload of
those packets is that they contain bytes.

What those bytes represent is entirely up to the protocol author.  You can
use them to represent ascii strings, unicode characters, a series of 32-bit
integers, or a combination of anything like you like, so long as you can
work out how to encode it as bytes at the sender's end, and decode it at the
receiver's end.  The 'struct' module in the Python standard library can help
a lot here:
    http://docs.python.org/lib/module-struct.html

> I looked at PB. It is not what I need. I need a low level control on what I add to the packets I
> send and how I can read packets I recieve.

You're right.  PB is a high-level remote object protocol built on TCP.
However, its jelly and banana layers do demonstrate one (moderately complex,
but flexible) approach to serialising arbitrary objects to bytes and back.
It's almost certainly much more than you need for serialising data in UDP
packets, though.

-Andrew.




From jritter at bektel.com  Wed Oct  6 13:23:56 2004
From: jritter at bektel.com (Joshua Ritter)
Date: Wed, 6 Oct 2004 12:23:56 -0500
Subject: [Twisted-Python] Using wxreactor on Windows
Message-ID: <000b01c4abc9$42b45ff0$0300000a@spooge>

On Windows, I was having a problem with my wxreactor application
intermittently freezing on initialization.  It was also taking a long time
to exit.

wxdemo.py doesn't exhibit the problem at startup, most likely due to the
simplicity of the GUI.  The demo does however exhibit the exit problem.

What I did to alleviate both problems was to move the timer creation and
starting code:

class MoMWorldServer(wx.App):
    def OnInit(self):
        #SNIP
        wx.EVT_IDLE(self,self.OnFirstIdle)

    def OnFirstIdle(self,evt):
        #We catch the first idle message and use it to kick start
        #the twisted reactor, this avoids a possible deadlock, at least on
Windows, gulp
        print "Starting Network Service"

        wx.EVT_IDLE(self,None) #remove handler

        #create the timer and start it
        reactor.timer = wxreactor.ReactorTimer(reactor)
        reactor.timer.Start(1)

For the exiting problem, I stop the timer on the close event to the main
frame of the application:

class MainFrame(wx.Frame):
    def __init__(self, parent, id, title):
        #SNIP
        wx.EVT_CLOSE(self,self.OnClose)

      def OnClose(self,evt):
        evt.Skip()
        #stop the timer here
        reactor.timer.Stop()

-Josh Ritter
Technical Director
http://www.prairiegames.com








From andrea at cpushare.com  Wed Oct  6 15:24:54 2004
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed, 6 Oct 2004 21:24:54 +0200
Subject: [Twisted-Python] epoll and other questions
Message-ID: <20041006192454.GA29178@dualathlon.random>

Is there any plan to use epoll instead of poll to make twisted scalabile
with hundred thousand simultanous sockets connected?

I'm evaluating if to use twisted or C/C++ for my cpushare.com server
side. I'd expect network to be the main bottleneck in the short term,
and so I feel safe at spending extra cycles in userspace (at least in
the short term), but even in the short it should at least handle hundred
thousand tcp connections, and so I'm really scared about poll. I think
poll would be the biggest showstopper, and that's why I'm asking to make
twisted use epoll. I assume my application would require no change, so I
can start developing with current twisted, I can test it with poll, and
then later fix the internals when the slowdown becomes noticeable.  Right?

I understand there's no limitation on the number of sockets
simultanously open, I just need to use ulimit to boost the limit of fds.

A slightly separated issue: I assume it's best for me not to do any
blocking I/O in the main network server handling the 100k connections and
to create a secondary internal server communicating again through tcp/ip
(loopback device) with the primary server to do the real blocking I/O.
Is this correct? Best would be to use asynchronous I/O for the IO, but I
think using a second process will be a lot simpler in practice since I
don't need bulk I/O performance (I only need to avoid blocking). I only
want to keep the network pipeline full even when some disk-read is
happening. Best would be to use threading (or shared memory with
MAP_SHARED in tmpfs), but it seems twisted is not mature enough for
threading and shared memory communication using futex, right?  If I
would write it in C I could probably get various performance bits
faster but I doubt the time spent on those bits would payoff
significantly, opinions? 

Another thing I plan doing is to ship the public key (matching the
private key stored only on the server) on the client source tarball,
this way as far as people downloaded the right tarball, they will be
able to securely connect to the server since they will be able to check
the signature. Is there any example of this idea (public key stored in a
file in the client package) available somewhere?

thank you!

PS. if somebody has some spare time and wants to have a look at the
python _client_ code downloadable at www.cpushare.com/download.php and
tell me if it's decent code and if I interfaced correctly between
twisted and pyqt that's welcome. I'm at the point that I've to open up
the connections from the QT event handlers etc.. I still have some
unsolved issue on the QT side (like error windows instead of using
sys.stderr and disabling one side of the tab when the other is running),
but those are low priority at the moment, the GUI design was
strightforward and the real big issues will start now in the network
protocol implementation with twisted.



From tv at twistedmatrix.com  Wed Oct  6 16:02:27 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 06 Oct 2004 23:02:27 +0300
Subject: [Twisted-Python] epoll and other questions
In-Reply-To: <20041006192454.GA29178@dualathlon.random>
References: <20041006192454.GA29178@dualathlon.random>
Message-ID: <41644F53.3010008@twistedmatrix.com>

Andrea Arcangeli wrote:
> Is there any plan to use epoll instead of poll to make twisted
> scalabile with hundred thousand simultanous sockets connected?

There has been some work (I personally wrote a partial epoll python
library at the time epoll was very new). I think the progress stopped
then because of epoll API instability; now that epoll is no longer a
moving target, someone should get back on the case.

> twisted use epoll. I assume my application would require no change,
> so I can start developing with current twisted, I can test it with
> poll, and then later fix the internals when the slowdown becomes
> noticeable.  Right?

Yes. All the different reactors implement the same interface.

Also, notice that the default reactor most likely uses select, not poll:

$ python -c 'from twisted.internet import reactor; print reactor'
<twisted.internet.default.SelectReactor instance at 0x401fb16c>
$ python -c 'from twisted.internet import pollreactor; \
  pollreactor.install(); from twisted.internet import reactor; \
  print reactor'
<twisted.internet.pollreactor.PollReactor instance at 0x401f33ec>

> I understand there's no limitation on the number of sockets 
> simultanously open, I just need to use ulimit to boost the limit of
> fds.

My gut feeling is you'll either hit an OS limit or sys.maxint,
and the latter is pretty huge. Haven't looked at the details.

> A slightly separated issue: I assume it's best for me not to do any 
> blocking I/O in the main network server handling the 100k connections
> and to create a secondary internal server communicating again through
> tcp/ip (loopback device) with the primary server to do the real
> blocking I/O. Is this correct? Best would be to use asynchronous I/O
> for the IO, but I think using a second process will be a lot simpler
> in practice since I don't need bulk I/O performance (I only need to
> avoid blocking). I only want to keep the network pipeline full even
> when some disk-read is happening. Best would be to use threading (or
> shared memory with MAP_SHARED in tmpfs), but it seems twisted is not
> mature enough for threading and shared memory communication using
> futex, right?  If I would write it in C I could probably get various
> performance bits faster but I doubt the time spent on those bits
> would payoff significantly, opinions?

Well, there's nothing Twisted- or even Python-specific in that.
The solution probably depends heavily on your dataset size, access
patterns, and available RAM. Some people advocate heavy RAM caching.
Sendfile might be the solution, but I don't think there's any
integration of sendfile with python, far less with twisted.

Your plan on isolating disk IO to separate process(es) sounds quite
sane. Your master process could receive the file data from the IO
workers in blocks via a shared mmap, to avoid passing it through a
socket (even if the socket was a local TCP connection or UNIX domain).
Don't know if that optimization is worth it; I would delay writing
any extra code until the problem actually shows up.

Note that python threading is very likely _not_ what you want;
the threads synchronize in the interpreter level quite a lot.

Sadly, not even http://www.kegel.com/c10k.html (which is normally
_the_ resource for things like this) talks that much about disk IO.

> Another thing I plan doing is to ship the public key (matching the 
> private key stored only on the server) on the client source tarball, 
> this way as far as people downloaded the right tarball, they will be 
> able to securely connect to the server since they will be able to
> check the signature. Is there any example of this idea (public key
> stored in a file in the client package) available somewhere?

SFS (secure file system) does something like that. The info page
included has this:

	SFS clients require no configuration.  Simply run the program
	`sfscd', and a directory `/sfs' should appear on your system.
	To test your client, access our SFS test server.  Type the
	following commands:

	  % cd /sfs/@sfs.fs.net,uzwadtctbjb3dg596waiyru8cx5kb4an
	  % cat CONGRATULATIONS
	  You have set up a working SFS client.
	  %

	Note that the `/sfs/@sfs.fs.net,...' directory does not need to
	exist before you run the `cd' command.  SFS transparently mounts
	new servers as you access them.

The part after the comma is a hash of the public key the server at
sfs.fs.net must present, in order to be accepted.



From itamar at itamarst.org  Wed Oct  6 16:06:46 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 06 Oct 2004 16:06:46 -0400
Subject: [Twisted-Python] epoll and other questions
In-Reply-To: <20041006192454.GA29178@dualathlon.random>
References: <20041006192454.GA29178@dualathlon.random>
Message-ID: <1097093206.31657.63.camel@sheriffpony>

On Wed, 2004-10-06 at 15:24, Andrea Arcangeli wrote:
> Is there any plan to use epoll instead of poll to make twisted scalabile
> with hundred thousand simultanous sockets connected?

It wouldn't be hard to do, mainly someone needs to wrap epoll for
Python.

> twisted use epoll. I assume my application would require no change, so I
> can start developing with current twisted, I can test it with poll, and
> then later fix the internals when the slowdown becomes noticeable.  Right?

Correct.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From paul at ref.nmedia.net  Wed Oct  6 17:38:55 2004
From: paul at ref.nmedia.net (Paul Campbell)
Date: Wed, 6 Oct 2004 14:38:55 -0700
Subject: [Twisted-Python] Sending other things than strings in UDP packets
Message-ID: <20041006213855.GA31944@ref.nmedia.net>

Sending anything via any protocol is fairly easy with python in general.

There are two ways to do it depending on your particular goals.

The "python way" is as follows:

message = pickle.dumps(my structures)
my structures = pickle.loads(message)

Read the documentation on the pickle module for more information. And be
forewarned: pickle will dump/load ANYTHING. For safety reasons, there's also
a "safe_pickle" variant floating around.

The underlying banana protocol is really just another pickle module for use
inside PB. I haven't tried using it separately from PB though.

The other "unpythonese" way of doing it is using the struct module:

message = struct.pack("format", param1, param2, param3)
param1, param2, param3 = struct.unpack("format", message)

The advantage of the struct library is that you have complete and total control
over every byte so you can deal with non-python data.

In reality, I personally use both. pickle is great for providing a totally
unstructured interface to higher level protocols that have no desire in
looking directly at low level packet formats. struct does just the opposite.

For instance, here's a very simple UDP RPC module with no error checking
whatsoever, no safety, no handling of very long packets (or checking for
that case), no timeouts, or anything but a very basic rudimentary idea of
how to assemble an RPC protocol.

class UDPRPC(DatagramProtocol):
    REQUEST = 0
    RESPONSE = 1

    def start(self):
        """Create a dictionary of pending RPC's"""
        self.pending = dict()

    def call(self, address, remote_class, remote_method, *remote_args, **remote_kargs):
        """The actual RPC call local (stub) interface. Note that
           we can even get creative by overloading __calls__ and
           similar interfaces to make it look 100% like a real class."""
	d = defer.Deferred() # Create a deferred return.
        # The following is an index to look up the RPC response later
        nonce = random.randomint(0, 2^32-1)
	index = struct.pack("!I!I!H", nonce, address[0], address[1])
        self.pending[index] = d # Store the deferred for the response to follow
        self.sendMessage(self.REQUEST, address,
            (remote_class, remote_method, remote_args, remote_kargs))
        return d
           
    def sendMessage(self, type, address, nonce, data):
        "Do the conversion to a packet and send it."
        packet = chr(type)+struct.pack("!I", nonce)+
            pickle.dumps(data)
	transport.write(packet)
	return d

    def datagramReceived(self, packet, address):
        """Handle incoming packets."""
        type = ord(packet[0])
        nonce = struct.unpack("!I", packet[1:4])
        message = pickle.loads(packet[5:])
        if type == REQUEST: # Handling a remote call
            remote_class, remote_method, remote_args, remote_kargs = message
            result = remote_class.remote_method(*remote_args, **remote_kargs)
            self.sendMessage(self.RESPONSE, address, nonce, result)
        else: # Assume that this is the response, so return the deferred
            index = struct.pack("!I!I!H", nonce, address[0], address[1])
            caller = self.pending[index]
            del self.pending[index]
            caller.Callback(message)



From radeex at gmail.com  Wed Oct  6 17:53:08 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 7 Oct 2004 08:53:08 +1100
Subject: [Twisted-Python] Sending other things than strings in UDP packets
In-Reply-To: <20041006213855.GA31944@ref.nmedia.net>
References: <20041006213855.GA31944@ref.nmedia.net>
Message-ID: <60ed19d404100614531935658a@mail.gmail.com>

On Wed, 6 Oct 2004 14:38:55 -0700, Paul Campbell <paul at ref.nmedia.net> wrote:
> Sending anything via any protocol is fairly easy with python in general.
> 
> There are two ways to do it depending on your particular goals.
> 
> The "python way" is as follows:
> 
> message = pickle.dumps(my structures)
> my structures = pickle.loads(message)

Ergh. Please don't do anything _close_ to suggesting this. This is not
the "python way", it is the "stupid, insecure,
let-people-rm-rf-your-home-directory way".


-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From maoy at cis.upenn.edu  Thu Oct  7 14:50:39 2004
From: maoy at cis.upenn.edu (Yun Mao)
Date: Thu, 7 Oct 2004 14:50:39 -0400 (EDT)
Subject: [Twisted-Python] Sending other things than strings in UDP packets
In-Reply-To: <60ed19d404100614531935658a@mail.gmail.com>
References: <20041006213855.GA31944@ref.nmedia.net>
	<60ed19d404100614531935658a@mail.gmail.com>
Message-ID: <Pine.LNX.4.56.0410071445430.31297@klondike.cis.upenn.edu>

There was a discussion on python mailing list on how to make pickle a
little more secure:

http://coding.derkeiler.com/Archive/Python/comp.lang.python/2004-01/2320.html

and the replies:

http://coding.derkeiler.com/Archive/Python/comp.lang.python/2004-01/293index.html

Yun


On Thu, 7 Oct 2004, Christopher Armstrong wrote:

> On Wed, 6 Oct 2004 14:38:55 -0700, Paul Campbell <paul at ref.nmedia.net> wrote:
> > Sending anything via any protocol is fairly easy with python in general.
> >
> > There are two ways to do it depending on your particular goals.
> >
> > The "python way" is as follows:
> >
> > message = pickle.dumps(my structures)
> > my structures = pickle.loads(message)
>
> Ergh. Please don't do anything _close_ to suggesting this. This is not
> the "python way", it is the "stupid, insecure,
> let-people-rm-rf-your-home-directory way".
>
>
> --
>  Twisted | Christopher Armstrong: International Man of Twistery
>   Radix  |          Release Manager,  Twisted Project
> ---------+            http://radix.twistedmatrix.com
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From andrea at cpushare.com  Thu Oct  7 17:53:34 2004
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu, 7 Oct 2004 23:53:34 +0200
Subject: [Twisted-Python] epoll and other questions
In-Reply-To: <41644F53.3010008@twistedmatrix.com>
References: <20041006192454.GA29178@dualathlon.random>
	<41644F53.3010008@twistedmatrix.com>
Message-ID: <20041007215334.GM29178@dualathlon.random>

On Wed, Oct 06, 2004 at 11:02:27PM +0300, Tommi Virtanen wrote:
> then because of epoll API instability; now that epoll is no longer a
> moving target, someone should get back on the case.

agreed ;).

Ideally with truly huge number of sockets open, the time wasted in poll
at some point would be more than the time wasted in the python
interpreter (if compared to a C source). Would be interesting to measure
the breakpoint, so when the poll cost becomes higher than the
interpreter.

> >twisted use epoll. I assume my application would require no change,
> >so I can start developing with current twisted, I can test it with
> >poll, and then later fix the internals when the slowdown becomes
> >noticeable.  Right?
> 
> Yes. All the different reactors implement the same interface.
> 
> Also, notice that the default reactor most likely uses select, not poll:
> 
> $ python -c 'from twisted.internet import reactor; print reactor'
> <twisted.internet.default.SelectReactor instance at 0x401fb16c>
> $ python -c 'from twisted.internet import pollreactor; \
>  pollreactor.install(); from twisted.internet import reactor; \
>  print reactor'
> <twisted.internet.pollreactor.PollReactor instance at 0x401f33ec>

good point. I'll use pollreactor for now. Apparently, I still have to
use the normal "select" reactor for interfacing with pyqt, but that's ok
since I don't (yet) need scalability on the client side...

> My gut feeling is you'll either hit an OS limit or sys.maxint,
> and the latter is pretty huge. Haven't looked at the details.

ok fine ;).

> Well, there's nothing Twisted- or even Python-specific in that.
> The solution probably depends heavily on your dataset size, access
> patterns, and available RAM. Some people advocate heavy RAM caching.

yes, heavy ram caching is fine for reads, but writes may still require
O_SYNC.

> Sendfile might be the solution, but I don't think there's any
> integration of sendfile with python, far less with twisted.

sendfile is synchronous too, so I don't think it'd solve the problem.
Plus sendfile only works from the filesystem to the network, while for
me it's almost the other way around and I've to parse the data anyways
(I'm even thinking to use pickle objects as storage for each user, but
I'm a bit afraid about the versioning and the unpickle/pickle
performance, so if I upgrade the user class and then all unpickle breaks
because I lack a on-disk format different from the in-memory format).

> Your plan on isolating disk IO to separate process(es) sounds quite
> sane. Your master process could receive the file data from the IO
> workers in blocks via a shared mmap, to avoid passing it through a

so you're saying I could already used shared mmap. but how to serialize
then? I'd need pthread_mutex for that. Otherwise if I have to serialize
through a pipe I can as well send the data through the pipe as well
(it's not going to be high bandwidth communication where an additional
memcpy matters, it'd prefer shared mem only for lowlatency and
full-userspace locking for the data producer)
 
> socket (even if the socket was a local TCP connection or UNIX domain).
> Don't know if that optimization is worth it; I would delay writing
> any extra code until the problem actually shows up.

Agreed ;)

> Note that python threading is very likely _not_ what you want;
> the threads synchronize in the interpreter level quite a lot.

agreed, it's not really scaling. This is also why I doubt the
serialization through shmem would work well, unless I write a module
from scratch for the pthread_mutex futex driven locking.

> >Another thing I plan doing is to ship the public key (matching the 
> >private key stored only on the server) on the client source tarball, 
> >this way as far as people downloaded the right tarball, they will be 
> >able to securely connect to the server since they will be able to
> >check the signature. Is there any example of this idea (public key
> >stored in a file in the client package) available somewhere?
> 
> SFS (secure file system) does something like that. The info page
> included has this:
> 
> 	SFS clients require no configuration.  Simply run the program
> 	`sfscd', and a directory `/sfs' should appear on your system.
> 	To test your client, access our SFS test server.  Type the
> 	following commands:
> 
> 	  % cd /sfs/@sfs.fs.net,uzwadtctbjb3dg596waiyru8cx5kb4an
> 	  % cat CONGRATULATIONS
> 	  You have set up a working SFS client.
> 	  %
> 
> 	Note that the `/sfs/@sfs.fs.net,...' directory does not need to
> 	exist before you run the `cd' command.  SFS transparently mounts
> 	new servers as you access them.
> 
> The part after the comma is a hash of the public key the server at
> sfs.fs.net must present, in order to be accepted.

I found sfscd program, but it's not a python program and it seems a bit
different from what I wanted to do. My object was to create a
private/public key pair, and to use an SSL library to load that file
automatically and use it as the public/private key. My point is that if
twisted supports the native ssh protocol from id_rsa* than it'll be a
joke to implement my public/private key in a file too.  I was just
trying to reuse whatever is available right now, be it
SSH/SSL/sshtunnel/whatever as transport for the encryption. So if you've
a suggestion of what encrypted transport to use that's welcome.

Thank you very much for the help!



From itamar at itamarst.org  Thu Oct  7 18:25:52 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 07 Oct 2004 18:25:52 -0400
Subject: [Twisted-Python] epoll and other questions
In-Reply-To: <20041007215334.GM29178@dualathlon.random>
References: <20041006192454.GA29178@dualathlon.random>
	<41644F53.3010008@twistedmatrix.com>
	<20041007215334.GM29178@dualathlon.random>
Message-ID: <1097187951.3978.36.camel@sheriffpony>

On Thu, 2004-10-07 at 17:53, Andrea Arcangeli wrote:

> good point. I'll use pollreactor for now. Apparently, I still have to
> use the normal "select" reactor for interfacing with pyqt, but that's ok
> since I don't (yet) need scalability on the client side...

Actually there's a QT reactor that uses QT's event loop (and by
extension whatever QT uses internally, be it select() or poll()).

>  I was just
> trying to reuse whatever is available right now, be it
> SSH/SSL/sshtunnel/whatever as transport for the encryption. So if you've
> a suggestion of what encrypted transport to use that's welcome.

The SSH code uses pycrypto. Twisted's SSL layer uses PyOpenSSL, but
PyOpenSSL doesn't expose the OpenSSL encryption APIs. There are Python
wrappers for a number of other crypto libraries as well.




From mary-twisted at puzzling.org  Fri Oct  8 07:57:31 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 8 Oct 2004 13:57:31 +0200
Subject: [Twisted-Python] More on docs
Message-ID: <20041008115731.GD4537@fuchsia.puzzling.org>

Sorry, I appreciate that I spend more time ranting about getting help
writing docs than I do writing, but... again.

Unfortunately the fastest way for me to write docs is to take rough
drafts by someone else and edit them into a helpful style with examples
and whatnot. Writing docs from scratch is fairly slow because I have to
spend a lot of time with the code, far more than the developers would have
to spend. And usually anything I say about design designs or high level
rationale will subsequently need to be corrected.

So, it would be fastest *for me* if developers wrote scratch drafts and
I edited them and improved the examples etc. Which is great, but also
unlikely to happen.

I figure something that is more likely to happen is that developers will
be explaining something to someone and accidently generate drafts as
they go. For example: mailing list posts, IRC logs and blog entries. So,
if you see or participate in a good "using something" discussion,
particularly on IRC, please send me a copy and I'll do my best to
edit/re-write it into a usable piece of documentation.

As my part of the bargain, it really is time I went back through the
archives and mined them for good posts.

Ta,

Mary



From mwh at python.net  Fri Oct  8 08:36:46 2004
From: mwh at python.net (Michael Hudson)
Date: Fri, 08 Oct 2004 13:36:46 +0100
Subject: [Twisted-Python] Re: Sending other things than strings in UDP
	packets
References: <20041006213855.GA31944@ref.nmedia.net>
	<60ed19d404100614531935658a@mail.gmail.com>
	<Pine.LNX.4.56.0410071445430.31297@klondike.cis.upenn.edu>
Message-ID: <2m4ql5idy9.fsf@starship.python.net>

Yun Mao <maoy at cis.upenn.edu> writes:

> There was a discussion on python mailing list on how to make pickle a
> little more secure:

As of 2.3, unpickle being secure is a non-goal.  Don't Unpickle
Untrusted Input.

Cheers,
mwh

-- 
  Please tell me I don't have to break out sarcasm tags. Please.
  Smartassed one-liners are a coping mechanism, and I really need 
  them this week.                               -- Charles Herbig, asr




From gumuz at looze.net  Fri Oct  8 09:39:56 2004
From: gumuz at looze.net (=?iso-8859-1?Q?Guyon_Mor=E9e?=)
Date: Fri, 8 Oct 2004 15:39:56 +0200
Subject: [Twisted-Python] xml-rpc, single-instance... how does that work
Message-ID: <00d601c4ad3c$759aaa90$6501a8c0@tradesoft.nl>

Hi all,

I am trying to get my head around some things here.

I have been looking at the twisted xml-rpc examples and I know you can get
concurrency through deferreds. I like that :)

The concept(which i dont get) is having a *single* instance of some class,
which is published through xml-rpc.

What happens when multiple 'users' try to do stuff like updating and
retrieving.

How does one do transactional processing? The way I see a user having a
transaction is having it's own instance of some (business)object. For
example:

# semi pseudo code :)
x = xmlserverobject()

transaction = x.SomeTransActionalBusinessObject()

# do stuff
transaction.init(blablabla)

# save the transaction if everything went correct to for example a database
transactiob.save()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

I hope it's clear what I am looking for.I dont see how you can do that
through xml-rpc, but I might be just stupid :P

I hope I missed something because the webservices/xmlrpc looks really
appealing.

regards,

Guyon Mor?e




From paul at ref.nmedia.net  Fri Oct  8 17:42:12 2004
From: paul at ref.nmedia.net (Paul Campbell)
Date: Fri, 8 Oct 2004 14:42:12 -0700
Subject: [Twisted-Python] Sending other things than strings in UDP packets
In-Reply-To: <E1CFcYg-0006v4-01@pyramid.twistedmatrix.com>
References: <E1CFcYg-0006v4-01@pyramid.twistedmatrix.com>
Message-ID: <20041008214212.GA13649@ref.nmedia.net>

> Message: 5
> Date: Thu, 7 Oct 2004 08:53:08 +1100
> From: Christopher Armstrong <radeex at gmail.com>
> Subject: Re: [Twisted-Python] Sending other things than strings in UDP
> 	packets
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Message-ID: <60ed19d404100614531935658a at mail.gmail.com>
> Content-Type: text/plain; charset=US-ASCII
> 
Christopher Armstrong <radeex at gmail.com> wrote:
> 
> Ergh. Please don't do anything _close_ to suggesting this. This is not
> the "python way", it is the "stupid, insecure,
> let-people-rm-rf-your-home-directory way".

You apparently read part of the message and then you failed to read the
next paragraph, right? At the risk of being redundant, let me reiterate:

"Read the documentation on the pickle module for more information. And be
forewarned: pickle will dump/load ANYTHING. For safety reasons, there's also
a 'safe_pickle' variant floating around."

I guess writing instructive and marginal (and probably nonworking) code for
helping out newbies is not what this mailing list is all about. I thought I
said "nonworking", "no error checking", and "lots of issues" enough times
to get the point across. Sorry, I'll "mail.compose.elitist_mode=true" next
time and give some flippant answer like "UDP sucks dude. Just use PB under
TCP."

At the risk of leaving you hanging with regards to whether such variants
actually exist, below are pointers to two that can be used off the shelf, and
possibly a third already contained within the twisted code base.

Here's one variant that includes the a "safe pickle" call:
http://zgp.org/pipermail/p2p-hackers/2004-August/002046.html

Incidentally, the protocol contains a lot of the extras that I mentioned
my stripped-down code was lacking (as well as a few small bugs). It also
handles long messages and retries as well within UDP. It has an interesting
"microprotocol" sort of structure (where each layer of the protocol builds
on the previous one). Read it in addition to the first couple functions
that handle pickling/unpickling.

Another "safe pickle" module is buried in the code for "thecircle"
(www.thecircle.org.au). Just download it and rip out the "safe_pickle.py"
module from circlelib. It is stand-alone, and designed for UDP transportation
(although not currently using Twisted).

I haven't dug really deep, but banana (part of PB) appears to be essentially
yet another incarnation of exactly the same idea. The code pattern looked
identical to the two pieces of code I just mentioned. In fact, I haven't
looked at it but I suspect that even pickle itself has the same pattern,
other than being more generalized (it will handle executables and instances,
while the safe variants will reject that).

The code for all of these modules has an identical structure. It takes
a structure and walks down it. It reads each piece and codes it in a
"Type+data" format. It rejects anything that it can't inherently decode
without aid (such as class instances). In those cases, at least the banana
variant does allow the possibility to kick it up to a higher level (via
Jelly) to handle user-level structures.

The "unpickle" code does exactly the same thing except in reverse, converting
the coded data back into a structure. There are standards (S-expressions or
XML) for the format itself but I haven't seen any truly compelling reasons to
follow those. They seem to add lots of overhead without any additional benefit.



From exarkun at divmod.com  Fri Oct  8 18:49:53 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 08 Oct 2004 22:49:53 GMT
Subject: [Twisted-Python] Sending other things than strings in UDP packets
In-Reply-To: <20041008214212.GA13649@ref.nmedia.net>
Message-ID: <20041008224953.19317.1786793936.divmod.quotient.331@ohm>

On Fri, 8 Oct 2004 14:42:12 -0700, Paul Campbell <paul at ref.nmedia.net> wrote:
>> Message: 5
> > Date: Thu, 7 Oct 2004 08:53:08 +1100
> > From: Christopher Armstrong <radeex at gmail.com>
> > Subject: Re: [Twisted-Python] Sending other things than strings in UDP
> > 	packets
> > To: Twisted general discussion <twisted-python at twistedmatrix.com>
> > Message-ID: <60ed19d404100614531935658a at mail.gmail.com>
> > Content-Type: text/plain; charset=US-ASCII
> > 
> Christopher Armstrong <radeex at gmail.com> wrote:
> > 
> > Ergh. Please don't do anything _close_ to suggesting this. This is not
> > the "python way", it is the "stupid, insecure,
> > let-people-rm-rf-your-home-directory way".
> 
> You apparently read part of the message and then you failed to read the
> next paragraph, right? At the risk of being redundant, let me reiterate:
> 
> "Read the documentation on the pickle module for more information. And be
> forewarned: pickle will dump/load ANYTHING. For safety reasons, there's also
> a 'safe_pickle' variant floating around."
> 
> I guess writing instructive and marginal (and probably nonworking) code for
> helping out newbies is not what this mailing list is all about. I thought I
> said "nonworking", "no error checking", and "lots of issues" enough times
> to get the point across. Sorry, I'll "mail.compose.elitist_mode=true" next
> time and give some flippant answer like "UDP sucks dude. Just use PB under
> TCP."

  I'm sure a great many people would appreciate it if you didn't (and I hope you take no insult if I go so far as to point out that if I were to judge solely on the content of this email, I would say you have already enabled this mode.  I'm sure it is just a fluek, though).

> At the risk of leaving you hanging with regards to whether such variants
> actually exist, below are pointers to two that can be used off the shelf, and
> possibly a third already contained within the twisted code base.
> 
> Here's one variant that includes the a "safe pickle" call:
> http://zgp.org/pipermail/p2p-hackers/2004-August/002046.html
> 

  I think there is a simple misunderstanding here.  A great many people assume that "pickle" applies to one of the two stdlib modules, "pickle" or "cPickle".  You seem to be using it to refer to any arbitrary or semi-arbitrary serialization module.

  Both usages certainly have their place, but when people confuse them, problems can often ensue!

> Incidentally, the protocol contains a lot of the extras that I mentioned
> my stripped-down code was lacking (as well as a few small bugs). It also
> handles long messages and retries as well within UDP. It has an interesting
> "microprotocol" sort of structure (where each layer of the protocol builds
> on the previous one). Read it in addition to the first couple functions
> that handle pickling/unpickling.

  I'll take your word on this, as it does not seem central to the particular issue now at hand.

> 
> Another "safe pickle" module is buried in the code for "thecircle"
> (www.thecircle.org.au). Just download it and rip out the "safe_pickle.py"
> module from circlelib. It is stand-alone, and designed for UDP transportation
> (although not currently using Twisted).

  Again, a likely source of confusion.  thecircle's "safe_pickle.py" module is not actually related to pickle at all, beyond the fact that both it and pickle are used for serializing objects.  I won't hold this against you, though :)  thecircle's authors should be ashamed for their lack of creativity in module naming!

> 
> I haven't dug really deep, but banana (part of PB) appears to be essentially
> yet another incarnation of exactly the same idea. The code pattern looked
> identical to the two pieces of code I just mentioned. In fact, I haven't
> looked at it but I suspect that even pickle itself has the same pattern,
> other than being more generalized (it will handle executables and instances,
> while the safe variants will reject that).

  Banana is closer to the marshal module than the pickle module.  Take Jelly and Banana together though, and you have something that is quite similar.  Jelly + Banana together is _not_ pickle, though, it just does something similar.  Why does this matter?  Well...

> 
> The code for all of these modules has an identical structure. It takes
> a structure and walks down it. It reads each piece and codes it in a
> "Type+data" format. It rejects anything that it can't inherently decode
> without aid (such as class instances). In those cases, at least the banana
> variant does allow the possibility to kick it up to a higher level (via
> Jelly) to handle user-level structures.

  No, it does not have an identical structure.  It is similar, no doubt, but there are many differences worth noting.  Jelly and Banana, for example, have _no_ mechanism which will allow an arbitrary function to be specified for execution by the _serializer_ in the _deserializer's_ environment.  Pickle does.  This is just one of many important differences.

> 
> The "unpickle" code does exactly the same thing except in reverse, converting
> the coded data back into a structure. There are standards (S-expressions or
> XML) for the format itself but I haven't seen any truly compelling reasons to
> follow those. They seem to add lots of overhead without any additional benefit.
> 

  Without going into the advantages and disadvantages of XML and S-expressions, let me just point out this:

  Whether you use the pickle format, or any other format (like xml or s-expressions), is mostly irrelevant to the main concern raised in this thread: security.  Pickle was not written to be secure.  It is not maintained with security in mind.  It has some features which take it some distance towards the goal of being secure, but how close they get it is hard to say.  Personally, I would not use any serialization tool as complex as pickle in a security sensitive environment without first having it audited by some very smart people.  The CPython developers have flat out stated that they are not focused on making it secure.  That's fine.  I'm not going to demand they make it completely bulletproof.  I'll happily continue using it _far away from untrusted data sources_ and use an alternative, such as Jelly + Banana, for the cases where I need to communicate with untrusted parties.

  I recommend everyone else do the same.

  Jp



From itamar at itamarst.org  Sat Oct  9 16:25:10 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 09 Oct 2004 16:25:10 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r11937 - untested beginnings
	of distutils hacks for zpkgtools. also move packages to dist
In-Reply-To: <E1CG5z1-0003lQ-00@wolfwood>
References: <E1CG5z1-0003lQ-00@wolfwood>
Message-ID: <1097353510.8301.3.camel@sheriffpony>

<3




From mcfletch at rogers.com  Sat Oct  9 17:19:23 2004
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Sat, 09 Oct 2004 17:19:23 -0400
Subject: [Twisted-Python] More on docs
In-Reply-To: <20041008115731.GD4537@fuchsia.puzzling.org>
References: <20041008115731.GD4537@fuchsia.puzzling.org>
Message-ID: <416855DB.8080805@rogers.com>

Mary Gardiner wrote:
...

>I figure something that is more likely to happen is that developers will
>be explaining something to someone and accidently generate drafts as
>they go. For example: mailing list posts, IRC logs and blog entries. So,
>if you see or participate in a good "using something" discussion,
>particularly on IRC, please send me a copy and I'll do my best to
>edit/re-write it into a usable piece of documentation.
>  
>
http://blog.vrplumber.com/356
http://blog.vrplumber.com/358
http://blog.vrplumber.com/371
http://blog.vrplumber.com/349
http://blog.vrplumber.com/310
http://www.vrplumber.com/programming/twistedlowlevel05.pdf

Covering, respectively:
    Creating an SSL-protected web-server with Twisted
    Adding user authentication to your web-site via twisted.cred/nevow.guard
    Converting user authentication from "in-memory" checker to 
PostgreSQL-based checker
    Creating a twisted.manhole Python telnet prompt (minimal example)
    How to download an SSL-encrypted web-page (minimal example)
    Talk on low-level mechanisms in Twisted, with background on other 
common methods of parallelisation

HTH,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From sebastien.kirche.no at spam.free.fr.invalid  Sun Oct 10 17:55:00 2004
From: sebastien.kirche.no at spam.free.fr.invalid (Sebastien Kirche)
Date: Sun, 10 Oct 2004 23:55:00 +0200
Subject: [Twisted-Python] UDP and multiple access
Message-ID: <85sm8mfdcb.fsf@obelix.seki.fr>

Hi,

I am  working on a  little project  to list the  servers of the  online game
?Enemy Territory? and also to list/find a known player. I try to use twisted
to simplify the network access.
I am new both to twisted and python, but as i am also a programmer, learning
is quite easy.

The task consists in 2 times:
1) one UDP request to the  master server at idsoftware that returns the list
   of the active (slaves) servers (currently around 2020 hosts)
2) one UDP  request to *each* slave server  to obtain characteristics (name,
   map that is played, ...) and the list of the players

For the time i  managed to perform the task 1) and i  can obtain the list of
the hosts:ports to ask for.

If someone would like to peek an eye on my code, i uploaded it [1].

My problem is now to send around 2000+ non blocking requests and to take the
answers as they come back.

Data  treatment should  not be  a problem,  but i  don't really  see  how to
perform the mass request.

I  don't understand  clearly  the twisted  terminology (protocols,  factory,
...). I  have seen  in another  script [2] a  case where  there is  just one
datagramReceived that checks on the host:port of the datagram to distinguish
the answers, but that is kind of a library, and it only shows 2 requests for
a test. I have no idea for the mass request.

Would someone be  kind to guide me a  little about it ? For  example by just
giving me a snippet for a multiple UDP request with the hosts are in a list,
and if the datagramReceived will suit the response treatment.

I hope to be clear enough. TIA.

Footnotes: 
[1] http://sebastien.kirche.free.fr/python_stuff/master_query.py
    (comments welcome)

[2] http://sebastien.kirche.free.fr/python_stuff/twist_p2p.py (initially
    published in the twisted mailing-list)

S?bastien Kirche




From p.mayers at imperial.ac.uk  Sun Oct 10 20:48:13 2004
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 11 Oct 2004 01:48:13 +0100
Subject: [Twisted-Python] UDP and multiple access
In-Reply-To: <85sm8mfdcb.fsf@obelix.seki.fr>
References: <85sm8mfdcb.fsf@obelix.seki.fr>
Message-ID: <4169D84D.90007@imperial.ac.uk>

Sebastien Kirche wrote:

> Hi,
> 
> I am  working on a  little project  to list the  servers of the  online game
> ?Enemy Territory? and also to list/find a known player. I try to use twisted
> to simplify the network access.
> I am new both to twisted and python, but as i am also a programmer, learning
> is quite easy.
> 
> The task consists in 2 times:
> 1) one UDP request to the  master server at idsoftware that returns the list
>    of the active (slaves) servers (currently around 2020 hosts)
> 2) one UDP  request to *each* slave server  to obtain characteristics (name,
>    map that is played, ...) and the list of the players
> 
> For the time i  managed to perform the task 1) and i  can obtain the list of
> the hosts:ports to ask for.
> 
> If someone would like to peek an eye on my code, i uploaded it [1].
> 
> My problem is now to send around 2000+ non blocking requests and to take the
> answers as they come back.
> 
> Data  treatment should  not be  a problem,  but i  don't really  see  how to
> perform the mass request.
> 
> I  don't understand  clearly  the twisted  terminology (protocols,  factory,
> ...). I  have seen  in another  script [2] a  case where  there is  just one
> datagramReceived that checks on the host:port of the datagram to distinguish
> the answers, but that is kind of a library, and it only shows 2 requests for
> a test. I have no idea for the mass request.
> 
> Would someone be  kind to guide me a  little about it ? For  example by just
> giving me a snippet for a multiple UDP request with the hosts are in a list,
> and if the datagramReceived will suit the response treatment.
> 
> I hope to be clear enough. TIA.
> 

Ah ha. This is extremely similar to what I've been doing recently (SNMP, 
with many many agents, lots of concurrent UDP clients). Here's the setup 
I used (warning: comes with no guarantee, may end your marriage, etc. - 
specifically, read the warning at the bottom).

This is very, very pseudo-code - my actual code has a lot of very 
confusing non-relevant stuff in it. It uses a queue to buffer the 
receive events and ensure the UDP socket queue is emptied asap (the 
queue function exits quickly, but reschdules itself a short time in the 
future; this short time is enough to let select() run and the data be 
received - see the recent thread on the mailing list about "scalability 
with hundreds of clients" and callLater(0, ...) not doing what you might 
think). That same queue is used to start off the clients' first xmit, 
meaning they'll be relatively well interspersed and you won't overload 
the socket *output* buffer either.

class Protocol(protocol.DatagramProtocol):
     def __init__(self):
         self._queue = []
         self.timeouts = []
         from twisted.internet import reactor
         self.reactor = reactor
         reactor.callLater(1, self.dotimeouts)
     def dotimeouts(self):
         now = time.time()
         while self.timeouts:
             due, deferred = self.timeouts[0]
             if due > now:
                 break
             due, deferred = self.timeouts.pop(0)
             # Might have been called, don't timeout if so
             if not deferred.called:
                 deferred.errback(Timeout())
     def queue(self, callable, pargs=tuple(), kwargs=dict()):
         if not self.calls:
             # Then we won't have schedules an dequeue either
             # WARNING: this number is important...
             self.reactor.callLater(0.001, self.dequeue)
         self._queue.append((callable, pargs, kwargs))
     def dequeue(self):
         if not self.calls:
             # Shouldn't happen
             return
         callable, pargs, kwargs = self._queue.pop(0)
         callable(*pargs, **kwargs)
         if self.calls:
             # If we've more to dequeue, do so
             # WARNING: this number is also important...
             self.reactor.callLater(0.001, self.dequeue)
     def datagramReceived(self, data, addr):
         # Do stuff, then...
         pdu = self.parse(data)
         deferred = self.get_outstanding(pdu, addr)
         self.queue(deferred.callback, pdu)
     def query(self, host, op, args):
         # Do stuff, then
         pdu = self.encode(op, args)
         self.transport.write(pdu.bytes(), host)
         return self.set_outstanding(pdu, host)

class Client:
     def __init__(self, host, protocol):
         self.protocol = protocol
         self.host = host
         self.protocol.queue(self.step1)
     def step1(self):
         deferred = self.protocol.query(self.host, 'op', 'args')
         deferred.addCallbacks(self.step2, self.fail)
     def step2(self, pdu):
         for thing, value in pdu.items():
             # blah, blah
             pass
         deferred = self.protocol.query(self.host, 'op2', None)
         deferred.addCallbacks(self.step3, self.fail)


if __name__=='__main__':
     import sys
     from twisted.internet import reactor

     proto = Protocol()
     reactor.listenUDP(0, proto)
     for hostname in sys.argv[1:]
         if ':' in hostname:
             hostname, port = hostname.split(':')
         else:
             port = defaultport
         client = Client((hostname, port), proto)
     reactor.run()

Now, I make no claims this is the perfect Twisted app - it ain't. What 
it *does* show is the only way I've found (which may be entirely my lack 
of ability) to scalably send multiple hundreds of UDP PDUs without:

a) Starving the Twisted mainloop of CPU, meaning select() doesn't get 
run often enough, and the UDP socket buffer overflows, dropping replies 
and necessitating retransmits
b) Using a lot of sockets, which runs into problems with select() and 
poll() as well as the system fd limit (solveable with ulimit I'll grant)
c) Starving the clients that are slow responders of "cpu" (queue) time

The warning however: UDP, lacking flow control, is very easy to get 
wrong and accidentally DDoS the clients you're trying to talk to. 
Specifically the value in the reactor.callLater(0.001, ...) determines 
how often a "task" will be dequeued from the protocol, and therefore how 
many PDUs you'll send and receive events you'll process per second. Best 
to start with a) a small number of servers and b) a larger value (lower 
rate) for that.

You should also probably implement some form of variable per-host 
timeout to get some kind of rate control/

However, I've had a great deal of difficultly making these points 
understood to other coders, for which I've got two explanations; I'm 
totally wrong, or it's a very subtle issue. Guess which I think it is :o)



From stefan at x-cellent.com  Mon Oct 11 03:46:11 2004
From: stefan at x-cellent.com (Stefan Majer)
Date: Mon, 11 Oct 2004 09:46:11 +0200
Subject: [Twisted-Python] Message Queue
Message-ID: <1097480771.10904.35.camel@manaslu.client.x-cellent.com>

Hi,

We are in the design phase for a new project. We want to write a new
kind of a network monitoring applikation. This application is designed
to spread over several monitoring agents across the network.
Therefore we want to do the following:

1. a central scheduler puts new measurement actions into a queue
2. all executors are subscribed to this queue an execute the specified
actions and report all back to a central repository.

We are all relatively new to python (most of us have java background)
and we are searching for a good framework to help us to get the job
done.
Is it possible to use twisted to achieve the above. Or has twisted
another idea how to distribute jobs to other machines ?

with kind regards

-- 
Stefan Majer

x-cellent technologies GmbH
Rosenkavalierplatz 5
81925 Muenchen
fon +49 (0)89 929 274 - 245
fax +49 (0)89 929 274 - 250
e-mail stefan at x-cellent.com
http://www.x-cellent.com




From thomas.weholt at gmail.com  Mon Oct 11 05:43:45 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Mon, 11 Oct 2004 11:43:45 +0200
Subject: [Twisted-Python] Message Queue
In-Reply-To: <1097480771.10904.35.camel@manaslu.client.x-cellent.com>
References: <1097480771.10904.35.camel@manaslu.client.x-cellent.com>
Message-ID: <ffb7b7f8041011024364a6f05b@mail.gmail.com>

On Mon, 11 Oct 2004 09:46:11 +0200, Stefan Majer <stefan at x-cellent.com> wrote:
> Hi,
> 
> We are in the design phase for a new project. We want to write a new
> kind of a network monitoring applikation. This application is designed
> to spread over several monitoring agents across the network.
> Therefore we want to do the following:
> 
> 1. a central scheduler puts new measurement actions into a queue
> 2. all executors are subscribed to this queue an execute the specified
> actions and report all back to a central repository.
> 
> We are all relatively new to python (most of us have java background)
> and we are searching for a good framework to help us to get the job
> done.
> Is it possible to use twisted to achieve the above. Or has twisted
> another idea how to distribute jobs to other machines ?
> 
> with kind regards
> 
> --
> Stefan Majer
> 
> x-cellent technologies GmbH
> Rosenkavalierplatz 5
> 81925 Muenchen
> fon +49 (0)89 929 274 - 245
> fax +49 (0)89 929 274 - 250
> e-mail stefan at x-cellent.com
> http://www.x-cellent.com
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


Please post any information about this to the list or to
2002 at weholt.org. Working on a similar project, at least in concept.

-- 
Mvh/Best regards,
Thomas Weholt
http://www.weholt.org



From symbiont at berlios.de  Mon Oct 11 06:02:38 2004
From: symbiont at berlios.de (Jeff Pitman)
Date: Mon, 11 Oct 2004 18:02:38 +0800
Subject: [Twisted-Python] Message Queue
Message-ID: <200410111802.38711.symbiont@berlios.de>

On Monday 11 October 2004 15:46, Stefan Majer wrote:
> Is it possible to use twisted to achieve the above. Or has twisted
> another idea how to distribute jobs to other machines ?

Brian Warner's buildbot: http://buildbot.sourceforge.net/, can help
stoke the fire of ideas.  Maybe it won't map 1:1 to what you need, but
it's got some good concepts.

take care,
--
-jeff



From sebastien.kirche.no at spam.free.fr.invalid  Mon Oct 11 07:34:02 2004
From: sebastien.kirche.no at spam.free.fr.invalid (Sebastien Kirche)
Date: Mon, 11 Oct 2004 13:34:02 +0200
Subject: [Twisted-Python] Re: UDP and multiple access
References: <85sm8mfdcb.fsf@obelix.seki.fr> <4169D84D.90007@imperial.ac.uk>
Message-ID: <m2vfdhtro5.fsf@seki.fr>

Le 11 Oct 2004, Phil Mayers s'est exprim? ainsi :

> 
> Ah ha. This is extremely similar to what I've been doing recently
> (SNMP, with many many agents, lots of concurrent UDP clients). Here's
> the setup I used (warning: comes with no guarantee, may end your
> marriage, etc. - 
> specifically, read the warning at the bottom).
> 
> 
> [ snip code and disclaimer ]

Many many thanks for that code, despite of what you may think of it : I have 
now some code to study and a direction to look for.

Formerly i did not know where to go.

I'll  look  at it  carefully  and  will make  some  experiment.  If can  get
something working, i'll notify it there.

Or if i have some more precise question too.

Regards,
S?bastien Kirche




From zanesdad at bellsouth.net  Mon Oct 11 08:04:40 2004
From: zanesdad at bellsouth.net (Jeremy Jones)
Date: Mon, 11 Oct 2004 08:04:40 -0400
Subject: [Twisted-Python] Message Queue
In-Reply-To: <1097480771.10904.35.camel@manaslu.client.x-cellent.com>
References: <1097480771.10904.35.camel@manaslu.client.x-cellent.com>
Message-ID: <416A76D8.9050804@bellsouth.net>

Stefan Majer wrote:

>Hi,
>
>We are in the design phase for a new project. We want to write a new
>kind of a network monitoring applikation. This application is designed
>to spread over several monitoring agents across the network.
>Therefore we want to do the following:
>
>1. a central scheduler puts new measurement actions into a queue
>2. all executors are subscribed to this queue an execute the specified
>actions and report all back to a central repository.
>
>We are all relatively new to python (most of us have java background)
>and we are searching for a good framework to help us to get the job
>done.
>Is it possible to use twisted to achieve the above. Or has twisted
>another idea how to distribute jobs to other machines ?
>
>with kind regards
>
>  
>
<shameless_plug>
You may want to check out Munkware:
http://munkware.sourceforge.net/

Currently, the only queue paradigm that is supported is PTP.  I'm 
thinking of supporting Pub/Sub later, which it seems will be more 
beneficial to you than PTP.  I'm currently working on a new release to 
make XMLRPC the protocol that messages are sent over, so if you're 
interested in taking a peek at a functional networking queue, you could 
snag it from CVS rather than from the Sourceforge download page.

I don't have it working in Twisted....yet.  That's on my agenda as 
well.  Once I get it working and stable with the builtin XMLRPCServer in 
the standard Python library, I'll work on getting it running in Twisted.

If you have any questions about it, please feel free to email me.
</shameless_plug>


Jeremy Jones



From foom at fuhm.net  Mon Oct 11 14:05:49 2004
From: foom at fuhm.net (James Y Knight)
Date: Mon, 11 Oct 2004 14:05:49 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <2E93D5D7-1BB0-11D9-AAA6-000A95A50FB2@fuhm.net>

A little late this week, sorry. ;)

Bug summary
______________________
Since 2004-10-03 20:16:57.250000:
   Bugs opened: 11   Bugs closed: 2   Total open bugs: 311 (+9)

New / Reopened Bugs
______________________
[CORE] writeSequence totally broken  (1/4 hour ago)
        http://www.twistedmatrix.com/bugs/issue745 opened by jknight

SMTP Client upgrade and bug fixes  (7 days ago)
        http://www.twistedmatrix.com/bugs/issue735 opened by bkirsch

imap.py LOGINAuthenticator missing functionality  (7 days ago)
CLOSED http://www.twistedmatrix.com/bugs/issue736 opened by bkirsch

[DOCUMENTATION, CORE] Add "why zope interfaces?" FAQ  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue744 opened by hypatia

[CORE] t.p.usage uses passed arguments rather than real defaults when 
displaying help  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue743 opened by itamarst

twistd --version failed on windows? I'm using 1.3.0  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue742 opened by maoy

Twisted logging howto  (4 days ago)
        http://www.twistedmatrix.com/bugs/issue741 opened by exarkun

twisted.cred.portal.IRealm docstring for parameters  (5 days ago)
        http://www.twistedmatrix.com/bugs/issue740 opened by thomasvs

roundup should send .patch files as text/plain  (6 days ago)
        http://www.twistedmatrix.com/bugs/issue738 opened by jknight

Minor code cleanups  (6 days ago)
        http://www.twistedmatrix.com/bugs/issue737 opened by HelmutG

Type enforcement for twisted.python.usage  (5 days ago)
        http://www.twistedmatrix.com/bugs/issue739 opened by itamarst

Bugs Closed
______________________
imap.py LOGINAuthenticator missing functionality  (7 days ago)
        http://www.twistedmatrix.com/bugs/issue736 opened by bkirsch

twisted/xish/domish.py bug breaks jabber protocol implementation  (1 
week ago)
        http://www.twistedmatrix.com/bugs/issue734 opened by doko




From general at eepatents.com  Mon Oct 11 14:34:34 2004
From: general at eepatents.com (Ed Suominen)
Date: Mon, 11 Oct 2004 11:34:34 -0700
Subject: [Twisted-Python] Twisted in Python STDLIB?
Message-ID: <200410111134.34759.general@eepatents.com>

I'd like to start a discussion on whether Twisted ought to be a part of 
Python's standard library. I understand some of the developers think it 
should not, but I personally don't like seeing far inferior networking 
code sitting there in stdlib. Inclusion in the stdlib carries an 
implied endorsement, and that endorsement should be going to Twisted, 
in my view.

Has Guido et al. ever expressed any viewpoint on Twisted? It is 
certainly very Pythonic, and though I have only limited Python and OOP 
experience to express this viewpoint, it is the best-written Python 
code I've ever seen. (Now, if only I could say the same for the 
commenting...)

Ed Suominen
Registered Patent Agent
Open-Source Software Author (yes, both...)
Web Site: http://www.eepatents.com



From LAFORGE49 at peoplepc.com  Mon Oct 11 15:07:18 2004
From: LAFORGE49 at peoplepc.com (William la Forge Jr)
Date: Mon, 11 Oct 2004 15:07:18 -0400
Subject: [Twisted-Python] The Anything Box
Message-ID: <NPEFJHLAHPGFKBEPBJJNCEKKCAAA.LAFORGE49@peoplepc.com>

A quick update on my twisted project:

This is a new kind of database. You can put anything into it, and make any
kind of query to access its contents. And you can view current state, past
state, and changes over time. This project builds on BSDDB and is fully
integrated with Twisted.

Thankyou,
Bill la Forge





From exarkun at divmod.com  Mon Oct 11 15:31:16 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Mon, 11 Oct 2004 19:31:16 GMT
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <200410111134.34759.general@eepatents.com>
Message-ID: <20041011193116.19317.600650232.divmod.quotient.1200@ohm>

On Mon, 11 Oct 2004 11:34:34 -0700, Ed Suominen <general at eepatents.com> wrote:
>I'd like to start a discussion on whether Twisted ought to be a part of 
> Python's standard library. I understand some of the developers think it 
> should not, but I personally don't like seeing far inferior networking 
> code sitting there in stdlib. Inclusion in the stdlib carries an 
> implied endorsement, and that endorsement should be going to Twisted, 
> in my view.
> 
> Has Guido et al. ever expressed any viewpoint on Twisted? It is 
> certainly very Pythonic, and though I have only limited Python and OOP 
> experience to express this viewpoint, it is the best-written Python 
> code I've ever seen. (Now, if only I could say the same for the 
> commenting...)

  Guido (and others, I think) have expressed dislike for framework-structured modules in the Python standard library.  Since the majority of Twisted falls into this category, this is a point on which Guido would probably require some convincing.

  Aside from this, inclusion in the standard library imposes even stricter backwards compatibility requirements (rightly so).  Twisted is changing less rapidly than it was at one point, but it is still making backwards incompatible changes and deprecating a lot of old APIs.  There are very fundamental parts of Twisted that just aren't ready to be called stable and set in stone.

  Additionally, the relatively slow Python release process (one major release every 12 - 18 months) would be deadly to Twisted at the current time.  Independent releases could still be undertaken, but I would dread this scenario - look at the email package and how many mistakes are made because software assumes a particular version will be installed.

  So, uh, yea.  I'd love to see a mature, stable Twisted (or more likely Twisted subset) in the standard library.  I think a few parts of Twisted are even almost ready for this to be considered, but aside from some of the things in twisted/python/, much of it still requires work.

  Jp



From LAFORGE49 at peoplepc.com  Mon Oct 11 15:40:43 2004
From: LAFORGE49 at peoplepc.com (William la Forge Jr)
Date: Mon, 11 Oct 2004 15:40:43 -0400
Subject: [Twisted-Python] The Anything Box
Message-ID: <NPEFJHLAHPGFKBEPBJJNOEKKCAAA.LAFORGE49@peoplepc.com>

Woops! I forgot to mention the URL:

http://compstrm.sourceforge.net

Also, here's a snippet from that page describing the project
a little better:

The Anything Box

This is a new kind of database. You can put anything into it, and make any
kind of query to access its contents. It works with structures and complexes
of structures using very scalable technology. And you can view current
state, past state, and changes over time. It is an extensible system that
begins with a rich set of metadata for describing data and operations, with
operations and data properties grouped into capabilities, which in turn are
used to construct data types.

The database is implemented over BSDDB, a transactional store that is also
used by MySQL, using 14 b-tree files to support a wide range of queries. The
basic storage element is (time, fileid, propertyid, oldValue, newValue), but
with additional support for document storage. The property/value pairs
assigned to a file for a given time are then computed based on a
reverse-chronological extraction process.

This Anything Box is fully integrated with Twisted, a fast asynchronous
server that supports both a web server and a very wide range of additional
protocols. The Anything Box itself is implemented using coroutines, making
the code more readable/maintainable than most asynchronous styles. It is
this coroutine technology, implemented as a computational stream, that the
CompStrm project name came from.

User Process Management

All user processes are coroutines, implemented for fast response rather than
throughput. Process management is handled through flow control, with
processes automatically terminated when no more output is desired. Any
process can interact with its user; loosely coupled (background) processes
will be implemented to pend when user input is requested.

Persistent Garbage Collection

Without some form of garbage collection, applications become much more
complex--especially when dealing with complex structures. Unfortunately,
garbage collection normally applies only to in-memory (non-persistent)
structures. The Anything Box implements persistent garbage collection by
using two different kinds of organization. First, data is organized into
directories based on data type, each directory having an associated
descriptor defining the type and its capabilities. Some data types are then
identified as well-known (protected) and are not subject to garbage
collection.

A second organization is by groups. Data elements with the member capability
are always tagged with the id of the id of the lead data element for their
group. References to a data element (from another element) are identified as
either weak or strong (non-weak). And when a strong reference to a data
element from another in the same group is destroyed, then the previously
referenced data element is a potential candidate for automatic garbage
collection--as all members of a group must be strongly referenced by another
element in the same group. (This of course places a design constraint on
applications, that weak references be used to avoid any strong cyclic
references.)

The TKI Shell

While the base-level operations are implemented in Python coroutines, the
Anything Box includes the TKI shell. TKI commands are operations defined by
the Anything Box, which in turn may be implemented as either Python
coroutines or TKI scripts. The shell itself is quite simple, supporting
argument passing to scripts, the assignment of property values to script
variables, and environment variables for navigating space and time and for
generating unique names. The richness of the TKI shell comes from the
numerous operations defined by the Anything Box, which includes support for
set values, lists and dictionaries, and for invoking (mapping) an operation
over the contents of a set, list or dictionary.





From glyph at divmod.com  Mon Oct 11 15:51:11 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 11 Oct 2004 15:51:11 -0400
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <20041011193116.19317.600650232.divmod.quotient.1200@ohm>
References: <20041011193116.19317.600650232.divmod.quotient.1200@ohm>
Message-ID: <1097524270.31837.8.camel@kazekage>

On Mon, 2004-10-11 at 15:31, exarkun at divmod.com wrote:

>   So, uh, yea.  I'd love to see a mature, stable Twisted (or more
> likely Twisted subset) in the standard library.  I think a few parts
> of Twisted are even almost ready for this to be considered, but aside
> from some of the things in twisted/python/, much of it still requires
> work.

I had almost finished composing an identical email when this one
arrived.  So, I'll play devil's advocate:

I think that part of the question Ed is asking is, "when can we have
some of Twisted in the stdlib rather than asyncore".  Considering how
ancient and creaky asyncore is looking right now, I think it might be
valid to consider some small subset of Twisted that subsumes asyncore's
functionality for inclusion in the standard library.

Of course this should be post-split.  I don't think it makes much sense
to try to do something like this now.

Were this to happen, I would suggest it be in a different module name,
"twistedcore" or something, to allow a stable interface to remain in the
standard library, which would have a hope of being easily
plug-compatible with future Twisted versions, but would not hamstring
the ability of the Twisted team to put out new versions.

This might also assuage Guido's concerns about framework-structured
code; we could elide utilities such as twistd, and instead provide
convenience functions for users to write their own daemonization, et.
al.  This would at least provide a minimal platform for running
Twisted-compatible event handlers, to even out the curve between
"install Twisted as a dependency" and "just run this stand-alone
script".




From tv at twistedmatrix.com  Mon Oct 11 15:54:13 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 11 Oct 2004 22:54:13 +0300
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <200410111134.34759.general@eepatents.com>
References: <200410111134.34759.general@eepatents.com>
Message-ID: <416AE4E5.8050902@twistedmatrix.com>

Ed Suominen wrote:
> I'd like to start a discussion on whether Twisted ought to be a part of 
> Python's standard library. I understand some of the developers think it 
> should not, but I personally don't like seeing far inferior networking 
> code sitting there in stdlib. Inclusion in the stdlib carries an 
> implied endorsement, and that endorsement should be going to Twisted, 
> in my view.

Exarkun pointed out some really good reasons why Twisted should not be
in stdlib. I pretty much agree with him.

However, there is something that could be done to stdlib:

refactor the various networking things there so, that they are built
out of modules that only implement protocol logic, and blocking
"runners" for the protocol logic.

That is, separate the socket calls from the protocol. The interface
between them would probably look a lot like a twisted Protocol, and
hopefully would enable code reuse (in either direction).



From exarkun at divmod.com  Mon Oct 11 19:48:27 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Mon, 11 Oct 2004 23:48:27 GMT
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <416AE4E5.8050902@twistedmatrix.com>
Message-ID: <20041011234827.19317.1098538043.divmod.quotient.1288@ohm>

On Mon, 11 Oct 2004 22:54:13 +0300, Tommi Virtanen <tv at twistedmatrix.com> wrote:
>Ed Suominen wrote:
> > I'd like to start a discussion on whether Twisted ought to be a part of 
> > Python's standard library. I understand some of the developers think it 
> > should not, but I personally don't like seeing far inferior networking 
> > code sitting there in stdlib. Inclusion in the stdlib carries an 
> > implied endorsement, and that endorsement should be going to Twisted, 
> > in my view.
> 
> Exarkun pointed out some really good reasons why Twisted should not be
> in stdlib. I pretty much agree with him.
> 
> However, there is something that could be done to stdlib:
> 
> refactor the various networking things there so, that they are built
> out of modules that only implement protocol logic, and blocking
> "runners" for the protocol logic.
> 
> That is, separate the socket calls from the protocol. The interface
> between them would probably look a lot like a twisted Protocol, and
> hopefully would enable code reuse (in either direction).
> 

  I've always operated under the assumption that this is already almost trivally possible.  Let me explore this for a moment...

    class CrummyTCPTransport:
        disconnecting = False  # HAHAHA
        def __init__(self, socket, protocol):
            self.socket = socket
            self.protocol = protocol

        # Skip boring stuff like getHost etc
        def write(self, bytes):
            self.socket.sendall(bytes)

        def writeSequence(self, iovec):
            self.write("".join(iovec))

        def run(self):
            while True:
                b = self.socket.recv(1024)
                if not b:
                    break
                self.protocol.dataReceived(b)

    s = socket.socket()
    s.connect(...)
    p = imap4.IMAP4Client()
    t = CrummyTCPTransport(s, p)
    p.makeConnection(t)
    t.run()

  Reasonable?  Crappy?  Anyway, that's how I've always seen a simplistic, reactorless program using Twisted protocols.  It's ugly, but I think it should work (and compare it to trying to make a stdlib protocol implementation work with Twisted!)

  Which of Twisted's protocol implementations are mature enough for the standard library though?  I can think of one, maybe (not counting all the  useless ones like ident), and I wrote it so I'm probably biased.

  Jp



From exarkun at divmod.com  Mon Oct 11 19:55:39 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Mon, 11 Oct 2004 23:55:39 GMT
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <1097524270.31837.8.camel@kazekage>
Message-ID: <20041011235539.19317.2108823534.divmod.quotient.1291@ohm>

On Mon, 11 Oct 2004 15:51:11 -0400, Glyph Lefkowitz <glyph at divmod.com> wrote:
>On Mon, 2004-10-11 at 15:31, exarkun at divmod.com wrote:
> 
> >   So, uh, yea.  I'd love to see a mature, stable Twisted (or more
> > likely Twisted subset) in the standard library.  I think a few parts
> > of Twisted are even almost ready for this to be considered, but aside
> > from some of the things in twisted/python/, much of it still requires
> > work.
> 
> I had almost finished composing an identical email when this one
> arrived.  So, I'll play devil's advocate:
> 
> I think that part of the question Ed is asking is, "when can we have
> some of Twisted in the stdlib rather than asyncore".  Considering how
> ancient and creaky asyncore is looking right now, I think it might be
> valid to consider some small subset of Twisted that subsumes asyncore's
> functionality for inclusion in the standard library.
> 
> Of course this should be post-split.  I don't think it makes much sense
> to try to do something like this now.

  Definitely.

> 
> Were this to happen, I would suggest it be in a different module name,
> "twistedcore" or something, to allow a stable interface to remain in the
> standard library, which would have a hope of being easily
> plug-compatible with future Twisted versions, but would not hamstring
> the ability of the Twisted team to put out new versions.

  Obviously the package should be named "internet" :)

> 
> This might also assuage Guido's concerns about framework-structured
> code; we could elide utilities such as twistd, and instead provide
> convenience functions for users to write their own daemonization, et.
> al.  This would at least provide a minimal platform for running
> Twisted-compatible event handlers, to even out the curve between
> "install Twisted as a dependency" and "just run this stand-alone
> script".
> 

  So what would actually need to be fixed for this to happen?

    1) Readable abstract reactor implementation

    2) Producer/Consumer API repair

    3) Non-recursive Deferred implementation (or "internet" could be Deferred-less, but that would seem to suck)

    4) Less terrifying Failure implementation (or, again, Failure-less in the stdlib)

    5) Better test coverage (for example, more than one unit test for
       writeSequence)

    6) Latexified documentation (probably automatable)

    7) Something with Interfaces

  Anything else?

  Jp



From serj_trejo at hotmail.com  Mon Oct 11 22:36:11 2004
From: serj_trejo at hotmail.com (Sergio Trejo)
Date: Mon, 11 Oct 2004 22:36:11 -0400
Subject: [Twisted-Python] Twisted in Python STDLIB?
Message-ID: <BAY12-F7lT2NqFJ3sl30003ef0f@hotmail.com>

Interesting idea, especially when event-based programming is starting to get 
more attention in the Java world.

See this article posted by Cnet today:

http://news.com.com/A+new+event+in+programming/2100-1007_3-5406253.html

Serg

>From: Ed Suominen <general at eepatents.com>
>Reply-To: Twisted general discussion <twisted-python at twistedmatrix.com>
>To: twisted-python at twistedmatrix.com
>Subject: [Twisted-Python] Twisted in Python STDLIB?
>Date: Mon, 11 Oct 2004 11:34:34 -0700
>
>I'd like to start a discussion on whether Twisted ought to be a part of
>Python's standard library. I understand some of the developers think it
>should not, but I personally don't like seeing far inferior networking
>code sitting there in stdlib. Inclusion in the stdlib carries an
>implied endorsement, and that endorsement should be going to Twisted,
>in my view.
>
>Has Guido et al. ever expressed any viewpoint on Twisted? It is
>certainly very Pythonic, and though I have only limited Python and OOP
>experience to express this viewpoint, it is the best-written Python
>code I've ever seen. (Now, if only I could say the same for the
>commenting...)
>
>Ed Suominen
>Registered Patent Agent
>Open-Source Software Author (yes, both...)
>Web Site: http://www.eepatents.com
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_________________________________________________________________
Don't just search. Find. Check out the new MSN Search! 
http://search.msn.com/




From bob at redivi.com  Mon Oct 11 23:04:32 2004
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 11 Oct 2004 23:04:32 -0400
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <BAY12-F7lT2NqFJ3sl30003ef0f@hotmail.com>
References: <BAY12-F7lT2NqFJ3sl30003ef0f@hotmail.com>
Message-ID: <70AD60AC-1BFB-11D9-A52F-000A95686CD8@redivi.com>


On Oct 11, 2004, at 10:36 PM, Sergio Trejo wrote:

> Interesting idea, especially when event-based programming is starting 
> to get more attention in the Java world.
>
> See this article posted by Cnet today:
>
> http://news.com.com/A+new+event+in+programming/2100-1007_3-5406253.html

That's pretty funny, because I developed an event driven RFID framework 
in Python+Twisted over two years ago :)

Sounds like they've got something really scalable on their hands...
"EPL?s roots stem from another successful programming language, SQL"

-bob



From golux at comcast.net  Tue Oct 12 00:02:19 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Tue, 12 Oct 2004 00:02:19 -0400
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <70AD60AC-1BFB-11D9-A52F-000A95686CD8@redivi.com>
References: <BAY12-F7lT2NqFJ3sl30003ef0f@hotmail.com>
	<70AD60AC-1BFB-11D9-A52F-000A95686CD8@redivi.com>
Message-ID: <416B574B.6070004@comcast.net>

Bob Ippolito wrote:
> 
> On Oct 11, 2004, at 10:36 PM, Sergio Trejo wrote:
> 
>> Interesting idea, especially when event-based programming is starting 
>> to get more attention in the Java world.
>>
>> See this article posted by Cnet today:
>>
>> http://news.com.com/A+new+event+in+programming/2100-1007_3-5406253.html
> 
> That's pretty funny, because I developed an event driven RFID framework 
> in Python+Twisted over two years ago :)
> 
> Sounds like they've got something really scalable on their hands...
> "EPL?s roots stem from another successful programming language, SQL"

Right.  Sez here that "events" are "the next big thing" ...
translation:  a new buzzword has bubbled up into the
B.S. computer-talk mags that pointy-haired bosses read, so
now yet another nice computing paradigm will now become
hopelessly muddled by the addition of several competing
"standard" event markup languages, each one with its
own set of stupidities and abuses, and M$'s own proprietary
implementation of their own variation of one of them,
complete with security horrors and a partially-hidden
api that neither conforms to its own documentation nor
maps nicely to any open-source event-driven library.

Oh joy.

- Steve



From symbiont at berlios.de  Tue Oct 12 01:40:59 2004
From: symbiont at berlios.de (Jeff Pitman)
Date: Tue, 12 Oct 2004 13:40:59 +0800
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <416B574B.6070004@comcast.net>
References: <BAY12-F7lT2NqFJ3sl30003ef0f@hotmail.com>
	<70AD60AC-1BFB-11D9-A52F-000A95686CD8@redivi.com>
	<416B574B.6070004@comcast.net>
Message-ID: <200410121341.00011.symbiont@berlios.de>

On Tuesday 12 October 2004 12:02, Stephen Waterbury wrote:
> M$'s own proprietary
> implementation of their own variation of one of them

Done: http://research.microsoft.com/Comega/,  Polyphonic C# and Xen, X# 
has been merged into Cw.  A google search shows some blogs commenting 
on it. 

have fun,
-- 
-jeff



From tv at twistedmatrix.com  Tue Oct 12 02:47:16 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 12 Oct 2004 09:47:16 +0300
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <20041011234827.19317.1098538043.divmod.quotient.1288@ohm>
References: <20041011234827.19317.1098538043.divmod.quotient.1288@ohm>
Message-ID: <416B7DF4.9030304@twistedmatrix.com>

exarkun at divmod.com wrote:
> Which of Twisted's protocol implementations are mature enough for the
> standard library though?  I can think of one, maybe (not counting all
> the  useless ones like ident), and I wrote it so I'm probably biased.

Maybe think of it the other way around. Which protocols in stdlib
were reimplemented in twisted just because twisted couldn't use
the stdlib implementation?




From jean-marc.pouchoulon at ac-montpellier.fr  Tue Oct 12 07:34:17 2004
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc.pouchoulon at ac-montpellier.fr)
Date: Tue, 12 Oct 2004 13:34:17 +0200
Subject: [Twisted-Python] changing password remotely with twisted.conch 
Message-ID: <416BC139.7080008@ac-montpellier.fr>

Hi,
Due to specificity of passwd command, I am not sure it's a goof idea to 
do that but I try to change the root password on  remote machine as I 
can do it with pexpect

The program seems to wait for a password's confirmation. 
2004/10/12 13:05 CEST [SimpleTransport,client] starting service 
ssh-connection
2004/10/12 13:05 CEST [SimpleTransport,client] opening channel 0 with 
65536 32768
2004/10/12 13:05 CEST [SimpleTransport,client] sending request for 
channel 0, request exec
2004/10/12 13:05 CEST [SimpleTransport,client] got extended data 1 'New 
UNIX password: '
2004/10/12 13:05 CEST [SimpleTransport,client] got extended data 1 
'Retype new UNIX password: '

here it is an extract of my CatChannel(channel.SSHChannel)  class.

    CMD = 'passwd'
    def channelOpen(self, ignoredData):
        self.data = ''
        d = self.conn.sendRequest(self, 'exec', common.NS(CMD), 
wantReply = 1)
        d.addCallback(self._cbRequest)

    def _cbRequest(self, ignored):
         self.write('myrootpassword')
         self.conn.sendEOF(self)
   
    def dataReceived(self, data):
         self.write('myrootpassword')
         self.conn.sendEOF(self)

Did anyone done  it ?
Thanks for you answers. ( and thanks to support my basic english ...)



From andrew-twisted at puzzling.org  Tue Oct 12 08:06:01 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 12 Oct 2004 14:06:01 +0200
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <20041011234827.19317.1098538043.divmod.quotient.1288@ohm>
References: <416AE4E5.8050902@twistedmatrix.com>
	<20041011234827.19317.1098538043.divmod.quotient.1288@ohm>
Message-ID: <20041012120601.GB5229@frobozz>

On Mon, Oct 11, 2004 at 11:48:27PM +0000, exarkun at divmod.com wrote:
[...]
> 
>     s = socket.socket()
>     s.connect(...)
>     p = imap4.IMAP4Client()
>     t = CrummyTCPTransport(s, p)
>     p.makeConnection(t)
>     t.run()
> 
>   Reasonable?  Crappy?  Anyway, that's how I've always seen a simplistic,
>   reactorless program using Twisted protocols.  It's ugly, but I think it
>   should work (and compare it to trying to make a stdlib protocol
>   implementation work with Twisted!)

Well, it'll work for single-socket protocols.  It won't work for, say, FTP.
Of course, there's a reason why we wrote a framework ;)

-Andrew.




From z3p at twistedmatrix.com  Tue Oct 12 10:09:02 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Tue, 12 Oct 2004 10:09:02 -0400
Subject: [Twisted-Python] changing password remotely with twisted.conch
In-Reply-To: <416BC139.7080008@ac-montpellier.fr>
References: <416BC139.7080008@ac-montpellier.fr>
Message-ID: <1097590142.17179.4.camel@petra>

On Tue, 2004-10-12 at 13:34 +0200,
jean-marc.pouchoulon at ac-montpellier.fr wrote:
> The program seems to wait for a password's confirmation. 
> 2004/10/12 13:05 CEST [SimpleTransport,client] starting service 
> ssh-connection
> 2004/10/12 13:05 CEST [SimpleTransport,client] opening channel 0 with 
> 65536 32768
> 2004/10/12 13:05 CEST [SimpleTransport,client] sending request for 
> channel 0, request exec
> 2004/10/12 13:05 CEST [SimpleTransport,client] got extended data 1
> 'New 
> UNIX password: '
> 2004/10/12 13:05 CEST [SimpleTransport,client] got extended data 1 
> 'Retype new UNIX password: '
> 
> here it is an extract of my CatChannel(channel.SSHChannel)  class.
> 
>     CMD = 'passwd'
>     def channelOpen(self, ignoredData):
>         self.data = ''
>         d = self.conn.sendRequest(self, 'exec', common.NS(CMD), 
> wantReply = 1)
>         d.addCallback(self._cbRequest)
> 
>     def _cbRequest(self, ignored):
>          self.write('myrootpassword')
>          self.conn.sendEOF(self)
>    
>     def dataReceived(self, data):
>          self.write('myrootpassword')
>          self.conn.sendEOF(self)

There are a couple problems with this code.

1) The messages "New UNIX Password" and "Retype UNIX Password" aren't
going to dataReceived, but to errReceived, which is why they're showing
up in to the log.
2) You're sending EOF after writing the first password.  What EOF means
is "I will send no more data." which clearly isn't what you want.

You can probably get away with:

    def _cbRequest(self, ignored):
        self.write('newpassword\n')
        self.write('newpassword\n')
        self.loseConnection()

But I'd try it first.  Hope this has helped.

-p	
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20041012/46599497/attachment.pgp 

From tv at twistedmatrix.com  Tue Oct 12 14:47:14 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 12 Oct 2004 21:47:14 +0300
Subject: [Twisted-Python] changing password remotely with twisted.conch
In-Reply-To: <416BC139.7080008@ac-montpellier.fr>
References: <416BC139.7080008@ac-montpellier.fr>
Message-ID: <416C26B2.7060009@twistedmatrix.com>

jean-marc.pouchoulon at ac-montpellier.fr wrote:
> Due to specificity of passwd command, I am not sure it's a goof idea to 
> do that but I try to change the root password on  remote machine as I 
> can do it with pexpect

It's a horrible idea. Even worse when combined with expect.

If you insist on doing that, you should look at chpasswd. Preferably
with the -e option.



From exarkun at divmod.com  Tue Oct 12 16:19:04 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 12 Oct 2004 20:19:04 GMT
Subject: [Twisted-Python] Re: [twisted+wxPython] widgets do not work?
In-Reply-To: <ckh5u8$rod$1@atlantis.news.tpi.pl>
Message-ID: <20041012201904.1379.3682747.divmod.quotient.84@ohm>

On Tue, 12 Oct 2004 19:58:38 +0200, Taki Jeden <bartekgorny at interia.pl> wrote:
>
> Hi
> 
> Anybody used wxPython with twisted?
> 
> I started putting together a Twisted-based app with wx GUI, and the widgets
> just don't work - some controls do not show up etc. - at least on my
> system.
> 
> For example, if I just take the wxdemo.py shipped with Twisted, and add to
> it a static text, it doesn't show - while if I change 
>         reactor.registerWxApp(app)
>         reactor.run(0)
> into 
>         app.MainLoop(0)
> the text is there. What the heck is wrong with this? Or am I doing something
> wrong? Does the same work at yours?
> 
> Bartek
> 

  There are several known problems with Twisted/wxPython integration, but this doesn't sound like one of them.  Could you include your modified wxdemo.py?

  Jp



From jritter at bektel.com  Tue Oct 12 16:37:06 2004
From: jritter at bektel.com (Josh Ritter)
Date: Tue, 12 Oct 2004 15:37:06 -0500
Subject: [Twisted-Python] Re: [twisted+wxPython] widgets do not work?
References: <20041012201904.1379.3682747.divmod.quotient.84@ohm>
Message-ID: <000501c4b09b$3d8089b0$0300000a@spooge>


I recently posted about this... while the code I presented allowed the
application to create it's controls, I was still having problems...

I switched to this and haven't had a problem since:

class MoMWorldServer(wx.App):
    def OnInit(self):
        #snip
        reactor.startRunning()
        wx.EVT_TIMER(self,999999,self.OnTimer)
        self.timer=wx.Timer(self,999999)
        self.timer.Start(250,False)
        return True

    def OnTimer(self,event):
        reactor.runUntilCurrent()
        reactor.doIteration(0)

-Josh Ritter
Technical Director
http://www.prairiegames.com


----- Original Message -----
From: <exarkun at divmod.com>
To: <python-list at python.org>; <twisted-python at twistedmatrix.com>
Sent: Tuesday, October 12, 2004 3:19 PM
Subject: [Twisted-Python] Re: [twisted+wxPython] widgets do not work?


> On Tue, 12 Oct 2004 19:58:38 +0200, Taki Jeden <bartekgorny at interia.pl>
wrote:
> >
> > Hi
> >
> > Anybody used wxPython with twisted?
> >
> > I started putting together a Twisted-based app with wx GUI, and the
widgets
> > just don't work - some controls do not show up etc. - at least on my
> > system.
> >
> > For example, if I just take the wxdemo.py shipped with Twisted, and add
to
> > it a static text, it doesn't show - while if I change
> >         reactor.registerWxApp(app)
> >         reactor.run(0)
> > into
> >         app.MainLoop(0)
> > the text is there. What the heck is wrong with this? Or am I doing
something
> > wrong? Does the same work at yours?
> >
> > Bartek
> >
>
>   There are several known problems with Twisted/wxPython integration, but
this doesn't sound like one of them.  Could you include your modified
wxdemo.py?
>
>   Jp
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From guy at r-e-d.co.nz  Wed Oct 13 00:26:23 2004
From: guy at r-e-d.co.nz (Guy Robinson)
Date: Wed, 13 Oct 2004 17:26:23 +1300
Subject: [Twisted-Python] Atop questions
Message-ID: <416CAE6F.3070709@r-e-d.co.nz>

I posted this to Divmod mailing list, but perhaps that's not the right place
for these sort of questions?

Hello,

I've just started to play around with Atop. I'm wanting to store data on what
could get up to 500,000 unique products. The structure of the data for each item
is the same or similar. There will be references between data in different
products. Frequent querying of products will occur from the client application.

Should I use nested Pools or, SubStores and Pools/items within each substore?

  From the documentation I can find, the advantages of Pools are easier
referencing and indexing, while substores present better security features and
scalability(less memory)? The documentation also says substores are used more
frequently in most applications. Why?

Are there other issues I should consider?

Another question :-)

A number of the atop examples define Interface classes even though they have no
methods. Is this to make upgrading of object schema easier? Why do this?

TIA,

Guy







From jean-marc.pouchoulon at ac-montpellier.fr  Wed Oct 13 08:05:58 2004
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc.pouchoulon at ac-montpellier.fr)
Date: Wed, 13 Oct 2004 14:05:58 +0200
Subject: [Twisted-Python] changing password remotely with twisted.conch
In-Reply-To: <1097590142.17179.4.camel@petra>
References: <416BC139.7080008@ac-montpellier.fr>
	<1097590142.17179.4.camel@petra>
Message-ID: <416D1A26.8000209@ac-montpellier.fr>

it works with chpasswd.
Thanks a lot. Twisted is really impressive.

>
>You can probably get away with:
>
>    def _cbRequest(self, ignored):
>        self.write('newpassword\n')
>        self.write('newpassword\n')
>        self.loseConnection()
>
>But I'd try it first.  Hope this has helped.
>
>-p	
>  
>
>------------------------------------------------------------------------
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>  
>




From thomas.weholt at gmail.com  Wed Oct 13 08:36:18 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Wed, 13 Oct 2004 14:36:18 +0200
Subject: [Twisted-Python] Merging databases the Twisted way
Message-ID: <ffb7b7f804101305361393ed8f@mail.gmail.com>

Hi,

I got a server running a SQLite-database. Sometimes I need to merge
data from another SQLite database into the master. So far I've done
blocking old-style read-some from source, write-some to destination
stuff using the standard pysqlite-database module, but as mentioned,
it blocks the server. AFAIK SQLite only allows one connection to the
database as well so that might make it harder to implement a
non-blocking solution.

If anybody has tips/hints or examples directly related to this or any
documentation on DB-operations using Twisted that's a bit more
detailed and rich than the one on www.twistedmatrix.com I'd be very
grateful. I'm having a hard time getting the hang of how to use
twisted and databases in a non-blocking way. Everything seems overly
complicated when done the Twisted way. Perhaps it's just me ...

NB! I mostly do web-server stuff using SQLite as database. 

-- 
Mvh/Best regards,
Thomas Weholt
http://www.weholt.org



From glyph at divmod.com  Wed Oct 13 09:36:32 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 13 Oct 2004 09:36:32 -0400
Subject: [Twisted-Python] Atop questions
In-Reply-To: <416CAE6F.3070709@r-e-d.co.nz>
References: <416CAE6F.3070709@r-e-d.co.nz>
Message-ID: <1097674592.3861.16.camel@kazekage>

On Wed, 2004-10-13 at 00:26, Guy Robinson wrote:
> I posted this to Divmod mailing list, but perhaps that's not the right place
> for these sort of questions?

The divmod list is the correct place to ask.  We are very busy.  It may
take more than a day for the question to get answered :)




From itamar at itamarst.org  Wed Oct 13 09:39:13 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 13 Oct 2004 09:39:13 -0400
Subject: [Twisted-Python] Merging databases the Twisted way
In-Reply-To: <ffb7b7f804101305361393ed8f@mail.gmail.com>
References: <ffb7b7f804101305361393ed8f@mail.gmail.com>
Message-ID: <1097674753.17764.64.camel@sheriffpony>

twisted.enterprise.adbapi is the traditional way - it presents a
non-blocking API to databases by using a thread-pool.

http://itamarst.org/writings/etech04/twisted_internet-91.html has some
examples.




From gh at ghaering.de  Wed Oct 13 09:40:26 2004
From: gh at ghaering.de (Gerhard Haering)
Date: Wed, 13 Oct 2004 15:40:26 +0200
Subject: [Twisted-Python] Merging databases the Twisted way
In-Reply-To: <ffb7b7f804101305361393ed8f@mail.gmail.com>
References: <ffb7b7f804101305361393ed8f@mail.gmail.com>
Message-ID: <20041013134026.GA3010@mylene.ghaering.de>

On Wed, Oct 13, 2004 at 02:36:18PM +0200, Thomas Weholt wrote:
> Hi,
> 
> I got a server running a SQLite-database. Sometimes I need to merge
> data from another SQLite database into the master. So far I've done
> blocking old-style read-some from source, write-some to destination
> stuff using the standard pysqlite-database module, but as mentioned,
> it blocks the server.

If you haven't done so already, maybe you can try to ATTACH (SQLITE
SQL command) the other database and then merge using SQL commands.
This should be faster and easier than going through Python.

> AFAIK SQLite only allows one connection to the database as well so
> that might make it harder to implement a non-blocking solution.
> [...]

Basically, one open transaction per database. Concurrent access will
be blocked, for as long as the timeout parameter of the connect()
call.

With PySQLite2/SQLite3 it will be much better, because SQLite3 has
much more fine-grained locking.

SQLite also features an API call to register a callback that will be
invoked every n SQLite VM operations. I'll wrap it one day, maybe the
Twisted folks can make some use of it for a new SQLiteReactor or
whatever.

-- Gerhard (subscribed, but still hasn't used Twisted for real, yet)



From thomas.weholt at gmail.com  Thu Oct 14 11:41:09 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Thu, 14 Oct 2004 17:41:09 +0200
Subject: [Twisted-Python] Making database-code Twisted-friendly
Message-ID: <ffb7b7f8041014084146ad8b96@mail.gmail.com>

Hi,

Attached is a database-module I've created and used quite a lot and so
far been very happy with. The problem is that it's not
Twisted-compatible at all. It blocks and I need something light in my
current project to merge a lot of data from one database into another
and I'd like to use this library to do it. Perhpas somebody can have
use for it as well??

My ideal form of working with databases is shown in the README.txt
file. I'd like to be able to something similar using Twisted in the
lower layers, not blocking.

In short: What I'm looking for is comments on the concept and code in
general, but more importantly a simple example on how to write similar
code in a Twisted-friendly manner so it doesn't block, or if you're so
inclined, feel free to add a Twisted-compatible Connection-object that
doesn't block and return data in the same manner as the implemented
objects do :-).

NB! If my attachment causes problems I'm terribly sorry, but my
current webserver is unavailable at the moment so I have no other
place to post the code ( except making an entire new project at
sourceforge, which seemed like overkill ).

Best regards,
Thomas
-------------- next part --------------
A non-text attachment was scrubbed...
Name: hs.zip
Type: application/zip
Size: 16827 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20041014/f43b0cd7/attachment.zip 

From anthony at interlink.com.au  Thu Oct 14 13:28:18 2004
From: anthony at interlink.com.au (Anthony Baxter)
Date: Fri, 15 Oct 2004 03:28:18 +1000
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <1097524270.31837.8.camel@kazekage>
References: <20041011193116.19317.600650232.divmod.quotient.1200@ohm>
	<1097524270.31837.8.camel@kazekage>
Message-ID: <416EB732.5040805@interlink.com.au>

Glyph Lefkowitz wrote:
> Were this to happen, I would suggest it be in a different module name,
> "twistedcore" or something, to allow a stable interface to remain in the
> standard library, which would have a hope of being easily
> plug-compatible with future Twisted versions, but would not hamstring
> the ability of the Twisted team to put out new versions.

This seems like a good thing to aim for, say, inclusion in 2.5. I don't
think there's any chance of a significant amount of twisted being
included in the stdlib - for instance, the Failure code absolutely
wouldn't be accepted (it's way nasty).

asyncore is ugly, brittle, and a pain in the arse. A replacement for
it would be most excellent.

Key things to remember about stdlib inclusion (some of these have
already been mentioned, but it doesn't hurt to emphasise them)

   - Backwards compatibility is _much_ stronger for the stdlib.
     At a minimum, you're looking at one release with a
     DeprecationWarning, and a second to rip the code out.
     At 12-18 months per major release, that's 2.5 to 3 years.
   - No-one's going to accept something for the stdlib that
     requires an external package to be useful.
   - No-one's going to accept a new significant lump of code
     unless there's someone (or, even better, more than one
     person) who's going to be happy to maintain it on an
     ongoing basis.

And finally, there's absolutely no chance of any of this
happening for 2.4. I'm cutting beta1 after I get some sleep,
so the window there is completely closed. On the positive
side, there's plenty of time to think about something for
2.5. <wink>

Anthony
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From glyph at divmod.com  Thu Oct 14 14:28:12 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 14 Oct 2004 14:28:12 -0400
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <416EB732.5040805@interlink.com.au>
References: <20041011193116.19317.600650232.divmod.quotient.1200@ohm>
	<1097524270.31837.8.camel@kazekage> <416EB732.5040805@interlink.com.au>
Message-ID: <1097778492.7783.4.camel@kazekage>

On Thu, 2004-10-14 at 13:28, Anthony Baxter wrote:

> This seems like a good thing to aim for, say, inclusion in 2.5. I don't
> think there's any chance of a significant amount of twisted being
> included in the stdlib - for instance, the Failure code absolutely
> wouldn't be accepted (it's way nasty).

We should have a conversation about that at some point - I don't
disagree that the code is nasty, but there are pieces of very core
Twisted code that depend upon it.  It only exists because Python's
native representation of tracebacks is way nastier. ;-)

Other than that, I completely agree with your post.  That, and I am
definitely NOT the person to ask to maintain the stdlib variant...




From bob at redivi.com  Thu Oct 14 14:50:36 2004
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 14 Oct 2004 14:50:36 -0400
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <1097778492.7783.4.camel@kazekage>
References: <20041011193116.19317.600650232.divmod.quotient.1200@ohm>
	<1097524270.31837.8.camel@kazekage>
	<416EB732.5040805@interlink.com.au>
	<1097778492.7783.4.camel@kazekage>
Message-ID: <EF6D613F-1E11-11D9-BD1D-000A95686CD8@redivi.com>


On Oct 14, 2004, at 2:28 PM, Glyph Lefkowitz wrote:

> On Thu, 2004-10-14 at 13:28, Anthony Baxter wrote:
>
>> This seems like a good thing to aim for, say, inclusion in 2.5. I 
>> don't
>> think there's any chance of a significant amount of twisted being
>> included in the stdlib - for instance, the Failure code absolutely
>> wouldn't be accepted (it's way nasty).
>
> We should have a conversation about that at some point - I don't
> disagree that the code is nasty, but there are pieces of very core
> Twisted code that depend upon it.  It only exists because Python's
> native representation of tracebacks is way nastier. ;-)
>
> Other than that, I completely agree with your post.  That, and I am
> definitely NOT the person to ask to maintain the stdlib variant...

Well from what I remember from the last time I rewrote Failure, the 
gnarlyness is used only to "persist" a traceback longer than it should 
really exist.  Perhaps there should be an understandable and high 
performance version of Failure that is used by default, with a separate 
debugerriffic version can be monkeypatched or adapted in when it's 
actually wanted?

-bob



From andrew-twisted at puzzling.org  Thu Oct 14 16:03:52 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 14 Oct 2004 22:03:52 +0200
Subject: [Twisted-Python] Making database-code Twisted-friendly
In-Reply-To: <ffb7b7f8041014084146ad8b96@mail.gmail.com>
References: <ffb7b7f8041014084146ad8b96@mail.gmail.com>
Message-ID: <20041014200352.GC5055@frobozz>

On Thu, Oct 14, 2004 at 05:41:09PM +0200, Thomas Weholt wrote:
[...]
> 
> My ideal form of working with databases is shown in the README.txt
> file. I'd like to be able to something similar using Twisted in the
> lower layers, not blocking.

Without commenting on the Twisted issues of this at all, have you seen
SQLObject?  At a glance, it seems to be quite similar in concept.

http://sqlobject.org/

-Andrew.




From thomas.weholt at gmail.com  Thu Oct 14 17:29:52 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Thu, 14 Oct 2004 23:29:52 +0200
Subject: [Twisted-Python] Making database-code Twisted-friendly
In-Reply-To: <20041014200352.GC5055@frobozz>
References: <ffb7b7f8041014084146ad8b96@mail.gmail.com>
	<20041014200352.GC5055@frobozz>
Message-ID: <ffb7b7f80410141429561c845f@mail.gmail.com>

Yepp!! Looks good except for the fact that it only deals with objects,
I need plain old dictionaries all the way. Truth be said, I haven't
played with it extensivly, so it might support that. I'll check into
it. Thanks.

Thomas


On Thu, 14 Oct 2004 22:03:52 +0200, Andrew Bennetts
<andrew-twisted at puzzling.org> wrote:
> On Thu, Oct 14, 2004 at 05:41:09PM +0200, Thomas Weholt wrote:
> [...]
> >
> > My ideal form of working with databases is shown in the README.txt
> > file. I'd like to be able to something similar using Twisted in the
> > lower layers, not blocking.
> 
> Without commenting on the Twisted issues of this at all, have you seen
> SQLObject?  At a glance, it seems to be quite similar in concept.
> 
> http://sqlobject.org/
> 
> -Andrew.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


-- 
Mvh/Best regards,
Thomas Weholt
http://www.weholt.org



From Andreas.Ames at tenovis.com  Fri Oct 15 11:47:51 2004
From: Andreas.Ames at tenovis.com (Ames Andreas (MPA/DF))
Date: Fri, 15 Oct 2004 17:47:51 +0200
Subject: [Twisted-Python] How to stuff new events into the core event loop?
Message-ID: <788E231C269961418F38D3E360D1652526CA48@tndefr-ws00021.tenovis.corp.lan>

Hello all,

I'm pretty new to twisted activity (just some doc and code reading so
far).  So please be forbearing if the answers to the following
questions are obvious.

I'm wrapping some C library which implements some networked client to
use it from python, i.e. from a twisted app.  Within the guts of this
lib there is a thread created (i.e. it is normally never seen by
python).  This thread manages some heartbeat mechanism.  I, as a user
of this API, can register a callback with the lib.  This callback is
called _within the context of this underground thread_, when the
connection to the server is lost (as recognised through the
heartbeat).  Now my first question is, how you would stuff that event
(loss of server connection) into the core event loop?

One possibility that I see would be to let my registered C-callback
signal some sort of a synchronisation item (like mutex or so) whenever
the connection to the server is lost.  Then I'm using a threaded
deferred to block on this synchronisation item, triggering the
deferred's callback mechanism when the item gets signaled.  But this
approach seems very wasteful to me, as I'm using a deferred and a
thread for an event that will never happen (my own application is a
long running process either).

Actually I'm wrapping not only one but two such C libraries.  Both
implement protocols that are not (yet?) available for python/twisted
and that are not trivial (just to illustrate that there are not many
alternatives to using these C libs).  I'm planning to use both of them
through twisted's thread pool mechanism.  The only thing is that I
would like to have fine grained control over the number of threads
used for each of them.  Is it possible to create custom thread pools
besides the default one?  If so, is there anything preventing me from
creating a thread pool with only one thread?


TIA,

andreas




From exarkun at divmod.com  Fri Oct 15 12:27:02 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 15 Oct 2004 16:27:02 GMT
Subject: [Twisted-Python] How to stuff new events into the core event loop?
In-Reply-To: <788E231C269961418F38D3E360D1652526CA48@tndefr-ws00021.tenovis.corp.lan>
Message-ID: <20041015162702.4730.663997459.divmod.quotient.84@ohm>

On Fri, 15 Oct 2004 17:47:51 +0200, "Ames Andreas (MPA/DF)" <Andreas.Ames at tenovis.com> wrote:
>Hello all,
> 
> I'm pretty new to twisted activity (just some doc and code reading so
> far).  So please be forbearing if the answers to the following
> questions are obvious.
> 
> I'm wrapping some C library which implements some networked client to
> use it from python, i.e. from a twisted app.  Within the guts of this
> lib there is a thread created (i.e. it is normally never seen by
> python).  This thread manages some heartbeat mechanism.  I, as a user
> of this API, can register a callback with the lib.  This callback is
> called _within the context of this underground thread_, when the
> connection to the server is lost (as recognised through the
> heartbeat).  Now my first question is, how you would stuff that event
> (loss of server connection) into the core event loop?

  To post an event to the reactor:

    reactor.callFromThread(f, *a, **kw)

  For example, in your connection lost callback, you might wish to do something like this:

    def blahblahConnectionLost(connectionId, exitStatus, monkeys):
        reactor.callFromThread(
            someKindOfThing.connectionLost, 
            Failure(Exception(exitStatus, monkeys)))

  Jp



From exarkun at divmod.com  Sat Oct 16 02:57:26 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sat, 16 Oct 2004 06:57:26 GMT
Subject: [Twisted-Python] Re: [Twisted-commits] r12007 - Trial has been born
	anew, with appealing new features, and faster execution
In-Reply-To: <E1CIZYK-0006bH-00@wolfwood>
Message-ID: <20041016065726.4730.1817681820.divmod.quotient.466@ohm>

On Fri, 15 Oct 2004 15:23:56 -0600, Jonathan Simms <slyphon at wolfwood.twistedmatrix.com> wrote:
>Author: slyphon
> Date: Fri Oct 15 15:23:56 2004
> New Revision: 12007
> 
> Log:
> Trial has been born anew, with appealing new features, and faster execution
> 

  Revert, please.  Every build slave is failing at least one test.  It looks like retrial might be ready with a bit more work, but it isn't yet.

  Jp



From x11 at h2o.sky.lt  Sat Oct 16 12:07:32 2004
From: x11 at h2o.sky.lt (=?iso-8859-4?Q?Art=FEras_=A9lajus?=)
Date: Sat, 16 Oct 2004 19:07:32 +0300
Subject: [Twisted-Python] UDP multicasting? HowTo?
Message-ID: <1097942852.6553.4.camel@localhost.localdomain>

Hello,

At first I want to say, that I'm pretty new to Twisted and these classes
get me lost (functional programming veteran :-)). Anyway, I started OOP
month ago, and I need to write UDP Multicast client/server. What it's
for? I want to write Gtk clone of Vypress Chat - serverless chat
application. Erm, in fact I want to rewrite it, because I started
writing it in Perl :-)

So... I looked up API for Multicast and this got my eye:
http://twistedmatrix.com/documents/current/api/twisted.internet.udp.MulticastPort.html
It's probably right thing. But as I never done this before, I need an
example..

I think my code should start like this:
#!/usr/bin/env python
# -*- coding: utf-8 -*-
from twisted.internet.udp import MulticastPort
from twisted.internet import reactor

class VyChat(DatagramProtocol):

But what's next?

Anyway, any help or examples appreciated.




From slyphon at twistedmatrix.com  Mon Oct 18 02:52:58 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Mon, 18 Oct 2004 02:52:58 -0400
Subject: [Twisted-Python] why tests are failing with the gtk2 reactor +
 oldtrial but passing with newtrial
Message-ID: <4173684A.4090203@twistedmatrix.com>

in a nutshell, oldtrial leaves the reactor in a dirty state

in the gtk2 reactor i put in the follwing method:

    def printoutallreaders(self):
        for reader in reads.keys():
            print "reader: %r" % reader

in twisted.test.test_internet.InterfaceTestCase.testCallInNextIteration
i added the following line (278):


277        reactor.callLater(0, f1)
278        reactor.printoutallreaders()


upon running the test along with the whole suite i got the following 
output from my method:


    testCallInNextIteration ... reader: 
<twisted.internet.default._UnixWaker instance at 0x404d6b6c>
reader: <Echo #0 on ./hello.skt>
reader: <twisted.internet.tcp.Client to ('localhost', 50048) at 421a832c>
reader: <Echo #0 on echo.skt>
reader: <twisted.internet.tcp.Client to ('localhost', 50042) at 421d3b8c>
reader: <Echo #0 on 0>
reader: <twisted.internet.unix.Client instance at 0x4217836c>
reader: <twisted.internet.protocol.ServerFactory on 50046>
reader: <twisted.internet.unix.Client instance at 0x421784ac>
reader: <Echo #0 on 0>
reader: <Echo #0 on 0>
reader: <twisted.internet.protocol.Factory on 50051>
reader: <Echo #0 on echo.skt>
reader: <twisted.protocols.ftp.DTPFactory on 50055>
reader: <twisted.internet.protocol.ServerFactory on 50048>
reader: <twisted.internet.tcp.Client to ('localhost', 50046) at 421bcaec>
reader: <twisted.internet.unix.Client instance at 0x421d39ec>

as you can see, old trial has left a large number of readables in the 
reactor between tests.

when i run with the same code patched into the retrial-4 branch:

      testCallInNextIteration ... reader: 
<twisted.internet.default._UnixWaker instance at 0x4063c1ec>

you can see that the only readable in the reactor  is a _UnixWaker.

so retrial caused this test to work by cleaning up the reactor state, as 
the test writer expected.


In the end, it was a VERY GOOD THING that JP demanded that I revert the 
merge of my branch, as
the reactor-installation code was flawed.

JP WAS RIGHT
I WAS WRONG

let that be a lesson to you all...

it is fixed now in my branch, ans i'm going to test it on pyramid before 
remerging to make sure there
are no further buildbot suprises.

-Jonathan




From anthony at interlink.com.au  Mon Oct 18 05:43:24 2004
From: anthony at interlink.com.au (Anthony Baxter)
Date: Mon, 18 Oct 2004 19:43:24 +1000
Subject: [Twisted-Python] new to twisted
In-Reply-To: <415AB25E.2040701@bellsouth.net>
References: <4159C7D2.4090706@power.eng.mcmaster.ca>
	<415AB25E.2040701@bellsouth.net>
Message-ID: <4173903C.8060809@interlink.com.au>

Jeremy Jones wrote:

> I wonder if Shtoom will be of any assistance to you.  Check out 
> http://www.divmod.org/Home/Projects/Shtoom/  From the webpage:

> It uses Twisted.  Not sure to what extent, though.

A lot. Also look at Divmod Quotient, as it's got a bunch of SIP
server stuff as well.

Note that both Shtoom and Quotient are non-trivial users of twisted,
so the learning curve will be a bit steep.

Anthony

-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Oct 18 08:51:37 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 18 Oct 2004 14:51:37 +0200
Subject: [Twisted-Python] twisted.internet and IPv6
In-Reply-To: <20040930131935.29723.282179053.divmod.quotient.8399@ohm>
References: <20040930131935.29723.282179053.divmod.quotient.8399@ohm>
Message-ID: <4173BC59.4020801@gkec.informatik.tu-darmstadt.de>


exarkun at divmod.com schrieb:
 > On Thu, 30 Sep 2004 10:12:18 +0200, Stefan Behnel <behnel_ml at gkec.informatik.tu-darmstadt.de> wrote:
 >>I'm curious: how much work would it be to enable IPv6 support in twisted.internet?
 >
 >   Not very much.  About a year ago, I wrote this:
 >     http://cvs.twistedmatrix.com/cvs/trunk/sandbox/exarkun/ipv6.py?view=markup&rev=10540&root=Twisted
 >   This is no longer how I'd like to see IPv6 supported in Twisted, but it gives an idea of how few changes are required.

That really doesn't seem to be a big change in the current code base. It's not very object oriented, though, so as you said, it would have to be rewritten to integrate it with Twisted.

However, I think the address handling would be a thing worth generalizing. I found this on the web:

http://c0re.23.nu/c0de/IPy/

I already had to adapt it a bit as some code parts are somewhat clumsy, but I find it a nice abstraction for IP addresses. If such a thing was part of Twisted, the interfaces for handling IPv[46] could become completely transparent.

You could even cut them into the existing interfaces:

-----------------------------------------
from IPy import IP
def connectTCP(host, port, ...)
   if isinstance(host, str):
     ... # use original IPv4 implementation - or convert host to IP(host)
   elif isinstance(host, IP):
     ... # connect either with IPv4 or IPv6, depending on host.version()
-----------------------------------------

Stefan



From glyph at divmod.com  Mon Oct 18 12:26:06 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 18 Oct 2004 12:26:06 -0400
Subject: [Twisted-Python] why tests are failing with the gtk2 reactor +
	oldtrial but passing with newtrial
In-Reply-To: <4173684A.4090203@twistedmatrix.com>
References: <4173684A.4090203@twistedmatrix.com>
Message-ID: <1098116766.23505.2.camel@kazekage>

On Mon, 2004-10-18 at 02:52, Jonathan Simms wrote:

> In the end, it was a VERY GOOD THING that JP demanded that I revert the 
> merge of my branch, as
> the reactor-installation code was flawed.

I am a little confused - the first half of your message makes sense to
me, and this makes sense to me, but they do not seem to be connected in
any way.  How was the reactor-installation code flawed?




From itamar at itamarst.org  Mon Oct 18 12:49:35 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 18 Oct 2004 12:49:35 -0400
Subject: [Twisted-Python] ANN: Fusion 0.1.1
Message-ID: <1098118175.25621.4.camel@sheriffpony>

Fusion, a C++ integration layer for Twistedm now has a 0.1.1 release,
fixing a serious bug in the buffering layer.

http://itamarst.org/software/fusion-0.1.1.tar.gz

-- 
Itamar Shtull-Trauring    http://itamarst.org





From tim at se.linux.org  Mon Oct 18 13:02:30 2004
From: tim at se.linux.org (=?iso-8859-1?Q?Tim_Terleg=E5rd?=)
Date: Mon, 18 Oct 2004 19:02:30 +0200 (CEST)
Subject: [Twisted-Python] ANN: Fusion 0.1.1
In-Reply-To: <1098118175.25621.4.camel@sheriffpony>
Message-ID: <Pine.LNX.4.44.0410181901410.18218-100000@naskur.se.linux.org>

> Fusion, a C++ integration layer for Twistedm now has a 0.1.1 release,
> fixing a serious bug in the buffering layer.
>
> http://itamarst.org/software/fusion-0.1.1.tar.gz

What is a C++ integration layer? Could you please explain a little more
about this software?

Tim




From slyphon at twistedmatrix.com  Mon Oct 18 13:59:44 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Mon, 18 Oct 2004 13:59:44 -0400
Subject: [Twisted-Python] why tests are failing with the gtk2 reactor
	+	oldtrial but passing with newtrial
In-Reply-To: <1098116766.23505.2.camel@kazekage>
References: <4173684A.4090203@twistedmatrix.com>
	<1098116766.23505.2.camel@kazekage>
Message-ID: <41740490.70006@twistedmatrix.com>

Glyph Lefkowitz wrote:

>On Mon, 2004-10-18 at 02:52, Jonathan Simms wrote:
>
>  
>
>>In the end, it was a VERY GOOD THING that JP demanded that I revert the 
>>merge of my branch, as
>>the reactor-installation code was flawed.
>>    
>>
>
>I am a little confused - the first half of your message makes sense to
>me, and this makes sense to me, but they do not seem to be connected in
>any way.  How was the reactor-installation code flawed?
>
>
>  
>
Heh, well, to be perfectly honest, the only connection between these two 
things was that it
was through debugging one that I discovered the other.  Basically, the 
reactor installation code
was flawed because the reactor installation code was somehow factored 
out, while the option
was left in, so no matter what you specified with --reactor, you got the 
select reactor.

The reason the select reactor was getting installed was that the 
trial.util class was a top-level
import, and it had twisted.internet.reactor as a top-level import.

This is all fixed and tested for now.

-Jonathan




From itamar at itamarst.org  Mon Oct 18 14:46:35 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 18 Oct 2004 14:46:35 -0400
Subject: [Twisted-Python] ANN: Fusion 0.1.1
In-Reply-To: <Pine.LNX.4.44.0410181901410.18218-100000@naskur.se.linux.org>
References: <Pine.LNX.4.44.0410181901410.18218-100000@naskur.se.linux.org>
Message-ID: <1098125195.25619.6.camel@sheriffpony>

On Mon, 2004-10-18 at 13:02, Tim Terleg?rd wrote:
> > Fusion, a C++ integration layer for Twistedm now has a 0.1.1 release,
> > fixing a serious bug in the buffering layer.
> >
> > http://itamarst.org/software/fusion-0.1.1.tar.gz
> 
> What is a C++ integration layer? Could you please explain a little more
> about this software?

See my previous post to the list - basically it lets you write Twisted
TCP and UDP protocols in C++.




From Andreas.Ames at tenovis.com  Tue Oct 19 09:23:53 2004
From: Andreas.Ames at tenovis.com (Ames Andreas (MPA/DF))
Date: Tue, 19 Oct 2004 15:23:53 +0200
Subject: [Twisted-Python] Is there any ready-made solution for nonblocking
	logfiles?
Message-ID: <788E231C269961418F38D3E360D1652526CA49@tndefr-ws00021.tenovis.corp.lan>

Hello,

subject contains the whole question, apart from:  Does it work on
Micros~1 platforms?


TIA,

andreas




From Andreas.Ames at tenovis.com  Tue Oct 19 09:46:15 2004
From: Andreas.Ames at tenovis.com (Ames Andreas (MPA/DF))
Date: Tue, 19 Oct 2004 15:46:15 +0200
Subject: [Twisted-Python] Has anybody integrated multiple threadpools into
	reactor?
Message-ID: <788E231C269961418F38D3E360D1652526CA4A@tndefr-ws00021.tenovis.corp.lan>

Hello,

if so, could you point me in the right direction?  Furthermore:  Is
there an easy way to avoid the threadpool overhead when I actually
only want to have one dedicated thread to fulfill a blocking job?


TIA,

andreas




From itamar at itamarst.org  Tue Oct 19 10:33:05 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 19 Oct 2004 10:33:05 -0400
Subject: [Twisted-Python] Is there any ready-made solution for
	nonblocking logfiles?
In-Reply-To: <788E231C269961418F38D3E360D1652526CA49@tndefr-ws00021.tenovis.corp.lan>
References: <788E231C269961418F38D3E360D1652526CA49@tndefr-ws00021.tenovis.corp.lan>
Message-ID: <1098196384.25624.12.camel@sheriffpony>

Just log to a file object, writes to files are for the most part not blocking. 




From itamar at itamarst.org  Tue Oct 19 11:17:25 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 19 Oct 2004 11:17:25 -0400
Subject: [Twisted-Python] Has anybody integrated multiple threadpools
	into reactor?
In-Reply-To: <788E231C269961418F38D3E360D1652526CA4A@tndefr-ws00021.tenovis.corp.lan>
References: <788E231C269961418F38D3E360D1652526CA4A@tndefr-ws00021.tenovis.corp.lan>
Message-ID: <1098199045.26685.2.camel@sheriffpony>

Just use twisted.python.threadpool.ThreadPool instances. You can
reactor.suggestThreadPoolSize or something wiht size 1, or start your
own threadpool with size 1.




From tv at twistedmatrix.com  Tue Oct 19 12:26:19 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 19 Oct 2004 19:26:19 +0300
Subject: [Twisted-Python] Is there any ready-made solution for	nonblocking
	logfiles?
In-Reply-To: <1098196384.25624.12.camel@sheriffpony>
References: <788E231C269961418F38D3E360D1652526CA49@tndefr-ws00021.tenovis.corp.lan>
	<1098196384.25624.12.camel@sheriffpony>
Message-ID: <4175402B.7000605@twistedmatrix.com>

Itamar Shtull-Trauring wrote:
> Just log to a file object, writes to files are for the most part not blocking. 

ITYM "..will quite often block, no matter what you do, but are fast
enough you shouldn't care." HTH, HAND.



From thomas at apestaart.org  Tue Oct 19 16:06:56 2004
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Tue, 19 Oct 2004 22:06:56 +0200
Subject: [Twisted-Python] First public release of Flumotion Streaming Media
	Server
Message-ID: <1098216416.29937.17.camel@otto.amantes>

Hey everyone,

we finally bit the bullet and threw out our firstborn for public
consumption.  For those not yet in the know, Flumotion is a streaming
media server based on GStreamer and Twisted under development by
Fluendo.

This release gives users access to the basic features of the server and
demonstrates its distributed capabilities. We will follow up with a
release within a couple of weeks to address some of the remaining issues
and fix items that our users discover.

Yes, there will be bugs.  Feel free to report them.  But there are also
lots of cool features, for which we owe a debt of gratitude to both the
GStreamer and Twisted developers.

Our website is at http://www.fluendo.com, the development site is up in
wiki style at https://core.fluendo.com/trac/cgi-bin/trac.cgi
Feel free to start filing issues.

The actual tarball is up at:
http://www.fluendo.com/downloads/flumotion-0.1.0.tar.bz2

Download the tarball and md5 file here. If you are running Fedora 2 you
can get a full set of RPMS and needed dependencies from the GStreamer
apt repository.

I'm sure packages for other distributions will spring up over the next
few days.

Happy hacking and drop us a line !

Thomas




From serj_trejo at hotmail.com  Tue Oct 19 18:56:07 2004
From: serj_trejo at hotmail.com (Sergio Trejo)
Date: Tue, 19 Oct 2004 18:56:07 -0400
Subject: [Twisted-Python] First public release of Flumotion Streaming
	MediaServer
Message-ID: <BAY12-F152ZN9KAy4Mo0000d865@hotmail.com>

This looks quite interesting. What about streaming MPEG4?

Cheers,

Sergio

>From: Thomas Vander Stichele <thomas at apestaart.org>
>Reply-To: Twisted general discussion <twisted-python at twistedmatrix.com>
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Subject: [Twisted-Python] First public release of Flumotion Streaming 
>MediaServer
>Date: Tue, 19 Oct 2004 22:06:56 +0200
>
>Hey everyone,
>
>we finally bit the bullet and threw out our firstborn for public
>consumption.  For those not yet in the know, Flumotion is a streaming
>media server based on GStreamer and Twisted under development by
>Fluendo.
>
>This release gives users access to the basic features of the server and
>demonstrates its distributed capabilities. We will follow up with a
>release within a couple of weeks to address some of the remaining issues
>and fix items that our users discover.
>
>Yes, there will be bugs.  Feel free to report them.  But there are also
>lots of cool features, for which we owe a debt of gratitude to both the
>GStreamer and Twisted developers.
>
>Our website is at http://www.fluendo.com, the development site is up in
>wiki style at https://core.fluendo.com/trac/cgi-bin/trac.cgi
>Feel free to start filing issues.
>
>The actual tarball is up at:
>http://www.fluendo.com/downloads/flumotion-0.1.0.tar.bz2
>
>Download the tarball and md5 file here. If you are running Fedora 2 you
>can get a full set of RPMS and needed dependencies from the GStreamer
>apt repository.
>
>I'm sure packages for other distributions will spring up over the next
>few days.
>
>Happy hacking and drop us a line !
>
>Thomas
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_________________________________________________________________
Express yourself instantly with MSN Messenger! Download today it's FREE! 
http://messenger.msn.com/




From serj_trejo at hotmail.com  Tue Oct 19 18:58:08 2004
From: serj_trejo at hotmail.com (Sergio Trejo)
Date: Tue, 19 Oct 2004 18:58:08 -0400
Subject: [Twisted-Python] Oops ...
Message-ID: <BAY12-F42GykBbKP7Ie00001a04@hotmail.com>

Sorry, my response to Thomas about Flumotion's announcement was meant to go 
to him only and I accidentally posted to the list (realizing it was too late 
after clicking send).

Serg

_________________________________________________________________
Express yourself instantly with MSN Messenger! Download today it's FREE! 
http://messenger.msn.com/




From nico at tekNico.net  Wed Oct 20 04:26:22 2004
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 20 Oct 2004 10:26:22 +0200
Subject: [Twisted-Python] Query output from pyPgSQL via Perspective Broker,
	how?
Message-ID: <cl57fd$etd$1@sea.gmane.org>

This is a pyPgSQL-Twisted mixed question, I post it here because I recently
saw Gerard Haering posting, hi Gerard. :-)

I'm trying to remotely send the PostgreSQL query output from pyPgSQL via
Perspective Broker, and finding it difficult to prevent all the
InsecureJelly exceptions. I'm trying to avoid modifying hundreds of already
written queries, and I'm patching pyPgSQL instead (albeit at runtime).

A first problem is that the make_PgResultSetClass factory function
dinamically builds a subclass of the PgResultSet class, making it
impossible to statically subclass it with pb.Copyable and pb.RemoteCopy . I
worked around that making the make_PgResultSetClass return an object of the
PgResultSet class, instead of a new subclass. This seems to work.

Now I'm fighting against all the pyPgSQL special types. I'm changing the
typecast method in the TypeCache class to return only standard types, and
while it works fine for number and strings, it seems that mx.DateTime and
PG_INET values are not intercepted.

I convert the mx.DateTime and mx.DateTimeDelta instances into standard
datetime and timedelta ones, since the Twisted docs says PB already knows
those. I also added a check for PG_INET, returning str(value) in that case.
I'm still getting InsecureJelly exceptions for these two data types,
though.

I feel like I'm following the tough road doing this, maube there's a simpler
way of achieving what I need. Any suggestions? Thanks in advance.

[P.S.: the .sig was not manually chosen, just happened. ;-) ]

-- 
Nicola Larosa - nico at tekNico.net

With Twisted, you don't need threads. You don't want threads. Threads 
are actually harmful: http://www.kuro5hin.org/story/2002/11/18/22112/860
 -- Jonathan Lange, August 2004






From nico at tekNico.net  Wed Oct 20 04:37:58 2004
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 20 Oct 2004 10:37:58 +0200
Subject: [Twisted-Python] Re: Query output from pyPgSQL via Perspective
	Broker, how?
References: <cl57fd$etd$1@sea.gmane.org>
Message-ID: <cl585a$gpc$1@sea.gmane.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

[Sorry for the self-reply, have to clarify a couple of things.]


> I worked around that making the make_PgResultSetClass return an object of
> the PgResultSet class, instead of a new subclass. This seems to work.

That would be "...making the make_PgResultSetClass return an *instance* of
the PgResultSet class, ...".

I don't want to set fetchReturnsList to True, because I need column names in
the query output. I could also add an OrderedDict type, and return an
instance of that from the __fetchOneRow method of the Cursor class, instead
of a PgResultSet. I would still have the problem with the pyPgSQL types,
though.


- -- 
Nicola Larosa - nico at tekNico.net

With Twisted, you don't need threads. You don't want threads. Threads 
are actually harmful: http://www.kuro5hin.org/story/2002/11/18/22112/860
 -- Jonathan Lange, August 2004

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.5 (GNU/Linux)

iD8DBQFBdiPpXv0hgDImBm4RAkoWAKC7qlksE+tX+fdwAZNnRDZqBuuYFgCggkMv
vYMrvNUy3WXF5qtMiHf6l0I=
=7SPp
-----END PGP SIGNATURE-----




From behnel_ml at gkec.informatik.tu-darmstadt.de  Wed Oct 20 06:00:03 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Wed, 20 Oct 2004 12:00:03 +0200
Subject: [Twisted-Python] Threaded Twisted?
Message-ID: <41763723.4040208@gkec.informatik.tu-darmstadt.de>

Hi!

I wondered what would be the best way of running Twisted on a 
multi-processor system.

I can run multiple instances of my program, but the message passing 
between them becomes somewhat more expensive than I would like 
(serialization).

Can Twisted run in multiple Threads? Meaning: use two concurrent reactors?

As far as I understand it, the reactor is implemented as a singleton, but 
since different reactor types are already supported, I wonder if anyone 
could think of a way of achieving that...

Any ideas?

Stefan



From dreid at dreid.org  Wed Oct 20 06:56:06 2004
From: dreid at dreid.org (David Reid)
Date: Wed, 20 Oct 2004 03:56:06 -0700
Subject: [Twisted-Python] [PATCH] Support resolving wildcard A and CNAME
	records in twisted.names
Message-ID: <1098269766.8549.10.camel@localhost>

Included is a patch to resolve A and CNAME records of the form 

A('*.foo.bar', '1.2.3.4')
CNAME('*.foo.bar', 'foo.bar')

This would be useful for example, in a situation where you have many
named (even dynamic) virtual hosts handled by a webserver.

The patch includes tests for both Wildcard A Records, and Wildcard CNAME
Records.  Any comments are appreciated.  If no one (read: exarkun)
disapproves I'll go ahead and commit this.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: wildcard-records.patch
Type: text/x-patch
Size: 3860 bytes
Desc: 
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20041020/ab8cbb20/attachment.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20041020/ab8cbb20/attachment.pgp 

From bob at redivi.com  Wed Oct 20 07:07:58 2004
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 20 Oct 2004 07:07:58 -0400
Subject: [Twisted-Python] Threaded Twisted?
In-Reply-To: <41763723.4040208@gkec.informatik.tu-darmstadt.de>
References: <41763723.4040208@gkec.informatik.tu-darmstadt.de>
Message-ID: <4D08C108-2288-11D9-A2F8-000A95BA5446@redivi.com>

On Oct 20, 2004, at 6:00, Stefan Behnel wrote:

> I wondered what would be the best way of running Twisted on a 
> multi-processor system.

Multiple processors, multiple processes.  Multiple processes is a good 
model anyways because it scales to clusters of machines.

> I can run multiple instances of my program, but the message passing 
> between them becomes somewhat more expensive than I would like 
> (serialization).

It's probably not as expensive as having a Global Interpreter Lock 
(GIL) that prevents multiple threads from running Python code at the 
same time, diluting any benefits you would see from concurrent 
reactors.

> Can Twisted run in multiple Threads? Meaning: use two concurrent 
> reactors?
>
> As far as I understand it, the reactor is implemented as a singleton, 
> but since different reactor types are already supported, I wonder if 
> anyone could think of a way of achieving that...

No it can not use two reactors.  Even if it could, you wouldn't get 
much better performance due to the GIL.

-bob




From behnel_ml at gkec.informatik.tu-darmstadt.de  Wed Oct 20 08:08:11 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Wed, 20 Oct 2004 14:08:11 +0200
Subject: [Twisted-Python] Threaded Twisted?
In-Reply-To: <4D08C108-2288-11D9-A2F8-000A95BA5446@redivi.com>
References: <41763723.4040208@gkec.informatik.tu-darmstadt.de>
	<4D08C108-2288-11D9-A2F8-000A95BA5446@redivi.com>
Message-ID: <4176552B.9040203@gkec.informatik.tu-darmstadt.de>


Bob Ippolito schrieb:
> Multiple processors, multiple processes.  Multiple processes is a good 
> model anyways because it scales to clusters of machines.

True. That's actually a current side effect of my program.


> It's probably not as expensive as having a Global Interpreter Lock (GIL) 
> that prevents multiple threads from running Python code at the same 
> time, diluting any benefits you would see from concurrent reactors.

Sure, the GIL. I read about it when I started using Python, but I must 
have forgotten it.

I guess you're right, multiple processes is simple to do and it does even 
have some advantages here.

Thanks,
Stefan



From glyph at divmod.com  Wed Oct 20 18:18:56 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 20 Oct 2004 18:18:56 -0400
Subject: [Twisted-Python] Has anybody integrated multiple threadpools
	into reactor?
In-Reply-To: <1098199045.26685.2.camel@sheriffpony>
References: <788E231C269961418F38D3E360D1652526CA4A@tndefr-ws00021.tenovis.corp.lan>
	<1098199045.26685.2.camel@sheriffpony>
Message-ID: <1098310736.3103.3.camel@kazekage>

On Tue, 2004-10-19 at 11:17, Itamar Shtull-Trauring wrote:
> Just use twisted.python.threadpool.ThreadPool instances. You can
> reactor.suggestThreadPoolSize or something wiht size 1, or start your
> own threadpool with size 1.

I would strongly recommend against using ThreadPool.  Just use
callInThread - there is already a pool of worker threads.  Starting and
stopping threadpools with the reactor is difficult to test and easy to
get wrong.




From Andreas.Ames at tenovis.com  Thu Oct 21 05:45:39 2004
From: Andreas.Ames at tenovis.com (Ames Andreas (MPA/DF))
Date: Thu, 21 Oct 2004 11:45:39 +0200
Subject: [Twisted-Python] Has anybody integrated multiple threadpools into
	reactor?
Message-ID: <788E231C269961418F38D3E360D1652526CA4B@tndefr-ws00021.tenovis.corp.lan>

Hello,

thanks for the hint.

Glyph Lefkowitz wrote:

> I would strongly recommend against using ThreadPool.  Just use
> callInThread - there is already a pool of worker threads.  Starting
> and stopping threadpools with the reactor is difficult to test and
> easy to get wrong.

Could you elaborate a bit on that?  I have the situation that I have
to wrap two C-libs which are essentially wrappers around proprietary
protocols.  They use blocking networked calls so that I'll want to use
threads to make them play nicely with my twisted app.

Now what I'd like to have is two distinct thread(s/ pools) for them.
One of them would have a threadpool size of 1 (one) because the C-lib
isn't threadsafe and I want implicit serialization without being
forced to synchronize explicitly.  My plan was to use a single thread
(no pool) which blocks on a queue 'till it gets request from the
reactor thread.  When it has accomplished its duties it will use
callFromThread to get the results back to the reactor threads.  Could
you tell me where the pitfalls are you mentioned above in this
scenario?


TIA,

aa

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/ms-tnef
Size: 2667 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20041021/89b36376/attachment.bin 

From andrew-twisted at puzzling.org  Thu Oct 21 06:31:42 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 21 Oct 2004 12:31:42 +0200
Subject: [Twisted-Python] Has anybody integrated multiple threadpools into
	reactor?
In-Reply-To: <788E231C269961418F38D3E360D1652526CA4B@tndefr-ws00021.tenovis.corp.lan>
References: <788E231C269961418F38D3E360D1652526CA4B@tndefr-ws00021.tenovis.corp.lan>
Message-ID: <20041021103142.GA5125@frobozz>

On Thu, Oct 21, 2004 at 11:45:39AM +0200, Ames Andreas (MPA/DF) wrote:
[...]
> 
> Now what I'd like to have is two distinct thread(s/ pools) for them.
> One of them would have a threadpool size of 1 (one) because the C-lib

If you're using a threadpool of size one, why use a thread pool at all?
Just start a thread.  You don't need (or want) any of the fancy worker
thread management that a thread pool is designed for.

There's nothing in Twisted that requires all your threads run in a Twisted
threadpool; they're just provided for convenience (mainly the convenience of
deferToThread).  If all you need is a single thread, then
    t = threading.Thread(target=foo)
works great.  reactor.callFromThread works from any thread.

In a similar vein, there are times when I've found it simpler to start a
thread for database interactions, rather than use adbapi.  The reason is
much the same: the "pool of workers" model didn't fit what I was trying to
do.

-Andrew.




From fu at donfu.com  Thu Oct 21 12:09:04 2004
From: fu at donfu.com (donfu)
Date: Thu, 21 Oct 2004 18:09:04 +0200
Subject: [Twisted-Python] twisted webdav server
Message-ID: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>

hello twisted

I've been lurking on this list of a couple of weeks now while getting 
accustomed to this wonderful framework, which I plan on using in my 
phd. project.

I searched the archives for a webdav server implementation on top of 
twisted, and it looks like this is a topic that shows up every 6 months 
or so. But the only actual code is to be found here:

     http://article.gmane.org/gmane.comp.python.twisted/6068

It looks a bit half-baked and I'm having trouble in getting it to work.
Is there anyone around with experience in twisting a webdav server?

regards,
stefan.




From glyph at divmod.com  Thu Oct 21 13:35:43 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 21 Oct 2004 13:35:43 -0400
Subject: [Twisted-Python] Has anybody integrated multiple threadpools
	into reactor?
In-Reply-To: <20041021103142.GA5125@frobozz>
References: <788E231C269961418F38D3E360D1652526CA4B@tndefr-ws00021.tenovis.corp.lan>
	<20041021103142.GA5125@frobozz>
Message-ID: <1098380143.3103.19.camel@kazekage>

On Thu, 2004-10-21 at 06:31, Andrew Bennetts wrote:

> There's nothing in Twisted that requires all your threads run in a Twisted
> threadpool; they're just provided for convenience (mainly the convenience of
> deferToThread).  If all you need is a single thread, then
>     t = threading.Thread(target=foo)
> works great.  reactor.callFromThread works from any thread.

I mostly agree with your post, but when is your suggestion not
equivalent to:

	reactor.callInThread(foo)

?




From andrew-twisted at puzzling.org  Thu Oct 21 14:14:21 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 21 Oct 2004 20:14:21 +0200
Subject: [Twisted-Python] Has anybody integrated multiple threadpools into
	reactor?
In-Reply-To: <1098380143.3103.19.camel@kazekage>
References: <788E231C269961418F38D3E360D1652526CA4B@tndefr-ws00021.tenovis.corp.lan>
	<20041021103142.GA5125@frobozz> <1098380143.3103.19.camel@kazekage>
Message-ID: <20041021181421.GB5125@frobozz>

On Thu, Oct 21, 2004 at 01:35:43PM -0400, Glyph Lefkowitz wrote:
> On Thu, 2004-10-21 at 06:31, Andrew Bennetts wrote:
> 
> > There's nothing in Twisted that requires all your threads run in a Twisted
> > threadpool; they're just provided for convenience (mainly the convenience of
> > deferToThread).  If all you need is a single thread, then
> >     t = threading.Thread(target=foo)
> > works great.  reactor.callFromThread works from any thread.
> 
> I mostly agree with your post, but when is your suggestion not
> equivalent to:
> 
> 	reactor.callInThread(foo)

When other things are using the threadpool.

It's possible that e.g. 20 other long-running callInThreads have been made.
With the default threadpool settings, this means this foo wouldn't get run
for a long time.

Of course, if you have 20 threads, you may have other issues ;)

Oh, and using threading.Thread directly allows you to make that thread
daemonic, if you want.

So they're practically the same.  :)

-Andrew.




From yasusii at lowlife.jp  Thu Oct 21 22:44:25 2004
From: yasusii at lowlife.jp (Yasushi Iwata)
Date: Fri, 22 Oct 2004 11:44:25 +0900 (JST)
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
References: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
Message-ID: <20041022.114425.74753643.yasusii@lowlife.jp>

Hi,

On Thu, 21 Oct 2004 18:09:04 +0200 you wrote:

> I searched the archives for a webdav server implementation on top of 
> twisted, and it looks like this is a topic that shows up every 6 months 
> or so. But the only actual code is to be found here:

I wrote WebDAV module for Tiwsted.

  http://akadama.jp/akadav.html

But sorry english documents are not readly. I'll write them in a few
days.





From fu at donfu.com  Fri Oct 22 11:35:28 2004
From: fu at donfu.com (donfu)
Date: Fri, 22 Oct 2004 17:35:28 +0200
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <20041022.114425.74753643.yasusii@lowlife.jp>
References: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041022.114425.74753643.yasusii@lowlife.jp>
Message-ID: <417928C0.10305@donfu.com>

Yasushi Iwata wrote:
>
> I wrote WebDAV module for Tiwsted.
> 
>   http://akadama.jp/akadav.html

Great, I just had a look at it. It seems to work well for serving a 
directory over webdav. However, I'm not quite sure how to adapt it to serve 
dynamic data from a database.

I think I could refactor your WebDAV resource-class, so that it works with 
arbitrary backends. Basically I'd try to factor everything out that does 
explicitly deal with the filesystem. But in a way, that's what a twisted.web 
Resource is in the first place, no? Honestly, I'm a bit confused :)

stefan.



From thomas.weholt at gmail.com  Fri Oct 22 12:08:36 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Fri, 22 Oct 2004 18:08:36 +0200
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <417928C0.10305@donfu.com>
References: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041022.114425.74753643.yasusii@lowlife.jp>
	<417928C0.10305@donfu.com>
Message-ID: <ffb7b7f804102209085ea42e11@mail.gmail.com>

But hey, keep it going; refactor, re-write, do whatever you want to,
just get webdav into the standard twisted-package. That would be
great!! And if one could serve data from a database, not just plain
directories, that would be awsome !!!

I'm jumping with joy!! ( Well, not really, but I'm really excited !!
Web-dav is cool )

Thomas :-)


On Fri, 22 Oct 2004 17:35:28 +0200, donfu <fu at donfu.com> wrote:
> Yasushi Iwata wrote:
> >
> > I wrote WebDAV module for Tiwsted.
> >
> >   http://akadama.jp/akadav.html
> 
> Great, I just had a look at it. It seems to work well for serving a
> directory over webdav. However, I'm not quite sure how to adapt it to serve
> dynamic data from a database.
> 
> I think I could refactor your WebDAV resource-class, so that it works with
> arbitrary backends. Basically I'd try to factor everything out that does
> explicitly deal with the filesystem. But in a way, that's what a twisted.web
> Resource is in the first place, no? Honestly, I'm a bit confused :)
> 
> stefan.
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


-- 
Mvh/Best regards,
Thomas Weholt
http://www.weholt.org



From itamar at itamarst.org  Fri Oct 22 12:12:32 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 22 Oct 2004 12:12:32 -0400
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <417928C0.10305@donfu.com>
References: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041022.114425.74753643.yasusii@lowlife.jp>
	<417928C0.10305@donfu.com>
Message-ID: <1098461551.3244.1.camel@sheriffpony>

On Fri, 2004-10-22 at 11:35, donfu wrote:

> I think I could refactor your WebDAV resource-class, so that it works with 
> arbitrary backends. Basically I'd try to factor everything out that does 
> explicitly deal with the filesystem. But in a way, that's what a twisted.web 
> Resource is in the first place, no? Honestly, I'm a bit confused :)

But that's how WebDAV differs from plain HTTP - it has more actions. At
the very least you'd need to extend Resource to support an extended
range of actions. And if you do you should probably work off
twisted.web2 - but at this point you should probably switch to the
twisted-web mailing list.




From bob at redivi.com  Fri Oct 22 12:31:57 2004
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 22 Oct 2004 12:31:57 -0400
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <ffb7b7f804102209085ea42e11@mail.gmail.com>
References: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041022.114425.74753643.yasusii@lowlife.jp>
	<417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
Message-ID: <E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>


On Oct 22, 2004, at 12:08, Thomas Weholt wrote:

> On Fri, 22 Oct 2004 17:35:28 +0200, donfu <fu at donfu.com> wrote:
>> Yasushi Iwata wrote:
>>>
>>> I wrote WebDAV module for Tiwsted.
>>>
>>>   http://akadama.jp/akadav.html
>>
>> Great, I just had a look at it. It seems to work well for serving a
>> directory over webdav. However, I'm not quite sure how to adapt it to 
>> serve
>> dynamic data from a database.
>>
>> I think I could refactor your WebDAV resource-class, so that it works 
>> with
>> arbitrary backends. Basically I'd try to factor everything out that 
>> does
>> explicitly deal with the filesystem. But in a way, that's what a 
>> twisted.web
>> Resource is in the first place, no? Honestly, I'm a bit confused :)
> But hey, keep it going; refactor, re-write, do whatever you want to,
> just get webdav into the standard twisted-package. That would be
> great!! And if one could serve data from a database, not just plain
> directories, that would be awsome !!!
>
> I'm jumping with joy!! ( Well, not really, but I'm really excited !!
> Web-dav is cool )

This particular package is not going to go into Twisted unless the 
license changes.  LGPL is not compatible with MIT.

-bob




From fu at donfu.com  Fri Oct 22 13:02:02 2004
From: fu at donfu.com (stefan)
Date: Fri, 22 Oct 2004 19:02:02 +0200
Subject: [Twisted-Python] as a side note...
Message-ID: <17FE22FE-244C-11D9-B0B7-000393DC7B7C@donfu.com>

the twisted framework was really a productive environment for me...  
until I found twisted.Quotes

http://svn.twistedmatrix.com/cvs/*checkout*/trunk/doc/fun/ 
Twisted.Quotes?root=Twisted

hilarious :)
stefan.




From grimmtooth at gmail.com  Fri Oct 22 15:20:09 2004
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Fri, 22 Oct 2004 15:20:09 -0400
Subject: [Twisted-Python] as a side note...
In-Reply-To: <17FE22FE-244C-11D9-B0B7-000393DC7B7C@donfu.com>
References: <17FE22FE-244C-11D9-B0B7-000393DC7B7C@donfu.com>
Message-ID: <8f4623fb04102212201d67c0a4@mail.gmail.com>

On Fri, 22 Oct 2004 19:02:02 +0200, stefan <fu at donfu.com> wrote:
> the twisted framework was really a productive environment for me...
> until I found twisted.Quotes
> 
> http://svn.twistedmatrix.com/cvs/*checkout*/trunk/doc/fun/
> Twisted.Quotes?root=Twisted

Oh, great - I need to get stuff done this afternoon, not read ...
oooo, "yogurt is better than Texas."

AAArgh!   Can't ... stop ... reading ...

This is your fault.
-- 
Regards,

    Jeff



From yasusii at lowlife.jp  Fri Oct 22 23:23:23 2004
From: yasusii at lowlife.jp (Yasushi Iwata)
Date: Sat, 23 Oct 2004 12:23:23 +0900 (JST)
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
References: <417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
Message-ID: <20041023.122323.104028643.yasusii@lowlife.jp>

On Fri, 22 Oct 2004 12:31:57 -0400 Bob Ippolito wrote:

> This particular package is not going to go into Twisted unless the 
> license changes.  LGPL is not compatible with MIT.

Some code of akaDAV were adapted from Twisted 1.3.0 which is
distributed under LGPL, so I cannot change the lisence of akaDAV.

I'm glad to change the lincense and contribute what I wrote to Twisted
project. Should I rewrite all the code adapted from Twisted 1.3.0 to
change the license?





From foom at fuhm.net  Sat Oct 23 01:01:20 2004
From: foom at fuhm.net (James Y Knight)
Date: Sat, 23 Oct 2004 01:01:20 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <9481D4D8-24B0-11D9-9668-000A95A50FB2@fuhm.net>

/me looks around innocently.
Oh, you mean Oct 11 wasn't last week? Damn. ;)

James

Bug summary
______________________
Since 2004-10-11 18:03:50.270000:
   Bugs opened: 11   Bugs closed: 6   Total open bugs: 316 (+5)

New / Reopened Bugs
______________________
retrial bugs  (6 days ago)
CLOSED http://www.twistedmatrix.com/bugs/issue751 opened by exarkun

mktap argument and man page  (yesterday)
        http://www.twistedmatrix.com/bugs/issue755 opened by opq

mktap arguments  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue753 opened by kyle

[CORE] Reactor should remove references to already called callbacks 
added by addSystemEventTrigger  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue752 opened by itamarst

[CONCH] conch client can't read password when running in a conch server 
shell  (6 days ago)
        http://www.twistedmatrix.com/bugs/issue750 opened by z3p

conch client writes garbage to known_hosts file  (6 days ago)
        http://www.twistedmatrix.com/bugs/issue749 opened by exarkun

ENOSPC unhandled in lockfile code  (1 week ago)
CLOSED http://www.twistedmatrix.com/bugs/issue748 opened by exarkun

[WIN32] win32 twistd.bat only accepts 9 arguments  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue747 opened by warner

[PATCH] added timeout and error checking logic to smtp.py  (yesterday)
        http://www.twistedmatrix.com/bugs/issue756 opened by bkirsch

[DOCUMENTATION, TWISTD] examples not using reactor.run() should point 
to twistd  (2 days ago)
        http://www.twistedmatrix.com/bugs/issue754 opened by dpollet

Scheduleing Example Doesn't work as expected  (1 week ago)
CLOSED http://www.twistedmatrix.com/bugs/issue746 opened by maethor

Bugs Closed
______________________
retrial bugs  (6 days ago)
        http://www.twistedmatrix.com/bugs/issue751 opened by exarkun

SMTP Client upgrade and bug fixes  (2 weeks ago)
        http://www.twistedmatrix.com/bugs/issue735 opened by bkirsch

[ENTERPRISE] twisted.enterprise.util.quote doesn't quotes unicode 
strings  (2 months ago)
        http://www.twistedmatrix.com/bugs/issue675 opened by akhavr

[MAIL] smtp.py does not capture errors if SSL or AUTH required and not 
enabled on server  (2 months ago)
        http://www.twistedmatrix.com/bugs/issue683 opened by bkirsch

ENOSPC unhandled in lockfile code  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue748 opened by exarkun

Scheduleing Example Doesn't work as expected  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue746 opened by maethor




From slyphon at twistedmatrix.com  Sat Oct 23 02:08:21 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sat, 23 Oct 2004 00:08:21 -0600
Subject: [Twisted-Python] ANN: deferred howto/tutorial
Message-ID: <20041023060821.GA8407@pyramid.twistedmatrix.com>

Hello all,

I was sitting at Jury Duty today, trying to keep myself from the
inevitable thoughts of suicide, and I started thinking about how to
implement deferreds in C#. I started out by thinking about the logic one
would need to use to implement deferreds in python. I wrote out in my
notebook an implementation and when I got back home, I was suprised to
discover that I wasn't terribly far off. I reflected upon this, and
about what had confused me for so long about deferreds in general.

...and I was really stumped... ;)

Deferreds are simple and elegant. After rewriting trial and dealing with
all of its crazy exception handling, I realised that a lot of that code
could have been made more succinct (if not more understandable) had it
used deferreds to do the error handling and decision making.

I think the thing that confuses most newbies is that deferreds to them
seem like this BLACK BOX. It's this mysterious thing that is going to
CALL YOUR CODE, and the rules about chaining and errback and callback
chains are quite intimidating if you don't have a chunk of familiar
looking code to transition you from python to
Deferredy-Looking-Kool-Aid-Land.

So what i did was write a tutorial on my deferred enlightenment...(pun
intended?) 

I'd appreciate feedback, good or bad. You can find it in svn:HEAD,
at doc/core/howto/tutorial/deferred_tutorial.xhtml


Cheers!
Jonathan D. Simms
slyphon AT twistedmatrix DOT com




From slyphon at twistedmatrix.com  Sat Oct 23 02:10:44 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sat, 23 Oct 2004 00:10:44 -0600
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <20041022.114425.74753643.yasusii@lowlife.jp>
References: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041022.114425.74753643.yasusii@lowlife.jp>
Message-ID: <20041023061044.GB8407@pyramid.twistedmatrix.com>

On Fri, Oct 22, 2004 at 11:44:25AM +0900, Yasushi Iwata wrote:
> Hi,
> 
> On Thu, 21 Oct 2004 18:09:04 +0200 you wrote:
> 
> > I searched the archives for a webdav server implementation on top of 
> > twisted, and it looks like this is a topic that shows up every 6 months 
> > or so. But the only actual code is to be found here:
> 
> I wrote WebDAV module for Tiwsted.
> 
>   http://akadama.jp/akadav.html

slyphon *BOGGLES*

really? based on http or ftp or what?

webdav has been on the TODO-eventually list for as long as I've been
lurking in #twisted!

way to go!

-Jonathan
 



From tv at twistedmatrix.com  Sat Oct 23 03:44:53 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 23 Oct 2004 10:44:53 +0300
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <20041023.122323.104028643.yasusii@lowlife.jp>
References: <417928C0.10305@donfu.com>	<ffb7b7f804102209085ea42e11@mail.gmail.com>	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
	<20041023.122323.104028643.yasusii@lowlife.jp>
Message-ID: <417A0BF5.1030707@twistedmatrix.com>

Yasushi Iwata wrote:
>>This particular package is not going to go into Twisted unless the 
>>license changes.  LGPL is not compatible with MIT.
> Some code of akaDAV were adapted from Twisted 1.3.0 which is
> distributed under LGPL, so I cannot change the lisence of akaDAV.
> 
> I'm glad to change the lincense and contribute what I wrote to Twisted
> project. Should I rewrite all the code adapted from Twisted 1.3.0 to
> change the license?

Well, assuming the parts you adapted from 1.3.0 haven't changed much
since, you could just take the changes between 1.3.0 and SVN HEAD, and
say you adapted the code from the MIT-licensed source.

If you had to copy a _lot_ of code from Twisted to your project, there's
a totally different problem from licensing. Copy-paste coding is evil,
and code duplication should be refactored out.



From mary-twisted at puzzling.org  Sat Oct 23 03:57:12 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 23 Oct 2004 09:57:12 +0200
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <417A0BF5.1030707@twistedmatrix.com>
References: <417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
	<20041023.122323.104028643.yasusii@lowlife.jp>
	<417A0BF5.1030707@twistedmatrix.com>
Message-ID: <20041023075712.GC4690@fuchsia.puzzling.org>

On Sat, Oct 23, 2004, Tommi Virtanen wrote:
> If you had to copy a _lot_ of code from Twisted to your project, there's
> a totally different problem from licensing. Copy-paste coding is evil,
> and code duplication should be refactored out.

I don't know the situation at all, but I have a LGPL licenced project
that is so because I adapted code I copied from the documentation :(

-Mary



From gwyn.evans at gmail.com  Sat Oct 23 09:24:24 2004
From: gwyn.evans at gmail.com (Gwyn Evans)
Date: Sat, 23 Oct 2004 14:24:24 +0100
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023060821.GA8407@pyramid.twistedmatrix.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
Message-ID: <c0312f5d041023062475d9953f@mail.gmail.com>

On Sat, 23 Oct 2004 00:08:21 -0600, Jonathan Simms
<slyphon at twistedmatrix.com> wrote:
> So what i did was write a tutorial on my deferred enlightenment...(pun
> intended?)
> 
> I'd appreciate feedback, good or bad. You can find it in svn:HEAD,
> at doc/core/howto/tutorial/deferred_tutorial.xhtml

 Therefore also available at
http://svn.twistedmatrix.com/cvs/*checkout*/trunk/doc/core/howto/tutorial/deferred_tutorial.xhtml?rev=12147&root=Twisted
via the Web interface, if you've not got a subversion client
installed.

 Thanks, Jonathon - I've not sat & gone through it yet, but a quick
glance suggested it's going to be useful!



From yasusii at lowlife.jp  Sat Oct 23 09:41:23 2004
From: yasusii at lowlife.jp (Yasushi Iwata)
Date: Sat, 23 Oct 2004 22:41:23 +0900 (JST)
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <20041023061044.GB8407@pyramid.twistedmatrix.com>
References: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041022.114425.74753643.yasusii@lowlife.jp>
	<20041023061044.GB8407@pyramid.twistedmatrix.com>
Message-ID: <20041023.224123.74755452.yasusii@lowlife.jp>

On Sat, 23 Oct 2004 00:10:44 -0600 Jonathan Simms wrote:

> really? based on http or ftp or what?

I overrided twisted.web.server.Request and
twisted.web.static.File. It's upper-compatible to static file web
server.

But I should improve the code to work with arbitrary backends just
like stefan said.




From gwyn.evans at gmail.com  Sat Oct 23 09:46:43 2004
From: gwyn.evans at gmail.com (Gwyn Evans)
Date: Sat, 23 Oct 2004 14:46:43 +0100
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <c0312f5d041023062475d9953f@mail.gmail.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<c0312f5d041023062475d9953f@mail.gmail.com>
Message-ID: <c0312f5d04102306465ba32b37@mail.gmail.com>

And examples below
http://svn.twistedmatrix.com/cvs/trunk/doc/core/howto/listings/deferred/?root=Twisted



From missive at hotmail.com  Sat Oct 23 10:22:12 2004
From: missive at hotmail.com (Lee Harr)
Date: Sat, 23 Oct 2004 18:52:12 +0430
Subject: [Twisted-Python] two deferred_tutorial patches
Message-ID: <BAY2-F27F1P4f7LXXcb0000eae4@hotmail.com>

The first catches a bit more of the output from
deferred_ex3.py which makes a bit more sense:

Index: doc/core/howto/tutorial/deferred_tutorial.xhtml
===================================================================
--- doc/core/howto/tutorial/deferred_tutorial.xhtml     (revision 12146)
+++ doc/core/howto/tutorial/deferred_tutorial.xhtml     (working copy)
@@ -157,6 +157,9 @@
   File "./deferred_ex2.py", line 35, in failAtHandlingResult
     raise RuntimeError, "whoops! we encountered an error"
exceptions.RuntimeError: whoops! we encountered an error
+
+callback 3
+        got result: okay, continue on
</pre>

<h2>addBoth: the deferred version of <em>finally</em></h2>




Actually, now that I look at it ... the output in the text
is just from the wrong program:

Index: doc/core/howto/tutorial/deferred_tutorial.xhtml
===================================================================
--- doc/core/howto/tutorial/deferred_tutorial.xhtml     (revision 12146)
+++ doc/core/howto/tutorial/deferred_tutorial.xhtml     (working copy)
@@ -147,16 +147,22 @@
<pre>
callback 1
         got result: success
+callback 2
+        got result: yay! handleResult was successful!
         about to raise exception
errback
we got an exception: Traceback (most recent call last):
---- &lt;exception caught here&gt; ---
-  File "/home/slyphon/Projects/Twisted/trunk/twisted/internet/defer.py", 
line
-326, in _runCallbacks
-    self.result = callback(self.result, *args, **kw)
-  File "./deferred_ex2.py", line 35, in failAtHandlingResult
+  File "deferred_ex3.py", line 94, in ?
+    behindTheScenes("success")
+--- <exception caught here> ---
+  File "deferred_ex3.py", line 57, in behindTheScenes
+    result = failAtHandlingResult(result)
+  File "deferred_ex3.py", line 34, in failAtHandlingResult
     raise RuntimeError, "whoops! we encountered an error"
exceptions.RuntimeError: whoops! we encountered an error
+
+callback 3
+        got result: okay, continue on
</pre>

<h2>addBoth: the deferred version of <em>finally</em></h2>




And the second one makes the tutorial look right
when loaded from the filesystem.  I have a feeling
I am supposed to start a webserver or process
these files somehow, but this was easier for me...


Index: doc/core/howto/tutorial/deferred_tutorial.xhtml
===================================================================
--- doc/core/howto/tutorial/deferred_tutorial.xhtml     (revision 12146)
+++ doc/core/howto/tutorial/deferred_tutorial.xhtml     (working copy)
@@ -1,6 +1,7 @@
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html> <head>
<title>Deferreds are beautiful! (A Tutorial)</title>
+<link type="text/css" rel="stylesheet" href="../stylesheet.css" />
</head>

<body>
@@ -27,7 +28,7 @@

First, a simple example so that we have something to talk about:

-<a href="../listings/deferred/deferred_ex.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex.py" 
class="py-listing">deferred_ex.py</a>

<p>And the output: (since both methods in the example produce the same 
output,
it will only be shown once.) </p>
@@ -56,7 +57,7 @@
returned the deferred needs to alert the callback chain that an error
has occurred.</p>

-<a href="../listings/deferred/deferred_ex1a.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex1a.py" 
class="py-listing">deferred_ex1a.py</a>

<pre>
errback
@@ -80,7 +81,7 @@
<p>Now let's see what happens when <em>our callback</em> raises an
exception</p>

-<a href="../listings/deferred/deferred_ex1b.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex1b.py" 
class="py-listing">deferred_ex1b.py</a>

<p>And the output: (note, tracebacks will be edited slightly to conserve
space)</p>
@@ -112,7 +113,7 @@
errback in the chain. If the chain is started off with a failure, the first
method to be called will be the first errback.</p>

-<a href="../listings/deferred/deferred_ex2.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex2.py" 
class="py-listing">deferred_ex2.py</a>

<pre>
callback 1
@@ -142,7 +143,7 @@
failure or raise an exception) the chain continues on with the next
callback.</p>

-<a href="../listings/deferred/deferred_ex3.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex3.py" 
class="py-listing">deferred_ex3.py</a>

<pre>
callback 1
@@ -168,7 +169,7 @@
returning the value that it received to allow processing the chain to
continue, but appearing transparent in terms of the result.</p>

-<a href="../listings/deferred/deferred_ex4.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex4.py" 
class="py-listing">deferred_ex4.py</a>

<pre>
callback 1
@@ -205,7 +206,7 @@
addCallback followed by an addErrback.</p>


-<a href="../listings/deferred/deferred_ex5.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex5.py" 
class="py-listing">deferred_ex5.py</a>

<pre>
callback 1
@@ -227,7 +228,7 @@
processing in response to the error, we would have used a passthru, and
returned the failure we received, as we see in this next example: </p>

-<a href="../listings/deferred/deferred_ex6.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex6.py" 
class="py-listing">deferred_ex6.py</a>

<pre>
callback 1
@@ -258,7 +259,7 @@
beforehand and then executes it, the other executes the chain as it is being
constructed.  This is because deferreds are <em>stateful</em>.  </p>

-<a href="../listings/deferred/deferred_ex7.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex7.py" 
class="py-listing">deferred_ex7.py</a>

<pre>
callback 1
@@ -309,7 +310,7 @@
processing chain will become the result that gets passed to the next 
callback
of the primary deferreds processing chain </p>

-<a href="../listings/deferred/deferred_ex8.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex8.py" 
class="py-listing">deferred_ex8.py</a>

<pre>
callback 1



Thanks for your time.

_________________________________________________________________
Express yourself instantly with MSN Messenger! Download today it's FREE! 
http://messenger.msn.com/




From tv at twistedmatrix.com  Sat Oct 23 11:09:06 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 23 Oct 2004 18:09:06 +0300
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <20041023075712.GC4690@fuchsia.puzzling.org>
References: <417928C0.10305@donfu.com>	<ffb7b7f804102209085ea42e11@mail.gmail.com>	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>	<20041023.122323.104028643.yasusii@lowlife.jp>	<417A0BF5.1030707@twistedmatrix.com>
	<20041023075712.GC4690@fuchsia.puzzling.org>
Message-ID: <417A7412.1090405@twistedmatrix.com>

Mary Gardiner wrote:
> I don't know the situation at all, but I have a LGPL licenced project
> that is so because I adapted code I copied from the documentation :(

Well, the code is in the docs in the MIT version, too. You just need
to take your changes and apply them to a newer version of the code in
docs.




From mary-twisted at puzzling.org  Sat Oct 23 11:22:10 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 23 Oct 2004 17:22:10 +0200
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <417A7412.1090405@twistedmatrix.com>
References: <417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
	<20041023.122323.104028643.yasusii@lowlife.jp>
	<417A0BF5.1030707@twistedmatrix.com>
	<20041023075712.GC4690@fuchsia.puzzling.org>
	<417A7412.1090405@twistedmatrix.com>
Message-ID: <20041023152210.GH4690@fuchsia.puzzling.org>

On Sat, Oct 23, 2004, Tommi Virtanen wrote:
> Well, the code is in the docs in the MIT version, too. You just need
> to take your changes and apply them to a newer version of the code in
> docs.

The full derivation tree is this:
 |
 -> Woven docs
  |
  -> my first change
   |
   -> my second change, a port to Nevow

The Woven docs should be unchanged since the re-licence, but I'm unclear
on whether that means I can MIT licence my code base, since I made
derivations before the licence change.

-Mary



From bob at redivi.com  Sat Oct 23 11:50:19 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 23 Oct 2004 11:50:19 -0400
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <20041023152210.GH4690@fuchsia.puzzling.org>
References: <417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
	<20041023.122323.104028643.yasusii@lowlife.jp>
	<417A0BF5.1030707@twistedmatrix.com>
	<20041023075712.GC4690@fuchsia.puzzling.org>
	<417A7412.1090405@twistedmatrix.com>
	<20041023152210.GH4690@fuchsia.puzzling.org>
Message-ID: <3DA609BC-250B-11D9-A658-000A95BA5446@redivi.com>


On Oct 23, 2004, at 11:22, Mary Gardiner wrote:

> On Sat, Oct 23, 2004, Tommi Virtanen wrote:
>> Well, the code is in the docs in the MIT version, too. You just need
>> to take your changes and apply them to a newer version of the code in
>> docs.
>
> The full derivation tree is this:
>  |
>  -> Woven docs
>   |
>   -> my first change
>    |
>    -> my second change, a port to Nevow
>
> The Woven docs should be unchanged since the re-licence, but I'm 
> unclear
> on whether that means I can MIT licence my code base, since I made
> derivations before the licence change.

You always have copyright on anything that you write, unless you 
explicitly give that away.  Of course you can.

-bob





From itamar at itamarst.org  Sat Oct 23 12:06:53 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 23 Oct 2004 12:06:53 -0400
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <3DA609BC-250B-11D9-A658-000A95BA5446@redivi.com>
References: <417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
	<20041023.122323.104028643.yasusii@lowlife.jp>
	<417A0BF5.1030707@twistedmatrix.com>
	<20041023075712.GC4690@fuchsia.puzzling.org>
	<417A7412.1090405@twistedmatrix.com>
	<20041023152210.GH4690@fuchsia.puzzling.org>
	<3DA609BC-250B-11D9-A658-000A95BA5446@redivi.com>
Message-ID: <1098547613.4419.1.camel@sheriffpony>

On Sat, 2004-10-23 at 11:50, Bob Ippolito wrote:

> You always have copyright on anything that you write, unless you 
> explicitly give that away.  Of course you can.

And it's not like the original copyright holder on the LGPLed code (i.e.
Glyph) is going to hunt you down, seeing that he relicensed it and all
:) Plus I bet he's too busy to hire Australian lawyers.




From mary-twisted at puzzling.org  Sat Oct 23 13:37:49 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 23 Oct 2004 19:37:49 +0200
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <3DA609BC-250B-11D9-A658-000A95BA5446@redivi.com>
References: <417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
	<20041023.122323.104028643.yasusii@lowlife.jp>
	<417A0BF5.1030707@twistedmatrix.com>
	<20041023075712.GC4690@fuchsia.puzzling.org>
	<417A7412.1090405@twistedmatrix.com>
	<20041023152210.GH4690@fuchsia.puzzling.org>
	<3DA609BC-250B-11D9-A658-000A95BA5446@redivi.com>
Message-ID: <20041023173749.GI4690@fuchsia.puzzling.org>

On Sat, Oct 23, 2004, Bob Ippolito wrote:
> You always have copyright on anything that you write, unless you
> explicitly give that away.  Of course you can.

Yes of course, but it's a derived work. The only reason I could create
it at all was due to the licence of Twisted at the time, which required
that if I did so I released under the LGPL. I can't relicence derived
works at will unless the copyright holder permits it, and at the time he
didn't. He's since permitted relicencing of derived works starting about
two months ago, I was off and away by then.

In practice because the *exact same code* is *now* available under the
MIT licence I probably will relicence (as the Divmod people did, for
example), but this requires an assumption of good faith under my very
bad understanding of copyright law internationally (I used a US machine
in production of the code -- exactly where Glyph would need his lawyers
is unclear).

-Mary



From mary-twisted at puzzling.org  Sat Oct 23 14:29:20 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 23 Oct 2004 20:29:20 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023060821.GA8407@pyramid.twistedmatrix.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
Message-ID: <20041023182920.GL4690@fuchsia.puzzling.org>

On Sat, Oct 23, 2004, Jonathan Simms wrote:
> So what i did was write a tutorial on my deferred enlightenment...(pun
> intended?) 
> 
> I'd appreciate feedback, good or bad. You can find it in svn:HEAD,
> at doc/core/howto/tutorial/deferred_tutorial.xhtml

That's not the place for it unfortunately, everything else in that
directory is the finger tutorial. (ie it's not a general "tutorials"
directory... but that's OK, the "howto" directory isn't really full of
howtos either...)

As best I can tell, there's no clear distinction between that and the
"Using Deferreds" howto a directory up. I'll play around with merging
them over the next hour or so and see if I'm right.

-Mary



From mary-twisted at puzzling.org  Sat Oct 23 15:19:30 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 23 Oct 2004 21:19:30 +0200
Subject: [Twisted-Python] Help needed: good async design
Message-ID: <20041023191930.GM4690@fuchsia.puzzling.org>

I've just been messing about with the async howto and decided that half
of it should be broken out into a "designing libraries for use with
Twisted" document. Since I haven't actually done very much of this, help
appreciated, including but not limited to pointers to the very best
design inside the Twisted codebase, and IRC rants.

Grab me during the European daytime or leave a message on issue 504.

Thanks,

Mary



From fu at donfu.com  Sat Oct 23 16:40:40 2004
From: fu at donfu.com (stefan)
Date: Sat, 23 Oct 2004 22:40:40 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023060821.GA8407@pyramid.twistedmatrix.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
Message-ID: <CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>

> So what i did was write a tutorial on my deferred enlightenment...(pun
> intended?)

My way to grok deferreds was a detoured as well, when I started using 
twisted two months ago.
First thing, I tried to avoid them. Until I reached a point where you 
wouldn't get to all that candy functionallity witouth using them. Then 
I found twisted.flow and thought this concept was much clearer to me. I 
used it and my code somehow worked. Until it didn't work anymore, and 
then I was screwed. Someone told me, I should rather use defgen, which 
I did. But when exeptions vanished in looping yields that yielded 
loops, I was lost again. At that point I rewrote the whole database 
backend using plain old deferreds. And then I understood them. Because 
they are simple and elegant, once you get the concept.

What I missed in the docs, was a bit more concrete examples and styles 
of how to use deferreds in slightly more complex code. Most of the code 
is not class based, and you don't find branching or looping code that 
deals with deferreds. Both is not terribly difficult, but at first you 
really don't dare to know how a loop with deferreds will looks like.

What I also would like to see is some coding practices of how to style 
deferred code. I got used to inner functions in class methods, which 
for me looks clearest, but I'm sure there are other practices. A short 
discussion on that in the docs would be great. I've attached an example 
of my style, maybe someone with a different style can rewrite the 
example and comment on pros and cons?
---------------------------------------------------------------
class X:
     ...
     def y(self):
         # do some method initialisation
         ...
         # callbacks
         def oneBack(result):
               # extract someParams out of result
               ...
               return self.somethingDeferred().addCallback(twoBack, 
someParams)

         def twoBack(result, someParams):
               return "Foo" or raise Bar()

         return self.somethingDeferred().addCallback(oneBack)
---------------------------------------------------------------

regards
stefan.




From andrew-twisted at puzzling.org  Sat Oct 23 17:23:24 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 23 Oct 2004 23:23:24 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
Message-ID: <20041023212324.GA5033@frobozz>

On Sat, Oct 23, 2004 at 10:40:40PM +0200, stefan wrote:
[...]
> What I also would like to see is some coding practices of how to style 
> deferred code. I got used to inner functions in class methods, which 
> for me looks clearest, but I'm sure there are other practices. A short 
> discussion on that in the docs would be great. I've attached an example 
> of my style, maybe someone with a different style can rewrite the 
> example and comment on pros and cons?
> ---------------------------------------------------------------
> class X:
>     ...
>     def y(self):
>         # do some method initialisation
>         ...
>         # callbacks
>         def oneBack(result):
[...]
>         return self.somethingDeferred().addCallback(oneBack)
> ---------------------------------------------------------------

There's a cryptic note here that partly explains the usual style within
Twisted itself:
    http://twistedmatrix.com/documents/howto/policy/coding-standard#auto13

Twisted style is usually:

class X:
    def y(self):
        ...
        return self.somethingDeferred().addCallback(self._cbOneBack)

    def _cbOneBack(self, result):
        ...

I believe the main reason for this is flexibility.  Code in Twisted tends to
be framework code or library code, rather than an actual application, so it
is written with re-use in mind.  You can't override a callback that's
embedded within a method without overriding the whole method; making the
callback a method on the class solves that.  The "_cb" or "_eb" prefix
signals that it's intended to be used as the callback or errback for
something, and also that it's not an ordinary method that you would call
directly.

It also has other secondary advantages, like making setting breakpoints in
pdb easier, although I can't say I've taken advantage of that very often (I
typically set breakpoints by inserting "import pdb; pdb.set_trace()"), but
I imagine some other developers have.

A more important advantage (if you are strict on testing) is that you can
unit test the behaviour of the callback more easily if you can call it
directly.

If nothing else, I like my functions to be as short as possible, and
embedding a large callback within a method means I now have two large
functions (the embedded function, and the method that contains it), rather
than just one.

The obvious disadvantage compared to your style is the loss of the direct
visual association of which callbacks relate to which deferreds.  I'd be
moderately interested in hearing how other people cope with that, but I
haven't really found it to be a problem.  I expect that if I did, I'd just
put comments like "# callback for deferred from self.frobnicate" at the top
of each callback and errback.  Large, hard-to-navigate classes with lots of
methods can be a sign of a suboptimal design anyway.

-Andrew.




From mary-twisted at puzzling.org  Sat Oct 23 17:37:19 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 23 Oct 2004 23:37:19 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023212324.GA5033@frobozz>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041023212324.GA5033@frobozz>
Message-ID: <20041023213719.GQ4690@fuchsia.puzzling.org>

On Sat, Oct 23, 2004, Andrew Bennetts wrote:
> The obvious disadvantage compared to your style is the loss of the
> direct visual association of which callbacks relate to which
> deferreds.  I'd be moderately interested in hearing how other people
> cope with that

I find it's a problem when you start chaining deferreds by returning
deferred from callbacks: not so much that it's difficult to find out
where the callback is added, but that there's no visual representation
that corresponds to the "nesting" of the callbacks.

-Mary



From golux at comcast.net  Sat Oct 23 17:44:35 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Sat, 23 Oct 2004 17:44:35 -0400
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023213719.GQ4690@fuchsia.puzzling.org>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>	<20041023212324.GA5033@frobozz>
	<20041023213719.GQ4690@fuchsia.puzzling.org>
Message-ID: <417AD0C3.9000002@comcast.net>

Mary Gardiner wrote:
> On Sat, Oct 23, 2004, Andrew Bennetts wrote:
> 
>>The obvious disadvantage compared to your style is the loss of the
>>direct visual association of which callbacks relate to which
>>deferreds.  I'd be moderately interested in hearing how other people
>>cope with that
> 
> I find it's a problem when you start chaining deferreds by returning
> deferred from callbacks: not so much that it's difficult to find out
> where the callback is added, but that there's no visual representation
> that corresponds to the "nesting" of the callbacks.

I like to think of it as the asynchronous form of
"pipes and filters", so chaining deferreds seems quite
logical to me.

Steve



From serj_trejo at hotmail.com  Sat Oct 23 17:57:06 2004
From: serj_trejo at hotmail.com (Sergio Trejo)
Date: Sat, 23 Oct 2004 17:57:06 -0400
Subject: [Twisted-Python] twisted webdav server
Message-ID: <BAY12-F16gvR0AWIeEG0000c4c3@hotmail.com>

I concur -- WebDAV rocks!

Serg

>From: Thomas Weholt <thomas.weholt at gmail.com>
>Reply-To: 2002 at weholt.org,Twisted general discussion 
><twisted-python at twistedmatrix.com>
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Subject: Re: [Twisted-Python] twisted webdav server
>Date: Fri, 22 Oct 2004 18:08:36 +0200
>
>But hey, keep it going; refactor, re-write, do whatever you want to,
>just get webdav into the standard twisted-package. That would be
>great!! And if one could serve data from a database, not just plain
>directories, that would be awsome !!!
>
>I'm jumping with joy!! ( Well, not really, but I'm really excited !!
>Web-dav is cool )
>
>Thomas :-)
>
>
>On Fri, 22 Oct 2004 17:35:28 +0200, donfu <fu at donfu.com> wrote:
> > Yasushi Iwata wrote:
> > >
> > > I wrote WebDAV module for Tiwsted.
> > >
> > >   http://akadama.jp/akadav.html
> >
> > Great, I just had a look at it. It seems to work well for serving a
> > directory over webdav. However, I'm not quite sure how to adapt it to 
>serve
> > dynamic data from a database.
> >
> > I think I could refactor your WebDAV resource-class, so that it works 
>with
> > arbitrary backends. Basically I'd try to factor everything out that does
> > explicitly deal with the filesystem. But in a way, that's what a 
>twisted.web
> > Resource is in the first place, no? Honestly, I'm a bit confused :)
> >
> > stefan.
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
>
>--
>Mvh/Best regards,
>Thomas Weholt
>http://www.weholt.org
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_________________________________________________________________
Protect your PC - get McAfee.com VirusScan Online 
http://clinic.mcafee.com/clinic/ibuy/campaign.asp?cid=3963




From andrew-twisted at puzzling.org  Sat Oct 23 18:06:50 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 24 Oct 2004 00:06:50 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <417AD0C3.9000002@comcast.net>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041023212324.GA5033@frobozz>
	<20041023213719.GQ4690@fuchsia.puzzling.org>
	<417AD0C3.9000002@comcast.net>
Message-ID: <20041023220650.GB5033@frobozz>

On Sat, Oct 23, 2004 at 05:44:35PM -0400, Stephen Waterbury wrote:
> Mary Gardiner wrote:
> >On Sat, Oct 23, 2004, Andrew Bennetts wrote:
> >
> >>The obvious disadvantage compared to your style is the loss of the
> >>direct visual association of which callbacks relate to which
> >>deferreds.  I'd be moderately interested in hearing how other people
> >>cope with that
> >
> >I find it's a problem when you start chaining deferreds by returning
> >deferred from callbacks: not so much that it's difficult to find out
> >where the callback is added, but that there's no visual representation
> >that corresponds to the "nesting" of the callbacks.
> 
> I like to think of it as the asynchronous form of
> "pipes and filters", so chaining deferreds seems quite
> logical to me.

That's how I think of it too.  However, if you layout code like stefan does
(placing callback definitions inside the other function definitions), then
you will get visually nested callbacks.  I suppose that's another argument
against defining callbacks within functions ;)

[Sidenote: in my usual mental model, "nesting" would be something you do
with deferreds, rather than callbacks, i.e. it's what happens when a
callback of one deferred returns some other deferred.  And then there's
"chaining" Deferreds with the "chainDeferred" method, which I always have to
read the implementation of to figure out which way round I need to call it.]

-Andrew.




From mary-twisted at puzzling.org  Sat Oct 23 18:36:04 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 24 Oct 2004 00:36:04 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <417AD0C3.9000002@comcast.net>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041023212324.GA5033@frobozz>
	<20041023213719.GQ4690@fuchsia.puzzling.org>
	<417AD0C3.9000002@comcast.net>
Message-ID: <20041023223604.GR4690@fuchsia.puzzling.org>

On Sat, Oct 23, 2004, Stephen Waterbury wrote:
> so chaining deferreds seems quite logical to me.

It's not that I don't find it logical, it's that the visual layout
diverges from the logic.

-Mary



From golux at comcast.net  Sat Oct 23 18:50:15 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Sat, 23 Oct 2004 18:50:15 -0400
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023223604.GR4690@fuchsia.puzzling.org>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>	<20041023212324.GA5033@frobozz>	<20041023213719.GQ4690@fuchsia.puzzling.org>	<417AD0C3.9000002@comcast.net>
	<20041023223604.GR4690@fuchsia.puzzling.org>
Message-ID: <417AE027.6010701@comcast.net>

Mary Gardiner wrote:
> On Sat, Oct 23, 2004, Stephen Waterbury wrote:
>>so chaining deferreds seems quite logical to me.
> 
> It's not that I don't find it logical, it's that the visual layout
> diverges from the logic.

That's what I meant -- ISTM the visual layout *does* convey
the logic well.  Sorry about the indefinite antecedent.
Guess not everyone's visual metaphors are mapped the same.  :)

Steve



From glyph at divmod.com  Sat Oct 23 19:45:08 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 23 Oct 2004 19:45:08 -0400
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <20041023152210.GH4690@fuchsia.puzzling.org>
References: <417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
	<20041023.122323.104028643.yasusii@lowlife.jp>
	<417A0BF5.1030707@twistedmatrix.com>
	<20041023075712.GC4690@fuchsia.puzzling.org>
	<417A7412.1090405@twistedmatrix.com>
	<20041023152210.GH4690@fuchsia.puzzling.org>
Message-ID: <1098575108.10111.1.camel@localhost>

On Sat, 2004-10-23 at 17:22 +0200, Mary Gardiner wrote:

> The Woven docs should be unchanged since the re-licence, but I'm unclear
> on whether that means I can MIT licence my code base, since I made
> derivations before the licence change.

Mary,

If you want to MIT license that code, you can.  If it would help, we can
have a retroactive 1.3.0L release that changes nothing but the license.




From tv at twistedmatrix.com  Sun Oct 24 04:08:38 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sun, 24 Oct 2004 11:08:38 +0300
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
Message-ID: <417B6306.9070707@twistedmatrix.com>

stefan wrote:
> discussion on that in the docs would be great. I've attached an example 
> of my style, maybe someone with a different style can rewrite the 
> example and comment on pros and cons?
> ---------------------------------------------------------------
> class X:
>     ...
>     def y(self):
>         # do some method initialisation
>         ...
>         # callbacks
>         def oneBack(result):
>               # extract someParams out of result
>               ...
>               return self.somethingDeferred().addCallback(twoBack, 
> someParams)
> 
>         def twoBack(result, someParams):
>               return "Foo" or raise Bar()
> 
>         return self.somethingDeferred().addCallback(oneBack)
> ---------------------------------------------------------------

I still prefer

d = self.somethingDeferred()
d.addCallback(oneBack)
return d

mostly because I tend to vomit when I see moshez write
something like

return self.somethingDeferred(foo, bar, baz, thud,
     quux).addCallback(oneBack, bar, baz,
     ).addErrback(twoBack, baz).addBoth(threeBack,
     foo)

Also, I tend to use nested functions for small and mostly
trivial things, like

def firstOne((a,b)):
     return a

and class-level functions for anything more complicated.
Whenever it is not absolutely clear from the context that
a function is a callback, I prefix the name with "cb", and
if it's a class-level function, I start the name with an
underscore to mark it an implementation detail.

class X:
     ...

     def _cbOneBack(self, result):
           ...
           d = self.somethingDeferred()

           def format(result, someParams):
                 return "Result is %r, %r" % (result, someParams)
           d.addCallback(format, someParams)

           return d

     def y(self):
         ...
         d = self.somethingDeferred()
         d.addCallback(self._cbOneBack)
         return d



From fu at donfu.com  Sun Oct 24 04:53:45 2004
From: fu at donfu.com (stefan)
Date: Sun, 24 Oct 2004 10:53:45 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <417B6306.9070707@twistedmatrix.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
	<417B6306.9070707@twistedmatrix.com>
Message-ID: <36CC755A-259A-11D9-B0B7-000393DC7B7C@donfu.com>

On 24.10.2004, at 10:08, Tommi Virtanen wrote:
>     def _cbOneBack(self, result):
>           ...
>           d = self.somethingDeferred()
>
>           def format(result, someParams):
>                 return "Result is %r, %r" % (result, someParams)
>           d.addCallback(format, someParams)
>
>           return d

This is a nice visualization of the logical flow, much better than my 
first version.

> Also, I tend to use nested functions for small and mostly trivial 
> things

Make sense. A complex callback of course deserves it's own method. I 
just don't like cluttering up my class-namespace with three mostly 
trivial callbacks/errbacks per method.

Thanks for everyone's feedback on the topic! And thanks for pointing 
out the "twisted-way" in the coding standards doc.
stefan.




From slyphon at twistedmatrix.com  Sun Oct 24 08:12:44 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sun, 24 Oct 2004 06:12:44 -0600
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023182920.GL4690@fuchsia.puzzling.org>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<20041023182920.GL4690@fuchsia.puzzling.org>
Message-ID: <20041024121244.GA30581@pyramid.twistedmatrix.com>

On Sat, Oct 23, 2004 at 08:29:20PM +0200, Mary Gardiner wrote:
 
> That's not the place for it unfortunately, everything else in that
> directory is the finger tutorial. (ie it's not a general "tutorials"
> directory... but that's OK, the "howto" directory isn't really full of
> howtos either...)
> 
> As best I can tell, there's no clear distinction between that and the
> "Using Deferreds" howto a directory up. I'll play around with merging
> them over the next hour or so and see if I'm right.
> 
> -Mary
> 

Yeah, i'm sorry, Mary. I had a feeling that I was putting stuff in the
wrong places when i committed it. I figured it was better to get it in,
and have it moved around somewhere else than to wait, and possibly not
get it included for 2.0. 

I really appreciate all the work you've done on documentation, and I
didn't want you to get the impression that I was being careless with
your realm of the source tree.

Anyway, thanks! I'll leave the "exactly where" decision in your capable
hands.

-Jonathan




From slyphon at twistedmatrix.com  Sun Oct 24 08:16:22 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sun, 24 Oct 2004 06:16:22 -0600
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023220650.GB5033@frobozz>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041023212324.GA5033@frobozz>
	<20041023213719.GQ4690@fuchsia.puzzling.org>
	<417AD0C3.9000002@comcast.net> <20041023220650.GB5033@frobozz>
Message-ID: <20041024121622.GB30581@pyramid.twistedmatrix.com>

 
> [Sidenote: in my usual mental model, "nesting" would be something you do
> with deferreds, rather than callbacks, i.e. it's what happens when a
> callback of one deferred returns some other deferred.  And then there's
> "chaining" Deferreds with the "chainDeferred" method, which I always have to
> read the implementation of to figure out which way round I need to call it.]
> 

Could you give an example of where you *would* need to use
.chainDeferred? I've always been under the (somewhat vague) impression
that returning a deferred from a callback was the same thing.

-Jonathan




From slyphon at twistedmatrix.com  Sun Oct 24 08:22:04 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sun, 24 Oct 2004 06:22:04 -0600
Subject: [Twisted-Python] two deferred_tutorial patches
In-Reply-To: <BAY2-F27F1P4f7LXXcb0000eae4@hotmail.com>
References: <BAY2-F27F1P4f7LXXcb0000eae4@hotmail.com>
Message-ID: <20041024122204.GC30581@pyramid.twistedmatrix.com>

 
> 
> Thanks for your time.
> 
> _________________________________________________________________

Cool, thanks for the patches! I'll get them merged as soon as I can hop
on my machine at home.


-Jonathan






From mary-twisted at puzzling.org  Sun Oct 24 09:27:25 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 24 Oct 2004 15:27:25 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041024121244.GA30581@pyramid.twistedmatrix.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<20041023182920.GL4690@fuchsia.puzzling.org>
	<20041024121244.GA30581@pyramid.twistedmatrix.com>
Message-ID: <20041024132725.GA12921@fuchsia.puzzling.org>

On Sun, Oct 24, 2004, Jonathan Simms wrote:
> I really appreciate all the work you've done on documentation, and I
> didn't want you to get the impression that I was being careless with
> your realm of the source tree.

It's OK -- I'd rather have documentation in the wrong place than... no
documentation!

> Anyway, thanks! I'll leave the "exactly where" decision in your capable
> hands.

OK. I got lost in the async howto last night, so probably won't touch
yours for a little while. Keep editing it where it is, and I'll move it
when I've had a better look.

-Mary



From slyphon at twistedmatrix.com  Sun Oct 24 09:56:11 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sun, 24 Oct 2004 07:56:11 -0600
Subject: [Twisted-Python] an alternative to epoll, perhaps? --> libevent
Message-ID: <20041024135611.GA3227@pyramid.twistedmatrix.com>

I was talking with hagbard, who is good friends with the guy who wrote
libevent (and is listed in the ssh(1) man page, Niels Provos), and he
(hagbard) suggested that it might be useful in writing a reactor.
Apparently it provides a portable compatability layer on top of whatever
native event-notification system there is.

just thought it was worth mentioning.

-Jonathan



From bv at bnl.gov  Sun Oct 24 20:39:07 2004
From: bv at bnl.gov (Brett Viren)
Date: Sun, 24 Oct 2004 20:39:07 -0400
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
Message-ID: <ir44qkj3a38.fsf@minos.phy.bnl.gov>

Hi,

I can't seem to make reactor.stop() actually stop the reactor and
allow my program to exit.  I hope someone can help.

What I'm actually trying to do is implement an execution pipeline so I
can serialize certain jobs but still run them in a thread so the main
loop can go about its business.  I do this with a class, CommandQueue,
that has a Queue.Queue and a method that can be called via
reactor.callInThread() that slurps the queue and runs any callables
sent down it.  Each callable's result is obtained from a Deferred.
This thread loops until I set CommandQueue.stop=True.  (Maybe someone
knows a better way?)

To try to triger the shutdown, I add a callback to the Deferred
associated with the final callable sent down the queue.  If I instead
call shutdown function via reactor.callLater() then the reactor will
actually stop.

I don't know if it matters, but /bin/ps only shows one instance of
python running.  Usually I see one instance per thread.


The code below and its output shows the problem.


#!/usr/bin/env python2.3

from twisted.python import threadable
threadable.init(1)
from twisted.internet import reactor,defer
from Queue import Queue,Empty


class CommandQueue:

    '''Queue up commands for serial calling.  One must call the
    drain() method to start reading the internal queue.  Most likely
    one wants to call this in a thread.'''

    def __init__(self):
        "Create a CommandQueue"
        self.queue = Queue()
        self.stop = False
        return

    def __call__(self,meth,*a,**k):

        '''Call meth(*a,**k) when it reaches end of queue.  Returns a
        Deferred that will pass the return of meth.'''

        deferred = defer.Deferred()
        self.queue.put((deferred,meth,a,k))
        return deferred

    def drain(self):
        'Drain the command queue until CommandQueue.stop is True'
        while not self.stop:
            try:
                d,meth,a,k = self.queue.get(True,1)
            except Empty:
                print "  queue empty"
                continue
            print "calling %s(%s,%s)"%(meth.__name__,str(a),str(k))
            d.callback(meth(*a,**k))
            print "callback done"
        print "drain closing"
        return 0

def test1():
    import time
    cq = CommandQueue()
    reactor.callInThread(cq.drain)

    def shutdown(x=None):
        print "Stopping CommandQueue"
        cq.stop = True
        print "Stopping reactory"
        reactor.stop()
        print "reactor.stop()'ed"

    def burp(x):
        for n in range(0,x):
            time.sleep(1)
            print x,n
        return x
    def chirp(x):
        print "okay:",x
        return None
    def ouch(x):
        print "bad:",x
        return x
    
    last = 3
    for n in range(0,last):
        print "dispatching",n
        d = cq(burp,n).addCallbacks(chirp,ouch)
        if last-n == 1:
            d.addCallbacks(shutdown,ouch)


if __name__ == '__main__':
    print "running test1"
    test1()
    print "end test1"
    reactor.run()
    print "reactor exitted"

#=-------------- end ------------=#


Running this produces the following:


[i386]bviren at aviator:test> ./test-commandqueue.py
running test1
dispatching 0
dispatching 1
dispatching 2
end test1
calling burp((0,),{})
okay: 0
callback done
calling burp((1,),{})
1 0
okay: 1
callback done
calling burp((2,),{})
2 0
2 1
okay: 2
Stopping CommandQueue
Stopping reactory
reactor.stop()'ed
callback done
drain closing

At which point I have to hit Control-C and finally get:

reactor exitted

Here is the mod to use reactor.callLater():

    ...
    last = 3
    for n in range(0,last):
        print "dispatching",n
        d = cq(burp,n).addCallbacks(chirp,ouch)
        #if last-n == 1:
        #    d.addCallbacks(shutdown,ouch)
    reactor.callLater(10,shutdown)
    ...


So, any ideas as to what I'm doing wrong?  

Thanks,
-Brett.




From cce at clarkevans.com  Sun Oct 24 22:59:09 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 24 Oct 2004 22:59:09 -0400
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
In-Reply-To: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
References: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
Message-ID: <20041025025908.GA31644@prometheusresearch.com>

Brett,

For starters, I'd keep the 'Queue' in the main thread, and
use callInThread to dispatch the function /w arguments.   Use
a d.callBoth (aka finally) to pop the next item from the queue
and then do a callInThread for it.

However, if you want to keep the Queue in the secondary thread,
you have one problem that is obvious to me:

On Sun, Oct 24, 2004 at 08:39:07PM -0400, Brett Viren wrote:
| class CommandQueue:
...
|     def drain(self):
|         'Drain the command queue until CommandQueue.stop is True'
|         while not self.stop:
|             try:
|                 d,meth,a,k = self.queue.get(True,1)
|             except Empty:
|                 print "  queue empty"
|                 continue
|             print "calling %s(%s,%s)"%(meth.__name__,str(a),str(k))
|             d.callback(meth(*a,**k))
|             print "callback done"
|         print "drain closing"
|         return 0
| 
| def test1():
|     import time
|     cq = CommandQueue()
|     reactor.callInThread(cq.drain)
|

You seem to be doing d.callback in the secondary thread, rather than
in the primary thread.  This could be causing some of the problems
you are experiencing.   It's not customary to use deferreds in any
other but the main thread.

>From a framework perspective, perhaps callback() should raise an 
error if it is called from anything other than the main thread?
Or perhaps even I'm not getting it.

Cheers!

Clark



From cce at clarkevans.com  Sun Oct 24 23:27:15 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 24 Oct 2004 23:27:15 -0400
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
In-Reply-To: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
References: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
Message-ID: <20041025032715.GA52256@prometheusresearch.com>

""" Sometimes you want to make sure that only one secondary
    thread is being used for a sequence of calls.  This can
    be accomplished with a Queue as proposed by Brett Viren.
"""
from twisted.internet import reactor,defer,threads
from Queue import Queue, Empty

class CommandQueue:
    ''' Queue up commands for serial calling.  One must call the
    drain() method to start reading the internal queue.  Most likely
    one wants to call this in a thread. '''

    def __init__(self):
        "Create a CommandQueue"
        self.queue   = Queue()
        self.running = False
        return

    def _cbRunQueue(self, cbval = None):
        try:
            cd,meth,a,k = self.queue.get(True,1)
            d = threads.deferToThread(meth, *a, **k)
            d.addBoth(self._cbRunQueue)
            d.chainDeferred(cd)
        except Empty:
            self.running = False
        return cbval

    def __call__(self,meth,*a,**k):
        '''Call meth(*a,**k) when it reaches end of queue.  Returns a
        Deferred that will pass the return of meth.'''
        d = defer.Deferred()
        self.queue.put((d,meth,a,k))
        if not self.running:
            self.running = True
            self._cbRunQueue()
        return d

def test1():
    import time
    cq = CommandQueue()

    def shutdown(x=None):
        print "Stopping reactory"
        reactor.stop()
        print "reactor.stop()'ed"

    def burp(x):
        for n in range(0,x):
            time.sleep(1)
            print x,n
        return x
    def chirp(x):
        print "okay:",x
        return None
    def ouch(x):
        print "bad:",x
        return x
    
    last = 3
    for n in range(0,last):
        print "dispatching",n
        d = cq(burp,n).addCallbacks(chirp,ouch)
        if last-n == 1:
            d.addCallbacks(shutdown,ouch)

if __name__ == '__main__':
    print "running test1"
    test1()
    print "end test1"
    reactor.run()
    print "reactor exitted"

-- 
Clark C. Evans                      Prometheus Research, LLC.
                                    http://www.prometheusresearch.com/
    o                               office: +1.203.777.2550 
  ~/ ,                              mobile: +1.203.444.0557 
 //
((   Prometheus Research: Transforming Data Into Knowledge
 \\  ,
   \/    - Research Exchange Database
   /\    - Survey & Assessment Technologies
   ` \   - Software Tools for Researchers
    ~ *



From andrew-twisted at puzzling.org  Mon Oct 25 05:07:18 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 25 Oct 2004 11:07:18 +0200
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
In-Reply-To: <20041025025908.GA31644@prometheusresearch.com>
References: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
	<20041025025908.GA31644@prometheusresearch.com>
Message-ID: <20041025090718.GG5033@frobozz>

On Sun, Oct 24, 2004 at 10:59:09PM -0400, Clark C. Evans wrote:
[...]
> 
> However, if you want to keep the Queue in the secondary thread,
> you have one problem that is obvious to me:
> 
[...]
> |             print "calling %s(%s,%s)"%(meth.__name__,str(a),str(k))
> |             d.callback(meth(*a,**k))
> |             print "callback done"
[...]
> 
> You seem to be doing d.callback in the secondary thread, rather than
> in the primary thread.  This could be causing some of the problems
> you are experiencing.   It's not customary to use deferreds in any
> other but the main thread.

Yep, that's the problem here.  Change this:
    d.callback(meth(*a,**k))
to this:
    reactor.callFromThread(d.callback, meth(*a, **k))

(Or perhaps less confusingly:
    result = meth(*a, **kw)
    reactor.callFromThread(d.callback, result)
)

> >From a framework perspective, perhaps callback() should raise an 
> error if it is called from anything other than the main thread?
> Or perhaps even I'm not getting it.

There's no reason why Deferreds wouldn't work in another thread, if that's
what you want.  It's just that generally it's not what you want...
Deferreds are used in Twisted to deal with asynchronous operations; but in
non-event loop threads, you'd usually just block.  If for some reason there
were two event-loop threads in the one process, then Deferreds might be
useful in both.

Nothing about Deferreds is at all dependent on the reactor, except for the
ill-conceived setTimeout functionality.  If you want to run a callback chain
in another thread, then Twisted shouldn't stop you (but I would expect you
to very clearly comment your code to explain why, as it would be very
unusual).

This is just a long-winded way of saying that Deferred's implementation
should be completely thread ignorant, even though in practice they're only
used from the main thread.

The real error here wasn't using Deferred.callback in another thread, it was
using reactor.stop in that thread.

-Andrew.




From bv at bnl.gov  Mon Oct 25 12:41:12 2004
From: bv at bnl.gov (Brett Viren)
Date: Mon, 25 Oct 2004 12:41:12 -0400
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
In-Reply-To: <20041025090718.GG5033@frobozz> (Andrew Bennetts's message of
	"Mon, 25 Oct 2004 11:07:18 +0200")
References: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
	<20041025025908.GA31644@prometheusresearch.com>
	<20041025090718.GG5033@frobozz>
Message-ID: <ir4fz42agyf.fsf@minos.phy.bnl.gov>

Andrew Bennetts <andrew-twisted at puzzling.org> writes:

> Yep, that's the problem here.  Change this:
>     d.callback(meth(*a,**k))
> to this:
>     reactor.callFromThread(d.callback, meth(*a, **k))
>
> (Or perhaps less confusingly:
>     result = meth(*a, **kw)
>     reactor.callFromThread(d.callback, result)
> )

Yes, that did it.

> There's no reason why Deferreds wouldn't work in another thread, if that's
> what you want.  It's just that generally it's not what you want...

In this case the Deferred is used as a return value for Twisted's
XML-RPC server implementation.  I go to this trouble of a CommandQueue
because my system blurs the distinction between server and client and
this was leading to deadlocks.  This CommandQueue should make sure
that all the troublesome communications are atomic.

Thanks to both you and Clark for your help.

-Brett.



From glyph at divmod.com  Mon Oct 25 13:32:02 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 25 Oct 2004 13:32:02 -0400
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
In-Reply-To: <ir4fz42agyf.fsf@minos.phy.bnl.gov>
References: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
	<20041025025908.GA31644@prometheusresearch.com>
	<20041025090718.GG5033@frobozz>  <ir4fz42agyf.fsf@minos.phy.bnl.gov>
Message-ID: <1098725522.17420.12.camel@localhost>

On Mon, 2004-10-25 at 12:41 -0400, Brett Viren wrote:

> In this case the Deferred is used as a return value for Twisted's
> XML-RPC server implementation.  I go to this trouble of a CommandQueue
> because my system blurs the distinction between server and client and
> this was leading to deadlocks.  This CommandQueue should make sure
> that all the troublesome communications are atomic.

Doing things in threads almost always makes things *less* atomic than
just leaving them all in the main reactor thread.  Even if I'm totally
mistaken, I feel like I have to ask a few questions to make sure that
newbies don't stumble across this thread in the future and think they
need to start managing their own threadpools so Twisted won't
deadlock ;)

When you say you're "blurring the distinction between server and
client", do you mean you're implementing something like an XMLRPC proxy,
where the server is itself a client, relaying requests elswhere and
waiting for their results?  Or something else?

Were you running requests in threads before you came up with the
CommandQueue abstraction?  If not, what caused the deadlocks?  How was
the client/server blurring related to the deadlocks?

Finally, did you consider an approach where, rather than queueing
commands, you just executed them synchronously and let the reactor
serialize them?  If so, what lead to the decision to change to a
thread-based approach?




From cce at clarkevans.com  Mon Oct 25 14:14:14 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 25 Oct 2004 14:14:14 -0400
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
In-Reply-To: <ir4fz42agyf.fsf@minos.phy.bnl.gov>
References: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
	<20041025025908.GA31644@prometheusresearch.com>
	<20041025090718.GG5033@frobozz> <ir4fz42agyf.fsf@minos.phy.bnl.gov>
Message-ID: <20041025181414.GA60565@prometheusresearch.com>

On Mon, Oct 25, 2004 at 12:41:12PM -0400, Brett Viren wrote:
| Andrew Bennetts <andrew-twisted at puzzling.org> writes:
| 
| > Yep, that's the problem here.  Change this:
| >     d.callback(meth(*a,**k))
| > to this:
| >     reactor.callFromThread(d.callback, meth(*a, **k))
| >
| > (Or perhaps less confusingly:
| >     result = meth(*a, **kw)
| >     reactor.callFromThread(d.callback, result)
| > )
| 
| Yes, that did it.

If your meth() could raise an exception, you probably also
need to wrap that function call in a try/except block.

    try:
        result = meth(*a, **kw)
    except:
        result = failure.Failure()
    reactor.callFromThread(d.callback, result)

Best,

Clark



From bv at bnl.gov  Mon Oct 25 14:56:02 2004
From: bv at bnl.gov (Brett Viren)
Date: Mon, 25 Oct 2004 14:56:02 -0400
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
In-Reply-To: <1098725522.17420.12.camel@localhost> (Glyph Lefkowitz's
	message of "Mon, 25 Oct 2004 13:32:02 -0400")
References: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
	<20041025025908.GA31644@prometheusresearch.com>
	<20041025090718.GG5033@frobozz> <ir4fz42agyf.fsf@minos.phy.bnl.gov>
	<1098725522.17420.12.camel@localhost>
Message-ID: <ir4sm828w59.fsf@minos.phy.bnl.gov>

Glyph Lefkowitz <glyph at divmod.com> writes:

> On Mon, 2004-10-25 at 12:41 -0400, Brett Viren wrote:
>
>> In this case the Deferred is used as a return value for Twisted's
>> XML-RPC server implementation.  I go to this trouble of a CommandQueue
>> because my system blurs the distinction between server and client and
>> this was leading to deadlocks.  This CommandQueue should make sure
>> that all the troublesome communications are atomic.
>
> Doing things in threads almost always makes things *less* atomic than
> just leaving them all in the main reactor thread.  Even if I'm totally
> mistaken, I feel like I have to ask a few questions to make sure that
> newbies don't stumble across this thread in the future and think they
> need to start managing their own threadpools so Twisted won't
> deadlock ;)
>
> When you say you're "blurring the distinction between server and
> client", do you mean you're implementing something like an XMLRPC proxy,
> where the server is itself a client, relaying requests elswhere and
> waiting for their results?  Or something else?

It is basically as you describe but with some additions.  The primary
aim is to marshal data from an XML-RPC client to a server using a
custom protocol while providing status information as well as control.

      XML-RPC       Custom
data   ---->  proxy ---> data
source <----  proxy      sink
               ^  |
              /|\ |
               |  |  XML-RPC
               | \|/
               |  V
               GUI
          Monitor/Control
                 

The data source listens (is a server) for data requests which include
a callback URL.  After that, it sends data to (is a client for) the
proxy which forwards the data to the data sink and sends a
confirmation to the GUI monitor.  The proxy also sends heartbeats
fired via reactor.callLater to the GUI.

> Were you running requests in threads before you came up with the
> CommandQueue abstraction?  If not, what caused the deadlocks?  How was
> the client/server blurring related to the deadlocks?

Yes.  In the proxy, I handle the XML-RPC requests from the data source
and the GUI via this class:

class Spawner(threading.Thread):
    '''Call callable in its own thread, return value is sent into the
    Spawner.deferred.callback()'''

    def __init__(self,callable,errable=None,**kwds):
        threading.Thread.__init__(self,**kwds);
        self.callable = callable
        if errable is None:
            errable = self.chirp
        self.deferred = defer.Deferred()
        self.deferred.addErrback(errable)
        self.setDaemon(1)
        self.start()
        return

    def chirp(self,*args):
	print str(args)
        log.error(str(args))
        return args

    def run(self):
        self.deferred.callback(self.callable())

This runs the request in a thread an returns the value via a deferred
(which is used as the return value for the XML-RPC method).

> Finally, did you consider an approach where, rather than queueing
> commands, you just executed them synchronously and let the reactor
> serialize them?  If so, what lead to the decision to change to a
> thread-based approach?

The basic data proxying must not be interupted.  Some of the control
requests sent from the GUI can take more than the period between data
updates and thus block that proxying.


It's possible I'm doing something stupid in this design.  Please let
me know if you have improvements.

Thanks,
-Brett.




From foom at fuhm.net  Mon Oct 25 17:24:09 2004
From: foom at fuhm.net (James Y Knight)
Date: Mon, 25 Oct 2004 17:24:09 -0400
Subject: [Twisted-Python] CFReactor
Message-ID: <357849C0-26CC-11D9-9668-000A95A50FB2@fuhm.net>

Itamar just added half-closing support to Twisted, and I foolishly 
volunteered to look at adding support to cfreactor for him. However, 
that was before I looked at it. Now that I have, I have little idea 
what it's actually doing, so I'm afraid that I'm unable to actually 
implement this change.

The "SelectableSocketWrapper" looks like a horrible kludge, and I'm not 
sure why it's necessary. Why does it override the wrapped object's 
"connectionLost"? Why do you have to wrap&override 
Selectable.start/stopReading/Writing, instead of doing that stuff in 
reactor.add/removeReader/Writer? What is simulate?? Essentially, I just 
don't understand why it is so different from the other reactors.

Either hints or else a working half-close implementation for cfreactor 
would be appreciated.

James




From bob at redivi.com  Mon Oct 25 18:02:29 2004
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 25 Oct 2004 18:02:29 -0400
Subject: [Twisted-Python] CFReactor
In-Reply-To: <357849C0-26CC-11D9-9668-000A95A50FB2@fuhm.net>
References: <357849C0-26CC-11D9-9668-000A95A50FB2@fuhm.net>
Message-ID: <909651B8-26D1-11D9-959B-000A95BA5446@redivi.com>


On Oct 25, 2004, at 17:24, James Y Knight wrote:

> Itamar just added half-closing support to Twisted, and I foolishly 
> volunteered to look at adding support to cfreactor for him. However, 
> that was before I looked at it. Now that I have, I have little idea 
> what it's actually doing, so I'm afraid that I'm unable to actually 
> implement this change.
>
> The "SelectableSocketWrapper" looks like a horrible kludge, and I'm 
> not sure why it's necessary. Why does it override the wrapped object's 
> "connectionLost"? Why do you have to wrap&override 
> Selectable.start/stopReading/Writing, instead of doing that stuff in 
> reactor.add/removeReader/Writer? What is simulate?? Essentially, I 
> just don't understand why it is so different from the other reactors.

The SSW kludge is necessary because it inherits a lot of functionality 
from the existing default select-based reactor and its sockets.  It is 
a workaround for the lack of extensibility in the implementation of 
those sockets and that reactor.  It could be less hacky if it were 
inverted, but then you'd have to subclass every possible port and add 
the reactor notifications, and essentially copy about 80% of 
twisted.internet.default instead of subclassing it.  If you want to 
refactor it this way, be my guest.. but I'm not bored enough to do it 
:)

The reason for the loseConnection hack is that the existing 
implementation of loseConnection doesn't do removeReader/Writer!  
loseConnection effectively kills the socket without notifying the 
reactor at all.  If the existing implementation told the reactor when 
it was done with a socket, SSW wouldn't be so much of a kludge.

> Either hints or else a working half-close implementation for cfreactor 
> would be appreciated.

You'll probably have to implement the same style of hack that is used 
for loseConnection.  Replace the half-lose-connection method (if it 
exists) with a method that notifies the reactor of the intention, and 
then call the original implementation.

-bob




From matusis at matusis.com  Tue Oct 26 00:40:09 2004
From: matusis at matusis.com (Alec Matusis)
Date: Mon, 25 Oct 2004 21:40:09 -0700
Subject: [Twisted-Python] twisted run out of file descriptors
Message-ID: <PJEGIHBMPNKKLJPMILMDKEJNCBAA.matusis@matusis.com>

Hi
I am running twisted on 2.4.21 Kernel.

My chat server has been puking and dying the last couple days and it
seemed pretty clear that it was dying when it was reaching 1024 open
file descriptors.
I noticed the default ulimit -n was 1024, so I added a 'ulimit -n
4096' before starting the chat server. That has apparently allowed it to
surpass
1024 descriptors (it has 1263 at the moment) but now it is failing to
call select (see sample errors below).


There is this value
FD_SETSIZE in the C headers that determines the maximum number of
sockets a proc can select() on, and it's set to 1024. It it possible to
increase this limit, short of recompiling the Kernel?

Sample Errors:

-----

File
"/usr/local/encap/Twisted-1.2.0/lib/python2.3/site-packages/twisted/
internet/default.py", line 487, in doSelect
[], timeout)
exceptions.ValueError: filedescriptor out of range in select()

2004/10/25 16:35 PDT [-] Malformed file descriptor found. Preening
lists.
2004/10/25 16:35 PDT [-] bad descriptor

Thanks

Alec matusis





From uwe at oss4u.com  Tue Oct 26 01:37:05 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Mon, 25 Oct 2004 22:37:05 -0700
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <PJEGIHBMPNKKLJPMILMDKEJNCBAA.matusis@matusis.com>
References: <PJEGIHBMPNKKLJPMILMDKEJNCBAA.matusis@matusis.com>
Message-ID: <200410252237.05259.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


check your /proc/sys/fs/file-max 
file. It's the max number of file descriptors the kernel will handle.
if it's 1024 just set it to something higher (2048 or 4096)

I don't know if that's really the reason, but it doesn't hurt either to give 
it a shot


On Monday 25 October 2004 09:40 pm, Alec Matusis wrote:
> Hi
> I am running twisted on 2.4.21 Kernel.
>
> My chat server has been puking and dying the last couple days and it
> seemed pretty clear that it was dying when it was reaching 1024 open
> file descriptors.
> I noticed the default ulimit -n was 1024, so I added a 'ulimit -n
> 4096' before starting the chat server. That has apparently allowed it to
> surpass
> 1024 descriptors (it has 1263 at the moment) but now it is failing to
> call select (see sample errors below).
>
>
> There is this value
> FD_SETSIZE in the C headers that determines the maximum number of
> sockets a proc can select() on, and it's set to 1024. It it possible to
> increase this limit, short of recompiling the Kernel?
>
> Sample Errors:
>
> -----
>
> File
> "/usr/local/encap/Twisted-1.2.0/lib/python2.3/site-packages/twisted/
> internet/default.py", line 487, in doSelect
> [], timeout)
> exceptions.ValueError: filedescriptor out of range in select()
>
> 2004/10/25 16:35 PDT [-] Malformed file descriptor found. Preening
> lists.
> 2004/10/25 16:35 PDT [-] bad descriptor
>
> Thanks
>
> Alec matusis
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

- -- 
	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFBfeKBjqGXBvRToM4RAulDAKC3SoSVvIWld/fk4o0cr4i2iVJRFgCglSWc
ejWGhr5mlcVj76u2q70TlF0=
=LY3Q
-----END PGP SIGNATURE-----




From matusis at matusis.com  Tue Oct 26 01:58:27 2004
From: matusis at matusis.com (Alec Matusis)
Date: Mon, 25 Oct 2004 22:58:27 -0700
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <200410252237.05259.uwe@oss4u.com>
Message-ID: <PJEGIHBMPNKKLJPMILMDAEJPCBAA.matusis@matusis.com>

Hi- thanks - that number i have changed- but that's total number for the
ENTIRE system
alecm at web0:~> cat /proc/sys/fs/file-max
200000

I also changed the number of fds available PER child PROCESS in a shell

ulimit -n 4096

select() call has it's own hardcoded number apparently...



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Uwe C.
Schroeder
Sent: Monday, October 25, 2004 10:37 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] twisted run out of file descriptors


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


check your /proc/sys/fs/file-max
file. It's the max number of file descriptors the kernel will handle.
if it's 1024 just set it to something higher (2048 or 4096)

I don't know if that's really the reason, but it doesn't hurt either to give
it a shot


On Monday 25 October 2004 09:40 pm, Alec Matusis wrote:
> Hi
> I am running twisted on 2.4.21 Kernel.
>
> My chat server has been puking and dying the last couple days and it
> seemed pretty clear that it was dying when it was reaching 1024 open
> file descriptors.
> I noticed the default ulimit -n was 1024, so I added a 'ulimit -n
> 4096' before starting the chat server. That has apparently allowed it to
> surpass
> 1024 descriptors (it has 1263 at the moment) but now it is failing to
> call select (see sample errors below).
>
>
> There is this value
> FD_SETSIZE in the C headers that determines the maximum number of
> sockets a proc can select() on, and it's set to 1024. It it possible to
> increase this limit, short of recompiling the Kernel?
>
> Sample Errors:
>
> -----
>
> File
> "/usr/local/encap/Twisted-1.2.0/lib/python2.3/site-packages/twisted/
> internet/default.py", line 487, in doSelect
> [], timeout)
> exceptions.ValueError: filedescriptor out of range in select()
>
> 2004/10/25 16:35 PDT [-] Malformed file descriptor found. Preening
> lists.
> 2004/10/25 16:35 PDT [-] bad descriptor
>
> Thanks
>
> Alec matusis
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

- --
	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFBfeKBjqGXBvRToM4RAulDAKC3SoSVvIWld/fk4o0cr4i2iVJRFgCglSWc
ejWGhr5mlcVj76u2q70TlF0=
=LY3Q
-----END PGP SIGNATURE-----


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From tv at twistedmatrix.com  Tue Oct 26 03:25:08 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 26 Oct 2004 10:25:08 +0300
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <PJEGIHBMPNKKLJPMILMDKEJNCBAA.matusis@matusis.com>
References: <PJEGIHBMPNKKLJPMILMDKEJNCBAA.matusis@matusis.com>
Message-ID: <417DFBD4.7090008@twistedmatrix.com>

Alec Matusis wrote:

>My chat server has been puking and dying the last couple days and it
>seemed pretty clear that it was dying when it was reaching 1024 open
>file descriptors.
>I noticed the default ulimit -n was 1024, so I added a 'ulimit -n
>4096' before starting the chat server. That has apparently allowed it to
>surpass
>1024 descriptors (it has 1263 at the moment) but now it is failing to
>call select (see sample errors below).
>
>
>There is this value
>FD_SETSIZE in the C headers that determines the maximum number of
>sockets a proc can select() on, and it's set to 1024. It it possible to
>increase this limit, short of recompiling the Kernel?
>  
>
Yes (in some libcs) but you don't want to play with that thing. Switch 
to pollreactor.
Poll has no builtin limits, but will start to get slow after a few 
thousand fds.

But, do you know why your app has over a thousand fds open? If there's 
no really
good reason, you have a leak and should fix that. A thousand fds is 
quite a lot.




From matusis at matusis.com  Tue Oct 26 03:53:55 2004
From: matusis at matusis.com (Alec Matusis)
Date: Tue, 26 Oct 2004 00:53:55 -0700
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <417DFBD4.7090008@twistedmatrix.com>
Message-ID: <PJEGIHBMPNKKLJPMILMDGEKACBAA.matusis@matusis.com>

My application is a chat, and it has > 1024 simultaneously connected chat
clients at the peak of usage.
I checked the numbers of fds in /proc/PID/fd before, during and after a
client connect- there is no leak, I just have > 1024 people connected...

I was trying to avoid using poll() but I will have to resort to it if there
is no other choice.
Do you know how where to find instructions to change this in glibc ?
I have been looking in Google, but to no avail...

Thanks.



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Tommi
Virtanen
Sent: Tuesday, October 26, 2004 12:25 AM
To: Twisted general discussion
Subject: Re: [Twisted-Python] twisted run out of file descriptors


Alec Matusis wrote:

>My chat server has been puking and dying the last couple days and it
>seemed pretty clear that it was dying when it was reaching 1024 open
>file descriptors.
>I noticed the default ulimit -n was 1024, so I added a 'ulimit -n
>4096' before starting the chat server. That has apparently allowed it to
>surpass
>1024 descriptors (it has 1263 at the moment) but now it is failing to
>call select (see sample errors below).
>
>
>There is this value
>FD_SETSIZE in the C headers that determines the maximum number of
>sockets a proc can select() on, and it's set to 1024. It it possible to
>increase this limit, short of recompiling the Kernel?
>
>
Yes (in some libcs) but you don't want to play with that thing. Switch
to pollreactor.
Poll has no builtin limits, but will start to get slow after a few
thousand fds.

But, do you know why your app has over a thousand fds open? If there's
no really
good reason, you have a leak and should fix that. A thousand fds is
quite a lot.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From tv at twistedmatrix.com  Tue Oct 26 04:27:36 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 26 Oct 2004 11:27:36 +0300
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <PJEGIHBMPNKKLJPMILMDGEKACBAA.matusis@matusis.com>
References: <PJEGIHBMPNKKLJPMILMDGEKACBAA.matusis@matusis.com>
Message-ID: <417E0A78.5050609@twistedmatrix.com>

Alec Matusis wrote:

>I was trying to avoid using poll() but I will have to resort to it if there
>is no other choice.
>  
>
Why would you want to do that?




From matusis at matusis.com  Tue Oct 26 04:35:56 2004
From: matusis at matusis.com (Alec Matusis)
Date: Tue, 26 Oct 2004 01:35:56 -0700
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <417E0A78.5050609@twistedmatrix.com>
Message-ID: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>

I thought it would be faster with select() rather than poll() - lower load
on the machine?



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Tommi
Virtanen
Sent: Tuesday, October 26, 2004 1:28 AM
To: Twisted general discussion
Subject: Re: [Twisted-Python] twisted run out of file descriptors


Alec Matusis wrote:

>I was trying to avoid using poll() but I will have to resort to it if there
>is no other choice.
>
>
Why would you want to do that?


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From anthony at interlink.com.au  Tue Oct 26 05:12:27 2004
From: anthony at interlink.com.au (Anthony Baxter)
Date: Tue, 26 Oct 2004 19:12:27 +1000
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
References: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
Message-ID: <417E14FB.9040900@interlink.com.au>

Alec Matusis wrote:
> I thought it would be faster with select() rather than poll() - lower load
> on the machine?

Not for any realistic application. On some platforms, select is just a
wrapper around poll, anyway.

select is fundamentally flawed for large numbers of FDs. Use poll.

Anthony

-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From naijasms at gmail.com  Tue Oct 26 11:05:13 2004
From: naijasms at gmail.com (Seun Osewa)
Date: Tue, 26 Oct 2004 16:05:13 +0100
Subject: [Twisted-Python] Case for an Async MySQL Driver?
Message-ID: <5d35fc5d04102608056a9d1c35@mail.gmail.com>

Hi,

I'm new to Twisted, and I was just thinking about how, while
'twisted.enterprise.adbapi' is is a really neat idea, it's sort of a
stop-gap solution pending the time async database drivers can be
integrated into Twisted.  It's not 'right' to have 1 python thread and
1 mysql server thread/process for each connection.

How about an event-driven MySQL protocol implementation that fits into
the Twisted Framework? (I came accross a MySQL protocol specification
online once but I think I've lost it). If this sounds sensible, I'll
be interested with helping out with implementation but I won't be able
to do actual coding for some time.

Regards,
Seun.



From glyph at divmod.com  Tue Oct 26 11:31:21 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 26 Oct 2004 11:31:21 -0400
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
References: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
Message-ID: <1098804681.20890.18.camel@localhost>

On Tue, 2004-10-26 at 01:35 -0700, Alec Matusis wrote:
> I thought it would be faster with select() rather than poll() - lower load
> on the machine?

Sounds like you might be confused - if someone had told you that
select() is faster than *polling*, that would be accurate - the
terminology is confusing because "polling" means "repeatedly checking
for input in a busy-loop".  In this context, "polling" is actually the
opposite of "calling poll()".

poll() is simply a better version of select().  The only reason it is
not the default reactor is that there are some obscure places where
select() exists and it does not.  I am not sure if this is even relevant
any more, since I don't know if any such place can build recent versions
of Python.




From itamar at itamarst.org  Tue Oct 26 11:41:44 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 26 Oct 2004 11:41:44 -0400
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <1098804681.20890.18.camel@localhost>
References: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
	<1098804681.20890.18.camel@localhost>
Message-ID: <1098805304.4900.38.camel@sheriffpony>

On Tue, 2004-10-26 at 11:31 -0400, Glyph Lefkowitz wrote:

> poll() is simply a better version of select().  The only reason it is
> not the default reactor is that there are some obscure places where
> select() exists and it does not.  I am not sure if this is even relevant
> any more, since I don't know if any such place can build recent versions
> of Python.

Mac OS X 10.2 doesn't have poll(), IIRC. 




From bob at redivi.com  Tue Oct 26 11:47:14 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 26 Oct 2004 11:47:14 -0400
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <1098804681.20890.18.camel@localhost>
References: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
	<1098804681.20890.18.camel@localhost>
Message-ID: <4E78F174-2766-11D9-959B-000A95BA5446@redivi.com>

On Oct 26, 2004, at 11:31, Glyph Lefkowitz wrote:

> On Tue, 2004-10-26 at 01:35 -0700, Alec Matusis wrote:
>> I thought it would be faster with select() rather than poll() - lower 
>> load
>> on the machine?
>
> Sounds like you might be confused - if someone had told you that
> select() is faster than *polling*, that would be accurate - the
> terminology is confusing because "polling" means "repeatedly checking
> for input in a busy-loop".  In this context, "polling" is actually the
> opposite of "calling poll()".
>
> poll() is simply a better version of select().  The only reason it is
> not the default reactor is that there are some obscure places where
> select() exists and it does not.  I am not sure if this is even 
> relevant
> any more, since I don't know if any such place can build recent 
> versions
> of Python.

Mac OS X prior to 10.3 does not ship with an implementation of poll.
Mac OS X 10.3 has an implementation of poll, but it is a wrapper for 
select.

#ifndef POLL_NO_WARN
#warning "poll() functionality for Mac OS X is implemented via an 
emulation layer on top of select(), not in the kernel directly.  It is 
recommended that programs running under OS X 10.3 prefer select() over 
poll().  Configure scripts should look for the _POLL_EMUL_H_ define 
(instead of _POLL_H_ or _SYS_POLL_H_) and avoid implementations where 
poll is not implemented in the kernel."
#endif

-bob




From foom at fuhm.net  Tue Oct 26 13:04:39 2004
From: foom at fuhm.net (James Y Knight)
Date: Tue, 26 Oct 2004 13:04:39 -0400
Subject: [Twisted-Python] CFReactor
In-Reply-To: <909651B8-26D1-11D9-959B-000A95BA5446@redivi.com>
References: <357849C0-26CC-11D9-9668-000A95A50FB2@fuhm.net>
	<909651B8-26D1-11D9-959B-000A95BA5446@redivi.com>
Message-ID: <1F9829DE-2771-11D9-9668-000A95A50FB2@fuhm.net>

On Oct 25, 2004, at 6:02 PM, Bob Ippolito wrote:
> On Oct 25, 2004, at 17:24, James Y Knight wrote:
>
>> Itamar just added half-closing support to Twisted, and I foolishly 
>> volunteered to look at adding support to cfreactor for him. However, 
>> that was before I looked at it. Now that I have, I have little idea 
>> what it's actually doing, so I'm afraid that I'm unable to actually 
>> implement this change.
>>
>> The "SelectableSocketWrapper" looks like a horrible kludge, and I'm 
>> not sure why it's necessary. Why does it override the wrapped 
>> object's "connectionLost"? Why do you have to wrap&override 
>> Selectable.start/stopReading/Writing, instead of doing that stuff in 
>> reactor.add/removeReader/Writer? What is simulate?? Essentially, I 
>> just don't understand why it is so different from the other reactors.
>
> The SSW kludge is necessary because it inherits a lot of functionality 
> from the existing default select-based reactor and its sockets.  It is 
> a workaround for the lack of extensibility in the implementation of 
> those sockets and that reactor.  It could be less hacky if it were 
> inverted, but then you'd have to subclass every possible port and add 
> the reactor notifications, and essentially copy about 80% of 
> twisted.internet.default instead of subclassing it.  If you want to 
> refactor it this way, be my guest.. but I'm not bored enough to do it 
> :)
>
> The reason for the loseConnection hack is that the existing 
> implementation of loseConnection doesn't do removeReader/Writer!  
> loseConnection effectively kills the socket without notifying the 
> reactor at all.  If the existing implementation told the reactor when 
> it was done with a socket, SSW wouldn't be so much of a kludge.

Er, I don't believe you. If that was the case, it would be a huge fd 
leak, which I'm pretty sure Twisted doesn't have. I removed that hack 
and I don't think anything further broke.

Anyways, I've changed cfreactor to do what I think should be the right 
thing, but it's randomly failing tests. Before my changes it was 
failing a lot of tests too, so I don't know if this is a regression or 
not.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: cfreactor.diff
Type: application/octet-stream
Size: 2726 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20041026/fd6d500f/attachment.obj 
-------------- next part --------------


James

From bob at redivi.com  Tue Oct 26 13:35:03 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 26 Oct 2004 13:35:03 -0400
Subject: [Twisted-Python] CFReactor
In-Reply-To: <1F9829DE-2771-11D9-9668-000A95A50FB2@fuhm.net>
References: <357849C0-26CC-11D9-9668-000A95A50FB2@fuhm.net>
	<909651B8-26D1-11D9-959B-000A95BA5446@redivi.com>
	<1F9829DE-2771-11D9-9668-000A95A50FB2@fuhm.net>
Message-ID: <5E52D48E-2775-11D9-959B-000A95BA5446@redivi.com>

On Oct 26, 2004, at 13:04, James Y Knight wrote:

> On Oct 25, 2004, at 6:02 PM, Bob Ippolito wrote:
>> On Oct 25, 2004, at 17:24, James Y Knight wrote:
>>
>>> Itamar just added half-closing support to Twisted, and I foolishly 
>>> volunteered to look at adding support to cfreactor for him. However, 
>>> that was before I looked at it. Now that I have, I have little idea 
>>> what it's actually doing, so I'm afraid that I'm unable to actually 
>>> implement this change.
>>>
>>> The "SelectableSocketWrapper" looks like a horrible kludge, and I'm 
>>> not sure why it's necessary. Why does it override the wrapped 
>>> object's "connectionLost"? Why do you have to wrap&override 
>>> Selectable.start/stopReading/Writing, instead of doing that stuff in 
>>> reactor.add/removeReader/Writer? What is simulate?? Essentially, I 
>>> just don't understand why it is so different from the other 
>>> reactors.
>>
>> The SSW kludge is necessary because it inherits a lot of 
>> functionality from the existing default select-based reactor and its 
>> sockets.  It is a workaround for the lack of extensibility in the 
>> implementation of those sockets and that reactor.  It could be less 
>> hacky if it were inverted, but then you'd have to subclass every 
>> possible port and add the reactor notifications, and essentially copy 
>> about 80% of twisted.internet.default instead of subclassing it.  If 
>> you want to refactor it this way, be my guest.. but I'm not bored 
>> enough to do it :)
>>
>> The reason for the loseConnection hack is that the existing 
>> implementation of loseConnection doesn't do removeReader/Writer!  
>> loseConnection effectively kills the socket without notifying the 
>> reactor at all.  If the existing implementation told the reactor when 
>> it was done with a socket, SSW wouldn't be so much of a kludge.
>
> Er, I don't believe you. If that was the case, it would be a huge fd 
> leak, which I'm pretty sure Twisted doesn't have. I removed that hack 
> and I don't think anything further broke.

No.  It's not a fd leak because loseConnection closes the file 
descriptors.  It just doesn't tell the reactor it has done so.  It 
should leak SSW instances (memory) now, though.

> Anyways, I've changed cfreactor to do what I think should be the right 
> thing, but it's randomly failing tests. Before my changes it was 
> failing a lot of tests too, so I don't know if this is a regression or 
> not.

I don't really have the time or need to debug this anytime soon.  When 
I first wrote CFReactor, it passed all of the tests.  Either changes in 
PyObjC (unlikely) or Twisted (likely) caused these test failures.  Some 
of it is probably due to tests making incorrect assumptions, especially 
because CFReactor isn't designed to be iterated (it has to set up a 
timer to stop itself).

-bob




From george at omniti.com  Tue Oct 26 14:06:20 2004
From: george at omniti.com (George Schlossnagle)
Date: Tue, 26 Oct 2004 14:06:20 -0400
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <4E78F174-2766-11D9-959B-000A95BA5446@redivi.com>
References: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
	<1098804681.20890.18.camel@localhost>
	<4E78F174-2766-11D9-959B-000A95BA5446@redivi.com>
Message-ID: <BD5E4A18-2779-11D9-8CC2-000D93359332@omniti.com>


On Oct 26, 2004, at 11:47 AM, Bob Ippolito wrote:
> Mac OS X prior to 10.3 does not ship with an implementation of poll.
> Mac OS X 10.3 has an implementation of poll, but it is a wrapper for 
> select.

10.3+ support kqueue() though.

George




From narnett at liveworld.com  Tue Oct 26 14:27:14 2004
From: narnett at liveworld.com (Nick Arnett)
Date: Tue, 26 Oct 2004 11:27:14 -0700
Subject: [Twisted-Python] IMAP fetchUID speed?
Message-ID: <417E9702.6080506@liveworld.com>

I'm trying to figure out what's happening in an IMAP implementation. 
The server at the moment has a very big backlog -- perhaps 80K messages. 
   I was expecting that if I did this:

d.addCallback(lambda x: self.proto.fetchUID('1:10'))

things would move along quickly... but there's a huge delay somewhere. 
I think it's in that callback, since I've added breakpoints in 
handleuids() and they're not being reached (as they are when I hit a 
smaller mailbox on a different server).

Thanks for any pointers...  I'm brand-new to Twisted, but sure like what 
I'm seeing in it.

Nick

P.S.

I'm using the same sort of approach that John Goerzen's "Python Network 
Programming" book shows:

> class IMAPClient(IMAP4Client):
>     def connectionMade(self):
>         IMAPLogic(self)
>         
> class IMAPFactory(protocol.ClientFactory):
>     protocol = IMAPClient
>     def __init__(self, username, password):
>         self.username = username
>         self.password = password
>         
>     def clientConnectionFailed(self, connector, reason):
>         LOGGER.error("Client connection failed:", reason)
>         reactor.stop()
>         
> class IMAPLogic(mail_archive_retriever):
>     def __init__(self, proto, getting_archives = 0):
>         self.parser = email.Parser.Parser()
>         self.request_topic_id = None
>         self.message_bucket = messagedb.message_inserter()
>         self.getting_archives = getting_archives
>         
>         # Twisted stuff
>         self.proto = proto
>         self.factory = proto.factory
>         d = self.proto.login(self.factory.username, self.factory.password) # d is a Deferred
>         d.addCallback(lambda x: self.proto.select('INBOX'))  # lambda here keeps the output of the previous callback from going into this call
>         d.addCallback(lambda x: self.proto.fetchUID('1:*'))
>         d.addCallback(self.handleuids)
>         d.addCallback(self.deletemessages)
>         d.addCallback(self.logout)
>         d.addCallback(self.stopreactor)
>         d.addErrback(self.errorhappened)





From bob at redivi.com  Tue Oct 26 14:42:12 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 26 Oct 2004 14:42:12 -0400
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <BD5E4A18-2779-11D9-8CC2-000D93359332@omniti.com>
References: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
	<1098804681.20890.18.camel@localhost>
	<4E78F174-2766-11D9-959B-000A95BA5446@redivi.com>
	<BD5E4A18-2779-11D9-8CC2-000D93359332@omniti.com>
Message-ID: <BFCD7477-277E-11D9-959B-000A95BA5446@redivi.com>


On Oct 26, 2004, at 14:06, George Schlossnagle wrote:

>
> On Oct 26, 2004, at 11:47 AM, Bob Ippolito wrote:
>> Mac OS X prior to 10.3 does not ship with an implementation of poll.
>> Mac OS X 10.3 has an implementation of poll, but it is a wrapper for 
>> select.
>
> 10.3+ support kqueue() though.

Twisted barely does.. you need to download and patch some PyKQueue 
module that hasn't been touched since April 5 2001.

-bob




From radeex at gmail.com  Tue Oct 26 18:02:16 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 27 Oct 2004 09:02:16 +1100
Subject: [Twisted-Python] Case for an Async MySQL Driver?
In-Reply-To: <5d35fc5d04102608056a9d1c35@mail.gmail.com>
References: <5d35fc5d04102608056a9d1c35@mail.gmail.com>
Message-ID: <60ed19d404102615025c7bf847@mail.gmail.com>

On Tue, 26 Oct 2004 16:05:13 +0100, Seun Osewa <naijasms at gmail.com> wrote:
> I'm new to Twisted, and I was just thinking about how, while
> 'twisted.enterprise.adbapi' is is a really neat idea, it's sort of a
> stop-gap solution pending the time async database drivers can be
> integrated into Twisted.  It's not 'right' to have 1 python thread and
> 1 mysql server thread/process for each connection.
> 
> How about an event-driven MySQL protocol implementation that fits into
> the Twisted Framework? (I came accross a MySQL protocol specification
> online once but I think I've lost it). If this sounds sensible, I'll
> be interested with helping out with implementation but I won't be able
> to do actual coding for some time.

It sounds like a fine idea, and several people have attempted doing
native async protocol implementations for database systems in the
past, but nobody's finished and/or maintained them.

So, patches accepted. ;-)

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From orbitz at ezabel.com  Tue Oct 26 18:27:22 2004
From: orbitz at ezabel.com (orbitz)
Date: Tue, 26 Oct 2004 18:27:22 -0400
Subject: [Twisted-Python] Case for an Async MySQL Driver?
In-Reply-To: <5d35fc5d04102608056a9d1c35@mail.gmail.com>
References: <5d35fc5d04102608056a9d1c35@mail.gmail.com>
Message-ID: <417ECF4A.3070708@ezabel.com>

For starters, MySQL is a really poor DBM, I suggest switching, if you 
don't believe me:
http://sql-info.de/mysql/gotchas.html

Secondly, adbapi is made in such a way that it doesn't care which module 
you use as long as it is DB-API 2.0 compliant (2.0 right?).  There is a 
postgresql module which provides async access to a postgresql db, 
however it is not DB-API compliant so twisted cannot use it.  If you can 
fit an async MySQL API into DB-API compliance, kick ass, but otherwise 
having a twisted specific module for MySQL kind of defeats the purpose 
of having DB-API.  Finally, will the MySQL lib even allow you to do non 
blocking calls to the database? If not then that sounds like a major 
pitfall there.


Seun Osewa wrote:

>Hi,
>
>I'm new to Twisted, and I was just thinking about how, while
>'twisted.enterprise.adbapi' is is a really neat idea, it's sort of a
>stop-gap solution pending the time async database drivers can be
>integrated into Twisted.  It's not 'right' to have 1 python thread and
>1 mysql server thread/process for each connection.
>
>How about an event-driven MySQL protocol implementation that fits into
>the Twisted Framework? (I came accross a MySQL protocol specification
>online once but I think I've lost it). If this sounds sensible, I'll
>be interested with helping out with implementation but I won't be able
>to do actual coding for some time.
>
>Regards,
>Seun.
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>  
>




From narnett at liveworld.com  Tue Oct 26 18:33:54 2004
From: narnett at liveworld.com (Nick Arnett)
Date: Tue, 26 Oct 2004 15:33:54 -0700
Subject: [Twisted-Python] Case for an Async MySQL Driver?
In-Reply-To: <60ed19d404102615025c7bf847@mail.gmail.com>
References: <5d35fc5d04102608056a9d1c35@mail.gmail.com>
	<60ed19d404102615025c7bf847@mail.gmail.com>
Message-ID: <417ED0D2.80604@liveworld.com>

Christopher Armstrong wrote:

>>How about an event-driven MySQL protocol implementation that fits into
>>the Twisted Framework? (I came accross a MySQL protocol specification
>>online once but I think I've lost it). If this sounds sensible, I'll
>>be interested with helping out with implementation but I won't be able
>>to do actual coding for some time.
>>
Anybody want to offer more about how this might look?  I don't know if I 
can fit it into my work, but it would be a terrific addition to my 
toolbox (I have many thousands of lines of Python talking to MySQL).  
And I suppose it would offer the excuse I've been needing to ask our CEO 
about his thoughts on open-sourcing parts of our code.

Nick




From bob at redivi.com  Tue Oct 26 18:39:52 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 26 Oct 2004 18:39:52 -0400
Subject: [Twisted-Python] Case for an Async MySQL Driver?
In-Reply-To: <417ECF4A.3070708@ezabel.com>
References: <5d35fc5d04102608056a9d1c35@mail.gmail.com>
	<417ECF4A.3070708@ezabel.com>
Message-ID: <F38AB9AA-279F-11D9-8C1D-000A95BA5446@redivi.com>

On Oct 26, 2004, at 18:27, orbitz wrote:

> Seun Osewa wrote:
>
>> I'm new to Twisted, and I was just thinking about how, while
>> 'twisted.enterprise.adbapi' is is a really neat idea, it's sort of a
>> stop-gap solution pending the time async database drivers can be
>> integrated into Twisted.  It's not 'right' to have 1 python thread and
>> 1 mysql server thread/process for each connection.
>>
>> How about an event-driven MySQL protocol implementation that fits into
>> the Twisted Framework? (I came accross a MySQL protocol specification
>> online once but I think I've lost it). If this sounds sensible, I'll
>> be interested with helping out with implementation but I won't be able
>> to do actual coding for some time.
>>
> For starters, MySQL is a really poor DBM, I suggest switching, if you 
> don't believe me:
> http://sql-info.de/mysql/gotchas.html

All of the RDBMS have their pros and cons... I personally think the 
worst thing about MySQL is the license in most cases, but it's 
obviously good enough for most people.

> Secondly, adbapi is made in such a way that it doesn't care which 
> module you use as long as it is DB-API 2.0 compliant (2.0 right?).  
> There is a postgresql module which provides async access to a 
> postgresql db, however it is not DB-API compliant so twisted cannot 
> use it.  If you can fit an async MySQL API into DB-API compliance, 
> kick ass, but otherwise having a twisted specific module for MySQL 
> kind of defeats the purpose of having DB-API.  Finally, will the MySQL 
> lib even allow you to do non blocking calls to the database? If not 
> then that sounds like a major pitfall there.

This is all redundant.  adbapi depends on DB-API, and DB-API is 
*synchronous*.  If you want an asynchronous interface you are already 
"defeating the purpose of having DB-API".

He didn't say anything about the MySQL lib, he said protocol 
specification.  If you implement the protocol yourself, you can make it 
as asynchronous as you want...

-bob




From foom at fuhm.net  Tue Oct 26 19:18:48 2004
From: foom at fuhm.net (James Y Knight)
Date: Tue, 26 Oct 2004 19:18:48 -0400
Subject: [Twisted-Python] CFReactor
In-Reply-To: <5E52D48E-2775-11D9-959B-000A95BA5446@redivi.com>
References: <357849C0-26CC-11D9-9668-000A95A50FB2@fuhm.net>
	<909651B8-26D1-11D9-959B-000A95BA5446@redivi.com>
	<1F9829DE-2771-11D9-9668-000A95A50FB2@fuhm.net>
	<5E52D48E-2775-11D9-959B-000A95BA5446@redivi.com>
Message-ID: <63FAD196-27A5-11D9-9668-000A95A50FB2@fuhm.net>

On Oct 26, 2004, at 1:35 PM, Bob Ippolito wrote:
>> Er, I don't believe you. If that was the case, it would be a huge fd 
>> leak, which I'm pretty sure Twisted doesn't have. I removed that hack 
>> and I don't think anything further broke.
>
> No.  It's not a fd leak because loseConnection closes the file 
> descriptors.  It just doesn't tell the reactor it has done so.  It 
> should leak SSW instances (memory) now, though.

Those are only kept in a weakref dict, and in the readers/writers 
dicts. removeReader/removeWriter look to me like they are being called, 
so I think it should go away. I dunno if that's a change since 
cfreactor was written or if I'm just wrong or what.

>> Anyways, I've changed cfreactor to do what I think should be the 
>> right thing, but it's randomly failing tests. Before my changes it 
>> was failing a lot of tests too, so I don't know if this is a 
>> regression or not.
>
> I don't really have the time or need to debug this anytime soon.

Me neither. If no one is actually interested, I guess it should just be 
marked as probably broken and left at that. I'm going to give up on it.

> When I first wrote CFReactor, it passed all of the tests.  Either 
> changes in PyObjC (unlikely) or Twisted (likely) caused these test 
> failures.  Some of it is probably due to tests making incorrect 
> assumptions, especially because CFReactor isn't designed to be 
> iterated (it has to set up a timer to stop itself).

I can't even get the tests to run to completion, they hang on 
twisted.mail.test.test_smtp.LoopbackESMTPTestCase.testMessages. Since 
this reactor isn't being run on the buildbot for some reason, it's hard 
to know how long it's been failing.

I also tried checking out revisions 9056 from 2003-10-20 and 9286 from 
2003-11-11. Those are failing about a bazillion tests, mostly with 
pendingTimedCalls still pending: <DelayedCall 35813496 
[-0.0020911693573s] called=0 cancelled=0 
CFReactor._continueSystemEvent('startup',)> warnings. I dunno what's up 
with that.

James




From naijasms at gmail.com  Tue Oct 26 19:13:25 2004
From: naijasms at gmail.com (Seun Osewa)
Date: Wed, 27 Oct 2004 00:13:25 +0100
Subject: [Twisted-Python] Case for an Async MySQL Driver?
In-Reply-To: <60ed19d404102615025c7bf847@mail.gmail.com>
References: <5d35fc5d04102608056a9d1c35@mail.gmail.com>
	<60ed19d404102615025c7bf847@mail.gmail.com>
Message-ID: <5d35fc5d04102616137fe4658f@mail.gmail.com>

On Wed, 27 Oct 2004 09:02:16 +1100, Christopher Armstrong
<radeex at gmail.com> wrote:
...
> It sounds like a fine idea, and several people have attempted doing
> native async protocol implementations for database systems in the
> past, but nobody's finished and/or maintained them.
> 
> So, patches accepted. ;-)

Considering the fact that I'm a python newbie _and_ have newer
submitted a patch to any open source project before, it might take a
considerable while for any working code to become available.  I'll be
posting questions about how the implementation _should_ be integrated
into Twisted, partly as a way of getting to understand Twisted better.

Here's the MySQL protocol link
http://www.redferni.uklinux.net/mysql/MySQL-Protocol.html
The most important details seem simple enough.

Wish I could learn why other would-be implementors lost interest.

Regards,
Seun



From matusis at matusis.com  Tue Oct 26 23:01:15 2004
From: matusis at matusis.com (Alec Matusis)
Date: Tue, 26 Oct 2004 20:01:15 -0700
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <1098804681.20890.18.camel@localhost>
Message-ID: <PJEGIHBMPNKKLJPMILMDCELACBAA.matusis@matusis.com>

I changed reactor to poll(), and it has sucessfully surpassed 1024 file
descriptors limit, while the load on the machine did not increase
significantly from select() based reactor.

Thanks everybody for the help

Alec Matusis



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Glyph
Lefkowitz
Sent: Tuesday, October 26, 2004 8:31 AM
To: Twisted general discussion
Subject: RE: [Twisted-Python] twisted run out of file descriptors


On Tue, 2004-10-26 at 01:35 -0700, Alec Matusis wrote:
> I thought it would be faster with select() rather than poll() - lower load
> on the machine?

Sounds like you might be confused - if someone had told you that
select() is faster than *polling*, that would be accurate - the
terminology is confusing because "polling" means "repeatedly checking
for input in a busy-loop".  In this context, "polling" is actually the
opposite of "calling poll()".

poll() is simply a better version of select().  The only reason it is
not the default reactor is that there are some obscure places where
select() exists and it does not.  I am not sure if this is even relevant
any more, since I don't know if any such place can build recent versions
of Python.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From tv at twistedmatrix.com  Wed Oct 27 02:57:07 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 27 Oct 2004 09:57:07 +0300
Subject: [Twisted-Python] IMAP fetchUID speed?
In-Reply-To: <417E9702.6080506@liveworld.com>
References: <417E9702.6080506@liveworld.com>
Message-ID: <417F46C3.5070909@twistedmatrix.com>

Nick Arnett wrote:

> I'm trying to figure out what's happening in an IMAP implementation. 
> The server at the moment has a very big backlog -- perhaps 80K 
> messages.   I was expecting that if I did this:
>
> d.addCallback(lambda x: self.proto.fetchUID('1:10'))
>
> things would move along quickly... but there's a huge delay somewhere. 
> I think it's in that callback, since I've added breakpoints in 
> handleuids() and they're not being reached (as they are when I hit a 
> smaller mailbox on a different server).

You haven't really given enough information.

Use e.g. ethereal, or suitable prints in the IMAPClient, to see whether 
the server replies with the UIDs or not, and whether that happens fast 
or slow. If the reply from the server takes a long time, the reason is 
in the server. If the server replies almost immediately, but your 
callback still doesn't get the UIDs immediately, something very weird is 
happening.

My money is on the former -- the server being slow.




From BRADLEY.S.GASPARD at saic.com  Wed Oct 27 14:08:17 2004
From: BRADLEY.S.GASPARD at saic.com (Gaspard, Bradley S)
Date: Wed, 27 Oct 2004 14:08:17 -0400
Subject: [Twisted-Python] FTPClient and fetching a file from an FTP server
Message-ID: <D24D16A6707B0A4B9EF084299CE99B3905EFD43C@mcl-its-exs02.mail.saic.com>

I've looked at the ftpclient.py example and have also found an example of
moving a file to an ftp server on this list ... but not how to fetch a file
from the server. From the examples and the API it looks like the
retrieveFile( ) method and a callback are required but I have not yet put
the pieces together. 

I am very much a newbie and would be grateful for any pointers on how to do
this. 





From naijasms at gmail.com  Thu Oct 28 16:27:24 2004
From: naijasms at gmail.com (Seun Osewa)
Date: Thu, 28 Oct 2004 21:27:24 +0100
Subject: [Twisted-Python] Case for an Async MySQL Driver?
Message-ID: <5d35fc5d041028132764475aa6@mail.gmail.com>

Nick Arnett wrote:
>Anybody want to offer more about how this might look? I don't know if I
>can fit it into my work, but it would be a terrific addition to my
>toolbox (I have many thousands of lines of Python talking to MySQL).
>And I suppose it would offer the excuse I've been needing to ask our CEO
>about his thoughts on open-sourcing parts of our code.

Here are some ideas for an async MySQL 'driver' for Twisted:

1) create or use a connection:
connection = MySqlPool.connect("hostname", "username", "password")

2) send a query:
d = connection.exec(["begin", "update db.stats set value=value+1 where
accesses", "select * from db.important_table", "commit"])

def myCallBack (resultset):
    # 'results' contains the result of the last QUERY in the list of
commands sent to exec.
    # it is empty if there's no QUERY and no error
     ....

def myErrBack (errorval, errorstring command_id):
   # this is called if there's an error in executing any of the commands
   # command_id indicates which point in the list of commands the error occured
   # errorval is the error name/number, errorstring the exact result

3) close the connection:
connection.close()

This format allows the user to send an unlimited number of queries to
be run together, thus limiting the number of callbacks necessary for a
program requiring many small interactions with the database. "begin"
and "end" will count as an example.  This minimalistic API also allows
more advanced (twisted.enterprise style) interfaces to be built on top
of it.

Is there any task you can think of that can't be built on top of this?
(of course I've not touched the implementation details...)

Regards,
Seun.



From orbitz at ezabel.com  Thu Oct 28 17:00:57 2004
From: orbitz at ezabel.com (orbitz)
Date: Thu, 28 Oct 2004 17:00:57 -0400
Subject: [Twisted-Python] Case for an Async MySQL Driver?
In-Reply-To: <5d35fc5d041028132764475aa6@mail.gmail.com>
References: <5d35fc5d041028132764475aa6@mail.gmail.com>
Message-ID: <41815E09.3030306@ezabel.com>

Hrm, wouldn't it be a bit nicer on programmers to use the current adbapi 
interface so they can just move all their code to this new mysql API?

Seun Osewa wrote:

>Nick Arnett wrote:
>  
>
>>Anybody want to offer more about how this might look? I don't know if I
>>can fit it into my work, but it would be a terrific addition to my
>>toolbox (I have many thousands of lines of Python talking to MySQL).
>>And I suppose it would offer the excuse I've been needing to ask our CEO
>>about his thoughts on open-sourcing parts of our code.
>>    
>>
>
>Here are some ideas for an async MySQL 'driver' for Twisted:
>
>1) create or use a connection:
>connection = MySqlPool.connect("hostname", "username", "password")
>
>2) send a query:
>d = connection.exec(["begin", "update db.stats set value=value+1 where
>accesses", "select * from db.important_table", "commit"])
>
>def myCallBack (resultset):
>    # 'results' contains the result of the last QUERY in the list of
>commands sent to exec.
>    # it is empty if there's no QUERY and no error
>     ....
>
>def myErrBack (errorval, errorstring command_id):
>   # this is called if there's an error in executing any of the commands
>   # command_id indicates which point in the list of commands the error occured
>   # errorval is the error name/number, errorstring the exact result
>
>3) close the connection:
>connection.close()
>
>This format allows the user to send an unlimited number of queries to
>be run together, thus limiting the number of callbacks necessary for a
>program requiring many small interactions with the database. "begin"
>and "end" will count as an example.  This minimalistic API also allows
>more advanced (twisted.enterprise style) interfaces to be built on top
>of it.
>
>Is there any task you can think of that can't be built on top of this?
>(of course I've not touched the implementation details...)
>
>Regards,
>Seun.
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>  
>




From ldanielburr at mac.com  Thu Oct 28 17:12:23 2004
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Thu, 28 Oct 2004 17:12:23 -0400
Subject: [Twisted-Python] Case for an Async MySQL Driver?
Message-ID: <9830467.1098997943333.JavaMail.ldanielburr@mac.com>

Seun Osewa wrote:

>Here are some ideas for an async MySQL 'driver' for Twisted:

[snip description of API]

>This format allows the user to send an unlimited number of queries to
>be run together, thus limiting the number of callbacks necessary for a
>program requiring many small interactions with the database. "begin"
>and "end" will count as an example.  This minimalistic API also allows
>more advanced (twisted.enterprise style) interfaces to be built on top
>of it.

I think that this is a good idea, but I think it would be far better if you described your API in terms of the twisted.enterprise.adbapi API which exists today.

Example:

from twisted.enterprise import adbapi

dbpool = adbapi.NonBlockingConnectionPool(
    MySQLProtocolFactory,
    connectionInfo,
    cp_min=1,
    cp_max=5
)


queries = ('SELECT 1 FROM DUAL', 'UPDATE Foo WHERE bar = baz')

for query in queries:
    d = dbpool.runQuery(query)
    d.addErrback(_onFailure)
    d.addCallback(_onSuccess)


The effort needed to make this proposed asynchronous db protocol work with adbapi would be pretty minor, I think.

Tell you what: If somebody implements this MySQL async protocol, I'll create a patch to make adbapi work with it.  Sound good?

Naz



From ldanielburr at mac.com  Thu Oct 28 17:27:45 2004
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Thu, 28 Oct 2004 17:27:45 -0400
Subject: [Twisted-Python] Latest modpubsub is using Twisted
Message-ID: <11687826.1098998865234.JavaMail.ldanielburr@mac.com>

After experiencing the itching and burning of asyncore, their python developers have turned to twisted, the soothing ointment of network programming.

http://www.mod-pubsub.org/blog/archives/440_Repubsub_good_to_go.html

Naz



From naijasms at gmail.com  Thu Oct 28 19:32:46 2004
From: naijasms at gmail.com (Seun Osewa)
Date: Fri, 29 Oct 2004 00:32:46 +0100
Subject: [Twisted-Python] Case for an Async MySQL Driver?
In-Reply-To: <41815E09.3030306@ezabel.com>
References: <5d35fc5d041028132764475aa6@mail.gmail.com>
	<41815E09.3030306@ezabel.com>
Message-ID: <5d35fc5d04102816322d052d21@mail.gmail.com>

Hi,

The approach I was suggesting is to have a minimalist 'driver' API for
MySQL which can be used independently (for new development of
MySQL-specific projects) and yet can be easily used for MySQL support
in adbapi.

Correcting my earlier short outline,
-> a minimalistic mysql 'driver' API shouldn't even involve a DB pool. 
-> The 'result' can simply be in the form of an iteratable which
returns the result of each executed query in order, no need for the
restriction to have only one query within a group of MySQL commands.
-> However, the errBack should be called when any of queries fail,
indicating how which particular query failed by giving the number of
successful queries.
 
ACTIONS
conn = MySqlConnection ("hostname", "username", "password")
d = conn.exec (["stmt1", "stmt2",  "stmt3"])
d.addCallBack(call1)
d.addErrBack(err1)
conn.close()    # we have finished with this connection.

DEFINITION
def call1(result):
    ... 
def err1 (successful_queries, errno, description):
    ...

It appears reasonable to allow the connection constructor to block
when creating the database connections ... the API user should deal
with connection caching.

Regards,
Seun.

On Thu, 28 Oct 2004 17:00:57 -0400, orbitz <orbitz at ezabel.com> wrote:
> Hrm, wouldn't it be a bit nicer on programmers to use the current adbapi
> interface so they can just move all their code to this new mysql API?



From missive at hotmail.com  Fri Oct 29 00:17:59 2004
From: missive at hotmail.com (Lee Harr)
Date: Fri, 29 Oct 2004 08:47:59 +0430
Subject: [Twisted-Python] doc/core/howto/components.xhtml  question
Message-ID: <BAY2-F42XAwxXSXI3ac0004ea93@hotmail.com>

in doc/core/howto/components.xhtml there is a
HairDryer class like this:


class HairDryer:
    def plug(self, socket):
        adapted = IAmericanSocket(socket)
        assert socket.voltage() == 110, "BOOM"
        print "I was plugged in properly and am operating"


I am new to this interface / adaptation system,
but I am thinking it should be:

class HairDryer:
    def plug(self, socket):
        adapted = IAmericanSocket(socket)
        assert adapted.voltage() == 110, "BOOM"
        print "I was plugged in properly and am operating"


If so...

Index: doc/core/howto/components.xhtml
===================================================================
--- doc/core/howto/components.xhtml     (revision 12146)
+++ doc/core/howto/components.xhtml     (working copy)
@@ -338,7 +338,7 @@
class HairDryer:
     def plug(self, socket):
         adapted = IAmericanSocket(socket)
-        assert socket.voltage() == 110, "BOOM"
+        assert adapted.voltage() == 110, "BOOM"
         print "I was plugged in properly and am operating"
</pre>

_________________________________________________________________
FREE pop-up blocking with the new MSN Toolbar - get it now! 
http://toolbar.msn.com/




From exarkun at divmod.com  Fri Oct 29 09:12:23 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 29 Oct 2004 13:12:23 GMT
Subject: [Twisted-Python] doc/core/howto/components.xhtml  question
In-Reply-To: <BAY2-F42XAwxXSXI3ac0004ea93@hotmail.com>
Message-ID: <20041029131223.9171.750639788.divmod.quotient.802@ohm>

On Fri, 29 Oct 2004 08:47:59 +0430, "Lee Harr" <missive at hotmail.com> wrote:
>in doc/core/howto/components.xhtml there is a
> HairDryer class like this:
> 
> [snip]

  Thanks, fixed in SVN.

  Jp



From andrew-twisted at puzzling.org  Fri Oct 29 17:52:33 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 29 Oct 2004 23:52:33 +0200
Subject: [Twisted-Python] UncatchableExceptions
Message-ID: <20041029215233.GM7380@frobozz>

<foom> exarkun: I suspect we should introduce a UncatchableExceptions
       constant somewhere
<foom> exarkun: and require that all except:'s are preceded by except
       UncatchableExceptions: raise
<exarkun> foom: It's possible that is a good idea.
<exarkun> foom: I'm not really sure, though.
<spiv> foom: With (KeyboardInterrupt, SystemExit, MemoryError, SystemError) ?
<foom> spiv: yes

I guess this would live in twisted.python somewhere, and the coding standard
would be updated to require its use instead of bare "except:"

Python-dev have discussed a similar measure for the python standard library
(in the exceptions module), but hadn't come to any consensus last time I
looked.

Thoughts?  Objections?

-Andrew.




From foom at fuhm.net  Fri Oct 29 23:13:19 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri, 29 Oct 2004 23:13:19 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <A6730354-2A21-11D9-9668-000A95A50FB2@fuhm.net>

Bug summary
______________________
Since 2004-10-23 04:58:55.150000:
   Bugs opened: 14   Bugs closed: 3   Total open bugs: 327 (+11)

New / Reopened Bugs
______________________
Incorrect traceback from trial  (7 hours ago)
        http://www.twistedmatrix.com/bugs/issue769 opened by exarkun

[TRIAL] Trial incorrectly reports the number of tests run  (6 hours ago)
CLOSED http://www.twistedmatrix.com/bugs/issue770 opened by exarkun

[TRIAL] Traceback from trial in trivial usage  (7 hours ago)
        http://www.twistedmatrix.com/bugs/issue768 opened by exarkun

Something broke twisted.web or twisted.internet.tcp in the latests 
commits  (11 hours ago)
        http://www.twistedmatrix.com/bugs/issue767 opened by dialtone

wprocess is broken  (4 days ago)
        http://www.twistedmatrix.com/bugs/issue760 opened by slyphon

[CORE] test_trial fails on windows  (5 days ago)
        http://www.twistedmatrix.com/bugs/issue757 opened by itamarst

[WEB] HTTP logging lets user corrupt log file entry  (4 days ago)
CLOSED http://www.twistedmatrix.com/bugs/issue759 opened by Tv

SSL connection hangs open with firefox, can't reverseproxy things on a 
HTTPS server.  (2 days ago)
        http://www.twistedmatrix.com/bugs/issue764 opened by Tv

[CORE] Twisted doesn't exit with proper exit code after SIGINT  (4 days 
ago)
        http://www.twistedmatrix.com/bugs/issue761 opened by jknight

[DOCUMENTATION] tutorial still using deprecated components.Interface  
(5 days ago)
        http://www.twistedmatrix.com/bugs/issue758 opened by spiv

[TRIAL] setUp and tearDown should be allowed to raise FailTest  
(yesterday)
        http://www.twistedmatrix.com/bugs/issue766 opened by jknight

Added Timeout checking to IMAP4Client  (yesterday)
        http://www.twistedmatrix.com/bugs/issue765 opened by bkirsch

Reactor should cache loop start time for use instead of time.time()  (3 
days ago)
        http://www.twistedmatrix.com/bugs/issue763 opened by jknight

[CORE] The spewer (i.e. twistd --spew) only spews for the main thread  
(4 days ago)
        http://www.twistedmatrix.com/bugs/issue762 opened by spiv

Bugs Closed
______________________
[TRIAL] Trial incorrectly reports the number of tests run  (6 hours ago)
        http://www.twistedmatrix.com/bugs/issue770 opened by exarkun

[WEB] HTTP logging lets user corrupt log file entry  (4 days ago)
        http://www.twistedmatrix.com/bugs/issue759 opened by Tv

conch client writes garbage to known_hosts file  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue749 opened by exarkun




From bob at redivi.com  Sat Oct 30 00:06:30 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 30 Oct 2004 00:06:30 -0400
Subject: [Twisted-Python] UncatchableExceptions
In-Reply-To: <20041029215233.GM7380@frobozz>
References: <20041029215233.GM7380@frobozz>
Message-ID: <14420F2E-2A29-11D9-878B-000A95BA5446@redivi.com>


On Oct 29, 2004, at 17:52, Andrew Bennetts wrote:

> <foom> exarkun: I suspect we should introduce a UncatchableExceptions
>        constant somewhere
> <foom> exarkun: and require that all except:'s are preceded by except
>        UncatchableExceptions: raise
> <exarkun> foom: It's possible that is a good idea.
> <exarkun> foom: I'm not really sure, though.
> <spiv> foom: With (KeyboardInterrupt, SystemExit, MemoryError, 
> SystemError) ?
> <foom> spiv: yes
>
> I guess this would live in twisted.python somewhere, and the coding 
> standard
> would be updated to require its use instead of bare "except:"
>
> Python-dev have discussed a similar measure for the python standard 
> library
> (in the exceptions module), but hadn't come to any consensus last time 
> I
> looked.
>
> Thoughts?  Objections?

Here is a link to the most recent discussion about this on python-dev:

http://mail.python.org/pipermail/python-dev/2004-September/048609.html

-bob




From foom at fuhm.net  Sat Oct 30 00:31:00 2004
From: foom at fuhm.net (James Y Knight)
Date: Sat, 30 Oct 2004 00:31:00 -0400
Subject: [Twisted-Python] UncatchableExceptions
In-Reply-To: <14420F2E-2A29-11D9-878B-000A95BA5446@redivi.com>
References: <20041029215233.GM7380@frobozz>
	<14420F2E-2A29-11D9-878B-000A95BA5446@redivi.com>
Message-ID: <80AEE12A-2A2C-11D9-9668-000A95A50FB2@fuhm.net>

On Oct 30, 2004, at 12:06 AM, Bob Ippolito wrote:
> On Oct 29, 2004, at 17:52, Andrew Bennetts wrote:
>
>> <foom> exarkun: I suspect we should introduce a UncatchableExceptions
>>        constant somewhere
>> <foom> exarkun: and require that all except:'s are preceded by except
>>        UncatchableExceptions: raise
>> <exarkun> foom: It's possible that is a good idea.
>> <exarkun> foom: I'm not really sure, though.
>> <spiv> foom: With (KeyboardInterrupt, SystemExit, MemoryError, 
>> SystemError) ?
>> <foom> spiv: yes
>>
>> I guess this would live in twisted.python somewhere, and the coding 
>> standard
>> would be updated to require its use instead of bare "except:"
>>
>> Python-dev have discussed a similar measure for the python standard 
>> library
>> (in the exceptions module), but hadn't come to any consensus last 
>> time I
>> looked.
>>
>> Thoughts?  Objections?
>
> Here is a link to the most recent discussion about this on python-dev:
>
> http://mail.python.org/pipermail/python-dev/2004-September/048609.html

I would like to point out that the method from the above-quoted IRC 
conversation is *NOT* what I'd like to see added in Python. I'd much 
prefer something like in the linked python-dev mail.

_However_, Twisted is supposed to work on 2.2, 2.3, and 2.4, none of 
which have the hypothetical new exception hierarchy that doesn't suck. 
Therefore, IMO, the best solution to fix things in Twisted, that will 
both work right now, and forwardly compatible, is to do as above and 
require that all except:'s (and except Exception's) are preceded by an 
except somemodule.UncatchableExceptions.

James




From glyph at divmod.com  Sat Oct 30 01:06:53 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 30 Oct 2004 01:06:53 -0400
Subject: [Twisted-Python] UncatchableExceptions
In-Reply-To: <20041029215233.GM7380@frobozz>
References: <20041029215233.GM7380@frobozz>
Message-ID: <1099112813.4711.21.camel@localhost>

On Fri, 2004-10-29 at 23:52 +0200, Andrew Bennetts wrote:
> <foom> exarkun: I suspect we should introduce a UncatchableExceptions
>        constant somewhere
> <foom> exarkun: and require that all except:'s are preceded by except
>        UncatchableExceptions: raise
> <exarkun> foom: It's possible that is a good idea.
> <exarkun> foom: I'm not really sure, though.
> <spiv> foom: With (KeyboardInterrupt, SystemExit, MemoryError, SystemError) ?
> <foom> spiv: yes
> 
> I guess this would live in twisted.python somewhere, and the coding standard
> would be updated to require its use instead of bare "except:"
> 
> Python-dev have discussed a similar measure for the python standard library
> (in the exceptions module), but hadn't come to any consensus last time I
> looked.
> 
> Thoughts?  Objections?

Not an objection *per se*, but I think it would be better to see how the
debate on python-dev turns out; I am pretty sure there are a lot of
subtle issues to consider.  For example, I could go either way on
including SystemExit in that list; there have been many times, when
working with Manhole or similar, that I've imported a script that wasn't
intended for use as a module and had it attempt to exit the interpreter
with a sys.exit; I was glad that except: really was a catch-all in those
cases.

I also ponder what a Deferred with a Failure whose value is MemoryError
would mean :).

In general, though, I think that the Throwable/Exception distinction, as
in Java, is a pretty good idea.




From tim at se.linux.org  Sat Oct 30 09:30:19 2004
From: tim at se.linux.org (=?iso-8859-1?Q?Tim_Terleg=E5rd?=)
Date: Sat, 30 Oct 2004 15:30:19 +0200 (CEST)
Subject: [Twisted-Python] mktap news error
Message-ID: <Pine.LNX.4.44.0410301518210.9833-100000@naskur.se.linux.org>

I'm trying to run the twisted.news server. This should be possible
using:

$ mktap news

but that results in ImportError: news. I get the traceback below.
What am I doing wrong?

Tim


Traceback (most recent call last):
  File "/usr/bin/mktap", line 30, in ?
    run()
  File "/usr/lib/python2.3/site-packages/twisted/scripts/mktap.py",
    line 152, in run
    options.parseOptions(sys.argv[1:])
  File
    "/usr/lib/python2.3/site-packages/twisted/python/usage.py",
    line 209, in parseOptions
    self.postOptions()
  File
    "/usr/lib/python2.3/site-packages/twisted/scripts/mktap.py",
    line 139, in postOptions
    self.parseOptions(self.params)
  File
    "/usr/lib/python2.3/site-packages/twisted/python/usage.py",
    line 197, in parseOptions
    self.subOptions = parser()
  File
    "/usr/lib/python2.3/site-packages/twisted/scripts/mktap.py",
    line 105, in <lambda>
    sc = [ [name, None, (lambda
    obj=module:obj.load().Options()),
  File
    "/usr/lib/python2.3/site-packages/twisted/python/plugin.py",
    line 61, in load
    return
    namedModule(self.module)
  File
    "/usr/lib/python2.3/site-packages/twisted/python/reflect.py",
    line 348, in namedModule
    topLevel = __import__(name)
    ImportError: No module named news




From exarkun at divmod.com  Sat Oct 30 10:22:34 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sat, 30 Oct 2004 14:22:34 GMT
Subject: [Twisted-Python] Re: [Twisted-commits] r12244 - Make spewer log
	calls in threads, too
In-Reply-To: <E1CNr9l-0005cj-00@wolfwood>
Message-ID: <20041030142234.9171.2136854925.divmod.quotient.1144@ohm>

On Sat, 30 Oct 2004 05:12:25 -0600, Andrew Bennetts <spiv at wolfwood.twistedmatrix.com> wrote:
>Author: spiv
> Date: Sat Oct 30 05:12:24 2004
> New Revision: 12244
> 
> Modified:
>    trunk/twisted/application/app.py
> Log:
> Make spewer log calls in threads, too
> 
> Modified: trunk/twisted/application/app.py
> ==============================================================================
> --- trunk/twisted/application/app.py	(original)
> +++ trunk/twisted/application/app.py	Sat Oct 30 05:12:24 2004
> @@ -7,7 +7,7 @@
>  from twisted.persisted import sob
>  from twisted.application import compat, service
>  from twisted import copyright
> -import sys, os, pdb, profile, getpass, traceback, signal
> +import sys, os, pdb, profile, getpass, traceback, signal, threading
>  
>  reactorTypes = {
>      'wx': 'twisted.internet.wxreactor',
> @@ -199,6 +199,7 @@
>          """Print an insanely verbose log of everything that happens.  Useful
>          when debugging freezes or locks in complex code."""
>          sys.settrace(util.spewer)
> +        threading.settrace(util.spewer)
> 

  Is util.spewer really thread-safe?  I would have expected otherwise.

  Jp



From exarkun at divmod.com  Sat Oct 30 10:36:14 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sat, 30 Oct 2004 14:36:14 GMT
Subject: [Twisted-Python] mktap news error
In-Reply-To: <Pine.LNX.4.44.0410301518210.9833-100000@naskur.se.linux.org>
Message-ID: <20041030143614.9171.1732436068.divmod.quotient.1147@ohm>

On Sat, 30 Oct 2004 15:30:19 +0200 (CEST), =?iso-8859-1?Q?Tim_Terleg=E5rd?= <tim at se.linux.org> wrote:
>I'm trying to run the twisted.news server. This should be possible
> using:
> 
> $ mktap news
> 
> but that results in ImportError: news. I get the traceback below.
> What am I doing wrong?
> 

  I cannot reproduce this error.  When I run "mktap news" using the most recent version of Twisted from SVN, I meet with the expected exception, "No newsgroups specified".

  Jp



From andrew-twisted at puzzling.org  Sat Oct 30 13:33:15 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 31 Oct 2004 04:33:15 +1100
Subject: [Twisted-Python] mktap news error
In-Reply-To: <20041030143614.9171.1732436068.divmod.quotient.1147@ohm>
References: <Pine.LNX.4.44.0410301518210.9833-100000@naskur.se.linux.org>
	<20041030143614.9171.1732436068.divmod.quotient.1147@ohm>
Message-ID: <20041030173315.GA27284@frobozz>

On Sat, Oct 30, 2004 at 02:36:14PM +0000, exarkun at divmod.com wrote:
> On Sat, 30 Oct 2004 15:30:19 +0200 (CEST), =?iso-8859-1?Q?Tim_Terleg=E5rd?= <tim at se.linux.org> wrote:
> >I'm trying to run the twisted.news server. This should be possible
> > using:
> > 
> > $ mktap news
> > 
> > but that results in ImportError: news. I get the traceback below.
> > What am I doing wrong?
> > 
> 
>   I cannot reproduce this error.  When I run "mktap news" using the most
>   recent version of Twisted from SVN, I meet with the expected exception,
>   "No newsgroups specified".

I see it with the version in debian (1.3.0), but not with current SVN, so I
guess this is an old bug.

-Andrew.




From andrew-twisted at puzzling.org  Sat Oct 30 13:35:13 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 31 Oct 2004 04:35:13 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] r12244 - Make spewer log
	calls in threads, too
In-Reply-To: <20041030142234.9171.2136854925.divmod.quotient.1144@ohm>
References: <E1CNr9l-0005cj-00@wolfwood>
	<20041030142234.9171.2136854925.divmod.quotient.1144@ohm>
Message-ID: <20041030173513.GB27284@frobozz>

On Sat, Oct 30, 2004 at 02:22:34PM +0000, exarkun at divmod.com wrote:
[...]
> 
>   Is util.spewer really thread-safe?  I would have expected otherwise.

It seems to work as expected for me.  What part is unsafe?

-Andrew.




From tim at se.linux.org  Sat Oct 30 13:43:41 2004
From: tim at se.linux.org (=?iso-8859-1?Q?Tim_Terleg=E5rd?=)
Date: Sat, 30 Oct 2004 19:43:41 +0200 (CEST)
Subject: [Twisted-Python] mktap news error
In-Reply-To: <20041030173315.GA27284@frobozz>
Message-ID: <Pine.LNX.4.44.0410301940550.26275-100000@naskur.se.linux.org>

> > > $ mktap news
> > >
> > > but that results in ImportError: news. I get the traceback below.
> > > What am I doing wrong?
> > >
> >
> >   I cannot reproduce this error.  When I run "mktap news" using the most
> >   recent version of Twisted from SVN, I meet with the expected exception,
> >   "No newsgroups specified".
>
> I see it with the version in debian (1.3.0), but not with current SVN, so I
> guess this is an old bug.

Define old  :)

1.3.0 is the current official version...

But 2.0 will be out tomorrow (IRC topic promises so) so I guess I could
download that tomorrow and be happy.

Tim




From iap_yeh at abit.com.tw  Fri Oct  1 03:40:09 2004
From: iap_yeh at abit.com.tw (Iap, Singuan)
Date: Fri, 1 Oct 2004 17:40:09 +0800
Subject: [Twisted-Python] Newbie question: How to reference the "__main__"
In-Reply-To: <414EA83E.7010400@donfu.com>
Message-ID: <JAEIICFHFJDILEEGFIKIIELMCCAA.iap_yeh@abit.com.tw>

Hi,

I starts my daemon (server.py) by
$twistd -noy server.py


In server.py
----------------------------------------
config=Configuration()


In somewhere.py,
----------------------------------------
import __main__
config=__main__.config ### Don't work, since __main__ is twistd, not
server.py
## how do I get the config in server.py?

Thanks.

Iap, Singuan






From simon at hedberg.net  Fri Oct  1 05:26:33 2004
From: simon at hedberg.net (Simon)
Date: Fri, 1 Oct 2004 13:26:33 +0200
Subject: [Twisted-Python] About adodb
Message-ID: <000101c4a7a9$81633290$456271d5@hp>

Dave, thanks for your reply.

>I'm not too familiar with ADOdb, what are the benefits?
Quoting the author:
"You might ask why Python needs a database abstraction library when
Python provides the official DB API. Unfortunately the DB API does not
encapsulate differences in the database implementations. For example, to
select a limited number of rows, say 10 rows, you would have to use very
different SQL for different databases. [...]
These differences are handled by ADOdb (using SelectLimit), but not by
the Python DB API. Other important database differences transparently
handled by ADOdb include date-formating, associative arrays (records as
dictionaries) and LOB-handling."

>By rewrite, do you mean that the new version only uses
>ADOdb, or have you added ADOdb as a supported back-end?
ADOdb adds a level of abstraction on top of db-api. I wrote a version of
ConnectionPool that uses adodb connections instead of the regular dbapi
connections and cursors. If this is something python developers find
useful, i don't know. I guess it isn't as necessary as in php (which i'm
switching from) where no common db-api exists, but I still think it's
quite a nice thing.

>sqlreflector and row could definitely use a reworking.
>I don't think they are used much. I think people mainly
>use adbapi and write their own object mapping system.
>What sort of things did you have in mind?
Well mainly validating the data assigned to a rowobject so one can be
sure it makes it into the db (checking data length, proper dates etc).
But if row and sqlreflector isn't used I'll probably build something new
instead of going through that code. I'm thinking of using the db_row
module (http://opensource.theopalgroup.com) which seems to offer
efficient row data access.

/Simon
(STemplar)




From itamar at itamarst.org  Fri Oct  1 09:04:53 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 01 Oct 2004 11:04:53 -0400
Subject: [Twisted-Python] Newbie question: How to reference the "__main__"
In-Reply-To: <JAEIICFHFJDILEEGFIKIIELMCCAA.iap_yeh@abit.com.tw>
References: <JAEIICFHFJDILEEGFIKIIELMCCAA.iap_yeh@abit.com.tw>
Message-ID: <1096643092.25488.49.camel@sheriffpony>

On Fri, 2004-10-01 at 05:40, Iap, Singuan wrote:

> In server.py
> ----------------------------------------
> config=Configuration()
somewhere.MyObject.addConfig(config)

and then MyObject can access the config.




From maoy at cis.upenn.edu  Fri Oct  1 09:32:36 2004
From: maoy at cis.upenn.edu (Yun Mao)
Date: Fri, 1 Oct 2004 11:32:36 -0400 (EDT)
Subject: [Twisted-Python] Newbie question: How to reference the "__main__"
In-Reply-To: <1096643092.25488.49.camel@sheriffpony>
References: <JAEIICFHFJDILEEGFIKIIELMCCAA.iap_yeh@abit.com.tw>
	<1096643092.25488.49.camel@sheriffpony>
Message-ID: <Pine.LNX.4.56.0410011130570.5567@klondike.cis.upenn.edu>

but the sys.argv[1:] is going to be twistd's argument, including
"-noy","xxx.tac", etc. right? it isn't exactly what he wanted, is it?

Yun


On Fri, 1 Oct 2004, Itamar Shtull-Trauring wrote:

> On Fri, 2004-10-01 at 05:40, Iap, Singuan wrote:
>
> > In server.py
> > ----------------------------------------
> > config=Configuration()
> somewhere.MyObject.addConfig(config)
>
> and then MyObject can access the config.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From itamar at itamarst.org  Fri Oct  1 09:59:51 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 01 Oct 2004 11:59:51 -0400
Subject: [Twisted-Python] ANN: Fusion 0.1, C++ / Twisted integration
Message-ID: <1096646391.25487.62.camel@sheriffpony>

This allows you to write protocols for UDP, multicast and TCP in C++. In
theory this can make the protocol much faster since it's easier to
prevent data copying etc.. The TCP writing support is not efficient yet,
though, as it still uses Twisted's current buffering system.

Tested with 1.3.0 and 2.0 from trunk. No API stability guaranteed.

http://itamarst.org/software/fusion-0.1.tar.gz or
sandbox/itamar/cppreactor in Twisted SVN.

Disclaimer: if you want to make your Twisted code go faster this is NOT
the first thing you should try. Nor the second, third or fourth.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From itamar at itamarst.org  Fri Oct  1 11:10:06 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 01 Oct 2004 13:10:06 -0400
Subject: [Twisted-Python] ANN: Fusion 0.1, C++ / Twisted integration
In-Reply-To: <1096646391.25487.62.camel@sheriffpony>
References: <1096646391.25487.62.camel@sheriffpony>
Message-ID: <1096650605.25486.64.camel@sheriffpony>

I should also mention that development has been funded by my employer,
ITA Software (http://itasoftware.com). We're hiring :)




From mfenniak at pobox.com  Fri Oct  1 12:43:30 2004
From: mfenniak at pobox.com (Mathieu Fenniak)
Date: Fri, 1 Oct 2004 12:43:30 -0600
Subject: [Twisted-Python] PATCH: twisted.web.client Basic/Digest
	Authentication
Message-ID: <CA3316B4-13D9-11D9-97E5-000D9335B826@pobox.com>

The attached patch adds support for HTTP authentication to 
twisted.web.client.  It supports both basic and digest authentication.  
This patch adds a new module, twisted.web.auth, which I hope to expand 
in the future to support digest server-side authentication.  A new 
class is also added to twisted.web.error, which passes on the 
WWW-Authenticate headers such that authentication could be handled 
externally.

I have never contributed before to Twisted, so I'd appreciate feedback 
on this patch.  It works, and is pretty clean code, but I don't know if 
there are some practices I might be breaking without being aware.

This patch is based on repository v.11878.

--
Mathieu Fenniak <mfenniak at pobox.com>
http://stompstompstomp.com/

-------------- next part --------------
A non-text attachment was scrubbed...
Name: twisted-client-auth.diff
Type: application/octet-stream
Size: 10547 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20041001/04d76272/attachment-0002.obj>

From cce at clarkevans.com  Fri Oct  1 13:18:01 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 1 Oct 2004 15:18:01 -0400
Subject: [Twisted-Python] PATCH: twisted.web.client Basic/Digest
	Authentication
In-Reply-To: <CA3316B4-13D9-11D9-97E5-000D9335B826@pobox.com>
References: <CA3316B4-13D9-11D9-97E5-000D9335B826@pobox.com>
Message-ID: <20041001191800.GA77957@prometheusresearch.com>

Hello Mathieu,

This sounds like a wonderful patch.  I've had to use libcurl
and urllib2 in order to use digest authentication. I have
a few comments:

 - For any patch with substantial functionality to be accepted,
   it must be accompanied with corresponding test suite. 
   
 - It was suggested on IRC that the digest algorithms should go
   into twisted.cred so that other protocols (such as SMTP)
   could also use these authentication mechanism.
   
 - I've written server-side digest authorization sandbox/cce/digest.py
   but I do admit, it's probably pretty ugly.

Cheers!

Clark


On Fri, Oct 01, 2004 at 12:43:30PM -0600, Mathieu Fenniak wrote:
| The attached patch adds support for HTTP authentication to 
| twisted.web.client.  It supports both basic and digest authentication.  
| This patch adds a new module, twisted.web.auth, which I hope to expand 
| in the future to support digest server-side authentication.  A new 
| class is also added to twisted.web.error, which passes on the 
| WWW-Authenticate headers such that authentication could be handled 
| externally.
| 
| I have never contributed before to Twisted, so I'd appreciate feedback 
| on this patch.  It works, and is pretty clean code, but I don't know if 
| there are some practices I might be breaking without being aware.
| 
| This patch is based on repository v.11878.
| 
| --
| Mathieu Fenniak <mfenniak at pobox.com>
| http://stompstompstomp.com/
| 


| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
Clark C. Evans                      Prometheus Research, LLC.
                                    http://www.prometheusresearch.com/
    o                               office: +1.203.777.2550 
  ~/ ,                              mobile: +1.203.444.0557 
 //
((   Prometheus Research: Transforming Data Into Knowledge
 \\  ,
   \/    - Research Exchange Database
   /\    - Survey & Assessment Technologies
   ` \   - Software Tools for Researchers
    ~ *



From dave at krondo.com  Fri Oct  1 21:01:26 2004
From: dave at krondo.com (Dave Peticolas)
Date: Fri, 01 Oct 2004 20:01:26 -0700
Subject: [Twisted-Python] About adodb
In-Reply-To: <000101c4a7a9$81633290$456271d5@hp>
References: <000101c4a7a9$81633290$456271d5@hp>
Message-ID: <1096686086.18123.67.camel@oneiros>

On Fri, 2004-10-01 at 04:26, Simon wrote:
> Dave, thanks for your reply.
> 
> >I'm not too familiar with ADOdb, what are the benefits?
> Quoting the author:
> "You might ask why Python needs a database abstraction library when
> Python provides the official DB API. Unfortunately the DB API does not
> encapsulate differences in the database implementations. For example, to
> select a limited number of rows, say 10 rows, you would have to use very
> different SQL for different databases. [...]
> These differences are handled by ADOdb (using SelectLimit), but not by
> the Python DB API. Other important database differences transparently
> handled by ADOdb include date-formating, associative arrays (records as
> dictionaries) and LOB-handling."

That sound useful. Does the python adodb implementation allow you to
use datetime objects transparently?


> >By rewrite, do you mean that the new version only uses
> >ADOdb, or have you added ADOdb as a supported back-end?
> ADOdb adds a level of abstraction on top of db-api. I wrote a version of
> ConnectionPool that uses adodb connections instead of the regular dbapi
> connections and cursors. If this is something python developers find
> useful, i don't know. I guess it isn't as necessary as in php (which i'm
> switching from) where no common db-api exists, but I still think it's
> quite a nice thing.

So this would implement a super-set of the adbapi interface, then?
I think this would probably be a useful addition.


> >sqlreflector and row could definitely use a reworking.
> >I don't think they are used much. I think people mainly
> >use adbapi and write their own object mapping system.
> >What sort of things did you have in mind?
> Well mainly validating the data assigned to a rowobject so one can be
> sure it makes it into the db (checking data length, proper dates etc).
> But if row and sqlreflector isn't used I'll probably build something new
> instead of going through that code. I'm thinking of using the db_row
> module (http://opensource.theopalgroup.com) which seems to offer
> efficient row data access.

db_row has already been mentioned on this list as a nice module.
But wouldn't the associative array aspects of adodb eliminate the need
for db_row?

dave





From simon at hedberg.net  Sat Oct  2 03:35:37 2004
From: simon at hedberg.net (Simon)
Date: Sat, 2 Oct 2004 11:35:37 +0200
Subject: [Twisted-Python] About adodb
In-Reply-To: <1096686086.18123.67.camel@oneiros>
Message-ID: <000801c4a863$2c69b3d0$456271d5@hp>

>db_row has already been mentioned on this list as a nice module. 
>But wouldn't the associative array aspects of adodb eliminate the need
for db_row?

Yep, functionwise it would be pretty much the same. db_row however has
the advantage of using a different storage mechanism eliminating the
need for a dictionary in each object (using __slots__). If you load a
lot of objects that should be an advantage. My idea is to subclass
db_row to add some data validation routines. Perhaps we could add some
foreignkey functionality also to make it a worthy replacement of
RowObject.

/Simon




From p.mayers at imperial.ac.uk  Sun Oct  3 07:26:15 2004
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 03 Oct 2004 14:26:15 +0100
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <1096230335.19062.22.camel@sheriffpony>
References: <41570B4E.9090109@imperial.ac.uk>	<1096224850.19065.17.camel@sheriffpony>	<41571A05.7050508@imperial.ac.uk>
	<1096230335.19062.22.camel@sheriffpony>
Message-ID: <415FFDF7.50503@imperial.ac.uk>

Itamar Shtull-Trauring wrote:

> 
> 
>>I'm also slightly concerned about the number of function calls involved 
>>in jumping in and out of the reactor that many times a second (several 
>>thousand, if I can get it to go as fast as my previous code) given how 
>>expensive they are under Python. It would certainly be quicker to 
>>implement this inside the reactor.mainLoop.
> 
> 
> Just have a single reactor.callLater(0, f), and f() then calls all the
> functions you want done in that iteration.

Ok, just a quick note to people - I solved this as suggested, however 
reactor.callLater(0, func) does not work; because 0 always means *now*, 
you get the queuing problem:

class SNMP(protocol.DatagramProtocol):
     def datagramReceived(self, data, addr):
         pdu = self.decode(data)
         self.timeouts.remove(pdu.deferred)
         self.queue(pdu.deferred.callback, (pdu,))

     def queue(self, func, pargs):
         if not self.calls:
             # Schedule a receive at some later date
             reactor.callLater(0.001, self.dequeue)
         self.calls.append((func, pargs))

     def dequeue(self):
         if not self.calls:
             return
         func, pargs = self.calls.pop(0)
         # The problem is here - this function will almost certainly
         # be a protocol action that will generate another transmit PDU
         # With many clients, the many transmits can overflow the input
         # queue while we're spinning inside code
         func(*pargs)
         if self.calls:
             # To avoid the problem, wait "delta" (some small number)
             # rather than zero; this will ensure a select() happens
             # before the callLater
             reactor.callLater(0.001, self.dequeue)

class Agent:
     def __init__(self, host, proto):
         self.proto = proto
     def start(self):
         d = self.proto.query(self.host, 'get', oid1, oid2)
         d.addCallbacks(self.step2, self.error)
     def step2(self, pdu):
         # Do some stuff
         d = self.proto.query(self.host, 'get', self.whatnow[pdu])
         d.addCallbacks(self.step3, self.error)

proto = SNMP()
for hostname in sys.argv[1:]:
     a = Agent(hostname, proto)
     # Start up one at a time, to avoid startup surge
     proto.queue(a.start, None)
from twisted.internet import reactor
reactor.run()

I hope I'm explaining what's going on here - but if not, don't worry, 
the problem is more or less solved for me, thanks for the assistance. 
The only minor remaining niggle is that the static 0.001 value to 
callLater limits my theoretical max throughput to 1000 queries/sec. The 
only way to do without that parameter would be to execute a select() 
inside every function call in runUntilCurrent I think. As it happens, 
1000/sec is more than the box can do anyway, so it's not a problem at 
the moment!



From itamar at itamarst.org  Sun Oct  3 08:28:27 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 03 Oct 2004 10:28:27 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <415FFDF7.50503@imperial.ac.uk>
References: <41570B4E.9090109@imperial.ac.uk>
	<1096224850.19065.17.camel@sheriffpony>	<41571A05.7050508@imperial.ac.uk>
	<1096230335.19062.22.camel@sheriffpony> <415FFDF7.50503@imperial.ac.uk>
Message-ID: <1096813707.29728.0.camel@sheriffpony>

callLater(0, f) does not mean 'now', it means 'next iteration'.




From exarkun at divmod.com  Sun Oct  3 10:08:22 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sun, 03 Oct 2004 16:08:22 GMT
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <1096813707.29728.0.camel@sheriffpony>
Message-ID: <20041003160822.29723.1429913293.divmod.quotient.9325@ohm>

On Sun, 03 Oct 2004 10:28:27 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>callLater(0, f) does not mean 'now', it means 'next iteration'.
> 
> 

  But as you know, due to an implementation bug, it _behaves_ as if it meant "now" when called from a function that is being called from a callLater().

  Hopefully someone will get 'round to fixing this before 2.0.

  Jp



From itamar at itamarst.org  Sun Oct  3 13:54:03 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 03 Oct 2004 15:54:03 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <20041003160822.29723.1429913293.divmod.quotient.9325@ohm>
References: <20041003160822.29723.1429913293.divmod.quotient.9325@ohm>
Message-ID: <1096833243.29735.2.camel@sheriffpony>

!

Do we have an open issue for this?




From foom at fuhm.net  Sun Oct  3 14:12:42 2004
From: foom at fuhm.net (James Y Knight)
Date: Sun, 3 Oct 2004 16:12:42 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <1096833243.29735.2.camel@sheriffpony>
References: <20041003160822.29723.1429913293.divmod.quotient.9325@ohm>
	<1096833243.29735.2.camel@sheriffpony>
Message-ID: <94DF2694-1578-11D9-B112-000A95A50FB2@fuhm.net>

On Oct 3, 2004, at 3:54 PM, Itamar Shtull-Trauring wrote:
> Do we have an open issue for this?

I believe it's fixed by http://www.twistedmatrix.com/bugs/issue707, 
although that issue isn't really about this bug.

James




From foom at fuhm.net  Sun Oct  3 14:20:30 2004
From: foom at fuhm.net (James Y Knight)
Date: Sun, 3 Oct 2004 16:20:30 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <AC3AAF7A-1579-11D9-B112-000A95A50FB2@fuhm.net>

Bug summary
______________________
Since 2004-09-25 17:50:20.840000:
   Bugs opened: 3   Bugs closed: 12   Total open bugs: 302 (-9)

New / Reopened Bugs
______________________
twisted/xish/domish.py bug breaks jabber protocol implementation  (12 
hours ago)
        http://www.twistedmatrix.com/bugs/issue734 opened by doko

twisted's SIGCHLD handler breaks popen.  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue733 opened by jknight

test_journal.Service defines addtime twice in the same scope and uses 
undefined name "journal"  (7 days ago)
CLOSED http://www.twistedmatrix.com/bugs/issue732 opened by exarkun

Bugs Closed
______________________
t.p.c.MetaInterface.__getattr__  causes infinite recursion  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue730 opened by slyphon

test_journal.Service defines addtime twice in the same scope and uses 
undefined name "journal"  (7 days ago)
        http://www.twistedmatrix.com/bugs/issue732 opened by exarkun

udp.Port and udp.ConnectedPort use isinstance  (2 months ago)
        http://www.twistedmatrix.com/bugs/issue651 opened by burris

[PATCH] twisted.protocols.portforward has a couple of problems.  (7 
months ago)
        http://www.twistedmatrix.com/bugs/issue527 opened by Omnifarious

[MAIL] SMTPSenderFactory has unintended side effect  (7 months ago)
        http://www.twistedmatrix.com/bugs/issue540 opened by mjs

twistd -y fails with dos-style newlines  (5 months ago)
        http://www.twistedmatrix.com/bugs/issue595 opened by phed

twisted.internet.{tcp,udp}.Port lie when port == 0  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue725 opened by anthony

twisted.names.dns.Record_NULL is stupid  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue729 opened by anthony

ReconnectingClientFactory can fail to reconnect on connection timeouts  
(2 weeks ago)
        http://www.twistedmatrix.com/bugs/issue722 opened by exarkun

[CORE] Add process support to default reactor on windows  (5 months ago)
        http://www.twistedmatrix.com/bugs/issue598 opened by itamarst

Persistant Adapters at adapter registration time  (6 months ago)
        http://www.twistedmatrix.com/bugs/issue556 opened by ironfroggy

tempfile.mkstemp in twisted.python.compat  (2 weeks ago)
        http://www.twistedmatrix.com/bugs/issue713 opened by yacc




From iap_yeh at abit.com.tw  Sun Oct  3 20:16:54 2004
From: iap_yeh at abit.com.tw (Iap, Singuan)
Date: Mon, 4 Oct 2004 10:16:54 +0800
Subject: [Twisted-Python] Newbie question: How to reference the "__main__"
In-Reply-To: <Pine.LNX.4.56.0410011130570.5567@klondike.cis.upenn.edu>
Message-ID: <JAEIICFHFJDILEEGFIKIKEMBCCAA.iap_yeh@abit.com.tw>

I have a work-around like this:

import __main__
__main__.config=Configuration()

And  access it in other modules by:

import __main__
config=__main__.config

But I don't think that is a good idea.
There must be more simple and extensible way, I guess.

Iap, Singuan


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Yun Mao
Sent: Friday, October 01, 2004 11:33 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] Newbie question: How to reference the
"__main__"


but the sys.argv[1:] is going to be twistd's argument, including
"-noy","xxx.tac", etc. right? it isn't exactly what he wanted, is it?

Yun


On Fri, 1 Oct 2004, Itamar Shtull-Trauring wrote:

> On Fri, 2004-10-01 at 05:40, Iap, Singuan wrote:
>
> > In server.py
> > ----------------------------------------
> > config=Configuration()
> somewhere.MyObject.addConfig(config)
>
> and then MyObject can access the config.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From uwe at oss4u.com  Sun Oct  3 20:29:01 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sun, 3 Oct 2004 19:29:01 -0700
Subject: [Twisted-Python] Newbie question: How to reference the "__main__"
In-Reply-To: <JAEIICFHFJDILEEGFIKIKEMBCCAA.iap_yeh@abit.com.tw>
References: <JAEIICFHFJDILEEGFIKIKEMBCCAA.iap_yeh@abit.com.tw>
Message-ID: <200410031929.01970.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Just use a singleton design for your Configuration class

class Configuration:
	class __impl:
		def __init__(self):
			# do your stuff here
                        #
	

    	__instance = __impl()

    	def __getattr__(self,attr):
     	   return getattr(self.__instance,attr)

    	def __setattr__(self,attr,value):
     	   return setattr(self.__instance, attr, value)
	

whenever you instanciate Configuration the inner __impl instance will always 
be the same. Maybe I missed something above - just look up the singleton 
design in the python cookbook (activestate.com)

Hope that helps

UC


On Sunday 03 October 2004 07:16 pm, Iap, Singuan wrote:
> I have a work-around like this:
>
> import __main__
> __main__.config=Configuration()
>
> And  access it in other modules by:
>
> import __main__
> config=__main__.config
>
> But I don't think that is a good idea.
> There must be more simple and extensible way, I guess.
>
> Iap, Singuan
>
>
> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Yun Mao
> Sent: Friday, October 01, 2004 11:33 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] Newbie question: How to reference the
> "__main__"
>
>
> but the sys.argv[1:] is going to be twistd's argument, including
> "-noy","xxx.tac", etc. right? it isn't exactly what he wanted, is it?
>
> Yun
>
> On Fri, 1 Oct 2004, Itamar Shtull-Trauring wrote:
> > On Fri, 2004-10-01 at 05:40, Iap, Singuan wrote:
> > > In server.py
> > > ----------------------------------------
> > > config=Configuration()
> >
> > somewhere.MyObject.addConfig(config)
> >
> > and then MyObject can access the config.
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

- -- 
	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFBYLVtjqGXBvRToM4RAlLWAKDSfoSU0vgN5WC0jc1R4EWkhCcEtgCg01DW
XdOI9yXBfld26J//pdFjBY0=
=Svl5
-----END PGP SIGNATURE-----




From itamar at itamarst.org  Mon Oct  4 09:36:42 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 04 Oct 2004 11:36:42 -0400
Subject: [Twisted-Python] Proposed change to buffering
Message-ID: <1096904202.30448.17.camel@sheriffpony>

Now that we don't do write-at-once, lists are easier to use. 

Benefits: Allows protocols with many small writes to not have to do
their own buffering (e.g. http, imap4 as currently coded, PB, IRC,
telnet, etc. etc.)

Problems: Bit more overhead for large writes.

There's also a bit of code change in tcp.py for the SSL code.

Index: abstract.py
===================================================================
--- abstract.py	(revision 11908)
+++ abstract.py	(working copy)
@@ -43,7 +43,9 @@
         if not reactor:
             from twisted.internet import reactor
         self.reactor = reactor
-
+        self._tempDataBuffer = [] # will be added to dataBuffer in doWrite
+        self._tempDataLen = 0
+    
     def connectionLost(self, reason):
         """The connection was lost.
 
@@ -81,6 +83,9 @@
         there; a result of 0 implies no write was done, and a result of None
         indicates that a write was done.
         """
+        self.dataBuffer += "".join(self._tempDataBuffer)
+        self._tempDataBuffer = []
+        self._tempDataLen = 0
         # Send as much data as you can.
         if self.offset:
             l = self.writeSomeData(buffer(self.dataBuffer, self.offset))
@@ -131,15 +136,16 @@
         if not self.connected:
             return
         if data:
-            self.dataBuffer = self.dataBuffer + data
+            self._tempDataBuffer.append(data)
+            self._tempDataLen += len(data)
             if self.producer is not None:
-                if len(self.dataBuffer) > self.bufferSize:
+                if len(self.dataBuffer) + self._tempDataLen > self.bufferSize:
                     self.producerPaused = 1
                     self.producer.pauseProducing()
             self.startWriting()
 
     def writeSequence(self, iovec):
-        self.write("".join(iovec))
+        self._tempDataBuffer.extend(iovec)
 
     def loseConnection(self):
         """Close the connection at the next available opportunity.





From itamar at itamarst.org  Mon Oct  4 09:38:46 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 04 Oct 2004 11:38:46 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <415FFDF7.50503@imperial.ac.uk>
References: <41570B4E.9090109@imperial.ac.uk>
	<1096224850.19065.17.camel@sheriffpony>	<41571A05.7050508@imperial.ac.uk>
	<1096230335.19062.22.camel@sheriffpony> <415FFDF7.50503@imperial.ac.uk>
Message-ID: <1096904326.30442.19.camel@sheriffpony>

On Sun, 2004-10-03 at 09:26, Phil Mayers wrote:

> I hope I'm explaining what's going on here - but if not, don't worry, 
> the problem is more or less solved for me, thanks for the assistance. 
> The only minor remaining niggle is that the static 0.001 value to 
> callLater limits my theoretical max throughput to 1000 queries/sec.

Using twisted.internet.task.LoopingCall should allow you higher speeds,
as it's smarter than simply calling callLater repeatedly.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From itamar at itamarst.org  Mon Oct  4 10:04:20 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 04 Oct 2004 12:04:20 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <94DF2694-1578-11D9-B112-000A95A50FB2@fuhm.net>
References: <20041003160822.29723.1429913293.divmod.quotient.9325@ohm>
	<1096833243.29735.2.camel@sheriffpony>
	<94DF2694-1578-11D9-B112-000A95A50FB2@fuhm.net>
Message-ID: <1096905859.30442.43.camel@sheriffpony>

On Sun, 2004-10-03 at 16:12, James Y Knight wrote:

> I believe it's fixed by http://www.twistedmatrix.com/bugs/issue707, 
> although that issue isn't really about this bug.

Have we figured out what to do about heapq on 2.2?




From maoy at cis.upenn.edu  Mon Oct  4 10:24:06 2004
From: maoy at cis.upenn.edu (Yun Mao)
Date: Mon, 4 Oct 2004 12:24:06 -0400 (EDT)
Subject: [Twisted-Python] DHARMA: a project based on twisted python
In-Reply-To: <200410031929.01970.uwe@oss4u.com>
References: <JAEIICFHFJDILEEGFIKIKEMBCCAA.iap_yeh@abit.com.tw>
	<200410031929.01970.uwe@oss4u.com>
Message-ID: <Pine.LNX.4.56.0410041209320.7794@klondike.cis.upenn.edu>

Dear Twisted folks,

I'm very happy to annouce a beta release of DHARMA project. DHARMA
(Distributed Home Agent For Robust Mobile Access) is a research project
focusing on providing robust mobile network connectivity. It creates an
end-to-end session layer on top of transport layer to provide robust
access, transparently mask of unexpected network failures and network
interface change. You can suspend/resume your TCP connection with little
efforts. DHARMA supports legacy TCP applications with proxy technology.
When end-to-end deployment is not available, DHARMA intelligently select
the proxy (Home agent) for you from more than 200 nodes all over the
world to minimize the routing overhead.

The DHARMA core is heavily based on twisted python, and has almost the
same abstraction of TCP operations, such as connectSession, listenSession,
etc. DHARMA also has a Web-based interface which is built on top of Nevow
0.2.

The detailed information is available at http://dharma.cis.upenn.edu

Want to have 200 proxies all over the planet for you? Send us a mail to
get an account for free. :)

Cheers,

Yun




From foom at fuhm.net  Mon Oct  4 11:18:11 2004
From: foom at fuhm.net (James Y Knight)
Date: Mon, 4 Oct 2004 13:18:11 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <1096905859.30442.43.camel@sheriffpony>
References: <20041003160822.29723.1429913293.divmod.quotient.9325@ohm>
	<1096833243.29735.2.camel@sheriffpony>
	<94DF2694-1578-11D9-B112-000A95A50FB2@fuhm.net>
	<1096905859.30442.43.camel@sheriffpony>
Message-ID: <5E2A7C30-1629-11D9-B112-000A95A50FB2@fuhm.net>

On Oct 4, 2004, at 12:04 PM, Itamar Shtull-Trauring wrote:
> On Sun, 2004-10-03 at 16:12, James Y Knight wrote:
>
>> I believe it's fixed by http://www.twistedmatrix.com/bugs/issue707,
>> although that issue isn't really about this bug.
>
> Have we figured out what to do about heapq on 2.2?

Include a copy of it in our compatibility library. See thread 
"Including code under PSF license for backwards compatibility?".

James




From mailinglist at ltsai.com  Tue Oct  5 06:15:29 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Tue, 05 Oct 2004 20:15:29 +0800
Subject: [Twisted-Python] assignKeyAttr in row object
Message-ID: <cju394$16g$1@sea.gmane.org>

Dear all,

What is the assignKeyAttr method used for in a row object? Is it similar 
to a primary key that can be used to identity the instance?


Liming




From lists at garbagedump.com  Tue Oct  5 07:00:36 2004
From: lists at garbagedump.com (C Wegrzyn)
Date: Tue, 05 Oct 2004 13:00:36 +0000
Subject: [Twisted-Python] Documentation?
In-Reply-To: <cju394$16g$1@sea.gmane.org>
References: <cju394$16g$1@sea.gmane.org>
Message-ID: <41629AF4.3020500@garbagedump.com>

Is there any other documentation on using Twisted other than that on the 
Twisted site?

Chuck Wegrzyn




From dave at krondo.com  Tue Oct  5 09:03:19 2004
From: dave at krondo.com (Dave Peticolas)
Date: Tue, 05 Oct 2004 08:03:19 -0700
Subject: [Twisted-Python] About adodb
In-Reply-To: <000801c4a863$2c69b3d0$456271d5@hp>
References: <000801c4a863$2c69b3d0$456271d5@hp>
Message-ID: <1096988598.11401.11.camel@oneiros>

On Sat, 2004-10-02 at 02:35, Simon wrote:
> >db_row has already been mentioned on this list as a nice module. 
> >But wouldn't the associative array aspects of adodb eliminate the need
> for db_row?
> 
> Yep, functionwise it would be pretty much the same. db_row however has
> the advantage of using a different storage mechanism eliminating the
> need for a dictionary in each object (using __slots__). If you load a
> lot of objects that should be an advantage. My idea is to subclass
> db_row to add some data validation routines. Perhaps we could add some
> foreignkey functionality also to make it a worthy replacement of
> RowObject.

That sounds like a good plan. An extension to adbapi to return
db_row objects would be helpful too. There is a patch to do that
now: http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue632
But I think db_row is a better solution. Maybe you could post your
code to that bug?

thanks,
dave





From dave at krondo.com  Tue Oct  5 09:16:12 2004
From: dave at krondo.com (Dave Peticolas)
Date: Tue, 05 Oct 2004 08:16:12 -0700
Subject: [Twisted-Python] assignKeyAttr in row object
In-Reply-To: <cju394$16g$1@sea.gmane.org>
References: <cju394$16g$1@sea.gmane.org>
Message-ID: <1096989372.11401.13.camel@oneiros>

On Tue, 2004-10-05 at 05:15, Tsai Li Ming wrote:
> Dear all,
> 
> What is the assignKeyAttr method used for in a row object? Is it similar 
> to a primary key that can be used to identity the instance?

Yes, assignKeyAttr is used to change the primary key of a row object.

dave





From mailinglist at ltsai.com  Tue Oct  5 09:33:58 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Tue, 05 Oct 2004 23:33:58 +0800
Subject: [Twisted-Python] Re: assignKeyAttr in row object
In-Reply-To: <1096989372.11401.13.camel@oneiros>
References: <cju394$16g$1@sea.gmane.org> <1096989372.11401.13.camel@oneiros>
Message-ID: <cjuetl$571$1@sea.gmane.org>

Dave Peticolas wrote:
> On Tue, 2004-10-05 at 05:15, Tsai Li Ming wrote:
> 
>>Dear all,
>>
>>What is the assignKeyAttr method used for in a row object? Is it similar 
>>to a primary key that can be used to identity the instance?
> 
> 
> Yes, assignKeyAttr is used to change the primary key of a row object.
> 
> dave

Hi Dave,

Is it necessary to use assignKeyAttr? From the source code, it doesn't 
seem to do anything special, except to change the primary key(s)?

def assignKeyAttr(self, attrName, value):
         """Assign to a key attribute.

         This cannot be done through normal means to protect changing
         keys of db objects.
         """
         found = 0
         for keyColumn, type in self.rowKeyColumns:
             if keyColumn == attrName:
                 found = 1
         if not found:
             raise DBError("%s is not a key columns." % attrName)
         self.__dict__[attrName] = value

Alternatively, I could set the primary key manually.
newRoom = RoomRow()
newRoom.roomID = get_unique _id()
#newRoom.assignKeyAttr("roomID", get_unique _id())
reflector.insertRow(newRoom).addCallback(onInsert)

Liming




From mailinglist at ltsai.com  Tue Oct  5 09:54:41 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Tue, 05 Oct 2004 23:54:41 +0800
Subject: [Twisted-Python] Re: assignKeyAttr in row object
In-Reply-To: <cjuetl$571$1@sea.gmane.org>
References: <cju394$16g$1@sea.gmane.org> <1096989372.11401.13.camel@oneiros>
	<cjuetl$571$1@sea.gmane.org>
Message-ID: <cjug4f$8tn$1@sea.gmane.org>

Tsai Li Ming wrote:
> Dave Peticolas wrote:
> 
>> On Tue, 2004-10-05 at 05:15, Tsai Li Ming wrote:
>>
>>> Dear all,
>>>
>>> What is the assignKeyAttr method used for in a row object? Is it 
>>> similar to a primary key that can be used to identity the instance?
>>
>>
>>
>> Yes, assignKeyAttr is used to change the primary key of a row object.
>>
>> dave
> 
> 
> Hi Dave,
> 
> Is it necessary to use assignKeyAttr? From the source code, it doesn't 
> seem to do anything special, except to change the primary key(s)?
> 
> def assignKeyAttr(self, attrName, value):
>         """Assign to a key attribute.
> 
>         This cannot be done through normal means to protect changing
>         keys of db objects.
>         """
>         found = 0
>         for keyColumn, type in self.rowKeyColumns:
>             if keyColumn == attrName:
>                 found = 1
>         if not found:
>             raise DBError("%s is not a key columns." % attrName)
>         self.__dict__[attrName] = value
> 
> Alternatively, I could set the primary key manually.
> newRoom = RoomRow()
> newRoom.roomID = get_unique _id()
> #newRoom.assignKeyAttr("roomID", get_unique _id())
> reflector.insertRow(newRoom).addCallback(onInsert)
> 
> Liming

My mistake. Twisted has the __setattr__ defined so that key values must 
be changed via assignKeyAttr.

Liming




From ibmub80 at yahoo.com  Wed Oct  6 04:28:36 2004
From: ibmub80 at yahoo.com (Ibrahim Mubarak)
Date: Wed, 6 Oct 2004 03:28:36 -0700 (PDT)
Subject: [Twisted-Python] Sending other things than strings in UDP packets
Message-ID: <20041006102836.17467.qmail@web50902.mail.yahoo.com>

Hi,

I am working on a UDP server. I can send and recieve packets with their data in strings with no
problems. However, I was wondering if there is a way to populate the data portion of the packet
with data types other than strings. And to be able to stick a number of values, might be of
different types, together in the same packet.

I looked at PB. It is not what I need. I need a low level control on what I add to the packets I
send and how I can read packets I recieve.

Thanks,
ib

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From andrew-twisted at puzzling.org  Wed Oct  6 05:03:56 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 6 Oct 2004 13:03:56 +0200
Subject: [Twisted-Python] Sending other things than strings in UDP packets
In-Reply-To: <20041006102836.17467.qmail@web50902.mail.yahoo.com>
References: <20041006102836.17467.qmail@web50902.mail.yahoo.com>
Message-ID: <20041006110356.GA5420@frobozz>

On Wed, Oct 06, 2004 at 03:28:36AM -0700, Ibrahim Mubarak wrote:
> Hi,
> 
> I am working on a UDP server. I can send and recieve packets with their data in strings with no
> problems. However, I was wondering if there is a way to populate the data portion of the packet
> with data types other than strings. And to be able to stick a number of values, might be of
> different types, together in the same packet.

UDP is a datagram transport -- it sends packets of some number of bytes with
no guarantees of order or even delivery, beyond that if a packet is
delivered, it will be delivered whole.  All it knows about the payload of
those packets is that they contain bytes.

What those bytes represent is entirely up to the protocol author.  You can
use them to represent ascii strings, unicode characters, a series of 32-bit
integers, or a combination of anything like you like, so long as you can
work out how to encode it as bytes at the sender's end, and decode it at the
receiver's end.  The 'struct' module in the Python standard library can help
a lot here:
    http://docs.python.org/lib/module-struct.html

> I looked at PB. It is not what I need. I need a low level control on what I add to the packets I
> send and how I can read packets I recieve.

You're right.  PB is a high-level remote object protocol built on TCP.
However, its jelly and banana layers do demonstrate one (moderately complex,
but flexible) approach to serialising arbitrary objects to bytes and back.
It's almost certainly much more than you need for serialising data in UDP
packets, though.

-Andrew.




From jritter at bektel.com  Wed Oct  6 11:23:56 2004
From: jritter at bektel.com (Joshua Ritter)
Date: Wed, 6 Oct 2004 12:23:56 -0500
Subject: [Twisted-Python] Using wxreactor on Windows
Message-ID: <000b01c4abc9$42b45ff0$0300000a@spooge>

On Windows, I was having a problem with my wxreactor application
intermittently freezing on initialization.  It was also taking a long time
to exit.

wxdemo.py doesn't exhibit the problem at startup, most likely due to the
simplicity of the GUI.  The demo does however exhibit the exit problem.

What I did to alleviate both problems was to move the timer creation and
starting code:

class MoMWorldServer(wx.App):
    def OnInit(self):
        #SNIP
        wx.EVT_IDLE(self,self.OnFirstIdle)

    def OnFirstIdle(self,evt):
        #We catch the first idle message and use it to kick start
        #the twisted reactor, this avoids a possible deadlock, at least on
Windows, gulp
        print "Starting Network Service"

        wx.EVT_IDLE(self,None) #remove handler

        #create the timer and start it
        reactor.timer = wxreactor.ReactorTimer(reactor)
        reactor.timer.Start(1)

For the exiting problem, I stop the timer on the close event to the main
frame of the application:

class MainFrame(wx.Frame):
    def __init__(self, parent, id, title):
        #SNIP
        wx.EVT_CLOSE(self,self.OnClose)

      def OnClose(self,evt):
        evt.Skip()
        #stop the timer here
        reactor.timer.Stop()

-Josh Ritter
Technical Director
http://www.prairiegames.com








From andrea at cpushare.com  Wed Oct  6 13:24:54 2004
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed, 6 Oct 2004 21:24:54 +0200
Subject: [Twisted-Python] epoll and other questions
Message-ID: <20041006192454.GA29178@dualathlon.random>

Is there any plan to use epoll instead of poll to make twisted scalabile
with hundred thousand simultanous sockets connected?

I'm evaluating if to use twisted or C/C++ for my cpushare.com server
side. I'd expect network to be the main bottleneck in the short term,
and so I feel safe at spending extra cycles in userspace (at least in
the short term), but even in the short it should at least handle hundred
thousand tcp connections, and so I'm really scared about poll. I think
poll would be the biggest showstopper, and that's why I'm asking to make
twisted use epoll. I assume my application would require no change, so I
can start developing with current twisted, I can test it with poll, and
then later fix the internals when the slowdown becomes noticeable.  Right?

I understand there's no limitation on the number of sockets
simultanously open, I just need to use ulimit to boost the limit of fds.

A slightly separated issue: I assume it's best for me not to do any
blocking I/O in the main network server handling the 100k connections and
to create a secondary internal server communicating again through tcp/ip
(loopback device) with the primary server to do the real blocking I/O.
Is this correct? Best would be to use asynchronous I/O for the IO, but I
think using a second process will be a lot simpler in practice since I
don't need bulk I/O performance (I only need to avoid blocking). I only
want to keep the network pipeline full even when some disk-read is
happening. Best would be to use threading (or shared memory with
MAP_SHARED in tmpfs), but it seems twisted is not mature enough for
threading and shared memory communication using futex, right?  If I
would write it in C I could probably get various performance bits
faster but I doubt the time spent on those bits would payoff
significantly, opinions? 

Another thing I plan doing is to ship the public key (matching the
private key stored only on the server) on the client source tarball,
this way as far as people downloaded the right tarball, they will be
able to securely connect to the server since they will be able to check
the signature. Is there any example of this idea (public key stored in a
file in the client package) available somewhere?

thank you!

PS. if somebody has some spare time and wants to have a look at the
python _client_ code downloadable at www.cpushare.com/download.php and
tell me if it's decent code and if I interfaced correctly between
twisted and pyqt that's welcome. I'm at the point that I've to open up
the connections from the QT event handlers etc.. I still have some
unsolved issue on the QT side (like error windows instead of using
sys.stderr and disabling one side of the tab when the other is running),
but those are low priority at the moment, the GUI design was
strightforward and the real big issues will start now in the network
protocol implementation with twisted.



From tv at twistedmatrix.com  Wed Oct  6 14:02:27 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 06 Oct 2004 23:02:27 +0300
Subject: [Twisted-Python] epoll and other questions
In-Reply-To: <20041006192454.GA29178@dualathlon.random>
References: <20041006192454.GA29178@dualathlon.random>
Message-ID: <41644F53.3010008@twistedmatrix.com>

Andrea Arcangeli wrote:
> Is there any plan to use epoll instead of poll to make twisted
> scalabile with hundred thousand simultanous sockets connected?

There has been some work (I personally wrote a partial epoll python
library at the time epoll was very new). I think the progress stopped
then because of epoll API instability; now that epoll is no longer a
moving target, someone should get back on the case.

> twisted use epoll. I assume my application would require no change,
> so I can start developing with current twisted, I can test it with
> poll, and then later fix the internals when the slowdown becomes
> noticeable.  Right?

Yes. All the different reactors implement the same interface.

Also, notice that the default reactor most likely uses select, not poll:

$ python -c 'from twisted.internet import reactor; print reactor'
<twisted.internet.default.SelectReactor instance at 0x401fb16c>
$ python -c 'from twisted.internet import pollreactor; \
  pollreactor.install(); from twisted.internet import reactor; \
  print reactor'
<twisted.internet.pollreactor.PollReactor instance at 0x401f33ec>

> I understand there's no limitation on the number of sockets 
> simultanously open, I just need to use ulimit to boost the limit of
> fds.

My gut feeling is you'll either hit an OS limit or sys.maxint,
and the latter is pretty huge. Haven't looked at the details.

> A slightly separated issue: I assume it's best for me not to do any 
> blocking I/O in the main network server handling the 100k connections
> and to create a secondary internal server communicating again through
> tcp/ip (loopback device) with the primary server to do the real
> blocking I/O. Is this correct? Best would be to use asynchronous I/O
> for the IO, but I think using a second process will be a lot simpler
> in practice since I don't need bulk I/O performance (I only need to
> avoid blocking). I only want to keep the network pipeline full even
> when some disk-read is happening. Best would be to use threading (or
> shared memory with MAP_SHARED in tmpfs), but it seems twisted is not
> mature enough for threading and shared memory communication using
> futex, right?  If I would write it in C I could probably get various
> performance bits faster but I doubt the time spent on those bits
> would payoff significantly, opinions?

Well, there's nothing Twisted- or even Python-specific in that.
The solution probably depends heavily on your dataset size, access
patterns, and available RAM. Some people advocate heavy RAM caching.
Sendfile might be the solution, but I don't think there's any
integration of sendfile with python, far less with twisted.

Your plan on isolating disk IO to separate process(es) sounds quite
sane. Your master process could receive the file data from the IO
workers in blocks via a shared mmap, to avoid passing it through a
socket (even if the socket was a local TCP connection or UNIX domain).
Don't know if that optimization is worth it; I would delay writing
any extra code until the problem actually shows up.

Note that python threading is very likely _not_ what you want;
the threads synchronize in the interpreter level quite a lot.

Sadly, not even http://www.kegel.com/c10k.html (which is normally
_the_ resource for things like this) talks that much about disk IO.

> Another thing I plan doing is to ship the public key (matching the 
> private key stored only on the server) on the client source tarball, 
> this way as far as people downloaded the right tarball, they will be 
> able to securely connect to the server since they will be able to
> check the signature. Is there any example of this idea (public key
> stored in a file in the client package) available somewhere?

SFS (secure file system) does something like that. The info page
included has this:

	SFS clients require no configuration.  Simply run the program
	`sfscd', and a directory `/sfs' should appear on your system.
	To test your client, access our SFS test server.  Type the
	following commands:

	  % cd /sfs/@sfs.fs.net,uzwadtctbjb3dg596waiyru8cx5kb4an
	  % cat CONGRATULATIONS
	  You have set up a working SFS client.
	  %

	Note that the `/sfs/@sfs.fs.net,...' directory does not need to
	exist before you run the `cd' command.  SFS transparently mounts
	new servers as you access them.

The part after the comma is a hash of the public key the server at
sfs.fs.net must present, in order to be accepted.



From itamar at itamarst.org  Wed Oct  6 14:06:46 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 06 Oct 2004 16:06:46 -0400
Subject: [Twisted-Python] epoll and other questions
In-Reply-To: <20041006192454.GA29178@dualathlon.random>
References: <20041006192454.GA29178@dualathlon.random>
Message-ID: <1097093206.31657.63.camel@sheriffpony>

On Wed, 2004-10-06 at 15:24, Andrea Arcangeli wrote:
> Is there any plan to use epoll instead of poll to make twisted scalabile
> with hundred thousand simultanous sockets connected?

It wouldn't be hard to do, mainly someone needs to wrap epoll for
Python.

> twisted use epoll. I assume my application would require no change, so I
> can start developing with current twisted, I can test it with poll, and
> then later fix the internals when the slowdown becomes noticeable.  Right?

Correct.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From paul at ref.nmedia.net  Wed Oct  6 15:38:55 2004
From: paul at ref.nmedia.net (Paul Campbell)
Date: Wed, 6 Oct 2004 14:38:55 -0700
Subject: [Twisted-Python] Sending other things than strings in UDP packets
Message-ID: <20041006213855.GA31944@ref.nmedia.net>

Sending anything via any protocol is fairly easy with python in general.

There are two ways to do it depending on your particular goals.

The "python way" is as follows:

message = pickle.dumps(my structures)
my structures = pickle.loads(message)

Read the documentation on the pickle module for more information. And be
forewarned: pickle will dump/load ANYTHING. For safety reasons, there's also
a "safe_pickle" variant floating around.

The underlying banana protocol is really just another pickle module for use
inside PB. I haven't tried using it separately from PB though.

The other "unpythonese" way of doing it is using the struct module:

message = struct.pack("format", param1, param2, param3)
param1, param2, param3 = struct.unpack("format", message)

The advantage of the struct library is that you have complete and total control
over every byte so you can deal with non-python data.

In reality, I personally use both. pickle is great for providing a totally
unstructured interface to higher level protocols that have no desire in
looking directly at low level packet formats. struct does just the opposite.

For instance, here's a very simple UDP RPC module with no error checking
whatsoever, no safety, no handling of very long packets (or checking for
that case), no timeouts, or anything but a very basic rudimentary idea of
how to assemble an RPC protocol.

class UDPRPC(DatagramProtocol):
    REQUEST = 0
    RESPONSE = 1

    def start(self):
        """Create a dictionary of pending RPC's"""
        self.pending = dict()

    def call(self, address, remote_class, remote_method, *remote_args, **remote_kargs):
        """The actual RPC call local (stub) interface. Note that
           we can even get creative by overloading __calls__ and
           similar interfaces to make it look 100% like a real class."""
	d = defer.Deferred() # Create a deferred return.
        # The following is an index to look up the RPC response later
        nonce = random.randomint(0, 2^32-1)
	index = struct.pack("!I!I!H", nonce, address[0], address[1])
        self.pending[index] = d # Store the deferred for the response to follow
        self.sendMessage(self.REQUEST, address,
            (remote_class, remote_method, remote_args, remote_kargs))
        return d
           
    def sendMessage(self, type, address, nonce, data):
        "Do the conversion to a packet and send it."
        packet = chr(type)+struct.pack("!I", nonce)+
            pickle.dumps(data)
	transport.write(packet)
	return d

    def datagramReceived(self, packet, address):
        """Handle incoming packets."""
        type = ord(packet[0])
        nonce = struct.unpack("!I", packet[1:4])
        message = pickle.loads(packet[5:])
        if type == REQUEST: # Handling a remote call
            remote_class, remote_method, remote_args, remote_kargs = message
            result = remote_class.remote_method(*remote_args, **remote_kargs)
            self.sendMessage(self.RESPONSE, address, nonce, result)
        else: # Assume that this is the response, so return the deferred
            index = struct.pack("!I!I!H", nonce, address[0], address[1])
            caller = self.pending[index]
            del self.pending[index]
            caller.Callback(message)



From radeex at gmail.com  Wed Oct  6 15:53:08 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 7 Oct 2004 08:53:08 +1100
Subject: [Twisted-Python] Sending other things than strings in UDP packets
In-Reply-To: <20041006213855.GA31944@ref.nmedia.net>
References: <20041006213855.GA31944@ref.nmedia.net>
Message-ID: <60ed19d404100614531935658a@mail.gmail.com>

On Wed, 6 Oct 2004 14:38:55 -0700, Paul Campbell <paul at ref.nmedia.net> wrote:
> Sending anything via any protocol is fairly easy with python in general.
> 
> There are two ways to do it depending on your particular goals.
> 
> The "python way" is as follows:
> 
> message = pickle.dumps(my structures)
> my structures = pickle.loads(message)

Ergh. Please don't do anything _close_ to suggesting this. This is not
the "python way", it is the "stupid, insecure,
let-people-rm-rf-your-home-directory way".


-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From maoy at cis.upenn.edu  Thu Oct  7 12:50:39 2004
From: maoy at cis.upenn.edu (Yun Mao)
Date: Thu, 7 Oct 2004 14:50:39 -0400 (EDT)
Subject: [Twisted-Python] Sending other things than strings in UDP packets
In-Reply-To: <60ed19d404100614531935658a@mail.gmail.com>
References: <20041006213855.GA31944@ref.nmedia.net>
	<60ed19d404100614531935658a@mail.gmail.com>
Message-ID: <Pine.LNX.4.56.0410071445430.31297@klondike.cis.upenn.edu>

There was a discussion on python mailing list on how to make pickle a
little more secure:

http://coding.derkeiler.com/Archive/Python/comp.lang.python/2004-01/2320.html

and the replies:

http://coding.derkeiler.com/Archive/Python/comp.lang.python/2004-01/293index.html

Yun


On Thu, 7 Oct 2004, Christopher Armstrong wrote:

> On Wed, 6 Oct 2004 14:38:55 -0700, Paul Campbell <paul at ref.nmedia.net> wrote:
> > Sending anything via any protocol is fairly easy with python in general.
> >
> > There are two ways to do it depending on your particular goals.
> >
> > The "python way" is as follows:
> >
> > message = pickle.dumps(my structures)
> > my structures = pickle.loads(message)
>
> Ergh. Please don't do anything _close_ to suggesting this. This is not
> the "python way", it is the "stupid, insecure,
> let-people-rm-rf-your-home-directory way".
>
>
> --
>  Twisted | Christopher Armstrong: International Man of Twistery
>   Radix  |          Release Manager,  Twisted Project
> ---------+            http://radix.twistedmatrix.com
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From andrea at cpushare.com  Thu Oct  7 15:53:34 2004
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu, 7 Oct 2004 23:53:34 +0200
Subject: [Twisted-Python] epoll and other questions
In-Reply-To: <41644F53.3010008@twistedmatrix.com>
References: <20041006192454.GA29178@dualathlon.random>
	<41644F53.3010008@twistedmatrix.com>
Message-ID: <20041007215334.GM29178@dualathlon.random>

On Wed, Oct 06, 2004 at 11:02:27PM +0300, Tommi Virtanen wrote:
> then because of epoll API instability; now that epoll is no longer a
> moving target, someone should get back on the case.

agreed ;).

Ideally with truly huge number of sockets open, the time wasted in poll
at some point would be more than the time wasted in the python
interpreter (if compared to a C source). Would be interesting to measure
the breakpoint, so when the poll cost becomes higher than the
interpreter.

> >twisted use epoll. I assume my application would require no change,
> >so I can start developing with current twisted, I can test it with
> >poll, and then later fix the internals when the slowdown becomes
> >noticeable.  Right?
> 
> Yes. All the different reactors implement the same interface.
> 
> Also, notice that the default reactor most likely uses select, not poll:
> 
> $ python -c 'from twisted.internet import reactor; print reactor'
> <twisted.internet.default.SelectReactor instance at 0x401fb16c>
> $ python -c 'from twisted.internet import pollreactor; \
>  pollreactor.install(); from twisted.internet import reactor; \
>  print reactor'
> <twisted.internet.pollreactor.PollReactor instance at 0x401f33ec>

good point. I'll use pollreactor for now. Apparently, I still have to
use the normal "select" reactor for interfacing with pyqt, but that's ok
since I don't (yet) need scalability on the client side...

> My gut feeling is you'll either hit an OS limit or sys.maxint,
> and the latter is pretty huge. Haven't looked at the details.

ok fine ;).

> Well, there's nothing Twisted- or even Python-specific in that.
> The solution probably depends heavily on your dataset size, access
> patterns, and available RAM. Some people advocate heavy RAM caching.

yes, heavy ram caching is fine for reads, but writes may still require
O_SYNC.

> Sendfile might be the solution, but I don't think there's any
> integration of sendfile with python, far less with twisted.

sendfile is synchronous too, so I don't think it'd solve the problem.
Plus sendfile only works from the filesystem to the network, while for
me it's almost the other way around and I've to parse the data anyways
(I'm even thinking to use pickle objects as storage for each user, but
I'm a bit afraid about the versioning and the unpickle/pickle
performance, so if I upgrade the user class and then all unpickle breaks
because I lack a on-disk format different from the in-memory format).

> Your plan on isolating disk IO to separate process(es) sounds quite
> sane. Your master process could receive the file data from the IO
> workers in blocks via a shared mmap, to avoid passing it through a

so you're saying I could already used shared mmap. but how to serialize
then? I'd need pthread_mutex for that. Otherwise if I have to serialize
through a pipe I can as well send the data through the pipe as well
(it's not going to be high bandwidth communication where an additional
memcpy matters, it'd prefer shared mem only for lowlatency and
full-userspace locking for the data producer)
 
> socket (even if the socket was a local TCP connection or UNIX domain).
> Don't know if that optimization is worth it; I would delay writing
> any extra code until the problem actually shows up.

Agreed ;)

> Note that python threading is very likely _not_ what you want;
> the threads synchronize in the interpreter level quite a lot.

agreed, it's not really scaling. This is also why I doubt the
serialization through shmem would work well, unless I write a module
from scratch for the pthread_mutex futex driven locking.

> >Another thing I plan doing is to ship the public key (matching the 
> >private key stored only on the server) on the client source tarball, 
> >this way as far as people downloaded the right tarball, they will be 
> >able to securely connect to the server since they will be able to
> >check the signature. Is there any example of this idea (public key
> >stored in a file in the client package) available somewhere?
> 
> SFS (secure file system) does something like that. The info page
> included has this:
> 
> 	SFS clients require no configuration.  Simply run the program
> 	`sfscd', and a directory `/sfs' should appear on your system.
> 	To test your client, access our SFS test server.  Type the
> 	following commands:
> 
> 	  % cd /sfs/@sfs.fs.net,uzwadtctbjb3dg596waiyru8cx5kb4an
> 	  % cat CONGRATULATIONS
> 	  You have set up a working SFS client.
> 	  %
> 
> 	Note that the `/sfs/@sfs.fs.net,...' directory does not need to
> 	exist before you run the `cd' command.  SFS transparently mounts
> 	new servers as you access them.
> 
> The part after the comma is a hash of the public key the server at
> sfs.fs.net must present, in order to be accepted.

I found sfscd program, but it's not a python program and it seems a bit
different from what I wanted to do. My object was to create a
private/public key pair, and to use an SSL library to load that file
automatically and use it as the public/private key. My point is that if
twisted supports the native ssh protocol from id_rsa* than it'll be a
joke to implement my public/private key in a file too.  I was just
trying to reuse whatever is available right now, be it
SSH/SSL/sshtunnel/whatever as transport for the encryption. So if you've
a suggestion of what encrypted transport to use that's welcome.

Thank you very much for the help!



From itamar at itamarst.org  Thu Oct  7 16:25:52 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 07 Oct 2004 18:25:52 -0400
Subject: [Twisted-Python] epoll and other questions
In-Reply-To: <20041007215334.GM29178@dualathlon.random>
References: <20041006192454.GA29178@dualathlon.random>
	<41644F53.3010008@twistedmatrix.com>
	<20041007215334.GM29178@dualathlon.random>
Message-ID: <1097187951.3978.36.camel@sheriffpony>

On Thu, 2004-10-07 at 17:53, Andrea Arcangeli wrote:

> good point. I'll use pollreactor for now. Apparently, I still have to
> use the normal "select" reactor for interfacing with pyqt, but that's ok
> since I don't (yet) need scalability on the client side...

Actually there's a QT reactor that uses QT's event loop (and by
extension whatever QT uses internally, be it select() or poll()).

>  I was just
> trying to reuse whatever is available right now, be it
> SSH/SSL/sshtunnel/whatever as transport for the encryption. So if you've
> a suggestion of what encrypted transport to use that's welcome.

The SSH code uses pycrypto. Twisted's SSL layer uses PyOpenSSL, but
PyOpenSSL doesn't expose the OpenSSL encryption APIs. There are Python
wrappers for a number of other crypto libraries as well.




From mary-twisted at puzzling.org  Fri Oct  8 05:57:31 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 8 Oct 2004 13:57:31 +0200
Subject: [Twisted-Python] More on docs
Message-ID: <20041008115731.GD4537@fuchsia.puzzling.org>

Sorry, I appreciate that I spend more time ranting about getting help
writing docs than I do writing, but... again.

Unfortunately the fastest way for me to write docs is to take rough
drafts by someone else and edit them into a helpful style with examples
and whatnot. Writing docs from scratch is fairly slow because I have to
spend a lot of time with the code, far more than the developers would have
to spend. And usually anything I say about design designs or high level
rationale will subsequently need to be corrected.

So, it would be fastest *for me* if developers wrote scratch drafts and
I edited them and improved the examples etc. Which is great, but also
unlikely to happen.

I figure something that is more likely to happen is that developers will
be explaining something to someone and accidently generate drafts as
they go. For example: mailing list posts, IRC logs and blog entries. So,
if you see or participate in a good "using something" discussion,
particularly on IRC, please send me a copy and I'll do my best to
edit/re-write it into a usable piece of documentation.

As my part of the bargain, it really is time I went back through the
archives and mined them for good posts.

Ta,

Mary



From mwh at python.net  Fri Oct  8 06:36:46 2004
From: mwh at python.net (Michael Hudson)
Date: Fri, 08 Oct 2004 13:36:46 +0100
Subject: [Twisted-Python] Re: Sending other things than strings in UDP
	packets
References: <20041006213855.GA31944@ref.nmedia.net>
	<60ed19d404100614531935658a@mail.gmail.com>
	<Pine.LNX.4.56.0410071445430.31297@klondike.cis.upenn.edu>
Message-ID: <2m4ql5idy9.fsf@starship.python.net>

Yun Mao <maoy at cis.upenn.edu> writes:

> There was a discussion on python mailing list on how to make pickle a
> little more secure:

As of 2.3, unpickle being secure is a non-goal.  Don't Unpickle
Untrusted Input.

Cheers,
mwh

-- 
  Please tell me I don't have to break out sarcasm tags. Please.
  Smartassed one-liners are a coping mechanism, and I really need 
  them this week.                               -- Charles Herbig, asr




From gumuz at looze.net  Fri Oct  8 07:39:56 2004
From: gumuz at looze.net (=?iso-8859-1?Q?Guyon_Mor=E9e?=)
Date: Fri, 8 Oct 2004 15:39:56 +0200
Subject: [Twisted-Python] xml-rpc, single-instance... how does that work
Message-ID: <00d601c4ad3c$759aaa90$6501a8c0@tradesoft.nl>

Hi all,

I am trying to get my head around some things here.

I have been looking at the twisted xml-rpc examples and I know you can get
concurrency through deferreds. I like that :)

The concept(which i dont get) is having a *single* instance of some class,
which is published through xml-rpc.

What happens when multiple 'users' try to do stuff like updating and
retrieving.

How does one do transactional processing? The way I see a user having a
transaction is having it's own instance of some (business)object. For
example:

# semi pseudo code :)
x = xmlserverobject()

transaction = x.SomeTransActionalBusinessObject()

# do stuff
transaction.init(blablabla)

# save the transaction if everything went correct to for example a database
transactiob.save()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

I hope it's clear what I am looking for.I dont see how you can do that
through xml-rpc, but I might be just stupid :P

I hope I missed something because the webservices/xmlrpc looks really
appealing.

regards,

Guyon Morée




From paul at ref.nmedia.net  Fri Oct  8 15:42:12 2004
From: paul at ref.nmedia.net (Paul Campbell)
Date: Fri, 8 Oct 2004 14:42:12 -0700
Subject: [Twisted-Python] Sending other things than strings in UDP packets
In-Reply-To: <E1CFcYg-0006v4-01@pyramid.twistedmatrix.com>
References: <E1CFcYg-0006v4-01@pyramid.twistedmatrix.com>
Message-ID: <20041008214212.GA13649@ref.nmedia.net>

> Message: 5
> Date: Thu, 7 Oct 2004 08:53:08 +1100
> From: Christopher Armstrong <radeex at gmail.com>
> Subject: Re: [Twisted-Python] Sending other things than strings in UDP
> 	packets
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Message-ID: <60ed19d404100614531935658a at mail.gmail.com>
> Content-Type: text/plain; charset=US-ASCII
> 
Christopher Armstrong <radeex at gmail.com> wrote:
> 
> Ergh. Please don't do anything _close_ to suggesting this. This is not
> the "python way", it is the "stupid, insecure,
> let-people-rm-rf-your-home-directory way".

You apparently read part of the message and then you failed to read the
next paragraph, right? At the risk of being redundant, let me reiterate:

"Read the documentation on the pickle module for more information. And be
forewarned: pickle will dump/load ANYTHING. For safety reasons, there's also
a 'safe_pickle' variant floating around."

I guess writing instructive and marginal (and probably nonworking) code for
helping out newbies is not what this mailing list is all about. I thought I
said "nonworking", "no error checking", and "lots of issues" enough times
to get the point across. Sorry, I'll "mail.compose.elitist_mode=true" next
time and give some flippant answer like "UDP sucks dude. Just use PB under
TCP."

At the risk of leaving you hanging with regards to whether such variants
actually exist, below are pointers to two that can be used off the shelf, and
possibly a third already contained within the twisted code base.

Here's one variant that includes the a "safe pickle" call:
http://zgp.org/pipermail/p2p-hackers/2004-August/002046.html

Incidentally, the protocol contains a lot of the extras that I mentioned
my stripped-down code was lacking (as well as a few small bugs). It also
handles long messages and retries as well within UDP. It has an interesting
"microprotocol" sort of structure (where each layer of the protocol builds
on the previous one). Read it in addition to the first couple functions
that handle pickling/unpickling.

Another "safe pickle" module is buried in the code for "thecircle"
(www.thecircle.org.au). Just download it and rip out the "safe_pickle.py"
module from circlelib. It is stand-alone, and designed for UDP transportation
(although not currently using Twisted).

I haven't dug really deep, but banana (part of PB) appears to be essentially
yet another incarnation of exactly the same idea. The code pattern looked
identical to the two pieces of code I just mentioned. In fact, I haven't
looked at it but I suspect that even pickle itself has the same pattern,
other than being more generalized (it will handle executables and instances,
while the safe variants will reject that).

The code for all of these modules has an identical structure. It takes
a structure and walks down it. It reads each piece and codes it in a
"Type+data" format. It rejects anything that it can't inherently decode
without aid (such as class instances). In those cases, at least the banana
variant does allow the possibility to kick it up to a higher level (via
Jelly) to handle user-level structures.

The "unpickle" code does exactly the same thing except in reverse, converting
the coded data back into a structure. There are standards (S-expressions or
XML) for the format itself but I haven't seen any truly compelling reasons to
follow those. They seem to add lots of overhead without any additional benefit.



From exarkun at divmod.com  Fri Oct  8 16:49:53 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 08 Oct 2004 22:49:53 GMT
Subject: [Twisted-Python] Sending other things than strings in UDP packets
In-Reply-To: <20041008214212.GA13649@ref.nmedia.net>
Message-ID: <20041008224953.19317.1786793936.divmod.quotient.331@ohm>

On Fri, 8 Oct 2004 14:42:12 -0700, Paul Campbell <paul at ref.nmedia.net> wrote:
>> Message: 5
> > Date: Thu, 7 Oct 2004 08:53:08 +1100
> > From: Christopher Armstrong <radeex at gmail.com>
> > Subject: Re: [Twisted-Python] Sending other things than strings in UDP
> > 	packets
> > To: Twisted general discussion <twisted-python at twistedmatrix.com>
> > Message-ID: <60ed19d404100614531935658a at mail.gmail.com>
> > Content-Type: text/plain; charset=US-ASCII
> > 
> Christopher Armstrong <radeex at gmail.com> wrote:
> > 
> > Ergh. Please don't do anything _close_ to suggesting this. This is not
> > the "python way", it is the "stupid, insecure,
> > let-people-rm-rf-your-home-directory way".
> 
> You apparently read part of the message and then you failed to read the
> next paragraph, right? At the risk of being redundant, let me reiterate:
> 
> "Read the documentation on the pickle module for more information. And be
> forewarned: pickle will dump/load ANYTHING. For safety reasons, there's also
> a 'safe_pickle' variant floating around."
> 
> I guess writing instructive and marginal (and probably nonworking) code for
> helping out newbies is not what this mailing list is all about. I thought I
> said "nonworking", "no error checking", and "lots of issues" enough times
> to get the point across. Sorry, I'll "mail.compose.elitist_mode=true" next
> time and give some flippant answer like "UDP sucks dude. Just use PB under
> TCP."

  I'm sure a great many people would appreciate it if you didn't (and I hope you take no insult if I go so far as to point out that if I were to judge solely on the content of this email, I would say you have already enabled this mode.  I'm sure it is just a fluek, though).

> At the risk of leaving you hanging with regards to whether such variants
> actually exist, below are pointers to two that can be used off the shelf, and
> possibly a third already contained within the twisted code base.
> 
> Here's one variant that includes the a "safe pickle" call:
> http://zgp.org/pipermail/p2p-hackers/2004-August/002046.html
> 

  I think there is a simple misunderstanding here.  A great many people assume that "pickle" applies to one of the two stdlib modules, "pickle" or "cPickle".  You seem to be using it to refer to any arbitrary or semi-arbitrary serialization module.

  Both usages certainly have their place, but when people confuse them, problems can often ensue!

> Incidentally, the protocol contains a lot of the extras that I mentioned
> my stripped-down code was lacking (as well as a few small bugs). It also
> handles long messages and retries as well within UDP. It has an interesting
> "microprotocol" sort of structure (where each layer of the protocol builds
> on the previous one). Read it in addition to the first couple functions
> that handle pickling/unpickling.

  I'll take your word on this, as it does not seem central to the particular issue now at hand.

> 
> Another "safe pickle" module is buried in the code for "thecircle"
> (www.thecircle.org.au). Just download it and rip out the "safe_pickle.py"
> module from circlelib. It is stand-alone, and designed for UDP transportation
> (although not currently using Twisted).

  Again, a likely source of confusion.  thecircle's "safe_pickle.py" module is not actually related to pickle at all, beyond the fact that both it and pickle are used for serializing objects.  I won't hold this against you, though :)  thecircle's authors should be ashamed for their lack of creativity in module naming!

> 
> I haven't dug really deep, but banana (part of PB) appears to be essentially
> yet another incarnation of exactly the same idea. The code pattern looked
> identical to the two pieces of code I just mentioned. In fact, I haven't
> looked at it but I suspect that even pickle itself has the same pattern,
> other than being more generalized (it will handle executables and instances,
> while the safe variants will reject that).

  Banana is closer to the marshal module than the pickle module.  Take Jelly and Banana together though, and you have something that is quite similar.  Jelly + Banana together is _not_ pickle, though, it just does something similar.  Why does this matter?  Well...

> 
> The code for all of these modules has an identical structure. It takes
> a structure and walks down it. It reads each piece and codes it in a
> "Type+data" format. It rejects anything that it can't inherently decode
> without aid (such as class instances). In those cases, at least the banana
> variant does allow the possibility to kick it up to a higher level (via
> Jelly) to handle user-level structures.

  No, it does not have an identical structure.  It is similar, no doubt, but there are many differences worth noting.  Jelly and Banana, for example, have _no_ mechanism which will allow an arbitrary function to be specified for execution by the _serializer_ in the _deserializer's_ environment.  Pickle does.  This is just one of many important differences.

> 
> The "unpickle" code does exactly the same thing except in reverse, converting
> the coded data back into a structure. There are standards (S-expressions or
> XML) for the format itself but I haven't seen any truly compelling reasons to
> follow those. They seem to add lots of overhead without any additional benefit.
> 

  Without going into the advantages and disadvantages of XML and S-expressions, let me just point out this:

  Whether you use the pickle format, or any other format (like xml or s-expressions), is mostly irrelevant to the main concern raised in this thread: security.  Pickle was not written to be secure.  It is not maintained with security in mind.  It has some features which take it some distance towards the goal of being secure, but how close they get it is hard to say.  Personally, I would not use any serialization tool as complex as pickle in a security sensitive environment without first having it audited by some very smart people.  The CPython developers have flat out stated that they are not focused on making it secure.  That's fine.  I'm not going to demand they make it completely bulletproof.  I'll happily continue using it _far away from untrusted data sources_ and use an alternative, such as Jelly + Banana, for the cases where I need to communicate with untrusted parties.

  I recommend everyone else do the same.

  Jp



From itamar at itamarst.org  Sat Oct  9 14:25:10 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 09 Oct 2004 16:25:10 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r11937 - untested beginnings
	of distutils hacks for zpkgtools. also move packages to dist
In-Reply-To: <E1CG5z1-0003lQ-00@wolfwood>
References: <E1CG5z1-0003lQ-00@wolfwood>
Message-ID: <1097353510.8301.3.camel@sheriffpony>

<3




From mcfletch at rogers.com  Sat Oct  9 15:19:23 2004
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Sat, 09 Oct 2004 17:19:23 -0400
Subject: [Twisted-Python] More on docs
In-Reply-To: <20041008115731.GD4537@fuchsia.puzzling.org>
References: <20041008115731.GD4537@fuchsia.puzzling.org>
Message-ID: <416855DB.8080805@rogers.com>

Mary Gardiner wrote:
...

>I figure something that is more likely to happen is that developers will
>be explaining something to someone and accidently generate drafts as
>they go. For example: mailing list posts, IRC logs and blog entries. So,
>if you see or participate in a good "using something" discussion,
>particularly on IRC, please send me a copy and I'll do my best to
>edit/re-write it into a usable piece of documentation.
>  
>
http://blog.vrplumber.com/356
http://blog.vrplumber.com/358
http://blog.vrplumber.com/371
http://blog.vrplumber.com/349
http://blog.vrplumber.com/310
http://www.vrplumber.com/programming/twistedlowlevel05.pdf

Covering, respectively:
    Creating an SSL-protected web-server with Twisted
    Adding user authentication to your web-site via twisted.cred/nevow.guard
    Converting user authentication from "in-memory" checker to 
PostgreSQL-based checker
    Creating a twisted.manhole Python telnet prompt (minimal example)
    How to download an SSL-encrypted web-page (minimal example)
    Talk on low-level mechanisms in Twisted, with background on other 
common methods of parallelisation

HTH,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From sebastien.kirche.no at spam.free.fr.invalid  Sun Oct 10 15:55:00 2004
From: sebastien.kirche.no at spam.free.fr.invalid (Sebastien Kirche)
Date: Sun, 10 Oct 2004 23:55:00 +0200
Subject: [Twisted-Python] UDP and multiple access
Message-ID: <85sm8mfdcb.fsf@obelix.seki.fr>

Hi,

I am  working on a  little project  to list the  servers of the  online game
«Enemy Territory» and also to list/find a known player. I try to use twisted
to simplify the network access.
I am new both to twisted and python, but as i am also a programmer, learning
is quite easy.

The task consists in 2 times:
1) one UDP request to the  master server at idsoftware that returns the list
   of the active (slaves) servers (currently around 2020 hosts)
2) one UDP  request to *each* slave server  to obtain characteristics (name,
   map that is played, ...) and the list of the players

For the time i  managed to perform the task 1) and i  can obtain the list of
the hosts:ports to ask for.

If someone would like to peek an eye on my code, i uploaded it [1].

My problem is now to send around 2000+ non blocking requests and to take the
answers as they come back.

Data  treatment should  not be  a problem,  but i  don't really  see  how to
perform the mass request.

I  don't understand  clearly  the twisted  terminology (protocols,  factory,
...). I  have seen  in another  script [2] a  case where  there is  just one
datagramReceived that checks on the host:port of the datagram to distinguish
the answers, but that is kind of a library, and it only shows 2 requests for
a test. I have no idea for the mass request.

Would someone be  kind to guide me a  little about it ? For  example by just
giving me a snippet for a multiple UDP request with the hosts are in a list,
and if the datagramReceived will suit the response treatment.

I hope to be clear enough. TIA.

Footnotes: 
[1] http://sebastien.kirche.free.fr/python_stuff/master_query.py
    (comments welcome)

[2] http://sebastien.kirche.free.fr/python_stuff/twist_p2p.py (initially
    published in the twisted mailing-list)

Sébastien Kirche




From p.mayers at imperial.ac.uk  Sun Oct 10 18:48:13 2004
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 11 Oct 2004 01:48:13 +0100
Subject: [Twisted-Python] UDP and multiple access
In-Reply-To: <85sm8mfdcb.fsf@obelix.seki.fr>
References: <85sm8mfdcb.fsf@obelix.seki.fr>
Message-ID: <4169D84D.90007@imperial.ac.uk>

Sebastien Kirche wrote:

> Hi,
> 
> I am  working on a  little project  to list the  servers of the  online game
> «Enemy Territory» and also to list/find a known player. I try to use twisted
> to simplify the network access.
> I am new both to twisted and python, but as i am also a programmer, learning
> is quite easy.
> 
> The task consists in 2 times:
> 1) one UDP request to the  master server at idsoftware that returns the list
>    of the active (slaves) servers (currently around 2020 hosts)
> 2) one UDP  request to *each* slave server  to obtain characteristics (name,
>    map that is played, ...) and the list of the players
> 
> For the time i  managed to perform the task 1) and i  can obtain the list of
> the hosts:ports to ask for.
> 
> If someone would like to peek an eye on my code, i uploaded it [1].
> 
> My problem is now to send around 2000+ non blocking requests and to take the
> answers as they come back.
> 
> Data  treatment should  not be  a problem,  but i  don't really  see  how to
> perform the mass request.
> 
> I  don't understand  clearly  the twisted  terminology (protocols,  factory,
> ...). I  have seen  in another  script [2] a  case where  there is  just one
> datagramReceived that checks on the host:port of the datagram to distinguish
> the answers, but that is kind of a library, and it only shows 2 requests for
> a test. I have no idea for the mass request.
> 
> Would someone be  kind to guide me a  little about it ? For  example by just
> giving me a snippet for a multiple UDP request with the hosts are in a list,
> and if the datagramReceived will suit the response treatment.
> 
> I hope to be clear enough. TIA.
> 

Ah ha. This is extremely similar to what I've been doing recently (SNMP, 
with many many agents, lots of concurrent UDP clients). Here's the setup 
I used (warning: comes with no guarantee, may end your marriage, etc. - 
specifically, read the warning at the bottom).

This is very, very pseudo-code - my actual code has a lot of very 
confusing non-relevant stuff in it. It uses a queue to buffer the 
receive events and ensure the UDP socket queue is emptied asap (the 
queue function exits quickly, but reschdules itself a short time in the 
future; this short time is enough to let select() run and the data be 
received - see the recent thread on the mailing list about "scalability 
with hundreds of clients" and callLater(0, ...) not doing what you might 
think). That same queue is used to start off the clients' first xmit, 
meaning they'll be relatively well interspersed and you won't overload 
the socket *output* buffer either.

class Protocol(protocol.DatagramProtocol):
     def __init__(self):
         self._queue = []
         self.timeouts = []
         from twisted.internet import reactor
         self.reactor = reactor
         reactor.callLater(1, self.dotimeouts)
     def dotimeouts(self):
         now = time.time()
         while self.timeouts:
             due, deferred = self.timeouts[0]
             if due > now:
                 break
             due, deferred = self.timeouts.pop(0)
             # Might have been called, don't timeout if so
             if not deferred.called:
                 deferred.errback(Timeout())
     def queue(self, callable, pargs=tuple(), kwargs=dict()):
         if not self.calls:
             # Then we won't have schedules an dequeue either
             # WARNING: this number is important...
             self.reactor.callLater(0.001, self.dequeue)
         self._queue.append((callable, pargs, kwargs))
     def dequeue(self):
         if not self.calls:
             # Shouldn't happen
             return
         callable, pargs, kwargs = self._queue.pop(0)
         callable(*pargs, **kwargs)
         if self.calls:
             # If we've more to dequeue, do so
             # WARNING: this number is also important...
             self.reactor.callLater(0.001, self.dequeue)
     def datagramReceived(self, data, addr):
         # Do stuff, then...
         pdu = self.parse(data)
         deferred = self.get_outstanding(pdu, addr)
         self.queue(deferred.callback, pdu)
     def query(self, host, op, args):
         # Do stuff, then
         pdu = self.encode(op, args)
         self.transport.write(pdu.bytes(), host)
         return self.set_outstanding(pdu, host)

class Client:
     def __init__(self, host, protocol):
         self.protocol = protocol
         self.host = host
         self.protocol.queue(self.step1)
     def step1(self):
         deferred = self.protocol.query(self.host, 'op', 'args')
         deferred.addCallbacks(self.step2, self.fail)
     def step2(self, pdu):
         for thing, value in pdu.items():
             # blah, blah
             pass
         deferred = self.protocol.query(self.host, 'op2', None)
         deferred.addCallbacks(self.step3, self.fail)


if __name__=='__main__':
     import sys
     from twisted.internet import reactor

     proto = Protocol()
     reactor.listenUDP(0, proto)
     for hostname in sys.argv[1:]
         if ':' in hostname:
             hostname, port = hostname.split(':')
         else:
             port = defaultport
         client = Client((hostname, port), proto)
     reactor.run()

Now, I make no claims this is the perfect Twisted app - it ain't. What 
it *does* show is the only way I've found (which may be entirely my lack 
of ability) to scalably send multiple hundreds of UDP PDUs without:

a) Starving the Twisted mainloop of CPU, meaning select() doesn't get 
run often enough, and the UDP socket buffer overflows, dropping replies 
and necessitating retransmits
b) Using a lot of sockets, which runs into problems with select() and 
poll() as well as the system fd limit (solveable with ulimit I'll grant)
c) Starving the clients that are slow responders of "cpu" (queue) time

The warning however: UDP, lacking flow control, is very easy to get 
wrong and accidentally DDoS the clients you're trying to talk to. 
Specifically the value in the reactor.callLater(0.001, ...) determines 
how often a "task" will be dequeued from the protocol, and therefore how 
many PDUs you'll send and receive events you'll process per second. Best 
to start with a) a small number of servers and b) a larger value (lower 
rate) for that.

You should also probably implement some form of variable per-host 
timeout to get some kind of rate control/

However, I've had a great deal of difficultly making these points 
understood to other coders, for which I've got two explanations; I'm 
totally wrong, or it's a very subtle issue. Guess which I think it is :o)



From stefan at x-cellent.com  Mon Oct 11 01:46:11 2004
From: stefan at x-cellent.com (Stefan Majer)
Date: Mon, 11 Oct 2004 09:46:11 +0200
Subject: [Twisted-Python] Message Queue
Message-ID: <1097480771.10904.35.camel@manaslu.client.x-cellent.com>

Hi,

We are in the design phase for a new project. We want to write a new
kind of a network monitoring applikation. This application is designed
to spread over several monitoring agents across the network.
Therefore we want to do the following:

1. a central scheduler puts new measurement actions into a queue
2. all executors are subscribed to this queue an execute the specified
actions and report all back to a central repository.

We are all relatively new to python (most of us have java background)
and we are searching for a good framework to help us to get the job
done.
Is it possible to use twisted to achieve the above. Or has twisted
another idea how to distribute jobs to other machines ?

with kind regards

-- 
Stefan Majer

x-cellent technologies GmbH
Rosenkavalierplatz 5
81925 Muenchen
fon +49 (0)89 929 274 - 245
fax +49 (0)89 929 274 - 250
e-mail stefan at x-cellent.com
http://www.x-cellent.com




From thomas.weholt at gmail.com  Mon Oct 11 03:43:45 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Mon, 11 Oct 2004 11:43:45 +0200
Subject: [Twisted-Python] Message Queue
In-Reply-To: <1097480771.10904.35.camel@manaslu.client.x-cellent.com>
References: <1097480771.10904.35.camel@manaslu.client.x-cellent.com>
Message-ID: <ffb7b7f8041011024364a6f05b@mail.gmail.com>

On Mon, 11 Oct 2004 09:46:11 +0200, Stefan Majer <stefan at x-cellent.com> wrote:
> Hi,
> 
> We are in the design phase for a new project. We want to write a new
> kind of a network monitoring applikation. This application is designed
> to spread over several monitoring agents across the network.
> Therefore we want to do the following:
> 
> 1. a central scheduler puts new measurement actions into a queue
> 2. all executors are subscribed to this queue an execute the specified
> actions and report all back to a central repository.
> 
> We are all relatively new to python (most of us have java background)
> and we are searching for a good framework to help us to get the job
> done.
> Is it possible to use twisted to achieve the above. Or has twisted
> another idea how to distribute jobs to other machines ?
> 
> with kind regards
> 
> --
> Stefan Majer
> 
> x-cellent technologies GmbH
> Rosenkavalierplatz 5
> 81925 Muenchen
> fon +49 (0)89 929 274 - 245
> fax +49 (0)89 929 274 - 250
> e-mail stefan at x-cellent.com
> http://www.x-cellent.com
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


Please post any information about this to the list or to
2002 at weholt.org. Working on a similar project, at least in concept.

-- 
Mvh/Best regards,
Thomas Weholt
http://www.weholt.org



From symbiont at berlios.de  Mon Oct 11 04:02:38 2004
From: symbiont at berlios.de (Jeff Pitman)
Date: Mon, 11 Oct 2004 18:02:38 +0800
Subject: [Twisted-Python] Message Queue
Message-ID: <200410111802.38711.symbiont@berlios.de>

On Monday 11 October 2004 15:46, Stefan Majer wrote:
> Is it possible to use twisted to achieve the above. Or has twisted
> another idea how to distribute jobs to other machines ?

Brian Warner's buildbot: http://buildbot.sourceforge.net/, can help
stoke the fire of ideas.  Maybe it won't map 1:1 to what you need, but
it's got some good concepts.

take care,
--
-jeff



From sebastien.kirche.no at spam.free.fr.invalid  Mon Oct 11 05:34:02 2004
From: sebastien.kirche.no at spam.free.fr.invalid (Sebastien Kirche)
Date: Mon, 11 Oct 2004 13:34:02 +0200
Subject: [Twisted-Python] Re: UDP and multiple access
References: <85sm8mfdcb.fsf@obelix.seki.fr> <4169D84D.90007@imperial.ac.uk>
Message-ID: <m2vfdhtro5.fsf@seki.fr>

Le 11 Oct 2004, Phil Mayers s'est exprimé ainsi :

> 
> Ah ha. This is extremely similar to what I've been doing recently
> (SNMP, with many many agents, lots of concurrent UDP clients). Here's
> the setup I used (warning: comes with no guarantee, may end your
> marriage, etc. - 
> specifically, read the warning at the bottom).
> 
> 
> [ snip code and disclaimer ]

Many many thanks for that code, despite of what you may think of it : I have 
now some code to study and a direction to look for.

Formerly i did not know where to go.

I'll  look  at it  carefully  and  will make  some  experiment.  If can  get
something working, i'll notify it there.

Or if i have some more precise question too.

Regards,
Sébastien Kirche




From zanesdad at bellsouth.net  Mon Oct 11 06:04:40 2004
From: zanesdad at bellsouth.net (Jeremy Jones)
Date: Mon, 11 Oct 2004 08:04:40 -0400
Subject: [Twisted-Python] Message Queue
In-Reply-To: <1097480771.10904.35.camel@manaslu.client.x-cellent.com>
References: <1097480771.10904.35.camel@manaslu.client.x-cellent.com>
Message-ID: <416A76D8.9050804@bellsouth.net>

Stefan Majer wrote:

>Hi,
>
>We are in the design phase for a new project. We want to write a new
>kind of a network monitoring applikation. This application is designed
>to spread over several monitoring agents across the network.
>Therefore we want to do the following:
>
>1. a central scheduler puts new measurement actions into a queue
>2. all executors are subscribed to this queue an execute the specified
>actions and report all back to a central repository.
>
>We are all relatively new to python (most of us have java background)
>and we are searching for a good framework to help us to get the job
>done.
>Is it possible to use twisted to achieve the above. Or has twisted
>another idea how to distribute jobs to other machines ?
>
>with kind regards
>
>  
>
<shameless_plug>
You may want to check out Munkware:
http://munkware.sourceforge.net/

Currently, the only queue paradigm that is supported is PTP.  I'm 
thinking of supporting Pub/Sub later, which it seems will be more 
beneficial to you than PTP.  I'm currently working on a new release to 
make XMLRPC the protocol that messages are sent over, so if you're 
interested in taking a peek at a functional networking queue, you could 
snag it from CVS rather than from the Sourceforge download page.

I don't have it working in Twisted....yet.  That's on my agenda as 
well.  Once I get it working and stable with the builtin XMLRPCServer in 
the standard Python library, I'll work on getting it running in Twisted.

If you have any questions about it, please feel free to email me.
</shameless_plug>


Jeremy Jones



From foom at fuhm.net  Mon Oct 11 12:05:49 2004
From: foom at fuhm.net (James Y Knight)
Date: Mon, 11 Oct 2004 14:05:49 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <2E93D5D7-1BB0-11D9-AAA6-000A95A50FB2@fuhm.net>

A little late this week, sorry. ;)

Bug summary
______________________
Since 2004-10-03 20:16:57.250000:
   Bugs opened: 11   Bugs closed: 2   Total open bugs: 311 (+9)

New / Reopened Bugs
______________________
[CORE] writeSequence totally broken  (1/4 hour ago)
        http://www.twistedmatrix.com/bugs/issue745 opened by jknight

SMTP Client upgrade and bug fixes  (7 days ago)
        http://www.twistedmatrix.com/bugs/issue735 opened by bkirsch

imap.py LOGINAuthenticator missing functionality  (7 days ago)
CLOSED http://www.twistedmatrix.com/bugs/issue736 opened by bkirsch

[DOCUMENTATION, CORE] Add "why zope interfaces?" FAQ  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue744 opened by hypatia

[CORE] t.p.usage uses passed arguments rather than real defaults when 
displaying help  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue743 opened by itamarst

twistd --version failed on windows? I'm using 1.3.0  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue742 opened by maoy

Twisted logging howto  (4 days ago)
        http://www.twistedmatrix.com/bugs/issue741 opened by exarkun

twisted.cred.portal.IRealm docstring for parameters  (5 days ago)
        http://www.twistedmatrix.com/bugs/issue740 opened by thomasvs

roundup should send .patch files as text/plain  (6 days ago)
        http://www.twistedmatrix.com/bugs/issue738 opened by jknight

Minor code cleanups  (6 days ago)
        http://www.twistedmatrix.com/bugs/issue737 opened by HelmutG

Type enforcement for twisted.python.usage  (5 days ago)
        http://www.twistedmatrix.com/bugs/issue739 opened by itamarst

Bugs Closed
______________________
imap.py LOGINAuthenticator missing functionality  (7 days ago)
        http://www.twistedmatrix.com/bugs/issue736 opened by bkirsch

twisted/xish/domish.py bug breaks jabber protocol implementation  (1 
week ago)
        http://www.twistedmatrix.com/bugs/issue734 opened by doko




From general at eepatents.com  Mon Oct 11 12:34:34 2004
From: general at eepatents.com (Ed Suominen)
Date: Mon, 11 Oct 2004 11:34:34 -0700
Subject: [Twisted-Python] Twisted in Python STDLIB?
Message-ID: <200410111134.34759.general@eepatents.com>

I'd like to start a discussion on whether Twisted ought to be a part of 
Python's standard library. I understand some of the developers think it 
should not, but I personally don't like seeing far inferior networking 
code sitting there in stdlib. Inclusion in the stdlib carries an 
implied endorsement, and that endorsement should be going to Twisted, 
in my view.

Has Guido et al. ever expressed any viewpoint on Twisted? It is 
certainly very Pythonic, and though I have only limited Python and OOP 
experience to express this viewpoint, it is the best-written Python 
code I've ever seen. (Now, if only I could say the same for the 
commenting...)

Ed Suominen
Registered Patent Agent
Open-Source Software Author (yes, both...)
Web Site: http://www.eepatents.com



From LAFORGE49 at peoplepc.com  Mon Oct 11 13:07:18 2004
From: LAFORGE49 at peoplepc.com (William la Forge Jr)
Date: Mon, 11 Oct 2004 15:07:18 -0400
Subject: [Twisted-Python] The Anything Box
Message-ID: <NPEFJHLAHPGFKBEPBJJNCEKKCAAA.LAFORGE49@peoplepc.com>

A quick update on my twisted project:

This is a new kind of database. You can put anything into it, and make any
kind of query to access its contents. And you can view current state, past
state, and changes over time. This project builds on BSDDB and is fully
integrated with Twisted.

Thankyou,
Bill la Forge





From exarkun at divmod.com  Mon Oct 11 13:31:16 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Mon, 11 Oct 2004 19:31:16 GMT
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <200410111134.34759.general@eepatents.com>
Message-ID: <20041011193116.19317.600650232.divmod.quotient.1200@ohm>

On Mon, 11 Oct 2004 11:34:34 -0700, Ed Suominen <general at eepatents.com> wrote:
>I'd like to start a discussion on whether Twisted ought to be a part of 
> Python's standard library. I understand some of the developers think it 
> should not, but I personally don't like seeing far inferior networking 
> code sitting there in stdlib. Inclusion in the stdlib carries an 
> implied endorsement, and that endorsement should be going to Twisted, 
> in my view.
> 
> Has Guido et al. ever expressed any viewpoint on Twisted? It is 
> certainly very Pythonic, and though I have only limited Python and OOP 
> experience to express this viewpoint, it is the best-written Python 
> code I've ever seen. (Now, if only I could say the same for the 
> commenting...)

  Guido (and others, I think) have expressed dislike for framework-structured modules in the Python standard library.  Since the majority of Twisted falls into this category, this is a point on which Guido would probably require some convincing.

  Aside from this, inclusion in the standard library imposes even stricter backwards compatibility requirements (rightly so).  Twisted is changing less rapidly than it was at one point, but it is still making backwards incompatible changes and deprecating a lot of old APIs.  There are very fundamental parts of Twisted that just aren't ready to be called stable and set in stone.

  Additionally, the relatively slow Python release process (one major release every 12 - 18 months) would be deadly to Twisted at the current time.  Independent releases could still be undertaken, but I would dread this scenario - look at the email package and how many mistakes are made because software assumes a particular version will be installed.

  So, uh, yea.  I'd love to see a mature, stable Twisted (or more likely Twisted subset) in the standard library.  I think a few parts of Twisted are even almost ready for this to be considered, but aside from some of the things in twisted/python/, much of it still requires work.

  Jp



From LAFORGE49 at peoplepc.com  Mon Oct 11 13:40:43 2004
From: LAFORGE49 at peoplepc.com (William la Forge Jr)
Date: Mon, 11 Oct 2004 15:40:43 -0400
Subject: [Twisted-Python] The Anything Box
Message-ID: <NPEFJHLAHPGFKBEPBJJNOEKKCAAA.LAFORGE49@peoplepc.com>

Woops! I forgot to mention the URL:

http://compstrm.sourceforge.net

Also, here's a snippet from that page describing the project
a little better:

The Anything Box

This is a new kind of database. You can put anything into it, and make any
kind of query to access its contents. It works with structures and complexes
of structures using very scalable technology. And you can view current
state, past state, and changes over time. It is an extensible system that
begins with a rich set of metadata for describing data and operations, with
operations and data properties grouped into capabilities, which in turn are
used to construct data types.

The database is implemented over BSDDB, a transactional store that is also
used by MySQL, using 14 b-tree files to support a wide range of queries. The
basic storage element is (time, fileid, propertyid, oldValue, newValue), but
with additional support for document storage. The property/value pairs
assigned to a file for a given time are then computed based on a
reverse-chronological extraction process.

This Anything Box is fully integrated with Twisted, a fast asynchronous
server that supports both a web server and a very wide range of additional
protocols. The Anything Box itself is implemented using coroutines, making
the code more readable/maintainable than most asynchronous styles. It is
this coroutine technology, implemented as a computational stream, that the
CompStrm project name came from.

User Process Management

All user processes are coroutines, implemented for fast response rather than
throughput. Process management is handled through flow control, with
processes automatically terminated when no more output is desired. Any
process can interact with its user; loosely coupled (background) processes
will be implemented to pend when user input is requested.

Persistent Garbage Collection

Without some form of garbage collection, applications become much more
complex--especially when dealing with complex structures. Unfortunately,
garbage collection normally applies only to in-memory (non-persistent)
structures. The Anything Box implements persistent garbage collection by
using two different kinds of organization. First, data is organized into
directories based on data type, each directory having an associated
descriptor defining the type and its capabilities. Some data types are then
identified as well-known (protected) and are not subject to garbage
collection.

A second organization is by groups. Data elements with the member capability
are always tagged with the id of the id of the lead data element for their
group. References to a data element (from another element) are identified as
either weak or strong (non-weak). And when a strong reference to a data
element from another in the same group is destroyed, then the previously
referenced data element is a potential candidate for automatic garbage
collection--as all members of a group must be strongly referenced by another
element in the same group. (This of course places a design constraint on
applications, that weak references be used to avoid any strong cyclic
references.)

The TKI Shell

While the base-level operations are implemented in Python coroutines, the
Anything Box includes the TKI shell. TKI commands are operations defined by
the Anything Box, which in turn may be implemented as either Python
coroutines or TKI scripts. The shell itself is quite simple, supporting
argument passing to scripts, the assignment of property values to script
variables, and environment variables for navigating space and time and for
generating unique names. The richness of the TKI shell comes from the
numerous operations defined by the Anything Box, which includes support for
set values, lists and dictionaries, and for invoking (mapping) an operation
over the contents of a set, list or dictionary.





From glyph at divmod.com  Mon Oct 11 13:51:11 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 11 Oct 2004 15:51:11 -0400
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <20041011193116.19317.600650232.divmod.quotient.1200@ohm>
References: <20041011193116.19317.600650232.divmod.quotient.1200@ohm>
Message-ID: <1097524270.31837.8.camel@kazekage>

On Mon, 2004-10-11 at 15:31, exarkun at divmod.com wrote:

>   So, uh, yea.  I'd love to see a mature, stable Twisted (or more
> likely Twisted subset) in the standard library.  I think a few parts
> of Twisted are even almost ready for this to be considered, but aside
> from some of the things in twisted/python/, much of it still requires
> work.

I had almost finished composing an identical email when this one
arrived.  So, I'll play devil's advocate:

I think that part of the question Ed is asking is, "when can we have
some of Twisted in the stdlib rather than asyncore".  Considering how
ancient and creaky asyncore is looking right now, I think it might be
valid to consider some small subset of Twisted that subsumes asyncore's
functionality for inclusion in the standard library.

Of course this should be post-split.  I don't think it makes much sense
to try to do something like this now.

Were this to happen, I would suggest it be in a different module name,
"twistedcore" or something, to allow a stable interface to remain in the
standard library, which would have a hope of being easily
plug-compatible with future Twisted versions, but would not hamstring
the ability of the Twisted team to put out new versions.

This might also assuage Guido's concerns about framework-structured
code; we could elide utilities such as twistd, and instead provide
convenience functions for users to write their own daemonization, et.
al.  This would at least provide a minimal platform for running
Twisted-compatible event handlers, to even out the curve between
"install Twisted as a dependency" and "just run this stand-alone
script".




From tv at twistedmatrix.com  Mon Oct 11 13:54:13 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 11 Oct 2004 22:54:13 +0300
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <200410111134.34759.general@eepatents.com>
References: <200410111134.34759.general@eepatents.com>
Message-ID: <416AE4E5.8050902@twistedmatrix.com>

Ed Suominen wrote:
> I'd like to start a discussion on whether Twisted ought to be a part of 
> Python's standard library. I understand some of the developers think it 
> should not, but I personally don't like seeing far inferior networking 
> code sitting there in stdlib. Inclusion in the stdlib carries an 
> implied endorsement, and that endorsement should be going to Twisted, 
> in my view.

Exarkun pointed out some really good reasons why Twisted should not be
in stdlib. I pretty much agree with him.

However, there is something that could be done to stdlib:

refactor the various networking things there so, that they are built
out of modules that only implement protocol logic, and blocking
"runners" for the protocol logic.

That is, separate the socket calls from the protocol. The interface
between them would probably look a lot like a twisted Protocol, and
hopefully would enable code reuse (in either direction).



From exarkun at divmod.com  Mon Oct 11 17:48:27 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Mon, 11 Oct 2004 23:48:27 GMT
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <416AE4E5.8050902@twistedmatrix.com>
Message-ID: <20041011234827.19317.1098538043.divmod.quotient.1288@ohm>

On Mon, 11 Oct 2004 22:54:13 +0300, Tommi Virtanen <tv at twistedmatrix.com> wrote:
>Ed Suominen wrote:
> > I'd like to start a discussion on whether Twisted ought to be a part of 
> > Python's standard library. I understand some of the developers think it 
> > should not, but I personally don't like seeing far inferior networking 
> > code sitting there in stdlib. Inclusion in the stdlib carries an 
> > implied endorsement, and that endorsement should be going to Twisted, 
> > in my view.
> 
> Exarkun pointed out some really good reasons why Twisted should not be
> in stdlib. I pretty much agree with him.
> 
> However, there is something that could be done to stdlib:
> 
> refactor the various networking things there so, that they are built
> out of modules that only implement protocol logic, and blocking
> "runners" for the protocol logic.
> 
> That is, separate the socket calls from the protocol. The interface
> between them would probably look a lot like a twisted Protocol, and
> hopefully would enable code reuse (in either direction).
> 

  I've always operated under the assumption that this is already almost trivally possible.  Let me explore this for a moment...

    class CrummyTCPTransport:
        disconnecting = False  # HAHAHA
        def __init__(self, socket, protocol):
            self.socket = socket
            self.protocol = protocol

        # Skip boring stuff like getHost etc
        def write(self, bytes):
            self.socket.sendall(bytes)

        def writeSequence(self, iovec):
            self.write("".join(iovec))

        def run(self):
            while True:
                b = self.socket.recv(1024)
                if not b:
                    break
                self.protocol.dataReceived(b)

    s = socket.socket()
    s.connect(...)
    p = imap4.IMAP4Client()
    t = CrummyTCPTransport(s, p)
    p.makeConnection(t)
    t.run()

  Reasonable?  Crappy?  Anyway, that's how I've always seen a simplistic, reactorless program using Twisted protocols.  It's ugly, but I think it should work (and compare it to trying to make a stdlib protocol implementation work with Twisted!)

  Which of Twisted's protocol implementations are mature enough for the standard library though?  I can think of one, maybe (not counting all the  useless ones like ident), and I wrote it so I'm probably biased.

  Jp



From exarkun at divmod.com  Mon Oct 11 17:55:39 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Mon, 11 Oct 2004 23:55:39 GMT
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <1097524270.31837.8.camel@kazekage>
Message-ID: <20041011235539.19317.2108823534.divmod.quotient.1291@ohm>

On Mon, 11 Oct 2004 15:51:11 -0400, Glyph Lefkowitz <glyph at divmod.com> wrote:
>On Mon, 2004-10-11 at 15:31, exarkun at divmod.com wrote:
> 
> >   So, uh, yea.  I'd love to see a mature, stable Twisted (or more
> > likely Twisted subset) in the standard library.  I think a few parts
> > of Twisted are even almost ready for this to be considered, but aside
> > from some of the things in twisted/python/, much of it still requires
> > work.
> 
> I had almost finished composing an identical email when this one
> arrived.  So, I'll play devil's advocate:
> 
> I think that part of the question Ed is asking is, "when can we have
> some of Twisted in the stdlib rather than asyncore".  Considering how
> ancient and creaky asyncore is looking right now, I think it might be
> valid to consider some small subset of Twisted that subsumes asyncore's
> functionality for inclusion in the standard library.
> 
> Of course this should be post-split.  I don't think it makes much sense
> to try to do something like this now.

  Definitely.

> 
> Were this to happen, I would suggest it be in a different module name,
> "twistedcore" or something, to allow a stable interface to remain in the
> standard library, which would have a hope of being easily
> plug-compatible with future Twisted versions, but would not hamstring
> the ability of the Twisted team to put out new versions.

  Obviously the package should be named "internet" :)

> 
> This might also assuage Guido's concerns about framework-structured
> code; we could elide utilities such as twistd, and instead provide
> convenience functions for users to write their own daemonization, et.
> al.  This would at least provide a minimal platform for running
> Twisted-compatible event handlers, to even out the curve between
> "install Twisted as a dependency" and "just run this stand-alone
> script".
> 

  So what would actually need to be fixed for this to happen?

    1) Readable abstract reactor implementation

    2) Producer/Consumer API repair

    3) Non-recursive Deferred implementation (or "internet" could be Deferred-less, but that would seem to suck)

    4) Less terrifying Failure implementation (or, again, Failure-less in the stdlib)

    5) Better test coverage (for example, more than one unit test for
       writeSequence)

    6) Latexified documentation (probably automatable)

    7) Something with Interfaces

  Anything else?

  Jp



From serj_trejo at hotmail.com  Mon Oct 11 20:36:11 2004
From: serj_trejo at hotmail.com (Sergio Trejo)
Date: Mon, 11 Oct 2004 22:36:11 -0400
Subject: [Twisted-Python] Twisted in Python STDLIB?
Message-ID: <BAY12-F7lT2NqFJ3sl30003ef0f@hotmail.com>

Interesting idea, especially when event-based programming is starting to get 
more attention in the Java world.

See this article posted by Cnet today:

http://news.com.com/A+new+event+in+programming/2100-1007_3-5406253.html

Serg

>From: Ed Suominen <general at eepatents.com>
>Reply-To: Twisted general discussion <twisted-python at twistedmatrix.com>
>To: twisted-python at twistedmatrix.com
>Subject: [Twisted-Python] Twisted in Python STDLIB?
>Date: Mon, 11 Oct 2004 11:34:34 -0700
>
>I'd like to start a discussion on whether Twisted ought to be a part of
>Python's standard library. I understand some of the developers think it
>should not, but I personally don't like seeing far inferior networking
>code sitting there in stdlib. Inclusion in the stdlib carries an
>implied endorsement, and that endorsement should be going to Twisted,
>in my view.
>
>Has Guido et al. ever expressed any viewpoint on Twisted? It is
>certainly very Pythonic, and though I have only limited Python and OOP
>experience to express this viewpoint, it is the best-written Python
>code I've ever seen. (Now, if only I could say the same for the
>commenting...)
>
>Ed Suominen
>Registered Patent Agent
>Open-Source Software Author (yes, both...)
>Web Site: http://www.eepatents.com
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_________________________________________________________________
Don't just search. Find. Check out the new MSN Search! 
http://search.msn.com/




From bob at redivi.com  Mon Oct 11 21:04:32 2004
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 11 Oct 2004 23:04:32 -0400
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <BAY12-F7lT2NqFJ3sl30003ef0f@hotmail.com>
References: <BAY12-F7lT2NqFJ3sl30003ef0f@hotmail.com>
Message-ID: <70AD60AC-1BFB-11D9-A52F-000A95686CD8@redivi.com>


On Oct 11, 2004, at 10:36 PM, Sergio Trejo wrote:

> Interesting idea, especially when event-based programming is starting 
> to get more attention in the Java world.
>
> See this article posted by Cnet today:
>
> http://news.com.com/A+new+event+in+programming/2100-1007_3-5406253.html

That's pretty funny, because I developed an event driven RFID framework 
in Python+Twisted over two years ago :)

Sounds like they've got something really scalable on their hands...
"EPL’s roots stem from another successful programming language, SQL"

-bob



From golux at comcast.net  Mon Oct 11 22:02:19 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Tue, 12 Oct 2004 00:02:19 -0400
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <70AD60AC-1BFB-11D9-A52F-000A95686CD8@redivi.com>
References: <BAY12-F7lT2NqFJ3sl30003ef0f@hotmail.com>
	<70AD60AC-1BFB-11D9-A52F-000A95686CD8@redivi.com>
Message-ID: <416B574B.6070004@comcast.net>

Bob Ippolito wrote:
> 
> On Oct 11, 2004, at 10:36 PM, Sergio Trejo wrote:
> 
>> Interesting idea, especially when event-based programming is starting 
>> to get more attention in the Java world.
>>
>> See this article posted by Cnet today:
>>
>> http://news.com.com/A+new+event+in+programming/2100-1007_3-5406253.html
> 
> That's pretty funny, because I developed an event driven RFID framework 
> in Python+Twisted over two years ago :)
> 
> Sounds like they've got something really scalable on their hands...
> "EPL’s roots stem from another successful programming language, SQL"

Right.  Sez here that "events" are "the next big thing" ...
translation:  a new buzzword has bubbled up into the
B.S. computer-talk mags that pointy-haired bosses read, so
now yet another nice computing paradigm will now become
hopelessly muddled by the addition of several competing
"standard" event markup languages, each one with its
own set of stupidities and abuses, and M$'s own proprietary
implementation of their own variation of one of them,
complete with security horrors and a partially-hidden
api that neither conforms to its own documentation nor
maps nicely to any open-source event-driven library.

Oh joy.

- Steve



From symbiont at berlios.de  Mon Oct 11 23:40:59 2004
From: symbiont at berlios.de (Jeff Pitman)
Date: Tue, 12 Oct 2004 13:40:59 +0800
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <416B574B.6070004@comcast.net>
References: <BAY12-F7lT2NqFJ3sl30003ef0f@hotmail.com>
	<70AD60AC-1BFB-11D9-A52F-000A95686CD8@redivi.com>
	<416B574B.6070004@comcast.net>
Message-ID: <200410121341.00011.symbiont@berlios.de>

On Tuesday 12 October 2004 12:02, Stephen Waterbury wrote:
> M$'s own proprietary
> implementation of their own variation of one of them

Done: http://research.microsoft.com/Comega/,  Polyphonic C# and Xen, X# 
has been merged into Cw.  A google search shows some blogs commenting 
on it. 

have fun,
-- 
-jeff



From tv at twistedmatrix.com  Tue Oct 12 00:47:16 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 12 Oct 2004 09:47:16 +0300
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <20041011234827.19317.1098538043.divmod.quotient.1288@ohm>
References: <20041011234827.19317.1098538043.divmod.quotient.1288@ohm>
Message-ID: <416B7DF4.9030304@twistedmatrix.com>

exarkun at divmod.com wrote:
> Which of Twisted's protocol implementations are mature enough for the
> standard library though?  I can think of one, maybe (not counting all
> the  useless ones like ident), and I wrote it so I'm probably biased.

Maybe think of it the other way around. Which protocols in stdlib
were reimplemented in twisted just because twisted couldn't use
the stdlib implementation?




From jean-marc.pouchoulon at ac-montpellier.fr  Tue Oct 12 05:34:17 2004
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc.pouchoulon at ac-montpellier.fr)
Date: Tue, 12 Oct 2004 13:34:17 +0200
Subject: [Twisted-Python] changing password remotely with twisted.conch 
Message-ID: <416BC139.7080008@ac-montpellier.fr>

Hi,
Due to specificity of passwd command, I am not sure it's a goof idea to 
do that but I try to change the root password on  remote machine as I 
can do it with pexpect

The program seems to wait for a password's confirmation. 
2004/10/12 13:05 CEST [SimpleTransport,client] starting service 
ssh-connection
2004/10/12 13:05 CEST [SimpleTransport,client] opening channel 0 with 
65536 32768
2004/10/12 13:05 CEST [SimpleTransport,client] sending request for 
channel 0, request exec
2004/10/12 13:05 CEST [SimpleTransport,client] got extended data 1 'New 
UNIX password: '
2004/10/12 13:05 CEST [SimpleTransport,client] got extended data 1 
'Retype new UNIX password: '

here it is an extract of my CatChannel(channel.SSHChannel)  class.

    CMD = 'passwd'
    def channelOpen(self, ignoredData):
        self.data = ''
        d = self.conn.sendRequest(self, 'exec', common.NS(CMD), 
wantReply = 1)
        d.addCallback(self._cbRequest)

    def _cbRequest(self, ignored):
         self.write('myrootpassword')
         self.conn.sendEOF(self)
   
    def dataReceived(self, data):
         self.write('myrootpassword')
         self.conn.sendEOF(self)

Did anyone done  it ?
Thanks for you answers. ( and thanks to support my basic english ...)



From andrew-twisted at puzzling.org  Tue Oct 12 06:06:01 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 12 Oct 2004 14:06:01 +0200
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <20041011234827.19317.1098538043.divmod.quotient.1288@ohm>
References: <416AE4E5.8050902@twistedmatrix.com>
	<20041011234827.19317.1098538043.divmod.quotient.1288@ohm>
Message-ID: <20041012120601.GB5229@frobozz>

On Mon, Oct 11, 2004 at 11:48:27PM +0000, exarkun at divmod.com wrote:
[...]
> 
>     s = socket.socket()
>     s.connect(...)
>     p = imap4.IMAP4Client()
>     t = CrummyTCPTransport(s, p)
>     p.makeConnection(t)
>     t.run()
> 
>   Reasonable?  Crappy?  Anyway, that's how I've always seen a simplistic,
>   reactorless program using Twisted protocols.  It's ugly, but I think it
>   should work (and compare it to trying to make a stdlib protocol
>   implementation work with Twisted!)

Well, it'll work for single-socket protocols.  It won't work for, say, FTP.
Of course, there's a reason why we wrote a framework ;)

-Andrew.




From z3p at twistedmatrix.com  Tue Oct 12 08:09:02 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Tue, 12 Oct 2004 10:09:02 -0400
Subject: [Twisted-Python] changing password remotely with twisted.conch
In-Reply-To: <416BC139.7080008@ac-montpellier.fr>
References: <416BC139.7080008@ac-montpellier.fr>
Message-ID: <1097590142.17179.4.camel@petra>

On Tue, 2004-10-12 at 13:34 +0200,
jean-marc.pouchoulon at ac-montpellier.fr wrote:
> The program seems to wait for a password's confirmation. 
> 2004/10/12 13:05 CEST [SimpleTransport,client] starting service 
> ssh-connection
> 2004/10/12 13:05 CEST [SimpleTransport,client] opening channel 0 with 
> 65536 32768
> 2004/10/12 13:05 CEST [SimpleTransport,client] sending request for 
> channel 0, request exec
> 2004/10/12 13:05 CEST [SimpleTransport,client] got extended data 1
> 'New 
> UNIX password: '
> 2004/10/12 13:05 CEST [SimpleTransport,client] got extended data 1 
> 'Retype new UNIX password: '
> 
> here it is an extract of my CatChannel(channel.SSHChannel)  class.
> 
>     CMD = 'passwd'
>     def channelOpen(self, ignoredData):
>         self.data = ''
>         d = self.conn.sendRequest(self, 'exec', common.NS(CMD), 
> wantReply = 1)
>         d.addCallback(self._cbRequest)
> 
>     def _cbRequest(self, ignored):
>          self.write('myrootpassword')
>          self.conn.sendEOF(self)
>    
>     def dataReceived(self, data):
>          self.write('myrootpassword')
>          self.conn.sendEOF(self)

There are a couple problems with this code.

1) The messages "New UNIX Password" and "Retype UNIX Password" aren't
going to dataReceived, but to errReceived, which is why they're showing
up in to the log.
2) You're sending EOF after writing the first password.  What EOF means
is "I will send no more data." which clearly isn't what you want.

You can probably get away with:

    def _cbRequest(self, ignored):
        self.write('newpassword\n')
        self.write('newpassword\n')
        self.loseConnection()

But I'd try it first.  Hope this has helped.

-p	
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20041012/46599497/attachment.sig>

From tv at twistedmatrix.com  Tue Oct 12 12:47:14 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 12 Oct 2004 21:47:14 +0300
Subject: [Twisted-Python] changing password remotely with twisted.conch
In-Reply-To: <416BC139.7080008@ac-montpellier.fr>
References: <416BC139.7080008@ac-montpellier.fr>
Message-ID: <416C26B2.7060009@twistedmatrix.com>

jean-marc.pouchoulon at ac-montpellier.fr wrote:
> Due to specificity of passwd command, I am not sure it's a goof idea to 
> do that but I try to change the root password on  remote machine as I 
> can do it with pexpect

It's a horrible idea. Even worse when combined with expect.

If you insist on doing that, you should look at chpasswd. Preferably
with the -e option.



From exarkun at divmod.com  Tue Oct 12 14:19:04 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 12 Oct 2004 20:19:04 GMT
Subject: [Twisted-Python] Re: [twisted+wxPython] widgets do not work?
In-Reply-To: <ckh5u8$rod$1@atlantis.news.tpi.pl>
Message-ID: <20041012201904.1379.3682747.divmod.quotient.84@ohm>

On Tue, 12 Oct 2004 19:58:38 +0200, Taki Jeden <bartekgorny at interia.pl> wrote:
>
> Hi
> 
> Anybody used wxPython with twisted?
> 
> I started putting together a Twisted-based app with wx GUI, and the widgets
> just don't work - some controls do not show up etc. - at least on my
> system.
> 
> For example, if I just take the wxdemo.py shipped with Twisted, and add to
> it a static text, it doesn't show - while if I change 
>         reactor.registerWxApp(app)
>         reactor.run(0)
> into 
>         app.MainLoop(0)
> the text is there. What the heck is wrong with this? Or am I doing something
> wrong? Does the same work at yours?
> 
> Bartek
> 

  There are several known problems with Twisted/wxPython integration, but this doesn't sound like one of them.  Could you include your modified wxdemo.py?

  Jp



From jritter at bektel.com  Tue Oct 12 14:37:06 2004
From: jritter at bektel.com (Josh Ritter)
Date: Tue, 12 Oct 2004 15:37:06 -0500
Subject: [Twisted-Python] Re: [twisted+wxPython] widgets do not work?
References: <20041012201904.1379.3682747.divmod.quotient.84@ohm>
Message-ID: <000501c4b09b$3d8089b0$0300000a@spooge>


I recently posted about this... while the code I presented allowed the
application to create it's controls, I was still having problems...

I switched to this and haven't had a problem since:

class MoMWorldServer(wx.App):
    def OnInit(self):
        #snip
        reactor.startRunning()
        wx.EVT_TIMER(self,999999,self.OnTimer)
        self.timer=wx.Timer(self,999999)
        self.timer.Start(250,False)
        return True

    def OnTimer(self,event):
        reactor.runUntilCurrent()
        reactor.doIteration(0)

-Josh Ritter
Technical Director
http://www.prairiegames.com


----- Original Message -----
From: <exarkun at divmod.com>
To: <python-list at python.org>; <twisted-python at twistedmatrix.com>
Sent: Tuesday, October 12, 2004 3:19 PM
Subject: [Twisted-Python] Re: [twisted+wxPython] widgets do not work?


> On Tue, 12 Oct 2004 19:58:38 +0200, Taki Jeden <bartekgorny at interia.pl>
wrote:
> >
> > Hi
> >
> > Anybody used wxPython with twisted?
> >
> > I started putting together a Twisted-based app with wx GUI, and the
widgets
> > just don't work - some controls do not show up etc. - at least on my
> > system.
> >
> > For example, if I just take the wxdemo.py shipped with Twisted, and add
to
> > it a static text, it doesn't show - while if I change
> >         reactor.registerWxApp(app)
> >         reactor.run(0)
> > into
> >         app.MainLoop(0)
> > the text is there. What the heck is wrong with this? Or am I doing
something
> > wrong? Does the same work at yours?
> >
> > Bartek
> >
>
>   There are several known problems with Twisted/wxPython integration, but
this doesn't sound like one of them.  Could you include your modified
wxdemo.py?
>
>   Jp
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From guy at r-e-d.co.nz  Tue Oct 12 22:26:23 2004
From: guy at r-e-d.co.nz (Guy Robinson)
Date: Wed, 13 Oct 2004 17:26:23 +1300
Subject: [Twisted-Python] Atop questions
Message-ID: <416CAE6F.3070709@r-e-d.co.nz>

I posted this to Divmod mailing list, but perhaps that's not the right place
for these sort of questions?

Hello,

I've just started to play around with Atop. I'm wanting to store data on what
could get up to 500,000 unique products. The structure of the data for each item
is the same or similar. There will be references between data in different
products. Frequent querying of products will occur from the client application.

Should I use nested Pools or, SubStores and Pools/items within each substore?

  From the documentation I can find, the advantages of Pools are easier
referencing and indexing, while substores present better security features and
scalability(less memory)? The documentation also says substores are used more
frequently in most applications. Why?

Are there other issues I should consider?

Another question :-)

A number of the atop examples define Interface classes even though they have no
methods. Is this to make upgrading of object schema easier? Why do this?

TIA,

Guy







From jean-marc.pouchoulon at ac-montpellier.fr  Wed Oct 13 06:05:58 2004
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc.pouchoulon at ac-montpellier.fr)
Date: Wed, 13 Oct 2004 14:05:58 +0200
Subject: [Twisted-Python] changing password remotely with twisted.conch
In-Reply-To: <1097590142.17179.4.camel@petra>
References: <416BC139.7080008@ac-montpellier.fr>
	<1097590142.17179.4.camel@petra>
Message-ID: <416D1A26.8000209@ac-montpellier.fr>

it works with chpasswd.
Thanks a lot. Twisted is really impressive.

>
>You can probably get away with:
>
>    def _cbRequest(self, ignored):
>        self.write('newpassword\n')
>        self.write('newpassword\n')
>        self.loseConnection()
>
>But I'd try it first.  Hope this has helped.
>
>-p	
>  
>
>------------------------------------------------------------------------
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>  
>




From thomas.weholt at gmail.com  Wed Oct 13 06:36:18 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Wed, 13 Oct 2004 14:36:18 +0200
Subject: [Twisted-Python] Merging databases the Twisted way
Message-ID: <ffb7b7f804101305361393ed8f@mail.gmail.com>

Hi,

I got a server running a SQLite-database. Sometimes I need to merge
data from another SQLite database into the master. So far I've done
blocking old-style read-some from source, write-some to destination
stuff using the standard pysqlite-database module, but as mentioned,
it blocks the server. AFAIK SQLite only allows one connection to the
database as well so that might make it harder to implement a
non-blocking solution.

If anybody has tips/hints or examples directly related to this or any
documentation on DB-operations using Twisted that's a bit more
detailed and rich than the one on www.twistedmatrix.com I'd be very
grateful. I'm having a hard time getting the hang of how to use
twisted and databases in a non-blocking way. Everything seems overly
complicated when done the Twisted way. Perhaps it's just me ...

NB! I mostly do web-server stuff using SQLite as database. 

-- 
Mvh/Best regards,
Thomas Weholt
http://www.weholt.org



From glyph at divmod.com  Wed Oct 13 07:36:32 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 13 Oct 2004 09:36:32 -0400
Subject: [Twisted-Python] Atop questions
In-Reply-To: <416CAE6F.3070709@r-e-d.co.nz>
References: <416CAE6F.3070709@r-e-d.co.nz>
Message-ID: <1097674592.3861.16.camel@kazekage>

On Wed, 2004-10-13 at 00:26, Guy Robinson wrote:
> I posted this to Divmod mailing list, but perhaps that's not the right place
> for these sort of questions?

The divmod list is the correct place to ask.  We are very busy.  It may
take more than a day for the question to get answered :)




From itamar at itamarst.org  Wed Oct 13 07:39:13 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 13 Oct 2004 09:39:13 -0400
Subject: [Twisted-Python] Merging databases the Twisted way
In-Reply-To: <ffb7b7f804101305361393ed8f@mail.gmail.com>
References: <ffb7b7f804101305361393ed8f@mail.gmail.com>
Message-ID: <1097674753.17764.64.camel@sheriffpony>

twisted.enterprise.adbapi is the traditional way - it presents a
non-blocking API to databases by using a thread-pool.

http://itamarst.org/writings/etech04/twisted_internet-91.html has some
examples.




From gh at ghaering.de  Wed Oct 13 07:40:26 2004
From: gh at ghaering.de (Gerhard Haering)
Date: Wed, 13 Oct 2004 15:40:26 +0200
Subject: [Twisted-Python] Merging databases the Twisted way
In-Reply-To: <ffb7b7f804101305361393ed8f@mail.gmail.com>
References: <ffb7b7f804101305361393ed8f@mail.gmail.com>
Message-ID: <20041013134026.GA3010@mylene.ghaering.de>

On Wed, Oct 13, 2004 at 02:36:18PM +0200, Thomas Weholt wrote:
> Hi,
> 
> I got a server running a SQLite-database. Sometimes I need to merge
> data from another SQLite database into the master. So far I've done
> blocking old-style read-some from source, write-some to destination
> stuff using the standard pysqlite-database module, but as mentioned,
> it blocks the server.

If you haven't done so already, maybe you can try to ATTACH (SQLITE
SQL command) the other database and then merge using SQL commands.
This should be faster and easier than going through Python.

> AFAIK SQLite only allows one connection to the database as well so
> that might make it harder to implement a non-blocking solution.
> [...]

Basically, one open transaction per database. Concurrent access will
be blocked, for as long as the timeout parameter of the connect()
call.

With PySQLite2/SQLite3 it will be much better, because SQLite3 has
much more fine-grained locking.

SQLite also features an API call to register a callback that will be
invoked every n SQLite VM operations. I'll wrap it one day, maybe the
Twisted folks can make some use of it for a new SQLiteReactor or
whatever.

-- Gerhard (subscribed, but still hasn't used Twisted for real, yet)



From thomas.weholt at gmail.com  Thu Oct 14 09:41:09 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Thu, 14 Oct 2004 17:41:09 +0200
Subject: [Twisted-Python] Making database-code Twisted-friendly
Message-ID: <ffb7b7f8041014084146ad8b96@mail.gmail.com>

Hi,

Attached is a database-module I've created and used quite a lot and so
far been very happy with. The problem is that it's not
Twisted-compatible at all. It blocks and I need something light in my
current project to merge a lot of data from one database into another
and I'd like to use this library to do it. Perhpas somebody can have
use for it as well??

My ideal form of working with databases is shown in the README.txt
file. I'd like to be able to something similar using Twisted in the
lower layers, not blocking.

In short: What I'm looking for is comments on the concept and code in
general, but more importantly a simple example on how to write similar
code in a Twisted-friendly manner so it doesn't block, or if you're so
inclined, feel free to add a Twisted-compatible Connection-object that
doesn't block and return data in the same manner as the implemented
objects do :-).

NB! If my attachment causes problems I'm terribly sorry, but my
current webserver is unavailable at the moment so I have no other
place to post the code ( except making an entire new project at
sourceforge, which seemed like overkill ).

Best regards,
Thomas
-------------- next part --------------
A non-text attachment was scrubbed...
Name: hs.zip
Type: application/zip
Size: 16827 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20041014/f43b0cd7/attachment-0002.zip>

From anthony at interlink.com.au  Thu Oct 14 11:28:18 2004
From: anthony at interlink.com.au (Anthony Baxter)
Date: Fri, 15 Oct 2004 03:28:18 +1000
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <1097524270.31837.8.camel@kazekage>
References: <20041011193116.19317.600650232.divmod.quotient.1200@ohm>
	<1097524270.31837.8.camel@kazekage>
Message-ID: <416EB732.5040805@interlink.com.au>

Glyph Lefkowitz wrote:
> Were this to happen, I would suggest it be in a different module name,
> "twistedcore" or something, to allow a stable interface to remain in the
> standard library, which would have a hope of being easily
> plug-compatible with future Twisted versions, but would not hamstring
> the ability of the Twisted team to put out new versions.

This seems like a good thing to aim for, say, inclusion in 2.5. I don't
think there's any chance of a significant amount of twisted being
included in the stdlib - for instance, the Failure code absolutely
wouldn't be accepted (it's way nasty).

asyncore is ugly, brittle, and a pain in the arse. A replacement for
it would be most excellent.

Key things to remember about stdlib inclusion (some of these have
already been mentioned, but it doesn't hurt to emphasise them)

   - Backwards compatibility is _much_ stronger for the stdlib.
     At a minimum, you're looking at one release with a
     DeprecationWarning, and a second to rip the code out.
     At 12-18 months per major release, that's 2.5 to 3 years.
   - No-one's going to accept something for the stdlib that
     requires an external package to be useful.
   - No-one's going to accept a new significant lump of code
     unless there's someone (or, even better, more than one
     person) who's going to be happy to maintain it on an
     ongoing basis.

And finally, there's absolutely no chance of any of this
happening for 2.4. I'm cutting beta1 after I get some sleep,
so the window there is completely closed. On the positive
side, there's plenty of time to think about something for
2.5. <wink>

Anthony
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From glyph at divmod.com  Thu Oct 14 12:28:12 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 14 Oct 2004 14:28:12 -0400
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <416EB732.5040805@interlink.com.au>
References: <20041011193116.19317.600650232.divmod.quotient.1200@ohm>
	<1097524270.31837.8.camel@kazekage> <416EB732.5040805@interlink.com.au>
Message-ID: <1097778492.7783.4.camel@kazekage>

On Thu, 2004-10-14 at 13:28, Anthony Baxter wrote:

> This seems like a good thing to aim for, say, inclusion in 2.5. I don't
> think there's any chance of a significant amount of twisted being
> included in the stdlib - for instance, the Failure code absolutely
> wouldn't be accepted (it's way nasty).

We should have a conversation about that at some point - I don't
disagree that the code is nasty, but there are pieces of very core
Twisted code that depend upon it.  It only exists because Python's
native representation of tracebacks is way nastier. ;-)

Other than that, I completely agree with your post.  That, and I am
definitely NOT the person to ask to maintain the stdlib variant...




From bob at redivi.com  Thu Oct 14 12:50:36 2004
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 14 Oct 2004 14:50:36 -0400
Subject: [Twisted-Python] Twisted in Python STDLIB?
In-Reply-To: <1097778492.7783.4.camel@kazekage>
References: <20041011193116.19317.600650232.divmod.quotient.1200@ohm>
	<1097524270.31837.8.camel@kazekage>
	<416EB732.5040805@interlink.com.au>
	<1097778492.7783.4.camel@kazekage>
Message-ID: <EF6D613F-1E11-11D9-BD1D-000A95686CD8@redivi.com>


On Oct 14, 2004, at 2:28 PM, Glyph Lefkowitz wrote:

> On Thu, 2004-10-14 at 13:28, Anthony Baxter wrote:
>
>> This seems like a good thing to aim for, say, inclusion in 2.5. I 
>> don't
>> think there's any chance of a significant amount of twisted being
>> included in the stdlib - for instance, the Failure code absolutely
>> wouldn't be accepted (it's way nasty).
>
> We should have a conversation about that at some point - I don't
> disagree that the code is nasty, but there are pieces of very core
> Twisted code that depend upon it.  It only exists because Python's
> native representation of tracebacks is way nastier. ;-)
>
> Other than that, I completely agree with your post.  That, and I am
> definitely NOT the person to ask to maintain the stdlib variant...

Well from what I remember from the last time I rewrote Failure, the 
gnarlyness is used only to "persist" a traceback longer than it should 
really exist.  Perhaps there should be an understandable and high 
performance version of Failure that is used by default, with a separate 
debugerriffic version can be monkeypatched or adapted in when it's 
actually wanted?

-bob



From andrew-twisted at puzzling.org  Thu Oct 14 14:03:52 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 14 Oct 2004 22:03:52 +0200
Subject: [Twisted-Python] Making database-code Twisted-friendly
In-Reply-To: <ffb7b7f8041014084146ad8b96@mail.gmail.com>
References: <ffb7b7f8041014084146ad8b96@mail.gmail.com>
Message-ID: <20041014200352.GC5055@frobozz>

On Thu, Oct 14, 2004 at 05:41:09PM +0200, Thomas Weholt wrote:
[...]
> 
> My ideal form of working with databases is shown in the README.txt
> file. I'd like to be able to something similar using Twisted in the
> lower layers, not blocking.

Without commenting on the Twisted issues of this at all, have you seen
SQLObject?  At a glance, it seems to be quite similar in concept.

http://sqlobject.org/

-Andrew.




From thomas.weholt at gmail.com  Thu Oct 14 15:29:52 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Thu, 14 Oct 2004 23:29:52 +0200
Subject: [Twisted-Python] Making database-code Twisted-friendly
In-Reply-To: <20041014200352.GC5055@frobozz>
References: <ffb7b7f8041014084146ad8b96@mail.gmail.com>
	<20041014200352.GC5055@frobozz>
Message-ID: <ffb7b7f80410141429561c845f@mail.gmail.com>

Yepp!! Looks good except for the fact that it only deals with objects,
I need plain old dictionaries all the way. Truth be said, I haven't
played with it extensivly, so it might support that. I'll check into
it. Thanks.

Thomas


On Thu, 14 Oct 2004 22:03:52 +0200, Andrew Bennetts
<andrew-twisted at puzzling.org> wrote:
> On Thu, Oct 14, 2004 at 05:41:09PM +0200, Thomas Weholt wrote:
> [...]
> >
> > My ideal form of working with databases is shown in the README.txt
> > file. I'd like to be able to something similar using Twisted in the
> > lower layers, not blocking.
> 
> Without commenting on the Twisted issues of this at all, have you seen
> SQLObject?  At a glance, it seems to be quite similar in concept.
> 
> http://sqlobject.org/
> 
> -Andrew.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


-- 
Mvh/Best regards,
Thomas Weholt
http://www.weholt.org



From Andreas.Ames at tenovis.com  Fri Oct 15 09:47:51 2004
From: Andreas.Ames at tenovis.com (Ames Andreas (MPA/DF))
Date: Fri, 15 Oct 2004 17:47:51 +0200
Subject: [Twisted-Python] How to stuff new events into the core event loop?
Message-ID: <788E231C269961418F38D3E360D1652526CA48@tndefr-ws00021.tenovis.corp.lan>

Hello all,

I'm pretty new to twisted activity (just some doc and code reading so
far).  So please be forbearing if the answers to the following
questions are obvious.

I'm wrapping some C library which implements some networked client to
use it from python, i.e. from a twisted app.  Within the guts of this
lib there is a thread created (i.e. it is normally never seen by
python).  This thread manages some heartbeat mechanism.  I, as a user
of this API, can register a callback with the lib.  This callback is
called _within the context of this underground thread_, when the
connection to the server is lost (as recognised through the
heartbeat).  Now my first question is, how you would stuff that event
(loss of server connection) into the core event loop?

One possibility that I see would be to let my registered C-callback
signal some sort of a synchronisation item (like mutex or so) whenever
the connection to the server is lost.  Then I'm using a threaded
deferred to block on this synchronisation item, triggering the
deferred's callback mechanism when the item gets signaled.  But this
approach seems very wasteful to me, as I'm using a deferred and a
thread for an event that will never happen (my own application is a
long running process either).

Actually I'm wrapping not only one but two such C libraries.  Both
implement protocols that are not (yet?) available for python/twisted
and that are not trivial (just to illustrate that there are not many
alternatives to using these C libs).  I'm planning to use both of them
through twisted's thread pool mechanism.  The only thing is that I
would like to have fine grained control over the number of threads
used for each of them.  Is it possible to create custom thread pools
besides the default one?  If so, is there anything preventing me from
creating a thread pool with only one thread?


TIA,

andreas




From exarkun at divmod.com  Fri Oct 15 10:27:02 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 15 Oct 2004 16:27:02 GMT
Subject: [Twisted-Python] How to stuff new events into the core event loop?
In-Reply-To: <788E231C269961418F38D3E360D1652526CA48@tndefr-ws00021.tenovis.corp.lan>
Message-ID: <20041015162702.4730.663997459.divmod.quotient.84@ohm>

On Fri, 15 Oct 2004 17:47:51 +0200, "Ames Andreas (MPA/DF)" <Andreas.Ames at tenovis.com> wrote:
>Hello all,
> 
> I'm pretty new to twisted activity (just some doc and code reading so
> far).  So please be forbearing if the answers to the following
> questions are obvious.
> 
> I'm wrapping some C library which implements some networked client to
> use it from python, i.e. from a twisted app.  Within the guts of this
> lib there is a thread created (i.e. it is normally never seen by
> python).  This thread manages some heartbeat mechanism.  I, as a user
> of this API, can register a callback with the lib.  This callback is
> called _within the context of this underground thread_, when the
> connection to the server is lost (as recognised through the
> heartbeat).  Now my first question is, how you would stuff that event
> (loss of server connection) into the core event loop?

  To post an event to the reactor:

    reactor.callFromThread(f, *a, **kw)

  For example, in your connection lost callback, you might wish to do something like this:

    def blahblahConnectionLost(connectionId, exitStatus, monkeys):
        reactor.callFromThread(
            someKindOfThing.connectionLost, 
            Failure(Exception(exitStatus, monkeys)))

  Jp



From exarkun at divmod.com  Sat Oct 16 00:57:26 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sat, 16 Oct 2004 06:57:26 GMT
Subject: [Twisted-Python] Re: [Twisted-commits] r12007 - Trial has been born
	anew, with appealing new features, and faster execution
In-Reply-To: <E1CIZYK-0006bH-00@wolfwood>
Message-ID: <20041016065726.4730.1817681820.divmod.quotient.466@ohm>

On Fri, 15 Oct 2004 15:23:56 -0600, Jonathan Simms <slyphon at wolfwood.twistedmatrix.com> wrote:
>Author: slyphon
> Date: Fri Oct 15 15:23:56 2004
> New Revision: 12007
> 
> Log:
> Trial has been born anew, with appealing new features, and faster execution
> 

  Revert, please.  Every build slave is failing at least one test.  It looks like retrial might be ready with a bit more work, but it isn't yet.

  Jp



From x11 at h2o.sky.lt  Sat Oct 16 10:07:32 2004
From: x11 at h2o.sky.lt (=?iso-8859-4?Q?Art=FEras_=A9lajus?=)
Date: Sat, 16 Oct 2004 19:07:32 +0300
Subject: [Twisted-Python] UDP multicasting? HowTo?
Message-ID: <1097942852.6553.4.camel@localhost.localdomain>

Hello,

At first I want to say, that I'm pretty new to Twisted and these classes
get me lost (functional programming veteran :-)). Anyway, I started OOP
month ago, and I need to write UDP Multicast client/server. What it's
for? I want to write Gtk clone of Vypress Chat - serverless chat
application. Erm, in fact I want to rewrite it, because I started
writing it in Perl :-)

So... I looked up API for Multicast and this got my eye:
http://twistedmatrix.com/documents/current/api/twisted.internet.udp.MulticastPort.html
It's probably right thing. But as I never done this before, I need an
example..

I think my code should start like this:
#!/usr/bin/env python
# -*- coding: utf-8 -*-
from twisted.internet.udp import MulticastPort
from twisted.internet import reactor

class VyChat(DatagramProtocol):

But what's next?

Anyway, any help or examples appreciated.




From slyphon at twistedmatrix.com  Mon Oct 18 00:52:58 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Mon, 18 Oct 2004 02:52:58 -0400
Subject: [Twisted-Python] why tests are failing with the gtk2 reactor +
 oldtrial but passing with newtrial
Message-ID: <4173684A.4090203@twistedmatrix.com>

in a nutshell, oldtrial leaves the reactor in a dirty state

in the gtk2 reactor i put in the follwing method:

    def printoutallreaders(self):
        for reader in reads.keys():
            print "reader: %r" % reader

in twisted.test.test_internet.InterfaceTestCase.testCallInNextIteration
i added the following line (278):


277        reactor.callLater(0, f1)
278        reactor.printoutallreaders()


upon running the test along with the whole suite i got the following 
output from my method:


    testCallInNextIteration ... reader: 
<twisted.internet.default._UnixWaker instance at 0x404d6b6c>
reader: <Echo #0 on ./hello.skt>
reader: <twisted.internet.tcp.Client to ('localhost', 50048) at 421a832c>
reader: <Echo #0 on echo.skt>
reader: <twisted.internet.tcp.Client to ('localhost', 50042) at 421d3b8c>
reader: <Echo #0 on 0>
reader: <twisted.internet.unix.Client instance at 0x4217836c>
reader: <twisted.internet.protocol.ServerFactory on 50046>
reader: <twisted.internet.unix.Client instance at 0x421784ac>
reader: <Echo #0 on 0>
reader: <Echo #0 on 0>
reader: <twisted.internet.protocol.Factory on 50051>
reader: <Echo #0 on echo.skt>
reader: <twisted.protocols.ftp.DTPFactory on 50055>
reader: <twisted.internet.protocol.ServerFactory on 50048>
reader: <twisted.internet.tcp.Client to ('localhost', 50046) at 421bcaec>
reader: <twisted.internet.unix.Client instance at 0x421d39ec>

as you can see, old trial has left a large number of readables in the 
reactor between tests.

when i run with the same code patched into the retrial-4 branch:

      testCallInNextIteration ... reader: 
<twisted.internet.default._UnixWaker instance at 0x4063c1ec>

you can see that the only readable in the reactor  is a _UnixWaker.

so retrial caused this test to work by cleaning up the reactor state, as 
the test writer expected.


In the end, it was a VERY GOOD THING that JP demanded that I revert the 
merge of my branch, as
the reactor-installation code was flawed.

JP WAS RIGHT
I WAS WRONG

let that be a lesson to you all...

it is fixed now in my branch, ans i'm going to test it on pyramid before 
remerging to make sure there
are no further buildbot suprises.

-Jonathan




From anthony at interlink.com.au  Mon Oct 18 03:43:24 2004
From: anthony at interlink.com.au (Anthony Baxter)
Date: Mon, 18 Oct 2004 19:43:24 +1000
Subject: [Twisted-Python] new to twisted
In-Reply-To: <415AB25E.2040701@bellsouth.net>
References: <4159C7D2.4090706@power.eng.mcmaster.ca>
	<415AB25E.2040701@bellsouth.net>
Message-ID: <4173903C.8060809@interlink.com.au>

Jeremy Jones wrote:

> I wonder if Shtoom will be of any assistance to you.  Check out 
> http://www.divmod.org/Home/Projects/Shtoom/  From the webpage:

> It uses Twisted.  Not sure to what extent, though.

A lot. Also look at Divmod Quotient, as it's got a bunch of SIP
server stuff as well.

Note that both Shtoom and Quotient are non-trivial users of twisted,
so the learning curve will be a bit steep.

Anthony

-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Oct 18 06:51:37 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 18 Oct 2004 14:51:37 +0200
Subject: [Twisted-Python] twisted.internet and IPv6
In-Reply-To: <20040930131935.29723.282179053.divmod.quotient.8399@ohm>
References: <20040930131935.29723.282179053.divmod.quotient.8399@ohm>
Message-ID: <4173BC59.4020801@gkec.informatik.tu-darmstadt.de>


exarkun at divmod.com schrieb:
 > On Thu, 30 Sep 2004 10:12:18 +0200, Stefan Behnel <behnel_ml at gkec.informatik.tu-darmstadt.de> wrote:
 >>I'm curious: how much work would it be to enable IPv6 support in twisted.internet?
 >
 >   Not very much.  About a year ago, I wrote this:
 >     http://cvs.twistedmatrix.com/cvs/trunk/sandbox/exarkun/ipv6.py?view=markup&rev=10540&root=Twisted
 >   This is no longer how I'd like to see IPv6 supported in Twisted, but it gives an idea of how few changes are required.

That really doesn't seem to be a big change in the current code base. It's not very object oriented, though, so as you said, it would have to be rewritten to integrate it with Twisted.

However, I think the address handling would be a thing worth generalizing. I found this on the web:

http://c0re.23.nu/c0de/IPy/

I already had to adapt it a bit as some code parts are somewhat clumsy, but I find it a nice abstraction for IP addresses. If such a thing was part of Twisted, the interfaces for handling IPv[46] could become completely transparent.

You could even cut them into the existing interfaces:

-----------------------------------------
from IPy import IP
def connectTCP(host, port, ...)
   if isinstance(host, str):
     ... # use original IPv4 implementation - or convert host to IP(host)
   elif isinstance(host, IP):
     ... # connect either with IPv4 or IPv6, depending on host.version()
-----------------------------------------

Stefan



From glyph at divmod.com  Mon Oct 18 10:26:06 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 18 Oct 2004 12:26:06 -0400
Subject: [Twisted-Python] why tests are failing with the gtk2 reactor +
	oldtrial but passing with newtrial
In-Reply-To: <4173684A.4090203@twistedmatrix.com>
References: <4173684A.4090203@twistedmatrix.com>
Message-ID: <1098116766.23505.2.camel@kazekage>

On Mon, 2004-10-18 at 02:52, Jonathan Simms wrote:

> In the end, it was a VERY GOOD THING that JP demanded that I revert the 
> merge of my branch, as
> the reactor-installation code was flawed.

I am a little confused - the first half of your message makes sense to
me, and this makes sense to me, but they do not seem to be connected in
any way.  How was the reactor-installation code flawed?




From itamar at itamarst.org  Mon Oct 18 10:49:35 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 18 Oct 2004 12:49:35 -0400
Subject: [Twisted-Python] ANN: Fusion 0.1.1
Message-ID: <1098118175.25621.4.camel@sheriffpony>

Fusion, a C++ integration layer for Twistedm now has a 0.1.1 release,
fixing a serious bug in the buffering layer.

http://itamarst.org/software/fusion-0.1.1.tar.gz

-- 
Itamar Shtull-Trauring    http://itamarst.org





From tim at se.linux.org  Mon Oct 18 11:02:30 2004
From: tim at se.linux.org (=?iso-8859-1?Q?Tim_Terleg=E5rd?=)
Date: Mon, 18 Oct 2004 19:02:30 +0200 (CEST)
Subject: [Twisted-Python] ANN: Fusion 0.1.1
In-Reply-To: <1098118175.25621.4.camel@sheriffpony>
Message-ID: <Pine.LNX.4.44.0410181901410.18218-100000@naskur.se.linux.org>

> Fusion, a C++ integration layer for Twistedm now has a 0.1.1 release,
> fixing a serious bug in the buffering layer.
>
> http://itamarst.org/software/fusion-0.1.1.tar.gz

What is a C++ integration layer? Could you please explain a little more
about this software?

Tim




From slyphon at twistedmatrix.com  Mon Oct 18 11:59:44 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Mon, 18 Oct 2004 13:59:44 -0400
Subject: [Twisted-Python] why tests are failing with the gtk2 reactor
	+	oldtrial but passing with newtrial
In-Reply-To: <1098116766.23505.2.camel@kazekage>
References: <4173684A.4090203@twistedmatrix.com>
	<1098116766.23505.2.camel@kazekage>
Message-ID: <41740490.70006@twistedmatrix.com>

Glyph Lefkowitz wrote:

>On Mon, 2004-10-18 at 02:52, Jonathan Simms wrote:
>
>  
>
>>In the end, it was a VERY GOOD THING that JP demanded that I revert the 
>>merge of my branch, as
>>the reactor-installation code was flawed.
>>    
>>
>
>I am a little confused - the first half of your message makes sense to
>me, and this makes sense to me, but they do not seem to be connected in
>any way.  How was the reactor-installation code flawed?
>
>
>  
>
Heh, well, to be perfectly honest, the only connection between these two 
things was that it
was through debugging one that I discovered the other.  Basically, the 
reactor installation code
was flawed because the reactor installation code was somehow factored 
out, while the option
was left in, so no matter what you specified with --reactor, you got the 
select reactor.

The reason the select reactor was getting installed was that the 
trial.util class was a top-level
import, and it had twisted.internet.reactor as a top-level import.

This is all fixed and tested for now.

-Jonathan




From itamar at itamarst.org  Mon Oct 18 12:46:35 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 18 Oct 2004 14:46:35 -0400
Subject: [Twisted-Python] ANN: Fusion 0.1.1
In-Reply-To: <Pine.LNX.4.44.0410181901410.18218-100000@naskur.se.linux.org>
References: <Pine.LNX.4.44.0410181901410.18218-100000@naskur.se.linux.org>
Message-ID: <1098125195.25619.6.camel@sheriffpony>

On Mon, 2004-10-18 at 13:02, Tim Terlegård wrote:
> > Fusion, a C++ integration layer for Twistedm now has a 0.1.1 release,
> > fixing a serious bug in the buffering layer.
> >
> > http://itamarst.org/software/fusion-0.1.1.tar.gz
> 
> What is a C++ integration layer? Could you please explain a little more
> about this software?

See my previous post to the list - basically it lets you write Twisted
TCP and UDP protocols in C++.




From Andreas.Ames at tenovis.com  Tue Oct 19 07:23:53 2004
From: Andreas.Ames at tenovis.com (Ames Andreas (MPA/DF))
Date: Tue, 19 Oct 2004 15:23:53 +0200
Subject: [Twisted-Python] Is there any ready-made solution for nonblocking
	logfiles?
Message-ID: <788E231C269961418F38D3E360D1652526CA49@tndefr-ws00021.tenovis.corp.lan>

Hello,

subject contains the whole question, apart from:  Does it work on
Micros~1 platforms?


TIA,

andreas




From Andreas.Ames at tenovis.com  Tue Oct 19 07:46:15 2004
From: Andreas.Ames at tenovis.com (Ames Andreas (MPA/DF))
Date: Tue, 19 Oct 2004 15:46:15 +0200
Subject: [Twisted-Python] Has anybody integrated multiple threadpools into
	reactor?
Message-ID: <788E231C269961418F38D3E360D1652526CA4A@tndefr-ws00021.tenovis.corp.lan>

Hello,

if so, could you point me in the right direction?  Furthermore:  Is
there an easy way to avoid the threadpool overhead when I actually
only want to have one dedicated thread to fulfill a blocking job?


TIA,

andreas




From itamar at itamarst.org  Tue Oct 19 08:33:05 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 19 Oct 2004 10:33:05 -0400
Subject: [Twisted-Python] Is there any ready-made solution for
	nonblocking logfiles?
In-Reply-To: <788E231C269961418F38D3E360D1652526CA49@tndefr-ws00021.tenovis.corp.lan>
References: <788E231C269961418F38D3E360D1652526CA49@tndefr-ws00021.tenovis.corp.lan>
Message-ID: <1098196384.25624.12.camel@sheriffpony>

Just log to a file object, writes to files are for the most part not blocking. 




From itamar at itamarst.org  Tue Oct 19 09:17:25 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 19 Oct 2004 11:17:25 -0400
Subject: [Twisted-Python] Has anybody integrated multiple threadpools
	into reactor?
In-Reply-To: <788E231C269961418F38D3E360D1652526CA4A@tndefr-ws00021.tenovis.corp.lan>
References: <788E231C269961418F38D3E360D1652526CA4A@tndefr-ws00021.tenovis.corp.lan>
Message-ID: <1098199045.26685.2.camel@sheriffpony>

Just use twisted.python.threadpool.ThreadPool instances. You can
reactor.suggestThreadPoolSize or something wiht size 1, or start your
own threadpool with size 1.




From tv at twistedmatrix.com  Tue Oct 19 10:26:19 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 19 Oct 2004 19:26:19 +0300
Subject: [Twisted-Python] Is there any ready-made solution for	nonblocking
	logfiles?
In-Reply-To: <1098196384.25624.12.camel@sheriffpony>
References: <788E231C269961418F38D3E360D1652526CA49@tndefr-ws00021.tenovis.corp.lan>
	<1098196384.25624.12.camel@sheriffpony>
Message-ID: <4175402B.7000605@twistedmatrix.com>

Itamar Shtull-Trauring wrote:
> Just log to a file object, writes to files are for the most part not blocking. 

ITYM "..will quite often block, no matter what you do, but are fast
enough you shouldn't care." HTH, HAND.



From thomas at apestaart.org  Tue Oct 19 14:06:56 2004
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Tue, 19 Oct 2004 22:06:56 +0200
Subject: [Twisted-Python] First public release of Flumotion Streaming Media
	Server
Message-ID: <1098216416.29937.17.camel@otto.amantes>

Hey everyone,

we finally bit the bullet and threw out our firstborn for public
consumption.  For those not yet in the know, Flumotion is a streaming
media server based on GStreamer and Twisted under development by
Fluendo.

This release gives users access to the basic features of the server and
demonstrates its distributed capabilities. We will follow up with a
release within a couple of weeks to address some of the remaining issues
and fix items that our users discover.

Yes, there will be bugs.  Feel free to report them.  But there are also
lots of cool features, for which we owe a debt of gratitude to both the
GStreamer and Twisted developers.

Our website is at http://www.fluendo.com, the development site is up in
wiki style at https://core.fluendo.com/trac/cgi-bin/trac.cgi
Feel free to start filing issues.

The actual tarball is up at:
http://www.fluendo.com/downloads/flumotion-0.1.0.tar.bz2

Download the tarball and md5 file here. If you are running Fedora 2 you
can get a full set of RPMS and needed dependencies from the GStreamer
apt repository.

I'm sure packages for other distributions will spring up over the next
few days.

Happy hacking and drop us a line !

Thomas




From serj_trejo at hotmail.com  Tue Oct 19 16:56:07 2004
From: serj_trejo at hotmail.com (Sergio Trejo)
Date: Tue, 19 Oct 2004 18:56:07 -0400
Subject: [Twisted-Python] First public release of Flumotion Streaming
	MediaServer
Message-ID: <BAY12-F152ZN9KAy4Mo0000d865@hotmail.com>

This looks quite interesting. What about streaming MPEG4?

Cheers,

Sergio

>From: Thomas Vander Stichele <thomas at apestaart.org>
>Reply-To: Twisted general discussion <twisted-python at twistedmatrix.com>
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Subject: [Twisted-Python] First public release of Flumotion Streaming 
>MediaServer
>Date: Tue, 19 Oct 2004 22:06:56 +0200
>
>Hey everyone,
>
>we finally bit the bullet and threw out our firstborn for public
>consumption.  For those not yet in the know, Flumotion is a streaming
>media server based on GStreamer and Twisted under development by
>Fluendo.
>
>This release gives users access to the basic features of the server and
>demonstrates its distributed capabilities. We will follow up with a
>release within a couple of weeks to address some of the remaining issues
>and fix items that our users discover.
>
>Yes, there will be bugs.  Feel free to report them.  But there are also
>lots of cool features, for which we owe a debt of gratitude to both the
>GStreamer and Twisted developers.
>
>Our website is at http://www.fluendo.com, the development site is up in
>wiki style at https://core.fluendo.com/trac/cgi-bin/trac.cgi
>Feel free to start filing issues.
>
>The actual tarball is up at:
>http://www.fluendo.com/downloads/flumotion-0.1.0.tar.bz2
>
>Download the tarball and md5 file here. If you are running Fedora 2 you
>can get a full set of RPMS and needed dependencies from the GStreamer
>apt repository.
>
>I'm sure packages for other distributions will spring up over the next
>few days.
>
>Happy hacking and drop us a line !
>
>Thomas
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_________________________________________________________________
Express yourself instantly with MSN Messenger! Download today it's FREE! 
http://messenger.msn.com/




From serj_trejo at hotmail.com  Tue Oct 19 16:58:08 2004
From: serj_trejo at hotmail.com (Sergio Trejo)
Date: Tue, 19 Oct 2004 18:58:08 -0400
Subject: [Twisted-Python] Oops ...
Message-ID: <BAY12-F42GykBbKP7Ie00001a04@hotmail.com>

Sorry, my response to Thomas about Flumotion's announcement was meant to go 
to him only and I accidentally posted to the list (realizing it was too late 
after clicking send).

Serg

_________________________________________________________________
Express yourself instantly with MSN Messenger! Download today it's FREE! 
http://messenger.msn.com/




From nico at tekNico.net  Wed Oct 20 02:26:22 2004
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 20 Oct 2004 10:26:22 +0200
Subject: [Twisted-Python] Query output from pyPgSQL via Perspective Broker,
	how?
Message-ID: <cl57fd$etd$1@sea.gmane.org>

This is a pyPgSQL-Twisted mixed question, I post it here because I recently
saw Gerard Haering posting, hi Gerard. :-)

I'm trying to remotely send the PostgreSQL query output from pyPgSQL via
Perspective Broker, and finding it difficult to prevent all the
InsecureJelly exceptions. I'm trying to avoid modifying hundreds of already
written queries, and I'm patching pyPgSQL instead (albeit at runtime).

A first problem is that the make_PgResultSetClass factory function
dinamically builds a subclass of the PgResultSet class, making it
impossible to statically subclass it with pb.Copyable and pb.RemoteCopy . I
worked around that making the make_PgResultSetClass return an object of the
PgResultSet class, instead of a new subclass. This seems to work.

Now I'm fighting against all the pyPgSQL special types. I'm changing the
typecast method in the TypeCache class to return only standard types, and
while it works fine for number and strings, it seems that mx.DateTime and
PG_INET values are not intercepted.

I convert the mx.DateTime and mx.DateTimeDelta instances into standard
datetime and timedelta ones, since the Twisted docs says PB already knows
those. I also added a check for PG_INET, returning str(value) in that case.
I'm still getting InsecureJelly exceptions for these two data types,
though.

I feel like I'm following the tough road doing this, maube there's a simpler
way of achieving what I need. Any suggestions? Thanks in advance.

[P.S.: the .sig was not manually chosen, just happened. ;-) ]

-- 
Nicola Larosa - nico at tekNico.net

With Twisted, you don't need threads. You don't want threads. Threads 
are actually harmful: http://www.kuro5hin.org/story/2002/11/18/22112/860
 -- Jonathan Lange, August 2004






From nico at tekNico.net  Wed Oct 20 02:37:58 2004
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 20 Oct 2004 10:37:58 +0200
Subject: [Twisted-Python] Re: Query output from pyPgSQL via Perspective
	Broker, how?
References: <cl57fd$etd$1@sea.gmane.org>
Message-ID: <cl585a$gpc$1@sea.gmane.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

[Sorry for the self-reply, have to clarify a couple of things.]


> I worked around that making the make_PgResultSetClass return an object of
> the PgResultSet class, instead of a new subclass. This seems to work.

That would be "...making the make_PgResultSetClass return an *instance* of
the PgResultSet class, ...".

I don't want to set fetchReturnsList to True, because I need column names in
the query output. I could also add an OrderedDict type, and return an
instance of that from the __fetchOneRow method of the Cursor class, instead
of a PgResultSet. I would still have the problem with the pyPgSQL types,
though.


- -- 
Nicola Larosa - nico at tekNico.net

With Twisted, you don't need threads. You don't want threads. Threads 
are actually harmful: http://www.kuro5hin.org/story/2002/11/18/22112/860
 -- Jonathan Lange, August 2004

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.5 (GNU/Linux)

iD8DBQFBdiPpXv0hgDImBm4RAkoWAKC7qlksE+tX+fdwAZNnRDZqBuuYFgCggkMv
vYMrvNUy3WXF5qtMiHf6l0I=
=7SPp
-----END PGP SIGNATURE-----




From behnel_ml at gkec.informatik.tu-darmstadt.de  Wed Oct 20 04:00:03 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Wed, 20 Oct 2004 12:00:03 +0200
Subject: [Twisted-Python] Threaded Twisted?
Message-ID: <41763723.4040208@gkec.informatik.tu-darmstadt.de>

Hi!

I wondered what would be the best way of running Twisted on a 
multi-processor system.

I can run multiple instances of my program, but the message passing 
between them becomes somewhat more expensive than I would like 
(serialization).

Can Twisted run in multiple Threads? Meaning: use two concurrent reactors?

As far as I understand it, the reactor is implemented as a singleton, but 
since different reactor types are already supported, I wonder if anyone 
could think of a way of achieving that...

Any ideas?

Stefan



From dreid at dreid.org  Wed Oct 20 04:56:06 2004
From: dreid at dreid.org (David Reid)
Date: Wed, 20 Oct 2004 03:56:06 -0700
Subject: [Twisted-Python] [PATCH] Support resolving wildcard A and CNAME
	records in twisted.names
Message-ID: <1098269766.8549.10.camel@localhost>

Included is a patch to resolve A and CNAME records of the form 

A('*.foo.bar', '1.2.3.4')
CNAME('*.foo.bar', 'foo.bar')

This would be useful for example, in a situation where you have many
named (even dynamic) virtual hosts handled by a webserver.

The patch includes tests for both Wildcard A Records, and Wildcard CNAME
Records.  Any comments are appreciated.  If no one (read: exarkun)
disapproves I'll go ahead and commit this.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: wildcard-records.patch
Type: text/x-patch
Size: 3860 bytes
Desc: 
URL: </pipermail/twisted-python/attachments/20041020/ab8cbb20/attachment-0002.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20041020/ab8cbb20/attachment.sig>

From bob at redivi.com  Wed Oct 20 05:07:58 2004
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 20 Oct 2004 07:07:58 -0400
Subject: [Twisted-Python] Threaded Twisted?
In-Reply-To: <41763723.4040208@gkec.informatik.tu-darmstadt.de>
References: <41763723.4040208@gkec.informatik.tu-darmstadt.de>
Message-ID: <4D08C108-2288-11D9-A2F8-000A95BA5446@redivi.com>

On Oct 20, 2004, at 6:00, Stefan Behnel wrote:

> I wondered what would be the best way of running Twisted on a 
> multi-processor system.

Multiple processors, multiple processes.  Multiple processes is a good 
model anyways because it scales to clusters of machines.

> I can run multiple instances of my program, but the message passing 
> between them becomes somewhat more expensive than I would like 
> (serialization).

It's probably not as expensive as having a Global Interpreter Lock 
(GIL) that prevents multiple threads from running Python code at the 
same time, diluting any benefits you would see from concurrent 
reactors.

> Can Twisted run in multiple Threads? Meaning: use two concurrent 
> reactors?
>
> As far as I understand it, the reactor is implemented as a singleton, 
> but since different reactor types are already supported, I wonder if 
> anyone could think of a way of achieving that...

No it can not use two reactors.  Even if it could, you wouldn't get 
much better performance due to the GIL.

-bob




From behnel_ml at gkec.informatik.tu-darmstadt.de  Wed Oct 20 06:08:11 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Wed, 20 Oct 2004 14:08:11 +0200
Subject: [Twisted-Python] Threaded Twisted?
In-Reply-To: <4D08C108-2288-11D9-A2F8-000A95BA5446@redivi.com>
References: <41763723.4040208@gkec.informatik.tu-darmstadt.de>
	<4D08C108-2288-11D9-A2F8-000A95BA5446@redivi.com>
Message-ID: <4176552B.9040203@gkec.informatik.tu-darmstadt.de>


Bob Ippolito schrieb:
> Multiple processors, multiple processes.  Multiple processes is a good 
> model anyways because it scales to clusters of machines.

True. That's actually a current side effect of my program.


> It's probably not as expensive as having a Global Interpreter Lock (GIL) 
> that prevents multiple threads from running Python code at the same 
> time, diluting any benefits you would see from concurrent reactors.

Sure, the GIL. I read about it when I started using Python, but I must 
have forgotten it.

I guess you're right, multiple processes is simple to do and it does even 
have some advantages here.

Thanks,
Stefan



From glyph at divmod.com  Wed Oct 20 16:18:56 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 20 Oct 2004 18:18:56 -0400
Subject: [Twisted-Python] Has anybody integrated multiple threadpools
	into reactor?
In-Reply-To: <1098199045.26685.2.camel@sheriffpony>
References: <788E231C269961418F38D3E360D1652526CA4A@tndefr-ws00021.tenovis.corp.lan>
	<1098199045.26685.2.camel@sheriffpony>
Message-ID: <1098310736.3103.3.camel@kazekage>

On Tue, 2004-10-19 at 11:17, Itamar Shtull-Trauring wrote:
> Just use twisted.python.threadpool.ThreadPool instances. You can
> reactor.suggestThreadPoolSize or something wiht size 1, or start your
> own threadpool with size 1.

I would strongly recommend against using ThreadPool.  Just use
callInThread - there is already a pool of worker threads.  Starting and
stopping threadpools with the reactor is difficult to test and easy to
get wrong.




From Andreas.Ames at tenovis.com  Thu Oct 21 03:45:39 2004
From: Andreas.Ames at tenovis.com (Ames Andreas (MPA/DF))
Date: Thu, 21 Oct 2004 11:45:39 +0200
Subject: [Twisted-Python] Has anybody integrated multiple threadpools into
	reactor?
Message-ID: <788E231C269961418F38D3E360D1652526CA4B@tndefr-ws00021.tenovis.corp.lan>

Hello,

thanks for the hint.

Glyph Lefkowitz wrote:

> I would strongly recommend against using ThreadPool.  Just use
> callInThread - there is already a pool of worker threads.  Starting
> and stopping threadpools with the reactor is difficult to test and
> easy to get wrong.

Could you elaborate a bit on that?  I have the situation that I have
to wrap two C-libs which are essentially wrappers around proprietary
protocols.  They use blocking networked calls so that I'll want to use
threads to make them play nicely with my twisted app.

Now what I'd like to have is two distinct thread(s/ pools) for them.
One of them would have a threadpool size of 1 (one) because the C-lib
isn't threadsafe and I want implicit serialization without being
forced to synchronize explicitly.  My plan was to use a single thread
(no pool) which blocks on a queue 'till it gets request from the
reactor thread.  When it has accomplished its duties it will use
callFromThread to get the results back to the reactor threads.  Could
you tell me where the pitfalls are you mentioned above in this
scenario?


TIA,

aa

-------------- next part --------------
A non-text attachment was scrubbed...
Name: winmail.dat
Type: application/ms-tnef
Size: 2667 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20041021/89b36376/attachment-0002.bin>

From andrew-twisted at puzzling.org  Thu Oct 21 04:31:42 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 21 Oct 2004 12:31:42 +0200
Subject: [Twisted-Python] Has anybody integrated multiple threadpools into
	reactor?
In-Reply-To: <788E231C269961418F38D3E360D1652526CA4B@tndefr-ws00021.tenovis.corp.lan>
References: <788E231C269961418F38D3E360D1652526CA4B@tndefr-ws00021.tenovis.corp.lan>
Message-ID: <20041021103142.GA5125@frobozz>

On Thu, Oct 21, 2004 at 11:45:39AM +0200, Ames Andreas (MPA/DF) wrote:
[...]
> 
> Now what I'd like to have is two distinct thread(s/ pools) for them.
> One of them would have a threadpool size of 1 (one) because the C-lib

If you're using a threadpool of size one, why use a thread pool at all?
Just start a thread.  You don't need (or want) any of the fancy worker
thread management that a thread pool is designed for.

There's nothing in Twisted that requires all your threads run in a Twisted
threadpool; they're just provided for convenience (mainly the convenience of
deferToThread).  If all you need is a single thread, then
    t = threading.Thread(target=foo)
works great.  reactor.callFromThread works from any thread.

In a similar vein, there are times when I've found it simpler to start a
thread for database interactions, rather than use adbapi.  The reason is
much the same: the "pool of workers" model didn't fit what I was trying to
do.

-Andrew.




From fu at donfu.com  Thu Oct 21 10:09:04 2004
From: fu at donfu.com (donfu)
Date: Thu, 21 Oct 2004 18:09:04 +0200
Subject: [Twisted-Python] twisted webdav server
Message-ID: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>

hello twisted

I've been lurking on this list of a couple of weeks now while getting 
accustomed to this wonderful framework, which I plan on using in my 
phd. project.

I searched the archives for a webdav server implementation on top of 
twisted, and it looks like this is a topic that shows up every 6 months 
or so. But the only actual code is to be found here:

     http://article.gmane.org/gmane.comp.python.twisted/6068

It looks a bit half-baked and I'm having trouble in getting it to work.
Is there anyone around with experience in twisting a webdav server?

regards,
stefan.




From glyph at divmod.com  Thu Oct 21 11:35:43 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 21 Oct 2004 13:35:43 -0400
Subject: [Twisted-Python] Has anybody integrated multiple threadpools
	into reactor?
In-Reply-To: <20041021103142.GA5125@frobozz>
References: <788E231C269961418F38D3E360D1652526CA4B@tndefr-ws00021.tenovis.corp.lan>
	<20041021103142.GA5125@frobozz>
Message-ID: <1098380143.3103.19.camel@kazekage>

On Thu, 2004-10-21 at 06:31, Andrew Bennetts wrote:

> There's nothing in Twisted that requires all your threads run in a Twisted
> threadpool; they're just provided for convenience (mainly the convenience of
> deferToThread).  If all you need is a single thread, then
>     t = threading.Thread(target=foo)
> works great.  reactor.callFromThread works from any thread.

I mostly agree with your post, but when is your suggestion not
equivalent to:

	reactor.callInThread(foo)

?




From andrew-twisted at puzzling.org  Thu Oct 21 12:14:21 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 21 Oct 2004 20:14:21 +0200
Subject: [Twisted-Python] Has anybody integrated multiple threadpools into
	reactor?
In-Reply-To: <1098380143.3103.19.camel@kazekage>
References: <788E231C269961418F38D3E360D1652526CA4B@tndefr-ws00021.tenovis.corp.lan>
	<20041021103142.GA5125@frobozz> <1098380143.3103.19.camel@kazekage>
Message-ID: <20041021181421.GB5125@frobozz>

On Thu, Oct 21, 2004 at 01:35:43PM -0400, Glyph Lefkowitz wrote:
> On Thu, 2004-10-21 at 06:31, Andrew Bennetts wrote:
> 
> > There's nothing in Twisted that requires all your threads run in a Twisted
> > threadpool; they're just provided for convenience (mainly the convenience of
> > deferToThread).  If all you need is a single thread, then
> >     t = threading.Thread(target=foo)
> > works great.  reactor.callFromThread works from any thread.
> 
> I mostly agree with your post, but when is your suggestion not
> equivalent to:
> 
> 	reactor.callInThread(foo)

When other things are using the threadpool.

It's possible that e.g. 20 other long-running callInThreads have been made.
With the default threadpool settings, this means this foo wouldn't get run
for a long time.

Of course, if you have 20 threads, you may have other issues ;)

Oh, and using threading.Thread directly allows you to make that thread
daemonic, if you want.

So they're practically the same.  :)

-Andrew.




From yasusii at lowlife.jp  Thu Oct 21 20:44:25 2004
From: yasusii at lowlife.jp (Yasushi Iwata)
Date: Fri, 22 Oct 2004 11:44:25 +0900 (JST)
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
References: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
Message-ID: <20041022.114425.74753643.yasusii@lowlife.jp>

Hi,

On Thu, 21 Oct 2004 18:09:04 +0200 you wrote:

> I searched the archives for a webdav server implementation on top of 
> twisted, and it looks like this is a topic that shows up every 6 months 
> or so. But the only actual code is to be found here:

I wrote WebDAV module for Tiwsted.

  http://akadama.jp/akadav.html

But sorry english documents are not readly. I'll write them in a few
days.





From fu at donfu.com  Fri Oct 22 09:35:28 2004
From: fu at donfu.com (donfu)
Date: Fri, 22 Oct 2004 17:35:28 +0200
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <20041022.114425.74753643.yasusii@lowlife.jp>
References: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041022.114425.74753643.yasusii@lowlife.jp>
Message-ID: <417928C0.10305@donfu.com>

Yasushi Iwata wrote:
>
> I wrote WebDAV module for Tiwsted.
> 
>   http://akadama.jp/akadav.html

Great, I just had a look at it. It seems to work well for serving a 
directory over webdav. However, I'm not quite sure how to adapt it to serve 
dynamic data from a database.

I think I could refactor your WebDAV resource-class, so that it works with 
arbitrary backends. Basically I'd try to factor everything out that does 
explicitly deal with the filesystem. But in a way, that's what a twisted.web 
Resource is in the first place, no? Honestly, I'm a bit confused :)

stefan.



From thomas.weholt at gmail.com  Fri Oct 22 10:08:36 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Fri, 22 Oct 2004 18:08:36 +0200
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <417928C0.10305@donfu.com>
References: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041022.114425.74753643.yasusii@lowlife.jp>
	<417928C0.10305@donfu.com>
Message-ID: <ffb7b7f804102209085ea42e11@mail.gmail.com>

But hey, keep it going; refactor, re-write, do whatever you want to,
just get webdav into the standard twisted-package. That would be
great!! And if one could serve data from a database, not just plain
directories, that would be awsome !!!

I'm jumping with joy!! ( Well, not really, but I'm really excited !!
Web-dav is cool )

Thomas :-)


On Fri, 22 Oct 2004 17:35:28 +0200, donfu <fu at donfu.com> wrote:
> Yasushi Iwata wrote:
> >
> > I wrote WebDAV module for Tiwsted.
> >
> >   http://akadama.jp/akadav.html
> 
> Great, I just had a look at it. It seems to work well for serving a
> directory over webdav. However, I'm not quite sure how to adapt it to serve
> dynamic data from a database.
> 
> I think I could refactor your WebDAV resource-class, so that it works with
> arbitrary backends. Basically I'd try to factor everything out that does
> explicitly deal with the filesystem. But in a way, that's what a twisted.web
> Resource is in the first place, no? Honestly, I'm a bit confused :)
> 
> stefan.
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


-- 
Mvh/Best regards,
Thomas Weholt
http://www.weholt.org



From itamar at itamarst.org  Fri Oct 22 10:12:32 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 22 Oct 2004 12:12:32 -0400
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <417928C0.10305@donfu.com>
References: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041022.114425.74753643.yasusii@lowlife.jp>
	<417928C0.10305@donfu.com>
Message-ID: <1098461551.3244.1.camel@sheriffpony>

On Fri, 2004-10-22 at 11:35, donfu wrote:

> I think I could refactor your WebDAV resource-class, so that it works with 
> arbitrary backends. Basically I'd try to factor everything out that does 
> explicitly deal with the filesystem. But in a way, that's what a twisted.web 
> Resource is in the first place, no? Honestly, I'm a bit confused :)

But that's how WebDAV differs from plain HTTP - it has more actions. At
the very least you'd need to extend Resource to support an extended
range of actions. And if you do you should probably work off
twisted.web2 - but at this point you should probably switch to the
twisted-web mailing list.




From bob at redivi.com  Fri Oct 22 10:31:57 2004
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 22 Oct 2004 12:31:57 -0400
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <ffb7b7f804102209085ea42e11@mail.gmail.com>
References: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041022.114425.74753643.yasusii@lowlife.jp>
	<417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
Message-ID: <E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>


On Oct 22, 2004, at 12:08, Thomas Weholt wrote:

> On Fri, 22 Oct 2004 17:35:28 +0200, donfu <fu at donfu.com> wrote:
>> Yasushi Iwata wrote:
>>>
>>> I wrote WebDAV module for Tiwsted.
>>>
>>>   http://akadama.jp/akadav.html
>>
>> Great, I just had a look at it. It seems to work well for serving a
>> directory over webdav. However, I'm not quite sure how to adapt it to 
>> serve
>> dynamic data from a database.
>>
>> I think I could refactor your WebDAV resource-class, so that it works 
>> with
>> arbitrary backends. Basically I'd try to factor everything out that 
>> does
>> explicitly deal with the filesystem. But in a way, that's what a 
>> twisted.web
>> Resource is in the first place, no? Honestly, I'm a bit confused :)
> But hey, keep it going; refactor, re-write, do whatever you want to,
> just get webdav into the standard twisted-package. That would be
> great!! And if one could serve data from a database, not just plain
> directories, that would be awsome !!!
>
> I'm jumping with joy!! ( Well, not really, but I'm really excited !!
> Web-dav is cool )

This particular package is not going to go into Twisted unless the 
license changes.  LGPL is not compatible with MIT.

-bob




From fu at donfu.com  Fri Oct 22 11:02:02 2004
From: fu at donfu.com (stefan)
Date: Fri, 22 Oct 2004 19:02:02 +0200
Subject: [Twisted-Python] as a side note...
Message-ID: <17FE22FE-244C-11D9-B0B7-000393DC7B7C@donfu.com>

the twisted framework was really a productive environment for me...  
until I found twisted.Quotes

http://svn.twistedmatrix.com/cvs/*checkout*/trunk/doc/fun/ 
Twisted.Quotes?root=Twisted

hilarious :)
stefan.




From grimmtooth at gmail.com  Fri Oct 22 13:20:09 2004
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Fri, 22 Oct 2004 15:20:09 -0400
Subject: [Twisted-Python] as a side note...
In-Reply-To: <17FE22FE-244C-11D9-B0B7-000393DC7B7C@donfu.com>
References: <17FE22FE-244C-11D9-B0B7-000393DC7B7C@donfu.com>
Message-ID: <8f4623fb04102212201d67c0a4@mail.gmail.com>

On Fri, 22 Oct 2004 19:02:02 +0200, stefan <fu at donfu.com> wrote:
> the twisted framework was really a productive environment for me...
> until I found twisted.Quotes
> 
> http://svn.twistedmatrix.com/cvs/*checkout*/trunk/doc/fun/
> Twisted.Quotes?root=Twisted

Oh, great - I need to get stuff done this afternoon, not read ...
oooo, "yogurt is better than Texas."

AAArgh!   Can't ... stop ... reading ...

This is your fault.
-- 
Regards,

    Jeff



From yasusii at lowlife.jp  Fri Oct 22 21:23:23 2004
From: yasusii at lowlife.jp (Yasushi Iwata)
Date: Sat, 23 Oct 2004 12:23:23 +0900 (JST)
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
References: <417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
Message-ID: <20041023.122323.104028643.yasusii@lowlife.jp>

On Fri, 22 Oct 2004 12:31:57 -0400 Bob Ippolito wrote:

> This particular package is not going to go into Twisted unless the 
> license changes.  LGPL is not compatible with MIT.

Some code of akaDAV were adapted from Twisted 1.3.0 which is
distributed under LGPL, so I cannot change the lisence of akaDAV.

I'm glad to change the lincense and contribute what I wrote to Twisted
project. Should I rewrite all the code adapted from Twisted 1.3.0 to
change the license?





From foom at fuhm.net  Fri Oct 22 23:01:20 2004
From: foom at fuhm.net (James Y Knight)
Date: Sat, 23 Oct 2004 01:01:20 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <9481D4D8-24B0-11D9-9668-000A95A50FB2@fuhm.net>

/me looks around innocently.
Oh, you mean Oct 11 wasn't last week? Damn. ;)

James

Bug summary
______________________
Since 2004-10-11 18:03:50.270000:
   Bugs opened: 11   Bugs closed: 6   Total open bugs: 316 (+5)

New / Reopened Bugs
______________________
retrial bugs  (6 days ago)
CLOSED http://www.twistedmatrix.com/bugs/issue751 opened by exarkun

mktap argument and man page  (yesterday)
        http://www.twistedmatrix.com/bugs/issue755 opened by opq

mktap arguments  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue753 opened by kyle

[CORE] Reactor should remove references to already called callbacks 
added by addSystemEventTrigger  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue752 opened by itamarst

[CONCH] conch client can't read password when running in a conch server 
shell  (6 days ago)
        http://www.twistedmatrix.com/bugs/issue750 opened by z3p

conch client writes garbage to known_hosts file  (6 days ago)
        http://www.twistedmatrix.com/bugs/issue749 opened by exarkun

ENOSPC unhandled in lockfile code  (1 week ago)
CLOSED http://www.twistedmatrix.com/bugs/issue748 opened by exarkun

[WIN32] win32 twistd.bat only accepts 9 arguments  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue747 opened by warner

[PATCH] added timeout and error checking logic to smtp.py  (yesterday)
        http://www.twistedmatrix.com/bugs/issue756 opened by bkirsch

[DOCUMENTATION, TWISTD] examples not using reactor.run() should point 
to twistd  (2 days ago)
        http://www.twistedmatrix.com/bugs/issue754 opened by dpollet

Scheduleing Example Doesn't work as expected  (1 week ago)
CLOSED http://www.twistedmatrix.com/bugs/issue746 opened by maethor

Bugs Closed
______________________
retrial bugs  (6 days ago)
        http://www.twistedmatrix.com/bugs/issue751 opened by exarkun

SMTP Client upgrade and bug fixes  (2 weeks ago)
        http://www.twistedmatrix.com/bugs/issue735 opened by bkirsch

[ENTERPRISE] twisted.enterprise.util.quote doesn't quotes unicode 
strings  (2 months ago)
        http://www.twistedmatrix.com/bugs/issue675 opened by akhavr

[MAIL] smtp.py does not capture errors if SSL or AUTH required and not 
enabled on server  (2 months ago)
        http://www.twistedmatrix.com/bugs/issue683 opened by bkirsch

ENOSPC unhandled in lockfile code  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue748 opened by exarkun

Scheduleing Example Doesn't work as expected  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue746 opened by maethor




From slyphon at twistedmatrix.com  Sat Oct 23 00:08:21 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sat, 23 Oct 2004 00:08:21 -0600
Subject: [Twisted-Python] ANN: deferred howto/tutorial
Message-ID: <20041023060821.GA8407@pyramid.twistedmatrix.com>

Hello all,

I was sitting at Jury Duty today, trying to keep myself from the
inevitable thoughts of suicide, and I started thinking about how to
implement deferreds in C#. I started out by thinking about the logic one
would need to use to implement deferreds in python. I wrote out in my
notebook an implementation and when I got back home, I was suprised to
discover that I wasn't terribly far off. I reflected upon this, and
about what had confused me for so long about deferreds in general.

...and I was really stumped... ;)

Deferreds are simple and elegant. After rewriting trial and dealing with
all of its crazy exception handling, I realised that a lot of that code
could have been made more succinct (if not more understandable) had it
used deferreds to do the error handling and decision making.

I think the thing that confuses most newbies is that deferreds to them
seem like this BLACK BOX. It's this mysterious thing that is going to
CALL YOUR CODE, and the rules about chaining and errback and callback
chains are quite intimidating if you don't have a chunk of familiar
looking code to transition you from python to
Deferredy-Looking-Kool-Aid-Land.

So what i did was write a tutorial on my deferred enlightenment...(pun
intended?) 

I'd appreciate feedback, good or bad. You can find it in svn:HEAD,
at doc/core/howto/tutorial/deferred_tutorial.xhtml


Cheers!
Jonathan D. Simms
slyphon AT twistedmatrix DOT com




From slyphon at twistedmatrix.com  Sat Oct 23 00:10:44 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sat, 23 Oct 2004 00:10:44 -0600
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <20041022.114425.74753643.yasusii@lowlife.jp>
References: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041022.114425.74753643.yasusii@lowlife.jp>
Message-ID: <20041023061044.GB8407@pyramid.twistedmatrix.com>

On Fri, Oct 22, 2004 at 11:44:25AM +0900, Yasushi Iwata wrote:
> Hi,
> 
> On Thu, 21 Oct 2004 18:09:04 +0200 you wrote:
> 
> > I searched the archives for a webdav server implementation on top of 
> > twisted, and it looks like this is a topic that shows up every 6 months 
> > or so. But the only actual code is to be found here:
> 
> I wrote WebDAV module for Tiwsted.
> 
>   http://akadama.jp/akadav.html

slyphon *BOGGLES*

really? based on http or ftp or what?

webdav has been on the TODO-eventually list for as long as I've been
lurking in #twisted!

way to go!

-Jonathan
 



From tv at twistedmatrix.com  Sat Oct 23 01:44:53 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 23 Oct 2004 10:44:53 +0300
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <20041023.122323.104028643.yasusii@lowlife.jp>
References: <417928C0.10305@donfu.com>	<ffb7b7f804102209085ea42e11@mail.gmail.com>	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
	<20041023.122323.104028643.yasusii@lowlife.jp>
Message-ID: <417A0BF5.1030707@twistedmatrix.com>

Yasushi Iwata wrote:
>>This particular package is not going to go into Twisted unless the 
>>license changes.  LGPL is not compatible with MIT.
> Some code of akaDAV were adapted from Twisted 1.3.0 which is
> distributed under LGPL, so I cannot change the lisence of akaDAV.
> 
> I'm glad to change the lincense and contribute what I wrote to Twisted
> project. Should I rewrite all the code adapted from Twisted 1.3.0 to
> change the license?

Well, assuming the parts you adapted from 1.3.0 haven't changed much
since, you could just take the changes between 1.3.0 and SVN HEAD, and
say you adapted the code from the MIT-licensed source.

If you had to copy a _lot_ of code from Twisted to your project, there's
a totally different problem from licensing. Copy-paste coding is evil,
and code duplication should be refactored out.



From mary-twisted at puzzling.org  Sat Oct 23 01:57:12 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 23 Oct 2004 09:57:12 +0200
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <417A0BF5.1030707@twistedmatrix.com>
References: <417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
	<20041023.122323.104028643.yasusii@lowlife.jp>
	<417A0BF5.1030707@twistedmatrix.com>
Message-ID: <20041023075712.GC4690@fuchsia.puzzling.org>

On Sat, Oct 23, 2004, Tommi Virtanen wrote:
> If you had to copy a _lot_ of code from Twisted to your project, there's
> a totally different problem from licensing. Copy-paste coding is evil,
> and code duplication should be refactored out.

I don't know the situation at all, but I have a LGPL licenced project
that is so because I adapted code I copied from the documentation :(

-Mary



From gwyn.evans at gmail.com  Sat Oct 23 07:24:24 2004
From: gwyn.evans at gmail.com (Gwyn Evans)
Date: Sat, 23 Oct 2004 14:24:24 +0100
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023060821.GA8407@pyramid.twistedmatrix.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
Message-ID: <c0312f5d041023062475d9953f@mail.gmail.com>

On Sat, 23 Oct 2004 00:08:21 -0600, Jonathan Simms
<slyphon at twistedmatrix.com> wrote:
> So what i did was write a tutorial on my deferred enlightenment...(pun
> intended?)
> 
> I'd appreciate feedback, good or bad. You can find it in svn:HEAD,
> at doc/core/howto/tutorial/deferred_tutorial.xhtml

 Therefore also available at
http://svn.twistedmatrix.com/cvs/*checkout*/trunk/doc/core/howto/tutorial/deferred_tutorial.xhtml?rev=12147&root=Twisted
via the Web interface, if you've not got a subversion client
installed.

 Thanks, Jonathon - I've not sat & gone through it yet, but a quick
glance suggested it's going to be useful!



From yasusii at lowlife.jp  Sat Oct 23 07:41:23 2004
From: yasusii at lowlife.jp (Yasushi Iwata)
Date: Sat, 23 Oct 2004 22:41:23 +0900 (JST)
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <20041023061044.GB8407@pyramid.twistedmatrix.com>
References: <8792183E-237B-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041022.114425.74753643.yasusii@lowlife.jp>
	<20041023061044.GB8407@pyramid.twistedmatrix.com>
Message-ID: <20041023.224123.74755452.yasusii@lowlife.jp>

On Sat, 23 Oct 2004 00:10:44 -0600 Jonathan Simms wrote:

> really? based on http or ftp or what?

I overrided twisted.web.server.Request and
twisted.web.static.File. It's upper-compatible to static file web
server.

But I should improve the code to work with arbitrary backends just
like stefan said.




From gwyn.evans at gmail.com  Sat Oct 23 07:46:43 2004
From: gwyn.evans at gmail.com (Gwyn Evans)
Date: Sat, 23 Oct 2004 14:46:43 +0100
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <c0312f5d041023062475d9953f@mail.gmail.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<c0312f5d041023062475d9953f@mail.gmail.com>
Message-ID: <c0312f5d04102306465ba32b37@mail.gmail.com>

And examples below
http://svn.twistedmatrix.com/cvs/trunk/doc/core/howto/listings/deferred/?root=Twisted



From missive at hotmail.com  Sat Oct 23 08:22:12 2004
From: missive at hotmail.com (Lee Harr)
Date: Sat, 23 Oct 2004 18:52:12 +0430
Subject: [Twisted-Python] two deferred_tutorial patches
Message-ID: <BAY2-F27F1P4f7LXXcb0000eae4@hotmail.com>

The first catches a bit more of the output from
deferred_ex3.py which makes a bit more sense:

Index: doc/core/howto/tutorial/deferred_tutorial.xhtml
===================================================================
--- doc/core/howto/tutorial/deferred_tutorial.xhtml     (revision 12146)
+++ doc/core/howto/tutorial/deferred_tutorial.xhtml     (working copy)
@@ -157,6 +157,9 @@
   File "./deferred_ex2.py", line 35, in failAtHandlingResult
     raise RuntimeError, "whoops! we encountered an error"
exceptions.RuntimeError: whoops! we encountered an error
+
+callback 3
+        got result: okay, continue on
</pre>

<h2>addBoth: the deferred version of <em>finally</em></h2>




Actually, now that I look at it ... the output in the text
is just from the wrong program:

Index: doc/core/howto/tutorial/deferred_tutorial.xhtml
===================================================================
--- doc/core/howto/tutorial/deferred_tutorial.xhtml     (revision 12146)
+++ doc/core/howto/tutorial/deferred_tutorial.xhtml     (working copy)
@@ -147,16 +147,22 @@
<pre>
callback 1
         got result: success
+callback 2
+        got result: yay! handleResult was successful!
         about to raise exception
errback
we got an exception: Traceback (most recent call last):
---- &lt;exception caught here&gt; ---
-  File "/home/slyphon/Projects/Twisted/trunk/twisted/internet/defer.py", 
line
-326, in _runCallbacks
-    self.result = callback(self.result, *args, **kw)
-  File "./deferred_ex2.py", line 35, in failAtHandlingResult
+  File "deferred_ex3.py", line 94, in ?
+    behindTheScenes("success")
+--- <exception caught here> ---
+  File "deferred_ex3.py", line 57, in behindTheScenes
+    result = failAtHandlingResult(result)
+  File "deferred_ex3.py", line 34, in failAtHandlingResult
     raise RuntimeError, "whoops! we encountered an error"
exceptions.RuntimeError: whoops! we encountered an error
+
+callback 3
+        got result: okay, continue on
</pre>

<h2>addBoth: the deferred version of <em>finally</em></h2>




And the second one makes the tutorial look right
when loaded from the filesystem.  I have a feeling
I am supposed to start a webserver or process
these files somehow, but this was easier for me...


Index: doc/core/howto/tutorial/deferred_tutorial.xhtml
===================================================================
--- doc/core/howto/tutorial/deferred_tutorial.xhtml     (revision 12146)
+++ doc/core/howto/tutorial/deferred_tutorial.xhtml     (working copy)
@@ -1,6 +1,7 @@
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html> <head>
<title>Deferreds are beautiful! (A Tutorial)</title>
+<link type="text/css" rel="stylesheet" href="../stylesheet.css" />
</head>

<body>
@@ -27,7 +28,7 @@

First, a simple example so that we have something to talk about:

-<a href="../listings/deferred/deferred_ex.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex.py" 
class="py-listing">deferred_ex.py</a>

<p>And the output: (since both methods in the example produce the same 
output,
it will only be shown once.) </p>
@@ -56,7 +57,7 @@
returned the deferred needs to alert the callback chain that an error
has occurred.</p>

-<a href="../listings/deferred/deferred_ex1a.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex1a.py" 
class="py-listing">deferred_ex1a.py</a>

<pre>
errback
@@ -80,7 +81,7 @@
<p>Now let's see what happens when <em>our callback</em> raises an
exception</p>

-<a href="../listings/deferred/deferred_ex1b.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex1b.py" 
class="py-listing">deferred_ex1b.py</a>

<p>And the output: (note, tracebacks will be edited slightly to conserve
space)</p>
@@ -112,7 +113,7 @@
errback in the chain. If the chain is started off with a failure, the first
method to be called will be the first errback.</p>

-<a href="../listings/deferred/deferred_ex2.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex2.py" 
class="py-listing">deferred_ex2.py</a>

<pre>
callback 1
@@ -142,7 +143,7 @@
failure or raise an exception) the chain continues on with the next
callback.</p>

-<a href="../listings/deferred/deferred_ex3.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex3.py" 
class="py-listing">deferred_ex3.py</a>

<pre>
callback 1
@@ -168,7 +169,7 @@
returning the value that it received to allow processing the chain to
continue, but appearing transparent in terms of the result.</p>

-<a href="../listings/deferred/deferred_ex4.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex4.py" 
class="py-listing">deferred_ex4.py</a>

<pre>
callback 1
@@ -205,7 +206,7 @@
addCallback followed by an addErrback.</p>


-<a href="../listings/deferred/deferred_ex5.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex5.py" 
class="py-listing">deferred_ex5.py</a>

<pre>
callback 1
@@ -227,7 +228,7 @@
processing in response to the error, we would have used a passthru, and
returned the failure we received, as we see in this next example: </p>

-<a href="../listings/deferred/deferred_ex6.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex6.py" 
class="py-listing">deferred_ex6.py</a>

<pre>
callback 1
@@ -258,7 +259,7 @@
beforehand and then executes it, the other executes the chain as it is being
constructed.  This is because deferreds are <em>stateful</em>.  </p>

-<a href="../listings/deferred/deferred_ex7.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex7.py" 
class="py-listing">deferred_ex7.py</a>

<pre>
callback 1
@@ -309,7 +310,7 @@
processing chain will become the result that gets passed to the next 
callback
of the primary deferreds processing chain </p>

-<a href="../listings/deferred/deferred_ex8.py" class="py-listing"></a>
+<a href="../listings/deferred/deferred_ex8.py" 
class="py-listing">deferred_ex8.py</a>

<pre>
callback 1



Thanks for your time.

_________________________________________________________________
Express yourself instantly with MSN Messenger! Download today it's FREE! 
http://messenger.msn.com/




From tv at twistedmatrix.com  Sat Oct 23 09:09:06 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 23 Oct 2004 18:09:06 +0300
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <20041023075712.GC4690@fuchsia.puzzling.org>
References: <417928C0.10305@donfu.com>	<ffb7b7f804102209085ea42e11@mail.gmail.com>	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>	<20041023.122323.104028643.yasusii@lowlife.jp>	<417A0BF5.1030707@twistedmatrix.com>
	<20041023075712.GC4690@fuchsia.puzzling.org>
Message-ID: <417A7412.1090405@twistedmatrix.com>

Mary Gardiner wrote:
> I don't know the situation at all, but I have a LGPL licenced project
> that is so because I adapted code I copied from the documentation :(

Well, the code is in the docs in the MIT version, too. You just need
to take your changes and apply them to a newer version of the code in
docs.




From mary-twisted at puzzling.org  Sat Oct 23 09:22:10 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 23 Oct 2004 17:22:10 +0200
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <417A7412.1090405@twistedmatrix.com>
References: <417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
	<20041023.122323.104028643.yasusii@lowlife.jp>
	<417A0BF5.1030707@twistedmatrix.com>
	<20041023075712.GC4690@fuchsia.puzzling.org>
	<417A7412.1090405@twistedmatrix.com>
Message-ID: <20041023152210.GH4690@fuchsia.puzzling.org>

On Sat, Oct 23, 2004, Tommi Virtanen wrote:
> Well, the code is in the docs in the MIT version, too. You just need
> to take your changes and apply them to a newer version of the code in
> docs.

The full derivation tree is this:
 |
 -> Woven docs
  |
  -> my first change
   |
   -> my second change, a port to Nevow

The Woven docs should be unchanged since the re-licence, but I'm unclear
on whether that means I can MIT licence my code base, since I made
derivations before the licence change.

-Mary



From bob at redivi.com  Sat Oct 23 09:50:19 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 23 Oct 2004 11:50:19 -0400
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <20041023152210.GH4690@fuchsia.puzzling.org>
References: <417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
	<20041023.122323.104028643.yasusii@lowlife.jp>
	<417A0BF5.1030707@twistedmatrix.com>
	<20041023075712.GC4690@fuchsia.puzzling.org>
	<417A7412.1090405@twistedmatrix.com>
	<20041023152210.GH4690@fuchsia.puzzling.org>
Message-ID: <3DA609BC-250B-11D9-A658-000A95BA5446@redivi.com>


On Oct 23, 2004, at 11:22, Mary Gardiner wrote:

> On Sat, Oct 23, 2004, Tommi Virtanen wrote:
>> Well, the code is in the docs in the MIT version, too. You just need
>> to take your changes and apply them to a newer version of the code in
>> docs.
>
> The full derivation tree is this:
>  |
>  -> Woven docs
>   |
>   -> my first change
>    |
>    -> my second change, a port to Nevow
>
> The Woven docs should be unchanged since the re-licence, but I'm 
> unclear
> on whether that means I can MIT licence my code base, since I made
> derivations before the licence change.

You always have copyright on anything that you write, unless you 
explicitly give that away.  Of course you can.

-bob





From itamar at itamarst.org  Sat Oct 23 10:06:53 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 23 Oct 2004 12:06:53 -0400
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <3DA609BC-250B-11D9-A658-000A95BA5446@redivi.com>
References: <417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
	<20041023.122323.104028643.yasusii@lowlife.jp>
	<417A0BF5.1030707@twistedmatrix.com>
	<20041023075712.GC4690@fuchsia.puzzling.org>
	<417A7412.1090405@twistedmatrix.com>
	<20041023152210.GH4690@fuchsia.puzzling.org>
	<3DA609BC-250B-11D9-A658-000A95BA5446@redivi.com>
Message-ID: <1098547613.4419.1.camel@sheriffpony>

On Sat, 2004-10-23 at 11:50, Bob Ippolito wrote:

> You always have copyright on anything that you write, unless you 
> explicitly give that away.  Of course you can.

And it's not like the original copyright holder on the LGPLed code (i.e.
Glyph) is going to hunt you down, seeing that he relicensed it and all
:) Plus I bet he's too busy to hire Australian lawyers.




From mary-twisted at puzzling.org  Sat Oct 23 11:37:49 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 23 Oct 2004 19:37:49 +0200
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <3DA609BC-250B-11D9-A658-000A95BA5446@redivi.com>
References: <417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
	<20041023.122323.104028643.yasusii@lowlife.jp>
	<417A0BF5.1030707@twistedmatrix.com>
	<20041023075712.GC4690@fuchsia.puzzling.org>
	<417A7412.1090405@twistedmatrix.com>
	<20041023152210.GH4690@fuchsia.puzzling.org>
	<3DA609BC-250B-11D9-A658-000A95BA5446@redivi.com>
Message-ID: <20041023173749.GI4690@fuchsia.puzzling.org>

On Sat, Oct 23, 2004, Bob Ippolito wrote:
> You always have copyright on anything that you write, unless you
> explicitly give that away.  Of course you can.

Yes of course, but it's a derived work. The only reason I could create
it at all was due to the licence of Twisted at the time, which required
that if I did so I released under the LGPL. I can't relicence derived
works at will unless the copyright holder permits it, and at the time he
didn't. He's since permitted relicencing of derived works starting about
two months ago, I was off and away by then.

In practice because the *exact same code* is *now* available under the
MIT licence I probably will relicence (as the Divmod people did, for
example), but this requires an assumption of good faith under my very
bad understanding of copyright law internationally (I used a US machine
in production of the code -- exactly where Glyph would need his lawyers
is unclear).

-Mary



From mary-twisted at puzzling.org  Sat Oct 23 12:29:20 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 23 Oct 2004 20:29:20 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023060821.GA8407@pyramid.twistedmatrix.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
Message-ID: <20041023182920.GL4690@fuchsia.puzzling.org>

On Sat, Oct 23, 2004, Jonathan Simms wrote:
> So what i did was write a tutorial on my deferred enlightenment...(pun
> intended?) 
> 
> I'd appreciate feedback, good or bad. You can find it in svn:HEAD,
> at doc/core/howto/tutorial/deferred_tutorial.xhtml

That's not the place for it unfortunately, everything else in that
directory is the finger tutorial. (ie it's not a general "tutorials"
directory... but that's OK, the "howto" directory isn't really full of
howtos either...)

As best I can tell, there's no clear distinction between that and the
"Using Deferreds" howto a directory up. I'll play around with merging
them over the next hour or so and see if I'm right.

-Mary



From mary-twisted at puzzling.org  Sat Oct 23 13:19:30 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 23 Oct 2004 21:19:30 +0200
Subject: [Twisted-Python] Help needed: good async design
Message-ID: <20041023191930.GM4690@fuchsia.puzzling.org>

I've just been messing about with the async howto and decided that half
of it should be broken out into a "designing libraries for use with
Twisted" document. Since I haven't actually done very much of this, help
appreciated, including but not limited to pointers to the very best
design inside the Twisted codebase, and IRC rants.

Grab me during the European daytime or leave a message on issue 504.

Thanks,

Mary



From fu at donfu.com  Sat Oct 23 14:40:40 2004
From: fu at donfu.com (stefan)
Date: Sat, 23 Oct 2004 22:40:40 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023060821.GA8407@pyramid.twistedmatrix.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
Message-ID: <CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>

> So what i did was write a tutorial on my deferred enlightenment...(pun
> intended?)

My way to grok deferreds was a detoured as well, when I started using 
twisted two months ago.
First thing, I tried to avoid them. Until I reached a point where you 
wouldn't get to all that candy functionallity witouth using them. Then 
I found twisted.flow and thought this concept was much clearer to me. I 
used it and my code somehow worked. Until it didn't work anymore, and 
then I was screwed. Someone told me, I should rather use defgen, which 
I did. But when exeptions vanished in looping yields that yielded 
loops, I was lost again. At that point I rewrote the whole database 
backend using plain old deferreds. And then I understood them. Because 
they are simple and elegant, once you get the concept.

What I missed in the docs, was a bit more concrete examples and styles 
of how to use deferreds in slightly more complex code. Most of the code 
is not class based, and you don't find branching or looping code that 
deals with deferreds. Both is not terribly difficult, but at first you 
really don't dare to know how a loop with deferreds will looks like.

What I also would like to see is some coding practices of how to style 
deferred code. I got used to inner functions in class methods, which 
for me looks clearest, but I'm sure there are other practices. A short 
discussion on that in the docs would be great. I've attached an example 
of my style, maybe someone with a different style can rewrite the 
example and comment on pros and cons?
---------------------------------------------------------------
class X:
     ...
     def y(self):
         # do some method initialisation
         ...
         # callbacks
         def oneBack(result):
               # extract someParams out of result
               ...
               return self.somethingDeferred().addCallback(twoBack, 
someParams)

         def twoBack(result, someParams):
               return "Foo" or raise Bar()

         return self.somethingDeferred().addCallback(oneBack)
---------------------------------------------------------------

regards
stefan.




From andrew-twisted at puzzling.org  Sat Oct 23 15:23:24 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 23 Oct 2004 23:23:24 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
Message-ID: <20041023212324.GA5033@frobozz>

On Sat, Oct 23, 2004 at 10:40:40PM +0200, stefan wrote:
[...]
> What I also would like to see is some coding practices of how to style 
> deferred code. I got used to inner functions in class methods, which 
> for me looks clearest, but I'm sure there are other practices. A short 
> discussion on that in the docs would be great. I've attached an example 
> of my style, maybe someone with a different style can rewrite the 
> example and comment on pros and cons?
> ---------------------------------------------------------------
> class X:
>     ...
>     def y(self):
>         # do some method initialisation
>         ...
>         # callbacks
>         def oneBack(result):
[...]
>         return self.somethingDeferred().addCallback(oneBack)
> ---------------------------------------------------------------

There's a cryptic note here that partly explains the usual style within
Twisted itself:
    http://twistedmatrix.com/documents/howto/policy/coding-standard#auto13

Twisted style is usually:

class X:
    def y(self):
        ...
        return self.somethingDeferred().addCallback(self._cbOneBack)

    def _cbOneBack(self, result):
        ...

I believe the main reason for this is flexibility.  Code in Twisted tends to
be framework code or library code, rather than an actual application, so it
is written with re-use in mind.  You can't override a callback that's
embedded within a method without overriding the whole method; making the
callback a method on the class solves that.  The "_cb" or "_eb" prefix
signals that it's intended to be used as the callback or errback for
something, and also that it's not an ordinary method that you would call
directly.

It also has other secondary advantages, like making setting breakpoints in
pdb easier, although I can't say I've taken advantage of that very often (I
typically set breakpoints by inserting "import pdb; pdb.set_trace()"), but
I imagine some other developers have.

A more important advantage (if you are strict on testing) is that you can
unit test the behaviour of the callback more easily if you can call it
directly.

If nothing else, I like my functions to be as short as possible, and
embedding a large callback within a method means I now have two large
functions (the embedded function, and the method that contains it), rather
than just one.

The obvious disadvantage compared to your style is the loss of the direct
visual association of which callbacks relate to which deferreds.  I'd be
moderately interested in hearing how other people cope with that, but I
haven't really found it to be a problem.  I expect that if I did, I'd just
put comments like "# callback for deferred from self.frobnicate" at the top
of each callback and errback.  Large, hard-to-navigate classes with lots of
methods can be a sign of a suboptimal design anyway.

-Andrew.




From mary-twisted at puzzling.org  Sat Oct 23 15:37:19 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 23 Oct 2004 23:37:19 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023212324.GA5033@frobozz>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041023212324.GA5033@frobozz>
Message-ID: <20041023213719.GQ4690@fuchsia.puzzling.org>

On Sat, Oct 23, 2004, Andrew Bennetts wrote:
> The obvious disadvantage compared to your style is the loss of the
> direct visual association of which callbacks relate to which
> deferreds.  I'd be moderately interested in hearing how other people
> cope with that

I find it's a problem when you start chaining deferreds by returning
deferred from callbacks: not so much that it's difficult to find out
where the callback is added, but that there's no visual representation
that corresponds to the "nesting" of the callbacks.

-Mary



From golux at comcast.net  Sat Oct 23 15:44:35 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Sat, 23 Oct 2004 17:44:35 -0400
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023213719.GQ4690@fuchsia.puzzling.org>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>	<20041023212324.GA5033@frobozz>
	<20041023213719.GQ4690@fuchsia.puzzling.org>
Message-ID: <417AD0C3.9000002@comcast.net>

Mary Gardiner wrote:
> On Sat, Oct 23, 2004, Andrew Bennetts wrote:
> 
>>The obvious disadvantage compared to your style is the loss of the
>>direct visual association of which callbacks relate to which
>>deferreds.  I'd be moderately interested in hearing how other people
>>cope with that
> 
> I find it's a problem when you start chaining deferreds by returning
> deferred from callbacks: not so much that it's difficult to find out
> where the callback is added, but that there's no visual representation
> that corresponds to the "nesting" of the callbacks.

I like to think of it as the asynchronous form of
"pipes and filters", so chaining deferreds seems quite
logical to me.

Steve



From serj_trejo at hotmail.com  Sat Oct 23 15:57:06 2004
From: serj_trejo at hotmail.com (Sergio Trejo)
Date: Sat, 23 Oct 2004 17:57:06 -0400
Subject: [Twisted-Python] twisted webdav server
Message-ID: <BAY12-F16gvR0AWIeEG0000c4c3@hotmail.com>

I concur -- WebDAV rocks!

Serg

>From: Thomas Weholt <thomas.weholt at gmail.com>
>Reply-To: 2002 at weholt.org,Twisted general discussion 
><twisted-python at twistedmatrix.com>
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Subject: Re: [Twisted-Python] twisted webdav server
>Date: Fri, 22 Oct 2004 18:08:36 +0200
>
>But hey, keep it going; refactor, re-write, do whatever you want to,
>just get webdav into the standard twisted-package. That would be
>great!! And if one could serve data from a database, not just plain
>directories, that would be awsome !!!
>
>I'm jumping with joy!! ( Well, not really, but I'm really excited !!
>Web-dav is cool )
>
>Thomas :-)
>
>
>On Fri, 22 Oct 2004 17:35:28 +0200, donfu <fu at donfu.com> wrote:
> > Yasushi Iwata wrote:
> > >
> > > I wrote WebDAV module for Tiwsted.
> > >
> > >   http://akadama.jp/akadav.html
> >
> > Great, I just had a look at it. It seems to work well for serving a
> > directory over webdav. However, I'm not quite sure how to adapt it to 
>serve
> > dynamic data from a database.
> >
> > I think I could refactor your WebDAV resource-class, so that it works 
>with
> > arbitrary backends. Basically I'd try to factor everything out that does
> > explicitly deal with the filesystem. But in a way, that's what a 
>twisted.web
> > Resource is in the first place, no? Honestly, I'm a bit confused :)
> >
> > stefan.
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
>
>--
>Mvh/Best regards,
>Thomas Weholt
>http://www.weholt.org
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_________________________________________________________________
Protect your PC - get McAfee.com VirusScan Online 
http://clinic.mcafee.com/clinic/ibuy/campaign.asp?cid=3963




From andrew-twisted at puzzling.org  Sat Oct 23 16:06:50 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 24 Oct 2004 00:06:50 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <417AD0C3.9000002@comcast.net>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041023212324.GA5033@frobozz>
	<20041023213719.GQ4690@fuchsia.puzzling.org>
	<417AD0C3.9000002@comcast.net>
Message-ID: <20041023220650.GB5033@frobozz>

On Sat, Oct 23, 2004 at 05:44:35PM -0400, Stephen Waterbury wrote:
> Mary Gardiner wrote:
> >On Sat, Oct 23, 2004, Andrew Bennetts wrote:
> >
> >>The obvious disadvantage compared to your style is the loss of the
> >>direct visual association of which callbacks relate to which
> >>deferreds.  I'd be moderately interested in hearing how other people
> >>cope with that
> >
> >I find it's a problem when you start chaining deferreds by returning
> >deferred from callbacks: not so much that it's difficult to find out
> >where the callback is added, but that there's no visual representation
> >that corresponds to the "nesting" of the callbacks.
> 
> I like to think of it as the asynchronous form of
> "pipes and filters", so chaining deferreds seems quite
> logical to me.

That's how I think of it too.  However, if you layout code like stefan does
(placing callback definitions inside the other function definitions), then
you will get visually nested callbacks.  I suppose that's another argument
against defining callbacks within functions ;)

[Sidenote: in my usual mental model, "nesting" would be something you do
with deferreds, rather than callbacks, i.e. it's what happens when a
callback of one deferred returns some other deferred.  And then there's
"chaining" Deferreds with the "chainDeferred" method, which I always have to
read the implementation of to figure out which way round I need to call it.]

-Andrew.




From mary-twisted at puzzling.org  Sat Oct 23 16:36:04 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 24 Oct 2004 00:36:04 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <417AD0C3.9000002@comcast.net>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041023212324.GA5033@frobozz>
	<20041023213719.GQ4690@fuchsia.puzzling.org>
	<417AD0C3.9000002@comcast.net>
Message-ID: <20041023223604.GR4690@fuchsia.puzzling.org>

On Sat, Oct 23, 2004, Stephen Waterbury wrote:
> so chaining deferreds seems quite logical to me.

It's not that I don't find it logical, it's that the visual layout
diverges from the logic.

-Mary



From golux at comcast.net  Sat Oct 23 16:50:15 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Sat, 23 Oct 2004 18:50:15 -0400
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023223604.GR4690@fuchsia.puzzling.org>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>	<20041023212324.GA5033@frobozz>	<20041023213719.GQ4690@fuchsia.puzzling.org>	<417AD0C3.9000002@comcast.net>
	<20041023223604.GR4690@fuchsia.puzzling.org>
Message-ID: <417AE027.6010701@comcast.net>

Mary Gardiner wrote:
> On Sat, Oct 23, 2004, Stephen Waterbury wrote:
>>so chaining deferreds seems quite logical to me.
> 
> It's not that I don't find it logical, it's that the visual layout
> diverges from the logic.

That's what I meant -- ISTM the visual layout *does* convey
the logic well.  Sorry about the indefinite antecedent.
Guess not everyone's visual metaphors are mapped the same.  :)

Steve



From glyph at divmod.com  Sat Oct 23 17:45:08 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 23 Oct 2004 19:45:08 -0400
Subject: [Twisted-Python] twisted webdav server
In-Reply-To: <20041023152210.GH4690@fuchsia.puzzling.org>
References: <417928C0.10305@donfu.com>
	<ffb7b7f804102209085ea42e11@mail.gmail.com>
	<E470CA68-2447-11D9-9963-000A95BA5446@redivi.com>
	<20041023.122323.104028643.yasusii@lowlife.jp>
	<417A0BF5.1030707@twistedmatrix.com>
	<20041023075712.GC4690@fuchsia.puzzling.org>
	<417A7412.1090405@twistedmatrix.com>
	<20041023152210.GH4690@fuchsia.puzzling.org>
Message-ID: <1098575108.10111.1.camel@localhost>

On Sat, 2004-10-23 at 17:22 +0200, Mary Gardiner wrote:

> The Woven docs should be unchanged since the re-licence, but I'm unclear
> on whether that means I can MIT licence my code base, since I made
> derivations before the licence change.

Mary,

If you want to MIT license that code, you can.  If it would help, we can
have a retroactive 1.3.0L release that changes nothing but the license.




From tv at twistedmatrix.com  Sun Oct 24 02:08:38 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sun, 24 Oct 2004 11:08:38 +0300
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
Message-ID: <417B6306.9070707@twistedmatrix.com>

stefan wrote:
> discussion on that in the docs would be great. I've attached an example 
> of my style, maybe someone with a different style can rewrite the 
> example and comment on pros and cons?
> ---------------------------------------------------------------
> class X:
>     ...
>     def y(self):
>         # do some method initialisation
>         ...
>         # callbacks
>         def oneBack(result):
>               # extract someParams out of result
>               ...
>               return self.somethingDeferred().addCallback(twoBack, 
> someParams)
> 
>         def twoBack(result, someParams):
>               return "Foo" or raise Bar()
> 
>         return self.somethingDeferred().addCallback(oneBack)
> ---------------------------------------------------------------

I still prefer

d = self.somethingDeferred()
d.addCallback(oneBack)
return d

mostly because I tend to vomit when I see moshez write
something like

return self.somethingDeferred(foo, bar, baz, thud,
     quux).addCallback(oneBack, bar, baz,
     ).addErrback(twoBack, baz).addBoth(threeBack,
     foo)

Also, I tend to use nested functions for small and mostly
trivial things, like

def firstOne((a,b)):
     return a

and class-level functions for anything more complicated.
Whenever it is not absolutely clear from the context that
a function is a callback, I prefix the name with "cb", and
if it's a class-level function, I start the name with an
underscore to mark it an implementation detail.

class X:
     ...

     def _cbOneBack(self, result):
           ...
           d = self.somethingDeferred()

           def format(result, someParams):
                 return "Result is %r, %r" % (result, someParams)
           d.addCallback(format, someParams)

           return d

     def y(self):
         ...
         d = self.somethingDeferred()
         d.addCallback(self._cbOneBack)
         return d



From fu at donfu.com  Sun Oct 24 02:53:45 2004
From: fu at donfu.com (stefan)
Date: Sun, 24 Oct 2004 10:53:45 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <417B6306.9070707@twistedmatrix.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
	<417B6306.9070707@twistedmatrix.com>
Message-ID: <36CC755A-259A-11D9-B0B7-000393DC7B7C@donfu.com>

On 24.10.2004, at 10:08, Tommi Virtanen wrote:
>     def _cbOneBack(self, result):
>           ...
>           d = self.somethingDeferred()
>
>           def format(result, someParams):
>                 return "Result is %r, %r" % (result, someParams)
>           d.addCallback(format, someParams)
>
>           return d

This is a nice visualization of the logical flow, much better than my 
first version.

> Also, I tend to use nested functions for small and mostly trivial 
> things

Make sense. A complex callback of course deserves it's own method. I 
just don't like cluttering up my class-namespace with three mostly 
trivial callbacks/errbacks per method.

Thanks for everyone's feedback on the topic! And thanks for pointing 
out the "twisted-way" in the coding standards doc.
stefan.




From slyphon at twistedmatrix.com  Sun Oct 24 06:12:44 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sun, 24 Oct 2004 06:12:44 -0600
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023182920.GL4690@fuchsia.puzzling.org>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<20041023182920.GL4690@fuchsia.puzzling.org>
Message-ID: <20041024121244.GA30581@pyramid.twistedmatrix.com>

On Sat, Oct 23, 2004 at 08:29:20PM +0200, Mary Gardiner wrote:
 
> That's not the place for it unfortunately, everything else in that
> directory is the finger tutorial. (ie it's not a general "tutorials"
> directory... but that's OK, the "howto" directory isn't really full of
> howtos either...)
> 
> As best I can tell, there's no clear distinction between that and the
> "Using Deferreds" howto a directory up. I'll play around with merging
> them over the next hour or so and see if I'm right.
> 
> -Mary
> 

Yeah, i'm sorry, Mary. I had a feeling that I was putting stuff in the
wrong places when i committed it. I figured it was better to get it in,
and have it moved around somewhere else than to wait, and possibly not
get it included for 2.0. 

I really appreciate all the work you've done on documentation, and I
didn't want you to get the impression that I was being careless with
your realm of the source tree.

Anyway, thanks! I'll leave the "exactly where" decision in your capable
hands.

-Jonathan




From slyphon at twistedmatrix.com  Sun Oct 24 06:16:22 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sun, 24 Oct 2004 06:16:22 -0600
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041023220650.GB5033@frobozz>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<CD79D296-2533-11D9-B0B7-000393DC7B7C@donfu.com>
	<20041023212324.GA5033@frobozz>
	<20041023213719.GQ4690@fuchsia.puzzling.org>
	<417AD0C3.9000002@comcast.net> <20041023220650.GB5033@frobozz>
Message-ID: <20041024121622.GB30581@pyramid.twistedmatrix.com>

 
> [Sidenote: in my usual mental model, "nesting" would be something you do
> with deferreds, rather than callbacks, i.e. it's what happens when a
> callback of one deferred returns some other deferred.  And then there's
> "chaining" Deferreds with the "chainDeferred" method, which I always have to
> read the implementation of to figure out which way round I need to call it.]
> 

Could you give an example of where you *would* need to use
.chainDeferred? I've always been under the (somewhat vague) impression
that returning a deferred from a callback was the same thing.

-Jonathan




From slyphon at twistedmatrix.com  Sun Oct 24 06:22:04 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sun, 24 Oct 2004 06:22:04 -0600
Subject: [Twisted-Python] two deferred_tutorial patches
In-Reply-To: <BAY2-F27F1P4f7LXXcb0000eae4@hotmail.com>
References: <BAY2-F27F1P4f7LXXcb0000eae4@hotmail.com>
Message-ID: <20041024122204.GC30581@pyramid.twistedmatrix.com>

 
> 
> Thanks for your time.
> 
> _________________________________________________________________

Cool, thanks for the patches! I'll get them merged as soon as I can hop
on my machine at home.


-Jonathan






From mary-twisted at puzzling.org  Sun Oct 24 07:27:25 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 24 Oct 2004 15:27:25 +0200
Subject: [Twisted-Python] ANN: deferred howto/tutorial
In-Reply-To: <20041024121244.GA30581@pyramid.twistedmatrix.com>
References: <20041023060821.GA8407@pyramid.twistedmatrix.com>
	<20041023182920.GL4690@fuchsia.puzzling.org>
	<20041024121244.GA30581@pyramid.twistedmatrix.com>
Message-ID: <20041024132725.GA12921@fuchsia.puzzling.org>

On Sun, Oct 24, 2004, Jonathan Simms wrote:
> I really appreciate all the work you've done on documentation, and I
> didn't want you to get the impression that I was being careless with
> your realm of the source tree.

It's OK -- I'd rather have documentation in the wrong place than... no
documentation!

> Anyway, thanks! I'll leave the "exactly where" decision in your capable
> hands.

OK. I got lost in the async howto last night, so probably won't touch
yours for a little while. Keep editing it where it is, and I'll move it
when I've had a better look.

-Mary



From slyphon at twistedmatrix.com  Sun Oct 24 07:56:11 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sun, 24 Oct 2004 07:56:11 -0600
Subject: [Twisted-Python] an alternative to epoll, perhaps? --> libevent
Message-ID: <20041024135611.GA3227@pyramid.twistedmatrix.com>

I was talking with hagbard, who is good friends with the guy who wrote
libevent (and is listed in the ssh(1) man page, Niels Provos), and he
(hagbard) suggested that it might be useful in writing a reactor.
Apparently it provides a portable compatability layer on top of whatever
native event-notification system there is.

just thought it was worth mentioning.

-Jonathan



From bv at bnl.gov  Sun Oct 24 18:39:07 2004
From: bv at bnl.gov (Brett Viren)
Date: Sun, 24 Oct 2004 20:39:07 -0400
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
Message-ID: <ir44qkj3a38.fsf@minos.phy.bnl.gov>

Hi,

I can't seem to make reactor.stop() actually stop the reactor and
allow my program to exit.  I hope someone can help.

What I'm actually trying to do is implement an execution pipeline so I
can serialize certain jobs but still run them in a thread so the main
loop can go about its business.  I do this with a class, CommandQueue,
that has a Queue.Queue and a method that can be called via
reactor.callInThread() that slurps the queue and runs any callables
sent down it.  Each callable's result is obtained from a Deferred.
This thread loops until I set CommandQueue.stop=True.  (Maybe someone
knows a better way?)

To try to triger the shutdown, I add a callback to the Deferred
associated with the final callable sent down the queue.  If I instead
call shutdown function via reactor.callLater() then the reactor will
actually stop.

I don't know if it matters, but /bin/ps only shows one instance of
python running.  Usually I see one instance per thread.


The code below and its output shows the problem.


#!/usr/bin/env python2.3

from twisted.python import threadable
threadable.init(1)
from twisted.internet import reactor,defer
from Queue import Queue,Empty


class CommandQueue:

    '''Queue up commands for serial calling.  One must call the
    drain() method to start reading the internal queue.  Most likely
    one wants to call this in a thread.'''

    def __init__(self):
        "Create a CommandQueue"
        self.queue = Queue()
        self.stop = False
        return

    def __call__(self,meth,*a,**k):

        '''Call meth(*a,**k) when it reaches end of queue.  Returns a
        Deferred that will pass the return of meth.'''

        deferred = defer.Deferred()
        self.queue.put((deferred,meth,a,k))
        return deferred

    def drain(self):
        'Drain the command queue until CommandQueue.stop is True'
        while not self.stop:
            try:
                d,meth,a,k = self.queue.get(True,1)
            except Empty:
                print "  queue empty"
                continue
            print "calling %s(%s,%s)"%(meth.__name__,str(a),str(k))
            d.callback(meth(*a,**k))
            print "callback done"
        print "drain closing"
        return 0

def test1():
    import time
    cq = CommandQueue()
    reactor.callInThread(cq.drain)

    def shutdown(x=None):
        print "Stopping CommandQueue"
        cq.stop = True
        print "Stopping reactory"
        reactor.stop()
        print "reactor.stop()'ed"

    def burp(x):
        for n in range(0,x):
            time.sleep(1)
            print x,n
        return x
    def chirp(x):
        print "okay:",x
        return None
    def ouch(x):
        print "bad:",x
        return x
    
    last = 3
    for n in range(0,last):
        print "dispatching",n
        d = cq(burp,n).addCallbacks(chirp,ouch)
        if last-n == 1:
            d.addCallbacks(shutdown,ouch)


if __name__ == '__main__':
    print "running test1"
    test1()
    print "end test1"
    reactor.run()
    print "reactor exitted"

#=-------------- end ------------=#


Running this produces the following:


[i386]bviren at aviator:test> ./test-commandqueue.py
running test1
dispatching 0
dispatching 1
dispatching 2
end test1
calling burp((0,),{})
okay: 0
callback done
calling burp((1,),{})
1 0
okay: 1
callback done
calling burp((2,),{})
2 0
2 1
okay: 2
Stopping CommandQueue
Stopping reactory
reactor.stop()'ed
callback done
drain closing

At which point I have to hit Control-C and finally get:

reactor exitted

Here is the mod to use reactor.callLater():

    ...
    last = 3
    for n in range(0,last):
        print "dispatching",n
        d = cq(burp,n).addCallbacks(chirp,ouch)
        #if last-n == 1:
        #    d.addCallbacks(shutdown,ouch)
    reactor.callLater(10,shutdown)
    ...


So, any ideas as to what I'm doing wrong?  

Thanks,
-Brett.




From cce at clarkevans.com  Sun Oct 24 20:59:09 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 24 Oct 2004 22:59:09 -0400
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
In-Reply-To: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
References: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
Message-ID: <20041025025908.GA31644@prometheusresearch.com>

Brett,

For starters, I'd keep the 'Queue' in the main thread, and
use callInThread to dispatch the function /w arguments.   Use
a d.callBoth (aka finally) to pop the next item from the queue
and then do a callInThread for it.

However, if you want to keep the Queue in the secondary thread,
you have one problem that is obvious to me:

On Sun, Oct 24, 2004 at 08:39:07PM -0400, Brett Viren wrote:
| class CommandQueue:
...
|     def drain(self):
|         'Drain the command queue until CommandQueue.stop is True'
|         while not self.stop:
|             try:
|                 d,meth,a,k = self.queue.get(True,1)
|             except Empty:
|                 print "  queue empty"
|                 continue
|             print "calling %s(%s,%s)"%(meth.__name__,str(a),str(k))
|             d.callback(meth(*a,**k))
|             print "callback done"
|         print "drain closing"
|         return 0
| 
| def test1():
|     import time
|     cq = CommandQueue()
|     reactor.callInThread(cq.drain)
|

You seem to be doing d.callback in the secondary thread, rather than
in the primary thread.  This could be causing some of the problems
you are experiencing.   It's not customary to use deferreds in any
other but the main thread.

>From a framework perspective, perhaps callback() should raise an 
error if it is called from anything other than the main thread?
Or perhaps even I'm not getting it.

Cheers!

Clark



From cce at clarkevans.com  Sun Oct 24 21:27:15 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 24 Oct 2004 23:27:15 -0400
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
In-Reply-To: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
References: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
Message-ID: <20041025032715.GA52256@prometheusresearch.com>

""" Sometimes you want to make sure that only one secondary
    thread is being used for a sequence of calls.  This can
    be accomplished with a Queue as proposed by Brett Viren.
"""
from twisted.internet import reactor,defer,threads
from Queue import Queue, Empty

class CommandQueue:
    ''' Queue up commands for serial calling.  One must call the
    drain() method to start reading the internal queue.  Most likely
    one wants to call this in a thread. '''

    def __init__(self):
        "Create a CommandQueue"
        self.queue   = Queue()
        self.running = False
        return

    def _cbRunQueue(self, cbval = None):
        try:
            cd,meth,a,k = self.queue.get(True,1)
            d = threads.deferToThread(meth, *a, **k)
            d.addBoth(self._cbRunQueue)
            d.chainDeferred(cd)
        except Empty:
            self.running = False
        return cbval

    def __call__(self,meth,*a,**k):
        '''Call meth(*a,**k) when it reaches end of queue.  Returns a
        Deferred that will pass the return of meth.'''
        d = defer.Deferred()
        self.queue.put((d,meth,a,k))
        if not self.running:
            self.running = True
            self._cbRunQueue()
        return d

def test1():
    import time
    cq = CommandQueue()

    def shutdown(x=None):
        print "Stopping reactory"
        reactor.stop()
        print "reactor.stop()'ed"

    def burp(x):
        for n in range(0,x):
            time.sleep(1)
            print x,n
        return x
    def chirp(x):
        print "okay:",x
        return None
    def ouch(x):
        print "bad:",x
        return x
    
    last = 3
    for n in range(0,last):
        print "dispatching",n
        d = cq(burp,n).addCallbacks(chirp,ouch)
        if last-n == 1:
            d.addCallbacks(shutdown,ouch)

if __name__ == '__main__':
    print "running test1"
    test1()
    print "end test1"
    reactor.run()
    print "reactor exitted"

-- 
Clark C. Evans                      Prometheus Research, LLC.
                                    http://www.prometheusresearch.com/
    o                               office: +1.203.777.2550 
  ~/ ,                              mobile: +1.203.444.0557 
 //
((   Prometheus Research: Transforming Data Into Knowledge
 \\  ,
   \/    - Research Exchange Database
   /\    - Survey & Assessment Technologies
   ` \   - Software Tools for Researchers
    ~ *



From andrew-twisted at puzzling.org  Mon Oct 25 03:07:18 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 25 Oct 2004 11:07:18 +0200
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
In-Reply-To: <20041025025908.GA31644@prometheusresearch.com>
References: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
	<20041025025908.GA31644@prometheusresearch.com>
Message-ID: <20041025090718.GG5033@frobozz>

On Sun, Oct 24, 2004 at 10:59:09PM -0400, Clark C. Evans wrote:
[...]
> 
> However, if you want to keep the Queue in the secondary thread,
> you have one problem that is obvious to me:
> 
[...]
> |             print "calling %s(%s,%s)"%(meth.__name__,str(a),str(k))
> |             d.callback(meth(*a,**k))
> |             print "callback done"
[...]
> 
> You seem to be doing d.callback in the secondary thread, rather than
> in the primary thread.  This could be causing some of the problems
> you are experiencing.   It's not customary to use deferreds in any
> other but the main thread.

Yep, that's the problem here.  Change this:
    d.callback(meth(*a,**k))
to this:
    reactor.callFromThread(d.callback, meth(*a, **k))

(Or perhaps less confusingly:
    result = meth(*a, **kw)
    reactor.callFromThread(d.callback, result)
)

> >From a framework perspective, perhaps callback() should raise an 
> error if it is called from anything other than the main thread?
> Or perhaps even I'm not getting it.

There's no reason why Deferreds wouldn't work in another thread, if that's
what you want.  It's just that generally it's not what you want...
Deferreds are used in Twisted to deal with asynchronous operations; but in
non-event loop threads, you'd usually just block.  If for some reason there
were two event-loop threads in the one process, then Deferreds might be
useful in both.

Nothing about Deferreds is at all dependent on the reactor, except for the
ill-conceived setTimeout functionality.  If you want to run a callback chain
in another thread, then Twisted shouldn't stop you (but I would expect you
to very clearly comment your code to explain why, as it would be very
unusual).

This is just a long-winded way of saying that Deferred's implementation
should be completely thread ignorant, even though in practice they're only
used from the main thread.

The real error here wasn't using Deferred.callback in another thread, it was
using reactor.stop in that thread.

-Andrew.




From bv at bnl.gov  Mon Oct 25 10:41:12 2004
From: bv at bnl.gov (Brett Viren)
Date: Mon, 25 Oct 2004 12:41:12 -0400
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
In-Reply-To: <20041025090718.GG5033@frobozz> (Andrew Bennetts's message of
	"Mon, 25 Oct 2004 11:07:18 +0200")
References: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
	<20041025025908.GA31644@prometheusresearch.com>
	<20041025090718.GG5033@frobozz>
Message-ID: <ir4fz42agyf.fsf@minos.phy.bnl.gov>

Andrew Bennetts <andrew-twisted at puzzling.org> writes:

> Yep, that's the problem here.  Change this:
>     d.callback(meth(*a,**k))
> to this:
>     reactor.callFromThread(d.callback, meth(*a, **k))
>
> (Or perhaps less confusingly:
>     result = meth(*a, **kw)
>     reactor.callFromThread(d.callback, result)
> )

Yes, that did it.

> There's no reason why Deferreds wouldn't work in another thread, if that's
> what you want.  It's just that generally it's not what you want...

In this case the Deferred is used as a return value for Twisted's
XML-RPC server implementation.  I go to this trouble of a CommandQueue
because my system blurs the distinction between server and client and
this was leading to deadlocks.  This CommandQueue should make sure
that all the troublesome communications are atomic.

Thanks to both you and Clark for your help.

-Brett.



From glyph at divmod.com  Mon Oct 25 11:32:02 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 25 Oct 2004 13:32:02 -0400
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
In-Reply-To: <ir4fz42agyf.fsf@minos.phy.bnl.gov>
References: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
	<20041025025908.GA31644@prometheusresearch.com>
	<20041025090718.GG5033@frobozz>  <ir4fz42agyf.fsf@minos.phy.bnl.gov>
Message-ID: <1098725522.17420.12.camel@localhost>

On Mon, 2004-10-25 at 12:41 -0400, Brett Viren wrote:

> In this case the Deferred is used as a return value for Twisted's
> XML-RPC server implementation.  I go to this trouble of a CommandQueue
> because my system blurs the distinction between server and client and
> this was leading to deadlocks.  This CommandQueue should make sure
> that all the troublesome communications are atomic.

Doing things in threads almost always makes things *less* atomic than
just leaving them all in the main reactor thread.  Even if I'm totally
mistaken, I feel like I have to ask a few questions to make sure that
newbies don't stumble across this thread in the future and think they
need to start managing their own threadpools so Twisted won't
deadlock ;)

When you say you're "blurring the distinction between server and
client", do you mean you're implementing something like an XMLRPC proxy,
where the server is itself a client, relaying requests elswhere and
waiting for their results?  Or something else?

Were you running requests in threads before you came up with the
CommandQueue abstraction?  If not, what caused the deadlocks?  How was
the client/server blurring related to the deadlocks?

Finally, did you consider an approach where, rather than queueing
commands, you just executed them synchronously and let the reactor
serialize them?  If so, what lead to the decision to change to a
thread-based approach?




From cce at clarkevans.com  Mon Oct 25 12:14:14 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 25 Oct 2004 14:14:14 -0400
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
In-Reply-To: <ir4fz42agyf.fsf@minos.phy.bnl.gov>
References: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
	<20041025025908.GA31644@prometheusresearch.com>
	<20041025090718.GG5033@frobozz> <ir4fz42agyf.fsf@minos.phy.bnl.gov>
Message-ID: <20041025181414.GA60565@prometheusresearch.com>

On Mon, Oct 25, 2004 at 12:41:12PM -0400, Brett Viren wrote:
| Andrew Bennetts <andrew-twisted at puzzling.org> writes:
| 
| > Yep, that's the problem here.  Change this:
| >     d.callback(meth(*a,**k))
| > to this:
| >     reactor.callFromThread(d.callback, meth(*a, **k))
| >
| > (Or perhaps less confusingly:
| >     result = meth(*a, **kw)
| >     reactor.callFromThread(d.callback, result)
| > )
| 
| Yes, that did it.

If your meth() could raise an exception, you probably also
need to wrap that function call in a try/except block.

    try:
        result = meth(*a, **kw)
    except:
        result = failure.Failure()
    reactor.callFromThread(d.callback, result)

Best,

Clark



From bv at bnl.gov  Mon Oct 25 12:56:02 2004
From: bv at bnl.gov (Brett Viren)
Date: Mon, 25 Oct 2004 14:56:02 -0400
Subject: [Twisted-Python] reactor.stop() won't, threads and Queue to blame?
In-Reply-To: <1098725522.17420.12.camel@localhost> (Glyph Lefkowitz's
	message of "Mon, 25 Oct 2004 13:32:02 -0400")
References: <ir44qkj3a38.fsf@minos.phy.bnl.gov>
	<20041025025908.GA31644@prometheusresearch.com>
	<20041025090718.GG5033@frobozz> <ir4fz42agyf.fsf@minos.phy.bnl.gov>
	<1098725522.17420.12.camel@localhost>
Message-ID: <ir4sm828w59.fsf@minos.phy.bnl.gov>

Glyph Lefkowitz <glyph at divmod.com> writes:

> On Mon, 2004-10-25 at 12:41 -0400, Brett Viren wrote:
>
>> In this case the Deferred is used as a return value for Twisted's
>> XML-RPC server implementation.  I go to this trouble of a CommandQueue
>> because my system blurs the distinction between server and client and
>> this was leading to deadlocks.  This CommandQueue should make sure
>> that all the troublesome communications are atomic.
>
> Doing things in threads almost always makes things *less* atomic than
> just leaving them all in the main reactor thread.  Even if I'm totally
> mistaken, I feel like I have to ask a few questions to make sure that
> newbies don't stumble across this thread in the future and think they
> need to start managing their own threadpools so Twisted won't
> deadlock ;)
>
> When you say you're "blurring the distinction between server and
> client", do you mean you're implementing something like an XMLRPC proxy,
> where the server is itself a client, relaying requests elswhere and
> waiting for their results?  Or something else?

It is basically as you describe but with some additions.  The primary
aim is to marshal data from an XML-RPC client to a server using a
custom protocol while providing status information as well as control.

      XML-RPC       Custom
data   ---->  proxy ---> data
source <----  proxy      sink
               ^  |
              /|\ |
               |  |  XML-RPC
               | \|/
               |  V
               GUI
          Monitor/Control
                 

The data source listens (is a server) for data requests which include
a callback URL.  After that, it sends data to (is a client for) the
proxy which forwards the data to the data sink and sends a
confirmation to the GUI monitor.  The proxy also sends heartbeats
fired via reactor.callLater to the GUI.

> Were you running requests in threads before you came up with the
> CommandQueue abstraction?  If not, what caused the deadlocks?  How was
> the client/server blurring related to the deadlocks?

Yes.  In the proxy, I handle the XML-RPC requests from the data source
and the GUI via this class:

class Spawner(threading.Thread):
    '''Call callable in its own thread, return value is sent into the
    Spawner.deferred.callback()'''

    def __init__(self,callable,errable=None,**kwds):
        threading.Thread.__init__(self,**kwds);
        self.callable = callable
        if errable is None:
            errable = self.chirp
        self.deferred = defer.Deferred()
        self.deferred.addErrback(errable)
        self.setDaemon(1)
        self.start()
        return

    def chirp(self,*args):
	print str(args)
        log.error(str(args))
        return args

    def run(self):
        self.deferred.callback(self.callable())

This runs the request in a thread an returns the value via a deferred
(which is used as the return value for the XML-RPC method).

> Finally, did you consider an approach where, rather than queueing
> commands, you just executed them synchronously and let the reactor
> serialize them?  If so, what lead to the decision to change to a
> thread-based approach?

The basic data proxying must not be interupted.  Some of the control
requests sent from the GUI can take more than the period between data
updates and thus block that proxying.


It's possible I'm doing something stupid in this design.  Please let
me know if you have improvements.

Thanks,
-Brett.




From foom at fuhm.net  Mon Oct 25 15:24:09 2004
From: foom at fuhm.net (James Y Knight)
Date: Mon, 25 Oct 2004 17:24:09 -0400
Subject: [Twisted-Python] CFReactor
Message-ID: <357849C0-26CC-11D9-9668-000A95A50FB2@fuhm.net>

Itamar just added half-closing support to Twisted, and I foolishly 
volunteered to look at adding support to cfreactor for him. However, 
that was before I looked at it. Now that I have, I have little idea 
what it's actually doing, so I'm afraid that I'm unable to actually 
implement this change.

The "SelectableSocketWrapper" looks like a horrible kludge, and I'm not 
sure why it's necessary. Why does it override the wrapped object's 
"connectionLost"? Why do you have to wrap&override 
Selectable.start/stopReading/Writing, instead of doing that stuff in 
reactor.add/removeReader/Writer? What is simulate?? Essentially, I just 
don't understand why it is so different from the other reactors.

Either hints or else a working half-close implementation for cfreactor 
would be appreciated.

James




From bob at redivi.com  Mon Oct 25 16:02:29 2004
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 25 Oct 2004 18:02:29 -0400
Subject: [Twisted-Python] CFReactor
In-Reply-To: <357849C0-26CC-11D9-9668-000A95A50FB2@fuhm.net>
References: <357849C0-26CC-11D9-9668-000A95A50FB2@fuhm.net>
Message-ID: <909651B8-26D1-11D9-959B-000A95BA5446@redivi.com>


On Oct 25, 2004, at 17:24, James Y Knight wrote:

> Itamar just added half-closing support to Twisted, and I foolishly 
> volunteered to look at adding support to cfreactor for him. However, 
> that was before I looked at it. Now that I have, I have little idea 
> what it's actually doing, so I'm afraid that I'm unable to actually 
> implement this change.
>
> The "SelectableSocketWrapper" looks like a horrible kludge, and I'm 
> not sure why it's necessary. Why does it override the wrapped object's 
> "connectionLost"? Why do you have to wrap&override 
> Selectable.start/stopReading/Writing, instead of doing that stuff in 
> reactor.add/removeReader/Writer? What is simulate?? Essentially, I 
> just don't understand why it is so different from the other reactors.

The SSW kludge is necessary because it inherits a lot of functionality 
from the existing default select-based reactor and its sockets.  It is 
a workaround for the lack of extensibility in the implementation of 
those sockets and that reactor.  It could be less hacky if it were 
inverted, but then you'd have to subclass every possible port and add 
the reactor notifications, and essentially copy about 80% of 
twisted.internet.default instead of subclassing it.  If you want to 
refactor it this way, be my guest.. but I'm not bored enough to do it 
:)

The reason for the loseConnection hack is that the existing 
implementation of loseConnection doesn't do removeReader/Writer!  
loseConnection effectively kills the socket without notifying the 
reactor at all.  If the existing implementation told the reactor when 
it was done with a socket, SSW wouldn't be so much of a kludge.

> Either hints or else a working half-close implementation for cfreactor 
> would be appreciated.

You'll probably have to implement the same style of hack that is used 
for loseConnection.  Replace the half-lose-connection method (if it 
exists) with a method that notifies the reactor of the intention, and 
then call the original implementation.

-bob




From matusis at matusis.com  Mon Oct 25 22:40:09 2004
From: matusis at matusis.com (Alec Matusis)
Date: Mon, 25 Oct 2004 21:40:09 -0700
Subject: [Twisted-Python] twisted run out of file descriptors
Message-ID: <PJEGIHBMPNKKLJPMILMDKEJNCBAA.matusis@matusis.com>

Hi
I am running twisted on 2.4.21 Kernel.

My chat server has been puking and dying the last couple days and it
seemed pretty clear that it was dying when it was reaching 1024 open
file descriptors.
I noticed the default ulimit -n was 1024, so I added a 'ulimit -n
4096' before starting the chat server. That has apparently allowed it to
surpass
1024 descriptors (it has 1263 at the moment) but now it is failing to
call select (see sample errors below).


There is this value
FD_SETSIZE in the C headers that determines the maximum number of
sockets a proc can select() on, and it's set to 1024. It it possible to
increase this limit, short of recompiling the Kernel?

Sample Errors:

-----

File
"/usr/local/encap/Twisted-1.2.0/lib/python2.3/site-packages/twisted/
internet/default.py", line 487, in doSelect
[], timeout)
exceptions.ValueError: filedescriptor out of range in select()

2004/10/25 16:35 PDT [-] Malformed file descriptor found. Preening
lists.
2004/10/25 16:35 PDT [-] bad descriptor

Thanks

Alec matusis





From uwe at oss4u.com  Mon Oct 25 23:37:05 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Mon, 25 Oct 2004 22:37:05 -0700
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <PJEGIHBMPNKKLJPMILMDKEJNCBAA.matusis@matusis.com>
References: <PJEGIHBMPNKKLJPMILMDKEJNCBAA.matusis@matusis.com>
Message-ID: <200410252237.05259.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


check your /proc/sys/fs/file-max 
file. It's the max number of file descriptors the kernel will handle.
if it's 1024 just set it to something higher (2048 or 4096)

I don't know if that's really the reason, but it doesn't hurt either to give 
it a shot


On Monday 25 October 2004 09:40 pm, Alec Matusis wrote:
> Hi
> I am running twisted on 2.4.21 Kernel.
>
> My chat server has been puking and dying the last couple days and it
> seemed pretty clear that it was dying when it was reaching 1024 open
> file descriptors.
> I noticed the default ulimit -n was 1024, so I added a 'ulimit -n
> 4096' before starting the chat server. That has apparently allowed it to
> surpass
> 1024 descriptors (it has 1263 at the moment) but now it is failing to
> call select (see sample errors below).
>
>
> There is this value
> FD_SETSIZE in the C headers that determines the maximum number of
> sockets a proc can select() on, and it's set to 1024. It it possible to
> increase this limit, short of recompiling the Kernel?
>
> Sample Errors:
>
> -----
>
> File
> "/usr/local/encap/Twisted-1.2.0/lib/python2.3/site-packages/twisted/
> internet/default.py", line 487, in doSelect
> [], timeout)
> exceptions.ValueError: filedescriptor out of range in select()
>
> 2004/10/25 16:35 PDT [-] Malformed file descriptor found. Preening
> lists.
> 2004/10/25 16:35 PDT [-] bad descriptor
>
> Thanks
>
> Alec matusis
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

- -- 
	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFBfeKBjqGXBvRToM4RAulDAKC3SoSVvIWld/fk4o0cr4i2iVJRFgCglSWc
ejWGhr5mlcVj76u2q70TlF0=
=LY3Q
-----END PGP SIGNATURE-----




From matusis at matusis.com  Mon Oct 25 23:58:27 2004
From: matusis at matusis.com (Alec Matusis)
Date: Mon, 25 Oct 2004 22:58:27 -0700
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <200410252237.05259.uwe@oss4u.com>
Message-ID: <PJEGIHBMPNKKLJPMILMDAEJPCBAA.matusis@matusis.com>

Hi- thanks - that number i have changed- but that's total number for the
ENTIRE system
alecm at web0:~> cat /proc/sys/fs/file-max
200000

I also changed the number of fds available PER child PROCESS in a shell

ulimit -n 4096

select() call has it's own hardcoded number apparently...



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Uwe C.
Schroeder
Sent: Monday, October 25, 2004 10:37 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] twisted run out of file descriptors


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


check your /proc/sys/fs/file-max
file. It's the max number of file descriptors the kernel will handle.
if it's 1024 just set it to something higher (2048 or 4096)

I don't know if that's really the reason, but it doesn't hurt either to give
it a shot


On Monday 25 October 2004 09:40 pm, Alec Matusis wrote:
> Hi
> I am running twisted on 2.4.21 Kernel.
>
> My chat server has been puking and dying the last couple days and it
> seemed pretty clear that it was dying when it was reaching 1024 open
> file descriptors.
> I noticed the default ulimit -n was 1024, so I added a 'ulimit -n
> 4096' before starting the chat server. That has apparently allowed it to
> surpass
> 1024 descriptors (it has 1263 at the moment) but now it is failing to
> call select (see sample errors below).
>
>
> There is this value
> FD_SETSIZE in the C headers that determines the maximum number of
> sockets a proc can select() on, and it's set to 1024. It it possible to
> increase this limit, short of recompiling the Kernel?
>
> Sample Errors:
>
> -----
>
> File
> "/usr/local/encap/Twisted-1.2.0/lib/python2.3/site-packages/twisted/
> internet/default.py", line 487, in doSelect
> [], timeout)
> exceptions.ValueError: filedescriptor out of range in select()
>
> 2004/10/25 16:35 PDT [-] Malformed file descriptor found. Preening
> lists.
> 2004/10/25 16:35 PDT [-] bad descriptor
>
> Thanks
>
> Alec matusis
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

- --
	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFBfeKBjqGXBvRToM4RAulDAKC3SoSVvIWld/fk4o0cr4i2iVJRFgCglSWc
ejWGhr5mlcVj76u2q70TlF0=
=LY3Q
-----END PGP SIGNATURE-----


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From tv at twistedmatrix.com  Tue Oct 26 01:25:08 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 26 Oct 2004 10:25:08 +0300
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <PJEGIHBMPNKKLJPMILMDKEJNCBAA.matusis@matusis.com>
References: <PJEGIHBMPNKKLJPMILMDKEJNCBAA.matusis@matusis.com>
Message-ID: <417DFBD4.7090008@twistedmatrix.com>

Alec Matusis wrote:

>My chat server has been puking and dying the last couple days and it
>seemed pretty clear that it was dying when it was reaching 1024 open
>file descriptors.
>I noticed the default ulimit -n was 1024, so I added a 'ulimit -n
>4096' before starting the chat server. That has apparently allowed it to
>surpass
>1024 descriptors (it has 1263 at the moment) but now it is failing to
>call select (see sample errors below).
>
>
>There is this value
>FD_SETSIZE in the C headers that determines the maximum number of
>sockets a proc can select() on, and it's set to 1024. It it possible to
>increase this limit, short of recompiling the Kernel?
>  
>
Yes (in some libcs) but you don't want to play with that thing. Switch 
to pollreactor.
Poll has no builtin limits, but will start to get slow after a few 
thousand fds.

But, do you know why your app has over a thousand fds open? If there's 
no really
good reason, you have a leak and should fix that. A thousand fds is 
quite a lot.




From matusis at matusis.com  Tue Oct 26 01:53:55 2004
From: matusis at matusis.com (Alec Matusis)
Date: Tue, 26 Oct 2004 00:53:55 -0700
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <417DFBD4.7090008@twistedmatrix.com>
Message-ID: <PJEGIHBMPNKKLJPMILMDGEKACBAA.matusis@matusis.com>

My application is a chat, and it has > 1024 simultaneously connected chat
clients at the peak of usage.
I checked the numbers of fds in /proc/PID/fd before, during and after a
client connect- there is no leak, I just have > 1024 people connected...

I was trying to avoid using poll() but I will have to resort to it if there
is no other choice.
Do you know how where to find instructions to change this in glibc ?
I have been looking in Google, but to no avail...

Thanks.



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Tommi
Virtanen
Sent: Tuesday, October 26, 2004 12:25 AM
To: Twisted general discussion
Subject: Re: [Twisted-Python] twisted run out of file descriptors


Alec Matusis wrote:

>My chat server has been puking and dying the last couple days and it
>seemed pretty clear that it was dying when it was reaching 1024 open
>file descriptors.
>I noticed the default ulimit -n was 1024, so I added a 'ulimit -n
>4096' before starting the chat server. That has apparently allowed it to
>surpass
>1024 descriptors (it has 1263 at the moment) but now it is failing to
>call select (see sample errors below).
>
>
>There is this value
>FD_SETSIZE in the C headers that determines the maximum number of
>sockets a proc can select() on, and it's set to 1024. It it possible to
>increase this limit, short of recompiling the Kernel?
>
>
Yes (in some libcs) but you don't want to play with that thing. Switch
to pollreactor.
Poll has no builtin limits, but will start to get slow after a few
thousand fds.

But, do you know why your app has over a thousand fds open? If there's
no really
good reason, you have a leak and should fix that. A thousand fds is
quite a lot.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From tv at twistedmatrix.com  Tue Oct 26 02:27:36 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 26 Oct 2004 11:27:36 +0300
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <PJEGIHBMPNKKLJPMILMDGEKACBAA.matusis@matusis.com>
References: <PJEGIHBMPNKKLJPMILMDGEKACBAA.matusis@matusis.com>
Message-ID: <417E0A78.5050609@twistedmatrix.com>

Alec Matusis wrote:

>I was trying to avoid using poll() but I will have to resort to it if there
>is no other choice.
>  
>
Why would you want to do that?




From matusis at matusis.com  Tue Oct 26 02:35:56 2004
From: matusis at matusis.com (Alec Matusis)
Date: Tue, 26 Oct 2004 01:35:56 -0700
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <417E0A78.5050609@twistedmatrix.com>
Message-ID: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>

I thought it would be faster with select() rather than poll() - lower load
on the machine?



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Tommi
Virtanen
Sent: Tuesday, October 26, 2004 1:28 AM
To: Twisted general discussion
Subject: Re: [Twisted-Python] twisted run out of file descriptors


Alec Matusis wrote:

>I was trying to avoid using poll() but I will have to resort to it if there
>is no other choice.
>
>
Why would you want to do that?


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From anthony at interlink.com.au  Tue Oct 26 03:12:27 2004
From: anthony at interlink.com.au (Anthony Baxter)
Date: Tue, 26 Oct 2004 19:12:27 +1000
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
References: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
Message-ID: <417E14FB.9040900@interlink.com.au>

Alec Matusis wrote:
> I thought it would be faster with select() rather than poll() - lower load
> on the machine?

Not for any realistic application. On some platforms, select is just a
wrapper around poll, anyway.

select is fundamentally flawed for large numbers of FDs. Use poll.

Anthony

-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From naijasms at gmail.com  Tue Oct 26 09:05:13 2004
From: naijasms at gmail.com (Seun Osewa)
Date: Tue, 26 Oct 2004 16:05:13 +0100
Subject: [Twisted-Python] Case for an Async MySQL Driver?
Message-ID: <5d35fc5d04102608056a9d1c35@mail.gmail.com>

Hi,

I'm new to Twisted, and I was just thinking about how, while
'twisted.enterprise.adbapi' is is a really neat idea, it's sort of a
stop-gap solution pending the time async database drivers can be
integrated into Twisted.  It's not 'right' to have 1 python thread and
1 mysql server thread/process for each connection.

How about an event-driven MySQL protocol implementation that fits into
the Twisted Framework? (I came accross a MySQL protocol specification
online once but I think I've lost it). If this sounds sensible, I'll
be interested with helping out with implementation but I won't be able
to do actual coding for some time.

Regards,
Seun.



From glyph at divmod.com  Tue Oct 26 09:31:21 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 26 Oct 2004 11:31:21 -0400
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
References: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
Message-ID: <1098804681.20890.18.camel@localhost>

On Tue, 2004-10-26 at 01:35 -0700, Alec Matusis wrote:
> I thought it would be faster with select() rather than poll() - lower load
> on the machine?

Sounds like you might be confused - if someone had told you that
select() is faster than *polling*, that would be accurate - the
terminology is confusing because "polling" means "repeatedly checking
for input in a busy-loop".  In this context, "polling" is actually the
opposite of "calling poll()".

poll() is simply a better version of select().  The only reason it is
not the default reactor is that there are some obscure places where
select() exists and it does not.  I am not sure if this is even relevant
any more, since I don't know if any such place can build recent versions
of Python.




From itamar at itamarst.org  Tue Oct 26 09:41:44 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 26 Oct 2004 11:41:44 -0400
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <1098804681.20890.18.camel@localhost>
References: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
	<1098804681.20890.18.camel@localhost>
Message-ID: <1098805304.4900.38.camel@sheriffpony>

On Tue, 2004-10-26 at 11:31 -0400, Glyph Lefkowitz wrote:

> poll() is simply a better version of select().  The only reason it is
> not the default reactor is that there are some obscure places where
> select() exists and it does not.  I am not sure if this is even relevant
> any more, since I don't know if any such place can build recent versions
> of Python.

Mac OS X 10.2 doesn't have poll(), IIRC. 




From bob at redivi.com  Tue Oct 26 09:47:14 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 26 Oct 2004 11:47:14 -0400
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <1098804681.20890.18.camel@localhost>
References: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
	<1098804681.20890.18.camel@localhost>
Message-ID: <4E78F174-2766-11D9-959B-000A95BA5446@redivi.com>

On Oct 26, 2004, at 11:31, Glyph Lefkowitz wrote:

> On Tue, 2004-10-26 at 01:35 -0700, Alec Matusis wrote:
>> I thought it would be faster with select() rather than poll() - lower 
>> load
>> on the machine?
>
> Sounds like you might be confused - if someone had told you that
> select() is faster than *polling*, that would be accurate - the
> terminology is confusing because "polling" means "repeatedly checking
> for input in a busy-loop".  In this context, "polling" is actually the
> opposite of "calling poll()".
>
> poll() is simply a better version of select().  The only reason it is
> not the default reactor is that there are some obscure places where
> select() exists and it does not.  I am not sure if this is even 
> relevant
> any more, since I don't know if any such place can build recent 
> versions
> of Python.

Mac OS X prior to 10.3 does not ship with an implementation of poll.
Mac OS X 10.3 has an implementation of poll, but it is a wrapper for 
select.

#ifndef POLL_NO_WARN
#warning "poll() functionality for Mac OS X is implemented via an 
emulation layer on top of select(), not in the kernel directly.  It is 
recommended that programs running under OS X 10.3 prefer select() over 
poll().  Configure scripts should look for the _POLL_EMUL_H_ define 
(instead of _POLL_H_ or _SYS_POLL_H_) and avoid implementations where 
poll is not implemented in the kernel."
#endif

-bob




From foom at fuhm.net  Tue Oct 26 11:04:39 2004
From: foom at fuhm.net (James Y Knight)
Date: Tue, 26 Oct 2004 13:04:39 -0400
Subject: [Twisted-Python] CFReactor
In-Reply-To: <909651B8-26D1-11D9-959B-000A95BA5446@redivi.com>
References: <357849C0-26CC-11D9-9668-000A95A50FB2@fuhm.net>
	<909651B8-26D1-11D9-959B-000A95BA5446@redivi.com>
Message-ID: <1F9829DE-2771-11D9-9668-000A95A50FB2@fuhm.net>

On Oct 25, 2004, at 6:02 PM, Bob Ippolito wrote:
> On Oct 25, 2004, at 17:24, James Y Knight wrote:
>
>> Itamar just added half-closing support to Twisted, and I foolishly 
>> volunteered to look at adding support to cfreactor for him. However, 
>> that was before I looked at it. Now that I have, I have little idea 
>> what it's actually doing, so I'm afraid that I'm unable to actually 
>> implement this change.
>>
>> The "SelectableSocketWrapper" looks like a horrible kludge, and I'm 
>> not sure why it's necessary. Why does it override the wrapped 
>> object's "connectionLost"? Why do you have to wrap&override 
>> Selectable.start/stopReading/Writing, instead of doing that stuff in 
>> reactor.add/removeReader/Writer? What is simulate?? Essentially, I 
>> just don't understand why it is so different from the other reactors.
>
> The SSW kludge is necessary because it inherits a lot of functionality 
> from the existing default select-based reactor and its sockets.  It is 
> a workaround for the lack of extensibility in the implementation of 
> those sockets and that reactor.  It could be less hacky if it were 
> inverted, but then you'd have to subclass every possible port and add 
> the reactor notifications, and essentially copy about 80% of 
> twisted.internet.default instead of subclassing it.  If you want to 
> refactor it this way, be my guest.. but I'm not bored enough to do it 
> :)
>
> The reason for the loseConnection hack is that the existing 
> implementation of loseConnection doesn't do removeReader/Writer!  
> loseConnection effectively kills the socket without notifying the 
> reactor at all.  If the existing implementation told the reactor when 
> it was done with a socket, SSW wouldn't be so much of a kludge.

Er, I don't believe you. If that was the case, it would be a huge fd 
leak, which I'm pretty sure Twisted doesn't have. I removed that hack 
and I don't think anything further broke.

Anyways, I've changed cfreactor to do what I think should be the right 
thing, but it's randomly failing tests. Before my changes it was 
failing a lot of tests too, so I don't know if this is a regression or 
not.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: cfreactor.diff
Type: application/octet-stream
Size: 2726 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20041026/fd6d500f/attachment-0002.obj>
-------------- next part --------------


James

From bob at redivi.com  Tue Oct 26 11:35:03 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 26 Oct 2004 13:35:03 -0400
Subject: [Twisted-Python] CFReactor
In-Reply-To: <1F9829DE-2771-11D9-9668-000A95A50FB2@fuhm.net>
References: <357849C0-26CC-11D9-9668-000A95A50FB2@fuhm.net>
	<909651B8-26D1-11D9-959B-000A95BA5446@redivi.com>
	<1F9829DE-2771-11D9-9668-000A95A50FB2@fuhm.net>
Message-ID: <5E52D48E-2775-11D9-959B-000A95BA5446@redivi.com>

On Oct 26, 2004, at 13:04, James Y Knight wrote:

> On Oct 25, 2004, at 6:02 PM, Bob Ippolito wrote:
>> On Oct 25, 2004, at 17:24, James Y Knight wrote:
>>
>>> Itamar just added half-closing support to Twisted, and I foolishly 
>>> volunteered to look at adding support to cfreactor for him. However, 
>>> that was before I looked at it. Now that I have, I have little idea 
>>> what it's actually doing, so I'm afraid that I'm unable to actually 
>>> implement this change.
>>>
>>> The "SelectableSocketWrapper" looks like a horrible kludge, and I'm 
>>> not sure why it's necessary. Why does it override the wrapped 
>>> object's "connectionLost"? Why do you have to wrap&override 
>>> Selectable.start/stopReading/Writing, instead of doing that stuff in 
>>> reactor.add/removeReader/Writer? What is simulate?? Essentially, I 
>>> just don't understand why it is so different from the other 
>>> reactors.
>>
>> The SSW kludge is necessary because it inherits a lot of 
>> functionality from the existing default select-based reactor and its 
>> sockets.  It is a workaround for the lack of extensibility in the 
>> implementation of those sockets and that reactor.  It could be less 
>> hacky if it were inverted, but then you'd have to subclass every 
>> possible port and add the reactor notifications, and essentially copy 
>> about 80% of twisted.internet.default instead of subclassing it.  If 
>> you want to refactor it this way, be my guest.. but I'm not bored 
>> enough to do it :)
>>
>> The reason for the loseConnection hack is that the existing 
>> implementation of loseConnection doesn't do removeReader/Writer!  
>> loseConnection effectively kills the socket without notifying the 
>> reactor at all.  If the existing implementation told the reactor when 
>> it was done with a socket, SSW wouldn't be so much of a kludge.
>
> Er, I don't believe you. If that was the case, it would be a huge fd 
> leak, which I'm pretty sure Twisted doesn't have. I removed that hack 
> and I don't think anything further broke.

No.  It's not a fd leak because loseConnection closes the file 
descriptors.  It just doesn't tell the reactor it has done so.  It 
should leak SSW instances (memory) now, though.

> Anyways, I've changed cfreactor to do what I think should be the right 
> thing, but it's randomly failing tests. Before my changes it was 
> failing a lot of tests too, so I don't know if this is a regression or 
> not.

I don't really have the time or need to debug this anytime soon.  When 
I first wrote CFReactor, it passed all of the tests.  Either changes in 
PyObjC (unlikely) or Twisted (likely) caused these test failures.  Some 
of it is probably due to tests making incorrect assumptions, especially 
because CFReactor isn't designed to be iterated (it has to set up a 
timer to stop itself).

-bob




From george at omniti.com  Tue Oct 26 12:06:20 2004
From: george at omniti.com (George Schlossnagle)
Date: Tue, 26 Oct 2004 14:06:20 -0400
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <4E78F174-2766-11D9-959B-000A95BA5446@redivi.com>
References: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
	<1098804681.20890.18.camel@localhost>
	<4E78F174-2766-11D9-959B-000A95BA5446@redivi.com>
Message-ID: <BD5E4A18-2779-11D9-8CC2-000D93359332@omniti.com>


On Oct 26, 2004, at 11:47 AM, Bob Ippolito wrote:
> Mac OS X prior to 10.3 does not ship with an implementation of poll.
> Mac OS X 10.3 has an implementation of poll, but it is a wrapper for 
> select.

10.3+ support kqueue() though.

George




From narnett at liveworld.com  Tue Oct 26 12:27:14 2004
From: narnett at liveworld.com (Nick Arnett)
Date: Tue, 26 Oct 2004 11:27:14 -0700
Subject: [Twisted-Python] IMAP fetchUID speed?
Message-ID: <417E9702.6080506@liveworld.com>

I'm trying to figure out what's happening in an IMAP implementation. 
The server at the moment has a very big backlog -- perhaps 80K messages. 
   I was expecting that if I did this:

d.addCallback(lambda x: self.proto.fetchUID('1:10'))

things would move along quickly... but there's a huge delay somewhere. 
I think it's in that callback, since I've added breakpoints in 
handleuids() and they're not being reached (as they are when I hit a 
smaller mailbox on a different server).

Thanks for any pointers...  I'm brand-new to Twisted, but sure like what 
I'm seeing in it.

Nick

P.S.

I'm using the same sort of approach that John Goerzen's "Python Network 
Programming" book shows:

> class IMAPClient(IMAP4Client):
>     def connectionMade(self):
>         IMAPLogic(self)
>         
> class IMAPFactory(protocol.ClientFactory):
>     protocol = IMAPClient
>     def __init__(self, username, password):
>         self.username = username
>         self.password = password
>         
>     def clientConnectionFailed(self, connector, reason):
>         LOGGER.error("Client connection failed:", reason)
>         reactor.stop()
>         
> class IMAPLogic(mail_archive_retriever):
>     def __init__(self, proto, getting_archives = 0):
>         self.parser = email.Parser.Parser()
>         self.request_topic_id = None
>         self.message_bucket = messagedb.message_inserter()
>         self.getting_archives = getting_archives
>         
>         # Twisted stuff
>         self.proto = proto
>         self.factory = proto.factory
>         d = self.proto.login(self.factory.username, self.factory.password) # d is a Deferred
>         d.addCallback(lambda x: self.proto.select('INBOX'))  # lambda here keeps the output of the previous callback from going into this call
>         d.addCallback(lambda x: self.proto.fetchUID('1:*'))
>         d.addCallback(self.handleuids)
>         d.addCallback(self.deletemessages)
>         d.addCallback(self.logout)
>         d.addCallback(self.stopreactor)
>         d.addErrback(self.errorhappened)





From bob at redivi.com  Tue Oct 26 12:42:12 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 26 Oct 2004 14:42:12 -0400
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <BD5E4A18-2779-11D9-8CC2-000D93359332@omniti.com>
References: <PJEGIHBMPNKKLJPMILMDMEKCCBAA.matusis@matusis.com>
	<1098804681.20890.18.camel@localhost>
	<4E78F174-2766-11D9-959B-000A95BA5446@redivi.com>
	<BD5E4A18-2779-11D9-8CC2-000D93359332@omniti.com>
Message-ID: <BFCD7477-277E-11D9-959B-000A95BA5446@redivi.com>


On Oct 26, 2004, at 14:06, George Schlossnagle wrote:

>
> On Oct 26, 2004, at 11:47 AM, Bob Ippolito wrote:
>> Mac OS X prior to 10.3 does not ship with an implementation of poll.
>> Mac OS X 10.3 has an implementation of poll, but it is a wrapper for 
>> select.
>
> 10.3+ support kqueue() though.

Twisted barely does.. you need to download and patch some PyKQueue 
module that hasn't been touched since April 5 2001.

-bob




From radeex at gmail.com  Tue Oct 26 16:02:16 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 27 Oct 2004 09:02:16 +1100
Subject: [Twisted-Python] Case for an Async MySQL Driver?
In-Reply-To: <5d35fc5d04102608056a9d1c35@mail.gmail.com>
References: <5d35fc5d04102608056a9d1c35@mail.gmail.com>
Message-ID: <60ed19d404102615025c7bf847@mail.gmail.com>

On Tue, 26 Oct 2004 16:05:13 +0100, Seun Osewa <naijasms at gmail.com> wrote:
> I'm new to Twisted, and I was just thinking about how, while
> 'twisted.enterprise.adbapi' is is a really neat idea, it's sort of a
> stop-gap solution pending the time async database drivers can be
> integrated into Twisted.  It's not 'right' to have 1 python thread and
> 1 mysql server thread/process for each connection.
> 
> How about an event-driven MySQL protocol implementation that fits into
> the Twisted Framework? (I came accross a MySQL protocol specification
> online once but I think I've lost it). If this sounds sensible, I'll
> be interested with helping out with implementation but I won't be able
> to do actual coding for some time.

It sounds like a fine idea, and several people have attempted doing
native async protocol implementations for database systems in the
past, but nobody's finished and/or maintained them.

So, patches accepted. ;-)

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From orbitz at ezabel.com  Tue Oct 26 16:27:22 2004
From: orbitz at ezabel.com (orbitz)
Date: Tue, 26 Oct 2004 18:27:22 -0400
Subject: [Twisted-Python] Case for an Async MySQL Driver?
In-Reply-To: <5d35fc5d04102608056a9d1c35@mail.gmail.com>
References: <5d35fc5d04102608056a9d1c35@mail.gmail.com>
Message-ID: <417ECF4A.3070708@ezabel.com>

For starters, MySQL is a really poor DBM, I suggest switching, if you 
don't believe me:
http://sql-info.de/mysql/gotchas.html

Secondly, adbapi is made in such a way that it doesn't care which module 
you use as long as it is DB-API 2.0 compliant (2.0 right?).  There is a 
postgresql module which provides async access to a postgresql db, 
however it is not DB-API compliant so twisted cannot use it.  If you can 
fit an async MySQL API into DB-API compliance, kick ass, but otherwise 
having a twisted specific module for MySQL kind of defeats the purpose 
of having DB-API.  Finally, will the MySQL lib even allow you to do non 
blocking calls to the database? If not then that sounds like a major 
pitfall there.


Seun Osewa wrote:

>Hi,
>
>I'm new to Twisted, and I was just thinking about how, while
>'twisted.enterprise.adbapi' is is a really neat idea, it's sort of a
>stop-gap solution pending the time async database drivers can be
>integrated into Twisted.  It's not 'right' to have 1 python thread and
>1 mysql server thread/process for each connection.
>
>How about an event-driven MySQL protocol implementation that fits into
>the Twisted Framework? (I came accross a MySQL protocol specification
>online once but I think I've lost it). If this sounds sensible, I'll
>be interested with helping out with implementation but I won't be able
>to do actual coding for some time.
>
>Regards,
>Seun.
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>  
>




From narnett at liveworld.com  Tue Oct 26 16:33:54 2004
From: narnett at liveworld.com (Nick Arnett)
Date: Tue, 26 Oct 2004 15:33:54 -0700
Subject: [Twisted-Python] Case for an Async MySQL Driver?
In-Reply-To: <60ed19d404102615025c7bf847@mail.gmail.com>
References: <5d35fc5d04102608056a9d1c35@mail.gmail.com>
	<60ed19d404102615025c7bf847@mail.gmail.com>
Message-ID: <417ED0D2.80604@liveworld.com>

Christopher Armstrong wrote:

>>How about an event-driven MySQL protocol implementation that fits into
>>the Twisted Framework? (I came accross a MySQL protocol specification
>>online once but I think I've lost it). If this sounds sensible, I'll
>>be interested with helping out with implementation but I won't be able
>>to do actual coding for some time.
>>
Anybody want to offer more about how this might look?  I don't know if I 
can fit it into my work, but it would be a terrific addition to my 
toolbox (I have many thousands of lines of Python talking to MySQL).  
And I suppose it would offer the excuse I've been needing to ask our CEO 
about his thoughts on open-sourcing parts of our code.

Nick




From bob at redivi.com  Tue Oct 26 16:39:52 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 26 Oct 2004 18:39:52 -0400
Subject: [Twisted-Python] Case for an Async MySQL Driver?
In-Reply-To: <417ECF4A.3070708@ezabel.com>
References: <5d35fc5d04102608056a9d1c35@mail.gmail.com>
	<417ECF4A.3070708@ezabel.com>
Message-ID: <F38AB9AA-279F-11D9-8C1D-000A95BA5446@redivi.com>

On Oct 26, 2004, at 18:27, orbitz wrote:

> Seun Osewa wrote:
>
>> I'm new to Twisted, and I was just thinking about how, while
>> 'twisted.enterprise.adbapi' is is a really neat idea, it's sort of a
>> stop-gap solution pending the time async database drivers can be
>> integrated into Twisted.  It's not 'right' to have 1 python thread and
>> 1 mysql server thread/process for each connection.
>>
>> How about an event-driven MySQL protocol implementation that fits into
>> the Twisted Framework? (I came accross a MySQL protocol specification
>> online once but I think I've lost it). If this sounds sensible, I'll
>> be interested with helping out with implementation but I won't be able
>> to do actual coding for some time.
>>
> For starters, MySQL is a really poor DBM, I suggest switching, if you 
> don't believe me:
> http://sql-info.de/mysql/gotchas.html

All of the RDBMS have their pros and cons... I personally think the 
worst thing about MySQL is the license in most cases, but it's 
obviously good enough for most people.

> Secondly, adbapi is made in such a way that it doesn't care which 
> module you use as long as it is DB-API 2.0 compliant (2.0 right?).  
> There is a postgresql module which provides async access to a 
> postgresql db, however it is not DB-API compliant so twisted cannot 
> use it.  If you can fit an async MySQL API into DB-API compliance, 
> kick ass, but otherwise having a twisted specific module for MySQL 
> kind of defeats the purpose of having DB-API.  Finally, will the MySQL 
> lib even allow you to do non blocking calls to the database? If not 
> then that sounds like a major pitfall there.

This is all redundant.  adbapi depends on DB-API, and DB-API is 
*synchronous*.  If you want an asynchronous interface you are already 
"defeating the purpose of having DB-API".

He didn't say anything about the MySQL lib, he said protocol 
specification.  If you implement the protocol yourself, you can make it 
as asynchronous as you want...

-bob




From foom at fuhm.net  Tue Oct 26 17:18:48 2004
From: foom at fuhm.net (James Y Knight)
Date: Tue, 26 Oct 2004 19:18:48 -0400
Subject: [Twisted-Python] CFReactor
In-Reply-To: <5E52D48E-2775-11D9-959B-000A95BA5446@redivi.com>
References: <357849C0-26CC-11D9-9668-000A95A50FB2@fuhm.net>
	<909651B8-26D1-11D9-959B-000A95BA5446@redivi.com>
	<1F9829DE-2771-11D9-9668-000A95A50FB2@fuhm.net>
	<5E52D48E-2775-11D9-959B-000A95BA5446@redivi.com>
Message-ID: <63FAD196-27A5-11D9-9668-000A95A50FB2@fuhm.net>

On Oct 26, 2004, at 1:35 PM, Bob Ippolito wrote:
>> Er, I don't believe you. If that was the case, it would be a huge fd 
>> leak, which I'm pretty sure Twisted doesn't have. I removed that hack 
>> and I don't think anything further broke.
>
> No.  It's not a fd leak because loseConnection closes the file 
> descriptors.  It just doesn't tell the reactor it has done so.  It 
> should leak SSW instances (memory) now, though.

Those are only kept in a weakref dict, and in the readers/writers 
dicts. removeReader/removeWriter look to me like they are being called, 
so I think it should go away. I dunno if that's a change since 
cfreactor was written or if I'm just wrong or what.

>> Anyways, I've changed cfreactor to do what I think should be the 
>> right thing, but it's randomly failing tests. Before my changes it 
>> was failing a lot of tests too, so I don't know if this is a 
>> regression or not.
>
> I don't really have the time or need to debug this anytime soon.

Me neither. If no one is actually interested, I guess it should just be 
marked as probably broken and left at that. I'm going to give up on it.

> When I first wrote CFReactor, it passed all of the tests.  Either 
> changes in PyObjC (unlikely) or Twisted (likely) caused these test 
> failures.  Some of it is probably due to tests making incorrect 
> assumptions, especially because CFReactor isn't designed to be 
> iterated (it has to set up a timer to stop itself).

I can't even get the tests to run to completion, they hang on 
twisted.mail.test.test_smtp.LoopbackESMTPTestCase.testMessages. Since 
this reactor isn't being run on the buildbot for some reason, it's hard 
to know how long it's been failing.

I also tried checking out revisions 9056 from 2003-10-20 and 9286 from 
2003-11-11. Those are failing about a bazillion tests, mostly with 
pendingTimedCalls still pending: <DelayedCall 35813496 
[-0.0020911693573s] called=0 cancelled=0 
CFReactor._continueSystemEvent('startup',)> warnings. I dunno what's up 
with that.

James




From naijasms at gmail.com  Tue Oct 26 17:13:25 2004
From: naijasms at gmail.com (Seun Osewa)
Date: Wed, 27 Oct 2004 00:13:25 +0100
Subject: [Twisted-Python] Case for an Async MySQL Driver?
In-Reply-To: <60ed19d404102615025c7bf847@mail.gmail.com>
References: <5d35fc5d04102608056a9d1c35@mail.gmail.com>
	<60ed19d404102615025c7bf847@mail.gmail.com>
Message-ID: <5d35fc5d04102616137fe4658f@mail.gmail.com>

On Wed, 27 Oct 2004 09:02:16 +1100, Christopher Armstrong
<radeex at gmail.com> wrote:
...
> It sounds like a fine idea, and several people have attempted doing
> native async protocol implementations for database systems in the
> past, but nobody's finished and/or maintained them.
> 
> So, patches accepted. ;-)

Considering the fact that I'm a python newbie _and_ have newer
submitted a patch to any open source project before, it might take a
considerable while for any working code to become available.  I'll be
posting questions about how the implementation _should_ be integrated
into Twisted, partly as a way of getting to understand Twisted better.

Here's the MySQL protocol link
http://www.redferni.uklinux.net/mysql/MySQL-Protocol.html
The most important details seem simple enough.

Wish I could learn why other would-be implementors lost interest.

Regards,
Seun



From matusis at matusis.com  Tue Oct 26 21:01:15 2004
From: matusis at matusis.com (Alec Matusis)
Date: Tue, 26 Oct 2004 20:01:15 -0700
Subject: [Twisted-Python] twisted run out of file descriptors
In-Reply-To: <1098804681.20890.18.camel@localhost>
Message-ID: <PJEGIHBMPNKKLJPMILMDCELACBAA.matusis@matusis.com>

I changed reactor to poll(), and it has sucessfully surpassed 1024 file
descriptors limit, while the load on the machine did not increase
significantly from select() based reactor.

Thanks everybody for the help

Alec Matusis



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Glyph
Lefkowitz
Sent: Tuesday, October 26, 2004 8:31 AM
To: Twisted general discussion
Subject: RE: [Twisted-Python] twisted run out of file descriptors


On Tue, 2004-10-26 at 01:35 -0700, Alec Matusis wrote:
> I thought it would be faster with select() rather than poll() - lower load
> on the machine?

Sounds like you might be confused - if someone had told you that
select() is faster than *polling*, that would be accurate - the
terminology is confusing because "polling" means "repeatedly checking
for input in a busy-loop".  In this context, "polling" is actually the
opposite of "calling poll()".

poll() is simply a better version of select().  The only reason it is
not the default reactor is that there are some obscure places where
select() exists and it does not.  I am not sure if this is even relevant
any more, since I don't know if any such place can build recent versions
of Python.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From tv at twistedmatrix.com  Wed Oct 27 00:57:07 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 27 Oct 2004 09:57:07 +0300
Subject: [Twisted-Python] IMAP fetchUID speed?
In-Reply-To: <417E9702.6080506@liveworld.com>
References: <417E9702.6080506@liveworld.com>
Message-ID: <417F46C3.5070909@twistedmatrix.com>

Nick Arnett wrote:

> I'm trying to figure out what's happening in an IMAP implementation. 
> The server at the moment has a very big backlog -- perhaps 80K 
> messages.   I was expecting that if I did this:
>
> d.addCallback(lambda x: self.proto.fetchUID('1:10'))
>
> things would move along quickly... but there's a huge delay somewhere. 
> I think it's in that callback, since I've added breakpoints in 
> handleuids() and they're not being reached (as they are when I hit a 
> smaller mailbox on a different server).

You haven't really given enough information.

Use e.g. ethereal, or suitable prints in the IMAPClient, to see whether 
the server replies with the UIDs or not, and whether that happens fast 
or slow. If the reply from the server takes a long time, the reason is 
in the server. If the server replies almost immediately, but your 
callback still doesn't get the UIDs immediately, something very weird is 
happening.

My money is on the former -- the server being slow.




From BRADLEY.S.GASPARD at saic.com  Wed Oct 27 12:08:17 2004
From: BRADLEY.S.GASPARD at saic.com (Gaspard, Bradley S)
Date: Wed, 27 Oct 2004 14:08:17 -0400
Subject: [Twisted-Python] FTPClient and fetching a file from an FTP server
Message-ID: <D24D16A6707B0A4B9EF084299CE99B3905EFD43C@mcl-its-exs02.mail.saic.com>

I've looked at the ftpclient.py example and have also found an example of
moving a file to an ftp server on this list ... but not how to fetch a file
from the server. From the examples and the API it looks like the
retrieveFile( ) method and a callback are required but I have not yet put
the pieces together. 

I am very much a newbie and would be grateful for any pointers on how to do
this. 





From naijasms at gmail.com  Thu Oct 28 14:27:24 2004
From: naijasms at gmail.com (Seun Osewa)
Date: Thu, 28 Oct 2004 21:27:24 +0100
Subject: [Twisted-Python] Case for an Async MySQL Driver?
Message-ID: <5d35fc5d041028132764475aa6@mail.gmail.com>

Nick Arnett wrote:
>Anybody want to offer more about how this might look? I don't know if I
>can fit it into my work, but it would be a terrific addition to my
>toolbox (I have many thousands of lines of Python talking to MySQL).
>And I suppose it would offer the excuse I've been needing to ask our CEO
>about his thoughts on open-sourcing parts of our code.

Here are some ideas for an async MySQL 'driver' for Twisted:

1) create or use a connection:
connection = MySqlPool.connect("hostname", "username", "password")

2) send a query:
d = connection.exec(["begin", "update db.stats set value=value+1 where
accesses", "select * from db.important_table", "commit"])

def myCallBack (resultset):
    # 'results' contains the result of the last QUERY in the list of
commands sent to exec.
    # it is empty if there's no QUERY and no error
     ....

def myErrBack (errorval, errorstring command_id):
   # this is called if there's an error in executing any of the commands
   # command_id indicates which point in the list of commands the error occured
   # errorval is the error name/number, errorstring the exact result

3) close the connection:
connection.close()

This format allows the user to send an unlimited number of queries to
be run together, thus limiting the number of callbacks necessary for a
program requiring many small interactions with the database. "begin"
and "end" will count as an example.  This minimalistic API also allows
more advanced (twisted.enterprise style) interfaces to be built on top
of it.

Is there any task you can think of that can't be built on top of this?
(of course I've not touched the implementation details...)

Regards,
Seun.



From orbitz at ezabel.com  Thu Oct 28 15:00:57 2004
From: orbitz at ezabel.com (orbitz)
Date: Thu, 28 Oct 2004 17:00:57 -0400
Subject: [Twisted-Python] Case for an Async MySQL Driver?
In-Reply-To: <5d35fc5d041028132764475aa6@mail.gmail.com>
References: <5d35fc5d041028132764475aa6@mail.gmail.com>
Message-ID: <41815E09.3030306@ezabel.com>

Hrm, wouldn't it be a bit nicer on programmers to use the current adbapi 
interface so they can just move all their code to this new mysql API?

Seun Osewa wrote:

>Nick Arnett wrote:
>  
>
>>Anybody want to offer more about how this might look? I don't know if I
>>can fit it into my work, but it would be a terrific addition to my
>>toolbox (I have many thousands of lines of Python talking to MySQL).
>>And I suppose it would offer the excuse I've been needing to ask our CEO
>>about his thoughts on open-sourcing parts of our code.
>>    
>>
>
>Here are some ideas for an async MySQL 'driver' for Twisted:
>
>1) create or use a connection:
>connection = MySqlPool.connect("hostname", "username", "password")
>
>2) send a query:
>d = connection.exec(["begin", "update db.stats set value=value+1 where
>accesses", "select * from db.important_table", "commit"])
>
>def myCallBack (resultset):
>    # 'results' contains the result of the last QUERY in the list of
>commands sent to exec.
>    # it is empty if there's no QUERY and no error
>     ....
>
>def myErrBack (errorval, errorstring command_id):
>   # this is called if there's an error in executing any of the commands
>   # command_id indicates which point in the list of commands the error occured
>   # errorval is the error name/number, errorstring the exact result
>
>3) close the connection:
>connection.close()
>
>This format allows the user to send an unlimited number of queries to
>be run together, thus limiting the number of callbacks necessary for a
>program requiring many small interactions with the database. "begin"
>and "end" will count as an example.  This minimalistic API also allows
>more advanced (twisted.enterprise style) interfaces to be built on top
>of it.
>
>Is there any task you can think of that can't be built on top of this?
>(of course I've not touched the implementation details...)
>
>Regards,
>Seun.
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>  
>




From ldanielburr at mac.com  Thu Oct 28 15:12:23 2004
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Thu, 28 Oct 2004 17:12:23 -0400
Subject: [Twisted-Python] Case for an Async MySQL Driver?
Message-ID: <9830467.1098997943333.JavaMail.ldanielburr@mac.com>

Seun Osewa wrote:

>Here are some ideas for an async MySQL 'driver' for Twisted:

[snip description of API]

>This format allows the user to send an unlimited number of queries to
>be run together, thus limiting the number of callbacks necessary for a
>program requiring many small interactions with the database. "begin"
>and "end" will count as an example.  This minimalistic API also allows
>more advanced (twisted.enterprise style) interfaces to be built on top
>of it.

I think that this is a good idea, but I think it would be far better if you described your API in terms of the twisted.enterprise.adbapi API which exists today.

Example:

from twisted.enterprise import adbapi

dbpool = adbapi.NonBlockingConnectionPool(
    MySQLProtocolFactory,
    connectionInfo,
    cp_min=1,
    cp_max=5
)


queries = ('SELECT 1 FROM DUAL', 'UPDATE Foo WHERE bar = baz')

for query in queries:
    d = dbpool.runQuery(query)
    d.addErrback(_onFailure)
    d.addCallback(_onSuccess)


The effort needed to make this proposed asynchronous db protocol work with adbapi would be pretty minor, I think.

Tell you what: If somebody implements this MySQL async protocol, I'll create a patch to make adbapi work with it.  Sound good?

Naz



From ldanielburr at mac.com  Thu Oct 28 15:27:45 2004
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Thu, 28 Oct 2004 17:27:45 -0400
Subject: [Twisted-Python] Latest modpubsub is using Twisted
Message-ID: <11687826.1098998865234.JavaMail.ldanielburr@mac.com>

After experiencing the itching and burning of asyncore, their python developers have turned to twisted, the soothing ointment of network programming.

http://www.mod-pubsub.org/blog/archives/440_Repubsub_good_to_go.html

Naz



From naijasms at gmail.com  Thu Oct 28 17:32:46 2004
From: naijasms at gmail.com (Seun Osewa)
Date: Fri, 29 Oct 2004 00:32:46 +0100
Subject: [Twisted-Python] Case for an Async MySQL Driver?
In-Reply-To: <41815E09.3030306@ezabel.com>
References: <5d35fc5d041028132764475aa6@mail.gmail.com>
	<41815E09.3030306@ezabel.com>
Message-ID: <5d35fc5d04102816322d052d21@mail.gmail.com>

Hi,

The approach I was suggesting is to have a minimalist 'driver' API for
MySQL which can be used independently (for new development of
MySQL-specific projects) and yet can be easily used for MySQL support
in adbapi.

Correcting my earlier short outline,
-> a minimalistic mysql 'driver' API shouldn't even involve a DB pool. 
-> The 'result' can simply be in the form of an iteratable which
returns the result of each executed query in order, no need for the
restriction to have only one query within a group of MySQL commands.
-> However, the errBack should be called when any of queries fail,
indicating how which particular query failed by giving the number of
successful queries.
 
ACTIONS
conn = MySqlConnection ("hostname", "username", "password")
d = conn.exec (["stmt1", "stmt2",  "stmt3"])
d.addCallBack(call1)
d.addErrBack(err1)
conn.close()    # we have finished with this connection.

DEFINITION
def call1(result):
    ... 
def err1 (successful_queries, errno, description):
    ...

It appears reasonable to allow the connection constructor to block
when creating the database connections ... the API user should deal
with connection caching.

Regards,
Seun.

On Thu, 28 Oct 2004 17:00:57 -0400, orbitz <orbitz at ezabel.com> wrote:
> Hrm, wouldn't it be a bit nicer on programmers to use the current adbapi
> interface so they can just move all their code to this new mysql API?



From missive at hotmail.com  Thu Oct 28 22:17:59 2004
From: missive at hotmail.com (Lee Harr)
Date: Fri, 29 Oct 2004 08:47:59 +0430
Subject: [Twisted-Python] doc/core/howto/components.xhtml  question
Message-ID: <BAY2-F42XAwxXSXI3ac0004ea93@hotmail.com>

in doc/core/howto/components.xhtml there is a
HairDryer class like this:


class HairDryer:
    def plug(self, socket):
        adapted = IAmericanSocket(socket)
        assert socket.voltage() == 110, "BOOM"
        print "I was plugged in properly and am operating"


I am new to this interface / adaptation system,
but I am thinking it should be:

class HairDryer:
    def plug(self, socket):
        adapted = IAmericanSocket(socket)
        assert adapted.voltage() == 110, "BOOM"
        print "I was plugged in properly and am operating"


If so...

Index: doc/core/howto/components.xhtml
===================================================================
--- doc/core/howto/components.xhtml     (revision 12146)
+++ doc/core/howto/components.xhtml     (working copy)
@@ -338,7 +338,7 @@
class HairDryer:
     def plug(self, socket):
         adapted = IAmericanSocket(socket)
-        assert socket.voltage() == 110, "BOOM"
+        assert adapted.voltage() == 110, "BOOM"
         print "I was plugged in properly and am operating"
</pre>

_________________________________________________________________
FREE pop-up blocking with the new MSN Toolbar - get it now! 
http://toolbar.msn.com/




From exarkun at divmod.com  Fri Oct 29 07:12:23 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 29 Oct 2004 13:12:23 GMT
Subject: [Twisted-Python] doc/core/howto/components.xhtml  question
In-Reply-To: <BAY2-F42XAwxXSXI3ac0004ea93@hotmail.com>
Message-ID: <20041029131223.9171.750639788.divmod.quotient.802@ohm>

On Fri, 29 Oct 2004 08:47:59 +0430, "Lee Harr" <missive at hotmail.com> wrote:
>in doc/core/howto/components.xhtml there is a
> HairDryer class like this:
> 
> [snip]

  Thanks, fixed in SVN.

  Jp



From andrew-twisted at puzzling.org  Fri Oct 29 15:52:33 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 29 Oct 2004 23:52:33 +0200
Subject: [Twisted-Python] UncatchableExceptions
Message-ID: <20041029215233.GM7380@frobozz>

<foom> exarkun: I suspect we should introduce a UncatchableExceptions
       constant somewhere
<foom> exarkun: and require that all except:'s are preceded by except
       UncatchableExceptions: raise
<exarkun> foom: It's possible that is a good idea.
<exarkun> foom: I'm not really sure, though.
<spiv> foom: With (KeyboardInterrupt, SystemExit, MemoryError, SystemError) ?
<foom> spiv: yes

I guess this would live in twisted.python somewhere, and the coding standard
would be updated to require its use instead of bare "except:"

Python-dev have discussed a similar measure for the python standard library
(in the exceptions module), but hadn't come to any consensus last time I
looked.

Thoughts?  Objections?

-Andrew.




From foom at fuhm.net  Fri Oct 29 21:13:19 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri, 29 Oct 2004 23:13:19 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <A6730354-2A21-11D9-9668-000A95A50FB2@fuhm.net>

Bug summary
______________________
Since 2004-10-23 04:58:55.150000:
   Bugs opened: 14   Bugs closed: 3   Total open bugs: 327 (+11)

New / Reopened Bugs
______________________
Incorrect traceback from trial  (7 hours ago)
        http://www.twistedmatrix.com/bugs/issue769 opened by exarkun

[TRIAL] Trial incorrectly reports the number of tests run  (6 hours ago)
CLOSED http://www.twistedmatrix.com/bugs/issue770 opened by exarkun

[TRIAL] Traceback from trial in trivial usage  (7 hours ago)
        http://www.twistedmatrix.com/bugs/issue768 opened by exarkun

Something broke twisted.web or twisted.internet.tcp in the latests 
commits  (11 hours ago)
        http://www.twistedmatrix.com/bugs/issue767 opened by dialtone

wprocess is broken  (4 days ago)
        http://www.twistedmatrix.com/bugs/issue760 opened by slyphon

[CORE] test_trial fails on windows  (5 days ago)
        http://www.twistedmatrix.com/bugs/issue757 opened by itamarst

[WEB] HTTP logging lets user corrupt log file entry  (4 days ago)
CLOSED http://www.twistedmatrix.com/bugs/issue759 opened by Tv

SSL connection hangs open with firefox, can't reverseproxy things on a 
HTTPS server.  (2 days ago)
        http://www.twistedmatrix.com/bugs/issue764 opened by Tv

[CORE] Twisted doesn't exit with proper exit code after SIGINT  (4 days 
ago)
        http://www.twistedmatrix.com/bugs/issue761 opened by jknight

[DOCUMENTATION] tutorial still using deprecated components.Interface  
(5 days ago)
        http://www.twistedmatrix.com/bugs/issue758 opened by spiv

[TRIAL] setUp and tearDown should be allowed to raise FailTest  
(yesterday)
        http://www.twistedmatrix.com/bugs/issue766 opened by jknight

Added Timeout checking to IMAP4Client  (yesterday)
        http://www.twistedmatrix.com/bugs/issue765 opened by bkirsch

Reactor should cache loop start time for use instead of time.time()  (3 
days ago)
        http://www.twistedmatrix.com/bugs/issue763 opened by jknight

[CORE] The spewer (i.e. twistd --spew) only spews for the main thread  
(4 days ago)
        http://www.twistedmatrix.com/bugs/issue762 opened by spiv

Bugs Closed
______________________
[TRIAL] Trial incorrectly reports the number of tests run  (6 hours ago)
        http://www.twistedmatrix.com/bugs/issue770 opened by exarkun

[WEB] HTTP logging lets user corrupt log file entry  (4 days ago)
        http://www.twistedmatrix.com/bugs/issue759 opened by Tv

conch client writes garbage to known_hosts file  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue749 opened by exarkun




From bob at redivi.com  Fri Oct 29 22:06:30 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 30 Oct 2004 00:06:30 -0400
Subject: [Twisted-Python] UncatchableExceptions
In-Reply-To: <20041029215233.GM7380@frobozz>
References: <20041029215233.GM7380@frobozz>
Message-ID: <14420F2E-2A29-11D9-878B-000A95BA5446@redivi.com>


On Oct 29, 2004, at 17:52, Andrew Bennetts wrote:

> <foom> exarkun: I suspect we should introduce a UncatchableExceptions
>        constant somewhere
> <foom> exarkun: and require that all except:'s are preceded by except
>        UncatchableExceptions: raise
> <exarkun> foom: It's possible that is a good idea.
> <exarkun> foom: I'm not really sure, though.
> <spiv> foom: With (KeyboardInterrupt, SystemExit, MemoryError, 
> SystemError) ?
> <foom> spiv: yes
>
> I guess this would live in twisted.python somewhere, and the coding 
> standard
> would be updated to require its use instead of bare "except:"
>
> Python-dev have discussed a similar measure for the python standard 
> library
> (in the exceptions module), but hadn't come to any consensus last time 
> I
> looked.
>
> Thoughts?  Objections?

Here is a link to the most recent discussion about this on python-dev:

http://mail.python.org/pipermail/python-dev/2004-September/048609.html

-bob




From foom at fuhm.net  Fri Oct 29 22:31:00 2004
From: foom at fuhm.net (James Y Knight)
Date: Sat, 30 Oct 2004 00:31:00 -0400
Subject: [Twisted-Python] UncatchableExceptions
In-Reply-To: <14420F2E-2A29-11D9-878B-000A95BA5446@redivi.com>
References: <20041029215233.GM7380@frobozz>
	<14420F2E-2A29-11D9-878B-000A95BA5446@redivi.com>
Message-ID: <80AEE12A-2A2C-11D9-9668-000A95A50FB2@fuhm.net>

On Oct 30, 2004, at 12:06 AM, Bob Ippolito wrote:
> On Oct 29, 2004, at 17:52, Andrew Bennetts wrote:
>
>> <foom> exarkun: I suspect we should introduce a UncatchableExceptions
>>        constant somewhere
>> <foom> exarkun: and require that all except:'s are preceded by except
>>        UncatchableExceptions: raise
>> <exarkun> foom: It's possible that is a good idea.
>> <exarkun> foom: I'm not really sure, though.
>> <spiv> foom: With (KeyboardInterrupt, SystemExit, MemoryError, 
>> SystemError) ?
>> <foom> spiv: yes
>>
>> I guess this would live in twisted.python somewhere, and the coding 
>> standard
>> would be updated to require its use instead of bare "except:"
>>
>> Python-dev have discussed a similar measure for the python standard 
>> library
>> (in the exceptions module), but hadn't come to any consensus last 
>> time I
>> looked.
>>
>> Thoughts?  Objections?
>
> Here is a link to the most recent discussion about this on python-dev:
>
> http://mail.python.org/pipermail/python-dev/2004-September/048609.html

I would like to point out that the method from the above-quoted IRC 
conversation is *NOT* what I'd like to see added in Python. I'd much 
prefer something like in the linked python-dev mail.

_However_, Twisted is supposed to work on 2.2, 2.3, and 2.4, none of 
which have the hypothetical new exception hierarchy that doesn't suck. 
Therefore, IMO, the best solution to fix things in Twisted, that will 
both work right now, and forwardly compatible, is to do as above and 
require that all except:'s (and except Exception's) are preceded by an 
except somemodule.UncatchableExceptions.

James




From glyph at divmod.com  Fri Oct 29 23:06:53 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 30 Oct 2004 01:06:53 -0400
Subject: [Twisted-Python] UncatchableExceptions
In-Reply-To: <20041029215233.GM7380@frobozz>
References: <20041029215233.GM7380@frobozz>
Message-ID: <1099112813.4711.21.camel@localhost>

On Fri, 2004-10-29 at 23:52 +0200, Andrew Bennetts wrote:
> <foom> exarkun: I suspect we should introduce a UncatchableExceptions
>        constant somewhere
> <foom> exarkun: and require that all except:'s are preceded by except
>        UncatchableExceptions: raise
> <exarkun> foom: It's possible that is a good idea.
> <exarkun> foom: I'm not really sure, though.
> <spiv> foom: With (KeyboardInterrupt, SystemExit, MemoryError, SystemError) ?
> <foom> spiv: yes
> 
> I guess this would live in twisted.python somewhere, and the coding standard
> would be updated to require its use instead of bare "except:"
> 
> Python-dev have discussed a similar measure for the python standard library
> (in the exceptions module), but hadn't come to any consensus last time I
> looked.
> 
> Thoughts?  Objections?

Not an objection *per se*, but I think it would be better to see how the
debate on python-dev turns out; I am pretty sure there are a lot of
subtle issues to consider.  For example, I could go either way on
including SystemExit in that list; there have been many times, when
working with Manhole or similar, that I've imported a script that wasn't
intended for use as a module and had it attempt to exit the interpreter
with a sys.exit; I was glad that except: really was a catch-all in those
cases.

I also ponder what a Deferred with a Failure whose value is MemoryError
would mean :).

In general, though, I think that the Throwable/Exception distinction, as
in Java, is a pretty good idea.




From tim at se.linux.org  Sat Oct 30 07:30:19 2004
From: tim at se.linux.org (=?iso-8859-1?Q?Tim_Terleg=E5rd?=)
Date: Sat, 30 Oct 2004 15:30:19 +0200 (CEST)
Subject: [Twisted-Python] mktap news error
Message-ID: <Pine.LNX.4.44.0410301518210.9833-100000@naskur.se.linux.org>

I'm trying to run the twisted.news server. This should be possible
using:

$ mktap news

but that results in ImportError: news. I get the traceback below.
What am I doing wrong?

Tim


Traceback (most recent call last):
  File "/usr/bin/mktap", line 30, in ?
    run()
  File "/usr/lib/python2.3/site-packages/twisted/scripts/mktap.py",
    line 152, in run
    options.parseOptions(sys.argv[1:])
  File
    "/usr/lib/python2.3/site-packages/twisted/python/usage.py",
    line 209, in parseOptions
    self.postOptions()
  File
    "/usr/lib/python2.3/site-packages/twisted/scripts/mktap.py",
    line 139, in postOptions
    self.parseOptions(self.params)
  File
    "/usr/lib/python2.3/site-packages/twisted/python/usage.py",
    line 197, in parseOptions
    self.subOptions = parser()
  File
    "/usr/lib/python2.3/site-packages/twisted/scripts/mktap.py",
    line 105, in <lambda>
    sc = [ [name, None, (lambda
    obj=module:obj.load().Options()),
  File
    "/usr/lib/python2.3/site-packages/twisted/python/plugin.py",
    line 61, in load
    return
    namedModule(self.module)
  File
    "/usr/lib/python2.3/site-packages/twisted/python/reflect.py",
    line 348, in namedModule
    topLevel = __import__(name)
    ImportError: No module named news




From exarkun at divmod.com  Sat Oct 30 08:22:34 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sat, 30 Oct 2004 14:22:34 GMT
Subject: [Twisted-Python] Re: [Twisted-commits] r12244 - Make spewer log
	calls in threads, too
In-Reply-To: <E1CNr9l-0005cj-00@wolfwood>
Message-ID: <20041030142234.9171.2136854925.divmod.quotient.1144@ohm>

On Sat, 30 Oct 2004 05:12:25 -0600, Andrew Bennetts <spiv at wolfwood.twistedmatrix.com> wrote:
>Author: spiv
> Date: Sat Oct 30 05:12:24 2004
> New Revision: 12244
> 
> Modified:
>    trunk/twisted/application/app.py
> Log:
> Make spewer log calls in threads, too
> 
> Modified: trunk/twisted/application/app.py
> ==============================================================================
> --- trunk/twisted/application/app.py	(original)
> +++ trunk/twisted/application/app.py	Sat Oct 30 05:12:24 2004
> @@ -7,7 +7,7 @@
>  from twisted.persisted import sob
>  from twisted.application import compat, service
>  from twisted import copyright
> -import sys, os, pdb, profile, getpass, traceback, signal
> +import sys, os, pdb, profile, getpass, traceback, signal, threading
>  
>  reactorTypes = {
>      'wx': 'twisted.internet.wxreactor',
> @@ -199,6 +199,7 @@
>          """Print an insanely verbose log of everything that happens.  Useful
>          when debugging freezes or locks in complex code."""
>          sys.settrace(util.spewer)
> +        threading.settrace(util.spewer)
> 

  Is util.spewer really thread-safe?  I would have expected otherwise.

  Jp



From exarkun at divmod.com  Sat Oct 30 08:36:14 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sat, 30 Oct 2004 14:36:14 GMT
Subject: [Twisted-Python] mktap news error
In-Reply-To: <Pine.LNX.4.44.0410301518210.9833-100000@naskur.se.linux.org>
Message-ID: <20041030143614.9171.1732436068.divmod.quotient.1147@ohm>

On Sat, 30 Oct 2004 15:30:19 +0200 (CEST), =?iso-8859-1?Q?Tim_Terleg=E5rd?= <tim at se.linux.org> wrote:
>I'm trying to run the twisted.news server. This should be possible
> using:
> 
> $ mktap news
> 
> but that results in ImportError: news. I get the traceback below.
> What am I doing wrong?
> 

  I cannot reproduce this error.  When I run "mktap news" using the most recent version of Twisted from SVN, I meet with the expected exception, "No newsgroups specified".

  Jp



From andrew-twisted at puzzling.org  Sat Oct 30 11:33:15 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 31 Oct 2004 04:33:15 +1100
Subject: [Twisted-Python] mktap news error
In-Reply-To: <20041030143614.9171.1732436068.divmod.quotient.1147@ohm>
References: <Pine.LNX.4.44.0410301518210.9833-100000@naskur.se.linux.org>
	<20041030143614.9171.1732436068.divmod.quotient.1147@ohm>
Message-ID: <20041030173315.GA27284@frobozz>

On Sat, Oct 30, 2004 at 02:36:14PM +0000, exarkun at divmod.com wrote:
> On Sat, 30 Oct 2004 15:30:19 +0200 (CEST), =?iso-8859-1?Q?Tim_Terleg=E5rd?= <tim at se.linux.org> wrote:
> >I'm trying to run the twisted.news server. This should be possible
> > using:
> > 
> > $ mktap news
> > 
> > but that results in ImportError: news. I get the traceback below.
> > What am I doing wrong?
> > 
> 
>   I cannot reproduce this error.  When I run "mktap news" using the most
>   recent version of Twisted from SVN, I meet with the expected exception,
>   "No newsgroups specified".

I see it with the version in debian (1.3.0), but not with current SVN, so I
guess this is an old bug.

-Andrew.




From andrew-twisted at puzzling.org  Sat Oct 30 11:35:13 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 31 Oct 2004 04:35:13 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] r12244 - Make spewer log
	calls in threads, too
In-Reply-To: <20041030142234.9171.2136854925.divmod.quotient.1144@ohm>
References: <E1CNr9l-0005cj-00@wolfwood>
	<20041030142234.9171.2136854925.divmod.quotient.1144@ohm>
Message-ID: <20041030173513.GB27284@frobozz>

On Sat, Oct 30, 2004 at 02:22:34PM +0000, exarkun at divmod.com wrote:
[...]
> 
>   Is util.spewer really thread-safe?  I would have expected otherwise.

It seems to work as expected for me.  What part is unsafe?

-Andrew.




From tim at se.linux.org  Sat Oct 30 11:43:41 2004
From: tim at se.linux.org (=?iso-8859-1?Q?Tim_Terleg=E5rd?=)
Date: Sat, 30 Oct 2004 19:43:41 +0200 (CEST)
Subject: [Twisted-Python] mktap news error
In-Reply-To: <20041030173315.GA27284@frobozz>
Message-ID: <Pine.LNX.4.44.0410301940550.26275-100000@naskur.se.linux.org>

> > > $ mktap news
> > >
> > > but that results in ImportError: news. I get the traceback below.
> > > What am I doing wrong?
> > >
> >
> >   I cannot reproduce this error.  When I run "mktap news" using the most
> >   recent version of Twisted from SVN, I meet with the expected exception,
> >   "No newsgroups specified".
>
> I see it with the version in debian (1.3.0), but not with current SVN, so I
> guess this is an old bug.

Define old  :)

1.3.0 is the current official version...

But 2.0 will be out tomorrow (IRC topic promises so) so I guess I could
download that tomorrow and be happy.

Tim




