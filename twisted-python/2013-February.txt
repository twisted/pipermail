From julian at grayvines.com  Fri Feb  1 12:14:29 2013
From: julian at grayvines.com (Julian Berman)
Date: Fri, 1 Feb 2013 12:14:29 -0500
Subject: [Twisted-Python] txjsonrpc
Message-ID: <CABJQSkmV731FEPeN2m+ELJmPRYTyHjd6GnJYkcCz89YsCEObog@mail.gmail.com>

Hi. FWIW I had a project that used JSONRPC and decided to use v2 so I wrote
https://github.com/Julian/txjsonrpc-tcp

(Which I couldn't think up a less ambiguous name for at the time
unfortunately)

My requirements were kinda simple and Twisted had evolved a bit since when
oubiwann wrote txjsonrpc so it's written a bit hastily from scratch. The
project was ultimately abandoned for now, so it's kind of in an unpolished
state to say the least, but last I recall it does work, certainly if you
just want to use it as a springboard.

Julian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130201/fbfe3bc6/attachment.htm 

From mgwilliams at gmail.com  Fri Feb  1 12:48:58 2013
From: mgwilliams at gmail.com (Matthew Williams)
Date: Fri, 1 Feb 2013 12:48:58 -0500
Subject: [Twisted-Python] txjsonrpc
In-Reply-To: <CABJQSkmV731FEPeN2m+ELJmPRYTyHjd6GnJYkcCz89YsCEObog@mail.gmail.com>
References: <CABJQSkmV731FEPeN2m+ELJmPRYTyHjd6GnJYkcCz89YsCEObog@mail.gmail.com>
Message-ID: <CAD6uV8CtLJtg2Fknm6fmVOOiJk3+XBHqw4=-+DgV4-uhcpWKjg@mail.gmail.com>

Thanks Julian,

I actually have a similar project (
https://github.com/mgwilliams/txJsonRpc-Netstrings), but would prefer to
use the "mainstream" project. At the moment I'm working out whether that's
possible for our needs.

Matthew

On Fri, Feb 1, 2013 at 12:14 PM, Julian Berman <julian at grayvines.com> wrote:

> Hi. FWIW I had a project that used JSONRPC and decided to use v2 so I
> wrote https://github.com/Julian/txjsonrpc-tcp
>
> (Which I couldn't think up a less ambiguous name for at the time
> unfortunately)
>
> My requirements were kinda simple and Twisted had evolved a bit since when
> oubiwann wrote txjsonrpc so it's written a bit hastily from scratch. The
> project was ultimately abandoned for now, so it's kind of in an unpolished
> state to say the least, but last I recall it does work, certainly if you
> just want to use it as a springboard.
>
> Julian
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130201/ba15e0c5/attachment.htm 

From duncan.mcgreggor at gmail.com  Fri Feb  1 14:30:53 2013
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Fri, 1 Feb 2013 11:30:53 -0800
Subject: [Twisted-Python] txjsonrpc
In-Reply-To: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>
References: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>
Message-ID: <CAFJQhU6P5Wveq+rnM3QSW+wjHGheyP1Eied-MShGi+KKJ7e-qA@mail.gmail.com>

On Thu, Jan 31, 2013 at 7:43 AM, Matthew Williams <mgwilliams at gmail.com> wrote:
> I have a couple questions regarding txjsonrpc
> (https://github.com/oubiwann/txjsonrpc/) in connection with the recent
> addition of version 2.0 support.
>
> * How complete is the version 2.0 support? I had actually tried some years
> ago to add v2.0 support, but gave up due to some issues I no longer fully
> recall. Are there any known issues with the present implementation?
>
> * I noticed that all results are wrapped in an array (see netstring version
> at
> https://github.com/oubiwann/txjsonrpc/blob/master/txjsonrpc/netstring/jsonrpc.py#L63-L64,
> but the web implementation has the same code.). This seems odd, as a jsonrpc
> result can be any valid json value, including a string, integer, array, or
> dict. The result is that on the client end, what I return from the function
> call as {"a": "b"} is received as [{"a": "b"}]. Is there some reason for
> this? Would a patch altering this behavior (perhaps optionally) be accepted?

Absolutely!

Be sure that your patch wouldn't break existing functionality (for
those that depend upon it) with unit tests for both cases.

Thanks,

d


From mgwilliams at gmail.com  Fri Feb  1 14:49:19 2013
From: mgwilliams at gmail.com (Matthew Williams)
Date: Fri, 1 Feb 2013 14:49:19 -0500
Subject: [Twisted-Python] txjsonrpc
In-Reply-To: <CAFJQhU6P5Wveq+rnM3QSW+wjHGheyP1Eied-MShGi+KKJ7e-qA@mail.gmail.com>
References: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>
	<CAFJQhU6P5Wveq+rnM3QSW+wjHGheyP1Eied-MShGi+KKJ7e-qA@mail.gmail.com>
Message-ID: <CAD6uV8BDEtJXb9_CTZpTEYWo6UhzaHZf+RfC=YuvdsZgxdUyFA@mail.gmail.com>

Hi Duncan,

Thanks for the response.

I'm certainly open to suggestions otherwise, but it seems patching
txjsonrpc to do the following would be rather involved. I started working
on some of this and realized maintaining backwards compatibility might be
very difficult:

* Persistent TCP connections across requests. At first I thought I could
just add an additional Proxy and Factory. Unfortunately the BaseProxy and
BaseFactory expect a new connection for each request, so this started
getting quite involved and would have either require extensive changes to
all the transports, or a parallel implementation.

* The array issue is a bit strange. The only solution I could think of
would be to add a "wrap_results" keyword or some such to the Proxy
constructor (both client and server, as I think the client compensates for
the array wrapper). It would have to default to True for backwards
compatibility.

* Keyword arguments are not supported (but are allowed by 2.0 spec). I
don't think this would be too hard to add.

I'm on the fence as to whether to attack these issues in txjsonrpc, or to
revert to my 2.0/netstrings only implementation, which itself needs a lot
of work (the code is far from ideal, there are no tests, etc.).

Matthew

On Fri, Feb 1, 2013 at 2:30 PM, Duncan McGreggor <duncan.mcgreggor at gmail.com
> wrote:

> On Thu, Jan 31, 2013 at 7:43 AM, Matthew Williams <mgwilliams at gmail.com>
> wrote:
> > I have a couple questions regarding txjsonrpc
> > (https://github.com/oubiwann/txjsonrpc/) in connection with the recent
> > addition of version 2.0 support.
> >
> > * How complete is the version 2.0 support? I had actually tried some
> years
> > ago to add v2.0 support, but gave up due to some issues I no longer fully
> > recall. Are there any known issues with the present implementation?
> >
> > * I noticed that all results are wrapped in an array (see netstring
> version
> > at
> >
> https://github.com/oubiwann/txjsonrpc/blob/master/txjsonrpc/netstring/jsonrpc.py#L63-L64
> ,
> > but the web implementation has the same code.). This seems odd, as a
> jsonrpc
> > result can be any valid json value, including a string, integer, array,
> or
> > dict. The result is that on the client end, what I return from the
> function
> > call as {"a": "b"} is received as [{"a": "b"}]. Is there some reason for
> > this? Would a patch altering this behavior (perhaps optionally) be
> accepted?
>
> Absolutely!
>
> Be sure that your patch wouldn't break existing functionality (for
> those that depend upon it) with unit tests for both cases.
>
> Thanks,
>
> d
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130201/4a8f6fc7/attachment.htm 

From glyph at twistedmatrix.com  Fri Feb  1 19:42:34 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 1 Feb 2013 16:42:34 -0800
Subject: [Twisted-Python] maintenance release - a security issue and a
	regression
In-Reply-To: <20130131150725.7db9cf7b@saiph.darkstar.net>
References: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
	<20130130233234.56c54ad2@saiph.darkstar.net>
	<20130131150725.7db9cf7b@saiph.darkstar.net>
Message-ID: <FD0791C6-CBA3-4FF3-9FE2-7EB2DC056D92@twistedmatrix.com>


On Jan 31, 2013, at 6:07 AM, Angelo Dell'Aera <angelo.dellaera at gmail.com> wrote:

> On Wed, 30 Jan 2013 23:32:34 +0100
> Angelo Dell'Aera <angelo.dellaera at gmail.com> wrote:
> 
>> On Wed, 30 Jan 2013 11:04:36 -0800
>> Glyph <glyph at twistedmatrix.com> wrote:
>> 
>>> Any volunteers for parts of this process?
>> 
>> I'm not familiar with Twisted patching process and for this reason
>> I'm just attaching a small patch here for #6245 because I'd like to
>> discuss about the approach. If correct I will move on in the process
>> (hopefully in the right way)
>> 
>> The patch simply tries to encode the name argument properly if
>> unicode. This is the same approach used by ralphm but applied to Name
>> class initialization so it should be really generic.
>> 
>> Just about a doubt about how to handle an exception potentially
>> raised during the name encoding. Any idea?
>> 
>> Ciao.
>> 
>> PS Attached a simple test code which forces the name to resolve to be
>> unicode. It fails against 12.3.0 while it is correclty executed after
>> patching.
> 
> 
> I read documentation about Twisted testing and tested if the suggested patch 
> introduces some regressions in the existing code
> 
> buffer at saiph ~/Twisted-12.3.0/twisted $ trial twisted.names
> [..]
> Ran 271 tests in 0.425s
> 
> PASSED (successes=271)
> 
> which seems like it's not happening.
> 
> Obviously this is not exhaustive because seems like there are no specific tests 
> for that code path (name is always passed as byte) but I can try writing some 
> additional ones if needed. 

Hi Angelo,

Thanks for your contribution.  It looks like the ticket in question already has a branch in review though, so we won't need your patch this time.

In the future, the right way to submit patches is to attach them to the appropriate ticket; in this case, <http://twistedmatrix.com/trac/ticket/6245>.  They tend to get lost or ignored on the mailing list (as happened here).  To answer your question about additional tests, yes, whenever we fix a bug in Twisted, the fix has to come along with a new test to ensure that it stays fixed in subsequent releases.

Thanks,

-glyph



From exarkun at twistedmatrix.com  Sun Feb  3 00:05:29 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 03 Feb 2013 05:05:29 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1359867929.87.1039311283@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130203/fc7a1a01/attachment.htm 

From joel.tremblet at openflyers.com  Wed Feb  6 22:29:19 2013
From: joel.tremblet at openflyers.com (Joel Tremblet)
Date: Wed, 06 Feb 2013 22:29:19 -0500
Subject: [Twisted-Python] Add serial connection to a daemon
Message-ID: <20130206222919.7xyj6cc4gkcws88k@webmail.openflyers.com>


Hi

I build a daemon from the example
http://twistedmatrix.com/documents/current/core/howto/tutorial/factory.html

application = service.Application('opensource')
f = OpensourceService()

webRoot = resource.Resource()
webRoot.putChild('',AdminPage())

serviceCollection = service.IServiceCollection(application)
internet.TCPClient(ADDR, PORT, f.getClientFactory()
                    ).setServiceParent(serviceCollection)
internet.TCPServer(SERVICE_PORT, server.Site(f.getWebResource())
                    ).setServiceParent(serviceCollection)
internet.TCPServer(WEB_ADMIN_PORT, server.Site(webRoot)
                    ).setServiceParent(serviceCollection)

It's work fine but I want to add a serial connection to send a order  
to my Client when a event occur on the USB connector

I read my serial data with twisted.internet.serialport

from twisted.internet import reactor
from twisted.internet.protocol import Factory, Protocol
from twisted.internet.serialport import SerialPort

COM_PORT='COM5'
BAUD_RATE=9600

class USBClient(Protocol):
     def __init__(self, network):
         self.network = network
     def dataReceived(self, data):
         print "Data received", repr(data)
         self.network.notifyAll(data)

class CommandRx(Protocol):
     def connectionMade(self):
         self.factory.client_list.append(self)
     def connectionLost(self, reason):
         if self in self.factory.client_list:
             self.factory.client_list.remove(self)

class CommandRxFactory(Factory):
     protocol = CommandRx
     def __init__(self):
         self.client_list = []
     def notifyAll(self, data):
         for cli in self.client_list:
             cli.transport.write(data)

tcpfactory = CommandRxFactory()
reactor.listenTCP(8001, tcpfactory)
SerialPort(USBClient(tcpfactory), COM_PORT, reactor, baudrate=BAUD_RATE)
reactor.run()

Can I integrated this serial connection into my daemon

Thanks for your help
Joel


From itamar at futurefoundries.com  Thu Feb  7 11:19:42 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Thu, 7 Feb 2013 11:19:42 -0500
Subject: [Twisted-Python] Add serial connection to a daemon
In-Reply-To: <20130206222919.7xyj6cc4gkcws88k@webmail.openflyers.com>
References: <20130206222919.7xyj6cc4gkcws88k@webmail.openflyers.com>
Message-ID: <CAOp9P3p52Wbb7p-HyVw5oXCD3pQ7uZ3HDViG8EDniuz-X4yFMw@mail.gmail.com>

On Wed, Feb 6, 2013 at 10:29 PM, Joel Tremblet <joel.tremblet at openflyers.com
> wrote:

>
> Can I integrated this serial connection into my daemon
>

You want to make a custom service:

from twisted.application.service import Service
from twisted.internet import reactor

class CommandService(Service):
    def startService(self):
        reactor.listenTCP(8001, tcpfactory)
        SerialPort(USBClient(tcpfactory), COM_PORT, reactor,
baudrate=BAUD_RATE)

and now you can add an instance of this service to the Application in your
.tac file, e.g.:

CommandService().setServiceParent(application)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130207/c7f59e28/attachment.htm 

From joel.tremblet at openflyers.com  Thu Feb  7 22:33:42 2013
From: joel.tremblet at openflyers.com (Joel Tremblet)
Date: Thu, 07 Feb 2013 22:33:42 -0500
Subject: [Twisted-Python] Add serial connection to a daemon
In-Reply-To: <CAOp9P3p52Wbb7p-HyVw5oXCD3pQ7uZ3HDViG8EDniuz-X4yFMw@mail.gmail.com>
References: <20130206222919.7xyj6cc4gkcws88k@webmail.openflyers.com>
	<CAOp9P3p52Wbb7p-HyVw5oXCD3pQ7uZ3HDViG8EDniuz-X4yFMw@mail.gmail.com>
Message-ID: <20130207223342.9vb5xsuxztw8k8kg@webmail.openflyers.com>


Thank you, It works
Twisted is so simple !
:-)

Jo?l

Le Thu, 7 Feb 2013 11:19:42 -0500 Itamar Turner-Trauring  
<itamar at futurefoundries.com> a ?crit?:

> On Wed, Feb 6, 2013 at 10:29 PM, Joel Tremblet <joel.tremblet at openflyers.com
>> wrote:
>
>>
>> Can I integrated this serial connection into my daemon
>>
>
> You want to make a custom service:
>
> from twisted.application.service import Service
> from twisted.internet import reactor
>
> class CommandService(Service):
>     def startService(self):
>         reactor.listenTCP(8001, tcpfactory)
>         SerialPort(USBClient(tcpfactory), COM_PORT, reactor,
> baudrate=BAUD_RATE)
>
> and now you can add an instance of this service to the Application in your
> .tac file, e.g.:
>
> CommandService().setServiceParent(application)
>


From lacrima.maxim at gmail.com  Fri Feb  8 07:01:53 2013
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Fri, 8 Feb 2013 14:01:53 +0200
Subject: [Twisted-Python] Perspective broker over standard IO. How?
Message-ID: <CAKef57PpDZBYXaOXMEGgeEogR_Uk+vh=v5FQhkXKFKmwsG270Q@mail.gmail.com>

Hi!

I can't figure out how to use Perspective broker over stdio. Say I have
file `child.py`:

----
from twisted.internet.endpoints import StandardIOEndpoint
from twisted.internet import reactor
from twisted.spread import pb

class Foo(pb.Root):
    def remote_do_smth(self):
        pass

def main():
    endpoint = StandardIOEndpoint(reactor)
    f = pb.PBServerFactory(Foo())
    endpoint.listen(f)
    reactor.run()

if __name__ == '__main__':
    main()
----

Then say I have `main.py`:
----
import sys
from twisted.spread import pb
from twisted.internet import reactor

def cb(o):
    d = o.callRemote("do_smth")
    return d

def main():
    exe = sys.executable
    args = [exe, '/path/to/child.py']

    factory = pb.PBClientFactory()
    # now what? The below is a wrong way to create protocol.
    # But how do I do this?
    proto = factory.buildProtocol(('foo',))
    reactor.spawnProcess(proto, exe, args)

    d = factory.getRootObject()
    d.addCallback(cb)
    d.addCallback(lambda _: reactor.stop())

    reactor.run()

if __name__ == '__main__':
    main()
----

How do I spawn `child.py` from a parent process, such that the parent can
retrieve the root object and call methods on it?

The code above throws errors:

http://pastebin.com/7TiZdDVc

Thanks in advance.

-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130208/a30693b6/attachment.htm 

From itamar at futurefoundries.com  Fri Feb  8 07:45:49 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Fri, 8 Feb 2013 07:45:49 -0500
Subject: [Twisted-Python] Perspective broker over standard IO. How?
In-Reply-To: <CAKef57PpDZBYXaOXMEGgeEogR_Uk+vh=v5FQhkXKFKmwsG270Q@mail.gmail.com>
References: <CAKef57PpDZBYXaOXMEGgeEogR_Uk+vh=v5FQhkXKFKmwsG270Q@mail.gmail.com>
Message-ID: <CAOp9P3rWwqWpX9Z==VRo857istNku1UX_Qm6AO72msbK=-DZ6g@mail.gmail.com>

    # now what? The below is a wrong way to create protocol.

>     # But how do I do this?
>     proto = factory.buildProtocol(('foo',))
>     reactor.spawnProcess(proto, exe, args)
>

spawnProcess takes a ProcessProtocol, which has a different interface than
regular Protocols. You'll need to make a ProcessProtocol that hands over
data to the PB protocol instance. The process documentation covers the API:
http://twistedmatrix.com/documents/current/core/howto/process.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130208/ca530699/attachment.htm 

From itamar at futurefoundries.com  Fri Feb  8 07:46:49 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Fri, 8 Feb 2013 07:46:49 -0500
Subject: [Twisted-Python] Perspective broker over standard IO. How?
In-Reply-To: <CAOp9P3rWwqWpX9Z==VRo857istNku1UX_Qm6AO72msbK=-DZ6g@mail.gmail.com>
References: <CAKef57PpDZBYXaOXMEGgeEogR_Uk+vh=v5FQhkXKFKmwsG270Q@mail.gmail.com>
	<CAOp9P3rWwqWpX9Z==VRo857istNku1UX_Qm6AO72msbK=-DZ6g@mail.gmail.com>
Message-ID: <CAOp9P3rOig+O9gebK4aSKs5YQUCF87UQ2Y0j37HOouS4iSqb6A@mail.gmail.com>

Eventually this will be easier, BTW, once this ticket is merged:
https://twistedmatrix.com/trac/ticket/4696
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130208/3fe958c6/attachment.htm 

From chespinoza at gmail.com  Fri Feb  8 08:50:14 2013
From: chespinoza at gmail.com (Christian Espinoza)
Date: Fri, 8 Feb 2013 10:50:14 -0300
Subject: [Twisted-Python] Perspective Broker system into a TCP Listener
Message-ID: <CAGBwpM2Zj=KK1Z=QJeOYKPkzkbqWgKQhTWJHWu+2fR--sv00tQ@mail.gmail.com>

Hello, I'm trying to understand how can I use Perspective Broker to send
some data getted from a TCP listener to another process...

I can't figure out how to get it....


from twisted.internet import protocol, reactor
from twisted.python import log

from twisted.spread import pb


class Service(protocol.Protocol):
    extra = {}
  def dataReceived(self, data):
  extra = doSomething(data)
  #SEND extra TO ANOTHER PROCESS -- FAILED CODE
        factory = pb.PBClientFactory()
        reactor.connectTCP("localhost", 8798, factory)
        root = factory.getRootObject()

        def got_root(root):
          rc = root.callRemote("get", data)
            def got_value(v):
              print v
                reactor.stop()
            rc.addCallback(got_value)

        root.addCallback(got_root)
        reactor.run()
                ....

class ServerFactory(protocol.Factory):
    def buildProtocol(self, addr):
        return Service()

reactor.listenTCP(8797, ServerFactory())
reactor.run()

This testing code fails, I know I'm wrong, please could somebody help me to
understand and get it?
Thanks in advance.
Christian Espinoza.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130208/cf5aeb5b/attachment.htm 

From lacrima.maxim at gmail.com  Fri Feb  8 09:28:05 2013
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Fri, 8 Feb 2013 16:28:05 +0200
Subject: [Twisted-Python] Perspective broker over standard IO. How?
In-Reply-To: <CAOp9P3rOig+O9gebK4aSKs5YQUCF87UQ2Y0j37HOouS4iSqb6A@mail.gmail.com>
References: <CAKef57PpDZBYXaOXMEGgeEogR_Uk+vh=v5FQhkXKFKmwsG270Q@mail.gmail.com>
	<CAOp9P3rWwqWpX9Z==VRo857istNku1UX_Qm6AO72msbK=-DZ6g@mail.gmail.com>
	<CAOp9P3rOig+O9gebK4aSKs5YQUCF87UQ2Y0j37HOouS4iSqb6A@mail.gmail.com>
Message-ID: <CAKef57O0-Lg1q4DniBNZZSOG+Di8AtdvH28_7wTcUJr6TYe0jQ@mail.gmail.com>

Hi Itamar,

Thank you for your hints. I got it working:

----
# client.py
from twisted.internet.endpoints import StandardIOEndpoint
from twisted.internet import reactor
from twisted.spread import pb

class Foo(pb.Root):
    def remote_do_smth(self):
        return 'hello!'

def main():
    endpoint = StandardIOEndpoint(reactor)
    f = pb.PBServerFactory(Foo())
    endpoint.listen(f)
    reactor.run()

if __name__ == '__main__':
    main()

----

----
# main.py
import sys
from twisted.spread import pb
from twisted.internet import reactor, protocol
from twisted.python import util

def do_something(obj):
    d = obj.callRemote("do_smth")
    return d

class FooProcessProtocol(protocol.ProcessProtocol):

    def __init__(self, PBFactory):
        self.broker = PBFactory.buildProtocol(('foo',))

    def connectionMade(self):
        self.broker.makeConnection(self.transport)

    def outReceived(self, data):
        self.broker.dataReceived(data)

    def errReceived(self, data):
        print data


def main():
    exe = sys.executable
    args = [exe, '~/misc/client.py']

    factory = pb.PBClientFactory()
    reactor.spawnProcess(FooProcessProtocol(factory), exe, args)

    d = factory.getRootObject()
    d.addCallback(do_something)
    d.addCallback(util.println)
    d.addCallback(lambda _: reactor.stop())

    reactor.run()

if __name__ == '__main__':
    main()

----

$ python main.py
hello!

It works. I just wonder if I there are some edge cases that are not handled
by this implementation.

Thank you.


On 8 February 2013 14:46, Itamar Turner-Trauring <itamar at futurefoundries.com
> wrote:

> Eventually this will be easier, BTW, once this ticket is merged:
> https://twistedmatrix.com/trac/ticket/4696
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130208/648befbb/attachment.htm 

From poalman at gmail.com  Fri Feb  8 10:12:58 2013
From: poalman at gmail.com (Paul Wiseman)
Date: Fri, 8 Feb 2013 15:12:58 +0000
Subject: [Twisted-Python] TaskStopped error,
	unsure of the cause and solution
In-Reply-To: <CACgdh2gQy9Gp9qbqwMC6CV4J1Ti2F+=+c36cVtnrO0nceV9uWA@mail.gmail.com>
References: <CACgdh2hFm80KFzDBY7sCS5XveZNX8dovo1XGt3Jt_WrJFQ7tJA@mail.gmail.com>
	<20121221180822.6389.1626477491.divmod.xquotient.354@localhost6.localdomain6>
	<CACgdh2gQy9Gp9qbqwMC6CV4J1Ti2F+=+c36cVtnrO0nceV9uWA@mail.gmail.com>
Message-ID: <CACgdh2iF3q2xkT4XShQCRCctLu1cQNGtCdOkA2GRn2DfoNxQLg@mail.gmail.com>

On 27 December 2012 14:49, Paul Wiseman <poalman at gmail.com> wrote:
> On 21 December 2012 18:08,  <exarkun at twistedmatrix.com> wrote:
>> On 04:12 pm, poalman at gmail.com wrote:
>>>Hey,
>>>
>>>I'm getting the following error in my logs (lots and lots), but only
>>>after the server has been running for some time, I'm not sure what the
>>>cause is or what I can do to remedy it.
>>
>> This seems like a bug in `Agent`, perhaps related to `stopProducing`
>> being called more than once.  It would be great if you could produce a
>> minimal example to include with a bug report in the issue tracker.  An
>> example that reproduces the problem will also make it easier to see
>> where the bug is in your code, if it happens to be there rather than in
>> Twisted.
>
> I'll try my best! The problem is I don't seem to see this at all for
> 10k+ requests ish then I guess something must trigger it as it will
> start happening a lot, so it may be difficult to reproduce.
>

I've still not been able to reproduce this on demand.. the least
amount of request I've seen before getting the error is 6500 :/

I've also seen this stack trace which I didn't notice before

2013-02-08 10:07:28+0000 [HTTP11ClientProtocol,client] Unhandled Error
        Traceback (most recent call last):
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/application/app.py",
line 323, in runReactorWithLogging
            reactor.run()
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/base.py",
line 1169, in run
            self.mainLoop()
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/base.py",
line 1181, in mainLoop
            self.doIteration(t)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/epollreactor.py",
line 379, in doPoll
            log.callWithLogger(selectable, _drdw, selectable, fd, event)
        --- <exception caught here> ---
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
line 84, in callWithLogger
            return callWithContext({"system": lp}, func, *args, **kw)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
line 69, in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/context.py",
line 118, in callWithContext
            return self.currentContext().callWithContext(ctx, func, *args, **kw)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/context.py",
line 81, in callWithContext
            return func(*args,**kw)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/posixbase.py",
line 639, in _doReadOrWrite
            self._disconnectSelectable(selectable, why, inRead)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/posixbase.py",
line 258, in _disconnectSelectable
            selectable.readConnectionLost(f)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/tcp.py",
line 267, in readConnectionLost
            self.connectionLost(reason)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/tcp.py",
line 473, in connectionLost
            self._commonConnection.connectionLost(self, reason)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/tcp.py",
line 281, in connectionLost
abstract.FileDescriptor.connectionLost(self, reason)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/abstract.py",
line 182, in connectionLost            self.producer.stopProducing()
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/client.py",
line 760, in stopProducing            self._task.stop()
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/task.py",
line 460, in stop            self._completeWith(TaskStopped(),
Failure(TaskStopped()))
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/task.py",
line 439, in _completeWith
self._cooperator._removeTask(self)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/task.py",
line 578, in _removeTask            self._delayedCall.cancel()
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/base.py",
line 89, in cancel
            raise error.AlreadyCalled
        twisted.internet.error.AlreadyCalled: Tried to cancel an
already-called event.

I'll keep trying to work out the issue, any suggestions on what I
might try to reproduce it or guesses at causes?

>>
>> Jean-Paul
>>>This is what I see in the logs:
>>>
>>>2012-12-20 17:07:17+0000 [HTTP11ClientProtocol,client] Unhandled Error
>>>        Traceback (most recent call last):
>>>        Failure: twisted.web._newclient.RequestTransmissionFailed:
>>>[<twisted.python.failure.Failure <class
>>>'twisted.internet.error.ConnectionDone'>>]
>>>
>>>2012-12-20 17:07:17+0000 [HTTP11ClientProtocol,client] Unexpected
>>>exception from twisted.web.client.FileBodyProducer.stopProducing
>>>        Traceback (most recent call last):
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-
>>>x86_64.egg/twisted/internet/endpoints.py",
>>>line 99, in connectionLost
>>>            return self._wrappedProtocol.connectionLost(reason)
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-
>>>x86_64.egg/twisted/web/_newclient.py",
>>>line 859, in dispatcher
>>>            return func(*args, **kwargs)
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-
>>>x86_64.egg/twisted/web/_newclient.py",
>>>line 1458, in _connectionLost_TRANSMITTING
>>>            self._currentRequest.stopWriting()
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-
>>>x86_64.egg/twisted/web/_newclient.py",
>>>line 760, in stopWriting
>>>            _callAppFunction(self.bodyProducer.stopProducing)
>>>        --- <exception caught here> ---
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-
>>>x86_64.egg/twisted/web/_newclient.py",
>>>line 191, in _callAppFunction
>>>            function()
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/client.py",
>>>line 760, in stopProducing
>>>            self._task.stop()
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-
>>>x86_64.egg/twisted/internet/task.py",
>>>line 459, in stop
>>>            self._checkFinish()
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-
>>>x86_64.egg/twisted/internet/task.py",
>>>line 469, in _checkFinish
>>>            raise self._completionState
>>>        twisted.internet.task.TaskStopped:
>>>
>>>Just loads of those, they always seem to come through in pairs (the
>>>first twisted.internet.error.ConnectionDone, and then the
>>>twisted.internet.task.TaskStopped as above)
>>>
>>>I'm just doing PUT requests with twisted.web.client.Agent and using a
>>>twisted.web.client.FileBodyProducer to provide the content.
>>>
>>>I'm doing the PUT while I still have the request from a render_GET, so
>>>I thought maybe it's caused if the user disconnects while I'm doing
>>>the PUT? The idea is I redirect them to the file I PUT with
>>>request.redirect, which seems to work fine (until I get this error and
>>>it doesn't)
>>>
>>>The reason I do a PUT and redirect, instead of just writing back to
>>>the request is that I check if the file is in a cache first, I then
>>>only PUT if it's not there- then redirect afterwards.
>>>
>>>Any clues or ideas of what is happening would be hugely helpful
>>>
>>>thanks!!
>>>
>>>Paul
>>>
>>>_______________________________________________
>>>Twisted-Python mailing list
>>>Twisted-Python at twistedmatrix.com
>>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From exarkun at twistedmatrix.com  Fri Feb  8 14:03:26 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Feb 2013 19:03:26 -0000
Subject: [Twisted-Python] TaskStopped error,
 unsure of the cause and solution
In-Reply-To: <CACgdh2iF3q2xkT4XShQCRCctLu1cQNGtCdOkA2GRn2DfoNxQLg@mail.gmail.com>
References: <CACgdh2hFm80KFzDBY7sCS5XveZNX8dovo1XGt3Jt_WrJFQ7tJA@mail.gmail.com>
	<20121221180822.6389.1626477491.divmod.xquotient.354@localhost6.localdomain6>
	<CACgdh2gQy9Gp9qbqwMC6CV4J1Ti2F+=+c36cVtnrO0nceV9uWA@mail.gmail.com>
	<CACgdh2iF3q2xkT4XShQCRCctLu1cQNGtCdOkA2GRn2DfoNxQLg@mail.gmail.com>
Message-ID: <20130208190326.3816.1016959687.divmod.xquotient.99@localhost6.localdomain6>

On 03:12 pm, poalman at gmail.com wrote:
>
>I've still not been able to reproduce this on demand.. the least
>amount of request I've seen before getting the error is 6500 :/
>
>I've also seen this stack trace which I didn't notice before
>
>2013-02-08 10:07:28+0000 [HTTP11ClientProtocol,client] Unhandled Error
>        Traceback (most recent call last):
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/application/app.py",
>line 323, in runReactorWithLogging
>            reactor.run()
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/base.py",
>line 1169, in run
>            self.mainLoop()
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/base.py",
>line 1181, in mainLoop
>            self.doIteration(t)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/epollreactor.py",
>line 379, in doPoll
>            log.callWithLogger(selectable, _drdw, selectable, fd, event)
>        --- <exception caught here> ---
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
>line 84, in callWithLogger
>            return callWithContext({"system": lp}, func, *args, **kw)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
>line 69, in callWithContext
>            return context.call({ILogContext: newCtx}, func, *args, 
>**kw)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/python/context.py",
>line 118, in callWithContext
>            return self.currentContext().callWithContext(ctx, func, 
>*args, **kw)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/python/context.py",
>line 81, in callWithContext
>            return func(*args,**kw)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/posixbase.py",
>line 639, in _doReadOrWrite
>            self._disconnectSelectable(selectable, why, inRead)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/posixbase.py",
>line 258, in _disconnectSelectable
>            selectable.readConnectionLost(f)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/tcp.py",
>line 267, in readConnectionLost
>            self.connectionLost(reason)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/tcp.py",
>line 473, in connectionLost
>            self._commonConnection.connectionLost(self, reason)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/tcp.py",
>line 281, in connectionLost
>abstract.FileDescriptor.connectionLost(self, reason)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/abstract.py",
>line 182, in connectionLost            self.producer.stopProducing()
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/client.py",
>line 760, in stopProducing            self._task.stop()
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/task.py",
>line 460, in stop            self._completeWith(TaskStopped(),
>Failure(TaskStopped()))
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/task.py",
>line 439, in _completeWith
>self._cooperator._removeTask(self)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/task.py",
>line 578, in _removeTask            self._delayedCall.cancel()
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/base.py",
>line 89, in cancel
>            raise error.AlreadyCalled
>        twisted.internet.error.AlreadyCalled: Tried to cancel an
>already-called event.
>
>I'll keep trying to work out the issue, any suggestions on what I
>might try to reproduce it or guesses at causes?

Since it seems to be related to handling of lost connections, you may be 
able to reproduce it more easily if you issue your requests to an HTTP 
server which drops connections more often.  Presumably the production 
service you're issuing requests too tries pretty hard to properly serve 
responses to every request.  If you point `Agent` at a worse HTTP server 
(eg, one you write using twisted.web and implement to close connections 
prematurely at various points during the response) this may produce the 
issue more quickly.

You could also try hooking `Agent` up to one of the in-memory 
reactors/transports.  The advantage of this is that it will be much 
easier to "close" the connection at a specific point 
(deterministically).  The disadvantage is that the in-memory 
reactor/transport may not exactly replicate the real reactor/transport 
behavior and so fail to reproduce the issue entirely.

Jean-Paul


From exarkun at twistedmatrix.com  Sun Feb 10 00:05:23 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 10 Feb 2013 05:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1360472723.67.1820569466@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130210/b896533e/attachment.htm 

From luca.sbardella at gmail.com  Sun Feb 10 11:56:58 2013
From: luca.sbardella at gmail.com (Luca Sbardella)
Date: Sun, 10 Feb 2013 16:56:58 +0000
Subject: [Twisted-Python] imap google mail client
Message-ID: <CAF94-jZ7N+oamEfOKeuSa1F1E08OqiNu1zO24LmRe=YS5GPCSQ@mail.gmail.com>

Hello,
first time here for me.

I'm writing a little application to access gmail using the IMAP4 library.
I'm using the connection string

strport='ssl:host=imap.gmail.com:port=993'

but it doesn't connect (timeout failure).

The code is the mail_client function in this module

https://github.com/quantmind/pulsar/blob/handshake/examples/webmail/manage.py

What am I doing wrong?
Thanks
Luca
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130210/f948f1d7/attachment.htm 

From itamar at futurefoundries.com  Sun Feb 10 15:56:39 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 10 Feb 2013 15:56:39 -0500
Subject: [Twisted-Python] imap google mail client
In-Reply-To: <CAF94-jZ7N+oamEfOKeuSa1F1E08OqiNu1zO24LmRe=YS5GPCSQ@mail.gmail.com>
References: <CAF94-jZ7N+oamEfOKeuSa1F1E08OqiNu1zO24LmRe=YS5GPCSQ@mail.gmail.com>
Message-ID: <CAOp9P3oG5XyamGWY1UMT_q4Vi=qHgMQY3=C6HKu3TF+wRNDFLw@mail.gmail.com>

On Sun, Feb 10, 2013 at 11:56 AM, Luca Sbardella
<luca.sbardella at gmail.com>wrote:

https://github.com/quantmind/pulsar/blob/handshake/examples/webmail/manage.py
>
> What am I doing wrong?
>

Have you tried a more isolated piece of test code, using only Twisted APIs
and not pulsar's wrapper?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130210/a4050da7/attachment.htm 

From luca.sbardella at gmail.com  Sun Feb 10 17:15:59 2013
From: luca.sbardella at gmail.com (Luca Sbardella)
Date: Sun, 10 Feb 2013 22:15:59 +0000
Subject: [Twisted-Python] imap google mail client
In-Reply-To: <CAOp9P3oG5XyamGWY1UMT_q4Vi=qHgMQY3=C6HKu3TF+wRNDFLw@mail.gmail.com>
References: <CAF94-jZ7N+oamEfOKeuSa1F1E08OqiNu1zO24LmRe=YS5GPCSQ@mail.gmail.com>
	<CAOp9P3oG5XyamGWY1UMT_q4Vi=qHgMQY3=C6HKu3TF+wRNDFLw@mail.gmail.com>
Message-ID: <CAF94-jYkAxUEyrY5jc6Ao456KMhVt6CKPPGdBAWbTA+QozuR+Q@mail.gmail.com>

That works fine, it is pulsar that is not working ;-)
It is a different question then,
What the SSL connector does differently from a normal TCP connector?
Or, better, what method should I fix/modify or add in the PulsarReactor
https://github.com/quantmind/pulsar/blob/handshake/pulsar/lib/tx.py
That reactor works fine for a standard tcp echo client.




On 10 February 2013 20:56, Itamar Turner-Trauring <
itamar at futurefoundries.com> wrote:

>
>
> On Sun, Feb 10, 2013 at 11:56 AM, Luca Sbardella <luca.sbardella at gmail.com
> > wrote:
>
>
>> https://github.com/quantmind/pulsar/blob/handshake/examples/webmail/manage.py
>>
>> What am I doing wrong?
>>
>
> Have you tried a more isolated piece of test code, using only Twisted APIs
> and not pulsar's wrapper?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130210/6f98b00d/attachment.htm 

From glyph at twistedmatrix.com  Sun Feb 10 20:17:27 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 10 Feb 2013 17:17:27 -0800
Subject: [Twisted-Python] imap google mail client
In-Reply-To: <CAF94-jYkAxUEyrY5jc6Ao456KMhVt6CKPPGdBAWbTA+QozuR+Q@mail.gmail.com>
References: <CAF94-jZ7N+oamEfOKeuSa1F1E08OqiNu1zO24LmRe=YS5GPCSQ@mail.gmail.com>
	<CAOp9P3oG5XyamGWY1UMT_q4Vi=qHgMQY3=C6HKu3TF+wRNDFLw@mail.gmail.com>
	<CAF94-jYkAxUEyrY5jc6Ao456KMhVt6CKPPGdBAWbTA+QozuR+Q@mail.gmail.com>
Message-ID: <44F7C7B5-2B22-4634-ADF5-58B2CD33FCC6@twistedmatrix.com>


On Feb 10, 2013, at 2:15 PM, Luca Sbardella <luca.sbardella at gmail.com> wrote:

> That works fine, it is pulsar that is not working ;-)
> It is a different question then,
> What the SSL connector does differently from a normal TCP connector?
> Or, better, what method should I fix/modify or add in the PulsarReactor
> https://github.com/quantmind/pulsar/blob/handshake/pulsar/lib/tx.py
> That reactor works fine for a standard tcp echo client.

It looks like 'run' (A) overrides the base reactor's implementation, and (B) doesn't actually run the reactor.

The Twisted reactor expects to 'own' the main loop, so you're skipping some of the initialization logic necessary to start a reactor up.  I can't say why that would affect a TLS connection specifically, but internal state will be potentially inconsistent with this reactor implementation, and it's probably a more serious underlying problem that just happens to be initially visible with your TLS connection.

-glyph

P.S.: Please don't top-post :).  https://en.wikipedia.org/wiki/Posting_style#Trimming_and_reformatting



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130210/993020b0/attachment.htm 

From msc at contact.de  Mon Feb 11 09:24:44 2013
From: msc at contact.de (Michael Schlenker)
Date: Mon, 11 Feb 2013 15:24:44 +0100
Subject: [Twisted-Python] Aborting a connection attempt when HTTPS client
 detected on HTTP only server?
Message-ID: <5118FF2C.4020204@contact.de>

Hi,

I have a probably small issue i need to solve:

There is some kind of client that tries a HTTPS connection first and
falls back to HTTP if it does not work/times out, because the server
does not support SSL. (yes, i know that logic/procedure is kind of
stupid from a security point of view, but sadly i cannot change it).

When the server is proxied by Apache, this leads to immediate abortion
of the connection, but when i connect directly to the server built with
Twisted web module, it hangs until a timeout. The client in this case is
some libcurl based C++ code using the Windows SChannel SSL API.

I now want to have it fail immediately with Twisted too, instead of
waiting for the SSL layer on the client side to time out.

I found some patch that handles the inverse problem (detect HTTP to
HTTPS port):
http://twistedmatrix.com/trac/ticket/490

Is there some pre-made solution, or would i have to hook into the
connection setup of twisted.web and check the first few bytes for the
signs of an SSL Handshake signature?

Michael

-- 
Michael Schlenker
Software Architect

CONTACT Software GmbH           Tel.:   +49 (421) 20153-80
Wiener Stra?e 1-3               Fax:    +49 (421) 20153-41
28359 Bremen
http://www.contact.de/          E-Mail: msc at contact.de

Sitz der Gesellschaft: Bremen
Gesch?ftsf?hrer: Karl Heinz Zachries, Ralf Holtgrefe
Eingetragen im Handelsregister des Amtsgerichts Bremen unter HRB 13215


From itamar at futurefoundries.com  Mon Feb 11 09:51:59 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Mon, 11 Feb 2013 09:51:59 -0500
Subject: [Twisted-Python] Aborting a connection attempt when HTTPS
 client detected on HTTP only server?
In-Reply-To: <5118FF2C.4020204@contact.de>
References: <5118FF2C.4020204@contact.de>
Message-ID: <CAOp9P3q1Yp2aiexubaphcX8j3Xh2xoFTVmQNSG+RJOj57VmnOw@mail.gmail.com>

On Mon, Feb 11, 2013 at 9:24 AM, Michael Schlenker <msc at contact.de> wrote:
>
> Is there some pre-made solution, or would i have to hook into the
> connection setup of twisted.web and check the first few bytes for the
> signs of an SSL Handshake signature?
>

Subclassing the HTTP protocol class and just adding a check in dataReceived
is probably the easiest thing to do, yes. Might be worth filing a ticket
for this as well. My guess is the logic would be something like "in
dataReceived, if you've not hit first line, and any byte is non-ASCII,
close connection", which has the nice property of being more general than
just SSL. Or perhaps check what Apache does exactly.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130211/3db74bcc/attachment.htm 

From luca.sbardella at gmail.com  Mon Feb 11 18:37:10 2013
From: luca.sbardella at gmail.com (Luca Sbardella)
Date: Mon, 11 Feb 2013 23:37:10 +0000
Subject: [Twisted-Python] imap google mail client
In-Reply-To: <44F7C7B5-2B22-4634-ADF5-58B2CD33FCC6@twistedmatrix.com>
References: <CAF94-jZ7N+oamEfOKeuSa1F1E08OqiNu1zO24LmRe=YS5GPCSQ@mail.gmail.com>
	<CAOp9P3oG5XyamGWY1UMT_q4Vi=qHgMQY3=C6HKu3TF+wRNDFLw@mail.gmail.com>
	<CAF94-jYkAxUEyrY5jc6Ao456KMhVt6CKPPGdBAWbTA+QozuR+Q@mail.gmail.com>
	<44F7C7B5-2B22-4634-ADF5-58B2CD33FCC6@twistedmatrix.com>
Message-ID: <CAF94-jZ-_Baca=KE4sbWNKKWTqTTu5W9CmxzCA+XBajcyrUnow@mail.gmail.com>

>
> It looks like 'run' (A) overrides the base reactor's implementation, and
> (B) doesn't actually run the reactor.
>

Correct, that is the intention, pulsar is the driver and the PulsarReactor
is a proxy to one of pulsar event loops.

it's probably a more serious underlying problem that just happens to be
> initially visible with your TLS connection.
>

The main issue was the missing implementation of callFromThread and
callInThread. I've also switched off signal handling, threads and
scheduling, all handled by pulsar.

https://github.com/quantmind/pulsar/blob/handshake/pulsar/lib/tx.py

I'm now getting mailboxes via a websocket. Looking promising.

https://github.com/quantmind/pulsar/blob/handshake/examples/webmail/manage.py

Luca
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130211/461d3bae/attachment.htm 

From glyph at twistedmatrix.com  Mon Feb 11 18:57:40 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 11 Feb 2013 15:57:40 -0800
Subject: [Twisted-Python] imap google mail client
In-Reply-To: <CAF94-jZ-_Baca=KE4sbWNKKWTqTTu5W9CmxzCA+XBajcyrUnow@mail.gmail.com>
References: <CAF94-jZ7N+oamEfOKeuSa1F1E08OqiNu1zO24LmRe=YS5GPCSQ@mail.gmail.com>
	<CAOp9P3oG5XyamGWY1UMT_q4Vi=qHgMQY3=C6HKu3TF+wRNDFLw@mail.gmail.com>
	<CAF94-jYkAxUEyrY5jc6Ao456KMhVt6CKPPGdBAWbTA+QozuR+Q@mail.gmail.com>
	<44F7C7B5-2B22-4634-ADF5-58B2CD33FCC6@twistedmatrix.com>
	<CAF94-jZ-_Baca=KE4sbWNKKWTqTTu5W9CmxzCA+XBajcyrUnow@mail.gmail.com>
Message-ID: <0F2AB9B1-8B2E-4353-ADCF-30725D0CC943@twistedmatrix.com>


On Feb 11, 2013, at 3:37 PM, Luca Sbardella <luca.sbardella at gmail.com> wrote:

> It looks like 'run' (A) overrides the base reactor's implementation, and (B) doesn't actually run the reactor.
> 
> Correct, that is the intention, pulsar is the driver and the PulsarReactor is a proxy to one of pulsar event loops.
> 
> it's probably a more serious underlying problem that just happens to be initially visible with your TLS connection.
>  
> The main issue was the missing implementation of callFromThread and callInThread. I've also switched off signal handling, threads and scheduling, all handled by pulsar.

You need the signal handling for spawnProcess, unless you want to un-implement IReactorProcess.  By all means implement it in terms of pulsar's existing support - that's the whole reason the reactor is documented in terms of abstract interfaces - but you need to implement it nonetheless :).

> https://github.com/quantmind/pulsar/blob/handshake/pulsar/lib/tx.py
> 
> I'm now getting mailboxes via a websocket. Looking promising.
> 
> https://github.com/quantmind/pulsar/blob/handshake/examples/webmail/manage.py

Cool, glad to hear this effort is progressing.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130211/a5259a1a/attachment.htm 

From f at rtfs.org  Tue Feb 12 03:14:54 2013
From: f at rtfs.org (Fabian Sturm)
Date: Tue, 12 Feb 2013 09:14:54 +0100
Subject: [Twisted-Python] Passing parameters to Adapter
Message-ID: <20130212091454.74004njsbmsgnbi8@www.rtfs.org>

Dear twisted developers,

I have a sshdaemon based on sshsimpleserver.py which works great.
But I now want to pass a command line argument to the EchoProtocol.  
How can I do this? In this case I would like to pass the  
'options.test' option to my protocol.

if __name__ == '__main__':
     parser = optparse.OptionParser()
     parser.add_option('-p', '--port', action = 'store', type = 'int',  
dest = 'port', default = 1235, help = 'server port')
     parser.add_option('-t', '--test', action = 'store', type =  
'string', dest = 'test', default = '123')
     (options, args) = parser.parse_args()

     components.registerAdapter(ExampleSession, ExampleAvatar,  
session.ISession)

     [...]

     reactor.listenTCP(options.port, ExampleFactory())
     reactor.run()


Since the session instance is created by the factory, I can't seem to  
be able to pass additional args to e.g. the constructor.

Thanks a lot!
Fabian

----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.



From poalman at gmail.com  Tue Feb 12 14:30:57 2013
From: poalman at gmail.com (Paul Wiseman)
Date: Tue, 12 Feb 2013 19:30:57 +0000
Subject: [Twisted-Python] TaskStopped error,
	unsure of the cause and solution
In-Reply-To: <20130208190326.3816.1016959687.divmod.xquotient.99@localhost6.localdomain6>
References: <CACgdh2hFm80KFzDBY7sCS5XveZNX8dovo1XGt3Jt_WrJFQ7tJA@mail.gmail.com>
	<20121221180822.6389.1626477491.divmod.xquotient.354@localhost6.localdomain6>
	<CACgdh2gQy9Gp9qbqwMC6CV4J1Ti2F+=+c36cVtnrO0nceV9uWA@mail.gmail.com>
	<CACgdh2iF3q2xkT4XShQCRCctLu1cQNGtCdOkA2GRn2DfoNxQLg@mail.gmail.com>
	<20130208190326.3816.1016959687.divmod.xquotient.99@localhost6.localdomain6>
Message-ID: <CACgdh2gvAmy3uWOWH9R94Bd4s2N2opBe1+wnk33EJWshL4aXYA@mail.gmail.com>

On 8 February 2013 19:03,  <exarkun at twistedmatrix.com> wrote:
> On 03:12 pm, poalman at gmail.com wrote:
>>
>>I've still not been able to reproduce this on demand.. the least
>>amount of request I've seen before getting the error is 6500 :/
>>
>>I've also seen this stack trace which I didn't notice before
>>
>>2013-02-08 10:07:28+0000 [HTTP11ClientProtocol,client] Unhandled Error
>>        Traceback (most recent call last):
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/application/app.py",
>>line 323, in runReactorWithLogging
>>            reactor.run()
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/base.py",
>>line 1169, in run
>>            self.mainLoop()
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/base.py",
>>line 1181, in mainLoop
>>            self.doIteration(t)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/epollreactor.py",
>>line 379, in doPoll
>>            log.callWithLogger(selectable, _drdw, selectable, fd, event)
>>        --- <exception caught here> ---
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
>>line 84, in callWithLogger
>>            return callWithContext({"system": lp}, func, *args, **kw)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
>>line 69, in callWithContext
>>            return context.call({ILogContext: newCtx}, func, *args,
>>**kw)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/python/context.py",
>>line 118, in callWithContext
>>            return self.currentContext().callWithContext(ctx, func,
>>*args, **kw)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/python/context.py",
>>line 81, in callWithContext
>>            return func(*args,**kw)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/posixbase.py",
>>line 639, in _doReadOrWrite
>>            self._disconnectSelectable(selectable, why, inRead)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/posixbase.py",
>>line 258, in _disconnectSelectable
>>            selectable.readConnectionLost(f)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/tcp.py",
>>line 267, in readConnectionLost
>>            self.connectionLost(reason)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/tcp.py",
>>line 473, in connectionLost
>>            self._commonConnection.connectionLost(self, reason)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/tcp.py",
>>line 281, in connectionLost
>>abstract.FileDescriptor.connectionLost(self, reason)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/abstract.py",
>>line 182, in connectionLost            self.producer.stopProducing()
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/client.py",
>>line 760, in stopProducing            self._task.stop()
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/task.py",
>>line 460, in stop            self._completeWith(TaskStopped(),
>>Failure(TaskStopped()))
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/task.py",
>>line 439, in _completeWith
>>self._cooperator._removeTask(self)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/task.py",
>>line 578, in _removeTask            self._delayedCall.cancel()
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/base.py",
>>line 89, in cancel
>>            raise error.AlreadyCalled
>>        twisted.internet.error.AlreadyCalled: Tried to cancel an
>>already-called event.
>>
>>I'll keep trying to work out the issue, any suggestions on what I
>>might try to reproduce it or guesses at causes?
>
> Since it seems to be related to handling of lost connections, you may be
> able to reproduce it more easily if you issue your requests to an HTTP
> server which drops connections more often.  Presumably the production
> service you're issuing requests too tries pretty hard to properly serve
> responses to every request.  If you point `Agent` at a worse HTTP server
> (eg, one you write using twisted.web and implement to close connections
> prematurely at various points during the response) this may produce the
> issue more quickly.
>
> You could also try hooking `Agent` up to one of the in-memory
> reactors/transports.  The advantage of this is that it will be much
> easier to "close" the connection at a specific point
> (deterministically).  The disadvantage is that the in-memory
> reactor/transport may not exactly replicate the real reactor/transport
> behavior and so fail to reproduce the issue entirely.
>
> Jean-Paul
>

Hey, I'm more and more sure it's the PUT request, and I think you're
right it is likely to do with the server that I'm putting to (Google
Cloud Storage) doing something odd occasionally.

I'm trying to reproduce it with a small twisted client and server,
using a PUT request to send to the server but I can't seem to close
the connection uncleanly. How would you recommend I do that? I've
tried adding request.finish() on a callLater but that seems to finish
the connection in a clean way. How can I close the connection in the
way you suggest?

Also I put a bit in FileBodyProducer that looks at the stack when the
error starts to see where it was being called from, but it didn't help
me too much. This is the stack anyway

  File "/usr/local/bin/twistd", line 5, in <module>
    pkg_resources.run_script('Twisted==12.2.0', 'twistd')
  File "/usr/lib/python2.7/dist-packages/pkg_resources.py", line 499,
in run_script
    self.require(requires)[0].run_script(script_name, ns)
  File "/usr/lib/python2.7/dist-packages/pkg_resources.py", line 1235,
in run_script
    execfile(script_filename, namespace, namespace)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/EGG-INFO/scripts/twistd",
line 14, in <module>
    run()
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/scripts/twistd.py",
line 27, in run
    app.run(runApp, ServerOptions)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/application/app.py",
line 652, in run
    runApp(config)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/scripts/twistd.py",
line 23, in runApp
    _SomeApplicationRunner(config).run()
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/application/app.py",
line 390, in run
    self.postApplication()
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/scripts/_twistd_unix.py",
line 231, in postApplication
    self.startReactor(None, self.oldstdout, self.oldstderr)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/application/app.py",
line 402, in startReactor
    self.config, oldstdout, oldstderr, self.profiler, reactor)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/application/app.py",
line 323, in runReactorWithLogging
    reactor.run()
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/base.py",
line 1169, in run
    self.mainLoop()
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/base.py",
line 1181, in mainLoop
    self.doIteration(t)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/epollreactor.py",
line 379, in doPoll
    log.callWithLogger(selectable, _drdw, selectable, fd, event)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
line 84, in callWithLogger
    return callWithContext({"system": lp}, func, *args, **kw)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
line 69, in callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/context.py",
line 118, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/context.py",
line 81, in callWithContext
    return func(*args,**kw)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/posixbase.py",
line 639, in _doReadOrWrite
    self._disconnectSelectable(selectable, why, inRead)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/posixbase.py",
line 258, in _disconnectSelectable
    selectable.readConnectionLost(f)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/tcp.py",
line 267, in readConnectionLost
    self.connectionLost(reason)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/tcp.py",
line 473, in connectionLost
    self._commonConnection.connectionLost(self, reason)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/tcp.py",
line 287, in connectionLost
    protocol.connectionLost(reason)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/endpoints.py",
line 99, in connectionLost
    return self._wrappedProtocol.connectionLost(reason)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/_newclient.py",
line 859, in dispatcher
    return func(*args, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/_newclient.py",
line 1458, in _connectionLost_TRANSMITTING
    self._currentRequest.stopWriting()
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/_newclient.py",
line 760, in stopWriting
    _callAppFunction(self.bodyProducer.stopProducing)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/_newclient.py",
line 191, in _callAppFunction
    function()
  File "main.tac", line 65, in stopProducing
    log_stack()
  File "main.tac", line 55, in log_stack
    stack_trace = traceback.format_stack(frame)


> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From itamar at futurefoundries.com  Tue Feb 12 15:47:20 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Tue, 12 Feb 2013 15:47:20 -0500
Subject: [Twisted-Python] TaskStopped error,
	unsure of the cause and solution
In-Reply-To: <CACgdh2gvAmy3uWOWH9R94Bd4s2N2opBe1+wnk33EJWshL4aXYA@mail.gmail.com>
References: <CACgdh2hFm80KFzDBY7sCS5XveZNX8dovo1XGt3Jt_WrJFQ7tJA@mail.gmail.com>
	<20121221180822.6389.1626477491.divmod.xquotient.354@localhost6.localdomain6>
	<CACgdh2gQy9Gp9qbqwMC6CV4J1Ti2F+=+c36cVtnrO0nceV9uWA@mail.gmail.com>
	<CACgdh2iF3q2xkT4XShQCRCctLu1cQNGtCdOkA2GRn2DfoNxQLg@mail.gmail.com>
	<20130208190326.3816.1016959687.divmod.xquotient.99@localhost6.localdomain6>
	<CACgdh2gvAmy3uWOWH9R94Bd4s2N2opBe1+wnk33EJWshL4aXYA@mail.gmail.com>
Message-ID: <CAOp9P3qMHyi0=qmmR4g_5Ljy1v96W3=WtjQYbTtCEP7dZEoTiA@mail.gmail.com>

On Tue, Feb 12, 2013 at 2:30 PM, Paul Wiseman <poalman at gmail.com> wrote:

>
>
> I'm trying to reproduce it with a small twisted client and server,
> using a PUT request to send to the server but I can't seem to close
> the connection uncleanly. How would you recommend I do that? I've
> tried adding request.finish() on a callLater but that seems to finish
> the connection in a clean way. How can I close the connection in the
> way you suggest?
>

Maybe don't even go with real HTTP server, but something like:

class HTTP(Protocol):
    def connectionMade(self):
        time.sleep(1)
        self.transport.write("HTTP/1.0 200 OK\r\nContent-Length: 300000:
\r\n\r\n")
        self.transport.loseConnection()

Or some variation on that, where you can control exactly where things break.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130212/3dc74980/attachment.htm 

From sk82712 at gmail.com  Sat Feb 16 16:09:09 2013
From: sk82712 at gmail.com (Adam Heller)
Date: Sat, 16 Feb 2013 22:09:09 +0100
Subject: [Twisted-Python] Building a TCP server, having issues
Message-ID: <CAO6nAyOZn6mQ=ahf_ic-OFnNm9kJR5A0vnU+6mJojLYM6Suacw@mail.gmail.com>

Guys,
I'll try to be as exact as I can be with my question, but it may end up
being pretty broad. (I'm also relatively new to python, please go easy on
my code although suggestions are of course welcome.)

The issue I'm running into:
When a user connects to the TCP server, they are displayed a welcome menu
of things they can do. I'm simply catching the 'data' in an if statement to
determine which menu item was picked.  The problem is that some of the menu
items require further input.  I've had to use a series of bools to
determine if a certain menu option was previously picked that will then
directly send the data into the function / class.  Is there an easier way
to go about this? My current method seems a bit backwards and over
complicated.  I'm thinking I missed something in the documentation.

Anyway, here's the code: https://infotomb.com/q4293 // Pass: twisted

(it was part of a challenge, so to speak, don't take too much out of
context)

You can see I had trouble with next() and dh().  I'm now trying to move
this TCP 'framework' over to another project (the above was already
submitted), and I'm still running into the same issues.

Thoughts?

-A
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130216/3944661b/attachment.htm 

From glyph at twistedmatrix.com  Sat Feb 16 17:53:41 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 16 Feb 2013 14:53:41 -0800
Subject: [Twisted-Python] Building a TCP server, having issues
In-Reply-To: <CAO6nAyOZn6mQ=ahf_ic-OFnNm9kJR5A0vnU+6mJojLYM6Suacw@mail.gmail.com>
References: <CAO6nAyOZn6mQ=ahf_ic-OFnNm9kJR5A0vnU+6mJojLYM6Suacw@mail.gmail.com>
Message-ID: <CB37BBD7-8438-4E1B-A266-923438FD0A74@twistedmatrix.com>


On Feb 16, 2013, at 1:09 PM, Adam Heller <sk82712 at gmail.com> wrote:

> Guys,
> I'll try to be as exact as I can be with my question, but it may end up being pretty broad. (I'm also relatively new to python, please go easy on my code although suggestions are of course welcome.)

The main suggestion is "you can't parse TCP like this" :).  You'll have this problem: <http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith>

> The issue I'm running into:
> When a user connects to the TCP server, they are displayed a welcome menu of things they can do. I'm simply catching the 'data' in an if statement to determine which menu item was picked.  The problem is that some of the menu items require further input.  I've had to use a series of bools to determine if a certain menu option was previously picked that will then directly send the data into the function / class.  Is there an easier way to go about this? My current method seems a bit backwards and over complicated.  I'm thinking I missed something in the documentation.

> Anyway, here's the code: https://infotomb.com/q4293 // Pass: twisted

You should really attach the code itself to the email, so that future readers of the archive have some idea what you're talking about.  Pastebins in general are not great, since the code will expire before your archived message does, and pastebins with passwords (!?) are even worse.

> (it was part of a challenge, so to speak, don't take too much out of context)
> 
> You can see I had trouble with next() and dh().  I'm now trying to move this TCP 'framework' over to another project (the above was already submitted), and I'm still running into the same issues.

You should try separating out your concerns a bit.  The protocol should just parse the bytes into something meaningful, then call methods on some other, higher-level object that isn't just manipulating strings.

The "other, higher-level object" in your case might be a state machine of some kind, or you might just have an object representing the mode that you're currently in and switch that out for different modes.

This isn't an issue with Twisted though; Twisted just calls some methods on your objects in order to tell you what happened; what happens next is up to you.  So it's a general program architecture issue.

This is very general advice, obviously, because I'm not sure what you are specifically asking, nor what your program is really intended to do.  What kind of client is talking to this system?  Did you invent the protocol yourself, or did it come from somewhere else?  What is 'dh()' even trying to accomplish?  Etc, etc.


-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130216/ff09b772/attachment.htm 

From sk82712 at gmail.com  Sat Feb 16 20:09:22 2013
From: sk82712 at gmail.com (Adam Heller)
Date: Sun, 17 Feb 2013 02:09:22 +0100
Subject: [Twisted-Python] Building a TCP server, having issues
In-Reply-To: <CB37BBD7-8438-4E1B-A266-923438FD0A74@twistedmatrix.com>
References: <CAO6nAyOZn6mQ=ahf_ic-OFnNm9kJR5A0vnU+6mJojLYM6Suacw@mail.gmail.com>
	<CB37BBD7-8438-4E1B-A266-923438FD0A74@twistedmatrix.com>
Message-ID: <CAO6nAyMxK4xiAt=jTARmy68ssa9dUFN-ReQXe=goFTkGG+NLxA@mail.gmail.com>

Glyph,

I will definately look into that.  As far as the server spec, it's over TOR
(This part of the 'competition' has since closed, but feel free to catch
up: http://uncovering-cicada.wikia.com/wiki/Uncovering_Cicada_Wiki and
http://mentalfloss.com/article/31932/chasing-cicada-exploring-darkest-corridors-internet(from
last year's 3301).  I'm simply trying to do the python thing and move
classes around instead of trying to reinvent the wheel [dh() is a
rudimentary Diffie Helman key exchange] : "

In the programming language of your choice build a TCP server
that implements the protocol below. The server code must be written by you
and you alone, although you are free to use any modules or libraries
publicly available for the selected programming language. Once you have
done this, make it accessible as a Tor hidden service. Then provide us with
the onion address and port via a GPG-encrypted email to this address. You
have until 0:00 UTC on 3 Feb, 2013. Any emails received after that time
will be ignored. Good luck. 3301
==================================================================== 1.
INTRODUCTION The TCP server MUST listen on an arbitrary port, and send and
receive plain text with lines separated by <CRLF> (representing a carriage
return followed by a line feed). The TCP server MUST disregard the case of
input. In the examples below, lines sent by the server will be preceded
with "S:" and lines sent by the client will be preceded by "C:" Each
message sent by the server MUST conform to the format: [CODE] [RESPONSE
NAME] [RESPONSE (optional)]<CRLF> Where [CODE] and [RESPONSE NAME] is one
of: CODE RESPONSE NAME 00 Welcome 01 Ok 02 Error 03 Data 99 Goodbye 2.
PROCEDURES a. Remote Connection Upon receiving a remote connection, the
server MUST greet the client with a 00 WELCOME message. The RESPONSE of a
welcome message MAY contain arbitrary text. The arbitrary text MUST at the
very least contain the name of the programming language used to implement
the server. Upon receiving a 00 WELCOME message, the client may begin
initiating procedures. Example: S: 00 WELCOME [ARBITRARY RESPONSE
TEXT]<CRLF> b. RAND [n] Upon receiving a "RAND" request by the client, the
server will first send a 01 OK response, and will then provide the client
with [n] cryptographically random numbers within the range of 0-255. Each
number MUST be followed by <CRLF>. After the last number has been sent, the
server MUST send a dot (.) on a line by itself. Example: C: RAND 3<CRLF> S:
01 OK<CRLF> S: [first random number]<CRLF> S: [second random number]<CRLF>
S: [third random number]<CRLF> S: .<CRLF> c. QUINE Upon receiving a "QUINE"
request by the client, the server will first send a 01 OK response, and
will then provide the client with a quine in the programming language used
to implement the server. This quine does not have to be original. After the
last line of code has been sent, the server MUST send a dot (.) on a line
by itself. Example: C: QUINE<CRLF> S: 01 OK<CRLF> S: [quine code]<CRLF> S:
.<CRLF> d. BASE29 [n] Upon receiving a "BASE29" request by the client, the
server will send a 01 OK response followed by the number [n] converted into
its base 29 representation. Example: C: BASE29 3301<CRLF> S: 01 OK
3QO<CRLF> e. CODE Upon receiving a "CODE" request by the client, the server
will send a 01 OK response followed by its own source code. After the last
line of code has been sent, the server MUST send a dot(.) on a line by
itself. Example: C: CODE<CRLF> S: 01 OK<CRLF> S: [Server Source Code]<CRLF>
s: .<CRLF> f. KOAN Upon receiving a "KOAN" request by the client, the
server will send a 01 OK response followed by a koan. After the last line
of the koan, the server MUST send a dot (.) on a line by itself. Example:
C: KOAN<CRLF> S: 01 OK<CRLF> S: A master who lived as a hermit on a
mountain was asked by a<CRLF> S: monk, "What is the Way?<CRLF> S: "What a
fine mountain this is," the master said in reply<CRLF> S: "I am not asking
you about the mountain, but about the Way.<CRLF> S: "So long as you cannot
go beyond the mountain, my son, you<CRLF> S: cannot reach the Way," replied
the master<CRLF> S: . g. DH [p] Upon receiving a "DH" request by the
client, the server will proceed to perform a Diffie-Hellman key exchange
using [p] as the prime modulus. The server will then select a base [b] to
use in the protocol, as well as its secret integer. The server will then
compute its exponent result [e] as specified within the Diffie-Hellman key
exchange protocol. The server MUST then respond with a 01 OK response
followed by the selected base [b] and computed exponent [e] separated by
white space. The client MUST respond with its exponent result [e2], and the
client and server will follow the rest of the Diffie-Hellman key exchange
protocol. The server MUST then compute the resulting secret key, and
provide it using 03 DATA [k]. Example: C: DH 23<CRLF> S: 01 OK 5 8<CRLF> C:
19<CRLF> S: 03 DATA 2<CRLF> j. NEXT Upon receiving a "NEXT" request by the
client, the server will respond with 01 OK and then listen for text data to
be provided by the client. The client will send a dot (.) on a line by
itself after the last line of text. The server MUST record this. This data
will be the next set of instructions. Once the data is received the server
will respond with 01 OK. Example: C: NEXT<CRLF> S: 01 OK<CRLF> C:
-----BEGIN PGP SIGNED MESSAGE-----<CRLF> C: [MESSAGE CONTENTS]<CRLF> C:
-----END PGP SIGNATURE-----<CRLF> C: .<CRLF> S: 01 OK<CRLF> i. GOODBYE Upon
receiving a "DH" request by the client, the server MUST respond with 99
GOODBYE and then gracefully close the connection. Example: C: GOODBYE<CRLF>
S: 99 GOODBYE<CRLF>
===================================================================="



From exarkun at twistedmatrix.com  Sun Feb 17 00:05:25 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 Feb 2013 05:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1361077525.08.553445036@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130217/fd21100d/attachment.htm 

From p.mayers at imperial.ac.uk  Mon Feb 18 03:55:40 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 18 Feb 2013 08:55:40 +0000
Subject: [Twisted-Python] Building a TCP server, having issues
In-Reply-To: <CAO6nAyMxK4xiAt=jTARmy68ssa9dUFN-ReQXe=goFTkGG+NLxA@mail.gmail.com>
References: <CAO6nAyOZn6mQ=ahf_ic-OFnNm9kJR5A0vnU+6mJojLYM6Suacw@mail.gmail.com>
	<CB37BBD7-8438-4E1B-A266-923438FD0A74@twistedmatrix.com>
	<CAO6nAyMxK4xiAt=jTARmy68ssa9dUFN-ReQXe=goFTkGG+NLxA@mail.gmail.com>
Message-ID: <5121EC8C.3040307@imperial.ac.uk>

On 02/17/2013 01:09 AM, Adam Heller wrote:
> Glyph,
>
> I will definately look into that.  As far as the server spec, it's over
> TOR (This part of the 'competition' has since closed, but feel free to
> catch up: http://uncovering-cicada.wikia.com/wiki/Uncovering_Cicada_Wiki
> and
> http://mentalfloss.com/article/31932/chasing-cicada-exploring-darkest-corridors-internet
> (from last year's 3301).  I'm simply trying to do the python thing and
> move classes around instead of trying to reinvent the wheel [dh() is a
> rudimentary Diffie Helman key exchange] : "
>
> In the programming language of your choice build a TCP server
> that implements the protocol below. The server code must be written by
> you and you alone, although you are free to use any modules or libraries
> publicly available for the selected programming language. Once you have
> done this, make it accessible as a Tor hidden service. Then provide us
> with the onion address and port via a GPG-encrypted email to this
> address. You have until 0:00 UTC on 3 Feb, 2013. Any emails received
> after that time will be ignored. Good luck. 3301
> ==================================================================== 1.
> INTRODUCTION The TCP server MUST listen on an arbitrary port, and send
> and receive plain text with lines separated by <CRLF>

Glyph has already mentioned the buffering and state machine options, but 
since it's a line-based protocol, you chould also look at 
t.p.basic.LineReceiver:

http://twistedmatrix.com/documents/current/api/twisted.protocols.basic.LineReceiver.html

...which does the buffering for you and calls a method with full 
"lines". You may want to look at the source for that class' dataReceived 
method, for an example of how it does the buffering Glyph talks about.

There are other examples of doing state machine dispatch in the Twisted 
sources, but it's a pretty simple technique - set a "state" variable, 
and a big if/then clause (or, for performance, a dict of state->handler)


From akersof at gmail.com  Mon Feb 18 07:46:42 2013
From: akersof at gmail.com (Sofiane Akermoun)
Date: Mon, 18 Feb 2013 13:46:42 +0100
Subject: [Twisted-Python] Building a TCP server, having issues
In-Reply-To: <5121EC8C.3040307@imperial.ac.uk>
References: <CAO6nAyOZn6mQ=ahf_ic-OFnNm9kJR5A0vnU+6mJojLYM6Suacw@mail.gmail.com>
	<CB37BBD7-8438-4E1B-A266-923438FD0A74@twistedmatrix.com>
	<CAO6nAyMxK4xiAt=jTARmy68ssa9dUFN-ReQXe=goFTkGG+NLxA@mail.gmail.com>
	<5121EC8C.3040307@imperial.ac.uk>
Message-ID: <CAN0_x-+jGJEX4jJ6Kx0bq+UR5E=7TXxByPpbnHvRS7yEErJWjg@mail.gmail.com>

Hello,

As wrote Phil Mayers LinReceiver is a nice protocol helpers for you.
All the commands use a CRLF delimiter and for your logic it is easy to
know when a command is fully received or if you need to wait for more
data.
As wrote Glyph dataReceived (or lineReceived) Should only use to
received data, sanitize them like gather the command name, and the
arguments, and pass it to another big function named handleCommand
that will use the big if/else condition to know what to do.

regards,

Sofiane Akermoun

2013/2/18 Phil Mayers <p.mayers at imperial.ac.uk>:
> On 02/17/2013 01:09 AM, Adam Heller wrote:
>> Glyph,
>>
>> I will definately look into that.  As far as the server spec, it's over
>> TOR (This part of the 'competition' has since closed, but feel free to
>> catch up: http://uncovering-cicada.wikia.com/wiki/Uncovering_Cicada_Wiki
>> and
>> http://mentalfloss.com/article/31932/chasing-cicada-exploring-darkest-corridors-internet
>> (from last year's 3301).  I'm simply trying to do the python thing and
>> move classes around instead of trying to reinvent the wheel [dh() is a
>> rudimentary Diffie Helman key exchange] : "
>>
>> In the programming language of your choice build a TCP server
>> that implements the protocol below. The server code must be written by
>> you and you alone, although you are free to use any modules or libraries
>> publicly available for the selected programming language. Once you have
>> done this, make it accessible as a Tor hidden service. Then provide us
>> with the onion address and port via a GPG-encrypted email to this
>> address. You have until 0:00 UTC on 3 Feb, 2013. Any emails received
>> after that time will be ignored. Good luck. 3301
>> ==================================================================== 1.
>> INTRODUCTION The TCP server MUST listen on an arbitrary port, and send
>> and receive plain text with lines separated by <CRLF>
>
> Glyph has already mentioned the buffering and state machine options, but
> since it's a line-based protocol, you chould also look at
> t.p.basic.LineReceiver:
>
> http://twistedmatrix.com/documents/current/api/twisted.protocols.basic.LineReceiver.html
>
> ...which does the buffering for you and calls a method with full
> "lines". You may want to look at the source for that class' dataReceived
> method, for an example of how it does the buffering Glyph talks about.
>
> There are other examples of doing state machine dispatch in the Twisted
> sources, but it's a pretty simple technique - set a "state" variable,
> and a big if/then clause (or, for performance, a dict of state->handler)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
Sofiane AKERMOUN
akersof at gmail.com


From pierre at jaury.eu  Fri Feb 22 10:40:05 2013
From: pierre at jaury.eu (Pierre Jaury)
Date: Fri, 22 Feb 2013 16:40:05 +0100
Subject: [Twisted-Python] Inline callbacks: generating the same Deferred at
	multiple places
Message-ID: <51279155.1070709@jaury.eu>

Hey everyone,

First of all, I am a french developer mostly dealing with security
matters, I have been a Twisted enthusiast for a couple of years now and
have been hacking around with Twisted for the very last couple of months.

I am aware that Deferred-related classes are very stable nowadays and
that such a change does not stand half a chance to get anywhere. Anyway,
Twisted behavior kind of annoys me when it comes to inline callback
management.

Indeed, the gotResult function used when generating Deferred objects
from a function decorated with inlineCallbacks currently looks like:

            def gotResult(r):
                if waiting[0]:
                    waiting[0] = False
                    waiting[1] = r
                else:
                    _inlineCallbacks(r, g, deferred)

So far the function does not return anything explicitely, thus following
callbacks get a very nice `None` as first argument. This is not so
annoying when using inline callbacks with very simple and
straightforward cases as advised by Twisted documentation. Anyway, when
generating the same Deferred object from multiple
inlineCallbacks-decorated functions, one would expect every `yield`
statement to return the same value.

As a matter of fact, this is not the case (the first generation of the
Deferred object will return its actual current state but later
generations will return `None`). Because a Deferred object generation
from an inlineCallbacks-decorated function does not allow for anything
but waiting for the Deferred object to fire and returning its state, it
would probably not harm to forward this state to the next callback as
well. Something like:


            def gotResult(r):
                if waiting[0]:
                    waiting[0] = False
                    waiting[1] = r
                else:
                    _inlineCallbacks(r, g, deferred)
                return r

would probably do the trick and allow for complex scenarios where the
same Deferred object is generated multiple times by different functions
before being fired.

As I am not an accomplished Twisted hacker, I cannot say if this kind of
change would harm or break any code out there. Yet it seems to me that
according to inlineCallbacks behavior, it is very unlikely to have any
consequence at all but improving (extending at least) inlineCallbacks
behavior.

Am I so wrong? (I would very much like someone to point out the one huge
detail I completely forgot before I make this change by monkey patching
and submit a feature request :)

Regards,
Pierre.

-- 
Pierre Jaury <pierre at jaury.eu>
Weblog - http://kaiyou.fr
GPG ID - E804FB60

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20130222/2e9aed4c/attachment.pgp 

From radix at twistedmatrix.com  Fri Feb 22 11:30:34 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 22 Feb 2013 10:30:34 -0600
Subject: [Twisted-Python] Inline callbacks: generating the same Deferred
 at multiple places
In-Reply-To: <51279155.1070709@jaury.eu>
References: <51279155.1070709@jaury.eu>
Message-ID: <CAPkRfUTjKGum3vn6SAyNPyHu4YGFL42xcNTuGDijjWU+BidPkA@mail.gmail.com>

On Fri, Feb 22, 2013 at 9:40 AM, Pierre Jaury <pierre at jaury.eu> wrote:

> Hey everyone,
> As a matter of fact, this is not the case (the first generation of the
> Deferred object will return its actual current state but later
> generations will return `None`). Because a Deferred object generation
> from an inlineCallbacks-decorated function does not allow for anything
> but waiting for the Deferred object to fire and returning its state, it
> would probably not harm to forward this state to the next callback as
> well. Something like:
> ...
>
would probably do the trick and allow for complex scenarios where the
> same Deferred object is generated multiple times by different functions
> before being fired.
>
> As I am not an accomplished Twisted hacker, I cannot say if this kind of
> change would harm or break any code out there. Yet it seems to me that
> according to inlineCallbacks behavior, it is very unlikely to have any
> consequence at all but improving (extending at least) inlineCallbacks
> behavior.
>

I think it's a reasonable change to make, and I don't foresee any problems
with it, so I think it's fine to submit a bug about it. But I do question
the architecture that needs to make use of it. I would probably avoid
scenarios like that in my own code.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130222/c529e74d/attachment.htm 

From glyph at twistedmatrix.com  Fri Feb 22 15:17:52 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 22 Feb 2013 12:17:52 -0800
Subject: [Twisted-Python] Inline callbacks: generating the same Deferred
	at multiple places
In-Reply-To: <CAPkRfUTjKGum3vn6SAyNPyHu4YGFL42xcNTuGDijjWU+BidPkA@mail.gmail.com>
References: <51279155.1070709@jaury.eu>
	<CAPkRfUTjKGum3vn6SAyNPyHu4YGFL42xcNTuGDijjWU+BidPkA@mail.gmail.com>
Message-ID: <789C5390-E617-45C8-909E-A3DD9266E2A8@twistedmatrix.com>


On Feb 22, 2013, at 8:30 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> I think it's a reasonable change to make, and I don't foresee any problems with it, so I think it's fine to submit a bug about it. But I do question the architecture that needs to make use of it. I would probably avoid scenarios like that in my own code.

I disagree; the behavior of result consumption is intentional - although it could be better documented.  Changing it would very definitely be incompatible (<http://twistedmatrix.com/trac/wiki/CompatibilityPolicy>); this is possible, of course, if the deprecation/migration is worth it, but the behavior being requested here would be worse in a number of ways.

If we re-populated the result, every failed Deferred yielded by an inlineCallbacks function would log its traceback twice: once when the unhandled exception propagated out of the inlineCallbacks function causing its Deferred to fail, and once when the unhandled exception propagated from the yielded Deferred itself, since nothing would have consumed it when that Deferred would be GC'd.

Speaking of GC, similarly, any large objects in Deferred results processed by inlineCallbacks functions would live longer, and continue participating in any reference cycles they're part of, possibly causing memory leaks, or at least, longer collection times and less favorable memory usage behavior, especially in long-lived processes.

Basically, you can't treat a Deferred as an event broadcaster.  It isn't one.  It's a single-shot representation of an asynchronous result, which a single consumer can consume with its current value, possibly yielding a new value.  Some consumers can be diligent about not modifying the Deferred's state, so that it can be passed on down the chain, but inlineCallbacks can never be such a consumer: since each inlineCallbacks-decorated function generates its own Deferred return value, it is naturally the terminal consumer of any Deferreds that it yields, and should clear out their results.

Ultimately, _every_ Deferred ought to have a terminal consumer, that takes the result and does useful work with it - persists it, shows it in some UI to a user - rather than continuing to pass it along.  Since 'yield x' is not sufficiently expressive to say what else to do with 'x' and what state to leave it in, we must assume that the intention of a coroutine is to take the value and do some work with it.  Any inlineCallbacks function which wants to express its intent more precisely can do this, instead:

    def fork(d):
        d2 = Deferred()
        def fire(x):
            d2.callback(x)
            return x
        d.addBoth(fire)
        return d2

    @inlineCallbacks
    def foo():
        result = yield fork(somethingAsync())

Maybe putting that function in Twisted (this is not the first time it's come up) would be a useful addition.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130222/d5e8a29f/attachment.htm 

From pierre at jaury.eu  Sat Feb 23 06:23:56 2013
From: pierre at jaury.eu (Pierre Jaury)
Date: Sat, 23 Feb 2013 12:23:56 +0100
Subject: [Twisted-Python] Inline callbacks: generating the same Deferred
 at multiple places
In-Reply-To: <789C5390-E617-45C8-909E-A3DD9266E2A8@twistedmatrix.com>
References: <51279155.1070709@jaury.eu>
	<CAPkRfUTjKGum3vn6SAyNPyHu4YGFL42xcNTuGDijjWU+BidPkA@mail.gmail.com>
	<789C5390-E617-45C8-909E-A3DD9266E2A8@twistedmatrix.com>
Message-ID: <5128A6CC.9030905@jaury.eu>

On 02/22/2013 09:17 PM, Glyph wrote:
> 
> On Feb 22, 2013, at 8:30 AM, Christopher Armstrong
> <radix at twistedmatrix.com <mailto:radix at twistedmatrix.com>> wrote:
> 
>> I think it's a reasonable change to make, and I don't foresee any
>> problems with it, so I think it's fine to submit a bug about it. But I
>> do question the architecture that needs to make use of it. I would
>> probably avoid scenarios like that in my own code.
> 
> I disagree; the behavior of result consumption is intentional - although
> it could be better documented.  Changing it would very definitely be
> incompatible (<http://twistedmatrix.com/trac/wiki/CompatibilityPolicy>);
> this is possible, of course, if the deprecation/migration is worth it,
> but the behavior being requested here would be worse in a number of ways.

Well, some criticism, now I am listening to you.

> If we re-populated the result, every failed Deferred yielded by an
> inlineCallbacks function would log its traceback twice: once when the
> unhandled exception propagated out of the inlineCallbacks function
> causing its Deferred to fail, and once when the unhandled exception
> propagated from the yielded Deferred itself, since nothing would have
> consumed it when that Deferred would be GC'd.

Well, this simply means that the change is not that simple to make and
would probably imply some deeper modifications. I can see how this kills
any hope to get the change merged into anything stable anytime soon however.

> Speaking of GC, similarly, any large objects in Deferred results
> processed by inlineCallbacks functions would live longer, and continue
> participating in any reference cycles they're part of, possibly causing
> memory leaks, or at least, longer collection times and less favorable
> memory usage behavior, especially in long-lived processes.

But.. I definitely agree with this one, which I did not foresee. I
therefore agree that any change in Deferred objects behavior should
never enforce references to live longer when not usually required.

> Basically, you can't treat a Deferred as an event broadcaster.  It isn't
> one.  It's a single-shot representation of an asynchronous result, which
> a single consumer can consume with its current value, possibly yielding
> a new value.

That I figured out already. Thanks for the reminder anyway, I was on the
path of loosing myself, there :)

> Any
> inlineCallbacks function which wants to express its intent more
> precisely can do this, instead:
> 
>     def fork(d):
>         d2 = Deferred()
>         def fire(x):
>             d2.callback(x)
>             return x
>         d.addBoth(fire)
>         return d2
> 
>     @inlineCallbacks
>     def foo():
>         result = yield fork(somethingAsync())

I will embed this one in my bundle of Twisted utility functions. Thanks!

> Maybe putting that function in Twisted (this is not the first time it's
> come up) would be a useful addition.

Agreed, then.

-- 
Pierre Jaury <pierre at jaury.eu>
Weblog - http://kaiyou.fr
GPG ID - E804FB60

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20130223/98f27489/attachment.pgp 

From exarkun at twistedmatrix.com  Sun Feb 24 00:05:26 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Feb 2013 05:05:26 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1361682326.52.1777523205@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130224/56128b45/attachment.htm 

From sergun at gmail.com  Sun Feb 24 11:23:14 2013
From: sergun at gmail.com (Sergey Gerasimov)
Date: Sun, 24 Feb 2013 20:23:14 +0400
Subject: [Twisted-Python] combine local and remote calls in perspective
	brokers
Message-ID: <04ce01ce12ab$403fe580$c0bfb080$@gmail.com>

Hello to all!

 

I'm using PB as communication protocol for components of my system.

Components can be located locally on the only one machine or in distributed
fashion. It depends on the config file.

 

At the moment all communications are implemented as callRemote calls. I
would like to keep this unified way of communication but make inter-machine
calls as efficient as possible. What is the best way to do that?

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130224/bc38ac64/attachment.htm 

From wenxiang at zopim.com  Sun Feb 24 19:22:28 2013
From: wenxiang at zopim.com (Wenxiang Wu)
Date: Sun, 24 Feb 2013 16:22:28 -0800
Subject: [Twisted-Python] Unable to write to "stuck" TCP client connections
Message-ID: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>

Hi,

I am encountering a weird bug, where some TCP client connections get into a
state where the server is able to read data sent from the client, but not
able to send any data with transport.write().

With some help from the #twitsed IRC channel, I was able to gather the
following information regarding the bug. While I'm still unable to provide
steps to reporduce this bug, I am able to reliably find clients who are in
this state. I am running 24 instances of the twisted server (Epoll reactor)
running on Ubuntu, with a peak traffic of >130k users. At any instance,
there are < 20 TCP connections stuck in this state.

Here is some information about the bug:

1. transport.write() does not send anything down the socket
2. transport.doWrite() will send all the data that has been buffered up,
and then stop sending any new data.
3. transport.writeSomeData() will send data
3. reactor.getWriters() will return a list of transports that are all stuck
in this state, and the writers will remain in this list.
4. Calling reactor.removeWriter(transport) will "unstuck" the transport and
data gets streamed once again.
5. A small number of clients will receive data for a while, and return to
this stuck state. Most return to normal once reactor.removeWriter() is
called.
6. Based on the suggestion from IRC user _habnabit, I used strace after
removing the writer, here is the output:

(4:52:09 PM) thewrongboy: epoll_ctl(3, EPOLL_CTL_MOD, 6504, {EPOLLIN,
{u32=6504, u64=22205092589476200}}) = 0
(4:52:09 PM) thewrongboy: epoll_ctl(3, EPOLL_CTL_MOD, 6504,
{EPOLLIN|EPOLLOUT, {u32=6504, u64=22205092589476200}}) = 0
 (4:52:09 PM) thewrongboy: epoll_ctl(3, EPOLL_CTL_MOD, 6504, {EPOLLIN,
{u32=6504, u64=22205092589476200}}) = 0
(4:52:09 PM) thewrongboy: epoll_ctl(3, EPOLL_CTL_MOD, 6504,
{EPOLLIN|EPOLLOUT, {u32=6504, u64=22205092589476200}}) = 0
 (4:52:09 PM) thewrongboy: epoll_ctl(3, EPOLL_CTL_MOD, 6504, {EPOLLIN,
{u32=6504, u64=22205092589476200}}) = 0

For now, I am using a LoopingCall to check and remove transports that are
stuck in getWriters().

I am using Twisted 12.3.0 on Ubuntu 12.04 - 3.2.0-35-generic #55-Ubuntu SMP
Wed Dec 5 17:42:16 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux.

Has anyone else experienced this weird problem? I'd love to provide more
information regarding this bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130224/60f47b66/attachment.htm 

From itamar at futurefoundries.com  Sun Feb 24 19:37:02 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 24 Feb 2013 19:37:02 -0500
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
Message-ID: <CAOp9P3oG0DGkNeWbXChsaGEyu6--euiHMOxMx5-vhGUg=gmvAQ@mail.gmail.com>

On Sun, Feb 24, 2013 at 7:22 PM, Wenxiang Wu <wenxiang at zopim.com> wrote:

> Hi,
>
> I am encountering a weird bug, where some TCP client connections get into
> a state where the server is able to read data sent from the client, but not
> able to send any data with transport.write().
>

Ignoring your workarounds, what transport methods do you use in normal
code? Obviously write(), but what else?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130224/cd2e9c6f/attachment.htm 

From itamar at futurefoundries.com  Sun Feb 24 19:38:18 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 24 Feb 2013 19:38:18 -0500
Subject: [Twisted-Python] combine local and remote calls in perspective
	brokers
In-Reply-To: <04ce01ce12ab$403fe580$c0bfb080$@gmail.com>
References: <04ce01ce12ab$403fe580$c0bfb080$@gmail.com>
Message-ID: <CAOp9P3okHgDj4MqTZrqRT2MsLu43HYcaV2PVLGE2Ba-AEoQHMg@mail.gmail.com>

On Sun, Feb 24, 2013 at 11:23 AM, Sergey Gerasimov <sergun at gmail.com> wrote:

> Hello to all!****
>
> ** **
>
> I?m using PB as communication protocol for components of my system.****
>
> Components can be located locally on the only one machine or in
> distributed fashion. It depends on the config file.****
>
> ** **
>
> At the moment all communications are implemented as callRemote calls. I
> would like to keep this unified way of communication but make inter-machine
> calls as efficient as possible. What is the best way to do that?
>

When you say "locally", is it still different processes talking to each
other? Talking over TCP loopback on the same machine is pretty efficient,
and unlikely to be a bottleneck, so you don't necessarily have to do
anything special.

-Itamar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130224/d9b558bc/attachment.htm 

From sergun at gmail.com  Mon Feb 25 04:15:55 2013
From: sergun at gmail.com (Sergey Gerasimov)
Date: Mon, 25 Feb 2013 13:15:55 +0400
Subject: [Twisted-Python] combine local and remote calls in perspective
	brokers
In-Reply-To: <CAOp9P3okHgDj4MqTZrqRT2MsLu43HYcaV2PVLGE2Ba-AEoQHMg@mail.gmail.com>
References: <04ce01ce12ab$403fe580$c0bfb080$@gmail.com>
	<CAOp9P3okHgDj4MqTZrqRT2MsLu43HYcaV2PVLGE2Ba-AEoQHMg@mail.gmail.com>
Message-ID: <057b01ce1338$b8a63640$29f2a2c0$@gmail.com>

 

 

From: Itamar Turner-Trauring [mailto:itamar at futurefoundries.com] 
Sent: Monday, February 25, 2013 4:38 AM
To: sergun at gmail.com; Twisted general discussion
Subject: Re: [Twisted-Python] combine local and remote calls in perspective brokers

 

 

On Sun, Feb 24, 2013 at 11:23 AM, Sergey Gerasimov <sergun at gmail.com> wrote:

Hello to all!

 

I?m using PB as communication protocol for components of my system.

Components can be located locally on the only one machine or in distributed fashion. It depends on the config file.

 

At the moment all communications are implemented as callRemote calls. I would like to keep this unified way of communication but make inter-machine calls as efficient as possible. What is the best way to do that?

 

When you say "locally", is it still different processes talking to each other? Talking over TCP loopback on the same machine is pretty efficient, and unlikely to be a bottleneck, so you don't necessarily have to do anything special.

 

-Itamar

 

Itamar,

 

nn my case ?locally? means local objects in the only one process. 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130225/d8ae626e/attachment.htm 

From dynamicgl at gmail.com  Mon Feb 25 07:30:57 2013
From: dynamicgl at gmail.com (Gelin Yan)
Date: Mon, 25 Feb 2013 20:30:57 +0800
Subject: [Twisted-Python] combine local and remote calls in perspective
	brokers
In-Reply-To: <057b01ce1338$b8a63640$29f2a2c0$@gmail.com>
References: <04ce01ce12ab$403fe580$c0bfb080$@gmail.com>
	<CAOp9P3okHgDj4MqTZrqRT2MsLu43HYcaV2PVLGE2Ba-AEoQHMg@mail.gmail.com>
	<057b01ce1338$b8a63640$29f2a2c0$@gmail.com>
Message-ID: <CABkOF6SjO=RanqXcQMOGvK2Fu1srOFAu6YTKDTNp+yVvw-OEcQ@mail.gmail.com>

On Mon, Feb 25, 2013 at 5:15 PM, Sergey Gerasimov <sergun at gmail.com> wrote:

> ** **
>
> ** **
>
> *From:* Itamar Turner-Trauring [mailto:itamar at futurefoundries.com]
> *Sent:* Monday, February 25, 2013 4:38 AM
> *To:* sergun at gmail.com; Twisted general discussion
> *Subject:* Re: [Twisted-Python] combine local and remote calls in
> perspective brokers****
>
> ** **
>
> ** **
>
> On Sun, Feb 24, 2013 at 11:23 AM, Sergey Gerasimov <sergun at gmail.com>
> wrote:****
>
> Hello to all!****
>
>  ****
>
> I?m using PB as communication protocol for components of my system.****
>
> Components can be located locally on the only one machine or in
> distributed fashion. It depends on the config file.****
>
>  ****
>
> At the moment all communications are implemented as callRemote calls. I
> would like to keep this unified way of communication but make inter-machine
> calls as efficient as possible. What is the best way to do that?****
>
> ** **
>
> When you say "locally", is it still different processes talking to each
> other? Talking over TCP loopback on the same machine is pretty efficient,
> and unlikely to be a bottleneck, so you don't necessarily have to do
> anything special.****
>
> ** **
>
> -Itamar****
>
> ** **
>
> Itamar,****
>
> ** **
>
> nn my case ?locally? means local objects in the only one process. ****
>
> ** **
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
Hi

   It is fine to run both of sides within the same process, many test
suites in twisted do this.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130225/5d18efe7/attachment-0001.htm 

From glyph at twistedmatrix.com  Mon Feb 25 18:23:59 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Feb 2013 15:23:59 -0800
Subject: [Twisted-Python] Inline callbacks: generating the same Deferred
	at multiple places
In-Reply-To: <5128A6CC.9030905@jaury.eu>
References: <51279155.1070709@jaury.eu>
	<CAPkRfUTjKGum3vn6SAyNPyHu4YGFL42xcNTuGDijjWU+BidPkA@mail.gmail.com>
	<789C5390-E617-45C8-909E-A3DD9266E2A8@twistedmatrix.com>
	<5128A6CC.9030905@jaury.eu>
Message-ID: <E01A14DC-2940-417A-9271-2BFD36764E07@twistedmatrix.com>


On Feb 23, 2013, at 3:23 AM, Pierre Jaury <pierre at jaury.eu> wrote:

> On 02/22/2013 09:17 PM, Glyph wrote:
>> 
>> On Feb 22, 2013, at 8:30 AM, Christopher Armstrong
>> <radix at twistedmatrix.com <mailto:radix at twistedmatrix.com>> wrote:
>> 
>>> I think it's a reasonable change to make, and I don't foresee any
>>> problems with it, so I think it's fine to submit a bug about it. But I
>>> do question the architecture that needs to make use of it. I would
>>> probably avoid scenarios like that in my own code.
>> 
>> I disagree; the behavior of result consumption is intentional - although
>> it could be better documented.  Changing it would very definitely be
>> incompatible (<http://twistedmatrix.com/trac/wiki/CompatibilityPolicy>);
>> this is possible, of course, if the deprecation/migration is worth it,
>> but the behavior being requested here would be worse in a number of ways.
> 
> Well, some criticism, now I am listening to you.
> 
>> If we re-populated the result, every failed Deferred yielded by an
>> inlineCallbacks function would log its traceback twice: once when the
>> unhandled exception propagated out of the inlineCallbacks function
>> causing its Deferred to fail, and once when the unhandled exception
>> propagated from the yielded Deferred itself, since nothing would have
>> consumed it when that Deferred would be GC'd.
> 
> Well, this simply means that the change is not that simple to make and
> would probably imply some deeper modifications. I can see how this kills
> any hope to get the change merged into anything stable anytime soon however.

The change cannot be made, as such.  The compatibility policy page, linked above, details what would be necessary to add a new API with the behavior you want, but as I think I made clear already, I think that would be a bad idea ;).

>> Speaking of GC, similarly, any large objects in Deferred results
>> processed by inlineCallbacks functions would live longer, and continue
>> participating in any reference cycles they're part of, possibly causing
>> memory leaks, or at least, longer collection times and less favorable
>> memory usage behavior, especially in long-lived processes.
> 
> But.. I definitely agree with this one, which I did not foresee. I
> therefore agree that any change in Deferred objects behavior should
> never enforce references to live longer when not usually required.

Deferred holds enough references to get its job done, no more, no less.  (Well, maybe a little more in the case of a failed Deferred.  But mostly we are talking about a successful Deferred here.)

>> Basically, you can't treat a Deferred as an event broadcaster.  It isn't
>> one.  It's a single-shot representation of an asynchronous result, which
>> a single consumer can consume with its current value, possibly yielding
>> a new value.
> 
> That I figured out already. Thanks for the reminder anyway, I was on the
> path of loosing myself, there :)

OK, good :).

>> Any
>> inlineCallbacks function which wants to express its intent more
>> precisely can do this, instead:
>> 
>>    def fork(d):
>>        d2 = Deferred()
>>        def fire(x):
>>            d2.callback(x)
>>            return x
>>        d.addBoth(fire)
>>        return d2
>> 
>>    @inlineCallbacks
>>    def foo():
>>        result = yield fork(somethingAsync())
> 
> I will embed this one in my bundle of Twisted utility functions. Thanks!
> 
>> Maybe putting that function in Twisted (this is not the first time it's
>> come up) would be a useful addition.
> 
> Agreed, then.

Some existing implementations:

<http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/enterprise/adbapi2.py?rev=10297#L877>
<http://bazaar.launchpad.net/~divmod-dev/divmod.org/trunk/view/head:/Epsilon/epsilon/pending.py>

-glyph



From glyph at twistedmatrix.com  Mon Feb 25 18:25:17 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Feb 2013 15:25:17 -0800
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
Message-ID: <3C36456E-7829-4BA6-983B-61542AA5F963@twistedmatrix.com>


On Feb 24, 2013, at 4:22 PM, Wenxiang Wu <wenxiang at zopim.com> wrote:

> Has anyone else experienced this weird problem? I'd love to provide more information regarding this bug.

I have seen bugs which _might_ be this problem, but I'm not sure.  I don't think I've ever been able to reproduce it.

Can you test with any reactors other than epoll?  Do you have a test case which will reproduce it deterministically?

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130225/e11104c9/attachment.htm 

From wenxiang at zopim.com  Mon Feb 25 19:17:55 2013
From: wenxiang at zopim.com (Wenxiang Wu)
Date: Mon, 25 Feb 2013 16:17:55 -0800
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <3C36456E-7829-4BA6-983B-61542AA5F963@twistedmatrix.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
	<3C36456E-7829-4BA6-983B-61542AA5F963@twistedmatrix.com>
Message-ID: <CAGr0=+ES7oA8_6PBC4t-OqLX8KhDzgyTf2nZATEQ_k4Oee4PLg@mail.gmail.com>

Unfortunately for performance reasons, I cannot test this with any other
reactor. And the only time I have ever been able to reproduce this was when
I left my client running overnight.

However due to the amount of traffic we are seeing, I am able to reliably
find connections stuck in this state. I get 2-3 connections stuck every
hour.


On Mon, Feb 25, 2013 at 3:25 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Feb 24, 2013, at 4:22 PM, Wenxiang Wu <wenxiang at zopim.com> wrote:
>
>  Has anyone else experienced this weird problem? I'd love to provide more
> information regarding this bug.
>
>
> I have seen bugs which _might_ be this problem, but I'm not sure.  I don't
> think I've ever been able to reproduce it.
>
> Can you test with any reactors other than epoll?  Do you have a test case
> which will reproduce it deterministically?
>
> -g
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Wenxiang Wu
VP Partying / Engineering
www.zopim.com

[US] +1 (408) 680-9345
[SG] +65 9457-5822
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130225/9cc00586/attachment.htm 

From glyph at twistedmatrix.com  Mon Feb 25 19:36:01 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Feb 2013 16:36:01 -0800
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <CAGr0=+ES7oA8_6PBC4t-OqLX8KhDzgyTf2nZATEQ_k4Oee4PLg@mail.gmail.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
	<3C36456E-7829-4BA6-983B-61542AA5F963@twistedmatrix.com>
	<CAGr0=+ES7oA8_6PBC4t-OqLX8KhDzgyTf2nZATEQ_k4Oee4PLg@mail.gmail.com>
Message-ID: <9124FCEB-39D9-439B-A5DE-914509CAB31E@twistedmatrix.com>


On Feb 25, 2013, at 4:17 PM, Wenxiang Wu <wenxiang at zopim.com> wrote:

> Unfortunately for performance reasons, I cannot test this with any other reactor. And the only time I have ever been able to reproduce this was when I left my client running overnight.

Understandable; I've never managed to reliably reproduce it in a test environment either.

> However due to the amount of traffic we are seeing, I am able to reliably find connections stuck in this state. I get 2-3 connections stuck every hour.

Do these connections share any obvious attributes?  For example, are they to clients on some particular network?

-g


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130225/fc5276c0/attachment.htm 

From dynamicgl at gmail.com  Mon Feb 25 21:43:15 2013
From: dynamicgl at gmail.com (Gelin Yan)
Date: Tue, 26 Feb 2013 10:43:15 +0800
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <9124FCEB-39D9-439B-A5DE-914509CAB31E@twistedmatrix.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
	<3C36456E-7829-4BA6-983B-61542AA5F963@twistedmatrix.com>
	<CAGr0=+ES7oA8_6PBC4t-OqLX8KhDzgyTf2nZATEQ_k4Oee4PLg@mail.gmail.com>
	<9124FCEB-39D9-439B-A5DE-914509CAB31E@twistedmatrix.com>
Message-ID: <CABkOF6QUESm1f4Hjdkv8fvKnROTBUuttWCJsZxv9ze6Mw4UbBA@mail.gmail.com>

On Tue, Feb 26, 2013 at 8:36 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Feb 25, 2013, at 4:17 PM, Wenxiang Wu <wenxiang at zopim.com> wrote:
>
> Unfortunately for performance reasons, I cannot test this with any other
> reactor. And the only time I have ever been able to reproduce this was when
> I left my client running overnight.
>
>
> Understandable; I've never managed to reliably reproduce it in a test
> environment either.
>
> However due to the amount of traffic we are seeing, I am able to reliably
> find connections stuck in this state. I get 2-3 connections stuck every
> hour.
>
>
> Do these connections share any obvious attributes?  For example, are they
> to clients on some particular network?
>
> -g
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
Hi All

    It looks like a serious bug, what is the work around besides of
checking stuck state regularly?.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130226/00855985/attachment.htm 

From wenxiang at zopim.com  Tue Feb 26 01:24:12 2013
From: wenxiang at zopim.com (Wenxiang Wu)
Date: Mon, 25 Feb 2013 22:24:12 -0800
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <9124FCEB-39D9-439B-A5DE-914509CAB31E@twistedmatrix.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
	<3C36456E-7829-4BA6-983B-61542AA5F963@twistedmatrix.com>
	<CAGr0=+ES7oA8_6PBC4t-OqLX8KhDzgyTf2nZATEQ_k4Oee4PLg@mail.gmail.com>
	<9124FCEB-39D9-439B-A5DE-914509CAB31E@twistedmatrix.com>
Message-ID: <CAGr0=+HbOCOVm3fyjNoqx8LwfH-Hiy0XYMdPQaxqtpTOXeyv_g@mail.gmail.com>



From glyph at twistedmatrix.com  Tue Feb 26 02:36:59 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Feb 2013 23:36:59 -0800
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <CAGr0=+HbOCOVm3fyjNoqx8LwfH-Hiy0XYMdPQaxqtpTOXeyv_g@mail.gmail.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
	<3C36456E-7829-4BA6-983B-61542AA5F963@twistedmatrix.com>
	<CAGr0=+ES7oA8_6PBC4t-OqLX8KhDzgyTf2nZATEQ_k4Oee4PLg@mail.gmail.com>
	<9124FCEB-39D9-439B-A5DE-914509CAB31E@twistedmatrix.com>
	<CAGr0=+HbOCOVm3fyjNoqx8LwfH-Hiy0XYMdPQaxqtpTOXeyv_g@mail.gmail.com>
Message-ID: <15AFC525-125C-4DE1-871D-AC5366377A0F@twistedmatrix.com>

On Feb 25, 2013, at 10:24 PM, Wenxiang Wu <wenxiang at zopim.com> wrote:

> From what I can tell, there isn't a specific pattern that. But from this small sample size, users that run into this problem are those with higher levels of usage, i.e. connections with more traffic.
> 
> Also, this *seems* to affect users in the same LAN more. The 2 groups of affected users I worked closely with regarding this issue were both connected to the same WiFi router.

So, it sounds like it's happening with connections that are (A) faster and (B) shipping around more traffic.  Smells like a possible race condition - and maybe not in Twisted.  Is it possible for you to test with any other OS / kernel variations, to see if it behaves differently on other Linux versions, ideally some with changes to epoll?

I don't know epoll quite well enough to read the strace and tell what's going on.  If those are the only calls being traced... there's no gettimeofday or send or recv calls?  That suggests it's just thrashing, but if your workaround works, other stuff must be going on.  Hmm.  I guess I don't have a clear enough picture for any useful conjecture yet :).  Can you open a bug, and attach a more complete strace, assuming that the one with just the epoll calls was filtered?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130225/3b05c0ba/attachment.htm 

From lacrima.maxim at gmail.com  Tue Feb 26 03:48:24 2013
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Tue, 26 Feb 2013 10:48:24 +0200
Subject: [Twisted-Python] combine local and remote calls in perspective
	brokers
In-Reply-To: <CABkOF6SjO=RanqXcQMOGvK2Fu1srOFAu6YTKDTNp+yVvw-OEcQ@mail.gmail.com>
References: <04ce01ce12ab$403fe580$c0bfb080$@gmail.com>
	<CAOp9P3okHgDj4MqTZrqRT2MsLu43HYcaV2PVLGE2Ba-AEoQHMg@mail.gmail.com>
	<057b01ce1338$b8a63640$29f2a2c0$@gmail.com>
	<CABkOF6SjO=RanqXcQMOGvK2Fu1srOFAu6YTKDTNp+yVvw-OEcQ@mail.gmail.com>
Message-ID: <CAKef57NBRymaF1VQcOfy8qsYQ3afuonSTNVSJcfhu1fv_rVAqA@mail.gmail.com>

Hi,

   It is fine to run both of sides within the same process, many test
> suites in twisted do this.
>

I can be wrong, but tests often use `proto_helpers.StringTransport` to
avoid spawning a new process and probably not intended for usage outside of
tests.

If it is the same process, why not to access objects directly?
`pb.Referenceable` and `pb.Root` should be just wrappers around your own
objects.

-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130226/5a67c3aa/attachment.htm 

From itamar at itamarst.org  Tue Feb 26 07:29:29 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 26 Feb 2013 07:29:29 -0500
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <CAOp9P3oG0DGkNeWbXChsaGEyu6--euiHMOxMx5-vhGUg=gmvAQ@mail.gmail.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
	<CAOp9P3oG0DGkNeWbXChsaGEyu6--euiHMOxMx5-vhGUg=gmvAQ@mail.gmail.com>
Message-ID: <512CAAA9.5060903@itamarst.org>

On 02/24/2013 07:37 PM, Itamar Turner-Trauring wrote:
>
>
> On Sun, Feb 24, 2013 at 7:22 PM, Wenxiang Wu <wenxiang at zopim.com 
> <mailto:wenxiang at zopim.com>> wrote:
>
>     Hi,
>
>     I am encountering a weird bug, where some TCP client connections
>     get into a state where the server is able to read data sent from
>     the client, but not able to send any data with transport.write().
>
>
> Ignoring your workarounds, what transport methods do you use in normal 
> code? Obviously write(), but what else?
>
Can I ask for this information again? It may be relevant.


From logan4u at live.it  Tue Feb 26 15:22:21 2013
From: logan4u at live.it (Logan 4u)
Date: Tue, 26 Feb 2013 20:22:21 +0000
Subject: [Twisted-Python] Simple http server to serve php
Message-ID: <BLU174-W255533164C72754EC69ADCF5FC0@phx.gbl>


Hi! First mail, and first look at this interesting framework that is twisted.
I'm on a Linux Debian. Kindly  need help to solve this issue, I've looked at documentation but I miss something.
Need to get up a simple web server that will serve html and php pages. The html works but php show a window where you can choose if save or open the file.
This is what I've got:

#!/usr/bin/env python
import CGIHTTPServer

def main():
    server_address = ('', 9090)
    handler = CGIHTTPServer.CGIHTTPRequestHandler
    handler.cgi_directories = ['./cgi']
    server = CGIHTTPServer.BaseHTTPServer.HTTPServer(server_address, handler)
    try:
       server.serve_forever()
    except KeyboardInterrupt:
        server.socket.close()
if __name__ == '__main__':
   main()


I've looked at documentation but can't understand this point:

from twisted.web import static, twcgi

class PerlScript(twcgi.FilteredScript):
    filter = '/usr/bin/php' #  >>>> I must point it to the path of php? or php5?

resource = static.File("./cgi") # Points to the perl website
resource.processors = {".php": PerlScript} # Files that end with .pl will be
                                          # processed by PerlScript
resource.indexNames = ['index.php']Every help would be really appreciated. Thanks in advance, BR.
 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130226/d012cd97/attachment.htm 

From msc at contact.de  Thu Feb 28 09:49:06 2013
From: msc at contact.de (Michael Schlenker)
Date: Thu, 28 Feb 2013 15:49:06 +0100
Subject: [Twisted-Python] Aborting a connection attempt when HTTPS
 client detected on HTTP only server?
In-Reply-To: <CAOp9P3q1Yp2aiexubaphcX8j3Xh2xoFTVmQNSG+RJOj57VmnOw@mail.gmail.com>
References: <5118FF2C.4020204@contact.de>
	<CAOp9P3q1Yp2aiexubaphcX8j3Xh2xoFTVmQNSG+RJOj57VmnOw@mail.gmail.com>
Message-ID: <512F6E62.9010505@contact.de>

Am 11.02.2013 15:51, schrieb Itamar Turner-Trauring:
> 
> 
> On Mon, Feb 11, 2013 at 9:24 AM, Michael Schlenker <msc at contact.de
> <mailto:msc at contact.de>> wrote:
> 
>     Is there some pre-made solution, or would i have to hook into the
>     connection setup of twisted.web and check the first few bytes for the
>     signs of an SSL Handshake signature?
> 
> 
> Subclassing the HTTP protocol class and just adding a check in
> dataReceived is probably the easiest thing to do, yes. Might be worth
> filing a ticket for this as well. My guess is the logic would be
> something like "in dataReceived, if you've not hit first line, and any
> byte is non-ASCII, close connection", which has the nice property of
> being more general than just SSL. Or perhaps check what Apache does exactly.
> 
Okay, solved it like this:

from twisted.web import server, http

class HTTPChannel(http.HTTPChannel):
    """
    HTTP Channel that recognizes connection attempts via non-HTTP
    and closes the connection in such cases.
    """

    def __init__(self):
        http.HTTPChannel.__init__(self)
        self.__request_line_received = False

    def lineReceived(self, line):
        self.__request_line_received = True
        http.HTTPChannel.lineReceived(self, line)

    def dataReceived(self, data):
        if not self.__request_line_received:
            # check for any binary garbage, e.g. not ASCII
            # e.g. ssl connection attempt
            try:
                data.decode('ascii')
            except UnicodeDecodeError:
                return self.transport.loseConnection()
        http.HTTPChannel.dataReceived(self, data)


class Site(server.Site):
    protocol = HTTPChannel


Works fine. Thx for the suggestion to check for ASCII.

Michael

-- 
Michael Schlenker
Software Architect

CONTACT Software GmbH           Tel.:   +49 (421) 20153-80
Wiener Stra?e 1-3               Fax:    +49 (421) 20153-41
28359 Bremen
http://www.contact.de/          E-Mail: msc at contact.de

Sitz der Gesellschaft: Bremen
Gesch?ftsf?hrer: Karl Heinz Zachries, Ralf Holtgrefe
Eingetragen im Handelsregister des Amtsgerichts Bremen unter HRB 13215


From beenje at gmail.com  Thu Feb 28 16:59:40 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Thu, 28 Feb 2013 22:59:40 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
Message-ID: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>

Hi,

I have to replace a piece of software that sniffs the traffic on one interface. It gets different messages that are each associated to a specific emitter.
On the same machine, one server is started for each emitter (on a different port).
And the application is just supposed to use the proper server to send the messages captured (to a client on another machine).

Not sure if it's clear, but basically if I have 2 emitters A and B, I'll start 2 servers (a and b).
My sniffer will get messages A1, A2, B1, B2, B3...
I have to pass messages A1, A2 to server a, that will just send them to the client (if it is connected of course).
And B1, B2, B3 to server b.
I don't need any buffering. If no client is connected, messages captured are just discarded.

To sniff the network, I want to use pylibpcap or pcapy.
I found this example to make it work with twisted: http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/

Starting several servers that use the same protocol is not a problem.
But how do I pass the messages captured to the right server?
How do I make the link between the function sniffing the network and the servers?

Thanks

Benjamin

From saurabh.mahindre at gmail.com  Thu Feb 28 21:19:43 2013
From: saurabh.mahindre at gmail.com (Saurabh Mahindre)
Date: Fri, 1 Mar 2013 07:49:43 +0530
Subject: [Twisted-Python] Need help regarding Gsoc 2013
Message-ID: <CANj+b3OTummTY4S+amyPowa=kO8pBiAhJwt8YHcGVJZkYb7y_g@mail.gmail.com>

I am an undergraduate student and plan to try for a project with
twisted.....I went through the gsoc wiki page for twisted and I have picked
up some ideas
I need some help as to how I can follow up on them or get new ones?
I will be thankful for any help or criticism as i am new to this process.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130301/df4c01b0/attachment.htm 

From julian at grayvines.com  Fri Feb  1 10:14:29 2013
From: julian at grayvines.com (Julian Berman)
Date: Fri, 1 Feb 2013 12:14:29 -0500
Subject: [Twisted-Python] txjsonrpc
Message-ID: <CABJQSkmV731FEPeN2m+ELJmPRYTyHjd6GnJYkcCz89YsCEObog@mail.gmail.com>

Hi. FWIW I had a project that used JSONRPC and decided to use v2 so I wrote
https://github.com/Julian/txjsonrpc-tcp

(Which I couldn't think up a less ambiguous name for at the time
unfortunately)

My requirements were kinda simple and Twisted had evolved a bit since when
oubiwann wrote txjsonrpc so it's written a bit hastily from scratch. The
project was ultimately abandoned for now, so it's kind of in an unpolished
state to say the least, but last I recall it does work, certainly if you
just want to use it as a springboard.

Julian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130201/fbfe3bc6/attachment-0001.html>

From mgwilliams at gmail.com  Fri Feb  1 10:48:58 2013
From: mgwilliams at gmail.com (Matthew Williams)
Date: Fri, 1 Feb 2013 12:48:58 -0500
Subject: [Twisted-Python] txjsonrpc
In-Reply-To: <CABJQSkmV731FEPeN2m+ELJmPRYTyHjd6GnJYkcCz89YsCEObog@mail.gmail.com>
References: <CABJQSkmV731FEPeN2m+ELJmPRYTyHjd6GnJYkcCz89YsCEObog@mail.gmail.com>
Message-ID: <CAD6uV8CtLJtg2Fknm6fmVOOiJk3+XBHqw4=-+DgV4-uhcpWKjg@mail.gmail.com>

Thanks Julian,

I actually have a similar project (
https://github.com/mgwilliams/txJsonRpc-Netstrings), but would prefer to
use the "mainstream" project. At the moment I'm working out whether that's
possible for our needs.

Matthew

On Fri, Feb 1, 2013 at 12:14 PM, Julian Berman <julian at grayvines.com> wrote:

> Hi. FWIW I had a project that used JSONRPC and decided to use v2 so I
> wrote https://github.com/Julian/txjsonrpc-tcp
>
> (Which I couldn't think up a less ambiguous name for at the time
> unfortunately)
>
> My requirements were kinda simple and Twisted had evolved a bit since when
> oubiwann wrote txjsonrpc so it's written a bit hastily from scratch. The
> project was ultimately abandoned for now, so it's kind of in an unpolished
> state to say the least, but last I recall it does work, certainly if you
> just want to use it as a springboard.
>
> Julian
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130201/ba15e0c5/attachment.html>

From duncan.mcgreggor at gmail.com  Fri Feb  1 12:30:53 2013
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Fri, 1 Feb 2013 11:30:53 -0800
Subject: [Twisted-Python] txjsonrpc
In-Reply-To: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>
References: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>
Message-ID: <CAFJQhU6P5Wveq+rnM3QSW+wjHGheyP1Eied-MShGi+KKJ7e-qA@mail.gmail.com>

On Thu, Jan 31, 2013 at 7:43 AM, Matthew Williams <mgwilliams at gmail.com> wrote:
> I have a couple questions regarding txjsonrpc
> (https://github.com/oubiwann/txjsonrpc/) in connection with the recent
> addition of version 2.0 support.
>
> * How complete is the version 2.0 support? I had actually tried some years
> ago to add v2.0 support, but gave up due to some issues I no longer fully
> recall. Are there any known issues with the present implementation?
>
> * I noticed that all results are wrapped in an array (see netstring version
> at
> https://github.com/oubiwann/txjsonrpc/blob/master/txjsonrpc/netstring/jsonrpc.py#L63-L64,
> but the web implementation has the same code.). This seems odd, as a jsonrpc
> result can be any valid json value, including a string, integer, array, or
> dict. The result is that on the client end, what I return from the function
> call as {"a": "b"} is received as [{"a": "b"}]. Is there some reason for
> this? Would a patch altering this behavior (perhaps optionally) be accepted?

Absolutely!

Be sure that your patch wouldn't break existing functionality (for
those that depend upon it) with unit tests for both cases.

Thanks,

d



From mgwilliams at gmail.com  Fri Feb  1 12:49:19 2013
From: mgwilliams at gmail.com (Matthew Williams)
Date: Fri, 1 Feb 2013 14:49:19 -0500
Subject: [Twisted-Python] txjsonrpc
In-Reply-To: <CAFJQhU6P5Wveq+rnM3QSW+wjHGheyP1Eied-MShGi+KKJ7e-qA@mail.gmail.com>
References: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>
	<CAFJQhU6P5Wveq+rnM3QSW+wjHGheyP1Eied-MShGi+KKJ7e-qA@mail.gmail.com>
Message-ID: <CAD6uV8BDEtJXb9_CTZpTEYWo6UhzaHZf+RfC=YuvdsZgxdUyFA@mail.gmail.com>

Hi Duncan,

Thanks for the response.

I'm certainly open to suggestions otherwise, but it seems patching
txjsonrpc to do the following would be rather involved. I started working
on some of this and realized maintaining backwards compatibility might be
very difficult:

* Persistent TCP connections across requests. At first I thought I could
just add an additional Proxy and Factory. Unfortunately the BaseProxy and
BaseFactory expect a new connection for each request, so this started
getting quite involved and would have either require extensive changes to
all the transports, or a parallel implementation.

* The array issue is a bit strange. The only solution I could think of
would be to add a "wrap_results" keyword or some such to the Proxy
constructor (both client and server, as I think the client compensates for
the array wrapper). It would have to default to True for backwards
compatibility.

* Keyword arguments are not supported (but are allowed by 2.0 spec). I
don't think this would be too hard to add.

I'm on the fence as to whether to attack these issues in txjsonrpc, or to
revert to my 2.0/netstrings only implementation, which itself needs a lot
of work (the code is far from ideal, there are no tests, etc.).

Matthew

On Fri, Feb 1, 2013 at 2:30 PM, Duncan McGreggor <duncan.mcgreggor at gmail.com
> wrote:

> On Thu, Jan 31, 2013 at 7:43 AM, Matthew Williams <mgwilliams at gmail.com>
> wrote:
> > I have a couple questions regarding txjsonrpc
> > (https://github.com/oubiwann/txjsonrpc/) in connection with the recent
> > addition of version 2.0 support.
> >
> > * How complete is the version 2.0 support? I had actually tried some
> years
> > ago to add v2.0 support, but gave up due to some issues I no longer fully
> > recall. Are there any known issues with the present implementation?
> >
> > * I noticed that all results are wrapped in an array (see netstring
> version
> > at
> >
> https://github.com/oubiwann/txjsonrpc/blob/master/txjsonrpc/netstring/jsonrpc.py#L63-L64
> ,
> > but the web implementation has the same code.). This seems odd, as a
> jsonrpc
> > result can be any valid json value, including a string, integer, array,
> or
> > dict. The result is that on the client end, what I return from the
> function
> > call as {"a": "b"} is received as [{"a": "b"}]. Is there some reason for
> > this? Would a patch altering this behavior (perhaps optionally) be
> accepted?
>
> Absolutely!
>
> Be sure that your patch wouldn't break existing functionality (for
> those that depend upon it) with unit tests for both cases.
>
> Thanks,
>
> d
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130201/4a8f6fc7/attachment.html>

From glyph at twistedmatrix.com  Fri Feb  1 17:42:34 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 1 Feb 2013 16:42:34 -0800
Subject: [Twisted-Python] maintenance release - a security issue and a
	regression
In-Reply-To: <20130131150725.7db9cf7b@saiph.darkstar.net>
References: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
	<20130130233234.56c54ad2@saiph.darkstar.net>
	<20130131150725.7db9cf7b@saiph.darkstar.net>
Message-ID: <FD0791C6-CBA3-4FF3-9FE2-7EB2DC056D92@twistedmatrix.com>


On Jan 31, 2013, at 6:07 AM, Angelo Dell'Aera <angelo.dellaera at gmail.com> wrote:

> On Wed, 30 Jan 2013 23:32:34 +0100
> Angelo Dell'Aera <angelo.dellaera at gmail.com> wrote:
> 
>> On Wed, 30 Jan 2013 11:04:36 -0800
>> Glyph <glyph at twistedmatrix.com> wrote:
>> 
>>> Any volunteers for parts of this process?
>> 
>> I'm not familiar with Twisted patching process and for this reason
>> I'm just attaching a small patch here for #6245 because I'd like to
>> discuss about the approach. If correct I will move on in the process
>> (hopefully in the right way)
>> 
>> The patch simply tries to encode the name argument properly if
>> unicode. This is the same approach used by ralphm but applied to Name
>> class initialization so it should be really generic.
>> 
>> Just about a doubt about how to handle an exception potentially
>> raised during the name encoding. Any idea?
>> 
>> Ciao.
>> 
>> PS Attached a simple test code which forces the name to resolve to be
>> unicode. It fails against 12.3.0 while it is correclty executed after
>> patching.
> 
> 
> I read documentation about Twisted testing and tested if the suggested patch 
> introduces some regressions in the existing code
> 
> buffer at saiph ~/Twisted-12.3.0/twisted $ trial twisted.names
> [..]
> Ran 271 tests in 0.425s
> 
> PASSED (successes=271)
> 
> which seems like it's not happening.
> 
> Obviously this is not exhaustive because seems like there are no specific tests 
> for that code path (name is always passed as byte) but I can try writing some 
> additional ones if needed. 

Hi Angelo,

Thanks for your contribution.  It looks like the ticket in question already has a branch in review though, so we won't need your patch this time.

In the future, the right way to submit patches is to attach them to the appropriate ticket; in this case, <http://twistedmatrix.com/trac/ticket/6245>.  They tend to get lost or ignored on the mailing list (as happened here).  To answer your question about additional tests, yes, whenever we fix a bug in Twisted, the fix has to come along with a new test to ensure that it stays fixed in subsequent releases.

Thanks,

-glyph




From exarkun at twistedmatrix.com  Sat Feb  2 22:05:29 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 03 Feb 2013 05:05:29 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1359867929.87.1039311283@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130203/fc7a1a01/attachment-0001.html>

From joel.tremblet at openflyers.com  Wed Feb  6 20:29:19 2013
From: joel.tremblet at openflyers.com (Joel Tremblet)
Date: Wed, 06 Feb 2013 22:29:19 -0500
Subject: [Twisted-Python] Add serial connection to a daemon
Message-ID: <20130206222919.7xyj6cc4gkcws88k@webmail.openflyers.com>


Hi

I build a daemon from the example
http://twistedmatrix.com/documents/current/core/howto/tutorial/factory.html

application = service.Application('opensource')
f = OpensourceService()

webRoot = resource.Resource()
webRoot.putChild('',AdminPage())

serviceCollection = service.IServiceCollection(application)
internet.TCPClient(ADDR, PORT, f.getClientFactory()
                    ).setServiceParent(serviceCollection)
internet.TCPServer(SERVICE_PORT, server.Site(f.getWebResource())
                    ).setServiceParent(serviceCollection)
internet.TCPServer(WEB_ADMIN_PORT, server.Site(webRoot)
                    ).setServiceParent(serviceCollection)

It's work fine but I want to add a serial connection to send a order  
to my Client when a event occur on the USB connector

I read my serial data with twisted.internet.serialport

from twisted.internet import reactor
from twisted.internet.protocol import Factory, Protocol
from twisted.internet.serialport import SerialPort

COM_PORT='COM5'
BAUD_RATE=9600

class USBClient(Protocol):
     def __init__(self, network):
         self.network = network
     def dataReceived(self, data):
         print "Data received", repr(data)
         self.network.notifyAll(data)

class CommandRx(Protocol):
     def connectionMade(self):
         self.factory.client_list.append(self)
     def connectionLost(self, reason):
         if self in self.factory.client_list:
             self.factory.client_list.remove(self)

class CommandRxFactory(Factory):
     protocol = CommandRx
     def __init__(self):
         self.client_list = []
     def notifyAll(self, data):
         for cli in self.client_list:
             cli.transport.write(data)

tcpfactory = CommandRxFactory()
reactor.listenTCP(8001, tcpfactory)
SerialPort(USBClient(tcpfactory), COM_PORT, reactor, baudrate=BAUD_RATE)
reactor.run()

Can I integrated this serial connection into my daemon

Thanks for your help
Joel



From itamar at futurefoundries.com  Thu Feb  7 09:19:42 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Thu, 7 Feb 2013 11:19:42 -0500
Subject: [Twisted-Python] Add serial connection to a daemon
In-Reply-To: <20130206222919.7xyj6cc4gkcws88k@webmail.openflyers.com>
References: <20130206222919.7xyj6cc4gkcws88k@webmail.openflyers.com>
Message-ID: <CAOp9P3p52Wbb7p-HyVw5oXCD3pQ7uZ3HDViG8EDniuz-X4yFMw@mail.gmail.com>

On Wed, Feb 6, 2013 at 10:29 PM, Joel Tremblet <joel.tremblet at openflyers.com
> wrote:

>
> Can I integrated this serial connection into my daemon
>

You want to make a custom service:

from twisted.application.service import Service
from twisted.internet import reactor

class CommandService(Service):
    def startService(self):
        reactor.listenTCP(8001, tcpfactory)
        SerialPort(USBClient(tcpfactory), COM_PORT, reactor,
baudrate=BAUD_RATE)

and now you can add an instance of this service to the Application in your
.tac file, e.g.:

CommandService().setServiceParent(application)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130207/c7f59e28/attachment-0001.html>

From joel.tremblet at openflyers.com  Thu Feb  7 20:33:42 2013
From: joel.tremblet at openflyers.com (Joel Tremblet)
Date: Thu, 07 Feb 2013 22:33:42 -0500
Subject: [Twisted-Python] Add serial connection to a daemon
In-Reply-To: <CAOp9P3p52Wbb7p-HyVw5oXCD3pQ7uZ3HDViG8EDniuz-X4yFMw@mail.gmail.com>
References: <20130206222919.7xyj6cc4gkcws88k@webmail.openflyers.com>
	<CAOp9P3p52Wbb7p-HyVw5oXCD3pQ7uZ3HDViG8EDniuz-X4yFMw@mail.gmail.com>
Message-ID: <20130207223342.9vb5xsuxztw8k8kg@webmail.openflyers.com>


Thank you, It works
Twisted is so simple !
:-)

Joël

Le Thu, 7 Feb 2013 11:19:42 -0500 Itamar Turner-Trauring  
<itamar at futurefoundries.com> a écrit :

> On Wed, Feb 6, 2013 at 10:29 PM, Joel Tremblet <joel.tremblet at openflyers.com
>> wrote:
>
>>
>> Can I integrated this serial connection into my daemon
>>
>
> You want to make a custom service:
>
> from twisted.application.service import Service
> from twisted.internet import reactor
>
> class CommandService(Service):
>     def startService(self):
>         reactor.listenTCP(8001, tcpfactory)
>         SerialPort(USBClient(tcpfactory), COM_PORT, reactor,
> baudrate=BAUD_RATE)
>
> and now you can add an instance of this service to the Application in your
> .tac file, e.g.:
>
> CommandService().setServiceParent(application)
>



From lacrima.maxim at gmail.com  Fri Feb  8 05:01:53 2013
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Fri, 8 Feb 2013 14:01:53 +0200
Subject: [Twisted-Python] Perspective broker over standard IO. How?
Message-ID: <CAKef57PpDZBYXaOXMEGgeEogR_Uk+vh=v5FQhkXKFKmwsG270Q@mail.gmail.com>

Hi!

I can't figure out how to use Perspective broker over stdio. Say I have
file `child.py`:

----
from twisted.internet.endpoints import StandardIOEndpoint
from twisted.internet import reactor
from twisted.spread import pb

class Foo(pb.Root):
    def remote_do_smth(self):
        pass

def main():
    endpoint = StandardIOEndpoint(reactor)
    f = pb.PBServerFactory(Foo())
    endpoint.listen(f)
    reactor.run()

if __name__ == '__main__':
    main()
----

Then say I have `main.py`:
----
import sys
from twisted.spread import pb
from twisted.internet import reactor

def cb(o):
    d = o.callRemote("do_smth")
    return d

def main():
    exe = sys.executable
    args = [exe, '/path/to/child.py']

    factory = pb.PBClientFactory()
    # now what? The below is a wrong way to create protocol.
    # But how do I do this?
    proto = factory.buildProtocol(('foo',))
    reactor.spawnProcess(proto, exe, args)

    d = factory.getRootObject()
    d.addCallback(cb)
    d.addCallback(lambda _: reactor.stop())

    reactor.run()

if __name__ == '__main__':
    main()
----

How do I spawn `child.py` from a parent process, such that the parent can
retrieve the root object and call methods on it?

The code above throws errors:

http://pastebin.com/7TiZdDVc

Thanks in advance.

-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130208/a30693b6/attachment.html>

From itamar at futurefoundries.com  Fri Feb  8 05:45:49 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Fri, 8 Feb 2013 07:45:49 -0500
Subject: [Twisted-Python] Perspective broker over standard IO. How?
In-Reply-To: <CAKef57PpDZBYXaOXMEGgeEogR_Uk+vh=v5FQhkXKFKmwsG270Q@mail.gmail.com>
References: <CAKef57PpDZBYXaOXMEGgeEogR_Uk+vh=v5FQhkXKFKmwsG270Q@mail.gmail.com>
Message-ID: <CAOp9P3rWwqWpX9Z==VRo857istNku1UX_Qm6AO72msbK=-DZ6g@mail.gmail.com>

    # now what? The below is a wrong way to create protocol.

>     # But how do I do this?
>     proto = factory.buildProtocol(('foo',))
>     reactor.spawnProcess(proto, exe, args)
>

spawnProcess takes a ProcessProtocol, which has a different interface than
regular Protocols. You'll need to make a ProcessProtocol that hands over
data to the PB protocol instance. The process documentation covers the API:
http://twistedmatrix.com/documents/current/core/howto/process.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130208/ca530699/attachment.html>

From itamar at futurefoundries.com  Fri Feb  8 05:46:49 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Fri, 8 Feb 2013 07:46:49 -0500
Subject: [Twisted-Python] Perspective broker over standard IO. How?
In-Reply-To: <CAOp9P3rWwqWpX9Z==VRo857istNku1UX_Qm6AO72msbK=-DZ6g@mail.gmail.com>
References: <CAKef57PpDZBYXaOXMEGgeEogR_Uk+vh=v5FQhkXKFKmwsG270Q@mail.gmail.com>
	<CAOp9P3rWwqWpX9Z==VRo857istNku1UX_Qm6AO72msbK=-DZ6g@mail.gmail.com>
Message-ID: <CAOp9P3rOig+O9gebK4aSKs5YQUCF87UQ2Y0j37HOouS4iSqb6A@mail.gmail.com>

Eventually this will be easier, BTW, once this ticket is merged:
https://twistedmatrix.com/trac/ticket/4696
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130208/3fe958c6/attachment.html>

From chespinoza at gmail.com  Fri Feb  8 06:50:14 2013
From: chespinoza at gmail.com (Christian Espinoza)
Date: Fri, 8 Feb 2013 10:50:14 -0300
Subject: [Twisted-Python] Perspective Broker system into a TCP Listener
Message-ID: <CAGBwpM2Zj=KK1Z=QJeOYKPkzkbqWgKQhTWJHWu+2fR--sv00tQ@mail.gmail.com>

Hello, I'm trying to understand how can I use Perspective Broker to send
some data getted from a TCP listener to another process...

I can't figure out how to get it....


from twisted.internet import protocol, reactor
from twisted.python import log

from twisted.spread import pb


class Service(protocol.Protocol):
    extra = {}
  def dataReceived(self, data):
  extra = doSomething(data)
  #SEND extra TO ANOTHER PROCESS -- FAILED CODE
        factory = pb.PBClientFactory()
        reactor.connectTCP("localhost", 8798, factory)
        root = factory.getRootObject()

        def got_root(root):
          rc = root.callRemote("get", data)
            def got_value(v):
              print v
                reactor.stop()
            rc.addCallback(got_value)

        root.addCallback(got_root)
        reactor.run()
                ....

class ServerFactory(protocol.Factory):
    def buildProtocol(self, addr):
        return Service()

reactor.listenTCP(8797, ServerFactory())
reactor.run()

This testing code fails, I know I'm wrong, please could somebody help me to
understand and get it?
Thanks in advance.
Christian Espinoza.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130208/cf5aeb5b/attachment.html>

From lacrima.maxim at gmail.com  Fri Feb  8 07:28:05 2013
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Fri, 8 Feb 2013 16:28:05 +0200
Subject: [Twisted-Python] Perspective broker over standard IO. How?
In-Reply-To: <CAOp9P3rOig+O9gebK4aSKs5YQUCF87UQ2Y0j37HOouS4iSqb6A@mail.gmail.com>
References: <CAKef57PpDZBYXaOXMEGgeEogR_Uk+vh=v5FQhkXKFKmwsG270Q@mail.gmail.com>
	<CAOp9P3rWwqWpX9Z==VRo857istNku1UX_Qm6AO72msbK=-DZ6g@mail.gmail.com>
	<CAOp9P3rOig+O9gebK4aSKs5YQUCF87UQ2Y0j37HOouS4iSqb6A@mail.gmail.com>
Message-ID: <CAKef57O0-Lg1q4DniBNZZSOG+Di8AtdvH28_7wTcUJr6TYe0jQ@mail.gmail.com>

Hi Itamar,

Thank you for your hints. I got it working:

----
# client.py
from twisted.internet.endpoints import StandardIOEndpoint
from twisted.internet import reactor
from twisted.spread import pb

class Foo(pb.Root):
    def remote_do_smth(self):
        return 'hello!'

def main():
    endpoint = StandardIOEndpoint(reactor)
    f = pb.PBServerFactory(Foo())
    endpoint.listen(f)
    reactor.run()

if __name__ == '__main__':
    main()

----

----
# main.py
import sys
from twisted.spread import pb
from twisted.internet import reactor, protocol
from twisted.python import util

def do_something(obj):
    d = obj.callRemote("do_smth")
    return d

class FooProcessProtocol(protocol.ProcessProtocol):

    def __init__(self, PBFactory):
        self.broker = PBFactory.buildProtocol(('foo',))

    def connectionMade(self):
        self.broker.makeConnection(self.transport)

    def outReceived(self, data):
        self.broker.dataReceived(data)

    def errReceived(self, data):
        print data


def main():
    exe = sys.executable
    args = [exe, '~/misc/client.py']

    factory = pb.PBClientFactory()
    reactor.spawnProcess(FooProcessProtocol(factory), exe, args)

    d = factory.getRootObject()
    d.addCallback(do_something)
    d.addCallback(util.println)
    d.addCallback(lambda _: reactor.stop())

    reactor.run()

if __name__ == '__main__':
    main()

----

$ python main.py
hello!

It works. I just wonder if I there are some edge cases that are not handled
by this implementation.

Thank you.


On 8 February 2013 14:46, Itamar Turner-Trauring <itamar at futurefoundries.com
> wrote:

> Eventually this will be easier, BTW, once this ticket is merged:
> https://twistedmatrix.com/trac/ticket/4696
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130208/648befbb/attachment.html>

From poalman at gmail.com  Fri Feb  8 08:12:58 2013
From: poalman at gmail.com (Paul Wiseman)
Date: Fri, 8 Feb 2013 15:12:58 +0000
Subject: [Twisted-Python] TaskStopped error,
	unsure of the cause and solution
In-Reply-To: <CACgdh2gQy9Gp9qbqwMC6CV4J1Ti2F+=+c36cVtnrO0nceV9uWA@mail.gmail.com>
References: <CACgdh2hFm80KFzDBY7sCS5XveZNX8dovo1XGt3Jt_WrJFQ7tJA@mail.gmail.com>
	<20121221180822.6389.1626477491.divmod.xquotient.354@localhost6.localdomain6>
	<CACgdh2gQy9Gp9qbqwMC6CV4J1Ti2F+=+c36cVtnrO0nceV9uWA@mail.gmail.com>
Message-ID: <CACgdh2iF3q2xkT4XShQCRCctLu1cQNGtCdOkA2GRn2DfoNxQLg@mail.gmail.com>

On 27 December 2012 14:49, Paul Wiseman <poalman at gmail.com> wrote:
> On 21 December 2012 18:08,  <exarkun at twistedmatrix.com> wrote:
>> On 04:12 pm, poalman at gmail.com wrote:
>>>Hey,
>>>
>>>I'm getting the following error in my logs (lots and lots), but only
>>>after the server has been running for some time, I'm not sure what the
>>>cause is or what I can do to remedy it.
>>
>> This seems like a bug in `Agent`, perhaps related to `stopProducing`
>> being called more than once.  It would be great if you could produce a
>> minimal example to include with a bug report in the issue tracker.  An
>> example that reproduces the problem will also make it easier to see
>> where the bug is in your code, if it happens to be there rather than in
>> Twisted.
>
> I'll try my best! The problem is I don't seem to see this at all for
> 10k+ requests ish then I guess something must trigger it as it will
> start happening a lot, so it may be difficult to reproduce.
>

I've still not been able to reproduce this on demand.. the least
amount of request I've seen before getting the error is 6500 :/

I've also seen this stack trace which I didn't notice before

2013-02-08 10:07:28+0000 [HTTP11ClientProtocol,client] Unhandled Error
        Traceback (most recent call last):
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/application/app.py",
line 323, in runReactorWithLogging
            reactor.run()
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/base.py",
line 1169, in run
            self.mainLoop()
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/base.py",
line 1181, in mainLoop
            self.doIteration(t)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/epollreactor.py",
line 379, in doPoll
            log.callWithLogger(selectable, _drdw, selectable, fd, event)
        --- <exception caught here> ---
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
line 84, in callWithLogger
            return callWithContext({"system": lp}, func, *args, **kw)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
line 69, in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/context.py",
line 118, in callWithContext
            return self.currentContext().callWithContext(ctx, func, *args, **kw)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/context.py",
line 81, in callWithContext
            return func(*args,**kw)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/posixbase.py",
line 639, in _doReadOrWrite
            self._disconnectSelectable(selectable, why, inRead)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/posixbase.py",
line 258, in _disconnectSelectable
            selectable.readConnectionLost(f)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/tcp.py",
line 267, in readConnectionLost
            self.connectionLost(reason)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/tcp.py",
line 473, in connectionLost
            self._commonConnection.connectionLost(self, reason)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/tcp.py",
line 281, in connectionLost
abstract.FileDescriptor.connectionLost(self, reason)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/abstract.py",
line 182, in connectionLost            self.producer.stopProducing()
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/client.py",
line 760, in stopProducing            self._task.stop()
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/task.py",
line 460, in stop            self._completeWith(TaskStopped(),
Failure(TaskStopped()))
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/task.py",
line 439, in _completeWith
self._cooperator._removeTask(self)
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/task.py",
line 578, in _removeTask            self._delayedCall.cancel()
          File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/base.py",
line 89, in cancel
            raise error.AlreadyCalled
        twisted.internet.error.AlreadyCalled: Tried to cancel an
already-called event.

I'll keep trying to work out the issue, any suggestions on what I
might try to reproduce it or guesses at causes?

>>
>> Jean-Paul
>>>This is what I see in the logs:
>>>
>>>2012-12-20 17:07:17+0000 [HTTP11ClientProtocol,client] Unhandled Error
>>>        Traceback (most recent call last):
>>>        Failure: twisted.web._newclient.RequestTransmissionFailed:
>>>[<twisted.python.failure.Failure <class
>>>'twisted.internet.error.ConnectionDone'>>]
>>>
>>>2012-12-20 17:07:17+0000 [HTTP11ClientProtocol,client] Unexpected
>>>exception from twisted.web.client.FileBodyProducer.stopProducing
>>>        Traceback (most recent call last):
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-
>>>x86_64.egg/twisted/internet/endpoints.py",
>>>line 99, in connectionLost
>>>            return self._wrappedProtocol.connectionLost(reason)
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-
>>>x86_64.egg/twisted/web/_newclient.py",
>>>line 859, in dispatcher
>>>            return func(*args, **kwargs)
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-
>>>x86_64.egg/twisted/web/_newclient.py",
>>>line 1458, in _connectionLost_TRANSMITTING
>>>            self._currentRequest.stopWriting()
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-
>>>x86_64.egg/twisted/web/_newclient.py",
>>>line 760, in stopWriting
>>>            _callAppFunction(self.bodyProducer.stopProducing)
>>>        --- <exception caught here> ---
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-
>>>x86_64.egg/twisted/web/_newclient.py",
>>>line 191, in _callAppFunction
>>>            function()
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/client.py",
>>>line 760, in stopProducing
>>>            self._task.stop()
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-
>>>x86_64.egg/twisted/internet/task.py",
>>>line 459, in stop
>>>            self._checkFinish()
>>>          File "/usr/local/lib/python2.7/site-
>>>packages/Twisted-12.2.0-py2.7-linux-
>>>x86_64.egg/twisted/internet/task.py",
>>>line 469, in _checkFinish
>>>            raise self._completionState
>>>        twisted.internet.task.TaskStopped:
>>>
>>>Just loads of those, they always seem to come through in pairs (the
>>>first twisted.internet.error.ConnectionDone, and then the
>>>twisted.internet.task.TaskStopped as above)
>>>
>>>I'm just doing PUT requests with twisted.web.client.Agent and using a
>>>twisted.web.client.FileBodyProducer to provide the content.
>>>
>>>I'm doing the PUT while I still have the request from a render_GET, so
>>>I thought maybe it's caused if the user disconnects while I'm doing
>>>the PUT? The idea is I redirect them to the file I PUT with
>>>request.redirect, which seems to work fine (until I get this error and
>>>it doesn't)
>>>
>>>The reason I do a PUT and redirect, instead of just writing back to
>>>the request is that I check if the file is in a cache first, I then
>>>only PUT if it's not there- then redirect afterwards.
>>>
>>>Any clues or ideas of what is happening would be hugely helpful
>>>
>>>thanks!!
>>>
>>>Paul
>>>
>>>_______________________________________________
>>>Twisted-Python mailing list
>>>Twisted-Python at twistedmatrix.com
>>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Fri Feb  8 12:03:26 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Feb 2013 19:03:26 -0000
Subject: [Twisted-Python] TaskStopped error,
 unsure of the cause and solution
In-Reply-To: <CACgdh2iF3q2xkT4XShQCRCctLu1cQNGtCdOkA2GRn2DfoNxQLg@mail.gmail.com>
References: <CACgdh2hFm80KFzDBY7sCS5XveZNX8dovo1XGt3Jt_WrJFQ7tJA@mail.gmail.com>
	<20121221180822.6389.1626477491.divmod.xquotient.354@localhost6.localdomain6>
	<CACgdh2gQy9Gp9qbqwMC6CV4J1Ti2F+=+c36cVtnrO0nceV9uWA@mail.gmail.com>
	<CACgdh2iF3q2xkT4XShQCRCctLu1cQNGtCdOkA2GRn2DfoNxQLg@mail.gmail.com>
Message-ID: <20130208190326.3816.1016959687.divmod.xquotient.99@localhost6.localdomain6>

On 03:12 pm, poalman at gmail.com wrote:
>
>I've still not been able to reproduce this on demand.. the least
>amount of request I've seen before getting the error is 6500 :/
>
>I've also seen this stack trace which I didn't notice before
>
>2013-02-08 10:07:28+0000 [HTTP11ClientProtocol,client] Unhandled Error
>        Traceback (most recent call last):
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/application/app.py",
>line 323, in runReactorWithLogging
>            reactor.run()
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/base.py",
>line 1169, in run
>            self.mainLoop()
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/base.py",
>line 1181, in mainLoop
>            self.doIteration(t)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/epollreactor.py",
>line 379, in doPoll
>            log.callWithLogger(selectable, _drdw, selectable, fd, event)
>        --- <exception caught here> ---
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
>line 84, in callWithLogger
>            return callWithContext({"system": lp}, func, *args, **kw)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
>line 69, in callWithContext
>            return context.call({ILogContext: newCtx}, func, *args, 
>**kw)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/python/context.py",
>line 118, in callWithContext
>            return self.currentContext().callWithContext(ctx, func, 
>*args, **kw)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/python/context.py",
>line 81, in callWithContext
>            return func(*args,**kw)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/posixbase.py",
>line 639, in _doReadOrWrite
>            self._disconnectSelectable(selectable, why, inRead)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/posixbase.py",
>line 258, in _disconnectSelectable
>            selectable.readConnectionLost(f)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/tcp.py",
>line 267, in readConnectionLost
>            self.connectionLost(reason)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/tcp.py",
>line 473, in connectionLost
>            self._commonConnection.connectionLost(self, reason)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/tcp.py",
>line 281, in connectionLost
>abstract.FileDescriptor.connectionLost(self, reason)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/abstract.py",
>line 182, in connectionLost            self.producer.stopProducing()
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/client.py",
>line 760, in stopProducing            self._task.stop()
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/task.py",
>line 460, in stop            self._completeWith(TaskStopped(),
>Failure(TaskStopped()))
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/task.py",
>line 439, in _completeWith
>self._cooperator._removeTask(self)
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/task.py",
>line 578, in _removeTask            self._delayedCall.cancel()
>          File "/usr/local/lib/python2.7/dist- 
>packages/Twisted-12.2.0-py2.7-linux- 
>x86_64.egg/twisted/internet/base.py",
>line 89, in cancel
>            raise error.AlreadyCalled
>        twisted.internet.error.AlreadyCalled: Tried to cancel an
>already-called event.
>
>I'll keep trying to work out the issue, any suggestions on what I
>might try to reproduce it or guesses at causes?

Since it seems to be related to handling of lost connections, you may be 
able to reproduce it more easily if you issue your requests to an HTTP 
server which drops connections more often.  Presumably the production 
service you're issuing requests too tries pretty hard to properly serve 
responses to every request.  If you point `Agent` at a worse HTTP server 
(eg, one you write using twisted.web and implement to close connections 
prematurely at various points during the response) this may produce the 
issue more quickly.

You could also try hooking `Agent` up to one of the in-memory 
reactors/transports.  The advantage of this is that it will be much 
easier to "close" the connection at a specific point 
(deterministically).  The disadvantage is that the in-memory 
reactor/transport may not exactly replicate the real reactor/transport 
behavior and so fail to reproduce the issue entirely.

Jean-Paul



From exarkun at twistedmatrix.com  Sat Feb  9 22:05:23 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 10 Feb 2013 05:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1360472723.67.1820569466@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130210/b896533e/attachment-0001.html>

From luca.sbardella at gmail.com  Sun Feb 10 09:56:58 2013
From: luca.sbardella at gmail.com (Luca Sbardella)
Date: Sun, 10 Feb 2013 16:56:58 +0000
Subject: [Twisted-Python] imap google mail client
Message-ID: <CAF94-jZ7N+oamEfOKeuSa1F1E08OqiNu1zO24LmRe=YS5GPCSQ@mail.gmail.com>

Hello,
first time here for me.

I'm writing a little application to access gmail using the IMAP4 library.
I'm using the connection string

strport='ssl:host=imap.gmail.com:port=993'

but it doesn't connect (timeout failure).

The code is the mail_client function in this module

https://github.com/quantmind/pulsar/blob/handshake/examples/webmail/manage.py

What am I doing wrong?
Thanks
Luca
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130210/f948f1d7/attachment.html>

From itamar at futurefoundries.com  Sun Feb 10 13:56:39 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 10 Feb 2013 15:56:39 -0500
Subject: [Twisted-Python] imap google mail client
In-Reply-To: <CAF94-jZ7N+oamEfOKeuSa1F1E08OqiNu1zO24LmRe=YS5GPCSQ@mail.gmail.com>
References: <CAF94-jZ7N+oamEfOKeuSa1F1E08OqiNu1zO24LmRe=YS5GPCSQ@mail.gmail.com>
Message-ID: <CAOp9P3oG5XyamGWY1UMT_q4Vi=qHgMQY3=C6HKu3TF+wRNDFLw@mail.gmail.com>

On Sun, Feb 10, 2013 at 11:56 AM, Luca Sbardella
<luca.sbardella at gmail.com>wrote:

https://github.com/quantmind/pulsar/blob/handshake/examples/webmail/manage.py
>
> What am I doing wrong?
>

Have you tried a more isolated piece of test code, using only Twisted APIs
and not pulsar's wrapper?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130210/a4050da7/attachment-0001.html>

From luca.sbardella at gmail.com  Sun Feb 10 15:15:59 2013
From: luca.sbardella at gmail.com (Luca Sbardella)
Date: Sun, 10 Feb 2013 22:15:59 +0000
Subject: [Twisted-Python] imap google mail client
In-Reply-To: <CAOp9P3oG5XyamGWY1UMT_q4Vi=qHgMQY3=C6HKu3TF+wRNDFLw@mail.gmail.com>
References: <CAF94-jZ7N+oamEfOKeuSa1F1E08OqiNu1zO24LmRe=YS5GPCSQ@mail.gmail.com>
	<CAOp9P3oG5XyamGWY1UMT_q4Vi=qHgMQY3=C6HKu3TF+wRNDFLw@mail.gmail.com>
Message-ID: <CAF94-jYkAxUEyrY5jc6Ao456KMhVt6CKPPGdBAWbTA+QozuR+Q@mail.gmail.com>

That works fine, it is pulsar that is not working ;-)
It is a different question then,
What the SSL connector does differently from a normal TCP connector?
Or, better, what method should I fix/modify or add in the PulsarReactor
https://github.com/quantmind/pulsar/blob/handshake/pulsar/lib/tx.py
That reactor works fine for a standard tcp echo client.




On 10 February 2013 20:56, Itamar Turner-Trauring <
itamar at futurefoundries.com> wrote:

>
>
> On Sun, Feb 10, 2013 at 11:56 AM, Luca Sbardella <luca.sbardella at gmail.com
> > wrote:
>
>
>> https://github.com/quantmind/pulsar/blob/handshake/examples/webmail/manage.py
>>
>> What am I doing wrong?
>>
>
> Have you tried a more isolated piece of test code, using only Twisted APIs
> and not pulsar's wrapper?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130210/6f98b00d/attachment.html>

From glyph at twistedmatrix.com  Sun Feb 10 18:17:27 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 10 Feb 2013 17:17:27 -0800
Subject: [Twisted-Python] imap google mail client
In-Reply-To: <CAF94-jYkAxUEyrY5jc6Ao456KMhVt6CKPPGdBAWbTA+QozuR+Q@mail.gmail.com>
References: <CAF94-jZ7N+oamEfOKeuSa1F1E08OqiNu1zO24LmRe=YS5GPCSQ@mail.gmail.com>
	<CAOp9P3oG5XyamGWY1UMT_q4Vi=qHgMQY3=C6HKu3TF+wRNDFLw@mail.gmail.com>
	<CAF94-jYkAxUEyrY5jc6Ao456KMhVt6CKPPGdBAWbTA+QozuR+Q@mail.gmail.com>
Message-ID: <44F7C7B5-2B22-4634-ADF5-58B2CD33FCC6@twistedmatrix.com>


On Feb 10, 2013, at 2:15 PM, Luca Sbardella <luca.sbardella at gmail.com> wrote:

> That works fine, it is pulsar that is not working ;-)
> It is a different question then,
> What the SSL connector does differently from a normal TCP connector?
> Or, better, what method should I fix/modify or add in the PulsarReactor
> https://github.com/quantmind/pulsar/blob/handshake/pulsar/lib/tx.py
> That reactor works fine for a standard tcp echo client.

It looks like 'run' (A) overrides the base reactor's implementation, and (B) doesn't actually run the reactor.

The Twisted reactor expects to 'own' the main loop, so you're skipping some of the initialization logic necessary to start a reactor up.  I can't say why that would affect a TLS connection specifically, but internal state will be potentially inconsistent with this reactor implementation, and it's probably a more serious underlying problem that just happens to be initially visible with your TLS connection.

-glyph

P.S.: Please don't top-post :).  https://en.wikipedia.org/wiki/Posting_style#Trimming_and_reformatting



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130210/993020b0/attachment.html>

From msc at contact.de  Mon Feb 11 07:24:44 2013
From: msc at contact.de (Michael Schlenker)
Date: Mon, 11 Feb 2013 15:24:44 +0100
Subject: [Twisted-Python] Aborting a connection attempt when HTTPS client
 detected on HTTP only server?
Message-ID: <5118FF2C.4020204@contact.de>

Hi,

I have a probably small issue i need to solve:

There is some kind of client that tries a HTTPS connection first and
falls back to HTTP if it does not work/times out, because the server
does not support SSL. (yes, i know that logic/procedure is kind of
stupid from a security point of view, but sadly i cannot change it).

When the server is proxied by Apache, this leads to immediate abortion
of the connection, but when i connect directly to the server built with
Twisted web module, it hangs until a timeout. The client in this case is
some libcurl based C++ code using the Windows SChannel SSL API.

I now want to have it fail immediately with Twisted too, instead of
waiting for the SSL layer on the client side to time out.

I found some patch that handles the inverse problem (detect HTTP to
HTTPS port):
http://twistedmatrix.com/trac/ticket/490

Is there some pre-made solution, or would i have to hook into the
connection setup of twisted.web and check the first few bytes for the
signs of an SSL Handshake signature?

Michael

-- 
Michael Schlenker
Software Architect

CONTACT Software GmbH           Tel.:   +49 (421) 20153-80
Wiener Straße 1-3               Fax:    +49 (421) 20153-41
28359 Bremen
http://www.contact.de/          E-Mail: msc at contact.de

Sitz der Gesellschaft: Bremen
Geschäftsführer: Karl Heinz Zachries, Ralf Holtgrefe
Eingetragen im Handelsregister des Amtsgerichts Bremen unter HRB 13215



From itamar at futurefoundries.com  Mon Feb 11 07:51:59 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Mon, 11 Feb 2013 09:51:59 -0500
Subject: [Twisted-Python] Aborting a connection attempt when HTTPS
 client detected on HTTP only server?
In-Reply-To: <5118FF2C.4020204@contact.de>
References: <5118FF2C.4020204@contact.de>
Message-ID: <CAOp9P3q1Yp2aiexubaphcX8j3Xh2xoFTVmQNSG+RJOj57VmnOw@mail.gmail.com>

On Mon, Feb 11, 2013 at 9:24 AM, Michael Schlenker <msc at contact.de> wrote:
>
> Is there some pre-made solution, or would i have to hook into the
> connection setup of twisted.web and check the first few bytes for the
> signs of an SSL Handshake signature?
>

Subclassing the HTTP protocol class and just adding a check in dataReceived
is probably the easiest thing to do, yes. Might be worth filing a ticket
for this as well. My guess is the logic would be something like "in
dataReceived, if you've not hit first line, and any byte is non-ASCII,
close connection", which has the nice property of being more general than
just SSL. Or perhaps check what Apache does exactly.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ — Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130211/3db74bcc/attachment.html>

From luca.sbardella at gmail.com  Mon Feb 11 16:37:10 2013
From: luca.sbardella at gmail.com (Luca Sbardella)
Date: Mon, 11 Feb 2013 23:37:10 +0000
Subject: [Twisted-Python] imap google mail client
In-Reply-To: <44F7C7B5-2B22-4634-ADF5-58B2CD33FCC6@twistedmatrix.com>
References: <CAF94-jZ7N+oamEfOKeuSa1F1E08OqiNu1zO24LmRe=YS5GPCSQ@mail.gmail.com>
	<CAOp9P3oG5XyamGWY1UMT_q4Vi=qHgMQY3=C6HKu3TF+wRNDFLw@mail.gmail.com>
	<CAF94-jYkAxUEyrY5jc6Ao456KMhVt6CKPPGdBAWbTA+QozuR+Q@mail.gmail.com>
	<44F7C7B5-2B22-4634-ADF5-58B2CD33FCC6@twistedmatrix.com>
Message-ID: <CAF94-jZ-_Baca=KE4sbWNKKWTqTTu5W9CmxzCA+XBajcyrUnow@mail.gmail.com>

>
> It looks like 'run' (A) overrides the base reactor's implementation, and
> (B) doesn't actually run the reactor.
>

Correct, that is the intention, pulsar is the driver and the PulsarReactor
is a proxy to one of pulsar event loops.

it's probably a more serious underlying problem that just happens to be
> initially visible with your TLS connection.
>

The main issue was the missing implementation of callFromThread and
callInThread. I've also switched off signal handling, threads and
scheduling, all handled by pulsar.

https://github.com/quantmind/pulsar/blob/handshake/pulsar/lib/tx.py

I'm now getting mailboxes via a websocket. Looking promising.

https://github.com/quantmind/pulsar/blob/handshake/examples/webmail/manage.py

Luca
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130211/461d3bae/attachment.html>

From glyph at twistedmatrix.com  Mon Feb 11 16:57:40 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 11 Feb 2013 15:57:40 -0800
Subject: [Twisted-Python] imap google mail client
In-Reply-To: <CAF94-jZ-_Baca=KE4sbWNKKWTqTTu5W9CmxzCA+XBajcyrUnow@mail.gmail.com>
References: <CAF94-jZ7N+oamEfOKeuSa1F1E08OqiNu1zO24LmRe=YS5GPCSQ@mail.gmail.com>
	<CAOp9P3oG5XyamGWY1UMT_q4Vi=qHgMQY3=C6HKu3TF+wRNDFLw@mail.gmail.com>
	<CAF94-jYkAxUEyrY5jc6Ao456KMhVt6CKPPGdBAWbTA+QozuR+Q@mail.gmail.com>
	<44F7C7B5-2B22-4634-ADF5-58B2CD33FCC6@twistedmatrix.com>
	<CAF94-jZ-_Baca=KE4sbWNKKWTqTTu5W9CmxzCA+XBajcyrUnow@mail.gmail.com>
Message-ID: <0F2AB9B1-8B2E-4353-ADCF-30725D0CC943@twistedmatrix.com>


On Feb 11, 2013, at 3:37 PM, Luca Sbardella <luca.sbardella at gmail.com> wrote:

> It looks like 'run' (A) overrides the base reactor's implementation, and (B) doesn't actually run the reactor.
> 
> Correct, that is the intention, pulsar is the driver and the PulsarReactor is a proxy to one of pulsar event loops.
> 
> it's probably a more serious underlying problem that just happens to be initially visible with your TLS connection.
>  
> The main issue was the missing implementation of callFromThread and callInThread. I've also switched off signal handling, threads and scheduling, all handled by pulsar.

You need the signal handling for spawnProcess, unless you want to un-implement IReactorProcess.  By all means implement it in terms of pulsar's existing support - that's the whole reason the reactor is documented in terms of abstract interfaces - but you need to implement it nonetheless :).

> https://github.com/quantmind/pulsar/blob/handshake/pulsar/lib/tx.py
> 
> I'm now getting mailboxes via a websocket. Looking promising.
> 
> https://github.com/quantmind/pulsar/blob/handshake/examples/webmail/manage.py

Cool, glad to hear this effort is progressing.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130211/a5259a1a/attachment.html>

From f at rtfs.org  Tue Feb 12 01:14:54 2013
From: f at rtfs.org (Fabian Sturm)
Date: Tue, 12 Feb 2013 09:14:54 +0100
Subject: [Twisted-Python] Passing parameters to Adapter
Message-ID: <20130212091454.74004njsbmsgnbi8@www.rtfs.org>

Dear twisted developers,

I have a sshdaemon based on sshsimpleserver.py which works great.
But I now want to pass a command line argument to the EchoProtocol.  
How can I do this? In this case I would like to pass the  
'options.test' option to my protocol.

if __name__ == '__main__':
     parser = optparse.OptionParser()
     parser.add_option('-p', '--port', action = 'store', type = 'int',  
dest = 'port', default = 1235, help = 'server port')
     parser.add_option('-t', '--test', action = 'store', type =  
'string', dest = 'test', default = '123')
     (options, args) = parser.parse_args()

     components.registerAdapter(ExampleSession, ExampleAvatar,  
session.ISession)

     [...]

     reactor.listenTCP(options.port, ExampleFactory())
     reactor.run()


Since the session instance is created by the factory, I can't seem to  
be able to pass additional args to e.g. the constructor.

Thanks a lot!
Fabian

----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.




From poalman at gmail.com  Tue Feb 12 12:30:57 2013
From: poalman at gmail.com (Paul Wiseman)
Date: Tue, 12 Feb 2013 19:30:57 +0000
Subject: [Twisted-Python] TaskStopped error,
	unsure of the cause and solution
In-Reply-To: <20130208190326.3816.1016959687.divmod.xquotient.99@localhost6.localdomain6>
References: <CACgdh2hFm80KFzDBY7sCS5XveZNX8dovo1XGt3Jt_WrJFQ7tJA@mail.gmail.com>
	<20121221180822.6389.1626477491.divmod.xquotient.354@localhost6.localdomain6>
	<CACgdh2gQy9Gp9qbqwMC6CV4J1Ti2F+=+c36cVtnrO0nceV9uWA@mail.gmail.com>
	<CACgdh2iF3q2xkT4XShQCRCctLu1cQNGtCdOkA2GRn2DfoNxQLg@mail.gmail.com>
	<20130208190326.3816.1016959687.divmod.xquotient.99@localhost6.localdomain6>
Message-ID: <CACgdh2gvAmy3uWOWH9R94Bd4s2N2opBe1+wnk33EJWshL4aXYA@mail.gmail.com>

On 8 February 2013 19:03,  <exarkun at twistedmatrix.com> wrote:
> On 03:12 pm, poalman at gmail.com wrote:
>>
>>I've still not been able to reproduce this on demand.. the least
>>amount of request I've seen before getting the error is 6500 :/
>>
>>I've also seen this stack trace which I didn't notice before
>>
>>2013-02-08 10:07:28+0000 [HTTP11ClientProtocol,client] Unhandled Error
>>        Traceback (most recent call last):
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/application/app.py",
>>line 323, in runReactorWithLogging
>>            reactor.run()
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/base.py",
>>line 1169, in run
>>            self.mainLoop()
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/base.py",
>>line 1181, in mainLoop
>>            self.doIteration(t)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/epollreactor.py",
>>line 379, in doPoll
>>            log.callWithLogger(selectable, _drdw, selectable, fd, event)
>>        --- <exception caught here> ---
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
>>line 84, in callWithLogger
>>            return callWithContext({"system": lp}, func, *args, **kw)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
>>line 69, in callWithContext
>>            return context.call({ILogContext: newCtx}, func, *args,
>>**kw)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/python/context.py",
>>line 118, in callWithContext
>>            return self.currentContext().callWithContext(ctx, func,
>>*args, **kw)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/python/context.py",
>>line 81, in callWithContext
>>            return func(*args,**kw)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/posixbase.py",
>>line 639, in _doReadOrWrite
>>            self._disconnectSelectable(selectable, why, inRead)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/posixbase.py",
>>line 258, in _disconnectSelectable
>>            selectable.readConnectionLost(f)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/tcp.py",
>>line 267, in readConnectionLost
>>            self.connectionLost(reason)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/tcp.py",
>>line 473, in connectionLost
>>            self._commonConnection.connectionLost(self, reason)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/tcp.py",
>>line 281, in connectionLost
>>abstract.FileDescriptor.connectionLost(self, reason)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/abstract.py",
>>line 182, in connectionLost            self.producer.stopProducing()
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/client.py",
>>line 760, in stopProducing            self._task.stop()
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/task.py",
>>line 460, in stop            self._completeWith(TaskStopped(),
>>Failure(TaskStopped()))
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/task.py",
>>line 439, in _completeWith
>>self._cooperator._removeTask(self)
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/task.py",
>>line 578, in _removeTask            self._delayedCall.cancel()
>>          File "/usr/local/lib/python2.7/dist-
>>packages/Twisted-12.2.0-py2.7-linux-
>>x86_64.egg/twisted/internet/base.py",
>>line 89, in cancel
>>            raise error.AlreadyCalled
>>        twisted.internet.error.AlreadyCalled: Tried to cancel an
>>already-called event.
>>
>>I'll keep trying to work out the issue, any suggestions on what I
>>might try to reproduce it or guesses at causes?
>
> Since it seems to be related to handling of lost connections, you may be
> able to reproduce it more easily if you issue your requests to an HTTP
> server which drops connections more often.  Presumably the production
> service you're issuing requests too tries pretty hard to properly serve
> responses to every request.  If you point `Agent` at a worse HTTP server
> (eg, one you write using twisted.web and implement to close connections
> prematurely at various points during the response) this may produce the
> issue more quickly.
>
> You could also try hooking `Agent` up to one of the in-memory
> reactors/transports.  The advantage of this is that it will be much
> easier to "close" the connection at a specific point
> (deterministically).  The disadvantage is that the in-memory
> reactor/transport may not exactly replicate the real reactor/transport
> behavior and so fail to reproduce the issue entirely.
>
> Jean-Paul
>

Hey, I'm more and more sure it's the PUT request, and I think you're
right it is likely to do with the server that I'm putting to (Google
Cloud Storage) doing something odd occasionally.

I'm trying to reproduce it with a small twisted client and server,
using a PUT request to send to the server but I can't seem to close
the connection uncleanly. How would you recommend I do that? I've
tried adding request.finish() on a callLater but that seems to finish
the connection in a clean way. How can I close the connection in the
way you suggest?

Also I put a bit in FileBodyProducer that looks at the stack when the
error starts to see where it was being called from, but it didn't help
me too much. This is the stack anyway

  File "/usr/local/bin/twistd", line 5, in <module>
    pkg_resources.run_script('Twisted==12.2.0', 'twistd')
  File "/usr/lib/python2.7/dist-packages/pkg_resources.py", line 499,
in run_script
    self.require(requires)[0].run_script(script_name, ns)
  File "/usr/lib/python2.7/dist-packages/pkg_resources.py", line 1235,
in run_script
    execfile(script_filename, namespace, namespace)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/EGG-INFO/scripts/twistd",
line 14, in <module>
    run()
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/scripts/twistd.py",
line 27, in run
    app.run(runApp, ServerOptions)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/application/app.py",
line 652, in run
    runApp(config)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/scripts/twistd.py",
line 23, in runApp
    _SomeApplicationRunner(config).run()
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/application/app.py",
line 390, in run
    self.postApplication()
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/scripts/_twistd_unix.py",
line 231, in postApplication
    self.startReactor(None, self.oldstdout, self.oldstderr)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/application/app.py",
line 402, in startReactor
    self.config, oldstdout, oldstderr, self.profiler, reactor)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/application/app.py",
line 323, in runReactorWithLogging
    reactor.run()
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/base.py",
line 1169, in run
    self.mainLoop()
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/base.py",
line 1181, in mainLoop
    self.doIteration(t)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/epollreactor.py",
line 379, in doPoll
    log.callWithLogger(selectable, _drdw, selectable, fd, event)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
line 84, in callWithLogger
    return callWithContext({"system": lp}, func, *args, **kw)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/log.py",
line 69, in callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/context.py",
line 118, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/python/context.py",
line 81, in callWithContext
    return func(*args,**kw)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/posixbase.py",
line 639, in _doReadOrWrite
    self._disconnectSelectable(selectable, why, inRead)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/posixbase.py",
line 258, in _disconnectSelectable
    selectable.readConnectionLost(f)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/tcp.py",
line 267, in readConnectionLost
    self.connectionLost(reason)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/tcp.py",
line 473, in connectionLost
    self._commonConnection.connectionLost(self, reason)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/tcp.py",
line 287, in connectionLost
    protocol.connectionLost(reason)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/internet/endpoints.py",
line 99, in connectionLost
    return self._wrappedProtocol.connectionLost(reason)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/_newclient.py",
line 859, in dispatcher
    return func(*args, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/_newclient.py",
line 1458, in _connectionLost_TRANSMITTING
    self._currentRequest.stopWriting()
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/_newclient.py",
line 760, in stopWriting
    _callAppFunction(self.bodyProducer.stopProducing)
  File "/usr/local/lib/python2.7/dist-packages/Twisted-12.2.0-py2.7-linux-x86_64.egg/twisted/web/_newclient.py",
line 191, in _callAppFunction
    function()
  File "main.tac", line 65, in stopProducing
    log_stack()
  File "main.tac", line 55, in log_stack
    stack_trace = traceback.format_stack(frame)


> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From itamar at futurefoundries.com  Tue Feb 12 13:47:20 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Tue, 12 Feb 2013 15:47:20 -0500
Subject: [Twisted-Python] TaskStopped error,
	unsure of the cause and solution
In-Reply-To: <CACgdh2gvAmy3uWOWH9R94Bd4s2N2opBe1+wnk33EJWshL4aXYA@mail.gmail.com>
References: <CACgdh2hFm80KFzDBY7sCS5XveZNX8dovo1XGt3Jt_WrJFQ7tJA@mail.gmail.com>
	<20121221180822.6389.1626477491.divmod.xquotient.354@localhost6.localdomain6>
	<CACgdh2gQy9Gp9qbqwMC6CV4J1Ti2F+=+c36cVtnrO0nceV9uWA@mail.gmail.com>
	<CACgdh2iF3q2xkT4XShQCRCctLu1cQNGtCdOkA2GRn2DfoNxQLg@mail.gmail.com>
	<20130208190326.3816.1016959687.divmod.xquotient.99@localhost6.localdomain6>
	<CACgdh2gvAmy3uWOWH9R94Bd4s2N2opBe1+wnk33EJWshL4aXYA@mail.gmail.com>
Message-ID: <CAOp9P3qMHyi0=qmmR4g_5Ljy1v96W3=WtjQYbTtCEP7dZEoTiA@mail.gmail.com>

On Tue, Feb 12, 2013 at 2:30 PM, Paul Wiseman <poalman at gmail.com> wrote:

>
>
> I'm trying to reproduce it with a small twisted client and server,
> using a PUT request to send to the server but I can't seem to close
> the connection uncleanly. How would you recommend I do that? I've
> tried adding request.finish() on a callLater but that seems to finish
> the connection in a clean way. How can I close the connection in the
> way you suggest?
>

Maybe don't even go with real HTTP server, but something like:

class HTTP(Protocol):
    def connectionMade(self):
        time.sleep(1)
        self.transport.write("HTTP/1.0 200 OK\r\nContent-Length: 300000:
\r\n\r\n")
        self.transport.loseConnection()

Or some variation on that, where you can control exactly where things break.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ — Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130212/3dc74980/attachment-0001.html>

From sk82712 at gmail.com  Sat Feb 16 14:09:09 2013
From: sk82712 at gmail.com (Adam Heller)
Date: Sat, 16 Feb 2013 22:09:09 +0100
Subject: [Twisted-Python] Building a TCP server, having issues
Message-ID: <CAO6nAyOZn6mQ=ahf_ic-OFnNm9kJR5A0vnU+6mJojLYM6Suacw@mail.gmail.com>

Guys,
I'll try to be as exact as I can be with my question, but it may end up
being pretty broad. (I'm also relatively new to python, please go easy on
my code although suggestions are of course welcome.)

The issue I'm running into:
When a user connects to the TCP server, they are displayed a welcome menu
of things they can do. I'm simply catching the 'data' in an if statement to
determine which menu item was picked.  The problem is that some of the menu
items require further input.  I've had to use a series of bools to
determine if a certain menu option was previously picked that will then
directly send the data into the function / class.  Is there an easier way
to go about this? My current method seems a bit backwards and over
complicated.  I'm thinking I missed something in the documentation.

Anyway, here's the code: https://infotomb.com/q4293 // Pass: twisted

(it was part of a challenge, so to speak, don't take too much out of
context)

You can see I had trouble with next() and dh().  I'm now trying to move
this TCP 'framework' over to another project (the above was already
submitted), and I'm still running into the same issues.

Thoughts?

-A
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130216/3944661b/attachment.html>

From glyph at twistedmatrix.com  Sat Feb 16 15:53:41 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 16 Feb 2013 14:53:41 -0800
Subject: [Twisted-Python] Building a TCP server, having issues
In-Reply-To: <CAO6nAyOZn6mQ=ahf_ic-OFnNm9kJR5A0vnU+6mJojLYM6Suacw@mail.gmail.com>
References: <CAO6nAyOZn6mQ=ahf_ic-OFnNm9kJR5A0vnU+6mJojLYM6Suacw@mail.gmail.com>
Message-ID: <CB37BBD7-8438-4E1B-A266-923438FD0A74@twistedmatrix.com>


On Feb 16, 2013, at 1:09 PM, Adam Heller <sk82712 at gmail.com> wrote:

> Guys,
> I'll try to be as exact as I can be with my question, but it may end up being pretty broad. (I'm also relatively new to python, please go easy on my code although suggestions are of course welcome.)

The main suggestion is "you can't parse TCP like this" :).  You'll have this problem: <http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith>

> The issue I'm running into:
> When a user connects to the TCP server, they are displayed a welcome menu of things they can do. I'm simply catching the 'data' in an if statement to determine which menu item was picked.  The problem is that some of the menu items require further input.  I've had to use a series of bools to determine if a certain menu option was previously picked that will then directly send the data into the function / class.  Is there an easier way to go about this? My current method seems a bit backwards and over complicated.  I'm thinking I missed something in the documentation.

> Anyway, here's the code: https://infotomb.com/q4293 // Pass: twisted

You should really attach the code itself to the email, so that future readers of the archive have some idea what you're talking about.  Pastebins in general are not great, since the code will expire before your archived message does, and pastebins with passwords (!?) are even worse.

> (it was part of a challenge, so to speak, don't take too much out of context)
> 
> You can see I had trouble with next() and dh().  I'm now trying to move this TCP 'framework' over to another project (the above was already submitted), and I'm still running into the same issues.

You should try separating out your concerns a bit.  The protocol should just parse the bytes into something meaningful, then call methods on some other, higher-level object that isn't just manipulating strings.

The "other, higher-level object" in your case might be a state machine of some kind, or you might just have an object representing the mode that you're currently in and switch that out for different modes.

This isn't an issue with Twisted though; Twisted just calls some methods on your objects in order to tell you what happened; what happens next is up to you.  So it's a general program architecture issue.

This is very general advice, obviously, because I'm not sure what you are specifically asking, nor what your program is really intended to do.  What kind of client is talking to this system?  Did you invent the protocol yourself, or did it come from somewhere else?  What is 'dh()' even trying to accomplish?  Etc, etc.


-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130216/ff09b772/attachment.html>

From sk82712 at gmail.com  Sat Feb 16 18:09:22 2013
From: sk82712 at gmail.com (Adam Heller)
Date: Sun, 17 Feb 2013 02:09:22 +0100
Subject: [Twisted-Python] Building a TCP server, having issues
In-Reply-To: <CB37BBD7-8438-4E1B-A266-923438FD0A74@twistedmatrix.com>
References: <CAO6nAyOZn6mQ=ahf_ic-OFnNm9kJR5A0vnU+6mJojLYM6Suacw@mail.gmail.com>
	<CB37BBD7-8438-4E1B-A266-923438FD0A74@twistedmatrix.com>
Message-ID: <CAO6nAyMxK4xiAt=jTARmy68ssa9dUFN-ReQXe=goFTkGG+NLxA@mail.gmail.com>

Glyph,

I will definately look into that.  As far as the server spec, it's over TOR
(This part of the 'competition' has since closed, but feel free to catch
up: http://uncovering-cicada.wikia.com/wiki/Uncovering_Cicada_Wiki and
http://mentalfloss.com/article/31932/chasing-cicada-exploring-darkest-corridors-internet(from
last year's 3301).  I'm simply trying to do the python thing and move
classes around instead of trying to reinvent the wheel [dh() is a
rudimentary Diffie Helman key exchange] : "

In the programming language of your choice build a TCP server
that implements the protocol below. The server code must be written by you
and you alone, although you are free to use any modules or libraries
publicly available for the selected programming language. Once you have
done this, make it accessible as a Tor hidden service. Then provide us with
the onion address and port via a GPG-encrypted email to this address. You
have until 0:00 UTC on 3 Feb, 2013. Any emails received after that time
will be ignored. Good luck. 3301
==================================================================== 1.
INTRODUCTION The TCP server MUST listen on an arbitrary port, and send and
receive plain text with lines separated by <CRLF> (representing a carriage
return followed by a line feed). The TCP server MUST disregard the case of
input. In the examples below, lines sent by the server will be preceded
with "S:" and lines sent by the client will be preceded by "C:" Each
message sent by the server MUST conform to the format: [CODE] [RESPONSE
NAME] [RESPONSE (optional)]<CRLF> Where [CODE] and [RESPONSE NAME] is one
of: CODE RESPONSE NAME 00 Welcome 01 Ok 02 Error 03 Data 99 Goodbye 2.
PROCEDURES a. Remote Connection Upon receiving a remote connection, the
server MUST greet the client with a 00 WELCOME message. The RESPONSE of a
welcome message MAY contain arbitrary text. The arbitrary text MUST at the
very least contain the name of the programming language used to implement
the server. Upon receiving a 00 WELCOME message, the client may begin
initiating procedures. Example: S: 00 WELCOME [ARBITRARY RESPONSE
TEXT]<CRLF> b. RAND [n] Upon receiving a "RAND" request by the client, the
server will first send a 01 OK response, and will then provide the client
with [n] cryptographically random numbers within the range of 0-255. Each
number MUST be followed by <CRLF>. After the last number has been sent, the
server MUST send a dot (.) on a line by itself. Example: C: RAND 3<CRLF> S:
01 OK<CRLF> S: [first random number]<CRLF> S: [second random number]<CRLF>
S: [third random number]<CRLF> S: .<CRLF> c. QUINE Upon receiving a "QUINE"
request by the client, the server will first send a 01 OK response, and
will then provide the client with a quine in the programming language used
to implement the server. This quine does not have to be original. After the
last line of code has been sent, the server MUST send a dot (.) on a line
by itself. Example: C: QUINE<CRLF> S: 01 OK<CRLF> S: [quine code]<CRLF> S:
.<CRLF> d. BASE29 [n] Upon receiving a "BASE29" request by the client, the
server will send a 01 OK response followed by the number [n] converted into
its base 29 representation. Example: C: BASE29 3301<CRLF> S: 01 OK
3QO<CRLF> e. CODE Upon receiving a "CODE" request by the client, the server
will send a 01 OK response followed by its own source code. After the last
line of code has been sent, the server MUST send a dot(.) on a line by
itself. Example: C: CODE<CRLF> S: 01 OK<CRLF> S: [Server Source Code]<CRLF>
s: .<CRLF> f. KOAN Upon receiving a "KOAN" request by the client, the
server will send a 01 OK response followed by a koan. After the last line
of the koan, the server MUST send a dot (.) on a line by itself. Example:
C: KOAN<CRLF> S: 01 OK<CRLF> S: A master who lived as a hermit on a
mountain was asked by a<CRLF> S: monk, "What is the Way?<CRLF> S: "What a
fine mountain this is," the master said in reply<CRLF> S: "I am not asking
you about the mountain, but about the Way.<CRLF> S: "So long as you cannot
go beyond the mountain, my son, you<CRLF> S: cannot reach the Way," replied
the master<CRLF> S: . g. DH [p] Upon receiving a "DH" request by the
client, the server will proceed to perform a Diffie-Hellman key exchange
using [p] as the prime modulus. The server will then select a base [b] to
use in the protocol, as well as its secret integer. The server will then
compute its exponent result [e] as specified within the Diffie-Hellman key
exchange protocol. The server MUST then respond with a 01 OK response
followed by the selected base [b] and computed exponent [e] separated by
white space. The client MUST respond with its exponent result [e2], and the
client and server will follow the rest of the Diffie-Hellman key exchange
protocol. The server MUST then compute the resulting secret key, and
provide it using 03 DATA [k]. Example: C: DH 23<CRLF> S: 01 OK 5 8<CRLF> C:
19<CRLF> S: 03 DATA 2<CRLF> j. NEXT Upon receiving a "NEXT" request by the
client, the server will respond with 01 OK and then listen for text data to
be provided by the client. The client will send a dot (.) on a line by
itself after the last line of text. The server MUST record this. This data
will be the next set of instructions. Once the data is received the server
will respond with 01 OK. Example: C: NEXT<CRLF> S: 01 OK<CRLF> C:
-----BEGIN PGP SIGNED MESSAGE-----<CRLF> C: [MESSAGE CONTENTS]<CRLF> C:
-----END PGP SIGNATURE-----<CRLF> C: .<CRLF> S: 01 OK<CRLF> i. GOODBYE Upon
receiving a "DH" request by the client, the server MUST respond with 99
GOODBYE and then gracefully close the connection. Example: C: GOODBYE<CRLF>
S: 99 GOODBYE<CRLF>
===================================================================="


>From a signed GPG message.


On Sat, Feb 16, 2013 at 11:53 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Feb 16, 2013, at 1:09 PM, Adam Heller <sk82712 at gmail.com> wrote:
>
> Guys,
> I'll try to be as exact as I can be with my question, but it may end up
> being pretty broad. (I'm also relatively new to python, please go easy on
> my code although suggestions are of course welcome.)
>
>
> The main suggestion is "you can't parse TCP like this" :).  You'll have
> this problem: <
> http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith
> >
>
> The issue I'm running into:
> When a user connects to the TCP server, they are displayed a welcome menu
> of things they can do. I'm simply catching the 'data' in an if statement to
> determine which menu item was picked.  The problem is that some of the menu
> items require further input.  I've had to use a series of bools to
> determine if a certain menu option was previously picked that will then
> directly send the data into the function / class.  Is there an easier way
> to go about this? My current method seems a bit backwards and over
> complicated.  I'm thinking I missed something in the documentation.
>
>
> Anyway, here's the code: https://infotomb.com/q4293 // Pass: twisted
>
>
> You should really attach the code itself to the email, so that future
> readers of the archive have some idea what you're talking about.  Pastebins
> in general are not great, since the code will expire before your archived
> message does, and pastebins with passwords (!?) are even worse.
>
> (it was part of a challenge, so to speak, don't take too much out of
> context)
>
> You can see I had trouble with next() and dh().  I'm now trying to move
> this TCP 'framework' over to another project (the above was already
> submitted), and I'm still running into the same issues.
>
>
> You should try separating out your concerns a bit.  The protocol should
> just parse the bytes into something meaningful, then call methods on some
> other, higher-level object that isn't just manipulating strings.
>
> The "other, higher-level object" in your case might be a state machine of
> some kind, or you might just have an object representing the mode that
> you're currently in and switch that out for different modes.
>
> This isn't an issue with Twisted though; Twisted just calls some methods
> on your objects in order to tell you what happened; what happens next is up
> to you.  So it's a general program architecture issue.
>
> This is very general advice, obviously, because I'm not sure what you are
> specifically asking, nor what your program is really intended to do.  What
> kind of client is talking to this system?  Did you invent the protocol
> yourself, or did it come from somewhere else?  What is 'dh()' even trying
> to accomplish?  Etc, etc.
>
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130217/97c3f65c/attachment.html>

From exarkun at twistedmatrix.com  Sat Feb 16 22:05:25 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 Feb 2013 05:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1361077525.08.553445036@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130217/fd21100d/attachment-0001.html>

From p.mayers at imperial.ac.uk  Mon Feb 18 01:55:40 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 18 Feb 2013 08:55:40 +0000
Subject: [Twisted-Python] Building a TCP server, having issues
In-Reply-To: <CAO6nAyMxK4xiAt=jTARmy68ssa9dUFN-ReQXe=goFTkGG+NLxA@mail.gmail.com>
References: <CAO6nAyOZn6mQ=ahf_ic-OFnNm9kJR5A0vnU+6mJojLYM6Suacw@mail.gmail.com>
	<CB37BBD7-8438-4E1B-A266-923438FD0A74@twistedmatrix.com>
	<CAO6nAyMxK4xiAt=jTARmy68ssa9dUFN-ReQXe=goFTkGG+NLxA@mail.gmail.com>
Message-ID: <5121EC8C.3040307@imperial.ac.uk>

On 02/17/2013 01:09 AM, Adam Heller wrote:
> Glyph,
>
> I will definately look into that.  As far as the server spec, it's over
> TOR (This part of the 'competition' has since closed, but feel free to
> catch up: http://uncovering-cicada.wikia.com/wiki/Uncovering_Cicada_Wiki
> and
> http://mentalfloss.com/article/31932/chasing-cicada-exploring-darkest-corridors-internet
> (from last year's 3301).  I'm simply trying to do the python thing and
> move classes around instead of trying to reinvent the wheel [dh() is a
> rudimentary Diffie Helman key exchange] : "
>
> In the programming language of your choice build a TCP server
> that implements the protocol below. The server code must be written by
> you and you alone, although you are free to use any modules or libraries
> publicly available for the selected programming language. Once you have
> done this, make it accessible as a Tor hidden service. Then provide us
> with the onion address and port via a GPG-encrypted email to this
> address. You have until 0:00 UTC on 3 Feb, 2013. Any emails received
> after that time will be ignored. Good luck. 3301
> ==================================================================== 1.
> INTRODUCTION The TCP server MUST listen on an arbitrary port, and send
> and receive plain text with lines separated by <CRLF>

Glyph has already mentioned the buffering and state machine options, but 
since it's a line-based protocol, you chould also look at 
t.p.basic.LineReceiver:

http://twistedmatrix.com/documents/current/api/twisted.protocols.basic.LineReceiver.html

...which does the buffering for you and calls a method with full 
"lines". You may want to look at the source for that class' dataReceived 
method, for an example of how it does the buffering Glyph talks about.

There are other examples of doing state machine dispatch in the Twisted 
sources, but it's a pretty simple technique - set a "state" variable, 
and a big if/then clause (or, for performance, a dict of state->handler)



From akersof at gmail.com  Mon Feb 18 05:46:42 2013
From: akersof at gmail.com (Sofiane Akermoun)
Date: Mon, 18 Feb 2013 13:46:42 +0100
Subject: [Twisted-Python] Building a TCP server, having issues
In-Reply-To: <5121EC8C.3040307@imperial.ac.uk>
References: <CAO6nAyOZn6mQ=ahf_ic-OFnNm9kJR5A0vnU+6mJojLYM6Suacw@mail.gmail.com>
	<CB37BBD7-8438-4E1B-A266-923438FD0A74@twistedmatrix.com>
	<CAO6nAyMxK4xiAt=jTARmy68ssa9dUFN-ReQXe=goFTkGG+NLxA@mail.gmail.com>
	<5121EC8C.3040307@imperial.ac.uk>
Message-ID: <CAN0_x-+jGJEX4jJ6Kx0bq+UR5E=7TXxByPpbnHvRS7yEErJWjg@mail.gmail.com>

Hello,

As wrote Phil Mayers LinReceiver is a nice protocol helpers for you.
All the commands use a CRLF delimiter and for your logic it is easy to
know when a command is fully received or if you need to wait for more
data.
As wrote Glyph dataReceived (or lineReceived) Should only use to
received data, sanitize them like gather the command name, and the
arguments, and pass it to another big function named handleCommand
that will use the big if/else condition to know what to do.

regards,

Sofiane Akermoun

2013/2/18 Phil Mayers <p.mayers at imperial.ac.uk>:
> On 02/17/2013 01:09 AM, Adam Heller wrote:
>> Glyph,
>>
>> I will definately look into that.  As far as the server spec, it's over
>> TOR (This part of the 'competition' has since closed, but feel free to
>> catch up: http://uncovering-cicada.wikia.com/wiki/Uncovering_Cicada_Wiki
>> and
>> http://mentalfloss.com/article/31932/chasing-cicada-exploring-darkest-corridors-internet
>> (from last year's 3301).  I'm simply trying to do the python thing and
>> move classes around instead of trying to reinvent the wheel [dh() is a
>> rudimentary Diffie Helman key exchange] : "
>>
>> In the programming language of your choice build a TCP server
>> that implements the protocol below. The server code must be written by
>> you and you alone, although you are free to use any modules or libraries
>> publicly available for the selected programming language. Once you have
>> done this, make it accessible as a Tor hidden service. Then provide us
>> with the onion address and port via a GPG-encrypted email to this
>> address. You have until 0:00 UTC on 3 Feb, 2013. Any emails received
>> after that time will be ignored. Good luck. 3301
>> ==================================================================== 1.
>> INTRODUCTION The TCP server MUST listen on an arbitrary port, and send
>> and receive plain text with lines separated by <CRLF>
>
> Glyph has already mentioned the buffering and state machine options, but
> since it's a line-based protocol, you chould also look at
> t.p.basic.LineReceiver:
>
> http://twistedmatrix.com/documents/current/api/twisted.protocols.basic.LineReceiver.html
>
> ...which does the buffering for you and calls a method with full
> "lines". You may want to look at the source for that class' dataReceived
> method, for an example of how it does the buffering Glyph talks about.
>
> There are other examples of doing state machine dispatch in the Twisted
> sources, but it's a pretty simple technique - set a "state" variable,
> and a big if/then clause (or, for performance, a dict of state->handler)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
Sofiane AKERMOUN
akersof at gmail.com



From pierre at jaury.eu  Fri Feb 22 08:40:05 2013
From: pierre at jaury.eu (Pierre Jaury)
Date: Fri, 22 Feb 2013 16:40:05 +0100
Subject: [Twisted-Python] Inline callbacks: generating the same Deferred at
	multiple places
Message-ID: <51279155.1070709@jaury.eu>

Hey everyone,

First of all, I am a french developer mostly dealing with security
matters, I have been a Twisted enthusiast for a couple of years now and
have been hacking around with Twisted for the very last couple of months.

I am aware that Deferred-related classes are very stable nowadays and
that such a change does not stand half a chance to get anywhere. Anyway,
Twisted behavior kind of annoys me when it comes to inline callback
management.

Indeed, the gotResult function used when generating Deferred objects
from a function decorated with inlineCallbacks currently looks like:

            def gotResult(r):
                if waiting[0]:
                    waiting[0] = False
                    waiting[1] = r
                else:
                    _inlineCallbacks(r, g, deferred)

So far the function does not return anything explicitely, thus following
callbacks get a very nice `None` as first argument. This is not so
annoying when using inline callbacks with very simple and
straightforward cases as advised by Twisted documentation. Anyway, when
generating the same Deferred object from multiple
inlineCallbacks-decorated functions, one would expect every `yield`
statement to return the same value.

As a matter of fact, this is not the case (the first generation of the
Deferred object will return its actual current state but later
generations will return `None`). Because a Deferred object generation
from an inlineCallbacks-decorated function does not allow for anything
but waiting for the Deferred object to fire and returning its state, it
would probably not harm to forward this state to the next callback as
well. Something like:


            def gotResult(r):
                if waiting[0]:
                    waiting[0] = False
                    waiting[1] = r
                else:
                    _inlineCallbacks(r, g, deferred)
                return r

would probably do the trick and allow for complex scenarios where the
same Deferred object is generated multiple times by different functions
before being fired.

As I am not an accomplished Twisted hacker, I cannot say if this kind of
change would harm or break any code out there. Yet it seems to me that
according to inlineCallbacks behavior, it is very unlikely to have any
consequence at all but improving (extending at least) inlineCallbacks
behavior.

Am I so wrong? (I would very much like someone to point out the one huge
detail I completely forgot before I make this change by monkey patching
and submit a feature request :)

Regards,
Pierre.

-- 
Pierre Jaury <pierre at jaury.eu>
Weblog - http://kaiyou.fr
GPG ID - E804FB60

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20130222/2e9aed4c/attachment.sig>

From radix at twistedmatrix.com  Fri Feb 22 09:30:34 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 22 Feb 2013 10:30:34 -0600
Subject: [Twisted-Python] Inline callbacks: generating the same Deferred
 at multiple places
In-Reply-To: <51279155.1070709@jaury.eu>
References: <51279155.1070709@jaury.eu>
Message-ID: <CAPkRfUTjKGum3vn6SAyNPyHu4YGFL42xcNTuGDijjWU+BidPkA@mail.gmail.com>

On Fri, Feb 22, 2013 at 9:40 AM, Pierre Jaury <pierre at jaury.eu> wrote:

> Hey everyone,
> As a matter of fact, this is not the case (the first generation of the
> Deferred object will return its actual current state but later
> generations will return `None`). Because a Deferred object generation
> from an inlineCallbacks-decorated function does not allow for anything
> but waiting for the Deferred object to fire and returning its state, it
> would probably not harm to forward this state to the next callback as
> well. Something like:
> ...
>
would probably do the trick and allow for complex scenarios where the
> same Deferred object is generated multiple times by different functions
> before being fired.
>
> As I am not an accomplished Twisted hacker, I cannot say if this kind of
> change would harm or break any code out there. Yet it seems to me that
> according to inlineCallbacks behavior, it is very unlikely to have any
> consequence at all but improving (extending at least) inlineCallbacks
> behavior.
>

I think it's a reasonable change to make, and I don't foresee any problems
with it, so I think it's fine to submit a bug about it. But I do question
the architecture that needs to make use of it. I would probably avoid
scenarios like that in my own code.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130222/c529e74d/attachment.html>

From glyph at twistedmatrix.com  Fri Feb 22 13:17:52 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 22 Feb 2013 12:17:52 -0800
Subject: [Twisted-Python] Inline callbacks: generating the same Deferred
	at multiple places
In-Reply-To: <CAPkRfUTjKGum3vn6SAyNPyHu4YGFL42xcNTuGDijjWU+BidPkA@mail.gmail.com>
References: <51279155.1070709@jaury.eu>
	<CAPkRfUTjKGum3vn6SAyNPyHu4YGFL42xcNTuGDijjWU+BidPkA@mail.gmail.com>
Message-ID: <789C5390-E617-45C8-909E-A3DD9266E2A8@twistedmatrix.com>


On Feb 22, 2013, at 8:30 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> I think it's a reasonable change to make, and I don't foresee any problems with it, so I think it's fine to submit a bug about it. But I do question the architecture that needs to make use of it. I would probably avoid scenarios like that in my own code.

I disagree; the behavior of result consumption is intentional - although it could be better documented.  Changing it would very definitely be incompatible (<http://twistedmatrix.com/trac/wiki/CompatibilityPolicy>); this is possible, of course, if the deprecation/migration is worth it, but the behavior being requested here would be worse in a number of ways.

If we re-populated the result, every failed Deferred yielded by an inlineCallbacks function would log its traceback twice: once when the unhandled exception propagated out of the inlineCallbacks function causing its Deferred to fail, and once when the unhandled exception propagated from the yielded Deferred itself, since nothing would have consumed it when that Deferred would be GC'd.

Speaking of GC, similarly, any large objects in Deferred results processed by inlineCallbacks functions would live longer, and continue participating in any reference cycles they're part of, possibly causing memory leaks, or at least, longer collection times and less favorable memory usage behavior, especially in long-lived processes.

Basically, you can't treat a Deferred as an event broadcaster.  It isn't one.  It's a single-shot representation of an asynchronous result, which a single consumer can consume with its current value, possibly yielding a new value.  Some consumers can be diligent about not modifying the Deferred's state, so that it can be passed on down the chain, but inlineCallbacks can never be such a consumer: since each inlineCallbacks-decorated function generates its own Deferred return value, it is naturally the terminal consumer of any Deferreds that it yields, and should clear out their results.

Ultimately, _every_ Deferred ought to have a terminal consumer, that takes the result and does useful work with it - persists it, shows it in some UI to a user - rather than continuing to pass it along.  Since 'yield x' is not sufficiently expressive to say what else to do with 'x' and what state to leave it in, we must assume that the intention of a coroutine is to take the value and do some work with it.  Any inlineCallbacks function which wants to express its intent more precisely can do this, instead:

    def fork(d):
        d2 = Deferred()
        def fire(x):
            d2.callback(x)
            return x
        d.addBoth(fire)
        return d2

    @inlineCallbacks
    def foo():
        result = yield fork(somethingAsync())

Maybe putting that function in Twisted (this is not the first time it's come up) would be a useful addition.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130222/d5e8a29f/attachment-0001.html>

From pierre at jaury.eu  Sat Feb 23 04:23:56 2013
From: pierre at jaury.eu (Pierre Jaury)
Date: Sat, 23 Feb 2013 12:23:56 +0100
Subject: [Twisted-Python] Inline callbacks: generating the same Deferred
 at multiple places
In-Reply-To: <789C5390-E617-45C8-909E-A3DD9266E2A8@twistedmatrix.com>
References: <51279155.1070709@jaury.eu>
	<CAPkRfUTjKGum3vn6SAyNPyHu4YGFL42xcNTuGDijjWU+BidPkA@mail.gmail.com>
	<789C5390-E617-45C8-909E-A3DD9266E2A8@twistedmatrix.com>
Message-ID: <5128A6CC.9030905@jaury.eu>

On 02/22/2013 09:17 PM, Glyph wrote:
> 
> On Feb 22, 2013, at 8:30 AM, Christopher Armstrong
> <radix at twistedmatrix.com <mailto:radix at twistedmatrix.com>> wrote:
> 
>> I think it's a reasonable change to make, and I don't foresee any
>> problems with it, so I think it's fine to submit a bug about it. But I
>> do question the architecture that needs to make use of it. I would
>> probably avoid scenarios like that in my own code.
> 
> I disagree; the behavior of result consumption is intentional - although
> it could be better documented.  Changing it would very definitely be
> incompatible (<http://twistedmatrix.com/trac/wiki/CompatibilityPolicy>);
> this is possible, of course, if the deprecation/migration is worth it,
> but the behavior being requested here would be worse in a number of ways.

Well, some criticism, now I am listening to you.

> If we re-populated the result, every failed Deferred yielded by an
> inlineCallbacks function would log its traceback twice: once when the
> unhandled exception propagated out of the inlineCallbacks function
> causing its Deferred to fail, and once when the unhandled exception
> propagated from the yielded Deferred itself, since nothing would have
> consumed it when that Deferred would be GC'd.

Well, this simply means that the change is not that simple to make and
would probably imply some deeper modifications. I can see how this kills
any hope to get the change merged into anything stable anytime soon however.

> Speaking of GC, similarly, any large objects in Deferred results
> processed by inlineCallbacks functions would live longer, and continue
> participating in any reference cycles they're part of, possibly causing
> memory leaks, or at least, longer collection times and less favorable
> memory usage behavior, especially in long-lived processes.

But.. I definitely agree with this one, which I did not foresee. I
therefore agree that any change in Deferred objects behavior should
never enforce references to live longer when not usually required.

> Basically, you can't treat a Deferred as an event broadcaster.  It isn't
> one.  It's a single-shot representation of an asynchronous result, which
> a single consumer can consume with its current value, possibly yielding
> a new value.

That I figured out already. Thanks for the reminder anyway, I was on the
path of loosing myself, there :)

> Any
> inlineCallbacks function which wants to express its intent more
> precisely can do this, instead:
> 
>     def fork(d):
>         d2 = Deferred()
>         def fire(x):
>             d2.callback(x)
>             return x
>         d.addBoth(fire)
>         return d2
> 
>     @inlineCallbacks
>     def foo():
>         result = yield fork(somethingAsync())

I will embed this one in my bundle of Twisted utility functions. Thanks!

> Maybe putting that function in Twisted (this is not the first time it's
> come up) would be a useful addition.

Agreed, then.

-- 
Pierre Jaury <pierre at jaury.eu>
Weblog - http://kaiyou.fr
GPG ID - E804FB60

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20130223/98f27489/attachment.sig>

From exarkun at twistedmatrix.com  Sat Feb 23 22:05:26 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Feb 2013 05:05:26 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1361682326.52.1777523205@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130224/56128b45/attachment-0001.html>

From sergun at gmail.com  Sun Feb 24 09:23:14 2013
From: sergun at gmail.com (Sergey Gerasimov)
Date: Sun, 24 Feb 2013 20:23:14 +0400
Subject: [Twisted-Python] combine local and remote calls in perspective
	brokers
Message-ID: <04ce01ce12ab$403fe580$c0bfb080$@gmail.com>

Hello to all!

 

I'm using PB as communication protocol for components of my system.

Components can be located locally on the only one machine or in distributed
fashion. It depends on the config file.

 

At the moment all communications are implemented as callRemote calls. I
would like to keep this unified way of communication but make inter-machine
calls as efficient as possible. What is the best way to do that?

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130224/bc38ac64/attachment.html>

From wenxiang at zopim.com  Sun Feb 24 17:22:28 2013
From: wenxiang at zopim.com (Wenxiang Wu)
Date: Sun, 24 Feb 2013 16:22:28 -0800
Subject: [Twisted-Python] Unable to write to "stuck" TCP client connections
Message-ID: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>

Hi,

I am encountering a weird bug, where some TCP client connections get into a
state where the server is able to read data sent from the client, but not
able to send any data with transport.write().

With some help from the #twitsed IRC channel, I was able to gather the
following information regarding the bug. While I'm still unable to provide
steps to reporduce this bug, I am able to reliably find clients who are in
this state. I am running 24 instances of the twisted server (Epoll reactor)
running on Ubuntu, with a peak traffic of >130k users. At any instance,
there are < 20 TCP connections stuck in this state.

Here is some information about the bug:

1. transport.write() does not send anything down the socket
2. transport.doWrite() will send all the data that has been buffered up,
and then stop sending any new data.
3. transport.writeSomeData() will send data
3. reactor.getWriters() will return a list of transports that are all stuck
in this state, and the writers will remain in this list.
4. Calling reactor.removeWriter(transport) will "unstuck" the transport and
data gets streamed once again.
5. A small number of clients will receive data for a while, and return to
this stuck state. Most return to normal once reactor.removeWriter() is
called.
6. Based on the suggestion from IRC user _habnabit, I used strace after
removing the writer, here is the output:

(4:52:09 PM) thewrongboy: epoll_ctl(3, EPOLL_CTL_MOD, 6504, {EPOLLIN,
{u32=6504, u64=22205092589476200}}) = 0
(4:52:09 PM) thewrongboy: epoll_ctl(3, EPOLL_CTL_MOD, 6504,
{EPOLLIN|EPOLLOUT, {u32=6504, u64=22205092589476200}}) = 0
 (4:52:09 PM) thewrongboy: epoll_ctl(3, EPOLL_CTL_MOD, 6504, {EPOLLIN,
{u32=6504, u64=22205092589476200}}) = 0
(4:52:09 PM) thewrongboy: epoll_ctl(3, EPOLL_CTL_MOD, 6504,
{EPOLLIN|EPOLLOUT, {u32=6504, u64=22205092589476200}}) = 0
 (4:52:09 PM) thewrongboy: epoll_ctl(3, EPOLL_CTL_MOD, 6504, {EPOLLIN,
{u32=6504, u64=22205092589476200}}) = 0

For now, I am using a LoopingCall to check and remove transports that are
stuck in getWriters().

I am using Twisted 12.3.0 on Ubuntu 12.04 - 3.2.0-35-generic #55-Ubuntu SMP
Wed Dec 5 17:42:16 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux.

Has anyone else experienced this weird problem? I'd love to provide more
information regarding this bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130224/60f47b66/attachment.html>

From itamar at futurefoundries.com  Sun Feb 24 17:37:02 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 24 Feb 2013 19:37:02 -0500
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
Message-ID: <CAOp9P3oG0DGkNeWbXChsaGEyu6--euiHMOxMx5-vhGUg=gmvAQ@mail.gmail.com>

On Sun, Feb 24, 2013 at 7:22 PM, Wenxiang Wu <wenxiang at zopim.com> wrote:

> Hi,
>
> I am encountering a weird bug, where some TCP client connections get into
> a state where the server is able to read data sent from the client, but not
> able to send any data with transport.write().
>

Ignoring your workarounds, what transport methods do you use in normal
code? Obviously write(), but what else?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130224/cd2e9c6f/attachment.html>

From itamar at futurefoundries.com  Sun Feb 24 17:38:18 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 24 Feb 2013 19:38:18 -0500
Subject: [Twisted-Python] combine local and remote calls in perspective
	brokers
In-Reply-To: <04ce01ce12ab$403fe580$c0bfb080$@gmail.com>
References: <04ce01ce12ab$403fe580$c0bfb080$@gmail.com>
Message-ID: <CAOp9P3okHgDj4MqTZrqRT2MsLu43HYcaV2PVLGE2Ba-AEoQHMg@mail.gmail.com>

On Sun, Feb 24, 2013 at 11:23 AM, Sergey Gerasimov <sergun at gmail.com> wrote:

> Hello to all!****
>
> ** **
>
> I’m using PB as communication protocol for components of my system.****
>
> Components can be located locally on the only one machine or in
> distributed fashion. It depends on the config file.****
>
> ** **
>
> At the moment all communications are implemented as callRemote calls. I
> would like to keep this unified way of communication but make inter-machine
> calls as efficient as possible. What is the best way to do that?
>

When you say "locally", is it still different processes talking to each
other? Talking over TCP loopback on the same machine is pretty efficient,
and unlikely to be a bottleneck, so you don't necessarily have to do
anything special.

-Itamar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130224/d9b558bc/attachment.html>

From sergun at gmail.com  Mon Feb 25 02:15:55 2013
From: sergun at gmail.com (Sergey Gerasimov)
Date: Mon, 25 Feb 2013 13:15:55 +0400
Subject: [Twisted-Python] combine local and remote calls in perspective
	brokers
In-Reply-To: <CAOp9P3okHgDj4MqTZrqRT2MsLu43HYcaV2PVLGE2Ba-AEoQHMg@mail.gmail.com>
References: <04ce01ce12ab$403fe580$c0bfb080$@gmail.com>
	<CAOp9P3okHgDj4MqTZrqRT2MsLu43HYcaV2PVLGE2Ba-AEoQHMg@mail.gmail.com>
Message-ID: <057b01ce1338$b8a63640$29f2a2c0$@gmail.com>

 

 

From: Itamar Turner-Trauring [mailto:itamar at futurefoundries.com] 
Sent: Monday, February 25, 2013 4:38 AM
To: sergun at gmail.com; Twisted general discussion
Subject: Re: [Twisted-Python] combine local and remote calls in perspective brokers

 

 

On Sun, Feb 24, 2013 at 11:23 AM, Sergey Gerasimov <sergun at gmail.com> wrote:

Hello to all!

 

I’m using PB as communication protocol for components of my system.

Components can be located locally on the only one machine or in distributed fashion. It depends on the config file.

 

At the moment all communications are implemented as callRemote calls. I would like to keep this unified way of communication but make inter-machine calls as efficient as possible. What is the best way to do that?

 

When you say "locally", is it still different processes talking to each other? Talking over TCP loopback on the same machine is pretty efficient, and unlikely to be a bottleneck, so you don't necessarily have to do anything special.

 

-Itamar

 

Itamar,

 

nn my case “locally” means local objects in the only one process. 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130225/d8ae626e/attachment.html>

From dynamicgl at gmail.com  Mon Feb 25 05:30:57 2013
From: dynamicgl at gmail.com (Gelin Yan)
Date: Mon, 25 Feb 2013 20:30:57 +0800
Subject: [Twisted-Python] combine local and remote calls in perspective
	brokers
In-Reply-To: <057b01ce1338$b8a63640$29f2a2c0$@gmail.com>
References: <04ce01ce12ab$403fe580$c0bfb080$@gmail.com>
	<CAOp9P3okHgDj4MqTZrqRT2MsLu43HYcaV2PVLGE2Ba-AEoQHMg@mail.gmail.com>
	<057b01ce1338$b8a63640$29f2a2c0$@gmail.com>
Message-ID: <CABkOF6SjO=RanqXcQMOGvK2Fu1srOFAu6YTKDTNp+yVvw-OEcQ@mail.gmail.com>

On Mon, Feb 25, 2013 at 5:15 PM, Sergey Gerasimov <sergun at gmail.com> wrote:

> ** **
>
> ** **
>
> *From:* Itamar Turner-Trauring [mailto:itamar at futurefoundries.com]
> *Sent:* Monday, February 25, 2013 4:38 AM
> *To:* sergun at gmail.com; Twisted general discussion
> *Subject:* Re: [Twisted-Python] combine local and remote calls in
> perspective brokers****
>
> ** **
>
> ** **
>
> On Sun, Feb 24, 2013 at 11:23 AM, Sergey Gerasimov <sergun at gmail.com>
> wrote:****
>
> Hello to all!****
>
>  ****
>
> I’m using PB as communication protocol for components of my system.****
>
> Components can be located locally on the only one machine or in
> distributed fashion. It depends on the config file.****
>
>  ****
>
> At the moment all communications are implemented as callRemote calls. I
> would like to keep this unified way of communication but make inter-machine
> calls as efficient as possible. What is the best way to do that?****
>
> ** **
>
> When you say "locally", is it still different processes talking to each
> other? Talking over TCP loopback on the same machine is pretty efficient,
> and unlikely to be a bottleneck, so you don't necessarily have to do
> anything special.****
>
> ** **
>
> -Itamar****
>
> ** **
>
> Itamar,****
>
> ** **
>
> nn my case “locally” means local objects in the only one process. ****
>
> ** **
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
Hi

   It is fine to run both of sides within the same process, many test
suites in twisted do this.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130225/5d18efe7/attachment.html>

From glyph at twistedmatrix.com  Mon Feb 25 16:23:59 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Feb 2013 15:23:59 -0800
Subject: [Twisted-Python] Inline callbacks: generating the same Deferred
	at multiple places
In-Reply-To: <5128A6CC.9030905@jaury.eu>
References: <51279155.1070709@jaury.eu>
	<CAPkRfUTjKGum3vn6SAyNPyHu4YGFL42xcNTuGDijjWU+BidPkA@mail.gmail.com>
	<789C5390-E617-45C8-909E-A3DD9266E2A8@twistedmatrix.com>
	<5128A6CC.9030905@jaury.eu>
Message-ID: <E01A14DC-2940-417A-9271-2BFD36764E07@twistedmatrix.com>


On Feb 23, 2013, at 3:23 AM, Pierre Jaury <pierre at jaury.eu> wrote:

> On 02/22/2013 09:17 PM, Glyph wrote:
>> 
>> On Feb 22, 2013, at 8:30 AM, Christopher Armstrong
>> <radix at twistedmatrix.com <mailto:radix at twistedmatrix.com>> wrote:
>> 
>>> I think it's a reasonable change to make, and I don't foresee any
>>> problems with it, so I think it's fine to submit a bug about it. But I
>>> do question the architecture that needs to make use of it. I would
>>> probably avoid scenarios like that in my own code.
>> 
>> I disagree; the behavior of result consumption is intentional - although
>> it could be better documented.  Changing it would very definitely be
>> incompatible (<http://twistedmatrix.com/trac/wiki/CompatibilityPolicy>);
>> this is possible, of course, if the deprecation/migration is worth it,
>> but the behavior being requested here would be worse in a number of ways.
> 
> Well, some criticism, now I am listening to you.
> 
>> If we re-populated the result, every failed Deferred yielded by an
>> inlineCallbacks function would log its traceback twice: once when the
>> unhandled exception propagated out of the inlineCallbacks function
>> causing its Deferred to fail, and once when the unhandled exception
>> propagated from the yielded Deferred itself, since nothing would have
>> consumed it when that Deferred would be GC'd.
> 
> Well, this simply means that the change is not that simple to make and
> would probably imply some deeper modifications. I can see how this kills
> any hope to get the change merged into anything stable anytime soon however.

The change cannot be made, as such.  The compatibility policy page, linked above, details what would be necessary to add a new API with the behavior you want, but as I think I made clear already, I think that would be a bad idea ;).

>> Speaking of GC, similarly, any large objects in Deferred results
>> processed by inlineCallbacks functions would live longer, and continue
>> participating in any reference cycles they're part of, possibly causing
>> memory leaks, or at least, longer collection times and less favorable
>> memory usage behavior, especially in long-lived processes.
> 
> But.. I definitely agree with this one, which I did not foresee. I
> therefore agree that any change in Deferred objects behavior should
> never enforce references to live longer when not usually required.

Deferred holds enough references to get its job done, no more, no less.  (Well, maybe a little more in the case of a failed Deferred.  But mostly we are talking about a successful Deferred here.)

>> Basically, you can't treat a Deferred as an event broadcaster.  It isn't
>> one.  It's a single-shot representation of an asynchronous result, which
>> a single consumer can consume with its current value, possibly yielding
>> a new value.
> 
> That I figured out already. Thanks for the reminder anyway, I was on the
> path of loosing myself, there :)

OK, good :).

>> Any
>> inlineCallbacks function which wants to express its intent more
>> precisely can do this, instead:
>> 
>>    def fork(d):
>>        d2 = Deferred()
>>        def fire(x):
>>            d2.callback(x)
>>            return x
>>        d.addBoth(fire)
>>        return d2
>> 
>>    @inlineCallbacks
>>    def foo():
>>        result = yield fork(somethingAsync())
> 
> I will embed this one in my bundle of Twisted utility functions. Thanks!
> 
>> Maybe putting that function in Twisted (this is not the first time it's
>> come up) would be a useful addition.
> 
> Agreed, then.

Some existing implementations:

<http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/enterprise/adbapi2.py?rev=10297#L877>
<http://bazaar.launchpad.net/~divmod-dev/divmod.org/trunk/view/head:/Epsilon/epsilon/pending.py>

-glyph




From glyph at twistedmatrix.com  Mon Feb 25 16:25:17 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Feb 2013 15:25:17 -0800
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
Message-ID: <3C36456E-7829-4BA6-983B-61542AA5F963@twistedmatrix.com>


On Feb 24, 2013, at 4:22 PM, Wenxiang Wu <wenxiang at zopim.com> wrote:

> Has anyone else experienced this weird problem? I'd love to provide more information regarding this bug.

I have seen bugs which _might_ be this problem, but I'm not sure.  I don't think I've ever been able to reproduce it.

Can you test with any reactors other than epoll?  Do you have a test case which will reproduce it deterministically?

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130225/e11104c9/attachment.html>

From wenxiang at zopim.com  Mon Feb 25 17:17:55 2013
From: wenxiang at zopim.com (Wenxiang Wu)
Date: Mon, 25 Feb 2013 16:17:55 -0800
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <3C36456E-7829-4BA6-983B-61542AA5F963@twistedmatrix.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
	<3C36456E-7829-4BA6-983B-61542AA5F963@twistedmatrix.com>
Message-ID: <CAGr0=+ES7oA8_6PBC4t-OqLX8KhDzgyTf2nZATEQ_k4Oee4PLg@mail.gmail.com>

Unfortunately for performance reasons, I cannot test this with any other
reactor. And the only time I have ever been able to reproduce this was when
I left my client running overnight.

However due to the amount of traffic we are seeing, I am able to reliably
find connections stuck in this state. I get 2-3 connections stuck every
hour.


On Mon, Feb 25, 2013 at 3:25 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Feb 24, 2013, at 4:22 PM, Wenxiang Wu <wenxiang at zopim.com> wrote:
>
>  Has anyone else experienced this weird problem? I'd love to provide more
> information regarding this bug.
>
>
> I have seen bugs which _might_ be this problem, but I'm not sure.  I don't
> think I've ever been able to reproduce it.
>
> Can you test with any reactors other than epoll?  Do you have a test case
> which will reproduce it deterministically?
>
> -g
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Wenxiang Wu
VP Partying / Engineering
www.zopim.com

[US] +1 (408) 680-9345
[SG] +65 9457-5822
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130225/9cc00586/attachment.html>

From glyph at twistedmatrix.com  Mon Feb 25 17:36:01 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Feb 2013 16:36:01 -0800
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <CAGr0=+ES7oA8_6PBC4t-OqLX8KhDzgyTf2nZATEQ_k4Oee4PLg@mail.gmail.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
	<3C36456E-7829-4BA6-983B-61542AA5F963@twistedmatrix.com>
	<CAGr0=+ES7oA8_6PBC4t-OqLX8KhDzgyTf2nZATEQ_k4Oee4PLg@mail.gmail.com>
Message-ID: <9124FCEB-39D9-439B-A5DE-914509CAB31E@twistedmatrix.com>


On Feb 25, 2013, at 4:17 PM, Wenxiang Wu <wenxiang at zopim.com> wrote:

> Unfortunately for performance reasons, I cannot test this with any other reactor. And the only time I have ever been able to reproduce this was when I left my client running overnight.

Understandable; I've never managed to reliably reproduce it in a test environment either.

> However due to the amount of traffic we are seeing, I am able to reliably find connections stuck in this state. I get 2-3 connections stuck every hour.

Do these connections share any obvious attributes?  For example, are they to clients on some particular network?

-g


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130225/fc5276c0/attachment.html>

From dynamicgl at gmail.com  Mon Feb 25 19:43:15 2013
From: dynamicgl at gmail.com (Gelin Yan)
Date: Tue, 26 Feb 2013 10:43:15 +0800
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <9124FCEB-39D9-439B-A5DE-914509CAB31E@twistedmatrix.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
	<3C36456E-7829-4BA6-983B-61542AA5F963@twistedmatrix.com>
	<CAGr0=+ES7oA8_6PBC4t-OqLX8KhDzgyTf2nZATEQ_k4Oee4PLg@mail.gmail.com>
	<9124FCEB-39D9-439B-A5DE-914509CAB31E@twistedmatrix.com>
Message-ID: <CABkOF6QUESm1f4Hjdkv8fvKnROTBUuttWCJsZxv9ze6Mw4UbBA@mail.gmail.com>

On Tue, Feb 26, 2013 at 8:36 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Feb 25, 2013, at 4:17 PM, Wenxiang Wu <wenxiang at zopim.com> wrote:
>
> Unfortunately for performance reasons, I cannot test this with any other
> reactor. And the only time I have ever been able to reproduce this was when
> I left my client running overnight.
>
>
> Understandable; I've never managed to reliably reproduce it in a test
> environment either.
>
> However due to the amount of traffic we are seeing, I am able to reliably
> find connections stuck in this state. I get 2-3 connections stuck every
> hour.
>
>
> Do these connections share any obvious attributes?  For example, are they
> to clients on some particular network?
>
> -g
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
Hi All

    It looks like a serious bug, what is the work around besides of
checking stuck state regularly?.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130226/00855985/attachment.html>

From wenxiang at zopim.com  Mon Feb 25 23:24:12 2013
From: wenxiang at zopim.com (Wenxiang Wu)
Date: Mon, 25 Feb 2013 22:24:12 -0800
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <9124FCEB-39D9-439B-A5DE-914509CAB31E@twistedmatrix.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
	<3C36456E-7829-4BA6-983B-61542AA5F963@twistedmatrix.com>
	<CAGr0=+ES7oA8_6PBC4t-OqLX8KhDzgyTf2nZATEQ_k4Oee4PLg@mail.gmail.com>
	<9124FCEB-39D9-439B-A5DE-914509CAB31E@twistedmatrix.com>
Message-ID: <CAGr0=+HbOCOVm3fyjNoqx8LwfH-Hiy0XYMdPQaxqtpTOXeyv_g@mail.gmail.com>

>From what I can tell, there isn't a specific pattern that. But from this
small sample size, users that run into this problem are those with higher
levels of usage, i.e. connections with more traffic.

Also, this *seems* to affect users in the same LAN more. The 2 groups of
affected users I worked closely with regarding this issue were both
connected to the same WiFi router.


On Mon, Feb 25, 2013 at 4:36 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Feb 25, 2013, at 4:17 PM, Wenxiang Wu <wenxiang at zopim.com> wrote:
>
>  Unfortunately for performance reasons, I cannot test this with any other
> reactor. And the only time I have ever been able to reproduce this was when
> I left my client running overnight.
>
>
> Understandable; I've never managed to reliably reproduce it in a test
> environment either.
>
> However due to the amount of traffic we are seeing, I am able to reliably
> find connections stuck in this state. I get 2-3 connections stuck every
> hour.
>
>
> Do these connections share any obvious attributes?  For example, are they
> to clients on some particular network?
>
> -g
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Wenxiang Wu
VP Partying / Engineering
www.zopim.com

[US] +1 (408) 680-9345
[SG] +65 9457-5822
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130225/31ab4e29/attachment.html>

From glyph at twistedmatrix.com  Tue Feb 26 00:36:59 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Feb 2013 23:36:59 -0800
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <CAGr0=+HbOCOVm3fyjNoqx8LwfH-Hiy0XYMdPQaxqtpTOXeyv_g@mail.gmail.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
	<3C36456E-7829-4BA6-983B-61542AA5F963@twistedmatrix.com>
	<CAGr0=+ES7oA8_6PBC4t-OqLX8KhDzgyTf2nZATEQ_k4Oee4PLg@mail.gmail.com>
	<9124FCEB-39D9-439B-A5DE-914509CAB31E@twistedmatrix.com>
	<CAGr0=+HbOCOVm3fyjNoqx8LwfH-Hiy0XYMdPQaxqtpTOXeyv_g@mail.gmail.com>
Message-ID: <15AFC525-125C-4DE1-871D-AC5366377A0F@twistedmatrix.com>

On Feb 25, 2013, at 10:24 PM, Wenxiang Wu <wenxiang at zopim.com> wrote:

> From what I can tell, there isn't a specific pattern that. But from this small sample size, users that run into this problem are those with higher levels of usage, i.e. connections with more traffic.
> 
> Also, this *seems* to affect users in the same LAN more. The 2 groups of affected users I worked closely with regarding this issue were both connected to the same WiFi router.

So, it sounds like it's happening with connections that are (A) faster and (B) shipping around more traffic.  Smells like a possible race condition - and maybe not in Twisted.  Is it possible for you to test with any other OS / kernel variations, to see if it behaves differently on other Linux versions, ideally some with changes to epoll?

I don't know epoll quite well enough to read the strace and tell what's going on.  If those are the only calls being traced... there's no gettimeofday or send or recv calls?  That suggests it's just thrashing, but if your workaround works, other stuff must be going on.  Hmm.  I guess I don't have a clear enough picture for any useful conjecture yet :).  Can you open a bug, and attach a more complete strace, assuming that the one with just the epoll calls was filtered?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130225/3b05c0ba/attachment-0001.html>

From lacrima.maxim at gmail.com  Tue Feb 26 01:48:24 2013
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Tue, 26 Feb 2013 10:48:24 +0200
Subject: [Twisted-Python] combine local and remote calls in perspective
	brokers
In-Reply-To: <CABkOF6SjO=RanqXcQMOGvK2Fu1srOFAu6YTKDTNp+yVvw-OEcQ@mail.gmail.com>
References: <04ce01ce12ab$403fe580$c0bfb080$@gmail.com>
	<CAOp9P3okHgDj4MqTZrqRT2MsLu43HYcaV2PVLGE2Ba-AEoQHMg@mail.gmail.com>
	<057b01ce1338$b8a63640$29f2a2c0$@gmail.com>
	<CABkOF6SjO=RanqXcQMOGvK2Fu1srOFAu6YTKDTNp+yVvw-OEcQ@mail.gmail.com>
Message-ID: <CAKef57NBRymaF1VQcOfy8qsYQ3afuonSTNVSJcfhu1fv_rVAqA@mail.gmail.com>

Hi,

   It is fine to run both of sides within the same process, many test
> suites in twisted do this.
>

I can be wrong, but tests often use `proto_helpers.StringTransport` to
avoid spawning a new process and probably not intended for usage outside of
tests.

If it is the same process, why not to access objects directly?
`pb.Referenceable` and `pb.Root` should be just wrappers around your own
objects.

-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130226/5a67c3aa/attachment.html>

From itamar at itamarst.org  Tue Feb 26 05:29:29 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 26 Feb 2013 07:29:29 -0500
Subject: [Twisted-Python] Unable to write to "stuck" TCP client
	connections
In-Reply-To: <CAOp9P3oG0DGkNeWbXChsaGEyu6--euiHMOxMx5-vhGUg=gmvAQ@mail.gmail.com>
References: <CAGr0=+Hc_2JueASrC9pODixkZRxphrwodMJ3WyOK9_QwT5HaTA@mail.gmail.com>
	<CAOp9P3oG0DGkNeWbXChsaGEyu6--euiHMOxMx5-vhGUg=gmvAQ@mail.gmail.com>
Message-ID: <512CAAA9.5060903@itamarst.org>

On 02/24/2013 07:37 PM, Itamar Turner-Trauring wrote:
>
>
> On Sun, Feb 24, 2013 at 7:22 PM, Wenxiang Wu <wenxiang at zopim.com 
> <mailto:wenxiang at zopim.com>> wrote:
>
>     Hi,
>
>     I am encountering a weird bug, where some TCP client connections
>     get into a state where the server is able to read data sent from
>     the client, but not able to send any data with transport.write().
>
>
> Ignoring your workarounds, what transport methods do you use in normal 
> code? Obviously write(), but what else?
>
Can I ask for this information again? It may be relevant.



From logan4u at live.it  Tue Feb 26 13:22:21 2013
From: logan4u at live.it (Logan 4u)
Date: Tue, 26 Feb 2013 20:22:21 +0000
Subject: [Twisted-Python] Simple http server to serve php
Message-ID: <BLU174-W255533164C72754EC69ADCF5FC0@phx.gbl>


Hi! First mail, and first look at this interesting framework that is twisted.
I'm on a Linux Debian. Kindly  need help to solve this issue, I've looked at documentation but I miss something.
Need to get up a simple web server that will serve html and php pages. The html works but php show a window where you can choose if save or open the file.
This is what I've got:

#!/usr/bin/env python
import CGIHTTPServer

def main():
    server_address = ('', 9090)
    handler = CGIHTTPServer.CGIHTTPRequestHandler
    handler.cgi_directories = ['./cgi']
    server = CGIHTTPServer.BaseHTTPServer.HTTPServer(server_address, handler)
    try:
       server.serve_forever()
    except KeyboardInterrupt:
        server.socket.close()
if __name__ == '__main__':
   main()


I've looked at documentation but can't understand this point:

from twisted.web import static, twcgi

class PerlScript(twcgi.FilteredScript):
    filter = '/usr/bin/php' #  >>>> I must point it to the path of php? or php5?

resource = static.File("./cgi") # Points to the perl website
resource.processors = {".php": PerlScript} # Files that end with .pl will be
                                          # processed by PerlScript
resource.indexNames = ['index.php']Every help would be really appreciated. Thanks in advance, BR.
 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130226/d012cd97/attachment-0001.html>

From msc at contact.de  Thu Feb 28 07:49:06 2013
From: msc at contact.de (Michael Schlenker)
Date: Thu, 28 Feb 2013 15:49:06 +0100
Subject: [Twisted-Python] Aborting a connection attempt when HTTPS
 client detected on HTTP only server?
In-Reply-To: <CAOp9P3q1Yp2aiexubaphcX8j3Xh2xoFTVmQNSG+RJOj57VmnOw@mail.gmail.com>
References: <5118FF2C.4020204@contact.de>
	<CAOp9P3q1Yp2aiexubaphcX8j3Xh2xoFTVmQNSG+RJOj57VmnOw@mail.gmail.com>
Message-ID: <512F6E62.9010505@contact.de>

Am 11.02.2013 15:51, schrieb Itamar Turner-Trauring:
> 
> 
> On Mon, Feb 11, 2013 at 9:24 AM, Michael Schlenker <msc at contact.de
> <mailto:msc at contact.de>> wrote:
> 
>     Is there some pre-made solution, or would i have to hook into the
>     connection setup of twisted.web and check the first few bytes for the
>     signs of an SSL Handshake signature?
> 
> 
> Subclassing the HTTP protocol class and just adding a check in
> dataReceived is probably the easiest thing to do, yes. Might be worth
> filing a ticket for this as well. My guess is the logic would be
> something like "in dataReceived, if you've not hit first line, and any
> byte is non-ASCII, close connection", which has the nice property of
> being more general than just SSL. Or perhaps check what Apache does exactly.
> 
Okay, solved it like this:

from twisted.web import server, http

class HTTPChannel(http.HTTPChannel):
    """
    HTTP Channel that recognizes connection attempts via non-HTTP
    and closes the connection in such cases.
    """

    def __init__(self):
        http.HTTPChannel.__init__(self)
        self.__request_line_received = False

    def lineReceived(self, line):
        self.__request_line_received = True
        http.HTTPChannel.lineReceived(self, line)

    def dataReceived(self, data):
        if not self.__request_line_received:
            # check for any binary garbage, e.g. not ASCII
            # e.g. ssl connection attempt
            try:
                data.decode('ascii')
            except UnicodeDecodeError:
                return self.transport.loseConnection()
        http.HTTPChannel.dataReceived(self, data)


class Site(server.Site):
    protocol = HTTPChannel


Works fine. Thx for the suggestion to check for ASCII.

Michael

-- 
Michael Schlenker
Software Architect

CONTACT Software GmbH           Tel.:   +49 (421) 20153-80
Wiener Straße 1-3               Fax:    +49 (421) 20153-41
28359 Bremen
http://www.contact.de/          E-Mail: msc at contact.de

Sitz der Gesellschaft: Bremen
Geschäftsführer: Karl Heinz Zachries, Ralf Holtgrefe
Eingetragen im Handelsregister des Amtsgerichts Bremen unter HRB 13215



From beenje at gmail.com  Thu Feb 28 14:59:40 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Thu, 28 Feb 2013 22:59:40 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
Message-ID: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>

Hi,

I have to replace a piece of software that sniffs the traffic on one interface. It gets different messages that are each associated to a specific emitter.
On the same machine, one server is started for each emitter (on a different port).
And the application is just supposed to use the proper server to send the messages captured (to a client on another machine).

Not sure if it's clear, but basically if I have 2 emitters A and B, I'll start 2 servers (a and b).
My sniffer will get messages A1, A2, B1, B2, B3...
I have to pass messages A1, A2 to server a, that will just send them to the client (if it is connected of course).
And B1, B2, B3 to server b.
I don't need any buffering. If no client is connected, messages captured are just discarded.

To sniff the network, I want to use pylibpcap or pcapy.
I found this example to make it work with twisted: http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/

Starting several servers that use the same protocol is not a problem.
But how do I pass the messages captured to the right server?
How do I make the link between the function sniffing the network and the servers?

Thanks

Benjamin


From saurabh.mahindre at gmail.com  Thu Feb 28 19:19:43 2013
From: saurabh.mahindre at gmail.com (Saurabh Mahindre)
Date: Fri, 1 Mar 2013 07:49:43 +0530
Subject: [Twisted-Python] Need help regarding Gsoc 2013
Message-ID: <CANj+b3OTummTY4S+amyPowa=kO8pBiAhJwt8YHcGVJZkYb7y_g@mail.gmail.com>

I am an undergraduate student and plan to try for a project with
twisted.....I went through the gsoc wiki page for twisted and I have picked
up some ideas
I need some help as to how I can follow up on them or get new ones?
I will be thankful for any help or criticism as i am new to this process.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130301/df4c01b0/attachment.html>

