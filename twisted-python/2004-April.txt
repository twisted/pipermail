From dialtone at aruba.it  Thu Apr  1 05:13:03 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Thu, 01 Apr 2004 12:13:03 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <406AF172.2010000@aruba.it>
References: <406A7466.3090800@aruba.it> <20040331103927.GA8642@frobozz> <406AAB35.1000208@aruba.it> <20040331123406.GA14465@frobozz> <406AC19B.20207@aruba.it> <406AF172.2010000@aruba.it>
Message-ID: <406BEB2F.5060608@aruba.it>

Valentino Volonghi aka Dialtone wrote:

> The code locked at 404th feed downloaded without anything running (no 
> parsing and no memoizing).
>
> No network activity just after the 404th.
> Till the 404th it's not very fast, after the lock (and my Ctrl+C) it 
> goes at light speed till the 758th feed. (and this can be because of
> it's waiting for the feeds to get downloaded, and this happens at 
> about the 400th)

I went on testing and found some interesting things...
I also tried with just 36 feeds and it locked in the same way, then I 
tested again with that feed and everything worked fine.
So maybe it's the resolver that locks.

I tried with the solution, that Andrew posted on the issue tracker but I 
got a lot of this:

[Failure instance: Traceback: twisted.internet.defer.TimeoutError, 
[Query('www.ozzie.net', 255, 1)]
]
====================
Trying to go on...
parsing...
[Failure instance: Traceback: exceptions.AttributeError, 'NoneType' 
object has no attribute 'find'
/usr/lib/python2.3/site-packages/twisted/internet/defer.py:313:_runCallbacks
twisted-rss.py:107:parseFeed
/home/dialtone/programmi_didattici/rss-aggregator/feedparser.py:1679:parse
/home/dialtone/programmi_didattici/rss-aggregator/feedparser.py:1289:_open_resource
/usr/lib/python2.3/urlparse.py:49:urlparse
/usr/lib/python2.3/urlparse.py:79:urlsplit
]
====================
Trying to go on...
Memoizing http://www.ozzie.net/blog/rss.xml ...
--------------------
finished retrieving
Feed Version: [Failure instance: Traceback: exceptions.AttributeError, 
'NoneType' object has no attribute 'get'
/usr/lib/python2.3/site-packages/twisted/internet/defer.py:313:_runCallbacks
twisted-rss.py:123:workOnPage
]
====================
Trying to go on...
Closing connection number 720...
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Obviously the error is the first one, since without a feed to parse, all 
the chain fails.

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/




From andrew-twisted at puzzling.org  Thu Apr  1 07:31:23 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 1 Apr 2004 22:31:23 +1000
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <406BEB2F.5060608@aruba.it>
References: <406A7466.3090800@aruba.it> <20040331103927.GA8642@frobozz> <406AAB35.1000208@aruba.it> <20040331123406.GA14465@frobozz> <406AC19B.20207@aruba.it> <406AF172.2010000@aruba.it> <406BEB2F.5060608@aruba.it>
Message-ID: <20040401123123.GC14703@frobozz>

On Thu, Apr 01, 2004 at 12:13:03PM +0200, Valentino Volonghi aka Dialtone wrote:
> 
> I went on testing and found some interesting things...

I just found something interesting too -- I just took a quick peek at
feedparser, and the parse function looks like it fetches the page
synchronously using urllib.  That's *not* a good thing to do from inside
Twisted's main loop.  It looks like you want your parseFeed method to call:

    r = FeedParser(baseuri)
    r.feed(data)

like feedparser.parse does internally.  (You'll need to do a little bit of
work to return the same sort dictionary that parse constructs for you).

-Andrew.




From dialtone at aruba.it  Thu Apr  1 09:03:07 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Thu, 01 Apr 2004 16:03:07 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <20040401123123.GC14703@frobozz>
References: <406A7466.3090800@aruba.it> <20040331103927.GA8642@frobozz> <406AAB35.1000208@aruba.it> <20040331123406.GA14465@frobozz> <406AC19B.20207@aruba.it> <406AF172.2010000@aruba.it> <406BEB2F.5060608@aruba.it> <20040401123123.GC14703@frobozz>
Message-ID: <406C211B.2040904@aruba.it>

Andrew Bennetts wrote:

>On Thu, Apr 01, 2004 at 12:13:03PM +0200, Valentino Volonghi aka Dialtone wrote:
>  
>
>>I went on testing and found some interesting things...
>>    
>>
>
>I just found something interesting too -- I just took a quick peek at
>feedparser, and the parse function looks like it fetches the page
>synchronously using urllib.  That's *not* a good thing to do from inside
>Twisted's main loop.  It looks like you want your parseFeed method to call:
>
>    r = FeedParser(baseuri)
>    r.feed(data)
>
>like feedparser.parse does internally.  (You'll need to do a little bit of
>work to return the same sort dictionary that parse constructs for you).
>  
>
I verified... The parser only downloads if as url is supplied, otherwise 
it does not.

Anyway, since it needs a StringIO like argument, now I do myself the 
conversion into StringIO and this
will make the parser always return as fast as possible from 
_open_resource().

I'm starting to think that this is some kind of 'race condition' inside 
twisted, or something similar.
BTW, I'll investigate more and more :)

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/




From bob at redivi.com  Thu Apr  1 10:08:28 2004
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 1 Apr 2004 10:08:28 -0500
Subject: [Twisted-Python] help ssh forwarding.
In-Reply-To: <FC91241E-7364-11D8-AF5B-000A956F9A40@enginesofcreation.ie>
References: <FC91241E-7364-11D8-AF5B-000A956F9A40@enginesofcreation.ie>
Message-ID: <6EB0D811-83EE-11D8-8201-000A95686CD8@redivi.com>

On Mar 11, 2004, at 9:04 AM, Oisin Mulvihill wrote:

> I have a series of linux based internet kiosks at a variety
> of sites. I need to be able to connect back into the kiosk
> from the main server. However direct connections aren't possible
> as kiosks are behind there own router/firewall.

This might be considered heresy here, but I've solved this exact 
problem using autossh ( http://www.harding.motd.ca/autossh/ ) and 
crontab entries.

-bob




From oisin at enginesofcreation.ie  Thu Apr  1 10:27:32 2004
From: oisin at enginesofcreation.ie (Oisin Mulvihill)
Date: Thu, 01 Apr 2004 16:27:32 +0100
Subject: [Twisted-Python] help ssh forwarding.
In-Reply-To: <6EB0D811-83EE-11D8-8201-000A95686CD8@redivi.com>
References: <FC91241E-7364-11D8-AF5B-000A956F9A40@enginesofcreation.ie> <6EB0D811-83EE-11D8-8201-000A95686CD8@redivi.com>
Message-ID: <406C34E4.7070200@enginesofcreation.ie>

Bob Ippolito wrote:

>
> On Mar 11, 2004, at 9:04 AM, Oisin Mulvihill wrote:
>
>> I have a series of linux based internet kiosks at a variety
>> of sites. I need to be able to connect back into the kiosk
>> from the main server. However direct connections aren't possible
>> as kiosks are behind there own router/firewall.
>
>
> This might be considered heresy here, but I've solved this exact 
> problem using autossh (

I won't tell if you won't ;)

> http://www.harding.motd.ca/autossh/ ) and crontab entries.
>
> -bob
>
 From a quick glance at this looks like what I need. I'll check it out 
properly
asap. Using twisted's Process to spawn ssh does work, its just not very
pretty.

Thanks,

om



From glyph at divmod.com  Thu Apr  1 10:48:58 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 1 Apr 2004 10:48:58 -0500
Subject: [Twisted-Python] help ssh forwarding.
In-Reply-To: <A373225C-735B-11D8-AF5B-000A956F9A40@enginesofcreationsoftware.com>
References: <A373225C-735B-11D8-AF5B-000A956F9A40@enginesofcreationsoftware.com>
Message-ID: <1705792E-83F4-11D8-98E3-000393C9700E@divmod.com>


On Mar 11, 2004, at 7:57 AM, Oisin Mulvihill wrote:

> My program (attached) just forwards from 11122
> on the kiosk to 22 on the server which isn't what I want.

It sounds like you're using the equivalent of -L, not -R.  Without docs 
it's hard for me to say, but I think you want 
forwarding.openConnectForwardingClient...?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040401/7fb20a4d/attachment.pgp 

From justinjohnson at fastmail.fm  Thu Apr  1 11:10:40 2004
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Thu, 01 Apr 2004 10:10:40 -0600
Subject: [Twisted-Python] Closing PB Connections
Message-ID: <1080835840.15117.183720048@webmail.messagingengine.com>

I found some stuff on google about this but it still isn't clear to me
what I need to do.

I noticed that everytime I make a new connection via PB, the server has
another ESTABLISHED connection between itself and the PB client box (via
netstat output).  Do I need to do something to close these connections?

I connect as follows:

class MyClient:

    ...

    def connectToServer(self, server):
        """Connect to the RatControl service
        """
        factory = pb.PBClientFactory()
        reactor.connectTCP(server, pbPortNumber, factory)
        d = factory.login(credentials.UsernamePassword(self.username,
        self.password), None)
        return d



    def someMethod(self):
        ...
        d = self.connectToServer(server)
        d.addCallback(_cbDoSomething, arg1, arg2)

Thanks.
-Justin



From radix at twistedmatrix.com  Thu Apr  1 13:39:14 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 01 Apr 2004 13:39:14 -0500
Subject: [Twisted-Python] Re: Using compiled C Library with Twisted?
Message-ID: <406C61D2.3090400@twistedmatrix.com>

This message is more appropriate for twisted-python at twistedmatrix.com, 
not twisted-web at twistedmatrix.com.

> -------- Original Message --------
> Subject: [Twisted-web] Using compiled C Library with Twisted?
> From: Jiannan Fu <jf at ypsilon.net>
> To: twisted-web at twistedmatrix.com
> 
> hi there,
> i got the following problem: I have a set of compiled C files, providing 
> a API for a special encryption / decrytion of messages to be exchanged 
> over the internet, well documented and with a lot of programming 
> examples of how to work with it and its functions (in this case the 
> examples are all in C). Now i want to use it with twisted together, to 
> have all the advantages of twisted (especially the reactor instead of 
> threading, deferred and so on), but the C API to do the last step before 
> messages are send out.
> 
> The C API should just play some kind of middleware between the tcp-ip 
> protokoll and the twisted server. Is it possible to extending twisted 
> with that library by "just import" them?
> 
> Any kind of advice / suggestions would help

You don't have to do anything special to get C libraries to work with 
Twisted; you'll have to create a Python-C binding for them, of course, 
and then you just import the binding and call the functions in it.

Just call out to these functions to decode and encode chunks of data 
when you receive or send it. From the info you provided, that's all the 
advice I can come up with.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040401/56c61de6/attachment.pgp 

From radix at twistedmatrix.com  Thu Apr  1 14:49:14 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 01 Apr 2004 14:49:14 -0500
Subject: [Twisted-Python] Testing a mailman upgrade
Message-ID: <406C723A.6070001@twistedmatrix.com>

I just upgraded mailman from 2.0.11 to 2.1.4; hopefully all went well!

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040401/f65fe3c2/attachment.pgp 

From qpalzm at alltel.net  Thu Apr  1 07:52:33 2004
From: qpalzm at alltel.net (Kaleb Brasee)
Date: Thu, 1 Apr 2004 07:52:33 -0500
Subject: [Twisted-Python] Can I connect multiple class instances to 1
	Twisted factory?
Message-ID: <002301c417e8$340dfd00$0100a8c0@MEDION>

Is this even possible?  I'm designing a simple chat and game client/server as an intro to Python, and it would be nice to represent the different interfaces (public chat room, private chat rooms, game instances) as totally seperate classes and show them in totally seperate windows.

Given my basic understanding of Twisted, I see no way of doing this, and my whole GUI is contained in one class.  The project is doable this way, it would just be much better with multiple class and multiple window seperation.

I am using Tkinter to design my GUIs, using the specialized Twisted support code to setup the reactor.

If anyone can give me any direction, I would appreciate it very much.

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040401/62edf598/attachment.htm 

From developer at csrules.dyndns.org  Thu Apr  1 17:50:53 2004
From: developer at csrules.dyndns.org (darryl)
Date: Thu, 01 Apr 2004 16:50:53 -0600
Subject: [Twisted-Python] wxreactor
Message-ID: <406C9CCD.9050204@csrules.dyndns.org>

I tried to run /doc/examples/wxdemo.py

And i get a window to pop up but no menu.
does wxreactor work as advertised? Is anyone
else having success?

-darryl
-- 
http://randomthoughts.vandorp.ca/syncato/WK/blog



From andrew-twisted at puzzling.org  Thu Apr  1 18:01:00 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 2 Apr 2004 09:01:00 +1000
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <406C211B.2040904@aruba.it>
References: <406A7466.3090800@aruba.it> <20040331103927.GA8642@frobozz>
	<406AAB35.1000208@aruba.it> <20040331123406.GA14465@frobozz>
	<406AC19B.20207@aruba.it> <406AF172.2010000@aruba.it>
	<406BEB2F.5060608@aruba.it> <20040401123123.GC14703@frobozz>
	<406C211B.2040904@aruba.it>
Message-ID: <20040401230100.GA32379@frobozz>

On Thu, Apr 01, 2004 at 04:03:07PM +0200, Valentino Volonghi aka Dialtone wrote:
> 
> I'm starting to think that this is some kind of 'race condition' inside 
> twisted, or something similar.
> BTW, I'll investigate more and more :)

But the traceback you posted from the deferred chain was from the guts of
feedparser...

-Andrew.




From golux at comcast.net  Thu Apr  1 18:40:36 2004
From: golux at comcast.net (Stephen C. Waterbury)
Date: Thu, 01 Apr 2004 18:40:36 -0500
Subject: [Twisted-Python] wxreactor
In-Reply-To: <406C9CCD.9050204@csrules.dyndns.org>
References: <406C9CCD.9050204@csrules.dyndns.org>
Message-ID: <406CA874.1050107@comcast.net>

darryl wrote:
> I tried to run /doc/examples/wxdemo.py
> 
> And i get a window to pop up but no menu.
> does wxreactor work as advertised? Is anyone
> else having success?

Yes, it works for me.  Of course, the menu is
just File/Exit.  I haven't tried using wxreactor
in anything real yet, though.

Steve




From uwe at oss4u.com  Thu Apr  1 19:02:14 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Thu, 1 Apr 2004 16:02:14 -0800
Subject: [Twisted-Python] wxreactor
In-Reply-To: <406C9CCD.9050204@csrules.dyndns.org>
References: <406C9CCD.9050204@csrules.dyndns.org>
Message-ID: <200404011602.14908.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Which twisted Version are you using ?
The "wxreactor" is fairly new. The old way it was done before the wxreactor 
had exactly the symptoms you describe. Was the demo code updated to use the 
wxreactor ? 
I just checked the example code in 1.1.1 and the wxdemo.yp file still uses old 
wxsupport (which is broken).

UC


On Thursday 01 April 2004 02:50 pm, darryl wrote:
> I tried to run /doc/examples/wxdemo.py
>
> And i get a window to pop up but no menu.
> does wxreactor work as advertised? Is anyone
> else having success?
>
> -darryl
- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFAbK2GjqGXBvRToM4RAn8oAJ94ZHvJ2TLzITCO3podIRJqFeIFIgCfXMEY
05UgeqSWj1ADTULD5D+gTAE=
=1CKT
-----END PGP SIGNATURE-----




From developer at csrules.dyndns.org  Fri Apr  2 01:25:09 2004
From: developer at csrules.dyndns.org (darryl)
Date: Thu, 01 Apr 2004 22:25:09 -0800
Subject: [Twisted-Python] wxreactor
In-Reply-To: <200404011602.14908.uwe@oss4u.com>
References: <406C9CCD.9050204@csrules.dyndns.org>
	<200404011602.14908.uwe@oss4u.com>
Message-ID: <406D0745.9090005@csrules.dyndns.org>

Uwe C. Schroeder wrote:

>
>Which twisted Version are you using ?
>The "wxreactor" is fairly new. The old way it was done before the wxreactor 
>had exactly the symptoms you describe. Was the demo code updated to use the 
>wxreactor ? 
>I just checked the example code in 1.1.1 and the wxdemo.yp file still uses old 
>wxsupport (which is broken).
>
>UC
>  
>
I'm using latest twisted from a svn checkout this afternoon.

The example code uses:
---------------------------------------
from twisted.internet import wxreactor
wxreactor.install()
from twisted.internet import reactor
---------------------------------------

which I believe is the new way no?


Interesting, i just ran the code on a windows
box and it ran fine. What are you guys running
on windows or linux?

-darryl



--
http://randomthoughts.vandorp.ca/syncato/WK/blog




From golux at comcast.net  Thu Apr  1 23:27:15 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Thu, 01 Apr 2004 23:27:15 -0500
Subject: [Twisted-Python] wxreactor
In-Reply-To: <406D0745.9090005@csrules.dyndns.org>
References: <406C9CCD.9050204@csrules.dyndns.org>	<200404011602.14908.uwe@oss4u.com>
	<406D0745.9090005@csrules.dyndns.org>
Message-ID: <406CEBA3.9070906@comcast.net>

darryl wrote:

> I'm using latest twisted from a svn checkout this afternoon.

I'm using an svn checkout from about 15 minutes ago.

> Interesting, i just ran the code on a windows
> box and it ran fine. What are you guys running
> on windows or linux?

Red Hat 9 -- works just fine.  (heh :)

Steve



From uwe at oss4u.com  Thu Apr  1 23:49:22 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Thu, 1 Apr 2004 20:49:22 -0800
Subject: [Twisted-Python] wxreactor
In-Reply-To: <406CEBA3.9070906@comcast.net>
References: <406C9CCD.9050204@csrules.dyndns.org>
	<406D0745.9090005@csrules.dyndns.org>
	<406CEBA3.9070906@comcast.net>
Message-ID: <200404012049.22251.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


As I just asked Darryl off the list: Do you use GTK2 wxPython on Redhat 9 ?
My guess would be that the GTK2 event loop works different. In that case we'd 
have to talk to Robin Dunn (wxPython) or one of the wxWindows core developers 
and figure out what's the difference to GTK1.

On Thursday 01 April 2004 08:27 pm, Stephen Waterbury wrote:
> darryl wrote:
> > I'm using latest twisted from a svn checkout this afternoon.
>
> I'm using an svn checkout from about 15 minutes ago.
>
> > Interesting, i just ran the code on a windows
> > box and it ran fine. What are you guys running
> > on windows or linux?
>
> Red Hat 9 -- works just fine.  (heh :)
>
> Steve
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFAbPDSjqGXBvRToM4RAhqUAKCMN+bZlyLQT0ttFr48NEipUd89lQCgi3dI
EvYXgV7v2MWASOw/fa+XvkA=
=EPs1
-----END PGP SIGNATURE-----




From golux at comcast.net  Fri Apr  2 00:11:27 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 02 Apr 2004 00:11:27 -0500
Subject: [Twisted-Python] wxreactor
In-Reply-To: <200404012049.22251.uwe@oss4u.com>
References: <406C9CCD.9050204@csrules.dyndns.org>	<406D0745.9090005@csrules.dyndns.org>	<406CEBA3.9070906@comcast.net>
	<200404012049.22251.uwe@oss4u.com>
Message-ID: <406CF5FF.3070404@comcast.net>

Uwe C. Schroeder wrote:

> As I just asked Darryl off the list: Do you use GTK2 wxPython on Redhat 9 ?

It's pretty likely, since I have both GTK and GTK2 installed
and I compiled wxPython from source, so suspect it would use
GTK2 by default (and I didn't tell it not to).

> My guess would be that the GTK2 event loop works different. In that case we'd 
> have to talk to Robin Dunn (wxPython) or one of the wxWindows core developers 
> and figure out what's the difference to GTK1.

Itamar could chime in here, since he re-wrote the wxreactor
and may have tested it with one or the other ... Itamar?

(I just glanced quickly at the code, and it looks like he
basically incorporated your recipe, Uwe.  :)



From dialtone at aruba.it  Fri Apr  2 02:12:41 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Fri, 02 Apr 2004 09:12:41 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <20040401230100.GA32379@frobozz>
References: <406A7466.3090800@aruba.it>
	<20040331103927.GA8642@frobozz>	<406AAB35.1000208@aruba.it>
	<20040331123406.GA14465@frobozz>	<406AC19B.20207@aruba.it>
	<406AF172.2010000@aruba.it>	<406BEB2F.5060608@aruba.it>
	<20040401123123.GC14703@frobozz>	<406C211B.2040904@aruba.it>
	<20040401230100.GA32379@frobozz>
Message-ID: <406D1269.9070700@aruba.it>

Andrew Bennetts wrote:

>But the traceback you posted from the deferred chain was from the guts of
>feedparser...
>  
>
Looking at strace output it seems more like Twisted-related... Here is 
the output:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
gettimeofday({1080889267, 866232}, NULL) = 0
close(313)                              = 0
gettimeofday({1080889267, 866410}, NULL) = 0
select(726, [4 13 17 18 23 26 28 31 39 40 42 44 45 47 49 50 51 52 55 58 
60 63 66 67 69 73 74 77 78 80 81 82 86 89 92 98 99 101 104 108 109 110 
111 112 115 116 122 124 127 128 130 131 132 139 142 145 147 149 153 157 
158 162 164 171 172 173 176 178 180 182 183 185 187 188 190 191 192 193 
194 195 196 225 226 227 228 230 232 234 237 238 241 246 248 249 250 251 
253 254 256 257 258 260 262 263 264 267 268 269 271 273 274 275 277 278 
281 282 284 287 294 296 297 298 299 301 303 304 305 306 309 310 312 314 
316 317 321 322 325 327 329 330 331 332 334 335 336 339 340 343 345 346 
348 349 350 351 356 359 361 364 365 366 367 368 371 372 373 374 375 378 
379 380 383 385 386 387 390 393 396 397 399 400 401 405 406 407 408 410 
414 415 417 422 427 428 430 431 432 436 438 439 440 442 443 445 447 448 
450 451 452 453 455 456 458 459 462 464 467 468 476 477 479 480 481 482 
486 488 489 493 494 496 497 498 503 505 506 507 508 510 511 513 514 515 
517 520 523 525 527 528 529 534 535 537 538 539 544 547 550 553 554 556 
558 559 560 561 565 566 569 572 574 575 577 579 580 586 587 588 589 590 
592 593 594 597 598 600 601 602 603 604 605 606 609 610 611 612 613 615 
620 622 623 628 630 631 633 634 635 637 640 643 645 651 654 655 659 660 
664 665 666 667 670 671 675 676 677 678 681 683 684 687 715 725], [], 
[], NULL) = 1 (in [447])
recv(447, 0xa3cc9e4, 65536, 0)          = -1 ECONNRESET (Connection 
reset by peer)
shutdown(447, 2 /* send and receive */) = -1 ENOTCONN (Transport 
endpoint is not connected)
write(1, "parsing...\n", 11parsing...
)            = 11
futex(0x8067858, FUTEX_WAKE, 1)         = 0
futex(0x8067858, FUTEX_WAKE, 1)         = 0
futex(0x8067858, FUTEX_WAKE, 1)         = 0
write(1, "parsed feed\n", 12parsed feed
)           = 12
write(1, "Memoizing http://weblogs.asp.net"..., 53Memoizing 
http://weblogs.asp.net/JohanL/rss.aspx ...
) = 53
gettimeofday({1080889267, 968545}, NULL) = 0
write(1, "--------------------\n", 21--------------------
)  = 21
write(1, "finished retrieving\n", 20finished retrieving
)   = 20
write(1, "Feed Version: \n", 15Feed Version:
)        = 15
write(1, "--------------------\n", 21--------------------
)  = 21
write(1, "Closing connection number 404..."..., 33Closing connection 
number 404...
) = 33
write(1, "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"..., 
41=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
) = 41
write(1, "405 730\n", 8405 730
)                = 8
gettimeofday({1080889267, 974236}, NULL) = 0
close(447)                              = 0
gettimeofday({1080889267, 974428}, NULL) = 0
select(726, [4 13 17 18 23 26 28 31 39 40 42 44 45 47 49 50 51 52 55 58 
60 63 66 67 69 73 74 77 78 80 81 82 86 89 92 98 99 101 104 108 109 110 
111 112 115 116 122 124 127 128 130 131 132 139 142 145 147 149 153 157 
158 162 164 171 172 173 176 178 180 182 183 185 187 188 190 191 192 193 
194 195 196 225 226 227 228 230 232 234 237 238 241 246 248 249 250 251 
253 254 256 257 258 260 262 263 264 267 268 269 271 273 274 275 277 278 
281 282 284 287 294 296 297 298 299 301 303 304 305 306 309 310 312 314 
316 317 321 322 325 327 329 330 331 332 334 335 336 339 340 343 345 346 
348 349 350 351 356 359 361 364 365 366 367 368 371 372 373 374 375 378 
379 380 383 385 386 387 390 393 396 397 399 400 401 405 406 407 408 410 
414 415 417 422 427 428 430 431 432 436 438 439 440 442 443 445 448 450 
451 452 453 455 456 458 459 462 464 467 468 476 477 479 480 481 482 486 
488 489 493 494 496 497 498 503 505 506 507 508 510 511 513 514 515 517 
520 523 525 527 528 529 534 535 537 538 539 544 547 550 553 554 556 558 
559 560 561 565 566 569 572 574 575 577 579 580 586 587 588 589 590 592 
593 594 597 598 600 601 602 603 604 605 606 609 610 611 612 613 615 620 
622 623 628 630 631 633 634 635 637 640 643 645 651 654 655 659 660 664 
665 666 667 670 671 675 676 677 678 681 683 684 687 715 725], [], [], NULL

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Here it lock, but now, since I'm using strace, it won't restart after 
Ctrl+C.

As I said before... The download of _ALL_ feeds has already finished 
when twisted locks,


-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/




From andrew-twisted at puzzling.org  Fri Apr  2 06:57:11 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 2 Apr 2004 21:57:11 +1000
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <406D1269.9070700@aruba.it>
References: <20040331103927.GA8642@frobozz> <406AAB35.1000208@aruba.it>
	<20040331123406.GA14465@frobozz> <406AC19B.20207@aruba.it>
	<406AF172.2010000@aruba.it> <406BEB2F.5060608@aruba.it>
	<20040401123123.GC14703@frobozz> <406C211B.2040904@aruba.it>
	<20040401230100.GA32379@frobozz> <406D1269.9070700@aruba.it>
Message-ID: <20040402115711.GA14130@frobozz>

On Fri, Apr 02, 2004 at 09:12:41AM +0200, Valentino Volonghi aka Dialtone wrote:
> Andrew Bennetts wrote:
> 
> >But the traceback you posted from the deferred chain was from the guts of
> >feedparser...
> > 
> >
> Looking at strace output it seems more like Twisted-related... Here is 
> the output:
> 
[...]
> select(726, [4 13 17 18 23 26 28 31 39 40 42 44 45 47 49 50 51 52 55 58 
[...]
> 665 666 667 670 671 675 676 677 678 681 683 684 687 715 725], [], [], NULL
> 
> @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
> Here it lock, but now, since I'm using strace, it won't restart after 
> Ctrl+C.
> 
> As I said before... The download of _ALL_ feeds has already finished 
> when twisted locks,

But then why is there still a huge number of file descriptors in the select
call?  Something is definitely very odd... :/

-Andrew.




From dialtone at aruba.it  Fri Apr  2 07:24:33 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Fri, 02 Apr 2004 14:24:33 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <20040402115711.GA14130@frobozz>
References: <20040331103927.GA8642@frobozz>
	<406AAB35.1000208@aruba.it>	<20040331123406.GA14465@frobozz>
	<406AC19B.20207@aruba.it>	<406AF172.2010000@aruba.it>
	<406BEB2F.5060608@aruba.it>	<20040401123123.GC14703@frobozz>
	<406C211B.2040904@aruba.it>	<20040401230100.GA32379@frobozz>
	<406D1269.9070700@aruba.it> <20040402115711.GA14130@frobozz>
Message-ID: <406D5B81.5090302@aruba.it>

Andrew Bennetts wrote:

>>665 666 667 670 671 675 676 677 678 681 683 684 687 715 725], [], [], NULL
>>
>>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>Here it lock, but now, since I'm using strace, it won't restart after 
>>Ctrl+C.
>>
>>As I said before... The download of _ALL_ feeds has already finished 
>>when twisted locks,
>>    
>>
>
>But then why is there still a huge number of file descriptors in the select
>call?  Something is definitely very odd... :/
>  
>
well, I think that's because there are more deferreds to be called or 
because even if the page has
been downloaded the reactor was busy with other feeds and not checking 
the select, I think...

I'm not that expert in twisted's internals, as you probably are.

thx for your help, I hope to solve this problem...

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/




From dialtone at aruba.it  Fri Apr  2 07:25:55 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Fri, 02 Apr 2004 14:25:55 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <20040402115711.GA14130@frobozz>
References: <20040331103927.GA8642@frobozz>
	<406AAB35.1000208@aruba.it>	<20040331123406.GA14465@frobozz>
	<406AC19B.20207@aruba.it>	<406AF172.2010000@aruba.it>
	<406BEB2F.5060608@aruba.it>	<20040401123123.GC14703@frobozz>
	<406C211B.2040904@aruba.it>	<20040401230100.GA32379@frobozz>
	<406D1269.9070700@aruba.it> <20040402115711.GA14130@frobozz>
Message-ID: <406D5BD3.3040101@aruba.it>

Andrew Bennetts wrote:

Oh... forgot to say.

A full version of the aggregator is ready for download at
http://xoomer.virgilio.it/dialtone/rss-aggregator.tar.bz2

Just in case you want to try the full download yourself, to see what's 
going on.

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/




From sam at couter.dropbear.id.au  Fri Apr  2 07:50:26 2004
From: sam at couter.dropbear.id.au (Sam Couter)
Date: Fri, 2 Apr 2004 22:50:26 +1000
Subject: [Twisted-Python] Trivial bug in StandardIO.connectionLost()
Message-ID: <20040402125026.GF3954@yosamite.tekno.house>

StandardIO.connectionLost() loses the reason for the lost connection.

Trivial patch:

Index: twisted/internet/stdio.py
===================================================================
--- twisted/internet/stdio.py	(revision 10451)
+++ twisted/internet/stdio.py	(working copy)
@@ -106,4 +106,4 @@
     def connectionLost(self, reason):
         """The connection was lost.
         """
-        self.protocol.connectionLost()
+        self.protocol.connectionLost(reason)

-- 
Sam "Eddie" Couter  |  mailto:sam at couter.dropbear.id.au
Debian Developer    |  mailto:eddie at debian.org
                    |  jabber:sam at teknohaus.dyndns.org
OpenPGP fingerprint:  A46B 9BB5 3148 7BEA 1F05  5BD5 8530 03AE DE89 C75C
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040402/79bc304c/attachment.pgp 

From itamar at itamarst.org  Fri Apr  2 09:41:00 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 02 Apr 2004 09:41:00 -0500
Subject: [Twisted-Python] Trivial bug in StandardIO.connectionLost()
In-Reply-To: <20040402125026.GF3954@yosamite.tekno.house>
References: <20040402125026.GF3954@yosamite.tekno.house>
Message-ID: <1080916859.13478.193.camel@sheriffpony>

Thanks, fixed.




From itamar at itamarst.org  Fri Apr  2 09:44:25 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 02 Apr 2004 09:44:25 -0500
Subject: [Twisted-Python] wxreactor
In-Reply-To: <406CF5FF.3070404@comcast.net>
References: <406C9CCD.9050204@csrules.dyndns.org>
	<406D0745.9090005@csrules.dyndns.org>	<406CEBA3.9070906@comcast.net>
	<200404012049.22251.uwe@oss4u.com>  <406CF5FF.3070404@comcast.net>
Message-ID: <1080917064.13478.198.camel@sheriffpony>

On Fri, 2004-04-02 at 00:11, Stephen Waterbury wrote:

> Itamar could chime in here, since he re-wrote the wxreactor
> and may have tested it with one or the other ... Itamar?

I don't have gtk2 wx support in debian. Please add a bug report, on
twistedmatrix.com/bugs/ - "wxreactor fails on linux using gtk2" or
something along those lines, assuming gtk2 really is the issue, so
someone with access to it should check.

But note that wx is fussy and annoying and that if you're using it you
may be better off in some cases just running it on different thread than
twisted.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From justinjohnson at fastmail.fm  Fri Apr  2 10:10:32 2004
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 02 Apr 2004 09:10:32 -0600
Subject: [Twisted-Python] Perspective Broker and [WINSOCK] Connection reset
	by peer
Message-ID: <1080918632.10210.183787025@webmail.messagingengine.com>

I'm trying to track down a problem and I'm not sure if Twisted is
involved or not.  Here are the details.

I administer Rational ClearCase.  One task I do is removing repositories
(a repository is called a VOB in ClearCase).  If I am logged onto the
machine locally I run the command "cleartool rmvob -f C:\VOBs\myvob.vbs".
 ClearCase uses RPC calls in some manner unknown to me for most of its
operations (probably with this command too).  So when I run the command,
some RPC interaction probably takes place and then the VOB is removed. 
The command is being run on the server where the VOB exists, but I
believe it still uses RPC, even if everything is local.

I have been using Twisted, specifically PB, to help me administer these
servers.  The PB service has a method remote_rmvob that can be called
remotely to remove a VOB.  Sometimes this works, but other times I get
the following error:

[WINSOCK] Connection reset by peer
cleartool: Error: Versioned object base "C:\VOBS\myvob.vbs" not deleted.
cleartool: Error: Trouble removing versioned object base
"C:\VOBS\myvob.vbs".

If I retry the PB operation again and again, eventually it succeeds.  On
some servers it takes more retries than others to get a successful
removal, but eventually it succeeds.  If I run the command locally with
no PB/Twisted involved I never get this error.

So I've been doing some research on this WINSOCK error, trying to
determine if it is being caused by the fact that I'm running the command
via PB.

The site http://frontier.userland.com/discuss/msgReader$173 has the
following info:

10054

WSAECONNRESET -- Connection reset by peer. This occurs when an
established connection is shut down for some reason by the remote
computer. 

The following thread discusses a similar problem with rsync where the
connection wasn't shutdown gracefully and a similar error occurred.

http://lists.samba.org/archive/rsync/2001-October/000407.html
http://lists.samba.org/archive/rsync/2002-April/002076.html

Does anyone with more networking knowledge than me have any ideas on what
might be causing this problem?  All I have is fuzzy ideas in my head,
like the command running in a ProcessProtocol might cause some problems,
or PB closing the connection before some important thing happens, ...  As
you can see, it is very fuzzy for me.  :-(

Any help you can provide is appreciated.
Thanks.
-Justin



From developer at csrules.dyndns.org  Fri Apr  2 10:28:41 2004
From: developer at csrules.dyndns.org (darryl)
Date: Fri, 02 Apr 2004 09:28:41 -0600
Subject: [Twisted-Python] wxreactor
In-Reply-To: <1080917064.13478.198.camel@sheriffpony>
References: <406C9CCD.9050204@csrules.dyndns.org>	<406D0745.9090005@csrules.dyndns.org>	<406CEBA3.9070906@comcast.net>	<200404012049.22251.uwe@oss4u.com>
	<406CF5FF.3070404@comcast.net>
	<1080917064.13478.198.camel@sheriffpony>
Message-ID: <406D86A9.6010301@csrules.dyndns.org>

Itamar Shtull-Trauring wrote:
> On Fri, 2004-04-02 at 00:11, Stephen Waterbury wrote:
> 
> 
>>Itamar could chime in here, since he re-wrote the wxreactor
>>and may have tested it with one or the other ... Itamar?
> 
> 
> I don't have gtk2 wx support in debian. Please add a bug report, on
> twistedmatrix.com/bugs/ - "wxreactor fails on linux using gtk2" or
> something along those lines, assuming gtk2 really is the issue, so
> someone with access to it should check.
> 
> But note that wx is fussy and annoying and that if you're using it you
> may be better off in some cases just running it on different thread than
> twisted.
> 

I am using gtk2, so if anyone else can confirm that this is what
is causing it we can file a bug report. I'm hesitant to do that if
it's only me.

As for running wx and twisted in their own threads. Is there
a recipe somewhere for doing that?

-darryl

-- 
http://randomthoughts.vandorp.ca/syncato/WK/blog



From exarkun at divmod.com  Fri Apr  2 10:35:36 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 02 Apr 2004 15:35:36 GMT
Subject: [Twisted-Python] Can I connect multiple class instances to 1
	Twisted factory?
Message-ID: <20040402153536.20554.1852910675.divmod.quotient.30@marconi>

On Thu, 1 Apr 2004 07:52:33 -0500, "Kaleb Brasee" <qpalzm at alltel.net> wrote:
> Is this even possible?  I'm designing a simple chat and game
> client/server as an intro to Python, and it would be nice to represent
> the different interfaces (public chat room, private chat rooms, game
> instances) as totally seperate classes and show them in totally seperate
> windows.
> 
> Given my basic understanding of Twisted, I see no way of doing this, and
> my whole GUI is contained in one class.  The project is doable this way,
> it would just be much better with multiple class and multiple window
> seperation.

  Twisted doesn't enforce any design strategies with respect to any GUI
code you use it with.  If you simply require that your ServerFactory
or ClientFactory be able to reference multiple GUI objects, this seems as
simple as:

    f = YourFactory(chatRoomGUIObject, privateRoomGUIObject,
                    gameGUIObject, ...)

  Not that I would go down that particular road myself.

> 
> I am using Tkinter to design my GUIs, using the specialized Twisted
> support code to setup the reactor.
> 
> If anyone can give me any direction, I would appreciate it very much.
> 

  Think about what information needs to move between the network layer
(where information is received from sockets), the application layer (where
messages from a particular user are differentiated from messages from 
another particular user), and the UI layer (where messages are rendered
in some fashion so as to be visible to the end user).

  Try and come up with the narrowest interface possible that lets that
information move between those layers.  In this instance, "narrow" would
mean not passing every GUI class you have to your factory.  Perhaps an
event broadcasting system would be useful, or maybe a single "GUI" class
that knows how to delegate messages down to the various other GUI classes
you have defined.

> Thanks

  Jp

> 



From exarkun at divmod.com  Fri Apr  2 10:47:06 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 02 Apr 2004 15:47:06 GMT
Subject: [Twisted-Python] ESMTPClient
Message-ID: <20040402154706.20554.1926053632.divmod.quotient.31@marconi>

On Thu, 11 Mar 2004 16:33:35 +0100, "Koen Van Herck" <koen_van_herck at yahoo.com> wrote:
>Does anyone have an example of using twisted.protocols.smtp.ESMTPClient ?
> I.e., I would like to write a client for sending mail to an SMTP server
> which requires authentication.

  ESMTPClient (along with several other client implementations in Twisted) supports
authentication by allowing you to specify a dictionary mapping authentication schemes
to authentication logic objects.

  For example, to use only Cram-MD5 authentication 


    from twisted.protocols import smtp
    from twisted.protocols.imap4 import CramMD5ClientAuthenticator

    class ESMTPClientFactory(protocol.ClientFactory):
        def __init__(self, *a, **kw):
            self.a, self.kw = a, kw

        def buildProtocol(self, addr):
            p = smtp.ESMTPClient('password')
            p.factory = self
            p.requireAuthentication = True
            p.authenticators = {'CRAM-MD5': CramMD5ClientAuthenticator('username')}
            return p

  Having had to write out the above, it is even more apparent to me how much work
is left to be done on the client side of many of our protocol implementations.

  The code is untested; please let me know if you run into any problems with it.

  Jp



From missive at hotmail.com  Fri Apr  2 11:27:13 2004
From: missive at hotmail.com (Lee Harr)
Date: Fri, 02 Apr 2004 16:27:13 +0000
Subject: [Twisted-Python] nevow debugging
Message-ID: <BAY2-F438ZdsIgSca7800043299@hotmail.com>

Hi;

I tried to contact the twisted-web list, but it seems to be having some
issues right now... I hope it is ok to ask here.

Does anyone have an example using nevow in conjunction with other
web service types? I really like the simplicity of "mktap web --path foo"
but my understanding is that twisted web development is going to
be nevow based.

Can these two things work together?

Is there a way to serve nevow pages from a .rpy?

I am looking for a way to debug that does not require restarting the
server every time I change the nevow .tac file.  (like how I can use
import mymod
reload(mymod)
in the .rpy while I am testing).

I hope this makes sense. I would probably just go with something
very simple, but I need to password protect some of the pages and
that seems to indicate using nevow.guard

Thank you for your time.

_________________________________________________________________
The new MSN 8: advanced junk mail protection and 2 months FREE* 
http://join.msn.com/?page=features/junkmail




From dialtone at aruba.it  Fri Apr  2 11:57:23 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Fri, 02 Apr 2004 18:57:23 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <20040402115711.GA14130@frobozz>
References: <20040331103927.GA8642@frobozz>
	<406AAB35.1000208@aruba.it>	<20040331123406.GA14465@frobozz>
	<406AC19B.20207@aruba.it>	<406AF172.2010000@aruba.it>
	<406BEB2F.5060608@aruba.it>	<20040401123123.GC14703@frobozz>
	<406C211B.2040904@aruba.it>	<20040401230100.GA32379@frobozz>
	<406D1269.9070700@aruba.it> <20040402115711.GA14130@frobozz>
Message-ID: <406D9B73.9060401@aruba.it>

Andrew Bennetts wrote:

>But then why is there still a huge number of file descriptors in the select
>call?  Something is definitely very odd... :/
>  
>
I made a very little (30 lines) script that reproduces the error which 
is attached:

the out file is located here:
http://xoomer.virgilio.it/dialtone/out.py
It only contains addressed, it's a single list of 730 addresses.


-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: debug_script.py
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040402/8faa62a0/attachment.txt 

From matteo.giacomazzi at email.it  Fri Apr  2 12:23:31 2004
From: matteo.giacomazzi at email.it (Matteo Giacomazzi)
Date: Fri, 2 Apr 2004 19:23:31 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <406D9B73.9060401@aruba.it>
References: <20040331103927.GA8642@frobozz> <406AAB35.1000208@aruba.it>
	<20040331123406.GA14465@frobozz> <406AC19B.20207@aruba.it>
	<406AF172.2010000@aruba.it> <406BEB2F.5060608@aruba.it>
	<20040401123123.GC14703@frobozz> <406C211B.2040904@aruba.it>
	<20040401230100.GA32379@frobozz> <406D1269.9070700@aruba.it>
	<20040402115711.GA14130@frobozz> <406D9B73.9060401@aruba.it>
Message-ID: <17215589234.20040402192331@email.it>

Hi Valentino,

> I  made  a  very  little (30 lines) script that reproduces the error
> which is attached:

> the out file is located here:
> http://xoomer.virgilio.it/dialtone/out.py
> It only contains addressed, it's a single list of 730 addresses.

Just tested twice: first time I had to press Ctrl+C on the 718th feed,
second time I had to press Ctrl+C on the 724th feed.

Regards,
 Matteo




From dialtone at aruba.it  Fri Apr  2 12:44:44 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Fri, 02 Apr 2004 19:44:44 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <17215589234.20040402192331@email.it>
References: <20040331103927.GA8642@frobozz>
	<406AAB35.1000208@aruba.it>	<20040331123406.GA14465@frobozz>
	<406AC19B.20207@aruba.it>	<406AF172.2010000@aruba.it>
	<406BEB2F.5060608@aruba.it>	<20040401123123.GC14703@frobozz>
	<406C211B.2040904@aruba.it>	<20040401230100.GA32379@frobozz>
	<406D1269.9070700@aruba.it>	<20040402115711.GA14130@frobozz>
	<406D9B73.9060401@aruba.it> <17215589234.20040402192331@email.it>
Message-ID: <406DA68C.4040704@aruba.it>

Matteo Giacomazzi wrote:

>Hi Valentino,
>  
>
Hi Matteo,

>Just tested twice: first time I had to press Ctrl+C on the 718th feed,
>second time I had to press Ctrl+C on the 724th feed.
>  
>
Ok then, at least I'm not the only one with this strange behaviour.

I hope that itamar and exarkun are running the script too (I'm talking 
to them on irc)...

It seems to be a bug in twisted.web.client.getPage() while closing the 
connection.

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/




From jn at who.net  Fri Apr  2 16:11:16 2004
From: jn at who.net (john nielsen)
Date: Fri, 02 Apr 2004 16:11:16 -0500
Subject: [Twisted-Python] help w/simple echo example w/deferred and threads
Message-ID: <20040402211117.1399C1F5037@ws1-12.us4.outblaze.com>

I am trying to make a very simple echo server use threads to understand how twisted handles blocking code.  I think I have the server ok but I am not sure how to have the client grab the data from a thread that finished some time later. If I comment out the sleep call, everything works fine. I looked at deferred but am a little confused. What is the simple code the client missing?

Thanks for any help,

john

Here is the server
###############
from twisted.spread import pb
from twisted.internet import reactor
from twisted.python import threadable
threadable.init()
import time,random

class t:
    def __init__(self):
        self.result=''
    def test(self,st='same'):
        time.sleep(1)
        print 'done sleeping'
        self.result=st+':'+str(time.time())
    
class Echoer(pb.Root):
    def __init__(self):
        self.a=t()
    def remote_echo(self, st):
            reactor.callInThread(self.a.test,st)
            print 'from thread',self.a.result
            return self.a.result

if __name__ == '__main__':
    reactor.listenTCP(8789, pb.PBServerFactory(Echoer()))
    reactor.run()

#Here is the client
from twisted.spread import pb
from twisted.internet import reactor, defer
from twisted.python import util

factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
d.addCallback(lambda object: object.callRemote("echo", "hello network"))
d.addCallback(lambda echo: 'server echoed: '+echo)
d.addErrback(lambda reason: 'error: '+str(reason.value))
d.addCallback(util.println)
d = factory.getRootObject()
d.addCallback(lambda object: object.callRemote("echo", "hello network"))
d.addCallback(lambda echo: 'server echoed: '+echo)
d.addErrback(lambda reason: 'error: '+str(reason.value))
d.addCallback(util.println)
d.addCallback(lambda _: reactor.stop())

-- 
_______________________________________________
Get your free email from http://www.iname.com




From dialtone at aruba.it  Fri Apr  2 16:42:28 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Fri, 02 Apr 2004 23:42:28 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <17215589234.20040402192331@email.it>
References: <20040331103927.GA8642@frobozz>
	<406AAB35.1000208@aruba.it>	<20040331123406.GA14465@frobozz>
	<406AC19B.20207@aruba.it>	<406AF172.2010000@aruba.it>
	<406BEB2F.5060608@aruba.it>	<20040401123123.GC14703@frobozz>
	<406C211B.2040904@aruba.it>	<20040401230100.GA32379@frobozz>
	<406D1269.9070700@aruba.it>	<20040402115711.GA14130@frobozz>
	<406D9B73.9060401@aruba.it> <17215589234.20040402192331@email.it>
Message-ID: <406DDE44.5020108@aruba.it>

Matteo Giacomazzi wrote:

http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue578

Ok, I filed an Issue on twisted at the address above. I hope it will be 
corrected as soon as possible.

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/




From radix at twistedmatrix.com  Fri Apr  2 20:21:43 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 02 Apr 2004 20:21:43 -0500
Subject: [Twisted-Python] nevow debugging
In-Reply-To: <BAY2-F438ZdsIgSca7800043299@hotmail.com>
References: <BAY2-F438ZdsIgSca7800043299@hotmail.com>
Message-ID: <406E11A7.6060300@twistedmatrix.com>

Lee Harr wrote:
> Hi;
> 
> I tried to contact the twisted-web list, but it seems to be having some
> issues right now... I hope it is ok to ask here.

These issues are fixed. Sorry for the trouble.



-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040402/6f2b20b9/attachment.pgp 

From exarkun at divmod.com  Fri Apr  2 16:49:53 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 02 Apr 2004 21:49:53 GMT
Subject: [Twisted-Python] help w/simple echo example w/deferred and threads
Message-ID: <20040402214953.24283.2121226275.divmod.quotient.1@ohm>

On Fri, 02 Apr 2004 16:11:16 -0500, "john nielsen" <jn at who.net> wrote:
>I am trying to make a very simple echo server use threads to understand how twisted handles blocking code.  I think I have the server ok but I am not sure how to have the client grab the data from a thread that finished some time later. If I comment out the sleep call, everything works fine. I looked at deferred but am a little confused. What is the simple code the client missing?
> 
> Thanks for any help,
> 
> john
> 
> Here is the server
> ###############
> from twisted.spread import pb
> from twisted.internet import reactor
> from twisted.python import threadable
> threadable.init()
> import time,random
> 
> class t:
>     def __init__(self):
>         self.result=''
>     def test(self,st='same'):
>         time.sleep(1)
>         print 'done sleeping'
>         self.result=st+':'+str(time.time())
>     
> class Echoer(pb.Root):
>     def __init__(self):
>         self.a=t()
>     def remote_echo(self, st):
>             reactor.callInThread(self.a.test,st)
>             print 'from thread',self.a.result
>             return self.a.result

  Instead of the above:

    class t:
        def test(self, st='same'):
            time.sleep(1)
            return st + ':' + str(time.time())

    from twisted.internet import threads

    class Echoer(pb.Root):
        def __init__(self):
            self.a = t()

        def remote_echo(self, st):
            return threads.deferToThread(self.a.test, st)

  This is a good example if "time.sleep(1)" is only a hand-wave put in place of real, computational-expensive code, which I assume it is.  If you simply want to delay the
result for one section, threads are not necessary:

        from twisted.internet import defer

        def remote_echo(self, st):
            d = defer.Deferred()
            reactor.callLater(1, d.callback, st + ':' + str(time.time() + 1))
            return d

  Be sure to read the Deferred howto in the documentation section of the website.

  Jp



From Burkhard.Kayser at t-online.de  Sat Apr  3 10:46:02 2004
From: Burkhard.Kayser at t-online.de (Burkhard Kayser)
Date: Sat, 3 Apr 2004 17:46:02 +0200
Subject: [Twisted-Python] example code for imap client
Message-ID: <200404031746.02086.burkhard.kayser@t-online.de>

I want to develop an imap client which filters my mail and moves incomming 
mails to certain folders. Is there any example code to start with ?

Burkhard




From exarkun at divmod.com  Sat Apr  3 17:08:04 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sat, 03 Apr 2004 22:08:04 GMT
Subject: [Twisted-Python] example code for imap client
Message-ID: <20040403220804.24283.357841685.divmod.quotient.13@ohm>

On Sat, 3 Apr 2004 17:46:02 +0200, Burkhard.Kayser at t-online.de (Burkhard Kayser) wrote:
>I want to develop an imap client which filters my mail and moves incomming 
> mails to certain folders. Is there any example code to start with ?
> 

  See either http://divmod.org/cvs/*checkout*/trunk/quotient/grabbers.py?content-type=text%2Fplain&rev=2833&root=Quotient or http://svn.twistedmatrix.com/cvs/*checkout*/trunk/doc/examples/imap4client.py?content-type=text%2Fplain&rev=10465&root=Twisted or http://svn.twistedmatrix.com/cvs/*checkout*/trunk/twisted/test/test_imap.py?content-type=text%2Fplain&rev=9932&root=Twisted

  Jp



From radix at twistedmatrix.com  Sat Apr  3 17:19:11 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 03 Apr 2004 17:19:11 -0500
Subject: [Twisted-Python] Twisted and Zope3 components systems
Message-ID: <406F385F.6030702@twistedmatrix.com>

I don't think anybody mentioned this on the list yet. AIUI the concensus 
made at PyCon was that Twisted would switch to Zope3's component system 
(with backwards compatibility). Their system seems very hookable and 
it'll provide everything we need. Their component system will be moved 
out into a third-party package and both teams will work on it. Itamar 
has taken responsibility for it for our end of the deal, last I heard. 
There's an issue in the tracker where progress will hopefully be reported:

http://www.twistedmatrix.com/bugs/issue572


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040403/1cbf3d2b/attachment.pgp 

From michal at pasternak.w.lub.pl  Sat Apr  3 19:14:06 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Sun, 4 Apr 2004 02:14:06 +0200
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <406F385F.6030702@twistedmatrix.com>
References: <406F385F.6030702@twistedmatrix.com>
Message-ID: <20040404001406.GA48009@pasternak.w.lub.pl>

Christopher Armstrong [Sat, Apr 03, 2004 at 05:19:11PM -0500]:
> made at PyCon was that Twisted would switch to Zope3's component system 
> (with backwards compatibility). Their system seems very hookable and 
> it'll provide everything we need.

Thanks for pointing that out - but as I don't know Zope components, what are
the pros? Could you elaborate on it, of course except the obvious ones
(compatibility)?



From radix at twistedmatrix.com  Sat Apr  3 20:28:29 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 03 Apr 2004 20:28:29 -0500
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <20040404001406.GA48009@pasternak.w.lub.pl>
References: <406F385F.6030702@twistedmatrix.com>
	<20040404001406.GA48009@pasternak.w.lub.pl>
Message-ID: <406F64BD.7090007@twistedmatrix.com>

Michal Pasternak wrote:
> Christopher Armstrong [Sat, Apr 03, 2004 at 05:19:11PM -0500]:
> 
>>made at PyCon was that Twisted would switch to Zope3's component system 
>>(with backwards compatibility). Their system seems very hookable and 
>>it'll provide everything we need.
> 
> 
> Thanks for pointing that out - but as I don't know Zope components, what are
> the pros? Could you elaborate on it, of course except the obvious ones
> (compatibility)?

Compatibility isn't even a main concern, thought it might be useful. 
Personally, I want it so we don't have to worry about developing and 
maintaining our own buggy, incomplete components system. Zope has most 
of the features our system has and more. The features it doesn't have 
(namely Componentized) are easily implemented with it.

Some of the things it does are string registration of adapters (although 
nevow's fork does has this implemented), and __class_implements__, so 
you can say that a *class* implements an interface without resorting to 
subtle metaclass hacks (this would be useful for serialization adapters: 
An instance can implement ISerializable, but the only place to put an 
IUnserializable would be on a class).

I'm sure there are more. Maybe others can chime in.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040403/1ee41356/attachment.pgp 

From andy at thecablelounge.com  Sun Apr  4 03:27:56 2004
From: andy at thecablelounge.com (Andy Gayton)
Date: Sun, 04 Apr 2004 17:27:56 +1000
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <406F64BD.7090007@twistedmatrix.com>
References: <406F385F.6030702@twistedmatrix.com>	<20040404001406.GA48009@pasternak.w.lub.pl>
	<406F64BD.7090007@twistedmatrix.com>
Message-ID: <406FB8FC.3030405@thecablelounge.com>

>> On Feb 26, 2004, Christopher Armstrong wrote:
>> But yeah, if PyProtocols does everything we need and there's a good
>> chance it will support our future crazy ideas, I think it's a good
>> idea
>> to switch. We'd probably wanna bump to 2.0 for such a switch. maybe?

> Christopher Armstrong wrote:
> AIUI the concensus made at PyCon was that Twisted would switch to
> Zope3's component system (with backwards compatibility).

Chris, does this mean twisted won't be looking to integrate with
PyProtocols and/or PEAK?

Either way this sounds like good news .. mm, partial adaptors + sexy
subinterface stuff I don't quite understand yet ;)

Andy.





From radix at twistedmatrix.com  Sun Apr  4 03:31:15 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 04 Apr 2004 03:31:15 -0400
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <406FB8FC.3030405@thecablelounge.com>
References: <406F385F.6030702@twistedmatrix.com>	<20040404001406.GA48009@pasternak.w.lub.pl>	<406F64BD.7090007@twistedmatrix.com>
	<406FB8FC.3030405@thecablelounge.com>
Message-ID: <406FB9C3.9020800@twistedmatrix.com>

Andy Gayton wrote:
>> Christopher Armstrong wrote:
>> AIUI the concensus made at PyCon was that Twisted would switch to
>> Zope3's component system (with backwards compatibility).
> 
> Chris, does this mean twisted won't be looking to integrate with
> PyProtocols and/or PEAK?

AIUI, yep. However, the flexibility of zope3's components system will 
hopefully make pyprotocols support for Twisted/Zope components easier 
and more robust.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040404/e260dd89/attachment.pgp 

From bob at redivi.com  Sun Apr  4 04:17:55 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 4 Apr 2004 04:17:55 -0400
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <406FB9C3.9020800@twistedmatrix.com>
References: <406F385F.6030702@twistedmatrix.com>	<20040404001406.GA48009@pasternak.w.lub.pl>	<406F64BD.7090007@twistedmatrix.com>
	<406FB8FC.3030405@thecablelounge.com>
	<406FB9C3.9020800@twistedmatrix.com>
Message-ID: <937FC080-8610-11D8-B16A-000A95686CD8@redivi.com>


On Apr 4, 2004, at 3:31 AM, Christopher Armstrong wrote:

> Andy Gayton wrote:
>>> Christopher Armstrong wrote:
>>> AIUI the concensus made at PyCon was that Twisted would switch to
>>> Zope3's component system (with backwards compatibility).
>> Chris, does this mean twisted won't be looking to integrate with
>> PyProtocols and/or PEAK?
>
> AIUI, yep. However, the flexibility of zope3's components system will 
> hopefully make pyprotocols support for Twisted/Zope components easier 
> and more robust.

PyProtocols doesn't have any issues dealing with Twisted and/or Zope3 
interfaces.. It's vice versa that is the problem, because PyProtocols 
is the most flexible of the three and was designed to be able to 
interoperate with other adaptation frameworks.

-bob




From pje at telecommunity.com  Sun Apr  4 11:55:21 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Sun, 04 Apr 2004 11:55:21 -0400
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <937FC080-8610-11D8-B16A-000A95686CD8@redivi.com>
References: <406FB9C3.9020800@twistedmatrix.com>
	<406F385F.6030702@twistedmatrix.com>
	<20040404001406.GA48009@pasternak.w.lub.pl>
	<406F64BD.7090007@twistedmatrix.com>
	<406FB8FC.3030405@thecablelounge.com>
	<406FB9C3.9020800@twistedmatrix.com>
Message-ID: <5.1.0.14.0.20040404114925.01ed0a60@mail.telecommunity.com>

At 04:17 AM 4/4/04 -0400, Bob Ippolito wrote:

>On Apr 4, 2004, at 3:31 AM, Christopher Armstrong wrote:
>
>>Andy Gayton wrote:
>>>>Christopher Armstrong wrote:
>>>>AIUI the concensus made at PyCon was that Twisted would switch to
>>>>Zope3's component system (with backwards compatibility).
>>>Chris, does this mean twisted won't be looking to integrate with
>>>PyProtocols and/or PEAK?
>>
>>AIUI, yep. However, the flexibility of zope3's components system will 
>>hopefully make pyprotocols support for Twisted/Zope components easier and 
>>more robust.
>
>PyProtocols doesn't have any issues dealing with Twisted and/or Zope3 
>interfaces.. It's vice versa that is the problem, because PyProtocols is 
>the most flexible of the three and was designed to be able to interoperate 
>with other adaptation frameworks.

This is good news for me, because supporting Twisted's interfaces was a big 
PITA.  Zope X3 interfaces support a much larger subset of PyProtocols 
functionality, and recent versions of Zope X3 have moved towards better PEP 
246 compatibility, as well as "stealing" many good implementation ideas 
from PyProtocols.

But it sounds like I will need to keep supporting the old interfaces for a 
while, yes?




From radix at twistedmatrix.com  Sun Apr  4 18:51:31 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 04 Apr 2004 18:51:31 -0400
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <5.1.0.14.0.20040404114925.01ed0a60@mail.telecommunity.com>
References: <406FB9C3.9020800@twistedmatrix.com>	<406F385F.6030702@twistedmatrix.com>	<20040404001406.GA48009@pasternak.w.lub.pl>	<406F64BD.7090007@twistedmatrix.com>	<406FB8FC.3030405@thecablelounge.com>	<406FB9C3.9020800@twistedmatrix.com>
	<5.1.0.14.0.20040404114925.01ed0a60@mail.telecommunity.com>
Message-ID: <40709173.3040604@twistedmatrix.com>

Phillip J. Eby wrote:
> This is good news for me, because supporting Twisted's interfaces was a 
> big PITA.  Zope X3 interfaces support a much larger subset of 
> PyProtocols functionality, and recent versions of Zope X3 have moved 
> towards better PEP 246 compatibility, as well as "stealing" many good 
> implementation ideas from PyProtocols.
> 
> But it sounds like I will need to keep supporting the old interfaces for 
> a while, yes?

Well, we're going to replace the implementation of t.p.c with one based 
on zope3's system... so the, uh, interface to the interface system will 
remain the same, but I think it will then be easier to support it. Of 
course, I don't know what problems we'll run in to.. We may need to keep 
some old implementation around for backwards-compatibility + deprecation 
warnings.


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040404/f19bb726/attachment.pgp 

From pje at telecommunity.com  Sun Apr  4 23:51:38 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Sun, 04 Apr 2004 23:51:38 -0400
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <40709173.3040604@twistedmatrix.com>
References: <5.1.0.14.0.20040404114925.01ed0a60@mail.telecommunity.com>
	<406FB9C3.9020800@twistedmatrix.com>
	<406F385F.6030702@twistedmatrix.com>
	<20040404001406.GA48009@pasternak.w.lub.pl>
	<406F64BD.7090007@twistedmatrix.com>
	<406FB8FC.3030405@thecablelounge.com>
	<406FB9C3.9020800@twistedmatrix.com>
	<5.1.0.14.0.20040404114925.01ed0a60@mail.telecommunity.com>
Message-ID: <5.1.0.14.0.20040404234603.02266010@mail.telecommunity.com>

At 06:51 PM 4/4/04 -0400, Christopher Armstrong wrote:
>Phillip J. Eby wrote:
>>This is good news for me, because supporting Twisted's interfaces was a 
>>big PITA.  Zope X3 interfaces support a much larger subset of PyProtocols 
>>functionality, and recent versions of Zope X3 have moved towards better 
>>PEP 246 compatibility, as well as "stealing" many good implementation 
>>ideas from PyProtocols.
>>But it sounds like I will need to keep supporting the old interfaces for 
>>a while, yes?
>
>Well, we're going to replace the implementation of t.p.c with one based on 
>zope3's system... so the, uh, interface to the interface system will 
>remain the same, but I think it will then be easier to support it. Of 
>course, I don't know what problems we'll run in to.. We may need to keep 
>some old implementation around for backwards-compatibility + deprecation 
>warnings.

Yeah, but you'll be using Zope's 'Interface' in place of the current 
'Interface' class, right?  You won't be keeping the current 'Interface' 
implementation, right?  (crossing fingers, looking hopeful)  :)

If I understand correctly, the latest Zope X3 'Interface' type supports 
calling to adapt, i.e. 'IFoo(bar)' is exactly equivalent to 
'adapt(bar,IFoo)'.  So, for interfaces at least, it should be pretty 
compatible going forward with what you've already got.




From radix at twistedmatrix.com  Mon Apr  5 01:12:00 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 05 Apr 2004 01:12:00 -0400
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <5.1.0.14.0.20040404234603.02266010@mail.telecommunity.com>
References: <5.1.0.14.0.20040404114925.01ed0a60@mail.telecommunity.com>	<406FB9C3.9020800@twistedmatrix.com>	<406F385F.6030702@twistedmatrix.com>	<20040404001406.GA48009@pasternak.w.lub.pl>	<406F64BD.7090007@twistedmatrix.com>	<406FB8FC.3030405@thecablelounge.com>	<406FB9C3.9020800@twistedmatrix.com>	<5.1.0.14.0.20040404114925.01ed0a60@mail.telecommunity.com>
	<5.1.0.14.0.20040404234603.02266010@mail.telecommunity.com>
Message-ID: <4070EAA0.6050206@twistedmatrix.com>

Phillip J. Eby wrote:
> Yeah, but you'll be using Zope's 'Interface' in place of the current 
> 'Interface' class, right?  You won't be keeping the current 'Interface' 
> implementation, right?  (crossing fingers, looking hopeful)  :)
> 
> If I understand correctly, the latest Zope X3 'Interface' type supports 
> calling to adapt, i.e. 'IFoo(bar)' is exactly equivalent to 
> 'adapt(bar,IFoo)'.  So, for interfaces at least, it should be pretty 
> compatible going forward with what you've already got.

Yep, and it also supports arbitrary hooks in the Interface calling 
thingy, so we can do whatever we want there >:)

So yes, we will probably be getting rid of MetaInterface, with its 
__new__. :-)

Itamar! You should step in. I don't know anything about how the 
implementation is really going to go.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040405/7e154c65/attachment.pgp 

From damon.fasching at sbcglobal.net  Tue Apr  6 01:36:23 2004
From: damon.fasching at sbcglobal.net (Damon Fasching)
Date: Mon, 5 Apr 2004 22:36:23 -0700 (PDT)
Subject: [Twisted-Python] making C extension module types Copyable
Message-ID: <20040406053623.99256.qmail@web80502.mail.yahoo.com>

Hi,

I am attempting to set up a system around Perspective
Broker.  A large part of the data which I need to pass
around is instances of a rather complex type which I
have defined in a C extension module.  This type is
built of a deeply nested hierarchy of C structures. 
At some levels of the hierarchy, structure elements
include malloced data buffers of arbitrary size.

I was hoping for some sort of miracle (see attached
code) and, no surprises, it didn't happen :(

How do I get my class to inherit from Copyable.  (I
suspect the answer is I can't.)  If I can't, how can I
make it copyable (lowercase)?

I was hoping that by wrapping MyType in a simple
Python class, MyTypeWrapper, which does inherit from
Copyable I would be able to pass it around.  I still
get an InsecureJelly exception for MyType.  So it
seems classes need to be registered with
setCopierForClass even if they are used only as
attributes of a class which is being copied.  That
seems reasonable.  But, with a type defined in a C
extension module, I don't have a class to
setCopierFor...  Also, does MyType also need to
subclass Copyable in order to setCopierForClass for
it?  Don't think I can do that either...

The second problem is probably more serious, if that's
possible.  I can't imagine a world generous enough
where MyType instances would actually be serialized,
deserialized and reconstructed properly on the
receiving end, nested structures, malloced buffers and
all.

Can some suggest a path?  I am writing both the client
and server code and so was hoping to use Perspective
Broker.  Serializing the object by hand is going to be
a pain, but not impossible.  If that's what needs to
be done, I am still not sure how to package it for
transmission.

Thanks for your help,
  Damon




From damon.fasching at sbcglobal.net  Tue Apr  6 01:49:29 2004
From: damon.fasching at sbcglobal.net (Damon Fasching)
Date: Mon, 5 Apr 2004 22:49:29 -0700 (PDT)
Subject: [Twisted-Python] making C extension module types Copyable
Message-ID: <20040406054929.59686.qmail@web80506.mail.yahoo.com>

Hi,

I am attempting to set up a system around Perspective
Broker.  A large part of the data which I need to pass
around is instances of a rather complex type which I
have defined in a C extension module.  This type is
built of a deeply nested hierarchy of C structures. 
At some levels of the hierarchy, structure elements
include malloced data buffers of arbitrary size.

I was hoping for some sort of miracle (see attached
code) and, no surprises, it didn't happen :(

How do I get my class to inherit from Copyable.  (I
suspect the answer is I can't.)  If I can't, how can I
make it copyable (lowercase)?

I was hoping that by wrapping MyType in a simple
Python class, MyTypeWrapper, which does inherit from
Copyable I would be able to pass it around.  I still
get an InsecureJelly exception for MyType.  So it
seems classes need to be registered with
setCopierForClass even if they are used only as
attributes of a class which is being copied.  That
seems reasonable.  But, with a type defined in a C
extension module, I don't have a class to
setCopierFor...  Also, does MyType also need to
subclass Copyable in order to setCopierForClass for
it?  Don't think I can do that either...

The second problem is probably more serious, if that's
possible.  I can't imagine a world generous enough
where MyType instances would actually be serialized,
deserialized and reconstructed properly on the
receiving end, nested structures, malloced buffers and
all.

Can some suggest a path?  I am writing both the client
and server code and so was hoping to use Perspective
Broker.  Serializing the object by hand is going to be
a pain, but not impossible.  If that's what needs to
be done, I am still not sure how to package it for
transmission.

Thanks for your help,
  Damon





From damon.fasching at sbcglobal.net  Tue Apr  6 01:57:33 2004
From: damon.fasching at sbcglobal.net (Damon Fasching)
Date: Mon, 5 Apr 2004 22:57:33 -0700 (PDT)
Subject: [Twisted-Python] attachments for prefious msg: making C extension
	types Copyable
Message-ID: <20040406055734.81135.qmail@web80508.mail.yahoo.com>


Hi,

I forgot to attach the code to back up my previous
email.  Here it is...

Damon
-------------- next part --------------
A non-text attachment was scrubbed...
Name: client.py
Type: application/octet-stream
Size: 1065 bytes
Desc: client.py
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040405/3baa1947/attachment.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: copyableClasses.py
Type: application/octet-stream
Size: 355 bytes
Desc: copyableClasses.py
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040405/3baa1947/attachment-0001.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: server.py
Type: application/octet-stream
Size: 915 bytes
Desc: server.py
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040405/3baa1947/attachment-0002.obj 

From damon.fasching at sbcglobal.net  Tue Apr  6 02:39:57 2004
From: damon.fasching at sbcglobal.net (Damon Fasching)
Date: Mon, 5 Apr 2004 23:39:57 -0700 (PDT)
Subject: [Twisted-Python] at what point does reactor.run() need to be called?
Message-ID: <20040406063957.35444.qmail@web80510.mail.yahoo.com>

The following two modules work fine together.

# ================= server.py ====================
from twisted.spread import pb
from twisted.internet import reactor

class ServerClass(pb.Root):
    def remote_shutdown(self):
        print "server stopping"
        reactor.stop()

reactor.listenTCP(8789,
pb.PBServerFactory(ServerClass()))
reactor.run()

# =========== client.py =============
from twisted.spread import pb
from twisted.internet import reactor

def gotRootObject(obj):
    d = obj.callRemote("shutdown")
    d.addCallback(serverStopped)
    d.addErrback(remoteCallFailure)

def serverStopped(result):
    print 'server stopped'
    stop()

def remoteCallFailure(reason):
    print "remote call failed: %s" % (reason.value)
    stop()

def stop():
    print "client stopping"
    reactor.stop()

factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
d.addCallback(gotRootObject)
d.addErrback(remoteCallFailure, "getRootObject")
reactor.run()

==================================

If the last lines of client.py are modified as
follows, everything it still works.

dfactory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
d.addCallback(gotRootObject)
reactor.run()
d.addErrback(remoteCallFailure, "getRootObject")

=======================================

However, if the call to reactor.run() is moved any
higher in client.py, the client seems to hang.  For
example, the following modification breaks it.

dfactory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
reactor.run()
d.addCallback(gotRootObject)
d.addErrback(remoteCallFailure, "getRootObject")

=============================================

Is there an obvious reason for this that I'm missing? 
I would like to be able to dynamically connect to new
servers after starting my application and intereacting
with other servers, and so after already having called
reactor.run().  Can I do this?  I'm sure it is
possible.  But the quick test above makes it seem that
I have to invoke getRootObject() AND attach a callback
to the returned deferred before I can invoke
reactor.run().

Thanks,
  Damon




From michal at pasternak.w.lub.pl  Tue Apr  6 06:01:27 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Tue, 6 Apr 2004 12:01:27 +0200
Subject: [Twisted-Python] at what point does reactor.run() need to be
	called?
In-Reply-To: <20040406063957.35444.qmail@web80510.mail.yahoo.com>
References: <20040406063957.35444.qmail@web80510.mail.yahoo.com>
Message-ID: <20040406100127.GA54390@pasternak.w.lub.pl>

Damon Fasching [Mon, Apr 05, 2004 at 11:39:57PM -0700]:
> The following two modules work fine together.

reactor.run() enters an event-controlled loop (it's the same as "mainloop"
in GUI toolkits you could program in), so you should call it after you do
all initialization stuff.

> However, if the call to reactor.run() is moved any
> higher in client.py, the client seems to hang.  For

It doesn't hang, it just gets the root object, but has no callback to pass
it to.

If it hangs (locks-up hard), it's a bug, examine & report it.

> I would like to be able to dynamically connect to new
> servers after starting my application and intereacting
> with other servers, and so after already having called
> reactor.run().  Can I do this?  I'm sure it is
> possible.  But the quick test above makes it seem that
> I have to invoke getRootObject() AND attach a callback
> to the returned deferred before I can invoke
> reactor.run().

Yes, that's right.

The point you've missed:

	def connectToNewServersNStuff():
		# connect to one server
		pass
	
	# do all initialisation
	# ...
	
	reactor.callLater(0, connectToNewServersNStuff)	
	reactor.run()	

The value, that getRootObject() returns is a Deferred object. This is a
"delayed" function call (which is also non-blocking), so the *real*
rootObject is passed to the Deferred.callback function.

-- 
mp



From bob at redivi.com  Tue Apr  6 10:32:34 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 6 Apr 2004 10:32:34 -0400
Subject: [Twisted-Python] at what point does reactor.run() need to be
	called?
In-Reply-To: <20040406100127.GA54390@pasternak.w.lub.pl>
References: <20040406063957.35444.qmail@web80510.mail.yahoo.com>
	<20040406100127.GA54390@pasternak.w.lub.pl>
Message-ID: <3E922BBF-87D7-11D8-84F3-000A95686CD8@redivi.com>

On Apr 6, 2004, at 6:01 AM, Michal Pasternak wrote:

> Damon Fasching [Mon, Apr 05, 2004 at 11:39:57PM -0700]:
>> The following two modules work fine together.
>
> reactor.run() enters an event-controlled loop (it's the same as 
> "mainloop"
> in GUI toolkits you could program in), so you should call it after you 
> do
> all initialization stuff.
>
>> However, if the call to reactor.run() is moved any
>> higher in client.py, the client seems to hang.  For
>
> It doesn't hang, it just gets the root object, but has no callback to 
> pass
> it to.
>
> If it hangs (locks-up hard), it's a bug, examine & report it.

I wouldn't say that "locks-up hard" in this particular scenario (the 
reactor isn't supposed to be doing anything) is always a bug -- at 
least in the case of an alternative reactor implementation.  If you 
send a signal (such as SIGINT or ctrl-C) to the program, and Python 
swallows it (as it normally would), the not-written-in-Python event 
loop won't know that it would be a good idea to run some Python code, 
so it will never quit.  If you really want to guarantee that your 
program is indeed interruptible you should add a little "waker" that 
runs Python code (even if it's little more than "pass") every few 
seconds via callLater.

This was an issue until very recently with cfreactor.  However, I have 
written a new signal handler (in PyObjC CVS) that is installed by 
default (when you use AppHelper.run[Console]EventLoop) that uses a mach 
port to wake the not-written-in-Python event loop and runs some Python 
code immediately.  So it's no longer a problem when you are using 
PyObjC to start your event loop in the recommended way, or you install 
the mach port signal handler manually (it registers to the 
CoreFoundation runLoop, which cfreactor uses if you do not specify one 
to reactor.run or you do not have an NSApplication instance created).

-bob




From ofir_r at hotmail.com  Tue Apr  6 21:44:37 2004
From: ofir_r at hotmail.com (Ofir Reichenberg)
Date: Wed, 07 Apr 2004 01:44:37 +0000
Subject: [Twisted-Python] POP3 Client
Message-ID: <BAY2-F33WZmaFxeyBkN0004e4fe@hotmail.com>

Hello,

I've been trying to build a simple POP3 client using Twisted and have had no 
luck.
I'm looking for something that retrieves the list of headers waiting on the 
server.

It appears that to do that I need to build a POP3 factory based on a domain. 
How can I build a domain ojbect for a "real" internet domain? (as opposed to 
a local server)

Thanks in advance,
Ofir

_________________________________________________________________
MSN 8 with e-mail virus protection service: 2 months FREE* 
http://join.msn.com/?page=features/virus




From exarkun at divmod.com  Tue Apr  6 23:51:08 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 07 Apr 2004 03:51:08 GMT
Subject: [Twisted-Python] POP3 Client
Message-ID: <20040407035108.28169.1418370702.divmod.quotient.5@ohm>

On Wed, 07 Apr 2004 01:44:37 +0000, "Ofir Reichenberg" <ofir_r at hotmail.com> wrote:
>Hello,
> 
> I've been trying to build a simple POP3 client using Twisted and have had no 
> luck.
> I'm looking for something that retrieves the list of headers waiting on the 
> server.

  There is a much nicer POP3 client class in Quotient (which needs to be folded back into Twisted ... when I get the time).  I highly recommend using it instead:

    http://divmod.org/cvs/trunk/quotient/proto/pop3client.py?rev=2718&root=Quotient&view=markup

> 
> It appears that to do that I need to build a POP3 factory based on a domain. 
> How can I build a domain ojbect for a "real" internet domain? (as opposed to 
> a local server)

  I'm not sure what you mean here.  What you want to do is something along these lines:

    from twisted.internet import protocol
    from wherever import POP3Client

    class MyPOP3Client(POP3Client):
        # Override some callbacks, like connectionMade or perhaps serverGreeting

    f = protocol.ClientFactory()
    f.protocol = MyPOP3Client
    
    from twisted.internet import reactor
    reactor.connectTCP('internet.host.name', 110, f)
    reactor.run()

  The above can be run just like any other Python program (it won't work, of course, as it is an incomplete example).  As alternatives to the last three lines, you can use twisted.application and the utility program "twistd" instead.

  Jp



From damon.fasching at sbcglobal.net  Wed Apr  7 04:04:34 2004
From: damon.fasching at sbcglobal.net (Damon Fasching)
Date: Wed, 7 Apr 2004 01:04:34 -0700 (PDT)
Subject: [Twisted-Python] follow up: at what point does reactor.run() need
	to be called?
Message-ID: <20040407080434.49961.qmail@web80506.mail.yahoo.com>

Hi,

I'm still confused.

Here is the working code, again.

# ================= server.py ====================
from twisted.spread import pb
from twisted.internet import reactor

class ServerClass(pb.Root):
    def remote_shutdown(self):
        print "server stopping"
        reactor.stop()

reactor.listenTCP(8789,
pb.PBServerFactory(ServerClass()))
reactor.run()

# =========== client.py =============
from twisted.spread import pb
from twisted.internet import reactor

def gotRootObject(obj):
    d = obj.callRemote("shutdown")
    d.addCallback(serverStopped)
    d.addErrback(remoteCallFailure)

def serverStopped(result):
    print 'server stopped'
    stop()

def remoteCallFailure(reason):
    print "remote call failed: %s" % (reason.value)
    stop()

def stop():
    print "client stopping"
    reactor.stop()

factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
d.addCallback(gotRootObject)
d.addErrback(remoteCallFailure, "getRootObject")
reactor.run()

============

And here is a modification to the last lines of
client.py which breaks it, in this case causes it to
hang.  (server does not get the shutdown call and
client is not stopped, so it seems the callback for
getRootObject is not executed.)

factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
reactor.run()
d.addCallback(gotRootObject)
d.addErrback(remoteCallFailure, "getRootObject")

==============================================

> It doesn't hang, it just gets the root object, but 
> has no callback to pass it to.

Huh?  What about the line
d.addCallback(gotRootObject)?  It's still there, just
a little further down, and d is still d, the deferred
object returned by getRootObject.  Does the call to
reactor.run() change the deferred, d?

What I really see as a limitation is that it seems
that I must connect to all of my servers before
starting the reactor, something which is only done
once per process.  And because of that, I can't
interact with any of the servers until I have
connected to all of them (because the reactor isn't
running before then).

For example, why does the client hang if I change the
last lines to the following?

reactor.run()
factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
d.addCallback(gotRootObject)
d.addErrback(remoteCallFailure, "getRootObject")

This seems to be an inevitable sequence of calls if I
want to be able to connect to a server after having
already connected to and intereacted with other
servers.  Start the reactor, do some stuff, and then
at a later point, connect to another server.  If I
substitute those lines for the original last 6 lines,
start the server and start the client...nothing
happens.  They both just sit there.

What have I misunderstood?

How can I connect to a server on the fly?

> The value, that getRootObject() returns is a
Deferred
> object. This is a "delayed" function call (which is
> also non-blocking), so the *real* rootObject is
> passed to the Deferred.callback function.

Right, it's the obj argument of the gotRootObject()
method in the original code.

> -- 
> mp

Thanks,
  Damon




From michal at pasternak.w.lub.pl  Wed Apr  7 04:35:43 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Wed, 7 Apr 2004 10:35:43 +0200
Subject: [Twisted-Python] follow up: at what point does reactor.run() need
	to be called?
In-Reply-To: <20040407080434.49961.qmail@web80506.mail.yahoo.com>
References: <20040407080434.49961.qmail@web80506.mail.yahoo.com>
Message-ID: <20040407083543.GA98065@pasternak.w.lub.pl>

Damon Fasching [Wed, Apr 07, 2004 at 01:04:34AM -0700]:
> I'm still confused.

Perhaps this will help you:

	from twisted.internet import reactor
	
	print "Press CTRL+C to see second message"
	reactor.run()
	print "Second message, program exiting"

> hang.  (server does not get the shutdown call and
> client is not stopped, so it seems the callback for
> getRootObject is not executed.)

How do you want to execute shutdown call if there are *no* functions calling
it? (because you add Callback _after_ the reactor loop has finished)?

> > It doesn't hang, it just gets the root object, but 
> > has no callback to pass it to.
> 
> Huh?  What about the line
> d.addCallback(gotRootObject)?  It's still there, just
> a little further down

Yes, after reactor.run() . Which basically sounds similar to "Hey, I call
that function, only after sys.exit(), why doesn't it run?"

> What I really see as a limitation is that it seems
> that I must connect to all of my servers before
> starting the reactor

I already gave you example how to start connecting servers _after_ you do
reactor.run() (use reactor.callLater)

I really don't understand what's your problem, perhaps re-read my responses
until sudden enlightement comes :)

> For example, why does the client hang if I change the
> last lines to the following?

> What have I misunderstood?
> 
> How can I connect to a server on the fly?

	from twisted.internet import reactor
	
	def failureSoQuitApp():
		print "failure"
		reactor.stop()
		
	def serverOneGotRootObjectAndShutdownReactor(*args):
		print "Got some args! %s" % args
		print "Quitting the app"
		reactor.stop()
	
	def connectServerOne():
		# do something
		factory = pb.PBClientFactory()
		reactor.connectTCP("localhost", 8080, factory)
		factory.getRootObject().addCallbacks(serverOneGotRootObjectAndShutdownReactor,
						     failureSoQuitApp)

	def connectServerTwo():
		# copy above stuff
		
	def connectServersAfterReactorHasBeenRun():
		connectServerOne()
		connectServerTwo()
		
	reactor.callLater(0, connectServersAfterReactorHasBeenRun)
	reactor.run()
	
You *must* run the reactor in order to collect deferred results.

-- 
mp



From michal at pasternak.w.lub.pl  Wed Apr  7 04:41:11 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Wed, 7 Apr 2004 10:41:11 +0200
Subject: [Twisted-Python] follow up: at what point does reactor.run() need
	to be called?
In-Reply-To: <20040407083543.GA98065@pasternak.w.lub.pl>
References: <20040407080434.49961.qmail@web80506.mail.yahoo.com>
	<20040407083543.GA98065@pasternak.w.lub.pl>
Message-ID: <20040407084111.GA98123@pasternak.w.lub.pl>

Michal Pasternak [Wed, Apr 07, 2004 at 10:35:43AM +0200]:
> 	from twisted.internet import reactor
> 	
> 	print "Press CTRL+C to see second message"
> 	reactor.run()
> 	print "Second message, program exiting"

Blah, maybe that wasn't the best example :) My point is, that reactor.run()
is a *blocking* call (from the application's view) - and that's how it has
to be, there's nothing wrong with that. So, adding callbacks after the
reactor has been run really has no effect. Hope, that this clarified a bit.



From nbm at mithrandr.moria.org  Wed Apr  7 04:48:55 2004
From: nbm at mithrandr.moria.org (Neil Blakey-Milner)
Date: Wed, 7 Apr 2004 10:48:55 +0200
Subject: [Twisted-Python] follow up: at what point does reactor.run() need
	to be called?
In-Reply-To: <20040407080434.49961.qmail@web80506.mail.yahoo.com>
References: <20040407080434.49961.qmail@web80506.mail.yahoo.com>
Message-ID: <20040407084854.GA27098@mithrandr.moria.org>

On Wed 2004-04-07 (01:04), Damon Fasching wrote:
> What I really see as a limitation is that it seems
> that I must connect to all of my servers before
> starting the reactor, something which is only done
> once per process.  And because of that, I can't
> interact with any of the servers until I have
> connected to all of them (because the reactor isn't
> running before then).
> 
> For example, why does the client hang if I change the
> last lines to the following?
> 
> reactor.run()
> factory = pb.PBClientFactory()
> reactor.connectTCP("localhost", 8789, factory)
> d = factory.getRootObject()
> d.addCallback(gotRootObject)
> d.addErrback(remoteCallFailure, "getRootObject")
> 
> This seems to be an inevitable sequence of calls if I
> want to be able to connect to a server after having
> already connected to and intereacted with other
> servers.  Start the reactor, do some stuff, and then
> at a later point, connect to another server.  If I
> substitute those lines for the original last 6 lines,
> start the server and start the client...nothing
> happens.  They both just sit there.
> 
> What have I misunderstood?
> 
> How can I connect to a server on the fly?

'reactor.run()' (almost) only returns when you're about to exit your
program.

It starts an "event loop", whereby it responds to events (such as
information arriving from sockets, timers expiring, &c.) for the rest of
its existence.

Event-based programming requires you to think about actions as responses
to events that may occur any time in the future relative to where you
are in the code.  So, you might:

1) After the reactor is called, a callLater'd function will be called
that will attempt to connect to a server.

2) An event informs you that you've been connected to that server, and
you send a query to the server.

3) An event informs you that the server has sent you some data (or
you're using LineReceiver, sux, or some other higher-level event
generator), and you close the connection.  Based on the data you
received, you want to connect to another server.

4) An event informs you that you've connected to the new server.  You
send the stored information or something derived from it to the server.

5) An event informs you that the new server has successfully received
your message (say, you're using SMTP and get an appropriate delivery
response).  You close the connection.  You set up a callLater function
to be called in five minutes start at step 1 again.

...

So, "at a later point" is a response based on an event - either
time-based or I/O-based (but probably abstracted away from simple socket
I/O for you).

If you start the reactor before setting up things that will generate
events, the reactor will never receive any events, and as such won't
start the response functions (callbacks), so basically nothing will
happen.

But you can set up new things that generate events (ie, connect to new
servers, start your own server, set up timers) after the reactor starts,
it just has to be in a response to some other event.

Neil
-- 
Neil Blakey-Milner
nbm at mithrandr.moria.org
http://mithrandr.moria.org/



From debonzi at gwyddion.com  Wed Apr  7 11:02:41 2004
From: debonzi at gwyddion.com (Daniel Henrique Debonzi)
Date: Wed, 07 Apr 2004 12:02:41 -0300
Subject: [Twisted-Python] Connection close identifier
Message-ID: <40741811.60505@gwyddion.com>

Hi folks,

I have a server-client system where sometimes the server closes the 
connection and sometimes client closes connection.
In each situation I must do diferent things.

Is there a way to know in connectionLost method who closes the connection??

I have already look in the reason atribute, but it seems to the same in 
both cases.

Any help??

Thanks
-- 
Daniel Henrique Debonzi - Gerente de Tecnologia
Gwyddion Industria e Com?rcio de Equipamentos Eletr?nicos
www.gwyddion.com
S?o Carlos, S?o Paulo
Brasil



From radix at twistedmatrix.com  Wed Apr  7 11:29:29 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 07 Apr 2004 11:29:29 -0400
Subject: [Twisted-Python] Connection close identifier
In-Reply-To: <40741811.60505@gwyddion.com>
References: <40741811.60505@gwyddion.com>
Message-ID: <40741E59.2040303@twistedmatrix.com>

Daniel Henrique Debonzi wrote:
> Hi folks,
> 
> I have a server-client system where sometimes the server closes the 
> connection and sometimes client closes connection.
> In each situation I must do diferent things.
> 
> Is there a way to know in connectionLost method who closes the connection??
> 
> I have already look in the reason atribute, but it seems to the same in 
> both cases.

I don't know if there's a Better Way, but presumably you already know 
who closed the connection, because _someone_ is calling loseConnection. 
In the code that calls loseConnection, say self.I_closed_the_connection 
= True, or something like that, and then you can check for that flag in 
connectionLost.


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040407/afb1c806/attachment.pgp 

From itamar at itamarst.org  Wed Apr  7 11:35:44 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 07 Apr 2004 11:35:44 -0400
Subject: [Twisted-Python] Connection close identifier
In-Reply-To: <40741811.60505@gwyddion.com>
References: <40741811.60505@gwyddion.com>
Message-ID: <1081352144.23208.982.camel@sheriffpony>

On Wed, 2004-04-07 at 11:02, Daniel Henrique Debonzi wrote:

> I have a server-client system where sometimes the server closes the 
> connection and sometimes client closes connection.
> In each situation I must do diferent things.

Seems like a bad idea to me (like, if TCP connection doesn't close
cleanly, do both sides think the other side closed? or what?). Better to
indicate this information on protocol level.

But if you must... In Twisted, what I'd do is have protocols remember
whether or not they did transport.loseConnection(), and thus they can
tell whether or not they were responsible for connectionLost event they
got.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From tv at tv.debian.net  Thu Apr  8 03:45:39 2004
From: tv at tv.debian.net (Tommi Virtanen)
Date: Thu, 08 Apr 2004 10:45:39 +0300
Subject: [Twisted-Python] Connection close identifier
In-Reply-To: <1081352144.23208.982.camel@sheriffpony>
References: <40741811.60505@gwyddion.com>
	<1081352144.23208.982.camel@sheriffpony>
Message-ID: <40750323.5010403@tv.debian.net>

Itamar Shtull-Trauring wrote:
> Seems like a bad idea to me (like, if TCP connection doesn't close
> cleanly, do both sides think the other side closed? or what?). Better to
> indicate this information on protocol level.

It _should_ be easy to tell broken TCP connections from properly shut
down ones, as broken TCP connections end in errors. In twisted, this
means ConnectionDone implies clean shutdown, anything else an error.

BUT, transparent proxies quite commonly break this, and make errors in
the proxied connection look like clean shutdowns in the original
connection. Userspace proxies don't have a choice, even.

Another case where this breaks is server applications that exit
suddenly. File descriptors are cleanly closed at process exit.

All in all, I agree with Itamar, but with some reservations you can
do that by using a flag in protocol and comparing against
ConnectionDone.



From waldbie at attglobal.net  Thu Apr  8 20:55:38 2004
From: waldbie at attglobal.net (Carl Waldbieser)
Date: Fri, 9 Apr 2004 00:55:38 +0000
Subject: [Twisted-Python] Clarification for IReactorSSL.ListenSSL(...)
Message-ID: <200404090055.38598.waldbie@attglobal.net>

I have been playing with the Twisted framework for a while, and it's really 
pretty neat!  Admittedly, the Interfaces and deffereds threw me for a loop 
for a while, but I think I'm finally starting to understand some of it.  I 
have already created a simple, stand-alone XMLRPC sever from following the 
examples in the docs, and now I'm trying to make one that runs over HTTPS.  I 
think that all I should have to do is substitute the 
IReacorSSL.ListenSSL(...) method for the IReactorTCP.ListenTCP(...) call I am 
using now, but this is where I am starting to get stuck.

One of the parameters for the ListenSSL(...) method is contextFactory.  After 
some digging, I think that the only concrete class available right now for 
this is DefaultOpenSSLContextFactory?  I am not entirely clear what the 
parameters used to initialize this object mean, though.  Specifically, the 
privateKeyFileName and certificateFileName are a little sketchy from my point 
of view.  I downloaded OpenSSL and read through the docs, and I Googled 
around for other related articles, etc., but the terminology in all these 
docs is somewhat difficult for me to digest.  Is there some sort of "OpenSSL 
For Dummies" tutorial I can read to figure out what files I am supposed to 
generate and what parameters they correspond to in the 
DefaultOpenSSLContextFactory.__init__(...) method?  

Also, does anyone know of an easier way for generating certificates than going 
through all the manual steps in the OpenSSL docs?  I want to use SSL because 
I want two machines to be able to talk to each other without passing 
sensitive data in the clear, so I am not sure if stuff like certificate 
authorities really need to fit into the picture.  Also, if someone could 
suggest a simpler way to accomplish a secure XMLRPC connection, I would also 
be interested in hearing any thoughts on that.

Any help is appreciated,
Carl Waldbieser




From wfh_178 at msn.com  Fri Apr  9 17:55:59 2004
From: wfh_178 at msn.com (simon moo)
Date: Sat, 10 Apr 2004 06:55:59 +0900
Subject: [Twisted-Python] Anyone can tell me what is the advantage of
	Twisted, compared to JAVA or C AS?
Message-ID: <BAY4-F413MYgySSoAn300004ba8@hotmail.com>

Hello,everybody.
Now I will start up a game program and am choosing a good platform to use.I 
am interested in Twisted but I don't know it verhy much.
Anyone can tell me what is the advantage of Twisted, compared to JAVA or C 
application server?An d what is the advantage of Twisted for MMP Game 
programming?

Sincerely yours,
Simon Moo

_________________________________________________________________
Take a break! Find destinations on MSN Travel. http://www.msn.com.sg/travel/




From trevp at trevp.net  Fri Apr  9 23:25:56 2004
From: trevp at trevp.net (Trevor Perrin)
Date: Fri, 09 Apr 2004 20:25:56 -0700
Subject: [Twisted-Python] Clarification for
  IReactorSSL.ListenSSL(...)
In-Reply-To: <200404090055.38598.waldbie@attglobal.net>
Message-ID: <5.2.0.9.0.20040409201645.037fc388@pop.sbcglobal.yahoo.com>


Hi Carl,

At 12:55 AM 4/9/2004 +0000, you wrote:
[...]
>One of the parameters for the ListenSSL(...) method is contextFactory.  After
>some digging, I think that the only concrete class available right now for
>this is DefaultOpenSSLContextFactory?  I am not entirely clear what the
>parameters used to initialize this object mean, though.  Specifically, the
>privateKeyFileName and certificateFileName are a little sketchy from my point
>of view.

These will be files containing a PEM-encoded private key and corresponding 
certificate.  They'll look like:

-----BEGIN CERTIFICATE-----
MIICoDCCAgmgAwIBAgIBADANBgkqhkiG9w0BAQQFADBFMQswCQYDVQQGEwJBVTET
[.....]

-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQDf7GIdMhGG92vnyngDqgELrEyU9nX2FI1/nyzgDd/w5FXgg5dH
[.....]


>Also, does anyone know of an easier way for generating certificates than 
>going
>through all the manual steps in the OpenSSL docs?

Generating a new key and self-signed cert with OpenSSL is really easy:
http://www.openssl.org/docs/HOWTO/

Then just pass these filenames, and it should work.


>I want to use SSL because
>I want two machines to be able to talk to each other without passing
>sensitive data in the clear, so I am not sure if stuff like certificate
>authorities really need to fit into the picture.

If I was you, I wouldn't use CAs, but would have each side authenticate the 
other based on a fingerprint (i.e. the hash value of the other's certificate).

I'm not sure how to do this with the Twisted's default SSL, but I've 
written a TLS library for Twisted that does this.  However, it may be a bit 
of effort to integrate in your particular app:
http://trevp.net/tlslite/


Trevor 




From andrew-twisted at puzzling.org  Sat Apr 10 02:56:16 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 10 Apr 2004 16:56:16 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r10512 - test to make sure
	xmlns= bug doesn't pop up again
In-Reply-To: <E1BC1f7-00010I-00@wolfwood>
References: <E1BC1f7-00010I-00@wolfwood>
Message-ID: <20040410065616.GA558@frobozz>

On Fri, Apr 09, 2004 at 01:27:37PM -0600, Jonathan Simms wrote:
> Author: slyphon
> Date: Fri Apr  9 13:27:37 2004
> New Revision: 10512
> 
> Modified:
>    trunk/twisted/test/test_xml.py
> Log:
> test to make sure xmlns= bug doesn't pop up again
> 
> 
> Modified: trunk/twisted/test/test_xml.py
> ==============================================================================
> --- trunk/twisted/test/test_xml.py	(original)
> +++ trunk/twisted/test/test_xml.py	Fri Apr  9 13:27:37 2004
> @@ -447,8 +447,13 @@
>              if result:
>                  self.assert_(hasattr(result[0], 'tagName'))
>  
> +    def testParseXMLStringWithUnicode(self):
> +        # this is a regression test. dash fixed something to do with xmlns=
> +        # and this tests to make sure that a particular case works
>          
[snip massive heap of xml]
> +
> +        node = microdom.parseString(str)

Tests like this help me appreciaate why Jim Fulton likes doctest so much.

What the hell is this actually testing?  Which "particular case" in that XML
is the relevant one?  I'm rather skeptical that that is a minimal test case,
and it certainly isn't a readable one. The only hints given are that it
somehow involves parsing, unicode, and xmlns, which isn't very specific.
I'm also a little skeptical that the bug and its fix have been properly
understood, if no-one has taken the time to figure out a simple way to
demonstrate it.

Tests are code too, and should be comprehensible and maintainable like any
other code.

I don't mind this sort of thing as an interim measure, but there wasn't even
a single FIXME in this test to suggest that there was anything wrong with
it.

-Andrew.




From waldbie at attglobal.net  Sat Apr 10 12:59:46 2004
From: waldbie at attglobal.net (Carl Waldbieser)
Date: Sat, 10 Apr 2004 16:59:46 +0000
Subject: [Twisted-Python] Clarification for  IReactorSSL.ListenSSL(...)
In-Reply-To: <5.2.0.9.0.20040409201645.037fc388@pop.sbcglobal.yahoo.com>
References: <5.2.0.9.0.20040409201645.037fc388@pop.sbcglobal.yahoo.com>
Message-ID: <200404101659.46905.waldbie@attglobal.net>

Trevor,

I will look into this.  I am not really familiar with how certificates are 
supposed to work from the client side of things, but it is definitely worth 
looking into.

The project I am working on is still in its very early stages, so integration 
is not so much of a problem.  I simply lack comprehensive knowledge on issues 
related to security, as well as implementation knowledge.

In a nutshell, we are attempting to pass some small but sensitive info 
(username/password) from a client in a DMZ to a server sitting in a trusted 
network.  Even without a strong background in computer security, I am able to 
recognize that that sounds pretty insecure, which is why I am exploring the 
possibility of XMLRPC over HTTPs.  

There are probably other ways of accomplishing this goal, too.  Originally, I 
was looking into Twisted.Conch, but I believe I read in the docs that it was 
not recommended for production use yet(?).

Thanks,
Carl Waldbieser

>On Saturday 10 April 2004 03:25 am, Trevor Perrin wrote:

>
> Generating a new key and self-signed cert with OpenSSL is really easy:
> http://www.openssl.org/docs/HOWTO/
>
> Then just pass these filenames, and it should work.
>
> >I want to use SSL because
> >I want two machines to be able to talk to each other without passing
> >sensitive data in the clear, so I am not sure if stuff like certificate
> >authorities really need to fit into the picture.
>
> If I was you, I wouldn't use CAs, but would have each side authenticate the
> other based on a fingerprint (i.e. the hash value of the other's
> certificate).
>
> I'm not sure how to do this with the Twisted's default SSL, but I've
> written a TLS library for Twisted that does this.  However, it may be a bit
> of effort to integrate in your particular app:
> http://trevp.net/tlslite/
>
>
> Trevor
>





From trevp at trevp.net  Sat Apr 10 17:19:10 2004
From: trevp at trevp.net (Trevor Perrin)
Date: Sat, 10 Apr 2004 14:19:10 -0700
Subject: [Twisted-Python] Clarification for 
  IReactorSSL.ListenSSL(...)
In-Reply-To: <200404101659.46905.waldbie@attglobal.net>
References: <5.2.0.9.0.20040409201645.037fc388@pop.sbcglobal.yahoo.com>
	<5.2.0.9.0.20040409201645.037fc388@pop.sbcglobal.yahoo.com>
Message-ID: <5.2.0.9.0.20040410141208.03704de8@pop.sbcglobal.yahoo.com>

At 04:59 PM 4/10/2004 +0000, Carl Waldbieser wrote:
>[...]
>The project I am working on is still in its very early stages, so integration
>is not so much of a problem.  I simply lack comprehensive knowledge on issues
>related to security, as well as implementation knowledge.

If I can help, I'm happy to answer questions here or off-list.


>In a nutshell, we are attempting to pass some small but sensitive info
>(username/password) from a client in a DMZ to a server sitting in a trusted
>network.  Even without a strong background in computer security, I am able to
>recognize that that sounds pretty insecure, which is why I am exploring the
>possibility of XMLRPC over HTTPs.

Are you trying to pass the username/password to the server, or 
*authenticate* with the username/password?

If the latter, there are protocols like SRP which let you do mutual 
authentication with a password without sending it over the network - 
basically, each side proves to the other that it knows the password, 
without exposing the password in any way.

So you get strong mutual authentication, but you don't have to mess with 
certs.  TLS Lite provides this, if you're interested.

Trevor 




From waldbie at attglobal.net  Sat Apr 10 22:13:43 2004
From: waldbie at attglobal.net (Carl Waldbieser)
Date: Sun, 11 Apr 2004 02:13:43 +0000
Subject: [Twisted-Python] Clarification for   IReactorSSL.ListenSSL(...)
In-Reply-To: <5.2.0.9.0.20040410141208.03704de8@pop.sbcglobal.yahoo.com>
References: <5.2.0.9.0.20040409201645.037fc388@pop.sbcglobal.yahoo.com>
	<5.2.0.9.0.20040410141208.03704de8@pop.sbcglobal.yahoo.com>
Message-ID: <200404110213.43115.waldbie@attglobal.net>

Trevor,

We are trying to allow users to authenticate with the username and password.  
There is really no reason other than the purpose of authentication that the 
application needs to involve the trusted network at all.

I would be interested in learning how the mutual authentication you are 
describing works.  TLS Lite may be just what I am looking for.  If this topic 
is no longer really Twisted-related, I have no objections to moving the 
discussion off-list.

Thanks,
Carl Waldbieser

>
> Are you trying to pass the username/password to the server, or
> *authenticate* with the username/password?
>
> If the latter, there are protocols like SRP which let you do mutual
> authentication with a password without sending it over the network -
> basically, each side proves to the other that it knows the password,
> without exposing the password in any way.
>
> So you get strong mutual authentication, but you don't have to mess with
> certs.  TLS Lite provides this, if you're interested.
>
> Trevor
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From dialtone at aruba.it  Sun Apr 11 18:48:01 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Mon, 12 Apr 2004 00:48:01 +0200
Subject: [Twisted-Python] Status of twisted.xish.xpath
Message-ID: <4079CB21.5060101@aruba.it>

I was wondering what's the status of the xpath parser in Twisted.

I need to write a feed aggregator which does not uses the Mark Pilgrim's 
parser, since
that's a dependency and because that's not a really good piece of 
software IMHO
(it's hard to read and debug). Just look at what has been done here:
http://xoomer.virgilio.it/dialtone/rsschannel.py # written by mg from Nevow
with Nevow and the current xish.xpath, and now look at how this has been 
done in the
feedparser from Pilgrim. I wonder what could be done with a complete 
implementation
of XPath at developers disposal. There are plenty feeds versions to 
support like Atom,
CDF, RDF and 9 rss versions. Also Nevow would be greatly enanched by an 
updated
xpath implementation.

I would like to know if it's actively developed, or if it's 'deprecated' 
in favour of
external xpath implementations.

I would really like  to avoid telling my clients to install 4Suite or 
libxml2 or anything else.
Just using Twisted would be perfect since it's just 1.6Mb of portable 
python code (and in
future it will be split in various packages, so it's even smaller).

Thx for your efforts!

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
Blog: http://vvolonghi.blogspot.com
Home Page: http://xoomer.virgilio.it/dialtone/





From ofir_r at hotmail.com  Mon Apr 12 10:45:52 2004
From: ofir_r at hotmail.com (Ofir Reichenberg)
Date: Mon, 12 Apr 2004 14:45:52 +0000
Subject: [Twisted-Python] POP3 Client
Message-ID: <BAY2-F112IwNdJiRcJq0005618e@hotmail.com>





&gt;From: &lt;exarkun at divmod.com&gt;
&gt;Subject: Re: [Twisted-Python] POP3 Client
&gt; &gt; I've been trying to build a simple POP3 client using Twisted and 
have had no
&gt; &gt; luck.
&gt; &gt; I'm looking for something that retrieves the list of headers 
waiting on the
&gt; &gt; server.
&gt;
&gt;   There is a much nicer POP3 client class in Quotient (which needs to 
be folded back into Twisted ... when I get the time).  I highly recommend 
using it instead:
&gt;http://divmod.org/cvs/trunk/quotient/proto/pop3client.py?rev=2718&amp;root=Quotient&amp;view=markup

This looks exactly like what I need. Thanks a lot.

&gt;
&gt; &gt;
&gt; &gt; It appears that to do that I need to build a POP3 factory based on 
a domain.
&gt; &gt; How can I build a domain ojbect for a &quot;real&quot; internet 
domain? (as opposed to
&gt; &gt; a local server)
&gt;
&gt;   I'm not sure what you mean here.  What you want to do is something 
along these lines:
&gt;
&gt;     from twisted.internet import protocol
&gt;     from wherever import POP3Client
&gt;
&gt;     class MyPOP3Client(POP3Client):
&gt;         # Override some callbacks, like connectionMade or perhaps 
serverGreeting
&gt;
&gt;     f = protocol.ClientFactory()
&gt;     f.protocol = MyPOP3Client
&gt;
&gt;     from twisted.internet import reactor
&gt;     reactor.connectTCP('internet.host.name', 110, f)
&gt;     reactor.run()
&gt;
&gt;   The above can be run just like any other Python program (it won't 
work, of course, as it is an incomplete example).  As alternatives to the 
last three lines, you can use twisted.application and the utility program 
&quot;twistd&quot; instead.
&gt;

Hmmm, I see what you mean.
I didn't know of the ClientFactory class.
This was the answer to my question, but I'll give Quotient a try first. :)

Thanks again,
Ofir

_________________________________________________________________
STOP MORE SPAM with the new MSN 8 and get 2 months FREE* 
http://join.msn.com/?page=features/junkmail




From dizzyd at jabber.org  Mon Apr 12 11:59:08 2004
From: dizzyd at jabber.org (Dave Smith)
Date: Mon, 12 Apr 2004 09:59:08 -0600 (MDT)
Subject: [Twisted-Python] Status of twisted.xish.xpath
In-Reply-To: <4079CB21.5060101@aruba.it>
References: <4079CB21.5060101@aruba.it>
Message-ID: <2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com>

> I was wondering what's the status of the xpath parser in Twisted.

Well, xish.xpath isn't meant to be a "full" xpath implementation, per se.
I originally wrote it be used for routing XML packets from a Jabber
connection, so it's really focused on providing matching/equality
operations versus the transforms and other operations traditionally
associated with XPath engines. In my happy little world, XPath is not a
operational language -- it's a filtering/matching syntax.

I wasn't aware that Nevow was using xish.xpath, but that's cool if it is.
I'll be glad to add additional logic as necessary to enhance the
filtering/matching aspects of XPath to support a RSS aggregator, but I'd
prefer to not see xish.xpath become a "full" XPath engine.

FWIW, xish.xpath is "actively developed", there just haven't been any
feature or bug requests against it for a while. :)

Just my $0.02.

D.



From itamar at itamarst.org  Mon Apr 12 12:04:24 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 12 Apr 2004 12:04:24 -0400
Subject: [Twisted-Python] RFC: UDP's transport.write() accepting hostnames
Message-ID: <1081785863.7297.3722.camel@sheriffpony>

I'd appreciate comments added to the issue -
http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue586

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From dp at ulaluma.com  Mon Apr 12 12:18:32 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Mon, 12 Apr 2004 12:18:32 -0400
Subject: [Twisted-Python] Status of twisted.xish.xpath
In-Reply-To: <2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com>
References: <4079CB21.5060101@aruba.it>
	<2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com>
Message-ID: <0ACD29E6-8C9D-11D8-9C56-000A95864FC4@ulaluma.com>


On Apr 12, 2004, at 11:59 AM, Dave Smith wrote:

>> I was wondering what's the status of the xpath parser in Twisted.
>
> Well, xish.xpath isn't meant to be a "full" xpath implementation, per 
> se.
> I originally wrote it be used for routing XML packets from a Jabber
> connection, so it's really focused on providing matching/equality
> operations versus the transforms and other operations traditionally
> associated with XPath engines. In my happy little world, XPath is not a
> operational language -- it's a filtering/matching syntax.

Does XPath actually specify transformation operations? I thought that 
was up to something like XSLT. I agree that XPath should only be used 
for node matching, and that transformation should be done in other 
ways.

> I wasn't aware that Nevow was using xish.xpath, but that's cool if it 
> is.
> I'll be glad to add additional logic as necessary to enhance the
> filtering/matching aspects of XPath to support a RSS aggregator, but 
> I'd
> prefer to not see xish.xpath become a "full" XPath engine.

This is not related to the current discussion, but I have been 
contemplating replacing nevow's fixed scheme which only looks for nodes 
with nevow 'specials' on them (such as render and data) with a 
dictionary of {xpath expression object: transformation function}. It is 
not something I am planning on doing right away, but eventually, and it 
would be nice to use some existing code for this.

> FWIW, xish.xpath is "actively developed", there just haven't been any
> feature or bug requests against it for a while. :)

I wish more software were in this mode. "It's flexible enough to use 
without having to change the internals" is the holy grail of software 
engineering.

dp




From soso_pub at yahoo.com  Mon Apr 12 17:28:06 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Mon, 12 Apr 2004 14:28:06 -0700 (PDT)
Subject: [Twisted-Python] addCallbacks issue
Message-ID: <20040412212806.51827.qmail@web14811.mail.yahoo.com>

Hi everyone,

I'm using PB in my application and I have problems
with addCallbacks call, it's not working as expected,
at least what I expect. The following snippet:

factory = pb.PBClientFactory()
reactor.connectTCP('localhost', 2174, factory)
d = factory.getRootObject()
d.addCallbacks(self.gotRoot, self.netError)

when an error occures self.netError doesn't get
called, instead I get something like: "Unhandled error
in Deferred:" which I assume is an error message
telling me that the deffered is not bound to an error
handler.

Now if I replace the last line like this:

factory = pb.PBClientFactory()
reactor.connectTCP('localhost', 2174, factory)
d = factory.getRootObject()
d.addCallback(self.gotRoot)
d.addErrback(self.netError)

the error handler gets called and everything is ok.

Any idea why addCallbacks fails to bound the error
handler? I use Twisted 1.2.0.

Thanks,
Sorin


__________________________________
Do you Yahoo!?
Yahoo! Tax Center - File online by April 15th
http://taxes.yahoo.com/filing.html



From radix at twistedmatrix.com  Mon Apr 12 18:08:11 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 12 Apr 2004 18:08:11 -0400
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <20040412212806.51827.qmail@web14811.mail.yahoo.com>
References: <20040412212806.51827.qmail@web14811.mail.yahoo.com>
Message-ID: <407B134B.30403@twistedmatrix.com>

Sorin C. wrote:
> Any idea why addCallbacks fails to bound the error
> handler? I use Twisted 1.2.0.

Read the documentation.

http://twistedmatrix.com/documents/howto/defer

"""
There's another potential gotcha here. There's a method 
twisted.internet.defer.Deferred.addCallbacks which is similar to, but 
not exactly the same as, addCallback followed by addErrback. In 
particular, consider these two cases:

# Case 1
d = getDeferredFromSomewhere()
d.addCallback(callback1)
d.addErrback(errback1)
d.addCallback(callback2)
d.addErrback(errback2)

# Case 2
d = getDeferredFromSomewhere()
d.addCallbacks(callback1, errback1)
d.addCallbacks(callback2, errback2)

If an error occurs in callback1, then for Case 1 errback1 will be called 
with the failure. For Case 2, errback2 will be called. Be careful with 
your callbacks and errbacks.

"""

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040412/cd810cb9/attachment.pgp 

From itamar at itamarst.org  Mon Apr 12 18:43:33 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 12 Apr 2004 18:43:33 -0400
Subject: [Twisted-Python] [Fwd: [boston-pig] Possible summer internship]
Message-ID: <1081809813.7295.4126.camel@sheriffpony>


-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html
-------------- next part --------------
An embedded message was scrubbed...
From: "Daniel Joseph Barnhart Clark" <dclark at member.fsf.org>
Subject: [boston-pig] Possible summer internship
Date: Mon, 12 Apr 2004 18:31:23 -0400
Size: 3322
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040412/28949ad4/attachment.eml 

From radix at twistedmatrix.com  Mon Apr 12 20:52:05 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 12 Apr 2004 20:52:05 -0400
Subject: [Twisted-Python] [Fwd: [boston-pig] Possible summer internship]
In-Reply-To: <1081809813.7295.4126.camel@sheriffpony>
References: <1081809813.7295.4126.camel@sheriffpony>
Message-ID: <407B39B5.9010405@twistedmatrix.com>

Itamar Shtull-Trauring wrote:
> Subject: [boston-pig] Possible summer internship
> From: "Daniel Joseph Barnhart Clark" <dclark at member.fsf.org>
> To: boston-pig at wingide.com

> There is a possible summer internship at the large computer company I
> work for in near Lowell, MA ..., so if you are or know of any
> College (or really good High School)

Bah. :P

> students with excellent Python
> programming skills (Unix, Sys Admin, and C/GNU Toolchain skills would be
> a plus), please send me resumes / give me a call at 617-877-0702 ASAP.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040412/a5ae9375/attachment.pgp 

From soso_pub at yahoo.com  Tue Apr 13 04:19:30 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Tue, 13 Apr 2004 01:19:30 -0700 (PDT)
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <407B134B.30403@twistedmatrix.com>
Message-ID: <20040413081930.53419.qmail@web14810.mail.yahoo.com>

Hi,

Yes, I saw this bit of documentation but what I
understand from it is that if you chain multiple
addCallbacks to the same deferred then the error
handler from the last addCallbacks call will be
called. What am I missing?
Anyway, the API docs say:

"""
addCallbacks(self, callback, errback=None,
callbackArgs=None, callbackKeywords=None,
errbackArgs=None, errbackKeywords=None, asDefaults=0)

Add a pair of callbacks (success and error) to this
Deferred.
"""

So shouldn't 

addCallbacks(success, failure)

be equivalent with

addCallback(success)
addErrback(failure)

?
--- Christopher Armstrong <radix at twistedmatrix.com>
wrote:
> Sorin C. wrote:
> > Any idea why addCallbacks fails to bound the error
> > handler? I use Twisted 1.2.0.
> 
> Read the documentation.
> 
> http://twistedmatrix.com/documents/howto/defer
> 
> """
> There's another potential gotcha here. There's a
> method 
> twisted.internet.defer.Deferred.addCallbacks which
> is similar to, but 
> not exactly the same as, addCallback followed by
> addErrback. In 
> particular, consider these two cases:
> 
> # Case 1
> d = getDeferredFromSomewhere()
> d.addCallback(callback1)
> d.addErrback(errback1)
> d.addCallback(callback2)
> d.addErrback(errback2)
> 
> # Case 2
> d = getDeferredFromSomewhere()
> d.addCallbacks(callback1, errback1)
> d.addCallbacks(callback2, errback2)
> 
> If an error occurs in callback1, then for Case 1
> errback1 will be called 
> with the failure. For Case 2, errback2 will be
> called. Be careful with 
> your callbacks and errbacks.
> 
> """
> 
> -- 
>   Twisted | Christopher Armstrong: International Man
> of Twistery
>    Radix  |          Release Manager,  Twisted
> Project
> ---------+           http://radix.twistedmatrix.com/



	
		
__________________________________
Do you Yahoo!?
Yahoo! Small Business $15K Web Design Giveaway 
http://promotions.yahoo.com/design_giveaway/



From andrew-twisted at puzzling.org  Tue Apr 13 06:31:46 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 13 Apr 2004 20:31:46 +1000
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <20040413081930.53419.qmail@web14810.mail.yahoo.com>
References: <407B134B.30403@twistedmatrix.com>
	<20040413081930.53419.qmail@web14810.mail.yahoo.com>
Message-ID: <20040413103146.GA549@frobozz>

On Tue, Apr 13, 2004 at 01:19:30AM -0700, Sorin C. wrote:
> Hi,
> 
> Yes, I saw this bit of documentation but what I
> understand from it is that if you chain multiple
> addCallbacks to the same deferred then the error
> handler from the last addCallbacks call will be
> called. What am I missing?

You misunderstand the documentation, which is a shame because that section
is there specifically to be as clear as possible about this point :(  I
wonder how we can do better?

Anyway, have another look at the diagrams in that page; they hopefully will
give you a clear picture of how the callback and errback chains interact.

> Anyway, the API docs say:
> """
> addCallbacks(self, callback, errback=None,
> callbackArgs=None, callbackKeywords=None,
> errbackArgs=None, errbackKeywords=None, asDefaults=0)
> 
> Add a pair of callbacks (success and error) to this
> Deferred.
> """

And this is correct.

> 
> So shouldn't 
> 
> addCallbacks(success, failure)
> 
> be equivalent with
> 
> addCallback(success)
> addErrback(failure)

Definitely not.

Deferred callback chains are a sequence of callback/errback pairs.  Calling
just addCallback or addErrback adds a pair where one half of that pair is
None.  When a Deferred is fired, it calls one of the items in each pair in
turn, depending on whether it's currently handling a result or an error --
but if the item it would call is None, it just moves directly to the pair
without doing anything.

That's a pretty hairy description that's better explained by the diagrams in
the Deferred howto, I think -- but suggestions (and ideally patches) on how
to improve the Deferred docs are of course welcome.

I guess the basic confusion is that people expect addCallbacks(good, bad) to
add 'good' and then add 'bad' to the sequence, when actually they are added
at the same place, which is why an exception in 'good' will be passed to the
next errback after 'bad'.

I've tried to avoid resorting to bad ascii art to explain this... let me
know if I've helped :)

-Andrew.




From stephen at thorne.id.au  Tue Apr 13 07:57:10 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Tue, 13 Apr 2004 21:57:10 +1000
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <20040413103146.GA549@frobozz>
References: <407B134B.30403@twistedmatrix.com>
	<20040413081930.53419.qmail@web14810.mail.yahoo.com>
	<20040413103146.GA549@frobozz>
Message-ID: <20040413115710.GA17393@thorne.id.au>

On Tue, Apr 13, 2004 at 08:31:46PM +1000, Andrew Bennetts wrote:
> On Tue, Apr 13, 2004 at 01:19:30AM -0700, Sorin C. wrote:
> > Hi,
> > 
> > Yes, I saw this bit of documentation but what I
> > understand from it is that if you chain multiple
> > addCallbacks to the same deferred then the error
> > handler from the last addCallbacks call will be
> > called. What am I missing?
> 
> You misunderstand the documentation, which is a shame because that section
> is there specifically to be as clear as possible about this point :(  I
> wonder how we can do better?
> 

Maybe by making a parallel to imperitive style we can make it clearer.

d = op()
d.addCallbacks(callback, errback)

is equivilient to

try:
    r = op()
except e:
    return errback(e)
else:
    return callback(r)

d = op()
d.addCallback(callback).addErrback(errback)

is equivilient to

try:
    return callback(op())
except e:
    return errback(e)
    
Regards,
Stephen Thorne



From screwtape at froup.com  Tue Apr 13 08:41:13 2004
From: screwtape at froup.com (Tim Allen)
Date: Tue, 13 Apr 2004 22:41:13 +1000
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <20040413103146.GA549@frobozz>
References: <407B134B.30403@twistedmatrix.com>
	<20040413081930.53419.qmail@web14810.mail.yahoo.com>
	<20040413103146.GA549@frobozz>
Message-ID: <D978945F-8D47-11D8-BF24-000A95A61ED2@froup.com>

On 13 Apr 2004, at 20:31, Andrew Bennetts wrote:
> On Tue, Apr 13, 2004 at 01:19:30AM -0700, Sorin C. wrote:
>> Hi,
>>
>> Yes, I saw this bit of documentation but what I
>> understand from it is that if you chain multiple
>> addCallbacks to the same deferred then the error
>> handler from the last addCallbacks call will be
>> called. What am I missing?
>
> You misunderstand the documentation, which is a shame because that 
> section
> is there specifically to be as clear as possible about this point :(  I
> wonder how we can do better?

I think part of the problem is that people speak of "the callback 
chain", when there's actually two mutually intertwined callback chains.

It's been a while since I read the Twisted docs, but maybe they should 
explicitly mention that in the context of addCallbacks(), the callback 
is called to turn a successful operation into a successful upstream 
result, and the errback is called to turn an unsuccessful operation 
into a successful upstream result. The upstream errback only gets 
called if the current situation is utterly unsalvageable.

Another way of approaching the concept might be to say that each stage 
in the chain has to deal with the errors in the chain before it - that 
is, if you do:

	d.addCallbacks(cb, eb)

then eb needs to handle any errors that arise from the data source, 
while if you do:

	d.addCallback(cb)
	d.addErrback(eb)

then eb needs to handle any errors that arise from the data source, AND 
any errors that arise from cb.




From golux at comcast.net  Mon Apr 12 03:08:18 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Mon, 12 Apr 2004 03:08:18 -0400
Subject: [Twisted-Python] PythonCard GUI client for pbecho example
Message-ID: <407A4062.6080508@comcast.net>

Here's a gui client made with PythonCard that works with
the pbecho.py server.  How it works:

* start up server:  python pbecho.py
* start up client:  python tpcpbechoclient.py
* when client comes up, push "Login"
  -> "CONNECTED" should appear on lower right side of panel
     (meaning the client received a perspective)
* enter something into the text field at the bottom
* click "Send"
  -> the text should be echoed in the text area widget above

(Note:  if you have PythonCard installed as PythonCardPrototype,
either change the name of your installation to PythonCard or
do the substitution in my example code.  PythonCard is about to
undergo the name change in its next released version.)

Enjoy!
- Steve

P.S.  Itamar:  I couldn't get the wxreactor to work with PythonCard;
kept getting "AssertionError: reactor already installed".  I tried
a lot of things, but finally got tired of messing with it.

For now, I'm using my "twistedpythoncard" module, which encapsulates
Uwe's timer recipe so the rest of the code can use normal Twisted
and PythonCard idioms.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: tpcpbechoclient.tar.gz
Type: application/gzip
Size: 2245 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040412/c4cdc71a/attachment.bin 

From matt at pollenation.net  Tue Apr 13 20:33:53 2004
From: matt at pollenation.net (Matt Goodall)
Date: Wed, 14 Apr 2004 01:33:53 +0100
Subject: [Twisted-Python] Status of twisted.xish.xpath
In-Reply-To: <2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com>
References: <4079CB21.5060101@aruba.it>
	<2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com>
Message-ID: <1081902833.2869.76.camel@debian>

On Mon, 2004-04-12 at 16:59, Dave Smith wrote:
> > I was wondering what's the status of the xpath parser in Twisted.
> 
> Well, xish.xpath isn't meant to be a "full" xpath implementation, per se.
> I originally wrote it be used for routing XML packets from a Jabber
> connection, so it's really focused on providing matching/equality
> operations versus the transforms and other operations traditionally
> associated with XPath engines. In my happy little world, XPath is not a
> operational language -- it's a filtering/matching syntax.

Agreed. Anything more than filtering/matching and xpath becomes really
ugly. Just look at some of the latter examples in the Zvon.org tutorial
(http://zvon.org/xxl/XPathTutorial/General/examples.html) ;-).

> I wasn't aware that Nevow was using xish.xpath, but that's cool if it is.

Nevow itself doesn't use xish.xpath (yet, but see dp's post) but an
example I committed to the Nevow repository uses it to extract bits from
an RSS feed. The code is in sandbox/mg/rsschannel.py if anyone's
interested although Valentino (aka Dialtone) has taken that and extended
it.

> I'll be glad to add additional logic as necessary to enhance the
> filtering/matching aspects of XPath to support a RSS aggregator, but I'd
> prefer to not see xish.xpath become a "full" XPath engine.

I agree, keep it simple. xish.xpath worked well in my example although
there seem to be a couple of things missing that would be useful.
Specifically, support for // and support for matching on attribute
existence.

Attached is a unittest that tests examples 1 to 5 of the zvon.org
tutorial (plus a couple of other tests). I am not 100% that the code is
bug free or that the tests are entirely correct but please use it if it
looks useful. If xish.xpath supported all those matching mechanisms then
it would be complete enough for anything I can think of right now. I
would rather use Python for the rest anyway. Oh, matching by attribute
value (zvon's example 6) might be useful too, but not the
normalize-space() function.

Hope this is useful.

Cheers, Matt
-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: xpathtest.py
Type: text/x-python
Size: 6295 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040414/dd74b878/attachment.py 

From golux at comcast.net  Mon Apr 12 14:24:37 2004
From: golux at comcast.net (Stephen C. Waterbury)
Date: Mon, 12 Apr 2004 14:24:37 -0400
Subject: [Twisted-Python] PythonCard GUI client for pbecho example
Message-ID: <407ADEE5.4020606@comcast.net>

Here's a PythonCard client that works with the pbecho.py
server (I included pbecho.py so it's a self-contained example,
but it's the same pbecho.py as in Twisted/doc/examples).

Dependencies:  PythonCard (http://pythoncard.sourceforge.net)
                (requires wxPython)

Basically, all the logic of tpcpbechoclient was copied directly
from pbechoclient.py -- the only functional difference is the
capability to repeat the "Send" function.

It's pretty self-explanatory, but anyway:

* start up server:  python pbecho.py
* start up client:  python tpcpbechoclient.py
* when client comes up, click "Login" button
   -> "CONNECTED" should appear on lower right side of panel
      (meaning the client received a perspective)
* enter something into the text field at the bottom
* click "Send" button
   -> the text should be echoed in the text area widget above

(Note:  if you have PythonCard installed as PythonCardPrototype,
either change the name of your installation to PythonCard or
do the substitution in my example code.  PythonCard is about to
undergo the name change in its next released version.  If you use
the CVS version, it's already re-named.)

Enjoy!
- Steve

P.S.  Itamar:  I couldn't get the wxreactor to work with PythonCard;
kept getting "AssertionError: reactor already installed", although
I followed the directions in wxreactor's docstring.  I tried various
permutations but finally got tired of messing with it ...
let me know if have time to play with it and find a way that works!

For now, I'm using my "twistedpythoncard" module, which encapsulates
Uwe's timer recipe so the rest of the code can use normal Twisted
and PythonCard idioms.  That seems to work pretty well, but I will
be trying some more non-trivial examples before I declare success.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: tpcpbechoclient.tar.gz
Type: application/gzip
Size: 2245 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040412/5c27e681/attachment.bin 

From golux at comcast.net  Wed Apr 14 10:05:21 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Wed, 14 Apr 2004 10:05:21 -0400
Subject: [Twisted-Python] PythonCard GUI client for pbecho example
In-Reply-To: <407ADEE5.4020606@comcast.net>
References: <407ADEE5.4020606@comcast.net>
Message-ID: <407D4521.3060704@comcast.net>

Here is a better version -- thanks to contributions by
Kevin Altis.

* A status bar is used to show "Connected"
* Send can be triggered by <RETURN> or Send button
* Text field clears after sending
  (text area continues to accumulate echoed text, as before)

Stephen C. Waterbury wrote:
> Here's a PythonCard client that works with the pbecho.py
> server (I included pbecho.py so it's a self-contained example,
> but it's the same pbecho.py as in Twisted/doc/examples).
> 
> Dependencies:  PythonCard (http://pythoncard.sourceforge.net)
>                (requires wxPython)
> 
> Basically, all the logic of tpcpbechoclient was copied directly
> from pbechoclient.py -- the only functional difference is the
> capability to repeat the "Send" function.
> 
> It's pretty self-explanatory, but anyway:
> 
> * start up server:  python pbecho.py
> * start up client:  python tpcpbechoclient.py
> * when client comes up, click "Login" button
>   -> "CONNECTED" should appear on lower right side of panel
>      (meaning the client received a perspective)
> * enter something into the text field at the bottom
> * click "Send" button
>   -> the text should be echoed in the text area widget above
> 
> (Note:  if you have PythonCard installed as PythonCardPrototype,
> either change the name of your installation to PythonCard or
> do the substitution in my example code.  PythonCard is about to
> undergo the name change in its next released version.  If you use
> the CVS version, it's already re-named.)
> 
> Enjoy!
> - Steve
> 
> P.S.  Itamar:  I couldn't get the wxreactor to work with PythonCard;
> kept getting "AssertionError: reactor already installed", although
> I followed the directions in wxreactor's docstring.  I tried various
> permutations but finally got tired of messing with it ...
> let me know if have time to play with it and find a way that works!
> 
> For now, I'm using my "twistedpythoncard" module, which encapsulates
> Uwe's timer recipe so the rest of the code can use normal Twisted
> and PythonCard idioms.  That seems to work pretty well, but I will
> be trying some more non-trivial examples before I declare success.
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: tpcpbecho.zip
Type: application/zip
Size: 3660 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040414/f0c39df7/attachment.zip 

From itamar at itamarst.org  Wed Apr 14 10:13:19 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 14 Apr 2004 10:13:19 -0400
Subject: [Twisted-Python] Status of twisted.xish.xpath
In-Reply-To: <1081902833.2869.76.camel@debian>
References: <4079CB21.5060101@aruba.it>
	<2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com>
	<1081902833.2869.76.camel@debian>
Message-ID: <1081951998.24620.308.camel@sheriffpony>

On Tue, 2004-04-13 at 20:33, Matt Goodall wrote:

> Attached is a unittest that tests examples 1 to 5 of the zvon.org
> tutorial (plus a couple of other tests). I am not 100% that the code is
> bug free or that the tests are entirely correct but please use it if it
> looks useful. If xish.xpath supported all those matching mechanisms then
> it would be complete enough for anything I can think of right now. I
> would rather use Python for the rest anyway. Oh, matching by attribute
> value (zvon's example 6) might be useful too, but not the
> normalize-space() function.

Thanks! If Dave doesn't get around to doing this soon, could you add it
to the issue tracker? http://twistedmatrix.com/bugs/

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From r.taylor at eris.qinetiq.com  Wed Apr 14 10:46:07 2004
From: r.taylor at eris.qinetiq.com (Richard Taylor)
Date: Wed, 14 Apr 2004 14:46:07 +0000
Subject: [Twisted-Python] New user, help needed with raw UDP packets
Message-ID: <200404141546.27171.r.taylor@eris.qinetiq.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi

I am a completely new user of Twisted. I have read the tutorial and much of 
the manual and I have been searching the archives but I can't work out how to 
get started with my problem.

I am writing a UDP proxy/relay that needs to make detailed changes to the 
internals of the UDP packets as they pass through. I intend to use 'Impacket' 
to access the packet internals. One of the things that I need is to 'fake' 
the destination address of packets leaving the proxy so that they look like 
they have come from the original sender, Impacket has methods to do this for 
'raw' udp packets.

I think that I need to use a sub-class of ConnectedDatagramProtocol to send my 
packets but the "self.transport.write" method takes only the packet payload 
not the headers.

I think that I need to use a sub-class of DatagramProtocol to receive my 
packets but the datagramReceived method only gets the packet payload not the 
headers. 

How can I get at the 'raw' udp packets for receiving and sending?

Sorry if this is obvious.

Many thanks.

Richard

- -- 
QinetiQ                                  
B009 Woodward Building
St. Andrews Road
Malvern
Worcs WR14 3PS
Jabber: RichardTaylor at jabber.org
PGPKey: http://search.keyserver.net:11371/pks/lookup?op=get&search=0xA7DA9FD9
Key fingerprint = D051 A121 E7C3 485F 3C0E  1593 ED9E D868 A7DA 9FD9
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQFAfU7B7Z7YaKfan9kRAtJRAKCRkDbM0TEtgI3K3107v7aXk7r9awCg5sz6
X7IT8BGjPiSW0a2aYUGhLcY=
=LKvJ
-----END PGP SIGNATURE-----



From matt at pollenation.net  Wed Apr 14 11:59:54 2004
From: matt at pollenation.net (Matt Goodall)
Date: Wed, 14 Apr 2004 16:59:54 +0100
Subject: [Twisted-Python] Status of twisted.xish.xpath
In-Reply-To: <1081951998.24620.308.camel@sheriffpony>
References: <4079CB21.5060101@aruba.it>
	<2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com>
	<1081902833.2869.76.camel@debian>
	<1081951998.24620.308.camel@sheriffpony>
Message-ID: <1081958394.1155.2.camel@harold>

On Wed, 2004-04-14 at 15:13, Itamar Shtull-Trauring wrote:
> On Tue, 2004-04-13 at 20:33, Matt Goodall wrote:
> 
> > Attached is a unittest that tests examples 1 to 5 of the zvon.org
> > tutorial (plus a couple of other tests). I am not 100% that the code is
> > bug free or that the tests are entirely correct but please use it if it
> > looks useful. If xish.xpath supported all those matching mechanisms then
> > it would be complete enough for anything I can think of right now. I
> > would rather use Python for the rest anyway. Oh, matching by attribute
> > value (zvon's example 6) might be useful too, but not the
> > normalize-space() function.
> 
> Thanks! If Dave doesn't get around to doing this soon, could you add it
> to the issue tracker? http://twistedmatrix.com/bugs/

Thought I'd add it anyway see issue 597
(http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue597).
Dave, I added you (dizzyd) to the nosy list, hope that's ok.

Cheers, Matt

-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt at pollenation.net

Any views expressed are my own and do not necessarily reflect the
views of my employer.




From soso_pub at yahoo.com  Wed Apr 14 13:31:28 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Wed, 14 Apr 2004 10:31:28 -0700 (PDT)
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <D978945F-8D47-11D8-BF24-000A95A61ED2@froup.com>
Message-ID: <20040414173128.11573.qmail@web14812.mail.yahoo.com>

Hello everybody,

Sorry for replying so late, I was very busy. Well I
think now I understand the difference between
addCallbacks and addCallback/errback.

Andrew, as you requested, here are a few pointers
which in my opinion would improve the documentation:

1.
Stephen Thorne's code snippet made the "enlightement"
on me:

"""
Maybe by making a parallel to imperitive style we can
make it clearer.

d = op()
d.addCallbacks(callback, errback)

is equivilient to

try:
    r = op()
except e:
    return errback(e)
else:
    return callback(r)

d = op()
d.addCallback(callback).addErrback(errback)

is equivilient to

try:
    return callback(op())
except e:
    return errback(e)
"""
To make a long story short, using addCallbacks if an
error occures while processing the operation the
errback will be called. Using addCallback and
addErrback does the same AND also handles an error
that might occure in the callback code itself.
I think the code snippet and an explanation should be
added to the documentation.
Also, the figure from visual explanation, should be
specified that it is a representation of addCallbacks
usage. Wouldn't be better to add another figure that
represent addCallback/addErrback usage?
Hope this helps.

Thanks all for the explanations,
Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Tax Center - File online by April 15th
http://taxes.yahoo.com/filing.html



From dizzyd at jabber.org  Wed Apr 14 15:16:43 2004
From: dizzyd at jabber.org (Dave Smith)
Date: Wed, 14 Apr 2004 13:16:43 -0600 (MDT)
Subject: [Twisted-Python] Status of twisted.xish.xpath
In-Reply-To: <1081958394.1155.2.camel@harold>
References: <4079CB21.5060101@aruba.it><2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com><1081902833.2869.76.camel@debian><1081951998.24620.308.camel@sheriffpony>
	<1081958394.1155.2.camel@harold>
Message-ID: <2142.64.207.33.146.1081970203.spork@webmail.dizzyd.com>


> Thought I'd add it anyway see issue 597
> (http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue597).
> Dave, I added you (dizzyd) to the nosy list, hope that's ok.

Matt,

Thanks for doing this -- I'll look into it soon.

D.



From andrew-twisted at puzzling.org  Wed Apr 14 21:08:23 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 15 Apr 2004 11:08:23 +1000
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <D978945F-8D47-11D8-BF24-000A95A61ED2@froup.com>
References: <407B134B.30403@twistedmatrix.com>
	<20040413081930.53419.qmail@web14810.mail.yahoo.com>
	<20040413103146.GA549@frobozz>
	<D978945F-8D47-11D8-BF24-000A95A61ED2@froup.com>
Message-ID: <20040415010823.GB3766@frobozz>

On Tue, Apr 13, 2004 at 10:41:13PM +1000, Tim Allen wrote:
> 
> I think part of the problem is that people speak of "the callback 
> chain", when there's actually two mutually intertwined callback chains.

Well, I think of it as one chain of callback/errback pairs, but given that
I've read defer.py several times and even made some commits to it, I am
probably not a good example of how the average user should be expected to
think about this stuff :)

[...]
> 
> Another way of approaching the concept might be to say that each stage 
> in the chain has to deal with the errors in the chain before it - that 
> is, if you do:
> 
> 	d.addCallbacks(cb, eb)
> 
> then eb needs to handle any errors that arise from the data source, 
> while if you do:
> 
> 	d.addCallback(cb)
> 	d.addErrback(eb)
> 
> then eb needs to handle any errors that arise from the data source, AND 
> any errors that arise from cb.

This is good, straightforward, practical advice on how to actually use these
wacky abstract objects, and should be added to the docs.

Incidentally, Mary has opened a bug based on this discussion, so hopefully
the good ideas people have come up with won't be forgotten :)

    http://www.twistedmatrix.com/bugs/issue596

-Andrew.




From andrew-twisted at puzzling.org  Wed Apr 14 21:11:28 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 15 Apr 2004 11:11:28 +1000
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <20040413115710.GA17393@thorne.id.au>
References: <407B134B.30403@twistedmatrix.com>
	<20040413081930.53419.qmail@web14810.mail.yahoo.com>
	<20040413103146.GA549@frobozz>
	<20040413115710.GA17393@thorne.id.au>
Message-ID: <20040415011128.GC3766@frobozz>

On Tue, Apr 13, 2004 at 09:57:10PM +1000, Stephen Thorne wrote:
> 
> Maybe by making a parallel to imperitive style we can make it clearer.
> 
> d = op()
> d.addCallbacks(callback, errback)
> 
> is equivilient to
> 
> try:
>     r = op()
> except e:
>     return errback(e)
> else:
>     return callback(r)

The exact same thought occurred to me recently while I was lying in bed (and
resolutely trying to go to sleep and not get up and send/read more email ;).  My
only reservation is that some people might not be familiar with the
try/except/else construct, but I suppose an appropriate link to the Python
docs (probably a section of the Python tutorial?) can solve that.

-Andrew.




From stephen at thorne.id.au  Wed Apr 14 22:22:09 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu, 15 Apr 2004 12:22:09 +1000
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <20040415011128.GC3766@frobozz>
References: <407B134B.30403@twistedmatrix.com>
	<20040413081930.53419.qmail@web14810.mail.yahoo.com>
	<20040413103146.GA549@frobozz>
	<20040413115710.GA17393@thorne.id.au>
	<20040415011128.GC3766@frobozz>
Message-ID: <20040415022209.GA19250@thorne.id.au>

On Thu, Apr 15, 2004 at 11:11:28AM +1000, Andrew Bennetts wrote:
> On Tue, Apr 13, 2004 at 09:57:10PM +1000, Stephen Thorne wrote:
> > 
> > Maybe by making a parallel to imperitive style we can make it clearer.
> > 
> > d = op()
> > d.addCallbacks(callback, errback)
> > 
> > is equivilient to
> > 
> > try:
> >     r = op()
> > except e:
> >     return errback(e)
> > else:
> >     return callback(r)
> 
> The exact same thought occurred to me recently while I was lying in bed (and
> resolutely trying to go to sleep and not get up and send/read more email ;).  My
> only reservation is that some people might not be familiar with the
> try/except/else construct, but I suppose an appropriate link to the Python
> docs (probably a section of the Python tutorial?) can solve that.

Well, really, the try/catch/else construct was used here because I was
undecided about the clearest way of representing the concept.

We could write it like this

try:
    r = op()
except e:
    r = errback(e)
else:
    r = callback(r)
# continue to use 'r'.

And in fact, that was how I wrote it until I revised it to use 'return'
to explicitly say "this is the resulting value". We could rewrite it
like this:

try:
    r = op()
except e:
    return errback(e)

return callback(r)

Which doesn't use any constructs that an inexperienced python programmer
won't immediately recognise.

Regards,
Stephen Thorne.



From exarkun at divmod.com  Wed Apr 14 22:37:41 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 14 Apr 2004 22:37:41 -0400
Subject: [Twisted-Python] New user, help needed with raw UDP packets
In-Reply-To: <200404141546.27171.r.taylor@eris.qinetiq.com>
References: <200404141546.27171.r.taylor@eris.qinetiq.com>
Message-ID: <407DF575.8060103@divmod.com>

Richard Taylor wrote:

>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>Hi
>
>I am a completely new user of Twisted. I have read the tutorial and much o=
f =

>the manual and I have been searching the archives but I can't work out how=
 to =

>get started with my problem.
>
>I am writing a UDP proxy/relay that needs to make detailed changes to the =

>internals of the UDP packets as they pass through. I intend to use 'Impack=
et' =

>to access the packet internals. One of the things that I need is to 'fake' =

>the destination address of packets leaving the proxy so that they look lik=
e =

>they have come from the original sender, Impacket has methods to do this f=
or =

>'raw' udp packets.
>
>I think that I need to use a sub-class of ConnectedDatagramProtocol to sen=
d my =

>packets but the "self.transport.write" method takes only the packet payloa=
d =

>not the headers.
>  =

>
  You will need to create a new kind of transport for this to work.  I'm =

afraid you haven't picked a very easy task for which to start using =

Twisted :)

>I think that I need to use a sub-class of DatagramProtocol to receive my =

>packets but the datagramReceived method only gets the packet payload not t=
he =

>headers. =

>  =

>
  More likely you'll want either a RawUDPProtocol subclass, or something =

very much like one.  You'll also need to create a new transport class =

which works on raw sockets.  There isn't really any documentation for =

this, as it is something that needs to be done very infrequently.  There =

is one example of creating a new transport type in my sandbox:

  =

http://svn.twistedmatrix.com/cvs/trunk/sandbox/exarkun/ipv6.py?root=3DTwist=
ed

It is for TCP/IPv6 only, but should mostly be applicable to your case.

>How can I get at the 'raw' udp packets for receiving and sending?
>
>Sorry if this is obvious.
>  =

>
  Certainly not.  :)  If you get it working (documented, tested,etc ;), =

it might be nice if you could contribute it back, since raw socket =

support is something that does get asked for every once in a while.  =

It'd be nice to be able to tell someone how to use existing support, =

instead of telling them they have to implement it.

  Jp




From foom at fuhm.net  Thu Apr 15 13:27:56 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu, 15 Apr 2004 13:27:56 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r10475 - Use writeSequence
	instead of silly for-loop.
In-Reply-To: <E1BAVDP-0000eR-00@wolfwood>
References: <E1BAVDP-0000eR-00@wolfwood>
Message-ID: <3BF2210C-8F02-11D8-94D4-000A95A50FB2@fuhm.net>


On Apr 5, 2004, at 10:36 AM, Andrew Bennetts wrote:

> Author: spiv
> Date: Mon Apr  5 08:36:43 2004
> New Revision: 10475
>
> Modified:
>    trunk/twisted/protocols/http.py
> Log:
> Use writeSequence instead of silly for-loop.

You might not have noticed that writeSequence is implemented like so:
   self.write("".join(iovec))
thus negating the performance enhancement recently added by not copying 
large data into a new string.

This is of course quite silly, and I suspect a nice performance 
enhancement could be achieved by making FileDescriptor.dataBuffer be a 
list of strings, rather than a single string. That would both cause 
multiple writes in a row to not allocate new strings, and allow 
writeSequence to be implemented sanely.

Doesn't look very hard really; looks like you'd only need to touch 
write/writeSequence/doWrite. This'd also have the advantage of making 
it easier to put a Sendfile-struct in there as well. So pahan's 
volunteered to fix this!

Unfortunately, python doesn't expose the writev syscall, which means 
that you depend on Nagling to not coalesce the TCP packets. There *is* 
a TCP option which you can use to help fix too many small packets: 
TCP_CORK on linux and TCP_NOPUSH on FreeBSD. This keeps partial packets 
from being sent at all until you close the connection or turn off the 
option (except on older freebsd, where it's broken and you need to turn 
off the option and call write again to wake it up).

I suspect it's worthwhile to set TCP_CORK/TCP_NOPUSH while the 
python-side buffer has any data left in it, or else the kernel may be 
deciding to send out small packets when it should be waiting for more 
data from an upcoming write call and wasting time/bandwidth. Python has 
the TCP_CORK constant, even, yay! FreeBSD will  just have to suffer, I 
suppose, since python doesn't know about TCP_NOPUSH.

James




From itamar at itamarst.org  Thu Apr 15 14:00:17 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 15 Apr 2004 14:00:17 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r10475 - Use
	writeSequence instead of silly for-loop.
In-Reply-To: <3BF2210C-8F02-11D8-94D4-000A95A50FB2@fuhm.net>
References: <E1BAVDP-0000eR-00@wolfwood>
	<3BF2210C-8F02-11D8-94D4-000A95A50FB2@fuhm.net>
Message-ID: <1082052017.24618.382.camel@sheriffpony>

On Thu, 2004-04-15 at 13:27, James Y Knight wrote:

> Unfortunately, python doesn't expose the writev syscall, which means 
> that you depend on Nagling to not coalesce the TCP packets. There *is* 
> a TCP option which you can use to help fix too many small packets: 
> TCP_CORK on linux and TCP_NOPUSH on FreeBSD. This keeps partial packets 
> from being sent at all until you close the connection or turn off the 
> option (except on older freebsd, where it's broken and you need to turn 
> off the option and call write again to wake it up).

JP has code for using writev in the sandbox (sandbox/exarkun/iovec/)
which ought to be integrated at some point.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From bob at redivi.com  Thu Apr 15 14:27:16 2004
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 15 Apr 2004 14:27:16 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r10475 - Use writeSequence
	instead of silly for-loop.
In-Reply-To: <1082052017.24618.382.camel@sheriffpony>
References: <E1BAVDP-0000eR-00@wolfwood>
	<3BF2210C-8F02-11D8-94D4-000A95A50FB2@fuhm.net>
	<1082052017.24618.382.camel@sheriffpony>
Message-ID: <859783D7-8F0A-11D8-A05A-000A95686CD8@redivi.com>

On Apr 15, 2004, at 2:00 PM, Itamar Shtull-Trauring wrote:

> On Thu, 2004-04-15 at 13:27, James Y Knight wrote:
>
>> Unfortunately, python doesn't expose the writev syscall, which means
>> that you depend on Nagling to not coalesce the TCP packets. There *is*
>> a TCP option which you can use to help fix too many small packets:
>> TCP_CORK on linux and TCP_NOPUSH on FreeBSD. This keeps partial 
>> packets
>> from being sent at all until you close the connection or turn off the
>> option (except on older freebsd, where it's broken and you need to 
>> turn
>> off the option and call write again to wake it up).
>
> JP has code for using writev in the sandbox (sandbox/exarkun/iovec/)
> which ought to be integrated at some point.

I think the best answer to this performance talk is: don't bother.  I 
once set out to fix his implementation, and did (but I'm not sure what 
happened to it).  It wasn't really much faster, definitely not enough 
to warrant an extension.  You know what?  The overhead doesn't seem to 
be in the write calls or the str joins, it's the rest of Python that's 
slow :)

I think that this sort of time would be better spent on epoll and 
kqueue.  Last I checked, enabling kqueue in Twisted required 
downloading some ancient code written for Python 1.5 from a ftp site 
that hasn't been updated since 2001, patching it, writing a makefile 
for your platform, and building the extension separately.

-bob




From cce at clarkevans.com  Thu Apr 15 15:56:51 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 15 Apr 2004 15:56:51 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r10475 - Use writeSequence
	instead of silly for-loop.
In-Reply-To: <859783D7-8F0A-11D8-A05A-000A95686CD8@redivi.com>
References: <E1BAVDP-0000eR-00@wolfwood>
	<3BF2210C-8F02-11D8-94D4-000A95A50FB2@fuhm.net>
	<1082052017.24618.382.camel@sheriffpony>
	<859783D7-8F0A-11D8-A05A-000A95686CD8@redivi.com>
Message-ID: <20040415195651.GB53398@prometheusresearch.com>

Yes.  Twisted chews up alot of processor time simply looping, if 
kqueue could be used instead, this would be great...

On Thu, Apr 15, 2004 at 02:27:16PM -0400, Bob Ippolito wrote:
| I think that this sort of time would be better spent on epoll and 
| kqueue.  Last I checked, enabling kqueue in Twisted required 
| downloading some ancient code written for Python 1.5 from a ftp site 
| that hasn't been updated since 2001, patching it, writing a makefile 
| for your platform, and building the extension separately.



From itamar at itamarst.org  Thu Apr 15 16:22:50 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 15 Apr 2004 16:22:50 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r10475 - Use
	writeSequence instead of silly for-loop.
In-Reply-To: <20040415195651.GB53398@prometheusresearch.com>
References: <E1BAVDP-0000eR-00@wolfwood>
	<3BF2210C-8F02-11D8-94D4-000A95A50FB2@fuhm.net>
	<1082052017.24618.382.camel@sheriffpony>
	<859783D7-8F0A-11D8-A05A-000A95686CD8@redivi.com>
	<20040415195651.GB53398@prometheusresearch.com>
Message-ID: <1082060570.26194.384.camel@sheriffpony>

On Thu, 2004-04-15 at 15:56, Clark C. Evans wrote:
> Yes.  Twisted chews up alot of processor time simply looping, if 
> kqueue could be used instead, this would be great...

I suspect it'd only really help if we also used kqueue's timers and so
on. Linux doesn't have anything similar, unfortunately.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From exarkun at divmod.com  Thu Apr 15 22:09:56 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 16 Apr 2004 02:09:56 GMT
Subject: [Twisted-Python] Re: [Twisted-commits] r10475 - Use writeSequence
	instead of silly for-loop.
Message-ID: <20040416020956.30707.1547824489.divmod.quotient.73@ohm>

On Thu, 15 Apr 2004 13:27:56 -0400, James Y Knight <foom at fuhm.net> wrote:
>
> On Apr 5, 2004, at 10:36 AM, Andrew Bennetts wrote:
> 
> 
> This is of course quite silly, and I suspect a nice performance 
> enhancement could be achieved by making FileDescriptor.dataBuffer be a 
> list of strings, rather than a single string. That would both cause 
> multiple writes in a row to not allocate new strings, and allow 
> writeSequence to be implemented sanely.

  Been there :)  FileDescriptor.dataBuffer was a list when I first started hacking around in Twisted's internals.  The current implementation is the result of an optimization of that code, and is somewhat (not earth-shatteringly) faster.

> 
> Doesn't look very hard really; looks like you'd only need to touch 
> write/writeSequence/doWrite. This'd also have the advantage of making 
> it easier to put a Sendfile-struct in there as well. So pahan's 
> volunteered to fix this!

  There are a few other places that need to be touched, but it is certainly doable.  The main problem is simply that tcp.py is such a mess.

  Jp



From george at visp.com.au  Fri Apr 16 00:24:37 2004
From: george at visp.com.au (George Patterson)
Date: Fri, 16 Apr 2004 13:54:37 +0930
Subject: [Twisted-Python] explanation of the chatserver.py example
Message-ID: <20040416135437.70162e6d@beast.spyderweb.com.au>

I have trying to write a chat server that will selectively send out messages to some clients. Anyway, looking around for a framework to start from and learn more about Python and other modules I stumbled upon chatserver.py twisted.sourceforge.net

But I can't find what some of the aspects the MyChat class does.

From: http://twisted.sourceforge.net/TwistedDocs-1.2.0/examples/chatserver.py

class MyChat(basic.LineReceiver):
    def connectionMade(self):
        print "Got new client!"
        self.factory.clients.append(self)

    def connectionLost(self):
        print "Lost a client!"
        self.factory.clients.remove(self)

    def lineReceived(self, line):
        print "received", repr(line)
        for c in self.factory.clients:
            c.message(line)

    def message(self, message):
        self.transport.write(message + '\n')

#end of class

If Bob, Jane and Joe are chatting to each other, and Bob sends a string of characters to Jane as a private message, how would I loop through the lineReceived definition for Jane's client ID or IP address or something unique to Jane's connection.

I want to change def lineReceived to something like 

def lineReceived(self, line):
    print "received", repr(line)
    for c in self.factory.clients:
	if c.id==required_id: 
	# ^-- I know this is not valid code 

	    c.message("Privmsg". line)
	#end if
    #end for


Sorry if it is a stupid question but I have been staring long enough at the code. 

George Patterson



From radix at twistedmatrix.com  Fri Apr 16 00:35:41 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 16 Apr 2004 00:35:41 -0400
Subject: [Twisted-Python] explanation of the chatserver.py example
In-Reply-To: <20040416135437.70162e6d@beast.spyderweb.com.au>
References: <20040416135437.70162e6d@beast.spyderweb.com.au>
Message-ID: <407F629D.7050601@twistedmatrix.com>

George Patterson wrote:
> I have trying to write a chat server that will selectively send out
> messages to some clients. Anyway, looking around for a framework to
> start from and learn more about Python and other modules I stumbled
> upon chatserver.py twisted.sourceforge.net
> 
> If Bob, Jane and Joe are chatting to each other, and Bob sends a
> string of characters to Jane as a private message, how would I loop
> through the lineReceived definition for Jane's client ID or IP
> address or something unique to Jane's connection.
> 
> I want to change def lineReceived to something like
> 

 > def lineReceived(self, line):
 >     print "received", repr(line)
 >     for c in self.factory.clients:
 > 	if c.id==required_id:
 > 	# ^-- I know this is not valid code
 >
 > 	    c.message("Privmsg". line)
 > 	#end if
 >     #end for

When the client first connects, the protocol should be in the "waiting 
for identifying information" state. The client should send identifying 
information. Store that information on the protocal instance, and then 
let the client chat as usual.

That should be all you need.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040416/0eedc7ae/attachment.pgp 

From r.taylor at eris.qinetiq.com  Fri Apr 16 03:00:18 2004
From: r.taylor at eris.qinetiq.com (Richard Taylor)
Date: Fri, 16 Apr 2004 07:00:18 +0000
Subject: [Twisted-Python] New user, help needed with raw UDP packets
In-Reply-To: <407DF575.8060103@divmod.com>
References: <200404141546.27171.r.taylor@eris.qinetiq.com>
	<407DF575.8060103@divmod.com>
Message-ID: <200404160800.25087.r.taylor@eris.qinetiq.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jp

On Thursday 15 April 2004 03:37, Jp Calderone wrote:
> [snip]
>   More likely you'll want either a RawUDPProtocol subclass, or something =
>
> very much like one.  You'll also need to create a new transport class =
>
> which works on raw sockets.  

Thanks for the pointers. At least I know now that I am not just being 
stupid :-)

I have been looking at how to subclass usp.Port to get what I want but I have 
come up against a problem that looks like a show stopper to me. It does not 
look like Python's socket library supports SOCK_RAW. I may be mistaken, but I 
think that I need to put the socket into RAW mode to get the incoming headers 
and to set my own headers on the outgoing packets. Without SOCK_RAW I am 
stuffed.

My code so far looks like this:

	from twisted.internet import protocol 
	from twisted.internet import udp
	from twisted.internet import reactor

	class Echo(protocol.DatagramProtocol):
    
	    def datagramReceived(self, data, (host, port)):
	        print "received %r from %s:%d" % (data, host, port)


	class RawUDPPort(udp.Port):
	    """Raw udp port."""

	    __implements__ = udp.Port.__implements__

	    socketType = socket.SOCK_RAW # Overide socket type.


	reactor.listenWith(RawUDPPort,
	                   proto=Echo(), port=9999, reactor=reactor)
	reactor.run()

When run I get the following trace back:

	Traceback (most recent call last):
	  File "./asb_proxy.py", line 45, in ?
	    proto=Echo(), port=9999, reactor=reactor)
	  File "/usr/lib/python2.2/site-packages/twisted/internet/default.py", line 	
301, in listenWith
	    p.startListening()
	  File "/usr/lib/python2.2/site-packages/twisted/internet/udp.py", line 83, 	
in startListening
	    self._bindSocket()
	  File "/usr/lib/python2.2/site-packages/twisted/internet/udp.py", line 92, 	
in _bindSocket
	    raise error.CannotListenError, (self.interface, self.port, le)
	twisted.internet.error.CannotListenError: Couldn't listen on any:9999: (94, 
	'Socket type not supported').

I am sure this is the underlying call to socket as the following Python 
session shows:

	Python 2.2.3 (#1, Sep 15 2003, 12:38:33)
	[GCC 2.95.3 20010315 (release)] on linux2
	Type "help", "copyright", "credits" or "license" for more information.
	>>> import socket
	>>> s = socket.socket(socket.AF_INET, socket.SOCK_RAW)
	Traceback (most recent call last):
	  File "<stdin>", line 1, in ?
	socket.error: (94, 'Socket type not supported')
	>>>

I guess that I might be able to use the pcap library to access the raw socket 
but integrating that into Twisted is starting to look like a big job.

Has anyone got any ideas as to how I should approach this.

> [snip]
>
>   If you get it working (documented, tested,etc ;), =
>
> it might be nice if you could contribute it back, since raw socket =
>
> support is something that does get asked for every once in a while.  =
>
> It'd be nice to be able to tell someone how to use existing support, =
>
> instead of telling them they have to implement it.
>

If I get something working I will certainly contribute it back to twisted.

Many thanks.

Richard

- -- 
QinetiQ                                  
B009 Woodward Building
St. Andrews Road
Malvern
Worcs WR14 3PS
Jabber: RichardTaylor at jabber.org
PGPKey: http://search.keyserver.net:11371/pks/lookup?op=get&search=0xA7DA9FD9
Key fingerprint = D051 A121 E7C3 485F 3C0E  1593 ED9E D868 A7DA 9FD9
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQFAf4SI7Z7YaKfan9kRAnBjAJoDYDWaaB3zqfrChSMIvXo901WWQwCeKt21
vKa2BRlNHXHXq92vD7xaHOc=
=POTK
-----END PGP SIGNATURE-----



From barmenkov at bpc.ru  Fri Apr 16 08:20:01 2004
From: barmenkov at bpc.ru (Denis Barmenkov)
Date: Fri, 16 Apr 2004 16:20:01 +0400
Subject: [Twisted-Python] running local process to share serial port to many
	tcp clients
Message-ID: <OFD9877E8A.009D7718-ONC3256E78.00433407-C3256E78.00440929@bpc.ru>

Hello!

Is there some example/tutorial, how top create twisted application for 
sharing unique resource?
I have some hardware module, which connects to Linux computer via serial 
port. 
Simple protocol also exists: after writing some data to device, it think 
;), then returns response.

And my question is: how can I write separate process, which acts as 
serial_device proxy?
And how to implement interaction between 
twisted.internet.protocol.Protocol's descendants and this device-sharing 
protocol? 

Thank you!

Regards,
Denis Barmenkov




From itamar at itamarst.org  Fri Apr 16 09:34:49 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 16 Apr 2004 09:34:49 -0400
Subject: [Twisted-Python] New user, help needed with raw UDP packets
In-Reply-To: <200404160800.25087.r.taylor@eris.qinetiq.com>
References: <200404141546.27171.r.taylor@eris.qinetiq.com>
	<407DF575.8060103@divmod.com>
	<200404160800.25087.r.taylor@eris.qinetiq.com>
Message-ID: <1082119868.24621.395.camel@sheriffpony>

On Fri, 2004-04-16 at 03:00, Richard Taylor wrote:

> I have been looking at how to subclass usp.Port to get what I want but I have 
> come up against a problem that looks like a show stopper to me. It does not 
> look like Python's socket library supports SOCK_RAW. I may be mistaken, but I 
> think that I need to put the socket into RAW mode to get the incoming headers 
> and to set my own headers on the outgoing packets. Without SOCK_RAW I am 
> stuffed.

Were you running as root? That would be a requirement.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From exarkun at divmod.com  Thu Apr 15 23:09:12 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 16 Apr 2004 03:09:12 GMT
Subject: [Twisted-Python] Re: [Twisted-commits] r10475 - Use writeSequence
	instead of silly for-loop.
Message-ID: <20040416030912.30707.1181449689.divmod.quotient.76@ohm>

On Thu, 15 Apr 2004 13:27:56 -0400, James Y Knight <foom at fuhm.net> wrote:
>
> On Apr 5, 2004, at 10:36 AM, Andrew Bennetts wrote:
> 
> 
> This is of course quite silly, and I suspect a nice performance 
> enhancement could be achieved by making FileDescriptor.dataBuffer be a 
> list of strings, rather than a single string. That would both cause 
> multiple writes in a row to not allocate new strings, and allow 
> writeSequence to be implemented sanely.

  Been there :)  FileDescriptor.dataBuffer was a list when I first started hacking around in Twisted's internals.  The current implementation is the result of an optimization of that code, and is somewhat (not earth-shatteringly) faster.

> 
> Doesn't look very hard really; looks like you'd only need to touch 
> write/writeSequence/doWrite. This'd also have the advantage of making 
> it easier to put a Sendfile-struct in there as well. So pahan's 
> volunteered to fix this!

  There are a few other places that need to be touched, but it is certainly doable.  The main problem is simply that tcp.py is such a mess.

  Jp



From exarkun at divmod.com  Fri Apr 16 09:44:38 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 16 Apr 2004 13:44:38 GMT
Subject: [Twisted-Python] New user, help needed with raw UDP packets
Message-ID: <20040416134438.30707.1697486508.divmod.quotient.77@ohm>

On Fri, 16 Apr 2004 09:34:49 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Fri, 2004-04-16 at 03:00, Richard Taylor wrote:
> 
> > I have been looking at how to subclass usp.Port to get what I want but I have 
> > come up against a problem that looks like a show stopper to me. It does not 
> > look like Python's socket library supports SOCK_RAW. I may be mistaken, but I 
> > think that I need to put the socket into RAW mode to get the incoming headers 
> > and to set my own headers on the outgoing packets. Without SOCK_RAW I am 
> > stuffed.
> 
> Were you running as root? That would be a requirement.

  Moreover, "Python's" socket library is really just a thin wrapper around the platform socket library.  Restrictions such as "Raw sockets can only be created by root" are imposed by the platform, not by Python.  Similarly, if the platform socket library does not support raw sockets, Python will not support raw sockets.

  Since you seem to have the SOCK_RAW name in the socket module, I'm guessing that Itamar's guess of privileges being the problem is correct, rather than support being completely missing.

  Jp




From soso_pub at yahoo.com  Fri Apr 16 17:47:16 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Fri, 16 Apr 2004 14:47:16 -0700 (PDT)
Subject: [Twisted-Python] pb: async call in remote method
Message-ID: <20040416214716.33395.qmail@web14809.mail.yahoo.com>

Hi all,

I have a client and server that talk to each other
through pb.
The situation is the following:

The client calls a remote method:
"""
d = obj.callRemote('getValue', someParam)
d.addCallback(self.gotValue)
"""

On the server side:
"""
class PbValue(pb.Referenceable):
  def remote_getValue(self, someParam)
    result = processAsyncRequest(someParam)
    return notYetReceivedResult
"""

The problem is that processAsyncRequest is
asynchronous, sends a request to another server (not
Python) and returns without waiting for response, and
so there is no result to return from the remote method
back to the client at this point. 
Is it possible to somehow defer (funny heh) the
response that remote_getValue should send back to the
client until the result from processAsyncRequest
arrives?

Thanks,
Sorin


	
		
__________________________________
Do you Yahoo!?
Yahoo! Tax Center - File online by April 15th
http://taxes.yahoo.com/filing.html



From warner at lothar.com  Fri Apr 16 18:15:52 2004
From: warner at lothar.com (Brian Warner)
Date: Fri, 16 Apr 2004 15:15:52 -0700 (PDT)
Subject: [Twisted-Python] pb: async call in remote method
Message-ID: <20040416.151552.59486798.warner@lothar.com>

>   def remote_getValue(self, someParam)
>     result = processAsyncRequest(someParam)
>     return notYetReceivedResult
>
> Is it possible to somehow defer (funny heh) the response that
> remote_getValue should send back to the client until the result from
> processAsyncRequest arrives?

Yes, and in fact a Deferred is precisely what you use to do it. When a
remote_* method returns a Deferred, the PB internals know they should add a
callback to it, and they will refrain from sending a response to the client
until that Deferred fires.

    def remote_getValue(self, someParam):
        d = processAsyncRequest(someParam)
        return d

All you have to do is write your processAsyncRequest() function to create and
return a Deferred, and then do something which fires it with
d.callback(results) when the answer comes back. Maybe something like this:

class RequestHandler:

    def __init__(self):
        self.requests = {}
        self.reqnum = 0

    def processAsyncRequest(self, param):
        reqnum = self.reqnum
        self.reqnum += 1
        d = defer.Deferred()
        self.requests[reqnum] = d
        sendRequest(reqnum, param)  # send query to someone
        # assume our "answerReturned" method is called when they respond
        return d

    def answerReturned(self, reqnum, results):
        d = self.requests[reqnum]
        del self.requests[reqnum]
        d.callback(results)


cheers,
 -Brian




From soso_pub at yahoo.com  Fri Apr 16 18:36:56 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Fri, 16 Apr 2004 15:36:56 -0700 (PDT)
Subject: [Twisted-Python] pb: async call in remote method
In-Reply-To: <20040416.151552.59486798.warner@lothar.com>
Message-ID: <20040416223656.11877.qmail@web14803.mail.yahoo.com>


> Yes, and in fact a Deferred is precisely what you
> use to do it. 

Duh, thanks, indeed it works like a charm.
Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Tax Center - File online by April 15th
http://taxes.yahoo.com/filing.html



From tv at tv.debian.net  Fri Apr 16 19:16:16 2004
From: tv at tv.debian.net (Tommi Virtanen)
Date: Sat, 17 Apr 2004 02:16:16 +0300
Subject: [Twisted-Python] New user, help needed with raw UDP packets
In-Reply-To: <200404141546.27171.r.taylor@eris.qinetiq.com>
References: <200404141546.27171.r.taylor@eris.qinetiq.com>
Message-ID: <40806940.9030500@tv.debian.net>

Richard Taylor wrote:
> I am writing a UDP proxy/relay that needs to make detailed changes to the 
> internals of the UDP packets as they pass through. I intend to use 'Impacket' 
> to access the packet internals. One of the things that I need is to 'fake' 
> the destination address of packets leaving the proxy so that they look like 
> they have come from the original sender, Impacket has methods to do this for 
> 'raw' udp packets.
> 
> I think that I need to use a sub-class of ConnectedDatagramProtocol to send my 
> packets but the "self.transport.write" method takes only the packet payload 
> not the headers.

More to the point, normal UDP sockets cannot forge the source IP
address, as you seem to want to do.

You want "twisted.pair", RawUDPProtocol, and such things I sort of
half-wrote once. It's just about all there, you can make it work, but
it's not very complete and definitely not well documented.

doc/examples/pairudp.py shows a raw packet listener that reads from
a tuntap device and print out UDP packets with destination port 42.
You can also write such packets to the tuntap device, and the kernel
will route them from there on.

If you want to avoid tuntap, use packet sockets -- eunuchs (see
twisted.pair.tuntap docstring) has recvmsg() and sendmsg() wrappers that
should help.

For pcap integration, you're pretty much on your own.


My advice: don't try to do it with Python and Twisted unless you
already know how to do it in C :)



From mcfletch at rogers.com  Fri Apr 16 23:26:24 2004
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Fri, 16 Apr 2004 23:26:24 -0400
Subject: [Twisted-Python] Minor question wrt threading pools
Message-ID: <4080A3E0.2020207@rogers.com>

I'm sitting down to move more of our application into Twisted and have 
come across a minor question that I'm thinking would be a good addition 
to the threading howto.

In particular, starting a thread-pool seems to start the threads as 
non-daemon threads, so that on completion of the main reactor loop the 
threads are still hanging around (AFAICS, anyway, the app sits hung 
waiting for the background threads to complete).

It would be useful to know:

    * How to start threads in the threading pool as daemon threads (i.e.
      will exit when all non-daemon threads exit)
    * How to force an exit of all threads
          o How to access the currently active thread-pool (I assume the
            documented ThreadPool.stop method is what needs to be
            called, but how to get the ThreadPool object isn't
            documented AFAICS).

Anyway, it's not a show-stopper, I can just kill the app manually after 
each test run, still, would love to have an answer.  Have fun,
Mike

_______________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://members.rogers.com/mcfletch/





From mcfletch at rogers.com  Fri Apr 16 23:32:13 2004
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Fri, 16 Apr 2004 23:32:13 -0400
Subject: [Twisted-Python] Re: Minor question wrt threading pools
In-Reply-To: <4080A3E0.2020207@rogers.com>
References: <4080A3E0.2020207@rogers.com>
Message-ID: <4080A53D.9050807@rogers.com>

Argh, as always, discovered the solution seconds after sending the email:

ThreadPool is available as an (optional) attribute of reactor 
"threadpool".  Calling stop() allows the exit.  Still don't know how to 
make the threads daemon by default, but that's not an issue at the moment.

Sorry for the wasted bandwidth,
Mike

Mike C. Fletcher wrote:
...

>    * How to start threads in the threading pool as daemon threads (i.e.
>      will exit when all non-daemon threads exit)
>    * How to force an exit of all threads
>          o How to access the currently active thread-pool (I assume the
>            documented ThreadPool.stop method is what needs to be
>            called, but how to get the ThreadPool object isn't
>            documented AFAICS).

...




From itamar at itamarst.org  Sat Apr 17 01:40:20 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 17 Apr 2004 01:40:20 -0400
Subject: [Twisted-Python] Minor question wrt threading pools
In-Reply-To: <4080A3E0.2020207@rogers.com>
References: <4080A3E0.2020207@rogers.com>
Message-ID: <1082180419.24621.469.camel@sheriffpony>

On Fri, 2004-04-16 at 23:26, Mike C. Fletcher wrote:

>     * How to start threads in the threading pool as daemon threads (i.e.
>       will exit when all non-daemon threads exit)

I've seen python core dump when this is done (python 2.0 IIRC, but I'm
still *very* wary of doing it). I wouldn't if I were you :)

>     * How to force an exit of all threads

They exit automatically when program ends, i.e. you do reactor.stop() -
unless they are doing something, in which case they will exit when they
next try to read next task from queue. Your problem may be because you
are doing tests and thus reactor.stop() is neveer called and it thus
never shuts down the threadpool for you.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From mary-twisted at puzzling.org  Sat Apr 17 08:35:42 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 17 Apr 2004 22:35:42 +1000
Subject: [Twisted-Python] On splitting Twisted into subprojects
Message-ID: <20040417123542.GP29157@titus.home.puzzling.org>

    Note: Cross-posted to twisted-web and twisted-python. Decide between
    them for your follow-ups please :)

This is intended to spark a little more discussion on splitting Twisted
into subprojects, as discussed on Aussie-time on IRC (Jerub, jml, spiv
and myself).

It seems like the twisted-web project are planning to split off fairly
soon: see
http://twistedmatrix.com/pipermail/twisted-web/2004-April/000312.html

It's pretty likely that this split will go ahead without any kind of
imposed-from-above decisions about where the website will go, what the
release cycle will look like, where the docs will move to, what the
status of shared docs will be (I tend to focus on docs...)

The nightmare scenario for splitting twisted into subprojects is that
every subproject develops its own release code, release procedures,
testing framework, website, documentation style, community, policies...
etc etc. And shortly after that we all spiral into the sun or something.

There appeared to us to be three possible ways of avoiding this:

 1. Luck

 2. Release code, release procedures, testing framework, website,
 documentation style, community, policies... imposed from above

 3. Twisted Web (or whatever other project splits first) acting as a
 "model split": evolving release mechanisms, policy etc etc that are
 fundamentally sane and wonderful so that noone would think of doing
 things any other way.

Since 3 looks like being the most achievable, this is basically an
appeal to the twisted-web folk to keep in mind that they should, where
possible, try and make twisted-web the Model of a Modern Twisted
Subproject. And make it as easy as possible for other subprojects to
copy whatever it is that they're going to do.

I personally would like to offer my help in documenting subproject
procedures as they evolve, and storing that documentation in some kind
of prominent place.

-Mary



From radix at twistedmatrix.com  Sat Apr 17 13:02:21 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 17 Apr 2004 13:02:21 -0400
Subject: [Twisted-Python] On splitting Twisted into subprojects
In-Reply-To: <20040417123542.GP29157@titus.home.puzzling.org>
References: <20040417123542.GP29157@titus.home.puzzling.org>
Message-ID: <4081631D.8090602@twistedmatrix.com>

Mary Gardiner wrote:

Hi Mary; Sorry I haven't kept up with the discussion about the Twisted 
split lately.

> This is intended to spark a little more discussion on splitting Twisted
> into subprojects, as discussed on Aussie-time on IRC (Jerub, jml, spiv
> and myself).
> 
> It seems like the twisted-web project are planning to split off fairly
> soon: see
> http://twistedmatrix.com/pipermail/twisted-web/2004-April/000312.html

Actually, I'm going to beat them to it: Jp and I are going to be 
splitting off twisted.news this weekend. (*looks around for Jp*)

> It's pretty likely that this split will go ahead without any kind of
> imposed-from-above decisions about where the website will go, what the
> release cycle will look like, where the docs will move to, what the
> status of shared docs will be (I tend to focus on docs...)

Web site will be somewhere on twistedmatrix.com. How about:

   http://projects.twistedmatrix.com/<projectname>
?

> The nightmare scenario for splitting twisted into subprojects is that
> every subproject develops its own release code, release procedures,
> testing framework, website, documentation style, community, policies...
> etc etc. And shortly after that we all spiral into the sun or something.

I've been working on the release automation the last few days. At 
*least* the SVN release process workflow will probably remain the same 
between all projects; I'll be splitting release-twisted off into a 
module in twisted.python soon to facilitate other projects using it.

We *want* to keep the community, documentation styles, web site, 
policies, all integrated fairly well. A little more on this later..

>  2. Release code, release procedures, testing framework, website,
>  documentation style, community, policies... imposed from above

Ok. :-)

>  3. Twisted Web (or whatever other project splits first) acting as a
>  "model split": evolving release mechanisms, policy etc etc that are
>  fundamentally sane and wonderful so that noone would think of doing
>  things any other way.

Well, this is why I'm starting with twisted.news. I'll also probably get 
to a few more projects before the web split occurs, all of them less 
popular. news, flow, (im, words), lore, conch, probably in something 
like that order.

Web is going to be more complex, because they're doing a rewrite now, 
and they don't know how they want to integrate nevow, etc...

> I personally would like to offer my help in documenting subproject
> procedures as they evolve, and storing that documentation in some kind
> of prominent place.

You posted about the documentation a short while ago, and I'll respond 
about it here.

Mary wants the documentation to be kept in a single project. I don't 
think this is how it should be done; we'll allow each project to keep 
its own doc/ directory. Each project should be responsible for its own 
documentation, but I can personally ensure that you have access to the 
docs for all the projects, though, Mary. :-)

HOWEVER, don't worry that the documentation will become disparate in any 
user-visible sense. All projects will have their documentation visible 
somewhere within twistedmatrix.com/, and we could even have a monolithic 
"docs" section that links to all the others if we find it becomes 
necessary (I think the current 'howto' page is an absolute mess, though).

The "Twisted Book" is up for debate; personally, I don't care about it, 
and I'd be inclined to just have a per-project "Book" (collection of 
HOWTOs in ps/pdf form). If people really think it's a good idea, though, 
there's no reason that we can't have the same monolithic book.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040417/36d38a86/attachment.pgp 

From glyph at divmod.com  Sat Apr 17 13:05:58 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 17 Apr 2004 13:05:58 -0400
Subject: [Twisted-Python] On splitting Twisted into subprojects
In-Reply-To: <20040417123542.GP29157@titus.home.puzzling.org>
References: <20040417123542.GP29157@titus.home.puzzling.org>
Message-ID: <7EF8E81F-9091-11D8-B6DF-000393C9700E@divmod.com>


On Apr 17, 2004, at 8:35 AM, Mary Gardiner wrote:

> Since 3 looks like being the most achievable, this is basically an
> appeal to the twisted-web folk to keep in mind that they should, where
> possible, try and make twisted-web the Model of a Modern Twisted
> Subproject. And make it as easy as possible for other subprojects to
> copy whatever it is that they're going to do.

I think that we are going to need some of #2 as well.  Without the 
Imposition From Above, the subprojects are likely to start in a similar 
place (modeled after Twisted.Web, as you suggest) and gradually diverge 
based on evolutionary needs, leaving them all completely different and 
weird in a year's time.

Your focus on docs is correct, though, because what we really need is a 
shared policy document :).

What we ALSO need, Christopher Armstrong, if you are reading this, is a 
release-twisted script which is its own, bootstrap-released project 
that can be run on ANY of the twisted subprojects to generate an 
instant release.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040417/d84d08b9/attachment.pgp 

From radix at twistedmatrix.com  Sat Apr 17 13:16:25 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 17 Apr 2004 13:16:25 -0400
Subject: [Twisted-Python] On splitting Twisted into subprojects
In-Reply-To: <7EF8E81F-9091-11D8-B6DF-000393C9700E@divmod.com>
References: <20040417123542.GP29157@titus.home.puzzling.org>
	<7EF8E81F-9091-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <40816669.2040002@twistedmatrix.com>

Glyph Lefkowitz wrote:
> 
> On Apr 17, 2004, at 8:35 AM, Mary Gardiner wrote:
> 
>> Since 3 looks like being the most achievable, this is basically an
>> appeal to the twisted-web folk to keep in mind that they should, where
>> possible, try and make twisted-web the Model of a Modern Twisted
>> Subproject. And make it as easy as possible for other subprojects to
>> copy whatever it is that they're going to do.
> 
> 
> I think that we are going to need some of #2 as well.  Without the 
> Imposition From Above, the subprojects are likely to start in a similar 
> place (modeled after Twisted.Web, as you suggest) and gradually diverge 
> based on evolutionary needs, leaving them all completely different and 
> weird in a year's time.
> 
> Your focus on docs is correct, though, because what we really need is a 
> shared policy document :).
> 
> What we ALSO need, Christopher Armstrong, if you are reading this, is a 
> release-twisted script which is its own, bootstrap-released project that 
> can be run on ANY of the twisted subprojects to generate an instant 
> release.

Ahem, I've been working on release-twisted full-time for the past 2 or 3 
days :-)

Anyway, I see no point in making it bootstrapped. The only 
"bootstrapping" that would theoretically be necessary is for releasing 
Twisted itself, where r-t is contained, and that's been possible since 
its conception. All of the other projects can just rely on the presence 
of twisted during their release.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040417/12e03dd8/attachment.pgp 

From glyph at divmod.com  Sat Apr 17 14:18:27 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 17 Apr 2004 14:18:27 -0400
Subject: [Twisted-Python] On splitting Twisted into subprojects
In-Reply-To: <4081631D.8090602@twistedmatrix.com>
References: <20040417123542.GP29157@titus.home.puzzling.org>
	<4081631D.8090602@twistedmatrix.com>
Message-ID: <9F91AF32-909B-11D8-B6DF-000393C9700E@divmod.com>


On Apr 17, 2004, at 1:02 PM, Christopher Armstrong wrote:

> The "Twisted Book" is up for debate; personally, I don't care about 
> it, and I'd be inclined to just have a per-project "Book" (collection 
> of HOWTOs in ps/pdf form). If people really think it's a good idea, 
> though, there's no reason that we can't have the same monolithic book.

The "twisted book" should not be a random conglomeration of HOWTOs 
(which are badly named anyway, they're *not* how-to documents, they're 
articles about concepts), it should be a book with some organization 
and structure.  The articles should stand on their own where possible, 
but there are a lot of interrelated concepts that you have to learn and 
they should reference each other.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040417/de81fffc/attachment.pgp 

From radix at twistedmatrix.com  Sat Apr 17 17:18:35 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 17 Apr 2004 17:18:35 -0400
Subject: [Twisted-Python] Twisted split: tap plugins
Message-ID: <40819F2B.2060709@twistedmatrix.com>

So, Jp and I ran into our first Big Problem with the Twisted split. 
First, though, we *have* gotten the TwistedNews repository set up:

   svn://svn.twistedmatrix.com/svn/TwistedNews/trunk
or
   svn+ssh://....

The problem is the tap plugin. Currently both TwistedNews and Twisted 
have a plugins.tml that contains a "news" tap plugin. We assume that 
we'll leave twisted.news in Twisted for a little while for backwards 
compatibility.

The alternatives that we've come up with are like so:

1) Rename 'mktap news' to 'mktap newsnews' in TwistedNews. Rename it
    back to 'news' when we get rid of twisted.news. This is Jp's
    solution.
2) Add an optional argument to the register() call in plugins.tml:
    allowOverride=True. This would mean that another register() call with
    similar arguments would override this one, whether it gets executed
    before or after this one. We would pass this argument to our
    deprecated tap-plugins in Twisted's plugins.tml. This is my solution.

I dislike the idea of a rename, because not only would we force users to 
change what they're doing now, we'd force them to change what they're 
doing later when we get rid of twisted.news.

This problem is going to have to be solved now, because we'll have 
similar problem with pretty much all of the packages we'll be splitting 
from Twisted.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040417/200feb49/attachment.pgp 

From itamar at itamarst.org  Sat Apr 17 17:28:31 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 17 Apr 2004 17:28:31 -0400
Subject: [Twisted-Python] Twisted split: tap plugins
In-Reply-To: <40819F2B.2060709@twistedmatrix.com>
References: <40819F2B.2060709@twistedmatrix.com>
Message-ID: <1082237310.24620.472.camel@sheriffpony>

On Sat, 2004-04-17 at 17:18, Christopher Armstrong wrote:

> We assume that we'll leave twisted.news in Twisted for a little while
> for backwards compatibility.

I question your assumptions!

Options:
1. No backwards compatibility.
2. If TwistedNews is installed, it will also show up as twisted.news for
backwards compatibility.

but having duplicate code is silly and confusing.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Sat Apr 17 17:33:15 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 17 Apr 2004 17:33:15 -0400
Subject: [Twisted-Python] Twisted split: tap plugins
In-Reply-To: <1082237310.24620.472.camel@sheriffpony>
References: <40819F2B.2060709@twistedmatrix.com>
	<1082237310.24620.472.camel@sheriffpony>
Message-ID: <1082237595.24622.474.camel@sheriffpony>

On Sat, 2004-04-17 at 17:28, Itamar Shtull-Trauring wrote:

> Options:
> 1. No backwards compatibility.
> 2. If TwistedNews is installed, it will also show up as twisted.news for
> backwards compatibility.

For twisted.web, I think we should go for option #2 using the *current*
code, and the new rewrite will of course not be in same namespace.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From slyphon at twistedmatrix.com  Sat Apr 17 18:22:50 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sat, 17 Apr 2004 18:22:50 -0400
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
Message-ID: <1082240569.22948.37.camel@willie-the-pimp>

This is response to issue 178 on the twisted tracker:
http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue178,
about the deferred method setTimeout.

The reason why I added a "DON'T USE THIS" to the docstring was that I
find that we are telling people this at least once a week. I think it
has more gravitas coming from the API documentation, as there is this
illusion that the people on IRC don't really know what they're talking
about, but if the author has marked something in the documentation, it
has a certain level of legitimacy.

I agree with spiv in the sense that it would be nice to have a minimal
interface that would provide this functionality. However, i think that
the level of control that is needed to pull this off properly is best
served by writing an explicit timeout method and accompanying call to
callLater. 

now, I'd like to present the idiom that we are try to encourage users to
follow every time we have to steer them away from setTimeout. 

------------------------------------------------------

d = iReturnADeferred()

def onTimeout():
    handleTimeoutCondition()

delayedCall = reactor.callLater(timeoutLen, onTimeout)

def success(value):
    handleSuccess()

def nonTimeoutFailure(reason):
    handleErrorCondition()

def cancelTimeout(val):
    if delayedCall.active():
        delayedCall.cancel()

d.addBoth(cancelTimeout)
d.addCallback(success)
d.addErrback(nonTimeoutFailure)

-------------------------------------------------------

Here you see that each step is very explicit. You can see what happens
on success and on timeout (failure). I think one problem with setTimeout
is the handling of the IDelayedCall is something that a new user could
miss.  

For instance, someone who hadn't /read/ the code of setTimeout, would
most likely miss the returned IDelayedCall, and wouldn't know to cancel
the pending timeout call in the event of success OR other failure. This
is _a crucial piece of the code path_, and setTimeout makes this easier
to miss.



As from the Zen of Python Programming:

- Explicit is better than implicit
    
    setTimeout hides a small piece of code that contains all of the
    important conceptual elements that a user is required to understand
    so that they may handle this side-exit condition properly.
    

- Special cases aren't special enough to break the rules

    Delayed calls are orthogonal to deferreds. 

    Deferreds are a _reactive_ tool, they fire in response to an event
    
    delayed calls are a _proactive_ tool, they cause events to fire

    Mixing the two together for the special case of dealing with a
    timeout is at best hairy and at worst ugly and confusing.

    Timeout conditions are _not necessarily_ something that a user needs
    to deal with 80% of the time they are working with deferreds. 


- Simple is better than complex

    The deferred api should contain absolutely necessary functionality. 

    Let's emulate the python language, not the python standard library


- There should be one, and preferrably only one way to do it

    It is better to have users of our API use a widely-understood and
    flexible idiom to accomplish this rather than a half-baked method
    that saves them 8 lines of easily written and conceptually crucial
    code

    I would like to recommend that we document a best-practice idiom
    in the deferred api documentation, and remove setTimeout.


- If an implementation is hard to explain it's a bad idea

    Explaining to users how to properly use setTimeout takes more effort
    than explaining to them how to use the tools that setTimeout employs
    to achieve its functionality.


spiv said: 

"In hindsight, I should've thought harder about the implications of
setTimeout before I committed it... but now it's there, I don't like the
idea of ripping it out unless we have a clearly better solution."

This is a less-than-optimal solution to an edge-case use of two
orthogonal parts of our API.

It makes no sense to leave a sharp, pointy thing lying around for users
to hurt themselves with, and to constantly tell them "DON'T USE THAT".


-Jonathan Simms 
slyphon AT twistedmatrix DOT com

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040417/88af04b4/attachment.pgp 

From bob at redivi.com  Sat Apr 17 19:05:11 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 17 Apr 2004 19:05:11 -0400
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <1082240569.22948.37.camel@willie-the-pimp>
References: <1082240569.22948.37.camel@willie-the-pimp>
Message-ID: <ADA4AC4E-90C3-11D8-8EF5-000A95686CD8@redivi.com>


On Apr 17, 2004, at 6:22 PM, Jonathan Simms wrote:

> This is response to issue 178 on the twisted tracker:
> http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue178,
> about the deferred method setTimeout.
>
> The reason why I added a "DON'T USE THIS" to the docstring was that I
> find that we are telling people this at least once a week. I think it
> has more gravitas coming from the API documentation, as there is this
> illusion that the people on IRC don't really know what they're talking
> about, but if the author has marked something in the documentation, it
> has a certain level of legitimacy.
>
> I agree with spiv in the sense that it would be nice to have a minimal
> interface that would provide this functionality. However, i think that
> the level of control that is needed to pull this off properly is best
> served by writing an explicit timeout method and accompanying call to
> callLater.
>
> now, I'd like to present the idiom that we are try to encourage users 
> to
> follow every time we have to steer them away from setTimeout.

+10, setTimeout as-is is just about the absolute worst way it could 
possibly be implemented, and this version makes sense.  The only 
"problem" is that existing APIs will have to be refactored such that 
there is something useful and public you can use for 
"handleTimeoutCondition", because IIRC most of them don't have a 
cancellation feature at all -- let alone one that's public and usable.

-bob




From mary-twisted at puzzling.org  Sat Apr 17 19:04:07 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 18 Apr 2004 09:04:07 +1000
Subject: [Twisted-Python] On splitting Twisted into subprojects
In-Reply-To: <4081631D.8090602@twistedmatrix.com>
References: <20040417123542.GP29157@titus.home.puzzling.org>
	<4081631D.8090602@twistedmatrix.com>
Message-ID: <20040417230407.GS29157@titus.home.puzzling.org>

On Sat, Apr 17, 2004, Christopher Armstrong wrote:
> Mary wants the documentation to be kept in a single project. I don't 
> think this is how it should be done; we'll allow each project to keep 
> its own doc/ directory. Each project should be responsible for its own 
> documentation, but I can personally ensure that you have access to the 
> docs for all the projects, though, Mary. :-)
> 
> HOWEVER, don't worry that the documentation will become disparate in any 
> user-visible sense. All projects will have their documentation visible 
> somewhere within twistedmatrix.com/, and we could even have a monolithic 
> "docs" section that links to all the others if we find it becomes 
> necessary (I think the current 'howto' page is an absolute mess, though).

Yeah the howto page is a mess (*and* misnamed as Glyph points out
elsewhere). There's also very weird coverage in places (detailed things
covered, basic things missing) that having subprojects may help with,
because coverage of their subproject will be important to them.

Goodness knows what happens to the tutorial in this model. It could
perhaps split into pieces and be greatly expanded by each subproject. It
definitely is useful to people: most docs bugs are filed against it.

At a lower level, all I really want from the docs is two things:

 1. Ability to find them in some kind of defined spot and to be able to
 edit the etc. You state this above.
 
 2. Some kind of policy about certain things which I can't even begin to
 define yet, but which may include directory structure, referencing and
 the like. However, since doc refactors are easier than code refactors,
 I'm happy to make policy when required rather than do it in advance.

 3. Cooperation from subproject developers: ie ability to hassle them
 about docs, nag them about broken and missing docs and that sort of
 thing. (At present, I file docs bugs against myself, that can't
 continue with X subprojects :) )

I think at the moment I don't really have 3, because a solid half of the
project's developers aren't aware that there is someone who has (however
tenuous) responsibility for the docs, especially since the twisted-web
list appeared fairly early in that process. I may be misjudging people
there.

-Mary



From mary-twisted at puzzling.org  Sat Apr 17 19:10:30 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 18 Apr 2004 09:10:30 +1000
Subject: [Twisted-Python] On splitting Twisted into subprojects
In-Reply-To: <20040417230407.GS29157@titus.home.puzzling.org>
References: <20040417123542.GP29157@titus.home.puzzling.org>
	<4081631D.8090602@twistedmatrix.com>
	<20040417230407.GS29157@titus.home.puzzling.org>
Message-ID: <20040417231030.GT29157@titus.home.puzzling.org>

On Sun, Apr 18, 2004, Mary Gardiner wrote:
> I think at the moment I don't really have 3, because a solid half of
> the project's developers aren't aware that there is someone who has
> (however tenuous) responsibility for the docs, especially since the
> twisted-web list appeared fairly early in that process. I may be
> misjudging people there.

On reflection, this is probably most of the reason I like a separate
docs project: if people have to commit docs into a separate project,
they would probably be more aware of a cross-Twisted documentation
policy (insofar as one exists, which it will, I hope).

However, that's clearly not sufficient justification (because if you
replace the words "docs" with "code" the statement becomes stupid).

-Mary



From exarkun at divmod.com  Sat Apr 17 19:59:22 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sat, 17 Apr 2004 23:59:22 GMT
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
Message-ID: <20040417235922.30707.1671390040.divmod.quotient.90@ohm>

On Sat, 17 Apr 2004 18:22:50 -0400, Jonathan Simms <slyphon at twistedmatrix.com> wrote:
>
> [snip]
> 
> ------------------------------------------------------
> 
> d = iReturnADeferred()
> 
> def onTimeout():
>     handleTimeoutCondition()
> 
> delayedCall = reactor.callLater(timeoutLen, onTimeout)
> 
> def success(value):
>     handleSuccess()
> 
> def nonTimeoutFailure(reason):
>     handleErrorCondition()
> 
> def cancelTimeout(val):
>     if delayedCall.active():
>         delayedCall.cancel()

      return val

> 
> d.addBoth(cancelTimeout)
> d.addCallback(success)
> d.addErrback(nonTimeoutFailure)
> 
> -------------------------------------------------------

  While I think the above is very close to being correct (it even fooled me into thinking it was correct for several minutes, during which I composed an alternate email expounding on how we might simplify users' lives by extracting the common portions of the above into a helper function), ultimately even it does not solve all the issues relating to timing out Deferreds.

  The problem is simply that "onTimeout" in the above code cannot be correctly defined by anyone except the person who defined "iReturnADeferred".

  The above pattern may be useful for framework implementors, but not users.  Framework implementors typically (though not always) understand how to handle timeout issues, so this is of little help.

  I think that users asking for help with setTimeout or with timing out Deferreds need to be handled in one of two ways:

  1) Direct them to APIs related to the features they wish to use with timeouts that already support timeouts directly (ie, not through setTimeout calls on the Deferreds they return).  Examples of such APIs include twisted.web.client.getPage and twisted.names.client.lookupAddress.

  2) If APIs for the feature they wish to use do not support timeouts, explain this.  Recommend that the user submit a patch or open an issue on the bug tracker, and/or apologize to them that Twisted is not yet perfect in every respect.

> [snip]
> 
> It makes no sense to leave a sharp, pointy thing lying around for users
> to hurt themselves with, and to constantly tell them "DON'T USE THAT".
> 

  I think that deprecating setTimeout is a good thing, even if several years must pass before we can actually remove it.  In addition to the reasons Jonathan gave, I will add this:

  setTimeout() is the only part of Deferreds that tie them to twisted.internet.  If it is removed, defer.py could (other issues, such as backwards compatibility and user consternation aside) be moved to the twisted.python package.  It also makes it that much easier to use Deferreds with a non-Twisted reactor.

  Jp



From andrew-twisted at puzzling.org  Sat Apr 17 20:25:34 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 18 Apr 2004 10:25:34 +1000
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <1082240569.22948.37.camel@willie-the-pimp>
References: <1082240569.22948.37.camel@willie-the-pimp>
Message-ID: <20040418002534.GA7803@frobozz>

It looks like I've succeeded in rekindling interest in this issue :)

On Sat, Apr 17, 2004 at 06:22:50PM -0400, Jonathan Simms wrote:
> This is response to issue 178 on the twisted tracker:
> http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue178,
> about the deferred method setTimeout.
> 
> The reason why I added a "DON'T USE THIS" to the docstring was that I
> find that we are telling people this at least once a week. I think it
> has more gravitas coming from the API documentation, as there is this
> illusion that the people on IRC don't really know what they're talking
> about, but if the author has marked something in the documentation, it
> has a certain level of legitimacy.

Well, I guess I'm a bit confused.  Why not raise a DeprecationWarning as
well then?  Is "DON'T USE THIS" meant to be a watered-down version of a
DeprecationWarning?

> I agree with spiv in the sense that it would be nice to have a minimal
> interface that would provide this functionality. However, i think that
> the level of control that is needed to pull this off properly is best
> served by writing an explicit timeout method and accompanying call to
> callLater. 

The tricky part isn't the callLater, it's the actual cancellation of
whatever the operation that would've produced a deferred result -- and
that's something defer.py can't help with, because it is app-specific.

> now, I'd like to present the idiom that we are try to encourage users to
> follow every time we have to steer them away from setTimeout. 
> 
> ------------------------------------------------------
> 
> d = iReturnADeferred()
> 
> def onTimeout():
>     handleTimeoutCondition()
> 
> delayedCall = reactor.callLater(timeoutLen, onTimeout)
> 
> def success(value):
>     handleSuccess()
> 
> def nonTimeoutFailure(reason):
>     handleErrorCondition()
> 
> def cancelTimeout(val):
>     if delayedCall.active():
>         delayedCall.cancel()
> 
> d.addBoth(cancelTimeout)
> d.addCallback(success)
> d.addErrback(nonTimeoutFailure)
> 
> -------------------------------------------------------
> 
> Here you see that each step is very explicit. You can see what happens
> on success and on timeout (failure). I think one problem with setTimeout
> is the handling of the IDelayedCall is something that a new user could
> miss.  

First, there's a bug.  Presumably, cancelTimeout should return val,
otherwise you swallow the result/failure, regardless of what actually
happens.

What I don't see here is the most important part: presumably,
iReturnADeferred starts a long-running operation going, maybe a call to a
remote server.  This code doesn't do anything to stop that operation, and
doesn't do anything to prevent an AlreadyCalledError happening in that code
when the long-running operation completes.  Or does the mysterious
handleTimeoutCondition method do that?

setTimeout doesn't provide that either -- but it was my understanding that
that was the main objection to it.  Why is handling this yourself (which as
you demonstrate is error-prone!) an improvement over setTimeout?

With setTimeout, this code becomes:

----
d = iReturnADeferred()

def onTimeout():
    handleTimeoutCondition()
    raise defer.TimeoutError

d.setTimeout(timeoutLen, onTimeout)

def success(value):
    handleSuccess()

def nonTimeoutFailure(reason):
    if reason.check(defer.TimeoutError):
        raise reason  # don't process TimeoutErrors here
    handleErrorCondition()

d.addCallback(success)
d.addErrback(nonTimeoutFailure)
----

I think that's an accurate translation, anyway, your example relies a bit
too heavily on mysterious global functions to be 100% clear.

> For instance, someone who hadn't /read/ the code of setTimeout, would
> most likely miss the returned IDelayedCall, and wouldn't know to cancel
> the pending timeout call in the event of success OR other failure. This
> is _a crucial piece of the code path_, and setTimeout makes this easier
> to miss.

I think you misunderstand setTimeout.  You can safely ignore the
IDelayedCall it returns (and the fact it does so isn't even documented in
the docstring), and the delayed call will be cancelled for you anyway if the
deferred is called back before the timeout triggers.  setTimeout doesn't
make this easier to miss; it makes it so you don't have to worry about it at
all.

> As from the Zen of Python Programming:
> 
> - Explicit is better than implicit
>     
>     setTimeout hides a small piece of code that contains all of the
>     important conceptual elements that a user is required to understand
>     so that they may handle this side-exit condition properly.

This is true of many functions and classes, e.g. how LineReceiver's
dataReceived handler works is an excellent example of how to do a certain
task in Twisted, but the implementation is hidden from the user!  Oh, except
that they can always read the source if they want to know :)

I don't believe that convenience functions are inherently bad because they
hide things from the user (and defer.py has lots of them).  If they mean
there's one less code idiom to learn, then great.  If they mean there's a
working example for people to read, including warts that real-life imposes
that wouldn't be in an artificial example, great.

>     
> - Special cases aren't special enough to break the rules
> 
>     Delayed calls are orthogonal to deferreds. 

This I somewhat agree with, enough that I'd be tempted to make setTimeout
live as a help function in twisted.internet.util rather than a method of
Deferred, or similar, except that it would be considerably harder and
messier to write.

>     Deferreds are a _reactive_ tool, they fire in response to an event
>     
>     delayed calls are a _proactive_ tool, they cause events to fire
> 
>     Mixing the two together for the special case of dealing with a
>     timeout is at best hairy and at worst ugly and confusing.

I disagree.  The event that Deferreds react to has to come from *somewhere*.

What is problematic is that timeouts provide a *second* place that might
trigger the Deferred, in addition to whatever the usual place the creator
expects.  With setTimeout, this means that AlreadyCalledErrors can arise
from calls to d.callback/d.errback where the original author didn't expect
them, just because a user of that module is setting timeouts to Deferreds.
I thought this was the primary objection to setTimeout?  It's certainly the
biggest concern I have about it.

Ok, how about a compromise: if a creator a Deferred is able to cope with
timeouts, they should pass an "allowTimeouts=True" flag to the constructor.
Without it, the setTimeout method will raise an AssertionError.  (For
backwards-compatibility, for a release it will merely raise a Warning rather
than an exception).  I'm willing to implement this, and properly document
setTimeout in the Deferred HOWTO while I'm at it.  This is now my preferred
option.

>     Timeout conditions are _not necessarily_ something that a user needs
>     to deal with 80% of the time they are working with deferreds. 

Great.  So they won't call setTimeout.  Why is this a problem?

> - Simple is better than complex
> 
>     The deferred api should contain absolutely necessary functionality. 
> 
>     Let's emulate the python language, not the python standard library

On the other hand, timeouts are often desired functionality, and they should
have a common API for people to implement them and use them.

It would be a shame if "oh, I got a deferred from twisted.news, but I want
to set a timeout on it, so I do d.callback(twisted.news.magicTimeoutResult)
in a DIY delayed call... but if I get a deferred from twisted.mail I want to
set a timeout on, I do mailConnection.timeoutRequest(d), and if..." etc.

Functions/methods to support timeouts are an ideal candidate for inclusion
in Twisted, if only we could agree on what functions/methods :)

> - There should be one, and preferrably only one way to do it
> 
>     It is better to have users of our API use a widely-understood and
>     flexible idiom to accomplish this rather than a half-baked method
>     that saves them 8 lines of easily written and conceptually crucial
>     code

You mean error-prone, like your example ;)

>     I would like to recommend that we document a best-practice idiom
>     in the deferred api documentation, and remove setTimeout.

I don't believe it's easily written until you have a pretty advanced grasp
of both Deferreds and reactor.callLater.  I don't see why allowing users of
Deferreds to just say "d.setTimeout(5)" is a bad thing?

setTimeout has the big big advantage that it's dead easy for *users* of
Deferreds to work with.  The trouble with it is that it requires some work
from the *creators* of Deferreds to support safely -- but I see the same
flaw in every solution proposed, including your own of documenting and
entirely by-hand idiom.

> - If an implementation is hard to explain it's a bad idea
> 
>     Explaining to users how to properly use setTimeout takes more effort
>     than explaining to them how to use the tools that setTimeout employs
>     to achieve its functionality.

I believe your idiom suffers from this even worse than setTimeout.

I'm happy to write some docs to support correct usage of setTimeout that
people can be referred to.

> spiv said: 
> 
> "In hindsight, I should've thought harder about the implications of
> setTimeout before I committed it... but now it's there, I don't like the
> idea of ripping it out unless we have a clearly better solution."

I think my "allowTimeouts" proposal above is a clearly better solution. :)

I'm going to spend a little time pondering it, then I'll look at
implementing a patch and adding it to the bug.

> This is a less-than-optimal solution to an edge-case use of two
> orthogonal parts of our API.

I disagree.

> It makes no sense to leave a sharp, pointy thing lying around for users
> to hurt themselves with, and to constantly tell them "DON'T USE THAT".

Agreed.  It should be properly documented at least.

-Andrew.




From andrew-twisted at puzzling.org  Sat Apr 17 20:28:41 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 18 Apr 2004 10:28:41 +1000
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <20040417235922.30707.1671390040.divmod.quotient.90@ohm>
References: <20040417235922.30707.1671390040.divmod.quotient.90@ohm>
Message-ID: <20040418002841.GB7803@frobozz>

On Sat, Apr 17, 2004 at 11:59:22PM +0000, exarkun at divmod.com wrote:
> 
>   setTimeout() is the only part of Deferreds that tie them to
>   twisted.internet.  If it is removed, defer.py could (other issues, such
>   as backwards compatibility and user consternation aside) be moved to the
>   twisted.python package.  It also makes it that much easier to use
>   Deferreds with a non-Twisted reactor.

This bugs me too, but only a little.  I can't think of any other
asynchronous python frameworks outside of Twisted that might want to use
Deferreds.

-Andrew.




From bob at redivi.com  Sat Apr 17 20:51:58 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 17 Apr 2004 20:51:58 -0400
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <20040418002841.GB7803@frobozz>
References: <20040417235922.30707.1671390040.divmod.quotient.90@ohm>
	<20040418002841.GB7803@frobozz>
Message-ID: <98565342-90D2-11D8-8EF5-000A95686CD8@redivi.com>


On Apr 17, 2004, at 8:28 PM, Andrew Bennetts wrote:

> On Sat, Apr 17, 2004 at 11:59:22PM +0000, exarkun at divmod.com wrote:
>>
>>   setTimeout() is the only part of Deferreds that tie them to
>>   twisted.internet.  If it is removed, defer.py could (other issues, 
>> such
>>   as backwards compatibility and user consternation aside) be moved 
>> to the
>>   twisted.python package.  It also makes it that much easier to use
>>   Deferreds with a non-Twisted reactor.
>
> This bugs me too, but only a little.  I can't think of any other
> asynchronous python frameworks outside of Twisted that might want to 
> use
> Deferreds.

I've used it outside of twisted plenty of times (more failure than 
deferred), even in other networking code... but I wrote my own versions 
of each because I wanted to fix issues with deferred, and I wanted a 
simpler implementation of failure.

-bob




From exarkun at divmod.com  Sun Apr 18 00:21:11 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sun, 18 Apr 2004 04:21:11 GMT
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
Message-ID: <20040418042111.30707.1531569673.divmod.quotient.94@ohm>

On Sun, 18 Apr 2004 10:25:34 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
>
> [snip]
> 
> I don't see why allowing users of Deferreds to just say 
> "d.setTimeout(5)" is a bad thing?
>
> [snip]

  I tend to prefer "foo(x, y, timeout=z)" over "foo(x, y).setTimeout(z)".  As both require explicit support from the implementor of "foo" (as you correctly note is the only way .setTimeout() can actually work), it seems unnecessary to special-case this form of failure in Deferreds.  I cast my vote for the former.

  Jp





From slyphon at twistedmatrix.com  Sun Apr 18 03:19:38 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sun, 18 Apr 2004 03:19:38 -0400
Subject: [Twisted-Python] addCallbacks issue
Message-ID: <1082272778.23431.6.camel@willie-the-pimp>

I think that:

    d.addCallback(cb)
    d.addErrback(eb)

is the more common idiom because it avoids the double-helix nature of
deferred handling, opting instead for a single node-to-node chain of
handling, which is less complex conceptually.

--snip!--

> Another way of approaching the concept might be to say that each stage
> in the chain has to deal with the errors in the chain before it - that
> is, if you do:
> 
>       d.addCallbacks(cb, eb)
> 
> then eb needs to handle any errors that arise from the data source, 
> while if you do:
> 
>       d.addCallback(cb)
>       d.addErrback(eb)
> 
> then eb needs to handle any errors that arise from the data source,
AND 
> any errors that arise from cb.
> 
>

I think that this chunk is the important concept to document. This
explanation in addition to the imperitave example given by Stephen would
ensure that this concept is documented and explained sufficiently. In
fact, i'd never thought to consider deferreds as a try/except/else
statement. very useful concept!

It's funny, because when i read the original posting to this thread, I
had the same confusion. "Waitasec, that errback /should/ get called!"

this thread has helped to elucidate a subtle and important point about
deferreds.



-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040418/4caf7871/attachment.pgp 

From slyphon at twistedmatrix.com  Sun Apr 18 04:48:28 2004
From: slyphon at twistedmatrix.com (slyphon at twistedmatrix.com)
Date: Sun, 18 Apr 2004 08:48:28 GMT
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
Message-ID: <20040418084828.30707.890808521.divmod.quotient.97@ohm>

>It looks like I've succeeded in rekindling interest in this issue :)
>
>> The reason why I added a "DON'T USE THIS" to the docstring was that I
>> find that we are telling people this at least once a week. I think it
>> has more gravitas coming from the API documentation, as there is this
>> illusion that the people on IRC don't really know what they're talking
>> about, but if the author has marked something in the documentation, it
>> has a certain level of legitimacy.
>
>Well, I guess I'm a bit confused.  Why not raise a DeprecationWarning as
>well then?  Is "DON'T USE THIS" meant to be a watered-down version of a
>DeprecationWarning?

Yes. It was a diplomatic move. I understand that you wrote this
function, and that you feel strongly that it adds value to the twisted
library. To me, a DeprecationWarning represents that there has been a
consensus reached that a certain function is not going to be supported
in the future. I wouldn't be so haughty as to decide that on my own, so
I put a note that reflected the advice that we normally give users on
IRC into the API docs.

>
>> I agree with spiv in the sense that it would be nice to have a minimal
>> interface that would provide this functionality. However, i think that
>> the level of control that is needed to pull this off properly is best
>> served by writing an explicit timeout method and accompanying call to
>> callLater. 
>
>The tricky part isn't the callLater, it's the actual cancellation of
>whatever the operation that would've produced a deferred result -- and
>that's something defer.py can't help with, because it is app-specific.

Indeed, i realised the flaws in my example about 20 minutes after
sending it

>>
>> now, I'd like to present the idiom that we are try to encourage users to
>> follow every time we have to steer them away from setTimeout. 
>> 
>> ------------------------------------------------------
>> 
>> d = iReturnADeferred()
>> 
>> def onTimeout():
>>     handleTimeoutCondition()
>> 
>> delayedCall = reactor.callLater(timeoutLen, onTimeout)
>> 
>> def success(value):
>>     handleSuccess()
>> 
>> def nonTimeoutFailure(reason):
>>     handleErrorCondition()
>> 
>> def cancelTimeout(val):
>>     if delayedCall.active():
>>         delayedCall.cancel()
>> 
>> d.addBoth(cancelTimeout)
>> d.addCallback(success)
>> d.addErrback(nonTimeoutFailure)
>> 
>> -------------------------------------------------------
>> 
>First, there's a bug.  Presumably, cancelTimeout should return val,
>otherwise you swallow the result/failure, regardless of what actually
>happens.

Yes, indeed.

>
>What I don't see here is the most important part: presumably,
>iReturnADeferred starts a long-running operation going, maybe a call to a
>remote server.  This code doesn't do anything to stop that operation, and
>doesn't do anything to prevent an AlreadyCalledError happening in that code
>when the long-running operation completes.  Or does the mysterious
>handleTimeoutCondition method do that?
>
>setTimeout doesn't provide that either -- but it was my understanding that
>that was the main objection to it.  Why is handling this yourself (which as
>you demonstrate is error-prone!) an improvement over setTimeout?

I apologise for the magicness implied by my example. 

What offends me about setTimeout is that it is a solution to a vague
problem. It seems to me that there are two different issues here, and
setTimeout doesn't solve either of them cleanly. 

The first is how to actually stop a long-running operation after a given
amount of time. Indeed, this functionality must be provided by the
framework author, perhaps exposing a public '.cancel()' method. There is
no way to provide or deal with this behavior in a generic way.

The other problem that I believe could be solved by a setTimeout-y
method is how to indicate that the client isn't interested in the
result of a long-running operation any more. 

I think this is an important distinction to make. It is a condition that
happens at the interface between your code and iReturnADeferred().
Instead of trying to stop whatever iReturnADeferred() is doing, you come
up with a way of saying, "after foo seconds, _i don't care about this
result_ and this is what we should do..." 


>
>>     Deferreds are a _reactive_ tool, they fire in response to an event
>>     
>>     delayed calls are a _proactive_ tool, they cause events to fire
>> 
>>     Mixing the two together for the special case of dealing with a
>>     timeout is at best hairy and at worst ugly and confusing.
>
>I disagree.  The event that Deferreds react to has to come from *somewhere*.

Yes, but the deferred is a reaction to an event. My point was that
you're adding event-creating code to an object whose job it is to react
to events. All i'm saying is that this adds complexity. Without the
current implementation of setTimeout, deferreds would be /completely
reactive/, and i think we can find a way to make them _appear_ that way.


>
>What is problematic is that timeouts provide a *second* place that might
>trigger the Deferred, in addition to whatever the usual place the creator
>expects.  With setTimeout, this means that AlreadyCalledErrors can arise
>from calls to d.callback/d.errback where the original author didn't expect
>them, just because a user of that module is setting timeouts to Deferreds.
>I thought this was the primary objection to setTimeout?  It's certainly the
>biggest concern I have about it.

indeed, i think this is the biggest problem I've faced when dealing with
deferreds

>
>Ok, how about a compromise: if a creator a Deferred is able to cope with
>timeouts, they should pass an "allowTimeouts=True" flag to the constructor.
>Without it, the setTimeout method will raise an AssertionError.  (For
>backwards-compatibility, for a release it will merely raise a Warning rather
>than an exception).  I'm willing to implement this, and properly document
>setTimeout in the Deferred HOWTO while I'm at it.  This is now my preferred
>option.

Hrrrrrrrrrrrrrrrrrrrmmmmm. Not a baaaaaaad compromise, but there's
something about it that doesn't sit with me. It seems that it would add
complexity to the very elegant design of Deferreds. My overall qualm
with setTimeout is that I think that if the API was in the state of
stability it is now, and setTimeout was proposed, that it's current
implementation would be rejected. 

I think that if we're going to provide this functionality, we should try
to come up with as transparent a solution as we can.

the following is an example of an idea i've been kicking around. Why
can't we just ignore the deferred after the timeout happens? 

(I use the style of my example above because that is what i'm
more comfortable with. If setTimeout would provide a similar
functionality, then i'm all for it.)

-----------------------------------------------------------------------

#!/usr/bin/env python2.3

from twisted.internet import defer, reactor

iTimedOut = False

defer.Deferred.debug = True

def setTimeoutForDeferred(d, seconds):
    aNewDeferred = defer.Deferred()
    
    from twisted.internet import reactor
    
    def onTimeout():
        # kill any further action on this deferred to avoid AlreadyCalledErrors
        d.callbacks = []  

        iTimedOut = True
        aNewDeferred.errback(defer.TimeoutError('deferred timed out'))
        
    delayed = reactor.callLater(seconds, onTimeout)
        
    def cb(value):
        if not iTimedOut:
            aNewDeferred.callback(value)
        
    def eb(reason):
        if not iTimedOut:
            aNewDeferred.errback(reason)
            
    def cancelTimeout(val):
        if delayed.active():
            delayed.cancel()
        return val

    d.addCallbacks(cb, eb)
    d.addBoth(cancelTimeout)

    return aNewDeferred


def iReturnADeferred():    # this is frameworky code
    d = defer.Deferred()
    reactor.callLater(5, d.callback, 'winnar!')
    return d


def iSetATimeout():    # this represents client-programmer code
    origd = iReturnADeferred()

    d = setTimeoutForDeferred(origd, 2)

    def cb(val):
        # if we time out, this code should not be called
        print "hooray!iReturnADeferred returned: %s" % val

    def eb(reason):
        e = reason.trap(defer.TimeoutError)
        if e == defer.TimeoutError:
            print "woops! we timed out"
        else:
            print "uh-oh! we didn't time out and there was an error!"

    d.addCallbacks(cb, eb)
    return d



if __name__ == "__main__":
    d = iSetATimeout()

    reactor.run()


-----------------------------------------------------------------------

Again, this is just code to illustrate my idea. There's no reason why
we have to hand the deferred that's returned by iReturnADeferred to the
rest of our code. We can hold on to that one and can substitute our own
deferred that is a bit more intelligent, it understands how to break the
chain after a length of time has passed.

The advantage here is that the author of iReturnADeferred doesn't need
to plan specially for timeout conditions, and the client doesn't have to
worry about AlreadyCalled errors (which to me are not something to
pooh-pooh, I take them as a sign that there's something wrong with my
design).

>>     I would like to recommend that we document a best-practice idiom
>>     in the deferred api documentation, and remove setTimeout.
>
>I don't believe it's easily written until you have a pretty advanced grasp
>of both Deferreds and reactor.callLater.  I don't see why allowing users of
>Deferreds to just say "d.setTimeout(5)" is a bad thing?


again, there's a difference between stopping a long-running or
long-waiting operation, which is something that deferreds cannot handle
at all, and indicating that after a certain amount of time, we don't
care about the result of that operation and would like to consider it an
erroneous condition.

I don't think that setTimeout makes this distinction clear (which may,
of course be a fault of the documentation/examples). Also, I want
whatever solution is accepted to make it easier to avoid
AlreadyCalled errors.


>
>setTimeout has the big big advantage that it's dead easy for *users* of
>Deferreds to work with.  The trouble with it is that it requires some work
>from the *creators* of Deferreds to support safely -- but I see the same
>flaw in every solution proposed, including your own of documenting and
>entirely by-hand idiom.
>

okay, i can understand this, and can agree in some sense. 


>> spiv said: 
>> 
>> "In hindsight, I should've thought harder about the implications of
>> setTimeout before I committed it... but now it's there, I don't like the
>> idea of ripping it out unless we have a clearly better solution."
>
>I think my "allowTimeouts" proposal above is a clearly better solution. :)

I don't like it. It just seems hacky. deferreds should handle this case,
without any extra specification from the author, as I believe that my
idea above would. 

>
>I'm going to spend a little time pondering it, then I'll look at
>implementing a patch and adding it to the bug.

please, lets come to a consensus before committing anything. ;)


Respectfully yours,
Jonathan 



From andrew-twisted at puzzling.org  Sun Apr 18 06:16:27 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 18 Apr 2004 20:16:27 +1000
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <20040418084828.30707.890808521.divmod.quotient.97@ohm>
	<20040418042111.30707.1531569673.divmod.quotient.94@ohm>
References: <20040418084828.30707.890808521.divmod.quotient.97@ohm>
	<20040418042111.30707.1531569673.divmod.quotient.94@ohm>
Message-ID: <20040418101627.GC7803@frobozz>

On Sun, Apr 18, 2004 at 08:48:28AM +0000, slyphon at twistedmatrix.com wrote:
[...]
> 
> again, there's a difference between stopping a long-running or
> long-waiting operation, which is something that deferreds cannot handle
> at all, and indicating that after a certain amount of time, we don't
> care about the result of that operation and would like to consider it an
> erroneous condition.
> 
[...]

On Sun, Apr 18, 2004 at 04:21:11AM +0000, exarkun at divmod.com wrote:
> 
>   I tend to prefer "foo(x, y, timeout=z)" over "foo(x, y).setTimeout(z)".
>   As both require explicit support from the implementor of "foo" (as you
>   correctly note is the only way .setTimeout() can actually work), it
>   seems unnecessary to special-case this form of failure in Deferreds.  I
>   cast my vote for the former.

I think that timeouts, or cancellations in general, are something that
Deferreds should *support*, even though they cannot provide them entirely
automatically.  I'll try to explain why.

Deferred objects are essentially placeholders for a result that isn't
available yet -- a result that is deferred until some later time.
Inevitably, this means there is some associated operation occuring that is
working towards generating that result (even if this operation is passive --
e.g. waiting for a response from a remote server).

Generally, when the recipient of a Deferred is no longer interested in the
result of that Deferred, there is no longer any need to continue the
underlying operation that would create that result.  It would be good if the
underlying operation was aborted in these situations (when possible), to
save resources.

Recipients of Deferreds have no knowledge of the result-generating operation
that is associated with them, nor should they.  In effect, Deferreds are not
just placeholders for pending results, but also intrinsically linked to the
operation that will eventually fulfill them.

Given that Deferreds are fundamentally linked to operations, not just
results, why not use that relationship to provide a consistent interface for
cancellations (and thus also timeouts)?

Here are the potential drawbacks I can think of to this view of Deferreds:
   - Not all operations are sanely interruptable, e.g. the worker thread
     kicked off by deferToThread.
   - foo(x, y, timeout=z) makes more sense for situations where a protocol
     or something requires that timeouts be set before an operation begins,
     and can't be adjusted once the operation is started.  I'm not aware of
     any such operations, though.

There are possibly other reasons why this view doesn't fit neatly -- if so,
please tell me! :)

The drawbacks I can think of aren't enough to dissuade me from this
viewpoint, though.  They do mean that Deferreds may need to only support
cancellations optionally, rather than always, according to what the creator
of the Deferred declares to be appropriate (i.e. the "allowTimeout" I
proposed for setTimeout, or perhaps "canCancel").  I don't see this as a
showstopper.

If people dislike coupling these things this tightly, perhaps Deferreds
should have an "operation" attribute, where things like a cancel method
would go -- does "deferred.operation.cancel('User clicked cancel')" read ok?
This is probably a good idea -- after all, a one-to-one relationship doesn't
necessarily imply that two things should be represented as one object (e.g.
HTTP Request and Response objects are always coupled that I can think of,
but keeping them seperate still feels right).

The operation object would also be a good place to put other functionality
that maybe only some operations could support, e.g. pausing an operation, or
something.  I'm just thinking out loud here.

The problem with the explict operation object is that it would make it even
harder for creators of Deferreds to fully implement things, although they
could just simply not provide one if they wanted to be lazy, I guess.

Any thoughts?

-Andrew.




From radix at twistedmatrix.com  Sun Apr 18 10:29:39 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 18 Apr 2004 10:29:39 -0400
Subject: [Twisted-Python] Twisted split: tap plugins
In-Reply-To: <1082237595.24622.474.camel@sheriffpony>
References: <40819F2B.2060709@twistedmatrix.com>	<1082237310.24620.472.camel@sheriffpony>
	<1082237595.24622.474.camel@sheriffpony>
Message-ID: <408290D3.5050300@twistedmatrix.com>

Itamar Shtull-Trauring wrote:
> On Sat, 2004-04-17 at 17:28, Itamar Shtull-Trauring wrote:
> 
> 
>>Options:
>>1. No backwards compatibility.
>>2. If TwistedNews is installed, it will also show up as twisted.news for
>>backwards compatibility.
> 
> 
> For twisted.web, I think we should go for option #2 using the *current*
> code, and the new rewrite will of course not be in same namespace.

Ok, yeah, I've decided that I want to keep deprecated backwards 
compatibility. We have kept it before for much smaller changes. There 
are three ways to do this:

  1. Leave a copy in Twisted proper for a release or two
  2. Physically install as twisted/news/
  3. Do something at runtime

#2 does not sound like a robust way to do it, but I am not sure of the 
particular problems involved.

#3 is also either hacky or problematic; an import hook is not something 
I want to resort to, and sys.modules munging requires managing to get 
some of our code to run before imports to 'twisted.news' happen.

#1 seems like it might work, barring problems with things like 
plugins.tml...

I just came up with another idea; I suppose it would be a mixture of #1 
and #3. We can release Twisted 1.3 and require that people using new 
split-offs use it. In Twisted 1.3, we delete twisted/news/* and so on, 
but we leave an __init__.py that sets things up for us so that it 
mirrors the new split-off package, if available (after printing a 
deprecation warning). After a few releases, we delete twisted/news entirely.


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040418/a2b36969/attachment.pgp 

From radix at twistedmatrix.com  Sun Apr 18 11:08:41 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 18 Apr 2004 11:08:41 -0400
Subject: [Twisted-Python] Twisted split: tap plugins
In-Reply-To: <408290D3.5050300@twistedmatrix.com>
References: <40819F2B.2060709@twistedmatrix.com>	<1082237310.24620.472.camel@sheriffpony>	<1082237595.24622.474.camel@sheriffpony>
	<408290D3.5050300@twistedmatrix.com>
Message-ID: <408299F9.10604@twistedmatrix.com>

Christopher Armstrong wrote:

> I just came up with another idea; I suppose it would be a mixture of #1 
> and #3. We can release Twisted 1.3 and require that people using new 
> split-offs use it. In Twisted 1.3, we delete twisted/news/* and so on, 
> but we leave an __init__.py that sets things up for us so that it 
> mirrors the new split-off package, if available (after printing a 
> deprecation warning). After a few releases, we delete twisted/news 
> entirely.

Itamar just told me he likes this idea on IRC. I'll implement it unless 
someone comes up with a problem with it....

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040418/ba02ea11/attachment.pgp 

From bob at redivi.com  Sun Apr 18 11:21:45 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 18 Apr 2004 11:21:45 -0400
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <20040418101627.GC7803@frobozz>
References: <20040418084828.30707.890808521.divmod.quotient.97@ohm>
	<20040418042111.30707.1531569673.divmod.quotient.94@ohm>
	<20040418101627.GC7803@frobozz>
Message-ID: <1A809BFC-914C-11D8-A48C-000A95686CD8@redivi.com>


On Apr 18, 2004, at 6:16 AM, Andrew Bennetts wrote:

> On Sun, Apr 18, 2004 at 04:21:11AM +0000, exarkun at divmod.com wrote:
>>
>>   I tend to prefer "foo(x, y, timeout=z)" over "foo(x, 
>> y).setTimeout(z)".
>>   As both require explicit support from the implementor of "foo" (as 
>> you
>>   correctly note is the only way .setTimeout() can actually work), it
>>   seems unnecessary to special-case this form of failure in 
>> Deferreds.  I
>>   cast my vote for the former.
>
> I think that timeouts, or cancellations in general, are something that
> Deferreds should *support*, even though they cannot provide them 
> entirely
> automatically.  I'll try to explain why.

Yes, cancellation should be supported in the Deferred object, timeouts 
should not.  Timeouts are just a specific case of cancellation that can 
be done outside of the implementation of Deferred.  Cancellation can't, 
because you need to know where the deferred came from originally in 
order to figure out how to cancel it and that information is not 
tracked.

-bob




From andrew-twisted at puzzling.org  Sun Apr 18 20:45:07 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 19 Apr 2004 10:45:07 +1000
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <1A809BFC-914C-11D8-A48C-000A95686CD8@redivi.com>
References: <20040418084828.30707.890808521.divmod.quotient.97@ohm>
	<20040418042111.30707.1531569673.divmod.quotient.94@ohm>
	<20040418101627.GC7803@frobozz>
	<1A809BFC-914C-11D8-A48C-000A95686CD8@redivi.com>
Message-ID: <20040419004507.GA27590@frobozz>

On Sun, Apr 18, 2004 at 11:21:45AM -0400, Bob Ippolito wrote:
> 
> On Apr 18, 2004, at 6:16 AM, Andrew Bennetts wrote:
> 
> >I think that timeouts, or cancellations in general, are something that
> >Deferreds should *support*, even though they cannot provide them entirely
> >automatically.  I'll try to explain why.
> 
> Yes, cancellation should be supported in the Deferred object, timeouts 
> should not.  Timeouts are just a specific case of cancellation that can 
> be done outside of the implementation of Deferred.  Cancellation can't, 
> because you need to know where the deferred came from originally in 
> order to figure out how to cancel it and that information is not 
> tracked.

I agree that timeouts can (and should) be implemented on top of
cancellations, which are a more general concept, and because of this I've
changed my mind about fixing setTimeout.

I don't think we should remove setTimeout until we have cancellation
support, though.

I'm happy for setTimeout to be deprecated now, though.

And I never liked the "DON'T USE THIS" docstring, which is just a way of
deprecating without really deprecating ;)

-Andrew.




From itamar at itamarst.org  Sun Apr 18 20:46:35 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 18 Apr 2004 20:46:35 -0400
Subject: [Twisted-Python] All use cases of getComponent
Message-ID: <1082335594.24622.484.camel@sheriffpony>

I'd like to have a list of all classes that use getComponent
(Componentized, Adapter - anything else?) and the expected behaviour -
do people override it, etc..

I'm working on Zope3 port of components and trying to figure out how to
do backwards-compat (Zope3 has __conforms__ instead of getComponent).

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From pje at telecommunity.com  Sun Apr 18 22:50:37 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Sun, 18 Apr 2004 22:50:37 -0400
Subject: [Twisted-Python] All use cases of getComponent
In-Reply-To: <1082335594.24622.484.camel@sheriffpony>
Message-ID: <5.1.1.6.0.20040418224744.021a5ec0@mail.telecommunity.com>

At 08:46 PM 4/18/04 -0400, Itamar Shtull-Trauring wrote:
>I'd like to have a list of all classes that use getComponent
>(Componentized, Adapter - anything else?) and the expected behaviour -
>do people override it, etc..
>
>I'm working on Zope3 port of components and trying to figure out how to
>do backwards-compat (Zope3 has __conforms__ instead of getComponent).

Are you sure?  Googling __conforms__ only finds a bunch of stuff from the 
types-sig back in 1999.

Perhaps you mean __conform__, as defined by PEP 246?




From itamar at itamarst.org  Sun Apr 18 23:21:21 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 18 Apr 2004 23:21:21 -0400
Subject: [Twisted-Python] All use cases of getComponent
In-Reply-To: <5.1.1.6.0.20040418224744.021a5ec0@mail.telecommunity.com>
References: <5.1.1.6.0.20040418224744.021a5ec0@mail.telecommunity.com>
Message-ID: <1082344880.24620.491.camel@sheriffpony>

On Sun, 2004-04-18 at 22:50, Phillip J. Eby wrote:

> Perhaps you mean __conform__, as defined by PEP 246?

Yep, my bad.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From exarkun at divmod.com  Mon Apr 19 01:51:50 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Mon, 19 Apr 2004 05:51:50 GMT
Subject: [Twisted-Python] All use cases of getComponent
Message-ID: <20040419055150.30707.766960162.divmod.quotient.101@ohm>

On Sun, 18 Apr 2004 20:46:35 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>I'd like to have a list of all classes that use getComponent
> (Componentized, Adapter - anything else?) and the expected behaviour -
> do people override it, etc..
> 
> I'm working on Zope3 port of components and trying to figure out how to
> do backwards-compat (Zope3 has __conforms__ instead of getComponent).

  Atop implements getComponent twice: once on a subclass of Componentized to make it slightly more convenient to use (automatic referenceTo/getItem logic), and once as a full implementation on another class that does not inherit from Componentized.

  Atop would also like an IComponentized to be added, but I'm not sure if that has any implications for the port to Zope3.

  Jp



From r.taylor at eris.qinetiq.com  Mon Apr 19 03:56:46 2004
From: r.taylor at eris.qinetiq.com (Richard Taylor)
Date: Mon, 19 Apr 2004 07:56:46 +0000
Subject: [Twisted-Python] New user, help needed with raw UDP packets
In-Reply-To: <40806940.9030500@tv.debian.net>
References: <200404141546.27171.r.taylor@eris.qinetiq.com>
	<40806940.9030500@tv.debian.net>
Message-ID: <200404190856.56373.r.taylor@eris.qinetiq.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Many thanks to everyone that responded to my appeal for help with raw UDP 
sockets. Following up on the useful pointers I have come up with an initial 
proof of concept. The code below does appear to do what I need, although it 
needs lots of tiding up. If anyone can see anything wrong with what I am 
doing I would value the criticism. 


	
	import socket, fcntl
	from twisted.internet import protocol
	from twisted.internet import udp
	from twisted.internet import reactor

	import impacket # library from 
http://oss.coresecurity.com/projects/impacket.html
	from impacket import ImpactDecoder,ImpactPacket

	from twisted.python.runtime import platformType
	if platformType == 'win32':
	    from errno import WSAEWOULDBLOCK as EWOULDBLOCK
	    from errno import WSAEINTR as EINTR
	    from errno import WSAEMSGSIZE as EMSGSIZE
	    from errno import WSAECONNREFUSED as ECONNREFUSED
	    from errno import WSAECONNRESET
	    from errno import EAGAIN
	elif platformType != 'java':
	    from errno import EWOULDBLOCK, EINTR, EMSGSIZE, ECONNREFUSED, EAGAIN
	
	
	class Echo(protocol.DatagramProtocol):

	    def __init__(self):
	        self.fake_addr = None
	        self.dest = "127.0.0.1"
	        self.port = 9999

	    def setFakeSrc(self, addr):
	        """Set the fake address from which packets should appear to come."""
	        self.fake_addr = addr
	        
	    def startProtocol(self):
	        print "starting Echo"
	        
	    def datagramReceived(self, data, (host, port)):
	        """data is a IP packet object from Impacket."""
	        ip = data
	        udp = ip.child()
	        if udp.get_uh_dport() == 9999:
	            src = ip.get_ip_src()
	
	            print "host = %s" % (host,)
	            print "udp src = %s" % (src,)
	            print "received: %s" % (udp,)
	
	            if self.fake_addr and src == "128.98.3.63":
			# Fake the src address and resend the packet
	                ip.set_ip_src(self.fake_addr)
	                print "resending with src = %s\n" % (ip.get_ip_src(),)
	                self.transport.write(ip.get_packet(), (self.dest,self.port))

	class RawUDPPort(udp.Port):
	    """Raw udp port."""

	    __implements__ = udp.Port.__implements__

	    socketType = socket.SOCK_RAW # Overide socket type.
	    addressFamily = socket.AF_INET
	
	    def __init__(self, *args, **kw):
	        udp.Port.__init__(self,*args,**kw)
	        
	        self.protocolNum = socket.getprotobyname('udp')
	        self.decoder = ImpactDecoder.IPDecoder()
	    
	    def createInternetSocket(self):
	        s = socket.socket(self.addressFamily, self.socketType, 	
self.protocolNum)
	        s.setblocking(0)
		# enable the sending of udp headers.
	        s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
	        if fcntl and hasattr(fcntl, 'FD_CLOEXEC'):
	            old = fcntl.fcntl(s.fileno(), fcntl.F_GETFD)
	            fcntl.fcntl(s.fileno(), fcntl.F_SETFD, old | fcntl.FD_CLOEXEC)
	        return s
	
	    def doRead(self):
	        """Called when my socket is ready for reading."""
	        read = 0
	        while read < self.maxThroughput:
	            try:
	                data, addr = self.socket.recvfrom(self.maxPacketSize)
	                read += len(data)
	                ip = self.decoder.decode(data)
	                if isinstance(ip.child(),ImpactPacket.UDP) and \
	                   ip.child().get_uh_dport() == self.port:                
	                    self.protocol.datagramReceived(ip, addr)
	            except socket.error, se:
	                no = se.args[0]
	                if no in (EAGAIN, EINTR, EWOULDBLOCK):
	                    return
	                if (no == ECONNREFUSED) or (platformType == "win32" and no == 	
WSAECONNRESET):
	                    # XXX for the moment we don't deal with connection 	
refused
	                    # in non-connected UDP sockets.
	                    pass
	                else:
	                    raise
	##            except:
	##                log.deferr()
	
	echo = Echo()
	echo.setFakeSrc("127.0.0.1")

	reactor.listenWith(RawUDPPort,
                   proto=echo, port=9999, interface="localhost", 	
reactor=reactor)
	reactor.run()

Thanks again to everyone that helped. Once I have tidied things up I will send 
the finished bits to the appropriate people (who are they?) in case they want 
to include them as an example.

Regards

Richard

- -- 
QinetiQ                                  
B009 Woodward Building
St. Andrews Road
Malvern
Worcs WR14 3PS
Jabber: RichardTaylor at jabber.org
PGPKey: http://search.keyserver.net:11371/pks/lookup?op=get&search=0xA7DA9FD9
Key fingerprint = D051 A121 E7C3 485F 3C0E  1593 ED9E D868 A7DA 9FD9
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQFAg4ZE7Z7YaKfan9kRAqPIAKDOmCMLn7zEXKbr7i3kmkw7ofibFwCcCvZt
CqkSAsP397lFCqKFeke0J6s=
=DN4i
-----END PGP SIGNATURE-----



From aleaxit at yahoo.com  Mon Apr 19 04:09:42 2004
From: aleaxit at yahoo.com (Alex Martelli)
Date: Mon, 19 Apr 2004 10:09:42 +0200
Subject: [Twisted-Python] more kudos of mine for Twisted,
	quote/point to at will
Message-ID: <c601g7$af2$1@sea.gmane.org>

"Open Enterprise Trends" has published the second part of an interview with
me (about Python's role in the enterprise) -- you can find it at URL:

  http://www.oetrends.com/news.php?action=view_record&idnum=321

Towards the end of the interview I got a chance to heap some praise upon
Twisted and to urge "enterprise developers" to consider it.  Since OEtrends
enjoys some prestige in certain IT circles, being able to quote from it
might help you making the case, to a manager or client, that Twisted should
be used for a certain project.  If so, please feel free to quote (e.g. such
snippets as "For any Python network server or client application, a
developer would be well advised to consider the free Twisted Matrix
package") and/or link to this URL (unfortunately there are no anchors to
ease referring to the specific spot, and the whole HTML page is otherwise
unsatisfactory -- e.g., the "keywords" include several technologies I do
not even mention nor allude to, such as jboss, netbeans abd jabber, but do
NOT include twisted -- how silly).


Alex





From pje at telecommunity.com  Mon Apr 19 09:36:01 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Mon, 19 Apr 2004 09:36:01 -0400
Subject: [Twisted-Python] All use cases of getComponent
In-Reply-To: <1082344880.24620.491.camel@sheriffpony>
References: <5.1.1.6.0.20040418224744.021a5ec0@mail.telecommunity.com>
	<5.1.1.6.0.20040418224744.021a5ec0@mail.telecommunity.com>
Message-ID: <5.1.1.6.0.20040419093119.02165a40@mail.telecommunity.com>

At 11:21 PM 4/18/04 -0400, Itamar Shtull-Trauring wrote:
>On Sun, 2004-04-18 at 22:50, Phillip J. Eby wrote:
>
> > Perhaps you mean __conform__, as defined by PEP 246?
>
>Yep, my bad.

Okay, well __conform__ is for an object to implement adaptation.  That is, 
if object 'x' has a __conform__ attribute, then 'IFoo(x)' will first call 
'x.__conform__(IFoo)', and if a non-None object is returned, that's what 
will be used as the result of 'IFoo(x)'.

Is that anything at all like what getComponent() does?




From sam at SpinwardStars.com  Mon Apr 19 11:07:55 2004
From: sam at SpinwardStars.com (Samuel Reynolds)
Date: Mon, 19 Apr 2004 09:07:55 -0600
Subject: [Twisted-Python] Twisted split: tap plugins
In-Reply-To: <408299F9.10604@twistedmatrix.com>
References: <40819F2B.2060709@twistedmatrix.com>
	<1082237310.24620.472.camel@sheriffpony>
	<1082237595.24622.474.camel@sheriffpony>
	<408290D3.5050300@twistedmatrix.com>
	<408299F9.10604@twistedmatrix.com>
Message-ID: <6.0.1.1.0.20040419090513.0417cdf0@pop.mindspring.com>

At 2004-04-18 11:08 AM -0400, you wrote:
>Christopher Armstrong wrote:
>
>>I just came up with another idea; I suppose it would be a mixture of #1 
>>and #3. We can release Twisted 1.3 and require that people using new 
>>split-offs use it. In Twisted 1.3, we delete twisted/news/* and so on, 
>>but we leave an __init__.py that sets things up for us so that it mirrors 
>>the new split-off package, if available (after printing a deprecation 
>>warning). After a few releases, we delete twisted/news entirely.
>
>Itamar just told me he likes this idea on IRC. I'll implement it unless 
>someone comes up with a problem with it....

FWIW, wxPython is moving from wxSomeName to wx.SomeName
(i.e., namespacing), and is using approximately this approach.
It works very well. (And in that case, the __init__.py in the
old location os munging names, as well.)

In effect, the old location becomes a reference to the new
location, with deprecation warnings added.

- Sam

__________________________________________________________
Spinward Stars, LLC                        Samuel Reynolds
Software Consulting and Development           303-805-1446
http://SpinwardStars.com/            sam at SpinwardStars.com 





From radix at twistedmatrix.com  Mon Apr 19 12:35:46 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 19 Apr 2004 12:35:46 -0400
Subject: [Twisted-Python] more kudos of mine for Twisted,	quote/point
	to at will
In-Reply-To: <c601g7$af2$1@sea.gmane.org>
References: <c601g7$af2$1@sea.gmane.org>
Message-ID: <4083FFE2.9030001@twistedmatrix.com>

Alex Martelli wrote:
> "Open Enterprise Trends" has published the second part of an interview with
> me (about Python's role in the enterprise) -- you can find it at URL:

Alex, this is great. Thanks a lot for the advocacy. :-)

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040419/54f0b565/attachment.pgp 

From itamar at itamarst.org  Mon Apr 19 13:48:27 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 19 Apr 2004 13:48:27 -0400
Subject: [Twisted-Python] Progress report on splitting packages
Message-ID: <1082396907.26194.499.camel@sheriffpony>

Since Chris didn't send one in. Hope this is accurate.

News was split off, backwards compat code is in, site is up:
http://projects.twistedmatrix.com/lowdown/

Remaining tasks:
1. Release automation and making a lowdown release.
2. Buildbot support.
3. Linking to projects from main site, and updating main site to explain
all this.

Many thanks to Chris and JP for all their work on this.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Mon Apr 19 14:03:51 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 19 Apr 2004 14:03:51 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082396907.26194.499.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
Message-ID: <1082397831.24621.501.camel@sheriffpony>

On Mon, 2004-04-19 at 13:48, Itamar Shtull-Trauring wrote:

> Remaining tasks:

Forgot to add, packaging. Windows, Debian, Gentoo, FreeBSD and so on all
need infrastructure for having separate packages.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From michal at pasternak.w.lub.pl  Mon Apr 19 14:39:56 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Mon, 19 Apr 2004 20:39:56 +0200
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082397831.24621.501.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<1082397831.24621.501.camel@sheriffpony>
Message-ID: <20040419183956.GA5030@pasternak.w.lub.pl>

Itamar Shtull-Trauring [Mon, Apr 19, 2004 at 02:03:51PM -0400]:
> On Mon, 2004-04-19 at 13:48, Itamar Shtull-Trauring wrote:
> 
> > Remaining tasks:
> 
> Forgot to add, packaging. Windows, Debian, Gentoo, FreeBSD and so on all
> need infrastructure for having separate packages.

I can create & test packages for FreeBSD Ports & NetBSD Packages Collection,
just send me what to do. I can also provide binary packages for FreeBSD
5.2.1 at the moment.



From glyph at divmod.com  Mon Apr 19 14:47:33 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 19 Apr 2004 14:47:33 -0400
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <20040418002534.GA7803@frobozz>
References: <1082240569.22948.37.camel@willie-the-pimp>
	<20040418002534.GA7803@frobozz>
Message-ID: <04C780C3-9232-11D8-B6DF-000393C9700E@divmod.com>


On Apr 17, 2004, at 8:25 PM, Andrew Bennetts wrote:

> Ok, how about a compromise: if a creator a Deferred is able to cope 
> with
> timeouts, they should pass an "allowTimeouts=True" flag to the 
> constructor.
> Without it, the setTimeout method will raise an AssertionError.

Gross.

This is really my problem with setTimeout, really.  Right now it 
changes the semantics of .callback() and .errback() subtly - adding an 
'allowTimeouts' flag effectively changes the object's contract at 
run-time.  I know that callback and errback do this already, but it's 
implied that there is a single source of responsibility for calling 
those methods.

What we've really got here is two separate interfaces: IDeferred and 
ITimeoutableDeferred.  I think that it might be appropriate to 
implement one as a subclass, which does the twisted.internet-related 
stuff.

Perhaps we're putting the responsibility in the wrong place entirely.  
Deferreds which can be timed out are often tracked with some kind of ID 
in a map of Deferreds.  Maybe we should have a DeferredOperationManager 
class which abstracts that functionality, removing the deferred from 
the map when its callback/errback is called whether it's called by a 
timeout or not...?  Constructing a TimeoutableDeferred would then 
*require* a callback that, in the common case where a 
DeferredOperationManager is used, would remove the Deferred from the 
mapping.  Regular Deferreds would then have no setTimeout, and Bob 
could use them without importing all of Twisted.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040419/b1a5ec64/attachment.pgp 

From jfdill at jfdill.com  Mon Apr 19 15:33:12 2004
From: jfdill at jfdill.com (Jonathan Dill)
Date: Mon, 19 Apr 2004 15:33:12 -0400
Subject: [Twisted-Python] PyPAM really needed by Twisted?
Message-ID: <1082403192.14538.3.camel@meteora.umbi.umd.edu>

I'm following the INSTALL instructions for Twisted-1.2.0 and it claims
that it depends on PyPAM.  PyPAM appears not to have been developed
since 1999 for Python 1.52.  Are these install directions really up to
date?  Or should I try the Twisted 1.2.1alpha1 or Twisted out of CVS
instead?

Thanks,
-- 
Jonathan Dill <jfdill at jfdill.com>




From radix at twistedmatrix.com  Mon Apr 19 15:38:46 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 19 Apr 2004 15:38:46 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040419183956.GA5030@pasternak.w.lub.pl>
References: <1082396907.26194.499.camel@sheriffpony>	<1082397831.24621.501.camel@sheriffpony>
	<20040419183956.GA5030@pasternak.w.lub.pl>
Message-ID: <40842AC6.5070100@twistedmatrix.com>

Michal Pasternak wrote:
> I can create & test packages for FreeBSD Ports & NetBSD Packages Collection,
> just send me what to do. I can also provide binary packages for FreeBSD
> 5.2.1 at the moment.

Is there anything automatable about this? I'd like to automate as much 
as possible in the release-twisted script 
(Twisted/sandbox/radix/release-twisted). Soon I'll be splitting that out 
into something like twisted.python.release with only the 
project-specific stuff in the "script". It'd be cool if you could 
implement a step for doing freebsd builds (or stuff facilitating a 
freebsd build, anyway).

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040419/33c3d7ed/attachment.pgp 

From radix at twistedmatrix.com  Mon Apr 19 15:40:13 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 19 Apr 2004 15:40:13 -0400
Subject: [Twisted-Python] PyPAM really needed by Twisted?
In-Reply-To: <1082403192.14538.3.camel@meteora.umbi.umd.edu>
References: <1082403192.14538.3.camel@meteora.umbi.umd.edu>
Message-ID: <40842B1D.8050702@twistedmatrix.com>

Jonathan Dill wrote:
> I'm following the INSTALL instructions for Twisted-1.2.0 and it claims
> that it depends on PyPAM.  PyPAM appears not to have been developed
> since 1999 for Python 1.52.  Are these install directions really up to
> date?  Or should I try the Twisted 1.2.1alpha1 or Twisted out of CVS
> instead?
> 
> Thanks,

Notice that PyPAM only appears under the "SSH" section. You only need it 
if you want to use Twisted's SSH support (twisted.conch).

Soon this will be split out into a separate package, btw.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040419/cd64dbdf/attachment.pgp 

From michal at pasternak.w.lub.pl  Mon Apr 19 16:38:32 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Mon, 19 Apr 2004 22:38:32 +0200
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <40842AC6.5070100@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<1082397831.24621.501.camel@sheriffpony>
	<20040419183956.GA5030@pasternak.w.lub.pl>
	<40842AC6.5070100@twistedmatrix.com>
Message-ID: <20040419203831.GA14319@pasternak.w.lub.pl>

Christopher Armstrong [Mon, Apr 19, 2004 at 03:38:46PM -0400]:
> Michal Pasternak wrote:
> >I can create & test packages for FreeBSD Ports & NetBSD Packages 
> >Collection,
> >just send me what to do. I can also provide binary packages for FreeBSD
> >5.2.1 at the moment.
> 
> Is there anything automatable about this? I'd like to automate as much 
> as possible in the release-twisted script
> (Twisted/sandbox/radix/release-twisted).

I think I could add there automatic generation of a Makefiles for a given
project (for those, who don't know anything about fbsd ports/netbsd pkgsrc,
here's an example - ftp://ftp.netbsd.org/pub/NetBSD/packages/pkgsrc/net/py-twisted/ )
It could be really clean at the *BSD side - all Twisted projects share some
settings in Makefile.common, each project has a separate directory and
Makefile with its 'personalized' settings.

I could also add to your release script generation of diffs against current
official fbsd/nbsd package sources (from fbsd/nbsd cvs repo); then the
package could be built (on a test machine), and if the package builds okay,
the release script could submit a problem report with the diffs needed to
update the package source to GNATS database (see 
http://netbsd.org/Misc/send-pr.html), so *BSD developers could pick
that PR and update the official sources.

Automated building of binary package in case of FreeBSD / NetBSD is, IMO,
not worth it (at Twisted project side). Why? When the package source is in
official CVS repo, both NetBSD and FreeBSD teams take care of building the
binary package for you (so you don't have to build Twisted for NetBSD/atari,
for example). Also (IMO) BSD users tend rather not to use binary package
available from an opensource project's site, they will get the one from
official BSD FTP or compile by their own, using Ports or pkgsrc.

I hope, that this is the kind of automation you meant. In case it is not -
more clues please. 

To start the work I need URL to the tarballs with source releases of "core"
twisted and at least one twisted product.

-- 
m



From corydodt at twistedmatrix.com  Mon Apr 19 19:59:19 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Mon, 19 Apr 2004 16:59:19 -0700
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082397831.24621.501.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<1082397831.24621.501.camel@sheriffpony>
Message-ID: <408467D7.6020609@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

For Windows, as long as there's a setup.py this is probably a candidate for
just running a buildslave that does bdist_wininst and sticks the result on a
fileserver.  That's predicated on having a buildslave, of course.

The somewhat sophisticated installer around Twisted "proper" is mainly to
provide documentation and icons and uninstall and other approachability
enhancements.

Many (most?) of these subprojects don't have a wide enough scope to need such
niceties.  However, even if they did, I couldn't provide packaging for all of
them :-(


C



Itamar Shtull-Trauring wrote:

| On Mon, 2004-04-19 at 13:48, Itamar Shtull-Trauring wrote:
|
|
|>Remaining tasks:
|
|
| Forgot to add, packaging. Windows, Debian, Gentoo, FreeBSD and so on all
| need infrastructure for having separate packages.
|

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3-nr1 (Windows 2000)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFAhGfX3A5SrXAiHQcRAkKEAJ9OqnjQmilbD1beqWg/X/hPvpgMbQCfTqzB
vFW0xQXejrEUJKNIkbZPYKY=
=OUzb
-----END PGP SIGNATURE-----



From andrew-twisted at puzzling.org  Mon Apr 19 20:47:35 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 20 Apr 2004 10:47:35 +1000
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <04C780C3-9232-11D8-B6DF-000393C9700E@divmod.com>
References: <1082240569.22948.37.camel@willie-the-pimp>
	<20040418002534.GA7803@frobozz>
	<04C780C3-9232-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <20040420004735.GA27709@frobozz>

On Mon, Apr 19, 2004 at 02:47:33PM -0400, Glyph Lefkowitz wrote:
> 
> On Apr 17, 2004, at 8:25 PM, Andrew Bennetts wrote:
> 
> >Ok, how about a compromise: if a creator a Deferred is able to cope 
> >with
> >timeouts, they should pass an "allowTimeouts=True" flag to the 
> >constructor.
> >Without it, the setTimeout method will raise an AssertionError.
> 
> Gross.
> 
> This is really my problem with setTimeout, really.  Right now it 

Luckily for you, I've already changed my mind on this, in favour of building
timeouts on top of some sort of cancellation support (see my reply to Bob).
:)

> changes the semantics of .callback() and .errback() subtly - adding an 
> 'allowTimeouts' flag effectively changes the object's contract at 
> run-time.  I know that callback and errback do this already, but it's 
> implied that there is a single source of responsibility for calling 
> those methods.
> 
> What we've really got here is two separate interfaces: IDeferred and 
> ITimeoutableDeferred.  I think that it might be appropriate to 
> implement one as a subclass, which does the twisted.internet-related 
> stuff.

Well, that's one way to look at it, I suppose.  Certainly, deferreds that
can support cancellation should be declared that way when they are created,
whether by a flag to the constructor or by using a subclass.  DeferredList
changes its behaviour pretty significantly based on constructor flags, and I
think we made the right decision there.  Cancellations aren't all that
similar to "fireOnOneErrback", though.  I don't have a strong preference on
flags vs.  subclasses here, except that I would tend to lean towards
whichever one has the simpler implementation.

> Perhaps we're putting the responsibility in the wrong place entirely.  
> Deferreds which can be timed out are often tracked with some kind of ID 
> in a map of Deferreds.  Maybe we should have a DeferredOperationManager 
> class which abstracts that functionality, removing the deferred from 
> the map when its callback/errback is called whether it's called by a 
> timeout or not...?  Constructing a TimeoutableDeferred would then 
> *require* a callback that, in the common case where a 
> DeferredOperationManager is used, would remove the Deferred from the 
> mapping.  Regular Deferreds would then have no setTimeout, and Bob 
> could use them without importing all of Twisted.

This idea sounds equally applicable to cancellable deferreds as to just
timeoutable deferreds.  I'd be happy to see any that eases the
implementation of creating Deferreds that can be cancelled -- I think that
that is really the hardest part of the whole problem (aside from desigining
an API everyone likes ;)

-Andrew.




From andrew-twisted at puzzling.org  Mon Apr 19 21:13:27 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 20 Apr 2004 11:13:27 +1000
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082396907.26194.499.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
Message-ID: <20040420011327.GB27709@frobozz>

On Mon, Apr 19, 2004 at 01:48:27PM -0400, Itamar Shtull-Trauring wrote:
> Since Chris didn't send one in. Hope this is accurate.
> 
> News was split off, backwards compat code is in, site is up:
> http://projects.twistedmatrix.com/lowdown/

I'm curious -- why did we choose to change the name from twisted.news?  And
even though the name is changing, why is the new package "lowdown" and not
"twisted.lowdown"?

I'm also interested to see that NNTP protocol support has also migrated to
lowdown -- I was expecting that protocol implementations were going to stay
in Twisted (or perhaps a twisted.protocols project, if that gets split off),
and just the apps (i.e. direct subpackages of twisted, e.g. news, mail, web,
names, conch, ...) would be seperated.

So, I assume that this is the policy that other splits should follow?  If
so, this needs to be documented.

I'd like to see the reasons for these decisions summarised in that document
too -- I can guess at them, but it would be nice to know, and will help
future splits of subprojects go smoothly and consistently.

-Andrew.




From radix at twistedmatrix.com  Mon Apr 19 21:58:30 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 19 Apr 2004 21:58:30 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420011327.GB27709@frobozz>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
Message-ID: <408483C6.1030308@twistedmatrix.com>

Andrew Bennetts wrote:
> On Mon, Apr 19, 2004 at 01:48:27PM -0400, Itamar Shtull-Trauring wrote:
> 
>>Since Chris didn't send one in. Hope this is accurate.
>>
>>News was split off, backwards compat code is in, site is up:
>>http://projects.twistedmatrix.com/lowdown/
> 
> 
> I'm curious -- why did we choose to change the name from twisted.news?  And
> even though the name is changing, why is the new package "lowdown" and not
> "twisted.lowdown"?

It was decided that doing package names like this would be too 
problematic. Unfortunately, Python isn't as cool as Java. The name was 
changed to lowdown because "news" is a bad top-level package name and 
"twistednews" and "tnews" and various permutations so forth were also 
lame. Also, "Low Down" is cool. Get it? The LOW DOWN??? The NEWS??? Ha Ha!

> I'm also interested to see that NNTP protocol support has also migrated to
> lowdown -- I was expecting that protocol implementations were going to stay
> in Twisted (or perhaps a twisted.protocols project, if that gets split off),
> and just the apps (i.e. direct subpackages of twisted, e.g. news, mail, web,
> names, conch, ...) would be seperated.

Nah. These split-offs are going to contain protocols and minimal 
framework for implementing apps, along with maybe a very simple 
implementation of an actual app.

> So, I assume that this is the policy that other splits should follow?  If
> so, this needs to be documented.

Let it be known that the split-offs will contain relevant protocols.

> I'd like to see the reasons for these decisions summarised in that document
> too -- I can guess at them, but it would be nice to know, and will help
> future splits of subprojects go smoothly and consistently.

I'm not interested in creating a "Split Document", because that's an 
inherently temporal thing. With the help of exarkun, there does exist a 
small file documenting the process that I must go through to do a split 
for a particular project, but it is not of general interest (no 
rationale, etc).

It would probably be a good idea to outline what exactly WILL be split 
out, and what will be contained in the splits, now, though. I am not 
authoritative on this, but I can tell you what I plan on working on soon 
(In the order that I've thought of them):

<twisted-package> -> <canonical project name>
   <details>

twisted.news -> "Lowdown"
   done. contains nntp.

twisted.flow -> "Flow" (?)
   This one's easy, no protocols or anything.

twisted.conch -> "Conch"
   This will be named "Conch", and contain conch as well as the
   SSH protocol implemantations.

twisted.lore -> "Lore" (?)
   Easy.

twisted.words, twisted.im -> "Twisted Words" (?)
   This'll be a single package. The packagename will probably be 'words'.
   I'm not *sure*, but I expect IRC and the other IM/chat protocols will
   go into this package.

twisted.mail -> ???
   SMTP, POP3, IMAP, *some* of the stuff from current twisted.mail
   package.

twisted.names -> "Twisted Names" (?)
   + DNS proto

twisted.xish -> No idea.
   No idea. I imagine this will just be made a part of the Jabber
   package, whatever that is.

twisted.runner -> ???
   Yeah, might as well get rid of this one too.

twisted.pair -> ???
   I don't know anything about this package.

twisted.trial -> ???
   This one is going to have to require some thought, since *all* the
   other packages depend on it, but I think that people do want to split
   it out.

twisted.web -> ???
   HTTP protocol implementation, and twisted.web. It is still undecided
   whether Nevow will be included in this package. Discuss it on the
   twisted-web mailing list.

twisted.protocols.ftp + slyphon's sandbox -> ???
   Need to split this out too.

Others...

There has been talk of leaving Spread in Twisted core. That seems like a 
fine idea to me, but I'm not the one to debate that with. Also 
enterprise, manhole. Dunno if we'll split those out. Cred, internet, 
application, python, persisted are definitely staying. We will still 
have a 'protocols' package left with a few protocols that don't have any 
framework for them implemented.

HTH!

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040419/f3e202c9/attachment.pgp 

From mary-twisted at puzzling.org  Mon Apr 19 22:09:14 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 20 Apr 2004 12:09:14 +1000
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408483C6.1030308@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
Message-ID: <20040420020914.GA12285@titus.home.puzzling.org>

On Mon, Apr 19, 2004, Christopher Armstrong wrote:
> Andrew Bennetts wrote:
> >I'd like to see the reasons for these decisions summarised in that
> >document too -- I can guess at them, but it would be nice to know,
> >and will help future splits of subprojects go smoothly and
> >consistently.
> 
> I'm not interested in creating a "Split Document", because that's an
> inherently temporal thing. With the help of exarkun, there does exist
> a small file documenting the process that I must go through to do a
> split for a particular project, but it is not of general interest (no
> rationale, etc).

What about a document for people who in future, want to add new twisted
subprojects, from scratch? Some of the same policy will be relevant to
them, and that wouldn't be a transitory document.

-Mary



From andrew-twisted at puzzling.org  Mon Apr 19 22:17:55 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 20 Apr 2004 12:17:55 +1000
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408483C6.1030308@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
Message-ID: <20040420021755.GA29296@frobozz>

On Mon, Apr 19, 2004 at 09:58:30PM -0400, Christopher Armstrong wrote:
> Andrew Bennetts wrote:
> >On Mon, Apr 19, 2004 at 01:48:27PM -0400, Itamar Shtull-Trauring wrote:
> >
> >>Since Chris didn't send one in. Hope this is accurate.
> >>
> >>News was split off, backwards compat code is in, site is up:
> >>http://projects.twistedmatrix.com/lowdown/
> >
> >
> >I'm curious -- why did we choose to change the name from twisted.news?  And
> >even though the name is changing, why is the new package "lowdown" and not
> >"twisted.lowdown"?
> 
> It was decided that doing package names like this would be too 
> problematic. Unfortunately, Python isn't as cool as Java. The name was 
> changed to lowdown because "news" is a bad top-level package name and 
> "twistednews" and "tnews" and various permutations so forth were also 
> lame. Also, "Low Down" is cool. Get it? The LOW DOWN??? The NEWS??? Ha Ha!

I get the name, I just wanted to know why exactly it was chosen over other
names :)

What are the problems you allude to with keeping "twisted.news"?  I was
under the impression that Zope 3 is planning to go this route.

> >I'm also interested to see that NNTP protocol support has also migrated
> >to lowdown -- I was expecting that protocol implementations were going to
> >stay in Twisted (or perhaps a twisted.protocols project, if that gets
> >split off), and just the apps (i.e. direct subpackages of twisted, e.g.
> >news, mail, web, names, conch, ...) would be seperated.
> 
> Nah. These split-offs are going to contain protocols and minimal 
> framework for implementing apps, along with maybe a very simple 
> implementation of an actual app.
> 
> >So, I assume that this is the policy that other splits should follow?  If
> >so, this needs to be documented.
> 
> Let it be known that the split-offs will contain relevant protocols.

Ok :)

> >I'd like to see the reasons for these decisions summarised in that document
> >too -- I can guess at them, but it would be nice to know, and will help
> >future splits of subprojects go smoothly and consistently.
> 
> I'm not interested in creating a "Split Document", because that's an 
> inherently temporal thing. With the help of exarkun, there does exist a 
> small file documenting the process that I must go through to do a split 
> for a particular project, but it is not of general interest (no 
> rationale, etc).

Well, when I say "document", a post to the mailing list would do just fine.
Just somewhere public that can be referred to later, if necessary.

-Andrew.





From radix at twistedmatrix.com  Mon Apr 19 22:19:28 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 19 Apr 2004 22:19:28 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420020914.GA12285@titus.home.puzzling.org>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>	<408483C6.1030308@twistedmatrix.com>
	<20040420020914.GA12285@titus.home.puzzling.org>
Message-ID: <408488B0.5050407@twistedmatrix.com>

Mary Gardiner wrote:
> On Mon, Apr 19, 2004, Christopher Armstrong wrote:
> 
>>Andrew Bennetts wrote:
>>
>>>I'd like to see the reasons for these decisions summarised in that
>>>document too -- I can guess at them, but it would be nice to know,
>>>and will help future splits of subprojects go smoothly and
>>>consistently.
>>
>>I'm not interested in creating a "Split Document", because that's an
>>inherently temporal thing. With the help of exarkun, there does exist
>>a small file documenting the process that I must go through to do a
>>split for a particular project, but it is not of general interest (no
>>rationale, etc).
> 
> 
> What about a document for people who in future, want to add new twisted
> subprojects, from scratch? Some of the same policy will be relevant to
> them, and that wouldn't be a transitory document.

It seems quite unnecessary, and I'm not convinced enough of its utility 
to actually put effort into it. There's not much special about a 
"Twisted Subproject"; AFAIC they're just projects that are developed by 
"Twisted Matrix Laboratories", which is rather nebulous.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040419/9b86bedb/attachment.pgp 

From radix at twistedmatrix.com  Mon Apr 19 22:40:39 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 19 Apr 2004 22:40:39 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408488B0.5050407@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>	<408483C6.1030308@twistedmatrix.com>	<20040420020914.GA12285@titus.home.puzzling.org>
	<408488B0.5050407@twistedmatrix.com>
Message-ID: <40848DA7.4000206@twistedmatrix.com>

Christopher Armstrong wrote:
> It seems quite unnecessary, and I'm not convinced enough of its utility 
> to actually put effort into it. There's not much special about a 
> "Twisted Subproject"; AFAIC they're just projects that are developed by 
> "Twisted Matrix Laboratories", which is rather nebulous.

Let me retract this adjective from my response. Twisted Matrix 
Laboratories is far from nebulous -- we're a tight-knit group of 
hackers, just as the web site says. However, TML must no longer be 
defined as "those who hack on Twisted", since Twisted is no longer the 
only project run by Twisted Matrix Laboratories (well, there were 
Twisted Java and Twisted Emacs and some others before, but those were 
never very popular). Now, TML must be defined as "those who hack on TML 
projects". >:-)

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040419/bd80ed77/attachment.pgp 

From justinjohnson at fastmail.fm  Mon Apr 19 22:41:37 2004
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Mon, 19 Apr 2004 21:41:37 -0500
Subject: [Twisted-Python] Free Microsoft VC++ Compiler
Message-ID: <1082428897.15221.184741043@webmail.messagingengine.com>

Did anyone see this?

http://msdn.microsoft.com/visualc/vctoolkit2003/

Not sure if this is anything we'd want to use, but thought I'd through it
out here.



From cce at clarkevans.com  Mon Apr 19 22:47:57 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 19 Apr 2004 22:47:57 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408483C6.1030308@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
Message-ID: <20040420024757.GA37301@prometheusresearch.com>

I've got a quick question, how will twisted projects manage
dependencies?  If this isn't handled nicely, it could really reduce the
value of twisted (nothing more frustrating than downloading N packages,
each one after an error of the package not being found).

On Mon, Apr 19, 2004 at 09:58:30PM -0400, Christopher Armstrong wrote:
| >>News was split off, backwards compat code is in, site is up:
| >>http://projects.twistedmatrix.com/lowdown/
| >
| >
| >I'm curious -- why did we choose to change the name from twisted.news?  
| >And
| >even though the name is changing, why is the new package "lowdown" and 
| >not
| >"twisted.lowdown"?
| 
| It was decided that doing package names like this would be too 
| problematic. Unfortunately, Python isn't as cool as Java. The name was 
| changed to lowdown because "news" is a bad top-level package name and 
| "twistednews" and "tnews" and various permutations so forth were also 
| lame. Also, "Low Down" is cool. Get it? The LOW DOWN??? The NEWS??? Ha 

This makes very little sense to me.  In my humble opinion, it should
stay 'twisted.news'.  Calling it 'lowdown' beacuse a top level package
of 'news' is taken is really counterproductive, finding good names is
hard enough.   I do see the value in breaking twisted into modules, so
that a subset of twisted could be used.   However, I don't see why these
items can be named 'twisted.XXXX', perhaps the 'core' distribution
should just have place-holder '__init__.py' file...

/twisted/news/__init__.py

  raise NotImplementedError("""\
      Download this package from 
      http://projects.twistedmatrix.com/news/
  """)


Best,

Clark



From radix at twistedmatrix.com  Mon Apr 19 23:04:32 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 19 Apr 2004 23:04:32 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420024757.GA37301@prometheusresearch.com>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>	<408483C6.1030308@twistedmatrix.com>
	<20040420024757.GA37301@prometheusresearch.com>
Message-ID: <40849340.8020702@twistedmatrix.com>

Clark C. Evans wrote:
> I've got a quick question, how will twisted projects manage
> dependencies?  If this isn't handled nicely, it could really reduce the
> value of twisted (nothing more frustrating than downloading N packages,
> each one after an error of the package not being found).

I encourage you to contribute packages for your favorite OS. Windows and 
Debian will be covered.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040419/5f7f4ab6/attachment.pgp 

From thomas.mangin at exa-networks.co.uk  Tue Apr 20 04:17:22 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Tue, 20 Apr 2004 09:17:22 +0100
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420024757.GA37301@prometheusresearch.com>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>	<408483C6.1030308@twistedmatrix.com>
	<20040420024757.GA37301@prometheusresearch.com>
Message-ID: <4084DC92.50509@exa-networks.co.uk>

Clark C. Evans wrote:

>This makes very little sense to me.  In my humble opinion, it should
>stay 'twisted.news'.  Calling it 'lowdown' beacuse a top level package
>of 'news' is taken is really counterproductive, finding good names is
>hard enough.   I do see the value in breaking twisted into modules, so
>that a subset of twisted could be used.   However, I don't see why these
>items can be named 'twisted.XXXX', perhaps the 'core' distribution
>should just have place-holder '__init__.py' file...
>
>/twisted/news/__init__.py
>
>  raise NotImplementedError("""\
>      Download this package from 
>      http://projects.twistedmatrix.com/news/
>  """)
>  
>
I am a boring fart and I always though that names should be as explicit 
as possible.

Am I right to think that all the code will be related to 
applications/application frameworks  using twisted ?
In that case something like twistedapp (please do not take that name as 
the ultimate recommendation) would make more sense.

As well I would saws that the organization should be like
twistedapp.news.lowdown
twistedapp.web.nevow
twistedapp.ssh.counch
[...]

I have no idea of what are flow, lore, and some other modules and it 
seems that some of you do not know neither what is xish neither !
Should it be called twistedapp.jabber.xish ???

So the protocol is obvious from the module name and it is easy to add 
more application of the same protocol without any name clash.
At that point it is clear that nevow is a web application, even if the 
name itself does not give the information away.

Thomas



From r.taylor at eris.qinetiq.com  Tue Apr 20 04:50:38 2004
From: r.taylor at eris.qinetiq.com (Richard Taylor)
Date: Tue, 20 Apr 2004 08:50:38 +0000
Subject: [Twisted-Python] UDP Support sanity check
Message-ID: <200404200950.46062.r.taylor@eris.qinetiq.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Hi

I am trying to implement support for the UDP functionality I need. I think 
that I need to implement the following classes:

For server support:

UDPPort(udp.Port) - adding support for broadcast
ConnectedUDPPort(UDPPort) - connected variant

For client (connection) support:

UDPConnectionBase(FileDescriptor) - creation of non-bound UDP sockets
UDPConnection(UDPConnectionBase) - addition of write method to implement 
IUDPTransport
UDPConnectedConnection(UDPConnectionBase) - support for 'connected' UDP socket 
and write method without host,port arguments.

UDPConnector(base.Connector) - connector class that can create use the 
UDPConnection objects.
UDPConnectedConnector(UDPConnector) - one that works with 
UDPConnectedConnection objects.

Extend the IReactorUDP interface and reactor implementation to support 
connectXXX methods for the new connector types.

I am trying to support the creation of UDP connectors that are meant for 
sending datagrams and will never be bound to a local port and listened on. 
The current support for UDP does not implement and UDP connector type objects 
only UDP Port type objects. This means that a bind is always performed even 
when the connection is only meant for sending. 

I have most of the implementation written (at least in outline). 

One question. It appears to me that for UDP connection objects that concept of 
a protocol does not make much sense. The IUDPTransport interface does have a 
read method (as you would expect) so the protocol would never be called. This 
also calls in to question the need for a 'protocol factory' for such 
connections. Am I correct in this or am I missing something?

Richard



- -- 
QinetiQ                                  
B009 Woodward Building
St. Andrews Road
Malvern
Worcs WR14 3PS
Jabber: RichardTaylor at jabber.org
PGPKey: http://search.keyserver.net:11371/pks/lookup?op=get&search=0xA7DA9FD9
Key fingerprint = D051 A121 E7C3 485F 3C0E  1593 ED9E D868 A7DA 9FD9
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQFAhORk7Z7YaKfan9kRAiuzAJ9TlVM1puA5TIDNSfKTvH/xIJHxzwCeMrRE
mzGko+L421THScL3FgbqKPU=
=xiC0
-----END PGP SIGNATURE-----



From itamar at itamarst.org  Tue Apr 20 08:20:22 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 08:20:22 -0400
Subject: [Twisted-Python] Free Microsoft VC++ Compiler
In-Reply-To: <1082428897.15221.184741043@webmail.messagingengine.com>
References: <1082428897.15221.184741043@webmail.messagingengine.com>
Message-ID: <1082463621.22434.0.camel@sheriffpony>

I think Cory is trying to keep all our Windows code working on mingw,
and I agree with that. We should try to minimize our dependency on
proprietary software, even when building for proprietary platforms.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Tue Apr 20 08:23:07 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 08:23:07 -0400
Subject: [Twisted-Python] UDP Support sanity check
In-Reply-To: <200404200950.46062.r.taylor@eris.qinetiq.com>
References: <200404200950.46062.r.taylor@eris.qinetiq.com>
Message-ID: <1082463787.22436.3.camel@sheriffpony>

You need:

1. a Port which will probably also be a transport.
2. a Protocol.
3. a IUDPTrasport.

that's it. Notice the current UDP code has no factories or connectors.
Also note that connectUDP has been deprecated in SVN.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Tue Apr 20 08:36:07 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 08:36:07 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408483C6.1030308@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
Message-ID: <1082464567.22435.17.camel@sheriffpony>

On Mon, 2004-04-19 at 21:58, Christopher Armstrong wrote:

> It was decided that doing package names like this would be too 
> problematic. Unfortunately, Python isn't as cool as Java. The name was 
> changed to lowdown because "news" is a bad top-level package name and 
> "twistednews" and "tnews" and various permutations so forth were also 
> lame. Also, "Low Down" is cool. Get it? The LOW DOWN??? The NEWS??? Ha Ha!

One problem with leaving it as twisted.news in future releases as Andrew
suggests in a later email is that we lose our emphasis on the fact that
it's a separate release with separate versions. Assume following
scenario - we have lowdown 0.1 and lowdown 0.2, which are API
incompatible. We want to be very clear that lowdown 0.1 can still be
used on latest Twisted core, that you don't have to go in lockstep.

So, looking at code - is twisted.foo part of core twisted and thus
probably pretty stable or is it a separate package? What expectations
can I have of API stability?

Partially this is just Python conventions. Separate packages go in
separate namespaces. Possibly Java's system is better, but if it doesn't
really match our users' expectations then we're just going to confuse
them if we use it.

Then again, maybe we're just being stupid and we should stick to
Java-style "twisted.foo", so "twisted.news" with a "twisted.news.nntp".
Who else thinks that's a good idea?

> twisted.xish -> No idea.
>    No idea. I imagine this will just be made a part of the Jabber
>    package, whatever that is.

Yeah. Jabber will probably be in the Words pacakge, so xish will end up
there (unless people tell us it is generally applicable).

> twisted.trial -> ???
>    This one is going to have to require some thought, since *all* the
>    other packages depend on it, but I think that people do want to split
>    it out.

When Glyph and I did the original break out document (Glyph, could you
forward it to the list?) we decided this ought to stay in core, because
everything depends on it, including core :) Also it requires the
reactor, internally. It's not worth breaking out. 

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From thomas.mangin at exa-networks.co.uk  Tue Apr 20 09:34:18 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Tue, 20 Apr 2004 14:34:18 +0100
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082464567.22435.17.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
Message-ID: <408526DA.6080005@exa-networks.co.uk>

Itamar Shtull-Trauring wrote:

>One problem with leaving it as twisted.news in future releases as Andrew
>suggests in a later email is that we lose our emphasis on the fact that
>it's a separate release with separate versions. Assume following
>scenario - we have lowdown 0.1 and lowdown 0.2, which are API
>incompatible. We want to be very clear that lowdown 0.1 can still be
>used on latest Twisted core, that you don't have to go in lockstep.
>  
>
Agreed, but it is a short term thing as all new users will have never 
known the "old way".

>So, looking at code - is twisted.foo part of core twisted and thus
>probably pretty stable or is it a separate package? What expectations
>can I have of API stability?
>  
>
It is no worse than currently where you have to read the doc. As well, 
even stable interface can change.
Nothing is set in stone.

>Partially this is just Python conventions. Separate packages go in
>separate namespaces. Possibly Java's system is better, but if it doesn't
>really match our users' expectations then we're just going to confuse
>them if we use it.
>  
>
So you mean that os.path is not pythonic ?
os.path is one of the first include that every python user do !

>Then again, maybe we're just being stupid and we should stick to
>Java-style "twisted.foo", so "twisted.news" with a "twisted.news.nntp".
>Who else thinks that's a good idea?
>  
>
Big repeat ...

I will repeat that I think that
<basename>.<protocol>(.<implementation>)+
basename :: twisted, foobar, other
protocol :: nntp, ldap, mail, ...
implementation ::  lowdown, smtp, pop3, ..

twisted.mail.pop3.byme
twisted.mail.pop3.byyou
twisted.nntp.lowdown
twisted.nntp.cnn

poweredbytwisted.mail.pop3.byme
poweredbytwisted.mail.pop3.byyou
poweredbytwisted.nntp.lowdown
poweredbytwisted.nntp.cnn

would be valid names

You could even have a prefered implementation accessible as
from twisted.nntp import default as nntp
or the like

Thomas



From bob at redivi.com  Tue Apr 20 09:44:48 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 20 Apr 2004 09:44:48 -0400
Subject: [Twisted-Python] Free Microsoft VC++ Compiler
In-Reply-To: <1082463621.22434.0.camel@sheriffpony>
References: <1082428897.15221.184741043@webmail.messagingengine.com>
	<1082463621.22434.0.camel@sheriffpony>
Message-ID: <E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>

On Apr 20, 2004, at 8:20 AM, Itamar Shtull-Trauring wrote:

> I think Cory is trying to keep all our Windows code working on mingw,
> and I agree with that. We should try to minimize our dependency on
> proprietary software, even when building for proprietary platforms.

Well, from what I understand, mainline Python 2.4 is pretty much going 
to require MSVC++ 7.x to link an extension properly, so it might be 
sort of a lost cause.

-bob




From itamar at itamarst.org  Tue Apr 20 09:47:36 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 09:47:36 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408526DA.6080005@exa-networks.co.uk>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<408526DA.6080005@exa-networks.co.uk>
Message-ID: <1082468855.22435.19.camel@sheriffpony>

On Tue, 2004-04-20 at 09:34, Thomas Mangin wrote:

> twisted.mail.pop3.byme
> twisted.mail.pop3.byyou
> twisted.nntp.lowdown
> twisted.nntp.cnn

Not going to happen. twisted.news... maybe. twisted.news.lowdown or
whatever is not going to be how we do it.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Tue Apr 20 09:49:00 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 09:49:00 -0400
Subject: [Twisted-Python] Free Microsoft VC++ Compiler
In-Reply-To: <E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>
References: <1082428897.15221.184741043@webmail.messagingengine.com>
	<1082463621.22434.0.camel@sheriffpony>
	<E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>
Message-ID: <1082468940.22426.22.camel@sheriffpony>

On Tue, 2004-04-20 at 09:44, Bob Ippolito wrote:

> Well, from what I understand, mainline Python 2.4 is pretty much going 
> to require MSVC++ 7.x to link an extension properly, so it might be 
> sort of a lost cause.

mingw is compatible with VC6 (otherwise we couldn't use it), possibly it
can be made to be compatible with VC7? But if not, yeah, we'll use the
free one.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From cce at clarkevans.com  Tue Apr 20 10:19:33 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 20 Apr 2004 10:19:33 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082464567.22435.17.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
Message-ID: <20040420141933.GC84522@prometheusresearch.com>

Radix/Itamar,

It's clear that y'all have put a good deal of thought into this,
so please take my feedback as just meandering thoughts.

On Tue, Apr 20, 2004 at 08:36:07AM -0400, Itamar Shtull-Trauring wrote:
| One problem with leaving it as twisted.news in future releases as Andrew
| suggests in a later email is that we lose our emphasis on the fact that
| it's a separate release with separate versions. Assume following
| scenario - we have lowdown 0.1 and lowdown 0.2, which are API
| incompatible. We want to be very clear that lowdown 0.1 can still be
| used on latest Twisted core, that you don't have to go in lockstep.

I suppose that lockstep has caused release management problems?  How
is this going to solve the problem?  (ie, are you sure it is a
problem, and that the solution fixes it?)

| So, looking at code - is twisted.foo part of core twisted and thus
| probably pretty stable or is it a separate package? What expectations
| can I have of API stability?
|
| Partially this is just Python conventions. Separate packages go in
| separate namespaces. Possibly Java's system is better, but if it doesn't
| really match our users' expectations then we're just going to confuse
| them if we use it.

This seems primarly a documentation problem, that is, 
it is solved with a README document in the package.  Personally,
I've never had issues with modules being stable or not.  Perhaps
a package manager could use a list of packages that are stable?
ie, "python setup.py --with-experimental install"

In any case, I think this package management issue needs to be
addressed no matter what your naming convention is.

| > twisted.xish -> No idea.
| >    No idea. I imagine this will just be made a part of the Jabber
| >    package, whatever that is.
| 
| Yeah. Jabber will probably be in the Words pacakge, so xish will end up
| there (unless people tell us it is generally applicable).

So, it will be in jabber (which I don't need?) till at some
time it turns out that someone needs it, and then it will
move somewhere else.

Bings,

Clark



From itamar at itamarst.org  Tue Apr 20 10:35:07 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 10:35:07 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420141933.GC84522@prometheusresearch.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<20040420141933.GC84522@prometheusresearch.com>
Message-ID: <1082471707.22428.27.camel@sheriffpony>

On Tue, 2004-04-20 at 10:19, Clark C. Evans wrote:

> I suppose that lockstep has caused release management problems?  How
> is this going to solve the problem?  (ie, are you sure it is a
> problem, and that the solution fixes it?)

We want to allow people to use latest version of Twisted with old
versions of other packages. So if the package you use has a major API
rewrite, you can still use the old version with the latest and coolest
core Twisted.

Lets say we rewrite twisted.web in a non-backwards compatible way and
release it inside Twisted 1.4. If you need a bug fix to
twisted.internet. that's in 1.4 but want to use the old twisted.web,
you're screwed.

> In any case, I think this package management issue needs to be
> addressed no matter what your naming convention is.

Which issue?

> So, it will be in jabber (which I don't need?) till at some
> time it turns out that someone needs it, and then it will
> move somewhere else.

Well, "which I don't need" implies you want xish standalone, so maybe it
should be from the start...

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Tue Apr 20 10:35:49 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 10:35:49 -0400
Subject: [Twisted-Python] All use cases of getComponent
In-Reply-To: <5.1.1.6.0.20040419093119.02165a40@mail.telecommunity.com>
References: <5.1.1.6.0.20040418224744.021a5ec0@mail.telecommunity.com>
	<5.1.1.6.0.20040418224744.021a5ec0@mail.telecommunity.com>
	<5.1.1.6.0.20040419093119.02165a40@mail.telecommunity.com>
Message-ID: <1082471749.22435.29.camel@sheriffpony>

On Mon, 2004-04-19 at 09:36, Phillip J. Eby wrote:

> Okay, well __conform__ is for an object to implement adaptation.  That is, 
> if object 'x' has a __conform__ attribute, then 'IFoo(x)' will first call 
> 'x.__conform__(IFoo)', and if a non-None object is returned, that's what 
> will be used as the result of 'IFoo(x)'.
> 
> Is that anything at all like what getComponent() does?

The semantics are pretty similar, yes.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From foom at fuhm.net  Tue Apr 20 10:57:26 2004
From: foom at fuhm.net (James Y Knight)
Date: Tue, 20 Apr 2004 10:57:26 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420021755.GA29296@frobozz>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<20040420021755.GA29296@frobozz>
Message-ID: <09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>

On Apr 19, 2004, at 10:17 PM, Andrew Bennetts wrote:
> What are the problems you allude to with keeping "twisted.news"?  I was
> under the impression that Zope 3 is planning to go this route.

I'd like to hear more about this. I think it is valuable to Twisted's 
image to keep all the projects inside a top-level namespace. While 
these may be different projects/apps, they aren't completely separate: 
they're all built by the same group of people, for use with the Twisted 
framework. Also I hope the latest release of all twisted products will 
be available as one large tarball/windows installer for people who 
don't want to think about it.

Using twisted.* would be better if twisted.core was in twisted.core but 
even without that the name sounds fine to me.

So, can it not be done technically?

James




From itamar at itamarst.org  Tue Apr 20 11:29:26 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 11:29:26 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<20040420021755.GA29296@frobozz>
	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
Message-ID: <1082474965.25969.1.camel@sheriffpony>

On Tue, 2004-04-20 at 10:57, James Y Knight wrote:

> Using twisted.* would be better if twisted.core was in twisted.core but 
> even without that the name sounds fine to me.
> 
> So, can it not be done technically?

I think so, yes.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From cce at clarkevans.com  Tue Apr 20 11:47:31 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 20 Apr 2004 11:47:31 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082471707.22428.27.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<20040420141933.GC84522@prometheusresearch.com>
	<1082471707.22428.27.camel@sheriffpony>
Message-ID: <20040420154731.GA6666@prometheusresearch.com>

On Tue, Apr 20, 2004 at 10:35:07AM -0400, Itamar Shtull-Trauring wrote:
| We want to allow people to use latest version of Twisted with old
| versions of other packages. So if the package you use has a major API
| rewrite, you can still use the old version with the latest and coolest
| core Twisted.
| 
| Lets say we rewrite twisted.web in a non-backwards compatible way and
| release it inside Twisted 1.4. If you need a bug fix to
| twisted.internet. that's in 1.4 but want to use the old twisted.web,
| you're screwed.

Itamar, looks like you have a really good use case there -- in 
particular, I'd like to upgrade twisted "core" without updating 
twisted.web till it is more stable and I've had time to update
my code dependencies.  If the 'twisted' modules could stay
within twisted.* I would prefer this, but this, alas is up
to the core people... ;) Clark



From bob at redivi.com  Tue Apr 20 11:56:24 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 20 Apr 2004 11:56:24 -0400
Subject: [Twisted-Python] Free Microsoft VC++ Compiler
In-Reply-To: <1082468940.22426.22.camel@sheriffpony>
References: <1082428897.15221.184741043@webmail.messagingengine.com>
	<1082463621.22434.0.camel@sheriffpony>
	<E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>
	<1082468940.22426.22.camel@sheriffpony>
Message-ID: <468C4420-92E3-11D8-90CB-000A95686CD8@redivi.com>


On Apr 20, 2004, at 9:49 AM, Itamar Shtull-Trauring wrote:

> On Tue, 2004-04-20 at 09:44, Bob Ippolito wrote:
>
>> Well, from what I understand, mainline Python 2.4 is pretty much going
>> to require MSVC++ 7.x to link an extension properly, so it might be
>> sort of a lost cause.
>
> mingw is compatible with VC6 (otherwise we couldn't use it), possibly 
> it
> can be made to be compatible with VC7? But if not, yeah, we'll use the
> free one.

Well VC7 isn't compatible with VC6, from what I understand this is 
because it links to a significantly newer version of the MSVC runtime 
dll, so I would expect problems with mingw.

-bob




From itamar at itamarst.org  Tue Apr 20 11:53:29 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 11:53:29 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<20040420021755.GA29296@frobozz>
	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
Message-ID: <1082476408.25969.14.camel@sheriffpony>

Three suggestions so far:

1. Separate namespaces for each project.

  twisted.internet
  conch

2. Keep all projects and core under twisted.

  twisted.internet
  twisted.conch

3. Separate namespace for projects, e.g. 't' or 'tmlabs' (Zope3 was
considering using 'z', though it like it won't happen in the end -
http://mail.zope.org/pipermail/zope3-dev/2004-April/010469.html)

  twisted.internet
  t.conch or tmlabs.conch

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From fdrake at acm.org  Tue Apr 20 12:02:41 2004
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 20 Apr 2004 12:02:41 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082474965.25969.1.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
	<1082474965.25969.1.camel@sheriffpony>
Message-ID: <200404201202.41047.fdrake@acm.org>

On Tuesday 20 April 2004 11:29 am, Itamar Shtull-Trauring wrote:
 > On Tue, 2004-04-20 at 10:57, James Y Knight wrote:
 > > Using twisted.* would be better if twisted.core was in twisted.core but
 > > even without that the name sounds fine to me.
 > >
 > > So, can it not be done technically?
 >
 > I think so, yes.

I've been quiet here lately, but am interested in this discussion since I've 
been working on packaging issues for Zope 3.

One thing that's interesting to note is that distutils actually allows 
installing subpackages directly.  For example, it's possible to install 
twisted.news separately from other twisted.* packages (let's ignore 
dependencies for the moment).

The only interesting dependency for twisted.news is the top-level twisted 
package.  If that's a "pure container" package (it contains only a trivial 
__init__.py), then it only needs to be released and packaged once, and it 
won't create dependency issues.  Some twisted.core package would be a 
dependency for practical issues, but distutils will grow some support for 
versionable dependencies like that (there's preliminary, undocumented support 
in the Python 2.4 CVS).

My point is that there's no technical reason not to use the "twisted." prefix; 
there may be other reasons not to, but that would be something for the 
Twisted developers and maintainers to determine.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation




From pje at telecommunity.com  Tue Apr 20 12:20:00 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Tue, 20 Apr 2004 12:20:00 -0400
Subject: [Twisted-Python] Free Microsoft VC++ Compiler
In-Reply-To: <1082468940.22426.22.camel@sheriffpony>
References: <E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>
	<1082428897.15221.184741043@webmail.messagingengine.com>
	<1082463621.22434.0.camel@sheriffpony>
	<E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>
Message-ID: <5.1.1.6.0.20040420121636.02690270@telecommunity.com>

At 09:49 AM 4/20/04 -0400, Itamar Shtull-Trauring wrote:
>On Tue, 2004-04-20 at 09:44, Bob Ippolito wrote:
>
> > Well, from what I understand, mainline Python 2.4 is pretty much going
> > to require MSVC++ 7.x to link an extension properly, so it might be
> > sort of a lost cause.
>
>mingw is compatible with VC6 (otherwise we couldn't use it), possibly it
>can be made to be compatible with VC7?

Yes, it can.  See this thread:

http://mail.python.org/pipermail/python-dev/2004-January/041650.html






From itamar at itamarst.org  Tue Apr 20 12:54:25 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 12:54:25 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082476408.25969.14.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<20040420021755.GA29296@frobozz>
	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
	<1082476408.25969.14.camel@sheriffpony>
Message-ID: <1082480064.26202.0.camel@sheriffpony>

On Tue, 2004-04-20 at 11:53, Itamar Shtull-Trauring wrote:

> 3. Separate namespace for projects, e.g. 't' or 'tmlabs' (Zope3 was
> considering using 'z', though it like it won't happen in the end -
> http://mail.zope.org/pipermail/zope3-dev/2004-April/010469.html)
> 
>   twisted.internet
>   t.conch or tmlabs.conch

For the record, this is the one I want, using 'tmlabs' for non-core
projects. So we'd have twisted.internet, tmlabs.news, tmlabs.conch etc..

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From foom at fuhm.net  Tue Apr 20 13:04:25 2004
From: foom at fuhm.net (James Y Knight)
Date: Tue, 20 Apr 2004 13:04:25 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <200404201202.41047.fdrake@acm.org>
References: <1082396907.26194.499.camel@sheriffpony>
	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
	<1082474965.25969.1.camel@sheriffpony>
	<200404201202.41047.fdrake@acm.org>
Message-ID: <C6B51389-92EC-11D8-B05B-000A95A50FB2@fuhm.net>


On Apr 20, 2004, at 12:02 PM, Fred L. Drake, Jr. wrote:

> On Tuesday 20 April 2004 11:29 am, Itamar Shtull-Trauring wrote:
>> On Tue, 2004-04-20 at 10:57, James Y Knight wrote:
>>> Using twisted.* would be better if twisted.core was in twisted.core 
>>> but
>>> even without that the name sounds fine to me.
>>>
>>> So, can it not be done technically?
>>
>> I think so, yes.
>
> One thing that's interesting to note is that distutils actually allows
> installing subpackages directly.  For example, it's possible to install
> twisted.news separately from other twisted.* packages (let's ignore
> dependencies for the moment).

If it's the case that this is possible, I'd say "best naming scheme" 
would be:
twisted.core.*coremodules
twisted.product
twisted.otherproduct.

However, given that twisted.core isn't going to exist, I'd be almost as 
happy with:
twisted.*coremodules
tmlabs.product
tmlabs.otherproduct

So consider that last my vote.

James




From michael.l.schneider at ugsplm.com  Tue Apr 20 13:05:08 2004
From: michael.l.schneider at ugsplm.com (Schneider, Michael)
Date: Tue, 20 Apr 2004 13:05:08 -0400
Subject: [Twisted-Python] Progress report on splitting packages
Message-ID: <49199579A2BB32438A7572AF3DBB2FB505A21768@uscimplm001.net.plm.eds.com>

Just curious.


Is there a technical reason not to do three layers.

It seems

Application - twisted
Domain  - news
Subsystem - lowdown , ....

makes the system easier to understand then

Application - twisted
All subpackages - next level....


Just trying to understand the approach,

Thanks
Mike

 
----------------------------------------------------------------
Michael Schneider
Senior Software Engineering Consultant
UGS PLM Solutions - an EDS Company
 
"The Greatest Performance Improvement Is the transitioning from a non-working state to the working state"


> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Itamar
> Shtull-Trauring
> Sent: Tuesday, April 20, 2004 9:48 AM
> To: Twisted discussion stuff
> Subject: Re: [Twisted-Python] Progress report on splitting packages
> 
> 
> On Tue, 2004-04-20 at 09:34, Thomas Mangin wrote:
> 
> > twisted.mail.pop3.byme
> > twisted.mail.pop3.byyou
> > twisted.nntp.lowdown
> > twisted.nntp.cnn
> 
> Not going to happen. twisted.news... maybe. twisted.news.lowdown or
> whatever is not going to be how we do it.
> 
> -- 
> Itamar Shtull-Trauring    http://itamarst.org
> Looking for a job -- http://itamarst.org/resume.html
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From exarkun at divmod.com  Tue Apr 20 13:09:36 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 20 Apr 2004 17:09:36 GMT
Subject: [Twisted-Python] Progress report on splitting packages
Message-ID: <20040420170936.8525.734282215.divmod.quotient.12@ohm>

On Tue, 20 Apr 2004 11:53:29 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>Three suggestions so far:
> 
> 1. Separate namespaces for each project.
> 
>   twisted.internet
>   conch

  Advantages:

    Easy on developers
    No distutils tricks required
  
  Disadvantages:

    Litters the top-level namespace
    Less uniquely named packages must be renamed

> 
> 2. Keep all projects and core under twisted.
> 
>   twisted.internet
>   twisted.conch
> 

  Advantages:

    Easy on users.
    Keeps the top-level namespace clean.
    Keeps Twisted projects conceptually tied together.
    
  Disadvantages:

    Distutils tricks required
    Missing projects confuse users ("importing twisted.conch failed?  But I have Twisted installed :(")


> 3. Separate namespace for projects, e.g. 't' or 'tmlabs' (Zope3 was
> considering using 'z', though it like it won't happen in the end -
> http://mail.zope.org/pipermail/zope3-dev/2004-April/010469.html)
> 
>   twisted.internet
>   t.conch or tmlabs.conch
> 

  Advantages:

    Keeps the top-level namespace clean.
    Keeps Twisted projects conceptually tied together.
  
  Disadvantages:

    May require distutils tricks.
    Missing projects confuse users, but probably less than in #2


  Amendments to the above advantage/disadvantage lists welcome.

  I mentioned "distutils tricks" a couple times.  So far I have heard both that distutils can and cannot do this.  I suspect that it can, but I would like to hear details on how this would work.  In particular, I would like to know whether "twisted.foo" would exist before the "foo" project was installed, and if it would, both what it would consist of and how it would be treated when twisted core is being upgraded after the "foo" project has been installed (can it cleanly avoid overwriting things?).


  I am not sure which of these I support yet, but I think I am leaning towards #3.

  Jp



From radix at twistedmatrix.com  Tue Apr 20 13:16:00 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 20 Apr 2004 13:16:00 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082476408.25969.14.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>	<20040420021755.GA29296@frobozz>	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
	<1082476408.25969.14.camel@sheriffpony>
Message-ID: <40855AD0.7080203@twistedmatrix.com>

Itamar Shtull-Trauring wrote:
> 3. Separate namespace for projects, e.g. 't' or 'tmlabs' (Zope3 was
> considering using 'z', though it like it won't happen in the end -
> http://mail.zope.org/pipermail/zope3-dev/2004-April/010469.html)
> 
>   twisted.internet
>   t.conch or tmlabs.conch

I like this. With 'tmlabs'.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/3bbe9d1b/attachment.pgp 

From general at eepatents.com  Tue Apr 20 13:09:59 2004
From: general at eepatents.com (Ed Suominen)
Date: Tue, 20 Apr 2004 10:09:59 -0700
Subject: [Twisted-Python] Sub-project Naming
Message-ID: <c63lh6$6a9$1@sea.gmane.org>

"Always, always, always use good, unabbreviated, correctly-spelled
meaningful names." - http://c2.com/cgi/wiki?MeaningfulNames

As I've posted on the twisted.web list and ranted on #twisted,  I feel very
strongly that the proposed subprojects for twisted should  have meaningful
names that convey their function and relationship with each other. On the
#twisted IRC channel, Itamar talked about the use of tmlabs as a prefix for
the subproject names. This makes perfect sense to me. What would you rather
see in a list of packages, this:

TimmysToy
Lowdown
Dot

or this:

tmlabs.web
tmlabs.news
tmlabs.dns

Which is easier for the uninitiated user or potential user of twisted to
comprehend? Do you want to convey information in a name or hide it?

-- 
Ed Suominen
Registered Patent Agent 
Open Source Developer (Yes, both...)
Web Site: http://www.eepatents.com





From michal at pasternak.w.lub.pl  Tue Apr 20 14:39:05 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Tue, 20 Apr 2004 20:39:05 +0200
Subject: [Twisted-Python] Sub-project Naming
In-Reply-To: <c63lh6$6a9$1@sea.gmane.org>
References: <c63lh6$6a9$1@sea.gmane.org>
Message-ID: <20040420183905.GA42806@pasternak.w.lub.pl>

Ed Suominen [Tue, Apr 20, 2004 at 10:09:59AM -0700]:
> "Always, always, always use good, unabbreviated, correctly-spelled
> meaningful names." - http://c2.com/cgi/wiki?MeaningfulNames
> 
> As I've posted on the twisted.web list and ranted on #twisted,  I feel very
> strongly that the proposed subprojects for twisted should  have meaningful
> names that convey their function and relationship with each other. On the
> #twisted IRC channel, Itamar talked about the use of tmlabs as a prefix for
> the subproject names. This makes perfect sense to me. What would you rather
> see in a list of packages, this:
> 
> TimmysToy
> Lowdown
> Dot
> 
> or this:
> 
> tmlabs.web
> tmlabs.news
> tmlabs.dns
> 
> Which is easier for the uninitiated user or potential user of twisted to
> comprehend? Do you want to convey information in a name or hide it?

Well, I am pretty uninitiated, so I'll describe how the things are from my
perspective. The answer is:

That depends.

I know, what does serializer do. I hardly had any idea what does "Jelly" do,
when I've seen that name for the first time. On the other hand, when I've
learned it, I prefer the name "Jelly", it is easier to use, than
"TwistedPickle", "TwistedSerializer", "SamePickleOnlyPortable". Is "Jelly" a
meaningful name for a serializer? I really doubt that, perhaps that's
obvious for native American/English people, not for me. Anyway, since I
understood it, I like it. That's one thing.

Here goes another: I know, what DNS mean and what does it stand for; I have
no idea what "Twisted Dot" is. Of course, I could learn it ("dot" is more
meaningful name for a dns, than "oak", for example - there's already such
product, and it does dns in python, btw). Also it is easier to create a cool
webpage graphics logo for "Twisted Dot - the DNS server" (you could just use
dot.kde.org slogan ;), than just for "Twisted DNS server". Perhaps it could
be called "tmlabs.dns", but then question arises:

	What is tmlabs.dns?
	
	[ ] DNS client
	[ ] DNS server
        [ ] DNS client library
	[ ] DNS server library
	[ ] All of the above
	[ ] None of the above
	
For example, currently phrase "use conch" is meaningless without the
context; it should be either "use conch server" or "use conch client". And I
really, really, really have no idea if naming server/client in a different
way would be a good thing.

Another thing... I don't really known if vendor-name-as-prefix is a good
idea. I like "twisted.*" more, than "tmlabs.*" ;)



From radix at twistedmatrix.com  Tue Apr 20 15:02:20 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 20 Apr 2004 15:02:20 -0400
Subject: [Twisted-Python] Sub-project Naming
In-Reply-To: <20040420183905.GA42806@pasternak.w.lub.pl>
References: <c63lh6$6a9$1@sea.gmane.org>
	<20040420183905.GA42806@pasternak.w.lub.pl>
Message-ID: <408573BC.50603@twistedmatrix.com>

Michal Pasternak wrote:
> Well, I am pretty uninitiated, so I'll describe how the things are from my
> perspective. The answer is:
> 
> That depends.
> 
> I know, what does serializer do. I hardly had any idea what does "Jelly" do,
> when I've seen that name for the first time. On the other hand, when I've
> learned it, I prefer the name "Jelly", it is easier to use, than
> "TwistedPickle", "TwistedSerializer", "SamePickleOnlyPortable". Is "Jelly" a
> meaningful name for a serializer? I really doubt that, perhaps that's
> obvious for native American/English people, not for me. Anyway, since I
> understood it, I like it. That's one thing.

Yes, and also, jelly and banana are both serializers, but different 
kinds. To be truly technically accurate and unambiguous, jelly would 
need to be called SerializeArbitraryObjectsToListsOfStringsAndNumbers, 
and banana would need to be called 
SerializeListsOfStringsAndNumbersToBytes (and pickle would need to be 
called SerializeArbitraryObjectsToBytesWithHorribleSecurityHoles). This 
was the point I gave Ed on IRC, and he half-conceded his point, after 
not being able to come up with better names.

> Another thing... I don't really known if vendor-name-as-prefix is a good
> idea. I like "twisted.*" more, than "tmlabs.*" ;)

Two points. First, TML isn't exactly a "Vendor". We're not an official 
organization at all; we're just a group of (tight-knit, etc ;) people 
who hack on a bunch of somewhat related projects. Second, putting it in 
'twisted' has problems, since there will be subpackages of the twisted 
core module right next to our separately-distributed projects, leading 
to confusion:

in `ls' order:
  twisted.application <-- core
  twisted.conch       <-- external
  twisted.cred        <-- core
  twisted.enterprise  <-- core
  twisted.flow        <-- external

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/1c9402ed/attachment.pgp 

From corydodt at twistedmatrix.com  Tue Apr 20 15:06:38 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Tue, 20 Apr 2004 12:06:38 -0700
Subject: [Twisted-Python] Free Microsoft VC++ Compiler
In-Reply-To: <5.1.1.6.0.20040420121636.02690270@telecommunity.com>
References: <E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>	<1082428897.15221.184741043@webmail.messagingengine.com>	<1082463621.22434.0.camel@sheriffpony>	<E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>
	<5.1.1.6.0.20040420121636.02690270@telecommunity.com>
Message-ID: <408574BE.5010104@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hooray for early adopters :-)

C

Phillip J. Eby wrote:
| At 09:49 AM 4/20/04 -0400, Itamar Shtull-Trauring wrote:
|
|> On Tue, 2004-04-20 at 09:44, Bob Ippolito wrote:
|>
|> > Well, from what I understand, mainline Python 2.4 is pretty much going
|> > to require MSVC++ 7.x to link an extension properly, so it might be
|> > sort of a lost cause.
|>
|> mingw is compatible with VC6 (otherwise we couldn't use it), possibly it
|> can be made to be compatible with VC7?
|
|
| Yes, it can.  See this thread:
|
| http://mail.python.org/pipermail/python-dev/2004-January/041650.html
|
|
|
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3-nr1 (Windows 2000)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFAhXS+3A5SrXAiHQcRAgbtAJ9mdBXWyxh83u0u7jp8wDtED5ZisQCaA9ni
CBkp3uMc6ICNN6E2is1UkXk=
=MjCH
-----END PGP SIGNATURE-----



From matt at pollenation.net  Tue Apr 20 15:20:03 2004
From: matt at pollenation.net (Matt Goodall)
Date: Tue, 20 Apr 2004 20:20:03 +0100
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082464567.22435.17.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
Message-ID: <1082488803.2913.163.camel@debian>

On Tue, 2004-04-20 at 13:36, Itamar Shtull-Trauring wrote:
> On Mon, 2004-04-19 at 21:58, Christopher Armstrong wrote:

[snip]

> > twisted.xish -> No idea.
> >    No idea. I imagine this will just be made a part of the Jabber
> >    package, whatever that is.
> 
> Yeah. Jabber will probably be in the Words pacakge, so xish will end up
> there (unless people tell us it is generally applicable).

I recently used xish.xpath instead of libxml's xpath in a Nevow example
to avoid introducing the external dependency. I knew xish would be
available to anyone interested in the example ... or so I thought ;-).
The xish.xpath implementation is lacking a few useful bits of the xpath
spec but other than that it's useful.

I don't know enough about the xish package as a whole to comment on
other parts - I only used (possibly wrongly) what I needed from it to
get the example working.

Cheers, Matt

-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt at pollenation.net

Any views expressed are my own and do not necessarily reflect
the views of my employer.




From mesozoic at polynode.com  Tue Apr 20 15:24:56 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Tue, 20 Apr 2004 15:24:56 -0400
Subject: [Twisted-Python] Re: Sub-project Naming
In-Reply-To: <20040420183905.GA42806@pasternak.w.lub.pl>
References: <c63lh6$6a9$1@sea.gmane.org>
	<20040420183905.GA42806@pasternak.w.lub.pl>
Message-ID: <1082489095.25380.24.camel@hyla>

On Tue, 2004-04-20 at 14:39, Michal Pasternak wrote:
> Ed Suominen [Tue, Apr 20, 2004 at 10:09:59AM -0700]:
> > "Always, always, always use good, unabbreviated, correctly-spelled
> > meaningful names." - http://c2.com/cgi/wiki?MeaningfulNames
> 
> Another thing... I don't really known if vendor-name-as-prefix is a good
> idea. I like "twisted.*" more, than "tmlabs.*" ;)

tmlabs.* makes it _dead obvious_ that these are not part of the core
Twisted package, they're subprojects instead. Less confusion. Good.

While TM.* or tm.* would be easier on my fingers, I think it's good to
just settle on something and move on. A number of people have supported
tmlabs.*, so I say just go with that.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/c3ee3eb1/attachment.pgp 

From glyph at divmod.com  Tue Apr 20 15:56:00 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 20 Apr 2004 15:56:00 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408483C6.1030308@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
Message-ID: <BF513690-9304-11D8-B6DF-000393C9700E@divmod.com>


On Apr 19, 2004, at 9:58 PM, Christopher Armstrong wrote:

> It was decided that doing package names like this would be too 
> problematic.

When and by whom?  :)  At PyCon we talked about (and, IIRC, decided 
about) using the 'pkgutil' module to keep different subpackages in 
different locations.  I originally wanted to move things to top-level 
packages but itamar convinced me that forcing a change in the import 
structure as part of the split would be a bad idea.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/1621070e/attachment.pgp 

From glyph at divmod.com  Tue Apr 20 16:00:17 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 20 Apr 2004 16:00:17 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408488B0.5050407@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>	<408483C6.1030308@twistedmatrix.com>
	<20040420020914.GA12285@titus.home.puzzling.org>
	<408488B0.5050407@twistedmatrix.com>
Message-ID: <58478F42-9305-11D8-B6DF-000393C9700E@divmod.com>


On Apr 19, 2004, at 10:19 PM, Christopher Armstrong wrote:

> It seems quite unnecessary, and I'm not convinced enough of its 
> utility to actually put effort into it. There's not much special about 
> a "Twisted Subproject"; AFAIC they're just projects that are developed 
> by "Twisted Matrix Laboratories", which is rather nebulous.

We absolutely need a policy document.  The most attractive thing about 
Twisted, to many developers, is the extremely consistent coding style, 
packaging style, and central point of distribution.  A project 
developed by 'the labs' also implicitly depends on some other core 
packages, and we need policy about things like running regression tests 
with multiple versions of dependencies in order that those core 
packages continue to support their clients correctly to even maintain 
parity with our current development process's quality level.

Some of the policy will seem obvious, but other packages don't follow 
it.  For example, we should make sure that everything uses distutils as 
its build process.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/8f4f0aac/attachment.pgp 

From radix at twistedmatrix.com  Tue Apr 20 16:02:49 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 20 Apr 2004 16:02:49 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <BF513690-9304-11D8-B6DF-000393C9700E@divmod.com>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>	<408483C6.1030308@twistedmatrix.com>
	<BF513690-9304-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <408581E9.1060007@twistedmatrix.com>

Glyph Lefkowitz wrote:
> 
> On Apr 19, 2004, at 9:58 PM, Christopher Armstrong wrote:
> 
>> It was decided that doing package names like this would be too 
>> problematic.
> 
> 
> When and by whom?  :)  At PyCon we talked about (and, IIRC, decided 
> about) using the 'pkgutil' module to keep different subpackages in 
> different locations.  I originally wanted to move things to top-level 
> packages but itamar convinced me that forcing a change in the import 
> structure as part of the split would be a bad idea.

Well, see newer posts to this list.


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/4c692cee/attachment.pgp 

From fdrake at acm.org  Tue Apr 20 16:02:12 2004
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 20 Apr 2004 16:02:12 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420170936.8525.734282215.divmod.quotient.12@ohm>
References: <20040420170936.8525.734282215.divmod.quotient.12@ohm>
Message-ID: <200404201602.12883.fdrake@acm.org>

On Tuesday 20 April 2004 01:09 pm, exarkun at divmod.com wrote:
 >   I mentioned "distutils tricks" a couple times.  So far I have heard both
 > that distutils can and cannot do this.  I suspect that it can, but I would
 > like to hear details on how this would work.  In particular, I would like

from distutils.core import setup

setup(packages=["twisted.foo"],
      package_dir={"twisted.foo": "twisted_foo"}, # or wherever in the dist.
      ...)

 > to know whether "twisted.foo" would exist before the "foo" project was
 > installed, and if it would, both what it would consist of and how it would
 > be treated when twisted core is being upgraded after the "foo" project has
 > been installed (can it cleanly avoid overwriting things?).

Whether it exists depends on whether the Twisted core includes a package of 
the same name; I wouldn't include it unless it's part of the core.

If the "core" includes the twisted package (pure container or not), upgrading 
it does not affect child packages that aren't distributed as part of the 
twisted core.  So if you install twisted 1.1, twisted.foo 1.2, then twisted 
1.3, you have the core at 1.3 and twisted.foo at 1.2.

Yes, I've tested this behavior with Zope 3 packages.

Does this answer your question?  I'll be glad to elaborate if needed.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation




From radix at twistedmatrix.com  Tue Apr 20 16:04:50 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 20 Apr 2004 16:04:50 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
Message-ID: <40858262.6020102@twistedmatrix.com>

So it's officially counted :-) ::

-------- Original Message --------
Subject: Re: [Twisted-Python] Sub-project Naming
Date: Tue, 20 Apr 2004 12:47:45 -0700 (PDT)
From: Jeremy Noetzelman <jjn at kriln.com>
To: Christopher Armstrong <radix at twistedmatrix.com>


FWIW, tmlabs.* has my vote!

Stravad


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/0d0b5a73/attachment.pgp 

From glyph at divmod.com  Tue Apr 20 16:16:55 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 20 Apr 2004 16:16:55 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408526DA.6080005@exa-networks.co.uk>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<408526DA.6080005@exa-networks.co.uk>
Message-ID: <AB6CE628-9307-11D8-B6DF-000393C9700E@divmod.com>


On Apr 20, 2004, at 9:34 AM, Thomas Mangin wrote:

> I will repeat that I think that
> <basename>.<protocol>(.<implementation>)+
> basename :: twisted, foobar, other
> protocol :: nntp, ldap, mail, ...
> implementation ::  lowdown, smtp, pop3, ..

This makes no sense to me, and as itamar said is unlikely to be 
accepted.

First of all, nntp and ldap are the same kind of thing as smtp and pop3 
- protocols.

Second, twisted.words, for example, is explicitly multiprotocol.  I 
suppose if we wanted to be boring, we could call it 
twisted.multiprotocolchatserver.ircgateway, but IMHO "words" is 
catchier.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/7aab4e60/attachment.pgp 

From glyph at divmod.com  Tue Apr 20 16:21:49 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 20 Apr 2004 16:21:49 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082471707.22428.27.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<20040420141933.GC84522@prometheusresearch.com>
	<1082471707.22428.27.camel@sheriffpony>
Message-ID: <5A9A11F8-9308-11D8-B6DF-000393C9700E@divmod.com>


On Apr 20, 2004, at 10:35 AM, Itamar Shtull-Trauring wrote:

> We want to allow people to use latest version of Twisted with old
> versions of other packages. So if the package you use has a major API
> rewrite, you can still use the old version with the latest and coolest
> core Twisted.

In particular, this was a release management problem for Divmod, 
because we've been making changes to the imap4 code (which is in the 
"protocols" package), that our code depends on, but we can't release 
all of Twisted at once fast enough to roll out a minor change, because 
going through the full QA process for the whole system takes too long.  
We are trying to decouple things more so that a project which requires 
bugfixes in twisted.web doesn't accidentally suck in in-progress 
changes to the reactor as well.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/96a07eed/attachment.pgp 

From fdrake at acm.org  Tue Apr 20 16:41:15 2004
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 20 Apr 2004 16:41:15 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <BF513690-9304-11D8-B6DF-000393C9700E@divmod.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<408483C6.1030308@twistedmatrix.com>
	<BF513690-9304-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <200404201641.15356.fdrake@acm.org>

On Tuesday 20 April 2004 03:56 pm, Glyph Lefkowitz wrote:
 > When and by whom?  :)  At PyCon we talked about (and, IIRC, decided
 > about) using the 'pkgutil' module to keep different subpackages in
 > different locations.

I've convinced myself that this is inadvisable at this point (in general, not 
just for Twisted).  There is a bug in pkgutil that renders it much more 
painful than it should be.  See:

    http://www.python.org/sf/935117


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation




From pp64 at codelock.com  Tue Apr 20 16:42:46 2004
From: pp64 at codelock.com (Pavel Pergamenshchik)
Date: Tue, 20 Apr 2004 16:42:46 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <40858262.6020102@twistedmatrix.com>
References: <40858262.6020102@twistedmatrix.com>
Message-ID: <20040420164246.12a4044e@dunce>

On Tue, 20 Apr 2004 16:04:50 -0400
Christopher Armstrong <radix at twistedmatrix.com> wrote:

> So it's officially counted :-) ::
> 
> -------- Original Message --------
> Subject: Re: [Twisted-Python] Sub-project Naming
> Date: Tue, 20 Apr 2004 12:47:45 -0700 (PDT)
> From: Jeremy Noetzelman <jjn at kriln.com>
> To: Christopher Armstrong <radix at twistedmatrix.com>
> 
> 
> FWIW, tmlabs.* has my vote!

Metoo!!!@#one!#@! This seems to the least unacceptable of the offered solutions. FWIW, I feel strongly about avoiding "cute" names for (web, news, mail)-level packages. I'd rather see twisted.ssh than twisted.conch, but I suppose that needed a distinct name for the client executable.



From radix at twistedmatrix.com  Tue Apr 20 17:02:07 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 20 Apr 2004 17:02:07 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <20040420164246.12a4044e@dunce>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
Message-ID: <40858FCF.6020704@twistedmatrix.com>

Pavel Pergamenshchik wrote:
> On Tue, 20 Apr 2004 16:04:50 -0400
> Christopher Armstrong <radix at twistedmatrix.com> wrote:
> 
> 
>>So it's officially counted :-) ::
>>
>>-------- Original Message --------
>>Subject: Re: [Twisted-Python] Sub-project Naming
>>Date: Tue, 20 Apr 2004 12:47:45 -0700 (PDT)
>>From: Jeremy Noetzelman <jjn at kriln.com>
>>To: Christopher Armstrong <radix at twistedmatrix.com>
>>
>>
>>FWIW, tmlabs.* has my vote!
> 
> 
> Metoo!!!@#one!#@! This seems to the least unacceptable of the offered solutions. FWIW, I feel strongly about avoiding "cute" names for (web, news, mail)-level packages. I'd rather see twisted.ssh than twisted.conch, but I suppose that needed a distinct name for the client executable.

Well, if we go with tmlabs.*, then we won't need to worry about this. 
All packages will probably just keep their current names (barring 
special cases like im/words integration. We'll probably just call that 
'words' and put all IM protocols there).

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/d0489bca/attachment.pgp 

From bob at redivi.com  Tue Apr 20 17:23:56 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 20 Apr 2004 17:23:56 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <40858FCF.6020704@twistedmatrix.com>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
Message-ID: <07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>

On Apr 20, 2004, at 5:02 PM, Christopher Armstrong wrote:

> Pavel Pergamenshchik wrote:
>> On Tue, 20 Apr 2004 16:04:50 -0400
>> Christopher Armstrong <radix at twistedmatrix.com> wrote:
>>> So it's officially counted :-) ::
>>>
>>> -------- Original Message --------
>>> Subject: Re: [Twisted-Python] Sub-project Naming
>>> Date: Tue, 20 Apr 2004 12:47:45 -0700 (PDT)
>>> From: Jeremy Noetzelman <jjn at kriln.com>
>>> To: Christopher Armstrong <radix at twistedmatrix.com>
>>>
>>>
>>> FWIW, tmlabs.* has my vote!
>> Metoo!!!@#one!#@! This seems to the least unacceptable of the offered 
>> solutions. FWIW, I feel strongly about avoiding "cute" names for 
>> (web, news, mail)-level packages. I'd rather see twisted.ssh than 
>> twisted.conch, but I suppose that needed a distinct name for the 
>> client executable.
>
> Well, if we go with tmlabs.*, then we won't need to worry about this. 
> All packages will probably just keep their current names (barring 
> special cases like im/words integration. We'll probably just call that 
> 'words' and put all IM protocols there).

I'm +1 on tmlabs as well, but I'm unsure about the cute names.

On one hand, it's harder for a new user to figure out that (a) twisted 
does ssh and (b) it's named conch.. but on the other hand, if you say 
conch, people know you're speaking of a specific implementation of ssh, 
where if it was called "twisted ssh" it might cause some confusion in 
that regard.  I think PuTTY, SecureCRT, Transmit, etc. do a fine job of 
marketing themselves as protocol-specificish applications without 
explicitly mentioning which protocols they support (which is probably 
more of a bonus, because it's future proof).

So because there are good reasons either way, I say we just stick with 
the cute names -- but maybe try a little harder to market them to new 
users.  An idea would be to have a "protocol matrix" document that is 
easy to find from twistedmatrix.com (no more than 1 click away from the 
front page, but it could almost be the front page) that is a table of 
wire protocols <-> implementation names with perhaps a note about their 
stability and completeness.

-bob




From mary-twisted at puzzling.org  Tue Apr 20 17:27:24 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 21 Apr 2004 07:27:24 +1000
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <58478F42-9305-11D8-B6DF-000393C9700E@divmod.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<20040420020914.GA12285@titus.home.puzzling.org>
	<408488B0.5050407@twistedmatrix.com>
	<58478F42-9305-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <20040420212724.GB2957@titus.home.puzzling.org>

On Tue, Apr 20, 2004, Glyph Lefkowitz wrote:
> 
> On Apr 19, 2004, at 10:19 PM, Christopher Armstrong wrote:
> 
> >It seems quite unnecessary, and I'm not convinced enough of its
> >utility to actually put effort into it. There's not much special
> >about a "Twisted Subproject"; AFAIC they're just projects that are
> >developed by "Twisted Matrix Laboratories", which is rather nebulous.
> 
> We absolutely need a policy document.

I had a thought briefly yesterday that got lost in my helpful (off-list)
exchange with radix about whether policy could keep cross-projects tasks
like docs (and testing I suppose) sane: a policy doc would be most
helpful for newcomers to the Twisted community who've decided their itch
is a new subproject, because they want to add support for a blah
protocol. Reading a policy doc would be a lot faster than absorbing
policy on IRC for an outsider. Or at least so it appears to me.

> Twisted, to many developers, is the extremely consistent coding style,
> packaging style, and central point of distribution.  A project
> developed by 'the labs' also implicitly depends on some other core
> packages, and we need policy about things like running regression
> tests with multiple versions of dependencies in order that those core
> packages continue to support their clients correctly to even maintain
> parity with our current development process's quality level.
> 
> Some of the policy will seem obvious, but other packages don't follow
> it.  For example, we should make sure that everything uses distutils
> as its build process.

If people want a policy doc, send me notes towards it and I'll happily
turn it into something doc-like or a series thereof. I know there's
coding standards already.

-Mary



From mary-twisted at puzzling.org  Tue Apr 20 17:28:44 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 21 Apr 2004 07:28:44 +1000
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082476408.25969.14.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<20040420021755.GA29296@frobozz>
	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
	<1082476408.25969.14.camel@sheriffpony>
Message-ID: <20040420212844.GC2957@titus.home.puzzling.org>

On Tue, Apr 20, 2004, Itamar Shtull-Trauring wrote:
> 3. Separate namespace for projects, e.g. 't' or 'tmlabs' (Zope3 was
> considering using 'z', though it like it won't happen in the end -
> http://mail.zope.org/pipermail/zope3-dev/2004-April/010469.html)
> 
>   twisted.internet
>   t.conch or tmlabs.conch

I like 3.

-Mary



From fdrake at acm.org  Tue Apr 20 17:37:06 2004
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 20 Apr 2004 17:37:06 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420212724.GB2957@titus.home.puzzling.org>
References: <1082396907.26194.499.camel@sheriffpony>
	<58478F42-9305-11D8-B6DF-000393C9700E@divmod.com>
	<20040420212724.GB2957@titus.home.puzzling.org>
Message-ID: <200404201737.06465.fdrake@acm.org>

On Tuesday 20 April 2004 05:27 pm, Mary Gardiner wrote:
 > protocol. Reading a policy doc would be a lot faster than absorbing
 > policy on IRC for an outsider. Or at least so it appears to me.

Using IRC as a sole source for such information is insane.  Many potential 
contributors and users won't want anything to do with IRC, and #twisted isn't 
comfy to "outsiders."  (It's not that people on #twisted aren't nice or 
helpful; it's just that the basic culture is... strange.)


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation




From radix at twistedmatrix.com  Tue Apr 20 17:41:26 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 20 Apr 2004 17:41:26 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <200404201602.12883.fdrake@acm.org>
References: <20040420170936.8525.734282215.divmod.quotient.12@ohm>
	<200404201602.12883.fdrake@acm.org>
Message-ID: <40859906.8070500@twistedmatrix.com>

Fred L. Drake, Jr. wrote:
> On Tuesday 20 April 2004 01:09 pm, exarkun at divmod.com wrote:
>  >   I mentioned "distutils tricks" a couple times.  So far I have heard both
>  > that distutils can and cannot do this.  I suspect that it can, but I would
>  > like to hear details on how this would work.  In particular, I would like
> 
> from distutils.core import setup
> 
> setup(packages=["twisted.foo"],
>       package_dir={"twisted.foo": "twisted_foo"}, # or wherever in the dist.
>       ...)
> 
>  > to know whether "twisted.foo" would exist before the "foo" project was
>  > installed, and if it would, both what it would consist of and how it would
>  > be treated when twisted core is being upgraded after the "foo" project has
>  > been installed (can it cleanly avoid overwriting things?).
> 
> Whether it exists depends on whether the Twisted core includes a package of 
> the same name; I wouldn't include it unless it's part of the core.
> 
> If the "core" includes the twisted package (pure container or not), upgrading 
> it does not affect child packages that aren't distributed as part of the 
> twisted core.  So if you install twisted 1.1, twisted.foo 1.2, then twisted 
> 1.3, you have the core at 1.3 and twisted.foo at 1.2.

Well, this isn't quite a problem any more, since we're going to put 
stuff in 'tmlabs' instead of 'twisted' (according to the obvious favor 
from posters to this thread). However, what do you think the best way to 
make the 'tmlabs' top-level exist would be? I figure we can just put an 
empty 'tmlabs' directory right next to 'twisted' in our Twisted core 
package, containing only an empty __init__.py. setup.py could install 
it, and for people hacking out of SVN instead of using actual 
installations (for the developers of these projects), I'll write a 
little .pth file that makes this sane.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/b55c2ba9/attachment.pgp 

From fdrake at acm.org  Tue Apr 20 17:51:04 2004
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 20 Apr 2004 17:51:04 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <40859906.8070500@twistedmatrix.com>
References: <20040420170936.8525.734282215.divmod.quotient.12@ohm>
	<200404201602.12883.fdrake@acm.org>
	<40859906.8070500@twistedmatrix.com>
Message-ID: <200404201751.04753.fdrake@acm.org>

On Tuesday 20 April 2004 05:41 pm, Christopher Armstrong wrote:
 > Well, this isn't quite a problem any more, since we're going to put
 > stuff in 'tmlabs' instead of 'twisted' (according to the obvious favor
 > from posters to this thread). However, what do you think the best way to
 > make the 'tmlabs' top-level exist would be? I figure we can just put an
 > empty 'tmlabs' directory right next to 'twisted' in our Twisted core
 > package, containing only an empty __init__.py. setup.py could install
 > it, and for people hacking out of SVN instead of using actual
 > installations (for the developers of these projects), I'll write a
 > little .pth file that makes this sane.

This seems quite reasonable to me, since stuff in tmlabs.* is expected to 
always rely on twisted.  That's a nice bootstrap detail to have taken care of 
so easily.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation




From cce at clarkevans.com  Tue Apr 20 17:56:28 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 20 Apr 2004 17:56:28 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <5A9A11F8-9308-11D8-B6DF-000393C9700E@divmod.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<20040420141933.GC84522@prometheusresearch.com>
	<1082471707.22428.27.camel@sheriffpony>
	<5A9A11F8-9308-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <20040420215628.GC31575@prometheusresearch.com>

On Tue, Apr 20, 2004 at 04:21:49PM -0400, Glyph Lefkowitz wrote:
| >We want to allow people to use latest version of Twisted with old
| >versions of other packages. So if the package you use has a major API
| >rewrite, you can still use the old version with the latest and coolest
| >core Twisted.
| 
| In particular, this was a release management problem for Divmod, 
| because we've been making changes to the imap4 code (which is in the 
| "protocols" package), that our code depends on, but we can't release 
| all of Twisted at once fast enough to roll out a minor change, because 
| going through the full QA process for the whole system takes too long.  
| We are trying to decouple things more so that a project which requires 
| bugfixes in twisted.web doesn't accidentally suck in in-progress 
| changes to the reactor as well.

This seems the driving reason.  What ever choice is made, it should
be there to support this need.

My perspective:

  1.  I think it is best to stick with one top level
      package name.   Splitting twisted.* into 
      twisted and tmlabs or whatever dillutes the
      value of the overall product and creates
      unnecessary distinctions.

  2.  Overall, naming should be as boring as possible
      so that what is being implemented is clear,
      'ssh' is better than 'consh'.  Also, while more
      than one implementation is the 'open source'
      way of doing things, more than one way in the
      twisted project, imho, is not a great idea
      (it dillutes the marketing value)

   3. If release management is causing this distinction,
      I suggest making up sub-packages:
      
      twisted.core.python
                  .trial
                  .internet
                 
      twisted.web.client
                 .server
                 .http
                 .ftp

      twisted.mail.smtp
                  .pop
                  .imap
                  .client
                  .server

      twisted.rpc.jelly
                 .spread
                 <other RPC stuff>

      twisted.im.jabber
                .aol
                .client
                .server

      twisted.database. <database stuff>

      twisted.libs.xml
                  .flow
                   (other othgogonal non-protocol libraries)

     4. In particular, I don't see that "enterprise" and 
        "jelly+spread" are any more 'core' than jabber... ;)


Sorry for being so boring.

Clark



From bob at redivi.com  Tue Apr 20 18:01:57 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 20 Apr 2004 18:01:57 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <40859906.8070500@twistedmatrix.com>
References: <20040420170936.8525.734282215.divmod.quotient.12@ohm>
	<200404201602.12883.fdrake@acm.org>
	<40859906.8070500@twistedmatrix.com>
Message-ID: <5751351A-9316-11D8-90CB-000A95686CD8@redivi.com>


On Apr 20, 2004, at 5:41 PM, Christopher Armstrong wrote:

> Fred L. Drake, Jr. wrote:
>> On Tuesday 20 April 2004 01:09 pm, exarkun at divmod.com wrote:
>>  >   I mentioned "distutils tricks" a couple times.  So far I have 
>> heard both
>>  > that distutils can and cannot do this.  I suspect that it can, but 
>> I would
>>  > like to hear details on how this would work.  In particular, I 
>> would like
>> from distutils.core import setup
>> setup(packages=["twisted.foo"],
>>       package_dir={"twisted.foo": "twisted_foo"}, # or wherever in 
>> the dist.
>>       ...)
>>  > to know whether "twisted.foo" would exist before the "foo" project 
>> was
>>  > installed, and if it would, both what it would consist of and how 
>> it would
>>  > be treated when twisted core is being upgraded after the "foo" 
>> project has
>>  > been installed (can it cleanly avoid overwriting things?).
>> Whether it exists depends on whether the Twisted core includes a 
>> package of the same name; I wouldn't include it unless it's part of 
>> the core.
>> If the "core" includes the twisted package (pure container or not), 
>> upgrading it does not affect child packages that aren't distributed 
>> as part of the twisted core.  So if you install twisted 1.1, 
>> twisted.foo 1.2, then twisted 1.3, you have the core at 1.3 and 
>> twisted.foo at 1.2.
>
> Well, this isn't quite a problem any more, since we're going to put 
> stuff in 'tmlabs' instead of 'twisted' (according to the obvious favor 
> from posters to this thread). However, what do you think the best way 
> to make the 'tmlabs' top-level exist would be? I figure we can just 
> put an empty 'tmlabs' directory right next to 'twisted' in our Twisted 
> core package, containing only an empty __init__.py. setup.py could 
> install it, and for people hacking out of SVN instead of using actual 
> installations (for the developers of these projects), I'll write a 
> little .pth file that makes this sane.

Well, instead of being empty, the __init__.py could have a really nice 
docstring that says why it exists and how to get subpackages for it, 
etc.  :)

-bob




From stephen at thorne.id.au  Tue Apr 20 17:53:59 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Wed, 21 Apr 2004 07:53:59 +1000
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <20040420164246.12a4044e@dunce>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
Message-ID: <20040420215359.GA8410@thorne.id.au>

On Tue, Apr 20, 2004 at 04:42:46PM -0400, Pavel Pergamenshchik wrote:
> On Tue, 20 Apr 2004 16:04:50 -0400
> Christopher Armstrong <radix at twistedmatrix.com> wrote:
> 
> > So it's officially counted :-) ::
> > 
> > -------- Original Message --------
> > Subject: Re: [Twisted-Python] Sub-project Naming
> > Date: Tue, 20 Apr 2004 12:47:45 -0700 (PDT)
> > From: Jeremy Noetzelman <jjn at kriln.com>
> > To: Christopher Armstrong <radix at twistedmatrix.com>
> > 
> > 
> > FWIW, tmlabs.* has my vote!
> 
> Metoo!!!@#one!#@! This seems to the least unacceptable of the offered
> solutions. FWIW, I feel strongly about avoiding "cute" names for (web,
> news, mail)-level packages. I'd rather see twisted.ssh than
> twisted.conch, but I suppose that needed a distinct name for the
> client executable.

+1 on tmlabs.<sane-name>


Regards,
Stephen Thorne



From corydodt at twistedmatrix.com  Tue Apr 20 17:59:55 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Tue, 20 Apr 2004 14:59:55 -0700
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
References: <40858262.6020102@twistedmatrix.com>	<20040420164246.12a4044e@dunce>	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
Message-ID: <40859D5B.6000204@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Bob Ippolito wrote:

| On Apr 20, 2004, at 5:02 PM, Christopher Armstrong wrote:

|
| So because there are good reasons either way, I say we just stick with
| the cute names -- but maybe try a little harder to market them to new
| users.  An idea would be to have a "protocol matrix" document that is
| easy to find from twistedmatrix.com (no more than 1 click away from the
| front page, but it could almost be the front page) that is a table of
| wire protocols <-> implementation names with perhaps a note about their
| stability and completeness.
|
| -bob

+1

I just like the cute names because they are more google-friendly.

C

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3-nr1 (Windows 2000)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFAhZ1b3A5SrXAiHQcRAos5AKChkcSTktUzBwZXNeosEvm6B56PFgCghd39
85UZ3Je3BkUlahi3MGQd8mc=
=19u+
-----END PGP SIGNATURE-----



From radix at twistedmatrix.com  Tue Apr 20 18:06:56 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 20 Apr 2004 18:06:56 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <40859D5B.6000204@twistedmatrix.com>
References: <40858262.6020102@twistedmatrix.com>	<20040420164246.12a4044e@dunce>	<40858FCF.6020704@twistedmatrix.com>	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<40859D5B.6000204@twistedmatrix.com>
Message-ID: <40859F00.5030609@twistedmatrix.com>

Cory Dodt wrote:
> Bob Ippolito wrote:
> 
> | On Apr 20, 2004, at 5:02 PM, Christopher Armstrong wrote:
> 
> |
> | So because there are good reasons either way, I say we just stick with
> | the cute names -- but maybe try a little harder to market them to new
> | users.  An idea would be to have a "protocol matrix" document that is
> | easy to find from twistedmatrix.com (no more than 1 click away from the
> | front page, but it could almost be the front page) that is a table of
> | wire protocols <-> implementation names with perhaps a note about their
> | stability and completeness.
> |
> | -bob
> 
> +1
> 
> I just like the cute names because they are more google-friendly.

I'm not even concerned with "cute names" vs "descriptive names". I think 
they should stay what they already are wherever reasonable.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/3db64ed6/attachment.pgp 

From dreid at dreid.org  Tue Apr 20 18:08:29 2004
From: dreid at dreid.org (David Reid)
Date: Tue, 20 Apr 2004 15:08:29 -0700
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082476408.25969.14.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<20040420021755.GA29296@frobozz>
	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
	<1082476408.25969.14.camel@sheriffpony>
Message-ID: <1082498909.31542.11.camel@localhost>

I can get on board with 3

On Tue, 2004-04-20 at 08:53, Itamar Shtull-Trauring wrote:
> Three suggestions so far:
> 
> 1. Separate namespaces for each project.
> 
>   twisted.internet
>   conch
> 
> 2. Keep all projects and core under twisted.
> 
>   twisted.internet
>   twisted.conch
> 
> 3. Separate namespace for projects, e.g. 't' or 'tmlabs' (Zope3 was
> considering using 'z', though it like it won't happen in the end -
> http://mail.zope.org/pipermail/zope3-dev/2004-April/010469.html)
> 
>   twisted.internet
>   t.conch or tmlabs.conch




From thomas.mangin at exa-networks.co.uk  Tue Apr 20 18:17:03 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Tue, 20 Apr 2004 23:17:03 +0100
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <AB6CE628-9307-11D8-B6DF-000393C9700E@divmod.com>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>	<408483C6.1030308@twistedmatrix.com>	<1082464567.22435.17.camel@sheriffpony>	<408526DA.6080005@exa-networks.co.uk>
	<AB6CE628-9307-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <4085A15F.5080402@exa-networks.co.uk>

Glyph Lefkowitz wrote:

>> I will repeat that I think that
>> <basename>.<protocol>(.<implementation>)+
>> basename :: twisted, foobar, other
>> protocol :: nntp, ldap, mail, ...
>> implementation ::  lowdown, smtp, pop3, ..
>
>
> This makes no sense to me, and as itamar said is unlikely to be accepted.

well, I am glad that you are dismissing idea on the basis that you do 
not understand it (sorry for the irony), but as I did not spend great 
time or care to try to be understood, I can not complain too much.

> First of all, nntp and ldap are the same kind of thing as smtp and 
> pop3 - protocols.

Yes, I know. Why are you telling me that ?
Is it as I should have written :

basename.(organisational_unit.)*(protocol.)+(implementation)+
with the ()* and ()* having a regex like meaning and the words basename, 
organinational_unit, ... having one of the possible listed values.

basename in [twisted, tmlabs,whatever_is_agreed]
organisational_unit in [mail, im,web]
protocol in [nntp, ldap, oscar]
implementation in [lowdown, my_fancy_implementation_name]

It seems that by the time I wrote all that Clark have posted what I am 
trying to say.

> Second, twisted.words, for example, is explicitly multiprotocol.  I 
> suppose if we wanted to be boring, we could call it 
> twisted.multiprotocolchatserver.ircgateway, but IMHO "words" is catchier.

I do not really care if a name is catchy or not , "explicit is better 
than implicit". A good name is short enough to not be a pain when you 
code and explicit. I do not that fancy should not be a criteria of 
selection when it comes to technology.

I was trying to say the a logical organisation should help the 
understanding of the twisted package. It seems that there is a clear 
need to change the structure of the code as it is now too large and need 
to be structured in a modular fashion. But at the same time it seems 
that most of the people on the list are speaking of rules to make it 
harder for new user to learn twisted.

You guys, know twisted by heart. I do not intend to. I intend to use it 
for _RAD_, so learning it should be _quick_

If you do not understand me, please ask Michael Schneider or Clark Evans 
which seems to think like me but are able to express themselves correctly.

Thomas



From general at eepatents.com  Tue Apr 20 18:54:23 2004
From: general at eepatents.com (Ed Suominen)
Date: Tue, 20 Apr 2004 15:54:23 -0700
Subject: [Twisted-Python] Re: Progress report on splitting packages
References: <20040420170936.8525.734282215.divmod.quotient.12@ohm>
	<200404201602.12883.fdrake@acm.org>
	<40859906.8070500@twistedmatrix.com>
	<200404201751.04753.fdrake@acm.org>
Message-ID: <c649mt$qkq$1@sea.gmane.org>

Fred L. Drake, Jr. wrote:

> On Tuesday 20 April 2004 05:41 pm, Christopher Armstrong wrote:
>  > Well, this isn't quite a problem any more, since we're going to put
>  > stuff in 'tmlabs' instead of 'twisted' (according to the obvious favor
>  > from posters to this thread). However, what do you think the best way
>  > to make the 'tmlabs' top-level exist would be? I figure we can just put
>  > an empty 'tmlabs' directory right next to 'twisted' in our Twisted core
>  > package, containing only an empty __init__.py. setup.py could install
>  > it, and for people hacking out of SVN instead of using actual
>  > installations (for the developers of these projects), I'll write a
>  > little .pth file that makes this sane.
> 
> This seems quite reasonable to me, since stuff in tmlabs.* is expected to
> always rely on twisted.  That's a nice bootstrap detail to have taken care
> of so easily.
> 
> 
>   -Fred
> 

I agree with Fred's and Bob's comments. Radix has thought of a simple,
elegant solution here.

-- 
Ed Suominen
Registered Patent Agent 
Open Source Developer (Yes, both...)
Web Site: http://www.eepatents.com





From glyph at divmod.com  Tue Apr 20 18:57:20 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 20 Apr 2004 18:57:20 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
Message-ID: <1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>


On Apr 20, 2004, at 5:23 PM, Bob Ippolito wrote:

> An idea would be to have a "protocol matrix" document that is easy to 
> find from twistedmatrix.com (no more than 1 click away from the front 
> page, but it could almost be the front page) that is a table of wire 
> protocols <-> implementation names with perhaps a note about their 
> stability and completeness.

Bob, this is a _great_ idea.  Do you think you could do a first pass? :)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/a6873f79/attachment.pgp 

From mesozoic at polynode.com  Tue Apr 20 18:57:59 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Tue, 20 Apr 2004 18:57:59 -0400
Subject: [Twisted-Python] Re: [Fwd: Re: Sub-project Naming]
In-Reply-To: <20040420215359.GA8410@thorne.id.au>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>  <20040420215359.GA8410@thorne.id.au>
Message-ID: <1082501879.25375.26.camel@hyla>

On Tue, 2004-04-20 at 17:53, Stephen Thorne wrote:
> +1 on tmlabs.<sane-name>

+1 for me on tmlabs.<whatever-its-called-now>

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/b7bcda12/attachment.pgp 

From bob at redivi.com  Tue Apr 20 19:06:23 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 20 Apr 2004 19:06:23 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <57C38504-931F-11D8-90CB-000A95686CD8@redivi.com>


On Apr 20, 2004, at 6:57 PM, Glyph Lefkowitz wrote:

>
> On Apr 20, 2004, at 5:23 PM, Bob Ippolito wrote:
>
>> An idea would be to have a "protocol matrix" document that is easy to 
>> find from twistedmatrix.com (no more than 1 click away from the front 
>> page, but it could almost be the front page) that is a table of wire 
>> protocols <-> implementation names with perhaps a note about their 
>> stability and completeness.
>
> Bob, this is a _great_ idea.  Do you think you could do a first pass? 
> :)

No ;)

-bob




From dialtone at aruba.it  Tue Apr 20 19:19:30 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Wed, 21 Apr 2004 01:19:30 +0200
Subject: [Twisted-Python] Re: [Fwd: Re: Sub-project Naming]
In-Reply-To: <1082501879.25375.26.camel@hyla>
References: <40858262.6020102@twistedmatrix.com>	<20040420164246.12a4044e@dunce>
	<20040420215359.GA8410@thorne.id.au>
	<1082501879.25375.26.camel@hyla>
Message-ID: <4085B002.6080904@aruba.it>

Alex Levy wrote:

>+1 for me on tmlabs.<whatever-its-called-now>
>  
>
+1  on this. Keep the same names.

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
Blog: http://vvolonghi.blogspot.com
Home Page: http://xoomer.virgilio.it/dialtone/





From jasper at peak.org  Tue Apr 20 19:20:32 2004
From: jasper at peak.org (Jasper Phillips)
Date: Tue, 20 Apr 2004 16:20:32 -0700 (PDT)
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <Pine.LNX.4.53.0404201609250.18416@a.shell.peak.org>


I've been passing around instances of pb.Copyable classes for some time,
registering them via pb.setCopierForClassTree()...  However, this doesn't
allow me to pass the classes themselves.

I dug around in jelly and found jelly.globalSecurity.allowInstancesOf(),
which seems to do what I want, but makes me nervious as it's pretty
buried...

Passing classes seems like a reasonable thing to do, but now I wonder if
there is some reason that jelly doesn't allow it (except via a buried method
call)?  Or is this just an accidental misfeature?

-Jasper




From foom at fuhm.net  Tue Apr 20 19:22:12 2004
From: foom at fuhm.net (James Y Knight)
Date: Tue, 20 Apr 2004 19:22:12 -0400
Subject: [Twisted-Python] Library Versioning
Message-ID: <8DC2193C-9321-11D8-B05B-000A95A50FB2@fuhm.net>

Yeah, everyone's probably going to get mad at me for bringing 
versioning up again, but here goes.

I'll structure the first bit as an argument between me and some 
argumentative type who is unconvinced.

=========
Me: I want to be able to have two apps installed that use different, 
incompatible revisions of twisted or twisted subprojects.

Other: You can just install multiple versions of Twisted, in different 
directories, and set your PYTHONPATH differently for the different 
apps. And this works *right now*.

Me: Yes, that is true. But I want a solution to work for e.g. 
distributed debian packages. If twisted core makes an incompatible API 
change and becomes major revision 2, I want to be able to install 
applications that depend on v1 and applications that depend on v2 at 
the same time. I want to be able to apt-get install AppA which uses on 
libtwisted-core-1, and AppB which uses libtwisted-core-2 and have them 
both work.

Other: Okay, so call the newer API twisted_2 and the old one twisted_1 
(or just twisted). What's the problem?

Me: A few problems. First problem is you have to litter the entire 
codebase of an application with the version numbers. Every time you 
import the module you have to add the revision. When you want update 
your app to use 2.0, you need to change every single file to use 
twisted_2, even if they otherwise needed no changes. What I really want 
to do is put the required version in *ONE* place in the app. Perhaps in 
its __init__.py, or (if it's an app), perhaps in its executable script 
file.

Other: No, you *DON'T* want that, you really do want to specify the 
version in every import because you want to be able to import both 
versions in one "app".

Me: But it is unlikely that two revisions that don't know about 
eachother will both work in one app, so while it may look like I can 
import twisted_1 and twisted_2, mixing them will likely cause my app to 
blow up.

Other: Right, which is why the new version supplies the old interface 
as well. So the Twisted 2.0 library can provide both twisted_2 *AND* 
twisted_1 reimplemented in terms of twisted_2. And then you *can* use 
both in one app and everything will be happy.

Me: Yes, that is possible. If you do that, you're not breaking API 
compatibility, and thus the new version isn't actually a major revision 
at all. I do concede, it is _always_ better to not break API 
compatibility if you can avoid it. But I only know of one major 
opensource library that is making a guarantee to never release a new 
major version: glibc. Most projects do not have unlimited programmer 
time, and keeping backwards compatibility forever can take a lot of 
time and testing. Also note the "again" there.

Me: I think that having every API version supported by one library 
version is a very different thing than just being able to install 
multiple distinct versions of the library. Even if the goal is to 
support every API revision for eternity, it's probably not always 
possible, and at that point, you would want multiple library versions 
installed simultaneously.



=========

Thus, I propose the following magic (I'll have you take for granted 
that might work, for the moment):

This explicitly *DOES NOT* attempt to solve the multiple APIs supported 
by one installed library version issue. That is a separate issue.

- "import twisted; twisted.setversion(xxx)" loads version xxx of the 
twisted library. If another version has already been loaded, or if the 
specified version isn't available, raise an exception.
- "import twisted" uses the already loaded version if one is loaded, or 
else looks for the latest installed version and loads that if none have 
been loaded.

After that, you can use twisted.whatever normally. The setversion only 
needs to be done once per app/library e.g. in the top level 
__init__.py. It can be done in more places if you want.

This has the following desirable characteristics to me:
1) Simple case for beginners -- they don't have to do anything about 
versioning at all. Just import twisted normally and they get the latest 
version they have installed (which may very well also be the only 
version they have installed).
2) Yet, still easy to add the version requirement to an app that didn't 
have it initially. That you make sure to call setversion only really 
matters for packaged or widely distributed apps/libs. So if you're 
package an app that didn't have a setversion call initially, add it -- 
a one line patch.
3) Allows distro packaging to work sensibly. Incompatible revisions can 
be installed side-by-side and apps that use the old one can continue 
working just fine.
4) Doesn't require possibly unfulfillable compatibility promises from 
developers going forward.


This kind of versioning is somewhat similar to that of Python itself:
- You have a python app, and you can specify the version required on 
the first line of the main program (#!/usr/bin/python2.3), or else not 
(#!/usr/bin/python).
- Multiple versions are simultaneously installable.
- New versions have some compatibility, but don't promise perfect 
compatibility. Thus, sometimes you don't need to do anything to make 
your app work with the new version. But, if you do, there's likely only 
a few things you need to change, not every file.
- If the new version of python implements a compatibility API this is a 
separate issue from the python version: to get the old API you do 
nothing, and to get the new API you do: from __future__ import 
whatever.

James

PS: (The magic above does seem to be implementable, see PMW, Python 
Mega Widgets.)




From george at visp.com.au  Tue Apr 20 19:53:43 2004
From: george at visp.com.au (George Patterson)
Date: Wed, 21 Apr 2004 09:23:43 +0930
Subject: [Twisted-Python] Re: [Fwd: Re: Sub-project Naming]
In-Reply-To: <4085B002.6080904@aruba.it>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<20040420215359.GA8410@thorne.id.au>
	<1082501879.25375.26.camel@hyla> <4085B002.6080904@aruba.it>
Message-ID: <20040421092343.3970780f@beast.spyderweb.com.au>

On Wed, 21 Apr 2004 01:19:30 +0200
Valentino Volonghi aka Dialtone <dialtone at aruba.it> wrote:

> Alex Levy wrote:
> 
> >+1 for me on tmlabs.<whatever-its-called-now>
> >  
> >
> +1  on this. Keep the same names.
> 
+1 here. It makes it easier when discussing technology at project meetings if you are not required to refer to some open source technology as timmytops, lowdown or something else that is arguably equally flippant.

however I am happy for cutesy names to be used for the project releases eg Linux kernel releases.

George Patterson







From cce at clarkevans.com  Tue Apr 20 20:00:28 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 20 Apr 2004 20:00:28 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <57C38504-931F-11D8-90CB-000A95686CD8@redivi.com>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
	<57C38504-931F-11D8-90CB-000A95686CD8@redivi.com>
Message-ID: <20040421000028.GB53462@prometheusresearch.com>

This idea resolves my primary problem with the sea of names that
has emerged since I last hibernated.  ;) 

Clark

On Tue, Apr 20, 2004 at 07:06:23PM -0400, Bob Ippolito wrote:
| On Apr 20, 2004, at 6:57 PM, Glyph Lefkowitz wrote:
| >On Apr 20, 2004, at 5:23 PM, Bob Ippolito wrote:
| >>An idea would be to have a "protocol matrix" document that is easy to 
| >>find from twistedmatrix.com (no more than 1 click away from the front 
| >>page, but it could almost be the front page) that is a table of wire 
| >>protocols <-> implementation names with perhaps a note about their 
| >>stability and completeness.
| >Bob, this is a _great_ idea.  Do you think you could do a first pass? 
| No ;)



From golux at comcast.net  Tue Apr 20 20:01:40 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Tue, 20 Apr 2004 20:01:40 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
References: <40858262.6020102@twistedmatrix.com>	<20040420164246.12a4044e@dunce>	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
Message-ID: <4085B9E4.6030001@comcast.net>

Bob Ippolito wrote:

> So because there are good reasons either way, I say we just stick with 
> the cute names -- but maybe try a little harder to market them to new 
> users.  An idea would be to have a "protocol matrix" document that is 
> easy to find from twistedmatrix.com (no more than 1 click away from the 
> front page, but it could almost be the front page) that is a table of 
> wire protocols <-> implementation names with perhaps a note about their 
> stability and completeness.

+1 on that -- excellent idea.



From z3p at twistedmatrix.com  Tue Apr 20 20:06:26 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Tue, 20 Apr 2004 20:06:26 -0400
Subject: [Twisted-Python] Re: [Fwd: Re: Sub-project Naming]
In-Reply-To: <1082501879.25375.26.camel@hyla>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>  <20040420215359.GA8410@thorne.id.au>
	<1082501879.25375.26.camel@hyla>
Message-ID: <1082505951.21900.7.camel@petra>

On Tue, 2004-04-20 at 18:57, Alex Levy wrote:
> On Tue, 2004-04-20 at 17:53, Stephen Thorne wrote:
> > +1 on tmlabs.<sane-name>
> 
> +1 for me on tmlabs.<whatever-its-called-now>

+1 on tmlabs.<same-names-i-like-calling-it-conch>

-p
-- 
      Paul Swartz
(o_   pswartz at hampshire dot edu
//\   Box 1286, x5248, AIM: Z3Penguin
V_/_  GPG Key: http://stout.hampshire.edu/~pks03/public.key
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/f1695173/attachment.pgp 

From andrew-twisted at puzzling.org  Tue Apr 20 20:12:28 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 21 Apr 2004 10:12:28 +1000
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <Pine.LNX.4.53.0404201609250.18416@a.shell.peak.org>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
	<Pine.LNX.4.53.0404201609250.18416@a.shell.peak.org>
Message-ID: <20040421001228.GA28850@frobozz>

On Tue, Apr 20, 2004 at 04:20:32PM -0700, Jasper Phillips wrote:
> 
> I've been passing around instances of pb.Copyable classes for some time,
> registering them via pb.setCopierForClassTree()...  However, this doesn't
> allow me to pass the classes themselves.
> 
> I dug around in jelly and found jelly.globalSecurity.allowInstancesOf(),
> which seems to do what I want, but makes me nervious as it's pretty
> buried...
> 
> Passing classes seems like a reasonable thing to do, but now I wonder if
> there is some reason that jelly doesn't allow it (except via a buried method
> call)?  Or is this just an accidental misfeature?

Why not just pass the name of the class, and unserialise that as
appropriate?

I'm not a PB expert (or even close), but I always lean towards passing data
rather than code (or code-like things like classes) over remote method calls
when I can :)

-Andrew.




From jasper at peak.org  Tue Apr 20 20:48:00 2004
From: jasper at peak.org (Jasper Phillips)
Date: Tue, 20 Apr 2004 17:48:00 -0700 (PDT)
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <20040421001228.GA28850@frobozz>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
	<Pine.LNX.4.53.0404201609250.18416@a.shell.peak.org>
	<20040421001228.GA28850@frobozz>
Message-ID: <Pine.LNX.4.53.0404201725001.24013@a.shell.peak.org>


On Wed, 21 Apr 2004, Andrew Bennetts wrote:

> On Tue, Apr 20, 2004 at 04:20:32PM -0700, Jasper Phillips wrote:
> > 
> > I've been passing around instances of pb.Copyable classes for some time,
> > registering them via pb.setCopierForClassTree()...  However, this doesn't
> > allow me to pass the classes themselves.
> > 
> > I dug around in jelly and found jelly.globalSecurity.allowInstancesOf(),
> > which seems to do what I want, but makes me nervious as it's pretty
> > buried...
> > 
> > Passing classes seems like a reasonable thing to do, but now I wonder if
> > there is some reason that jelly doesn't allow it (except via a buried
> > method call)?  Or is this just an accidental misfeature?
> 
> Why not just pass the name of the class, and unserialise that as
> appropriate?
> 
> I'm not a PB expert (or even close), but I always lean towards passing data
> rather than code (or code-like things like classes) over remote method calls
> when I can :)

That's certainly feasible, but then I have an extra unserialize step
cluttering my code as the classes passed have attributes I want to access.
In general I'm passing game state which exists naturally as code, and while
I could always serialize and unserialize it, why bother if I don't have to?

Plus, isn't unserializing classes based upon their name exactly what jelly
does?

On the other hand it's debateable whether the things I'm passing _should_ be
classes at all (they represent a type of terrain, with statically accessible
fields describing their game effects).  However, the quality of my code is
really a seperate issue.

-Jasper




From exarkun at divmod.com  Tue Apr 20 20:52:50 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 21 Apr 2004 00:52:50 GMT
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
Message-ID: <20040421005250.9235.1857185041.divmod.quotient.3@ohm>

On Tue, 20 Apr 2004 17:23:56 -0400, Bob Ippolito <bob at redivi.com> wrote:
>
> [snip]
>
> 
> So because there are good reasons either way, I say we just stick with 
> the cute names -- but maybe try a little harder to market them to new 
> users.  An idea would be to have a "protocol matrix" document that is 
> easy to find from twistedmatrix.com (no more than 1 click away from the 
> front page, but it could almost be the front page) that is a table of 
> wire protocols <-> implementation names with perhaps a note about their 
> stability and completeness.
> 

  As a first pass:

 |Wire Protocol    |Impl mod(s)    |Framework mod(s)  Completeness (IMHO, 1..10)

  dict            t/p/dict.py        --               2
  dns             t/p/dns.py         t/names/         4 (pending rewrite)
  finger          t/p/finger.py      --               8
  ftp             t/p/ftp.py         --               5
  http            t/p/http.py        t/web/           7 (pending rewrite)
  ident           t/p/ident.py       --               10
  imap4           t/p/imap4.py       --               8
  irc             t/p/irc.py         t/im/, t/words/  6
  jabber          t/p/jabber/        --               not a clue
  msn             t/p/msn.py         --               not a clue
  nntp            t/p/nntp.py        t/news/          4 (pending rewrite)
  oscar           t/p/oscar.py       --               not a clue
  pop3            t/p/pop3.py        t/mail/          8 (pending Q changes)
  sip             t/p/sip.py         --               not a clue
  smtp            t/p/smtp.py        t/mail/          9
  socks v4        t/p/socks.py       --               not a clue
  xml             t/p/sux.py         --               not a clue
  telnet          t/p/telnet.py      --               4
  toc             t/p/toc.py         t/im/            not a clue

  echo,
  discard,
  chargen,
  qotd,
  who,
  daytime,
  time            t/p/wire.py        --               9

  Perspective 
    Broker        t/spread/banana.py,
                  t/spread/jelly.py,
                  t/spread/pb.py     t/spread/        8 (pending rewrite)

  ssh             t/conch/ssh/       t/conch/         9

  Btw, looking at the first two columns of this table, I think that Twisted does a kick-ass job of naming most of its modules in an understandable and approachable manner :)

  Jp



From exarkun at divmod.com  Tue Apr 20 21:06:06 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 21 Apr 2004 01:06:06 GMT
Subject: [Twisted-Python] Transporting pb.Copyable classes?
Message-ID: <20040421010606.9235.84782281.divmod.quotient.4@ohm>

On Tue, 20 Apr 2004 17:48:00 -0700 (PDT), Jasper Phillips <jasper at peak.org> wrote:
>
> On Wed, 21 Apr 2004, Andrew Bennetts wrote:
> 
> > On Tue, Apr 20, 2004 at 04:20:32PM -0700, Jasper Phillips wrote:
> > > 
> > > I've been passing around instances of pb.Copyable classes for some time,
> > > registering them via pb.setCopierForClassTree()...  However, this doesn't
> > > allow me to pass the classes themselves.
> > > 
> > > I dug around in jelly and found jelly.globalSecurity.allowInstancesOf(),
> > > which seems to do what I want, but makes me nervious as it's pretty
> > > buried...
> > > 
> > > Passing classes seems like a reasonable thing to do, but now I wonder if
> > > there is some reason that jelly doesn't allow it (except via a buried
> > > method call)?  Or is this just an accidental misfeature?
> > 
> > Why not just pass the name of the class, and unserialise that as
> > appropriate?
> > 
> > I'm not a PB expert (or even close), but I always lean towards passing data
> > rather than code (or code-like things like classes) over remote method calls
> > when I can :)
> 
> That's certainly feasible, but then I have an extra unserialize step
> cluttering my code as the classes passed have attributes I want to access.
> In general I'm passing game state which exists naturally as code, and while
> I could always serialize and unserialize it, why bother if I don't have to?
> 
> Plus, isn't unserializing classes based upon their name exactly what jelly
> does?
> 
> On the other hand it's debateable whether the things I'm passing _should_ be
> classes at all (they represent a type of terrain, with statically accessible
> fields describing their game effects).  However, the quality of my code is
> really a seperate issue.
> 

  Just to be sure I'm reading this correctly, you have something like...

    class Foo:
        bar = []

    Foo.bar.append(baz)
    someRemoteRef.callRemote('doStuff', Foo)

  where you want 'remote_doStuff' to receive a class object whose "bar" attribute is [baz] (or possibly [RemoteReference(baz)], or *something* containing baz)?  If not, disregard the rest of my post :)  Otherwise ...

  You're going to have difficulty using PB with this approach.  PB can serialize classes, but it does so in exactly the way Andrew described: it looks up their name and sends it, and the other side turns the name back into an object.  Any mutable class state you change on one side will *not* be reflected on the other side.

  I'd recommend moving your mutable state off these class objects and onto instances of some sort.  Otherwise, you will have to implement special jelliers/unjelliers for the class objects you want treated specially.

  Jp



From andrew-twisted at puzzling.org  Tue Apr 20 21:39:48 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 21 Apr 2004 11:39:48 +1000
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <Pine.LNX.4.53.0404201725001.24013@a.shell.peak.org>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
	<Pine.LNX.4.53.0404201609250.18416@a.shell.peak.org>
	<20040421001228.GA28850@frobozz>
	<Pine.LNX.4.53.0404201725001.24013@a.shell.peak.org>
Message-ID: <20040421013948.GD28850@frobozz>

On Tue, Apr 20, 2004 at 05:48:00PM -0700, Jasper Phillips wrote:
> 
> On Wed, 21 Apr 2004, Andrew Bennetts wrote:
> > 
> > I'm not a PB expert (or even close), but I always lean towards passing data
> > rather than code (or code-like things like classes) over remote method calls
> > when I can :)
> 
> That's certainly feasible, but then I have an extra unserialize step
> cluttering my code as the classes passed have attributes I want to access.
> In general I'm passing game state which exists naturally as code, and while
> I could always serialize and unserialize it, why bother if I don't have to?

That's odd, I would've expected game state to exist naturally as *data*, not
code. :)

Perhaps you should elaborate more on how you're representing things?

-Andrew.




From jasper at peak.org  Tue Apr 20 21:44:40 2004
From: jasper at peak.org (Jasper Phillips)
Date: Tue, 20 Apr 2004 18:44:40 -0700 (PDT)
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <20040421010606.9235.84782281.divmod.quotient.4@ohm>
References: <20040421010606.9235.84782281.divmod.quotient.4@ohm>
Message-ID: <Pine.LNX.4.53.0404201829120.28534@a.shell.peak.org>


On Wed, 21 Apr 2004 exarkun at divmod.com wrote:

> On Tue, 20 Apr 2004 17:48:00 -0700 (PDT), Jasper Phillips <jasper at peak.org> wrote:
> >
> > On Wed, 21 Apr 2004, Andrew Bennetts wrote:
> > 
> > > On Tue, Apr 20, 2004 at 04:20:32PM -0700, Jasper Phillips wrote:
> > > > 
> > > > I've been passing around instances of pb.Copyable classes for some
> > > > time, registering them via pb.setCopierForClassTree()...  However,
> > > > this doesn't allow me to pass the classes themselves.
> > > > 
> > > > I dug around in jelly and found
> > > > jelly.globalSecurity.allowInstancesOf(), which seems to do what I
> > > > want, but makes me nervious as it's pretty buried...
> > > > 
> > > > Passing classes seems like a reasonable thing to do, but now I
> > > > wonder if there is some reason that jelly doesn't allow it (except
> > > > via a buried method call)?  Or is this just an accidental
> > > > misfeature?
> > > 
> > > Why not just pass the name of the class, and unserialise that as
> > > appropriate?
> > > 
> > > I'm not a PB expert (or even close), but I always lean towards passing
> > > data rather than code (or code-like things like classes) over remote
> > > method calls when I can :)
> > 
> > That's certainly feasible, but then I have an extra unserialize step
> > cluttering my code as the classes passed have attributes I want to access.
> > In general I'm passing game state which exists naturally as code, and while
> > I could always serialize and unserialize it, why bother if I don't have to?
> > 
> > Plus, isn't unserializing classes based upon their name exactly what jelly
> > does?
> > 
> > On the other hand it's debateable whether the things I'm passing
> > _should_ be classes at all (they represent a type of terrain, with
> > statically accessible fields describing their game effects).  However,
> > the quality of my code is really a seperate issue.
> > 
> 
>   Just to be sure I'm reading this correctly, you have something like...
> 
>     class Foo:
>         bar = []
> 
>     Foo.bar.append(baz)
>     someRemoteRef.callRemote('doStuff', Foo)
> 
>   where you want 'remote_doStuff' to receive a class object whose "bar"
>   attribute is [baz] (or possibly [RemoteReference(baz)], or *something*
>   containing baz)?  If not, disregard the rest of my post :)  Otherwise
>   ...

Oh no, no mutable state!  Purely static data and static methods.
What I have coils down to something like this:

class Terrain( pb.Copyable, pb.RemoteCopy ):
    def moveCost( cls, unit ):
        return cls.cost
    moveCost = classmethod( moveCost )

class Mountains( Terrain ):
    cost = 6


A bunch of hexes then have their .terrain = Mountains (etc.)  I could easily
change this to instantiation the various Terrains, but in my mind that
implies that an instance's state could differ.  I'm beginning to think
the distinction is more trouble than it's worth however, and potentially
confusing.

>   You're going to have difficulty using PB with this approach.  PB can
>   serialize classes, but it does so in exactly the way Andrew described:
>   it looks up their name and sends it, and the other side turns the name
>   back into an object.  Any mutable class state you change on one side
>   will *not* be reflected on the other side.

This is exactly what I want for these classes.

>   I'd recommend moving your mutable state off these class objects and onto
>   instances of some sort.  Otherwise, you will have to implement special
>   jelliers/unjelliers for the class objects you want treated specially.

Sorry for the confusion!  I really didn't mean to bring my code into the
discussion, I just want to know whether passing class objects is supposed to
work, because it doesn't for me (i.e. I get Insecure Jelly exceptions)
without tweaking inner bits of Twisted.

-Jasper




From jasper at peak.org  Tue Apr 20 22:09:32 2004
From: jasper at peak.org (Jasper Phillips)
Date: Tue, 20 Apr 2004 19:09:32 -0700 (PDT)
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <20040421013948.GD28850@frobozz>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
	<Pine.LNX.4.53.0404201609250.18416@a.shell.peak.org>
	<20040421001228.GA28850@frobozz>
	<Pine.LNX.4.53.0404201725001.24013@a.shell.peak.org>
	<20040421013948.GD28850@frobozz>
Message-ID: <Pine.LNX.4.53.0404201853030.30226@a.shell.peak.org>


On Wed, 21 Apr 2004, Andrew Bennetts wrote:

> On Tue, Apr 20, 2004 at 05:48:00PM -0700, Jasper Phillips wrote:
> > 
> > That's certainly feasible, but then I have an extra unserialize step
> > cluttering my code as the classes passed have attributes I want to access.
> > In general I'm passing game state which exists naturally as code, and while
> > I could always serialize and unserialize it, why bother if I don't have to?
> 
> That's odd, I would've expected game state to exist naturally as *data*, not
> code. :)

I don't think the distinction between code and data is necesarrily so
clear...  Basically my point was that I wasn't interested in something like
XML RPC, and would rather treat remotely passed objects as if they were
local to the extent possible.

Using `Terrain.moveCost` instead of `unserialize("Terrain").moveCost` seems
good to me.

> Perhaps you should elaborate more on how you're representing things?

Ok.  I'm perfectly happy to get a critique of my design out of this if I
can! ;-)  I'll try to keep it concise.

I have a dictionary of hexes keyed by their grid location.

map.cells = {(1,1):hexCellInstance, ...}

Each of these cells has a .terrain, which is a reference to a Terrain
subclass.  These have static data and methods, for use by various game
algorithms, e.g. how far can unit Foo move through Mountains.

On each turn a (filtered) version of this state is passed to game clients,
so that they can view it, validate their orders against it, etc.


-Jasper

PS I'm off to watch a movie, so won't be able to respond further until
later tonight.



From ellers at ellerton.net  Thu Apr 15 08:58:41 2004
From: ellers at ellerton.net (Ellers)
Date: Thu, 15 Apr 2004 12:58:41 -0000
Subject: [Twisted-Python] twisted and interactive/command driven input
Message-ID: <20040415125845.32C6115C0C@mail03.powweb.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040415/5a19d8aa/attachment.txt 

From y at tim.suzman.net  Tue Apr 20 19:11:34 2004
From: y at tim.suzman.net (Tim)
Date: Tue, 20 Apr 2004 19:11:34 -0400
Subject: [Twisted-Python] connection to AIM often unsuccessful using
	twisted's example AIM bot
Message-ID: <E1BG4Oo-00074h-F9@python.dns-nac-zone.com>

 

I am running the very simple example aimbot given by twisted. The code can
be found at http://twistedmatrix.com/documents/current/examples/aimbot.py

 

Sometimes when I run the script it connects successfully. The majority of
the time, however, it times out and I get this: 

 

C:\progra~1\Python23\lib\site-packages\twisted\internet\base.py:516:
Deprecation Warning: connectionFailed is deprecated. See new Client API 

 self.protocol.connectionFailed()

 

I usually get this message every time I try to connect, except for brief
periods of time (usually 10 minutes at most) during which I can connect
reliably.

 

Anyone know what's going on? Any way I can fix this problem? Thank you!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040420/ce714aa5/attachment.htm 

From dreid at dreid.org  Tue Apr 20 22:35:32 2004
From: dreid at dreid.org (David Reid)
Date: Tue, 20 Apr 2004 19:35:32 -0700
Subject: [Twisted-Python] Re: [Fwd: Re: Sub-project Naming]
In-Reply-To: <1082505951.21900.7.camel@petra>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>  <20040420215359.GA8410@thorne.id.au>
	<1082501879.25375.26.camel@hyla>  <1082505951.21900.7.camel@petra>
Message-ID: <1082514932.2806.9.camel@localhost>

On Tue, 2004-04-20 at 17:06, Paul Swartz wrote:
> On Tue, 2004-04-20 at 18:57, Alex Levy wrote:
> > On Tue, 2004-04-20 at 17:53, Stephen Thorne wrote:
> > > +1 on tmlabs.<sane-name>
> > 
> > +1 for me on tmlabs.<whatever-its-called-now>
> 
> +1 on tmlabs.<same-names-i-like-calling-it-conch>
> 
> -p

I'd be happy for a compromise of installing the new twisted.web (which I
like calling Unwound) as tmlabs.web.

But frankly, I find it a pain in the butt to have to refer to things by
python module name when discussing them.  In the past I've had to get
sidetracked by explaining twisted to people when trying to talk about
twisted.web.  If I had to explain tmlabs.web I'd have to explain that
tmlabs is a seperate name space for non twisted core subprojects THEN
explain what the heck twisted is.  

I think having a short simple, and indeed clever or catchy product name
is much easier.  I like the sound of jelly,banana,pb,lowdown,unwound
because if I have to explain what they are, they're atleast something
that people will remember, and indeed are google friendly.

Not to mention the fact that Open Source (not just Twisted) has a great
history of clever names, Apache is a-patchy webserver because it started
out as a bunch of patches, Linux was originally going to be called
Freenix by Linus, which might be descriptive as it is a Free Unix, but
not nearly as interesting.  I think the only real concern with choosing
names for twisted subprojects is not picking something that we'll be
forced to change every couple of months.

On another note Unwound seems to be free from any software product
naming conflicts, and I think it is very descriptive as a "rewrite of
twisted.web"

--David




From exarkun at divmod.com  Tue Apr 20 22:44:57 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 21 Apr 2004 02:44:57 GMT
Subject: [Twisted-Python] twisted and interactive/command driven input
Message-ID: <20040421024457.9235.1335740979.divmod.quotient.5@ohm>

On Thu, 15 Apr 2004 12:58:41 -0000, "Ellers" <ellers at ellerton.net> wrote:
>
> [snip]
> 
> I've got a basic interactive shell going on its own no probs, 
> and as mentioned I've got a separate basic twisted client going 
> too.
> 
> Can anyone point me at examples or tips on how to use twisted 
> for handling the socket comms and still allow interactivity 
> with the user?
> 

  An example of handling stdin input asynchronously is available here:

    http://svn.twistedmatrix.com/cvs/trunk/doc/examples/stdin.py?view=markup&rev=9701&root=Twisted

  It does not demonstrate how to combine handling stdin input and dealing with sockets, but since nothing special is required for that combination, it should get you going in the right direction.

  Jp



From anthony at interlink.com.au  Wed Apr 21 01:18:19 2004
From: anthony at interlink.com.au (Anthony Baxter)
Date: Wed, 21 Apr 2004 15:18:19 +1000
Subject: [Twisted-Python] http://www.smartpeer.com -- another twisted
	success story
Message-ID: <4086041B.2030808@interlink.com.au>

So Michael Marmor has released a Morphix derivative (a bootable
CD version of Linux) that just includes PythonDirector, making the
machine a TCP loadbalancer in a box. PythonDirector is of course
based on Twisted.

I think this is pretty cool, and could be good for the twisted
success stories page. See http://www.smartpeer.com/ for the software.

(ObDisclaimer: while I wrote PythonDirector, I've not had anything
to do with SmartPeer other than offering advice and encouraging
words)

Anthony
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From sam at SpinwardStars.com  Wed Apr 21 11:54:03 2004
From: sam at SpinwardStars.com (Samuel Reynolds)
Date: Wed, 21 Apr 2004 09:54:03 -0600
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <Pine.LNX.4.53.0404201829120.28534@a.shell.peak.org>
References: <20040421010606.9235.84782281.divmod.quotient.4@ohm>
	<Pine.LNX.4.53.0404201829120.28534@a.shell.peak.org>
Message-ID: <6.0.1.1.0.20040421094151.04425c80@pop.mindspring.com>

At 2004-04-20 06:44 PM -0700, you wrote:
>Oh no, no mutable state!  Purely static data and static methods.
>What I have coils down to something like this:
>
>class Terrain( pb.Copyable, pb.RemoteCopy ):
>     def moveCost( cls, unit ):
>         return cls.cost
>     moveCost = classmethod( moveCost )
>
>class Mountains( Terrain ):
>     cost = 6
>
>
>A bunch of hexes then have their .terrain = Mountains (etc.)  I could easily
>change this to instantiation the various Terrains, but in my mind that
>implies that an instance's state could differ.  I'm beginning to think
>the distinction is more trouble than it's worth however, and potentially
>confusing.
...and...
>I have a dictionary of hexes keyed by their grid location.
>
>map.cells = {(1,1):hexCellInstance, ...}
>
>Each of these cells has a .terrain, which is a reference to a Terrain
>subclass.  These have static data and methods, for use by various game
>algorithms, e.g. how far can unit Foo move through Mountains.
>
>On each turn a (filtered) version of this state is passed to game clients,
>so that they can view it, validate their orders against it, etc.

How about making Mountains, Plains, etc. Singletons?
Then, instead of assigning hexCellInstance.terrain=Mountain,
you assign hexCellInstance.terrain=Mountain() (note the
parentheses!). At that point, each cell.terrain is an object
reference instead of a class reference and (IIUC) should
remote-copy properly.

Caveat: I've not used pb; this is based on my *very* weak
understanding (misunderstanding?) of it. In particular,
I don't know how pb/copyable would interact with a singleton.
I would *expect* that the remote unserialization would
(eventually) invoke Mountains.__call__ and get a reference
to the corresponding singleton on the client side.

class Singleton(type):
     def __init__( cls, name, bases, classdict ):
         super( Singleton, cls ).__init__( name, bases, classdict )
         cls.instance = None
     def __call__( cls, *args, **kw ):
         if cls.instance is None:
             cls.instance = super( Singleton, cls ).__call__( *args, **kw )
         return cls.instance

class Mountains( Terrain ):
     __metaclass__ = Singleton
     cost = 6

- Sam


__________________________________________________________
Spinward Stars, LLC                        Samuel Reynolds
Software Consulting and Development           303-805-1446
http://SpinwardStars.com/            sam at SpinwardStars.com 





From jasper at peak.org  Wed Apr 21 12:57:47 2004
From: jasper at peak.org (Jasper Phillips)
Date: Wed, 21 Apr 2004 09:57:47 -0700 (PDT)
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <6.0.1.1.0.20040421094151.04425c80@pop.mindspring.com>
References: <20040421010606.9235.84782281.divmod.quotient.4@ohm>
	<Pine.LNX.4.53.0404201829120.28534@a.shell.peak.org>
	<6.0.1.1.0.20040421094151.04425c80@pop.mindspring.com>
Message-ID: <Pine.LNX.4.53.0404210934330.26825@a.shell.peak.org>


On Wed, 21 Apr 2004, Samuel Reynolds wrote:

> At 2004-04-20 06:44 PM -0700, you wrote:
[snip: my description of static classes used for Terrain]

> How about making Mountains, Plains, etc. Singletons?
> Then, instead of assigning hexCellInstance.terrain=Mountain,
> you assign hexCellInstance.terrain=Mountain() (note the
> parentheses!). At that point, each cell.terrain is an object
> reference instead of a class reference and (IIUC) should
> remote-copy properly.

I have considered Singletons, but don't see what advantage they provide.
They basically do the same thing as static classes in this case, except with
more code and IMHO less transparency.  Perhaps if these Terrain classes had
some mutable state, but they don't.

> Caveat: I've not used pb; this is based on my *very* weak
> understanding (misunderstanding?) of it. In particular,
> I don't know how pb/copyable would interact with a singleton.
> I would *expect* that the remote unserialization would
> (eventually) invoke Mountains.__call__ and get a reference
> to the corresponding singleton on the client side.

I suspect singletons might have some trouble with jelly, unless it has some
wacky special case for realizing a passed singleton instance should be
equivalent to the corresponding remote singleton instance, which may or may
not already exist.


All this seems to me like frantic contortion to avoid a bug in jelly.
Shouldn't it be able to translate passed class objects into the remote
version, provided they have been properly registered?  Is there some reason
why not that I am missing?

I appreciate the code suggestions, but basicaly I just want to know whether
this is expected behavior, or whether I should post a demonstrative test
case and suggest a fix.

-Jasper




From exarkun at divmod.com  Wed Apr 21 14:53:37 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 21 Apr 2004 18:53:37 GMT
Subject: [Twisted-Python] Transporting pb.Copyable classes?
Message-ID: <20040421185337.9235.1895087205.divmod.quotient.13@ohm>

On Wed, 21 Apr 2004 09:57:47 -0700 (PDT), Jasper Phillips <jasper at peak.org> wrote:
>
> [snip]
> 
> 
> All this seems to me like frantic contortion to avoid a bug in jelly.
> Shouldn't it be able to translate passed class objects into the remote
> version, provided they have been properly registered?  Is there some reason
> why not that I am missing?

  Indeed.  While I would do this differently, jelly should certainly be able to handle your approach.  Let's get into specifics, shall we?  Here's some code:

>>> from twisted.spread import jelly
>>> class Foo: pass
... 
>>> f = Foo()
>>> f.bar = Foo
>>> jelly.jelly(f)
['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]

  So far, so good.

>>> from twisted.spread import pb     
>>> class Foo(pb.Copyable):
...     pass
... 
>>> f = Foo()
>>> f.bar = Foo
>>> jelly.jelly(f)
['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]

  Hmm, that works too.  I expected it not to, actually.  I suppose something you're doing with globalSecurity or setCopierForClassTree() may be mucking things up.

> 
> I appreciate the code suggestions, but basicaly I just want to know whether
> this is expected behavior, or whether I should post a demonstrative test
> case and suggest a fix.

  Posting a demonstrative test case would be excellent :)  I suspect there is no bug in jelly, just a disagreement in expectations which can easily be resolved once there is a concrete example to talk about.

  Jp



From jasper at peak.org  Wed Apr 21 17:03:47 2004
From: jasper at peak.org (Jasper Phillips)
Date: Wed, 21 Apr 2004 14:03:47 -0700 (PDT)
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <20040421185337.9235.1895087205.divmod.quotient.13@ohm>
References: <20040421185337.9235.1895087205.divmod.quotient.13@ohm>
Message-ID: <Pine.LNX.4.53.0404211301540.9678@a.shell.peak.org>


On Wed, 21 Apr 2004 exarkun at divmod.com wrote:

> On Wed, 21 Apr 2004 09:57:47 -0700 (PDT), Jasper Phillips <jasper at peak.org> wrote:
> > 
> > All this seems to me like frantic contortion to avoid a bug in jelly.
> > Shouldn't it be able to translate passed class objects into the remote
> > version, provided they have been properly registered?  Is there some reason
> > why not that I am missing?
> 
>   Indeed.  While I would do this differently, jelly should certainly be
>   able to handle your approach.  Let's get into specifics, shall we?
>   Here's some code:

I may end up doing it differently, but one thing at a time!  I'm in the
midst of upgrading to new cred, and already have plenty of scope with which
to hang myself. ;-)

I'm not particularily attached to the static class approach, it just
happened to be what came to mind when prototyping.  I'm definitely curious
now what you would do...  I've been programming in a vacuum for quite a
while. :-(


> >>> from twisted.spread import jelly
> >>> class Foo: pass
> ... 
> >>> f = Foo()
> >>> f.bar = Foo
> >>> jelly.jelly(f)
> ['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]
> 
>   So far, so good.
> 
> >>> from twisted.spread import pb     
> >>> class Foo(pb.Copyable):
> ...     pass
> ... 
> >>> f = Foo()
> >>> f.bar = Foo
> >>> jelly.jelly(f)
> ['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]
> 
>   Hmm, that works too.  I expected it not to, actually.  I suppose
>   something you're doing with globalSecurity or setCopierForClassTree()
>   may be mucking things up.

This test case doesn't seem quite right...  Why doesn't it fail since Foo
hasn't been registered?  Hmmm, looks like jelly()'s taster arg defaults to
DummySecurityOptions()...

What about registering Foo, and then calling with jelly.globalSecurity?:
---- Code ----
from twisted.spread import jelly, pb

class Foo( pb.Copyable ):  pass
jelly.setUnjellyableForClass( Foo, Foo )
#jelly.globalSecurity.allowInstancesOf( Foo )  # uncomment to fix

if __name__ == '__main__':
    f = Foo()
    f.bar = Foo
    print jelly.jelly( f, taster=jelly.globalSecurity )

---- End Code ----

This gives the Insecure Jelly exception I'm seeing, from jelly.py:482...
However, comment out `f.bar = Foo` or uncomment allowInstancesOf() and it
works.

Oh, and I'm using twisted 1.2 and python 2.3.3.


[snip]
>   Posting a demonstrative test case would be excellent :)  I suspect there
>   is no bug in jelly, just a disagreement in expectations which can easily
>   be resolved once there is a concrete example to talk about.

Is this a decent example?  As for a fix, it looks like the solution is there
in SecurityOptions.allowsInstancesOf(), but that it's just not exposed.

-Jasper




From dreid at dreid.org  Thu Apr 22 06:56:47 2004
From: dreid at dreid.org (David Reid)
Date: Thu, 22 Apr 2004 03:56:47 -0700
Subject: [Twisted-Python] Unwinding the Twisted Web (a progress report)
Message-ID: <1082631407.28634.20.camel@localhost>

I had been trying to straighten out the model for the split since my
first post to twisted-web regarding it.  Now that radix, and exarkun
have split twisted.news out of the core codebase as "lowdown". Since
then I have begun work on my own source tree of twisted.web, the module
has been split as "unwound" which is my proposed name as mentioned in
the numerous naming threads (to be installed as tmlabs.unwound if
desired.)  

So far I've done the following:

 * duplicate the source tree renaming the toplevel module and changing
the imports accordingly.

 * run the tests (everything passes just as it does in twisted.web)

 * removed modules that were deprecated BY woven, and added a
Deprecation Warning message to unwound.woven.__init__

If there are no complaints about this I'm asking someone (like radix) to
help me complete the rest of the steps necessary to make this the
official split so i can start working on changes and enhancements.  The
things I can't do on my own, atleast not as part of twistedmatrix.com is
setup the SVN repo and the project page.  

Also it appears if radix and exarkun did not solve (or atleast did not
implmenet a solution for) the tap naming conflicts.  I.E. if lowdown or
tmlabs.lowdown is going to use mktap news or mktap lowdown instead.

Other than that, Unwound is currently a useable tree of twisted.web At
revision 10601.

(I'm open to changing the name to either tmlabs.web or some cute/catchy
name other than 'unwound', but ultimately I think that is a policy
decision that falls on the core twisted devs.)

--
David Reid
Claim to fame: "I actually wrote code that used twisted.web.webwidgets!"




From itamar at itamarst.org  Thu Apr 22 11:21:46 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 22 Apr 2004 11:21:46 -0400
Subject: [Twisted-Python] Unwinding the Twisted Web (a progress report)
In-Reply-To: <1082631407.28634.20.camel@localhost>
References: <1082631407.28634.20.camel@localhost>
Message-ID: <1082647306.27964.10.camel@sheriffpony>

On Thu, 2004-04-22 at 06:56, David Reid wrote:

> So far I've done the following:
> 
>  * duplicate the source tree renaming the toplevel module and changing
> the imports accordingly.

>From what I've gathered from talking to Donovan and James this is *not*
how the new twisted.web version is going to be developed. Donovan said
he'd write out a roadmap for the mailing list after talking it over.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From jn at who.net  Thu Apr 22 11:46:30 2004
From: jn at who.net (john nielsen)
Date: Thu, 22 Apr 2004 10:46:30 -0500
Subject: [Twisted-Python] how to have a server talk to a server
Message-ID: <20040422154630.2989779004F@ws1-14.us4.outblaze.com>

I see some examples where you have  a client call pb.PBClientFactory to talk to a server which called pb.PBServerFactory.

What if you have 2 servers (both running pb.PBServerFactory) that accept clients and also want to talk to each other? Would the first server  also make a pb.PBClientFactory to talk to the second server (seems like you would have to be careful to not leak descriptors since the reactor would never close).

There's probably a standard way to do it, that I just missed.

Thanks for any help,

john

-- 
___________________________________________________________
Sign-up for Ads Free at Mail.com
http://promo.mail.com/adsfreejump.htm




From teratorn at world-net.net  Thu Apr 22 13:38:55 2004
From: teratorn at world-net.net (Eric Mangold)
Date: Thu, 22 Apr 2004 11:38:55 -0600
Subject: [Twisted-Python] Re: how to have a server talk to a server
In-Reply-To: <20040422154630.2989779004F@ws1-14.us4.outblaze.com>
References: <20040422154630.2989779004F@ws1-14.us4.outblaze.com>
Message-ID: <opr6vcm5nfi4eeqj@mail.oaktech.net>

On Thu, 22 Apr 2004 10:46:30 -0500, john nielsen <jn at who.net> wrote:

> I see some examples where you have  a client call pb.PBClientFactory to 
> talk to a server which called pb.PBServerFactory.
>
> What if you have 2 servers (both running pb.PBServerFactory) that accept 
> clients and also want to talk to each other? Would the first server  
> also make a pb.PBClientFactory to talk to the second server

Yes.

> (seems like you would have to be careful to not leak descriptors since 
> the reactor would never close).

Not sure what you mean by that.

	-Eric





From itamar at itamarst.org  Thu Apr 22 19:04:47 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 22 Apr 2004 19:04:47 -0400
Subject: [Twisted-Python] IFoo(x, persist=1)
Message-ID: <1082675086.27964.59.camel@sheriffpony>

I know this is used a lot (the weakref persistence stuff). Should it be
option of adaptation or perhaps of adapter registration? Trying to see
how to fit this in to zope3's, which doesn't do this, and it'd be nice
to have it as part of their core code rather than ours.
 
-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From radix at twistedmatrix.com  Thu Apr 22 19:35:08 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 22 Apr 2004 19:35:08 -0400
Subject: [Twisted-Python] IFoo(x, persist=1)
In-Reply-To: <1082675086.27964.59.camel@sheriffpony>
References: <1082675086.27964.59.camel@sheriffpony>
Message-ID: <408856AC.8020309@twistedmatrix.com>

Itamar Shtull-Trauring wrote:
> I know this is used a lot (the weakref persistence stuff). Should it be
> option of adaptation or perhaps of adapter registration? Trying to see
> how to fit this in to zope3's, which doesn't do this, and it'd be nice
> to have it as part of their core code rather than ours.

It seems a lot saner to make it a part of registration than adaptation. 
The 'persist' argument to __call__ never made sense to me. Think about a 
what the objects involved "know": if an object knows that it wants an 
adapter and it wants it to persist, it can just keep a reference to the 
adapter it gets back.

OTOH, we don't currently support marking an adapter persistent at 
registration time, do we? I say don't add features that don't have clear 
use cases yet.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040422/cc416654/attachment.pgp 

From foom at fuhm.net  Thu Apr 22 19:39:10 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu, 22 Apr 2004 19:39:10 -0400
Subject: [Twisted-Python] IFoo(x, persist=1)
In-Reply-To: <1082675086.27964.59.camel@sheriffpony>
References: <1082675086.27964.59.camel@sheriffpony>
Message-ID: <4155CCF9-94B6-11D8-8D82-000A95A50FB2@fuhm.net>

On Apr 22, 2004, at 7:04 PM, Itamar Shtull-Trauring wrote:
> I know this is used a lot (the weakref persistence stuff). Should it be
> option of adaptation or perhaps of adapter registration? Trying to see
> how to fit this in to zope3's, which doesn't do this, and it'd be nice
> to have it as part of their core code rather than ours.

I'm not sure about 'used a lot', looks more like "used a bit". In any 
case, I don't know much about Zope3 interfaces but in PyProtocols you 
could implement a 'persist' functionality by registering a null 
adaptation from the 'original' instance to the 'persisted' adapter 
instance. And that could be controlled by the adapter itself (its 
__init__ could register the new adaptation on 'original') which makes 
more sense) or the caller.

That of course doesn't act exactly the same as it doesn't have the 
weirdo persist=None vs persist=False behavior. Does anyone actually 
depend on that? The current persist argument API is completely bogus so 
I don't think it's a good idea to hack up Zope3's code just for 
backwards compatibility with our broken API.

James




From itamar at itamarst.org  Thu Apr 22 19:42:50 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 22 Apr 2004 19:42:50 -0400
Subject: [Twisted-Python] IFoo(x, persist=1)
In-Reply-To: <4155CCF9-94B6-11D8-8D82-000A95A50FB2@fuhm.net>
References: <1082675086.27964.59.camel@sheriffpony>
	<4155CCF9-94B6-11D8-8D82-000A95A50FB2@fuhm.net>
Message-ID: <1082677369.27964.62.camel@sheriffpony>

On Thu, 2004-04-22 at 19:39, James Y Knight wrote:

> I'm not sure about 'used a lot', looks more like "used a bit".

OK. Can anyone describe or point at some of these use cases? 

> That of course doesn't act exactly the same as it doesn't have the 
> weirdo persist=None vs persist=False behavior. Does anyone actually 
> depend on that? The current persist argument API is completely bogus so 
> I don't think it's a good idea to hack up Zope3's code just for 
> backwards compatibility with our broken API.

Oh, I wouldn't do *that*. But weakref persistence of adapters is a
useful idea, and I'm going to have to have a backwards compat layer
anyway. Question is what parts of it *are* useful and if so what API
they should have.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From dizzyd at jabber.org  Thu Apr 22 23:14:57 2004
From: dizzyd at jabber.org (Dave Smith)
Date: Thu, 22 Apr 2004 21:14:57 -0600
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082488803.2913.163.camel@debian>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<1082488803.2913.163.camel@debian>
Message-ID: <660B7B08-94D4-11D8-967C-00039386381C@jabber.org>


On Apr 20, 2004, at 1:20 PM, Matt Goodall wrote:

> I recently used xish.xpath instead of libxml's xpath in a Nevow example
> to avoid introducing the external dependency. I knew xish would be
> available to anyone interested in the example ... or so I thought ;-).
> The xish.xpath implementation is lacking a few useful bits of the xpath
> spec but other than that it's useful.

I'm working on adding the final bits of useful xpath functionality 
(added // support the other nite), and would be willing to 
have/maintain xish as it's own subproject. I just have to figure out 
what exactly that means... :)

D.




From uwe at oss4u.com  Fri Apr 23 02:13:21 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Thu, 22 Apr 2004 22:13:21 -0800
Subject: [Twisted-Python] PB and hashed passwords
Message-ID: <200404222313.22035.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Hi,

just found something in pb (twisted version 1.2.0) that's a bit strange.
I've written a credentials checker and set

self.credentialInterfaces = (credentials.IUsernamePassword,)

So far, so good. However the following error is thrown:

No checker for twisted.cred.credentials.IUsernameHashedPassword, 
twisted.cred.credentials.ICredentials, twisted.spread.pb.IUsernameMD5Password


I traced it back to pb._PortalAuthChallenger

It only implements hashed and md5 passwords. Maybe I don't get it, but where 
is the sense in sending a password in cleartext over the wire to then md5 it 
on the "server" side ?
I'd rather md5 it on the client side and send the hash to be compared against 
the password storage, which also stores a md5.
I tried to do this by using plaintext passwords, since the routines then 
simply compare without md5'ing it, but it doesn't seem to be possible to use 
plaintext with pb without changing something. Can I user-define a class to 
jump in there ?

Any enlightenment is appreciated.

THX

	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFAiLQBjqGXBvRToM4RAubrAJ44hBC+PYbcBgiWivFowWjpaEWtaACgnaBV
vvfUvfSiBfpJhhifqmvhJfo=
=Byjg
-----END PGP SIGNATURE-----




From golux at comcast.net  Fri Apr 23 02:19:46 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 23 Apr 2004 02:19:46 -0400
Subject: [Twisted-Python] PB and hashed passwords
In-Reply-To: <200404222313.22035.uwe@oss4u.com>
References: <200404222313.22035.uwe@oss4u.com>
Message-ID: <4088B582.8050707@comcast.net>

Uwe C. Schroeder wrote:

> .... Maybe I don't get it, but where 
> is the sense in sending a password in cleartext over the wire to then md5 it 
> on the "server" side ?
> I'd rather md5 it on the client side and send the hash to be compared against 
> the password storage, which also stores a md5.

That wouldn't make sense:  if you send the passwd as md5 hash
to be compared against itself stored as md5 hash, it's the
same as sending the passwd cleartext, since you are effectively
using the md5 hashed passwd *as* the passwd (and if anyone
intercepts it they can use it directly to get access).

The point of storing it on the server side as an md5 hash
is that even if someone breaks in and steals the md5 hash
of the passwd, they can't reverse the hash to get the
cleartext passwd, and so they can't get in (since the
checker checks the cleartext passwd [which came in over
an encrypted channel] against the md5 hash).

Clear as mud?  :)

- Steve



From golux at comcast.net  Fri Apr 23 02:25:25 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 23 Apr 2004 02:25:25 -0400
Subject: [Twisted-Python] PB and hashed passwords
In-Reply-To: <4088B582.8050707@comcast.net>
References: <200404222313.22035.uwe@oss4u.com> <4088B582.8050707@comcast.net>
Message-ID: <4088B6D5.2030304@comcast.net>

Stephen Waterbury wrote:

> The point of storing it on the server side as an md5 hash
> is that even if someone breaks in and steals the md5 hash
> of the passwd, they can't reverse the hash to get the
> cleartext passwd, and so they can't get in (since the
> checker checks the cleartext passwd [which came in over
> an encrypted channel] against the md5 hash).

The bottom line:  md5 hashes are not a substitute
for an encrypted channel (e.g. SSL);  they are only
useful for encrypted storage and digital signatures.
(At least that's my understanding. :)

- Steve



From uwe at oss4u.com  Fri Apr 23 03:06:10 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Thu, 22 Apr 2004 23:06:10 -0800
Subject: [Twisted-Python] PB and hashed passwords
In-Reply-To: <4088B582.8050707@comcast.net>
References: <200404222313.22035.uwe@oss4u.com> <4088B582.8050707@comcast.net>
Message-ID: <200404230006.10859.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 22 April 2004 11:19 pm, Stephen Waterbury wrote:
> Uwe C. Schroeder wrote:
> > .... Maybe I don't get it, but where
> > is the sense in sending a password in cleartext over the wire to then md5
> > it on the "server" side ?
> > I'd rather md5 it on the client side and send the hash to be compared
> > against the password storage, which also stores a md5.
>
> That wouldn't make sense:  if you send the passwd as md5 hash
> to be compared against itself stored as md5 hash, it's the
> same as sending the passwd cleartext, since you are effectively
> using the md5 hashed passwd *as* the passwd (and if anyone
> intercepts it they can use it directly to get access).

You got a point there, however assume you have a snooper in between, a md5 
hash is much less suspicious/easy to filter

> The point of storing it on the server side as an md5 hash
> is that even if someone breaks in and steals the md5 hash
> of the passwd, they can't reverse the hash to get the
> cleartext passwd, and so they can't get in (since the
> checker checks the cleartext passwd [which came in over
> an encrypted channel] against the md5 hash).

Would be nice to have ssh with pb :-) Has anyone written that yet ? (don't ask 
me to volunteer, i've got deadlines up to my neck)

	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFAiMBijqGXBvRToM4RAiBoAKCZPEONdSOh0hy4j2RlztvHSYtVewCg0UXF
wSB46b/ccmKNkAv+Tf9f8+E=
=Cf9A
-----END PGP SIGNATURE-----




From golux at comcast.net  Fri Apr 23 03:19:15 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 23 Apr 2004 03:19:15 -0400
Subject: [Twisted-Python] PB and hashed passwords
In-Reply-To: <200404230006.10859.uwe@oss4u.com>
References: <200404222313.22035.uwe@oss4u.com> <4088B582.8050707@comcast.net>
	<200404230006.10859.uwe@oss4u.com>
Message-ID: <4088C373.9030505@comcast.net>

Uwe C. Schroeder wrote:

> Would be nice to have ssh with pb :-) Has anyone written that yet ? (don't ask 
> me to volunteer, i've got deadlines up to my neck)

I'm sure it could be done, but you could also just use
SSL.  There was a long thread about PB over SSL on the
list on 4-5 August 2003.



From justinjohnson at fastmail.fm  Fri Apr 23 08:49:16 2004
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 23 Apr 2004 07:49:16 -0500
Subject: [Twisted-Python] PB and hashed passwords
In-Reply-To: <4088C373.9030505@comcast.net>
References: <200404222313.22035.uwe@oss4u.com> <4088B582.8050707@comcast.net>
	<200404230006.10859.uwe@oss4u.com> <4088C373.9030505@comcast.net>
Message-ID: <1082724556.23124.184982173@webmail.messagingengine.com>

I got PB over SSL working by installing OpenSSL and pyOpenSSL, generating
my own pem by following the instructions at
http://tirian.magd.ox.ac.uk/~nick/openssl-certs/personal.shtml#apache-keys,
and adding the following code on the server-side.


from twisted.internet.ssl import DefaultOpenSSLContextFactory
from OpenSSL.SSL import SSLv23_METHOD

cf = os.path.join(sibpath(__file__, 'ssl'), 'ratcontrol.pem')
pf =  os.path.join(sibpath(__file__, 'ssl'), 'ratcontrol.pem')
sslFactory = DefaultOpenSSLContextFactory(cf, pf, SSLv23_METHOD)

[....]

    #svc = internet.TCPServer(config['pbport'], factory)
    svc = internet.SSLServer(config['pbport'], factory,
    contextFactory=sslFactory)


On the client-side I added the following.

from twisted.internet import ssl

[....]

    #reactor.connectTCP(server, config.pbPortNumber, factory)
    reactor.connectSSL(server, config.pbPortNumber, factory,
    ssl.ClientContextFactory())


Of course I can't get any of this to work on Windows because there isn't
any reactor that supports SSL and spawnProcess.  :-(

-Justin

On Fri, 23 Apr 2004 03:19:15 -0400, "Stephen Waterbury"
<golux at comcast.net> said:
> Uwe C. Schroeder wrote:
> 
> > Would be nice to have ssh with pb :-) Has anyone written that yet ? (don't ask 
> > me to volunteer, i've got deadlines up to my neck)
> 
> I'm sure it could be done, but you could also just use
> SSL.  There was a long thread about PB over SSL on the
> list on 4-5 August 2003.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at divmod.com  Fri Apr 23 09:24:40 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 23 Apr 2004 09:24:40 -0400
Subject: [Twisted-Python] PB and hashed passwords
In-Reply-To: <200404222313.22035.uwe@oss4u.com>
References: <200404222313.22035.uwe@oss4u.com>
Message-ID: <40891918.2020703@divmod.com>

Uwe C. Schroeder wrote:

>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>
>Hi,
>
>just found something in pb (twisted version 1.2.0) that's a bit strange.
>I've written a credentials checker and set
>
>self.credentialInterfaces =3D (credentials.IUsernamePassword,)
>
>So far, so good.
>
  Mmm, no.  twisted.spread.pb.PBClientFactory.login() does not support =

arbitrary credentials objects.  It may in the future, but currently it =

only provides equivalent functionality to the previous, deprecated API.

> However the following error is thrown:
>
>No checker for twisted.cred.credentials.IUsernameHashedPassword, =

>twisted.cred.credentials.ICredentials, twisted.spread.pb.IUsernameMD5Passw=
ord
>
  Indeed, as IUsernamePassword is not IUsernameHashedPassword.

>I traced it back to pb._PortalAuthChallenger
>
>It only implements hashed and md5 passwords. Maybe I don't get it, but whe=
re =

>is the sense in sending a password in cleartext over the wire to then md5 =
it =

>on the "server" side ?
>  =

>
  PB does not send the password in cleartext over the wire and then MD5 =

it on the server!  That would be senseless :)

>I'd rather md5 it on the client side and send the hash to be compared agai=
nst =

>the password storage, which also stores a md5.
>  =

>
  The challenge/response mechanism PB uses is more secure than this, so =

I don't think you want to do it.

>I tried to do this by using plaintext passwords, since the routines then =

>simply compare without md5'ing it, but it doesn't seem to be possible to u=
se =

>plaintext with pb without changing something. Can I user-define a class to =

>jump in there ?
>  =

>
  Absolutely.  PBClientFactory.login() and the methods associated with =

it aren't special.  They're just convenient.  All they do is call a =

predefined sequence of remote methods in exactly the same way user code =

(your code) can call them.  If you want a different login sequence, just =

define and call the methods for it.  That said, I really doubt you =

actually want a different login sequence.

  Jp




From jn at who.net  Fri Apr 23 09:47:36 2004
From: jn at who.net (john nielsen)
Date: Fri, 23 Apr 2004 08:47:36 -0500
Subject: [Twisted-Python] server to server leaking descriptors
Message-ID: <20040423134736.4283579004F@ws1-14.us4.outblaze.com>

I'm trying to figure out server to server communication. Here is example code that works but it leaks
descriptors until you run out.

In this example, the client talks to server1 on port 7000, server1 talks to server2 on 7001, then the client gets the result from server2 on 7001. Server1 uses pb.PBClientFactory() to send data to server2, which is the part that leaks descriptors.

What is the appropriate way for a server to talk to a server?

Thanks for any info,

john
------------
from twisted.spread import pb
from twisted.internet import reactor, defer
from twisted.python import util
import time,random

def client(port,fun,react=None,data=None):
   print 'in client',port,fun,data
   a=[]
   factory = pb.PBClientFactory()
   reactor.connectTCP('localhost', port, factory)
   d = factory.getRootObject()
   d.addCallback(lambda object: object.callRemote(fun,data))
   d.addCallback(lambda result: a.append(result))
   d.addErrback(lambda reason: 'error: '+str(reason.value))
   #d.addCallback(util.println)
   if react: 
      d.addCallback(lambda _: reactor.stop())
      reactor.run()
   if a:
      print 'returning',a[0]
      return a[0]
   #return 1


class adder(pb.Root):
    Result=None
    def remote_add(self,i):
        print 'in add'
        i+=1
        print 'calling add2'
        client(7001,'add2',react=None,data=i)

    def remote_add2(self,i):
        print 'in add2',self.Result
        i+=1
        self.Result=i
    def remote_result(self,stuff): return self.Result

port=raw_input('port?').strip()

if port:
    port=int(port)
    print 'starting on',port
    reactor.listenTCP(port, pb.PBServerFactory(adder()))
    reactor.run()
else:
    client(7000,'add',react=None,data=10)
    print 'got',client(7001,'result',react=1)



-- 
___________________________________________________________
Sign-up for Ads Free at Mail.com
http://promo.mail.com/adsfreejump.htm




From jn at who.net  Fri Apr 23 10:53:31 2004
From: jn at who.net (john nielsen)
Date: Fri, 23 Apr 2004 09:53:31 -0500
Subject: [Twisted-Python] how to do server to server defined at runtime?
Message-ID: <20040423145331.168DC79004F@ws1-14.us4.outblaze.com>

I am trying to figure out a way to have a server talk to another server, you do not know about except at runtime.
In other words, a client tells the server to talk to another server. I figured about the problem I had earlier,
and moving the connectTCP outside of PBServerFactory, fixes that problem, which makes sense since it is now not part of the reacotr. But, then I do not know how to specify who to talk to at runtime.

For example in this code, how to I move connectTCP into the adder class?

factory = pb.PBClientFactory()
reactor.connectTCP('localhost', 7001, factory)
d = factory.getRootObject()
reactor.listenTCP(port, pb.PBServerFactory(adder(d)))
reactor.run()

Thanks for any info,
john



-- 
___________________________________________________________
Sign-up for Ads Free at Mail.com
http://promo.mail.com/adsfreejump.htm




From itamar at itamarst.org  Fri Apr 23 13:15:33 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 23 Apr 2004 13:15:33 -0400
Subject: [Twisted-Python] server to server leaking descriptors
In-Reply-To: <20040423134736.4283579004F@ws1-14.us4.outblaze.com>
References: <20040423134736.4283579004F@ws1-14.us4.outblaze.com>
Message-ID: <1082740533.1068.0.camel@sheriffpony>

On Fri, 2004-04-23 at 09:47, john nielsen wrote:
> I'm trying to figure out server to server communication. Here is example code that works but it leaks
> descriptors until you run out.

If you never close connections your program will indeed "leak". So
perhaps you should close connections :)

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From jn at who.net  Fri Apr 23 13:50:58 2004
From: jn at who.net (john nielsen)
Date: Fri, 23 Apr 2004 12:50:58 -0500
Subject: [Twisted-Python] no factory.disconnect used the docs!?! (btw thx
	Itamar )
Message-ID: <20040423175058.63AAD79004F@ws1-14.us4.outblaze.com>

Once Itamar mentioned closing connections, then I realized I needed to add:

d.addCallback(lambda _: factory.disconnect())

The descriptors are now cleaned up.

An interesting point is that I cannot find any documentation that 
actually uses: factory.disconnect()

Did I miss it?

john
----- Original Message -----
From: twisted-python-request at twistedmatrix.com
Date: Thu, 22 Apr 2004 12:00:05 -0600
To: twisted-python at twistedmatrix.com
Subject: Twisted-Python Digest, Vol 1, Issue 1218

> Send Twisted-Python mailing list submissions to
> 	twisted-python at twistedmatrix.com
> 
> To subscribe or unsubscribe via the World Wide Web, visit
> 	http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> or, via email, send a message with subject or body 'help' to
> 	twisted-python-request at twistedmatrix.com
> 
> You can reach the person managing the list at
> 	twisted-python-owner at twistedmatrix.com
> 
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Twisted-Python digest..."
> 
> 
> Today's Topics:
> 
>    1. Re: Transporting pb.Copyable classes? (exarkun at divmod.com)
>    2. Re: Transporting pb.Copyable classes? (Jasper Phillips)
>    3. Unwinding the Twisted Web (a progress report) (David Reid)
>    4. Re: Unwinding the Twisted Web (a progress report)
>       (Itamar Shtull-Trauring)
>    5. how to have a server talk to a server (john nielsen)
>    6. Re: how to have a server talk to a server (Eric Mangold)
> 
> 
> ----------------------------------------------------------------------
> 
> Message: 1
> Date: Wed, 21 Apr 2004 18:53:37 GMT
> From: <exarkun at divmod.com>
> Subject: Re: [Twisted-Python] Transporting pb.Copyable classes?
> To: "Twisted discussion stuff" <twisted-python at twistedmatrix.com>
> Message-ID: <20040421185337.9235.1895087205.divmod.quotient.13 at ohm>
> Content-Type: text/plain
> 
> On Wed, 21 Apr 2004 09:57:47 -0700 (PDT), Jasper Phillips <jasper at peak.org> wrote:
> >
> > [snip]
> > 
> > 
> > All this seems to me like frantic contortion to avoid a bug in jelly.
> > Shouldn't it be able to translate passed class objects into the remote
> > version, provided they have been properly registered?  Is there some reason
> > why not that I am missing?
> 
>   Indeed.  While I would do this differently, jelly should certainly be able to handle your approach.  Let's get into specifics, shall we?  Here's some code:
> 
> >>> from twisted.spread import jelly
> >>> class Foo: pass
> ... 
> >>> f = Foo()
> >>> f.bar = Foo
> >>> jelly.jelly(f)
> ['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]
> 
>   So far, so good.
> 
> >>> from twisted.spread import pb     
> >>> class Foo(pb.Copyable):
> ...     pass
> ... 
> >>> f = Foo()
> >>> f.bar = Foo
> >>> jelly.jelly(f)
> ['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]
> 
>   Hmm, that works too.  I expected it not to, actually.  I suppose something you're doing with globalSecurity or setCopierForClassTree() may be mucking things up.
> 
> > 
> > I appreciate the code suggestions, but basicaly I just want to know whether
> > this is expected behavior, or whether I should post a demonstrative test
> > case and suggest a fix.
> 
>   Posting a demonstrative test case would be excellent :)  I suspect there is no bug in jelly, just a disagreement in expectations which can easily be resolved once there is a concrete example to talk about.
> 
>   Jp
> 
> 
> 
> ------------------------------
> 
> Message: 2
> Date: Wed, 21 Apr 2004 14:03:47 -0700 (PDT)
> From: Jasper Phillips <jasper at peak.org>
> Subject: Re: [Twisted-Python] Transporting pb.Copyable classes?
> To: Twisted discussion stuff <twisted-python at twistedmatrix.com>
> Message-ID: <Pine.LNX.4.53.0404211301540.9678 at a.shell.peak.org>
> Content-Type: TEXT/PLAIN; charset=US-ASCII
> 
> 
> On Wed, 21 Apr 2004 exarkun at divmod.com wrote:
> 
> > On Wed, 21 Apr 2004 09:57:47 -0700 (PDT), Jasper Phillips <jasper at peak.org> wrote:
> > > 
> > > All this seems to me like frantic contortion to avoid a bug in jelly.
> > > Shouldn't it be able to translate passed class objects into the remote
> > > version, provided they have been properly registered?  Is there some reason
> > > why not that I am missing?
> > 
> >   Indeed.  While I would do this differently, jelly should certainly be
> >   able to handle your approach.  Let's get into specifics, shall we?
> >   Here's some code:
> 
> I may end up doing it differently, but one thing at a time!  I'm in the
> midst of upgrading to new cred, and already have plenty of scope with which
> to hang myself. ;-)
> 
> I'm not particularily attached to the static class approach, it just
> happened to be what came to mind when prototyping.  I'm definitely curious
> now what you would do...  I've been programming in a vacuum for quite a
> while. :-(
> 
> 
> > >>> from twisted.spread import jelly
> > >>> class Foo: pass
> > ... 
> > >>> f = Foo()
> > >>> f.bar = Foo
> > >>> jelly.jelly(f)
> > ['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]
> > 
> >   So far, so good.
> > 
> > >>> from twisted.spread import pb     
> > >>> class Foo(pb.Copyable):
> > ...     pass
> > ... 
> > >>> f = Foo()
> > >>> f.bar = Foo
> > >>> jelly.jelly(f)
> > ['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]
> > 
> >   Hmm, that works too.  I expected it not to, actually.  I suppose
> >   something you're doing with globalSecurity or setCopierForClassTree()
> >   may be mucking things up.
> 
> This test case doesn't seem quite right...  Why doesn't it fail since Foo
> hasn't been registered?  Hmmm, looks like jelly()'s taster arg defaults to
> DummySecurityOptions()...
> 
> What about registering Foo, and then calling with jelly.globalSecurity?:
> ---- Code ----
> from twisted.spread import jelly, pb
> 
> class Foo( pb.Copyable ):  pass
> jelly.setUnjellyableForClass( Foo, Foo )
> #jelly.globalSecurity.allowInstancesOf( Foo )  # uncomment to fix
> 
> if __name__ == '__main__':
>     f = Foo()
>     f.bar = Foo
>     print jelly.jelly( f, taster=jelly.globalSecurity )
> 
> ---- End Code ----
> 
> This gives the Insecure Jelly exception I'm seeing, from jelly.py:482...
> However, comment out `f.bar = Foo` or uncomment allowInstancesOf() and it
> works.
> 
> Oh, and I'm using twisted 1.2 and python 2.3.3.
> 
> 
> [snip]
> >   Posting a demonstrative test case would be excellent :)  I suspect there
> >   is no bug in jelly, just a disagreement in expectations which can easily
> >   be resolved once there is a concrete example to talk about.
> 
> Is this a decent example?  As for a fix, it looks like the solution is there
> in SecurityOptions.allowsInstancesOf(), but that it's just not exposed.
> 
> -Jasper
> 
> 
> 
> 
> ------------------------------
> 
> Message: 3
> Date: Thu, 22 Apr 2004 03:56:47 -0700
> From: David Reid <dreid at dreid.org>
> Subject: [Twisted-Python] Unwinding the Twisted Web (a progress
> 	report)
> To: twisted-python <twisted-python at twistedmatrix.com>,	twisted-web
> 	<twisted-web at twistedmatrix.com>
> Message-ID: <1082631407.28634.20.camel at localhost>
> Content-Type: text/plain
> 
> I had been trying to straighten out the model for the split since my
> first post to twisted-web regarding it.  Now that radix, and exarkun
> have split twisted.news out of the core codebase as "lowdown". Since
> then I have begun work on my own source tree of twisted.web, the module
> has been split as "unwound" which is my proposed name as mentioned in
> the numerous naming threads (to be installed as tmlabs.unwound if
> desired.)  
> 
> So far I've done the following:
> 
>  * duplicate the source tree renaming the toplevel module and changing
> the imports accordingly.
> 
>  * run the tests (everything passes just as it does in twisted.web)
> 
>  * removed modules that were deprecated BY woven, and added a
> Deprecation Warning message to unwound.woven.__init__
> 
> If there are no complaints about this I'm asking someone (like radix) to
> help me complete the rest of the steps necessary to make this the
> official split so i can start working on changes and enhancements.  The
> things I can't do on my own, atleast not as part of twistedmatrix.com is
> setup the SVN repo and the project page.  
> 
> Also it appears if radix and exarkun did not solve (or atleast did not
> implmenet a solution for) the tap naming conflicts.  I.E. if lowdown or
> tmlabs.lowdown is going to use mktap news or mktap lowdown instead.
> 
> Other than that, Unwound is currently a useable tree of twisted.web At
> revision 10601.
> 
> (I'm open to changing the name to either tmlabs.web or some cute/catchy
> name other than 'unwound', but ultimately I think that is a policy
> decision that falls on the core twisted devs.)
> 
> --
> David Reid
> Claim to fame: "I actually wrote code that used twisted.web.webwidgets!"
> 
> 
> 
> 
> ------------------------------
> 
> Message: 4
> Date: Thu, 22 Apr 2004 11:21:46 -0400
> From: Itamar Shtull-Trauring <itamar at itamarst.org>
> Subject: Re: [Twisted-Python] Unwinding the Twisted Web (a progress
> 	report)
> To: Twisted discussion stuff <twisted-python at twistedmatrix.com>
> Cc: twisted-web at twistedmatrix.com
> Message-ID: <1082647306.27964.10.camel at sheriffpony>
> Content-Type: text/plain
> 
> On Thu, 2004-04-22 at 06:56, David Reid wrote:
> 
> > So far I've done the following:
> > 
> >  * duplicate the source tree renaming the toplevel module and changing
> > the imports accordingly.
> 
> >From what I've gathered from talking to Donovan and James this is *not*
> how the new twisted.web version is going to be developed. Donovan said
> he'd write out a roadmap for the mailing list after talking it over.
> 
> -- 
> Itamar Shtull-Trauring    http://itamarst.org
> Looking for a job -- http://itamarst.org/resume.html
> 
> 
> 
> 
> ------------------------------
> 
> Message: 5
> Date: Thu, 22 Apr 2004 10:46:30 -0500
> From: "john nielsen" <jn at who.net>
> Subject: [Twisted-Python] how to have a server talk to a server
> To: twisted-python at twistedmatrix.com
> Message-ID: <20040422154630.2989779004F at ws1-14.us4.outblaze.com>
> Content-Type: text/plain; charset="iso-8859-1"
> 
> I see some examples where you have  a client call pb.PBClientFactory to talk to a server which called pb.PBServerFactory.
> 
> What if you have 2 servers (both running pb.PBServerFactory) that accept clients and also want to talk to each other? Would the first server  also make a pb.PBClientFactory to talk to the second server (seems like you would have to be careful to not leak descriptors since the reactor would never close).
> 
> There's probably a standard way to do it, that I just missed.
> 
> Thanks for any help,
> 
> john
> 
> -- 
> ___________________________________________________________
> Sign-up for Ads Free at Mail.com
> http://promo.mail.com/adsfreejump.htm
> 
> 
> 
> 
> ------------------------------
> 
> Message: 6
> Date: Thu, 22 Apr 2004 11:38:55 -0600
> From: Eric Mangold <teratorn at world-net.net>
> Subject: [Twisted-Python] Re: how to have a server talk to a server
> To: Twisted discussion stuff <twisted-python at twistedmatrix.com>
> Message-ID: <opr6vcm5nfi4eeqj at mail.oaktech.net>
> Content-Type: text/plain; format=flowed; charset=iso-8859-1
> 
> On Thu, 22 Apr 2004 10:46:30 -0500, john nielsen <jn at who.net> wrote:
> 
> > I see some examples where you have  a client call pb.PBClientFactory to 
> > talk to a server which called pb.PBServerFactory.
> >
> > What if you have 2 servers (both running pb.PBServerFactory) that accept 
> > clients and also want to talk to each other? Would the first server  
> > also make a pb.PBClientFactory to talk to the second server
> 
> Yes.
> 
> > (seems like you would have to be careful to not leak descriptors since 
> > the reactor would never close).
> 
> Not sure what you mean by that.
> 
> 	-Eric
> 
> 
> 
> 
> 
> ------------------------------
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> End of Twisted-Python Digest, Vol 1, Issue 1218
> ***********************************************
> 

-- 
___________________________________________________________
Sign-up for Ads Free at Mail.com
http://promo.mail.com/adsfreejump.htm




From glyph at divmod.com  Fri Apr 23 13:57:06 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 23 Apr 2004 13:57:06 -0400
Subject: [Twisted-Python] IFoo(x, persist=1)
In-Reply-To: <1082675086.27964.59.camel@sheriffpony>
References: <1082675086.27964.59.camel@sheriffpony>
Message-ID: <408958F2.5000808@divmod.com>

Itamar Shtull-Trauring wrote:

>I know this is used a lot (the weakref persistence stuff). Should it be
>option of adaptation or perhaps of adapter registration? Trying to see
>how to fit this in to zope3's, which doesn't do this, and it'd be nice
>to have it as part of their core code rather than ours.
> =

>  =

>
It should probably be an attribute of the adapter itself; the persist =

flag is generally about semantics that the adapter expects, not its =

clients.  (Clients of an adapter generally shouldn't be using 'is' anyway.)



From exarkun at divmod.com  Fri Apr 23 14:05:26 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 23 Apr 2004 18:05:26 GMT
Subject: [Twisted-Python] no factory.disconnect used the docs!?! (btw thx
	Itamar )
Message-ID: <20040423180526.9235.1057354114.divmod.quotient.46@ohm>

On Fri, 23 Apr 2004 12:50:58 -0500, "john nielsen" <jn at who.net> wrote:
>Once Itamar mentioned closing connections, then I realized I needed to add:
> 
> d.addCallback(lambda _: factory.disconnect())
> 
> The descriptors are now cleaned up.
> 
> An interesting point is that I cannot find any documentation that 
> actually uses: factory.disconnect()
> 
> Did I miss it?

  Where in the docs do you see this?  There is no such method on factories.  You want to call transport.loseConnection() (which is not easily accessible for a PB connection, but it can be reached, see list archives for details on how).

  Jp



From itamar at itamarst.org  Fri Apr 23 14:09:11 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 23 Apr 2004 14:09:11 -0400
Subject: [Twisted-Python] no factory.disconnect used the docs!?! (btw
	thx Itamar )
In-Reply-To: <20040423180526.9235.1057354114.divmod.quotient.46@ohm>
References: <20040423180526.9235.1057354114.divmod.quotient.46@ohm>
Message-ID: <1082743751.1066.46.camel@sheriffpony>

On Fri, 2004-04-23 at 14:05, exarkun at divmod.com wrote:

>   Where in the docs do you see this?  There is no such method on
> factories.  You want to call transport.loseConnection() (which is not
> easily accessible for a PB connection, but it can be reached, see list
> archives for details on how).

IIRC it's a PB only thing I added for exactly this reason - that
transport.loseCOnnection() is hard to get at in clients.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From jn at who.net  Fri Apr 23 14:19:47 2004
From: jn at who.net (john nielsen)
Date: Fri, 23 Apr 2004 13:19:47 -0500
Subject: [Twisted-Python] do you want docs on a simple server to server pb
	example?
Message-ID: <20040423181947.5800079004F@ws1-14.us4.outblaze.com>

Now that I have it working and I don't think it is documented how to have 2 pb servers talk to each other, I am willing to write some documentation for it. Would you want it?

john


-- 
___________________________________________________________
Sign-up for Ads Free at Mail.com
http://promo.mail.com/adsfreejump.htm




From waterbug at beeblebrox.gsfc.nasa.gov  Fri Apr 23 14:49:32 2004
From: waterbug at beeblebrox.gsfc.nasa.gov (Stephen C. Waterbury)
Date: Fri, 23 Apr 2004 14:49:32 -0400
Subject: [Twisted-Python] do you want docs on a simple server to server
	pb	example?
In-Reply-To: <20040423181947.5800079004F@ws1-14.us4.outblaze.com>
References: <20040423181947.5800079004F@ws1-14.us4.outblaze.com>
Message-ID: <4089653C.1030206@beeblebrox.gsfc.nasa.gov>

john nielsen wrote:
> Now that I have it working and I don't think it is documented how to have 2 pb servers talk to each other, I am willing to write some documentation for it. Would you want it?

+1 from here!  :)




From mary-twisted at puzzling.org  Fri Apr 23 19:03:58 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 24 Apr 2004 09:03:58 +1000
Subject: [Twisted-Python] do you want docs on a simple server to server pb
	example?
In-Reply-To: <20040423181947.5800079004F@ws1-14.us4.outblaze.com>
References: <20040423181947.5800079004F@ws1-14.us4.outblaze.com>
Message-ID: <20040423230358.GB21314@titus.home.puzzling.org>

On Fri, Apr 23, 2004, john nielsen wrote:
> Now that I have it working and I don't think it is documented how to
> have 2 pb servers talk to each other, I am willing to write some
> documentation for it. Would you want it?

Sure, we don't say no to more docs :)

When the documentation (or draft if that's what you want to do) is done,
file a bug in the bug tracker ( http://twistedmatrix.com/bugs/ ) and
assign it to me (username: hypatia) . Attach your documentation to it.

-Mary



From glyph at divmod.com  Sat Apr 24 02:41:39 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 24 Apr 2004 02:41:39 -0400
Subject: [Twisted-Python] The Argument I Lost
Message-ID: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>


I was confused by the recent discussion of the recent tmlabs.* 
hierarchy, so there was a long discussion on IRC tonight about how 
exactly the various splits are going to proceed.  We almost reached a 
consensus about how things should work, except foom (James Knight) 
managed to win the argument about how it should work eventually.

However, I'm more irritating than he is, so we're still doing things my 
way.

To recap, James's way, which is similar to what was discussed on the 
list before, is:

	Keep everything in the same repository, but provide different 
top-level directories for Twisted and the new split-off packages, e.g. 
svn://.../trunk/Twisted/twisted/internet/..., 
svn://.../trunk/TwistedNews/twisted/news/...  (previously we were going 
to keep everything in different repositories, but we agreed that this 
was unnecessary and came with several unpleasant restrictions)

	Move code in new subdirectories to the tmlabs.* hierarchy for 
marketing purposes because it provides a cleaner separation between 
core and applications.  However, I feel that there are lots of other 
hierarchy reorganizations that are potentially a good idea, and this is 
another step.

	Set up buildbot to run application packages against both last-released 
core and most-current core.


My way is:

For now...

	The repository mostly stays how it is.

	Buildbot keeps running against trunk, but against a series of 
application packages instead of twisted.test.

	Package names do not change.

Eventually, one or all of these may need to change.  However, all that 
will be happening to split out packages is:

	Modules in protocols/, test/, and tap/ move to an appropriate 
top-level package, with backward-compatibility wrapper.

	The release script will be changed to generate separate tarballs for 
various top-level packages.

	We will create a topfiles/ directory or somesuch to contain READMEs, 
setup.py's, etc., for each subproject.

Barring any strong objections, this smaller, simpler plan is now how 
the releases should proceed.  We do still intend to do new websites and 
download areas for each subproject (sorry maintainers, you're not 
getting out of writing HTML!), just not new repositories.  Hopefully 
this will be a bit easier on users as we will get decoupled release 
cycles, but aside from protocols moving, it should require no code 
changes to remove all import-related deprecation warnings.

The main point in this change in plan is to avoid doing too many things 
at once, to make sure that the whole split finishes before someone 
implements some crazy new features.  Therefore, issues such as how to 
version APIs, re-organize modules, or re-name packages will be 
addressed *after* the appropriate changes for this split have been 
prepared, but feel free to discuss them beforehand.  I will be replying 
to James's setversion proposal soon.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040424/a6d35da7/attachment.pgp 

From itamar at itamarst.org  Sat Apr 24 10:23:44 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 24 Apr 2004 10:23:44 -0400
Subject: [Twisted-Python] The Argument I Lost
In-Reply-To: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>
References: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>
Message-ID: <1082816624.1066.68.camel@sheriffpony>

On Sat, 2004-04-24 at 02:41, Glyph Lefkowitz wrote:

> Barring any strong objections, this smaller, simpler plan is now how 
> the releases should proceed.

Here's how I think the remaining unmentioned pieces should work:

1. Issue tracker will be the same for all projects unless it's a big
enough project (e.g. web).
2. Docs are included in per-project directories.
3. Mailing list is the same for all projects (unless it's big enough,
again e.g. web).

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From foom at fuhm.net  Sat Apr 24 11:56:29 2004
From: foom at fuhm.net (James Y Knight)
Date: Sat, 24 Apr 2004 11:56:29 -0400
Subject: [Twisted-Python] The Argument I Lost
In-Reply-To: <1082816624.1066.68.camel@sheriffpony>
References: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>
	<1082816624.1066.68.camel@sheriffpony>
Message-ID: <F35C0C9C-9607-11D8-8D82-000A95A50FB2@fuhm.net>


On Apr 24, 2004, at 10:23 AM, Itamar Shtull-Trauring wrote:

> 1. Issue tracker will be the same for all projects unless it's a big
> enough project (e.g. web).

It would be *really* nice if the issue tracker sanely supported 
multiple projects in one tracker. Such that each can have separate bug 
listings, but that you could transfer/reassign bugs between them and 
good things like that. The "tag" system it has can kinda do that, but 
noone ever fills it out because it's a textfield instead of a 
required-entry popup menu, which it really probably should be.

James




From itamar at itamarst.org  Sat Apr 24 12:34:53 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 24 Apr 2004 12:34:53 -0400
Subject: [Twisted-Python] The Argument I Lost
In-Reply-To: <F35C0C9C-9607-11D8-8D82-000A95A50FB2@fuhm.net>
References: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>
	<1082816624.1066.68.camel@sheriffpony>
	<F35C0C9C-9607-11D8-8D82-000A95A50FB2@fuhm.net>
Message-ID: <1082824493.1461.72.camel@sheriffpony>

On Sat, 2004-04-24 at 11:56, James Y Knight wrote:

> It would be *really* nice if the issue tracker sanely supported 
> multiple projects in one tracker.

Roundup supports user-extensible schemas, so it should be pretty easy to
add this.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From rayg at varchars.com  Fri Apr 23 12:23:53 2004
From: rayg at varchars.com (rayg)
Date: Fri, 23 Apr 2004 09:23:53 -0700 (PDT)
Subject: [Twisted-Python] twisted on os x: cfreactor or kqreactor?
Message-ID: <Pine.OSX.4.58.0404230852200.21404@slither.local>

i just created a fink package for PyKQeue
(http://sourceforge.net/tracker/index.php?func=detail&aid=940552&group_id=17203&atid=414256)
and this now allows me to use kqreactor.

if i'm not not planning on using any cocoa functionality, is there any
advantage to use cfreactor over kqreactor on os x?

i wasn't able to find any direct comparison between the mechanisms behind
kqreactor and cfreactor, but i did see that NSRunLoop is asynchronous,
like kqueue.  i've tested both reactors on a simple script and noticed
cfreactor doesn't stop() 75% of the time, so i'm inclined to just use
kqreactor, instead of tracking down why cfreactor isn't behaving...



From bob at redivi.com  Sat Apr 24 22:23:34 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 24 Apr 2004 22:23:34 -0400
Subject: [Twisted-Python] twisted on os x: cfreactor or kqreactor?
In-Reply-To: <Pine.OSX.4.58.0404230852200.21404@slither.local>
References: <Pine.OSX.4.58.0404230852200.21404@slither.local>
Message-ID: <8D2EFF25-965F-11D8-9DFB-000A95686CD8@redivi.com>


On Apr 23, 2004, at 12:23 PM, rayg wrote:

> i just created a fink package for PyKQeue
> (http://sourceforge.net/tracker/index.php? 
> func=detail&aid=940552&group_id=17203&atid=414256)
> and this now allows me to use kqreactor.
>
> if i'm not not planning on using any cocoa functionality, is there any
> advantage to use cfreactor over kqreactor on os x?
>
> i wasn't able to find any direct comparison between the mechanisms  
> behind
> kqreactor and cfreactor, but i did see that NSRunLoop is asynchronous,
> like kqueue.  i've tested both reactors on a simple script and noticed
> cfreactor doesn't stop() 75% of the time, so i'm inclined to just use
> kqreactor, instead of tracking down why cfreactor isn't behaving...

You need to use cfreactor or else twisted will block.  You basically  
have no choice.

If that script has a problem with SVN trunk of Twisted, then post the  
script as a bug and I will fix it.  That said, stop() isn't necessarily  
going to cause the program to exit (it doesn't call CFRunLoopStop), but  
it should shut down twisted.  I've only extensively tested it when used  
with a NSRunLoop with Cocoa stuff going on, and never bothered with  
stop functionality because NSRunLoop doesn't have a stop method at all  
(exiting is done via -[NSApplication terminate] or an exit call).

-bob




From bob at redivi.com  Sat Apr 24 22:29:08 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 24 Apr 2004 22:29:08 -0400
Subject: [Twisted-Python] twisted on os x: cfreactor or kqreactor?
In-Reply-To: <8D2EFF25-965F-11D8-9DFB-000A95686CD8@redivi.com>
References: <Pine.OSX.4.58.0404230852200.21404@slither.local>
	<8D2EFF25-965F-11D8-9DFB-000A95686CD8@redivi.com>
Message-ID: <54760BEC-9660-11D8-9DFB-000A95686CD8@redivi.com>


On Apr 24, 2004, at 10:23 PM, Bob Ippolito wrote:

>
> On Apr 23, 2004, at 12:23 PM, rayg wrote:
>
>> i just created a fink package for PyKQeue
>> (http://sourceforge.net/tracker/index.php? 
>> func=detail&aid=940552&group_id=17203&atid=414256)
>> and this now allows me to use kqreactor.
>>
>> if i'm not not planning on using any cocoa functionality, is there any
>> advantage to use cfreactor over kqreactor on os x?
>>
>> i wasn't able to find any direct comparison between the mechanisms  
>> behind
>> kqreactor and cfreactor, but i did see that NSRunLoop is asynchronous,
>> like kqueue.  i've tested both reactors on a simple script and noticed
>> cfreactor doesn't stop() 75% of the time, so i'm inclined to just use
>> kqreactor, instead of tracking down why cfreactor isn't behaving...
>
> You need to use cfreactor or else twisted will block.  You basically  
> have no choice.
>
> If that script has a problem with SVN trunk of Twisted, then post the  
> script as a bug and I will fix it.  That said, stop() isn't  
> necessarily going to cause the program to exit (it doesn't call  
> CFRunLoopStop), but it should shut down twisted.  I've only  
> extensively tested it when used with a NSRunLoop with Cocoa stuff  
> going on, and never bothered with stop functionality because NSRunLoop  
> doesn't have a stop method at all (exiting is done via -[NSApplication  
> terminate] or an exit call).

I'm sorry, I read your message incorrectly.  If you are not using Cocoa  
functionality, use the default reactor or kqreactor (which will only  
work on 10.3).  CFRunLoop is designed to support Carbon (probably) and  
Cocoa applications.  There is no good reason to use it for a POSIX app  
unless you are using other event driven CoreFoundation code (highly  
unlikely, in Python anyway).

The way CoreFoundation does async socket I/O is to have a single  
network thread that posts events to the run loop thread.  In 10.2 and  
earlier it used select().  I am not sure if it is using kqueue or not  
in 10.3 (nor should I have to care).

-bob




From mary-twisted at puzzling.org  Sun Apr 25 01:05:28 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 25 Apr 2004 15:05:28 +1000
Subject: [Twisted-Python] The Argument I Lost
In-Reply-To: <1082816624.1066.68.camel@sheriffpony>
References: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>
	<1082816624.1066.68.camel@sheriffpony>
Message-ID: <20040425050527.GB1134@titus.home.puzzling.org>

On Sat, Apr 24, 2004, Itamar Shtull-Trauring wrote:
> On Sat, 2004-04-24 at 02:41, Glyph Lefkowitz wrote:
> 
> > Barring any strong objections, this smaller, simpler plan is now how 
> > the releases should proceed.
> 
> Here's how I think the remaining unmentioned pieces should work:
> 
> 1. Issue tracker will be the same for all projects unless it's a big
> enough project (e.g. web).
> 3. Mailing list is the same for all projects (unless it's big enough,
> again e.g. web).

This will still be a pain for anyone doing cross-project work
*cough*docs*cough*. I'm tempted to say that projects that are large
enough to get their own bug tracker ought to consider getting their own
docs editor, release manager etc.

-Mary



From itamar at itamarst.org  Sun Apr 25 16:21:53 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 25 Apr 2004 16:21:53 -0400
Subject: [Twisted-Python] The Argument I Lost
In-Reply-To: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>
References: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>
Message-ID: <1082924513.1461.76.camel@sheriffpony>

Another question - what should the main site for Twisted core be?
http://projects.twistedmatrix.com/twisted/ or www.twistedmatrix.com? 
(If the former we will provide backwards-compatability for the important
URLs, of course).




From sam at couter.dropbear.id.au  Mon Apr 26 00:27:38 2004
From: sam at couter.dropbear.id.au (Sam Couter)
Date: Mon, 26 Apr 2004 14:27:38 +1000
Subject: [Twisted-Python] Bug in reactor.iterate()?
Message-ID: <20040426042737.GA23378@yosamite.tekno.house>

Twisted version: 1.2.0

Attached is a minimal test case to demonstrate behaviour I consider a
bug in reactor.iterate() in the default reactor. You'll need to change
the DB name, user and password, and pick a table that exists in your DB.

The callbacks are never called while iterate() runs, but are called if
iterate() is replaced with run(), or if run() is called after iterate().

Am I correct in considering this a bug?

I found this while creating a unit test following the example at the
bottom of
http://www.twistedmatrix.com/documents/current/howto/test-standard.
-- 
Sam "Eddie" Couter  |  mailto:sam at couter.dropbear.id.au
Debian Developer    |  mailto:eddie at debian.org
                    |  jabber:sam at teknohaus.dyndns.org
OpenPGP fingerprint:  A46B 9BB5 3148 7BEA 1F05  5BD5 8530 03AE DE89 C75C
-------------- next part --------------
A non-text attachment was scrubbed...
Name: iterate.py
Type: text/x-python
Size: 446 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040426/edea1073/attachment.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040426/edea1073/attachment.pgp 

From matt at pollenation.net  Mon Apr 26 07:00:07 2004
From: matt at pollenation.net (Matt Goodall)
Date: Mon, 26 Apr 2004 12:00:07 +0100
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <660B7B08-94D4-11D8-967C-00039386381C@jabber.org>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<1082488803.2913.163.camel@debian>
	<660B7B08-94D4-11D8-967C-00039386381C@jabber.org>
Message-ID: <1082977206.12687.9.camel@harold>

On Fri, 2004-04-23 at 04:14, Dave Smith wrote:
> On Apr 20, 2004, at 1:20 PM, Matt Goodall wrote:
> 
> > I recently used xish.xpath instead of libxml's xpath in a Nevow example
> > to avoid introducing the external dependency. I knew xish would be
> > available to anyone interested in the example ... or so I thought ;-).
> > The xish.xpath implementation is lacking a few useful bits of the xpath
> > spec but other than that it's useful.
> 
> I'm working on adding the final bits of useful xpath functionality 
> (added // support the other nite), and would be willing to 
> have/maintain xish as it's own subproject. I just have to figure out 
> what exactly that means... :)

Wow, thanks Dave :).

iirc, i missed one thing from my unittest that is useful - matching by
attribute value. See the zvon.org's example 6 although I personally
wouldn't bother with the normalize-space() nonsense.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.




From itamar at itamarst.org  Mon Apr 26 11:42:18 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 26 Apr 2004 11:42:18 -0400
Subject: [Twisted-Python] Bug in reactor.iterate()?
In-Reply-To: <20040426042737.GA23378@yosamite.tekno.house>
References: <20040426042737.GA23378@yosamite.tekno.house>
Message-ID: <1082994138.5919.3.camel@sheriffpony>

On Mon, 2004-04-26 at 00:27, Sam Couter wrote:

> The callbacks are never called while iterate() runs, but are called if
> iterate() is replaced with run(), or if run() is called after iterate().

The threadpool used by the database is never initialized if you don't
use run(). I suggest you look at twisted.test.test_enterprise and see
how it deals with initializing and stopping the db in tests (or just use
reactor.run() wiith reactor.crash(), though you'll still need to stop
the threadpool manually).

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From dekonerding at lbl.gov  Mon Apr 26 17:47:10 2004
From: dekonerding at lbl.gov (David E. Konerding DSD Staff)
Date: Mon, 26 Apr 2004 14:47:10 -0700
Subject: [Twisted-Python] twisted gtk-reactor bug 552
Message-ID: <408D835E.2050309@lbl.gov>

Hi,

I'm checking in again to see if anybody had taken a look at my bug report,

http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue552

I discussed it a little bit on a slow day on IRC, but nobody had any 
solutions.
However, it was reproduced on NetBSD-current w/ pygtk-2 and gtk-2.4, so I'm
pretty sure it's not specific to my location.

In summary:

I'm using the gtk2reactor, and periodically scheduled events (invoked 
via reactor.callLater->reactor.callInThread)
are not being fired in a timely fashion.  When I originally mentioned 
the bug on the mailing list, people thought
I was calling 'sleep' in the main (reactor) thread, but actually, sleep 
is only called in another thread, and
it works fine with the plain reactor and the wx reactor.

Here is the example program (you should see 'TestThingy message' every 
0.1 seconds or so..)
Note that the bug report has two lines improperly indented.

import time, sys

from twisted.internet import gtk2reactor
gtk2reactor.install()
from twisted.python import threadable
threadable.init()
from twisted.internet import reactor
from twisted.python import log
log.startLogging(sys.stdout)

class TestThingy:
 def __init__(self):
     print "TestThingy created"

 def run(self):
     print "TestThingy run"
     for i in range(10):
         print "TestThingy message"
         time.sleep(0.1)
     print "TestThingy done"

class ThingyManager:
 def __init__(self):
     pass

 def submitThingy(self):
     log.err("ThingyManager submitting")
     f = TestThingy()
     log.err("ThingyManager created")
     reactor.callInThread(f.run)
     log.err("ThingyManager calledInThread")

def ticker(*args):
 log.err("ticker: %d" % time.time())
 reactor.callLater(1, ticker)

t = ThingyManager()
reactor.callLater(0, ticker)
reactor.callLater(3, t.submitThingy)
reactor.run()
log.err("Reactor done")


Dave





From dizzyd at jabber.org  Tue Apr 27 00:42:22 2004
From: dizzyd at jabber.org (Dave Smith)
Date: Mon, 26 Apr 2004 22:42:22 -0600
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082977206.12687.9.camel@harold>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<1082488803.2913.163.camel@debian>
	<660B7B08-94D4-11D8-967C-00039386381C@jabber.org>
	<1082977206.12687.9.camel@harold>
Message-ID: <45E2F93A-9805-11D8-A603-00039386381C@jabber.org>


On Apr 26, 2004, at 5:00 AM, Matt Goodall wrote:

> iirc, i missed one thing from my unittest that is useful - matching by
> attribute value. See the zvon.org's example 6 although I personally
> wouldn't bother with the normalize-space() nonsense.

You mean like /foo[@bar='abc']

D.




From matt at pollenation.net  Tue Apr 27 04:46:26 2004
From: matt at pollenation.net (Matt Goodall)
Date: Tue, 27 Apr 2004 09:46:26 +0100
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <45E2F93A-9805-11D8-A603-00039386381C@jabber.org>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<1082488803.2913.163.camel@debian>
	<660B7B08-94D4-11D8-967C-00039386381C@jabber.org>
	<1082977206.12687.9.camel@harold>
	<45E2F93A-9805-11D8-A603-00039386381C@jabber.org>
Message-ID: <1083055586.23973.4.camel@harold>

On Tue, 2004-04-27 at 05:42, Dave Smith wrote:
> On Apr 26, 2004, at 5:00 AM, Matt Goodall wrote:
> 
> > iirc, i missed one thing from my unittest that is useful - matching by
> > attribute value. See the zvon.org's example 6 although I personally
> > wouldn't bother with the normalize-space() nonsense.
> 
> You mean like /foo[@bar='abc']

Yep, that's the one. I don't know if xish already supports this, I just
realised I missed it from the tests.

Cheers, Matt

-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt at pollenation.net

Any views expressed are my own and do not necessarily reflect the
views of my employer.




From sam at couter.dropbear.id.au  Tue Apr 27 06:52:26 2004
From: sam at couter.dropbear.id.au (Sam Couter)
Date: Tue, 27 Apr 2004 20:52:26 +1000
Subject: [Twisted-Python] Bug in reactor.iterate()?
In-Reply-To: <1082994138.5919.3.camel@sheriffpony>
References: <20040426042737.GA23378@yosamite.tekno.house>
	<1082994138.5919.3.camel@sheriffpony>
Message-ID: <20040427105226.GE23378@yosamite.tekno.house>

Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> The threadpool used by the database is never initialized if you don't
> use run(). I suggest you look at twisted.test.test_enterprise and see
> how it deals with initializing and stopping the db in tests (or just use
> reactor.run() wiith reactor.crash(), though you'll still need to stop
> the threadpool manually).

Ah... I already tried run() and crash(), but my test didn't terminate.
Now I know why - the threadpool was still running.

All works now, is good. Thanks.

Suggestion: Turn this bug into a documented feature. :)
-- 
Sam "Eddie" Couter  |  mailto:sam at couter.dropbear.id.au
Debian Developer    |  mailto:eddie at debian.org
                    |  jabber:sam at teknohaus.dyndns.org
OpenPGP fingerprint:  A46B 9BB5 3148 7BEA 1F05  5BD5 8530 03AE DE89 C75C
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040427/30661303/attachment.pgp 

From itamar at itamarst.org  Wed Apr 28 12:53:36 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 28 Apr 2004 12:53:36 -0400
Subject: [Twisted-Python] Zope3 components port status
Message-ID: <1083171216.8295.30.camel@sheriffpony>

All tests pass, except 3 in test_components that test features which we
no longer support. I am running my woven app with it right now and
meanwhile everything is working great.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From prouleau at impathnetworks.com  Thu Apr 29 00:36:53 2004
From: prouleau at impathnetworks.com (Pierre Rouleau)
Date: Thu, 29 Apr 2004 00:36:53 -0400
Subject: [Twisted-Python] Is multicast supported on windows platform?
Message-ID: <c6q0p6$eae$1@sea.gmane.org>

Hi everyone!

I am just starting to learn Twisted.
My first attempt is to write a small client app that will join to  a 
multicast group and then read the receive stream.  The code would have 
to run on Windows and *nix.

As I'm reading the docs and browsing the code I stumbled across the 
twisted.internet.udp MulticastMixin docstring that states:

class MulticastMixin:
     """Implement multicast functionality.

     Initial implementation, probably needs some changes for Windows 
support.
     """

My first question therefore:  "is multicast supported under Windows?"


Thanks for any help.

Pierre





From matteo.giacomazzi at email.it  Thu Apr 29 10:26:57 2004
From: matteo.giacomazzi at email.it (Matteo Giacomazzi)
Date: Thu, 29 Apr 2004 16:26:57 +0200
Subject: [Twisted-Python] twisted.internet.error.ConnectionDone,
	Connection was closed cleanly
Message-ID: <1325025593.20040429162657@email.it>

Hi all,

   in  my  network (client) application I have to defer an action in a
   thread using deferToThread.
   I add an errBack to the deferred returned from the deferToThread in
   order  to handle exceptions and, then, I add a callBack in order to
   return a response *anyway*.

   Now  the  problem:  if  the  thread completes its execution without
   exception, everything works pretty fine.
   If an exception happens in the thread, then the errBack is invoked,
   the  callBack  is invoked and the transport.write is invoked but...
   at  the  end  of the chain the protocol receives a "connectionLost"
   call  and  the factory receives a "clientConnectionLost" call, both
   with the reason you can see in the subject.

   What does it mean?

   Any  help  would  be  greatly  appreciated.
   Python  2.3.3
   Twisted 1.2.0

Best regards
 Matteo




From matteo.giacomazzi at email.it  Thu Apr 29 11:39:13 2004
From: matteo.giacomazzi at email.it (Matteo Giacomazzi)
Date: Thu, 29 Apr 2004 17:39:13 +0200
Subject: [Twisted-Python] twisted.internet.error.ConnectionDone,
	Connection was closed cleanly
In-Reply-To: <1325025593.20040429162657@email.it>
References: <1325025593.20040429162657@email.it>
Message-ID: <1609360859.20040429173913@email.it>

> at  the  end  of  the chain the protocol receives a "connectionLost"
> call  and  the  factory receives a "clientConnectionLost" call, both
> with the reason you can see in the subject.

Sorry for the wasted bandwidth, the error meant that the server closed
the connection, that's why I had the problem!

Ok, now I know what's the code I have to check!

Apologizes!

Kind regards,
 Matteo




From itamar at itamarst.org  Thu Apr 29 22:28:21 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 29 Apr 2004 22:28:21 -0400
Subject: [Twisted-Python] Is multicast supported on windows platform?
In-Reply-To: <c6q0p6$eae$1@sea.gmane.org>
References: <c6q0p6$eae$1@sea.gmane.org>
Message-ID: <1083292101.8295.38.camel@sheriffpony>

On Thu, 2004-04-29 at 00:36, Pierre Rouleau wrote:

> My first question therefore:  "is multicast supported under Windows?"

Probably. Try it and see! If you get errors file them at
http://twistedmatrix.com/bugs/ and assign to me.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From waldbie at attglobal.net  Fri Apr 30 22:34:15 2004
From: waldbie at attglobal.net (Carl Waldbieser)
Date: Sat, 1 May 2004 02:34:15 +0000
Subject: [Twisted-Python] How to write binary data from a protocol?
Message-ID: <200405010234.16055.waldbie@attglobal.net>

I am attempting to write a server that communicates by a protocol very similar 
to the twisted.protocols.basic.LineReceiver protocol.  The server accepts a 
line of data, followed by a raw data section, and then responds to the client 
with raw data pre-pended with an integer that tells the size of the binary 
data.  I am not sure how to write the integer as binary data in twisted, 
though.  I tried calling self.transport.write(), but I received an error 
indicating that only string data is accepted.  This implementation is meant 
as a drop-in replacement for an existing server, so I don't really want to 
change the protocol.

Below is a sample program that I have been trying to get to work.  It receives 
a line (actually, an integer followed by a newline).  It then enters raw data 
mode where it aquires raw data until it reaches the length specified by the 
integer.  Then it attempts to send a test message consisting of a string 
("xyzzy") pre-pended by the length of the string.  The error output follows 
the sample.

Is there a better way to accomplish what I am trying to do?

Any Help Is Appreciated,
Carl Waldbieser

---- Begin Sample --------------------------------------------------------- 

from twisted.internet import reactor, protocol
from twisted.protocols.basic import LineReceiver

class MyProtocol(LineReceiver):
    delimiter = "\n"
    def __init__(self):
        self.setLineMode()
    def lineReceived(self, line):
        self.length = int(line)
        self.data = ""
        print "Received : %d\n" % self.length
        self.setRawMode()
    def rawDataReceived(self, data):
        self.data += data
        if len(self.data) >= self.length:
            data = self.data[0:self.length]
            remaining = self.data[self.length:]
            print "Received data: %s\n" % data
            self.transport.write(5)
            self.transport.write("xyzzy")
            self.transport.loseConnection()
    
class MyFactory(protocol.ServerFactory):
    protocol = MyProtocol
    
mf = MyFactory()
reactor.listenTCP(2525, mf)
reactor.run()



--- Begin Error -----------------------------------------------------------
Traceback (most recent call last):
  File "/usr/lib/python2.3/site-packages/twisted/internet/default.py", line 
523, in doSelect
    _logrun(selectable, _drdw, selectable, method, dict)
  File "/usr/lib/python2.3/site-packages/twisted/python/log.py", line 65, in 
callWithLogger
    callWithContext({"system": lp}, func, *args, **kw)
  File "/usr/lib/python2.3/site-packages/twisted/python/log.py", line 52, in 
callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "/usr/lib/python2.3/site-packages/twisted/python/context.py", line 32, 
in callWithContext
    return func(*args,**kw)
--- <exception caught here> ---
  File "/usr/lib/python2.3/site-packages/twisted/internet/default.py", line 
532, in _doReadOrWrite
    why = getattr(selectable, method)()
  File "/usr/lib/python2.3/site-packages/twisted/internet/tcp.py", line 250, 
in doRead
    return self.protocol.dataReceived(data)
  File "/usr/lib/python2.3/site-packages/twisted/protocols/basic.py", line 
229, in dataReceived
    return self.rawDataReceived(data)
  File "twgfserver.py", line 20, in rawDataReceived
    self.transport.write(6)
  File "/usr/lib/python2.3/site-packages/twisted/internet/abstract.py", line 
140, in write
    assert isinstance(data, str), "Data must be a string."
exceptions.AssertionError: Data must be a string.




From rayg at varchars.com  Fri Apr 23 12:23:53 2004
From: rayg at varchars.com (rayg)
Date: Fri, 23 Apr 2004 09:23:53 -0700 (PDT)
Subject: [Twisted-Python] twisted on os x: cfreactor or kqreactor?
Message-ID: <Pine.OSX.4.58.0404230852200.21404@slither.local>

i just created a fink package for PyKQeue
(http://sourceforge.net/tracker/index.php?func=detail&aid=940552&group_id=17203&atid=414256)
and this now allows me to use kqreactor.

if i'm not not planning on using any cocoa functionality, is there any
advantage to use cfreactor over kqreactor on os x?

i wasn't able to find any direct comparison between the mechanisms behind
kqreactor and cfreactor, but i did see that NSRunLoop is asynchronous,
like kqueue.  i've tested both reactors on a simple script and noticed
cfreactor doesn't stop() 75% of the time, so i'm inclined to just use
kqreactor, instead of tracking down why cfreactor isn't behaving...



From dialtone at aruba.it  Thu Apr  1 03:13:03 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Thu, 01 Apr 2004 12:13:03 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <406AF172.2010000@aruba.it>
References: <406A7466.3090800@aruba.it> <20040331103927.GA8642@frobozz> <406AAB35.1000208@aruba.it> <20040331123406.GA14465@frobozz> <406AC19B.20207@aruba.it> <406AF172.2010000@aruba.it>
Message-ID: <406BEB2F.5060608@aruba.it>

Valentino Volonghi aka Dialtone wrote:

> The code locked at 404th feed downloaded without anything running (no 
> parsing and no memoizing).
>
> No network activity just after the 404th.
> Till the 404th it's not very fast, after the lock (and my Ctrl+C) it 
> goes at light speed till the 758th feed. (and this can be because of
> it's waiting for the feeds to get downloaded, and this happens at 
> about the 400th)

I went on testing and found some interesting things...
I also tried with just 36 feeds and it locked in the same way, then I 
tested again with that feed and everything worked fine.
So maybe it's the resolver that locks.

I tried with the solution, that Andrew posted on the issue tracker but I 
got a lot of this:

[Failure instance: Traceback: twisted.internet.defer.TimeoutError, 
[Query('www.ozzie.net', 255, 1)]
]
====================
Trying to go on...
parsing...
[Failure instance: Traceback: exceptions.AttributeError, 'NoneType' 
object has no attribute 'find'
/usr/lib/python2.3/site-packages/twisted/internet/defer.py:313:_runCallbacks
twisted-rss.py:107:parseFeed
/home/dialtone/programmi_didattici/rss-aggregator/feedparser.py:1679:parse
/home/dialtone/programmi_didattici/rss-aggregator/feedparser.py:1289:_open_resource
/usr/lib/python2.3/urlparse.py:49:urlparse
/usr/lib/python2.3/urlparse.py:79:urlsplit
]
====================
Trying to go on...
Memoizing http://www.ozzie.net/blog/rss.xml ...
--------------------
finished retrieving
Feed Version: [Failure instance: Traceback: exceptions.AttributeError, 
'NoneType' object has no attribute 'get'
/usr/lib/python2.3/site-packages/twisted/internet/defer.py:313:_runCallbacks
twisted-rss.py:123:workOnPage
]
====================
Trying to go on...
Closing connection number 720...
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Obviously the error is the first one, since without a feed to parse, all 
the chain fails.

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/




From andrew-twisted at puzzling.org  Thu Apr  1 05:31:23 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 1 Apr 2004 22:31:23 +1000
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <406BEB2F.5060608@aruba.it>
References: <406A7466.3090800@aruba.it> <20040331103927.GA8642@frobozz> <406AAB35.1000208@aruba.it> <20040331123406.GA14465@frobozz> <406AC19B.20207@aruba.it> <406AF172.2010000@aruba.it> <406BEB2F.5060608@aruba.it>
Message-ID: <20040401123123.GC14703@frobozz>

On Thu, Apr 01, 2004 at 12:13:03PM +0200, Valentino Volonghi aka Dialtone wrote:
> 
> I went on testing and found some interesting things...

I just found something interesting too -- I just took a quick peek at
feedparser, and the parse function looks like it fetches the page
synchronously using urllib.  That's *not* a good thing to do from inside
Twisted's main loop.  It looks like you want your parseFeed method to call:

    r = FeedParser(baseuri)
    r.feed(data)

like feedparser.parse does internally.  (You'll need to do a little bit of
work to return the same sort dictionary that parse constructs for you).

-Andrew.




From dialtone at aruba.it  Thu Apr  1 07:03:07 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Thu, 01 Apr 2004 16:03:07 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <20040401123123.GC14703@frobozz>
References: <406A7466.3090800@aruba.it> <20040331103927.GA8642@frobozz> <406AAB35.1000208@aruba.it> <20040331123406.GA14465@frobozz> <406AC19B.20207@aruba.it> <406AF172.2010000@aruba.it> <406BEB2F.5060608@aruba.it> <20040401123123.GC14703@frobozz>
Message-ID: <406C211B.2040904@aruba.it>

Andrew Bennetts wrote:

>On Thu, Apr 01, 2004 at 12:13:03PM +0200, Valentino Volonghi aka Dialtone wrote:
>  
>
>>I went on testing and found some interesting things...
>>    
>>
>
>I just found something interesting too -- I just took a quick peek at
>feedparser, and the parse function looks like it fetches the page
>synchronously using urllib.  That's *not* a good thing to do from inside
>Twisted's main loop.  It looks like you want your parseFeed method to call:
>
>    r = FeedParser(baseuri)
>    r.feed(data)
>
>like feedparser.parse does internally.  (You'll need to do a little bit of
>work to return the same sort dictionary that parse constructs for you).
>  
>
I verified... The parser only downloads if as url is supplied, otherwise 
it does not.

Anyway, since it needs a StringIO like argument, now I do myself the 
conversion into StringIO and this
will make the parser always return as fast as possible from 
_open_resource().

I'm starting to think that this is some kind of 'race condition' inside 
twisted, or something similar.
BTW, I'll investigate more and more :)

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/




From bob at redivi.com  Thu Apr  1 08:08:28 2004
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 1 Apr 2004 10:08:28 -0500
Subject: [Twisted-Python] help ssh forwarding.
In-Reply-To: <FC91241E-7364-11D8-AF5B-000A956F9A40@enginesofcreation.ie>
References: <FC91241E-7364-11D8-AF5B-000A956F9A40@enginesofcreation.ie>
Message-ID: <6EB0D811-83EE-11D8-8201-000A95686CD8@redivi.com>

On Mar 11, 2004, at 9:04 AM, Oisin Mulvihill wrote:

> I have a series of linux based internet kiosks at a variety
> of sites. I need to be able to connect back into the kiosk
> from the main server. However direct connections aren't possible
> as kiosks are behind there own router/firewall.

This might be considered heresy here, but I've solved this exact 
problem using autossh ( http://www.harding.motd.ca/autossh/ ) and 
crontab entries.

-bob




From oisin at enginesofcreation.ie  Thu Apr  1 08:27:32 2004
From: oisin at enginesofcreation.ie (Oisin Mulvihill)
Date: Thu, 01 Apr 2004 16:27:32 +0100
Subject: [Twisted-Python] help ssh forwarding.
In-Reply-To: <6EB0D811-83EE-11D8-8201-000A95686CD8@redivi.com>
References: <FC91241E-7364-11D8-AF5B-000A956F9A40@enginesofcreation.ie> <6EB0D811-83EE-11D8-8201-000A95686CD8@redivi.com>
Message-ID: <406C34E4.7070200@enginesofcreation.ie>

Bob Ippolito wrote:

>
> On Mar 11, 2004, at 9:04 AM, Oisin Mulvihill wrote:
>
>> I have a series of linux based internet kiosks at a variety
>> of sites. I need to be able to connect back into the kiosk
>> from the main server. However direct connections aren't possible
>> as kiosks are behind there own router/firewall.
>
>
> This might be considered heresy here, but I've solved this exact 
> problem using autossh (

I won't tell if you won't ;)

> http://www.harding.motd.ca/autossh/ ) and crontab entries.
>
> -bob
>
 From a quick glance at this looks like what I need. I'll check it out 
properly
asap. Using twisted's Process to spawn ssh does work, its just not very
pretty.

Thanks,

om



From glyph at divmod.com  Thu Apr  1 08:48:58 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 1 Apr 2004 10:48:58 -0500
Subject: [Twisted-Python] help ssh forwarding.
In-Reply-To: <A373225C-735B-11D8-AF5B-000A956F9A40@enginesofcreationsoftware.com>
References: <A373225C-735B-11D8-AF5B-000A956F9A40@enginesofcreationsoftware.com>
Message-ID: <1705792E-83F4-11D8-98E3-000393C9700E@divmod.com>


On Mar 11, 2004, at 7:57 AM, Oisin Mulvihill wrote:

> My program (attached) just forwards from 11122
> on the kiosk to 22 on the server which isn't what I want.

It sounds like you're using the equivalent of -L, not -R.  Without docs 
it's hard for me to say, but I think you want 
forwarding.openConnectForwardingClient...?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040401/7fb20a4d/attachment.sig>

From justinjohnson at fastmail.fm  Thu Apr  1 09:10:40 2004
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Thu, 01 Apr 2004 10:10:40 -0600
Subject: [Twisted-Python] Closing PB Connections
Message-ID: <1080835840.15117.183720048@webmail.messagingengine.com>

I found some stuff on google about this but it still isn't clear to me
what I need to do.

I noticed that everytime I make a new connection via PB, the server has
another ESTABLISHED connection between itself and the PB client box (via
netstat output).  Do I need to do something to close these connections?

I connect as follows:

class MyClient:

    ...

    def connectToServer(self, server):
        """Connect to the RatControl service
        """
        factory = pb.PBClientFactory()
        reactor.connectTCP(server, pbPortNumber, factory)
        d = factory.login(credentials.UsernamePassword(self.username,
        self.password), None)
        return d



    def someMethod(self):
        ...
        d = self.connectToServer(server)
        d.addCallback(_cbDoSomething, arg1, arg2)

Thanks.
-Justin



From radix at twistedmatrix.com  Thu Apr  1 11:39:14 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 01 Apr 2004 13:39:14 -0500
Subject: [Twisted-Python] Re: Using compiled C Library with Twisted?
Message-ID: <406C61D2.3090400@twistedmatrix.com>

This message is more appropriate for twisted-python at twistedmatrix.com, 
not twisted-web at twistedmatrix.com.

> -------- Original Message --------
> Subject: [Twisted-web] Using compiled C Library with Twisted?
> From: Jiannan Fu <jf at ypsilon.net>
> To: twisted-web at twistedmatrix.com
> 
> hi there,
> i got the following problem: I have a set of compiled C files, providing 
> a API for a special encryption / decrytion of messages to be exchanged 
> over the internet, well documented and with a lot of programming 
> examples of how to work with it and its functions (in this case the 
> examples are all in C). Now i want to use it with twisted together, to 
> have all the advantages of twisted (especially the reactor instead of 
> threading, deferred and so on), but the C API to do the last step before 
> messages are send out.
> 
> The C API should just play some kind of middleware between the tcp-ip 
> protokoll and the twisted server. Is it possible to extending twisted 
> with that library by "just import" them?
> 
> Any kind of advice / suggestions would help

You don't have to do anything special to get C libraries to work with 
Twisted; you'll have to create a Python-C binding for them, of course, 
and then you just import the binding and call the functions in it.

Just call out to these functions to decode and encode chunks of data 
when you receive or send it. From the info you provided, that's all the 
advice I can come up with.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040401/56c61de6/attachment.sig>

From radix at twistedmatrix.com  Thu Apr  1 12:49:14 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 01 Apr 2004 14:49:14 -0500
Subject: [Twisted-Python] Testing a mailman upgrade
Message-ID: <406C723A.6070001@twistedmatrix.com>

I just upgraded mailman from 2.0.11 to 2.1.4; hopefully all went well!

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040401/f65fe3c2/attachment.sig>

From qpalzm at alltel.net  Thu Apr  1 05:52:33 2004
From: qpalzm at alltel.net (Kaleb Brasee)
Date: Thu, 1 Apr 2004 07:52:33 -0500
Subject: [Twisted-Python] Can I connect multiple class instances to 1
	Twisted factory?
Message-ID: <002301c417e8$340dfd00$0100a8c0@MEDION>

Is this even possible?  I'm designing a simple chat and game client/server as an intro to Python, and it would be nice to represent the different interfaces (public chat room, private chat rooms, game instances) as totally seperate classes and show them in totally seperate windows.

Given my basic understanding of Twisted, I see no way of doing this, and my whole GUI is contained in one class.  The project is doable this way, it would just be much better with multiple class and multiple window seperation.

I am using Tkinter to design my GUIs, using the specialized Twisted support code to setup the reactor.

If anyone can give me any direction, I would appreciate it very much.

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040401/62edf598/attachment.html>

From developer at csrules.dyndns.org  Thu Apr  1 15:50:53 2004
From: developer at csrules.dyndns.org (darryl)
Date: Thu, 01 Apr 2004 16:50:53 -0600
Subject: [Twisted-Python] wxreactor
Message-ID: <406C9CCD.9050204@csrules.dyndns.org>

I tried to run /doc/examples/wxdemo.py

And i get a window to pop up but no menu.
does wxreactor work as advertised? Is anyone
else having success?

-darryl
-- 
http://randomthoughts.vandorp.ca/syncato/WK/blog



From andrew-twisted at puzzling.org  Thu Apr  1 16:01:00 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 2 Apr 2004 09:01:00 +1000
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <406C211B.2040904@aruba.it>
References: <406A7466.3090800@aruba.it> <20040331103927.GA8642@frobozz>
	<406AAB35.1000208@aruba.it> <20040331123406.GA14465@frobozz>
	<406AC19B.20207@aruba.it> <406AF172.2010000@aruba.it>
	<406BEB2F.5060608@aruba.it> <20040401123123.GC14703@frobozz>
	<406C211B.2040904@aruba.it>
Message-ID: <20040401230100.GA32379@frobozz>

On Thu, Apr 01, 2004 at 04:03:07PM +0200, Valentino Volonghi aka Dialtone wrote:
> 
> I'm starting to think that this is some kind of 'race condition' inside 
> twisted, or something similar.
> BTW, I'll investigate more and more :)

But the traceback you posted from the deferred chain was from the guts of
feedparser...

-Andrew.




From golux at comcast.net  Thu Apr  1 16:40:36 2004
From: golux at comcast.net (Stephen C. Waterbury)
Date: Thu, 01 Apr 2004 18:40:36 -0500
Subject: [Twisted-Python] wxreactor
In-Reply-To: <406C9CCD.9050204@csrules.dyndns.org>
References: <406C9CCD.9050204@csrules.dyndns.org>
Message-ID: <406CA874.1050107@comcast.net>

darryl wrote:
> I tried to run /doc/examples/wxdemo.py
> 
> And i get a window to pop up but no menu.
> does wxreactor work as advertised? Is anyone
> else having success?

Yes, it works for me.  Of course, the menu is
just File/Exit.  I haven't tried using wxreactor
in anything real yet, though.

Steve




From uwe at oss4u.com  Thu Apr  1 17:02:14 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Thu, 1 Apr 2004 16:02:14 -0800
Subject: [Twisted-Python] wxreactor
In-Reply-To: <406C9CCD.9050204@csrules.dyndns.org>
References: <406C9CCD.9050204@csrules.dyndns.org>
Message-ID: <200404011602.14908.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Which twisted Version are you using ?
The "wxreactor" is fairly new. The old way it was done before the wxreactor 
had exactly the symptoms you describe. Was the demo code updated to use the 
wxreactor ? 
I just checked the example code in 1.1.1 and the wxdemo.yp file still uses old 
wxsupport (which is broken).

UC


On Thursday 01 April 2004 02:50 pm, darryl wrote:
> I tried to run /doc/examples/wxdemo.py
>
> And i get a window to pop up but no menu.
> does wxreactor work as advertised? Is anyone
> else having success?
>
> -darryl
- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFAbK2GjqGXBvRToM4RAn8oAJ94ZHvJ2TLzITCO3podIRJqFeIFIgCfXMEY
05UgeqSWj1ADTULD5D+gTAE=
=1CKT
-----END PGP SIGNATURE-----




From developer at csrules.dyndns.org  Thu Apr  1 23:25:09 2004
From: developer at csrules.dyndns.org (darryl)
Date: Thu, 01 Apr 2004 22:25:09 -0800
Subject: [Twisted-Python] wxreactor
In-Reply-To: <200404011602.14908.uwe@oss4u.com>
References: <406C9CCD.9050204@csrules.dyndns.org>
	<200404011602.14908.uwe@oss4u.com>
Message-ID: <406D0745.9090005@csrules.dyndns.org>

Uwe C. Schroeder wrote:

>
>Which twisted Version are you using ?
>The "wxreactor" is fairly new. The old way it was done before the wxreactor 
>had exactly the symptoms you describe. Was the demo code updated to use the 
>wxreactor ? 
>I just checked the example code in 1.1.1 and the wxdemo.yp file still uses old 
>wxsupport (which is broken).
>
>UC
>  
>
I'm using latest twisted from a svn checkout this afternoon.

The example code uses:
---------------------------------------
from twisted.internet import wxreactor
wxreactor.install()
from twisted.internet import reactor
---------------------------------------

which I believe is the new way no?


Interesting, i just ran the code on a windows
box and it ran fine. What are you guys running
on windows or linux?

-darryl



--
http://randomthoughts.vandorp.ca/syncato/WK/blog




From golux at comcast.net  Thu Apr  1 21:27:15 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Thu, 01 Apr 2004 23:27:15 -0500
Subject: [Twisted-Python] wxreactor
In-Reply-To: <406D0745.9090005@csrules.dyndns.org>
References: <406C9CCD.9050204@csrules.dyndns.org>	<200404011602.14908.uwe@oss4u.com>
	<406D0745.9090005@csrules.dyndns.org>
Message-ID: <406CEBA3.9070906@comcast.net>

darryl wrote:

> I'm using latest twisted from a svn checkout this afternoon.

I'm using an svn checkout from about 15 minutes ago.

> Interesting, i just ran the code on a windows
> box and it ran fine. What are you guys running
> on windows or linux?

Red Hat 9 -- works just fine.  (heh :)

Steve



From uwe at oss4u.com  Thu Apr  1 21:49:22 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Thu, 1 Apr 2004 20:49:22 -0800
Subject: [Twisted-Python] wxreactor
In-Reply-To: <406CEBA3.9070906@comcast.net>
References: <406C9CCD.9050204@csrules.dyndns.org>
	<406D0745.9090005@csrules.dyndns.org>
	<406CEBA3.9070906@comcast.net>
Message-ID: <200404012049.22251.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


As I just asked Darryl off the list: Do you use GTK2 wxPython on Redhat 9 ?
My guess would be that the GTK2 event loop works different. In that case we'd 
have to talk to Robin Dunn (wxPython) or one of the wxWindows core developers 
and figure out what's the difference to GTK1.

On Thursday 01 April 2004 08:27 pm, Stephen Waterbury wrote:
> darryl wrote:
> > I'm using latest twisted from a svn checkout this afternoon.
>
> I'm using an svn checkout from about 15 minutes ago.
>
> > Interesting, i just ran the code on a windows
> > box and it ran fine. What are you guys running
> > on windows or linux?
>
> Red Hat 9 -- works just fine.  (heh :)
>
> Steve
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFAbPDSjqGXBvRToM4RAhqUAKCMN+bZlyLQT0ttFr48NEipUd89lQCgi3dI
EvYXgV7v2MWASOw/fa+XvkA=
=EPs1
-----END PGP SIGNATURE-----




From golux at comcast.net  Thu Apr  1 22:11:27 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 02 Apr 2004 00:11:27 -0500
Subject: [Twisted-Python] wxreactor
In-Reply-To: <200404012049.22251.uwe@oss4u.com>
References: <406C9CCD.9050204@csrules.dyndns.org>	<406D0745.9090005@csrules.dyndns.org>	<406CEBA3.9070906@comcast.net>
	<200404012049.22251.uwe@oss4u.com>
Message-ID: <406CF5FF.3070404@comcast.net>

Uwe C. Schroeder wrote:

> As I just asked Darryl off the list: Do you use GTK2 wxPython on Redhat 9 ?

It's pretty likely, since I have both GTK and GTK2 installed
and I compiled wxPython from source, so suspect it would use
GTK2 by default (and I didn't tell it not to).

> My guess would be that the GTK2 event loop works different. In that case we'd 
> have to talk to Robin Dunn (wxPython) or one of the wxWindows core developers 
> and figure out what's the difference to GTK1.

Itamar could chime in here, since he re-wrote the wxreactor
and may have tested it with one or the other ... Itamar?

(I just glanced quickly at the code, and it looks like he
basically incorporated your recipe, Uwe.  :)



From dialtone at aruba.it  Fri Apr  2 00:12:41 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Fri, 02 Apr 2004 09:12:41 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <20040401230100.GA32379@frobozz>
References: <406A7466.3090800@aruba.it>
	<20040331103927.GA8642@frobozz>	<406AAB35.1000208@aruba.it>
	<20040331123406.GA14465@frobozz>	<406AC19B.20207@aruba.it>
	<406AF172.2010000@aruba.it>	<406BEB2F.5060608@aruba.it>
	<20040401123123.GC14703@frobozz>	<406C211B.2040904@aruba.it>
	<20040401230100.GA32379@frobozz>
Message-ID: <406D1269.9070700@aruba.it>

Andrew Bennetts wrote:

>But the traceback you posted from the deferred chain was from the guts of
>feedparser...
>  
>
Looking at strace output it seems more like Twisted-related... Here is 
the output:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
gettimeofday({1080889267, 866232}, NULL) = 0
close(313)                              = 0
gettimeofday({1080889267, 866410}, NULL) = 0
select(726, [4 13 17 18 23 26 28 31 39 40 42 44 45 47 49 50 51 52 55 58 
60 63 66 67 69 73 74 77 78 80 81 82 86 89 92 98 99 101 104 108 109 110 
111 112 115 116 122 124 127 128 130 131 132 139 142 145 147 149 153 157 
158 162 164 171 172 173 176 178 180 182 183 185 187 188 190 191 192 193 
194 195 196 225 226 227 228 230 232 234 237 238 241 246 248 249 250 251 
253 254 256 257 258 260 262 263 264 267 268 269 271 273 274 275 277 278 
281 282 284 287 294 296 297 298 299 301 303 304 305 306 309 310 312 314 
316 317 321 322 325 327 329 330 331 332 334 335 336 339 340 343 345 346 
348 349 350 351 356 359 361 364 365 366 367 368 371 372 373 374 375 378 
379 380 383 385 386 387 390 393 396 397 399 400 401 405 406 407 408 410 
414 415 417 422 427 428 430 431 432 436 438 439 440 442 443 445 447 448 
450 451 452 453 455 456 458 459 462 464 467 468 476 477 479 480 481 482 
486 488 489 493 494 496 497 498 503 505 506 507 508 510 511 513 514 515 
517 520 523 525 527 528 529 534 535 537 538 539 544 547 550 553 554 556 
558 559 560 561 565 566 569 572 574 575 577 579 580 586 587 588 589 590 
592 593 594 597 598 600 601 602 603 604 605 606 609 610 611 612 613 615 
620 622 623 628 630 631 633 634 635 637 640 643 645 651 654 655 659 660 
664 665 666 667 670 671 675 676 677 678 681 683 684 687 715 725], [], 
[], NULL) = 1 (in [447])
recv(447, 0xa3cc9e4, 65536, 0)          = -1 ECONNRESET (Connection 
reset by peer)
shutdown(447, 2 /* send and receive */) = -1 ENOTCONN (Transport 
endpoint is not connected)
write(1, "parsing...\n", 11parsing...
)            = 11
futex(0x8067858, FUTEX_WAKE, 1)         = 0
futex(0x8067858, FUTEX_WAKE, 1)         = 0
futex(0x8067858, FUTEX_WAKE, 1)         = 0
write(1, "parsed feed\n", 12parsed feed
)           = 12
write(1, "Memoizing http://weblogs.asp.net"..., 53Memoizing 
http://weblogs.asp.net/JohanL/rss.aspx ...
) = 53
gettimeofday({1080889267, 968545}, NULL) = 0
write(1, "--------------------\n", 21--------------------
)  = 21
write(1, "finished retrieving\n", 20finished retrieving
)   = 20
write(1, "Feed Version: \n", 15Feed Version:
)        = 15
write(1, "--------------------\n", 21--------------------
)  = 21
write(1, "Closing connection number 404..."..., 33Closing connection 
number 404...
) = 33
write(1, "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"..., 
41=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
) = 41
write(1, "405 730\n", 8405 730
)                = 8
gettimeofday({1080889267, 974236}, NULL) = 0
close(447)                              = 0
gettimeofday({1080889267, 974428}, NULL) = 0
select(726, [4 13 17 18 23 26 28 31 39 40 42 44 45 47 49 50 51 52 55 58 
60 63 66 67 69 73 74 77 78 80 81 82 86 89 92 98 99 101 104 108 109 110 
111 112 115 116 122 124 127 128 130 131 132 139 142 145 147 149 153 157 
158 162 164 171 172 173 176 178 180 182 183 185 187 188 190 191 192 193 
194 195 196 225 226 227 228 230 232 234 237 238 241 246 248 249 250 251 
253 254 256 257 258 260 262 263 264 267 268 269 271 273 274 275 277 278 
281 282 284 287 294 296 297 298 299 301 303 304 305 306 309 310 312 314 
316 317 321 322 325 327 329 330 331 332 334 335 336 339 340 343 345 346 
348 349 350 351 356 359 361 364 365 366 367 368 371 372 373 374 375 378 
379 380 383 385 386 387 390 393 396 397 399 400 401 405 406 407 408 410 
414 415 417 422 427 428 430 431 432 436 438 439 440 442 443 445 448 450 
451 452 453 455 456 458 459 462 464 467 468 476 477 479 480 481 482 486 
488 489 493 494 496 497 498 503 505 506 507 508 510 511 513 514 515 517 
520 523 525 527 528 529 534 535 537 538 539 544 547 550 553 554 556 558 
559 560 561 565 566 569 572 574 575 577 579 580 586 587 588 589 590 592 
593 594 597 598 600 601 602 603 604 605 606 609 610 611 612 613 615 620 
622 623 628 630 631 633 634 635 637 640 643 645 651 654 655 659 660 664 
665 666 667 670 671 675 676 677 678 681 683 684 687 715 725], [], [], NULL

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Here it lock, but now, since I'm using strace, it won't restart after 
Ctrl+C.

As I said before... The download of _ALL_ feeds has already finished 
when twisted locks,


-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/




From andrew-twisted at puzzling.org  Fri Apr  2 04:57:11 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 2 Apr 2004 21:57:11 +1000
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <406D1269.9070700@aruba.it>
References: <20040331103927.GA8642@frobozz> <406AAB35.1000208@aruba.it>
	<20040331123406.GA14465@frobozz> <406AC19B.20207@aruba.it>
	<406AF172.2010000@aruba.it> <406BEB2F.5060608@aruba.it>
	<20040401123123.GC14703@frobozz> <406C211B.2040904@aruba.it>
	<20040401230100.GA32379@frobozz> <406D1269.9070700@aruba.it>
Message-ID: <20040402115711.GA14130@frobozz>

On Fri, Apr 02, 2004 at 09:12:41AM +0200, Valentino Volonghi aka Dialtone wrote:
> Andrew Bennetts wrote:
> 
> >But the traceback you posted from the deferred chain was from the guts of
> >feedparser...
> > 
> >
> Looking at strace output it seems more like Twisted-related... Here is 
> the output:
> 
[...]
> select(726, [4 13 17 18 23 26 28 31 39 40 42 44 45 47 49 50 51 52 55 58 
[...]
> 665 666 667 670 671 675 676 677 678 681 683 684 687 715 725], [], [], NULL
> 
> @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
> Here it lock, but now, since I'm using strace, it won't restart after 
> Ctrl+C.
> 
> As I said before... The download of _ALL_ feeds has already finished 
> when twisted locks,

But then why is there still a huge number of file descriptors in the select
call?  Something is definitely very odd... :/

-Andrew.




From dialtone at aruba.it  Fri Apr  2 05:24:33 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Fri, 02 Apr 2004 14:24:33 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <20040402115711.GA14130@frobozz>
References: <20040331103927.GA8642@frobozz>
	<406AAB35.1000208@aruba.it>	<20040331123406.GA14465@frobozz>
	<406AC19B.20207@aruba.it>	<406AF172.2010000@aruba.it>
	<406BEB2F.5060608@aruba.it>	<20040401123123.GC14703@frobozz>
	<406C211B.2040904@aruba.it>	<20040401230100.GA32379@frobozz>
	<406D1269.9070700@aruba.it> <20040402115711.GA14130@frobozz>
Message-ID: <406D5B81.5090302@aruba.it>

Andrew Bennetts wrote:

>>665 666 667 670 671 675 676 677 678 681 683 684 687 715 725], [], [], NULL
>>
>>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>Here it lock, but now, since I'm using strace, it won't restart after 
>>Ctrl+C.
>>
>>As I said before... The download of _ALL_ feeds has already finished 
>>when twisted locks,
>>    
>>
>
>But then why is there still a huge number of file descriptors in the select
>call?  Something is definitely very odd... :/
>  
>
well, I think that's because there are more deferreds to be called or 
because even if the page has
been downloaded the reactor was busy with other feeds and not checking 
the select, I think...

I'm not that expert in twisted's internals, as you probably are.

thx for your help, I hope to solve this problem...

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/




From dialtone at aruba.it  Fri Apr  2 05:25:55 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Fri, 02 Apr 2004 14:25:55 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <20040402115711.GA14130@frobozz>
References: <20040331103927.GA8642@frobozz>
	<406AAB35.1000208@aruba.it>	<20040331123406.GA14465@frobozz>
	<406AC19B.20207@aruba.it>	<406AF172.2010000@aruba.it>
	<406BEB2F.5060608@aruba.it>	<20040401123123.GC14703@frobozz>
	<406C211B.2040904@aruba.it>	<20040401230100.GA32379@frobozz>
	<406D1269.9070700@aruba.it> <20040402115711.GA14130@frobozz>
Message-ID: <406D5BD3.3040101@aruba.it>

Andrew Bennetts wrote:

Oh... forgot to say.

A full version of the aggregator is ready for download at
http://xoomer.virgilio.it/dialtone/rss-aggregator.tar.bz2

Just in case you want to try the full download yourself, to see what's 
going on.

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/




From sam at couter.dropbear.id.au  Fri Apr  2 05:50:26 2004
From: sam at couter.dropbear.id.au (Sam Couter)
Date: Fri, 2 Apr 2004 22:50:26 +1000
Subject: [Twisted-Python] Trivial bug in StandardIO.connectionLost()
Message-ID: <20040402125026.GF3954@yosamite.tekno.house>

StandardIO.connectionLost() loses the reason for the lost connection.

Trivial patch:

Index: twisted/internet/stdio.py
===================================================================
--- twisted/internet/stdio.py	(revision 10451)
+++ twisted/internet/stdio.py	(working copy)
@@ -106,4 +106,4 @@
     def connectionLost(self, reason):
         """The connection was lost.
         """
-        self.protocol.connectionLost()
+        self.protocol.connectionLost(reason)

-- 
Sam "Eddie" Couter  |  mailto:sam at couter.dropbear.id.au
Debian Developer    |  mailto:eddie at debian.org
                    |  jabber:sam at teknohaus.dyndns.org
OpenPGP fingerprint:  A46B 9BB5 3148 7BEA 1F05  5BD5 8530 03AE DE89 C75C
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20040402/79bc304c/attachment.sig>

From itamar at itamarst.org  Fri Apr  2 07:41:00 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 02 Apr 2004 09:41:00 -0500
Subject: [Twisted-Python] Trivial bug in StandardIO.connectionLost()
In-Reply-To: <20040402125026.GF3954@yosamite.tekno.house>
References: <20040402125026.GF3954@yosamite.tekno.house>
Message-ID: <1080916859.13478.193.camel@sheriffpony>

Thanks, fixed.




From itamar at itamarst.org  Fri Apr  2 07:44:25 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 02 Apr 2004 09:44:25 -0500
Subject: [Twisted-Python] wxreactor
In-Reply-To: <406CF5FF.3070404@comcast.net>
References: <406C9CCD.9050204@csrules.dyndns.org>
	<406D0745.9090005@csrules.dyndns.org>	<406CEBA3.9070906@comcast.net>
	<200404012049.22251.uwe@oss4u.com>  <406CF5FF.3070404@comcast.net>
Message-ID: <1080917064.13478.198.camel@sheriffpony>

On Fri, 2004-04-02 at 00:11, Stephen Waterbury wrote:

> Itamar could chime in here, since he re-wrote the wxreactor
> and may have tested it with one or the other ... Itamar?

I don't have gtk2 wx support in debian. Please add a bug report, on
twistedmatrix.com/bugs/ - "wxreactor fails on linux using gtk2" or
something along those lines, assuming gtk2 really is the issue, so
someone with access to it should check.

But note that wx is fussy and annoying and that if you're using it you
may be better off in some cases just running it on different thread than
twisted.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From justinjohnson at fastmail.fm  Fri Apr  2 08:10:32 2004
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 02 Apr 2004 09:10:32 -0600
Subject: [Twisted-Python] Perspective Broker and [WINSOCK] Connection reset
	by peer
Message-ID: <1080918632.10210.183787025@webmail.messagingengine.com>

I'm trying to track down a problem and I'm not sure if Twisted is
involved or not.  Here are the details.

I administer Rational ClearCase.  One task I do is removing repositories
(a repository is called a VOB in ClearCase).  If I am logged onto the
machine locally I run the command "cleartool rmvob -f C:\VOBs\myvob.vbs".
 ClearCase uses RPC calls in some manner unknown to me for most of its
operations (probably with this command too).  So when I run the command,
some RPC interaction probably takes place and then the VOB is removed. 
The command is being run on the server where the VOB exists, but I
believe it still uses RPC, even if everything is local.

I have been using Twisted, specifically PB, to help me administer these
servers.  The PB service has a method remote_rmvob that can be called
remotely to remove a VOB.  Sometimes this works, but other times I get
the following error:

[WINSOCK] Connection reset by peer
cleartool: Error: Versioned object base "C:\VOBS\myvob.vbs" not deleted.
cleartool: Error: Trouble removing versioned object base
"C:\VOBS\myvob.vbs".

If I retry the PB operation again and again, eventually it succeeds.  On
some servers it takes more retries than others to get a successful
removal, but eventually it succeeds.  If I run the command locally with
no PB/Twisted involved I never get this error.

So I've been doing some research on this WINSOCK error, trying to
determine if it is being caused by the fact that I'm running the command
via PB.

The site http://frontier.userland.com/discuss/msgReader$173 has the
following info:

10054

WSAECONNRESET -- Connection reset by peer. This occurs when an
established connection is shut down for some reason by the remote
computer. 

The following thread discusses a similar problem with rsync where the
connection wasn't shutdown gracefully and a similar error occurred.

http://lists.samba.org/archive/rsync/2001-October/000407.html
http://lists.samba.org/archive/rsync/2002-April/002076.html

Does anyone with more networking knowledge than me have any ideas on what
might be causing this problem?  All I have is fuzzy ideas in my head,
like the command running in a ProcessProtocol might cause some problems,
or PB closing the connection before some important thing happens, ...  As
you can see, it is very fuzzy for me.  :-(

Any help you can provide is appreciated.
Thanks.
-Justin



From developer at csrules.dyndns.org  Fri Apr  2 08:28:41 2004
From: developer at csrules.dyndns.org (darryl)
Date: Fri, 02 Apr 2004 09:28:41 -0600
Subject: [Twisted-Python] wxreactor
In-Reply-To: <1080917064.13478.198.camel@sheriffpony>
References: <406C9CCD.9050204@csrules.dyndns.org>	<406D0745.9090005@csrules.dyndns.org>	<406CEBA3.9070906@comcast.net>	<200404012049.22251.uwe@oss4u.com>
	<406CF5FF.3070404@comcast.net>
	<1080917064.13478.198.camel@sheriffpony>
Message-ID: <406D86A9.6010301@csrules.dyndns.org>

Itamar Shtull-Trauring wrote:
> On Fri, 2004-04-02 at 00:11, Stephen Waterbury wrote:
> 
> 
>>Itamar could chime in here, since he re-wrote the wxreactor
>>and may have tested it with one or the other ... Itamar?
> 
> 
> I don't have gtk2 wx support in debian. Please add a bug report, on
> twistedmatrix.com/bugs/ - "wxreactor fails on linux using gtk2" or
> something along those lines, assuming gtk2 really is the issue, so
> someone with access to it should check.
> 
> But note that wx is fussy and annoying and that if you're using it you
> may be better off in some cases just running it on different thread than
> twisted.
> 

I am using gtk2, so if anyone else can confirm that this is what
is causing it we can file a bug report. I'm hesitant to do that if
it's only me.

As for running wx and twisted in their own threads. Is there
a recipe somewhere for doing that?

-darryl

-- 
http://randomthoughts.vandorp.ca/syncato/WK/blog



From exarkun at divmod.com  Fri Apr  2 08:35:36 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 02 Apr 2004 15:35:36 GMT
Subject: [Twisted-Python] Can I connect multiple class instances to 1
	Twisted factory?
Message-ID: <20040402153536.20554.1852910675.divmod.quotient.30@marconi>

On Thu, 1 Apr 2004 07:52:33 -0500, "Kaleb Brasee" <qpalzm at alltel.net> wrote:
> Is this even possible?  I'm designing a simple chat and game
> client/server as an intro to Python, and it would be nice to represent
> the different interfaces (public chat room, private chat rooms, game
> instances) as totally seperate classes and show them in totally seperate
> windows.
> 
> Given my basic understanding of Twisted, I see no way of doing this, and
> my whole GUI is contained in one class.  The project is doable this way,
> it would just be much better with multiple class and multiple window
> seperation.

  Twisted doesn't enforce any design strategies with respect to any GUI
code you use it with.  If you simply require that your ServerFactory
or ClientFactory be able to reference multiple GUI objects, this seems as
simple as:

    f = YourFactory(chatRoomGUIObject, privateRoomGUIObject,
                    gameGUIObject, ...)

  Not that I would go down that particular road myself.

> 
> I am using Tkinter to design my GUIs, using the specialized Twisted
> support code to setup the reactor.
> 
> If anyone can give me any direction, I would appreciate it very much.
> 

  Think about what information needs to move between the network layer
(where information is received from sockets), the application layer (where
messages from a particular user are differentiated from messages from 
another particular user), and the UI layer (where messages are rendered
in some fashion so as to be visible to the end user).

  Try and come up with the narrowest interface possible that lets that
information move between those layers.  In this instance, "narrow" would
mean not passing every GUI class you have to your factory.  Perhaps an
event broadcasting system would be useful, or maybe a single "GUI" class
that knows how to delegate messages down to the various other GUI classes
you have defined.

> Thanks

  Jp

> 



From exarkun at divmod.com  Fri Apr  2 08:47:06 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 02 Apr 2004 15:47:06 GMT
Subject: [Twisted-Python] ESMTPClient
Message-ID: <20040402154706.20554.1926053632.divmod.quotient.31@marconi>

On Thu, 11 Mar 2004 16:33:35 +0100, "Koen Van Herck" <koen_van_herck at yahoo.com> wrote:
>Does anyone have an example of using twisted.protocols.smtp.ESMTPClient ?
> I.e., I would like to write a client for sending mail to an SMTP server
> which requires authentication.

  ESMTPClient (along with several other client implementations in Twisted) supports
authentication by allowing you to specify a dictionary mapping authentication schemes
to authentication logic objects.

  For example, to use only Cram-MD5 authentication 


    from twisted.protocols import smtp
    from twisted.protocols.imap4 import CramMD5ClientAuthenticator

    class ESMTPClientFactory(protocol.ClientFactory):
        def __init__(self, *a, **kw):
            self.a, self.kw = a, kw

        def buildProtocol(self, addr):
            p = smtp.ESMTPClient('password')
            p.factory = self
            p.requireAuthentication = True
            p.authenticators = {'CRAM-MD5': CramMD5ClientAuthenticator('username')}
            return p

  Having had to write out the above, it is even more apparent to me how much work
is left to be done on the client side of many of our protocol implementations.

  The code is untested; please let me know if you run into any problems with it.

  Jp



From missive at hotmail.com  Fri Apr  2 09:27:13 2004
From: missive at hotmail.com (Lee Harr)
Date: Fri, 02 Apr 2004 16:27:13 +0000
Subject: [Twisted-Python] nevow debugging
Message-ID: <BAY2-F438ZdsIgSca7800043299@hotmail.com>

Hi;

I tried to contact the twisted-web list, but it seems to be having some
issues right now... I hope it is ok to ask here.

Does anyone have an example using nevow in conjunction with other
web service types? I really like the simplicity of "mktap web --path foo"
but my understanding is that twisted web development is going to
be nevow based.

Can these two things work together?

Is there a way to serve nevow pages from a .rpy?

I am looking for a way to debug that does not require restarting the
server every time I change the nevow .tac file.  (like how I can use
import mymod
reload(mymod)
in the .rpy while I am testing).

I hope this makes sense. I would probably just go with something
very simple, but I need to password protect some of the pages and
that seems to indicate using nevow.guard

Thank you for your time.

_________________________________________________________________
The new MSN 8: advanced junk mail protection and 2 months FREE* 
http://join.msn.com/?page=features/junkmail




From dialtone at aruba.it  Fri Apr  2 09:57:23 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Fri, 02 Apr 2004 18:57:23 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <20040402115711.GA14130@frobozz>
References: <20040331103927.GA8642@frobozz>
	<406AAB35.1000208@aruba.it>	<20040331123406.GA14465@frobozz>
	<406AC19B.20207@aruba.it>	<406AF172.2010000@aruba.it>
	<406BEB2F.5060608@aruba.it>	<20040401123123.GC14703@frobozz>
	<406C211B.2040904@aruba.it>	<20040401230100.GA32379@frobozz>
	<406D1269.9070700@aruba.it> <20040402115711.GA14130@frobozz>
Message-ID: <406D9B73.9060401@aruba.it>

Andrew Bennetts wrote:

>But then why is there still a huge number of file descriptors in the select
>call?  Something is definitely very odd... :/
>  
>
I made a very little (30 lines) script that reproduces the error which 
is attached:

the out file is located here:
http://xoomer.virgilio.it/dialtone/out.py
It only contains addressed, it's a single list of 730 addresses.


-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: debug_script.py
URL: </pipermail/twisted-python/attachments/20040402/8faa62a0/attachment.ksh>

From matteo.giacomazzi at email.it  Fri Apr  2 10:23:31 2004
From: matteo.giacomazzi at email.it (Matteo Giacomazzi)
Date: Fri, 2 Apr 2004 19:23:31 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <406D9B73.9060401@aruba.it>
References: <20040331103927.GA8642@frobozz> <406AAB35.1000208@aruba.it>
	<20040331123406.GA14465@frobozz> <406AC19B.20207@aruba.it>
	<406AF172.2010000@aruba.it> <406BEB2F.5060608@aruba.it>
	<20040401123123.GC14703@frobozz> <406C211B.2040904@aruba.it>
	<20040401230100.GA32379@frobozz> <406D1269.9070700@aruba.it>
	<20040402115711.GA14130@frobozz> <406D9B73.9060401@aruba.it>
Message-ID: <17215589234.20040402192331@email.it>

Hi Valentino,

> I  made  a  very  little (30 lines) script that reproduces the error
> which is attached:

> the out file is located here:
> http://xoomer.virgilio.it/dialtone/out.py
> It only contains addressed, it's a single list of 730 addresses.

Just tested twice: first time I had to press Ctrl+C on the 718th feed,
second time I had to press Ctrl+C on the 724th feed.

Regards,
 Matteo




From dialtone at aruba.it  Fri Apr  2 10:44:44 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Fri, 02 Apr 2004 19:44:44 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <17215589234.20040402192331@email.it>
References: <20040331103927.GA8642@frobozz>
	<406AAB35.1000208@aruba.it>	<20040331123406.GA14465@frobozz>
	<406AC19B.20207@aruba.it>	<406AF172.2010000@aruba.it>
	<406BEB2F.5060608@aruba.it>	<20040401123123.GC14703@frobozz>
	<406C211B.2040904@aruba.it>	<20040401230100.GA32379@frobozz>
	<406D1269.9070700@aruba.it>	<20040402115711.GA14130@frobozz>
	<406D9B73.9060401@aruba.it> <17215589234.20040402192331@email.it>
Message-ID: <406DA68C.4040704@aruba.it>

Matteo Giacomazzi wrote:

>Hi Valentino,
>  
>
Hi Matteo,

>Just tested twice: first time I had to press Ctrl+C on the 718th feed,
>second time I had to press Ctrl+C on the 724th feed.
>  
>
Ok then, at least I'm not the only one with this strange behaviour.

I hope that itamar and exarkun are running the script too (I'm talking 
to them on irc)...

It seems to be a bug in twisted.web.client.getPage() while closing the 
connection.

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/




From jn at who.net  Fri Apr  2 14:11:16 2004
From: jn at who.net (john nielsen)
Date: Fri, 02 Apr 2004 16:11:16 -0500
Subject: [Twisted-Python] help w/simple echo example w/deferred and threads
Message-ID: <20040402211117.1399C1F5037@ws1-12.us4.outblaze.com>

I am trying to make a very simple echo server use threads to understand how twisted handles blocking code.  I think I have the server ok but I am not sure how to have the client grab the data from a thread that finished some time later. If I comment out the sleep call, everything works fine. I looked at deferred but am a little confused. What is the simple code the client missing?

Thanks for any help,

john

Here is the server
###############
from twisted.spread import pb
from twisted.internet import reactor
from twisted.python import threadable
threadable.init()
import time,random

class t:
    def __init__(self):
        self.result=''
    def test(self,st='same'):
        time.sleep(1)
        print 'done sleeping'
        self.result=st+':'+str(time.time())
    
class Echoer(pb.Root):
    def __init__(self):
        self.a=t()
    def remote_echo(self, st):
            reactor.callInThread(self.a.test,st)
            print 'from thread',self.a.result
            return self.a.result

if __name__ == '__main__':
    reactor.listenTCP(8789, pb.PBServerFactory(Echoer()))
    reactor.run()

#Here is the client
from twisted.spread import pb
from twisted.internet import reactor, defer
from twisted.python import util

factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
d.addCallback(lambda object: object.callRemote("echo", "hello network"))
d.addCallback(lambda echo: 'server echoed: '+echo)
d.addErrback(lambda reason: 'error: '+str(reason.value))
d.addCallback(util.println)
d = factory.getRootObject()
d.addCallback(lambda object: object.callRemote("echo", "hello network"))
d.addCallback(lambda echo: 'server echoed: '+echo)
d.addErrback(lambda reason: 'error: '+str(reason.value))
d.addCallback(util.println)
d.addCallback(lambda _: reactor.stop())

-- 
_______________________________________________
Get your free email from http://www.iname.com




From dialtone at aruba.it  Fri Apr  2 14:42:28 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Fri, 02 Apr 2004 23:42:28 +0200
Subject: [Twisted-Python] Scalability of an rss-aggregator
In-Reply-To: <17215589234.20040402192331@email.it>
References: <20040331103927.GA8642@frobozz>
	<406AAB35.1000208@aruba.it>	<20040331123406.GA14465@frobozz>
	<406AC19B.20207@aruba.it>	<406AF172.2010000@aruba.it>
	<406BEB2F.5060608@aruba.it>	<20040401123123.GC14703@frobozz>
	<406C211B.2040904@aruba.it>	<20040401230100.GA32379@frobozz>
	<406D1269.9070700@aruba.it>	<20040402115711.GA14130@frobozz>
	<406D9B73.9060401@aruba.it> <17215589234.20040402192331@email.it>
Message-ID: <406DDE44.5020108@aruba.it>

Matteo Giacomazzi wrote:

http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue578

Ok, I filed an Issue on twisted at the address above. I hope it will be 
corrected as soon as possible.

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
X Python Newsreader developer
http://sourceforge.net/projects/xpn/




From radix at twistedmatrix.com  Fri Apr  2 18:21:43 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 02 Apr 2004 20:21:43 -0500
Subject: [Twisted-Python] nevow debugging
In-Reply-To: <BAY2-F438ZdsIgSca7800043299@hotmail.com>
References: <BAY2-F438ZdsIgSca7800043299@hotmail.com>
Message-ID: <406E11A7.6060300@twistedmatrix.com>

Lee Harr wrote:
> Hi;
> 
> I tried to contact the twisted-web list, but it seems to be having some
> issues right now... I hope it is ok to ask here.

These issues are fixed. Sorry for the trouble.



-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040402/6f2b20b9/attachment.sig>

From exarkun at divmod.com  Fri Apr  2 14:49:53 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 02 Apr 2004 21:49:53 GMT
Subject: [Twisted-Python] help w/simple echo example w/deferred and threads
Message-ID: <20040402214953.24283.2121226275.divmod.quotient.1@ohm>

On Fri, 02 Apr 2004 16:11:16 -0500, "john nielsen" <jn at who.net> wrote:
>I am trying to make a very simple echo server use threads to understand how twisted handles blocking code.  I think I have the server ok but I am not sure how to have the client grab the data from a thread that finished some time later. If I comment out the sleep call, everything works fine. I looked at deferred but am a little confused. What is the simple code the client missing?
> 
> Thanks for any help,
> 
> john
> 
> Here is the server
> ###############
> from twisted.spread import pb
> from twisted.internet import reactor
> from twisted.python import threadable
> threadable.init()
> import time,random
> 
> class t:
>     def __init__(self):
>         self.result=''
>     def test(self,st='same'):
>         time.sleep(1)
>         print 'done sleeping'
>         self.result=st+':'+str(time.time())
>     
> class Echoer(pb.Root):
>     def __init__(self):
>         self.a=t()
>     def remote_echo(self, st):
>             reactor.callInThread(self.a.test,st)
>             print 'from thread',self.a.result
>             return self.a.result

  Instead of the above:

    class t:
        def test(self, st='same'):
            time.sleep(1)
            return st + ':' + str(time.time())

    from twisted.internet import threads

    class Echoer(pb.Root):
        def __init__(self):
            self.a = t()

        def remote_echo(self, st):
            return threads.deferToThread(self.a.test, st)

  This is a good example if "time.sleep(1)" is only a hand-wave put in place of real, computational-expensive code, which I assume it is.  If you simply want to delay the
result for one section, threads are not necessary:

        from twisted.internet import defer

        def remote_echo(self, st):
            d = defer.Deferred()
            reactor.callLater(1, d.callback, st + ':' + str(time.time() + 1))
            return d

  Be sure to read the Deferred howto in the documentation section of the website.

  Jp



From Burkhard.Kayser at t-online.de  Sat Apr  3 08:46:02 2004
From: Burkhard.Kayser at t-online.de (Burkhard Kayser)
Date: Sat, 3 Apr 2004 17:46:02 +0200
Subject: [Twisted-Python] example code for imap client
Message-ID: <200404031746.02086.burkhard.kayser@t-online.de>

I want to develop an imap client which filters my mail and moves incomming 
mails to certain folders. Is there any example code to start with ?

Burkhard




From exarkun at divmod.com  Sat Apr  3 15:08:04 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sat, 03 Apr 2004 22:08:04 GMT
Subject: [Twisted-Python] example code for imap client
Message-ID: <20040403220804.24283.357841685.divmod.quotient.13@ohm>

On Sat, 3 Apr 2004 17:46:02 +0200, Burkhard.Kayser at t-online.de (Burkhard Kayser) wrote:
>I want to develop an imap client which filters my mail and moves incomming 
> mails to certain folders. Is there any example code to start with ?
> 

  See either http://divmod.org/cvs/*checkout*/trunk/quotient/grabbers.py?content-type=text%2Fplain&rev=2833&root=Quotient or http://svn.twistedmatrix.com/cvs/*checkout*/trunk/doc/examples/imap4client.py?content-type=text%2Fplain&rev=10465&root=Twisted or http://svn.twistedmatrix.com/cvs/*checkout*/trunk/twisted/test/test_imap.py?content-type=text%2Fplain&rev=9932&root=Twisted

  Jp



From radix at twistedmatrix.com  Sat Apr  3 15:19:11 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 03 Apr 2004 17:19:11 -0500
Subject: [Twisted-Python] Twisted and Zope3 components systems
Message-ID: <406F385F.6030702@twistedmatrix.com>

I don't think anybody mentioned this on the list yet. AIUI the concensus 
made at PyCon was that Twisted would switch to Zope3's component system 
(with backwards compatibility). Their system seems very hookable and 
it'll provide everything we need. Their component system will be moved 
out into a third-party package and both teams will work on it. Itamar 
has taken responsibility for it for our end of the deal, last I heard. 
There's an issue in the tracker where progress will hopefully be reported:

http://www.twistedmatrix.com/bugs/issue572


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040403/1cbf3d2b/attachment.sig>

From michal at pasternak.w.lub.pl  Sat Apr  3 17:14:06 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Sun, 4 Apr 2004 02:14:06 +0200
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <406F385F.6030702@twistedmatrix.com>
References: <406F385F.6030702@twistedmatrix.com>
Message-ID: <20040404001406.GA48009@pasternak.w.lub.pl>

Christopher Armstrong [Sat, Apr 03, 2004 at 05:19:11PM -0500]:
> made at PyCon was that Twisted would switch to Zope3's component system 
> (with backwards compatibility). Their system seems very hookable and 
> it'll provide everything we need.

Thanks for pointing that out - but as I don't know Zope components, what are
the pros? Could you elaborate on it, of course except the obvious ones
(compatibility)?



From radix at twistedmatrix.com  Sat Apr  3 18:28:29 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 03 Apr 2004 20:28:29 -0500
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <20040404001406.GA48009@pasternak.w.lub.pl>
References: <406F385F.6030702@twistedmatrix.com>
	<20040404001406.GA48009@pasternak.w.lub.pl>
Message-ID: <406F64BD.7090007@twistedmatrix.com>

Michal Pasternak wrote:
> Christopher Armstrong [Sat, Apr 03, 2004 at 05:19:11PM -0500]:
> 
>>made at PyCon was that Twisted would switch to Zope3's component system 
>>(with backwards compatibility). Their system seems very hookable and 
>>it'll provide everything we need.
> 
> 
> Thanks for pointing that out - but as I don't know Zope components, what are
> the pros? Could you elaborate on it, of course except the obvious ones
> (compatibility)?

Compatibility isn't even a main concern, thought it might be useful. 
Personally, I want it so we don't have to worry about developing and 
maintaining our own buggy, incomplete components system. Zope has most 
of the features our system has and more. The features it doesn't have 
(namely Componentized) are easily implemented with it.

Some of the things it does are string registration of adapters (although 
nevow's fork does has this implemented), and __class_implements__, so 
you can say that a *class* implements an interface without resorting to 
subtle metaclass hacks (this would be useful for serialization adapters: 
An instance can implement ISerializable, but the only place to put an 
IUnserializable would be on a class).

I'm sure there are more. Maybe others can chime in.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040403/1ee41356/attachment.sig>

From andy at thecablelounge.com  Sun Apr  4 00:27:56 2004
From: andy at thecablelounge.com (Andy Gayton)
Date: Sun, 04 Apr 2004 17:27:56 +1000
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <406F64BD.7090007@twistedmatrix.com>
References: <406F385F.6030702@twistedmatrix.com>	<20040404001406.GA48009@pasternak.w.lub.pl>
	<406F64BD.7090007@twistedmatrix.com>
Message-ID: <406FB8FC.3030405@thecablelounge.com>

>> On Feb 26, 2004, Christopher Armstrong wrote:
>> But yeah, if PyProtocols does everything we need and there's a good
>> chance it will support our future crazy ideas, I think it's a good
>> idea
>> to switch. We'd probably wanna bump to 2.0 for such a switch. maybe?

> Christopher Armstrong wrote:
> AIUI the concensus made at PyCon was that Twisted would switch to
> Zope3's component system (with backwards compatibility).

Chris, does this mean twisted won't be looking to integrate with
PyProtocols and/or PEAK?

Either way this sounds like good news .. mm, partial adaptors + sexy
subinterface stuff I don't quite understand yet ;)

Andy.





From radix at twistedmatrix.com  Sun Apr  4 00:31:15 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 04 Apr 2004 03:31:15 -0400
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <406FB8FC.3030405@thecablelounge.com>
References: <406F385F.6030702@twistedmatrix.com>	<20040404001406.GA48009@pasternak.w.lub.pl>	<406F64BD.7090007@twistedmatrix.com>
	<406FB8FC.3030405@thecablelounge.com>
Message-ID: <406FB9C3.9020800@twistedmatrix.com>

Andy Gayton wrote:
>> Christopher Armstrong wrote:
>> AIUI the concensus made at PyCon was that Twisted would switch to
>> Zope3's component system (with backwards compatibility).
> 
> Chris, does this mean twisted won't be looking to integrate with
> PyProtocols and/or PEAK?

AIUI, yep. However, the flexibility of zope3's components system will 
hopefully make pyprotocols support for Twisted/Zope components easier 
and more robust.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040404/e260dd89/attachment.sig>

From bob at redivi.com  Sun Apr  4 01:17:55 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 4 Apr 2004 04:17:55 -0400
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <406FB9C3.9020800@twistedmatrix.com>
References: <406F385F.6030702@twistedmatrix.com>	<20040404001406.GA48009@pasternak.w.lub.pl>	<406F64BD.7090007@twistedmatrix.com>
	<406FB8FC.3030405@thecablelounge.com>
	<406FB9C3.9020800@twistedmatrix.com>
Message-ID: <937FC080-8610-11D8-B16A-000A95686CD8@redivi.com>


On Apr 4, 2004, at 3:31 AM, Christopher Armstrong wrote:

> Andy Gayton wrote:
>>> Christopher Armstrong wrote:
>>> AIUI the concensus made at PyCon was that Twisted would switch to
>>> Zope3's component system (with backwards compatibility).
>> Chris, does this mean twisted won't be looking to integrate with
>> PyProtocols and/or PEAK?
>
> AIUI, yep. However, the flexibility of zope3's components system will 
> hopefully make pyprotocols support for Twisted/Zope components easier 
> and more robust.

PyProtocols doesn't have any issues dealing with Twisted and/or Zope3 
interfaces.. It's vice versa that is the problem, because PyProtocols 
is the most flexible of the three and was designed to be able to 
interoperate with other adaptation frameworks.

-bob




From pje at telecommunity.com  Sun Apr  4 09:55:21 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Sun, 04 Apr 2004 11:55:21 -0400
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <937FC080-8610-11D8-B16A-000A95686CD8@redivi.com>
References: <406FB9C3.9020800@twistedmatrix.com>
	<406F385F.6030702@twistedmatrix.com>
	<20040404001406.GA48009@pasternak.w.lub.pl>
	<406F64BD.7090007@twistedmatrix.com>
	<406FB8FC.3030405@thecablelounge.com>
	<406FB9C3.9020800@twistedmatrix.com>
Message-ID: <5.1.0.14.0.20040404114925.01ed0a60@mail.telecommunity.com>

At 04:17 AM 4/4/04 -0400, Bob Ippolito wrote:

>On Apr 4, 2004, at 3:31 AM, Christopher Armstrong wrote:
>
>>Andy Gayton wrote:
>>>>Christopher Armstrong wrote:
>>>>AIUI the concensus made at PyCon was that Twisted would switch to
>>>>Zope3's component system (with backwards compatibility).
>>>Chris, does this mean twisted won't be looking to integrate with
>>>PyProtocols and/or PEAK?
>>
>>AIUI, yep. However, the flexibility of zope3's components system will 
>>hopefully make pyprotocols support for Twisted/Zope components easier and 
>>more robust.
>
>PyProtocols doesn't have any issues dealing with Twisted and/or Zope3 
>interfaces.. It's vice versa that is the problem, because PyProtocols is 
>the most flexible of the three and was designed to be able to interoperate 
>with other adaptation frameworks.

This is good news for me, because supporting Twisted's interfaces was a big 
PITA.  Zope X3 interfaces support a much larger subset of PyProtocols 
functionality, and recent versions of Zope X3 have moved towards better PEP 
246 compatibility, as well as "stealing" many good implementation ideas 
from PyProtocols.

But it sounds like I will need to keep supporting the old interfaces for a 
while, yes?




From radix at twistedmatrix.com  Sun Apr  4 16:51:31 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 04 Apr 2004 18:51:31 -0400
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <5.1.0.14.0.20040404114925.01ed0a60@mail.telecommunity.com>
References: <406FB9C3.9020800@twistedmatrix.com>	<406F385F.6030702@twistedmatrix.com>	<20040404001406.GA48009@pasternak.w.lub.pl>	<406F64BD.7090007@twistedmatrix.com>	<406FB8FC.3030405@thecablelounge.com>	<406FB9C3.9020800@twistedmatrix.com>
	<5.1.0.14.0.20040404114925.01ed0a60@mail.telecommunity.com>
Message-ID: <40709173.3040604@twistedmatrix.com>

Phillip J. Eby wrote:
> This is good news for me, because supporting Twisted's interfaces was a 
> big PITA.  Zope X3 interfaces support a much larger subset of 
> PyProtocols functionality, and recent versions of Zope X3 have moved 
> towards better PEP 246 compatibility, as well as "stealing" many good 
> implementation ideas from PyProtocols.
> 
> But it sounds like I will need to keep supporting the old interfaces for 
> a while, yes?

Well, we're going to replace the implementation of t.p.c with one based 
on zope3's system... so the, uh, interface to the interface system will 
remain the same, but I think it will then be easier to support it. Of 
course, I don't know what problems we'll run in to.. We may need to keep 
some old implementation around for backwards-compatibility + deprecation 
warnings.


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040404/f19bb726/attachment.sig>

From pje at telecommunity.com  Sun Apr  4 21:51:38 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Sun, 04 Apr 2004 23:51:38 -0400
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <40709173.3040604@twistedmatrix.com>
References: <5.1.0.14.0.20040404114925.01ed0a60@mail.telecommunity.com>
	<406FB9C3.9020800@twistedmatrix.com>
	<406F385F.6030702@twistedmatrix.com>
	<20040404001406.GA48009@pasternak.w.lub.pl>
	<406F64BD.7090007@twistedmatrix.com>
	<406FB8FC.3030405@thecablelounge.com>
	<406FB9C3.9020800@twistedmatrix.com>
	<5.1.0.14.0.20040404114925.01ed0a60@mail.telecommunity.com>
Message-ID: <5.1.0.14.0.20040404234603.02266010@mail.telecommunity.com>

At 06:51 PM 4/4/04 -0400, Christopher Armstrong wrote:
>Phillip J. Eby wrote:
>>This is good news for me, because supporting Twisted's interfaces was a 
>>big PITA.  Zope X3 interfaces support a much larger subset of PyProtocols 
>>functionality, and recent versions of Zope X3 have moved towards better 
>>PEP 246 compatibility, as well as "stealing" many good implementation 
>>ideas from PyProtocols.
>>But it sounds like I will need to keep supporting the old interfaces for 
>>a while, yes?
>
>Well, we're going to replace the implementation of t.p.c with one based on 
>zope3's system... so the, uh, interface to the interface system will 
>remain the same, but I think it will then be easier to support it. Of 
>course, I don't know what problems we'll run in to.. We may need to keep 
>some old implementation around for backwards-compatibility + deprecation 
>warnings.

Yeah, but you'll be using Zope's 'Interface' in place of the current 
'Interface' class, right?  You won't be keeping the current 'Interface' 
implementation, right?  (crossing fingers, looking hopeful)  :)

If I understand correctly, the latest Zope X3 'Interface' type supports 
calling to adapt, i.e. 'IFoo(bar)' is exactly equivalent to 
'adapt(bar,IFoo)'.  So, for interfaces at least, it should be pretty 
compatible going forward with what you've already got.




From radix at twistedmatrix.com  Sun Apr  4 23:12:00 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 05 Apr 2004 01:12:00 -0400
Subject: [Twisted-Python] Twisted and Zope3 components systems
In-Reply-To: <5.1.0.14.0.20040404234603.02266010@mail.telecommunity.com>
References: <5.1.0.14.0.20040404114925.01ed0a60@mail.telecommunity.com>	<406FB9C3.9020800@twistedmatrix.com>	<406F385F.6030702@twistedmatrix.com>	<20040404001406.GA48009@pasternak.w.lub.pl>	<406F64BD.7090007@twistedmatrix.com>	<406FB8FC.3030405@thecablelounge.com>	<406FB9C3.9020800@twistedmatrix.com>	<5.1.0.14.0.20040404114925.01ed0a60@mail.telecommunity.com>
	<5.1.0.14.0.20040404234603.02266010@mail.telecommunity.com>
Message-ID: <4070EAA0.6050206@twistedmatrix.com>

Phillip J. Eby wrote:
> Yeah, but you'll be using Zope's 'Interface' in place of the current 
> 'Interface' class, right?  You won't be keeping the current 'Interface' 
> implementation, right?  (crossing fingers, looking hopeful)  :)
> 
> If I understand correctly, the latest Zope X3 'Interface' type supports 
> calling to adapt, i.e. 'IFoo(bar)' is exactly equivalent to 
> 'adapt(bar,IFoo)'.  So, for interfaces at least, it should be pretty 
> compatible going forward with what you've already got.

Yep, and it also supports arbitrary hooks in the Interface calling 
thingy, so we can do whatever we want there >:)

So yes, we will probably be getting rid of MetaInterface, with its 
__new__. :-)

Itamar! You should step in. I don't know anything about how the 
implementation is really going to go.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040405/7e154c65/attachment.sig>

From damon.fasching at sbcglobal.net  Mon Apr  5 23:36:23 2004
From: damon.fasching at sbcglobal.net (Damon Fasching)
Date: Mon, 5 Apr 2004 22:36:23 -0700 (PDT)
Subject: [Twisted-Python] making C extension module types Copyable
Message-ID: <20040406053623.99256.qmail@web80502.mail.yahoo.com>

Hi,

I am attempting to set up a system around Perspective
Broker.  A large part of the data which I need to pass
around is instances of a rather complex type which I
have defined in a C extension module.  This type is
built of a deeply nested hierarchy of C structures. 
At some levels of the hierarchy, structure elements
include malloced data buffers of arbitrary size.

I was hoping for some sort of miracle (see attached
code) and, no surprises, it didn't happen :(

How do I get my class to inherit from Copyable.  (I
suspect the answer is I can't.)  If I can't, how can I
make it copyable (lowercase)?

I was hoping that by wrapping MyType in a simple
Python class, MyTypeWrapper, which does inherit from
Copyable I would be able to pass it around.  I still
get an InsecureJelly exception for MyType.  So it
seems classes need to be registered with
setCopierForClass even if they are used only as
attributes of a class which is being copied.  That
seems reasonable.  But, with a type defined in a C
extension module, I don't have a class to
setCopierFor...  Also, does MyType also need to
subclass Copyable in order to setCopierForClass for
it?  Don't think I can do that either...

The second problem is probably more serious, if that's
possible.  I can't imagine a world generous enough
where MyType instances would actually be serialized,
deserialized and reconstructed properly on the
receiving end, nested structures, malloced buffers and
all.

Can some suggest a path?  I am writing both the client
and server code and so was hoping to use Perspective
Broker.  Serializing the object by hand is going to be
a pain, but not impossible.  If that's what needs to
be done, I am still not sure how to package it for
transmission.

Thanks for your help,
  Damon




From damon.fasching at sbcglobal.net  Mon Apr  5 23:49:29 2004
From: damon.fasching at sbcglobal.net (Damon Fasching)
Date: Mon, 5 Apr 2004 22:49:29 -0700 (PDT)
Subject: [Twisted-Python] making C extension module types Copyable
Message-ID: <20040406054929.59686.qmail@web80506.mail.yahoo.com>

Hi,

I am attempting to set up a system around Perspective
Broker.  A large part of the data which I need to pass
around is instances of a rather complex type which I
have defined in a C extension module.  This type is
built of a deeply nested hierarchy of C structures. 
At some levels of the hierarchy, structure elements
include malloced data buffers of arbitrary size.

I was hoping for some sort of miracle (see attached
code) and, no surprises, it didn't happen :(

How do I get my class to inherit from Copyable.  (I
suspect the answer is I can't.)  If I can't, how can I
make it copyable (lowercase)?

I was hoping that by wrapping MyType in a simple
Python class, MyTypeWrapper, which does inherit from
Copyable I would be able to pass it around.  I still
get an InsecureJelly exception for MyType.  So it
seems classes need to be registered with
setCopierForClass even if they are used only as
attributes of a class which is being copied.  That
seems reasonable.  But, with a type defined in a C
extension module, I don't have a class to
setCopierFor...  Also, does MyType also need to
subclass Copyable in order to setCopierForClass for
it?  Don't think I can do that either...

The second problem is probably more serious, if that's
possible.  I can't imagine a world generous enough
where MyType instances would actually be serialized,
deserialized and reconstructed properly on the
receiving end, nested structures, malloced buffers and
all.

Can some suggest a path?  I am writing both the client
and server code and so was hoping to use Perspective
Broker.  Serializing the object by hand is going to be
a pain, but not impossible.  If that's what needs to
be done, I am still not sure how to package it for
transmission.

Thanks for your help,
  Damon





From damon.fasching at sbcglobal.net  Mon Apr  5 23:57:33 2004
From: damon.fasching at sbcglobal.net (Damon Fasching)
Date: Mon, 5 Apr 2004 22:57:33 -0700 (PDT)
Subject: [Twisted-Python] attachments for prefious msg: making C extension
	types Copyable
Message-ID: <20040406055734.81135.qmail@web80508.mail.yahoo.com>


Hi,

I forgot to attach the code to back up my previous
email.  Here it is...

Damon
-------------- next part --------------
A non-text attachment was scrubbed...
Name: client.py
Type: application/octet-stream
Size: 1065 bytes
Desc: client.py
URL: </pipermail/twisted-python/attachments/20040405/3baa1947/attachment-0006.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: copyableClasses.py
Type: application/octet-stream
Size: 355 bytes
Desc: copyableClasses.py
URL: </pipermail/twisted-python/attachments/20040405/3baa1947/attachment-0007.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: server.py
Type: application/octet-stream
Size: 915 bytes
Desc: server.py
URL: </pipermail/twisted-python/attachments/20040405/3baa1947/attachment-0008.obj>

From damon.fasching at sbcglobal.net  Tue Apr  6 00:39:57 2004
From: damon.fasching at sbcglobal.net (Damon Fasching)
Date: Mon, 5 Apr 2004 23:39:57 -0700 (PDT)
Subject: [Twisted-Python] at what point does reactor.run() need to be called?
Message-ID: <20040406063957.35444.qmail@web80510.mail.yahoo.com>

The following two modules work fine together.

# ================= server.py ====================
from twisted.spread import pb
from twisted.internet import reactor

class ServerClass(pb.Root):
    def remote_shutdown(self):
        print "server stopping"
        reactor.stop()

reactor.listenTCP(8789,
pb.PBServerFactory(ServerClass()))
reactor.run()

# =========== client.py =============
from twisted.spread import pb
from twisted.internet import reactor

def gotRootObject(obj):
    d = obj.callRemote("shutdown")
    d.addCallback(serverStopped)
    d.addErrback(remoteCallFailure)

def serverStopped(result):
    print 'server stopped'
    stop()

def remoteCallFailure(reason):
    print "remote call failed: %s" % (reason.value)
    stop()

def stop():
    print "client stopping"
    reactor.stop()

factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
d.addCallback(gotRootObject)
d.addErrback(remoteCallFailure, "getRootObject")
reactor.run()

==================================

If the last lines of client.py are modified as
follows, everything it still works.

dfactory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
d.addCallback(gotRootObject)
reactor.run()
d.addErrback(remoteCallFailure, "getRootObject")

=======================================

However, if the call to reactor.run() is moved any
higher in client.py, the client seems to hang.  For
example, the following modification breaks it.

dfactory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
reactor.run()
d.addCallback(gotRootObject)
d.addErrback(remoteCallFailure, "getRootObject")

=============================================

Is there an obvious reason for this that I'm missing? 
I would like to be able to dynamically connect to new
servers after starting my application and intereacting
with other servers, and so after already having called
reactor.run().  Can I do this?  I'm sure it is
possible.  But the quick test above makes it seem that
I have to invoke getRootObject() AND attach a callback
to the returned deferred before I can invoke
reactor.run().

Thanks,
  Damon




From michal at pasternak.w.lub.pl  Tue Apr  6 04:01:27 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Tue, 6 Apr 2004 12:01:27 +0200
Subject: [Twisted-Python] at what point does reactor.run() need to be
	called?
In-Reply-To: <20040406063957.35444.qmail@web80510.mail.yahoo.com>
References: <20040406063957.35444.qmail@web80510.mail.yahoo.com>
Message-ID: <20040406100127.GA54390@pasternak.w.lub.pl>

Damon Fasching [Mon, Apr 05, 2004 at 11:39:57PM -0700]:
> The following two modules work fine together.

reactor.run() enters an event-controlled loop (it's the same as "mainloop"
in GUI toolkits you could program in), so you should call it after you do
all initialization stuff.

> However, if the call to reactor.run() is moved any
> higher in client.py, the client seems to hang.  For

It doesn't hang, it just gets the root object, but has no callback to pass
it to.

If it hangs (locks-up hard), it's a bug, examine & report it.

> I would like to be able to dynamically connect to new
> servers after starting my application and intereacting
> with other servers, and so after already having called
> reactor.run().  Can I do this?  I'm sure it is
> possible.  But the quick test above makes it seem that
> I have to invoke getRootObject() AND attach a callback
> to the returned deferred before I can invoke
> reactor.run().

Yes, that's right.

The point you've missed:

	def connectToNewServersNStuff():
		# connect to one server
		pass
	
	# do all initialisation
	# ...
	
	reactor.callLater(0, connectToNewServersNStuff)	
	reactor.run()	

The value, that getRootObject() returns is a Deferred object. This is a
"delayed" function call (which is also non-blocking), so the *real*
rootObject is passed to the Deferred.callback function.

-- 
mp



From bob at redivi.com  Tue Apr  6 08:32:34 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 6 Apr 2004 10:32:34 -0400
Subject: [Twisted-Python] at what point does reactor.run() need to be
	called?
In-Reply-To: <20040406100127.GA54390@pasternak.w.lub.pl>
References: <20040406063957.35444.qmail@web80510.mail.yahoo.com>
	<20040406100127.GA54390@pasternak.w.lub.pl>
Message-ID: <3E922BBF-87D7-11D8-84F3-000A95686CD8@redivi.com>

On Apr 6, 2004, at 6:01 AM, Michal Pasternak wrote:

> Damon Fasching [Mon, Apr 05, 2004 at 11:39:57PM -0700]:
>> The following two modules work fine together.
>
> reactor.run() enters an event-controlled loop (it's the same as 
> "mainloop"
> in GUI toolkits you could program in), so you should call it after you 
> do
> all initialization stuff.
>
>> However, if the call to reactor.run() is moved any
>> higher in client.py, the client seems to hang.  For
>
> It doesn't hang, it just gets the root object, but has no callback to 
> pass
> it to.
>
> If it hangs (locks-up hard), it's a bug, examine & report it.

I wouldn't say that "locks-up hard" in this particular scenario (the 
reactor isn't supposed to be doing anything) is always a bug -- at 
least in the case of an alternative reactor implementation.  If you 
send a signal (such as SIGINT or ctrl-C) to the program, and Python 
swallows it (as it normally would), the not-written-in-Python event 
loop won't know that it would be a good idea to run some Python code, 
so it will never quit.  If you really want to guarantee that your 
program is indeed interruptible you should add a little "waker" that 
runs Python code (even if it's little more than "pass") every few 
seconds via callLater.

This was an issue until very recently with cfreactor.  However, I have 
written a new signal handler (in PyObjC CVS) that is installed by 
default (when you use AppHelper.run[Console]EventLoop) that uses a mach 
port to wake the not-written-in-Python event loop and runs some Python 
code immediately.  So it's no longer a problem when you are using 
PyObjC to start your event loop in the recommended way, or you install 
the mach port signal handler manually (it registers to the 
CoreFoundation runLoop, which cfreactor uses if you do not specify one 
to reactor.run or you do not have an NSApplication instance created).

-bob




From ofir_r at hotmail.com  Tue Apr  6 19:44:37 2004
From: ofir_r at hotmail.com (Ofir Reichenberg)
Date: Wed, 07 Apr 2004 01:44:37 +0000
Subject: [Twisted-Python] POP3 Client
Message-ID: <BAY2-F33WZmaFxeyBkN0004e4fe@hotmail.com>

Hello,

I've been trying to build a simple POP3 client using Twisted and have had no 
luck.
I'm looking for something that retrieves the list of headers waiting on the 
server.

It appears that to do that I need to build a POP3 factory based on a domain. 
How can I build a domain ojbect for a "real" internet domain? (as opposed to 
a local server)

Thanks in advance,
Ofir

_________________________________________________________________
MSN 8 with e-mail virus protection service: 2 months FREE* 
http://join.msn.com/?page=features/virus




From exarkun at divmod.com  Tue Apr  6 21:51:08 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 07 Apr 2004 03:51:08 GMT
Subject: [Twisted-Python] POP3 Client
Message-ID: <20040407035108.28169.1418370702.divmod.quotient.5@ohm>

On Wed, 07 Apr 2004 01:44:37 +0000, "Ofir Reichenberg" <ofir_r at hotmail.com> wrote:
>Hello,
> 
> I've been trying to build a simple POP3 client using Twisted and have had no 
> luck.
> I'm looking for something that retrieves the list of headers waiting on the 
> server.

  There is a much nicer POP3 client class in Quotient (which needs to be folded back into Twisted ... when I get the time).  I highly recommend using it instead:

    http://divmod.org/cvs/trunk/quotient/proto/pop3client.py?rev=2718&root=Quotient&view=markup

> 
> It appears that to do that I need to build a POP3 factory based on a domain. 
> How can I build a domain ojbect for a "real" internet domain? (as opposed to 
> a local server)

  I'm not sure what you mean here.  What you want to do is something along these lines:

    from twisted.internet import protocol
    from wherever import POP3Client

    class MyPOP3Client(POP3Client):
        # Override some callbacks, like connectionMade or perhaps serverGreeting

    f = protocol.ClientFactory()
    f.protocol = MyPOP3Client
    
    from twisted.internet import reactor
    reactor.connectTCP('internet.host.name', 110, f)
    reactor.run()

  The above can be run just like any other Python program (it won't work, of course, as it is an incomplete example).  As alternatives to the last three lines, you can use twisted.application and the utility program "twistd" instead.

  Jp



From damon.fasching at sbcglobal.net  Wed Apr  7 02:04:34 2004
From: damon.fasching at sbcglobal.net (Damon Fasching)
Date: Wed, 7 Apr 2004 01:04:34 -0700 (PDT)
Subject: [Twisted-Python] follow up: at what point does reactor.run() need
	to be called?
Message-ID: <20040407080434.49961.qmail@web80506.mail.yahoo.com>

Hi,

I'm still confused.

Here is the working code, again.

# ================= server.py ====================
from twisted.spread import pb
from twisted.internet import reactor

class ServerClass(pb.Root):
    def remote_shutdown(self):
        print "server stopping"
        reactor.stop()

reactor.listenTCP(8789,
pb.PBServerFactory(ServerClass()))
reactor.run()

# =========== client.py =============
from twisted.spread import pb
from twisted.internet import reactor

def gotRootObject(obj):
    d = obj.callRemote("shutdown")
    d.addCallback(serverStopped)
    d.addErrback(remoteCallFailure)

def serverStopped(result):
    print 'server stopped'
    stop()

def remoteCallFailure(reason):
    print "remote call failed: %s" % (reason.value)
    stop()

def stop():
    print "client stopping"
    reactor.stop()

factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
d.addCallback(gotRootObject)
d.addErrback(remoteCallFailure, "getRootObject")
reactor.run()

============

And here is a modification to the last lines of
client.py which breaks it, in this case causes it to
hang.  (server does not get the shutdown call and
client is not stopped, so it seems the callback for
getRootObject is not executed.)

factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
reactor.run()
d.addCallback(gotRootObject)
d.addErrback(remoteCallFailure, "getRootObject")

==============================================

> It doesn't hang, it just gets the root object, but 
> has no callback to pass it to.

Huh?  What about the line
d.addCallback(gotRootObject)?  It's still there, just
a little further down, and d is still d, the deferred
object returned by getRootObject.  Does the call to
reactor.run() change the deferred, d?

What I really see as a limitation is that it seems
that I must connect to all of my servers before
starting the reactor, something which is only done
once per process.  And because of that, I can't
interact with any of the servers until I have
connected to all of them (because the reactor isn't
running before then).

For example, why does the client hang if I change the
last lines to the following?

reactor.run()
factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
d.addCallback(gotRootObject)
d.addErrback(remoteCallFailure, "getRootObject")

This seems to be an inevitable sequence of calls if I
want to be able to connect to a server after having
already connected to and intereacted with other
servers.  Start the reactor, do some stuff, and then
at a later point, connect to another server.  If I
substitute those lines for the original last 6 lines,
start the server and start the client...nothing
happens.  They both just sit there.

What have I misunderstood?

How can I connect to a server on the fly?

> The value, that getRootObject() returns is a
Deferred
> object. This is a "delayed" function call (which is
> also non-blocking), so the *real* rootObject is
> passed to the Deferred.callback function.

Right, it's the obj argument of the gotRootObject()
method in the original code.

> -- 
> mp

Thanks,
  Damon




From michal at pasternak.w.lub.pl  Wed Apr  7 02:35:43 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Wed, 7 Apr 2004 10:35:43 +0200
Subject: [Twisted-Python] follow up: at what point does reactor.run() need
	to be called?
In-Reply-To: <20040407080434.49961.qmail@web80506.mail.yahoo.com>
References: <20040407080434.49961.qmail@web80506.mail.yahoo.com>
Message-ID: <20040407083543.GA98065@pasternak.w.lub.pl>

Damon Fasching [Wed, Apr 07, 2004 at 01:04:34AM -0700]:
> I'm still confused.

Perhaps this will help you:

	from twisted.internet import reactor
	
	print "Press CTRL+C to see second message"
	reactor.run()
	print "Second message, program exiting"

> hang.  (server does not get the shutdown call and
> client is not stopped, so it seems the callback for
> getRootObject is not executed.)

How do you want to execute shutdown call if there are *no* functions calling
it? (because you add Callback _after_ the reactor loop has finished)?

> > It doesn't hang, it just gets the root object, but 
> > has no callback to pass it to.
> 
> Huh?  What about the line
> d.addCallback(gotRootObject)?  It's still there, just
> a little further down

Yes, after reactor.run() . Which basically sounds similar to "Hey, I call
that function, only after sys.exit(), why doesn't it run?"

> What I really see as a limitation is that it seems
> that I must connect to all of my servers before
> starting the reactor

I already gave you example how to start connecting servers _after_ you do
reactor.run() (use reactor.callLater)

I really don't understand what's your problem, perhaps re-read my responses
until sudden enlightement comes :)

> For example, why does the client hang if I change the
> last lines to the following?

> What have I misunderstood?
> 
> How can I connect to a server on the fly?

	from twisted.internet import reactor
	
	def failureSoQuitApp():
		print "failure"
		reactor.stop()
		
	def serverOneGotRootObjectAndShutdownReactor(*args):
		print "Got some args! %s" % args
		print "Quitting the app"
		reactor.stop()
	
	def connectServerOne():
		# do something
		factory = pb.PBClientFactory()
		reactor.connectTCP("localhost", 8080, factory)
		factory.getRootObject().addCallbacks(serverOneGotRootObjectAndShutdownReactor,
						     failureSoQuitApp)

	def connectServerTwo():
		# copy above stuff
		
	def connectServersAfterReactorHasBeenRun():
		connectServerOne()
		connectServerTwo()
		
	reactor.callLater(0, connectServersAfterReactorHasBeenRun)
	reactor.run()
	
You *must* run the reactor in order to collect deferred results.

-- 
mp



From michal at pasternak.w.lub.pl  Wed Apr  7 02:41:11 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Wed, 7 Apr 2004 10:41:11 +0200
Subject: [Twisted-Python] follow up: at what point does reactor.run() need
	to be called?
In-Reply-To: <20040407083543.GA98065@pasternak.w.lub.pl>
References: <20040407080434.49961.qmail@web80506.mail.yahoo.com>
	<20040407083543.GA98065@pasternak.w.lub.pl>
Message-ID: <20040407084111.GA98123@pasternak.w.lub.pl>

Michal Pasternak [Wed, Apr 07, 2004 at 10:35:43AM +0200]:
> 	from twisted.internet import reactor
> 	
> 	print "Press CTRL+C to see second message"
> 	reactor.run()
> 	print "Second message, program exiting"

Blah, maybe that wasn't the best example :) My point is, that reactor.run()
is a *blocking* call (from the application's view) - and that's how it has
to be, there's nothing wrong with that. So, adding callbacks after the
reactor has been run really has no effect. Hope, that this clarified a bit.



From nbm at mithrandr.moria.org  Wed Apr  7 02:48:55 2004
From: nbm at mithrandr.moria.org (Neil Blakey-Milner)
Date: Wed, 7 Apr 2004 10:48:55 +0200
Subject: [Twisted-Python] follow up: at what point does reactor.run() need
	to be called?
In-Reply-To: <20040407080434.49961.qmail@web80506.mail.yahoo.com>
References: <20040407080434.49961.qmail@web80506.mail.yahoo.com>
Message-ID: <20040407084854.GA27098@mithrandr.moria.org>

On Wed 2004-04-07 (01:04), Damon Fasching wrote:
> What I really see as a limitation is that it seems
> that I must connect to all of my servers before
> starting the reactor, something which is only done
> once per process.  And because of that, I can't
> interact with any of the servers until I have
> connected to all of them (because the reactor isn't
> running before then).
> 
> For example, why does the client hang if I change the
> last lines to the following?
> 
> reactor.run()
> factory = pb.PBClientFactory()
> reactor.connectTCP("localhost", 8789, factory)
> d = factory.getRootObject()
> d.addCallback(gotRootObject)
> d.addErrback(remoteCallFailure, "getRootObject")
> 
> This seems to be an inevitable sequence of calls if I
> want to be able to connect to a server after having
> already connected to and intereacted with other
> servers.  Start the reactor, do some stuff, and then
> at a later point, connect to another server.  If I
> substitute those lines for the original last 6 lines,
> start the server and start the client...nothing
> happens.  They both just sit there.
> 
> What have I misunderstood?
> 
> How can I connect to a server on the fly?

'reactor.run()' (almost) only returns when you're about to exit your
program.

It starts an "event loop", whereby it responds to events (such as
information arriving from sockets, timers expiring, &c.) for the rest of
its existence.

Event-based programming requires you to think about actions as responses
to events that may occur any time in the future relative to where you
are in the code.  So, you might:

1) After the reactor is called, a callLater'd function will be called
that will attempt to connect to a server.

2) An event informs you that you've been connected to that server, and
you send a query to the server.

3) An event informs you that the server has sent you some data (or
you're using LineReceiver, sux, or some other higher-level event
generator), and you close the connection.  Based on the data you
received, you want to connect to another server.

4) An event informs you that you've connected to the new server.  You
send the stored information or something derived from it to the server.

5) An event informs you that the new server has successfully received
your message (say, you're using SMTP and get an appropriate delivery
response).  You close the connection.  You set up a callLater function
to be called in five minutes start at step 1 again.

...

So, "at a later point" is a response based on an event - either
time-based or I/O-based (but probably abstracted away from simple socket
I/O for you).

If you start the reactor before setting up things that will generate
events, the reactor will never receive any events, and as such won't
start the response functions (callbacks), so basically nothing will
happen.

But you can set up new things that generate events (ie, connect to new
servers, start your own server, set up timers) after the reactor starts,
it just has to be in a response to some other event.

Neil
-- 
Neil Blakey-Milner
nbm at mithrandr.moria.org
http://mithrandr.moria.org/



From debonzi at gwyddion.com  Wed Apr  7 09:02:41 2004
From: debonzi at gwyddion.com (Daniel Henrique Debonzi)
Date: Wed, 07 Apr 2004 12:02:41 -0300
Subject: [Twisted-Python] Connection close identifier
Message-ID: <40741811.60505@gwyddion.com>

Hi folks,

I have a server-client system where sometimes the server closes the 
connection and sometimes client closes connection.
In each situation I must do diferent things.

Is there a way to know in connectionLost method who closes the connection??

I have already look in the reason atribute, but it seems to the same in 
both cases.

Any help??

Thanks
-- 
Daniel Henrique Debonzi - Gerente de Tecnologia
Gwyddion Industria e Comércio de Equipamentos Eletrônicos
www.gwyddion.com
São Carlos, São Paulo
Brasil



From radix at twistedmatrix.com  Wed Apr  7 09:29:29 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 07 Apr 2004 11:29:29 -0400
Subject: [Twisted-Python] Connection close identifier
In-Reply-To: <40741811.60505@gwyddion.com>
References: <40741811.60505@gwyddion.com>
Message-ID: <40741E59.2040303@twistedmatrix.com>

Daniel Henrique Debonzi wrote:
> Hi folks,
> 
> I have a server-client system where sometimes the server closes the 
> connection and sometimes client closes connection.
> In each situation I must do diferent things.
> 
> Is there a way to know in connectionLost method who closes the connection??
> 
> I have already look in the reason atribute, but it seems to the same in 
> both cases.

I don't know if there's a Better Way, but presumably you already know 
who closed the connection, because _someone_ is calling loseConnection. 
In the code that calls loseConnection, say self.I_closed_the_connection 
= True, or something like that, and then you can check for that flag in 
connectionLost.


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040407/afb1c806/attachment.sig>

From itamar at itamarst.org  Wed Apr  7 09:35:44 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 07 Apr 2004 11:35:44 -0400
Subject: [Twisted-Python] Connection close identifier
In-Reply-To: <40741811.60505@gwyddion.com>
References: <40741811.60505@gwyddion.com>
Message-ID: <1081352144.23208.982.camel@sheriffpony>

On Wed, 2004-04-07 at 11:02, Daniel Henrique Debonzi wrote:

> I have a server-client system where sometimes the server closes the 
> connection and sometimes client closes connection.
> In each situation I must do diferent things.

Seems like a bad idea to me (like, if TCP connection doesn't close
cleanly, do both sides think the other side closed? or what?). Better to
indicate this information on protocol level.

But if you must... In Twisted, what I'd do is have protocols remember
whether or not they did transport.loseConnection(), and thus they can
tell whether or not they were responsible for connectionLost event they
got.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From tv at tv.debian.net  Thu Apr  8 01:45:39 2004
From: tv at tv.debian.net (Tommi Virtanen)
Date: Thu, 08 Apr 2004 10:45:39 +0300
Subject: [Twisted-Python] Connection close identifier
In-Reply-To: <1081352144.23208.982.camel@sheriffpony>
References: <40741811.60505@gwyddion.com>
	<1081352144.23208.982.camel@sheriffpony>
Message-ID: <40750323.5010403@tv.debian.net>

Itamar Shtull-Trauring wrote:
> Seems like a bad idea to me (like, if TCP connection doesn't close
> cleanly, do both sides think the other side closed? or what?). Better to
> indicate this information on protocol level.

It _should_ be easy to tell broken TCP connections from properly shut
down ones, as broken TCP connections end in errors. In twisted, this
means ConnectionDone implies clean shutdown, anything else an error.

BUT, transparent proxies quite commonly break this, and make errors in
the proxied connection look like clean shutdowns in the original
connection. Userspace proxies don't have a choice, even.

Another case where this breaks is server applications that exit
suddenly. File descriptors are cleanly closed at process exit.

All in all, I agree with Itamar, but with some reservations you can
do that by using a flag in protocol and comparing against
ConnectionDone.



From waldbie at attglobal.net  Thu Apr  8 18:55:38 2004
From: waldbie at attglobal.net (Carl Waldbieser)
Date: Fri, 9 Apr 2004 00:55:38 +0000
Subject: [Twisted-Python] Clarification for IReactorSSL.ListenSSL(...)
Message-ID: <200404090055.38598.waldbie@attglobal.net>

I have been playing with the Twisted framework for a while, and it's really 
pretty neat!  Admittedly, the Interfaces and deffereds threw me for a loop 
for a while, but I think I'm finally starting to understand some of it.  I 
have already created a simple, stand-alone XMLRPC sever from following the 
examples in the docs, and now I'm trying to make one that runs over HTTPS.  I 
think that all I should have to do is substitute the 
IReacorSSL.ListenSSL(...) method for the IReactorTCP.ListenTCP(...) call I am 
using now, but this is where I am starting to get stuck.

One of the parameters for the ListenSSL(...) method is contextFactory.  After 
some digging, I think that the only concrete class available right now for 
this is DefaultOpenSSLContextFactory?  I am not entirely clear what the 
parameters used to initialize this object mean, though.  Specifically, the 
privateKeyFileName and certificateFileName are a little sketchy from my point 
of view.  I downloaded OpenSSL and read through the docs, and I Googled 
around for other related articles, etc., but the terminology in all these 
docs is somewhat difficult for me to digest.  Is there some sort of "OpenSSL 
For Dummies" tutorial I can read to figure out what files I am supposed to 
generate and what parameters they correspond to in the 
DefaultOpenSSLContextFactory.__init__(...) method?  

Also, does anyone know of an easier way for generating certificates than going 
through all the manual steps in the OpenSSL docs?  I want to use SSL because 
I want two machines to be able to talk to each other without passing 
sensitive data in the clear, so I am not sure if stuff like certificate 
authorities really need to fit into the picture.  Also, if someone could 
suggest a simpler way to accomplish a secure XMLRPC connection, I would also 
be interested in hearing any thoughts on that.

Any help is appreciated,
Carl Waldbieser




From wfh_178 at msn.com  Fri Apr  9 15:55:59 2004
From: wfh_178 at msn.com (simon moo)
Date: Sat, 10 Apr 2004 06:55:59 +0900
Subject: [Twisted-Python] Anyone can tell me what is the advantage of
	Twisted, compared to JAVA or C AS?
Message-ID: <BAY4-F413MYgySSoAn300004ba8@hotmail.com>

Hello,everybody.
Now I will start up a game program and am choosing a good platform to use.I 
am interested in Twisted but I don't know it verhy much.
Anyone can tell me what is the advantage of Twisted, compared to JAVA or C 
application server?An d what is the advantage of Twisted for MMP Game 
programming?

Sincerely yours,
Simon Moo

_________________________________________________________________
Take a break! Find destinations on MSN Travel. http://www.msn.com.sg/travel/




From trevp at trevp.net  Fri Apr  9 21:25:56 2004
From: trevp at trevp.net (Trevor Perrin)
Date: Fri, 09 Apr 2004 20:25:56 -0700
Subject: [Twisted-Python] Clarification for
  IReactorSSL.ListenSSL(...)
In-Reply-To: <200404090055.38598.waldbie@attglobal.net>
Message-ID: <5.2.0.9.0.20040409201645.037fc388@pop.sbcglobal.yahoo.com>


Hi Carl,

At 12:55 AM 4/9/2004 +0000, you wrote:
[...]
>One of the parameters for the ListenSSL(...) method is contextFactory.  After
>some digging, I think that the only concrete class available right now for
>this is DefaultOpenSSLContextFactory?  I am not entirely clear what the
>parameters used to initialize this object mean, though.  Specifically, the
>privateKeyFileName and certificateFileName are a little sketchy from my point
>of view.

These will be files containing a PEM-encoded private key and corresponding 
certificate.  They'll look like:

-----BEGIN CERTIFICATE-----
MIICoDCCAgmgAwIBAgIBADANBgkqhkiG9w0BAQQFADBFMQswCQYDVQQGEwJBVTET
[.....]

-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQDf7GIdMhGG92vnyngDqgELrEyU9nX2FI1/nyzgDd/w5FXgg5dH
[.....]


>Also, does anyone know of an easier way for generating certificates than 
>going
>through all the manual steps in the OpenSSL docs?

Generating a new key and self-signed cert with OpenSSL is really easy:
http://www.openssl.org/docs/HOWTO/

Then just pass these filenames, and it should work.


>I want to use SSL because
>I want two machines to be able to talk to each other without passing
>sensitive data in the clear, so I am not sure if stuff like certificate
>authorities really need to fit into the picture.

If I was you, I wouldn't use CAs, but would have each side authenticate the 
other based on a fingerprint (i.e. the hash value of the other's certificate).

I'm not sure how to do this with the Twisted's default SSL, but I've 
written a TLS library for Twisted that does this.  However, it may be a bit 
of effort to integrate in your particular app:
http://trevp.net/tlslite/


Trevor 




From andrew-twisted at puzzling.org  Sat Apr 10 00:56:16 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 10 Apr 2004 16:56:16 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r10512 - test to make sure
	xmlns= bug doesn't pop up again
In-Reply-To: <E1BC1f7-00010I-00@wolfwood>
References: <E1BC1f7-00010I-00@wolfwood>
Message-ID: <20040410065616.GA558@frobozz>

On Fri, Apr 09, 2004 at 01:27:37PM -0600, Jonathan Simms wrote:
> Author: slyphon
> Date: Fri Apr  9 13:27:37 2004
> New Revision: 10512
> 
> Modified:
>    trunk/twisted/test/test_xml.py
> Log:
> test to make sure xmlns= bug doesn't pop up again
> 
> 
> Modified: trunk/twisted/test/test_xml.py
> ==============================================================================
> --- trunk/twisted/test/test_xml.py	(original)
> +++ trunk/twisted/test/test_xml.py	Fri Apr  9 13:27:37 2004
> @@ -447,8 +447,13 @@
>              if result:
>                  self.assert_(hasattr(result[0], 'tagName'))
>  
> +    def testParseXMLStringWithUnicode(self):
> +        # this is a regression test. dash fixed something to do with xmlns=
> +        # and this tests to make sure that a particular case works
>          
[snip massive heap of xml]
> +
> +        node = microdom.parseString(str)

Tests like this help me appreciaate why Jim Fulton likes doctest so much.

What the hell is this actually testing?  Which "particular case" in that XML
is the relevant one?  I'm rather skeptical that that is a minimal test case,
and it certainly isn't a readable one. The only hints given are that it
somehow involves parsing, unicode, and xmlns, which isn't very specific.
I'm also a little skeptical that the bug and its fix have been properly
understood, if no-one has taken the time to figure out a simple way to
demonstrate it.

Tests are code too, and should be comprehensible and maintainable like any
other code.

I don't mind this sort of thing as an interim measure, but there wasn't even
a single FIXME in this test to suggest that there was anything wrong with
it.

-Andrew.




From waldbie at attglobal.net  Sat Apr 10 10:59:46 2004
From: waldbie at attglobal.net (Carl Waldbieser)
Date: Sat, 10 Apr 2004 16:59:46 +0000
Subject: [Twisted-Python] Clarification for  IReactorSSL.ListenSSL(...)
In-Reply-To: <5.2.0.9.0.20040409201645.037fc388@pop.sbcglobal.yahoo.com>
References: <5.2.0.9.0.20040409201645.037fc388@pop.sbcglobal.yahoo.com>
Message-ID: <200404101659.46905.waldbie@attglobal.net>

Trevor,

I will look into this.  I am not really familiar with how certificates are 
supposed to work from the client side of things, but it is definitely worth 
looking into.

The project I am working on is still in its very early stages, so integration 
is not so much of a problem.  I simply lack comprehensive knowledge on issues 
related to security, as well as implementation knowledge.

In a nutshell, we are attempting to pass some small but sensitive info 
(username/password) from a client in a DMZ to a server sitting in a trusted 
network.  Even without a strong background in computer security, I am able to 
recognize that that sounds pretty insecure, which is why I am exploring the 
possibility of XMLRPC over HTTPs.  

There are probably other ways of accomplishing this goal, too.  Originally, I 
was looking into Twisted.Conch, but I believe I read in the docs that it was 
not recommended for production use yet(?).

Thanks,
Carl Waldbieser

>On Saturday 10 April 2004 03:25 am, Trevor Perrin wrote:

>
> Generating a new key and self-signed cert with OpenSSL is really easy:
> http://www.openssl.org/docs/HOWTO/
>
> Then just pass these filenames, and it should work.
>
> >I want to use SSL because
> >I want two machines to be able to talk to each other without passing
> >sensitive data in the clear, so I am not sure if stuff like certificate
> >authorities really need to fit into the picture.
>
> If I was you, I wouldn't use CAs, but would have each side authenticate the
> other based on a fingerprint (i.e. the hash value of the other's
> certificate).
>
> I'm not sure how to do this with the Twisted's default SSL, but I've
> written a TLS library for Twisted that does this.  However, it may be a bit
> of effort to integrate in your particular app:
> http://trevp.net/tlslite/
>
>
> Trevor
>





From trevp at trevp.net  Sat Apr 10 15:19:10 2004
From: trevp at trevp.net (Trevor Perrin)
Date: Sat, 10 Apr 2004 14:19:10 -0700
Subject: [Twisted-Python] Clarification for 
  IReactorSSL.ListenSSL(...)
In-Reply-To: <200404101659.46905.waldbie@attglobal.net>
References: <5.2.0.9.0.20040409201645.037fc388@pop.sbcglobal.yahoo.com>
	<5.2.0.9.0.20040409201645.037fc388@pop.sbcglobal.yahoo.com>
Message-ID: <5.2.0.9.0.20040410141208.03704de8@pop.sbcglobal.yahoo.com>

At 04:59 PM 4/10/2004 +0000, Carl Waldbieser wrote:
>[...]
>The project I am working on is still in its very early stages, so integration
>is not so much of a problem.  I simply lack comprehensive knowledge on issues
>related to security, as well as implementation knowledge.

If I can help, I'm happy to answer questions here or off-list.


>In a nutshell, we are attempting to pass some small but sensitive info
>(username/password) from a client in a DMZ to a server sitting in a trusted
>network.  Even without a strong background in computer security, I am able to
>recognize that that sounds pretty insecure, which is why I am exploring the
>possibility of XMLRPC over HTTPs.

Are you trying to pass the username/password to the server, or 
*authenticate* with the username/password?

If the latter, there are protocols like SRP which let you do mutual 
authentication with a password without sending it over the network - 
basically, each side proves to the other that it knows the password, 
without exposing the password in any way.

So you get strong mutual authentication, but you don't have to mess with 
certs.  TLS Lite provides this, if you're interested.

Trevor 




From waldbie at attglobal.net  Sat Apr 10 20:13:43 2004
From: waldbie at attglobal.net (Carl Waldbieser)
Date: Sun, 11 Apr 2004 02:13:43 +0000
Subject: [Twisted-Python] Clarification for   IReactorSSL.ListenSSL(...)
In-Reply-To: <5.2.0.9.0.20040410141208.03704de8@pop.sbcglobal.yahoo.com>
References: <5.2.0.9.0.20040409201645.037fc388@pop.sbcglobal.yahoo.com>
	<5.2.0.9.0.20040410141208.03704de8@pop.sbcglobal.yahoo.com>
Message-ID: <200404110213.43115.waldbie@attglobal.net>

Trevor,

We are trying to allow users to authenticate with the username and password.  
There is really no reason other than the purpose of authentication that the 
application needs to involve the trusted network at all.

I would be interested in learning how the mutual authentication you are 
describing works.  TLS Lite may be just what I am looking for.  If this topic 
is no longer really Twisted-related, I have no objections to moving the 
discussion off-list.

Thanks,
Carl Waldbieser

>
> Are you trying to pass the username/password to the server, or
> *authenticate* with the username/password?
>
> If the latter, there are protocols like SRP which let you do mutual
> authentication with a password without sending it over the network -
> basically, each side proves to the other that it knows the password,
> without exposing the password in any way.
>
> So you get strong mutual authentication, but you don't have to mess with
> certs.  TLS Lite provides this, if you're interested.
>
> Trevor
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From dialtone at aruba.it  Sun Apr 11 16:48:01 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Mon, 12 Apr 2004 00:48:01 +0200
Subject: [Twisted-Python] Status of twisted.xish.xpath
Message-ID: <4079CB21.5060101@aruba.it>

I was wondering what's the status of the xpath parser in Twisted.

I need to write a feed aggregator which does not uses the Mark Pilgrim's 
parser, since
that's a dependency and because that's not a really good piece of 
software IMHO
(it's hard to read and debug). Just look at what has been done here:
http://xoomer.virgilio.it/dialtone/rsschannel.py # written by mg from Nevow
with Nevow and the current xish.xpath, and now look at how this has been 
done in the
feedparser from Pilgrim. I wonder what could be done with a complete 
implementation
of XPath at developers disposal. There are plenty feeds versions to 
support like Atom,
CDF, RDF and 9 rss versions. Also Nevow would be greatly enanched by an 
updated
xpath implementation.

I would like to know if it's actively developed, or if it's 'deprecated' 
in favour of
external xpath implementations.

I would really like  to avoid telling my clients to install 4Suite or 
libxml2 or anything else.
Just using Twisted would be perfect since it's just 1.6Mb of portable 
python code (and in
future it will be split in various packages, so it's even smaller).

Thx for your efforts!

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
Blog: http://vvolonghi.blogspot.com
Home Page: http://xoomer.virgilio.it/dialtone/





From ofir_r at hotmail.com  Mon Apr 12 08:45:52 2004
From: ofir_r at hotmail.com (Ofir Reichenberg)
Date: Mon, 12 Apr 2004 14:45:52 +0000
Subject: [Twisted-Python] POP3 Client
Message-ID: <BAY2-F112IwNdJiRcJq0005618e@hotmail.com>





&gt;From: &lt;exarkun at divmod.com&gt;
&gt;Subject: Re: [Twisted-Python] POP3 Client
&gt; &gt; I've been trying to build a simple POP3 client using Twisted and 
have had no
&gt; &gt; luck.
&gt; &gt; I'm looking for something that retrieves the list of headers 
waiting on the
&gt; &gt; server.
&gt;
&gt;   There is a much nicer POP3 client class in Quotient (which needs to 
be folded back into Twisted ... when I get the time).  I highly recommend 
using it instead:
&gt;http://divmod.org/cvs/trunk/quotient/proto/pop3client.py?rev=2718&amp;root=Quotient&amp;view=markup

This looks exactly like what I need. Thanks a lot.

&gt;
&gt; &gt;
&gt; &gt; It appears that to do that I need to build a POP3 factory based on 
a domain.
&gt; &gt; How can I build a domain ojbect for a &quot;real&quot; internet 
domain? (as opposed to
&gt; &gt; a local server)
&gt;
&gt;   I'm not sure what you mean here.  What you want to do is something 
along these lines:
&gt;
&gt;     from twisted.internet import protocol
&gt;     from wherever import POP3Client
&gt;
&gt;     class MyPOP3Client(POP3Client):
&gt;         # Override some callbacks, like connectionMade or perhaps 
serverGreeting
&gt;
&gt;     f = protocol.ClientFactory()
&gt;     f.protocol = MyPOP3Client
&gt;
&gt;     from twisted.internet import reactor
&gt;     reactor.connectTCP('internet.host.name', 110, f)
&gt;     reactor.run()
&gt;
&gt;   The above can be run just like any other Python program (it won't 
work, of course, as it is an incomplete example).  As alternatives to the 
last three lines, you can use twisted.application and the utility program 
&quot;twistd&quot; instead.
&gt;

Hmmm, I see what you mean.
I didn't know of the ClientFactory class.
This was the answer to my question, but I'll give Quotient a try first. :)

Thanks again,
Ofir

_________________________________________________________________
STOP MORE SPAM with the new MSN 8 and get 2 months FREE* 
http://join.msn.com/?page=features/junkmail




From dizzyd at jabber.org  Mon Apr 12 09:59:08 2004
From: dizzyd at jabber.org (Dave Smith)
Date: Mon, 12 Apr 2004 09:59:08 -0600 (MDT)
Subject: [Twisted-Python] Status of twisted.xish.xpath
In-Reply-To: <4079CB21.5060101@aruba.it>
References: <4079CB21.5060101@aruba.it>
Message-ID: <2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com>

> I was wondering what's the status of the xpath parser in Twisted.

Well, xish.xpath isn't meant to be a "full" xpath implementation, per se.
I originally wrote it be used for routing XML packets from a Jabber
connection, so it's really focused on providing matching/equality
operations versus the transforms and other operations traditionally
associated with XPath engines. In my happy little world, XPath is not a
operational language -- it's a filtering/matching syntax.

I wasn't aware that Nevow was using xish.xpath, but that's cool if it is.
I'll be glad to add additional logic as necessary to enhance the
filtering/matching aspects of XPath to support a RSS aggregator, but I'd
prefer to not see xish.xpath become a "full" XPath engine.

FWIW, xish.xpath is "actively developed", there just haven't been any
feature or bug requests against it for a while. :)

Just my $0.02.

D.



From itamar at itamarst.org  Mon Apr 12 10:04:24 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 12 Apr 2004 12:04:24 -0400
Subject: [Twisted-Python] RFC: UDP's transport.write() accepting hostnames
Message-ID: <1081785863.7297.3722.camel@sheriffpony>

I'd appreciate comments added to the issue -
http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue586

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From dp at ulaluma.com  Mon Apr 12 10:18:32 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Mon, 12 Apr 2004 12:18:32 -0400
Subject: [Twisted-Python] Status of twisted.xish.xpath
In-Reply-To: <2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com>
References: <4079CB21.5060101@aruba.it>
	<2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com>
Message-ID: <0ACD29E6-8C9D-11D8-9C56-000A95864FC4@ulaluma.com>


On Apr 12, 2004, at 11:59 AM, Dave Smith wrote:

>> I was wondering what's the status of the xpath parser in Twisted.
>
> Well, xish.xpath isn't meant to be a "full" xpath implementation, per 
> se.
> I originally wrote it be used for routing XML packets from a Jabber
> connection, so it's really focused on providing matching/equality
> operations versus the transforms and other operations traditionally
> associated with XPath engines. In my happy little world, XPath is not a
> operational language -- it's a filtering/matching syntax.

Does XPath actually specify transformation operations? I thought that 
was up to something like XSLT. I agree that XPath should only be used 
for node matching, and that transformation should be done in other 
ways.

> I wasn't aware that Nevow was using xish.xpath, but that's cool if it 
> is.
> I'll be glad to add additional logic as necessary to enhance the
> filtering/matching aspects of XPath to support a RSS aggregator, but 
> I'd
> prefer to not see xish.xpath become a "full" XPath engine.

This is not related to the current discussion, but I have been 
contemplating replacing nevow's fixed scheme which only looks for nodes 
with nevow 'specials' on them (such as render and data) with a 
dictionary of {xpath expression object: transformation function}. It is 
not something I am planning on doing right away, but eventually, and it 
would be nice to use some existing code for this.

> FWIW, xish.xpath is "actively developed", there just haven't been any
> feature or bug requests against it for a while. :)

I wish more software were in this mode. "It's flexible enough to use 
without having to change the internals" is the holy grail of software 
engineering.

dp




From soso_pub at yahoo.com  Mon Apr 12 15:28:06 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Mon, 12 Apr 2004 14:28:06 -0700 (PDT)
Subject: [Twisted-Python] addCallbacks issue
Message-ID: <20040412212806.51827.qmail@web14811.mail.yahoo.com>

Hi everyone,

I'm using PB in my application and I have problems
with addCallbacks call, it's not working as expected,
at least what I expect. The following snippet:

factory = pb.PBClientFactory()
reactor.connectTCP('localhost', 2174, factory)
d = factory.getRootObject()
d.addCallbacks(self.gotRoot, self.netError)

when an error occures self.netError doesn't get
called, instead I get something like: "Unhandled error
in Deferred:" which I assume is an error message
telling me that the deffered is not bound to an error
handler.

Now if I replace the last line like this:

factory = pb.PBClientFactory()
reactor.connectTCP('localhost', 2174, factory)
d = factory.getRootObject()
d.addCallback(self.gotRoot)
d.addErrback(self.netError)

the error handler gets called and everything is ok.

Any idea why addCallbacks fails to bound the error
handler? I use Twisted 1.2.0.

Thanks,
Sorin


__________________________________
Do you Yahoo!?
Yahoo! Tax Center - File online by April 15th
http://taxes.yahoo.com/filing.html



From radix at twistedmatrix.com  Mon Apr 12 16:08:11 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 12 Apr 2004 18:08:11 -0400
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <20040412212806.51827.qmail@web14811.mail.yahoo.com>
References: <20040412212806.51827.qmail@web14811.mail.yahoo.com>
Message-ID: <407B134B.30403@twistedmatrix.com>

Sorin C. wrote:
> Any idea why addCallbacks fails to bound the error
> handler? I use Twisted 1.2.0.

Read the documentation.

http://twistedmatrix.com/documents/howto/defer

"""
There's another potential gotcha here. There's a method 
twisted.internet.defer.Deferred.addCallbacks which is similar to, but 
not exactly the same as, addCallback followed by addErrback. In 
particular, consider these two cases:

# Case 1
d = getDeferredFromSomewhere()
d.addCallback(callback1)
d.addErrback(errback1)
d.addCallback(callback2)
d.addErrback(errback2)

# Case 2
d = getDeferredFromSomewhere()
d.addCallbacks(callback1, errback1)
d.addCallbacks(callback2, errback2)

If an error occurs in callback1, then for Case 1 errback1 will be called 
with the failure. For Case 2, errback2 will be called. Be careful with 
your callbacks and errbacks.

"""

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040412/cd810cb9/attachment.sig>

From itamar at itamarst.org  Mon Apr 12 16:43:33 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 12 Apr 2004 18:43:33 -0400
Subject: [Twisted-Python] [Fwd: [boston-pig] Possible summer internship]
Message-ID: <1081809813.7295.4126.camel@sheriffpony>


-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html
-------------- next part --------------
An embedded message was scrubbed...
From: "Daniel Joseph Barnhart Clark" <dclark at member.fsf.org>
Subject: [boston-pig] Possible summer internship
Date: Mon, 12 Apr 2004 18:31:23 -0400
Size: 3322
URL: </pipermail/twisted-python/attachments/20040412/28949ad4/attachment.mht>

From radix at twistedmatrix.com  Mon Apr 12 18:52:05 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 12 Apr 2004 20:52:05 -0400
Subject: [Twisted-Python] [Fwd: [boston-pig] Possible summer internship]
In-Reply-To: <1081809813.7295.4126.camel@sheriffpony>
References: <1081809813.7295.4126.camel@sheriffpony>
Message-ID: <407B39B5.9010405@twistedmatrix.com>

Itamar Shtull-Trauring wrote:
> Subject: [boston-pig] Possible summer internship
> From: "Daniel Joseph Barnhart Clark" <dclark at member.fsf.org>
> To: boston-pig at wingide.com

> There is a possible summer internship at the large computer company I
> work for in near Lowell, MA ..., so if you are or know of any
> College (or really good High School)

Bah. :P

> students with excellent Python
> programming skills (Unix, Sys Admin, and C/GNU Toolchain skills would be
> a plus), please send me resumes / give me a call at 617-877-0702 ASAP.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040412/a5ae9375/attachment.sig>

From soso_pub at yahoo.com  Tue Apr 13 02:19:30 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Tue, 13 Apr 2004 01:19:30 -0700 (PDT)
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <407B134B.30403@twistedmatrix.com>
Message-ID: <20040413081930.53419.qmail@web14810.mail.yahoo.com>

Hi,

Yes, I saw this bit of documentation but what I
understand from it is that if you chain multiple
addCallbacks to the same deferred then the error
handler from the last addCallbacks call will be
called. What am I missing?
Anyway, the API docs say:

"""
addCallbacks(self, callback, errback=None,
callbackArgs=None, callbackKeywords=None,
errbackArgs=None, errbackKeywords=None, asDefaults=0)

Add a pair of callbacks (success and error) to this
Deferred.
"""

So shouldn't 

addCallbacks(success, failure)

be equivalent with

addCallback(success)
addErrback(failure)

?
--- Christopher Armstrong <radix at twistedmatrix.com>
wrote:
> Sorin C. wrote:
> > Any idea why addCallbacks fails to bound the error
> > handler? I use Twisted 1.2.0.
> 
> Read the documentation.
> 
> http://twistedmatrix.com/documents/howto/defer
> 
> """
> There's another potential gotcha here. There's a
> method 
> twisted.internet.defer.Deferred.addCallbacks which
> is similar to, but 
> not exactly the same as, addCallback followed by
> addErrback. In 
> particular, consider these two cases:
> 
> # Case 1
> d = getDeferredFromSomewhere()
> d.addCallback(callback1)
> d.addErrback(errback1)
> d.addCallback(callback2)
> d.addErrback(errback2)
> 
> # Case 2
> d = getDeferredFromSomewhere()
> d.addCallbacks(callback1, errback1)
> d.addCallbacks(callback2, errback2)
> 
> If an error occurs in callback1, then for Case 1
> errback1 will be called 
> with the failure. For Case 2, errback2 will be
> called. Be careful with 
> your callbacks and errbacks.
> 
> """
> 
> -- 
>   Twisted | Christopher Armstrong: International Man
> of Twistery
>    Radix  |          Release Manager,  Twisted
> Project
> ---------+           http://radix.twistedmatrix.com/



	
		
__________________________________
Do you Yahoo!?
Yahoo! Small Business $15K Web Design Giveaway 
http://promotions.yahoo.com/design_giveaway/



From andrew-twisted at puzzling.org  Tue Apr 13 04:31:46 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 13 Apr 2004 20:31:46 +1000
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <20040413081930.53419.qmail@web14810.mail.yahoo.com>
References: <407B134B.30403@twistedmatrix.com>
	<20040413081930.53419.qmail@web14810.mail.yahoo.com>
Message-ID: <20040413103146.GA549@frobozz>

On Tue, Apr 13, 2004 at 01:19:30AM -0700, Sorin C. wrote:
> Hi,
> 
> Yes, I saw this bit of documentation but what I
> understand from it is that if you chain multiple
> addCallbacks to the same deferred then the error
> handler from the last addCallbacks call will be
> called. What am I missing?

You misunderstand the documentation, which is a shame because that section
is there specifically to be as clear as possible about this point :(  I
wonder how we can do better?

Anyway, have another look at the diagrams in that page; they hopefully will
give you a clear picture of how the callback and errback chains interact.

> Anyway, the API docs say:
> """
> addCallbacks(self, callback, errback=None,
> callbackArgs=None, callbackKeywords=None,
> errbackArgs=None, errbackKeywords=None, asDefaults=0)
> 
> Add a pair of callbacks (success and error) to this
> Deferred.
> """

And this is correct.

> 
> So shouldn't 
> 
> addCallbacks(success, failure)
> 
> be equivalent with
> 
> addCallback(success)
> addErrback(failure)

Definitely not.

Deferred callback chains are a sequence of callback/errback pairs.  Calling
just addCallback or addErrback adds a pair where one half of that pair is
None.  When a Deferred is fired, it calls one of the items in each pair in
turn, depending on whether it's currently handling a result or an error --
but if the item it would call is None, it just moves directly to the pair
without doing anything.

That's a pretty hairy description that's better explained by the diagrams in
the Deferred howto, I think -- but suggestions (and ideally patches) on how
to improve the Deferred docs are of course welcome.

I guess the basic confusion is that people expect addCallbacks(good, bad) to
add 'good' and then add 'bad' to the sequence, when actually they are added
at the same place, which is why an exception in 'good' will be passed to the
next errback after 'bad'.

I've tried to avoid resorting to bad ascii art to explain this... let me
know if I've helped :)

-Andrew.




From stephen at thorne.id.au  Tue Apr 13 05:57:10 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Tue, 13 Apr 2004 21:57:10 +1000
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <20040413103146.GA549@frobozz>
References: <407B134B.30403@twistedmatrix.com>
	<20040413081930.53419.qmail@web14810.mail.yahoo.com>
	<20040413103146.GA549@frobozz>
Message-ID: <20040413115710.GA17393@thorne.id.au>

On Tue, Apr 13, 2004 at 08:31:46PM +1000, Andrew Bennetts wrote:
> On Tue, Apr 13, 2004 at 01:19:30AM -0700, Sorin C. wrote:
> > Hi,
> > 
> > Yes, I saw this bit of documentation but what I
> > understand from it is that if you chain multiple
> > addCallbacks to the same deferred then the error
> > handler from the last addCallbacks call will be
> > called. What am I missing?
> 
> You misunderstand the documentation, which is a shame because that section
> is there specifically to be as clear as possible about this point :(  I
> wonder how we can do better?
> 

Maybe by making a parallel to imperitive style we can make it clearer.

d = op()
d.addCallbacks(callback, errback)

is equivilient to

try:
    r = op()
except e:
    return errback(e)
else:
    return callback(r)

d = op()
d.addCallback(callback).addErrback(errback)

is equivilient to

try:
    return callback(op())
except e:
    return errback(e)
    
Regards,
Stephen Thorne



From screwtape at froup.com  Tue Apr 13 06:41:13 2004
From: screwtape at froup.com (Tim Allen)
Date: Tue, 13 Apr 2004 22:41:13 +1000
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <20040413103146.GA549@frobozz>
References: <407B134B.30403@twistedmatrix.com>
	<20040413081930.53419.qmail@web14810.mail.yahoo.com>
	<20040413103146.GA549@frobozz>
Message-ID: <D978945F-8D47-11D8-BF24-000A95A61ED2@froup.com>

On 13 Apr 2004, at 20:31, Andrew Bennetts wrote:
> On Tue, Apr 13, 2004 at 01:19:30AM -0700, Sorin C. wrote:
>> Hi,
>>
>> Yes, I saw this bit of documentation but what I
>> understand from it is that if you chain multiple
>> addCallbacks to the same deferred then the error
>> handler from the last addCallbacks call will be
>> called. What am I missing?
>
> You misunderstand the documentation, which is a shame because that 
> section
> is there specifically to be as clear as possible about this point :(  I
> wonder how we can do better?

I think part of the problem is that people speak of "the callback 
chain", when there's actually two mutually intertwined callback chains.

It's been a while since I read the Twisted docs, but maybe they should 
explicitly mention that in the context of addCallbacks(), the callback 
is called to turn a successful operation into a successful upstream 
result, and the errback is called to turn an unsuccessful operation 
into a successful upstream result. The upstream errback only gets 
called if the current situation is utterly unsalvageable.

Another way of approaching the concept might be to say that each stage 
in the chain has to deal with the errors in the chain before it - that 
is, if you do:

	d.addCallbacks(cb, eb)

then eb needs to handle any errors that arise from the data source, 
while if you do:

	d.addCallback(cb)
	d.addErrback(eb)

then eb needs to handle any errors that arise from the data source, AND 
any errors that arise from cb.




From golux at comcast.net  Mon Apr 12 01:08:18 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Mon, 12 Apr 2004 03:08:18 -0400
Subject: [Twisted-Python] PythonCard GUI client for pbecho example
Message-ID: <407A4062.6080508@comcast.net>

Here's a gui client made with PythonCard that works with
the pbecho.py server.  How it works:

* start up server:  python pbecho.py
* start up client:  python tpcpbechoclient.py
* when client comes up, push "Login"
  -> "CONNECTED" should appear on lower right side of panel
     (meaning the client received a perspective)
* enter something into the text field at the bottom
* click "Send"
  -> the text should be echoed in the text area widget above

(Note:  if you have PythonCard installed as PythonCardPrototype,
either change the name of your installation to PythonCard or
do the substitution in my example code.  PythonCard is about to
undergo the name change in its next released version.)

Enjoy!
- Steve

P.S.  Itamar:  I couldn't get the wxreactor to work with PythonCard;
kept getting "AssertionError: reactor already installed".  I tried
a lot of things, but finally got tired of messing with it.

For now, I'm using my "twistedpythoncard" module, which encapsulates
Uwe's timer recipe so the rest of the code can use normal Twisted
and PythonCard idioms.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: tpcpbechoclient.tar.gz
Type: application/gzip
Size: 2245 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040412/c4cdc71a/attachment.gz>

From matt at pollenation.net  Tue Apr 13 18:33:53 2004
From: matt at pollenation.net (Matt Goodall)
Date: Wed, 14 Apr 2004 01:33:53 +0100
Subject: [Twisted-Python] Status of twisted.xish.xpath
In-Reply-To: <2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com>
References: <4079CB21.5060101@aruba.it>
	<2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com>
Message-ID: <1081902833.2869.76.camel@debian>

On Mon, 2004-04-12 at 16:59, Dave Smith wrote:
> > I was wondering what's the status of the xpath parser in Twisted.
> 
> Well, xish.xpath isn't meant to be a "full" xpath implementation, per se.
> I originally wrote it be used for routing XML packets from a Jabber
> connection, so it's really focused on providing matching/equality
> operations versus the transforms and other operations traditionally
> associated with XPath engines. In my happy little world, XPath is not a
> operational language -- it's a filtering/matching syntax.

Agreed. Anything more than filtering/matching and xpath becomes really
ugly. Just look at some of the latter examples in the Zvon.org tutorial
(http://zvon.org/xxl/XPathTutorial/General/examples.html) ;-).

> I wasn't aware that Nevow was using xish.xpath, but that's cool if it is.

Nevow itself doesn't use xish.xpath (yet, but see dp's post) but an
example I committed to the Nevow repository uses it to extract bits from
an RSS feed. The code is in sandbox/mg/rsschannel.py if anyone's
interested although Valentino (aka Dialtone) has taken that and extended
it.

> I'll be glad to add additional logic as necessary to enhance the
> filtering/matching aspects of XPath to support a RSS aggregator, but I'd
> prefer to not see xish.xpath become a "full" XPath engine.

I agree, keep it simple. xish.xpath worked well in my example although
there seem to be a couple of things missing that would be useful.
Specifically, support for // and support for matching on attribute
existence.

Attached is a unittest that tests examples 1 to 5 of the zvon.org
tutorial (plus a couple of other tests). I am not 100% that the code is
bug free or that the tests are entirely correct but please use it if it
looks useful. If xish.xpath supported all those matching mechanisms then
it would be complete enough for anything I can think of right now. I
would rather use Python for the rest anyway. Oh, matching by attribute
value (zvon's example 6) might be useful too, but not the
normalize-space() function.

Hope this is useful.

Cheers, Matt
-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: xpathtest.py
Type: text/x-python
Size: 6295 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040414/dd74b878/attachment-0002.py>

From golux at comcast.net  Mon Apr 12 12:24:37 2004
From: golux at comcast.net (Stephen C. Waterbury)
Date: Mon, 12 Apr 2004 14:24:37 -0400
Subject: [Twisted-Python] PythonCard GUI client for pbecho example
Message-ID: <407ADEE5.4020606@comcast.net>

Here's a PythonCard client that works with the pbecho.py
server (I included pbecho.py so it's a self-contained example,
but it's the same pbecho.py as in Twisted/doc/examples).

Dependencies:  PythonCard (http://pythoncard.sourceforge.net)
                (requires wxPython)

Basically, all the logic of tpcpbechoclient was copied directly
from pbechoclient.py -- the only functional difference is the
capability to repeat the "Send" function.

It's pretty self-explanatory, but anyway:

* start up server:  python pbecho.py
* start up client:  python tpcpbechoclient.py
* when client comes up, click "Login" button
   -> "CONNECTED" should appear on lower right side of panel
      (meaning the client received a perspective)
* enter something into the text field at the bottom
* click "Send" button
   -> the text should be echoed in the text area widget above

(Note:  if you have PythonCard installed as PythonCardPrototype,
either change the name of your installation to PythonCard or
do the substitution in my example code.  PythonCard is about to
undergo the name change in its next released version.  If you use
the CVS version, it's already re-named.)

Enjoy!
- Steve

P.S.  Itamar:  I couldn't get the wxreactor to work with PythonCard;
kept getting "AssertionError: reactor already installed", although
I followed the directions in wxreactor's docstring.  I tried various
permutations but finally got tired of messing with it ...
let me know if have time to play with it and find a way that works!

For now, I'm using my "twistedpythoncard" module, which encapsulates
Uwe's timer recipe so the rest of the code can use normal Twisted
and PythonCard idioms.  That seems to work pretty well, but I will
be trying some more non-trivial examples before I declare success.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: tpcpbechoclient.tar.gz
Type: application/gzip
Size: 2245 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040412/5c27e681/attachment.gz>

From golux at comcast.net  Wed Apr 14 08:05:21 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Wed, 14 Apr 2004 10:05:21 -0400
Subject: [Twisted-Python] PythonCard GUI client for pbecho example
In-Reply-To: <407ADEE5.4020606@comcast.net>
References: <407ADEE5.4020606@comcast.net>
Message-ID: <407D4521.3060704@comcast.net>

Here is a better version -- thanks to contributions by
Kevin Altis.

* A status bar is used to show "Connected"
* Send can be triggered by <RETURN> or Send button
* Text field clears after sending
  (text area continues to accumulate echoed text, as before)

Stephen C. Waterbury wrote:
> Here's a PythonCard client that works with the pbecho.py
> server (I included pbecho.py so it's a self-contained example,
> but it's the same pbecho.py as in Twisted/doc/examples).
> 
> Dependencies:  PythonCard (http://pythoncard.sourceforge.net)
>                (requires wxPython)
> 
> Basically, all the logic of tpcpbechoclient was copied directly
> from pbechoclient.py -- the only functional difference is the
> capability to repeat the "Send" function.
> 
> It's pretty self-explanatory, but anyway:
> 
> * start up server:  python pbecho.py
> * start up client:  python tpcpbechoclient.py
> * when client comes up, click "Login" button
>   -> "CONNECTED" should appear on lower right side of panel
>      (meaning the client received a perspective)
> * enter something into the text field at the bottom
> * click "Send" button
>   -> the text should be echoed in the text area widget above
> 
> (Note:  if you have PythonCard installed as PythonCardPrototype,
> either change the name of your installation to PythonCard or
> do the substitution in my example code.  PythonCard is about to
> undergo the name change in its next released version.  If you use
> the CVS version, it's already re-named.)
> 
> Enjoy!
> - Steve
> 
> P.S.  Itamar:  I couldn't get the wxreactor to work with PythonCard;
> kept getting "AssertionError: reactor already installed", although
> I followed the directions in wxreactor's docstring.  I tried various
> permutations but finally got tired of messing with it ...
> let me know if have time to play with it and find a way that works!
> 
> For now, I'm using my "twistedpythoncard" module, which encapsulates
> Uwe's timer recipe so the rest of the code can use normal Twisted
> and PythonCard idioms.  That seems to work pretty well, but I will
> be trying some more non-trivial examples before I declare success.
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: tpcpbecho.zip
Type: application/zip
Size: 3660 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040414/f0c39df7/attachment-0002.zip>

From itamar at itamarst.org  Wed Apr 14 08:13:19 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 14 Apr 2004 10:13:19 -0400
Subject: [Twisted-Python] Status of twisted.xish.xpath
In-Reply-To: <1081902833.2869.76.camel@debian>
References: <4079CB21.5060101@aruba.it>
	<2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com>
	<1081902833.2869.76.camel@debian>
Message-ID: <1081951998.24620.308.camel@sheriffpony>

On Tue, 2004-04-13 at 20:33, Matt Goodall wrote:

> Attached is a unittest that tests examples 1 to 5 of the zvon.org
> tutorial (plus a couple of other tests). I am not 100% that the code is
> bug free or that the tests are entirely correct but please use it if it
> looks useful. If xish.xpath supported all those matching mechanisms then
> it would be complete enough for anything I can think of right now. I
> would rather use Python for the rest anyway. Oh, matching by attribute
> value (zvon's example 6) might be useful too, but not the
> normalize-space() function.

Thanks! If Dave doesn't get around to doing this soon, could you add it
to the issue tracker? http://twistedmatrix.com/bugs/

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From r.taylor at eris.qinetiq.com  Wed Apr 14 08:46:07 2004
From: r.taylor at eris.qinetiq.com (Richard Taylor)
Date: Wed, 14 Apr 2004 14:46:07 +0000
Subject: [Twisted-Python] New user, help needed with raw UDP packets
Message-ID: <200404141546.27171.r.taylor@eris.qinetiq.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi

I am a completely new user of Twisted. I have read the tutorial and much of 
the manual and I have been searching the archives but I can't work out how to 
get started with my problem.

I am writing a UDP proxy/relay that needs to make detailed changes to the 
internals of the UDP packets as they pass through. I intend to use 'Impacket' 
to access the packet internals. One of the things that I need is to 'fake' 
the destination address of packets leaving the proxy so that they look like 
they have come from the original sender, Impacket has methods to do this for 
'raw' udp packets.

I think that I need to use a sub-class of ConnectedDatagramProtocol to send my 
packets but the "self.transport.write" method takes only the packet payload 
not the headers.

I think that I need to use a sub-class of DatagramProtocol to receive my 
packets but the datagramReceived method only gets the packet payload not the 
headers. 

How can I get at the 'raw' udp packets for receiving and sending?

Sorry if this is obvious.

Many thanks.

Richard

- -- 
QinetiQ                                  
B009 Woodward Building
St. Andrews Road
Malvern
Worcs WR14 3PS
Jabber: RichardTaylor at jabber.org
PGPKey: http://search.keyserver.net:11371/pks/lookup?op=get&search=0xA7DA9FD9
Key fingerprint = D051 A121 E7C3 485F 3C0E  1593 ED9E D868 A7DA 9FD9
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQFAfU7B7Z7YaKfan9kRAtJRAKCRkDbM0TEtgI3K3107v7aXk7r9awCg5sz6
X7IT8BGjPiSW0a2aYUGhLcY=
=LKvJ
-----END PGP SIGNATURE-----



From matt at pollenation.net  Wed Apr 14 09:59:54 2004
From: matt at pollenation.net (Matt Goodall)
Date: Wed, 14 Apr 2004 16:59:54 +0100
Subject: [Twisted-Python] Status of twisted.xish.xpath
In-Reply-To: <1081951998.24620.308.camel@sheriffpony>
References: <4079CB21.5060101@aruba.it>
	<2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com>
	<1081902833.2869.76.camel@debian>
	<1081951998.24620.308.camel@sheriffpony>
Message-ID: <1081958394.1155.2.camel@harold>

On Wed, 2004-04-14 at 15:13, Itamar Shtull-Trauring wrote:
> On Tue, 2004-04-13 at 20:33, Matt Goodall wrote:
> 
> > Attached is a unittest that tests examples 1 to 5 of the zvon.org
> > tutorial (plus a couple of other tests). I am not 100% that the code is
> > bug free or that the tests are entirely correct but please use it if it
> > looks useful. If xish.xpath supported all those matching mechanisms then
> > it would be complete enough for anything I can think of right now. I
> > would rather use Python for the rest anyway. Oh, matching by attribute
> > value (zvon's example 6) might be useful too, but not the
> > normalize-space() function.
> 
> Thanks! If Dave doesn't get around to doing this soon, could you add it
> to the issue tracker? http://twistedmatrix.com/bugs/

Thought I'd add it anyway see issue 597
(http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue597).
Dave, I added you (dizzyd) to the nosy list, hope that's ok.

Cheers, Matt

-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt at pollenation.net

Any views expressed are my own and do not necessarily reflect the
views of my employer.




From soso_pub at yahoo.com  Wed Apr 14 11:31:28 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Wed, 14 Apr 2004 10:31:28 -0700 (PDT)
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <D978945F-8D47-11D8-BF24-000A95A61ED2@froup.com>
Message-ID: <20040414173128.11573.qmail@web14812.mail.yahoo.com>

Hello everybody,

Sorry for replying so late, I was very busy. Well I
think now I understand the difference between
addCallbacks and addCallback/errback.

Andrew, as you requested, here are a few pointers
which in my opinion would improve the documentation:

1.
Stephen Thorne's code snippet made the "enlightement"
on me:

"""
Maybe by making a parallel to imperitive style we can
make it clearer.

d = op()
d.addCallbacks(callback, errback)

is equivilient to

try:
    r = op()
except e:
    return errback(e)
else:
    return callback(r)

d = op()
d.addCallback(callback).addErrback(errback)

is equivilient to

try:
    return callback(op())
except e:
    return errback(e)
"""
To make a long story short, using addCallbacks if an
error occures while processing the operation the
errback will be called. Using addCallback and
addErrback does the same AND also handles an error
that might occure in the callback code itself.
I think the code snippet and an explanation should be
added to the documentation.
Also, the figure from visual explanation, should be
specified that it is a representation of addCallbacks
usage. Wouldn't be better to add another figure that
represent addCallback/addErrback usage?
Hope this helps.

Thanks all for the explanations,
Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Tax Center - File online by April 15th
http://taxes.yahoo.com/filing.html



From dizzyd at jabber.org  Wed Apr 14 13:16:43 2004
From: dizzyd at jabber.org (Dave Smith)
Date: Wed, 14 Apr 2004 13:16:43 -0600 (MDT)
Subject: [Twisted-Python] Status of twisted.xish.xpath
In-Reply-To: <1081958394.1155.2.camel@harold>
References: <4079CB21.5060101@aruba.it><2548.64.207.33.146.1081785548.spork@webmail.dizzyd.com><1081902833.2869.76.camel@debian><1081951998.24620.308.camel@sheriffpony>
	<1081958394.1155.2.camel@harold>
Message-ID: <2142.64.207.33.146.1081970203.spork@webmail.dizzyd.com>


> Thought I'd add it anyway see issue 597
> (http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue597).
> Dave, I added you (dizzyd) to the nosy list, hope that's ok.

Matt,

Thanks for doing this -- I'll look into it soon.

D.



From andrew-twisted at puzzling.org  Wed Apr 14 19:08:23 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 15 Apr 2004 11:08:23 +1000
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <D978945F-8D47-11D8-BF24-000A95A61ED2@froup.com>
References: <407B134B.30403@twistedmatrix.com>
	<20040413081930.53419.qmail@web14810.mail.yahoo.com>
	<20040413103146.GA549@frobozz>
	<D978945F-8D47-11D8-BF24-000A95A61ED2@froup.com>
Message-ID: <20040415010823.GB3766@frobozz>

On Tue, Apr 13, 2004 at 10:41:13PM +1000, Tim Allen wrote:
> 
> I think part of the problem is that people speak of "the callback 
> chain", when there's actually two mutually intertwined callback chains.

Well, I think of it as one chain of callback/errback pairs, but given that
I've read defer.py several times and even made some commits to it, I am
probably not a good example of how the average user should be expected to
think about this stuff :)

[...]
> 
> Another way of approaching the concept might be to say that each stage 
> in the chain has to deal with the errors in the chain before it - that 
> is, if you do:
> 
> 	d.addCallbacks(cb, eb)
> 
> then eb needs to handle any errors that arise from the data source, 
> while if you do:
> 
> 	d.addCallback(cb)
> 	d.addErrback(eb)
> 
> then eb needs to handle any errors that arise from the data source, AND 
> any errors that arise from cb.

This is good, straightforward, practical advice on how to actually use these
wacky abstract objects, and should be added to the docs.

Incidentally, Mary has opened a bug based on this discussion, so hopefully
the good ideas people have come up with won't be forgotten :)

    http://www.twistedmatrix.com/bugs/issue596

-Andrew.




From andrew-twisted at puzzling.org  Wed Apr 14 19:11:28 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 15 Apr 2004 11:11:28 +1000
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <20040413115710.GA17393@thorne.id.au>
References: <407B134B.30403@twistedmatrix.com>
	<20040413081930.53419.qmail@web14810.mail.yahoo.com>
	<20040413103146.GA549@frobozz>
	<20040413115710.GA17393@thorne.id.au>
Message-ID: <20040415011128.GC3766@frobozz>

On Tue, Apr 13, 2004 at 09:57:10PM +1000, Stephen Thorne wrote:
> 
> Maybe by making a parallel to imperitive style we can make it clearer.
> 
> d = op()
> d.addCallbacks(callback, errback)
> 
> is equivilient to
> 
> try:
>     r = op()
> except e:
>     return errback(e)
> else:
>     return callback(r)

The exact same thought occurred to me recently while I was lying in bed (and
resolutely trying to go to sleep and not get up and send/read more email ;).  My
only reservation is that some people might not be familiar with the
try/except/else construct, but I suppose an appropriate link to the Python
docs (probably a section of the Python tutorial?) can solve that.

-Andrew.




From stephen at thorne.id.au  Wed Apr 14 20:22:09 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu, 15 Apr 2004 12:22:09 +1000
Subject: [Twisted-Python] addCallbacks issue
In-Reply-To: <20040415011128.GC3766@frobozz>
References: <407B134B.30403@twistedmatrix.com>
	<20040413081930.53419.qmail@web14810.mail.yahoo.com>
	<20040413103146.GA549@frobozz>
	<20040413115710.GA17393@thorne.id.au>
	<20040415011128.GC3766@frobozz>
Message-ID: <20040415022209.GA19250@thorne.id.au>

On Thu, Apr 15, 2004 at 11:11:28AM +1000, Andrew Bennetts wrote:
> On Tue, Apr 13, 2004 at 09:57:10PM +1000, Stephen Thorne wrote:
> > 
> > Maybe by making a parallel to imperitive style we can make it clearer.
> > 
> > d = op()
> > d.addCallbacks(callback, errback)
> > 
> > is equivilient to
> > 
> > try:
> >     r = op()
> > except e:
> >     return errback(e)
> > else:
> >     return callback(r)
> 
> The exact same thought occurred to me recently while I was lying in bed (and
> resolutely trying to go to sleep and not get up and send/read more email ;).  My
> only reservation is that some people might not be familiar with the
> try/except/else construct, but I suppose an appropriate link to the Python
> docs (probably a section of the Python tutorial?) can solve that.

Well, really, the try/catch/else construct was used here because I was
undecided about the clearest way of representing the concept.

We could write it like this

try:
    r = op()
except e:
    r = errback(e)
else:
    r = callback(r)
# continue to use 'r'.

And in fact, that was how I wrote it until I revised it to use 'return'
to explicitly say "this is the resulting value". We could rewrite it
like this:

try:
    r = op()
except e:
    return errback(e)

return callback(r)

Which doesn't use any constructs that an inexperienced python programmer
won't immediately recognise.

Regards,
Stephen Thorne.



From exarkun at divmod.com  Wed Apr 14 20:37:41 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 14 Apr 2004 22:37:41 -0400
Subject: [Twisted-Python] New user, help needed with raw UDP packets
In-Reply-To: <200404141546.27171.r.taylor@eris.qinetiq.com>
References: <200404141546.27171.r.taylor@eris.qinetiq.com>
Message-ID: <407DF575.8060103@divmod.com>

Richard Taylor wrote:

>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>Hi
>
>I am a completely new user of Twisted. I have read the tutorial and much o=
f =

>the manual and I have been searching the archives but I can't work out how=
 to =

>get started with my problem.
>
>I am writing a UDP proxy/relay that needs to make detailed changes to the =

>internals of the UDP packets as they pass through. I intend to use 'Impack=
et' =

>to access the packet internals. One of the things that I need is to 'fake' =

>the destination address of packets leaving the proxy so that they look lik=
e =

>they have come from the original sender, Impacket has methods to do this f=
or =

>'raw' udp packets.
>
>I think that I need to use a sub-class of ConnectedDatagramProtocol to sen=
d my =

>packets but the "self.transport.write" method takes only the packet payloa=
d =

>not the headers.
>  =

>
  You will need to create a new kind of transport for this to work.  I'm =

afraid you haven't picked a very easy task for which to start using =

Twisted :)

>I think that I need to use a sub-class of DatagramProtocol to receive my =

>packets but the datagramReceived method only gets the packet payload not t=
he =

>headers. =

>  =

>
  More likely you'll want either a RawUDPProtocol subclass, or something =

very much like one.  You'll also need to create a new transport class =

which works on raw sockets.  There isn't really any documentation for =

this, as it is something that needs to be done very infrequently.  There =

is one example of creating a new transport type in my sandbox:

  =

http://svn.twistedmatrix.com/cvs/trunk/sandbox/exarkun/ipv6.py?root=3DTwist=
ed

It is for TCP/IPv6 only, but should mostly be applicable to your case.

>How can I get at the 'raw' udp packets for receiving and sending?
>
>Sorry if this is obvious.
>  =

>
  Certainly not.  :)  If you get it working (documented, tested,etc ;), =

it might be nice if you could contribute it back, since raw socket =

support is something that does get asked for every once in a while.  =

It'd be nice to be able to tell someone how to use existing support, =

instead of telling them they have to implement it.

  Jp




From foom at fuhm.net  Thu Apr 15 11:27:56 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu, 15 Apr 2004 13:27:56 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r10475 - Use writeSequence
	instead of silly for-loop.
In-Reply-To: <E1BAVDP-0000eR-00@wolfwood>
References: <E1BAVDP-0000eR-00@wolfwood>
Message-ID: <3BF2210C-8F02-11D8-94D4-000A95A50FB2@fuhm.net>


On Apr 5, 2004, at 10:36 AM, Andrew Bennetts wrote:

> Author: spiv
> Date: Mon Apr  5 08:36:43 2004
> New Revision: 10475
>
> Modified:
>    trunk/twisted/protocols/http.py
> Log:
> Use writeSequence instead of silly for-loop.

You might not have noticed that writeSequence is implemented like so:
   self.write("".join(iovec))
thus negating the performance enhancement recently added by not copying 
large data into a new string.

This is of course quite silly, and I suspect a nice performance 
enhancement could be achieved by making FileDescriptor.dataBuffer be a 
list of strings, rather than a single string. That would both cause 
multiple writes in a row to not allocate new strings, and allow 
writeSequence to be implemented sanely.

Doesn't look very hard really; looks like you'd only need to touch 
write/writeSequence/doWrite. This'd also have the advantage of making 
it easier to put a Sendfile-struct in there as well. So pahan's 
volunteered to fix this!

Unfortunately, python doesn't expose the writev syscall, which means 
that you depend on Nagling to not coalesce the TCP packets. There *is* 
a TCP option which you can use to help fix too many small packets: 
TCP_CORK on linux and TCP_NOPUSH on FreeBSD. This keeps partial packets 
from being sent at all until you close the connection or turn off the 
option (except on older freebsd, where it's broken and you need to turn 
off the option and call write again to wake it up).

I suspect it's worthwhile to set TCP_CORK/TCP_NOPUSH while the 
python-side buffer has any data left in it, or else the kernel may be 
deciding to send out small packets when it should be waiting for more 
data from an upcoming write call and wasting time/bandwidth. Python has 
the TCP_CORK constant, even, yay! FreeBSD will  just have to suffer, I 
suppose, since python doesn't know about TCP_NOPUSH.

James




From itamar at itamarst.org  Thu Apr 15 12:00:17 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 15 Apr 2004 14:00:17 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r10475 - Use
	writeSequence instead of silly for-loop.
In-Reply-To: <3BF2210C-8F02-11D8-94D4-000A95A50FB2@fuhm.net>
References: <E1BAVDP-0000eR-00@wolfwood>
	<3BF2210C-8F02-11D8-94D4-000A95A50FB2@fuhm.net>
Message-ID: <1082052017.24618.382.camel@sheriffpony>

On Thu, 2004-04-15 at 13:27, James Y Knight wrote:

> Unfortunately, python doesn't expose the writev syscall, which means 
> that you depend on Nagling to not coalesce the TCP packets. There *is* 
> a TCP option which you can use to help fix too many small packets: 
> TCP_CORK on linux and TCP_NOPUSH on FreeBSD. This keeps partial packets 
> from being sent at all until you close the connection or turn off the 
> option (except on older freebsd, where it's broken and you need to turn 
> off the option and call write again to wake it up).

JP has code for using writev in the sandbox (sandbox/exarkun/iovec/)
which ought to be integrated at some point.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From bob at redivi.com  Thu Apr 15 12:27:16 2004
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 15 Apr 2004 14:27:16 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r10475 - Use writeSequence
	instead of silly for-loop.
In-Reply-To: <1082052017.24618.382.camel@sheriffpony>
References: <E1BAVDP-0000eR-00@wolfwood>
	<3BF2210C-8F02-11D8-94D4-000A95A50FB2@fuhm.net>
	<1082052017.24618.382.camel@sheriffpony>
Message-ID: <859783D7-8F0A-11D8-A05A-000A95686CD8@redivi.com>

On Apr 15, 2004, at 2:00 PM, Itamar Shtull-Trauring wrote:

> On Thu, 2004-04-15 at 13:27, James Y Knight wrote:
>
>> Unfortunately, python doesn't expose the writev syscall, which means
>> that you depend on Nagling to not coalesce the TCP packets. There *is*
>> a TCP option which you can use to help fix too many small packets:
>> TCP_CORK on linux and TCP_NOPUSH on FreeBSD. This keeps partial 
>> packets
>> from being sent at all until you close the connection or turn off the
>> option (except on older freebsd, where it's broken and you need to 
>> turn
>> off the option and call write again to wake it up).
>
> JP has code for using writev in the sandbox (sandbox/exarkun/iovec/)
> which ought to be integrated at some point.

I think the best answer to this performance talk is: don't bother.  I 
once set out to fix his implementation, and did (but I'm not sure what 
happened to it).  It wasn't really much faster, definitely not enough 
to warrant an extension.  You know what?  The overhead doesn't seem to 
be in the write calls or the str joins, it's the rest of Python that's 
slow :)

I think that this sort of time would be better spent on epoll and 
kqueue.  Last I checked, enabling kqueue in Twisted required 
downloading some ancient code written for Python 1.5 from a ftp site 
that hasn't been updated since 2001, patching it, writing a makefile 
for your platform, and building the extension separately.

-bob




From cce at clarkevans.com  Thu Apr 15 13:56:51 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 15 Apr 2004 15:56:51 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r10475 - Use writeSequence
	instead of silly for-loop.
In-Reply-To: <859783D7-8F0A-11D8-A05A-000A95686CD8@redivi.com>
References: <E1BAVDP-0000eR-00@wolfwood>
	<3BF2210C-8F02-11D8-94D4-000A95A50FB2@fuhm.net>
	<1082052017.24618.382.camel@sheriffpony>
	<859783D7-8F0A-11D8-A05A-000A95686CD8@redivi.com>
Message-ID: <20040415195651.GB53398@prometheusresearch.com>

Yes.  Twisted chews up alot of processor time simply looping, if 
kqueue could be used instead, this would be great...

On Thu, Apr 15, 2004 at 02:27:16PM -0400, Bob Ippolito wrote:
| I think that this sort of time would be better spent on epoll and 
| kqueue.  Last I checked, enabling kqueue in Twisted required 
| downloading some ancient code written for Python 1.5 from a ftp site 
| that hasn't been updated since 2001, patching it, writing a makefile 
| for your platform, and building the extension separately.



From itamar at itamarst.org  Thu Apr 15 14:22:50 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 15 Apr 2004 16:22:50 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r10475 - Use
	writeSequence instead of silly for-loop.
In-Reply-To: <20040415195651.GB53398@prometheusresearch.com>
References: <E1BAVDP-0000eR-00@wolfwood>
	<3BF2210C-8F02-11D8-94D4-000A95A50FB2@fuhm.net>
	<1082052017.24618.382.camel@sheriffpony>
	<859783D7-8F0A-11D8-A05A-000A95686CD8@redivi.com>
	<20040415195651.GB53398@prometheusresearch.com>
Message-ID: <1082060570.26194.384.camel@sheriffpony>

On Thu, 2004-04-15 at 15:56, Clark C. Evans wrote:
> Yes.  Twisted chews up alot of processor time simply looping, if 
> kqueue could be used instead, this would be great...

I suspect it'd only really help if we also used kqueue's timers and so
on. Linux doesn't have anything similar, unfortunately.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From exarkun at divmod.com  Thu Apr 15 20:09:56 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 16 Apr 2004 02:09:56 GMT
Subject: [Twisted-Python] Re: [Twisted-commits] r10475 - Use writeSequence
	instead of silly for-loop.
Message-ID: <20040416020956.30707.1547824489.divmod.quotient.73@ohm>

On Thu, 15 Apr 2004 13:27:56 -0400, James Y Knight <foom at fuhm.net> wrote:
>
> On Apr 5, 2004, at 10:36 AM, Andrew Bennetts wrote:
> 
> 
> This is of course quite silly, and I suspect a nice performance 
> enhancement could be achieved by making FileDescriptor.dataBuffer be a 
> list of strings, rather than a single string. That would both cause 
> multiple writes in a row to not allocate new strings, and allow 
> writeSequence to be implemented sanely.

  Been there :)  FileDescriptor.dataBuffer was a list when I first started hacking around in Twisted's internals.  The current implementation is the result of an optimization of that code, and is somewhat (not earth-shatteringly) faster.

> 
> Doesn't look very hard really; looks like you'd only need to touch 
> write/writeSequence/doWrite. This'd also have the advantage of making 
> it easier to put a Sendfile-struct in there as well. So pahan's 
> volunteered to fix this!

  There are a few other places that need to be touched, but it is certainly doable.  The main problem is simply that tcp.py is such a mess.

  Jp



From george at visp.com.au  Thu Apr 15 22:24:37 2004
From: george at visp.com.au (George Patterson)
Date: Fri, 16 Apr 2004 13:54:37 +0930
Subject: [Twisted-Python] explanation of the chatserver.py example
Message-ID: <20040416135437.70162e6d@beast.spyderweb.com.au>

I have trying to write a chat server that will selectively send out messages to some clients. Anyway, looking around for a framework to start from and learn more about Python and other modules I stumbled upon chatserver.py twisted.sourceforge.net

But I can't find what some of the aspects the MyChat class does.

From: http://twisted.sourceforge.net/TwistedDocs-1.2.0/examples/chatserver.py

class MyChat(basic.LineReceiver):
    def connectionMade(self):
        print "Got new client!"
        self.factory.clients.append(self)

    def connectionLost(self):
        print "Lost a client!"
        self.factory.clients.remove(self)

    def lineReceived(self, line):
        print "received", repr(line)
        for c in self.factory.clients:
            c.message(line)

    def message(self, message):
        self.transport.write(message + '\n')

#end of class

If Bob, Jane and Joe are chatting to each other, and Bob sends a string of characters to Jane as a private message, how would I loop through the lineReceived definition for Jane's client ID or IP address or something unique to Jane's connection.

I want to change def lineReceived to something like 

def lineReceived(self, line):
    print "received", repr(line)
    for c in self.factory.clients:
	if c.id==required_id: 
	# ^-- I know this is not valid code 

	    c.message("Privmsg". line)
	#end if
    #end for


Sorry if it is a stupid question but I have been staring long enough at the code. 

George Patterson



From radix at twistedmatrix.com  Thu Apr 15 22:35:41 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 16 Apr 2004 00:35:41 -0400
Subject: [Twisted-Python] explanation of the chatserver.py example
In-Reply-To: <20040416135437.70162e6d@beast.spyderweb.com.au>
References: <20040416135437.70162e6d@beast.spyderweb.com.au>
Message-ID: <407F629D.7050601@twistedmatrix.com>

George Patterson wrote:
> I have trying to write a chat server that will selectively send out
> messages to some clients. Anyway, looking around for a framework to
> start from and learn more about Python and other modules I stumbled
> upon chatserver.py twisted.sourceforge.net
> 
> If Bob, Jane and Joe are chatting to each other, and Bob sends a
> string of characters to Jane as a private message, how would I loop
> through the lineReceived definition for Jane's client ID or IP
> address or something unique to Jane's connection.
> 
> I want to change def lineReceived to something like
> 

 > def lineReceived(self, line):
 >     print "received", repr(line)
 >     for c in self.factory.clients:
 > 	if c.id==required_id:
 > 	# ^-- I know this is not valid code
 >
 > 	    c.message("Privmsg". line)
 > 	#end if
 >     #end for

When the client first connects, the protocol should be in the "waiting 
for identifying information" state. The client should send identifying 
information. Store that information on the protocal instance, and then 
let the client chat as usual.

That should be all you need.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040416/0eedc7ae/attachment.sig>

From r.taylor at eris.qinetiq.com  Fri Apr 16 01:00:18 2004
From: r.taylor at eris.qinetiq.com (Richard Taylor)
Date: Fri, 16 Apr 2004 07:00:18 +0000
Subject: [Twisted-Python] New user, help needed with raw UDP packets
In-Reply-To: <407DF575.8060103@divmod.com>
References: <200404141546.27171.r.taylor@eris.qinetiq.com>
	<407DF575.8060103@divmod.com>
Message-ID: <200404160800.25087.r.taylor@eris.qinetiq.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jp

On Thursday 15 April 2004 03:37, Jp Calderone wrote:
> [snip]
>   More likely you'll want either a RawUDPProtocol subclass, or something =
>
> very much like one.  You'll also need to create a new transport class =
>
> which works on raw sockets.  

Thanks for the pointers. At least I know now that I am not just being 
stupid :-)

I have been looking at how to subclass usp.Port to get what I want but I have 
come up against a problem that looks like a show stopper to me. It does not 
look like Python's socket library supports SOCK_RAW. I may be mistaken, but I 
think that I need to put the socket into RAW mode to get the incoming headers 
and to set my own headers on the outgoing packets. Without SOCK_RAW I am 
stuffed.

My code so far looks like this:

	from twisted.internet import protocol 
	from twisted.internet import udp
	from twisted.internet import reactor

	class Echo(protocol.DatagramProtocol):
    
	    def datagramReceived(self, data, (host, port)):
	        print "received %r from %s:%d" % (data, host, port)


	class RawUDPPort(udp.Port):
	    """Raw udp port."""

	    __implements__ = udp.Port.__implements__

	    socketType = socket.SOCK_RAW # Overide socket type.


	reactor.listenWith(RawUDPPort,
	                   proto=Echo(), port=9999, reactor=reactor)
	reactor.run()

When run I get the following trace back:

	Traceback (most recent call last):
	  File "./asb_proxy.py", line 45, in ?
	    proto=Echo(), port=9999, reactor=reactor)
	  File "/usr/lib/python2.2/site-packages/twisted/internet/default.py", line 	
301, in listenWith
	    p.startListening()
	  File "/usr/lib/python2.2/site-packages/twisted/internet/udp.py", line 83, 	
in startListening
	    self._bindSocket()
	  File "/usr/lib/python2.2/site-packages/twisted/internet/udp.py", line 92, 	
in _bindSocket
	    raise error.CannotListenError, (self.interface, self.port, le)
	twisted.internet.error.CannotListenError: Couldn't listen on any:9999: (94, 
	'Socket type not supported').

I am sure this is the underlying call to socket as the following Python 
session shows:

	Python 2.2.3 (#1, Sep 15 2003, 12:38:33)
	[GCC 2.95.3 20010315 (release)] on linux2
	Type "help", "copyright", "credits" or "license" for more information.
	>>> import socket
	>>> s = socket.socket(socket.AF_INET, socket.SOCK_RAW)
	Traceback (most recent call last):
	  File "<stdin>", line 1, in ?
	socket.error: (94, 'Socket type not supported')
	>>>

I guess that I might be able to use the pcap library to access the raw socket 
but integrating that into Twisted is starting to look like a big job.

Has anyone got any ideas as to how I should approach this.

> [snip]
>
>   If you get it working (documented, tested,etc ;), =
>
> it might be nice if you could contribute it back, since raw socket =
>
> support is something that does get asked for every once in a while.  =
>
> It'd be nice to be able to tell someone how to use existing support, =
>
> instead of telling them they have to implement it.
>

If I get something working I will certainly contribute it back to twisted.

Many thanks.

Richard

- -- 
QinetiQ                                  
B009 Woodward Building
St. Andrews Road
Malvern
Worcs WR14 3PS
Jabber: RichardTaylor at jabber.org
PGPKey: http://search.keyserver.net:11371/pks/lookup?op=get&search=0xA7DA9FD9
Key fingerprint = D051 A121 E7C3 485F 3C0E  1593 ED9E D868 A7DA 9FD9
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQFAf4SI7Z7YaKfan9kRAnBjAJoDYDWaaB3zqfrChSMIvXo901WWQwCeKt21
vKa2BRlNHXHXq92vD7xaHOc=
=POTK
-----END PGP SIGNATURE-----



From barmenkov at bpc.ru  Fri Apr 16 06:20:01 2004
From: barmenkov at bpc.ru (Denis Barmenkov)
Date: Fri, 16 Apr 2004 16:20:01 +0400
Subject: [Twisted-Python] running local process to share serial port to many
	tcp clients
Message-ID: <OFD9877E8A.009D7718-ONC3256E78.00433407-C3256E78.00440929@bpc.ru>

Hello!

Is there some example/tutorial, how top create twisted application for 
sharing unique resource?
I have some hardware module, which connects to Linux computer via serial 
port. 
Simple protocol also exists: after writing some data to device, it think 
;), then returns response.

And my question is: how can I write separate process, which acts as 
serial_device proxy?
And how to implement interaction between 
twisted.internet.protocol.Protocol's descendants and this device-sharing 
protocol? 

Thank you!

Regards,
Denis Barmenkov




From itamar at itamarst.org  Fri Apr 16 07:34:49 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 16 Apr 2004 09:34:49 -0400
Subject: [Twisted-Python] New user, help needed with raw UDP packets
In-Reply-To: <200404160800.25087.r.taylor@eris.qinetiq.com>
References: <200404141546.27171.r.taylor@eris.qinetiq.com>
	<407DF575.8060103@divmod.com>
	<200404160800.25087.r.taylor@eris.qinetiq.com>
Message-ID: <1082119868.24621.395.camel@sheriffpony>

On Fri, 2004-04-16 at 03:00, Richard Taylor wrote:

> I have been looking at how to subclass usp.Port to get what I want but I have 
> come up against a problem that looks like a show stopper to me. It does not 
> look like Python's socket library supports SOCK_RAW. I may be mistaken, but I 
> think that I need to put the socket into RAW mode to get the incoming headers 
> and to set my own headers on the outgoing packets. Without SOCK_RAW I am 
> stuffed.

Were you running as root? That would be a requirement.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From exarkun at divmod.com  Thu Apr 15 21:09:12 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 16 Apr 2004 03:09:12 GMT
Subject: [Twisted-Python] Re: [Twisted-commits] r10475 - Use writeSequence
	instead of silly for-loop.
Message-ID: <20040416030912.30707.1181449689.divmod.quotient.76@ohm>

On Thu, 15 Apr 2004 13:27:56 -0400, James Y Knight <foom at fuhm.net> wrote:
>
> On Apr 5, 2004, at 10:36 AM, Andrew Bennetts wrote:
> 
> 
> This is of course quite silly, and I suspect a nice performance 
> enhancement could be achieved by making FileDescriptor.dataBuffer be a 
> list of strings, rather than a single string. That would both cause 
> multiple writes in a row to not allocate new strings, and allow 
> writeSequence to be implemented sanely.

  Been there :)  FileDescriptor.dataBuffer was a list when I first started hacking around in Twisted's internals.  The current implementation is the result of an optimization of that code, and is somewhat (not earth-shatteringly) faster.

> 
> Doesn't look very hard really; looks like you'd only need to touch 
> write/writeSequence/doWrite. This'd also have the advantage of making 
> it easier to put a Sendfile-struct in there as well. So pahan's 
> volunteered to fix this!

  There are a few other places that need to be touched, but it is certainly doable.  The main problem is simply that tcp.py is such a mess.

  Jp



From exarkun at divmod.com  Fri Apr 16 07:44:38 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 16 Apr 2004 13:44:38 GMT
Subject: [Twisted-Python] New user, help needed with raw UDP packets
Message-ID: <20040416134438.30707.1697486508.divmod.quotient.77@ohm>

On Fri, 16 Apr 2004 09:34:49 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Fri, 2004-04-16 at 03:00, Richard Taylor wrote:
> 
> > I have been looking at how to subclass usp.Port to get what I want but I have 
> > come up against a problem that looks like a show stopper to me. It does not 
> > look like Python's socket library supports SOCK_RAW. I may be mistaken, but I 
> > think that I need to put the socket into RAW mode to get the incoming headers 
> > and to set my own headers on the outgoing packets. Without SOCK_RAW I am 
> > stuffed.
> 
> Were you running as root? That would be a requirement.

  Moreover, "Python's" socket library is really just a thin wrapper around the platform socket library.  Restrictions such as "Raw sockets can only be created by root" are imposed by the platform, not by Python.  Similarly, if the platform socket library does not support raw sockets, Python will not support raw sockets.

  Since you seem to have the SOCK_RAW name in the socket module, I'm guessing that Itamar's guess of privileges being the problem is correct, rather than support being completely missing.

  Jp




From soso_pub at yahoo.com  Fri Apr 16 15:47:16 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Fri, 16 Apr 2004 14:47:16 -0700 (PDT)
Subject: [Twisted-Python] pb: async call in remote method
Message-ID: <20040416214716.33395.qmail@web14809.mail.yahoo.com>

Hi all,

I have a client and server that talk to each other
through pb.
The situation is the following:

The client calls a remote method:
"""
d = obj.callRemote('getValue', someParam)
d.addCallback(self.gotValue)
"""

On the server side:
"""
class PbValue(pb.Referenceable):
  def remote_getValue(self, someParam)
    result = processAsyncRequest(someParam)
    return notYetReceivedResult
"""

The problem is that processAsyncRequest is
asynchronous, sends a request to another server (not
Python) and returns without waiting for response, and
so there is no result to return from the remote method
back to the client at this point. 
Is it possible to somehow defer (funny heh) the
response that remote_getValue should send back to the
client until the result from processAsyncRequest
arrives?

Thanks,
Sorin


	
		
__________________________________
Do you Yahoo!?
Yahoo! Tax Center - File online by April 15th
http://taxes.yahoo.com/filing.html



From warner at lothar.com  Fri Apr 16 16:15:52 2004
From: warner at lothar.com (Brian Warner)
Date: Fri, 16 Apr 2004 15:15:52 -0700 (PDT)
Subject: [Twisted-Python] pb: async call in remote method
Message-ID: <20040416.151552.59486798.warner@lothar.com>

>   def remote_getValue(self, someParam)
>     result = processAsyncRequest(someParam)
>     return notYetReceivedResult
>
> Is it possible to somehow defer (funny heh) the response that
> remote_getValue should send back to the client until the result from
> processAsyncRequest arrives?

Yes, and in fact a Deferred is precisely what you use to do it. When a
remote_* method returns a Deferred, the PB internals know they should add a
callback to it, and they will refrain from sending a response to the client
until that Deferred fires.

    def remote_getValue(self, someParam):
        d = processAsyncRequest(someParam)
        return d

All you have to do is write your processAsyncRequest() function to create and
return a Deferred, and then do something which fires it with
d.callback(results) when the answer comes back. Maybe something like this:

class RequestHandler:

    def __init__(self):
        self.requests = {}
        self.reqnum = 0

    def processAsyncRequest(self, param):
        reqnum = self.reqnum
        self.reqnum += 1
        d = defer.Deferred()
        self.requests[reqnum] = d
        sendRequest(reqnum, param)  # send query to someone
        # assume our "answerReturned" method is called when they respond
        return d

    def answerReturned(self, reqnum, results):
        d = self.requests[reqnum]
        del self.requests[reqnum]
        d.callback(results)


cheers,
 -Brian




From soso_pub at yahoo.com  Fri Apr 16 16:36:56 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Fri, 16 Apr 2004 15:36:56 -0700 (PDT)
Subject: [Twisted-Python] pb: async call in remote method
In-Reply-To: <20040416.151552.59486798.warner@lothar.com>
Message-ID: <20040416223656.11877.qmail@web14803.mail.yahoo.com>


> Yes, and in fact a Deferred is precisely what you
> use to do it. 

Duh, thanks, indeed it works like a charm.
Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Tax Center - File online by April 15th
http://taxes.yahoo.com/filing.html



From tv at tv.debian.net  Fri Apr 16 17:16:16 2004
From: tv at tv.debian.net (Tommi Virtanen)
Date: Sat, 17 Apr 2004 02:16:16 +0300
Subject: [Twisted-Python] New user, help needed with raw UDP packets
In-Reply-To: <200404141546.27171.r.taylor@eris.qinetiq.com>
References: <200404141546.27171.r.taylor@eris.qinetiq.com>
Message-ID: <40806940.9030500@tv.debian.net>

Richard Taylor wrote:
> I am writing a UDP proxy/relay that needs to make detailed changes to the 
> internals of the UDP packets as they pass through. I intend to use 'Impacket' 
> to access the packet internals. One of the things that I need is to 'fake' 
> the destination address of packets leaving the proxy so that they look like 
> they have come from the original sender, Impacket has methods to do this for 
> 'raw' udp packets.
> 
> I think that I need to use a sub-class of ConnectedDatagramProtocol to send my 
> packets but the "self.transport.write" method takes only the packet payload 
> not the headers.

More to the point, normal UDP sockets cannot forge the source IP
address, as you seem to want to do.

You want "twisted.pair", RawUDPProtocol, and such things I sort of
half-wrote once. It's just about all there, you can make it work, but
it's not very complete and definitely not well documented.

doc/examples/pairudp.py shows a raw packet listener that reads from
a tuntap device and print out UDP packets with destination port 42.
You can also write such packets to the tuntap device, and the kernel
will route them from there on.

If you want to avoid tuntap, use packet sockets -- eunuchs (see
twisted.pair.tuntap docstring) has recvmsg() and sendmsg() wrappers that
should help.

For pcap integration, you're pretty much on your own.


My advice: don't try to do it with Python and Twisted unless you
already know how to do it in C :)



From mcfletch at rogers.com  Fri Apr 16 21:26:24 2004
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Fri, 16 Apr 2004 23:26:24 -0400
Subject: [Twisted-Python] Minor question wrt threading pools
Message-ID: <4080A3E0.2020207@rogers.com>

I'm sitting down to move more of our application into Twisted and have 
come across a minor question that I'm thinking would be a good addition 
to the threading howto.

In particular, starting a thread-pool seems to start the threads as 
non-daemon threads, so that on completion of the main reactor loop the 
threads are still hanging around (AFAICS, anyway, the app sits hung 
waiting for the background threads to complete).

It would be useful to know:

    * How to start threads in the threading pool as daemon threads (i.e.
      will exit when all non-daemon threads exit)
    * How to force an exit of all threads
          o How to access the currently active thread-pool (I assume the
            documented ThreadPool.stop method is what needs to be
            called, but how to get the ThreadPool object isn't
            documented AFAICS).

Anyway, it's not a show-stopper, I can just kill the app manually after 
each test run, still, would love to have an answer.  Have fun,
Mike

_______________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://members.rogers.com/mcfletch/





From mcfletch at rogers.com  Fri Apr 16 21:32:13 2004
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Fri, 16 Apr 2004 23:32:13 -0400
Subject: [Twisted-Python] Re: Minor question wrt threading pools
In-Reply-To: <4080A3E0.2020207@rogers.com>
References: <4080A3E0.2020207@rogers.com>
Message-ID: <4080A53D.9050807@rogers.com>

Argh, as always, discovered the solution seconds after sending the email:

ThreadPool is available as an (optional) attribute of reactor 
"threadpool".  Calling stop() allows the exit.  Still don't know how to 
make the threads daemon by default, but that's not an issue at the moment.

Sorry for the wasted bandwidth,
Mike

Mike C. Fletcher wrote:
...

>    * How to start threads in the threading pool as daemon threads (i.e.
>      will exit when all non-daemon threads exit)
>    * How to force an exit of all threads
>          o How to access the currently active thread-pool (I assume the
>            documented ThreadPool.stop method is what needs to be
>            called, but how to get the ThreadPool object isn't
>            documented AFAICS).

...




From itamar at itamarst.org  Fri Apr 16 23:40:20 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 17 Apr 2004 01:40:20 -0400
Subject: [Twisted-Python] Minor question wrt threading pools
In-Reply-To: <4080A3E0.2020207@rogers.com>
References: <4080A3E0.2020207@rogers.com>
Message-ID: <1082180419.24621.469.camel@sheriffpony>

On Fri, 2004-04-16 at 23:26, Mike C. Fletcher wrote:

>     * How to start threads in the threading pool as daemon threads (i.e.
>       will exit when all non-daemon threads exit)

I've seen python core dump when this is done (python 2.0 IIRC, but I'm
still *very* wary of doing it). I wouldn't if I were you :)

>     * How to force an exit of all threads

They exit automatically when program ends, i.e. you do reactor.stop() -
unless they are doing something, in which case they will exit when they
next try to read next task from queue. Your problem may be because you
are doing tests and thus reactor.stop() is neveer called and it thus
never shuts down the threadpool for you.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From mary-twisted at puzzling.org  Sat Apr 17 06:35:42 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 17 Apr 2004 22:35:42 +1000
Subject: [Twisted-Python] On splitting Twisted into subprojects
Message-ID: <20040417123542.GP29157@titus.home.puzzling.org>

    Note: Cross-posted to twisted-web and twisted-python. Decide between
    them for your follow-ups please :)

This is intended to spark a little more discussion on splitting Twisted
into subprojects, as discussed on Aussie-time on IRC (Jerub, jml, spiv
and myself).

It seems like the twisted-web project are planning to split off fairly
soon: see
http://twistedmatrix.com/pipermail/twisted-web/2004-April/000312.html

It's pretty likely that this split will go ahead without any kind of
imposed-from-above decisions about where the website will go, what the
release cycle will look like, where the docs will move to, what the
status of shared docs will be (I tend to focus on docs...)

The nightmare scenario for splitting twisted into subprojects is that
every subproject develops its own release code, release procedures,
testing framework, website, documentation style, community, policies...
etc etc. And shortly after that we all spiral into the sun or something.

There appeared to us to be three possible ways of avoiding this:

 1. Luck

 2. Release code, release procedures, testing framework, website,
 documentation style, community, policies... imposed from above

 3. Twisted Web (or whatever other project splits first) acting as a
 "model split": evolving release mechanisms, policy etc etc that are
 fundamentally sane and wonderful so that noone would think of doing
 things any other way.

Since 3 looks like being the most achievable, this is basically an
appeal to the twisted-web folk to keep in mind that they should, where
possible, try and make twisted-web the Model of a Modern Twisted
Subproject. And make it as easy as possible for other subprojects to
copy whatever it is that they're going to do.

I personally would like to offer my help in documenting subproject
procedures as they evolve, and storing that documentation in some kind
of prominent place.

-Mary



From radix at twistedmatrix.com  Sat Apr 17 11:02:21 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 17 Apr 2004 13:02:21 -0400
Subject: [Twisted-Python] On splitting Twisted into subprojects
In-Reply-To: <20040417123542.GP29157@titus.home.puzzling.org>
References: <20040417123542.GP29157@titus.home.puzzling.org>
Message-ID: <4081631D.8090602@twistedmatrix.com>

Mary Gardiner wrote:

Hi Mary; Sorry I haven't kept up with the discussion about the Twisted 
split lately.

> This is intended to spark a little more discussion on splitting Twisted
> into subprojects, as discussed on Aussie-time on IRC (Jerub, jml, spiv
> and myself).
> 
> It seems like the twisted-web project are planning to split off fairly
> soon: see
> http://twistedmatrix.com/pipermail/twisted-web/2004-April/000312.html

Actually, I'm going to beat them to it: Jp and I are going to be 
splitting off twisted.news this weekend. (*looks around for Jp*)

> It's pretty likely that this split will go ahead without any kind of
> imposed-from-above decisions about where the website will go, what the
> release cycle will look like, where the docs will move to, what the
> status of shared docs will be (I tend to focus on docs...)

Web site will be somewhere on twistedmatrix.com. How about:

   http://projects.twistedmatrix.com/<projectname>
?

> The nightmare scenario for splitting twisted into subprojects is that
> every subproject develops its own release code, release procedures,
> testing framework, website, documentation style, community, policies...
> etc etc. And shortly after that we all spiral into the sun or something.

I've been working on the release automation the last few days. At 
*least* the SVN release process workflow will probably remain the same 
between all projects; I'll be splitting release-twisted off into a 
module in twisted.python soon to facilitate other projects using it.

We *want* to keep the community, documentation styles, web site, 
policies, all integrated fairly well. A little more on this later..

>  2. Release code, release procedures, testing framework, website,
>  documentation style, community, policies... imposed from above

Ok. :-)

>  3. Twisted Web (or whatever other project splits first) acting as a
>  "model split": evolving release mechanisms, policy etc etc that are
>  fundamentally sane and wonderful so that noone would think of doing
>  things any other way.

Well, this is why I'm starting with twisted.news. I'll also probably get 
to a few more projects before the web split occurs, all of them less 
popular. news, flow, (im, words), lore, conch, probably in something 
like that order.

Web is going to be more complex, because they're doing a rewrite now, 
and they don't know how they want to integrate nevow, etc...

> I personally would like to offer my help in documenting subproject
> procedures as they evolve, and storing that documentation in some kind
> of prominent place.

You posted about the documentation a short while ago, and I'll respond 
about it here.

Mary wants the documentation to be kept in a single project. I don't 
think this is how it should be done; we'll allow each project to keep 
its own doc/ directory. Each project should be responsible for its own 
documentation, but I can personally ensure that you have access to the 
docs for all the projects, though, Mary. :-)

HOWEVER, don't worry that the documentation will become disparate in any 
user-visible sense. All projects will have their documentation visible 
somewhere within twistedmatrix.com/, and we could even have a monolithic 
"docs" section that links to all the others if we find it becomes 
necessary (I think the current 'howto' page is an absolute mess, though).

The "Twisted Book" is up for debate; personally, I don't care about it, 
and I'd be inclined to just have a per-project "Book" (collection of 
HOWTOs in ps/pdf form). If people really think it's a good idea, though, 
there's no reason that we can't have the same monolithic book.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040417/36d38a86/attachment.sig>

From glyph at divmod.com  Sat Apr 17 11:05:58 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 17 Apr 2004 13:05:58 -0400
Subject: [Twisted-Python] On splitting Twisted into subprojects
In-Reply-To: <20040417123542.GP29157@titus.home.puzzling.org>
References: <20040417123542.GP29157@titus.home.puzzling.org>
Message-ID: <7EF8E81F-9091-11D8-B6DF-000393C9700E@divmod.com>


On Apr 17, 2004, at 8:35 AM, Mary Gardiner wrote:

> Since 3 looks like being the most achievable, this is basically an
> appeal to the twisted-web folk to keep in mind that they should, where
> possible, try and make twisted-web the Model of a Modern Twisted
> Subproject. And make it as easy as possible for other subprojects to
> copy whatever it is that they're going to do.

I think that we are going to need some of #2 as well.  Without the 
Imposition From Above, the subprojects are likely to start in a similar 
place (modeled after Twisted.Web, as you suggest) and gradually diverge 
based on evolutionary needs, leaving them all completely different and 
weird in a year's time.

Your focus on docs is correct, though, because what we really need is a 
shared policy document :).

What we ALSO need, Christopher Armstrong, if you are reading this, is a 
release-twisted script which is its own, bootstrap-released project 
that can be run on ANY of the twisted subprojects to generate an 
instant release.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040417/d84d08b9/attachment.sig>

From radix at twistedmatrix.com  Sat Apr 17 11:16:25 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 17 Apr 2004 13:16:25 -0400
Subject: [Twisted-Python] On splitting Twisted into subprojects
In-Reply-To: <7EF8E81F-9091-11D8-B6DF-000393C9700E@divmod.com>
References: <20040417123542.GP29157@titus.home.puzzling.org>
	<7EF8E81F-9091-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <40816669.2040002@twistedmatrix.com>

Glyph Lefkowitz wrote:
> 
> On Apr 17, 2004, at 8:35 AM, Mary Gardiner wrote:
> 
>> Since 3 looks like being the most achievable, this is basically an
>> appeal to the twisted-web folk to keep in mind that they should, where
>> possible, try and make twisted-web the Model of a Modern Twisted
>> Subproject. And make it as easy as possible for other subprojects to
>> copy whatever it is that they're going to do.
> 
> 
> I think that we are going to need some of #2 as well.  Without the 
> Imposition From Above, the subprojects are likely to start in a similar 
> place (modeled after Twisted.Web, as you suggest) and gradually diverge 
> based on evolutionary needs, leaving them all completely different and 
> weird in a year's time.
> 
> Your focus on docs is correct, though, because what we really need is a 
> shared policy document :).
> 
> What we ALSO need, Christopher Armstrong, if you are reading this, is a 
> release-twisted script which is its own, bootstrap-released project that 
> can be run on ANY of the twisted subprojects to generate an instant 
> release.

Ahem, I've been working on release-twisted full-time for the past 2 or 3 
days :-)

Anyway, I see no point in making it bootstrapped. The only 
"bootstrapping" that would theoretically be necessary is for releasing 
Twisted itself, where r-t is contained, and that's been possible since 
its conception. All of the other projects can just rely on the presence 
of twisted during their release.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040417/12e03dd8/attachment.sig>

From glyph at divmod.com  Sat Apr 17 12:18:27 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 17 Apr 2004 14:18:27 -0400
Subject: [Twisted-Python] On splitting Twisted into subprojects
In-Reply-To: <4081631D.8090602@twistedmatrix.com>
References: <20040417123542.GP29157@titus.home.puzzling.org>
	<4081631D.8090602@twistedmatrix.com>
Message-ID: <9F91AF32-909B-11D8-B6DF-000393C9700E@divmod.com>


On Apr 17, 2004, at 1:02 PM, Christopher Armstrong wrote:

> The "Twisted Book" is up for debate; personally, I don't care about 
> it, and I'd be inclined to just have a per-project "Book" (collection 
> of HOWTOs in ps/pdf form). If people really think it's a good idea, 
> though, there's no reason that we can't have the same monolithic book.

The "twisted book" should not be a random conglomeration of HOWTOs 
(which are badly named anyway, they're *not* how-to documents, they're 
articles about concepts), it should be a book with some organization 
and structure.  The articles should stand on their own where possible, 
but there are a lot of interrelated concepts that you have to learn and 
they should reference each other.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040417/de81fffc/attachment.sig>

From radix at twistedmatrix.com  Sat Apr 17 15:18:35 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 17 Apr 2004 17:18:35 -0400
Subject: [Twisted-Python] Twisted split: tap plugins
Message-ID: <40819F2B.2060709@twistedmatrix.com>

So, Jp and I ran into our first Big Problem with the Twisted split. 
First, though, we *have* gotten the TwistedNews repository set up:

   svn://svn.twistedmatrix.com/svn/TwistedNews/trunk
or
   svn+ssh://....

The problem is the tap plugin. Currently both TwistedNews and Twisted 
have a plugins.tml that contains a "news" tap plugin. We assume that 
we'll leave twisted.news in Twisted for a little while for backwards 
compatibility.

The alternatives that we've come up with are like so:

1) Rename 'mktap news' to 'mktap newsnews' in TwistedNews. Rename it
    back to 'news' when we get rid of twisted.news. This is Jp's
    solution.
2) Add an optional argument to the register() call in plugins.tml:
    allowOverride=True. This would mean that another register() call with
    similar arguments would override this one, whether it gets executed
    before or after this one. We would pass this argument to our
    deprecated tap-plugins in Twisted's plugins.tml. This is my solution.

I dislike the idea of a rename, because not only would we force users to 
change what they're doing now, we'd force them to change what they're 
doing later when we get rid of twisted.news.

This problem is going to have to be solved now, because we'll have 
similar problem with pretty much all of the packages we'll be splitting 
from Twisted.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040417/200feb49/attachment.sig>

From itamar at itamarst.org  Sat Apr 17 15:28:31 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 17 Apr 2004 17:28:31 -0400
Subject: [Twisted-Python] Twisted split: tap plugins
In-Reply-To: <40819F2B.2060709@twistedmatrix.com>
References: <40819F2B.2060709@twistedmatrix.com>
Message-ID: <1082237310.24620.472.camel@sheriffpony>

On Sat, 2004-04-17 at 17:18, Christopher Armstrong wrote:

> We assume that we'll leave twisted.news in Twisted for a little while
> for backwards compatibility.

I question your assumptions!

Options:
1. No backwards compatibility.
2. If TwistedNews is installed, it will also show up as twisted.news for
backwards compatibility.

but having duplicate code is silly and confusing.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Sat Apr 17 15:33:15 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 17 Apr 2004 17:33:15 -0400
Subject: [Twisted-Python] Twisted split: tap plugins
In-Reply-To: <1082237310.24620.472.camel@sheriffpony>
References: <40819F2B.2060709@twistedmatrix.com>
	<1082237310.24620.472.camel@sheriffpony>
Message-ID: <1082237595.24622.474.camel@sheriffpony>

On Sat, 2004-04-17 at 17:28, Itamar Shtull-Trauring wrote:

> Options:
> 1. No backwards compatibility.
> 2. If TwistedNews is installed, it will also show up as twisted.news for
> backwards compatibility.

For twisted.web, I think we should go for option #2 using the *current*
code, and the new rewrite will of course not be in same namespace.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From slyphon at twistedmatrix.com  Sat Apr 17 16:22:50 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sat, 17 Apr 2004 18:22:50 -0400
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
Message-ID: <1082240569.22948.37.camel@willie-the-pimp>

This is response to issue 178 on the twisted tracker:
http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue178,
about the deferred method setTimeout.

The reason why I added a "DON'T USE THIS" to the docstring was that I
find that we are telling people this at least once a week. I think it
has more gravitas coming from the API documentation, as there is this
illusion that the people on IRC don't really know what they're talking
about, but if the author has marked something in the documentation, it
has a certain level of legitimacy.

I agree with spiv in the sense that it would be nice to have a minimal
interface that would provide this functionality. However, i think that
the level of control that is needed to pull this off properly is best
served by writing an explicit timeout method and accompanying call to
callLater. 

now, I'd like to present the idiom that we are try to encourage users to
follow every time we have to steer them away from setTimeout. 

------------------------------------------------------

d = iReturnADeferred()

def onTimeout():
    handleTimeoutCondition()

delayedCall = reactor.callLater(timeoutLen, onTimeout)

def success(value):
    handleSuccess()

def nonTimeoutFailure(reason):
    handleErrorCondition()

def cancelTimeout(val):
    if delayedCall.active():
        delayedCall.cancel()

d.addBoth(cancelTimeout)
d.addCallback(success)
d.addErrback(nonTimeoutFailure)

-------------------------------------------------------

Here you see that each step is very explicit. You can see what happens
on success and on timeout (failure). I think one problem with setTimeout
is the handling of the IDelayedCall is something that a new user could
miss.  

For instance, someone who hadn't /read/ the code of setTimeout, would
most likely miss the returned IDelayedCall, and wouldn't know to cancel
the pending timeout call in the event of success OR other failure. This
is _a crucial piece of the code path_, and setTimeout makes this easier
to miss.



As from the Zen of Python Programming:

- Explicit is better than implicit
    
    setTimeout hides a small piece of code that contains all of the
    important conceptual elements that a user is required to understand
    so that they may handle this side-exit condition properly.
    

- Special cases aren't special enough to break the rules

    Delayed calls are orthogonal to deferreds. 

    Deferreds are a _reactive_ tool, they fire in response to an event
    
    delayed calls are a _proactive_ tool, they cause events to fire

    Mixing the two together for the special case of dealing with a
    timeout is at best hairy and at worst ugly and confusing.

    Timeout conditions are _not necessarily_ something that a user needs
    to deal with 80% of the time they are working with deferreds. 


- Simple is better than complex

    The deferred api should contain absolutely necessary functionality. 

    Let's emulate the python language, not the python standard library


- There should be one, and preferrably only one way to do it

    It is better to have users of our API use a widely-understood and
    flexible idiom to accomplish this rather than a half-baked method
    that saves them 8 lines of easily written and conceptually crucial
    code

    I would like to recommend that we document a best-practice idiom
    in the deferred api documentation, and remove setTimeout.


- If an implementation is hard to explain it's a bad idea

    Explaining to users how to properly use setTimeout takes more effort
    than explaining to them how to use the tools that setTimeout employs
    to achieve its functionality.


spiv said: 

"In hindsight, I should've thought harder about the implications of
setTimeout before I committed it... but now it's there, I don't like the
idea of ripping it out unless we have a clearly better solution."

This is a less-than-optimal solution to an edge-case use of two
orthogonal parts of our API.

It makes no sense to leave a sharp, pointy thing lying around for users
to hurt themselves with, and to constantly tell them "DON'T USE THAT".


-Jonathan Simms 
slyphon AT twistedmatrix DOT com

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040417/88af04b4/attachment.sig>

From bob at redivi.com  Sat Apr 17 17:05:11 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 17 Apr 2004 19:05:11 -0400
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <1082240569.22948.37.camel@willie-the-pimp>
References: <1082240569.22948.37.camel@willie-the-pimp>
Message-ID: <ADA4AC4E-90C3-11D8-8EF5-000A95686CD8@redivi.com>


On Apr 17, 2004, at 6:22 PM, Jonathan Simms wrote:

> This is response to issue 178 on the twisted tracker:
> http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue178,
> about the deferred method setTimeout.
>
> The reason why I added a "DON'T USE THIS" to the docstring was that I
> find that we are telling people this at least once a week. I think it
> has more gravitas coming from the API documentation, as there is this
> illusion that the people on IRC don't really know what they're talking
> about, but if the author has marked something in the documentation, it
> has a certain level of legitimacy.
>
> I agree with spiv in the sense that it would be nice to have a minimal
> interface that would provide this functionality. However, i think that
> the level of control that is needed to pull this off properly is best
> served by writing an explicit timeout method and accompanying call to
> callLater.
>
> now, I'd like to present the idiom that we are try to encourage users 
> to
> follow every time we have to steer them away from setTimeout.

+10, setTimeout as-is is just about the absolute worst way it could 
possibly be implemented, and this version makes sense.  The only 
"problem" is that existing APIs will have to be refactored such that 
there is something useful and public you can use for 
"handleTimeoutCondition", because IIRC most of them don't have a 
cancellation feature at all -- let alone one that's public and usable.

-bob




From mary-twisted at puzzling.org  Sat Apr 17 17:04:07 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 18 Apr 2004 09:04:07 +1000
Subject: [Twisted-Python] On splitting Twisted into subprojects
In-Reply-To: <4081631D.8090602@twistedmatrix.com>
References: <20040417123542.GP29157@titus.home.puzzling.org>
	<4081631D.8090602@twistedmatrix.com>
Message-ID: <20040417230407.GS29157@titus.home.puzzling.org>

On Sat, Apr 17, 2004, Christopher Armstrong wrote:
> Mary wants the documentation to be kept in a single project. I don't 
> think this is how it should be done; we'll allow each project to keep 
> its own doc/ directory. Each project should be responsible for its own 
> documentation, but I can personally ensure that you have access to the 
> docs for all the projects, though, Mary. :-)
> 
> HOWEVER, don't worry that the documentation will become disparate in any 
> user-visible sense. All projects will have their documentation visible 
> somewhere within twistedmatrix.com/, and we could even have a monolithic 
> "docs" section that links to all the others if we find it becomes 
> necessary (I think the current 'howto' page is an absolute mess, though).

Yeah the howto page is a mess (*and* misnamed as Glyph points out
elsewhere). There's also very weird coverage in places (detailed things
covered, basic things missing) that having subprojects may help with,
because coverage of their subproject will be important to them.

Goodness knows what happens to the tutorial in this model. It could
perhaps split into pieces and be greatly expanded by each subproject. It
definitely is useful to people: most docs bugs are filed against it.

At a lower level, all I really want from the docs is two things:

 1. Ability to find them in some kind of defined spot and to be able to
 edit the etc. You state this above.
 
 2. Some kind of policy about certain things which I can't even begin to
 define yet, but which may include directory structure, referencing and
 the like. However, since doc refactors are easier than code refactors,
 I'm happy to make policy when required rather than do it in advance.

 3. Cooperation from subproject developers: ie ability to hassle them
 about docs, nag them about broken and missing docs and that sort of
 thing. (At present, I file docs bugs against myself, that can't
 continue with X subprojects :) )

I think at the moment I don't really have 3, because a solid half of the
project's developers aren't aware that there is someone who has (however
tenuous) responsibility for the docs, especially since the twisted-web
list appeared fairly early in that process. I may be misjudging people
there.

-Mary



From mary-twisted at puzzling.org  Sat Apr 17 17:10:30 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 18 Apr 2004 09:10:30 +1000
Subject: [Twisted-Python] On splitting Twisted into subprojects
In-Reply-To: <20040417230407.GS29157@titus.home.puzzling.org>
References: <20040417123542.GP29157@titus.home.puzzling.org>
	<4081631D.8090602@twistedmatrix.com>
	<20040417230407.GS29157@titus.home.puzzling.org>
Message-ID: <20040417231030.GT29157@titus.home.puzzling.org>

On Sun, Apr 18, 2004, Mary Gardiner wrote:
> I think at the moment I don't really have 3, because a solid half of
> the project's developers aren't aware that there is someone who has
> (however tenuous) responsibility for the docs, especially since the
> twisted-web list appeared fairly early in that process. I may be
> misjudging people there.

On reflection, this is probably most of the reason I like a separate
docs project: if people have to commit docs into a separate project,
they would probably be more aware of a cross-Twisted documentation
policy (insofar as one exists, which it will, I hope).

However, that's clearly not sufficient justification (because if you
replace the words "docs" with "code" the statement becomes stupid).

-Mary



From exarkun at divmod.com  Sat Apr 17 17:59:22 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sat, 17 Apr 2004 23:59:22 GMT
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
Message-ID: <20040417235922.30707.1671390040.divmod.quotient.90@ohm>

On Sat, 17 Apr 2004 18:22:50 -0400, Jonathan Simms <slyphon at twistedmatrix.com> wrote:
>
> [snip]
> 
> ------------------------------------------------------
> 
> d = iReturnADeferred()
> 
> def onTimeout():
>     handleTimeoutCondition()
> 
> delayedCall = reactor.callLater(timeoutLen, onTimeout)
> 
> def success(value):
>     handleSuccess()
> 
> def nonTimeoutFailure(reason):
>     handleErrorCondition()
> 
> def cancelTimeout(val):
>     if delayedCall.active():
>         delayedCall.cancel()

      return val

> 
> d.addBoth(cancelTimeout)
> d.addCallback(success)
> d.addErrback(nonTimeoutFailure)
> 
> -------------------------------------------------------

  While I think the above is very close to being correct (it even fooled me into thinking it was correct for several minutes, during which I composed an alternate email expounding on how we might simplify users' lives by extracting the common portions of the above into a helper function), ultimately even it does not solve all the issues relating to timing out Deferreds.

  The problem is simply that "onTimeout" in the above code cannot be correctly defined by anyone except the person who defined "iReturnADeferred".

  The above pattern may be useful for framework implementors, but not users.  Framework implementors typically (though not always) understand how to handle timeout issues, so this is of little help.

  I think that users asking for help with setTimeout or with timing out Deferreds need to be handled in one of two ways:

  1) Direct them to APIs related to the features they wish to use with timeouts that already support timeouts directly (ie, not through setTimeout calls on the Deferreds they return).  Examples of such APIs include twisted.web.client.getPage and twisted.names.client.lookupAddress.

  2) If APIs for the feature they wish to use do not support timeouts, explain this.  Recommend that the user submit a patch or open an issue on the bug tracker, and/or apologize to them that Twisted is not yet perfect in every respect.

> [snip]
> 
> It makes no sense to leave a sharp, pointy thing lying around for users
> to hurt themselves with, and to constantly tell them "DON'T USE THAT".
> 

  I think that deprecating setTimeout is a good thing, even if several years must pass before we can actually remove it.  In addition to the reasons Jonathan gave, I will add this:

  setTimeout() is the only part of Deferreds that tie them to twisted.internet.  If it is removed, defer.py could (other issues, such as backwards compatibility and user consternation aside) be moved to the twisted.python package.  It also makes it that much easier to use Deferreds with a non-Twisted reactor.

  Jp



From andrew-twisted at puzzling.org  Sat Apr 17 18:25:34 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 18 Apr 2004 10:25:34 +1000
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <1082240569.22948.37.camel@willie-the-pimp>
References: <1082240569.22948.37.camel@willie-the-pimp>
Message-ID: <20040418002534.GA7803@frobozz>

It looks like I've succeeded in rekindling interest in this issue :)

On Sat, Apr 17, 2004 at 06:22:50PM -0400, Jonathan Simms wrote:
> This is response to issue 178 on the twisted tracker:
> http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue178,
> about the deferred method setTimeout.
> 
> The reason why I added a "DON'T USE THIS" to the docstring was that I
> find that we are telling people this at least once a week. I think it
> has more gravitas coming from the API documentation, as there is this
> illusion that the people on IRC don't really know what they're talking
> about, but if the author has marked something in the documentation, it
> has a certain level of legitimacy.

Well, I guess I'm a bit confused.  Why not raise a DeprecationWarning as
well then?  Is "DON'T USE THIS" meant to be a watered-down version of a
DeprecationWarning?

> I agree with spiv in the sense that it would be nice to have a minimal
> interface that would provide this functionality. However, i think that
> the level of control that is needed to pull this off properly is best
> served by writing an explicit timeout method and accompanying call to
> callLater. 

The tricky part isn't the callLater, it's the actual cancellation of
whatever the operation that would've produced a deferred result -- and
that's something defer.py can't help with, because it is app-specific.

> now, I'd like to present the idiom that we are try to encourage users to
> follow every time we have to steer them away from setTimeout. 
> 
> ------------------------------------------------------
> 
> d = iReturnADeferred()
> 
> def onTimeout():
>     handleTimeoutCondition()
> 
> delayedCall = reactor.callLater(timeoutLen, onTimeout)
> 
> def success(value):
>     handleSuccess()
> 
> def nonTimeoutFailure(reason):
>     handleErrorCondition()
> 
> def cancelTimeout(val):
>     if delayedCall.active():
>         delayedCall.cancel()
> 
> d.addBoth(cancelTimeout)
> d.addCallback(success)
> d.addErrback(nonTimeoutFailure)
> 
> -------------------------------------------------------
> 
> Here you see that each step is very explicit. You can see what happens
> on success and on timeout (failure). I think one problem with setTimeout
> is the handling of the IDelayedCall is something that a new user could
> miss.  

First, there's a bug.  Presumably, cancelTimeout should return val,
otherwise you swallow the result/failure, regardless of what actually
happens.

What I don't see here is the most important part: presumably,
iReturnADeferred starts a long-running operation going, maybe a call to a
remote server.  This code doesn't do anything to stop that operation, and
doesn't do anything to prevent an AlreadyCalledError happening in that code
when the long-running operation completes.  Or does the mysterious
handleTimeoutCondition method do that?

setTimeout doesn't provide that either -- but it was my understanding that
that was the main objection to it.  Why is handling this yourself (which as
you demonstrate is error-prone!) an improvement over setTimeout?

With setTimeout, this code becomes:

----
d = iReturnADeferred()

def onTimeout():
    handleTimeoutCondition()
    raise defer.TimeoutError

d.setTimeout(timeoutLen, onTimeout)

def success(value):
    handleSuccess()

def nonTimeoutFailure(reason):
    if reason.check(defer.TimeoutError):
        raise reason  # don't process TimeoutErrors here
    handleErrorCondition()

d.addCallback(success)
d.addErrback(nonTimeoutFailure)
----

I think that's an accurate translation, anyway, your example relies a bit
too heavily on mysterious global functions to be 100% clear.

> For instance, someone who hadn't /read/ the code of setTimeout, would
> most likely miss the returned IDelayedCall, and wouldn't know to cancel
> the pending timeout call in the event of success OR other failure. This
> is _a crucial piece of the code path_, and setTimeout makes this easier
> to miss.

I think you misunderstand setTimeout.  You can safely ignore the
IDelayedCall it returns (and the fact it does so isn't even documented in
the docstring), and the delayed call will be cancelled for you anyway if the
deferred is called back before the timeout triggers.  setTimeout doesn't
make this easier to miss; it makes it so you don't have to worry about it at
all.

> As from the Zen of Python Programming:
> 
> - Explicit is better than implicit
>     
>     setTimeout hides a small piece of code that contains all of the
>     important conceptual elements that a user is required to understand
>     so that they may handle this side-exit condition properly.

This is true of many functions and classes, e.g. how LineReceiver's
dataReceived handler works is an excellent example of how to do a certain
task in Twisted, but the implementation is hidden from the user!  Oh, except
that they can always read the source if they want to know :)

I don't believe that convenience functions are inherently bad because they
hide things from the user (and defer.py has lots of them).  If they mean
there's one less code idiom to learn, then great.  If they mean there's a
working example for people to read, including warts that real-life imposes
that wouldn't be in an artificial example, great.

>     
> - Special cases aren't special enough to break the rules
> 
>     Delayed calls are orthogonal to deferreds. 

This I somewhat agree with, enough that I'd be tempted to make setTimeout
live as a help function in twisted.internet.util rather than a method of
Deferred, or similar, except that it would be considerably harder and
messier to write.

>     Deferreds are a _reactive_ tool, they fire in response to an event
>     
>     delayed calls are a _proactive_ tool, they cause events to fire
> 
>     Mixing the two together for the special case of dealing with a
>     timeout is at best hairy and at worst ugly and confusing.

I disagree.  The event that Deferreds react to has to come from *somewhere*.

What is problematic is that timeouts provide a *second* place that might
trigger the Deferred, in addition to whatever the usual place the creator
expects.  With setTimeout, this means that AlreadyCalledErrors can arise
from calls to d.callback/d.errback where the original author didn't expect
them, just because a user of that module is setting timeouts to Deferreds.
I thought this was the primary objection to setTimeout?  It's certainly the
biggest concern I have about it.

Ok, how about a compromise: if a creator a Deferred is able to cope with
timeouts, they should pass an "allowTimeouts=True" flag to the constructor.
Without it, the setTimeout method will raise an AssertionError.  (For
backwards-compatibility, for a release it will merely raise a Warning rather
than an exception).  I'm willing to implement this, and properly document
setTimeout in the Deferred HOWTO while I'm at it.  This is now my preferred
option.

>     Timeout conditions are _not necessarily_ something that a user needs
>     to deal with 80% of the time they are working with deferreds. 

Great.  So they won't call setTimeout.  Why is this a problem?

> - Simple is better than complex
> 
>     The deferred api should contain absolutely necessary functionality. 
> 
>     Let's emulate the python language, not the python standard library

On the other hand, timeouts are often desired functionality, and they should
have a common API for people to implement them and use them.

It would be a shame if "oh, I got a deferred from twisted.news, but I want
to set a timeout on it, so I do d.callback(twisted.news.magicTimeoutResult)
in a DIY delayed call... but if I get a deferred from twisted.mail I want to
set a timeout on, I do mailConnection.timeoutRequest(d), and if..." etc.

Functions/methods to support timeouts are an ideal candidate for inclusion
in Twisted, if only we could agree on what functions/methods :)

> - There should be one, and preferrably only one way to do it
> 
>     It is better to have users of our API use a widely-understood and
>     flexible idiom to accomplish this rather than a half-baked method
>     that saves them 8 lines of easily written and conceptually crucial
>     code

You mean error-prone, like your example ;)

>     I would like to recommend that we document a best-practice idiom
>     in the deferred api documentation, and remove setTimeout.

I don't believe it's easily written until you have a pretty advanced grasp
of both Deferreds and reactor.callLater.  I don't see why allowing users of
Deferreds to just say "d.setTimeout(5)" is a bad thing?

setTimeout has the big big advantage that it's dead easy for *users* of
Deferreds to work with.  The trouble with it is that it requires some work
from the *creators* of Deferreds to support safely -- but I see the same
flaw in every solution proposed, including your own of documenting and
entirely by-hand idiom.

> - If an implementation is hard to explain it's a bad idea
> 
>     Explaining to users how to properly use setTimeout takes more effort
>     than explaining to them how to use the tools that setTimeout employs
>     to achieve its functionality.

I believe your idiom suffers from this even worse than setTimeout.

I'm happy to write some docs to support correct usage of setTimeout that
people can be referred to.

> spiv said: 
> 
> "In hindsight, I should've thought harder about the implications of
> setTimeout before I committed it... but now it's there, I don't like the
> idea of ripping it out unless we have a clearly better solution."

I think my "allowTimeouts" proposal above is a clearly better solution. :)

I'm going to spend a little time pondering it, then I'll look at
implementing a patch and adding it to the bug.

> This is a less-than-optimal solution to an edge-case use of two
> orthogonal parts of our API.

I disagree.

> It makes no sense to leave a sharp, pointy thing lying around for users
> to hurt themselves with, and to constantly tell them "DON'T USE THAT".

Agreed.  It should be properly documented at least.

-Andrew.




From andrew-twisted at puzzling.org  Sat Apr 17 18:28:41 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 18 Apr 2004 10:28:41 +1000
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <20040417235922.30707.1671390040.divmod.quotient.90@ohm>
References: <20040417235922.30707.1671390040.divmod.quotient.90@ohm>
Message-ID: <20040418002841.GB7803@frobozz>

On Sat, Apr 17, 2004 at 11:59:22PM +0000, exarkun at divmod.com wrote:
> 
>   setTimeout() is the only part of Deferreds that tie them to
>   twisted.internet.  If it is removed, defer.py could (other issues, such
>   as backwards compatibility and user consternation aside) be moved to the
>   twisted.python package.  It also makes it that much easier to use
>   Deferreds with a non-Twisted reactor.

This bugs me too, but only a little.  I can't think of any other
asynchronous python frameworks outside of Twisted that might want to use
Deferreds.

-Andrew.




From bob at redivi.com  Sat Apr 17 18:51:58 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 17 Apr 2004 20:51:58 -0400
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <20040418002841.GB7803@frobozz>
References: <20040417235922.30707.1671390040.divmod.quotient.90@ohm>
	<20040418002841.GB7803@frobozz>
Message-ID: <98565342-90D2-11D8-8EF5-000A95686CD8@redivi.com>


On Apr 17, 2004, at 8:28 PM, Andrew Bennetts wrote:

> On Sat, Apr 17, 2004 at 11:59:22PM +0000, exarkun at divmod.com wrote:
>>
>>   setTimeout() is the only part of Deferreds that tie them to
>>   twisted.internet.  If it is removed, defer.py could (other issues, 
>> such
>>   as backwards compatibility and user consternation aside) be moved 
>> to the
>>   twisted.python package.  It also makes it that much easier to use
>>   Deferreds with a non-Twisted reactor.
>
> This bugs me too, but only a little.  I can't think of any other
> asynchronous python frameworks outside of Twisted that might want to 
> use
> Deferreds.

I've used it outside of twisted plenty of times (more failure than 
deferred), even in other networking code... but I wrote my own versions 
of each because I wanted to fix issues with deferred, and I wanted a 
simpler implementation of failure.

-bob




From exarkun at divmod.com  Sat Apr 17 22:21:11 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sun, 18 Apr 2004 04:21:11 GMT
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
Message-ID: <20040418042111.30707.1531569673.divmod.quotient.94@ohm>

On Sun, 18 Apr 2004 10:25:34 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
>
> [snip]
> 
> I don't see why allowing users of Deferreds to just say 
> "d.setTimeout(5)" is a bad thing?
>
> [snip]

  I tend to prefer "foo(x, y, timeout=z)" over "foo(x, y).setTimeout(z)".  As both require explicit support from the implementor of "foo" (as you correctly note is the only way .setTimeout() can actually work), it seems unnecessary to special-case this form of failure in Deferreds.  I cast my vote for the former.

  Jp





From slyphon at twistedmatrix.com  Sun Apr 18 01:19:38 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sun, 18 Apr 2004 03:19:38 -0400
Subject: [Twisted-Python] addCallbacks issue
Message-ID: <1082272778.23431.6.camel@willie-the-pimp>

I think that:

    d.addCallback(cb)
    d.addErrback(eb)

is the more common idiom because it avoids the double-helix nature of
deferred handling, opting instead for a single node-to-node chain of
handling, which is less complex conceptually.

--snip!--

> Another way of approaching the concept might be to say that each stage
> in the chain has to deal with the errors in the chain before it - that
> is, if you do:
> 
>       d.addCallbacks(cb, eb)
> 
> then eb needs to handle any errors that arise from the data source, 
> while if you do:
> 
>       d.addCallback(cb)
>       d.addErrback(eb)
> 
> then eb needs to handle any errors that arise from the data source,
AND 
> any errors that arise from cb.
> 
>

I think that this chunk is the important concept to document. This
explanation in addition to the imperitave example given by Stephen would
ensure that this concept is documented and explained sufficiently. In
fact, i'd never thought to consider deferreds as a try/except/else
statement. very useful concept!

It's funny, because when i read the original posting to this thread, I
had the same confusion. "Waitasec, that errback /should/ get called!"

this thread has helped to elucidate a subtle and important point about
deferreds.



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040418/4caf7871/attachment.sig>

From slyphon at twistedmatrix.com  Sun Apr 18 02:48:28 2004
From: slyphon at twistedmatrix.com (slyphon at twistedmatrix.com)
Date: Sun, 18 Apr 2004 08:48:28 GMT
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
Message-ID: <20040418084828.30707.890808521.divmod.quotient.97@ohm>

>It looks like I've succeeded in rekindling interest in this issue :)
>
>> The reason why I added a "DON'T USE THIS" to the docstring was that I
>> find that we are telling people this at least once a week. I think it
>> has more gravitas coming from the API documentation, as there is this
>> illusion that the people on IRC don't really know what they're talking
>> about, but if the author has marked something in the documentation, it
>> has a certain level of legitimacy.
>
>Well, I guess I'm a bit confused.  Why not raise a DeprecationWarning as
>well then?  Is "DON'T USE THIS" meant to be a watered-down version of a
>DeprecationWarning?

Yes. It was a diplomatic move. I understand that you wrote this
function, and that you feel strongly that it adds value to the twisted
library. To me, a DeprecationWarning represents that there has been a
consensus reached that a certain function is not going to be supported
in the future. I wouldn't be so haughty as to decide that on my own, so
I put a note that reflected the advice that we normally give users on
IRC into the API docs.

>
>> I agree with spiv in the sense that it would be nice to have a minimal
>> interface that would provide this functionality. However, i think that
>> the level of control that is needed to pull this off properly is best
>> served by writing an explicit timeout method and accompanying call to
>> callLater. 
>
>The tricky part isn't the callLater, it's the actual cancellation of
>whatever the operation that would've produced a deferred result -- and
>that's something defer.py can't help with, because it is app-specific.

Indeed, i realised the flaws in my example about 20 minutes after
sending it

>>
>> now, I'd like to present the idiom that we are try to encourage users to
>> follow every time we have to steer them away from setTimeout. 
>> 
>> ------------------------------------------------------
>> 
>> d = iReturnADeferred()
>> 
>> def onTimeout():
>>     handleTimeoutCondition()
>> 
>> delayedCall = reactor.callLater(timeoutLen, onTimeout)
>> 
>> def success(value):
>>     handleSuccess()
>> 
>> def nonTimeoutFailure(reason):
>>     handleErrorCondition()
>> 
>> def cancelTimeout(val):
>>     if delayedCall.active():
>>         delayedCall.cancel()
>> 
>> d.addBoth(cancelTimeout)
>> d.addCallback(success)
>> d.addErrback(nonTimeoutFailure)
>> 
>> -------------------------------------------------------
>> 
>First, there's a bug.  Presumably, cancelTimeout should return val,
>otherwise you swallow the result/failure, regardless of what actually
>happens.

Yes, indeed.

>
>What I don't see here is the most important part: presumably,
>iReturnADeferred starts a long-running operation going, maybe a call to a
>remote server.  This code doesn't do anything to stop that operation, and
>doesn't do anything to prevent an AlreadyCalledError happening in that code
>when the long-running operation completes.  Or does the mysterious
>handleTimeoutCondition method do that?
>
>setTimeout doesn't provide that either -- but it was my understanding that
>that was the main objection to it.  Why is handling this yourself (which as
>you demonstrate is error-prone!) an improvement over setTimeout?

I apologise for the magicness implied by my example. 

What offends me about setTimeout is that it is a solution to a vague
problem. It seems to me that there are two different issues here, and
setTimeout doesn't solve either of them cleanly. 

The first is how to actually stop a long-running operation after a given
amount of time. Indeed, this functionality must be provided by the
framework author, perhaps exposing a public '.cancel()' method. There is
no way to provide or deal with this behavior in a generic way.

The other problem that I believe could be solved by a setTimeout-y
method is how to indicate that the client isn't interested in the
result of a long-running operation any more. 

I think this is an important distinction to make. It is a condition that
happens at the interface between your code and iReturnADeferred().
Instead of trying to stop whatever iReturnADeferred() is doing, you come
up with a way of saying, "after foo seconds, _i don't care about this
result_ and this is what we should do..." 


>
>>     Deferreds are a _reactive_ tool, they fire in response to an event
>>     
>>     delayed calls are a _proactive_ tool, they cause events to fire
>> 
>>     Mixing the two together for the special case of dealing with a
>>     timeout is at best hairy and at worst ugly and confusing.
>
>I disagree.  The event that Deferreds react to has to come from *somewhere*.

Yes, but the deferred is a reaction to an event. My point was that
you're adding event-creating code to an object whose job it is to react
to events. All i'm saying is that this adds complexity. Without the
current implementation of setTimeout, deferreds would be /completely
reactive/, and i think we can find a way to make them _appear_ that way.


>
>What is problematic is that timeouts provide a *second* place that might
>trigger the Deferred, in addition to whatever the usual place the creator
>expects.  With setTimeout, this means that AlreadyCalledErrors can arise
>from calls to d.callback/d.errback where the original author didn't expect
>them, just because a user of that module is setting timeouts to Deferreds.
>I thought this was the primary objection to setTimeout?  It's certainly the
>biggest concern I have about it.

indeed, i think this is the biggest problem I've faced when dealing with
deferreds

>
>Ok, how about a compromise: if a creator a Deferred is able to cope with
>timeouts, they should pass an "allowTimeouts=True" flag to the constructor.
>Without it, the setTimeout method will raise an AssertionError.  (For
>backwards-compatibility, for a release it will merely raise a Warning rather
>than an exception).  I'm willing to implement this, and properly document
>setTimeout in the Deferred HOWTO while I'm at it.  This is now my preferred
>option.

Hrrrrrrrrrrrrrrrrrrrmmmmm. Not a baaaaaaad compromise, but there's
something about it that doesn't sit with me. It seems that it would add
complexity to the very elegant design of Deferreds. My overall qualm
with setTimeout is that I think that if the API was in the state of
stability it is now, and setTimeout was proposed, that it's current
implementation would be rejected. 

I think that if we're going to provide this functionality, we should try
to come up with as transparent a solution as we can.

the following is an example of an idea i've been kicking around. Why
can't we just ignore the deferred after the timeout happens? 

(I use the style of my example above because that is what i'm
more comfortable with. If setTimeout would provide a similar
functionality, then i'm all for it.)

-----------------------------------------------------------------------

#!/usr/bin/env python2.3

from twisted.internet import defer, reactor

iTimedOut = False

defer.Deferred.debug = True

def setTimeoutForDeferred(d, seconds):
    aNewDeferred = defer.Deferred()
    
    from twisted.internet import reactor
    
    def onTimeout():
        # kill any further action on this deferred to avoid AlreadyCalledErrors
        d.callbacks = []  

        iTimedOut = True
        aNewDeferred.errback(defer.TimeoutError('deferred timed out'))
        
    delayed = reactor.callLater(seconds, onTimeout)
        
    def cb(value):
        if not iTimedOut:
            aNewDeferred.callback(value)
        
    def eb(reason):
        if not iTimedOut:
            aNewDeferred.errback(reason)
            
    def cancelTimeout(val):
        if delayed.active():
            delayed.cancel()
        return val

    d.addCallbacks(cb, eb)
    d.addBoth(cancelTimeout)

    return aNewDeferred


def iReturnADeferred():    # this is frameworky code
    d = defer.Deferred()
    reactor.callLater(5, d.callback, 'winnar!')
    return d


def iSetATimeout():    # this represents client-programmer code
    origd = iReturnADeferred()

    d = setTimeoutForDeferred(origd, 2)

    def cb(val):
        # if we time out, this code should not be called
        print "hooray!iReturnADeferred returned: %s" % val

    def eb(reason):
        e = reason.trap(defer.TimeoutError)
        if e == defer.TimeoutError:
            print "woops! we timed out"
        else:
            print "uh-oh! we didn't time out and there was an error!"

    d.addCallbacks(cb, eb)
    return d



if __name__ == "__main__":
    d = iSetATimeout()

    reactor.run()


-----------------------------------------------------------------------

Again, this is just code to illustrate my idea. There's no reason why
we have to hand the deferred that's returned by iReturnADeferred to the
rest of our code. We can hold on to that one and can substitute our own
deferred that is a bit more intelligent, it understands how to break the
chain after a length of time has passed.

The advantage here is that the author of iReturnADeferred doesn't need
to plan specially for timeout conditions, and the client doesn't have to
worry about AlreadyCalled errors (which to me are not something to
pooh-pooh, I take them as a sign that there's something wrong with my
design).

>>     I would like to recommend that we document a best-practice idiom
>>     in the deferred api documentation, and remove setTimeout.
>
>I don't believe it's easily written until you have a pretty advanced grasp
>of both Deferreds and reactor.callLater.  I don't see why allowing users of
>Deferreds to just say "d.setTimeout(5)" is a bad thing?


again, there's a difference between stopping a long-running or
long-waiting operation, which is something that deferreds cannot handle
at all, and indicating that after a certain amount of time, we don't
care about the result of that operation and would like to consider it an
erroneous condition.

I don't think that setTimeout makes this distinction clear (which may,
of course be a fault of the documentation/examples). Also, I want
whatever solution is accepted to make it easier to avoid
AlreadyCalled errors.


>
>setTimeout has the big big advantage that it's dead easy for *users* of
>Deferreds to work with.  The trouble with it is that it requires some work
>from the *creators* of Deferreds to support safely -- but I see the same
>flaw in every solution proposed, including your own of documenting and
>entirely by-hand idiom.
>

okay, i can understand this, and can agree in some sense. 


>> spiv said: 
>> 
>> "In hindsight, I should've thought harder about the implications of
>> setTimeout before I committed it... but now it's there, I don't like the
>> idea of ripping it out unless we have a clearly better solution."
>
>I think my "allowTimeouts" proposal above is a clearly better solution. :)

I don't like it. It just seems hacky. deferreds should handle this case,
without any extra specification from the author, as I believe that my
idea above would. 

>
>I'm going to spend a little time pondering it, then I'll look at
>implementing a patch and adding it to the bug.

please, lets come to a consensus before committing anything. ;)


Respectfully yours,
Jonathan 



From andrew-twisted at puzzling.org  Sun Apr 18 04:16:27 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 18 Apr 2004 20:16:27 +1000
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <20040418084828.30707.890808521.divmod.quotient.97@ohm>
	<20040418042111.30707.1531569673.divmod.quotient.94@ohm>
References: <20040418084828.30707.890808521.divmod.quotient.97@ohm>
	<20040418042111.30707.1531569673.divmod.quotient.94@ohm>
Message-ID: <20040418101627.GC7803@frobozz>

On Sun, Apr 18, 2004 at 08:48:28AM +0000, slyphon at twistedmatrix.com wrote:
[...]
> 
> again, there's a difference between stopping a long-running or
> long-waiting operation, which is something that deferreds cannot handle
> at all, and indicating that after a certain amount of time, we don't
> care about the result of that operation and would like to consider it an
> erroneous condition.
> 
[...]

On Sun, Apr 18, 2004 at 04:21:11AM +0000, exarkun at divmod.com wrote:
> 
>   I tend to prefer "foo(x, y, timeout=z)" over "foo(x, y).setTimeout(z)".
>   As both require explicit support from the implementor of "foo" (as you
>   correctly note is the only way .setTimeout() can actually work), it
>   seems unnecessary to special-case this form of failure in Deferreds.  I
>   cast my vote for the former.

I think that timeouts, or cancellations in general, are something that
Deferreds should *support*, even though they cannot provide them entirely
automatically.  I'll try to explain why.

Deferred objects are essentially placeholders for a result that isn't
available yet -- a result that is deferred until some later time.
Inevitably, this means there is some associated operation occuring that is
working towards generating that result (even if this operation is passive --
e.g. waiting for a response from a remote server).

Generally, when the recipient of a Deferred is no longer interested in the
result of that Deferred, there is no longer any need to continue the
underlying operation that would create that result.  It would be good if the
underlying operation was aborted in these situations (when possible), to
save resources.

Recipients of Deferreds have no knowledge of the result-generating operation
that is associated with them, nor should they.  In effect, Deferreds are not
just placeholders for pending results, but also intrinsically linked to the
operation that will eventually fulfill them.

Given that Deferreds are fundamentally linked to operations, not just
results, why not use that relationship to provide a consistent interface for
cancellations (and thus also timeouts)?

Here are the potential drawbacks I can think of to this view of Deferreds:
   - Not all operations are sanely interruptable, e.g. the worker thread
     kicked off by deferToThread.
   - foo(x, y, timeout=z) makes more sense for situations where a protocol
     or something requires that timeouts be set before an operation begins,
     and can't be adjusted once the operation is started.  I'm not aware of
     any such operations, though.

There are possibly other reasons why this view doesn't fit neatly -- if so,
please tell me! :)

The drawbacks I can think of aren't enough to dissuade me from this
viewpoint, though.  They do mean that Deferreds may need to only support
cancellations optionally, rather than always, according to what the creator
of the Deferred declares to be appropriate (i.e. the "allowTimeout" I
proposed for setTimeout, or perhaps "canCancel").  I don't see this as a
showstopper.

If people dislike coupling these things this tightly, perhaps Deferreds
should have an "operation" attribute, where things like a cancel method
would go -- does "deferred.operation.cancel('User clicked cancel')" read ok?
This is probably a good idea -- after all, a one-to-one relationship doesn't
necessarily imply that two things should be represented as one object (e.g.
HTTP Request and Response objects are always coupled that I can think of,
but keeping them seperate still feels right).

The operation object would also be a good place to put other functionality
that maybe only some operations could support, e.g. pausing an operation, or
something.  I'm just thinking out loud here.

The problem with the explict operation object is that it would make it even
harder for creators of Deferreds to fully implement things, although they
could just simply not provide one if they wanted to be lazy, I guess.

Any thoughts?

-Andrew.




From radix at twistedmatrix.com  Sun Apr 18 08:29:39 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 18 Apr 2004 10:29:39 -0400
Subject: [Twisted-Python] Twisted split: tap plugins
In-Reply-To: <1082237595.24622.474.camel@sheriffpony>
References: <40819F2B.2060709@twistedmatrix.com>	<1082237310.24620.472.camel@sheriffpony>
	<1082237595.24622.474.camel@sheriffpony>
Message-ID: <408290D3.5050300@twistedmatrix.com>

Itamar Shtull-Trauring wrote:
> On Sat, 2004-04-17 at 17:28, Itamar Shtull-Trauring wrote:
> 
> 
>>Options:
>>1. No backwards compatibility.
>>2. If TwistedNews is installed, it will also show up as twisted.news for
>>backwards compatibility.
> 
> 
> For twisted.web, I think we should go for option #2 using the *current*
> code, and the new rewrite will of course not be in same namespace.

Ok, yeah, I've decided that I want to keep deprecated backwards 
compatibility. We have kept it before for much smaller changes. There 
are three ways to do this:

  1. Leave a copy in Twisted proper for a release or two
  2. Physically install as twisted/news/
  3. Do something at runtime

#2 does not sound like a robust way to do it, but I am not sure of the 
particular problems involved.

#3 is also either hacky or problematic; an import hook is not something 
I want to resort to, and sys.modules munging requires managing to get 
some of our code to run before imports to 'twisted.news' happen.

#1 seems like it might work, barring problems with things like 
plugins.tml...

I just came up with another idea; I suppose it would be a mixture of #1 
and #3. We can release Twisted 1.3 and require that people using new 
split-offs use it. In Twisted 1.3, we delete twisted/news/* and so on, 
but we leave an __init__.py that sets things up for us so that it 
mirrors the new split-off package, if available (after printing a 
deprecation warning). After a few releases, we delete twisted/news entirely.


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040418/a2b36969/attachment.sig>

From radix at twistedmatrix.com  Sun Apr 18 09:08:41 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 18 Apr 2004 11:08:41 -0400
Subject: [Twisted-Python] Twisted split: tap plugins
In-Reply-To: <408290D3.5050300@twistedmatrix.com>
References: <40819F2B.2060709@twistedmatrix.com>	<1082237310.24620.472.camel@sheriffpony>	<1082237595.24622.474.camel@sheriffpony>
	<408290D3.5050300@twistedmatrix.com>
Message-ID: <408299F9.10604@twistedmatrix.com>

Christopher Armstrong wrote:

> I just came up with another idea; I suppose it would be a mixture of #1 
> and #3. We can release Twisted 1.3 and require that people using new 
> split-offs use it. In Twisted 1.3, we delete twisted/news/* and so on, 
> but we leave an __init__.py that sets things up for us so that it 
> mirrors the new split-off package, if available (after printing a 
> deprecation warning). After a few releases, we delete twisted/news 
> entirely.

Itamar just told me he likes this idea on IRC. I'll implement it unless 
someone comes up with a problem with it....

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040418/ba02ea11/attachment.sig>

From bob at redivi.com  Sun Apr 18 09:21:45 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 18 Apr 2004 11:21:45 -0400
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <20040418101627.GC7803@frobozz>
References: <20040418084828.30707.890808521.divmod.quotient.97@ohm>
	<20040418042111.30707.1531569673.divmod.quotient.94@ohm>
	<20040418101627.GC7803@frobozz>
Message-ID: <1A809BFC-914C-11D8-A48C-000A95686CD8@redivi.com>


On Apr 18, 2004, at 6:16 AM, Andrew Bennetts wrote:

> On Sun, Apr 18, 2004 at 04:21:11AM +0000, exarkun at divmod.com wrote:
>>
>>   I tend to prefer "foo(x, y, timeout=z)" over "foo(x, 
>> y).setTimeout(z)".
>>   As both require explicit support from the implementor of "foo" (as 
>> you
>>   correctly note is the only way .setTimeout() can actually work), it
>>   seems unnecessary to special-case this form of failure in 
>> Deferreds.  I
>>   cast my vote for the former.
>
> I think that timeouts, or cancellations in general, are something that
> Deferreds should *support*, even though they cannot provide them 
> entirely
> automatically.  I'll try to explain why.

Yes, cancellation should be supported in the Deferred object, timeouts 
should not.  Timeouts are just a specific case of cancellation that can 
be done outside of the implementation of Deferred.  Cancellation can't, 
because you need to know where the deferred came from originally in 
order to figure out how to cancel it and that information is not 
tracked.

-bob




From andrew-twisted at puzzling.org  Sun Apr 18 18:45:07 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 19 Apr 2004 10:45:07 +1000
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <1A809BFC-914C-11D8-A48C-000A95686CD8@redivi.com>
References: <20040418084828.30707.890808521.divmod.quotient.97@ohm>
	<20040418042111.30707.1531569673.divmod.quotient.94@ohm>
	<20040418101627.GC7803@frobozz>
	<1A809BFC-914C-11D8-A48C-000A95686CD8@redivi.com>
Message-ID: <20040419004507.GA27590@frobozz>

On Sun, Apr 18, 2004 at 11:21:45AM -0400, Bob Ippolito wrote:
> 
> On Apr 18, 2004, at 6:16 AM, Andrew Bennetts wrote:
> 
> >I think that timeouts, or cancellations in general, are something that
> >Deferreds should *support*, even though they cannot provide them entirely
> >automatically.  I'll try to explain why.
> 
> Yes, cancellation should be supported in the Deferred object, timeouts 
> should not.  Timeouts are just a specific case of cancellation that can 
> be done outside of the implementation of Deferred.  Cancellation can't, 
> because you need to know where the deferred came from originally in 
> order to figure out how to cancel it and that information is not 
> tracked.

I agree that timeouts can (and should) be implemented on top of
cancellations, which are a more general concept, and because of this I've
changed my mind about fixing setTimeout.

I don't think we should remove setTimeout until we have cancellation
support, though.

I'm happy for setTimeout to be deprecated now, though.

And I never liked the "DON'T USE THIS" docstring, which is just a way of
deprecating without really deprecating ;)

-Andrew.




From itamar at itamarst.org  Sun Apr 18 18:46:35 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 18 Apr 2004 20:46:35 -0400
Subject: [Twisted-Python] All use cases of getComponent
Message-ID: <1082335594.24622.484.camel@sheriffpony>

I'd like to have a list of all classes that use getComponent
(Componentized, Adapter - anything else?) and the expected behaviour -
do people override it, etc..

I'm working on Zope3 port of components and trying to figure out how to
do backwards-compat (Zope3 has __conforms__ instead of getComponent).

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From pje at telecommunity.com  Sun Apr 18 20:50:37 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Sun, 18 Apr 2004 22:50:37 -0400
Subject: [Twisted-Python] All use cases of getComponent
In-Reply-To: <1082335594.24622.484.camel@sheriffpony>
Message-ID: <5.1.1.6.0.20040418224744.021a5ec0@mail.telecommunity.com>

At 08:46 PM 4/18/04 -0400, Itamar Shtull-Trauring wrote:
>I'd like to have a list of all classes that use getComponent
>(Componentized, Adapter - anything else?) and the expected behaviour -
>do people override it, etc..
>
>I'm working on Zope3 port of components and trying to figure out how to
>do backwards-compat (Zope3 has __conforms__ instead of getComponent).

Are you sure?  Googling __conforms__ only finds a bunch of stuff from the 
types-sig back in 1999.

Perhaps you mean __conform__, as defined by PEP 246?




From itamar at itamarst.org  Sun Apr 18 21:21:21 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 18 Apr 2004 23:21:21 -0400
Subject: [Twisted-Python] All use cases of getComponent
In-Reply-To: <5.1.1.6.0.20040418224744.021a5ec0@mail.telecommunity.com>
References: <5.1.1.6.0.20040418224744.021a5ec0@mail.telecommunity.com>
Message-ID: <1082344880.24620.491.camel@sheriffpony>

On Sun, 2004-04-18 at 22:50, Phillip J. Eby wrote:

> Perhaps you mean __conform__, as defined by PEP 246?

Yep, my bad.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From exarkun at divmod.com  Sun Apr 18 23:51:50 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Mon, 19 Apr 2004 05:51:50 GMT
Subject: [Twisted-Python] All use cases of getComponent
Message-ID: <20040419055150.30707.766960162.divmod.quotient.101@ohm>

On Sun, 18 Apr 2004 20:46:35 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>I'd like to have a list of all classes that use getComponent
> (Componentized, Adapter - anything else?) and the expected behaviour -
> do people override it, etc..
> 
> I'm working on Zope3 port of components and trying to figure out how to
> do backwards-compat (Zope3 has __conforms__ instead of getComponent).

  Atop implements getComponent twice: once on a subclass of Componentized to make it slightly more convenient to use (automatic referenceTo/getItem logic), and once as a full implementation on another class that does not inherit from Componentized.

  Atop would also like an IComponentized to be added, but I'm not sure if that has any implications for the port to Zope3.

  Jp



From r.taylor at eris.qinetiq.com  Mon Apr 19 01:56:46 2004
From: r.taylor at eris.qinetiq.com (Richard Taylor)
Date: Mon, 19 Apr 2004 07:56:46 +0000
Subject: [Twisted-Python] New user, help needed with raw UDP packets
In-Reply-To: <40806940.9030500@tv.debian.net>
References: <200404141546.27171.r.taylor@eris.qinetiq.com>
	<40806940.9030500@tv.debian.net>
Message-ID: <200404190856.56373.r.taylor@eris.qinetiq.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Many thanks to everyone that responded to my appeal for help with raw UDP 
sockets. Following up on the useful pointers I have come up with an initial 
proof of concept. The code below does appear to do what I need, although it 
needs lots of tiding up. If anyone can see anything wrong with what I am 
doing I would value the criticism. 


	
	import socket, fcntl
	from twisted.internet import protocol
	from twisted.internet import udp
	from twisted.internet import reactor

	import impacket # library from 
http://oss.coresecurity.com/projects/impacket.html
	from impacket import ImpactDecoder,ImpactPacket

	from twisted.python.runtime import platformType
	if platformType == 'win32':
	    from errno import WSAEWOULDBLOCK as EWOULDBLOCK
	    from errno import WSAEINTR as EINTR
	    from errno import WSAEMSGSIZE as EMSGSIZE
	    from errno import WSAECONNREFUSED as ECONNREFUSED
	    from errno import WSAECONNRESET
	    from errno import EAGAIN
	elif platformType != 'java':
	    from errno import EWOULDBLOCK, EINTR, EMSGSIZE, ECONNREFUSED, EAGAIN
	
	
	class Echo(protocol.DatagramProtocol):

	    def __init__(self):
	        self.fake_addr = None
	        self.dest = "127.0.0.1"
	        self.port = 9999

	    def setFakeSrc(self, addr):
	        """Set the fake address from which packets should appear to come."""
	        self.fake_addr = addr
	        
	    def startProtocol(self):
	        print "starting Echo"
	        
	    def datagramReceived(self, data, (host, port)):
	        """data is a IP packet object from Impacket."""
	        ip = data
	        udp = ip.child()
	        if udp.get_uh_dport() == 9999:
	            src = ip.get_ip_src()
	
	            print "host = %s" % (host,)
	            print "udp src = %s" % (src,)
	            print "received: %s" % (udp,)
	
	            if self.fake_addr and src == "128.98.3.63":
			# Fake the src address and resend the packet
	                ip.set_ip_src(self.fake_addr)
	                print "resending with src = %s\n" % (ip.get_ip_src(),)
	                self.transport.write(ip.get_packet(), (self.dest,self.port))

	class RawUDPPort(udp.Port):
	    """Raw udp port."""

	    __implements__ = udp.Port.__implements__

	    socketType = socket.SOCK_RAW # Overide socket type.
	    addressFamily = socket.AF_INET
	
	    def __init__(self, *args, **kw):
	        udp.Port.__init__(self,*args,**kw)
	        
	        self.protocolNum = socket.getprotobyname('udp')
	        self.decoder = ImpactDecoder.IPDecoder()
	    
	    def createInternetSocket(self):
	        s = socket.socket(self.addressFamily, self.socketType, 	
self.protocolNum)
	        s.setblocking(0)
		# enable the sending of udp headers.
	        s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
	        if fcntl and hasattr(fcntl, 'FD_CLOEXEC'):
	            old = fcntl.fcntl(s.fileno(), fcntl.F_GETFD)
	            fcntl.fcntl(s.fileno(), fcntl.F_SETFD, old | fcntl.FD_CLOEXEC)
	        return s
	
	    def doRead(self):
	        """Called when my socket is ready for reading."""
	        read = 0
	        while read < self.maxThroughput:
	            try:
	                data, addr = self.socket.recvfrom(self.maxPacketSize)
	                read += len(data)
	                ip = self.decoder.decode(data)
	                if isinstance(ip.child(),ImpactPacket.UDP) and \
	                   ip.child().get_uh_dport() == self.port:                
	                    self.protocol.datagramReceived(ip, addr)
	            except socket.error, se:
	                no = se.args[0]
	                if no in (EAGAIN, EINTR, EWOULDBLOCK):
	                    return
	                if (no == ECONNREFUSED) or (platformType == "win32" and no == 	
WSAECONNRESET):
	                    # XXX for the moment we don't deal with connection 	
refused
	                    # in non-connected UDP sockets.
	                    pass
	                else:
	                    raise
	##            except:
	##                log.deferr()
	
	echo = Echo()
	echo.setFakeSrc("127.0.0.1")

	reactor.listenWith(RawUDPPort,
                   proto=echo, port=9999, interface="localhost", 	
reactor=reactor)
	reactor.run()

Thanks again to everyone that helped. Once I have tidied things up I will send 
the finished bits to the appropriate people (who are they?) in case they want 
to include them as an example.

Regards

Richard

- -- 
QinetiQ                                  
B009 Woodward Building
St. Andrews Road
Malvern
Worcs WR14 3PS
Jabber: RichardTaylor at jabber.org
PGPKey: http://search.keyserver.net:11371/pks/lookup?op=get&search=0xA7DA9FD9
Key fingerprint = D051 A121 E7C3 485F 3C0E  1593 ED9E D868 A7DA 9FD9
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQFAg4ZE7Z7YaKfan9kRAqPIAKDOmCMLn7zEXKbr7i3kmkw7ofibFwCcCvZt
CqkSAsP397lFCqKFeke0J6s=
=DN4i
-----END PGP SIGNATURE-----



From aleaxit at yahoo.com  Mon Apr 19 02:09:42 2004
From: aleaxit at yahoo.com (Alex Martelli)
Date: Mon, 19 Apr 2004 10:09:42 +0200
Subject: [Twisted-Python] more kudos of mine for Twisted,
	quote/point to at will
Message-ID: <c601g7$af2$1@sea.gmane.org>

"Open Enterprise Trends" has published the second part of an interview with
me (about Python's role in the enterprise) -- you can find it at URL:

  http://www.oetrends.com/news.php?action=view_record&idnum=321

Towards the end of the interview I got a chance to heap some praise upon
Twisted and to urge "enterprise developers" to consider it.  Since OEtrends
enjoys some prestige in certain IT circles, being able to quote from it
might help you making the case, to a manager or client, that Twisted should
be used for a certain project.  If so, please feel free to quote (e.g. such
snippets as "For any Python network server or client application, a
developer would be well advised to consider the free Twisted Matrix
package") and/or link to this URL (unfortunately there are no anchors to
ease referring to the specific spot, and the whole HTML page is otherwise
unsatisfactory -- e.g., the "keywords" include several technologies I do
not even mention nor allude to, such as jboss, netbeans abd jabber, but do
NOT include twisted -- how silly).


Alex





From pje at telecommunity.com  Mon Apr 19 07:36:01 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Mon, 19 Apr 2004 09:36:01 -0400
Subject: [Twisted-Python] All use cases of getComponent
In-Reply-To: <1082344880.24620.491.camel@sheriffpony>
References: <5.1.1.6.0.20040418224744.021a5ec0@mail.telecommunity.com>
	<5.1.1.6.0.20040418224744.021a5ec0@mail.telecommunity.com>
Message-ID: <5.1.1.6.0.20040419093119.02165a40@mail.telecommunity.com>

At 11:21 PM 4/18/04 -0400, Itamar Shtull-Trauring wrote:
>On Sun, 2004-04-18 at 22:50, Phillip J. Eby wrote:
>
> > Perhaps you mean __conform__, as defined by PEP 246?
>
>Yep, my bad.

Okay, well __conform__ is for an object to implement adaptation.  That is, 
if object 'x' has a __conform__ attribute, then 'IFoo(x)' will first call 
'x.__conform__(IFoo)', and if a non-None object is returned, that's what 
will be used as the result of 'IFoo(x)'.

Is that anything at all like what getComponent() does?




From sam at SpinwardStars.com  Mon Apr 19 09:07:55 2004
From: sam at SpinwardStars.com (Samuel Reynolds)
Date: Mon, 19 Apr 2004 09:07:55 -0600
Subject: [Twisted-Python] Twisted split: tap plugins
In-Reply-To: <408299F9.10604@twistedmatrix.com>
References: <40819F2B.2060709@twistedmatrix.com>
	<1082237310.24620.472.camel@sheriffpony>
	<1082237595.24622.474.camel@sheriffpony>
	<408290D3.5050300@twistedmatrix.com>
	<408299F9.10604@twistedmatrix.com>
Message-ID: <6.0.1.1.0.20040419090513.0417cdf0@pop.mindspring.com>

At 2004-04-18 11:08 AM -0400, you wrote:
>Christopher Armstrong wrote:
>
>>I just came up with another idea; I suppose it would be a mixture of #1 
>>and #3. We can release Twisted 1.3 and require that people using new 
>>split-offs use it. In Twisted 1.3, we delete twisted/news/* and so on, 
>>but we leave an __init__.py that sets things up for us so that it mirrors 
>>the new split-off package, if available (after printing a deprecation 
>>warning). After a few releases, we delete twisted/news entirely.
>
>Itamar just told me he likes this idea on IRC. I'll implement it unless 
>someone comes up with a problem with it....

FWIW, wxPython is moving from wxSomeName to wx.SomeName
(i.e., namespacing), and is using approximately this approach.
It works very well. (And in that case, the __init__.py in the
old location os munging names, as well.)

In effect, the old location becomes a reference to the new
location, with deprecation warnings added.

- Sam

__________________________________________________________
Spinward Stars, LLC                        Samuel Reynolds
Software Consulting and Development           303-805-1446
http://SpinwardStars.com/            sam at SpinwardStars.com 





From radix at twistedmatrix.com  Mon Apr 19 10:35:46 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 19 Apr 2004 12:35:46 -0400
Subject: [Twisted-Python] more kudos of mine for Twisted,	quote/point
	to at will
In-Reply-To: <c601g7$af2$1@sea.gmane.org>
References: <c601g7$af2$1@sea.gmane.org>
Message-ID: <4083FFE2.9030001@twistedmatrix.com>

Alex Martelli wrote:
> "Open Enterprise Trends" has published the second part of an interview with
> me (about Python's role in the enterprise) -- you can find it at URL:

Alex, this is great. Thanks a lot for the advocacy. :-)

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040419/54f0b565/attachment.sig>

From itamar at itamarst.org  Mon Apr 19 11:48:27 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 19 Apr 2004 13:48:27 -0400
Subject: [Twisted-Python] Progress report on splitting packages
Message-ID: <1082396907.26194.499.camel@sheriffpony>

Since Chris didn't send one in. Hope this is accurate.

News was split off, backwards compat code is in, site is up:
http://projects.twistedmatrix.com/lowdown/

Remaining tasks:
1. Release automation and making a lowdown release.
2. Buildbot support.
3. Linking to projects from main site, and updating main site to explain
all this.

Many thanks to Chris and JP for all their work on this.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Mon Apr 19 12:03:51 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 19 Apr 2004 14:03:51 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082396907.26194.499.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
Message-ID: <1082397831.24621.501.camel@sheriffpony>

On Mon, 2004-04-19 at 13:48, Itamar Shtull-Trauring wrote:

> Remaining tasks:

Forgot to add, packaging. Windows, Debian, Gentoo, FreeBSD and so on all
need infrastructure for having separate packages.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From michal at pasternak.w.lub.pl  Mon Apr 19 12:39:56 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Mon, 19 Apr 2004 20:39:56 +0200
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082397831.24621.501.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<1082397831.24621.501.camel@sheriffpony>
Message-ID: <20040419183956.GA5030@pasternak.w.lub.pl>

Itamar Shtull-Trauring [Mon, Apr 19, 2004 at 02:03:51PM -0400]:
> On Mon, 2004-04-19 at 13:48, Itamar Shtull-Trauring wrote:
> 
> > Remaining tasks:
> 
> Forgot to add, packaging. Windows, Debian, Gentoo, FreeBSD and so on all
> need infrastructure for having separate packages.

I can create & test packages for FreeBSD Ports & NetBSD Packages Collection,
just send me what to do. I can also provide binary packages for FreeBSD
5.2.1 at the moment.



From glyph at divmod.com  Mon Apr 19 12:47:33 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 19 Apr 2004 14:47:33 -0400
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <20040418002534.GA7803@frobozz>
References: <1082240569.22948.37.camel@willie-the-pimp>
	<20040418002534.GA7803@frobozz>
Message-ID: <04C780C3-9232-11D8-B6DF-000393C9700E@divmod.com>


On Apr 17, 2004, at 8:25 PM, Andrew Bennetts wrote:

> Ok, how about a compromise: if a creator a Deferred is able to cope 
> with
> timeouts, they should pass an "allowTimeouts=True" flag to the 
> constructor.
> Without it, the setTimeout method will raise an AssertionError.

Gross.

This is really my problem with setTimeout, really.  Right now it 
changes the semantics of .callback() and .errback() subtly - adding an 
'allowTimeouts' flag effectively changes the object's contract at 
run-time.  I know that callback and errback do this already, but it's 
implied that there is a single source of responsibility for calling 
those methods.

What we've really got here is two separate interfaces: IDeferred and 
ITimeoutableDeferred.  I think that it might be appropriate to 
implement one as a subclass, which does the twisted.internet-related 
stuff.

Perhaps we're putting the responsibility in the wrong place entirely.  
Deferreds which can be timed out are often tracked with some kind of ID 
in a map of Deferreds.  Maybe we should have a DeferredOperationManager 
class which abstracts that functionality, removing the deferred from 
the map when its callback/errback is called whether it's called by a 
timeout or not...?  Constructing a TimeoutableDeferred would then 
*require* a callback that, in the common case where a 
DeferredOperationManager is used, would remove the Deferred from the 
mapping.  Regular Deferreds would then have no setTimeout, and Bob 
could use them without importing all of Twisted.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040419/b1a5ec64/attachment.sig>

From jfdill at jfdill.com  Mon Apr 19 13:33:12 2004
From: jfdill at jfdill.com (Jonathan Dill)
Date: Mon, 19 Apr 2004 15:33:12 -0400
Subject: [Twisted-Python] PyPAM really needed by Twisted?
Message-ID: <1082403192.14538.3.camel@meteora.umbi.umd.edu>

I'm following the INSTALL instructions for Twisted-1.2.0 and it claims
that it depends on PyPAM.  PyPAM appears not to have been developed
since 1999 for Python 1.52.  Are these install directions really up to
date?  Or should I try the Twisted 1.2.1alpha1 or Twisted out of CVS
instead?

Thanks,
-- 
Jonathan Dill <jfdill at jfdill.com>




From radix at twistedmatrix.com  Mon Apr 19 13:38:46 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 19 Apr 2004 15:38:46 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040419183956.GA5030@pasternak.w.lub.pl>
References: <1082396907.26194.499.camel@sheriffpony>	<1082397831.24621.501.camel@sheriffpony>
	<20040419183956.GA5030@pasternak.w.lub.pl>
Message-ID: <40842AC6.5070100@twistedmatrix.com>

Michal Pasternak wrote:
> I can create & test packages for FreeBSD Ports & NetBSD Packages Collection,
> just send me what to do. I can also provide binary packages for FreeBSD
> 5.2.1 at the moment.

Is there anything automatable about this? I'd like to automate as much 
as possible in the release-twisted script 
(Twisted/sandbox/radix/release-twisted). Soon I'll be splitting that out 
into something like twisted.python.release with only the 
project-specific stuff in the "script". It'd be cool if you could 
implement a step for doing freebsd builds (or stuff facilitating a 
freebsd build, anyway).

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040419/33c3d7ed/attachment.sig>

From radix at twistedmatrix.com  Mon Apr 19 13:40:13 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 19 Apr 2004 15:40:13 -0400
Subject: [Twisted-Python] PyPAM really needed by Twisted?
In-Reply-To: <1082403192.14538.3.camel@meteora.umbi.umd.edu>
References: <1082403192.14538.3.camel@meteora.umbi.umd.edu>
Message-ID: <40842B1D.8050702@twistedmatrix.com>

Jonathan Dill wrote:
> I'm following the INSTALL instructions for Twisted-1.2.0 and it claims
> that it depends on PyPAM.  PyPAM appears not to have been developed
> since 1999 for Python 1.52.  Are these install directions really up to
> date?  Or should I try the Twisted 1.2.1alpha1 or Twisted out of CVS
> instead?
> 
> Thanks,

Notice that PyPAM only appears under the "SSH" section. You only need it 
if you want to use Twisted's SSH support (twisted.conch).

Soon this will be split out into a separate package, btw.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040419/cd64dbdf/attachment.sig>

From michal at pasternak.w.lub.pl  Mon Apr 19 14:38:32 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Mon, 19 Apr 2004 22:38:32 +0200
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <40842AC6.5070100@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<1082397831.24621.501.camel@sheriffpony>
	<20040419183956.GA5030@pasternak.w.lub.pl>
	<40842AC6.5070100@twistedmatrix.com>
Message-ID: <20040419203831.GA14319@pasternak.w.lub.pl>

Christopher Armstrong [Mon, Apr 19, 2004 at 03:38:46PM -0400]:
> Michal Pasternak wrote:
> >I can create & test packages for FreeBSD Ports & NetBSD Packages 
> >Collection,
> >just send me what to do. I can also provide binary packages for FreeBSD
> >5.2.1 at the moment.
> 
> Is there anything automatable about this? I'd like to automate as much 
> as possible in the release-twisted script
> (Twisted/sandbox/radix/release-twisted).

I think I could add there automatic generation of a Makefiles for a given
project (for those, who don't know anything about fbsd ports/netbsd pkgsrc,
here's an example - ftp://ftp.netbsd.org/pub/NetBSD/packages/pkgsrc/net/py-twisted/ )
It could be really clean at the *BSD side - all Twisted projects share some
settings in Makefile.common, each project has a separate directory and
Makefile with its 'personalized' settings.

I could also add to your release script generation of diffs against current
official fbsd/nbsd package sources (from fbsd/nbsd cvs repo); then the
package could be built (on a test machine), and if the package builds okay,
the release script could submit a problem report with the diffs needed to
update the package source to GNATS database (see 
http://netbsd.org/Misc/send-pr.html), so *BSD developers could pick
that PR and update the official sources.

Automated building of binary package in case of FreeBSD / NetBSD is, IMO,
not worth it (at Twisted project side). Why? When the package source is in
official CVS repo, both NetBSD and FreeBSD teams take care of building the
binary package for you (so you don't have to build Twisted for NetBSD/atari,
for example). Also (IMO) BSD users tend rather not to use binary package
available from an opensource project's site, they will get the one from
official BSD FTP or compile by their own, using Ports or pkgsrc.

I hope, that this is the kind of automation you meant. In case it is not -
more clues please. 

To start the work I need URL to the tarballs with source releases of "core"
twisted and at least one twisted product.

-- 
m



From corydodt at twistedmatrix.com  Mon Apr 19 17:59:19 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Mon, 19 Apr 2004 16:59:19 -0700
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082397831.24621.501.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<1082397831.24621.501.camel@sheriffpony>
Message-ID: <408467D7.6020609@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

For Windows, as long as there's a setup.py this is probably a candidate for
just running a buildslave that does bdist_wininst and sticks the result on a
fileserver.  That's predicated on having a buildslave, of course.

The somewhat sophisticated installer around Twisted "proper" is mainly to
provide documentation and icons and uninstall and other approachability
enhancements.

Many (most?) of these subprojects don't have a wide enough scope to need such
niceties.  However, even if they did, I couldn't provide packaging for all of
them :-(


C



Itamar Shtull-Trauring wrote:

| On Mon, 2004-04-19 at 13:48, Itamar Shtull-Trauring wrote:
|
|
|>Remaining tasks:
|
|
| Forgot to add, packaging. Windows, Debian, Gentoo, FreeBSD and so on all
| need infrastructure for having separate packages.
|

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3-nr1 (Windows 2000)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFAhGfX3A5SrXAiHQcRAkKEAJ9OqnjQmilbD1beqWg/X/hPvpgMbQCfTqzB
vFW0xQXejrEUJKNIkbZPYKY=
=OUzb
-----END PGP SIGNATURE-----



From andrew-twisted at puzzling.org  Mon Apr 19 18:47:35 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 20 Apr 2004 10:47:35 +1000
Subject: [Twisted-Python] why deferred.setTimeout is not my favorite API
	method
In-Reply-To: <04C780C3-9232-11D8-B6DF-000393C9700E@divmod.com>
References: <1082240569.22948.37.camel@willie-the-pimp>
	<20040418002534.GA7803@frobozz>
	<04C780C3-9232-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <20040420004735.GA27709@frobozz>

On Mon, Apr 19, 2004 at 02:47:33PM -0400, Glyph Lefkowitz wrote:
> 
> On Apr 17, 2004, at 8:25 PM, Andrew Bennetts wrote:
> 
> >Ok, how about a compromise: if a creator a Deferred is able to cope 
> >with
> >timeouts, they should pass an "allowTimeouts=True" flag to the 
> >constructor.
> >Without it, the setTimeout method will raise an AssertionError.
> 
> Gross.
> 
> This is really my problem with setTimeout, really.  Right now it 

Luckily for you, I've already changed my mind on this, in favour of building
timeouts on top of some sort of cancellation support (see my reply to Bob).
:)

> changes the semantics of .callback() and .errback() subtly - adding an 
> 'allowTimeouts' flag effectively changes the object's contract at 
> run-time.  I know that callback and errback do this already, but it's 
> implied that there is a single source of responsibility for calling 
> those methods.
> 
> What we've really got here is two separate interfaces: IDeferred and 
> ITimeoutableDeferred.  I think that it might be appropriate to 
> implement one as a subclass, which does the twisted.internet-related 
> stuff.

Well, that's one way to look at it, I suppose.  Certainly, deferreds that
can support cancellation should be declared that way when they are created,
whether by a flag to the constructor or by using a subclass.  DeferredList
changes its behaviour pretty significantly based on constructor flags, and I
think we made the right decision there.  Cancellations aren't all that
similar to "fireOnOneErrback", though.  I don't have a strong preference on
flags vs.  subclasses here, except that I would tend to lean towards
whichever one has the simpler implementation.

> Perhaps we're putting the responsibility in the wrong place entirely.  
> Deferreds which can be timed out are often tracked with some kind of ID 
> in a map of Deferreds.  Maybe we should have a DeferredOperationManager 
> class which abstracts that functionality, removing the deferred from 
> the map when its callback/errback is called whether it's called by a 
> timeout or not...?  Constructing a TimeoutableDeferred would then 
> *require* a callback that, in the common case where a 
> DeferredOperationManager is used, would remove the Deferred from the 
> mapping.  Regular Deferreds would then have no setTimeout, and Bob 
> could use them without importing all of Twisted.

This idea sounds equally applicable to cancellable deferreds as to just
timeoutable deferreds.  I'd be happy to see any that eases the
implementation of creating Deferreds that can be cancelled -- I think that
that is really the hardest part of the whole problem (aside from desigining
an API everyone likes ;)

-Andrew.




From andrew-twisted at puzzling.org  Mon Apr 19 19:13:27 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 20 Apr 2004 11:13:27 +1000
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082396907.26194.499.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
Message-ID: <20040420011327.GB27709@frobozz>

On Mon, Apr 19, 2004 at 01:48:27PM -0400, Itamar Shtull-Trauring wrote:
> Since Chris didn't send one in. Hope this is accurate.
> 
> News was split off, backwards compat code is in, site is up:
> http://projects.twistedmatrix.com/lowdown/

I'm curious -- why did we choose to change the name from twisted.news?  And
even though the name is changing, why is the new package "lowdown" and not
"twisted.lowdown"?

I'm also interested to see that NNTP protocol support has also migrated to
lowdown -- I was expecting that protocol implementations were going to stay
in Twisted (or perhaps a twisted.protocols project, if that gets split off),
and just the apps (i.e. direct subpackages of twisted, e.g. news, mail, web,
names, conch, ...) would be seperated.

So, I assume that this is the policy that other splits should follow?  If
so, this needs to be documented.

I'd like to see the reasons for these decisions summarised in that document
too -- I can guess at them, but it would be nice to know, and will help
future splits of subprojects go smoothly and consistently.

-Andrew.




From radix at twistedmatrix.com  Mon Apr 19 19:58:30 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 19 Apr 2004 21:58:30 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420011327.GB27709@frobozz>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
Message-ID: <408483C6.1030308@twistedmatrix.com>

Andrew Bennetts wrote:
> On Mon, Apr 19, 2004 at 01:48:27PM -0400, Itamar Shtull-Trauring wrote:
> 
>>Since Chris didn't send one in. Hope this is accurate.
>>
>>News was split off, backwards compat code is in, site is up:
>>http://projects.twistedmatrix.com/lowdown/
> 
> 
> I'm curious -- why did we choose to change the name from twisted.news?  And
> even though the name is changing, why is the new package "lowdown" and not
> "twisted.lowdown"?

It was decided that doing package names like this would be too 
problematic. Unfortunately, Python isn't as cool as Java. The name was 
changed to lowdown because "news" is a bad top-level package name and 
"twistednews" and "tnews" and various permutations so forth were also 
lame. Also, "Low Down" is cool. Get it? The LOW DOWN??? The NEWS??? Ha Ha!

> I'm also interested to see that NNTP protocol support has also migrated to
> lowdown -- I was expecting that protocol implementations were going to stay
> in Twisted (or perhaps a twisted.protocols project, if that gets split off),
> and just the apps (i.e. direct subpackages of twisted, e.g. news, mail, web,
> names, conch, ...) would be seperated.

Nah. These split-offs are going to contain protocols and minimal 
framework for implementing apps, along with maybe a very simple 
implementation of an actual app.

> So, I assume that this is the policy that other splits should follow?  If
> so, this needs to be documented.

Let it be known that the split-offs will contain relevant protocols.

> I'd like to see the reasons for these decisions summarised in that document
> too -- I can guess at them, but it would be nice to know, and will help
> future splits of subprojects go smoothly and consistently.

I'm not interested in creating a "Split Document", because that's an 
inherently temporal thing. With the help of exarkun, there does exist a 
small file documenting the process that I must go through to do a split 
for a particular project, but it is not of general interest (no 
rationale, etc).

It would probably be a good idea to outline what exactly WILL be split 
out, and what will be contained in the splits, now, though. I am not 
authoritative on this, but I can tell you what I plan on working on soon 
(In the order that I've thought of them):

<twisted-package> -> <canonical project name>
   <details>

twisted.news -> "Lowdown"
   done. contains nntp.

twisted.flow -> "Flow" (?)
   This one's easy, no protocols or anything.

twisted.conch -> "Conch"
   This will be named "Conch", and contain conch as well as the
   SSH protocol implemantations.

twisted.lore -> "Lore" (?)
   Easy.

twisted.words, twisted.im -> "Twisted Words" (?)
   This'll be a single package. The packagename will probably be 'words'.
   I'm not *sure*, but I expect IRC and the other IM/chat protocols will
   go into this package.

twisted.mail -> ???
   SMTP, POP3, IMAP, *some* of the stuff from current twisted.mail
   package.

twisted.names -> "Twisted Names" (?)
   + DNS proto

twisted.xish -> No idea.
   No idea. I imagine this will just be made a part of the Jabber
   package, whatever that is.

twisted.runner -> ???
   Yeah, might as well get rid of this one too.

twisted.pair -> ???
   I don't know anything about this package.

twisted.trial -> ???
   This one is going to have to require some thought, since *all* the
   other packages depend on it, but I think that people do want to split
   it out.

twisted.web -> ???
   HTTP protocol implementation, and twisted.web. It is still undecided
   whether Nevow will be included in this package. Discuss it on the
   twisted-web mailing list.

twisted.protocols.ftp + slyphon's sandbox -> ???
   Need to split this out too.

Others...

There has been talk of leaving Spread in Twisted core. That seems like a 
fine idea to me, but I'm not the one to debate that with. Also 
enterprise, manhole. Dunno if we'll split those out. Cred, internet, 
application, python, persisted are definitely staying. We will still 
have a 'protocols' package left with a few protocols that don't have any 
framework for them implemented.

HTH!

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040419/f3e202c9/attachment.sig>

From mary-twisted at puzzling.org  Mon Apr 19 20:09:14 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 20 Apr 2004 12:09:14 +1000
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408483C6.1030308@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
Message-ID: <20040420020914.GA12285@titus.home.puzzling.org>

On Mon, Apr 19, 2004, Christopher Armstrong wrote:
> Andrew Bennetts wrote:
> >I'd like to see the reasons for these decisions summarised in that
> >document too -- I can guess at them, but it would be nice to know,
> >and will help future splits of subprojects go smoothly and
> >consistently.
> 
> I'm not interested in creating a "Split Document", because that's an
> inherently temporal thing. With the help of exarkun, there does exist
> a small file documenting the process that I must go through to do a
> split for a particular project, but it is not of general interest (no
> rationale, etc).

What about a document for people who in future, want to add new twisted
subprojects, from scratch? Some of the same policy will be relevant to
them, and that wouldn't be a transitory document.

-Mary



From andrew-twisted at puzzling.org  Mon Apr 19 20:17:55 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 20 Apr 2004 12:17:55 +1000
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408483C6.1030308@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
Message-ID: <20040420021755.GA29296@frobozz>

On Mon, Apr 19, 2004 at 09:58:30PM -0400, Christopher Armstrong wrote:
> Andrew Bennetts wrote:
> >On Mon, Apr 19, 2004 at 01:48:27PM -0400, Itamar Shtull-Trauring wrote:
> >
> >>Since Chris didn't send one in. Hope this is accurate.
> >>
> >>News was split off, backwards compat code is in, site is up:
> >>http://projects.twistedmatrix.com/lowdown/
> >
> >
> >I'm curious -- why did we choose to change the name from twisted.news?  And
> >even though the name is changing, why is the new package "lowdown" and not
> >"twisted.lowdown"?
> 
> It was decided that doing package names like this would be too 
> problematic. Unfortunately, Python isn't as cool as Java. The name was 
> changed to lowdown because "news" is a bad top-level package name and 
> "twistednews" and "tnews" and various permutations so forth were also 
> lame. Also, "Low Down" is cool. Get it? The LOW DOWN??? The NEWS??? Ha Ha!

I get the name, I just wanted to know why exactly it was chosen over other
names :)

What are the problems you allude to with keeping "twisted.news"?  I was
under the impression that Zope 3 is planning to go this route.

> >I'm also interested to see that NNTP protocol support has also migrated
> >to lowdown -- I was expecting that protocol implementations were going to
> >stay in Twisted (or perhaps a twisted.protocols project, if that gets
> >split off), and just the apps (i.e. direct subpackages of twisted, e.g.
> >news, mail, web, names, conch, ...) would be seperated.
> 
> Nah. These split-offs are going to contain protocols and minimal 
> framework for implementing apps, along with maybe a very simple 
> implementation of an actual app.
> 
> >So, I assume that this is the policy that other splits should follow?  If
> >so, this needs to be documented.
> 
> Let it be known that the split-offs will contain relevant protocols.

Ok :)

> >I'd like to see the reasons for these decisions summarised in that document
> >too -- I can guess at them, but it would be nice to know, and will help
> >future splits of subprojects go smoothly and consistently.
> 
> I'm not interested in creating a "Split Document", because that's an 
> inherently temporal thing. With the help of exarkun, there does exist a 
> small file documenting the process that I must go through to do a split 
> for a particular project, but it is not of general interest (no 
> rationale, etc).

Well, when I say "document", a post to the mailing list would do just fine.
Just somewhere public that can be referred to later, if necessary.

-Andrew.





From radix at twistedmatrix.com  Mon Apr 19 20:19:28 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 19 Apr 2004 22:19:28 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420020914.GA12285@titus.home.puzzling.org>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>	<408483C6.1030308@twistedmatrix.com>
	<20040420020914.GA12285@titus.home.puzzling.org>
Message-ID: <408488B0.5050407@twistedmatrix.com>

Mary Gardiner wrote:
> On Mon, Apr 19, 2004, Christopher Armstrong wrote:
> 
>>Andrew Bennetts wrote:
>>
>>>I'd like to see the reasons for these decisions summarised in that
>>>document too -- I can guess at them, but it would be nice to know,
>>>and will help future splits of subprojects go smoothly and
>>>consistently.
>>
>>I'm not interested in creating a "Split Document", because that's an
>>inherently temporal thing. With the help of exarkun, there does exist
>>a small file documenting the process that I must go through to do a
>>split for a particular project, but it is not of general interest (no
>>rationale, etc).
> 
> 
> What about a document for people who in future, want to add new twisted
> subprojects, from scratch? Some of the same policy will be relevant to
> them, and that wouldn't be a transitory document.

It seems quite unnecessary, and I'm not convinced enough of its utility 
to actually put effort into it. There's not much special about a 
"Twisted Subproject"; AFAIC they're just projects that are developed by 
"Twisted Matrix Laboratories", which is rather nebulous.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040419/9b86bedb/attachment.sig>

From radix at twistedmatrix.com  Mon Apr 19 20:40:39 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 19 Apr 2004 22:40:39 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408488B0.5050407@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>	<408483C6.1030308@twistedmatrix.com>	<20040420020914.GA12285@titus.home.puzzling.org>
	<408488B0.5050407@twistedmatrix.com>
Message-ID: <40848DA7.4000206@twistedmatrix.com>

Christopher Armstrong wrote:
> It seems quite unnecessary, and I'm not convinced enough of its utility 
> to actually put effort into it. There's not much special about a 
> "Twisted Subproject"; AFAIC they're just projects that are developed by 
> "Twisted Matrix Laboratories", which is rather nebulous.

Let me retract this adjective from my response. Twisted Matrix 
Laboratories is far from nebulous -- we're a tight-knit group of 
hackers, just as the web site says. However, TML must no longer be 
defined as "those who hack on Twisted", since Twisted is no longer the 
only project run by Twisted Matrix Laboratories (well, there were 
Twisted Java and Twisted Emacs and some others before, but those were 
never very popular). Now, TML must be defined as "those who hack on TML 
projects". >:-)

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040419/bd80ed77/attachment.sig>

From justinjohnson at fastmail.fm  Mon Apr 19 20:41:37 2004
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Mon, 19 Apr 2004 21:41:37 -0500
Subject: [Twisted-Python] Free Microsoft VC++ Compiler
Message-ID: <1082428897.15221.184741043@webmail.messagingengine.com>

Did anyone see this?

http://msdn.microsoft.com/visualc/vctoolkit2003/

Not sure if this is anything we'd want to use, but thought I'd through it
out here.



From cce at clarkevans.com  Mon Apr 19 20:47:57 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 19 Apr 2004 22:47:57 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408483C6.1030308@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
Message-ID: <20040420024757.GA37301@prometheusresearch.com>

I've got a quick question, how will twisted projects manage
dependencies?  If this isn't handled nicely, it could really reduce the
value of twisted (nothing more frustrating than downloading N packages,
each one after an error of the package not being found).

On Mon, Apr 19, 2004 at 09:58:30PM -0400, Christopher Armstrong wrote:
| >>News was split off, backwards compat code is in, site is up:
| >>http://projects.twistedmatrix.com/lowdown/
| >
| >
| >I'm curious -- why did we choose to change the name from twisted.news?  
| >And
| >even though the name is changing, why is the new package "lowdown" and 
| >not
| >"twisted.lowdown"?
| 
| It was decided that doing package names like this would be too 
| problematic. Unfortunately, Python isn't as cool as Java. The name was 
| changed to lowdown because "news" is a bad top-level package name and 
| "twistednews" and "tnews" and various permutations so forth were also 
| lame. Also, "Low Down" is cool. Get it? The LOW DOWN??? The NEWS??? Ha 

This makes very little sense to me.  In my humble opinion, it should
stay 'twisted.news'.  Calling it 'lowdown' beacuse a top level package
of 'news' is taken is really counterproductive, finding good names is
hard enough.   I do see the value in breaking twisted into modules, so
that a subset of twisted could be used.   However, I don't see why these
items can be named 'twisted.XXXX', perhaps the 'core' distribution
should just have place-holder '__init__.py' file...

/twisted/news/__init__.py

  raise NotImplementedError("""\
      Download this package from 
      http://projects.twistedmatrix.com/news/
  """)


Best,

Clark



From radix at twistedmatrix.com  Mon Apr 19 21:04:32 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 19 Apr 2004 23:04:32 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420024757.GA37301@prometheusresearch.com>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>	<408483C6.1030308@twistedmatrix.com>
	<20040420024757.GA37301@prometheusresearch.com>
Message-ID: <40849340.8020702@twistedmatrix.com>

Clark C. Evans wrote:
> I've got a quick question, how will twisted projects manage
> dependencies?  If this isn't handled nicely, it could really reduce the
> value of twisted (nothing more frustrating than downloading N packages,
> each one after an error of the package not being found).

I encourage you to contribute packages for your favorite OS. Windows and 
Debian will be covered.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040419/5f7f4ab6/attachment.sig>

From thomas.mangin at exa-networks.co.uk  Tue Apr 20 02:17:22 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Tue, 20 Apr 2004 09:17:22 +0100
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420024757.GA37301@prometheusresearch.com>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>	<408483C6.1030308@twistedmatrix.com>
	<20040420024757.GA37301@prometheusresearch.com>
Message-ID: <4084DC92.50509@exa-networks.co.uk>

Clark C. Evans wrote:

>This makes very little sense to me.  In my humble opinion, it should
>stay 'twisted.news'.  Calling it 'lowdown' beacuse a top level package
>of 'news' is taken is really counterproductive, finding good names is
>hard enough.   I do see the value in breaking twisted into modules, so
>that a subset of twisted could be used.   However, I don't see why these
>items can be named 'twisted.XXXX', perhaps the 'core' distribution
>should just have place-holder '__init__.py' file...
>
>/twisted/news/__init__.py
>
>  raise NotImplementedError("""\
>      Download this package from 
>      http://projects.twistedmatrix.com/news/
>  """)
>  
>
I am a boring fart and I always though that names should be as explicit 
as possible.

Am I right to think that all the code will be related to 
applications/application frameworks  using twisted ?
In that case something like twistedapp (please do not take that name as 
the ultimate recommendation) would make more sense.

As well I would saws that the organization should be like
twistedapp.news.lowdown
twistedapp.web.nevow
twistedapp.ssh.counch
[...]

I have no idea of what are flow, lore, and some other modules and it 
seems that some of you do not know neither what is xish neither !
Should it be called twistedapp.jabber.xish ???

So the protocol is obvious from the module name and it is easy to add 
more application of the same protocol without any name clash.
At that point it is clear that nevow is a web application, even if the 
name itself does not give the information away.

Thomas



From r.taylor at eris.qinetiq.com  Tue Apr 20 02:50:38 2004
From: r.taylor at eris.qinetiq.com (Richard Taylor)
Date: Tue, 20 Apr 2004 08:50:38 +0000
Subject: [Twisted-Python] UDP Support sanity check
Message-ID: <200404200950.46062.r.taylor@eris.qinetiq.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Hi

I am trying to implement support for the UDP functionality I need. I think 
that I need to implement the following classes:

For server support:

UDPPort(udp.Port) - adding support for broadcast
ConnectedUDPPort(UDPPort) - connected variant

For client (connection) support:

UDPConnectionBase(FileDescriptor) - creation of non-bound UDP sockets
UDPConnection(UDPConnectionBase) - addition of write method to implement 
IUDPTransport
UDPConnectedConnection(UDPConnectionBase) - support for 'connected' UDP socket 
and write method without host,port arguments.

UDPConnector(base.Connector) - connector class that can create use the 
UDPConnection objects.
UDPConnectedConnector(UDPConnector) - one that works with 
UDPConnectedConnection objects.

Extend the IReactorUDP interface and reactor implementation to support 
connectXXX methods for the new connector types.

I am trying to support the creation of UDP connectors that are meant for 
sending datagrams and will never be bound to a local port and listened on. 
The current support for UDP does not implement and UDP connector type objects 
only UDP Port type objects. This means that a bind is always performed even 
when the connection is only meant for sending. 

I have most of the implementation written (at least in outline). 

One question. It appears to me that for UDP connection objects that concept of 
a protocol does not make much sense. The IUDPTransport interface does have a 
read method (as you would expect) so the protocol would never be called. This 
also calls in to question the need for a 'protocol factory' for such 
connections. Am I correct in this or am I missing something?

Richard



- -- 
QinetiQ                                  
B009 Woodward Building
St. Andrews Road
Malvern
Worcs WR14 3PS
Jabber: RichardTaylor at jabber.org
PGPKey: http://search.keyserver.net:11371/pks/lookup?op=get&search=0xA7DA9FD9
Key fingerprint = D051 A121 E7C3 485F 3C0E  1593 ED9E D868 A7DA 9FD9
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQFAhORk7Z7YaKfan9kRAiuzAJ9TlVM1puA5TIDNSfKTvH/xIJHxzwCeMrRE
mzGko+L421THScL3FgbqKPU=
=xiC0
-----END PGP SIGNATURE-----



From itamar at itamarst.org  Tue Apr 20 06:20:22 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 08:20:22 -0400
Subject: [Twisted-Python] Free Microsoft VC++ Compiler
In-Reply-To: <1082428897.15221.184741043@webmail.messagingengine.com>
References: <1082428897.15221.184741043@webmail.messagingengine.com>
Message-ID: <1082463621.22434.0.camel@sheriffpony>

I think Cory is trying to keep all our Windows code working on mingw,
and I agree with that. We should try to minimize our dependency on
proprietary software, even when building for proprietary platforms.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Tue Apr 20 06:23:07 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 08:23:07 -0400
Subject: [Twisted-Python] UDP Support sanity check
In-Reply-To: <200404200950.46062.r.taylor@eris.qinetiq.com>
References: <200404200950.46062.r.taylor@eris.qinetiq.com>
Message-ID: <1082463787.22436.3.camel@sheriffpony>

You need:

1. a Port which will probably also be a transport.
2. a Protocol.
3. a IUDPTrasport.

that's it. Notice the current UDP code has no factories or connectors.
Also note that connectUDP has been deprecated in SVN.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Tue Apr 20 06:36:07 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 08:36:07 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408483C6.1030308@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
Message-ID: <1082464567.22435.17.camel@sheriffpony>

On Mon, 2004-04-19 at 21:58, Christopher Armstrong wrote:

> It was decided that doing package names like this would be too 
> problematic. Unfortunately, Python isn't as cool as Java. The name was 
> changed to lowdown because "news" is a bad top-level package name and 
> "twistednews" and "tnews" and various permutations so forth were also 
> lame. Also, "Low Down" is cool. Get it? The LOW DOWN??? The NEWS??? Ha Ha!

One problem with leaving it as twisted.news in future releases as Andrew
suggests in a later email is that we lose our emphasis on the fact that
it's a separate release with separate versions. Assume following
scenario - we have lowdown 0.1 and lowdown 0.2, which are API
incompatible. We want to be very clear that lowdown 0.1 can still be
used on latest Twisted core, that you don't have to go in lockstep.

So, looking at code - is twisted.foo part of core twisted and thus
probably pretty stable or is it a separate package? What expectations
can I have of API stability?

Partially this is just Python conventions. Separate packages go in
separate namespaces. Possibly Java's system is better, but if it doesn't
really match our users' expectations then we're just going to confuse
them if we use it.

Then again, maybe we're just being stupid and we should stick to
Java-style "twisted.foo", so "twisted.news" with a "twisted.news.nntp".
Who else thinks that's a good idea?

> twisted.xish -> No idea.
>    No idea. I imagine this will just be made a part of the Jabber
>    package, whatever that is.

Yeah. Jabber will probably be in the Words pacakge, so xish will end up
there (unless people tell us it is generally applicable).

> twisted.trial -> ???
>    This one is going to have to require some thought, since *all* the
>    other packages depend on it, but I think that people do want to split
>    it out.

When Glyph and I did the original break out document (Glyph, could you
forward it to the list?) we decided this ought to stay in core, because
everything depends on it, including core :) Also it requires the
reactor, internally. It's not worth breaking out. 

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From thomas.mangin at exa-networks.co.uk  Tue Apr 20 07:34:18 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Tue, 20 Apr 2004 14:34:18 +0100
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082464567.22435.17.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
Message-ID: <408526DA.6080005@exa-networks.co.uk>

Itamar Shtull-Trauring wrote:

>One problem with leaving it as twisted.news in future releases as Andrew
>suggests in a later email is that we lose our emphasis on the fact that
>it's a separate release with separate versions. Assume following
>scenario - we have lowdown 0.1 and lowdown 0.2, which are API
>incompatible. We want to be very clear that lowdown 0.1 can still be
>used on latest Twisted core, that you don't have to go in lockstep.
>  
>
Agreed, but it is a short term thing as all new users will have never 
known the "old way".

>So, looking at code - is twisted.foo part of core twisted and thus
>probably pretty stable or is it a separate package? What expectations
>can I have of API stability?
>  
>
It is no worse than currently where you have to read the doc. As well, 
even stable interface can change.
Nothing is set in stone.

>Partially this is just Python conventions. Separate packages go in
>separate namespaces. Possibly Java's system is better, but if it doesn't
>really match our users' expectations then we're just going to confuse
>them if we use it.
>  
>
So you mean that os.path is not pythonic ?
os.path is one of the first include that every python user do !

>Then again, maybe we're just being stupid and we should stick to
>Java-style "twisted.foo", so "twisted.news" with a "twisted.news.nntp".
>Who else thinks that's a good idea?
>  
>
Big repeat ...

I will repeat that I think that
<basename>.<protocol>(.<implementation>)+
basename :: twisted, foobar, other
protocol :: nntp, ldap, mail, ...
implementation ::  lowdown, smtp, pop3, ..

twisted.mail.pop3.byme
twisted.mail.pop3.byyou
twisted.nntp.lowdown
twisted.nntp.cnn

poweredbytwisted.mail.pop3.byme
poweredbytwisted.mail.pop3.byyou
poweredbytwisted.nntp.lowdown
poweredbytwisted.nntp.cnn

would be valid names

You could even have a prefered implementation accessible as
from twisted.nntp import default as nntp
or the like

Thomas



From bob at redivi.com  Tue Apr 20 07:44:48 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 20 Apr 2004 09:44:48 -0400
Subject: [Twisted-Python] Free Microsoft VC++ Compiler
In-Reply-To: <1082463621.22434.0.camel@sheriffpony>
References: <1082428897.15221.184741043@webmail.messagingengine.com>
	<1082463621.22434.0.camel@sheriffpony>
Message-ID: <E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>

On Apr 20, 2004, at 8:20 AM, Itamar Shtull-Trauring wrote:

> I think Cory is trying to keep all our Windows code working on mingw,
> and I agree with that. We should try to minimize our dependency on
> proprietary software, even when building for proprietary platforms.

Well, from what I understand, mainline Python 2.4 is pretty much going 
to require MSVC++ 7.x to link an extension properly, so it might be 
sort of a lost cause.

-bob




From itamar at itamarst.org  Tue Apr 20 07:47:36 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 09:47:36 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408526DA.6080005@exa-networks.co.uk>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<408526DA.6080005@exa-networks.co.uk>
Message-ID: <1082468855.22435.19.camel@sheriffpony>

On Tue, 2004-04-20 at 09:34, Thomas Mangin wrote:

> twisted.mail.pop3.byme
> twisted.mail.pop3.byyou
> twisted.nntp.lowdown
> twisted.nntp.cnn

Not going to happen. twisted.news... maybe. twisted.news.lowdown or
whatever is not going to be how we do it.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Tue Apr 20 07:49:00 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 09:49:00 -0400
Subject: [Twisted-Python] Free Microsoft VC++ Compiler
In-Reply-To: <E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>
References: <1082428897.15221.184741043@webmail.messagingengine.com>
	<1082463621.22434.0.camel@sheriffpony>
	<E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>
Message-ID: <1082468940.22426.22.camel@sheriffpony>

On Tue, 2004-04-20 at 09:44, Bob Ippolito wrote:

> Well, from what I understand, mainline Python 2.4 is pretty much going 
> to require MSVC++ 7.x to link an extension properly, so it might be 
> sort of a lost cause.

mingw is compatible with VC6 (otherwise we couldn't use it), possibly it
can be made to be compatible with VC7? But if not, yeah, we'll use the
free one.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From cce at clarkevans.com  Tue Apr 20 08:19:33 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 20 Apr 2004 10:19:33 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082464567.22435.17.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
Message-ID: <20040420141933.GC84522@prometheusresearch.com>

Radix/Itamar,

It's clear that y'all have put a good deal of thought into this,
so please take my feedback as just meandering thoughts.

On Tue, Apr 20, 2004 at 08:36:07AM -0400, Itamar Shtull-Trauring wrote:
| One problem with leaving it as twisted.news in future releases as Andrew
| suggests in a later email is that we lose our emphasis on the fact that
| it's a separate release with separate versions. Assume following
| scenario - we have lowdown 0.1 and lowdown 0.2, which are API
| incompatible. We want to be very clear that lowdown 0.1 can still be
| used on latest Twisted core, that you don't have to go in lockstep.

I suppose that lockstep has caused release management problems?  How
is this going to solve the problem?  (ie, are you sure it is a
problem, and that the solution fixes it?)

| So, looking at code - is twisted.foo part of core twisted and thus
| probably pretty stable or is it a separate package? What expectations
| can I have of API stability?
|
| Partially this is just Python conventions. Separate packages go in
| separate namespaces. Possibly Java's system is better, but if it doesn't
| really match our users' expectations then we're just going to confuse
| them if we use it.

This seems primarly a documentation problem, that is, 
it is solved with a README document in the package.  Personally,
I've never had issues with modules being stable or not.  Perhaps
a package manager could use a list of packages that are stable?
ie, "python setup.py --with-experimental install"

In any case, I think this package management issue needs to be
addressed no matter what your naming convention is.

| > twisted.xish -> No idea.
| >    No idea. I imagine this will just be made a part of the Jabber
| >    package, whatever that is.
| 
| Yeah. Jabber will probably be in the Words pacakge, so xish will end up
| there (unless people tell us it is generally applicable).

So, it will be in jabber (which I don't need?) till at some
time it turns out that someone needs it, and then it will
move somewhere else.

Bings,

Clark



From itamar at itamarst.org  Tue Apr 20 08:35:07 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 10:35:07 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420141933.GC84522@prometheusresearch.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<20040420141933.GC84522@prometheusresearch.com>
Message-ID: <1082471707.22428.27.camel@sheriffpony>

On Tue, 2004-04-20 at 10:19, Clark C. Evans wrote:

> I suppose that lockstep has caused release management problems?  How
> is this going to solve the problem?  (ie, are you sure it is a
> problem, and that the solution fixes it?)

We want to allow people to use latest version of Twisted with old
versions of other packages. So if the package you use has a major API
rewrite, you can still use the old version with the latest and coolest
core Twisted.

Lets say we rewrite twisted.web in a non-backwards compatible way and
release it inside Twisted 1.4. If you need a bug fix to
twisted.internet. that's in 1.4 but want to use the old twisted.web,
you're screwed.

> In any case, I think this package management issue needs to be
> addressed no matter what your naming convention is.

Which issue?

> So, it will be in jabber (which I don't need?) till at some
> time it turns out that someone needs it, and then it will
> move somewhere else.

Well, "which I don't need" implies you want xish standalone, so maybe it
should be from the start...

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Tue Apr 20 08:35:49 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 10:35:49 -0400
Subject: [Twisted-Python] All use cases of getComponent
In-Reply-To: <5.1.1.6.0.20040419093119.02165a40@mail.telecommunity.com>
References: <5.1.1.6.0.20040418224744.021a5ec0@mail.telecommunity.com>
	<5.1.1.6.0.20040418224744.021a5ec0@mail.telecommunity.com>
	<5.1.1.6.0.20040419093119.02165a40@mail.telecommunity.com>
Message-ID: <1082471749.22435.29.camel@sheriffpony>

On Mon, 2004-04-19 at 09:36, Phillip J. Eby wrote:

> Okay, well __conform__ is for an object to implement adaptation.  That is, 
> if object 'x' has a __conform__ attribute, then 'IFoo(x)' will first call 
> 'x.__conform__(IFoo)', and if a non-None object is returned, that's what 
> will be used as the result of 'IFoo(x)'.
> 
> Is that anything at all like what getComponent() does?

The semantics are pretty similar, yes.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From foom at fuhm.net  Tue Apr 20 08:57:26 2004
From: foom at fuhm.net (James Y Knight)
Date: Tue, 20 Apr 2004 10:57:26 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420021755.GA29296@frobozz>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<20040420021755.GA29296@frobozz>
Message-ID: <09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>

On Apr 19, 2004, at 10:17 PM, Andrew Bennetts wrote:
> What are the problems you allude to with keeping "twisted.news"?  I was
> under the impression that Zope 3 is planning to go this route.

I'd like to hear more about this. I think it is valuable to Twisted's 
image to keep all the projects inside a top-level namespace. While 
these may be different projects/apps, they aren't completely separate: 
they're all built by the same group of people, for use with the Twisted 
framework. Also I hope the latest release of all twisted products will 
be available as one large tarball/windows installer for people who 
don't want to think about it.

Using twisted.* would be better if twisted.core was in twisted.core but 
even without that the name sounds fine to me.

So, can it not be done technically?

James




From itamar at itamarst.org  Tue Apr 20 09:29:26 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 11:29:26 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<20040420021755.GA29296@frobozz>
	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
Message-ID: <1082474965.25969.1.camel@sheriffpony>

On Tue, 2004-04-20 at 10:57, James Y Knight wrote:

> Using twisted.* would be better if twisted.core was in twisted.core but 
> even without that the name sounds fine to me.
> 
> So, can it not be done technically?

I think so, yes.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From cce at clarkevans.com  Tue Apr 20 09:47:31 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 20 Apr 2004 11:47:31 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082471707.22428.27.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<20040420141933.GC84522@prometheusresearch.com>
	<1082471707.22428.27.camel@sheriffpony>
Message-ID: <20040420154731.GA6666@prometheusresearch.com>

On Tue, Apr 20, 2004 at 10:35:07AM -0400, Itamar Shtull-Trauring wrote:
| We want to allow people to use latest version of Twisted with old
| versions of other packages. So if the package you use has a major API
| rewrite, you can still use the old version with the latest and coolest
| core Twisted.
| 
| Lets say we rewrite twisted.web in a non-backwards compatible way and
| release it inside Twisted 1.4. If you need a bug fix to
| twisted.internet. that's in 1.4 but want to use the old twisted.web,
| you're screwed.

Itamar, looks like you have a really good use case there -- in 
particular, I'd like to upgrade twisted "core" without updating 
twisted.web till it is more stable and I've had time to update
my code dependencies.  If the 'twisted' modules could stay
within twisted.* I would prefer this, but this, alas is up
to the core people... ;) Clark



From bob at redivi.com  Tue Apr 20 09:56:24 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 20 Apr 2004 11:56:24 -0400
Subject: [Twisted-Python] Free Microsoft VC++ Compiler
In-Reply-To: <1082468940.22426.22.camel@sheriffpony>
References: <1082428897.15221.184741043@webmail.messagingengine.com>
	<1082463621.22434.0.camel@sheriffpony>
	<E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>
	<1082468940.22426.22.camel@sheriffpony>
Message-ID: <468C4420-92E3-11D8-90CB-000A95686CD8@redivi.com>


On Apr 20, 2004, at 9:49 AM, Itamar Shtull-Trauring wrote:

> On Tue, 2004-04-20 at 09:44, Bob Ippolito wrote:
>
>> Well, from what I understand, mainline Python 2.4 is pretty much going
>> to require MSVC++ 7.x to link an extension properly, so it might be
>> sort of a lost cause.
>
> mingw is compatible with VC6 (otherwise we couldn't use it), possibly 
> it
> can be made to be compatible with VC7? But if not, yeah, we'll use the
> free one.

Well VC7 isn't compatible with VC6, from what I understand this is 
because it links to a significantly newer version of the MSVC runtime 
dll, so I would expect problems with mingw.

-bob




From itamar at itamarst.org  Tue Apr 20 09:53:29 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 11:53:29 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<20040420021755.GA29296@frobozz>
	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
Message-ID: <1082476408.25969.14.camel@sheriffpony>

Three suggestions so far:

1. Separate namespaces for each project.

  twisted.internet
  conch

2. Keep all projects and core under twisted.

  twisted.internet
  twisted.conch

3. Separate namespace for projects, e.g. 't' or 'tmlabs' (Zope3 was
considering using 'z', though it like it won't happen in the end -
http://mail.zope.org/pipermail/zope3-dev/2004-April/010469.html)

  twisted.internet
  t.conch or tmlabs.conch

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From fdrake at acm.org  Tue Apr 20 10:02:41 2004
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 20 Apr 2004 12:02:41 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082474965.25969.1.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
	<1082474965.25969.1.camel@sheriffpony>
Message-ID: <200404201202.41047.fdrake@acm.org>

On Tuesday 20 April 2004 11:29 am, Itamar Shtull-Trauring wrote:
 > On Tue, 2004-04-20 at 10:57, James Y Knight wrote:
 > > Using twisted.* would be better if twisted.core was in twisted.core but
 > > even without that the name sounds fine to me.
 > >
 > > So, can it not be done technically?
 >
 > I think so, yes.

I've been quiet here lately, but am interested in this discussion since I've 
been working on packaging issues for Zope 3.

One thing that's interesting to note is that distutils actually allows 
installing subpackages directly.  For example, it's possible to install 
twisted.news separately from other twisted.* packages (let's ignore 
dependencies for the moment).

The only interesting dependency for twisted.news is the top-level twisted 
package.  If that's a "pure container" package (it contains only a trivial 
__init__.py), then it only needs to be released and packaged once, and it 
won't create dependency issues.  Some twisted.core package would be a 
dependency for practical issues, but distutils will grow some support for 
versionable dependencies like that (there's preliminary, undocumented support 
in the Python 2.4 CVS).

My point is that there's no technical reason not to use the "twisted." prefix; 
there may be other reasons not to, but that would be something for the 
Twisted developers and maintainers to determine.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation




From pje at telecommunity.com  Tue Apr 20 10:20:00 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Tue, 20 Apr 2004 12:20:00 -0400
Subject: [Twisted-Python] Free Microsoft VC++ Compiler
In-Reply-To: <1082468940.22426.22.camel@sheriffpony>
References: <E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>
	<1082428897.15221.184741043@webmail.messagingengine.com>
	<1082463621.22434.0.camel@sheriffpony>
	<E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>
Message-ID: <5.1.1.6.0.20040420121636.02690270@telecommunity.com>

At 09:49 AM 4/20/04 -0400, Itamar Shtull-Trauring wrote:
>On Tue, 2004-04-20 at 09:44, Bob Ippolito wrote:
>
> > Well, from what I understand, mainline Python 2.4 is pretty much going
> > to require MSVC++ 7.x to link an extension properly, so it might be
> > sort of a lost cause.
>
>mingw is compatible with VC6 (otherwise we couldn't use it), possibly it
>can be made to be compatible with VC7?

Yes, it can.  See this thread:

http://mail.python.org/pipermail/python-dev/2004-January/041650.html






From itamar at itamarst.org  Tue Apr 20 10:54:25 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Apr 2004 12:54:25 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082476408.25969.14.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<20040420021755.GA29296@frobozz>
	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
	<1082476408.25969.14.camel@sheriffpony>
Message-ID: <1082480064.26202.0.camel@sheriffpony>

On Tue, 2004-04-20 at 11:53, Itamar Shtull-Trauring wrote:

> 3. Separate namespace for projects, e.g. 't' or 'tmlabs' (Zope3 was
> considering using 'z', though it like it won't happen in the end -
> http://mail.zope.org/pipermail/zope3-dev/2004-April/010469.html)
> 
>   twisted.internet
>   t.conch or tmlabs.conch

For the record, this is the one I want, using 'tmlabs' for non-core
projects. So we'd have twisted.internet, tmlabs.news, tmlabs.conch etc..

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From foom at fuhm.net  Tue Apr 20 11:04:25 2004
From: foom at fuhm.net (James Y Knight)
Date: Tue, 20 Apr 2004 13:04:25 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <200404201202.41047.fdrake@acm.org>
References: <1082396907.26194.499.camel@sheriffpony>
	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
	<1082474965.25969.1.camel@sheriffpony>
	<200404201202.41047.fdrake@acm.org>
Message-ID: <C6B51389-92EC-11D8-B05B-000A95A50FB2@fuhm.net>


On Apr 20, 2004, at 12:02 PM, Fred L. Drake, Jr. wrote:

> On Tuesday 20 April 2004 11:29 am, Itamar Shtull-Trauring wrote:
>> On Tue, 2004-04-20 at 10:57, James Y Knight wrote:
>>> Using twisted.* would be better if twisted.core was in twisted.core 
>>> but
>>> even without that the name sounds fine to me.
>>>
>>> So, can it not be done technically?
>>
>> I think so, yes.
>
> One thing that's interesting to note is that distutils actually allows
> installing subpackages directly.  For example, it's possible to install
> twisted.news separately from other twisted.* packages (let's ignore
> dependencies for the moment).

If it's the case that this is possible, I'd say "best naming scheme" 
would be:
twisted.core.*coremodules
twisted.product
twisted.otherproduct.

However, given that twisted.core isn't going to exist, I'd be almost as 
happy with:
twisted.*coremodules
tmlabs.product
tmlabs.otherproduct

So consider that last my vote.

James




From michael.l.schneider at ugsplm.com  Tue Apr 20 11:05:08 2004
From: michael.l.schneider at ugsplm.com (Schneider, Michael)
Date: Tue, 20 Apr 2004 13:05:08 -0400
Subject: [Twisted-Python] Progress report on splitting packages
Message-ID: <49199579A2BB32438A7572AF3DBB2FB505A21768@uscimplm001.net.plm.eds.com>

Just curious.


Is there a technical reason not to do three layers.

It seems

Application - twisted
Domain  - news
Subsystem - lowdown , ....

makes the system easier to understand then

Application - twisted
All subpackages - next level....


Just trying to understand the approach,

Thanks
Mike

 
----------------------------------------------------------------
Michael Schneider
Senior Software Engineering Consultant
UGS PLM Solutions - an EDS Company
 
"The Greatest Performance Improvement Is the transitioning from a non-working state to the working state"


> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Itamar
> Shtull-Trauring
> Sent: Tuesday, April 20, 2004 9:48 AM
> To: Twisted discussion stuff
> Subject: Re: [Twisted-Python] Progress report on splitting packages
> 
> 
> On Tue, 2004-04-20 at 09:34, Thomas Mangin wrote:
> 
> > twisted.mail.pop3.byme
> > twisted.mail.pop3.byyou
> > twisted.nntp.lowdown
> > twisted.nntp.cnn
> 
> Not going to happen. twisted.news... maybe. twisted.news.lowdown or
> whatever is not going to be how we do it.
> 
> -- 
> Itamar Shtull-Trauring    http://itamarst.org
> Looking for a job -- http://itamarst.org/resume.html
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From exarkun at divmod.com  Tue Apr 20 11:09:36 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 20 Apr 2004 17:09:36 GMT
Subject: [Twisted-Python] Progress report on splitting packages
Message-ID: <20040420170936.8525.734282215.divmod.quotient.12@ohm>

On Tue, 20 Apr 2004 11:53:29 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>Three suggestions so far:
> 
> 1. Separate namespaces for each project.
> 
>   twisted.internet
>   conch

  Advantages:

    Easy on developers
    No distutils tricks required
  
  Disadvantages:

    Litters the top-level namespace
    Less uniquely named packages must be renamed

> 
> 2. Keep all projects and core under twisted.
> 
>   twisted.internet
>   twisted.conch
> 

  Advantages:

    Easy on users.
    Keeps the top-level namespace clean.
    Keeps Twisted projects conceptually tied together.
    
  Disadvantages:

    Distutils tricks required
    Missing projects confuse users ("importing twisted.conch failed?  But I have Twisted installed :(")


> 3. Separate namespace for projects, e.g. 't' or 'tmlabs' (Zope3 was
> considering using 'z', though it like it won't happen in the end -
> http://mail.zope.org/pipermail/zope3-dev/2004-April/010469.html)
> 
>   twisted.internet
>   t.conch or tmlabs.conch
> 

  Advantages:

    Keeps the top-level namespace clean.
    Keeps Twisted projects conceptually tied together.
  
  Disadvantages:

    May require distutils tricks.
    Missing projects confuse users, but probably less than in #2


  Amendments to the above advantage/disadvantage lists welcome.

  I mentioned "distutils tricks" a couple times.  So far I have heard both that distutils can and cannot do this.  I suspect that it can, but I would like to hear details on how this would work.  In particular, I would like to know whether "twisted.foo" would exist before the "foo" project was installed, and if it would, both what it would consist of and how it would be treated when twisted core is being upgraded after the "foo" project has been installed (can it cleanly avoid overwriting things?).


  I am not sure which of these I support yet, but I think I am leaning towards #3.

  Jp



From radix at twistedmatrix.com  Tue Apr 20 11:16:00 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 20 Apr 2004 13:16:00 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082476408.25969.14.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>	<20040420021755.GA29296@frobozz>	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
	<1082476408.25969.14.camel@sheriffpony>
Message-ID: <40855AD0.7080203@twistedmatrix.com>

Itamar Shtull-Trauring wrote:
> 3. Separate namespace for projects, e.g. 't' or 'tmlabs' (Zope3 was
> considering using 'z', though it like it won't happen in the end -
> http://mail.zope.org/pipermail/zope3-dev/2004-April/010469.html)
> 
>   twisted.internet
>   t.conch or tmlabs.conch

I like this. With 'tmlabs'.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040420/3bbe9d1b/attachment.sig>

From general at eepatents.com  Tue Apr 20 11:09:59 2004
From: general at eepatents.com (Ed Suominen)
Date: Tue, 20 Apr 2004 10:09:59 -0700
Subject: [Twisted-Python] Sub-project Naming
Message-ID: <c63lh6$6a9$1@sea.gmane.org>

"Always, always, always use good, unabbreviated, correctly-spelled
meaningful names." - http://c2.com/cgi/wiki?MeaningfulNames

As I've posted on the twisted.web list and ranted on #twisted,  I feel very
strongly that the proposed subprojects for twisted should  have meaningful
names that convey their function and relationship with each other. On the
#twisted IRC channel, Itamar talked about the use of tmlabs as a prefix for
the subproject names. This makes perfect sense to me. What would you rather
see in a list of packages, this:

TimmysToy
Lowdown
Dot

or this:

tmlabs.web
tmlabs.news
tmlabs.dns

Which is easier for the uninitiated user or potential user of twisted to
comprehend? Do you want to convey information in a name or hide it?

-- 
Ed Suominen
Registered Patent Agent 
Open Source Developer (Yes, both...)
Web Site: http://www.eepatents.com





From michal at pasternak.w.lub.pl  Tue Apr 20 12:39:05 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Tue, 20 Apr 2004 20:39:05 +0200
Subject: [Twisted-Python] Sub-project Naming
In-Reply-To: <c63lh6$6a9$1@sea.gmane.org>
References: <c63lh6$6a9$1@sea.gmane.org>
Message-ID: <20040420183905.GA42806@pasternak.w.lub.pl>

Ed Suominen [Tue, Apr 20, 2004 at 10:09:59AM -0700]:
> "Always, always, always use good, unabbreviated, correctly-spelled
> meaningful names." - http://c2.com/cgi/wiki?MeaningfulNames
> 
> As I've posted on the twisted.web list and ranted on #twisted,  I feel very
> strongly that the proposed subprojects for twisted should  have meaningful
> names that convey their function and relationship with each other. On the
> #twisted IRC channel, Itamar talked about the use of tmlabs as a prefix for
> the subproject names. This makes perfect sense to me. What would you rather
> see in a list of packages, this:
> 
> TimmysToy
> Lowdown
> Dot
> 
> or this:
> 
> tmlabs.web
> tmlabs.news
> tmlabs.dns
> 
> Which is easier for the uninitiated user or potential user of twisted to
> comprehend? Do you want to convey information in a name or hide it?

Well, I am pretty uninitiated, so I'll describe how the things are from my
perspective. The answer is:

That depends.

I know, what does serializer do. I hardly had any idea what does "Jelly" do,
when I've seen that name for the first time. On the other hand, when I've
learned it, I prefer the name "Jelly", it is easier to use, than
"TwistedPickle", "TwistedSerializer", "SamePickleOnlyPortable". Is "Jelly" a
meaningful name for a serializer? I really doubt that, perhaps that's
obvious for native American/English people, not for me. Anyway, since I
understood it, I like it. That's one thing.

Here goes another: I know, what DNS mean and what does it stand for; I have
no idea what "Twisted Dot" is. Of course, I could learn it ("dot" is more
meaningful name for a dns, than "oak", for example - there's already such
product, and it does dns in python, btw). Also it is easier to create a cool
webpage graphics logo for "Twisted Dot - the DNS server" (you could just use
dot.kde.org slogan ;), than just for "Twisted DNS server". Perhaps it could
be called "tmlabs.dns", but then question arises:

	What is tmlabs.dns?
	
	[ ] DNS client
	[ ] DNS server
        [ ] DNS client library
	[ ] DNS server library
	[ ] All of the above
	[ ] None of the above
	
For example, currently phrase "use conch" is meaningless without the
context; it should be either "use conch server" or "use conch client". And I
really, really, really have no idea if naming server/client in a different
way would be a good thing.

Another thing... I don't really known if vendor-name-as-prefix is a good
idea. I like "twisted.*" more, than "tmlabs.*" ;)



From radix at twistedmatrix.com  Tue Apr 20 13:02:20 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 20 Apr 2004 15:02:20 -0400
Subject: [Twisted-Python] Sub-project Naming
In-Reply-To: <20040420183905.GA42806@pasternak.w.lub.pl>
References: <c63lh6$6a9$1@sea.gmane.org>
	<20040420183905.GA42806@pasternak.w.lub.pl>
Message-ID: <408573BC.50603@twistedmatrix.com>

Michal Pasternak wrote:
> Well, I am pretty uninitiated, so I'll describe how the things are from my
> perspective. The answer is:
> 
> That depends.
> 
> I know, what does serializer do. I hardly had any idea what does "Jelly" do,
> when I've seen that name for the first time. On the other hand, when I've
> learned it, I prefer the name "Jelly", it is easier to use, than
> "TwistedPickle", "TwistedSerializer", "SamePickleOnlyPortable". Is "Jelly" a
> meaningful name for a serializer? I really doubt that, perhaps that's
> obvious for native American/English people, not for me. Anyway, since I
> understood it, I like it. That's one thing.

Yes, and also, jelly and banana are both serializers, but different 
kinds. To be truly technically accurate and unambiguous, jelly would 
need to be called SerializeArbitraryObjectsToListsOfStringsAndNumbers, 
and banana would need to be called 
SerializeListsOfStringsAndNumbersToBytes (and pickle would need to be 
called SerializeArbitraryObjectsToBytesWithHorribleSecurityHoles). This 
was the point I gave Ed on IRC, and he half-conceded his point, after 
not being able to come up with better names.

> Another thing... I don't really known if vendor-name-as-prefix is a good
> idea. I like "twisted.*" more, than "tmlabs.*" ;)

Two points. First, TML isn't exactly a "Vendor". We're not an official 
organization at all; we're just a group of (tight-knit, etc ;) people 
who hack on a bunch of somewhat related projects. Second, putting it in 
'twisted' has problems, since there will be subpackages of the twisted 
core module right next to our separately-distributed projects, leading 
to confusion:

in `ls' order:
  twisted.application <-- core
  twisted.conch       <-- external
  twisted.cred        <-- core
  twisted.enterprise  <-- core
  twisted.flow        <-- external

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040420/1c9402ed/attachment.sig>

From corydodt at twistedmatrix.com  Tue Apr 20 13:06:38 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Tue, 20 Apr 2004 12:06:38 -0700
Subject: [Twisted-Python] Free Microsoft VC++ Compiler
In-Reply-To: <5.1.1.6.0.20040420121636.02690270@telecommunity.com>
References: <E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>	<1082428897.15221.184741043@webmail.messagingengine.com>	<1082463621.22434.0.camel@sheriffpony>	<E4479E1B-92D0-11D8-90CB-000A95686CD8@redivi.com>
	<5.1.1.6.0.20040420121636.02690270@telecommunity.com>
Message-ID: <408574BE.5010104@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hooray for early adopters :-)

C

Phillip J. Eby wrote:
| At 09:49 AM 4/20/04 -0400, Itamar Shtull-Trauring wrote:
|
|> On Tue, 2004-04-20 at 09:44, Bob Ippolito wrote:
|>
|> > Well, from what I understand, mainline Python 2.4 is pretty much going
|> > to require MSVC++ 7.x to link an extension properly, so it might be
|> > sort of a lost cause.
|>
|> mingw is compatible with VC6 (otherwise we couldn't use it), possibly it
|> can be made to be compatible with VC7?
|
|
| Yes, it can.  See this thread:
|
| http://mail.python.org/pipermail/python-dev/2004-January/041650.html
|
|
|
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3-nr1 (Windows 2000)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFAhXS+3A5SrXAiHQcRAgbtAJ9mdBXWyxh83u0u7jp8wDtED5ZisQCaA9ni
CBkp3uMc6ICNN6E2is1UkXk=
=MjCH
-----END PGP SIGNATURE-----



From matt at pollenation.net  Tue Apr 20 13:20:03 2004
From: matt at pollenation.net (Matt Goodall)
Date: Tue, 20 Apr 2004 20:20:03 +0100
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082464567.22435.17.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
Message-ID: <1082488803.2913.163.camel@debian>

On Tue, 2004-04-20 at 13:36, Itamar Shtull-Trauring wrote:
> On Mon, 2004-04-19 at 21:58, Christopher Armstrong wrote:

[snip]

> > twisted.xish -> No idea.
> >    No idea. I imagine this will just be made a part of the Jabber
> >    package, whatever that is.
> 
> Yeah. Jabber will probably be in the Words pacakge, so xish will end up
> there (unless people tell us it is generally applicable).

I recently used xish.xpath instead of libxml's xpath in a Nevow example
to avoid introducing the external dependency. I knew xish would be
available to anyone interested in the example ... or so I thought ;-).
The xish.xpath implementation is lacking a few useful bits of the xpath
spec but other than that it's useful.

I don't know enough about the xish package as a whole to comment on
other parts - I only used (possibly wrongly) what I needed from it to
get the example working.

Cheers, Matt

-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt at pollenation.net

Any views expressed are my own and do not necessarily reflect
the views of my employer.




From mesozoic at polynode.com  Tue Apr 20 13:24:56 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Tue, 20 Apr 2004 15:24:56 -0400
Subject: [Twisted-Python] Re: Sub-project Naming
In-Reply-To: <20040420183905.GA42806@pasternak.w.lub.pl>
References: <c63lh6$6a9$1@sea.gmane.org>
	<20040420183905.GA42806@pasternak.w.lub.pl>
Message-ID: <1082489095.25380.24.camel@hyla>

On Tue, 2004-04-20 at 14:39, Michal Pasternak wrote:
> Ed Suominen [Tue, Apr 20, 2004 at 10:09:59AM -0700]:
> > "Always, always, always use good, unabbreviated, correctly-spelled
> > meaningful names." - http://c2.com/cgi/wiki?MeaningfulNames
> 
> Another thing... I don't really known if vendor-name-as-prefix is a good
> idea. I like "twisted.*" more, than "tmlabs.*" ;)

tmlabs.* makes it _dead obvious_ that these are not part of the core
Twisted package, they're subprojects instead. Less confusion. Good.

While TM.* or tm.* would be easier on my fingers, I think it's good to
just settle on something and move on. A number of people have supported
tmlabs.*, so I say just go with that.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040420/c3ee3eb1/attachment.sig>

From glyph at divmod.com  Tue Apr 20 13:56:00 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 20 Apr 2004 15:56:00 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408483C6.1030308@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
Message-ID: <BF513690-9304-11D8-B6DF-000393C9700E@divmod.com>


On Apr 19, 2004, at 9:58 PM, Christopher Armstrong wrote:

> It was decided that doing package names like this would be too 
> problematic.

When and by whom?  :)  At PyCon we talked about (and, IIRC, decided 
about) using the 'pkgutil' module to keep different subpackages in 
different locations.  I originally wanted to move things to top-level 
packages but itamar convinced me that forcing a change in the import 
structure as part of the split would be a bad idea.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040420/1621070e/attachment.sig>

From glyph at divmod.com  Tue Apr 20 14:00:17 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 20 Apr 2004 16:00:17 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408488B0.5050407@twistedmatrix.com>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>	<408483C6.1030308@twistedmatrix.com>
	<20040420020914.GA12285@titus.home.puzzling.org>
	<408488B0.5050407@twistedmatrix.com>
Message-ID: <58478F42-9305-11D8-B6DF-000393C9700E@divmod.com>


On Apr 19, 2004, at 10:19 PM, Christopher Armstrong wrote:

> It seems quite unnecessary, and I'm not convinced enough of its 
> utility to actually put effort into it. There's not much special about 
> a "Twisted Subproject"; AFAIC they're just projects that are developed 
> by "Twisted Matrix Laboratories", which is rather nebulous.

We absolutely need a policy document.  The most attractive thing about 
Twisted, to many developers, is the extremely consistent coding style, 
packaging style, and central point of distribution.  A project 
developed by 'the labs' also implicitly depends on some other core 
packages, and we need policy about things like running regression tests 
with multiple versions of dependencies in order that those core 
packages continue to support their clients correctly to even maintain 
parity with our current development process's quality level.

Some of the policy will seem obvious, but other packages don't follow 
it.  For example, we should make sure that everything uses distutils as 
its build process.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040420/8f4f0aac/attachment.sig>

From radix at twistedmatrix.com  Tue Apr 20 14:02:49 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 20 Apr 2004 16:02:49 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <BF513690-9304-11D8-B6DF-000393C9700E@divmod.com>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>	<408483C6.1030308@twistedmatrix.com>
	<BF513690-9304-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <408581E9.1060007@twistedmatrix.com>

Glyph Lefkowitz wrote:
> 
> On Apr 19, 2004, at 9:58 PM, Christopher Armstrong wrote:
> 
>> It was decided that doing package names like this would be too 
>> problematic.
> 
> 
> When and by whom?  :)  At PyCon we talked about (and, IIRC, decided 
> about) using the 'pkgutil' module to keep different subpackages in 
> different locations.  I originally wanted to move things to top-level 
> packages but itamar convinced me that forcing a change in the import 
> structure as part of the split would be a bad idea.

Well, see newer posts to this list.


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040420/4c692cee/attachment.sig>

From fdrake at acm.org  Tue Apr 20 14:02:12 2004
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 20 Apr 2004 16:02:12 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420170936.8525.734282215.divmod.quotient.12@ohm>
References: <20040420170936.8525.734282215.divmod.quotient.12@ohm>
Message-ID: <200404201602.12883.fdrake@acm.org>

On Tuesday 20 April 2004 01:09 pm, exarkun at divmod.com wrote:
 >   I mentioned "distutils tricks" a couple times.  So far I have heard both
 > that distutils can and cannot do this.  I suspect that it can, but I would
 > like to hear details on how this would work.  In particular, I would like

from distutils.core import setup

setup(packages=["twisted.foo"],
      package_dir={"twisted.foo": "twisted_foo"}, # or wherever in the dist.
      ...)

 > to know whether "twisted.foo" would exist before the "foo" project was
 > installed, and if it would, both what it would consist of and how it would
 > be treated when twisted core is being upgraded after the "foo" project has
 > been installed (can it cleanly avoid overwriting things?).

Whether it exists depends on whether the Twisted core includes a package of 
the same name; I wouldn't include it unless it's part of the core.

If the "core" includes the twisted package (pure container or not), upgrading 
it does not affect child packages that aren't distributed as part of the 
twisted core.  So if you install twisted 1.1, twisted.foo 1.2, then twisted 
1.3, you have the core at 1.3 and twisted.foo at 1.2.

Yes, I've tested this behavior with Zope 3 packages.

Does this answer your question?  I'll be glad to elaborate if needed.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation




From radix at twistedmatrix.com  Tue Apr 20 14:04:50 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 20 Apr 2004 16:04:50 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
Message-ID: <40858262.6020102@twistedmatrix.com>

So it's officially counted :-) ::

-------- Original Message --------
Subject: Re: [Twisted-Python] Sub-project Naming
Date: Tue, 20 Apr 2004 12:47:45 -0700 (PDT)
From: Jeremy Noetzelman <jjn at kriln.com>
To: Christopher Armstrong <radix at twistedmatrix.com>


FWIW, tmlabs.* has my vote!

Stravad


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040420/0d0b5a73/attachment.sig>

From glyph at divmod.com  Tue Apr 20 14:16:55 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 20 Apr 2004 16:16:55 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <408526DA.6080005@exa-networks.co.uk>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<408526DA.6080005@exa-networks.co.uk>
Message-ID: <AB6CE628-9307-11D8-B6DF-000393C9700E@divmod.com>


On Apr 20, 2004, at 9:34 AM, Thomas Mangin wrote:

> I will repeat that I think that
> <basename>.<protocol>(.<implementation>)+
> basename :: twisted, foobar, other
> protocol :: nntp, ldap, mail, ...
> implementation ::  lowdown, smtp, pop3, ..

This makes no sense to me, and as itamar said is unlikely to be 
accepted.

First of all, nntp and ldap are the same kind of thing as smtp and pop3 
- protocols.

Second, twisted.words, for example, is explicitly multiprotocol.  I 
suppose if we wanted to be boring, we could call it 
twisted.multiprotocolchatserver.ircgateway, but IMHO "words" is 
catchier.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040420/7aab4e60/attachment.sig>

From glyph at divmod.com  Tue Apr 20 14:21:49 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 20 Apr 2004 16:21:49 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082471707.22428.27.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<20040420141933.GC84522@prometheusresearch.com>
	<1082471707.22428.27.camel@sheriffpony>
Message-ID: <5A9A11F8-9308-11D8-B6DF-000393C9700E@divmod.com>


On Apr 20, 2004, at 10:35 AM, Itamar Shtull-Trauring wrote:

> We want to allow people to use latest version of Twisted with old
> versions of other packages. So if the package you use has a major API
> rewrite, you can still use the old version with the latest and coolest
> core Twisted.

In particular, this was a release management problem for Divmod, 
because we've been making changes to the imap4 code (which is in the 
"protocols" package), that our code depends on, but we can't release 
all of Twisted at once fast enough to roll out a minor change, because 
going through the full QA process for the whole system takes too long.  
We are trying to decouple things more so that a project which requires 
bugfixes in twisted.web doesn't accidentally suck in in-progress 
changes to the reactor as well.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040420/96a07eed/attachment.sig>

From fdrake at acm.org  Tue Apr 20 14:41:15 2004
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 20 Apr 2004 16:41:15 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <BF513690-9304-11D8-B6DF-000393C9700E@divmod.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<408483C6.1030308@twistedmatrix.com>
	<BF513690-9304-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <200404201641.15356.fdrake@acm.org>

On Tuesday 20 April 2004 03:56 pm, Glyph Lefkowitz wrote:
 > When and by whom?  :)  At PyCon we talked about (and, IIRC, decided
 > about) using the 'pkgutil' module to keep different subpackages in
 > different locations.

I've convinced myself that this is inadvisable at this point (in general, not 
just for Twisted).  There is a bug in pkgutil that renders it much more 
painful than it should be.  See:

    http://www.python.org/sf/935117


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation




From pp64 at codelock.com  Tue Apr 20 14:42:46 2004
From: pp64 at codelock.com (Pavel Pergamenshchik)
Date: Tue, 20 Apr 2004 16:42:46 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <40858262.6020102@twistedmatrix.com>
References: <40858262.6020102@twistedmatrix.com>
Message-ID: <20040420164246.12a4044e@dunce>

On Tue, 20 Apr 2004 16:04:50 -0400
Christopher Armstrong <radix at twistedmatrix.com> wrote:

> So it's officially counted :-) ::
> 
> -------- Original Message --------
> Subject: Re: [Twisted-Python] Sub-project Naming
> Date: Tue, 20 Apr 2004 12:47:45 -0700 (PDT)
> From: Jeremy Noetzelman <jjn at kriln.com>
> To: Christopher Armstrong <radix at twistedmatrix.com>
> 
> 
> FWIW, tmlabs.* has my vote!

Metoo!!!@#one!#@! This seems to the least unacceptable of the offered solutions. FWIW, I feel strongly about avoiding "cute" names for (web, news, mail)-level packages. I'd rather see twisted.ssh than twisted.conch, but I suppose that needed a distinct name for the client executable.



From radix at twistedmatrix.com  Tue Apr 20 15:02:07 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 20 Apr 2004 17:02:07 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <20040420164246.12a4044e@dunce>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
Message-ID: <40858FCF.6020704@twistedmatrix.com>

Pavel Pergamenshchik wrote:
> On Tue, 20 Apr 2004 16:04:50 -0400
> Christopher Armstrong <radix at twistedmatrix.com> wrote:
> 
> 
>>So it's officially counted :-) ::
>>
>>-------- Original Message --------
>>Subject: Re: [Twisted-Python] Sub-project Naming
>>Date: Tue, 20 Apr 2004 12:47:45 -0700 (PDT)
>>From: Jeremy Noetzelman <jjn at kriln.com>
>>To: Christopher Armstrong <radix at twistedmatrix.com>
>>
>>
>>FWIW, tmlabs.* has my vote!
> 
> 
> Metoo!!!@#one!#@! This seems to the least unacceptable of the offered solutions. FWIW, I feel strongly about avoiding "cute" names for (web, news, mail)-level packages. I'd rather see twisted.ssh than twisted.conch, but I suppose that needed a distinct name for the client executable.

Well, if we go with tmlabs.*, then we won't need to worry about this. 
All packages will probably just keep their current names (barring 
special cases like im/words integration. We'll probably just call that 
'words' and put all IM protocols there).

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040420/d0489bca/attachment.sig>

From bob at redivi.com  Tue Apr 20 15:23:56 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 20 Apr 2004 17:23:56 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <40858FCF.6020704@twistedmatrix.com>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
Message-ID: <07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>

On Apr 20, 2004, at 5:02 PM, Christopher Armstrong wrote:

> Pavel Pergamenshchik wrote:
>> On Tue, 20 Apr 2004 16:04:50 -0400
>> Christopher Armstrong <radix at twistedmatrix.com> wrote:
>>> So it's officially counted :-) ::
>>>
>>> -------- Original Message --------
>>> Subject: Re: [Twisted-Python] Sub-project Naming
>>> Date: Tue, 20 Apr 2004 12:47:45 -0700 (PDT)
>>> From: Jeremy Noetzelman <jjn at kriln.com>
>>> To: Christopher Armstrong <radix at twistedmatrix.com>
>>>
>>>
>>> FWIW, tmlabs.* has my vote!
>> Metoo!!!@#one!#@! This seems to the least unacceptable of the offered 
>> solutions. FWIW, I feel strongly about avoiding "cute" names for 
>> (web, news, mail)-level packages. I'd rather see twisted.ssh than 
>> twisted.conch, but I suppose that needed a distinct name for the 
>> client executable.
>
> Well, if we go with tmlabs.*, then we won't need to worry about this. 
> All packages will probably just keep their current names (barring 
> special cases like im/words integration. We'll probably just call that 
> 'words' and put all IM protocols there).

I'm +1 on tmlabs as well, but I'm unsure about the cute names.

On one hand, it's harder for a new user to figure out that (a) twisted 
does ssh and (b) it's named conch.. but on the other hand, if you say 
conch, people know you're speaking of a specific implementation of ssh, 
where if it was called "twisted ssh" it might cause some confusion in 
that regard.  I think PuTTY, SecureCRT, Transmit, etc. do a fine job of 
marketing themselves as protocol-specificish applications without 
explicitly mentioning which protocols they support (which is probably 
more of a bonus, because it's future proof).

So because there are good reasons either way, I say we just stick with 
the cute names -- but maybe try a little harder to market them to new 
users.  An idea would be to have a "protocol matrix" document that is 
easy to find from twistedmatrix.com (no more than 1 click away from the 
front page, but it could almost be the front page) that is a table of 
wire protocols <-> implementation names with perhaps a note about their 
stability and completeness.

-bob




From mary-twisted at puzzling.org  Tue Apr 20 15:27:24 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 21 Apr 2004 07:27:24 +1000
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <58478F42-9305-11D8-B6DF-000393C9700E@divmod.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<20040420020914.GA12285@titus.home.puzzling.org>
	<408488B0.5050407@twistedmatrix.com>
	<58478F42-9305-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <20040420212724.GB2957@titus.home.puzzling.org>

On Tue, Apr 20, 2004, Glyph Lefkowitz wrote:
> 
> On Apr 19, 2004, at 10:19 PM, Christopher Armstrong wrote:
> 
> >It seems quite unnecessary, and I'm not convinced enough of its
> >utility to actually put effort into it. There's not much special
> >about a "Twisted Subproject"; AFAIC they're just projects that are
> >developed by "Twisted Matrix Laboratories", which is rather nebulous.
> 
> We absolutely need a policy document.

I had a thought briefly yesterday that got lost in my helpful (off-list)
exchange with radix about whether policy could keep cross-projects tasks
like docs (and testing I suppose) sane: a policy doc would be most
helpful for newcomers to the Twisted community who've decided their itch
is a new subproject, because they want to add support for a blah
protocol. Reading a policy doc would be a lot faster than absorbing
policy on IRC for an outsider. Or at least so it appears to me.

> Twisted, to many developers, is the extremely consistent coding style,
> packaging style, and central point of distribution.  A project
> developed by 'the labs' also implicitly depends on some other core
> packages, and we need policy about things like running regression
> tests with multiple versions of dependencies in order that those core
> packages continue to support their clients correctly to even maintain
> parity with our current development process's quality level.
> 
> Some of the policy will seem obvious, but other packages don't follow
> it.  For example, we should make sure that everything uses distutils
> as its build process.

If people want a policy doc, send me notes towards it and I'll happily
turn it into something doc-like or a series thereof. I know there's
coding standards already.

-Mary



From mary-twisted at puzzling.org  Tue Apr 20 15:28:44 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 21 Apr 2004 07:28:44 +1000
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082476408.25969.14.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<20040420021755.GA29296@frobozz>
	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
	<1082476408.25969.14.camel@sheriffpony>
Message-ID: <20040420212844.GC2957@titus.home.puzzling.org>

On Tue, Apr 20, 2004, Itamar Shtull-Trauring wrote:
> 3. Separate namespace for projects, e.g. 't' or 'tmlabs' (Zope3 was
> considering using 'z', though it like it won't happen in the end -
> http://mail.zope.org/pipermail/zope3-dev/2004-April/010469.html)
> 
>   twisted.internet
>   t.conch or tmlabs.conch

I like 3.

-Mary



From fdrake at acm.org  Tue Apr 20 15:37:06 2004
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 20 Apr 2004 17:37:06 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <20040420212724.GB2957@titus.home.puzzling.org>
References: <1082396907.26194.499.camel@sheriffpony>
	<58478F42-9305-11D8-B6DF-000393C9700E@divmod.com>
	<20040420212724.GB2957@titus.home.puzzling.org>
Message-ID: <200404201737.06465.fdrake@acm.org>

On Tuesday 20 April 2004 05:27 pm, Mary Gardiner wrote:
 > protocol. Reading a policy doc would be a lot faster than absorbing
 > policy on IRC for an outsider. Or at least so it appears to me.

Using IRC as a sole source for such information is insane.  Many potential 
contributors and users won't want anything to do with IRC, and #twisted isn't 
comfy to "outsiders."  (It's not that people on #twisted aren't nice or 
helpful; it's just that the basic culture is... strange.)


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation




From radix at twistedmatrix.com  Tue Apr 20 15:41:26 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 20 Apr 2004 17:41:26 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <200404201602.12883.fdrake@acm.org>
References: <20040420170936.8525.734282215.divmod.quotient.12@ohm>
	<200404201602.12883.fdrake@acm.org>
Message-ID: <40859906.8070500@twistedmatrix.com>

Fred L. Drake, Jr. wrote:
> On Tuesday 20 April 2004 01:09 pm, exarkun at divmod.com wrote:
>  >   I mentioned "distutils tricks" a couple times.  So far I have heard both
>  > that distutils can and cannot do this.  I suspect that it can, but I would
>  > like to hear details on how this would work.  In particular, I would like
> 
> from distutils.core import setup
> 
> setup(packages=["twisted.foo"],
>       package_dir={"twisted.foo": "twisted_foo"}, # or wherever in the dist.
>       ...)
> 
>  > to know whether "twisted.foo" would exist before the "foo" project was
>  > installed, and if it would, both what it would consist of and how it would
>  > be treated when twisted core is being upgraded after the "foo" project has
>  > been installed (can it cleanly avoid overwriting things?).
> 
> Whether it exists depends on whether the Twisted core includes a package of 
> the same name; I wouldn't include it unless it's part of the core.
> 
> If the "core" includes the twisted package (pure container or not), upgrading 
> it does not affect child packages that aren't distributed as part of the 
> twisted core.  So if you install twisted 1.1, twisted.foo 1.2, then twisted 
> 1.3, you have the core at 1.3 and twisted.foo at 1.2.

Well, this isn't quite a problem any more, since we're going to put 
stuff in 'tmlabs' instead of 'twisted' (according to the obvious favor 
from posters to this thread). However, what do you think the best way to 
make the 'tmlabs' top-level exist would be? I figure we can just put an 
empty 'tmlabs' directory right next to 'twisted' in our Twisted core 
package, containing only an empty __init__.py. setup.py could install 
it, and for people hacking out of SVN instead of using actual 
installations (for the developers of these projects), I'll write a 
little .pth file that makes this sane.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040420/b55c2ba9/attachment.sig>

From fdrake at acm.org  Tue Apr 20 15:51:04 2004
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 20 Apr 2004 17:51:04 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <40859906.8070500@twistedmatrix.com>
References: <20040420170936.8525.734282215.divmod.quotient.12@ohm>
	<200404201602.12883.fdrake@acm.org>
	<40859906.8070500@twistedmatrix.com>
Message-ID: <200404201751.04753.fdrake@acm.org>

On Tuesday 20 April 2004 05:41 pm, Christopher Armstrong wrote:
 > Well, this isn't quite a problem any more, since we're going to put
 > stuff in 'tmlabs' instead of 'twisted' (according to the obvious favor
 > from posters to this thread). However, what do you think the best way to
 > make the 'tmlabs' top-level exist would be? I figure we can just put an
 > empty 'tmlabs' directory right next to 'twisted' in our Twisted core
 > package, containing only an empty __init__.py. setup.py could install
 > it, and for people hacking out of SVN instead of using actual
 > installations (for the developers of these projects), I'll write a
 > little .pth file that makes this sane.

This seems quite reasonable to me, since stuff in tmlabs.* is expected to 
always rely on twisted.  That's a nice bootstrap detail to have taken care of 
so easily.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation




From cce at clarkevans.com  Tue Apr 20 15:56:28 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 20 Apr 2004 17:56:28 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <5A9A11F8-9308-11D8-B6DF-000393C9700E@divmod.com>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<20040420141933.GC84522@prometheusresearch.com>
	<1082471707.22428.27.camel@sheriffpony>
	<5A9A11F8-9308-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <20040420215628.GC31575@prometheusresearch.com>

On Tue, Apr 20, 2004 at 04:21:49PM -0400, Glyph Lefkowitz wrote:
| >We want to allow people to use latest version of Twisted with old
| >versions of other packages. So if the package you use has a major API
| >rewrite, you can still use the old version with the latest and coolest
| >core Twisted.
| 
| In particular, this was a release management problem for Divmod, 
| because we've been making changes to the imap4 code (which is in the 
| "protocols" package), that our code depends on, but we can't release 
| all of Twisted at once fast enough to roll out a minor change, because 
| going through the full QA process for the whole system takes too long.  
| We are trying to decouple things more so that a project which requires 
| bugfixes in twisted.web doesn't accidentally suck in in-progress 
| changes to the reactor as well.

This seems the driving reason.  What ever choice is made, it should
be there to support this need.

My perspective:

  1.  I think it is best to stick with one top level
      package name.   Splitting twisted.* into 
      twisted and tmlabs or whatever dillutes the
      value of the overall product and creates
      unnecessary distinctions.

  2.  Overall, naming should be as boring as possible
      so that what is being implemented is clear,
      'ssh' is better than 'consh'.  Also, while more
      than one implementation is the 'open source'
      way of doing things, more than one way in the
      twisted project, imho, is not a great idea
      (it dillutes the marketing value)

   3. If release management is causing this distinction,
      I suggest making up sub-packages:
      
      twisted.core.python
                  .trial
                  .internet
                 
      twisted.web.client
                 .server
                 .http
                 .ftp

      twisted.mail.smtp
                  .pop
                  .imap
                  .client
                  .server

      twisted.rpc.jelly
                 .spread
                 <other RPC stuff>

      twisted.im.jabber
                .aol
                .client
                .server

      twisted.database. <database stuff>

      twisted.libs.xml
                  .flow
                   (other othgogonal non-protocol libraries)

     4. In particular, I don't see that "enterprise" and 
        "jelly+spread" are any more 'core' than jabber... ;)


Sorry for being so boring.

Clark



From bob at redivi.com  Tue Apr 20 16:01:57 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 20 Apr 2004 18:01:57 -0400
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <40859906.8070500@twistedmatrix.com>
References: <20040420170936.8525.734282215.divmod.quotient.12@ohm>
	<200404201602.12883.fdrake@acm.org>
	<40859906.8070500@twistedmatrix.com>
Message-ID: <5751351A-9316-11D8-90CB-000A95686CD8@redivi.com>


On Apr 20, 2004, at 5:41 PM, Christopher Armstrong wrote:

> Fred L. Drake, Jr. wrote:
>> On Tuesday 20 April 2004 01:09 pm, exarkun at divmod.com wrote:
>>  >   I mentioned "distutils tricks" a couple times.  So far I have 
>> heard both
>>  > that distutils can and cannot do this.  I suspect that it can, but 
>> I would
>>  > like to hear details on how this would work.  In particular, I 
>> would like
>> from distutils.core import setup
>> setup(packages=["twisted.foo"],
>>       package_dir={"twisted.foo": "twisted_foo"}, # or wherever in 
>> the dist.
>>       ...)
>>  > to know whether "twisted.foo" would exist before the "foo" project 
>> was
>>  > installed, and if it would, both what it would consist of and how 
>> it would
>>  > be treated when twisted core is being upgraded after the "foo" 
>> project has
>>  > been installed (can it cleanly avoid overwriting things?).
>> Whether it exists depends on whether the Twisted core includes a 
>> package of the same name; I wouldn't include it unless it's part of 
>> the core.
>> If the "core" includes the twisted package (pure container or not), 
>> upgrading it does not affect child packages that aren't distributed 
>> as part of the twisted core.  So if you install twisted 1.1, 
>> twisted.foo 1.2, then twisted 1.3, you have the core at 1.3 and 
>> twisted.foo at 1.2.
>
> Well, this isn't quite a problem any more, since we're going to put 
> stuff in 'tmlabs' instead of 'twisted' (according to the obvious favor 
> from posters to this thread). However, what do you think the best way 
> to make the 'tmlabs' top-level exist would be? I figure we can just 
> put an empty 'tmlabs' directory right next to 'twisted' in our Twisted 
> core package, containing only an empty __init__.py. setup.py could 
> install it, and for people hacking out of SVN instead of using actual 
> installations (for the developers of these projects), I'll write a 
> little .pth file that makes this sane.

Well, instead of being empty, the __init__.py could have a really nice 
docstring that says why it exists and how to get subpackages for it, 
etc.  :)

-bob




From stephen at thorne.id.au  Tue Apr 20 15:53:59 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Wed, 21 Apr 2004 07:53:59 +1000
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <20040420164246.12a4044e@dunce>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
Message-ID: <20040420215359.GA8410@thorne.id.au>

On Tue, Apr 20, 2004 at 04:42:46PM -0400, Pavel Pergamenshchik wrote:
> On Tue, 20 Apr 2004 16:04:50 -0400
> Christopher Armstrong <radix at twistedmatrix.com> wrote:
> 
> > So it's officially counted :-) ::
> > 
> > -------- Original Message --------
> > Subject: Re: [Twisted-Python] Sub-project Naming
> > Date: Tue, 20 Apr 2004 12:47:45 -0700 (PDT)
> > From: Jeremy Noetzelman <jjn at kriln.com>
> > To: Christopher Armstrong <radix at twistedmatrix.com>
> > 
> > 
> > FWIW, tmlabs.* has my vote!
> 
> Metoo!!!@#one!#@! This seems to the least unacceptable of the offered
> solutions. FWIW, I feel strongly about avoiding "cute" names for (web,
> news, mail)-level packages. I'd rather see twisted.ssh than
> twisted.conch, but I suppose that needed a distinct name for the
> client executable.

+1 on tmlabs.<sane-name>


Regards,
Stephen Thorne



From corydodt at twistedmatrix.com  Tue Apr 20 15:59:55 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Tue, 20 Apr 2004 14:59:55 -0700
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
References: <40858262.6020102@twistedmatrix.com>	<20040420164246.12a4044e@dunce>	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
Message-ID: <40859D5B.6000204@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Bob Ippolito wrote:

| On Apr 20, 2004, at 5:02 PM, Christopher Armstrong wrote:

|
| So because there are good reasons either way, I say we just stick with
| the cute names -- but maybe try a little harder to market them to new
| users.  An idea would be to have a "protocol matrix" document that is
| easy to find from twistedmatrix.com (no more than 1 click away from the
| front page, but it could almost be the front page) that is a table of
| wire protocols <-> implementation names with perhaps a note about their
| stability and completeness.
|
| -bob

+1

I just like the cute names because they are more google-friendly.

C

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3-nr1 (Windows 2000)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFAhZ1b3A5SrXAiHQcRAos5AKChkcSTktUzBwZXNeosEvm6B56PFgCghd39
85UZ3Je3BkUlahi3MGQd8mc=
=19u+
-----END PGP SIGNATURE-----



From radix at twistedmatrix.com  Tue Apr 20 16:06:56 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 20 Apr 2004 18:06:56 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <40859D5B.6000204@twistedmatrix.com>
References: <40858262.6020102@twistedmatrix.com>	<20040420164246.12a4044e@dunce>	<40858FCF.6020704@twistedmatrix.com>	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<40859D5B.6000204@twistedmatrix.com>
Message-ID: <40859F00.5030609@twistedmatrix.com>

Cory Dodt wrote:
> Bob Ippolito wrote:
> 
> | On Apr 20, 2004, at 5:02 PM, Christopher Armstrong wrote:
> 
> |
> | So because there are good reasons either way, I say we just stick with
> | the cute names -- but maybe try a little harder to market them to new
> | users.  An idea would be to have a "protocol matrix" document that is
> | easy to find from twistedmatrix.com (no more than 1 click away from the
> | front page, but it could almost be the front page) that is a table of
> | wire protocols <-> implementation names with perhaps a note about their
> | stability and completeness.
> |
> | -bob
> 
> +1
> 
> I just like the cute names because they are more google-friendly.

I'm not even concerned with "cute names" vs "descriptive names". I think 
they should stay what they already are wherever reasonable.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040420/3db64ed6/attachment.sig>

From dreid at dreid.org  Tue Apr 20 16:08:29 2004
From: dreid at dreid.org (David Reid)
Date: Tue, 20 Apr 2004 15:08:29 -0700
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082476408.25969.14.camel@sheriffpony>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<20040420021755.GA29296@frobozz>
	<09E19A6E-92DB-11D8-B05B-000A95A50FB2@fuhm.net>
	<1082476408.25969.14.camel@sheriffpony>
Message-ID: <1082498909.31542.11.camel@localhost>

I can get on board with 3

On Tue, 2004-04-20 at 08:53, Itamar Shtull-Trauring wrote:
> Three suggestions so far:
> 
> 1. Separate namespaces for each project.
> 
>   twisted.internet
>   conch
> 
> 2. Keep all projects and core under twisted.
> 
>   twisted.internet
>   twisted.conch
> 
> 3. Separate namespace for projects, e.g. 't' or 'tmlabs' (Zope3 was
> considering using 'z', though it like it won't happen in the end -
> http://mail.zope.org/pipermail/zope3-dev/2004-April/010469.html)
> 
>   twisted.internet
>   t.conch or tmlabs.conch




From thomas.mangin at exa-networks.co.uk  Tue Apr 20 16:17:03 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Tue, 20 Apr 2004 23:17:03 +0100
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <AB6CE628-9307-11D8-B6DF-000393C9700E@divmod.com>
References: <1082396907.26194.499.camel@sheriffpony>	<20040420011327.GB27709@frobozz>	<408483C6.1030308@twistedmatrix.com>	<1082464567.22435.17.camel@sheriffpony>	<408526DA.6080005@exa-networks.co.uk>
	<AB6CE628-9307-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <4085A15F.5080402@exa-networks.co.uk>

Glyph Lefkowitz wrote:

>> I will repeat that I think that
>> <basename>.<protocol>(.<implementation>)+
>> basename :: twisted, foobar, other
>> protocol :: nntp, ldap, mail, ...
>> implementation ::  lowdown, smtp, pop3, ..
>
>
> This makes no sense to me, and as itamar said is unlikely to be accepted.

well, I am glad that you are dismissing idea on the basis that you do 
not understand it (sorry for the irony), but as I did not spend great 
time or care to try to be understood, I can not complain too much.

> First of all, nntp and ldap are the same kind of thing as smtp and 
> pop3 - protocols.

Yes, I know. Why are you telling me that ?
Is it as I should have written :

basename.(organisational_unit.)*(protocol.)+(implementation)+
with the ()* and ()* having a regex like meaning and the words basename, 
organinational_unit, ... having one of the possible listed values.

basename in [twisted, tmlabs,whatever_is_agreed]
organisational_unit in [mail, im,web]
protocol in [nntp, ldap, oscar]
implementation in [lowdown, my_fancy_implementation_name]

It seems that by the time I wrote all that Clark have posted what I am 
trying to say.

> Second, twisted.words, for example, is explicitly multiprotocol.  I 
> suppose if we wanted to be boring, we could call it 
> twisted.multiprotocolchatserver.ircgateway, but IMHO "words" is catchier.

I do not really care if a name is catchy or not , "explicit is better 
than implicit". A good name is short enough to not be a pain when you 
code and explicit. I do not that fancy should not be a criteria of 
selection when it comes to technology.

I was trying to say the a logical organisation should help the 
understanding of the twisted package. It seems that there is a clear 
need to change the structure of the code as it is now too large and need 
to be structured in a modular fashion. But at the same time it seems 
that most of the people on the list are speaking of rules to make it 
harder for new user to learn twisted.

You guys, know twisted by heart. I do not intend to. I intend to use it 
for _RAD_, so learning it should be _quick_

If you do not understand me, please ask Michael Schneider or Clark Evans 
which seems to think like me but are able to express themselves correctly.

Thomas



From general at eepatents.com  Tue Apr 20 16:54:23 2004
From: general at eepatents.com (Ed Suominen)
Date: Tue, 20 Apr 2004 15:54:23 -0700
Subject: [Twisted-Python] Re: Progress report on splitting packages
References: <20040420170936.8525.734282215.divmod.quotient.12@ohm>
	<200404201602.12883.fdrake@acm.org>
	<40859906.8070500@twistedmatrix.com>
	<200404201751.04753.fdrake@acm.org>
Message-ID: <c649mt$qkq$1@sea.gmane.org>

Fred L. Drake, Jr. wrote:

> On Tuesday 20 April 2004 05:41 pm, Christopher Armstrong wrote:
>  > Well, this isn't quite a problem any more, since we're going to put
>  > stuff in 'tmlabs' instead of 'twisted' (according to the obvious favor
>  > from posters to this thread). However, what do you think the best way
>  > to make the 'tmlabs' top-level exist would be? I figure we can just put
>  > an empty 'tmlabs' directory right next to 'twisted' in our Twisted core
>  > package, containing only an empty __init__.py. setup.py could install
>  > it, and for people hacking out of SVN instead of using actual
>  > installations (for the developers of these projects), I'll write a
>  > little .pth file that makes this sane.
> 
> This seems quite reasonable to me, since stuff in tmlabs.* is expected to
> always rely on twisted.  That's a nice bootstrap detail to have taken care
> of so easily.
> 
> 
>   -Fred
> 

I agree with Fred's and Bob's comments. Radix has thought of a simple,
elegant solution here.

-- 
Ed Suominen
Registered Patent Agent 
Open Source Developer (Yes, both...)
Web Site: http://www.eepatents.com





From glyph at divmod.com  Tue Apr 20 16:57:20 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 20 Apr 2004 18:57:20 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
Message-ID: <1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>


On Apr 20, 2004, at 5:23 PM, Bob Ippolito wrote:

> An idea would be to have a "protocol matrix" document that is easy to 
> find from twistedmatrix.com (no more than 1 click away from the front 
> page, but it could almost be the front page) that is a table of wire 
> protocols <-> implementation names with perhaps a note about their 
> stability and completeness.

Bob, this is a _great_ idea.  Do you think you could do a first pass? :)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040420/a6873f79/attachment.sig>

From mesozoic at polynode.com  Tue Apr 20 16:57:59 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Tue, 20 Apr 2004 18:57:59 -0400
Subject: [Twisted-Python] Re: [Fwd: Re: Sub-project Naming]
In-Reply-To: <20040420215359.GA8410@thorne.id.au>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>  <20040420215359.GA8410@thorne.id.au>
Message-ID: <1082501879.25375.26.camel@hyla>

On Tue, 2004-04-20 at 17:53, Stephen Thorne wrote:
> +1 on tmlabs.<sane-name>

+1 for me on tmlabs.<whatever-its-called-now>

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040420/b7bcda12/attachment.sig>

From bob at redivi.com  Tue Apr 20 17:06:23 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 20 Apr 2004 19:06:23 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <57C38504-931F-11D8-90CB-000A95686CD8@redivi.com>


On Apr 20, 2004, at 6:57 PM, Glyph Lefkowitz wrote:

>
> On Apr 20, 2004, at 5:23 PM, Bob Ippolito wrote:
>
>> An idea would be to have a "protocol matrix" document that is easy to 
>> find from twistedmatrix.com (no more than 1 click away from the front 
>> page, but it could almost be the front page) that is a table of wire 
>> protocols <-> implementation names with perhaps a note about their 
>> stability and completeness.
>
> Bob, this is a _great_ idea.  Do you think you could do a first pass? 
> :)

No ;)

-bob




From dialtone at aruba.it  Tue Apr 20 17:19:30 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Wed, 21 Apr 2004 01:19:30 +0200
Subject: [Twisted-Python] Re: [Fwd: Re: Sub-project Naming]
In-Reply-To: <1082501879.25375.26.camel@hyla>
References: <40858262.6020102@twistedmatrix.com>	<20040420164246.12a4044e@dunce>
	<20040420215359.GA8410@thorne.id.au>
	<1082501879.25375.26.camel@hyla>
Message-ID: <4085B002.6080904@aruba.it>

Alex Levy wrote:

>+1 for me on tmlabs.<whatever-its-called-now>
>  
>
+1  on this. Keep the same names.

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
Blog: http://vvolonghi.blogspot.com
Home Page: http://xoomer.virgilio.it/dialtone/





From jasper at peak.org  Tue Apr 20 17:20:32 2004
From: jasper at peak.org (Jasper Phillips)
Date: Tue, 20 Apr 2004 16:20:32 -0700 (PDT)
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
Message-ID: <Pine.LNX.4.53.0404201609250.18416@a.shell.peak.org>


I've been passing around instances of pb.Copyable classes for some time,
registering them via pb.setCopierForClassTree()...  However, this doesn't
allow me to pass the classes themselves.

I dug around in jelly and found jelly.globalSecurity.allowInstancesOf(),
which seems to do what I want, but makes me nervious as it's pretty
buried...

Passing classes seems like a reasonable thing to do, but now I wonder if
there is some reason that jelly doesn't allow it (except via a buried method
call)?  Or is this just an accidental misfeature?

-Jasper




From foom at fuhm.net  Tue Apr 20 17:22:12 2004
From: foom at fuhm.net (James Y Knight)
Date: Tue, 20 Apr 2004 19:22:12 -0400
Subject: [Twisted-Python] Library Versioning
Message-ID: <8DC2193C-9321-11D8-B05B-000A95A50FB2@fuhm.net>

Yeah, everyone's probably going to get mad at me for bringing 
versioning up again, but here goes.

I'll structure the first bit as an argument between me and some 
argumentative type who is unconvinced.

=========
Me: I want to be able to have two apps installed that use different, 
incompatible revisions of twisted or twisted subprojects.

Other: You can just install multiple versions of Twisted, in different 
directories, and set your PYTHONPATH differently for the different 
apps. And this works *right now*.

Me: Yes, that is true. But I want a solution to work for e.g. 
distributed debian packages. If twisted core makes an incompatible API 
change and becomes major revision 2, I want to be able to install 
applications that depend on v1 and applications that depend on v2 at 
the same time. I want to be able to apt-get install AppA which uses on 
libtwisted-core-1, and AppB which uses libtwisted-core-2 and have them 
both work.

Other: Okay, so call the newer API twisted_2 and the old one twisted_1 
(or just twisted). What's the problem?

Me: A few problems. First problem is you have to litter the entire 
codebase of an application with the version numbers. Every time you 
import the module you have to add the revision. When you want update 
your app to use 2.0, you need to change every single file to use 
twisted_2, even if they otherwise needed no changes. What I really want 
to do is put the required version in *ONE* place in the app. Perhaps in 
its __init__.py, or (if it's an app), perhaps in its executable script 
file.

Other: No, you *DON'T* want that, you really do want to specify the 
version in every import because you want to be able to import both 
versions in one "app".

Me: But it is unlikely that two revisions that don't know about 
eachother will both work in one app, so while it may look like I can 
import twisted_1 and twisted_2, mixing them will likely cause my app to 
blow up.

Other: Right, which is why the new version supplies the old interface 
as well. So the Twisted 2.0 library can provide both twisted_2 *AND* 
twisted_1 reimplemented in terms of twisted_2. And then you *can* use 
both in one app and everything will be happy.

Me: Yes, that is possible. If you do that, you're not breaking API 
compatibility, and thus the new version isn't actually a major revision 
at all. I do concede, it is _always_ better to not break API 
compatibility if you can avoid it. But I only know of one major 
opensource library that is making a guarantee to never release a new 
major version: glibc. Most projects do not have unlimited programmer 
time, and keeping backwards compatibility forever can take a lot of 
time and testing. Also note the "again" there.

Me: I think that having every API version supported by one library 
version is a very different thing than just being able to install 
multiple distinct versions of the library. Even if the goal is to 
support every API revision for eternity, it's probably not always 
possible, and at that point, you would want multiple library versions 
installed simultaneously.



=========

Thus, I propose the following magic (I'll have you take for granted 
that might work, for the moment):

This explicitly *DOES NOT* attempt to solve the multiple APIs supported 
by one installed library version issue. That is a separate issue.

- "import twisted; twisted.setversion(xxx)" loads version xxx of the 
twisted library. If another version has already been loaded, or if the 
specified version isn't available, raise an exception.
- "import twisted" uses the already loaded version if one is loaded, or 
else looks for the latest installed version and loads that if none have 
been loaded.

After that, you can use twisted.whatever normally. The setversion only 
needs to be done once per app/library e.g. in the top level 
__init__.py. It can be done in more places if you want.

This has the following desirable characteristics to me:
1) Simple case for beginners -- they don't have to do anything about 
versioning at all. Just import twisted normally and they get the latest 
version they have installed (which may very well also be the only 
version they have installed).
2) Yet, still easy to add the version requirement to an app that didn't 
have it initially. That you make sure to call setversion only really 
matters for packaged or widely distributed apps/libs. So if you're 
package an app that didn't have a setversion call initially, add it -- 
a one line patch.
3) Allows distro packaging to work sensibly. Incompatible revisions can 
be installed side-by-side and apps that use the old one can continue 
working just fine.
4) Doesn't require possibly unfulfillable compatibility promises from 
developers going forward.


This kind of versioning is somewhat similar to that of Python itself:
- You have a python app, and you can specify the version required on 
the first line of the main program (#!/usr/bin/python2.3), or else not 
(#!/usr/bin/python).
- Multiple versions are simultaneously installable.
- New versions have some compatibility, but don't promise perfect 
compatibility. Thus, sometimes you don't need to do anything to make 
your app work with the new version. But, if you do, there's likely only 
a few things you need to change, not every file.
- If the new version of python implements a compatibility API this is a 
separate issue from the python version: to get the old API you do 
nothing, and to get the new API you do: from __future__ import 
whatever.

James

PS: (The magic above does seem to be implementable, see PMW, Python 
Mega Widgets.)




From george at visp.com.au  Tue Apr 20 17:53:43 2004
From: george at visp.com.au (George Patterson)
Date: Wed, 21 Apr 2004 09:23:43 +0930
Subject: [Twisted-Python] Re: [Fwd: Re: Sub-project Naming]
In-Reply-To: <4085B002.6080904@aruba.it>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<20040420215359.GA8410@thorne.id.au>
	<1082501879.25375.26.camel@hyla> <4085B002.6080904@aruba.it>
Message-ID: <20040421092343.3970780f@beast.spyderweb.com.au>

On Wed, 21 Apr 2004 01:19:30 +0200
Valentino Volonghi aka Dialtone <dialtone at aruba.it> wrote:

> Alex Levy wrote:
> 
> >+1 for me on tmlabs.<whatever-its-called-now>
> >  
> >
> +1  on this. Keep the same names.
> 
+1 here. It makes it easier when discussing technology at project meetings if you are not required to refer to some open source technology as timmytops, lowdown or something else that is arguably equally flippant.

however I am happy for cutesy names to be used for the project releases eg Linux kernel releases.

George Patterson







From cce at clarkevans.com  Tue Apr 20 18:00:28 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 20 Apr 2004 20:00:28 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <57C38504-931F-11D8-90CB-000A95686CD8@redivi.com>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
	<57C38504-931F-11D8-90CB-000A95686CD8@redivi.com>
Message-ID: <20040421000028.GB53462@prometheusresearch.com>

This idea resolves my primary problem with the sea of names that
has emerged since I last hibernated.  ;) 

Clark

On Tue, Apr 20, 2004 at 07:06:23PM -0400, Bob Ippolito wrote:
| On Apr 20, 2004, at 6:57 PM, Glyph Lefkowitz wrote:
| >On Apr 20, 2004, at 5:23 PM, Bob Ippolito wrote:
| >>An idea would be to have a "protocol matrix" document that is easy to 
| >>find from twistedmatrix.com (no more than 1 click away from the front 
| >>page, but it could almost be the front page) that is a table of wire 
| >>protocols <-> implementation names with perhaps a note about their 
| >>stability and completeness.
| >Bob, this is a _great_ idea.  Do you think you could do a first pass? 
| No ;)



From golux at comcast.net  Tue Apr 20 18:01:40 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Tue, 20 Apr 2004 20:01:40 -0400
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
In-Reply-To: <07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
References: <40858262.6020102@twistedmatrix.com>	<20040420164246.12a4044e@dunce>	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
Message-ID: <4085B9E4.6030001@comcast.net>

Bob Ippolito wrote:

> So because there are good reasons either way, I say we just stick with 
> the cute names -- but maybe try a little harder to market them to new 
> users.  An idea would be to have a "protocol matrix" document that is 
> easy to find from twistedmatrix.com (no more than 1 click away from the 
> front page, but it could almost be the front page) that is a table of 
> wire protocols <-> implementation names with perhaps a note about their 
> stability and completeness.

+1 on that -- excellent idea.



From z3p at twistedmatrix.com  Tue Apr 20 18:06:26 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Tue, 20 Apr 2004 20:06:26 -0400
Subject: [Twisted-Python] Re: [Fwd: Re: Sub-project Naming]
In-Reply-To: <1082501879.25375.26.camel@hyla>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>  <20040420215359.GA8410@thorne.id.au>
	<1082501879.25375.26.camel@hyla>
Message-ID: <1082505951.21900.7.camel@petra>

On Tue, 2004-04-20 at 18:57, Alex Levy wrote:
> On Tue, 2004-04-20 at 17:53, Stephen Thorne wrote:
> > +1 on tmlabs.<sane-name>
> 
> +1 for me on tmlabs.<whatever-its-called-now>

+1 on tmlabs.<same-names-i-like-calling-it-conch>

-p
-- 
      Paul Swartz
(o_   pswartz at hampshire dot edu
//\   Box 1286, x5248, AIM: Z3Penguin
V_/_  GPG Key: http://stout.hampshire.edu/~pks03/public.key
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040420/f1695173/attachment.sig>

From andrew-twisted at puzzling.org  Tue Apr 20 18:12:28 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 21 Apr 2004 10:12:28 +1000
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <Pine.LNX.4.53.0404201609250.18416@a.shell.peak.org>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
	<Pine.LNX.4.53.0404201609250.18416@a.shell.peak.org>
Message-ID: <20040421001228.GA28850@frobozz>

On Tue, Apr 20, 2004 at 04:20:32PM -0700, Jasper Phillips wrote:
> 
> I've been passing around instances of pb.Copyable classes for some time,
> registering them via pb.setCopierForClassTree()...  However, this doesn't
> allow me to pass the classes themselves.
> 
> I dug around in jelly and found jelly.globalSecurity.allowInstancesOf(),
> which seems to do what I want, but makes me nervious as it's pretty
> buried...
> 
> Passing classes seems like a reasonable thing to do, but now I wonder if
> there is some reason that jelly doesn't allow it (except via a buried method
> call)?  Or is this just an accidental misfeature?

Why not just pass the name of the class, and unserialise that as
appropriate?

I'm not a PB expert (or even close), but I always lean towards passing data
rather than code (or code-like things like classes) over remote method calls
when I can :)

-Andrew.




From jasper at peak.org  Tue Apr 20 18:48:00 2004
From: jasper at peak.org (Jasper Phillips)
Date: Tue, 20 Apr 2004 17:48:00 -0700 (PDT)
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <20040421001228.GA28850@frobozz>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
	<Pine.LNX.4.53.0404201609250.18416@a.shell.peak.org>
	<20040421001228.GA28850@frobozz>
Message-ID: <Pine.LNX.4.53.0404201725001.24013@a.shell.peak.org>


On Wed, 21 Apr 2004, Andrew Bennetts wrote:

> On Tue, Apr 20, 2004 at 04:20:32PM -0700, Jasper Phillips wrote:
> > 
> > I've been passing around instances of pb.Copyable classes for some time,
> > registering them via pb.setCopierForClassTree()...  However, this doesn't
> > allow me to pass the classes themselves.
> > 
> > I dug around in jelly and found jelly.globalSecurity.allowInstancesOf(),
> > which seems to do what I want, but makes me nervious as it's pretty
> > buried...
> > 
> > Passing classes seems like a reasonable thing to do, but now I wonder if
> > there is some reason that jelly doesn't allow it (except via a buried
> > method call)?  Or is this just an accidental misfeature?
> 
> Why not just pass the name of the class, and unserialise that as
> appropriate?
> 
> I'm not a PB expert (or even close), but I always lean towards passing data
> rather than code (or code-like things like classes) over remote method calls
> when I can :)

That's certainly feasible, but then I have an extra unserialize step
cluttering my code as the classes passed have attributes I want to access.
In general I'm passing game state which exists naturally as code, and while
I could always serialize and unserialize it, why bother if I don't have to?

Plus, isn't unserializing classes based upon their name exactly what jelly
does?

On the other hand it's debateable whether the things I'm passing _should_ be
classes at all (they represent a type of terrain, with statically accessible
fields describing their game effects).  However, the quality of my code is
really a seperate issue.

-Jasper




From exarkun at divmod.com  Tue Apr 20 18:52:50 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 21 Apr 2004 00:52:50 GMT
Subject: [Fwd: Re: [Twisted-Python] Sub-project Naming]
Message-ID: <20040421005250.9235.1857185041.divmod.quotient.3@ohm>

On Tue, 20 Apr 2004 17:23:56 -0400, Bob Ippolito <bob at redivi.com> wrote:
>
> [snip]
>
> 
> So because there are good reasons either way, I say we just stick with 
> the cute names -- but maybe try a little harder to market them to new 
> users.  An idea would be to have a "protocol matrix" document that is 
> easy to find from twistedmatrix.com (no more than 1 click away from the 
> front page, but it could almost be the front page) that is a table of 
> wire protocols <-> implementation names with perhaps a note about their 
> stability and completeness.
> 

  As a first pass:

 |Wire Protocol    |Impl mod(s)    |Framework mod(s)  Completeness (IMHO, 1..10)

  dict            t/p/dict.py        --               2
  dns             t/p/dns.py         t/names/         4 (pending rewrite)
  finger          t/p/finger.py      --               8
  ftp             t/p/ftp.py         --               5
  http            t/p/http.py        t/web/           7 (pending rewrite)
  ident           t/p/ident.py       --               10
  imap4           t/p/imap4.py       --               8
  irc             t/p/irc.py         t/im/, t/words/  6
  jabber          t/p/jabber/        --               not a clue
  msn             t/p/msn.py         --               not a clue
  nntp            t/p/nntp.py        t/news/          4 (pending rewrite)
  oscar           t/p/oscar.py       --               not a clue
  pop3            t/p/pop3.py        t/mail/          8 (pending Q changes)
  sip             t/p/sip.py         --               not a clue
  smtp            t/p/smtp.py        t/mail/          9
  socks v4        t/p/socks.py       --               not a clue
  xml             t/p/sux.py         --               not a clue
  telnet          t/p/telnet.py      --               4
  toc             t/p/toc.py         t/im/            not a clue

  echo,
  discard,
  chargen,
  qotd,
  who,
  daytime,
  time            t/p/wire.py        --               9

  Perspective 
    Broker        t/spread/banana.py,
                  t/spread/jelly.py,
                  t/spread/pb.py     t/spread/        8 (pending rewrite)

  ssh             t/conch/ssh/       t/conch/         9

  Btw, looking at the first two columns of this table, I think that Twisted does a kick-ass job of naming most of its modules in an understandable and approachable manner :)

  Jp



From exarkun at divmod.com  Tue Apr 20 19:06:06 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 21 Apr 2004 01:06:06 GMT
Subject: [Twisted-Python] Transporting pb.Copyable classes?
Message-ID: <20040421010606.9235.84782281.divmod.quotient.4@ohm>

On Tue, 20 Apr 2004 17:48:00 -0700 (PDT), Jasper Phillips <jasper at peak.org> wrote:
>
> On Wed, 21 Apr 2004, Andrew Bennetts wrote:
> 
> > On Tue, Apr 20, 2004 at 04:20:32PM -0700, Jasper Phillips wrote:
> > > 
> > > I've been passing around instances of pb.Copyable classes for some time,
> > > registering them via pb.setCopierForClassTree()...  However, this doesn't
> > > allow me to pass the classes themselves.
> > > 
> > > I dug around in jelly and found jelly.globalSecurity.allowInstancesOf(),
> > > which seems to do what I want, but makes me nervious as it's pretty
> > > buried...
> > > 
> > > Passing classes seems like a reasonable thing to do, but now I wonder if
> > > there is some reason that jelly doesn't allow it (except via a buried
> > > method call)?  Or is this just an accidental misfeature?
> > 
> > Why not just pass the name of the class, and unserialise that as
> > appropriate?
> > 
> > I'm not a PB expert (or even close), but I always lean towards passing data
> > rather than code (or code-like things like classes) over remote method calls
> > when I can :)
> 
> That's certainly feasible, but then I have an extra unserialize step
> cluttering my code as the classes passed have attributes I want to access.
> In general I'm passing game state which exists naturally as code, and while
> I could always serialize and unserialize it, why bother if I don't have to?
> 
> Plus, isn't unserializing classes based upon their name exactly what jelly
> does?
> 
> On the other hand it's debateable whether the things I'm passing _should_ be
> classes at all (they represent a type of terrain, with statically accessible
> fields describing their game effects).  However, the quality of my code is
> really a seperate issue.
> 

  Just to be sure I'm reading this correctly, you have something like...

    class Foo:
        bar = []

    Foo.bar.append(baz)
    someRemoteRef.callRemote('doStuff', Foo)

  where you want 'remote_doStuff' to receive a class object whose "bar" attribute is [baz] (or possibly [RemoteReference(baz)], or *something* containing baz)?  If not, disregard the rest of my post :)  Otherwise ...

  You're going to have difficulty using PB with this approach.  PB can serialize classes, but it does so in exactly the way Andrew described: it looks up their name and sends it, and the other side turns the name back into an object.  Any mutable class state you change on one side will *not* be reflected on the other side.

  I'd recommend moving your mutable state off these class objects and onto instances of some sort.  Otherwise, you will have to implement special jelliers/unjelliers for the class objects you want treated specially.

  Jp



From andrew-twisted at puzzling.org  Tue Apr 20 19:39:48 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 21 Apr 2004 11:39:48 +1000
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <Pine.LNX.4.53.0404201725001.24013@a.shell.peak.org>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
	<Pine.LNX.4.53.0404201609250.18416@a.shell.peak.org>
	<20040421001228.GA28850@frobozz>
	<Pine.LNX.4.53.0404201725001.24013@a.shell.peak.org>
Message-ID: <20040421013948.GD28850@frobozz>

On Tue, Apr 20, 2004 at 05:48:00PM -0700, Jasper Phillips wrote:
> 
> On Wed, 21 Apr 2004, Andrew Bennetts wrote:
> > 
> > I'm not a PB expert (or even close), but I always lean towards passing data
> > rather than code (or code-like things like classes) over remote method calls
> > when I can :)
> 
> That's certainly feasible, but then I have an extra unserialize step
> cluttering my code as the classes passed have attributes I want to access.
> In general I'm passing game state which exists naturally as code, and while
> I could always serialize and unserialize it, why bother if I don't have to?

That's odd, I would've expected game state to exist naturally as *data*, not
code. :)

Perhaps you should elaborate more on how you're representing things?

-Andrew.




From jasper at peak.org  Tue Apr 20 19:44:40 2004
From: jasper at peak.org (Jasper Phillips)
Date: Tue, 20 Apr 2004 18:44:40 -0700 (PDT)
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <20040421010606.9235.84782281.divmod.quotient.4@ohm>
References: <20040421010606.9235.84782281.divmod.quotient.4@ohm>
Message-ID: <Pine.LNX.4.53.0404201829120.28534@a.shell.peak.org>


On Wed, 21 Apr 2004 exarkun at divmod.com wrote:

> On Tue, 20 Apr 2004 17:48:00 -0700 (PDT), Jasper Phillips <jasper at peak.org> wrote:
> >
> > On Wed, 21 Apr 2004, Andrew Bennetts wrote:
> > 
> > > On Tue, Apr 20, 2004 at 04:20:32PM -0700, Jasper Phillips wrote:
> > > > 
> > > > I've been passing around instances of pb.Copyable classes for some
> > > > time, registering them via pb.setCopierForClassTree()...  However,
> > > > this doesn't allow me to pass the classes themselves.
> > > > 
> > > > I dug around in jelly and found
> > > > jelly.globalSecurity.allowInstancesOf(), which seems to do what I
> > > > want, but makes me nervious as it's pretty buried...
> > > > 
> > > > Passing classes seems like a reasonable thing to do, but now I
> > > > wonder if there is some reason that jelly doesn't allow it (except
> > > > via a buried method call)?  Or is this just an accidental
> > > > misfeature?
> > > 
> > > Why not just pass the name of the class, and unserialise that as
> > > appropriate?
> > > 
> > > I'm not a PB expert (or even close), but I always lean towards passing
> > > data rather than code (or code-like things like classes) over remote
> > > method calls when I can :)
> > 
> > That's certainly feasible, but then I have an extra unserialize step
> > cluttering my code as the classes passed have attributes I want to access.
> > In general I'm passing game state which exists naturally as code, and while
> > I could always serialize and unserialize it, why bother if I don't have to?
> > 
> > Plus, isn't unserializing classes based upon their name exactly what jelly
> > does?
> > 
> > On the other hand it's debateable whether the things I'm passing
> > _should_ be classes at all (they represent a type of terrain, with
> > statically accessible fields describing their game effects).  However,
> > the quality of my code is really a seperate issue.
> > 
> 
>   Just to be sure I'm reading this correctly, you have something like...
> 
>     class Foo:
>         bar = []
> 
>     Foo.bar.append(baz)
>     someRemoteRef.callRemote('doStuff', Foo)
> 
>   where you want 'remote_doStuff' to receive a class object whose "bar"
>   attribute is [baz] (or possibly [RemoteReference(baz)], or *something*
>   containing baz)?  If not, disregard the rest of my post :)  Otherwise
>   ...

Oh no, no mutable state!  Purely static data and static methods.
What I have coils down to something like this:

class Terrain( pb.Copyable, pb.RemoteCopy ):
    def moveCost( cls, unit ):
        return cls.cost
    moveCost = classmethod( moveCost )

class Mountains( Terrain ):
    cost = 6


A bunch of hexes then have their .terrain = Mountains (etc.)  I could easily
change this to instantiation the various Terrains, but in my mind that
implies that an instance's state could differ.  I'm beginning to think
the distinction is more trouble than it's worth however, and potentially
confusing.

>   You're going to have difficulty using PB with this approach.  PB can
>   serialize classes, but it does so in exactly the way Andrew described:
>   it looks up their name and sends it, and the other side turns the name
>   back into an object.  Any mutable class state you change on one side
>   will *not* be reflected on the other side.

This is exactly what I want for these classes.

>   I'd recommend moving your mutable state off these class objects and onto
>   instances of some sort.  Otherwise, you will have to implement special
>   jelliers/unjelliers for the class objects you want treated specially.

Sorry for the confusion!  I really didn't mean to bring my code into the
discussion, I just want to know whether passing class objects is supposed to
work, because it doesn't for me (i.e. I get Insecure Jelly exceptions)
without tweaking inner bits of Twisted.

-Jasper




From jasper at peak.org  Tue Apr 20 20:09:32 2004
From: jasper at peak.org (Jasper Phillips)
Date: Tue, 20 Apr 2004 19:09:32 -0700 (PDT)
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <20040421013948.GD28850@frobozz>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>
	<40858FCF.6020704@twistedmatrix.com>
	<07D9A4A9-9311-11D8-90CB-000A95686CD8@redivi.com>
	<1403E918-931E-11D8-B6DF-000393C9700E@divmod.com>
	<Pine.LNX.4.53.0404201609250.18416@a.shell.peak.org>
	<20040421001228.GA28850@frobozz>
	<Pine.LNX.4.53.0404201725001.24013@a.shell.peak.org>
	<20040421013948.GD28850@frobozz>
Message-ID: <Pine.LNX.4.53.0404201853030.30226@a.shell.peak.org>


On Wed, 21 Apr 2004, Andrew Bennetts wrote:

> On Tue, Apr 20, 2004 at 05:48:00PM -0700, Jasper Phillips wrote:
> > 
> > That's certainly feasible, but then I have an extra unserialize step
> > cluttering my code as the classes passed have attributes I want to access.
> > In general I'm passing game state which exists naturally as code, and while
> > I could always serialize and unserialize it, why bother if I don't have to?
> 
> That's odd, I would've expected game state to exist naturally as *data*, not
> code. :)

I don't think the distinction between code and data is necesarrily so
clear...  Basically my point was that I wasn't interested in something like
XML RPC, and would rather treat remotely passed objects as if they were
local to the extent possible.

Using `Terrain.moveCost` instead of `unserialize("Terrain").moveCost` seems
good to me.

> Perhaps you should elaborate more on how you're representing things?

Ok.  I'm perfectly happy to get a critique of my design out of this if I
can! ;-)  I'll try to keep it concise.

I have a dictionary of hexes keyed by their grid location.

map.cells = {(1,1):hexCellInstance, ...}

Each of these cells has a .terrain, which is a reference to a Terrain
subclass.  These have static data and methods, for use by various game
algorithms, e.g. how far can unit Foo move through Mountains.

On each turn a (filtered) version of this state is passed to game clients,
so that they can view it, validate their orders against it, etc.


-Jasper

PS I'm off to watch a movie, so won't be able to respond further until
later tonight.



From ellers at ellerton.net  Thu Apr 15 06:58:41 2004
From: ellers at ellerton.net (Ellers)
Date: Thu, 15 Apr 2004 12:58:41 -0000
Subject: [Twisted-Python] twisted and interactive/command driven input
Message-ID: <20040415125845.32C6115C0C@mail03.powweb.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: </pipermail/twisted-python/attachments/20040415/5a19d8aa/attachment.ksh>

From y at tim.suzman.net  Tue Apr 20 17:11:34 2004
From: y at tim.suzman.net (Tim)
Date: Tue, 20 Apr 2004 19:11:34 -0400
Subject: [Twisted-Python] connection to AIM often unsuccessful using
	twisted's example AIM bot
Message-ID: <E1BG4Oo-00074h-F9@python.dns-nac-zone.com>

 

I am running the very simple example aimbot given by twisted. The code can
be found at http://twistedmatrix.com/documents/current/examples/aimbot.py

 

Sometimes when I run the script it connects successfully. The majority of
the time, however, it times out and I get this: 

 

C:\progra~1\Python23\lib\site-packages\twisted\internet\base.py:516:
Deprecation Warning: connectionFailed is deprecated. See new Client API 

 self.protocol.connectionFailed()

 

I usually get this message every time I try to connect, except for brief
periods of time (usually 10 minutes at most) during which I can connect
reliably.

 

Anyone know what's going on? Any way I can fix this problem? Thank you!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040420/ce714aa5/attachment.html>

From dreid at dreid.org  Tue Apr 20 20:35:32 2004
From: dreid at dreid.org (David Reid)
Date: Tue, 20 Apr 2004 19:35:32 -0700
Subject: [Twisted-Python] Re: [Fwd: Re: Sub-project Naming]
In-Reply-To: <1082505951.21900.7.camel@petra>
References: <40858262.6020102@twistedmatrix.com>
	<20040420164246.12a4044e@dunce>  <20040420215359.GA8410@thorne.id.au>
	<1082501879.25375.26.camel@hyla>  <1082505951.21900.7.camel@petra>
Message-ID: <1082514932.2806.9.camel@localhost>

On Tue, 2004-04-20 at 17:06, Paul Swartz wrote:
> On Tue, 2004-04-20 at 18:57, Alex Levy wrote:
> > On Tue, 2004-04-20 at 17:53, Stephen Thorne wrote:
> > > +1 on tmlabs.<sane-name>
> > 
> > +1 for me on tmlabs.<whatever-its-called-now>
> 
> +1 on tmlabs.<same-names-i-like-calling-it-conch>
> 
> -p

I'd be happy for a compromise of installing the new twisted.web (which I
like calling Unwound) as tmlabs.web.

But frankly, I find it a pain in the butt to have to refer to things by
python module name when discussing them.  In the past I've had to get
sidetracked by explaining twisted to people when trying to talk about
twisted.web.  If I had to explain tmlabs.web I'd have to explain that
tmlabs is a seperate name space for non twisted core subprojects THEN
explain what the heck twisted is.  

I think having a short simple, and indeed clever or catchy product name
is much easier.  I like the sound of jelly,banana,pb,lowdown,unwound
because if I have to explain what they are, they're atleast something
that people will remember, and indeed are google friendly.

Not to mention the fact that Open Source (not just Twisted) has a great
history of clever names, Apache is a-patchy webserver because it started
out as a bunch of patches, Linux was originally going to be called
Freenix by Linus, which might be descriptive as it is a Free Unix, but
not nearly as interesting.  I think the only real concern with choosing
names for twisted subprojects is not picking something that we'll be
forced to change every couple of months.

On another note Unwound seems to be free from any software product
naming conflicts, and I think it is very descriptive as a "rewrite of
twisted.web"

--David




From exarkun at divmod.com  Tue Apr 20 20:44:57 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 21 Apr 2004 02:44:57 GMT
Subject: [Twisted-Python] twisted and interactive/command driven input
Message-ID: <20040421024457.9235.1335740979.divmod.quotient.5@ohm>

On Thu, 15 Apr 2004 12:58:41 -0000, "Ellers" <ellers at ellerton.net> wrote:
>
> [snip]
> 
> I've got a basic interactive shell going on its own no probs, 
> and as mentioned I've got a separate basic twisted client going 
> too.
> 
> Can anyone point me at examples or tips on how to use twisted 
> for handling the socket comms and still allow interactivity 
> with the user?
> 

  An example of handling stdin input asynchronously is available here:

    http://svn.twistedmatrix.com/cvs/trunk/doc/examples/stdin.py?view=markup&rev=9701&root=Twisted

  It does not demonstrate how to combine handling stdin input and dealing with sockets, but since nothing special is required for that combination, it should get you going in the right direction.

  Jp



From anthony at interlink.com.au  Tue Apr 20 23:18:19 2004
From: anthony at interlink.com.au (Anthony Baxter)
Date: Wed, 21 Apr 2004 15:18:19 +1000
Subject: [Twisted-Python] http://www.smartpeer.com -- another twisted
	success story
Message-ID: <4086041B.2030808@interlink.com.au>

So Michael Marmor has released a Morphix derivative (a bootable
CD version of Linux) that just includes PythonDirector, making the
machine a TCP loadbalancer in a box. PythonDirector is of course
based on Twisted.

I think this is pretty cool, and could be good for the twisted
success stories page. See http://www.smartpeer.com/ for the software.

(ObDisclaimer: while I wrote PythonDirector, I've not had anything
to do with SmartPeer other than offering advice and encouraging
words)

Anthony
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From sam at SpinwardStars.com  Wed Apr 21 09:54:03 2004
From: sam at SpinwardStars.com (Samuel Reynolds)
Date: Wed, 21 Apr 2004 09:54:03 -0600
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <Pine.LNX.4.53.0404201829120.28534@a.shell.peak.org>
References: <20040421010606.9235.84782281.divmod.quotient.4@ohm>
	<Pine.LNX.4.53.0404201829120.28534@a.shell.peak.org>
Message-ID: <6.0.1.1.0.20040421094151.04425c80@pop.mindspring.com>

At 2004-04-20 06:44 PM -0700, you wrote:
>Oh no, no mutable state!  Purely static data and static methods.
>What I have coils down to something like this:
>
>class Terrain( pb.Copyable, pb.RemoteCopy ):
>     def moveCost( cls, unit ):
>         return cls.cost
>     moveCost = classmethod( moveCost )
>
>class Mountains( Terrain ):
>     cost = 6
>
>
>A bunch of hexes then have their .terrain = Mountains (etc.)  I could easily
>change this to instantiation the various Terrains, but in my mind that
>implies that an instance's state could differ.  I'm beginning to think
>the distinction is more trouble than it's worth however, and potentially
>confusing.
...and...
>I have a dictionary of hexes keyed by their grid location.
>
>map.cells = {(1,1):hexCellInstance, ...}
>
>Each of these cells has a .terrain, which is a reference to a Terrain
>subclass.  These have static data and methods, for use by various game
>algorithms, e.g. how far can unit Foo move through Mountains.
>
>On each turn a (filtered) version of this state is passed to game clients,
>so that they can view it, validate their orders against it, etc.

How about making Mountains, Plains, etc. Singletons?
Then, instead of assigning hexCellInstance.terrain=Mountain,
you assign hexCellInstance.terrain=Mountain() (note the
parentheses!). At that point, each cell.terrain is an object
reference instead of a class reference and (IIUC) should
remote-copy properly.

Caveat: I've not used pb; this is based on my *very* weak
understanding (misunderstanding?) of it. In particular,
I don't know how pb/copyable would interact with a singleton.
I would *expect* that the remote unserialization would
(eventually) invoke Mountains.__call__ and get a reference
to the corresponding singleton on the client side.

class Singleton(type):
     def __init__( cls, name, bases, classdict ):
         super( Singleton, cls ).__init__( name, bases, classdict )
         cls.instance = None
     def __call__( cls, *args, **kw ):
         if cls.instance is None:
             cls.instance = super( Singleton, cls ).__call__( *args, **kw )
         return cls.instance

class Mountains( Terrain ):
     __metaclass__ = Singleton
     cost = 6

- Sam


__________________________________________________________
Spinward Stars, LLC                        Samuel Reynolds
Software Consulting and Development           303-805-1446
http://SpinwardStars.com/            sam at SpinwardStars.com 





From jasper at peak.org  Wed Apr 21 10:57:47 2004
From: jasper at peak.org (Jasper Phillips)
Date: Wed, 21 Apr 2004 09:57:47 -0700 (PDT)
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <6.0.1.1.0.20040421094151.04425c80@pop.mindspring.com>
References: <20040421010606.9235.84782281.divmod.quotient.4@ohm>
	<Pine.LNX.4.53.0404201829120.28534@a.shell.peak.org>
	<6.0.1.1.0.20040421094151.04425c80@pop.mindspring.com>
Message-ID: <Pine.LNX.4.53.0404210934330.26825@a.shell.peak.org>


On Wed, 21 Apr 2004, Samuel Reynolds wrote:

> At 2004-04-20 06:44 PM -0700, you wrote:
[snip: my description of static classes used for Terrain]

> How about making Mountains, Plains, etc. Singletons?
> Then, instead of assigning hexCellInstance.terrain=Mountain,
> you assign hexCellInstance.terrain=Mountain() (note the
> parentheses!). At that point, each cell.terrain is an object
> reference instead of a class reference and (IIUC) should
> remote-copy properly.

I have considered Singletons, but don't see what advantage they provide.
They basically do the same thing as static classes in this case, except with
more code and IMHO less transparency.  Perhaps if these Terrain classes had
some mutable state, but they don't.

> Caveat: I've not used pb; this is based on my *very* weak
> understanding (misunderstanding?) of it. In particular,
> I don't know how pb/copyable would interact with a singleton.
> I would *expect* that the remote unserialization would
> (eventually) invoke Mountains.__call__ and get a reference
> to the corresponding singleton on the client side.

I suspect singletons might have some trouble with jelly, unless it has some
wacky special case for realizing a passed singleton instance should be
equivalent to the corresponding remote singleton instance, which may or may
not already exist.


All this seems to me like frantic contortion to avoid a bug in jelly.
Shouldn't it be able to translate passed class objects into the remote
version, provided they have been properly registered?  Is there some reason
why not that I am missing?

I appreciate the code suggestions, but basicaly I just want to know whether
this is expected behavior, or whether I should post a demonstrative test
case and suggest a fix.

-Jasper




From exarkun at divmod.com  Wed Apr 21 12:53:37 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 21 Apr 2004 18:53:37 GMT
Subject: [Twisted-Python] Transporting pb.Copyable classes?
Message-ID: <20040421185337.9235.1895087205.divmod.quotient.13@ohm>

On Wed, 21 Apr 2004 09:57:47 -0700 (PDT), Jasper Phillips <jasper at peak.org> wrote:
>
> [snip]
> 
> 
> All this seems to me like frantic contortion to avoid a bug in jelly.
> Shouldn't it be able to translate passed class objects into the remote
> version, provided they have been properly registered?  Is there some reason
> why not that I am missing?

  Indeed.  While I would do this differently, jelly should certainly be able to handle your approach.  Let's get into specifics, shall we?  Here's some code:

>>> from twisted.spread import jelly
>>> class Foo: pass
... 
>>> f = Foo()
>>> f.bar = Foo
>>> jelly.jelly(f)
['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]

  So far, so good.

>>> from twisted.spread import pb     
>>> class Foo(pb.Copyable):
...     pass
... 
>>> f = Foo()
>>> f.bar = Foo
>>> jelly.jelly(f)
['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]

  Hmm, that works too.  I expected it not to, actually.  I suppose something you're doing with globalSecurity or setCopierForClassTree() may be mucking things up.

> 
> I appreciate the code suggestions, but basicaly I just want to know whether
> this is expected behavior, or whether I should post a demonstrative test
> case and suggest a fix.

  Posting a demonstrative test case would be excellent :)  I suspect there is no bug in jelly, just a disagreement in expectations which can easily be resolved once there is a concrete example to talk about.

  Jp



From jasper at peak.org  Wed Apr 21 15:03:47 2004
From: jasper at peak.org (Jasper Phillips)
Date: Wed, 21 Apr 2004 14:03:47 -0700 (PDT)
Subject: [Twisted-Python] Transporting pb.Copyable classes?
In-Reply-To: <20040421185337.9235.1895087205.divmod.quotient.13@ohm>
References: <20040421185337.9235.1895087205.divmod.quotient.13@ohm>
Message-ID: <Pine.LNX.4.53.0404211301540.9678@a.shell.peak.org>


On Wed, 21 Apr 2004 exarkun at divmod.com wrote:

> On Wed, 21 Apr 2004 09:57:47 -0700 (PDT), Jasper Phillips <jasper at peak.org> wrote:
> > 
> > All this seems to me like frantic contortion to avoid a bug in jelly.
> > Shouldn't it be able to translate passed class objects into the remote
> > version, provided they have been properly registered?  Is there some reason
> > why not that I am missing?
> 
>   Indeed.  While I would do this differently, jelly should certainly be
>   able to handle your approach.  Let's get into specifics, shall we?
>   Here's some code:

I may end up doing it differently, but one thing at a time!  I'm in the
midst of upgrading to new cred, and already have plenty of scope with which
to hang myself. ;-)

I'm not particularily attached to the static class approach, it just
happened to be what came to mind when prototyping.  I'm definitely curious
now what you would do...  I've been programming in a vacuum for quite a
while. :-(


> >>> from twisted.spread import jelly
> >>> class Foo: pass
> ... 
> >>> f = Foo()
> >>> f.bar = Foo
> >>> jelly.jelly(f)
> ['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]
> 
>   So far, so good.
> 
> >>> from twisted.spread import pb     
> >>> class Foo(pb.Copyable):
> ...     pass
> ... 
> >>> f = Foo()
> >>> f.bar = Foo
> >>> jelly.jelly(f)
> ['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]
> 
>   Hmm, that works too.  I expected it not to, actually.  I suppose
>   something you're doing with globalSecurity or setCopierForClassTree()
>   may be mucking things up.

This test case doesn't seem quite right...  Why doesn't it fail since Foo
hasn't been registered?  Hmmm, looks like jelly()'s taster arg defaults to
DummySecurityOptions()...

What about registering Foo, and then calling with jelly.globalSecurity?:
---- Code ----
from twisted.spread import jelly, pb

class Foo( pb.Copyable ):  pass
jelly.setUnjellyableForClass( Foo, Foo )
#jelly.globalSecurity.allowInstancesOf( Foo )  # uncomment to fix

if __name__ == '__main__':
    f = Foo()
    f.bar = Foo
    print jelly.jelly( f, taster=jelly.globalSecurity )

---- End Code ----

This gives the Insecure Jelly exception I'm seeing, from jelly.py:482...
However, comment out `f.bar = Foo` or uncomment allowInstancesOf() and it
works.

Oh, and I'm using twisted 1.2 and python 2.3.3.


[snip]
>   Posting a demonstrative test case would be excellent :)  I suspect there
>   is no bug in jelly, just a disagreement in expectations which can easily
>   be resolved once there is a concrete example to talk about.

Is this a decent example?  As for a fix, it looks like the solution is there
in SecurityOptions.allowsInstancesOf(), but that it's just not exposed.

-Jasper




From dreid at dreid.org  Thu Apr 22 04:56:47 2004
From: dreid at dreid.org (David Reid)
Date: Thu, 22 Apr 2004 03:56:47 -0700
Subject: [Twisted-Python] Unwinding the Twisted Web (a progress report)
Message-ID: <1082631407.28634.20.camel@localhost>

I had been trying to straighten out the model for the split since my
first post to twisted-web regarding it.  Now that radix, and exarkun
have split twisted.news out of the core codebase as "lowdown". Since
then I have begun work on my own source tree of twisted.web, the module
has been split as "unwound" which is my proposed name as mentioned in
the numerous naming threads (to be installed as tmlabs.unwound if
desired.)  

So far I've done the following:

 * duplicate the source tree renaming the toplevel module and changing
the imports accordingly.

 * run the tests (everything passes just as it does in twisted.web)

 * removed modules that were deprecated BY woven, and added a
Deprecation Warning message to unwound.woven.__init__

If there are no complaints about this I'm asking someone (like radix) to
help me complete the rest of the steps necessary to make this the
official split so i can start working on changes and enhancements.  The
things I can't do on my own, atleast not as part of twistedmatrix.com is
setup the SVN repo and the project page.  

Also it appears if radix and exarkun did not solve (or atleast did not
implmenet a solution for) the tap naming conflicts.  I.E. if lowdown or
tmlabs.lowdown is going to use mktap news or mktap lowdown instead.

Other than that, Unwound is currently a useable tree of twisted.web At
revision 10601.

(I'm open to changing the name to either tmlabs.web or some cute/catchy
name other than 'unwound', but ultimately I think that is a policy
decision that falls on the core twisted devs.)

--
David Reid
Claim to fame: "I actually wrote code that used twisted.web.webwidgets!"




From itamar at itamarst.org  Thu Apr 22 09:21:46 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 22 Apr 2004 11:21:46 -0400
Subject: [Twisted-Python] Unwinding the Twisted Web (a progress report)
In-Reply-To: <1082631407.28634.20.camel@localhost>
References: <1082631407.28634.20.camel@localhost>
Message-ID: <1082647306.27964.10.camel@sheriffpony>

On Thu, 2004-04-22 at 06:56, David Reid wrote:

> So far I've done the following:
> 
>  * duplicate the source tree renaming the toplevel module and changing
> the imports accordingly.

>From what I've gathered from talking to Donovan and James this is *not*
how the new twisted.web version is going to be developed. Donovan said
he'd write out a roadmap for the mailing list after talking it over.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From jn at who.net  Thu Apr 22 09:46:30 2004
From: jn at who.net (john nielsen)
Date: Thu, 22 Apr 2004 10:46:30 -0500
Subject: [Twisted-Python] how to have a server talk to a server
Message-ID: <20040422154630.2989779004F@ws1-14.us4.outblaze.com>

I see some examples where you have  a client call pb.PBClientFactory to talk to a server which called pb.PBServerFactory.

What if you have 2 servers (both running pb.PBServerFactory) that accept clients and also want to talk to each other? Would the first server  also make a pb.PBClientFactory to talk to the second server (seems like you would have to be careful to not leak descriptors since the reactor would never close).

There's probably a standard way to do it, that I just missed.

Thanks for any help,

john

-- 
___________________________________________________________
Sign-up for Ads Free at Mail.com
http://promo.mail.com/adsfreejump.htm




From teratorn at world-net.net  Thu Apr 22 11:38:55 2004
From: teratorn at world-net.net (Eric Mangold)
Date: Thu, 22 Apr 2004 11:38:55 -0600
Subject: [Twisted-Python] Re: how to have a server talk to a server
In-Reply-To: <20040422154630.2989779004F@ws1-14.us4.outblaze.com>
References: <20040422154630.2989779004F@ws1-14.us4.outblaze.com>
Message-ID: <opr6vcm5nfi4eeqj@mail.oaktech.net>

On Thu, 22 Apr 2004 10:46:30 -0500, john nielsen <jn at who.net> wrote:

> I see some examples where you have  a client call pb.PBClientFactory to 
> talk to a server which called pb.PBServerFactory.
>
> What if you have 2 servers (both running pb.PBServerFactory) that accept 
> clients and also want to talk to each other? Would the first server  
> also make a pb.PBClientFactory to talk to the second server

Yes.

> (seems like you would have to be careful to not leak descriptors since 
> the reactor would never close).

Not sure what you mean by that.

	-Eric





From itamar at itamarst.org  Thu Apr 22 17:04:47 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 22 Apr 2004 19:04:47 -0400
Subject: [Twisted-Python] IFoo(x, persist=1)
Message-ID: <1082675086.27964.59.camel@sheriffpony>

I know this is used a lot (the weakref persistence stuff). Should it be
option of adaptation or perhaps of adapter registration? Trying to see
how to fit this in to zope3's, which doesn't do this, and it'd be nice
to have it as part of their core code rather than ours.
 
-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From radix at twistedmatrix.com  Thu Apr 22 17:35:08 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 22 Apr 2004 19:35:08 -0400
Subject: [Twisted-Python] IFoo(x, persist=1)
In-Reply-To: <1082675086.27964.59.camel@sheriffpony>
References: <1082675086.27964.59.camel@sheriffpony>
Message-ID: <408856AC.8020309@twistedmatrix.com>

Itamar Shtull-Trauring wrote:
> I know this is used a lot (the weakref persistence stuff). Should it be
> option of adaptation or perhaps of adapter registration? Trying to see
> how to fit this in to zope3's, which doesn't do this, and it'd be nice
> to have it as part of their core code rather than ours.

It seems a lot saner to make it a part of registration than adaptation. 
The 'persist' argument to __call__ never made sense to me. Think about a 
what the objects involved "know": if an object knows that it wants an 
adapter and it wants it to persist, it can just keep a reference to the 
adapter it gets back.

OTOH, we don't currently support marking an adapter persistent at 
registration time, do we? I say don't add features that don't have clear 
use cases yet.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040422/cc416654/attachment.sig>

From foom at fuhm.net  Thu Apr 22 17:39:10 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu, 22 Apr 2004 19:39:10 -0400
Subject: [Twisted-Python] IFoo(x, persist=1)
In-Reply-To: <1082675086.27964.59.camel@sheriffpony>
References: <1082675086.27964.59.camel@sheriffpony>
Message-ID: <4155CCF9-94B6-11D8-8D82-000A95A50FB2@fuhm.net>

On Apr 22, 2004, at 7:04 PM, Itamar Shtull-Trauring wrote:
> I know this is used a lot (the weakref persistence stuff). Should it be
> option of adaptation or perhaps of adapter registration? Trying to see
> how to fit this in to zope3's, which doesn't do this, and it'd be nice
> to have it as part of their core code rather than ours.

I'm not sure about 'used a lot', looks more like "used a bit". In any 
case, I don't know much about Zope3 interfaces but in PyProtocols you 
could implement a 'persist' functionality by registering a null 
adaptation from the 'original' instance to the 'persisted' adapter 
instance. And that could be controlled by the adapter itself (its 
__init__ could register the new adaptation on 'original') which makes 
more sense) or the caller.

That of course doesn't act exactly the same as it doesn't have the 
weirdo persist=None vs persist=False behavior. Does anyone actually 
depend on that? The current persist argument API is completely bogus so 
I don't think it's a good idea to hack up Zope3's code just for 
backwards compatibility with our broken API.

James




From itamar at itamarst.org  Thu Apr 22 17:42:50 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 22 Apr 2004 19:42:50 -0400
Subject: [Twisted-Python] IFoo(x, persist=1)
In-Reply-To: <4155CCF9-94B6-11D8-8D82-000A95A50FB2@fuhm.net>
References: <1082675086.27964.59.camel@sheriffpony>
	<4155CCF9-94B6-11D8-8D82-000A95A50FB2@fuhm.net>
Message-ID: <1082677369.27964.62.camel@sheriffpony>

On Thu, 2004-04-22 at 19:39, James Y Knight wrote:

> I'm not sure about 'used a lot', looks more like "used a bit".

OK. Can anyone describe or point at some of these use cases? 

> That of course doesn't act exactly the same as it doesn't have the 
> weirdo persist=None vs persist=False behavior. Does anyone actually 
> depend on that? The current persist argument API is completely bogus so 
> I don't think it's a good idea to hack up Zope3's code just for 
> backwards compatibility with our broken API.

Oh, I wouldn't do *that*. But weakref persistence of adapters is a
useful idea, and I'm going to have to have a backwards compat layer
anyway. Question is what parts of it *are* useful and if so what API
they should have.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From dizzyd at jabber.org  Thu Apr 22 21:14:57 2004
From: dizzyd at jabber.org (Dave Smith)
Date: Thu, 22 Apr 2004 21:14:57 -0600
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082488803.2913.163.camel@debian>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<1082488803.2913.163.camel@debian>
Message-ID: <660B7B08-94D4-11D8-967C-00039386381C@jabber.org>


On Apr 20, 2004, at 1:20 PM, Matt Goodall wrote:

> I recently used xish.xpath instead of libxml's xpath in a Nevow example
> to avoid introducing the external dependency. I knew xish would be
> available to anyone interested in the example ... or so I thought ;-).
> The xish.xpath implementation is lacking a few useful bits of the xpath
> spec but other than that it's useful.

I'm working on adding the final bits of useful xpath functionality 
(added // support the other nite), and would be willing to 
have/maintain xish as it's own subproject. I just have to figure out 
what exactly that means... :)

D.




From uwe at oss4u.com  Fri Apr 23 00:13:21 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Thu, 22 Apr 2004 22:13:21 -0800
Subject: [Twisted-Python] PB and hashed passwords
Message-ID: <200404222313.22035.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Hi,

just found something in pb (twisted version 1.2.0) that's a bit strange.
I've written a credentials checker and set

self.credentialInterfaces = (credentials.IUsernamePassword,)

So far, so good. However the following error is thrown:

No checker for twisted.cred.credentials.IUsernameHashedPassword, 
twisted.cred.credentials.ICredentials, twisted.spread.pb.IUsernameMD5Password


I traced it back to pb._PortalAuthChallenger

It only implements hashed and md5 passwords. Maybe I don't get it, but where 
is the sense in sending a password in cleartext over the wire to then md5 it 
on the "server" side ?
I'd rather md5 it on the client side and send the hash to be compared against 
the password storage, which also stores a md5.
I tried to do this by using plaintext passwords, since the routines then 
simply compare without md5'ing it, but it doesn't seem to be possible to use 
plaintext with pb without changing something. Can I user-define a class to 
jump in there ?

Any enlightenment is appreciated.

THX

	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFAiLQBjqGXBvRToM4RAubrAJ44hBC+PYbcBgiWivFowWjpaEWtaACgnaBV
vvfUvfSiBfpJhhifqmvhJfo=
=Byjg
-----END PGP SIGNATURE-----




From golux at comcast.net  Fri Apr 23 00:19:46 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 23 Apr 2004 02:19:46 -0400
Subject: [Twisted-Python] PB and hashed passwords
In-Reply-To: <200404222313.22035.uwe@oss4u.com>
References: <200404222313.22035.uwe@oss4u.com>
Message-ID: <4088B582.8050707@comcast.net>

Uwe C. Schroeder wrote:

> .... Maybe I don't get it, but where 
> is the sense in sending a password in cleartext over the wire to then md5 it 
> on the "server" side ?
> I'd rather md5 it on the client side and send the hash to be compared against 
> the password storage, which also stores a md5.

That wouldn't make sense:  if you send the passwd as md5 hash
to be compared against itself stored as md5 hash, it's the
same as sending the passwd cleartext, since you are effectively
using the md5 hashed passwd *as* the passwd (and if anyone
intercepts it they can use it directly to get access).

The point of storing it on the server side as an md5 hash
is that even if someone breaks in and steals the md5 hash
of the passwd, they can't reverse the hash to get the
cleartext passwd, and so they can't get in (since the
checker checks the cleartext passwd [which came in over
an encrypted channel] against the md5 hash).

Clear as mud?  :)

- Steve



From golux at comcast.net  Fri Apr 23 00:25:25 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 23 Apr 2004 02:25:25 -0400
Subject: [Twisted-Python] PB and hashed passwords
In-Reply-To: <4088B582.8050707@comcast.net>
References: <200404222313.22035.uwe@oss4u.com> <4088B582.8050707@comcast.net>
Message-ID: <4088B6D5.2030304@comcast.net>

Stephen Waterbury wrote:

> The point of storing it on the server side as an md5 hash
> is that even if someone breaks in and steals the md5 hash
> of the passwd, they can't reverse the hash to get the
> cleartext passwd, and so they can't get in (since the
> checker checks the cleartext passwd [which came in over
> an encrypted channel] against the md5 hash).

The bottom line:  md5 hashes are not a substitute
for an encrypted channel (e.g. SSL);  they are only
useful for encrypted storage and digital signatures.
(At least that's my understanding. :)

- Steve



From uwe at oss4u.com  Fri Apr 23 01:06:10 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Thu, 22 Apr 2004 23:06:10 -0800
Subject: [Twisted-Python] PB and hashed passwords
In-Reply-To: <4088B582.8050707@comcast.net>
References: <200404222313.22035.uwe@oss4u.com> <4088B582.8050707@comcast.net>
Message-ID: <200404230006.10859.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 22 April 2004 11:19 pm, Stephen Waterbury wrote:
> Uwe C. Schroeder wrote:
> > .... Maybe I don't get it, but where
> > is the sense in sending a password in cleartext over the wire to then md5
> > it on the "server" side ?
> > I'd rather md5 it on the client side and send the hash to be compared
> > against the password storage, which also stores a md5.
>
> That wouldn't make sense:  if you send the passwd as md5 hash
> to be compared against itself stored as md5 hash, it's the
> same as sending the passwd cleartext, since you are effectively
> using the md5 hashed passwd *as* the passwd (and if anyone
> intercepts it they can use it directly to get access).

You got a point there, however assume you have a snooper in between, a md5 
hash is much less suspicious/easy to filter

> The point of storing it on the server side as an md5 hash
> is that even if someone breaks in and steals the md5 hash
> of the passwd, they can't reverse the hash to get the
> cleartext passwd, and so they can't get in (since the
> checker checks the cleartext passwd [which came in over
> an encrypted channel] against the md5 hash).

Would be nice to have ssh with pb :-) Has anyone written that yet ? (don't ask 
me to volunteer, i've got deadlines up to my neck)

	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFAiMBijqGXBvRToM4RAiBoAKCZPEONdSOh0hy4j2RlztvHSYtVewCg0UXF
wSB46b/ccmKNkAv+Tf9f8+E=
=Cf9A
-----END PGP SIGNATURE-----




From golux at comcast.net  Fri Apr 23 01:19:15 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 23 Apr 2004 03:19:15 -0400
Subject: [Twisted-Python] PB and hashed passwords
In-Reply-To: <200404230006.10859.uwe@oss4u.com>
References: <200404222313.22035.uwe@oss4u.com> <4088B582.8050707@comcast.net>
	<200404230006.10859.uwe@oss4u.com>
Message-ID: <4088C373.9030505@comcast.net>

Uwe C. Schroeder wrote:

> Would be nice to have ssh with pb :-) Has anyone written that yet ? (don't ask 
> me to volunteer, i've got deadlines up to my neck)

I'm sure it could be done, but you could also just use
SSL.  There was a long thread about PB over SSL on the
list on 4-5 August 2003.



From justinjohnson at fastmail.fm  Fri Apr 23 06:49:16 2004
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 23 Apr 2004 07:49:16 -0500
Subject: [Twisted-Python] PB and hashed passwords
In-Reply-To: <4088C373.9030505@comcast.net>
References: <200404222313.22035.uwe@oss4u.com> <4088B582.8050707@comcast.net>
	<200404230006.10859.uwe@oss4u.com> <4088C373.9030505@comcast.net>
Message-ID: <1082724556.23124.184982173@webmail.messagingengine.com>

I got PB over SSL working by installing OpenSSL and pyOpenSSL, generating
my own pem by following the instructions at
http://tirian.magd.ox.ac.uk/~nick/openssl-certs/personal.shtml#apache-keys,
and adding the following code on the server-side.


from twisted.internet.ssl import DefaultOpenSSLContextFactory
from OpenSSL.SSL import SSLv23_METHOD

cf = os.path.join(sibpath(__file__, 'ssl'), 'ratcontrol.pem')
pf =  os.path.join(sibpath(__file__, 'ssl'), 'ratcontrol.pem')
sslFactory = DefaultOpenSSLContextFactory(cf, pf, SSLv23_METHOD)

[....]

    #svc = internet.TCPServer(config['pbport'], factory)
    svc = internet.SSLServer(config['pbport'], factory,
    contextFactory=sslFactory)


On the client-side I added the following.

from twisted.internet import ssl

[....]

    #reactor.connectTCP(server, config.pbPortNumber, factory)
    reactor.connectSSL(server, config.pbPortNumber, factory,
    ssl.ClientContextFactory())


Of course I can't get any of this to work on Windows because there isn't
any reactor that supports SSL and spawnProcess.  :-(

-Justin

On Fri, 23 Apr 2004 03:19:15 -0400, "Stephen Waterbury"
<golux at comcast.net> said:
> Uwe C. Schroeder wrote:
> 
> > Would be nice to have ssh with pb :-) Has anyone written that yet ? (don't ask 
> > me to volunteer, i've got deadlines up to my neck)
> 
> I'm sure it could be done, but you could also just use
> SSL.  There was a long thread about PB over SSL on the
> list on 4-5 August 2003.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at divmod.com  Fri Apr 23 07:24:40 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 23 Apr 2004 09:24:40 -0400
Subject: [Twisted-Python] PB and hashed passwords
In-Reply-To: <200404222313.22035.uwe@oss4u.com>
References: <200404222313.22035.uwe@oss4u.com>
Message-ID: <40891918.2020703@divmod.com>

Uwe C. Schroeder wrote:

>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>
>Hi,
>
>just found something in pb (twisted version 1.2.0) that's a bit strange.
>I've written a credentials checker and set
>
>self.credentialInterfaces =3D (credentials.IUsernamePassword,)
>
>So far, so good.
>
  Mmm, no.  twisted.spread.pb.PBClientFactory.login() does not support =

arbitrary credentials objects.  It may in the future, but currently it =

only provides equivalent functionality to the previous, deprecated API.

> However the following error is thrown:
>
>No checker for twisted.cred.credentials.IUsernameHashedPassword, =

>twisted.cred.credentials.ICredentials, twisted.spread.pb.IUsernameMD5Passw=
ord
>
  Indeed, as IUsernamePassword is not IUsernameHashedPassword.

>I traced it back to pb._PortalAuthChallenger
>
>It only implements hashed and md5 passwords. Maybe I don't get it, but whe=
re =

>is the sense in sending a password in cleartext over the wire to then md5 =
it =

>on the "server" side ?
>  =

>
  PB does not send the password in cleartext over the wire and then MD5 =

it on the server!  That would be senseless :)

>I'd rather md5 it on the client side and send the hash to be compared agai=
nst =

>the password storage, which also stores a md5.
>  =

>
  The challenge/response mechanism PB uses is more secure than this, so =

I don't think you want to do it.

>I tried to do this by using plaintext passwords, since the routines then =

>simply compare without md5'ing it, but it doesn't seem to be possible to u=
se =

>plaintext with pb without changing something. Can I user-define a class to =

>jump in there ?
>  =

>
  Absolutely.  PBClientFactory.login() and the methods associated with =

it aren't special.  They're just convenient.  All they do is call a =

predefined sequence of remote methods in exactly the same way user code =

(your code) can call them.  If you want a different login sequence, just =

define and call the methods for it.  That said, I really doubt you =

actually want a different login sequence.

  Jp




From jn at who.net  Fri Apr 23 07:47:36 2004
From: jn at who.net (john nielsen)
Date: Fri, 23 Apr 2004 08:47:36 -0500
Subject: [Twisted-Python] server to server leaking descriptors
Message-ID: <20040423134736.4283579004F@ws1-14.us4.outblaze.com>

I'm trying to figure out server to server communication. Here is example code that works but it leaks
descriptors until you run out.

In this example, the client talks to server1 on port 7000, server1 talks to server2 on 7001, then the client gets the result from server2 on 7001. Server1 uses pb.PBClientFactory() to send data to server2, which is the part that leaks descriptors.

What is the appropriate way for a server to talk to a server?

Thanks for any info,

john
------------
from twisted.spread import pb
from twisted.internet import reactor, defer
from twisted.python import util
import time,random

def client(port,fun,react=None,data=None):
   print 'in client',port,fun,data
   a=[]
   factory = pb.PBClientFactory()
   reactor.connectTCP('localhost', port, factory)
   d = factory.getRootObject()
   d.addCallback(lambda object: object.callRemote(fun,data))
   d.addCallback(lambda result: a.append(result))
   d.addErrback(lambda reason: 'error: '+str(reason.value))
   #d.addCallback(util.println)
   if react: 
      d.addCallback(lambda _: reactor.stop())
      reactor.run()
   if a:
      print 'returning',a[0]
      return a[0]
   #return 1


class adder(pb.Root):
    Result=None
    def remote_add(self,i):
        print 'in add'
        i+=1
        print 'calling add2'
        client(7001,'add2',react=None,data=i)

    def remote_add2(self,i):
        print 'in add2',self.Result
        i+=1
        self.Result=i
    def remote_result(self,stuff): return self.Result

port=raw_input('port?').strip()

if port:
    port=int(port)
    print 'starting on',port
    reactor.listenTCP(port, pb.PBServerFactory(adder()))
    reactor.run()
else:
    client(7000,'add',react=None,data=10)
    print 'got',client(7001,'result',react=1)



-- 
___________________________________________________________
Sign-up for Ads Free at Mail.com
http://promo.mail.com/adsfreejump.htm




From jn at who.net  Fri Apr 23 08:53:31 2004
From: jn at who.net (john nielsen)
Date: Fri, 23 Apr 2004 09:53:31 -0500
Subject: [Twisted-Python] how to do server to server defined at runtime?
Message-ID: <20040423145331.168DC79004F@ws1-14.us4.outblaze.com>

I am trying to figure out a way to have a server talk to another server, you do not know about except at runtime.
In other words, a client tells the server to talk to another server. I figured about the problem I had earlier,
and moving the connectTCP outside of PBServerFactory, fixes that problem, which makes sense since it is now not part of the reacotr. But, then I do not know how to specify who to talk to at runtime.

For example in this code, how to I move connectTCP into the adder class?

factory = pb.PBClientFactory()
reactor.connectTCP('localhost', 7001, factory)
d = factory.getRootObject()
reactor.listenTCP(port, pb.PBServerFactory(adder(d)))
reactor.run()

Thanks for any info,
john



-- 
___________________________________________________________
Sign-up for Ads Free at Mail.com
http://promo.mail.com/adsfreejump.htm




From itamar at itamarst.org  Fri Apr 23 11:15:33 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 23 Apr 2004 13:15:33 -0400
Subject: [Twisted-Python] server to server leaking descriptors
In-Reply-To: <20040423134736.4283579004F@ws1-14.us4.outblaze.com>
References: <20040423134736.4283579004F@ws1-14.us4.outblaze.com>
Message-ID: <1082740533.1068.0.camel@sheriffpony>

On Fri, 2004-04-23 at 09:47, john nielsen wrote:
> I'm trying to figure out server to server communication. Here is example code that works but it leaks
> descriptors until you run out.

If you never close connections your program will indeed "leak". So
perhaps you should close connections :)

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From jn at who.net  Fri Apr 23 11:50:58 2004
From: jn at who.net (john nielsen)
Date: Fri, 23 Apr 2004 12:50:58 -0500
Subject: [Twisted-Python] no factory.disconnect used the docs!?! (btw thx
	Itamar )
Message-ID: <20040423175058.63AAD79004F@ws1-14.us4.outblaze.com>

Once Itamar mentioned closing connections, then I realized I needed to add:

d.addCallback(lambda _: factory.disconnect())

The descriptors are now cleaned up.

An interesting point is that I cannot find any documentation that 
actually uses: factory.disconnect()

Did I miss it?

john
----- Original Message -----
From: twisted-python-request at twistedmatrix.com
Date: Thu, 22 Apr 2004 12:00:05 -0600
To: twisted-python at twistedmatrix.com
Subject: Twisted-Python Digest, Vol 1, Issue 1218

> Send Twisted-Python mailing list submissions to
> 	twisted-python at twistedmatrix.com
> 
> To subscribe or unsubscribe via the World Wide Web, visit
> 	http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> or, via email, send a message with subject or body 'help' to
> 	twisted-python-request at twistedmatrix.com
> 
> You can reach the person managing the list at
> 	twisted-python-owner at twistedmatrix.com
> 
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Twisted-Python digest..."
> 
> 
> Today's Topics:
> 
>    1. Re: Transporting pb.Copyable classes? (exarkun at divmod.com)
>    2. Re: Transporting pb.Copyable classes? (Jasper Phillips)
>    3. Unwinding the Twisted Web (a progress report) (David Reid)
>    4. Re: Unwinding the Twisted Web (a progress report)
>       (Itamar Shtull-Trauring)
>    5. how to have a server talk to a server (john nielsen)
>    6. Re: how to have a server talk to a server (Eric Mangold)
> 
> 
> ----------------------------------------------------------------------
> 
> Message: 1
> Date: Wed, 21 Apr 2004 18:53:37 GMT
> From: <exarkun at divmod.com>
> Subject: Re: [Twisted-Python] Transporting pb.Copyable classes?
> To: "Twisted discussion stuff" <twisted-python at twistedmatrix.com>
> Message-ID: <20040421185337.9235.1895087205.divmod.quotient.13 at ohm>
> Content-Type: text/plain
> 
> On Wed, 21 Apr 2004 09:57:47 -0700 (PDT), Jasper Phillips <jasper at peak.org> wrote:
> >
> > [snip]
> > 
> > 
> > All this seems to me like frantic contortion to avoid a bug in jelly.
> > Shouldn't it be able to translate passed class objects into the remote
> > version, provided they have been properly registered?  Is there some reason
> > why not that I am missing?
> 
>   Indeed.  While I would do this differently, jelly should certainly be able to handle your approach.  Let's get into specifics, shall we?  Here's some code:
> 
> >>> from twisted.spread import jelly
> >>> class Foo: pass
> ... 
> >>> f = Foo()
> >>> f.bar = Foo
> >>> jelly.jelly(f)
> ['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]
> 
>   So far, so good.
> 
> >>> from twisted.spread import pb     
> >>> class Foo(pb.Copyable):
> ...     pass
> ... 
> >>> f = Foo()
> >>> f.bar = Foo
> >>> jelly.jelly(f)
> ['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]
> 
>   Hmm, that works too.  I expected it not to, actually.  I suppose something you're doing with globalSecurity or setCopierForClassTree() may be mucking things up.
> 
> > 
> > I appreciate the code suggestions, but basicaly I just want to know whether
> > this is expected behavior, or whether I should post a demonstrative test
> > case and suggest a fix.
> 
>   Posting a demonstrative test case would be excellent :)  I suspect there is no bug in jelly, just a disagreement in expectations which can easily be resolved once there is a concrete example to talk about.
> 
>   Jp
> 
> 
> 
> ------------------------------
> 
> Message: 2
> Date: Wed, 21 Apr 2004 14:03:47 -0700 (PDT)
> From: Jasper Phillips <jasper at peak.org>
> Subject: Re: [Twisted-Python] Transporting pb.Copyable classes?
> To: Twisted discussion stuff <twisted-python at twistedmatrix.com>
> Message-ID: <Pine.LNX.4.53.0404211301540.9678 at a.shell.peak.org>
> Content-Type: TEXT/PLAIN; charset=US-ASCII
> 
> 
> On Wed, 21 Apr 2004 exarkun at divmod.com wrote:
> 
> > On Wed, 21 Apr 2004 09:57:47 -0700 (PDT), Jasper Phillips <jasper at peak.org> wrote:
> > > 
> > > All this seems to me like frantic contortion to avoid a bug in jelly.
> > > Shouldn't it be able to translate passed class objects into the remote
> > > version, provided they have been properly registered?  Is there some reason
> > > why not that I am missing?
> > 
> >   Indeed.  While I would do this differently, jelly should certainly be
> >   able to handle your approach.  Let's get into specifics, shall we?
> >   Here's some code:
> 
> I may end up doing it differently, but one thing at a time!  I'm in the
> midst of upgrading to new cred, and already have plenty of scope with which
> to hang myself. ;-)
> 
> I'm not particularily attached to the static class approach, it just
> happened to be what came to mind when prototyping.  I'm definitely curious
> now what you would do...  I've been programming in a vacuum for quite a
> while. :-(
> 
> 
> > >>> from twisted.spread import jelly
> > >>> class Foo: pass
> > ... 
> > >>> f = Foo()
> > >>> f.bar = Foo
> > >>> jelly.jelly(f)
> > ['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]
> > 
> >   So far, so good.
> > 
> > >>> from twisted.spread import pb     
> > >>> class Foo(pb.Copyable):
> > ...     pass
> > ... 
> > >>> f = Foo()
> > >>> f.bar = Foo
> > >>> jelly.jelly(f)
> > ['__main__.Foo', ['dictionary', ['bar', ['class', '__main__.Foo']]]]
> > 
> >   Hmm, that works too.  I expected it not to, actually.  I suppose
> >   something you're doing with globalSecurity or setCopierForClassTree()
> >   may be mucking things up.
> 
> This test case doesn't seem quite right...  Why doesn't it fail since Foo
> hasn't been registered?  Hmmm, looks like jelly()'s taster arg defaults to
> DummySecurityOptions()...
> 
> What about registering Foo, and then calling with jelly.globalSecurity?:
> ---- Code ----
> from twisted.spread import jelly, pb
> 
> class Foo( pb.Copyable ):  pass
> jelly.setUnjellyableForClass( Foo, Foo )
> #jelly.globalSecurity.allowInstancesOf( Foo )  # uncomment to fix
> 
> if __name__ == '__main__':
>     f = Foo()
>     f.bar = Foo
>     print jelly.jelly( f, taster=jelly.globalSecurity )
> 
> ---- End Code ----
> 
> This gives the Insecure Jelly exception I'm seeing, from jelly.py:482...
> However, comment out `f.bar = Foo` or uncomment allowInstancesOf() and it
> works.
> 
> Oh, and I'm using twisted 1.2 and python 2.3.3.
> 
> 
> [snip]
> >   Posting a demonstrative test case would be excellent :)  I suspect there
> >   is no bug in jelly, just a disagreement in expectations which can easily
> >   be resolved once there is a concrete example to talk about.
> 
> Is this a decent example?  As for a fix, it looks like the solution is there
> in SecurityOptions.allowsInstancesOf(), but that it's just not exposed.
> 
> -Jasper
> 
> 
> 
> 
> ------------------------------
> 
> Message: 3
> Date: Thu, 22 Apr 2004 03:56:47 -0700
> From: David Reid <dreid at dreid.org>
> Subject: [Twisted-Python] Unwinding the Twisted Web (a progress
> 	report)
> To: twisted-python <twisted-python at twistedmatrix.com>,	twisted-web
> 	<twisted-web at twistedmatrix.com>
> Message-ID: <1082631407.28634.20.camel at localhost>
> Content-Type: text/plain
> 
> I had been trying to straighten out the model for the split since my
> first post to twisted-web regarding it.  Now that radix, and exarkun
> have split twisted.news out of the core codebase as "lowdown". Since
> then I have begun work on my own source tree of twisted.web, the module
> has been split as "unwound" which is my proposed name as mentioned in
> the numerous naming threads (to be installed as tmlabs.unwound if
> desired.)  
> 
> So far I've done the following:
> 
>  * duplicate the source tree renaming the toplevel module and changing
> the imports accordingly.
> 
>  * run the tests (everything passes just as it does in twisted.web)
> 
>  * removed modules that were deprecated BY woven, and added a
> Deprecation Warning message to unwound.woven.__init__
> 
> If there are no complaints about this I'm asking someone (like radix) to
> help me complete the rest of the steps necessary to make this the
> official split so i can start working on changes and enhancements.  The
> things I can't do on my own, atleast not as part of twistedmatrix.com is
> setup the SVN repo and the project page.  
> 
> Also it appears if radix and exarkun did not solve (or atleast did not
> implmenet a solution for) the tap naming conflicts.  I.E. if lowdown or
> tmlabs.lowdown is going to use mktap news or mktap lowdown instead.
> 
> Other than that, Unwound is currently a useable tree of twisted.web At
> revision 10601.
> 
> (I'm open to changing the name to either tmlabs.web or some cute/catchy
> name other than 'unwound', but ultimately I think that is a policy
> decision that falls on the core twisted devs.)
> 
> --
> David Reid
> Claim to fame: "I actually wrote code that used twisted.web.webwidgets!"
> 
> 
> 
> 
> ------------------------------
> 
> Message: 4
> Date: Thu, 22 Apr 2004 11:21:46 -0400
> From: Itamar Shtull-Trauring <itamar at itamarst.org>
> Subject: Re: [Twisted-Python] Unwinding the Twisted Web (a progress
> 	report)
> To: Twisted discussion stuff <twisted-python at twistedmatrix.com>
> Cc: twisted-web at twistedmatrix.com
> Message-ID: <1082647306.27964.10.camel at sheriffpony>
> Content-Type: text/plain
> 
> On Thu, 2004-04-22 at 06:56, David Reid wrote:
> 
> > So far I've done the following:
> > 
> >  * duplicate the source tree renaming the toplevel module and changing
> > the imports accordingly.
> 
> >From what I've gathered from talking to Donovan and James this is *not*
> how the new twisted.web version is going to be developed. Donovan said
> he'd write out a roadmap for the mailing list after talking it over.
> 
> -- 
> Itamar Shtull-Trauring    http://itamarst.org
> Looking for a job -- http://itamarst.org/resume.html
> 
> 
> 
> 
> ------------------------------
> 
> Message: 5
> Date: Thu, 22 Apr 2004 10:46:30 -0500
> From: "john nielsen" <jn at who.net>
> Subject: [Twisted-Python] how to have a server talk to a server
> To: twisted-python at twistedmatrix.com
> Message-ID: <20040422154630.2989779004F at ws1-14.us4.outblaze.com>
> Content-Type: text/plain; charset="iso-8859-1"
> 
> I see some examples where you have  a client call pb.PBClientFactory to talk to a server which called pb.PBServerFactory.
> 
> What if you have 2 servers (both running pb.PBServerFactory) that accept clients and also want to talk to each other? Would the first server  also make a pb.PBClientFactory to talk to the second server (seems like you would have to be careful to not leak descriptors since the reactor would never close).
> 
> There's probably a standard way to do it, that I just missed.
> 
> Thanks for any help,
> 
> john
> 
> -- 
> ___________________________________________________________
> Sign-up for Ads Free at Mail.com
> http://promo.mail.com/adsfreejump.htm
> 
> 
> 
> 
> ------------------------------
> 
> Message: 6
> Date: Thu, 22 Apr 2004 11:38:55 -0600
> From: Eric Mangold <teratorn at world-net.net>
> Subject: [Twisted-Python] Re: how to have a server talk to a server
> To: Twisted discussion stuff <twisted-python at twistedmatrix.com>
> Message-ID: <opr6vcm5nfi4eeqj at mail.oaktech.net>
> Content-Type: text/plain; format=flowed; charset=iso-8859-1
> 
> On Thu, 22 Apr 2004 10:46:30 -0500, john nielsen <jn at who.net> wrote:
> 
> > I see some examples where you have  a client call pb.PBClientFactory to 
> > talk to a server which called pb.PBServerFactory.
> >
> > What if you have 2 servers (both running pb.PBServerFactory) that accept 
> > clients and also want to talk to each other? Would the first server  
> > also make a pb.PBClientFactory to talk to the second server
> 
> Yes.
> 
> > (seems like you would have to be careful to not leak descriptors since 
> > the reactor would never close).
> 
> Not sure what you mean by that.
> 
> 	-Eric
> 
> 
> 
> 
> 
> ------------------------------
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> End of Twisted-Python Digest, Vol 1, Issue 1218
> ***********************************************
> 

-- 
___________________________________________________________
Sign-up for Ads Free at Mail.com
http://promo.mail.com/adsfreejump.htm




From glyph at divmod.com  Fri Apr 23 11:57:06 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 23 Apr 2004 13:57:06 -0400
Subject: [Twisted-Python] IFoo(x, persist=1)
In-Reply-To: <1082675086.27964.59.camel@sheriffpony>
References: <1082675086.27964.59.camel@sheriffpony>
Message-ID: <408958F2.5000808@divmod.com>

Itamar Shtull-Trauring wrote:

>I know this is used a lot (the weakref persistence stuff). Should it be
>option of adaptation or perhaps of adapter registration? Trying to see
>how to fit this in to zope3's, which doesn't do this, and it'd be nice
>to have it as part of their core code rather than ours.
> =

>  =

>
It should probably be an attribute of the adapter itself; the persist =

flag is generally about semantics that the adapter expects, not its =

clients.  (Clients of an adapter generally shouldn't be using 'is' anyway.)



From exarkun at divmod.com  Fri Apr 23 12:05:26 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 23 Apr 2004 18:05:26 GMT
Subject: [Twisted-Python] no factory.disconnect used the docs!?! (btw thx
	Itamar )
Message-ID: <20040423180526.9235.1057354114.divmod.quotient.46@ohm>

On Fri, 23 Apr 2004 12:50:58 -0500, "john nielsen" <jn at who.net> wrote:
>Once Itamar mentioned closing connections, then I realized I needed to add:
> 
> d.addCallback(lambda _: factory.disconnect())
> 
> The descriptors are now cleaned up.
> 
> An interesting point is that I cannot find any documentation that 
> actually uses: factory.disconnect()
> 
> Did I miss it?

  Where in the docs do you see this?  There is no such method on factories.  You want to call transport.loseConnection() (which is not easily accessible for a PB connection, but it can be reached, see list archives for details on how).

  Jp



From itamar at itamarst.org  Fri Apr 23 12:09:11 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 23 Apr 2004 14:09:11 -0400
Subject: [Twisted-Python] no factory.disconnect used the docs!?! (btw
	thx Itamar )
In-Reply-To: <20040423180526.9235.1057354114.divmod.quotient.46@ohm>
References: <20040423180526.9235.1057354114.divmod.quotient.46@ohm>
Message-ID: <1082743751.1066.46.camel@sheriffpony>

On Fri, 2004-04-23 at 14:05, exarkun at divmod.com wrote:

>   Where in the docs do you see this?  There is no such method on
> factories.  You want to call transport.loseConnection() (which is not
> easily accessible for a PB connection, but it can be reached, see list
> archives for details on how).

IIRC it's a PB only thing I added for exactly this reason - that
transport.loseCOnnection() is hard to get at in clients.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From jn at who.net  Fri Apr 23 12:19:47 2004
From: jn at who.net (john nielsen)
Date: Fri, 23 Apr 2004 13:19:47 -0500
Subject: [Twisted-Python] do you want docs on a simple server to server pb
	example?
Message-ID: <20040423181947.5800079004F@ws1-14.us4.outblaze.com>

Now that I have it working and I don't think it is documented how to have 2 pb servers talk to each other, I am willing to write some documentation for it. Would you want it?

john


-- 
___________________________________________________________
Sign-up for Ads Free at Mail.com
http://promo.mail.com/adsfreejump.htm




From waterbug at beeblebrox.gsfc.nasa.gov  Fri Apr 23 12:49:32 2004
From: waterbug at beeblebrox.gsfc.nasa.gov (Stephen C. Waterbury)
Date: Fri, 23 Apr 2004 14:49:32 -0400
Subject: [Twisted-Python] do you want docs on a simple server to server
	pb	example?
In-Reply-To: <20040423181947.5800079004F@ws1-14.us4.outblaze.com>
References: <20040423181947.5800079004F@ws1-14.us4.outblaze.com>
Message-ID: <4089653C.1030206@beeblebrox.gsfc.nasa.gov>

john nielsen wrote:
> Now that I have it working and I don't think it is documented how to have 2 pb servers talk to each other, I am willing to write some documentation for it. Would you want it?

+1 from here!  :)




From mary-twisted at puzzling.org  Fri Apr 23 17:03:58 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 24 Apr 2004 09:03:58 +1000
Subject: [Twisted-Python] do you want docs on a simple server to server pb
	example?
In-Reply-To: <20040423181947.5800079004F@ws1-14.us4.outblaze.com>
References: <20040423181947.5800079004F@ws1-14.us4.outblaze.com>
Message-ID: <20040423230358.GB21314@titus.home.puzzling.org>

On Fri, Apr 23, 2004, john nielsen wrote:
> Now that I have it working and I don't think it is documented how to
> have 2 pb servers talk to each other, I am willing to write some
> documentation for it. Would you want it?

Sure, we don't say no to more docs :)

When the documentation (or draft if that's what you want to do) is done,
file a bug in the bug tracker ( http://twistedmatrix.com/bugs/ ) and
assign it to me (username: hypatia) . Attach your documentation to it.

-Mary



From glyph at divmod.com  Sat Apr 24 00:41:39 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 24 Apr 2004 02:41:39 -0400
Subject: [Twisted-Python] The Argument I Lost
Message-ID: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>


I was confused by the recent discussion of the recent tmlabs.* 
hierarchy, so there was a long discussion on IRC tonight about how 
exactly the various splits are going to proceed.  We almost reached a 
consensus about how things should work, except foom (James Knight) 
managed to win the argument about how it should work eventually.

However, I'm more irritating than he is, so we're still doing things my 
way.

To recap, James's way, which is similar to what was discussed on the 
list before, is:

	Keep everything in the same repository, but provide different 
top-level directories for Twisted and the new split-off packages, e.g. 
svn://.../trunk/Twisted/twisted/internet/..., 
svn://.../trunk/TwistedNews/twisted/news/...  (previously we were going 
to keep everything in different repositories, but we agreed that this 
was unnecessary and came with several unpleasant restrictions)

	Move code in new subdirectories to the tmlabs.* hierarchy for 
marketing purposes because it provides a cleaner separation between 
core and applications.  However, I feel that there are lots of other 
hierarchy reorganizations that are potentially a good idea, and this is 
another step.

	Set up buildbot to run application packages against both last-released 
core and most-current core.


My way is:

For now...

	The repository mostly stays how it is.

	Buildbot keeps running against trunk, but against a series of 
application packages instead of twisted.test.

	Package names do not change.

Eventually, one or all of these may need to change.  However, all that 
will be happening to split out packages is:

	Modules in protocols/, test/, and tap/ move to an appropriate 
top-level package, with backward-compatibility wrapper.

	The release script will be changed to generate separate tarballs for 
various top-level packages.

	We will create a topfiles/ directory or somesuch to contain READMEs, 
setup.py's, etc., for each subproject.

Barring any strong objections, this smaller, simpler plan is now how 
the releases should proceed.  We do still intend to do new websites and 
download areas for each subproject (sorry maintainers, you're not 
getting out of writing HTML!), just not new repositories.  Hopefully 
this will be a bit easier on users as we will get decoupled release 
cycles, but aside from protocols moving, it should require no code 
changes to remove all import-related deprecation warnings.

The main point in this change in plan is to avoid doing too many things 
at once, to make sure that the whole split finishes before someone 
implements some crazy new features.  Therefore, issues such as how to 
version APIs, re-organize modules, or re-name packages will be 
addressed *after* the appropriate changes for this split have been 
prepared, but feel free to discuss them beforehand.  I will be replying 
to James's setversion proposal soon.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040424/a6d35da7/attachment.sig>

From itamar at itamarst.org  Sat Apr 24 08:23:44 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 24 Apr 2004 10:23:44 -0400
Subject: [Twisted-Python] The Argument I Lost
In-Reply-To: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>
References: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>
Message-ID: <1082816624.1066.68.camel@sheriffpony>

On Sat, 2004-04-24 at 02:41, Glyph Lefkowitz wrote:

> Barring any strong objections, this smaller, simpler plan is now how 
> the releases should proceed.

Here's how I think the remaining unmentioned pieces should work:

1. Issue tracker will be the same for all projects unless it's a big
enough project (e.g. web).
2. Docs are included in per-project directories.
3. Mailing list is the same for all projects (unless it's big enough,
again e.g. web).

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From foom at fuhm.net  Sat Apr 24 09:56:29 2004
From: foom at fuhm.net (James Y Knight)
Date: Sat, 24 Apr 2004 11:56:29 -0400
Subject: [Twisted-Python] The Argument I Lost
In-Reply-To: <1082816624.1066.68.camel@sheriffpony>
References: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>
	<1082816624.1066.68.camel@sheriffpony>
Message-ID: <F35C0C9C-9607-11D8-8D82-000A95A50FB2@fuhm.net>


On Apr 24, 2004, at 10:23 AM, Itamar Shtull-Trauring wrote:

> 1. Issue tracker will be the same for all projects unless it's a big
> enough project (e.g. web).

It would be *really* nice if the issue tracker sanely supported 
multiple projects in one tracker. Such that each can have separate bug 
listings, but that you could transfer/reassign bugs between them and 
good things like that. The "tag" system it has can kinda do that, but 
noone ever fills it out because it's a textfield instead of a 
required-entry popup menu, which it really probably should be.

James




From itamar at itamarst.org  Sat Apr 24 10:34:53 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 24 Apr 2004 12:34:53 -0400
Subject: [Twisted-Python] The Argument I Lost
In-Reply-To: <F35C0C9C-9607-11D8-8D82-000A95A50FB2@fuhm.net>
References: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>
	<1082816624.1066.68.camel@sheriffpony>
	<F35C0C9C-9607-11D8-8D82-000A95A50FB2@fuhm.net>
Message-ID: <1082824493.1461.72.camel@sheriffpony>

On Sat, 2004-04-24 at 11:56, James Y Knight wrote:

> It would be *really* nice if the issue tracker sanely supported 
> multiple projects in one tracker.

Roundup supports user-extensible schemas, so it should be pretty easy to
add this.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From rayg at varchars.com  Fri Apr 23 10:23:53 2004
From: rayg at varchars.com (rayg)
Date: Fri, 23 Apr 2004 09:23:53 -0700 (PDT)
Subject: [Twisted-Python] twisted on os x: cfreactor or kqreactor?
Message-ID: <Pine.OSX.4.58.0404230852200.21404@slither.local>

i just created a fink package for PyKQeue
(http://sourceforge.net/tracker/index.php?func=detail&aid=940552&group_id=17203&atid=414256)
and this now allows me to use kqreactor.

if i'm not not planning on using any cocoa functionality, is there any
advantage to use cfreactor over kqreactor on os x?

i wasn't able to find any direct comparison between the mechanisms behind
kqreactor and cfreactor, but i did see that NSRunLoop is asynchronous,
like kqueue.  i've tested both reactors on a simple script and noticed
cfreactor doesn't stop() 75% of the time, so i'm inclined to just use
kqreactor, instead of tracking down why cfreactor isn't behaving...



From bob at redivi.com  Sat Apr 24 20:23:34 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 24 Apr 2004 22:23:34 -0400
Subject: [Twisted-Python] twisted on os x: cfreactor or kqreactor?
In-Reply-To: <Pine.OSX.4.58.0404230852200.21404@slither.local>
References: <Pine.OSX.4.58.0404230852200.21404@slither.local>
Message-ID: <8D2EFF25-965F-11D8-9DFB-000A95686CD8@redivi.com>


On Apr 23, 2004, at 12:23 PM, rayg wrote:

> i just created a fink package for PyKQeue
> (http://sourceforge.net/tracker/index.php? 
> func=detail&aid=940552&group_id=17203&atid=414256)
> and this now allows me to use kqreactor.
>
> if i'm not not planning on using any cocoa functionality, is there any
> advantage to use cfreactor over kqreactor on os x?
>
> i wasn't able to find any direct comparison between the mechanisms  
> behind
> kqreactor and cfreactor, but i did see that NSRunLoop is asynchronous,
> like kqueue.  i've tested both reactors on a simple script and noticed
> cfreactor doesn't stop() 75% of the time, so i'm inclined to just use
> kqreactor, instead of tracking down why cfreactor isn't behaving...

You need to use cfreactor or else twisted will block.  You basically  
have no choice.

If that script has a problem with SVN trunk of Twisted, then post the  
script as a bug and I will fix it.  That said, stop() isn't necessarily  
going to cause the program to exit (it doesn't call CFRunLoopStop), but  
it should shut down twisted.  I've only extensively tested it when used  
with a NSRunLoop with Cocoa stuff going on, and never bothered with  
stop functionality because NSRunLoop doesn't have a stop method at all  
(exiting is done via -[NSApplication terminate] or an exit call).

-bob




From bob at redivi.com  Sat Apr 24 20:29:08 2004
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 24 Apr 2004 22:29:08 -0400
Subject: [Twisted-Python] twisted on os x: cfreactor or kqreactor?
In-Reply-To: <8D2EFF25-965F-11D8-9DFB-000A95686CD8@redivi.com>
References: <Pine.OSX.4.58.0404230852200.21404@slither.local>
	<8D2EFF25-965F-11D8-9DFB-000A95686CD8@redivi.com>
Message-ID: <54760BEC-9660-11D8-9DFB-000A95686CD8@redivi.com>


On Apr 24, 2004, at 10:23 PM, Bob Ippolito wrote:

>
> On Apr 23, 2004, at 12:23 PM, rayg wrote:
>
>> i just created a fink package for PyKQeue
>> (http://sourceforge.net/tracker/index.php? 
>> func=detail&aid=940552&group_id=17203&atid=414256)
>> and this now allows me to use kqreactor.
>>
>> if i'm not not planning on using any cocoa functionality, is there any
>> advantage to use cfreactor over kqreactor on os x?
>>
>> i wasn't able to find any direct comparison between the mechanisms  
>> behind
>> kqreactor and cfreactor, but i did see that NSRunLoop is asynchronous,
>> like kqueue.  i've tested both reactors on a simple script and noticed
>> cfreactor doesn't stop() 75% of the time, so i'm inclined to just use
>> kqreactor, instead of tracking down why cfreactor isn't behaving...
>
> You need to use cfreactor or else twisted will block.  You basically  
> have no choice.
>
> If that script has a problem with SVN trunk of Twisted, then post the  
> script as a bug and I will fix it.  That said, stop() isn't  
> necessarily going to cause the program to exit (it doesn't call  
> CFRunLoopStop), but it should shut down twisted.  I've only  
> extensively tested it when used with a NSRunLoop with Cocoa stuff  
> going on, and never bothered with stop functionality because NSRunLoop  
> doesn't have a stop method at all (exiting is done via -[NSApplication  
> terminate] or an exit call).

I'm sorry, I read your message incorrectly.  If you are not using Cocoa  
functionality, use the default reactor or kqreactor (which will only  
work on 10.3).  CFRunLoop is designed to support Carbon (probably) and  
Cocoa applications.  There is no good reason to use it for a POSIX app  
unless you are using other event driven CoreFoundation code (highly  
unlikely, in Python anyway).

The way CoreFoundation does async socket I/O is to have a single  
network thread that posts events to the run loop thread.  In 10.2 and  
earlier it used select().  I am not sure if it is using kqueue or not  
in 10.3 (nor should I have to care).

-bob




From mary-twisted at puzzling.org  Sat Apr 24 23:05:28 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 25 Apr 2004 15:05:28 +1000
Subject: [Twisted-Python] The Argument I Lost
In-Reply-To: <1082816624.1066.68.camel@sheriffpony>
References: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>
	<1082816624.1066.68.camel@sheriffpony>
Message-ID: <20040425050527.GB1134@titus.home.puzzling.org>

On Sat, Apr 24, 2004, Itamar Shtull-Trauring wrote:
> On Sat, 2004-04-24 at 02:41, Glyph Lefkowitz wrote:
> 
> > Barring any strong objections, this smaller, simpler plan is now how 
> > the releases should proceed.
> 
> Here's how I think the remaining unmentioned pieces should work:
> 
> 1. Issue tracker will be the same for all projects unless it's a big
> enough project (e.g. web).
> 3. Mailing list is the same for all projects (unless it's big enough,
> again e.g. web).

This will still be a pain for anyone doing cross-project work
*cough*docs*cough*. I'm tempted to say that projects that are large
enough to get their own bug tracker ought to consider getting their own
docs editor, release manager etc.

-Mary



From itamar at itamarst.org  Sun Apr 25 14:21:53 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 25 Apr 2004 16:21:53 -0400
Subject: [Twisted-Python] The Argument I Lost
In-Reply-To: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>
References: <70B6A1A2-95BA-11D8-A158-000393C9700E@divmod.com>
Message-ID: <1082924513.1461.76.camel@sheriffpony>

Another question - what should the main site for Twisted core be?
http://projects.twistedmatrix.com/twisted/ or www.twistedmatrix.com? 
(If the former we will provide backwards-compatability for the important
URLs, of course).




From sam at couter.dropbear.id.au  Sun Apr 25 22:27:38 2004
From: sam at couter.dropbear.id.au (Sam Couter)
Date: Mon, 26 Apr 2004 14:27:38 +1000
Subject: [Twisted-Python] Bug in reactor.iterate()?
Message-ID: <20040426042737.GA23378@yosamite.tekno.house>

Twisted version: 1.2.0

Attached is a minimal test case to demonstrate behaviour I consider a
bug in reactor.iterate() in the default reactor. You'll need to change
the DB name, user and password, and pick a table that exists in your DB.

The callbacks are never called while iterate() runs, but are called if
iterate() is replaced with run(), or if run() is called after iterate().

Am I correct in considering this a bug?

I found this while creating a unit test following the example at the
bottom of
http://www.twistedmatrix.com/documents/current/howto/test-standard.
-- 
Sam "Eddie" Couter  |  mailto:sam at couter.dropbear.id.au
Debian Developer    |  mailto:eddie at debian.org
                    |  jabber:sam at teknohaus.dyndns.org
OpenPGP fingerprint:  A46B 9BB5 3148 7BEA 1F05  5BD5 8530 03AE DE89 C75C
-------------- next part --------------
A non-text attachment was scrubbed...
Name: iterate.py
Type: text/x-python
Size: 446 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040426/edea1073/attachment-0002.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20040426/edea1073/attachment.sig>

From matt at pollenation.net  Mon Apr 26 05:00:07 2004
From: matt at pollenation.net (Matt Goodall)
Date: Mon, 26 Apr 2004 12:00:07 +0100
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <660B7B08-94D4-11D8-967C-00039386381C@jabber.org>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<1082488803.2913.163.camel@debian>
	<660B7B08-94D4-11D8-967C-00039386381C@jabber.org>
Message-ID: <1082977206.12687.9.camel@harold>

On Fri, 2004-04-23 at 04:14, Dave Smith wrote:
> On Apr 20, 2004, at 1:20 PM, Matt Goodall wrote:
> 
> > I recently used xish.xpath instead of libxml's xpath in a Nevow example
> > to avoid introducing the external dependency. I knew xish would be
> > available to anyone interested in the example ... or so I thought ;-).
> > The xish.xpath implementation is lacking a few useful bits of the xpath
> > spec but other than that it's useful.
> 
> I'm working on adding the final bits of useful xpath functionality 
> (added // support the other nite), and would be willing to 
> have/maintain xish as it's own subproject. I just have to figure out 
> what exactly that means... :)

Wow, thanks Dave :).

iirc, i missed one thing from my unittest that is useful - matching by
attribute value. See the zvon.org's example 6 although I personally
wouldn't bother with the normalize-space() nonsense.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.




From itamar at itamarst.org  Mon Apr 26 09:42:18 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 26 Apr 2004 11:42:18 -0400
Subject: [Twisted-Python] Bug in reactor.iterate()?
In-Reply-To: <20040426042737.GA23378@yosamite.tekno.house>
References: <20040426042737.GA23378@yosamite.tekno.house>
Message-ID: <1082994138.5919.3.camel@sheriffpony>

On Mon, 2004-04-26 at 00:27, Sam Couter wrote:

> The callbacks are never called while iterate() runs, but are called if
> iterate() is replaced with run(), or if run() is called after iterate().

The threadpool used by the database is never initialized if you don't
use run(). I suggest you look at twisted.test.test_enterprise and see
how it deals with initializing and stopping the db in tests (or just use
reactor.run() wiith reactor.crash(), though you'll still need to stop
the threadpool manually).

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From dekonerding at lbl.gov  Mon Apr 26 15:47:10 2004
From: dekonerding at lbl.gov (David E. Konerding DSD Staff)
Date: Mon, 26 Apr 2004 14:47:10 -0700
Subject: [Twisted-Python] twisted gtk-reactor bug 552
Message-ID: <408D835E.2050309@lbl.gov>

Hi,

I'm checking in again to see if anybody had taken a look at my bug report,

http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue552

I discussed it a little bit on a slow day on IRC, but nobody had any 
solutions.
However, it was reproduced on NetBSD-current w/ pygtk-2 and gtk-2.4, so I'm
pretty sure it's not specific to my location.

In summary:

I'm using the gtk2reactor, and periodically scheduled events (invoked 
via reactor.callLater->reactor.callInThread)
are not being fired in a timely fashion.  When I originally mentioned 
the bug on the mailing list, people thought
I was calling 'sleep' in the main (reactor) thread, but actually, sleep 
is only called in another thread, and
it works fine with the plain reactor and the wx reactor.

Here is the example program (you should see 'TestThingy message' every 
0.1 seconds or so..)
Note that the bug report has two lines improperly indented.

import time, sys

from twisted.internet import gtk2reactor
gtk2reactor.install()
from twisted.python import threadable
threadable.init()
from twisted.internet import reactor
from twisted.python import log
log.startLogging(sys.stdout)

class TestThingy:
 def __init__(self):
     print "TestThingy created"

 def run(self):
     print "TestThingy run"
     for i in range(10):
         print "TestThingy message"
         time.sleep(0.1)
     print "TestThingy done"

class ThingyManager:
 def __init__(self):
     pass

 def submitThingy(self):
     log.err("ThingyManager submitting")
     f = TestThingy()
     log.err("ThingyManager created")
     reactor.callInThread(f.run)
     log.err("ThingyManager calledInThread")

def ticker(*args):
 log.err("ticker: %d" % time.time())
 reactor.callLater(1, ticker)

t = ThingyManager()
reactor.callLater(0, ticker)
reactor.callLater(3, t.submitThingy)
reactor.run()
log.err("Reactor done")


Dave





From dizzyd at jabber.org  Mon Apr 26 22:42:22 2004
From: dizzyd at jabber.org (Dave Smith)
Date: Mon, 26 Apr 2004 22:42:22 -0600
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <1082977206.12687.9.camel@harold>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz>
	<408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<1082488803.2913.163.camel@debian>
	<660B7B08-94D4-11D8-967C-00039386381C@jabber.org>
	<1082977206.12687.9.camel@harold>
Message-ID: <45E2F93A-9805-11D8-A603-00039386381C@jabber.org>


On Apr 26, 2004, at 5:00 AM, Matt Goodall wrote:

> iirc, i missed one thing from my unittest that is useful - matching by
> attribute value. See the zvon.org's example 6 although I personally
> wouldn't bother with the normalize-space() nonsense.

You mean like /foo[@bar='abc']

D.




From matt at pollenation.net  Tue Apr 27 02:46:26 2004
From: matt at pollenation.net (Matt Goodall)
Date: Tue, 27 Apr 2004 09:46:26 +0100
Subject: [Twisted-Python] Progress report on splitting packages
In-Reply-To: <45E2F93A-9805-11D8-A603-00039386381C@jabber.org>
References: <1082396907.26194.499.camel@sheriffpony>
	<20040420011327.GB27709@frobozz> <408483C6.1030308@twistedmatrix.com>
	<1082464567.22435.17.camel@sheriffpony>
	<1082488803.2913.163.camel@debian>
	<660B7B08-94D4-11D8-967C-00039386381C@jabber.org>
	<1082977206.12687.9.camel@harold>
	<45E2F93A-9805-11D8-A603-00039386381C@jabber.org>
Message-ID: <1083055586.23973.4.camel@harold>

On Tue, 2004-04-27 at 05:42, Dave Smith wrote:
> On Apr 26, 2004, at 5:00 AM, Matt Goodall wrote:
> 
> > iirc, i missed one thing from my unittest that is useful - matching by
> > attribute value. See the zvon.org's example 6 although I personally
> > wouldn't bother with the normalize-space() nonsense.
> 
> You mean like /foo[@bar='abc']

Yep, that's the one. I don't know if xish already supports this, I just
realised I missed it from the tests.

Cheers, Matt

-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt at pollenation.net

Any views expressed are my own and do not necessarily reflect the
views of my employer.




From sam at couter.dropbear.id.au  Tue Apr 27 04:52:26 2004
From: sam at couter.dropbear.id.au (Sam Couter)
Date: Tue, 27 Apr 2004 20:52:26 +1000
Subject: [Twisted-Python] Bug in reactor.iterate()?
In-Reply-To: <1082994138.5919.3.camel@sheriffpony>
References: <20040426042737.GA23378@yosamite.tekno.house>
	<1082994138.5919.3.camel@sheriffpony>
Message-ID: <20040427105226.GE23378@yosamite.tekno.house>

Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> The threadpool used by the database is never initialized if you don't
> use run(). I suggest you look at twisted.test.test_enterprise and see
> how it deals with initializing and stopping the db in tests (or just use
> reactor.run() wiith reactor.crash(), though you'll still need to stop
> the threadpool manually).

Ah... I already tried run() and crash(), but my test didn't terminate.
Now I know why - the threadpool was still running.

All works now, is good. Thanks.

Suggestion: Turn this bug into a documented feature. :)
-- 
Sam "Eddie" Couter  |  mailto:sam at couter.dropbear.id.au
Debian Developer    |  mailto:eddie at debian.org
                    |  jabber:sam at teknohaus.dyndns.org
OpenPGP fingerprint:  A46B 9BB5 3148 7BEA 1F05  5BD5 8530 03AE DE89 C75C
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20040427/30661303/attachment.sig>

From itamar at itamarst.org  Wed Apr 28 10:53:36 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 28 Apr 2004 12:53:36 -0400
Subject: [Twisted-Python] Zope3 components port status
Message-ID: <1083171216.8295.30.camel@sheriffpony>

All tests pass, except 3 in test_components that test features which we
no longer support. I am running my woven app with it right now and
meanwhile everything is working great.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From prouleau at impathnetworks.com  Wed Apr 28 22:36:53 2004
From: prouleau at impathnetworks.com (Pierre Rouleau)
Date: Thu, 29 Apr 2004 00:36:53 -0400
Subject: [Twisted-Python] Is multicast supported on windows platform?
Message-ID: <c6q0p6$eae$1@sea.gmane.org>

Hi everyone!

I am just starting to learn Twisted.
My first attempt is to write a small client app that will join to  a 
multicast group and then read the receive stream.  The code would have 
to run on Windows and *nix.

As I'm reading the docs and browsing the code I stumbled across the 
twisted.internet.udp MulticastMixin docstring that states:

class MulticastMixin:
     """Implement multicast functionality.

     Initial implementation, probably needs some changes for Windows 
support.
     """

My first question therefore:  "is multicast supported under Windows?"


Thanks for any help.

Pierre





From matteo.giacomazzi at email.it  Thu Apr 29 08:26:57 2004
From: matteo.giacomazzi at email.it (Matteo Giacomazzi)
Date: Thu, 29 Apr 2004 16:26:57 +0200
Subject: [Twisted-Python] twisted.internet.error.ConnectionDone,
	Connection was closed cleanly
Message-ID: <1325025593.20040429162657@email.it>

Hi all,

   in  my  network (client) application I have to defer an action in a
   thread using deferToThread.
   I add an errBack to the deferred returned from the deferToThread in
   order  to handle exceptions and, then, I add a callBack in order to
   return a response *anyway*.

   Now  the  problem:  if  the  thread completes its execution without
   exception, everything works pretty fine.
   If an exception happens in the thread, then the errBack is invoked,
   the  callBack  is invoked and the transport.write is invoked but...
   at  the  end  of the chain the protocol receives a "connectionLost"
   call  and  the factory receives a "clientConnectionLost" call, both
   with the reason you can see in the subject.

   What does it mean?

   Any  help  would  be  greatly  appreciated.
   Python  2.3.3
   Twisted 1.2.0

Best regards
 Matteo




From matteo.giacomazzi at email.it  Thu Apr 29 09:39:13 2004
From: matteo.giacomazzi at email.it (Matteo Giacomazzi)
Date: Thu, 29 Apr 2004 17:39:13 +0200
Subject: [Twisted-Python] twisted.internet.error.ConnectionDone,
	Connection was closed cleanly
In-Reply-To: <1325025593.20040429162657@email.it>
References: <1325025593.20040429162657@email.it>
Message-ID: <1609360859.20040429173913@email.it>

> at  the  end  of  the chain the protocol receives a "connectionLost"
> call  and  the  factory receives a "clientConnectionLost" call, both
> with the reason you can see in the subject.

Sorry for the wasted bandwidth, the error meant that the server closed
the connection, that's why I had the problem!

Ok, now I know what's the code I have to check!

Apologizes!

Kind regards,
 Matteo




From itamar at itamarst.org  Thu Apr 29 20:28:21 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 29 Apr 2004 22:28:21 -0400
Subject: [Twisted-Python] Is multicast supported on windows platform?
In-Reply-To: <c6q0p6$eae$1@sea.gmane.org>
References: <c6q0p6$eae$1@sea.gmane.org>
Message-ID: <1083292101.8295.38.camel@sheriffpony>

On Thu, 2004-04-29 at 00:36, Pierre Rouleau wrote:

> My first question therefore:  "is multicast supported under Windows?"

Probably. Try it and see! If you get errors file them at
http://twistedmatrix.com/bugs/ and assign to me.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From waldbie at attglobal.net  Fri Apr 30 20:34:15 2004
From: waldbie at attglobal.net (Carl Waldbieser)
Date: Sat, 1 May 2004 02:34:15 +0000
Subject: [Twisted-Python] How to write binary data from a protocol?
Message-ID: <200405010234.16055.waldbie@attglobal.net>

I am attempting to write a server that communicates by a protocol very similar 
to the twisted.protocols.basic.LineReceiver protocol.  The server accepts a 
line of data, followed by a raw data section, and then responds to the client 
with raw data pre-pended with an integer that tells the size of the binary 
data.  I am not sure how to write the integer as binary data in twisted, 
though.  I tried calling self.transport.write(), but I received an error 
indicating that only string data is accepted.  This implementation is meant 
as a drop-in replacement for an existing server, so I don't really want to 
change the protocol.

Below is a sample program that I have been trying to get to work.  It receives 
a line (actually, an integer followed by a newline).  It then enters raw data 
mode where it aquires raw data until it reaches the length specified by the 
integer.  Then it attempts to send a test message consisting of a string 
("xyzzy") pre-pended by the length of the string.  The error output follows 
the sample.

Is there a better way to accomplish what I am trying to do?

Any Help Is Appreciated,
Carl Waldbieser

---- Begin Sample --------------------------------------------------------- 

from twisted.internet import reactor, protocol
from twisted.protocols.basic import LineReceiver

class MyProtocol(LineReceiver):
    delimiter = "\n"
    def __init__(self):
        self.setLineMode()
    def lineReceived(self, line):
        self.length = int(line)
        self.data = ""
        print "Received : %d\n" % self.length
        self.setRawMode()
    def rawDataReceived(self, data):
        self.data += data
        if len(self.data) >= self.length:
            data = self.data[0:self.length]
            remaining = self.data[self.length:]
            print "Received data: %s\n" % data
            self.transport.write(5)
            self.transport.write("xyzzy")
            self.transport.loseConnection()
    
class MyFactory(protocol.ServerFactory):
    protocol = MyProtocol
    
mf = MyFactory()
reactor.listenTCP(2525, mf)
reactor.run()



--- Begin Error -----------------------------------------------------------
Traceback (most recent call last):
  File "/usr/lib/python2.3/site-packages/twisted/internet/default.py", line 
523, in doSelect
    _logrun(selectable, _drdw, selectable, method, dict)
  File "/usr/lib/python2.3/site-packages/twisted/python/log.py", line 65, in 
callWithLogger
    callWithContext({"system": lp}, func, *args, **kw)
  File "/usr/lib/python2.3/site-packages/twisted/python/log.py", line 52, in 
callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "/usr/lib/python2.3/site-packages/twisted/python/context.py", line 32, 
in callWithContext
    return func(*args,**kw)
--- <exception caught here> ---
  File "/usr/lib/python2.3/site-packages/twisted/internet/default.py", line 
532, in _doReadOrWrite
    why = getattr(selectable, method)()
  File "/usr/lib/python2.3/site-packages/twisted/internet/tcp.py", line 250, 
in doRead
    return self.protocol.dataReceived(data)
  File "/usr/lib/python2.3/site-packages/twisted/protocols/basic.py", line 
229, in dataReceived
    return self.rawDataReceived(data)
  File "twgfserver.py", line 20, in rawDataReceived
    self.transport.write(6)
  File "/usr/lib/python2.3/site-packages/twisted/internet/abstract.py", line 
140, in write
    assert isinstance(data, str), "Data must be a string."
exceptions.AssertionError: Data must be a string.




From rayg at varchars.com  Fri Apr 23 10:23:53 2004
From: rayg at varchars.com (rayg)
Date: Fri, 23 Apr 2004 09:23:53 -0700 (PDT)
Subject: [Twisted-Python] twisted on os x: cfreactor or kqreactor?
Message-ID: <Pine.OSX.4.58.0404230852200.21404@slither.local>

i just created a fink package for PyKQeue
(http://sourceforge.net/tracker/index.php?func=detail&aid=940552&group_id=17203&atid=414256)
and this now allows me to use kqreactor.

if i'm not not planning on using any cocoa functionality, is there any
advantage to use cfreactor over kqreactor on os x?

i wasn't able to find any direct comparison between the mechanisms behind
kqreactor and cfreactor, but i did see that NSRunLoop is asynchronous,
like kqueue.  i've tested both reactors on a simple script and noticed
cfreactor doesn't stop() 75% of the time, so i'm inclined to just use
kqreactor, instead of tracking down why cfreactor isn't behaving...



