From trac at twistedmatrix.com  Sun Sep  3 00:05:20 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 Sep 2017 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1504418720.93.252524548925975262@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170903/c9bcd384/attachment.html>

From hawkowl at atleastfornow.net  Tue Sep  5 05:50:50 2017
From: hawkowl at atleastfornow.net (Amber Hawkie Brown)
Date: Tue, 5 Sep 2017 21:50:50 +1000
Subject: [Twisted-Python] Twisted 17.9.0 Release Candidate Announcement
Message-ID: <E79EEDB0-40E4-4C13-8D4C-64A73C80967E@atleastfornow.net>

Hello everyone! Time for yet another Twisted release. What's new this time you may ask?

- More Python 3 porting, including twisted.mail.imap4, twisted.python.shortcut, twisted.python.rebuild, twisted.web.sux, twisted.web.microdom, and a ton of bugs and inconsistencies fixed.
- twistd on Python 3 now supports the dns, inetd, portforward, procmon, socks, and words plugins.
- HTTP/1.1 and HTTP/2 OPTIONS * request support in Twisted Web
- twist web now accepts the argument --add-header, which can be used to set things like HSTS headers without custom code
- Improvements to IMAP4 behaviour and several logic bugfixes
- Removal of outdated documentation and updates to make them work on Python 3
- Over 70 closed tickets overall.

You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/17.9.0rc1/ , or you can try it out from PyPI:

    python -m pip install Twisted==17.9.0rc1

Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 17.9 will release in a week.

Twisted Regards,
Amber Brown
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP
URL: </pipermail/twisted-python/attachments/20170905/8719621c/attachment.sig>

From rodrigc at crodrigues.org  Tue Sep  5 10:30:49 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 5 Sep 2017 09:30:49 -0700
Subject: [Twisted-Python] Twisted 17.9.0 Release Candidate Announcement
In-Reply-To: <E79EEDB0-40E4-4C13-8D4C-64A73C80967E@atleastfornow.net>
References: <E79EEDB0-40E4-4C13-8D4C-64A73C80967E@atleastfornow.net>
Message-ID: <CAG=rPVfbSfDf4yF3ntR+FgfispPg-r37giKvnfM_KDY10t7aNg@mail.gmail.com>

Can you or another Twisted developer code review this:
https://github.com/twisted/twisted/pull/867

The problem was originally reported to Buildbot by Christian Wenk who tried
to configure his buildbot, and couldn't send notification e-mails
when non-ASCII characters were in the sender name.

I worked on the fix, which was tested and verified by Christian.
Pierre Tardy did an initial code review, but wants to have
another person do an additional code review.

This problem also affects the Scrapy project, which uses Twisted for
sending e-mail.

This problem is coming up more frequently, especially with CI systems like
GitHub and GitLab which allow non-ASCII characters in the username portion
of e-mail addresses.

I'd like to get this fix into 17.9.0.

Thanks.

--
Craig


On Tue, Sep 5, 2017 at 4:50 AM, Amber Hawkie Brown <
hawkowl at atleastfornow.net> wrote:

>     python -m pip install Twisted==17.9.0rc1
>
> Please test it, and let me know how your applications fare, good or bad!
> If nothing comes up, 17.9 will release in a week.
>
> Twisted Regards,
> Amber Brown
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170905/f7c885a0/attachment.html>

From glyph at twistedmatrix.com  Tue Sep  5 21:28:10 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 5 Sep 2017 20:28:10 -0700
Subject: [Twisted-Python] Twisted 17.9.0 Release Candidate Announcement
In-Reply-To: <CAG=rPVfbSfDf4yF3ntR+FgfispPg-r37giKvnfM_KDY10t7aNg@mail.gmail.com>
References: <E79EEDB0-40E4-4C13-8D4C-64A73C80967E@atleastfornow.net>
 <CAG=rPVfbSfDf4yF3ntR+FgfispPg-r37giKvnfM_KDY10t7aNg@mail.gmail.com>
Message-ID: <E0B05357-4FA9-4A04-99BD-200823C08670@twistedmatrix.com>


> On Sep 5, 2017, at 9:30 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Can you or another Twisted developer code review this: 
> https://github.com/twisted/twisted/pull/867 <https://github.com/twisted/twisted/pull/867>
Mark Williams and I poked the builders throughout the day to address some intermittent build issues, so if anyone has time to review this now it properly has a green checkmark.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170905/c734ee17/attachment.html>

From barry.scott at forcepoint.com  Wed Sep  6 07:08:52 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Wed, 6 Sep 2017 14:08:52 +0100
Subject: [Twisted-Python] nevow problem with  TWISTED_NEWSTYLE=true
Message-ID: <27360660.1mUCSPfjrH@barry-scott-desktop>

I wanted to use the new style classes everywhere but hit this
problem with nevow 0.14.3. Is there a patch to fix this available?

$ TWISTED_NEWSTYLE=true python2 
Python 2.7.13 (default, Jun 26 2017, 10:20:05) 
[GCC 7.1.1 20170622 (Red Hat 7.1.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import nevow
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/lib64/python2.7/site-packages/nevow/__init__.py", line 148, in 
<module>
    load(basic_adapters)
  File "/usr/lib64/python2.7/site-packages/nevow/__init__.py", line 34, in 
load
    registerAdapter(_namedAnyWithBuiltinTranslation(a),
  File "/usr/lib64/python2.7/site-packages/nevow/util.py", line 183, in 
_namedAnyWithBuiltinTranslation
    return namedAny(name)
  File "/usr/lib64/python2.7/site-packages/twisted/python/reflect.py", line 
301, in namedAny
    topLevelPackage = _importAndCheckStack(trialname)
  File "/usr/lib64/python2.7/site-packages/twisted/python/reflect.py", line 
240, in _importAndCheckStack
    return __import__(importName)
  File "/usr/lib64/python2.7/site-packages/formless/webform.py", line 24, in 
<module>
    from nevow.static import File
  File "/usr/lib64/python2.7/site-packages/nevow/static.py", line 33, in 
<module>
    from nevow import appserver, dirlist, inevow, rend
  File "/usr/lib64/python2.7/site-packages/nevow/appserver.py", line 177, in 
<module>
    class NevowRequest(tpc.Componentized, server.Request):
  File "/usr/lib64/python2.7/site-packages/zope/interface/advice.py", line 
141, in advise
    newClass = meta(name,bases,cdict)
TypeError: Error when calling the metaclass bases
    Cannot create a consistent method resolution
order (MRO) for bases Request, Componentized
>>> 

Barry


From glyph at twistedmatrix.com  Wed Sep  6 19:14:21 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 6 Sep 2017 18:14:21 -0700
Subject: [Twisted-Python] nevow problem with  TWISTED_NEWSTYLE=true
In-Reply-To: <27360660.1mUCSPfjrH@barry-scott-desktop>
References: <27360660.1mUCSPfjrH@barry-scott-desktop>
Message-ID: <1AA27436-2827-446E-9BCA-B6DE77F819FE@twistedmatrix.com>


> On Sep 6, 2017, at 6:08 AM, Barry Scott <barry.scott at forcepoint.com> wrote:
> 
> I wanted to use the new style classes everywhere but hit this
> problem with nevow 0.14.3. Is there a patch to fix this available?

Nope. You can write such a patch, and contribute it to Nevow, here: https://github.com/twisted/nevow <https://github.com/twisted/nevow>

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170906/e7e78865/attachment.html>

From trac at twistedmatrix.com  Sun Sep 10 00:05:24 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 Sep 2017 06:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1505023524.16.6775413654274004554@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170910/51cc1c88/attachment.html>

From zadka.moshe at gmail.com  Sun Sep 10 15:04:15 2017
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Sun, 10 Sep 2017 21:04:15 +0000
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
Message-ID: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>

Hello all,

For context, please read bullet one of Glyph's comment on
https://twistedmatrix.com/trac/ticket/3691#comment:9

I am in a similar situation to JP 8 years ago -- I want to add a working
directory argument to addProcess, so that processes that care (usually for
silly reasons) about their cwd can be monitored.

The options I see:

1. Move processes to a private attribute, deprecate processors, then do it.
2. Have a parallel dictionary to processes
3. Move, as Glyph suggested, to object with attributes. For backwards
compatibility, I can support __getitem__ for the historic unpackers.
4. Decide we're going with "inccompatible change", and move processes to a
private attribute.

Anyone wants to weigh in?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170910/da7122cc/attachment.html>

From ex.vitorino at gmail.com  Mon Sep 11 03:43:44 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Mon, 11 Sep 2017 10:43:44 +0100
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
In-Reply-To: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
References: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
Message-ID: <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>

> The options I see:
> 
> 1. Move processes to a private attribute, deprecate processors, then do it.

From an abstraction standpoint, that makes sense. Probably the same could be said about the other process related dict attributes like protocols, delay, etc., though. They all seem to be "name" indexed dicts of things related to a given process.

In other words, moving processes into a private attribute suggests making all (most?) other attributes private as well.


> 2. Have a parallel dictionary to processes

Given that there are already lots of interrelated dicts, I'd say this would continue the current design which, as we're seeing now, is not easily extendable. I'd try to avoid this.

Sidenote: A quick, mostly backwards compatible, change could probably add cwd to the existing per-process tuple in self.processes as an extra item, couldn't it? Not 100% backwards compatible, because the tuple would have one more element, but nearly 100%.


> 3. Move, as Glyph suggested, to object with attributes. For backwards compatibility, I can support __getitem__ for the historic unpackers.

This feels cleaner and better. Maybe __getitem__ could be implemented and deprecated immediately, who knows?

Again, creating a class here could also induce doing something similar with the "process policy/state attributes" (for the lack of a better name), where maybe the other dicts could somehow be brought together. Whether this is a better design or not is up for consideration. But one thing is a fact, just bringing them together into a common class (and, thus, down to a single attribute in ProcessMonitor) would break backwards compatibility for some of the same reasons you are now raising. *sigh!*


> 4. Decide we're going with "incompatible change", and move processes to a private attribute.

I see no reason for accessing those attributes from "outside of ProcessMonitor" but if Twisted claims not to break existing code without previous deprecation warning, such an approach would break that promise (full policy details here http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html).


My 2c.
Regards,
--
exvito


From rodrigc at crodrigues.org  Wed Sep 13 16:54:19 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 13 Sep 2017 15:54:19 -0700
Subject: [Twisted-Python] Asyncio presentations at Pybay 2017
Message-ID: <CAG=rPVfb0=9ODrF1QxWSeP71ScjWy4ru3J3g21JFAqfuB+WEZQ@mail.gmail.com>

A few weeks ago I attended Pybay 2017 in San Francisco ( http://pybay.com ).

I attended three interesting talks on asyncio:

Performant Asynchronous Programming at Quora:
https://engineering.quora.com/Asynchronous-Programming-in-Python
"https://www.youtube.com/watch?v=0iqibyfxw3w"

How Optimizely Scaled its REST API with Asyncio
https://www.slideshare.net/optimizely/how-optimizely-scaled-its-rest-api-with-asyncio
https://www.youtube.com/watch?v=jgLA9Hp-CvY

Awaits, how do they work?
https://epsy.github.io/ahdtw/#/

While none of these talks used Twisted,
a few of the talks briefly mentioned Twisted when talking about the
history of async style programming in Python.

>From what I can see, now that asyncio is in the Python standard library,
more people and companies are more open trying async-style things,
and are moving to the Python asyncio way of doing thing.

During the Optimizely presentation, I asked them what the biggest pain point
for them was, and the they responded that lack of asyncio support
in the frameworks they used (specifically Pyramid).

I think over time, more frameworks will support this, and the overall
situation
will improve.

But overall, it seems that people are buying into the Python asyncio way of
doing things.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170913/b107c5b4/attachment.html>

From rodrigc at crodrigues.org  Thu Sep 14 15:06:24 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 14 Sep 2017 14:06:24 -0700
Subject: [Twisted-Python] Need doc for how to use asyncio with Twisted
Message-ID: <CAG=rPVfr2Z8K-pdeaUWNFzDLWnSojw16w8z6z=+d0GDbZ_+Niw@mail.gmail.com>

Since more people are looking at Python asyncio these days,
I am seeing more questions that people are asking for how
to use Python asyncio and Twisted.

The docs for using Python asyncio and Twisted are available,
but they are scattered in different places.  It would
be good to have a single .rst doc which has this info in one place

I created a ticket for this:

https://twistedmatrix.com/trac/ticket/9279


If anyone who is good at writing wants to help with this, let me
know and I can help review it.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170914/8585e96e/attachment.html>

From trac at twistedmatrix.com  Sun Sep 17 00:05:25 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 Sep 2017 06:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1505628325.64.5258261418572559899@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170917/51caf7a3/attachment.html>

From zadka.moshe at gmail.com  Mon Sep 18 09:35:10 2017
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Mon, 18 Sep 2017 15:35:10 +0000
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
In-Reply-To: <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>
References: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
 <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>
Message-ID: <CAOA_4jD2sHuMJ6XVQnDhbf5jJoQPZpc3Bp3a3cCMuoXvc1bKCA@mail.gmail.com>

On Mon, Sep 11, 2017 at 2:44 AM ex vito <ex.vitorino at gmail.com> wrote:

> Sidenote: A quick, mostly backwards compatible, change could probably add
> cwd to the existing per-process tuple in self.processes as an extra item,
> couldn't it?


No. Most usage of this tuple is unpacking, which makes it really really not
backwards compatible.


> > 4. Decide we're going with "incompatible change", and move processes to
> a private attribute.
>
> I see no reason for accessing those attributes from "outside of
> ProcessMonitor" but if Twisted claims not to break existing code without
> previous deprecation warning, such an approach would break that promise
> (full policy details here
> http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html
> ).
>

Specifically, I was asking about
http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#procedure-for-exceptions-to-this-policy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170918/0c9f76e3/attachment.html>

From ex.vitorino at gmail.com  Tue Sep 19 04:49:13 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Tue, 19 Sep 2017 11:49:13 +0100
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
In-Reply-To: <CAOA_4jD2sHuMJ6XVQnDhbf5jJoQPZpc3Bp3a3cCMuoXvc1bKCA@mail.gmail.com>
References: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
 <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>
 <CAOA_4jD2sHuMJ6XVQnDhbf5jJoQPZpc3Bp3a3cCMuoXvc1bKCA@mail.gmail.com>
Message-ID: <1504606D-20B4-40BF-BB94-31D21E012F43@gmail.com>


On 2017-09-18, at 16:35, Moshe Zadka <zadka.moshe at gmail.com> wrote:

> On Mon, Sep 11, 2017 at 2:44 AM ex vito <ex.vitorino at gmail.com> wrote:
> Sidenote: A quick, mostly backwards compatible, change could probably add cwd to the existing per-process tuple in self.processes as an extra item, couldn't it?
> 
> No. Most usage of this tuple is unpacking, which makes it really really not backwards compatible.

If that is the case, then I stand corrected. That would not be backwards compatible at all.


> > 4. Decide we're going with "incompatible change", and move processes to a private attribute.
> 
> I see no reason for accessing those attributes from "outside of ProcessMonitor" but if Twisted claims not to break existing code without previous deprecation warning, such an approach would break that promise (full policy details here http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html).
> 
> Specifically, I was asking about http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#procedure-for-exceptions-to-this-policy

We're on the same page, then (literally).

Quoting that section, with regards to incompatible changes, "Generally, the reason that one would want to do this is to give applications a performance enhancement or bug fix that could break behavior that unanticipated, hypothetical uses of an existing API (...)". Would this change fall under that? Maybe not. Then again, I understand that "Every change is unique", so maybe those words don't need to be taken in a strict sense.

Other than that, again, per that section's rules, not being a commiter myself, I'm in no position to approve such a change. I wonder, however, how "urgent" such a final change is to you and why a deprecation cycle does not fit your purpose (even though, admittedly, it may represent more effort).

My 2c.
--
exvito

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170919/c9a6b574/attachment.html>

From zadka.moshe at gmail.com  Tue Sep 19 08:49:39 2017
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Tue, 19 Sep 2017 14:49:39 +0000
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
In-Reply-To: <1504606D-20B4-40BF-BB94-31D21E012F43@gmail.com>
References: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
 <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>
 <CAOA_4jD2sHuMJ6XVQnDhbf5jJoQPZpc3Bp3a3cCMuoXvc1bKCA@mail.gmail.com>
 <1504606D-20B4-40BF-BB94-31D21E012F43@gmail.com>
Message-ID: <CAOA_4jCvNFW1f90KmhXdqmTK2bCxpxo+L3RA5jQ-Fva00ZqqRQ@mail.gmail.com>

On Tue, Sep 19, 2017 at 3:51 AM ex vito <ex.vitorino at gmail.com> wrote:


> Other than that, again, per that section's rules, not being a commiter
> myself, I'm in no position to approve such a change. I wonder, however, how
> "urgent" such a final change is to you and why a deprecation cycle does not
> fit your purpose (even though, admittedly, it may represent more effort).
>

I think that between the low likelihood that someone went crawling over the
attributes manually, the RoI of having a deprecation cycle with some
intermediate solution that later needs to be cleaned up, and the fact that
this would be a clean break (i.e., "AttributeError") rather than some
obscure error, I am at least interested in opinions about going the
exception route.

ProcMon is non-trivial to productionize, and I'm not aware of anyone even
using it in production, other than me, let alone crawling over its internal
state.

Moshe Z.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170919/541fc882/attachment.html>

From goffi at goffi.org  Tue Sep 19 14:59:08 2017
From: goffi at goffi.org (Goffi)
Date: Tue, 19 Sep 2017 22:59:08 +0200
Subject: [Twisted-Python] How to correctly run Sqlite with Twisted?
Message-ID: <3622183.l3x4ml2jUf@tazar2>

Hello,

I'm using Sqlite3 module through Twisted's enterpirse.adbapi, I create the 
ConnectionPool instance like this:

   self.dbpool = ConnectionPool("sqlite3", db_filename, 
check_same_thread=False)

You can see the code at https://repos.goffi.org/sat/file/tip/src/memory/sqlite.py

Sometime, the writing is failing with following exception:

  Failure instance: Traceback: <class 'sqlite3.OperationalError'>: database is 
locked

So I wonder if the database is correctly used, did anybody experienced 
something similar with Twisted and Sqlite ?

Should I just augment timeout as advised at https://stackoverflow.com/a/
8618328? Looks like more a workaround than a clean solution.

Python 2 documentation doesn't talk about check_same_thread argument, but 
Python 3 at https://docs.python.org/3.5/library/sqlite3.html#sqlite3.connect 
says that writing operation should be serialized by the user (I thought it was 
the default as said in https://sqlite.org/threadsafe.html), how should I 
achieve that?

Also PRAGMA are not working (specially "PRAGMA foreign_keys = ON"), I guess 
because of multi-threading, what is the good way to activate foreign_keys for 
all following request?

Thanks in advance

Goffi


From zadka.moshe at gmail.com  Tue Sep 19 15:22:37 2017
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Tue, 19 Sep 2017 21:22:37 +0000
Subject: [Twisted-Python] How to correctly run Sqlite with Twisted?
In-Reply-To: <3622183.l3x4ml2jUf@tazar2>
References: <3622183.l3x4ml2jUf@tazar2>
Message-ID: <CAOA_4jCL1QiHqq+k=+n4=zTz+htPc2uFUoHrorKQnhebgkz3pw@mail.gmail.com>

The best answer is probably https://github.com/alex/alchimia

On Tue, Sep 19, 2017 at 1:59 PM Goffi <goffi at goffi.org> wrote:

> Hello,
>
> I'm using Sqlite3 module through Twisted's enterpirse.adbapi, I create the
> ConnectionPool instance like this:
>
>    self.dbpool = ConnectionPool("sqlite3", db_filename,
> check_same_thread=False)
>
> You can see the code at
> https://repos.goffi.org/sat/file/tip/src/memory/sqlite.py
>
> Sometime, the writing is failing with following exception:
>
>   Failure instance: Traceback: <class 'sqlite3.OperationalError'>:
> database is
> locked
>
> So I wonder if the database is correctly used, did anybody experienced
> something similar with Twisted and Sqlite ?
>
> Should I just augment timeout as advised at https://stackoverflow.com/a/
> 8618328? Looks like more a workaround than a clean solution.
>
> Python 2 documentation doesn't talk about check_same_thread argument, but
> Python 3 at
> https://docs.python.org/3.5/library/sqlite3.html#sqlite3.connect
> says that writing operation should be serialized by the user (I thought it
> was
> the default as said in https://sqlite.org/threadsafe.html), how should I
> achieve that?
>
> Also PRAGMA are not working (specially "PRAGMA foreign_keys = ON"), I guess
> because of multi-threading, what is the good way to activate foreign_keys
> for
> all following request?
>
> Thanks in advance
>
> Goffi
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170919/f7badc12/attachment.html>

From werner at thieprojects.ch  Tue Sep 19 15:50:23 2017
From: werner at thieprojects.ch (Werner Thie)
Date: Tue, 19 Sep 2017 11:50:23 -1000
Subject: [Twisted-Python] How to correctly run Sqlite with Twisted?
In-Reply-To: <3622183.l3x4ml2jUf@tazar2>
References: <3622183.l3x4ml2jUf@tazar2>
Message-ID: <3a3c9a0f-9412-e09f-959e-287beebc137c@thieprojects.ch>

Aloha Goffi

I'm using minimal code like the one below for MySQL interaction, should be easy to transition this to SQLite

from twisted.internet   import reactor, task, defer

from store import Store

#debugging func, printing the result on the console
def _transformResult(result):
##  print '####', result
   if result:
       return result[0]  #unpack the list
   else:
       return None

class Somestore(object):
   name = "somestore"

   def __init__(self, dbapiName, **params):
     self.store = Store(dbapiName, **params)
     ka = task.LoopingCall(self.keepAlive)             #db keepalive
     ka.start(307)

   def dbdisconn(self, reason):
     print 'db disconnected for ', reason

   def keepAlive(self):
     try:
       d = self.store.runQuery('SELECT 1')
       d.addErrback(self.dbdisconn)
     except:
       pass
     else:
       pass        #do whatever MUST occur here in all cases

   def getTableCount(self):
     d = self.store.runQuery('SELECT tables FROM user WHERE servername = %s', 'total')
     d.addCallback(_transformResult)
     d.addErrback(self.dbdisconn)
     return d

   def setUserCount(self, waiting, playing, tables):
     d = self.store.runOperation('UPDATE user SET waiting = %s, playing = %s, tables = %s WHERE servername = %s', waiting, playing, tables, self.loggername)
     d.addErrback(self.dbdisconn)
     return d


module store.py
from itertools import izip

from twisted.enterprise import adbapi

using it with canned queries like


class Store(object):
   def __init__(self, dbapiName, **params):
     self.__pool   = adbapi.ConnectionPool(dbapiName, **params)
     print self.__pool.__getstate__()
     self.runOperation('SET autocommit = %s', 1)

   def runQuery(self, query, *args):
     d = self.__pool.runInteraction(self.mapQuery, query, args)
     return d

   def runInsert(self, query, *args):
     def mapQ(curs, query, *args):
       try:
         curs.execute(query, *args)
       except adbapi.ConnectionLost:
         print
         print '++++++++++++ rerunning query'
         print
         curs.execute(query, *args)                    #simply resend query, assuming cp_reconnect=True
         return {'lastrowid': -1}
       return {'lastrowid': curs.lastrowid}
     d = self.__pool.runInteraction(mapQ, query, args)
     return d

   def mapQuery(self, curs, query, *args):
     try:
       curs.execute(query, *args)
     except adbapi.ConnectionLost:
       curs.execute(query, *args)                    #simply resend query, assuming cp_reconnect=True
     result = curs.fetchall()
     columns = [d[0] for d in curs.description]
     return [dict(zip(columns, r)) for r in result]

   def runOperation(self, query, *args):
     d = self.__pool.runOperation(query, args)
     return d


On 9/19/2017 10:59 AM, Goffi wrote:
> Hello,
>
> I'm using Sqlite3 module through Twisted's enterpirse.adbapi, I create the
> ConnectionPool instance like this:
>
>     self.dbpool = ConnectionPool("sqlite3", db_filename,
> check_same_thread=False)
>
> You can see the code at https://repos.goffi.org/sat/file/tip/src/memory/sqlite.py
>
> Sometime, the writing is failing with following exception:
>
>    Failure instance: Traceback: <class 'sqlite3.OperationalError'>: database is
> locked
>
> So I wonder if the database is correctly used, did anybody experienced
> something similar with Twisted and Sqlite ?
>
> Should I just augment timeout as advised at https://stackoverflow.com/a/
> 8618328? Looks like more a workaround than a clean solution.
>
> Python 2 documentation doesn't talk about check_same_thread argument, but
> Python 3 at https://docs.python.org/3.5/library/sqlite3.html#sqlite3.connect
> says that writing operation should be serialized by the user (I thought it was
> the default as said in https://sqlite.org/threadsafe.html), how should I
> achieve that?
>
> Also PRAGMA are not working (specially "PRAGMA foreign_keys = ON"), I guess
> because of multi-threading, what is the good way to activate foreign_keys for
> all following request?
>
> Thanks in advance
>
> Goffi
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From exarkun at twistedmatrix.com  Tue Sep 19 16:19:41 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 19 Sep 2017 18:19:41 -0400
Subject: [Twisted-Python] How to correctly run Sqlite with Twisted?
In-Reply-To: <3622183.l3x4ml2jUf@tazar2>
References: <3622183.l3x4ml2jUf@tazar2>
Message-ID: <CAEeXt4OuTv4uC_CqNx-qXsTjSTZ_GGGva9+j-febw_w+MkTC9g@mail.gmail.com>

On Tue, Sep 19, 2017 at 4:59 PM, Goffi <goffi at goffi.org> wrote:

> Hello,
>
> I'm using Sqlite3 module through Twisted's enterpirse.adbapi, I create the
> ConnectionPool instance like this:
>
>    self.dbpool = ConnectionPool("sqlite3", db_filename,
> check_same_thread=False)
>
> You can see the code at https://repos.goffi.org/sat/
> file/tip/src/memory/sqlite.py
>
> Sometime, the writing is failing with following exception:
>
>   Failure instance: Traceback: <class 'sqlite3.OperationalError'>:
> database is
> locked
>
> So I wonder if the database is correctly used, did anybody experienced
> something similar with Twisted and Sqlite ?
>
>
"Correctly" has so many shades.  Here's another possible direction for
exploration:

    https://github.com/twisted/axiom

Jean-Paul
http://as.ynchrono.us/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170919/17e769b4/attachment.html>

From ex.vitorino at gmail.com  Wed Sep 20 02:24:43 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Wed, 20 Sep 2017 09:24:43 +0100
Subject: [Twisted-Python] How to correctly run Sqlite with Twisted?
In-Reply-To: <3622183.l3x4ml2jUf@tazar2>
References: <3622183.l3x4ml2jUf@tazar2>
Message-ID: <C8375A85-4F0D-41DF-A028-5953E759AC34@gmail.com>

On 2017-09-19, at 21:59, Goffi <goffi at goffi.org> wrote:

> I'm using Sqlite3 module through Twisted's enterpirse.adbapi, I create the 
> ConnectionPool instance like this:
> 
>   self.dbpool = ConnectionPool("sqlite3", db_filename, 
> check_same_thread=False)
> 
> You can see the code at https://repos.goffi.org/sat/file/tip/src/memory/sqlite.py
> 
> Sometime, the writing is failing with following exception:
> 
>  Failure instance: Traceback: <class 'sqlite3.OperationalError'>: database is 
> locked
> 
> So I wonder if the database is correctly used, did anybody experienced 
> something similar with Twisted and Sqlite ?
> 
> Should I just augment timeout as advised at https://stackoverflow.com/a/
> 8618328? Looks like more a workaround than a clean solution.
> 
> Python 2 documentation doesn't talk about check_same_thread argument, but 
> Python 3 at https://docs.python.org/3.5/library/sqlite3.html#sqlite3.connect 
> says that writing operation should be serialized by the user (I thought it was 
> the default as said in https://sqlite.org/threadsafe.html), how should I 
> achieve that?
> 
> Also PRAGMA are not working (specially "PRAGMA foreign_keys = ON"), I guess 
> because of multi-threading, what is the good way to activate foreign_keys for 
> all following request?


I would subscribe to Moshe's and Jean-Paul's suggestions of using higher-level tools to handle database interactions. If, however, you'd rather continue with the adbapi approach, here are a few tips that may help your diagnostic, given that behavior you are observing seems to result from multi-threaded/multi-process interactions:

- Confirm you have no other SQLite client at play, locking your data somehow.
- Correct serialization of independent SQL queries/transactions may be a complex topic.
- But you can try forcing the ConnectionPool thread count to 1 via the cp_min/cp_max init args.
- For your PRAGMA statements you should probably use the cp_openfun ConnectionPool init arg.
- Using the undocumented "check_same_thread" on Python 2 seems pointless.
  (not sure it is, though; I did not look at the underlying Python 2 stdlib code)

Lastly:

I have experienced issues with SQLite3 + Python on one occasion in the past: depending on the platform, SQLite itself is/is-not distributed with Python, IIRC; for diagnostics, confirm the exact version of the sqlite .SO / .DLL in use and, ideally, its compile time options. I recall my troubles were between CentOS 5 vs. 6, due to the specific SQLite versions included in each distribution.

A final thought, from the realm of intuition: if I were targeting heavily concurrent access to a database (subjective, yes), I'd consider replacing SQLite with some other engine. SQLite is a great tool for many purposes, but concurrent access is not its strong point (see https://www.sqlite.org/lockingv3.html).

Cheers,
--
exvito


From ex.vitorino at gmail.com  Wed Sep 20 02:32:21 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Wed, 20 Sep 2017 09:32:21 +0100
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
In-Reply-To: <CAOA_4jCvNFW1f90KmhXdqmTK2bCxpxo+L3RA5jQ-Fva00ZqqRQ@mail.gmail.com>
References: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
 <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>
 <CAOA_4jD2sHuMJ6XVQnDhbf5jJoQPZpc3Bp3a3cCMuoXvc1bKCA@mail.gmail.com>
 <1504606D-20B4-40BF-BB94-31D21E012F43@gmail.com>
 <CAOA_4jCvNFW1f90KmhXdqmTK2bCxpxo+L3RA5jQ-Fva00ZqqRQ@mail.gmail.com>
Message-ID: <F976B335-3BC0-495F-BEE3-B08DB523262D@gmail.com>


On 2017-09-19, at 15:49, Moshe Zadka <zadka.moshe at gmail.com> wrote:

> On Tue, Sep 19, 2017 at 3:51 AM ex vito <ex.vitorino at gmail.com> wrote:
>  
> Other than that, again, per that section's rules, not being a commiter myself, I'm in no position to approve such a change. I wonder, however, how "urgent" such a final change is to you and why a deprecation cycle does not fit your purpose (even though, admittedly, it may represent more effort).
> 
> I think that between the low likelihood that someone went crawling over the attributes manually, the RoI of having a deprecation cycle with some intermediate solution that later needs to be cleaned up, and the fact that this would be a clean break (i.e., "AttributeError") rather than some obscure error, I am at least interested in opinions about going the exception route.
> 
> ProcMon is non-trivial to product ionize, and I'm not aware of anyone even using it in production, other than me, let alone crawling over its internal state.


Agreed. For completeness, the code I work with does not make use of ProcMon and I don't recall having ever used it.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170920/02e0e8c7/attachment.html>

From goffi at goffi.org  Wed Sep 20 06:01:55 2017
From: goffi at goffi.org (goffi)
Date: Wed, 20 Sep 2017 14:01:55 +0200
Subject: [Twisted-Python] How to correctly run Sqlite with Twisted?
In-Reply-To: <C8375A85-4F0D-41DF-A028-5953E759AC34@gmail.com>
References: <3622183.l3x4ml2jUf@tazar2>
 <C8375A85-4F0D-41DF-A028-5953E759AC34@gmail.com>
Message-ID: <c47995716fd3a54ef19849acc98da3bd@goffi.org>

Le 2017-09-20 10:24, ex vito a écrit :
> On 2017-09-19, at 21:59, Goffi <goffi at goffi.org> wrote:
> 
>> [SNIP]
> 
> 
> I would subscribe to Moshe's and Jean-Paul's suggestions of using
> higher-level tools to handle database interactions.
> 
>  [SNIP]
> 
> A final thought, from the realm of intuition: if I were targeting
> heavily concurrent access to a database (subjective, yes), I'd
> consider replacing SQLite with some other engine. SQLite is a great
> tool for many purposes, but concurrent access is not its strong point
> (see https://www.sqlite.org/lockingv3.html).


Thanks for all your answers! I'll check every options before taking a 
decision, but I'm quite seduced by Alchimia, the SqlAlchemy wrapper. I'm 
a bit worrying because it has not seen any commit since 11 months (I 
have had bad experiences with unmaintained libraries). This said, the 
wrapper is thin, I can probably maintain it myself if needed. As a 
bonus, it would allow me to propose other storage backends than Sqlite.

For the use case, it's used mainly for cache and various data for an 
XMPP client which can handle several users at the same time, and only 
one backend is accessing the database. There is already an automatic 
update mechanism that I would have to adapt, but it may simplify 
everything at the end. Also I need to check if Full Text Search and Json 
data type are easily usable, but it seems than plain SQL request are 
still possible at worst.


Thanks again for your answers, it's really helpful!

Goffi


From rodrigc at crodrigues.org  Wed Sep 20 10:42:47 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 20 Sep 2017 09:42:47 -0700
Subject: [Twisted-Python] Need help reviewing improvement to inlineCallbacks
Message-ID: <CAG=rPVeENOgy_xN2Hpgt9E9L_79xNQ7duef92Nrs+s9sgmsUVw@mail.gmail.com>

Pierre Tardy, the main developer of Buildbot,
submitted this patch to add full stack traces
to inlineCallbacks:

https://github.com/twisted/twisted/pull/814

I think the patch looks good, but can someone with more
knowledge of inlineCallbacks review it?

Right now, if you have a stack of inlineCallbacks,
andan exception is thrown, some of the stacktrace is
lost.  By adding full stack traces to inlineCallbacks,
this greatly improves the debuggability of software like
Buildbot, which makes heavy use of inlineCallbacks.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170920/06358175/attachment.html>

From todd at chaka.net  Wed Sep 20 14:07:07 2017
From: todd at chaka.net (Todd Chapman)
Date: Wed, 20 Sep 2017 16:07:07 -0400
Subject: [Twisted-Python] Truly distributed tests with Twisted
Message-ID: <CAG54imbyCC+hPCsEe_+-dpX13G7YQVrssx+1sqFv0BQABq99uw@mail.gmail.com>

Hi All,

I have been using DistTrialRunner with great success, but now I would like
to run tests both in parallel and distributed across a set of testing
nodes. Can anyone recommend existing solutions for this?

I tried extending DistTrialRunner and using a generator to feed it some
tests, but it has some limitations that made this non-trivial.

Thanks!

-Todd
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170920/a1b1284a/attachment.html>

From bmurdock at gmail.com  Wed Sep 20 15:33:04 2017
From: bmurdock at gmail.com (Bryan Murdock)
Date: Wed, 20 Sep 2017 15:33:04 -0600
Subject: [Twisted-Python] verilog simulation calling out to twisted
Message-ID: <CAPY2A7NCudzuHpmXCVC3vhGC2OgK=szSkNvkcJdOy=yc-fOS8A@mail.gmail.com>

Hi,

I've been writing Verilog simulations for years, and tinkering with
Python for years.  In the last couple years I have been calling out to
Python from Verilog simulations, which has been awesome.  Just this
week I tried twisted out for the first time to write a simple custom
TCP server.  It was a great experience and even though I still know
next to nothing about twisted, I think I'm in love :-)

Now I have a crazy idea.  I'd like that Python code that my Verilog
calls out to to use twisted.  OK, actually I've already done that, my
Verilog calls out to my that TCP server that I wrote.  I had to spawn
a thread and run the server in that thread so that the Verilog could
continue to do stuff in parallel with the server.  It's working great.

The real crazy thing I want is for the Verilog to call out to a
twisted TCP client as well.  Again, I need the client and server to
not block the Verilog.  My first attempt was to run client and server
in two separate threads.  I start the server thread, then I start the
client thread and only in the client thread do I call reactor.run().
It seems to not be working.  Before I try to figure out why, I thought
I might ask here if it even should work.

Here's a different way to explain it, in case that helps:

main thread is verilog which spawns server_thread

def server_thread():
    reactor.listenTCP(ServerFactory())

main thread spawns client_thread

def client_thread()
    reactor.connectTCP(ClientFactory())
    reactor.run()

I read the page on threads in twisted and I'm guessing  Would it be
better to have the main thread just spawn one thread that does this?

def client_server_thread():
    reactor.listenTCP(...)
    reactor.connectTCP(...)
    reactor.run()

Hmm, as I finish typing this all out, I'm realizing that surely
someone has written at TCP proxy (essentially what this verilog
simulation is doing) in twisted before.  A quick internet search tells
me yes...and of course they are not using threads.

The way the whole verilog mess is written right now it would be much
easier to use separate threads for client and server.  Is that
possible?  If not I'll have to find a way to justify re-architecting
the verilog mess.

Thanks,

Bryan


From zadka.moshe at gmail.com  Wed Sep 20 19:13:20 2017
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Thu, 21 Sep 2017 01:13:20 +0000
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
In-Reply-To: <F976B335-3BC0-495F-BEE3-B08DB523262D@gmail.com>
References: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
 <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>
 <CAOA_4jD2sHuMJ6XVQnDhbf5jJoQPZpc3Bp3a3cCMuoXvc1bKCA@mail.gmail.com>
 <1504606D-20B4-40BF-BB94-31D21E012F43@gmail.com>
 <CAOA_4jCvNFW1f90KmhXdqmTK2bCxpxo+L3RA5jQ-Fva00ZqqRQ@mail.gmail.com>
 <F976B335-3BC0-495F-BEE3-B08DB523262D@gmail.com>
Message-ID: <CAOA_4jA+0BmTbjM6DW4GCZDvVqNLddGC_MTOZyY7f3DsGoL+pw@mail.gmail.com>

OK I opened a ticket with a plan, after discussing with Mark Williams.

1. Make a custom class that implements the Sequence ABC and pretends to be
sized the old size.
2. Internally all access will be moved to attributes
3. All sequence methods will be marked as Deprecated. We'll kill them in a
year.
4. processes will become _processes, with a Deprecated .processes accessor,
again for backwards compatibility.

I am technically changing the class of a thing from a tuple to a different
class, but I don't think that this can be in general relied on. The API
docs do not mention the attribute, much less promise the concrete class of
its contents.

Objections?

Ticket: https://twistedmatrix.com/trac/ticket/9287

On Wed, Sep 20, 2017 at 1:34 AM ex vito <ex.vitorino at gmail.com> wrote:

> On 2017-09-19, at 15:49, Moshe Zadka <zadka.moshe at gmail.com> wrote:
>
> On Tue, Sep 19, 2017 at 3:51 AM ex vito <ex.vitorino at gmail.com> wrote:
>
>
>
>> Other than that, again, per that section's rules, not being a commiter
>> myself, I'm in no position to approve such a change. I wonder, however, how
>> "urgent" such a final change is to you and why a deprecation cycle does not
>> fit your purpose (even though, admittedly, it may represent more effort).
>>
>
> I think that between the low likelihood that someone went crawling over
> the attributes manually, the RoI of having a deprecation cycle with some
> intermediate solution that later needs to be cleaned up, and the fact that
> this would be a clean break (i.e., "AttributeError") rather than some
> obscure error, I am at least interested in opinions about going the
> exception route.
>
> ProcMon is non-trivial to product ionize, and I'm not aware of anyone even
> using it in production, other than me, let alone crawling over its internal
> state.
>
>
> Agreed. For completeness, the code I work with does not make use of
> ProcMon and I don't recall having ever used it.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170921/0fb2207b/attachment.html>

From ex.vitorino at gmail.com  Thu Sep 21 04:07:19 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Thu, 21 Sep 2017 11:07:19 +0100
Subject: [Twisted-Python] verilog simulation calling out to twisted
In-Reply-To: <CAPY2A7NCudzuHpmXCVC3vhGC2OgK=szSkNvkcJdOy=yc-fOS8A@mail.gmail.com>
References: <CAPY2A7NCudzuHpmXCVC3vhGC2OgK=szSkNvkcJdOy=yc-fOS8A@mail.gmail.com>
Message-ID: <4C1BFA94-0D0B-4594-99A1-4C32D36CAD29@gmail.com>

On 2017-09-20, at 22:33, Bryan Murdock <bmurdock at gmail.com> wrote:

> I've been writing Verilog simulations for years, and tinkering with
> Python for years.  In the last couple years I have been calling out to
> Python from Verilog simulations, which has been awesome.  Just this
> week I tried twisted out for the first time to write a simple custom
> TCP server.  It was a great experience and even though I still know
> next to nothing about twisted, I think I'm in love :-)

Welcome to the club! :)


> Now I have a crazy idea.  I'd like that Python code that my Verilog
> calls out to to use twisted.  OK, actually I've already done that, my
> Verilog calls out to my that TCP server that I wrote.  I had to spawn
> a thread and run the server in that thread so that the Verilog could
> continue to do stuff in parallel with the server.  It's working great.

Can you clarify what "your Verilog" is? Python code running a Verilog simulation, maybe? Something else?


> The real crazy thing I want is for the Verilog to call out to a
> twisted TCP client as well.  Again, I need the client and server to
> not block the Verilog.  My first attempt was to run client and server
> in two separate threads.  I start the server thread, then I start the
> client thread and only in the client thread do I call reactor.run().
> It seems to not be working.  Before I try to figure out why, I thought
> I might ask here if it even should work.

I do not fully understand this: if "Verilog calls out to TCP server" means it establishes a TCP connection (does it?) what does "Verilog calls out to a TCP client" mean? Does it call a function/method with async Twisted code? How does it handle the fact that the result is async?

In general you are able to run concurrent (not parallel) code for TCP clients and servers within the same thread - after all, that's the key idea behind async programming with Twisted, with the reactor driving concurrent handling of multiple connections and events.

Of course, again, in general, you'll want your code not to block and to do its things as fast as possible so that control can be returned to the reactor (so that it is ready to quickly handle other events).

A few notes about threads and Twisted:
- IIRC the reactor should (must?) be running on the main thread.
- Threads are a good fit to call out to "I/O blocking code" from Twisted.
  (talking to a database or doing heavy disk I/O, for example)

A few notes about threads and Python:
- Python (CPython that is) does not run two CPU-bound threads in parallel.
  (IOW, it can't simultaneously use two CPUs/CPU-cores in the system)
- That's due to the GIL: there's lot's of information about it on the internet.
- You will get lower I/O responsiveness even with a single CPU-bound + one I/O bound thread.


If "Verilog" needs to continue working and is, I assume, CPU-bound, you will probably be better off by having that run in a process and your Twisted code in a single-threaded separate process.

Benefits:
- Better separation of concerns.
- No mixing of sync/async code which at times can lead to complex design/code.
- No shared memory between "Verilog" and Twisted code.
- "Verilog" can use as much CPU as it needs.
- "Twisted" will be as responsive as possible.
- Easier to test.

Costs:
- Need to define how to start both processes.
- Need to define how those processes communicate.
- All communication between processes needs to be serialized (no shared memory).


These are a few general ideas you may want to consider. Like I said, I couldn't fully grasp where you're currently at and what exactly you're trying to achieve but hopefully these comments will serve as guidance.

Cheers,
--
exvito


From ex.vitorino at gmail.com  Thu Sep 21 04:11:44 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Thu, 21 Sep 2017 11:11:44 +0100
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
In-Reply-To: <CAOA_4jA+0BmTbjM6DW4GCZDvVqNLddGC_MTOZyY7f3DsGoL+pw@mail.gmail.com>
References: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
 <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>
 <CAOA_4jD2sHuMJ6XVQnDhbf5jJoQPZpc3Bp3a3cCMuoXvc1bKCA@mail.gmail.com>
 <1504606D-20B4-40BF-BB94-31D21E012F43@gmail.com>
 <CAOA_4jCvNFW1f90KmhXdqmTK2bCxpxo+L3RA5jQ-Fva00ZqqRQ@mail.gmail.com>
 <F976B335-3BC0-495F-BEE3-B08DB523262D@gmail.com>
 <CAOA_4jA+0BmTbjM6DW4GCZDvVqNLddGC_MTOZyY7f3DsGoL+pw@mail.gmail.com>
Message-ID: <3E9E49FE-2147-4855-B5E7-97E5F8F34049@gmail.com>

On 2017-09-21, at 2:13, Moshe Zadka <zadka.moshe at gmail.com> wrote:

> OK I opened a ticket with a plan, after discussing with Mark Williams.
> 
> 1. Make a custom class that implements the Sequence ABC and pretends to be sized the old size.
> 2. Internally all access will be moved to attributes
> 3. All sequence methods will be marked as Deprecated. We'll kill them in a year.
> 4. processes will become _processes, with a Deprecated .processes accessor, again for backwards compatibility.
> 
> I am technically changing the class of a thing from a tuple to a different class, but I don't think that this can be in general relied on. The API docs do not mention the attribute, much less promise the concrete class of its contents.

Walks like a duck, quacks like a duck. Sounds like a clean approach.


> Objections?
> 
> Ticket: https://twistedmatrix.com/trac/ticket/9287

I'd say go for it.
--
exvito

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170921/bd452057/attachment.html>

From rodrigc at crodrigues.org  Thu Sep 21 07:43:02 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 21 Sep 2017 06:43:02 -0700
Subject: [Twisted-Python] Twisted 17.5 vs txkube
In-Reply-To: <CAEeXt4OXoSUzEmXU-TGrD=iqTuy7goKqp2J2b8vPJi1Mamc4Aw@mail.gmail.com>
References: <CAEeXt4OXoSUzEmXU-TGrD=iqTuy7goKqp2J2b8vPJi1Mamc4Aw@mail.gmail.com>
Message-ID: <CAG=rPVf_x9KZFOcv4_9k3j=rkYO=oJnROLf8kJZgTCrN6mUOyw@mail.gmail.com>

I submitted one pull request, based on Amber's previous patch:

https://github.com/LeastAuthority/txkube/pull/150

that brings the test failures down to only 1 failed test with Twisted
17.5.0 on Python 2.7.

For the last failing test, it looks like
It looks like changes which went into Twisted 17.1 for HostnameEndpoint and
SSL here:
https://github.com/twisted/twisted/pull/624

are causing that test to fail.  I'm not so familiar with Endpoints and SSL,
so that will take a while for me to figure out.

--
Craig


On Wed, Aug 30, 2017 at 5:05 AM, Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> Hello,
>
> Sadly the txkube test suite is still pretty busted against Twisted 17.5.
> It was broken for a long time with Twisted 17.1 as well.  I'm not sure if
> these are exactly the same problems or not but they look somewhat related.
>
> https://travis-ci.org/LeastAuthority/txkube/builds/269920984
>
> If anyone feels like getting to the bottom of this, I'd appreciate it.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170921/b432a365/attachment.html>

From bmurdock at gmail.com  Thu Sep 21 12:31:00 2017
From: bmurdock at gmail.com (Bryan Murdock)
Date: Thu, 21 Sep 2017 12:31:00 -0600
Subject: [Twisted-Python] verilog simulation calling out to twisted
In-Reply-To: <4C1BFA94-0D0B-4594-99A1-4C32D36CAD29@gmail.com>
References: <CAPY2A7NCudzuHpmXCVC3vhGC2OgK=szSkNvkcJdOy=yc-fOS8A@mail.gmail.com>
 <4C1BFA94-0D0B-4594-99A1-4C32D36CAD29@gmail.com>
Message-ID: <CAPY2A7Op1duKKzvwNBh2H3=jq-4pfXO1NYucqZeRUDyQXaVppw@mail.gmail.com>

On Thu, Sep 21, 2017 at 4:07 AM, ex vito <ex.vitorino at gmail.com> wrote:
> On 2017-09-20, at 22:33, Bryan Murdock <bmurdock at gmail.com> wrote:
>
> Welcome to the club! :)

Thanks!

>> Now I have a crazy idea.  I'd like that Python code that my Verilog
>> calls out to to use twisted.  OK, actually I've already done that, my
>> Verilog calls out to my that TCP server that I wrote.  I had to spawn
>> a thread and run the server in that thread so that the Verilog could
>> continue to do stuff in parallel with the server.  It's working great.
>
> Can you clarify what "your Verilog" is? Python code running a Verilog simulation, maybe? Something else?
<snip/>
> I do not fully understand this: if "Verilog calls out to TCP server" means it establishes a TCP connection (does it?) what does "Verilog calls out to a TCP client" mean? Does it call a function/method with async Twisted code? How does it handle the fact that the result is async?

Sorry, I was worried that this would be too hard to explain and/or I
may be giving too many details and confusing the issue.  Let me try
again.  It's probably simplest to think of the whole simulation as a
TCP proxy.  It looks like this:

some TCP client process <--> Python TCP Server <--> Verilog <-->
Python TCP Client <--> some TCP server

The Verilog, Python TCP server, and Python TCP client are all running
in the same process (some TCP client and some TCP server can be a web
browser and web server or whatever).  The Verilog code starts up,
calls a python function to start the Python TCP Server as a thread,
calls another python function to start the Python TCP Client as a
thread, and then essentially just loops asking (polling) the Python
TCP Server if it has any data, if so, it calls a function to send that
data to the Python TCP Client.  It does the same in reverse to flow
data from client to server.

I originally wrote the Python TCP Client and Server as low-level
socket code, handling only one connection at a time and not
automatically reconnecting if a connection was lost.  All the
downsides of using multiple processes instead of threads that you
listed are exactly the reasons I used threads.  Verilog has no support
for spawning subprocesses or doing interprocess communication.  It
can't spawn threads either, to be fair though[1].  I have to do "real
programming" things like that by calling python functions.  Threads
just seemed easier at the time because I can just use a Queue to get
data to/from the server and client threads from/to the Verilog.  And
it all worked great.

Then, when I went to add support for multiple connections and
auto-reconnects I discovered twisted.  I rewrote the Python TCP server
and client with twisted but now data doesn't flow.  I assume that's
because the client and server are making thread-unsafe calls to the
reactor.  Is that true?

(By the way, I can run the client and server standalone as separate
processes, without verilog involved, and they work fine that way.  I
have also replaced the twisted Python TCP Client with my original
socket-based TCP client and everything works fine.  It's just when I
try to use twisted for both client and server that it fails).

> In general you are able to run concurrent (not parallel) code for TCP clients and servers within the same thread - after all, that's the key idea behind async programming with Twisted, with the reactor driving concurrent handling of multiple connections and events.

Right, I think the solution is going to have to be: have verilog spawn
one thread that runs the Python TCP Server and Client.  Or start them
both as subprocesses and figure out how to communicate with them, I
guess.

Bryan

1. Aside from it's "green threads" that it uses to model concurrent
digital logic


From hawkowl at atleastfornow.net  Sat Sep 23 04:22:01 2017
From: hawkowl at atleastfornow.net (Amber Hawkie Brown)
Date: Sat, 23 Sep 2017 20:22:01 +1000
Subject: [Twisted-Python] Twisted 17.9.0 Release Announcement
Message-ID: <D54C1AF3-9DE1-4A78-B48C-C07E9A59F8A2@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 17.9.0!

The highlights of this release are:

- More Python 3 porting, including twisted.mail.imap4, twisted.python.shortcut, twisted.python.rebuild, twisted.web.sux, twisted.web.microdom, and a ton of bugs and inconsistencies fixed.
- twistd on Python 3 now supports the dns, inetd, portforward, procmon, socks, and words plugins.
- HTTP/1.1 and HTTP/2 OPTIONS * request support in Twisted Web
- twist web now accepts the argument --add-header, which can be used to set things like HSTS headers without custom code
- Improvements to IMAP4 behaviour and several logic bugfixes
- Removal of outdated documentation and updates to make them work on Python 3
- Over 70 closed tickets overall.

For more information, check the NEWS file (link provided below).

You can find the downloads at <https://pypi.python.org/pypi/Twisted <https://pypi.python.org/pypi/Twisted>> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads <http://twistedmatrix.com/trac/wiki/Downloads>>). The NEWS file is also available at <https://github.com/twisted/twisted/blob/twisted-17.9.0/NEWS.rst <https://github.com/twisted/twisted/blob/twisted-17.9.0/NEWS.rst>>.

Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted!

Twisted Regards,
Amber Brown (HawkOwl)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170923/0edb9ed3/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP
URL: </pipermail/twisted-python/attachments/20170923/0edb9ed3/attachment.sig>

From glyph at twistedmatrix.com  Sat Sep 23 18:17:42 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Sep 2017 17:17:42 -0700
Subject: [Twisted-Python] Twisted 17.9.0 Release Announcement
In-Reply-To: <D54C1AF3-9DE1-4A78-B48C-C07E9A59F8A2@atleastfornow.net>
References: <D54C1AF3-9DE1-4A78-B48C-C07E9A59F8A2@atleastfornow.net>
Message-ID: <40952A36-03B0-4E25-91CF-592938860C53@twistedmatrix.com>

> On Sep 23, 2017, at 3:22 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 17.9.0!

A response befitting the amount of time I currently have available to invest:

"yay"

-g


From trac at twistedmatrix.com  Sun Sep 24 00:05:22 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 Sep 2017 06:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1506233122.8.3928339791071455232@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170924/1eebea36/attachment.html>

From adi at roiban.ro  Mon Sep 25 03:09:51 2017
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 25 Sep 2017 10:09:51 +0100
Subject: [Twisted-Python] What to do with the session for a t.w.Site after
 the previous session has expired
Message-ID: <CAFycZ9eQG+ts8USp6EzrBZ-VyHNzcMYttjH6+Vx96_DJas0Y7g@mail.gmail.com>

The main ticket is here  https://twistedmatrix.com/trac/ticket/9288

But the main discussion is on the PR.

I am writing this email, as a notification. Please follow up over PR.

----------

The bug is:

When you have a long-running request, (more than the sessionTimeout)
and you want to get the session at the end of the request, you get an
error like `twisted.internet.error.AlreadyCalled: Tried to cancel an
already-called event.`

The possibilities for fixing this (as described by Exarkun):

1. You get back the same Session object as you had before, but with
its lifetime extended as though you've just `touch()`'d it.
2. You get back a new Session object but with the same uid as the one
you had before with a life time of `sessionTimeout` starting at the
point of the `getSession` call.
3. You get back a new Session object with a different uid - basically
a whole new session, as if the previous one never existed.

Check the PR for the reason why you want Option 2 or 3.

Right now, we are on course of implementing Option 1.

If you think that Option 1 is wrong, please leave your feedback over the PR :)

Thanks,
-- 
Adi Roiban


From p.mayers at imperial.ac.uk  Thu Sep 28 08:18:16 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 28 Sep 2017 15:18:16 +0100
Subject: [Twisted-Python] mailing list settings
Message-ID: <ade46bda-1c21-06e1-6ae3-924dd7ff1307@imperial.ac.uk>

What's the current way to change list setting e.g. subscribed address? 
The mailman links seem to be giving tracebacks e.g.

exceptions.OSError: [Errno 24] Too many open files


From glyph at twistedmatrix.com  Thu Sep 28 09:54:20 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 28 Sep 2017 08:54:20 -0700
Subject: [Twisted-Python] mailing list settings
In-Reply-To: <ade46bda-1c21-06e1-6ae3-924dd7ff1307@imperial.ac.uk>
References: <ade46bda-1c21-06e1-6ae3-924dd7ff1307@imperial.ac.uk>
Message-ID: <7B4D93A4-B3F0-4DB8-BD95-6CA8E5BBEB3C@twistedmatrix.com>

On Sep 28, 2017, at 7:18 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> 
> What's the current way to change list setting e.g. subscribed address? The mailman links seem to be giving tracebacks e.g.
> 
> exceptions.OSError: [Errno 24] Too many open files


The list settings are in the same place.  This probably means somebody needs to restart a thing.  Not me though, at least not this week :-).

-g

From bmurdock at gmail.com  Thu Sep 28 10:29:32 2017
From: bmurdock at gmail.com (Bryan Murdock)
Date: Thu, 28 Sep 2017 10:29:32 -0600
Subject: [Twisted-Python] website down?
Message-ID: <CAPY2A7PSv_Txh+Ho29OtOk5jAB0K-e74+p+GPO0S_zU+k6CBjw@mail.gmail.com>

Looks like twistedmatrix.com is down.

Bryan


From mrw at enotuniq.org  Thu Sep 28 11:28:19 2017
From: mrw at enotuniq.org (Mark Williams)
Date: Thu, 28 Sep 2017 10:28:19 -0700
Subject: [Twisted-Python] mailing list settings
In-Reply-To: <ade46bda-1c21-06e1-6ae3-924dd7ff1307@imperial.ac.uk>
References: <ade46bda-1c21-06e1-6ae3-924dd7ff1307@imperial.ac.uk>
Message-ID: <1506619699.6074.1121552240.066A4945@webmail.messagingengine.com>

This should now be fixed.

-- 
  Mark Williams
  mrw at enotuniq.org

On Thu, Sep 28, 2017, at 07:18 AM, Phil Mayers wrote:
> What's the current way to change list setting e.g. subscribed address? 
> The mailman links seem to be giving tracebacks e.g.
> 
> exceptions.OSError: [Errno 24] Too many open files
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From mrw at enotuniq.org  Thu Sep 28 11:28:30 2017
From: mrw at enotuniq.org (Mark Williams)
Date: Thu, 28 Sep 2017 10:28:30 -0700
Subject: [Twisted-Python] website down?
In-Reply-To: <CAPY2A7PSv_Txh+Ho29OtOk5jAB0K-e74+p+GPO0S_zU+k6CBjw@mail.gmail.com>
References: <CAPY2A7PSv_Txh+Ho29OtOk5jAB0K-e74+p+GPO0S_zU+k6CBjw@mail.gmail.com>
Message-ID: <1506619710.6170.1121552616.3D673E1F@webmail.messagingengine.com>

This should now be fixed.

-- 
  Mark Williams
  mrw at enotuniq.org

On Thu, Sep 28, 2017, at 09:29 AM, Bryan Murdock wrote:
> Looks like twistedmatrix.com is down.
> 
> Bryan
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From bmurdock at gmail.com  Thu Sep 28 11:34:03 2017
From: bmurdock at gmail.com (Bryan Murdock)
Date: Thu, 28 Sep 2017 11:34:03 -0600
Subject: [Twisted-Python] website down?
In-Reply-To: <1506619710.6170.1121552616.3D673E1F@webmail.messagingengine.com>
References: <CAPY2A7PSv_Txh+Ho29OtOk5jAB0K-e74+p+GPO0S_zU+k6CBjw@mail.gmail.com>
 <1506619710.6170.1121552616.3D673E1F@webmail.messagingengine.com>
Message-ID: <CAPY2A7Oa3TC74CzQEerRXqDKWkL2UKYwm3cWtLxQN+C+KJsAWw@mail.gmail.com>

Thanks!

Bryan

On Thu, Sep 28, 2017 at 11:28 AM, Mark Williams <mrw at enotuniq.org> wrote:
> This should now be fixed.
>
> --
>   Mark Williams
>   mrw at enotuniq.org
>
> On Thu, Sep 28, 2017, at 09:29 AM, Bryan Murdock wrote:
>> Looks like twistedmatrix.com is down.
>>
>> Bryan
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From zadka.moshe at gmail.com  Thu Sep 28 21:43:07 2017
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Fri, 29 Sep 2017 03:43:07 +0000
Subject: [Twisted-Python] Theory and practice of Pull Requests
Message-ID: <CAOA_4jAQHwre6Eg+_aECAq9St-e+v0wVfGFkWftc5eTX7ARJLA@mail.gmail.com>

FYI, I opened https://twistedmatrix.com/trac/ticket/9292 which seeks to
realign our theory (what we say in CONTRIBUTING) and what we do in practice
regarding pull requests on GitHub. Please comment on the ticket if you see
any issues!

Moshe Z.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170929/f51624e0/attachment.html>

From rodrigc at crodrigues.org  Thu Sep 28 22:02:46 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 28 Sep 2017 21:02:46 -0700
Subject: [Twisted-Python] Theory and practice of Pull Requests
In-Reply-To: <CAOA_4jAQHwre6Eg+_aECAq9St-e+v0wVfGFkWftc5eTX7ARJLA@mail.gmail.com>
References: <CAOA_4jAQHwre6Eg+_aECAq9St-e+v0wVfGFkWftc5eTX7ARJLA@mail.gmail.com>
Message-ID: <CAG=rPVeHfBYo=hnFAyA5nzYMj06knCxW_JritS-xGp76nNvOpQ@mail.gmail.com>

Hi,

I have commented on that ticket with my suggestion for a GitHub commit
template.

I don't think we need to do anything drastic, but I think that we can
perform some small incremental improvements
that make the user experience of committing to Twisted more pleasant.

--
Craig

On Thu, Sep 28, 2017 at 8:43 PM, Moshe Zadka <zadka.moshe at gmail.com> wrote:

> FYI, I opened https://twistedmatrix.com/trac/ticket/9292 which seeks to
> realign our theory (what we say in CONTRIBUTING) and what we do in practice
> regarding pull requests on GitHub. Please comment on the ticket if you see
> any issues!
>
> Moshe Z.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170928/c9025f80/attachment.html>

From adi at roiban.ro  Sat Sep 30 15:15:03 2017
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 30 Sep 2017 22:15:03 +0100
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
Message-ID: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>

Hi,

I would like to re-start the conversation about migrating Trac tickets
to GitHub issues.

My main reason for doing this is to make it easier for people to
contribute to Twisted.

In CONTRIBUTING there is this info

`GitHub doesn't provide adequate tooling for its community.`

I don't know what is missing in GitHub and why overall Trac is better
than GitHub issues.

I know that GitHub Issues is simple and you can't save reports.

What are problems are there with GitHub issues, which are blocking the
migration?

Please send your thoughts.

Why you think that GitHub issues might be worst than Trac tickets :) ?

--------

Below are the things that I things we will lose when migrating to
GitHub Issues and which will require extra work.

1. We will no longer get the nice ticket reports.

I don't know how to get something like this just using GitHub... and I
think that we will need a separate web page which uses GitHub API to
create the reports.

2. We might lose the owners / authors of some comments as there might
not be a maping from Trac to GitHub. This might be mititage as we are
already using GitHub for login.

3. There is extra one-time work required to do the actual migration,
and decide how to translate Trac ticket attributes to GitHub Issue
attributes.

We might not get consensus on how to migrate the metadata and this can
be a blocker.

4. We will no longer get the weekly reports and need more work to
reimplement them based on GitHub.

5. Highscores will stop counting the contribution, and it needs more
work to reimplement it on top of GitHub. I have hacked the highscores
project and I can change it to work both historic Trac data and new
GitHub data.

----------------

Below are my arguments for migrating to GitHub issues:

1. With Twisted tickets/PR only handled on GitHub you can have
contributions which are done only by sending a PR, without creating an
issue. You find a bug, you fix it and send a PR.
You no longer need to go to Trac and create a ticket and then do all
the cross-links copy and pasting.

2. We no longer have the review history in Trac, and the review
discussions are split between Trac and GitHub.

I think that in the future we will move more review discussions in GitHub.

Having all the discussion in a single place will make it easier to
search for something.

You no longer need to search GitHub and Trac tickets.

3. With tickets on GitHub we should simplify the infrastructure.
I feel that lately there was not much time from current Twisted dev to
take care of Twisted infra.
>From what I can see, the servers are just restarted on an issue, but
there is no time to investigate what is wrong.

I think that Twisted dev should focus on Twisted code and not spend
time with the ticketing infrastructure.

4. With tickets in GitHub, we don't need extra tooling to close a
ticket when a PR is merged.

5. With tickets in GitHub I assume that a lot of contributors will
only have to care about a single management tool: GitHub.

They will no longer have to learn about Trac, how Trac keywords work
for a ticket and how a workflow is implemented in Trac for Twisted.
>From what I can see, we are not using the Trac workflows anyway, just
a hack to implementing something like a workflow by manually setting
various attributes of a ticket.


Thanks,

PS: For my private project  I am still using Trac for issues and
GitHub for PR and manage the tools to keep them in sync.
I am using the Trac ticket workflows with a dedicated state for a
ticket when it needs a review or when a review was done and it needs
changes.
-- 
Adi Roiban


From adi at roiban.ro  Sat Sep 30 15:26:08 2017
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 30 Sep 2017 22:26:08 +0100
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
In-Reply-To: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
References: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
Message-ID: <CAFycZ9d7DjPr3vu-WcEYU_rUP+y6-eXFqpfaT9eOT4mARUD6RQ@mail.gmail.com>

On 30 September 2017 at 22:15, Adi Roiban <adi at roiban.ro> wrote:

[snip]

> --------
>
> Below are the things that I things we will lose when migrating to
> GitHub Issues and which will require extra work.
>

[snip]

6. We will no longer get the tickets pending review reported on IRC.

Beside reimplementing this based on GitHub issues, there might be a
lot of work in getting
consensus about how to mark a PR as needs review.

There is this thread which talks about how to implement the review
workflow in a PR

https://twistedmatrix.com/pipermail/twisted-python/2016-May/030333.html

Maybe before migrating to GitHub issues, we should first agree on this issue.


[snip]

-- 
Adi Roiban


From adi at roiban.ro  Sat Sep 30 16:14:34 2017
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 30 Sep 2017 23:14:34 +0100
Subject: [Twisted-Python] Defining the review workflow on top of GitHub PR
Message-ID: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>

I am restarting this discussion
https://twistedmatrix.com/pipermail/twisted-python/2016-May/030333.html

I am starting a new thread since I want to keep the focus on the
review process / workflow / markers, and not on the things required to
accept a PR or do a review.

----------

> Proposing: Just open a pull request.  Any open pull request should be treated as part of the queue.

I don't like this. If you are not a comitter, you need to open a PR to
trigger the tests.

So you want to first open a PR, then wait for tests to execute, then
fix and only after that to request the review.

We can start with setting the title to have "[WIP]" marker, to let
others know that this is not yet ready... but then when changes are
required, the reviewer will have to set the WIP marker again.. and if
the reviewer is not a team member, it will not have rights to edit the
subject.

But I hope that we can have a bot which once a "please review" comment
is left, it will set a label.

> Accepting: A committer pushes the big green button;

+1 ... but maybe also leave a comment :)

> Reviewing: This is the potentially slightly odd part.  I believe a review that doesn't result in acceptance should close the PR.  We need to be careful to always include some text that explains that closing a PR does not mean that the change is rejected, just that the submitter must re-submit.  Initially this would just mean opening a new PR, but Mark Williams is working on a bot to re-open pull requests when a submitter posts a "please review" comment: https://github.com/markrwilliams/txghbot

Since we will have a bot for "please review", why not use the same bot
to set a label on "please make changes" ?

I think that closing a PR should mean that the work on that branch is
rejected :)

> Responding: A submitter can open a new PR, or, once we start running txghbot, reopen their closed PR.

As commented above, I am +1 for leaving a "please review" comment and
having a bot updating the labels.

> Viewing: https://github.com/twisted/twisted/pulls?utf8=✓&q=is%3Apr+is%3Aopen+-status%3Afailed

One we get the "please-review" and "changes-needed" labels it should
be eaiser to view the queue.


-------

Whem multiple reviewers are required, you can use the dedicated GitHub
Review message and approve it without hiting the merge button.

---------

I have no idea how other projects are managing the review queue.

Please send your feedback.

If we agree on a process based on managing the labes, I can work on
implemeting the required logic with a bot and GitHub hooks.

--------

We can also start by using the WIP marker

* while preparing the PR
* once changes are required and the author works on addressing the
changes requsted on review

Any PR which is open and does not have the WIP marker means that is
part of the queue.

----------


Thanks!

PS: I have checked pyca/crypography but I don't see any pattern there
and a lot of PR are merged without any comment
https://github.com/pyca/cryptography/pulls?q=is%3Apr+is%3Aclosed

-- 
Adi Roiban


From rodrigc at crodrigues.org  Sat Sep 30 18:30:34 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 30 Sep 2017 17:30:34 -0700
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
In-Reply-To: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
References: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
Message-ID: <CAG=rPVcU4HOsCTW+bGZopkCk644m=iXVPk2qhO6E3CLgz=CZEw@mail.gmail.com>

On Sat, Sep 30, 2017 at 2:15 PM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> I would like to re-start the conversation about migrating Trac tickets
> to GitHub issues.
>
> My main reason for doing this is to make it easier for people to
> contribute to Twisted.
>


I think migrating Twisted issues from Trac to GitHub is a good idea,
and will make it easier for people to interact with the project.



>
>
> 1. We will no longer get the nice ticket reports.
>
>

This is true.  However, I will make a guess that
not many people are actively interacting with the Twisted
project, and not really actively following bug activity in Trac.
So there is some loss there, but I think the project would survive and go
on.

One thing that I would like to point out is that the Buildbot
project was using Trac for their issue tracker, and then decided to
migrate their issues to GitHub.

They worked on a tool called trac2github that allowed them to
migrate tickets from Trac to GitHub, preserving history, and
also creating a link back to the original Trac issue:

https://lists.buildbot.net/pipermail/devel/2017-March/012341.html

For the buildbot project, I think this approach as worked out, and the
project has continued.

If the Twisted project decides to switch to GitHub for issues, then
possibly buildbot's
scripts and experience can be used as a template for such a migration.


--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170930/73298bcb/attachment.html>

From trac at twistedmatrix.com  Sun Sep  3 00:05:20 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 Sep 2017 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1504418720.93.252524548925975262@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170903/c9bcd384/attachment-0002.html>

From hawkowl at atleastfornow.net  Tue Sep  5 05:50:50 2017
From: hawkowl at atleastfornow.net (Amber Hawkie Brown)
Date: Tue, 5 Sep 2017 21:50:50 +1000
Subject: [Twisted-Python] Twisted 17.9.0 Release Candidate Announcement
Message-ID: <E79EEDB0-40E4-4C13-8D4C-64A73C80967E@atleastfornow.net>

Hello everyone! Time for yet another Twisted release. What's new this time you may ask?

- More Python 3 porting, including twisted.mail.imap4, twisted.python.shortcut, twisted.python.rebuild, twisted.web.sux, twisted.web.microdom, and a ton of bugs and inconsistencies fixed.
- twistd on Python 3 now supports the dns, inetd, portforward, procmon, socks, and words plugins.
- HTTP/1.1 and HTTP/2 OPTIONS * request support in Twisted Web
- twist web now accepts the argument --add-header, which can be used to set things like HSTS headers without custom code
- Improvements to IMAP4 behaviour and several logic bugfixes
- Removal of outdated documentation and updates to make them work on Python 3
- Over 70 closed tickets overall.

You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/17.9.0rc1/ , or you can try it out from PyPI:

    python -m pip install Twisted==17.9.0rc1

Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 17.9 will release in a week.

Twisted Regards,
Amber Brown
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP
URL: </pipermail/twisted-python/attachments/20170905/8719621c/attachment-0002.sig>

From rodrigc at crodrigues.org  Tue Sep  5 10:30:49 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 5 Sep 2017 09:30:49 -0700
Subject: [Twisted-Python] Twisted 17.9.0 Release Candidate Announcement
In-Reply-To: <E79EEDB0-40E4-4C13-8D4C-64A73C80967E@atleastfornow.net>
References: <E79EEDB0-40E4-4C13-8D4C-64A73C80967E@atleastfornow.net>
Message-ID: <CAG=rPVfbSfDf4yF3ntR+FgfispPg-r37giKvnfM_KDY10t7aNg@mail.gmail.com>

Can you or another Twisted developer code review this:
https://github.com/twisted/twisted/pull/867

The problem was originally reported to Buildbot by Christian Wenk who tried
to configure his buildbot, and couldn't send notification e-mails
when non-ASCII characters were in the sender name.

I worked on the fix, which was tested and verified by Christian.
Pierre Tardy did an initial code review, but wants to have
another person do an additional code review.

This problem also affects the Scrapy project, which uses Twisted for
sending e-mail.

This problem is coming up more frequently, especially with CI systems like
GitHub and GitLab which allow non-ASCII characters in the username portion
of e-mail addresses.

I'd like to get this fix into 17.9.0.

Thanks.

--
Craig


On Tue, Sep 5, 2017 at 4:50 AM, Amber Hawkie Brown <
hawkowl at atleastfornow.net> wrote:

>     python -m pip install Twisted==17.9.0rc1
>
> Please test it, and let me know how your applications fare, good or bad!
> If nothing comes up, 17.9 will release in a week.
>
> Twisted Regards,
> Amber Brown
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170905/f7c885a0/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Sep  5 21:28:10 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 5 Sep 2017 20:28:10 -0700
Subject: [Twisted-Python] Twisted 17.9.0 Release Candidate Announcement
In-Reply-To: <CAG=rPVfbSfDf4yF3ntR+FgfispPg-r37giKvnfM_KDY10t7aNg@mail.gmail.com>
References: <E79EEDB0-40E4-4C13-8D4C-64A73C80967E@atleastfornow.net>
 <CAG=rPVfbSfDf4yF3ntR+FgfispPg-r37giKvnfM_KDY10t7aNg@mail.gmail.com>
Message-ID: <E0B05357-4FA9-4A04-99BD-200823C08670@twistedmatrix.com>


> On Sep 5, 2017, at 9:30 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Can you or another Twisted developer code review this: 
> https://github.com/twisted/twisted/pull/867 <https://github.com/twisted/twisted/pull/867>
Mark Williams and I poked the builders throughout the day to address some intermittent build issues, so if anyone has time to review this now it properly has a green checkmark.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170905/c734ee17/attachment-0002.html>

From barry.scott at forcepoint.com  Wed Sep  6 07:08:52 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Wed, 6 Sep 2017 14:08:52 +0100
Subject: [Twisted-Python] nevow problem with  TWISTED_NEWSTYLE=true
Message-ID: <27360660.1mUCSPfjrH@barry-scott-desktop>

I wanted to use the new style classes everywhere but hit this
problem with nevow 0.14.3. Is there a patch to fix this available?

$ TWISTED_NEWSTYLE=true python2 
Python 2.7.13 (default, Jun 26 2017, 10:20:05) 
[GCC 7.1.1 20170622 (Red Hat 7.1.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import nevow
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/lib64/python2.7/site-packages/nevow/__init__.py", line 148, in 
<module>
    load(basic_adapters)
  File "/usr/lib64/python2.7/site-packages/nevow/__init__.py", line 34, in 
load
    registerAdapter(_namedAnyWithBuiltinTranslation(a),
  File "/usr/lib64/python2.7/site-packages/nevow/util.py", line 183, in 
_namedAnyWithBuiltinTranslation
    return namedAny(name)
  File "/usr/lib64/python2.7/site-packages/twisted/python/reflect.py", line 
301, in namedAny
    topLevelPackage = _importAndCheckStack(trialname)
  File "/usr/lib64/python2.7/site-packages/twisted/python/reflect.py", line 
240, in _importAndCheckStack
    return __import__(importName)
  File "/usr/lib64/python2.7/site-packages/formless/webform.py", line 24, in 
<module>
    from nevow.static import File
  File "/usr/lib64/python2.7/site-packages/nevow/static.py", line 33, in 
<module>
    from nevow import appserver, dirlist, inevow, rend
  File "/usr/lib64/python2.7/site-packages/nevow/appserver.py", line 177, in 
<module>
    class NevowRequest(tpc.Componentized, server.Request):
  File "/usr/lib64/python2.7/site-packages/zope/interface/advice.py", line 
141, in advise
    newClass = meta(name,bases,cdict)
TypeError: Error when calling the metaclass bases
    Cannot create a consistent method resolution
order (MRO) for bases Request, Componentized
>>> 

Barry



From glyph at twistedmatrix.com  Wed Sep  6 19:14:21 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 6 Sep 2017 18:14:21 -0700
Subject: [Twisted-Python] nevow problem with  TWISTED_NEWSTYLE=true
In-Reply-To: <27360660.1mUCSPfjrH@barry-scott-desktop>
References: <27360660.1mUCSPfjrH@barry-scott-desktop>
Message-ID: <1AA27436-2827-446E-9BCA-B6DE77F819FE@twistedmatrix.com>


> On Sep 6, 2017, at 6:08 AM, Barry Scott <barry.scott at forcepoint.com> wrote:
> 
> I wanted to use the new style classes everywhere but hit this
> problem with nevow 0.14.3. Is there a patch to fix this available?

Nope. You can write such a patch, and contribute it to Nevow, here: https://github.com/twisted/nevow <https://github.com/twisted/nevow>

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170906/e7e78865/attachment-0002.html>

From trac at twistedmatrix.com  Sun Sep 10 00:05:24 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 Sep 2017 06:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1505023524.16.6775413654274004554@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170910/51cc1c88/attachment-0002.html>

From zadka.moshe at gmail.com  Sun Sep 10 15:04:15 2017
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Sun, 10 Sep 2017 21:04:15 +0000
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
Message-ID: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>

Hello all,

For context, please read bullet one of Glyph's comment on
https://twistedmatrix.com/trac/ticket/3691#comment:9

I am in a similar situation to JP 8 years ago -- I want to add a working
directory argument to addProcess, so that processes that care (usually for
silly reasons) about their cwd can be monitored.

The options I see:

1. Move processes to a private attribute, deprecate processors, then do it.
2. Have a parallel dictionary to processes
3. Move, as Glyph suggested, to object with attributes. For backwards
compatibility, I can support __getitem__ for the historic unpackers.
4. Decide we're going with "inccompatible change", and move processes to a
private attribute.

Anyone wants to weigh in?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170910/da7122cc/attachment-0002.html>

From ex.vitorino at gmail.com  Mon Sep 11 03:43:44 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Mon, 11 Sep 2017 10:43:44 +0100
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
In-Reply-To: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
References: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
Message-ID: <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>

> The options I see:
> 
> 1. Move processes to a private attribute, deprecate processors, then do it.

From an abstraction standpoint, that makes sense. Probably the same could be said about the other process related dict attributes like protocols, delay, etc., though. They all seem to be "name" indexed dicts of things related to a given process.

In other words, moving processes into a private attribute suggests making all (most?) other attributes private as well.


> 2. Have a parallel dictionary to processes

Given that there are already lots of interrelated dicts, I'd say this would continue the current design which, as we're seeing now, is not easily extendable. I'd try to avoid this.

Sidenote: A quick, mostly backwards compatible, change could probably add cwd to the existing per-process tuple in self.processes as an extra item, couldn't it? Not 100% backwards compatible, because the tuple would have one more element, but nearly 100%.


> 3. Move, as Glyph suggested, to object with attributes. For backwards compatibility, I can support __getitem__ for the historic unpackers.

This feels cleaner and better. Maybe __getitem__ could be implemented and deprecated immediately, who knows?

Again, creating a class here could also induce doing something similar with the "process policy/state attributes" (for the lack of a better name), where maybe the other dicts could somehow be brought together. Whether this is a better design or not is up for consideration. But one thing is a fact, just bringing them together into a common class (and, thus, down to a single attribute in ProcessMonitor) would break backwards compatibility for some of the same reasons you are now raising. *sigh!*


> 4. Decide we're going with "incompatible change", and move processes to a private attribute.

I see no reason for accessing those attributes from "outside of ProcessMonitor" but if Twisted claims not to break existing code without previous deprecation warning, such an approach would break that promise (full policy details here http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html).


My 2c.
Regards,
--
exvito



From rodrigc at crodrigues.org  Wed Sep 13 16:54:19 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 13 Sep 2017 15:54:19 -0700
Subject: [Twisted-Python] Asyncio presentations at Pybay 2017
Message-ID: <CAG=rPVfb0=9ODrF1QxWSeP71ScjWy4ru3J3g21JFAqfuB+WEZQ@mail.gmail.com>

A few weeks ago I attended Pybay 2017 in San Francisco ( http://pybay.com ).

I attended three interesting talks on asyncio:

Performant Asynchronous Programming at Quora:
https://engineering.quora.com/Asynchronous-Programming-in-Python
"https://www.youtube.com/watch?v=0iqibyfxw3w"

How Optimizely Scaled its REST API with Asyncio
https://www.slideshare.net/optimizely/how-optimizely-scaled-its-rest-api-with-asyncio
https://www.youtube.com/watch?v=jgLA9Hp-CvY

Awaits, how do they work?
https://epsy.github.io/ahdtw/#/

While none of these talks used Twisted,
a few of the talks briefly mentioned Twisted when talking about the
history of async style programming in Python.

>From what I can see, now that asyncio is in the Python standard library,
more people and companies are more open trying async-style things,
and are moving to the Python asyncio way of doing thing.

During the Optimizely presentation, I asked them what the biggest pain point
for them was, and the they responded that lack of asyncio support
in the frameworks they used (specifically Pyramid).

I think over time, more frameworks will support this, and the overall
situation
will improve.

But overall, it seems that people are buying into the Python asyncio way of
doing things.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170913/b107c5b4/attachment-0002.html>

From rodrigc at crodrigues.org  Thu Sep 14 15:06:24 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 14 Sep 2017 14:06:24 -0700
Subject: [Twisted-Python] Need doc for how to use asyncio with Twisted
Message-ID: <CAG=rPVfr2Z8K-pdeaUWNFzDLWnSojw16w8z6z=+d0GDbZ_+Niw@mail.gmail.com>

Since more people are looking at Python asyncio these days,
I am seeing more questions that people are asking for how
to use Python asyncio and Twisted.

The docs for using Python asyncio and Twisted are available,
but they are scattered in different places.  It would
be good to have a single .rst doc which has this info in one place

I created a ticket for this:

https://twistedmatrix.com/trac/ticket/9279


If anyone who is good at writing wants to help with this, let me
know and I can help review it.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170914/8585e96e/attachment-0002.html>

From trac at twistedmatrix.com  Sun Sep 17 00:05:25 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 Sep 2017 06:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1505628325.64.5258261418572559899@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170917/51caf7a3/attachment-0002.html>

From zadka.moshe at gmail.com  Mon Sep 18 09:35:10 2017
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Mon, 18 Sep 2017 15:35:10 +0000
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
In-Reply-To: <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>
References: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
 <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>
Message-ID: <CAOA_4jD2sHuMJ6XVQnDhbf5jJoQPZpc3Bp3a3cCMuoXvc1bKCA@mail.gmail.com>

On Mon, Sep 11, 2017 at 2:44 AM ex vito <ex.vitorino at gmail.com> wrote:

> Sidenote: A quick, mostly backwards compatible, change could probably add
> cwd to the existing per-process tuple in self.processes as an extra item,
> couldn't it?


No. Most usage of this tuple is unpacking, which makes it really really not
backwards compatible.


> > 4. Decide we're going with "incompatible change", and move processes to
> a private attribute.
>
> I see no reason for accessing those attributes from "outside of
> ProcessMonitor" but if Twisted claims not to break existing code without
> previous deprecation warning, such an approach would break that promise
> (full policy details here
> http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html
> ).
>

Specifically, I was asking about
http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#procedure-for-exceptions-to-this-policy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170918/0c9f76e3/attachment-0002.html>

From ex.vitorino at gmail.com  Tue Sep 19 04:49:13 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Tue, 19 Sep 2017 11:49:13 +0100
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
In-Reply-To: <CAOA_4jD2sHuMJ6XVQnDhbf5jJoQPZpc3Bp3a3cCMuoXvc1bKCA@mail.gmail.com>
References: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
 <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>
 <CAOA_4jD2sHuMJ6XVQnDhbf5jJoQPZpc3Bp3a3cCMuoXvc1bKCA@mail.gmail.com>
Message-ID: <1504606D-20B4-40BF-BB94-31D21E012F43@gmail.com>


On 2017-09-18, at 16:35, Moshe Zadka <zadka.moshe at gmail.com> wrote:

> On Mon, Sep 11, 2017 at 2:44 AM ex vito <ex.vitorino at gmail.com> wrote:
> Sidenote: A quick, mostly backwards compatible, change could probably add cwd to the existing per-process tuple in self.processes as an extra item, couldn't it?
> 
> No. Most usage of this tuple is unpacking, which makes it really really not backwards compatible.

If that is the case, then I stand corrected. That would not be backwards compatible at all.


> > 4. Decide we're going with "incompatible change", and move processes to a private attribute.
> 
> I see no reason for accessing those attributes from "outside of ProcessMonitor" but if Twisted claims not to break existing code without previous deprecation warning, such an approach would break that promise (full policy details here http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html).
> 
> Specifically, I was asking about http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#procedure-for-exceptions-to-this-policy

We're on the same page, then (literally).

Quoting that section, with regards to incompatible changes, "Generally, the reason that one would want to do this is to give applications a performance enhancement or bug fix that could break behavior that unanticipated, hypothetical uses of an existing API (...)". Would this change fall under that? Maybe not. Then again, I understand that "Every change is unique", so maybe those words don't need to be taken in a strict sense.

Other than that, again, per that section's rules, not being a commiter myself, I'm in no position to approve such a change. I wonder, however, how "urgent" such a final change is to you and why a deprecation cycle does not fit your purpose (even though, admittedly, it may represent more effort).

My 2c.
--
exvito

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170919/c9a6b574/attachment-0002.html>

From zadka.moshe at gmail.com  Tue Sep 19 08:49:39 2017
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Tue, 19 Sep 2017 14:49:39 +0000
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
In-Reply-To: <1504606D-20B4-40BF-BB94-31D21E012F43@gmail.com>
References: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
 <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>
 <CAOA_4jD2sHuMJ6XVQnDhbf5jJoQPZpc3Bp3a3cCMuoXvc1bKCA@mail.gmail.com>
 <1504606D-20B4-40BF-BB94-31D21E012F43@gmail.com>
Message-ID: <CAOA_4jCvNFW1f90KmhXdqmTK2bCxpxo+L3RA5jQ-Fva00ZqqRQ@mail.gmail.com>

On Tue, Sep 19, 2017 at 3:51 AM ex vito <ex.vitorino at gmail.com> wrote:


> Other than that, again, per that section's rules, not being a commiter
> myself, I'm in no position to approve such a change. I wonder, however, how
> "urgent" such a final change is to you and why a deprecation cycle does not
> fit your purpose (even though, admittedly, it may represent more effort).
>

I think that between the low likelihood that someone went crawling over the
attributes manually, the RoI of having a deprecation cycle with some
intermediate solution that later needs to be cleaned up, and the fact that
this would be a clean break (i.e., "AttributeError") rather than some
obscure error, I am at least interested in opinions about going the
exception route.

ProcMon is non-trivial to productionize, and I'm not aware of anyone even
using it in production, other than me, let alone crawling over its internal
state.

Moshe Z.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170919/541fc882/attachment-0002.html>

From goffi at goffi.org  Tue Sep 19 14:59:08 2017
From: goffi at goffi.org (Goffi)
Date: Tue, 19 Sep 2017 22:59:08 +0200
Subject: [Twisted-Python] How to correctly run Sqlite with Twisted?
Message-ID: <3622183.l3x4ml2jUf@tazar2>

Hello,

I'm using Sqlite3 module through Twisted's enterpirse.adbapi, I create the 
ConnectionPool instance like this:

   self.dbpool = ConnectionPool("sqlite3", db_filename, 
check_same_thread=False)

You can see the code at https://repos.goffi.org/sat/file/tip/src/memory/sqlite.py

Sometime, the writing is failing with following exception:

  Failure instance: Traceback: <class 'sqlite3.OperationalError'>: database is 
locked

So I wonder if the database is correctly used, did anybody experienced 
something similar with Twisted and Sqlite ?

Should I just augment timeout as advised at https://stackoverflow.com/a/
8618328? Looks like more a workaround than a clean solution.

Python 2 documentation doesn't talk about check_same_thread argument, but 
Python 3 at https://docs.python.org/3.5/library/sqlite3.html#sqlite3.connect 
says that writing operation should be serialized by the user (I thought it was 
the default as said in https://sqlite.org/threadsafe.html), how should I 
achieve that?

Also PRAGMA are not working (specially "PRAGMA foreign_keys = ON"), I guess 
because of multi-threading, what is the good way to activate foreign_keys for 
all following request?

Thanks in advance

Goffi



From zadka.moshe at gmail.com  Tue Sep 19 15:22:37 2017
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Tue, 19 Sep 2017 21:22:37 +0000
Subject: [Twisted-Python] How to correctly run Sqlite with Twisted?
In-Reply-To: <3622183.l3x4ml2jUf@tazar2>
References: <3622183.l3x4ml2jUf@tazar2>
Message-ID: <CAOA_4jCL1QiHqq+k=+n4=zTz+htPc2uFUoHrorKQnhebgkz3pw@mail.gmail.com>

The best answer is probably https://github.com/alex/alchimia

On Tue, Sep 19, 2017 at 1:59 PM Goffi <goffi at goffi.org> wrote:

> Hello,
>
> I'm using Sqlite3 module through Twisted's enterpirse.adbapi, I create the
> ConnectionPool instance like this:
>
>    self.dbpool = ConnectionPool("sqlite3", db_filename,
> check_same_thread=False)
>
> You can see the code at
> https://repos.goffi.org/sat/file/tip/src/memory/sqlite.py
>
> Sometime, the writing is failing with following exception:
>
>   Failure instance: Traceback: <class 'sqlite3.OperationalError'>:
> database is
> locked
>
> So I wonder if the database is correctly used, did anybody experienced
> something similar with Twisted and Sqlite ?
>
> Should I just augment timeout as advised at https://stackoverflow.com/a/
> 8618328? Looks like more a workaround than a clean solution.
>
> Python 2 documentation doesn't talk about check_same_thread argument, but
> Python 3 at
> https://docs.python.org/3.5/library/sqlite3.html#sqlite3.connect
> says that writing operation should be serialized by the user (I thought it
> was
> the default as said in https://sqlite.org/threadsafe.html), how should I
> achieve that?
>
> Also PRAGMA are not working (specially "PRAGMA foreign_keys = ON"), I guess
> because of multi-threading, what is the good way to activate foreign_keys
> for
> all following request?
>
> Thanks in advance
>
> Goffi
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170919/f7badc12/attachment-0002.html>

From werner at thieprojects.ch  Tue Sep 19 15:50:23 2017
From: werner at thieprojects.ch (Werner Thie)
Date: Tue, 19 Sep 2017 11:50:23 -1000
Subject: [Twisted-Python] How to correctly run Sqlite with Twisted?
In-Reply-To: <3622183.l3x4ml2jUf@tazar2>
References: <3622183.l3x4ml2jUf@tazar2>
Message-ID: <3a3c9a0f-9412-e09f-959e-287beebc137c@thieprojects.ch>

Aloha Goffi

I'm using minimal code like the one below for MySQL interaction, should be easy to transition this to SQLite

from twisted.internet   import reactor, task, defer

from store import Store

#debugging func, printing the result on the console
def _transformResult(result):
##  print '####', result
   if result:
       return result[0]  #unpack the list
   else:
       return None

class Somestore(object):
   name = "somestore"

   def __init__(self, dbapiName, **params):
     self.store = Store(dbapiName, **params)
     ka = task.LoopingCall(self.keepAlive)             #db keepalive
     ka.start(307)

   def dbdisconn(self, reason):
     print 'db disconnected for ', reason

   def keepAlive(self):
     try:
       d = self.store.runQuery('SELECT 1')
       d.addErrback(self.dbdisconn)
     except:
       pass
     else:
       pass        #do whatever MUST occur here in all cases

   def getTableCount(self):
     d = self.store.runQuery('SELECT tables FROM user WHERE servername = %s', 'total')
     d.addCallback(_transformResult)
     d.addErrback(self.dbdisconn)
     return d

   def setUserCount(self, waiting, playing, tables):
     d = self.store.runOperation('UPDATE user SET waiting = %s, playing = %s, tables = %s WHERE servername = %s', waiting, playing, tables, self.loggername)
     d.addErrback(self.dbdisconn)
     return d


module store.py
from itertools import izip

from twisted.enterprise import adbapi

using it with canned queries like


class Store(object):
   def __init__(self, dbapiName, **params):
     self.__pool   = adbapi.ConnectionPool(dbapiName, **params)
     print self.__pool.__getstate__()
     self.runOperation('SET autocommit = %s', 1)

   def runQuery(self, query, *args):
     d = self.__pool.runInteraction(self.mapQuery, query, args)
     return d

   def runInsert(self, query, *args):
     def mapQ(curs, query, *args):
       try:
         curs.execute(query, *args)
       except adbapi.ConnectionLost:
         print
         print '++++++++++++ rerunning query'
         print
         curs.execute(query, *args)                    #simply resend query, assuming cp_reconnect=True
         return {'lastrowid': -1}
       return {'lastrowid': curs.lastrowid}
     d = self.__pool.runInteraction(mapQ, query, args)
     return d

   def mapQuery(self, curs, query, *args):
     try:
       curs.execute(query, *args)
     except adbapi.ConnectionLost:
       curs.execute(query, *args)                    #simply resend query, assuming cp_reconnect=True
     result = curs.fetchall()
     columns = [d[0] for d in curs.description]
     return [dict(zip(columns, r)) for r in result]

   def runOperation(self, query, *args):
     d = self.__pool.runOperation(query, args)
     return d


On 9/19/2017 10:59 AM, Goffi wrote:
> Hello,
>
> I'm using Sqlite3 module through Twisted's enterpirse.adbapi, I create the
> ConnectionPool instance like this:
>
>     self.dbpool = ConnectionPool("sqlite3", db_filename,
> check_same_thread=False)
>
> You can see the code at https://repos.goffi.org/sat/file/tip/src/memory/sqlite.py
>
> Sometime, the writing is failing with following exception:
>
>    Failure instance: Traceback: <class 'sqlite3.OperationalError'>: database is
> locked
>
> So I wonder if the database is correctly used, did anybody experienced
> something similar with Twisted and Sqlite ?
>
> Should I just augment timeout as advised at https://stackoverflow.com/a/
> 8618328? Looks like more a workaround than a clean solution.
>
> Python 2 documentation doesn't talk about check_same_thread argument, but
> Python 3 at https://docs.python.org/3.5/library/sqlite3.html#sqlite3.connect
> says that writing operation should be serialized by the user (I thought it was
> the default as said in https://sqlite.org/threadsafe.html), how should I
> achieve that?
>
> Also PRAGMA are not working (specially "PRAGMA foreign_keys = ON"), I guess
> because of multi-threading, what is the good way to activate foreign_keys for
> all following request?
>
> Thanks in advance
>
> Goffi
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Tue Sep 19 16:19:41 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 19 Sep 2017 18:19:41 -0400
Subject: [Twisted-Python] How to correctly run Sqlite with Twisted?
In-Reply-To: <3622183.l3x4ml2jUf@tazar2>
References: <3622183.l3x4ml2jUf@tazar2>
Message-ID: <CAEeXt4OuTv4uC_CqNx-qXsTjSTZ_GGGva9+j-febw_w+MkTC9g@mail.gmail.com>

On Tue, Sep 19, 2017 at 4:59 PM, Goffi <goffi at goffi.org> wrote:

> Hello,
>
> I'm using Sqlite3 module through Twisted's enterpirse.adbapi, I create the
> ConnectionPool instance like this:
>
>    self.dbpool = ConnectionPool("sqlite3", db_filename,
> check_same_thread=False)
>
> You can see the code at https://repos.goffi.org/sat/
> file/tip/src/memory/sqlite.py
>
> Sometime, the writing is failing with following exception:
>
>   Failure instance: Traceback: <class 'sqlite3.OperationalError'>:
> database is
> locked
>
> So I wonder if the database is correctly used, did anybody experienced
> something similar with Twisted and Sqlite ?
>
>
"Correctly" has so many shades.  Here's another possible direction for
exploration:

    https://github.com/twisted/axiom

Jean-Paul
http://as.ynchrono.us/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170919/17e769b4/attachment-0002.html>

From ex.vitorino at gmail.com  Wed Sep 20 02:24:43 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Wed, 20 Sep 2017 09:24:43 +0100
Subject: [Twisted-Python] How to correctly run Sqlite with Twisted?
In-Reply-To: <3622183.l3x4ml2jUf@tazar2>
References: <3622183.l3x4ml2jUf@tazar2>
Message-ID: <C8375A85-4F0D-41DF-A028-5953E759AC34@gmail.com>

On 2017-09-19, at 21:59, Goffi <goffi at goffi.org> wrote:

> I'm using Sqlite3 module through Twisted's enterpirse.adbapi, I create the 
> ConnectionPool instance like this:
> 
>   self.dbpool = ConnectionPool("sqlite3", db_filename, 
> check_same_thread=False)
> 
> You can see the code at https://repos.goffi.org/sat/file/tip/src/memory/sqlite.py
> 
> Sometime, the writing is failing with following exception:
> 
>  Failure instance: Traceback: <class 'sqlite3.OperationalError'>: database is 
> locked
> 
> So I wonder if the database is correctly used, did anybody experienced 
> something similar with Twisted and Sqlite ?
> 
> Should I just augment timeout as advised at https://stackoverflow.com/a/
> 8618328? Looks like more a workaround than a clean solution.
> 
> Python 2 documentation doesn't talk about check_same_thread argument, but 
> Python 3 at https://docs.python.org/3.5/library/sqlite3.html#sqlite3.connect 
> says that writing operation should be serialized by the user (I thought it was 
> the default as said in https://sqlite.org/threadsafe.html), how should I 
> achieve that?
> 
> Also PRAGMA are not working (specially "PRAGMA foreign_keys = ON"), I guess 
> because of multi-threading, what is the good way to activate foreign_keys for 
> all following request?


I would subscribe to Moshe's and Jean-Paul's suggestions of using higher-level tools to handle database interactions. If, however, you'd rather continue with the adbapi approach, here are a few tips that may help your diagnostic, given that behavior you are observing seems to result from multi-threaded/multi-process interactions:

- Confirm you have no other SQLite client at play, locking your data somehow.
- Correct serialization of independent SQL queries/transactions may be a complex topic.
- But you can try forcing the ConnectionPool thread count to 1 via the cp_min/cp_max init args.
- For your PRAGMA statements you should probably use the cp_openfun ConnectionPool init arg.
- Using the undocumented "check_same_thread" on Python 2 seems pointless.
  (not sure it is, though; I did not look at the underlying Python 2 stdlib code)

Lastly:

I have experienced issues with SQLite3 + Python on one occasion in the past: depending on the platform, SQLite itself is/is-not distributed with Python, IIRC; for diagnostics, confirm the exact version of the sqlite .SO / .DLL in use and, ideally, its compile time options. I recall my troubles were between CentOS 5 vs. 6, due to the specific SQLite versions included in each distribution.

A final thought, from the realm of intuition: if I were targeting heavily concurrent access to a database (subjective, yes), I'd consider replacing SQLite with some other engine. SQLite is a great tool for many purposes, but concurrent access is not its strong point (see https://www.sqlite.org/lockingv3.html).

Cheers,
--
exvito



From ex.vitorino at gmail.com  Wed Sep 20 02:32:21 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Wed, 20 Sep 2017 09:32:21 +0100
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
In-Reply-To: <CAOA_4jCvNFW1f90KmhXdqmTK2bCxpxo+L3RA5jQ-Fva00ZqqRQ@mail.gmail.com>
References: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
 <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>
 <CAOA_4jD2sHuMJ6XVQnDhbf5jJoQPZpc3Bp3a3cCMuoXvc1bKCA@mail.gmail.com>
 <1504606D-20B4-40BF-BB94-31D21E012F43@gmail.com>
 <CAOA_4jCvNFW1f90KmhXdqmTK2bCxpxo+L3RA5jQ-Fva00ZqqRQ@mail.gmail.com>
Message-ID: <F976B335-3BC0-495F-BEE3-B08DB523262D@gmail.com>


On 2017-09-19, at 15:49, Moshe Zadka <zadka.moshe at gmail.com> wrote:

> On Tue, Sep 19, 2017 at 3:51 AM ex vito <ex.vitorino at gmail.com> wrote:
>  
> Other than that, again, per that section's rules, not being a commiter myself, I'm in no position to approve such a change. I wonder, however, how "urgent" such a final change is to you and why a deprecation cycle does not fit your purpose (even though, admittedly, it may represent more effort).
> 
> I think that between the low likelihood that someone went crawling over the attributes manually, the RoI of having a deprecation cycle with some intermediate solution that later needs to be cleaned up, and the fact that this would be a clean break (i.e., "AttributeError") rather than some obscure error, I am at least interested in opinions about going the exception route.
> 
> ProcMon is non-trivial to product ionize, and I'm not aware of anyone even using it in production, other than me, let alone crawling over its internal state.


Agreed. For completeness, the code I work with does not make use of ProcMon and I don't recall having ever used it.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170920/02e0e8c7/attachment-0002.html>

From goffi at goffi.org  Wed Sep 20 06:01:55 2017
From: goffi at goffi.org (goffi)
Date: Wed, 20 Sep 2017 14:01:55 +0200
Subject: [Twisted-Python] How to correctly run Sqlite with Twisted?
In-Reply-To: <C8375A85-4F0D-41DF-A028-5953E759AC34@gmail.com>
References: <3622183.l3x4ml2jUf@tazar2>
 <C8375A85-4F0D-41DF-A028-5953E759AC34@gmail.com>
Message-ID: <c47995716fd3a54ef19849acc98da3bd@goffi.org>

Le 2017-09-20 10:24, ex vito a écrit :
> On 2017-09-19, at 21:59, Goffi <goffi at goffi.org> wrote:
> 
>> [SNIP]
> 
> 
> I would subscribe to Moshe's and Jean-Paul's suggestions of using
> higher-level tools to handle database interactions.
> 
>  [SNIP]
> 
> A final thought, from the realm of intuition: if I were targeting
> heavily concurrent access to a database (subjective, yes), I'd
> consider replacing SQLite with some other engine. SQLite is a great
> tool for many purposes, but concurrent access is not its strong point
> (see https://www.sqlite.org/lockingv3.html).


Thanks for all your answers! I'll check every options before taking a 
decision, but I'm quite seduced by Alchimia, the SqlAlchemy wrapper. I'm 
a bit worrying because it has not seen any commit since 11 months (I 
have had bad experiences with unmaintained libraries). This said, the 
wrapper is thin, I can probably maintain it myself if needed. As a 
bonus, it would allow me to propose other storage backends than Sqlite.

For the use case, it's used mainly for cache and various data for an 
XMPP client which can handle several users at the same time, and only 
one backend is accessing the database. There is already an automatic 
update mechanism that I would have to adapt, but it may simplify 
everything at the end. Also I need to check if Full Text Search and Json 
data type are easily usable, but it seems than plain SQL request are 
still possible at worst.


Thanks again for your answers, it's really helpful!

Goffi



From rodrigc at crodrigues.org  Wed Sep 20 10:42:47 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 20 Sep 2017 09:42:47 -0700
Subject: [Twisted-Python] Need help reviewing improvement to inlineCallbacks
Message-ID: <CAG=rPVeENOgy_xN2Hpgt9E9L_79xNQ7duef92Nrs+s9sgmsUVw@mail.gmail.com>

Pierre Tardy, the main developer of Buildbot,
submitted this patch to add full stack traces
to inlineCallbacks:

https://github.com/twisted/twisted/pull/814

I think the patch looks good, but can someone with more
knowledge of inlineCallbacks review it?

Right now, if you have a stack of inlineCallbacks,
andan exception is thrown, some of the stacktrace is
lost.  By adding full stack traces to inlineCallbacks,
this greatly improves the debuggability of software like
Buildbot, which makes heavy use of inlineCallbacks.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170920/06358175/attachment-0002.html>

From todd at chaka.net  Wed Sep 20 14:07:07 2017
From: todd at chaka.net (Todd Chapman)
Date: Wed, 20 Sep 2017 16:07:07 -0400
Subject: [Twisted-Python] Truly distributed tests with Twisted
Message-ID: <CAG54imbyCC+hPCsEe_+-dpX13G7YQVrssx+1sqFv0BQABq99uw@mail.gmail.com>

Hi All,

I have been using DistTrialRunner with great success, but now I would like
to run tests both in parallel and distributed across a set of testing
nodes. Can anyone recommend existing solutions for this?

I tried extending DistTrialRunner and using a generator to feed it some
tests, but it has some limitations that made this non-trivial.

Thanks!

-Todd
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170920/a1b1284a/attachment-0002.html>

From bmurdock at gmail.com  Wed Sep 20 15:33:04 2017
From: bmurdock at gmail.com (Bryan Murdock)
Date: Wed, 20 Sep 2017 15:33:04 -0600
Subject: [Twisted-Python] verilog simulation calling out to twisted
Message-ID: <CAPY2A7NCudzuHpmXCVC3vhGC2OgK=szSkNvkcJdOy=yc-fOS8A@mail.gmail.com>

Hi,

I've been writing Verilog simulations for years, and tinkering with
Python for years.  In the last couple years I have been calling out to
Python from Verilog simulations, which has been awesome.  Just this
week I tried twisted out for the first time to write a simple custom
TCP server.  It was a great experience and even though I still know
next to nothing about twisted, I think I'm in love :-)

Now I have a crazy idea.  I'd like that Python code that my Verilog
calls out to to use twisted.  OK, actually I've already done that, my
Verilog calls out to my that TCP server that I wrote.  I had to spawn
a thread and run the server in that thread so that the Verilog could
continue to do stuff in parallel with the server.  It's working great.

The real crazy thing I want is for the Verilog to call out to a
twisted TCP client as well.  Again, I need the client and server to
not block the Verilog.  My first attempt was to run client and server
in two separate threads.  I start the server thread, then I start the
client thread and only in the client thread do I call reactor.run().
It seems to not be working.  Before I try to figure out why, I thought
I might ask here if it even should work.

Here's a different way to explain it, in case that helps:

main thread is verilog which spawns server_thread

def server_thread():
    reactor.listenTCP(ServerFactory())

main thread spawns client_thread

def client_thread()
    reactor.connectTCP(ClientFactory())
    reactor.run()

I read the page on threads in twisted and I'm guessing  Would it be
better to have the main thread just spawn one thread that does this?

def client_server_thread():
    reactor.listenTCP(...)
    reactor.connectTCP(...)
    reactor.run()

Hmm, as I finish typing this all out, I'm realizing that surely
someone has written at TCP proxy (essentially what this verilog
simulation is doing) in twisted before.  A quick internet search tells
me yes...and of course they are not using threads.

The way the whole verilog mess is written right now it would be much
easier to use separate threads for client and server.  Is that
possible?  If not I'll have to find a way to justify re-architecting
the verilog mess.

Thanks,

Bryan



From zadka.moshe at gmail.com  Wed Sep 20 19:13:20 2017
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Thu, 21 Sep 2017 01:13:20 +0000
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
In-Reply-To: <F976B335-3BC0-495F-BEE3-B08DB523262D@gmail.com>
References: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
 <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>
 <CAOA_4jD2sHuMJ6XVQnDhbf5jJoQPZpc3Bp3a3cCMuoXvc1bKCA@mail.gmail.com>
 <1504606D-20B4-40BF-BB94-31D21E012F43@gmail.com>
 <CAOA_4jCvNFW1f90KmhXdqmTK2bCxpxo+L3RA5jQ-Fva00ZqqRQ@mail.gmail.com>
 <F976B335-3BC0-495F-BEE3-B08DB523262D@gmail.com>
Message-ID: <CAOA_4jA+0BmTbjM6DW4GCZDvVqNLddGC_MTOZyY7f3DsGoL+pw@mail.gmail.com>

OK I opened a ticket with a plan, after discussing with Mark Williams.

1. Make a custom class that implements the Sequence ABC and pretends to be
sized the old size.
2. Internally all access will be moved to attributes
3. All sequence methods will be marked as Deprecated. We'll kill them in a
year.
4. processes will become _processes, with a Deprecated .processes accessor,
again for backwards compatibility.

I am technically changing the class of a thing from a tuple to a different
class, but I don't think that this can be in general relied on. The API
docs do not mention the attribute, much less promise the concrete class of
its contents.

Objections?

Ticket: https://twistedmatrix.com/trac/ticket/9287

On Wed, Sep 20, 2017 at 1:34 AM ex vito <ex.vitorino at gmail.com> wrote:

> On 2017-09-19, at 15:49, Moshe Zadka <zadka.moshe at gmail.com> wrote:
>
> On Tue, Sep 19, 2017 at 3:51 AM ex vito <ex.vitorino at gmail.com> wrote:
>
>
>
>> Other than that, again, per that section's rules, not being a commiter
>> myself, I'm in no position to approve such a change. I wonder, however, how
>> "urgent" such a final change is to you and why a deprecation cycle does not
>> fit your purpose (even though, admittedly, it may represent more effort).
>>
>
> I think that between the low likelihood that someone went crawling over
> the attributes manually, the RoI of having a deprecation cycle with some
> intermediate solution that later needs to be cleaned up, and the fact that
> this would be a clean break (i.e., "AttributeError") rather than some
> obscure error, I am at least interested in opinions about going the
> exception route.
>
> ProcMon is non-trivial to product ionize, and I'm not aware of anyone even
> using it in production, other than me, let alone crawling over its internal
> state.
>
>
> Agreed. For completeness, the code I work with does not make use of
> ProcMon and I don't recall having ever used it.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170921/0fb2207b/attachment-0002.html>

From ex.vitorino at gmail.com  Thu Sep 21 04:07:19 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Thu, 21 Sep 2017 11:07:19 +0100
Subject: [Twisted-Python] verilog simulation calling out to twisted
In-Reply-To: <CAPY2A7NCudzuHpmXCVC3vhGC2OgK=szSkNvkcJdOy=yc-fOS8A@mail.gmail.com>
References: <CAPY2A7NCudzuHpmXCVC3vhGC2OgK=szSkNvkcJdOy=yc-fOS8A@mail.gmail.com>
Message-ID: <4C1BFA94-0D0B-4594-99A1-4C32D36CAD29@gmail.com>

On 2017-09-20, at 22:33, Bryan Murdock <bmurdock at gmail.com> wrote:

> I've been writing Verilog simulations for years, and tinkering with
> Python for years.  In the last couple years I have been calling out to
> Python from Verilog simulations, which has been awesome.  Just this
> week I tried twisted out for the first time to write a simple custom
> TCP server.  It was a great experience and even though I still know
> next to nothing about twisted, I think I'm in love :-)

Welcome to the club! :)


> Now I have a crazy idea.  I'd like that Python code that my Verilog
> calls out to to use twisted.  OK, actually I've already done that, my
> Verilog calls out to my that TCP server that I wrote.  I had to spawn
> a thread and run the server in that thread so that the Verilog could
> continue to do stuff in parallel with the server.  It's working great.

Can you clarify what "your Verilog" is? Python code running a Verilog simulation, maybe? Something else?


> The real crazy thing I want is for the Verilog to call out to a
> twisted TCP client as well.  Again, I need the client and server to
> not block the Verilog.  My first attempt was to run client and server
> in two separate threads.  I start the server thread, then I start the
> client thread and only in the client thread do I call reactor.run().
> It seems to not be working.  Before I try to figure out why, I thought
> I might ask here if it even should work.

I do not fully understand this: if "Verilog calls out to TCP server" means it establishes a TCP connection (does it?) what does "Verilog calls out to a TCP client" mean? Does it call a function/method with async Twisted code? How does it handle the fact that the result is async?

In general you are able to run concurrent (not parallel) code for TCP clients and servers within the same thread - after all, that's the key idea behind async programming with Twisted, with the reactor driving concurrent handling of multiple connections and events.

Of course, again, in general, you'll want your code not to block and to do its things as fast as possible so that control can be returned to the reactor (so that it is ready to quickly handle other events).

A few notes about threads and Twisted:
- IIRC the reactor should (must?) be running on the main thread.
- Threads are a good fit to call out to "I/O blocking code" from Twisted.
  (talking to a database or doing heavy disk I/O, for example)

A few notes about threads and Python:
- Python (CPython that is) does not run two CPU-bound threads in parallel.
  (IOW, it can't simultaneously use two CPUs/CPU-cores in the system)
- That's due to the GIL: there's lot's of information about it on the internet.
- You will get lower I/O responsiveness even with a single CPU-bound + one I/O bound thread.


If "Verilog" needs to continue working and is, I assume, CPU-bound, you will probably be better off by having that run in a process and your Twisted code in a single-threaded separate process.

Benefits:
- Better separation of concerns.
- No mixing of sync/async code which at times can lead to complex design/code.
- No shared memory between "Verilog" and Twisted code.
- "Verilog" can use as much CPU as it needs.
- "Twisted" will be as responsive as possible.
- Easier to test.

Costs:
- Need to define how to start both processes.
- Need to define how those processes communicate.
- All communication between processes needs to be serialized (no shared memory).


These are a few general ideas you may want to consider. Like I said, I couldn't fully grasp where you're currently at and what exactly you're trying to achieve but hopefully these comments will serve as guidance.

Cheers,
--
exvito



From ex.vitorino at gmail.com  Thu Sep 21 04:11:44 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Thu, 21 Sep 2017 11:11:44 +0100
Subject: [Twisted-Python] Changing procmon.ProcessMonitor.processes
In-Reply-To: <CAOA_4jA+0BmTbjM6DW4GCZDvVqNLddGC_MTOZyY7f3DsGoL+pw@mail.gmail.com>
References: <CAOA_4jDzmx23jEBzk5eZskw8XOxQVxrOgUXyBXi+EgwLOzKPVA@mail.gmail.com>
 <E7698FD8-9BE3-481C-AE99-D83A9199E7EA@gmail.com>
 <CAOA_4jD2sHuMJ6XVQnDhbf5jJoQPZpc3Bp3a3cCMuoXvc1bKCA@mail.gmail.com>
 <1504606D-20B4-40BF-BB94-31D21E012F43@gmail.com>
 <CAOA_4jCvNFW1f90KmhXdqmTK2bCxpxo+L3RA5jQ-Fva00ZqqRQ@mail.gmail.com>
 <F976B335-3BC0-495F-BEE3-B08DB523262D@gmail.com>
 <CAOA_4jA+0BmTbjM6DW4GCZDvVqNLddGC_MTOZyY7f3DsGoL+pw@mail.gmail.com>
Message-ID: <3E9E49FE-2147-4855-B5E7-97E5F8F34049@gmail.com>

On 2017-09-21, at 2:13, Moshe Zadka <zadka.moshe at gmail.com> wrote:

> OK I opened a ticket with a plan, after discussing with Mark Williams.
> 
> 1. Make a custom class that implements the Sequence ABC and pretends to be sized the old size.
> 2. Internally all access will be moved to attributes
> 3. All sequence methods will be marked as Deprecated. We'll kill them in a year.
> 4. processes will become _processes, with a Deprecated .processes accessor, again for backwards compatibility.
> 
> I am technically changing the class of a thing from a tuple to a different class, but I don't think that this can be in general relied on. The API docs do not mention the attribute, much less promise the concrete class of its contents.

Walks like a duck, quacks like a duck. Sounds like a clean approach.


> Objections?
> 
> Ticket: https://twistedmatrix.com/trac/ticket/9287

I'd say go for it.
--
exvito

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170921/bd452057/attachment-0002.html>

From rodrigc at crodrigues.org  Thu Sep 21 07:43:02 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 21 Sep 2017 06:43:02 -0700
Subject: [Twisted-Python] Twisted 17.5 vs txkube
In-Reply-To: <CAEeXt4OXoSUzEmXU-TGrD=iqTuy7goKqp2J2b8vPJi1Mamc4Aw@mail.gmail.com>
References: <CAEeXt4OXoSUzEmXU-TGrD=iqTuy7goKqp2J2b8vPJi1Mamc4Aw@mail.gmail.com>
Message-ID: <CAG=rPVf_x9KZFOcv4_9k3j=rkYO=oJnROLf8kJZgTCrN6mUOyw@mail.gmail.com>

I submitted one pull request, based on Amber's previous patch:

https://github.com/LeastAuthority/txkube/pull/150

that brings the test failures down to only 1 failed test with Twisted
17.5.0 on Python 2.7.

For the last failing test, it looks like
It looks like changes which went into Twisted 17.1 for HostnameEndpoint and
SSL here:
https://github.com/twisted/twisted/pull/624

are causing that test to fail.  I'm not so familiar with Endpoints and SSL,
so that will take a while for me to figure out.

--
Craig


On Wed, Aug 30, 2017 at 5:05 AM, Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> Hello,
>
> Sadly the txkube test suite is still pretty busted against Twisted 17.5.
> It was broken for a long time with Twisted 17.1 as well.  I'm not sure if
> these are exactly the same problems or not but they look somewhat related.
>
> https://travis-ci.org/LeastAuthority/txkube/builds/269920984
>
> If anyone feels like getting to the bottom of this, I'd appreciate it.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170921/b432a365/attachment-0002.html>

From bmurdock at gmail.com  Thu Sep 21 12:31:00 2017
From: bmurdock at gmail.com (Bryan Murdock)
Date: Thu, 21 Sep 2017 12:31:00 -0600
Subject: [Twisted-Python] verilog simulation calling out to twisted
In-Reply-To: <4C1BFA94-0D0B-4594-99A1-4C32D36CAD29@gmail.com>
References: <CAPY2A7NCudzuHpmXCVC3vhGC2OgK=szSkNvkcJdOy=yc-fOS8A@mail.gmail.com>
 <4C1BFA94-0D0B-4594-99A1-4C32D36CAD29@gmail.com>
Message-ID: <CAPY2A7Op1duKKzvwNBh2H3=jq-4pfXO1NYucqZeRUDyQXaVppw@mail.gmail.com>

On Thu, Sep 21, 2017 at 4:07 AM, ex vito <ex.vitorino at gmail.com> wrote:
> On 2017-09-20, at 22:33, Bryan Murdock <bmurdock at gmail.com> wrote:
>
> Welcome to the club! :)

Thanks!

>> Now I have a crazy idea.  I'd like that Python code that my Verilog
>> calls out to to use twisted.  OK, actually I've already done that, my
>> Verilog calls out to my that TCP server that I wrote.  I had to spawn
>> a thread and run the server in that thread so that the Verilog could
>> continue to do stuff in parallel with the server.  It's working great.
>
> Can you clarify what "your Verilog" is? Python code running a Verilog simulation, maybe? Something else?
<snip/>
> I do not fully understand this: if "Verilog calls out to TCP server" means it establishes a TCP connection (does it?) what does "Verilog calls out to a TCP client" mean? Does it call a function/method with async Twisted code? How does it handle the fact that the result is async?

Sorry, I was worried that this would be too hard to explain and/or I
may be giving too many details and confusing the issue.  Let me try
again.  It's probably simplest to think of the whole simulation as a
TCP proxy.  It looks like this:

some TCP client process <--> Python TCP Server <--> Verilog <-->
Python TCP Client <--> some TCP server

The Verilog, Python TCP server, and Python TCP client are all running
in the same process (some TCP client and some TCP server can be a web
browser and web server or whatever).  The Verilog code starts up,
calls a python function to start the Python TCP Server as a thread,
calls another python function to start the Python TCP Client as a
thread, and then essentially just loops asking (polling) the Python
TCP Server if it has any data, if so, it calls a function to send that
data to the Python TCP Client.  It does the same in reverse to flow
data from client to server.

I originally wrote the Python TCP Client and Server as low-level
socket code, handling only one connection at a time and not
automatically reconnecting if a connection was lost.  All the
downsides of using multiple processes instead of threads that you
listed are exactly the reasons I used threads.  Verilog has no support
for spawning subprocesses or doing interprocess communication.  It
can't spawn threads either, to be fair though[1].  I have to do "real
programming" things like that by calling python functions.  Threads
just seemed easier at the time because I can just use a Queue to get
data to/from the server and client threads from/to the Verilog.  And
it all worked great.

Then, when I went to add support for multiple connections and
auto-reconnects I discovered twisted.  I rewrote the Python TCP server
and client with twisted but now data doesn't flow.  I assume that's
because the client and server are making thread-unsafe calls to the
reactor.  Is that true?

(By the way, I can run the client and server standalone as separate
processes, without verilog involved, and they work fine that way.  I
have also replaced the twisted Python TCP Client with my original
socket-based TCP client and everything works fine.  It's just when I
try to use twisted for both client and server that it fails).

> In general you are able to run concurrent (not parallel) code for TCP clients and servers within the same thread - after all, that's the key idea behind async programming with Twisted, with the reactor driving concurrent handling of multiple connections and events.

Right, I think the solution is going to have to be: have verilog spawn
one thread that runs the Python TCP Server and Client.  Or start them
both as subprocesses and figure out how to communicate with them, I
guess.

Bryan

1. Aside from it's "green threads" that it uses to model concurrent
digital logic



From hawkowl at atleastfornow.net  Sat Sep 23 04:22:01 2017
From: hawkowl at atleastfornow.net (Amber Hawkie Brown)
Date: Sat, 23 Sep 2017 20:22:01 +1000
Subject: [Twisted-Python] Twisted 17.9.0 Release Announcement
Message-ID: <D54C1AF3-9DE1-4A78-B48C-C07E9A59F8A2@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 17.9.0!

The highlights of this release are:

- More Python 3 porting, including twisted.mail.imap4, twisted.python.shortcut, twisted.python.rebuild, twisted.web.sux, twisted.web.microdom, and a ton of bugs and inconsistencies fixed.
- twistd on Python 3 now supports the dns, inetd, portforward, procmon, socks, and words plugins.
- HTTP/1.1 and HTTP/2 OPTIONS * request support in Twisted Web
- twist web now accepts the argument --add-header, which can be used to set things like HSTS headers without custom code
- Improvements to IMAP4 behaviour and several logic bugfixes
- Removal of outdated documentation and updates to make them work on Python 3
- Over 70 closed tickets overall.

For more information, check the NEWS file (link provided below).

You can find the downloads at <https://pypi.python.org/pypi/Twisted <https://pypi.python.org/pypi/Twisted>> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads <http://twistedmatrix.com/trac/wiki/Downloads>>). The NEWS file is also available at <https://github.com/twisted/twisted/blob/twisted-17.9.0/NEWS.rst <https://github.com/twisted/twisted/blob/twisted-17.9.0/NEWS.rst>>.

Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted!

Twisted Regards,
Amber Brown (HawkOwl)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170923/0edb9ed3/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP
URL: </pipermail/twisted-python/attachments/20170923/0edb9ed3/attachment-0002.sig>

From glyph at twistedmatrix.com  Sat Sep 23 18:17:42 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Sep 2017 17:17:42 -0700
Subject: [Twisted-Python] Twisted 17.9.0 Release Announcement
In-Reply-To: <D54C1AF3-9DE1-4A78-B48C-C07E9A59F8A2@atleastfornow.net>
References: <D54C1AF3-9DE1-4A78-B48C-C07E9A59F8A2@atleastfornow.net>
Message-ID: <40952A36-03B0-4E25-91CF-592938860C53@twistedmatrix.com>

> On Sep 23, 2017, at 3:22 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 17.9.0!

A response befitting the amount of time I currently have available to invest:

"yay"

-g



From trac at twistedmatrix.com  Sun Sep 24 00:05:22 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 Sep 2017 06:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1506233122.8.3928339791071455232@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170924/1eebea36/attachment-0002.html>

From adi at roiban.ro  Mon Sep 25 03:09:51 2017
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 25 Sep 2017 10:09:51 +0100
Subject: [Twisted-Python] What to do with the session for a t.w.Site after
 the previous session has expired
Message-ID: <CAFycZ9eQG+ts8USp6EzrBZ-VyHNzcMYttjH6+Vx96_DJas0Y7g@mail.gmail.com>

The main ticket is here  https://twistedmatrix.com/trac/ticket/9288

But the main discussion is on the PR.

I am writing this email, as a notification. Please follow up over PR.

----------

The bug is:

When you have a long-running request, (more than the sessionTimeout)
and you want to get the session at the end of the request, you get an
error like `twisted.internet.error.AlreadyCalled: Tried to cancel an
already-called event.`

The possibilities for fixing this (as described by Exarkun):

1. You get back the same Session object as you had before, but with
its lifetime extended as though you've just `touch()`'d it.
2. You get back a new Session object but with the same uid as the one
you had before with a life time of `sessionTimeout` starting at the
point of the `getSession` call.
3. You get back a new Session object with a different uid - basically
a whole new session, as if the previous one never existed.

Check the PR for the reason why you want Option 2 or 3.

Right now, we are on course of implementing Option 1.

If you think that Option 1 is wrong, please leave your feedback over the PR :)

Thanks,
-- 
Adi Roiban



From p.mayers at imperial.ac.uk  Thu Sep 28 08:18:16 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 28 Sep 2017 15:18:16 +0100
Subject: [Twisted-Python] mailing list settings
Message-ID: <ade46bda-1c21-06e1-6ae3-924dd7ff1307@imperial.ac.uk>

What's the current way to change list setting e.g. subscribed address? 
The mailman links seem to be giving tracebacks e.g.

exceptions.OSError: [Errno 24] Too many open files



From glyph at twistedmatrix.com  Thu Sep 28 09:54:20 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 28 Sep 2017 08:54:20 -0700
Subject: [Twisted-Python] mailing list settings
In-Reply-To: <ade46bda-1c21-06e1-6ae3-924dd7ff1307@imperial.ac.uk>
References: <ade46bda-1c21-06e1-6ae3-924dd7ff1307@imperial.ac.uk>
Message-ID: <7B4D93A4-B3F0-4DB8-BD95-6CA8E5BBEB3C@twistedmatrix.com>

On Sep 28, 2017, at 7:18 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> 
> What's the current way to change list setting e.g. subscribed address? The mailman links seem to be giving tracebacks e.g.
> 
> exceptions.OSError: [Errno 24] Too many open files


The list settings are in the same place.  This probably means somebody needs to restart a thing.  Not me though, at least not this week :-).

-g


From bmurdock at gmail.com  Thu Sep 28 10:29:32 2017
From: bmurdock at gmail.com (Bryan Murdock)
Date: Thu, 28 Sep 2017 10:29:32 -0600
Subject: [Twisted-Python] website down?
Message-ID: <CAPY2A7PSv_Txh+Ho29OtOk5jAB0K-e74+p+GPO0S_zU+k6CBjw@mail.gmail.com>

Looks like twistedmatrix.com is down.

Bryan



From mrw at enotuniq.org  Thu Sep 28 11:28:19 2017
From: mrw at enotuniq.org (Mark Williams)
Date: Thu, 28 Sep 2017 10:28:19 -0700
Subject: [Twisted-Python] mailing list settings
In-Reply-To: <ade46bda-1c21-06e1-6ae3-924dd7ff1307@imperial.ac.uk>
References: <ade46bda-1c21-06e1-6ae3-924dd7ff1307@imperial.ac.uk>
Message-ID: <1506619699.6074.1121552240.066A4945@webmail.messagingengine.com>

This should now be fixed.

-- 
  Mark Williams
  mrw at enotuniq.org

On Thu, Sep 28, 2017, at 07:18 AM, Phil Mayers wrote:
> What's the current way to change list setting e.g. subscribed address? 
> The mailman links seem to be giving tracebacks e.g.
> 
> exceptions.OSError: [Errno 24] Too many open files
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From mrw at enotuniq.org  Thu Sep 28 11:28:30 2017
From: mrw at enotuniq.org (Mark Williams)
Date: Thu, 28 Sep 2017 10:28:30 -0700
Subject: [Twisted-Python] website down?
In-Reply-To: <CAPY2A7PSv_Txh+Ho29OtOk5jAB0K-e74+p+GPO0S_zU+k6CBjw@mail.gmail.com>
References: <CAPY2A7PSv_Txh+Ho29OtOk5jAB0K-e74+p+GPO0S_zU+k6CBjw@mail.gmail.com>
Message-ID: <1506619710.6170.1121552616.3D673E1F@webmail.messagingengine.com>

This should now be fixed.

-- 
  Mark Williams
  mrw at enotuniq.org

On Thu, Sep 28, 2017, at 09:29 AM, Bryan Murdock wrote:
> Looks like twistedmatrix.com is down.
> 
> Bryan
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From bmurdock at gmail.com  Thu Sep 28 11:34:03 2017
From: bmurdock at gmail.com (Bryan Murdock)
Date: Thu, 28 Sep 2017 11:34:03 -0600
Subject: [Twisted-Python] website down?
In-Reply-To: <1506619710.6170.1121552616.3D673E1F@webmail.messagingengine.com>
References: <CAPY2A7PSv_Txh+Ho29OtOk5jAB0K-e74+p+GPO0S_zU+k6CBjw@mail.gmail.com>
 <1506619710.6170.1121552616.3D673E1F@webmail.messagingengine.com>
Message-ID: <CAPY2A7Oa3TC74CzQEerRXqDKWkL2UKYwm3cWtLxQN+C+KJsAWw@mail.gmail.com>

Thanks!

Bryan

On Thu, Sep 28, 2017 at 11:28 AM, Mark Williams <mrw at enotuniq.org> wrote:
> This should now be fixed.
>
> --
>   Mark Williams
>   mrw at enotuniq.org
>
> On Thu, Sep 28, 2017, at 09:29 AM, Bryan Murdock wrote:
>> Looks like twistedmatrix.com is down.
>>
>> Bryan
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From zadka.moshe at gmail.com  Thu Sep 28 21:43:07 2017
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Fri, 29 Sep 2017 03:43:07 +0000
Subject: [Twisted-Python] Theory and practice of Pull Requests
Message-ID: <CAOA_4jAQHwre6Eg+_aECAq9St-e+v0wVfGFkWftc5eTX7ARJLA@mail.gmail.com>

FYI, I opened https://twistedmatrix.com/trac/ticket/9292 which seeks to
realign our theory (what we say in CONTRIBUTING) and what we do in practice
regarding pull requests on GitHub. Please comment on the ticket if you see
any issues!

Moshe Z.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170929/f51624e0/attachment-0002.html>

From rodrigc at crodrigues.org  Thu Sep 28 22:02:46 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 28 Sep 2017 21:02:46 -0700
Subject: [Twisted-Python] Theory and practice of Pull Requests
In-Reply-To: <CAOA_4jAQHwre6Eg+_aECAq9St-e+v0wVfGFkWftc5eTX7ARJLA@mail.gmail.com>
References: <CAOA_4jAQHwre6Eg+_aECAq9St-e+v0wVfGFkWftc5eTX7ARJLA@mail.gmail.com>
Message-ID: <CAG=rPVeHfBYo=hnFAyA5nzYMj06knCxW_JritS-xGp76nNvOpQ@mail.gmail.com>

Hi,

I have commented on that ticket with my suggestion for a GitHub commit
template.

I don't think we need to do anything drastic, but I think that we can
perform some small incremental improvements
that make the user experience of committing to Twisted more pleasant.

--
Craig

On Thu, Sep 28, 2017 at 8:43 PM, Moshe Zadka <zadka.moshe at gmail.com> wrote:

> FYI, I opened https://twistedmatrix.com/trac/ticket/9292 which seeks to
> realign our theory (what we say in CONTRIBUTING) and what we do in practice
> regarding pull requests on GitHub. Please comment on the ticket if you see
> any issues!
>
> Moshe Z.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170928/c9025f80/attachment-0002.html>

From adi at roiban.ro  Sat Sep 30 15:15:03 2017
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 30 Sep 2017 22:15:03 +0100
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
Message-ID: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>

Hi,

I would like to re-start the conversation about migrating Trac tickets
to GitHub issues.

My main reason for doing this is to make it easier for people to
contribute to Twisted.

In CONTRIBUTING there is this info

`GitHub doesn't provide adequate tooling for its community.`

I don't know what is missing in GitHub and why overall Trac is better
than GitHub issues.

I know that GitHub Issues is simple and you can't save reports.

What are problems are there with GitHub issues, which are blocking the
migration?

Please send your thoughts.

Why you think that GitHub issues might be worst than Trac tickets :) ?

--------

Below are the things that I things we will lose when migrating to
GitHub Issues and which will require extra work.

1. We will no longer get the nice ticket reports.

I don't know how to get something like this just using GitHub... and I
think that we will need a separate web page which uses GitHub API to
create the reports.

2. We might lose the owners / authors of some comments as there might
not be a maping from Trac to GitHub. This might be mititage as we are
already using GitHub for login.

3. There is extra one-time work required to do the actual migration,
and decide how to translate Trac ticket attributes to GitHub Issue
attributes.

We might not get consensus on how to migrate the metadata and this can
be a blocker.

4. We will no longer get the weekly reports and need more work to
reimplement them based on GitHub.

5. Highscores will stop counting the contribution, and it needs more
work to reimplement it on top of GitHub. I have hacked the highscores
project and I can change it to work both historic Trac data and new
GitHub data.

----------------

Below are my arguments for migrating to GitHub issues:

1. With Twisted tickets/PR only handled on GitHub you can have
contributions which are done only by sending a PR, without creating an
issue. You find a bug, you fix it and send a PR.
You no longer need to go to Trac and create a ticket and then do all
the cross-links copy and pasting.

2. We no longer have the review history in Trac, and the review
discussions are split between Trac and GitHub.

I think that in the future we will move more review discussions in GitHub.

Having all the discussion in a single place will make it easier to
search for something.

You no longer need to search GitHub and Trac tickets.

3. With tickets on GitHub we should simplify the infrastructure.
I feel that lately there was not much time from current Twisted dev to
take care of Twisted infra.
>From what I can see, the servers are just restarted on an issue, but
there is no time to investigate what is wrong.

I think that Twisted dev should focus on Twisted code and not spend
time with the ticketing infrastructure.

4. With tickets in GitHub, we don't need extra tooling to close a
ticket when a PR is merged.

5. With tickets in GitHub I assume that a lot of contributors will
only have to care about a single management tool: GitHub.

They will no longer have to learn about Trac, how Trac keywords work
for a ticket and how a workflow is implemented in Trac for Twisted.
>From what I can see, we are not using the Trac workflows anyway, just
a hack to implementing something like a workflow by manually setting
various attributes of a ticket.


Thanks,

PS: For my private project  I am still using Trac for issues and
GitHub for PR and manage the tools to keep them in sync.
I am using the Trac ticket workflows with a dedicated state for a
ticket when it needs a review or when a review was done and it needs
changes.
-- 
Adi Roiban



From adi at roiban.ro  Sat Sep 30 15:26:08 2017
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 30 Sep 2017 22:26:08 +0100
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
In-Reply-To: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
References: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
Message-ID: <CAFycZ9d7DjPr3vu-WcEYU_rUP+y6-eXFqpfaT9eOT4mARUD6RQ@mail.gmail.com>

On 30 September 2017 at 22:15, Adi Roiban <adi at roiban.ro> wrote:

[snip]

> --------
>
> Below are the things that I things we will lose when migrating to
> GitHub Issues and which will require extra work.
>

[snip]

6. We will no longer get the tickets pending review reported on IRC.

Beside reimplementing this based on GitHub issues, there might be a
lot of work in getting
consensus about how to mark a PR as needs review.

There is this thread which talks about how to implement the review
workflow in a PR

https://twistedmatrix.com/pipermail/twisted-python/2016-May/030333.html

Maybe before migrating to GitHub issues, we should first agree on this issue.


[snip]

-- 
Adi Roiban



From adi at roiban.ro  Sat Sep 30 16:14:34 2017
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 30 Sep 2017 23:14:34 +0100
Subject: [Twisted-Python] Defining the review workflow on top of GitHub PR
Message-ID: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>

I am restarting this discussion
https://twistedmatrix.com/pipermail/twisted-python/2016-May/030333.html

I am starting a new thread since I want to keep the focus on the
review process / workflow / markers, and not on the things required to
accept a PR or do a review.

----------

> Proposing: Just open a pull request.  Any open pull request should be treated as part of the queue.

I don't like this. If you are not a comitter, you need to open a PR to
trigger the tests.

So you want to first open a PR, then wait for tests to execute, then
fix and only after that to request the review.

We can start with setting the title to have "[WIP]" marker, to let
others know that this is not yet ready... but then when changes are
required, the reviewer will have to set the WIP marker again.. and if
the reviewer is not a team member, it will not have rights to edit the
subject.

But I hope that we can have a bot which once a "please review" comment
is left, it will set a label.

> Accepting: A committer pushes the big green button;

+1 ... but maybe also leave a comment :)

> Reviewing: This is the potentially slightly odd part.  I believe a review that doesn't result in acceptance should close the PR.  We need to be careful to always include some text that explains that closing a PR does not mean that the change is rejected, just that the submitter must re-submit.  Initially this would just mean opening a new PR, but Mark Williams is working on a bot to re-open pull requests when a submitter posts a "please review" comment: https://github.com/markrwilliams/txghbot

Since we will have a bot for "please review", why not use the same bot
to set a label on "please make changes" ?

I think that closing a PR should mean that the work on that branch is
rejected :)

> Responding: A submitter can open a new PR, or, once we start running txghbot, reopen their closed PR.

As commented above, I am +1 for leaving a "please review" comment and
having a bot updating the labels.

> Viewing: https://github.com/twisted/twisted/pulls?utf8=✓&q=is%3Apr+is%3Aopen+-status%3Afailed

One we get the "please-review" and "changes-needed" labels it should
be eaiser to view the queue.


-------

Whem multiple reviewers are required, you can use the dedicated GitHub
Review message and approve it without hiting the merge button.

---------

I have no idea how other projects are managing the review queue.

Please send your feedback.

If we agree on a process based on managing the labes, I can work on
implemeting the required logic with a bot and GitHub hooks.

--------

We can also start by using the WIP marker

* while preparing the PR
* once changes are required and the author works on addressing the
changes requsted on review

Any PR which is open and does not have the WIP marker means that is
part of the queue.

----------


Thanks!

PS: I have checked pyca/crypography but I don't see any pattern there
and a lot of PR are merged without any comment
https://github.com/pyca/cryptography/pulls?q=is%3Apr+is%3Aclosed

-- 
Adi Roiban



From rodrigc at crodrigues.org  Sat Sep 30 18:30:34 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 30 Sep 2017 17:30:34 -0700
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
In-Reply-To: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
References: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
Message-ID: <CAG=rPVcU4HOsCTW+bGZopkCk644m=iXVPk2qhO6E3CLgz=CZEw@mail.gmail.com>

On Sat, Sep 30, 2017 at 2:15 PM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> I would like to re-start the conversation about migrating Trac tickets
> to GitHub issues.
>
> My main reason for doing this is to make it easier for people to
> contribute to Twisted.
>


I think migrating Twisted issues from Trac to GitHub is a good idea,
and will make it easier for people to interact with the project.



>
>
> 1. We will no longer get the nice ticket reports.
>
>

This is true.  However, I will make a guess that
not many people are actively interacting with the Twisted
project, and not really actively following bug activity in Trac.
So there is some loss there, but I think the project would survive and go
on.

One thing that I would like to point out is that the Buildbot
project was using Trac for their issue tracker, and then decided to
migrate their issues to GitHub.

They worked on a tool called trac2github that allowed them to
migrate tickets from Trac to GitHub, preserving history, and
also creating a link back to the original Trac issue:

https://lists.buildbot.net/pipermail/devel/2017-March/012341.html

For the buildbot project, I think this approach as worked out, and the
project has continued.

If the Twisted project decides to switch to GitHub for issues, then
possibly buildbot's
scripts and experience can be used as a template for such a migration.


--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170930/73298bcb/attachment-0002.html>

