From glyph at twistedmatrix.com  Wed Jul  1 00:26:58 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 30 Jun 2020 23:26:58 -0700
Subject: [Twisted-Python] composition VS. inheritance
In-Reply-To: <86tuys8ieq.fsf@atlantis.meejah.ca>
References: <e3d4c273-c151-93ff-2e8b-fd97c1e12d12@haywood.id.au>
 <86tuys8ieq.fsf@atlantis.meejah.ca>
Message-ID: <2C40A473-5728-4A75-A2E9-49334FBDA3F4@twistedmatrix.com>


> On Jun 30, 2020, at 12:26 PM, meejah <meejah at meejah.ca> wrote:
> 
> I recently wrote a relatively simple protocol to try this "sans-io" style
> and was happy to start with the state-machine (using Automat). This
> forced some good decisions. Then I worked outwards to the "more boring"
> bits (framing and serialization/parsing).
> 
> (Hmm, this should almost just be a blog-post maybe ;)

One thing I should mention is that while there aren't necessarily great examples of stacking protocols like this at the parsing layer, some parts of Twisted do work by delegation and composition.  For example, in twisted web, Resource objects are thoroughly disconnected from the protocol layer, rather than, say, the various 'irc_' methods exposed in the IRC server.

So another way to look at this is to extend things like the Resource pattern down into the parser, rather than trying to think of a way to take apart the Protocol object in a wholly novel way.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200630/0beff659/attachment.htm>

From ian at haywood.id.au  Thu Jul  2 23:10:50 2020
From: ian at haywood.id.au (Ian Haywood)
Date: Fri, 3 Jul 2020 15:10:50 +1000
Subject: [Twisted-Python] composition VS. inheritance
In-Reply-To: <4577023.31r3eYUQgx@fpbarry>
References: <e3d4c273-c151-93ff-2e8b-fd97c1e12d12@haywood.id.au>
 <4577023.31r3eYUQgx@fpbarry>
Message-ID: <c385779d-dd9a-6e79-0a47-1927bfccb9df@haywood.id.au>


On 1/07/2020 1:41 am, Barry Scott wrote:
> On Saturday, 27 June 2020 07:47:14 BST Ian Haywood wrote:
>
>
> I've been told in code review to use composition instead of inheritance,
> which is fine in a general sense but I have difficulty applying to
> twisted-specific task
>
>

thanks for these pointers everyone.

I have changed the code in my PR to remove the subclass-of-a-subclass.

I'm now looking for a committer who is able to review it again.

https://github.com/twisted/twisted/pull/1274

Ian


From maarten at treewalker.org  Fri Jul  3 09:01:27 2020
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Fri, 03 Jul 2020 17:01:27 +0200
Subject: [Twisted-Python] pydoctor 20.7.0
Message-ID: <4344992.CKcNp0E4fB@hyperion>

Hi all,

I'm happy to announce that a new release of pydoctor, the documentation 
extractor used by Twisted, is available on PyPI.

https://pypi.org/project/pydoctor/

Thanks to everyone who contributed with patches and reviews!


Major changes in this release:

- Python 3 support
- Type annotations on attributes are supported when running on Python 3
- Type comments on attributes are supported when running on Python 3.8+
- Type annotations on function definitions are not supported yet
- Undocumented attributes are now included in the output
- Attribute docstrings: a module, class or instance variable can be 
documented by a following it up with a docstring
- Improved error reporting: more errors are reported, error messages 
include file name and line number
- Dropped support for implicit relative imports
- Explicit relative imports (using "from") no longer cause warnings
- Dropped support for index terms in epytext ("X{}"); this was never 
supported in any meaningful capacity, but now the tag is gone

This will be the last release to support Python 2.7 and 3.5: future 
releases will require Python 3.6 or later.

Bye,
		Maarten




From glyph at twistedmatrix.com  Fri Jul  3 17:24:09 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 3 Jul 2020 16:24:09 -0700
Subject: [Twisted-Python] pydoctor 20.7.0
In-Reply-To: <4344992.CKcNp0E4fB@hyperion>
References: <4344992.CKcNp0E4fB@hyperion>
Message-ID: <665D3D10-9B2C-4BF6-B3A4-E5435F95F81A@twistedmatrix.com>

> On Jul 3, 2020, at 8:01 AM, Maarten ter Huurne <maarten at treewalker.org> wrote:
> 
> Hi all,
> 
> I'm happy to announce that a new release of pydoctor, the documentation 
> extractor used by Twisted, is available on PyPI.
> 
> https://pypi.org/project/pydoctor/
> 
> Thanks to everyone who contributed with patches and reviews!

Maarten, we all owe you a significant debt of gratitude for really shepherding PyDoctor into the era of modern Python.  Thank you so much for relieving this maintenance burden and making PyDoctor into something I can once again confidently recommend!

-glyph



From moshez at zadka.club  Fri Jul  3 23:20:27 2020
From: moshez at zadka.club (Moshe Zadka)
Date: Fri, 03 Jul 2020 22:20:27 -0700
Subject: [Twisted-Python] pydoctor 20.7.0
In-Reply-To: <665D3D10-9B2C-4BF6-B3A4-E5435F95F81A@twistedmatrix.com>
References: <4344992.CKcNp0E4fB@hyperion>
 <665D3D10-9B2C-4BF6-B3A4-E5435F95F81A@twistedmatrix.com>
Message-ID: <41312159-dbeb-46d8-90b3-5c50e42db8ca@www.fastmail.com>

Indeed, let me join on to the thanks! Awesome work Maarten!

On Fri, Jul 3, 2020, at 16:24, Glyph wrote:
> > On Jul 3, 2020, at 8:01 AM, Maarten ter Huurne <maarten at treewalker.org> wrote:
> > 
> > Hi all,
> > 
> > I'm happy to announce that a new release of pydoctor, the documentation 
> > extractor used by Twisted, is available on PyPI.
> > 
> > https://pypi.org/project/pydoctor/
> > 
> > Thanks to everyone who contributed with patches and reviews!
> 
> Maarten, we all owe you a significant debt of gratitude for really shepherding PyDoctor into the era of modern Python. Thank you so much for relieving this maintenance burden and making PyDoctor into something I can once again confidently recommend!
> 
> -glyph
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200703/84d2f0b5/attachment.htm>

From trac at twistedmatrix.com  Sun Jul  5 00:05:21 2020
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 05 Jul 2020 06:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1593929121.75.7163242789698272948@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200705/6972de58/attachment.htm>

From glyph at twistedmatrix.com  Fri Jul 10 00:00:00 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 9 Jul 2020 23:00:00 -0700
Subject: [Twisted-Python] new milestone: "publish types"
Message-ID: <0C466DEE-6090-467D-93C0-458EB86DB097@twistedmatrix.com>

In case you missed it, I created a new milestone here:

https://twistedmatrix.com/trac/milestone/publish%20types <https://twistedmatrix.com/trac/milestone/publish%20types>

since we're doing a bunch of work to add type annotations to Twisted and it would be nice to get a bird's eye view of that work in a milestone.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200709/76aa819b/attachment.htm>

From trac at twistedmatrix.com  Sun Jul 12 00:05:15 2020
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 12 Jul 2020 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1594533915.8.2233970416918515835@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200712/62c97e5e/attachment.htm>

From rodrigc at crodrigues.org  Fri Jul 17 14:08:39 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 17 Jul 2020 13:08:39 -0700
Subject: [Twisted-Python] mypy now mandatory for Twisted pull requests
Message-ID: <CAG=rPVd=VQMCZqxGawEDudYFGZj_QXUQ1aUud13B66WyhRf5qw@mail.gmail.com>

Hi,

In the Twisted trunk branch, I have reduced the number of errors reported
by mypy to *zero!*
You verify this by running:

*tox -e mypy*

In addition, I have worked with Adi to enable CI for Twisted checkins so
that mypy is
run for each pull request.  Adi configured the GitHub repo to  *require*
mypy to pass in order for a Twisted pull request to be merged.

Thanks to Adi, Wilfredo, Tom, and Maarten for helping with various
mypy-related code reviews!
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200717/eee9aa62/attachment.htm>

From glyph at twistedmatrix.com  Mon Jul 20 01:33:54 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 20 Jul 2020 00:33:54 -0700
Subject: [Twisted-Python] mypy now mandatory for Twisted pull requests
In-Reply-To: <CAG=rPVd=VQMCZqxGawEDudYFGZj_QXUQ1aUud13B66WyhRf5qw@mail.gmail.com>
References: <CAG=rPVd=VQMCZqxGawEDudYFGZj_QXUQ1aUud13B66WyhRf5qw@mail.gmail.com>
Message-ID: <4D4295B0-71C7-4896-921A-4DA16A90B445@twistedmatrix.com>


> On Jul 17, 2020, at 1:08 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Hi,
> 
> In the Twisted trunk branch, I have reduced the number of errors reported by mypy to zero!
> You verify this by running:
> 
> tox -e mypy
> 
> In addition, I have worked with Adi to enable CI for Twisted checkins so that mypy is
> run for each pull request.  Adi configured the GitHub repo to  require
> mypy to pass in order for a Twisted pull request to be merged.
> 
> Thanks to Adi, Wilfredo, Tom, and Maarten for helping with various mypy-related code reviews!

This is amazing news!  Thanks so much to everybody working on this!

Presumably we still have tons of annotations that need to be added, and I would recommend that anyone interested file tickets against the https://twistedmatrix.com/trac/milestone/publish%20types <https://twistedmatrix.com/trac/milestone/publish%20types> milestone so that we can track what's needed to get to the next phase of type adoption :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200720/8fddfc03/attachment.htm>

From jeff at ocjtech.us  Thu Jul 23 16:13:17 2020
From: jeff at ocjtech.us (Jeffrey Ollie)
Date: Thu, 23 Jul 2020 17:13:17 -0500
Subject: [Twisted-Python] Semi-OT: hyperlink/twisted.python.url style
 package for Go
Message-ID: <CAD-DQxROLPE-BNx9bmnf6YWNm3Ntp=2xvKTxWz+nsoCR4iACPA@mail.gmail.com>

I've become a big fan of hyperlink and twisted.python.url for manipulating
URLs. The problem is that my current project needs to be written in Go.
Google has failed me, everything that turns up just leads back to the
standard "net/url" package. Developing my own package is probably not going
to happen - I'm too new at Go (admittedly this might make a great learning
project) and the project time constraints aren't on my side.

Does anyone know of a Go package that has a similar API to
hyperlink/twisted.python.url?

-- 
Jeff Ollie
The majestik møøse is one of the mäni interesting furry animals in Sweden.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200723/2e69048e/attachment.htm>

From trac at twistedmatrix.com  Sun Jul 26 00:05:17 2020
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 26 Jul 2020 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1595743517.19.8448976625204705982@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200726/a65f8c11/attachment.htm>

From barry.scott at forcepoint.com  Wed Jul 29 10:15:57 2020
From: barry.scott at forcepoint.com (Barry Scott)
Date: Wed, 29 Jul 2020 17:15:57 +0100
Subject: [Twisted-Python] Check of command leads to Traceback in http.py
Message-ID: <2038744.Mh6RI2rZIc@fpbarry>

I'm seeing a Traceback in twisted/web/http.py and that lead me to read some of the code.

First question in this code from HTTPChannel.lineReceived() at line 2103 why only
check that the command is ASCII? By spec the whole line must be a subset of ASCII,
is there a good reason to not check that the request and version are ASCII?

We see requests where the first line is binary data in production.

            parts = line.split()
            if len(parts) != 3:
                self._respondToBadRequestAndDisconnect()
                return
            command, request, version = parts
            try:
                command.decode("ascii")
            except UnicodeDecodeError:
                self._respondToBadRequestAndDisconnect()
                return

If the code calls self._respondToBadRequestAndDisconnect()
It does not set self._version.

Next there is a call to lineReceived('') and the code Tracebacks when it
access self._version in this code at line 2293:

    def allHeadersReceived(self):
        req = self.requests[-1]
        req.parseCookies()
        self.persistent = self.checkPersistence(req, self._version)

Does this look wrong to you?

Also why do you del self._version as an idiom and not set it to None?

Barry




From sda at fstab.net  Thu Jul 30 08:33:51 2020
From: sda at fstab.net (Kyle Altendorf)
Date: Thu, 30 Jul 2020 10:33:51 -0400
Subject: [Twisted-Python] Management of PyPI maintainers (as related to
 qt5reactor)
Message-ID: <1aa65876db2b46619fb88930d3d792d5@fstab.net>

Following up on:
https://github.com/twisted/qt5reactor/issues/50#issuecomment-658432478

qt5reactor has recently been moved into the Twisted organization on 
GitHub.  The intent is that being in an org will make it less likely 
that existing maintainers disappear and the project is stranded with 
nobody having the authority to pass it on to any new maintainers.  If we 
happen to get more people interested in maintenance that's a bonus, but 
it is not the reason for the move.

The question is, how should the Twisted organization manage PyPI access 
for its projects?  Glyph mentioned there is a 1password account that 
could be relevant.  I have not used 1password personally so I don't know 
any details about how it would fit in here.  Twisted itself has six 
maintainers listed on PyPI: exarkun, glyph, hawkowl, itamarst, jml, and 
markrwilliams.

Any opinions?  1Password vs. 
just-add-a-couple-maintainers-to-the-qt5reactor-pypi vs. ...?

Thanks for your consideration.

Cheers,
-kyle


From exarkun at twistedmatrix.com  Thu Jul 30 12:10:42 2020
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 30 Jul 2020 14:10:42 -0400
Subject: [Twisted-Python] Management of PyPI maintainers (as related to
 qt5reactor)
In-Reply-To: <1aa65876db2b46619fb88930d3d792d5@fstab.net>
References: <1aa65876db2b46619fb88930d3d792d5@fstab.net>
Message-ID: <CAEeXt4ORxhyPUd=inBXb+=A8b8OywA-qxk0FfzLBcmqwGidevw@mail.gmail.com>

On Thu, Jul 30, 2020 at 10:34 AM Kyle Altendorf <sda at fstab.net> wrote:

> Following up on:
> https://github.com/twisted/qt5reactor/issues/50#issuecomment-658432478
>
> qt5reactor has recently been moved into the Twisted organization on
> GitHub.  The intent is that being in an org will make it less likely
> that existing maintainers disappear and the project is stranded with
> nobody having the authority to pass it on to any new maintainers.  If we
> happen to get more people interested in maintenance that's a bonus, but
> it is not the reason for the move.
>
> The question is, how should the Twisted organization manage PyPI access
> for its projects?  Glyph mentioned there is a 1password account that
> could be relevant.  I have not used 1password personally so I don't know
> any details about how it would fit in here.  Twisted itself has six
> maintainers listed on PyPI: exarkun, glyph, hawkowl, itamarst, jml, and
> markrwilliams.
>
> Any opinions?  1Password vs.
> just-add-a-couple-maintainers-to-the-qt5reactor-pypi vs. ...?
>
>
Can you clarify this a bit?  PyPI has perfectly serviceable support for
multiple maintainers per project.  What benefits come from sharing some
kind of credentials (and what credentials) via a tool like 1Password?

It seems like folks who should be qt5reactor PyPI maintainers can have
their personal PyPI accounts configured as maintainers on PyPI and then the
problem's solved.

So, if I've missed something, maybe you can help clarify.

Thanks,
Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200730/a607400c/attachment.htm>

From sda at fstab.net  Thu Jul 30 13:58:37 2020
From: sda at fstab.net (Kyle Altendorf)
Date: Thu, 30 Jul 2020 15:58:37 -0400
Subject: [Twisted-Python] Management of PyPI maintainers (as related to
 qt5reactor)
In-Reply-To: <CAEeXt4ORxhyPUd=inBXb+=A8b8OywA-qxk0FfzLBcmqwGidevw@mail.gmail.com>
References: <1aa65876db2b46619fb88930d3d792d5@fstab.net>
 <CAEeXt4ORxhyPUd=inBXb+=A8b8OywA-qxk0FfzLBcmqwGidevw@mail.gmail.com>
Message-ID: <e56aebcb16c1418f81d63f0206f29058@fstab.net>

On 2020-07-30 14:10, Jean-Paul Calderone wrote:

> On Thu, Jul 30, 2020 at 10:34 AM Kyle Altendorf <sda at fstab.net> wrote:
> 
>> Following up on:
>> https://github.com/twisted/qt5reactor/issues/50#issuecomment-658432478
>> 
>> qt5reactor has recently been moved into the Twisted organization on
>> GitHub.  The intent is that being in an org will make it less likely
>> that existing maintainers disappear and the project is stranded with
>> nobody having the authority to pass it on to any new maintainers.  If 
>> we
>> happen to get more people interested in maintenance that's a bonus, 
>> but
>> it is not the reason for the move.
>> 
>> The question is, how should the Twisted organization manage PyPI 
>> access
>> for its projects?  Glyph mentioned there is a 1password account that
>> could be relevant.  I have not used 1password personally so I don't 
>> know
>> any details about how it would fit in here.  Twisted itself has six
>> maintainers listed on PyPI: exarkun, glyph, hawkowl, itamarst, jml, 
>> and
>> markrwilliams.
>> 
>> Any opinions?  1Password vs.
>> just-add-a-couple-maintainers-to-the-qt5reactor-pypi vs. ...?
> 
> Can you clarify this a bit?  PyPI has perfectly serviceable support for 
> multiple maintainers per project.  What benefits come from sharing some 
> kind of credentials (and what credentials) via a tool like 1Password?
> 
> It seems like folks who should be qt5reactor PyPI maintainers can have 
> their personal PyPI accounts configured as maintainers on PyPI and then 
> the problem's solved.
> 
> So, if I've missed something, maybe you can help clarify.

qt5reactor isn't particularly active and and my hope in it moving into 
the Twisted organization is that if all 'active' maintainers are lost 
and someone else volunteers later, an organizational maintainer could 
choose to give the new volunteer the necessary authority.  It may well 
be that this is a silly reason to make the move but I haven't been 
corrected about it yet.  :]

I didn't originate the 1password suggestion but if a Twisted PyPI 
account were created, as Adi mentioned, and the credentials stored in 
1password then that would associate control with the Twisted 
organization rather than individual developers.  The presently 'active' 
individual developers would presumably retain their PyPI maintainership 
rights as well.

Any more clear now?

Cheers,
-kyle


From exarkun at twistedmatrix.com  Thu Jul 30 19:14:50 2020
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 30 Jul 2020 21:14:50 -0400
Subject: [Twisted-Python] Management of PyPI maintainers (as related to
 qt5reactor)
In-Reply-To: <e56aebcb16c1418f81d63f0206f29058@fstab.net>
References: <1aa65876db2b46619fb88930d3d792d5@fstab.net>
 <CAEeXt4ORxhyPUd=inBXb+=A8b8OywA-qxk0FfzLBcmqwGidevw@mail.gmail.com>
 <e56aebcb16c1418f81d63f0206f29058@fstab.net>
Message-ID: <CAEeXt4NQuUX0fKqx9uRaq4=qRYS59nZ8b4tjqOQNNG=J1QHDZQ@mail.gmail.com>

On Thu, Jul 30, 2020 at 3:58 PM Kyle Altendorf <sda at fstab.net> wrote:

> On 2020-07-30 14:10, Jean-Paul Calderone wrote:
>
> >
> > So, if I've missed something, maybe you can help clarify.
>
> qt5reactor isn't particularly active and and my hope in it moving into
> the Twisted organization is that if all 'active' maintainers are lost
> and someone else volunteers later, an organizational maintainer could
> choose to give the new volunteer the necessary authority.  It may well
> be that this is a silly reason to make the move but I haven't been
> corrected about it yet.  :]
>
> I didn't originate the 1password suggestion but if a Twisted PyPI
> account were created, as Adi mentioned, and the credentials stored in
> 1password then that would associate control with the Twisted
> organization rather than individual developers.  The presently 'active'
> individual developers would presumably retain their PyPI maintainership
> rights as well.
>
> Any more clear now?
>
>
Yep, thanks for clarifying.


> Cheers,
> -kyle
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200730/53102c7b/attachment.htm>

