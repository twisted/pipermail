From c2k_list at gmx.de  Tue Jul  1 07:06:21 2008
From: c2k_list at gmx.de (Torsten A.)
Date: Tue, 1 Jul 2008 13:06:21 +0200
Subject: [Twisted-Python] ZSI using Twisted Web Server
Message-ID: <mailman.3.1246826570.728.twisted-python@twistedmatrix.com>

Hello everyone,
I hope I'm not totally off topic since this is not a specific twisted
problem, but I am stuck and don't know what to do...

I need to create WS's on the fly, meaning if someone connects to a given
fixed WS (call it baseWS) and asks for specific webservice created just for
him, I need to realize this. The new webservice will then be published under
a new URL than the baseWS is.

I am using twisted's resources in twisted.web.resource to watch the path and
then create the objects handling the request specific to the entered path.
Everything works fine up to this point.

Whenever I connect to the baseWS, the render-function is called and
deligates the request to render_POST(), which I created. In render_POST() I
can access the SOAP-Envelope via request.content.read(), just as supposed
to. Now, since I have the plaintext SOAP-Envelope, I need ZSI to parse it,
extract the functions and argument of the envelope (RPC call) and call the
corresponding function. I just cannot figure out where to start in ZSI.

Can someone help me out which function to call/ class to create? I just want
to enter the ZSI process where this step is done and then give control to
ZSI, as if it received the SOAP-envelope from its own webserver.

Cheers,
Torsten




From radix at twistedmatrix.com  Tue Jul  1 07:59:56 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 1 Jul 2008 07:59:56 -0400
Subject: [Twisted-Python] ZSI using Twisted Web Server
In-Reply-To: <E1KDdhL-0001Y3-Vt@cube.twistedmatrix.com>
References: <E1KDdhL-0001Y3-Vt@cube.twistedmatrix.com>
Message-ID: <60ed19d40807010459i195a35c2m529b3caefd177b21@mail.gmail.com>

On Tue, Jul 1, 2008 at 7:06 AM, Torsten A. <c2k_list at gmx.de> wrote:
> Whenever I connect to the baseWS, the render-function is called and
> deligates the request to render_POST(), which I created. In render_POST() I
> can access the SOAP-Envelope via request.content.read(), just as supposed
> to. Now, since I have the plaintext SOAP-Envelope, I need ZSI to parse it,
> extract the functions and argument of the envelope (RPC call) and call the
> corresponding function. I just cannot figure out where to start in ZSI.
>
> Can someone help me out which function to call/ class to create? I just want
> to enter the ZSI process where this step is done and then give control to
> ZSI, as if it received the SOAP-envelope from its own webserver.

It sounds like you've figured out the Twisted side alright, but you
don't know how to use ZSI's APIs to do what you want. Perhaps you
should ask the ZSI community about that.

FWIW, I'd love to see twisted.web.soap to be updated to use ZSI, since
it's still using the crappy SOAPpy. If you come up with a general soap
service layer like twisted.web.soap, it may be interesting to include
it in Twisted.


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From nathan.stocks at gmail.com  Tue Jul  1 12:19:16 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Tue, 1 Jul 2008 10:19:16 -0600
Subject: [Twisted-Python] Returning a DeferredList?
In-Reply-To: <op.udlbx7y53oj628@l-daniel-burrs-computer.local>
References: <96c9d6a80806301452y204aa64br5e8ad15b4645bf50@mail.gmail.com>
	<18537.23616.781117.722224@jon.es>
	<96c9d6a80806301554r11ce65d9yb8064996d8db15f2@mail.gmail.com>
	<op.udlbx7y53oj628@l-daniel-burrs-computer.local>
Message-ID: <96c9d6a80807010919j4a594021v5f95670599fc9aad@mail.gmail.com>

On Mon, Jun 30, 2008 at 8:02 PM, L. Daniel Burr <ldanielburr at mac.com> wrote:
> On Mon, 30 Jun 2008 17:54:33 -0500, Nathan <nathan.stocks at gmail.com> wrote:
>
>> On Mon, Jun 30, 2008 at 4:20 PM, Terry Jones <terry at jon.es> wrote:
>>>
>>> You're not using deferreds properly. In the simple/typical case, when you
>>> call a function that returns a deferred, you will want to add (at least)
>>> a
>>
>> I don't think that's true.  Jean-Paul was the one who told me to do it
>> that way in the first place:
>>
>> http://twistedmatrix.com/pipermail/twisted-python/2008-April/017304.html
>>
>
> Terry (hi Terry) is correct here.  Your interpretation of Jean-Paul
> Calderone's message is flawed, although I certainly understand how
> the misinterpretation could occur.  There's a big difference between
> the AMP example in that thread, and the example code you posted to
> this thread.

Oh, ok.  My apologies, Terry.  After staring for awhile I think I
figured out what's going on.  First, everywhere I use this method in
real code is to provide a final AMP response (which is why it works
for me).  I think what Jean Paul meant was that the AMP code looks at
the object that the AMP responder returns, and if that object is a
deferred, then the underlying AMP code (that you don't normally see)
waits for the deferred's callback value and uses that as the actual
return value of the AMP responder.  I had mistakenly taken this as a
more general method of
returned-deferreds-resolving-into-their-callback-values, which is why
everyone is taking issue with my hasty AMP-less pseudo-code.

I must say, I've had more trouble grasping the nuances of deferreds
and other twisted objects than any other framework or language I've
ever worked with.  I also spend much more time _in vain_ going through
the docs and api reference than other languages.   At least there's a
great mailing list!

So back to my original task -- I'm trying to get that same behaviour
in AMP when using a deferred list -- but I could probably just create
a deferred and return it as the AMP response (because AMP will wait
for the deferred's callback value), and then fire a callback with my
correct answer once I've processed my deferred list.  Thus, I could
avoid figuring out how AMP handles
deferred-lists-returned-from-responders altogether.

Have I got it straight now?

~ Nathan



From terry at jon.es  Tue Jul  1 12:41:25 2008
From: terry at jon.es (Terry Jones)
Date: Tue, 1 Jul 2008 18:41:25 +0200
Subject: [Twisted-Python] Returning a DeferredList?
In-Reply-To: Your message at 10:19:16 on Tuesday, 1 July 2008
References: <96c9d6a80806301452y204aa64br5e8ad15b4645bf50@mail.gmail.com>
	<18537.23616.781117.722224@jon.es>
	<96c9d6a80806301554r11ce65d9yb8064996d8db15f2@mail.gmail.com>
	<op.udlbx7y53oj628@l-daniel-burrs-computer.local>
	<96c9d6a80807010919j4a594021v5f95670599fc9aad@mail.gmail.com>
Message-ID: <18538.24117.528819.14953@jon.es>

>>>>> "Nathan" == Nathan  <nathan.stocks at gmail.com> writes:

Nathan> Oh, ok.  My apologies, Terry.

Thanks - but no need!

Nathan> After staring for awhile I think I figured out what's going on.
Nathan> First, everywhere I use this method in real code is to provide a
Nathan> final AMP response (which is why it works for me).  I think what
Nathan> Jean Paul meant was that the AMP code looks at the object that the
Nathan> AMP responder returns, and if that object is a deferred, then the
Nathan> underlying AMP code (that you don't normally see) waits for the
Nathan> deferred's callback value and uses that as the actual return value
Nathan> of the AMP responder.

I've not looked at the code (maybe you should! :-)) but that sounds
right. And it would probably do this by just adding another callback to the
deferred.

Nathan> I had mistakenly taken this as a more general method of
Nathan> returned-deferreds-resolving-into-their-callback-values, which is
Nathan> why everyone is taking issue with my hasty AMP-less pseudo-code.

That sounds right.

Nathan> I must say, I've had more trouble grasping the nuances of deferreds
Nathan> and other twisted objects than any other framework or language I've
Nathan> ever worked with.  I also spend much more time _in vain_ going
Nathan> through the docs and api reference than other languages.  At least
Nathan> there's a great mailing list!

I know the feeling. I've found it helpful to read the various Deferred
pages quite a few times through, to play with toy examples to see the flow
of control, and also to read the source of defer.py (which isn't complex
and which I think is elegant).

Nathan> So back to my original task -- I'm trying to get that same behaviour
Nathan> in AMP when using a deferred list -- but I could probably just create
Nathan> a deferred and return it as the AMP response (because AMP will wait
Nathan> for the deferred's callback value), and then fire a callback with my
Nathan> correct answer once I've processed my deferred list.  Thus, I could
Nathan> avoid figuring out how AMP handles
Nathan> deferred-lists-returned-from-responders altogether.

That sounds right too. It might help to know that a DeferredList is just a
subclass of Deferred. So when you return a DeferredList, you're in fact
returning something that behaves like a regular Deferred. When its callback
is fired, it gets a list of status & results from all the deferreds in the
originally passed list. So if AMP knows how to handle deferreds, it can
certainly handle a DeferredList too.

Nathan> Have I got it straight now?

Yep, sounds like it.

Terry



From nathan.stocks at gmail.com  Tue Jul  1 12:57:45 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Tue, 1 Jul 2008 10:57:45 -0600
Subject: [Twisted-Python] Returning a DeferredList?
In-Reply-To: <18538.24117.528819.14953@jon.es>
References: <96c9d6a80806301452y204aa64br5e8ad15b4645bf50@mail.gmail.com>
	<18537.23616.781117.722224@jon.es>
	<96c9d6a80806301554r11ce65d9yb8064996d8db15f2@mail.gmail.com>
	<op.udlbx7y53oj628@l-daniel-burrs-computer.local>
	<96c9d6a80807010919j4a594021v5f95670599fc9aad@mail.gmail.com>
	<18538.24117.528819.14953@jon.es>
Message-ID: <96c9d6a80807010957y316f5bb5ub5aee03c764722f5@mail.gmail.com>

On Tue, Jul 1, 2008 at 10:41 AM, Terry Jones <terry at jon.es> wrote:
> That sounds right too. It might help to know that a DeferredList is just a
> subclass of Deferred. So when you return a DeferredList, you're in fact
> returning something that behaves like a regular Deferred. When its callback
> is fired, it gets a list of status & results from all the deferreds in the
> originally passed list. So if AMP knows how to handle deferreds, it can
> certainly handle a DeferredList too.

I didn't know that!  Well, I'll just go ahead and try returning my
DeferredList as my AMP response and see if the return value of the
callback gets to the other end of the AMP connection.

> Nathan> Have I got it straight now?
>
> Yep, sounds like it.

Hooray!

~ Nathan



From jeff.dyke at gmail.com  Tue Jul  1 17:53:26 2008
From: jeff.dyke at gmail.com (Jeff Dyke)
Date: Tue, 1 Jul 2008 17:53:26 -0400
Subject: [Twisted-Python] stopping daemon started via twistd
Message-ID: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>

I'm looking for a portable way to stop and start a twisted
application, specifically a  twisted.web.xmlrpc server being started
with a .tac file via twistd.  on ubuntu i can easily use the
start-stop-daemon but some other developers are using mac/windows and
i was looking for a nice way for all to be able to start and stop this
server as they make changes to it, aside from kill/killproc that is.

I noticed that the object returned after calling internet.SSLServer
server has a method called stopService, but am confused about how to
use that, after starting it with twistd.  Perhaps twistd is not the
right approach for starting?  googling around seems to bring up
arguments from years past about if this behavior belongs in twisted on
in the users app, but found no real solution...but may have missed the
obvious.

Thanks
Jeff



From exarkun at divmod.com  Tue Jul  1 18:19:18 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 1 Jul 2008 18:19:18 -0400
Subject: [Twisted-Python] stopping daemon started via twistd
In-Reply-To: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>
Message-ID: <20080701221918.4714.1304095869.divmod.quotient.15858@ohm>

On Tue, 1 Jul 2008 17:53:26 -0400, Jeff Dyke <jeff.dyke at gmail.com> wrote:
>I'm looking for a portable way to stop and start a twisted
>application, specifically a  twisted.web.xmlrpc server being started
>with a .tac file via twistd.  on ubuntu i can easily use the
>start-stop-daemon but some other developers are using mac/windows and
>i was looking for a nice way for all to be able to start and stop this
>server as they make changes to it, aside from kill/killproc that is.
>
>I noticed that the object returned after calling internet.SSLServer
>server has a method called stopService, but am confused about how to
>use that, after starting it with twistd.  Perhaps twistd is not the
>right approach for starting?  googling around seems to bring up
>arguments from years past about if this behavior belongs in twisted on
>in the users app, but found no real solution...but may have missed the
>obvious.

Perhaps the feature described at http://twistedmatrix.com/trac/ticket/2577
is what you're looking for?  Someone still needs to implement it. :)

Jean-Paul



From kevin.horn at gmail.com  Tue Jul  1 18:26:13 2008
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 1 Jul 2008 17:26:13 -0500
Subject: [Twisted-Python] stopping daemon started via twistd
In-Reply-To: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>
References: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>
Message-ID: <562bcc10807011526w25b5708rb6a7597ecbdb5bfe@mail.gmail.com>

I don't know of a portable way to do this, but...

The "stopService" method that you referenced is probably not what you want.

It stops a twisted service object, which you should have created in your
.tac file, but does not stop twistd.

I know diddly about how to stop and start service/daemon processes on MacOS,
but on Win32, you have a lot of options:
- rewrite things to use pywin32's services support...this typically involves
starting the reactor manually, though
- there's some code in the twisted svn sandbox (look under moonfallen) that
does something like this using py2exe (haven't used this though)
- take your twistd command line and use "instsrv" and "srvany" to make it
run as a service (maybe)

Good luck!

Kevin Horn


On Tue, Jul 1, 2008 at 4:53 PM, Jeff Dyke <jeff.dyke at gmail.com> wrote:

> I'm looking for a portable way to stop and start a twisted
> application, specifically a  twisted.web.xmlrpc server being started
> with a .tac file via twistd.  on ubuntu i can easily use the
> start-stop-daemon but some other developers are using mac/windows and
> i was looking for a nice way for all to be able to start and stop this
> server as they make changes to it, aside from kill/killproc that is.
>
> I noticed that the object returned after calling internet.SSLServer
> server has a method called stopService, but am confused about how to
> use that, after starting it with twistd.  Perhaps twistd is not the
> right approach for starting?  googling around seems to bring up
> arguments from years past about if this behavior belongs in twisted on
> in the users app, but found no real solution...but may have missed the
> obvious.
>
> Thanks
> Jeff
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080701/47bd620e/attachment.htm 

From curtferguson at cfl.rr.com  Tue Jul  1 19:09:31 2008
From: curtferguson at cfl.rr.com (Curt)
Date: Tue, 01 Jul 2008 19:09:31 -0400
Subject: [Twisted-Python] stopping daemon started via twistd
In-Reply-To: <562bcc10807011526w25b5708rb6a7597ecbdb5bfe@mail.gmail.com>
References: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>
	<562bcc10807011526w25b5708rb6a7597ecbdb5bfe@mail.gmail.com>
Message-ID: <486AB92B.3050901@cfl.rr.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080701/576dc7f3/attachment.htm 

From jeff.dyke at gmail.com  Wed Jul  2 08:39:33 2008
From: jeff.dyke at gmail.com (Jeff Dyke)
Date: Wed, 2 Jul 2008 08:39:33 -0400
Subject: [Twisted-Python] stopping daemon started via twistd
In-Reply-To: <486AB92B.3050901@cfl.rr.com>
References: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>
	<562bcc10807011526w25b5708rb6a7597ecbdb5bfe@mail.gmail.com>
	<486AB92B.3050901@cfl.rr.com>
Message-ID: <8496caf30807020539l5e1eca75t77bbe4a64c247ef8@mail.gmail.com>

On Tue, Jul 1, 2008 at 7:09 PM, Curt <curtferguson at cfl.rr.com> wrote:
> Kevin Horn wrote:
>
> I don't know of a portable way to do this, but...
>
> The "stopService" method that you referenced is probably not what you want.
> It stops a twisted service object, which you should have created in your
> .tac file, but does not stop twistd.
>
> I know diddly about how to stop and start service/daemon processes on MacOS,
> but on Win32, you have a lot of options:
> - rewrite things to use pywin32's services support...this typically involves
> starting the reactor manually, though
> - there's some code in the twisted svn sandbox (look under moonfallen) that
> does something like this using py2exe (haven't used this though)
> - take your twistd command line and use "instsrv" and "srvany" to make it
> run as a service (maybe)
>
> Good luck!
>
> Kevin Horn
>
>
> On Tue, Jul 1, 2008 at 4:53 PM, Jeff Dyke <jeff.dyke at gmail.com> wrote:
>>
>> I'm looking for a portable way to stop and start a twisted
>> application, specifically a  twisted.web.xmlrpc server being started
>> with a .tac file via twistd.  on ubuntu i can easily use the
>> start-stop-daemon but some other developers are using mac/windows and
>> i was looking for a nice way for all to be able to start and stop this
>> server as they make changes to it, aside from kill/killproc that is.
>>
>> I noticed that the object returned after calling internet.SSLServer
>> server has a method called stopService, but am confused about how to
>> use that, after starting it with twistd.  Perhaps twistd is not the
>> right approach for starting?  googling around seems to bring up
>> arguments from years past about if this behavior belongs in twisted on
>> in the users app, but found no real solution...but may have missed the
>> obvious.
>>
>> Thanks
>> Jeff
>
> I just parse the twistd.pid file and os.kill(pid, signal.SIGTERM).  This
> does a 'nice' shutdown, each service that the twistd daemon is running will
> call it's stopService method for cleanup and shut down in an orderly manner.
makes sense.

>
> PS. the signal above is in a shutdown command in the app that does any
> necessary app level clean-up first, although I guess you could put that
> clean-up in your service's stopService method too.

what do you mean is in a shutdown command in the app, how do you tell
the app to execute the shutdown command containing os.kill?   If i can
figure all this out and more, i'd love to fulfill that feature
request.

thanks

>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From curtferguson at cfl.rr.com  Wed Jul  2 09:36:45 2008
From: curtferguson at cfl.rr.com (Curt)
Date: Wed, 02 Jul 2008 09:36:45 -0400
Subject: [Twisted-Python] stopping daemon started via twistd
In-Reply-To: <8496caf30807020539l5e1eca75t77bbe4a64c247ef8@mail.gmail.com>
References: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>	<562bcc10807011526w25b5708rb6a7597ecbdb5bfe@mail.gmail.com>	<486AB92B.3050901@cfl.rr.com>
	<8496caf30807020539l5e1eca75t77bbe4a64c247ef8@mail.gmail.com>
Message-ID: <486B846D.5050007@cfl.rr.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080702/4cf360f1/attachment.htm 

From paulalexwilson at gmail.com  Wed Jul  2 10:46:05 2008
From: paulalexwilson at gmail.com (Paul Wilson)
Date: Wed, 2 Jul 2008 15:46:05 +0100
Subject: [Twisted-Python] Tie two event loops
Message-ID: <3c3d11cf0807020746k3615323esfa4f049c97216ffb@mail.gmail.com>

Hi all,

I'm new to twisted but am having trouble getting my head around how to
structure my application with this new approach.

I'm creating a server that accepts client connections and then drives
the client according to a simple, line-oriented protocol. The server
sends the request (1 line), and receives a single lined result. I'd
like the server to offer an API to generate the correct request lines
to the client, and return the results (either blocking or
asynchronously). So in effect, I have two event loops, one from the
Network and one from whatever's sending the API requests (command
line?).

Can anyone offer any guidance on how to tie these two parts together?
My instinct is to have the two event loops in separate threads and
communicate through Queue.Queue, but that doesn't seem to follow the
spirit of twisted. And I guess I'd have to somehow tell the reactor to
poll the Queue object for requests, and then dispatch it to the
relevant method to send out to the client. I've looked at
threadedselectreactor but can't seem to find any decent documentation
to even decide if it's write for what I want.

Any advice would be much appreciated.

Thanks,
Paul



From andrewfr_ice at yahoo.com  Wed Jul  2 11:01:41 2008
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Wed, 2 Jul 2008 08:01:41 -0700 (PDT)
Subject: [Twisted-Python] Re: Twisted Hosting and Twisted in the Cloud 
In-Reply-To: <E1KDLnP-0005AC-RY@cube.twistedmatrix.com>
Message-ID: <275418.55995.qm@web34205.mail.mud.yahoo.com>

Hello Duncan:

>If you do, what kinds of apps (that you are currently running) do you
>want to be able to run in such environments? Simple web sites? DNS
>servers? Game servers? Chat applications? Web/data services apps?

Well I have been working on WS-BPEL (Web Service - Business Process Execution Language) processor prototypes. 

>And lastly, what hosting companies are your favorites? Where would you
>be happiest, if they supported Twisted? Would you consider switching
>to a hosting provider that *did* support Twisted?

I have been looking at Amazon EC2. A part of EC2's appeal is that there are other services that I would use (i.e., SQS). I haven't looked into the EC2 environment in depth but I just assumed that I would have to set up Twisted as well as Stackless Python as a part of a custom AMI.

Cheers,
Andrew




      



From Andy at NewWorldElectric.com  Wed Jul  2 11:50:07 2008
From: Andy at NewWorldElectric.com (Andy Fundinger)
Date: Wed, 2 Jul 2008 11:50:07 -0400
Subject: [Twisted-Python] Twisted Hosting and Twisted in the Cloud
In-Reply-To: <4868CD60.7050801@cfl.rr.com>
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<4868CD60.7050801@cfl.rr.com>
Message-ID: <37d49ed40807020850j33094e58rea772b3535742a35@mail.gmail.com>

Cloud support would be nice.  I have a twisted app(a web service to
implement a game server for Second Life) that is likely to have a rough
scaling curve with bursty usage.  Atm I'm running it on a dedicated virtual
box with plans to go to EC2 and then multiple EC2s, but a single cloud
instance would be better. I've already got a decoupled permanent datastore
which interfaces to SDB for a cloud should work from that angle too.

What would twisted look like on a cloud?  Would the main reactor still be
single threaded with threads being distributed or would we have to
rearchitect for multiple main reactors by port or path?

Andy Fundinger

On Mon, Jun 30, 2008 at 8:11 AM, Curt <curtferguson at cfl.rr.com> wrote:

>  Duncan McGreggor wrote:
>
> How many others on these lists feel that they would benefit from the
> ease of pre-installed Twisted and/or support for Twisted apps in the
> cloud?
>
>
>
>  Might be great for some folks, twisted is really easy to install, cloud
> support would be very nice.
>
>  If you do, what kinds of apps (that you are currently running) do you
> want to be able to run in such environments? Simple web sites? DNS
> servers? Game servers? Chat applications? Web/data services apps?
>
>
>
>  The main project I'm working on is a bit of all of the above.  A game with
> chat, web interfaces for various things, also a custom client is in the
> works.  Still in very early development right now so I'm hosting it
> privately, when it goes public I'll definitely be looking for something.
>
> And lastly, what hosting companies are your favorites? Where would you
> be happiest, if they supported Twisted? Would you consider switching
> to a hosting provider that *did* support Twisted?
>
>
>  Personally I *really* like Slicehost.  www.slicehost.com  I'm sure
> everyone has their favorite though.
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Blog: http://channel3b.wordpress.com
Second Life Name: Ciemaar Flintoff

I am a sig Virus. Please put me in your sig so that I can continue to
replicate.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080702/8eefde6d/attachment.htm 

From c2k_list at gmx.de  Wed Jul  2 12:31:35 2008
From: c2k_list at gmx.de (Torsten A.)
Date: Wed, 2 Jul 2008 18:31:35 +0200
Subject: AW: [Twisted-Python] ZSI using Twisted Web Server
In-Reply-To: <60ed19d40807010459i195a35c2m529b3caefd177b21@mail.gmail.com>
Message-ID: <mailman.4.1246826570.728.twisted-python@twistedmatrix.com>

Thanks for your reply.
Actually you are right, but I already did that and wasn't succesfull up to
this moment. So I thought someone here might have an idea, because he or she
has already done that, to marry ZSI and Twisted Webserver.

Cheers,
Torsten

> -----Urspr?ngliche Nachricht-----
> Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] Im Auftrag von Christopher Armstrong
> Gesendet: Dienstag, 1. Juli 2008 14:00
> An: Twisted general discussion
> Betreff: Re: [Twisted-Python] ZSI using Twisted Web Server
> 
> On Tue, Jul 1, 2008 at 7:06 AM, Torsten A. <c2k_list at gmx.de> wrote:
> > Whenever I connect to the baseWS, the render-function is called and
> > deligates the request to render_POST(), which I created. In
> render_POST() I
> > can access the SOAP-Envelope via request.content.read(), just as
> supposed
> > to. Now, since I have the plaintext SOAP-Envelope, I need ZSI to parse
> it,
> > extract the functions and argument of the envelope (RPC call) and call
> the
> > corresponding function. I just cannot figure out where to start in ZSI.
> >
> > Can someone help me out which function to call/ class to create? I just
> want
> > to enter the ZSI process where this step is done and then give control
> to
> > ZSI, as if it received the SOAP-envelope from its own webserver.
> 
> It sounds like you've figured out the Twisted side alright, but you
> don't know how to use ZSI's APIs to do what you want. Perhaps you
> should ask the ZSI community about that.
> 
> FWIW, I'd love to see twisted.web.soap to be updated to use ZSI, since
> it's still using the crappy SOAPpy. If you come up with a general soap
> service layer like twisted.web.soap, it may be interesting to include
> it in Twisted.
> 
> 
> --
> Christopher Armstrong
> International Man of Twistery
> http://radix.twistedmatrix.com/
> http://twistedmatrix.com/
> http://canonical.com/
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From kevin.horn at gmail.com  Wed Jul  2 14:37:09 2008
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 2 Jul 2008 13:37:09 -0500
Subject: [Twisted-Python] Tie two event loops
In-Reply-To: <3c3d11cf0807020746k3615323esfa4f049c97216ffb@mail.gmail.com>
References: <3c3d11cf0807020746k3615323esfa4f049c97216ffb@mail.gmail.com>
Message-ID: <562bcc10807021137u179397e1t2edeb6692408c18b@mail.gmail.com>

On Wed, Jul 2, 2008 at 9:46 AM, Paul Wilson <paulalexwilson at gmail.com>
wrote:

> Hi all,
>
> I'm new to twisted but am having trouble getting my head around how to
> structure my application with this new approach.
>
> I'm creating a server that accepts client connections and then drives
> the client according to a simple, line-oriented protocol. The server
> sends the request (1 line), and receives a single lined result. I'd
> like the server to offer an API to generate the correct request lines
> to the client, and return the results (either blocking or
> asynchronously). So in effect, I have two event loops, one from the
> Network and one from whatever's sending the API requests (command
> line?).
>
> Can anyone offer any guidance on how to tie these two parts together?
> My instinct is to have the two event loops in separate threads and
> communicate through Queue.Queue, but that doesn't seem to follow the
> spirit of twisted. And I guess I'd have to somehow tell the reactor to
> poll the Queue object for requests, and then dispatch it to the
> relevant method to send out to the client. I've looked at
> threadedselectreactor but can't seem to find any decent documentation
> to even decide if it's write for what I want.
>
> Any advice would be much appreciated.
>
> Thanks,
> Paul
>

If I understand your problem correctly (and I'm not sure that I do, so keep
that in mind), then what you probably want is something like a Twisted app
using two Protocol objects (perhaps in two different "services"), one to
talk to your clients, and one to talk to your API-generator-thingy (command
line).  Then you just need a way for these to communicate...someplace to
store the state.  A Queue.Queue is probably a good choice, but I'm not
entirely sure where you would put it.  Try looking around for examples that
have multiple services and see how they share state.  I think the Twisted
book might have something useful in this regard, though I don't have it with
me ATM.

Perhaps wiser heads than mine will have better ideas/comments.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080702/8d67c929/attachment.htm 

From exarkun at divmod.com  Wed Jul  2 14:46:39 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 2 Jul 2008 14:46:39 -0400
Subject: [Twisted-Python] Tie two event loops
In-Reply-To: <3c3d11cf0807020746k3615323esfa4f049c97216ffb@mail.gmail.com>
Message-ID: <20080702184639.4714.1640188407.divmod.quotient.16221@ohm>

On Wed, 2 Jul 2008 15:46:05 +0100, Paul Wilson <paulalexwilson at gmail.com> wrote:
>Hi all,
>
>I'm new to twisted but am having trouble getting my head around how to
>structure my application with this new approach.
>
>I'm creating a server that accepts client connections and then drives
>the client according to a simple, line-oriented protocol. The server
>sends the request (1 line), and receives a single lined result. I'd
>like the server to offer an API to generate the correct request lines
>to the client, and return the results (either blocking or
>asynchronously). So in effect, I have two event loops, one from the
>Network and one from whatever's sending the API requests (command
>line?).
>
>Can anyone offer any guidance on how to tie these two parts together?
>My instinct is to have the two event loops in separate threads and
>communicate through Queue.Queue, but that doesn't seem to follow the
>spirit of twisted. And I guess I'd have to somehow tell the reactor to
>poll the Queue object for requests, and then dispatch it to the
>relevant method to send out to the client. I've looked at
>threadedselectreactor but can't seem to find any decent documentation
>to even decide if it's write for what I want.
>
>Any advice would be much appreciated.
>

It's not very clear what the two different event loops are for.  You
suggest that the synchronous API might be used by the "command line",
but this doesn't necessarily require a synchronous API.  It's also not
clear if there is going to be a command line tool which is invoking this
API via Python function calls or if it will be talking to a server that
exposes some kind of network interface (since your other use case seems
to involve doing this, it might save you some work to just re-use that).

Another possibility is that the server process will have code running in
it which wants to access this functionality but wants a synchronous API.
My first suggestion is to forget about this and just use the asynchronous
API everywhere.  If that's too hard, then I suggest making two different
APIs.  This shouldn't be very hard (particularly since I think we're
talking about a function that takes a string and returns another string).
Then, code can just use the API that's right for it.

I don't know if this response has made any sense, because I really don't
feel like I understand the question.  If it didn't, maybe you can try to
clarify the question a bit, perhaps providing some examples (either in
English or in Python).

Jean-Paul



From glyph at divmod.com  Wed Jul  2 15:18:05 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 02 Jul 2008 19:18:05 -0000
Subject: [Twisted-Python] Tie two event loops
In-Reply-To: <3c3d11cf0807020746k3615323esfa4f049c97216ffb@mail.gmail.com>
References: <3c3d11cf0807020746k3615323esfa4f049c97216ffb@mail.gmail.com>
Message-ID: <20080702191805.25821.2018936192.divmod.xquotient.12048@joule.divmod.com>

On 02:46 pm, paulalexwilson at gmail.com wrote:
>I'm creating a server that accepts client connections and then drives
>the client according to a simple, line-oriented protocol. The server
>sends the request (1 line), and receives a single lined result. I'd
>like the server to offer an API to generate the correct request lines
>to the client, and return the results (either blocking or
>asynchronously). So in effect, I have two event loops, one from the
>Network and one from whatever's sending the API requests (command
>line?).

>Can anyone offer any guidance on how to tie these two parts together?

As you are new to Twisted, I would strongly recommend ignoring the 
"either blocking or asynchronously" part, and simply return the results 
asynchronously, in a Deferred.  It's *possible* to do what you want, but 
to really understand what's going on well enough to pull it off you need 
to be pretty well-versed in the event-driven programming model, as well 
as gnarly implementation specifics of Twisted itself.  In my experience, 
most places that people think that they want async+sync interfaces to 
something, they actually just want async+convenient.  Here are some ways 
you could get some benefits of a synchronous API without actually having 
one:

If you are talking about generating requests from an interactive Python 
interpreter, you might consider using the interpreter bundled with 
Conch.  Try invoking it with 'python -m twisted/conch/stdio'.  This 
command line will notice when it receives a Deferred and display a 
result when it arrives.

If you are talking about your *own* command line, consider using 
twisted.internet.stdio.StandardIO to get it to communicate with the main 
event loop.

If this isn't really about command-lines but you want to write little 
"scripts" that have extended conversations with a client and process 
lots of different results, consider using the 
twisted.internet.defer.inlineCallbacks decorator with Python 2.5 
generators.  This syntactic convenience will let you avoid defining 
functions to handle callbacks, and will therefore shorten certain kinds 
of code.

I hope one of those solutions helps!



From ddwiggins at advpubtech.com  Wed Jul  2 21:44:49 2008
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Wed, 02 Jul 2008 18:44:49 -0700
Subject: [Twisted-Python] "Failure: exceptions.TypeError: exceptions must be
 classes, instances, or strings..."
Message-ID: <g4haui$t88$1@ger.gmane.org>

I'm running an xmlrpc server, frozen with py2exe.  I'm getting an error 
message in the log file that reads:
> 2008/07/02 18:14 -0700 [-] Unhandled Error
> 	Traceback (most recent call last):
> 	Failure: exceptions.TypeError: exceptions must be classes, instances, or strings (deprecated), not type

... and that's it: no traceback, no line number, no indication where the 
problem occured.  (I'm running Twisted 2.5.0, if it makes a difference.) 
  Any idea what I can do to make it be a bit more informative?

Thanks,
-- 
Don Dwiggins
Advanced Publishing Technology




From jml at mumak.net  Wed Jul  2 21:57:27 2008
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 3 Jul 2008 11:57:27 +1000
Subject: [Twisted-Python] "Failure: exceptions.TypeError: exceptions must
	be classes, instances, or strings..."
In-Reply-To: <g4haui$t88$1@ger.gmane.org>
References: <g4haui$t88$1@ger.gmane.org>
Message-ID: <d06a5cd30807021857gf602908w5965c55fa0fce237@mail.gmail.com>

On Thu, Jul 3, 2008 at 11:44 AM, Don Dwiggins <ddwiggins at advpubtech.com> wrote:
> I'm running an xmlrpc server, frozen with py2exe.  I'm getting an error
> message in the log file that reads:
>>
>> 2008/07/02 18:14 -0700 [-] Unhandled Error
>>        Traceback (most recent call last):
>>        Failure: exceptions.TypeError: exceptions must be classes,
>> instances, or strings (deprecated), not type
>
> ... and that's it: no traceback, no line number, no indication where the
> problem occured.  (I'm running Twisted 2.5.0, if it makes a difference.)
>  Any idea what I can do to make it be a bit more informative?
>

Run it with Deferred.debug set to True. That'll give you more
information about the source of the error. You might need to work with
an unfrozen version here?I don't know for sure though.

For what it's worth, "Unhandled Error" means that a Deferred has
failed somewhere in its chain and there is no errback to handle that
failure.

jml



From jeff.dyke at gmail.com  Thu Jul  3 07:46:55 2008
From: jeff.dyke at gmail.com (Jeff Dyke)
Date: Thu, 3 Jul 2008 07:46:55 -0400
Subject: [Twisted-Python] stopping daemon started via twistd
In-Reply-To: <486B846D.5050007@cfl.rr.com>
References: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>
	<562bcc10807011526w25b5708rb6a7597ecbdb5bfe@mail.gmail.com>
	<486AB92B.3050901@cfl.rr.com>
	<8496caf30807020539l5e1eca75t77bbe4a64c247ef8@mail.gmail.com>
	<486B846D.5050007@cfl.rr.com>
Message-ID: <8496caf30807030446t709de65dxa4395e25af551174@mail.gmail.com>

thought you might say that, i had started down that path...perhaps i'm
headed back,  thanks.

On Wed, Jul 2, 2008 at 9:36 AM, Curt <curtferguson at cfl.rr.com> wrote:
> Jeff Dyke wrote:
>
> I just parse the twistd.pid file and os.kill(pid, signal.SIGTERM).  This
> does a 'nice' shutdown, each service that the twistd daemon is running will
> call it's stopService method for cleanup and shut down in an orderly manner.
>
>
> makes sense.
>
>
>
> PS. the signal above is in a shutdown command in the app that does any
> necessary app level clean-up first, although I guess you could put that
> clean-up in your service's stopService method too.
>
>
> what do you mean is in a shutdown command in the app, how do you tell
> the app to execute the shutdown command containing os.kill?   If i can
> figure all this out and more, i'd love to fulfill that feature
> request.
>
> thanks
>
>
>     def handle_shutdown(self, user, *args):
>         if user.account.access is not AllAccess.Owner:
>             self.hideCommand(user)
>         else:
>             pid = int(file('twistd.pid', mode = 'r').readline())
>             os.kill(pid, signal.SIGUSR1)
>             user.socket.sendToClient('Normal shutdown, rotating
> logfiles.\r\n')
>             os.kill(pid, signal.SIGTERM)
>
> Here's my handle_shutdown method, slightly abbreviated.
> Just call this the same way you give the app any other input....IE: if it is
> a web app, put an admin control clickie somewhere that activates it.  If it
> is a custom client, put a control in that, if it is a direct TCP app
> (telnet) make the command parser call it when the user enters the proper
> command.
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From thomas at apestaart.org  Thu Jul  3 08:02:04 2008
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Thu, 03 Jul 2008 14:02:04 +0200
Subject: [Twisted-Python] job posting: Flumotion
Message-ID: <1215086524.17498.4.camel@ana.amantes>

Hi everyone,

I wanted to announce some new positions at Flumotion.  We're looking for
up to three "core" developers and a web developer.  The core developer
position involves Python and Twisted all the way; for the web developer
position it depends on the team's choice (currently python and Django is
being used a lot)

We're looking for talented, motivated and passionate developers who want
a healthy mix of working on a real commercial product and platform, and
the Free Software technologies they're based on.

Flumotion is a Spanish company, located in Barcelona, and part of the
Fluendo group.

Flumotion is our UNIX-based streaming server, written in Python, on top
of GStreamer and Twisted.  Our platform is a collection of Linux servers
distributed over Spain, as we're looking to expand our business further
into Europe. It handles several Gbit/s of streaming traffic.

We are also working on a commercial version of Flumotion, to be released
later this year.

We are looking for developers to:
- work on the core technology: the server, GStreamer integration, the
platform, scalability
- work on the box project: web frontend, usability
- work on the web projects: our website, our customer portal, and our
backoffice


If you like working with other hackers, on real-world projects, while
looking out over the sea and enjoying the good weather of Barcelona,
contact us! Feel free to drop me a mail at thomas (at) flumotion (dot)
com if you prefer to drop off your CV in a more human mailbox.

For more information, as well as complete job descriptions, see our
Hiring page: http://www.flumotion.com/en/hiring/


-- 
Now wait a minute...
you think I'm evil...
if I bring a group of girls on a camping trip and don't touch them?
--
GStreamer - bringing multimedia to your desktop
http://gstreamer.freedesktop.org/





From ddwiggins at advpubtech.com  Thu Jul  3 12:56:11 2008
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Thu, 03 Jul 2008 09:56:11 -0700
Subject: [Twisted-Python] Re: "Failure: exceptions.TypeError: exceptions
 must be classes, instances, or strings..."
In-Reply-To: <d06a5cd30807021857gf602908w5965c55fa0fce237@mail.gmail.com>
References: <g4haui$t88$1@ger.gmane.org>
	<d06a5cd30807021857gf602908w5965c55fa0fce237@mail.gmail.com>
Message-ID: <g4j0bc$7vl$1@ger.gmane.org>

Jonathan Lange wrote:
> Run it with Deferred.debug set to True. That'll give you more
> information about the source of the error. You might need to work with
> an unfrozen version here?I don't know for sure though.
> 
> For what it's worth, "Unhandled Error" means that a Deferred has
> failed somewhere in its chain and there is no errback to handle that
> failure.

Thanks for the reply; I'll pursue it.

I'd like to dig a bit deeper into the reason for the missing traceback, 
though.  I had a similar "exceptions must be classes" message a while 
back, and fixed it by changing Failure.raiseException in failure.py to 
raise self.__class__ rather than self.type.  That at least caused the 
original reason for the exception to be shown.

Also, that change is still in place in the frozen exe (assuming py2exe 
worked correctly), so something else is going on here.

Any ideas?

-- 
Don Dwiggins
Advanced Publishing Technology




From k7lim at cs.stanford.edu  Thu Jul  3 14:01:15 2008
From: k7lim at cs.stanford.edu (Kevin Mateo Lim)
Date: Thu, 3 Jul 2008 14:01:15 -0400
Subject: [Twisted-Python] unblocking smtp send?
Message-ID: <b066c9040807031101g3bc54296n9bfb5e7676581731@mail.gmail.com>

My webapp is blocking on this sendmail code that I wrote:

        from twisted.internet.ssl import ClientContextFactory
        from twisted.internet.defer import Deferred
        from twisted.mail.smtp import ESMTPSenderFactory
        from twisted.internet import reactor
        import twisted.python
        import sys
        import StringIO


        twisted.python.log.startLogging(sys.stdout)

        contextFactory = ClientContextFactory()
        result = Deferred()
        message_io = StringIO.StringIO(message_str)

        do_auth = bool(username and password)
        factory = ESMTPSenderFactory(username, password, from_addr,
to_list, message_io, result, contextFactory=contextFactory,
                       requireAuthentication=do_auth,
requireTransportSecurity=use_tls)
        reactor.connectTCP(smtp_host, smtp_port, factory)
        result.addCallback(lambda ign: reactor.stop())
        reactor.run(installSignalHandlers=0)


Is there any way I can allow the UI to continue, without blocking on
this code?  According to the logs, there was a 30second cap between
starting factory and stopping:

2008-07-03 13:24:16-0400 [-] Log opened.
2008-07-03 13:24:16-0400 [-] Starting factory
<twisted.mail.smtp.ESMTPSenderFactory instance at 0x203d3c8>
2008-07-03 13:24:49-0400 [ESMTPSender,client] Stopping factory
<twisted.mail.smtp.ESMTPSenderFactory instance at 0x203d3c8>
2008-07-03 13:24:49-0400 [-] Main loop terminated.



From k7lim at cs.stanford.edu  Thu Jul  3 14:45:33 2008
From: k7lim at cs.stanford.edu (Kevin Mateo Lim)
Date: Thu, 3 Jul 2008 14:45:33 -0400
Subject: [Twisted-Python] email addresses with display names in Twisted Mail?
Message-ID: <b066c9040807031145o331516cfv45181d96480b45ed@mail.gmail.com>

Hello all,

I'd like the emails that I send with my webapp to include the display name.
as per http://www.ietf.org/rfc/rfc2821.txt: User Name <local-part at domain>

When I try to include this style of address in my sendmail method, I
get this error:
<class 'twisted.mail.smtp.AddressError'>: Parse error at ' ' of
("'MyDomain Mailer' <no-reply at mydomain.com>", [' ', "Mailer'", ' ',
'<', 'no-reply', '@', 'mydomain', '.', 'com', '>'])

Any suggestions?  Because I'm stuck on this.

Thanks,
Kevin



From exarkun at divmod.com  Thu Jul  3 14:52:08 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 3 Jul 2008 14:52:08 -0400
Subject: [Twisted-Python] email addresses with display names in Twisted
	Mail?
In-Reply-To: <b066c9040807031145o331516cfv45181d96480b45ed@mail.gmail.com>
Message-ID: <20080703185208.4714.252162235.divmod.quotient.16620@ohm>

On Thu, 3 Jul 2008 14:45:33 -0400, Kevin Mateo Lim <k7lim at cs.stanford.edu> wrote:
>Hello all,
>
>I'd like the emails that I send with my webapp to include the display name.
>as per http://www.ietf.org/rfc/rfc2821.txt: User Name <local-part at domain>

This form is only supported for the VRFY command.  If you want an MUA to
display a real name along with an email address, then you need to include
that information in one of the MIME headers of the message you're sending.
SMTP isn't involved in that part of the process at all.

Jean-Paul



From k7lim at cs.stanford.edu  Thu Jul  3 14:53:52 2008
From: k7lim at cs.stanford.edu (Kevin Mateo Lim)
Date: Thu, 3 Jul 2008 14:53:52 -0400
Subject: [Twisted-Python] email addresses with display names in Twisted
	Mail?
In-Reply-To: <20080703185208.4714.252162235.divmod.quotient.16620@ohm>
References: <b066c9040807031145o331516cfv45181d96480b45ed@mail.gmail.com>
	<20080703185208.4714.252162235.divmod.quotient.16620@ohm>
Message-ID: <b066c9040807031153g2e2252c8kd90fc09f307b4920@mail.gmail.com>

Thanks Jean-Paul, I'll do that.

On Thu, Jul 3, 2008 at 2:52 PM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Thu, 3 Jul 2008 14:45:33 -0400, Kevin Mateo Lim <k7lim at cs.stanford.edu>
> wrote:
>>
>> Hello all,
>>
>> I'd like the emails that I send with my webapp to include the display
>> name.
>> as per http://www.ietf.org/rfc/rfc2821.txt: User Name <local-part at domain>
>
> This form is only supported for the VRFY command.  If you want an MUA to
> display a real name along with an email address, then you need to include
> that information in one of the MIME headers of the message you're sending.
> SMTP isn't involved in that part of the process at all.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From glyph at divmod.com  Thu Jul  3 16:45:45 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 03 Jul 2008 20:45:45 -0000
Subject: [Twisted-Python] unblocking smtp send?
In-Reply-To: <b066c9040807031101g3bc54296n9bfb5e7676581731@mail.gmail.com>
References: <b066c9040807031101g3bc54296n9bfb5e7676581731@mail.gmail.com>
Message-ID: <20080703204545.25821.1861290463.divmod.xquotient.12072@joule.divmod.com>

On 06:01 pm, k7lim at cs.stanford.edu wrote:
>My webapp is blocking on this sendmail code that I wrote:
    .
    .
    .
>        reactor.run(installSignalHandlers=0)

>Is there any way I can allow the UI to continue, without blocking on
>this code?  According to the logs, there was a 30second cap between
>starting factory and stopping:

Answering this question correctly will depend a great deal on the 
specifics of your web application's architecture and deployment.

If your web application is itself a twisted application (i.e. you are 
using twisted.web) then the reactor should already be running, and you 
shouldn't start it up.  The send won't block.

If you're using a multi-threaded deployment environment, then you can't 
safely use Twisted APIs, let alone run the reactor, from multiple 
threads, so you need to investigate some other way of sending mail from 
your application.  Having one thread run the twisted loop and doing a 
callFromThread with the function which sends mail might be the right 
thing to do.

If you're running in a CGI-style execution environment, where there are 
multiple processes but one thread per process... depending on the 
specifics of your server environment you might be able to spawn a 
subprocess to do the Twisted work and wait for it at the very end of 
your script rather than blocking in the middle, or even leave it to run 
past the end of your script.  Reporting errors to the user would be 
pretty tricky in this case though.

Whatever your decision, you should try to move the call to reactor.run() 
as far away from application code as possible.  You should not have a 
function which sends mail and then immediately calls reactor.run() 
because then it won't work in a running reactor, which should be the 
"normal" case for pretty much any code which uses Twisted.



From twisted-list at zorinholdings.com  Fri Jul  4 08:09:38 2008
From: twisted-list at zorinholdings.com (Matthew Pontefract)
Date: Fri, 04 Jul 2008 13:09:38 +0100
Subject: [Twisted-Python] Peloton Distributed Service Application Engine
Message-ID: <486E1302.2020108@zorinholdings.com>

Hello Twisted Users

I'd like to announce a new project called Peloton that may be of
interest to some of you.

Peloton is a distributed service application platform built in Python on
top of Twisted. It's goals are:

  * To make trivial the process of writing, publishing a method
  * To provide all network interfaces on any relevant protocols and
insulate the service writer from all of this
  * To provide simple, intuitive, modular mechanisms to transform the
results of a method into a form appropriate to the end user
  * To take care of managing services to ensure they stay alive, are
distributed across a grid of computers and have requests distributed
between them
  * To manage failure by re-issuing failed requests and managing the
grid of nodes in such a way that, as far as is reasonably possible, the
client is never troubled to know what lengths were gone to to return a
result
  * To provide scalability
  * To provide inherent parallelisation for trivial problems
  * To provide an event bus accessible to server-side components and clients
  * To provide for easy (hot) upgrade of components and near zero downtime

Why?

I have worked in banks, small firms, big firms, supercomputing firms. I
have worked in Java, in .NET, in Python. In almost all cases I was
writing client-server systems where the application was event driven,
needed to be resilient and would benefit from distribution for
horizontal scalability. In all cases, making the results of server side
operations available to as many different third party components as
possible (via a multitude of protocols) would have been useful. And
nowadays having data easily transformed into snippets of HTML or other
formats, perhaps for AJAX apps etc is increasingly useful.

Peloton is built to leverage the clarity, simplicity, power and rapid
development times of Python and, using the reliable and solid Twisted
core, provide the higher level features that give me all the above in a
small and easy package.

I'm not aiming to re-invent the wheel: I needed an event bus and, having
used many, I've elected to use AMQP providers, RabbitMQ being a
favourite. But this is all switchable because such functionality is
managed by Peloton kernel plugins.

Similar projects to Peloton exist: Pythomnic and Divmod-Mantissa to name
two. They provide some, not all of the functionality or do things in
ways that didn't quite suit me etc.

Peloton is new, but I've implemented the ideas previously with the same
technology at a supercomputing facility, and I presented the work at
PyCon UK 2007. It works, people like it and its use is growing there.
That's good enough for me to know that, at least for a section of the
community, this is probably of interest.

The future

Peloton is very early at the moment and much is to come: a scheduler
(cron for peloton) properly implemented distributed shared-state engine,
 different ways of deploying service code, better management tools, and
more. Tight integration with Java could extend it's use into banking
environments. A suite of services built on Peloton for job scheduling
and management will provide another avenue to explore.

It's all fun, and all interesting. It builds on the truly fantastic
work of others and hopefully makes something novel and interesting. But
that's for you to decide and I invite you to scout around the
documentation, download the source code and give it a whirl. I'd love to
hear what you think, know how you're using it and work with you to make
it better.

Where from?

http://www.peloton-grid.net is the home of Peloton and hosts
documentation and details of how to obtain Peloton. I hope it appeals
and look forward to discussing with some of you about it. We can always
meet on freenode.net, channel #peloton.

Regards
Matthew



From andy at thecablelounge.com  Fri Jul  4 13:27:23 2008
From: andy at thecablelounge.com (Andy Gayton)
Date: Fri, 4 Jul 2008 13:27:23 -0400
Subject: [Twisted-Python] Bloody Twisted VFS
In-Reply-To: <d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
Message-ID: <74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>

On Mon, Jun 30, 2008 at 9:06 PM, Jonathan Lange <jml at mumak.net> wrote:
> Yeah, that would be a good time for me, as long at it's after 2200 UTC.

Hey Jono, sorry again that we didn't get the conversation online into irc.

Here's a quick recap of what came out of the discussions:

 * The immediate goal is to settle on just enough of the core
interface to be certain it can be expanded in the directions which
will be needed in backwards compatible ways, so we can do a release.

 * open should explicit state the flags and permission it takes.  It
shouldn't use posix constants.  At first we'll just support a small
subset that makes sense for all platforms.

 * createFile should be subsumed by open - the exclusive flag should
just be apart of open's flags.

 * open should return a separate IO object, instead of self handling IO directly

 * The primitive interface for IO should be producer/consumers,
replacing readChunk, writeChunk.  This interface is primitive enough
to express all other interfaces, while still providing the opportunity
to optimize streaming performance.  The producer/consumer interface
will need to take an offset to allow readChunk and writeChunk to be
implemented.

 * we're still postponing handling of symlinks

 * we're still using getMetadata and setMetadata - its likely we want
a layer on top of using arbitrary key/value dicts for metadata, but
this can be introduced in a backwards compatible way.

 * we still need to decide whether path resolution should be moved to
a separate interface, instead of being part of the node's interface.

 * there's concern over the package name.  twisted.tree has
considerable support :)

I'll try and make these changes in the next week or so.  If you are
interested in shaping how this goes, you can track what's going on in
http://twistedmatrix.com/trac/ticket/2815 - just weigh in once the
ticket goes back to review.

cheers,
Andy.



From glyph at divmod.com  Fri Jul  4 21:49:13 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 05 Jul 2008 01:49:13 -0000
Subject: [Twisted-Python] Peloton Distributed Service Application Engine
In-Reply-To: <486E1302.2020108@zorinholdings.com>
References: <486E1302.2020108@zorinholdings.com>
Message-ID: <20080705014913.25821.264766355.divmod.xquotient.12093@joule.divmod.com>

On 4 Jul, 12:09 pm, twisted-list at zorinholdings.com wrote:
>Similar projects to Peloton exist: Pythomnic and Divmod-Mantissa to 
>name
>two. They provide some, not all of the functionality or do things in
>ways that didn't quite suit me etc.

Although I certainly have a vested interest in one of your "competitors" 
here, I am really happy to hear that more people are interested in 
solving problems in this style!  I'd like to encourage you to contribute 
fixes and maintenance "upstream" to Twisted when you discover issues 
that you'd like fixed.

Thanks for the announcement!



From exarkun at twistedmatrix.com  Sun Jul  6 00:05:08 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Jul 2008 04:05:08 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1215317108.9.1183554075@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080706/9e07426a/attachment.htm 

From happybrowndog at hotmail.com  Sun Jul  6 03:14:47 2008
From: happybrowndog at hotmail.com (happybrowndog)
Date: Sun, 06 Jul 2008 00:14:47 -0700
Subject: [Twisted-Python] The right way to change a global variable in a
	Twisted server?
Message-ID: <g4prda$esr$1@ger.gmane.org>

Is there a right way to change a global variable in a Twisted server 
(this one is using PerspectiveBroker)?  What I am trying to do is allow 
perspectivebroker clients to update a global variable on the twisted 
server without colliding, ie: a counter that increases by 1 each time a 
particular call is made to the Twisted server.  Each client has a 
pb.Avatar attempting to update that global variable counter through a 
method call on the class extended on pb.Avatar.  As the server is 
select-based, am I wrong to assume that only one client is executing 
pb.Avatar calls at a time?




From jml at mumak.net  Sun Jul  6 03:32:09 2008
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 6 Jul 2008 17:32:09 +1000
Subject: [Twisted-Python] Bloody Twisted VFS
In-Reply-To: <74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
Message-ID: <d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>

On Sat, Jul 5, 2008 at 3:27 AM, Andy Gayton <andy at thecablelounge.com> wrote:
> On Mon, Jun 30, 2008 at 9:06 PM, Jonathan Lange <jml at mumak.net> wrote:
>> Yeah, that would be a good time for me, as long at it's after 2200 UTC.
>
> Hey Jono, sorry again that we didn't get the conversation online into irc.
>

That's ok. Thanks for bringing it to the mailing list :)

> Here's a quick recap of what came out of the discussions:
>
>  * The immediate goal is to settle on just enough of the core
> interface to be certain it can be expanded in the directions which
> will be needed in backwards compatible ways, so we can do a release.
>

Good idea.

>  * open should explicit state the flags and permission it takes.  It
> shouldn't use posix constants.  At first we'll just support a small
> subset that makes sense for all platforms.
>

+1

>  * createFile should be subsumed by open - the exclusive flag should
> just be apart of open's flags.
>

Having a convenience method for creating a file seems like a good idea.

>  * The primitive interface for IO should be producer/consumers,
> replacing readChunk, writeChunk.  This interface is primitive enough
> to express all other interfaces, while still providing the opportunity
> to optimize streaming performance.  The producer/consumer interface
> will need to take an offset to allow readChunk and writeChunk to be
> implemented.
>

It would be nice to have things so that readChunks and writeChunks
(plural) could be implemented, to avoid potato programming.

>  * we're still postponing handling of symlinks
>
>  * we're still using getMetadata and setMetadata - its likely we want
> a layer on top of using arbitrary key/value dicts for metadata, but
> this can be introduced in a backwards compatible way.
>

This reminds me, it would be good for VFS to have an exception for
"this operation isn't supported" (say with symlinks on fat32) and
another exception for "supportable, but not actually implemented yet".

>  * we still need to decide whether path resolution should be moved to
> a separate interface, instead of being part of the node's interface.
>

I'm not 100% sure what this means? Does this relate to possibly
combining with FilePath?

>  * there's concern over the package name.  twisted.tree has
> considerable support :)
>

I kind of like that. I'm not sure what the concern is with 'vfs' though.


> I'll try and make these changes in the next week or so.  If you are
> interested in shaping how this goes, you can track what's going on in
> http://twistedmatrix.com/trac/ticket/2815 - just weigh in once the
> ticket goes back to review.
>

Here's some random stuff that I wanted to at least mention:

- Error translation. This should translate the exception types, but it
should also translate values, so the error contains the virtual path.
- Deferreds. You don't mention them at all, but the lack of
asynchronous interfaces was one of the biggest problems we had with
twisted.vfs.
- URL Escaping. I got bitten by this recently. It's obviously not a
general VFS problem, but it's an issue with enough of them that it
should be considered when defining interfaces.
- "Decorators" like "read-only" and "chroot" could prove useful. Is
there room in the design for such things?

jml



From radix at twistedmatrix.com  Sun Jul  6 08:41:59 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 6 Jul 2008 08:41:59 -0400
Subject: [Twisted-Python] The right way to change a global variable in a
	Twisted server?
In-Reply-To: <g4prda$esr$1@ger.gmane.org>
References: <g4prda$esr$1@ger.gmane.org>
Message-ID: <60ed19d40807060541uf080a53q8d7282f05591ff67@mail.gmail.com>

On Sun, Jul 6, 2008 at 3:14 AM, happybrowndog <happybrowndog at hotmail.com> wrote:
> Is there a right way to change a global variable in a Twisted server (this
> one is using PerspectiveBroker)?  What I am trying to do is allow
> perspectivebroker clients to update a global variable on the twisted server
> without colliding, ie: a counter that increases by 1 each time a particular
> call is made to the Twisted server.  Each client has a pb.Avatar attempting
> to update that global variable counter through a method call on the class
> extended on pb.Avatar.  As the server is select-based, am I wrong to assume
> that only one client is executing pb.Avatar calls at a time?

That's correct. Twisted won't run your code in multiple threads at the
same time unless you explicitly ask it to with something like
reactor.callInThread. So updating shared state is safe.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From glyph at divmod.com  Sun Jul  6 11:12:09 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 06 Jul 2008 15:12:09 -0000
Subject: [Twisted-Python] Bloody Twisted Tree (VFS)
In-Reply-To: <d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
Message-ID: <20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>


On 07:32 am, jml at mumak.net wrote:
>On Sat, Jul 5, 2008 at 3:27 AM, Andy Gayton <andy at thecablelounge.com> 
>wrote:
>>On Mon, Jun 30, 2008 at 9:06 PM, Jonathan Lange <jml at mumak.net> wrote:

>>  * The primitive interface for IO should be producer/consumers,
>>replacing readChunk, writeChunk.  This interface is primitive enough
>>to express all other interfaces, while still providing the opportunity
>>to optimize streaming performance.  The producer/consumer interface
>>will need to take an offset to allow readChunk and writeChunk to be
>>implemented.
>
>It would be nice to have things so that readChunks and writeChunks
>(plural) could be implemented, to avoid potato programming.

I don't think this is actually going to be a practical consideration, if 
I correctly understand what you mean.  For one thing, the 
producer/consumer interface is going to be something (very vaguely) like 
this:

    remoteFile.writeFrom(producer[, offset, length])
    remoteFile.readInto(consumer[, offset, length])

This means that if you've got a really giant file, the implementation 
could pretty trivially optimize delivering it to you in the most 
efficient possible way, keeping all the relevant buffers full at every 
opportunity.  Given that stream-based I/O is somewhat inherently serial, 
it's difficult to get less potato-y than that.

writeChunks, if I understand it, would be pretty trivially implementable 
by saying

    remoteFile.writeFrom(MultiChunkProducer(chunks))

Mapping 'readChunks' and 'writeChunks' to readv and writev in my head, 
I'm not really sure what a 'readChunks' would actually do, since we copy 
memory every time we sneeze in Python anyway.  We're not going to have 
preallocated buffers to read into.
>>  * we're still using getMetadata and setMetadata - its likely we want
>>a layer on top of using arbitrary key/value dicts for metadata, but
>>this can be introduced in a backwards compatible way.

Hmm.  I don't remember agreeing to layering anything on top of 
"arbitrary key/value dicts"; I'd really like to see a completely 
different layer that specifically separates out optional features 
(xattrs, symlinks, posix ACLs(?)) into separate interfaces with specific 
methods that don't necessarily need to retrieve all the metadata at 
once, which is sort of an inherent property of having a key/value dict.

I'm OK with "still using getMetadata and setMetadata", though, since as 
you say, it can be introduced in a backwards-compatible way.  I do think 
that we should keep that discussion open (for later, after the rest of 
this work has been completed).
>This reminds me, it would be good for VFS to have an exception for
>"this operation isn't supported" (say with symlinks on fat32) and
>another exception for "supportable, but not actually implemented yet".

I don't think it's useful to distinguish between these two types of 
exception at *runtime*.  The use-case I can see for distinguishing is 
letting a programmer know that they should figure out something that 
might be tricky to implement and write some wrappers or submit some 
patches.  Perhaps a separate error message, rather than a separate 
exception type?  Do you have a different use-case?

One related thing that we spoke about in person was pushing this 
negotiation of file-system features backwards to the initialization 
step, so that applications which needed unusual filesystem attributes 
could fail quickly with a clear error message if they weren't supported 
by the underlying platform. ("WebDAV requires extended filesystem 
attributes, and your backend, SFTP, does not provide that feature.", 
"txGnuStow requires symbolic links, and your backend, the Microsoft 
Windows filesystem, does not provide that feature.")

The nice thing about this is that the default interface to the backend 
would be the one that masked everything but the most common subset of 
filesystem features, so that you couldn't *accidentally* depend on a 
feature that wasn't present everywhere, without specifically requesting 
it.  In order to get more obscure features you'd have to specify a 
longer list of interfaces.
>>  * we still need to decide whether path resolution should be moved to
>>a separate interface, instead of being part of the node's interface.

>I'm not 100% sure what this means? Does this relate to possibly
>combining with FilePath?

The tongue-in-cheek name that radix gave to this interface was 
'filepath.pathdelta'.  It's related to filepath in the sense that 
FilePath, ZipPath, et. al. could benefit from using the same interface 
to talk about relative pathnames rather than manipulating lists of 
strings.  One can, after all, abstractly do operations like "child()" 
and "parent()" without knowing a lot about the base implementation of 
the filesystem in question.
>>  * there's concern over the package name.  twisted.tree has
>>considerable support :)

>I kind of like that. I'm not sure what the concern is with 'vfs' 
>though.

"twisted.vfs" sounds incredibly boring and unpronounceable.  It would be 
the first twisted.<acronym> package, and it's not really related to any 
other technology ambiguously named "vfs".

However, this reminds me about another concern which I did not remember 
to raise while Andy was here.  Should this really be twisted.<anything> 
at all?  I'd like twisted <x> "dot products" to generally be an 
application which does something <x>-ish.  I'm aware that not every 
package follows this rule, but the ones that don't are either (A) 
unmaintained and slated for removal, or (B) part of the core, not 
independent subprojects, as "vfs" seems slated to be.

Put a different way: what should 'twistd tree' do?  My suggestion would 
be a simple multi-protocol file server: HTTP, FTP (although probably 
disable that by default), SFTP, maybe a "native" protocol for providing 
a generalized backend for any Twisted application that uses the 'tree' 
API, so that we can write a proxy that exposes every arbitrary 
combination of features from the protocols it's talking to.

If everyone agrees with this, then great.  However, if we never intend 
for this to go beyond providing an API that other systems hook into, 
maybe it should go somewhere subordinate to another project; 
twisted.internet.files perhaps?

To be clear: I don't mind doing a release that does not include this 
tool; I don't think anything should block on it.  I just want it to be 
in the cards eventually if this is the way we're going to release it.
>>I'll try and make these changes in the next week or so.  If you are
>>interested in shaping how this goes, you can track what's going on in
>>http://twistedmatrix.com/trac/ticket/2815 - just weigh in once the
>>ticket goes back to review.

>Here's some random stuff that I wanted to at least mention:
>
>- Error translation. This should translate the exception types, but it
>should also translate values, so the error contains the virtual path.

This sounds like a specific enough thing that you could file a ticket 
that described the exact behavior that you wanted.  It doesn't sound 
contentious at all to me, so unless you think there's some hidden 
confusion there... go ahead?
>- Deferreds. You don't mention them at all, but the lack of
>asynchronous interfaces was one of the biggest problems we had with
>twisted.vfs.

I believe that the consensus on asynchronicity is that all of the 
synchronous stuff should be FilePath's job.  In the glorious future of 
twisted.tree, everything will be async.  As discussed above, this 
doesn't always mean Deferreds, it also means producers and consumers.

One thing we didn't talk about in person: handling extremely large 
directories.  We had spoken about children() returning a Deferred of a 
list; I think it would be nice if it actually had a producer/consumer 
API of its own.  Maybe this is too much of a corner case to worry about 
in average applications (i.e. we could provide a give-me-a-deferred 
convenience API) but it would be nice if it were *possible* to implement 
things that were efficient against really big networked directories.
>- URL Escaping. I got bitten by this recently. It's obviously not a
>general VFS problem, but it's an issue with enough of them that it
>should be considered when defining interfaces.

I *think* that this should be pretty easily dealt with in a pretty 
generic way by having a clearly-defined set of string escaping rules 
depending on which protocol you're using.  It's a general VFS issue in 
the sense that there are escaping issues with "/" on regular 
filesystems, after all.  Or at least, there are error-reporting issues 
with characters like "/", ";", and ":" on certain FSes.
>- "Decorators" like "read-only" and "chroot" could prove useful. Is
>there room in the design for such things?

We did discuss having things like this.  Specifically we talked a lot 
during the metadata discussion about the possibility for 'decorators' 
like "provide-xattrs-with-dotfiles" and "provide-atime-by-pretending- 
its-zero".  However, we didn't spend too long on it because every 
alternative that got brought up sounded like it was a pretty amenable to 
a simple delegation approach; there just wasn't a lot of meat there. 
We'll have to check to make sure that is true in the review process, of 
course, but this is probably the thing I'm least worried about :).



From happybrowndog at hotmail.com  Sun Jul  6 13:35:01 2008
From: happybrowndog at hotmail.com (happybrowndog)
Date: Sun, 06 Jul 2008 10:35:01 -0700
Subject: [Twisted-Python] Confusion on Twisted versions
Message-ID: <g4qvoa$in2$1@ger.gmane.org>

I'm finding the Twisted version numbers confusing.  I have it installed 
on Debian, where aptitude is telling me that 2.4.4 is installed (with 
python 2.4).  However, the TwistedMatrix site states that there is an 
8.1 version.  Googling shows that people talk of 2.4x and 8.x in an 
intermingled fashion.  Can someone please clarify?




From radix at twistedmatrix.com  Sun Jul  6 13:44:16 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 6 Jul 2008 13:44:16 -0400
Subject: [Twisted-Python] Confusion on Twisted versions
In-Reply-To: <g4qvoa$in2$1@ger.gmane.org>
References: <g4qvoa$in2$1@ger.gmane.org>
Message-ID: <60ed19d40807061044t1b0c051fmf2eda63b2ffd800b@mail.gmail.com>

On Sun, Jul 6, 2008 at 1:35 PM, happybrowndog <happybrowndog at hotmail.com> wrote:
> I'm finding the Twisted version numbers confusing.  I have it installed on
> Debian, where aptitude is telling me that 2.4.4 is installed (with python
> 2.4).  However, the TwistedMatrix site states that there is an 8.1 version.
>  Googling shows that people talk of 2.4x and 8.x in an intermingled fashion.
>  Can someone please clarify?

The release after 2.5 was 8.0. That's all. They're not the same
version; it's just that there was a jump in the major number.

In case you're wondering, the major number now refers to the year the
version was released in: 8 means 2008.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From jml at mumak.net  Sun Jul  6 19:26:00 2008
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 7 Jul 2008 09:26:00 +1000
Subject: [Twisted-Python] Bloody Twisted Tree (VFS)
In-Reply-To: <20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>
Message-ID: <d06a5cd30807061626r1308f916xb1b4ee2b8432919f@mail.gmail.com>

On Mon, Jul 7, 2008 at 1:12 AM,  <glyph at divmod.com> wrote:
>
> On 07:32 am, jml at mumak.net wrote:
>>
>> On Sat, Jul 5, 2008 at 3:27 AM, Andy Gayton <andy at thecablelounge.com>
>> wrote:
>>>
>>> On Mon, Jun 30, 2008 at 9:06 PM, Jonathan Lange <jml at mumak.net> wrote:
>
>>>  * The primitive interface for IO should be producer/consumers,
>>> replacing readChunk, writeChunk.  This interface is primitive enough
>>> to express all other interfaces, while still providing the opportunity
>>> to optimize streaming performance.  The producer/consumer interface
>>> will need to take an offset to allow readChunk and writeChunk to be
>>> implemented.
>>
>> It would be nice to have things so that readChunks and writeChunks
>> (plural) could be implemented, to avoid potato programming.
>
> I don't think this is actually going to be a practical consideration, if I
> correctly understand what you mean.  For one thing, the producer/consumer
> interface is going to be something (very vaguely) like this:
>
>   remoteFile.writeFrom(producer[, offset, length])
>   remoteFile.readInto(consumer[, offset, length])
>
> This means that if you've got a really giant file, the implementation could
> pretty trivially optimize delivering it to you in the most efficient
> possible way, keeping all the relevant buffers full at every opportunity.
>  Given that stream-based I/O is somewhat inherently serial, it's difficult
> to get less potato-y than that.
>
> writeChunks, if I understand it, would be pretty trivially implementable by
> saying
>
>   remoteFile.writeFrom(MultiChunkProducer(chunks))
>
> Mapping 'readChunks' and 'writeChunks' to readv and writev in my head, I'm
> not really sure what a 'readChunks' would actually do, since we copy memory
> every time we sneeze in Python anyway.  We're not going to have preallocated
> buffers to read into.

Well, one theoretical advantage is that it can avoid roundtrips in
cases where the remote file server supports a readv-style operation. I
can't think of any servers that do this at the moment (maybe the bzr
smart server? does http 1.1 allow this?), so maybe it's not an issue.

>> This reminds me, it would be good for VFS to have an exception for
>> "this operation isn't supported" (say with symlinks on fat32) and
>> another exception for "supportable, but not actually implemented yet".
>
> I don't think it's useful to distinguish between these two types of
> exception at *runtime*.  The use-case I can see for distinguishing is
> letting a programmer know that they should figure out something that might
> be tricky to implement and write some wrappers or submit some patches.
>  Perhaps a separate error message, rather than a separate exception type?
>  Do you have a different use-case?
>

The first kind should skip tests, the second kind should fail tests.

> One related thing that we spoke about in person was pushing this negotiation
> of file-system features backwards to the initialization step, so that
> applications which needed unusual filesystem attributes could fail quickly
> with a clear error message if they weren't supported by the underlying
> platform.

This sounds like a good idea, provided that there are still clear
runtime errors and that you can skip the negotiation.

Use cases for this would be a virtual filesystem that's glued together
from other virtual filesystems, each of which has different
capabilities.

> ("WebDAV requires extended filesystem attributes, and your
> backend, SFTP, does not provide that feature.", "txGnuStow requires symbolic

Actually, some versions of SFTP do provide it. I'm not sure that there
are any implementations though :)

>>>
>>>  * we still need to decide whether path resolution should be moved to
>>> a separate interface, instead of being part of the node's interface.
>
>> I'm not 100% sure what this means? Does this relate to possibly
>> combining with FilePath?
>
> The tongue-in-cheek name that radix gave to this interface was
> 'filepath.pathdelta'.  It's related to filepath in the sense that FilePath,
> ZipPath, et. al. could benefit from using the same interface to talk about
> relative pathnames rather than manipulating lists of strings.  One can,
> after all, abstractly do operations like "child()" and "parent()" without
> knowing a lot about the base implementation of the filesystem in question.

Well, the world needs a decent one of these.

>>>
>>>  * there's concern over the package name.  twisted.tree has
>>> considerable support :)
>
>> I kind of like that. I'm not sure what the concern is with 'vfs' though.
>
> "twisted.vfs" sounds incredibly boring and unpronounceable.  It would be the
> first twisted.<acronym> package, and it's not really related to any other
> technology ambiguously named "vfs".
>
> However, this reminds me about another concern which I did not remember to
> raise while Andy was here.  Should this really be twisted.<anything> at all?
>  I'd like twisted <x> "dot products" to generally be an application which
> does something <x>-ish.  I'm aware that not every package follows this rule,
> but the ones that don't are either (A) unmaintained and slated for removal,
> or (B) part of the core, not independent subprojects, as "vfs" seems slated
> to be.
>
> Put a different way: what should 'twistd tree' do?  My suggestion would be a
> simple multi-protocol file server: HTTP, FTP (although probably disable that
> by default), SFTP, maybe a "native" protocol for providing a generalized
> backend for any Twisted application that uses the 'tree' API, so that we can
> write a proxy that exposes every arbitrary combination of features from the
> protocols it's talking to.
>
> If everyone agrees with this, then great.  However, if we never intend for
> this to go beyond providing an API that other systems hook into, maybe it
> should go somewhere subordinate to another project; twisted.internet.files
> perhaps?
>

So, this is the thing that *I'm* least worried about.

I think it should just be an API, and that it should be done so that
other Twisted components can depend on it. Beyond that, it's package
location is unimportant.

>> Here's some random stuff that I wanted to at least mention:
>>
>> - Error translation. This should translate the exception types, but it
>> should also translate values, so the error contains the virtual path.
>
> This sounds like a specific enough thing that you could file a ticket that
> described the exact behavior that you wanted.  It doesn't sound contentious
> at all to me, so unless you think there's some hidden confusion there... go
> ahead?
>>
>> - Deferreds. You don't mention them at all, but the lack of
>> asynchronous interfaces was one of the biggest problems we had with
>> twisted.vfs.
>
> I believe that the consensus on asynchronicity is that all of the
> synchronous stuff should be FilePath's job.  In the glorious future of
> twisted.tree, everything will be async.  As discussed above, this doesn't
> always mean Deferreds, it also means producers and consumers.
>

Good good.

> One thing we didn't talk about in person: handling extremely large
> directories.  We had spoken about children() returning a Deferred of a list;
> I think it would be nice if it actually had a producer/consumer API of its
> own.  Maybe this is too much of a corner case to worry about in average
> applications (i.e. we could provide a give-me-a-deferred convenience API)
> but it would be nice if it were *possible* to implement things that were
> efficient against really big networked directories.
>>

Yes. This would be very nice.

>> - URL Escaping. I got bitten by this recently. It's obviously not a
>> general VFS problem, but it's an issue with enough of them that it
>> should be considered when defining interfaces.
>
> I *think* that this should be pretty easily dealt with in a pretty generic
> way by having a clearly-defined set of string escaping rules depending on
> which protocol you're using.  It's a general VFS issue in the sense that
> there are escaping issues with "/" on regular filesystems, after all.  Or at
> least, there are error-reporting issues with characters like "/", ";", and
> ":" on certain FSes.
>

Good. I just wanted to flag it.



From andrew-twisted at puzzling.org  Sun Jul  6 22:04:58 2008
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 7 Jul 2008 12:04:58 +1000
Subject: [Twisted-Python] Bloody Twisted Tree (VFS)
In-Reply-To: <d06a5cd30807061626r1308f916xb1b4ee2b8432919f@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>
	<d06a5cd30807061626r1308f916xb1b4ee2b8432919f@mail.gmail.com>
Message-ID: <20080707020458.GB29434@steerpike.home.puzzling.org>

Jonathan Lange wrote:
> On Mon, Jul 7, 2008 at 1:12 AM,  <glyph at divmod.com> wrote:
[...]
> >
> > Mapping 'readChunks' and 'writeChunks' to readv and writev in my head, I'm
> > not really sure what a 'readChunks' would actually do, since we copy memory
> > every time we sneeze in Python anyway.  We're not going to have preallocated
> > buffers to read into.
> 
> Well, one theoretical advantage is that it can avoid roundtrips in
> cases where the remote file server supports a readv-style operation. I
> can't think of any servers that do this at the moment (maybe the bzr
> smart server? does http 1.1 allow this?), so maybe it's not an issue.

Yes, the bzr smart server does, as does HTTP (via the Range header).  On
high-latency links (or even moderate latency links) excessive round trips kill
performance.

-Andrew.




From glyph at divmod.com  Mon Jul  7 00:43:44 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 07 Jul 2008 04:43:44 -0000
Subject: [Twisted-Python] Bloody Twisted Tree (VFS)
In-Reply-To: <20080707020458.GB29434@steerpike.home.puzzling.org>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>
	<d06a5cd30807061626r1308f916xb1b4ee2b8432919f@mail.gmail.com>
	<20080707020458.GB29434@steerpike.home.puzzling.org>
Message-ID: <20080707044344.25821.1247608067.divmod.xquotient.12352@joule.divmod.com>

On 02:04 am, andrew-twisted at puzzling.org wrote:
>Jonathan Lange wrote:
>>
>>Well, one theoretical advantage is that it can avoid roundtrips in
>>cases where the remote file server supports a readv-style operation. I
>>can't think of any servers that do this at the moment (maybe the bzr
>>smart server? does http 1.1 allow this?), so maybe it's not an issue.
>
>Yes, the bzr smart server does, as does HTTP (via the Range header). 
>On
>high-latency links (or even moderate latency links) excessive round 
>trips kill
>performance.

OK, I think I can see what you mean.  I believe you'll be able to 
effectively implement "readChunks" by simply pipelining calls to 
readInto(consumer); different consumers can be read into in parallel.



From godson.g at gmail.com  Mon Jul  7 14:53:23 2008
From: godson.g at gmail.com (Godson Gera)
Date: Tue, 8 Jul 2008 00:23:23 +0530
Subject: [Twisted-Python] [SIP]
In-Reply-To: <4868AA21.2040208@enseirb.fr>
References: <4868AA21.2040208@enseirb.fr>
Message-ID: <f9822b400807071153l7c71cd46xbed3cdcd5113720@mail.gmail.com>

Hi, this little script redirects all the sip requests it receives to other
sip server residing and 192.168.1.100, this is a learning example for me as
well, but good enough to start with SIP in twisted.

from twisted.internet import reactor

from twisted.protocols import sip
from twisted.internet.protocol import ServerFactory

class SipProxy(sip.Proxy):
  def __init__(self):
  sip.Proxy.__init__(self,host='192.168.1.3',port=5060)
  self.tries=0
  def handle_request(self,message,addr):
  print message.toString()
  print dir(message)
  if message.method=='ACK':return
  r = self.responseFromRequest(301,message)
  r.addHeader("Contact","sip:192.168.1.100:5061")
  r.creationFinished()
  self.deliverResponse(r)
  print r.toString()
  print addr
  self.tries+=1

class sipfactory(ServerFactory):
  protocol=SipProxy

reactor.listenUDP(5060,SipProxy(),'192.168.1.3')
reactor.run()


Thanks & Regards,

Godson Gera
On 6/30/08, R?mi BUISSON <buisson at enseirb.fr> wrote:
>
> Hi everyone,
>
> I didn't succeed in using twisted.protocols.sip ?
>
> Do you have a simple example for me ? It will be very nice ...
>
> Thanks in advance !
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080708/b24b7b82/attachment.htm 

From ross at kallisti.us  Mon Jul  7 19:08:16 2008
From: ross at kallisti.us (Ross Vandegrift)
Date: Mon, 7 Jul 2008 19:08:16 -0400
Subject: [Twisted-Python] cred realm with __init__ methods under twistd
Message-ID: <20080707230816.GA2639@kallisti.us>

Hello everyone,

I'm working on a twisted application that uses cred and pb.  I'm
having a bit of trouble getting my realm working as I want.

In my .tac file, I have this:

p = portal.Portal(CNDRealm())
c = checkers.InMemoryUsernamePasswordDatabaseDontUse(user="passwd")
p.registerChecker(c)
application = service.Application("receiver")
service = service.IServiceCollection(application)
factory = pb.PBServerFactory(p)
internet.TCPServer(8800, factory).setServiceParent(service)


My realm, CNDRealm, looks like this:

from globals import devs, queues, conditions, devices
class CNDRealm(object):
    implements(portal.IRealm)
    def __init__(self):
        for i in devs:
            queues[i] = list()
            conditions[i] = threading.Condition()
            devices[i] = CNDDevice(i[0], socket.gethostbyname(i[0]), i[1], queues[i], conditions[i])
        log.msg("Initialized devices: " % devices)

    def requestAvatar(self, aid, min, *interfaces):
        log.msg("Avatar requested: %s" % aid)
        if pb.IPerspective not in interfaces:
            raise NotImplementedError
        return pb.IPerspective, CNDSubmitter(aid), lambda: None
    


However, I never get the log message from the __init__ method.  I know
that it's not being run because those dictionaries are never populated
with the data my app needs to be in there.


1) What's going on?  I'm pretty surprised to find that an object's
__init__ doesn't seem to be getting called!

2) Is there some better place in a twistd app to put general start-up
initialization kinds of things?

-- 
Ross Vandegrift
ross at kallisti.us

"The good Christian should beware of mathematicians, and all those who
make empty prophecies. The danger already exists that the mathematicians
have made a covenant with the devil to darken the spirit and to confine
man in the bonds of Hell."
	--St. Augustine, De Genesi ad Litteram, Book II, xviii, 37



From maarten at treewalker.org  Mon Jul  7 19:25:46 2008
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Tue, 8 Jul 2008 01:25:46 +0200
Subject: [Twisted-Python] cred realm with __init__ methods under twistd
In-Reply-To: <20080707230816.GA2639@kallisti.us>
References: <20080707230816.GA2639@kallisti.us>
Message-ID: <200807080125.54221.maarten@treewalker.org>

On Tuesday 08 July 2008, Ross Vandegrift wrote:

> log.msg("Initialized devices: " % devices)

There is no placeholder (like "%s") in the message string. This will raise a 
TypeError. Probably something is swallowing this error or an earlier error 
instead of displaying it.

Bye,
		Maarten
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part.
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20080708/9d0accfa/attachment.pgp 

From andy at thecablelounge.com  Mon Jul  7 23:02:06 2008
From: andy at thecablelounge.com (Andy Gayton)
Date: Mon, 7 Jul 2008 23:02:06 -0400
Subject: [Twisted-Python] Bloody Twisted Tree (VFS)
In-Reply-To: <20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>
Message-ID: <74e109b70807072002i5b4c604dw682d9938fa8ddc38@mail.gmail.com>

On Sun, Jul 6, 2008 at 11:12 AM,  <glyph at divmod.com> wrote:
> One related thing that we spoke about in person was pushing this negotiation
> of file-system features backwards to the initialization step, so that
> applications which needed unusual filesystem attributes could fail quickly
> with a clear error message if they weren't supported by the underlying
> platform. ("WebDAV requires extended filesystem attributes, and your
> backend, SFTP, does not provide that feature.", "txGnuStow requires symbolic
> links, and your backend, the Microsoft Windows filesystem, does not provide
> that feature.")

...

> One thing we didn't talk about in person: handling extremely large
> directories.  We had spoken about children() returning a Deferred of a list;
> I think it would be nice if it actually had a producer/consumer API of its
> own.  Maybe this is too much of a corner case to worry about in average
> applications (i.e. we could provide a give-me-a-deferred convenience API)
> but it would be nice if it were *possible* to implement things that were
> efficient against really big networked directories.

I really like these two ideas.  I've noted them down work on.  I think
we agree though that we could get a release out first, and then look
to add these?

> However, this reminds me about another concern which I did not remember to
> raise while Andy was here.  Should this really be twisted.<anything> at all?
>  I'd like twisted <x> "dot products" to generally be an application which
> does something <x>-ish.  I'm aware that not every package follows this rule,
> but the ones that don't are either (A) unmaintained and slated for removal,
> or (B) part of the core, not independent subprojects, as "vfs" seems slated
> to be.
>
> Put a different way: what should 'twistd tree' do?  My suggestion would be a
> simple multi-protocol file server: HTTP, FTP (although probably disable that
> by default), SFTP, maybe a "native" protocol for providing a generalized
> backend for any Twisted application that uses the 'tree' API, so that we can
> write a proxy that exposes every arbitrary combination of features from the
> protocols it's talking to.

I remember a chat I was having with you back in PyCon 2007, about
expanding twistd's command line interface to be able to multiplex
together several different services.

Having a collection of backend implementations available to use with
this would be cool.  But yeah, this could still be be provided without
using a twisted.<x> package.

Here's the vfs plugin so far:
http://twistedmatrix.com/trac/browser/branches/vfs-twistd-plugin-2821-2/twisted/vfs/plugin.py#L48
-- Options.longdesc talks about the above idea.  I'm ok either way on
this.

cheers,
Andy.



From andy at thecablelounge.com  Mon Jul  7 23:12:01 2008
From: andy at thecablelounge.com (Andy Gayton)
Date: Mon, 7 Jul 2008 23:12:01 -0400
Subject: [Twisted-Python] Bloody Twisted VFS
In-Reply-To: <d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
Message-ID: <74e109b70807072012r4e09cc67xdd9be6bf6b29647a@mail.gmail.com>

On Sun, Jul 6, 2008 at 3:32 AM, Jonathan Lange <jml at mumak.net> wrote:
> - Deferreds. You don't mention them at all, but the lack of
> asynchronous interfaces was one of the biggest problems we had with
> twisted.vfs.

It's pretty much Deferreds all the way:

http://twistedmatrix.com/trac/browser/branches/vfs-async-backends-2815/twisted/vfs/ivfs.py#L105

> - "Decorators" like "read-only" and "chroot" could prove useful. Is
> there room in the design for such things?

Yeah, I'm all for flavouring backends with decorators.

That's why I keep trying to sneak this guy through ;)

http://twistedmatrix.com/trac/browser/branches/vfs-async-backends-2815/twisted/vfs/_decorator.py

You get chroot for free with the current FilePath based vfs
implementation.  In the previous version (trunk) of vfs there are
force user/force group and umask decorators.  I'd like to recreate
those once we get the new version merged.

Andy.



From rajainnov at gmail.com  Tue Jul  8 05:34:50 2008
From: rajainnov at gmail.com (raja pavankumar)
Date: Tue, 8 Jul 2008 05:34:50 -0400
Subject: [Twisted-Python] uninstall Twisted-8.1.0
Message-ID: <500fd1b0807080234t59d5579fx1b1d4778ac9d83c0@mail.gmail.com>

hello,

I need to uninstall Twisted-8.1.0 and use Twisted-2.2.0.

Can some one help me as to how to uninstall Twisted-8.1.0.

Thanks in advance
rajainnov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080708/e19b67d1/attachment.htm 

From adelagon at gmail.com  Tue Jul  8 05:55:15 2008
From: adelagon at gmail.com (Alvin Delagon)
Date: Tue, 8 Jul 2008 17:55:15 +0800
Subject: [Twisted-Python] uninstall Twisted-8.1.0
In-Reply-To: <500fd1b0807080234t59d5579fx1b1d4778ac9d83c0@mail.gmail.com>
References: <500fd1b0807080234t59d5579fx1b1d4778ac9d83c0@mail.gmail.com>
Message-ID: <7a01f6c00807080255k5665c9a9u39b37cf75f8cfceb@mail.gmail.com>

Just remove or rename twisted in site-packages. Normally it's located in the
/usr/lib/<python version>/site-packages/twisted.

---
Alvin

On Tue, Jul 8, 2008 at 5:34 PM, raja pavankumar <rajainnov at gmail.com> wrote:

> hello,
>
> I need to uninstall Twisted-8.1.0 and use Twisted-2.2.0.
>
> Can some one help me as to how to uninstall Twisted-8.1.0.
>
> Thanks in advance
> rajainnov
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080708/dcf64509/attachment.htm 

From rajainnov at gmail.com  Tue Jul  8 06:01:41 2008
From: rajainnov at gmail.com (raja pavankumar)
Date: Tue, 8 Jul 2008 06:01:41 -0400
Subject: [Twisted-Python] uninstall Twisted-8.1.0
In-Reply-To: <7a01f6c00807080255k5665c9a9u39b37cf75f8cfceb@mail.gmail.com>
References: <500fd1b0807080234t59d5579fx1b1d4778ac9d83c0@mail.gmail.com>
	<7a01f6c00807080255k5665c9a9u39b37cf75f8cfceb@mail.gmail.com>
Message-ID: <500fd1b0807080301k18edb1eaqe3611d7741ea23f9@mail.gmail.com>

I have two dirs in that location,

(1) twisted
(2) Twisted-8.1.0-py2.4-linux-i686.egg

did you mean I need to remove these two directories?

Thanks in Advance
rajainnov

On Tue, Jul 8, 2008 at 5:55 AM, Alvin Delagon <adelagon at gmail.com> wrote:

> Just remove or rename twisted in site-packages. Normally it's located in
> the /usr/lib/<python version>/site-packages/twisted.
>
> ---
> Alvin
>
> On Tue, Jul 8, 2008 at 5:34 PM, raja pavankumar <rajainnov at gmail.com>
> wrote:
>
>> hello,
>>
>> I need to uninstall Twisted-8.1.0 and use Twisted-2.2.0.
>>
>> Can some one help me as to how to uninstall Twisted-8.1.0.
>>
>> Thanks in advance
>> rajainnov
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> http://www.alvinatorsplayground.blogspot.com/
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080708/387d1ca9/attachment.htm 

From jessewoo at gmail.com  Tue Jul  8 08:07:43 2008
From: jessewoo at gmail.com (Wu Zhe)
Date: Tue, 8 Jul 2008 20:07:43 +0800
Subject: [Twisted-Python] synchronous problem
Message-ID: <8353131e0807080507k4a16d4a4m965f84b37548866f@mail.gmail.com>

Hi

I have a series of files to transfer, each followed by a line sent to
specify the file size and crc number. As we can see here I need
synchronous behavior, only after the previous file transfer complete,
can the for loop step into the next iteration to send the next file
via sender.beginFileTransfer. How can i achieve this? Here is the
problematic code:

    def import_query(self, path_list):
        number_of_files = len(path_list)
        line = '3#%s' % number_of_files
        self.client_instance.sendLine(line)

        sender = FileSender()
        sender.CHUNK_SIZE = common.chunk_size
        for path in path_list:
            f = open(path, 'rb')
            s = f.read()
            filesize = len(s)
            crc = crc32(s)
            line = '3#%s:%s' % (filesize, crc)
            self.client_instance.sendLine(line)

            def transfer_completed(lastsent):
                f.close()
                self.client_instance.setLineMode()

            # send the file
            self.setRawMode()
            d = sender.beginFileTransfer(f, self.client_instance.transport)
            d.addCallback(transfer_completed)

-- 
Wu Zhe
Best Regards



From jessewoo at gmail.com  Tue Jul  8 08:12:43 2008
From: jessewoo at gmail.com (Wu Zhe)
Date: Tue, 8 Jul 2008 20:12:43 +0800
Subject: [Twisted-Python] Re: synchronous problem
In-Reply-To: <8353131e0807080507k4a16d4a4m965f84b37548866f@mail.gmail.com>
References: <8353131e0807080507k4a16d4a4m965f84b37548866f@mail.gmail.com>
Message-ID: <8353131e0807080512v754b5143h5b6ba5ec06bca7be@mail.gmail.com>

>    def import_query(self, path_list):
>        number_of_files = len(path_list)
>        line = '3#%s' % number_of_files
>        self.client_instance.sendLine(line)
>
>        sender = FileSender()
>        sender.CHUNK_SIZE = common.chunk_size
>        for path in path_list:
>            f = open(path, 'rb')
>            s = f.read()
>            filesize = len(s)
>            crc = crc32(s)
>            line = '3#%s:%s' % (filesize, crc)
>            self.client_instance.sendLine(line)
>
>            def transfer_completed(lastsent):
>                f.close()
>                self.client_instance.setLineMode()
>
>            # send the file
>            self.setRawMode()
sorry, the above line should be: self.client_instance.setRawMode()

self.client_instance is an instance of a subclass inherited from LineReceiver.

>            d = sender.beginFileTransfer(f, self.client_instance.transport)
>            d.addCallback(transfer_completed)
>

-- 
Wu Zhe
Best Regards



From ross at kallisti.us  Tue Jul  8 09:30:48 2008
From: ross at kallisti.us (Ross Vandegrift)
Date: Tue, 8 Jul 2008 09:30:48 -0400
Subject: [Twisted-Python] cred realm with __init__ methods under twistd
In-Reply-To: <200807080125.54221.maarten@treewalker.org>
References: <20080707230816.GA2639@kallisti.us>
	<200807080125.54221.maarten@treewalker.org>
Message-ID: <20080708133048.GA7164@kallisti.us>

On Tue, Jul 08, 2008 at 01:25:46AM +0200, Maarten ter Huurne wrote:
> On Tuesday 08 July 2008, Ross Vandegrift wrote:
> 
> > log.msg("Initialized devices: " % devices)
> 
> There is no placeholder (like "%s") in the message string. This will raise a 
> TypeError. Probably something is swallowing this error or an earlier error 
> instead of displaying it.

Aha - not only that but there was another typo in there throwing an
exception in the first iteration of my setup loop.  Good catch :)

Ross



From kevin at lazyweb.ca  Tue Jul  8 09:38:05 2008
From: kevin at lazyweb.ca (kevin beckford)
Date: Tue, 8 Jul 2008 09:38:05 -0400
Subject: [Twisted-Python] uninstall Twisted-8.1.0
In-Reply-To: <500fd1b0807080301k18edb1eaqe3611d7741ea23f9@mail.gmail.com>
References: <500fd1b0807080234t59d5579fx1b1d4778ac9d83c0@mail.gmail.com>
	<7a01f6c00807080255k5665c9a9u39b37cf75f8cfceb@mail.gmail.com>
	<500fd1b0807080301k18edb1eaqe3611d7741ea23f9@mail.gmail.com>
Message-ID: <e69cb1c20807080638v776fe958l7db56c9c905335d0@mail.gmail.com>

(1) twisted
> (2) Twisted-8.1.0-py2.4-linux-i686.egg
>
> did you mean I need to remove these two directories


I believe so, yes.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080708/4a211e5e/attachment.htm 

From mailing_lists at evotex.ch  Tue Jul  8 10:07:42 2008
From: mailing_lists at evotex.ch (Gabriel Rossetti)
Date: Tue, 08 Jul 2008 16:07:42 +0200
Subject: [Twisted-Python] domish.Element comparison not working
Message-ID: <487374AE.9090705@evotex.ch>

Hello everyone,

I need to compare two domish.Element objects in a unit test using trial. 
I can't compare the string xml (using .toXml()) because sometimes the 
attributes are not in the same order, and since it's a string it uses 
normal string comparison and you see the problem, but I can't use direct 
comparison either, so what should I use? If you look at the example 
below you will see what I mean :

 >>> from twisted.words.xish import domish
 >>> root = domish.Element(('', 'test'))
 >>> s = domish.Element(('', 'feed'), attribs={'name':'myname'})
 >>> s.addContent("toto")
'toto'
 >>> root.addChild(s)
<twisted.words.xish.domish.Element object at 0x848390c>
 >>> root.toXml()
u"<test><feed name='myname'>toto</feed></test>"
 >>>
 >>> root2 = domish.Element(('', 'test'))
 >>> s = domish.Element(('', 'feed'), attribs={'name':'myname'})
 >>> s.addContent("toto")
'toto'
 >>> root2.addChild(s)
<twisted.words.xish.domish.Element object at 0x84a342c>
 >>> root2.toXml()
u"<test><feed name='myname'>toto</feed></test>"
 >>>
 >>> root == root2
False

As you see, root and root2 are equal in the sense that they contain the 
same xml structure, same identifiers and the same values, but the "==" 
comparison says they are false. Am i doing something wrong or is the 
comparison just not implemented for those objects?

Thank you,
Gabriel





From kozneb at gmail.com  Tue Jul  8 10:49:40 2008
From: kozneb at gmail.com (=?UTF-8?Q?Harald_Bl=C3=A5tand?=)
Date: Tue, 8 Jul 2008 16:49:40 +0200
Subject: [Twisted-Python] synchronous problem
In-Reply-To: <8353131e0807080507k4a16d4a4m965f84b37548866f@mail.gmail.com>
References: <8353131e0807080507k4a16d4a4m965f84b37548866f@mail.gmail.com>
Message-ID: <1ff309e60807080749h2ac4a111gf7b7bcb8c572c96a@mail.gmail.com>

On Tue, Jul 8, 2008 at 2:07 PM, Wu Zhe <jessewoo at gmail.com> wrote:

> Hi
>
> I have a series of files to transfer, each followed by a line sent to
> specify the file size and crc number. As we can see here I need
> synchronous behavior, only after the previous file transfer complete,
> can the for loop step into the next iteration to send the next file
> via sender.beginFileTransfer. How can i achieve this? Here is the
> problematic code:
>
>    def import_query(self, path_list):
>        number_of_files = len(path_list)
>        line = '3#%s' % number_of_files
>        self.client_instance.sendLine(line)
>
>        sender = FileSender()
>        sender.CHUNK_SIZE = common.chunk_size
>        for path in path_list:
>            f = open(path, 'rb')
>            s = f.read()
>            filesize = len(s)
>            crc = crc32(s)
>            line = '3#%s:%s' % (filesize, crc)
>            self.client_instance.sendLine(line)
>
>            def transfer_completed(lastsent):
>                f.close()
>                self.client_instance.setLineMode()
>
>            # send the file
>            self.setRawMode()
>            d = sender.beginFileTransfer(f, self.client_instance.transport)
>            d.addCallback(transfer_completed)
>


I think I would try this (Python 2.5) -

   @defer.inlineCallbacks
   def import_query(self, path_list):
      ...
      for path in path_list:
         ...
         < delete transfer_complete() >
          ...
         yield sender.beginFileTransfer(f, self.client_instance.transport)
         f.close()
         ...


Harald
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080708/673762f3/attachment.htm 

From mailing_lists at evotex.ch  Tue Jul  8 11:41:27 2008
From: mailing_lists at evotex.ch (Gabriel Rossetti)
Date: Tue, 08 Jul 2008 17:41:27 +0200
Subject: [Twisted-Python] domish.Element comparison not working
In-Reply-To: <487374AE.9090705@evotex.ch>
References: <487374AE.9090705@evotex.ch>
Message-ID: <48738AA7.7060004@evotex.ch>

Gabriel Rossetti wrote:
> Hello everyone,
>
> I need to compare two domish.Element objects in a unit test using 
> trial. I can't compare the string xml (using .toXml()) because 
> sometimes the attributes are not in the same order, and since it's a 
> string it uses normal string comparison and you see the problem, but I 
> can't use direct comparison either, so what should I use? If you look 
> at the example below you will see what I mean :
>
> >>> from twisted.words.xish import domish
> >>> root = domish.Element(('', 'test'))
> >>> s = domish.Element(('', 'feed'), attribs={'name':'myname'})
> >>> s.addContent("toto")
> 'toto'
> >>> root.addChild(s)
> <twisted.words.xish.domish.Element object at 0x848390c>
> >>> root.toXml()
> u"<test><feed name='myname'>toto</feed></test>"
> >>>
> >>> root2 = domish.Element(('', 'test'))
> >>> s = domish.Element(('', 'feed'), attribs={'name':'myname'})
> >>> s.addContent("toto")
> 'toto'
> >>> root2.addChild(s)
> <twisted.words.xish.domish.Element object at 0x84a342c>
> >>> root2.toXml()
> u"<test><feed name='myname'>toto</feed></test>"
> >>>
> >>> root == root2
> False
>
> As you see, root and root2 are equal in the sense that they contain 
> the same xml structure, same identifiers and the same values, but the 
> "==" comparison says they are false. Am i doing something wrong or is 
> the comparison just not implemented for those objects?
>
> Thank you,
> Gabriel
>
>
I went and looked and domish.Element has no __eq_(_) and __ne__() 
methods, here's a patch adding them, could someone review them and add 
them to the trunk? I made it against the trunk.

Thank you,
Gabriel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: domish.py.patch
Type: text/x-diff
Size: 1771 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20080708/3116dade/attachment.patch 

From Marcin.Kasperski at softax.com.pl  Tue Jul  8 13:02:41 2008
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Tue, 08 Jul 2008 19:02:41 +0200
Subject: [Twisted-Python] Re: Twisted Hosting and Twisted in the Cloud
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
Message-ID: <87wsjwe2by.fsf@softax.com.pl>

>  * Dedicated hosts, with Twisted libs pre-installed on them
>  * Virtual hosts/"slices" with Twisted libs pre-installed on them

Installing Twisted is easy enough ;-) If I manage dedicated host or
VPS, then installing twisted is a simple command, be it easy_install,
apt-get install, or yum something....

So I do not think there is much to be gained here. Maybe cheap shared
hosting with ability to run twisted apps could make some sense, but
... VPS are cheap nowadays.

Supported installation may be different story, but it can be uneasy
to draw a line where the support really ends....

Just my 2 cents.

PS I love VPS-s ;-)

-- 
----------------------------------------------------------------------
| Marcin Kasperski   | If we are to be successful, we must still have
| http://mekk.waw.pl |    the courage to put our faith in people as
|                    |  opposed to a process. (Booch,Martin,Newkirk)
----------------------------------------------------------------------




From zooko at zooko.com  Tue Jul  8 12:59:49 2008
From: zooko at zooko.com (zooko)
Date: Tue, 8 Jul 2008 10:59:49 -0600
Subject: [Twisted-Python] uninstall Twisted-8.1.0
In-Reply-To: <500fd1b0807080301k18edb1eaqe3611d7741ea23f9@mail.gmail.com>
References: <500fd1b0807080234t59d5579fx1b1d4778ac9d83c0@mail.gmail.com>
	<7a01f6c00807080255k5665c9a9u39b37cf75f8cfceb@mail.gmail.com>
	<500fd1b0807080301k18edb1eaqe3611d7741ea23f9@mail.gmail.com>
Message-ID: <4A9C20E7-5384-4BF9-8F09-50605437260E@zooko.com>

On Jul 8, 2008, at 4:01 AM, raja pavankumar wrote:

> I have two dirs in that location,
>
> (1) twisted
> (2) Twisted-8.1.0-py2.4-linux-i686.egg
>
> did you mean I need to remove these two directories?

Each of those directories was created by a *different* install of  
Twisted, but it seems wise to remove both of them.

In addition, installing Twisted adds a few executables, usually to  
your /usr/local/bin, or if on Windows to C:\Python25\Scripts, or  
perhaps elsewhere, depending.  To completely uninstall Twisted, you  
should find and remove the following such executables, which might be  
named with '.exe' or '.bat' or '.py' extension or no extension (sorry  
I'm not certain):

im
cftp
lore
t-im
pyhtmlizer
conch
mktap
trial
manhole
tap2deb
tap2rpm
mailmail
tkconch
twistd
tapconvert
bookify
ckeygen

Regards,

Zooko




From duncan.mcgreggor at gmail.com  Tue Jul  8 14:35:57 2008
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Tue, 8 Jul 2008 13:35:57 -0500
Subject: [Twisted-Python] Twisted Hosting and Twisted in the Cloud
In-Reply-To: <37d49ed40807020850j33094e58rea772b3535742a35@mail.gmail.com>
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<4868CD60.7050801@cfl.rr.com>
	<37d49ed40807020850j33094e58rea772b3535742a35@mail.gmail.com>
Message-ID: <4327dfbd0807081135l49299d9dxa41419c170a07307@mail.gmail.com>

On Wed, Jul 2, 2008 at 10:50 AM, Andy Fundinger
<Andy at newworldelectric.com> wrote:
> Cloud support would be nice.  I have a twisted app(a web service to
> implement a game server for Second Life) that is likely to have a rough
> scaling curve with bursty usage.  Atm I'm running it on a dedicated virtual
> box with plans to go to EC2 and then multiple EC2s, but a single cloud
> instance would be better. I've already got a decoupled permanent datastore
> which interfaces to SDB for a cloud should work from that angle too.
>
> What would twisted look like on a cloud?  Would the main reactor still be
> single threaded with threads being distributed or would we have to
> rearchitect for multiple main reactors by port or path?

Hey Andy, I never replied to your question.

We've been discussing several ways in which this would be done, and so
far none of them would require application developers to do anything
too radical. By definition, if you are moving to a new architecture,
something needs to be re-architected :-) One solution that we've
prototyped simply involves creating a small "model" object and passing
it to a new service. In that instance there is very little that a
developer would have to do. With support for things like
auto-discovery and messaging, even that step might (in many cases) go
away and you'd just have to instantiate a particular service.

d



From duncan.mcgreggor at gmail.com  Tue Jul  8 15:49:26 2008
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Tue, 8 Jul 2008 14:49:26 -0500
Subject: [Twisted-Python] Re: Twisted Hosting and Twisted in the Cloud
In-Reply-To: <87wsjwe2by.fsf@softax.com.pl>
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<87wsjwe2by.fsf@softax.com.pl>
Message-ID: <4327dfbd0807081249o6759ad9fg9e80b1b8d954d006@mail.gmail.com>

On Tue, Jul 8, 2008 at 12:02 PM, Marcin Kasperski
<Marcin.Kasperski at softax.com.pl> wrote:
>>  * Dedicated hosts, with Twisted libs pre-installed on them
>>  * Virtual hosts/"slices" with Twisted libs pre-installed on them
>
> Installing Twisted is easy enough ;-) If I manage dedicated host or
> VPS, then installing twisted is a simple command, be it easy_install,
> apt-get install, or yum something....
>
> So I do not think there is much to be gained here. Maybe cheap shared
> hosting with ability to run twisted apps could make some sense, but
> ... VPS are cheap nowadays.

There are two things to consider here:

1) We've had conversations with application developers who use Twisted
and do a lot of repeated setup. They'd like it if they didn't have to
do that every time... but not only the work itself, the mental
convenience factor: they don't want to even have to think about it.
They'd like to consider it simply part of their OS. I don't know about
you, but I like the idea of a Twisted OS ;-)

2) Perception and exposure. This one's a biggie. If hosting providers
start offering explicit support for Twisted, we get an arguably
significant increase in exposure to potential users. The more people
who are aware that Twisted exists, the more that use it. The many and
obvious benefits that come as a result of this (including more
potential funding for the TSF!) are an excellent motivation.

> Supported installation may be different story, but it can be uneasy
> to draw a line where the support really ends....

That's definitely a dark art ;-)

d



From Benjamin.Rutt at gs.com  Tue Jul  8 16:11:31 2008
From: Benjamin.Rutt at gs.com (Rutt, Benjamin)
Date: Tue, 8 Jul 2008 16:11:31 -0400
Subject: [Twisted-Python] Gc of deferreds
Message-ID: <C8853DE689283B47B5D348BC33E0619311D00E76@gsmbnmp04es.firmwide.corp.gs.com>

In the following program, what prevents the deferred "d" from being
gc'd?  (nothing saves the return of foo() in any variable).  Do I need
to keep a reference to it around to ensure the callbacks will run?



#!/usr/bin/env python
from twisted.internet import defer,reactor,utils

def foo():
    d = utils.getProcessOutput('sleep', args=['2'])
    def cb(data):
      print "cb fired"
      return data
    d.addCallback(cb)
    return d

foo()

reactor.callLater(5, reactor.stop)
reactor.run()



Yet when I run it, it seems everything works fine:

$ ./spawner.py 
cb fired
$ 

I am just questioning the need to keep deferreds in memory somewhere, if
they haven't fired their callbacks yet.  Thanks.



From glyph at divmod.com  Tue Jul  8 16:28:01 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 08 Jul 2008 20:28:01 -0000
Subject: [Twisted-Python] Bloody Twisted Tree (VFS)
In-Reply-To: <74e109b70807072002i5b4c604dw682d9938fa8ddc38@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>
	<74e109b70807072002i5b4c604dw682d9938fa8ddc38@mail.gmail.com>
Message-ID: <20080708202801.25821.1477690916.divmod.xquotient.12552@joule.divmod.com>

On 03:02 am, andy at thecablelounge.com wrote:
>On Sun, Jul 6, 2008 at 11:12 AM,  <glyph at divmod.com> wrote:
>>One related thing that we spoke about in person was pushing this 
>>negotiation
>>of file-system features backwards to the initialization step

>>One thing we didn't talk about in person: handling extremely large
>>directories.

>I really like these two ideas.  I've noted them down work on.  I think
>we agree though that we could get a release out first, and then look
>to add these?

Absolutely.  I don't think any ideas I brought up in this email should 
be blockers.
>>what should 'twistd tree' do?

>Here's the vfs plugin so far:

Awesome, I guess my concern was pre-addressed!



From glyph at divmod.com  Tue Jul  8 16:32:10 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 08 Jul 2008 20:32:10 -0000
Subject: [Twisted-Python] Bloody Twisted VFS
In-Reply-To: <74e109b70807072012r4e09cc67xdd9be6bf6b29647a@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<74e109b70807072012r4e09cc67xdd9be6bf6b29647a@mail.gmail.com>
Message-ID: <20080708203210.25821.1906899401.divmod.xquotient.12560@joule.divmod.com>


On 03:12 am, andy at thecablelounge.com wrote:
>On Sun, Jul 6, 2008 at 3:32 AM, Jonathan Lange <jml at mumak.net> wrote:

>>- "Decorators" like "read-only" and "chroot" could prove useful. Is
>>there room in the design for such things?
>
>Yeah, I'm all for flavouring backends with decorators.
>
>That's why I keep trying to sneak this guy through ;)
>
>http://twistedmatrix.com/trac/browser/branches/vfs-async- 
>backends-2815/twisted/vfs/_decorator.py

Eehhhhh... I'm glad that name starts with "_" :).  It seems like one of 
those too-clever-by-half solutions to a relatively simple problem, where 
the cleverness will bite you later.  Something like... I would do.

The general concept of decorators is really good though.



From radix at twistedmatrix.com  Tue Jul  8 16:34:15 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 8 Jul 2008 16:34:15 -0400
Subject: [Twisted-Python] Gc of deferreds
In-Reply-To: <C8853DE689283B47B5D348BC33E0619311D00E76@gsmbnmp04es.firmwide.corp.gs.com>
References: <C8853DE689283B47B5D348BC33E0619311D00E76@gsmbnmp04es.firmwide.corp.gs.com>
Message-ID: <60ed19d40807081334t32545f35g3e325d1e42c3a6c2@mail.gmail.com>

On Tue, Jul 8, 2008 at 4:11 PM, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> #!/usr/bin/env python
> from twisted.internet import defer,reactor,utils
>
> def foo():
>    d = utils.getProcessOutput('sleep', args=['2'])
>    def cb(data):
>      print "cb fired"
>      return data
>    d.addCallback(cb)
>    return d
>
> foo()
>
> reactor.callLater(5, reactor.stop)
> reactor.run()
>
>
> Yet when I run it, it seems everything works fine:
>
> $ ./spawner.py
> cb fired
> $

getProcessOutput will cause a reference to be held to it. It needs
that reference so it can fire the deferred once the process is
complete.

> I am just questioning the need to keep deferreds in memory somewhere, if
> they haven't fired their callbacks yet.  Thanks.

Um, how will their callbacks be fired if they're not in memory any more?


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From glyph at divmod.com  Tue Jul  8 16:39:10 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 08 Jul 2008 20:39:10 -0000
Subject: [Twisted-Python] Gc of deferreds
In-Reply-To: <C8853DE689283B47B5D348BC33E0619311D00E76@gsmbnmp04es.firmwide.corp.gs.com>
References: <C8853DE689283B47B5D348BC33E0619311D00E76@gsmbnmp04es.firmwide.corp.gs.com>
Message-ID: <20080708203910.25821.744251806.divmod.xquotient.12573@joule.divmod.com>


On 08:11 pm, benjamin.rutt at gs.com wrote:
>In the following program, what prevents the deferred "d" from being
>gc'd?  (nothing saves the return of foo() in any variable).  Do I need
>to keep a reference to it around to ensure the callbacks will run?

The reactor has a reference to a process transport.

The process transport has a reference to its process protocol, 
specifically a twisted.internet.utils._BackRelay.

The process protocol has a reference to the Deferred.

When the reactor learns that there is some information available for the 
process transport, it relays it to the transport which relays it to the 
protocol which may deliver it to the Deferred.

When the event fires which causes the Deferred to be called back, some 
of these references are broken, and it can generally be GC'd (unless 
there are more references or more callbacks).
>I am just questioning the need to keep deferreds in memory somewhere, 
>if
>they haven't fired their callbacks yet.  Thanks.

I don't understand this question.  If the Deferred isn't in memory, then 
the callback will never be called.  All Deferreds which have interesting 
effects hang around for a while until those callbacks are called.  Are 
you suggesting that the Deferred get written out to disk or something, 
so it can be removed from memory?  There are a whole lot of reasons why 
*that* doesn't make any sense :).



From Benjamin.Rutt at gs.com  Tue Jul  8 17:40:10 2008
From: Benjamin.Rutt at gs.com (Rutt, Benjamin)
Date: Tue, 8 Jul 2008 17:40:10 -0400
Subject: [Twisted-Python] Gc of deferreds
In-Reply-To: <60ed19d40807081334t32545f35g3e325d1e42c3a6c2@mail.gmail.com>
References: <C8853DE689283B47B5D348BC33E0619311D00E76@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40807081334t32545f35g3e325d1e42c3a6c2@mail.gmail.com>
Message-ID: <C8853DE689283B47B5D348BC33E0619311D00E7A@gsmbnmp04es.firmwide.corp.gs.com>

Right, I was questioning the need for me, in my user code, to keep the
deferred around.  I now see that utils.getProcessOutput keeps a
reference to the deferred it returns, so it can call it later.  So
there's no need for me to make a special effort for it to remain in
memory in my user code.  Makes sense now.  Thanks.



From waterbug at pangalactic.us  Tue Jul  8 20:14:56 2008
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Tue, 08 Jul 2008 20:14:56 -0400
Subject: [Twisted-Python] Re: [Twisted-bugs] pydoctor should put the module
 name at the beginning of the document title
In-Reply-To: <E1KGNE6-00054P-K4@cube.twistedmatrix.com>
References: <E1KGNE6-00054P-K4@cube.twistedmatrix.com>
Message-ID: <48740300.1050303@pangalactic.us>

trac at twistedmatrix.com wrote:
> New submission from TimAllen <tim at commsecure.com.au>:
> [description]

pydoctor is not part of twisted -- it's a separate project,
with its own bug tracker.  See:

http://codespeak.net/~mwh/pydoctor/

Steve



From tim at commsecure.com.au  Tue Jul  8 20:31:50 2008
From: tim at commsecure.com.au (Tim Allen)
Date: Wed, 9 Jul 2008 10:31:50 +1000
Subject: [Twisted-Python] Re: [Twisted-bugs] pydoctor should put the
	module name at the beginning of the document title
In-Reply-To: <48740300.1050303@pangalactic.us>
References: <E1KGNE6-00054P-K4@cube.twistedmatrix.com>
	<48740300.1050303@pangalactic.us>
Message-ID: <20080709103150.2ba53f56@ws35.commsecure.com.au>

Stephen Waterbury <waterbug at pangalactic.us> wrote:
> trac at twistedmatrix.com wrote:
> > New submission from TimAllen <tim at commsecure.com.au>:
> > [description]
> 
> pydoctor is not part of twisted -- it's a separate project,
> with its own bug tracker.  See:
> 
> http://codespeak.net/~mwh/pydoctor/

Quoting from that page:

# Where do I report bugs?
# 
#     There is a pydoctor component in the trac instance on
#     twistedmatrix.com. Assign to mwh.

Looks like I forgot to assign the bug to mwh, though - I'll do that now.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20080709/0e67a97e/attachment.pgp 

From Andy at NewWorldElectric.com  Tue Jul  8 22:16:31 2008
From: Andy at NewWorldElectric.com (Andy Fundinger)
Date: Tue, 8 Jul 2008 22:16:31 -0400
Subject: [Twisted-Python] Twisted Hosting and Twisted in the Cloud
In-Reply-To: <4327dfbd0807081135l49299d9dxa41419c170a07307@mail.gmail.com>
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<4868CD60.7050801@cfl.rr.com>
	<37d49ed40807020850j33094e58rea772b3535742a35@mail.gmail.com>
	<4327dfbd0807081135l49299d9dxa41419c170a07307@mail.gmail.com>
Message-ID: <37d49ed40807081916g56638236r83bd9f909b517be1@mail.gmail.com>

So the model's base or metaclass would handle synchronization and the rest
of the app would have to be effectively stateless with the cloud handling
routing and instantiation inherently?  That would work but be a big step
form the way I'm working today where my model handles permanent storage and
my resource instances handle non-persistent game data internally.  Do you
have a mailing list or wiki where you're laying out ideas?  I'd be
interested to join in on that.

- Andy

On Tue, Jul 8, 2008 at 2:35 PM, Duncan McGreggor <duncan.mcgreggor at gmail.com>
wrote:

> On Wed, Jul 2, 2008 at 10:50 AM, Andy Fundinger
> <Andy at newworldelectric.com> wrote:
> > Cloud support would be nice.  I have a twisted app(a web service to
> > implement a game server for Second Life) that is likely to have a rough
> > scaling curve with bursty usage.  Atm I'm running it on a dedicated
> virtual
> > box with plans to go to EC2 and then multiple EC2s, but a single cloud
> > instance would be better. I've already got a decoupled permanent
> datastore
> > which interfaces to SDB for a cloud should work from that angle too.
> >
> > What would twisted look like on a cloud?  Would the main reactor still be
> > single threaded with threads being distributed or would we have to
> > rearchitect for multiple main reactors by port or path?
>
> Hey Andy, I never replied to your question.
>
> We've been discussing several ways in which this would be done, and so
> far none of them would require application developers to do anything
> too radical. By definition, if you are moving to a new architecture,
> something needs to be re-architected :-) One solution that we've
> prototyped simply involves creating a small "model" object and passing
> it to a new service. In that instance there is very little that a
> developer would have to do. With support for things like
> auto-discovery and messaging, even that step might (in many cases) go
> away and you'd just have to instantiate a particular service.
>
> d
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Blog: http://channel3b.wordpress.com
Second Life Name: Ciemaar Flintoff

What would you do if they outlawed hypothetical questions?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080708/4ddcbfed/attachment.htm 

From jessewoo at gmail.com  Tue Jul  8 22:56:49 2008
From: jessewoo at gmail.com (Wu Zhe)
Date: Wed, 9 Jul 2008 10:56:49 +0800
Subject: [Twisted-Python] synchronous problem
In-Reply-To: <1ff309e60807080749h2ac4a111gf7b7bcb8c572c96a@mail.gmail.com>
References: <8353131e0807080507k4a16d4a4m965f84b37548866f@mail.gmail.com>
	<1ff309e60807080749h2ac4a111gf7b7bcb8c572c96a@mail.gmail.com>
Message-ID: <8353131e0807081956y49f5705elfbcf48d0f32a3240@mail.gmail.com>

On Tue, Jul 8, 2008 at 10:49 PM, Harald Bl?tand <kozneb at gmail.com> wrote:
>
>
> On Tue, Jul 8, 2008 at 2:07 PM, Wu Zhe <jessewoo at gmail.com> wrote:
>>
>> Hi
>>
>> I have a series of files to transfer, each followed by a line sent to
>> specify the file size and crc number. As we can see here I need
>> synchronous behavior, only after the previous file transfer complete,
>> can the for loop step into the next iteration to send the next file
>> via sender.beginFileTransfer. How can i achieve this? Here is the
>> problematic code:
>>
>>    def import_query(self, path_list):
>>        number_of_files = len(path_list)
>>        line = '3#%s' % number_of_files
>>        self.client_instance.sendLine(line)
>>
>>        sender = FileSender()
>>        sender.CHUNK_SIZE = common.chunk_size
>>        for path in path_list:
>>            f = open(path, 'rb')
>>            s = f.read()
>>            filesize = len(s)
>>            crc = crc32(s)
>>            line = '3#%s:%s' % (filesize, crc)
>>            self.client_instance.sendLine(line)
>>
>>            def transfer_completed(lastsent):
>>                f.close()
>>                self.client_instance.setLineMode()
>>
>>            # send the file
>>            self.setRawMode()
>>            d = sender.beginFileTransfer(f, self.client_instance.transport)
>>            d.addCallback(transfer_completed)
>
>
>
> I think I would try this (Python 2.5) -
>
>    @defer.inlineCallbacks
>    def import_query(self, path_list):
>       ...
>       for path in path_list:
>          ...
>          < delete transfer_complete() >
>          ...
>          yield sender.beginFileTransfer(f, self.client_instance.transport)
>          f.close()
>          ...
>
>
> Harald
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>

This is exactly what I want, thank you very much.

-- 
Wu Zhe
Best Regards

From mailing_lists at evotex.ch  Wed Jul  9 12:07:50 2008
From: mailing_lists at evotex.ch (Gabriel Rossetti)
Date: Wed, 09 Jul 2008 18:07:50 +0200
Subject: [Twisted-Python] deferToThread in unittest (trial)?
Message-ID: <4874E256.8080809@evotex.ch>

Hello,

I have a quick question, are there any known 
side-effects/problems/limitations with using deferToThread in unit-tests 
(trial)? I'm actually testing a class that uses a class that has a call 
to deferToThread, the problem is that the callbacks are never called, 
even if the function passed to deferToThread does nothing (so it should 
return).

Thanks,
Gabriel



From andy at thecablelounge.com  Wed Jul  9 15:46:37 2008
From: andy at thecablelounge.com (Andy Gayton)
Date: Wed, 9 Jul 2008 15:46:37 -0400
Subject: [Twisted-Python] Bloody Twisted VFS
In-Reply-To: <20080708203210.25821.1906899401.divmod.xquotient.12560@joule.divmod.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<74e109b70807072012r4e09cc67xdd9be6bf6b29647a@mail.gmail.com>
	<20080708203210.25821.1906899401.divmod.xquotient.12560@joule.divmod.com>
Message-ID: <74e109b70807091246k5a3bb191q4284d40bab43cff6@mail.gmail.com>

On Tue, Jul 8, 2008 at 4:32 PM,  <glyph at divmod.com> wrote:
>
> On 03:12 am, andy at thecablelounge.com wrote:
>>
>> On Sun, Jul 6, 2008 at 3:32 AM, Jonathan Lange <jml at mumak.net> wrote:
>
>>> - "Decorators" like "read-only" and "chroot" could prove useful. Is
>>> there room in the design for such things?
>>
>> Yeah, I'm all for flavouring backends with decorators.
>>
>> That's why I keep trying to sneak this guy through ;)
>>
>> http://twistedmatrix.com/trac/browser/branches/vfs-async-
>> backends-2815/twisted/vfs/_decorator.py
>
> Eehhhhh... I'm glad that name starts with "_" :).  It seems like one of
> those too-clever-by-half solutions to a relatively simple problem, where the
> cleverness will bite you later.  Something like... I would do.

Its a general solution for re-decorating the return result of methods
on decorated objects, which return new instances of themselves.  Which
is particularly handy for decorating tree node like objects, which can
return new child instances.

For example:

root = FilePathNode(FilePath('/tmp'))
root = ReadOnly(root)
root = ForceUser(root, 'nobody')

root.child('foo') # should return a read only node for /tmp/foo, which
creates new files as user nobody.

It'd be awesome to provide support for this in a simpler way.

cheers,
Andy.



From andrew-twisted at puzzling.org  Wed Jul  9 19:34:56 2008
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 10 Jul 2008 09:34:56 +1000
Subject: [Twisted-Python] Bloody Twisted VFS
In-Reply-To: <74e109b70807091246k5a3bb191q4284d40bab43cff6@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<74e109b70807072012r4e09cc67xdd9be6bf6b29647a@mail.gmail.com>
	<20080708203210.25821.1906899401.divmod.xquotient.12560@joule.divmod.com>
	<74e109b70807091246k5a3bb191q4284d40bab43cff6@mail.gmail.com>
Message-ID: <20080709233456.GA9654@steerpike.home.puzzling.org>

Andy Gayton wrote:
[...]
> Its a general solution for re-decorating the return result of methods
> on decorated objects, which return new instances of themselves.  Which
> is particularly handy for decorating tree node like objects, which can
> return new child instances.
> 
> For example:
> 
> root = FilePathNode(FilePath('/tmp'))
> root = ReadOnly(root)
> root = ForceUser(root, 'nobody')
> 
> root.child('foo') # should return a read only node for /tmp/foo, which
> creates new files as user nobody.
> 
> It'd be awesome to provide support for this in a simpler way.

For what it's worth, bzrlib.transport.decorator provides a similar facility
for bzrlib.transport.  It's used to implement e.g. ReadonlyTransportDecorator.
There's also a ChrootTransport, which is essentially a decorator too (although
it doesn't use bzrlib.transport.decorator because the generic decorator facility
didn't provide a sane way to track what the root of the chroot should be).

We also have lots of decorators just for testing, e.g.
FakeNFSTransportDecorator, UnlistableTransportDecorator,
FakeVFATTransportDecorator, etc.

-Andrew.




From rodprice at raytheon.com  Wed Jul  9 21:26:44 2008
From: rodprice at raytheon.com (Rodney D Price)
Date: Wed, 9 Jul 2008 19:26:44 -0600
Subject: [Twisted-Python] twisted and functional programming idioms
Message-ID: <OF4CC5FE74.368A46BA-ON87257482.0004E186-87257482.0007F094@mck.us.ray.com>

I'm just getting started with Twisted, and trying to find
my way around.  I've done quite a bit of functional 
programming (Haskell), where recursion is a very
common idiom.  I keep finding myself heading in that
direction as I try to understand how to use Twisted.
For example, if I wanted to write a loop in Haskell
that woke up once a second and did something, I
might write

main = heartbeat
heartbeat = do
  sleep 1000
  doSomething
  heartbeat

This code first sleeps for one second, then does
something, then calls itself.  (The Haskell compiler
knows how to keep the stack from overflowing here,
in case anyone is wondering.)

So if I wanted to do something similar in Twisted,
my first inclination is to use callLater,

def heartbeat(reactor):
    doSomething()
    reactor.callLater(1, heartbeat, reactor)
reactor.run()

But then my head starts hurting, because I keep 
thinking that I have to set up all the callbacks
before I start the reactor.  This code sets callbacks 
at runtime.  Will that be a problem?

-Rod

P.S.  I know there's probably a function somewhere
in Twisted to do this already, but I'm not asking how
to do this particular thing.  I'm really asking if thinking
in terms of recursion is a useful Twisted idiom.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080709/f97116ff/attachment.htm 

From rodprice at raytheon.com  Wed Jul  9 21:32:47 2008
From: rodprice at raytheon.com (Rodney D Price)
Date: Wed, 9 Jul 2008 19:32:47 -0600
Subject: [Twisted-Python] OSX Leopard version still at 8.0.1?
Message-ID: <OF6F08F9A0.7EAD671F-ON87257482.00079BCD-87257482.00087E4F@mck.us.ray.com>

Is there a problem with 8.1.0 on Leopard (OSX 10.5)?
I ran trial twisted on 8.1.0 and got some errors, but 
being new at Twisted, I'm not sure whether the errors
were real or I just did something wrong.

I'm primarily interested in twisted.word XMPP support.

-Rod

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080709/33ad7c24/attachment.htm 

From mithrandi at mithrandi.net  Wed Jul  9 21:42:21 2008
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 10 Jul 2008 03:42:21 +0200
Subject: [Twisted-Python] twisted and functional programming idioms
In-Reply-To: <OF4CC5FE74.368A46BA-ON87257482.0004E186-87257482.0007F094@mck.us.ray.com>
References: <OF4CC5FE74.368A46BA-ON87257482.0004E186-87257482.0007F094@mck.us.ray.com>
Message-ID: <20080710014220.GA10189@mithrandi.net>

* Rodney D Price <rodprice at raytheon.com> [2008-07-09 19:26:44 -0600]:

> So if I wanted to do something similar in Twisted,
> my first inclination is to use callLater,
> 
> def heartbeat(reactor):
>     doSomething()
>     reactor.callLater(1, heartbeat, reactor)
> reactor.run()
> 
> But then my head starts hurting, because I keep thinking that I have
> to set up all the callbacks before I start the reactor.  This code
> sets callbacks at runtime.  Will that be a problem?

This code should work perfectly; there's nothing wrong with invoking
callLater while the reactor is running.

> P.S.  I know there's probably a function somewhere in Twisted to do
> this already, but I'm not asking how to do this particular thing.  I'm
> really asking if thinking in terms of recursion is a useful Twisted
> idiom.

LoopingCall is the already-implemented version of this. I'm not really
sure if thinking in terms of recursion is a useful Twisted idiom,
though. On the one hand, Python doesn't handle lots of recursion very
well; on the other hand, this isn't really Python function recursion.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20080710/06774ae6/attachment.pgp 

From glyph at divmod.com  Wed Jul  9 22:07:03 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 10 Jul 2008 02:07:03 -0000
Subject: [Twisted-Python] OSX Leopard version still at 8.0.1?
In-Reply-To: <OF6F08F9A0.7EAD671F-ON87257482.00079BCD-87257482.00087E4F@mck.us.ray.com>
References: <OF6F08F9A0.7EAD671F-ON87257482.00079BCD-87257482.00087E4F@mck.us.ray.com>
Message-ID: <20080710020703.25821.1979763326.divmod.xquotient.12617@joule.divmod.com>


On 01:32 am, rodprice at raytheon.com wrote:
>Is there a problem with 8.1.0 on Leopard (OSX 10.5)?
>I ran trial twisted on 8.1.0 and got some errors, but
>being new at Twisted, I'm not sure whether the errors
>were real or I just did something wrong.

Whenever reporting a problem (even if it might be a known problem) it's 
best to include a copy of the errors that were generated.  Then we can 
easily compare them to the known errors instead of guessing :).

MacOS X is a supported platform, however: see 
http://buildbot.twistedmatrix.com/builders/osx10.5-py2.5-select



From andy at thecablelounge.com  Wed Jul  9 22:24:38 2008
From: andy at thecablelounge.com (Andy Gayton)
Date: Wed, 9 Jul 2008 22:24:38 -0400
Subject: [Twisted-Python] Bloody Twisted VFS
In-Reply-To: <20080709233456.GA9654@steerpike.home.puzzling.org>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<74e109b70807072012r4e09cc67xdd9be6bf6b29647a@mail.gmail.com>
	<20080708203210.25821.1906899401.divmod.xquotient.12560@joule.divmod.com>
	<74e109b70807091246k5a3bb191q4284d40bab43cff6@mail.gmail.com>
	<20080709233456.GA9654@steerpike.home.puzzling.org>
Message-ID: <74e109b70807091924w779a261chd4d4f7f61fde16a1@mail.gmail.com>

On Wed, Jul 9, 2008 at 7:34 PM, Andrew Bennetts
<andrew-twisted at puzzling.org> wrote:
> Andy Gayton wrote:
> [...]
>> Its a general solution for re-decorating the return result of methods
>> on decorated objects, which return new instances of themselves.  Which
>> is particularly handy for decorating tree node like objects, which can
>> return new child instances.
>>
>> For example:
>>
>> root = FilePathNode(FilePath('/tmp'))
>> root = ReadOnly(root)
>> root = ForceUser(root, 'nobody')
>>
>> root.child('foo') # should return a read only node for /tmp/foo, which
>> creates new files as user nobody.
>>
>> It'd be awesome to provide support for this in a simpler way.
>
> For what it's worth, bzrlib.transport.decorator provides a similar facility
> for bzrlib.transport.  It's used to implement e.g. ReadonlyTransportDecorator.
> There's also a ChrootTransport, which is essentially a decorator too (although
> it doesn't use bzrlib.transport.decorator because the generic decorator facility
> didn't provide a sane way to track what the root of the chroot should be).

I'm likely over looking a few things.  Just hacked this together after
reading over TransportDecorator for a couple of minutes.  It's
possible that TransportDecorator could be implemented with vfs's
Decorator helper, with something along the lines of:

class TransportDecorator(twisted.vfs._decorator.Decorator):
    def __init__(self, url, _decorated=None):
        prefix = self._get_url_prefix()
        if not url.startswith(prefix):
            raise ValueError(
                "url %r doesn't start with decorator prefix %r" % \
                (url, prefix))
        decorated_url = url[len(prefix):]
        if _decorated is None:
             _decorated = get_transport(decorated_url)
        super(TransportDecorator, self).__init__(
            _decorated, factoryMethods=['clone'])

    def abspath(self, relpath):
        return self._get_url_prefix() + self.target.abspath(relpath)

    def external_url(self):
        return self._get_url_prefix() + self.target.external_url()

    def _get_url_prefix(self):
        raise NotImplementedError(self._get_url_prefix)

A key difference to this compared to the verbose approach in bzrlib,
is that the above object isn't an instance of Transport.  So far I've
handled this with zope.interface's.  The above decorator could say
that it implements(ITransport).



From screwtape at froup.com  Wed Jul  9 22:44:48 2008
From: screwtape at froup.com (Tim Allen)
Date: Thu, 10 Jul 2008 12:44:48 +1000
Subject: [Twisted-Python] OSX Leopard version still at 8.0.1?
In-Reply-To: <20080710020703.25821.1979763326.divmod.xquotient.12617@joule.divmod.com>
References: <OF6F08F9A0.7EAD671F-ON87257482.00079BCD-87257482.00087E4F@mck.us.ray.com>
	<20080710020703.25821.1979763326.divmod.xquotient.12617@joule.divmod.com>
Message-ID: <20080710024448.GD2980@thristian.org>

On Thu, Jul 10, 2008 at 02:07:03AM -0000, glyph at divmod.com wrote:
> MacOS X is a supported platform, however: see  
> http://buildbot.twistedmatrix.com/builders/osx10.5-py2.5-select

Looking at that page, it says both:

# Builder: osx10.5-py2.5-select

...and:

OS X Server 10.4.7

Surely one of those must be wrong?



From jml at mumak.net  Wed Jul  9 23:05:08 2008
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 10 Jul 2008 13:05:08 +1000
Subject: [Twisted-Python] Re: AMP compliance tests
In-Reply-To: <d06a5cd30806232257t7f2fa7cfo9afe6dde74a9dd5b@mail.gmail.com>
References: <d06a5cd30806232257t7f2fa7cfo9afe6dde74a9dd5b@mail.gmail.com>
Message-ID: <d06a5cd30807092005p37699184gc3ce609440ee9592@mail.gmail.com>

On Tue, Jun 24, 2008 at 3:57 PM, Jonathan Lange <jml at mumak.net> wrote:
> Hello all,
>
> Where can I find a set of automated tests that check that a particular
> AMP implementation is complete?
>
> I seem to recall someone on #twisted mentioning that they were working
> on such a suite.
>

It's been a few weeks -- I'm guessing the answer is "no".

jml



From nico at teknico.net  Thu Jul 10 02:42:47 2008
From: nico at teknico.net (Nicola Larosa)
Date: Thu, 10 Jul 2008 08:42:47 +0200
Subject: [Twisted-Python] Re: Re: Twisted Hosting and Twisted in the Cloud
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<87wsjwe2by.fsf@softax.com.pl>
	<4327dfbd0807081249o6759ad9fg9e80b1b8d954d006@mail.gmail.com>
Message-ID: <200807100643.m6A6hlP0019610@smtpi1.ngi.it>

Duncan McGreggor wrote:
> If hosting providers start offering explicit support for Twisted,

Some already did:

http://unbit.it/listino_application_server/ (bottom)

Twisted's even on the homeopage:

http://unbit.it/ (lower left)

I'm just a customer, no stock options nor anything else. :-)

-- 
Nicola Larosa - http://www.tekNico.net/

Microsoft has managed to besmirch the entire ISO process, which is
now effectively worthless. [...] ISO has turned from being a kind
of gold standard, into a worthless rubber stamp wielded at the
behest of the rich and ruthless. - Glyn Moody, Marzo 2008





From glyph at divmod.com  Thu Jul 10 05:10:20 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 10 Jul 2008 09:10:20 -0000
Subject: [Twisted-Python] Re: AMP compliance tests
In-Reply-To: <d06a5cd30807092005p37699184gc3ce609440ee9592@mail.gmail.com>
References: <d06a5cd30806232257t7f2fa7cfo9afe6dde74a9dd5b@mail.gmail.com>
	<d06a5cd30807092005p37699184gc3ce609440ee9592@mail.gmail.com>
Message-ID: <20080710091020.25821.111199561.divmod.xquotient.12620@joule.divmod.com>


On 03:05 am, jml at mumak.net wrote:
>On Tue, Jun 24, 2008 at 3:57 PM, Jonathan Lange <jml at mumak.net> wrote:
>>Hello all,
>>
>>Where can I find a set of automated tests that check that a particular
>>AMP implementation is complete?
>>
>>I seem to recall someone on #twisted mentioning that they were working
>>on such a suite.
>
>It's been a few weeks -- I'm guessing the answer is "no".

I think the person in question is Michael Schneider, aka "bigdog".  He's 
got a bunch of other projects going now - one of which is 
https://launchpad.net/txcomputegrid - so I'm pretty sure that eventually 
he'll get back to doing compliance-suite stuff.



From drew.smathers at gmail.com  Thu Jul 10 08:24:31 2008
From: drew.smathers at gmail.com (Drew Smathers)
Date: Thu, 10 Jul 2008 08:24:31 -0400
Subject: [Twisted-Python] twisted and functional programming idioms
In-Reply-To: <OF4CC5FE74.368A46BA-ON87257482.0004E186-87257482.0007F094@mck.us.ray.com>
References: <OF4CC5FE74.368A46BA-ON87257482.0004E186-87257482.0007F094@mck.us.ray.com>
Message-ID: <368574aa0807100524t3e8b8a28m326b351818a023e7@mail.gmail.com>

On Wed, Jul 9, 2008 at 9:26 PM, Rodney D Price <rodprice at raytheon.com> wrote:
>
> I'm just getting started with Twisted, and trying to find
> my way around.  I've done quite a bit of functional
> programming (Haskell), where recursion is a very
> common idiom.  I keep finding myself heading in that
> direction as I try to understand how to use Twisted.
> For example, if I wanted to write a loop in Haskell
> that woke up once a second and did something, I
> might write
>
> main = heartbeat
> heartbeat = do
>   sleep 1000
>   doSomething
>   heartbeat
>

Not related to the LoopingCall usage, but please heed Tristan's
warning on recursion: "Python doesn't handle lots of recursion very
well."  You likely already know this, but there is no last call
optimization (aka tail recursion) in Python.

-- 
\\\\\/\"/\\\\\\\\\\\
\\\\/ // //\/\\\\\\\
\\\/ \\// /\ \/\\\\
\\/ /\/ / /\/ /\ \\\
\/ / /\/ /\ /\\\ \\
/ /\\\ /\\\ \\\\\/\
\/\\\\\/\\\\\/\\\\\\
 d.p.s



From twisted at ralphm.ik.nu  Thu Jul 10 12:05:09 2008
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Thu, 10 Jul 2008 18:05:09 +0200
Subject: [Twisted-Python] domish.Element comparison not working
In-Reply-To: <48738AA7.7060004@evotex.ch>
References: <487374AE.9090705@evotex.ch> <48738AA7.7060004@evotex.ch>
Message-ID: <48763335.9050801@ralphm.ik.nu>

Gabriel Rossetti wrote:
> [..]
>
> I went and looked and domish.Element has no __eq_(_) and __ne__() 
> methods, here's a patch adding them, could someone review them and add 
> them to the trunk? I made it against the trunk.

Thanks for your contribution! Could you create a ticket for this and 
attach your patch? Acceptance also relies on there being unittests, so 
if you could provide those as well, that would speed up the process.

ralphm



From mailing_lists at evotex.ch  Fri Jul 11 04:46:36 2008
From: mailing_lists at evotex.ch (Gabriel Rossetti)
Date: Fri, 11 Jul 2008 10:46:36 +0200
Subject: [Twisted-Python] domish.Element comparison not working
In-Reply-To: <48763335.9050801@ralphm.ik.nu>
References: <487374AE.9090705@evotex.ch> <48738AA7.7060004@evotex.ch>
	<48763335.9050801@ralphm.ik.nu>
Message-ID: <48771DEC.1090907@evotex.ch>

Ralph Meijer wrote:
> Gabriel Rossetti wrote:
>> [..]
>>
>> I went and looked and domish.Element has no __eq_(_) and __ne__() 
>> methods, here's a patch adding them, could someone review them and 
>> add them to the trunk? I made it against the trunk.
>
> Thanks for your contribution! Could you create a ticket for this and 
> attach your patch? Acceptance also relies on there being unittests, so 
> if you could provide those as well, that would speed up the process.
>
> ralphm
>
Hi Ralph,

You're welcome, it's not much, but I think it's useful. I already did 
file a ticket, it's # 3344, I also already made unit tests.

Gabriel



From exarkun at twistedmatrix.com  Sun Jul 13 00:05:18 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Jul 2008 04:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1215921918.54.991960000@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080713/cfd47258/attachment.htm 

From termim at gmail.com  Sun Jul 13 18:34:47 2008
From: termim at gmail.com (Mikhail Terekhov)
Date: Sun, 13 Jul 2008 18:34:47 -0400
Subject: [Twisted-Python] trial and python 2.5.2?
Message-ID: <487A8307.90908@gmail.com>

Hi,

I'm trying to run trial from twisted-8.1.0 on SuSE-11.0 with python 
2.5.2 and get the following error
(with super and old style classes IMHO). What would be the fix or 
workaround for this?
BTW on SuSE-10.3 with python 2.5.1 everything is OK.

Thank you
Mike


mike at linux-lp:~/python/twisted> tar jxf Twisted-8.1.0.tar.bz2
mike at linux-lp:~/python/twisted> cd Twisted-8.1.0
mike at linux-lp:~/python/twisted/Twisted-8.1.0> ./bin/trial twisted
/home/mike/python/twisted/Twisted-8.1.0/twisted/python/reflect.py:377: 
DeprecationWarning: twisted.flow is unmaintained.
  return __import__(importName)
/home/mike/python/twisted/Twisted-8.1.0/twisted/scripts/test/test_mktap.py:16: 
DeprecationWarning: mktap and related support modules are deprecated as 
of Twisted 8.0.  Use Twisted Application Plugins with the 'twistd' 
command directly, as described in 'Writing a Twisted Application Plugin 
for twistd' chapter of the Developer Guide.
  from twisted.scripts.mktap import run, getid
/home/mike/python/twisted/Twisted-8.1.0/twisted/enterprise/util.py:19: 
DeprecationWarning: twisted.enterprise.util is deprecated since Twisted 
8.0.0.
  category=DeprecationWarning)
/home/mike/python/twisted/Twisted-8.1.0/twisted/test/test_persisted.py:161: 
DeprecationWarning: twisted.persisted.marmalade is deprecated
  from twisted.persisted import marmalade
/home/mike/python/twisted/Twisted-8.1.0/twisted/words/im/__init__.py:8: 
UserWarning: twisted.im will be undergoing a rewrite at some point in 
the future.
  warnings.warn("twisted.im will be undergoing a rewrite at some point 
in the future.")
Traceback (most recent call last):
  File "./bin/trial", line 24, in <module>
    run()
  File 
"/home/mike/python/twisted/Twisted-8.1.0/twisted/scripts/trial.py", line 
361, in run
    test_result = trialRunner.run(suite)
  File 
"/home/mike/python/twisted/Twisted-8.1.0/twisted/trial/runner.py", line 
780, in run
    suite = TrialSuite([test])
  File 
"/home/mike/python/twisted/Twisted-8.1.0/twisted/trial/runner.py", line 
263, in __init__
    super(TrialSuite, self).__init__([suite])
TypeError: super() argument 1 must be type, not classobj
Exception exceptions.TypeError: TypeError("'NoneType' object is not 
callable",) in <bound method Popen3.__del__ of <popen2.Popen3 instance 
at 0x933a78c>> ignored
mike at linux-lp:~/python/twisted/Twisted-8.1.0>
mike at linux-lp:~/python/twisted/Twisted-8.1.0> python --version
Python 2.5.2
mike at linux-lp:~/python/twisted/Twisted-8.1.0>



From exarkun at divmod.com  Sun Jul 13 20:23:31 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 13 Jul 2008 20:23:31 -0400
Subject: [Twisted-Python] trial and python 2.5.2?
In-Reply-To: <487A8307.90908@gmail.com>
Message-ID: <20080714002331.4714.1886023724.divmod.quotient.20092@ohm>

On Sun, 13 Jul 2008 18:34:47 -0400, Mikhail Terekhov <termim at gmail.com> wrote:
>Hi,
>
>I'm trying to run trial from twisted-8.1.0 on SuSE-11.0 with python 2.5.2 
>and get the following error
>(with super and old style classes IMHO). What would be the fix or workaround 
>for this?
>BTW on SuSE-10.3 with python 2.5.1 everything is OK.

Can you look at unittest.py from the standard library on each of these
systems and see if TestSuite is new-style or classic?  Note that it does
not subclass object, but the module has `__metaclass__ = type?, making
all classes that don't subclass something new-style.

TestSuite should be new-style - it is in my Python 2.5.1 installation
and it is in the 2.5 release branch.

Jean-Paul



From termim at gmail.com  Sun Jul 13 21:36:44 2008
From: termim at gmail.com (Mikhail Terekhov)
Date: Sun, 13 Jul 2008 21:36:44 -0400
Subject: [Twisted-Python] Re: trial and python 2.5.2?
In-Reply-To: <20080714002331.4714.1886023724.divmod.quotient.20092@ohm>
References: <487A8307.90908@gmail.com>
	<20080714002331.4714.1886023724.divmod.quotient.20092@ohm>
Message-ID: <g5eaje$l7r$1@ger.gmane.org>

Jean-Paul Calderone wrote:
> 
> Can you look at unittest.py from the standard library on each of these
> systems and see if TestSuite is new-style or classic?  Note that it does
> not subclass object, but the module has `__metaclass__ = type?, making
> all classes that don't subclass something new-style.
> 
> TestSuite should be new-style - it is in my Python 2.5.1 installation
> and it is in the 2.5 release branch.
> 

I found the problem. It was an obsolete package python-unit-1.4.1 from 
the SuSE repository devel:/languages:/python that installed old version
of the unittest.py into site-packages directory and shadowed the correct 
one. Somehow I installed it without even noticing :(
I've asked maintainers of this repository to remove the obsolete beast.

Sorry for the noise.
Mikhail




From mayamatakeshi at gmail.com  Sun Jul 13 23:02:37 2008
From: mayamatakeshi at gmail.com (mayamatakeshi)
Date: Mon, 14 Jul 2008 12:02:37 +0900
Subject: [Twisted-Python] stdio.StandardIO and control keys
Message-ID: <15b9404e0807132002g7f5a39cew887f0a918ea6041f@mail.gmail.com>

Hello,
I've just started learning twisted.
I'm trying to build an utility to connect to a tcp port (telnet-like) and
exchange messages with an application.
I'm using twisted.internet.stdio.StandardIO passing a Protocol to its
constructor (I'm tinkering with the dataforward.py example from the twisted
book).
I'm adding preprocessing to this utility so that I can check what the user
has input before sending it to the peer. So far it is working fine, as I
just have to override the method Protocol.dataReceived. But I'm trying to
add history of previously input strings and for this, I need to check if the
user is pressing control keys (basically 'up' and 'down' keys, but alt,
shift and friends would be nice too).
I'm not sure if this is a twisted related issue, but is it possible to
somehow capture these key presses ? (they are not notified to dataReceived)
Regards,
takeshi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080714/c9e2f18f/attachment.htm 

From duncan.mcgreggor at gmail.com  Mon Jul 14 10:59:27 2008
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Mon, 14 Jul 2008 09:59:27 -0500
Subject: [Twisted-Python] Re: Re: Twisted Hosting and Twisted in the Cloud
In-Reply-To: <200807100643.m6A6hlP0019610@smtpi1.ngi.it>
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<87wsjwe2by.fsf@softax.com.pl>
	<4327dfbd0807081249o6759ad9fg9e80b1b8d954d006@mail.gmail.com>
	<200807100643.m6A6hlP0019610@smtpi1.ngi.it>
Message-ID: <4327dfbd0807140759g3e6aa33akd07c386ba18e698@mail.gmail.com>

On Thu, Jul 10, 2008 at 1:42 AM, Nicola Larosa <nico at teknico.net> wrote:
> Duncan McGreggor wrote:
>> If hosting providers start offering explicit support for Twisted,
>
> Some already did:
>
> http://unbit.it/listino_application_server/ (bottom)
>
> Twisted's even on the homeopage:
>
> http://unbit.it/ (lower left)
>
> I'm just a customer, no stock options nor anything else. :-)

Nicola, that's awesome!

Thanks for the link... this is *definitely* going in the next
"Twiisted in the News" port ;-)

d



From jmp at MIT.EDU  Mon Jul 14 11:59:29 2008
From: jmp at MIT.EDU (Justin Mazzola Paluska)
Date: Mon, 14 Jul 2008 11:59:29 -0400
Subject: [Twisted-Python] trial & ThreadedResolver._cleanup
Message-ID: <20080714155928.GA1504@mit.edu>

Hi,

I?m writing a bunch of unit tests using Twisted?s Trial.  I?ve been
trying to chase down some issues with my code leaving the reactor
unclean.  I think I?ve gotten most of them out of the way, except for
one:

/usr/lib/python2.4/site-packages/twisted/trial/reporter.py:142: twisted.trial.reporter.BrokenTestCaseWarning: REACTOR UNCLEAN! traceback(s) follow: 
  File "/usr/lib/python2.4/site-packages/twisted/trial/util.py", line 72, in _dispatch
    getattr(self, "do_%s" % attr)()
  File "/usr/lib/python2.4/site-packages/twisted/trial/util.py", line 99, in do_cleanPending
    raise PendingTimedCallsError(s)
twisted.trial.util.PendingTimedCallsError: pendingTimedCalls still pending (consider setting twisted.internet.base.DelayedCall.debug = True): <DelayedCall -1219829012 [59.9999289513s] called=0 cancelled=0 ThreadedResolver._cleanup(u'localhost', <Deferred at 0xB74AE46CL>)>

When I run my tests individually (one invocation of trial per test), I
don?t get any errors.  It?s only when I run an entire suite that I get
these errors.

It looks like this is a reported issue
(http://twistedmatrix.com/trac/ticket/2579), but with no fix.

Does anyone know a workaround for this issue?
	?Justin



From mithrandi at mithrandi.net  Mon Jul 14 16:03:15 2008
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 14 Jul 2008 22:03:15 +0200
Subject: [Twisted-Python] Re: Re: Twisted Hosting and Twisted in the Cloud
In-Reply-To: <4327dfbd0807140759g3e6aa33akd07c386ba18e698@mail.gmail.com>
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<87wsjwe2by.fsf@softax.com.pl>
	<4327dfbd0807081249o6759ad9fg9e80b1b8d954d006@mail.gmail.com>
	<200807100643.m6A6hlP0019610@smtpi1.ngi.it>
	<4327dfbd0807140759g3e6aa33akd07c386ba18e698@mail.gmail.com>
Message-ID: <20080714200315.GA11848@mithrandi.net>

* Duncan McGreggor <duncan.mcgreggor at gmail.com> [2008-07-14 09:59:27 -0500]:

> "Twiisted in the News" port ;-)
    ^^^

Whoa, Twisted runs on the Wii now?
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20080714/86fa54bb/attachment.pgp 

From maarten at treewalker.org  Mon Jul 14 16:59:20 2008
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Mon, 14 Jul 2008 22:59:20 +0200
Subject: [Twisted-Python] Re: Re: Twisted Hosting and Twisted in the Cloud
In-Reply-To: <20080714200315.GA11848@mithrandi.net>
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<4327dfbd0807140759g3e6aa33akd07c386ba18e698@mail.gmail.com>
	<20080714200315.GA11848@mithrandi.net>
Message-ID: <200807142259.26337.maarten@treewalker.org>

On Monday 14 July 2008, Tristan Seligmann wrote:
> * Duncan McGreggor <duncan.mcgreggor at gmail.com> [2008-07-14 
09:59:27 -0500]:
> > "Twiisted in the News" port ;-)
>
>     ^^^
>
> Whoa, Twisted runs on the Wii now?

It is possible to run Debian on the Wii nowadays, so Twisted should only be 
an apt-get away...

http://www.gc-linux.org/wiki/WL:whiite-linux

Bye,
		Maarten
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part.
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20080714/f4920bfc/attachment.pgp 

From vvangelovski at gmail.com  Tue Jul 15 09:37:12 2008
From: vvangelovski at gmail.com (Vasil Vangelovski)
Date: Tue, 15 Jul 2008 15:37:12 +0200
Subject: [Twisted-Python] twisted adbapi question
Message-ID: <406b9fda0807150637i56a6ce79j87566b1be25a66f1@mail.gmail.com>

does anyone know why is twisted.enterprise.adbapi.safe deprecated?
What should I use instead?



From exarkun at divmod.com  Tue Jul 15 09:42:11 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 15 Jul 2008 09:42:11 -0400
Subject: [Twisted-Python] twisted adbapi question
In-Reply-To: <406b9fda0807150637i56a6ce79j87566b1be25a66f1@mail.gmail.com>
Message-ID: <20080715134211.29191.1301832197.divmod.quotient.153@ohm>

On Tue, 15 Jul 2008 15:37:12 +0200, Vasil Vangelovski <vvangelovski at gmail.com> wrote:
>does anyone know why is twisted.enterprise.adbapi.safe deprecated?
>What should I use instead?
>

Because it's not safe.  Use bind parameters instead.  Google or your
preferred DB-API 2.0 module should tell you exactly how to do that.

Jean-Paul



From nathan.stocks at gmail.com  Tue Jul 15 16:04:37 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Tue, 15 Jul 2008 14:04:37 -0600
Subject: [Twisted-Python] twisted adbapi question
In-Reply-To: <20080715134211.29191.1301832197.divmod.quotient.153@ohm>
References: <406b9fda0807150637i56a6ce79j87566b1be25a66f1@mail.gmail.com>
	<20080715134211.29191.1301832197.divmod.quotient.153@ohm>
Message-ID: <96c9d6a80807151304m4518c15fq7497f1d27719d62e@mail.gmail.com>

On Tue, Jul 15, 2008 at 7:42 AM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Tue, 15 Jul 2008 15:37:12 +0200, Vasil Vangelovski
> <vvangelovski at gmail.com> wrote:
>>
>> does anyone know why is twisted.enterprise.adbapi.safe deprecated?
>> What should I use instead?
>>
>
> Because it's not safe.  Use bind parameters instead.  Google or your
> preferred DB-API 2.0 module should tell you exactly how to do that.

I wish "[the] DB-API 2.0 module[s]" always provided documentation.
psycopg (when it had a working web site) just pointed to PEP 249.
(Unless you count the short "here's an example" docs that are dated
2002)

http://www.python.org/dev/peps/pep-0249/

</pet peeve>

~ Nathan



From gabriel.rossetti at arimaz.com  Wed Jul 16 05:00:11 2008
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Wed, 16 Jul 2008 11:00:11 +0200
Subject: [Twisted-Python] Deferred.setTimeout is deprecated,
	replacement ideas?
Message-ID: <487DB89B.6040204@arimaz.com>

Hello everyone,

I was going to use Deferred.setTimeout until I saw that it was 
deprecated. Does anyone know why? I found it handy and I find that 
case-per-case replacements tend to be complicated. Does anyone have any 
ideas on how to replace it?

 I have a queue containing read results from I/O, the get() method 
returns a deferred fired when the data arrives (sort of like 
defer.DeferredQueue). Since I need to be able to set a read timeout, 
i.e. if the data doesn't arrive after a certain time, I need to raise an 
exception and remove the deferred from the internal list; the defer's 
timeout would have been handy here :-(.

I was thinking of doing something like this, if data isn't present in 
the data internal list:

d = Deferred()
dc = reactor.callLater(self.timeout, self.__timeoutCallback, d)
d.addCallback(self.__timeoutCanceller)

Then a tuple containing the Deferred ("d"), the DelayedCall ("dc") is 
then put in the internal waiting list. If the timeout doesn't expire 
before the data arrives, then the DelayedCall is canceled, if it does 
expire then the tuple is removed from the queue (potentially slow) and 
an exception is raised.

Is there a better way of doing this? Any ideas?

Thank you,
Gabriel



From skoegl at online.de  Wed Jul 16 05:03:18 2008
From: skoegl at online.de (skoegl at online.de)
Date: Wed, 16 Jul 2008 11:03:18 +0200 (CEST)
Subject: [Twisted-Python] cross service events and why on earth ?
Message-ID: <16935502.19850.1216198998787.JavaMail.webmailer@webmail.1and1.com>

hi,

I have to deal with flash players (I&#39;m deeply ashamed for what I&#39;m doing ;-), and their somewhat cumberstone constraints. 

The main part of the communication is handled via an tcp socket using the amf protocol. But I have to handle &quot;file uploads&quot; via http POST multipart from client to server and sending it back to the flash player since flash only allows domain specific content - no content from the users&#39; file system. 

So my first attempt to solve this big mess was to create a tac like that:

############################################
tac file
############################################

import sys, os

sys.path.append(os.getcwd())

from twisted.application import internet, service

# my custom backend factory subclassed from ServerFactory
from socketManager import SocketManager 

from policySocketFactory import PolicySocketFactory
from twisted.web2 import server, channel, static
from twisted.application import service, strports
from fileupload import Toplevel

application = service.Application(&#39;backend&#39;)

# backend service - all client/server communication should go via that sockets
backendService = internet.TCPServer(8600, SocketManager())
backendService.setServiceParent(application)

# policy service
socketPolicyService = internet.TCPServer(8601, PolicySocketFactory(&#39;socket-policy.xml&#39;))
socketPolicyService.setServiceParent(application)

# http service
site = server.Site(Toplevel())
fileUploadService = strports.service(&#39;tcp:8080&#39;, channel.HTTPFactory(site))
fileUploadService.setServiceParent(application)

############################################

Authentication /Authorization is implemented in the backend service, so I&#39;m searching for a solution to fire some sort of event in the fileUploadService to be handled in the backendService, and to restrict the file upload to already logged in users. I thought about using &quot;inotify&quot; for watching the upload directory, but I would prefer a twisted /pythonic solution. Perhaps someone could give me some advice about what would be a sane way to solve this 2 problems. 

Thank you in advance,

Stefan K&ouml;gl
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080716/99bc7edf/attachment.htm 

From gabriel.rossetti at arimaz.com  Wed Jul 16 05:22:09 2008
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Wed, 16 Jul 2008 11:22:09 +0200
Subject: [Twisted-Python] Deferred.setTimeout is deprecated,	replacement
	ideas?
In-Reply-To: <487DB89B.6040204@arimaz.com>
References: <487DB89B.6040204@arimaz.com>
Message-ID: <487DBDC1.3060408@arimaz.com>


Gabriel Rossetti wrote:
> Hello everyone,
>
> I was going to use Deferred.setTimeout until I saw that it was 
> deprecated. Does anyone know why? I found it handy and I find that 
> case-per-case replacements tend to be complicated. Does anyone have 
> any ideas on how to replace it?
>
> I have a queue containing read results from I/O, the get() method 
> returns a deferred fired when the data arrives (sort of like 
> defer.DeferredQueue). Since I need to be able to set a read timeout, 
> i.e. if the data doesn't arrive after a certain time, I need to raise 
> an exception and remove the deferred from the internal list; the 
> defer's timeout would have been handy here :-(.
>
> I was thinking of doing something like this, if data isn't present in 
> the data internal list:
>
> d = Deferred()
> dc = reactor.callLater(self.timeout, self.__timeoutCallback, d)
> d.addCallback(self.__timeoutCanceller)
>
> Then a tuple containing the Deferred ("d"), the DelayedCall ("dc") is 
> then put in the internal waiting list. If the timeout doesn't expire 
> before the data arrives, then the DelayedCall is canceled, if it does 
> expire then the tuple is removed from the queue (potentially slow) and 
> an exception is raised.
>
> Is there a better way of doing this? Any ideas?
>
> Thank you,
> Gabriel
>
>
I can remove the "d.addCallback(self.__timeoutCanceller)" call since the 
DelayedCall can be canceled by the code that does the waiting list 
processing.



From screwtape at froup.com  Wed Jul 16 08:03:49 2008
From: screwtape at froup.com (Tim Allen)
Date: Wed, 16 Jul 2008 22:03:49 +1000
Subject: [Twisted-Python] Deferred.setTimeout is deprecated,
	replacement ideas?
In-Reply-To: <487DB89B.6040204@arimaz.com>
References: <487DB89B.6040204@arimaz.com>
Message-ID: <20080716120349.GE2980@thristian.org>

On Wed, Jul 16, 2008 at 11:00:11AM +0200, Gabriel Rossetti wrote:
> Hello everyone,
>
> I was going to use Deferred.setTimeout until I saw that it was  
> deprecated. Does anyone know why? I found it handy and I find that  
> case-per-case replacements tend to be complicated. Does anyone have any  
> ideas on how to replace it?

This has (unsurprisingly) come up on the list many times before. Here's
a reasonable representative sample:

    http://thread.gmane.org/gmane.comp.python.twisted/8490

In short, the problem with .setTimeout is that it's a little bit like
shooting the messenger. Imagine you have a script that generates
a report from a long and complicated database query; the code flow might
run something like this:

 - Script asks the database to run its query.
 - Database returns a deferred promising a result.
 - Script calls .setTimeout() on the deferred.
 - The timeout fires, the script gives up and logs an error.
 - Database continues processing, using up CPU and IO resources even
   though the script no longer cares about the result.
 - Database finishes, calls .callback() on the deferred and winds up
   with an AlreadyCalled exception.

The preferred situation is something more like this:

 - Script asks the database to run its query with a particular timeout.
 - Database returns a deferred promising a result.
 - The timeout period elapses, the database realises it hasn't finished
   in time, and so shuts down its query processing and calls .errback()
   on the deferred.
 - Script receives the timeout notification, gives up and logs an error.

The difference is that the thing that returns the deferred is the only
thing that can possibly know how to cancel an operation-in-progress, and
therefore the only thing that can reasonably implement timeout
functionality - deferreds are just the wrong place to put that method.

> I was thinking of doing something like this, if data isn't present in  
> the data internal list:
>
> d = Deferred()
> dc = reactor.callLater(self.timeout, self.__timeoutCallback, d)

[line deleted as per follow-up mail]

> Then a tuple containing the Deferred ("d"), the DelayedCall ("dc") is  
> then put in the internal waiting list. If the timeout doesn't expire  
> before the data arrives, then the DelayedCall is canceled, if it does  
> expire then the tuple is removed from the queue (potentially slow) and  
> an exception is raised.
>
> Is there a better way of doing this? Any ideas?

What you suggest sounds pretty reasonable to me.

Tim Allen



From gabriel.rossetti at arimaz.com  Thu Jul 17 02:44:52 2008
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Thu, 17 Jul 2008 08:44:52 +0200
Subject: [Twisted-Python] Deferred.setTimeout is deprecated,	replacement
	ideas?
In-Reply-To: <20080716120349.GE2980@thristian.org>
References: <487DB89B.6040204@arimaz.com> <20080716120349.GE2980@thristian.org>
Message-ID: <487EEA64.8080409@arimaz.com>


Tim Allen wrote:
> On Wed, Jul 16, 2008 at 11:00:11AM +0200, Gabriel Rossetti wrote:
>   
>> Hello everyone,
>>
>> I was going to use Deferred.setTimeout until I saw that it was  
>> deprecated. Does anyone know why? I found it handy and I find that  
>> case-per-case replacements tend to be complicated. Does anyone have any  
>> ideas on how to replace it?
>>     
>
> This has (unsurprisingly) come up on the list many times before. Here's
> a reasonable representative sample:
>
>     http://thread.gmane.org/gmane.comp.python.twisted/8490
>   
Ok, I'll have a look at that, thanks (more text further down)
> In short, the problem with .setTimeout is that it's a little bit like
> shooting the messenger. Imagine you have a script that generates
> a report from a long and complicated database query; the code flow might
> run something like this:
>
>  - Script asks the database to run its query.
>  - Database returns a deferred promising a result.
>  - Script calls .setTimeout() on the deferred.
>  - The timeout fires, the script gives up and logs an error.
>  - Database continues processing, using up CPU and IO resources even
>    though the script no longer cares about the result.
>  - Database finishes, calls .callback() on the deferred and winds up
>    with an AlreadyCalled exception.
>
> The preferred situation is something more like this:
>
>  - Script asks the database to run its query with a particular timeout.
>  - Database returns a deferred promising a result.
>  - The timeout period elapses, the database realises it hasn't finished
>    in time, and so shuts down its query processing and calls .errback()
>    on the deferred.
>  - Script receives the timeout notification, gives up and logs an error.
>
> The difference is that the thing that returns the deferred is the only
> thing that can possibly know how to cancel an operation-in-progress, and
> therefore the only thing that can reasonably implement timeout
> functionality - deferreds are just the wrong place to put that method.
>
>   
I understand that, but sometimes whatever you're waiting on has no 
timeout mechanism, and it's not doing any processing itself (not like a 
database query), so quitting wouldn't hurt it. I just think maybe 
deprecating it is a bit too harsh, maybe a big warning and 
recommendations would be nicer :-)
>> I was thinking of doing something like this, if data isn't present in  
>> the data internal list:
>>
>> d = Deferred()
>> dc = reactor.callLater(self.timeout, self.__timeoutCallback, d)
>>     
>
> [line deleted as per follow-up mail]
>
>   
>> Then a tuple containing the Deferred ("d"), the DelayedCall ("dc") is  
>> then put in the internal waiting list. If the timeout doesn't expire  
>> before the data arrives, then the DelayedCall is canceled, if it does  
>> expire then the tuple is removed from the queue (potentially slow) and  
>> an exception is raised.
>>
>> Is there a better way of doing this? Any ideas?
>>     
>
> What you suggest sounds pretty reasonable to me.
>   
Ok, thanks!
> Tim Allen
>
>   
Gabriel



From glyph at divmod.com  Thu Jul 17 07:26:45 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 17 Jul 2008 11:26:45 -0000
Subject: [Twisted-Python] Deferred.setTimeout is deprecated,
	replacement  ideas?
In-Reply-To: <487EEA64.8080409@arimaz.com>
References: <487DB89B.6040204@arimaz.com> <20080716120349.GE2980@thristian.org>
	<487EEA64.8080409@arimaz.com>
Message-ID: <20080717112645.25821.1883282285.divmod.xquotient.12944@joule.divmod.com>


On 06:44 am, gabriel.rossetti at arimaz.com wrote:
>I understand that, but sometimes whatever you're waiting on has no 
>timeout mechanism, and it's not doing any processing itself (not like a 
>database query), so quitting wouldn't hurt it. I just think maybe 
>deprecating it is a bit too harsh, maybe a big warning and 
>recommendations would be nicer :-)

Even if you are going to implement your own timeout mechanism, you need 
to do it in a layer that knows about and can compensate for the 
potential for multiple callbacks.  setTimeout's design is an invitation 
to get AlreadyCalledError tracebacks logged in your code, and to screw 
up the internal state of the API generating the Deferred.

In other words, if you have an API without a timeout mechanism, then 
write a layer above it which adds the timeout mechanism and use that.

Frankly, setTimeout has been deprecated too long: deprecating it is not 
too harsh, it is too lenient.  It should have been removed a long time 
ago :).



From proppy at aminche.com  Fri Jul 18 06:31:18 2008
From: proppy at aminche.com (Johan Euphrosine)
Date: Fri, 18 Jul 2008 12:31:18 +0200
Subject: [Twisted-Python] txprotobuf
Message-ID: <730b2b9d0807180331n672a79fv327c0603c9317424@mail.gmail.com>

Hi,

I'm working on a twisted implementation of protocol buffers RPC here:
http://launchpad.net/txprotobuf/
http://bazaar.launchpad.net/~proppy/txprotobuf/master/changes

Feel free to join :)

Twisted:
Twisted is an event-driven networking engine written in
Python and licensed under the MIT license.
http://twistedmatrix.com/trac/

Protocol Buffers:
Protocol Buffers - Google's data interchange format
http://code.google.com/p/protobuf/
-- 
bou ^



From vvangelovski at gmail.com  Fri Jul 18 10:08:03 2008
From: vvangelovski at gmail.com (Vasil Vangelovski)
Date: Fri, 18 Jul 2008 16:08:03 +0200
Subject: [Twisted-Python] Async file access
Message-ID: <406b9fda0807180708i4df1e851g8d77d9fe14aca8ff@mail.gmail.com>

Which is the best practice to read a file asyncrouniously?
Should I just read it with open and return the result in a callback or
is there a lower level API that's more appropriate?



From andrewfr_ice at yahoo.com  Fri Jul 18 13:34:34 2008
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Fri, 18 Jul 2008 10:34:34 -0700 (PDT)
Subject: [Twisted-Python] Stackless Python Examples Revisited Re:
	InlineCallbacks
Message-ID: <224209.23031.qm@web34202.mail.mud.yahoo.com>

Hi Folks:

>Message: 4
>Date: Sat, 19 Apr 2008 11:47:38 -0700 (PDT)
>From: Andrew Francis <andrewfr_ice at yahoo.com>
>Subject: [Twisted-Python] Stackless Python Examples Re: InlineCallback
>    Friendly ?
>To: twisted-python at twistedmatrix.com
>Message-ID: <882470.36243.qm at web34201.mail.mud.yahoo.com>
>Content-Type: text/plain; charset=iso-8859-1

--- Andrew Francis <andrewfr_ice at yahoo.com> wrote:

>Based on Jean-Paul's explanation, here are some code
>snippets showing how to handle other protocols with
>Stackless Python and Twisted. This is a continuation
>of the technique I used in "Adventures" to prevent the
>reactor from deadlocking.

>Currently I am rethinking the techniques - I believe
>there is a way to reduce spawning tasklets - not that
>tasklets are all that expensive....


I have been experimenting with a new technique for tasklets to interact with Twisted protocol instances (the following is essentially what I was pestering the Twisted Team about at PyCon 2008. Sorry guys)

I have been exploring situations where a tasklet rendezvoused with Twisted (as opposed to a Twisted spawning a tasklet to fulfill a request). A lot of WS-BPEL constructs take this form....

In the old system, I ran the server protocol instance in its own tasklet. This was to prevent the reactor from blocking and preventing other tasklets from issuing Twisted calls. In turn, the tasklet and protocol instance/tasklet communicated via a channel. 

With this technique, I do not create an additional tasklet. Rather I pass back a deferred whose callback points to the reminder of the protocol instance's code. 

Although I have not finished testing, this technique seems to be about 20% faster. Again, implementing this is fairly straightforward. Here is a sketch.


class MyRequestHandler(http.Request):

    def __httpWrite__(self, status, message):
        self.setResponseCode(status)
        self.write(message.encode("utf-8"))
        self.finish()
        return


    def process(self):

        """
        create a deferred
        """
        myDeferred = defer.Deferred()
        myDeferred.addCallback(self.processReply)

        
        """
        we need a way for the protocol instance to tell tasklets that a
        connect has been made. Easiest way, just hand the protocol 
        instance a reference
        """
        status, message = \
        MyRequestHandler.someReferenceToProgramme(self.path, \
                                                  self.content.read(), \
                                                  myDeferred)
        if status != http.OK:
           print "ERROR!"
           self.__httpWrite__(status, message)
           myDeferred = None

        """
        if things went well, return a deferred 
        This is a Twisted way to circumvent blocking and waiting 
        for information
        """
        return myDeferred


    """
    the continuation 
    """
    def processReply(self, reply):
        self.__httpWrite__(200, reply[0])
        return


meanwhile, in the tasklet

def tasklet(...):
    .
    .
    .
    deferred = someFunction(somePath)
    # send a message 
    deferred.callback(message)
       
Although PyCon 2008 is over, I still plan to submit a paper that will better explain the various techniques in the "Adventures" talk. I am also writing simpler code to better illustrate the techniques and combine them with other tried-and-true techniques (i.e., Armstrong's blockOn). 

Cheers,
Andrew


      



From glyph at divmod.com  Sat Jul 19 02:57:36 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 19 Jul 2008 06:57:36 -0000
Subject: [Twisted-Python] txprotobuf
In-Reply-To: <730b2b9d0807180331n672a79fv327c0603c9317424@mail.gmail.com>
References: <730b2b9d0807180331n672a79fv327c0603c9317424@mail.gmail.com>
Message-ID: <20080719065736.25821.1874713652.divmod.xquotient.12961@joule.divmod.com>

On 18 Jul, 10:31 am, proppy at aminche.com wrote:
>I'm working on a twisted implementation of protocol buffers RPC here:
>http://launchpad.net/txprotobuf/

Johan, this is awesome!  This is exactly the sort of thing that I had in 
mind when I was suggesting the 'tx' namespace in the first place; I'm so 
glad you've released it.  Although of course I hope that we can subsume 
it into Twisted at some later point, since all the code looks nice and 
TDD... :-)



From exarkun at twistedmatrix.com  Sun Jul 20 00:05:08 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 20 Jul 2008 04:05:08 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1216526708.16.1199206421@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080720/493d4dec/attachment.htm 

From m.otteneder at gmail.com  Sun Jul 20 06:28:57 2008
From: m.otteneder at gmail.com (Michael Otteneder)
Date: Sun, 20 Jul 2008 12:28:57 +0200
Subject: [Twisted-Python] check if user is in channel (twisted.words irc)
Message-ID: <bad04b940807200328u7dca90ct9bfe2fbf9766083@mail.gmail.com>

Hi!
I'm looking for a simple way to check whatever a use with a specific name is
in a channel or not. How could I do this? Im connecting to irc by
subclassign the twisted.words.im.ircsupport.IRCProto class.

Thanks in advance!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080720/f77cc5b5/attachment.htm 

From marek at xivilization.net  Sun Jul 20 07:13:54 2008
From: marek at xivilization.net (Marek Kubica)
Date: Sun, 20 Jul 2008 13:13:54 +0200
Subject: [Twisted-Python] check if user is in channel (twisted.words irc)
In-Reply-To: <bad04b940807200328u7dca90ct9bfe2fbf9766083@mail.gmail.com>
References: <bad04b940807200328u7dca90ct9bfe2fbf9766083@mail.gmail.com>
Message-ID: <20080720131354.446ea009@halmanfloyd.lan.local>

On Sun, 20 Jul 2008 12:28:57 +0200
"Michael Otteneder" <m.otteneder at gmail.com> wrote:

> I'm looking for a simple way to check whatever a use with a specific
> name is in a channel or not. How could I do this? Im connecting to
> irc by subclassign the twisted.words.im.ircsupport.IRCProto class.

You have to issue a NAMES command and implement irc_RPL_NAMREPLY and
irc_RPL_ENDOFNAMES. I'm currently working on some nicer NAMES support
for Words but unfortunately I have quite a lot of things to do, so I'm
lagging a bit behind my original plans.

If you're interested you can take a look at ticket #3275:
<http://twistedmatrix.com/trac/ticket/3275>

regards,
Marek



From peter at sabaini.at  Sun Jul 20 13:49:09 2008
From: peter at sabaini.at (Peter Sabaini)
Date: Sun, 20 Jul 2008 19:49:09 +0200
Subject: [Twisted-Python] t.w.x.d.Element serialization and default
	namespaces
Message-ID: <200807201949.16842.peter@sabaini.at>

Hi,

I'm trying to get to grips with Xish; and theres this annoying little problem: 
through a series of steps I'm getting at an Element who doesn't use the 
default namespace anymore, only some other NS. I am trying to make this other 
NS the default NS for serialization, but without much luck.

For example:

>>> from twisted.words.xish import domish
>>> e=domish.Element(("foons", "foo"), defaultUri="defuri", 
localPrefixes={"f":"foons"} )
>>> e.addElement(("foons", "bar"))
<twisted.words.xish.domish.Element object at 0x820840c>
>>> e.toXml()
u"<f:foo xmlns='defuri' xmlns:f='foons'><f:bar/></f:foo>"

I'd like the output to be something like "<foo><bar/></foo>" -- thats shorter 
and prettier.

Am I making any sense? Probably I'm missing something pretty obvious...

Thanks in advance,
peter.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part.
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20080720/d9adc948/attachment.pgp 

From newptcai at gmail.com  Mon Jul 21 03:01:49 2008
From: newptcai at gmail.com (Peter Cai)
Date: Mon, 21 Jul 2008 15:01:49 +0800
Subject: [Twisted-Python] Please recommend a RPC system working with twisted.
Message-ID: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>

Hi all,

I'm looking for an RPC system working with twisted.

1. Binary.  I want it run faster than any xml based RPC.

2. Bidirectional.  Unlike  HTTP, on which the client has to poll the sever
for events, the server should "call" the client's method to notify events.

3. C/Python support.  Part of the system shall be written in C.

4. Could easily integrated  with twisted.

Unfortunately, there seems no such resolution existed.  So maybe I have to
give up some requirements.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080721/7c0e77e6/attachment.htm 

From jack-tp at cs.york.ac.uk  Mon Jul 21 06:19:23 2008
From: jack-tp at cs.york.ac.uk (Jack Whitham)
Date: Mon, 21 Jul 2008 11:19:23 +0100
Subject: [Twisted-Python] Converting async to sync code (blocking until
	deferreds fire)
Message-ID: <20080721101923.GA1178@cs.york.ac.uk>


Hi,

What is the best way to convert asynchronous code (non-blocking,
returning deferreds) to synchronous code (blocking)? 

I have a client that is written using Twisted. Most of the methods
within the client object return Deferreds because they send messages
to a server and replies may take some time. This is ideal for the 
wxwidgets GUI that was originally intended to use the client. But
now I want to write test scripts for the server that are synchronous.

For example, the client provides the method "GetBitInfo" which returns
a deferred. The deferred is called back with a list as its parameter
after the server responds to a request. I would like to be able to 
do something like this:

> def GotBitInfo(l): pass
> 
> if __name__ == "__main__":
>     c = Client()
> 
>     d = c.GetBitInfo()
>     d.addCallback(GotBitInfo)
>     waitForDeferred(d)
> 
>     d = c.DoSomethingElse()

In other words, how do I waitForDeferred(), i.e. block until a Deferred fires?

Of course I could rewrite my script as asynchronous code; but what I
really want is a simple Python-like interface for the client code
in order to make things as simple as possible for other users. I don't
want them to *have* to learn how to write asynchronous code - I want
it to be optional. If the snippet of code listed above is possible,
then I can wrap the client methods with code that waits for deferreds
to fire, then returns the values they were called with. Then the users
will have two ways to use the code: asynchronous (for GUIs, proxy
servers, etc.) and synchronous (for test scripts). 

I noticed that there is a _wait method in your trial code that seems to
do what I want, but it looks complicated and I'm not sure it is the
right answer. Its predecessor was also deprecated, which is a bad
sign (looks like "do not do this!!"). Hence I am looking for expert 
advice.

Thanks.


-- 
Jack Whitham
jack at cs.york.ac.uk




From mg at daimi.au.dk  Mon Jul 21 07:05:53 2008
From: mg at daimi.au.dk (Martin Geisler)
Date: Mon, 21 Jul 2008 13:05:53 +0200
Subject: [Twisted-Python] Re: Converting async to sync code (blocking until
	deferreds fire)
References: <20080721101923.GA1178@cs.york.ac.uk>
Message-ID: <g82zlob8pke.fsf@celano.unix.zurich.ibm.com>

Jack Whitham <jack-tp at cs.york.ac.uk> writes:

Hello!

> What is the best way to convert asynchronous code (non-blocking,
> returning deferreds) to synchronous code (blocking)?
>
> I have a client that is written using Twisted. Most of the methods
> within the client object return Deferreds because they send messages
> to a server and replies may take some time. This is ideal for the
> wxwidgets GUI that was originally intended to use the client. But
> now I want to write test scripts for the server that are
> synchronous.

You mention Trial below and I think using it is both the easies and
the most correct way to test code using Deferreds.

You simply return your Deferred from your test case and Trial waits on
it to determine if the test passed or failed.

I like this tutorial for Trial: http://ln-s.net/24:F

-- 
Martin Geisler

VIFF (Virtual Ideal Functionality Framework) brings easy and efficient
SMPC (Secure Multi-Party Computation) to Python. See: http://viff.dk/.




From p.mayers at imperial.ac.uk  Mon Jul 21 07:12:34 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 21 Jul 2008 12:12:34 +0100
Subject: [Twisted-Python] Converting async to sync code (blocking until
	deferreds fire)
In-Reply-To: <20080721101923.GA1178@cs.york.ac.uk>
References: <20080721101923.GA1178@cs.york.ac.uk>
Message-ID: <48846F22.9090600@imperial.ac.uk>

Jack Whitham wrote:
> Hi,
> 
> What is the best way to convert asynchronous code (non-blocking,
> returning deferreds) to synchronous code (blocking)? 

Don't.

> 
> I have a client that is written using Twisted. Most of the methods
> within the client object return Deferreds because they send messages
> to a server and replies may take some time. This is ideal for the 
> wxwidgets GUI that was originally intended to use the client. But
> now I want to write test scripts for the server that are synchronous.
> 
> For example, the client provides the method "GetBitInfo" which returns
> a deferred. The deferred is called back with a list as its parameter
> after the server responds to a request. I would like to be able to 
> do something like this:
> 
>> def GotBitInfo(l): pass
>>
>> if __name__ == "__main__":
>>     c = Client()
>>
>>     d = c.GetBitInfo()
>>     d.addCallback(GotBitInfo)
>>     waitForDeferred(d)
>>
>>     d = c.DoSomethingElse()
> 
> In other words, how do I waitForDeferred(), i.e. block until a Deferred fires?

You've asked a complicated question, to which I'm sure you'll get other 
answers. A very short answer is "you don't, the reactor must not block". 
There are ways to achieve this, most of which make it *look* like the 
reactor blocked when it really didn't.

I had the same desire at one point, to make the code "look" simple so 
that others could use it. I have come to the conclusion that was a 
mistake; trying to hide the underlying async behaviour can actually be 
counter-productive.

You could use inlineCallbacks and python2.5 generators, which is a style 
I swing between really liking and worrying about:

from twisted.internet import defer

@defer.inlineCallbacks
def main():
     c = Client()

     # execution of the generator is paused here until the
     # deferred you've just yielded is callback'ed
     r = yield c.GetBitInfo()

     if r:
         # "r" now contains the value of the callback
         pass

     # optionally
     reactor.callLater(0.1, reactor.stop)

if __name__=='__main__':
     from twisted.internet import reactor
     reactor.addSystemEventTrigger('after', 'startup', main)
     reactor.run()

There are other approaches using Stackless, greenlets and running the 
reactor in a thread (shudder). For greenlets you might look at:

https://launchpad.net/corotwine/



From kent.brake at gmail.com  Mon Jul 21 08:21:37 2008
From: kent.brake at gmail.com (James Brake)
Date: Mon, 21 Jul 2008 12:21:37 -0000
Subject: [Twisted-Python] James Brake has invited you to join Friendster
Message-ID: <71a4kd$mt7dls@c350a.gbxsc.friendster.com>

You're invited to join James Brake's network of friends. 

By joining Friendster, you can reconnect with old
friends, meet new friends, start a blog, build a custom
profile, keep track of birthdays, and so
much more!

You can even stay in touch if you move away, switch
email addresses, or lose your mobile phone.

Click below to join James's network.

http://www.friendster.com/join.php?inviteref=72570452&amp;invite=-8C6ksHVjnPyAP1IYBqmBORBIRUd7Trk-6sLG0nfJrw*&amp;lang=en-US

*****************************************************************
If you do not wish to receive notification emails from Friendster, please click below:
http://www.friendster.com/blockemails.php?invite=dHdpc3RlZC1weXRob25AdHdpc3RlZG1hdHJpeC5jb20*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080721/19eb53a5/attachment.htm 

From dripton at ripton.net  Mon Jul 21 09:18:00 2008
From: dripton at ripton.net (David Ripton)
Date: Mon, 21 Jul 2008 06:18:00 -0700
Subject: [Twisted-Python] Please recommend a RPC system working with
	twisted.
In-Reply-To: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>
References: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>
Message-ID: <20080721131800.GA11544@vidar.dreamhost.com>

On 2008.07.21 15:01:49 +0800, Peter Cai wrote:
> I'm looking for an RPC system working with twisted.
> 
> 1. Binary.  I want it run faster than any xml based RPC.
> 
> 2. Bidirectional.  Unlike  HTTP, on which the client has to poll the sever
> for events, the server should "call" the client's method to notify events.
> 
> 3. C/Python support.  Part of the system shall be written in C.
> 
> 4. Could easily integrated  with twisted.

Twisted AMP meets all your requirements except C support, which you
could probably add.  (Or maybe avoid adding by using some other way
to bridge C computing code with Python network code, like ctypes.)

Also take a look at Google's Protocol Buffers, which lacks C support but
has C++ support.  A Twisted version called txprotobuf was recently
announced.  (Note that Protocol Buffers isn't really a full RPC system,
just the serialization part.)

I think combining these two might work nicely, though I haven't tried it
yet.

-- 
David Ripton    dripton at ripton.net



From radix at twistedmatrix.com  Mon Jul 21 09:28:56 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 21 Jul 2008 09:28:56 -0400
Subject: [Twisted-Python] Please recommend a RPC system working with
	twisted.
In-Reply-To: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>
References: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>
Message-ID: <60ed19d40807210628q1b7507e7tdd0739fda94b7ffa@mail.gmail.com>

On Mon, Jul 21, 2008 at 3:01 AM, Peter Cai <newptcai at gmail.com> wrote:
> Hi all,
>
> I'm looking for an RPC system working with twisted.
>
> 1. Binary.  I want it run faster than any xml based RPC.
>
> 2. Bidirectional.  Unlike  HTTP, on which the client has to poll the sever
> for events, the server should "call" the client's method to notify events.
>
> 3. C/Python support.  Part of the system shall be written in C.
>
> 4. Could easily integrated  with twisted.
>
> Unfortunately, there seems no such resolution existed.  So maybe I have to
> give up some requirements.

twisted.protocols.amp looks like the closest thing: it's a very
simple, efficient protocol for remote procedure calls. I can't point
you directly at a C implementation, but I think there may be a C++
implementation somewhere. In any case, it would be pretty simple to
implement.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From esteve at sindominio.net  Mon Jul 21 09:59:12 2008
From: esteve at sindominio.net (Esteve Fernandez)
Date: Mon, 21 Jul 2008 15:59:12 +0200
Subject: [Twisted-Python] txAMQP released
Message-ID: <200807211559.13095.esteve@sindominio.net>

Hi all,

I'm pleased to announce that Fluidinfo [1] is releasing a Twisted compatible 
AMQP stack built on the Python Qpid library.

Download from http://foss.fluidinfo.com

We've been using it for a while at Fluidinfo and have converted all the
Qpid tests to use it, so it should be considered fairly stable.

Although we'll try to keep it in sync with Qpid's stable releases, we can't
promise to track the trunk due to lack of resources.

Feedback and contributions will be greatly appreciated! :-)

Cheers.

PS: I don't know which license is the most appropiate to make it compatible
with Qpid and Twisted, so I guess the ASL should suffice.

[1] - Fluidinfo - http://www.fluidinfo.com



From barrywark at gmail.com  Mon Jul 21 12:10:07 2008
From: barrywark at gmail.com (Barry Wark)
Date: Mon, 21 Jul 2008 09:10:07 -0700
Subject: [Twisted-Python] Converting async to sync code (blocking until
	deferreds fire)
In-Reply-To: <20080721101923.GA1178@cs.york.ac.uk>
References: <20080721101923.GA1178@cs.york.ac.uk>
Message-ID: <cd7634ce0807210910u2d1f54ffmece3a2ee4f9c7ec6@mail.gmail.com>

You might take a look at
twisted.internet.threads.blockingCallFromThread (version >=8.0, I
believe). I realize that it's not the favored solution by many of the
Twisted developers, but it's used succesfully in the IPython project
(which is where I came across it) to create the impression of a
blocking client on top of non-blocking Twisted code.

Barry

On Mon, Jul 21, 2008 at 3:19 AM, Jack Whitham <jack-tp at cs.york.ac.uk> wrote:
>
> Hi,
>
> What is the best way to convert asynchronous code (non-blocking,
> returning deferreds) to synchronous code (blocking)?
>
> I have a client that is written using Twisted. Most of the methods
> within the client object return Deferreds because they send messages
> to a server and replies may take some time. This is ideal for the
> wxwidgets GUI that was originally intended to use the client. But
> now I want to write test scripts for the server that are synchronous.
>
> For example, the client provides the method "GetBitInfo" which returns
> a deferred. The deferred is called back with a list as its parameter
> after the server responds to a request. I would like to be able to
> do something like this:
>
>> def GotBitInfo(l): pass
>>
>> if __name__ == "__main__":
>>     c = Client()
>>
>>     d = c.GetBitInfo()
>>     d.addCallback(GotBitInfo)
>>     waitForDeferred(d)
>>
>>     d = c.DoSomethingElse()
>
> In other words, how do I waitForDeferred(), i.e. block until a Deferred fires?
>
> Of course I could rewrite my script as asynchronous code; but what I
> really want is a simple Python-like interface for the client code
> in order to make things as simple as possible for other users. I don't
> want them to *have* to learn how to write asynchronous code - I want
> it to be optional. If the snippet of code listed above is possible,
> then I can wrap the client methods with code that waits for deferreds
> to fire, then returns the values they were called with. Then the users
> will have two ways to use the code: asynchronous (for GUIs, proxy
> servers, etc.) and synchronous (for test scripts).
>
> I noticed that there is a _wait method in your trial code that seems to
> do what I want, but it looks complicated and I'm not sure it is the
> right answer. Its predecessor was also deprecated, which is a bad
> sign (looks like "do not do this!!"). Hence I am looking for expert
> advice.
>
> Thanks.
>
>
> --
> Jack Whitham
> jack at cs.york.ac.uk
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From newptcai at gmail.com  Mon Jul 21 22:16:46 2008
From: newptcai at gmail.com (Peter Cai)
Date: Tue, 22 Jul 2008 10:16:46 +0800
Subject: [Twisted-Python] Please recommend a RPC system working with
	twisted.
In-Reply-To: <20080721131800.GA11544@vidar.dreamhost.com>
References: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>
	<20080721131800.GA11544@vidar.dreamhost.com>
Message-ID: <befee6d80807211916y7f191ab7ia0aad60977a1498f@mail.gmail.com>

Thanks.

I've done some research but seems that AMP does not have any C or CPP
implementation.

As described in this thread, the python implementation of Google Buffer is
not very mature, that's why I have gave it up.

https://groups.google.com/group/protobuf/browse_thread/thread/9acb7638e1f5ff61/2fc640fd1d3f98b8?lnk=gst&q=python

I think I shall try to make ICE work with twisted, although thread
synchronization might be a problem.

BTW : If you are interested in RPC, have a look at

http://zeroc.com/ice.html


On Mon, Jul 21, 2008 at 9:18 PM, David Ripton <dripton at ripton.net> wrote:

> On 2008.07.21 15:01:49 +0800, Peter Cai wrote:
> > I'm looking for an RPC system working with twisted.
> >
> > 1. Binary.  I want it run faster than any xml based RPC.
> >
> > 2. Bidirectional.  Unlike  HTTP, on which the client has to poll the
> sever
> > for events, the server should "call" the client's method to notify
> events.
> >
> > 3. C/Python support.  Part of the system shall be written in C.
> >
> > 4. Could easily integrated  with twisted.
>
> Twisted AMP meets all your requirements except C support, which you
> could probably add.  (Or maybe avoid adding by using some other way
> to bridge C computing code with Python network code, like ctypes.)
>
> Also take a look at Google's Protocol Buffers, which lacks C support but
> has C++ support.  A Twisted version called txprotobuf was recently
> announced.  (Note that Protocol Buffers isn't really a full RPC system,
> just the serialization part.)
>
> I think combining these two might work nicely, though I haven't tried it
> yet.
>
> --
> David Ripton    dripton at ripton.net
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
?????????????, ??????????????????, ????????????
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080722/7f14719b/attachment.htm 

From glyph at divmod.com  Mon Jul 21 23:01:09 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 22 Jul 2008 03:01:09 -0000
Subject: [Twisted-Python] Please recommend a RPC system working with
	twisted.
In-Reply-To: <befee6d80807211916y7f191ab7ia0aad60977a1498f@mail.gmail.com>
References: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>
	<20080721131800.GA11544@vidar.dreamhost.com>
	<befee6d80807211916y7f191ab7ia0aad60977a1498f@mail.gmail.com>
Message-ID: <20080722030109.25821.1281976501.divmod.xquotient.12982@joule.divmod.com>

On 02:16 am, newptcai at gmail.com wrote:
>I've done some research but seems that AMP does not have any C or CPP
>implementation.

>I think I shall try to make ICE work with twisted, although thread
>synchronization might be a problem.

In my humble opinion, implementing AMP in C would be a lot easier than 
dealing with thread synchronization issues.  The benefits of Twisted 
will evaporate pretty quickly once you are in that territory.

If I had more than 30 seconds to write this reply, I'd probably write it 
myself to prove the point ;).



From jack-tp at cs.york.ac.uk  Tue Jul 22 10:22:33 2008
From: jack-tp at cs.york.ac.uk (Jack Whitham)
Date: Tue, 22 Jul 2008 15:22:33 +0100
Subject: [Twisted-Python] Converting async to sync code (blocking until
	deferreds fire)
In-Reply-To: <48846F22.9090600@imperial.ac.uk>
References: <20080721101923.GA1178@cs.york.ac.uk>
	<48846F22.9090600@imperial.ac.uk>
Message-ID: <20080722142233.GA13624@cs.york.ac.uk>


> >What is the best way to convert asynchronous code (non-blocking,
> >returning deferreds) to synchronous code (blocking)? 

Ok, I've considered all three of the suggested solutions, and
I think Phil Mayer's suggestion of "yield" suits my requirements
best. In the hope of helping others with a similar problem I
will summarise the suggestions.

1. t.i.threads.blockingCallFromThread 
   This method blocks until a callback/errback is called,
   but it *doesn't* run the reactor's event loop, so you 
   need at least two threads: one to block, and another to run
   the reactor. Therefore it can only be used to convert async to
   sync code in a multithreaded environment. My programs are single
   threaded so this doesn't work. And as Barry Wark points out,
   threads are not a "favored solution" :).

2. Trial _wait
   twisted.trial.unittest has a _wait method which is used by some
   tests to wait for deferreds to fire. However, the only clean
   way to use this _wait method is to write a test case! If this
   were C++ or Java, this method would be "private" - it's only
   externally accessible because Python doesn't have "private".

3. yield
   Since my program is not multithreaded and not a test case,
   the use of yield is most suitable. Here is how yield is used
   in this context:
   http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.defer.html#inlineCallbacks
   This does have some restrictions, not least that Python 2.5 is
   needed. When you use "yield" in a method, it becomes a 
   generator, with different semantics to a conventional method. 
   Nevertheless, your code *looks* like a sequential program.


I'd like to thank everyone who made a suggestion, this has 
been very helpful!


-- 
Jack Whitham
jack at cs.york.ac.uk




From ddwiggins at advpubtech.com  Tue Jul 22 13:07:22 2008
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Tue, 22 Jul 2008 10:07:22 -0700
Subject: [Twisted-Python] Re: Converting async to sync code (blocking until
	deferreds fire)
In-Reply-To: <20080722142233.GA13624@cs.york.ac.uk>
References: <20080721101923.GA1178@cs.york.ac.uk>	<48846F22.9090600@imperial.ac.uk>
	<20080722142233.GA13624@cs.york.ac.uk>
Message-ID: <g6544b$lsi$1@ger.gmane.org>

Jack Whitham wrote:
> 3. yield
>    Since my program is not multithreaded and not a test case,
>    the use of yield is most suitable. Here is how yield is used
>    in this context:
>    http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.defer.html#inlineCallbacks
>    This does have some restrictions, not least that Python 2.5 is
>    needed. 

If that's a problem for you, there's also a 2.4 equivalent, which I've 
been using successfully.  Check out
http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.defer.html#deferredGenerator 



-- 
Don Dwiggins
Advanced Publishing Technology




From glyph at divmod.com  Tue Jul 22 14:08:25 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 22 Jul 2008 18:08:25 -0000
Subject: [Twisted-Python] Converting async to sync code (blocking until
	deferreds fire)
In-Reply-To: <20080722142233.GA13624@cs.york.ac.uk>
References: <20080721101923.GA1178@cs.york.ac.uk>
	<48846F22.9090600@imperial.ac.uk>
	<20080722142233.GA13624@cs.york.ac.uk>
Message-ID: <20080722180825.25821.1973556522.divmod.xquotient.13203@joule.divmod.com>


On 02:22 pm, jack-tp at cs.york.ac.uk wrote:
>2. Trial _wait
>   twisted.trial.unittest has a _wait method which is used by some
>   tests to wait for deferreds to fire. However, the only clean
>   way to use this _wait method is to write a test case! If this
>   were C++ or Java, this method would be "private" - it's only
>   externally accessible because Python doesn't have "private".

There is no "clean" way to use this method.  The "_" denotes that it 
*is* "private".  Python won't prevent you from accessing it, but we will 
;).  Your program is almost guaranteed to break when you upgrade Twisted 
if you use features which we have specifically said are not for public 
use.



From saketh.bhamidipati at gmail.com  Tue Jul 22 14:17:07 2008
From: saketh.bhamidipati at gmail.com (Saketh)
Date: Tue, 22 Jul 2008 11:17:07 -0700
Subject: [Twisted-Python] Waiting on a Deferred
Message-ID: <65339c410807221117p4d1092bau1a183354bb6e2fc7@mail.gmail.com>

Hello everyone,

Is it possible to call asynchronous methods synchronously?

I'm asking because I have an xmlrpc.XMLRPC server which distributes a
calculation across several remote servers, collects the results in a
DeferredList, and wraps it all inside an xmlrpc_something method. Thus, it
needs to return the result to a web browser synchronously.

[Interface] -- [XMLRPC server] -- [Calculators]

This seems like it would be a common thing, getting the result of a
distributed calculation for a browser client, but I haven't been able to
figure it out. I appreciate any assistance!

Thanks,
Saketh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080722/61eaf0c5/attachment.htm 

From exarkun at divmod.com  Tue Jul 22 14:25:04 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 22 Jul 2008 14:25:04 -0400
Subject: [Twisted-Python] Waiting on a Deferred
In-Reply-To: <65339c410807221117p4d1092bau1a183354bb6e2fc7@mail.gmail.com>
Message-ID: <20080722182504.29191.537798208.divmod.quotient.1069@ohm>

On Tue, 22 Jul 2008 11:17:07 -0700, Saketh <saketh.bhamidipati at gmail.com> wrote:
>Hello everyone,
>
>Is it possible to call asynchronous methods synchronously?
>
>I'm asking because I have an xmlrpc.XMLRPC server which distributes a
>calculation across several remote servers, collects the results in a
>DeferredList, and wraps it all inside an xmlrpc_something method. Thus, it
>needs to return the result to a web browser synchronously.

You don't need to "call asynchronous methods synchronously" to do this.
twisted.web.xmlrpc.XMLRPC.xmlrpc_* methods can return Deferreds.  If they
do, the response to the browser is delayed until the result of the Deferred
is available.

Jean-Paul



From radix at twistedmatrix.com  Tue Jul 22 14:31:39 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 22 Jul 2008 14:31:39 -0400
Subject: [Twisted-Python] Waiting on a Deferred
In-Reply-To: <65339c410807221117p4d1092bau1a183354bb6e2fc7@mail.gmail.com>
References: <65339c410807221117p4d1092bau1a183354bb6e2fc7@mail.gmail.com>
Message-ID: <60ed19d40807221131u191d21c2yaa5e34a41b332f53@mail.gmail.com>

On Tue, Jul 22, 2008 at 2:17 PM, Saketh <saketh.bhamidipati at gmail.com> wrote:
> Hello everyone,
>
> Is it possible to call asynchronous methods synchronously?
>
> I'm asking because I have an xmlrpc.XMLRPC server which distributes a
> calculation across several remote servers, collects the results in a
> DeferredList, and wraps it all inside an xmlrpc_something method. Thus, it
> needs to return the result to a web browser synchronously.

Everything after "thus" here is incorrect. You can return Deferreds
from xmlrpc_something methods.


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From saketh.bhamidipati at gmail.com  Tue Jul 22 19:10:19 2008
From: saketh.bhamidipati at gmail.com (Saketh)
Date: Tue, 22 Jul 2008 16:10:19 -0700
Subject: [Twisted-Python] Waiting on a Deferred
In-Reply-To: <60ed19d40807221131u191d21c2yaa5e34a41b332f53@mail.gmail.com>
References: <65339c410807221117p4d1092bau1a183354bb6e2fc7@mail.gmail.com>
	<60ed19d40807221131u191d21c2yaa5e34a41b332f53@mail.gmail.com>
Message-ID: <65339c410807221610v651a5b1ndb712a9144136385@mail.gmail.com>

It works! It never occurred to me that Twisted might unwrap the Deferred
automatically.

Thank you for your prompt replies!

On Tue, Jul 22, 2008 at 11:31 AM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Tue, Jul 22, 2008 at 2:17 PM, Saketh <saketh.bhamidipati at gmail.com>
> wrote:
> > Hello everyone,
> >
> > Is it possible to call asynchronous methods synchronously?
> >
> > I'm asking because I have an xmlrpc.XMLRPC server which distributes a
> > calculation across several remote servers, collects the results in a
> > DeferredList, and wraps it all inside an xmlrpc_something method. Thus,
> it
> > needs to return the result to a web browser synchronously.
>
> Everything after "thus" here is incorrect. You can return Deferreds
> from xmlrpc_something methods.
>
>
> --
> Christopher Armstrong
> International Man of Twistery
> http://radix.twistedmatrix.com/
> http://twistedmatrix.com/
> http://canonical.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080722/b8744fdb/attachment.htm 

From nextofpumpkin at gmail.com  Wed Jul 23 04:39:19 2008
From: nextofpumpkin at gmail.com (Pump Kin)
Date: Wed, 23 Jul 2008 01:39:19 -0700
Subject: [Twisted-Python] Modifying Conch example
Message-ID: <51a7308f0807230139j6c3f333emc538012b4dee43f7@mail.gmail.com>

Hello! I'm trying to implement the example in the Conch tutorial (
http://twistedmatrix.com/projects/conch/documentation/howto/conch_client.html).
with some modifications.

I want to do the following:

1) Connect to a remote machine using a private key (no password) without
knowing the public key
2) Transfer over some files
3) Issue a series of non-interactive commands (to fire up the scripts I
transferred over)
4) Close the connection


Step 2) I can easily do with a single non-interactive subprocess.Popen()
call to SCP; if there was a way to do it in pure Twisted-Python that would
be great, but i'm not too worried about that.

Step 1) Is really bugging me here; I can't seem to strip the need for
foreknowledge of the public key from the script. I can't easily
programmatically access that information in my use case. I do however have
ready access to the private key and fingerprint for verification. My
modified tutorial scripts just vomit.

Step 3) Is a just a little annoying; The provided tutorial only issues one
command and reads the stdout.  I don't care about stdout in my use-case, but
i do care about issuing a series of commands. i could just issue one long
command with the indivudal subcommands seperated by semicolons (cat blah;
start-script myscript; [etc]) but i'm wondering for curiosity/cleanliness'
sake if there's a way of seperating the commands.

Any help would be much appreciated =]

Regards,

Pumpkin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080723/00787001/attachment.htm 

From jack-tp at cs.york.ac.uk  Wed Jul 23 06:00:55 2008
From: jack-tp at cs.york.ac.uk (Jack Whitham)
Date: Wed, 23 Jul 2008 11:00:55 +0100
Subject: [Twisted-Python] Modifying Conch example
In-Reply-To: <51a7308f0807230139j6c3f333emc538012b4dee43f7@mail.gmail.com>
References: <51a7308f0807230139j6c3f333emc538012b4dee43f7@mail.gmail.com>
Message-ID: <20080723100055.GA24868@cs.york.ac.uk>

On Wed, Jul 23, 2008 at 01:39:19AM -0700, Pump Kin wrote:
> Step 1) Is really bugging me here; I can't seem to strip the need for
> foreknowledge of the public key from the script. I can't easily
> programmatically access that information in my use case. I do however have
> ready access to the private key and fingerprint for verification. My
> modified tutorial scripts just vomit.

I had the same problem. Some new key management features have been 
added to Conch recently, so you now only need the private key:

class ClientUserAuth(userauth.SSHUserAuthClient):
    def getPassword(self, prompt=None):
        return # this says we won't do password authentication

    def getPublicKey(self):
        return self.__getKey().public().blob()

    def getPrivateKey(self):
        return defer.succeed(self.__getKey().keyObject)

    def __getKey(self):
        return keys.Key.fromString(data=
"""-----BEGIN RSA PRIVATE KEY-----
... etc... 
""")


(Although I still get a deprecation warning about signData if 
I do this..)


-- 
Jack Whitham
jack at cs.york.ac.uk




From version5 at gmail.com  Wed Jul 23 10:46:57 2008
From: version5 at gmail.com (nnp)
Date: Wed, 23 Jul 2008 15:46:57 +0100
Subject: [Twisted-Python] Running a HTTP client connection through a SOCKS
	proxy
Message-ID: <28749c0e0807230746y6ed84ffbyee5b10b4e5ee0fff@mail.gmail.com>

Hey,

I'm working on an app at the moment, part of which needs to grab a
page from a website and parse the results. It will have to work in
environments where connections have to be routed through a SOCKSv4
proxy but I can't find any way to specify a proxy using any of the
Twisted classes. Is this possible? I assumed it was seeing as how it
is a fairly common situation but the documentation/API haven't
provided any useful information.

Cheers,
nnp

Btw, my code currently looks like this :

from twisted.web.client import HTTPClientFactory
from twisted.internet import ssl
from twisted.internet import reactor
from twisted.web import client

class BugGetter:

    def __init__(self, url):
        '''
        This class attempts to verify that a bug ID is a legitimate
        '''

        self.url = url
        self.contextFactory = ssl.ClientContextFactory()
        self.scheme, self.host, self.port, path = client._parse(url)

    def getPage(self, bugId):
        self.bugUrl = ''.join([self.url, bugId])
        self.hcf = HTTPClientFactory(self.bugUrl)
        self.hcf.deferred.addCallback(self.parsePage)
        self.hcf.deferred.addErrback(self.errorCallback)

        if scheme == 'https:':
            reactor.connectSSL(self.host, self.port, self.hcf,
self.contextFactory)
        else:
            reactor.connectTCP(self.host, self.port, self.hcf)

        reactor.run()

    def parsePage(self):
        print self.hcf.status
        print self.hcf.message
        reactor.stop()

    def errorCallback(self, failure):
        print failure.getErrorMessage()
        reactor.stop()

bz = Bugzilla('https://bugs.example.org/show_bug.cgi?id=')
bz.getPage('9999')

-- 
http://www.smashthestack.org
http://www.unprotectedhex.com



From version5 at gmail.com  Wed Jul 23 11:07:20 2008
From: version5 at gmail.com (nnp)
Date: Wed, 23 Jul 2008 16:07:20 +0100
Subject: [Twisted-Python] Re: Running a HTTP client connection through a
	SOCKS proxy
In-Reply-To: <28749c0e0807230746y6ed84ffbyee5b10b4e5ee0fff@mail.gmail.com>
References: <28749c0e0807230746y6ed84ffbyee5b10b4e5ee0fff@mail.gmail.com>
Message-ID: <28749c0e0807230807l25509991ye8046fe5dd1530f7@mail.gmail.com>

I just realised web proxy support would be much preferable to SOCKSv4
(long day, very tired)...so...to alter my question....does twisted
have support for proxying connections through a web proxy?

On Wed, Jul 23, 2008 at 3:46 PM, nnp <version5 at gmail.com> wrote:
> Hey,
>
> I'm working on an app at the moment, part of which needs to grab a
> page from a website and parse the results. It will have to work in
> environments where connections have to be routed through a SOCKSv4
> proxy but I can't find any way to specify a proxy using any of the
> Twisted classes. Is this possible? I assumed it was seeing as how it
> is a fairly common situation but the documentation/API haven't
> provided any useful information.
>
> Cheers,
> nnp
>
> Btw, my code currently looks like this :
>
> from twisted.web.client import HTTPClientFactory
> from twisted.internet import ssl
> from twisted.internet import reactor
> from twisted.web import client
>
> class BugGetter:
>
>    def __init__(self, url):
>        '''
>        This class attempts to verify that a bug ID is a legitimate
>        '''
>
>        self.url = url
>        self.contextFactory = ssl.ClientContextFactory()
>        self.scheme, self.host, self.port, path = client._parse(url)
>
>    def getPage(self, bugId):
>        self.bugUrl = ''.join([self.url, bugId])
>        self.hcf = HTTPClientFactory(self.bugUrl)
>        self.hcf.deferred.addCallback(self.parsePage)
>        self.hcf.deferred.addErrback(self.errorCallback)
>
>        if scheme == 'https:':
>            reactor.connectSSL(self.host, self.port, self.hcf,
> self.contextFactory)
>        else:
>            reactor.connectTCP(self.host, self.port, self.hcf)
>
>        reactor.run()
>
>    def parsePage(self):
>        print self.hcf.status
>        print self.hcf.message
>        reactor.stop()
>
>    def errorCallback(self, failure):
>        print failure.getErrorMessage()
>        reactor.stop()
>
> bz = Bugzilla('https://bugs.example.org/show_bug.cgi?id=')
> bz.getPage('9999')
>
> --
> http://www.smashthestack.org
> http://www.unprotectedhex.com
>



-- 
http://www.smashthestack.org
http://www.unprotectedhex.com



From ddwiggins at advpubtech.com  Wed Jul 23 13:35:47 2008
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Wed, 23 Jul 2008 10:35:47 -0700
Subject: [Twisted-Python] Re: Waiting on a Deferred
In-Reply-To: <20080722182504.29191.537798208.divmod.quotient.1069@ohm>
References: <65339c410807221117p4d1092bau1a183354bb6e2fc7@mail.gmail.com>
	<20080722182504.29191.537798208.divmod.quotient.1069@ohm>
Message-ID: <g67q5k$1t6$1@ger.gmane.org>

Jean-Paul Calderone wrote:
> You don't need to "call asynchronous methods synchronously" to do this.
> twisted.web.xmlrpc.XMLRPC.xmlrpc_* methods can return Deferreds.  If they
> do, the response to the browser is delayed until the result of the Deferred
> is available.

So "return defer.succeed(...)" in an xmlrpc_* method is harmless, but 
unnecessary when "..." is immediately available?

-- 
Don Dwiggins
Advanced Publishing Technology




From exarkun at divmod.com  Wed Jul 23 13:42:20 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 23 Jul 2008 13:42:20 -0400
Subject: [Twisted-Python] Re: Waiting on a Deferred
In-Reply-To: <g67q5k$1t6$1@ger.gmane.org>
Message-ID: <20080723174220.29191.286628312.divmod.quotient.1456@ohm>

On Wed, 23 Jul 2008 10:35:47 -0700, Don Dwiggins <ddwiggins at advpubtech.com> wrote:
>Jean-Paul Calderone wrote:
>>You don't need to "call asynchronous methods synchronously" to do this.
>>twisted.web.xmlrpc.XMLRPC.xmlrpc_* methods can return Deferreds.  If they
>>do, the response to the browser is delayed until the result of the Deferred
>>is available.
>
>So "return defer.succeed(...)" in an xmlrpc_* method is harmless, but 
>unnecessary when "..." is immediately available?

When "..." isn't a Deferred, yes.  Both versions have the same outcome.

Jean-Paul



From zooko at zooko.com  Wed Jul 23 18:12:30 2008
From: zooko at zooko.com (zooko)
Date: Wed, 23 Jul 2008 16:12:30 -0600
Subject: [Twisted-Python] ANNOUNCING Allmydata.org "Tahoe",
	the Least-Authority Filesystem, v1.2
Message-ID: <8F5BEB7D-6D4F-402E-BAFE-FA6222C2AE89@zooko.com>

Dear twisted-python at twistedmatrix.com:

This open source storage system is built on top of Twisted.  Twisted  
is great!

Regards,

Zooko


We are pleased to announce the release of version 1.2.0 of the "Tahoe"
Least Authority Filesystem.

The "Tahoe" Least Authority Filesystem is a secure, decentralized,
fault-tolerant filesystem.  All of the source code is available under
a Free Software, Open Source licence (or two).

This filesystem is encrypted and distributed over multiple peers in
such a way it continues to function even when some of the peers are
unavailable, malfunctioning, or malicious.

A one-page explanation of the security and fault-tolerance properties
that it offers is visible at:

http://allmydata.org/source/tahoe/trunk/docs/about.html


This is the successor to Allmydata.org "Tahoe" Least Authority
Filesystem v1.1, which was released June 11, 2008 [1].  This release
fixes a security issue in Tahoe v1.1, fixes a few small issues in the
web interface, adds a "check health" operation for mutable files, and
adds logging/operations/deployment improvements.

See the known_issues.txt file [2] and the NEWS file [3] for details.


COMPATIBILITY

The version 1 branch of Tahoe is used as the basis of the consumer
backup product from Allmydata, Inc. -- http://allmydata.com .

Tahoe v1.2 is fully compatible with Tahoe v1.0.  v1.2 clients produce
files which can be read by v1.0 clients.  v1.2 clients can read files
produced by clients of all versions >= v0.8.  v1.2 servers can serve
v1.0 clients and v1.2 clients can use v1.0 servers.

This is the third release in the version 1 series.  We believe that
this version of Tahoe is stable enough to rely on as a permanent store
of valuable data.  The version 1 branch of Tahoe will be actively
supported and maintained for the forseeable future, and future
versions of Tahoe will retain the ability to read files and
directories produced by Tahoe v1 for the forseeable future.


WHAT IS IT GOOD FOR?

With Tahoe, you can distribute your filesystem across a set of
computers, such that if some of the computers fail or turn out to be
malicious, the filesystem continues to work from the remaining
computers.  You can also share your files with other users, using a
cryptographic capability-based access control scheme.

Because this software is the product of less than two years of active
development, we do not categorically recommend it for the storage of
data which is extremely confidential or precious.  However, we believe
that the combination of erasure coding, strong encryption, and careful
engineering make Tahoe safer than common alternatives, such as RAID,
or traditional backup onto a remote server, removable drive, or tape.

This software comes with extensive unit tests [4], and there are no
known security flaws which would compromise confidentiality or data
integrity.  (For all currently known issues please see the
known_issues.txt file [2].)

This release of Tahoe is suitable for the "friendnet" use case [5] --
it is easy to create a filesystem spread over the computers of you and
your friends so that you can share disk space and share files.


LICENCE

You may use this package under the GNU General Public License, version
2 or, at your option, any later version.  See the file "COPYING.GPL"
[6] for the terms of the GNU General Public License, version 2.

You may use this package under the Transitive Grace Period Public
Licence, version 1.0.  The Transitive Grace Period Public Licence says
that you may distribute proprietary derived works of Tahoe without
releasing the source code of that derived work for up to twelve
months, after which time you are obligated to release the source code
of the derived work under the Transitive Grace Period Public
Licence. See the file "COPYING.TGPPL.html" [7] for the terms of the
Transitive Grace Period Public Licence, version 1.0.

(You may choose to use this package under the terms of either licence,
at your option.)


INSTALLATION

Tahoe works on Linux, Mac OS X, Windows, Cygwin, and Solaris.  For
installation instructions please see "docs/install.html" [8].


HACKING AND COMMUNITY

Please join us on the mailing list [9] to discuss uses of Tahoe.
Patches that extend and improve Tahoe are gratefully accepted -- the
RoadMap page [10] shows the next improvements that we plan to make and
CREDITS [11] lists the names of people who've contributed to the
project.  The wiki Dev page [12] contains resources for hackers.


SPONSORSHIP

Tahoe is sponsored by Allmydata, Inc. [13], a provider of commercial
backup services.  Allmydata, Inc. contributes hardware, software,
ideas, bug reports, suggestions, demands, and money (employing several
allmydata.org Tahoe hackers and instructing them to spend part of
their work time on this free-software project).  Also they distribute
customized t-shirts just for some of our favorite contributors.  We
are eternally grateful!


Zooko O'Whielacronx
on behalf of the allmydata.org team
July 21, 2008
Boulder, Colorado, USA

[1] http://allmydata.org/trac/tahoe/browser/relnotes.txt?rev=2716
[2] http://allmydata.org/trac/tahoe/browser/docs/known_issues.txt
[3] http://allmydata.org/trac/tahoe/browser/NEWS
[4] http://allmydata.org/trac/tahoe/wiki/Dev
[5] http://allmydata.org/trac/tahoe/wiki/UseCases
[6] http://allmydata.org/trac/tahoe/browser/COPYING.GPL
[7] http://allmydata.org/source/tahoe/trunk/COPYING.TGPPL.html
[8] http://allmydata.org/source/tahoe/trunk/docs/install.html
[9] http://allmydata.org/cgi-bin/mailman/listinfo/tahoe-dev
[10] http://allmydata.org/trac/tahoe/roadmap
[11] http://allmydata.org/trac/tahoe/browser/CREDITS?rev=2677
[12] http://allmydata.org/trac/tahoe/wiki/Dev
[13] http://allmydata.com




From nathan.stocks at gmail.com  Wed Jul 23 20:59:13 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Wed, 23 Jul 2008 17:59:13 -0700
Subject: [Twisted-Python] ANNOUNCING Allmydata.org "Tahoe",
	the Least-Authority Filesystem, v1.2
In-Reply-To: <8F5BEB7D-6D4F-402E-BAFE-FA6222C2AE89@zooko.com>
References: <8F5BEB7D-6D4F-402E-BAFE-FA6222C2AE89@zooko.com>
Message-ID: <96c9d6a80807231759n287ac943v50df9ee59bd6f03@mail.gmail.com>

On Wed, Jul 23, 2008 at 3:12 PM, zooko <zooko at zooko.com> wrote:
> WHAT IS IT GOOD FOR?
>
> With Tahoe, you can distribute your filesystem across a set of
> computers, such that if some of the computers fail or turn out to be
> malicious, the filesystem continues to work from the remaining
> computers.  You can also share your files with other users, using a
> cryptographic capability-based access control scheme.

Sooo, if you had several servers in a country that you were at war
with, you could reliably use them as storage via Tahoe?

/amused -- yes, yes, I know there are other use cases...

~ Nathan



From liquidchen at gmail.com  Thu Jul 24 05:30:36 2008
From: liquidchen at gmail.com (=?BIG5?B?s6+83a71?=)
Date: Thu, 24 Jul 2008 17:30:36 +0800
Subject: [Twisted-python] help about create a tcp connection pool using twisted
Message-ID: <efc6adb00807240230n1abedbc5y812935b50c577880@mail.gmail.com>

    Hi, if I want to make a tcp connection pool by twisted, how can I do
that?? I am confuse about what should I keep?? The procotol instance
   or something else, thanks a lot...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080724/b0730a9c/attachment.htm 

From screwtape at froup.com  Thu Jul 24 06:23:31 2008
From: screwtape at froup.com (Tim Allen)
Date: Thu, 24 Jul 2008 20:23:31 +1000
Subject: [Twisted-Python] Re: Running a HTTP client connection through
	a SOCKS proxy
In-Reply-To: <28749c0e0807230807l25509991ye8046fe5dd1530f7@mail.gmail.com>
References: <28749c0e0807230746y6ed84ffbyee5b10b4e5ee0fff@mail.gmail.com>
	<28749c0e0807230807l25509991ye8046fe5dd1530f7@mail.gmail.com>
Message-ID: <20080724102331.GH2980@thristian.org>

On Wed, Jul 23, 2008 at 04:07:20PM +0100, nnp wrote:
> I just realised web proxy support would be much preferable to SOCKSv4
> (long day, very tired)...so...to alter my question....does twisted
> have support for proxying connections through a web proxy?

I believe Twisted doesn't support HTTP proxies of any kind. There is
support for SOCKSv4 in twisted.protocols.socks, but it's not immediately
evident to me how it works.

It seems to me that in an ideal world, there would be some kind of Proxy
class available that would look much like a reactor to the outside
world, but contain all the logic for reading proxy settings from the OS
and making outgoing connections via those configured proxies. One day,
if I get far enough down my list of potential weekend projects, I might
even do it myself.



From version5 at gmail.com  Thu Jul 24 06:49:56 2008
From: version5 at gmail.com (nnp)
Date: Thu, 24 Jul 2008 11:49:56 +0100
Subject: [Twisted-Python] Re: Running a HTTP client connection through a
	SOCKS proxy
In-Reply-To: <20080724102331.GH2980@thristian.org>
References: <28749c0e0807230746y6ed84ffbyee5b10b4e5ee0fff@mail.gmail.com>
	<28749c0e0807230807l25509991ye8046fe5dd1530f7@mail.gmail.com>
	<20080724102331.GH2980@thristian.org>
Message-ID: <28749c0e0807240349s1a522c6dn6a207553e23ad8d9@mail.gmail.com>

Hrm, OK....I'm not sure if I have an odd view of the world or whether
supporting HTTP proxies isn't all that important. Aren't HTTP proxies
fairly common in large organisations and universities?

Looks like I won't be able to use Twisted for this particular project
then. In case anyone is wondering, I solved the problem (of needing
support for access to https sites via a proxy) by using the code found
here http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/456195

As for the socks proxy support....I looked at that and a few other
modules but (unsurprisingly) found no real documentation and seeing as
how I'm new to Twisted I also had no clue how to use the classes.

Cheers,
nnp

On Thu, Jul 24, 2008 at 11:23 AM, Tim Allen <screwtape at froup.com> wrote:
> On Wed, Jul 23, 2008 at 04:07:20PM +0100, nnp wrote:
>> I just realised web proxy support would be much preferable to SOCKSv4
>> (long day, very tired)...so...to alter my question....does twisted
>> have support for proxying connections through a web proxy?
>
> I believe Twisted doesn't support HTTP proxies of any kind. There is
> support for SOCKSv4 in twisted.protocols.socks, but it's not immediately
> evident to me how it works.
>
> It seems to me that in an ideal world, there would be some kind of Proxy
> class available that would look much like a reactor to the outside
> world, but contain all the logic for reading proxy settings from the OS
> and making outgoing connections via those configured proxies. One day,
> if I get far enough down my list of potential weekend projects, I might
> even do it myself.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.smashthestack.org
http://www.unprotectedhex.com



From p.mayers at imperial.ac.uk  Thu Jul 24 07:41:33 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 24 Jul 2008 12:41:33 +0100
Subject: [Twisted-python] help about create a tcp connection pool using
	twisted
In-Reply-To: <efc6adb00807240230n1abedbc5y812935b50c577880@mail.gmail.com>
References: <efc6adb00807240230n1abedbc5y812935b50c577880@mail.gmail.com>
Message-ID: <48886A6D.8000000@imperial.ac.uk>

??? wrote:
>     Hi, if I want to make a tcp connection pool by twisted, how can I do 
> that?? I am confuse about what should I keep?? The procotol instance
>    or something else, thanks a lot...

Yes, you'd keep a number of protocol instances. So for example:

from twisted.internet import protcol, reactor

class MyPool:
   max_connections = 16

   def __init__(self, host, port, prot_class, *p, **kw):
     self.host = host
     self.port = post
     self.factory = protocol.ClientCreator(reactor, prot_class, *p, **kw)
     self.connections = {}
     self.in_use = {}

   def doSomething(self, *p, **kw):
     # find a free protocol
     for id, instance in self.connections.items():
       if id in self.in_use:
         continue
       return self.got_conn(instance, id, *p **kw)

     # no free ones, create a new one
     for id in range(self.max_connections):
       if id in self.connections:
         continue

       d = self.factory.connectTCP(self.host, self.port)
       d.addCallback(self.got_conn, id, *p, **kw)
       return d

     raise Exception('pool full')

   def got_conn(self, proto, id, *p, **kw):
     self.connections[id] = proto
     self.in_use[id] = True
     d = proto.doSomething(*p, **kw)
     d.addBoth(self.done, id)

   def done(self, r, id):
     del self.in_use[id]
     return r



From tim at commsecure.com.au  Fri Jul 25 00:50:12 2008
From: tim at commsecure.com.au (Tim Allen)
Date: Fri, 25 Jul 2008 14:50:12 +1000
Subject: [Twisted-Python] trial and adbapi.ConnectionPool
Message-ID: <20080725145012.7df2edfc@ws35.commsecure.com.au>

In the projects I'm working on at the moment, we're using
t.e.adbapi.ConnectionPool wrapping psycopg2 to handle connections to a
PostgreSQL database. The setUp method of our unit-tests drops and
recreates the database each time, and we've discovered that
intermittently tests will fail because a previous test is still
connected to the database when the subsequent test runs. Annoyingly, it
happens on some machines and not others.

I've attached a unit-test that reliably reproduces the problem for me on
the machines where I've observed it at all.

Looking at the PostgreSQL logs, a normal test-run does something much
like this:

	- connection 1 incoming
	- connection 2 incoming
	- connection 1 executes a statement
	- connection 2 executes a statement
	- connection 1 disconnects
	- connection 2 disconnects
	- the next test tries to drop the database and succeeds.

When things go wrong, it often looks more like this:

	- connection 1 incoming
	- connection 2 incoming
	- connection 1 executes a statement
	- connection 2 executes a statement
	- connection 1 disconnects
	- the next test tries to drop the database and fails because
	  the database is in use.
	- connection 2 disconnects

It turns out that the easiest work-around for this problem is to force
a garbage-collection run after each test (with trial --force-gc or
calling gc.collect()), so I have a work-around in the cause of these
errors is outside my control, but I'm worried that perhaps I'm abusing
the ConnectionPool in some way I haven't noticed.

Are there known issues with shutting down adbapi.ConnectionPool in
tests? Should adbapi.ConnectionPool.close() return a deferred that
fires when the all the connections in the pool are guaranteed to have
shut down? Can anyone see anything wrong in my sample code?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test_reproduce.py
Type: text/x-python
Size: 6087 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20080725/c91155cc/attachment.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20080725/c91155cc/attachment.pgp 

From nathan.stocks at gmail.com  Fri Jul 25 01:47:56 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Thu, 24 Jul 2008 22:47:56 -0700
Subject: [Twisted-Python] Twisted + Pyglet = txpyglet?
Message-ID: <96c9d6a80807242247l7d46339ah8e1ca2b8ce03a0c4@mail.gmail.com>

When I got asked the third (fourth?) time to show how I "integrated"
pyglet and twisted together, I decided to package it up and put it out
there.

I called it txpyglet because of all the tx-prefix-discussion-stuff,
but it's really more of a sample app than a twisted library.

A short screencast demo and a link to a zipfile of the goods can be found here:

http://nathanstocks.blogspot.com/2008/07/txpyglet.html

For the actual "integration" method, just look at the last 50-ish
lines of the txpyglet.py file.

P.S. Yes, this method of calling pyglet's loop is blocking.  Yes, I
know that's bad.  And yes, I'm open to suggestions for a better way
for those so inclined.  In fact, I think some people have already put
out better ways--I just haven't had time to look into them...

~ Nathan



From screwtape at froup.com  Fri Jul 25 02:05:30 2008
From: screwtape at froup.com (Tim Allen)
Date: Fri, 25 Jul 2008 16:05:30 +1000
Subject: [Twisted-Python] Re: Running a HTTP client connection through
	a SOCKS proxy
In-Reply-To: <28749c0e0807240349s1a522c6dn6a207553e23ad8d9@mail.gmail.com>
References: <28749c0e0807230746y6ed84ffbyee5b10b4e5ee0fff@mail.gmail.com>
	<28749c0e0807230807l25509991ye8046fe5dd1530f7@mail.gmail.com>
	<20080724102331.GH2980@thristian.org>
	<28749c0e0807240349s1a522c6dn6a207553e23ad8d9@mail.gmail.com>
Message-ID: <20080725060530.GI2980@thristian.org>

On Thu, Jul 24, 2008 at 11:49:56AM +0100, nnp wrote:
> Hrm, OK....I'm not sure if I have an odd view of the world or whether
> supporting HTTP proxies isn't all that important. Aren't HTTP proxies
> fairly common in large organisations and universities?

HTTP proxies are very common; I guess nobody who's needed one has yet
had time to sit down and write support.



From p.mayers at imperial.ac.uk  Fri Jul 25 04:03:18 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 25 Jul 2008 09:03:18 +0100
Subject: [Twisted-Python] Re: Running a HTTP client connection through a
	SOCKS proxy
In-Reply-To: <20080725060530.GI2980@thristian.org>
References: <28749c0e0807230746y6ed84ffbyee5b10b4e5ee0fff@mail.gmail.com>
	<28749c0e0807230807l25509991ye8046fe5dd1530f7@mail.gmail.com>
	<20080724102331.GH2980@thristian.org>
	<28749c0e0807240349s1a522c6dn6a207553e23ad8d9@mail.gmail.com>
	<20080725060530.GI2980@thristian.org>
Message-ID: <20080725080318.GA10068@wildfire.net.ic.ac.uk>

On Fri, Jul 25, 2008 at 04:05:30PM +1000, Tim Allen wrote:
>On Thu, Jul 24, 2008 at 11:49:56AM +0100, nnp wrote:
>> Hrm, OK....I'm not sure if I have an odd view of the world or whether
>> supporting HTTP proxies isn't all that important. Aren't HTTP proxies
>> fairly common in large organisations and universities?
>
>HTTP proxies are very common; I guess nobody who's needed one has yet
>had time to sit down and write support.

It's not hard:

#!/usr/bin/python

from twisted.internet import reactor
from twisted.web import client

def got(page):
    print "got", repr(page)
    reactor.callLater(0.1, reactor.stop)
def failed(err):
    print err.getErrorMessage()
    reactor.callLater(0.1, reactor.stop)

class ProxyClientFactory(client.HTTPClientFactory):
    def setURL(self, url):
	# do the normal stuff
	client.HTTPClientFactory.setURL(self, url)
	# then re-set the path to be the full url
	self.path = url

cf = ProxyClientFactory('http://www.google.com/')
cf.deferred.addCallbacks(got, failed)

reactor.connectTCP('wwwcache1.ic.ac.uk', 3128, cf)



From exarkun at divmod.com  Fri Jul 25 08:20:29 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 25 Jul 2008 08:20:29 -0400
Subject: [Twisted-Python] trial and adbapi.ConnectionPool
In-Reply-To: <20080725145012.7df2edfc@ws35.commsecure.com.au>
Message-ID: <20080725122029.29191.1037155844.divmod.quotient.6584@ohm>

On Fri, 25 Jul 2008 14:50:12 +1000, Tim Allen <tim at commsecure.com.au> wrote:
>In the projects I'm working on at the moment, we're using
>t.e.adbapi.ConnectionPool wrapping psycopg2 to handle connections to a
>PostgreSQL database. The setUp method of our unit-tests drops and
>recreates the database each time, and we've discovered that
>intermittently tests will fail because a previous test is still
>connected to the database when the subsequent test runs. Annoyingly, it
>happens on some machines and not others.

The problem may have something to do with the implementation of
adbapi.Connection.close:

    def close(self):
        # The way adbapi works right now means that closing a connection is
        # a really bad thing  as it leaves a dead connection associated with
        # a thread in the thread pool.
        # Really, I think closing a pooled connection should return it to the
        # pool but that's handled by the runWithConnection method already so,
        # rather than upsetting anyone by raising an exception, let's ignore
        # the request
        pass

which seems somewhat short of ideal to me.

Jean-Paul



From newmom72 at hotmail.com  Fri Jul 25 11:38:30 2008
From: newmom72 at hotmail.com (nadine)
Date: Fri, 25 Jul 2008 11:38:30 -0400
Subject: [Twisted-Python] From prototype to production
Message-ID: <BAY112-W52C4C17A46EEE083DF2F79D9860@phx.gbl>


Hi,
 
Many thanks to the creators and developers of Twisted. 
 
I have been using Twisted to develop a prototype (using an Dell desktop) for an inline DPI server. Needless to say, Twisted made the development time much shorter, and I am very grateful for that.
 
I now want to migrate from prototype to production. I was fully expecting to use an intel IXP server, and having to learn its OS and low-level programming languages. But intel itself told me that they are discontinuing that family, and are recommending the use of multi-core general-purpose servers.
 
If that is the case, then it is tempting to think that I can use the exact same python software I developed for the prototype in the production server. Mind you, for the prototype I was testing three simultaneous users. For production, I am likely to have 5000 simultaneous users per server. 
 
Is this thinking correct? Are there any obvious scalability issues that I would encounter if I used python in production? Is it automatically obvious that I need to reprogram my methods in C, or even a lower-level language?
 
Thanks.
 
N. 
_________________________________________________________________
Stay in touch when you're away with Windows Live Messenger.
http://www.windowslive.com/messenger/overview.html?ocid=TXT_TAGLM_WL_messenger2_072008
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080725/6aeaab48/attachment.htm 

From glyph at divmod.com  Fri Jul 25 14:44:04 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Jul 2008 18:44:04 -0000
Subject: [Twisted-Python] From prototype to production
In-Reply-To: <BAY112-W52C4C17A46EEE083DF2F79D9860@phx.gbl>
References: <BAY112-W52C4C17A46EEE083DF2F79D9860@phx.gbl>
Message-ID: <20080725184404.25821.1346399736.divmod.xquotient.13295@joule.divmod.com>

On 03:38 pm, newmom72 at hotmail.com wrote:
>Is this thinking correct? Are there any obvious scalability issues that 
>I would encounter if I used python in production? Is it automatically 
>obvious that I need to reprogram my methods in C, or even a lower-level 
>language?

It's not "automatically" obvious, but that doesn't mean that it will 
work.  Develop some benchmarks for your application, see how fast it is, 
determine whether you need to optimize it, and profile it to discover 
which parts would benefit from optimization.

This strategy is not unique to Twisted, Python, or any other library or 
language, for that matter.  Even if you wrote your whole system in C 
there is no guarantee that it would magically be fast enough to support 
your users.

In most cases Python is fast enough, and in those cases where it is not, 
you can usually move just a few functions to C.  I have never seen a 
case where Python was so slow that an entire system needed to be 
rewritten.



From jack at chesspark.com  Fri Jul 25 20:30:00 2008
From: jack at chesspark.com (Jack Moffitt)
Date: Fri, 25 Jul 2008 18:30:00 -0600
Subject: [Twisted-Python] trial and adbapi.ConnectionPool
In-Reply-To: <20080725122029.29191.1037155844.divmod.quotient.6584@ohm>
References: <20080725145012.7df2edfc@ws35.commsecure.com.au>
	<20080725122029.29191.1037155844.divmod.quotient.6584@ohm>
Message-ID: <9b58f4550807251730g3377ca53h273f902f6e65b035@mail.gmail.com>

On Fri, Jul 25, 2008 at 6:20 AM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>
> On Fri, 25 Jul 2008 14:50:12 +1000, Tim Allen <tim at commsecure.com.au> wrote:
>>
>> In the projects I'm working on at the moment, we're using
>> t.e.adbapi.ConnectionPool wrapping psycopg2 to handle connections to a
>> PostgreSQL database. The setUp method of our unit-tests drops and
>> recreates the database each time, and we've discovered that
>> intermittently tests will fail because a previous test is still
>> connected to the database when the subsequent test runs. Annoyingly, it
>> happens on some machines and not others.
>
> The problem may have something to do with the implementation of
> adbapi.Connection.close:

Even with a better close() we get similar issues at Chesspark.  I'm
very happy to learn about the gc.collect() workaround.

jack.



From exarkun at twistedmatrix.com  Sun Jul 27 00:05:09 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Jul 2008 04:05:09 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1217131509.18.567332967@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080727/c33aa2aa/attachment.htm 

From nathan.stocks at gmail.com  Sun Jul 27 00:42:12 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Sat, 26 Jul 2008 22:42:12 -0600
Subject: [Twisted-Python] C or Objective-C AMP?
Message-ID: <96c9d6a80807262142h38e82264s949fed192f8d4c9a@mail.gmail.com>

1) Does anyone know if AMP has been implemented in either C or Objective-C yet?

2) Is there a better way for me to find that out than asking on this
list?  (Is there somewhere I should be looking first?)

~ Nathan



From cartermichael at gmail.com  Sun Jul 27 05:28:37 2008
From: cartermichael at gmail.com (Michael Carter)
Date: Sun, 27 Jul 2008 02:28:37 -0700
Subject: [Twisted-Python] Writing new transports / a tunnel Protocol
Message-ID: <3a05072b0807270228o3cde79aage7bff5f5e41f3994@mail.gmail.com>

Hello,

I'm hoping to use existing protocol implementations in twisted, but over a
custom tunneling protocol that I'll call CTP for the remainder of this
thread. CTP is basically TCP with a couple of strange characteristics.
Besides a custom handshake, two actual tcp connections are used for the data
transport, each of which is considered uni-directional; one connection is
used for "upstream" and one for "downstream".

I know how to create a twisted factory / protocol implementation for CTP
such that you could write a CTP based protocol by inheriting from
CTPProtocol and overriding the "dataRead" function. But this means I have to
do more work to get each existing twisted protocol working with my CTP
implementation.

So my question is, what is the best way to take an implementation of this
protocol and integrate it tightly with twisted's internals? It seems like I
would need a new reactor implementation with a listenCTP function, for one.
Of course, I wouldn't want to just inherit from the SelectReactor, because I
want to be able to use Epoll (or others) as well.

Please excuse my ignorance of twisted's architecture. I already have a
prototype of this (see orbited 0.5.x) but I want my next release to
integrate tightly with twisted's infrastructure instead of re-inventing an
API on top.

-Michael Carter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20080727/a6b2cc71/attachment.htm 

From exarkun at divmod.com  Sun Jul 27 08:38:44 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 27 Jul 2008 08:38:44 -0400
Subject: [Twisted-Python] Writing new transports / a tunnel Protocol
In-Reply-To: <3a05072b0807270228o3cde79aage7bff5f5e41f3994@mail.gmail.com>
Message-ID: <20080727123844.29191.1066973468.divmod.quotient.7237@ohm>

On Sun, 27 Jul 2008 02:28:37 -0700, Michael Carter <cartermichael at gmail.com> wrote:
>Hello,
>
> [snip]
>
>So my question is, what is the best way to take an implementation of this
>protocol and integrate it tightly with twisted's internals? It seems like I
>would need a new reactor implementation with a listenCTP function, for one.
>Of course, I wouldn't want to just inherit from the SelectReactor, because I
>want to be able to use Epoll (or others) as well.
>
>Please excuse my ignorance of twisted's architecture. I already have a
>prototype of this (see orbited 0.5.x) but I want my next release to
>integrate tightly with twisted's infrastructure instead of re-inventing an
>API on top.
>

You don't have to add a method to the reactor.  You can make a free
function which takes a reactor as an argument.

Jean-Paul



From jtanis at mdchs.org  Sun Jul 27 17:01:22 2008
From: jtanis at mdchs.org (James Tanis)
Date: Sun, 27 Jul 2008 17:01:22 -0400
Subject: [Twisted-Python] Re: Running a HTTP client connection through a
	SOCKS proxy
In-Reply-To: <28749c0e0807240349s1a522c6dn6a207553e23ad8d9@mail.gmail.com>
Message-ID: <d034d08d64085dfe3fb001f5a6a9f3b6@portal.mdchs.org>

"nnp" <version5 at gmail.com> wrote:
> Hrm, OK....I'm not sure if I have an odd view of the world or whether
> supporting HTTP proxies isn't all that important. Aren't HTTP proxies
> fairly common in large organisations and universities?

Yeah, but, except for when authentication is required, most of them are set
up to be transparent and hence don't really need support. I do realize that
there are authenticating http proxies, I have one set up at work, but I
guess it's not common enough yet to garner support.



--
James Tanis
Technical Coordinator
Monsignor Donovan Catholic High School
e: jtanis at mdchs.org





From jml at mumak.net  Sun Jul 27 22:19:11 2008
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 28 Jul 2008 14:19:11 +1200
Subject: [Twisted-Python] C or Objective-C AMP?
In-Reply-To: <96c9d6a80807262142h38e82264s949fed192f8d4c9a@mail.gmail.com>
References: <96c9d6a80807262142h38e82264s949fed192f8d4c9a@mail.gmail.com>
Message-ID: <d06a5cd30807271919i10c5e3c7t74f32faa8ff4e534@mail.gmail.com>

On Sun, Jul 27, 2008 at 4:42 PM, Nathan <nathan.stocks at gmail.com> wrote:
> 1) Does anyone know if AMP has been implemented in either C or Objective-C yet?
>

I don't think so. I've wanted to do a C one, but only as a personal exercise.

> 2) Is there a better way for me to find that out than asking on this
> list?  (Is there somewhere I should be looking first?)

This is a pretty good way. You could also look at the Twisted
Community page at https://launchpad.net/tx.

jml



From zmola at acm.org  Sun Jul 27 22:27:05 2008
From: zmola at acm.org (Carl Zmola)
Date: Sun, 27 Jul 2008 22:27:05 -0400
Subject: [Twisted-Python] C or Objective-C AMP?
In-Reply-To: <d06a5cd30807271919i10c5e3c7t74f32faa8ff4e534@mail.gmail.com>
References: <96c9d6a80807262142h38e82264s949fed192f8d4c9a@mail.gmail.com>
	<d06a5cd30807271919i10c5e3c7t74f32faa8ff4e534@mail.gmail.com>
Message-ID: <488D2E79.10709@acm.org>

Jonathan Lange wrote:
> On Sun, Jul 27, 2008 at 4:42 PM, Nathan <nathan.stocks at gmail.com> wrote:
>   
>> 1) Does anyone know if AMP has been implemented in either C or Objective-C yet?
>>
>>     
>
> I don't think so. I've wanted to do a C one, but only as a personal exercise.
Has anyone done any porting between ACE 
(http://www.cse.wustl.edu/~schmidt/ACE.html) and Twisted (either way)
On paper they seem similar, but I haven't written any protocols in either.


Carl




From py.adriano at gmail.com  Mon Jul 28 11:04:49 2008
From: py.adriano at gmail.com (Adriano Marques)
Date: Mon, 28 Jul 2008 12:04:49 -0300
Subject: [Twisted-Python] Re: Possible bug on twisted.conch.ssh.keys?
In-Reply-To: <29ec21540807280629y7852498blac2119ac986c43f2@mail.gmail.com>
References: <29ec21540807280629y7852498blac2119ac986c43f2@mail.gmail.com>
Message-ID: <29ec21540807280804u208645eeq43c0a714eb7207e@mail.gmail.com>

Folks,

While I was trying to find why the verify method was returning False,
I discovered that inside the _verify method, at RSA.py, there was the
following code:

<RSA_code>
def _verify(self, M, sig):
    m2=self._encrypt(sig[0])
    if m2[0]==M:
        return 1
    else: return 0
</RSA_code>

Using the live debug of wingide, I checked the values, and here is the result:

<debug>
>>> print m2[0] == M
False
>>> print m2[0]
5486124068793688683255936251187209270074392635932332070112001988456197381759672947165175699536362793613284725337872111744958183862744647903224103718245670299614498700710006264535590197791934024641512541262359795191593456970905950167587431434979106624455856690274067852326335446193014962274187407641892263
>>> print M
5486124068793688683255936251187209270074392635932332070112001988456197381759672947165175699536362793613284725337872111744958183862744647903224103718245670299614498700710006264535590197791934024641512541262359795191593456970905950167587431434979106624455857062955565129940502062033292313613058888050118445
>>> print type(m2[0]), type(M)
<type 'long'> <type 'long'>
</debug>

So, m2[0] is really different from M, but why if I'm using the same
keys from the same place?

Hope this helps to clear the issue.


Kind Regards,

On Mon, Jul 28, 2008 at 10:29 AM, Adriano Marques <py.adriano at gmail.com> wrote:
> Hello folks,
>
> I'm facing a problem here while trying to implement a ssh server and
> client using twisted. There are some deprecated functions that are
> pointing me to use new ones, which in turn doesn't seem to work fine.
> I'm not sure if it is the case, mainly because the deprecated
> functions are calling the new ones, but while debuging the code I
> found that something there is wrong, and that can potentially be
> hapenning because of the changes recently made to that module. As I'm
> somehow new to twisted I'm not sure about my statements arround the
> problem. Here follows the codes and exceptions I'm getting:
>
> <client_code>
> #!/usr/bin/env python
>
> # This code was based on an example from twisted website
>
> from twisted.conch.ssh import transport, userauth, connection
> from twisted.conch.ssh import common, keys, channel
> from twisted.internet import defer, protocol, reactor
> from twisted.python import log
> import struct, sys, getpass, os
>
> USER = 'ssh'
> HOST = 'localhost'
> PORT = 2222
> PUBKEY = "ssh-rsa
> AAAAB3NzaC1yc2EAAAADAQABAAAAgQD3n4sYqbdnlVyvy2SRUmQ5HJg2NDHyC0m4FIykDygXW2PTcSHU/Jany95D54qAEkUra0KHk94KvyGhNVYXqPmzPLu4onlr0Y/gQzEsIy15jDGjMWVCX/8+PQJxMYObSKs8U1o/h5fDNeKQs4bZbrm+35eT/Kvyerqa6ab5OsIEnQ=="
> PRIVKEY = """-----BEGIN RSA PRIVATE KEY-----
> MIICXAIBAAKBgQD3n4sYqbdnlVyvy2SRUmQ5HJg2NDHyC0m4FIykDygXW2PTcSHU
> /Jany95D54qAEkUra0KHk94KvyGhNVYXqPmzPLu4onlr0Y/gQzEsIy15jDGjMWVC
> X/8+PQJxMYObSKs8U1o/h5fDNeKQs4bZbrm+35eT/Kvyerqa6ab5OsIEnQIDAQAB
> AoGAK2MWASVDkG+4RMkTfu77xpH/DYhJtApMSWe4WMqbELSfoh2xetsjHpV3BVjd
> iKEq43ewuYasIh/pKZDp281sqqXdg9VI9ZW7kB00FhO2wA4emCIVj6CHMl1K9NrU
> 9Spy40garaYnDdud79SnKtxlKQEALOwCpTEcrjGOLBTbirUCQQD/FkP1zhpOSaOy
> B32CiC13W5fFfREzBxzQ3Med1i1OYtFfBEdJqv/Z7APadNN8ySI3r+UAfGatTzJI
> zbiSZ2fHAkEA+IJwWpw6d8R3t7+8UgTrqdsZhLRdidO0cHcIFcnU/QYZg+iw3F+q
> Tuz/mngpfb5214r8zwcwlNzsC4+fyOOYewJBAMPstRw6Rog1FW8rQ6Kbt9hCWItO
> aYR5BRADU6sOk1PuoIPLhHm3xrX6CmejbcEdt5NwHYNHCZI6DxRONmL024cCQBky
> eJvnXVJJfG4IJdsXHqIBUiwPcbCI47HHj+1NoqfpF2s1i8E8ffM0upH5/xL93eTq
> 9ck0DGv7nn9pl6Tx1sMCQCWZbWDnmEdsSoNUQZ8fyQEDoZ/2gUP+R2/WpLikwmSA
> 41n7cUONVthIYOZw0qQPP//PyPtMVxcYT76D5QACEK8=
> -----END RSA PRIVATE KEY-----"""
>
> class ClientTransport(transport.SSHClientTransport):
>    def connectionMade(self):
>        transport.SSHClientTransport.connectionMade(self)
>
>    def verifyHostKey(self, hostKey, fingerprint):
>        return defer.succeed(1)
>
>    def connectionSecure(self):
>        self.requestService(ClientUserAuth(USER, ClientConnection()))
>
> class ClientUserAuth(userauth.SSHUserAuthClient):
>    def getPublicKey(self):
>        # Issue 1
>        return PUBKEY.encode("ascii")
>
>    def getPrivateKey(self):
>        # Issue 2
>        return defer.succeed(keys.getPrivateKeyObject(data=PRIVKEY))
>
>    def getPassword(self):
>        return defer.succeed(getpass.getpass("%s@%s's password: " %
> (USER, HOST)))
>
>    def getGenericAnswers(self, name, instruction, questions):
>        import pdb; pdb.set_trace()
>        log.debug("Get Generic answers: %s, %s, %s" % (name,
>                                                       instruction,
>                                                       questions))
>
>        answers = []
>        for prompt, echo in questions:
>            if echo:
>                answer = raw_input(prompt)
>            else:
>                answer = getpass.getpass(prompt)
>            answers.append(answer)
>        return defer.succeed(answers)
>
>    def tryAuth(self, kind):
>        kind = "publickey"
>        log.debug("tryAuth: %s" % kind)
>        log.debug("Public Key: %s" % self.getPublicKey())
>        return userauth.SSHUserAuthClient.tryAuth(self, kind)
>
>    def signData(self, publicKey, signData):
>        log.debug("Ran signData with %s and %s" % (publicKey, signData))
>        import pdb; pdb.set_trace()
>        signed = userauth.SSHUserAuthClient.signData(self, publicKey, signData)
>
>        return signed
>
>    def auth_publickey(self):
>        log.debug("Trying Auth Method: Public Key")
>        return userauth.SSHUserAuthClient.auth_publickey(self)
>
> class ClientConnection(connection.SSHConnection):
>    def serviceStarted(self):
>        log.debug("Service started")
>        self.openChannel(TrueChannel(2**16, 2**15, self))
>        self.openChannel(FalseChannel(2**16, 2**15, self))
>        self.openChannel(CatChannel(2**16, 2**15, self))
>
> class TrueChannel(channel.SSHChannel):
>    name = 'session'
>
>    def openFailed(self, reason):
>        print 'true failed', reason
>
>    def channelOpen(self, ignoredData):
>        self.conn.sendRequest(self, 'exec', common.NS('true'))
>
>    def request_exit_status(self, data):
>        status = struct.unpack('>L', data)[0]
>        print 'true status was: %s' % status
>        self.loseConnection()
>
> class FalseChannel(channel.SSHChannel):
>    name = 'session'
>
>    def openFailed(self, reason):
>        print 'false failed', reason
>
>    def channelOpen(self, ignoredData):
>        self.conn.sendRequest(self, 'exec', common.NS('false'))
>
>    def request_exit_status(self, data):
>        status = struct.unpack('>L', data)[0]
>        print 'false status was: %s' % status
>        self.loseConnection()
>
> class CatChannel(channel.SSHChannel):
>    name = 'session'
>
>    def openFailed(self, reason):
>        print 'echo failed', reason
>
>    def channelOpen(self, ignoredData):
>        self.data = ''
>        d = self.conn.sendRequest(self, 'exec', common.NS('cat'), wantReply = 1)
>        d.addCallback(self._cbRequest)
>
>    def _cbRequest(self, ignored):
>        self.write('hello conch\n')
>        self.conn.sendEOF(self)
>
>    def dataReceived(self, data):
>        self.data += data
>
>    def closed(self):
>        print 'got data from cat: %s' % repr(self.data)
>        self.loseConnection()
>        reactor.stop()
>
> protocol.ClientCreator(reactor, ClientTransport).connectTCP(HOST, 2222)
> reactor.run()
> </client_code>
>
> The issues:
>
> 1 - I had to encode the public key to ascii prior to using it. I don't
> know why, but the struct was raising an exception telling that one of
> the chars where out of the ascii range. But it doesn't look to have
> any character outside the ascii range, AFAIK. Anyway, it worked when I
> did the conversion to ascii.
>
> 2 - When I use: keys.Key.fromString(data=PRIVKEY) instead of the
> deprecated keys.getPrivateKeyObject(data=PRIVKEY), I get this error
> while trying to authenticate:
>
> <error>
> # This was caught directly from pdb prompt:
>> connectSSH.py(77)signData()
> -> signed = userauth.SSHUserAuthClient.signData(self, publicKey, signData)
> (Pdb) n
>> site-packages/twisted/conch/ssh/userauth.py:374: DeprecationWarning: signData is deprecated since Twisted Conch 0.9.  Use Key(obj).sign(data).
>  return keys.signData(privateKey, signData)
>> connectSSH.py(79)signData()
> -> return signed
> (Pdb) p signed
> <Deferred at 0x12a1760  current result:
> <twisted.python.failure.Failure <type 'exceptions.RuntimeError'>>>
> (Pdb) p signed.result
> <twisted.python.failure.Failure <type 'exceptions.RuntimeError'>>
> (Pdb) p signed.result.getErrorMessage()
> 'unknown type of object: <RSA Private Key (1023 bits)\nattr
> e:\n\t01:00:01\nattr
> d:\n\t2b:63:16:01:25:43:90:6f:b8:44:c9:13:7e:ee:fb:\n\tc6:91:ff:0d:88:49:b4:0a:4c:49:67:b8:58:ca:9b:\n\t10:b4:9f:a2:1d:b1:7a:db:23:1e:95:77:05:58:dd:\n\t88:a1:2a:e3:77:b0:b9:86:ac:22:1f:e9:29:90:e9:\n\tdb:cd:6c:aa:a5:dd:83:d5:48:f5:95:bb:90:1d:34:\n\t16:13:b6:c0:0e:1e:98:22:15:8f:a0:87:32:5d:4a:\n\tf4:da:d4:f5:2a:72:e3:48:1a:ad:a6:27:0d:db:9d:\n\tef:d4:a7:2a:dc:65:29:01:00:2c:ec:02:a5:31:1c:\n\tae:31:8e:2c:14:db:8a:b5\nattr
> n:\n\t00:f7:9f:8b:18:a9:b7:67:95:5c:af:cb:64:91:52:\n\t64:39:1c:98:36:34:31:f2:0b:49:b8:14:8c:a4:0f:\n\t28:17:5b:63:d3:71:21:d4:fc:96:a7:cb:de:43:e7:\n\t8a:80:12:45:2b:6b:42:87:93:de:0a:bf:21:a1:35:\n\t56:17:a8:f9:b3:3c:bb:b8:a2:79:6b:d1:8f:e0:43:\n\t31:2c:23:2d:79:8c:31:a3:31:65:42:5f:ff:3e:3d:\n\t02:71:31:83:9b:48:ab:3c:53:5a:3f:87:97:c3:35:\n\te2:90:b3:86:d9:6e:b9:be:df:97:93:fc:ab:f2:7a:\n\tba:9a:e9:a6:f9:3a:c2:04:9d\nattr
> q:\n\t00:ff:16:43:f5:ce:1a:4e:49:a3:b2:07:7d:82:88:\n\t2d:77:5b:97:c5:7d:11:33:07:1c:d0:dc:c7:9d:d6:\n\t2d:4e:62:d1:5f:04:47:49:aa:ff:d9:ec:03:da:74:\n\td3:7c:c9:22:37:af:e5:00:7c:66:ad:4f:32:48:cd:\n\tb8:92:67:67:c7\nattr
> p:\n\t00:f8:82:70:5a:9c:3a:77:c4:77:b7:bf:bc:52:04:\n\teb:a9:db:19:84:b4:5d:89:d3:b4:70:77:08:15:c9:\n\td4:fd:06:19:83:e8:b0:dc:5f:aa:4e:ec:ff:9a:78:\n\t29:7d:be:76:d7:8a:fc:cf:07:30:94:dc:ec:0b:8f:\n\t9f:c8:e3:98:7b\nattr
> u:\n\t25:99:6d:60:e7:98:47:6c:4a:83:54:41:9f:1f:c9:\n\t01:03:a1:9f:f6:81:43:fe:47:6f:d6:a4:b8:a4:c2:\n\t64:80:e3:59:fb:71:43:8d:56:d8:48:60:e6:70:d2:\n\ta4:0f:3f:ff:cf:c8:fb:4c:57:17:18:4f:be:83:e5:\n\t00:02:10:af>'
> </error>
>
> This is the function that raised that exception:
> http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.1.0/twisted/conch/ssh/keys.py#L387
> It looks like the problem is that the class name doesn't start with
> Crypto.PublicKey. Then, when I use the deprecated method, this is what
> I have:
>
> <not_an_error>
>> connectSSH.py(77)signData()
> -> signed = userauth.SSHUserAuthClient.signData(self, publicKey, signData)
> (Pdb) n
> tests/connectSSH.py:48: DeprecationWarning: getPrivateKeyObject is
> deprecated since Twisted Conch 0.9.  Use Key.fromString().
>  return defer.succeed(keys.getPrivateKeyObject(data=PRIVKEY))
> site-packages/twisted/conch/ssh/userauth.py:374: DeprecationWarning:
> signData is deprecated since Twisted Conch 0.9.  Use
> Key(obj).sign(data).
>  return keys.signData(privateKey, signData)
>> connectSSH.py(79)signData()
> -> return signed
> (Pdb) p signed
> <Deferred at 0x12a1760  current result:
> '\x00\x00\x00\x07ssh-rsa\x00\x00\x00\x80\xa9w-\x0c\x9e\xc3\xe8\xd0\xff\xb8\xf0\xbbi*\xecJ\x8e5\xac\x0e(@\x18\x81\x11\xf4\xff\xda\xde\xd6\x9b\xbe\xef\\\xc2\xd0F8Q\x15\xd0A\xa1!$\xe2\xe5\xa0\xf8\x12O\xa0*4\xe1)\xc2:\xbf\x16\x0b\x8a\xd2J\xa8D\x01\xdd\x10\xe3\xeb\x8b*9,\xf3#b\xff\xbf\xc9\xe9\xdc\x81\xa4B\x88$\r\x8b\xef|y\x80\r\x08\x8a*\x08x:\x0c{\xcf\x97\xb7"\xe19\x1f\xa2_wV4\xfa\x19"Vf\xcf\x80\xa7i\x98\xfa\xefM'>
> </not_an_error>
>
> After moving to the deprecated method, everything seems to work ok
> with the client, but then I started to have a similar problem at the
> server side, while verifying client's signature. Here is the relevant
> part of the server code, which is the method requestAvatarId of the
> Credential Checker I implemented:
>
> <server_code>
> # This code is based in an example that I caught from twisted website
> class PublicKeyChecker():
>    implements(checkers.ICredentialsChecker)
>    credentialInterfaces = (credentials.ISSHPrivateKey, )
>
>    def requestAvatarId(self, credentials):
>        # I removed here the code that verified if the user is
> registered in our database, to easy for you guys to understand the
> relevant part of the code. Just consider that the variable user
> contains the found user object.
>
>        user_key = user.key.public_key
>        if not credentials.blob == user_key:
>            raise failure.Failure(error.ConchError("Wrong key."))
>        if not credentials.signature:
>            return failure.Failure(error.ValidPublicKey())
>
>        pub_key = Key.fromString(data=credentials.blob)
>        # Issue 3
>        if verifySignature(pub_key,
>                           credentials.signature,
>                           credentials.sigData):
>            return credentials.username
>        else:
>            return failure.Failure(error.ConchError("Incorrect Signature."))
>    else:
>        return failure.Failure(error.ConchError("Authentication Failed."))
> </server_code>
>
> 3 - Then, while I get to the verifySignature method, I get the following error:
>
> <error>
> RuntimeError: unknown type of object: <RSA Public Key (1023 bits)
> attr e:
>        01:00:01
> attr n:
>        00:f7:9f:8b:18:a9:b7:67:95:5c:af:cb:64:91:52:
>        64:39:1c:98:36:34:31:f2:0b:49:b8:14:8c:a4:0f:
>        28:17:5b:63:d3:71:21:d4:fc:96:a7:cb:de:43:e7:
>        8a:80:12:45:2b:6b:42:87:93:de:0a:bf:21:a1:35:
>        56:17:a8:f9:b3:3c:bb:b8:a2:79:6b:d1:8f:e0:43:
>        31:2c:23:2d:79:8c:31:a3:31:65:42:5f:ff:3e:3d:...
> </error>
>
> Which is the same exception raised by the key.type() function that
> have put us at the same trouble in the client. Then, at the debuger, I
> found that the correct key (which is a class with name starting with
> Crypto.PublicKey) is right inside this "unknown" object, which is a
> RSA Public Key in object.keyObject.keyObject! I ran the WingIDE
> debugger and simply saw that, as you can see in this screenshot:
> http://www.imageno.com/z99azx3v7qnzpic.html
>
> Ok, I also get the deprecated warning while using the verifySignature
> method instead of Key(obj).verify(sig, data), then I decided to test
> it also just to don't make you guys wast your time with me for
> nothing. I called pub_key.verify(credentials.signature,
> credentials.sigData) instead of that verifySignature call, and it
> returned False instead leading to a failure in authentication.
>
> Both apps (client and server) are running inside the same machine,
> consulting the same database, the same keys and user, so there it is
> not reasonable to be failing if my code is correct. Maybe I missed
> something. Can you guys help me?
>
> Sorry about the very long email, but I tried to be as much verbose as
> I could in order to help you guys help me.
>
>
> Kind Regards,
>
> --
> Adriano Monteiro Marques
>
> http://adriano-marques.blogspot.com
> http://umit.sourceforge.net
> py.adriano at gmail.com
>
> "Don't stay in bed, unless you can make money in bed." - George Burns
>



-- 
Adriano Monteiro Marques

http://adriano-marques.blogspot.com
http://umit.sourceforge.net
py.adriano at gmail.com

"Don't stay in bed, unless you can make money in bed." - George Burns



From py.adriano at gmail.com  Mon Jul 28 09:29:25 2008
From: py.adriano at gmail.com (Adriano Marques)
Date: Mon, 28 Jul 2008 10:29:25 -0300
Subject: [Twisted-Python] Possible bug on twisted.conch.ssh.keys?
Message-ID: <29ec21540807280629y7852498blac2119ac986c43f2@mail.gmail.com>

Hello folks,

I'm facing a problem here while trying to implement a ssh server and
client using twisted. There are some deprecated functions that are
pointing me to use new ones, which in turn doesn't seem to work fine.
I'm not sure if it is the case, mainly because the deprecated
functions are calling the new ones, but while debuging the code I
found that something there is wrong, and that can potentially be
hapenning because of the changes recently made to that module. As I'm
somehow new to twisted I'm not sure about my statements arround the
problem. Here follows the codes and exceptions I'm getting:

<client_code>
#!/usr/bin/env python

# This code was based on an example from twisted website

from twisted.conch.ssh import transport, userauth, connection
from twisted.conch.ssh import common, keys, channel
from twisted.internet import defer, protocol, reactor
from twisted.python import log
import struct, sys, getpass, os

USER = 'ssh'
HOST = 'localhost'
PORT = 2222
PUBKEY = "ssh-rsa
AAAAB3NzaC1yc2EAAAADAQABAAAAgQD3n4sYqbdnlVyvy2SRUmQ5HJg2NDHyC0m4FIykDygXW2PTcSHU/Jany95D54qAEkUra0KHk94KvyGhNVYXqPmzPLu4onlr0Y/gQzEsIy15jDGjMWVCX/8+PQJxMYObSKs8U1o/h5fDNeKQs4bZbrm+35eT/Kvyerqa6ab5OsIEnQ=="
PRIVKEY = """-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQD3n4sYqbdnlVyvy2SRUmQ5HJg2NDHyC0m4FIykDygXW2PTcSHU
/Jany95D54qAEkUra0KHk94KvyGhNVYXqPmzPLu4onlr0Y/gQzEsIy15jDGjMWVC
X/8+PQJxMYObSKs8U1o/h5fDNeKQs4bZbrm+35eT/Kvyerqa6ab5OsIEnQIDAQAB
AoGAK2MWASVDkG+4RMkTfu77xpH/DYhJtApMSWe4WMqbELSfoh2xetsjHpV3BVjd
iKEq43ewuYasIh/pKZDp281sqqXdg9VI9ZW7kB00FhO2wA4emCIVj6CHMl1K9NrU
9Spy40garaYnDdud79SnKtxlKQEALOwCpTEcrjGOLBTbirUCQQD/FkP1zhpOSaOy
B32CiC13W5fFfREzBxzQ3Med1i1OYtFfBEdJqv/Z7APadNN8ySI3r+UAfGatTzJI
zbiSZ2fHAkEA+IJwWpw6d8R3t7+8UgTrqdsZhLRdidO0cHcIFcnU/QYZg+iw3F+q
Tuz/mngpfb5214r8zwcwlNzsC4+fyOOYewJBAMPstRw6Rog1FW8rQ6Kbt9hCWItO
aYR5BRADU6sOk1PuoIPLhHm3xrX6CmejbcEdt5NwHYNHCZI6DxRONmL024cCQBky
eJvnXVJJfG4IJdsXHqIBUiwPcbCI47HHj+1NoqfpF2s1i8E8ffM0upH5/xL93eTq
9ck0DGv7nn9pl6Tx1sMCQCWZbWDnmEdsSoNUQZ8fyQEDoZ/2gUP+R2/WpLikwmSA
41n7cUONVthIYOZw0qQPP//PyPtMVxcYT76D5QACEK8=
-----END RSA PRIVATE KEY-----"""

class ClientTransport(transport.SSHClientTransport):
    def connectionMade(self):
        transport.SSHClientTransport.connectionMade(self)

    def verifyHostKey(self, hostKey, fingerprint):
        return defer.succeed(1)

    def connectionSecure(self):
        self.requestService(ClientUserAuth(USER, ClientConnection()))

class ClientUserAuth(userauth.SSHUserAuthClient):
    def getPublicKey(self):
        # Issue 1
        return PUBKEY.encode("ascii")

    def getPrivateKey(self):
        # Issue 2
        return defer.succeed(keys.getPrivateKeyObject(data=PRIVKEY))

    def getPassword(self):
        return defer.succeed(getpass.getpass("%s@%s's password: " %
(USER, HOST)))

    def getGenericAnswers(self, name, instruction, questions):
        import pdb; pdb.set_trace()
        log.debug("Get Generic answers: %s, %s, %s" % (name,
                                                       instruction,
                                                       questions))

        answers = []
        for prompt, echo in questions:
            if echo:
                answer = raw_input(prompt)
            else:
                answer = getpass.getpass(prompt)
            answers.append(answer)
        return defer.succeed(answers)

    def tryAuth(self, kind):
        kind = "publickey"
        log.debug("tryAuth: %s" % kind)
        log.debug("Public Key: %s" % self.getPublicKey())
        return userauth.SSHUserAuthClient.tryAuth(self, kind)

    def signData(self, publicKey, signData):
        log.debug("Ran signData with %s and %s" % (publicKey, signData))
        import pdb; pdb.set_trace()
        signed = userauth.SSHUserAuthClient.signData(self, publicKey, signData)

        return signed

    def auth_publickey(self):
        log.debug("Trying Auth Method: Public Key")
        return userauth.SSHUserAuthClient.auth_publickey(self)

class ClientConnection(connection.SSHConnection):
    def serviceStarted(self):
        log.debug("Service started")
        self.openChannel(TrueChannel(2**16, 2**15, self))
        self.openChannel(FalseChannel(2**16, 2**15, self))
        self.openChannel(CatChannel(2**16, 2**15, self))

class TrueChannel(channel.SSHChannel):
    name = 'session'

    def openFailed(self, reason):
        print 'true failed', reason

    def channelOpen(self, ignoredData):
        self.conn.sendRequest(self, 'exec', common.NS('true'))

    def request_exit_status(self, data):
        status = struct.unpack('>L', data)[0]
        print 'true status was: %s' % status
        self.loseConnection()

class FalseChannel(channel.SSHChannel):
    name = 'session'

    def openFailed(self, reason):
        print 'false failed', reason

    def channelOpen(self, ignoredData):
        self.conn.sendRequest(self, 'exec', common.NS('false'))

    def request_exit_status(self, data):
        status = struct.unpack('>L', data)[0]
        print 'false status was: %s' % status
        self.loseConnection()

class CatChannel(channel.SSHChannel):
    name = 'session'

    def openFailed(self, reason):
        print 'echo failed', reason

    def channelOpen(self, ignoredData):
        self.data = ''
        d = self.conn.sendRequest(self, 'exec', common.NS('cat'), wantReply = 1)
        d.addCallback(self._cbRequest)

    def _cbRequest(self, ignored):
        self.write('hello conch\n')
        self.conn.sendEOF(self)

    def dataReceived(self, data):
        self.data += data

    def closed(self):
        print 'got data from cat: %s' % repr(self.data)
        self.loseConnection()
        reactor.stop()

protocol.ClientCreator(reactor, ClientTransport).connectTCP(HOST, 2222)
reactor.run()
</client_code>

The issues:

1 - I had to encode the public key to ascii prior to using it. I don't
know why, but the struct was raising an exception telling that one of
the chars where out of the ascii range. But it doesn't look to have
any character outside the ascii range, AFAIK. Anyway, it worked when I
did the conversion to ascii.

2 - When I use: keys.Key.fromString(data=PRIVKEY) instead of the
deprecated keys.getPrivateKeyObject(data=PRIVKEY), I get this error
while trying to authenticate:

<error>
# This was caught directly from pdb prompt:
> connectSSH.py(77)signData()
-> signed = userauth.SSHUserAuthClient.signData(self, publicKey, signData)
(Pdb) n
> site-packages/twisted/conch/ssh/userauth.py:374: DeprecationWarning: signData is deprecated since Twisted Conch 0.9.  Use Key(obj).sign(data).
  return keys.signData(privateKey, signData)
> connectSSH.py(79)signData()
-> return signed
(Pdb) p signed
<Deferred at 0x12a1760  current result:
<twisted.python.failure.Failure <type 'exceptions.RuntimeError'>>>
(Pdb) p signed.result
<twisted.python.failure.Failure <type 'exceptions.RuntimeError'>>
(Pdb) p signed.result.getErrorMessage()
'unknown type of object: <RSA Private Key (1023 bits)\nattr
e:\n\t01:00:01\nattr
d:\n\t2b:63:16:01:25:43:90:6f:b8:44:c9:13:7e:ee:fb:\n\tc6:91:ff:0d:88:49:b4:0a:4c:49:67:b8:58:ca:9b:\n\t10:b4:9f:a2:1d:b1:7a:db:23:1e:95:77:05:58:dd:\n\t88:a1:2a:e3:77:b0:b9:86:ac:22:1f:e9:29:90:e9:\n\tdb:cd:6c:aa:a5:dd:83:d5:48:f5:95:bb:90:1d:34:\n\t16:13:b6:c0:0e:1e:98:22:15:8f:a0:87:32:5d:4a:\n\tf4:da:d4:f5:2a:72:e3:48:1a:ad:a6:27:0d:db:9d:\n\tef:d4:a7:2a:dc:65:29:01:00:2c:ec:02:a5:31:1c:\n\tae:31:8e:2c:14:db:8a:b5\nattr
n:\n\t00:f7:9f:8b:18:a9:b7:67:95:5c:af:cb:64:91:52:\n\t64:39:1c:98:36:34:31:f2:0b:49:b8:14:8c:a4:0f:\n\t28:17:5b:63:d3:71:21:d4:fc:96:a7:cb:de:43:e7:\n\t8a:80:12:45:2b:6b:42:87:93:de:0a:bf:21:a1:35:\n\t56:17:a8:f9:b3:3c:bb:b8:a2:79:6b:d1:8f:e0:43:\n\t31:2c:23:2d:79:8c:31:a3:31:65:42:5f:ff:3e:3d:\n\t02:71:31:83:9b:48:ab:3c:53:5a:3f:87:97:c3:35:\n\te2:90:b3:86:d9:6e:b9:be:df:97:93:fc:ab:f2:7a:\n\tba:9a:e9:a6:f9:3a:c2:04:9d\nattr
q:\n\t00:ff:16:43:f5:ce:1a:4e:49:a3:b2:07:7d:82:88:\n\t2d:77:5b:97:c5:7d:11:33:07:1c:d0:dc:c7:9d:d6:\n\t2d:4e:62:d1:5f:04:47:49:aa:ff:d9:ec:03:da:74:\n\td3:7c:c9:22:37:af:e5:00:7c:66:ad:4f:32:48:cd:\n\tb8:92:67:67:c7\nattr
p:\n\t00:f8:82:70:5a:9c:3a:77:c4:77:b7:bf:bc:52:04:\n\teb:a9:db:19:84:b4:5d:89:d3:b4:70:77:08:15:c9:\n\td4:fd:06:19:83:e8:b0:dc:5f:aa:4e:ec:ff:9a:78:\n\t29:7d:be:76:d7:8a:fc:cf:07:30:94:dc:ec:0b:8f:\n\t9f:c8:e3:98:7b\nattr
u:\n\t25:99:6d:60:e7:98:47:6c:4a:83:54:41:9f:1f:c9:\n\t01:03:a1:9f:f6:81:43:fe:47:6f:d6:a4:b8:a4:c2:\n\t64:80:e3:59:fb:71:43:8d:56:d8:48:60:e6:70:d2:\n\ta4:0f:3f:ff:cf:c8:fb:4c:57:17:18:4f:be:83:e5:\n\t00:02:10:af>'
</error>

This is the function that raised that exception:
http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.1.0/twisted/conch/ssh/keys.py#L387
It looks like the problem is that the class name doesn't start with
Crypto.PublicKey. Then, when I use the deprecated method, this is what
I have:

<not_an_error>
> connectSSH.py(77)signData()
-> signed = userauth.SSHUserAuthClient.signData(self, publicKey, signData)
(Pdb) n
tests/connectSSH.py:48: DeprecationWarning: getPrivateKeyObject is
deprecated since Twisted Conch 0.9.  Use Key.fromString().
  return defer.succeed(keys.getPrivateKeyObject(data=PRIVKEY))
site-packages/twisted/conch/ssh/userauth.py:374: DeprecationWarning:
signData is deprecated since Twisted Conch 0.9.  Use
Key(obj).sign(data).
  return keys.signData(privateKey, signData)
> connectSSH.py(79)signData()
-> return signed
(Pdb) p signed
<Deferred at 0x12a1760  current result:
'\x00\x00\x00\x07ssh-rsa\x00\x00\x00\x80\xa9w-\x0c\x9e\xc3\xe8\xd0\xff\xb8\xf0\xbbi*\xecJ\x8e5\xac\x0e(@\x18\x81\x11\xf4\xff\xda\xde\xd6\x9b\xbe\xef\\\xc2\xd0F8Q\x15\xd0A\xa1!$\xe2\xe5\xa0\xf8\x12O\xa0*4\xe1)\xc2:\xbf\x16\x0b\x8a\xd2J\xa8D\x01\xdd\x10\xe3\xeb\x8b*9,\xf3#b\xff\xbf\xc9\xe9\xdc\x81\xa4B\x88$\r\x8b\xef|y\x80\r\x08\x8a*\x08x:\x0c{\xcf\x97\xb7"\xe19\x1f\xa2_wV4\xfa\x19"Vf\xcf\x80\xa7i\x98\xfa\xefM'>
</not_an_error>

After moving to the deprecated method, everything seems to work ok
with the client, but then I started to have a similar problem at the
server side, while verifying client's signature. Here is the relevant
part of the server code, which is the method requestAvatarId of the
Credential Checker I implemented:

<server_code>
# This code is based in an example that I caught from twisted website
class PublicKeyChecker():
    implements(checkers.ICredentialsChecker)
    credentialInterfaces = (credentials.ISSHPrivateKey, )

    def requestAvatarId(self, credentials):
        # I removed here the code that verified if the user is
registered in our database, to easy for you guys to understand the
relevant part of the code. Just consider that the variable user
contains the found user object.

        user_key = user.key.public_key
        if not credentials.blob == user_key:
            raise failure.Failure(error.ConchError("Wrong key."))
        if not credentials.signature:
            return failure.Failure(error.ValidPublicKey())

        pub_key = Key.fromString(data=credentials.blob)
        # Issue 3
        if verifySignature(pub_key,
                           credentials.signature,
                           credentials.sigData):
            return credentials.username
        else:
            return failure.Failure(error.ConchError("Incorrect Signature."))
    else:
        return failure.Failure(error.ConchError("Authentication Failed."))
</server_code>

3 - Then, while I get to the verifySignature method, I get the following error:

<error>
RuntimeError: unknown type of object: <RSA Public Key (1023 bits)
attr e:
	01:00:01
attr n:
	00:f7:9f:8b:18:a9:b7:67:95:5c:af:cb:64:91:52:
	64:39:1c:98:36:34:31:f2:0b:49:b8:14:8c:a4:0f:
	28:17:5b:63:d3:71:21:d4:fc:96:a7:cb:de:43:e7:
	8a:80:12:45:2b:6b:42:87:93:de:0a:bf:21:a1:35:
	56:17:a8:f9:b3:3c:bb:b8:a2:79:6b:d1:8f:e0:43:
	31:2c:23:2d:79:8c:31:a3:31:65:42:5f:ff:3e:3d:...
</error>

Which is the same exception raised by the key.type() function that
have put us at the same trouble in the client. Then, at the debuger, I
found that the correct key (which is a class with name starting with
Crypto.PublicKey) is right inside this "unknown" object, which is a
RSA Public Key in object.keyObject.keyObject! I ran the WingIDE
debugger and simply saw that, as you can see in this screenshot:
http://www.imageno.com/z99azx3v7qnzpic.html

Ok, I also get the deprecated warning while using the verifySignature
method instead of Key(obj).verify(sig, data), then I decided to test
it also just to don't make you guys wast your time with me for
nothing. I called pub_key.verify(credentials.signature,
credentials.sigData) instead of that verifySignature call, and it
returned False instead leading to a failure in authentication.

Both apps (client and server) are running inside the same machine,
consulting the same database, the same keys and user, so there it is
not reasonable to be failing if my code is correct. Maybe I missed
something. Can you guys help me?

Sorry about the very long email, but I tried to be as much verbose as
I could in order to help you guys help me.


Kind Regards,

-- 
Adriano Monteiro Marques

http://adriano-marques.blogspot.com
http://umit.sourceforge.net
py.adriano at gmail.com

"Don't stay in bed, unless you can make money in bed." - George Burns



From nathan.stocks at gmail.com  Mon Jul 28 11:50:31 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Mon, 28 Jul 2008 09:50:31 -0600
Subject: [Twisted-Python] C or Objective-C AMP?
In-Reply-To: <d06a5cd30807271919i10c5e3c7t74f32faa8ff4e534@mail.gmail.com>
References: <96c9d6a80807262142h38e82264s949fed192f8d4c9a@mail.gmail.com>
	<d06a5cd30807271919i10c5e3c7t74f32faa8ff4e534@mail.gmail.com>
Message-ID: <96c9d6a80807280850v58b56a5ic3d64899bcb534b1@mail.gmail.com>

On Sun, Jul 27, 2008 at 8:19 PM, Jonathan Lange <jml at mumak.net> wrote:
> On Sun, Jul 27, 2008 at 4:42 PM, Nathan <nathan.stocks at gmail.com> wrote:
>> 1) Does anyone know if AMP has been implemented in either C or Objective-C yet?
>>
>
> I don't think so. I've wanted to do a C one, but only as a personal exercise.

Doesn't sound like anyone else has, either, so I'll have to add it to
my "will try to do" list.  But if I have to make it myself, I'm going
to go ahead and do it in Obj-C, since it's for a Cocoa app and
anything I try to do in plain C is liable to core dump.

>> 2) Is there a better way for me to find that out than asking on this
>> list?  (Is there somewhere I should be looking first?)
>
> This is a pretty good way. You could also look at the Twisted
> Community page at https://launchpad.net/tx.

That's cool--I didn't know about that site!

~ Nathan



From dreid at dreid.org  Mon Jul 28 18:28:21 2008
From: dreid at dreid.org (David Reid)
Date: Mon, 28 Jul 2008 15:28:21 -0700
Subject: [Twisted-Python] C or Objective-C AMP?
In-Reply-To: <96c9d6a80807280850v58b56a5ic3d64899bcb534b1@mail.gmail.com>
References: <96c9d6a80807262142h38e82264s949fed192f8d4c9a@mail.gmail.com>
	<d06a5cd30807271919i10c5e3c7t74f32faa8ff4e534@mail.gmail.com>
	<96c9d6a80807280850v58b56a5ic3d64899bcb534b1@mail.gmail.com>
Message-ID: <4BC0C300-A49D-4311-8121-09B6372BCAD5@dreid.org>


On Jul 28, 2008, at 8:50 AM, Nathan wrote:

> On Sun, Jul 27, 2008 at 8:19 PM, Jonathan Lange <jml at mumak.net> wrote:
>> On Sun, Jul 27, 2008 at 4:42 PM, Nathan <nathan.stocks at gmail.com>  
>> wrote:
>>> 1) Does anyone know if AMP has been implemented in either C or  
>>> Objective-C yet?
>>>
>>
>> I don't think so. I've wanted to do a C one, but only as a personal  
>> exercise.
>
> Doesn't sound like anyone else has, either, so I'll have to add it to
> my "will try to do" list.  But if I have to make it myself, I'm going
> to go ahead and do it in Obj-C, since it's for a Cocoa app and
> anything I try to do in plain C is liable to core dump.

A good course of action would be a plain C protocol encoder/decoder  
library with an ObjC wrapper for doing the networking portions.

-David




From andrew-twisted at puzzling.org  Mon Jul 28 20:00:51 2008
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 29 Jul 2008 10:00:51 +1000
Subject: [Twisted-Python] Re: Possible bug on twisted.conch.ssh.keys?
In-Reply-To: <29ec21540807280804u208645eeq43c0a714eb7207e@mail.gmail.com>
References: <29ec21540807280629y7852498blac2119ac986c43f2@mail.gmail.com>
	<29ec21540807280804u208645eeq43c0a714eb7207e@mail.gmail.com>
Message-ID: <20080729000051.GF17343@steerpike.home.puzzling.org>

Adriano Marques wrote:
[...]
> <debug>
> >>> print m2[0] == M
> False
> >>> print m2[0]
> 5486124068793688683255936251187209270074392635932332070112001988456197381759672947165175699536362793613284725337872111744958183862744647903224103718245670299614498700710006264535590197791934024641512541262359795191593456970905950167587431434979106624455856690274067852326335446193014962274187407641892263
> >>> print M
> 5486124068793688683255936251187209270074392635932332070112001988456197381759672947165175699536362793613284725337872111744958183862744647903224103718245670299614498700710006264535590197791934024641512541262359795191593456970905950167587431434979106624455857062955565129940502062033292313613058888050118445
> >>> print type(m2[0]), type(M)
> <type 'long'> <type 'long'>
> </debug>
> 
> So, m2[0] is really different from M, but why if I'm using the same
> keys from the same place?
> 
> Hope this helps to clear the issue.

Suspiciously, they only differ in the last 50 or so decimal digits.  That
suggests a bug in the way they are being read, maybe?

As to your problems using un-deprecated APIs, a wild guess is that maybe your
PyCrypto version is too old?

-Andrew.




From py.adriano at gmail.com  Tue Jul 29 05:30:36 2008
From: py.adriano at gmail.com (Adriano Marques)
Date: Tue, 29 Jul 2008 06:30:36 -0300
Subject: [Twisted-Python] Re: Possible bug on twisted.conch.ssh.keys?
In-Reply-To: <20080729000051.GF17343@steerpike.home.puzzling.org>
References: <29ec21540807280629y7852498blac2119ac986c43f2@mail.gmail.com>
	<29ec21540807280804u208645eeq43c0a714eb7207e@mail.gmail.com>
	<20080729000051.GF17343@steerpike.home.puzzling.org>
Message-ID: <29ec21540807290230l1eb6c8ffvb7496dd60ef10cde@mail.gmail.com>

Hi Andrew,

On Mon, Jul 28, 2008 at 9:00 PM, Andrew Bennetts
<andrew-twisted at puzzling.org> wrote:
> Adriano Marques wrote:
> [...]
>> <debug>
>> >>> print m2[0] == M
>> False
>> >>> print m2[0]
>> 5486124068793688683255936251187209270074392635932332070112001988456197381759672947165175699536362793613284725337872111744958183862744647903224103718245670299614498700710006264535590197791934024641512541262359795191593456970905950167587431434979106624455856690274067852326335446193014962274187407641892263
>> >>> print M
>> 5486124068793688683255936251187209270074392635932332070112001988456197381759672947165175699536362793613284725337872111744958183862744647903224103718245670299614498700710006264535590197791934024641512541262359795191593456970905950167587431434979106624455857062955565129940502062033292313613058888050118445
>> >>> print type(m2[0]), type(M)
>> <type 'long'> <type 'long'>
>> </debug>
>
> Suspiciously, they only differ in the last 50 or so decimal digits.  That
> suggests a bug in the way they are being read, maybe?

Thanks for your response! Yes, I thought it was very strange that they
only differed in the last digits. It took me a while to figure that
out, mainly because in the debuger I couldn't see that last digits
properly.

Well, maybe the way I'm storing the keys? Is this the correct format?

<keys>
PUBKEY = "ssh-rsa
AAAAB3NzaC1yc2EAAAADAQABAAAAgQD3n4sYqbdnlVyvy2SRUmQ5HJg2NDHyC0m4FIykDygXW2PTcSHU/Jany95D54qAEkUra0KHk94KvyGhNVYXqPmzPLu4onlr0Y/gQzEsIy15jDGjMWVCX/8+PQJxMYObSKs8U1o/h5fDNeKQs4bZbrm+35eT/Kvyerqa6ab5OsIEnQ=="

PRIVKEY = """-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQD3n4sYqbdnlVyvy2SRUmQ5HJg2NDHyC0m4FIykDygXW2PTcSHU
/Jany95D54qAEkUra0KHk94KvyGhNVYXqPmzPLu4onlr0Y/gQzEsIy15jDGjMWVC
X/8+PQJxMYObSKs8U1o/h5fDNeKQs4bZbrm+35eT/Kvyerqa6ab5OsIEnQIDAQAB
AoGAK2MWASVDkG+4RMkTfu77xpH/DYhJtApMSWe4WMqbELSfoh2xetsjHpV3BVjd
iKEq43ewuYasIh/pKZDp281sqqXdg9VI9ZW7kB00FhO2wA4emCIVj6CHMl1K9NrU
9Spy40garaYnDdud79SnKtxlKQEALOwCpTEcrjGOLBTbirUCQQD/FkP1zhpOSaOy
B32CiC13W5fFfREzBxzQ3Med1i1OYtFfBEdJqv/Z7APadNN8ySI3r+UAfGatTzJI
zbiSZ2fHAkEA+IJwWpw6d8R3t7+8UgTrqdsZhLRdidO0cHcIFcnU/QYZg+iw3F+q
Tuz/mngpfb5214r8zwcwlNzsC4+fyOOYewJBAMPstRw6Rog1FW8rQ6Kbt9hCWItO
aYR5BRADU6sOk1PuoIPLhHm3xrX6CmejbcEdt5NwHYNHCZI6DxRONmL024cCQBky
eJvnXVJJfG4IJdsXHqIBUiwPcbCI47HHj+1NoqfpF2s1i8E8ffM0upH5/xL93eTq
9ck0DGv7nn9pl6Tx1sMCQCWZbWDnmEdsSoNUQZ8fyQEDoZ/2gUP+R2/WpLikwmSA
41n7cUONVthIYOZw0qQPP//PyPtMVxcYT76D5QACEK8=
-----END RSA PRIVATE KEY-----"""
</keys>

I was researching the matter, and then I saw in the Twisted book that
I should use base64.decode in order to compare the key with the
credential.blob, but when I do that the key doesn't look the same when
compared to the blob and the authentication fails. So, maybe I may be
sending the key the wrong way, but I don't have a clue of what is the
right way.

> As to your problems using un-deprecated APIs, a wild guess is that maybe your
> PyCrypto version is too old?

I think it is not the case. I have the latest one:
>>> Crypto.__version__
'2.0.1'

I'm running on a Mac OS X Leopard, if that may help you to help me ;-)
Thanks for the help!


Kind Regards,

-- 
Adriano Monteiro Marques

http://adriano-marques.blogspot.com
http://umit.sourceforge.net
py.adriano at gmail.com

"Don't stay in bed, unless you can make money in bed." - George Burns



From proppy at aminche.com  Tue Jul 29 09:48:41 2008
From: proppy at aminche.com (Johan Euphrosine)
Date: Tue, 29 Jul 2008 15:48:41 +0200
Subject: [Twisted-Python] Please recommend a RPC system working with
	twisted.
In-Reply-To: <20080721131800.GA11544@vidar.dreamhost.com>
References: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>
	<20080721131800.GA11544@vidar.dreamhost.com>
Message-ID: <730b2b9d0807290648r352b3ef7kda397d134365d85f@mail.gmail.com>

On Mon, Jul 21, 2008 at 3:18 PM, David Ripton <dripton at ripton.net> wrote:
>
> Twisted AMP meets all your requirements except C support, which you
> could probably add.  (Or maybe avoid adding by using some other way
> to bridge C computing code with Python network code, like ctypes.)
>
> Also take a look at Google's Protocol Buffers, which lacks C support but
> has C++ support.  A Twisted version called txprotobuf was recently
> announced.  (Note that Protocol Buffers isn't really a full RPC system,
> just the serialization part.)
>
> I think combining these two might work nicely, though I haven't tried it
> yet.
>

Hi, I recently added a C++ RPC implementation using boost.asio, in
txprotobuf-asio branches.

You can check it out there:
http://bazaar.launchpad.net/~proppy/txprotobuf/asio/files
bzr branch lp:~proppy/txprotobuf/asio

Hope that helps.
-- 
bou ^



From paulswartz at gmail.com  Thu Jul 31 11:19:53 2008
From: paulswartz at gmail.com (Paul Swartz)
Date: Thu, 31 Jul 2008 11:19:53 -0400
Subject: [Twisted-Python] Modifying Conch example
In-Reply-To: <20080723100055.GA24868@cs.york.ac.uk>
References: <51a7308f0807230139j6c3f333emc538012b4dee43f7@mail.gmail.com>
	<20080723100055.GA24868@cs.york.ac.uk>
Message-ID: <324cfb540807310819k4a0eb792w6960be9031dcb7b6@mail.gmail.com>

On Wed, Jul 23, 2008 at 6:00 AM, Jack Whitham <jack-tp at cs.york.ac.uk> wrote:
> On Wed, Jul 23, 2008 at 01:39:19AM -0700, Pump Kin wrote:
>> Step 1) Is really bugging me here; I can't seem to strip the need for
>> foreknowledge of the public key from the script. I can't easily
>> programmatically access that information in my use case. I do however have
>> ready access to the private key and fingerprint for verification. My
>> modified tutorial scripts just vomit.
>
> I had the same problem. Some new key management features have been
> added to Conch recently, so you now only need the private key:
>
> class ClientUserAuth(userauth.SSHUserAuthClient):
>    def getPrivateKey(self):
>        return defer.succeed(self.__getKey().keyObject)
>
> (Although I still get a deprecation warning about signData if
> I do this..)

You're getting the deprecation warning because you're not calling back
the Deferred with a Key object; you're calling it back with a PyCrypto
key object (that's what .keyObject is)

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.jot.com/
AIM: z3penguin



From py.adriano at gmail.com  Thu Jul 31 20:10:24 2008
From: py.adriano at gmail.com (Adriano Marques)
Date: Thu, 31 Jul 2008 21:10:24 -0300
Subject: [Twisted-Python] Minor bug in FTPFactory
Message-ID: <29ec21540807311710k49b43512g20b2fe12927f3586@mail.gmail.com>

Hi folks,

I found a bug at FTPFactory class. Here is the link to the code:
http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.1.0/twisted/protocols/ftp.py#L1247

The argument userAnonymous is useless as the instance variable is not
being set by the value received by this argument during object
construction.
I don't know if here is the place for such discussion. Is there
another better place for that? Also, am I supposed to send a patch
fixing that here? I don't know if this mailing list accept
attachments.


Kind Regards,

-- 
Adriano Monteiro Marques

http://adriano-marques.blogspot.com
http://umit.sourceforge.net
py.adriano at gmail.com

"Don't stay in bed, unless you can make money in bed." - George Burns



From c2k_list at gmx.de  Tue Jul  1 05:06:21 2008
From: c2k_list at gmx.de (Torsten A.)
Date: Tue, 1 Jul 2008 13:06:21 +0200
Subject: [Twisted-Python] ZSI using Twisted Web Server
Message-ID: <mailman.3.1574573410.12674.twisted-python@twistedmatrix.com>

Hello everyone,
I hope I'm not totally off topic since this is not a specific twisted
problem, but I am stuck and don't know what to do...

I need to create WS's on the fly, meaning if someone connects to a given
fixed WS (call it baseWS) and asks for specific webservice created just for
him, I need to realize this. The new webservice will then be published under
a new URL than the baseWS is.

I am using twisted's resources in twisted.web.resource to watch the path and
then create the objects handling the request specific to the entered path.
Everything works fine up to this point.

Whenever I connect to the baseWS, the render-function is called and
deligates the request to render_POST(), which I created. In render_POST() I
can access the SOAP-Envelope via request.content.read(), just as supposed
to. Now, since I have the plaintext SOAP-Envelope, I need ZSI to parse it,
extract the functions and argument of the envelope (RPC call) and call the
corresponding function. I just cannot figure out where to start in ZSI.

Can someone help me out which function to call/ class to create? I just want
to enter the ZSI process where this step is done and then give control to
ZSI, as if it received the SOAP-envelope from its own webserver.

Cheers,
Torsten




From radix at twistedmatrix.com  Tue Jul  1 05:59:56 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 1 Jul 2008 07:59:56 -0400
Subject: [Twisted-Python] ZSI using Twisted Web Server
In-Reply-To: <E1KDdhL-0001Y3-Vt@cube.twistedmatrix.com>
References: <E1KDdhL-0001Y3-Vt@cube.twistedmatrix.com>
Message-ID: <60ed19d40807010459i195a35c2m529b3caefd177b21@mail.gmail.com>

On Tue, Jul 1, 2008 at 7:06 AM, Torsten A. <c2k_list at gmx.de> wrote:
> Whenever I connect to the baseWS, the render-function is called and
> deligates the request to render_POST(), which I created. In render_POST() I
> can access the SOAP-Envelope via request.content.read(), just as supposed
> to. Now, since I have the plaintext SOAP-Envelope, I need ZSI to parse it,
> extract the functions and argument of the envelope (RPC call) and call the
> corresponding function. I just cannot figure out where to start in ZSI.
>
> Can someone help me out which function to call/ class to create? I just want
> to enter the ZSI process where this step is done and then give control to
> ZSI, as if it received the SOAP-envelope from its own webserver.

It sounds like you've figured out the Twisted side alright, but you
don't know how to use ZSI's APIs to do what you want. Perhaps you
should ask the ZSI community about that.

FWIW, I'd love to see twisted.web.soap to be updated to use ZSI, since
it's still using the crappy SOAPpy. If you come up with a general soap
service layer like twisted.web.soap, it may be interesting to include
it in Twisted.


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From nathan.stocks at gmail.com  Tue Jul  1 10:19:16 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Tue, 1 Jul 2008 10:19:16 -0600
Subject: [Twisted-Python] Returning a DeferredList?
In-Reply-To: <op.udlbx7y53oj628@l-daniel-burrs-computer.local>
References: <96c9d6a80806301452y204aa64br5e8ad15b4645bf50@mail.gmail.com>
	<18537.23616.781117.722224@jon.es>
	<96c9d6a80806301554r11ce65d9yb8064996d8db15f2@mail.gmail.com>
	<op.udlbx7y53oj628@l-daniel-burrs-computer.local>
Message-ID: <96c9d6a80807010919j4a594021v5f95670599fc9aad@mail.gmail.com>

On Mon, Jun 30, 2008 at 8:02 PM, L. Daniel Burr <ldanielburr at mac.com> wrote:
> On Mon, 30 Jun 2008 17:54:33 -0500, Nathan <nathan.stocks at gmail.com> wrote:
>
>> On Mon, Jun 30, 2008 at 4:20 PM, Terry Jones <terry at jon.es> wrote:
>>>
>>> You're not using deferreds properly. In the simple/typical case, when you
>>> call a function that returns a deferred, you will want to add (at least)
>>> a
>>
>> I don't think that's true.  Jean-Paul was the one who told me to do it
>> that way in the first place:
>>
>> http://twistedmatrix.com/pipermail/twisted-python/2008-April/017304.html
>>
>
> Terry (hi Terry) is correct here.  Your interpretation of Jean-Paul
> Calderone's message is flawed, although I certainly understand how
> the misinterpretation could occur.  There's a big difference between
> the AMP example in that thread, and the example code you posted to
> this thread.

Oh, ok.  My apologies, Terry.  After staring for awhile I think I
figured out what's going on.  First, everywhere I use this method in
real code is to provide a final AMP response (which is why it works
for me).  I think what Jean Paul meant was that the AMP code looks at
the object that the AMP responder returns, and if that object is a
deferred, then the underlying AMP code (that you don't normally see)
waits for the deferred's callback value and uses that as the actual
return value of the AMP responder.  I had mistakenly taken this as a
more general method of
returned-deferreds-resolving-into-their-callback-values, which is why
everyone is taking issue with my hasty AMP-less pseudo-code.

I must say, I've had more trouble grasping the nuances of deferreds
and other twisted objects than any other framework or language I've
ever worked with.  I also spend much more time _in vain_ going through
the docs and api reference than other languages.   At least there's a
great mailing list!

So back to my original task -- I'm trying to get that same behaviour
in AMP when using a deferred list -- but I could probably just create
a deferred and return it as the AMP response (because AMP will wait
for the deferred's callback value), and then fire a callback with my
correct answer once I've processed my deferred list.  Thus, I could
avoid figuring out how AMP handles
deferred-lists-returned-from-responders altogether.

Have I got it straight now?

~ Nathan



From terry at jon.es  Tue Jul  1 10:41:25 2008
From: terry at jon.es (Terry Jones)
Date: Tue, 1 Jul 2008 18:41:25 +0200
Subject: [Twisted-Python] Returning a DeferredList?
In-Reply-To: Your message at 10:19:16 on Tuesday, 1 July 2008
References: <96c9d6a80806301452y204aa64br5e8ad15b4645bf50@mail.gmail.com>
	<18537.23616.781117.722224@jon.es>
	<96c9d6a80806301554r11ce65d9yb8064996d8db15f2@mail.gmail.com>
	<op.udlbx7y53oj628@l-daniel-burrs-computer.local>
	<96c9d6a80807010919j4a594021v5f95670599fc9aad@mail.gmail.com>
Message-ID: <18538.24117.528819.14953@jon.es>

>>>>> "Nathan" == Nathan  <nathan.stocks at gmail.com> writes:

Nathan> Oh, ok.  My apologies, Terry.

Thanks - but no need!

Nathan> After staring for awhile I think I figured out what's going on.
Nathan> First, everywhere I use this method in real code is to provide a
Nathan> final AMP response (which is why it works for me).  I think what
Nathan> Jean Paul meant was that the AMP code looks at the object that the
Nathan> AMP responder returns, and if that object is a deferred, then the
Nathan> underlying AMP code (that you don't normally see) waits for the
Nathan> deferred's callback value and uses that as the actual return value
Nathan> of the AMP responder.

I've not looked at the code (maybe you should! :-)) but that sounds
right. And it would probably do this by just adding another callback to the
deferred.

Nathan> I had mistakenly taken this as a more general method of
Nathan> returned-deferreds-resolving-into-their-callback-values, which is
Nathan> why everyone is taking issue with my hasty AMP-less pseudo-code.

That sounds right.

Nathan> I must say, I've had more trouble grasping the nuances of deferreds
Nathan> and other twisted objects than any other framework or language I've
Nathan> ever worked with.  I also spend much more time _in vain_ going
Nathan> through the docs and api reference than other languages.  At least
Nathan> there's a great mailing list!

I know the feeling. I've found it helpful to read the various Deferred
pages quite a few times through, to play with toy examples to see the flow
of control, and also to read the source of defer.py (which isn't complex
and which I think is elegant).

Nathan> So back to my original task -- I'm trying to get that same behaviour
Nathan> in AMP when using a deferred list -- but I could probably just create
Nathan> a deferred and return it as the AMP response (because AMP will wait
Nathan> for the deferred's callback value), and then fire a callback with my
Nathan> correct answer once I've processed my deferred list.  Thus, I could
Nathan> avoid figuring out how AMP handles
Nathan> deferred-lists-returned-from-responders altogether.

That sounds right too. It might help to know that a DeferredList is just a
subclass of Deferred. So when you return a DeferredList, you're in fact
returning something that behaves like a regular Deferred. When its callback
is fired, it gets a list of status & results from all the deferreds in the
originally passed list. So if AMP knows how to handle deferreds, it can
certainly handle a DeferredList too.

Nathan> Have I got it straight now?

Yep, sounds like it.

Terry



From nathan.stocks at gmail.com  Tue Jul  1 10:57:45 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Tue, 1 Jul 2008 10:57:45 -0600
Subject: [Twisted-Python] Returning a DeferredList?
In-Reply-To: <18538.24117.528819.14953@jon.es>
References: <96c9d6a80806301452y204aa64br5e8ad15b4645bf50@mail.gmail.com>
	<18537.23616.781117.722224@jon.es>
	<96c9d6a80806301554r11ce65d9yb8064996d8db15f2@mail.gmail.com>
	<op.udlbx7y53oj628@l-daniel-burrs-computer.local>
	<96c9d6a80807010919j4a594021v5f95670599fc9aad@mail.gmail.com>
	<18538.24117.528819.14953@jon.es>
Message-ID: <96c9d6a80807010957y316f5bb5ub5aee03c764722f5@mail.gmail.com>

On Tue, Jul 1, 2008 at 10:41 AM, Terry Jones <terry at jon.es> wrote:
> That sounds right too. It might help to know that a DeferredList is just a
> subclass of Deferred. So when you return a DeferredList, you're in fact
> returning something that behaves like a regular Deferred. When its callback
> is fired, it gets a list of status & results from all the deferreds in the
> originally passed list. So if AMP knows how to handle deferreds, it can
> certainly handle a DeferredList too.

I didn't know that!  Well, I'll just go ahead and try returning my
DeferredList as my AMP response and see if the return value of the
callback gets to the other end of the AMP connection.

> Nathan> Have I got it straight now?
>
> Yep, sounds like it.

Hooray!

~ Nathan



From jeff.dyke at gmail.com  Tue Jul  1 15:53:26 2008
From: jeff.dyke at gmail.com (Jeff Dyke)
Date: Tue, 1 Jul 2008 17:53:26 -0400
Subject: [Twisted-Python] stopping daemon started via twistd
Message-ID: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>

I'm looking for a portable way to stop and start a twisted
application, specifically a  twisted.web.xmlrpc server being started
with a .tac file via twistd.  on ubuntu i can easily use the
start-stop-daemon but some other developers are using mac/windows and
i was looking for a nice way for all to be able to start and stop this
server as they make changes to it, aside from kill/killproc that is.

I noticed that the object returned after calling internet.SSLServer
server has a method called stopService, but am confused about how to
use that, after starting it with twistd.  Perhaps twistd is not the
right approach for starting?  googling around seems to bring up
arguments from years past about if this behavior belongs in twisted on
in the users app, but found no real solution...but may have missed the
obvious.

Thanks
Jeff



From exarkun at divmod.com  Tue Jul  1 16:19:18 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 1 Jul 2008 18:19:18 -0400
Subject: [Twisted-Python] stopping daemon started via twistd
In-Reply-To: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>
Message-ID: <20080701221918.4714.1304095869.divmod.quotient.15858@ohm>

On Tue, 1 Jul 2008 17:53:26 -0400, Jeff Dyke <jeff.dyke at gmail.com> wrote:
>I'm looking for a portable way to stop and start a twisted
>application, specifically a  twisted.web.xmlrpc server being started
>with a .tac file via twistd.  on ubuntu i can easily use the
>start-stop-daemon but some other developers are using mac/windows and
>i was looking for a nice way for all to be able to start and stop this
>server as they make changes to it, aside from kill/killproc that is.
>
>I noticed that the object returned after calling internet.SSLServer
>server has a method called stopService, but am confused about how to
>use that, after starting it with twistd.  Perhaps twistd is not the
>right approach for starting?  googling around seems to bring up
>arguments from years past about if this behavior belongs in twisted on
>in the users app, but found no real solution...but may have missed the
>obvious.

Perhaps the feature described at http://twistedmatrix.com/trac/ticket/2577
is what you're looking for?  Someone still needs to implement it. :)

Jean-Paul



From kevin.horn at gmail.com  Tue Jul  1 16:26:13 2008
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 1 Jul 2008 17:26:13 -0500
Subject: [Twisted-Python] stopping daemon started via twistd
In-Reply-To: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>
References: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>
Message-ID: <562bcc10807011526w25b5708rb6a7597ecbdb5bfe@mail.gmail.com>

I don't know of a portable way to do this, but...

The "stopService" method that you referenced is probably not what you want.

It stops a twisted service object, which you should have created in your
.tac file, but does not stop twistd.

I know diddly about how to stop and start service/daemon processes on MacOS,
but on Win32, you have a lot of options:
- rewrite things to use pywin32's services support...this typically involves
starting the reactor manually, though
- there's some code in the twisted svn sandbox (look under moonfallen) that
does something like this using py2exe (haven't used this though)
- take your twistd command line and use "instsrv" and "srvany" to make it
run as a service (maybe)

Good luck!

Kevin Horn


On Tue, Jul 1, 2008 at 4:53 PM, Jeff Dyke <jeff.dyke at gmail.com> wrote:

> I'm looking for a portable way to stop and start a twisted
> application, specifically a  twisted.web.xmlrpc server being started
> with a .tac file via twistd.  on ubuntu i can easily use the
> start-stop-daemon but some other developers are using mac/windows and
> i was looking for a nice way for all to be able to start and stop this
> server as they make changes to it, aside from kill/killproc that is.
>
> I noticed that the object returned after calling internet.SSLServer
> server has a method called stopService, but am confused about how to
> use that, after starting it with twistd.  Perhaps twistd is not the
> right approach for starting?  googling around seems to bring up
> arguments from years past about if this behavior belongs in twisted on
> in the users app, but found no real solution...but may have missed the
> obvious.
>
> Thanks
> Jeff
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080701/47bd620e/attachment.html>

From curtferguson at cfl.rr.com  Tue Jul  1 17:09:31 2008
From: curtferguson at cfl.rr.com (Curt)
Date: Tue, 01 Jul 2008 19:09:31 -0400
Subject: [Twisted-Python] stopping daemon started via twistd
In-Reply-To: <562bcc10807011526w25b5708rb6a7597ecbdb5bfe@mail.gmail.com>
References: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>
	<562bcc10807011526w25b5708rb6a7597ecbdb5bfe@mail.gmail.com>
Message-ID: <486AB92B.3050901@cfl.rr.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080701/576dc7f3/attachment.html>

From jeff.dyke at gmail.com  Wed Jul  2 06:39:33 2008
From: jeff.dyke at gmail.com (Jeff Dyke)
Date: Wed, 2 Jul 2008 08:39:33 -0400
Subject: [Twisted-Python] stopping daemon started via twistd
In-Reply-To: <486AB92B.3050901@cfl.rr.com>
References: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>
	<562bcc10807011526w25b5708rb6a7597ecbdb5bfe@mail.gmail.com>
	<486AB92B.3050901@cfl.rr.com>
Message-ID: <8496caf30807020539l5e1eca75t77bbe4a64c247ef8@mail.gmail.com>

On Tue, Jul 1, 2008 at 7:09 PM, Curt <curtferguson at cfl.rr.com> wrote:
> Kevin Horn wrote:
>
> I don't know of a portable way to do this, but...
>
> The "stopService" method that you referenced is probably not what you want.
> It stops a twisted service object, which you should have created in your
> .tac file, but does not stop twistd.
>
> I know diddly about how to stop and start service/daemon processes on MacOS,
> but on Win32, you have a lot of options:
> - rewrite things to use pywin32's services support...this typically involves
> starting the reactor manually, though
> - there's some code in the twisted svn sandbox (look under moonfallen) that
> does something like this using py2exe (haven't used this though)
> - take your twistd command line and use "instsrv" and "srvany" to make it
> run as a service (maybe)
>
> Good luck!
>
> Kevin Horn
>
>
> On Tue, Jul 1, 2008 at 4:53 PM, Jeff Dyke <jeff.dyke at gmail.com> wrote:
>>
>> I'm looking for a portable way to stop and start a twisted
>> application, specifically a  twisted.web.xmlrpc server being started
>> with a .tac file via twistd.  on ubuntu i can easily use the
>> start-stop-daemon but some other developers are using mac/windows and
>> i was looking for a nice way for all to be able to start and stop this
>> server as they make changes to it, aside from kill/killproc that is.
>>
>> I noticed that the object returned after calling internet.SSLServer
>> server has a method called stopService, but am confused about how to
>> use that, after starting it with twistd.  Perhaps twistd is not the
>> right approach for starting?  googling around seems to bring up
>> arguments from years past about if this behavior belongs in twisted on
>> in the users app, but found no real solution...but may have missed the
>> obvious.
>>
>> Thanks
>> Jeff
>
> I just parse the twistd.pid file and os.kill(pid, signal.SIGTERM).  This
> does a 'nice' shutdown, each service that the twistd daemon is running will
> call it's stopService method for cleanup and shut down in an orderly manner.
makes sense.

>
> PS. the signal above is in a shutdown command in the app that does any
> necessary app level clean-up first, although I guess you could put that
> clean-up in your service's stopService method too.

what do you mean is in a shutdown command in the app, how do you tell
the app to execute the shutdown command containing os.kill?   If i can
figure all this out and more, i'd love to fulfill that feature
request.

thanks

>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From curtferguson at cfl.rr.com  Wed Jul  2 07:36:45 2008
From: curtferguson at cfl.rr.com (Curt)
Date: Wed, 02 Jul 2008 09:36:45 -0400
Subject: [Twisted-Python] stopping daemon started via twistd
In-Reply-To: <8496caf30807020539l5e1eca75t77bbe4a64c247ef8@mail.gmail.com>
References: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>	<562bcc10807011526w25b5708rb6a7597ecbdb5bfe@mail.gmail.com>	<486AB92B.3050901@cfl.rr.com>
	<8496caf30807020539l5e1eca75t77bbe4a64c247ef8@mail.gmail.com>
Message-ID: <486B846D.5050007@cfl.rr.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080702/4cf360f1/attachment.html>

From paulalexwilson at gmail.com  Wed Jul  2 08:46:05 2008
From: paulalexwilson at gmail.com (Paul Wilson)
Date: Wed, 2 Jul 2008 15:46:05 +0100
Subject: [Twisted-Python] Tie two event loops
Message-ID: <3c3d11cf0807020746k3615323esfa4f049c97216ffb@mail.gmail.com>

Hi all,

I'm new to twisted but am having trouble getting my head around how to
structure my application with this new approach.

I'm creating a server that accepts client connections and then drives
the client according to a simple, line-oriented protocol. The server
sends the request (1 line), and receives a single lined result. I'd
like the server to offer an API to generate the correct request lines
to the client, and return the results (either blocking or
asynchronously). So in effect, I have two event loops, one from the
Network and one from whatever's sending the API requests (command
line?).

Can anyone offer any guidance on how to tie these two parts together?
My instinct is to have the two event loops in separate threads and
communicate through Queue.Queue, but that doesn't seem to follow the
spirit of twisted. And I guess I'd have to somehow tell the reactor to
poll the Queue object for requests, and then dispatch it to the
relevant method to send out to the client. I've looked at
threadedselectreactor but can't seem to find any decent documentation
to even decide if it's write for what I want.

Any advice would be much appreciated.

Thanks,
Paul



From andrewfr_ice at yahoo.com  Wed Jul  2 09:01:41 2008
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Wed, 2 Jul 2008 08:01:41 -0700 (PDT)
Subject: [Twisted-Python] Re: Twisted Hosting and Twisted in the Cloud 
In-Reply-To: <E1KDLnP-0005AC-RY@cube.twistedmatrix.com>
Message-ID: <275418.55995.qm@web34205.mail.mud.yahoo.com>

Hello Duncan:

>If you do, what kinds of apps (that you are currently running) do you
>want to be able to run in such environments? Simple web sites? DNS
>servers? Game servers? Chat applications? Web/data services apps?

Well I have been working on WS-BPEL (Web Service - Business Process Execution Language) processor prototypes. 

>And lastly, what hosting companies are your favorites? Where would you
>be happiest, if they supported Twisted? Would you consider switching
>to a hosting provider that *did* support Twisted?

I have been looking at Amazon EC2. A part of EC2's appeal is that there are other services that I would use (i.e., SQS). I haven't looked into the EC2 environment in depth but I just assumed that I would have to set up Twisted as well as Stackless Python as a part of a custom AMI.

Cheers,
Andrew




      



From Andy at NewWorldElectric.com  Wed Jul  2 09:50:07 2008
From: Andy at NewWorldElectric.com (Andy Fundinger)
Date: Wed, 2 Jul 2008 11:50:07 -0400
Subject: [Twisted-Python] Twisted Hosting and Twisted in the Cloud
In-Reply-To: <4868CD60.7050801@cfl.rr.com>
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<4868CD60.7050801@cfl.rr.com>
Message-ID: <37d49ed40807020850j33094e58rea772b3535742a35@mail.gmail.com>

Cloud support would be nice.  I have a twisted app(a web service to
implement a game server for Second Life) that is likely to have a rough
scaling curve with bursty usage.  Atm I'm running it on a dedicated virtual
box with plans to go to EC2 and then multiple EC2s, but a single cloud
instance would be better. I've already got a decoupled permanent datastore
which interfaces to SDB for a cloud should work from that angle too.

What would twisted look like on a cloud?  Would the main reactor still be
single threaded with threads being distributed or would we have to
rearchitect for multiple main reactors by port or path?

Andy Fundinger

On Mon, Jun 30, 2008 at 8:11 AM, Curt <curtferguson at cfl.rr.com> wrote:

>  Duncan McGreggor wrote:
>
> How many others on these lists feel that they would benefit from the
> ease of pre-installed Twisted and/or support for Twisted apps in the
> cloud?
>
>
>
>  Might be great for some folks, twisted is really easy to install, cloud
> support would be very nice.
>
>  If you do, what kinds of apps (that you are currently running) do you
> want to be able to run in such environments? Simple web sites? DNS
> servers? Game servers? Chat applications? Web/data services apps?
>
>
>
>  The main project I'm working on is a bit of all of the above.  A game with
> chat, web interfaces for various things, also a custom client is in the
> works.  Still in very early development right now so I'm hosting it
> privately, when it goes public I'll definitely be looking for something.
>
> And lastly, what hosting companies are your favorites? Where would you
> be happiest, if they supported Twisted? Would you consider switching
> to a hosting provider that *did* support Twisted?
>
>
>  Personally I *really* like Slicehost.  www.slicehost.com  I'm sure
> everyone has their favorite though.
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Blog: http://channel3b.wordpress.com
Second Life Name: Ciemaar Flintoff

I am a sig Virus. Please put me in your sig so that I can continue to
replicate.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080702/8eefde6d/attachment.html>

From c2k_list at gmx.de  Wed Jul  2 10:31:35 2008
From: c2k_list at gmx.de (Torsten A.)
Date: Wed, 2 Jul 2008 18:31:35 +0200
Subject: AW: [Twisted-Python] ZSI using Twisted Web Server
In-Reply-To: <60ed19d40807010459i195a35c2m529b3caefd177b21@mail.gmail.com>
Message-ID: <mailman.4.1574573412.12674.twisted-python@twistedmatrix.com>

Thanks for your reply.
Actually you are right, but I already did that and wasn't succesfull up to
this moment. So I thought someone here might have an idea, because he or she
has already done that, to marry ZSI and Twisted Webserver.

Cheers,
Torsten

> -----Ursprüngliche Nachricht-----
> Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] Im Auftrag von Christopher Armstrong
> Gesendet: Dienstag, 1. Juli 2008 14:00
> An: Twisted general discussion
> Betreff: Re: [Twisted-Python] ZSI using Twisted Web Server
> 
> On Tue, Jul 1, 2008 at 7:06 AM, Torsten A. <c2k_list at gmx.de> wrote:
> > Whenever I connect to the baseWS, the render-function is called and
> > deligates the request to render_POST(), which I created. In
> render_POST() I
> > can access the SOAP-Envelope via request.content.read(), just as
> supposed
> > to. Now, since I have the plaintext SOAP-Envelope, I need ZSI to parse
> it,
> > extract the functions and argument of the envelope (RPC call) and call
> the
> > corresponding function. I just cannot figure out where to start in ZSI.
> >
> > Can someone help me out which function to call/ class to create? I just
> want
> > to enter the ZSI process where this step is done and then give control
> to
> > ZSI, as if it received the SOAP-envelope from its own webserver.
> 
> It sounds like you've figured out the Twisted side alright, but you
> don't know how to use ZSI's APIs to do what you want. Perhaps you
> should ask the ZSI community about that.
> 
> FWIW, I'd love to see twisted.web.soap to be updated to use ZSI, since
> it's still using the crappy SOAPpy. If you come up with a general soap
> service layer like twisted.web.soap, it may be interesting to include
> it in Twisted.
> 
> 
> --
> Christopher Armstrong
> International Man of Twistery
> http://radix.twistedmatrix.com/
> http://twistedmatrix.com/
> http://canonical.com/
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From kevin.horn at gmail.com  Wed Jul  2 12:37:09 2008
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 2 Jul 2008 13:37:09 -0500
Subject: [Twisted-Python] Tie two event loops
In-Reply-To: <3c3d11cf0807020746k3615323esfa4f049c97216ffb@mail.gmail.com>
References: <3c3d11cf0807020746k3615323esfa4f049c97216ffb@mail.gmail.com>
Message-ID: <562bcc10807021137u179397e1t2edeb6692408c18b@mail.gmail.com>

On Wed, Jul 2, 2008 at 9:46 AM, Paul Wilson <paulalexwilson at gmail.com>
wrote:

> Hi all,
>
> I'm new to twisted but am having trouble getting my head around how to
> structure my application with this new approach.
>
> I'm creating a server that accepts client connections and then drives
> the client according to a simple, line-oriented protocol. The server
> sends the request (1 line), and receives a single lined result. I'd
> like the server to offer an API to generate the correct request lines
> to the client, and return the results (either blocking or
> asynchronously). So in effect, I have two event loops, one from the
> Network and one from whatever's sending the API requests (command
> line?).
>
> Can anyone offer any guidance on how to tie these two parts together?
> My instinct is to have the two event loops in separate threads and
> communicate through Queue.Queue, but that doesn't seem to follow the
> spirit of twisted. And I guess I'd have to somehow tell the reactor to
> poll the Queue object for requests, and then dispatch it to the
> relevant method to send out to the client. I've looked at
> threadedselectreactor but can't seem to find any decent documentation
> to even decide if it's write for what I want.
>
> Any advice would be much appreciated.
>
> Thanks,
> Paul
>

If I understand your problem correctly (and I'm not sure that I do, so keep
that in mind), then what you probably want is something like a Twisted app
using two Protocol objects (perhaps in two different "services"), one to
talk to your clients, and one to talk to your API-generator-thingy (command
line).  Then you just need a way for these to communicate...someplace to
store the state.  A Queue.Queue is probably a good choice, but I'm not
entirely sure where you would put it.  Try looking around for examples that
have multiple services and see how they share state.  I think the Twisted
book might have something useful in this regard, though I don't have it with
me ATM.

Perhaps wiser heads than mine will have better ideas/comments.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080702/8d67c929/attachment.html>

From exarkun at divmod.com  Wed Jul  2 12:46:39 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 2 Jul 2008 14:46:39 -0400
Subject: [Twisted-Python] Tie two event loops
In-Reply-To: <3c3d11cf0807020746k3615323esfa4f049c97216ffb@mail.gmail.com>
Message-ID: <20080702184639.4714.1640188407.divmod.quotient.16221@ohm>

On Wed, 2 Jul 2008 15:46:05 +0100, Paul Wilson <paulalexwilson at gmail.com> wrote:
>Hi all,
>
>I'm new to twisted but am having trouble getting my head around how to
>structure my application with this new approach.
>
>I'm creating a server that accepts client connections and then drives
>the client according to a simple, line-oriented protocol. The server
>sends the request (1 line), and receives a single lined result. I'd
>like the server to offer an API to generate the correct request lines
>to the client, and return the results (either blocking or
>asynchronously). So in effect, I have two event loops, one from the
>Network and one from whatever's sending the API requests (command
>line?).
>
>Can anyone offer any guidance on how to tie these two parts together?
>My instinct is to have the two event loops in separate threads and
>communicate through Queue.Queue, but that doesn't seem to follow the
>spirit of twisted. And I guess I'd have to somehow tell the reactor to
>poll the Queue object for requests, and then dispatch it to the
>relevant method to send out to the client. I've looked at
>threadedselectreactor but can't seem to find any decent documentation
>to even decide if it's write for what I want.
>
>Any advice would be much appreciated.
>

It's not very clear what the two different event loops are for.  You
suggest that the synchronous API might be used by the "command line",
but this doesn't necessarily require a synchronous API.  It's also not
clear if there is going to be a command line tool which is invoking this
API via Python function calls or if it will be talking to a server that
exposes some kind of network interface (since your other use case seems
to involve doing this, it might save you some work to just re-use that).

Another possibility is that the server process will have code running in
it which wants to access this functionality but wants a synchronous API.
My first suggestion is to forget about this and just use the asynchronous
API everywhere.  If that's too hard, then I suggest making two different
APIs.  This shouldn't be very hard (particularly since I think we're
talking about a function that takes a string and returns another string).
Then, code can just use the API that's right for it.

I don't know if this response has made any sense, because I really don't
feel like I understand the question.  If it didn't, maybe you can try to
clarify the question a bit, perhaps providing some examples (either in
English or in Python).

Jean-Paul



From glyph at divmod.com  Wed Jul  2 13:18:05 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 02 Jul 2008 19:18:05 -0000
Subject: [Twisted-Python] Tie two event loops
In-Reply-To: <3c3d11cf0807020746k3615323esfa4f049c97216ffb@mail.gmail.com>
References: <3c3d11cf0807020746k3615323esfa4f049c97216ffb@mail.gmail.com>
Message-ID: <20080702191805.25821.2018936192.divmod.xquotient.12048@joule.divmod.com>

On 02:46 pm, paulalexwilson at gmail.com wrote:
>I'm creating a server that accepts client connections and then drives
>the client according to a simple, line-oriented protocol. The server
>sends the request (1 line), and receives a single lined result. I'd
>like the server to offer an API to generate the correct request lines
>to the client, and return the results (either blocking or
>asynchronously). So in effect, I have two event loops, one from the
>Network and one from whatever's sending the API requests (command
>line?).

>Can anyone offer any guidance on how to tie these two parts together?

As you are new to Twisted, I would strongly recommend ignoring the 
"either blocking or asynchronously" part, and simply return the results 
asynchronously, in a Deferred.  It's *possible* to do what you want, but 
to really understand what's going on well enough to pull it off you need 
to be pretty well-versed in the event-driven programming model, as well 
as gnarly implementation specifics of Twisted itself.  In my experience, 
most places that people think that they want async+sync interfaces to 
something, they actually just want async+convenient.  Here are some ways 
you could get some benefits of a synchronous API without actually having 
one:

If you are talking about generating requests from an interactive Python 
interpreter, you might consider using the interpreter bundled with 
Conch.  Try invoking it with 'python -m twisted/conch/stdio'.  This 
command line will notice when it receives a Deferred and display a 
result when it arrives.

If you are talking about your *own* command line, consider using 
twisted.internet.stdio.StandardIO to get it to communicate with the main 
event loop.

If this isn't really about command-lines but you want to write little 
"scripts" that have extended conversations with a client and process 
lots of different results, consider using the 
twisted.internet.defer.inlineCallbacks decorator with Python 2.5 
generators.  This syntactic convenience will let you avoid defining 
functions to handle callbacks, and will therefore shorten certain kinds 
of code.

I hope one of those solutions helps!



From ddwiggins at advpubtech.com  Wed Jul  2 19:44:49 2008
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Wed, 02 Jul 2008 18:44:49 -0700
Subject: [Twisted-Python] "Failure: exceptions.TypeError: exceptions must be
 classes, instances, or strings..."
Message-ID: <g4haui$t88$1@ger.gmane.org>

I'm running an xmlrpc server, frozen with py2exe.  I'm getting an error 
message in the log file that reads:
> 2008/07/02 18:14 -0700 [-] Unhandled Error
> 	Traceback (most recent call last):
> 	Failure: exceptions.TypeError: exceptions must be classes, instances, or strings (deprecated), not type

... and that's it: no traceback, no line number, no indication where the 
problem occured.  (I'm running Twisted 2.5.0, if it makes a difference.) 
  Any idea what I can do to make it be a bit more informative?

Thanks,
-- 
Don Dwiggins
Advanced Publishing Technology




From jml at mumak.net  Wed Jul  2 19:57:27 2008
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 3 Jul 2008 11:57:27 +1000
Subject: [Twisted-Python] "Failure: exceptions.TypeError: exceptions must
	be classes, instances, or strings..."
In-Reply-To: <g4haui$t88$1@ger.gmane.org>
References: <g4haui$t88$1@ger.gmane.org>
Message-ID: <d06a5cd30807021857gf602908w5965c55fa0fce237@mail.gmail.com>

On Thu, Jul 3, 2008 at 11:44 AM, Don Dwiggins <ddwiggins at advpubtech.com> wrote:
> I'm running an xmlrpc server, frozen with py2exe.  I'm getting an error
> message in the log file that reads:
>>
>> 2008/07/02 18:14 -0700 [-] Unhandled Error
>>        Traceback (most recent call last):
>>        Failure: exceptions.TypeError: exceptions must be classes,
>> instances, or strings (deprecated), not type
>
> ... and that's it: no traceback, no line number, no indication where the
> problem occured.  (I'm running Twisted 2.5.0, if it makes a difference.)
>  Any idea what I can do to make it be a bit more informative?
>

Run it with Deferred.debug set to True. That'll give you more
information about the source of the error. You might need to work with
an unfrozen version here—I don't know for sure though.

For what it's worth, "Unhandled Error" means that a Deferred has
failed somewhere in its chain and there is no errback to handle that
failure.

jml



From jeff.dyke at gmail.com  Thu Jul  3 05:46:55 2008
From: jeff.dyke at gmail.com (Jeff Dyke)
Date: Thu, 3 Jul 2008 07:46:55 -0400
Subject: [Twisted-Python] stopping daemon started via twistd
In-Reply-To: <486B846D.5050007@cfl.rr.com>
References: <8496caf30807011453n6e4fe794kc3484cfc8c0e0208@mail.gmail.com>
	<562bcc10807011526w25b5708rb6a7597ecbdb5bfe@mail.gmail.com>
	<486AB92B.3050901@cfl.rr.com>
	<8496caf30807020539l5e1eca75t77bbe4a64c247ef8@mail.gmail.com>
	<486B846D.5050007@cfl.rr.com>
Message-ID: <8496caf30807030446t709de65dxa4395e25af551174@mail.gmail.com>

thought you might say that, i had started down that path...perhaps i'm
headed back,  thanks.

On Wed, Jul 2, 2008 at 9:36 AM, Curt <curtferguson at cfl.rr.com> wrote:
> Jeff Dyke wrote:
>
> I just parse the twistd.pid file and os.kill(pid, signal.SIGTERM).  This
> does a 'nice' shutdown, each service that the twistd daemon is running will
> call it's stopService method for cleanup and shut down in an orderly manner.
>
>
> makes sense.
>
>
>
> PS. the signal above is in a shutdown command in the app that does any
> necessary app level clean-up first, although I guess you could put that
> clean-up in your service's stopService method too.
>
>
> what do you mean is in a shutdown command in the app, how do you tell
> the app to execute the shutdown command containing os.kill?   If i can
> figure all this out and more, i'd love to fulfill that feature
> request.
>
> thanks
>
>
>     def handle_shutdown(self, user, *args):
>         if user.account.access is not AllAccess.Owner:
>             self.hideCommand(user)
>         else:
>             pid = int(file('twistd.pid', mode = 'r').readline())
>             os.kill(pid, signal.SIGUSR1)
>             user.socket.sendToClient('Normal shutdown, rotating
> logfiles.\r\n')
>             os.kill(pid, signal.SIGTERM)
>
> Here's my handle_shutdown method, slightly abbreviated.
> Just call this the same way you give the app any other input....IE: if it is
> a web app, put an admin control clickie somewhere that activates it.  If it
> is a custom client, put a control in that, if it is a direct TCP app
> (telnet) make the command parser call it when the user enters the proper
> command.
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From thomas at apestaart.org  Thu Jul  3 06:02:04 2008
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Thu, 03 Jul 2008 14:02:04 +0200
Subject: [Twisted-Python] job posting: Flumotion
Message-ID: <1215086524.17498.4.camel@ana.amantes>

Hi everyone,

I wanted to announce some new positions at Flumotion.  We're looking for
up to three "core" developers and a web developer.  The core developer
position involves Python and Twisted all the way; for the web developer
position it depends on the team's choice (currently python and Django is
being used a lot)

We're looking for talented, motivated and passionate developers who want
a healthy mix of working on a real commercial product and platform, and
the Free Software technologies they're based on.

Flumotion is a Spanish company, located in Barcelona, and part of the
Fluendo group.

Flumotion is our UNIX-based streaming server, written in Python, on top
of GStreamer and Twisted.  Our platform is a collection of Linux servers
distributed over Spain, as we're looking to expand our business further
into Europe. It handles several Gbit/s of streaming traffic.

We are also working on a commercial version of Flumotion, to be released
later this year.

We are looking for developers to:
- work on the core technology: the server, GStreamer integration, the
platform, scalability
- work on the box project: web frontend, usability
- work on the web projects: our website, our customer portal, and our
backoffice


If you like working with other hackers, on real-world projects, while
looking out over the sea and enjoying the good weather of Barcelona,
contact us! Feel free to drop me a mail at thomas (at) flumotion (dot)
com if you prefer to drop off your CV in a more human mailbox.

For more information, as well as complete job descriptions, see our
Hiring page: http://www.flumotion.com/en/hiring/


-- 
Now wait a minute...
you think I'm evil...
if I bring a group of girls on a camping trip and don't touch them?
--
GStreamer - bringing multimedia to your desktop
http://gstreamer.freedesktop.org/





From ddwiggins at advpubtech.com  Thu Jul  3 10:56:11 2008
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Thu, 03 Jul 2008 09:56:11 -0700
Subject: [Twisted-Python] Re: "Failure: exceptions.TypeError: exceptions
 must be classes, instances, or strings..."
In-Reply-To: <d06a5cd30807021857gf602908w5965c55fa0fce237@mail.gmail.com>
References: <g4haui$t88$1@ger.gmane.org>
	<d06a5cd30807021857gf602908w5965c55fa0fce237@mail.gmail.com>
Message-ID: <g4j0bc$7vl$1@ger.gmane.org>

Jonathan Lange wrote:
> Run it with Deferred.debug set to True. That'll give you more
> information about the source of the error. You might need to work with
> an unfrozen version here—I don't know for sure though.
> 
> For what it's worth, "Unhandled Error" means that a Deferred has
> failed somewhere in its chain and there is no errback to handle that
> failure.

Thanks for the reply; I'll pursue it.

I'd like to dig a bit deeper into the reason for the missing traceback, 
though.  I had a similar "exceptions must be classes" message a while 
back, and fixed it by changing Failure.raiseException in failure.py to 
raise self.__class__ rather than self.type.  That at least caused the 
original reason for the exception to be shown.

Also, that change is still in place in the frozen exe (assuming py2exe 
worked correctly), so something else is going on here.

Any ideas?

-- 
Don Dwiggins
Advanced Publishing Technology




From k7lim at cs.stanford.edu  Thu Jul  3 12:01:15 2008
From: k7lim at cs.stanford.edu (Kevin Mateo Lim)
Date: Thu, 3 Jul 2008 14:01:15 -0400
Subject: [Twisted-Python] unblocking smtp send?
Message-ID: <b066c9040807031101g3bc54296n9bfb5e7676581731@mail.gmail.com>

My webapp is blocking on this sendmail code that I wrote:

        from twisted.internet.ssl import ClientContextFactory
        from twisted.internet.defer import Deferred
        from twisted.mail.smtp import ESMTPSenderFactory
        from twisted.internet import reactor
        import twisted.python
        import sys
        import StringIO


        twisted.python.log.startLogging(sys.stdout)

        contextFactory = ClientContextFactory()
        result = Deferred()
        message_io = StringIO.StringIO(message_str)

        do_auth = bool(username and password)
        factory = ESMTPSenderFactory(username, password, from_addr,
to_list, message_io, result, contextFactory=contextFactory,
                       requireAuthentication=do_auth,
requireTransportSecurity=use_tls)
        reactor.connectTCP(smtp_host, smtp_port, factory)
        result.addCallback(lambda ign: reactor.stop())
        reactor.run(installSignalHandlers=0)


Is there any way I can allow the UI to continue, without blocking on
this code?  According to the logs, there was a 30second cap between
starting factory and stopping:

2008-07-03 13:24:16-0400 [-] Log opened.
2008-07-03 13:24:16-0400 [-] Starting factory
<twisted.mail.smtp.ESMTPSenderFactory instance at 0x203d3c8>
2008-07-03 13:24:49-0400 [ESMTPSender,client] Stopping factory
<twisted.mail.smtp.ESMTPSenderFactory instance at 0x203d3c8>
2008-07-03 13:24:49-0400 [-] Main loop terminated.



From k7lim at cs.stanford.edu  Thu Jul  3 12:45:33 2008
From: k7lim at cs.stanford.edu (Kevin Mateo Lim)
Date: Thu, 3 Jul 2008 14:45:33 -0400
Subject: [Twisted-Python] email addresses with display names in Twisted Mail?
Message-ID: <b066c9040807031145o331516cfv45181d96480b45ed@mail.gmail.com>

Hello all,

I'd like the emails that I send with my webapp to include the display name.
as per http://www.ietf.org/rfc/rfc2821.txt: User Name <local-part at domain>

When I try to include this style of address in my sendmail method, I
get this error:
<class 'twisted.mail.smtp.AddressError'>: Parse error at ' ' of
("'MyDomain Mailer' <no-reply at mydomain.com>", [' ', "Mailer'", ' ',
'<', 'no-reply', '@', 'mydomain', '.', 'com', '>'])

Any suggestions?  Because I'm stuck on this.

Thanks,
Kevin



From exarkun at divmod.com  Thu Jul  3 12:52:08 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 3 Jul 2008 14:52:08 -0400
Subject: [Twisted-Python] email addresses with display names in Twisted
	Mail?
In-Reply-To: <b066c9040807031145o331516cfv45181d96480b45ed@mail.gmail.com>
Message-ID: <20080703185208.4714.252162235.divmod.quotient.16620@ohm>

On Thu, 3 Jul 2008 14:45:33 -0400, Kevin Mateo Lim <k7lim at cs.stanford.edu> wrote:
>Hello all,
>
>I'd like the emails that I send with my webapp to include the display name.
>as per http://www.ietf.org/rfc/rfc2821.txt: User Name <local-part at domain>

This form is only supported for the VRFY command.  If you want an MUA to
display a real name along with an email address, then you need to include
that information in one of the MIME headers of the message you're sending.
SMTP isn't involved in that part of the process at all.

Jean-Paul



From k7lim at cs.stanford.edu  Thu Jul  3 12:53:52 2008
From: k7lim at cs.stanford.edu (Kevin Mateo Lim)
Date: Thu, 3 Jul 2008 14:53:52 -0400
Subject: [Twisted-Python] email addresses with display names in Twisted
	Mail?
In-Reply-To: <20080703185208.4714.252162235.divmod.quotient.16620@ohm>
References: <b066c9040807031145o331516cfv45181d96480b45ed@mail.gmail.com>
	<20080703185208.4714.252162235.divmod.quotient.16620@ohm>
Message-ID: <b066c9040807031153g2e2252c8kd90fc09f307b4920@mail.gmail.com>

Thanks Jean-Paul, I'll do that.

On Thu, Jul 3, 2008 at 2:52 PM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Thu, 3 Jul 2008 14:45:33 -0400, Kevin Mateo Lim <k7lim at cs.stanford.edu>
> wrote:
>>
>> Hello all,
>>
>> I'd like the emails that I send with my webapp to include the display
>> name.
>> as per http://www.ietf.org/rfc/rfc2821.txt: User Name <local-part at domain>
>
> This form is only supported for the VRFY command.  If you want an MUA to
> display a real name along with an email address, then you need to include
> that information in one of the MIME headers of the message you're sending.
> SMTP isn't involved in that part of the process at all.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From glyph at divmod.com  Thu Jul  3 14:45:45 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 03 Jul 2008 20:45:45 -0000
Subject: [Twisted-Python] unblocking smtp send?
In-Reply-To: <b066c9040807031101g3bc54296n9bfb5e7676581731@mail.gmail.com>
References: <b066c9040807031101g3bc54296n9bfb5e7676581731@mail.gmail.com>
Message-ID: <20080703204545.25821.1861290463.divmod.xquotient.12072@joule.divmod.com>

On 06:01 pm, k7lim at cs.stanford.edu wrote:
>My webapp is blocking on this sendmail code that I wrote:
    .
    .
    .
>        reactor.run(installSignalHandlers=0)

>Is there any way I can allow the UI to continue, without blocking on
>this code?  According to the logs, there was a 30second cap between
>starting factory and stopping:

Answering this question correctly will depend a great deal on the 
specifics of your web application's architecture and deployment.

If your web application is itself a twisted application (i.e. you are 
using twisted.web) then the reactor should already be running, and you 
shouldn't start it up.  The send won't block.

If you're using a multi-threaded deployment environment, then you can't 
safely use Twisted APIs, let alone run the reactor, from multiple 
threads, so you need to investigate some other way of sending mail from 
your application.  Having one thread run the twisted loop and doing a 
callFromThread with the function which sends mail might be the right 
thing to do.

If you're running in a CGI-style execution environment, where there are 
multiple processes but one thread per process... depending on the 
specifics of your server environment you might be able to spawn a 
subprocess to do the Twisted work and wait for it at the very end of 
your script rather than blocking in the middle, or even leave it to run 
past the end of your script.  Reporting errors to the user would be 
pretty tricky in this case though.

Whatever your decision, you should try to move the call to reactor.run() 
as far away from application code as possible.  You should not have a 
function which sends mail and then immediately calls reactor.run() 
because then it won't work in a running reactor, which should be the 
"normal" case for pretty much any code which uses Twisted.



From twisted-list at zorinholdings.com  Fri Jul  4 06:09:38 2008
From: twisted-list at zorinholdings.com (Matthew Pontefract)
Date: Fri, 04 Jul 2008 13:09:38 +0100
Subject: [Twisted-Python] Peloton Distributed Service Application Engine
Message-ID: <486E1302.2020108@zorinholdings.com>

Hello Twisted Users

I'd like to announce a new project called Peloton that may be of
interest to some of you.

Peloton is a distributed service application platform built in Python on
top of Twisted. It's goals are:

  * To make trivial the process of writing, publishing a method
  * To provide all network interfaces on any relevant protocols and
insulate the service writer from all of this
  * To provide simple, intuitive, modular mechanisms to transform the
results of a method into a form appropriate to the end user
  * To take care of managing services to ensure they stay alive, are
distributed across a grid of computers and have requests distributed
between them
  * To manage failure by re-issuing failed requests and managing the
grid of nodes in such a way that, as far as is reasonably possible, the
client is never troubled to know what lengths were gone to to return a
result
  * To provide scalability
  * To provide inherent parallelisation for trivial problems
  * To provide an event bus accessible to server-side components and clients
  * To provide for easy (hot) upgrade of components and near zero downtime

Why?

I have worked in banks, small firms, big firms, supercomputing firms. I
have worked in Java, in .NET, in Python. In almost all cases I was
writing client-server systems where the application was event driven,
needed to be resilient and would benefit from distribution for
horizontal scalability. In all cases, making the results of server side
operations available to as many different third party components as
possible (via a multitude of protocols) would have been useful. And
nowadays having data easily transformed into snippets of HTML or other
formats, perhaps for AJAX apps etc is increasingly useful.

Peloton is built to leverage the clarity, simplicity, power and rapid
development times of Python and, using the reliable and solid Twisted
core, provide the higher level features that give me all the above in a
small and easy package.

I'm not aiming to re-invent the wheel: I needed an event bus and, having
used many, I've elected to use AMQP providers, RabbitMQ being a
favourite. But this is all switchable because such functionality is
managed by Peloton kernel plugins.

Similar projects to Peloton exist: Pythomnic and Divmod-Mantissa to name
two. They provide some, not all of the functionality or do things in
ways that didn't quite suit me etc.

Peloton is new, but I've implemented the ideas previously with the same
technology at a supercomputing facility, and I presented the work at
PyCon UK 2007. It works, people like it and its use is growing there.
That's good enough for me to know that, at least for a section of the
community, this is probably of interest.

The future

Peloton is very early at the moment and much is to come: a scheduler
(cron for peloton) properly implemented distributed shared-state engine,
 different ways of deploying service code, better management tools, and
more. Tight integration with Java could extend it's use into banking
environments. A suite of services built on Peloton for job scheduling
and management will provide another avenue to explore.

It's all fun, and all interesting. It builds on the truly fantastic
work of others and hopefully makes something novel and interesting. But
that's for you to decide and I invite you to scout around the
documentation, download the source code and give it a whirl. I'd love to
hear what you think, know how you're using it and work with you to make
it better.

Where from?

http://www.peloton-grid.net is the home of Peloton and hosts
documentation and details of how to obtain Peloton. I hope it appeals
and look forward to discussing with some of you about it. We can always
meet on freenode.net, channel #peloton.

Regards
Matthew



From andy at thecablelounge.com  Fri Jul  4 11:27:23 2008
From: andy at thecablelounge.com (Andy Gayton)
Date: Fri, 4 Jul 2008 13:27:23 -0400
Subject: [Twisted-Python] Bloody Twisted VFS
In-Reply-To: <d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
Message-ID: <74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>

On Mon, Jun 30, 2008 at 9:06 PM, Jonathan Lange <jml at mumak.net> wrote:
> Yeah, that would be a good time for me, as long at it's after 2200 UTC.

Hey Jono, sorry again that we didn't get the conversation online into irc.

Here's a quick recap of what came out of the discussions:

 * The immediate goal is to settle on just enough of the core
interface to be certain it can be expanded in the directions which
will be needed in backwards compatible ways, so we can do a release.

 * open should explicit state the flags and permission it takes.  It
shouldn't use posix constants.  At first we'll just support a small
subset that makes sense for all platforms.

 * createFile should be subsumed by open - the exclusive flag should
just be apart of open's flags.

 * open should return a separate IO object, instead of self handling IO directly

 * The primitive interface for IO should be producer/consumers,
replacing readChunk, writeChunk.  This interface is primitive enough
to express all other interfaces, while still providing the opportunity
to optimize streaming performance.  The producer/consumer interface
will need to take an offset to allow readChunk and writeChunk to be
implemented.

 * we're still postponing handling of symlinks

 * we're still using getMetadata and setMetadata - its likely we want
a layer on top of using arbitrary key/value dicts for metadata, but
this can be introduced in a backwards compatible way.

 * we still need to decide whether path resolution should be moved to
a separate interface, instead of being part of the node's interface.

 * there's concern over the package name.  twisted.tree has
considerable support :)

I'll try and make these changes in the next week or so.  If you are
interested in shaping how this goes, you can track what's going on in
http://twistedmatrix.com/trac/ticket/2815 - just weigh in once the
ticket goes back to review.

cheers,
Andy.



From glyph at divmod.com  Fri Jul  4 19:49:13 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 05 Jul 2008 01:49:13 -0000
Subject: [Twisted-Python] Peloton Distributed Service Application Engine
In-Reply-To: <486E1302.2020108@zorinholdings.com>
References: <486E1302.2020108@zorinholdings.com>
Message-ID: <20080705014913.25821.264766355.divmod.xquotient.12093@joule.divmod.com>

On 4 Jul, 12:09 pm, twisted-list at zorinholdings.com wrote:
>Similar projects to Peloton exist: Pythomnic and Divmod-Mantissa to 
>name
>two. They provide some, not all of the functionality or do things in
>ways that didn't quite suit me etc.

Although I certainly have a vested interest in one of your "competitors" 
here, I am really happy to hear that more people are interested in 
solving problems in this style!  I'd like to encourage you to contribute 
fixes and maintenance "upstream" to Twisted when you discover issues 
that you'd like fixed.

Thanks for the announcement!



From exarkun at twistedmatrix.com  Sat Jul  5 22:05:08 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Jul 2008 04:05:08 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1215317108.9.1183554075@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080706/9e07426a/attachment.html>

From happybrowndog at hotmail.com  Sun Jul  6 01:14:47 2008
From: happybrowndog at hotmail.com (happybrowndog)
Date: Sun, 06 Jul 2008 00:14:47 -0700
Subject: [Twisted-Python] The right way to change a global variable in a
	Twisted server?
Message-ID: <g4prda$esr$1@ger.gmane.org>

Is there a right way to change a global variable in a Twisted server 
(this one is using PerspectiveBroker)?  What I am trying to do is allow 
perspectivebroker clients to update a global variable on the twisted 
server without colliding, ie: a counter that increases by 1 each time a 
particular call is made to the Twisted server.  Each client has a 
pb.Avatar attempting to update that global variable counter through a 
method call on the class extended on pb.Avatar.  As the server is 
select-based, am I wrong to assume that only one client is executing 
pb.Avatar calls at a time?




From jml at mumak.net  Sun Jul  6 01:32:09 2008
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 6 Jul 2008 17:32:09 +1000
Subject: [Twisted-Python] Bloody Twisted VFS
In-Reply-To: <74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
Message-ID: <d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>

On Sat, Jul 5, 2008 at 3:27 AM, Andy Gayton <andy at thecablelounge.com> wrote:
> On Mon, Jun 30, 2008 at 9:06 PM, Jonathan Lange <jml at mumak.net> wrote:
>> Yeah, that would be a good time for me, as long at it's after 2200 UTC.
>
> Hey Jono, sorry again that we didn't get the conversation online into irc.
>

That's ok. Thanks for bringing it to the mailing list :)

> Here's a quick recap of what came out of the discussions:
>
>  * The immediate goal is to settle on just enough of the core
> interface to be certain it can be expanded in the directions which
> will be needed in backwards compatible ways, so we can do a release.
>

Good idea.

>  * open should explicit state the flags and permission it takes.  It
> shouldn't use posix constants.  At first we'll just support a small
> subset that makes sense for all platforms.
>

+1

>  * createFile should be subsumed by open - the exclusive flag should
> just be apart of open's flags.
>

Having a convenience method for creating a file seems like a good idea.

>  * The primitive interface for IO should be producer/consumers,
> replacing readChunk, writeChunk.  This interface is primitive enough
> to express all other interfaces, while still providing the opportunity
> to optimize streaming performance.  The producer/consumer interface
> will need to take an offset to allow readChunk and writeChunk to be
> implemented.
>

It would be nice to have things so that readChunks and writeChunks
(plural) could be implemented, to avoid potato programming.

>  * we're still postponing handling of symlinks
>
>  * we're still using getMetadata and setMetadata - its likely we want
> a layer on top of using arbitrary key/value dicts for metadata, but
> this can be introduced in a backwards compatible way.
>

This reminds me, it would be good for VFS to have an exception for
"this operation isn't supported" (say with symlinks on fat32) and
another exception for "supportable, but not actually implemented yet".

>  * we still need to decide whether path resolution should be moved to
> a separate interface, instead of being part of the node's interface.
>

I'm not 100% sure what this means? Does this relate to possibly
combining with FilePath?

>  * there's concern over the package name.  twisted.tree has
> considerable support :)
>

I kind of like that. I'm not sure what the concern is with 'vfs' though.


> I'll try and make these changes in the next week or so.  If you are
> interested in shaping how this goes, you can track what's going on in
> http://twistedmatrix.com/trac/ticket/2815 - just weigh in once the
> ticket goes back to review.
>

Here's some random stuff that I wanted to at least mention:

- Error translation. This should translate the exception types, but it
should also translate values, so the error contains the virtual path.
- Deferreds. You don't mention them at all, but the lack of
asynchronous interfaces was one of the biggest problems we had with
twisted.vfs.
- URL Escaping. I got bitten by this recently. It's obviously not a
general VFS problem, but it's an issue with enough of them that it
should be considered when defining interfaces.
- "Decorators" like "read-only" and "chroot" could prove useful. Is
there room in the design for such things?

jml



From radix at twistedmatrix.com  Sun Jul  6 06:41:59 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 6 Jul 2008 08:41:59 -0400
Subject: [Twisted-Python] The right way to change a global variable in a
	Twisted server?
In-Reply-To: <g4prda$esr$1@ger.gmane.org>
References: <g4prda$esr$1@ger.gmane.org>
Message-ID: <60ed19d40807060541uf080a53q8d7282f05591ff67@mail.gmail.com>

On Sun, Jul 6, 2008 at 3:14 AM, happybrowndog <happybrowndog at hotmail.com> wrote:
> Is there a right way to change a global variable in a Twisted server (this
> one is using PerspectiveBroker)?  What I am trying to do is allow
> perspectivebroker clients to update a global variable on the twisted server
> without colliding, ie: a counter that increases by 1 each time a particular
> call is made to the Twisted server.  Each client has a pb.Avatar attempting
> to update that global variable counter through a method call on the class
> extended on pb.Avatar.  As the server is select-based, am I wrong to assume
> that only one client is executing pb.Avatar calls at a time?

That's correct. Twisted won't run your code in multiple threads at the
same time unless you explicitly ask it to with something like
reactor.callInThread. So updating shared state is safe.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From glyph at divmod.com  Sun Jul  6 09:12:09 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 06 Jul 2008 15:12:09 -0000
Subject: [Twisted-Python] Bloody Twisted Tree (VFS)
In-Reply-To: <d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
Message-ID: <20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>


On 07:32 am, jml at mumak.net wrote:
>On Sat, Jul 5, 2008 at 3:27 AM, Andy Gayton <andy at thecablelounge.com> 
>wrote:
>>On Mon, Jun 30, 2008 at 9:06 PM, Jonathan Lange <jml at mumak.net> wrote:

>>  * The primitive interface for IO should be producer/consumers,
>>replacing readChunk, writeChunk.  This interface is primitive enough
>>to express all other interfaces, while still providing the opportunity
>>to optimize streaming performance.  The producer/consumer interface
>>will need to take an offset to allow readChunk and writeChunk to be
>>implemented.
>
>It would be nice to have things so that readChunks and writeChunks
>(plural) could be implemented, to avoid potato programming.

I don't think this is actually going to be a practical consideration, if 
I correctly understand what you mean.  For one thing, the 
producer/consumer interface is going to be something (very vaguely) like 
this:

    remoteFile.writeFrom(producer[, offset, length])
    remoteFile.readInto(consumer[, offset, length])

This means that if you've got a really giant file, the implementation 
could pretty trivially optimize delivering it to you in the most 
efficient possible way, keeping all the relevant buffers full at every 
opportunity.  Given that stream-based I/O is somewhat inherently serial, 
it's difficult to get less potato-y than that.

writeChunks, if I understand it, would be pretty trivially implementable 
by saying

    remoteFile.writeFrom(MultiChunkProducer(chunks))

Mapping 'readChunks' and 'writeChunks' to readv and writev in my head, 
I'm not really sure what a 'readChunks' would actually do, since we copy 
memory every time we sneeze in Python anyway.  We're not going to have 
preallocated buffers to read into.
>>  * we're still using getMetadata and setMetadata - its likely we want
>>a layer on top of using arbitrary key/value dicts for metadata, but
>>this can be introduced in a backwards compatible way.

Hmm.  I don't remember agreeing to layering anything on top of 
"arbitrary key/value dicts"; I'd really like to see a completely 
different layer that specifically separates out optional features 
(xattrs, symlinks, posix ACLs(?)) into separate interfaces with specific 
methods that don't necessarily need to retrieve all the metadata at 
once, which is sort of an inherent property of having a key/value dict.

I'm OK with "still using getMetadata and setMetadata", though, since as 
you say, it can be introduced in a backwards-compatible way.  I do think 
that we should keep that discussion open (for later, after the rest of 
this work has been completed).
>This reminds me, it would be good for VFS to have an exception for
>"this operation isn't supported" (say with symlinks on fat32) and
>another exception for "supportable, but not actually implemented yet".

I don't think it's useful to distinguish between these two types of 
exception at *runtime*.  The use-case I can see for distinguishing is 
letting a programmer know that they should figure out something that 
might be tricky to implement and write some wrappers or submit some 
patches.  Perhaps a separate error message, rather than a separate 
exception type?  Do you have a different use-case?

One related thing that we spoke about in person was pushing this 
negotiation of file-system features backwards to the initialization 
step, so that applications which needed unusual filesystem attributes 
could fail quickly with a clear error message if they weren't supported 
by the underlying platform. ("WebDAV requires extended filesystem 
attributes, and your backend, SFTP, does not provide that feature.", 
"txGnuStow requires symbolic links, and your backend, the Microsoft 
Windows filesystem, does not provide that feature.")

The nice thing about this is that the default interface to the backend 
would be the one that masked everything but the most common subset of 
filesystem features, so that you couldn't *accidentally* depend on a 
feature that wasn't present everywhere, without specifically requesting 
it.  In order to get more obscure features you'd have to specify a 
longer list of interfaces.
>>  * we still need to decide whether path resolution should be moved to
>>a separate interface, instead of being part of the node's interface.

>I'm not 100% sure what this means? Does this relate to possibly
>combining with FilePath?

The tongue-in-cheek name that radix gave to this interface was 
'filepath.pathdelta'.  It's related to filepath in the sense that 
FilePath, ZipPath, et. al. could benefit from using the same interface 
to talk about relative pathnames rather than manipulating lists of 
strings.  One can, after all, abstractly do operations like "child()" 
and "parent()" without knowing a lot about the base implementation of 
the filesystem in question.
>>  * there's concern over the package name.  twisted.tree has
>>considerable support :)

>I kind of like that. I'm not sure what the concern is with 'vfs' 
>though.

"twisted.vfs" sounds incredibly boring and unpronounceable.  It would be 
the first twisted.<acronym> package, and it's not really related to any 
other technology ambiguously named "vfs".

However, this reminds me about another concern which I did not remember 
to raise while Andy was here.  Should this really be twisted.<anything> 
at all?  I'd like twisted <x> "dot products" to generally be an 
application which does something <x>-ish.  I'm aware that not every 
package follows this rule, but the ones that don't are either (A) 
unmaintained and slated for removal, or (B) part of the core, not 
independent subprojects, as "vfs" seems slated to be.

Put a different way: what should 'twistd tree' do?  My suggestion would 
be a simple multi-protocol file server: HTTP, FTP (although probably 
disable that by default), SFTP, maybe a "native" protocol for providing 
a generalized backend for any Twisted application that uses the 'tree' 
API, so that we can write a proxy that exposes every arbitrary 
combination of features from the protocols it's talking to.

If everyone agrees with this, then great.  However, if we never intend 
for this to go beyond providing an API that other systems hook into, 
maybe it should go somewhere subordinate to another project; 
twisted.internet.files perhaps?

To be clear: I don't mind doing a release that does not include this 
tool; I don't think anything should block on it.  I just want it to be 
in the cards eventually if this is the way we're going to release it.
>>I'll try and make these changes in the next week or so.  If you are
>>interested in shaping how this goes, you can track what's going on in
>>http://twistedmatrix.com/trac/ticket/2815 - just weigh in once the
>>ticket goes back to review.

>Here's some random stuff that I wanted to at least mention:
>
>- Error translation. This should translate the exception types, but it
>should also translate values, so the error contains the virtual path.

This sounds like a specific enough thing that you could file a ticket 
that described the exact behavior that you wanted.  It doesn't sound 
contentious at all to me, so unless you think there's some hidden 
confusion there... go ahead?
>- Deferreds. You don't mention them at all, but the lack of
>asynchronous interfaces was one of the biggest problems we had with
>twisted.vfs.

I believe that the consensus on asynchronicity is that all of the 
synchronous stuff should be FilePath's job.  In the glorious future of 
twisted.tree, everything will be async.  As discussed above, this 
doesn't always mean Deferreds, it also means producers and consumers.

One thing we didn't talk about in person: handling extremely large 
directories.  We had spoken about children() returning a Deferred of a 
list; I think it would be nice if it actually had a producer/consumer 
API of its own.  Maybe this is too much of a corner case to worry about 
in average applications (i.e. we could provide a give-me-a-deferred 
convenience API) but it would be nice if it were *possible* to implement 
things that were efficient against really big networked directories.
>- URL Escaping. I got bitten by this recently. It's obviously not a
>general VFS problem, but it's an issue with enough of them that it
>should be considered when defining interfaces.

I *think* that this should be pretty easily dealt with in a pretty 
generic way by having a clearly-defined set of string escaping rules 
depending on which protocol you're using.  It's a general VFS issue in 
the sense that there are escaping issues with "/" on regular 
filesystems, after all.  Or at least, there are error-reporting issues 
with characters like "/", ";", and ":" on certain FSes.
>- "Decorators" like "read-only" and "chroot" could prove useful. Is
>there room in the design for such things?

We did discuss having things like this.  Specifically we talked a lot 
during the metadata discussion about the possibility for 'decorators' 
like "provide-xattrs-with-dotfiles" and "provide-atime-by-pretending- 
its-zero".  However, we didn't spend too long on it because every 
alternative that got brought up sounded like it was a pretty amenable to 
a simple delegation approach; there just wasn't a lot of meat there. 
We'll have to check to make sure that is true in the review process, of 
course, but this is probably the thing I'm least worried about :).



From happybrowndog at hotmail.com  Sun Jul  6 11:35:01 2008
From: happybrowndog at hotmail.com (happybrowndog)
Date: Sun, 06 Jul 2008 10:35:01 -0700
Subject: [Twisted-Python] Confusion on Twisted versions
Message-ID: <g4qvoa$in2$1@ger.gmane.org>

I'm finding the Twisted version numbers confusing.  I have it installed 
on Debian, where aptitude is telling me that 2.4.4 is installed (with 
python 2.4).  However, the TwistedMatrix site states that there is an 
8.1 version.  Googling shows that people talk of 2.4x and 8.x in an 
intermingled fashion.  Can someone please clarify?




From radix at twistedmatrix.com  Sun Jul  6 11:44:16 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 6 Jul 2008 13:44:16 -0400
Subject: [Twisted-Python] Confusion on Twisted versions
In-Reply-To: <g4qvoa$in2$1@ger.gmane.org>
References: <g4qvoa$in2$1@ger.gmane.org>
Message-ID: <60ed19d40807061044t1b0c051fmf2eda63b2ffd800b@mail.gmail.com>

On Sun, Jul 6, 2008 at 1:35 PM, happybrowndog <happybrowndog at hotmail.com> wrote:
> I'm finding the Twisted version numbers confusing.  I have it installed on
> Debian, where aptitude is telling me that 2.4.4 is installed (with python
> 2.4).  However, the TwistedMatrix site states that there is an 8.1 version.
>  Googling shows that people talk of 2.4x and 8.x in an intermingled fashion.
>  Can someone please clarify?

The release after 2.5 was 8.0. That's all. They're not the same
version; it's just that there was a jump in the major number.

In case you're wondering, the major number now refers to the year the
version was released in: 8 means 2008.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From jml at mumak.net  Sun Jul  6 17:26:00 2008
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 7 Jul 2008 09:26:00 +1000
Subject: [Twisted-Python] Bloody Twisted Tree (VFS)
In-Reply-To: <20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>
Message-ID: <d06a5cd30807061626r1308f916xb1b4ee2b8432919f@mail.gmail.com>

On Mon, Jul 7, 2008 at 1:12 AM,  <glyph at divmod.com> wrote:
>
> On 07:32 am, jml at mumak.net wrote:
>>
>> On Sat, Jul 5, 2008 at 3:27 AM, Andy Gayton <andy at thecablelounge.com>
>> wrote:
>>>
>>> On Mon, Jun 30, 2008 at 9:06 PM, Jonathan Lange <jml at mumak.net> wrote:
>
>>>  * The primitive interface for IO should be producer/consumers,
>>> replacing readChunk, writeChunk.  This interface is primitive enough
>>> to express all other interfaces, while still providing the opportunity
>>> to optimize streaming performance.  The producer/consumer interface
>>> will need to take an offset to allow readChunk and writeChunk to be
>>> implemented.
>>
>> It would be nice to have things so that readChunks and writeChunks
>> (plural) could be implemented, to avoid potato programming.
>
> I don't think this is actually going to be a practical consideration, if I
> correctly understand what you mean.  For one thing, the producer/consumer
> interface is going to be something (very vaguely) like this:
>
>   remoteFile.writeFrom(producer[, offset, length])
>   remoteFile.readInto(consumer[, offset, length])
>
> This means that if you've got a really giant file, the implementation could
> pretty trivially optimize delivering it to you in the most efficient
> possible way, keeping all the relevant buffers full at every opportunity.
>  Given that stream-based I/O is somewhat inherently serial, it's difficult
> to get less potato-y than that.
>
> writeChunks, if I understand it, would be pretty trivially implementable by
> saying
>
>   remoteFile.writeFrom(MultiChunkProducer(chunks))
>
> Mapping 'readChunks' and 'writeChunks' to readv and writev in my head, I'm
> not really sure what a 'readChunks' would actually do, since we copy memory
> every time we sneeze in Python anyway.  We're not going to have preallocated
> buffers to read into.

Well, one theoretical advantage is that it can avoid roundtrips in
cases where the remote file server supports a readv-style operation. I
can't think of any servers that do this at the moment (maybe the bzr
smart server? does http 1.1 allow this?), so maybe it's not an issue.

>> This reminds me, it would be good for VFS to have an exception for
>> "this operation isn't supported" (say with symlinks on fat32) and
>> another exception for "supportable, but not actually implemented yet".
>
> I don't think it's useful to distinguish between these two types of
> exception at *runtime*.  The use-case I can see for distinguishing is
> letting a programmer know that they should figure out something that might
> be tricky to implement and write some wrappers or submit some patches.
>  Perhaps a separate error message, rather than a separate exception type?
>  Do you have a different use-case?
>

The first kind should skip tests, the second kind should fail tests.

> One related thing that we spoke about in person was pushing this negotiation
> of file-system features backwards to the initialization step, so that
> applications which needed unusual filesystem attributes could fail quickly
> with a clear error message if they weren't supported by the underlying
> platform.

This sounds like a good idea, provided that there are still clear
runtime errors and that you can skip the negotiation.

Use cases for this would be a virtual filesystem that's glued together
from other virtual filesystems, each of which has different
capabilities.

> ("WebDAV requires extended filesystem attributes, and your
> backend, SFTP, does not provide that feature.", "txGnuStow requires symbolic

Actually, some versions of SFTP do provide it. I'm not sure that there
are any implementations though :)

>>>
>>>  * we still need to decide whether path resolution should be moved to
>>> a separate interface, instead of being part of the node's interface.
>
>> I'm not 100% sure what this means? Does this relate to possibly
>> combining with FilePath?
>
> The tongue-in-cheek name that radix gave to this interface was
> 'filepath.pathdelta'.  It's related to filepath in the sense that FilePath,
> ZipPath, et. al. could benefit from using the same interface to talk about
> relative pathnames rather than manipulating lists of strings.  One can,
> after all, abstractly do operations like "child()" and "parent()" without
> knowing a lot about the base implementation of the filesystem in question.

Well, the world needs a decent one of these.

>>>
>>>  * there's concern over the package name.  twisted.tree has
>>> considerable support :)
>
>> I kind of like that. I'm not sure what the concern is with 'vfs' though.
>
> "twisted.vfs" sounds incredibly boring and unpronounceable.  It would be the
> first twisted.<acronym> package, and it's not really related to any other
> technology ambiguously named "vfs".
>
> However, this reminds me about another concern which I did not remember to
> raise while Andy was here.  Should this really be twisted.<anything> at all?
>  I'd like twisted <x> "dot products" to generally be an application which
> does something <x>-ish.  I'm aware that not every package follows this rule,
> but the ones that don't are either (A) unmaintained and slated for removal,
> or (B) part of the core, not independent subprojects, as "vfs" seems slated
> to be.
>
> Put a different way: what should 'twistd tree' do?  My suggestion would be a
> simple multi-protocol file server: HTTP, FTP (although probably disable that
> by default), SFTP, maybe a "native" protocol for providing a generalized
> backend for any Twisted application that uses the 'tree' API, so that we can
> write a proxy that exposes every arbitrary combination of features from the
> protocols it's talking to.
>
> If everyone agrees with this, then great.  However, if we never intend for
> this to go beyond providing an API that other systems hook into, maybe it
> should go somewhere subordinate to another project; twisted.internet.files
> perhaps?
>

So, this is the thing that *I'm* least worried about.

I think it should just be an API, and that it should be done so that
other Twisted components can depend on it. Beyond that, it's package
location is unimportant.

>> Here's some random stuff that I wanted to at least mention:
>>
>> - Error translation. This should translate the exception types, but it
>> should also translate values, so the error contains the virtual path.
>
> This sounds like a specific enough thing that you could file a ticket that
> described the exact behavior that you wanted.  It doesn't sound contentious
> at all to me, so unless you think there's some hidden confusion there... go
> ahead?
>>
>> - Deferreds. You don't mention them at all, but the lack of
>> asynchronous interfaces was one of the biggest problems we had with
>> twisted.vfs.
>
> I believe that the consensus on asynchronicity is that all of the
> synchronous stuff should be FilePath's job.  In the glorious future of
> twisted.tree, everything will be async.  As discussed above, this doesn't
> always mean Deferreds, it also means producers and consumers.
>

Good good.

> One thing we didn't talk about in person: handling extremely large
> directories.  We had spoken about children() returning a Deferred of a list;
> I think it would be nice if it actually had a producer/consumer API of its
> own.  Maybe this is too much of a corner case to worry about in average
> applications (i.e. we could provide a give-me-a-deferred convenience API)
> but it would be nice if it were *possible* to implement things that were
> efficient against really big networked directories.
>>

Yes. This would be very nice.

>> - URL Escaping. I got bitten by this recently. It's obviously not a
>> general VFS problem, but it's an issue with enough of them that it
>> should be considered when defining interfaces.
>
> I *think* that this should be pretty easily dealt with in a pretty generic
> way by having a clearly-defined set of string escaping rules depending on
> which protocol you're using.  It's a general VFS issue in the sense that
> there are escaping issues with "/" on regular filesystems, after all.  Or at
> least, there are error-reporting issues with characters like "/", ";", and
> ":" on certain FSes.
>

Good. I just wanted to flag it.



From andrew-twisted at puzzling.org  Sun Jul  6 20:04:58 2008
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 7 Jul 2008 12:04:58 +1000
Subject: [Twisted-Python] Bloody Twisted Tree (VFS)
In-Reply-To: <d06a5cd30807061626r1308f916xb1b4ee2b8432919f@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>
	<d06a5cd30807061626r1308f916xb1b4ee2b8432919f@mail.gmail.com>
Message-ID: <20080707020458.GB29434@steerpike.home.puzzling.org>

Jonathan Lange wrote:
> On Mon, Jul 7, 2008 at 1:12 AM,  <glyph at divmod.com> wrote:
[...]
> >
> > Mapping 'readChunks' and 'writeChunks' to readv and writev in my head, I'm
> > not really sure what a 'readChunks' would actually do, since we copy memory
> > every time we sneeze in Python anyway.  We're not going to have preallocated
> > buffers to read into.
> 
> Well, one theoretical advantage is that it can avoid roundtrips in
> cases where the remote file server supports a readv-style operation. I
> can't think of any servers that do this at the moment (maybe the bzr
> smart server? does http 1.1 allow this?), so maybe it's not an issue.

Yes, the bzr smart server does, as does HTTP (via the Range header).  On
high-latency links (or even moderate latency links) excessive round trips kill
performance.

-Andrew.




From glyph at divmod.com  Sun Jul  6 22:43:44 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 07 Jul 2008 04:43:44 -0000
Subject: [Twisted-Python] Bloody Twisted Tree (VFS)
In-Reply-To: <20080707020458.GB29434@steerpike.home.puzzling.org>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>
	<d06a5cd30807061626r1308f916xb1b4ee2b8432919f@mail.gmail.com>
	<20080707020458.GB29434@steerpike.home.puzzling.org>
Message-ID: <20080707044344.25821.1247608067.divmod.xquotient.12352@joule.divmod.com>

On 02:04 am, andrew-twisted at puzzling.org wrote:
>Jonathan Lange wrote:
>>
>>Well, one theoretical advantage is that it can avoid roundtrips in
>>cases where the remote file server supports a readv-style operation. I
>>can't think of any servers that do this at the moment (maybe the bzr
>>smart server? does http 1.1 allow this?), so maybe it's not an issue.
>
>Yes, the bzr smart server does, as does HTTP (via the Range header). 
>On
>high-latency links (or even moderate latency links) excessive round 
>trips kill
>performance.

OK, I think I can see what you mean.  I believe you'll be able to 
effectively implement "readChunks" by simply pipelining calls to 
readInto(consumer); different consumers can be read into in parallel.



From godson.g at gmail.com  Mon Jul  7 12:53:23 2008
From: godson.g at gmail.com (Godson Gera)
Date: Tue, 8 Jul 2008 00:23:23 +0530
Subject: [Twisted-Python] [SIP]
In-Reply-To: <4868AA21.2040208@enseirb.fr>
References: <4868AA21.2040208@enseirb.fr>
Message-ID: <f9822b400807071153l7c71cd46xbed3cdcd5113720@mail.gmail.com>

Hi, this little script redirects all the sip requests it receives to other
sip server residing and 192.168.1.100, this is a learning example for me as
well, but good enough to start with SIP in twisted.

from twisted.internet import reactor

from twisted.protocols import sip
from twisted.internet.protocol import ServerFactory

class SipProxy(sip.Proxy):
  def __init__(self):
  sip.Proxy.__init__(self,host='192.168.1.3',port=5060)
  self.tries=0
  def handle_request(self,message,addr):
  print message.toString()
  print dir(message)
  if message.method=='ACK':return
  r = self.responseFromRequest(301,message)
  r.addHeader("Contact","sip:192.168.1.100:5061")
  r.creationFinished()
  self.deliverResponse(r)
  print r.toString()
  print addr
  self.tries+=1

class sipfactory(ServerFactory):
  protocol=SipProxy

reactor.listenUDP(5060,SipProxy(),'192.168.1.3')
reactor.run()


Thanks & Regards,

Godson Gera
On 6/30/08, Rémi BUISSON <buisson at enseirb.fr> wrote:
>
> Hi everyone,
>
> I didn't succeed in using twisted.protocols.sip ?
>
> Do you have a simple example for me ? It will be very nice ...
>
> Thanks in advance !
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080708/b24b7b82/attachment.html>

From ross at kallisti.us  Mon Jul  7 17:08:16 2008
From: ross at kallisti.us (Ross Vandegrift)
Date: Mon, 7 Jul 2008 19:08:16 -0400
Subject: [Twisted-Python] cred realm with __init__ methods under twistd
Message-ID: <20080707230816.GA2639@kallisti.us>

Hello everyone,

I'm working on a twisted application that uses cred and pb.  I'm
having a bit of trouble getting my realm working as I want.

In my .tac file, I have this:

p = portal.Portal(CNDRealm())
c = checkers.InMemoryUsernamePasswordDatabaseDontUse(user="passwd")
p.registerChecker(c)
application = service.Application("receiver")
service = service.IServiceCollection(application)
factory = pb.PBServerFactory(p)
internet.TCPServer(8800, factory).setServiceParent(service)


My realm, CNDRealm, looks like this:

from globals import devs, queues, conditions, devices
class CNDRealm(object):
    implements(portal.IRealm)
    def __init__(self):
        for i in devs:
            queues[i] = list()
            conditions[i] = threading.Condition()
            devices[i] = CNDDevice(i[0], socket.gethostbyname(i[0]), i[1], queues[i], conditions[i])
        log.msg("Initialized devices: " % devices)

    def requestAvatar(self, aid, min, *interfaces):
        log.msg("Avatar requested: %s" % aid)
        if pb.IPerspective not in interfaces:
            raise NotImplementedError
        return pb.IPerspective, CNDSubmitter(aid), lambda: None
    


However, I never get the log message from the __init__ method.  I know
that it's not being run because those dictionaries are never populated
with the data my app needs to be in there.


1) What's going on?  I'm pretty surprised to find that an object's
__init__ doesn't seem to be getting called!

2) Is there some better place in a twistd app to put general start-up
initialization kinds of things?

-- 
Ross Vandegrift
ross at kallisti.us

"The good Christian should beware of mathematicians, and all those who
make empty prophecies. The danger already exists that the mathematicians
have made a covenant with the devil to darken the spirit and to confine
man in the bonds of Hell."
	--St. Augustine, De Genesi ad Litteram, Book II, xviii, 37



From maarten at treewalker.org  Mon Jul  7 17:25:46 2008
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Tue, 8 Jul 2008 01:25:46 +0200
Subject: [Twisted-Python] cred realm with __init__ methods under twistd
In-Reply-To: <20080707230816.GA2639@kallisti.us>
References: <20080707230816.GA2639@kallisti.us>
Message-ID: <200807080125.54221.maarten@treewalker.org>

On Tuesday 08 July 2008, Ross Vandegrift wrote:

> log.msg("Initialized devices: " % devices)

There is no placeholder (like "%s") in the message string. This will raise a 
TypeError. Probably something is swallowing this error or an earlier error 
instead of displaying it.

Bye,
		Maarten
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part.
URL: </pipermail/twisted-python/attachments/20080708/9d0accfa/attachment.sig>

From andy at thecablelounge.com  Mon Jul  7 21:02:06 2008
From: andy at thecablelounge.com (Andy Gayton)
Date: Mon, 7 Jul 2008 23:02:06 -0400
Subject: [Twisted-Python] Bloody Twisted Tree (VFS)
In-Reply-To: <20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>
Message-ID: <74e109b70807072002i5b4c604dw682d9938fa8ddc38@mail.gmail.com>

On Sun, Jul 6, 2008 at 11:12 AM,  <glyph at divmod.com> wrote:
> One related thing that we spoke about in person was pushing this negotiation
> of file-system features backwards to the initialization step, so that
> applications which needed unusual filesystem attributes could fail quickly
> with a clear error message if they weren't supported by the underlying
> platform. ("WebDAV requires extended filesystem attributes, and your
> backend, SFTP, does not provide that feature.", "txGnuStow requires symbolic
> links, and your backend, the Microsoft Windows filesystem, does not provide
> that feature.")

...

> One thing we didn't talk about in person: handling extremely large
> directories.  We had spoken about children() returning a Deferred of a list;
> I think it would be nice if it actually had a producer/consumer API of its
> own.  Maybe this is too much of a corner case to worry about in average
> applications (i.e. we could provide a give-me-a-deferred convenience API)
> but it would be nice if it were *possible* to implement things that were
> efficient against really big networked directories.

I really like these two ideas.  I've noted them down work on.  I think
we agree though that we could get a release out first, and then look
to add these?

> However, this reminds me about another concern which I did not remember to
> raise while Andy was here.  Should this really be twisted.<anything> at all?
>  I'd like twisted <x> "dot products" to generally be an application which
> does something <x>-ish.  I'm aware that not every package follows this rule,
> but the ones that don't are either (A) unmaintained and slated for removal,
> or (B) part of the core, not independent subprojects, as "vfs" seems slated
> to be.
>
> Put a different way: what should 'twistd tree' do?  My suggestion would be a
> simple multi-protocol file server: HTTP, FTP (although probably disable that
> by default), SFTP, maybe a "native" protocol for providing a generalized
> backend for any Twisted application that uses the 'tree' API, so that we can
> write a proxy that exposes every arbitrary combination of features from the
> protocols it's talking to.

I remember a chat I was having with you back in PyCon 2007, about
expanding twistd's command line interface to be able to multiplex
together several different services.

Having a collection of backend implementations available to use with
this would be cool.  But yeah, this could still be be provided without
using a twisted.<x> package.

Here's the vfs plugin so far:
http://twistedmatrix.com/trac/browser/branches/vfs-twistd-plugin-2821-2/twisted/vfs/plugin.py#L48
-- Options.longdesc talks about the above idea.  I'm ok either way on
this.

cheers,
Andy.



From andy at thecablelounge.com  Mon Jul  7 21:12:01 2008
From: andy at thecablelounge.com (Andy Gayton)
Date: Mon, 7 Jul 2008 23:12:01 -0400
Subject: [Twisted-Python] Bloody Twisted VFS
In-Reply-To: <d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
Message-ID: <74e109b70807072012r4e09cc67xdd9be6bf6b29647a@mail.gmail.com>

On Sun, Jul 6, 2008 at 3:32 AM, Jonathan Lange <jml at mumak.net> wrote:
> - Deferreds. You don't mention them at all, but the lack of
> asynchronous interfaces was one of the biggest problems we had with
> twisted.vfs.

It's pretty much Deferreds all the way:

http://twistedmatrix.com/trac/browser/branches/vfs-async-backends-2815/twisted/vfs/ivfs.py#L105

> - "Decorators" like "read-only" and "chroot" could prove useful. Is
> there room in the design for such things?

Yeah, I'm all for flavouring backends with decorators.

That's why I keep trying to sneak this guy through ;)

http://twistedmatrix.com/trac/browser/branches/vfs-async-backends-2815/twisted/vfs/_decorator.py

You get chroot for free with the current FilePath based vfs
implementation.  In the previous version (trunk) of vfs there are
force user/force group and umask decorators.  I'd like to recreate
those once we get the new version merged.

Andy.



From rajainnov at gmail.com  Tue Jul  8 03:34:50 2008
From: rajainnov at gmail.com (raja pavankumar)
Date: Tue, 8 Jul 2008 05:34:50 -0400
Subject: [Twisted-Python] uninstall Twisted-8.1.0
Message-ID: <500fd1b0807080234t59d5579fx1b1d4778ac9d83c0@mail.gmail.com>

hello,

I need to uninstall Twisted-8.1.0 and use Twisted-2.2.0.

Can some one help me as to how to uninstall Twisted-8.1.0.

Thanks in advance
rajainnov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080708/e19b67d1/attachment.html>

From adelagon at gmail.com  Tue Jul  8 03:55:15 2008
From: adelagon at gmail.com (Alvin Delagon)
Date: Tue, 8 Jul 2008 17:55:15 +0800
Subject: [Twisted-Python] uninstall Twisted-8.1.0
In-Reply-To: <500fd1b0807080234t59d5579fx1b1d4778ac9d83c0@mail.gmail.com>
References: <500fd1b0807080234t59d5579fx1b1d4778ac9d83c0@mail.gmail.com>
Message-ID: <7a01f6c00807080255k5665c9a9u39b37cf75f8cfceb@mail.gmail.com>

Just remove or rename twisted in site-packages. Normally it's located in the
/usr/lib/<python version>/site-packages/twisted.

---
Alvin

On Tue, Jul 8, 2008 at 5:34 PM, raja pavankumar <rajainnov at gmail.com> wrote:

> hello,
>
> I need to uninstall Twisted-8.1.0 and use Twisted-2.2.0.
>
> Can some one help me as to how to uninstall Twisted-8.1.0.
>
> Thanks in advance
> rajainnov
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080708/dcf64509/attachment.html>

From rajainnov at gmail.com  Tue Jul  8 04:01:41 2008
From: rajainnov at gmail.com (raja pavankumar)
Date: Tue, 8 Jul 2008 06:01:41 -0400
Subject: [Twisted-Python] uninstall Twisted-8.1.0
In-Reply-To: <7a01f6c00807080255k5665c9a9u39b37cf75f8cfceb@mail.gmail.com>
References: <500fd1b0807080234t59d5579fx1b1d4778ac9d83c0@mail.gmail.com>
	<7a01f6c00807080255k5665c9a9u39b37cf75f8cfceb@mail.gmail.com>
Message-ID: <500fd1b0807080301k18edb1eaqe3611d7741ea23f9@mail.gmail.com>

I have two dirs in that location,

(1) twisted
(2) Twisted-8.1.0-py2.4-linux-i686.egg

did you mean I need to remove these two directories?

Thanks in Advance
rajainnov

On Tue, Jul 8, 2008 at 5:55 AM, Alvin Delagon <adelagon at gmail.com> wrote:

> Just remove or rename twisted in site-packages. Normally it's located in
> the /usr/lib/<python version>/site-packages/twisted.
>
> ---
> Alvin
>
> On Tue, Jul 8, 2008 at 5:34 PM, raja pavankumar <rajainnov at gmail.com>
> wrote:
>
>> hello,
>>
>> I need to uninstall Twisted-8.1.0 and use Twisted-2.2.0.
>>
>> Can some one help me as to how to uninstall Twisted-8.1.0.
>>
>> Thanks in advance
>> rajainnov
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> http://www.alvinatorsplayground.blogspot.com/
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080708/387d1ca9/attachment.html>

From jessewoo at gmail.com  Tue Jul  8 06:07:43 2008
From: jessewoo at gmail.com (Wu Zhe)
Date: Tue, 8 Jul 2008 20:07:43 +0800
Subject: [Twisted-Python] synchronous problem
Message-ID: <8353131e0807080507k4a16d4a4m965f84b37548866f@mail.gmail.com>

Hi

I have a series of files to transfer, each followed by a line sent to
specify the file size and crc number. As we can see here I need
synchronous behavior, only after the previous file transfer complete,
can the for loop step into the next iteration to send the next file
via sender.beginFileTransfer. How can i achieve this? Here is the
problematic code:

    def import_query(self, path_list):
        number_of_files = len(path_list)
        line = '3#%s' % number_of_files
        self.client_instance.sendLine(line)

        sender = FileSender()
        sender.CHUNK_SIZE = common.chunk_size
        for path in path_list:
            f = open(path, 'rb')
            s = f.read()
            filesize = len(s)
            crc = crc32(s)
            line = '3#%s:%s' % (filesize, crc)
            self.client_instance.sendLine(line)

            def transfer_completed(lastsent):
                f.close()
                self.client_instance.setLineMode()

            # send the file
            self.setRawMode()
            d = sender.beginFileTransfer(f, self.client_instance.transport)
            d.addCallback(transfer_completed)

-- 
Wu Zhe
Best Regards



From jessewoo at gmail.com  Tue Jul  8 06:12:43 2008
From: jessewoo at gmail.com (Wu Zhe)
Date: Tue, 8 Jul 2008 20:12:43 +0800
Subject: [Twisted-Python] Re: synchronous problem
In-Reply-To: <8353131e0807080507k4a16d4a4m965f84b37548866f@mail.gmail.com>
References: <8353131e0807080507k4a16d4a4m965f84b37548866f@mail.gmail.com>
Message-ID: <8353131e0807080512v754b5143h5b6ba5ec06bca7be@mail.gmail.com>

>    def import_query(self, path_list):
>        number_of_files = len(path_list)
>        line = '3#%s' % number_of_files
>        self.client_instance.sendLine(line)
>
>        sender = FileSender()
>        sender.CHUNK_SIZE = common.chunk_size
>        for path in path_list:
>            f = open(path, 'rb')
>            s = f.read()
>            filesize = len(s)
>            crc = crc32(s)
>            line = '3#%s:%s' % (filesize, crc)
>            self.client_instance.sendLine(line)
>
>            def transfer_completed(lastsent):
>                f.close()
>                self.client_instance.setLineMode()
>
>            # send the file
>            self.setRawMode()
sorry, the above line should be: self.client_instance.setRawMode()

self.client_instance is an instance of a subclass inherited from LineReceiver.

>            d = sender.beginFileTransfer(f, self.client_instance.transport)
>            d.addCallback(transfer_completed)
>

-- 
Wu Zhe
Best Regards



From ross at kallisti.us  Tue Jul  8 07:30:48 2008
From: ross at kallisti.us (Ross Vandegrift)
Date: Tue, 8 Jul 2008 09:30:48 -0400
Subject: [Twisted-Python] cred realm with __init__ methods under twistd
In-Reply-To: <200807080125.54221.maarten@treewalker.org>
References: <20080707230816.GA2639@kallisti.us>
	<200807080125.54221.maarten@treewalker.org>
Message-ID: <20080708133048.GA7164@kallisti.us>

On Tue, Jul 08, 2008 at 01:25:46AM +0200, Maarten ter Huurne wrote:
> On Tuesday 08 July 2008, Ross Vandegrift wrote:
> 
> > log.msg("Initialized devices: " % devices)
> 
> There is no placeholder (like "%s") in the message string. This will raise a 
> TypeError. Probably something is swallowing this error or an earlier error 
> instead of displaying it.

Aha - not only that but there was another typo in there throwing an
exception in the first iteration of my setup loop.  Good catch :)

Ross



From kevin at lazyweb.ca  Tue Jul  8 07:38:05 2008
From: kevin at lazyweb.ca (kevin beckford)
Date: Tue, 8 Jul 2008 09:38:05 -0400
Subject: [Twisted-Python] uninstall Twisted-8.1.0
In-Reply-To: <500fd1b0807080301k18edb1eaqe3611d7741ea23f9@mail.gmail.com>
References: <500fd1b0807080234t59d5579fx1b1d4778ac9d83c0@mail.gmail.com>
	<7a01f6c00807080255k5665c9a9u39b37cf75f8cfceb@mail.gmail.com>
	<500fd1b0807080301k18edb1eaqe3611d7741ea23f9@mail.gmail.com>
Message-ID: <e69cb1c20807080638v776fe958l7db56c9c905335d0@mail.gmail.com>

(1) twisted
> (2) Twisted-8.1.0-py2.4-linux-i686.egg
>
> did you mean I need to remove these two directories


I believe so, yes.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080708/4a211e5e/attachment.html>

From mailing_lists at evotex.ch  Tue Jul  8 08:07:42 2008
From: mailing_lists at evotex.ch (Gabriel Rossetti)
Date: Tue, 08 Jul 2008 16:07:42 +0200
Subject: [Twisted-Python] domish.Element comparison not working
Message-ID: <487374AE.9090705@evotex.ch>

Hello everyone,

I need to compare two domish.Element objects in a unit test using trial. 
I can't compare the string xml (using .toXml()) because sometimes the 
attributes are not in the same order, and since it's a string it uses 
normal string comparison and you see the problem, but I can't use direct 
comparison either, so what should I use? If you look at the example 
below you will see what I mean :

 >>> from twisted.words.xish import domish
 >>> root = domish.Element(('', 'test'))
 >>> s = domish.Element(('', 'feed'), attribs={'name':'myname'})
 >>> s.addContent("toto")
'toto'
 >>> root.addChild(s)
<twisted.words.xish.domish.Element object at 0x848390c>
 >>> root.toXml()
u"<test><feed name='myname'>toto</feed></test>"
 >>>
 >>> root2 = domish.Element(('', 'test'))
 >>> s = domish.Element(('', 'feed'), attribs={'name':'myname'})
 >>> s.addContent("toto")
'toto'
 >>> root2.addChild(s)
<twisted.words.xish.domish.Element object at 0x84a342c>
 >>> root2.toXml()
u"<test><feed name='myname'>toto</feed></test>"
 >>>
 >>> root == root2
False

As you see, root and root2 are equal in the sense that they contain the 
same xml structure, same identifiers and the same values, but the "==" 
comparison says they are false. Am i doing something wrong or is the 
comparison just not implemented for those objects?

Thank you,
Gabriel





From kozneb at gmail.com  Tue Jul  8 08:49:40 2008
From: kozneb at gmail.com (=?UTF-8?Q?Harald_Bl=C3=A5tand?=)
Date: Tue, 8 Jul 2008 16:49:40 +0200
Subject: [Twisted-Python] synchronous problem
In-Reply-To: <8353131e0807080507k4a16d4a4m965f84b37548866f@mail.gmail.com>
References: <8353131e0807080507k4a16d4a4m965f84b37548866f@mail.gmail.com>
Message-ID: <1ff309e60807080749h2ac4a111gf7b7bcb8c572c96a@mail.gmail.com>

On Tue, Jul 8, 2008 at 2:07 PM, Wu Zhe <jessewoo at gmail.com> wrote:

> Hi
>
> I have a series of files to transfer, each followed by a line sent to
> specify the file size and crc number. As we can see here I need
> synchronous behavior, only after the previous file transfer complete,
> can the for loop step into the next iteration to send the next file
> via sender.beginFileTransfer. How can i achieve this? Here is the
> problematic code:
>
>    def import_query(self, path_list):
>        number_of_files = len(path_list)
>        line = '3#%s' % number_of_files
>        self.client_instance.sendLine(line)
>
>        sender = FileSender()
>        sender.CHUNK_SIZE = common.chunk_size
>        for path in path_list:
>            f = open(path, 'rb')
>            s = f.read()
>            filesize = len(s)
>            crc = crc32(s)
>            line = '3#%s:%s' % (filesize, crc)
>            self.client_instance.sendLine(line)
>
>            def transfer_completed(lastsent):
>                f.close()
>                self.client_instance.setLineMode()
>
>            # send the file
>            self.setRawMode()
>            d = sender.beginFileTransfer(f, self.client_instance.transport)
>            d.addCallback(transfer_completed)
>


I think I would try this (Python 2.5) -

   @defer.inlineCallbacks
   def import_query(self, path_list):
      ...
      for path in path_list:
         ...
         < delete transfer_complete() >
          ...
         yield sender.beginFileTransfer(f, self.client_instance.transport)
         f.close()
         ...


Harald
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080708/673762f3/attachment.html>

From mailing_lists at evotex.ch  Tue Jul  8 09:41:27 2008
From: mailing_lists at evotex.ch (Gabriel Rossetti)
Date: Tue, 08 Jul 2008 17:41:27 +0200
Subject: [Twisted-Python] domish.Element comparison not working
In-Reply-To: <487374AE.9090705@evotex.ch>
References: <487374AE.9090705@evotex.ch>
Message-ID: <48738AA7.7060004@evotex.ch>

Gabriel Rossetti wrote:
> Hello everyone,
>
> I need to compare two domish.Element objects in a unit test using 
> trial. I can't compare the string xml (using .toXml()) because 
> sometimes the attributes are not in the same order, and since it's a 
> string it uses normal string comparison and you see the problem, but I 
> can't use direct comparison either, so what should I use? If you look 
> at the example below you will see what I mean :
>
> >>> from twisted.words.xish import domish
> >>> root = domish.Element(('', 'test'))
> >>> s = domish.Element(('', 'feed'), attribs={'name':'myname'})
> >>> s.addContent("toto")
> 'toto'
> >>> root.addChild(s)
> <twisted.words.xish.domish.Element object at 0x848390c>
> >>> root.toXml()
> u"<test><feed name='myname'>toto</feed></test>"
> >>>
> >>> root2 = domish.Element(('', 'test'))
> >>> s = domish.Element(('', 'feed'), attribs={'name':'myname'})
> >>> s.addContent("toto")
> 'toto'
> >>> root2.addChild(s)
> <twisted.words.xish.domish.Element object at 0x84a342c>
> >>> root2.toXml()
> u"<test><feed name='myname'>toto</feed></test>"
> >>>
> >>> root == root2
> False
>
> As you see, root and root2 are equal in the sense that they contain 
> the same xml structure, same identifiers and the same values, but the 
> "==" comparison says they are false. Am i doing something wrong or is 
> the comparison just not implemented for those objects?
>
> Thank you,
> Gabriel
>
>
I went and looked and domish.Element has no __eq_(_) and __ne__() 
methods, here's a patch adding them, could someone review them and add 
them to the trunk? I made it against the trunk.

Thank you,
Gabriel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: domish.py.patch
Type: text/x-diff
Size: 1771 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20080708/3116dade/attachment-0002.patch>

From Marcin.Kasperski at softax.com.pl  Tue Jul  8 11:02:41 2008
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Tue, 08 Jul 2008 19:02:41 +0200
Subject: [Twisted-Python] Re: Twisted Hosting and Twisted in the Cloud
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
Message-ID: <87wsjwe2by.fsf@softax.com.pl>

>  * Dedicated hosts, with Twisted libs pre-installed on them
>  * Virtual hosts/"slices" with Twisted libs pre-installed on them

Installing Twisted is easy enough ;-) If I manage dedicated host or
VPS, then installing twisted is a simple command, be it easy_install,
apt-get install, or yum something....

So I do not think there is much to be gained here. Maybe cheap shared
hosting with ability to run twisted apps could make some sense, but
... VPS are cheap nowadays.

Supported installation may be different story, but it can be uneasy
to draw a line where the support really ends....

Just my 2 cents.

PS I love VPS-s ;-)

-- 
----------------------------------------------------------------------
| Marcin Kasperski   | If we are to be successful, we must still have
| http://mekk.waw.pl |    the courage to put our faith in people as
|                    |  opposed to a process. (Booch,Martin,Newkirk)
----------------------------------------------------------------------




From zooko at zooko.com  Tue Jul  8 10:59:49 2008
From: zooko at zooko.com (zooko)
Date: Tue, 8 Jul 2008 10:59:49 -0600
Subject: [Twisted-Python] uninstall Twisted-8.1.0
In-Reply-To: <500fd1b0807080301k18edb1eaqe3611d7741ea23f9@mail.gmail.com>
References: <500fd1b0807080234t59d5579fx1b1d4778ac9d83c0@mail.gmail.com>
	<7a01f6c00807080255k5665c9a9u39b37cf75f8cfceb@mail.gmail.com>
	<500fd1b0807080301k18edb1eaqe3611d7741ea23f9@mail.gmail.com>
Message-ID: <4A9C20E7-5384-4BF9-8F09-50605437260E@zooko.com>

On Jul 8, 2008, at 4:01 AM, raja pavankumar wrote:

> I have two dirs in that location,
>
> (1) twisted
> (2) Twisted-8.1.0-py2.4-linux-i686.egg
>
> did you mean I need to remove these two directories?

Each of those directories was created by a *different* install of  
Twisted, but it seems wise to remove both of them.

In addition, installing Twisted adds a few executables, usually to  
your /usr/local/bin, or if on Windows to C:\Python25\Scripts, or  
perhaps elsewhere, depending.  To completely uninstall Twisted, you  
should find and remove the following such executables, which might be  
named with '.exe' or '.bat' or '.py' extension or no extension (sorry  
I'm not certain):

im
cftp
lore
t-im
pyhtmlizer
conch
mktap
trial
manhole
tap2deb
tap2rpm
mailmail
tkconch
twistd
tapconvert
bookify
ckeygen

Regards,

Zooko




From duncan.mcgreggor at gmail.com  Tue Jul  8 12:35:57 2008
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Tue, 8 Jul 2008 13:35:57 -0500
Subject: [Twisted-Python] Twisted Hosting and Twisted in the Cloud
In-Reply-To: <37d49ed40807020850j33094e58rea772b3535742a35@mail.gmail.com>
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<4868CD60.7050801@cfl.rr.com>
	<37d49ed40807020850j33094e58rea772b3535742a35@mail.gmail.com>
Message-ID: <4327dfbd0807081135l49299d9dxa41419c170a07307@mail.gmail.com>

On Wed, Jul 2, 2008 at 10:50 AM, Andy Fundinger
<Andy at newworldelectric.com> wrote:
> Cloud support would be nice.  I have a twisted app(a web service to
> implement a game server for Second Life) that is likely to have a rough
> scaling curve with bursty usage.  Atm I'm running it on a dedicated virtual
> box with plans to go to EC2 and then multiple EC2s, but a single cloud
> instance would be better. I've already got a decoupled permanent datastore
> which interfaces to SDB for a cloud should work from that angle too.
>
> What would twisted look like on a cloud?  Would the main reactor still be
> single threaded with threads being distributed or would we have to
> rearchitect for multiple main reactors by port or path?

Hey Andy, I never replied to your question.

We've been discussing several ways in which this would be done, and so
far none of them would require application developers to do anything
too radical. By definition, if you are moving to a new architecture,
something needs to be re-architected :-) One solution that we've
prototyped simply involves creating a small "model" object and passing
it to a new service. In that instance there is very little that a
developer would have to do. With support for things like
auto-discovery and messaging, even that step might (in many cases) go
away and you'd just have to instantiate a particular service.

d



From duncan.mcgreggor at gmail.com  Tue Jul  8 13:49:26 2008
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Tue, 8 Jul 2008 14:49:26 -0500
Subject: [Twisted-Python] Re: Twisted Hosting and Twisted in the Cloud
In-Reply-To: <87wsjwe2by.fsf@softax.com.pl>
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<87wsjwe2by.fsf@softax.com.pl>
Message-ID: <4327dfbd0807081249o6759ad9fg9e80b1b8d954d006@mail.gmail.com>

On Tue, Jul 8, 2008 at 12:02 PM, Marcin Kasperski
<Marcin.Kasperski at softax.com.pl> wrote:
>>  * Dedicated hosts, with Twisted libs pre-installed on them
>>  * Virtual hosts/"slices" with Twisted libs pre-installed on them
>
> Installing Twisted is easy enough ;-) If I manage dedicated host or
> VPS, then installing twisted is a simple command, be it easy_install,
> apt-get install, or yum something....
>
> So I do not think there is much to be gained here. Maybe cheap shared
> hosting with ability to run twisted apps could make some sense, but
> ... VPS are cheap nowadays.

There are two things to consider here:

1) We've had conversations with application developers who use Twisted
and do a lot of repeated setup. They'd like it if they didn't have to
do that every time... but not only the work itself, the mental
convenience factor: they don't want to even have to think about it.
They'd like to consider it simply part of their OS. I don't know about
you, but I like the idea of a Twisted OS ;-)

2) Perception and exposure. This one's a biggie. If hosting providers
start offering explicit support for Twisted, we get an arguably
significant increase in exposure to potential users. The more people
who are aware that Twisted exists, the more that use it. The many and
obvious benefits that come as a result of this (including more
potential funding for the TSF!) are an excellent motivation.

> Supported installation may be different story, but it can be uneasy
> to draw a line where the support really ends....

That's definitely a dark art ;-)

d



From Benjamin.Rutt at gs.com  Tue Jul  8 14:11:31 2008
From: Benjamin.Rutt at gs.com (Rutt, Benjamin)
Date: Tue, 8 Jul 2008 16:11:31 -0400
Subject: [Twisted-Python] Gc of deferreds
Message-ID: <C8853DE689283B47B5D348BC33E0619311D00E76@gsmbnmp04es.firmwide.corp.gs.com>

In the following program, what prevents the deferred "d" from being
gc'd?  (nothing saves the return of foo() in any variable).  Do I need
to keep a reference to it around to ensure the callbacks will run?



#!/usr/bin/env python
from twisted.internet import defer,reactor,utils

def foo():
    d = utils.getProcessOutput('sleep', args=['2'])
    def cb(data):
      print "cb fired"
      return data
    d.addCallback(cb)
    return d

foo()

reactor.callLater(5, reactor.stop)
reactor.run()



Yet when I run it, it seems everything works fine:

$ ./spawner.py 
cb fired
$ 

I am just questioning the need to keep deferreds in memory somewhere, if
they haven't fired their callbacks yet.  Thanks.



From glyph at divmod.com  Tue Jul  8 14:28:01 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 08 Jul 2008 20:28:01 -0000
Subject: [Twisted-Python] Bloody Twisted Tree (VFS)
In-Reply-To: <74e109b70807072002i5b4c604dw682d9938fa8ddc38@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<20080706151209.25821.82528526.divmod.xquotient.12221@joule.divmod.com>
	<74e109b70807072002i5b4c604dw682d9938fa8ddc38@mail.gmail.com>
Message-ID: <20080708202801.25821.1477690916.divmod.xquotient.12552@joule.divmod.com>

On 03:02 am, andy at thecablelounge.com wrote:
>On Sun, Jul 6, 2008 at 11:12 AM,  <glyph at divmod.com> wrote:
>>One related thing that we spoke about in person was pushing this 
>>negotiation
>>of file-system features backwards to the initialization step

>>One thing we didn't talk about in person: handling extremely large
>>directories.

>I really like these two ideas.  I've noted them down work on.  I think
>we agree though that we could get a release out first, and then look
>to add these?

Absolutely.  I don't think any ideas I brought up in this email should 
be blockers.
>>what should 'twistd tree' do?

>Here's the vfs plugin so far:

Awesome, I guess my concern was pre-addressed!



From glyph at divmod.com  Tue Jul  8 14:32:10 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 08 Jul 2008 20:32:10 -0000
Subject: [Twisted-Python] Bloody Twisted VFS
In-Reply-To: <74e109b70807072012r4e09cc67xdd9be6bf6b29647a@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<74e109b70807072012r4e09cc67xdd9be6bf6b29647a@mail.gmail.com>
Message-ID: <20080708203210.25821.1906899401.divmod.xquotient.12560@joule.divmod.com>


On 03:12 am, andy at thecablelounge.com wrote:
>On Sun, Jul 6, 2008 at 3:32 AM, Jonathan Lange <jml at mumak.net> wrote:

>>- "Decorators" like "read-only" and "chroot" could prove useful. Is
>>there room in the design for such things?
>
>Yeah, I'm all for flavouring backends with decorators.
>
>That's why I keep trying to sneak this guy through ;)
>
>http://twistedmatrix.com/trac/browser/branches/vfs-async- 
>backends-2815/twisted/vfs/_decorator.py

Eehhhhh... I'm glad that name starts with "_" :).  It seems like one of 
those too-clever-by-half solutions to a relatively simple problem, where 
the cleverness will bite you later.  Something like... I would do.

The general concept of decorators is really good though.



From radix at twistedmatrix.com  Tue Jul  8 14:34:15 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 8 Jul 2008 16:34:15 -0400
Subject: [Twisted-Python] Gc of deferreds
In-Reply-To: <C8853DE689283B47B5D348BC33E0619311D00E76@gsmbnmp04es.firmwide.corp.gs.com>
References: <C8853DE689283B47B5D348BC33E0619311D00E76@gsmbnmp04es.firmwide.corp.gs.com>
Message-ID: <60ed19d40807081334t32545f35g3e325d1e42c3a6c2@mail.gmail.com>

On Tue, Jul 8, 2008 at 4:11 PM, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> #!/usr/bin/env python
> from twisted.internet import defer,reactor,utils
>
> def foo():
>    d = utils.getProcessOutput('sleep', args=['2'])
>    def cb(data):
>      print "cb fired"
>      return data
>    d.addCallback(cb)
>    return d
>
> foo()
>
> reactor.callLater(5, reactor.stop)
> reactor.run()
>
>
> Yet when I run it, it seems everything works fine:
>
> $ ./spawner.py
> cb fired
> $

getProcessOutput will cause a reference to be held to it. It needs
that reference so it can fire the deferred once the process is
complete.

> I am just questioning the need to keep deferreds in memory somewhere, if
> they haven't fired their callbacks yet.  Thanks.

Um, how will their callbacks be fired if they're not in memory any more?


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From glyph at divmod.com  Tue Jul  8 14:39:10 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 08 Jul 2008 20:39:10 -0000
Subject: [Twisted-Python] Gc of deferreds
In-Reply-To: <C8853DE689283B47B5D348BC33E0619311D00E76@gsmbnmp04es.firmwide.corp.gs.com>
References: <C8853DE689283B47B5D348BC33E0619311D00E76@gsmbnmp04es.firmwide.corp.gs.com>
Message-ID: <20080708203910.25821.744251806.divmod.xquotient.12573@joule.divmod.com>


On 08:11 pm, benjamin.rutt at gs.com wrote:
>In the following program, what prevents the deferred "d" from being
>gc'd?  (nothing saves the return of foo() in any variable).  Do I need
>to keep a reference to it around to ensure the callbacks will run?

The reactor has a reference to a process transport.

The process transport has a reference to its process protocol, 
specifically a twisted.internet.utils._BackRelay.

The process protocol has a reference to the Deferred.

When the reactor learns that there is some information available for the 
process transport, it relays it to the transport which relays it to the 
protocol which may deliver it to the Deferred.

When the event fires which causes the Deferred to be called back, some 
of these references are broken, and it can generally be GC'd (unless 
there are more references or more callbacks).
>I am just questioning the need to keep deferreds in memory somewhere, 
>if
>they haven't fired their callbacks yet.  Thanks.

I don't understand this question.  If the Deferred isn't in memory, then 
the callback will never be called.  All Deferreds which have interesting 
effects hang around for a while until those callbacks are called.  Are 
you suggesting that the Deferred get written out to disk or something, 
so it can be removed from memory?  There are a whole lot of reasons why 
*that* doesn't make any sense :).



From Benjamin.Rutt at gs.com  Tue Jul  8 15:40:10 2008
From: Benjamin.Rutt at gs.com (Rutt, Benjamin)
Date: Tue, 8 Jul 2008 17:40:10 -0400
Subject: [Twisted-Python] Gc of deferreds
In-Reply-To: <60ed19d40807081334t32545f35g3e325d1e42c3a6c2@mail.gmail.com>
References: <C8853DE689283B47B5D348BC33E0619311D00E76@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40807081334t32545f35g3e325d1e42c3a6c2@mail.gmail.com>
Message-ID: <C8853DE689283B47B5D348BC33E0619311D00E7A@gsmbnmp04es.firmwide.corp.gs.com>

Right, I was questioning the need for me, in my user code, to keep the
deferred around.  I now see that utils.getProcessOutput keeps a
reference to the deferred it returns, so it can call it later.  So
there's no need for me to make a special effort for it to remain in
memory in my user code.  Makes sense now.  Thanks.



From waterbug at pangalactic.us  Tue Jul  8 18:14:56 2008
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Tue, 08 Jul 2008 20:14:56 -0400
Subject: [Twisted-Python] Re: [Twisted-bugs] pydoctor should put the module
 name at the beginning of the document title
In-Reply-To: <E1KGNE6-00054P-K4@cube.twistedmatrix.com>
References: <E1KGNE6-00054P-K4@cube.twistedmatrix.com>
Message-ID: <48740300.1050303@pangalactic.us>

trac at twistedmatrix.com wrote:
> New submission from TimAllen <tim at commsecure.com.au>:
> [description]

pydoctor is not part of twisted -- it's a separate project,
with its own bug tracker.  See:

http://codespeak.net/~mwh/pydoctor/

Steve



From tim at commsecure.com.au  Tue Jul  8 18:31:50 2008
From: tim at commsecure.com.au (Tim Allen)
Date: Wed, 9 Jul 2008 10:31:50 +1000
Subject: [Twisted-Python] Re: [Twisted-bugs] pydoctor should put the
	module name at the beginning of the document title
In-Reply-To: <48740300.1050303@pangalactic.us>
References: <E1KGNE6-00054P-K4@cube.twistedmatrix.com>
	<48740300.1050303@pangalactic.us>
Message-ID: <20080709103150.2ba53f56@ws35.commsecure.com.au>

Stephen Waterbury <waterbug at pangalactic.us> wrote:
> trac at twistedmatrix.com wrote:
> > New submission from TimAllen <tim at commsecure.com.au>:
> > [description]
> 
> pydoctor is not part of twisted -- it's a separate project,
> with its own bug tracker.  See:
> 
> http://codespeak.net/~mwh/pydoctor/

Quoting from that page:

# Where do I report bugs?
# 
#     There is a pydoctor component in the trac instance on
#     twistedmatrix.com. Assign to mwh.

Looks like I forgot to assign the bug to mwh, though - I'll do that now.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20080709/0e67a97e/attachment.sig>

From Andy at NewWorldElectric.com  Tue Jul  8 20:16:31 2008
From: Andy at NewWorldElectric.com (Andy Fundinger)
Date: Tue, 8 Jul 2008 22:16:31 -0400
Subject: [Twisted-Python] Twisted Hosting and Twisted in the Cloud
In-Reply-To: <4327dfbd0807081135l49299d9dxa41419c170a07307@mail.gmail.com>
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<4868CD60.7050801@cfl.rr.com>
	<37d49ed40807020850j33094e58rea772b3535742a35@mail.gmail.com>
	<4327dfbd0807081135l49299d9dxa41419c170a07307@mail.gmail.com>
Message-ID: <37d49ed40807081916g56638236r83bd9f909b517be1@mail.gmail.com>

So the model's base or metaclass would handle synchronization and the rest
of the app would have to be effectively stateless with the cloud handling
routing and instantiation inherently?  That would work but be a big step
form the way I'm working today where my model handles permanent storage and
my resource instances handle non-persistent game data internally.  Do you
have a mailing list or wiki where you're laying out ideas?  I'd be
interested to join in on that.

- Andy

On Tue, Jul 8, 2008 at 2:35 PM, Duncan McGreggor <duncan.mcgreggor at gmail.com>
wrote:

> On Wed, Jul 2, 2008 at 10:50 AM, Andy Fundinger
> <Andy at newworldelectric.com> wrote:
> > Cloud support would be nice.  I have a twisted app(a web service to
> > implement a game server for Second Life) that is likely to have a rough
> > scaling curve with bursty usage.  Atm I'm running it on a dedicated
> virtual
> > box with plans to go to EC2 and then multiple EC2s, but a single cloud
> > instance would be better. I've already got a decoupled permanent
> datastore
> > which interfaces to SDB for a cloud should work from that angle too.
> >
> > What would twisted look like on a cloud?  Would the main reactor still be
> > single threaded with threads being distributed or would we have to
> > rearchitect for multiple main reactors by port or path?
>
> Hey Andy, I never replied to your question.
>
> We've been discussing several ways in which this would be done, and so
> far none of them would require application developers to do anything
> too radical. By definition, if you are moving to a new architecture,
> something needs to be re-architected :-) One solution that we've
> prototyped simply involves creating a small "model" object and passing
> it to a new service. In that instance there is very little that a
> developer would have to do. With support for things like
> auto-discovery and messaging, even that step might (in many cases) go
> away and you'd just have to instantiate a particular service.
>
> d
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Blog: http://channel3b.wordpress.com
Second Life Name: Ciemaar Flintoff

What would you do if they outlawed hypothetical questions?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080708/4ddcbfed/attachment.html>

From jessewoo at gmail.com  Tue Jul  8 20:56:49 2008
From: jessewoo at gmail.com (Wu Zhe)
Date: Wed, 9 Jul 2008 10:56:49 +0800
Subject: [Twisted-Python] synchronous problem
In-Reply-To: <1ff309e60807080749h2ac4a111gf7b7bcb8c572c96a@mail.gmail.com>
References: <8353131e0807080507k4a16d4a4m965f84b37548866f@mail.gmail.com>
	<1ff309e60807080749h2ac4a111gf7b7bcb8c572c96a@mail.gmail.com>
Message-ID: <8353131e0807081956y49f5705elfbcf48d0f32a3240@mail.gmail.com>

On Tue, Jul 8, 2008 at 10:49 PM, Harald Blåtand <kozneb at gmail.com> wrote:
>
>
> On Tue, Jul 8, 2008 at 2:07 PM, Wu Zhe <jessewoo at gmail.com> wrote:
>>
>> Hi
>>
>> I have a series of files to transfer, each followed by a line sent to
>> specify the file size and crc number. As we can see here I need
>> synchronous behavior, only after the previous file transfer complete,
>> can the for loop step into the next iteration to send the next file
>> via sender.beginFileTransfer. How can i achieve this? Here is the
>> problematic code:
>>
>>    def import_query(self, path_list):
>>        number_of_files = len(path_list)
>>        line = '3#%s' % number_of_files
>>        self.client_instance.sendLine(line)
>>
>>        sender = FileSender()
>>        sender.CHUNK_SIZE = common.chunk_size
>>        for path in path_list:
>>            f = open(path, 'rb')
>>            s = f.read()
>>            filesize = len(s)
>>            crc = crc32(s)
>>            line = '3#%s:%s' % (filesize, crc)
>>            self.client_instance.sendLine(line)
>>
>>            def transfer_completed(lastsent):
>>                f.close()
>>                self.client_instance.setLineMode()
>>
>>            # send the file
>>            self.setRawMode()
>>            d = sender.beginFileTransfer(f, self.client_instance.transport)
>>            d.addCallback(transfer_completed)
>
>
>
> I think I would try this (Python 2.5) -
>
>    @defer.inlineCallbacks
>    def import_query(self, path_list):
>       ...
>       for path in path_list:
>          ...
>          < delete transfer_complete() >
>          ...
>          yield sender.beginFileTransfer(f, self.client_instance.transport)
>          f.close()
>          ...
>
>
> Harald
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>

This is exactly what I want, thank you very much.

-- 
Wu Zhe
Best Regards

From mailing_lists at evotex.ch  Wed Jul  9 10:07:50 2008
From: mailing_lists at evotex.ch (Gabriel Rossetti)
Date: Wed, 09 Jul 2008 18:07:50 +0200
Subject: [Twisted-Python] deferToThread in unittest (trial)?
Message-ID: <4874E256.8080809@evotex.ch>

Hello,

I have a quick question, are there any known 
side-effects/problems/limitations with using deferToThread in unit-tests 
(trial)? I'm actually testing a class that uses a class that has a call 
to deferToThread, the problem is that the callbacks are never called, 
even if the function passed to deferToThread does nothing (so it should 
return).

Thanks,
Gabriel



From andy at thecablelounge.com  Wed Jul  9 13:46:37 2008
From: andy at thecablelounge.com (Andy Gayton)
Date: Wed, 9 Jul 2008 15:46:37 -0400
Subject: [Twisted-Python] Bloody Twisted VFS
In-Reply-To: <20080708203210.25821.1906899401.divmod.xquotient.12560@joule.divmod.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<74e109b70807072012r4e09cc67xdd9be6bf6b29647a@mail.gmail.com>
	<20080708203210.25821.1906899401.divmod.xquotient.12560@joule.divmod.com>
Message-ID: <74e109b70807091246k5a3bb191q4284d40bab43cff6@mail.gmail.com>

On Tue, Jul 8, 2008 at 4:32 PM,  <glyph at divmod.com> wrote:
>
> On 03:12 am, andy at thecablelounge.com wrote:
>>
>> On Sun, Jul 6, 2008 at 3:32 AM, Jonathan Lange <jml at mumak.net> wrote:
>
>>> - "Decorators" like "read-only" and "chroot" could prove useful. Is
>>> there room in the design for such things?
>>
>> Yeah, I'm all for flavouring backends with decorators.
>>
>> That's why I keep trying to sneak this guy through ;)
>>
>> http://twistedmatrix.com/trac/browser/branches/vfs-async-
>> backends-2815/twisted/vfs/_decorator.py
>
> Eehhhhh... I'm glad that name starts with "_" :).  It seems like one of
> those too-clever-by-half solutions to a relatively simple problem, where the
> cleverness will bite you later.  Something like... I would do.

Its a general solution for re-decorating the return result of methods
on decorated objects, which return new instances of themselves.  Which
is particularly handy for decorating tree node like objects, which can
return new child instances.

For example:

root = FilePathNode(FilePath('/tmp'))
root = ReadOnly(root)
root = ForceUser(root, 'nobody')

root.child('foo') # should return a read only node for /tmp/foo, which
creates new files as user nobody.

It'd be awesome to provide support for this in a simpler way.

cheers,
Andy.



From andrew-twisted at puzzling.org  Wed Jul  9 17:34:56 2008
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 10 Jul 2008 09:34:56 +1000
Subject: [Twisted-Python] Bloody Twisted VFS
In-Reply-To: <74e109b70807091246k5a3bb191q4284d40bab43cff6@mail.gmail.com>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<74e109b70807072012r4e09cc67xdd9be6bf6b29647a@mail.gmail.com>
	<20080708203210.25821.1906899401.divmod.xquotient.12560@joule.divmod.com>
	<74e109b70807091246k5a3bb191q4284d40bab43cff6@mail.gmail.com>
Message-ID: <20080709233456.GA9654@steerpike.home.puzzling.org>

Andy Gayton wrote:
[...]
> Its a general solution for re-decorating the return result of methods
> on decorated objects, which return new instances of themselves.  Which
> is particularly handy for decorating tree node like objects, which can
> return new child instances.
> 
> For example:
> 
> root = FilePathNode(FilePath('/tmp'))
> root = ReadOnly(root)
> root = ForceUser(root, 'nobody')
> 
> root.child('foo') # should return a read only node for /tmp/foo, which
> creates new files as user nobody.
> 
> It'd be awesome to provide support for this in a simpler way.

For what it's worth, bzrlib.transport.decorator provides a similar facility
for bzrlib.transport.  It's used to implement e.g. ReadonlyTransportDecorator.
There's also a ChrootTransport, which is essentially a decorator too (although
it doesn't use bzrlib.transport.decorator because the generic decorator facility
didn't provide a sane way to track what the root of the chroot should be).

We also have lots of decorators just for testing, e.g.
FakeNFSTransportDecorator, UnlistableTransportDecorator,
FakeVFATTransportDecorator, etc.

-Andrew.




From rodprice at raytheon.com  Wed Jul  9 19:26:44 2008
From: rodprice at raytheon.com (Rodney D Price)
Date: Wed, 9 Jul 2008 19:26:44 -0600
Subject: [Twisted-Python] twisted and functional programming idioms
Message-ID: <OF4CC5FE74.368A46BA-ON87257482.0004E186-87257482.0007F094@mck.us.ray.com>

I'm just getting started with Twisted, and trying to find
my way around.  I've done quite a bit of functional 
programming (Haskell), where recursion is a very
common idiom.  I keep finding myself heading in that
direction as I try to understand how to use Twisted.
For example, if I wanted to write a loop in Haskell
that woke up once a second and did something, I
might write

main = heartbeat
heartbeat = do
  sleep 1000
  doSomething
  heartbeat

This code first sleeps for one second, then does
something, then calls itself.  (The Haskell compiler
knows how to keep the stack from overflowing here,
in case anyone is wondering.)

So if I wanted to do something similar in Twisted,
my first inclination is to use callLater,

def heartbeat(reactor):
    doSomething()
    reactor.callLater(1, heartbeat, reactor)
reactor.run()

But then my head starts hurting, because I keep 
thinking that I have to set up all the callbacks
before I start the reactor.  This code sets callbacks 
at runtime.  Will that be a problem?

-Rod

P.S.  I know there's probably a function somewhere
in Twisted to do this already, but I'm not asking how
to do this particular thing.  I'm really asking if thinking
in terms of recursion is a useful Twisted idiom.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080709/f97116ff/attachment.html>

From rodprice at raytheon.com  Wed Jul  9 19:32:47 2008
From: rodprice at raytheon.com (Rodney D Price)
Date: Wed, 9 Jul 2008 19:32:47 -0600
Subject: [Twisted-Python] OSX Leopard version still at 8.0.1?
Message-ID: <OF6F08F9A0.7EAD671F-ON87257482.00079BCD-87257482.00087E4F@mck.us.ray.com>

Is there a problem with 8.1.0 on Leopard (OSX 10.5)?
I ran trial twisted on 8.1.0 and got some errors, but 
being new at Twisted, I'm not sure whether the errors
were real or I just did something wrong.

I'm primarily interested in twisted.word XMPP support.

-Rod

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080709/33ad7c24/attachment.html>

From mithrandi at mithrandi.net  Wed Jul  9 19:42:21 2008
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 10 Jul 2008 03:42:21 +0200
Subject: [Twisted-Python] twisted and functional programming idioms
In-Reply-To: <OF4CC5FE74.368A46BA-ON87257482.0004E186-87257482.0007F094@mck.us.ray.com>
References: <OF4CC5FE74.368A46BA-ON87257482.0004E186-87257482.0007F094@mck.us.ray.com>
Message-ID: <20080710014220.GA10189@mithrandi.net>

* Rodney D Price <rodprice at raytheon.com> [2008-07-09 19:26:44 -0600]:

> So if I wanted to do something similar in Twisted,
> my first inclination is to use callLater,
> 
> def heartbeat(reactor):
>     doSomething()
>     reactor.callLater(1, heartbeat, reactor)
> reactor.run()
> 
> But then my head starts hurting, because I keep thinking that I have
> to set up all the callbacks before I start the reactor.  This code
> sets callbacks at runtime.  Will that be a problem?

This code should work perfectly; there's nothing wrong with invoking
callLater while the reactor is running.

> P.S.  I know there's probably a function somewhere in Twisted to do
> this already, but I'm not asking how to do this particular thing.  I'm
> really asking if thinking in terms of recursion is a useful Twisted
> idiom.

LoopingCall is the already-implemented version of this. I'm not really
sure if thinking in terms of recursion is a useful Twisted idiom,
though. On the one hand, Python doesn't handle lots of recursion very
well; on the other hand, this isn't really Python function recursion.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20080710/06774ae6/attachment.sig>

From glyph at divmod.com  Wed Jul  9 20:07:03 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 10 Jul 2008 02:07:03 -0000
Subject: [Twisted-Python] OSX Leopard version still at 8.0.1?
In-Reply-To: <OF6F08F9A0.7EAD671F-ON87257482.00079BCD-87257482.00087E4F@mck.us.ray.com>
References: <OF6F08F9A0.7EAD671F-ON87257482.00079BCD-87257482.00087E4F@mck.us.ray.com>
Message-ID: <20080710020703.25821.1979763326.divmod.xquotient.12617@joule.divmod.com>


On 01:32 am, rodprice at raytheon.com wrote:
>Is there a problem with 8.1.0 on Leopard (OSX 10.5)?
>I ran trial twisted on 8.1.0 and got some errors, but
>being new at Twisted, I'm not sure whether the errors
>were real or I just did something wrong.

Whenever reporting a problem (even if it might be a known problem) it's 
best to include a copy of the errors that were generated.  Then we can 
easily compare them to the known errors instead of guessing :).

MacOS X is a supported platform, however: see 
http://buildbot.twistedmatrix.com/builders/osx10.5-py2.5-select



From andy at thecablelounge.com  Wed Jul  9 20:24:38 2008
From: andy at thecablelounge.com (Andy Gayton)
Date: Wed, 9 Jul 2008 22:24:38 -0400
Subject: [Twisted-Python] Bloody Twisted VFS
In-Reply-To: <20080709233456.GA9654@steerpike.home.puzzling.org>
References: <74e109b70806281526k2a0ac4eaua7a3d7bc4721c8cc@mail.gmail.com>
	<20080628223337.25821.814910200.divmod.xquotient.11586@joule.divmod.com>
	<74e109b70806301701k772b0929u809a1be715b0d68a@mail.gmail.com>
	<d06a5cd30806301806j4b676168if1f6404f7fc5cdea@mail.gmail.com>
	<74e109b70807041027o662e9ad6q197ba34cdb2ecc5e@mail.gmail.com>
	<d06a5cd30807060032v5bf8c178qeeae5bac23f394cb@mail.gmail.com>
	<74e109b70807072012r4e09cc67xdd9be6bf6b29647a@mail.gmail.com>
	<20080708203210.25821.1906899401.divmod.xquotient.12560@joule.divmod.com>
	<74e109b70807091246k5a3bb191q4284d40bab43cff6@mail.gmail.com>
	<20080709233456.GA9654@steerpike.home.puzzling.org>
Message-ID: <74e109b70807091924w779a261chd4d4f7f61fde16a1@mail.gmail.com>

On Wed, Jul 9, 2008 at 7:34 PM, Andrew Bennetts
<andrew-twisted at puzzling.org> wrote:
> Andy Gayton wrote:
> [...]
>> Its a general solution for re-decorating the return result of methods
>> on decorated objects, which return new instances of themselves.  Which
>> is particularly handy for decorating tree node like objects, which can
>> return new child instances.
>>
>> For example:
>>
>> root = FilePathNode(FilePath('/tmp'))
>> root = ReadOnly(root)
>> root = ForceUser(root, 'nobody')
>>
>> root.child('foo') # should return a read only node for /tmp/foo, which
>> creates new files as user nobody.
>>
>> It'd be awesome to provide support for this in a simpler way.
>
> For what it's worth, bzrlib.transport.decorator provides a similar facility
> for bzrlib.transport.  It's used to implement e.g. ReadonlyTransportDecorator.
> There's also a ChrootTransport, which is essentially a decorator too (although
> it doesn't use bzrlib.transport.decorator because the generic decorator facility
> didn't provide a sane way to track what the root of the chroot should be).

I'm likely over looking a few things.  Just hacked this together after
reading over TransportDecorator for a couple of minutes.  It's
possible that TransportDecorator could be implemented with vfs's
Decorator helper, with something along the lines of:

class TransportDecorator(twisted.vfs._decorator.Decorator):
    def __init__(self, url, _decorated=None):
        prefix = self._get_url_prefix()
        if not url.startswith(prefix):
            raise ValueError(
                "url %r doesn't start with decorator prefix %r" % \
                (url, prefix))
        decorated_url = url[len(prefix):]
        if _decorated is None:
             _decorated = get_transport(decorated_url)
        super(TransportDecorator, self).__init__(
            _decorated, factoryMethods=['clone'])

    def abspath(self, relpath):
        return self._get_url_prefix() + self.target.abspath(relpath)

    def external_url(self):
        return self._get_url_prefix() + self.target.external_url()

    def _get_url_prefix(self):
        raise NotImplementedError(self._get_url_prefix)

A key difference to this compared to the verbose approach in bzrlib,
is that the above object isn't an instance of Transport.  So far I've
handled this with zope.interface's.  The above decorator could say
that it implements(ITransport).



From screwtape at froup.com  Wed Jul  9 20:44:48 2008
From: screwtape at froup.com (Tim Allen)
Date: Thu, 10 Jul 2008 12:44:48 +1000
Subject: [Twisted-Python] OSX Leopard version still at 8.0.1?
In-Reply-To: <20080710020703.25821.1979763326.divmod.xquotient.12617@joule.divmod.com>
References: <OF6F08F9A0.7EAD671F-ON87257482.00079BCD-87257482.00087E4F@mck.us.ray.com>
	<20080710020703.25821.1979763326.divmod.xquotient.12617@joule.divmod.com>
Message-ID: <20080710024448.GD2980@thristian.org>

On Thu, Jul 10, 2008 at 02:07:03AM -0000, glyph at divmod.com wrote:
> MacOS X is a supported platform, however: see  
> http://buildbot.twistedmatrix.com/builders/osx10.5-py2.5-select

Looking at that page, it says both:

# Builder: osx10.5-py2.5-select

...and:

OS X Server 10.4.7

Surely one of those must be wrong?



From jml at mumak.net  Wed Jul  9 21:05:08 2008
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 10 Jul 2008 13:05:08 +1000
Subject: [Twisted-Python] Re: AMP compliance tests
In-Reply-To: <d06a5cd30806232257t7f2fa7cfo9afe6dde74a9dd5b@mail.gmail.com>
References: <d06a5cd30806232257t7f2fa7cfo9afe6dde74a9dd5b@mail.gmail.com>
Message-ID: <d06a5cd30807092005p37699184gc3ce609440ee9592@mail.gmail.com>

On Tue, Jun 24, 2008 at 3:57 PM, Jonathan Lange <jml at mumak.net> wrote:
> Hello all,
>
> Where can I find a set of automated tests that check that a particular
> AMP implementation is complete?
>
> I seem to recall someone on #twisted mentioning that they were working
> on such a suite.
>

It's been a few weeks -- I'm guessing the answer is "no".

jml



From nico at teknico.net  Thu Jul 10 00:42:47 2008
From: nico at teknico.net (Nicola Larosa)
Date: Thu, 10 Jul 2008 08:42:47 +0200
Subject: [Twisted-Python] Re: Re: Twisted Hosting and Twisted in the Cloud
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<87wsjwe2by.fsf@softax.com.pl>
	<4327dfbd0807081249o6759ad9fg9e80b1b8d954d006@mail.gmail.com>
Message-ID: <200807100643.m6A6hlP0019610@smtpi1.ngi.it>

Duncan McGreggor wrote:
> If hosting providers start offering explicit support for Twisted,

Some already did:

http://unbit.it/listino_application_server/ (bottom)

Twisted's even on the homeopage:

http://unbit.it/ (lower left)

I'm just a customer, no stock options nor anything else. :-)

-- 
Nicola Larosa - http://www.tekNico.net/

Microsoft has managed to besmirch the entire ISO process, which is
now effectively worthless. [...] ISO has turned from being a kind
of gold standard, into a worthless rubber stamp wielded at the
behest of the rich and ruthless. - Glyn Moody, Marzo 2008





From glyph at divmod.com  Thu Jul 10 03:10:20 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 10 Jul 2008 09:10:20 -0000
Subject: [Twisted-Python] Re: AMP compliance tests
In-Reply-To: <d06a5cd30807092005p37699184gc3ce609440ee9592@mail.gmail.com>
References: <d06a5cd30806232257t7f2fa7cfo9afe6dde74a9dd5b@mail.gmail.com>
	<d06a5cd30807092005p37699184gc3ce609440ee9592@mail.gmail.com>
Message-ID: <20080710091020.25821.111199561.divmod.xquotient.12620@joule.divmod.com>


On 03:05 am, jml at mumak.net wrote:
>On Tue, Jun 24, 2008 at 3:57 PM, Jonathan Lange <jml at mumak.net> wrote:
>>Hello all,
>>
>>Where can I find a set of automated tests that check that a particular
>>AMP implementation is complete?
>>
>>I seem to recall someone on #twisted mentioning that they were working
>>on such a suite.
>
>It's been a few weeks -- I'm guessing the answer is "no".

I think the person in question is Michael Schneider, aka "bigdog".  He's 
got a bunch of other projects going now - one of which is 
https://launchpad.net/txcomputegrid - so I'm pretty sure that eventually 
he'll get back to doing compliance-suite stuff.



From drew.smathers at gmail.com  Thu Jul 10 06:24:31 2008
From: drew.smathers at gmail.com (Drew Smathers)
Date: Thu, 10 Jul 2008 08:24:31 -0400
Subject: [Twisted-Python] twisted and functional programming idioms
In-Reply-To: <OF4CC5FE74.368A46BA-ON87257482.0004E186-87257482.0007F094@mck.us.ray.com>
References: <OF4CC5FE74.368A46BA-ON87257482.0004E186-87257482.0007F094@mck.us.ray.com>
Message-ID: <368574aa0807100524t3e8b8a28m326b351818a023e7@mail.gmail.com>

On Wed, Jul 9, 2008 at 9:26 PM, Rodney D Price <rodprice at raytheon.com> wrote:
>
> I'm just getting started with Twisted, and trying to find
> my way around.  I've done quite a bit of functional
> programming (Haskell), where recursion is a very
> common idiom.  I keep finding myself heading in that
> direction as I try to understand how to use Twisted.
> For example, if I wanted to write a loop in Haskell
> that woke up once a second and did something, I
> might write
>
> main = heartbeat
> heartbeat = do
>   sleep 1000
>   doSomething
>   heartbeat
>

Not related to the LoopingCall usage, but please heed Tristan's
warning on recursion: "Python doesn't handle lots of recursion very
well."  You likely already know this, but there is no last call
optimization (aka tail recursion) in Python.

-- 
\\\\\/\"/\\\\\\\\\\\
\\\\/ // //\/\\\\\\\
\\\/ \\// /\ \/\\\\
\\/ /\/ / /\/ /\ \\\
\/ / /\/ /\ /\\\ \\
/ /\\\ /\\\ \\\\\/\
\/\\\\\/\\\\\/\\\\\\
 d.p.s



From twisted at ralphm.ik.nu  Thu Jul 10 10:05:09 2008
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Thu, 10 Jul 2008 18:05:09 +0200
Subject: [Twisted-Python] domish.Element comparison not working
In-Reply-To: <48738AA7.7060004@evotex.ch>
References: <487374AE.9090705@evotex.ch> <48738AA7.7060004@evotex.ch>
Message-ID: <48763335.9050801@ralphm.ik.nu>

Gabriel Rossetti wrote:
> [..]
>
> I went and looked and domish.Element has no __eq_(_) and __ne__() 
> methods, here's a patch adding them, could someone review them and add 
> them to the trunk? I made it against the trunk.

Thanks for your contribution! Could you create a ticket for this and 
attach your patch? Acceptance also relies on there being unittests, so 
if you could provide those as well, that would speed up the process.

ralphm



From mailing_lists at evotex.ch  Fri Jul 11 02:46:36 2008
From: mailing_lists at evotex.ch (Gabriel Rossetti)
Date: Fri, 11 Jul 2008 10:46:36 +0200
Subject: [Twisted-Python] domish.Element comparison not working
In-Reply-To: <48763335.9050801@ralphm.ik.nu>
References: <487374AE.9090705@evotex.ch> <48738AA7.7060004@evotex.ch>
	<48763335.9050801@ralphm.ik.nu>
Message-ID: <48771DEC.1090907@evotex.ch>

Ralph Meijer wrote:
> Gabriel Rossetti wrote:
>> [..]
>>
>> I went and looked and domish.Element has no __eq_(_) and __ne__() 
>> methods, here's a patch adding them, could someone review them and 
>> add them to the trunk? I made it against the trunk.
>
> Thanks for your contribution! Could you create a ticket for this and 
> attach your patch? Acceptance also relies on there being unittests, so 
> if you could provide those as well, that would speed up the process.
>
> ralphm
>
Hi Ralph,

You're welcome, it's not much, but I think it's useful. I already did 
file a ticket, it's # 3344, I also already made unit tests.

Gabriel



From exarkun at twistedmatrix.com  Sat Jul 12 22:05:18 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Jul 2008 04:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1215921918.54.991960000@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080713/cfd47258/attachment.html>

From termim at gmail.com  Sun Jul 13 16:34:47 2008
From: termim at gmail.com (Mikhail Terekhov)
Date: Sun, 13 Jul 2008 18:34:47 -0400
Subject: [Twisted-Python] trial and python 2.5.2?
Message-ID: <487A8307.90908@gmail.com>

Hi,

I'm trying to run trial from twisted-8.1.0 on SuSE-11.0 with python 
2.5.2 and get the following error
(with super and old style classes IMHO). What would be the fix or 
workaround for this?
BTW on SuSE-10.3 with python 2.5.1 everything is OK.

Thank you
Mike


mike at linux-lp:~/python/twisted> tar jxf Twisted-8.1.0.tar.bz2
mike at linux-lp:~/python/twisted> cd Twisted-8.1.0
mike at linux-lp:~/python/twisted/Twisted-8.1.0> ./bin/trial twisted
/home/mike/python/twisted/Twisted-8.1.0/twisted/python/reflect.py:377: 
DeprecationWarning: twisted.flow is unmaintained.
  return __import__(importName)
/home/mike/python/twisted/Twisted-8.1.0/twisted/scripts/test/test_mktap.py:16: 
DeprecationWarning: mktap and related support modules are deprecated as 
of Twisted 8.0.  Use Twisted Application Plugins with the 'twistd' 
command directly, as described in 'Writing a Twisted Application Plugin 
for twistd' chapter of the Developer Guide.
  from twisted.scripts.mktap import run, getid
/home/mike/python/twisted/Twisted-8.1.0/twisted/enterprise/util.py:19: 
DeprecationWarning: twisted.enterprise.util is deprecated since Twisted 
8.0.0.
  category=DeprecationWarning)
/home/mike/python/twisted/Twisted-8.1.0/twisted/test/test_persisted.py:161: 
DeprecationWarning: twisted.persisted.marmalade is deprecated
  from twisted.persisted import marmalade
/home/mike/python/twisted/Twisted-8.1.0/twisted/words/im/__init__.py:8: 
UserWarning: twisted.im will be undergoing a rewrite at some point in 
the future.
  warnings.warn("twisted.im will be undergoing a rewrite at some point 
in the future.")
Traceback (most recent call last):
  File "./bin/trial", line 24, in <module>
    run()
  File 
"/home/mike/python/twisted/Twisted-8.1.0/twisted/scripts/trial.py", line 
361, in run
    test_result = trialRunner.run(suite)
  File 
"/home/mike/python/twisted/Twisted-8.1.0/twisted/trial/runner.py", line 
780, in run
    suite = TrialSuite([test])
  File 
"/home/mike/python/twisted/Twisted-8.1.0/twisted/trial/runner.py", line 
263, in __init__
    super(TrialSuite, self).__init__([suite])
TypeError: super() argument 1 must be type, not classobj
Exception exceptions.TypeError: TypeError("'NoneType' object is not 
callable",) in <bound method Popen3.__del__ of <popen2.Popen3 instance 
at 0x933a78c>> ignored
mike at linux-lp:~/python/twisted/Twisted-8.1.0>
mike at linux-lp:~/python/twisted/Twisted-8.1.0> python --version
Python 2.5.2
mike at linux-lp:~/python/twisted/Twisted-8.1.0>



From exarkun at divmod.com  Sun Jul 13 18:23:31 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 13 Jul 2008 20:23:31 -0400
Subject: [Twisted-Python] trial and python 2.5.2?
In-Reply-To: <487A8307.90908@gmail.com>
Message-ID: <20080714002331.4714.1886023724.divmod.quotient.20092@ohm>

On Sun, 13 Jul 2008 18:34:47 -0400, Mikhail Terekhov <termim at gmail.com> wrote:
>Hi,
>
>I'm trying to run trial from twisted-8.1.0 on SuSE-11.0 with python 2.5.2 
>and get the following error
>(with super and old style classes IMHO). What would be the fix or workaround 
>for this?
>BTW on SuSE-10.3 with python 2.5.1 everything is OK.

Can you look at unittest.py from the standard library on each of these
systems and see if TestSuite is new-style or classic?  Note that it does
not subclass object, but the module has `__metaclass__ = type´, making
all classes that don't subclass something new-style.

TestSuite should be new-style - it is in my Python 2.5.1 installation
and it is in the 2.5 release branch.

Jean-Paul



From termim at gmail.com  Sun Jul 13 19:36:44 2008
From: termim at gmail.com (Mikhail Terekhov)
Date: Sun, 13 Jul 2008 21:36:44 -0400
Subject: [Twisted-Python] Re: trial and python 2.5.2?
In-Reply-To: <20080714002331.4714.1886023724.divmod.quotient.20092@ohm>
References: <487A8307.90908@gmail.com>
	<20080714002331.4714.1886023724.divmod.quotient.20092@ohm>
Message-ID: <g5eaje$l7r$1@ger.gmane.org>

Jean-Paul Calderone wrote:
> 
> Can you look at unittest.py from the standard library on each of these
> systems and see if TestSuite is new-style or classic?  Note that it does
> not subclass object, but the module has `__metaclass__ = type´, making
> all classes that don't subclass something new-style.
> 
> TestSuite should be new-style - it is in my Python 2.5.1 installation
> and it is in the 2.5 release branch.
> 

I found the problem. It was an obsolete package python-unit-1.4.1 from 
the SuSE repository devel:/languages:/python that installed old version
of the unittest.py into site-packages directory and shadowed the correct 
one. Somehow I installed it without even noticing :(
I've asked maintainers of this repository to remove the obsolete beast.

Sorry for the noise.
Mikhail




From mayamatakeshi at gmail.com  Sun Jul 13 21:02:37 2008
From: mayamatakeshi at gmail.com (mayamatakeshi)
Date: Mon, 14 Jul 2008 12:02:37 +0900
Subject: [Twisted-Python] stdio.StandardIO and control keys
Message-ID: <15b9404e0807132002g7f5a39cew887f0a918ea6041f@mail.gmail.com>

Hello,
I've just started learning twisted.
I'm trying to build an utility to connect to a tcp port (telnet-like) and
exchange messages with an application.
I'm using twisted.internet.stdio.StandardIO passing a Protocol to its
constructor (I'm tinkering with the dataforward.py example from the twisted
book).
I'm adding preprocessing to this utility so that I can check what the user
has input before sending it to the peer. So far it is working fine, as I
just have to override the method Protocol.dataReceived. But I'm trying to
add history of previously input strings and for this, I need to check if the
user is pressing control keys (basically 'up' and 'down' keys, but alt,
shift and friends would be nice too).
I'm not sure if this is a twisted related issue, but is it possible to
somehow capture these key presses ? (they are not notified to dataReceived)
Regards,
takeshi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080714/c9e2f18f/attachment.html>

From duncan.mcgreggor at gmail.com  Mon Jul 14 08:59:27 2008
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Mon, 14 Jul 2008 09:59:27 -0500
Subject: [Twisted-Python] Re: Re: Twisted Hosting and Twisted in the Cloud
In-Reply-To: <200807100643.m6A6hlP0019610@smtpi1.ngi.it>
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<87wsjwe2by.fsf@softax.com.pl>
	<4327dfbd0807081249o6759ad9fg9e80b1b8d954d006@mail.gmail.com>
	<200807100643.m6A6hlP0019610@smtpi1.ngi.it>
Message-ID: <4327dfbd0807140759g3e6aa33akd07c386ba18e698@mail.gmail.com>

On Thu, Jul 10, 2008 at 1:42 AM, Nicola Larosa <nico at teknico.net> wrote:
> Duncan McGreggor wrote:
>> If hosting providers start offering explicit support for Twisted,
>
> Some already did:
>
> http://unbit.it/listino_application_server/ (bottom)
>
> Twisted's even on the homeopage:
>
> http://unbit.it/ (lower left)
>
> I'm just a customer, no stock options nor anything else. :-)

Nicola, that's awesome!

Thanks for the link... this is *definitely* going in the next
"Twiisted in the News" port ;-)

d



From jmp at MIT.EDU  Mon Jul 14 09:59:29 2008
From: jmp at MIT.EDU (Justin Mazzola Paluska)
Date: Mon, 14 Jul 2008 11:59:29 -0400
Subject: [Twisted-Python] trial & ThreadedResolver._cleanup
Message-ID: <20080714155928.GA1504@mit.edu>

Hi,

I’m writing a bunch of unit tests using Twisted’s Trial.  I’ve been
trying to chase down some issues with my code leaving the reactor
unclean.  I think I’ve gotten most of them out of the way, except for
one:

/usr/lib/python2.4/site-packages/twisted/trial/reporter.py:142: twisted.trial.reporter.BrokenTestCaseWarning: REACTOR UNCLEAN! traceback(s) follow: 
  File "/usr/lib/python2.4/site-packages/twisted/trial/util.py", line 72, in _dispatch
    getattr(self, "do_%s" % attr)()
  File "/usr/lib/python2.4/site-packages/twisted/trial/util.py", line 99, in do_cleanPending
    raise PendingTimedCallsError(s)
twisted.trial.util.PendingTimedCallsError: pendingTimedCalls still pending (consider setting twisted.internet.base.DelayedCall.debug = True): <DelayedCall -1219829012 [59.9999289513s] called=0 cancelled=0 ThreadedResolver._cleanup(u'localhost', <Deferred at 0xB74AE46CL>)>

When I run my tests individually (one invocation of trial per test), I
don’t get any errors.  It’s only when I run an entire suite that I get
these errors.

It looks like this is a reported issue
(http://twistedmatrix.com/trac/ticket/2579), but with no fix.

Does anyone know a workaround for this issue?
	—Justin



From mithrandi at mithrandi.net  Mon Jul 14 14:03:15 2008
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 14 Jul 2008 22:03:15 +0200
Subject: [Twisted-Python] Re: Re: Twisted Hosting and Twisted in the Cloud
In-Reply-To: <4327dfbd0807140759g3e6aa33akd07c386ba18e698@mail.gmail.com>
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<87wsjwe2by.fsf@softax.com.pl>
	<4327dfbd0807081249o6759ad9fg9e80b1b8d954d006@mail.gmail.com>
	<200807100643.m6A6hlP0019610@smtpi1.ngi.it>
	<4327dfbd0807140759g3e6aa33akd07c386ba18e698@mail.gmail.com>
Message-ID: <20080714200315.GA11848@mithrandi.net>

* Duncan McGreggor <duncan.mcgreggor at gmail.com> [2008-07-14 09:59:27 -0500]:

> "Twiisted in the News" port ;-)
    ^^^

Whoa, Twisted runs on the Wii now?
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20080714/86fa54bb/attachment.sig>

From maarten at treewalker.org  Mon Jul 14 14:59:20 2008
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Mon, 14 Jul 2008 22:59:20 +0200
Subject: [Twisted-Python] Re: Re: Twisted Hosting and Twisted in the Cloud
In-Reply-To: <20080714200315.GA11848@mithrandi.net>
References: <4327dfbd0806292100y4723b30ema2698f52773c43da@mail.gmail.com>
	<4327dfbd0807140759g3e6aa33akd07c386ba18e698@mail.gmail.com>
	<20080714200315.GA11848@mithrandi.net>
Message-ID: <200807142259.26337.maarten@treewalker.org>

On Monday 14 July 2008, Tristan Seligmann wrote:
> * Duncan McGreggor <duncan.mcgreggor at gmail.com> [2008-07-14 
09:59:27 -0500]:
> > "Twiisted in the News" port ;-)
>
>     ^^^
>
> Whoa, Twisted runs on the Wii now?

It is possible to run Debian on the Wii nowadays, so Twisted should only be 
an apt-get away...

http://www.gc-linux.org/wiki/WL:whiite-linux

Bye,
		Maarten
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part.
URL: </pipermail/twisted-python/attachments/20080714/f4920bfc/attachment.sig>

From vvangelovski at gmail.com  Tue Jul 15 07:37:12 2008
From: vvangelovski at gmail.com (Vasil Vangelovski)
Date: Tue, 15 Jul 2008 15:37:12 +0200
Subject: [Twisted-Python] twisted adbapi question
Message-ID: <406b9fda0807150637i56a6ce79j87566b1be25a66f1@mail.gmail.com>

does anyone know why is twisted.enterprise.adbapi.safe deprecated?
What should I use instead?



From exarkun at divmod.com  Tue Jul 15 07:42:11 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 15 Jul 2008 09:42:11 -0400
Subject: [Twisted-Python] twisted adbapi question
In-Reply-To: <406b9fda0807150637i56a6ce79j87566b1be25a66f1@mail.gmail.com>
Message-ID: <20080715134211.29191.1301832197.divmod.quotient.153@ohm>

On Tue, 15 Jul 2008 15:37:12 +0200, Vasil Vangelovski <vvangelovski at gmail.com> wrote:
>does anyone know why is twisted.enterprise.adbapi.safe deprecated?
>What should I use instead?
>

Because it's not safe.  Use bind parameters instead.  Google or your
preferred DB-API 2.0 module should tell you exactly how to do that.

Jean-Paul



From nathan.stocks at gmail.com  Tue Jul 15 14:04:37 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Tue, 15 Jul 2008 14:04:37 -0600
Subject: [Twisted-Python] twisted adbapi question
In-Reply-To: <20080715134211.29191.1301832197.divmod.quotient.153@ohm>
References: <406b9fda0807150637i56a6ce79j87566b1be25a66f1@mail.gmail.com>
	<20080715134211.29191.1301832197.divmod.quotient.153@ohm>
Message-ID: <96c9d6a80807151304m4518c15fq7497f1d27719d62e@mail.gmail.com>

On Tue, Jul 15, 2008 at 7:42 AM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Tue, 15 Jul 2008 15:37:12 +0200, Vasil Vangelovski
> <vvangelovski at gmail.com> wrote:
>>
>> does anyone know why is twisted.enterprise.adbapi.safe deprecated?
>> What should I use instead?
>>
>
> Because it's not safe.  Use bind parameters instead.  Google or your
> preferred DB-API 2.0 module should tell you exactly how to do that.

I wish "[the] DB-API 2.0 module[s]" always provided documentation.
psycopg (when it had a working web site) just pointed to PEP 249.
(Unless you count the short "here's an example" docs that are dated
2002)

http://www.python.org/dev/peps/pep-0249/

</pet peeve>

~ Nathan



From gabriel.rossetti at arimaz.com  Wed Jul 16 03:00:11 2008
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Wed, 16 Jul 2008 11:00:11 +0200
Subject: [Twisted-Python] Deferred.setTimeout is deprecated,
	replacement ideas?
Message-ID: <487DB89B.6040204@arimaz.com>

Hello everyone,

I was going to use Deferred.setTimeout until I saw that it was 
deprecated. Does anyone know why? I found it handy and I find that 
case-per-case replacements tend to be complicated. Does anyone have any 
ideas on how to replace it?

 I have a queue containing read results from I/O, the get() method 
returns a deferred fired when the data arrives (sort of like 
defer.DeferredQueue). Since I need to be able to set a read timeout, 
i.e. if the data doesn't arrive after a certain time, I need to raise an 
exception and remove the deferred from the internal list; the defer's 
timeout would have been handy here :-(.

I was thinking of doing something like this, if data isn't present in 
the data internal list:

d = Deferred()
dc = reactor.callLater(self.timeout, self.__timeoutCallback, d)
d.addCallback(self.__timeoutCanceller)

Then a tuple containing the Deferred ("d"), the DelayedCall ("dc") is 
then put in the internal waiting list. If the timeout doesn't expire 
before the data arrives, then the DelayedCall is canceled, if it does 
expire then the tuple is removed from the queue (potentially slow) and 
an exception is raised.

Is there a better way of doing this? Any ideas?

Thank you,
Gabriel



From skoegl at online.de  Wed Jul 16 03:03:18 2008
From: skoegl at online.de (skoegl at online.de)
Date: Wed, 16 Jul 2008 11:03:18 +0200 (CEST)
Subject: [Twisted-Python] cross service events and why on earth ?
Message-ID: <16935502.19850.1216198998787.JavaMail.webmailer@webmail.1and1.com>

hi,

I have to deal with flash players (I&#39;m deeply ashamed for what I&#39;m doing ;-), and their somewhat cumberstone constraints. 

The main part of the communication is handled via an tcp socket using the amf protocol. But I have to handle &quot;file uploads&quot; via http POST multipart from client to server and sending it back to the flash player since flash only allows domain specific content - no content from the users&#39; file system. 

So my first attempt to solve this big mess was to create a tac like that:

############################################
tac file
############################################

import sys, os

sys.path.append(os.getcwd())

from twisted.application import internet, service

# my custom backend factory subclassed from ServerFactory
from socketManager import SocketManager 

from policySocketFactory import PolicySocketFactory
from twisted.web2 import server, channel, static
from twisted.application import service, strports
from fileupload import Toplevel

application = service.Application(&#39;backend&#39;)

# backend service - all client/server communication should go via that sockets
backendService = internet.TCPServer(8600, SocketManager())
backendService.setServiceParent(application)

# policy service
socketPolicyService = internet.TCPServer(8601, PolicySocketFactory(&#39;socket-policy.xml&#39;))
socketPolicyService.setServiceParent(application)

# http service
site = server.Site(Toplevel())
fileUploadService = strports.service(&#39;tcp:8080&#39;, channel.HTTPFactory(site))
fileUploadService.setServiceParent(application)

############################################

Authentication /Authorization is implemented in the backend service, so I&#39;m searching for a solution to fire some sort of event in the fileUploadService to be handled in the backendService, and to restrict the file upload to already logged in users. I thought about using &quot;inotify&quot; for watching the upload directory, but I would prefer a twisted /pythonic solution. Perhaps someone could give me some advice about what would be a sane way to solve this 2 problems. 

Thank you in advance,

Stefan K&ouml;gl
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080716/99bc7edf/attachment.html>

From gabriel.rossetti at arimaz.com  Wed Jul 16 03:22:09 2008
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Wed, 16 Jul 2008 11:22:09 +0200
Subject: [Twisted-Python] Deferred.setTimeout is deprecated,	replacement
	ideas?
In-Reply-To: <487DB89B.6040204@arimaz.com>
References: <487DB89B.6040204@arimaz.com>
Message-ID: <487DBDC1.3060408@arimaz.com>


Gabriel Rossetti wrote:
> Hello everyone,
>
> I was going to use Deferred.setTimeout until I saw that it was 
> deprecated. Does anyone know why? I found it handy and I find that 
> case-per-case replacements tend to be complicated. Does anyone have 
> any ideas on how to replace it?
>
> I have a queue containing read results from I/O, the get() method 
> returns a deferred fired when the data arrives (sort of like 
> defer.DeferredQueue). Since I need to be able to set a read timeout, 
> i.e. if the data doesn't arrive after a certain time, I need to raise 
> an exception and remove the deferred from the internal list; the 
> defer's timeout would have been handy here :-(.
>
> I was thinking of doing something like this, if data isn't present in 
> the data internal list:
>
> d = Deferred()
> dc = reactor.callLater(self.timeout, self.__timeoutCallback, d)
> d.addCallback(self.__timeoutCanceller)
>
> Then a tuple containing the Deferred ("d"), the DelayedCall ("dc") is 
> then put in the internal waiting list. If the timeout doesn't expire 
> before the data arrives, then the DelayedCall is canceled, if it does 
> expire then the tuple is removed from the queue (potentially slow) and 
> an exception is raised.
>
> Is there a better way of doing this? Any ideas?
>
> Thank you,
> Gabriel
>
>
I can remove the "d.addCallback(self.__timeoutCanceller)" call since the 
DelayedCall can be canceled by the code that does the waiting list 
processing.



From screwtape at froup.com  Wed Jul 16 06:03:49 2008
From: screwtape at froup.com (Tim Allen)
Date: Wed, 16 Jul 2008 22:03:49 +1000
Subject: [Twisted-Python] Deferred.setTimeout is deprecated,
	replacement ideas?
In-Reply-To: <487DB89B.6040204@arimaz.com>
References: <487DB89B.6040204@arimaz.com>
Message-ID: <20080716120349.GE2980@thristian.org>

On Wed, Jul 16, 2008 at 11:00:11AM +0200, Gabriel Rossetti wrote:
> Hello everyone,
>
> I was going to use Deferred.setTimeout until I saw that it was  
> deprecated. Does anyone know why? I found it handy and I find that  
> case-per-case replacements tend to be complicated. Does anyone have any  
> ideas on how to replace it?

This has (unsurprisingly) come up on the list many times before. Here's
a reasonable representative sample:

    http://thread.gmane.org/gmane.comp.python.twisted/8490

In short, the problem with .setTimeout is that it's a little bit like
shooting the messenger. Imagine you have a script that generates
a report from a long and complicated database query; the code flow might
run something like this:

 - Script asks the database to run its query.
 - Database returns a deferred promising a result.
 - Script calls .setTimeout() on the deferred.
 - The timeout fires, the script gives up and logs an error.
 - Database continues processing, using up CPU and IO resources even
   though the script no longer cares about the result.
 - Database finishes, calls .callback() on the deferred and winds up
   with an AlreadyCalled exception.

The preferred situation is something more like this:

 - Script asks the database to run its query with a particular timeout.
 - Database returns a deferred promising a result.
 - The timeout period elapses, the database realises it hasn't finished
   in time, and so shuts down its query processing and calls .errback()
   on the deferred.
 - Script receives the timeout notification, gives up and logs an error.

The difference is that the thing that returns the deferred is the only
thing that can possibly know how to cancel an operation-in-progress, and
therefore the only thing that can reasonably implement timeout
functionality - deferreds are just the wrong place to put that method.

> I was thinking of doing something like this, if data isn't present in  
> the data internal list:
>
> d = Deferred()
> dc = reactor.callLater(self.timeout, self.__timeoutCallback, d)

[line deleted as per follow-up mail]

> Then a tuple containing the Deferred ("d"), the DelayedCall ("dc") is  
> then put in the internal waiting list. If the timeout doesn't expire  
> before the data arrives, then the DelayedCall is canceled, if it does  
> expire then the tuple is removed from the queue (potentially slow) and  
> an exception is raised.
>
> Is there a better way of doing this? Any ideas?

What you suggest sounds pretty reasonable to me.

Tim Allen



From gabriel.rossetti at arimaz.com  Thu Jul 17 00:44:52 2008
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Thu, 17 Jul 2008 08:44:52 +0200
Subject: [Twisted-Python] Deferred.setTimeout is deprecated,	replacement
	ideas?
In-Reply-To: <20080716120349.GE2980@thristian.org>
References: <487DB89B.6040204@arimaz.com> <20080716120349.GE2980@thristian.org>
Message-ID: <487EEA64.8080409@arimaz.com>


Tim Allen wrote:
> On Wed, Jul 16, 2008 at 11:00:11AM +0200, Gabriel Rossetti wrote:
>   
>> Hello everyone,
>>
>> I was going to use Deferred.setTimeout until I saw that it was  
>> deprecated. Does anyone know why? I found it handy and I find that  
>> case-per-case replacements tend to be complicated. Does anyone have any  
>> ideas on how to replace it?
>>     
>
> This has (unsurprisingly) come up on the list many times before. Here's
> a reasonable representative sample:
>
>     http://thread.gmane.org/gmane.comp.python.twisted/8490
>   
Ok, I'll have a look at that, thanks (more text further down)
> In short, the problem with .setTimeout is that it's a little bit like
> shooting the messenger. Imagine you have a script that generates
> a report from a long and complicated database query; the code flow might
> run something like this:
>
>  - Script asks the database to run its query.
>  - Database returns a deferred promising a result.
>  - Script calls .setTimeout() on the deferred.
>  - The timeout fires, the script gives up and logs an error.
>  - Database continues processing, using up CPU and IO resources even
>    though the script no longer cares about the result.
>  - Database finishes, calls .callback() on the deferred and winds up
>    with an AlreadyCalled exception.
>
> The preferred situation is something more like this:
>
>  - Script asks the database to run its query with a particular timeout.
>  - Database returns a deferred promising a result.
>  - The timeout period elapses, the database realises it hasn't finished
>    in time, and so shuts down its query processing and calls .errback()
>    on the deferred.
>  - Script receives the timeout notification, gives up and logs an error.
>
> The difference is that the thing that returns the deferred is the only
> thing that can possibly know how to cancel an operation-in-progress, and
> therefore the only thing that can reasonably implement timeout
> functionality - deferreds are just the wrong place to put that method.
>
>   
I understand that, but sometimes whatever you're waiting on has no 
timeout mechanism, and it's not doing any processing itself (not like a 
database query), so quitting wouldn't hurt it. I just think maybe 
deprecating it is a bit too harsh, maybe a big warning and 
recommendations would be nicer :-)
>> I was thinking of doing something like this, if data isn't present in  
>> the data internal list:
>>
>> d = Deferred()
>> dc = reactor.callLater(self.timeout, self.__timeoutCallback, d)
>>     
>
> [line deleted as per follow-up mail]
>
>   
>> Then a tuple containing the Deferred ("d"), the DelayedCall ("dc") is  
>> then put in the internal waiting list. If the timeout doesn't expire  
>> before the data arrives, then the DelayedCall is canceled, if it does  
>> expire then the tuple is removed from the queue (potentially slow) and  
>> an exception is raised.
>>
>> Is there a better way of doing this? Any ideas?
>>     
>
> What you suggest sounds pretty reasonable to me.
>   
Ok, thanks!
> Tim Allen
>
>   
Gabriel



From glyph at divmod.com  Thu Jul 17 05:26:45 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 17 Jul 2008 11:26:45 -0000
Subject: [Twisted-Python] Deferred.setTimeout is deprecated,
	replacement  ideas?
In-Reply-To: <487EEA64.8080409@arimaz.com>
References: <487DB89B.6040204@arimaz.com> <20080716120349.GE2980@thristian.org>
	<487EEA64.8080409@arimaz.com>
Message-ID: <20080717112645.25821.1883282285.divmod.xquotient.12944@joule.divmod.com>


On 06:44 am, gabriel.rossetti at arimaz.com wrote:
>I understand that, but sometimes whatever you're waiting on has no 
>timeout mechanism, and it's not doing any processing itself (not like a 
>database query), so quitting wouldn't hurt it. I just think maybe 
>deprecating it is a bit too harsh, maybe a big warning and 
>recommendations would be nicer :-)

Even if you are going to implement your own timeout mechanism, you need 
to do it in a layer that knows about and can compensate for the 
potential for multiple callbacks.  setTimeout's design is an invitation 
to get AlreadyCalledError tracebacks logged in your code, and to screw 
up the internal state of the API generating the Deferred.

In other words, if you have an API without a timeout mechanism, then 
write a layer above it which adds the timeout mechanism and use that.

Frankly, setTimeout has been deprecated too long: deprecating it is not 
too harsh, it is too lenient.  It should have been removed a long time 
ago :).



From proppy at aminche.com  Fri Jul 18 04:31:18 2008
From: proppy at aminche.com (Johan Euphrosine)
Date: Fri, 18 Jul 2008 12:31:18 +0200
Subject: [Twisted-Python] txprotobuf
Message-ID: <730b2b9d0807180331n672a79fv327c0603c9317424@mail.gmail.com>

Hi,

I'm working on a twisted implementation of protocol buffers RPC here:
http://launchpad.net/txprotobuf/
http://bazaar.launchpad.net/~proppy/txprotobuf/master/changes

Feel free to join :)

Twisted:
Twisted is an event-driven networking engine written in
Python and licensed under the MIT license.
http://twistedmatrix.com/trac/

Protocol Buffers:
Protocol Buffers - Google's data interchange format
http://code.google.com/p/protobuf/
-- 
bou ^



From vvangelovski at gmail.com  Fri Jul 18 08:08:03 2008
From: vvangelovski at gmail.com (Vasil Vangelovski)
Date: Fri, 18 Jul 2008 16:08:03 +0200
Subject: [Twisted-Python] Async file access
Message-ID: <406b9fda0807180708i4df1e851g8d77d9fe14aca8ff@mail.gmail.com>

Which is the best practice to read a file asyncrouniously?
Should I just read it with open and return the result in a callback or
is there a lower level API that's more appropriate?



From andrewfr_ice at yahoo.com  Fri Jul 18 11:34:34 2008
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Fri, 18 Jul 2008 10:34:34 -0700 (PDT)
Subject: [Twisted-Python] Stackless Python Examples Revisited Re:
	InlineCallbacks
Message-ID: <224209.23031.qm@web34202.mail.mud.yahoo.com>

Hi Folks:

>Message: 4
>Date: Sat, 19 Apr 2008 11:47:38 -0700 (PDT)
>From: Andrew Francis <andrewfr_ice at yahoo.com>
>Subject: [Twisted-Python] Stackless Python Examples Re: InlineCallback
>    Friendly ?
>To: twisted-python at twistedmatrix.com
>Message-ID: <882470.36243.qm at web34201.mail.mud.yahoo.com>
>Content-Type: text/plain; charset=iso-8859-1

--- Andrew Francis <andrewfr_ice at yahoo.com> wrote:

>Based on Jean-Paul's explanation, here are some code
>snippets showing how to handle other protocols with
>Stackless Python and Twisted. This is a continuation
>of the technique I used in "Adventures" to prevent the
>reactor from deadlocking.

>Currently I am rethinking the techniques - I believe
>there is a way to reduce spawning tasklets - not that
>tasklets are all that expensive....


I have been experimenting with a new technique for tasklets to interact with Twisted protocol instances (the following is essentially what I was pestering the Twisted Team about at PyCon 2008. Sorry guys)

I have been exploring situations where a tasklet rendezvoused with Twisted (as opposed to a Twisted spawning a tasklet to fulfill a request). A lot of WS-BPEL constructs take this form....

In the old system, I ran the server protocol instance in its own tasklet. This was to prevent the reactor from blocking and preventing other tasklets from issuing Twisted calls. In turn, the tasklet and protocol instance/tasklet communicated via a channel. 

With this technique, I do not create an additional tasklet. Rather I pass back a deferred whose callback points to the reminder of the protocol instance's code. 

Although I have not finished testing, this technique seems to be about 20% faster. Again, implementing this is fairly straightforward. Here is a sketch.


class MyRequestHandler(http.Request):

    def __httpWrite__(self, status, message):
        self.setResponseCode(status)
        self.write(message.encode("utf-8"))
        self.finish()
        return


    def process(self):

        """
        create a deferred
        """
        myDeferred = defer.Deferred()
        myDeferred.addCallback(self.processReply)

        
        """
        we need a way for the protocol instance to tell tasklets that a
        connect has been made. Easiest way, just hand the protocol 
        instance a reference
        """
        status, message = \
        MyRequestHandler.someReferenceToProgramme(self.path, \
                                                  self.content.read(), \
                                                  myDeferred)
        if status != http.OK:
           print "ERROR!"
           self.__httpWrite__(status, message)
           myDeferred = None

        """
        if things went well, return a deferred 
        This is a Twisted way to circumvent blocking and waiting 
        for information
        """
        return myDeferred


    """
    the continuation 
    """
    def processReply(self, reply):
        self.__httpWrite__(200, reply[0])
        return


meanwhile, in the tasklet

def tasklet(...):
    .
    .
    .
    deferred = someFunction(somePath)
    # send a message 
    deferred.callback(message)
       
Although PyCon 2008 is over, I still plan to submit a paper that will better explain the various techniques in the "Adventures" talk. I am also writing simpler code to better illustrate the techniques and combine them with other tried-and-true techniques (i.e., Armstrong's blockOn). 

Cheers,
Andrew


      



From glyph at divmod.com  Sat Jul 19 00:57:36 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 19 Jul 2008 06:57:36 -0000
Subject: [Twisted-Python] txprotobuf
In-Reply-To: <730b2b9d0807180331n672a79fv327c0603c9317424@mail.gmail.com>
References: <730b2b9d0807180331n672a79fv327c0603c9317424@mail.gmail.com>
Message-ID: <20080719065736.25821.1874713652.divmod.xquotient.12961@joule.divmod.com>

On 18 Jul, 10:31 am, proppy at aminche.com wrote:
>I'm working on a twisted implementation of protocol buffers RPC here:
>http://launchpad.net/txprotobuf/

Johan, this is awesome!  This is exactly the sort of thing that I had in 
mind when I was suggesting the 'tx' namespace in the first place; I'm so 
glad you've released it.  Although of course I hope that we can subsume 
it into Twisted at some later point, since all the code looks nice and 
TDD... :-)



From exarkun at twistedmatrix.com  Sat Jul 19 22:05:08 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 20 Jul 2008 04:05:08 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1216526708.16.1199206421@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080720/493d4dec/attachment.html>

From m.otteneder at gmail.com  Sun Jul 20 04:28:57 2008
From: m.otteneder at gmail.com (Michael Otteneder)
Date: Sun, 20 Jul 2008 12:28:57 +0200
Subject: [Twisted-Python] check if user is in channel (twisted.words irc)
Message-ID: <bad04b940807200328u7dca90ct9bfe2fbf9766083@mail.gmail.com>

Hi!
I'm looking for a simple way to check whatever a use with a specific name is
in a channel or not. How could I do this? Im connecting to irc by
subclassign the twisted.words.im.ircsupport.IRCProto class.

Thanks in advance!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080720/f77cc5b5/attachment.html>

From marek at xivilization.net  Sun Jul 20 05:13:54 2008
From: marek at xivilization.net (Marek Kubica)
Date: Sun, 20 Jul 2008 13:13:54 +0200
Subject: [Twisted-Python] check if user is in channel (twisted.words irc)
In-Reply-To: <bad04b940807200328u7dca90ct9bfe2fbf9766083@mail.gmail.com>
References: <bad04b940807200328u7dca90ct9bfe2fbf9766083@mail.gmail.com>
Message-ID: <20080720131354.446ea009@halmanfloyd.lan.local>

On Sun, 20 Jul 2008 12:28:57 +0200
"Michael Otteneder" <m.otteneder at gmail.com> wrote:

> I'm looking for a simple way to check whatever a use with a specific
> name is in a channel or not. How could I do this? Im connecting to
> irc by subclassign the twisted.words.im.ircsupport.IRCProto class.

You have to issue a NAMES command and implement irc_RPL_NAMREPLY and
irc_RPL_ENDOFNAMES. I'm currently working on some nicer NAMES support
for Words but unfortunately I have quite a lot of things to do, so I'm
lagging a bit behind my original plans.

If you're interested you can take a look at ticket #3275:
<http://twistedmatrix.com/trac/ticket/3275>

regards,
Marek



From peter at sabaini.at  Sun Jul 20 11:49:09 2008
From: peter at sabaini.at (Peter Sabaini)
Date: Sun, 20 Jul 2008 19:49:09 +0200
Subject: [Twisted-Python] t.w.x.d.Element serialization and default
	namespaces
Message-ID: <200807201949.16842.peter@sabaini.at>

Hi,

I'm trying to get to grips with Xish; and theres this annoying little problem: 
through a series of steps I'm getting at an Element who doesn't use the 
default namespace anymore, only some other NS. I am trying to make this other 
NS the default NS for serialization, but without much luck.

For example:

>>> from twisted.words.xish import domish
>>> e=domish.Element(("foons", "foo"), defaultUri="defuri", 
localPrefixes={"f":"foons"} )
>>> e.addElement(("foons", "bar"))
<twisted.words.xish.domish.Element object at 0x820840c>
>>> e.toXml()
u"<f:foo xmlns='defuri' xmlns:f='foons'><f:bar/></f:foo>"

I'd like the output to be something like "<foo><bar/></foo>" -- thats shorter 
and prettier.

Am I making any sense? Probably I'm missing something pretty obvious...

Thanks in advance,
peter.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part.
URL: </pipermail/twisted-python/attachments/20080720/d9adc948/attachment.sig>

From newptcai at gmail.com  Mon Jul 21 01:01:49 2008
From: newptcai at gmail.com (Peter Cai)
Date: Mon, 21 Jul 2008 15:01:49 +0800
Subject: [Twisted-Python] Please recommend a RPC system working with twisted.
Message-ID: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>

Hi all,

I'm looking for an RPC system working with twisted.

1. Binary.  I want it run faster than any xml based RPC.

2. Bidirectional.  Unlike  HTTP, on which the client has to poll the sever
for events, the server should "call" the client's method to notify events.

3. C/Python support.  Part of the system shall be written in C.

4. Could easily integrated  with twisted.

Unfortunately, there seems no such resolution existed.  So maybe I have to
give up some requirements.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080721/7c0e77e6/attachment.html>

From jack-tp at cs.york.ac.uk  Mon Jul 21 04:19:23 2008
From: jack-tp at cs.york.ac.uk (Jack Whitham)
Date: Mon, 21 Jul 2008 11:19:23 +0100
Subject: [Twisted-Python] Converting async to sync code (blocking until
	deferreds fire)
Message-ID: <20080721101923.GA1178@cs.york.ac.uk>


Hi,

What is the best way to convert asynchronous code (non-blocking,
returning deferreds) to synchronous code (blocking)? 

I have a client that is written using Twisted. Most of the methods
within the client object return Deferreds because they send messages
to a server and replies may take some time. This is ideal for the 
wxwidgets GUI that was originally intended to use the client. But
now I want to write test scripts for the server that are synchronous.

For example, the client provides the method "GetBitInfo" which returns
a deferred. The deferred is called back with a list as its parameter
after the server responds to a request. I would like to be able to 
do something like this:

> def GotBitInfo(l): pass
> 
> if __name__ == "__main__":
>     c = Client()
> 
>     d = c.GetBitInfo()
>     d.addCallback(GotBitInfo)
>     waitForDeferred(d)
> 
>     d = c.DoSomethingElse()

In other words, how do I waitForDeferred(), i.e. block until a Deferred fires?

Of course I could rewrite my script as asynchronous code; but what I
really want is a simple Python-like interface for the client code
in order to make things as simple as possible for other users. I don't
want them to *have* to learn how to write asynchronous code - I want
it to be optional. If the snippet of code listed above is possible,
then I can wrap the client methods with code that waits for deferreds
to fire, then returns the values they were called with. Then the users
will have two ways to use the code: asynchronous (for GUIs, proxy
servers, etc.) and synchronous (for test scripts). 

I noticed that there is a _wait method in your trial code that seems to
do what I want, but it looks complicated and I'm not sure it is the
right answer. Its predecessor was also deprecated, which is a bad
sign (looks like "do not do this!!"). Hence I am looking for expert 
advice.

Thanks.


-- 
Jack Whitham
jack at cs.york.ac.uk




From mg at daimi.au.dk  Mon Jul 21 05:05:53 2008
From: mg at daimi.au.dk (Martin Geisler)
Date: Mon, 21 Jul 2008 13:05:53 +0200
Subject: [Twisted-Python] Re: Converting async to sync code (blocking until
	deferreds fire)
References: <20080721101923.GA1178@cs.york.ac.uk>
Message-ID: <g82zlob8pke.fsf@celano.unix.zurich.ibm.com>

Jack Whitham <jack-tp at cs.york.ac.uk> writes:

Hello!

> What is the best way to convert asynchronous code (non-blocking,
> returning deferreds) to synchronous code (blocking)?
>
> I have a client that is written using Twisted. Most of the methods
> within the client object return Deferreds because they send messages
> to a server and replies may take some time. This is ideal for the
> wxwidgets GUI that was originally intended to use the client. But
> now I want to write test scripts for the server that are
> synchronous.

You mention Trial below and I think using it is both the easies and
the most correct way to test code using Deferreds.

You simply return your Deferred from your test case and Trial waits on
it to determine if the test passed or failed.

I like this tutorial for Trial: http://ln-s.net/24:F

-- 
Martin Geisler

VIFF (Virtual Ideal Functionality Framework) brings easy and efficient
SMPC (Secure Multi-Party Computation) to Python. See: http://viff.dk/.




From p.mayers at imperial.ac.uk  Mon Jul 21 05:12:34 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 21 Jul 2008 12:12:34 +0100
Subject: [Twisted-Python] Converting async to sync code (blocking until
	deferreds fire)
In-Reply-To: <20080721101923.GA1178@cs.york.ac.uk>
References: <20080721101923.GA1178@cs.york.ac.uk>
Message-ID: <48846F22.9090600@imperial.ac.uk>

Jack Whitham wrote:
> Hi,
> 
> What is the best way to convert asynchronous code (non-blocking,
> returning deferreds) to synchronous code (blocking)? 

Don't.

> 
> I have a client that is written using Twisted. Most of the methods
> within the client object return Deferreds because they send messages
> to a server and replies may take some time. This is ideal for the 
> wxwidgets GUI that was originally intended to use the client. But
> now I want to write test scripts for the server that are synchronous.
> 
> For example, the client provides the method "GetBitInfo" which returns
> a deferred. The deferred is called back with a list as its parameter
> after the server responds to a request. I would like to be able to 
> do something like this:
> 
>> def GotBitInfo(l): pass
>>
>> if __name__ == "__main__":
>>     c = Client()
>>
>>     d = c.GetBitInfo()
>>     d.addCallback(GotBitInfo)
>>     waitForDeferred(d)
>>
>>     d = c.DoSomethingElse()
> 
> In other words, how do I waitForDeferred(), i.e. block until a Deferred fires?

You've asked a complicated question, to which I'm sure you'll get other 
answers. A very short answer is "you don't, the reactor must not block". 
There are ways to achieve this, most of which make it *look* like the 
reactor blocked when it really didn't.

I had the same desire at one point, to make the code "look" simple so 
that others could use it. I have come to the conclusion that was a 
mistake; trying to hide the underlying async behaviour can actually be 
counter-productive.

You could use inlineCallbacks and python2.5 generators, which is a style 
I swing between really liking and worrying about:

from twisted.internet import defer

@defer.inlineCallbacks
def main():
     c = Client()

     # execution of the generator is paused here until the
     # deferred you've just yielded is callback'ed
     r = yield c.GetBitInfo()

     if r:
         # "r" now contains the value of the callback
         pass

     # optionally
     reactor.callLater(0.1, reactor.stop)

if __name__=='__main__':
     from twisted.internet import reactor
     reactor.addSystemEventTrigger('after', 'startup', main)
     reactor.run()

There are other approaches using Stackless, greenlets and running the 
reactor in a thread (shudder). For greenlets you might look at:

https://launchpad.net/corotwine/



From kent.brake at gmail.com  Mon Jul 21 06:21:37 2008
From: kent.brake at gmail.com (James Brake)
Date: Mon, 21 Jul 2008 12:21:37 -0000
Subject: [Twisted-Python] James Brake has invited you to join Friendster
Message-ID: <71a4kd$mt7dls@c350a.gbxsc.friendster.com>

You're invited to join James Brake's network of friends. 

By joining Friendster, you can reconnect with old
friends, meet new friends, start a blog, build a custom
profile, keep track of birthdays, and so
much more!

You can even stay in touch if you move away, switch
email addresses, or lose your mobile phone.

Click below to join James's network.

http://www.friendster.com/join.php?inviteref=72570452&amp;invite=-8C6ksHVjnPyAP1IYBqmBORBIRUd7Trk-6sLG0nfJrw*&amp;lang=en-US

*****************************************************************
If you do not wish to receive notification emails from Friendster, please click below:
http://www.friendster.com/blockemails.php?invite=dHdpc3RlZC1weXRob25AdHdpc3RlZG1hdHJpeC5jb20*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080721/19eb53a5/attachment.html>

From dripton at ripton.net  Mon Jul 21 07:18:00 2008
From: dripton at ripton.net (David Ripton)
Date: Mon, 21 Jul 2008 06:18:00 -0700
Subject: [Twisted-Python] Please recommend a RPC system working with
	twisted.
In-Reply-To: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>
References: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>
Message-ID: <20080721131800.GA11544@vidar.dreamhost.com>

On 2008.07.21 15:01:49 +0800, Peter Cai wrote:
> I'm looking for an RPC system working with twisted.
> 
> 1. Binary.  I want it run faster than any xml based RPC.
> 
> 2. Bidirectional.  Unlike  HTTP, on which the client has to poll the sever
> for events, the server should "call" the client's method to notify events.
> 
> 3. C/Python support.  Part of the system shall be written in C.
> 
> 4. Could easily integrated  with twisted.

Twisted AMP meets all your requirements except C support, which you
could probably add.  (Or maybe avoid adding by using some other way
to bridge C computing code with Python network code, like ctypes.)

Also take a look at Google's Protocol Buffers, which lacks C support but
has C++ support.  A Twisted version called txprotobuf was recently
announced.  (Note that Protocol Buffers isn't really a full RPC system,
just the serialization part.)

I think combining these two might work nicely, though I haven't tried it
yet.

-- 
David Ripton    dripton at ripton.net



From radix at twistedmatrix.com  Mon Jul 21 07:28:56 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 21 Jul 2008 09:28:56 -0400
Subject: [Twisted-Python] Please recommend a RPC system working with
	twisted.
In-Reply-To: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>
References: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>
Message-ID: <60ed19d40807210628q1b7507e7tdd0739fda94b7ffa@mail.gmail.com>

On Mon, Jul 21, 2008 at 3:01 AM, Peter Cai <newptcai at gmail.com> wrote:
> Hi all,
>
> I'm looking for an RPC system working with twisted.
>
> 1. Binary.  I want it run faster than any xml based RPC.
>
> 2. Bidirectional.  Unlike  HTTP, on which the client has to poll the sever
> for events, the server should "call" the client's method to notify events.
>
> 3. C/Python support.  Part of the system shall be written in C.
>
> 4. Could easily integrated  with twisted.
>
> Unfortunately, there seems no such resolution existed.  So maybe I have to
> give up some requirements.

twisted.protocols.amp looks like the closest thing: it's a very
simple, efficient protocol for remote procedure calls. I can't point
you directly at a C implementation, but I think there may be a C++
implementation somewhere. In any case, it would be pretty simple to
implement.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From esteve at sindominio.net  Mon Jul 21 07:59:12 2008
From: esteve at sindominio.net (Esteve Fernandez)
Date: Mon, 21 Jul 2008 15:59:12 +0200
Subject: [Twisted-Python] txAMQP released
Message-ID: <200807211559.13095.esteve@sindominio.net>

Hi all,

I'm pleased to announce that Fluidinfo [1] is releasing a Twisted compatible 
AMQP stack built on the Python Qpid library.

Download from http://foss.fluidinfo.com

We've been using it for a while at Fluidinfo and have converted all the
Qpid tests to use it, so it should be considered fairly stable.

Although we'll try to keep it in sync with Qpid's stable releases, we can't
promise to track the trunk due to lack of resources.

Feedback and contributions will be greatly appreciated! :-)

Cheers.

PS: I don't know which license is the most appropiate to make it compatible
with Qpid and Twisted, so I guess the ASL should suffice.

[1] - Fluidinfo - http://www.fluidinfo.com



From barrywark at gmail.com  Mon Jul 21 10:10:07 2008
From: barrywark at gmail.com (Barry Wark)
Date: Mon, 21 Jul 2008 09:10:07 -0700
Subject: [Twisted-Python] Converting async to sync code (blocking until
	deferreds fire)
In-Reply-To: <20080721101923.GA1178@cs.york.ac.uk>
References: <20080721101923.GA1178@cs.york.ac.uk>
Message-ID: <cd7634ce0807210910u2d1f54ffmece3a2ee4f9c7ec6@mail.gmail.com>

You might take a look at
twisted.internet.threads.blockingCallFromThread (version >=8.0, I
believe). I realize that it's not the favored solution by many of the
Twisted developers, but it's used succesfully in the IPython project
(which is where I came across it) to create the impression of a
blocking client on top of non-blocking Twisted code.

Barry

On Mon, Jul 21, 2008 at 3:19 AM, Jack Whitham <jack-tp at cs.york.ac.uk> wrote:
>
> Hi,
>
> What is the best way to convert asynchronous code (non-blocking,
> returning deferreds) to synchronous code (blocking)?
>
> I have a client that is written using Twisted. Most of the methods
> within the client object return Deferreds because they send messages
> to a server and replies may take some time. This is ideal for the
> wxwidgets GUI that was originally intended to use the client. But
> now I want to write test scripts for the server that are synchronous.
>
> For example, the client provides the method "GetBitInfo" which returns
> a deferred. The deferred is called back with a list as its parameter
> after the server responds to a request. I would like to be able to
> do something like this:
>
>> def GotBitInfo(l): pass
>>
>> if __name__ == "__main__":
>>     c = Client()
>>
>>     d = c.GetBitInfo()
>>     d.addCallback(GotBitInfo)
>>     waitForDeferred(d)
>>
>>     d = c.DoSomethingElse()
>
> In other words, how do I waitForDeferred(), i.e. block until a Deferred fires?
>
> Of course I could rewrite my script as asynchronous code; but what I
> really want is a simple Python-like interface for the client code
> in order to make things as simple as possible for other users. I don't
> want them to *have* to learn how to write asynchronous code - I want
> it to be optional. If the snippet of code listed above is possible,
> then I can wrap the client methods with code that waits for deferreds
> to fire, then returns the values they were called with. Then the users
> will have two ways to use the code: asynchronous (for GUIs, proxy
> servers, etc.) and synchronous (for test scripts).
>
> I noticed that there is a _wait method in your trial code that seems to
> do what I want, but it looks complicated and I'm not sure it is the
> right answer. Its predecessor was also deprecated, which is a bad
> sign (looks like "do not do this!!"). Hence I am looking for expert
> advice.
>
> Thanks.
>
>
> --
> Jack Whitham
> jack at cs.york.ac.uk
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From newptcai at gmail.com  Mon Jul 21 20:16:46 2008
From: newptcai at gmail.com (Peter Cai)
Date: Tue, 22 Jul 2008 10:16:46 +0800
Subject: [Twisted-Python] Please recommend a RPC system working with
	twisted.
In-Reply-To: <20080721131800.GA11544@vidar.dreamhost.com>
References: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>
	<20080721131800.GA11544@vidar.dreamhost.com>
Message-ID: <befee6d80807211916y7f191ab7ia0aad60977a1498f@mail.gmail.com>

Thanks.

I've done some research but seems that AMP does not have any C or CPP
implementation.

As described in this thread, the python implementation of Google Buffer is
not very mature, that's why I have gave it up.

https://groups.google.com/group/protobuf/browse_thread/thread/9acb7638e1f5ff61/2fc640fd1d3f98b8?lnk=gst&q=python

I think I shall try to make ICE work with twisted, although thread
synchronization might be a problem.

BTW : If you are interested in RPC, have a look at

http://zeroc.com/ice.html


On Mon, Jul 21, 2008 at 9:18 PM, David Ripton <dripton at ripton.net> wrote:

> On 2008.07.21 15:01:49 +0800, Peter Cai wrote:
> > I'm looking for an RPC system working with twisted.
> >
> > 1. Binary.  I want it run faster than any xml based RPC.
> >
> > 2. Bidirectional.  Unlike  HTTP, on which the client has to poll the
> sever
> > for events, the server should "call" the client's method to notify
> events.
> >
> > 3. C/Python support.  Part of the system shall be written in C.
> >
> > 4. Could easily integrated  with twisted.
>
> Twisted AMP meets all your requirements except C support, which you
> could probably add.  (Or maybe avoid adding by using some other way
> to bridge C computing code with Python network code, like ctypes.)
>
> Also take a look at Google's Protocol Buffers, which lacks C support but
> has C++ support.  A Twisted version called txprotobuf was recently
> announced.  (Note that Protocol Buffers isn't really a full RPC system,
> just the serialization part.)
>
> I think combining these two might work nicely, though I haven't tried it
> yet.
>
> --
> David Ripton    dripton at ripton.net
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
当只有一张纸和一支笔的时候, 我相信你写下的东西对你来说就是真实的, 不管他们到底是不是真的。
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080722/7f14719b/attachment.html>

From glyph at divmod.com  Mon Jul 21 21:01:09 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 22 Jul 2008 03:01:09 -0000
Subject: [Twisted-Python] Please recommend a RPC system working with
	twisted.
In-Reply-To: <befee6d80807211916y7f191ab7ia0aad60977a1498f@mail.gmail.com>
References: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>
	<20080721131800.GA11544@vidar.dreamhost.com>
	<befee6d80807211916y7f191ab7ia0aad60977a1498f@mail.gmail.com>
Message-ID: <20080722030109.25821.1281976501.divmod.xquotient.12982@joule.divmod.com>

On 02:16 am, newptcai at gmail.com wrote:
>I've done some research but seems that AMP does not have any C or CPP
>implementation.

>I think I shall try to make ICE work with twisted, although thread
>synchronization might be a problem.

In my humble opinion, implementing AMP in C would be a lot easier than 
dealing with thread synchronization issues.  The benefits of Twisted 
will evaporate pretty quickly once you are in that territory.

If I had more than 30 seconds to write this reply, I'd probably write it 
myself to prove the point ;).



From jack-tp at cs.york.ac.uk  Tue Jul 22 08:22:33 2008
From: jack-tp at cs.york.ac.uk (Jack Whitham)
Date: Tue, 22 Jul 2008 15:22:33 +0100
Subject: [Twisted-Python] Converting async to sync code (blocking until
	deferreds fire)
In-Reply-To: <48846F22.9090600@imperial.ac.uk>
References: <20080721101923.GA1178@cs.york.ac.uk>
	<48846F22.9090600@imperial.ac.uk>
Message-ID: <20080722142233.GA13624@cs.york.ac.uk>


> >What is the best way to convert asynchronous code (non-blocking,
> >returning deferreds) to synchronous code (blocking)? 

Ok, I've considered all three of the suggested solutions, and
I think Phil Mayer's suggestion of "yield" suits my requirements
best. In the hope of helping others with a similar problem I
will summarise the suggestions.

1. t.i.threads.blockingCallFromThread 
   This method blocks until a callback/errback is called,
   but it *doesn't* run the reactor's event loop, so you 
   need at least two threads: one to block, and another to run
   the reactor. Therefore it can only be used to convert async to
   sync code in a multithreaded environment. My programs are single
   threaded so this doesn't work. And as Barry Wark points out,
   threads are not a "favored solution" :).

2. Trial _wait
   twisted.trial.unittest has a _wait method which is used by some
   tests to wait for deferreds to fire. However, the only clean
   way to use this _wait method is to write a test case! If this
   were C++ or Java, this method would be "private" - it's only
   externally accessible because Python doesn't have "private".

3. yield
   Since my program is not multithreaded and not a test case,
   the use of yield is most suitable. Here is how yield is used
   in this context:
   http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.defer.html#inlineCallbacks
   This does have some restrictions, not least that Python 2.5 is
   needed. When you use "yield" in a method, it becomes a 
   generator, with different semantics to a conventional method. 
   Nevertheless, your code *looks* like a sequential program.


I'd like to thank everyone who made a suggestion, this has 
been very helpful!


-- 
Jack Whitham
jack at cs.york.ac.uk




From ddwiggins at advpubtech.com  Tue Jul 22 11:07:22 2008
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Tue, 22 Jul 2008 10:07:22 -0700
Subject: [Twisted-Python] Re: Converting async to sync code (blocking until
	deferreds fire)
In-Reply-To: <20080722142233.GA13624@cs.york.ac.uk>
References: <20080721101923.GA1178@cs.york.ac.uk>	<48846F22.9090600@imperial.ac.uk>
	<20080722142233.GA13624@cs.york.ac.uk>
Message-ID: <g6544b$lsi$1@ger.gmane.org>

Jack Whitham wrote:
> 3. yield
>    Since my program is not multithreaded and not a test case,
>    the use of yield is most suitable. Here is how yield is used
>    in this context:
>    http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.defer.html#inlineCallbacks
>    This does have some restrictions, not least that Python 2.5 is
>    needed. 

If that's a problem for you, there's also a 2.4 equivalent, which I've 
been using successfully.  Check out
http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.defer.html#deferredGenerator 



-- 
Don Dwiggins
Advanced Publishing Technology




From glyph at divmod.com  Tue Jul 22 12:08:25 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 22 Jul 2008 18:08:25 -0000
Subject: [Twisted-Python] Converting async to sync code (blocking until
	deferreds fire)
In-Reply-To: <20080722142233.GA13624@cs.york.ac.uk>
References: <20080721101923.GA1178@cs.york.ac.uk>
	<48846F22.9090600@imperial.ac.uk>
	<20080722142233.GA13624@cs.york.ac.uk>
Message-ID: <20080722180825.25821.1973556522.divmod.xquotient.13203@joule.divmod.com>


On 02:22 pm, jack-tp at cs.york.ac.uk wrote:
>2. Trial _wait
>   twisted.trial.unittest has a _wait method which is used by some
>   tests to wait for deferreds to fire. However, the only clean
>   way to use this _wait method is to write a test case! If this
>   were C++ or Java, this method would be "private" - it's only
>   externally accessible because Python doesn't have "private".

There is no "clean" way to use this method.  The "_" denotes that it 
*is* "private".  Python won't prevent you from accessing it, but we will 
;).  Your program is almost guaranteed to break when you upgrade Twisted 
if you use features which we have specifically said are not for public 
use.



From saketh.bhamidipati at gmail.com  Tue Jul 22 12:17:07 2008
From: saketh.bhamidipati at gmail.com (Saketh)
Date: Tue, 22 Jul 2008 11:17:07 -0700
Subject: [Twisted-Python] Waiting on a Deferred
Message-ID: <65339c410807221117p4d1092bau1a183354bb6e2fc7@mail.gmail.com>

Hello everyone,

Is it possible to call asynchronous methods synchronously?

I'm asking because I have an xmlrpc.XMLRPC server which distributes a
calculation across several remote servers, collects the results in a
DeferredList, and wraps it all inside an xmlrpc_something method. Thus, it
needs to return the result to a web browser synchronously.

[Interface] -- [XMLRPC server] -- [Calculators]

This seems like it would be a common thing, getting the result of a
distributed calculation for a browser client, but I haven't been able to
figure it out. I appreciate any assistance!

Thanks,
Saketh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080722/61eaf0c5/attachment.html>

From exarkun at divmod.com  Tue Jul 22 12:25:04 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 22 Jul 2008 14:25:04 -0400
Subject: [Twisted-Python] Waiting on a Deferred
In-Reply-To: <65339c410807221117p4d1092bau1a183354bb6e2fc7@mail.gmail.com>
Message-ID: <20080722182504.29191.537798208.divmod.quotient.1069@ohm>

On Tue, 22 Jul 2008 11:17:07 -0700, Saketh <saketh.bhamidipati at gmail.com> wrote:
>Hello everyone,
>
>Is it possible to call asynchronous methods synchronously?
>
>I'm asking because I have an xmlrpc.XMLRPC server which distributes a
>calculation across several remote servers, collects the results in a
>DeferredList, and wraps it all inside an xmlrpc_something method. Thus, it
>needs to return the result to a web browser synchronously.

You don't need to "call asynchronous methods synchronously" to do this.
twisted.web.xmlrpc.XMLRPC.xmlrpc_* methods can return Deferreds.  If they
do, the response to the browser is delayed until the result of the Deferred
is available.

Jean-Paul



From radix at twistedmatrix.com  Tue Jul 22 12:31:39 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 22 Jul 2008 14:31:39 -0400
Subject: [Twisted-Python] Waiting on a Deferred
In-Reply-To: <65339c410807221117p4d1092bau1a183354bb6e2fc7@mail.gmail.com>
References: <65339c410807221117p4d1092bau1a183354bb6e2fc7@mail.gmail.com>
Message-ID: <60ed19d40807221131u191d21c2yaa5e34a41b332f53@mail.gmail.com>

On Tue, Jul 22, 2008 at 2:17 PM, Saketh <saketh.bhamidipati at gmail.com> wrote:
> Hello everyone,
>
> Is it possible to call asynchronous methods synchronously?
>
> I'm asking because I have an xmlrpc.XMLRPC server which distributes a
> calculation across several remote servers, collects the results in a
> DeferredList, and wraps it all inside an xmlrpc_something method. Thus, it
> needs to return the result to a web browser synchronously.

Everything after "thus" here is incorrect. You can return Deferreds
from xmlrpc_something methods.


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From saketh.bhamidipati at gmail.com  Tue Jul 22 17:10:19 2008
From: saketh.bhamidipati at gmail.com (Saketh)
Date: Tue, 22 Jul 2008 16:10:19 -0700
Subject: [Twisted-Python] Waiting on a Deferred
In-Reply-To: <60ed19d40807221131u191d21c2yaa5e34a41b332f53@mail.gmail.com>
References: <65339c410807221117p4d1092bau1a183354bb6e2fc7@mail.gmail.com>
	<60ed19d40807221131u191d21c2yaa5e34a41b332f53@mail.gmail.com>
Message-ID: <65339c410807221610v651a5b1ndb712a9144136385@mail.gmail.com>

It works! It never occurred to me that Twisted might unwrap the Deferred
automatically.

Thank you for your prompt replies!

On Tue, Jul 22, 2008 at 11:31 AM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Tue, Jul 22, 2008 at 2:17 PM, Saketh <saketh.bhamidipati at gmail.com>
> wrote:
> > Hello everyone,
> >
> > Is it possible to call asynchronous methods synchronously?
> >
> > I'm asking because I have an xmlrpc.XMLRPC server which distributes a
> > calculation across several remote servers, collects the results in a
> > DeferredList, and wraps it all inside an xmlrpc_something method. Thus,
> it
> > needs to return the result to a web browser synchronously.
>
> Everything after "thus" here is incorrect. You can return Deferreds
> from xmlrpc_something methods.
>
>
> --
> Christopher Armstrong
> International Man of Twistery
> http://radix.twistedmatrix.com/
> http://twistedmatrix.com/
> http://canonical.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080722/b8744fdb/attachment.html>

From nextofpumpkin at gmail.com  Wed Jul 23 02:39:19 2008
From: nextofpumpkin at gmail.com (Pump Kin)
Date: Wed, 23 Jul 2008 01:39:19 -0700
Subject: [Twisted-Python] Modifying Conch example
Message-ID: <51a7308f0807230139j6c3f333emc538012b4dee43f7@mail.gmail.com>

Hello! I'm trying to implement the example in the Conch tutorial (
http://twistedmatrix.com/projects/conch/documentation/howto/conch_client.html).
with some modifications.

I want to do the following:

1) Connect to a remote machine using a private key (no password) without
knowing the public key
2) Transfer over some files
3) Issue a series of non-interactive commands (to fire up the scripts I
transferred over)
4) Close the connection


Step 2) I can easily do with a single non-interactive subprocess.Popen()
call to SCP; if there was a way to do it in pure Twisted-Python that would
be great, but i'm not too worried about that.

Step 1) Is really bugging me here; I can't seem to strip the need for
foreknowledge of the public key from the script. I can't easily
programmatically access that information in my use case. I do however have
ready access to the private key and fingerprint for verification. My
modified tutorial scripts just vomit.

Step 3) Is a just a little annoying; The provided tutorial only issues one
command and reads the stdout.  I don't care about stdout in my use-case, but
i do care about issuing a series of commands. i could just issue one long
command with the indivudal subcommands seperated by semicolons (cat blah;
start-script myscript; [etc]) but i'm wondering for curiosity/cleanliness'
sake if there's a way of seperating the commands.

Any help would be much appreciated =]

Regards,

Pumpkin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080723/00787001/attachment.html>

From jack-tp at cs.york.ac.uk  Wed Jul 23 04:00:55 2008
From: jack-tp at cs.york.ac.uk (Jack Whitham)
Date: Wed, 23 Jul 2008 11:00:55 +0100
Subject: [Twisted-Python] Modifying Conch example
In-Reply-To: <51a7308f0807230139j6c3f333emc538012b4dee43f7@mail.gmail.com>
References: <51a7308f0807230139j6c3f333emc538012b4dee43f7@mail.gmail.com>
Message-ID: <20080723100055.GA24868@cs.york.ac.uk>

On Wed, Jul 23, 2008 at 01:39:19AM -0700, Pump Kin wrote:
> Step 1) Is really bugging me here; I can't seem to strip the need for
> foreknowledge of the public key from the script. I can't easily
> programmatically access that information in my use case. I do however have
> ready access to the private key and fingerprint for verification. My
> modified tutorial scripts just vomit.

I had the same problem. Some new key management features have been 
added to Conch recently, so you now only need the private key:

class ClientUserAuth(userauth.SSHUserAuthClient):
    def getPassword(self, prompt=None):
        return # this says we won't do password authentication

    def getPublicKey(self):
        return self.__getKey().public().blob()

    def getPrivateKey(self):
        return defer.succeed(self.__getKey().keyObject)

    def __getKey(self):
        return keys.Key.fromString(data=
"""-----BEGIN RSA PRIVATE KEY-----
... etc... 
""")


(Although I still get a deprecation warning about signData if 
I do this..)


-- 
Jack Whitham
jack at cs.york.ac.uk




From version5 at gmail.com  Wed Jul 23 08:46:57 2008
From: version5 at gmail.com (nnp)
Date: Wed, 23 Jul 2008 15:46:57 +0100
Subject: [Twisted-Python] Running a HTTP client connection through a SOCKS
	proxy
Message-ID: <28749c0e0807230746y6ed84ffbyee5b10b4e5ee0fff@mail.gmail.com>

Hey,

I'm working on an app at the moment, part of which needs to grab a
page from a website and parse the results. It will have to work in
environments where connections have to be routed through a SOCKSv4
proxy but I can't find any way to specify a proxy using any of the
Twisted classes. Is this possible? I assumed it was seeing as how it
is a fairly common situation but the documentation/API haven't
provided any useful information.

Cheers,
nnp

Btw, my code currently looks like this :

from twisted.web.client import HTTPClientFactory
from twisted.internet import ssl
from twisted.internet import reactor
from twisted.web import client

class BugGetter:

    def __init__(self, url):
        '''
        This class attempts to verify that a bug ID is a legitimate
        '''

        self.url = url
        self.contextFactory = ssl.ClientContextFactory()
        self.scheme, self.host, self.port, path = client._parse(url)

    def getPage(self, bugId):
        self.bugUrl = ''.join([self.url, bugId])
        self.hcf = HTTPClientFactory(self.bugUrl)
        self.hcf.deferred.addCallback(self.parsePage)
        self.hcf.deferred.addErrback(self.errorCallback)

        if scheme == 'https:':
            reactor.connectSSL(self.host, self.port, self.hcf,
self.contextFactory)
        else:
            reactor.connectTCP(self.host, self.port, self.hcf)

        reactor.run()

    def parsePage(self):
        print self.hcf.status
        print self.hcf.message
        reactor.stop()

    def errorCallback(self, failure):
        print failure.getErrorMessage()
        reactor.stop()

bz = Bugzilla('https://bugs.example.org/show_bug.cgi?id=')
bz.getPage('9999')

-- 
http://www.smashthestack.org
http://www.unprotectedhex.com



From version5 at gmail.com  Wed Jul 23 09:07:20 2008
From: version5 at gmail.com (nnp)
Date: Wed, 23 Jul 2008 16:07:20 +0100
Subject: [Twisted-Python] Re: Running a HTTP client connection through a
	SOCKS proxy
In-Reply-To: <28749c0e0807230746y6ed84ffbyee5b10b4e5ee0fff@mail.gmail.com>
References: <28749c0e0807230746y6ed84ffbyee5b10b4e5ee0fff@mail.gmail.com>
Message-ID: <28749c0e0807230807l25509991ye8046fe5dd1530f7@mail.gmail.com>

I just realised web proxy support would be much preferable to SOCKSv4
(long day, very tired)...so...to alter my question....does twisted
have support for proxying connections through a web proxy?

On Wed, Jul 23, 2008 at 3:46 PM, nnp <version5 at gmail.com> wrote:
> Hey,
>
> I'm working on an app at the moment, part of which needs to grab a
> page from a website and parse the results. It will have to work in
> environments where connections have to be routed through a SOCKSv4
> proxy but I can't find any way to specify a proxy using any of the
> Twisted classes. Is this possible? I assumed it was seeing as how it
> is a fairly common situation but the documentation/API haven't
> provided any useful information.
>
> Cheers,
> nnp
>
> Btw, my code currently looks like this :
>
> from twisted.web.client import HTTPClientFactory
> from twisted.internet import ssl
> from twisted.internet import reactor
> from twisted.web import client
>
> class BugGetter:
>
>    def __init__(self, url):
>        '''
>        This class attempts to verify that a bug ID is a legitimate
>        '''
>
>        self.url = url
>        self.contextFactory = ssl.ClientContextFactory()
>        self.scheme, self.host, self.port, path = client._parse(url)
>
>    def getPage(self, bugId):
>        self.bugUrl = ''.join([self.url, bugId])
>        self.hcf = HTTPClientFactory(self.bugUrl)
>        self.hcf.deferred.addCallback(self.parsePage)
>        self.hcf.deferred.addErrback(self.errorCallback)
>
>        if scheme == 'https:':
>            reactor.connectSSL(self.host, self.port, self.hcf,
> self.contextFactory)
>        else:
>            reactor.connectTCP(self.host, self.port, self.hcf)
>
>        reactor.run()
>
>    def parsePage(self):
>        print self.hcf.status
>        print self.hcf.message
>        reactor.stop()
>
>    def errorCallback(self, failure):
>        print failure.getErrorMessage()
>        reactor.stop()
>
> bz = Bugzilla('https://bugs.example.org/show_bug.cgi?id=')
> bz.getPage('9999')
>
> --
> http://www.smashthestack.org
> http://www.unprotectedhex.com
>



-- 
http://www.smashthestack.org
http://www.unprotectedhex.com



From ddwiggins at advpubtech.com  Wed Jul 23 11:35:47 2008
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Wed, 23 Jul 2008 10:35:47 -0700
Subject: [Twisted-Python] Re: Waiting on a Deferred
In-Reply-To: <20080722182504.29191.537798208.divmod.quotient.1069@ohm>
References: <65339c410807221117p4d1092bau1a183354bb6e2fc7@mail.gmail.com>
	<20080722182504.29191.537798208.divmod.quotient.1069@ohm>
Message-ID: <g67q5k$1t6$1@ger.gmane.org>

Jean-Paul Calderone wrote:
> You don't need to "call asynchronous methods synchronously" to do this.
> twisted.web.xmlrpc.XMLRPC.xmlrpc_* methods can return Deferreds.  If they
> do, the response to the browser is delayed until the result of the Deferred
> is available.

So "return defer.succeed(...)" in an xmlrpc_* method is harmless, but 
unnecessary when "..." is immediately available?

-- 
Don Dwiggins
Advanced Publishing Technology




From exarkun at divmod.com  Wed Jul 23 11:42:20 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 23 Jul 2008 13:42:20 -0400
Subject: [Twisted-Python] Re: Waiting on a Deferred
In-Reply-To: <g67q5k$1t6$1@ger.gmane.org>
Message-ID: <20080723174220.29191.286628312.divmod.quotient.1456@ohm>

On Wed, 23 Jul 2008 10:35:47 -0700, Don Dwiggins <ddwiggins at advpubtech.com> wrote:
>Jean-Paul Calderone wrote:
>>You don't need to "call asynchronous methods synchronously" to do this.
>>twisted.web.xmlrpc.XMLRPC.xmlrpc_* methods can return Deferreds.  If they
>>do, the response to the browser is delayed until the result of the Deferred
>>is available.
>
>So "return defer.succeed(...)" in an xmlrpc_* method is harmless, but 
>unnecessary when "..." is immediately available?

When "..." isn't a Deferred, yes.  Both versions have the same outcome.

Jean-Paul



From zooko at zooko.com  Wed Jul 23 16:12:30 2008
From: zooko at zooko.com (zooko)
Date: Wed, 23 Jul 2008 16:12:30 -0600
Subject: [Twisted-Python] ANNOUNCING Allmydata.org "Tahoe",
	the Least-Authority Filesystem, v1.2
Message-ID: <8F5BEB7D-6D4F-402E-BAFE-FA6222C2AE89@zooko.com>

Dear twisted-python at twistedmatrix.com:

This open source storage system is built on top of Twisted.  Twisted  
is great!

Regards,

Zooko


We are pleased to announce the release of version 1.2.0 of the "Tahoe"
Least Authority Filesystem.

The "Tahoe" Least Authority Filesystem is a secure, decentralized,
fault-tolerant filesystem.  All of the source code is available under
a Free Software, Open Source licence (or two).

This filesystem is encrypted and distributed over multiple peers in
such a way it continues to function even when some of the peers are
unavailable, malfunctioning, or malicious.

A one-page explanation of the security and fault-tolerance properties
that it offers is visible at:

http://allmydata.org/source/tahoe/trunk/docs/about.html


This is the successor to Allmydata.org "Tahoe" Least Authority
Filesystem v1.1, which was released June 11, 2008 [1].  This release
fixes a security issue in Tahoe v1.1, fixes a few small issues in the
web interface, adds a "check health" operation for mutable files, and
adds logging/operations/deployment improvements.

See the known_issues.txt file [2] and the NEWS file [3] for details.


COMPATIBILITY

The version 1 branch of Tahoe is used as the basis of the consumer
backup product from Allmydata, Inc. -- http://allmydata.com .

Tahoe v1.2 is fully compatible with Tahoe v1.0.  v1.2 clients produce
files which can be read by v1.0 clients.  v1.2 clients can read files
produced by clients of all versions >= v0.8.  v1.2 servers can serve
v1.0 clients and v1.2 clients can use v1.0 servers.

This is the third release in the version 1 series.  We believe that
this version of Tahoe is stable enough to rely on as a permanent store
of valuable data.  The version 1 branch of Tahoe will be actively
supported and maintained for the forseeable future, and future
versions of Tahoe will retain the ability to read files and
directories produced by Tahoe v1 for the forseeable future.


WHAT IS IT GOOD FOR?

With Tahoe, you can distribute your filesystem across a set of
computers, such that if some of the computers fail or turn out to be
malicious, the filesystem continues to work from the remaining
computers.  You can also share your files with other users, using a
cryptographic capability-based access control scheme.

Because this software is the product of less than two years of active
development, we do not categorically recommend it for the storage of
data which is extremely confidential or precious.  However, we believe
that the combination of erasure coding, strong encryption, and careful
engineering make Tahoe safer than common alternatives, such as RAID,
or traditional backup onto a remote server, removable drive, or tape.

This software comes with extensive unit tests [4], and there are no
known security flaws which would compromise confidentiality or data
integrity.  (For all currently known issues please see the
known_issues.txt file [2].)

This release of Tahoe is suitable for the "friendnet" use case [5] --
it is easy to create a filesystem spread over the computers of you and
your friends so that you can share disk space and share files.


LICENCE

You may use this package under the GNU General Public License, version
2 or, at your option, any later version.  See the file "COPYING.GPL"
[6] for the terms of the GNU General Public License, version 2.

You may use this package under the Transitive Grace Period Public
Licence, version 1.0.  The Transitive Grace Period Public Licence says
that you may distribute proprietary derived works of Tahoe without
releasing the source code of that derived work for up to twelve
months, after which time you are obligated to release the source code
of the derived work under the Transitive Grace Period Public
Licence. See the file "COPYING.TGPPL.html" [7] for the terms of the
Transitive Grace Period Public Licence, version 1.0.

(You may choose to use this package under the terms of either licence,
at your option.)


INSTALLATION

Tahoe works on Linux, Mac OS X, Windows, Cygwin, and Solaris.  For
installation instructions please see "docs/install.html" [8].


HACKING AND COMMUNITY

Please join us on the mailing list [9] to discuss uses of Tahoe.
Patches that extend and improve Tahoe are gratefully accepted -- the
RoadMap page [10] shows the next improvements that we plan to make and
CREDITS [11] lists the names of people who've contributed to the
project.  The wiki Dev page [12] contains resources for hackers.


SPONSORSHIP

Tahoe is sponsored by Allmydata, Inc. [13], a provider of commercial
backup services.  Allmydata, Inc. contributes hardware, software,
ideas, bug reports, suggestions, demands, and money (employing several
allmydata.org Tahoe hackers and instructing them to spend part of
their work time on this free-software project).  Also they distribute
customized t-shirts just for some of our favorite contributors.  We
are eternally grateful!


Zooko O'Whielacronx
on behalf of the allmydata.org team
July 21, 2008
Boulder, Colorado, USA

[1] http://allmydata.org/trac/tahoe/browser/relnotes.txt?rev=2716
[2] http://allmydata.org/trac/tahoe/browser/docs/known_issues.txt
[3] http://allmydata.org/trac/tahoe/browser/NEWS
[4] http://allmydata.org/trac/tahoe/wiki/Dev
[5] http://allmydata.org/trac/tahoe/wiki/UseCases
[6] http://allmydata.org/trac/tahoe/browser/COPYING.GPL
[7] http://allmydata.org/source/tahoe/trunk/COPYING.TGPPL.html
[8] http://allmydata.org/source/tahoe/trunk/docs/install.html
[9] http://allmydata.org/cgi-bin/mailman/listinfo/tahoe-dev
[10] http://allmydata.org/trac/tahoe/roadmap
[11] http://allmydata.org/trac/tahoe/browser/CREDITS?rev=2677
[12] http://allmydata.org/trac/tahoe/wiki/Dev
[13] http://allmydata.com




From nathan.stocks at gmail.com  Wed Jul 23 18:59:13 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Wed, 23 Jul 2008 17:59:13 -0700
Subject: [Twisted-Python] ANNOUNCING Allmydata.org "Tahoe",
	the Least-Authority Filesystem, v1.2
In-Reply-To: <8F5BEB7D-6D4F-402E-BAFE-FA6222C2AE89@zooko.com>
References: <8F5BEB7D-6D4F-402E-BAFE-FA6222C2AE89@zooko.com>
Message-ID: <96c9d6a80807231759n287ac943v50df9ee59bd6f03@mail.gmail.com>

On Wed, Jul 23, 2008 at 3:12 PM, zooko <zooko at zooko.com> wrote:
> WHAT IS IT GOOD FOR?
>
> With Tahoe, you can distribute your filesystem across a set of
> computers, such that if some of the computers fail or turn out to be
> malicious, the filesystem continues to work from the remaining
> computers.  You can also share your files with other users, using a
> cryptographic capability-based access control scheme.

Sooo, if you had several servers in a country that you were at war
with, you could reliably use them as storage via Tahoe?

/amused -- yes, yes, I know there are other use cases...

~ Nathan



From liquidchen at gmail.com  Thu Jul 24 03:30:36 2008
From: liquidchen at gmail.com (=?BIG5?B?s6+83a71?=)
Date: Thu, 24 Jul 2008 17:30:36 +0800
Subject: [Twisted-python] help about create a tcp connection pool using twisted
Message-ID: <efc6adb00807240230n1abedbc5y812935b50c577880@mail.gmail.com>

    Hi, if I want to make a tcp connection pool by twisted, how can I do
that?? I am confuse about what should I keep?? The procotol instance
   or something else, thanks a lot...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080724/b0730a9c/attachment.html>

From screwtape at froup.com  Thu Jul 24 04:23:31 2008
From: screwtape at froup.com (Tim Allen)
Date: Thu, 24 Jul 2008 20:23:31 +1000
Subject: [Twisted-Python] Re: Running a HTTP client connection through
	a SOCKS proxy
In-Reply-To: <28749c0e0807230807l25509991ye8046fe5dd1530f7@mail.gmail.com>
References: <28749c0e0807230746y6ed84ffbyee5b10b4e5ee0fff@mail.gmail.com>
	<28749c0e0807230807l25509991ye8046fe5dd1530f7@mail.gmail.com>
Message-ID: <20080724102331.GH2980@thristian.org>

On Wed, Jul 23, 2008 at 04:07:20PM +0100, nnp wrote:
> I just realised web proxy support would be much preferable to SOCKSv4
> (long day, very tired)...so...to alter my question....does twisted
> have support for proxying connections through a web proxy?

I believe Twisted doesn't support HTTP proxies of any kind. There is
support for SOCKSv4 in twisted.protocols.socks, but it's not immediately
evident to me how it works.

It seems to me that in an ideal world, there would be some kind of Proxy
class available that would look much like a reactor to the outside
world, but contain all the logic for reading proxy settings from the OS
and making outgoing connections via those configured proxies. One day,
if I get far enough down my list of potential weekend projects, I might
even do it myself.



From version5 at gmail.com  Thu Jul 24 04:49:56 2008
From: version5 at gmail.com (nnp)
Date: Thu, 24 Jul 2008 11:49:56 +0100
Subject: [Twisted-Python] Re: Running a HTTP client connection through a
	SOCKS proxy
In-Reply-To: <20080724102331.GH2980@thristian.org>
References: <28749c0e0807230746y6ed84ffbyee5b10b4e5ee0fff@mail.gmail.com>
	<28749c0e0807230807l25509991ye8046fe5dd1530f7@mail.gmail.com>
	<20080724102331.GH2980@thristian.org>
Message-ID: <28749c0e0807240349s1a522c6dn6a207553e23ad8d9@mail.gmail.com>

Hrm, OK....I'm not sure if I have an odd view of the world or whether
supporting HTTP proxies isn't all that important. Aren't HTTP proxies
fairly common in large organisations and universities?

Looks like I won't be able to use Twisted for this particular project
then. In case anyone is wondering, I solved the problem (of needing
support for access to https sites via a proxy) by using the code found
here http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/456195

As for the socks proxy support....I looked at that and a few other
modules but (unsurprisingly) found no real documentation and seeing as
how I'm new to Twisted I also had no clue how to use the classes.

Cheers,
nnp

On Thu, Jul 24, 2008 at 11:23 AM, Tim Allen <screwtape at froup.com> wrote:
> On Wed, Jul 23, 2008 at 04:07:20PM +0100, nnp wrote:
>> I just realised web proxy support would be much preferable to SOCKSv4
>> (long day, very tired)...so...to alter my question....does twisted
>> have support for proxying connections through a web proxy?
>
> I believe Twisted doesn't support HTTP proxies of any kind. There is
> support for SOCKSv4 in twisted.protocols.socks, but it's not immediately
> evident to me how it works.
>
> It seems to me that in an ideal world, there would be some kind of Proxy
> class available that would look much like a reactor to the outside
> world, but contain all the logic for reading proxy settings from the OS
> and making outgoing connections via those configured proxies. One day,
> if I get far enough down my list of potential weekend projects, I might
> even do it myself.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.smashthestack.org
http://www.unprotectedhex.com



From p.mayers at imperial.ac.uk  Thu Jul 24 05:41:33 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 24 Jul 2008 12:41:33 +0100
Subject: [Twisted-python] help about create a tcp connection pool using
	twisted
In-Reply-To: <efc6adb00807240230n1abedbc5y812935b50c577880@mail.gmail.com>
References: <efc6adb00807240230n1abedbc5y812935b50c577880@mail.gmail.com>
Message-ID: <48886A6D.8000000@imperial.ac.uk>

陳毅泰 wrote:
>     Hi, if I want to make a tcp connection pool by twisted, how can I do 
> that?? I am confuse about what should I keep?? The procotol instance
>    or something else, thanks a lot...

Yes, you'd keep a number of protocol instances. So for example:

from twisted.internet import protcol, reactor

class MyPool:
   max_connections = 16

   def __init__(self, host, port, prot_class, *p, **kw):
     self.host = host
     self.port = post
     self.factory = protocol.ClientCreator(reactor, prot_class, *p, **kw)
     self.connections = {}
     self.in_use = {}

   def doSomething(self, *p, **kw):
     # find a free protocol
     for id, instance in self.connections.items():
       if id in self.in_use:
         continue
       return self.got_conn(instance, id, *p **kw)

     # no free ones, create a new one
     for id in range(self.max_connections):
       if id in self.connections:
         continue

       d = self.factory.connectTCP(self.host, self.port)
       d.addCallback(self.got_conn, id, *p, **kw)
       return d

     raise Exception('pool full')

   def got_conn(self, proto, id, *p, **kw):
     self.connections[id] = proto
     self.in_use[id] = True
     d = proto.doSomething(*p, **kw)
     d.addBoth(self.done, id)

   def done(self, r, id):
     del self.in_use[id]
     return r



From tim at commsecure.com.au  Thu Jul 24 22:50:12 2008
From: tim at commsecure.com.au (Tim Allen)
Date: Fri, 25 Jul 2008 14:50:12 +1000
Subject: [Twisted-Python] trial and adbapi.ConnectionPool
Message-ID: <20080725145012.7df2edfc@ws35.commsecure.com.au>

In the projects I'm working on at the moment, we're using
t.e.adbapi.ConnectionPool wrapping psycopg2 to handle connections to a
PostgreSQL database. The setUp method of our unit-tests drops and
recreates the database each time, and we've discovered that
intermittently tests will fail because a previous test is still
connected to the database when the subsequent test runs. Annoyingly, it
happens on some machines and not others.

I've attached a unit-test that reliably reproduces the problem for me on
the machines where I've observed it at all.

Looking at the PostgreSQL logs, a normal test-run does something much
like this:

	- connection 1 incoming
	- connection 2 incoming
	- connection 1 executes a statement
	- connection 2 executes a statement
	- connection 1 disconnects
	- connection 2 disconnects
	- the next test tries to drop the database and succeeds.

When things go wrong, it often looks more like this:

	- connection 1 incoming
	- connection 2 incoming
	- connection 1 executes a statement
	- connection 2 executes a statement
	- connection 1 disconnects
	- the next test tries to drop the database and fails because
	  the database is in use.
	- connection 2 disconnects

It turns out that the easiest work-around for this problem is to force
a garbage-collection run after each test (with trial --force-gc or
calling gc.collect()), so I have a work-around in the cause of these
errors is outside my control, but I'm worried that perhaps I'm abusing
the ConnectionPool in some way I haven't noticed.

Are there known issues with shutting down adbapi.ConnectionPool in
tests? Should adbapi.ConnectionPool.close() return a deferred that
fires when the all the connections in the pool are guaranteed to have
shut down? Can anyone see anything wrong in my sample code?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test_reproduce.py
Type: text/x-python
Size: 6087 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20080725/c91155cc/attachment-0002.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20080725/c91155cc/attachment.sig>

From nathan.stocks at gmail.com  Thu Jul 24 23:47:56 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Thu, 24 Jul 2008 22:47:56 -0700
Subject: [Twisted-Python] Twisted + Pyglet = txpyglet?
Message-ID: <96c9d6a80807242247l7d46339ah8e1ca2b8ce03a0c4@mail.gmail.com>

When I got asked the third (fourth?) time to show how I "integrated"
pyglet and twisted together, I decided to package it up and put it out
there.

I called it txpyglet because of all the tx-prefix-discussion-stuff,
but it's really more of a sample app than a twisted library.

A short screencast demo and a link to a zipfile of the goods can be found here:

http://nathanstocks.blogspot.com/2008/07/txpyglet.html

For the actual "integration" method, just look at the last 50-ish
lines of the txpyglet.py file.

P.S. Yes, this method of calling pyglet's loop is blocking.  Yes, I
know that's bad.  And yes, I'm open to suggestions for a better way
for those so inclined.  In fact, I think some people have already put
out better ways--I just haven't had time to look into them...

~ Nathan



From screwtape at froup.com  Fri Jul 25 00:05:30 2008
From: screwtape at froup.com (Tim Allen)
Date: Fri, 25 Jul 2008 16:05:30 +1000
Subject: [Twisted-Python] Re: Running a HTTP client connection through
	a SOCKS proxy
In-Reply-To: <28749c0e0807240349s1a522c6dn6a207553e23ad8d9@mail.gmail.com>
References: <28749c0e0807230746y6ed84ffbyee5b10b4e5ee0fff@mail.gmail.com>
	<28749c0e0807230807l25509991ye8046fe5dd1530f7@mail.gmail.com>
	<20080724102331.GH2980@thristian.org>
	<28749c0e0807240349s1a522c6dn6a207553e23ad8d9@mail.gmail.com>
Message-ID: <20080725060530.GI2980@thristian.org>

On Thu, Jul 24, 2008 at 11:49:56AM +0100, nnp wrote:
> Hrm, OK....I'm not sure if I have an odd view of the world or whether
> supporting HTTP proxies isn't all that important. Aren't HTTP proxies
> fairly common in large organisations and universities?

HTTP proxies are very common; I guess nobody who's needed one has yet
had time to sit down and write support.



From p.mayers at imperial.ac.uk  Fri Jul 25 02:03:18 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 25 Jul 2008 09:03:18 +0100
Subject: [Twisted-Python] Re: Running a HTTP client connection through a
	SOCKS proxy
In-Reply-To: <20080725060530.GI2980@thristian.org>
References: <28749c0e0807230746y6ed84ffbyee5b10b4e5ee0fff@mail.gmail.com>
	<28749c0e0807230807l25509991ye8046fe5dd1530f7@mail.gmail.com>
	<20080724102331.GH2980@thristian.org>
	<28749c0e0807240349s1a522c6dn6a207553e23ad8d9@mail.gmail.com>
	<20080725060530.GI2980@thristian.org>
Message-ID: <20080725080318.GA10068@wildfire.net.ic.ac.uk>

On Fri, Jul 25, 2008 at 04:05:30PM +1000, Tim Allen wrote:
>On Thu, Jul 24, 2008 at 11:49:56AM +0100, nnp wrote:
>> Hrm, OK....I'm not sure if I have an odd view of the world or whether
>> supporting HTTP proxies isn't all that important. Aren't HTTP proxies
>> fairly common in large organisations and universities?
>
>HTTP proxies are very common; I guess nobody who's needed one has yet
>had time to sit down and write support.

It's not hard:

#!/usr/bin/python

from twisted.internet import reactor
from twisted.web import client

def got(page):
    print "got", repr(page)
    reactor.callLater(0.1, reactor.stop)
def failed(err):
    print err.getErrorMessage()
    reactor.callLater(0.1, reactor.stop)

class ProxyClientFactory(client.HTTPClientFactory):
    def setURL(self, url):
	# do the normal stuff
	client.HTTPClientFactory.setURL(self, url)
	# then re-set the path to be the full url
	self.path = url

cf = ProxyClientFactory('http://www.google.com/')
cf.deferred.addCallbacks(got, failed)

reactor.connectTCP('wwwcache1.ic.ac.uk', 3128, cf)



From exarkun at divmod.com  Fri Jul 25 06:20:29 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 25 Jul 2008 08:20:29 -0400
Subject: [Twisted-Python] trial and adbapi.ConnectionPool
In-Reply-To: <20080725145012.7df2edfc@ws35.commsecure.com.au>
Message-ID: <20080725122029.29191.1037155844.divmod.quotient.6584@ohm>

On Fri, 25 Jul 2008 14:50:12 +1000, Tim Allen <tim at commsecure.com.au> wrote:
>In the projects I'm working on at the moment, we're using
>t.e.adbapi.ConnectionPool wrapping psycopg2 to handle connections to a
>PostgreSQL database. The setUp method of our unit-tests drops and
>recreates the database each time, and we've discovered that
>intermittently tests will fail because a previous test is still
>connected to the database when the subsequent test runs. Annoyingly, it
>happens on some machines and not others.

The problem may have something to do with the implementation of
adbapi.Connection.close:

    def close(self):
        # The way adbapi works right now means that closing a connection is
        # a really bad thing  as it leaves a dead connection associated with
        # a thread in the thread pool.
        # Really, I think closing a pooled connection should return it to the
        # pool but that's handled by the runWithConnection method already so,
        # rather than upsetting anyone by raising an exception, let's ignore
        # the request
        pass

which seems somewhat short of ideal to me.

Jean-Paul



From newmom72 at hotmail.com  Fri Jul 25 09:38:30 2008
From: newmom72 at hotmail.com (nadine)
Date: Fri, 25 Jul 2008 11:38:30 -0400
Subject: [Twisted-Python] From prototype to production
Message-ID: <BAY112-W52C4C17A46EEE083DF2F79D9860@phx.gbl>


Hi,
 
Many thanks to the creators and developers of Twisted. 
 
I have been using Twisted to develop a prototype (using an Dell desktop) for an inline DPI server. Needless to say, Twisted made the development time much shorter, and I am very grateful for that.
 
I now want to migrate from prototype to production. I was fully expecting to use an intel IXP server, and having to learn its OS and low-level programming languages. But intel itself told me that they are discontinuing that family, and are recommending the use of multi-core general-purpose servers.
 
If that is the case, then it is tempting to think that I can use the exact same python software I developed for the prototype in the production server. Mind you, for the prototype I was testing three simultaneous users. For production, I am likely to have 5000 simultaneous users per server. 
 
Is this thinking correct? Are there any obvious scalability issues that I would encounter if I used python in production? Is it automatically obvious that I need to reprogram my methods in C, or even a lower-level language?
 
Thanks.
 
N. 
_________________________________________________________________
Stay in touch when you're away with Windows Live Messenger.
http://www.windowslive.com/messenger/overview.html?ocid=TXT_TAGLM_WL_messenger2_072008
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080725/6aeaab48/attachment.html>

From glyph at divmod.com  Fri Jul 25 12:44:04 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Jul 2008 18:44:04 -0000
Subject: [Twisted-Python] From prototype to production
In-Reply-To: <BAY112-W52C4C17A46EEE083DF2F79D9860@phx.gbl>
References: <BAY112-W52C4C17A46EEE083DF2F79D9860@phx.gbl>
Message-ID: <20080725184404.25821.1346399736.divmod.xquotient.13295@joule.divmod.com>

On 03:38 pm, newmom72 at hotmail.com wrote:
>Is this thinking correct? Are there any obvious scalability issues that 
>I would encounter if I used python in production? Is it automatically 
>obvious that I need to reprogram my methods in C, or even a lower-level 
>language?

It's not "automatically" obvious, but that doesn't mean that it will 
work.  Develop some benchmarks for your application, see how fast it is, 
determine whether you need to optimize it, and profile it to discover 
which parts would benefit from optimization.

This strategy is not unique to Twisted, Python, or any other library or 
language, for that matter.  Even if you wrote your whole system in C 
there is no guarantee that it would magically be fast enough to support 
your users.

In most cases Python is fast enough, and in those cases where it is not, 
you can usually move just a few functions to C.  I have never seen a 
case where Python was so slow that an entire system needed to be 
rewritten.



From jack at chesspark.com  Fri Jul 25 18:30:00 2008
From: jack at chesspark.com (Jack Moffitt)
Date: Fri, 25 Jul 2008 18:30:00 -0600
Subject: [Twisted-Python] trial and adbapi.ConnectionPool
In-Reply-To: <20080725122029.29191.1037155844.divmod.quotient.6584@ohm>
References: <20080725145012.7df2edfc@ws35.commsecure.com.au>
	<20080725122029.29191.1037155844.divmod.quotient.6584@ohm>
Message-ID: <9b58f4550807251730g3377ca53h273f902f6e65b035@mail.gmail.com>

On Fri, Jul 25, 2008 at 6:20 AM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>
> On Fri, 25 Jul 2008 14:50:12 +1000, Tim Allen <tim at commsecure.com.au> wrote:
>>
>> In the projects I'm working on at the moment, we're using
>> t.e.adbapi.ConnectionPool wrapping psycopg2 to handle connections to a
>> PostgreSQL database. The setUp method of our unit-tests drops and
>> recreates the database each time, and we've discovered that
>> intermittently tests will fail because a previous test is still
>> connected to the database when the subsequent test runs. Annoyingly, it
>> happens on some machines and not others.
>
> The problem may have something to do with the implementation of
> adbapi.Connection.close:

Even with a better close() we get similar issues at Chesspark.  I'm
very happy to learn about the gc.collect() workaround.

jack.



From exarkun at twistedmatrix.com  Sat Jul 26 22:05:09 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Jul 2008 04:05:09 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1217131509.18.567332967@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080727/c33aa2aa/attachment.html>

From nathan.stocks at gmail.com  Sat Jul 26 22:42:12 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Sat, 26 Jul 2008 22:42:12 -0600
Subject: [Twisted-Python] C or Objective-C AMP?
Message-ID: <96c9d6a80807262142h38e82264s949fed192f8d4c9a@mail.gmail.com>

1) Does anyone know if AMP has been implemented in either C or Objective-C yet?

2) Is there a better way for me to find that out than asking on this
list?  (Is there somewhere I should be looking first?)

~ Nathan



From cartermichael at gmail.com  Sun Jul 27 03:28:37 2008
From: cartermichael at gmail.com (Michael Carter)
Date: Sun, 27 Jul 2008 02:28:37 -0700
Subject: [Twisted-Python] Writing new transports / a tunnel Protocol
Message-ID: <3a05072b0807270228o3cde79aage7bff5f5e41f3994@mail.gmail.com>

Hello,

I'm hoping to use existing protocol implementations in twisted, but over a
custom tunneling protocol that I'll call CTP for the remainder of this
thread. CTP is basically TCP with a couple of strange characteristics.
Besides a custom handshake, two actual tcp connections are used for the data
transport, each of which is considered uni-directional; one connection is
used for "upstream" and one for "downstream".

I know how to create a twisted factory / protocol implementation for CTP
such that you could write a CTP based protocol by inheriting from
CTPProtocol and overriding the "dataRead" function. But this means I have to
do more work to get each existing twisted protocol working with my CTP
implementation.

So my question is, what is the best way to take an implementation of this
protocol and integrate it tightly with twisted's internals? It seems like I
would need a new reactor implementation with a listenCTP function, for one.
Of course, I wouldn't want to just inherit from the SelectReactor, because I
want to be able to use Epoll (or others) as well.

Please excuse my ignorance of twisted's architecture. I already have a
prototype of this (see orbited 0.5.x) but I want my next release to
integrate tightly with twisted's infrastructure instead of re-inventing an
API on top.

-Michael Carter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20080727/a6b2cc71/attachment.html>

From exarkun at divmod.com  Sun Jul 27 06:38:44 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 27 Jul 2008 08:38:44 -0400
Subject: [Twisted-Python] Writing new transports / a tunnel Protocol
In-Reply-To: <3a05072b0807270228o3cde79aage7bff5f5e41f3994@mail.gmail.com>
Message-ID: <20080727123844.29191.1066973468.divmod.quotient.7237@ohm>

On Sun, 27 Jul 2008 02:28:37 -0700, Michael Carter <cartermichael at gmail.com> wrote:
>Hello,
>
> [snip]
>
>So my question is, what is the best way to take an implementation of this
>protocol and integrate it tightly with twisted's internals? It seems like I
>would need a new reactor implementation with a listenCTP function, for one.
>Of course, I wouldn't want to just inherit from the SelectReactor, because I
>want to be able to use Epoll (or others) as well.
>
>Please excuse my ignorance of twisted's architecture. I already have a
>prototype of this (see orbited 0.5.x) but I want my next release to
>integrate tightly with twisted's infrastructure instead of re-inventing an
>API on top.
>

You don't have to add a method to the reactor.  You can make a free
function which takes a reactor as an argument.

Jean-Paul



From jtanis at mdchs.org  Sun Jul 27 15:01:22 2008
From: jtanis at mdchs.org (James Tanis)
Date: Sun, 27 Jul 2008 17:01:22 -0400
Subject: [Twisted-Python] Re: Running a HTTP client connection through a
	SOCKS proxy
In-Reply-To: <28749c0e0807240349s1a522c6dn6a207553e23ad8d9@mail.gmail.com>
Message-ID: <d034d08d64085dfe3fb001f5a6a9f3b6@portal.mdchs.org>

"nnp" <version5 at gmail.com> wrote:
> Hrm, OK....I'm not sure if I have an odd view of the world or whether
> supporting HTTP proxies isn't all that important. Aren't HTTP proxies
> fairly common in large organisations and universities?

Yeah, but, except for when authentication is required, most of them are set
up to be transparent and hence don't really need support. I do realize that
there are authenticating http proxies, I have one set up at work, but I
guess it's not common enough yet to garner support.



--
James Tanis
Technical Coordinator
Monsignor Donovan Catholic High School
e: jtanis at mdchs.org





From jml at mumak.net  Sun Jul 27 20:19:11 2008
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 28 Jul 2008 14:19:11 +1200
Subject: [Twisted-Python] C or Objective-C AMP?
In-Reply-To: <96c9d6a80807262142h38e82264s949fed192f8d4c9a@mail.gmail.com>
References: <96c9d6a80807262142h38e82264s949fed192f8d4c9a@mail.gmail.com>
Message-ID: <d06a5cd30807271919i10c5e3c7t74f32faa8ff4e534@mail.gmail.com>

On Sun, Jul 27, 2008 at 4:42 PM, Nathan <nathan.stocks at gmail.com> wrote:
> 1) Does anyone know if AMP has been implemented in either C or Objective-C yet?
>

I don't think so. I've wanted to do a C one, but only as a personal exercise.

> 2) Is there a better way for me to find that out than asking on this
> list?  (Is there somewhere I should be looking first?)

This is a pretty good way. You could also look at the Twisted
Community page at https://launchpad.net/tx.

jml



From zmola at acm.org  Sun Jul 27 20:27:05 2008
From: zmola at acm.org (Carl Zmola)
Date: Sun, 27 Jul 2008 22:27:05 -0400
Subject: [Twisted-Python] C or Objective-C AMP?
In-Reply-To: <d06a5cd30807271919i10c5e3c7t74f32faa8ff4e534@mail.gmail.com>
References: <96c9d6a80807262142h38e82264s949fed192f8d4c9a@mail.gmail.com>
	<d06a5cd30807271919i10c5e3c7t74f32faa8ff4e534@mail.gmail.com>
Message-ID: <488D2E79.10709@acm.org>

Jonathan Lange wrote:
> On Sun, Jul 27, 2008 at 4:42 PM, Nathan <nathan.stocks at gmail.com> wrote:
>   
>> 1) Does anyone know if AMP has been implemented in either C or Objective-C yet?
>>
>>     
>
> I don't think so. I've wanted to do a C one, but only as a personal exercise.
Has anyone done any porting between ACE 
(http://www.cse.wustl.edu/~schmidt/ACE.html) and Twisted (either way)
On paper they seem similar, but I haven't written any protocols in either.


Carl




From py.adriano at gmail.com  Mon Jul 28 09:04:49 2008
From: py.adriano at gmail.com (Adriano Marques)
Date: Mon, 28 Jul 2008 12:04:49 -0300
Subject: [Twisted-Python] Re: Possible bug on twisted.conch.ssh.keys?
In-Reply-To: <29ec21540807280629y7852498blac2119ac986c43f2@mail.gmail.com>
References: <29ec21540807280629y7852498blac2119ac986c43f2@mail.gmail.com>
Message-ID: <29ec21540807280804u208645eeq43c0a714eb7207e@mail.gmail.com>

Folks,

While I was trying to find why the verify method was returning False,
I discovered that inside the _verify method, at RSA.py, there was the
following code:

<RSA_code>
def _verify(self, M, sig):
    m2=self._encrypt(sig[0])
    if m2[0]==M:
        return 1
    else: return 0
</RSA_code>

Using the live debug of wingide, I checked the values, and here is the result:

<debug>
>>> print m2[0] == M
False
>>> print m2[0]
5486124068793688683255936251187209270074392635932332070112001988456197381759672947165175699536362793613284725337872111744958183862744647903224103718245670299614498700710006264535590197791934024641512541262359795191593456970905950167587431434979106624455856690274067852326335446193014962274187407641892263
>>> print M
5486124068793688683255936251187209270074392635932332070112001988456197381759672947165175699536362793613284725337872111744958183862744647903224103718245670299614498700710006264535590197791934024641512541262359795191593456970905950167587431434979106624455857062955565129940502062033292313613058888050118445
>>> print type(m2[0]), type(M)
<type 'long'> <type 'long'>
</debug>

So, m2[0] is really different from M, but why if I'm using the same
keys from the same place?

Hope this helps to clear the issue.


Kind Regards,

On Mon, Jul 28, 2008 at 10:29 AM, Adriano Marques <py.adriano at gmail.com> wrote:
> Hello folks,
>
> I'm facing a problem here while trying to implement a ssh server and
> client using twisted. There are some deprecated functions that are
> pointing me to use new ones, which in turn doesn't seem to work fine.
> I'm not sure if it is the case, mainly because the deprecated
> functions are calling the new ones, but while debuging the code I
> found that something there is wrong, and that can potentially be
> hapenning because of the changes recently made to that module. As I'm
> somehow new to twisted I'm not sure about my statements arround the
> problem. Here follows the codes and exceptions I'm getting:
>
> <client_code>
> #!/usr/bin/env python
>
> # This code was based on an example from twisted website
>
> from twisted.conch.ssh import transport, userauth, connection
> from twisted.conch.ssh import common, keys, channel
> from twisted.internet import defer, protocol, reactor
> from twisted.python import log
> import struct, sys, getpass, os
>
> USER = 'ssh'
> HOST = 'localhost'
> PORT = 2222
> PUBKEY = "ssh-rsa
> AAAAB3NzaC1yc2EAAAADAQABAAAAgQD3n4sYqbdnlVyvy2SRUmQ5HJg2NDHyC0m4FIykDygXW2PTcSHU/Jany95D54qAEkUra0KHk94KvyGhNVYXqPmzPLu4onlr0Y/gQzEsIy15jDGjMWVCX/8+PQJxMYObSKs8U1o/h5fDNeKQs4bZbrm+35eT/Kvyerqa6ab5OsIEnQ=="
> PRIVKEY = """-----BEGIN RSA PRIVATE KEY-----
> MIICXAIBAAKBgQD3n4sYqbdnlVyvy2SRUmQ5HJg2NDHyC0m4FIykDygXW2PTcSHU
> /Jany95D54qAEkUra0KHk94KvyGhNVYXqPmzPLu4onlr0Y/gQzEsIy15jDGjMWVC
> X/8+PQJxMYObSKs8U1o/h5fDNeKQs4bZbrm+35eT/Kvyerqa6ab5OsIEnQIDAQAB
> AoGAK2MWASVDkG+4RMkTfu77xpH/DYhJtApMSWe4WMqbELSfoh2xetsjHpV3BVjd
> iKEq43ewuYasIh/pKZDp281sqqXdg9VI9ZW7kB00FhO2wA4emCIVj6CHMl1K9NrU
> 9Spy40garaYnDdud79SnKtxlKQEALOwCpTEcrjGOLBTbirUCQQD/FkP1zhpOSaOy
> B32CiC13W5fFfREzBxzQ3Med1i1OYtFfBEdJqv/Z7APadNN8ySI3r+UAfGatTzJI
> zbiSZ2fHAkEA+IJwWpw6d8R3t7+8UgTrqdsZhLRdidO0cHcIFcnU/QYZg+iw3F+q
> Tuz/mngpfb5214r8zwcwlNzsC4+fyOOYewJBAMPstRw6Rog1FW8rQ6Kbt9hCWItO
> aYR5BRADU6sOk1PuoIPLhHm3xrX6CmejbcEdt5NwHYNHCZI6DxRONmL024cCQBky
> eJvnXVJJfG4IJdsXHqIBUiwPcbCI47HHj+1NoqfpF2s1i8E8ffM0upH5/xL93eTq
> 9ck0DGv7nn9pl6Tx1sMCQCWZbWDnmEdsSoNUQZ8fyQEDoZ/2gUP+R2/WpLikwmSA
> 41n7cUONVthIYOZw0qQPP//PyPtMVxcYT76D5QACEK8=
> -----END RSA PRIVATE KEY-----"""
>
> class ClientTransport(transport.SSHClientTransport):
>    def connectionMade(self):
>        transport.SSHClientTransport.connectionMade(self)
>
>    def verifyHostKey(self, hostKey, fingerprint):
>        return defer.succeed(1)
>
>    def connectionSecure(self):
>        self.requestService(ClientUserAuth(USER, ClientConnection()))
>
> class ClientUserAuth(userauth.SSHUserAuthClient):
>    def getPublicKey(self):
>        # Issue 1
>        return PUBKEY.encode("ascii")
>
>    def getPrivateKey(self):
>        # Issue 2
>        return defer.succeed(keys.getPrivateKeyObject(data=PRIVKEY))
>
>    def getPassword(self):
>        return defer.succeed(getpass.getpass("%s@%s's password: " %
> (USER, HOST)))
>
>    def getGenericAnswers(self, name, instruction, questions):
>        import pdb; pdb.set_trace()
>        log.debug("Get Generic answers: %s, %s, %s" % (name,
>                                                       instruction,
>                                                       questions))
>
>        answers = []
>        for prompt, echo in questions:
>            if echo:
>                answer = raw_input(prompt)
>            else:
>                answer = getpass.getpass(prompt)
>            answers.append(answer)
>        return defer.succeed(answers)
>
>    def tryAuth(self, kind):
>        kind = "publickey"
>        log.debug("tryAuth: %s" % kind)
>        log.debug("Public Key: %s" % self.getPublicKey())
>        return userauth.SSHUserAuthClient.tryAuth(self, kind)
>
>    def signData(self, publicKey, signData):
>        log.debug("Ran signData with %s and %s" % (publicKey, signData))
>        import pdb; pdb.set_trace()
>        signed = userauth.SSHUserAuthClient.signData(self, publicKey, signData)
>
>        return signed
>
>    def auth_publickey(self):
>        log.debug("Trying Auth Method: Public Key")
>        return userauth.SSHUserAuthClient.auth_publickey(self)
>
> class ClientConnection(connection.SSHConnection):
>    def serviceStarted(self):
>        log.debug("Service started")
>        self.openChannel(TrueChannel(2**16, 2**15, self))
>        self.openChannel(FalseChannel(2**16, 2**15, self))
>        self.openChannel(CatChannel(2**16, 2**15, self))
>
> class TrueChannel(channel.SSHChannel):
>    name = 'session'
>
>    def openFailed(self, reason):
>        print 'true failed', reason
>
>    def channelOpen(self, ignoredData):
>        self.conn.sendRequest(self, 'exec', common.NS('true'))
>
>    def request_exit_status(self, data):
>        status = struct.unpack('>L', data)[0]
>        print 'true status was: %s' % status
>        self.loseConnection()
>
> class FalseChannel(channel.SSHChannel):
>    name = 'session'
>
>    def openFailed(self, reason):
>        print 'false failed', reason
>
>    def channelOpen(self, ignoredData):
>        self.conn.sendRequest(self, 'exec', common.NS('false'))
>
>    def request_exit_status(self, data):
>        status = struct.unpack('>L', data)[0]
>        print 'false status was: %s' % status
>        self.loseConnection()
>
> class CatChannel(channel.SSHChannel):
>    name = 'session'
>
>    def openFailed(self, reason):
>        print 'echo failed', reason
>
>    def channelOpen(self, ignoredData):
>        self.data = ''
>        d = self.conn.sendRequest(self, 'exec', common.NS('cat'), wantReply = 1)
>        d.addCallback(self._cbRequest)
>
>    def _cbRequest(self, ignored):
>        self.write('hello conch\n')
>        self.conn.sendEOF(self)
>
>    def dataReceived(self, data):
>        self.data += data
>
>    def closed(self):
>        print 'got data from cat: %s' % repr(self.data)
>        self.loseConnection()
>        reactor.stop()
>
> protocol.ClientCreator(reactor, ClientTransport).connectTCP(HOST, 2222)
> reactor.run()
> </client_code>
>
> The issues:
>
> 1 - I had to encode the public key to ascii prior to using it. I don't
> know why, but the struct was raising an exception telling that one of
> the chars where out of the ascii range. But it doesn't look to have
> any character outside the ascii range, AFAIK. Anyway, it worked when I
> did the conversion to ascii.
>
> 2 - When I use: keys.Key.fromString(data=PRIVKEY) instead of the
> deprecated keys.getPrivateKeyObject(data=PRIVKEY), I get this error
> while trying to authenticate:
>
> <error>
> # This was caught directly from pdb prompt:
>> connectSSH.py(77)signData()
> -> signed = userauth.SSHUserAuthClient.signData(self, publicKey, signData)
> (Pdb) n
>> site-packages/twisted/conch/ssh/userauth.py:374: DeprecationWarning: signData is deprecated since Twisted Conch 0.9.  Use Key(obj).sign(data).
>  return keys.signData(privateKey, signData)
>> connectSSH.py(79)signData()
> -> return signed
> (Pdb) p signed
> <Deferred at 0x12a1760  current result:
> <twisted.python.failure.Failure <type 'exceptions.RuntimeError'>>>
> (Pdb) p signed.result
> <twisted.python.failure.Failure <type 'exceptions.RuntimeError'>>
> (Pdb) p signed.result.getErrorMessage()
> 'unknown type of object: <RSA Private Key (1023 bits)\nattr
> e:\n\t01:00:01\nattr
> d:\n\t2b:63:16:01:25:43:90:6f:b8:44:c9:13:7e:ee:fb:\n\tc6:91:ff:0d:88:49:b4:0a:4c:49:67:b8:58:ca:9b:\n\t10:b4:9f:a2:1d:b1:7a:db:23:1e:95:77:05:58:dd:\n\t88:a1:2a:e3:77:b0:b9:86:ac:22:1f:e9:29:90:e9:\n\tdb:cd:6c:aa:a5:dd:83:d5:48:f5:95:bb:90:1d:34:\n\t16:13:b6:c0:0e:1e:98:22:15:8f:a0:87:32:5d:4a:\n\tf4:da:d4:f5:2a:72:e3:48:1a:ad:a6:27:0d:db:9d:\n\tef:d4:a7:2a:dc:65:29:01:00:2c:ec:02:a5:31:1c:\n\tae:31:8e:2c:14:db:8a:b5\nattr
> n:\n\t00:f7:9f:8b:18:a9:b7:67:95:5c:af:cb:64:91:52:\n\t64:39:1c:98:36:34:31:f2:0b:49:b8:14:8c:a4:0f:\n\t28:17:5b:63:d3:71:21:d4:fc:96:a7:cb:de:43:e7:\n\t8a:80:12:45:2b:6b:42:87:93:de:0a:bf:21:a1:35:\n\t56:17:a8:f9:b3:3c:bb:b8:a2:79:6b:d1:8f:e0:43:\n\t31:2c:23:2d:79:8c:31:a3:31:65:42:5f:ff:3e:3d:\n\t02:71:31:83:9b:48:ab:3c:53:5a:3f:87:97:c3:35:\n\te2:90:b3:86:d9:6e:b9:be:df:97:93:fc:ab:f2:7a:\n\tba:9a:e9:a6:f9:3a:c2:04:9d\nattr
> q:\n\t00:ff:16:43:f5:ce:1a:4e:49:a3:b2:07:7d:82:88:\n\t2d:77:5b:97:c5:7d:11:33:07:1c:d0:dc:c7:9d:d6:\n\t2d:4e:62:d1:5f:04:47:49:aa:ff:d9:ec:03:da:74:\n\td3:7c:c9:22:37:af:e5:00:7c:66:ad:4f:32:48:cd:\n\tb8:92:67:67:c7\nattr
> p:\n\t00:f8:82:70:5a:9c:3a:77:c4:77:b7:bf:bc:52:04:\n\teb:a9:db:19:84:b4:5d:89:d3:b4:70:77:08:15:c9:\n\td4:fd:06:19:83:e8:b0:dc:5f:aa:4e:ec:ff:9a:78:\n\t29:7d:be:76:d7:8a:fc:cf:07:30:94:dc:ec:0b:8f:\n\t9f:c8:e3:98:7b\nattr
> u:\n\t25:99:6d:60:e7:98:47:6c:4a:83:54:41:9f:1f:c9:\n\t01:03:a1:9f:f6:81:43:fe:47:6f:d6:a4:b8:a4:c2:\n\t64:80:e3:59:fb:71:43:8d:56:d8:48:60:e6:70:d2:\n\ta4:0f:3f:ff:cf:c8:fb:4c:57:17:18:4f:be:83:e5:\n\t00:02:10:af>'
> </error>
>
> This is the function that raised that exception:
> http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.1.0/twisted/conch/ssh/keys.py#L387
> It looks like the problem is that the class name doesn't start with
> Crypto.PublicKey. Then, when I use the deprecated method, this is what
> I have:
>
> <not_an_error>
>> connectSSH.py(77)signData()
> -> signed = userauth.SSHUserAuthClient.signData(self, publicKey, signData)
> (Pdb) n
> tests/connectSSH.py:48: DeprecationWarning: getPrivateKeyObject is
> deprecated since Twisted Conch 0.9.  Use Key.fromString().
>  return defer.succeed(keys.getPrivateKeyObject(data=PRIVKEY))
> site-packages/twisted/conch/ssh/userauth.py:374: DeprecationWarning:
> signData is deprecated since Twisted Conch 0.9.  Use
> Key(obj).sign(data).
>  return keys.signData(privateKey, signData)
>> connectSSH.py(79)signData()
> -> return signed
> (Pdb) p signed
> <Deferred at 0x12a1760  current result:
> '\x00\x00\x00\x07ssh-rsa\x00\x00\x00\x80\xa9w-\x0c\x9e\xc3\xe8\xd0\xff\xb8\xf0\xbbi*\xecJ\x8e5\xac\x0e(@\x18\x81\x11\xf4\xff\xda\xde\xd6\x9b\xbe\xef\\\xc2\xd0F8Q\x15\xd0A\xa1!$\xe2\xe5\xa0\xf8\x12O\xa0*4\xe1)\xc2:\xbf\x16\x0b\x8a\xd2J\xa8D\x01\xdd\x10\xe3\xeb\x8b*9,\xf3#b\xff\xbf\xc9\xe9\xdc\x81\xa4B\x88$\r\x8b\xef|y\x80\r\x08\x8a*\x08x:\x0c{\xcf\x97\xb7"\xe19\x1f\xa2_wV4\xfa\x19"Vf\xcf\x80\xa7i\x98\xfa\xefM'>
> </not_an_error>
>
> After moving to the deprecated method, everything seems to work ok
> with the client, but then I started to have a similar problem at the
> server side, while verifying client's signature. Here is the relevant
> part of the server code, which is the method requestAvatarId of the
> Credential Checker I implemented:
>
> <server_code>
> # This code is based in an example that I caught from twisted website
> class PublicKeyChecker():
>    implements(checkers.ICredentialsChecker)
>    credentialInterfaces = (credentials.ISSHPrivateKey, )
>
>    def requestAvatarId(self, credentials):
>        # I removed here the code that verified if the user is
> registered in our database, to easy for you guys to understand the
> relevant part of the code. Just consider that the variable user
> contains the found user object.
>
>        user_key = user.key.public_key
>        if not credentials.blob == user_key:
>            raise failure.Failure(error.ConchError("Wrong key."))
>        if not credentials.signature:
>            return failure.Failure(error.ValidPublicKey())
>
>        pub_key = Key.fromString(data=credentials.blob)
>        # Issue 3
>        if verifySignature(pub_key,
>                           credentials.signature,
>                           credentials.sigData):
>            return credentials.username
>        else:
>            return failure.Failure(error.ConchError("Incorrect Signature."))
>    else:
>        return failure.Failure(error.ConchError("Authentication Failed."))
> </server_code>
>
> 3 - Then, while I get to the verifySignature method, I get the following error:
>
> <error>
> RuntimeError: unknown type of object: <RSA Public Key (1023 bits)
> attr e:
>        01:00:01
> attr n:
>        00:f7:9f:8b:18:a9:b7:67:95:5c:af:cb:64:91:52:
>        64:39:1c:98:36:34:31:f2:0b:49:b8:14:8c:a4:0f:
>        28:17:5b:63:d3:71:21:d4:fc:96:a7:cb:de:43:e7:
>        8a:80:12:45:2b:6b:42:87:93:de:0a:bf:21:a1:35:
>        56:17:a8:f9:b3:3c:bb:b8:a2:79:6b:d1:8f:e0:43:
>        31:2c:23:2d:79:8c:31:a3:31:65:42:5f:ff:3e:3d:...
> </error>
>
> Which is the same exception raised by the key.type() function that
> have put us at the same trouble in the client. Then, at the debuger, I
> found that the correct key (which is a class with name starting with
> Crypto.PublicKey) is right inside this "unknown" object, which is a
> RSA Public Key in object.keyObject.keyObject! I ran the WingIDE
> debugger and simply saw that, as you can see in this screenshot:
> http://www.imageno.com/z99azx3v7qnzpic.html
>
> Ok, I also get the deprecated warning while using the verifySignature
> method instead of Key(obj).verify(sig, data), then I decided to test
> it also just to don't make you guys wast your time with me for
> nothing. I called pub_key.verify(credentials.signature,
> credentials.sigData) instead of that verifySignature call, and it
> returned False instead leading to a failure in authentication.
>
> Both apps (client and server) are running inside the same machine,
> consulting the same database, the same keys and user, so there it is
> not reasonable to be failing if my code is correct. Maybe I missed
> something. Can you guys help me?
>
> Sorry about the very long email, but I tried to be as much verbose as
> I could in order to help you guys help me.
>
>
> Kind Regards,
>
> --
> Adriano Monteiro Marques
>
> http://adriano-marques.blogspot.com
> http://umit.sourceforge.net
> py.adriano at gmail.com
>
> "Don't stay in bed, unless you can make money in bed." - George Burns
>



-- 
Adriano Monteiro Marques

http://adriano-marques.blogspot.com
http://umit.sourceforge.net
py.adriano at gmail.com

"Don't stay in bed, unless you can make money in bed." - George Burns



From py.adriano at gmail.com  Mon Jul 28 07:29:25 2008
From: py.adriano at gmail.com (Adriano Marques)
Date: Mon, 28 Jul 2008 10:29:25 -0300
Subject: [Twisted-Python] Possible bug on twisted.conch.ssh.keys?
Message-ID: <29ec21540807280629y7852498blac2119ac986c43f2@mail.gmail.com>

Hello folks,

I'm facing a problem here while trying to implement a ssh server and
client using twisted. There are some deprecated functions that are
pointing me to use new ones, which in turn doesn't seem to work fine.
I'm not sure if it is the case, mainly because the deprecated
functions are calling the new ones, but while debuging the code I
found that something there is wrong, and that can potentially be
hapenning because of the changes recently made to that module. As I'm
somehow new to twisted I'm not sure about my statements arround the
problem. Here follows the codes and exceptions I'm getting:

<client_code>
#!/usr/bin/env python

# This code was based on an example from twisted website

from twisted.conch.ssh import transport, userauth, connection
from twisted.conch.ssh import common, keys, channel
from twisted.internet import defer, protocol, reactor
from twisted.python import log
import struct, sys, getpass, os

USER = 'ssh'
HOST = 'localhost'
PORT = 2222
PUBKEY = "ssh-rsa
AAAAB3NzaC1yc2EAAAADAQABAAAAgQD3n4sYqbdnlVyvy2SRUmQ5HJg2NDHyC0m4FIykDygXW2PTcSHU/Jany95D54qAEkUra0KHk94KvyGhNVYXqPmzPLu4onlr0Y/gQzEsIy15jDGjMWVCX/8+PQJxMYObSKs8U1o/h5fDNeKQs4bZbrm+35eT/Kvyerqa6ab5OsIEnQ=="
PRIVKEY = """-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQD3n4sYqbdnlVyvy2SRUmQ5HJg2NDHyC0m4FIykDygXW2PTcSHU
/Jany95D54qAEkUra0KHk94KvyGhNVYXqPmzPLu4onlr0Y/gQzEsIy15jDGjMWVC
X/8+PQJxMYObSKs8U1o/h5fDNeKQs4bZbrm+35eT/Kvyerqa6ab5OsIEnQIDAQAB
AoGAK2MWASVDkG+4RMkTfu77xpH/DYhJtApMSWe4WMqbELSfoh2xetsjHpV3BVjd
iKEq43ewuYasIh/pKZDp281sqqXdg9VI9ZW7kB00FhO2wA4emCIVj6CHMl1K9NrU
9Spy40garaYnDdud79SnKtxlKQEALOwCpTEcrjGOLBTbirUCQQD/FkP1zhpOSaOy
B32CiC13W5fFfREzBxzQ3Med1i1OYtFfBEdJqv/Z7APadNN8ySI3r+UAfGatTzJI
zbiSZ2fHAkEA+IJwWpw6d8R3t7+8UgTrqdsZhLRdidO0cHcIFcnU/QYZg+iw3F+q
Tuz/mngpfb5214r8zwcwlNzsC4+fyOOYewJBAMPstRw6Rog1FW8rQ6Kbt9hCWItO
aYR5BRADU6sOk1PuoIPLhHm3xrX6CmejbcEdt5NwHYNHCZI6DxRONmL024cCQBky
eJvnXVJJfG4IJdsXHqIBUiwPcbCI47HHj+1NoqfpF2s1i8E8ffM0upH5/xL93eTq
9ck0DGv7nn9pl6Tx1sMCQCWZbWDnmEdsSoNUQZ8fyQEDoZ/2gUP+R2/WpLikwmSA
41n7cUONVthIYOZw0qQPP//PyPtMVxcYT76D5QACEK8=
-----END RSA PRIVATE KEY-----"""

class ClientTransport(transport.SSHClientTransport):
    def connectionMade(self):
        transport.SSHClientTransport.connectionMade(self)

    def verifyHostKey(self, hostKey, fingerprint):
        return defer.succeed(1)

    def connectionSecure(self):
        self.requestService(ClientUserAuth(USER, ClientConnection()))

class ClientUserAuth(userauth.SSHUserAuthClient):
    def getPublicKey(self):
        # Issue 1
        return PUBKEY.encode("ascii")

    def getPrivateKey(self):
        # Issue 2
        return defer.succeed(keys.getPrivateKeyObject(data=PRIVKEY))

    def getPassword(self):
        return defer.succeed(getpass.getpass("%s@%s's password: " %
(USER, HOST)))

    def getGenericAnswers(self, name, instruction, questions):
        import pdb; pdb.set_trace()
        log.debug("Get Generic answers: %s, %s, %s" % (name,
                                                       instruction,
                                                       questions))

        answers = []
        for prompt, echo in questions:
            if echo:
                answer = raw_input(prompt)
            else:
                answer = getpass.getpass(prompt)
            answers.append(answer)
        return defer.succeed(answers)

    def tryAuth(self, kind):
        kind = "publickey"
        log.debug("tryAuth: %s" % kind)
        log.debug("Public Key: %s" % self.getPublicKey())
        return userauth.SSHUserAuthClient.tryAuth(self, kind)

    def signData(self, publicKey, signData):
        log.debug("Ran signData with %s and %s" % (publicKey, signData))
        import pdb; pdb.set_trace()
        signed = userauth.SSHUserAuthClient.signData(self, publicKey, signData)

        return signed

    def auth_publickey(self):
        log.debug("Trying Auth Method: Public Key")
        return userauth.SSHUserAuthClient.auth_publickey(self)

class ClientConnection(connection.SSHConnection):
    def serviceStarted(self):
        log.debug("Service started")
        self.openChannel(TrueChannel(2**16, 2**15, self))
        self.openChannel(FalseChannel(2**16, 2**15, self))
        self.openChannel(CatChannel(2**16, 2**15, self))

class TrueChannel(channel.SSHChannel):
    name = 'session'

    def openFailed(self, reason):
        print 'true failed', reason

    def channelOpen(self, ignoredData):
        self.conn.sendRequest(self, 'exec', common.NS('true'))

    def request_exit_status(self, data):
        status = struct.unpack('>L', data)[0]
        print 'true status was: %s' % status
        self.loseConnection()

class FalseChannel(channel.SSHChannel):
    name = 'session'

    def openFailed(self, reason):
        print 'false failed', reason

    def channelOpen(self, ignoredData):
        self.conn.sendRequest(self, 'exec', common.NS('false'))

    def request_exit_status(self, data):
        status = struct.unpack('>L', data)[0]
        print 'false status was: %s' % status
        self.loseConnection()

class CatChannel(channel.SSHChannel):
    name = 'session'

    def openFailed(self, reason):
        print 'echo failed', reason

    def channelOpen(self, ignoredData):
        self.data = ''
        d = self.conn.sendRequest(self, 'exec', common.NS('cat'), wantReply = 1)
        d.addCallback(self._cbRequest)

    def _cbRequest(self, ignored):
        self.write('hello conch\n')
        self.conn.sendEOF(self)

    def dataReceived(self, data):
        self.data += data

    def closed(self):
        print 'got data from cat: %s' % repr(self.data)
        self.loseConnection()
        reactor.stop()

protocol.ClientCreator(reactor, ClientTransport).connectTCP(HOST, 2222)
reactor.run()
</client_code>

The issues:

1 - I had to encode the public key to ascii prior to using it. I don't
know why, but the struct was raising an exception telling that one of
the chars where out of the ascii range. But it doesn't look to have
any character outside the ascii range, AFAIK. Anyway, it worked when I
did the conversion to ascii.

2 - When I use: keys.Key.fromString(data=PRIVKEY) instead of the
deprecated keys.getPrivateKeyObject(data=PRIVKEY), I get this error
while trying to authenticate:

<error>
# This was caught directly from pdb prompt:
> connectSSH.py(77)signData()
-> signed = userauth.SSHUserAuthClient.signData(self, publicKey, signData)
(Pdb) n
> site-packages/twisted/conch/ssh/userauth.py:374: DeprecationWarning: signData is deprecated since Twisted Conch 0.9.  Use Key(obj).sign(data).
  return keys.signData(privateKey, signData)
> connectSSH.py(79)signData()
-> return signed
(Pdb) p signed
<Deferred at 0x12a1760  current result:
<twisted.python.failure.Failure <type 'exceptions.RuntimeError'>>>
(Pdb) p signed.result
<twisted.python.failure.Failure <type 'exceptions.RuntimeError'>>
(Pdb) p signed.result.getErrorMessage()
'unknown type of object: <RSA Private Key (1023 bits)\nattr
e:\n\t01:00:01\nattr
d:\n\t2b:63:16:01:25:43:90:6f:b8:44:c9:13:7e:ee:fb:\n\tc6:91:ff:0d:88:49:b4:0a:4c:49:67:b8:58:ca:9b:\n\t10:b4:9f:a2:1d:b1:7a:db:23:1e:95:77:05:58:dd:\n\t88:a1:2a:e3:77:b0:b9:86:ac:22:1f:e9:29:90:e9:\n\tdb:cd:6c:aa:a5:dd:83:d5:48:f5:95:bb:90:1d:34:\n\t16:13:b6:c0:0e:1e:98:22:15:8f:a0:87:32:5d:4a:\n\tf4:da:d4:f5:2a:72:e3:48:1a:ad:a6:27:0d:db:9d:\n\tef:d4:a7:2a:dc:65:29:01:00:2c:ec:02:a5:31:1c:\n\tae:31:8e:2c:14:db:8a:b5\nattr
n:\n\t00:f7:9f:8b:18:a9:b7:67:95:5c:af:cb:64:91:52:\n\t64:39:1c:98:36:34:31:f2:0b:49:b8:14:8c:a4:0f:\n\t28:17:5b:63:d3:71:21:d4:fc:96:a7:cb:de:43:e7:\n\t8a:80:12:45:2b:6b:42:87:93:de:0a:bf:21:a1:35:\n\t56:17:a8:f9:b3:3c:bb:b8:a2:79:6b:d1:8f:e0:43:\n\t31:2c:23:2d:79:8c:31:a3:31:65:42:5f:ff:3e:3d:\n\t02:71:31:83:9b:48:ab:3c:53:5a:3f:87:97:c3:35:\n\te2:90:b3:86:d9:6e:b9:be:df:97:93:fc:ab:f2:7a:\n\tba:9a:e9:a6:f9:3a:c2:04:9d\nattr
q:\n\t00:ff:16:43:f5:ce:1a:4e:49:a3:b2:07:7d:82:88:\n\t2d:77:5b:97:c5:7d:11:33:07:1c:d0:dc:c7:9d:d6:\n\t2d:4e:62:d1:5f:04:47:49:aa:ff:d9:ec:03:da:74:\n\td3:7c:c9:22:37:af:e5:00:7c:66:ad:4f:32:48:cd:\n\tb8:92:67:67:c7\nattr
p:\n\t00:f8:82:70:5a:9c:3a:77:c4:77:b7:bf:bc:52:04:\n\teb:a9:db:19:84:b4:5d:89:d3:b4:70:77:08:15:c9:\n\td4:fd:06:19:83:e8:b0:dc:5f:aa:4e:ec:ff:9a:78:\n\t29:7d:be:76:d7:8a:fc:cf:07:30:94:dc:ec:0b:8f:\n\t9f:c8:e3:98:7b\nattr
u:\n\t25:99:6d:60:e7:98:47:6c:4a:83:54:41:9f:1f:c9:\n\t01:03:a1:9f:f6:81:43:fe:47:6f:d6:a4:b8:a4:c2:\n\t64:80:e3:59:fb:71:43:8d:56:d8:48:60:e6:70:d2:\n\ta4:0f:3f:ff:cf:c8:fb:4c:57:17:18:4f:be:83:e5:\n\t00:02:10:af>'
</error>

This is the function that raised that exception:
http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.1.0/twisted/conch/ssh/keys.py#L387
It looks like the problem is that the class name doesn't start with
Crypto.PublicKey. Then, when I use the deprecated method, this is what
I have:

<not_an_error>
> connectSSH.py(77)signData()
-> signed = userauth.SSHUserAuthClient.signData(self, publicKey, signData)
(Pdb) n
tests/connectSSH.py:48: DeprecationWarning: getPrivateKeyObject is
deprecated since Twisted Conch 0.9.  Use Key.fromString().
  return defer.succeed(keys.getPrivateKeyObject(data=PRIVKEY))
site-packages/twisted/conch/ssh/userauth.py:374: DeprecationWarning:
signData is deprecated since Twisted Conch 0.9.  Use
Key(obj).sign(data).
  return keys.signData(privateKey, signData)
> connectSSH.py(79)signData()
-> return signed
(Pdb) p signed
<Deferred at 0x12a1760  current result:
'\x00\x00\x00\x07ssh-rsa\x00\x00\x00\x80\xa9w-\x0c\x9e\xc3\xe8\xd0\xff\xb8\xf0\xbbi*\xecJ\x8e5\xac\x0e(@\x18\x81\x11\xf4\xff\xda\xde\xd6\x9b\xbe\xef\\\xc2\xd0F8Q\x15\xd0A\xa1!$\xe2\xe5\xa0\xf8\x12O\xa0*4\xe1)\xc2:\xbf\x16\x0b\x8a\xd2J\xa8D\x01\xdd\x10\xe3\xeb\x8b*9,\xf3#b\xff\xbf\xc9\xe9\xdc\x81\xa4B\x88$\r\x8b\xef|y\x80\r\x08\x8a*\x08x:\x0c{\xcf\x97\xb7"\xe19\x1f\xa2_wV4\xfa\x19"Vf\xcf\x80\xa7i\x98\xfa\xefM'>
</not_an_error>

After moving to the deprecated method, everything seems to work ok
with the client, but then I started to have a similar problem at the
server side, while verifying client's signature. Here is the relevant
part of the server code, which is the method requestAvatarId of the
Credential Checker I implemented:

<server_code>
# This code is based in an example that I caught from twisted website
class PublicKeyChecker():
    implements(checkers.ICredentialsChecker)
    credentialInterfaces = (credentials.ISSHPrivateKey, )

    def requestAvatarId(self, credentials):
        # I removed here the code that verified if the user is
registered in our database, to easy for you guys to understand the
relevant part of the code. Just consider that the variable user
contains the found user object.

        user_key = user.key.public_key
        if not credentials.blob == user_key:
            raise failure.Failure(error.ConchError("Wrong key."))
        if not credentials.signature:
            return failure.Failure(error.ValidPublicKey())

        pub_key = Key.fromString(data=credentials.blob)
        # Issue 3
        if verifySignature(pub_key,
                           credentials.signature,
                           credentials.sigData):
            return credentials.username
        else:
            return failure.Failure(error.ConchError("Incorrect Signature."))
    else:
        return failure.Failure(error.ConchError("Authentication Failed."))
</server_code>

3 - Then, while I get to the verifySignature method, I get the following error:

<error>
RuntimeError: unknown type of object: <RSA Public Key (1023 bits)
attr e:
	01:00:01
attr n:
	00:f7:9f:8b:18:a9:b7:67:95:5c:af:cb:64:91:52:
	64:39:1c:98:36:34:31:f2:0b:49:b8:14:8c:a4:0f:
	28:17:5b:63:d3:71:21:d4:fc:96:a7:cb:de:43:e7:
	8a:80:12:45:2b:6b:42:87:93:de:0a:bf:21:a1:35:
	56:17:a8:f9:b3:3c:bb:b8:a2:79:6b:d1:8f:e0:43:
	31:2c:23:2d:79:8c:31:a3:31:65:42:5f:ff:3e:3d:...
</error>

Which is the same exception raised by the key.type() function that
have put us at the same trouble in the client. Then, at the debuger, I
found that the correct key (which is a class with name starting with
Crypto.PublicKey) is right inside this "unknown" object, which is a
RSA Public Key in object.keyObject.keyObject! I ran the WingIDE
debugger and simply saw that, as you can see in this screenshot:
http://www.imageno.com/z99azx3v7qnzpic.html

Ok, I also get the deprecated warning while using the verifySignature
method instead of Key(obj).verify(sig, data), then I decided to test
it also just to don't make you guys wast your time with me for
nothing. I called pub_key.verify(credentials.signature,
credentials.sigData) instead of that verifySignature call, and it
returned False instead leading to a failure in authentication.

Both apps (client and server) are running inside the same machine,
consulting the same database, the same keys and user, so there it is
not reasonable to be failing if my code is correct. Maybe I missed
something. Can you guys help me?

Sorry about the very long email, but I tried to be as much verbose as
I could in order to help you guys help me.


Kind Regards,

-- 
Adriano Monteiro Marques

http://adriano-marques.blogspot.com
http://umit.sourceforge.net
py.adriano at gmail.com

"Don't stay in bed, unless you can make money in bed." - George Burns



From nathan.stocks at gmail.com  Mon Jul 28 09:50:31 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Mon, 28 Jul 2008 09:50:31 -0600
Subject: [Twisted-Python] C or Objective-C AMP?
In-Reply-To: <d06a5cd30807271919i10c5e3c7t74f32faa8ff4e534@mail.gmail.com>
References: <96c9d6a80807262142h38e82264s949fed192f8d4c9a@mail.gmail.com>
	<d06a5cd30807271919i10c5e3c7t74f32faa8ff4e534@mail.gmail.com>
Message-ID: <96c9d6a80807280850v58b56a5ic3d64899bcb534b1@mail.gmail.com>

On Sun, Jul 27, 2008 at 8:19 PM, Jonathan Lange <jml at mumak.net> wrote:
> On Sun, Jul 27, 2008 at 4:42 PM, Nathan <nathan.stocks at gmail.com> wrote:
>> 1) Does anyone know if AMP has been implemented in either C or Objective-C yet?
>>
>
> I don't think so. I've wanted to do a C one, but only as a personal exercise.

Doesn't sound like anyone else has, either, so I'll have to add it to
my "will try to do" list.  But if I have to make it myself, I'm going
to go ahead and do it in Obj-C, since it's for a Cocoa app and
anything I try to do in plain C is liable to core dump.

>> 2) Is there a better way for me to find that out than asking on this
>> list?  (Is there somewhere I should be looking first?)
>
> This is a pretty good way. You could also look at the Twisted
> Community page at https://launchpad.net/tx.

That's cool--I didn't know about that site!

~ Nathan



From dreid at dreid.org  Mon Jul 28 16:28:21 2008
From: dreid at dreid.org (David Reid)
Date: Mon, 28 Jul 2008 15:28:21 -0700
Subject: [Twisted-Python] C or Objective-C AMP?
In-Reply-To: <96c9d6a80807280850v58b56a5ic3d64899bcb534b1@mail.gmail.com>
References: <96c9d6a80807262142h38e82264s949fed192f8d4c9a@mail.gmail.com>
	<d06a5cd30807271919i10c5e3c7t74f32faa8ff4e534@mail.gmail.com>
	<96c9d6a80807280850v58b56a5ic3d64899bcb534b1@mail.gmail.com>
Message-ID: <4BC0C300-A49D-4311-8121-09B6372BCAD5@dreid.org>


On Jul 28, 2008, at 8:50 AM, Nathan wrote:

> On Sun, Jul 27, 2008 at 8:19 PM, Jonathan Lange <jml at mumak.net> wrote:
>> On Sun, Jul 27, 2008 at 4:42 PM, Nathan <nathan.stocks at gmail.com>  
>> wrote:
>>> 1) Does anyone know if AMP has been implemented in either C or  
>>> Objective-C yet?
>>>
>>
>> I don't think so. I've wanted to do a C one, but only as a personal  
>> exercise.
>
> Doesn't sound like anyone else has, either, so I'll have to add it to
> my "will try to do" list.  But if I have to make it myself, I'm going
> to go ahead and do it in Obj-C, since it's for a Cocoa app and
> anything I try to do in plain C is liable to core dump.

A good course of action would be a plain C protocol encoder/decoder  
library with an ObjC wrapper for doing the networking portions.

-David




From andrew-twisted at puzzling.org  Mon Jul 28 18:00:51 2008
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 29 Jul 2008 10:00:51 +1000
Subject: [Twisted-Python] Re: Possible bug on twisted.conch.ssh.keys?
In-Reply-To: <29ec21540807280804u208645eeq43c0a714eb7207e@mail.gmail.com>
References: <29ec21540807280629y7852498blac2119ac986c43f2@mail.gmail.com>
	<29ec21540807280804u208645eeq43c0a714eb7207e@mail.gmail.com>
Message-ID: <20080729000051.GF17343@steerpike.home.puzzling.org>

Adriano Marques wrote:
[...]
> <debug>
> >>> print m2[0] == M
> False
> >>> print m2[0]
> 5486124068793688683255936251187209270074392635932332070112001988456197381759672947165175699536362793613284725337872111744958183862744647903224103718245670299614498700710006264535590197791934024641512541262359795191593456970905950167587431434979106624455856690274067852326335446193014962274187407641892263
> >>> print M
> 5486124068793688683255936251187209270074392635932332070112001988456197381759672947165175699536362793613284725337872111744958183862744647903224103718245670299614498700710006264535590197791934024641512541262359795191593456970905950167587431434979106624455857062955565129940502062033292313613058888050118445
> >>> print type(m2[0]), type(M)
> <type 'long'> <type 'long'>
> </debug>
> 
> So, m2[0] is really different from M, but why if I'm using the same
> keys from the same place?
> 
> Hope this helps to clear the issue.

Suspiciously, they only differ in the last 50 or so decimal digits.  That
suggests a bug in the way they are being read, maybe?

As to your problems using un-deprecated APIs, a wild guess is that maybe your
PyCrypto version is too old?

-Andrew.




From py.adriano at gmail.com  Tue Jul 29 03:30:36 2008
From: py.adriano at gmail.com (Adriano Marques)
Date: Tue, 29 Jul 2008 06:30:36 -0300
Subject: [Twisted-Python] Re: Possible bug on twisted.conch.ssh.keys?
In-Reply-To: <20080729000051.GF17343@steerpike.home.puzzling.org>
References: <29ec21540807280629y7852498blac2119ac986c43f2@mail.gmail.com>
	<29ec21540807280804u208645eeq43c0a714eb7207e@mail.gmail.com>
	<20080729000051.GF17343@steerpike.home.puzzling.org>
Message-ID: <29ec21540807290230l1eb6c8ffvb7496dd60ef10cde@mail.gmail.com>

Hi Andrew,

On Mon, Jul 28, 2008 at 9:00 PM, Andrew Bennetts
<andrew-twisted at puzzling.org> wrote:
> Adriano Marques wrote:
> [...]
>> <debug>
>> >>> print m2[0] == M
>> False
>> >>> print m2[0]
>> 5486124068793688683255936251187209270074392635932332070112001988456197381759672947165175699536362793613284725337872111744958183862744647903224103718245670299614498700710006264535590197791934024641512541262359795191593456970905950167587431434979106624455856690274067852326335446193014962274187407641892263
>> >>> print M
>> 5486124068793688683255936251187209270074392635932332070112001988456197381759672947165175699536362793613284725337872111744958183862744647903224103718245670299614498700710006264535590197791934024641512541262359795191593456970905950167587431434979106624455857062955565129940502062033292313613058888050118445
>> >>> print type(m2[0]), type(M)
>> <type 'long'> <type 'long'>
>> </debug>
>
> Suspiciously, they only differ in the last 50 or so decimal digits.  That
> suggests a bug in the way they are being read, maybe?

Thanks for your response! Yes, I thought it was very strange that they
only differed in the last digits. It took me a while to figure that
out, mainly because in the debuger I couldn't see that last digits
properly.

Well, maybe the way I'm storing the keys? Is this the correct format?

<keys>
PUBKEY = "ssh-rsa
AAAAB3NzaC1yc2EAAAADAQABAAAAgQD3n4sYqbdnlVyvy2SRUmQ5HJg2NDHyC0m4FIykDygXW2PTcSHU/Jany95D54qAEkUra0KHk94KvyGhNVYXqPmzPLu4onlr0Y/gQzEsIy15jDGjMWVCX/8+PQJxMYObSKs8U1o/h5fDNeKQs4bZbrm+35eT/Kvyerqa6ab5OsIEnQ=="

PRIVKEY = """-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQD3n4sYqbdnlVyvy2SRUmQ5HJg2NDHyC0m4FIykDygXW2PTcSHU
/Jany95D54qAEkUra0KHk94KvyGhNVYXqPmzPLu4onlr0Y/gQzEsIy15jDGjMWVC
X/8+PQJxMYObSKs8U1o/h5fDNeKQs4bZbrm+35eT/Kvyerqa6ab5OsIEnQIDAQAB
AoGAK2MWASVDkG+4RMkTfu77xpH/DYhJtApMSWe4WMqbELSfoh2xetsjHpV3BVjd
iKEq43ewuYasIh/pKZDp281sqqXdg9VI9ZW7kB00FhO2wA4emCIVj6CHMl1K9NrU
9Spy40garaYnDdud79SnKtxlKQEALOwCpTEcrjGOLBTbirUCQQD/FkP1zhpOSaOy
B32CiC13W5fFfREzBxzQ3Med1i1OYtFfBEdJqv/Z7APadNN8ySI3r+UAfGatTzJI
zbiSZ2fHAkEA+IJwWpw6d8R3t7+8UgTrqdsZhLRdidO0cHcIFcnU/QYZg+iw3F+q
Tuz/mngpfb5214r8zwcwlNzsC4+fyOOYewJBAMPstRw6Rog1FW8rQ6Kbt9hCWItO
aYR5BRADU6sOk1PuoIPLhHm3xrX6CmejbcEdt5NwHYNHCZI6DxRONmL024cCQBky
eJvnXVJJfG4IJdsXHqIBUiwPcbCI47HHj+1NoqfpF2s1i8E8ffM0upH5/xL93eTq
9ck0DGv7nn9pl6Tx1sMCQCWZbWDnmEdsSoNUQZ8fyQEDoZ/2gUP+R2/WpLikwmSA
41n7cUONVthIYOZw0qQPP//PyPtMVxcYT76D5QACEK8=
-----END RSA PRIVATE KEY-----"""
</keys>

I was researching the matter, and then I saw in the Twisted book that
I should use base64.decode in order to compare the key with the
credential.blob, but when I do that the key doesn't look the same when
compared to the blob and the authentication fails. So, maybe I may be
sending the key the wrong way, but I don't have a clue of what is the
right way.

> As to your problems using un-deprecated APIs, a wild guess is that maybe your
> PyCrypto version is too old?

I think it is not the case. I have the latest one:
>>> Crypto.__version__
'2.0.1'

I'm running on a Mac OS X Leopard, if that may help you to help me ;-)
Thanks for the help!


Kind Regards,

-- 
Adriano Monteiro Marques

http://adriano-marques.blogspot.com
http://umit.sourceforge.net
py.adriano at gmail.com

"Don't stay in bed, unless you can make money in bed." - George Burns



From proppy at aminche.com  Tue Jul 29 07:48:41 2008
From: proppy at aminche.com (Johan Euphrosine)
Date: Tue, 29 Jul 2008 15:48:41 +0200
Subject: [Twisted-Python] Please recommend a RPC system working with
	twisted.
In-Reply-To: <20080721131800.GA11544@vidar.dreamhost.com>
References: <befee6d80807210001t3c85f755xfc76f5fafae9a13@mail.gmail.com>
	<20080721131800.GA11544@vidar.dreamhost.com>
Message-ID: <730b2b9d0807290648r352b3ef7kda397d134365d85f@mail.gmail.com>

On Mon, Jul 21, 2008 at 3:18 PM, David Ripton <dripton at ripton.net> wrote:
>
> Twisted AMP meets all your requirements except C support, which you
> could probably add.  (Or maybe avoid adding by using some other way
> to bridge C computing code with Python network code, like ctypes.)
>
> Also take a look at Google's Protocol Buffers, which lacks C support but
> has C++ support.  A Twisted version called txprotobuf was recently
> announced.  (Note that Protocol Buffers isn't really a full RPC system,
> just the serialization part.)
>
> I think combining these two might work nicely, though I haven't tried it
> yet.
>

Hi, I recently added a C++ RPC implementation using boost.asio, in
txprotobuf-asio branches.

You can check it out there:
http://bazaar.launchpad.net/~proppy/txprotobuf/asio/files
bzr branch lp:~proppy/txprotobuf/asio

Hope that helps.
-- 
bou ^



From paulswartz at gmail.com  Thu Jul 31 09:19:53 2008
From: paulswartz at gmail.com (Paul Swartz)
Date: Thu, 31 Jul 2008 11:19:53 -0400
Subject: [Twisted-Python] Modifying Conch example
In-Reply-To: <20080723100055.GA24868@cs.york.ac.uk>
References: <51a7308f0807230139j6c3f333emc538012b4dee43f7@mail.gmail.com>
	<20080723100055.GA24868@cs.york.ac.uk>
Message-ID: <324cfb540807310819k4a0eb792w6960be9031dcb7b6@mail.gmail.com>

On Wed, Jul 23, 2008 at 6:00 AM, Jack Whitham <jack-tp at cs.york.ac.uk> wrote:
> On Wed, Jul 23, 2008 at 01:39:19AM -0700, Pump Kin wrote:
>> Step 1) Is really bugging me here; I can't seem to strip the need for
>> foreknowledge of the public key from the script. I can't easily
>> programmatically access that information in my use case. I do however have
>> ready access to the private key and fingerprint for verification. My
>> modified tutorial scripts just vomit.
>
> I had the same problem. Some new key management features have been
> added to Conch recently, so you now only need the private key:
>
> class ClientUserAuth(userauth.SSHUserAuthClient):
>    def getPrivateKey(self):
>        return defer.succeed(self.__getKey().keyObject)
>
> (Although I still get a deprecation warning about signData if
> I do this..)

You're getting the deprecation warning because you're not calling back
the Deferred with a Key object; you're calling it back with a PyCrypto
key object (that's what .keyObject is)

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.jot.com/
AIM: z3penguin



From py.adriano at gmail.com  Thu Jul 31 18:10:24 2008
From: py.adriano at gmail.com (Adriano Marques)
Date: Thu, 31 Jul 2008 21:10:24 -0300
Subject: [Twisted-Python] Minor bug in FTPFactory
Message-ID: <29ec21540807311710k49b43512g20b2fe12927f3586@mail.gmail.com>

Hi folks,

I found a bug at FTPFactory class. Here is the link to the code:
http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.1.0/twisted/protocols/ftp.py#L1247

The argument userAnonymous is useless as the instance variable is not
being set by the value received by this argument during object
construction.
I don't know if here is the place for such discussion. Is there
another better place for that? Also, am I supposed to send a patch
fixing that here? I don't know if this mailing list accept
attachments.


Kind Regards,

-- 
Adriano Monteiro Marques

http://adriano-marques.blogspot.com
http://umit.sourceforge.net
py.adriano at gmail.com

"Don't stay in bed, unless you can make money in bed." - George Burns



