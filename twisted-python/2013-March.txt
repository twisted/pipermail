From glyph at twistedmatrix.com  Fri Mar  1 03:29:56 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 1 Mar 2013 00:29:56 -0800
Subject: [Twisted-Python] Let's talk about maintaining Lore (and validity of
	tickets)
Message-ID: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>

Jean-Paul recently closed a Lore ticket as invalid, and suggested we have a discussion about Lore's future direction.  This strikes me as a very good idea, and so I wrote a message which is a bit too long (for which I apologize) to kick that off.

The discussion began here: <http://twistedmatrix.com/trac/ticket/6313#comment:7>.  In said suggestion, JP said:

> I am rejecting this Lore feature as unnecessary for Twisted's current documentation needs.

With regard to this specific point: the bug was discovered when building the documentation for the systemd-howto-5601 branch: <https://buildbot.twistedmatrix.com/builders/documentation/builds/2919/>.  Presumably a better error would have facilitated development.  So, while better error reporting of this error case may not be "necessary" I think it clearly would have been beneficial in this case and would perhaps be beneficial in similar cases in the future.  Is necessity or benefit the standard which keeps a ticket open in our tracker?  Do we have a documented standard for how necessary (or beneficial) a ticket must be anywhere?

> However if there is genuine interest in enhancing Lore (specifically: obsoleting the lore2sphinx conversion tool), then I'm open to reconsidering that.


I don't think these two paths (lore2sphinx and continuing to maintain lore) are necessarily mutually exclusive.  Also I think it implies something about the current state of affairs that isn't accurate - e.g. that the Twisted team has agreed that Sphinx will surely replace Lore and that we are making progress on that process of placement more than we are maintaining Lore itself.

Unfortunately, I think it will be clear to anyone following its progress that lore2sphinx is unmaintained and the sphinx migration effort is stalled.  Nobody has committed to <https://bitbucket.org/khorn/lore2sphinx> in a year and a half, about the same amount of time that <http://twistedmatrix.com/trac/browser/branches/sphinx-conversion-4500> has been idle as well.  By contrast, <http://twistedmatrix.com/trac/browser/trunk/twisted/lore> has seen commits - albeit not many - within only a couple of weeks.  So, empirically, we're already maintaining lore and lore2sphinx is currently "obsolete"; really the question should be if we want to reverse that path.

I also have no objection if someone wants to complete the lore2sphinx work, but if the lore2sphinx buildbot were to die tomorrow and go offline, I wouldn't be particularly anxious to spend a lot of resources to fix it.

My position on this was always that if someone wanted to improve the documentation, they were welcome to do so, and if they wanted to use Sphinx to do it, that's great too.  I just wasn't willing to tolerate any period where our toolchain was broken and we couldn't generate documentation for a release.  And a good thing we didn't, by the way!  If we had said "go ahead, pull the trigger, whatever, it's OK to break trunk for a little while!" we wouldn't have had any documentation toolchain for the last 2 years.

(I hope that everyone takes this to heart the next time someone wants to break our development process "for a little while, just during the migration" to move to Github, or Jenkins, or Travis-CI or whatever.)

> Basically, this ticket is a demonstration of "stumble around in the dark" development in action. We don't need more of that (and I know I'm as guilty as anyone else). If someone wants to turn on a light, great. Otherwise, everyone out of the basement and find something more valuable on which to spend your time.

I don't think that this metaphor is particularly... illuminating.  While I can sort of guess what you're talking about, it's all pretty implicit and seems to make several assumptions I am not sure that I agree with.

What's wrong with stumbling around in the dark?  If we had a hierarchically-managed product-driven organization, then having focus and a clearly communicated, consistently enforced shared goal would be important to effectively produce that product, but community projects don't seem to work that way.  Consensus is important, but even given a consensus, pool of resources for development that we can allocate via executive decision is fairly small, and is just about sufficient to pay for code reviews of the contributions that we receive and to take care of administrivia, not to do substantial new development.  We have to rely on volunteer contributions for that.

I'm also sure our tools have a million boring little niggling bugs that need to be discovered and addressed so that the average experience of using and working on Twisted is as pleasant as possible, and we don't want to discourage people from reporting them; that's also a useful volunteer function.

Does it harm any members of the Twisted development team to have other members of said team (by the way hi rwall congrats on your commit access) to file these sorts of legitimate, but trivial bugs in uninteresting bits of support code in Twisted, like lore or our release-management tools?

To play my own debate opponent here: perhaps it does.  The bug tracker is a resource, new bugs consume attention of core developers as we each probably pay attention to see if users are reporting serious problems we should fix.  Collectively, that attention is arguably our most precious resource and we should be careful not to waste it.  So we don't want the shared resource of the issue tracker to suffer from a tragedy of the commons and get filled up with junk bugs so we can't find the good ones.  Closing tickets as invalid to draw a line around what we're trying to get accomplished and to prevent future attention from being wasted.

But, attention is worthless without enthusiasm and skill, and having one's tickets closed as invalid does potentially sap one's enthusiasm and thereby one's motivation to acquire further skills.  So more determinedly closing things as invalid may be robbing Peter to pay Paul.

Also, in this case, I would question the classification of "invalid"; I like to use the "invalid" on bugs which are clearly not actionable.  #6313 describes a clear problem (a traceback), and after clarification, a clear course of action (improve the error message).  If we don't believe the problem should be fixed, then we should say "wontfix".  I think this distinction is important because actually invalid (too vague as to be actionable in any way) bugs are in fact a waste of time, and provoke a good deal of pointless discussion before they die.  Wontfix bugs are more of a good-faith mistake on the part of the reporter :-).

With tickets such as this one, I think that what we (members of the Inner Circle, I guess, we should have secret handshake or something) ought to be doing is:

setting the priority to 'lowest' (while this has very little real practical or process-enforced consequence, it should at least help others not get distracted by it in the future if they're looking for something to do)
directing the bug reporter to a more useful ticket by linking to something that we wish someone would work on
Once there's a positive pointer towards something more useful, explaining that (maintaining lore/changing the background color of the website/changing the order that we send response headers in HTTP) is peripheral to Twisted's mission of providing awesome internet APIs to programmers everywhere, but that we'd still be happy to receive a patch that addressed the issue with our code, provided that it adheres with all the relevant testing, coding standard, and compatibility requirements and doesn't waste a reviewer's time

It's challenging to put useful comments on tickets, especially apparently pointless or ill-defined tickets.  It's also just tiring: a lot of the comments one needs to make are incredibly repetitive and redundant.  But, since I believe it's clear that few, if any people actually get their priorities of what to do for Twisted by scanning the bugtracker for recently-filed open issues, I posit that there's not a lot of value in ticket triage that doesn't make its primary goal the repeated communication of documented project policy, existing consensus, and constant positive suggestions as to what contributors should take as a next step.

In this particular case, that means that "everybody out of the basement" is a vague, confusing, and unhelpful comment that just makes feels mildly insulting to the other people participating in the discussion on the bug.  "I would prefer it if you would work on a high-priority ticket like ticket 84 instead of this one, since I believe the Twisted team has a general consensus that lore will be obsoleted and no-one wants to be responsible for it; see ticket 4500 for more details on one effort to do that.".

More generally, I think that when one of us is tempted to shut down a bug like this, a better thing to do would be to write a wiki page or a blog post that can be refined by discussion, and can be an artifact that can be the point of reference for some rough consensus (like, e.g. <http://twistedmatrix.com/trac/wiki/CompatibilityPolicy>) updated by subsequent discussions, and then link to that discussion.

This does all sort of raise the question of "why do we bother to keep a database of tickets around, anyway", and how we should address the warehousing of a potentially increasing number of hypothetically valid bugs that we just don't care enough about to fix.  I haven't really addressed those questions very well here, so I do hope to hear more from all of you about that issue.

So, rwall, hopefully now you'll go close #84 instead of either updating 6313 or responding to this message :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130301/a43b93ca/attachment.htm 

From glyph at twistedmatrix.com  Fri Mar  1 04:45:17 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 1 Mar 2013 01:45:17 -0800
Subject: [Twisted-Python] Need help regarding Gsoc 2013
In-Reply-To: <CANj+b3OTummTY4S+amyPowa=kO8pBiAhJwt8YHcGVJZkYb7y_g@mail.gmail.com>
References: <CANj+b3OTummTY4S+amyPowa=kO8pBiAhJwt8YHcGVJZkYb7y_g@mail.gmail.com>
Message-ID: <E31985F7-AB83-4C32-B149-8378AB4F1172@twistedmatrix.com>


On Feb 28, 2013, at 6:19 PM, Saurabh Mahindre <saurabh.mahindre at gmail.com> wrote:

> I am an undergraduate student and plan to try for a project with twisted.....I went through the gsoc wiki page for twisted and I have picked up some ideas
> I need some help as to how I can follow up on them or get new ones?

Do you mean you're just looking to try out a project, or that you'd like to be involved in the next GSoC, or both?

> I will be thankful for any help or criticism as i am new to this process.

Well, why don't you get started just by telling us what sort of things you're interested in, and why you would like to try working on Twisted, and we can go from there?

-glyph



From _ at lvh.cc  Fri Mar  1 09:31:43 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Fri, 1 Mar 2013 15:31:43 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
Message-ID: <CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>

Well, you'd presumably have a connection to each of the servers in the form
of a client factory and a protocol instance. Then, every time you get a
message, you figure out which protocol instance you want (the one for the
appropriate server) and send a message to it. You could do that with
self.transport.write, of course, but it would be much easier to just use a
ready-made RPC thing.

One such RPC thing is AMP, which comes with Twisted. You can read more
about it here:

http://amp-protocol.net/
https://twistedmatrix.com/documents/current/core/howto/amp.html

You will probably end up having a command like HandlePacket or something
(presumably you can come up with a more apt domain-specific name), and
something close to
self.servers[serverFor(packet.origin)].callRemote(HandlePacket,
packet.data), or whatever.

I realize this is still pretty vague and high level, so feel free to ask
more questions about the parts that are unclear :)


On Thu, Feb 28, 2013 at 10:59 PM, Benjamin BERTRAND <beenje at gmail.com>wrote:

> Hi,
>
> I have to replace a piece of software that sniffs the traffic on one
> interface. It gets different messages that are each associated to a
> specific emitter.
> On the same machine, one server is started for each emitter (on a
> different port).
> And the application is just supposed to use the proper server to send the
> messages captured (to a client on another machine).
>
> Not sure if it's clear, but basically if I have 2 emitters A and B, I'll
> start 2 servers (a and b).
> My sniffer will get messages A1, A2, B1, B2, B3...
> I have to pass messages A1, A2 to server a, that will just send them to
> the client (if it is connected of course).
> And B1, B2, B3 to server b.
> I don't need any buffering. If no client is connected, messages captured
> are just discarded.
>
> To sniff the network, I want to use pylibpcap or pcapy.
> I found this example to make it work with twisted:
> http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
>
> Starting several servers that use the same protocol is not a problem.
> But how do I pass the messages captured to the right server?
> How do I make the link between the function sniffing the network and the
> servers?
>
> Thanks
>
> Benjamin
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130301/8867f1fa/attachment.htm 

From saurabh.mahindre at gmail.com  Fri Mar  1 10:04:10 2013
From: saurabh.mahindre at gmail.com (Saurabh Mahindre)
Date: Fri, 1 Mar 2013 20:34:10 +0530
Subject: [Twisted-Python] Need help regarding Gsoc 2013
Message-ID: <CANj+b3Mr5zedWRbuJSJf8Nr1sgke=2biuTV80bsbkoTRnK=kLw@mail.gmail.com>

Yes, I would like to be involved in next gsoc.
Twisted interests me as whole and how it eases networking whenever I worked
with it.
Integration with GUI loops was also very great.Having seen Twisted in
action , how it works at lower level will be great thing to know more about.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130301/ed4b4159/attachment.htm 

From kevin.horn at gmail.com  Fri Mar  1 12:44:26 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 1 Mar 2013 11:44:26 -0600
Subject: [Twisted-Python] Let's talk about maintaining Lore (and
 validity of tickets)
In-Reply-To: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
Message-ID: <CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>

On Fri, Mar 1, 2013 at 2:29 AM, Glyph <glyph at twistedmatrix.com> wrote:

> Jean-Paul recently closed a Lore ticket as invalid, and suggested we have
> a discussion about Lore's future direction.  This strikes me as a very good
> idea, and so I wrote a message which is a bit too long (for which I
> apologize) to kick that off.
>
> I don't think these two paths (lore2sphinx and continuing to maintain
> lore) are necessarily mutually exclusive.  Also I think it implies
> something about the current state of affairs that isn't accurate - e.g.
> that the Twisted team has agreed that Sphinx will surely replace Lore and
> that we are making progress on that process of placement more than we are
> maintaining Lore itself.
>
> Unfortunately, I think it will be clear to anyone following its progress
> that lore2sphinx is unmaintained and the sphinx migration effort is
> stalled.  Nobody has committed to <https://bitbucket.org/khorn/lore2sphinx>
> in a year and a half, about the same amount of time that <
> http://twistedmatrix.com/trac/browser/branches/sphinx-conversion-4500>
> has been idle as well.  By contrast, <
> http://twistedmatrix.com/trac/browser/trunk/twisted/lore> has seen
> commits - albeit not many - within only a couple of weeks.  So,
> empirically, we're already maintaining lore and lore2sphinx is currently
> "obsolete"; really the question should be if we want to reverse that path.
>
>
Some what orthagonal to your point, but this is incorrect.  lore2sphinx was
some time ago into "lore2sphinx-ng" and "rstgen".

https://bitbucket.org/khorn/lore2sphinx-ng
https://bitbucket.org/khorn/rstgen

This was initially done as an experiment in using a more explicit
"formatting model" for the generation for the Sphinx docs (and somewhat due
to _your_ prodding, Glyph), and so I didn't initially make a big
announcement or anything.

Once it became apparent that it was actually going to work out better, I
sent out some emails to those who had expressed interest in helping with
the whole lore2sphinx project, though I don't believe I sent out anything
to the twisted list in general, as I probably should have.  I'll point out
that I can count people who have shown interest in moving this forward on
one hand, though.

And I've specifically mentioned that I had done said forking to you, Glyph,
in IRC  ;)
(though it's IRC after all...who remembers what happens in IRC?)

I thought I had put a notice up in the readme file in the lore2sphinx repo,
but as it isn't there, I presume I either forgot, or never got it merged,
or something.

So, totally my bad for not communicating better, but I have NOT given up on
converting things from Lore into Sphinx.
(Nor do I intend to.)

Thinking about it, I suppose I've been somewhat reticent to do much
communicating about any work I do on this, as what seems to happen is that
it just gives everyone an excuse bring up some new objection to actually
getting the conversion done.  I hadn't really realized
this consciously until just now, though.

I also have no objection if someone wants to complete the lore2sphinx work,
> but if the lore2sphinx buildbot were to die tomorrow and go offline, I
> wouldn't be particularly anxious to spend a lot of resources to fix it.
>
> My position on this was always that if someone wanted to improve the
> documentation, they were welcome to do so, and if they wanted to use Sphinx
> to do it, that's great too.  I just wasn't willing to tolerate any period
> where our toolchain was broken and we couldn't generate documentation for a
> release.  And a good thing we didn't, by the way!  If we had said "go
> ahead, pull the trigger, whatever, it's OK to break trunk for a little
> while!" we wouldn't have had any documentation toolchain for the last 2
> years.
>
>
And since we didn't break the toolchain, I've been in no particular hurry.
 I've accepted that this will take approximately a billion years.  So no
rush.

On the other hand, I have at several points been willing to make the
"cutover", and for various different reasons, been told it wasn't happening
until things were closer to "perfect" (for some value of "perfect") than
they were at the time.

The current output of the old lore2sphinx branch is functional, though has
a few warts (mostly extraneous spaces in the output).  These warts were
apparently enough to block adoption.

It has been a pretty discouraging effort at times, I have to say, as I seem
to garner agreement/support/buy-in/whatever for a particular course of
action (e.g. getting 99% of the way there, and then fixing Sphinx markup
manually, which was the original plan, way back when), and focusing my
efforts in that direction.  Then when we're ready to proceed on that basis,
had another task/challenge/set of requirements/whatever added to the work
that needs to be done.  In fact I still think that if the Twisted community
had actually wanted to, we could have switched over to Sphinx at the first
PyCon Atlanta (2010?).

Anyway, I'm not giving up.  If nothing else, I'll end up with a nice
restructuredText-generating library.  And if Twisted never ends up adopting
Sphinx as a doc tool, eventually I'll still be able to read the Twisted
docs in a format that I can navigate and doesn't hurt my eyes to look at. :)

But I'd really rather see Twisted adopt Sphinx, and get rid of Lore.

Help accepted.

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130301/01391c1b/attachment.htm 

From kevin.horn at gmail.com  Fri Mar  1 12:46:22 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 1 Mar 2013 11:46:22 -0600
Subject: [Twisted-Python] Let's talk about maintaining Lore (and
 validity of tickets)
In-Reply-To: <CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
Message-ID: <CA+U=zK2Fy-ZHGa0MKMkCBYywEueKt40ge80-dCUVQ2qDkd9fFg@mail.gmail.com>

On Fri, Mar 1, 2013 at 11:44 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

Arg.  Why do you always notice the errors _right_ after you send the mail?


> Some what orthagonal to your point, but this is incorrect.  lore2sphinx
> was SPLIT some time ago into "lore2sphinx-ng" and "rstgen".
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130301/a976f866/attachment.htm 

From glyph at twistedmatrix.com  Fri Mar  1 13:51:40 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 1 Mar 2013 10:51:40 -0800
Subject: [Twisted-Python] Need help regarding Gsoc 2013
In-Reply-To: <CANj+b3Mr5zedWRbuJSJf8Nr1sgke=2biuTV80bsbkoTRnK=kLw@mail.gmail.com>
References: <CANj+b3Mr5zedWRbuJSJf8Nr1sgke=2biuTV80bsbkoTRnK=kLw@mail.gmail.com>
Message-ID: <EEFCAC21-DBF0-4E52-AAF7-7F557CEF23F0@twistedmatrix.com>


On Mar 1, 2013, at 7:04 AM, Saurabh Mahindre <saurabh.mahindre at gmail.com> wrote:

> Yes, I would like to be involved in next gsoc.

OK.  I don't think we have any plans for that yet.  Perhaps we should start making them.

> Twisted interests me as whole and how it eases networking whenever I worked with it.

Always nice to hear :).

> Integration with GUI loops was also very great.Having seen Twisted in action , how it works at lower level will be great thing to know more about.

Really glad to hear you're interested in this.  It's a highly useful dimension of Twisted's functionality which is not as popular as it should be.

If you're interested in both of these, we used to have a reactor implementation that would display some of the inner workings of the reactor itself in a GUI.  This only ever worked, poorly, on one platform (GTK), and I believe it's probably pretty badly broken right now.  Would you be interested in implementing this with multiple toolkits (GTK, whatever the best thing is for Windows, and Cocoa, perhaps)?

Just a thought - the first project that popped into my head.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130301/dcbf1e8b/attachment.htm 

From beenje at gmail.com  Fri Mar  1 16:52:56 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Fri, 1 Mar 2013 22:52:56 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
Message-ID: <950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>

Thanks for the answer!

I was hoping to avoid having to put something like AMP in place, because it looked a bit overkill for my case.
I think I actually found a way :-)

I guess I can use the same factory to start all my servers. 
So I start my sniffer (in a thread) in my ServerFactory and I keep a dictionary of deferred for each line (corresponds to an emitter and a server port).
It allows me to call the messageToSend method corresponding to the proper server when receiving data.

Here is a code extract of what I implemented:

class Oldimon(Protocol):

    def __init__(self, factory):
        self.factory = factory
        self.line = None

    def connectionMade(self):
        # Check the server port to get the line
        # associated to this protocol
        port = self.transport.getHost().port
        self.line = LINES_PORT[port]
        # Add the callback for this line
        self.factory.deferred[self.line] = defer.Deferred()
        self.factory.deferred[self.line].addCallback(self.messageToSend)


class OldimonFactory(ServerFactory):

    def __init__(self, device, pcap_filter):
        # pcapDataReceived callback is called everytime a message
        # is received
        reactor.callInThread(run_pcap, device, pcap_filter, self.pcapDataReceived)
        # Dict with a deferred for each line
        self.deferred = dict(zip(LINES_PORT.values(), [None] * len(LINES_PORT)))

    def buildProtocol(self, addr):
        return Oldimon(self)

    def pcapDataReceived(self, data, line):
        if self.deferred[line] is not None:
            # Fire the callback for line
            d, self.deferred[line] = self.deferred[line], None
            d.callback(data)

oldimon_factory = OldimonFactory(device, pcap_filter)
for port in LINES_PORT.keys():
    reactor.listenTCP(port, oldimon_factory)
reactor.run()


Le 1 mars 2013 ? 15:31, Laurens Van Houtven <_ at lvh.cc> a ?crit :

> Well, you'd presumably have a connection to each of the servers in the form of a client factory and a protocol instance. Then, every time you get a message, you figure out which protocol instance you want (the one for the appropriate server) and send a message to it. You could do that with self.transport.write, of course, but it would be much easier to just use a ready-made RPC thing.
> 
> One such RPC thing is AMP, which comes with Twisted. You can read more about it here:
> 
> http://amp-protocol.net/
> https://twistedmatrix.com/documents/current/core/howto/amp.html
> 
> You will probably end up having a command like HandlePacket or something (presumably you can come up with a more apt domain-specific name), and something close to self.servers[serverFor(packet.origin)].callRemote(HandlePacket, packet.data), or whatever.
> 
> I realize this is still pretty vague and high level, so feel free to ask more questions about the parts that are unclear :)
> 
> 
> On Thu, Feb 28, 2013 at 10:59 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:
> Hi,
> 
> I have to replace a piece of software that sniffs the traffic on one interface. It gets different messages that are each associated to a specific emitter.
> On the same machine, one server is started for each emitter (on a different port).
> And the application is just supposed to use the proper server to send the messages captured (to a client on another machine).
> 
> Not sure if it's clear, but basically if I have 2 emitters A and B, I'll start 2 servers (a and b).
> My sniffer will get messages A1, A2, B1, B2, B3...
> I have to pass messages A1, A2 to server a, that will just send them to the client (if it is connected of course).
> And B1, B2, B3 to server b.
> I don't need any buffering. If no client is connected, messages captured are just discarded.
> 
> To sniff the network, I want to use pylibpcap or pcapy.
> I found this example to make it work with twisted: http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
> 
> Starting several servers that use the same protocol is not a problem.
> But how do I pass the messages captured to the right server?
> How do I make the link between the function sniffing the network and the servers?
> 
> Thanks
> 
> Benjamin
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> -- 
> cheers
> lvh
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130301/2a0256ea/attachment-0001.htm 

From glyph at twistedmatrix.com  Fri Mar  1 17:15:35 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 1 Mar 2013 14:15:35 -0800
Subject: [Twisted-Python] Lore, Sphinx,
	and getting to the finish line (was: re: lore and tickets and other
	stuff)
In-Reply-To: <CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
Message-ID: <4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>


On Mar 1, 2013, at 9:44 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> On Fri, Mar 1, 2013 at 2:29 AM, Glyph <glyph at twistedmatrix.com> wrote:
> Jean-Paul recently closed a Lore ticket as invalid, and suggested we have a discussion about Lore's future direction.  This strikes me as a very good idea, and so I wrote a message which is a bit too long (for which I apologize) to kick that off.
> 
> I don't think these two paths (lore2sphinx and continuing to maintain lore) are necessarily mutually exclusive.  Also I think it implies something about the current state of affairs that isn't accurate - e.g. that the Twisted team has agreed that Sphinx will surely replace Lore and that we are making progress on that process of placement more than we are maintaining Lore itself.
> 
> Unfortunately, I think it will be clear to anyone following its progress that lore2sphinx is unmaintained and the sphinx migration effort is stalled.  Nobody has committed to <https://bitbucket.org/khorn/lore2sphinx> in a year and a half, about the same amount of time that <http://twistedmatrix.com/trac/browser/branches/sphinx-conversion-4500> has been idle as well.  By contrast, <http://twistedmatrix.com/trac/browser/trunk/twisted/lore> has seen commits - albeit not many - within only a couple of weeks.  So, empirically, we're already maintaining lore and lore2sphinx is currently "obsolete"; really the question should be if we want to reverse that path.
> 
> 
> Some what orthagonal to your point, but this is incorrect.  lore2sphinx was split some time ago into "lore2sphinx-ng" and "rstgen".

Hi Kevin!  Long time no see!  (Too long, obviously!)

> https://bitbucket.org/khorn/lore2sphinx-ng
> https://bitbucket.org/khorn/rstgen
> 
> This was initially done as an experiment in using a more explicit "formatting model" for the generation for the Sphinx docs (and somewhat due to _your_ prodding, Glyph), and so I didn't initially make a big announcement or anything.

I do remember this.  The previous output of lore2sphinx really was unreliable enough that it was creating a never-ending treadmill of irrelevant / unpredictable Lore source fixes that were really dragging the whole process out.  Thanks for working on improving it.

> Once it became apparent that it was actually going to work out better, I sent out some emails to those who had expressed interest in helping with the whole lore2sphinx project, though I don't believe I sent out anything to the twisted list in general, as I probably should have.  I'll point out that I can count people who have shown interest in moving this forward on one hand, though.

More discussion on this list would be almost always be better.  We are a *long* way from too much traffic here.  (And, this update is honestly a surprise to me.)

> And I've specifically mentioned that I had done said forking to you, Glyph, in IRC  ;)
> (though it's IRC after all...who remembers what happens in IRC?)

Based on this exchange, my understanding was simply that you had started to try to improve lore2sphinx, but then wandered off again.

> I thought I had put a notice up in the readme file in the lore2sphinx repo, but as it isn't there, I presume I either forgot, or never got it merged, or something.
> 
> So, totally my bad for not communicating better, but I have NOT given up on converting things from Lore into Sphinx.
> (Nor do I intend to.)

OK.  Let's move things along then.  Several people showed up on IRC yesterday and voiced an interest in helping out, although what to do next - especially what to do next for a new contributor who does *not* want to try to reverse-engineer the conversion itself - needs to be made much, much clearer.

> Thinking about it, I suppose I've been somewhat reticent to do much communicating about any work I do on this, as what seems to happen is that it just gives everyone an excuse bring up some new objection to actually getting the conversion done.  I hadn't really realized this consciously until just now, though.

Communicate constantly.  The biggest objection that _I_ have to getting the conversion done at this point is that the people working on it (well, okay: you) are uncommunicative, unreliable and frequently unavailable. ;-)  If you were just keeping us all up to date - even just to complain! - I'd be much more sanguine about the whole thing.  And apparently some of your misconceptions would have been corrected a lot earlier.

> I also have no objection if someone wants to complete the lore2sphinx work, but if the lore2sphinx buildbot were to die tomorrow and go offline, I wouldn't be particularly anxious to spend a lot of resources to fix it.
> 
> My position on this was always that if someone wanted to improve the documentation, they were welcome to do so, and if they wanted to use Sphinx to do it, that's great too.  I just wasn't willing to tolerate any period where our toolchain was broken and we couldn't generate documentation for a release.  And a good thing we didn't, by the way!  If we had said "go ahead, pull the trigger, whatever, it's OK to break trunk for a little while!" we wouldn't have had any documentation toolchain for the last 2 years.
> 
> 
> And since we didn't break the toolchain, I've been in no particular hurry.  I've accepted that this will take approximately a billion years.  So no rush.

It does not have to take a billion years.  The criteria ought to be clear - and if they aren't, you should have asked for clarification :).

> On the other hand, I have at several points been willing to make the "cutover", and for various different reasons, been told it wasn't happening until things were closer to "perfect" (for some value of "perfect") than they were at the time.

Let's be specific: <http://twistedmatrix.com/trac/ticket/5312> is in need of some final code-review.  Despite several reviews and an apparently extensive final response pass, it's not currently in review, which means it's still in your court for some reason.  There is no reason to hold back on this and try to do *everything* in one big bang: this code just needs to be production-quality and land on trunk _before_ the ReST sources themselves are ready to go.

Probably something needs to happen to the buildbot build steps, too, since there's this nastiness that did an end-run around our development process to get checked in to the buildbot config without tests instead of into twisted with tests, <http://buildbot.twistedmatrix.com/builders/documentation/builds/2994/steps/process-docs/logs/stdio>, and that needs to be replaced with a command that's just like "build the docs, whether they be lore or sphinx or docbook or whatever".  But, Tom's got your back here; if you can get this done during his fellowship (see today's post, <http://labs.twistedmatrix.com/2013/03/welcome-our-new-twisted-fellow-tom.html>) I estimate you will see a completed reconfiguration within hours.

Once that's done, then it's a matter of putting <http://tm.tl/4500> into code-review with the output of the lore2sphinx builder.  That review can be somewhat expedited, and can be done in parallel by lots of people since there are no unit tests to be worried about, and formatting fixes can be done quickly by multiple people, we don't need a big formal code review.

> The current output of the old lore2sphinx branch is functional, though has a few warts (mostly extraneous spaces in the output).  These warts were apparently enough to block adoption.

Let's not under-state the problem: thanks to the jaw-droppingly weird arbitrariness of the ReST format, "extraneous spaces" can mean "arbitrarily mangled output".  But no, even these "warts" were not enough to block adoption.  What blocked adoption is that the painstakingly hand-tweaked lore sources that did not have any more "warts" were left to languish (and bit-rot, and now probably require more manual fixing) while we waited for 2 years for someone to actually finish the sphinx development and release management tools and get them finalized.  As I recall we basically finished fixing them all up, at the time.

There were three reasons that I personally kept pressing for a more thorough lore -> sphinx converter.  One is not necessarily necessary.

First, and most importantly, is the bit-rot problem: people are working on lore docs in parallel with this effort.  And, despite this exchange, I want to be clear that they should keep doing so: nobody should stop working on docs in the meanwhile, since we have no way to tell how much longer this will take.  Looking at the modified docs on the sphinx buildbot is challenging, and keeping track of random whitespace jiggling is not documented on <http://twistedmatrix.com/trac/wiki/ReviewProcess#Reviewers:Howtoreviewachange>.  *I* can't even remember how to do the math to associate one of the results in <http://buildbot.twistedmatrix.com/builds/sphinx-html/>.  And now that there have been so many changes (as I predicted there might be) we have to figure out what's changed, and re-review to make sure that everything (or at least a big enough majority of everything) is OK to go to trunk.  If the tool itself could be verified to produce correct output for all the cases we've encountered where it falls over, we wouldn't have to do this manual verification step; we could just trust that it was right, because it has tests that indicate it's correct.  Of course it's possible there might be *some* corner-case it still doesn't handle and that we didn't find, but if the tool is known to be broken in a large number of cases that we just have to magically know to avoid, then it's likely people will keep unknowingly re-introducing those problems.

Second, there are going to be some doc patches in-progress whenever the cutover happens.  Now, this is a bit less of a concern, because we can just manually translate one or two paragraphs to the new markup if necessary.  But it would still be nice to have a tool that does the job well enough that someone could grab the buildbot output for an in-progress doc fix and keep working on it without having to learn how to re-express everything in Sphinx first.

Third, the output is just hella grody right now.  Have a look here, for example: <http://buildbot.twistedmatrix.com/builds/sphinx-html/989-37334/_sources/projects/web/howto/twisted-templates.txt>.  *Tons* of peculiarly and unnecessary vertical whitespace, and very ragged right edges where the word wrap doesn't seem to respect line lengths.  This means that every change that hits these documents is going to produce a lot of unnecessary delta when authors try to clean up some of this mess to make it nicer to edit.

Spot-checking some of the output now, it seems like the tool must have been upgraded, or we've been lucky, since I can't spot any obvious bit-rot (and I could swear the docs look a lot less grody; the problems I mentioned there).  So maybe you've already addressed these problems, or they're not actually that serious any more.  But, as I said in the first point, spot-checking isn't enough.

> It has been a pretty discouraging effort at times, I have to say, as I seem to garner agreement/support/buy-in/whatever for a particular course of action (e.g. getting 99% of the way there, and then fixing Sphinx markup manually, which was the original plan, way back when), and focusing my efforts in that direction.  Then when we're ready to proceed on that basis, had another task/challenge/set of requirements/whatever added to the work that needs to be done.  In fact I still think that if the Twisted community had actually wanted to, we could have switched over to Sphinx at the first PyCon Atlanta (2010?).

By 'actually wanted to' you mean 'be willing to abandon the development process for this one thing'.

We do not abandon the development process.  Every past attempt at doing so to facilitate some feature has been a road to ruin.  Although this process has been frustrating for you, I am still happier with the current outcome (Twisted has perfectly functional documentation in our downloads and on our website) than with the alternative (create a situation where we could not produce a release for two years because the tools were languishing unfinished while we waited for you to say something about it).

I'm sorry that this has been a frustrating process for you.  And I'm not just saying that to be polite: I genuinely *am* sorry that our communication has not been clear, and that we have had wasted effort all around because of that.  But I am fairly sure that we have had basically the same requirements for this process from day one.  Let me state them here:

We need to have release-automation tools that allow developers to produce a release, including documentation.  These tools need to be subjected to the same development process as the rest of those tools, which is to say the same process as for the rest of Twisted.
The documentation itself needs to be able to be generated from any version of trunk.  While one or two formatting snafus are acceptable to be fixed after the fact, the documentation needs to be in a comprehensible state in every revision of trunk, which means that in order to land on trunk, the ReST output.

Really, most of the work has been done here already.  The docs appear to be in a mostly-workable state.  lore2sphinx looks like maybe it's doing a good enough job, maybe better than the last time I looked at it.  The _major_ hang-up is getting the release management tools over their final hump and just driving the trac tickets to completion.  With Tom keeping the review queue basically empty right now, this is an excellent opportunity to get that done.

It may make sense to schedule an event where we all show up on IRC, everyone claims a documentation component, and we all do a final review pass to make sure that the formatting problems aren't too bad before going to trunk with the cut-over.  This pre-supposes that the release/building tools are done and on trunk though.

> Anyway, I'm not giving up.  If nothing else, I'll end up with a nice restructuredText-generating library.  And if Twisted never ends up adopting Sphinx as a doc tool, eventually I'll still be able to read the Twisted docs in a format that I can navigate and doesn't hurt my eyes to look at. :)
> 
> But I'd really rather see Twisted adopt Sphinx, and get rid of Lore.
> 
> Help accepted.

All right!  I hope this exchange has gotten some people fired up to cross the finish line.  It's surprisingly close!  Thanks for updating us, Kevin - better late than never :).

-glyph

P.S.: apologies for any errors.  I didn't even really have the time to write this email, let alone copy-edit it.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130301/56cad951/attachment-0001.htm 

From glyph at twistedmatrix.com  Fri Mar  1 17:27:11 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 1 Mar 2013 14:27:11 -0800
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
Message-ID: <FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>


On Mar 1, 2013, at 1:52 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:

> I was hoping to avoid having to put something like AMP in place, because it looked a bit overkill for my case.
> I think I actually found a way :-)


In what way is it "overkill"?  The dictionary says that <http://dictionary.reference.com/browse/overkill> is "an excess of what is required or suitable, as because of zeal or misjudgment".  What is AMP too much of?  Memory?  CPU?  Bandwidth?  API complexity?  Code size?  As compared to what?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130301/53e276df/attachment.htm 

From exarkun at twistedmatrix.com  Fri Mar  1 22:34:54 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 02 Mar 2013 03:34:54 -0000
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
Message-ID: <20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>

On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
>Thanks for the answer!
>
>I was hoping to avoid having to put something like AMP in place, 
>because it looked a bit overkill for my case.
>I think I actually found a way :-)

Unfortunately, it looks like the code that you shared will only work 
accidentally (if at all).  You cannot use Twisted APIs except in the 
reactor thread.  You will at least need to add in some code to send data 
back to the reactor thread before you use Twisted APIs (such as 
`Deferred.callback`).

Jean-Paul


From kevin.horn at gmail.com  Sat Mar  2 00:35:53 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 1 Mar 2013 23:35:53 -0600
Subject: [Twisted-Python] Lore, Sphinx,
 and getting to the finish line (was: re: lore and tickets and other
 stuff)
In-Reply-To: <4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
	<4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
Message-ID: <CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>

On Fri, Mar 1, 2013 at 4:15 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 1, 2013, at 9:44 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> On Fri, Mar 1, 2013 at 2:29 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
>> Jean-Paul recently closed a Lore ticket as invalid, and suggested we have
>> a discussion about Lore's future direction.  This strikes me as a very good
>> idea, and so I wrote a message which is a bit too long (for which I
>> apologize) to kick that off.
>>
>> I don't think these two paths (lore2sphinx and continuing to maintain
>> lore) are necessarily mutually exclusive.  Also I think it implies
>> something about the current state of affairs that isn't accurate - e.g.
>> that the Twisted team has agreed that Sphinx will surely replace Lore and
>> that we are making progress on that process of placement more than we are
>> maintaining Lore itself.
>>
>> Unfortunately, I think it will be clear to anyone following its progress
>> that lore2sphinx is unmaintained and the sphinx migration effort is
>> stalled.  Nobody has committed to <
>> https://bitbucket.org/khorn/lore2sphinx> in a year and a half, about the
>> same amount of time that <
>> http://twistedmatrix.com/trac/browser/branches/sphinx-conversion-4500>
>> has been idle as well.  By contrast, <
>> http://twistedmatrix.com/trac/browser/trunk/twisted/lore> has seen
>> commits - albeit not many - within only a couple of weeks.  So,
>> empirically, we're already maintaining lore and lore2sphinx is currently
>> "obsolete"; really the question should be if we want to reverse that path.
>>
>>
> Some what orthagonal to your point, but this is incorrect.  lore2sphinx
> was split some time ago into "lore2sphinx-ng" and "rstgen".
>
>
> Hi Kevin!  Long time no see!  (Too long, obviously!)
>
> https://bitbucket.org/khorn/lore2sphinx-ng
> https://bitbucket.org/khorn/rstgen
>
> This was initially done as an experiment in using a more explicit
> "formatting model" for the generation for the Sphinx docs (and somewhat due
> to _your_ prodding, Glyph), and so I didn't initially make a big
> announcement or anything.
>
>
> I do remember this.  The previous output of lore2sphinx really was
> unreliable enough that it was creating a never-ending treadmill of
> irrelevant / unpredictable Lore source fixes that were really dragging the
> whole process out.  Thanks for working on improving it.
>
>
That "never-ending" series of Lore source fixes took place over the course
of a couple of weeks.  Doing things that way was not my idea, though it
seemed reasonable at the time because  the idea was that we would do the
cutover at the end of it.


> Once it became apparent that it was actually going to work out better, I
> sent out some emails to those who had expressed interest in helping with
> the whole lore2sphinx project, though I don't believe I sent out anything
> to the twisted list in general, as I probably should have.  I'll point out
> that I can count people who have shown interest in moving this forward on
> one hand, though.
>
>
> More discussion on this list would be almost always be better.  We are a
> *long* way from too much traffic here.  (And, this update is honestly a
> surprise to me.)
>
> And I've specifically mentioned that I had done said forking to you,
> Glyph, in IRC  ;)
> (though it's IRC after all...who remembers what happens in IRC?)
>
>
> Based on this exchange, my understanding was simply that you had started
> to try to improve lore2sphinx, but then wandered off again.
>
>
I never "wandered off".  Been here the whole time.  I've been in #twisted
almost continually for about the last 3 years, and in #twisted-dev for
about a year (I didn't relaize it existed before that). I just got tired of
(my perception) talking to myself about doing the conversion.  So I was
being quiet.  Granted, I shouldn't have been, and that's on me.  but it's
not like I'm hard to get a hold of.

> I thought I had put a notice up in the readme file in the lore2sphinx
> repo, but as it isn't there, I presume I either forgot, or never got it
> merged, or something.
>
> So, totally my bad for not communicating better, but I have NOT given up
> on converting things from Lore into Sphinx.
> (Nor do I intend to.)
>
>
> OK.  Let's move things along then.
>

Yes lets.


> Several people showed up on IRC yesterday and voiced an interest in
> helping out, although what to do next - especially what to do next for a
> new contributor who does *not* want to try to reverse-engineer the
> conversion itself - needs to be made much, much clearer.
>
>
The last day or two have probably not been the best to try and get my
attention, especially yesterday, as I essentially worked a 14 hr day trying
to meet a deadline. But I see the conversation on IRC.  I'll note that
noone seems to have considered asking me anything about it.  Looks like it
was about 4am, though, so perhaps that wouldn't have done much good, as I
was asleep. :)

But hey...I have email!  Ask me!  I'll talk your ear off about it!

(As an aside, lore2sphinx is in no way a "broken pile of regexes".  Not to
say that it isn't broken in some really significant ways, because it is,
but it doesn't use regexes at all.  Just sayin'.)

> Thinking about it, I suppose I've been somewhat reticent to do much
> communicating about any work I do on this, as what seems to happen is that
> it just gives everyone an excuse bring up some new objection to actually
> getting the conversion done.  I hadn't really realized
> this consciously until just now, though.
>
>
> Communicate constantly.  The biggest objection that _I_ have to getting
> the conversion done at this point is that the people working on it (well,
> okay: you) are uncommunicative, unreliable and frequently unavailable. ;-)
>  If you were just keeping us all up to date - even just to complain! - I'd
> be much more sanguine about the whole thing.  And apparently some of your
> misconceptions would have been corrected a lot earlier.
>
>
I got tired of complaining.  And arguing.

> I also have no objection if someone wants to complete the lore2sphinx
>> work, but if the lore2sphinx buildbot were to die tomorrow and go offline,
>> I wouldn't be particularly anxious to spend a lot of resources to fix it.
>>
>> My position on this was always that if someone wanted to improve the
>> documentation, they were welcome to do so, and if they wanted to use Sphinx
>> to do it, that's great too.  I just wasn't willing to tolerate any period
>> where our toolchain was broken and we couldn't generate documentation for a
>> release.  And a good thing we didn't, by the way!  If we had said "go
>> ahead, pull the trigger, whatever, it's OK to break trunk for a little
>> while!" we wouldn't have had any documentation toolchain for the last 2
>> years.
>>
>>
> And since we didn't break the toolchain, I've been in no particular hurry.
>  I've accepted that this will take approximately a billion years.  So no
> rush.
>
>
> It does not have to take a billion years.  The criteria ought to be clear
> - and if they aren't, you should have asked for clarification :).
>
>
I have asked for clarification more times than I can count about more
aspects of this than I can possibly keep track of.

> On the other hand, I have at several points been willing to make the
> "cutover", and for various different reasons, been told it wasn't happening
> until things were closer to "perfect" (for some value of "perfect") than
> they were at the time.
>
>
> Let's be specific: <http://twistedmatrix.com/trac/ticket/5312> is in need
> of some final code-review.  Despite several reviews and an apparently
> extensive final response pass, it's not currently in review, which means
> it's still in your court for some reason.  There is no reason to hold back
> on this and try to do *everything* in one big bang: this code just needs to
> be production-quality and land on trunk _before_ the ReST sources
> themselves are ready to go.
>
>
Despite numerous attempts to prod someone into responding to my requests
for clarification ;) on the ticket, I never got any response.
 Specifically, I could never get an answer on whether the sphinx build tool
should require whomever was running it to specify a version or whether the
tool should guess.  The existing tools (at the time, I haven't looked at
the current state of these) do/did both, in different places.

And I admit, my impetus for immediacy kind of crashed when I had spent
several weeks (I thought) getting everything ready to switch over the docs
(in 4500) and then being told "oh we have some release stuff, we need to
have a tool for that too".  My impression prior to this was that
sphinx-build would be used to build the sphinx docs, which turned out to be
erroneous.  I didn't even know that those tools (twisted.python._release)
even existed prior to that point.

Anyway, after a while it looked like fixing the lore sources would have to
be done all over again, so I started looking into whether the conversion
process itself could be improved, so that we didn't have to keep doing that.

Also, please elaborate on what you mean  by "do *everything* in one big
bang.  My intention was never to do anything but get the SphinxBuilder
working on that branch.  Was there something else you thought I was doing?
 Was there something else I should (or should not) have been doing?


> Probably something needs to happen to the buildbot build steps, too, since
> there's this nastiness that did an end-run around our development process
> to get checked in to the buildbot config without tests instead of into
> twisted with tests, <
> http://buildbot.twistedmatrix.com/builders/documentation/builds/2994/steps/process-docs/logs/stdio>,
> and that needs to be replaced with a command that's just like "build the
> docs, whether they be lore or sphinx or docbook or whatever".  But, Tom's
> got your back here; if you can get this done during his fellowship (see
> today's post, <
> http://labs.twistedmatrix.com/2013/03/welcome-our-new-twisted-fellow-tom.html>)
> I estimate you will see a completed reconfiguration within hours.
>

I have no idea about how the buildbots are configured.  But the linked
buildbot log looks like part of the official release process.
http://twistedmatrix.com/trac/wiki/ReleaseProcess#Buildhowtodocumentsforwebsite


> Once that's done, then it's a matter of putting <http://tm.tl/4500> into
> code-review with the output of the lore2sphinx builder.  That review can be
> somewhat expedited, and can be done in parallel by lots of people since
> there are no unit tests to be worried about, and formatting fixes can be
> done quickly by multiple people, we don't need a big formal code review.
>
> The current output of the old lore2sphinx branch is functional, though has
> a few warts (mostly extraneous spaces in the output).  These warts were
> apparently enough to block adoption.
>
>
> Let's not under-state the problem: thanks to the jaw-droppingly weird
> arbitrariness of the ReST format, "extraneous spaces" can mean "arbitrarily
> mangled output".  But no, even these "warts" were not enough to block
> adoption.  What blocked adoption is that the painstakingly hand-tweaked
> lore sources that did *not *have any more "warts" were left to languish
> (and bit-rot, and now probably require more manual fixing) while we waited
> for 2 years for someone to actually finish the sphinx development and
> release management tools and get them finalized.  As I recall we basically
> finished fixing them all up, at the time.
>

They got left alone because of the release tools hangup.  Ideally the
release tools would have been done before the whole lore-source-tweaking
process, but they weren't.  I'll admit my frustration played a part in
this, but so did the deafening silence I got when I asked for anyone to
comment on the ticket.


> There were three reasons that I personally kept pressing for a more
> thorough lore -> sphinx converter.  One is not necessarily necessary.
>
> First, and most importantly, is the bit-rot problem: people are working on
> lore docs in parallel with this effort.  And, despite this exchange, I want
> to be clear that they should keep doing so: nobody should stop working on
> docs in the meanwhile, since we have no way to tell how much longer this
> will take.  Looking at the modified docs on the sphinx buildbot is
> challenging, and keeping track of random whitespace jiggling is not
> documented on <
> http://twistedmatrix.com/trac/wiki/ReviewProcess#Reviewers:Howtoreviewachange>.
>  *I* can't even remember how to do the math to associate one of the results
> in <http://buildbot.twistedmatrix.com/builds/sphinx-html/>.  And now that
> there have been so many changes (as I predicted there might be) we have to
> figure out what's changed, and re-review to make sure that everything (or
> at least a big enough majority of everything) is OK to go to trunk.  If the
> tool itself could be verified to produce correct output for all the cases
> we've encountered where it falls over, we wouldn't have to do this manual
> verification step; we could just trust that it was right, because it has
> tests that indicate it's correct.  Of course it's possible there might be
> *some* corner-case it still doesn't handle and that we didn't find, but if
> the tool is known to be broken in a large number of cases that we just have
> to magically know to avoid, then it's likely people will keep unknowingly
> re-introducing those problems.
>

More on this below.


> Second, there are going to be some doc patches in-progress whenever the
> cutover happens.  Now, this is a bit less of a concern, because we can just
> manually translate one or two paragraphs to the new markup if necessary.
>  But it would still be nice to have a tool that does the job well enough
> that someone could grab the buildbot output for an in-progress doc fix and
> keep working on it without having to learn how to re-express everything in
> Sphinx first.
>

This is why I think (at this point) we need to build Sphinx docs for every
branch as part of the buildbot process.  More below.


> Third, the output is just hella grody right now.  Have a look here, for
> example: <
> http://buildbot.twistedmatrix.com/builds/sphinx-html/989-37334/_sources/projects/web/howto/twisted-templates.txt>.
>  *Tons* of peculiarly and unnecessary vertical whitespace, and very ragged
> right edges where the word wrap doesn't seem to respect line lengths.  This
> means that every change that hits these documents is going to produce a lot
> of unnecessary delta when authors try to clean up some of this mess to make
> it nicer to edit.
>

Yep, its' ugly.  Lore2sphinx-ng does a better job, but isn't finished.
 More below.


> Spot-checking some of the output now, it seems like the tool must have
> been upgraded, or we've been lucky, since I can't spot any obvious bit-rot
> (and I could swear the docs look a lot less grody; the problems I mentioned
> there).  So maybe you've already addressed these problems, or they're not
> actually that serious any more.  But, as I said in the first point,
> spot-checking isn't enough.
>
> It has been a pretty discouraging effort at times, I have to say, as I
> seem to garner agreement/support/buy-in/whatever for a particular course of
> action (e.g. getting 99% of the way there, and then fixing Sphinx markup
> manually, which was the original plan, way back when), and focusing my
> efforts in that direction.  Then when we're ready to proceed on that basis,
> had another task/challenge/set of requirements/whatever added to the work
> that needs to be done.  In fact I still think that if the Twisted community
> had actually wanted to, we could have switched over to Sphinx at the first
> PyCon Atlanta (2010?).
>
>
> By 'actually wanted to' you mean 'be willing to abandon the development
> process for this one thing'.
>
> We do not abandon the development process.  Every past attempt at doing so
> to facilitate some feature has been a road to ruin.  Although this process
> has been frustrating for you, I am still happier with the current outcome
> (Twisted has perfectly functional documentation in our downloads and on our
> website) than with the alternative (create a situation where we could not
> produce a release for two years because the tools were languishing
> unfinished while we waited for you to say something about it).
>
>
You keep saying that I wanted to "abandon the development process", and I'm
not sure what you mean by that.  My perception has been that I would say
"what do we need to do to make this happen"?  There would be some hemming
and hawing (and at least several times long discussions about how
documentation didn't really fit the regular UQDS process) and a sort of
plan would be invented.  I would proceed according to the plan as I
understood it.  I would then say "OK, we're ready"!  And then be told that
some other thing not in the plan needed to be done.  The cycle would then
repeat.



> I'm sorry that this has been a frustrating process for you.  And I'm not
> just saying that to be polite: I genuinely *am* sorry that our
> communication has not been clear, and that we have had wasted effort all
> around because of that.  But I am fairly sure that we have had basically
> the same requirements for this process from day one.  Let me state them
> here:
>
>
>    1. We need to have release-automation tools that allow developers to
>    produce a release, including documentation.  These tools need to be
>    subjected to the same development process as the rest of those tools, which
>    is to say the same process as for the rest of Twisted.
>
> No this was not brought up until well into the process. I (sort of)
understand the desire for this, but it seems pretty weird to be building
what is essentially a wrapper for an existing tool, along with tests for
said wrapper,


>
>    1. The documentation itself needs to be able to be generated from any
>    version of trunk.  While one or two formatting snafus are acceptable to be
>    fixed after the fact, the documentation needs to be in a comprehensible
>    state in every revision of trunk, which means that in order to land on
>    trunk, the ReST output.
>
> So...you didn't finish that sentence.  I realize you apologized for errors
at the end of your mail, but I have a feeling you were going to say
something rather important there...

:)

I'll talk more about this below (I think...depending on what you actually
mean tot say here).


> Really, most of the work has been done here already.  The docs appear to
> be in a mostly-workable state.  lore2sphinx looks like maybe it's doing a
> good enough job, maybe better than the last time I looked at it.  The
> _major_ hang-up is getting the release management tools over their final
> hump and just driving the trac tickets to completion.  With Tom keeping the
> review queue basically empty right now, this is an excellent opportunity to
> get that done.
>
> It may make sense to schedule an event where we all show up on IRC,
> everyone claims a documentation component, and we all do a final review
> pass to make sure that the formatting problems aren't too bad before going
> to trunk with the cut-over.  This pre-supposes that the release/building
> tools are done and on trunk though.
>
> Anyway, I'm not giving up.  If nothing else, I'll end up with a nice
> restructuredText-generating library.  And if Twisted never ends up adopting
> Sphinx as a doc tool, eventually I'll still be able to read the Twisted
> docs in a format that I can navigate and doesn't hurt my eyes to look at. :)
>
> But I'd really rather see Twisted adopt Sphinx, and get rid of Lore.
>
> Help accepted.
>
>
> All right!  I hope this exchange has gotten some people fired up to cross
> the finish line.  It's surprisingly close!  Thanks for updating us, Kevin -
> better late than never :).
>
>
Experience shows that it's unlikely to be surprisingly close.  I like your
optimism though.


> -glyph
>
> P.S.: apologies for any errors.  I didn't even really have the time to
> write this email, let alone copy-edit it.
>
>
Now that I've replied to all of that, let me give you a rundown of what
I've been thinking and planning, so that you have an idea of where I'm
coming from.

Here are the various things that I have perceived to be necessary/required
in order to get the conversion to happen:

a) The conversion process needs to be able to be run concurrently with Lore
for an extended period of time.  In other words, Lore would be the
"official" version of the docs, and the Sphinx docs would be built in some
form of automated fashion until everyone was happy with them and/or ready
to deprecate/abandon Lore.
b) Because of a), there needs to be tooling to run lore2sphinx (or
whatever) on a regular basis.  (This was sort of being done via the
Sphinx-building buildbot, but in a very ad-hockery sort of way, which was
brittle, broke a couple of times, and needed to be improved.)
c) There needs to be release management tooling to build the Sphinx docs
from ReST into whatever formats we want to publish (HTML and PDF to start,
maybe others later on)
d) Convert the Lore sources to better ReST documents without all the
problems that the current lore2sphinx output has.  I at one time thought
this was pretty impractical.  My first attempt at a conversion tool tried
to use an intermediate object model, but I ran into trouble when trying to
combine the various objects.  So I abandoned the effort and created what
became lore2sphinx, which basically just combined a bunch of strings.  I
then figured out a way of making the intermediate object thing work, and
that was lore2sphinx-ng.  Then it became convenient to split out the
intermediate object model from the documetn processing code, so I put all
of that into a library and that became rstgen.

(For anyone who is curious, the lore2sphinx-ng repo is forked off from the
lore2sphinx repo, primarily because I didn't want to break the Sphinx
buildbot by making drastic changes.)

Here's what my plan was prior to this whole discussion getting started
again.

1) Finish rstgen, where "finished" in this instance is defined as "is
capable of generating all the vanilla docutils and sphinx-specific ReST
elements that we need for converting the
Twisted documentation.
2) Finish lore2sphinx-ng (which would probably have ended with merging it
back into the lore2sphinx repo), where "finished" means that it would be
capable of processing all the XHTML Lore tags that were defined in the Lore
documentation and used in the Twisted documentation, and generating a tree
of rstgen elements, which could then be rendered into ReST.
(this would also serve to satisfy b) above, as the CLI in lore2sphinx-ng is
less...well, let's just call it broken than lore2sphinx's was/is.)
3) Go back and finish SphinxBuilder (release tooling for building a sphinx
project, which is basically a wrapper for sphinx-build, plus some vague
"version feature").
4) Get someone to use something less hackish than what's currently building
the Sphinx docs on the buildbot, and preferably in such a way that the
results of those builds could be published somewhere and have persistent
links.  Currently the results of what the Sphinx buildbot does are stored
for a time, and then go away, so you'll see links to build results in some
trac tickets that go nowhere, which is decidedly unhelpful.  My plan was
that we'd set up something where the Sphinx docs would get generated and
published someplace for every buildbot build so that we could always have
the current results for the lore to sphinx conversion for the tip of each
branch.  I have no idea whether this is actually feasible or practical, but
it seemed like it would be useful.
5) Proceed with Sphinx docs being built from lore sources, making tweaks as
necessary to lore2sphinx(ng) for as long as it took for the generated docs
to be good enough to justify switching to Sphinx entirely.
6) Switch to Sphinx entirely.

I really wasn't planning on trying to get people excited about switching to
Sphinx again until 1) and 2) were at least "mostly" done (for certain
values of done) and I had gone back to finish 3).

So.  I guess at this point the question is whether to try and go with
what's there (lore2sphinx) or finish up the "new stuff" (lore2sphinx-ng +
rstgen).  I think 3-6 in my above plan need to happen in any case, and I
think those will be much easier with lore2sphinx-ng+rstgen.

I think I have some changes to lore2sphinx and rstgen which I haven't
pushed yet.  I'll try to get those out there soonish (sometime over the
weekend) in case people want to look at them.

IIRC, rstgen has support for most of the vanilla docutils elements, with
the notable exception of tables (and maybe definition lists...can't recall
whether I finished those).  It has a basic level of test coverage (of
course you can never have too many tests) for rendering the elements
individually, and some test for elements in combination (particularly
nested lists).  Footnotes and Citations I think also need some work, which
I have a plan for, but haven't implemented yet (i don't think).

The "new" lore2sphinx CLI tool needs more work, but is relatively
straightforward.  Like the old tool, it's basically an elementtree
processor, except instead of spitting out strings that get joined together
(which granted was an unholy mess), it generates rstgen elements, which all
have a .render() method.  After processing a Lore document, you shoudl end
up with a rstgen.Document object.  You call it's render() method, which
calls it's children's render() methods, etc. and it's turtles all the way
down.

The framework is there for the new CLI tool, it's mostly a matter of
writing a bunch of short methods that take elementtree elements as input
and return appropriate rstgen objects.

Obviously these tools aren't finished, but they produce much better output
than the old version of lore2sphinx w.r.t. whitespace handling, paragraph
wrapping, etc.

Some of the code is still pretty messy, but nowhere near the train wreck
that the current/old version of lore2sphinx is.  By which I mean it _can_
be cleaned up, it just hasn't been yet.  In particular there's some places
in rstgen where the API is (to me at least) obviously awful, but I haven't
gotten around to fixing it yet.

Please review the code.  Please feel free to ask questions if you're
interested.

Personally, I've gotten over being in a hurry about all this, and I think a
robust tool is more likely to succeed in the long run, though finishing it
may make the run a bit longer.  So I'm for finishing lore2sphinx-ng+rstgen.

What are others' opinions?  Make the "old" tool work?  Or make the "new"
tool work?

Damn.  Talk about long emails.

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130301/e5fe3c1b/attachment-0001.htm 

From kevin.horn at gmail.com  Sat Mar  2 00:39:41 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 1 Mar 2013 23:39:41 -0600
Subject: [Twisted-Python] Lore, Sphinx,
 and getting to the finish line (was: re: lore and tickets and other
 stuff)
In-Reply-To: <CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
	<4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
	<CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
Message-ID: <CA+U=zK2pw16hYD_wCqeq_zct32QfxtN-4Si8RJvDh_s2DjsgfA@mail.gmail.com>

On Fri, Mar 1, 2013 at 11:35 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

>
> I think I have some changes to lore2sphinx and rstgen which I haven't
> pushed yet.  I'll try to get those out there soonish (sometime over the
> weekend) in case people want to look at them.
>
>
FYI.  This turned out not to be the case.  What I have is already in the
repo(s) on bitbucket.

For those who may have lost track in the voluminous emails, they are here:

https://bitbucket.org/khorn/lore2sphinx-ng
https://bitbucket.org/khorn/rstgen

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130301/634ea9c3/attachment.htm 

From tom.prince at ualberta.net  Sat Mar  2 03:18:12 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 02 Mar 2013 01:18:12 -0700
Subject: [Twisted-Python] Lore, Sphinx,
	and getting to the finish line (was: re: lore and tickets and other
	stuff)
In-Reply-To: <CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
	<4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
	<CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
Message-ID: <877glquse3.fsf@hermes.hocat.ca>

> On the other hand, I have at several points been willing to make the
> "cutover", and for various different reasons, been told it wasn't happening
> until things were closer to "perfect" (for some value of "perfect") than
> they were at the time.

Well, the way the cut-over will eventually happen is that a
ticket+branch is given a postive review.

So you say that "[you] have [...] been willing to make the cutover", without
having put an associated ticket into review sounds somewhat like
abandoning the development process.

> Despite numerous attempts to prod someone into responding to my requests
> for clarification ;) on the ticket, I never got any response.

Side note: The best way way to get a response to a ticket is probably to
put it into review.

> Specifically, I could never get an answer on whether the sphinx build tool
> should require whomever was running it to specify a version or whether the
> tool should guess.  The existing tools (at the time, I haven't looked at
> the current state of these) do/did both, in different places.

Having a look at the current release automation tools, it looks like the
only one that takes a version is `change-versions`, and the rest of the
tools use the version from the tree.

>>  *I* can't even remember how to do the math to associate one of the results
>> in <http://buildbot.twistedmatrix.com/builds/sphinx-html/>.

I've update the buildbot to create a link from the build to the
generated documentation.

>>    1. We need to have release-automation tools that allow developers to
>>    produce a release, including documentation.  These tools need to be
>>    subjected to the same development process as the rest of those tools, which
>>    is to say the same process as for the rest of Twisted.
>>
> I (sort of) understand the desire for this, but it seems pretty weird to be building
> what is essentially a wrapper for an existing tool, along with tests for
> said wrapper,

If the command is now, and always will be, just 'sphinx-build .' then we
might be able to get away without doing this, but since sphinx isn't
under our control, we can't insure that. Thus, we need somewhere to
record how to run sphinx-build. If we have a wrapper, then we have an
obvious place to record that information.

This also gives us an easy place to add things like using a different
template when building docs on the buildbot, as opposed to the release
documentation, for example.

> 4) Get someone to use something less hackish than what's currently building
> the Sphinx docs on the buildbot,

I can help with this.

> and preferably in such a way that the results of those builds could be
> published somewhere and have persistent links.

I'm not sure if this makes sense to keep all the old builds around. It
only takes ~2 minutes to regenerate them, as needed.

> My plan was that we'd set up something where the Sphinx docs would get
> generated and published someplace for every buildbot build

We currently do this for every trunk revision, and it is possible to do
by hand for any branch version. It is straightforward to add this to the
list of builds that get done by running force-build.py.

> So.  I guess at this point the question is whether to try and go with
> what's there (lore2sphinx) or finish up the "new stuff" (lore2sphinx-ng +
> rstgen).  I think 3-6 in my above plan need to happen in any case, and I
> think those will be much easier with lore2sphinx-ng+rstgen.


From beenje at gmail.com  Sat Mar  2 03:39:57 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sat, 2 Mar 2013 09:39:57 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
Message-ID: <F300B429-3C10-491D-9332-7C701004D05C@gmail.com>


Le 1 mars 2013 ? 23:27, Glyph <glyph at twistedmatrix.com> a ?crit :

> 
> On Mar 1, 2013, at 1:52 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:
> 
>> I was hoping to avoid having to put something like AMP in place, because it looked a bit overkill for my case.
>> I think I actually found a way :-)
> 
> 
> In what way is it "overkill"?  The dictionary says that <http://dictionary.reference.com/browse/overkill> is "an excess of what is required or suitable, as because of zeal or misjudgment".  What is AMP too much of?  Memory?  CPU?  Bandwidth?  API complexity?  Code size?  As compared to what?

"overkill" wasn't maybe the proper term to use.
I was just referring to code complexity based on my knowledge, or lack of knowledge :-)
I had the impression AMP is used when you need to exchange various command/response.
I don't need all that "power" as I just want to pass some messages.

I thought using a deferred like I did in my code example was easier.
Not sure though as Jean-Paul pointed it probably doesn't work.

My server already uses a specific protocol to communicate with the client.
So I don't really see how to integrate AMP there.
Do you have any example?

Thanks

Benjamin

> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130302/826382b4/attachment.htm 

From beenje at gmail.com  Sat Mar  2 03:40:04 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sat, 2 Mar 2013 09:40:04 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
Message-ID: <0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>


Le 2 mars 2013 ? 04:34, exarkun at twistedmatrix.com a ?crit :

> On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
>> Thanks for the answer!
>> 
>> I was hoping to avoid having to put something like AMP in place, 
>> because it looked a bit overkill for my case.
>> I think I actually found a way :-)
> 
> Unfortunately, it looks like the code that you shared will only work 
> accidentally (if at all).  You cannot use Twisted APIs except in the 
> reactor thread.  You will at least need to add in some code to send data 
> back to the reactor thread before you use Twisted APIs (such as 
> `Deferred.callback`).


In run_pcap, I call reactor.callFromThread(callback, x25_data, line_id). See below.
That seems to work with the tests I did.
Am I missing something?

/Benjamin

def run_pcap(device, pcap_filter, callback):

    def analyse_packet(hdr, data):
        # check the data
        reactor.callFromThread(callback, x25_data, line_id)

    p = pcapy.open_live(device, 65535, 1, 100)
    p.setfilter(pcap_filter)
    p.loop(-1, analyse_packet)


class Oldimon(Protocol):

    def __init__(self, factory):
        self.factory = factory
        self.line = None

    def connectionMade(self):
        # Check the server port to get the line
        # associated to this protocol
        port = self.transport.getHost().port
        self.line = LINES_PORT[port]
        # Add the callback for this line
        self.factory.deferred[self.line] = defer.Deferred()
        self.factory.deferred[self.line].addCallback(self.messageToSend)


class OldimonFactory(ServerFactory):

    def __init__(self, device, pcap_filter):
        # pcapDataReceived callback is called everytime a message
        # is received
        reactor.callInThread(run_pcap, device, pcap_filter, self.pcapDataReceived)
        # Dict with a deferred for each line
        self.deferred = dict(zip(LINES_PORT.values(), [None] * len(LINES_PORT)))

    def buildProtocol(self, addr):
        return Oldimon(self)

    def pcapDataReceived(self, data, line):
        if self.deferred[line] is not None:
            # Fire the callback for line
            d, self.deferred[line] = self.deferred[line], None
            d.callback(data)

oldimon_factory = OldimonFactory(device, pcap_filter)
for port in LINES_PORT.keys():
    reactor.listenTCP(port, oldimon_factory)
reactor.run()


> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From _ at lvh.cc  Sat Mar  2 04:08:41 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 2 Mar 2013 10:08:41 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
Message-ID: <CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>

Yes, that looks okay, but that wasn't in your original sample ;-)

I'm on my phone at the moment which isn't great for code review, but it
looks like you only fire one deferred per line?
On Mar 2, 2013 9:50 AM, "Benjamin BERTRAND" <beenje at gmail.com> wrote:

>
> Le 2 mars 2013 ? 04:34, exarkun at twistedmatrix.com a ?crit :
>
> > On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
> >> Thanks for the answer!
> >>
> >> I was hoping to avoid having to put something like AMP in place,
> >> because it looked a bit overkill for my case.
> >> I think I actually found a way :-)
> >
> > Unfortunately, it looks like the code that you shared will only work
> > accidentally (if at all).  You cannot use Twisted APIs except in the
> > reactor thread.  You will at least need to add in some code to send data
> > back to the reactor thread before you use Twisted APIs (such as
> > `Deferred.callback`).
>
>
> In run_pcap, I call reactor.callFromThread(callback, x25_data, line_id).
> See below.
> That seems to work with the tests I did.
> Am I missing something?
>
> /Benjamin
>
> def run_pcap(device, pcap_filter, callback):
>
>     def analyse_packet(hdr, data):
>         # check the data
>         reactor.callFromThread(callback, x25_data, line_id)
>
>     p = pcapy.open_live(device, 65535, 1, 100)
>     p.setfilter(pcap_filter)
>     p.loop(-1, analyse_packet)
>
>
> class Oldimon(Protocol):
>
>     def __init__(self, factory):
>         self.factory = factory
>         self.line = None
>
>     def connectionMade(self):
>         # Check the server port to get the line
>         # associated to this protocol
>         port = self.transport.getHost().port
>         self.line = LINES_PORT[port]
>         # Add the callback for this line
>         self.factory.deferred[self.line] = defer.Deferred()
>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>
>
> class OldimonFactory(ServerFactory):
>
>     def __init__(self, device, pcap_filter):
>         # pcapDataReceived callback is called everytime a message
>         # is received
>         reactor.callInThread(run_pcap, device, pcap_filter,
> self.pcapDataReceived)
>         # Dict with a deferred for each line
>         self.deferred = dict(zip(LINES_PORT.values(), [None] *
> len(LINES_PORT)))
>
>     def buildProtocol(self, addr):
>         return Oldimon(self)
>
>     def pcapDataReceived(self, data, line):
>         if self.deferred[line] is not None:
>             # Fire the callback for line
>             d, self.deferred[line] = self.deferred[line], None
>             d.callback(data)
>
> oldimon_factory = OldimonFactory(device, pcap_filter)
> for port in LINES_PORT.keys():
>     reactor.listenTCP(port, oldimon_factory)
> reactor.run()
>
>
> >
> > Jean-Paul
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130302/aeb246f7/attachment-0001.htm 

From glyph at twistedmatrix.com  Sat Mar  2 04:14:39 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 2 Mar 2013 01:14:39 -0800
Subject: [Twisted-Python] Lore, Sphinx,
	and getting to the finish line (was: re: lore and tickets and other
	stuff)
In-Reply-To: <CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
	<4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
	<CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
Message-ID: <739CAE65-F29E-4FA8-96BF-A6C1548A9E02@twistedmatrix.com>


On Mar 1, 2013, at 9:35 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> That "never-ending" series of Lore source fixes took place over the course of a couple of weeks.  Doing things that way was not my idea, though it seemed reasonable at the time because  the idea was that we would do the cutover at the end of it.

Well, let's go to the video tape. Based on this comment -  <http://twistedmatrix.com/trac/ticket/4500#comment:12> - these tickets were closed over a period ranging from 2010/07 to 2011/03. 6 months isn't quite "weeks", but okay I guess it wasn't "never-ending" either :).

> I never "wandered off".  Been here the whole time.  I've been in #twisted almost continually for about the last 3 years, and in #twisted-dev for about a year (I didn't relaize it existed before that). I just got tired of (my perception) talking to myself about doing the conversion.  So I was being quiet.  Granted, I shouldn't have been, and that's on me.  but it's not like I'm hard to get a hold of.

Fair enough.  I had the inaccurate impression that you "weren't around" but you were just being quiet.  You never actually failed to respond, so that's not a fair impression.

> OK.  Let's move things along then.  
> 
> Yes lets.

Right on.

> The last day or two have probably not been the best to try and get my attention, especially yesterday, as I essentially worked a 14 hr day trying to meet a deadline.

24 hours is a perfectly reasonable response latency, don't worry about it :).

> But I see the conversation on IRC.  I'll note that noone seems to have considered asking me anything about it.  Looks like it was about 4am, though, so perhaps that wouldn't have done much good, as I was asleep. :) 

> But hey...I have email!  Ask me!  I'll talk your ear off about it!

This email was written after said conversation as an explicit attempt to ask about just that, so, there you go :).

> (As an aside, lore2sphinx is in no way a "broken pile of regexes".  Not to say that it isn't broken in some really significant ways, because it is, but it doesn't use regexes at all.  Just sayin'.)

Actually yeah, "regex" is just a curse-word here :).  It's the emitter I'm complaining about, anyway, not the parser, so deriding it as a "regex" is in no way accurate.

> I got tired of complaining.  And arguing.

>> And since we didn't break the toolchain, I've been in no particular hurry.  I've accepted that this will take approximately a billion years.  So no rush.
> 
> It does not have to take a billion years.  The criteria ought to be clear - and if they aren't, you should have asked for clarification :).
> 
> I have asked for clarification more times than I can count about more aspects of this than I can possibly keep track of.

Where?

On <http://twistedmatrix.com/trac/ticket/5312> I see exactly one un-answered question in your review response, "Is re-raising the exception enough here? Or should I do something entirely different?"  Except it never actually got back into review, so it never got bubbled back up to get attention for an official response.

> Let's be specific: <http://twistedmatrix.com/trac/ticket/5312> is in need of some final code-review.  Despite several reviews and an apparently extensive final response pass, it's not currently in review, which means it's still in your court for some reason.  There is no reason to hold back on this and try to do *everything* in one big bang: this code just needs to be production-quality and land on trunk _before_ the ReST sources themselves are ready to go.
> 
> 
> Despite numerous attempts to prod someone into responding to my requests for clarification ;) on the ticket, I never got any response.

Like I said, I see one un-answered question.  On a ticket which is not in review: according to the development process, that means you still think you have some stuff to do on it, and it's not ready for anyone to take a look at it yet.  If you want a response, put it into review and someone will look at it as soon as time allows.  Or post here.  A comment on a ticket doesn't necessarily show up in anyone's in-box and won't necessarily get a response that isn't a code-review.

> Specifically, I could never get an answer on whether the sphinx build tool should require whomever was running it to specify a version or whether the tool should guess.  The existing tools (at the time, I haven't looked at the current state of these) do/did both, in different places.

The word "version" does not appear on 4500 at all, and on 5312 the only comment you make related to versions is you saying "Not sure which direction to go here. Deferring to sometime not the middle of the night".  It's exarkun asking the question about the versions though, not you :).

Sorry to be overly pedantic here: I'm not trying to assign blame, since that is fairly pointless now.  I'm just meaning to say that, based on what I see here, I am wondering what we could have improved.  I know we chatted on the mailing list, and in person, as well as on the tickets, so not all of this is necessarily public or even written down, but it really seems like you developed an impression of having to repeatedly ask questions and argue about things far more than you actually did :).

> And I admit, my impetus for immediacy kind of crashed when I had spent several weeks (I thought) getting everything ready to switch over the docs (in 4500) and then being told "oh we have some release stuff, we need to have a tool for that too".  My impression prior to this was that sphinx-build would be used to build the sphinx docs, which turned out to be erroneous.  I didn't even know that those tools (twisted.python._release) even existed prior to that point.

The release stuff was new-ish at the time, and is obviously not super publicly documented (it's for "internal" use only on Twisted itself right now).  So it's understandable that it didn't get communicated well, but it hardly seems like a reason to tank the whole process.

> Anyway, after a while it looked like fixing the lore sources would have to be done all over again, so I started looking into whether the conversion process itself could be improved, so that we didn't have to keep doing that.

That part of the conversation, at least, jives with my understanding :).

> Also, please elaborate on what you mean  by "do *everything* in one big bang.  My intention was never to do anything but get the SphinxBuilder working on that branch.  Was there something else you thought I was doing?  Was there something else I should (or should not) have been doing?

My reasoning goes like this: the ticket for the release tools is still not in review, so you must be waiting for something to re-submit it.  It looks like you responded to the code, so the only thing I could think you were still waiting for would be for the lore sources themselves to be ready.

> I have no idea about how the buildbots are configured.  But the linked buildbot log looks like part of the official release process.
> http://twistedmatrix.com/trac/wiki/ReleaseProcess#Buildhowtodocumentsforwebsite

Yeah. Ugh. I hate that part of that wiki page.  But that part can be Tom's problem, since he's responsible for the buildbot :).

> [the fixed-up Lore sources] got left alone because of the release tools hangup.  Ideally the release tools would have been done before the whole lore-source-tweaking process, but they weren't.  I'll admit my frustration played a part in this, but so did the deafening silence I got when I asked for anyone to comment on the ticket.

Where and how did you ask people to comment on the ticket?  I don't recall being asked, and I tend to be pretty good about leaving prompts like that in my inbox until I've done what was asked.  (Not *perfect*, of course, and if you asked a list then there might have been some bystander effect.)  It seems like we might have avoided this whole mess if you had just attached the 'review' keyword :).

> You keep saying that I wanted to "abandon the development process", and I'm not sure what you mean by that.

As I recall, we discussed this process in person at PyCon and you were quite keen to just check the documentation in in a broken state, and fix it all up in one gigantic branch while nobody did any Lore work.  To be fair, when I described the problems this would create, you did agree that we shouldn't do it that way.

> My perception has been that I would say "what do we need to do to make this happen"?  There would be some hemming and hawing (and at least several times long discussions about how documentation didn't really fit the regular UQDS process) and a sort of plan would be invented.  I would proceed according to the plan as I understood it.  I would then say "OK, we're ready"!  And then be told that some other thing not in the plan needed to be done.  The cycle would then repeat.

The only "cycle" I can either see on the tickets or recall here is where the release tools didn't come in to the initial plan.

> No [the need for release automation] was not brought up until well into the process. I (sort of) understand the desire for this, but it seems pretty weird to be building what is essentially a wrapper for an existing tool, along with tests for said wrapper, 

OK.  I can believe that this did not happen.  One problem is that we (the inner-circle old-school Twisted developers) tend to engage in conversations about how a thing might be done while at the same time we discuss what must be done.  And we also tend to discuss what policy is (or what all or some of us believe it ought to be in some case, further confusing the issue) without making explicit what the purpose of that requirement is.

I would ask the community to help us with this by doing a couple of things.

If somebody says "X is policy", always ask for a link to it.  If there is a link, it'll help you understand it better.  If there isn't a link, then the authority telling you it's "policy" might just be remembering that it's the way we've done things since forever and of course it's a good idea.  There are definitely things that I have thought were in the coding standard that are not actually written down anywhere, on more than one occasion.

If a meandering discussion is happening - here, on the mailing list, on the ticket - never be afraid to break it up and separate out the different concerns which are being discussed: what is necessary for compliance with our development process, what would be a good idea from a design point of view, how the work might be broken up to get through review more manageably, what other concerns are in play.

Especially, if you ever see a code review where a reviewer says "I think..." without making it clear what you should do, you should always ask, 'is this a requirement of the review or just some thoughts you have'.

There's also the problem of "I think you should..." being interpreted as "You must...".  It is very hard to consistently separate design feedback from code review, although we try very hard; but, it's hard to separate it out when reading it as well.  So one important point to keep in mind is that, as the author of a proposed change, outside the things that are agreed upon policy consensus, you always have some degree of discretion to disagree with a reviewer.  And you should freely do so when submitting anything for re-review.  It's best to just do this as quickly as possible, so that it gets back to the reviewer without a whole lot of delay, and they can respond with either "I still disagree, but you're doing the work, so OK go ahead" or "No, you really have to do this, it's required by policy document X, here's a link" ;-).
> The documentation itself needs to be able to be generated from any version of trunk.  While one or two formatting snafus are acceptable to be fixed after the fact, the documentation needs to be in a comprehensible state in every revision of trunk, which means that in order to land on trunk, the ReST output.
> So...you didn't finish that sentence.  I realize you apologized for errors at the end of your mail, but I have a feeling you were going to say something rather important there...

Well yes, that was the point of the apology.  That was a rather important thing.  What I was probably going to say was just:

The ReST output needs to be in good enough shape to be generally readable, with a manageable number of errors.  But, we need to be able to *verify* that it has not too many errors.

And I'd already discussed that somewhat above.

> Experience shows that it's unlikely to be surprisingly close.  I like your optimism though.

Experience just teaches it that it's not done yet.  And experience has taught us that about every change, and it was right up until the exact moment when it wasn't right any more ;-).

> Now that I've replied to all of that, let me give you a rundown of what I've been thinking and planning, so that you have an idea of where I'm coming from.
> 
> Here are the various things that I have perceived to be necessary/required in order to get the conversion to happen:
> 
> a) The conversion process needs to be able to be run concurrently with Lore for an extended period of time.  In other words, Lore would be the "official" version of the docs, and the Sphinx docs would be built in some form of automated fashion until everyone was happy with them and/or ready to deprecate/abandon Lore.

Your understanding of this requirement is slightly off, I think, although possibly the consequences are the same.  As per the difficulties I laid out above, about separating the requirements from the strategies for satisfying said requirements.

The thing that we weren't going to tolerate was any message saying that people should hold off on writing documentation, even for "a little while" while we fixed up the lore conversion, because without a contractual obligation for someone to finish this work, there's really no telling how long "a little while" would be :).  Since the whole point of this sphinx conversion is to appeal to documentation authors who prefer the ReST format as input (it's definitely not to make the docs look nicer, writing a new stylesheet for Lore would have taken 1/100th of the effort and nobody has expressed interest in doing that), creating a period where things were even *less* appealing to documentation authors would defeat the purpose.

Another possible solution to this problem would be to modify Lore so it could process ReST sources, so that we could convert the documentation within the repository piecemeal, and start writing any new docs in ReST, but still have a coherent whole of documentation produced, eventually switching the documentation processor from Lore to Sphinx.

Yet another possible solution would be to modify Sphinx, adding a plugin to process the Lore sources.

As an aside: this is the part of the process which has been so frustrating to me, personally.  The two alternate solutions I proposed here (and have proposed before) seem far saner and more manageable in terms of effort, to me.  But, everyone I have spoken to about docutils and ReST has told me in no uncertain terms that they are both a pile of heinous hacks that resist any attempt at sensible software-engineering solutions to problems, so we need to resort to hackish system-integration stuff like what we've done.  This worries me.

I know that Sphinx's output is well-loved by the Python community, but if it's so hard to call into that we can't reasonably modify it to get an XML DOM that looks like Lore source to Lore, and it's so hard to plug in to it that we can't give it a data structure that it likes from Lore's XML DOM, then how the heck is it being maintained?  And if it actually *isn't* that bad, then why haven't I managed to find someone that knows its code well enough to do one or the other of these things?

I have no direct knowledge of any of this stuff, because my main interest here is improving the experience of working on Twisted, both for you, Kevin, and for the people who will arguably be helped by the use of Sphinx.  Maybe I'm completely wrong and Sphinx is beautifully architected and we could have done this from day 1.  But I faintly hope that some Docutils and Sphinx contributor hears that I said "sphinx is garbage" and makes a fool of me by contributing either a lore modification or a sphinx plugin which solves this whole problem so we can do the format or tool migration incrementally :).

> b) Because of a), there needs to be tooling to run lore2sphinx (or whatever) on a regular basis.  (This was sort of being done via the Sphinx-building buildbot, but in a very ad-hockery sort of way, which was brittle, broke a couple of times, and needed to be improved.)

Hmm. I wasn't aware of that. But it seems like it's running by a charm now.

> c) There needs to be release management tooling to build the Sphinx docs from ReST into whatever formats we want to publish (HTML and PDF to start, maybe others later on)

Yup.  (ePub?  PDF is so last-century... :))

> d) Convert the Lore sources to better ReST documents without all the problems that the current lore2sphinx output has.

So, this wasn't *necessary*.  If we had gotten through the release automation stuff - and I still don't understand why that's stuck - we could have merged it.

> I at one time thought this was pretty impractical.  My first attempt at a conversion tool tried to use an intermediate object model, but I ran into trouble when trying to combine the various objects.  So I abandoned the effort and created what became lore2sphinx, which basically just combined a bunch of strings.  I then figured out a way of making the intermediate object thing work, and that was lore2sphinx-ng.  Then it became convenient to split out the intermediate object model from the documetn processing code, so I put all of that into a library and that became rstgen.

It seems the saving grace here is that rstgen might be a generally useful tool in its own right, with more of a long-term future than lore2sphinx would have had.

> (For anyone who is curious, the lore2sphinx-ng repo is forked off from the lore2sphinx repo, primarily because I didn't want to break the Sphinx buildbot by making drastic changes.)

Have a link?

> Here's what my plan was prior to this whole discussion getting started again.
> 
> 1) Finish rstgen, where "finished" in this instance is defined as "is capable of generating all the vanilla docutils and sphinx-specific ReST elements that we need for converting the 
> Twisted documentation.

Sounds like a worthy goal, although I don't think this is necessarily required.  Have you been working on it for the last 2 years?  Do you have any idea when it might be done?  It might be worthwhile to write a *smaller* .

> 2) Finish lore2sphinx-ng (which would probably have ended with merging it back into the lore2sphinx repo), where "finished" means that it would be capable of processing all the XHTML Lore tags that were defined in the Lore documentation and used in the Twisted documentation, and generating a tree of rstgen elements, which could then be rendered into ReST.

Cool.

While this would be handy, especially for people working on documentation branches, it's not necessarily necessary.

> (this would also serve to satisfy b) above, as the CLI in lore2sphinx-ng is less...well, let's just call it broken than lore2sphinx's was/is.)

OK.

> 3) Go back and finish SphinxBuilder (release tooling for building a sphinx project, which is basically a wrapper for sphinx-build, plus some vague "version feature").

This is really the crux; this is the thing you should work on first, I think, even if you're going to keep working on lore2sphinx-ng.  Basically the only reason that I was keen to get the lore to sphinx conversion improved in the first place was that creating this tool seemed to be dragging on for quite a while after the "chunk tickets" were done.  But now, this tool is almost done, and we could re-do the lore-source review if you wanted to do that.  The current lore2sphinx might well be good enough to just go with, especially if the next-generation version is going to take another six months to finish.

> 4) Get someone to use something less hackish than what's currently building the Sphinx docs on the buildbot, and preferably in such a way that the results of those builds could be published somewhere and have persistent links.  Currently the results of what the Sphinx buildbot does are stored for a time, and then go away, so you'll see links to build results in some trac tickets that go nowhere, which is decidedly unhelpful.  My plan was that we'd set up something where the Sphinx docs would get generated and published someplace for every buildbot build so that we could always have the current results for the lore to sphinx conversion for the tip of each branch.  I have no idea whether this is actually feasible or practical, but it seemed like it would be useful.

OK, *this* sounds like really unnecessary turd-polishing ;-).  This builder is an interim step; the more interesting step is the builder that just builds the sphinx docs, in the same way that the current builder builds the lore docs.  Furthermore, it seems to be working fine.  Build results links that go nowhere are a known problem with buildbot, since it does eventually lose most history, and this type of history takes up a fair bit of disk space.

> 5) Proceed with Sphinx docs being built from lore sources, making tweaks as necessary to lore2sphinx(ng) for as long as it took for the generated docs to be good enough to justify switching to Sphinx entirely.
> 6) Switch to Sphinx entirely.
> 
> I really wasn't planning on trying to get people excited about switching to Sphinx again until 1) and 2) were at least "mostly" done (for certain values of done) and I had gone back to finish 3).
> 
> So.  I guess at this point the question is whether to try and go with what's there (lore2sphinx) or finish up the "new stuff" (lore2sphinx-ng + rstgen).  I think 3-6 in my above plan need to happen in any case, and I think those will be much easier with lore2sphinx-ng+rstgen.

This decision is really determined by time estimates.

In any case, work out the sphinx release automation tool first, since we need that regardless of how we switch over.

> I think I have some changes to lore2sphinx and rstgen which I haven't pushed yet.  I'll try to get those out there soonish (sometime over the weekend) in case people want to look at them.

You might want to send a considerably shorter message just enticing other list members to have a look at maybe help out with that stuff :).

> IIRC, rstgen has support for most of the vanilla docutils elements, with the notable exception of tables (and maybe definition lists...can't recall whether I finished those).  It has a basic level of test coverage (of course you can never have too many tests) for rendering the elements individually, and some test for elements in combination (particularly nested lists).  Footnotes and Citations I think also need some work, which I have a plan for, but haven't implemented yet (i don't think).
> 
> The "new" lore2sphinx CLI tool needs more work, but is relatively straightforward.  Like the old tool, it's basically an elementtree processor, except instead of spitting out strings that get joined together (which granted was an unholy mess), it generates rstgen elements, which all have a .render() method.  After processing a Lore document, you shoudl end up with a rstgen.Document object.  You call it's render() method, which calls it's children's render() methods, etc. and it's turtles all the way down.
> 
> The framework is there for the new CLI tool, it's mostly a matter of writing a bunch of short methods that take elementtree elements as input and return appropriate rstgen objects.
> 
> Obviously these tools aren't finished, but they produce much better output than the old version of lore2sphinx w.r.t. whitespace handling, paragraph wrapping, etc.

Aesthetically, this appeals to me a lot more than going with the messiness of lore2sphinx.  But it is _not_ a requirement.

> Some of the code is still pretty messy, but nowhere near the train wreck that the current/old version of lore2sphinx is.  By which I mean it _can_ be cleaned up, it just hasn't been yet.  In particular there's some places in rstgen where the API is (to me at least) obviously awful, but I haven't gotten around to fixing it yet.
> 
> Please review the code.  Please feel free to ask questions if you're interested.
> 
> Personally, I've gotten over being in a hurry about all this, and I think a robust tool is more likely to succeed in the long run, though finishing it may make the run a bit longer.  So I'm for finishing lore2sphinx-ng+rstgen.

I think a little false urgency might not hurt here :-).  I'm not going to work on the tool - just writing these emails probably blew my Twisted development budget for the next two months ;-) - but I will do my best to quickly clear up any procedural what-needs-to-be-done questions unambiguously.  Please ping if anything gets you stuck.

> What are others' opinions?  Make the "old" tool work?  Or make the "new" tool work?
> 
> Damn.  Talk about long emails.


-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130302/1eacb123/attachment-0001.htm 

From glyph at twistedmatrix.com  Sat Mar  2 04:17:27 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 2 Mar 2013 01:17:27 -0800
Subject: [Twisted-Python] Lore, Sphinx,
	and getting to the finish line (was: re: lore and tickets and other
	stuff)
In-Reply-To: <877glquse3.fsf@hermes.hocat.ca>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
	<4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
	<CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
	<877glquse3.fsf@hermes.hocat.ca>
Message-ID: <7EE803F3-BED0-4E3E-8DE6-FADCF356BBB9@twistedmatrix.com>


On Mar 2, 2013, at 12:18 AM, Tom Prince <tom.prince at ualberta.net> wrote:

> I've update the buildbot to create a link from the build to the
> generated documentation.

Oh my goodness, Tom.  You are like a god of buildbot.

It did not even occur to me to ask for this, as I assumed it would be too complex.  Thanks so much!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130302/0de3c867/attachment.htm 

From p.mayers at imperial.ac.uk  Sat Mar  2 06:25:36 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 02 Mar 2013 11:25:36 +0000
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
Message-ID: <5131E1B0.5090207@imperial.ac.uk>

On 03/01/2013 10:27 PM, Glyph wrote:

>   What is AMP too much of?  Memory?  CPU?  Bandwidth?  API complexity?
>   Code size?  As compared to what?

FWIW, every time (all three of them...) I've looked at AMP I got rapidly 
bored and ended up using PB. My use-cases have usually been 
Twisted->Twisted, and the AMP "Command" definition, and syncing said 
defs up at both ends, was hassle I didn't need.

When I need to talk to external systems I almost always use some REST, 
XMLRPC or JSON-RPC interface, because they're usually available 
out-of-the-box.

I also don't care for the idea of statically typing the command defs; 
I'm sure this helps when talking to languages with crappy typing 
systems, but honestly - who uses Java these days? ;o)


From _ at lvh.cc  Sat Mar  2 07:05:46 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 2 Mar 2013 13:05:46 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <5131E1B0.5090207@imperial.ac.uk>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
Message-ID: <CAE_Hg6bn3s74s+stG=1m=dLKGLMtweW=qDssoVOjPmrmLpNpBg@mail.gmail.com>

Fair enough, I only use AMP as the external interface (e.g. Javascript
talking to me from a browser).


On Sat, Mar 2, 2013 at 12:25 PM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> On 03/01/2013 10:27 PM, Glyph wrote:
>
> >   What is AMP too much of?  Memory?  CPU?  Bandwidth?  API complexity?
> >   Code size?  As compared to what?
>
> FWIW, every time (all three of them...) I've looked at AMP I got rapidly
> bored and ended up using PB. My use-cases have usually been
> Twisted->Twisted, and the AMP "Command" definition, and syncing said
> defs up at both ends, was hassle I didn't need.
>
> When I need to talk to external systems I almost always use some REST,
> XMLRPC or JSON-RPC interface, because they're usually available
> out-of-the-box.
>
> I also don't care for the idea of statically typing the command defs;
> I'm sure this helps when talking to languages with crappy typing
> systems, but honestly - who uses Java these days? ;o)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130302/fc23f963/attachment.htm 

From glyph at twistedmatrix.com  Sat Mar  2 07:19:42 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 2 Mar 2013 04:19:42 -0800
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <5131E1B0.5090207@imperial.ac.uk>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
Message-ID: <CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>


On Mar 2, 2013, at 3:25 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 03/01/2013 10:27 PM, Glyph wrote:
> 
>>  What is AMP too much of?  Memory?  CPU?  Bandwidth?  API complexity?
>>  Code size?  As compared to what?
> 
> FWIW, every time (all three of them...) I've looked at AMP I got rapidly 
> bored and ended up using PB. My use-cases have usually been 
> Twisted->Twisted, and the AMP "Command" definition, and syncing said 
> defs up at both ends, was hassle I didn't need.
> 
> When I need to talk to external systems I almost always use some REST, 
> XMLRPC or JSON-RPC interface, because they're usually available 
> out-of-the-box.
> 
> I also don't care for the idea of statically typing the command defs; 
> I'm sure this helps when talking to languages with crappy typing 
> systems, but honestly - who uses Java these days? ;o)

I wrote a blog post some time ago explaining why you want static declarations, even if your programming language is all nice and dynamic:

<http://glyph.twistedmatrix.com/2008/07/static-on-wire.html>

Even if all you care about is Twisted->Twisted, there are potential resource exhaustion and implementation-confusion attacks against PB that are very hard to mitigate in its current form.  That said, for the sorts of places where PB is useful (communicating about and synchronizing arbitrarily deep and complex object graphs), you're probably going to have those exhaustion attacks anyway and using something like AMP would just be more typing.  So as long as you're version-synchronized and at least partially trusted on both ends of the wire, PB is a fine choice as well.

"REST" (by which you mean "HTTP", I'm sure), XMLRPC, and JSON-RPC are not full replacements for AMP because they're asymmetrical and don't support pipelining.  With AMP, a client can receive requests from a server, you don't need to have a TCP handshake for every request, you can receive responses out of order, and you can receive a request while waiting for a response, and so on.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130302/2cd3af4e/attachment.htm 

From beenje at gmail.com  Sat Mar  2 08:28:21 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sat, 2 Mar 2013 14:28:21 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
	<CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
Message-ID: <4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>


Le 2 mars 2013 ? 10:08, Laurens Van Houtven <_ at lvh.cc> a ?crit :

> Yes, that looks okay, but that wasn't in your original sample ;-)
> 
> 

Yep, sorry about that.
I was more focused on the ServerFactory and Protocol.
The pcap in a thread comes from the link I mentioned in my first post: http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
But I know, it's better to put everything in one post. People shouldn't have to click links.

> I'm on my phone at the moment which isn't great for code review, but it looks like you only fire one deferred per line?
> 
> 

There is a specific deferred by line.
I re-arm it in the messageToSend method (that wasn't in the sample either).
In the Oldimon class, I have:

    def messageToSend(self, message):
        self.sendMessage(message)
        # Re-arm the deferred
        self.factory.deferred[self.line] = defer.Deferred()
        self.factory.deferred[self.line].addCallback(self.messageToSend)


> On Mar 2, 2013 9:50 AM, "Benjamin BERTRAND" <beenje at gmail.com> wrote:
> 
> Le 2 mars 2013 ? 04:34, exarkun at twistedmatrix.com a ?crit :
> 
> > On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
> >> Thanks for the answer!
> >>
> >> I was hoping to avoid having to put something like AMP in place,
> >> because it looked a bit overkill for my case.
> >> I think I actually found a way :-)
> >
> > Unfortunately, it looks like the code that you shared will only work
> > accidentally (if at all).  You cannot use Twisted APIs except in the
> > reactor thread.  You will at least need to add in some code to send data
> > back to the reactor thread before you use Twisted APIs (such as
> > `Deferred.callback`).
> 
> 
> In run_pcap, I call reactor.callFromThread(callback, x25_data, line_id). See below.
> That seems to work with the tests I did.
> Am I missing something?
> 
> /Benjamin
> 
> def run_pcap(device, pcap_filter, callback):
> 
>     def analyse_packet(hdr, data):
>         # check the data
>         reactor.callFromThread(callback, x25_data, line_id)
> 
>     p = pcapy.open_live(device, 65535, 1, 100)
>     p.setfilter(pcap_filter)
>     p.loop(-1, analyse_packet)
> 
> 
> class Oldimon(Protocol):
> 
>     def __init__(self, factory):
>         self.factory = factory
>         self.line = None
> 
>     def connectionMade(self):
>         # Check the server port to get the line
>         # associated to this protocol
>         port = self.transport.getHost().port
>         self.line = LINES_PORT[port]
>         # Add the callback for this line
>         self.factory.deferred[self.line] = defer.Deferred()
>         self.factory.deferred[self.line].addCallback(self.messageToSend)
> 
> 
> class OldimonFactory(ServerFactory):
> 
>     def __init__(self, device, pcap_filter):
>         # pcapDataReceived callback is called everytime a message
>         # is received
>         reactor.callInThread(run_pcap, device, pcap_filter, self.pcapDataReceived)
>         # Dict with a deferred for each line
>         self.deferred = dict(zip(LINES_PORT.values(), [None] * len(LINES_PORT)))
> 
>     def buildProtocol(self, addr):
>         return Oldimon(self)
> 
>     def pcapDataReceived(self, data, line):
>         if self.deferred[line] is not None:
>             # Fire the callback for line
>             d, self.deferred[line] = self.deferred[line], None
>             d.callback(data)
> 
> oldimon_factory = OldimonFactory(device, pcap_filter)
> for port in LINES_PORT.keys():
>     reactor.listenTCP(port, oldimon_factory)
> reactor.run()
> 
> 
> >
> > Jean-Paul
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130302/e026855c/attachment-0001.htm 

From p.mayers at imperial.ac.uk  Sat Mar  2 08:46:48 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 02 Mar 2013 13:46:48 +0000
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
Message-ID: <513202C8.6070400@imperial.ac.uk>

On 03/02/2013 12:19 PM, Glyph wrote:

> I wrote a blog post some time ago explaining why you want static
> declarations, even if your programming language is all nice and dynamic:

Being able to "early drop" bad PDUs is a fine notion, but it's not a 
property that comes with zero cost. If you feel that the cost/benefit 
tradeoff is not useful in your case (and I do) then it doesn't make 
sense to pay it.

AMP would be somewhat more attractive (to me) if it were possible to run 
with the IDL just on the "server" (i.e. callee); this would achieve the 
goal of protocol-level sanity checking, without the cost of having to 
distribute the IDL to the clients. Presumably it would be possible to 
implement this now - have an AMP discovery command that dynamically 
builds the client-side IDLs. But there's no incentive for me to do that.

For the use-cases I have, the protocol version/interop problem is not 
relevant.

> not full replacements for AMP because they're asymmetrical and don't
> support pipelining.  With AMP, a client can receive requests from a
> server, you don't need to have a TCP handshake for every request, you

You don't need to do a TCP handshake for every request in any of those 
protocols either. Long-lived TCP/HTTP sessions are quite common, though 
not universal.

It will be interesting to see if and how HTTP/2.0 solves a lot of these 
issues.

> can receive responses out of order, and you can receive a request while
> waiting for a response, and so on.

Obviously. But I would tend to use those protocols when either those 
properties are not needed (perhaps even undesireable) and may be 
impossible to make use of (if the far end is a synchronous, blocking 
client unable to make use of out-of-order responses or server-initiated 
messages).

In those cases, it would also be rare for AMP to be available, and it 
certainly wouldn't be pre-installed.

"Install this Java library on your Oracle servers then..."
"Ha ha no go away."

You seemed curious why someone wouldn't use AMP. Personally I have two 
common use-cases:

  1. Communicating between two trusted Twisted processes, for which PB 
is good enough.

  2. Communicating with a semi-trusted third party process, for which a 
RESTful interface or XML/JSON RPCs are *available* and sufficiently 
secure and capable for my needs.

Obviously other people will have radically different needs, but for me, 
AMP adds little.

Cheers,
Phil


From _ at lvh.cc  Sat Mar  2 08:53:20 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 2 Mar 2013 14:53:20 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
	<CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
	<4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>
Message-ID: <CAE_Hg6YWHzJQC6Rp5JE+iV-LEbufrwG3XMsg0JJBGd-pMQ0kgQ@mail.gmail.com>

Ah, but that too appears to be missing in the original code ;-)

The stuff you're doing with deferreds there seems a bit strange. In your
example, why not just call sendMessage when you get the packet?


On Sat, Mar 2, 2013 at 2:28 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:

>
> Le 2 mars 2013 ? 10:08, Laurens Van Houtven <_ at lvh.cc> a ?crit :
>
> Yes, that looks okay, but that wasn't in your original sample ;-)
>
>
> Yep, sorry about that.
> I was more focused on the ServerFactory and Protocol.
> The pcap in a thread comes from the link I mentioned in my first post:
> http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
> But I know, it's better to put everything in one post. People shouldn't
> have to click links.
>
> I'm on my phone at the moment which isn't great for code review, but it
> looks like you only fire one deferred per line?
>
>
> There is a specific deferred by line.
> I re-arm it in the messageToSend method (that wasn't in the sample either).
> In the Oldimon class, I have:
>
>     def messageToSend(self, message):
>         self.sendMessage(message)
>         # Re-arm the deferred
>         self.factory.deferred[self.line] = defer.Deferred()
>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>
>
> On Mar 2, 2013 9:50 AM, "Benjamin BERTRAND" <beenje at gmail.com> wrote:
>
>>
>> Le 2 mars 2013 ? 04:34, exarkun at twistedmatrix.com a ?crit :
>>
>> > On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
>> >> Thanks for the answer!
>> >>
>> >> I was hoping to avoid having to put something like AMP in place,
>> >> because it looked a bit overkill for my case.
>> >> I think I actually found a way :-)
>> >
>> > Unfortunately, it looks like the code that you shared will only work
>> > accidentally (if at all).  You cannot use Twisted APIs except in the
>> > reactor thread.  You will at least need to add in some code to send data
>> > back to the reactor thread before you use Twisted APIs (such as
>> > `Deferred.callback`).
>>
>>
>> In run_pcap, I call reactor.callFromThread(callback, x25_data, line_id).
>> See below.
>> That seems to work with the tests I did.
>> Am I missing something?
>>
>> /Benjamin
>>
>> def run_pcap(device, pcap_filter, callback):
>>
>>     def analyse_packet(hdr, data):
>>         # check the data
>>         reactor.callFromThread(callback, x25_data, line_id)
>>
>>     p = pcapy.open_live(device, 65535, 1, 100)
>>     p.setfilter(pcap_filter)
>>     p.loop(-1, analyse_packet)
>>
>>
>> class Oldimon(Protocol):
>>
>>     def __init__(self, factory):
>>         self.factory = factory
>>         self.line = None
>>
>>     def connectionMade(self):
>>         # Check the server port to get the line
>>         # associated to this protocol
>>         port = self.transport.getHost().port
>>         self.line = LINES_PORT[port]
>>         # Add the callback for this line
>>         self.factory.deferred[self.line] = defer.Deferred()
>>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>>
>>
>> class OldimonFactory(ServerFactory):
>>
>>     def __init__(self, device, pcap_filter):
>>         # pcapDataReceived callback is called everytime a message
>>         # is received
>>         reactor.callInThread(run_pcap, device, pcap_filter,
>> self.pcapDataReceived)
>>         # Dict with a deferred for each line
>>         self.deferred = dict(zip(LINES_PORT.values(), [None] *
>> len(LINES_PORT)))
>>
>>     def buildProtocol(self, addr):
>>         return Oldimon(self)
>>
>>     def pcapDataReceived(self, data, line):
>>         if self.deferred[line] is not None:
>>             # Fire the callback for line
>>             d, self.deferred[line] = self.deferred[line], None
>>             d.callback(data)
>>
>> oldimon_factory = OldimonFactory(device, pcap_filter)
>> for port in LINES_PORT.keys():
>>     reactor.listenTCP(port, oldimon_factory)
>> reactor.run()
>>
>>
>> >
>> > Jean-Paul
>> >
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130302/d2e59567/attachment.htm 

From beenje at gmail.com  Sat Mar  2 09:25:13 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sat, 2 Mar 2013 15:25:13 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CAE_Hg6YWHzJQC6Rp5JE+iV-LEbufrwG3XMsg0JJBGd-pMQ0kgQ@mail.gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
	<CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
	<4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>
	<CAE_Hg6YWHzJQC6Rp5JE+iV-LEbufrwG3XMsg0JJBGd-pMQ0kgQ@mail.gmail.com>
Message-ID: <4A456C6A-558E-4F4C-AFBC-F51349BDA864@gmail.com>


Le 2 mars 2013 ? 14:53, Laurens Van Houtven <_ at lvh.cc> a ?crit :

> Ah, but that too appears to be missing in the original code ;-)
> 
> The stuff you're doing with deferreds there seems a bit strange. In your example, why not just call sendMessage when you get the packet?

If I had only one server yes.
But the thing is I have to send the message to a different server depending on the line id.
That was my initial problem.
I don't see how I could call the sendMessage method corresponding to a specific server directly.
Or?

> 
> 
> On Sat, Mar 2, 2013 at 2:28 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:
> 
> Le 2 mars 2013 ? 10:08, Laurens Van Houtven <_ at lvh.cc> a ?crit :
> 
>> Yes, that looks okay, but that wasn't in your original sample ;-)
>> 
>> 
> 
> Yep, sorry about that.
> I was more focused on the ServerFactory and Protocol.
> The pcap in a thread comes from the link I mentioned in my first post: http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
> But I know, it's better to put everything in one post. People shouldn't have to click links.
> 
>> I'm on my phone at the moment which isn't great for code review, but it looks like you only fire one deferred per line?
>> 
>> 
> 
> There is a specific deferred by line.
> I re-arm it in the messageToSend method (that wasn't in the sample either).
> In the Oldimon class, I have:
> 
>     def messageToSend(self, message):
>         self.sendMessage(message)
>         # Re-arm the deferred
>         self.factory.deferred[self.line] = defer.Deferred()
>         self.factory.deferred[self.line].addCallback(self.messageToSend)
> 
> 
>> On Mar 2, 2013 9:50 AM, "Benjamin BERTRAND" <beenje at gmail.com> wrote:
>> 
>> Le 2 mars 2013 ? 04:34, exarkun at twistedmatrix.com a ?crit :
>> 
>> > On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
>> >> Thanks for the answer!
>> >>
>> >> I was hoping to avoid having to put something like AMP in place,
>> >> because it looked a bit overkill for my case.
>> >> I think I actually found a way :-)
>> >
>> > Unfortunately, it looks like the code that you shared will only work
>> > accidentally (if at all).  You cannot use Twisted APIs except in the
>> > reactor thread.  You will at least need to add in some code to send data
>> > back to the reactor thread before you use Twisted APIs (such as
>> > `Deferred.callback`).
>> 
>> 
>> In run_pcap, I call reactor.callFromThread(callback, x25_data, line_id). See below.
>> That seems to work with the tests I did.
>> Am I missing something?
>> 
>> /Benjamin
>> 
>> def run_pcap(device, pcap_filter, callback):
>> 
>>     def analyse_packet(hdr, data):
>>         # check the data
>>         reactor.callFromThread(callback, x25_data, line_id)
>> 
>>     p = pcapy.open_live(device, 65535, 1, 100)
>>     p.setfilter(pcap_filter)
>>     p.loop(-1, analyse_packet)
>> 
>> 
>> class Oldimon(Protocol):
>> 
>>     def __init__(self, factory):
>>         self.factory = factory
>>         self.line = None
>> 
>>     def connectionMade(self):
>>         # Check the server port to get the line
>>         # associated to this protocol
>>         port = self.transport.getHost().port
>>         self.line = LINES_PORT[port]
>>         # Add the callback for this line
>>         self.factory.deferred[self.line] = defer.Deferred()
>>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>> 
>> 
>> class OldimonFactory(ServerFactory):
>> 
>>     def __init__(self, device, pcap_filter):
>>         # pcapDataReceived callback is called everytime a message
>>         # is received
>>         reactor.callInThread(run_pcap, device, pcap_filter, self.pcapDataReceived)
>>         # Dict with a deferred for each line
>>         self.deferred = dict(zip(LINES_PORT.values(), [None] * len(LINES_PORT)))
>> 
>>     def buildProtocol(self, addr):
>>         return Oldimon(self)
>> 
>>     def pcapDataReceived(self, data, line):
>>         if self.deferred[line] is not None:
>>             # Fire the callback for line
>>             d, self.deferred[line] = self.deferred[line], None
>>             d.callback(data)
>> 
>> oldimon_factory = OldimonFactory(device, pcap_filter)
>> for port in LINES_PORT.keys():
>>     reactor.listenTCP(port, oldimon_factory)
>> reactor.run()
>> 
>> 
>> >
>> > Jean-Paul
>> >
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> 
> -- 
> cheers
> lvh
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130302/ab9ebdea/attachment-0001.htm 

From _ at lvh.cc  Sat Mar  2 09:33:40 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 2 Mar 2013 15:33:40 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <4A456C6A-558E-4F4C-AFBC-F51349BDA864@gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
	<CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
	<4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>
	<CAE_Hg6YWHzJQC6Rp5JE+iV-LEbufrwG3XMsg0JJBGd-pMQ0kgQ@mail.gmail.com>
	<4A456C6A-558E-4F4C-AFBC-F51349BDA864@gmail.com>
Message-ID: <CAE_Hg6ZkRvU8ra14hpq=h5w_j+pHs6r8HiecqrgkaYLzB0iTaA@mail.gmail.com>

I'm guessing that this is another question that will be solved as soon as I
see the code (perhaps you should put all your code up somewhere); but all I
do know is that all Deferreds buy you is an abstraction for organizing
callbacks; it's not a dispatch mechanism (and if you're using it as one
now, you do have dispatch logic, it just lives somewhere else).


On Sat, Mar 2, 2013 at 3:25 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:

>
> Le 2 mars 2013 ? 14:53, Laurens Van Houtven <_ at lvh.cc> a ?crit :
>
> Ah, but that too appears to be missing in the original code ;-)
>
> The stuff you're doing with deferreds there seems a bit strange. In your
> example, why not just call sendMessage when you get the packet?
>
>
> If I had only one server yes.
> But the thing is I have to send the message to a different server
> depending on the line id.
> That was my initial problem.
> I don't see how I could call the sendMessage method corresponding to a
> specific server directly.
> Or?
>
>
>
> On Sat, Mar 2, 2013 at 2:28 PM, Benjamin BERTRAND <beenje at gmail.com>wrote:
>
>>
>> Le 2 mars 2013 ? 10:08, Laurens Van Houtven <_ at lvh.cc> a ?crit :
>>
>> Yes, that looks okay, but that wasn't in your original sample ;-)
>>
>>
>> Yep, sorry about that.
>> I was more focused on the ServerFactory and Protocol.
>> The pcap in a thread comes from the link I mentioned in my first post:
>> http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
>> But I know, it's better to put everything in one post. People shouldn't
>> have to click links.
>>
>> I'm on my phone at the moment which isn't great for code review, but it
>> looks like you only fire one deferred per line?
>>
>>
>> There is a specific deferred by line.
>> I re-arm it in the messageToSend method (that wasn't in the sample
>> either).
>> In the Oldimon class, I have:
>>
>>     def messageToSend(self, message):
>>         self.sendMessage(message)
>>         # Re-arm the deferred
>>         self.factory.deferred[self.line] = defer.Deferred()
>>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>>
>>
>> On Mar 2, 2013 9:50 AM, "Benjamin BERTRAND" <beenje at gmail.com> wrote:
>>
>>>
>>> Le 2 mars 2013 ? 04:34, exarkun at twistedmatrix.com a ?crit :
>>>
>>> > On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
>>> >> Thanks for the answer!
>>> >>
>>> >> I was hoping to avoid having to put something like AMP in place,
>>> >> because it looked a bit overkill for my case.
>>> >> I think I actually found a way :-)
>>> >
>>> > Unfortunately, it looks like the code that you shared will only work
>>> > accidentally (if at all).  You cannot use Twisted APIs except in the
>>> > reactor thread.  You will at least need to add in some code to send
>>> data
>>> > back to the reactor thread before you use Twisted APIs (such as
>>> > `Deferred.callback`).
>>>
>>>
>>> In run_pcap, I call reactor.callFromThread(callback, x25_data, line_id).
>>> See below.
>>> That seems to work with the tests I did.
>>> Am I missing something?
>>>
>>> /Benjamin
>>>
>>> def run_pcap(device, pcap_filter, callback):
>>>
>>>     def analyse_packet(hdr, data):
>>>         # check the data
>>>         reactor.callFromThread(callback, x25_data, line_id)
>>>
>>>     p = pcapy.open_live(device, 65535, 1, 100)
>>>     p.setfilter(pcap_filter)
>>>     p.loop(-1, analyse_packet)
>>>
>>>
>>> class Oldimon(Protocol):
>>>
>>>     def __init__(self, factory):
>>>         self.factory = factory
>>>         self.line = None
>>>
>>>     def connectionMade(self):
>>>         # Check the server port to get the line
>>>         # associated to this protocol
>>>         port = self.transport.getHost().port
>>>         self.line = LINES_PORT[port]
>>>         # Add the callback for this line
>>>         self.factory.deferred[self.line] = defer.Deferred()
>>>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>>>
>>>
>>> class OldimonFactory(ServerFactory):
>>>
>>>     def __init__(self, device, pcap_filter):
>>>         # pcapDataReceived callback is called everytime a message
>>>         # is received
>>>         reactor.callInThread(run_pcap, device, pcap_filter,
>>> self.pcapDataReceived)
>>>         # Dict with a deferred for each line
>>>         self.deferred = dict(zip(LINES_PORT.values(), [None] *
>>> len(LINES_PORT)))
>>>
>>>     def buildProtocol(self, addr):
>>>         return Oldimon(self)
>>>
>>>     def pcapDataReceived(self, data, line):
>>>         if self.deferred[line] is not None:
>>>             # Fire the callback for line
>>>             d, self.deferred[line] = self.deferred[line], None
>>>             d.callback(data)
>>>
>>> oldimon_factory = OldimonFactory(device, pcap_filter)
>>> for port in LINES_PORT.keys():
>>>     reactor.listenTCP(port, oldimon_factory)
>>> reactor.run()
>>>
>>>
>>> >
>>> > Jean-Paul
>>> >
>>> > _______________________________________________
>>> > Twisted-Python mailing list
>>> > Twisted-Python at twistedmatrix.com
>>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> cheers
> lvh
>  _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130302/daee8152/attachment.htm 

From beenje at gmail.com  Sat Mar  2 10:16:11 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sat, 2 Mar 2013 16:16:11 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CAE_Hg6ZkRvU8ra14hpq=h5w_j+pHs6r8HiecqrgkaYLzB0iTaA@mail.gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
	<CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
	<4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>
	<CAE_Hg6YWHzJQC6Rp5JE+iV-LEbufrwG3XMsg0JJBGd-pMQ0kgQ@mail.gmail.com>
	<4A456C6A-558E-4F4C-AFBC-F51349BDA864@gmail.com>
	<CAE_Hg6ZkRvU8ra14hpq=h5w_j+pHs6r8HiecqrgkaYLzB0iTaA@mail.gmail.com>
Message-ID: <86323243-22D5-4976-B2A6-7182F4016C9F@gmail.com>


Le 2 mars 2013 ? 15:33, Laurens Van Houtven <_ at lvh.cc> a ?crit :

> I'm guessing that this is another question that will be solved as soon as I see the code (perhaps you should put all your code up somewhere); but all I do know is that all Deferreds buy you is an abstraction for organizing callbacks; it's not a dispatch mechanism (and if you're using it as one now, you do have dispatch logic, it just lives somewhere else).

The dispatch is done in the pcapDataReceived method (in the ServerFactory) thanks to the dictionary of deferred (using the line id as key).
And each line is associated to a server on a specific port.
It's maybe a bit strange, but does what I want.

Here is the code if you are interested: http://pastebin.com/VeQgQ85z
Unfortunately, I can't give any data to test it (I only have live data that I don't think I can share)...


> 
> 
> On Sat, Mar 2, 2013 at 3:25 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:
> 
> Le 2 mars 2013 ? 14:53, Laurens Van Houtven <_ at lvh.cc> a ?crit :
> 
>> Ah, but that too appears to be missing in the original code ;-)
>> 
>> The stuff you're doing with deferreds there seems a bit strange. In your example, why not just call sendMessage when you get the packet?
> 
> If I had only one server yes.
> But the thing is I have to send the message to a different server depending on the line id.
> That was my initial problem.
> I don't see how I could call the sendMessage method corresponding to a specific server directly.
> Or?
> 
>> 
>> 
>> On Sat, Mar 2, 2013 at 2:28 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:
>> 
>> Le 2 mars 2013 ? 10:08, Laurens Van Houtven <_ at lvh.cc> a ?crit :
>> 
>>> Yes, that looks okay, but that wasn't in your original sample ;-)
>>> 
>>> 
>> 
>> Yep, sorry about that.
>> I was more focused on the ServerFactory and Protocol.
>> The pcap in a thread comes from the link I mentioned in my first post: http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
>> But I know, it's better to put everything in one post. People shouldn't have to click links.
>> 
>>> I'm on my phone at the moment which isn't great for code review, but it looks like you only fire one deferred per line?
>>> 
>>> 
>> 
>> There is a specific deferred by line.
>> I re-arm it in the messageToSend method (that wasn't in the sample either).
>> In the Oldimon class, I have:
>> 
>>     def messageToSend(self, message):
>>         self.sendMessage(message)
>>         # Re-arm the deferred
>>         self.factory.deferred[self.line] = defer.Deferred()
>>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>> 
>> 
>>> On Mar 2, 2013 9:50 AM, "Benjamin BERTRAND" <beenje at gmail.com> wrote:
>>> 
>>> Le 2 mars 2013 ? 04:34, exarkun at twistedmatrix.com a ?crit :
>>> 
>>> > On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
>>> >> Thanks for the answer!
>>> >>
>>> >> I was hoping to avoid having to put something like AMP in place,
>>> >> because it looked a bit overkill for my case.
>>> >> I think I actually found a way :-)
>>> >
>>> > Unfortunately, it looks like the code that you shared will only work
>>> > accidentally (if at all).  You cannot use Twisted APIs except in the
>>> > reactor thread.  You will at least need to add in some code to send data
>>> > back to the reactor thread before you use Twisted APIs (such as
>>> > `Deferred.callback`).
>>> 
>>> 
>>> In run_pcap, I call reactor.callFromThread(callback, x25_data, line_id). See below.
>>> That seems to work with the tests I did.
>>> Am I missing something?
>>> 
>>> /Benjamin
>>> 
>>> def run_pcap(device, pcap_filter, callback):
>>> 
>>>     def analyse_packet(hdr, data):
>>>         # check the data
>>>         reactor.callFromThread(callback, x25_data, line_id)
>>> 
>>>     p = pcapy.open_live(device, 65535, 1, 100)
>>>     p.setfilter(pcap_filter)
>>>     p.loop(-1, analyse_packet)
>>> 
>>> 
>>> class Oldimon(Protocol):
>>> 
>>>     def __init__(self, factory):
>>>         self.factory = factory
>>>         self.line = None
>>> 
>>>     def connectionMade(self):
>>>         # Check the server port to get the line
>>>         # associated to this protocol
>>>         port = self.transport.getHost().port
>>>         self.line = LINES_PORT[port]
>>>         # Add the callback for this line
>>>         self.factory.deferred[self.line] = defer.Deferred()
>>>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>>> 
>>> 
>>> class OldimonFactory(ServerFactory):
>>> 
>>>     def __init__(self, device, pcap_filter):
>>>         # pcapDataReceived callback is called everytime a message
>>>         # is received
>>>         reactor.callInThread(run_pcap, device, pcap_filter, self.pcapDataReceived)
>>>         # Dict with a deferred for each line
>>>         self.deferred = dict(zip(LINES_PORT.values(), [None] * len(LINES_PORT)))
>>> 
>>>     def buildProtocol(self, addr):
>>>         return Oldimon(self)
>>> 
>>>     def pcapDataReceived(self, data, line):
>>>         if self.deferred[line] is not None:
>>>             # Fire the callback for line
>>>             d, self.deferred[line] = self.deferred[line], None
>>>             d.callback(data)
>>> 
>>> oldimon_factory = OldimonFactory(device, pcap_filter)
>>> for port in LINES_PORT.keys():
>>>     reactor.listenTCP(port, oldimon_factory)
>>> reactor.run()
>>> 
>>> 
>>> >
>>> > Jean-Paul
>>> >
>>> > _______________________________________________
>>> > Twisted-Python mailing list
>>> > Twisted-Python at twistedmatrix.com
>>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>> 
>>> 
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
>> 
>> 
>> -- 
>> cheers
>> lvh
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> 
> -- 
> cheers
> lvh
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130302/013c4f74/attachment-0001.htm 

From mithrandi at mithrandi.net  Sat Mar  2 10:24:08 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 2 Mar 2013 17:24:08 +0200
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <513202C8.6070400@imperial.ac.uk>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
Message-ID: <CAMcKhMQOSiDsqa5nRZrR41NYCzm1mbPsccC6S2-Cs49zbYP+9Q@mail.gmail.com>

On Sat, Mar 2, 2013 at 3:46 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> AMP would be somewhat more attractive (to me) if it were possible to run
> with the IDL just on the "server" (i.e. callee); this would achieve the
> goal of protocol-level sanity checking, without the cost of having to
> distribute the IDL to the clients. Presumably it would be possible to
> implement this now - have an AMP discovery command that dynamically
> builds the client-side IDLs. But there's no incentive for me to do that.

I don't really understand how this is any easier with PB than with
AMP, though. With AMP, you "just" need the same command definitions on
both sides. With PB, you need the exact same Python code versions for
every class you are sending over the wire; if achieving this is not a
problem, then why is it problematic to get the same AMP command
definitions on both sides?

> You don't need to do a TCP handshake for every request in any of those
> protocols either. Long-lived TCP/HTTP sessions are quite common, though
> not universal.

You don't quite have to do a TCP handshake for every request you want
to send over an HTTP channel, but there are still some problems.
Connection keep-alive means you can send another request after you
have received a response, without reconnecting; pipelining means you
can send another request right away, but you still won't get the
response until after you receive the first response. In addition,
there are various error handling situations where you are basically
forced to close the connection and open a new one. By contrast, an AMP
connection can have any number of AMP request/response exchanges in
flight at one time, in either direction; the closest thing to this in
HTTP-land is SPDY's connection multiplexing, but that's still
asymmetric (client makes requests to the server, server cannot make
requests to the client, so you need to do some kind of long polling /
inversion of control to simulate this).
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From p.mayers at imperial.ac.uk  Sat Mar  2 11:36:15 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 02 Mar 2013 16:36:15 +0000
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CAMcKhMQOSiDsqa5nRZrR41NYCzm1mbPsccC6S2-Cs49zbYP+9Q@mail.gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
	<CAMcKhMQOSiDsqa5nRZrR41NYCzm1mbPsccC6S2-Cs49zbYP+9Q@mail.gmail.com>
Message-ID: <51322A7F.5010102@imperial.ac.uk>

On 03/02/2013 03:24 PM, Tristan Seligmann wrote:

> I don't really understand how this is any easier with PB than with
> AMP, though. With AMP, you "just" need the same command definitions on
> both sides. With PB, you need the exact same Python code versions for
> every class you are sending over the wire;

I don't use PB like that. I only ever send simple data structures made 
of builtin types (int, str, list, dict).

> You don't quite have to do a TCP handshake for every request you want
> to send over an HTTP channel, but there are still some problems.

You're not telling me anything I don't already know.

My point is that, for the use-cases *I* have, those limitations have not 
proven to be a problem, so the effort

> asymmetric (client makes requests to the server, server cannot make
> requests to the client, so you need to do some kind of long polling /
> inversion of control to simulate this).

Yes.


From p.mayers at imperial.ac.uk  Sat Mar  2 11:39:07 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 02 Mar 2013 16:39:07 +0000
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <51322A7F.5010102@imperial.ac.uk>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
	<CAMcKhMQOSiDsqa5nRZrR41NYCzm1mbPsccC6S2-Cs49zbYP+9Q@mail.gmail.com>
	<51322A7F.5010102@imperial.ac.uk>
Message-ID: <51322B2B.2010802@imperial.ac.uk>

On 03/02/2013 04:36 PM, Phil Mayers wrote:

> My point is that, for the use-cases *I* have, those limitations have not
> proven to be a problem, so the effort

Sorry, should have been:

...so the effort of deploying a protocol which avoids those limitations 
is not warranted.


From mithrandi at mithrandi.net  Sat Mar  2 12:25:32 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 2 Mar 2013 19:25:32 +0200
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <51322A7F.5010102@imperial.ac.uk>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
	<CAMcKhMQOSiDsqa5nRZrR41NYCzm1mbPsccC6S2-Cs49zbYP+9Q@mail.gmail.com>
	<51322A7F.5010102@imperial.ac.uk>
Message-ID: <CAMcKhMRDhoxr29uJSAk1YFRtSCkZMt3jfu=T7xfByc4SAEWcQw@mail.gmail.com>

On Sat, Mar 2, 2013 at 6:36 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 03/02/2013 03:24 PM, Tristan Seligmann wrote:
>
>> I don't really understand how this is any easier with PB than with
>> AMP, though. With AMP, you "just" need the same command definitions on
>> both sides. With PB, you need the exact same Python code versions for
>> every class you are sending over the wire;
>
> I don't use PB like that. I only ever send simple data structures made
> of builtin types (int, str, list, dict).

Interesting; I guess that's obvious in retrospect but I hadn't thought
of using PB like that, and I suppose it's not possible to use AMP like
that.

>> You don't quite have to do a TCP handshake for every request you want
>> to send over an HTTP channel, but there are still some problems.
>
> You're not telling me anything I don't already know.
>
> My point is that, for the use-cases *I* have, those limitations have not
> proven to be a problem, so the effort of deploying a protocol which avoids
> those limitations is not warranted.

Sure, I didn't mean to imply otherwise, just wanted to clarify for the
purposes of the discussion. It sounds like your analysis is sound for
the use cases you're concerned with, I don't have any objection to
that.
--
mithrandi, i Ainil en-Balandor, a faer Ambar


From tom.prince at ualberta.net  Sat Mar  2 13:12:43 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 02 Mar 2013 11:12:43 -0700
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <86323243-22D5-4976-B2A6-7182F4016C9F@gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
	<CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
	<4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>
	<CAE_Hg6YWHzJQC6Rp5JE+iV-LEbufrwG3XMsg0JJBGd-pMQ0kgQ@mail.gmail.com>
	<4A456C6A-558E-4F4C-AFBC-F51349BDA864@gmail.com>
	<CAE_Hg6ZkRvU8ra14hpq=h5w_j+pHs6r8HiecqrgkaYLzB0iTaA@mail.gmail.com>
	<86323243-22D5-4976-B2A6-7182F4016C9F@gmail.com>
Message-ID: <874ngtvffo.fsf@hermes.hocat.ca>

Benjamin BERTRAND <beenje at gmail.com> writes:

> Le 2 mars 2013 ? 15:33, Laurens Van Houtven <_ at lvh.cc> a ?crit :
>
>> I'm guessing that this is another question that will be solved as
>> soon as I see the code (perhaps you should put all your code up
>> somewhere); but all I do know is that all Deferreds buy you is an
>> abstraction for organizing callbacks; it's not a dispatch mechanism
>> (and if you're using it as one now, you do have dispatch logic, it
>> just lives somewhere else).
>
> The dispatch is done in the pcapDataReceived method (in the
> ServerFactory) thanks to the dictionary of deferred (using the line id
> as key).  And each line is associated to a server on a specific port.

Instead sticking a deferred in that dictionary, you could just stick the
`Oldimon` protocol instance, or the bound method (i.e. `self.sendMessage`)
in that dictionary. In which case `messageToSend` becomes obsolete,
since you don't need to rearm it each time.

  Tom


From glyph at twistedmatrix.com  Sat Mar  2 14:58:58 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 2 Mar 2013 11:58:58 -0800
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <513202C8.6070400@imperial.ac.uk>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
Message-ID: <0C17FEDD-0B88-45C8-9BDA-41F3ED8846B2@twistedmatrix.com>


On Mar 2, 2013, at 5:46 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> You seemed curious why someone wouldn't use AMP. Personally I have two 
> common use-cases:
> 
>  1. Communicating between two trusted Twisted processes, for which PB 
> is good enough.

There are two reasons that someone might want to consider AMP in this case.  I am not necessarily saying you would want to consider AMP here - you seem to be pretty happy with your decision and I'm not saying it's wrong.  I even gave some reasons why PB would be a better idea sometimes.

One is that it makes it a bit easier to replace one end of the wire with something that isn't Twisted - or at least, preserve the plausible deniability that you might, which can make it more politically palatable to deploy Twisted in the first place :).  Granted, "use PyPy" is increasingly a better argument for the sorts of people who would want this assurance - performance nuts - than "you could re-implement in another language later".  Still, if there are other reasons, or you are in an environment where another language is popular, while PB implementations for other languages do exist, and I have deployed polyglot PB clusters, it adds a surprising dimension of additional complexity.  Deploying a polyglot AMP system is a breeze, even if you have to implement AMP from scratch for the other language in order to do it ;).

Another reason is that it makes versioning the protocol easier.  With PB, it's very easy to build a protocol that mirrors your application's internal state, and expose implementation details accidentally, which then have to be painstakingly emulated when you roll out a new version.  This isn't much of a concern if your protocol is pretty stable, and/or your application upgrades are synchronized.

Like you said though: writing up all those message format declarations is not zero-cost.  It's certainly much quicker to get a basic PB cluster up and running since you can just toss a couple of remote_ declarations in and be off to the races.

There is a good reason Twisted still ships both and we have no plans to ever get rid of PB :).

>  2. Communicating with a semi-trusted third party process, for which a 
> RESTful interface or XML/JSON RPCs are *available* and sufficiently 
> secure and capable for my needs.

For this one, obviously, XML or JSON-RPC is the right choice.  I mean, heck, 90% of Twisted is implementations of messy, arguably bad protocols (IMAP?  POP?  **FTP?**) which you probably shouldn't use, except you have to because you want to talk to a system that uses them :).

> Obviously other people will have radically different needs, but for me, 
> AMP adds little.

Sure.  It might not be for everybody.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130302/c44b3f47/attachment.htm 

From _ at lvh.cc  Sat Mar  2 15:34:23 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 2 Mar 2013 21:34:23 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <0C17FEDD-0B88-45C8-9BDA-41F3ED8846B2@twistedmatrix.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
	<0C17FEDD-0B88-45C8-9BDA-41F3ED8846B2@twistedmatrix.com>
Message-ID: <CAE_Hg6aPEXLU=nfKyXWcTcSXjpjWW_gz-5iAQnsaFn6nT2S7dA@mail.gmail.com>

Hey Glyph,

As usual, I agree with most of what you have to say, but...

On Sat, Mar 2, 2013 at 8:58 PM, Glyph <glyph at twistedmatrix.com> wrote:

> Deploying a polyglot AMP system is a breeze, even if you have to implement
> AMP from scratch for the other language in order to do it ;).
>

Could you help me write an AMP implementation in Javascript? It's easy,
right? ;-)


> -glyph
>

-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130302/7f53c0a9/attachment.htm 

From beenje at gmail.com  Sat Mar  2 15:58:14 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sat, 2 Mar 2013 21:58:14 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <874ngtvffo.fsf@hermes.hocat.ca>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
	<CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
	<4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>
	<CAE_Hg6YWHzJQC6Rp5JE+iV-LEbufrwG3XMsg0JJBGd-pMQ0kgQ@mail.gmail.com>
	<4A456C6A-558E-4F4C-AFBC-F51349BDA864@gmail.com>
	<CAE_Hg6ZkRvU8ra14hpq=h5w_j+pHs6r8HiecqrgkaYLzB0iTaA@mail.gmail.com>
	<86323243-22D5-4976-B2A6-7182F4016C9F@gmail.com>
	<874ngtvffo.fsf@hermes.hocat.ca>
Message-ID: <1991760E-D3BC-4C92-8D09-955B2C5CDE52@gmail.com>


Le 2 mars 2013 ? 19:12, Tom Prince <tom.prince at ualberta.net> a ?crit :

> Benjamin BERTRAND <beenje at gmail.com> writes:
> 
>> Le 2 mars 2013 ? 15:33, Laurens Van Houtven <_ at lvh.cc> a ?crit :
>> 
>>> I'm guessing that this is another question that will be solved as
>>> soon as I see the code (perhaps you should put all your code up
>>> somewhere); but all I do know is that all Deferreds buy you is an
>>> abstraction for organizing callbacks; it's not a dispatch mechanism
>>> (and if you're using it as one now, you do have dispatch logic, it
>>> just lives somewhere else).
>> 
>> The dispatch is done in the pcapDataReceived method (in the
>> ServerFactory) thanks to the dictionary of deferred (using the line id
>> as key).  And each line is associated to a server on a specific port.
> 
> Instead sticking a deferred in that dictionary, you could just stick the
> `Oldimon` protocol instance, or the bound method (i.e. `self.sendMessage`)
> in that dictionary. In which case `messageToSend` becomes obsolete,
> since you don't need to rearm it each time.


Good point!
I guess I should try to think more "Python" before trying to think "Twisted" :-)

Thanks

Benjamin


> 
>  Tom



From glyph at twistedmatrix.com  Sat Mar  2 16:58:48 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 2 Mar 2013 13:58:48 -0800
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CAE_Hg6aPEXLU=nfKyXWcTcSXjpjWW_gz-5iAQnsaFn6nT2S7dA@mail.gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
	<0C17FEDD-0B88-45C8-9BDA-41F3ED8846B2@twistedmatrix.com>
	<CAE_Hg6aPEXLU=nfKyXWcTcSXjpjWW_gz-5iAQnsaFn6nT2S7dA@mail.gmail.com>
Message-ID: <3DF4B8F4-EFC2-41AC-8FFC-12CA5C78D012@twistedmatrix.com>


On Mar 2, 2013, at 12:34 PM, Laurens Van Houtven <_ at lvh.cc> wrote:

> Hey Glyph,
> 
> As usual, I agree with most of what you have to say, but...
> 
> On Sat, Mar 2, 2013 at 8:58 PM, Glyph <glyph at twistedmatrix.com> wrote:
> Deploying a polyglot AMP system is a breeze, even if you have to implement AMP from scratch for the other language in order to do it ;).
> 
> Could you help me write an AMP implementation in Javascript? It's easy, right? ;-)

No, not me.

But somebody can: <https://github.com/cyli/node-amp>.

-glyph



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130302/e8d8e036/attachment.htm 

From mithrandi at mithrandi.net  Sat Mar  2 17:06:00 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 3 Mar 2013 00:06:00 +0200
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CAE_Hg6aPEXLU=nfKyXWcTcSXjpjWW_gz-5iAQnsaFn6nT2S7dA@mail.gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
	<0C17FEDD-0B88-45C8-9BDA-41F3ED8846B2@twistedmatrix.com>
	<CAE_Hg6aPEXLU=nfKyXWcTcSXjpjWW_gz-5iAQnsaFn6nT2S7dA@mail.gmail.com>
Message-ID: <CAMcKhMRCpLwFzONHsOSkgEf7ej0m6wHoOZRzrEYjda_JW+1_iA@mail.gmail.com>

On Sat, Mar 2, 2013 at 10:34 PM, Laurens Van Houtven <_ at lvh.cc> wrote:
> Could you help me write an AMP implementation in Javascript? It's easy,
> right? ;-)

It can't be harder than writing a PB implementation in JavaScript ;)
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From exarkun at twistedmatrix.com  Sun Mar  3 00:05:31 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 03 Mar 2013 05:05:31 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1362287131.47.1539899163@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130303/0a717679/attachment.htm 

From matusis at yahoo.com  Sun Mar  3 00:21:57 2013
From: matusis at yahoo.com (Alec Matusis)
Date: Sat, 2 Mar 2013 21:21:57 -0800
Subject: [Twisted-Python] Epoll error after upgrading from 10.0 to 12.3
Message-ID: <069d01ce17cf$070377e0$150a67a0$@com>

I had 60 busy tcp servers that ran on Python 2.6/Twisted 10.0 (or Twisted
9.0) for over two years with not problems. After I upgraded to Twisted
12.3/Python 2.7, I started getting the errors below (no application code
changes). It took about two days for the first error to appear on a busy
server under heavy load:

[twisted.internet.protocol.ServerFactory] Unhandled Error
        Traceback (most recent call last):
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/python/lo
g.py", line 73, in callWithCon
text
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/python/co
ntext.py", line 118, in callWi
thContext
            return self.currentContext().callWithContext(ctx, func, *args,
**kw)
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/python/co
ntext.py", line 81, in callWit
hContext
            return func(*args,**kw)
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
posixbase.py", line 614, in _d
oReadOrWrite
            why = selectable.doRead()
        --- <exception caught here> ---
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
tcp.py", line 1069, in doRead
            transport = self.transport(skt, protocol, addr, self, s,
self.reactor)
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
tcp.py", line 786, in __init__
            self.startReading()
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
abstract.py", line 429, in sta
rtReading
            self.reactor.addReader(self)
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
epollreactor.py", line 256, in
 addReader
            _epoll.EPOLLIN, _epoll.EPOLLOUT)
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
epollreactor.py", line 240, in
 _add
            self._poller.modify(fd, flags)
        exceptions.IOError: [Errno 2] No such file or directory


After the error occurs, the server usually locks up and does not accept new
connections. One server self-recovered after these errors after 30min
outage, and started accepting new connections.
Apparently I am not the ony one who has enountered this:
http://stackoverflow.com/questions/12600137/twisted-internet-epollreactor-py
-line-238-in-add

Is there a patch available, or should I roll back to 10.0.0?




From exarkun at twistedmatrix.com  Sun Mar  3 01:06:15 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 03 Mar 2013 06:06:15 -0000
Subject: [Twisted-Python] Epoll error after upgrading from 10.0 to 12.3
In-Reply-To: <069d01ce17cf$070377e0$150a67a0$@com>
References: <069d01ce17cf$070377e0$150a67a0$@com>
Message-ID: <20130303060615.30763.246833639.divmod.xquotient.3@localhost6.localdomain6>

On 05:21 am, matusis at yahoo.com wrote:
>I had 60 busy tcp servers that ran on Python 2.6/Twisted 10.0 (or 
>Twisted
>9.0) for over two years with not problems. After I upgraded to Twisted
>12.3/Python 2.7, I started getting the errors below (no application 
>code
>changes). It took about two days for the first error to appear on a 
>busy
>server under heavy load:
>
>[snip]
>
>After the error occurs, the server usually locks up and does not accept 
>new
>connections. One server self-recovered after these errors after 30min
>outage, and started accepting new connections.
>Apparently I am not the ony one who has enountered this:
>http://stackoverflow.com/questions/12600137/twisted-internet- 
>epollreactor-py
>-line-238-in-add
>
>Is there a patch available, or should I roll back to 10.0.0?

Doesn't look familiar to me.  You should search the bug tracker.  If 
there is a patch (or an svn branch), that's where you'll find it.  If 
you don't find a ticket for the bug, you should report it.  Please be 
sure to include enough information to reproduce the issue if you file a 
new ticket (or as much information as you have, at least).

Jean-Paul


From dynamicgl at gmail.com  Sun Mar  3 01:10:51 2013
From: dynamicgl at gmail.com (Gelin Yan)
Date: Sun, 3 Mar 2013 14:10:51 +0800
Subject: [Twisted-Python] Epoll error after upgrading from 10.0 to 12.3
In-Reply-To: <069d01ce17cf$070377e0$150a67a0$@com>
References: <069d01ce17cf$070377e0$150a67a0$@com>
Message-ID: <CABkOF6RZjnP5wbaYfCApMHrJbfmioQtJs3sbPv5qt1_uJ9Kw4w@mail.gmail.com>

On Sun, Mar 3, 2013 at 1:21 PM, Alec Matusis <matusis at yahoo.com> wrote:

> I had 60 busy tcp servers that ran on Python 2.6/Twisted 10.0 (or Twisted
> 9.0) for over two years with not problems. After I upgraded to Twisted
> 12.3/Python 2.7, I started getting the errors below (no application code
> changes). It took about two days for the first error to appear on a busy
> server under heavy load:
>
> [twisted.internet.protocol.ServerFactory] Unhandled Error
>         Traceback (most recent call last):
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/python/lo
> g.py", line 73, in callWithCon
> text
>             return context.call({ILogContext: newCtx}, func, *args, **kw)
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/python/co
> ntext.py", line 118, in callWi
> thContext
>             return self.currentContext().callWithContext(ctx, func, *args,
> **kw)
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/python/co
> ntext.py", line 81, in callWit
> hContext
>             return func(*args,**kw)
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
> posixbase.py", line 614, in _d
> oReadOrWrite
>             why = selectable.doRead()
>         --- <exception caught here> ---
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
> tcp.py", line 1069, in doRead
>             transport = self.transport(skt, protocol, addr, self, s,
> self.reactor)
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
> tcp.py", line 786, in __init__
>             self.startReading()
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
> abstract.py", line 429, in sta
> rtReading
>             self.reactor.addReader(self)
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
> epollreactor.py", line 256, in
>  addReader
>             _epoll.EPOLLIN, _epoll.EPOLLOUT)
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
> epollreactor.py", line 240, in
>  _add
>             self._poller.modify(fd, flags)
>         exceptions.IOError: [Errno 2] No such file or directory
>
>
> After the error occurs, the server usually locks up and does not accept new
> connections. One server self-recovered after these errors after 30min
> outage, and started accepting new connections.
> Apparently I am not the ony one who has enountered this:
>
> http://stackoverflow.com/questions/12600137/twisted-internet-epollreactor-py
> -line-238-in-add
>
> Is there a patch available, or should I roll back to 10.0.0?
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

Hi All

   I remembered twisted started using python own select.epoll instead of
its own implementation after dropping support for python 2.5. Is it the
reason? A few days ago, there was a post asking a similar question.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130303/b02960c9/attachment.htm 

From akersof at gmail.com  Sun Mar  3 02:52:59 2013
From: akersof at gmail.com (Sofiane Akermoun)
Date: Sun, 3 Mar 2013 08:52:59 +0100
Subject: [Twisted-Python] Error in documentation
Message-ID: <CAN0_x-J1i-F5HrotYhyXntD=U1_totvqFGaGG_dbe31zhZZmfg@mail.gmail.com>

Hello,

It is probably cheap but i came across wrong thing in your official
doc in the part :

http://twistedmatrix.com/documents/current/core/howto/tutorial/library.html

Here we learn how to separate the application code that launches a
finger service from the library code which defines the finger service.

The problem is in the "Easy Configuration" Part.
Between line 7 and line 8 it misses the code f.setServiceParent(s)
Without it the the instantiated object from class
FingerService(service.Service) will be never collected by the service
collection and the startService function in class
FingerService(service.Service) will be never called. (this function is
import it is where we initiate the looping reading of "/etc/users")

There is also an other error at the end of this tutorial it is wrote
"% twisted -ny simple-finger.tac" instead of "%twistd -ny
simple-finger.tac".

regards,

-- 
Sofiane Akermoun
akersof at gmail.com


From saurabh.mahindre at gmail.com  Sun Mar  3 07:26:23 2013
From: saurabh.mahindre at gmail.com (Saurabh Mahindre)
Date: Sun, 3 Mar 2013 17:56:23 +0530
Subject: [Twisted-Python] Need help regarding Gsoc 2013
Message-ID: <CANj+b3P9ceUA=O+fNSHaT5qx6yHRjKDJ4rg6BFAqFAK6WQQ7YQ@mail.gmail.com>

Glyph wrote:

>Would you be interested in implementing this with multiple toolkits (GTK, whatever the best thing is for Windows, and Cocoa, perhaps)?



I have had some experience with Qt Framework, Pyside in particular .It
integrates with QtReactor .It is also multiplatform.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130303/d5516f8c/attachment.htm 

From jessica.mckellar at gmail.com  Sun Mar  3 09:09:43 2013
From: jessica.mckellar at gmail.com (Jessica McKellar)
Date: Sun, 3 Mar 2013 09:09:43 -0500
Subject: [Twisted-Python] Error in documentation
In-Reply-To: <CAN0_x-J1i-F5HrotYhyXntD=U1_totvqFGaGG_dbe31zhZZmfg@mail.gmail.com>
References: <CAN0_x-J1i-F5HrotYhyXntD=U1_totvqFGaGG_dbe31zhZZmfg@mail.gmail.com>
Message-ID: <CAKDZRcg=WqFBCDPyc=mVmuzBD7V=ubTQ6KkiH1gzR6-T=vcUZg@mail.gmail.com>

Hi Sofiane,

> It is probably cheap but i came across wrong thing in your official
> doc in the part :

Thanks for the bug reports!

Can I interest you in opening Trac tickets for each of these? :)

To do that:

1. Create a Trac account at http://twistedmatrix.com/trac/register
2. Create a new ticket for each issue at
https://twistedmatrix.com/trac/newticket

Have you submitted patches to Twisted before? These would be great
first bugs to fix, if you're interested!
https://twistedmatrix.com/trac/wiki/TwistedDevelopment describes how
to get started, and if you have more questions a great place to get
help is in #twisted on the Freenode IRC network:
https://twistedmatrix.com/trac/wiki/TwistedCommunity#Real-TimeChat.

Regards,
-Jessica


From glyph at twistedmatrix.com  Sun Mar  3 20:09:56 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 3 Mar 2013 17:09:56 -0800
Subject: [Twisted-Python] spam comments on valid tickets
Message-ID: <1B70B303-607B-40CF-884B-D31BE4134832@twistedmatrix.com>

A minor administrative issue:

We have a nice "delete ticket" interface for trac admins to delete tickets that are filed as spam.  but, there are some ticket *comments* that are spam, such as on:

<http://tm.tl/2424>
<http://tm.tl/4173>
<http://tm.tl/5697>

Do any of our trac admins know how to delete the comments, and attachments, within these otherwise valid conversations?

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130303/0e76f831/attachment.htm 

From itamar at itamarst.org  Sun Mar  3 20:22:54 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 03 Mar 2013 20:22:54 -0500
Subject: [Twisted-Python] spam comments on valid tickets
In-Reply-To: <1B70B303-607B-40CF-884B-D31BE4134832@twistedmatrix.com>
References: <1B70B303-607B-40CF-884B-D31BE4134832@twistedmatrix.com>
Message-ID: <5133F76E.3090806@itamarst.org>

On 03/03/2013 08:09 PM, Glyph wrote:
> A minor administrative issue:
>
> We have a nice "delete ticket" interface for trac admins to delete 
> tickets that are filed as spam.  but, there are some ticket *comments* 
> that are spam, such as on:
>
>     <http://tm.tl/2424>
>     <http://tm.tl/4173>
>     <http://tm.tl/5697>
>
>
> Do any of our trac admins know how to delete the comments, and 
> attachments, within these otherwise valid conversations?
>
https://twistedmatrix.com/trac/admin/ticket/comments

Unfortunately this results in a trac error...


From matusis at yahoo.com  Sun Mar  3 21:00:18 2013
From: matusis at yahoo.com (Alec Matusis)
Date: Sun, 3 Mar 2013 18:00:18 -0800
Subject: [Twisted-Python] Epoll error after upgrading from 10.0 to 12.3
In-Reply-To: <20130303060615.30763.246833639.divmod.xquotient.3@localhost6.localdomain6>
References: <069d01ce17cf$070377e0$150a67a0$@com>
	<20130303060615.30763.246833639.divmod.xquotient.3@localhost6.localdomain6>
Message-ID: <08bd01ce187c$05e9e8f0$11bdbad0$@com>

> If you don't find a ticket for the bug, you should report it.  Please be
sure to include enough information to reproduce the issue if you file a new
ticket (or as much information as you have, at least).

> Jean-Paul

I filed http://twistedmatrix.com/trac/ticket/6346

It's hard to do any detailed analysis on a live production system, so I do
not know how to reliably reproduce it, except that it spontaneously happened
on two more additional servers last night. strace looks more or less the
same as on a normal server, but given the volume each server has 100s
connections per second) it's hard to parse strace output. I now believe that
after the first error occurs the server remains overall functional and still
accepts new connections, but a growing number of existing connections
becomes affected, and the logs become flooded with this error.

Since this is a production system I have to revert to 10.0.0 now.  


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
exarkun at twistedmatrix.com
Sent: Saturday, March 02, 2013 10:06 PM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] Epoll error after upgrading from 10.0 to 12.3

On 05:21 am, matusis at yahoo.com wrote:
>I had 60 busy tcp servers that ran on Python 2.6/Twisted 10.0 (or 
>Twisted
>9.0) for over two years with not problems. After I upgraded to Twisted 
>12.3/Python 2.7, I started getting the errors below (no application 
>code changes). It took about two days for the first error to appear on 
>a busy server under heavy load:
>
>[snip]
>
>After the error occurs, the server usually locks up and does not accept 
>new connections. One server self-recovered after these errors after 
>30min outage, and started accepting new connections.
>Apparently I am not the ony one who has enountered this:
>http://stackoverflow.com/questions/12600137/twisted-internet-
>epollreactor-py
>-line-238-in-add
>
>Is there a patch available, or should I roll back to 10.0.0?

Doesn't look familiar to me.  You should search the bug tracker.  If there
is a patch (or an svn branch), that's where you'll find it.  If you don't
find a ticket for the bug, you should report it.  Please be sure to include
enough information to reproduce the issue if you file a new ticket (or as
much information as you have, at least).

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Sun Mar  3 21:37:29 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 04 Mar 2013 02:37:29 -0000
Subject: [Twisted-Python] Epoll error after upgrading from 10.0 to 12.3
In-Reply-To: <08bd01ce187c$05e9e8f0$11bdbad0$@com>
References: <069d01ce17cf$070377e0$150a67a0$@com>
	<20130303060615.30763.246833639.divmod.xquotient.3@localhost6.localdomain6>
	<08bd01ce187c$05e9e8f0$11bdbad0$@com>
Message-ID: <20130304023729.32396.87215867.divmod.xquotient.2@localhost6.localdomain6>

On 02:00 am, matusis at yahoo.com wrote:
>>If you don't find a ticket for the bug, you should report it.  Please 
>>be
>sure to include enough information to reproduce the issue if you file a 
>new
>ticket (or as much information as you have, at least).
>>Jean-Paul
>
>I filed http://twistedmatrix.com/trac/ticket/6346
>
>It's hard to do any detailed analysis on a live production system, so I 
>do
>not know how to reliably reproduce it, except that it spontaneously 
>happened
>on two more additional servers last night. strace looks more or less 
>the
>same as on a normal server, but given the volume each server has 100s
>connections per second) it's hard to parse strace output. I now believe 
>that
>after the first error occurs the server remains overall functional and 
>still
>accepts new connections, but a growing number of existing connections
>becomes affected, and the logs become flooded with this error.
>
>Since this is a production system I have to revert to 10.0.0 now.

Do you have or can you set up any kind of staging system and run a 
synthetic load against it?

Jean-Paul


From _ at lvh.cc  Mon Mar  4 10:34:54 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Mon, 4 Mar 2013 16:34:54 +0100
Subject: [Twisted-Python] How do I write AMP Command definitions TTD-edly?
Message-ID: <CAE_Hg6bOAshXfRp4nfeyZs_U9CuWHrHDBL_0ufTkLztYxx1uiQ@mail.gmail.com>

Hi,


I have no issue writing AMP responders TTD-edly, they work pretty much the
way any other code would. However, I did notice that the only way I'd
notice if my Command definitions themselves were broken were if my
functional tests start failing.

It would be nice if I could write unit test driven Command specifications,
as well.

The quickest I could come up with was to call makeArguments/makeResponse
with a few known-good/known-bad dictionaries, and see if it blows up. Is
there a smarter way to do it?

-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130304/d576f986/attachment.htm 

From exarkun at twistedmatrix.com  Mon Mar  4 11:17:44 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 04 Mar 2013 16:17:44 -0000
Subject: [Twisted-Python] How do I write AMP Command definitions
	TTD-edly?
In-Reply-To: <CAE_Hg6bOAshXfRp4nfeyZs_U9CuWHrHDBL_0ufTkLztYxx1uiQ@mail.gmail.com>
References: <CAE_Hg6bOAshXfRp4nfeyZs_U9CuWHrHDBL_0ufTkLztYxx1uiQ@mail.gmail.com>
Message-ID: <20130304161744.9151.828707065.divmod.xquotient.6@localhost6.localdomain6>

On 03:34 pm, _ at lvh.cc wrote:
>Hi,
>
>
>I have no issue writing AMP responders TTD-edly, they work pretty much 
>the
>way any other code would. However, I did notice that the only way I'd
>notice if my Command definitions themselves were broken were if my
>functional tests start failing.

Chris and I wrote all the AMP-using code for game TDD.  See 
game/test/test_network.py in lp:game.

Jean-Paul
>It would be nice if I could write unit test driven Command 
>specifications,
>as well.
>
>The quickest I could come up with was to call 
>makeArguments/makeResponse
>with a few known-good/known-bad dictionaries, and see if it blows up. 
>Is
>there a smarter way to do it?
>
>--
>cheers
>lvh


From glyph at twistedmatrix.com  Mon Mar  4 22:39:38 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Mar 2013 19:39:38 -0800
Subject: [Twisted-Python] Epoll error after upgrading from 10.0 to 12.3
In-Reply-To: <08bd01ce187c$05e9e8f0$11bdbad0$@com>
References: <069d01ce17cf$070377e0$150a67a0$@com>
	<20130303060615.30763.246833639.divmod.xquotient.3@localhost6.localdomain6>
	<08bd01ce187c$05e9e8f0$11bdbad0$@com>
Message-ID: <C1285BC6-AB09-4526-9E8A-138C820FF306@twistedmatrix.com>


On Mar 3, 2013, at 6:00 PM, Alec Matusis <matusis at yahoo.com> wrote:

> Since this is a production system I have to revert to 10.0.0 now.  

If you were able to attempt an upgrade to 12.3.0, would it be possible for you to upgrade more incrementally; 10.1, 10.2, 11.0, until you find the version that introduced the problem that you're having?  It would really help for us to narrow down when this showed up.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130304/bfa9670c/attachment.htm 

From glyph at twistedmatrix.com  Mon Mar  4 22:43:04 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Mar 2013 19:43:04 -0800
Subject: [Twisted-Python] How do I write AMP Command definitions
	TTD-edly?
In-Reply-To: <20130304161744.9151.828707065.divmod.xquotient.6@localhost6.localdomain6>
References: <CAE_Hg6bOAshXfRp4nfeyZs_U9CuWHrHDBL_0ufTkLztYxx1uiQ@mail.gmail.com>
	<20130304161744.9151.828707065.divmod.xquotient.6@localhost6.localdomain6>
Message-ID: <BE64288C-C8A7-4B3F-A798-21EB911004F0@twistedmatrix.com>


On Mar 4, 2013, at 8:17 AM, exarkun at twistedmatrix.com wrote:

> Chris and I wrote all the AMP-using code for game TDD.  See 
> game/test/test_network.py in lp:game.

(That's <http://bazaar.launchpad.net/~game-hackers/game/trunk/view/head:/game/test/test_network.py> for those of you not familiar with launchpad.)

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130304/bc735580/attachment.htm 

From _ at lvh.cc  Tue Mar  5 04:46:58 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Tue, 5 Mar 2013 10:46:58 +0100
Subject: [Twisted-Python] How do I write AMP Command definitions
	TTD-edly?
In-Reply-To: <20130304161744.9151.828707065.divmod.xquotient.6@localhost6.localdomain6>
References: <CAE_Hg6bOAshXfRp4nfeyZs_U9CuWHrHDBL_0ufTkLztYxx1uiQ@mail.gmail.com>
	<20130304161744.9151.828707065.divmod.xquotient.6@localhost6.localdomain6>
Message-ID: <CAE_Hg6YYkNTgM+HkrnRbESD5EVUASWDngxEyv=EBJEO2AY5HWQ@mail.gmail.com>

That looks awesome.

I can't find a license for it. I'm publishing some third-party helpers for
twisted's amp implementation as I need them myself (presumably I'll make a
formal release announcement at the Pycon sprints). Do you mind if I copy
this code? I can't seem to find a license. (txampext is ISC-licensed, which
I assume is congruent to your sensibilities :))


On Mon, Mar 4, 2013 at 5:17 PM, <exarkun at twistedmatrix.com> wrote:

> On 03:34 pm, _ at lvh.cc wrote:
> >Hi,
> >
> >
> >I have no issue writing AMP responders TTD-edly, they work pretty much
> >the
> >way any other code would. However, I did notice that the only way I'd
> >notice if my Command definitions themselves were broken were if my
> >functional tests start failing.
>
> Chris and I wrote all the AMP-using code for game TDD.  See
> game/test/test_network.py in lp:game.
>
> Jean-Paul
> >It would be nice if I could write unit test driven Command
> >specifications,
> >as well.
> >
> >The quickest I could come up with was to call
> >makeArguments/makeResponse
> >with a few known-good/known-bad dictionaries, and see if it blows up.
> >Is
> >there a smarter way to do it?
> >
> >--
> >cheers
> >lvh
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130305/9bc91b2c/attachment.htm 

From glyph at twistedmatrix.com  Tue Mar  5 14:53:00 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 5 Mar 2013 11:53:00 -0800
Subject: [Twisted-Python] regression ticket stuck
Message-ID: <3432C897-1B86-488E-B1EA-C3FA279AE6B3@twistedmatrix.com>

Does the original author, or anyone else, want to deal with the trivial review feedback on this ticket and get it to trunk?  It's blocking an important bugfix release;

<http://twistedmatrix.com/trac/ticket/6245>

-glyph

From therve at free.fr  Wed Mar  6 10:18:49 2013
From: therve at free.fr (=?ISO-8859-1?Q?Thomas_Herv=E9?=)
Date: Wed, 06 Mar 2013 16:18:49 +0100
Subject: [Twisted-Python] First pre-release of Twisted 13.0.0
Message-ID: <51375E59.3060200@free.fr>

Hello fine people of Twisted,

I've the pleasure to announce the first pre-release of Twisted 13.0.0.
This is mostly a bugfix release, but I'd like to highlight the new
"Introduction to Deferreds" document, which will hopefully help all the
Deferred-confused over the world.

Among the 70 tickets closed, we can see:

 * A fix in twisted.web.template where attributes were not quoted
properly, risking HTML injection.

 * Support for unicode domain names in twisted.names SRVConnector and
Name classes, after a 12.3 regression.

 * A workaround for platform limitations when trying to schedule events
far in the future.

You can find the tarballs of the pre-release here:
    http://twistedmatrix.com/~therve/13.0.0pre1/

For more information, see the NEWS file.

Please download the tarballs and test them!

-- 
Thomas


From jml at mumak.net  Wed Mar  6 10:28:40 2013
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 6 Mar 2013 15:28:40 +0000
Subject: [Twisted-Python] First pre-release of Twisted 13.0.0
In-Reply-To: <51375E59.3060200@free.fr>
References: <51375E59.3060200@free.fr>
Message-ID: <CAHZ8tnbugaNYba8W6KQYjj9xWpp3Ke8DbyzN-TgZ7758CquppA@mail.gmail.com>

On 6 March 2013 15:18, Thomas Herv? <therve at free.fr> wrote:

> Hello fine people of Twisted,
>
> I've the pleasure to announce the first pre-release of Twisted 13.0.0.
> This is mostly a bugfix release, but I'd like to highlight the new
> "Introduction to Deferreds" document, which will hopefully help all the
> Deferred-confused over the world.
>
>
>
You are a wonderful, wonderful person, as indeed are the folk who fixed all
those tickets. Thank you all.

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130306/0648b635/attachment.htm 

From exarkun at twistedmatrix.com  Wed Mar  6 10:34:47 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 06 Mar 2013 15:34:47 -0000
Subject: [Twisted-Python] How do I write AMP Command definitions
	TTD-edly?
In-Reply-To: <CAE_Hg6YYkNTgM+HkrnRbESD5EVUASWDngxEyv=EBJEO2AY5HWQ@mail.gmail.com>
References: <CAE_Hg6bOAshXfRp4nfeyZs_U9CuWHrHDBL_0ufTkLztYxx1uiQ@mail.gmail.com>
	<20130304161744.9151.828707065.divmod.xquotient.6@localhost6.localdomain6>
	<CAE_Hg6YYkNTgM+HkrnRbESD5EVUASWDngxEyv=EBJEO2AY5HWQ@mail.gmail.com>
Message-ID: <20130306153447.9151.111445364.divmod.xquotient.20@localhost6.localdomain6>

On 5 Mar, 09:46 am, _ at lvh.cc wrote:
>That looks awesome.
>
>I can't find a license for it.

The code was already MIT licensed.  It's more redundantly so, now.

Jean-Paul

I'm publishing some third-party helpers for
>twisted's amp implementation as I need them myself (presumably I'll 
>make a
>formal release announcement at the Pycon sprints). Do you mind if I 
>copy
>this code? I can't seem to find a license. (txampext is ISC-licensed, 
>which
>I assume is congruent to your sensibilities :))
>
>
>On Mon, Mar 4, 2013 at 5:17 PM, <exarkun at twistedmatrix.com> wrote:
>>On 03:34 pm, _ at lvh.cc wrote:
>> >Hi,
>> >
>> >
>> >I have no issue writing AMP responders TTD-edly, they work pretty 
>>much
>> >the
>> >way any other code would. However, I did notice that the only way I'd
>> >notice if my Command definitions themselves were broken were if my
>> >functional tests start failing.
>>
>>Chris and I wrote all the AMP-using code for game TDD.  See
>>game/test/test_network.py in lp:game.
>>
>>Jean-Paul
>> >It would be nice if I could write unit test driven Command
>> >specifications,
>> >as well.
>> >
>> >The quickest I could come up with was to call
>> >makeArguments/makeResponse
>> >with a few known-good/known-bad dictionaries, and see if it blows up.
>> >Is
>> >there a smarter way to do it?
>> >
>> >--
>> >cheers
>> >lvh
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>--
>cheers
>lvh


From glyph at twistedmatrix.com  Wed Mar  6 18:01:02 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 6 Mar 2013 15:01:02 -0800
Subject: [Twisted-Python] First pre-release of Twisted 13.0.0
In-Reply-To: <CAHZ8tnbugaNYba8W6KQYjj9xWpp3Ke8DbyzN-TgZ7758CquppA@mail.gmail.com>
References: <51375E59.3060200@free.fr>
	<CAHZ8tnbugaNYba8W6KQYjj9xWpp3Ke8DbyzN-TgZ7758CquppA@mail.gmail.com>
Message-ID: <DCBEBA3A-00ED-4FCF-AA65-4E5B4BEF4511@twistedmatrix.com>


On Mar 6, 2013, at 7:28 AM, Jonathan Lange <jml at mumak.net> wrote:

> On 6 March 2013 15:18, Thomas Herv? <therve at free.fr> wrote:
> Hello fine people of Twisted,
> 
> I've the pleasure to announce the first pre-release of Twisted 13.0.0.
> This is mostly a bugfix release, but I'd like to highlight the new
> "Introduction to Deferreds" document, which will hopefully help all the
> Deferred-confused over the world.
> 
> 
> 
> You are a wonderful, wonderful person, as indeed are the folk who fixed all those tickets. Thank you all.

Hear, hear!  Many thanks, Thomas, for keeping the release process grinding along.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130306/af91f31d/attachment.htm 

From _ at lvh.cc  Wed Mar  6 19:38:23 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Thu, 7 Mar 2013 01:38:23 +0100
Subject: [Twisted-Python] How do I write AMP Command definitions
	TTD-edly?
In-Reply-To: <20130306153447.9151.111445364.divmod.xquotient.20@localhost6.localdomain6>
References: <CAE_Hg6bOAshXfRp4nfeyZs_U9CuWHrHDBL_0ufTkLztYxx1uiQ@mail.gmail.com>
	<20130304161744.9151.828707065.divmod.xquotient.6@localhost6.localdomain6>
	<CAE_Hg6YYkNTgM+HkrnRbESD5EVUASWDngxEyv=EBJEO2AY5HWQ@mail.gmail.com>
	<20130306153447.9151.111445364.divmod.xquotient.20@localhost6.localdomain6>
Message-ID: <CAE_Hg6ZwvXmL7J9qe4j+w4J=6G7kSs2yCG9JC7zTdG5vYv_2eg@mail.gmail.com>

Awesome, thanks!
On Mar 6, 2013 5:18 PM, <exarkun at twistedmatrix.com> wrote:

> On 5 Mar, 09:46 am, _ at lvh.cc wrote:
> >That looks awesome.
> >
> >I can't find a license for it.
>
> The code was already MIT licensed.  It's more redundantly so, now.
>
> Jean-Paul
>
> I'm publishing some third-party helpers for
> >twisted's amp implementation as I need them myself (presumably I'll
> >make a
> >formal release announcement at the Pycon sprints). Do you mind if I
> >copy
> >this code? I can't seem to find a license. (txampext is ISC-licensed,
> >which
> >I assume is congruent to your sensibilities :))
> >
> >
> >On Mon, Mar 4, 2013 at 5:17 PM, <exarkun at twistedmatrix.com> wrote:
> >>On 03:34 pm, _ at lvh.cc wrote:
> >> >Hi,
> >> >
> >> >
> >> >I have no issue writing AMP responders TTD-edly, they work pretty
> >>much
> >> >the
> >> >way any other code would. However, I did notice that the only way I'd
> >> >notice if my Command definitions themselves were broken were if my
> >> >functional tests start failing.
> >>
> >>Chris and I wrote all the AMP-using code for game TDD.  See
> >>game/test/test_network.py in lp:game.
> >>
> >>Jean-Paul
> >> >It would be nice if I could write unit test driven Command
> >> >specifications,
> >> >as well.
> >> >
> >> >The quickest I could come up with was to call
> >> >makeArguments/makeResponse
> >> >with a few known-good/known-bad dictionaries, and see if it blows up.
> >> >Is
> >> >there a smarter way to do it?
> >> >
> >> >--
> >> >cheers
> >> >lvh
> >>
> >>_______________________________________________
> >>Twisted-Python mailing list
> >>Twisted-Python at twistedmatrix.com
> >>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
> >
> >--
> >cheers
> >lvh
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130307/c6653246/attachment.htm 

From techtonik at gmail.com  Thu Mar  7 05:32:26 2013
From: techtonik at gmail.com (anatoly techtonik)
Date: Thu, 7 Mar 2013 13:32:26 +0300
Subject: [Twisted-Python] Lost slides with deferred errbacks
Message-ID: <CAPkN8xLVzDcRjxC0KJbDbBbKo=qCa7xHvJVRy=oYBZsBT--YgQ@mail.gmail.com>

Hi,

Some months ago I saw slides about how deffered work in Twisted.
If I remember correctly these there two columns on yellow background,
with pictures on the right, which described how errback processing
propogates and how to handle deferreds.

Does anybody remember them? I looks like color codes for the blocks
on the diagrams were filled bright green and solid bright red square
blocks. I can't find them, does anybody know where I could see them?

Thanks.
-- 
anatoly t.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130307/3fa481da/attachment.htm 

From adi at roiban.ro  Thu Mar  7 05:53:30 2013
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 7 Mar 2013 12:53:30 +0200
Subject: [Twisted-Python] Lost slides with deferred errbacks
In-Reply-To: <CAPkN8xLVzDcRjxC0KJbDbBbKo=qCa7xHvJVRy=oYBZsBT--YgQ@mail.gmail.com>
References: <CAPkN8xLVzDcRjxC0KJbDbBbKo=qCa7xHvJVRy=oYBZsBT--YgQ@mail.gmail.com>
Message-ID: <CAFycZ9d7io5dZAi2kvMvXQ9haiKvsU1e6sf=YGgcjHjiQ=A9OA@mail.gmail.com>

On 7 March 2013 12:32, anatoly techtonik <techtonik at gmail.com> wrote:
> Hi,
>
> Some months ago I saw slides about how deffered work in Twisted.
> If I remember correctly these there two columns on yellow background,
> with pictures on the right, which described how errback processing
> propogates and how to handle deferreds.
>
> Does anybody remember them? I looks like color codes for the blocks
> on the diagrams were filled bright green and solid bright red square
> blocks. I can't find them, does anybody know where I could see them?

Hi,

I don't know about those slides, but I read about errback propagation
from the official docs.

Does this help? http://twistedmatrix.com/documents/12.3.0/core/howto/defer.html

--
Adi


From techtonik at gmail.com  Thu Mar  7 07:04:00 2013
From: techtonik at gmail.com (anatoly techtonik)
Date: Thu, 7 Mar 2013 15:04:00 +0300
Subject: [Twisted-Python] Lost slides with deferred errbacks
In-Reply-To: <CAFycZ9d7io5dZAi2kvMvXQ9haiKvsU1e6sf=YGgcjHjiQ=A9OA@mail.gmail.com>
References: <CAPkN8xLVzDcRjxC0KJbDbBbKo=qCa7xHvJVRy=oYBZsBT--YgQ@mail.gmail.com>
	<CAFycZ9d7io5dZAi2kvMvXQ9haiKvsU1e6sf=YGgcjHjiQ=A9OA@mail.gmail.com>
Message-ID: <CAPkN8xLTzZzftF3EPMuh5GvGShuu0uFaRRgK0NETO6_NC7OCEg@mail.gmail.com>

On Thu, Mar 7, 2013 at 1:53 PM, Adi Roiban <adi at roiban.ro> wrote:

> On 7 March 2013 12:32, anatoly techtonik <techtonik at gmail.com> wrote:
> > Hi,
> >
> > Some months ago I saw slides about how deffered work in Twisted.
> > If I remember correctly these there two columns on yellow background,
> > with pictures on the right, which described how errback processing
> > propogates and how to handle deferreds.
> >
> > Does anybody remember them? I looks like color codes for the blocks
> > on the diagrams were filled bright green and solid bright red square
> > blocks. I can't find them, does anybody know where I could see them?
>
> Hi,
>
> I don't know about those slides, but I read about errback propagation
> from the official docs.
>
> Does this help?
> http://twistedmatrix.com/documents/12.3.0/core/howto/defer.html


I am looking for slides to see if they will be suitable as an exception
example for
Haskel folks. Seems like there are no exceptions in functional languages,
so a
mechanism like errbacks can be a replacement.

The text is good for someone who knows Twisted, but the presentation was
rather
simple for everyone, or at least I've got this impression,
-- 
anatoly t.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130307/e94304a5/attachment.htm 

From techtonik at gmail.com  Thu Mar  7 07:15:11 2013
From: techtonik at gmail.com (anatoly techtonik)
Date: Thu, 7 Mar 2013 15:15:11 +0300
Subject: [Twisted-Python] Lost slides with deferred errbacks
In-Reply-To: <CAFycZ9d7io5dZAi2kvMvXQ9haiKvsU1e6sf=YGgcjHjiQ=A9OA@mail.gmail.com>
References: <CAPkN8xLVzDcRjxC0KJbDbBbKo=qCa7xHvJVRy=oYBZsBT--YgQ@mail.gmail.com>
	<CAFycZ9d7io5dZAi2kvMvXQ9haiKvsU1e6sf=YGgcjHjiQ=A9OA@mail.gmail.com>
Message-ID: <CAPkN8xLrmXkE=SMYzeLquexrO8sY7eHwL7L06UZ3oqagZJy3VA@mail.gmail.com>

On Thu, Mar 7, 2013 at 1:53 PM, Adi Roiban <adi at roiban.ro> wrote:

> On 7 March 2013 12:32, anatoly techtonik <techtonik at gmail.com> wrote:
> > Hi,
> >
> > Some months ago I saw slides about how deffered work in Twisted.
> > If I remember correctly these there two columns on yellow background,
> > with pictures on the right, which described how errback processing
> > propogates and how to handle deferreds.
> >
> > Does anybody remember them? I looks like color codes for the blocks
> > on the diagrams were filled bright green and solid bright red square
> > blocks. I can't find them, does anybody know where I could see them?
>
> Hi,
>
> I don't know about those slides, but I read about errback propagation
> from the official docs.
>
> Does this help?
> http://twistedmatrix.com/documents/12.3.0/core/howto/defer.html


Nevermind. I found it. Need to check if these too match.
http://djmitche.github.com/twisted-intro/

-- 
anatoly t.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130307/1d1df3eb/attachment.htm 

From kevin.horn at gmail.com  Thu Mar  7 12:01:29 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 7 Mar 2013 11:01:29 -0600
Subject: [Twisted-Python] Lore, Sphinx,
 and getting to the finish line (was: re: lore and tickets and other
 stuff)
In-Reply-To: <739CAE65-F29E-4FA8-96BF-A6C1548A9E02@twistedmatrix.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
	<4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
	<CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
	<739CAE65-F29E-4FA8-96BF-A6C1548A9E02@twistedmatrix.com>
Message-ID: <CA+U=zK178dwz6A_+V1cy60rK0O-b3KC01dzjEQkdKj82iXB_sw@mail.gmail.com>

Sorry it's taken me so long to get back to this.  But it's gotten to be a
Looong email.

On Sat, Mar 2, 2013 at 3:14 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 1, 2013, at 9:35 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> That "never-ending" series of Lore source fixes took place over the course
> of a couple of weeks.  Doing things that way was not my idea, though it
> seemed reasonable at the time because  the idea was that we would do the
> cutover at the end of it.
>
>
> Well, let's go to the video tape. Based on this comment -  <
> http://twistedmatrix.com/trac/ticket/4500#comment:12> - these tickets
> were closed over a period ranging from 2010/07 to 2011/03. 6 months isn't
> quite "weeks", but okay I guess it wasn't "never-ending" either :).
>
>
Hmmm.  I recall it as being much shorter.  Probably most of the work took
place it two "spurts" around the beginning and end of that time, and that's
why I remember it that way.  But I'm not interested in digging through a
bunch of old dates to find out for sure.


> (As an aside, lore2sphinx is in no way a "broken pile of regexes".  Not to
> say that it isn't broken in some really significant ways, because it is,
> but it doesn't use regexes at all.  Just sayin'.)
>
>
> Actually yeah, "regex" is just a curse-word here :).  It's the emitter I'm
> complaining about, anyway, not the parser, so deriding it as a "regex" is
> in no way accurate.
>

I figured that was the case, I just wanted to say something so others
reading this didn't get the wrong impression about how lore2sphinx is
implemented.  I mean it's not code I'm very proud of, but it's not _that_
bad :)


<<< snip a bunch of stuff about who said what when, why I thought what I
thought, etc. >>>

It boils down to the fact that a bunch of the conversations happened either
in person or on IRC.  This was mostly because I was in a hurry at the time,
usually because I wanted to do something before additions were made to the
documentation, which was in a somewhat "known" state (as in I knew how it
was going to behave when run through lore2sphinx) at the time.

Also, please elaborate on what you mean  by "do *everything* in one big
> bang.  My intention was never to do anything but get the SphinxBuilder
> working on that branch.  Was there something else you thought I was doing?
>  Was there something else I should (or should not) have been doing?
>
>
> My reasoning goes like this: the ticket for the release tools is still not
> in review, so you must be waiting for something to re-submit it.  It looks
> like you responded to the code, so the only thing I could think you were
> still waiting for would be for the lore sources themselves to be ready.
>
>
It's been long enough that I can't fully recall my reasoning on this.  But
_probably_ I decided that if I finished the release tools ticket, someone
might use it.  Which would be great, except that I think I had decided that
before that actually happened I needed to figure out a way to emit nicer
output from lore2sphinx.  So I left it alone until I had figured out how to
do that.

At least, that _might_ have been part of my thought process.  It really was
ages ago.

[the fixed-up Lore sources] got left alone because of the release tools
> hangup.  Ideally the release tools would have been done before the whole
> lore-source-tweaking process, but they weren't.  I'll admit my frustration
> played a part in this, but so did the deafening silence I got when I asked
> for anyone to comment on the ticket.
>
>
> Where and how did you ask people to comment on the ticket?  I don't recall
> being asked, and I tend to be pretty good about leaving prompts like that
> in my inbox until I've done what was asked.  (Not *perfect*, of course, and
> if you asked a list then there might have been some bystander effect.)  It
> seems like we might have avoided this whole mess if you had just attached
> the 'review' keyword :).
>

On IRC.


>
> My perception has been that I would say "what do we need to do to make
> this happen"?  There would be some hemming and hawing (and at least several
> times long discussions about how documentation didn't really fit the
> regular UQDS process) and a sort of plan would be invented.  I would
> proceed according to the plan as I understood it.  I would then say "OK,
> we're ready"!  And then be told that some other thing not in the plan
> needed to be done.  The cycle would then repeat.
>
>
> The only "cycle" I can either see on the tickets or recall here is where
> the release tools didn't come in to the initial plan.
>

This was the latest of several (3 or 4) according to my
recollection/perception.  It doesn't really matter now.


> No [the need for release automation] was not brought up until well into
> the process. I (sort of) understand the desire for this, but it seems
> pretty weird to be building what is essentially a wrapper for an existing
> tool, along with tests for said wrapper,
>
>
> OK.  I can believe that this did not happen.  One problem is that we (the
> inner-circle old-school Twisted developers) tend to engage in conversations
> about how a thing might be done while at the same time we discuss what must
> be done.  And we also tend to discuss what policy is (or what all or some
> of us believe it *ought to be* in some case, further confusing the issue)
> without making explicit what the *purpose* of that requirement is.
>
> I would ask the community to help us with this by doing a couple of things.
>
> If somebody says "X is policy", always ask for a link to it.  If there is
> a link, it'll help you understand it better.  If there *isn't* a link,
> then the authority telling you it's "policy" might just be remembering that
> it's the way we've done things since forever and of course it's a good
> idea.  There are definitely things that I have thought were in the coding
> standard that are not actually written down anywhere, on more than one
> occasion.
>
> If a meandering discussion is happening - here, on the mailing list, on
> the ticket - never be afraid to break it up and separate out the different
> concerns which are being discussed: what is necessary for compliance with
> our development process, what would be a good idea from a design point of
> view, how the work might be broken up to get through review more
> manageably, what other concerns are in play.
>
> Especially, if you ever see a code review where a reviewer says "I
> think..." without making it clear what you should *do*, you should always
> ask, 'is this a requirement of the review or just some thoughts you have'.
>
>
And when we ask, we should ask on the ticket, and put it back into review,
yes?  Because I think this was the part (or at least _A_ part) I was really
missing here.


> There's also the problem of "I think you should..." being interpreted as
> "You must...".  It is *very* hard to consistently separate design
> feedback from code review, although we try very hard; but, it's hard to
> separate it out when reading it as well.  So one important point to keep in
> mind is that, as the author of a proposed change, outside the things that
> are agreed upon policy consensus, you always have some degree of discretion
> to disagree with a reviewer.  And you should freely do so when submitting
> anything for re-review.  It's best to just do this as quickly as possible,
> so that it gets back to the reviewer without a whole lot of delay, and they
> can respond with either "I still disagree, but you're doing the work, so OK
> go ahead" or "No, you really have to do this, it's required by policy
> document X, here's a link" ;-).
>
>
>>    1. The documentation itself needs to be able to be generated from any
>>    version of trunk.  While one or two formatting snafus are acceptable to be
>>    fixed after the fact, the documentation needs to be in a comprehensible
>>    state in every revision of trunk, which means that in order to land on
>>    trunk, the ReST output.
>>
>> So...you didn't finish that sentence.  I realize you apologized for
> errors at the end of your mail, but I have a feeling you were going to say
> something rather important there...
>
>
> Well yes, that was the point of the apology.  That was a rather important
> thing.  What I was probably going to say was just:
>
> The ReST output needs to be in good enough shape to be generally readable,
> with a manageable number of errors.  But, we need to be able to *verify*
> that it has not too many errors.
>
>
> And I'd already discussed that somewhat above.
>
> Now that I've replied to all of that, let me give you a rundown of what
> I've been thinking and planning, so that you have an idea of where I'm
> coming from.
>
> Here are the various things that I have perceived to be necessary/required
> in order to get the conversion to happen:
>
> a) The conversion process needs to be able to be run concurrently with
> Lore for an extended period of time.  In other words, Lore would be the
> "official" version of the docs, and the Sphinx docs would be built in some
> form of automated fashion until everyone was happy with them and/or ready
> to deprecate/abandon Lore.
>
>
> Your understanding of this requirement is slightly off, I think, although
> possibly the consequences are the same.  As per the difficulties I laid out
> above, about separating the requirements from the strategies for satisfying
> said requirements.
>

I've been told that almost verbatim, several times.  This is basically what
led to the Sphinx buildbot happening.  Perhaps I wasn't clear about what I
meant.


> The thing that we weren't going to tolerate was any message saying that
> people should hold off on writing documentation, even for "a little while"
> while we fixed up the lore conversion, because without a contractual
> obligation for someone to finish this work, there's really no telling how
> long "a little while" would be :).
>

Well, when I originally was pushing it, my plan was for that little while
to be "today" (this was at PyCon during the only day of sprints I was able
to attend), and if it didn't get done, we'd abandon that particular
attempt.  You and exarkun managed to convince me that even this was
probably not a very good idea though.


> Since the whole point of this sphinx conversion is to appeal to
> documentation authors who prefer the ReST format as input (it's definitely
> not to make the docs look nicer, writing a new stylesheet for Lore would
> have taken 1/100th of the effort and nobody has expressed interest in doing
> that), creating a period where things were even *less* appealing to
> documentation authors would defeat the purpose.
>

I actually considered the stylesheet thing, but it was really only a
passing thought.  My personal motivation started with not being able to
find things in the documentation.  So I started looking at the various Lore
tickets to see whether there was something to clean up that would help.
 And a bunch of them seemed to be asking for things that Sphinx already
did.  Sphinx was starting to become a common tool, and I had used it on
several other projects, and found it pleasant to work with.  Also, when I
asked about Lore on IRC, I got a lot of "I'm not sure anyone knows how that
works these days" and "oh man, I wish we didn't have to support that any
more", etc.  So I started looking into how to convert the docs over to use
Sphinx.


> Another possible solution to this problem would be to modify Lore so it
> could process ReST sources, so that we could convert the documentation
> within the repository piecemeal, and start writing any new docs in ReST,
> but still have a coherent whole of documentation produced, eventually
> switching the documentation processor from Lore to Sphinx.
>

This would require someone smarter than me.  Or at least more versed in
formal parsing theory/techniques.  Or something.  And that would be just to
read the docutils sources.  I find them...alien. (though less so that when
I first started looking at them...I'm not sure if they've improved, or I
have)


> Yet another possible solution would be to modify Sphinx, adding a plugin
> to process the Lore sources.
>

This is more reasonable, but still has problems.  Actually the reasonable
thing would be to create a docutils piece to process Lore sources, and then
maybe some Sphinx extensions on top of that.  Or something.  Still, it
might have been doable.  However, I think Lore would have had to be
modified as well, and possibly the Lore format expanded
to accommodate certain constructs that it just doesn't do right now (mostly
I'm thinking of the toctree directive and related stuff).


> As an aside: this is the part of the process which has been so frustrating
> to me, personally.  The two alternate solutions I proposed here (and have
> proposed before) seem far saner and more manageable in terms of effort, to
> me.  But, everyone I have spoken to about docutils and ReST has told me in
> no uncertain terms that they are both a pile of heinous hacks that resist
> any attempt at sensible software-engineering solutions to problems, so we
> need to resort to hackish system-integration stuff like what we've done.
>  This worries me.
>

Ooookaaaaay....I don't know how to respond to that exactly.


> I know that Sphinx's output is well-loved by the Python community, but if
> it's so hard to call into that we can't reasonably modify it to get an XML
> DOM that looks like Lore source to Lore, and it's so hard to plug in to it
> that we can't give it a data structure that it likes from Lore's XML DOM,
> then how the heck is it being maintained?  And if it actually *isn't* that
> bad, then why haven't I managed to find someone that knows its code well
> enough to do one or the other of these things?
>

It would be possible to make Sphinx emit Lore sources, though I'm not sure
what that buys.  You could do this either through a custom Sphinx
"builder", or possibly even just using a custom html template with the html
builder.  But you'd need ReST sources to feed into Sphinx, so...

You could write a docutils "parser" which parses a document and returns a
"nodetree" data structure.  This would get you as far as docutils, but
AFAIK there is no existing way to get Sphinx to use any parser other than
the default ReST one.  You could probably create such a thing, which would
almost certainly involve modifications to Sphinx, though that's not
necessarily a big deal.  It might not even be hard.  I think this would
actually be a lot easier now than when I started down this path, mostly
because docutils seems to have better documentation on the nodes that can
go in the "nodetree" I mentioned above.  Note that I said "seems" because
I'm not sure if it's that docutils documentation has gotten more complete,
or just that I've bounced around in it enough times to find things.  The
Docutils docs have the same problem that the Twisted docs have, which is
that they are nigh un-navigable.  (I also think that the docutils docs
should start using Sphinx, but I'm not sure how well that would go over in
that camp...)

The main problem with creating such a parser, is that Sphinx uses a bunch
of docutils extensions to tie together the disparate documents in your
project, and Lore, like vanilla docutils, doesn't have much of a concept of
being one document among many (at least not from within a document).  For
example, it has things to handle tables of contents, cross document links
(with the ability to link to a document section, rather than a specific
document, so if it gets moved to a different document, the link gets
adjusted), compilation for glossaries and index entries from across the
docs project, etc.  So you'd need to add some stuff to Lore to account for
this (some is already there).  And then we'd have to go through and modify
a bunch of the Lore sources anyway.

Like I said, this looks a lot more feasible now than it did when I first
looked at it, though I'm not sure whether it's me or docutils/Sphinx that's
changed.  Probably some of each.

At any rate, back then it seemed awfully difficult, and less interesting.

Hmmm.  And you'd also need to make some changes to the way Sphinx picks up
files.  And probably some other stuff I haven't thought of.

I have no direct knowledge of any of this stuff, because my main interest
> here is improving the experience of working on Twisted, both for you,
> Kevin, and for the people who will arguably be helped by the use of Sphinx.
>  Maybe I'm completely wrong and Sphinx is beautifully architected and we
> could have done this from day 1.  But I faintly hope that some Docutils and
> Sphinx contributor hears that I said "sphinx is garbage" and makes a fool
> of me by contributing either a lore modification or a sphinx plugin which
> solves this whole problem so we can do the format or tool migration
> incrementally :).
>
> b) Because of a), there needs to be tooling to run lore2sphinx (or
> whatever) on a regular basis.  (This was sort of being done via the
> Sphinx-building buildbot, but in a very ad-hockery sort of way, which was
> brittle, broke a couple of times, and needed to be improved.)
>
>
> Hmm. I wasn't aware of that. But it seems like it's running by a charm now.
>

I think this is because a) exarkun fixed it a couple of times, and b) I
stopped making changes to the lore2sphinx repo (which the buildbot pulls
from).  I'm also referring here to something which is completely
non-obvious to anyone who hasn't actually run lore2sphinx by hand, which is
that the command line tool was fairly terrible in several ways.  This made
it harder to use for development than it should have been.


>
> c) There needs to be release management tooling to build the Sphinx docs
> from ReST into whatever formats we want to publish (HTML and PDF to start,
> maybe others later on)
>
>
> Yup.  (ePub?  PDF is so last-century... :))
>
> d) Convert the Lore sources to better ReST documents without all the
> problems that the current lore2sphinx output has.
>
>
> So, this wasn't *necessary*.  If we had gotten through the release
> automation stuff - and I still don't understand why that's stuck - we could
> have merged it.
>

Well, I decided it was.  Or at least really really desirable.


> I at one time thought this was pretty impractical.  My first attempt at a
> conversion tool tried to use an intermediate object model, but I ran into
> trouble when trying to combine the various objects.  So I abandoned the
> effort and created what became lore2sphinx, which basically just combined a
> bunch of strings.  I then figured out a way of making the intermediate
> object thing work, and that was lore2sphinx-ng.  Then it became convenient
> to split out the intermediate object model from the documetn processing
> code, so I put all of that into a library and that became rstgen.
>
> It seems the saving grace here is that rstgen might be a generally useful
> tool in its own right, with more of a long-term future than lore2sphinx
> would have had.
>

I admit that I have become more interested in the actual problem of
"generating ReST" than I once was.  And I hope that it will become a
generally useful tool.

And probably one of the reasons I have been making such relatively slow
progress on it is is _because_ I'm trying to solve a more general problem
than I once was.  The original lore2sphinx (the one running on the buildbot
now) was very much a minimal-thing-that-could-possibly-work kind of
solution.  It tried to do just enough to get the job done.  It sort of did
get the job done, but I was never very satisfied with it.


> (For anyone who is curious, the lore2sphinx-ng repo is forked off from the
> lore2sphinx repo, primarily because I didn't want to break the Sphinx
> buildbot by making drastic changes.)
>
>
> Have a link?
>

I've posted it a couple of times in this thread, though I can hardly blame
you for either missing it or losing track of it.

original: https://bitbucket.org/khorn/lore2sphinx
extra-crispy: https://bitbucket.org/khorn/lore2sphinx-ng


>
> Here's what my plan was prior to this whole discussion getting started
> again.
>
> 1) Finish rstgen, where "finished" in this instance is defined as "is
> capable of generating all the vanilla docutils and sphinx-specific ReST
> elements that we need for converting the
> Twisted documentation.
>
>
> Sounds like a worthy goal, although I don't think this is necessarily
> required.  Have you been working on it for the last 2 years?  Do you have
> any idea when it might be done?  It might be worthwhile to write a
> *smaller* .
>

I started on rstgen a bit more than a year ago.  I was hung up on the
problem of how to combine various parts of a document for a while without
having the crazy space-handling issues.  And also I've been trying to come
up with a relatively friendly API, and enough generality that it will end
up useful outside of the lore2sphinx context.

I really started on l2s-ng last July during "Julython".  I've been working
on it in fits and starts a few times since then.


>
> 2) Finish lore2sphinx-ng (which would probably have ended with merging it
> back into the lore2sphinx repo), where "finished" means that it would be
> capable of processing all the XHTML Lore tags that were defined in the Lore
> documentation and used in the Twisted documentation, and generating a tree
> of rstgen elements, which could then be rendered into ReST.
>
>
> Cool.
>
> While this would be handy, especially for people working on documentation
> branches, it's not necessarily necessary.
>
> (this would also serve to satisfy b) above, as the CLI in lore2sphinx-ng
> is less...well, let's just call it broken than lore2sphinx's was/is.)
>
>
> OK.
>
> 3) Go back and finish SphinxBuilder (release tooling for building a sphinx
> project, which is basically a wrapper for sphinx-build, plus some vague
> "version feature").
>
>
> This is really the crux; this is the thing you should work on first, I
> think, even if you're going to keep working on lore2sphinx-ng.  Basically
> the only reason that I was keen to get the lore to sphinx conversion
> improved in the first place was that creating this tool seemed to be
> dragging on for quite a while after the "chunk tickets" were done.  But
> now, this tool is almost done, and we could re-do the lore-source review if
> you wanted to do that.  The current lore2sphinx might well be good enough
> to just go with, especially if the next-generation version is going to take
> another six months to finish.
>

I'll take a look at this again soonish (a week?  this month? don't know.).
 Probably it's a matter of:

- merge forward (it has been a while)
- figure out how the other tools guess/determine the Twisted version in the
checkout, and make SphinxBuilder do that.
- get it reveiewed
- commit

But I'll have to remember how to use combinator again (which will be much
easier now that the combinator "docs" are on the Twisted wiki...thanks to
whomever did that!)

Yes, I could probably use Bazaar, but so far every time I've tried that,
I've ended up spending waaaaaay too much time just on the VCS.  I guess I
have some kind of mental block with bzr.  I'll get over it someday I
suppose.


>
> 4) Get someone to use something less hackish than what's currently
> building the Sphinx docs on the buildbot, and preferably in such a way that
> the results of those builds could be published somewhere and have
> persistent links.  Currently the results of what the Sphinx buildbot does
> are stored for a time, and then go away, so you'll see links to build
> results in some trac tickets that go nowhere, which is decidedly unhelpful.
>  My plan was that we'd set up something where the Sphinx docs would get
> generated and published someplace for every buildbot build so that we could
> always have the current results for the lore to sphinx conversion for the
> tip of each branch.  I have no idea whether this is actually feasible or
> practical, but it seemed like it would be useful.
>
>
> OK, *this* sounds like really unnecessary turd-polishing ;-).  This
> builder is an interim step; the more interesting step is the builder that
> just builds the sphinx docs, in the same way that the current builder
> builds the lore docs.  Furthermore, it seems to be working fine.  Build
> results links that go nowhere are a known problem with buildbot, since it
> does eventually lose most history, and this type of history takes up a fair
> bit of disk space.
>

Well, it was mostly motivated by the fact that we were doing a lot of
linking to build results that would then cease to exist for a while, and it
really annoyed me.  It doesn't seem nearly as "necessary" to me now as it
once did.


>
> 5) Proceed with Sphinx docs being built from lore sources, making tweaks
> as necessary to lore2sphinx(ng) for as long as it took for the generated
> docs to be good enough to justify switching to Sphinx entirely.
> 6) Switch to Sphinx entirely.
>
> I really wasn't planning on trying to get people excited about switching
> to Sphinx again until 1) and 2) were at least "mostly" done (for certain
> values of done) and I had gone back to finish 3).
>
> So.  I guess at this point the question is whether to try and go with
> what's there (lore2sphinx) or finish up the "new stuff" (lore2sphinx-ng +
> rstgen).  I think 3-6 in my above plan need to happen in any case, and I
> think those will be much easier with lore2sphinx-ng+rstgen.
>
>
> This decision is really determined by time estimates.
>
> In any case, work out the sphinx release automation tool first, since we
> need that regardless of how we switch over
>

Got it.


>
> IIRC, rstgen has support for most of the vanilla docutils elements, with
> the notable exception of tables (and maybe definition lists...can't recall
> whether I finished those).  It has a basic level of test coverage (of
> course you can never have too many tests) for rendering the elements
> individually, and some test for elements in combination (particularly
> nested lists).  Footnotes and Citations I think also need some work, which
> I have a plan for, but haven't implemented yet (i don't think).
>
>
> The "new" lore2sphinx CLI tool needs more work, but is relatively
> straightforward.  Like the old tool, it's basically an elementtree
> processor, except instead of spitting out strings that get joined together
> (which granted was an unholy mess), it generates rstgen elements, which all
> have a .render() method.  After processing a Lore document, you shoudl end
> up with a rstgen.Document object.  You call it's render() method, which
> calls it's children's render() methods, etc. and it's turtles all the way
> down.
>
> The framework is there for the new CLI tool, it's mostly a matter of
> writing a bunch of short methods that take elementtree elements as input
> and return appropriate rstgen objects.
>
> Obviously these tools aren't finished, but they produce much better output
> than the old version of lore2sphinx w.r.t. whitespace handling, paragraph
> wrapping, etc.
>
>
> Aesthetically, this appeals to me a lot more than going with the messiness
> of lore2sphinx.
>

Me too.



> But it is _not_ a requirement.
>

Understood.  Though I think it might be a practical requirement, even if it
isn't a policy requirement.  If that makes sense.



> Some of the code is still pretty messy, but nowhere near the train wreck
> that the current/old version of lore2sphinx is.  By which I mean it _can_
> be cleaned up, it just hasn't been yet.  In particular there's some places
> in rstgen where the API is (to me at least) obviously awful, but I haven't
> gotten around to fixing it yet.
>
> Please review the code.  Please feel free to ask questions if you're
> interested.
>
> Personally, I've gotten over being in a hurry about all this, and I think
> a robust tool is more likely to succeed in the long run, though finishing
> it may make the run a bit longer.  So I'm for finishing
> lore2sphinx-ng+rstgen.
>
>
> I think a little false urgency might not hurt here :-).  I'm not going to
> work on the tool - just writing these emails probably blew my Twisted
> development budget for the next two months ;-)
>

I can relate... :)


> - but I will do my best to quickly clear up any procedural
> what-needs-to-be-done questions unambiguously.  Please ping if anything
> gets you stuck.
>

I'll let you know.

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130307/af379fec/attachment-0001.htm 

From tobias.oberstein at tavendo.de  Fri Mar  8 06:18:25 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 8 Mar 2013 03:18:25 -0800
Subject: [Twisted-Python] Twisted on Jython
Message-ID: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>

Hi,

we've been asked if Autobahn runs under Jython. Since there is an upcoming Jython version that supports 2.7 Python API, I thought I'd give it a try.

To my astonishment, I was able to get Autobahn working with minor efforts ...

Tested: Twisted 12.3 under Jython from sources (together with zope.interface 4.05 and setuptools from sources) after applying the following patches. Stock AutobahnPython 0.6 from source.

1) Missing __builtin__.buffer

The following is a workaround due to http://bugs.jython.org/issue1521

Include

# workaround for Jython, see: http://bugs.jython.org/issue1521
import __builtin__
if not hasattr(__builtin__, 'buffer'):
    def _buffer(object, offset = None, size = None):
       if offset is None:
          offset = 0
       if size is None:
          size = len(object)
       return object[offset:offset+size]
    __builtin__.buffer = _buffer

at the beginning of "twisted/python/compat.py".

2) Weird platform ident

Jython identifies itself as "Java" .. I was testing on Windows.

twisted/python/runtime.py

Line 36

    #'java': 'java',
    'java': 'win32',

This is necessary on Windows since otherwise Posix API is assumed.

Of course above is just a quick hack.

C:\Users\oberstet>jython
Jython 2.7b1 (default:ac42d59644e9, Feb 9 2013, 15:24:52)
[Java HotSpot(TM) 64-Bit Server VM (Oracle Corporation)] on java1.7.0
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys, os
>>> sys.platform
'java1.7.0'
>>> os.name
'java'

IMHO, os.name should return the real underlying OS on Jython, not "java" .. what do you think?

===

Where should those issue be adressed? Should Twisted include workarounds or should I lobby at Jython to "do the right" thing?

Cheers,
Tobias


Mit freundlichen Gr??en,

Tobias Oberstein
Gesch?ftsf?hrer

+49(0)9131 940 3574
+49(0)176 23 752 055
tobias.oberstein at tavendo.de<mailto:tobias.oberstein at tavendo.de>
Skype: toberstein<skype:toberstein?call>
Twitter: @oberstet<https://twitter.com/oberstet>
Xing: Tobias Oberstein<https://www.xing.com/profile/Tobias_Oberstein>

[cid:image003.png at 01CE1BF7.08C826D0]

Tavendo GmbH ? Am Weihersbach 13 ? 91074 Herzogenaurach ? Deutschland
Office / Postanschrift : Waldstrasse 18 ? 91054 Erlangen ? Deutschland
+49(+)700 GO TAVENDO ? +49(0)700 46 828 36 36 ? www.tavendo.de<http://www.tavendo.de/>
Amtsgericht F?rth ? HRB 10365 ? USt-Id.Nr DE246462916 ? Gesch?ftsf?hrer Tobias Oberstein

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130308/aa06ce62/attachment-0001.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image003.png
Type: image/png
Size: 12131 bytes
Desc: image003.png
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20130308/aa06ce62/attachment-0001.png 

From tobias.oberstein at tavendo.de  Fri Mar  8 08:10:51 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 8 Mar 2013 05:10:51 -0800
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <634914A010D0B943A035D226786325D44226DBFD88@EXVMBX020-12.exch020.serverdata.net>

it seems that a way to identify the actual OS on which Jython is running can be determined using

Jython 2.7b1 (default:ac42d59644e9, Feb 9 2013, 15:24:52)
[Java HotSpot(TM) 64-Bit Server VM (Oracle Corporation)] on java1.7.0
Type "help", "copyright", "credits" or "license" for more information.
>>> import java.lang.System
>>> java.lang.System.getProperty('os.name')
u'Windows 7'
>>>




Mit freundlichen Gr??en,

Tobias Oberstein
Gesch?ftsf?hrer

+49(0)9131 940 3574
+49(0)176 23 752 055
tobias.oberstein at tavendo.de<mailto:tobias.oberstein at tavendo.de>
Skype: toberstein<skype:toberstein?call>
Twitter: @oberstet<https://twitter.com/oberstet>
Xing: Tobias Oberstein<https://www.xing.com/profile/Tobias_Oberstein>

[cid:image001.png at 01CE1C06.BD7E36F0]

Tavendo GmbH ? Am Weihersbach 13 ? 91074 Herzogenaurach ? Deutschland
Office / Postanschrift : Waldstrasse 18 ? 91054 Erlangen ? Deutschland
+49(+)700 GO TAVENDO ? +49(0)700 46 828 36 36 ? www.tavendo.de<http://www.tavendo.de/>
Amtsgericht F?rth ? HRB 10365 ? USt-Id.Nr DE246462916 ? Gesch?ftsf?hrer Tobias Oberstein

Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] Im Auftrag von Tobias Oberstein
Gesendet: Freitag, 8. M?rz 2013 12:18
An: Twisted general discussion (twisted-python at twistedmatrix.com)
Betreff: [Twisted-Python] Twisted on Jython

Hi,

we've been asked if Autobahn runs under Jython. Since there is an upcoming Jython version that supports 2.7 Python API, I thought I'd give it a try.

To my astonishment, I was able to get Autobahn working with minor efforts ...

Tested: Twisted 12.3 under Jython from sources (together with zope.interface 4.05 and setuptools from sources) after applying the following patches. Stock AutobahnPython 0.6 from source.

1) Missing __builtin__.buffer

The following is a workaround due to http://bugs.jython.org/issue1521

Include

# workaround for Jython, see: http://bugs.jython.org/issue1521
import __builtin__
if not hasattr(__builtin__, 'buffer'):
    def _buffer(object, offset = None, size = None):
       if offset is None:
          offset = 0
       if size is None:
          size = len(object)
       return object[offset:offset+size]
    __builtin__.buffer = _buffer

at the beginning of "twisted/python/compat.py".

2) Weird platform ident

Jython identifies itself as "Java" .. I was testing on Windows.

twisted/python/runtime.py

Line 36

    #'java': 'java',
    'java': 'win32',

This is necessary on Windows since otherwise Posix API is assumed.

Of course above is just a quick hack.

C:\Users\oberstet>jython
Jython 2.7b1 (default:ac42d59644e9, Feb 9 2013, 15:24:52)
[Java HotSpot(TM) 64-Bit Server VM (Oracle Corporation)] on java1.7.0
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys, os
>>> sys.platform
'java1.7.0'
>>> os.name
'java'

IMHO, os.name should return the real underlying OS on Jython, not "java" .. what do you think?

===

Where should those issue be adressed? Should Twisted include workarounds or should I lobby at Jython to "do the right" thing?

Cheers,
Tobias


Mit freundlichen Gr??en,

Tobias Oberstein
Gesch?ftsf?hrer

+49(0)9131 940 3574
+49(0)176 23 752 055
tobias.oberstein at tavendo.de<mailto:tobias.oberstein at tavendo.de>
Skype: toberstein<skype:toberstein?call>
Twitter: @oberstet<https://twitter.com/oberstet>
Xing: Tobias Oberstein<https://www.xing.com/profile/Tobias_Oberstein>

[cid:image002.png at 01CE1C06.BD7E36F0]

Tavendo GmbH ? Am Weihersbach 13 ? 91074 Herzogenaurach ? Deutschland
Office / Postanschrift : Waldstrasse 18 ? 91054 Erlangen ? Deutschland
+49(+)700 GO TAVENDO ? +49(0)700 46 828 36 36 ? www.tavendo.de<http://www.tavendo.de/>
Amtsgericht F?rth ? HRB 10365 ? USt-Id.Nr DE246462916 ? Gesch?ftsf?hrer Tobias Oberstein

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130308/fe862392/attachment-0001.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.png
Type: image/png
Size: 12131 bytes
Desc: image001.png
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20130308/fe862392/attachment-0002.png 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image002.png
Type: image/png
Size: 12131 bytes
Desc: image002.png
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20130308/fe862392/attachment-0003.png 

From exarkun at twistedmatrix.com  Fri Mar  8 10:34:36 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Mar 2013 15:34:36 -0000
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>

On 11:18 am, tobias.oberstein at tavendo.de wrote:
>Hi,
>
>we've been asked if Autobahn runs under Jython. Since there is an 
>upcoming Jython version that supports 2.7 Python API, I thought I'd 
>give it a try.
>
>To my astonishment, I was able to get Autobahn working with minor 
>efforts ...

That's very cool.  Can you file tickets in the issue tracker and attach 
patches there?  The mailing list is where diffs go to be forgotten.

Here's a start: http://twistedmatrix.com/trac/ticket/3413

Jean-Paul
>Tested: Twisted 12.3 under Jython from sources (together with 
>zope.interface 4.05 and setuptools from sources) after applying the 
>following patches. Stock AutobahnPython 0.6 from source.
>
>1) Missing __builtin__.buffer
>
>The following is a workaround due to http://bugs.jython.org/issue1521
>
>Include
>
># workaround for Jython, see: http://bugs.jython.org/issue1521
>import __builtin__
>if not hasattr(__builtin__, 'buffer'):
>    def _buffer(object, offset = None, size = None):
>       if offset is None:
>          offset = 0
>       if size is None:
>          size = len(object)
>       return object[offset:offset+size]
>    __builtin__.buffer = _buffer
>
>at the beginning of "twisted/python/compat.py".
>
>2) Weird platform ident
>
>Jython identifies itself as "Java" .. I was testing on Windows.
>
>twisted/python/runtime.py
>
>Line 36
>
>    #'java': 'java',
>    'java': 'win32',
>
>This is necessary on Windows since otherwise Posix API is assumed.
>
>Of course above is just a quick hack.
>
>C:\Users\oberstet>jython
>Jython 2.7b1 (default:ac42d59644e9, Feb 9 2013, 15:24:52)
>[Java HotSpot(TM) 64-Bit Server VM (Oracle Corporation)] on java1.7.0
>Type "help", "copyright", "credits" or "license" for more information.
>>>>import sys, os
>>>>sys.platform
>'java1.7.0'
>>>>os.name
>'java'
>
>IMHO, os.name should return the real underlying OS on Jython, not 
>"java" .. what do you think?
>
>===
>
>Where should those issue be adressed? Should Twisted include 
>workarounds or should I lobby at Jython to "do the right" thing?
>
>Cheers,
>Tobias
>
>
>Mit freundlichen Gr??en,
>
>Tobias Oberstein
>Gesch?ftsf?hrer
>
>+49(0)9131 940 3574
>+49(0)176 23 752 055
>tobias.oberstein at tavendo.de<mailto:tobias.oberstein at tavendo.de>
>Skype: toberstein<skype:toberstein?call>
>Twitter: @oberstet<https://twitter.com/oberstet>
>Xing: Tobias Oberstein<https://www.xing.com/profile/Tobias_Oberstein>
>
>[cid:image003.png at 01CE1BF7.08C826D0]
>
>Tavendo GmbH ? Am Weihersbach 13 ? 91074 Herzogenaurach ? Deutschland
>Office / Postanschrift : Waldstrasse 18 ? 91054 Erlangen ? Deutschland
>+49(+)700 GO TAVENDO ? +49(0)700 46 828 36 36 ? 
>www.tavendo.de<http://www.tavendo.de/>
>Amtsgericht F?rth ? HRB 10365 ? USt-Id.Nr DE246462916 ? Gesch?ftsf?hrer 
>Tobias Oberstein


From tobias.oberstein at tavendo.de  Fri Mar  8 14:47:08 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 8 Mar 2013 11:47:08 -0800
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
Message-ID: <634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>

> >To my astonishment, I was able to get Autobahn working with minor
> >efforts ...
> 
> That's very cool.  Can you file tickets in the issue tracker and attach patches
> there?  The mailing list is where diffs go to be forgotten.
> 
> Here's a start: http://twistedmatrix.com/trac/ticket/3413

Hi Jean-Paul,

done: http://twistedmatrix.com/trac/ticket/3413#comment:21

- Tobias


From glyph at twistedmatrix.com  Fri Mar  8 18:43:44 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 8 Mar 2013 15:43:44 -0800
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <5C14366E-4047-4944-87A3-31C034A5227C@twistedmatrix.com>


On Mar 8, 2013, at 11:47 AM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:

>>> To my astonishment, I was able to get Autobahn working with minor
>>> efforts ...
>> 
>> That's very cool.  Can you file tickets in the issue tracker and attach patches
>> there?  The mailing list is where diffs go to be forgotten.
>> 
>> Here's a start: http://twistedmatrix.com/trac/ticket/3413
> 
> Hi Jean-Paul,
> 
> done: http://twistedmatrix.com/trac/ticket/3413#comment:21

Tobias,

Note that the primary missing criterion from this ticket is the presence of a buildbot running Jython.  Any chance you'd want to contribute another bot for this purpose?

Thanks!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130308/a90e8c70/attachment.htm 

From exarkun at twistedmatrix.com  Fri Mar  8 18:53:23 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Mar 2013 23:53:23 -0000
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20130308235323.4904.1538810689.divmod.xquotient.24@localhost6.localdomain6>

On 07:47 pm, tobias.oberstein at tavendo.de wrote:
>> >To my astonishment, I was able to get Autobahn working with minor
>> >efforts ...
>>
>>That's very cool.  Can you file tickets in the issue tracker and 
>>attach patches
>>there?  The mailing list is where diffs go to be forgotten.
>>
>>Here's a start: http://twistedmatrix.com/trac/ticket/3413
>
>Hi Jean-Paul,
>
>done: http://twistedmatrix.com/trac/ticket/3413#comment:21

Thanks!  Now feel free to harass people however you like in order to get 
them to pay attention to that issue. :)

I suspect one early task will be to get a Jython builder set up on 
http://buildbot.twistedmatrix.com/ again.

Jean-Paul


From adi at roiban.ro  Sat Mar  9 04:09:29 2013
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 9 Mar 2013 11:09:29 +0200
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <20130308235323.4904.1538810689.divmod.xquotient.24@localhost6.localdomain6>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
	<20130308235323.4904.1538810689.divmod.xquotient.24@localhost6.localdomain6>
Message-ID: <CAFycZ9dOd1rT4i5pBYEh4DM7M-Op3yU3TdehWRQU-0gSKWukqg@mail.gmail.com>

[snip]
> Thanks!  Now feel free to harass people however you like in order to get
> them to pay attention to that issue. :)
>
> I suspect one early task will be to get a Jython builder set up on
> http://buildbot.twistedmatrix.com/ again.

I can volunteer to run a Jython builder.

A couple of weeks ago (2012-12-15) I sent an email to
buildbot at twistedmatrix.com to ask for needed slaves. I have not got an
answer yet.

-- 
Adi Roiban


From jessica.mckellar at gmail.com  Sat Mar  9 11:32:27 2013
From: jessica.mckellar at gmail.com (Jessica McKellar)
Date: Sat, 9 Mar 2013 11:32:27 -0500
Subject: [Twisted-Python] Sprinting on Twisted at PyCon
Message-ID: <CAKDZRcg8RiHgRnTp6xkxRE_FD7ZSc5E9d2saaxuUq=4Ao5p3PQ@mail.gmail.com>

Hi all,

Will you be at the PyCon sprints? Want to work on Twisted? Add your name here:

https://us.pycon.org/2013/community/sprints/projects/

This is a great opportunity for new contributors to get started with
lots of in-person support. Also, if you won't be at PyCon this is
still a great time to sprint remotely.

See you there (or on the Internet)!
-Jessica


From tom.prince at ualberta.net  Sat Mar  9 13:58:24 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 09 Mar 2013 11:58:24 -0700
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <CAFycZ9dOd1rT4i5pBYEh4DM7M-Op3yU3TdehWRQU-0gSKWukqg@mail.gmail.com>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
	<20130308235323.4904.1538810689.divmod.xquotient.24@localhost6.localdomain6>
	<CAFycZ9dOd1rT4i5pBYEh4DM7M-Op3yU3TdehWRQU-0gSKWukqg@mail.gmail.com>
Message-ID: <87sj44flin.fsf@hermes.hocat.ca>

Adi Roiban <adi at roiban.ro> writes:
>> I suspect one early task will be to get a Jython builder set up on
>> http://buildbot.twistedmatrix.com/ again.
>
> I can volunteer to run a Jython builder.

Sure:
https://twistedmatrix.com/trac/wiki/ContinuousIntegration/TestSlaveConfiguration#DonatingaSlave

> A couple of weeks ago (2012-12-15) I sent an email to
> buildbot at twistedmatrix.com to ask for needed slaves. I have not got an
> answer yet.

The slaves that we have are more driven by what people want to support,
than by some central authority. There wouldn't be much point in having a
jython builder, if there weren't people interested in working on jython
support, for example.

We don't have a list of slaves that we are looking for, currently.

https://twistedmatrix.com/trac/wiki/NeededBuildSlaves

  Tom


From exarkun at twistedmatrix.com  Sat Mar  9 14:53:38 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 09 Mar 2013 19:53:38 -0000
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <87sj44flin.fsf@hermes.hocat.ca>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
	<20130308235323.4904.1538810689.divmod.xquotient.24@localhost6.localdomain6>
	<CAFycZ9dOd1rT4i5pBYEh4DM7M-Op3yU3TdehWRQU-0gSKWukqg@mail.gmail.com>
	<87sj44flin.fsf@hermes.hocat.ca>
Message-ID: <20130309195338.1939.248817130.divmod.xquotient.33@localhost6.localdomain6>

On 06:58 pm, tom.prince at ualberta.net wrote:
>Adi Roiban <adi at roiban.ro> writes:
>>>I suspect one early task will be to get a Jython builder set up on
>>>http://buildbot.twistedmatrix.com/ again.
>>
>>I can volunteer to run a Jython builder.
>
>Sure:
>https://twistedmatrix.com/trac/wiki/ContinuousIntegration/TestSlaveConfiguration#DonatingaSlave
>>A couple of weeks ago (2012-12-15) I sent an email to
>>buildbot at twistedmatrix.com to ask for needed slaves. I have not got an
>>answer yet.
>
>The slaves that we have are more driven by what people want to support,
>than by some central authority. There wouldn't be much point in having 
>a
>jython builder, if there weren't people interested in working on jython
>support, for example.

That said, adding redundant slaves for existing configurations will 
result in builds being completed more quickly, right?  And can offer 
more resilience  against offline slaves.  Faster, more reliable builds 
can lead to less wasted time during development.  So if this is true, 
and there are offers of hardware where we can run such slaves, I think 
this is worth pursuing.

Jean-Paul


From glyph at twistedmatrix.com  Sat Mar  9 17:50:55 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 9 Mar 2013 14:50:55 -0800
Subject: [Twisted-Python] Sprinting on Twisted at PyCon
In-Reply-To: <CAKDZRcg8RiHgRnTp6xkxRE_FD7ZSc5E9d2saaxuUq=4Ao5p3PQ@mail.gmail.com>
References: <CAKDZRcg8RiHgRnTp6xkxRE_FD7ZSc5E9d2saaxuUq=4Ao5p3PQ@mail.gmail.com>
Message-ID: <06FF1648-8DDA-471A-81EF-402F1B91F729@twistedmatrix.com>


On Mar 9, 2013, at 8:32 AM, Jessica McKellar <jessica.mckellar at gmail.com> wrote:

> Hi all,
> 
> Will you be at the PyCon sprints? Want to work on Twisted? Add your name here:
> 
> https://us.pycon.org/2013/community/sprints/projects/
> 
> This is a great opportunity for new contributors to get started with
> lots of in-person support. Also, if you won't be at PyCon this is
> still a great time to sprint remotely.

Signed up!  Looking forward to seeing you there.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130309/f59bd64a/attachment.htm 

From exarkun at twistedmatrix.com  Sun Mar 10 00:05:25 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 10 Mar 2013 05:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1362891925.43.1625951262@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130310/13107909/attachment.htm 

From adi at roiban.ro  Mon Mar 11 04:17:25 2013
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 11 Mar 2013 10:17:25 +0200
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <20130309195338.1939.248817130.divmod.xquotient.33@localhost6.localdomain6>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
	<20130308235323.4904.1538810689.divmod.xquotient.24@localhost6.localdomain6>
	<CAFycZ9dOd1rT4i5pBYEh4DM7M-Op3yU3TdehWRQU-0gSKWukqg@mail.gmail.com>
	<87sj44flin.fsf@hermes.hocat.ca>
	<20130309195338.1939.248817130.divmod.xquotient.33@localhost6.localdomain6>
Message-ID: <CAFycZ9do0Usb50qWoJL1Y9vPDUnbxjpq-gO0Jvm_RTMowAKeqA@mail.gmail.com>

On 9 March 2013 21:53,  <exarkun at twistedmatrix.com> wrote:
> On 06:58 pm, tom.prince at ualberta.net wrote:
>>Adi Roiban <adi at roiban.ro> writes:
>>>>I suspect one early task will be to get a Jython builder set up on
>>>>http://buildbot.twistedmatrix.com/ again.
>>>
>>>I can volunteer to run a Jython builder.
>>
>>Sure:
>>https://twistedmatrix.com/trac/wiki/ContinuousIntegration/TestSlaveConfiguration#DonatingaSlave
>>>A couple of weeks ago (2012-12-15) I sent an email to
>>>buildbot at twistedmatrix.com to ask for needed slaves. I have not got an
>>>answer yet.
>>
>>The slaves that we have are more driven by what people want to support,
>>than by some central authority. There wouldn't be much point in having
>>a
>>jython builder, if there weren't people interested in working on jython
>>support, for example.
>
> That said, adding redundant slaves for existing configurations will
> result in builds being completed more quickly, right?  And can offer
> more resilience  against offline slaves.  Faster, more reliable builds
> can lead to less wasted time during development.  So if this is true,
> and there are offers of hardware where we can run such slaves, I think
> this is worth pursuing.

OK.
I can provide X86 virtual machines for Twisted project.
I have no idea how busy is the buildbot queue for Twisted.
Can you please suggest what kind of machines will help the most?

Thanks!

-- 
Adi Roiban


From tobias.oberstein at tavendo.de  Mon Mar 11 13:24:52 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 11 Mar 2013 10:24:52 -0700
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <CAFycZ9dOd1rT4i5pBYEh4DM7M-Op3yU3TdehWRQU-0gSKWukqg@mail.gmail.com>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
	<20130308235323.4904.1538810689.divmod.xquotient.24@localhost6.localdomain6>
	<CAFycZ9dOd1rT4i5pBYEh4DM7M-Op3yU3TdehWRQU-0gSKWukqg@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D44226DC054A@EXVMBX020-12.exch020.serverdata.net>

> [snip]
> > Thanks!  Now feel free to harass people however you like in order to
> > get them to pay attention to that issue. :)

;)

> >
> > I suspect one early task will be to get a Jython builder set up on
> > http://buildbot.twistedmatrix.com/ again.

Makes sense.

> 
> I can volunteer to run a Jython builder.

Thats great! I am interested in getting Twisted supported on Jython.

If you could take on that one .. would be nice. I am running a FreeBSD buildbot and I still want to add a PyPy bot also .. it's just I need to find a little time ..

> 
> A couple of weeks ago (2012-12-15) I sent an email to
> buildbot at twistedmatrix.com to ask for needed slaves. I have not got an answer
> yet.
> 
> --
> Adi Roiban
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From tobias.oberstein at tavendo.de  Mon Mar 11 13:30:25 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 11 Mar 2013 10:30:25 -0700
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <5C14366E-4047-4944-87A3-31C034A5227C@twistedmatrix.com>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
	<5C14366E-4047-4944-87A3-31C034A5227C@twistedmatrix.com>
Message-ID: <634914A010D0B943A035D226786325D44226DC055C@EXVMBX020-12.exch020.serverdata.net>


> Note that the primary missing criterion from this ticket is the presence of a buildbot running Jython. ?Any chance you'd want to contribute another bot for this purpose?

Hi Glyph,

Ok. Makes sense. That would likely bring up some issues with Jython/Twisted then, which we could address ..

Apart from that, my guess is that another important area might be reactor support .. as far as I can see Jython as some Posix wrappers which makes it run on Windows only with the less-than-stellar Windows-Select stuff, not IOCP or such. Same might apply to BSDs and Linux (don't know if they have wrappers for kqeue/epoll).

At least from my totally unscientific performance measurements with Autobahn/Twisted, Jython/SELECT is slower than CPython/IOCP, not to speak of PyPy on stuff like kqueue/epoll ..

- Tobias



From glyph at twistedmatrix.com  Mon Mar 11 17:21:05 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 11 Mar 2013 14:21:05 -0700
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <634914A010D0B943A035D226786325D44226DC055C@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
	<5C14366E-4047-4944-87A3-31C034A5227C@twistedmatrix.com>
	<634914A010D0B943A035D226786325D44226DC055C@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <B138C3AC-6125-45C9-A868-166E983A4B98@twistedmatrix.com>


On Mar 11, 2013, at 10:30 AM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:

> 
>> Note that the primary missing criterion from this ticket is the presence of a buildbot running Jython.  Any chance you'd want to contribute another bot for this purpose?
> 
> Hi Glyph,
> 
> Ok. Makes sense. That would likely bring up some issues with Jython/Twisted then, which we could address ..
> 
> Apart from that, my guess is that another important area might be reactor support .. as far as I can see Jython as some Posix wrappers which makes it run on Windows only with the less-than-stellar Windows-Select stuff, not IOCP or such. Same might apply to BSDs and Linux (don't know if they have wrappers for kqeue/epoll).
> 
> At least from my totally unscientific performance measurements with Autobahn/Twisted, Jython/SELECT is slower than CPython/IOCP, not to speak of PyPy on stuff like kqueue/epoll ..

This is to be expected; Jython generally isn't very fast.  If you want speed, use PyPy; it's going to be considerably faster than everything else.

If you want to make a Jython-specific reactor for performance or platform-feature reasons, that would be a separate task, well after the basic select reactor and all of our support code works on Jython :).

-glyph

From matt at conundrum.com  Mon Mar 11 21:40:30 2013
From: matt at conundrum.com (Matthew Pounsett)
Date: Mon, 11 Mar 2013 21:40:30 -0400
Subject: [Twisted-Python] debugging listenTCP
Message-ID: <366DD0FD-01BD-44B1-BE87-7E374C44E055@conundrum.com>


I've got a weird one here.   I've just come back to some code that I haven't worked on in a while, which is a simple XMLRPC server.  Last time I touched it I was working on adding cred support, so I'd gone from using a direct call to server.Site() in my listenTCP call to using my own factory/portal/etc.

When I fired it up this time, listenTCP was failing to bind to the requested ports, but not raising an exception.  I started writing up an email to ask about debugging this, but while doing information collection it started working again.  Then not.  Now it's working again.  It looks like I've got some sort of intermittent failure, but I have no idea how to track it down.

    # 'interfaces' is just a simple list of IP addresses.  The map()
    # call provides formatting for the log message
    logger.debug("Connecting to port {} on interfaces: {}".format(
        port, ", ".join(map( lambda x: "'{}'".format(x), interfaces))))
    for iface in interfaces:
        reactor.listenTCP(port, factory, interface=iface)
    reactor.run()

The application should bind to [::1]:8602 and 127.0.0.1:8602, and logging seems to indicate this is what it's trying to do.

01:28:31 [server      ] Connecting to port 8602 on interfaces: '::1', '127.0.0.1'

However, intermittently lsof and netstat are showing no binding.

> netstat -an | grep -c 8602
0

I tried turning on twisted's internal logging, but that is giving me nothing useful.  I see no way to turn up the debugging level on this log, but I normally use python's standard logger and perhaps I've missed some piece of documentation.  This is a sample from when it was failing:

2013-03-12 01:28:31+0000 [-] Log opened.
2013-03-12 01:28:31+0000 [-] ServerFactory starting on 8602
2013-03-12 01:28:31+0000 [-] Starting factory <insurrection.server.ServerFactory instance at 0x85a81488>
2013-03-12 01:28:31+0000 [-] ServerFactory starting on 8602

Can anyone suggest anything more I can do to track down the problem next time it crops up?




From davmaz at gmail.com  Wed Mar 13 23:04:32 2013
From: davmaz at gmail.com (Dave Mazzoni)
Date: Thu, 14 Mar 2013 03:04:32 +0000 (UTC)
Subject: [Twisted-Python] Twisted and serial port usage
Message-ID: <loom.20130314T035902-908@post.gmane.org>

I'm trying to use a serial port from the twisted library. 
I can get it to show a connection has been made but 
I get no 'dataReeived' calls when I send chars over the serial line. 
I know the serial line is working correctly. 
I think the structure of my program is at fault (of course).

Might anyone suggest the simplest program (for Linux) that 
uses the twisted library? I've got everything else working and love twisted,
but this 'addition' is not working for me.

Thanks,
Dave



From zounes99 at gmail.com  Thu Mar 14 00:40:59 2013
From: zounes99 at gmail.com (Eric Zounes)
Date: Wed, 13 Mar 2013 21:40:59 -0700
Subject: [Twisted-Python] Twisted and serial port usage
In-Reply-To: <loom.20130314T035902-908@post.gmane.org>
References: <loom.20130314T035902-908@post.gmane.org>
Message-ID: <CAO3xE830r8v6-CBr1vKOQc-pSzrkM-xtj-ipCCCx6ruuviYa7w@mail.gmail.com>

Hey there,

There's an interesting Twisted project which uses the Python Xbee module
for Zigbee networks. It implements SerialPort and can be found
here<https://github.com/trunet/txXBee>.
I hope this helps.

-Eric


On Wed, Mar 13, 2013 at 8:04 PM, Dave Mazzoni <davmaz at gmail.com> wrote:

> I'm trying to use a serial port from the twisted library.
> I can get it to show a connection has been made but
> I get no 'dataReeived' calls when I send chars over the serial line.
> I know the serial line is working correctly.
> I think the structure of my program is at fault (of course).
>
> Might anyone suggest the simplest program (for Linux) that
> uses the twisted library? I've got everything else working and love
> twisted,
> but this 'addition' is not working for me.
>
> Thanks,
> Dave
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130313/13f67dcf/attachment.htm 

From sergun at gmail.com  Thu Mar 14 05:40:29 2013
From: sergun at gmail.com (Sergey Gerasimov)
Date: Thu, 14 Mar 2013 13:40:29 +0400
Subject: [Twisted-Python] eated traceback when decorate method already
	decorated by inlineCallbacks
Message-ID: <1b1501ce2097$f8926fa0$e9b74ee0$@gmail.com>

Hello to all!

Why traceback doesn't include call of g() here?

import traceback
from twisted.internet import defer, reactor

def decor1(f, *argv, **kw):
    @defer.inlineCallbacks
    def decor1():
        try:
            res = yield f(*argv, **kw)
            defer.returnValue(res)       
        except:
            traceback.print_exc()
    return decor1
    
@defer.inlineCallbacks
def g():
    raise AttributeError
    yield defer.succeed(1)

@decor1
@defer.inlineCallbacks
def f():
    yield g()   
    
f()
reactor.run()

I see just:
Traceback (most recent call last):
  File "C:\testing\test.py", line 9, in decor1
    res = yield f(*argv, **kw)
AttributeError




From sergun at gmail.com  Thu Mar 14 06:05:53 2013
From: sergun at gmail.com (Sergey Gerasimov)
Date: Thu, 14 Mar 2013 14:05:53 +0400
Subject: [Twisted-Python] logging in twisted based projects
Message-ID: <1b2001ce209b$84b2e7a0$8e18b6e0$@gmail.com>

I'm implementing some project based on twisted.

 

I would like to use some logging mechanism in my modules and see both
twisted generated log records and log records from my modules

and be able to filter log records by level and  source (generated by
twisted, or subset of my modules).

 

What should I do in this case?

Log with python logging module in my code and send log records generated by
twisted to PythonLoggingObserver? 

Or should I avoid using of python logging module and log only with twisted
logging module? I didn't find features like filtering logs in twisted
logging.

 

Am I right that twisted based log observer uses blocking i/o? Example:

observer = log.FileLogObserver(sys.stdout) # sys.stdio.write used in
implementation

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130314/ad3b2ea1/attachment.htm 

From ltaylor.volks at gmail.com  Thu Mar 14 09:37:03 2013
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Thu, 14 Mar 2013 06:37:03 -0700
Subject: [Twisted-Python] logging in twisted based projects
In-Reply-To: <1b2001ce209b$84b2e7a0$8e18b6e0$@gmail.com>
References: <1b2001ce209b$84b2e7a0$8e18b6e0$@gmail.com>
Message-ID: <D52F6E44-96BA-4CFB-83DA-E89AF0A69AF7@gmail.com>


On Mar 14, 2013, at 3:05 AM, Sergey Gerasimov wrote:

> I?m implementing some project based on twisted.
>  
> I would like to use some logging mechanism in my modules and see both twisted generated log records and log records from my modules
> and be able to filter log records by level and  source (generated by twisted, or subset of my modules).
>  
> What should I do in this case?
> Log with python logging module in my code and send log records generated by twisted to PythonLoggingObserver?
> Or should I avoid using of python logging module and log only with twisted logging module? I didn?t find features like filtering logs in twisted logging.
>  
> Am I right that twisted based log observer uses blocking i/o? Example:
> observer = log.FileLogObserver(sys.stdout) # sys.stdio.write used in implementation
>  

FileLogObserver will honor a 'system' kwarg that can be used to log the source of a message, so that:

	log.msg('Important message', system='MY_MODULE')

yields:

	2012-11-12 18:53:55-0700 [MY_MODULE] Important message


Arbitrary message formatting can be accomplished by suppling a `format` kwarg in place of a message:

	log.msg(format='[%(level)s] %(msg)s', level='CATASTROPHIC', msg='Important Message', system='MY_MODULE')

yields:

	2012-11-12 18:53:55-0700 [MY_MODULE] [CATASTROPHIC] Important message


That's a bit verbose, so creating a partial wrapper is useful:

from functools import partial
alert = partial(log.msg, format='[%(level)s] %(msg)s', level='CATASTROPHIC', system='MY_MODULE')

alert(msg='Something terrible')
alert(msg='Not so bad', level='INFO')  # override the default level


More generally, calls to log.msg() accept keyword arguments that can be inspected by any registered observer. You may want to write your own log observer and take advantage of this if you have specific filtering requirements.



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130314/cac4a8b8/attachment.htm 

From stephen at thorne.id.au  Thu Mar 14 09:52:23 2013
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu, 14 Mar 2013 13:52:23 +0000
Subject: [Twisted-Python] logging in twisted based projects
In-Reply-To: <1b2001ce209b$84b2e7a0$8e18b6e0$@gmail.com>
References: <1b2001ce209b$84b2e7a0$8e18b6e0$@gmail.com>
Message-ID: <CAFPU7=sH1Qf3Qps87cUXFspf7Wf+Jp5M3=O_P3hQYtRPLD_3qA@mail.gmail.com>

It's also perfectly fine to use python's logging module from within
twisted, you don't have to use twisted.log, but you should be aware this
will make your log files hard to correlate (between twistd.log and your own
logfiles).


On Thu, Mar 14, 2013 at 10:05 AM, Sergey Gerasimov <sergun at gmail.com> wrote:

> I?m implementing some project based on twisted.****
>
> ** **
>
> I would like to use some logging mechanism in my modules and see both
> twisted generated log records and log records from my modules****
>
> and be able to filter log records by level and  source (generated by
> twisted, or subset of my modules).****
>
> ** **
>
> What should I do in this case?****
>
> Log with python logging module in my code and send log records generated
> by twisted to PythonLoggingObserver? ****
>
> Or should I avoid using of python logging module and log only with twisted
> logging module? I didn?t find features like filtering logs in twisted
> logging.****
>
> ** **
>
> Am I right that twisted based log observer uses blocking i/o? Example:****
>
> observer = log.FileLogObserver(sys.stdout) # sys.stdio.write used in
> implementation****
>
> ** **
>
> ** **
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130314/6a5d5282/attachment-0001.htm 

From exarkun at twistedmatrix.com  Thu Mar 14 10:20:46 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 14 Mar 2013 14:20:46 -0000
Subject: [Twisted-Python] eated traceback when decorate method already
 decorated by inlineCallbacks
In-Reply-To: <1b1501ce2097$f8926fa0$e9b74ee0$@gmail.com>
References: <1b1501ce2097$f8926fa0$e9b74ee0$@gmail.com>
Message-ID: <20130314142046.5790.387630841.divmod.xquotient.39@localhost6.localdomain6>

On 09:40 am, sergun at gmail.com wrote:
>Hello to all!
>
>Why traceback doesn't include call of g() here?

Tracebacks are tricky, and inlineCallbacks doesn't make them look 
exactly like they would look if you didn't have Deferreds.

twisted.python.failure is a little bit better at handling tracebacks 
from this sort of code than the traceback module is, so if you write the 
code like this things will at least be a little better:

    from twisted.python.failure import Failure

    def decor1():
        try:
            res = yield f(*argv, **kw)
        except:
            Failure.printTraceback()
        else:
            defer.returnValue(res)

Notice also that I moved returnValue outside of the try block. 
`returnValue` is implemented using exceptions, so you *must not* catch 
and handle the exception it raises or it won't work.

Jean-Paul
>import traceback
>from twisted.internet import defer, reactor
>
>def decor1(f, *argv, **kw):
>    @defer.inlineCallbacks
>    def decor1():
>        try:
>            res = yield f(*argv, **kw)
>            defer.returnValue(res)
>        except:
>            traceback.print_exc()
>    return decor1
>
>@defer.inlineCallbacks
>def g():
>    raise AttributeError
>    yield defer.succeed(1)
>
>@decor1
>@defer.inlineCallbacks
>def f():
>    yield g()
>
>f()
>reactor.run()
>
>I see just:
>Traceback (most recent call last):
>  File "C:\testing\test.py", line 9, in decor1
>    res = yield f(*argv, **kw)
>AttributeError
>
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From exarkun at twistedmatrix.com  Thu Mar 14 10:57:30 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 14 Mar 2013 14:57:30 -0000
Subject: [Twisted-Python] logging in twisted based projects
In-Reply-To: <CAFPU7=sH1Qf3Qps87cUXFspf7Wf+Jp5M3=O_P3hQYtRPLD_3qA@mail.gmail.com>
References: <1b2001ce209b$84b2e7a0$8e18b6e0$@gmail.com>
	<CAFPU7=sH1Qf3Qps87cUXFspf7Wf+Jp5M3=O_P3hQYtRPLD_3qA@mail.gmail.com>
Message-ID: <20130314145730.5790.1276230248.divmod.xquotient.51@localhost6.localdomain6>

On 01:52 pm, stephen at thorne.id.au wrote:
>It's also perfectly fine to use python's logging module from within
>twisted, you don't have to use twisted.log, but you should be aware 
>this
>will make your log files hard to correlate (between twistd.log and your 
>own
>logfiles).

For posterity: within programs that *use* Twisted.

Please don't use it within code being contributed to Twisted itself. :)

Also, there is no such thing as "twisted.log".  There is 
"twisted.python.log".

Also, using stdlib logging doesn't necessarily force you to have two log 
files.  It sounds like Sergey already knows how to avoid this, since he 
mentioned PythonLoggingObserver which bridges twisted.python.log to 
stdlib logging.

Also, twisted.python.log doesn't prevent any filtering you might want to 
do, it just doesn't support it the same way the stdlib logging module 
does it.  If you want to filter log messages, a good way to do it is 
probably to write a log observer that implements your filtering logic 
and then passes any unfiltered messages to another log observer.  In 
this way you can apply filtering regardless of what ultimate observer 
you want to use.

For example:

    def makeLevelFilter(level, observer):
        def filter(event):
            if event.get("level", 0) > level:
                return observer(event)
        return filter

    obs = FileLogObserver(...)
    addObserver(makeLevelFilter(7, obs.emit))

Jean-Paul
>
>On Thu, Mar 14, 2013 at 10:05 AM, Sergey Gerasimov <sergun at gmail.com> 
>wrote:
>>I?m implementing some project based on twisted.****
>>
>>** **
>>
>>I would like to use some logging mechanism in my modules and see both
>>twisted generated log records and log records from my modules****
>>
>>and be able to filter log records by level and  source (generated by
>>twisted, or subset of my modules).****
>>
>>** **
>>
>>What should I do in this case?****
>>
>>Log with python logging module in my code and send log records 
>>generated
>>by twisted to PythonLoggingObserver? ****
>>
>>Or should I avoid using of python logging module and log only with 
>>twisted
>>logging module? I didn?t find features like filtering logs in twisted
>>logging.****
>>
>>** **
>>
>>Am I right that twisted based log observer uses blocking i/o? 
>>Example:****
>>
>>observer = log.FileLogObserver(sys.stdout) # sys.stdio.write used in
>>implementation****
>>
>>** **
>>
>>** **
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From _ at lvh.cc  Thu Mar 14 18:56:12 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Thu, 14 Mar 2013 15:56:12 -0700
Subject: [Twisted-Python] Twisted BoF session
Message-ID: <CAE_Hg6b+pL_YTyTuA48VCNLOA78WSAJ5SBZtGm0OVBRtwN8FCg@mail.gmail.com>

I'm organizing a Twisted BoF session/open space.

I've tried to get a combination of a) nice room b) no collisions with
anyone's talks. I have it down for 7-9 in Great America Meeting Room 2
(that's next to the room where Itamar's tutorial was).

I'm in charge of open spaces, so I can probably cater to any objections I
get before late tonight.

-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130314/831f18db/attachment.htm 

From _ at lvh.cc  Fri Mar 15 01:34:13 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Thu, 14 Mar 2013 22:34:13 -0700
Subject: [Twisted-Python] Twisted BoF session
In-Reply-To: <CAE_Hg6b+pL_YTyTuA48VCNLOA78WSAJ5SBZtGm0OVBRtwN8FCg@mail.gmail.com>
References: <CAE_Hg6b+pL_YTyTuA48VCNLOA78WSAJ5SBZtGm0OVBRtwN8FCg@mail.gmail.com>
Message-ID: <CAE_Hg6Y7RaUYZAbkEF42xHE6QaRjPMRDjSYxhZ27zJTA6M_C0Q@mail.gmail.com>

By the way, this is *Friday*

On Thursday, March 14, 2013, Laurens Van Houtven <_ at lvh.cc> wrote:

> I'm organizing a Twisted BoF session/open space.
>
> I've tried to get a combination of a) nice room b) no collisions with
> anyone's talks. I have it down for 7-9 in Great America Meeting Room 2
> (that's next to the room where Itamar's tutorial was).
>
> I'm in charge of open spaces, so I can probably cater to any objections I
> get before late tonight.
>
> --
> cheers
> lvh
>


-- 
Sent from Gmail Mobile
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130314/e88e2fb6/attachment.htm 

From glyph at twistedmatrix.com  Fri Mar 15 03:17:43 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 15 Mar 2013 00:17:43 -0700
Subject: [Twisted-Python] Twisted BoF session
In-Reply-To: <CAE_Hg6b+pL_YTyTuA48VCNLOA78WSAJ5SBZtGm0OVBRtwN8FCg@mail.gmail.com>
References: <CAE_Hg6b+pL_YTyTuA48VCNLOA78WSAJ5SBZtGm0OVBRtwN8FCg@mail.gmail.com>
Message-ID: <53FFA779-F320-4E66-85E8-3F26C1E67D65@twistedmatrix.com>


On Mar 14, 2013, at 3:56 PM, Laurens Van Houtven <_ at lvh.cc> wrote:

> I'm organizing a Twisted BoF session/open space.
> 
> I've tried to get a combination of a) nice room b) no collisions with anyone's talks. I have it down for 7-9 in Great America Meeting Room 2 (that's next to the room where Itamar's tutorial was).
> 
> I'm in charge of open spaces, so I can probably cater to any objections I get before late tonight.

Is there anywhere we should sign up?



From jonathan+twisted at jsphere.com  Fri Mar 15 07:11:07 2013
From: jonathan+twisted at jsphere.com (Jonathan Jacobs)
Date: Fri, 15 Mar 2013 13:11:07 +0200
Subject: [Twisted-Python] Final request URI from an Agent response
Message-ID: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>

Hello Twisters, 

I'm interested in working on ticket #5435: The ability to discover the final URI of an Agent request/response. Thomas summarised a previous IRC conversation on this topic quite well in a comment on the ticket [1].

The biggest issue I've encountered so far is that Request.uri is a relative URI. Since it is not possible to reconstruct an absolute URI given the information that Request has, at the very least the URI scheme is lost, we have a few options:

* Allow Request.uri to be either an absolute URI or a relative URI byte string, however this means that consumers of this attribute need to be aware that it could be either;

* Add a new attribute/method to Request (and parameter to Request.__init__) for the absolute URI, again this means that consumers need to be aware that the absolute URI might not be present.

If we are to change Request's URI API, it would be a good idea to do this as few times as possible. (One seems like a good number to me.)

JP commented that it would be nice if there was an object that represented a URL we could use, referring to ticket #5388. And although I would love to see #5388 finished (and might even be persuaded to work on it), discussions with Itamar and reading ticket comments have left me weary of the many nuanced complexities of this task.

What are the thoughts on changing the meaning of Request.uri?

Should the IRI branch be finished before attempting this ticket? (Note that this doesn't necessarily include my volunteering.)


[1] <https://twistedmatrix.com/trac/ticket/5435#comment:9> 

-- 
Jonathan




From _ at lvh.cc  Fri Mar 15 10:50:36 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Fri, 15 Mar 2013 07:50:36 -0700
Subject: [Twisted-Python] Twisted BoF session
In-Reply-To: <53FFA779-F320-4E66-85E8-3F26C1E67D65@twistedmatrix.com>
References: <CAE_Hg6b+pL_YTyTuA48VCNLOA78WSAJ5SBZtGm0OVBRtwN8FCg@mail.gmail.com>
	<53FFA779-F320-4E66-85E8-3F26C1E67D65@twistedmatrix.com>
Message-ID: <CAE_Hg6bR=sVxA_p0uBY4OwGcdG3UKXHMV_MQ6QrP8PzQRzKucw@mail.gmail.com>

Nah; I mean, you could, but it'd only be for advertisement reasons, but I'm
guessing all the usual suspects will show up anyway. It doesn't help me
much in terms of admin, I just picked a room that looks like it'd be big
enough for the amount of people I'd expect :)


On Fri, Mar 15, 2013 at 12:17 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 14, 2013, at 3:56 PM, Laurens Van Houtven <_ at lvh.cc> wrote:
>
> > I'm organizing a Twisted BoF session/open space.
> >
> > I've tried to get a combination of a) nice room b) no collisions with
> anyone's talks. I have it down for 7-9 in Great America Meeting Room 2
> (that's next to the room where Itamar's tutorial was).
> >
> > I'm in charge of open spaces, so I can probably cater to any objections
> I get before late tonight.
>
> Is there anywhere we should sign up?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130315/ef249ce2/attachment.htm 

From contact at rkade.fr  Fri Mar 15 11:32:12 2013
From: contact at rkade.fr (rakdeFR)
Date: Fri, 15 Mar 2013 16:32:12 +0100
Subject: [Twisted-Python] Jabber client, tls and iqauth
Message-ID: <51433EFC.4010608@rkade.fr>

Hi!

I did some searches about my problem and didn't find any thing that 
match in the archives.

I'm trying to do a simple jabber client with the twisted framework in 
order to automatically send messages.

The server is a prosody server, and enabled the tls and iq auth.

So far, I can connect to the server, and can't login.

If I'm doing a XmlStreamFactory with the basicClientFactory, I have 
these initializers/authenticator:
Initializers 
[<twisted.words.protocols.jabber.xmlstream.TLSInitiatingInitializer 
object at 0x2c1ef50>, 
<twisted.words.protocols.jabber.client.IQAuthInitializer object at 
0x2c1ef90>]
Authenticator <twisted.words.protocols.jabber.client.BasicAuthenticator 
instance at 0x10f2320>

And if I create a XMPPClientFactory, I have these:
Initializers 
[<twisted.words.protocols.jabber.client.CheckVersionInitializer object 
at 0x2fe7f50>, 
<twisted.words.protocols.jabber.xmlstream.TLSInitiatingInitializer 
object at 0x2fe7fd0>, 
<twisted.words.protocols.jabber.sasl.SASLInitiatingInitializer object at 
0x2ff1050>, <twisted.words.protocols.jabber.client.BindInitializer 
object at 0x2ff1090>, 
<twisted.words.protocols.jabber.client.SessionInitializer object at 
0x2ff10d0>]
Authenticator <twisted.words.protocols.jabber.client.XMPPAuthenticator 
instance at 0x2fdd320>

So I look up the SEND and RECV message between the client and server, 
and I notice that if I do a XMPPClientFactory, it's doing a tls 
connection, then say it doesn't have the feature for iq auth.
And if I'm doing a basicClientFactory, I don't have the tls, so when it 
tries to logon with iq, the server answers that it needs the tls.

After noticing that, I tried to change the initializers and the 
authenticator in the connected function.
But when I'm doing a XMPPClientFactory with a BasicAuthenticator, I 
don't have the tls anymore.

What do I need to change in order to have the tls and after the iq auth?

Thank you for your help.

rkadeFR

My current code:
19 class ClientXMPP(object):
  20     def __init__(self, jid_user, password_user):
  21         self.reactor = reactor
  22         XmlStreamFactory = client.basicClientFactory(jid_user, 
password_user)
  23         
XmlStreamFactory.addBootstrap(xmlstream.STREAM_CONNECTED_EVENT, 
self.connected)
  24         XmlStreamFactory.addBootstrap(xmlstream.STREAM_END_EVENT, 
self.disconnected)
  25         XmlStreamFactory.addBootstrap(xmlstream.STREAM_AUTHD_EVENT, 
self.authenticated)
  26         XmlStreamFactory.addBootstrap(xmlstream.INIT_FAILED_EVENT, 
self.init_failed)
  27         connector = SRVConnector(reactor, 'xmpp-client', 
jid_user.host, XmlStreamFactory)
  28         connector.connect()
  29         self.finished = Deferred()
  30
  31     def rawDataIn(self, buf):
  32         print "RECV: %s" % unicode(buf, 'utf-8').encode('ascii', 
'replace')
  33
  34     def rawDataOut(self, buf):
  35         print "SEND: %s" % unicode(buf, 'utf-8').encode('ascii', 
'replace')
  36
  37     def connected(self, xs):
  38         xs.rawDataInFn = self.rawDataIn
  39         xs.rawDataOutFn = self.rawDataOut
  40         print 'Connected.'
  41         self.xmlstream = xs
  42 #
  43         print 'Initializers', xs.initializers
  44         print 'Authenticator', xs.authenticator
  45         print 'Am I initialized?', xs.initiating
  46         # Log trafic out
  47
  48     def disconnected(self, xs):
  49         print 'Disconnected.'
  50         self.finished.callback(None)
  51
  52     def authenticated(self, xs):
  53         print "Authenticated."
  54         presence = domish.Element((None, 'presence'))
  55         xs.send(presence)
  56         self.reactor.callLater(5, xs.sendFooter)
  57
  58     def send(self, message):
  59         print 'Send', message
  60
  61     def init_failed(self, failure):
  62         print "Initialization failed. Failure:"
  63         print failure
  64 #        self.xmlstream.sendFooter()
  65 #        self.xmlstream.authenticator.initializeStream()


From sergun at gmail.com  Fri Mar 15 15:03:33 2013
From: sergun at gmail.com (Sergey Gerasimov)
Date: Fri, 15 Mar 2013 23:03:33 +0400
Subject: [Twisted-Python] eated traceback when decorate method already
	decorated by inlineCallbacks
In-Reply-To: <20130314142046.5790.387630841.divmod.xquotient.39@localhost6.localdomain6>
References: <1b1501ce2097$f8926fa0$e9b74ee0$@gmail.com>
	<20130314142046.5790.387630841.divmod.xquotient.39@localhost6.localdomain6>
Message-ID: <B5F08EED-8BEC-4C44-954B-A0A689BED5B4@gmail.com>



14.03.2013, ? 18:20, exarkun at twistedmatrix.com ???????(?):

> On 09:40 am, sergun at gmail.com wrote:
>> Hello to all!
>> 
>> Why traceback doesn't include call of g() here?
> 
> Tracebacks are tricky, and inlineCallbacks doesn't make them look 
> exactly like they would look if you didn't have Deferreds.
> 
> twisted.python.failure is a little bit better at handling tracebacks 
> from this sort of code than the traceback module is, so if you write the 
> code like this things will at least be a little better:
> 
>    from twisted.python.failure import Failure
> 
>    def decor1():
>        try:
>            res = yield f(*argv, **kw)
>        except:
>            Failure.printTraceback()
>        else:
>            defer.returnValue(res)

How can I catch failure?

In your example you call printTraceback as classmethod but it is instance one.



> Notice also that I moved returnValue outside of the try block. 
> `returnValue` is implemented using exceptions, so you *must not* catch 
> and handle the exception it raises or it won't work.

Thanks for that detail!

> 
> Jean-Paul
>> import traceback
>> from twisted.internet import defer, reactor
>> 
>> def decor1(f, *argv, **kw):
>>   @defer.inlineCallbacks
>>   def decor1():
>>       try:
>>           res = yield f(*argv, **kw)
>>           defer.returnValue(res)
>>       except:
>>           traceback.print_exc()
>>   return decor1
>> 
>> @defer.inlineCallbacks
>> def g():
>>   raise AttributeError
>>   yield defer.succeed(1)
>> 
>> @decor1
>> @defer.inlineCallbacks
>> def f():
>>   yield g()
>> 
>> f()
>> reactor.run()
>> 
>> I see just:
>> Traceback (most recent call last):
>> File "C:\testing\test.py", line 9, in decor1
>>   res = yield f(*argv, **kw)
>> AttributeError
>> 
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From mithrandi at mithrandi.net  Fri Mar 15 21:40:53 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 16 Mar 2013 03:40:53 +0200
Subject: [Twisted-Python] eated traceback when decorate method already
 decorated by inlineCallbacks
In-Reply-To: <20130314142046.5790.387630841.divmod.xquotient.39@localhost6.localdomain6>
References: <1b1501ce2097$f8926fa0$e9b74ee0$@gmail.com>
	<20130314142046.5790.387630841.divmod.xquotient.39@localhost6.localdomain6>
Message-ID: <CAMcKhMQdHLGDkMcyQq7Fh=ySOR3u0xm=zg5FMw1m7MxDC1AGGw@mail.gmail.com>

On Thu, Mar 14, 2013 at 4:20 PM,  <exarkun at twistedmatrix.com> wrote:
>         except:
>             Failure.printTraceback()

I think this was supposed to be:

except:
    Failure().printTraceback()


From itamar at futurefoundries.com  Fri Mar 15 22:20:39 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Fri, 15 Mar 2013 19:20:39 -0700
Subject: [Twisted-Python] Final request URI from an Agent response
In-Reply-To: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>
References: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>
Message-ID: <CAOp9P3pmqt2Gt0XtL4uKScMD-CR4=5oJmbmhxF7++JoExOq98Q@mail.gmail.com>

On Fri, Mar 15, 2013 at 4:11 AM, Jonathan Jacobs <
jonathan+twisted at jsphere.com> wrote:

>
> Should the IRI branch be finished before attempting this ticket? (Note
> that this doesn't necessarily include my volunteering.)
>
>
The IRI ticket should *not* be a dependency. It would be nice, but it's
unlikely it will happen anytime soon.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130315/3d853cc0/attachment.htm 

From abdulraufhaseeb at gmail.com  Sat Mar 16 06:22:47 2013
From: abdulraufhaseeb at gmail.com (Abdul Rauf)
Date: Sat, 16 Mar 2013 15:52:47 +0530
Subject: [Twisted-Python] Lore, Sphinx,
 and getting to the finish line (was: re: lore and tickets and other
 stuff)
In-Reply-To: <CA+U=zK178dwz6A_+V1cy60rK0O-b3KC01dzjEQkdKj82iXB_sw@mail.gmail.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
	<4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
	<CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
	<739CAE65-F29E-4FA8-96BF-A6C1548A9E02@twistedmatrix.com>
	<CA+U=zK178dwz6A_+V1cy60rK0O-b3KC01dzjEQkdKj82iXB_sw@mail.gmail.com>
Message-ID: <CADfPSp9N7PpQOReVYW0XEwoi2tmTpVL9j3KG0nvB6+MDfi47Cg@mail.gmail.com>

Hi,
I am very much interested to complete this project, i did apply to
Gsoc last time with this project and was rejected (however there were
better students). And i would be happy if i can take this time. Let me
know your thoughts.


On 3/7/13, Kevin Horn <kevin.horn at gmail.com> wrote:
> Sorry it's taken me so long to get back to this.  But it's gotten to be a
> Looong email.
>
> On Sat, Mar 2, 2013 at 3:14 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>> On Mar 1, 2013, at 9:35 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>>
>> That "never-ending" series of Lore source fixes took place over the
>> course
>> of a couple of weeks.  Doing things that way was not my idea, though it
>> seemed reasonable at the time because  the idea was that we would do the
>> cutover at the end of it.
>>
>>
>> Well, let's go to the video tape. Based on this comment -  <
>> http://twistedmatrix.com/trac/ticket/4500#comment:12> - these tickets
>> were closed over a period ranging from 2010/07 to 2011/03. 6 months isn't
>> quite "weeks", but okay I guess it wasn't "never-ending" either :).
>>
>>
> Hmmm.  I recall it as being much shorter.  Probably most of the work took
> place it two "spurts" around the beginning and end of that time, and that's
> why I remember it that way.  But I'm not interested in digging through a
> bunch of old dates to find out for sure.
>
>
>> (As an aside, lore2sphinx is in no way a "broken pile of regexes".  Not
>> to
>> say that it isn't broken in some really significant ways, because it is,
>> but it doesn't use regexes at all.  Just sayin'.)
>>
>>
>> Actually yeah, "regex" is just a curse-word here :).  It's the emitter
>> I'm
>> complaining about, anyway, not the parser, so deriding it as a "regex" is
>> in no way accurate.
>>
>
> I figured that was the case, I just wanted to say something so others
> reading this didn't get the wrong impression about how lore2sphinx is
> implemented.  I mean it's not code I'm very proud of, but it's not _that_
> bad :)
>
>
> <<< snip a bunch of stuff about who said what when, why I thought what I
> thought, etc. >>>
>
> It boils down to the fact that a bunch of the conversations happened either
> in person or on IRC.  This was mostly because I was in a hurry at the time,
> usually because I wanted to do something before additions were made to the
> documentation, which was in a somewhat "known" state (as in I knew how it
> was going to behave when run through lore2sphinx) at the time.
>
> Also, please elaborate on what you mean  by "do *everything* in one big
>> bang.  My intention was never to do anything but get the SphinxBuilder
>> working on that branch.  Was there something else you thought I was
>> doing?
>>  Was there something else I should (or should not) have been doing?
>>
>>
>> My reasoning goes like this: the ticket for the release tools is still
>> not
>> in review, so you must be waiting for something to re-submit it.  It
>> looks
>> like you responded to the code, so the only thing I could think you were
>> still waiting for would be for the lore sources themselves to be ready.
>>
>>
> It's been long enough that I can't fully recall my reasoning on this.  But
> _probably_ I decided that if I finished the release tools ticket, someone
> might use it.  Which would be great, except that I think I had decided that
> before that actually happened I needed to figure out a way to emit nicer
> output from lore2sphinx.  So I left it alone until I had figured out how to
> do that.
>
> At least, that _might_ have been part of my thought process.  It really was
> ages ago.
>
> [the fixed-up Lore sources] got left alone because of the release tools
>> hangup.  Ideally the release tools would have been done before the whole
>> lore-source-tweaking process, but they weren't.  I'll admit my
>> frustration
>> played a part in this, but so did the deafening silence I got when I
>> asked
>> for anyone to comment on the ticket.
>>
>>
>> Where and how did you ask people to comment on the ticket?  I don't
>> recall
>> being asked, and I tend to be pretty good about leaving prompts like that
>> in my inbox until I've done what was asked.  (Not *perfect*, of course,
>> and
>> if you asked a list then there might have been some bystander effect.)
>> It
>> seems like we might have avoided this whole mess if you had just attached
>> the 'review' keyword :).
>>
>
> On IRC.
>
>
>>
>> My perception has been that I would say "what do we need to do to make
>> this happen"?  There would be some hemming and hawing (and at least
>> several
>> times long discussions about how documentation didn't really fit the
>> regular UQDS process) and a sort of plan would be invented.  I would
>> proceed according to the plan as I understood it.  I would then say "OK,
>> we're ready"!  And then be told that some other thing not in the plan
>> needed to be done.  The cycle would then repeat.
>>
>>
>> The only "cycle" I can either see on the tickets or recall here is where
>> the release tools didn't come in to the initial plan.
>>
>
> This was the latest of several (3 or 4) according to my
> recollection/perception.  It doesn't really matter now.
>
>
>> No [the need for release automation] was not brought up until well into
>> the process. I (sort of) understand the desire for this, but it seems
>> pretty weird to be building what is essentially a wrapper for an existing
>> tool, along with tests for said wrapper,
>>
>>
>> OK.  I can believe that this did not happen.  One problem is that we (the
>> inner-circle old-school Twisted developers) tend to engage in
>> conversations
>> about how a thing might be done while at the same time we discuss what
>> must
>> be done.  And we also tend to discuss what policy is (or what all or some
>> of us believe it *ought to be* in some case, further confusing the issue)
>> without making explicit what the *purpose* of that requirement is.
>>
>> I would ask the community to help us with this by doing a couple of
>> things.
>>
>> If somebody says "X is policy", always ask for a link to it.  If there is
>> a link, it'll help you understand it better.  If there *isn't* a link,
>> then the authority telling you it's "policy" might just be remembering
>> that
>> it's the way we've done things since forever and of course it's a good
>> idea.  There are definitely things that I have thought were in the coding
>> standard that are not actually written down anywhere, on more than one
>> occasion.
>>
>> If a meandering discussion is happening - here, on the mailing list, on
>> the ticket - never be afraid to break it up and separate out the
>> different
>> concerns which are being discussed: what is necessary for compliance with
>> our development process, what would be a good idea from a design point of
>> view, how the work might be broken up to get through review more
>> manageably, what other concerns are in play.
>>
>> Especially, if you ever see a code review where a reviewer says "I
>> think..." without making it clear what you should *do*, you should always
>> ask, 'is this a requirement of the review or just some thoughts you
>> have'.
>>
>>
> And when we ask, we should ask on the ticket, and put it back into review,
> yes?  Because I think this was the part (or at least _A_ part) I was really
> missing here.
>
>
>> There's also the problem of "I think you should..." being interpreted as
>> "You must...".  It is *very* hard to consistently separate design
>> feedback from code review, although we try very hard; but, it's hard to
>> separate it out when reading it as well.  So one important point to keep
>> in
>> mind is that, as the author of a proposed change, outside the things that
>> are agreed upon policy consensus, you always have some degree of
>> discretion
>> to disagree with a reviewer.  And you should freely do so when submitting
>> anything for re-review.  It's best to just do this as quickly as
>> possible,
>> so that it gets back to the reviewer without a whole lot of delay, and
>> they
>> can respond with either "I still disagree, but you're doing the work, so
>> OK
>> go ahead" or "No, you really have to do this, it's required by policy
>> document X, here's a link" ;-).
>>
>>
>>>    1. The documentation itself needs to be able to be generated from any
>>>    version of trunk.  While one or two formatting snafus are acceptable
>>> to be
>>>    fixed after the fact, the documentation needs to be in a
>>> comprehensible
>>>    state in every revision of trunk, which means that in order to land
>>> on
>>>    trunk, the ReST output.
>>>
>>> So...you didn't finish that sentence.  I realize you apologized for
>> errors at the end of your mail, but I have a feeling you were going to
>> say
>> something rather important there...
>>
>>
>> Well yes, that was the point of the apology.  That was a rather important
>> thing.  What I was probably going to say was just:
>>
>> The ReST output needs to be in good enough shape to be generally
>> readable,
>> with a manageable number of errors.  But, we need to be able to *verify*
>> that it has not too many errors.
>>
>>
>> And I'd already discussed that somewhat above.
>>
>> Now that I've replied to all of that, let me give you a rundown of what
>> I've been thinking and planning, so that you have an idea of where I'm
>> coming from.
>>
>> Here are the various things that I have perceived to be
>> necessary/required
>> in order to get the conversion to happen:
>>
>> a) The conversion process needs to be able to be run concurrently with
>> Lore for an extended period of time.  In other words, Lore would be the
>> "official" version of the docs, and the Sphinx docs would be built in
>> some
>> form of automated fashion until everyone was happy with them and/or ready
>> to deprecate/abandon Lore.
>>
>>
>> Your understanding of this requirement is slightly off, I think, although
>> possibly the consequences are the same.  As per the difficulties I laid
>> out
>> above, about separating the requirements from the strategies for
>> satisfying
>> said requirements.
>>
>
> I've been told that almost verbatim, several times.  This is basically what
> led to the Sphinx buildbot happening.  Perhaps I wasn't clear about what I
> meant.
>
>
>> The thing that we weren't going to tolerate was any message saying that
>> people should hold off on writing documentation, even for "a little
>> while"
>> while we fixed up the lore conversion, because without a contractual
>> obligation for someone to finish this work, there's really no telling how
>> long "a little while" would be :).
>>
>
> Well, when I originally was pushing it, my plan was for that little while
> to be "today" (this was at PyCon during the only day of sprints I was able
> to attend), and if it didn't get done, we'd abandon that particular
> attempt.  You and exarkun managed to convince me that even this was
> probably not a very good idea though.
>
>
>> Since the whole point of this sphinx conversion is to appeal to
>> documentation authors who prefer the ReST format as input (it's
>> definitely
>> not to make the docs look nicer, writing a new stylesheet for Lore would
>> have taken 1/100th of the effort and nobody has expressed interest in
>> doing
>> that), creating a period where things were even *less* appealing to
>> documentation authors would defeat the purpose.
>>
>
> I actually considered the stylesheet thing, but it was really only a
> passing thought.  My personal motivation started with not being able to
> find things in the documentation.  So I started looking at the various Lore
> tickets to see whether there was something to clean up that would help.
>  And a bunch of them seemed to be asking for things that Sphinx already
> did.  Sphinx was starting to become a common tool, and I had used it on
> several other projects, and found it pleasant to work with.  Also, when I
> asked about Lore on IRC, I got a lot of "I'm not sure anyone knows how that
> works these days" and "oh man, I wish we didn't have to support that any
> more", etc.  So I started looking into how to convert the docs over to use
> Sphinx.
>
>
>> Another possible solution to this problem would be to modify Lore so it
>> could process ReST sources, so that we could convert the documentation
>> within the repository piecemeal, and start writing any new docs in ReST,
>> but still have a coherent whole of documentation produced, eventually
>> switching the documentation processor from Lore to Sphinx.
>>
>
> This would require someone smarter than me.  Or at least more versed in
> formal parsing theory/techniques.  Or something.  And that would be just to
> read the docutils sources.  I find them...alien. (though less so that when
> I first started looking at them...I'm not sure if they've improved, or I
> have)
>
>
>> Yet another possible solution would be to modify Sphinx, adding a plugin
>> to process the Lore sources.
>>
>
> This is more reasonable, but still has problems.  Actually the reasonable
> thing would be to create a docutils piece to process Lore sources, and then
> maybe some Sphinx extensions on top of that.  Or something.  Still, it
> might have been doable.  However, I think Lore would have had to be
> modified as well, and possibly the Lore format expanded
> to accommodate certain constructs that it just doesn't do right now (mostly
> I'm thinking of the toctree directive and related stuff).
>
>
>> As an aside: this is the part of the process which has been so
>> frustrating
>> to me, personally.  The two alternate solutions I proposed here (and have
>> proposed before) seem far saner and more manageable in terms of effort,
>> to
>> me.  But, everyone I have spoken to about docutils and ReST has told me
>> in
>> no uncertain terms that they are both a pile of heinous hacks that resist
>> any attempt at sensible software-engineering solutions to problems, so we
>> need to resort to hackish system-integration stuff like what we've done.
>>  This worries me.
>>
>
> Ooookaaaaay....I don't know how to respond to that exactly.
>
>
>> I know that Sphinx's output is well-loved by the Python community, but if
>> it's so hard to call into that we can't reasonably modify it to get an
>> XML
>> DOM that looks like Lore source to Lore, and it's so hard to plug in to
>> it
>> that we can't give it a data structure that it likes from Lore's XML DOM,
>> then how the heck is it being maintained?  And if it actually *isn't*
>> that
>> bad, then why haven't I managed to find someone that knows its code well
>> enough to do one or the other of these things?
>>
>
> It would be possible to make Sphinx emit Lore sources, though I'm not sure
> what that buys.  You could do this either through a custom Sphinx
> "builder", or possibly even just using a custom html template with the html
> builder.  But you'd need ReST sources to feed into Sphinx, so...
>
> You could write a docutils "parser" which parses a document and returns a
> "nodetree" data structure.  This would get you as far as docutils, but
> AFAIK there is no existing way to get Sphinx to use any parser other than
> the default ReST one.  You could probably create such a thing, which would
> almost certainly involve modifications to Sphinx, though that's not
> necessarily a big deal.  It might not even be hard.  I think this would
> actually be a lot easier now than when I started down this path, mostly
> because docutils seems to have better documentation on the nodes that can
> go in the "nodetree" I mentioned above.  Note that I said "seems" because
> I'm not sure if it's that docutils documentation has gotten more complete,
> or just that I've bounced around in it enough times to find things.  The
> Docutils docs have the same problem that the Twisted docs have, which is
> that they are nigh un-navigable.  (I also think that the docutils docs
> should start using Sphinx, but I'm not sure how well that would go over in
> that camp...)
>
> The main problem with creating such a parser, is that Sphinx uses a bunch
> of docutils extensions to tie together the disparate documents in your
> project, and Lore, like vanilla docutils, doesn't have much of a concept of
> being one document among many (at least not from within a document).  For
> example, it has things to handle tables of contents, cross document links
> (with the ability to link to a document section, rather than a specific
> document, so if it gets moved to a different document, the link gets
> adjusted), compilation for glossaries and index entries from across the
> docs project, etc.  So you'd need to add some stuff to Lore to account for
> this (some is already there).  And then we'd have to go through and modify
> a bunch of the Lore sources anyway.
>
> Like I said, this looks a lot more feasible now than it did when I first
> looked at it, though I'm not sure whether it's me or docutils/Sphinx that's
> changed.  Probably some of each.
>
> At any rate, back then it seemed awfully difficult, and less interesting.
>
> Hmmm.  And you'd also need to make some changes to the way Sphinx picks up
> files.  And probably some other stuff I haven't thought of.
>
> I have no direct knowledge of any of this stuff, because my main interest
>> here is improving the experience of working on Twisted, both for you,
>> Kevin, and for the people who will arguably be helped by the use of
>> Sphinx.
>>  Maybe I'm completely wrong and Sphinx is beautifully architected and we
>> could have done this from day 1.  But I faintly hope that some Docutils
>> and
>> Sphinx contributor hears that I said "sphinx is garbage" and makes a fool
>> of me by contributing either a lore modification or a sphinx plugin which
>> solves this whole problem so we can do the format or tool migration
>> incrementally :).
>>
>> b) Because of a), there needs to be tooling to run lore2sphinx (or
>> whatever) on a regular basis.  (This was sort of being done via the
>> Sphinx-building buildbot, but in a very ad-hockery sort of way, which was
>> brittle, broke a couple of times, and needed to be improved.)
>>
>>
>> Hmm. I wasn't aware of that. But it seems like it's running by a charm
>> now.
>>
>
> I think this is because a) exarkun fixed it a couple of times, and b) I
> stopped making changes to the lore2sphinx repo (which the buildbot pulls
> from).  I'm also referring here to something which is completely
> non-obvious to anyone who hasn't actually run lore2sphinx by hand, which is
> that the command line tool was fairly terrible in several ways.  This made
> it harder to use for development than it should have been.
>
>
>>
>> c) There needs to be release management tooling to build the Sphinx docs
>> from ReST into whatever formats we want to publish (HTML and PDF to
>> start,
>> maybe others later on)
>>
>>
>> Yup.  (ePub?  PDF is so last-century... :))
>>
>> d) Convert the Lore sources to better ReST documents without all the
>> problems that the current lore2sphinx output has.
>>
>>
>> So, this wasn't *necessary*.  If we had gotten through the release
>> automation stuff - and I still don't understand why that's stuck - we
>> could
>> have merged it.
>>
>
> Well, I decided it was.  Or at least really really desirable.
>
>
>> I at one time thought this was pretty impractical.  My first attempt at a
>> conversion tool tried to use an intermediate object model, but I ran into
>> trouble when trying to combine the various objects.  So I abandoned the
>> effort and created what became lore2sphinx, which basically just combined
>> a
>> bunch of strings.  I then figured out a way of making the intermediate
>> object thing work, and that was lore2sphinx-ng.  Then it became
>> convenient
>> to split out the intermediate object model from the documetn processing
>> code, so I put all of that into a library and that became rstgen.
>>
>> It seems the saving grace here is that rstgen might be a generally useful
>> tool in its own right, with more of a long-term future than lore2sphinx
>> would have had.
>>
>
> I admit that I have become more interested in the actual problem of
> "generating ReST" than I once was.  And I hope that it will become a
> generally useful tool.
>
> And probably one of the reasons I have been making such relatively slow
> progress on it is is _because_ I'm trying to solve a more general problem
> than I once was.  The original lore2sphinx (the one running on the buildbot
> now) was very much a minimal-thing-that-could-possibly-work kind of
> solution.  It tried to do just enough to get the job done.  It sort of did
> get the job done, but I was never very satisfied with it.
>
>
>> (For anyone who is curious, the lore2sphinx-ng repo is forked off from
>> the
>> lore2sphinx repo, primarily because I didn't want to break the Sphinx
>> buildbot by making drastic changes.)
>>
>>
>> Have a link?
>>
>
> I've posted it a couple of times in this thread, though I can hardly blame
> you for either missing it or losing track of it.
>
> original: https://bitbucket.org/khorn/lore2sphinx
> extra-crispy: https://bitbucket.org/khorn/lore2sphinx-ng
>
>
>>
>> Here's what my plan was prior to this whole discussion getting started
>> again.
>>
>> 1) Finish rstgen, where "finished" in this instance is defined as "is
>> capable of generating all the vanilla docutils and sphinx-specific ReST
>> elements that we need for converting the
>> Twisted documentation.
>>
>>
>> Sounds like a worthy goal, although I don't think this is necessarily
>> required.  Have you been working on it for the last 2 years?  Do you have
>> any idea when it might be done?  It might be worthwhile to write a
>> *smaller* .
>>
>
> I started on rstgen a bit more than a year ago.  I was hung up on the
> problem of how to combine various parts of a document for a while without
> having the crazy space-handling issues.  And also I've been trying to come
> up with a relatively friendly API, and enough generality that it will end
> up useful outside of the lore2sphinx context.
>
> I really started on l2s-ng last July during "Julython".  I've been working
> on it in fits and starts a few times since then.
>
>
>>
>> 2) Finish lore2sphinx-ng (which would probably have ended with merging it
>> back into the lore2sphinx repo), where "finished" means that it would be
>> capable of processing all the XHTML Lore tags that were defined in the
>> Lore
>> documentation and used in the Twisted documentation, and generating a
>> tree
>> of rstgen elements, which could then be rendered into ReST.
>>
>>
>> Cool.
>>
>> While this would be handy, especially for people working on documentation
>> branches, it's not necessarily necessary.
>>
>> (this would also serve to satisfy b) above, as the CLI in lore2sphinx-ng
>> is less...well, let's just call it broken than lore2sphinx's was/is.)
>>
>>
>> OK.
>>
>> 3) Go back and finish SphinxBuilder (release tooling for building a
>> sphinx
>> project, which is basically a wrapper for sphinx-build, plus some vague
>> "version feature").
>>
>>
>> This is really the crux; this is the thing you should work on first, I
>> think, even if you're going to keep working on lore2sphinx-ng.  Basically
>> the only reason that I was keen to get the lore to sphinx conversion
>> improved in the first place was that creating this tool seemed to be
>> dragging on for quite a while after the "chunk tickets" were done.  But
>> now, this tool is almost done, and we could re-do the lore-source review
>> if
>> you wanted to do that.  The current lore2sphinx might well be good enough
>> to just go with, especially if the next-generation version is going to
>> take
>> another six months to finish.
>>
>
> I'll take a look at this again soonish (a week?  this month? don't know.).
>  Probably it's a matter of:
>
> - merge forward (it has been a while)
> - figure out how the other tools guess/determine the Twisted version in the
> checkout, and make SphinxBuilder do that.
> - get it reveiewed
> - commit
>
> But I'll have to remember how to use combinator again (which will be much
> easier now that the combinator "docs" are on the Twisted wiki...thanks to
> whomever did that!)
>
> Yes, I could probably use Bazaar, but so far every time I've tried that,
> I've ended up spending waaaaaay too much time just on the VCS.  I guess I
> have some kind of mental block with bzr.  I'll get over it someday I
> suppose.
>
>
>>
>> 4) Get someone to use something less hackish than what's currently
>> building the Sphinx docs on the buildbot, and preferably in such a way
>> that
>> the results of those builds could be published somewhere and have
>> persistent links.  Currently the results of what the Sphinx buildbot does
>> are stored for a time, and then go away, so you'll see links to build
>> results in some trac tickets that go nowhere, which is decidedly
>> unhelpful.
>>  My plan was that we'd set up something where the Sphinx docs would get
>> generated and published someplace for every buildbot build so that we
>> could
>> always have the current results for the lore to sphinx conversion for the
>> tip of each branch.  I have no idea whether this is actually feasible or
>> practical, but it seemed like it would be useful.
>>
>>
>> OK, *this* sounds like really unnecessary turd-polishing ;-).  This
>> builder is an interim step; the more interesting step is the builder that
>> just builds the sphinx docs, in the same way that the current builder
>> builds the lore docs.  Furthermore, it seems to be working fine.  Build
>> results links that go nowhere are a known problem with buildbot, since it
>> does eventually lose most history, and this type of history takes up a
>> fair
>> bit of disk space.
>>
>
> Well, it was mostly motivated by the fact that we were doing a lot of
> linking to build results that would then cease to exist for a while, and it
> really annoyed me.  It doesn't seem nearly as "necessary" to me now as it
> once did.
>
>
>>
>> 5) Proceed with Sphinx docs being built from lore sources, making tweaks
>> as necessary to lore2sphinx(ng) for as long as it took for the generated
>> docs to be good enough to justify switching to Sphinx entirely.
>> 6) Switch to Sphinx entirely.
>>
>> I really wasn't planning on trying to get people excited about switching
>> to Sphinx again until 1) and 2) were at least "mostly" done (for certain
>> values of done) and I had gone back to finish 3).
>>
>> So.  I guess at this point the question is whether to try and go with
>> what's there (lore2sphinx) or finish up the "new stuff" (lore2sphinx-ng +
>> rstgen).  I think 3-6 in my above plan need to happen in any case, and I
>> think those will be much easier with lore2sphinx-ng+rstgen.
>>
>>
>> This decision is really determined by time estimates.
>>
>> In any case, work out the sphinx release automation tool first, since we
>> need that regardless of how we switch over
>>
>
> Got it.
>
>
>>
>> IIRC, rstgen has support for most of the vanilla docutils elements, with
>> the notable exception of tables (and maybe definition lists...can't
>> recall
>> whether I finished those).  It has a basic level of test coverage (of
>> course you can never have too many tests) for rendering the elements
>> individually, and some test for elements in combination (particularly
>> nested lists).  Footnotes and Citations I think also need some work,
>> which
>> I have a plan for, but haven't implemented yet (i don't think).
>>
>>
>> The "new" lore2sphinx CLI tool needs more work, but is relatively
>> straightforward.  Like the old tool, it's basically an elementtree
>> processor, except instead of spitting out strings that get joined
>> together
>> (which granted was an unholy mess), it generates rstgen elements, which
>> all
>> have a .render() method.  After processing a Lore document, you shoudl
>> end
>> up with a rstgen.Document object.  You call it's render() method, which
>> calls it's children's render() methods, etc. and it's turtles all the way
>> down.
>>
>> The framework is there for the new CLI tool, it's mostly a matter of
>> writing a bunch of short methods that take elementtree elements as input
>> and return appropriate rstgen objects.
>>
>> Obviously these tools aren't finished, but they produce much better
>> output
>> than the old version of lore2sphinx w.r.t. whitespace handling, paragraph
>> wrapping, etc.
>>
>>
>> Aesthetically, this appeals to me a lot more than going with the
>> messiness
>> of lore2sphinx.
>>
>
> Me too.
>
>
>
>> But it is _not_ a requirement.
>>
>
> Understood.  Though I think it might be a practical requirement, even if it
> isn't a policy requirement.  If that makes sense.
>
>
>
>> Some of the code is still pretty messy, but nowhere near the train wreck
>> that the current/old version of lore2sphinx is.  By which I mean it _can_
>> be cleaned up, it just hasn't been yet.  In particular there's some
>> places
>> in rstgen where the API is (to me at least) obviously awful, but I
>> haven't
>> gotten around to fixing it yet.
>>
>> Please review the code.  Please feel free to ask questions if you're
>> interested.
>>
>> Personally, I've gotten over being in a hurry about all this, and I think
>> a robust tool is more likely to succeed in the long run, though finishing
>> it may make the run a bit longer.  So I'm for finishing
>> lore2sphinx-ng+rstgen.
>>
>>
>> I think a little false urgency might not hurt here :-).  I'm not going to
>> work on the tool - just writing these emails probably blew my Twisted
>> development budget for the next two months ;-)
>>
>
> I can relate... :)
>
>
>> - but I will do my best to quickly clear up any procedural
>> what-needs-to-be-done questions unambiguously.  Please ping if anything
>> gets you stuck.
>>
>
> I'll let you know.
>
> --
> Kevin Horn
>


-- 
Cordially
Abdul Rauf (haseeb)


From exarkun at twistedmatrix.com  Sat Mar 16 09:49:30 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 16 Mar 2013 13:49:30 -0000
Subject: [Twisted-Python] Final request URI from an Agent response
In-Reply-To: <CAOp9P3pmqt2Gt0XtL4uKScMD-CR4=5oJmbmhxF7++JoExOq98Q@mail.gmail.com>
References: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>
	<CAOp9P3pmqt2Gt0XtL4uKScMD-CR4=5oJmbmhxF7++JoExOq98Q@mail.gmail.com>
Message-ID: <20130316134930.3608.1729472751.divmod.xquotient.6@localhost6.localdomain6>




On 02:20 am, itamar at futurefoundries.com wrote:
>On Fri, Mar 15, 2013 at 4:11 AM, Jonathan Jacobs <
>jonathan+twisted at jsphere.com> wrote:
>>
>>Should the IRI branch be finished before attempting this ticket? (Note
>>that this doesn't necessarily include my volunteering.)
>The IRI ticket should *not* be a dependency. It would be nice, but it's
>unlikely it will happen anytime soon.

The hard part of the IRI ticket is parsing all the extremely complex 
forms in which an IRI can appear, right?

If so, I agree.  However, there's no reason we can't have an object that 
represents an IRI *without* writing a parser for all those forms.  Agent 
only needs minimal functionality of being able to figure out the 
hostname, port number, and whatever makes up the rest.

Jean-Paul


From jonathan+twisted at jsphere.com  Sat Mar 16 10:52:20 2013
From: jonathan+twisted at jsphere.com (Jonathan Jacobs)
Date: Sat, 16 Mar 2013 16:52:20 +0200
Subject: [Twisted-Python] Final request URI from an Agent response
In-Reply-To: <20130316134930.3608.1729472751.divmod.xquotient.6@localhost6.localdomain6>
References: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>
	<CAOp9P3pmqt2Gt0XtL4uKScMD-CR4=5oJmbmhxF7++JoExOq98Q@mail.gmail.com>
	<20130316134930.3608.1729472751.divmod.xquotient.6@localhost6.localdomain6>
Message-ID: <CAM187SH0ezbA03QzP2YE1Lwsx_7fmMALuG+EMQSac4f9-teVag@mail.gmail.com>

On Sat, Mar 16, 2013 at 3:49 PM, <exarkun at twistedmatrix.com> wrote:

> However, there's no reason we can't have an object that
> represents an IRI *without* writing a parser for all those forms.  Agent
> only needs minimal functionality of being able to figure out the
> hostname, port number, and whatever makes up the rest.
>


Isn't this currently called twisted.web.client._URL? (Although _URL still
needs some more data to fill this role.)

I do like this idea, although I keep coming back to wondering how we
provide this to Request initially, an additional parameter was not received
with much enthusiasm on IRC. It would be unfortunate if Request.uri is
going to mean "the relative URI" forever. And, when the IRI ticket is
finally complete, are we going to have to introduce yet another API for
getting an IRI object?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130316/7b53d2d9/attachment.htm 

From itamar at futurefoundries.com  Sat Mar 16 11:43:15 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sat, 16 Mar 2013 08:43:15 -0700
Subject: [Twisted-Python] Final request URI from an Agent response
In-Reply-To: <CAM187SH0ezbA03QzP2YE1Lwsx_7fmMALuG+EMQSac4f9-teVag@mail.gmail.com>
References: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>
	<CAOp9P3pmqt2Gt0XtL4uKScMD-CR4=5oJmbmhxF7++JoExOq98Q@mail.gmail.com>
	<20130316134930.3608.1729472751.divmod.xquotient.6@localhost6.localdomain6>
	<CAM187SH0ezbA03QzP2YE1Lwsx_7fmMALuG+EMQSac4f9-teVag@mail.gmail.com>
Message-ID: <CAOp9P3rYwVZcqLUuLc+fu70aeKF2eq+cRoLV=zX7pwchdjPMWg@mail.gmail.com>

On Sat, Mar 16, 2013 at 7:52 AM, Jonathan Jacobs <
jonathan+twisted at jsphere.com> wrote:

>
> On Sat, Mar 16, 2013 at 3:49 PM, <exarkun at twistedmatrix.com> wrote:
>
>> However, there's no reason we can't have an object that
>> represents an IRI *without* writing a parser for all those forms.  Agent
>> only needs minimal functionality of being able to figure out the
>> hostname, port number, and whatever makes up the rest.
>>
>
>
> Isn't this currently called twisted.web.client._URL? (Although _URL still
> needs some more data to fill this role.)
>
> I do like this idea, although I keep coming back to wondering how we
> provide this to Request initially, an additional parameter was not received
> with much enthusiasm on IRC. It would be unfortunate if Request.uri is
> going to mean "the relative URI" forever.
>

An additional attribute is not ideal... but it's better than changing an
existing attribute's contents, which is *really* backwards incompatible.
It's probably too late for the ideal solution anyway, let's just get a
decent one done.


> And, when the IRI ticket is finally complete, are we going to have to
> introduce yet another API for getting an IRI object?
>

Or just IRI.fromString() or something.

Why don't you start coding, and we can then talk about actual
implementation details? It's going to be pretty short, so any review
comments should hopefully not take too long to address.

-Itamar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130316/fedfac34/attachment.htm 

From exarkun at twistedmatrix.com  Sat Mar 16 11:48:21 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 16 Mar 2013 15:48:21 -0000
Subject: [Twisted-Python] Final request URI from an Agent response
In-Reply-To: <CAM187SH0ezbA03QzP2YE1Lwsx_7fmMALuG+EMQSac4f9-teVag@mail.gmail.com>
References: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>
	<CAOp9P3pmqt2Gt0XtL4uKScMD-CR4=5oJmbmhxF7++JoExOq98Q@mail.gmail.com>
	<20130316134930.3608.1729472751.divmod.xquotient.6@localhost6.localdomain6>
	<CAM187SH0ezbA03QzP2YE1Lwsx_7fmMALuG+EMQSac4f9-teVag@mail.gmail.com>
Message-ID: <20130316154821.3608.2127715739.divmod.xquotient.14@localhost6.localdomain6>

On 02:52 pm, jonathan+twisted at jsphere.com wrote:
>On Sat, Mar 16, 2013 at 3:49 PM, <exarkun at twistedmatrix.com> wrote:
>>However, there's no reason we can't have an object that
>>represents an IRI *without* writing a parser for all those forms. 
>>Agent
>>only needs minimal functionality of being able to figure out the
>>hostname, port number, and whatever makes up the rest.
>
>
>Isn't this currently called twisted.web.client._URL? (Although _URL 
>still
>needs some more data to fill this role.)

Something like it, yea.  Although please do not expose a tuple subclass 
publicly (in fact, if you could get rid of that tuple subclass while 
working on this, I don't think it would hurt. :)
>I do like this idea, although I keep coming back to wondering how we
>provide this to Request initially, an additional parameter was not 
>received
>with much enthusiasm on IRC. It would be unfortunate if Request.uri is
>going to mean "the relative URI" forever.

Yes.  I wish the API had been more well considered before being exposed 
publicly.
>And, when the IRI ticket is
>finally complete, are we going to have to introduce yet another API for
>getting an IRI object?

The object we expose now should be forward compatible with the future 
perfect IRI object so that we can replace it with the IRI object when 
that is ready.

Jean-Paul


From bkuhn at sfconservancy.org  Sat Mar 16 12:36:46 2013
From: bkuhn at sfconservancy.org (Bradley M. Kuhn)
Date: Sat, 16 Mar 2013 09:36:46 -0700
Subject: [Twisted-Python] TODAY @ 4PM in Rm 202: BoF/Meetup session at PyCon
	USA 2013
In-Reply-To: <87mwu63uc9.fsf@ebb.org> (Bradley M. Kuhn's message of "Thu, 14
	Mar 2013 07:54:30 -0700")
References: <87y5drl7pe.fsf@ebb.org>
	<CAK5idxQ5ir_LGeyeYTY5EX5f_Qf0KPG9naJfVV5iLp73THU6Fw@mail.gmail.com>
	<87mwu63uc9.fsf@ebb.org>
Message-ID: <874ngbpaht.fsf_-_@ebb.org>

I've set up a Conservancy BoF/Meetup session today at 16:00 (4PM) in
Room 202 (which is on floor 2A, you can find it on the map).

The meeting will last one hour, and is directly after the PyPy BoF
session (and in the same room).

Agenda for the earlier 4PM discussion is open, but can include:
   * Questions/concerns that existing Conservancy projects has.

   * Questions/discussion from existing Conservancy applicants or
     projects considering offers for membership.

   * A chance for different Representatives / Project Leadership
     Committess / contractors from different Conservancy projects to
     meet each other!

I look forward to seeing you there!
-- 
Bradley M. Kuhn, Executive Director, Software Freedom Conservancy


From _ at lvh.cc  Sat Mar 16 15:03:40 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 16 Mar 2013 12:03:40 -0700
Subject: [Twisted-Python] TODAY @ 4PM in Rm 202: BoF/Meetup session at
 PyCon USA 2013
In-Reply-To: <874ngbpaht.fsf_-_@ebb.org>
References: <87y5drl7pe.fsf@ebb.org>
	<CAK5idxQ5ir_LGeyeYTY5EX5f_Qf0KPG9naJfVV5iLp73THU6Fw@mail.gmail.com>
	<87mwu63uc9.fsf@ebb.org> <874ngbpaht.fsf_-_@ebb.org>
Message-ID: <CAE_Hg6Z5a=b5MEG43gGY+wd_UtUkZe4ZB31FpRwJn7omw4GWNw@mail.gmail.com>

I won't be able to make it :( My talk is from 4:15 PM onwards.


On Sat, Mar 16, 2013 at 9:36 AM, Bradley M. Kuhn <bkuhn at sfconservancy.org>wrote:

> I've set up a Conservancy BoF/Meetup session today at 16:00 (4PM) in
> Room 202 (which is on floor 2A, you can find it on the map).
>
> The meeting will last one hour, and is directly after the PyPy BoF
> session (and in the same room).
>
> Agenda for the earlier 4PM discussion is open, but can include:
>    * Questions/concerns that existing Conservancy projects has.
>
>    * Questions/discussion from existing Conservancy applicants or
>      projects considering offers for membership.
>
>    * A chance for different Representatives / Project Leadership
>      Committess / contractors from different Conservancy projects to
>      meet each other!
>
> I look forward to seeing you there!
> --
> Bradley M. Kuhn, Executive Director, Software Freedom Conservancy
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130316/3e04b34d/attachment.htm 

From exarkun at twistedmatrix.com  Sun Mar 17 00:05:25 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 Mar 2013 04:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1363493125.3.342548064@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130317/bf3ee971/attachment.htm 

From burak.arslan at arskom.com.tr  Sun Mar 17 14:58:23 2013
From: burak.arslan at arskom.com.tr (burak.arslan at arskom.com.tr)
Date: Sun, 17 Mar 2013 18:58:23 +0000
Subject: [Twisted-Python] TWISTED DINNER TOMORROW: 5:30PM on
	Sunday	2013-03-17 at Buca di Beppo in Campbell, CA.  RSVP required.
In-Reply-To: <87li9nmb90.fsf_-_@ebb.org>
References: <878v5rmmf7.fsf@ebb.org>
	<05DBF422-58C1-4D77-B384-A8777940A1E0@twistedmatrix.com>
	<87wqta10g2.fsf@ebb.org>
	<6B75AE95-57D3-44B7-B8F7-339F277123B0@twistedmatrix.com>
	<20130315233055.GA18497@ebb.org> <87li9nmb90.fsf_-_@ebb.org>
Message-ID: <qccz2o.mjtjdh.2t93zf-qmf@node1.arskomhosting.com>

Hello!

please count me in, i think i'll be anle to make it.

Thanks

--
Sent from my mobile. Pardon the brevity.On 16/03/2013 11:48 Bradley M. Kuhn wrote:
On behalf of the Twisted Project Leadership Committee at Software
Freedom Conservancy, I'd like to invite all Twisted developers and
contributors who are here at PyCon 2013 to the Second Annual Twisted
Project Dinner at Buca di Beppo in Campbell, CA.

I've made a reservation for 17:30 (5:30 PM) tomorrow, Sunday 17 March
2013.

*Please* RSVP by private email to me at <bkuhn at sfconservancy.org> by
noon (12:00) on Sunday so I can update the restaurant with the proper
number for the reservation.

Let's meet by 5PM (17:00) in the lobby of the Hyatt Regency Santa Clara
to coordinate rides from the venue, with a plan to be leaving by 5:15
PM.  We'll get cabs as necessary if there aren't enough cars among us to
get us all there.

If you'd like to meet us at the restaurant, here's the address:

Buca di Beppo	
1875 S Bascom Ave
Campbell, CA 95008
Phone: +1-408-377-7722
URL: http://www.bucadibeppo.com/restaurants/ca/campbell/

The reservation is in my name, in case you arrive at the restaurant
before the main group.
-- 
Bradley M. Kuhn, Executive Director, Software Freedom Conservancy

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From duncan.mcgreggor at gmail.com  Sun Mar 17 16:25:17 2013
From: duncan.mcgreggor at gmail.com (Duncan M. McGreggor)
Date: Sun, 17 Mar 2013 13:25:17 -0700
Subject: [Twisted-Python] TWISTED DINNER TOMORROW: 5:30PM on Sunday
	2013-03-17 at Buca di Beppo in Campbell, CA.  RSVP required.
In-Reply-To: <87li9nmb90.fsf_-_@ebb.org>
References: <878v5rmmf7.fsf@ebb.org>
	<05DBF422-58C1-4D77-B384-A8777940A1E0@twistedmatrix.com>
	<87wqta10g2.fsf@ebb.org>
	<6B75AE95-57D3-44B7-B8F7-339F277123B0@twistedmatrix.com>
	<20130315233055.GA18497@ebb.org> <87li9nmb90.fsf_-_@ebb.org>
Message-ID: <B049A514-AD67-4B03-9418-CCEA621FD44A@gmail.com>

Yes!

I'm coming :-)

d

Sent from my iPhone

On Mar 16, 2013, at 11:48 AM, "Bradley M. Kuhn" <bkuhn at sfconservancy.org> wrote:

> On behalf of the Twisted Project Leadership Committee at Software
> Freedom Conservancy, I'd like to invite all Twisted developers and
> contributors who are here at PyCon 2013 to the Second Annual Twisted
> Project Dinner at Buca di Beppo in Campbell, CA.
> 
> I've made a reservation for 17:30 (5:30 PM) tomorrow, Sunday 17 March
> 2013.
> 
> *Please* RSVP by private email to me at <bkuhn at sfconservancy.org> by
> noon (12:00) on Sunday so I can update the restaurant with the proper
> number for the reservation.
> 
> Let's meet by 5PM (17:00) in the lobby of the Hyatt Regency Santa Clara
> to coordinate rides from the venue, with a plan to be leaving by 5:15
> PM.  We'll get cabs as necessary if there aren't enough cars among us to
> get us all there.
> 
> If you'd like to meet us at the restaurant, here's the address:
> 
> Buca di Beppo    
> 1875 S Bascom Ave
> Campbell, CA 95008
> Phone: +1-408-377-7722
> URL: http://www.bucadibeppo.com/restaurants/ca/campbell/
> 
> The reservation is in my name, in case you arrive at the restaurant
> before the main group.
> -- 
> Bradley M. Kuhn, Executive Director, Software Freedom Conservancy
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From glyph at twistedmatrix.com  Mon Mar 18 01:17:11 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 17 Mar 2013 22:17:11 -0700
Subject: [Twisted-Python] Final request URI from an Agent response
In-Reply-To: <CAM187SH0ezbA03QzP2YE1Lwsx_7fmMALuG+EMQSac4f9-teVag@mail.gmail.com>
References: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>
	<CAOp9P3pmqt2Gt0XtL4uKScMD-CR4=5oJmbmhxF7++JoExOq98Q@mail.gmail.com>
	<20130316134930.3608.1729472751.divmod.xquotient.6@localhost6.localdomain6>
	<CAM187SH0ezbA03QzP2YE1Lwsx_7fmMALuG+EMQSac4f9-teVag@mail.gmail.com>
Message-ID: <305D44B9-DDD2-4F15-B692-DAB8438C0AEF@twistedmatrix.com>

On Mar 16, 2013, at 7:52 AM, Jonathan Jacobs <jonathan+twisted at jsphere.com> wrote:

> And, when the IRI ticket is finally complete, are we going to have to introduce yet another API for getting an IRI object?

It seems to me that it would be a compatible change to have an IRI.fromString method that could do some extremely straightforward parsing - heck, even ASCII-only! - and then add support for more complex forms later.  After all, we have APIs like clientFromString which explicitly support extension; the contract is just (string)->something or (string)->CantGiveYouSomething; the exact format of the string is up to modification.  (Although I would suggest that once we have tests for parsing a particular form we should never _remove_ that form...)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130317/14e1bb3f/attachment.htm 

From ralphm at ik.nu  Mon Mar 18 02:07:59 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Sun, 17 Mar 2013 23:07:59 -0700
Subject: [Twisted-Python] Jabber client, tls and iqauth
In-Reply-To: <51433EFC.4010608@rkade.fr>
References: <51433EFC.4010608@rkade.fr>
Message-ID: <5146AF3F.5020201@ik.nu>

On 2013-03-15 08:32, rakdeFR wrote:
> Hi!
>
> I did some searches about my problem and didn't find any thing that
> match in the archives.
>
> I'm trying to do a simple jabber client with the twisted framework in
> order to automatically send messages.
>
> The server is a prosody server, and enabled the tls and iq auth.
>
> So far, I can connect to the server, and can't login.

Before going into the problem you might be having, are you referring to 
non-SASL authentication [1]? If so, that way of authenticating is 
obsolete since 2008 and all XMPP clients and servers are required to do 
SASL authentication instead.

Does that Prosody server have SASL explicitly disabled? It would also be 
useful to have the traffic log. Be sure to redact (encoded) credentials.

[1] http://xmpp.org/extensions/xep-0078.html

-- 
ralphm


From sergun at gmail.com  Mon Mar 18 10:49:13 2013
From: sergun at gmail.com (Sergey Gerasimov)
Date: Mon, 18 Mar 2013 18:49:13 +0400
Subject: [Twisted-Python] banana SIZE_LIMIT
Message-ID: <025101ce23e7$c2d687e0$488397a0$@gmail.com>

Hi,

Are they some simple ways (keeping existing interface) around BananaError
for long values returned from PB methods?





From techtonik at gmail.com  Mon Mar 18 11:16:57 2013
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 18 Mar 2013 18:16:57 +0300
Subject: [Twisted-Python] Twisted Visualizations
Message-ID: <CAPkN8xJLtydZTbw1U8dSu+J96zyFgRhqG3LAKgnDbdHwbnE6gg@mail.gmail.com>

Hi,

I always thought that there is not enough art in STEM education, and
looking at how the STEAM powered education gains momentum, I can not resist
to throw in the idea to the Python community.

STEAM = (Science, Technology, Engineering, Arts, Mathematics)

So far, the PyCon has talks that cover everything above around the core,
but not really much of A stuff. To me it would be interesting to see the
visualization of Twisted, the visualization of Stackless, the visualization
of how source code transforms to data and code sections in memory and how
the data is processed in this memory.

That may not be strictly related to the Python, but it is vital for Python
development that people know how things work starting from the moment they
press a key to launch a Python interpreter. That's the first thing people
do - they touch the key on a keyboard. That's  the entrypoint .

For the people who want to start with Python it will be interesting to see
how systems work in 3D, 2D or any other xD that is accepted by human brain
(even in 1D if we can accept the idea of a simple scroller for Python
source code). It will be interesting to see open source visualization
models that many people can iterate on and improve in parts.

I imagine some things to a some degree and can draw some sketches on paper,
but what would be awesome if people at PyCon could use the chance to gather
together and discuss the idea from the perspective of folks with visual
arts experience (Blender, ...) - will those twisted visualizations be
awesome? Will they be useful? Interesting for artists? What could happen to
make them possible and the whole process fun.
-- 
anatoly t.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130318/2ce46b82/attachment.htm 

From kmcintyre at greenchargenet.com  Mon Mar 18 15:14:06 2013
From: kmcintyre at greenchargenet.com (Kevin McIntyre)
Date: Mon, 18 Mar 2013 12:14:06 -0700
Subject: [Twisted-Python] more complex IBodyProducer?
Message-ID: <CAFvbmcnj2xpDpbdWz4g1ojU-efN0deD52gv1RZtVfPDi6oZuMQ@mail.gmail.com>

has anyone implemented a more complex IBodyProducer than

class POSTRequestProducer():
    implements(IBodyProducer)
    def __init__(self, body):
        self.body = body
        self.length = len(self.body)

    def startProducing(self, consumer):
        consumer.write(self.body)
        return succeed(None)

    def pauseProducing(self):
        pass

    def stopProducing(self):
        pass


I have an upload intensive application, that during periods of poor
connectivity ends up with a lots on zombie http TCP connections.  I'm
thinking maybe that the "pause" is being called and that my request
deferred is in a paused state.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130318/3635b339/attachment.htm 

From adi at roiban.ro  Mon Mar 18 15:32:00 2013
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 18 Mar 2013 21:32:00 +0200
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
	<CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
	<20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>
Message-ID: <CAFycZ9cC1oE6a_+_x_kV7oTfL12jePbY_OM+DKt9RApNMYR5oQ@mail.gmail.com>

On 22 January 2013 22:03,  <exarkun at twistedmatrix.com> wrote:
> On 09:29 am, adi at roiban.ro wrote:
>>On 22 January 2013 02:21,  <exarkun at twistedmatrix.com> wrote:
>>>On 20 Jan, 02:35 pm, adi at roiban.ro wrote:

I agree that this is a ugly hack and I removed the project.

>
> Hi Adi,
>
> trial does what it does by touching a lot of internal stuff as well.
> This is still bad, but at least it's our fault if it ever breaks instead
> of yours.  There's also a long term plan (or "plan" may be putting it
> too strongly, perhaps I should say "hope") that this part of trial will
> change to only use public interfaces.  This will probably require
> reactors actually implementing restartability, or it will require
> changing the trial feature slightly (eg, so it starts a reactor, runs
> all tests, then stops the reactor - if it did this, I'm sure you can
> imagine how "waiting" for a Deferred would just be adding a callback to
> the right place, as in any other Twisted-based application).
>
> Are you interested in helping out with making reactors restartable? :)

Sorry for the late reply.

I am still clumsy when working with Twisted so I don't know if I can
help to much here.

I don't know what is expected from a restartable reactor.

The way I am testing deferreds is by starting the reactor, allow for
the deferred to execute and then stop the reactor.

I don't want to pause it and then continue the execution from where it
was stopped.

To help with debugging I am also printing a snapshot of reactor state
at a certain time.

----

I prefer the Arrange/Act/Assert way of writing test:


checker = mk.credentialsChecker()
credentials = mk.credentials()

deferred = checker.requestAvatarId(credentials)
failure = self.getDeferredFailure(deferred)

self.assertFailureType(AuthentiationError, failure)
self.assertEqual(credentials.username, failure.value.username)


I found it easier to read than this version:


checker = mk.credentialsChecker()
credentials = mk.credentials()

    def check_result(result_or_failure):
        self.assertFailureType(AuthentiationError, failure)
        self.assertEqual(credentials.username, failure.value.username)

deferred = checker.requestAvatarId(credentials)
deferred.addBoth(check_result)

return deferred

--------

I have updated the code to use as many public reactor members as possible.

The following private member are still use:
reactor._startedBefore, reactor._started

It uses the following public methods:
startRunning(), doIteration(), stop(), iterate()

Here is the main part that blocks the execution until the deferred got a result.
It executes the deferred in the reactor loop.

https://github.com/chevah/empirical/blob/master/chevah/empirical/testcase.py#L240

------

Maybe this is has only limited usage, but I just wanted to share this work.
For me, this makes writing test a much nicer experience.

Cheers,
-- 
Adi Roiban


From glyph at twistedmatrix.com  Mon Mar 18 15:35:51 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 18 Mar 2013 12:35:51 -0700
Subject: [Twisted-Python] banana SIZE_LIMIT
In-Reply-To: <025101ce23e7$c2d687e0$488397a0$@gmail.com>
References: <025101ce23e7$c2d687e0$488397a0$@gmail.com>
Message-ID: <9459EB1F-A40C-4B39-AAE7-85B0301A3819@twistedmatrix.com>


On Mar 18, 2013, at 7:49 AM, Sergey Gerasimov <sergun at gmail.com> wrote:

> Hi,
> 
> Are they some simple ways (keeping existing interface) around BananaError
> for long values returned from PB methods?

Don't return long values.  They block the connection.  Chunk them up and stream them asynchronously by repeatedly calling a method to buffer them up, and then add a .finish() method that takes the buffered data and invokes your original logic.

-glyph



From exarkun at twistedmatrix.com  Mon Mar 18 16:08:01 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 18 Mar 2013 20:08:01 -0000
Subject: [Twisted-Python] banana SIZE_LIMIT
In-Reply-To: <9459EB1F-A40C-4B39-AAE7-85B0301A3819@twistedmatrix.com>
References: <025101ce23e7$c2d687e0$488397a0$@gmail.com>
	<9459EB1F-A40C-4B39-AAE7-85B0301A3819@twistedmatrix.com>
Message-ID: <20130318200801.3273.126919926.divmod.xquotient.3@localhost6.localdomain6>




On 07:35 pm, glyph at twistedmatrix.com wrote:
>
>On Mar 18, 2013, at 7:49 AM, Sergey Gerasimov <sergun at gmail.com> wrote:
>>Hi,
>>
>>Are they some simple ways (keeping existing interface) around 
>>BananaError
>>for long values returned from PB methods?
>
>Don't return long values.  They block the connection.  Chunk them up 
>and stream them asynchronously by repeatedly calling a method to buffer 
>them up, and then add a .finish() method that takes the buffered data 
>and invokes your original logic.

eg, using twisted.spread.util.Pager (or the StringPager or FilePager 
subclasses).

Jean-Paul
>-glyph
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From screwtape at froup.com  Mon Mar 18 23:00:19 2013
From: screwtape at froup.com (Tim Allen)
Date: Tue, 19 Mar 2013 14:00:19 +1100
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
Message-ID: <20130319030019.GB21252@boombah.thristian.org>

In Guido's keynote at PyCon 2013, apparently he talked about adding an
async I/O module to Python 3.4. It looks like his slides can be viewed
here:

    https://www.dropbox.com/s/xknbe58zcvjhzhv/PyCon2013.pptx

...while this is the PEP he's talking about:

    http://www.python.org/dev/peps/pep-3156/

At first glance, the proposed reactor API looks very much like Twisted's
(or, to be fair, GTK's, or possibly any number of other async event loop
I'm less familiar with) but rather than Deferreds and callbacks, the API
will be based around Futures (similar, but not identical, to Python
3.2's concurrent.futures.Future class), and an inlineCallbacks-style
decorator for generators.

I know Deferreds are awesome, and I don't know much about Futures (and
I know Twisted core developers have given negative reviews of
other Deferred/Promise/Future implementations in, say, JavaScript
libraries before), and inlineCallbacks seems to have a negative
reputation among experienced Twisted users. Is there anybody on this
list who knows more about this new PEP (maybe somebody who's at PyCon
and saw the talk in person) who can give us an informed comparison with
the current state of Twisted?



From dynamicgl at gmail.com  Tue Mar 19 01:42:58 2013
From: dynamicgl at gmail.com (Gelin Yan)
Date: Tue, 19 Mar 2013 13:42:58 +0800
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
In-Reply-To: <20130319030019.GB21252@boombah.thristian.org>
References: <20130319030019.GB21252@boombah.thristian.org>
Message-ID: <CABkOF6T+3-Z7AUDgf0Cuqw=SD9pP7Rg-Wkg5GQYfFQVOOkyR1g@mail.gmail.com>

On Tue, Mar 19, 2013 at 11:00 AM, Tim Allen <screwtape at froup.com> wrote:

> In Guido's keynote at PyCon 2013, apparently he talked about adding an
> async I/O module to Python 3.4. It looks like his slides can be viewed
> here:
>
>     https://www.dropbox.com/s/xknbe58zcvjhzhv/PyCon2013.pptx
>
> ...while this is the PEP he's talking about:
>
>     http://www.python.org/dev/peps/pep-3156/
>
> At first glance, the proposed reactor API looks very much like Twisted's
> (or, to be fair, GTK's, or possibly any number of other async event loop
> I'm less familiar with) but rather than Deferreds and callbacks, the API
> will be based around Futures (similar, but not identical, to Python
> 3.2's concurrent.futures.Future class), and an inlineCallbacks-style
> decorator for generators.
>
> I know Deferreds are awesome, and I don't know much about Futures (and
> I know Twisted core developers have given negative reviews of
> other Deferred/Promise/Future implementations in, say, JavaScript
> libraries before), and inlineCallbacks seems to have a negative
> reputation among experienced Twisted users. Is there anybody on this
> list who knows more about this new PEP (maybe somebody who's at PyCon
> and saw the talk in person) who can give us an informed comparison with
> the current state of Twisted?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


Hi

  inlineCallbacks is ok to me. I use it daily. I can keep code snippets
succinct. no more callbacks, deep nested callbacks (they let me recall
those days with javascript & node.js). The only thing I complain is it
doesn't work with cython.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130319/0556ae37/attachment.htm 

From stephen at thorne.id.au  Tue Mar 19 02:04:16 2013
From: stephen at thorne.id.au (Stephen Thorne)
Date: Tue, 19 Mar 2013 06:04:16 +0000
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
In-Reply-To: <20130319030019.GB21252@boombah.thristian.org>
References: <20130319030019.GB21252@boombah.thristian.org>
Message-ID: <CAFPU7=s0w4h2j++d0wWdcZ+kVPSXPcM6vT6om=R4vWvH8DP3gA@mail.gmail.com>

Not relavent to your questions, but there's a mailing list for discussing
the specifics of PEP 3156, which is worth subscribing to if you want to
provide specific feedback on the API.

https://groups.google.com/forum/?fromgroups#!forum/python-tulip



On Tue, Mar 19, 2013 at 3:00 AM, Tim Allen <screwtape at froup.com> wrote:

> In Guido's keynote at PyCon 2013, apparently he talked about adding an
> async I/O module to Python 3.4. It looks like his slides can be viewed
> here:
>
>     https://www.dropbox.com/s/xknbe58zcvjhzhv/PyCon2013.pptx
>
> ...while this is the PEP he's talking about:
>
>     http://www.python.org/dev/peps/pep-3156/
>
> At first glance, the proposed reactor API looks very much like Twisted's
> (or, to be fair, GTK's, or possibly any number of other async event loop
> I'm less familiar with) but rather than Deferreds and callbacks, the API
> will be based around Futures (similar, but not identical, to Python
> 3.2's concurrent.futures.Future class), and an inlineCallbacks-style
> decorator for generators.
>
> I know Deferreds are awesome, and I don't know much about Futures (and
> I know Twisted core developers have given negative reviews of
> other Deferred/Promise/Future implementations in, say, JavaScript
> libraries before), and inlineCallbacks seems to have a negative
> reputation among experienced Twisted users. Is there anybody on this
> list who knows more about this new PEP (maybe somebody who's at PyCon
> and saw the talk in person) who can give us an informed comparison with
> the current state of Twisted?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130319/0a2ced60/attachment-0001.htm 

From itamar at futurefoundries.com  Tue Mar 19 17:16:32 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Tue, 19 Mar 2013 17:16:32 -0400
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
In-Reply-To: <20130319030019.GB21252@boombah.thristian.org>
References: <20130319030019.GB21252@boombah.thristian.org>
Message-ID: <CAOp9P3ospcBpfcLxMrxpKq5j3F2RDtYEfvtGOX=Luf9sJXtR9g@mail.gmail.com>

On Mon, Mar 18, 2013 at 11:00 PM, Tim Allen <screwtape at froup.com> wrote:

> In Guido's keynote at PyCon 2013, apparently he talked about adding an
> async I/O module to Python 3.4. It looks like his slides can be viewed
> here:
>
>     https://www.dropbox.com/s/xknbe58zcvjhzhv/PyCon2013.pptx
>
> ...while this is the PEP he's talking about:
>
>     http://www.python.org/dev/peps/pep-3156/
>
> At first glance, the proposed reactor API looks very much like Twisted's
> (or, to be fair, GTK's, or possibly any number of other async event loop
> I'm less familiar with) but rather than Deferreds and callbacks, the API
> will be based around Futures (similar, but not identical, to Python
> 3.2's concurrent.futures.Future class), and an inlineCallbacks-style
> decorator for generators.
>

There's two parts: one is a standardized, pluggable API for event loops.
It's explicitly based on Twisted's, and will be easy to add a Twisted
implementation. The generator thing is layered on top, and somewhat
optional, in theory.

-Itamar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130319/cbf304f8/attachment.htm 

From therve at free.fr  Tue Mar 19 19:21:50 2013
From: therve at free.fr (=?UTF-8?B?VGhvbWFzIEhlcnbDqQ==?=)
Date: Tue, 19 Mar 2013 16:21:50 -0700
Subject: [Twisted-Python] Second pre-release of Twisted 13.0.0
Message-ID: <5148F30E.5060509@free.fr>

Hello there,

Due to some test problems (#5989 being reverted), we cut a new 
pre-release for your testing pleasure.

You can find the tarballs here:
     http://twistedmatrix.com/~therve/13.0.0pre2/

Please give a quick test!

-- 
Thomas


From glyph at twistedmatrix.com  Tue Mar 19 19:56:20 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 Mar 2013 16:56:20 -0700
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
In-Reply-To: <20130319030019.GB21252@boombah.thristian.org>
References: <20130319030019.GB21252@boombah.thristian.org>
Message-ID: <5B04528C-C1B0-4584-B9AD-8CBB9DA26C3A@twistedmatrix.com>

On Mar 18, 2013, at 8:00 PM, Tim Allen <screwtape at froup.com> wrote:

> In Guido's keynote at PyCon 2013, apparently he talked about adding an
> async I/O module to Python 3.4.

> At first glance, the proposed reactor API looks very much like Twisted's
> (or, to be fair, GTK's, or possibly any number of other async event loop
> I'm less familiar with)

Importantly, the proposed loop API is like Twisted (in that it has callbacks for the receipt of data and the emptying of send buffers) and _not_ like GTK (in that it doesn't call handle_read() and hope you can handle a socket object).

> but rather than Deferreds and callbacks, the API
> will be based around Futures (similar, but not identical, to Python
> 3.2's concurrent.futures.Future class), and an inlineCallbacks-style
> decorator for generators.

Mostly accurate as far as I know.

> I know Deferreds are awesome, and I don't know much about Futures (and
> I know Twisted core developers have given negative reviews of
> other Deferred/Promise/Future implementations in, say, JavaScript
> libraries before), and inlineCallbacks seems to have a negative
> reputation among experienced Twisted users. Is there anybody on this
> list who knows more about this new PEP (maybe somebody who's at PyCon
> and saw the talk in person) who can give us an informed comparison with
> the current state of Twisted?

The interesting thing about the proposal from the perspective of the Twisted project is that it is an exciting opportunity for interoperability.  The availability of a standard-library, "blessed" event-loop API will give us something to write against, rather than Twisted and Tornado and Pulsar all having alternative main-loop APIs, and partial adapters between them.  In the future, it might make things like the GTK reactor obsolete, as it's possible that the PyGTK project would include their own Python-standard event-loop adapter.

Twisted is an amazingly full-featured and mature event-driven framework; it doesn't make sense (and isn't fair) to compare a minimalistic main-loop to it.  Tulip does not contain an IMAP client or an SSH server; it does not contain any XMPP logic.

As far as 'yield from' coroutines are concerned, I'm personally ambivalent, but I'm happy to ignore them.  The best part about this proposal is that anyone who wants to get this new thing does not need to abandon the extensive capabilities of Twisted over some tweak of syntax.  With only a little bit of specification-implementation glue, we can interoperate not just with things that do the equivalent of connectTCP/listenTCP, but we can bridge between Deferreds and Futures (as Guido's new not-quite-concurrent.-Future explicitly drops the concurrent.Future that Deferred can't implement, because it's serving the purpose of Deferred).

-glyph

From glyph at twistedmatrix.com  Tue Mar 19 19:59:29 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 Mar 2013 16:59:29 -0700
Subject: [Twisted-Python] Second pre-release of Twisted 13.0.0
In-Reply-To: <5148F30E.5060509@free.fr>
References: <5148F30E.5060509@free.fr>
Message-ID: <028FE2D5-0DFB-4A39-AA9D-BA1502B8F3E8@twistedmatrix.com>


On Mar 19, 2013, at 4:21 PM, Thomas Herv? <therve at free.fr> wrote:

> Hello there,
> 
> Due to some test problems (#5989 being reverted), we cut a new 
> pre-release for your testing pleasure.
> 
> You can find the tarballs here:
>     http://twistedmatrix.com/~therve/13.0.0pre2/
> 
> Please give a quick test!

Thanks again for your work, Thomas!

-glyph

From kevin.horn at gmail.com  Tue Mar 19 21:03:04 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 19 Mar 2013 20:03:04 -0500
Subject: [Twisted-Python] Second pre-release of Twisted 13.0.0
In-Reply-To: <5148F30E.5060509@free.fr>
References: <5148F30E.5060509@free.fr>
Message-ID: <CA+U=zK2ph1EB5b=2TKLMFpr4fv30eN4Gzy87cOcgb1KvoVbc_w@mail.gmail.com>

On Tue, Mar 19, 2013 at 6:21 PM, Thomas Herv? <therve at free.fr> wrote:

> Hello there,
>
> Due to some test problems (#5989 being reverted), we cut a new
> pre-release for your testing pleasure.
>
> You can find the tarballs here:
>      http://twistedmatrix.com/~therve/13.0.0pre2/
>
> Please give a quick test!
>
> --
> Thomas
>
>

Awesome!
--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130319/7eb83b24/attachment.htm 

From tobias.oberstein at tavendo.de  Wed Mar 20 04:51:41 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 20 Mar 2013 01:51:41 -0700
Subject: [Twisted-Python] So... Python 3.4 is getting its own async
	I/O	system
In-Reply-To: <20130319030019.GB21252@boombah.thristian.org>
References: <20130319030019.GB21252@boombah.thristian.org>
Message-ID: <634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>

> In Guido's keynote at PyCon 2013, apparently he talked about adding an async
> I/O module to Python 3.4. It looks like his slides can be viewed

Will this tackle async file I/O also or only network?


From glyph at twistedmatrix.com  Wed Mar 20 05:36:55 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 20 Mar 2013 02:36:55 -0700
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
In-Reply-To: <634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
References: <20130319030019.GB21252@boombah.thristian.org>
	<634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>


On Mar 20, 2013, at 1:51 AM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:

>> In Guido's keynote at PyCon 2013, apparently he talked about adding an async
>> I/O module to Python 3.4. It looks like his slides can be viewed
> 
> Will this tackle async file I/O also or only network?


Since async file I/O is not a thing you can implement[1], presumably it will only be networking.

You probably want to join this group:

<https://groups.google.com/forum/?fromgroups=#!forum/python-tulip>

-glyph

[1]: <http://blog.libtorrent.org/2012/10/asynchronous-disk-io/>

From itamar at futurefoundries.com  Wed Mar 20 14:24:37 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Wed, 20 Mar 2013 14:24:37 -0400
Subject: [Twisted-Python] Notes from Twisted BoF at PyCon 2013
Message-ID: <CAOp9P3p9wJghCDNzdJA6jaNRCUr0yzUj+SBRT5dJXfR2s_bBFw@mail.gmail.com>


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130320/e2055733/attachment.htm 
-------------- next part --------------
What Should Tom Do?
- Tickets already in review before
- Deferred cancellation
- Deploy to new tummy machine (ASAP)
- Attempt trac upgrade in a way that allows switching back to current version
- Support for non-OpenSSL SSL libraries: API replacement for twisted.internet.ssl Certificate APIs, and transport layer implementation. Alternative backends include win32 APIs, OS X SecureTransport (aka libsecurityssl?) and the cross-platform libnss3 (Mozilla). A good starting point would be a API specification, that at minimum includes current functionality.
- twist: command-line without daemonization
- import krondo tutorial into twisted (if davep agrees), update to newer code
- lore output plugin that generates ReST via docutils parse tree objects, then write code to run sphinx on this output


GSoC/OPW projects:
- Deferred cancellation.
- Frack? Personally I'd prefer not.
- ICE (NAT busting) with Allen Short.
- lore2sphinx stuff mentioned above?
- twisted.web, e.g. returning Deferreds

Other notes:
- "A Week in Twisted: What we did this week" would be nice.
- Ralph Meijer wants to port Words to Python 3.
- twisted.conch.stdio is in theory great, but buggy, or missing keystrokes; needs maintenance
- kline and treq have nice Travis-CI configs (multiple Python and Twisted versions)
- Fundraising! VMWare, Truephone, Cisco, Google Fiber, Olark (words, ralphm talked to them), ...


Sprint topics:
- rewrite protocol implementations with parsley, add to twisted once its good enough. Parsley needs CI, benchmarks.

From kevin.horn at gmail.com  Wed Mar 20 16:05:07 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 20 Mar 2013 15:05:07 -0500
Subject: [Twisted-Python] Notes from Twisted BoF at PyCon 2013
In-Reply-To: <CAOp9P3p9wJghCDNzdJA6jaNRCUr0yzUj+SBRT5dJXfR2s_bBFw@mail.gmail.com>
References: <CAOp9P3p9wJghCDNzdJA6jaNRCUr0yzUj+SBRT5dJXfR2s_bBFw@mail.gmail.com>
Message-ID: <CA+U=zK1T1ULNavNVcbPXx23qjr-PW6fkjGpzvMi_E_Dfu=25OA@mail.gmail.com>

On Wed, Mar 20, 2013 at 1:24 PM, Itamar Turner-Trauring <
itamar at futurefoundries.com> wrote:

>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
Thanks for posting this, Itamar.

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130320/af2bb7e1/attachment.htm 

From exarkun at twistedmatrix.com  Wed Mar 20 19:07:06 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 20 Mar 2013 23:07:06 -0000
Subject: [Twisted-Python] Second pre-release of Twisted 13.0.0
In-Reply-To: <5148F30E.5060509@free.fr>
References: <5148F30E.5060509@free.fr>
Message-ID: <20130320230706.6540.200308746.divmod.xquotient.1@localhost6.localdomain6>

On 19 Mar, 11:21 pm, therve at free.fr wrote:
>Hello there,
>
>Due to some test problems (#5989 being reverted), we cut a new
>pre-release for your testing pleasure.
>
>You can find the tarballs here:
>     http://twistedmatrix.com/~therve/13.0.0pre2/
>
>Please give a quick test!

Thanks!  This email sent through a mail server running pre2.  No 
problems so far.

Jean-Paul


From kevin.horn at gmail.com  Thu Mar 21 10:17:01 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 21 Mar 2013 09:17:01 -0500
Subject: [Twisted-Python] Lore and generating reStructuredText (Lore2Sphinx)
Message-ID: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>

tl;dr  A Lore plugin won't work for generating Sphinx source files, at
least not by itself.

Itamar posted some notes from the Twisted BoF session that was held at
PyCon last weekend, and one of the things in it was the following line:

- lore output plugin that generates ReST via docutils parse tree
objects, then write code to run sphinx on this output


I wasn't there, so I don't know the exact context that this was referring
to, but let me try to explain a little bit about why this won't work (at
least not as written).

reStructuredText, as some of you may know, creates it's output by first
creating an intermediate representation of a document called a "node tree",
which is a tree of "nodes" which represents the various elements in a
document (text, paragraphs, lists, list items, etc.).  reStructuredText
also has a construct called a "directive", which is  some markup which
tells the docutils reST parser to create a bunch of these nodes.

Directives are awesome and are a big reason why reStructuredText is so much
more powerful than other lightweight markup languages like markdown,
textile, etc.  They serve as extension point and allow users to create
their own markup constructs without changing the actual parser.

The key thing is that a directive is not itself a type of node.  Rather it
's just a markup construct.  This means that once a reStructuredText
document goes through the docutils parser, the information about the
directives is lost, because they have been transformed into a bunch of
nodes.

For example there's a container directive, which looks like this:

Title
=====

.. container::

    I'm a content paragraph!  Yay!

When processed this creates a nodetree that looks something like this (in
docutils "pseudoxml" representation:

<document ids="title" names="title" source="test.rst" title="Title">
    <title>
        Title
    <container>
        <paragraph>
            I'm a content paragraph!  Yay!

It is entirely coincidental that the container directive and the
<container> node are named the same thing.  Don't let this confuse you.
 The point is that the directive goes away and is replaced by a  bunch of
nodes (more specifically, the node tree is transformed in some way...I
suppose a directive could remove nodes, but I don't think I've ever seen
that done).

We can see this using another example:

Here's some markup:

Title
=====

.. warning::

    I'm a content paragraph!  Yay!

and here's the pseudoxml representation of the nodetree:

<document ids="title" names="title" source="test.rst" title="Title">
    <title>
        Title
    <container>
        <paragraph>
            I'm a content paragraph!  Yay!

Notice that the node trees look exactly the same.  Now this is not quite
true, as there's probably some attributes on the actual Python nodes that
might be used to distinguish them when writing output which aren't
displayed here...they certainly get rendered into HTML differently.  But
the point is that the directive itself is GONE and you have no real way of
recreating it from the node tree.

I think this problem also happens with custom text roles, which is another
extension mechanism in reST, but I haven't looked too deeply into that.

Since you really, really want to have directives in your output (in fact
you have to have them if you want to use Sphinx, which makes heavy use of
them), you can't really generate Sphinx-capable source files using _only_
the nodetree representation.

I suppose you might be able to do something where you try to detect where
the directive _should_ go and try to insert it during the rendering step,
but such a thing would be an egregious kludge,  would take a lot of effort,
and I can't imagine it would work very well, if at all.

Another option would be to fork the distutils parser and change it so that
it could create "directive nodes" or something, but I certainly would not
recommend such a course. (If you think maintaining Lore is a pain, you
ain't seen nothin' yet.  And one thing this project has driven home to me
is that no software only needs to be maintained "for a little while".)

I'm not saying that the proposed plugin for lore is a bad idea...I think it
would be pretty cool.  You'd be able to send lore out to all of the various
formats supported by docutils, and who doesn't want to write their next s5
presentaton in Lore, right? :)  But it won't do the job that it was being
put forward for in the note Itamar mentioned.

So what about building some software that generates some other
representation of the source document, and then renders that as
reStructuredText?  Well this is the best idea I've come up with (or heard)
and is in fact exactly what lore2sphinx-ng_ (which is not intended to be a
separate thing, it's just an experimental fork of lore2sphinx) and rstgen_
do.  lore2spinx-ng creates the representation from lore sources (which is
also a tree of "nodes", though they aren't called that), and rstgen defines
the nodes, and renders them into reStructuredText source.

The only problem is that these aren't done yet, though the work done so far
looks very promising (in terms of actually being able to do the job
reliably someday).  If anyone has bothered to read this far and is
interested in helping out, please feel free to fork the repos and lend a
hand.  Also feel free to contact me either on this list or directly if you
have any questions.  I apologize in advance for the current state of the
code, which is a bit messy (especially lore2sphinx-ng, which still has a
bunch of cruft from the "old"/"current" version that I haven't gotten
around to removing yet).



.. _lore2sphinx-ng: https://bitbucket.org/khorn/lore2sphinx-ng
.. _rstgen:https://bitbucket.org/khorn/rstgen

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130321/77ad184b/attachment.htm 

From kevin.horn at gmail.com  Thu Mar 21 11:52:17 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 21 Mar 2013 10:52:17 -0500
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
Message-ID: <CA+U=zK1n4OBLHzMAFKbYfLZ8zDA14qjdCZhCnWbaBiC6znQmhg@mail.gmail.com>

On Thu, Mar 21, 2013 at 9:17 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> tl;dr  A Lore plugin won't work for generating Sphinx source files, at
> least not by itself.
>
> Itamar posted some notes from the Twisted BoF session that was held at
> PyCon last weekend, and one of the things in it was the following line:
>
> - lore output plugin that generates ReST via docutils parse tree objects, then write code to run sphinx on this output
>
>
> I wasn't there, so I don't know the exact context that this was referring
> to, but let me try to explain a little bit about why this won't work (at
> least not as written).
>
> reStructuredText, as some of you may know, creates it's output by first
> creating an intermediate representation of a document called a "node tree",
> which is a tree of "nodes" which represents the various elements in a
> document (text, paragraphs, lists, list items, etc.).  reStructuredText
> also has a construct called a "directive", which is  some markup which
> tells the docutils reST parser to create a bunch of these nodes.
>
> Directives are awesome and are a big reason why reStructuredText is so
> much more powerful than other lightweight markup languages like markdown,
> textile, etc.  They serve as extension point and allow users to create
> their own markup constructs without changing the actual parser.
>
> The key thing is that a directive is not itself a type of node.  Rather it
> 's just a markup construct.  This means that once a reStructuredText
> document goes through the docutils parser, the information about the
> directives is lost, because they have been transformed into a bunch of
> nodes.
>
> For example there's a container directive, which looks like this:
>
> Title
> =====
>
> .. container::
>
>     I'm a content paragraph!  Yay!
>
> When processed this creates a nodetree that looks something like this (in
> docutils "pseudoxml" representation:
>
> <document ids="title" names="title" source="test.rst" title="Title">
>     <title>
>         Title
>     <container>
>         <paragraph>
>             I'm a content paragraph!  Yay!
>
> It is entirely coincidental that the container directive and the
> <container> node are named the same thing.  Don't let this confuse you.
>  The point is that the directive goes away and is replaced by a  bunch of
> nodes (more specifically, the node tree is transformed in some way...I
> suppose a directive could remove nodes, but I don't think I've ever seen
> that done).
>
> We can see this using another example:
>
> Here's some markup:
>
> Title
> =====
>
> .. warning::
>
>     I'm a content paragraph!  Yay!
>
> and here's the pseudoxml representation of the nodetree:
>
> <document ids="title" names="title" source="test.rst" title="Title">
>     <title>
>         Title
>     <container>
>         <paragraph>
>             I'm a content paragraph!  Yay!
>
> Notice that the node trees look exactly the same.  Now this is not quite
> true, as there's probably some attributes on the actual Python nodes that
> might be used to distinguish them when writing output which aren't
> displayed here...they certainly get rendered into HTML differently.  But
> the point is that the directive itself is GONE and you have no real way of
> recreating it from the node tree.
>
> I think this problem also happens with custom text roles, which is another
> extension mechanism in reST, but I haven't looked too deeply into that.
>
> Since you really, really want to have directives in your output (in fact
> you have to have them if you want to use Sphinx, which makes heavy use of
> them), you can't really generate Sphinx-capable source files using _only_
> the nodetree representation.
>
> I suppose you might be able to do something where you try to detect where
> the directive _should_ go and try to insert it during the rendering step,
> but such a thing would be an egregious kludge,  would take a lot of effort,
> and I can't imagine it would work very well, if at all.
>
> Another option would be to fork the distutils parser and change it so that
> it could create "directive nodes" or something, but I certainly would not
> recommend such a course. (If you think maintaining Lore is a pain, you
> ain't seen nothin' yet.  And one thing this project has driven home to me
> is that no software only needs to be maintained "for a little while".)
>
> I'm not saying that the proposed plugin for lore is a bad idea...I think
> it would be pretty cool.  You'd be able to send lore out to all of the
> various formats supported by docutils, and who doesn't want to write their
> next s5 presentaton in Lore, right? :)  But it won't do the job that it was
> being put forward for in the note Itamar mentioned.
>
> So what about building some software that generates some other
> representation of the source document, and then renders that as
> reStructuredText?  Well this is the best idea I've come up with (or heard)
> and is in fact exactly what lore2sphinx-ng_ (which is not intended to be a
> separate thing, it's just an experimental fork of lore2sphinx) and rstgen_
> do.  lore2spinx-ng creates the representation from lore sources (which is
> also a tree of "nodes", though they aren't called that), and rstgen defines
> the nodes, and renders them into reStructuredText source.
>
> The only problem is that these aren't done yet, though the work done so
> far looks very promising (in terms of actually being able to do the job
> reliably someday).  If anyone has bothered to read this far and is
> interested in helping out, please feel free to fork the repos and lend a
> hand.  Also feel free to contact me either on this list or directly if you
> have any questions.  I apologize in advance for the current state of the
> code, which is a bit messy (especially lore2sphinx-ng, which still has a
> bunch of cruft from the "old"/"current" version that I haven't gotten
> around to removing yet).
>
>
>
> .. _lore2sphinx-ng: https://bitbucket.org/khorn/lore2sphinx-ng
> .. _rstgen:https://bitbucket.org/khorn/rstgen
>
> --
> Kevin Horn
>

I screwed up the example above, due to misnaming a file and running
rst2pseudoxml.py on the wrong thing.

It should actually look something like this:

<document ids="title" names="title" source="test.rst" title="Title">
    <title>
        Title
    <warning>
        <paragraph>
            I'm a content paragraph!  Yay!

and this:

<document ids="title" names="title" source="test.rst" title="Title">
    <title>
        Title
    <admonition classes="admonition-hooray">
        <title>
            hooray!
        <paragraph>
            I'm a content paragraph!  Yay!

But the point still holds.  Directive info goes away after parsing.

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130321/b1f2db0e/attachment-0001.htm 

From glyph at twistedmatrix.com  Sat Mar 23 22:57:25 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2013 19:57:25 -0700
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
Message-ID: <03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>


On Mar 21, 2013, at 7:17 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> Notice that the node trees look exactly the same.  Now this is not quite true, as there's probably some attributes on the actual Python nodes that might be used to distinguish them when writing output which aren't displayed here...they certainly get rendered into HTML differently.  But the point is that the directive itself is GONE and you have no real way of recreating it from the node tree.

The directive isn't "gone"; it turns into the attributes on the Python nodes that you're talking about.  Presumably that's what's used to render it into HTML.  I believe it was Doug Hellmann who indicated to Jean-Paul that this was possible.

Perhaps you mean "there's no public API for constructing the node tree representation of an arbitrary directive"?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130323/8b3a3ba7/attachment.htm 

From exarkun at twistedmatrix.com  Sun Mar 24 00:05:26 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Mar 2013 04:05:26 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1364097926.87.1445567206@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130324/44925ade/attachment.htm 

From exarkun at twistedmatrix.com  Sun Mar 24 11:45:42 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Mar 2013 15:45:42 -0000
Subject: [Twisted-Python] debugging listenTCP
In-Reply-To: <366DD0FD-01BD-44B1-BE87-7E374C44E055@conundrum.com>
References: <366DD0FD-01BD-44B1-BE87-7E374C44E055@conundrum.com>
Message-ID: <20130324154542.6540.1614103920.divmod.xquotient.23@localhost6.localdomain6>

On 12 Mar, 01:40 am, matt at conundrum.com wrote:
>
>I've got a weird one here.   I've just come back to some code that I 
>haven't worked on in a while, which is a simple XMLRPC server.  Last 
>time I touched it I was working on adding cred support, so I'd gone 
>from using a direct call to server.Site() in my listenTCP call to using 
>my own factory/portal/etc.
>
>When I fired it up this time, listenTCP was failing to bind to the 
>requested ports, but not raising an exception.  I started writing up an 
>email to ask about debugging this, but while doing information 
>collection it started working again.  Then not.  Now it's working 
>again.  It looks like I've got some sort of intermittent failure, but I 
>have no idea how to track it down.

Hi Matthew,

I wonder if you learned anything more about what was going on this case 
or if it's still causing problems for you.

Jean-Paul
>    # 'interfaces' is just a simple list of IP addresses.  The map()
>    # call provides formatting for the log message
>    logger.debug("Connecting to port {} on interfaces: {}".format(
>        port, ", ".join(map( lambda x: "'{}'".format(x), interfaces))))
>    for iface in interfaces:
>        reactor.listenTCP(port, factory, interface=iface)
>    reactor.run()
>
>The application should bind to [::1]:8602 and 127.0.0.1:8602, and 
>logging seems to indicate this is what it's trying to do.
>
>01:28:31 [server      ] Connecting to port 8602 on interfaces: '::1', 
>'127.0.0.1'
>
>However, intermittently lsof and netstat are showing no binding.
>>netstat -an | grep -c 8602
>0
>
>I tried turning on twisted's internal logging, but that is giving me 
>nothing useful.  I see no way to turn up the debugging level on this 
>log, but I normally use python's standard logger and perhaps I've 
>missed some piece of documentation.  This is a sample from when it was 
>failing:
>
>2013-03-12 01:28:31+0000 [-] Log opened.
>2013-03-12 01:28:31+0000 [-] ServerFactory starting on 8602
>2013-03-12 01:28:31+0000 [-] Starting factory 
><insurrection.server.ServerFactory instance at 0x85a81488>
>2013-03-12 01:28:31+0000 [-] ServerFactory starting on 8602
>
>Can anyone suggest anything more I can do to track down the problem 
>next time it crops up?
>
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From exarkun at twistedmatrix.com  Mon Mar 25 09:38:22 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 25 Mar 2013 13:38:22 -0000
Subject: [Twisted-Python] Notes from Twisted BoF at PyCon 2013
In-Reply-To: <CAOp9P3p9wJghCDNzdJA6jaNRCUr0yzUj+SBRT5dJXfR2s_bBFw@mail.gmail.com>
References: <CAOp9P3p9wJghCDNzdJA6jaNRCUr0yzUj+SBRT5dJXfR2s_bBFw@mail.gmail.com>
Message-ID: <20130325133822.2461.1510511860.divmod.xquotient.4@localhost6.localdomain6>

Thanks for taking those notes, Itamar.

I copied the summary onto the wiki and fleshed out the ideas a bit:

https://twistedmatrix.com/trac/wiki/Fellowship2013/Priorities

Jean-Paul


From exarkun at twistedmatrix.com  Mon Mar 25 09:48:39 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 25 Mar 2013 13:48:39 -0000
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <CAFycZ9cC1oE6a_+_x_kV7oTfL12jePbY_OM+DKt9RApNMYR5oQ@mail.gmail.com>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
	<CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
	<20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>
	<CAFycZ9cC1oE6a_+_x_kV7oTfL12jePbY_OM+DKt9RApNMYR5oQ@mail.gmail.com>
Message-ID: <20130325134839.2461.1356587987.divmod.xquotient.17@localhost6.localdomain6>

On 18 Mar, 07:32 pm, adi at roiban.ro wrote:
>On 22 January 2013 22:03,  <exarkun at twistedmatrix.com> wrote:
>>On 09:29 am, adi at roiban.ro wrote:
>>>On 22 January 2013 02:21,  <exarkun at twistedmatrix.com> wrote:
>>>>On 20 Jan, 02:35 pm, adi at roiban.ro wrote:
>
>I agree that this is a ugly hack and I removed the project.
>>
>>Hi Adi,
>>
>>trial does what it does by touching a lot of internal stuff as well.
>>This is still bad, but at least it's our fault if it ever breaks 
>>instead
>>of yours.  There's also a long term plan (or "plan" may be putting it
>>too strongly, perhaps I should say "hope") that this part of trial 
>>will
>>change to only use public interfaces.  This will probably require
>>reactors actually implementing restartability, or it will require
>>changing the trial feature slightly (eg, so it starts a reactor, runs
>>all tests, then stops the reactor - if it did this, I'm sure you can
>>imagine how "waiting" for a Deferred would just be adding a callback 
>>to
>>the right place, as in any other Twisted-based application).
>>
>>Are you interested in helping out with making reactors restartable? :)
>
>Sorry for the late reply.
>
>I am still clumsy when working with Twisted so I don't know if I can
>help to much here.
>
>I don't know what is expected from a restartable reactor.
>
>The way I am testing deferreds is by starting the reactor, allow for
>the deferred to execute and then stop the reactor.
>
>I don't want to pause it and then continue the execution from where it
>was stopped.
>
>To help with debugging I am also printing a snapshot of reactor state
>at a certain time.
>
>----
>
>I prefer the Arrange/Act/Assert way of writing test:
>
>
>checker = mk.credentialsChecker()
>credentials = mk.credentials()
>
>deferred = checker.requestAvatarId(credentials)
>failure = self.getDeferredFailure(deferred)
>
>self.assertFailureType(AuthentiationError, failure)
>self.assertEqual(credentials.username, failure.value.username)
>
>
>I found it easier to read than this version:
>
>
>checker = mk.credentialsChecker()
>credentials = mk.credentials()
>
>    def check_result(result_or_failure):
>        self.assertFailureType(AuthentiationError, failure)
>        self.assertEqual(credentials.username, failure.value.username)
>
>deferred = checker.requestAvatarId(credentials)
>deferred.addBoth(check_result)
>
>return deferred
>
>--------
>
>I have updated the code to use as many public reactor members as 
>possible.
>
>The following private member are still use:
>reactor._startedBefore, reactor._started
>
>It uses the following public methods:
>startRunning(), doIteration(), stop(), iterate()
>
>Here is the main part that blocks the execution until the deferred got 
>a result.
>It executes the deferred in the reactor loop.
>
>https://github.com/chevah/empirical/blob/master/chevah/empirical/testcase.py#L240
>
>------
>
>Maybe this is has only limited usage, but I just wanted to share this 
>work.
>For me, this makes writing test a much nicer experience.

Hi Adi,

This basically looks like an implementation of the old, now-removed 
`TestCase.wait` API.

We got rid of `wait` for several reasons:

  * It was hard to implement.  By the end, it sort of worked with most 
reactors - but not all of them.

  * It is a tool for building non-deterministic, slow tests.  If tests 
are written *not* to do real I/O and *not* to wait for real time to 
pass, then they don't need to let a real reactor spin.

We replaced these ideas:

  * with returning a `Deferred` from a test method (which works even if 
you don't use trial to run your tests - but not if you don't subclass 
trial's `TestCase`).  We eventually moved on from this idea, though many 
parts of Twisted itself are still tested using this feature, to...

  * things like `twisted.test.proto_helpers.MemoryReactor`, 
`twisted.internet.task.Clock`, and most recently 
`TestCase.successResultOf` and `TestCase.failureResultOf` (but don't 
confuse these with your `getDeferredFailure` - they are significantly 
less capable).

I'd encourage you to explore testing strategies that use 
reactor/transport/time fakes and give us feedback about where they're 
not making your job easy enough.  I think ultimately you'll be happier 
with the resulting tests, and you won't have to maintain so much hairy 
reactor manipulation code.

Jean-Paul


From peter.westlake at pobox.com  Mon Mar 25 11:59:50 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Mon, 25 Mar 2013 15:59:50 +0000
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
 system
In-Reply-To: <119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
References: <20130319030019.GB21252@boombah.thristian.org>
	<634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
	<119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
Message-ID: <1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>

On Wed, Mar 20, 2013, at 9:36, Glyph wrote:
...
> Since async file I/O is not a thing you can implement[1], ...
> 
> [1]: <http://blog.libtorrent.org/2012/10/asynchronous-disk-io/>

Understood that it isn't possible to use native asynchronous I/O. But an
implementation that used threads behind the scenes and returned a
Deferred (for small files) or a Protocol (for big ones) would be a nice
thing to have.

Peter.


From kevin.horn at gmail.com  Mon Mar 25 12:16:08 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 25 Mar 2013 11:16:08 -0500
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
	<03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
Message-ID: <CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>

On Sat, Mar 23, 2013 at 9:57 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 21, 2013, at 7:17 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> Notice that the node trees look exactly the same.  Now this is not quite
> true, as there's probably some attributes on the actual Python nodes that
> might be used to distinguish them when writing output which aren't
> displayed here...they certainly get rendered into HTML differently.  But
> the point is that the directive itself is GONE and you have no real way of
> recreating it from the node tree.
>
>
> The directive isn't "gone"; it turns into the attributes on the Python
> nodes that you're talking about.  Presumably that's what's used to render
> it into HTML.  I believe it was Doug Hellmann who indicated to Jean-Paul
> that this was possible.
>
>
While this is true for some built-in docutils directives, there is no
guarantee that this will be the case.  A directive basically says "call a
Python callable according to a certain interface, and put the returned
nodes here."  If the directive in question uses a callable that returns
nodes with attributes set in a certain way, then you have some breadcrumbs
to figure out how those nodes were created, but there's nothing that says
that the nodes will definitely be set up that way.

For example, you could have a directive that has a ReST list as content,
and changes the items in the list into some kind of link or something.
 maybe it looks something like this (not a real/valid nodetree...):

<list>
    <link>...
    <link>...
    <link>...

How can you tell that this was created by a directive?  You can't, because
it could just as easily have been a list full of links to begin with.

This is why rstgen has it's own node definitions, as it is focused on what
source constructs should be generated, rather than what the docutils output
should look like.

Of course it's possible that the docutils nodes that we would actually need
from the Twisted docs are all introspectible *enough* that you could maybe
just build a docutils doctree and make good enough guesses to create output
which included directives.  It might even be easy to make those guesses.
 But you'd still be guessing, and would fail in the general case.  Also,
you'd still need to write the code to render those nodes into valid ReST,
which is really the hard part of the process.  Also, you'd need to "parse"
everything inside the "directive node" (or whichever node you've decided
represents the directive) in order to turn it into directive arguments,
options and contents.

Reading exarkun's expansion of the notes Itamar posted [1]_ it looks like
another idea proposed was to generate Sphinx (or maybe Sphinx-looking)
output directly from Lore, which could maybe work, but I think would also
be a lot of work, for a lot less benefit.

However, if what you really want is to have a Lore plugin that generates
RestructuredText, then why not have a lore plugin that generates a rstgen
tree, which rstgen will already know how to render into ReST?  Other than
the obvious objection that rstgen isn't done yet, this seems the best
solution to me.  Of course I may be biased. :)

Even if you didn't want to use rstgen itself, though, I still think you're
better off creating some tree-like structure that is *not* a docutils
document tree, and then have that structure render itself into ReST.

BTW, Doug Hellman almost certainly knows more about the internals of
docutils than I do, so maybe he's right and there is a way to (relatively)
easily generate ReST from a docutils tree including the directives.  But I
don't think it is.


> Perhaps you mean "there's no public API for constructing the node tree
> representation of an arbitrary directive"?
>
>
This is certainly true, but I think it doesn't go far enough in describing
the issue



.. [1] https://twistedmatrix.com/trac/wiki/Fellowship2013/Priorities

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130325/95d0bc2b/attachment.htm 

From hs at ox.cx  Mon Mar 25 14:02:00 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Mon, 25 Mar 2013 19:02:00 +0100
Subject: [Twisted-Python] Twisted dinner pictures
Message-ID: <06F12164-5776-43C2-B182-38F261C93DF5@ox.cx>

Hi,

As you may have noticed, I'm building a little page to show off that PyCon wasn't about donglegate. http://thisispycon.com

I would love to post about our little dinner and would be delighted if anyone having pics AND quotes could forward them to me.

Same goes for sprints etc, flood me!

Cheers,

Hynek

Sent from my phone.

From itamar at futurefoundries.com  Mon Mar 25 15:47:52 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Mon, 25 Mar 2013 15:47:52 -0400
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
In-Reply-To: <1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>
References: <20130319030019.GB21252@boombah.thristian.org>
	<634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
	<119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
	<1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>
Message-ID: <CAOp9P3oqzyxNqoQGJAnPpKkaRT0kjZe5JK26kwRNJ20gDp8rxQ@mail.gmail.com>

On Mon, Mar 25, 2013 at 11:59 AM, Peter Westlake
<peter.westlake at pobox.com>wrote:

> Understood that it isn't possible to use native asynchronous I/O. But an
> implementation that used threads behind the scenes and returned a
> Deferred (for small files) or a Protocol (for big ones) would be a nice
> thing to have.
>

For streaming files, you want something pausable; there are existing
producers which don't use threads, and there will presumably be a tubes
equivalent. Maybe having the tubes one use threads by default is a good
idea.

For getting a file as a string, you can just do:

d = deferToThread(lambda path: FilePath(path).getContent())

For more complex usage patterns, you'll probably want to write custom code
using deferToThread/deferToThreadPool anyway.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130325/9f797d5d/attachment.htm 

From tobias.oberstein at tavendo.de  Mon Mar 25 16:01:52 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 25 Mar 2013 13:01:52 -0700
Subject: [Twisted-Python] So... Python 3.4 is getting its own async
	I/O	system
In-Reply-To: <119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
References: <20130319030019.GB21252@boombah.thristian.org>
	<634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
	<119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
Message-ID: <634914A010D0B943A035D226786325D44226FAA6D1@EXVMBX020-12.exch020.serverdata.net>

> > Will this tackle async file I/O also or only network?
> 
> 
> Since async file I/O is not a thing you can implement[1], presumably it will only
> be networking.
> 

Ok, so AIO is broken on Linux both implementation- and API-wise, but Windows/IOCP and/or *BSD/kqueue might be a different story. I haven't tested myself though. Probably would give kqueue on FreeBSD/ZFS a run ..


From tobias.oberstein at tavendo.de  Mon Mar 25 16:11:44 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 25 Mar 2013 13:11:44 -0700
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
 system
In-Reply-To: <1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>
References: <20130319030019.GB21252@boombah.thristian.org>
	<634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
	<119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
	<1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>
Message-ID: <634914A010D0B943A035D226786325D44226FAA6E0@EXVMBX020-12.exch020.serverdata.net>

> > Since async file I/O is not a thing you can implement[1], ...
> >
> > [1]: <http://blog.libtorrent.org/2012/10/asynchronous-disk-io/>
> 
> Understood that it isn't possible to use native asynchronous I/O. But an
> implementation that used threads behind the scenes and returned a Deferred
> (for small files) or a Protocol (for big ones) would be a nice thing to have.

Yeah, reading a single block from disk can take somewhere between roughly 10us (FusionIO) to 10ms (magnetic platter), and if I need only single blocks (not streaming .. say I access an on-disk key-value store), it would be nice if that would be encapsulated in a deferred, while the reactor drives other stuff. Ideally without a background worker thread pool on platforms that have sufficient/sane support. And worked around via thread pool on others.


From glyph at twistedmatrix.com  Mon Mar 25 18:34:00 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Mar 2013 15:34:00 -0700
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
In-Reply-To: <1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>
References: <20130319030019.GB21252@boombah.thristian.org>
	<634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
	<119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
	<1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>
Message-ID: <B4DAFF8D-6A73-42AF-9564-AF993C2D9339@twistedmatrix.com>


On Mar 25, 2013, at 8:59 AM, Peter Westlake <peter.westlake at pobox.com> wrote:

> On Wed, Mar 20, 2013, at 9:36, Glyph wrote:
> ...
>> Since async file I/O is not a thing you can implement[1], ...
>> 
>> [1]: <http://blog.libtorrent.org/2012/10/asynchronous-disk-io/>
> 
> Understood that it isn't possible to use native asynchronous I/O. But an
> implementation that used threads behind the scenes and returned a
> Deferred (for small files) or a Protocol (for big ones) would be a nice
> thing to have.

For what it's worth, I completely agree.  If someone has, or someone ever does, implement a nice async file I/O system, a nice abstract API for Twisted to do it would allow us to swap in such a thing and get a performance boost without anyone changing their code.

As Itamar says though, a Fount would be an ideal way to present this once I merge the Tubes branch.  (It'll be up for review any day now, thanks to all the help I got at PyCon...)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130325/20aedd3a/attachment-0001.htm 

From exarkun at twistedmatrix.com  Mon Mar 25 18:45:06 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 25 Mar 2013 22:45:06 -0000
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
 system
In-Reply-To: <CAOp9P3oqzyxNqoQGJAnPpKkaRT0kjZe5JK26kwRNJ20gDp8rxQ@mail.gmail.com>
References: <20130319030019.GB21252@boombah.thristian.org>
	<634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
	<119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
	<1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>
	<CAOp9P3oqzyxNqoQGJAnPpKkaRT0kjZe5JK26kwRNJ20gDp8rxQ@mail.gmail.com>
Message-ID: <20130325224506.2461.1639437574.divmod.xquotient.18@localhost6.localdomain6>

On 07:47 pm, itamar at futurefoundries.com wrote:
>On Mon, Mar 25, 2013 at 11:59 AM, Peter Westlake
><peter.westlake at pobox.com>wrote:
>>Understood that it isn't possible to use native asynchronous I/O. But 
>>an
>>implementation that used threads behind the scenes and returned a
>>Deferred (for small files) or a Protocol (for big ones) would be a 
>>nice
>>thing to have.
>
>For streaming files, you want something pausable; there are existing
>producers which don't use threads, and there will presumably be a tubes
>equivalent. Maybe having the tubes one use threads by default is a good
>idea.
>
>For getting a file as a string, you can just do:
>
>d = deferToThread(lambda path: FilePath(path).getContent())

Not that `FilePath` is guaranteed to be thread-safe...

Jean-Paul
>For more complex usage patterns, you'll probably want to write custom 
>code
>using deferToThread/deferToThreadPool anyway.
>
>--
>Itamar Turner-Trauring, Future Foundries LLC
>http://futurefoundries.com/ ? Twisted consulting, training and support.


From glyph at twistedmatrix.com  Mon Mar 25 19:00:10 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Mar 2013 16:00:10 -0700
Subject: [Twisted-Python] Notes from Twisted BoF at PyCon 2013
In-Reply-To: <20130325133822.2461.1510511860.divmod.xquotient.4@localhost6.localdomain6>
References: <CAOp9P3p9wJghCDNzdJA6jaNRCUr0yzUj+SBRT5dJXfR2s_bBFw@mail.gmail.com>
	<20130325133822.2461.1510511860.divmod.xquotient.4@localhost6.localdomain6>
Message-ID: <39764F1B-2817-4862-AA63-42F6D4945DE3@twistedmatrix.com>


On Mar 25, 2013, at 6:38 AM, exarkun at twistedmatrix.com wrote:

> Thanks for taking those notes, Itamar.
> 
> I copied the summary onto the wiki and fleshed out the ideas a bit:
> 
> https://twistedmatrix.com/trac/wiki/Fellowship2013/Priorities
> 
> Jean-Paul

Thanks to both of you for getting this published.

I hope that everyone will read it and ask for clarification if anything is not obvious to those who could not attend :).

-glyph



From glyph at twistedmatrix.com  Mon Mar 25 19:13:05 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Mar 2013 16:13:05 -0700
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <20130325134839.2461.1356587987.divmod.xquotient.17@localhost6.localdomain6>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
	<CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
	<20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>
	<CAFycZ9cC1oE6a_+_x_kV7oTfL12jePbY_OM+DKt9RApNMYR5oQ@mail.gmail.com>
	<20130325134839.2461.1356587987.divmod.xquotient.17@localhost6.localdomain6>
Message-ID: <0A508FE0-1BC7-4903-8F6E-A1BD0FB222C9@twistedmatrix.com>


On Mar 25, 2013, at 6:48 AM, exarkun at twistedmatrix.com wrote:

>  * with returning a `Deferred` from a test method (which works even if 
> you don't use trial to run your tests - but not if you don't subclass 
> trial's `TestCase`).  We eventually moved on from this idea, though many 
> parts of Twisted itself are still tested using this feature, to...

I have a minor quibble with saying we have "moved on" from this idea.

Trial is useful both for writing unit tests (which use MemoryReactor, Clock, etc) and for writing integration tests (which return Deferreds and do real I/O).

Twisted *itself* is mostly tested with unit tests that test smaller chunks of functionality, and there are rarely (perhaps never) good reasons to return a Deferred from a test case within Twisted's own test suite, but I maintain lots of test code that depends intimately on the return-a-Deferred functionality, and other, higher-level projects do too.

We have no plans to remove or deprecate this functionality, but it's important to know that you should not use it unless you really need it.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130325/f2cf2f1d/attachment.htm 

From glyph at twistedmatrix.com  Mon Mar 25 19:29:04 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Mar 2013 16:29:04 -0700
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
	<03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
	<CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>
Message-ID: <4804AB74-C814-4306-89F0-E381E34E248D@twistedmatrix.com>


On Mar 25, 2013, at 9:16 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> How can you tell that this was created by a directive?  You can't, because it could just as easily have been a list full of links to begin with.

But, I don't care if it was created by a directive or not.

I think we're talking about two different things.

What you seem to be talking about is using Sphinx to do source-to-source Lore-to-ReST transformation.  In that case, you're (sort of) right, in that information is lost when you invoke directives.  If we did this, and it worked, it would just be a slightly better way to implement lore2sphinx; we'd still need to manage the transition in largely the same way.

What *I'm* talking about is just using Lore source as an input to Sphinx, and going straight to the output HTML.  In order to do this, we just need to construct the right tree and actually *invoke* the directive callables at the right time.  They produce whatever output they want to produce, and we hand that back to Sphinx, and it outputs some docs.  With this strategy, we just switch to sphinx by switching our build process; we don't switch input formats.  Then, if someone wants to use Lore they can, if they want to use ReST they can, and we can migrate on an as-needed basis; there's no need for a single big format migration for us to start using Sphinx.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130325/e40c71a4/attachment.htm 

From adi at roiban.ro  Tue Mar 26 06:39:25 2013
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 26 Mar 2013 12:39:25 +0200
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <20130325134839.2461.1356587987.divmod.xquotient.17@localhost6.localdomain6>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
	<CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
	<20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>
	<CAFycZ9cC1oE6a_+_x_kV7oTfL12jePbY_OM+DKt9RApNMYR5oQ@mail.gmail.com>
	<20130325134839.2461.1356587987.divmod.xquotient.17@localhost6.localdomain6>
Message-ID: <CAFycZ9d8scKXQnPa-0hfiVUbyc2QQYJ7QNQpdiT58q+sgdsgmw@mail.gmail.com>

On 25 March 2013 15:48,  <exarkun at twistedmatrix.com> wrote:
> On 18 Mar, 07:32 pm, adi at roiban.ro wrote:
>>On 22 January 2013 22:03,  <exarkun at twistedmatrix.com> wrote:
>>>On 09:29 am, adi at roiban.ro wrote:
>>>>On 22 January 2013 02:21,  <exarkun at twistedmatrix.com> wrote:
>>>>>On 20 Jan, 02:35 pm, adi at roiban.ro wrote:
>>
>>I agree that this is a ugly hack and I removed the project.
>>>
>>>Hi Adi,
>>>
>>>trial does what it does by touching a lot of internal stuff as well.
>>>This is still bad, but at least it's our fault if it ever breaks
>>>instead
>>>of yours.  There's also a long term plan (or "plan" may be putting it
>>>too strongly, perhaps I should say "hope") that this part of trial
>>>will
>>>change to only use public interfaces.  This will probably require
>>>reactors actually implementing restartability, or it will require
>>>changing the trial feature slightly (eg, so it starts a reactor, runs
>>>all tests, then stops the reactor - if it did this, I'm sure you can
>>>imagine how "waiting" for a Deferred would just be adding a callback
>>>to
>>>the right place, as in any other Twisted-based application).
>>>
>>>Are you interested in helping out with making reactors restartable? :)
>>
>>Sorry for the late reply.
>>
>>I am still clumsy when working with Twisted so I don't know if I can
>>help to much here.
>>
>>I don't know what is expected from a restartable reactor.
>>
>>The way I am testing deferreds is by starting the reactor, allow for
>>the deferred to execute and then stop the reactor.
>>
>>I don't want to pause it and then continue the execution from where it
>>was stopped.
>>
>>To help with debugging I am also printing a snapshot of reactor state
>>at a certain time.
>>
>>----
>>
>>I prefer the Arrange/Act/Assert way of writing test:
>>
>>
>>checker = mk.credentialsChecker()
>>credentials = mk.credentials()
>>
>>deferred = checker.requestAvatarId(credentials)
>>failure = self.getDeferredFailure(deferred)
>>
>>self.assertFailureType(AuthentiationError, failure)
>>self.assertEqual(credentials.username, failure.value.username)
>>
>>
>>I found it easier to read than this version:
>>
>>
>>checker = mk.credentialsChecker()
>>credentials = mk.credentials()
>>
>>    def check_result(result_or_failure):
>>        self.assertFailureType(AuthentiationError, failure)
>>        self.assertEqual(credentials.username, failure.value.username)
>>
>>deferred = checker.requestAvatarId(credentials)
>>deferred.addBoth(check_result)
>>
>>return deferred
>>
>>--------
>>
>>I have updated the code to use as many public reactor members as
>>possible.
>>
>>The following private member are still use:
>>reactor._startedBefore, reactor._started
>>
>>It uses the following public methods:
>>startRunning(), doIteration(), stop(), iterate()
>>
>>Here is the main part that blocks the execution until the deferred got
>>a result.
>>It executes the deferred in the reactor loop.
>>
>>https://github.com/chevah/empirical/blob/master/chevah/empirical/testcase.py#L240
>>
>>------
>>
>>Maybe this is has only limited usage, but I just wanted to share this
>>work.
>>For me, this makes writing test a much nicer experience.
>
> Hi Adi,
>
> This basically looks like an implementation of the old, now-removed
> `TestCase.wait` API.
>
> We got rid of `wait` for several reasons:
>
>   * It was hard to implement.  By the end, it sort of worked with most
> reactors - but not all of them.
>
>   * It is a tool for building non-deterministic, slow tests.  If tests
> are written *not* to do real I/O and *not* to wait for real time to
> pass, then they don't need to let a real reactor spin.
>
> We replaced these ideas:
>
>   * with returning a `Deferred` from a test method (which works even if
> you don't use trial to run your tests - but not if you don't subclass
> trial's `TestCase`).  We eventually moved on from this idea, though many
> parts of Twisted itself are still tested using this feature, to...
>
>   * things like `twisted.test.proto_helpers.MemoryReactor`,
> `twisted.internet.task.Clock`, and most recently
> `TestCase.successResultOf` and `TestCase.failureResultOf` (but don't
> confuse these with your `getDeferredFailure` - they are significantly
> less capable).
>
> I'd encourage you to explore testing strategies that use
> reactor/transport/time fakes and give us feedback about where they're
> not making your job easy enough.  I think ultimately you'll be happier
> with the resulting tests, and you won't have to maintain so much hairy
> reactor manipulation code.

I already use StringTransport in various forms for unit and
integration tests and it is great!
Clock is also great for delayedCalls. I also have various
mock/dummy/spy implementations for transports/channels.

The whole Twisted architecture make writing tests a fun task! Thanks!

I am "spining" the reactor to "resolve" all deferreds involved in a
StringTransport conversation or in an DeferredList or other kind of
chained deferreds. These are what I call "integration tests" and they
only use memory, no external I/O.

In most of my calles of result = self.getDeferredResult(deferred), the
deferred's callback() method was already called and I just want to
resolve the callbacks chain.

Is there something in _synctest that can "resolve" a list/chain of deferreds?

I was not aware of MemoryReactor. Thanks for the note. From what I can
read in the code, it does not help with spinning the reactor.

-----


I only do real I/O for what I call, "system tests" these are checking
integration of my code with the outside world (the system). They are
kept to a minimum.
Since there should not be to many of these tests, returning a deferred
is not a big annoyance... just that the code is harder to read.

Thanks again for all your feedback!
-- 
Adi Roiban


From adi at roiban.ro  Tue Mar 26 07:24:32 2013
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 26 Mar 2013 13:24:32 +0200
Subject: [Twisted-Python] GitHub Twisted organization/repo
Message-ID: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>

Hi,

Are there any plans with the Twisted repo from GitHub?

https://github.com/twisted/twisted

Looks like it was not updated in a while.

Garret Heaton is already doing a 15min mirroring of master/trunk

https://github.com/powdahound/twisted

Both repos have a couple of forks and it would be nice if all forks
are from the same repo.

I prefer and use GitHub code browsing since it is much faster than
Twisted's official Trac code browsing.

---------------

I now see that Tom Prince has already created git branches on GitHub
for the ticket he is reviewing. Many thanks!

I have already started creating git branches on GitHub for all my
patched for Twisted. I found it much pleasant to send a "live patch"
URL rather than a static attached diff file.

Ex live diff:
https://github.com/chevah/twisted/compare/chevah:master...chevah:5411-ftp-list-unicode

Append .diff to the url and you have a patch file:
https://github.com/chevah/twisted/compare/chevah:master...chevah:5411-ftp-list-unicode.diff

As a non-commiter for SVN this makes my life much more easier.
Manually creating diff and attaching them to a slow Trac can cause a
bit of frustration... but I always find to hard to follow a SVN branch
that was created for at ticket and manually apply diffs on local
copies.

I find it very hard to work in parallel on more than 4 tickets and
tracking diffs outside of SVN/GIT is not fun.

I understand that moving from SVN to GIT is not easy and if core
developers can create and share SVN branches there is no big
inconvenience.

For me, as a non-commiter, contributing to Twisted is not fun.

Sorry for bothering you with my frustrations. I hope that you find the
feedback useful, otherwise feel free to ignore it :)

-- 
Adi Roiban


From itamar at itamarst.org  Tue Mar 26 07:40:23 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 26 Mar 2013 07:40:23 -0400
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <CAFycZ9d8scKXQnPa-0hfiVUbyc2QQYJ7QNQpdiT58q+sgdsgmw@mail.gmail.com>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
	<CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
	<20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>
	<CAFycZ9cC1oE6a_+_x_kV7oTfL12jePbY_OM+DKt9RApNMYR5oQ@mail.gmail.com>
	<20130325134839.2461.1356587987.divmod.xquotient.17@localhost6.localdomain6>
	<CAFycZ9d8scKXQnPa-0hfiVUbyc2QQYJ7QNQpdiT58q+sgdsgmw@mail.gmail.com>
Message-ID: <51518927.4050902@itamarst.org>

On 03/26/2013 06:39 AM, Adi Roiban wrote:
> I am "spining" the reactor to "resolve" all deferreds involved in a
> StringTransport conversation or in an DeferredList or other kind of
> chained deferreds. These are what I call "integration tests" and they
> only use memory, no external I/O.
If you're only using StringTransport or Clock, there is no need for a 
real reactor. Deferreds have nothing to do with the reactor as such.

> In most of my calles of result = self.getDeferredResult(deferred), the
> deferred's callback() method was already called and I just want to
> resolve the callbacks chain.

Again, that does not require the reactor. E.g.:

 >>> d = Deferred()
 >>> d.callback(1)
 >>> l = []
 >>> d.addCallback(l.append)
 >>> l
[1]

You might also want to look at the latest version of 
http://twistedmatrix.com/documents/current/core/howto/trial.html, in 
particular the new successResultOf and similar APIs.



From adi at roiban.ro  Tue Mar 26 08:09:27 2013
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 26 Mar 2013 14:09:27 +0200
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <51518927.4050902@itamarst.org>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
	<CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
	<20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>
	<CAFycZ9cC1oE6a_+_x_kV7oTfL12jePbY_OM+DKt9RApNMYR5oQ@mail.gmail.com>
	<20130325134839.2461.1356587987.divmod.xquotient.17@localhost6.localdomain6>
	<CAFycZ9d8scKXQnPa-0hfiVUbyc2QQYJ7QNQpdiT58q+sgdsgmw@mail.gmail.com>
	<51518927.4050902@itamarst.org>
Message-ID: <CAFycZ9c453CdJuutAj80hwAB28hOx9vC8s6MeMOTeK-1gcaEzw@mail.gmail.com>

On 26 March 2013 13:40, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> On 03/26/2013 06:39 AM, Adi Roiban wrote:
>> I am "spining" the reactor to "resolve" all deferreds involved in a
>> StringTransport conversation or in an DeferredList or other kind of
>> chained deferreds. These are what I call "integration tests" and they
>> only use memory, no external I/O.
> If you're only using StringTransport or Clock, there is no need for a
> real reactor. Deferreds have nothing to do with the reactor as such.
>
>> In most of my calles of result = self.getDeferredResult(deferred), the
>> deferred's callback() method was already called and I just want to
>> resolve the callbacks chain.
>
> Again, that does not require the reactor. E.g.:
>
>  >>> d = Deferred()
>  >>> d.callback(1)
>  >>> l = []
>  >>> d.addCallback(l.append)
>  >>> l
> [1]
>
> You might also want to look at the latest version of
> http://twistedmatrix.com/documents/current/core/howto/trial.html, in
> particular the new successResultOf and similar APIs.

Many thanks for you comment. I am stupid :) and successResultOf is great!


-- 
Adi Roiban


From kevin.horn at gmail.com  Tue Mar 26 10:03:58 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 26 Mar 2013 09:03:58 -0500
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <4804AB74-C814-4306-89F0-E381E34E248D@twistedmatrix.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
	<03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
	<CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>
	<4804AB74-C814-4306-89F0-E381E34E248D@twistedmatrix.com>
Message-ID: <CA+U=zK0=BeDpGFkz44KYUfcqY7Hd-dkF634HqCiXeDBQXVXn8w@mail.gmail.com>

On Mon, Mar 25, 2013 at 6:29 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 25, 2013, at 9:16 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> How can you tell that this was created by a directive?  You can't, because
> it could just as easily have been a list full of links to begin with.
>
>
> But, I don't care if it was created by a directive or not.
>
> I think we're talking about two different things.
>
> What you seem to be talking about is using Sphinx to do source-to-source
> Lore-to-ReST transformation.  In that case, you're (sort of) right, in that
> information is lost when you invoke directives.  If we did this, and it
> worked, it would just be a slightly better way to implement lore2sphinx;
> we'd still need to manage the transition in largely the same way.
>
> What *I'm* talking about is just using Lore source as an input to Sphinx,
> and going straight to the output HTML.  In order to do this, we just need
> to construct the right tree and actually *invoke* the directive callables
> at the right time.  They produce whatever output they want to produce, and
> we hand that back to Sphinx, and it outputs some docs.  With this strategy,
> we just switch to sphinx by switching our build process; we don't switch
> input formats.  Then, if someone wants to use Lore they can, if they want
> to use ReST they can, and we can migrate on an as-needed basis; there's no
> need for a single big format migration for us to start using Sphinx.
>
>
Hmmm.  We are indeed talking about two different things.

What you describe is probably technically possible, but I still don't think
it's a very good approach.  It seems to me that it would be very brittle
and error prone.  You'd need to:
- figure out the node output of every directive you were trying to
replicate, with every type of (tedious in the best case, possibly very
tricky for some directives, but maybe not too bad)
- figure out a system to "inject" those nodes at the right time (not sure
how difficult this would be)
- figure out how Sphinx modifies the doctrees to do all it's linking, index
generation, toctree handling, etc. (I think this is the hardest part)
- figure out a way to get Sphinx to take doctrees as input (I'm guessing
you'd serialize them in whatever way Sphinx does when it does it's caching,
stick them in the cache, and then get Sphinx to build from the cache?)

What about changing the build process to use some kind of tool that goes
over the doc files, and if a source file is in lore format, it translates
it using rstgen, and if it's already a rst file, it just copies it into the
Sphinx project as-is?  Then just build the Sphinx project.  I think this
would be a lot less hassle than trying to decipher and replicate a bunch of
docutils and Sphinx internals, and would really only be a minor change to
the way that the lore2sphinx command line tool already works.  It just
processes each lore file and sends the output to an output directory, so
you'd just need to modify it to skip the processing and only copy rst files.

With the new refactoring of lore2sphinx into lore2sphinx-ng, I think this
is possible and would yield acceptable results.  Of course someone still
would need to finish lore2sphinx-ng and rstgen, but that's either going to
have to happen anyway, or some other tool would have to be built that mucks
with doctrees.

Thoughts?

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130326/46223bda/attachment.htm 

From _ at lvh.cc  Tue Mar 26 11:11:48 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Tue, 26 Mar 2013 16:11:48 +0100
Subject: [Twisted-Python] Twisted dinner pictures
In-Reply-To: <06F12164-5776-43C2-B182-38F261C93DF5@ox.cx>
References: <06F12164-5776-43C2-B182-38F261C93DF5@ox.cx>
Message-ID: <CAE_Hg6beG+g+MtPHyjc2LZFnpzkuakFPRQWVfHpLiB+OCkTJ8g@mail.gmail.com>

I think that last year's GSoC student came in not knowing any Twisted and
was a speaker this year that picked up a release manager hat just to get me
to merge my 5 year old branch is a testament to:

- open source is awesome
- sprints are awesome
- pycon is awesome (even if my phone insists on correcting it to "toxin")
- ashfall is awesome
On Mar 25, 2013 7:08 PM, "Hynek Schlawack" <hs at ox.cx> wrote:

> Hi,
>
> As you may have noticed, I'm building a little page to show off that PyCon
> wasn't about donglegate. http://thisispycon.com
>
> I would love to post about our little dinner and would be delighted if
> anyone having pics AND quotes could forward them to me.
>
> Same goes for sprints etc, flood me!
>
> Cheers,
>
> Hynek
>
> Sent from my phone.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130326/2513b3d1/attachment.htm 

From hs at ox.cx  Tue Mar 26 11:42:06 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Tue, 26 Mar 2013 16:42:06 +0100
Subject: [Twisted-Python] Twisted dinner pictures
In-Reply-To: <CAE_Hg6beG+g+MtPHyjc2LZFnpzkuakFPRQWVfHpLiB+OCkTJ8g@mail.gmail.com>
References: <06F12164-5776-43C2-B182-38F261C93DF5@ox.cx>
	<CAE_Hg6beG+g+MtPHyjc2LZFnpzkuakFPRQWVfHpLiB+OCkTJ8g@mail.gmail.com>
Message-ID: <B4920000-DBBE-404C-8773-B7BAAB58049A@ox.cx>

Great, now make it coherent and quotable please. :)

And the others: please help out too! I won?t name people I know about having pictures because they may not want me to share them with the world ? but know that I?m sad. ;)

P.S. Does anyone have a picture of ?Go Ashwini??

Am 26.03.2013 um 16:11 schrieb Laurens Van Houtven <_ at lvh.cc>:

> I think that last year's GSoC student came in not knowing any Twisted and was a speaker this year that picked up a release manager hat just to get me to merge my 5 year old branch is a testament to:
> 
> - open source is awesome
> - sprints are awesome
> - pycon is awesome (even if my phone insists on correcting it to "toxin")
> - ashfall is awesome
> 
> On Mar 25, 2013 7:08 PM, "Hynek Schlawack" <hs at ox.cx> wrote:
> Hi,
> 
> As you may have noticed, I'm building a little page to show off that PyCon wasn't about donglegate. http://thisispycon.com
> 
> I would love to post about our little dinner and would be delighted if anyone having pics AND quotes could forward them to me.
> 
> Same goes for sprints etc, flood me!
> 
> Cheers,
> 
> Hynek
> 
> Sent from my phone.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130326/ad133d37/attachment.htm 

From tom.prince at ualberta.net  Tue Mar 26 12:11:15 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Tue, 26 Mar 2013 10:11:15 -0600
Subject: [Twisted-Python] GitHub Twisted organization/repo
In-Reply-To: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>
References: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>
Message-ID: <87ehf2m998.fsf@hermes.hocat.ca>

Adi Roiban <adi at roiban.ro> writes:

> I now see that Tom Prince has already created git branches on GitHub
> for the ticket he is reviewing. Many thanks!

My repo is actually currently updated via a post-commit
hook. Eventually, that will change to point at twisted/twisted on
github, but I want to run it for a bit against an unofficial repo first.

> I have already started creating git branches on GitHub for all my
> patched for Twisted. I found it much pleasant to send a "live patch"
> URL rather than a static attached diff file.

One reason this is frowned on, is that the code then only exists in an
external resource that may disappear or change without notice. That
means that the work can be lost.

There have been a number of code hosting sites that have disappeared,
and that would take any contributions hosted only there with them.

https://twistedmatrix.com/trac/report/16 has a bunch of old tickets that
mostly with some code, that would potentially been lost.

> I understand that moving from SVN to GIT is not easy and if core
> developers can create and share SVN branches there is no big
> inconvenience.

I don't know if there is a desire to move to git. In any case, before
any such migration can occur. Namely, updating all the hooks and tools
to work with whatever vcs is being switched to. My impression is that,
at least at one point, bzr was a more likely choice of distributed vcs
to switch to.

  Tom


From _ at lvh.cc  Tue Mar 26 12:14:34 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Tue, 26 Mar 2013 17:14:34 +0100
Subject: [Twisted-Python] Twisted dinner pictures
In-Reply-To: <B4920000-DBBE-404C-8773-B7BAAB58049A@ox.cx>
References: <06F12164-5776-43C2-B182-38F261C93DF5@ox.cx>
	<CAE_Hg6beG+g+MtPHyjc2LZFnpzkuakFPRQWVfHpLiB+OCkTJ8g@mail.gmail.com>
	<B4920000-DBBE-404C-8773-B7BAAB58049A@ox.cx>
Message-ID: <CAE_Hg6b39U7GCLqkLe1pdbuq_0zPibR31cYiOkTK2Qnb1zo0wQ@mail.gmail.com>

Yep:

https://farm9.staticflickr.com/8391/8589643930_67282142ac_h.jpg
https://farm9.staticflickr.com/8099/8588545611_3001043027_h.jpg

Sorry for not being coherent: codeine-containing cough drugs + jetlag == bad


On Tue, Mar 26, 2013 at 4:42 PM, Hynek Schlawack <hs at ox.cx> wrote:

> Great, now make it coherent and quotable please. :)
>
> And the others: please help out too! I won?t name people I know about
> having pictures because they may not want me to share them with the world ?
> but know that I?m sad. ;)
>
> P.S. Does anyone have a picture of ?Go Ashwini??
>
> Am 26.03.2013 um 16:11 schrieb Laurens Van Houtven <_ at lvh.cc>:
>
> I think that last year's GSoC student came in not knowing any Twisted and
> was a speaker this year that picked up a release manager hat just to get me
> to merge my 5 year old branch is a testament to:
>
> - open source is awesome
> - sprints are awesome
> - pycon is awesome (even if my phone insists on correcting it to "toxin")
> - ashfall is awesome
> On Mar 25, 2013 7:08 PM, "Hynek Schlawack" <hs at ox.cx> wrote:
>
>> Hi,
>>
>> As you may have noticed, I'm building a little page to show off that
>> PyCon wasn't about donglegate. http://thisispycon.com
>>
>> I would love to post about our little dinner and would be delighted if
>> anyone having pics AND quotes could forward them to me.
>>
>> Same goes for sprints etc, flood me!
>>
>> Cheers,
>>
>> Hynek
>>
>> Sent from my phone.
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130326/d1a5095c/attachment.htm 

From adi at roiban.ro  Tue Mar 26 13:07:18 2013
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 26 Mar 2013 19:07:18 +0200
Subject: [Twisted-Python] GitHub Twisted organization/repo
In-Reply-To: <87ehf2m998.fsf@hermes.hocat.ca>
References: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>
	<87ehf2m998.fsf@hermes.hocat.ca>
Message-ID: <CAFycZ9cKFdFQOn8AGDRFGBs-q6xc2yrCahGpiNFKE2KijfyKVw@mail.gmail.com>

On 26 March 2013 18:11, Tom Prince <tom.prince at ualberta.net> wrote:
> Adi Roiban <adi at roiban.ro> writes:
>
>> I now see that Tom Prince has already created git branches on GitHub
>> for the ticket he is reviewing. Many thanks!
>
> My repo is actually currently updated via a post-commit
> hook. Eventually, that will change to point at twisted/twisted on
> github, but I want to run it for a bit against an unofficial repo first.

>> I have already started creating git branches on GitHub for all my
>> patched for Twisted. I found it much pleasant to send a "live patch"
>> URL rather than a static attached diff file.
>
> One reason this is frowned on, is that the code then only exists in an
> external resource that may disappear or change without notice. That
> means that the work can be lost.
>
> There have been a number of code hosting sites that have disappeared,
> and that would take any contributions hosted only there with them.
>
> https://twistedmatrix.com/trac/report/16 has a bunch of old tickets that
> mostly with some code, that would potentially been lost.

I understand this and I am not requesting to move the code to GitHub.
I don't think that this is a god idea.

I was only asking about GitHub mirrors.
The main request for this thread was to have a single source repo
mirror for Twisted in GitHub.
Now there are at least 2.

Now there are also 2 unrelated branches in GitHub for the same
twisted, my original branch and Tom's mirror.

>> I understand that moving from SVN to GIT is not easy and if core
>> developers can create and share SVN branches there is no big
>> inconvenience.
>
> I don't know if there is a desire to move to git. In any case, before
> any such migration can occur. Namely, updating all the hooks and tools
> to work with whatever vcs is being switched to. My impression is that,
> at least at one point, bzr was a more likely choice of distributed vcs
> to switch to.
>
I am not requesting to move to Git.

I was just expressing my frustration that attaching patch files to
Trac is not fun, and working with read-only SVN is not fun, and
following out-of-line review comments is not fun.


-- 
Adi Roiban


From glyph at twistedmatrix.com  Tue Mar 26 15:48:28 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 26 Mar 2013 12:48:28 -0700
Subject: [Twisted-Python] GitHub Twisted organization/repo
In-Reply-To: <CAFycZ9cKFdFQOn8AGDRFGBs-q6xc2yrCahGpiNFKE2KijfyKVw@mail.gmail.com>
References: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>
	<87ehf2m998.fsf@hermes.hocat.ca>
	<CAFycZ9cKFdFQOn8AGDRFGBs-q6xc2yrCahGpiNFKE2KijfyKVw@mail.gmail.com>
Message-ID: <7C164E68-BBC2-4F54-91B9-C3ED20C8A641@twistedmatrix.com>


On Mar 26, 2013, at 10:07 AM, Adi Roiban <adi at roiban.ro> wrote:

> I was just expressing my frustration that attaching patch files to
> Trac is not fun, and working with read-only SVN is not fun, and
> following out-of-line review comments is not fun.

Demonstrably, all of these things are more fun than volunteering to maintain a functioning git mirror, since people do these things all the time, but do not do that ;).

We'd love to have a single source github mirror.  Can you provide assistance getting it set up, monitored and maintained?

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130326/1f42e9df/attachment.htm 

From adi at roiban.ro  Tue Mar 26 16:03:22 2013
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 26 Mar 2013 22:03:22 +0200
Subject: [Twisted-Python] GitHub Twisted organization/repo
In-Reply-To: <7C164E68-BBC2-4F54-91B9-C3ED20C8A641@twistedmatrix.com>
References: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>
	<87ehf2m998.fsf@hermes.hocat.ca>
	<CAFycZ9cKFdFQOn8AGDRFGBs-q6xc2yrCahGpiNFKE2KijfyKVw@mail.gmail.com>
	<7C164E68-BBC2-4F54-91B9-C3ED20C8A641@twistedmatrix.com>
Message-ID: <CAFycZ9ecJvQopAifQSSw7CKGHdm+7SjB7Zcdm6KF5D3hXYcRbw@mail.gmail.com>

On 26 March 2013 21:48, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Mar 26, 2013, at 10:07 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> I was just expressing my frustration that attaching patch files to
> Trac is not fun, and working with read-only SVN is not fun, and
> following out-of-line review comments is not fun.
>
>
> Demonstrably, all of these things are more fun than volunteering to maintain
> a functioning git mirror, since people do these things all the time, but do
> not do that ;).
>
> We'd love to have a single source github mirror.  Can you provide assistance
> getting it set up, monitored and maintained?
>
> Thanks,
>
> -glyph

Thanks Glyph,

I am happy to help with that.
I just wanted to know that there is interest in a single mirror and I
will work from that.

I will check with Garret Heaton and maybe with Tom Prince (if he is
not too busy).


-- 
Adi Roiban


From glyph at twistedmatrix.com  Tue Mar 26 16:41:47 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 26 Mar 2013 13:41:47 -0700
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <CA+U=zK0=BeDpGFkz44KYUfcqY7Hd-dkF634HqCiXeDBQXVXn8w@mail.gmail.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
	<03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
	<CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>
	<4804AB74-C814-4306-89F0-E381E34E248D@twistedmatrix.com>
	<CA+U=zK0=BeDpGFkz44KYUfcqY7Hd-dkF634HqCiXeDBQXVXn8w@mail.gmail.com>
Message-ID: <D8034A5E-360B-43E6-9065-1654A5CE94C1@twistedmatrix.com>

On Mar 26, 2013, at 7:03 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> - figure out a way to get Sphinx to take doctrees as input (I'm guessing you'd serialize them in whatever way Sphinx does when it does it's caching, stick them in the cache, and then get Sphinx to build from the cache?)

This is the only part of the process I believe is actually necessary.  All the other stuff you wrote assumes that this can't be made to work :).  But as I understand it, this is specifically what JP asked Doug.

The whole point is that we want to go straight from Lore->some docutils data structure.  If we have to emit intermediary ReST, it's almost as bad as having to do the whole source translation in the first place.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130326/6af06e15/attachment.htm 

From glyph at twistedmatrix.com  Tue Mar 26 16:42:14 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 26 Mar 2013 13:42:14 -0700
Subject: [Twisted-Python] GitHub Twisted organization/repo
In-Reply-To: <CAFycZ9ecJvQopAifQSSw7CKGHdm+7SjB7Zcdm6KF5D3hXYcRbw@mail.gmail.com>
References: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>
	<87ehf2m998.fsf@hermes.hocat.ca>
	<CAFycZ9cKFdFQOn8AGDRFGBs-q6xc2yrCahGpiNFKE2KijfyKVw@mail.gmail.com>
	<7C164E68-BBC2-4F54-91B9-C3ED20C8A641@twistedmatrix.com>
	<CAFycZ9ecJvQopAifQSSw7CKGHdm+7SjB7Zcdm6KF5D3hXYcRbw@mail.gmail.com>
Message-ID: <BC95511D-EC00-42A8-AE46-F3AD164000D1@twistedmatrix.com>


On Mar 26, 2013, at 1:03 PM, Adi Roiban <adi at roiban.ro> wrote:

> Thanks Glyph,
> 
> I am happy to help with that.
> I just wanted to know that there is interest in a single mirror and I
> will work from that.
> 
> I will check with Garret Heaton and maybe with Tom Prince (if he is
> not too busy).

Great.  I hope we can corral all the effort that's being spent on this mirroring into the same direction :).

Thanks a lot,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130326/f77a7700/attachment-0001.htm 

From jml at mumak.net  Tue Mar 26 19:44:58 2013
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 26 Mar 2013 23:44:58 +0000
Subject: [Twisted-Python] Notes from Twisted BoF at PyCon 2013
In-Reply-To: <39764F1B-2817-4862-AA63-42F6D4945DE3@twistedmatrix.com>
References: <CAOp9P3p9wJghCDNzdJA6jaNRCUr0yzUj+SBRT5dJXfR2s_bBFw@mail.gmail.com>
	<20130325133822.2461.1510511860.divmod.xquotient.4@localhost6.localdomain6>
	<39764F1B-2817-4862-AA63-42F6D4945DE3@twistedmatrix.com>
Message-ID: <CAHZ8tna0JxjwJEg_1iSz0H-gUPKcYZiRUMqwnHXO35Qa+uPHOA@mail.gmail.com>

On Mon, Mar 25, 2013 at 11:00 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 25, 2013, at 6:38 AM, exarkun at twistedmatrix.com wrote:
>
> > Thanks for taking those notes, Itamar.
> >
> > I copied the summary onto the wiki and fleshed out the ideas a bit:
> >
> > https://twistedmatrix.com/trac/wiki/Fellowship2013/Priorities
> >
> > Jean-Paul
>
> Thanks to both of you for getting this published.
>
> I hope that everyone will read it and ask for clarification if anything is
> not obvious to those who could not attend :).
>

Looks both obvious & sensible to me. Thanks for sharing!

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130326/832535f2/attachment.htm 

From powdahound at gmail.com  Tue Mar 26 21:32:09 2013
From: powdahound at gmail.com (Garret Heaton)
Date: Tue, 26 Mar 2013 18:32:09 -0700
Subject: [Twisted-Python] GitHub Twisted organization/repo
In-Reply-To: <BC95511D-EC00-42A8-AE46-F3AD164000D1@twistedmatrix.com>
References: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>
	<87ehf2m998.fsf@hermes.hocat.ca>
	<CAFycZ9cKFdFQOn8AGDRFGBs-q6xc2yrCahGpiNFKE2KijfyKVw@mail.gmail.com>
	<7C164E68-BBC2-4F54-91B9-C3ED20C8A641@twistedmatrix.com>
	<CAFycZ9ecJvQopAifQSSw7CKGHdm+7SjB7Zcdm6KF5D3hXYcRbw@mail.gmail.com>
	<BC95511D-EC00-42A8-AE46-F3AD164000D1@twistedmatrix.com>
Message-ID: <CANL3M9NdwHYv3hDwJJ8Ct+e+Aaz_r_RR=dA2MvNnactwgNq2ZQ@mail.gmail.com>

Here's the simple script I'm running to sync the repo over to
github.com/powdahound/twisted: https://gist.github.com/powdahound/5250837

Happy to transfer ownership of the repo to someone else if that ends up
being helpful. Don't believe I have much to add in terms of repo-syncing
knowledge, management, or monitoring. I'm honestly surprised this simple
cron has been working as well as it has for so long. :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130326/aeda567a/attachment.htm 

From kevin.horn at gmail.com  Tue Mar 26 23:26:11 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 26 Mar 2013 22:26:11 -0500
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <D8034A5E-360B-43E6-9065-1654A5CE94C1@twistedmatrix.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
	<03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
	<CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>
	<4804AB74-C814-4306-89F0-E381E34E248D@twistedmatrix.com>
	<CA+U=zK0=BeDpGFkz44KYUfcqY7Hd-dkF634HqCiXeDBQXVXn8w@mail.gmail.com>
	<D8034A5E-360B-43E6-9065-1654A5CE94C1@twistedmatrix.com>
Message-ID: <CA+U=zK0Qc=e0c6TYK2XSVDtFnP-s8tSg3HOBHA=z8eedEfG_BQ@mail.gmail.com>

On Tue, Mar 26, 2013 at 3:41 PM, Glyph <glyph at twistedmatrix.com> wrote:

> On Mar 26, 2013, at 7:03 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> - figure out a way to get Sphinx to take doctrees as input (I'm guessing
> you'd serialize them in whatever way Sphinx does when it does it's caching,
> stick them in the cache, and then get Sphinx to build from the cache?)
>
>
> This is the only part of the process I believe is actually necessary.  All
> the other stuff you wrote assumes that this can't be made to work :).  But
> as I understand it, this is specifically what JP asked Doug.
>

I don't think this (only needing to figure out the last part) is really the
case:

- figure out the node output of every directive you were trying to
replicate, with every type of (tedious in the best case, possibly very
tricky for some directives, but maybe not too bad)

You need this to know what nodes to create in your tree.  This doesn't seem
too bad, until you realize that a number of the Sphinx-specific directives
you *absolutely must have* (or at least the nodes they create, depend on
the Sphinx build environment.  So you need to either re-create the build
environment, or you need to re-create all of these directives in your own
code.

- figure out a system to "inject" those nodes at the right time (not sure
how difficult this would be)

This one is probably not too bad, since you could probably get away with a
bare minimum of just sticking your (for example) toctree nodes right after
your main heading or something.  And you could probably get away with
something similar for index entries or whatever.

- figure out how Sphinx modifies the doctrees to do all it's linking, index
generation, toctree handling, etc.

Probably not too much needs to be done here directly, as I *think* that
Sphinx does all this after it builds the doctrees, so if you can get the
doctrees into Sphinx you're probably fine.  Don't quote me on that, though.
 So I no longer think this is the hardest part.  But I think you'd still
have to have a decent understanding of how these bits work internally to
generate your nodes correctly.  So a learning curve, though probably no
actual code to write specifically for this.

- figure out a way to get Sphinx to take doctrees as input (I'm guessing
you'd serialize them in whatever way Sphinx does when it does it's caching,
stick them in the cache, and then get Sphinx to build from the cache?)

Then you have to do this bit. The "obvious" way to do this is to create
your doctrees and then pickle them, like Sphinx does when it caches parsed
documents.  Then make Sphinx build its output from these "cached" files
(which I don't think it will currently do, but it can probably be made to
do it).

The whole point is that we want to go straight from Lore->some docutils
> data structure.
>

Why?  What does this buy us?  To me it seems more complicated, requires
more work, depends on *internal* APIs of a separate project (actually 2
separate projects), and doesn't seem to gain very much if anything.  What's
the reasoning here?  Keep in mind that I'm without the benefit of whatever
discussion on this took place at PyCon, so maybe I'm just missing something.

If it's just an incremental transition, then I think we can get that
without resorting to relying on the guts of two fairly complicated systems.

If we have to emit intermediary ReST, it's almost as bad as having to do
> the whole source translation in the first place.
>

I don't see how emitting intermediary ReST, which at least has a spec
(granted the spec is ugly to look at, but it's pretty complete) is any
worse than emitting intermediary doctrees, which could change out from
under us.

Summing up a bit:

Generating ReST is a challenging problem, no doubt.  But it's the _only_
challenging problem if we go the source translation route.

If we go the doctrees route, I don't understand the advantage gained, and
I'm concerned about dealing with the internals of docutils and Sphinx.

(also it's more work, and I'm lazy :P )

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130326/9872effe/attachment.htm 

From andrew at bemusement.org  Tue Mar 26 23:43:08 2013
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 27 Mar 2013 14:43:08 +1100
Subject: [Twisted-Python] Lore and generating reStructuredText
 (Lore2Sphinx)
In-Reply-To: <CA+U=zK0Qc=e0c6TYK2XSVDtFnP-s8tSg3HOBHA=z8eedEfG_BQ@mail.gmail.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
	<03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
	<CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>
	<4804AB74-C814-4306-89F0-E381E34E248D@twistedmatrix.com>
	<CA+U=zK0=BeDpGFkz44KYUfcqY7Hd-dkF634HqCiXeDBQXVXn8w@mail.gmail.com>
	<D8034A5E-360B-43E6-9065-1654A5CE94C1@twistedmatrix.com>
	<CA+U=zK0Qc=e0c6TYK2XSVDtFnP-s8tSg3HOBHA=z8eedEfG_BQ@mail.gmail.com>
Message-ID: <20130327034308.GA5140@flay.puzzling.org>

Kevin Horn wrote:
[?]
> Why?  What does this buy us?  To me it seems more complicated, requires
[?]
> 
> If it's just an incremental transition, then I think we can get that
> without resorting to relying on the guts of two fairly complicated systems.

Although I'm blissfully ignorant of the deeper, darker details of
docutils and sphinx (and hope to remain so), I feel compelled to point
out that an incremental transition is more than a ?just?.  You can start
reaping the rewards of the new system sooner and with less risk than an
all-or-nothing transition, it reduces merge conflicts for
work-in-progress doc branches, etc.

So I'd say incremental transition is closer to a ?must? than a ?just?!

-Andrew.


From kevin.horn at gmail.com  Wed Mar 27 09:17:21 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 27 Mar 2013 08:17:21 -0500
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <20130327034308.GA5140@flay.puzzling.org>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
	<03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
	<CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>
	<4804AB74-C814-4306-89F0-E381E34E248D@twistedmatrix.com>
	<CA+U=zK0=BeDpGFkz44KYUfcqY7Hd-dkF634HqCiXeDBQXVXn8w@mail.gmail.com>
	<D8034A5E-360B-43E6-9065-1654A5CE94C1@twistedmatrix.com>
	<CA+U=zK0Qc=e0c6TYK2XSVDtFnP-s8tSg3HOBHA=z8eedEfG_BQ@mail.gmail.com>
	<20130327034308.GA5140@flay.puzzling.org>
Message-ID: <CA+U=zK0ePDpJwb9U35=veUgeQgrfuhDHXELesj4uqV=eDo1BrQ@mail.gmail.com>

On Tue, Mar 26, 2013 at 10:43 PM, Andrew Bennetts <andrew at bemusement.org>wrote:

> Kevin Horn wrote:
> [?]
> > Why?  What does this buy us?  To me it seems more complicated, requires
> [?]
> >
> > If it's just an incremental transition, then I think we can get that
> > without resorting to relying on the guts of two fairly complicated
> systems.
>
> Although I'm blissfully ignorant of the deeper, darker details of
> docutils and sphinx (and hope to remain so), I feel compelled to point
> out that an incremental transition is more than a ?just?.  You can start
> reaping the rewards of the new system sooner and with less risk than an
> all-or-nothing transition, it reduces merge conflicts for
> work-in-progress doc branches, etc.
>
> So I'd say incremental transition is closer to a ?must? than a ?just?!
>
> -Andrew.
>

Yes, that was "just" in the sense of "only", rather than in the sense of
"merely". :)


--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130327/47a3f258/attachment.htm 

From williamson.michaelr at gmail.com  Thu Mar 28 12:24:17 2013
From: williamson.michaelr at gmail.com (Michael Williamson)
Date: Thu, 28 Mar 2013 10:24:17 -0600
Subject: [Twisted-Python] Problems with TLS connection not shutting down.
Message-ID: <CA+bfVEj6ez8HLNHKKg-WoXoNTN7LYhAg-J8w6z+ag9wABF2SLw@mail.gmail.com>

Hi, I'm having an issue where a tls connection never seems to shutdown
properly, and as a result, all the associated cleanup never happens.

Basically we're trying to implement a jabber client and allow the user to
sign out and then re-sign back in without completely quitting the program.
 When the user tries to sign back in, Twisted goes nuts because the
original connection was never shutdown properly.

So, I traced through the code with the debugger and I came to the
_shutdownTLS() function in tls.py.  I believe that what's supposed to
happen is that the first time through, the self._tlsConnection.shutdown()
returns False because the shutdown is initiated.  Then, when the 2nd part
of the shutdown handshake comes back from the server, dataReceived is
called, which calls shutdownTLS again, and then the cleanup can continue.

The problem is that after the initial call to shutdownTLS, I never see
anymore data from the server.  I'm not sure if it's a server issue (we're
just connecting to the Google jabber servers) where they don't close down
their SSL connections correctly, or if I'm just doing something silly.  So
anyway, I could solve this by overriding a bunch of stuff and ensuring that
self.transport.loseConnection() gets called no matter what, even when the
server doesn't respond with the second part of the close handshake, but I
figured I'd ask here first.

So, any TLS experts out there?  Thanks for any help or information - I
really appreciate it,
Mike
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130328/3e05c5e5/attachment.htm 

From jonathan at stoppani.name  Thu Mar 28 13:16:15 2013
From: jonathan at stoppani.name (Jonathan Stoppani)
Date: Thu, 28 Mar 2013 13:16:15 -0400
Subject: [Twisted-Python] Twisted source, changes and social analysis
Message-ID: <CAFzCN1sU4Kc_TU2+JA-uH7XtGz-J=trv60Va2xGd4bH9CsPeoQ@mail.gmail.com>

Hello everybody (with access to the Trac DB),

I am currently doing my master thesis on the "analysis and management
of change propagation in complex systems". I'm concentrating my
efforts on software-based complex systems.

As part of my analysis, I gather data from different domains, such as
dependencies between modules of the source code, interactions between
people (like, for example, this mailing list) and change requests (in
this specific case, issues and tickets on an issue tracking system).

A couple of weeks ago I asked on IRC if it would be possible to get
the Trac data from twistedmatrix.com and I was told to write a script
to dump the database by excluding sensitive information.

The script is up for review and auditing over here:

https://gist.github.com/GaretJax/5264941

It can be run by saving it to a .py file or directly with the following command:

curl -s https://gist.github.com/GaretJax/5264941/raw/c478c2c4ec39cdb4bc3ceeb05d57a31063a0a486/dump-trac.py
| python - <projenv> <outfile>

(by replacing the two arguments: trac base directory and the output file).

There are no privacy concerns, as all data being analyzes is publicly
available, either in the repository, in the mailing list archives or
on twistedmatrix.com

After being reviewed, can someone with access to the server please run
it for me?

Thanks,
Jonathan

P.S.: If someone would like more details about the research, a draft
of the project statement can be found here:
https://www.dropbox.com/s/qu3jpxcd4wpat2i/statement-0-r0-2013-03-19.pdf


From glyph at twistedmatrix.com  Thu Mar 28 18:36:22 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 28 Mar 2013 15:36:22 -0700
Subject: [Twisted-Python] Problems with TLS connection not shutting down.
In-Reply-To: <CA+bfVEj6ez8HLNHKKg-WoXoNTN7LYhAg-J8w6z+ag9wABF2SLw@mail.gmail.com>
References: <CA+bfVEj6ez8HLNHKKg-WoXoNTN7LYhAg-J8w6z+ag9wABF2SLw@mail.gmail.com>
Message-ID: <954D03CC-64AF-4189-B2ED-FC46055F6E2C@twistedmatrix.com>


On Mar 28, 2013, at 9:24 AM, Michael Williamson <williamson.michaelr at gmail.com> wrote:

> Hi, I'm having an issue where a tls connection never seems to shutdown properly, and as a result, all the associated cleanup never happens.
> 
> Basically we're trying to implement a jabber client and allow the user to sign out and then re-sign back in without completely quitting the program.  When the user tries to sign back in, Twisted goes nuts because the original connection was never shutdown properly.
> 
> So, I traced through the code with the debugger and I came to the _shutdownTLS() function in tls.py.  I believe that what's supposed to happen is that the first time through, the self._tlsConnection.shutdown() returns False because the shutdown is initiated.  Then, when the 2nd part of the shutdown handshake comes back from the server, dataReceived is called, which calls shutdownTLS again, and then the cleanup can continue.
> 
> The problem is that after the initial call to shutdownTLS, I never see anymore data from the server.  I'm not sure if it's a server issue (we're just connecting to the Google jabber servers) where they don't close down their SSL connections correctly, or if I'm just doing something silly.  So anyway, I could solve this by overriding a bunch of stuff and ensuring that self.transport.loseConnection() gets called no matter what, even when the server doesn't respond with the second part of the close handshake, but I figured I'd ask here first.
> 
> So, any TLS experts out there?  Thanks for any help or information - I really appreciate it,

Sadly I don't know enough about TLS specifics to tell you for sure.

It sounds like you may have spotted a bug.  More investigation is required though.  Does .abortConnection() do what you expect?  In your current problematic scenario, does the TCP connection to your peer stay alive?

-glyph




From williamson.michaelr at gmail.com  Thu Mar 28 18:55:15 2013
From: williamson.michaelr at gmail.com (Michael Williamson)
Date: Thu, 28 Mar 2013 16:55:15 -0600
Subject: [Twisted-Python] Problems with TLS connection not shutting down.
In-Reply-To: <954D03CC-64AF-4189-B2ED-FC46055F6E2C@twistedmatrix.com>
References: <CA+bfVEj6ez8HLNHKKg-WoXoNTN7LYhAg-J8w6z+ag9wABF2SLw@mail.gmail.com>
	<954D03CC-64AF-4189-B2ED-FC46055F6E2C@twistedmatrix.com>
Message-ID: <CA+bfVEjK_XbwSyktHL_TS5vzMPmPTfLy40_nmOC_ME_PE6JfBQ@mail.gmail.com>

Ah, I never tried abortConnection, but I'm doing something similar - I just
call loseConnection() and that does the trick.  And yes, I believe that the
TCP connection does stay alive because I was watching closeSocket() and it
was never called.

I wish I could be more helpful with regard to code samples to reproduce
this - but right now my stuff is a mess.

We're using the wokkel library, calling stopService() when we want
everything to be cleaned up.  They override that function, but I believe
they're doing everything correctly.  Basically, they're just calling
connection.disconnect() - and eventually the shutdownTLS() gets invoked.

Maybe most people just never care about having to clean up their
connections during a single session?  As for a fix - maybe it's not
necessary to do the test for
if shutdownSuccess in _shutdownTLS() ?

According to the ssl spec, it's not absolutely necessary to wait for the
server to return the close handshake.

That being said, that seems lousy - and it really seems like something else
must be going on.




On Thu, Mar 28, 2013 at 4:36 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 28, 2013, at 9:24 AM, Michael Williamson <
> williamson.michaelr at gmail.com> wrote:
>
> > Hi, I'm having an issue where a tls connection never seems to shutdown
> properly, and as a result, all the associated cleanup never happens.
> >
> > Basically we're trying to implement a jabber client and allow the user
> to sign out and then re-sign back in without completely quitting the
> program.  When the user tries to sign back in, Twisted goes nuts because
> the original connection was never shutdown properly.
> >
> > So, I traced through the code with the debugger and I came to the
> _shutdownTLS() function in tls.py.  I believe that what's supposed to
> happen is that the first time through, the self._tlsConnection.shutdown()
> returns False because the shutdown is initiated.  Then, when the 2nd part
> of the shutdown handshake comes back from the server, dataReceived is
> called, which calls shutdownTLS again, and then the cleanup can continue.
> >
> > The problem is that after the initial call to shutdownTLS, I never see
> anymore data from the server.  I'm not sure if it's a server issue (we're
> just connecting to the Google jabber servers) where they don't close down
> their SSL connections correctly, or if I'm just doing something silly.  So
> anyway, I could solve this by overriding a bunch of stuff and ensuring that
> self.transport.loseConnection() gets called no matter what, even when the
> server doesn't respond with the second part of the close handshake, but I
> figured I'd ask here first.
> >
> > So, any TLS experts out there?  Thanks for any help or information - I
> really appreciate it,
>
> Sadly I don't know enough about TLS specifics to tell you for sure.
>
> It sounds like you may have spotted a bug.  More investigation is required
> though.  Does .abortConnection() do what you expect?  In your current
> problematic scenario, does the TCP connection to your peer stay alive?
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130328/c0ad483e/attachment.htm 

From succer110 at tiscali.it  Thu Mar 28 21:24:00 2013
From: succer110 at tiscali.it (succer110 at tiscali.it)
Date: Fri, 29 Mar 2013 02:24:00 +0100 (CET)
Subject: [Twisted-Python] is twisted compatible with pickle?
Message-ID: <8116919.157021364520240322.JavaMail.defaultUser@defaultHost>

I have made 2 application: The client extract data from a sql server (10k lines), and send every line pickled to a "collector" server via socket.The server uses twisted and receive every line, unpikle it and store the data in another sql server.
Everytime i start sending data from client to server, in the first 200 line (everytime a different line) **the server** throws an exception:SOMETIMES it something like:
    Traceback (most recent call last):      File "collector2.py", line 81, in dataReceived        self.count,account	= pickle.loads(data)      File "/usr/lib/python2.6/pickle.py", line 1374, in loads        return Unpickler(file).load()      File "/usr/lib/python2.6/pickle.py", line 858, in load        dispatch[key](self)      File "/usr/lib/python2.6/pickle.py", line 1138, in load_pop        del self.stack[-1]    IndexError: list assignment index out of range
But it's NOT every time the same. Printing my exception i red: Exception: pop from empty listException: list index out of rangeException: "'"Exception: list assignment index out of range
Another strange errors is:File "/usr/lib/python2.6/pickle.py", line 1124, in find_class    __import__(module)exceptions.ImportError: No module named ond'
    for i in listaSAI:    	crm={}        try:    		crm['uid']=i[0]    	except:    		crm['uid']=None    	try:    		crm['type_cond']=i[01]    	except:    		crm['type_cond']=None    	try:    		crm['population_id']=i[2]    	except:    		crm['population_id']=None    	try:    		crm['product_id']=i[3]    	except:    		crm['product_id']=None    	try:    		crm['a_id']=i[4]    	except:    		crm['a_id']=None    	try:    		crm['status']=i[5]    	except:    		crm['status']=None    	#time.sleep(0.001)    	serialized = pickle.dumps((count,crm))    	#print "sent num", count, crm    	s.sendall(serialized)    	count += 1

And my server:
    def dataReceived(self, data):    	try:    		self.count,account	= pickle.loads(data)            	except Exception as e:    		print "Eccezione:", e    		print self.count+1    		print  data    		print traceback.print_exc()


Printing the data in my client tells me that everything it's ok.*If i try to slow down the process of sending using time.sleep(0.01) in my client, EVERYTHING IS FINE, and no exception are raised.*
What can i do to debug my code?
p.s. I suspect that exceptions.ImportError: No module named ond' refers to "type_cond" key in crm.

Invita i tuoi amici e Tiscali ti premia! Il consiglio di un amico vale pi? di uno spot in TV. Per ogni nuovo abbonato 30 ? di premio per te e per lui! Un amico al mese e parli e navighi sempre gratis: http://freelosophy.tiscali.it/ 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130329/ede7ddbf/attachment-0001.htm 

From dreid at dreid.org  Thu Mar 28 23:07:18 2013
From: dreid at dreid.org (David Reid)
Date: Thu, 28 Mar 2013 20:07:18 -0700
Subject: [Twisted-Python] is twisted compatible with pickle?
In-Reply-To: <8116919.157021364520240322.JavaMail.defaultUser@defaultHost>
References: <8116919.157021364520240322.JavaMail.defaultUser@defaultHost>
Message-ID: <CA+t4pawXy0TdqhU_w3gMy1x9XRg3y4zadBwfhtkeyy4vLHROdA@mail.gmail.com>

dataReceived gets called with any data that is available on the socket.
 That might not be all data you sent on the other side.  To ensure complete
"messages" are delivered your application has to specify some framing, such
as Netstrings.

See:
http://twistedmatrix.com/documents/current/api/twisted.protocols.basic.NetstringReceiver.htmland
the original specification of netstrings
http://cr.yp.to/proto/netstrings.txt

That being said, it's a very bad idea to send pickles over the network
because unpickling can result in arbitrary code execution.

Peruse some of the results of
https://www.google.com/search?q=pickle+execute+arbitrary+code for examples
of these dangers.

-David


On Thu, Mar 28, 2013 at 6:24 PM, succer110 at tiscali.it
<succer110 at tiscali.it>wrote:

> I have made 2 application:
> The client extract data from a sql server (10k lines), and send every line
> pickled to a "collector" server via socket.
> The server uses twisted and receive every line, unpikle it and store the
> data in another sql server.
>
> Everytime i start sending data from client to server, in the first 200
> line (everytime a different line) **the server** throws an exception:
> SOMETIMES it something like:
>
>     Traceback (most recent call last):
>       File "collector2.py", line 81, in dataReceived
>         self.count,account = pickle.loads(data)
>       File "/usr/lib/python2.6/pickle.py", line 1374, in loads
>         return Unpickler(file).load()
>       File "/usr/lib/python2.6/pickle.py", line 858, in load
>         dispatch[key](self)
>       File "/usr/lib/python2.6/pickle.py", line 1138, in load_pop
>         del self.stack[-1]
>     IndexError: list assignment index out of range
>
> But it's NOT every time the same. Printing my exception i red:
> Exception: pop from empty list
> Exception: list index out of range
> Exception: "'"
> Exception: list assignment index out of range
>
> Another strange errors is:
> File "/usr/lib/python2.6/pickle.py", line 1124, in find_class
>     __import__(module)
> exceptions.ImportError: No module named ond'
>
>     for i in listaSAI:
>     crm={}
>         try:
>     crm['uid']=i[0]
>     except:
>     crm['uid']=None
>     try:
>     crm['type_cond']=i[01]
>     except:
>     crm['type_cond']=None
>     try:
>     crm['population_id']=i[2]
>     except:
>     crm['population_id']=None
>     try:
>     crm['product_id']=i[3]
>     except:
>     crm['product_id']=None
>     try:
>     crm['a_id']=i[4]
>     except:
>     crm['a_id']=None
>     try:
>     crm['status']=i[5]
>     except:
>     crm['status']=None
>     #time.sleep(0.001)
>     serialized = pickle.dumps((count,crm))
>     #print "sent num", count, crm
>     s.sendall(serialized)
>     count += 1
>
>
> And my server:
>
>     def dataReceived(self, data):
>     try:
>     self.count,account = pickle.loads(data)
>     except Exception as e:
>     print "Eccezione:", e
>     print self.count+1
>     print  data
>     print traceback.print_exc()
>
>
>
> Printing the data in my client tells me that everything it's ok.
> *If i try to slow down the process of sending using time.sleep(0.01) in my
> client, EVERYTHING IS FINE, and no exception are raised.*
>
> What can i do to debug my code?
>
> p.s.
> I suspect that exceptions.ImportError: No module named ond' refers to
> "type_cond" key in crm.
>
>
> Invita i tuoi amici e Tiscali ti premia! Il consiglio di un amico vale pi?
> di uno spot in TV. Per ogni nuovo abbonato 30 ? di premio per te e per lui!
> Un amico al mese e parli e navighi sempre gratis:
> http://freelosophy.tiscali.it/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130328/3f5cbf88/attachment.htm 

From radix at twistedmatrix.com  Thu Mar 28 23:26:30 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 28 Mar 2013 22:26:30 -0500
Subject: [Twisted-Python] is twisted compatible with pickle?
In-Reply-To: <CA+t4pawXy0TdqhU_w3gMy1x9XRg3y4zadBwfhtkeyy4vLHROdA@mail.gmail.com>
References: <8116919.157021364520240322.JavaMail.defaultUser@defaultHost>
	<CA+t4pawXy0TdqhU_w3gMy1x9XRg3y4zadBwfhtkeyy4vLHROdA@mail.gmail.com>
Message-ID: <CAPkRfURWb_M6R5ROy7NhYyXy1vATzoz5rAQkN=YfBLPhWPwUSA@mail.gmail.com>

>
> On Thu, Mar 28, 2013 at 6:24 PM, succer110 at tiscali.it <
> succer110 at tiscali.it> wrote:
>
>> I have made 2 application:
>> The client extract data from a sql server (10k lines), and send every
>> line pickled to a "collector" server via socket.
>> The server uses twisted and receive every line, unpikle it and store the
>> data in another sql server.
>>
>> Everytime i start sending data from client to server, in the first 200
>> line (everytime a different line) **the server** throws an exception:
>> SOMETIMES it something like:
>>
>>     Traceback (most recent call last):
>>       File "collector2.py", line 81, in dataReceived
>>         self.count,account = pickle.loads(data)
>>       File "/usr/lib/python2.6/pickle.py", line 1374, in loads
>>         return Unpickler(file).load()
>>       File "/usr/lib/python2.6/pickle.py", line 858, in load
>>         dispatch[key](self)
>>       File "/usr/lib/python2.6/pickle.py", line 1138, in load_pop
>>         del self.stack[-1]
>>     IndexError: list assignment index out of range
>>
>>

> And my server:
>>
>>     def dataReceived(self, data):
>>     try:
>>     self.count,account = pickle.loads(data)
>>     except Exception as e:
>>     print "Eccezione:", e
>>     print self.count+1
>>     print  data
>>     print traceback.print_exc()
>>
>>
>>

On Thu, Mar 28, 2013 at 10:07 PM, David Reid <dreid at dreid.org> wrote:

> dataReceived gets called with any data that is available on the socket.
>  That might not be all data you sent on the other side.  To ensure complete
> "messages" are delivered your application has to specify some framing, such
> as Netstrings.
>
> See:
> http://twistedmatrix.com/documents/current/api/twisted.protocols.basic.NetstringReceiver.html and
> the original specification of netstrings
> http://cr.yp.to/proto/netstrings.txt
>
> That being said, it's a very bad idea to send pickles over the network
> because unpickling can result in arbitrary code execution.
>
> Peruse some of the results of
> https://www.google.com/search?q=pickle+execute+arbitrary+code for
> examples of these dangers.
>
> -David
>
>
We also have a FAQ entry about this:

http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith



-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130328/a7ba24c5/attachment.htm 

From _ at lvh.cc  Fri Mar 29 07:57:22 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Fri, 29 Mar 2013 12:57:22 +0100
Subject: [Twisted-Python] is twisted compatible with pickle?
In-Reply-To: <8116919.157021364520240322.JavaMail.defaultUser@defaultHost>
References: <8116919.157021364520240322.JavaMail.defaultUser@defaultHost>
Message-ID: <CAE_Hg6bX67k_ouuYSuTyJM_RNhBQ9hfxEezfNE+g60sRpcQhfg@mail.gmail.com>

While everything the people above me have said is correct, I would suggest
AMP as an alternative. It would allow you to send most basic Python data
types in your messages.
On Mar 29, 2013 2:32 AM, "succer110 at tiscali.it" <succer110 at tiscali.it>
wrote:

> I have made 2 application:
> The client extract data from a sql server (10k lines), and send every line
> pickled to a "collector" server via socket.
> The server uses twisted and receive every line, unpikle it and store the
> data in another sql server.
>
> Everytime i start sending data from client to server, in the first 200
> line (everytime a different line) **the server** throws an exception:
> SOMETIMES it something like:
>
>     Traceback (most recent call last):
>       File "collector2.py", line 81, in dataReceived
>         self.count,account = pickle.loads(data)
>       File "/usr/lib/python2.6/pickle.py", line 1374, in loads
>         return Unpickler(file).load()
>       File "/usr/lib/python2.6/pickle.py", line 858, in load
>         dispatch[key](self)
>       File "/usr/lib/python2.6/pickle.py", line 1138, in load_pop
>         del self.stack[-1]
>     IndexError: list assignment index out of range
>
> But it's NOT every time the same. Printing my exception i red:
> Exception: pop from empty list
> Exception: list index out of range
> Exception: "'"
> Exception: list assignment index out of range
>
> Another strange errors is:
> File "/usr/lib/python2.6/pickle.py", line 1124, in find_class
>     __import__(module)
> exceptions.ImportError: No module named ond'
>
>     for i in listaSAI:
>     crm={}
>         try:
>     crm['uid']=i[0]
>     except:
>     crm['uid']=None
>     try:
>     crm['type_cond']=i[01]
>     except:
>     crm['type_cond']=None
>     try:
>     crm['population_id']=i[2]
>     except:
>     crm['population_id']=None
>     try:
>     crm['product_id']=i[3]
>     except:
>     crm['product_id']=None
>     try:
>     crm['a_id']=i[4]
>     except:
>     crm['a_id']=None
>     try:
>     crm['status']=i[5]
>     except:
>     crm['status']=None
>     #time.sleep(0.001)
>     serialized = pickle.dumps((count,crm))
>     #print "sent num", count, crm
>     s.sendall(serialized)
>     count += 1
>
>
> And my server:
>
>     def dataReceived(self, data):
>     try:
>     self.count,account = pickle.loads(data)
>     except Exception as e:
>     print "Eccezione:", e
>     print self.count+1
>     print  data
>     print traceback.print_exc()
>
>
>
> Printing the data in my client tells me that everything it's ok.
> *If i try to slow down the process of sending using time.sleep(0.01) in my
> client, EVERYTHING IS FINE, and no exception are raised.*
>
> What can i do to debug my code?
>
> p.s.
> I suspect that exceptions.ImportError: No module named ond' refers to
> "type_cond" key in crm.
>
>
> Invita i tuoi amici e Tiscali ti premia! Il consiglio di un amico vale pi?
> di uno spot in TV. Per ogni nuovo abbonato 30 ? di premio per te e per lui!
> Un amico al mese e parli e navighi sempre gratis:
> http://freelosophy.tiscali.it/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130329/e88883f7/attachment-0001.htm 

From sergun at gmail.com  Fri Mar 29 12:09:14 2013
From: sergun at gmail.com (Sergey Gerasimov)
Date: Fri, 29 Mar 2013 20:09:14 +0400
Subject: [Twisted-Python] Reason of calling Stale Broker inside loopback
Message-ID: <05b301ce2c97$c31e26a0$495a73e0$@gmail.com>

Hello,

 

1.       What is the reason of error "DeadReferenceError: Calling Stale
Broker"?

My program uses PB inside loopback, so I shouldn't have any disconnects.

 

2.       I call many time remote method returning pb.Referenceable. Can it
be a reason of topic 1 or generally lead to system's degradation?

 

Sergey.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130329/94ac07db/attachment.htm 

From donal.mcmullan at gmail.com  Fri Mar 29 22:23:55 2013
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Sat, 30 Mar 2013 15:23:55 +1300
Subject: [Twisted-Python] Weta Digital is hiring
Message-ID: <CADf-aJGmdTFF7NungrUWAu8iCCLQO-eQwcWDCCMKdXYuE16yCg@mail.gmail.com>

"Weta Digital is a world leading visual effects company based in
Wellington, New Zealand."

  The "Production Engineer" roles on our jobs page are heavily Python
focused. Some of that Python code will be inside applications like
Autodesk's Maya or the Foundry's Nuke, but most of it will solve the kinds
of problems I'm sure most of you work on routinely.
 http://www.wetafx.co.nz/jobs

  For example, because our render farm is on the large side, we face many
of the challenges of scale that those of you who work on internet-facing
applications will be familiar with. On the client side, we have an ocean of
data to track, and we try to provide our artists with simple tools to get
the most from that data. Frameworks like PySide, Bottle and TxWeb help us
to get there.

  Unsurprisingly, Twisted is well established in the pipeline at Weta, and
it's used in a diverse set of client, server and automated/unattended
applications. We've had superb service from Twisted, and we only
expect itsusage here to grow.

  We have roles in Production Engineering that we'd like to fill as soon as
we can, but we're protective of the great team that we have, and we try to
grow it carefully. We prefer to wait for the right people.

 If you're interested in helping us to deliver some extraordinary software
and film projects, we'd love to hear from you, and the recruitment form on
our site takes just a few minutes to fill in.


http://www.wetafx.co.nz/recruitment-form.php?job-title=Production%20Engineer&form_type=softdev<http://www-ext.wetafx.co.nz/recruitment-form.php?job-title=Production%20Engineer&form_type=softdev>

  Thank you

 Donal McMullan
 Senior Production Engineer
 Weta Digital
 http://www.wetafx.co.nz
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130330/b91c3bda/attachment.htm 

From glyph at twistedmatrix.com  Sat Mar 30 15:07:25 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 30 Mar 2013 12:07:25 -0700
Subject: [Twisted-Python] Reason of calling Stale Broker inside loopback
In-Reply-To: <05b301ce2c97$c31e26a0$495a73e0$@gmail.com>
References: <05b301ce2c97$c31e26a0$495a73e0$@gmail.com>
Message-ID: <F3DA0A08-3D31-437B-872D-E027CC5B6392@twistedmatrix.com>


On Mar 29, 2013, at 9:09 AM, Sergey Gerasimov <sergun at gmail.com> wrote:

> Hello,
>  
> 1.       What is the reason of error ?DeadReferenceError: Calling Stale Broker??
> My program uses PB inside loopback, so I shouldn?t have any disconnects. 

It means something disconnected.  Disconnects can happen for many reasons; perhaps your process terminated, perhaps an unhandled exception caused a problem.

> 2.       I call many time remote method returning pb.Referenceable. Can it be a reason of topic 1 or generally lead to system?s degradation?

That should be fine. But I can't see your code, so I have no idea what you mean by "many time".  If you can provide a *short* example of a program with this problem (not your whole program, just the shortest one that works), we might be able to help more.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130330/c005e641/attachment.htm 

From exarkun at twistedmatrix.com  Sun Mar 31 00:05:24 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 31 Mar 2013 04:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1364702724.2.928404487@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130331/9921467f/attachment.htm 

From gbstack08 at gmail.com  Sun Mar 31 04:50:03 2013
From: gbstack08 at gmail.com (Todong Ma)
Date: Sun, 31 Mar 2013 16:50:03 +0800
Subject: [Twisted-Python] How to determine whether transport.write() succeed?
Message-ID: <CAHZXDMKnTsxmZNy7a6aq8jbP6ttpgbOfZwrP8uu6TNpqvfQgDA@mail.gmail.com>

Hi, everyone

How could I dertermine ITransport.write() succeed?
In windows socket API, I can check send()'s return value to dertermine
whether send() succeed.

Any suggestion is appreciated.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130331/2c0d24f2/attachment.htm 

From glyph at twistedmatrix.com  Sun Mar 31 05:49:20 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 31 Mar 2013 02:49:20 -0700
Subject: [Twisted-Python] How to determine whether transport.write()
	succeed?
In-Reply-To: <CAHZXDMKnTsxmZNy7a6aq8jbP6ttpgbOfZwrP8uu6TNpqvfQgDA@mail.gmail.com>
References: <CAHZXDMKnTsxmZNy7a6aq8jbP6ttpgbOfZwrP8uu6TNpqvfQgDA@mail.gmail.com>
Message-ID: <97464120-5223-4F58-8BB8-B4C9713EC0D1@twistedmatrix.com>

On Mar 31, 2013, at 1:50 AM, Todong Ma <gbstack08 at gmail.com> wrote:

> Hi, everyone
> 
> How could I dertermine ITransport.write() succeed?
> In windows socket API, I can check send()'s return value to dertermine whether send() succeed.
> 
> Any suggestion is appreciated.

ITransport.write() always succeeds.  It may or may not call socket.send immediately, so it cannot tell you if the socket.send() succeeded or not.

What are you trying to do?

-glyph



From gbstack08 at gmail.com  Sun Mar 31 21:09:38 2013
From: gbstack08 at gmail.com (Todong Ma)
Date: Mon, 1 Apr 2013 09:09:38 +0800
Subject: [Twisted-Python] How to determine whether transport.write()
	succeed?
In-Reply-To: <97464120-5223-4F58-8BB8-B4C9713EC0D1@twistedmatrix.com>
References: <CAHZXDMKnTsxmZNy7a6aq8jbP6ttpgbOfZwrP8uu6TNpqvfQgDA@mail.gmail.com>
	<97464120-5223-4F58-8BB8-B4C9713EC0D1@twistedmatrix.com>
Message-ID: <CAHZXDMJy4Sd84=dFyKyKJqDPv=YZQ2a=B+UCL-F291d4jUs60g@mail.gmail.com>

I wrote a simple client and server to get system information (e.g. cpu,
memory, etc.)
Client send 'cpu' to the server, then server will return cpu's information
to client.

Now client send multiple commands to server one time, e.g. cpu, memory,
database, hard disk. But sometimes server couldn't receive some type
information (e.g. cpu, database), and the missed information type is not
fixed every time.

So I want client to check whether ITransport.write() sends message to
server successfully. If failed, client will resend the message to server.

On Sun, Mar 31, 2013 at 5:49 PM, Glyph <glyph at twistedmatrix.com> wrote:

> On Mar 31, 2013, at 1:50 AM, Todong Ma <gbstack08 at gmail.com> wrote:
>
> > Hi, everyone
> >
> > How could I dertermine ITransport.write() succeed?
> > In windows socket API, I can check send()'s return value to dertermine
> whether send() succeed.
> >
> > Any suggestion is appreciated.
>
> ITransport.write() always succeeds.  It may or may not call socket.send
> immediately, so it cannot tell you if the socket.send() succeeded or not.
>
> What are you trying to do?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130401/98f2e3c0/attachment.htm 

From keturn at keturn.net  Tue Mar 26 20:25:06 2013
From: keturn at keturn.net (Kevin Turner)
Date: Tue, 26 Mar 2013 17:25:06 -0700
Subject: [Twisted-Python] Twisted dinner pictures
In-Reply-To: <06F12164-5776-43C2-B182-38F261C93DF5@ox.cx>
References: <06F12164-5776-43C2-B182-38F261C93DF5@ox.cx>
Message-ID: <1364343906.21038.140661209621477.6A3FE5F9@webmail.messagingengine.com>

I uploaded a bit of Spaceteam video from the sprints:
http://www.youtube.com/watch?v=bQqQTA1dtHk


From glyph at twistedmatrix.com  Fri Mar  1 01:29:56 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 1 Mar 2013 00:29:56 -0800
Subject: [Twisted-Python] Let's talk about maintaining Lore (and validity of
	tickets)
Message-ID: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>

Jean-Paul recently closed a Lore ticket as invalid, and suggested we have a discussion about Lore's future direction.  This strikes me as a very good idea, and so I wrote a message which is a bit too long (for which I apologize) to kick that off.

The discussion began here: <http://twistedmatrix.com/trac/ticket/6313#comment:7>.  In said suggestion, JP said:

> I am rejecting this Lore feature as unnecessary for Twisted's current documentation needs.

With regard to this specific point: the bug was discovered when building the documentation for the systemd-howto-5601 branch: <https://buildbot.twistedmatrix.com/builders/documentation/builds/2919/>.  Presumably a better error would have facilitated development.  So, while better error reporting of this error case may not be "necessary" I think it clearly would have been beneficial in this case and would perhaps be beneficial in similar cases in the future.  Is necessity or benefit the standard which keeps a ticket open in our tracker?  Do we have a documented standard for how necessary (or beneficial) a ticket must be anywhere?

> However if there is genuine interest in enhancing Lore (specifically: obsoleting the lore2sphinx conversion tool), then I'm open to reconsidering that.


I don't think these two paths (lore2sphinx and continuing to maintain lore) are necessarily mutually exclusive.  Also I think it implies something about the current state of affairs that isn't accurate - e.g. that the Twisted team has agreed that Sphinx will surely replace Lore and that we are making progress on that process of placement more than we are maintaining Lore itself.

Unfortunately, I think it will be clear to anyone following its progress that lore2sphinx is unmaintained and the sphinx migration effort is stalled.  Nobody has committed to <https://bitbucket.org/khorn/lore2sphinx> in a year and a half, about the same amount of time that <http://twistedmatrix.com/trac/browser/branches/sphinx-conversion-4500> has been idle as well.  By contrast, <http://twistedmatrix.com/trac/browser/trunk/twisted/lore> has seen commits - albeit not many - within only a couple of weeks.  So, empirically, we're already maintaining lore and lore2sphinx is currently "obsolete"; really the question should be if we want to reverse that path.

I also have no objection if someone wants to complete the lore2sphinx work, but if the lore2sphinx buildbot were to die tomorrow and go offline, I wouldn't be particularly anxious to spend a lot of resources to fix it.

My position on this was always that if someone wanted to improve the documentation, they were welcome to do so, and if they wanted to use Sphinx to do it, that's great too.  I just wasn't willing to tolerate any period where our toolchain was broken and we couldn't generate documentation for a release.  And a good thing we didn't, by the way!  If we had said "go ahead, pull the trigger, whatever, it's OK to break trunk for a little while!" we wouldn't have had any documentation toolchain for the last 2 years.

(I hope that everyone takes this to heart the next time someone wants to break our development process "for a little while, just during the migration" to move to Github, or Jenkins, or Travis-CI or whatever.)

> Basically, this ticket is a demonstration of "stumble around in the dark" development in action. We don't need more of that (and I know I'm as guilty as anyone else). If someone wants to turn on a light, great. Otherwise, everyone out of the basement and find something more valuable on which to spend your time.

I don't think that this metaphor is particularly... illuminating.  While I can sort of guess what you're talking about, it's all pretty implicit and seems to make several assumptions I am not sure that I agree with.

What's wrong with stumbling around in the dark?  If we had a hierarchically-managed product-driven organization, then having focus and a clearly communicated, consistently enforced shared goal would be important to effectively produce that product, but community projects don't seem to work that way.  Consensus is important, but even given a consensus, pool of resources for development that we can allocate via executive decision is fairly small, and is just about sufficient to pay for code reviews of the contributions that we receive and to take care of administrivia, not to do substantial new development.  We have to rely on volunteer contributions for that.

I'm also sure our tools have a million boring little niggling bugs that need to be discovered and addressed so that the average experience of using and working on Twisted is as pleasant as possible, and we don't want to discourage people from reporting them; that's also a useful volunteer function.

Does it harm any members of the Twisted development team to have other members of said team (by the way hi rwall congrats on your commit access) to file these sorts of legitimate, but trivial bugs in uninteresting bits of support code in Twisted, like lore or our release-management tools?

To play my own debate opponent here: perhaps it does.  The bug tracker is a resource, new bugs consume attention of core developers as we each probably pay attention to see if users are reporting serious problems we should fix.  Collectively, that attention is arguably our most precious resource and we should be careful not to waste it.  So we don't want the shared resource of the issue tracker to suffer from a tragedy of the commons and get filled up with junk bugs so we can't find the good ones.  Closing tickets as invalid to draw a line around what we're trying to get accomplished and to prevent future attention from being wasted.

But, attention is worthless without enthusiasm and skill, and having one's tickets closed as invalid does potentially sap one's enthusiasm and thereby one's motivation to acquire further skills.  So more determinedly closing things as invalid may be robbing Peter to pay Paul.

Also, in this case, I would question the classification of "invalid"; I like to use the "invalid" on bugs which are clearly not actionable.  #6313 describes a clear problem (a traceback), and after clarification, a clear course of action (improve the error message).  If we don't believe the problem should be fixed, then we should say "wontfix".  I think this distinction is important because actually invalid (too vague as to be actionable in any way) bugs are in fact a waste of time, and provoke a good deal of pointless discussion before they die.  Wontfix bugs are more of a good-faith mistake on the part of the reporter :-).

With tickets such as this one, I think that what we (members of the Inner Circle, I guess, we should have secret handshake or something) ought to be doing is:

setting the priority to 'lowest' (while this has very little real practical or process-enforced consequence, it should at least help others not get distracted by it in the future if they're looking for something to do)
directing the bug reporter to a more useful ticket by linking to something that we wish someone would work on
Once there's a positive pointer towards something more useful, explaining that (maintaining lore/changing the background color of the website/changing the order that we send response headers in HTTP) is peripheral to Twisted's mission of providing awesome internet APIs to programmers everywhere, but that we'd still be happy to receive a patch that addressed the issue with our code, provided that it adheres with all the relevant testing, coding standard, and compatibility requirements and doesn't waste a reviewer's time

It's challenging to put useful comments on tickets, especially apparently pointless or ill-defined tickets.  It's also just tiring: a lot of the comments one needs to make are incredibly repetitive and redundant.  But, since I believe it's clear that few, if any people actually get their priorities of what to do for Twisted by scanning the bugtracker for recently-filed open issues, I posit that there's not a lot of value in ticket triage that doesn't make its primary goal the repeated communication of documented project policy, existing consensus, and constant positive suggestions as to what contributors should take as a next step.

In this particular case, that means that "everybody out of the basement" is a vague, confusing, and unhelpful comment that just makes feels mildly insulting to the other people participating in the discussion on the bug.  "I would prefer it if you would work on a high-priority ticket like ticket 84 instead of this one, since I believe the Twisted team has a general consensus that lore will be obsoleted and no-one wants to be responsible for it; see ticket 4500 for more details on one effort to do that.".

More generally, I think that when one of us is tempted to shut down a bug like this, a better thing to do would be to write a wiki page or a blog post that can be refined by discussion, and can be an artifact that can be the point of reference for some rough consensus (like, e.g. <http://twistedmatrix.com/trac/wiki/CompatibilityPolicy>) updated by subsequent discussions, and then link to that discussion.

This does all sort of raise the question of "why do we bother to keep a database of tickets around, anyway", and how we should address the warehousing of a potentially increasing number of hypothetically valid bugs that we just don't care enough about to fix.  I haven't really addressed those questions very well here, so I do hope to hear more from all of you about that issue.

So, rwall, hopefully now you'll go close #84 instead of either updating 6313 or responding to this message :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130301/a43b93ca/attachment.html>

From glyph at twistedmatrix.com  Fri Mar  1 02:45:17 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 1 Mar 2013 01:45:17 -0800
Subject: [Twisted-Python] Need help regarding Gsoc 2013
In-Reply-To: <CANj+b3OTummTY4S+amyPowa=kO8pBiAhJwt8YHcGVJZkYb7y_g@mail.gmail.com>
References: <CANj+b3OTummTY4S+amyPowa=kO8pBiAhJwt8YHcGVJZkYb7y_g@mail.gmail.com>
Message-ID: <E31985F7-AB83-4C32-B149-8378AB4F1172@twistedmatrix.com>


On Feb 28, 2013, at 6:19 PM, Saurabh Mahindre <saurabh.mahindre at gmail.com> wrote:

> I am an undergraduate student and plan to try for a project with twisted.....I went through the gsoc wiki page for twisted and I have picked up some ideas
> I need some help as to how I can follow up on them or get new ones?

Do you mean you're just looking to try out a project, or that you'd like to be involved in the next GSoC, or both?

> I will be thankful for any help or criticism as i am new to this process.

Well, why don't you get started just by telling us what sort of things you're interested in, and why you would like to try working on Twisted, and we can go from there?

-glyph




From _ at lvh.cc  Fri Mar  1 07:31:43 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Fri, 1 Mar 2013 15:31:43 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
Message-ID: <CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>

Well, you'd presumably have a connection to each of the servers in the form
of a client factory and a protocol instance. Then, every time you get a
message, you figure out which protocol instance you want (the one for the
appropriate server) and send a message to it. You could do that with
self.transport.write, of course, but it would be much easier to just use a
ready-made RPC thing.

One such RPC thing is AMP, which comes with Twisted. You can read more
about it here:

http://amp-protocol.net/
https://twistedmatrix.com/documents/current/core/howto/amp.html

You will probably end up having a command like HandlePacket or something
(presumably you can come up with a more apt domain-specific name), and
something close to
self.servers[serverFor(packet.origin)].callRemote(HandlePacket,
packet.data), or whatever.

I realize this is still pretty vague and high level, so feel free to ask
more questions about the parts that are unclear :)


On Thu, Feb 28, 2013 at 10:59 PM, Benjamin BERTRAND <beenje at gmail.com>wrote:

> Hi,
>
> I have to replace a piece of software that sniffs the traffic on one
> interface. It gets different messages that are each associated to a
> specific emitter.
> On the same machine, one server is started for each emitter (on a
> different port).
> And the application is just supposed to use the proper server to send the
> messages captured (to a client on another machine).
>
> Not sure if it's clear, but basically if I have 2 emitters A and B, I'll
> start 2 servers (a and b).
> My sniffer will get messages A1, A2, B1, B2, B3...
> I have to pass messages A1, A2 to server a, that will just send them to
> the client (if it is connected of course).
> And B1, B2, B3 to server b.
> I don't need any buffering. If no client is connected, messages captured
> are just discarded.
>
> To sniff the network, I want to use pylibpcap or pcapy.
> I found this example to make it work with twisted:
> http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
>
> Starting several servers that use the same protocol is not a problem.
> But how do I pass the messages captured to the right server?
> How do I make the link between the function sniffing the network and the
> servers?
>
> Thanks
>
> Benjamin
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130301/8867f1fa/attachment-0001.html>

From saurabh.mahindre at gmail.com  Fri Mar  1 08:04:10 2013
From: saurabh.mahindre at gmail.com (Saurabh Mahindre)
Date: Fri, 1 Mar 2013 20:34:10 +0530
Subject: [Twisted-Python] Need help regarding Gsoc 2013
Message-ID: <CANj+b3Mr5zedWRbuJSJf8Nr1sgke=2biuTV80bsbkoTRnK=kLw@mail.gmail.com>

Yes, I would like to be involved in next gsoc.
Twisted interests me as whole and how it eases networking whenever I worked
with it.
Integration with GUI loops was also very great.Having seen Twisted in
action , how it works at lower level will be great thing to know more about.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130301/ed4b4159/attachment.html>

From kevin.horn at gmail.com  Fri Mar  1 10:44:26 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 1 Mar 2013 11:44:26 -0600
Subject: [Twisted-Python] Let's talk about maintaining Lore (and
 validity of tickets)
In-Reply-To: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
Message-ID: <CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>

On Fri, Mar 1, 2013 at 2:29 AM, Glyph <glyph at twistedmatrix.com> wrote:

> Jean-Paul recently closed a Lore ticket as invalid, and suggested we have
> a discussion about Lore's future direction.  This strikes me as a very good
> idea, and so I wrote a message which is a bit too long (for which I
> apologize) to kick that off.
>
> I don't think these two paths (lore2sphinx and continuing to maintain
> lore) are necessarily mutually exclusive.  Also I think it implies
> something about the current state of affairs that isn't accurate - e.g.
> that the Twisted team has agreed that Sphinx will surely replace Lore and
> that we are making progress on that process of placement more than we are
> maintaining Lore itself.
>
> Unfortunately, I think it will be clear to anyone following its progress
> that lore2sphinx is unmaintained and the sphinx migration effort is
> stalled.  Nobody has committed to <https://bitbucket.org/khorn/lore2sphinx>
> in a year and a half, about the same amount of time that <
> http://twistedmatrix.com/trac/browser/branches/sphinx-conversion-4500>
> has been idle as well.  By contrast, <
> http://twistedmatrix.com/trac/browser/trunk/twisted/lore> has seen
> commits - albeit not many - within only a couple of weeks.  So,
> empirically, we're already maintaining lore and lore2sphinx is currently
> "obsolete"; really the question should be if we want to reverse that path.
>
>
Some what orthagonal to your point, but this is incorrect.  lore2sphinx was
some time ago into "lore2sphinx-ng" and "rstgen".

https://bitbucket.org/khorn/lore2sphinx-ng
https://bitbucket.org/khorn/rstgen

This was initially done as an experiment in using a more explicit
"formatting model" for the generation for the Sphinx docs (and somewhat due
to _your_ prodding, Glyph), and so I didn't initially make a big
announcement or anything.

Once it became apparent that it was actually going to work out better, I
sent out some emails to those who had expressed interest in helping with
the whole lore2sphinx project, though I don't believe I sent out anything
to the twisted list in general, as I probably should have.  I'll point out
that I can count people who have shown interest in moving this forward on
one hand, though.

And I've specifically mentioned that I had done said forking to you, Glyph,
in IRC  ;)
(though it's IRC after all...who remembers what happens in IRC?)

I thought I had put a notice up in the readme file in the lore2sphinx repo,
but as it isn't there, I presume I either forgot, or never got it merged,
or something.

So, totally my bad for not communicating better, but I have NOT given up on
converting things from Lore into Sphinx.
(Nor do I intend to.)

Thinking about it, I suppose I've been somewhat reticent to do much
communicating about any work I do on this, as what seems to happen is that
it just gives everyone an excuse bring up some new objection to actually
getting the conversion done.  I hadn't really realized
this consciously until just now, though.

I also have no objection if someone wants to complete the lore2sphinx work,
> but if the lore2sphinx buildbot were to die tomorrow and go offline, I
> wouldn't be particularly anxious to spend a lot of resources to fix it.
>
> My position on this was always that if someone wanted to improve the
> documentation, they were welcome to do so, and if they wanted to use Sphinx
> to do it, that's great too.  I just wasn't willing to tolerate any period
> where our toolchain was broken and we couldn't generate documentation for a
> release.  And a good thing we didn't, by the way!  If we had said "go
> ahead, pull the trigger, whatever, it's OK to break trunk for a little
> while!" we wouldn't have had any documentation toolchain for the last 2
> years.
>
>
And since we didn't break the toolchain, I've been in no particular hurry.
 I've accepted that this will take approximately a billion years.  So no
rush.

On the other hand, I have at several points been willing to make the
"cutover", and for various different reasons, been told it wasn't happening
until things were closer to "perfect" (for some value of "perfect") than
they were at the time.

The current output of the old lore2sphinx branch is functional, though has
a few warts (mostly extraneous spaces in the output).  These warts were
apparently enough to block adoption.

It has been a pretty discouraging effort at times, I have to say, as I seem
to garner agreement/support/buy-in/whatever for a particular course of
action (e.g. getting 99% of the way there, and then fixing Sphinx markup
manually, which was the original plan, way back when), and focusing my
efforts in that direction.  Then when we're ready to proceed on that basis,
had another task/challenge/set of requirements/whatever added to the work
that needs to be done.  In fact I still think that if the Twisted community
had actually wanted to, we could have switched over to Sphinx at the first
PyCon Atlanta (2010?).

Anyway, I'm not giving up.  If nothing else, I'll end up with a nice
restructuredText-generating library.  And if Twisted never ends up adopting
Sphinx as a doc tool, eventually I'll still be able to read the Twisted
docs in a format that I can navigate and doesn't hurt my eyes to look at. :)

But I'd really rather see Twisted adopt Sphinx, and get rid of Lore.

Help accepted.

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130301/01391c1b/attachment.html>

From kevin.horn at gmail.com  Fri Mar  1 10:46:22 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 1 Mar 2013 11:46:22 -0600
Subject: [Twisted-Python] Let's talk about maintaining Lore (and
 validity of tickets)
In-Reply-To: <CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
Message-ID: <CA+U=zK2Fy-ZHGa0MKMkCBYywEueKt40ge80-dCUVQ2qDkd9fFg@mail.gmail.com>

On Fri, Mar 1, 2013 at 11:44 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

Arg.  Why do you always notice the errors _right_ after you send the mail?


> Some what orthagonal to your point, but this is incorrect.  lore2sphinx
> was SPLIT some time ago into "lore2sphinx-ng" and "rstgen".
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130301/a976f866/attachment.html>

From glyph at twistedmatrix.com  Fri Mar  1 11:51:40 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 1 Mar 2013 10:51:40 -0800
Subject: [Twisted-Python] Need help regarding Gsoc 2013
In-Reply-To: <CANj+b3Mr5zedWRbuJSJf8Nr1sgke=2biuTV80bsbkoTRnK=kLw@mail.gmail.com>
References: <CANj+b3Mr5zedWRbuJSJf8Nr1sgke=2biuTV80bsbkoTRnK=kLw@mail.gmail.com>
Message-ID: <EEFCAC21-DBF0-4E52-AAF7-7F557CEF23F0@twistedmatrix.com>


On Mar 1, 2013, at 7:04 AM, Saurabh Mahindre <saurabh.mahindre at gmail.com> wrote:

> Yes, I would like to be involved in next gsoc.

OK.  I don't think we have any plans for that yet.  Perhaps we should start making them.

> Twisted interests me as whole and how it eases networking whenever I worked with it.

Always nice to hear :).

> Integration with GUI loops was also very great.Having seen Twisted in action , how it works at lower level will be great thing to know more about.

Really glad to hear you're interested in this.  It's a highly useful dimension of Twisted's functionality which is not as popular as it should be.

If you're interested in both of these, we used to have a reactor implementation that would display some of the inner workings of the reactor itself in a GUI.  This only ever worked, poorly, on one platform (GTK), and I believe it's probably pretty badly broken right now.  Would you be interested in implementing this with multiple toolkits (GTK, whatever the best thing is for Windows, and Cocoa, perhaps)?

Just a thought - the first project that popped into my head.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130301/dcbf1e8b/attachment.html>

From beenje at gmail.com  Fri Mar  1 14:52:56 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Fri, 1 Mar 2013 22:52:56 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
Message-ID: <950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>

Thanks for the answer!

I was hoping to avoid having to put something like AMP in place, because it looked a bit overkill for my case.
I think I actually found a way :-)

I guess I can use the same factory to start all my servers. 
So I start my sniffer (in a thread) in my ServerFactory and I keep a dictionary of deferred for each line (corresponds to an emitter and a server port).
It allows me to call the messageToSend method corresponding to the proper server when receiving data.

Here is a code extract of what I implemented:

class Oldimon(Protocol):

    def __init__(self, factory):
        self.factory = factory
        self.line = None

    def connectionMade(self):
        # Check the server port to get the line
        # associated to this protocol
        port = self.transport.getHost().port
        self.line = LINES_PORT[port]
        # Add the callback for this line
        self.factory.deferred[self.line] = defer.Deferred()
        self.factory.deferred[self.line].addCallback(self.messageToSend)


class OldimonFactory(ServerFactory):

    def __init__(self, device, pcap_filter):
        # pcapDataReceived callback is called everytime a message
        # is received
        reactor.callInThread(run_pcap, device, pcap_filter, self.pcapDataReceived)
        # Dict with a deferred for each line
        self.deferred = dict(zip(LINES_PORT.values(), [None] * len(LINES_PORT)))

    def buildProtocol(self, addr):
        return Oldimon(self)

    def pcapDataReceived(self, data, line):
        if self.deferred[line] is not None:
            # Fire the callback for line
            d, self.deferred[line] = self.deferred[line], None
            d.callback(data)

oldimon_factory = OldimonFactory(device, pcap_filter)
for port in LINES_PORT.keys():
    reactor.listenTCP(port, oldimon_factory)
reactor.run()


Le 1 mars 2013 à 15:31, Laurens Van Houtven <_ at lvh.cc> a écrit :

> Well, you'd presumably have a connection to each of the servers in the form of a client factory and a protocol instance. Then, every time you get a message, you figure out which protocol instance you want (the one for the appropriate server) and send a message to it. You could do that with self.transport.write, of course, but it would be much easier to just use a ready-made RPC thing.
> 
> One such RPC thing is AMP, which comes with Twisted. You can read more about it here:
> 
> http://amp-protocol.net/
> https://twistedmatrix.com/documents/current/core/howto/amp.html
> 
> You will probably end up having a command like HandlePacket or something (presumably you can come up with a more apt domain-specific name), and something close to self.servers[serverFor(packet.origin)].callRemote(HandlePacket, packet.data), or whatever.
> 
> I realize this is still pretty vague and high level, so feel free to ask more questions about the parts that are unclear :)
> 
> 
> On Thu, Feb 28, 2013 at 10:59 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:
> Hi,
> 
> I have to replace a piece of software that sniffs the traffic on one interface. It gets different messages that are each associated to a specific emitter.
> On the same machine, one server is started for each emitter (on a different port).
> And the application is just supposed to use the proper server to send the messages captured (to a client on another machine).
> 
> Not sure if it's clear, but basically if I have 2 emitters A and B, I'll start 2 servers (a and b).
> My sniffer will get messages A1, A2, B1, B2, B3...
> I have to pass messages A1, A2 to server a, that will just send them to the client (if it is connected of course).
> And B1, B2, B3 to server b.
> I don't need any buffering. If no client is connected, messages captured are just discarded.
> 
> To sniff the network, I want to use pylibpcap or pcapy.
> I found this example to make it work with twisted: http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
> 
> Starting several servers that use the same protocol is not a problem.
> But how do I pass the messages captured to the right server?
> How do I make the link between the function sniffing the network and the servers?
> 
> Thanks
> 
> Benjamin
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> -- 
> cheers
> lvh
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130301/2a0256ea/attachment.html>

From glyph at twistedmatrix.com  Fri Mar  1 15:15:35 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 1 Mar 2013 14:15:35 -0800
Subject: [Twisted-Python] Lore, Sphinx,
	and getting to the finish line (was: re: lore and tickets and other
	stuff)
In-Reply-To: <CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
Message-ID: <4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>


On Mar 1, 2013, at 9:44 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> On Fri, Mar 1, 2013 at 2:29 AM, Glyph <glyph at twistedmatrix.com> wrote:
> Jean-Paul recently closed a Lore ticket as invalid, and suggested we have a discussion about Lore's future direction.  This strikes me as a very good idea, and so I wrote a message which is a bit too long (for which I apologize) to kick that off.
> 
> I don't think these two paths (lore2sphinx and continuing to maintain lore) are necessarily mutually exclusive.  Also I think it implies something about the current state of affairs that isn't accurate - e.g. that the Twisted team has agreed that Sphinx will surely replace Lore and that we are making progress on that process of placement more than we are maintaining Lore itself.
> 
> Unfortunately, I think it will be clear to anyone following its progress that lore2sphinx is unmaintained and the sphinx migration effort is stalled.  Nobody has committed to <https://bitbucket.org/khorn/lore2sphinx> in a year and a half, about the same amount of time that <http://twistedmatrix.com/trac/browser/branches/sphinx-conversion-4500> has been idle as well.  By contrast, <http://twistedmatrix.com/trac/browser/trunk/twisted/lore> has seen commits - albeit not many - within only a couple of weeks.  So, empirically, we're already maintaining lore and lore2sphinx is currently "obsolete"; really the question should be if we want to reverse that path.
> 
> 
> Some what orthagonal to your point, but this is incorrect.  lore2sphinx was split some time ago into "lore2sphinx-ng" and "rstgen".

Hi Kevin!  Long time no see!  (Too long, obviously!)

> https://bitbucket.org/khorn/lore2sphinx-ng
> https://bitbucket.org/khorn/rstgen
> 
> This was initially done as an experiment in using a more explicit "formatting model" for the generation for the Sphinx docs (and somewhat due to _your_ prodding, Glyph), and so I didn't initially make a big announcement or anything.

I do remember this.  The previous output of lore2sphinx really was unreliable enough that it was creating a never-ending treadmill of irrelevant / unpredictable Lore source fixes that were really dragging the whole process out.  Thanks for working on improving it.

> Once it became apparent that it was actually going to work out better, I sent out some emails to those who had expressed interest in helping with the whole lore2sphinx project, though I don't believe I sent out anything to the twisted list in general, as I probably should have.  I'll point out that I can count people who have shown interest in moving this forward on one hand, though.

More discussion on this list would be almost always be better.  We are a *long* way from too much traffic here.  (And, this update is honestly a surprise to me.)

> And I've specifically mentioned that I had done said forking to you, Glyph, in IRC  ;)
> (though it's IRC after all...who remembers what happens in IRC?)

Based on this exchange, my understanding was simply that you had started to try to improve lore2sphinx, but then wandered off again.

> I thought I had put a notice up in the readme file in the lore2sphinx repo, but as it isn't there, I presume I either forgot, or never got it merged, or something.
> 
> So, totally my bad for not communicating better, but I have NOT given up on converting things from Lore into Sphinx.
> (Nor do I intend to.)

OK.  Let's move things along then.  Several people showed up on IRC yesterday and voiced an interest in helping out, although what to do next - especially what to do next for a new contributor who does *not* want to try to reverse-engineer the conversion itself - needs to be made much, much clearer.

> Thinking about it, I suppose I've been somewhat reticent to do much communicating about any work I do on this, as what seems to happen is that it just gives everyone an excuse bring up some new objection to actually getting the conversion done.  I hadn't really realized this consciously until just now, though.

Communicate constantly.  The biggest objection that _I_ have to getting the conversion done at this point is that the people working on it (well, okay: you) are uncommunicative, unreliable and frequently unavailable. ;-)  If you were just keeping us all up to date - even just to complain! - I'd be much more sanguine about the whole thing.  And apparently some of your misconceptions would have been corrected a lot earlier.

> I also have no objection if someone wants to complete the lore2sphinx work, but if the lore2sphinx buildbot were to die tomorrow and go offline, I wouldn't be particularly anxious to spend a lot of resources to fix it.
> 
> My position on this was always that if someone wanted to improve the documentation, they were welcome to do so, and if they wanted to use Sphinx to do it, that's great too.  I just wasn't willing to tolerate any period where our toolchain was broken and we couldn't generate documentation for a release.  And a good thing we didn't, by the way!  If we had said "go ahead, pull the trigger, whatever, it's OK to break trunk for a little while!" we wouldn't have had any documentation toolchain for the last 2 years.
> 
> 
> And since we didn't break the toolchain, I've been in no particular hurry.  I've accepted that this will take approximately a billion years.  So no rush.

It does not have to take a billion years.  The criteria ought to be clear - and if they aren't, you should have asked for clarification :).

> On the other hand, I have at several points been willing to make the "cutover", and for various different reasons, been told it wasn't happening until things were closer to "perfect" (for some value of "perfect") than they were at the time.

Let's be specific: <http://twistedmatrix.com/trac/ticket/5312> is in need of some final code-review.  Despite several reviews and an apparently extensive final response pass, it's not currently in review, which means it's still in your court for some reason.  There is no reason to hold back on this and try to do *everything* in one big bang: this code just needs to be production-quality and land on trunk _before_ the ReST sources themselves are ready to go.

Probably something needs to happen to the buildbot build steps, too, since there's this nastiness that did an end-run around our development process to get checked in to the buildbot config without tests instead of into twisted with tests, <http://buildbot.twistedmatrix.com/builders/documentation/builds/2994/steps/process-docs/logs/stdio>, and that needs to be replaced with a command that's just like "build the docs, whether they be lore or sphinx or docbook or whatever".  But, Tom's got your back here; if you can get this done during his fellowship (see today's post, <http://labs.twistedmatrix.com/2013/03/welcome-our-new-twisted-fellow-tom.html>) I estimate you will see a completed reconfiguration within hours.

Once that's done, then it's a matter of putting <http://tm.tl/4500> into code-review with the output of the lore2sphinx builder.  That review can be somewhat expedited, and can be done in parallel by lots of people since there are no unit tests to be worried about, and formatting fixes can be done quickly by multiple people, we don't need a big formal code review.

> The current output of the old lore2sphinx branch is functional, though has a few warts (mostly extraneous spaces in the output).  These warts were apparently enough to block adoption.

Let's not under-state the problem: thanks to the jaw-droppingly weird arbitrariness of the ReST format, "extraneous spaces" can mean "arbitrarily mangled output".  But no, even these "warts" were not enough to block adoption.  What blocked adoption is that the painstakingly hand-tweaked lore sources that did not have any more "warts" were left to languish (and bit-rot, and now probably require more manual fixing) while we waited for 2 years for someone to actually finish the sphinx development and release management tools and get them finalized.  As I recall we basically finished fixing them all up, at the time.

There were three reasons that I personally kept pressing for a more thorough lore -> sphinx converter.  One is not necessarily necessary.

First, and most importantly, is the bit-rot problem: people are working on lore docs in parallel with this effort.  And, despite this exchange, I want to be clear that they should keep doing so: nobody should stop working on docs in the meanwhile, since we have no way to tell how much longer this will take.  Looking at the modified docs on the sphinx buildbot is challenging, and keeping track of random whitespace jiggling is not documented on <http://twistedmatrix.com/trac/wiki/ReviewProcess#Reviewers:Howtoreviewachange>.  *I* can't even remember how to do the math to associate one of the results in <http://buildbot.twistedmatrix.com/builds/sphinx-html/>.  And now that there have been so many changes (as I predicted there might be) we have to figure out what's changed, and re-review to make sure that everything (or at least a big enough majority of everything) is OK to go to trunk.  If the tool itself could be verified to produce correct output for all the cases we've encountered where it falls over, we wouldn't have to do this manual verification step; we could just trust that it was right, because it has tests that indicate it's correct.  Of course it's possible there might be *some* corner-case it still doesn't handle and that we didn't find, but if the tool is known to be broken in a large number of cases that we just have to magically know to avoid, then it's likely people will keep unknowingly re-introducing those problems.

Second, there are going to be some doc patches in-progress whenever the cutover happens.  Now, this is a bit less of a concern, because we can just manually translate one or two paragraphs to the new markup if necessary.  But it would still be nice to have a tool that does the job well enough that someone could grab the buildbot output for an in-progress doc fix and keep working on it without having to learn how to re-express everything in Sphinx first.

Third, the output is just hella grody right now.  Have a look here, for example: <http://buildbot.twistedmatrix.com/builds/sphinx-html/989-37334/_sources/projects/web/howto/twisted-templates.txt>.  *Tons* of peculiarly and unnecessary vertical whitespace, and very ragged right edges where the word wrap doesn't seem to respect line lengths.  This means that every change that hits these documents is going to produce a lot of unnecessary delta when authors try to clean up some of this mess to make it nicer to edit.

Spot-checking some of the output now, it seems like the tool must have been upgraded, or we've been lucky, since I can't spot any obvious bit-rot (and I could swear the docs look a lot less grody; the problems I mentioned there).  So maybe you've already addressed these problems, or they're not actually that serious any more.  But, as I said in the first point, spot-checking isn't enough.

> It has been a pretty discouraging effort at times, I have to say, as I seem to garner agreement/support/buy-in/whatever for a particular course of action (e.g. getting 99% of the way there, and then fixing Sphinx markup manually, which was the original plan, way back when), and focusing my efforts in that direction.  Then when we're ready to proceed on that basis, had another task/challenge/set of requirements/whatever added to the work that needs to be done.  In fact I still think that if the Twisted community had actually wanted to, we could have switched over to Sphinx at the first PyCon Atlanta (2010?).

By 'actually wanted to' you mean 'be willing to abandon the development process for this one thing'.

We do not abandon the development process.  Every past attempt at doing so to facilitate some feature has been a road to ruin.  Although this process has been frustrating for you, I am still happier with the current outcome (Twisted has perfectly functional documentation in our downloads and on our website) than with the alternative (create a situation where we could not produce a release for two years because the tools were languishing unfinished while we waited for you to say something about it).

I'm sorry that this has been a frustrating process for you.  And I'm not just saying that to be polite: I genuinely *am* sorry that our communication has not been clear, and that we have had wasted effort all around because of that.  But I am fairly sure that we have had basically the same requirements for this process from day one.  Let me state them here:

We need to have release-automation tools that allow developers to produce a release, including documentation.  These tools need to be subjected to the same development process as the rest of those tools, which is to say the same process as for the rest of Twisted.
The documentation itself needs to be able to be generated from any version of trunk.  While one or two formatting snafus are acceptable to be fixed after the fact, the documentation needs to be in a comprehensible state in every revision of trunk, which means that in order to land on trunk, the ReST output.

Really, most of the work has been done here already.  The docs appear to be in a mostly-workable state.  lore2sphinx looks like maybe it's doing a good enough job, maybe better than the last time I looked at it.  The _major_ hang-up is getting the release management tools over their final hump and just driving the trac tickets to completion.  With Tom keeping the review queue basically empty right now, this is an excellent opportunity to get that done.

It may make sense to schedule an event where we all show up on IRC, everyone claims a documentation component, and we all do a final review pass to make sure that the formatting problems aren't too bad before going to trunk with the cut-over.  This pre-supposes that the release/building tools are done and on trunk though.

> Anyway, I'm not giving up.  If nothing else, I'll end up with a nice restructuredText-generating library.  And if Twisted never ends up adopting Sphinx as a doc tool, eventually I'll still be able to read the Twisted docs in a format that I can navigate and doesn't hurt my eyes to look at. :)
> 
> But I'd really rather see Twisted adopt Sphinx, and get rid of Lore.
> 
> Help accepted.

All right!  I hope this exchange has gotten some people fired up to cross the finish line.  It's surprisingly close!  Thanks for updating us, Kevin - better late than never :).

-glyph

P.S.: apologies for any errors.  I didn't even really have the time to write this email, let alone copy-edit it.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130301/56cad951/attachment.html>

From glyph at twistedmatrix.com  Fri Mar  1 15:27:11 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 1 Mar 2013 14:27:11 -0800
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
Message-ID: <FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>


On Mar 1, 2013, at 1:52 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:

> I was hoping to avoid having to put something like AMP in place, because it looked a bit overkill for my case.
> I think I actually found a way :-)


In what way is it "overkill"?  The dictionary says that <http://dictionary.reference.com/browse/overkill> is "an excess of what is required or suitable, as because of zeal or misjudgment".  What is AMP too much of?  Memory?  CPU?  Bandwidth?  API complexity?  Code size?  As compared to what?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130301/53e276df/attachment.html>

From exarkun at twistedmatrix.com  Fri Mar  1 20:34:54 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 02 Mar 2013 03:34:54 -0000
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
Message-ID: <20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>

On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
>Thanks for the answer!
>
>I was hoping to avoid having to put something like AMP in place, 
>because it looked a bit overkill for my case.
>I think I actually found a way :-)

Unfortunately, it looks like the code that you shared will only work 
accidentally (if at all).  You cannot use Twisted APIs except in the 
reactor thread.  You will at least need to add in some code to send data 
back to the reactor thread before you use Twisted APIs (such as 
`Deferred.callback`).

Jean-Paul



From kevin.horn at gmail.com  Fri Mar  1 22:35:53 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 1 Mar 2013 23:35:53 -0600
Subject: [Twisted-Python] Lore, Sphinx,
 and getting to the finish line (was: re: lore and tickets and other
 stuff)
In-Reply-To: <4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
	<4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
Message-ID: <CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>

On Fri, Mar 1, 2013 at 4:15 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 1, 2013, at 9:44 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> On Fri, Mar 1, 2013 at 2:29 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
>> Jean-Paul recently closed a Lore ticket as invalid, and suggested we have
>> a discussion about Lore's future direction.  This strikes me as a very good
>> idea, and so I wrote a message which is a bit too long (for which I
>> apologize) to kick that off.
>>
>> I don't think these two paths (lore2sphinx and continuing to maintain
>> lore) are necessarily mutually exclusive.  Also I think it implies
>> something about the current state of affairs that isn't accurate - e.g.
>> that the Twisted team has agreed that Sphinx will surely replace Lore and
>> that we are making progress on that process of placement more than we are
>> maintaining Lore itself.
>>
>> Unfortunately, I think it will be clear to anyone following its progress
>> that lore2sphinx is unmaintained and the sphinx migration effort is
>> stalled.  Nobody has committed to <
>> https://bitbucket.org/khorn/lore2sphinx> in a year and a half, about the
>> same amount of time that <
>> http://twistedmatrix.com/trac/browser/branches/sphinx-conversion-4500>
>> has been idle as well.  By contrast, <
>> http://twistedmatrix.com/trac/browser/trunk/twisted/lore> has seen
>> commits - albeit not many - within only a couple of weeks.  So,
>> empirically, we're already maintaining lore and lore2sphinx is currently
>> "obsolete"; really the question should be if we want to reverse that path.
>>
>>
> Some what orthagonal to your point, but this is incorrect.  lore2sphinx
> was split some time ago into "lore2sphinx-ng" and "rstgen".
>
>
> Hi Kevin!  Long time no see!  (Too long, obviously!)
>
> https://bitbucket.org/khorn/lore2sphinx-ng
> https://bitbucket.org/khorn/rstgen
>
> This was initially done as an experiment in using a more explicit
> "formatting model" for the generation for the Sphinx docs (and somewhat due
> to _your_ prodding, Glyph), and so I didn't initially make a big
> announcement or anything.
>
>
> I do remember this.  The previous output of lore2sphinx really was
> unreliable enough that it was creating a never-ending treadmill of
> irrelevant / unpredictable Lore source fixes that were really dragging the
> whole process out.  Thanks for working on improving it.
>
>
That "never-ending" series of Lore source fixes took place over the course
of a couple of weeks.  Doing things that way was not my idea, though it
seemed reasonable at the time because  the idea was that we would do the
cutover at the end of it.


> Once it became apparent that it was actually going to work out better, I
> sent out some emails to those who had expressed interest in helping with
> the whole lore2sphinx project, though I don't believe I sent out anything
> to the twisted list in general, as I probably should have.  I'll point out
> that I can count people who have shown interest in moving this forward on
> one hand, though.
>
>
> More discussion on this list would be almost always be better.  We are a
> *long* way from too much traffic here.  (And, this update is honestly a
> surprise to me.)
>
> And I've specifically mentioned that I had done said forking to you,
> Glyph, in IRC  ;)
> (though it's IRC after all...who remembers what happens in IRC?)
>
>
> Based on this exchange, my understanding was simply that you had started
> to try to improve lore2sphinx, but then wandered off again.
>
>
I never "wandered off".  Been here the whole time.  I've been in #twisted
almost continually for about the last 3 years, and in #twisted-dev for
about a year (I didn't relaize it existed before that). I just got tired of
(my perception) talking to myself about doing the conversion.  So I was
being quiet.  Granted, I shouldn't have been, and that's on me.  but it's
not like I'm hard to get a hold of.

> I thought I had put a notice up in the readme file in the lore2sphinx
> repo, but as it isn't there, I presume I either forgot, or never got it
> merged, or something.
>
> So, totally my bad for not communicating better, but I have NOT given up
> on converting things from Lore into Sphinx.
> (Nor do I intend to.)
>
>
> OK.  Let's move things along then.
>

Yes lets.


> Several people showed up on IRC yesterday and voiced an interest in
> helping out, although what to do next - especially what to do next for a
> new contributor who does *not* want to try to reverse-engineer the
> conversion itself - needs to be made much, much clearer.
>
>
The last day or two have probably not been the best to try and get my
attention, especially yesterday, as I essentially worked a 14 hr day trying
to meet a deadline. But I see the conversation on IRC.  I'll note that
noone seems to have considered asking me anything about it.  Looks like it
was about 4am, though, so perhaps that wouldn't have done much good, as I
was asleep. :)

But hey...I have email!  Ask me!  I'll talk your ear off about it!

(As an aside, lore2sphinx is in no way a "broken pile of regexes".  Not to
say that it isn't broken in some really significant ways, because it is,
but it doesn't use regexes at all.  Just sayin'.)

> Thinking about it, I suppose I've been somewhat reticent to do much
> communicating about any work I do on this, as what seems to happen is that
> it just gives everyone an excuse bring up some new objection to actually
> getting the conversion done.  I hadn't really realized
> this consciously until just now, though.
>
>
> Communicate constantly.  The biggest objection that _I_ have to getting
> the conversion done at this point is that the people working on it (well,
> okay: you) are uncommunicative, unreliable and frequently unavailable. ;-)
>  If you were just keeping us all up to date - even just to complain! - I'd
> be much more sanguine about the whole thing.  And apparently some of your
> misconceptions would have been corrected a lot earlier.
>
>
I got tired of complaining.  And arguing.

> I also have no objection if someone wants to complete the lore2sphinx
>> work, but if the lore2sphinx buildbot were to die tomorrow and go offline,
>> I wouldn't be particularly anxious to spend a lot of resources to fix it.
>>
>> My position on this was always that if someone wanted to improve the
>> documentation, they were welcome to do so, and if they wanted to use Sphinx
>> to do it, that's great too.  I just wasn't willing to tolerate any period
>> where our toolchain was broken and we couldn't generate documentation for a
>> release.  And a good thing we didn't, by the way!  If we had said "go
>> ahead, pull the trigger, whatever, it's OK to break trunk for a little
>> while!" we wouldn't have had any documentation toolchain for the last 2
>> years.
>>
>>
> And since we didn't break the toolchain, I've been in no particular hurry.
>  I've accepted that this will take approximately a billion years.  So no
> rush.
>
>
> It does not have to take a billion years.  The criteria ought to be clear
> - and if they aren't, you should have asked for clarification :).
>
>
I have asked for clarification more times than I can count about more
aspects of this than I can possibly keep track of.

> On the other hand, I have at several points been willing to make the
> "cutover", and for various different reasons, been told it wasn't happening
> until things were closer to "perfect" (for some value of "perfect") than
> they were at the time.
>
>
> Let's be specific: <http://twistedmatrix.com/trac/ticket/5312> is in need
> of some final code-review.  Despite several reviews and an apparently
> extensive final response pass, it's not currently in review, which means
> it's still in your court for some reason.  There is no reason to hold back
> on this and try to do *everything* in one big bang: this code just needs to
> be production-quality and land on trunk _before_ the ReST sources
> themselves are ready to go.
>
>
Despite numerous attempts to prod someone into responding to my requests
for clarification ;) on the ticket, I never got any response.
 Specifically, I could never get an answer on whether the sphinx build tool
should require whomever was running it to specify a version or whether the
tool should guess.  The existing tools (at the time, I haven't looked at
the current state of these) do/did both, in different places.

And I admit, my impetus for immediacy kind of crashed when I had spent
several weeks (I thought) getting everything ready to switch over the docs
(in 4500) and then being told "oh we have some release stuff, we need to
have a tool for that too".  My impression prior to this was that
sphinx-build would be used to build the sphinx docs, which turned out to be
erroneous.  I didn't even know that those tools (twisted.python._release)
even existed prior to that point.

Anyway, after a while it looked like fixing the lore sources would have to
be done all over again, so I started looking into whether the conversion
process itself could be improved, so that we didn't have to keep doing that.

Also, please elaborate on what you mean  by "do *everything* in one big
bang.  My intention was never to do anything but get the SphinxBuilder
working on that branch.  Was there something else you thought I was doing?
 Was there something else I should (or should not) have been doing?


> Probably something needs to happen to the buildbot build steps, too, since
> there's this nastiness that did an end-run around our development process
> to get checked in to the buildbot config without tests instead of into
> twisted with tests, <
> http://buildbot.twistedmatrix.com/builders/documentation/builds/2994/steps/process-docs/logs/stdio>,
> and that needs to be replaced with a command that's just like "build the
> docs, whether they be lore or sphinx or docbook or whatever".  But, Tom's
> got your back here; if you can get this done during his fellowship (see
> today's post, <
> http://labs.twistedmatrix.com/2013/03/welcome-our-new-twisted-fellow-tom.html>)
> I estimate you will see a completed reconfiguration within hours.
>

I have no idea about how the buildbots are configured.  But the linked
buildbot log looks like part of the official release process.
http://twistedmatrix.com/trac/wiki/ReleaseProcess#Buildhowtodocumentsforwebsite


> Once that's done, then it's a matter of putting <http://tm.tl/4500> into
> code-review with the output of the lore2sphinx builder.  That review can be
> somewhat expedited, and can be done in parallel by lots of people since
> there are no unit tests to be worried about, and formatting fixes can be
> done quickly by multiple people, we don't need a big formal code review.
>
> The current output of the old lore2sphinx branch is functional, though has
> a few warts (mostly extraneous spaces in the output).  These warts were
> apparently enough to block adoption.
>
>
> Let's not under-state the problem: thanks to the jaw-droppingly weird
> arbitrariness of the ReST format, "extraneous spaces" can mean "arbitrarily
> mangled output".  But no, even these "warts" were not enough to block
> adoption.  What blocked adoption is that the painstakingly hand-tweaked
> lore sources that did *not *have any more "warts" were left to languish
> (and bit-rot, and now probably require more manual fixing) while we waited
> for 2 years for someone to actually finish the sphinx development and
> release management tools and get them finalized.  As I recall we basically
> finished fixing them all up, at the time.
>

They got left alone because of the release tools hangup.  Ideally the
release tools would have been done before the whole lore-source-tweaking
process, but they weren't.  I'll admit my frustration played a part in
this, but so did the deafening silence I got when I asked for anyone to
comment on the ticket.


> There were three reasons that I personally kept pressing for a more
> thorough lore -> sphinx converter.  One is not necessarily necessary.
>
> First, and most importantly, is the bit-rot problem: people are working on
> lore docs in parallel with this effort.  And, despite this exchange, I want
> to be clear that they should keep doing so: nobody should stop working on
> docs in the meanwhile, since we have no way to tell how much longer this
> will take.  Looking at the modified docs on the sphinx buildbot is
> challenging, and keeping track of random whitespace jiggling is not
> documented on <
> http://twistedmatrix.com/trac/wiki/ReviewProcess#Reviewers:Howtoreviewachange>.
>  *I* can't even remember how to do the math to associate one of the results
> in <http://buildbot.twistedmatrix.com/builds/sphinx-html/>.  And now that
> there have been so many changes (as I predicted there might be) we have to
> figure out what's changed, and re-review to make sure that everything (or
> at least a big enough majority of everything) is OK to go to trunk.  If the
> tool itself could be verified to produce correct output for all the cases
> we've encountered where it falls over, we wouldn't have to do this manual
> verification step; we could just trust that it was right, because it has
> tests that indicate it's correct.  Of course it's possible there might be
> *some* corner-case it still doesn't handle and that we didn't find, but if
> the tool is known to be broken in a large number of cases that we just have
> to magically know to avoid, then it's likely people will keep unknowingly
> re-introducing those problems.
>

More on this below.


> Second, there are going to be some doc patches in-progress whenever the
> cutover happens.  Now, this is a bit less of a concern, because we can just
> manually translate one or two paragraphs to the new markup if necessary.
>  But it would still be nice to have a tool that does the job well enough
> that someone could grab the buildbot output for an in-progress doc fix and
> keep working on it without having to learn how to re-express everything in
> Sphinx first.
>

This is why I think (at this point) we need to build Sphinx docs for every
branch as part of the buildbot process.  More below.


> Third, the output is just hella grody right now.  Have a look here, for
> example: <
> http://buildbot.twistedmatrix.com/builds/sphinx-html/989-37334/_sources/projects/web/howto/twisted-templates.txt>.
>  *Tons* of peculiarly and unnecessary vertical whitespace, and very ragged
> right edges where the word wrap doesn't seem to respect line lengths.  This
> means that every change that hits these documents is going to produce a lot
> of unnecessary delta when authors try to clean up some of this mess to make
> it nicer to edit.
>

Yep, its' ugly.  Lore2sphinx-ng does a better job, but isn't finished.
 More below.


> Spot-checking some of the output now, it seems like the tool must have
> been upgraded, or we've been lucky, since I can't spot any obvious bit-rot
> (and I could swear the docs look a lot less grody; the problems I mentioned
> there).  So maybe you've already addressed these problems, or they're not
> actually that serious any more.  But, as I said in the first point,
> spot-checking isn't enough.
>
> It has been a pretty discouraging effort at times, I have to say, as I
> seem to garner agreement/support/buy-in/whatever for a particular course of
> action (e.g. getting 99% of the way there, and then fixing Sphinx markup
> manually, which was the original plan, way back when), and focusing my
> efforts in that direction.  Then when we're ready to proceed on that basis,
> had another task/challenge/set of requirements/whatever added to the work
> that needs to be done.  In fact I still think that if the Twisted community
> had actually wanted to, we could have switched over to Sphinx at the first
> PyCon Atlanta (2010?).
>
>
> By 'actually wanted to' you mean 'be willing to abandon the development
> process for this one thing'.
>
> We do not abandon the development process.  Every past attempt at doing so
> to facilitate some feature has been a road to ruin.  Although this process
> has been frustrating for you, I am still happier with the current outcome
> (Twisted has perfectly functional documentation in our downloads and on our
> website) than with the alternative (create a situation where we could not
> produce a release for two years because the tools were languishing
> unfinished while we waited for you to say something about it).
>
>
You keep saying that I wanted to "abandon the development process", and I'm
not sure what you mean by that.  My perception has been that I would say
"what do we need to do to make this happen"?  There would be some hemming
and hawing (and at least several times long discussions about how
documentation didn't really fit the regular UQDS process) and a sort of
plan would be invented.  I would proceed according to the plan as I
understood it.  I would then say "OK, we're ready"!  And then be told that
some other thing not in the plan needed to be done.  The cycle would then
repeat.



> I'm sorry that this has been a frustrating process for you.  And I'm not
> just saying that to be polite: I genuinely *am* sorry that our
> communication has not been clear, and that we have had wasted effort all
> around because of that.  But I am fairly sure that we have had basically
> the same requirements for this process from day one.  Let me state them
> here:
>
>
>    1. We need to have release-automation tools that allow developers to
>    produce a release, including documentation.  These tools need to be
>    subjected to the same development process as the rest of those tools, which
>    is to say the same process as for the rest of Twisted.
>
> No this was not brought up until well into the process. I (sort of)
understand the desire for this, but it seems pretty weird to be building
what is essentially a wrapper for an existing tool, along with tests for
said wrapper,


>
>    1. The documentation itself needs to be able to be generated from any
>    version of trunk.  While one or two formatting snafus are acceptable to be
>    fixed after the fact, the documentation needs to be in a comprehensible
>    state in every revision of trunk, which means that in order to land on
>    trunk, the ReST output.
>
> So...you didn't finish that sentence.  I realize you apologized for errors
at the end of your mail, but I have a feeling you were going to say
something rather important there...

:)

I'll talk more about this below (I think...depending on what you actually
mean tot say here).


> Really, most of the work has been done here already.  The docs appear to
> be in a mostly-workable state.  lore2sphinx looks like maybe it's doing a
> good enough job, maybe better than the last time I looked at it.  The
> _major_ hang-up is getting the release management tools over their final
> hump and just driving the trac tickets to completion.  With Tom keeping the
> review queue basically empty right now, this is an excellent opportunity to
> get that done.
>
> It may make sense to schedule an event where we all show up on IRC,
> everyone claims a documentation component, and we all do a final review
> pass to make sure that the formatting problems aren't too bad before going
> to trunk with the cut-over.  This pre-supposes that the release/building
> tools are done and on trunk though.
>
> Anyway, I'm not giving up.  If nothing else, I'll end up with a nice
> restructuredText-generating library.  And if Twisted never ends up adopting
> Sphinx as a doc tool, eventually I'll still be able to read the Twisted
> docs in a format that I can navigate and doesn't hurt my eyes to look at. :)
>
> But I'd really rather see Twisted adopt Sphinx, and get rid of Lore.
>
> Help accepted.
>
>
> All right!  I hope this exchange has gotten some people fired up to cross
> the finish line.  It's surprisingly close!  Thanks for updating us, Kevin -
> better late than never :).
>
>
Experience shows that it's unlikely to be surprisingly close.  I like your
optimism though.


> -glyph
>
> P.S.: apologies for any errors.  I didn't even really have the time to
> write this email, let alone copy-edit it.
>
>
Now that I've replied to all of that, let me give you a rundown of what
I've been thinking and planning, so that you have an idea of where I'm
coming from.

Here are the various things that I have perceived to be necessary/required
in order to get the conversion to happen:

a) The conversion process needs to be able to be run concurrently with Lore
for an extended period of time.  In other words, Lore would be the
"official" version of the docs, and the Sphinx docs would be built in some
form of automated fashion until everyone was happy with them and/or ready
to deprecate/abandon Lore.
b) Because of a), there needs to be tooling to run lore2sphinx (or
whatever) on a regular basis.  (This was sort of being done via the
Sphinx-building buildbot, but in a very ad-hockery sort of way, which was
brittle, broke a couple of times, and needed to be improved.)
c) There needs to be release management tooling to build the Sphinx docs
from ReST into whatever formats we want to publish (HTML and PDF to start,
maybe others later on)
d) Convert the Lore sources to better ReST documents without all the
problems that the current lore2sphinx output has.  I at one time thought
this was pretty impractical.  My first attempt at a conversion tool tried
to use an intermediate object model, but I ran into trouble when trying to
combine the various objects.  So I abandoned the effort and created what
became lore2sphinx, which basically just combined a bunch of strings.  I
then figured out a way of making the intermediate object thing work, and
that was lore2sphinx-ng.  Then it became convenient to split out the
intermediate object model from the documetn processing code, so I put all
of that into a library and that became rstgen.

(For anyone who is curious, the lore2sphinx-ng repo is forked off from the
lore2sphinx repo, primarily because I didn't want to break the Sphinx
buildbot by making drastic changes.)

Here's what my plan was prior to this whole discussion getting started
again.

1) Finish rstgen, where "finished" in this instance is defined as "is
capable of generating all the vanilla docutils and sphinx-specific ReST
elements that we need for converting the
Twisted documentation.
2) Finish lore2sphinx-ng (which would probably have ended with merging it
back into the lore2sphinx repo), where "finished" means that it would be
capable of processing all the XHTML Lore tags that were defined in the Lore
documentation and used in the Twisted documentation, and generating a tree
of rstgen elements, which could then be rendered into ReST.
(this would also serve to satisfy b) above, as the CLI in lore2sphinx-ng is
less...well, let's just call it broken than lore2sphinx's was/is.)
3) Go back and finish SphinxBuilder (release tooling for building a sphinx
project, which is basically a wrapper for sphinx-build, plus some vague
"version feature").
4) Get someone to use something less hackish than what's currently building
the Sphinx docs on the buildbot, and preferably in such a way that the
results of those builds could be published somewhere and have persistent
links.  Currently the results of what the Sphinx buildbot does are stored
for a time, and then go away, so you'll see links to build results in some
trac tickets that go nowhere, which is decidedly unhelpful.  My plan was
that we'd set up something where the Sphinx docs would get generated and
published someplace for every buildbot build so that we could always have
the current results for the lore to sphinx conversion for the tip of each
branch.  I have no idea whether this is actually feasible or practical, but
it seemed like it would be useful.
5) Proceed with Sphinx docs being built from lore sources, making tweaks as
necessary to lore2sphinx(ng) for as long as it took for the generated docs
to be good enough to justify switching to Sphinx entirely.
6) Switch to Sphinx entirely.

I really wasn't planning on trying to get people excited about switching to
Sphinx again until 1) and 2) were at least "mostly" done (for certain
values of done) and I had gone back to finish 3).

So.  I guess at this point the question is whether to try and go with
what's there (lore2sphinx) or finish up the "new stuff" (lore2sphinx-ng +
rstgen).  I think 3-6 in my above plan need to happen in any case, and I
think those will be much easier with lore2sphinx-ng+rstgen.

I think I have some changes to lore2sphinx and rstgen which I haven't
pushed yet.  I'll try to get those out there soonish (sometime over the
weekend) in case people want to look at them.

IIRC, rstgen has support for most of the vanilla docutils elements, with
the notable exception of tables (and maybe definition lists...can't recall
whether I finished those).  It has a basic level of test coverage (of
course you can never have too many tests) for rendering the elements
individually, and some test for elements in combination (particularly
nested lists).  Footnotes and Citations I think also need some work, which
I have a plan for, but haven't implemented yet (i don't think).

The "new" lore2sphinx CLI tool needs more work, but is relatively
straightforward.  Like the old tool, it's basically an elementtree
processor, except instead of spitting out strings that get joined together
(which granted was an unholy mess), it generates rstgen elements, which all
have a .render() method.  After processing a Lore document, you shoudl end
up with a rstgen.Document object.  You call it's render() method, which
calls it's children's render() methods, etc. and it's turtles all the way
down.

The framework is there for the new CLI tool, it's mostly a matter of
writing a bunch of short methods that take elementtree elements as input
and return appropriate rstgen objects.

Obviously these tools aren't finished, but they produce much better output
than the old version of lore2sphinx w.r.t. whitespace handling, paragraph
wrapping, etc.

Some of the code is still pretty messy, but nowhere near the train wreck
that the current/old version of lore2sphinx is.  By which I mean it _can_
be cleaned up, it just hasn't been yet.  In particular there's some places
in rstgen where the API is (to me at least) obviously awful, but I haven't
gotten around to fixing it yet.

Please review the code.  Please feel free to ask questions if you're
interested.

Personally, I've gotten over being in a hurry about all this, and I think a
robust tool is more likely to succeed in the long run, though finishing it
may make the run a bit longer.  So I'm for finishing lore2sphinx-ng+rstgen.

What are others' opinions?  Make the "old" tool work?  Or make the "new"
tool work?

Damn.  Talk about long emails.

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130301/e5fe3c1b/attachment.html>

From kevin.horn at gmail.com  Fri Mar  1 22:39:41 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 1 Mar 2013 23:39:41 -0600
Subject: [Twisted-Python] Lore, Sphinx,
 and getting to the finish line (was: re: lore and tickets and other
 stuff)
In-Reply-To: <CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
	<4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
	<CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
Message-ID: <CA+U=zK2pw16hYD_wCqeq_zct32QfxtN-4Si8RJvDh_s2DjsgfA@mail.gmail.com>

On Fri, Mar 1, 2013 at 11:35 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

>
> I think I have some changes to lore2sphinx and rstgen which I haven't
> pushed yet.  I'll try to get those out there soonish (sometime over the
> weekend) in case people want to look at them.
>
>
FYI.  This turned out not to be the case.  What I have is already in the
repo(s) on bitbucket.

For those who may have lost track in the voluminous emails, they are here:

https://bitbucket.org/khorn/lore2sphinx-ng
https://bitbucket.org/khorn/rstgen

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130301/634ea9c3/attachment.html>

From tom.prince at ualberta.net  Sat Mar  2 01:18:12 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 02 Mar 2013 01:18:12 -0700
Subject: [Twisted-Python] Lore, Sphinx,
	and getting to the finish line (was: re: lore and tickets and other
	stuff)
In-Reply-To: <CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
	<4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
	<CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
Message-ID: <877glquse3.fsf@hermes.hocat.ca>

> On the other hand, I have at several points been willing to make the
> "cutover", and for various different reasons, been told it wasn't happening
> until things were closer to "perfect" (for some value of "perfect") than
> they were at the time.

Well, the way the cut-over will eventually happen is that a
ticket+branch is given a postive review.

So you say that "[you] have [...] been willing to make the cutover", without
having put an associated ticket into review sounds somewhat like
abandoning the development process.

> Despite numerous attempts to prod someone into responding to my requests
> for clarification ;) on the ticket, I never got any response.

Side note: The best way way to get a response to a ticket is probably to
put it into review.

> Specifically, I could never get an answer on whether the sphinx build tool
> should require whomever was running it to specify a version or whether the
> tool should guess.  The existing tools (at the time, I haven't looked at
> the current state of these) do/did both, in different places.

Having a look at the current release automation tools, it looks like the
only one that takes a version is `change-versions`, and the rest of the
tools use the version from the tree.

>>  *I* can't even remember how to do the math to associate one of the results
>> in <http://buildbot.twistedmatrix.com/builds/sphinx-html/>.

I've update the buildbot to create a link from the build to the
generated documentation.

>>    1. We need to have release-automation tools that allow developers to
>>    produce a release, including documentation.  These tools need to be
>>    subjected to the same development process as the rest of those tools, which
>>    is to say the same process as for the rest of Twisted.
>>
> I (sort of) understand the desire for this, but it seems pretty weird to be building
> what is essentially a wrapper for an existing tool, along with tests for
> said wrapper,

If the command is now, and always will be, just 'sphinx-build .' then we
might be able to get away without doing this, but since sphinx isn't
under our control, we can't insure that. Thus, we need somewhere to
record how to run sphinx-build. If we have a wrapper, then we have an
obvious place to record that information.

This also gives us an easy place to add things like using a different
template when building docs on the buildbot, as opposed to the release
documentation, for example.

> 4) Get someone to use something less hackish than what's currently building
> the Sphinx docs on the buildbot,

I can help with this.

> and preferably in such a way that the results of those builds could be
> published somewhere and have persistent links.

I'm not sure if this makes sense to keep all the old builds around. It
only takes ~2 minutes to regenerate them, as needed.

> My plan was that we'd set up something where the Sphinx docs would get
> generated and published someplace for every buildbot build

We currently do this for every trunk revision, and it is possible to do
by hand for any branch version. It is straightforward to add this to the
list of builds that get done by running force-build.py.

> So.  I guess at this point the question is whether to try and go with
> what's there (lore2sphinx) or finish up the "new stuff" (lore2sphinx-ng +
> rstgen).  I think 3-6 in my above plan need to happen in any case, and I
> think those will be much easier with lore2sphinx-ng+rstgen.

>From what has been said, I'd be inclined to take the long
approach. There isn't any rush, and it sounds like the final results
will be better, if we wait for lore2sphinx-ng + rstgen.


  Tom



From beenje at gmail.com  Sat Mar  2 01:39:57 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sat, 2 Mar 2013 09:39:57 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
Message-ID: <F300B429-3C10-491D-9332-7C701004D05C@gmail.com>


Le 1 mars 2013 à 23:27, Glyph <glyph at twistedmatrix.com> a écrit :

> 
> On Mar 1, 2013, at 1:52 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:
> 
>> I was hoping to avoid having to put something like AMP in place, because it looked a bit overkill for my case.
>> I think I actually found a way :-)
> 
> 
> In what way is it "overkill"?  The dictionary says that <http://dictionary.reference.com/browse/overkill> is "an excess of what is required or suitable, as because of zeal or misjudgment".  What is AMP too much of?  Memory?  CPU?  Bandwidth?  API complexity?  Code size?  As compared to what?

"overkill" wasn't maybe the proper term to use.
I was just referring to code complexity based on my knowledge, or lack of knowledge :-)
I had the impression AMP is used when you need to exchange various command/response.
I don't need all that "power" as I just want to pass some messages.

I thought using a deferred like I did in my code example was easier.
Not sure though as Jean-Paul pointed it probably doesn't work.

My server already uses a specific protocol to communicate with the client.
So I don't really see how to integrate AMP there.
Do you have any example?

Thanks

Benjamin

> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130302/826382b4/attachment.html>

From beenje at gmail.com  Sat Mar  2 01:40:04 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sat, 2 Mar 2013 09:40:04 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
Message-ID: <0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>


Le 2 mars 2013 à 04:34, exarkun at twistedmatrix.com a écrit :

> On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
>> Thanks for the answer!
>> 
>> I was hoping to avoid having to put something like AMP in place, 
>> because it looked a bit overkill for my case.
>> I think I actually found a way :-)
> 
> Unfortunately, it looks like the code that you shared will only work 
> accidentally (if at all).  You cannot use Twisted APIs except in the 
> reactor thread.  You will at least need to add in some code to send data 
> back to the reactor thread before you use Twisted APIs (such as 
> `Deferred.callback`).


In run_pcap, I call reactor.callFromThread(callback, x25_data, line_id). See below.
That seems to work with the tests I did.
Am I missing something?

/Benjamin

def run_pcap(device, pcap_filter, callback):

    def analyse_packet(hdr, data):
        # check the data
        reactor.callFromThread(callback, x25_data, line_id)

    p = pcapy.open_live(device, 65535, 1, 100)
    p.setfilter(pcap_filter)
    p.loop(-1, analyse_packet)


class Oldimon(Protocol):

    def __init__(self, factory):
        self.factory = factory
        self.line = None

    def connectionMade(self):
        # Check the server port to get the line
        # associated to this protocol
        port = self.transport.getHost().port
        self.line = LINES_PORT[port]
        # Add the callback for this line
        self.factory.deferred[self.line] = defer.Deferred()
        self.factory.deferred[self.line].addCallback(self.messageToSend)


class OldimonFactory(ServerFactory):

    def __init__(self, device, pcap_filter):
        # pcapDataReceived callback is called everytime a message
        # is received
        reactor.callInThread(run_pcap, device, pcap_filter, self.pcapDataReceived)
        # Dict with a deferred for each line
        self.deferred = dict(zip(LINES_PORT.values(), [None] * len(LINES_PORT)))

    def buildProtocol(self, addr):
        return Oldimon(self)

    def pcapDataReceived(self, data, line):
        if self.deferred[line] is not None:
            # Fire the callback for line
            d, self.deferred[line] = self.deferred[line], None
            d.callback(data)

oldimon_factory = OldimonFactory(device, pcap_filter)
for port in LINES_PORT.keys():
    reactor.listenTCP(port, oldimon_factory)
reactor.run()


> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From _ at lvh.cc  Sat Mar  2 02:08:41 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 2 Mar 2013 10:08:41 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
Message-ID: <CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>

Yes, that looks okay, but that wasn't in your original sample ;-)

I'm on my phone at the moment which isn't great for code review, but it
looks like you only fire one deferred per line?
On Mar 2, 2013 9:50 AM, "Benjamin BERTRAND" <beenje at gmail.com> wrote:

>
> Le 2 mars 2013 à 04:34, exarkun at twistedmatrix.com a écrit :
>
> > On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
> >> Thanks for the answer!
> >>
> >> I was hoping to avoid having to put something like AMP in place,
> >> because it looked a bit overkill for my case.
> >> I think I actually found a way :-)
> >
> > Unfortunately, it looks like the code that you shared will only work
> > accidentally (if at all).  You cannot use Twisted APIs except in the
> > reactor thread.  You will at least need to add in some code to send data
> > back to the reactor thread before you use Twisted APIs (such as
> > `Deferred.callback`).
>
>
> In run_pcap, I call reactor.callFromThread(callback, x25_data, line_id).
> See below.
> That seems to work with the tests I did.
> Am I missing something?
>
> /Benjamin
>
> def run_pcap(device, pcap_filter, callback):
>
>     def analyse_packet(hdr, data):
>         # check the data
>         reactor.callFromThread(callback, x25_data, line_id)
>
>     p = pcapy.open_live(device, 65535, 1, 100)
>     p.setfilter(pcap_filter)
>     p.loop(-1, analyse_packet)
>
>
> class Oldimon(Protocol):
>
>     def __init__(self, factory):
>         self.factory = factory
>         self.line = None
>
>     def connectionMade(self):
>         # Check the server port to get the line
>         # associated to this protocol
>         port = self.transport.getHost().port
>         self.line = LINES_PORT[port]
>         # Add the callback for this line
>         self.factory.deferred[self.line] = defer.Deferred()
>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>
>
> class OldimonFactory(ServerFactory):
>
>     def __init__(self, device, pcap_filter):
>         # pcapDataReceived callback is called everytime a message
>         # is received
>         reactor.callInThread(run_pcap, device, pcap_filter,
> self.pcapDataReceived)
>         # Dict with a deferred for each line
>         self.deferred = dict(zip(LINES_PORT.values(), [None] *
> len(LINES_PORT)))
>
>     def buildProtocol(self, addr):
>         return Oldimon(self)
>
>     def pcapDataReceived(self, data, line):
>         if self.deferred[line] is not None:
>             # Fire the callback for line
>             d, self.deferred[line] = self.deferred[line], None
>             d.callback(data)
>
> oldimon_factory = OldimonFactory(device, pcap_filter)
> for port in LINES_PORT.keys():
>     reactor.listenTCP(port, oldimon_factory)
> reactor.run()
>
>
> >
> > Jean-Paul
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130302/aeb246f7/attachment.html>

From glyph at twistedmatrix.com  Sat Mar  2 02:14:39 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 2 Mar 2013 01:14:39 -0800
Subject: [Twisted-Python] Lore, Sphinx,
	and getting to the finish line (was: re: lore and tickets and other
	stuff)
In-Reply-To: <CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
	<4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
	<CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
Message-ID: <739CAE65-F29E-4FA8-96BF-A6C1548A9E02@twistedmatrix.com>


On Mar 1, 2013, at 9:35 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> That "never-ending" series of Lore source fixes took place over the course of a couple of weeks.  Doing things that way was not my idea, though it seemed reasonable at the time because  the idea was that we would do the cutover at the end of it.

Well, let's go to the video tape. Based on this comment -  <http://twistedmatrix.com/trac/ticket/4500#comment:12> - these tickets were closed over a period ranging from 2010/07 to 2011/03. 6 months isn't quite "weeks", but okay I guess it wasn't "never-ending" either :).

> I never "wandered off".  Been here the whole time.  I've been in #twisted almost continually for about the last 3 years, and in #twisted-dev for about a year (I didn't relaize it existed before that). I just got tired of (my perception) talking to myself about doing the conversion.  So I was being quiet.  Granted, I shouldn't have been, and that's on me.  but it's not like I'm hard to get a hold of.

Fair enough.  I had the inaccurate impression that you "weren't around" but you were just being quiet.  You never actually failed to respond, so that's not a fair impression.

> OK.  Let's move things along then.  
> 
> Yes lets.

Right on.

> The last day or two have probably not been the best to try and get my attention, especially yesterday, as I essentially worked a 14 hr day trying to meet a deadline.

24 hours is a perfectly reasonable response latency, don't worry about it :).

> But I see the conversation on IRC.  I'll note that noone seems to have considered asking me anything about it.  Looks like it was about 4am, though, so perhaps that wouldn't have done much good, as I was asleep. :) 

> But hey...I have email!  Ask me!  I'll talk your ear off about it!

This email was written after said conversation as an explicit attempt to ask about just that, so, there you go :).

> (As an aside, lore2sphinx is in no way a "broken pile of regexes".  Not to say that it isn't broken in some really significant ways, because it is, but it doesn't use regexes at all.  Just sayin'.)

Actually yeah, "regex" is just a curse-word here :).  It's the emitter I'm complaining about, anyway, not the parser, so deriding it as a "regex" is in no way accurate.

> I got tired of complaining.  And arguing.

>> And since we didn't break the toolchain, I've been in no particular hurry.  I've accepted that this will take approximately a billion years.  So no rush.
> 
> It does not have to take a billion years.  The criteria ought to be clear - and if they aren't, you should have asked for clarification :).
> 
> I have asked for clarification more times than I can count about more aspects of this than I can possibly keep track of.

Where?

On <http://twistedmatrix.com/trac/ticket/5312> I see exactly one un-answered question in your review response, "Is re-raising the exception enough here? Or should I do something entirely different?"  Except it never actually got back into review, so it never got bubbled back up to get attention for an official response.

> Let's be specific: <http://twistedmatrix.com/trac/ticket/5312> is in need of some final code-review.  Despite several reviews and an apparently extensive final response pass, it's not currently in review, which means it's still in your court for some reason.  There is no reason to hold back on this and try to do *everything* in one big bang: this code just needs to be production-quality and land on trunk _before_ the ReST sources themselves are ready to go.
> 
> 
> Despite numerous attempts to prod someone into responding to my requests for clarification ;) on the ticket, I never got any response.

Like I said, I see one un-answered question.  On a ticket which is not in review: according to the development process, that means you still think you have some stuff to do on it, and it's not ready for anyone to take a look at it yet.  If you want a response, put it into review and someone will look at it as soon as time allows.  Or post here.  A comment on a ticket doesn't necessarily show up in anyone's in-box and won't necessarily get a response that isn't a code-review.

> Specifically, I could never get an answer on whether the sphinx build tool should require whomever was running it to specify a version or whether the tool should guess.  The existing tools (at the time, I haven't looked at the current state of these) do/did both, in different places.

The word "version" does not appear on 4500 at all, and on 5312 the only comment you make related to versions is you saying "Not sure which direction to go here. Deferring to sometime not the middle of the night".  It's exarkun asking the question about the versions though, not you :).

Sorry to be overly pedantic here: I'm not trying to assign blame, since that is fairly pointless now.  I'm just meaning to say that, based on what I see here, I am wondering what we could have improved.  I know we chatted on the mailing list, and in person, as well as on the tickets, so not all of this is necessarily public or even written down, but it really seems like you developed an impression of having to repeatedly ask questions and argue about things far more than you actually did :).

> And I admit, my impetus for immediacy kind of crashed when I had spent several weeks (I thought) getting everything ready to switch over the docs (in 4500) and then being told "oh we have some release stuff, we need to have a tool for that too".  My impression prior to this was that sphinx-build would be used to build the sphinx docs, which turned out to be erroneous.  I didn't even know that those tools (twisted.python._release) even existed prior to that point.

The release stuff was new-ish at the time, and is obviously not super publicly documented (it's for "internal" use only on Twisted itself right now).  So it's understandable that it didn't get communicated well, but it hardly seems like a reason to tank the whole process.

> Anyway, after a while it looked like fixing the lore sources would have to be done all over again, so I started looking into whether the conversion process itself could be improved, so that we didn't have to keep doing that.

That part of the conversation, at least, jives with my understanding :).

> Also, please elaborate on what you mean  by "do *everything* in one big bang.  My intention was never to do anything but get the SphinxBuilder working on that branch.  Was there something else you thought I was doing?  Was there something else I should (or should not) have been doing?

My reasoning goes like this: the ticket for the release tools is still not in review, so you must be waiting for something to re-submit it.  It looks like you responded to the code, so the only thing I could think you were still waiting for would be for the lore sources themselves to be ready.

> I have no idea about how the buildbots are configured.  But the linked buildbot log looks like part of the official release process.
> http://twistedmatrix.com/trac/wiki/ReleaseProcess#Buildhowtodocumentsforwebsite

Yeah. Ugh. I hate that part of that wiki page.  But that part can be Tom's problem, since he's responsible for the buildbot :).

> [the fixed-up Lore sources] got left alone because of the release tools hangup.  Ideally the release tools would have been done before the whole lore-source-tweaking process, but they weren't.  I'll admit my frustration played a part in this, but so did the deafening silence I got when I asked for anyone to comment on the ticket.

Where and how did you ask people to comment on the ticket?  I don't recall being asked, and I tend to be pretty good about leaving prompts like that in my inbox until I've done what was asked.  (Not *perfect*, of course, and if you asked a list then there might have been some bystander effect.)  It seems like we might have avoided this whole mess if you had just attached the 'review' keyword :).

> You keep saying that I wanted to "abandon the development process", and I'm not sure what you mean by that.

As I recall, we discussed this process in person at PyCon and you were quite keen to just check the documentation in in a broken state, and fix it all up in one gigantic branch while nobody did any Lore work.  To be fair, when I described the problems this would create, you did agree that we shouldn't do it that way.

> My perception has been that I would say "what do we need to do to make this happen"?  There would be some hemming and hawing (and at least several times long discussions about how documentation didn't really fit the regular UQDS process) and a sort of plan would be invented.  I would proceed according to the plan as I understood it.  I would then say "OK, we're ready"!  And then be told that some other thing not in the plan needed to be done.  The cycle would then repeat.

The only "cycle" I can either see on the tickets or recall here is where the release tools didn't come in to the initial plan.

> No [the need for release automation] was not brought up until well into the process. I (sort of) understand the desire for this, but it seems pretty weird to be building what is essentially a wrapper for an existing tool, along with tests for said wrapper, 

OK.  I can believe that this did not happen.  One problem is that we (the inner-circle old-school Twisted developers) tend to engage in conversations about how a thing might be done while at the same time we discuss what must be done.  And we also tend to discuss what policy is (or what all or some of us believe it ought to be in some case, further confusing the issue) without making explicit what the purpose of that requirement is.

I would ask the community to help us with this by doing a couple of things.

If somebody says "X is policy", always ask for a link to it.  If there is a link, it'll help you understand it better.  If there isn't a link, then the authority telling you it's "policy" might just be remembering that it's the way we've done things since forever and of course it's a good idea.  There are definitely things that I have thought were in the coding standard that are not actually written down anywhere, on more than one occasion.

If a meandering discussion is happening - here, on the mailing list, on the ticket - never be afraid to break it up and separate out the different concerns which are being discussed: what is necessary for compliance with our development process, what would be a good idea from a design point of view, how the work might be broken up to get through review more manageably, what other concerns are in play.

Especially, if you ever see a code review where a reviewer says "I think..." without making it clear what you should do, you should always ask, 'is this a requirement of the review or just some thoughts you have'.

There's also the problem of "I think you should..." being interpreted as "You must...".  It is very hard to consistently separate design feedback from code review, although we try very hard; but, it's hard to separate it out when reading it as well.  So one important point to keep in mind is that, as the author of a proposed change, outside the things that are agreed upon policy consensus, you always have some degree of discretion to disagree with a reviewer.  And you should freely do so when submitting anything for re-review.  It's best to just do this as quickly as possible, so that it gets back to the reviewer without a whole lot of delay, and they can respond with either "I still disagree, but you're doing the work, so OK go ahead" or "No, you really have to do this, it's required by policy document X, here's a link" ;-).
> The documentation itself needs to be able to be generated from any version of trunk.  While one or two formatting snafus are acceptable to be fixed after the fact, the documentation needs to be in a comprehensible state in every revision of trunk, which means that in order to land on trunk, the ReST output.
> So...you didn't finish that sentence.  I realize you apologized for errors at the end of your mail, but I have a feeling you were going to say something rather important there...

Well yes, that was the point of the apology.  That was a rather important thing.  What I was probably going to say was just:

The ReST output needs to be in good enough shape to be generally readable, with a manageable number of errors.  But, we need to be able to *verify* that it has not too many errors.

And I'd already discussed that somewhat above.

> Experience shows that it's unlikely to be surprisingly close.  I like your optimism though.

Experience just teaches it that it's not done yet.  And experience has taught us that about every change, and it was right up until the exact moment when it wasn't right any more ;-).

> Now that I've replied to all of that, let me give you a rundown of what I've been thinking and planning, so that you have an idea of where I'm coming from.
> 
> Here are the various things that I have perceived to be necessary/required in order to get the conversion to happen:
> 
> a) The conversion process needs to be able to be run concurrently with Lore for an extended period of time.  In other words, Lore would be the "official" version of the docs, and the Sphinx docs would be built in some form of automated fashion until everyone was happy with them and/or ready to deprecate/abandon Lore.

Your understanding of this requirement is slightly off, I think, although possibly the consequences are the same.  As per the difficulties I laid out above, about separating the requirements from the strategies for satisfying said requirements.

The thing that we weren't going to tolerate was any message saying that people should hold off on writing documentation, even for "a little while" while we fixed up the lore conversion, because without a contractual obligation for someone to finish this work, there's really no telling how long "a little while" would be :).  Since the whole point of this sphinx conversion is to appeal to documentation authors who prefer the ReST format as input (it's definitely not to make the docs look nicer, writing a new stylesheet for Lore would have taken 1/100th of the effort and nobody has expressed interest in doing that), creating a period where things were even *less* appealing to documentation authors would defeat the purpose.

Another possible solution to this problem would be to modify Lore so it could process ReST sources, so that we could convert the documentation within the repository piecemeal, and start writing any new docs in ReST, but still have a coherent whole of documentation produced, eventually switching the documentation processor from Lore to Sphinx.

Yet another possible solution would be to modify Sphinx, adding a plugin to process the Lore sources.

As an aside: this is the part of the process which has been so frustrating to me, personally.  The two alternate solutions I proposed here (and have proposed before) seem far saner and more manageable in terms of effort, to me.  But, everyone I have spoken to about docutils and ReST has told me in no uncertain terms that they are both a pile of heinous hacks that resist any attempt at sensible software-engineering solutions to problems, so we need to resort to hackish system-integration stuff like what we've done.  This worries me.

I know that Sphinx's output is well-loved by the Python community, but if it's so hard to call into that we can't reasonably modify it to get an XML DOM that looks like Lore source to Lore, and it's so hard to plug in to it that we can't give it a data structure that it likes from Lore's XML DOM, then how the heck is it being maintained?  And if it actually *isn't* that bad, then why haven't I managed to find someone that knows its code well enough to do one or the other of these things?

I have no direct knowledge of any of this stuff, because my main interest here is improving the experience of working on Twisted, both for you, Kevin, and for the people who will arguably be helped by the use of Sphinx.  Maybe I'm completely wrong and Sphinx is beautifully architected and we could have done this from day 1.  But I faintly hope that some Docutils and Sphinx contributor hears that I said "sphinx is garbage" and makes a fool of me by contributing either a lore modification or a sphinx plugin which solves this whole problem so we can do the format or tool migration incrementally :).

> b) Because of a), there needs to be tooling to run lore2sphinx (or whatever) on a regular basis.  (This was sort of being done via the Sphinx-building buildbot, but in a very ad-hockery sort of way, which was brittle, broke a couple of times, and needed to be improved.)

Hmm. I wasn't aware of that. But it seems like it's running by a charm now.

> c) There needs to be release management tooling to build the Sphinx docs from ReST into whatever formats we want to publish (HTML and PDF to start, maybe others later on)

Yup.  (ePub?  PDF is so last-century... :))

> d) Convert the Lore sources to better ReST documents without all the problems that the current lore2sphinx output has.

So, this wasn't *necessary*.  If we had gotten through the release automation stuff - and I still don't understand why that's stuck - we could have merged it.

> I at one time thought this was pretty impractical.  My first attempt at a conversion tool tried to use an intermediate object model, but I ran into trouble when trying to combine the various objects.  So I abandoned the effort and created what became lore2sphinx, which basically just combined a bunch of strings.  I then figured out a way of making the intermediate object thing work, and that was lore2sphinx-ng.  Then it became convenient to split out the intermediate object model from the documetn processing code, so I put all of that into a library and that became rstgen.

It seems the saving grace here is that rstgen might be a generally useful tool in its own right, with more of a long-term future than lore2sphinx would have had.

> (For anyone who is curious, the lore2sphinx-ng repo is forked off from the lore2sphinx repo, primarily because I didn't want to break the Sphinx buildbot by making drastic changes.)

Have a link?

> Here's what my plan was prior to this whole discussion getting started again.
> 
> 1) Finish rstgen, where "finished" in this instance is defined as "is capable of generating all the vanilla docutils and sphinx-specific ReST elements that we need for converting the 
> Twisted documentation.

Sounds like a worthy goal, although I don't think this is necessarily required.  Have you been working on it for the last 2 years?  Do you have any idea when it might be done?  It might be worthwhile to write a *smaller* .

> 2) Finish lore2sphinx-ng (which would probably have ended with merging it back into the lore2sphinx repo), where "finished" means that it would be capable of processing all the XHTML Lore tags that were defined in the Lore documentation and used in the Twisted documentation, and generating a tree of rstgen elements, which could then be rendered into ReST.

Cool.

While this would be handy, especially for people working on documentation branches, it's not necessarily necessary.

> (this would also serve to satisfy b) above, as the CLI in lore2sphinx-ng is less...well, let's just call it broken than lore2sphinx's was/is.)

OK.

> 3) Go back and finish SphinxBuilder (release tooling for building a sphinx project, which is basically a wrapper for sphinx-build, plus some vague "version feature").

This is really the crux; this is the thing you should work on first, I think, even if you're going to keep working on lore2sphinx-ng.  Basically the only reason that I was keen to get the lore to sphinx conversion improved in the first place was that creating this tool seemed to be dragging on for quite a while after the "chunk tickets" were done.  But now, this tool is almost done, and we could re-do the lore-source review if you wanted to do that.  The current lore2sphinx might well be good enough to just go with, especially if the next-generation version is going to take another six months to finish.

> 4) Get someone to use something less hackish than what's currently building the Sphinx docs on the buildbot, and preferably in such a way that the results of those builds could be published somewhere and have persistent links.  Currently the results of what the Sphinx buildbot does are stored for a time, and then go away, so you'll see links to build results in some trac tickets that go nowhere, which is decidedly unhelpful.  My plan was that we'd set up something where the Sphinx docs would get generated and published someplace for every buildbot build so that we could always have the current results for the lore to sphinx conversion for the tip of each branch.  I have no idea whether this is actually feasible or practical, but it seemed like it would be useful.

OK, *this* sounds like really unnecessary turd-polishing ;-).  This builder is an interim step; the more interesting step is the builder that just builds the sphinx docs, in the same way that the current builder builds the lore docs.  Furthermore, it seems to be working fine.  Build results links that go nowhere are a known problem with buildbot, since it does eventually lose most history, and this type of history takes up a fair bit of disk space.

> 5) Proceed with Sphinx docs being built from lore sources, making tweaks as necessary to lore2sphinx(ng) for as long as it took for the generated docs to be good enough to justify switching to Sphinx entirely.
> 6) Switch to Sphinx entirely.
> 
> I really wasn't planning on trying to get people excited about switching to Sphinx again until 1) and 2) were at least "mostly" done (for certain values of done) and I had gone back to finish 3).
> 
> So.  I guess at this point the question is whether to try and go with what's there (lore2sphinx) or finish up the "new stuff" (lore2sphinx-ng + rstgen).  I think 3-6 in my above plan need to happen in any case, and I think those will be much easier with lore2sphinx-ng+rstgen.

This decision is really determined by time estimates.

In any case, work out the sphinx release automation tool first, since we need that regardless of how we switch over.

> I think I have some changes to lore2sphinx and rstgen which I haven't pushed yet.  I'll try to get those out there soonish (sometime over the weekend) in case people want to look at them.

You might want to send a considerably shorter message just enticing other list members to have a look at maybe help out with that stuff :).

> IIRC, rstgen has support for most of the vanilla docutils elements, with the notable exception of tables (and maybe definition lists...can't recall whether I finished those).  It has a basic level of test coverage (of course you can never have too many tests) for rendering the elements individually, and some test for elements in combination (particularly nested lists).  Footnotes and Citations I think also need some work, which I have a plan for, but haven't implemented yet (i don't think).
> 
> The "new" lore2sphinx CLI tool needs more work, but is relatively straightforward.  Like the old tool, it's basically an elementtree processor, except instead of spitting out strings that get joined together (which granted was an unholy mess), it generates rstgen elements, which all have a .render() method.  After processing a Lore document, you shoudl end up with a rstgen.Document object.  You call it's render() method, which calls it's children's render() methods, etc. and it's turtles all the way down.
> 
> The framework is there for the new CLI tool, it's mostly a matter of writing a bunch of short methods that take elementtree elements as input and return appropriate rstgen objects.
> 
> Obviously these tools aren't finished, but they produce much better output than the old version of lore2sphinx w.r.t. whitespace handling, paragraph wrapping, etc.

Aesthetically, this appeals to me a lot more than going with the messiness of lore2sphinx.  But it is _not_ a requirement.

> Some of the code is still pretty messy, but nowhere near the train wreck that the current/old version of lore2sphinx is.  By which I mean it _can_ be cleaned up, it just hasn't been yet.  In particular there's some places in rstgen where the API is (to me at least) obviously awful, but I haven't gotten around to fixing it yet.
> 
> Please review the code.  Please feel free to ask questions if you're interested.
> 
> Personally, I've gotten over being in a hurry about all this, and I think a robust tool is more likely to succeed in the long run, though finishing it may make the run a bit longer.  So I'm for finishing lore2sphinx-ng+rstgen.

I think a little false urgency might not hurt here :-).  I'm not going to work on the tool - just writing these emails probably blew my Twisted development budget for the next two months ;-) - but I will do my best to quickly clear up any procedural what-needs-to-be-done questions unambiguously.  Please ping if anything gets you stuck.

> What are others' opinions?  Make the "old" tool work?  Or make the "new" tool work?
> 
> Damn.  Talk about long emails.


-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130302/1eacb123/attachment.html>

From glyph at twistedmatrix.com  Sat Mar  2 02:17:27 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 2 Mar 2013 01:17:27 -0800
Subject: [Twisted-Python] Lore, Sphinx,
	and getting to the finish line (was: re: lore and tickets and other
	stuff)
In-Reply-To: <877glquse3.fsf@hermes.hocat.ca>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
	<4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
	<CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
	<877glquse3.fsf@hermes.hocat.ca>
Message-ID: <7EE803F3-BED0-4E3E-8DE6-FADCF356BBB9@twistedmatrix.com>


On Mar 2, 2013, at 12:18 AM, Tom Prince <tom.prince at ualberta.net> wrote:

> I've update the buildbot to create a link from the build to the
> generated documentation.

Oh my goodness, Tom.  You are like a god of buildbot.

It did not even occur to me to ask for this, as I assumed it would be too complex.  Thanks so much!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130302/0de3c867/attachment.html>

From p.mayers at imperial.ac.uk  Sat Mar  2 04:25:36 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 02 Mar 2013 11:25:36 +0000
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
Message-ID: <5131E1B0.5090207@imperial.ac.uk>

On 03/01/2013 10:27 PM, Glyph wrote:

>   What is AMP too much of?  Memory?  CPU?  Bandwidth?  API complexity?
>   Code size?  As compared to what?

FWIW, every time (all three of them...) I've looked at AMP I got rapidly 
bored and ended up using PB. My use-cases have usually been 
Twisted->Twisted, and the AMP "Command" definition, and syncing said 
defs up at both ends, was hassle I didn't need.

When I need to talk to external systems I almost always use some REST, 
XMLRPC or JSON-RPC interface, because they're usually available 
out-of-the-box.

I also don't care for the idea of statically typing the command defs; 
I'm sure this helps when talking to languages with crappy typing 
systems, but honestly - who uses Java these days? ;o)



From _ at lvh.cc  Sat Mar  2 05:05:46 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 2 Mar 2013 13:05:46 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <5131E1B0.5090207@imperial.ac.uk>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
Message-ID: <CAE_Hg6bn3s74s+stG=1m=dLKGLMtweW=qDssoVOjPmrmLpNpBg@mail.gmail.com>

Fair enough, I only use AMP as the external interface (e.g. Javascript
talking to me from a browser).


On Sat, Mar 2, 2013 at 12:25 PM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> On 03/01/2013 10:27 PM, Glyph wrote:
>
> >   What is AMP too much of?  Memory?  CPU?  Bandwidth?  API complexity?
> >   Code size?  As compared to what?
>
> FWIW, every time (all three of them...) I've looked at AMP I got rapidly
> bored and ended up using PB. My use-cases have usually been
> Twisted->Twisted, and the AMP "Command" definition, and syncing said
> defs up at both ends, was hassle I didn't need.
>
> When I need to talk to external systems I almost always use some REST,
> XMLRPC or JSON-RPC interface, because they're usually available
> out-of-the-box.
>
> I also don't care for the idea of statically typing the command defs;
> I'm sure this helps when talking to languages with crappy typing
> systems, but honestly - who uses Java these days? ;o)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130302/fc23f963/attachment.html>

From glyph at twistedmatrix.com  Sat Mar  2 05:19:42 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 2 Mar 2013 04:19:42 -0800
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <5131E1B0.5090207@imperial.ac.uk>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
Message-ID: <CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>


On Mar 2, 2013, at 3:25 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 03/01/2013 10:27 PM, Glyph wrote:
> 
>>  What is AMP too much of?  Memory?  CPU?  Bandwidth?  API complexity?
>>  Code size?  As compared to what?
> 
> FWIW, every time (all three of them...) I've looked at AMP I got rapidly 
> bored and ended up using PB. My use-cases have usually been 
> Twisted->Twisted, and the AMP "Command" definition, and syncing said 
> defs up at both ends, was hassle I didn't need.
> 
> When I need to talk to external systems I almost always use some REST, 
> XMLRPC or JSON-RPC interface, because they're usually available 
> out-of-the-box.
> 
> I also don't care for the idea of statically typing the command defs; 
> I'm sure this helps when talking to languages with crappy typing 
> systems, but honestly - who uses Java these days? ;o)

I wrote a blog post some time ago explaining why you want static declarations, even if your programming language is all nice and dynamic:

<http://glyph.twistedmatrix.com/2008/07/static-on-wire.html>

Even if all you care about is Twisted->Twisted, there are potential resource exhaustion and implementation-confusion attacks against PB that are very hard to mitigate in its current form.  That said, for the sorts of places where PB is useful (communicating about and synchronizing arbitrarily deep and complex object graphs), you're probably going to have those exhaustion attacks anyway and using something like AMP would just be more typing.  So as long as you're version-synchronized and at least partially trusted on both ends of the wire, PB is a fine choice as well.

"REST" (by which you mean "HTTP", I'm sure), XMLRPC, and JSON-RPC are not full replacements for AMP because they're asymmetrical and don't support pipelining.  With AMP, a client can receive requests from a server, you don't need to have a TCP handshake for every request, you can receive responses out of order, and you can receive a request while waiting for a response, and so on.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130302/2cd3af4e/attachment.html>

From beenje at gmail.com  Sat Mar  2 06:28:21 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sat, 2 Mar 2013 14:28:21 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
	<CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
Message-ID: <4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>


Le 2 mars 2013 à 10:08, Laurens Van Houtven <_ at lvh.cc> a écrit :

> Yes, that looks okay, but that wasn't in your original sample ;-)
> 
> 

Yep, sorry about that.
I was more focused on the ServerFactory and Protocol.
The pcap in a thread comes from the link I mentioned in my first post: http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
But I know, it's better to put everything in one post. People shouldn't have to click links.

> I'm on my phone at the moment which isn't great for code review, but it looks like you only fire one deferred per line?
> 
> 

There is a specific deferred by line.
I re-arm it in the messageToSend method (that wasn't in the sample either).
In the Oldimon class, I have:

    def messageToSend(self, message):
        self.sendMessage(message)
        # Re-arm the deferred
        self.factory.deferred[self.line] = defer.Deferred()
        self.factory.deferred[self.line].addCallback(self.messageToSend)


> On Mar 2, 2013 9:50 AM, "Benjamin BERTRAND" <beenje at gmail.com> wrote:
> 
> Le 2 mars 2013 à 04:34, exarkun at twistedmatrix.com a écrit :
> 
> > On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
> >> Thanks for the answer!
> >>
> >> I was hoping to avoid having to put something like AMP in place,
> >> because it looked a bit overkill for my case.
> >> I think I actually found a way :-)
> >
> > Unfortunately, it looks like the code that you shared will only work
> > accidentally (if at all).  You cannot use Twisted APIs except in the
> > reactor thread.  You will at least need to add in some code to send data
> > back to the reactor thread before you use Twisted APIs (such as
> > `Deferred.callback`).
> 
> 
> In run_pcap, I call reactor.callFromThread(callback, x25_data, line_id). See below.
> That seems to work with the tests I did.
> Am I missing something?
> 
> /Benjamin
> 
> def run_pcap(device, pcap_filter, callback):
> 
>     def analyse_packet(hdr, data):
>         # check the data
>         reactor.callFromThread(callback, x25_data, line_id)
> 
>     p = pcapy.open_live(device, 65535, 1, 100)
>     p.setfilter(pcap_filter)
>     p.loop(-1, analyse_packet)
> 
> 
> class Oldimon(Protocol):
> 
>     def __init__(self, factory):
>         self.factory = factory
>         self.line = None
> 
>     def connectionMade(self):
>         # Check the server port to get the line
>         # associated to this protocol
>         port = self.transport.getHost().port
>         self.line = LINES_PORT[port]
>         # Add the callback for this line
>         self.factory.deferred[self.line] = defer.Deferred()
>         self.factory.deferred[self.line].addCallback(self.messageToSend)
> 
> 
> class OldimonFactory(ServerFactory):
> 
>     def __init__(self, device, pcap_filter):
>         # pcapDataReceived callback is called everytime a message
>         # is received
>         reactor.callInThread(run_pcap, device, pcap_filter, self.pcapDataReceived)
>         # Dict with a deferred for each line
>         self.deferred = dict(zip(LINES_PORT.values(), [None] * len(LINES_PORT)))
> 
>     def buildProtocol(self, addr):
>         return Oldimon(self)
> 
>     def pcapDataReceived(self, data, line):
>         if self.deferred[line] is not None:
>             # Fire the callback for line
>             d, self.deferred[line] = self.deferred[line], None
>             d.callback(data)
> 
> oldimon_factory = OldimonFactory(device, pcap_filter)
> for port in LINES_PORT.keys():
>     reactor.listenTCP(port, oldimon_factory)
> reactor.run()
> 
> 
> >
> > Jean-Paul
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130302/e026855c/attachment.html>

From p.mayers at imperial.ac.uk  Sat Mar  2 06:46:48 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 02 Mar 2013 13:46:48 +0000
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
Message-ID: <513202C8.6070400@imperial.ac.uk>

On 03/02/2013 12:19 PM, Glyph wrote:

> I wrote a blog post some time ago explaining why you want static
> declarations, even if your programming language is all nice and dynamic:

Being able to "early drop" bad PDUs is a fine notion, but it's not a 
property that comes with zero cost. If you feel that the cost/benefit 
tradeoff is not useful in your case (and I do) then it doesn't make 
sense to pay it.

AMP would be somewhat more attractive (to me) if it were possible to run 
with the IDL just on the "server" (i.e. callee); this would achieve the 
goal of protocol-level sanity checking, without the cost of having to 
distribute the IDL to the clients. Presumably it would be possible to 
implement this now - have an AMP discovery command that dynamically 
builds the client-side IDLs. But there's no incentive for me to do that.

For the use-cases I have, the protocol version/interop problem is not 
relevant.

> not full replacements for AMP because they're asymmetrical and don't
> support pipelining.  With AMP, a client can receive requests from a
> server, you don't need to have a TCP handshake for every request, you

You don't need to do a TCP handshake for every request in any of those 
protocols either. Long-lived TCP/HTTP sessions are quite common, though 
not universal.

It will be interesting to see if and how HTTP/2.0 solves a lot of these 
issues.

> can receive responses out of order, and you can receive a request while
> waiting for a response, and so on.

Obviously. But I would tend to use those protocols when either those 
properties are not needed (perhaps even undesireable) and may be 
impossible to make use of (if the far end is a synchronous, blocking 
client unable to make use of out-of-order responses or server-initiated 
messages).

In those cases, it would also be rare for AMP to be available, and it 
certainly wouldn't be pre-installed.

"Install this Java library on your Oracle servers then..."
"Ha ha no go away."

You seemed curious why someone wouldn't use AMP. Personally I have two 
common use-cases:

  1. Communicating between two trusted Twisted processes, for which PB 
is good enough.

  2. Communicating with a semi-trusted third party process, for which a 
RESTful interface or XML/JSON RPCs are *available* and sufficiently 
secure and capable for my needs.

Obviously other people will have radically different needs, but for me, 
AMP adds little.

Cheers,
Phil



From _ at lvh.cc  Sat Mar  2 06:53:20 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 2 Mar 2013 14:53:20 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
	<CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
	<4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>
Message-ID: <CAE_Hg6YWHzJQC6Rp5JE+iV-LEbufrwG3XMsg0JJBGd-pMQ0kgQ@mail.gmail.com>

Ah, but that too appears to be missing in the original code ;-)

The stuff you're doing with deferreds there seems a bit strange. In your
example, why not just call sendMessage when you get the packet?


On Sat, Mar 2, 2013 at 2:28 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:

>
> Le 2 mars 2013 à 10:08, Laurens Van Houtven <_ at lvh.cc> a écrit :
>
> Yes, that looks okay, but that wasn't in your original sample ;-)
>
>
> Yep, sorry about that.
> I was more focused on the ServerFactory and Protocol.
> The pcap in a thread comes from the link I mentioned in my first post:
> http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
> But I know, it's better to put everything in one post. People shouldn't
> have to click links.
>
> I'm on my phone at the moment which isn't great for code review, but it
> looks like you only fire one deferred per line?
>
>
> There is a specific deferred by line.
> I re-arm it in the messageToSend method (that wasn't in the sample either).
> In the Oldimon class, I have:
>
>     def messageToSend(self, message):
>         self.sendMessage(message)
>         # Re-arm the deferred
>         self.factory.deferred[self.line] = defer.Deferred()
>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>
>
> On Mar 2, 2013 9:50 AM, "Benjamin BERTRAND" <beenje at gmail.com> wrote:
>
>>
>> Le 2 mars 2013 à 04:34, exarkun at twistedmatrix.com a écrit :
>>
>> > On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
>> >> Thanks for the answer!
>> >>
>> >> I was hoping to avoid having to put something like AMP in place,
>> >> because it looked a bit overkill for my case.
>> >> I think I actually found a way :-)
>> >
>> > Unfortunately, it looks like the code that you shared will only work
>> > accidentally (if at all).  You cannot use Twisted APIs except in the
>> > reactor thread.  You will at least need to add in some code to send data
>> > back to the reactor thread before you use Twisted APIs (such as
>> > `Deferred.callback`).
>>
>>
>> In run_pcap, I call reactor.callFromThread(callback, x25_data, line_id).
>> See below.
>> That seems to work with the tests I did.
>> Am I missing something?
>>
>> /Benjamin
>>
>> def run_pcap(device, pcap_filter, callback):
>>
>>     def analyse_packet(hdr, data):
>>         # check the data
>>         reactor.callFromThread(callback, x25_data, line_id)
>>
>>     p = pcapy.open_live(device, 65535, 1, 100)
>>     p.setfilter(pcap_filter)
>>     p.loop(-1, analyse_packet)
>>
>>
>> class Oldimon(Protocol):
>>
>>     def __init__(self, factory):
>>         self.factory = factory
>>         self.line = None
>>
>>     def connectionMade(self):
>>         # Check the server port to get the line
>>         # associated to this protocol
>>         port = self.transport.getHost().port
>>         self.line = LINES_PORT[port]
>>         # Add the callback for this line
>>         self.factory.deferred[self.line] = defer.Deferred()
>>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>>
>>
>> class OldimonFactory(ServerFactory):
>>
>>     def __init__(self, device, pcap_filter):
>>         # pcapDataReceived callback is called everytime a message
>>         # is received
>>         reactor.callInThread(run_pcap, device, pcap_filter,
>> self.pcapDataReceived)
>>         # Dict with a deferred for each line
>>         self.deferred = dict(zip(LINES_PORT.values(), [None] *
>> len(LINES_PORT)))
>>
>>     def buildProtocol(self, addr):
>>         return Oldimon(self)
>>
>>     def pcapDataReceived(self, data, line):
>>         if self.deferred[line] is not None:
>>             # Fire the callback for line
>>             d, self.deferred[line] = self.deferred[line], None
>>             d.callback(data)
>>
>> oldimon_factory = OldimonFactory(device, pcap_filter)
>> for port in LINES_PORT.keys():
>>     reactor.listenTCP(port, oldimon_factory)
>> reactor.run()
>>
>>
>> >
>> > Jean-Paul
>> >
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130302/d2e59567/attachment.html>

From beenje at gmail.com  Sat Mar  2 07:25:13 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sat, 2 Mar 2013 15:25:13 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CAE_Hg6YWHzJQC6Rp5JE+iV-LEbufrwG3XMsg0JJBGd-pMQ0kgQ@mail.gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
	<CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
	<4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>
	<CAE_Hg6YWHzJQC6Rp5JE+iV-LEbufrwG3XMsg0JJBGd-pMQ0kgQ@mail.gmail.com>
Message-ID: <4A456C6A-558E-4F4C-AFBC-F51349BDA864@gmail.com>


Le 2 mars 2013 à 14:53, Laurens Van Houtven <_ at lvh.cc> a écrit :

> Ah, but that too appears to be missing in the original code ;-)
> 
> The stuff you're doing with deferreds there seems a bit strange. In your example, why not just call sendMessage when you get the packet?

If I had only one server yes.
But the thing is I have to send the message to a different server depending on the line id.
That was my initial problem.
I don't see how I could call the sendMessage method corresponding to a specific server directly.
Or?

> 
> 
> On Sat, Mar 2, 2013 at 2:28 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:
> 
> Le 2 mars 2013 à 10:08, Laurens Van Houtven <_ at lvh.cc> a écrit :
> 
>> Yes, that looks okay, but that wasn't in your original sample ;-)
>> 
>> 
> 
> Yep, sorry about that.
> I was more focused on the ServerFactory and Protocol.
> The pcap in a thread comes from the link I mentioned in my first post: http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
> But I know, it's better to put everything in one post. People shouldn't have to click links.
> 
>> I'm on my phone at the moment which isn't great for code review, but it looks like you only fire one deferred per line?
>> 
>> 
> 
> There is a specific deferred by line.
> I re-arm it in the messageToSend method (that wasn't in the sample either).
> In the Oldimon class, I have:
> 
>     def messageToSend(self, message):
>         self.sendMessage(message)
>         # Re-arm the deferred
>         self.factory.deferred[self.line] = defer.Deferred()
>         self.factory.deferred[self.line].addCallback(self.messageToSend)
> 
> 
>> On Mar 2, 2013 9:50 AM, "Benjamin BERTRAND" <beenje at gmail.com> wrote:
>> 
>> Le 2 mars 2013 à 04:34, exarkun at twistedmatrix.com a écrit :
>> 
>> > On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
>> >> Thanks for the answer!
>> >>
>> >> I was hoping to avoid having to put something like AMP in place,
>> >> because it looked a bit overkill for my case.
>> >> I think I actually found a way :-)
>> >
>> > Unfortunately, it looks like the code that you shared will only work
>> > accidentally (if at all).  You cannot use Twisted APIs except in the
>> > reactor thread.  You will at least need to add in some code to send data
>> > back to the reactor thread before you use Twisted APIs (such as
>> > `Deferred.callback`).
>> 
>> 
>> In run_pcap, I call reactor.callFromThread(callback, x25_data, line_id). See below.
>> That seems to work with the tests I did.
>> Am I missing something?
>> 
>> /Benjamin
>> 
>> def run_pcap(device, pcap_filter, callback):
>> 
>>     def analyse_packet(hdr, data):
>>         # check the data
>>         reactor.callFromThread(callback, x25_data, line_id)
>> 
>>     p = pcapy.open_live(device, 65535, 1, 100)
>>     p.setfilter(pcap_filter)
>>     p.loop(-1, analyse_packet)
>> 
>> 
>> class Oldimon(Protocol):
>> 
>>     def __init__(self, factory):
>>         self.factory = factory
>>         self.line = None
>> 
>>     def connectionMade(self):
>>         # Check the server port to get the line
>>         # associated to this protocol
>>         port = self.transport.getHost().port
>>         self.line = LINES_PORT[port]
>>         # Add the callback for this line
>>         self.factory.deferred[self.line] = defer.Deferred()
>>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>> 
>> 
>> class OldimonFactory(ServerFactory):
>> 
>>     def __init__(self, device, pcap_filter):
>>         # pcapDataReceived callback is called everytime a message
>>         # is received
>>         reactor.callInThread(run_pcap, device, pcap_filter, self.pcapDataReceived)
>>         # Dict with a deferred for each line
>>         self.deferred = dict(zip(LINES_PORT.values(), [None] * len(LINES_PORT)))
>> 
>>     def buildProtocol(self, addr):
>>         return Oldimon(self)
>> 
>>     def pcapDataReceived(self, data, line):
>>         if self.deferred[line] is not None:
>>             # Fire the callback for line
>>             d, self.deferred[line] = self.deferred[line], None
>>             d.callback(data)
>> 
>> oldimon_factory = OldimonFactory(device, pcap_filter)
>> for port in LINES_PORT.keys():
>>     reactor.listenTCP(port, oldimon_factory)
>> reactor.run()
>> 
>> 
>> >
>> > Jean-Paul
>> >
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> 
> -- 
> cheers
> lvh
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130302/ab9ebdea/attachment.html>

From _ at lvh.cc  Sat Mar  2 07:33:40 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 2 Mar 2013 15:33:40 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <4A456C6A-558E-4F4C-AFBC-F51349BDA864@gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
	<CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
	<4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>
	<CAE_Hg6YWHzJQC6Rp5JE+iV-LEbufrwG3XMsg0JJBGd-pMQ0kgQ@mail.gmail.com>
	<4A456C6A-558E-4F4C-AFBC-F51349BDA864@gmail.com>
Message-ID: <CAE_Hg6ZkRvU8ra14hpq=h5w_j+pHs6r8HiecqrgkaYLzB0iTaA@mail.gmail.com>

I'm guessing that this is another question that will be solved as soon as I
see the code (perhaps you should put all your code up somewhere); but all I
do know is that all Deferreds buy you is an abstraction for organizing
callbacks; it's not a dispatch mechanism (and if you're using it as one
now, you do have dispatch logic, it just lives somewhere else).


On Sat, Mar 2, 2013 at 3:25 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:

>
> Le 2 mars 2013 à 14:53, Laurens Van Houtven <_ at lvh.cc> a écrit :
>
> Ah, but that too appears to be missing in the original code ;-)
>
> The stuff you're doing with deferreds there seems a bit strange. In your
> example, why not just call sendMessage when you get the packet?
>
>
> If I had only one server yes.
> But the thing is I have to send the message to a different server
> depending on the line id.
> That was my initial problem.
> I don't see how I could call the sendMessage method corresponding to a
> specific server directly.
> Or?
>
>
>
> On Sat, Mar 2, 2013 at 2:28 PM, Benjamin BERTRAND <beenje at gmail.com>wrote:
>
>>
>> Le 2 mars 2013 à 10:08, Laurens Van Houtven <_ at lvh.cc> a écrit :
>>
>> Yes, that looks okay, but that wasn't in your original sample ;-)
>>
>>
>> Yep, sorry about that.
>> I was more focused on the ServerFactory and Protocol.
>> The pcap in a thread comes from the link I mentioned in my first post:
>> http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
>> But I know, it's better to put everything in one post. People shouldn't
>> have to click links.
>>
>> I'm on my phone at the moment which isn't great for code review, but it
>> looks like you only fire one deferred per line?
>>
>>
>> There is a specific deferred by line.
>> I re-arm it in the messageToSend method (that wasn't in the sample
>> either).
>> In the Oldimon class, I have:
>>
>>     def messageToSend(self, message):
>>         self.sendMessage(message)
>>         # Re-arm the deferred
>>         self.factory.deferred[self.line] = defer.Deferred()
>>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>>
>>
>> On Mar 2, 2013 9:50 AM, "Benjamin BERTRAND" <beenje at gmail.com> wrote:
>>
>>>
>>> Le 2 mars 2013 à 04:34, exarkun at twistedmatrix.com a écrit :
>>>
>>> > On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
>>> >> Thanks for the answer!
>>> >>
>>> >> I was hoping to avoid having to put something like AMP in place,
>>> >> because it looked a bit overkill for my case.
>>> >> I think I actually found a way :-)
>>> >
>>> > Unfortunately, it looks like the code that you shared will only work
>>> > accidentally (if at all).  You cannot use Twisted APIs except in the
>>> > reactor thread.  You will at least need to add in some code to send
>>> data
>>> > back to the reactor thread before you use Twisted APIs (such as
>>> > `Deferred.callback`).
>>>
>>>
>>> In run_pcap, I call reactor.callFromThread(callback, x25_data, line_id).
>>> See below.
>>> That seems to work with the tests I did.
>>> Am I missing something?
>>>
>>> /Benjamin
>>>
>>> def run_pcap(device, pcap_filter, callback):
>>>
>>>     def analyse_packet(hdr, data):
>>>         # check the data
>>>         reactor.callFromThread(callback, x25_data, line_id)
>>>
>>>     p = pcapy.open_live(device, 65535, 1, 100)
>>>     p.setfilter(pcap_filter)
>>>     p.loop(-1, analyse_packet)
>>>
>>>
>>> class Oldimon(Protocol):
>>>
>>>     def __init__(self, factory):
>>>         self.factory = factory
>>>         self.line = None
>>>
>>>     def connectionMade(self):
>>>         # Check the server port to get the line
>>>         # associated to this protocol
>>>         port = self.transport.getHost().port
>>>         self.line = LINES_PORT[port]
>>>         # Add the callback for this line
>>>         self.factory.deferred[self.line] = defer.Deferred()
>>>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>>>
>>>
>>> class OldimonFactory(ServerFactory):
>>>
>>>     def __init__(self, device, pcap_filter):
>>>         # pcapDataReceived callback is called everytime a message
>>>         # is received
>>>         reactor.callInThread(run_pcap, device, pcap_filter,
>>> self.pcapDataReceived)
>>>         # Dict with a deferred for each line
>>>         self.deferred = dict(zip(LINES_PORT.values(), [None] *
>>> len(LINES_PORT)))
>>>
>>>     def buildProtocol(self, addr):
>>>         return Oldimon(self)
>>>
>>>     def pcapDataReceived(self, data, line):
>>>         if self.deferred[line] is not None:
>>>             # Fire the callback for line
>>>             d, self.deferred[line] = self.deferred[line], None
>>>             d.callback(data)
>>>
>>> oldimon_factory = OldimonFactory(device, pcap_filter)
>>> for port in LINES_PORT.keys():
>>>     reactor.listenTCP(port, oldimon_factory)
>>> reactor.run()
>>>
>>>
>>> >
>>> > Jean-Paul
>>> >
>>> > _______________________________________________
>>> > Twisted-Python mailing list
>>> > Twisted-Python at twistedmatrix.com
>>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> cheers
> lvh
>  _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130302/daee8152/attachment.html>

From beenje at gmail.com  Sat Mar  2 08:16:11 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sat, 2 Mar 2013 16:16:11 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CAE_Hg6ZkRvU8ra14hpq=h5w_j+pHs6r8HiecqrgkaYLzB0iTaA@mail.gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
	<CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
	<4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>
	<CAE_Hg6YWHzJQC6Rp5JE+iV-LEbufrwG3XMsg0JJBGd-pMQ0kgQ@mail.gmail.com>
	<4A456C6A-558E-4F4C-AFBC-F51349BDA864@gmail.com>
	<CAE_Hg6ZkRvU8ra14hpq=h5w_j+pHs6r8HiecqrgkaYLzB0iTaA@mail.gmail.com>
Message-ID: <86323243-22D5-4976-B2A6-7182F4016C9F@gmail.com>


Le 2 mars 2013 à 15:33, Laurens Van Houtven <_ at lvh.cc> a écrit :

> I'm guessing that this is another question that will be solved as soon as I see the code (perhaps you should put all your code up somewhere); but all I do know is that all Deferreds buy you is an abstraction for organizing callbacks; it's not a dispatch mechanism (and if you're using it as one now, you do have dispatch logic, it just lives somewhere else).

The dispatch is done in the pcapDataReceived method (in the ServerFactory) thanks to the dictionary of deferred (using the line id as key).
And each line is associated to a server on a specific port.
It's maybe a bit strange, but does what I want.

Here is the code if you are interested: http://pastebin.com/VeQgQ85z
Unfortunately, I can't give any data to test it (I only have live data that I don't think I can share)...


> 
> 
> On Sat, Mar 2, 2013 at 3:25 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:
> 
> Le 2 mars 2013 à 14:53, Laurens Van Houtven <_ at lvh.cc> a écrit :
> 
>> Ah, but that too appears to be missing in the original code ;-)
>> 
>> The stuff you're doing with deferreds there seems a bit strange. In your example, why not just call sendMessage when you get the packet?
> 
> If I had only one server yes.
> But the thing is I have to send the message to a different server depending on the line id.
> That was my initial problem.
> I don't see how I could call the sendMessage method corresponding to a specific server directly.
> Or?
> 
>> 
>> 
>> On Sat, Mar 2, 2013 at 2:28 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:
>> 
>> Le 2 mars 2013 à 10:08, Laurens Van Houtven <_ at lvh.cc> a écrit :
>> 
>>> Yes, that looks okay, but that wasn't in your original sample ;-)
>>> 
>>> 
>> 
>> Yep, sorry about that.
>> I was more focused on the ServerFactory and Protocol.
>> The pcap in a thread comes from the link I mentioned in my first post: http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/
>> But I know, it's better to put everything in one post. People shouldn't have to click links.
>> 
>>> I'm on my phone at the moment which isn't great for code review, but it looks like you only fire one deferred per line?
>>> 
>>> 
>> 
>> There is a specific deferred by line.
>> I re-arm it in the messageToSend method (that wasn't in the sample either).
>> In the Oldimon class, I have:
>> 
>>     def messageToSend(self, message):
>>         self.sendMessage(message)
>>         # Re-arm the deferred
>>         self.factory.deferred[self.line] = defer.Deferred()
>>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>> 
>> 
>>> On Mar 2, 2013 9:50 AM, "Benjamin BERTRAND" <beenje at gmail.com> wrote:
>>> 
>>> Le 2 mars 2013 à 04:34, exarkun at twistedmatrix.com a écrit :
>>> 
>>> > On 1 Mar, 09:52 pm, beenje at gmail.com wrote:
>>> >> Thanks for the answer!
>>> >>
>>> >> I was hoping to avoid having to put something like AMP in place,
>>> >> because it looked a bit overkill for my case.
>>> >> I think I actually found a way :-)
>>> >
>>> > Unfortunately, it looks like the code that you shared will only work
>>> > accidentally (if at all).  You cannot use Twisted APIs except in the
>>> > reactor thread.  You will at least need to add in some code to send data
>>> > back to the reactor thread before you use Twisted APIs (such as
>>> > `Deferred.callback`).
>>> 
>>> 
>>> In run_pcap, I call reactor.callFromThread(callback, x25_data, line_id). See below.
>>> That seems to work with the tests I did.
>>> Am I missing something?
>>> 
>>> /Benjamin
>>> 
>>> def run_pcap(device, pcap_filter, callback):
>>> 
>>>     def analyse_packet(hdr, data):
>>>         # check the data
>>>         reactor.callFromThread(callback, x25_data, line_id)
>>> 
>>>     p = pcapy.open_live(device, 65535, 1, 100)
>>>     p.setfilter(pcap_filter)
>>>     p.loop(-1, analyse_packet)
>>> 
>>> 
>>> class Oldimon(Protocol):
>>> 
>>>     def __init__(self, factory):
>>>         self.factory = factory
>>>         self.line = None
>>> 
>>>     def connectionMade(self):
>>>         # Check the server port to get the line
>>>         # associated to this protocol
>>>         port = self.transport.getHost().port
>>>         self.line = LINES_PORT[port]
>>>         # Add the callback for this line
>>>         self.factory.deferred[self.line] = defer.Deferred()
>>>         self.factory.deferred[self.line].addCallback(self.messageToSend)
>>> 
>>> 
>>> class OldimonFactory(ServerFactory):
>>> 
>>>     def __init__(self, device, pcap_filter):
>>>         # pcapDataReceived callback is called everytime a message
>>>         # is received
>>>         reactor.callInThread(run_pcap, device, pcap_filter, self.pcapDataReceived)
>>>         # Dict with a deferred for each line
>>>         self.deferred = dict(zip(LINES_PORT.values(), [None] * len(LINES_PORT)))
>>> 
>>>     def buildProtocol(self, addr):
>>>         return Oldimon(self)
>>> 
>>>     def pcapDataReceived(self, data, line):
>>>         if self.deferred[line] is not None:
>>>             # Fire the callback for line
>>>             d, self.deferred[line] = self.deferred[line], None
>>>             d.callback(data)
>>> 
>>> oldimon_factory = OldimonFactory(device, pcap_filter)
>>> for port in LINES_PORT.keys():
>>>     reactor.listenTCP(port, oldimon_factory)
>>> reactor.run()
>>> 
>>> 
>>> >
>>> > Jean-Paul
>>> >
>>> > _______________________________________________
>>> > Twisted-Python mailing list
>>> > Twisted-Python at twistedmatrix.com
>>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>> 
>>> 
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
>> 
>> 
>> -- 
>> cheers
>> lvh
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> 
> -- 
> cheers
> lvh
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130302/013c4f74/attachment.html>

From mithrandi at mithrandi.net  Sat Mar  2 08:24:08 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 2 Mar 2013 17:24:08 +0200
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <513202C8.6070400@imperial.ac.uk>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
Message-ID: <CAMcKhMQOSiDsqa5nRZrR41NYCzm1mbPsccC6S2-Cs49zbYP+9Q@mail.gmail.com>

On Sat, Mar 2, 2013 at 3:46 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> AMP would be somewhat more attractive (to me) if it were possible to run
> with the IDL just on the "server" (i.e. callee); this would achieve the
> goal of protocol-level sanity checking, without the cost of having to
> distribute the IDL to the clients. Presumably it would be possible to
> implement this now - have an AMP discovery command that dynamically
> builds the client-side IDLs. But there's no incentive for me to do that.

I don't really understand how this is any easier with PB than with
AMP, though. With AMP, you "just" need the same command definitions on
both sides. With PB, you need the exact same Python code versions for
every class you are sending over the wire; if achieving this is not a
problem, then why is it problematic to get the same AMP command
definitions on both sides?

> You don't need to do a TCP handshake for every request in any of those
> protocols either. Long-lived TCP/HTTP sessions are quite common, though
> not universal.

You don't quite have to do a TCP handshake for every request you want
to send over an HTTP channel, but there are still some problems.
Connection keep-alive means you can send another request after you
have received a response, without reconnecting; pipelining means you
can send another request right away, but you still won't get the
response until after you receive the first response. In addition,
there are various error handling situations where you are basically
forced to close the connection and open a new one. By contrast, an AMP
connection can have any number of AMP request/response exchanges in
flight at one time, in either direction; the closest thing to this in
HTTP-land is SPDY's connection multiplexing, but that's still
asymmetric (client makes requests to the server, server cannot make
requests to the client, so you need to do some kind of long polling /
inversion of control to simulate this).
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From p.mayers at imperial.ac.uk  Sat Mar  2 09:36:15 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 02 Mar 2013 16:36:15 +0000
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CAMcKhMQOSiDsqa5nRZrR41NYCzm1mbPsccC6S2-Cs49zbYP+9Q@mail.gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
	<CAMcKhMQOSiDsqa5nRZrR41NYCzm1mbPsccC6S2-Cs49zbYP+9Q@mail.gmail.com>
Message-ID: <51322A7F.5010102@imperial.ac.uk>

On 03/02/2013 03:24 PM, Tristan Seligmann wrote:

> I don't really understand how this is any easier with PB than with
> AMP, though. With AMP, you "just" need the same command definitions on
> both sides. With PB, you need the exact same Python code versions for
> every class you are sending over the wire;

I don't use PB like that. I only ever send simple data structures made 
of builtin types (int, str, list, dict).

> You don't quite have to do a TCP handshake for every request you want
> to send over an HTTP channel, but there are still some problems.

You're not telling me anything I don't already know.

My point is that, for the use-cases *I* have, those limitations have not 
proven to be a problem, so the effort

> asymmetric (client makes requests to the server, server cannot make
> requests to the client, so you need to do some kind of long polling /
> inversion of control to simulate this).

Yes.



From p.mayers at imperial.ac.uk  Sat Mar  2 09:39:07 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 02 Mar 2013 16:39:07 +0000
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <51322A7F.5010102@imperial.ac.uk>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
	<CAMcKhMQOSiDsqa5nRZrR41NYCzm1mbPsccC6S2-Cs49zbYP+9Q@mail.gmail.com>
	<51322A7F.5010102@imperial.ac.uk>
Message-ID: <51322B2B.2010802@imperial.ac.uk>

On 03/02/2013 04:36 PM, Phil Mayers wrote:

> My point is that, for the use-cases *I* have, those limitations have not
> proven to be a problem, so the effort

Sorry, should have been:

...so the effort of deploying a protocol which avoids those limitations 
is not warranted.



From mithrandi at mithrandi.net  Sat Mar  2 10:25:32 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 2 Mar 2013 19:25:32 +0200
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <51322A7F.5010102@imperial.ac.uk>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
	<CAMcKhMQOSiDsqa5nRZrR41NYCzm1mbPsccC6S2-Cs49zbYP+9Q@mail.gmail.com>
	<51322A7F.5010102@imperial.ac.uk>
Message-ID: <CAMcKhMRDhoxr29uJSAk1YFRtSCkZMt3jfu=T7xfByc4SAEWcQw@mail.gmail.com>

On Sat, Mar 2, 2013 at 6:36 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 03/02/2013 03:24 PM, Tristan Seligmann wrote:
>
>> I don't really understand how this is any easier with PB than with
>> AMP, though. With AMP, you "just" need the same command definitions on
>> both sides. With PB, you need the exact same Python code versions for
>> every class you are sending over the wire;
>
> I don't use PB like that. I only ever send simple data structures made
> of builtin types (int, str, list, dict).

Interesting; I guess that's obvious in retrospect but I hadn't thought
of using PB like that, and I suppose it's not possible to use AMP like
that.

>> You don't quite have to do a TCP handshake for every request you want
>> to send over an HTTP channel, but there are still some problems.
>
> You're not telling me anything I don't already know.
>
> My point is that, for the use-cases *I* have, those limitations have not
> proven to be a problem, so the effort of deploying a protocol which avoids
> those limitations is not warranted.

Sure, I didn't mean to imply otherwise, just wanted to clarify for the
purposes of the discussion. It sounds like your analysis is sound for
the use cases you're concerned with, I don't have any objection to
that.
--
mithrandi, i Ainil en-Balandor, a faer Ambar



From tom.prince at ualberta.net  Sat Mar  2 11:12:43 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 02 Mar 2013 11:12:43 -0700
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <86323243-22D5-4976-B2A6-7182F4016C9F@gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
	<CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
	<4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>
	<CAE_Hg6YWHzJQC6Rp5JE+iV-LEbufrwG3XMsg0JJBGd-pMQ0kgQ@mail.gmail.com>
	<4A456C6A-558E-4F4C-AFBC-F51349BDA864@gmail.com>
	<CAE_Hg6ZkRvU8ra14hpq=h5w_j+pHs6r8HiecqrgkaYLzB0iTaA@mail.gmail.com>
	<86323243-22D5-4976-B2A6-7182F4016C9F@gmail.com>
Message-ID: <874ngtvffo.fsf@hermes.hocat.ca>

Benjamin BERTRAND <beenje at gmail.com> writes:

> Le 2 mars 2013 à 15:33, Laurens Van Houtven <_ at lvh.cc> a écrit :
>
>> I'm guessing that this is another question that will be solved as
>> soon as I see the code (perhaps you should put all your code up
>> somewhere); but all I do know is that all Deferreds buy you is an
>> abstraction for organizing callbacks; it's not a dispatch mechanism
>> (and if you're using it as one now, you do have dispatch logic, it
>> just lives somewhere else).
>
> The dispatch is done in the pcapDataReceived method (in the
> ServerFactory) thanks to the dictionary of deferred (using the line id
> as key).  And each line is associated to a server on a specific port.

Instead sticking a deferred in that dictionary, you could just stick the
`Oldimon` protocol instance, or the bound method (i.e. `self.sendMessage`)
in that dictionary. In which case `messageToSend` becomes obsolete,
since you don't need to rearm it each time.

  Tom



From glyph at twistedmatrix.com  Sat Mar  2 12:58:58 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 2 Mar 2013 11:58:58 -0800
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <513202C8.6070400@imperial.ac.uk>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
Message-ID: <0C17FEDD-0B88-45C8-9BDA-41F3ED8846B2@twistedmatrix.com>


On Mar 2, 2013, at 5:46 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> You seemed curious why someone wouldn't use AMP. Personally I have two 
> common use-cases:
> 
>  1. Communicating between two trusted Twisted processes, for which PB 
> is good enough.

There are two reasons that someone might want to consider AMP in this case.  I am not necessarily saying you would want to consider AMP here - you seem to be pretty happy with your decision and I'm not saying it's wrong.  I even gave some reasons why PB would be a better idea sometimes.

One is that it makes it a bit easier to replace one end of the wire with something that isn't Twisted - or at least, preserve the plausible deniability that you might, which can make it more politically palatable to deploy Twisted in the first place :).  Granted, "use PyPy" is increasingly a better argument for the sorts of people who would want this assurance - performance nuts - than "you could re-implement in another language later".  Still, if there are other reasons, or you are in an environment where another language is popular, while PB implementations for other languages do exist, and I have deployed polyglot PB clusters, it adds a surprising dimension of additional complexity.  Deploying a polyglot AMP system is a breeze, even if you have to implement AMP from scratch for the other language in order to do it ;).

Another reason is that it makes versioning the protocol easier.  With PB, it's very easy to build a protocol that mirrors your application's internal state, and expose implementation details accidentally, which then have to be painstakingly emulated when you roll out a new version.  This isn't much of a concern if your protocol is pretty stable, and/or your application upgrades are synchronized.

Like you said though: writing up all those message format declarations is not zero-cost.  It's certainly much quicker to get a basic PB cluster up and running since you can just toss a couple of remote_ declarations in and be off to the races.

There is a good reason Twisted still ships both and we have no plans to ever get rid of PB :).

>  2. Communicating with a semi-trusted third party process, for which a 
> RESTful interface or XML/JSON RPCs are *available* and sufficiently 
> secure and capable for my needs.

For this one, obviously, XML or JSON-RPC is the right choice.  I mean, heck, 90% of Twisted is implementations of messy, arguably bad protocols (IMAP?  POP?  **FTP?**) which you probably shouldn't use, except you have to because you want to talk to a system that uses them :).

> Obviously other people will have radically different needs, but for me, 
> AMP adds little.

Sure.  It might not be for everybody.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130302/c44b3f47/attachment.html>

From _ at lvh.cc  Sat Mar  2 13:34:23 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 2 Mar 2013 21:34:23 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <0C17FEDD-0B88-45C8-9BDA-41F3ED8846B2@twistedmatrix.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
	<0C17FEDD-0B88-45C8-9BDA-41F3ED8846B2@twistedmatrix.com>
Message-ID: <CAE_Hg6aPEXLU=nfKyXWcTcSXjpjWW_gz-5iAQnsaFn6nT2S7dA@mail.gmail.com>

Hey Glyph,

As usual, I agree with most of what you have to say, but...

On Sat, Mar 2, 2013 at 8:58 PM, Glyph <glyph at twistedmatrix.com> wrote:

> Deploying a polyglot AMP system is a breeze, even if you have to implement
> AMP from scratch for the other language in order to do it ;).
>

Could you help me write an AMP implementation in Javascript? It's easy,
right? ;-)


> -glyph
>

-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130302/7f53c0a9/attachment.html>

From beenje at gmail.com  Sat Mar  2 13:58:14 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sat, 2 Mar 2013 21:58:14 +0100
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <874ngtvffo.fsf@hermes.hocat.ca>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<20130302033454.11119.1640597565.divmod.xquotient.3@localhost6.localdomain6>
	<0CDB180A-A7B0-43B8-BC58-76485AEF14B9@gmail.com>
	<CAE_Hg6a4XD3yZ0TnZqPZVTn0bc8zuAMBg7RWq6uG6U6scwCxJA@mail.gmail.com>
	<4CF3AC3F-F58E-4C25-B767-5A63ADBC7C5D@gmail.com>
	<CAE_Hg6YWHzJQC6Rp5JE+iV-LEbufrwG3XMsg0JJBGd-pMQ0kgQ@mail.gmail.com>
	<4A456C6A-558E-4F4C-AFBC-F51349BDA864@gmail.com>
	<CAE_Hg6ZkRvU8ra14hpq=h5w_j+pHs6r8HiecqrgkaYLzB0iTaA@mail.gmail.com>
	<86323243-22D5-4976-B2A6-7182F4016C9F@gmail.com>
	<874ngtvffo.fsf@hermes.hocat.ca>
Message-ID: <1991760E-D3BC-4C92-8D09-955B2C5CDE52@gmail.com>


Le 2 mars 2013 à 19:12, Tom Prince <tom.prince at ualberta.net> a écrit :

> Benjamin BERTRAND <beenje at gmail.com> writes:
> 
>> Le 2 mars 2013 à 15:33, Laurens Van Houtven <_ at lvh.cc> a écrit :
>> 
>>> I'm guessing that this is another question that will be solved as
>>> soon as I see the code (perhaps you should put all your code up
>>> somewhere); but all I do know is that all Deferreds buy you is an
>>> abstraction for organizing callbacks; it's not a dispatch mechanism
>>> (and if you're using it as one now, you do have dispatch logic, it
>>> just lives somewhere else).
>> 
>> The dispatch is done in the pcapDataReceived method (in the
>> ServerFactory) thanks to the dictionary of deferred (using the line id
>> as key).  And each line is associated to a server on a specific port.
> 
> Instead sticking a deferred in that dictionary, you could just stick the
> `Oldimon` protocol instance, or the bound method (i.e. `self.sendMessage`)
> in that dictionary. In which case `messageToSend` becomes obsolete,
> since you don't need to rearm it each time.


Good point!
I guess I should try to think more "Python" before trying to think "Twisted" :-)

Thanks

Benjamin


> 
>  Tom




From glyph at twistedmatrix.com  Sat Mar  2 14:58:48 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 2 Mar 2013 13:58:48 -0800
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CAE_Hg6aPEXLU=nfKyXWcTcSXjpjWW_gz-5iAQnsaFn6nT2S7dA@mail.gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
	<0C17FEDD-0B88-45C8-9BDA-41F3ED8846B2@twistedmatrix.com>
	<CAE_Hg6aPEXLU=nfKyXWcTcSXjpjWW_gz-5iAQnsaFn6nT2S7dA@mail.gmail.com>
Message-ID: <3DF4B8F4-EFC2-41AC-8FFC-12CA5C78D012@twistedmatrix.com>


On Mar 2, 2013, at 12:34 PM, Laurens Van Houtven <_ at lvh.cc> wrote:

> Hey Glyph,
> 
> As usual, I agree with most of what you have to say, but...
> 
> On Sat, Mar 2, 2013 at 8:58 PM, Glyph <glyph at twistedmatrix.com> wrote:
> Deploying a polyglot AMP system is a breeze, even if you have to implement AMP from scratch for the other language in order to do it ;).
> 
> Could you help me write an AMP implementation in Javascript? It's easy, right? ;-)

No, not me.

But somebody can: <https://github.com/cyli/node-amp>.

-glyph



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130302/e8d8e036/attachment.html>

From mithrandi at mithrandi.net  Sat Mar  2 15:06:00 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 3 Mar 2013 00:06:00 +0200
Subject: [Twisted-Python] How to dispatch message to different servers
In-Reply-To: <CAE_Hg6aPEXLU=nfKyXWcTcSXjpjWW_gz-5iAQnsaFn6nT2S7dA@mail.gmail.com>
References: <5B16AFF7-C2F0-4449-B8E4-2927C25705E5@gmail.com>
	<CAE_Hg6YK=PO2wvAjAFk5EoNJAWe9Pxk8W4SVqkA+qPB=cXrQwA@mail.gmail.com>
	<950564ED-CB75-4C4C-858F-300F5EC5C250@gmail.com>
	<FDF55E0F-6934-40EB-8579-F9CA4B1C8FF9@twistedmatrix.com>
	<5131E1B0.5090207@imperial.ac.uk>
	<CFC64E21-CAE2-4CD3-9560-EE4FCE0843DF@twistedmatrix.com>
	<513202C8.6070400@imperial.ac.uk>
	<0C17FEDD-0B88-45C8-9BDA-41F3ED8846B2@twistedmatrix.com>
	<CAE_Hg6aPEXLU=nfKyXWcTcSXjpjWW_gz-5iAQnsaFn6nT2S7dA@mail.gmail.com>
Message-ID: <CAMcKhMRCpLwFzONHsOSkgEf7ej0m6wHoOZRzrEYjda_JW+1_iA@mail.gmail.com>

On Sat, Mar 2, 2013 at 10:34 PM, Laurens Van Houtven <_ at lvh.cc> wrote:
> Could you help me write an AMP implementation in Javascript? It's easy,
> right? ;-)

It can't be harder than writing a PB implementation in JavaScript ;)
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From exarkun at twistedmatrix.com  Sat Mar  2 22:05:31 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 03 Mar 2013 05:05:31 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1362287131.47.1539899163@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130303/0a717679/attachment.html>

From matusis at yahoo.com  Sat Mar  2 22:21:57 2013
From: matusis at yahoo.com (Alec Matusis)
Date: Sat, 2 Mar 2013 21:21:57 -0800
Subject: [Twisted-Python] Epoll error after upgrading from 10.0 to 12.3
Message-ID: <069d01ce17cf$070377e0$150a67a0$@com>

I had 60 busy tcp servers that ran on Python 2.6/Twisted 10.0 (or Twisted
9.0) for over two years with not problems. After I upgraded to Twisted
12.3/Python 2.7, I started getting the errors below (no application code
changes). It took about two days for the first error to appear on a busy
server under heavy load:

[twisted.internet.protocol.ServerFactory] Unhandled Error
        Traceback (most recent call last):
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/python/lo
g.py", line 73, in callWithCon
text
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/python/co
ntext.py", line 118, in callWi
thContext
            return self.currentContext().callWithContext(ctx, func, *args,
**kw)
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/python/co
ntext.py", line 81, in callWit
hContext
            return func(*args,**kw)
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
posixbase.py", line 614, in _d
oReadOrWrite
            why = selectable.doRead()
        --- <exception caught here> ---
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
tcp.py", line 1069, in doRead
            transport = self.transport(skt, protocol, addr, self, s,
self.reactor)
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
tcp.py", line 786, in __init__
            self.startReading()
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
abstract.py", line 429, in sta
rtReading
            self.reactor.addReader(self)
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
epollreactor.py", line 256, in
 addReader
            _epoll.EPOLLIN, _epoll.EPOLLOUT)
          File
"/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
epollreactor.py", line 240, in
 _add
            self._poller.modify(fd, flags)
        exceptions.IOError: [Errno 2] No such file or directory


After the error occurs, the server usually locks up and does not accept new
connections. One server self-recovered after these errors after 30min
outage, and started accepting new connections.
Apparently I am not the ony one who has enountered this:
http://stackoverflow.com/questions/12600137/twisted-internet-epollreactor-py
-line-238-in-add

Is there a patch available, or should I roll back to 10.0.0?





From exarkun at twistedmatrix.com  Sat Mar  2 23:06:15 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 03 Mar 2013 06:06:15 -0000
Subject: [Twisted-Python] Epoll error after upgrading from 10.0 to 12.3
In-Reply-To: <069d01ce17cf$070377e0$150a67a0$@com>
References: <069d01ce17cf$070377e0$150a67a0$@com>
Message-ID: <20130303060615.30763.246833639.divmod.xquotient.3@localhost6.localdomain6>

On 05:21 am, matusis at yahoo.com wrote:
>I had 60 busy tcp servers that ran on Python 2.6/Twisted 10.0 (or 
>Twisted
>9.0) for over two years with not problems. After I upgraded to Twisted
>12.3/Python 2.7, I started getting the errors below (no application 
>code
>changes). It took about two days for the first error to appear on a 
>busy
>server under heavy load:
>
>[snip]
>
>After the error occurs, the server usually locks up and does not accept 
>new
>connections. One server self-recovered after these errors after 30min
>outage, and started accepting new connections.
>Apparently I am not the ony one who has enountered this:
>http://stackoverflow.com/questions/12600137/twisted-internet- 
>epollreactor-py
>-line-238-in-add
>
>Is there a patch available, or should I roll back to 10.0.0?

Doesn't look familiar to me.  You should search the bug tracker.  If 
there is a patch (or an svn branch), that's where you'll find it.  If 
you don't find a ticket for the bug, you should report it.  Please be 
sure to include enough information to reproduce the issue if you file a 
new ticket (or as much information as you have, at least).

Jean-Paul



From dynamicgl at gmail.com  Sat Mar  2 23:10:51 2013
From: dynamicgl at gmail.com (Gelin Yan)
Date: Sun, 3 Mar 2013 14:10:51 +0800
Subject: [Twisted-Python] Epoll error after upgrading from 10.0 to 12.3
In-Reply-To: <069d01ce17cf$070377e0$150a67a0$@com>
References: <069d01ce17cf$070377e0$150a67a0$@com>
Message-ID: <CABkOF6RZjnP5wbaYfCApMHrJbfmioQtJs3sbPv5qt1_uJ9Kw4w@mail.gmail.com>

On Sun, Mar 3, 2013 at 1:21 PM, Alec Matusis <matusis at yahoo.com> wrote:

> I had 60 busy tcp servers that ran on Python 2.6/Twisted 10.0 (or Twisted
> 9.0) for over two years with not problems. After I upgraded to Twisted
> 12.3/Python 2.7, I started getting the errors below (no application code
> changes). It took about two days for the first error to appear on a busy
> server under heavy load:
>
> [twisted.internet.protocol.ServerFactory] Unhandled Error
>         Traceback (most recent call last):
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/python/lo
> g.py", line 73, in callWithCon
> text
>             return context.call({ILogContext: newCtx}, func, *args, **kw)
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/python/co
> ntext.py", line 118, in callWi
> thContext
>             return self.currentContext().callWithContext(ctx, func, *args,
> **kw)
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/python/co
> ntext.py", line 81, in callWit
> hContext
>             return func(*args,**kw)
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
> posixbase.py", line 614, in _d
> oReadOrWrite
>             why = selectable.doRead()
>         --- <exception caught here> ---
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
> tcp.py", line 1069, in doRead
>             transport = self.transport(skt, protocol, addr, self, s,
> self.reactor)
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
> tcp.py", line 786, in __init__
>             self.startReading()
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
> abstract.py", line 429, in sta
> rtReading
>             self.reactor.addReader(self)
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
> epollreactor.py", line 256, in
>  addReader
>             _epoll.EPOLLIN, _epoll.EPOLLOUT)
>           File
>
> "/usr/local/encap/Python-2.7.3/lib/python2.7/site-packages/twisted/internet/
> epollreactor.py", line 240, in
>  _add
>             self._poller.modify(fd, flags)
>         exceptions.IOError: [Errno 2] No such file or directory
>
>
> After the error occurs, the server usually locks up and does not accept new
> connections. One server self-recovered after these errors after 30min
> outage, and started accepting new connections.
> Apparently I am not the ony one who has enountered this:
>
> http://stackoverflow.com/questions/12600137/twisted-internet-epollreactor-py
> -line-238-in-add
>
> Is there a patch available, or should I roll back to 10.0.0?
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

Hi All

   I remembered twisted started using python own select.epoll instead of
its own implementation after dropping support for python 2.5. Is it the
reason? A few days ago, there was a post asking a similar question.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130303/b02960c9/attachment-0001.html>

From akersof at gmail.com  Sun Mar  3 00:52:59 2013
From: akersof at gmail.com (Sofiane Akermoun)
Date: Sun, 3 Mar 2013 08:52:59 +0100
Subject: [Twisted-Python] Error in documentation
Message-ID: <CAN0_x-J1i-F5HrotYhyXntD=U1_totvqFGaGG_dbe31zhZZmfg@mail.gmail.com>

Hello,

It is probably cheap but i came across wrong thing in your official
doc in the part :

http://twistedmatrix.com/documents/current/core/howto/tutorial/library.html

Here we learn how to separate the application code that launches a
finger service from the library code which defines the finger service.

The problem is in the "Easy Configuration" Part.
Between line 7 and line 8 it misses the code f.setServiceParent(s)
Without it the the instantiated object from class
FingerService(service.Service) will be never collected by the service
collection and the startService function in class
FingerService(service.Service) will be never called. (this function is
import it is where we initiate the looping reading of "/etc/users")

There is also an other error at the end of this tutorial it is wrote
"% twisted -ny simple-finger.tac" instead of "%twistd -ny
simple-finger.tac".

regards,

-- 
Sofiane Akermoun
akersof at gmail.com



From saurabh.mahindre at gmail.com  Sun Mar  3 05:26:23 2013
From: saurabh.mahindre at gmail.com (Saurabh Mahindre)
Date: Sun, 3 Mar 2013 17:56:23 +0530
Subject: [Twisted-Python] Need help regarding Gsoc 2013
Message-ID: <CANj+b3P9ceUA=O+fNSHaT5qx6yHRjKDJ4rg6BFAqFAK6WQQ7YQ@mail.gmail.com>

Glyph wrote:

>Would you be interested in implementing this with multiple toolkits (GTK, whatever the best thing is for Windows, and Cocoa, perhaps)?



I have had some experience with Qt Framework, Pyside in particular .It
integrates with QtReactor .It is also multiplatform.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130303/d5516f8c/attachment.html>

From jessica.mckellar at gmail.com  Sun Mar  3 07:09:43 2013
From: jessica.mckellar at gmail.com (Jessica McKellar)
Date: Sun, 3 Mar 2013 09:09:43 -0500
Subject: [Twisted-Python] Error in documentation
In-Reply-To: <CAN0_x-J1i-F5HrotYhyXntD=U1_totvqFGaGG_dbe31zhZZmfg@mail.gmail.com>
References: <CAN0_x-J1i-F5HrotYhyXntD=U1_totvqFGaGG_dbe31zhZZmfg@mail.gmail.com>
Message-ID: <CAKDZRcg=WqFBCDPyc=mVmuzBD7V=ubTQ6KkiH1gzR6-T=vcUZg@mail.gmail.com>

Hi Sofiane,

> It is probably cheap but i came across wrong thing in your official
> doc in the part :

Thanks for the bug reports!

Can I interest you in opening Trac tickets for each of these? :)

To do that:

1. Create a Trac account at http://twistedmatrix.com/trac/register
2. Create a new ticket for each issue at
https://twistedmatrix.com/trac/newticket

Have you submitted patches to Twisted before? These would be great
first bugs to fix, if you're interested!
https://twistedmatrix.com/trac/wiki/TwistedDevelopment describes how
to get started, and if you have more questions a great place to get
help is in #twisted on the Freenode IRC network:
https://twistedmatrix.com/trac/wiki/TwistedCommunity#Real-TimeChat.

Regards,
-Jessica



From glyph at twistedmatrix.com  Sun Mar  3 18:09:56 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 3 Mar 2013 17:09:56 -0800
Subject: [Twisted-Python] spam comments on valid tickets
Message-ID: <1B70B303-607B-40CF-884B-D31BE4134832@twistedmatrix.com>

A minor administrative issue:

We have a nice "delete ticket" interface for trac admins to delete tickets that are filed as spam.  but, there are some ticket *comments* that are spam, such as on:

<http://tm.tl/2424>
<http://tm.tl/4173>
<http://tm.tl/5697>

Do any of our trac admins know how to delete the comments, and attachments, within these otherwise valid conversations?

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130303/0e76f831/attachment-0001.html>

From itamar at itamarst.org  Sun Mar  3 18:22:54 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 03 Mar 2013 20:22:54 -0500
Subject: [Twisted-Python] spam comments on valid tickets
In-Reply-To: <1B70B303-607B-40CF-884B-D31BE4134832@twistedmatrix.com>
References: <1B70B303-607B-40CF-884B-D31BE4134832@twistedmatrix.com>
Message-ID: <5133F76E.3090806@itamarst.org>

On 03/03/2013 08:09 PM, Glyph wrote:
> A minor administrative issue:
>
> We have a nice "delete ticket" interface for trac admins to delete 
> tickets that are filed as spam.  but, there are some ticket *comments* 
> that are spam, such as on:
>
>     <http://tm.tl/2424>
>     <http://tm.tl/4173>
>     <http://tm.tl/5697>
>
>
> Do any of our trac admins know how to delete the comments, and 
> attachments, within these otherwise valid conversations?
>
https://twistedmatrix.com/trac/admin/ticket/comments

Unfortunately this results in a trac error...



From matusis at yahoo.com  Sun Mar  3 19:00:18 2013
From: matusis at yahoo.com (Alec Matusis)
Date: Sun, 3 Mar 2013 18:00:18 -0800
Subject: [Twisted-Python] Epoll error after upgrading from 10.0 to 12.3
In-Reply-To: <20130303060615.30763.246833639.divmod.xquotient.3@localhost6.localdomain6>
References: <069d01ce17cf$070377e0$150a67a0$@com>
	<20130303060615.30763.246833639.divmod.xquotient.3@localhost6.localdomain6>
Message-ID: <08bd01ce187c$05e9e8f0$11bdbad0$@com>

> If you don't find a ticket for the bug, you should report it.  Please be
sure to include enough information to reproduce the issue if you file a new
ticket (or as much information as you have, at least).

> Jean-Paul

I filed http://twistedmatrix.com/trac/ticket/6346

It's hard to do any detailed analysis on a live production system, so I do
not know how to reliably reproduce it, except that it spontaneously happened
on two more additional servers last night. strace looks more or less the
same as on a normal server, but given the volume each server has 100s
connections per second) it's hard to parse strace output. I now believe that
after the first error occurs the server remains overall functional and still
accepts new connections, but a growing number of existing connections
becomes affected, and the logs become flooded with this error.

Since this is a production system I have to revert to 10.0.0 now.  


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
exarkun at twistedmatrix.com
Sent: Saturday, March 02, 2013 10:06 PM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] Epoll error after upgrading from 10.0 to 12.3

On 05:21 am, matusis at yahoo.com wrote:
>I had 60 busy tcp servers that ran on Python 2.6/Twisted 10.0 (or 
>Twisted
>9.0) for over two years with not problems. After I upgraded to Twisted 
>12.3/Python 2.7, I started getting the errors below (no application 
>code changes). It took about two days for the first error to appear on 
>a busy server under heavy load:
>
>[snip]
>
>After the error occurs, the server usually locks up and does not accept 
>new connections. One server self-recovered after these errors after 
>30min outage, and started accepting new connections.
>Apparently I am not the ony one who has enountered this:
>http://stackoverflow.com/questions/12600137/twisted-internet-
>epollreactor-py
>-line-238-in-add
>
>Is there a patch available, or should I roll back to 10.0.0?

Doesn't look familiar to me.  You should search the bug tracker.  If there
is a patch (or an svn branch), that's where you'll find it.  If you don't
find a ticket for the bug, you should report it.  Please be sure to include
enough information to reproduce the issue if you file a new ticket (or as
much information as you have, at least).

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From exarkun at twistedmatrix.com  Sun Mar  3 19:37:29 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 04 Mar 2013 02:37:29 -0000
Subject: [Twisted-Python] Epoll error after upgrading from 10.0 to 12.3
In-Reply-To: <08bd01ce187c$05e9e8f0$11bdbad0$@com>
References: <069d01ce17cf$070377e0$150a67a0$@com>
	<20130303060615.30763.246833639.divmod.xquotient.3@localhost6.localdomain6>
	<08bd01ce187c$05e9e8f0$11bdbad0$@com>
Message-ID: <20130304023729.32396.87215867.divmod.xquotient.2@localhost6.localdomain6>

On 02:00 am, matusis at yahoo.com wrote:
>>If you don't find a ticket for the bug, you should report it.  Please 
>>be
>sure to include enough information to reproduce the issue if you file a 
>new
>ticket (or as much information as you have, at least).
>>Jean-Paul
>
>I filed http://twistedmatrix.com/trac/ticket/6346
>
>It's hard to do any detailed analysis on a live production system, so I 
>do
>not know how to reliably reproduce it, except that it spontaneously 
>happened
>on two more additional servers last night. strace looks more or less 
>the
>same as on a normal server, but given the volume each server has 100s
>connections per second) it's hard to parse strace output. I now believe 
>that
>after the first error occurs the server remains overall functional and 
>still
>accepts new connections, but a growing number of existing connections
>becomes affected, and the logs become flooded with this error.
>
>Since this is a production system I have to revert to 10.0.0 now.

Do you have or can you set up any kind of staging system and run a 
synthetic load against it?

Jean-Paul



From _ at lvh.cc  Mon Mar  4 08:34:54 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Mon, 4 Mar 2013 16:34:54 +0100
Subject: [Twisted-Python] How do I write AMP Command definitions TTD-edly?
Message-ID: <CAE_Hg6bOAshXfRp4nfeyZs_U9CuWHrHDBL_0ufTkLztYxx1uiQ@mail.gmail.com>

Hi,


I have no issue writing AMP responders TTD-edly, they work pretty much the
way any other code would. However, I did notice that the only way I'd
notice if my Command definitions themselves were broken were if my
functional tests start failing.

It would be nice if I could write unit test driven Command specifications,
as well.

The quickest I could come up with was to call makeArguments/makeResponse
with a few known-good/known-bad dictionaries, and see if it blows up. Is
there a smarter way to do it?

-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130304/d576f986/attachment.html>

From exarkun at twistedmatrix.com  Mon Mar  4 09:17:44 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 04 Mar 2013 16:17:44 -0000
Subject: [Twisted-Python] How do I write AMP Command definitions
	TTD-edly?
In-Reply-To: <CAE_Hg6bOAshXfRp4nfeyZs_U9CuWHrHDBL_0ufTkLztYxx1uiQ@mail.gmail.com>
References: <CAE_Hg6bOAshXfRp4nfeyZs_U9CuWHrHDBL_0ufTkLztYxx1uiQ@mail.gmail.com>
Message-ID: <20130304161744.9151.828707065.divmod.xquotient.6@localhost6.localdomain6>

On 03:34 pm, _ at lvh.cc wrote:
>Hi,
>
>
>I have no issue writing AMP responders TTD-edly, they work pretty much 
>the
>way any other code would. However, I did notice that the only way I'd
>notice if my Command definitions themselves were broken were if my
>functional tests start failing.

Chris and I wrote all the AMP-using code for game TDD.  See 
game/test/test_network.py in lp:game.

Jean-Paul
>It would be nice if I could write unit test driven Command 
>specifications,
>as well.
>
>The quickest I could come up with was to call 
>makeArguments/makeResponse
>with a few known-good/known-bad dictionaries, and see if it blows up. 
>Is
>there a smarter way to do it?
>
>--
>cheers
>lvh



From glyph at twistedmatrix.com  Mon Mar  4 20:39:38 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Mar 2013 19:39:38 -0800
Subject: [Twisted-Python] Epoll error after upgrading from 10.0 to 12.3
In-Reply-To: <08bd01ce187c$05e9e8f0$11bdbad0$@com>
References: <069d01ce17cf$070377e0$150a67a0$@com>
	<20130303060615.30763.246833639.divmod.xquotient.3@localhost6.localdomain6>
	<08bd01ce187c$05e9e8f0$11bdbad0$@com>
Message-ID: <C1285BC6-AB09-4526-9E8A-138C820FF306@twistedmatrix.com>


On Mar 3, 2013, at 6:00 PM, Alec Matusis <matusis at yahoo.com> wrote:

> Since this is a production system I have to revert to 10.0.0 now.  

If you were able to attempt an upgrade to 12.3.0, would it be possible for you to upgrade more incrementally; 10.1, 10.2, 11.0, until you find the version that introduced the problem that you're having?  It would really help for us to narrow down when this showed up.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130304/bfa9670c/attachment-0001.html>

From glyph at twistedmatrix.com  Mon Mar  4 20:43:04 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Mar 2013 19:43:04 -0800
Subject: [Twisted-Python] How do I write AMP Command definitions
	TTD-edly?
In-Reply-To: <20130304161744.9151.828707065.divmod.xquotient.6@localhost6.localdomain6>
References: <CAE_Hg6bOAshXfRp4nfeyZs_U9CuWHrHDBL_0ufTkLztYxx1uiQ@mail.gmail.com>
	<20130304161744.9151.828707065.divmod.xquotient.6@localhost6.localdomain6>
Message-ID: <BE64288C-C8A7-4B3F-A798-21EB911004F0@twistedmatrix.com>


On Mar 4, 2013, at 8:17 AM, exarkun at twistedmatrix.com wrote:

> Chris and I wrote all the AMP-using code for game TDD.  See 
> game/test/test_network.py in lp:game.

(That's <http://bazaar.launchpad.net/~game-hackers/game/trunk/view/head:/game/test/test_network.py> for those of you not familiar with launchpad.)

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130304/bc735580/attachment.html>

From _ at lvh.cc  Tue Mar  5 02:46:58 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Tue, 5 Mar 2013 10:46:58 +0100
Subject: [Twisted-Python] How do I write AMP Command definitions
	TTD-edly?
In-Reply-To: <20130304161744.9151.828707065.divmod.xquotient.6@localhost6.localdomain6>
References: <CAE_Hg6bOAshXfRp4nfeyZs_U9CuWHrHDBL_0ufTkLztYxx1uiQ@mail.gmail.com>
	<20130304161744.9151.828707065.divmod.xquotient.6@localhost6.localdomain6>
Message-ID: <CAE_Hg6YYkNTgM+HkrnRbESD5EVUASWDngxEyv=EBJEO2AY5HWQ@mail.gmail.com>

That looks awesome.

I can't find a license for it. I'm publishing some third-party helpers for
twisted's amp implementation as I need them myself (presumably I'll make a
formal release announcement at the Pycon sprints). Do you mind if I copy
this code? I can't seem to find a license. (txampext is ISC-licensed, which
I assume is congruent to your sensibilities :))


On Mon, Mar 4, 2013 at 5:17 PM, <exarkun at twistedmatrix.com> wrote:

> On 03:34 pm, _ at lvh.cc wrote:
> >Hi,
> >
> >
> >I have no issue writing AMP responders TTD-edly, they work pretty much
> >the
> >way any other code would. However, I did notice that the only way I'd
> >notice if my Command definitions themselves were broken were if my
> >functional tests start failing.
>
> Chris and I wrote all the AMP-using code for game TDD.  See
> game/test/test_network.py in lp:game.
>
> Jean-Paul
> >It would be nice if I could write unit test driven Command
> >specifications,
> >as well.
> >
> >The quickest I could come up with was to call
> >makeArguments/makeResponse
> >with a few known-good/known-bad dictionaries, and see if it blows up.
> >Is
> >there a smarter way to do it?
> >
> >--
> >cheers
> >lvh
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130305/9bc91b2c/attachment.html>

From glyph at twistedmatrix.com  Tue Mar  5 12:53:00 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 5 Mar 2013 11:53:00 -0800
Subject: [Twisted-Python] regression ticket stuck
Message-ID: <3432C897-1B86-488E-B1EA-C3FA279AE6B3@twistedmatrix.com>

Does the original author, or anyone else, want to deal with the trivial review feedback on this ticket and get it to trunk?  It's blocking an important bugfix release;

<http://twistedmatrix.com/trac/ticket/6245>

-glyph


From therve at free.fr  Wed Mar  6 08:18:49 2013
From: therve at free.fr (=?ISO-8859-1?Q?Thomas_Herv=E9?=)
Date: Wed, 06 Mar 2013 16:18:49 +0100
Subject: [Twisted-Python] First pre-release of Twisted 13.0.0
Message-ID: <51375E59.3060200@free.fr>

Hello fine people of Twisted,

I've the pleasure to announce the first pre-release of Twisted 13.0.0.
This is mostly a bugfix release, but I'd like to highlight the new
"Introduction to Deferreds" document, which will hopefully help all the
Deferred-confused over the world.

Among the 70 tickets closed, we can see:

 * A fix in twisted.web.template where attributes were not quoted
properly, risking HTML injection.

 * Support for unicode domain names in twisted.names SRVConnector and
Name classes, after a 12.3 regression.

 * A workaround for platform limitations when trying to schedule events
far in the future.

You can find the tarballs of the pre-release here:
    http://twistedmatrix.com/~therve/13.0.0pre1/

For more information, see the NEWS file.

Please download the tarballs and test them!

-- 
Thomas



From jml at mumak.net  Wed Mar  6 08:28:40 2013
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 6 Mar 2013 15:28:40 +0000
Subject: [Twisted-Python] First pre-release of Twisted 13.0.0
In-Reply-To: <51375E59.3060200@free.fr>
References: <51375E59.3060200@free.fr>
Message-ID: <CAHZ8tnbugaNYba8W6KQYjj9xWpp3Ke8DbyzN-TgZ7758CquppA@mail.gmail.com>

On 6 March 2013 15:18, Thomas Hervé <therve at free.fr> wrote:

> Hello fine people of Twisted,
>
> I've the pleasure to announce the first pre-release of Twisted 13.0.0.
> This is mostly a bugfix release, but I'd like to highlight the new
> "Introduction to Deferreds" document, which will hopefully help all the
> Deferred-confused over the world.
>
>
>
You are a wonderful, wonderful person, as indeed are the folk who fixed all
those tickets. Thank you all.

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130306/0648b635/attachment-0001.html>

From exarkun at twistedmatrix.com  Wed Mar  6 08:34:47 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 06 Mar 2013 15:34:47 -0000
Subject: [Twisted-Python] How do I write AMP Command definitions
	TTD-edly?
In-Reply-To: <CAE_Hg6YYkNTgM+HkrnRbESD5EVUASWDngxEyv=EBJEO2AY5HWQ@mail.gmail.com>
References: <CAE_Hg6bOAshXfRp4nfeyZs_U9CuWHrHDBL_0ufTkLztYxx1uiQ@mail.gmail.com>
	<20130304161744.9151.828707065.divmod.xquotient.6@localhost6.localdomain6>
	<CAE_Hg6YYkNTgM+HkrnRbESD5EVUASWDngxEyv=EBJEO2AY5HWQ@mail.gmail.com>
Message-ID: <20130306153447.9151.111445364.divmod.xquotient.20@localhost6.localdomain6>

On 5 Mar, 09:46 am, _ at lvh.cc wrote:
>That looks awesome.
>
>I can't find a license for it.

The code was already MIT licensed.  It's more redundantly so, now.

Jean-Paul

I'm publishing some third-party helpers for
>twisted's amp implementation as I need them myself (presumably I'll 
>make a
>formal release announcement at the Pycon sprints). Do you mind if I 
>copy
>this code? I can't seem to find a license. (txampext is ISC-licensed, 
>which
>I assume is congruent to your sensibilities :))
>
>
>On Mon, Mar 4, 2013 at 5:17 PM, <exarkun at twistedmatrix.com> wrote:
>>On 03:34 pm, _ at lvh.cc wrote:
>> >Hi,
>> >
>> >
>> >I have no issue writing AMP responders TTD-edly, they work pretty 
>>much
>> >the
>> >way any other code would. However, I did notice that the only way I'd
>> >notice if my Command definitions themselves were broken were if my
>> >functional tests start failing.
>>
>>Chris and I wrote all the AMP-using code for game TDD.  See
>>game/test/test_network.py in lp:game.
>>
>>Jean-Paul
>> >It would be nice if I could write unit test driven Command
>> >specifications,
>> >as well.
>> >
>> >The quickest I could come up with was to call
>> >makeArguments/makeResponse
>> >with a few known-good/known-bad dictionaries, and see if it blows up.
>> >Is
>> >there a smarter way to do it?
>> >
>> >--
>> >cheers
>> >lvh
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>--
>cheers
>lvh



From glyph at twistedmatrix.com  Wed Mar  6 16:01:02 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 6 Mar 2013 15:01:02 -0800
Subject: [Twisted-Python] First pre-release of Twisted 13.0.0
In-Reply-To: <CAHZ8tnbugaNYba8W6KQYjj9xWpp3Ke8DbyzN-TgZ7758CquppA@mail.gmail.com>
References: <51375E59.3060200@free.fr>
	<CAHZ8tnbugaNYba8W6KQYjj9xWpp3Ke8DbyzN-TgZ7758CquppA@mail.gmail.com>
Message-ID: <DCBEBA3A-00ED-4FCF-AA65-4E5B4BEF4511@twistedmatrix.com>


On Mar 6, 2013, at 7:28 AM, Jonathan Lange <jml at mumak.net> wrote:

> On 6 March 2013 15:18, Thomas Hervé <therve at free.fr> wrote:
> Hello fine people of Twisted,
> 
> I've the pleasure to announce the first pre-release of Twisted 13.0.0.
> This is mostly a bugfix release, but I'd like to highlight the new
> "Introduction to Deferreds" document, which will hopefully help all the
> Deferred-confused over the world.
> 
> 
> 
> You are a wonderful, wonderful person, as indeed are the folk who fixed all those tickets. Thank you all.

Hear, hear!  Many thanks, Thomas, for keeping the release process grinding along.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130306/af91f31d/attachment-0001.html>

From _ at lvh.cc  Wed Mar  6 17:38:23 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Thu, 7 Mar 2013 01:38:23 +0100
Subject: [Twisted-Python] How do I write AMP Command definitions
	TTD-edly?
In-Reply-To: <20130306153447.9151.111445364.divmod.xquotient.20@localhost6.localdomain6>
References: <CAE_Hg6bOAshXfRp4nfeyZs_U9CuWHrHDBL_0ufTkLztYxx1uiQ@mail.gmail.com>
	<20130304161744.9151.828707065.divmod.xquotient.6@localhost6.localdomain6>
	<CAE_Hg6YYkNTgM+HkrnRbESD5EVUASWDngxEyv=EBJEO2AY5HWQ@mail.gmail.com>
	<20130306153447.9151.111445364.divmod.xquotient.20@localhost6.localdomain6>
Message-ID: <CAE_Hg6ZwvXmL7J9qe4j+w4J=6G7kSs2yCG9JC7zTdG5vYv_2eg@mail.gmail.com>

Awesome, thanks!
On Mar 6, 2013 5:18 PM, <exarkun at twistedmatrix.com> wrote:

> On 5 Mar, 09:46 am, _ at lvh.cc wrote:
> >That looks awesome.
> >
> >I can't find a license for it.
>
> The code was already MIT licensed.  It's more redundantly so, now.
>
> Jean-Paul
>
> I'm publishing some third-party helpers for
> >twisted's amp implementation as I need them myself (presumably I'll
> >make a
> >formal release announcement at the Pycon sprints). Do you mind if I
> >copy
> >this code? I can't seem to find a license. (txampext is ISC-licensed,
> >which
> >I assume is congruent to your sensibilities :))
> >
> >
> >On Mon, Mar 4, 2013 at 5:17 PM, <exarkun at twistedmatrix.com> wrote:
> >>On 03:34 pm, _ at lvh.cc wrote:
> >> >Hi,
> >> >
> >> >
> >> >I have no issue writing AMP responders TTD-edly, they work pretty
> >>much
> >> >the
> >> >way any other code would. However, I did notice that the only way I'd
> >> >notice if my Command definitions themselves were broken were if my
> >> >functional tests start failing.
> >>
> >>Chris and I wrote all the AMP-using code for game TDD.  See
> >>game/test/test_network.py in lp:game.
> >>
> >>Jean-Paul
> >> >It would be nice if I could write unit test driven Command
> >> >specifications,
> >> >as well.
> >> >
> >> >The quickest I could come up with was to call
> >> >makeArguments/makeResponse
> >> >with a few known-good/known-bad dictionaries, and see if it blows up.
> >> >Is
> >> >there a smarter way to do it?
> >> >
> >> >--
> >> >cheers
> >> >lvh
> >>
> >>_______________________________________________
> >>Twisted-Python mailing list
> >>Twisted-Python at twistedmatrix.com
> >>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
> >
> >--
> >cheers
> >lvh
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130307/c6653246/attachment.html>

From techtonik at gmail.com  Thu Mar  7 03:32:26 2013
From: techtonik at gmail.com (anatoly techtonik)
Date: Thu, 7 Mar 2013 13:32:26 +0300
Subject: [Twisted-Python] Lost slides with deferred errbacks
Message-ID: <CAPkN8xLVzDcRjxC0KJbDbBbKo=qCa7xHvJVRy=oYBZsBT--YgQ@mail.gmail.com>

Hi,

Some months ago I saw slides about how deffered work in Twisted.
If I remember correctly these there two columns on yellow background,
with pictures on the right, which described how errback processing
propogates and how to handle deferreds.

Does anybody remember them? I looks like color codes for the blocks
on the diagrams were filled bright green and solid bright red square
blocks. I can't find them, does anybody know where I could see them?

Thanks.
-- 
anatoly t.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130307/3fa481da/attachment.html>

From adi at roiban.ro  Thu Mar  7 03:53:30 2013
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 7 Mar 2013 12:53:30 +0200
Subject: [Twisted-Python] Lost slides with deferred errbacks
In-Reply-To: <CAPkN8xLVzDcRjxC0KJbDbBbKo=qCa7xHvJVRy=oYBZsBT--YgQ@mail.gmail.com>
References: <CAPkN8xLVzDcRjxC0KJbDbBbKo=qCa7xHvJVRy=oYBZsBT--YgQ@mail.gmail.com>
Message-ID: <CAFycZ9d7io5dZAi2kvMvXQ9haiKvsU1e6sf=YGgcjHjiQ=A9OA@mail.gmail.com>

On 7 March 2013 12:32, anatoly techtonik <techtonik at gmail.com> wrote:
> Hi,
>
> Some months ago I saw slides about how deffered work in Twisted.
> If I remember correctly these there two columns on yellow background,
> with pictures on the right, which described how errback processing
> propogates and how to handle deferreds.
>
> Does anybody remember them? I looks like color codes for the blocks
> on the diagrams were filled bright green and solid bright red square
> blocks. I can't find them, does anybody know where I could see them?

Hi,

I don't know about those slides, but I read about errback propagation
from the official docs.

Does this help? http://twistedmatrix.com/documents/12.3.0/core/howto/defer.html

--
Adi



From techtonik at gmail.com  Thu Mar  7 05:04:00 2013
From: techtonik at gmail.com (anatoly techtonik)
Date: Thu, 7 Mar 2013 15:04:00 +0300
Subject: [Twisted-Python] Lost slides with deferred errbacks
In-Reply-To: <CAFycZ9d7io5dZAi2kvMvXQ9haiKvsU1e6sf=YGgcjHjiQ=A9OA@mail.gmail.com>
References: <CAPkN8xLVzDcRjxC0KJbDbBbKo=qCa7xHvJVRy=oYBZsBT--YgQ@mail.gmail.com>
	<CAFycZ9d7io5dZAi2kvMvXQ9haiKvsU1e6sf=YGgcjHjiQ=A9OA@mail.gmail.com>
Message-ID: <CAPkN8xLTzZzftF3EPMuh5GvGShuu0uFaRRgK0NETO6_NC7OCEg@mail.gmail.com>

On Thu, Mar 7, 2013 at 1:53 PM, Adi Roiban <adi at roiban.ro> wrote:

> On 7 March 2013 12:32, anatoly techtonik <techtonik at gmail.com> wrote:
> > Hi,
> >
> > Some months ago I saw slides about how deffered work in Twisted.
> > If I remember correctly these there two columns on yellow background,
> > with pictures on the right, which described how errback processing
> > propogates and how to handle deferreds.
> >
> > Does anybody remember them? I looks like color codes for the blocks
> > on the diagrams were filled bright green and solid bright red square
> > blocks. I can't find them, does anybody know where I could see them?
>
> Hi,
>
> I don't know about those slides, but I read about errback propagation
> from the official docs.
>
> Does this help?
> http://twistedmatrix.com/documents/12.3.0/core/howto/defer.html


I am looking for slides to see if they will be suitable as an exception
example for
Haskel folks. Seems like there are no exceptions in functional languages,
so a
mechanism like errbacks can be a replacement.

The text is good for someone who knows Twisted, but the presentation was
rather
simple for everyone, or at least I've got this impression,
-- 
anatoly t.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130307/e94304a5/attachment.html>

From techtonik at gmail.com  Thu Mar  7 05:15:11 2013
From: techtonik at gmail.com (anatoly techtonik)
Date: Thu, 7 Mar 2013 15:15:11 +0300
Subject: [Twisted-Python] Lost slides with deferred errbacks
In-Reply-To: <CAFycZ9d7io5dZAi2kvMvXQ9haiKvsU1e6sf=YGgcjHjiQ=A9OA@mail.gmail.com>
References: <CAPkN8xLVzDcRjxC0KJbDbBbKo=qCa7xHvJVRy=oYBZsBT--YgQ@mail.gmail.com>
	<CAFycZ9d7io5dZAi2kvMvXQ9haiKvsU1e6sf=YGgcjHjiQ=A9OA@mail.gmail.com>
Message-ID: <CAPkN8xLrmXkE=SMYzeLquexrO8sY7eHwL7L06UZ3oqagZJy3VA@mail.gmail.com>

On Thu, Mar 7, 2013 at 1:53 PM, Adi Roiban <adi at roiban.ro> wrote:

> On 7 March 2013 12:32, anatoly techtonik <techtonik at gmail.com> wrote:
> > Hi,
> >
> > Some months ago I saw slides about how deffered work in Twisted.
> > If I remember correctly these there two columns on yellow background,
> > with pictures on the right, which described how errback processing
> > propogates and how to handle deferreds.
> >
> > Does anybody remember them? I looks like color codes for the blocks
> > on the diagrams were filled bright green and solid bright red square
> > blocks. I can't find them, does anybody know where I could see them?
>
> Hi,
>
> I don't know about those slides, but I read about errback propagation
> from the official docs.
>
> Does this help?
> http://twistedmatrix.com/documents/12.3.0/core/howto/defer.html


Nevermind. I found it. Need to check if these too match.
http://djmitche.github.com/twisted-intro/

-- 
anatoly t.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130307/1d1df3eb/attachment.html>

From kevin.horn at gmail.com  Thu Mar  7 10:01:29 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 7 Mar 2013 11:01:29 -0600
Subject: [Twisted-Python] Lore, Sphinx,
 and getting to the finish line (was: re: lore and tickets and other
 stuff)
In-Reply-To: <739CAE65-F29E-4FA8-96BF-A6C1548A9E02@twistedmatrix.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
	<4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
	<CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
	<739CAE65-F29E-4FA8-96BF-A6C1548A9E02@twistedmatrix.com>
Message-ID: <CA+U=zK178dwz6A_+V1cy60rK0O-b3KC01dzjEQkdKj82iXB_sw@mail.gmail.com>

Sorry it's taken me so long to get back to this.  But it's gotten to be a
Looong email.

On Sat, Mar 2, 2013 at 3:14 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 1, 2013, at 9:35 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> That "never-ending" series of Lore source fixes took place over the course
> of a couple of weeks.  Doing things that way was not my idea, though it
> seemed reasonable at the time because  the idea was that we would do the
> cutover at the end of it.
>
>
> Well, let's go to the video tape. Based on this comment -  <
> http://twistedmatrix.com/trac/ticket/4500#comment:12> - these tickets
> were closed over a period ranging from 2010/07 to 2011/03. 6 months isn't
> quite "weeks", but okay I guess it wasn't "never-ending" either :).
>
>
Hmmm.  I recall it as being much shorter.  Probably most of the work took
place it two "spurts" around the beginning and end of that time, and that's
why I remember it that way.  But I'm not interested in digging through a
bunch of old dates to find out for sure.


> (As an aside, lore2sphinx is in no way a "broken pile of regexes".  Not to
> say that it isn't broken in some really significant ways, because it is,
> but it doesn't use regexes at all.  Just sayin'.)
>
>
> Actually yeah, "regex" is just a curse-word here :).  It's the emitter I'm
> complaining about, anyway, not the parser, so deriding it as a "regex" is
> in no way accurate.
>

I figured that was the case, I just wanted to say something so others
reading this didn't get the wrong impression about how lore2sphinx is
implemented.  I mean it's not code I'm very proud of, but it's not _that_
bad :)


<<< snip a bunch of stuff about who said what when, why I thought what I
thought, etc. >>>

It boils down to the fact that a bunch of the conversations happened either
in person or on IRC.  This was mostly because I was in a hurry at the time,
usually because I wanted to do something before additions were made to the
documentation, which was in a somewhat "known" state (as in I knew how it
was going to behave when run through lore2sphinx) at the time.

Also, please elaborate on what you mean  by "do *everything* in one big
> bang.  My intention was never to do anything but get the SphinxBuilder
> working on that branch.  Was there something else you thought I was doing?
>  Was there something else I should (or should not) have been doing?
>
>
> My reasoning goes like this: the ticket for the release tools is still not
> in review, so you must be waiting for something to re-submit it.  It looks
> like you responded to the code, so the only thing I could think you were
> still waiting for would be for the lore sources themselves to be ready.
>
>
It's been long enough that I can't fully recall my reasoning on this.  But
_probably_ I decided that if I finished the release tools ticket, someone
might use it.  Which would be great, except that I think I had decided that
before that actually happened I needed to figure out a way to emit nicer
output from lore2sphinx.  So I left it alone until I had figured out how to
do that.

At least, that _might_ have been part of my thought process.  It really was
ages ago.

[the fixed-up Lore sources] got left alone because of the release tools
> hangup.  Ideally the release tools would have been done before the whole
> lore-source-tweaking process, but they weren't.  I'll admit my frustration
> played a part in this, but so did the deafening silence I got when I asked
> for anyone to comment on the ticket.
>
>
> Where and how did you ask people to comment on the ticket?  I don't recall
> being asked, and I tend to be pretty good about leaving prompts like that
> in my inbox until I've done what was asked.  (Not *perfect*, of course, and
> if you asked a list then there might have been some bystander effect.)  It
> seems like we might have avoided this whole mess if you had just attached
> the 'review' keyword :).
>

On IRC.


>
> My perception has been that I would say "what do we need to do to make
> this happen"?  There would be some hemming and hawing (and at least several
> times long discussions about how documentation didn't really fit the
> regular UQDS process) and a sort of plan would be invented.  I would
> proceed according to the plan as I understood it.  I would then say "OK,
> we're ready"!  And then be told that some other thing not in the plan
> needed to be done.  The cycle would then repeat.
>
>
> The only "cycle" I can either see on the tickets or recall here is where
> the release tools didn't come in to the initial plan.
>

This was the latest of several (3 or 4) according to my
recollection/perception.  It doesn't really matter now.


> No [the need for release automation] was not brought up until well into
> the process. I (sort of) understand the desire for this, but it seems
> pretty weird to be building what is essentially a wrapper for an existing
> tool, along with tests for said wrapper,
>
>
> OK.  I can believe that this did not happen.  One problem is that we (the
> inner-circle old-school Twisted developers) tend to engage in conversations
> about how a thing might be done while at the same time we discuss what must
> be done.  And we also tend to discuss what policy is (or what all or some
> of us believe it *ought to be* in some case, further confusing the issue)
> without making explicit what the *purpose* of that requirement is.
>
> I would ask the community to help us with this by doing a couple of things.
>
> If somebody says "X is policy", always ask for a link to it.  If there is
> a link, it'll help you understand it better.  If there *isn't* a link,
> then the authority telling you it's "policy" might just be remembering that
> it's the way we've done things since forever and of course it's a good
> idea.  There are definitely things that I have thought were in the coding
> standard that are not actually written down anywhere, on more than one
> occasion.
>
> If a meandering discussion is happening - here, on the mailing list, on
> the ticket - never be afraid to break it up and separate out the different
> concerns which are being discussed: what is necessary for compliance with
> our development process, what would be a good idea from a design point of
> view, how the work might be broken up to get through review more
> manageably, what other concerns are in play.
>
> Especially, if you ever see a code review where a reviewer says "I
> think..." without making it clear what you should *do*, you should always
> ask, 'is this a requirement of the review or just some thoughts you have'.
>
>
And when we ask, we should ask on the ticket, and put it back into review,
yes?  Because I think this was the part (or at least _A_ part) I was really
missing here.


> There's also the problem of "I think you should..." being interpreted as
> "You must...".  It is *very* hard to consistently separate design
> feedback from code review, although we try very hard; but, it's hard to
> separate it out when reading it as well.  So one important point to keep in
> mind is that, as the author of a proposed change, outside the things that
> are agreed upon policy consensus, you always have some degree of discretion
> to disagree with a reviewer.  And you should freely do so when submitting
> anything for re-review.  It's best to just do this as quickly as possible,
> so that it gets back to the reviewer without a whole lot of delay, and they
> can respond with either "I still disagree, but you're doing the work, so OK
> go ahead" or "No, you really have to do this, it's required by policy
> document X, here's a link" ;-).
>
>
>>    1. The documentation itself needs to be able to be generated from any
>>    version of trunk.  While one or two formatting snafus are acceptable to be
>>    fixed after the fact, the documentation needs to be in a comprehensible
>>    state in every revision of trunk, which means that in order to land on
>>    trunk, the ReST output.
>>
>> So...you didn't finish that sentence.  I realize you apologized for
> errors at the end of your mail, but I have a feeling you were going to say
> something rather important there...
>
>
> Well yes, that was the point of the apology.  That was a rather important
> thing.  What I was probably going to say was just:
>
> The ReST output needs to be in good enough shape to be generally readable,
> with a manageable number of errors.  But, we need to be able to *verify*
> that it has not too many errors.
>
>
> And I'd already discussed that somewhat above.
>
> Now that I've replied to all of that, let me give you a rundown of what
> I've been thinking and planning, so that you have an idea of where I'm
> coming from.
>
> Here are the various things that I have perceived to be necessary/required
> in order to get the conversion to happen:
>
> a) The conversion process needs to be able to be run concurrently with
> Lore for an extended period of time.  In other words, Lore would be the
> "official" version of the docs, and the Sphinx docs would be built in some
> form of automated fashion until everyone was happy with them and/or ready
> to deprecate/abandon Lore.
>
>
> Your understanding of this requirement is slightly off, I think, although
> possibly the consequences are the same.  As per the difficulties I laid out
> above, about separating the requirements from the strategies for satisfying
> said requirements.
>

I've been told that almost verbatim, several times.  This is basically what
led to the Sphinx buildbot happening.  Perhaps I wasn't clear about what I
meant.


> The thing that we weren't going to tolerate was any message saying that
> people should hold off on writing documentation, even for "a little while"
> while we fixed up the lore conversion, because without a contractual
> obligation for someone to finish this work, there's really no telling how
> long "a little while" would be :).
>

Well, when I originally was pushing it, my plan was for that little while
to be "today" (this was at PyCon during the only day of sprints I was able
to attend), and if it didn't get done, we'd abandon that particular
attempt.  You and exarkun managed to convince me that even this was
probably not a very good idea though.


> Since the whole point of this sphinx conversion is to appeal to
> documentation authors who prefer the ReST format as input (it's definitely
> not to make the docs look nicer, writing a new stylesheet for Lore would
> have taken 1/100th of the effort and nobody has expressed interest in doing
> that), creating a period where things were even *less* appealing to
> documentation authors would defeat the purpose.
>

I actually considered the stylesheet thing, but it was really only a
passing thought.  My personal motivation started with not being able to
find things in the documentation.  So I started looking at the various Lore
tickets to see whether there was something to clean up that would help.
 And a bunch of them seemed to be asking for things that Sphinx already
did.  Sphinx was starting to become a common tool, and I had used it on
several other projects, and found it pleasant to work with.  Also, when I
asked about Lore on IRC, I got a lot of "I'm not sure anyone knows how that
works these days" and "oh man, I wish we didn't have to support that any
more", etc.  So I started looking into how to convert the docs over to use
Sphinx.


> Another possible solution to this problem would be to modify Lore so it
> could process ReST sources, so that we could convert the documentation
> within the repository piecemeal, and start writing any new docs in ReST,
> but still have a coherent whole of documentation produced, eventually
> switching the documentation processor from Lore to Sphinx.
>

This would require someone smarter than me.  Or at least more versed in
formal parsing theory/techniques.  Or something.  And that would be just to
read the docutils sources.  I find them...alien. (though less so that when
I first started looking at them...I'm not sure if they've improved, or I
have)


> Yet another possible solution would be to modify Sphinx, adding a plugin
> to process the Lore sources.
>

This is more reasonable, but still has problems.  Actually the reasonable
thing would be to create a docutils piece to process Lore sources, and then
maybe some Sphinx extensions on top of that.  Or something.  Still, it
might have been doable.  However, I think Lore would have had to be
modified as well, and possibly the Lore format expanded
to accommodate certain constructs that it just doesn't do right now (mostly
I'm thinking of the toctree directive and related stuff).


> As an aside: this is the part of the process which has been so frustrating
> to me, personally.  The two alternate solutions I proposed here (and have
> proposed before) seem far saner and more manageable in terms of effort, to
> me.  But, everyone I have spoken to about docutils and ReST has told me in
> no uncertain terms that they are both a pile of heinous hacks that resist
> any attempt at sensible software-engineering solutions to problems, so we
> need to resort to hackish system-integration stuff like what we've done.
>  This worries me.
>

Ooookaaaaay....I don't know how to respond to that exactly.


> I know that Sphinx's output is well-loved by the Python community, but if
> it's so hard to call into that we can't reasonably modify it to get an XML
> DOM that looks like Lore source to Lore, and it's so hard to plug in to it
> that we can't give it a data structure that it likes from Lore's XML DOM,
> then how the heck is it being maintained?  And if it actually *isn't* that
> bad, then why haven't I managed to find someone that knows its code well
> enough to do one or the other of these things?
>

It would be possible to make Sphinx emit Lore sources, though I'm not sure
what that buys.  You could do this either through a custom Sphinx
"builder", or possibly even just using a custom html template with the html
builder.  But you'd need ReST sources to feed into Sphinx, so...

You could write a docutils "parser" which parses a document and returns a
"nodetree" data structure.  This would get you as far as docutils, but
AFAIK there is no existing way to get Sphinx to use any parser other than
the default ReST one.  You could probably create such a thing, which would
almost certainly involve modifications to Sphinx, though that's not
necessarily a big deal.  It might not even be hard.  I think this would
actually be a lot easier now than when I started down this path, mostly
because docutils seems to have better documentation on the nodes that can
go in the "nodetree" I mentioned above.  Note that I said "seems" because
I'm not sure if it's that docutils documentation has gotten more complete,
or just that I've bounced around in it enough times to find things.  The
Docutils docs have the same problem that the Twisted docs have, which is
that they are nigh un-navigable.  (I also think that the docutils docs
should start using Sphinx, but I'm not sure how well that would go over in
that camp...)

The main problem with creating such a parser, is that Sphinx uses a bunch
of docutils extensions to tie together the disparate documents in your
project, and Lore, like vanilla docutils, doesn't have much of a concept of
being one document among many (at least not from within a document).  For
example, it has things to handle tables of contents, cross document links
(with the ability to link to a document section, rather than a specific
document, so if it gets moved to a different document, the link gets
adjusted), compilation for glossaries and index entries from across the
docs project, etc.  So you'd need to add some stuff to Lore to account for
this (some is already there).  And then we'd have to go through and modify
a bunch of the Lore sources anyway.

Like I said, this looks a lot more feasible now than it did when I first
looked at it, though I'm not sure whether it's me or docutils/Sphinx that's
changed.  Probably some of each.

At any rate, back then it seemed awfully difficult, and less interesting.

Hmmm.  And you'd also need to make some changes to the way Sphinx picks up
files.  And probably some other stuff I haven't thought of.

I have no direct knowledge of any of this stuff, because my main interest
> here is improving the experience of working on Twisted, both for you,
> Kevin, and for the people who will arguably be helped by the use of Sphinx.
>  Maybe I'm completely wrong and Sphinx is beautifully architected and we
> could have done this from day 1.  But I faintly hope that some Docutils and
> Sphinx contributor hears that I said "sphinx is garbage" and makes a fool
> of me by contributing either a lore modification or a sphinx plugin which
> solves this whole problem so we can do the format or tool migration
> incrementally :).
>
> b) Because of a), there needs to be tooling to run lore2sphinx (or
> whatever) on a regular basis.  (This was sort of being done via the
> Sphinx-building buildbot, but in a very ad-hockery sort of way, which was
> brittle, broke a couple of times, and needed to be improved.)
>
>
> Hmm. I wasn't aware of that. But it seems like it's running by a charm now.
>

I think this is because a) exarkun fixed it a couple of times, and b) I
stopped making changes to the lore2sphinx repo (which the buildbot pulls
from).  I'm also referring here to something which is completely
non-obvious to anyone who hasn't actually run lore2sphinx by hand, which is
that the command line tool was fairly terrible in several ways.  This made
it harder to use for development than it should have been.


>
> c) There needs to be release management tooling to build the Sphinx docs
> from ReST into whatever formats we want to publish (HTML and PDF to start,
> maybe others later on)
>
>
> Yup.  (ePub?  PDF is so last-century... :))
>
> d) Convert the Lore sources to better ReST documents without all the
> problems that the current lore2sphinx output has.
>
>
> So, this wasn't *necessary*.  If we had gotten through the release
> automation stuff - and I still don't understand why that's stuck - we could
> have merged it.
>

Well, I decided it was.  Or at least really really desirable.


> I at one time thought this was pretty impractical.  My first attempt at a
> conversion tool tried to use an intermediate object model, but I ran into
> trouble when trying to combine the various objects.  So I abandoned the
> effort and created what became lore2sphinx, which basically just combined a
> bunch of strings.  I then figured out a way of making the intermediate
> object thing work, and that was lore2sphinx-ng.  Then it became convenient
> to split out the intermediate object model from the documetn processing
> code, so I put all of that into a library and that became rstgen.
>
> It seems the saving grace here is that rstgen might be a generally useful
> tool in its own right, with more of a long-term future than lore2sphinx
> would have had.
>

I admit that I have become more interested in the actual problem of
"generating ReST" than I once was.  And I hope that it will become a
generally useful tool.

And probably one of the reasons I have been making such relatively slow
progress on it is is _because_ I'm trying to solve a more general problem
than I once was.  The original lore2sphinx (the one running on the buildbot
now) was very much a minimal-thing-that-could-possibly-work kind of
solution.  It tried to do just enough to get the job done.  It sort of did
get the job done, but I was never very satisfied with it.


> (For anyone who is curious, the lore2sphinx-ng repo is forked off from the
> lore2sphinx repo, primarily because I didn't want to break the Sphinx
> buildbot by making drastic changes.)
>
>
> Have a link?
>

I've posted it a couple of times in this thread, though I can hardly blame
you for either missing it or losing track of it.

original: https://bitbucket.org/khorn/lore2sphinx
extra-crispy: https://bitbucket.org/khorn/lore2sphinx-ng


>
> Here's what my plan was prior to this whole discussion getting started
> again.
>
> 1) Finish rstgen, where "finished" in this instance is defined as "is
> capable of generating all the vanilla docutils and sphinx-specific ReST
> elements that we need for converting the
> Twisted documentation.
>
>
> Sounds like a worthy goal, although I don't think this is necessarily
> required.  Have you been working on it for the last 2 years?  Do you have
> any idea when it might be done?  It might be worthwhile to write a
> *smaller* .
>

I started on rstgen a bit more than a year ago.  I was hung up on the
problem of how to combine various parts of a document for a while without
having the crazy space-handling issues.  And also I've been trying to come
up with a relatively friendly API, and enough generality that it will end
up useful outside of the lore2sphinx context.

I really started on l2s-ng last July during "Julython".  I've been working
on it in fits and starts a few times since then.


>
> 2) Finish lore2sphinx-ng (which would probably have ended with merging it
> back into the lore2sphinx repo), where "finished" means that it would be
> capable of processing all the XHTML Lore tags that were defined in the Lore
> documentation and used in the Twisted documentation, and generating a tree
> of rstgen elements, which could then be rendered into ReST.
>
>
> Cool.
>
> While this would be handy, especially for people working on documentation
> branches, it's not necessarily necessary.
>
> (this would also serve to satisfy b) above, as the CLI in lore2sphinx-ng
> is less...well, let's just call it broken than lore2sphinx's was/is.)
>
>
> OK.
>
> 3) Go back and finish SphinxBuilder (release tooling for building a sphinx
> project, which is basically a wrapper for sphinx-build, plus some vague
> "version feature").
>
>
> This is really the crux; this is the thing you should work on first, I
> think, even if you're going to keep working on lore2sphinx-ng.  Basically
> the only reason that I was keen to get the lore to sphinx conversion
> improved in the first place was that creating this tool seemed to be
> dragging on for quite a while after the "chunk tickets" were done.  But
> now, this tool is almost done, and we could re-do the lore-source review if
> you wanted to do that.  The current lore2sphinx might well be good enough
> to just go with, especially if the next-generation version is going to take
> another six months to finish.
>

I'll take a look at this again soonish (a week?  this month? don't know.).
 Probably it's a matter of:

- merge forward (it has been a while)
- figure out how the other tools guess/determine the Twisted version in the
checkout, and make SphinxBuilder do that.
- get it reveiewed
- commit

But I'll have to remember how to use combinator again (which will be much
easier now that the combinator "docs" are on the Twisted wiki...thanks to
whomever did that!)

Yes, I could probably use Bazaar, but so far every time I've tried that,
I've ended up spending waaaaaay too much time just on the VCS.  I guess I
have some kind of mental block with bzr.  I'll get over it someday I
suppose.


>
> 4) Get someone to use something less hackish than what's currently
> building the Sphinx docs on the buildbot, and preferably in such a way that
> the results of those builds could be published somewhere and have
> persistent links.  Currently the results of what the Sphinx buildbot does
> are stored for a time, and then go away, so you'll see links to build
> results in some trac tickets that go nowhere, which is decidedly unhelpful.
>  My plan was that we'd set up something where the Sphinx docs would get
> generated and published someplace for every buildbot build so that we could
> always have the current results for the lore to sphinx conversion for the
> tip of each branch.  I have no idea whether this is actually feasible or
> practical, but it seemed like it would be useful.
>
>
> OK, *this* sounds like really unnecessary turd-polishing ;-).  This
> builder is an interim step; the more interesting step is the builder that
> just builds the sphinx docs, in the same way that the current builder
> builds the lore docs.  Furthermore, it seems to be working fine.  Build
> results links that go nowhere are a known problem with buildbot, since it
> does eventually lose most history, and this type of history takes up a fair
> bit of disk space.
>

Well, it was mostly motivated by the fact that we were doing a lot of
linking to build results that would then cease to exist for a while, and it
really annoyed me.  It doesn't seem nearly as "necessary" to me now as it
once did.


>
> 5) Proceed with Sphinx docs being built from lore sources, making tweaks
> as necessary to lore2sphinx(ng) for as long as it took for the generated
> docs to be good enough to justify switching to Sphinx entirely.
> 6) Switch to Sphinx entirely.
>
> I really wasn't planning on trying to get people excited about switching
> to Sphinx again until 1) and 2) were at least "mostly" done (for certain
> values of done) and I had gone back to finish 3).
>
> So.  I guess at this point the question is whether to try and go with
> what's there (lore2sphinx) or finish up the "new stuff" (lore2sphinx-ng +
> rstgen).  I think 3-6 in my above plan need to happen in any case, and I
> think those will be much easier with lore2sphinx-ng+rstgen.
>
>
> This decision is really determined by time estimates.
>
> In any case, work out the sphinx release automation tool first, since we
> need that regardless of how we switch over
>

Got it.


>
> IIRC, rstgen has support for most of the vanilla docutils elements, with
> the notable exception of tables (and maybe definition lists...can't recall
> whether I finished those).  It has a basic level of test coverage (of
> course you can never have too many tests) for rendering the elements
> individually, and some test for elements in combination (particularly
> nested lists).  Footnotes and Citations I think also need some work, which
> I have a plan for, but haven't implemented yet (i don't think).
>
>
> The "new" lore2sphinx CLI tool needs more work, but is relatively
> straightforward.  Like the old tool, it's basically an elementtree
> processor, except instead of spitting out strings that get joined together
> (which granted was an unholy mess), it generates rstgen elements, which all
> have a .render() method.  After processing a Lore document, you shoudl end
> up with a rstgen.Document object.  You call it's render() method, which
> calls it's children's render() methods, etc. and it's turtles all the way
> down.
>
> The framework is there for the new CLI tool, it's mostly a matter of
> writing a bunch of short methods that take elementtree elements as input
> and return appropriate rstgen objects.
>
> Obviously these tools aren't finished, but they produce much better output
> than the old version of lore2sphinx w.r.t. whitespace handling, paragraph
> wrapping, etc.
>
>
> Aesthetically, this appeals to me a lot more than going with the messiness
> of lore2sphinx.
>

Me too.



> But it is _not_ a requirement.
>

Understood.  Though I think it might be a practical requirement, even if it
isn't a policy requirement.  If that makes sense.



> Some of the code is still pretty messy, but nowhere near the train wreck
> that the current/old version of lore2sphinx is.  By which I mean it _can_
> be cleaned up, it just hasn't been yet.  In particular there's some places
> in rstgen where the API is (to me at least) obviously awful, but I haven't
> gotten around to fixing it yet.
>
> Please review the code.  Please feel free to ask questions if you're
> interested.
>
> Personally, I've gotten over being in a hurry about all this, and I think
> a robust tool is more likely to succeed in the long run, though finishing
> it may make the run a bit longer.  So I'm for finishing
> lore2sphinx-ng+rstgen.
>
>
> I think a little false urgency might not hurt here :-).  I'm not going to
> work on the tool - just writing these emails probably blew my Twisted
> development budget for the next two months ;-)
>

I can relate... :)


> - but I will do my best to quickly clear up any procedural
> what-needs-to-be-done questions unambiguously.  Please ping if anything
> gets you stuck.
>

I'll let you know.

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130307/af379fec/attachment.html>

From tobias.oberstein at tavendo.de  Fri Mar  8 04:18:25 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 8 Mar 2013 03:18:25 -0800
Subject: [Twisted-Python] Twisted on Jython
Message-ID: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>

Hi,

we've been asked if Autobahn runs under Jython. Since there is an upcoming Jython version that supports 2.7 Python API, I thought I'd give it a try.

To my astonishment, I was able to get Autobahn working with minor efforts ...

Tested: Twisted 12.3 under Jython from sources (together with zope.interface 4.05 and setuptools from sources) after applying the following patches. Stock AutobahnPython 0.6 from source.

1) Missing __builtin__.buffer

The following is a workaround due to http://bugs.jython.org/issue1521

Include

# workaround for Jython, see: http://bugs.jython.org/issue1521
import __builtin__
if not hasattr(__builtin__, 'buffer'):
    def _buffer(object, offset = None, size = None):
       if offset is None:
          offset = 0
       if size is None:
          size = len(object)
       return object[offset:offset+size]
    __builtin__.buffer = _buffer

at the beginning of "twisted/python/compat.py".

2) Weird platform ident

Jython identifies itself as "Java" .. I was testing on Windows.

twisted/python/runtime.py

Line 36

    #'java': 'java',
    'java': 'win32',

This is necessary on Windows since otherwise Posix API is assumed.

Of course above is just a quick hack.

C:\Users\oberstet>jython
Jython 2.7b1 (default:ac42d59644e9, Feb 9 2013, 15:24:52)
[Java HotSpot(TM) 64-Bit Server VM (Oracle Corporation)] on java1.7.0
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys, os
>>> sys.platform
'java1.7.0'
>>> os.name
'java'

IMHO, os.name should return the real underlying OS on Jython, not "java" .. what do you think?

===

Where should those issue be adressed? Should Twisted include workarounds or should I lobby at Jython to "do the right" thing?

Cheers,
Tobias


Mit freundlichen Grüßen,

Tobias Oberstein
Geschäftsführer

+49(0)9131 940 3574
+49(0)176 23 752 055
tobias.oberstein at tavendo.de<mailto:tobias.oberstein at tavendo.de>
Skype: toberstein<skype:toberstein?call>
Twitter: @oberstet<https://twitter.com/oberstet>
Xing: Tobias Oberstein<https://www.xing.com/profile/Tobias_Oberstein>

[cid:image003.png at 01CE1BF7.08C826D0]

Tavendo GmbH · Am Weihersbach 13 · 91074 Herzogenaurach · Deutschland
Office / Postanschrift : Waldstrasse 18 · 91054 Erlangen · Deutschland
+49(+)700 GO TAVENDO · +49(0)700 46 828 36 36 · www.tavendo.de<http://www.tavendo.de/>
Amtsgericht Fürth · HRB 10365 · USt-Id.Nr DE246462916 · Geschäftsführer Tobias Oberstein

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130308/aa06ce62/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image003.png
Type: image/png
Size: 12131 bytes
Desc: image003.png
URL: </pipermail/twisted-python/attachments/20130308/aa06ce62/attachment-0002.png>

From tobias.oberstein at tavendo.de  Fri Mar  8 06:10:51 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 8 Mar 2013 05:10:51 -0800
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <634914A010D0B943A035D226786325D44226DBFD88@EXVMBX020-12.exch020.serverdata.net>

it seems that a way to identify the actual OS on which Jython is running can be determined using

Jython 2.7b1 (default:ac42d59644e9, Feb 9 2013, 15:24:52)
[Java HotSpot(TM) 64-Bit Server VM (Oracle Corporation)] on java1.7.0
Type "help", "copyright", "credits" or "license" for more information.
>>> import java.lang.System
>>> java.lang.System.getProperty('os.name')
u'Windows 7'
>>>




Mit freundlichen Grüßen,

Tobias Oberstein
Geschäftsführer

+49(0)9131 940 3574
+49(0)176 23 752 055
tobias.oberstein at tavendo.de<mailto:tobias.oberstein at tavendo.de>
Skype: toberstein<skype:toberstein?call>
Twitter: @oberstet<https://twitter.com/oberstet>
Xing: Tobias Oberstein<https://www.xing.com/profile/Tobias_Oberstein>

[cid:image001.png at 01CE1C06.BD7E36F0]

Tavendo GmbH · Am Weihersbach 13 · 91074 Herzogenaurach · Deutschland
Office / Postanschrift : Waldstrasse 18 · 91054 Erlangen · Deutschland
+49(+)700 GO TAVENDO · +49(0)700 46 828 36 36 · www.tavendo.de<http://www.tavendo.de/>
Amtsgericht Fürth · HRB 10365 · USt-Id.Nr DE246462916 · Geschäftsführer Tobias Oberstein

Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] Im Auftrag von Tobias Oberstein
Gesendet: Freitag, 8. März 2013 12:18
An: Twisted general discussion (twisted-python at twistedmatrix.com)
Betreff: [Twisted-Python] Twisted on Jython

Hi,

we've been asked if Autobahn runs under Jython. Since there is an upcoming Jython version that supports 2.7 Python API, I thought I'd give it a try.

To my astonishment, I was able to get Autobahn working with minor efforts ...

Tested: Twisted 12.3 under Jython from sources (together with zope.interface 4.05 and setuptools from sources) after applying the following patches. Stock AutobahnPython 0.6 from source.

1) Missing __builtin__.buffer

The following is a workaround due to http://bugs.jython.org/issue1521

Include

# workaround for Jython, see: http://bugs.jython.org/issue1521
import __builtin__
if not hasattr(__builtin__, 'buffer'):
    def _buffer(object, offset = None, size = None):
       if offset is None:
          offset = 0
       if size is None:
          size = len(object)
       return object[offset:offset+size]
    __builtin__.buffer = _buffer

at the beginning of "twisted/python/compat.py".

2) Weird platform ident

Jython identifies itself as "Java" .. I was testing on Windows.

twisted/python/runtime.py

Line 36

    #'java': 'java',
    'java': 'win32',

This is necessary on Windows since otherwise Posix API is assumed.

Of course above is just a quick hack.

C:\Users\oberstet>jython
Jython 2.7b1 (default:ac42d59644e9, Feb 9 2013, 15:24:52)
[Java HotSpot(TM) 64-Bit Server VM (Oracle Corporation)] on java1.7.0
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys, os
>>> sys.platform
'java1.7.0'
>>> os.name
'java'

IMHO, os.name should return the real underlying OS on Jython, not "java" .. what do you think?

===

Where should those issue be adressed? Should Twisted include workarounds or should I lobby at Jython to "do the right" thing?

Cheers,
Tobias


Mit freundlichen Grüßen,

Tobias Oberstein
Geschäftsführer

+49(0)9131 940 3574
+49(0)176 23 752 055
tobias.oberstein at tavendo.de<mailto:tobias.oberstein at tavendo.de>
Skype: toberstein<skype:toberstein?call>
Twitter: @oberstet<https://twitter.com/oberstet>
Xing: Tobias Oberstein<https://www.xing.com/profile/Tobias_Oberstein>

[cid:image002.png at 01CE1C06.BD7E36F0]

Tavendo GmbH · Am Weihersbach 13 · 91074 Herzogenaurach · Deutschland
Office / Postanschrift : Waldstrasse 18 · 91054 Erlangen · Deutschland
+49(+)700 GO TAVENDO · +49(0)700 46 828 36 36 · www.tavendo.de<http://www.tavendo.de/>
Amtsgericht Fürth · HRB 10365 · USt-Id.Nr DE246462916 · Geschäftsführer Tobias Oberstein

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130308/fe862392/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.png
Type: image/png
Size: 12131 bytes
Desc: image001.png
URL: </pipermail/twisted-python/attachments/20130308/fe862392/attachment-0004.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image002.png
Type: image/png
Size: 12131 bytes
Desc: image002.png
URL: </pipermail/twisted-python/attachments/20130308/fe862392/attachment-0005.png>

From exarkun at twistedmatrix.com  Fri Mar  8 08:34:36 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Mar 2013 15:34:36 -0000
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>

On 11:18 am, tobias.oberstein at tavendo.de wrote:
>Hi,
>
>we've been asked if Autobahn runs under Jython. Since there is an 
>upcoming Jython version that supports 2.7 Python API, I thought I'd 
>give it a try.
>
>To my astonishment, I was able to get Autobahn working with minor 
>efforts ...

That's very cool.  Can you file tickets in the issue tracker and attach 
patches there?  The mailing list is where diffs go to be forgotten.

Here's a start: http://twistedmatrix.com/trac/ticket/3413

Jean-Paul
>Tested: Twisted 12.3 under Jython from sources (together with 
>zope.interface 4.05 and setuptools from sources) after applying the 
>following patches. Stock AutobahnPython 0.6 from source.
>
>1) Missing __builtin__.buffer
>
>The following is a workaround due to http://bugs.jython.org/issue1521
>
>Include
>
># workaround for Jython, see: http://bugs.jython.org/issue1521
>import __builtin__
>if not hasattr(__builtin__, 'buffer'):
>    def _buffer(object, offset = None, size = None):
>       if offset is None:
>          offset = 0
>       if size is None:
>          size = len(object)
>       return object[offset:offset+size]
>    __builtin__.buffer = _buffer
>
>at the beginning of "twisted/python/compat.py".
>
>2) Weird platform ident
>
>Jython identifies itself as "Java" .. I was testing on Windows.
>
>twisted/python/runtime.py
>
>Line 36
>
>    #'java': 'java',
>    'java': 'win32',
>
>This is necessary on Windows since otherwise Posix API is assumed.
>
>Of course above is just a quick hack.
>
>C:\Users\oberstet>jython
>Jython 2.7b1 (default:ac42d59644e9, Feb 9 2013, 15:24:52)
>[Java HotSpot(TM) 64-Bit Server VM (Oracle Corporation)] on java1.7.0
>Type "help", "copyright", "credits" or "license" for more information.
>>>>import sys, os
>>>>sys.platform
>'java1.7.0'
>>>>os.name
>'java'
>
>IMHO, os.name should return the real underlying OS on Jython, not 
>"java" .. what do you think?
>
>===
>
>Where should those issue be adressed? Should Twisted include 
>workarounds or should I lobby at Jython to "do the right" thing?
>
>Cheers,
>Tobias
>
>
>Mit freundlichen Grüßen,
>
>Tobias Oberstein
>Geschäftsführer
>
>+49(0)9131 940 3574
>+49(0)176 23 752 055
>tobias.oberstein at tavendo.de<mailto:tobias.oberstein at tavendo.de>
>Skype: toberstein<skype:toberstein?call>
>Twitter: @oberstet<https://twitter.com/oberstet>
>Xing: Tobias Oberstein<https://www.xing.com/profile/Tobias_Oberstein>
>
>[cid:image003.png at 01CE1BF7.08C826D0]
>
>Tavendo GmbH · Am Weihersbach 13 · 91074 Herzogenaurach · Deutschland
>Office / Postanschrift : Waldstrasse 18 · 91054 Erlangen · Deutschland
>+49(+)700 GO TAVENDO · +49(0)700 46 828 36 36 · 
>www.tavendo.de<http://www.tavendo.de/>
>Amtsgericht Fürth · HRB 10365 · USt-Id.Nr DE246462916 · Geschäftsführer 
>Tobias Oberstein



From tobias.oberstein at tavendo.de  Fri Mar  8 12:47:08 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 8 Mar 2013 11:47:08 -0800
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
Message-ID: <634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>

> >To my astonishment, I was able to get Autobahn working with minor
> >efforts ...
> 
> That's very cool.  Can you file tickets in the issue tracker and attach patches
> there?  The mailing list is where diffs go to be forgotten.
> 
> Here's a start: http://twistedmatrix.com/trac/ticket/3413

Hi Jean-Paul,

done: http://twistedmatrix.com/trac/ticket/3413#comment:21

- Tobias


From glyph at twistedmatrix.com  Fri Mar  8 16:43:44 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 8 Mar 2013 15:43:44 -0800
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <5C14366E-4047-4944-87A3-31C034A5227C@twistedmatrix.com>


On Mar 8, 2013, at 11:47 AM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:

>>> To my astonishment, I was able to get Autobahn working with minor
>>> efforts ...
>> 
>> That's very cool.  Can you file tickets in the issue tracker and attach patches
>> there?  The mailing list is where diffs go to be forgotten.
>> 
>> Here's a start: http://twistedmatrix.com/trac/ticket/3413
> 
> Hi Jean-Paul,
> 
> done: http://twistedmatrix.com/trac/ticket/3413#comment:21

Tobias,

Note that the primary missing criterion from this ticket is the presence of a buildbot running Jython.  Any chance you'd want to contribute another bot for this purpose?

Thanks!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130308/a90e8c70/attachment-0001.html>

From exarkun at twistedmatrix.com  Fri Mar  8 16:53:23 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Mar 2013 23:53:23 -0000
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20130308235323.4904.1538810689.divmod.xquotient.24@localhost6.localdomain6>

On 07:47 pm, tobias.oberstein at tavendo.de wrote:
>> >To my astonishment, I was able to get Autobahn working with minor
>> >efforts ...
>>
>>That's very cool.  Can you file tickets in the issue tracker and 
>>attach patches
>>there?  The mailing list is where diffs go to be forgotten.
>>
>>Here's a start: http://twistedmatrix.com/trac/ticket/3413
>
>Hi Jean-Paul,
>
>done: http://twistedmatrix.com/trac/ticket/3413#comment:21

Thanks!  Now feel free to harass people however you like in order to get 
them to pay attention to that issue. :)

I suspect one early task will be to get a Jython builder set up on 
http://buildbot.twistedmatrix.com/ again.

Jean-Paul



From adi at roiban.ro  Sat Mar  9 02:09:29 2013
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 9 Mar 2013 11:09:29 +0200
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <20130308235323.4904.1538810689.divmod.xquotient.24@localhost6.localdomain6>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
	<20130308235323.4904.1538810689.divmod.xquotient.24@localhost6.localdomain6>
Message-ID: <CAFycZ9dOd1rT4i5pBYEh4DM7M-Op3yU3TdehWRQU-0gSKWukqg@mail.gmail.com>

[snip]
> Thanks!  Now feel free to harass people however you like in order to get
> them to pay attention to that issue. :)
>
> I suspect one early task will be to get a Jython builder set up on
> http://buildbot.twistedmatrix.com/ again.

I can volunteer to run a Jython builder.

A couple of weeks ago (2012-12-15) I sent an email to
buildbot at twistedmatrix.com to ask for needed slaves. I have not got an
answer yet.

-- 
Adi Roiban



From jessica.mckellar at gmail.com  Sat Mar  9 09:32:27 2013
From: jessica.mckellar at gmail.com (Jessica McKellar)
Date: Sat, 9 Mar 2013 11:32:27 -0500
Subject: [Twisted-Python] Sprinting on Twisted at PyCon
Message-ID: <CAKDZRcg8RiHgRnTp6xkxRE_FD7ZSc5E9d2saaxuUq=4Ao5p3PQ@mail.gmail.com>

Hi all,

Will you be at the PyCon sprints? Want to work on Twisted? Add your name here:

https://us.pycon.org/2013/community/sprints/projects/

This is a great opportunity for new contributors to get started with
lots of in-person support. Also, if you won't be at PyCon this is
still a great time to sprint remotely.

See you there (or on the Internet)!
-Jessica



From tom.prince at ualberta.net  Sat Mar  9 11:58:24 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 09 Mar 2013 11:58:24 -0700
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <CAFycZ9dOd1rT4i5pBYEh4DM7M-Op3yU3TdehWRQU-0gSKWukqg@mail.gmail.com>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
	<20130308235323.4904.1538810689.divmod.xquotient.24@localhost6.localdomain6>
	<CAFycZ9dOd1rT4i5pBYEh4DM7M-Op3yU3TdehWRQU-0gSKWukqg@mail.gmail.com>
Message-ID: <87sj44flin.fsf@hermes.hocat.ca>

Adi Roiban <adi at roiban.ro> writes:
>> I suspect one early task will be to get a Jython builder set up on
>> http://buildbot.twistedmatrix.com/ again.
>
> I can volunteer to run a Jython builder.

Sure:
https://twistedmatrix.com/trac/wiki/ContinuousIntegration/TestSlaveConfiguration#DonatingaSlave

> A couple of weeks ago (2012-12-15) I sent an email to
> buildbot at twistedmatrix.com to ask for needed slaves. I have not got an
> answer yet.

The slaves that we have are more driven by what people want to support,
than by some central authority. There wouldn't be much point in having a
jython builder, if there weren't people interested in working on jython
support, for example.

We don't have a list of slaves that we are looking for, currently.

https://twistedmatrix.com/trac/wiki/NeededBuildSlaves

  Tom



From exarkun at twistedmatrix.com  Sat Mar  9 12:53:38 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 09 Mar 2013 19:53:38 -0000
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <87sj44flin.fsf@hermes.hocat.ca>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
	<20130308235323.4904.1538810689.divmod.xquotient.24@localhost6.localdomain6>
	<CAFycZ9dOd1rT4i5pBYEh4DM7M-Op3yU3TdehWRQU-0gSKWukqg@mail.gmail.com>
	<87sj44flin.fsf@hermes.hocat.ca>
Message-ID: <20130309195338.1939.248817130.divmod.xquotient.33@localhost6.localdomain6>

On 06:58 pm, tom.prince at ualberta.net wrote:
>Adi Roiban <adi at roiban.ro> writes:
>>>I suspect one early task will be to get a Jython builder set up on
>>>http://buildbot.twistedmatrix.com/ again.
>>
>>I can volunteer to run a Jython builder.
>
>Sure:
>https://twistedmatrix.com/trac/wiki/ContinuousIntegration/TestSlaveConfiguration#DonatingaSlave
>>A couple of weeks ago (2012-12-15) I sent an email to
>>buildbot at twistedmatrix.com to ask for needed slaves. I have not got an
>>answer yet.
>
>The slaves that we have are more driven by what people want to support,
>than by some central authority. There wouldn't be much point in having 
>a
>jython builder, if there weren't people interested in working on jython
>support, for example.

That said, adding redundant slaves for existing configurations will 
result in builds being completed more quickly, right?  And can offer 
more resilience  against offline slaves.  Faster, more reliable builds 
can lead to less wasted time during development.  So if this is true, 
and there are offers of hardware where we can run such slaves, I think 
this is worth pursuing.

Jean-Paul



From glyph at twistedmatrix.com  Sat Mar  9 15:50:55 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 9 Mar 2013 14:50:55 -0800
Subject: [Twisted-Python] Sprinting on Twisted at PyCon
In-Reply-To: <CAKDZRcg8RiHgRnTp6xkxRE_FD7ZSc5E9d2saaxuUq=4Ao5p3PQ@mail.gmail.com>
References: <CAKDZRcg8RiHgRnTp6xkxRE_FD7ZSc5E9d2saaxuUq=4Ao5p3PQ@mail.gmail.com>
Message-ID: <06FF1648-8DDA-471A-81EF-402F1B91F729@twistedmatrix.com>


On Mar 9, 2013, at 8:32 AM, Jessica McKellar <jessica.mckellar at gmail.com> wrote:

> Hi all,
> 
> Will you be at the PyCon sprints? Want to work on Twisted? Add your name here:
> 
> https://us.pycon.org/2013/community/sprints/projects/
> 
> This is a great opportunity for new contributors to get started with
> lots of in-person support. Also, if you won't be at PyCon this is
> still a great time to sprint remotely.

Signed up!  Looking forward to seeing you there.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130309/f59bd64a/attachment-0001.html>

From exarkun at twistedmatrix.com  Sat Mar  9 22:05:25 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 10 Mar 2013 05:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1362891925.43.1625951262@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130310/13107909/attachment.html>

From adi at roiban.ro  Mon Mar 11 02:17:25 2013
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 11 Mar 2013 10:17:25 +0200
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <20130309195338.1939.248817130.divmod.xquotient.33@localhost6.localdomain6>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
	<20130308235323.4904.1538810689.divmod.xquotient.24@localhost6.localdomain6>
	<CAFycZ9dOd1rT4i5pBYEh4DM7M-Op3yU3TdehWRQU-0gSKWukqg@mail.gmail.com>
	<87sj44flin.fsf@hermes.hocat.ca>
	<20130309195338.1939.248817130.divmod.xquotient.33@localhost6.localdomain6>
Message-ID: <CAFycZ9do0Usb50qWoJL1Y9vPDUnbxjpq-gO0Jvm_RTMowAKeqA@mail.gmail.com>

On 9 March 2013 21:53,  <exarkun at twistedmatrix.com> wrote:
> On 06:58 pm, tom.prince at ualberta.net wrote:
>>Adi Roiban <adi at roiban.ro> writes:
>>>>I suspect one early task will be to get a Jython builder set up on
>>>>http://buildbot.twistedmatrix.com/ again.
>>>
>>>I can volunteer to run a Jython builder.
>>
>>Sure:
>>https://twistedmatrix.com/trac/wiki/ContinuousIntegration/TestSlaveConfiguration#DonatingaSlave
>>>A couple of weeks ago (2012-12-15) I sent an email to
>>>buildbot at twistedmatrix.com to ask for needed slaves. I have not got an
>>>answer yet.
>>
>>The slaves that we have are more driven by what people want to support,
>>than by some central authority. There wouldn't be much point in having
>>a
>>jython builder, if there weren't people interested in working on jython
>>support, for example.
>
> That said, adding redundant slaves for existing configurations will
> result in builds being completed more quickly, right?  And can offer
> more resilience  against offline slaves.  Faster, more reliable builds
> can lead to less wasted time during development.  So if this is true,
> and there are offers of hardware where we can run such slaves, I think
> this is worth pursuing.

OK.
I can provide X86 virtual machines for Twisted project.
I have no idea how busy is the buildbot queue for Twisted.
Can you please suggest what kind of machines will help the most?

Thanks!

-- 
Adi Roiban



From tobias.oberstein at tavendo.de  Mon Mar 11 11:24:52 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 11 Mar 2013 10:24:52 -0700
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <CAFycZ9dOd1rT4i5pBYEh4DM7M-Op3yU3TdehWRQU-0gSKWukqg@mail.gmail.com>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
	<20130308235323.4904.1538810689.divmod.xquotient.24@localhost6.localdomain6>
	<CAFycZ9dOd1rT4i5pBYEh4DM7M-Op3yU3TdehWRQU-0gSKWukqg@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D44226DC054A@EXVMBX020-12.exch020.serverdata.net>

> [snip]
> > Thanks!  Now feel free to harass people however you like in order to
> > get them to pay attention to that issue. :)

;)

> >
> > I suspect one early task will be to get a Jython builder set up on
> > http://buildbot.twistedmatrix.com/ again.

Makes sense.

> 
> I can volunteer to run a Jython builder.

Thats great! I am interested in getting Twisted supported on Jython.

If you could take on that one .. would be nice. I am running a FreeBSD buildbot and I still want to add a PyPy bot also .. it's just I need to find a little time ..

> 
> A couple of weeks ago (2012-12-15) I sent an email to
> buildbot at twistedmatrix.com to ask for needed slaves. I have not got an answer
> yet.
> 
> --
> Adi Roiban
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From tobias.oberstein at tavendo.de  Mon Mar 11 11:30:25 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 11 Mar 2013 10:30:25 -0700
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <5C14366E-4047-4944-87A3-31C034A5227C@twistedmatrix.com>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
	<5C14366E-4047-4944-87A3-31C034A5227C@twistedmatrix.com>
Message-ID: <634914A010D0B943A035D226786325D44226DC055C@EXVMBX020-12.exch020.serverdata.net>


> Note that the primary missing criterion from this ticket is the presence of a buildbot running Jython.  Any chance you'd want to contribute another bot for this purpose?

Hi Glyph,

Ok. Makes sense. That would likely bring up some issues with Jython/Twisted then, which we could address ..

Apart from that, my guess is that another important area might be reactor support .. as far as I can see Jython as some Posix wrappers which makes it run on Windows only with the less-than-stellar Windows-Select stuff, not IOCP or such. Same might apply to BSDs and Linux (don't know if they have wrappers for kqeue/epoll).

At least from my totally unscientific performance measurements with Autobahn/Twisted, Jython/SELECT is slower than CPython/IOCP, not to speak of PyPy on stuff like kqueue/epoll ..

- Tobias




From glyph at twistedmatrix.com  Mon Mar 11 15:21:05 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 11 Mar 2013 14:21:05 -0700
Subject: [Twisted-Python] Twisted on Jython
In-Reply-To: <634914A010D0B943A035D226786325D44226DC055C@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D44226DBFCC8@EXVMBX020-12.exch020.serverdata.net>
	<20130308153436.4904.1593717097.divmod.xquotient.15@localhost6.localdomain6>
	<634914A010D0B943A035D226786325D44226DC0064@EXVMBX020-12.exch020.serverdata.net>
	<5C14366E-4047-4944-87A3-31C034A5227C@twistedmatrix.com>
	<634914A010D0B943A035D226786325D44226DC055C@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <B138C3AC-6125-45C9-A868-166E983A4B98@twistedmatrix.com>


On Mar 11, 2013, at 10:30 AM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:

> 
>> Note that the primary missing criterion from this ticket is the presence of a buildbot running Jython.  Any chance you'd want to contribute another bot for this purpose?
> 
> Hi Glyph,
> 
> Ok. Makes sense. That would likely bring up some issues with Jython/Twisted then, which we could address ..
> 
> Apart from that, my guess is that another important area might be reactor support .. as far as I can see Jython as some Posix wrappers which makes it run on Windows only with the less-than-stellar Windows-Select stuff, not IOCP or such. Same might apply to BSDs and Linux (don't know if they have wrappers for kqeue/epoll).
> 
> At least from my totally unscientific performance measurements with Autobahn/Twisted, Jython/SELECT is slower than CPython/IOCP, not to speak of PyPy on stuff like kqueue/epoll ..

This is to be expected; Jython generally isn't very fast.  If you want speed, use PyPy; it's going to be considerably faster than everything else.

If you want to make a Jython-specific reactor for performance or platform-feature reasons, that would be a separate task, well after the basic select reactor and all of our support code works on Jython :).

-glyph


From matt at conundrum.com  Mon Mar 11 19:40:30 2013
From: matt at conundrum.com (Matthew Pounsett)
Date: Mon, 11 Mar 2013 21:40:30 -0400
Subject: [Twisted-Python] debugging listenTCP
Message-ID: <366DD0FD-01BD-44B1-BE87-7E374C44E055@conundrum.com>


I've got a weird one here.   I've just come back to some code that I haven't worked on in a while, which is a simple XMLRPC server.  Last time I touched it I was working on adding cred support, so I'd gone from using a direct call to server.Site() in my listenTCP call to using my own factory/portal/etc.

When I fired it up this time, listenTCP was failing to bind to the requested ports, but not raising an exception.  I started writing up an email to ask about debugging this, but while doing information collection it started working again.  Then not.  Now it's working again.  It looks like I've got some sort of intermittent failure, but I have no idea how to track it down.

    # 'interfaces' is just a simple list of IP addresses.  The map()
    # call provides formatting for the log message
    logger.debug("Connecting to port {} on interfaces: {}".format(
        port, ", ".join(map( lambda x: "'{}'".format(x), interfaces))))
    for iface in interfaces:
        reactor.listenTCP(port, factory, interface=iface)
    reactor.run()

The application should bind to [::1]:8602 and 127.0.0.1:8602, and logging seems to indicate this is what it's trying to do.

01:28:31 [server      ] Connecting to port 8602 on interfaces: '::1', '127.0.0.1'

However, intermittently lsof and netstat are showing no binding.

> netstat -an | grep -c 8602
0

I tried turning on twisted's internal logging, but that is giving me nothing useful.  I see no way to turn up the debugging level on this log, but I normally use python's standard logger and perhaps I've missed some piece of documentation.  This is a sample from when it was failing:

2013-03-12 01:28:31+0000 [-] Log opened.
2013-03-12 01:28:31+0000 [-] ServerFactory starting on 8602
2013-03-12 01:28:31+0000 [-] Starting factory <insurrection.server.ServerFactory instance at 0x85a81488>
2013-03-12 01:28:31+0000 [-] ServerFactory starting on 8602

Can anyone suggest anything more I can do to track down the problem next time it crops up?





From davmaz at gmail.com  Wed Mar 13 21:04:32 2013
From: davmaz at gmail.com (Dave Mazzoni)
Date: Thu, 14 Mar 2013 03:04:32 +0000 (UTC)
Subject: [Twisted-Python] Twisted and serial port usage
Message-ID: <loom.20130314T035902-908@post.gmane.org>

I'm trying to use a serial port from the twisted library. 
I can get it to show a connection has been made but 
I get no 'dataReeived' calls when I send chars over the serial line. 
I know the serial line is working correctly. 
I think the structure of my program is at fault (of course).

Might anyone suggest the simplest program (for Linux) that 
uses the twisted library? I've got everything else working and love twisted,
but this 'addition' is not working for me.

Thanks,
Dave




From zounes99 at gmail.com  Wed Mar 13 22:40:59 2013
From: zounes99 at gmail.com (Eric Zounes)
Date: Wed, 13 Mar 2013 21:40:59 -0700
Subject: [Twisted-Python] Twisted and serial port usage
In-Reply-To: <loom.20130314T035902-908@post.gmane.org>
References: <loom.20130314T035902-908@post.gmane.org>
Message-ID: <CAO3xE830r8v6-CBr1vKOQc-pSzrkM-xtj-ipCCCx6ruuviYa7w@mail.gmail.com>

Hey there,

There's an interesting Twisted project which uses the Python Xbee module
for Zigbee networks. It implements SerialPort and can be found
here<https://github.com/trunet/txXBee>.
I hope this helps.

-Eric


On Wed, Mar 13, 2013 at 8:04 PM, Dave Mazzoni <davmaz at gmail.com> wrote:

> I'm trying to use a serial port from the twisted library.
> I can get it to show a connection has been made but
> I get no 'dataReeived' calls when I send chars over the serial line.
> I know the serial line is working correctly.
> I think the structure of my program is at fault (of course).
>
> Might anyone suggest the simplest program (for Linux) that
> uses the twisted library? I've got everything else working and love
> twisted,
> but this 'addition' is not working for me.
>
> Thanks,
> Dave
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130313/13f67dcf/attachment.html>

From sergun at gmail.com  Thu Mar 14 03:40:29 2013
From: sergun at gmail.com (Sergey Gerasimov)
Date: Thu, 14 Mar 2013 13:40:29 +0400
Subject: [Twisted-Python] eated traceback when decorate method already
	decorated by inlineCallbacks
Message-ID: <1b1501ce2097$f8926fa0$e9b74ee0$@gmail.com>

Hello to all!

Why traceback doesn't include call of g() here?

import traceback
from twisted.internet import defer, reactor

def decor1(f, *argv, **kw):
    @defer.inlineCallbacks
    def decor1():
        try:
            res = yield f(*argv, **kw)
            defer.returnValue(res)       
        except:
            traceback.print_exc()
    return decor1
    
@defer.inlineCallbacks
def g():
    raise AttributeError
    yield defer.succeed(1)

@decor1
@defer.inlineCallbacks
def f():
    yield g()   
    
f()
reactor.run()

I see just:
Traceback (most recent call last):
  File "C:\testing\test.py", line 9, in decor1
    res = yield f(*argv, **kw)
AttributeError





From sergun at gmail.com  Thu Mar 14 04:05:53 2013
From: sergun at gmail.com (Sergey Gerasimov)
Date: Thu, 14 Mar 2013 14:05:53 +0400
Subject: [Twisted-Python] logging in twisted based projects
Message-ID: <1b2001ce209b$84b2e7a0$8e18b6e0$@gmail.com>

I'm implementing some project based on twisted.

 

I would like to use some logging mechanism in my modules and see both
twisted generated log records and log records from my modules

and be able to filter log records by level and  source (generated by
twisted, or subset of my modules).

 

What should I do in this case?

Log with python logging module in my code and send log records generated by
twisted to PythonLoggingObserver? 

Or should I avoid using of python logging module and log only with twisted
logging module? I didn't find features like filtering logs in twisted
logging.

 

Am I right that twisted based log observer uses blocking i/o? Example:

observer = log.FileLogObserver(sys.stdout) # sys.stdio.write used in
implementation

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130314/ad3b2ea1/attachment.html>

From ltaylor.volks at gmail.com  Thu Mar 14 07:37:03 2013
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Thu, 14 Mar 2013 06:37:03 -0700
Subject: [Twisted-Python] logging in twisted based projects
In-Reply-To: <1b2001ce209b$84b2e7a0$8e18b6e0$@gmail.com>
References: <1b2001ce209b$84b2e7a0$8e18b6e0$@gmail.com>
Message-ID: <D52F6E44-96BA-4CFB-83DA-E89AF0A69AF7@gmail.com>


On Mar 14, 2013, at 3:05 AM, Sergey Gerasimov wrote:

> I’m implementing some project based on twisted.
>  
> I would like to use some logging mechanism in my modules and see both twisted generated log records and log records from my modules
> and be able to filter log records by level and  source (generated by twisted, or subset of my modules).
>  
> What should I do in this case?
> Log with python logging module in my code and send log records generated by twisted to PythonLoggingObserver?
> Or should I avoid using of python logging module and log only with twisted logging module? I didn’t find features like filtering logs in twisted logging.
>  
> Am I right that twisted based log observer uses blocking i/o? Example:
> observer = log.FileLogObserver(sys.stdout) # sys.stdio.write used in implementation
>  

FileLogObserver will honor a 'system' kwarg that can be used to log the source of a message, so that:

	log.msg('Important message', system='MY_MODULE')

yields:

	2012-11-12 18:53:55-0700 [MY_MODULE] Important message


Arbitrary message formatting can be accomplished by suppling a `format` kwarg in place of a message:

	log.msg(format='[%(level)s] %(msg)s', level='CATASTROPHIC', msg='Important Message', system='MY_MODULE')

yields:

	2012-11-12 18:53:55-0700 [MY_MODULE] [CATASTROPHIC] Important message


That's a bit verbose, so creating a partial wrapper is useful:

from functools import partial
alert = partial(log.msg, format='[%(level)s] %(msg)s', level='CATASTROPHIC', system='MY_MODULE')

alert(msg='Something terrible')
alert(msg='Not so bad', level='INFO')  # override the default level


More generally, calls to log.msg() accept keyword arguments that can be inspected by any registered observer. You may want to write your own log observer and take advantage of this if you have specific filtering requirements.



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130314/cac4a8b8/attachment.html>

From stephen at thorne.id.au  Thu Mar 14 07:52:23 2013
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu, 14 Mar 2013 13:52:23 +0000
Subject: [Twisted-Python] logging in twisted based projects
In-Reply-To: <1b2001ce209b$84b2e7a0$8e18b6e0$@gmail.com>
References: <1b2001ce209b$84b2e7a0$8e18b6e0$@gmail.com>
Message-ID: <CAFPU7=sH1Qf3Qps87cUXFspf7Wf+Jp5M3=O_P3hQYtRPLD_3qA@mail.gmail.com>

It's also perfectly fine to use python's logging module from within
twisted, you don't have to use twisted.log, but you should be aware this
will make your log files hard to correlate (between twistd.log and your own
logfiles).


On Thu, Mar 14, 2013 at 10:05 AM, Sergey Gerasimov <sergun at gmail.com> wrote:

> I’m implementing some project based on twisted.****
>
> ** **
>
> I would like to use some logging mechanism in my modules and see both
> twisted generated log records and log records from my modules****
>
> and be able to filter log records by level and  source (generated by
> twisted, or subset of my modules).****
>
> ** **
>
> What should I do in this case?****
>
> Log with python logging module in my code and send log records generated
> by twisted to PythonLoggingObserver? ****
>
> Or should I avoid using of python logging module and log only with twisted
> logging module? I didn’t find features like filtering logs in twisted
> logging.****
>
> ** **
>
> Am I right that twisted based log observer uses blocking i/o? Example:****
>
> observer = log.FileLogObserver(sys.stdout) # sys.stdio.write used in
> implementation****
>
> ** **
>
> ** **
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130314/6a5d5282/attachment.html>

From exarkun at twistedmatrix.com  Thu Mar 14 08:20:46 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 14 Mar 2013 14:20:46 -0000
Subject: [Twisted-Python] eated traceback when decorate method already
 decorated by inlineCallbacks
In-Reply-To: <1b1501ce2097$f8926fa0$e9b74ee0$@gmail.com>
References: <1b1501ce2097$f8926fa0$e9b74ee0$@gmail.com>
Message-ID: <20130314142046.5790.387630841.divmod.xquotient.39@localhost6.localdomain6>

On 09:40 am, sergun at gmail.com wrote:
>Hello to all!
>
>Why traceback doesn't include call of g() here?

Tracebacks are tricky, and inlineCallbacks doesn't make them look 
exactly like they would look if you didn't have Deferreds.

twisted.python.failure is a little bit better at handling tracebacks 
from this sort of code than the traceback module is, so if you write the 
code like this things will at least be a little better:

    from twisted.python.failure import Failure

    def decor1():
        try:
            res = yield f(*argv, **kw)
        except:
            Failure.printTraceback()
        else:
            defer.returnValue(res)

Notice also that I moved returnValue outside of the try block. 
`returnValue` is implemented using exceptions, so you *must not* catch 
and handle the exception it raises or it won't work.

Jean-Paul
>import traceback
>from twisted.internet import defer, reactor
>
>def decor1(f, *argv, **kw):
>    @defer.inlineCallbacks
>    def decor1():
>        try:
>            res = yield f(*argv, **kw)
>            defer.returnValue(res)
>        except:
>            traceback.print_exc()
>    return decor1
>
>@defer.inlineCallbacks
>def g():
>    raise AttributeError
>    yield defer.succeed(1)
>
>@decor1
>@defer.inlineCallbacks
>def f():
>    yield g()
>
>f()
>reactor.run()
>
>I see just:
>Traceback (most recent call last):
>  File "C:\testing\test.py", line 9, in decor1
>    res = yield f(*argv, **kw)
>AttributeError
>
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Thu Mar 14 08:57:30 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 14 Mar 2013 14:57:30 -0000
Subject: [Twisted-Python] logging in twisted based projects
In-Reply-To: <CAFPU7=sH1Qf3Qps87cUXFspf7Wf+Jp5M3=O_P3hQYtRPLD_3qA@mail.gmail.com>
References: <1b2001ce209b$84b2e7a0$8e18b6e0$@gmail.com>
	<CAFPU7=sH1Qf3Qps87cUXFspf7Wf+Jp5M3=O_P3hQYtRPLD_3qA@mail.gmail.com>
Message-ID: <20130314145730.5790.1276230248.divmod.xquotient.51@localhost6.localdomain6>

On 01:52 pm, stephen at thorne.id.au wrote:
>It's also perfectly fine to use python's logging module from within
>twisted, you don't have to use twisted.log, but you should be aware 
>this
>will make your log files hard to correlate (between twistd.log and your 
>own
>logfiles).

For posterity: within programs that *use* Twisted.

Please don't use it within code being contributed to Twisted itself. :)

Also, there is no such thing as "twisted.log".  There is 
"twisted.python.log".

Also, using stdlib logging doesn't necessarily force you to have two log 
files.  It sounds like Sergey already knows how to avoid this, since he 
mentioned PythonLoggingObserver which bridges twisted.python.log to 
stdlib logging.

Also, twisted.python.log doesn't prevent any filtering you might want to 
do, it just doesn't support it the same way the stdlib logging module 
does it.  If you want to filter log messages, a good way to do it is 
probably to write a log observer that implements your filtering logic 
and then passes any unfiltered messages to another log observer.  In 
this way you can apply filtering regardless of what ultimate observer 
you want to use.

For example:

    def makeLevelFilter(level, observer):
        def filter(event):
            if event.get("level", 0) > level:
                return observer(event)
        return filter

    obs = FileLogObserver(...)
    addObserver(makeLevelFilter(7, obs.emit))

Jean-Paul
>
>On Thu, Mar 14, 2013 at 10:05 AM, Sergey Gerasimov <sergun at gmail.com> 
>wrote:
>>I’m implementing some project based on twisted.****
>>
>>** **
>>
>>I would like to use some logging mechanism in my modules and see both
>>twisted generated log records and log records from my modules****
>>
>>and be able to filter log records by level and  source (generated by
>>twisted, or subset of my modules).****
>>
>>** **
>>
>>What should I do in this case?****
>>
>>Log with python logging module in my code and send log records 
>>generated
>>by twisted to PythonLoggingObserver? ****
>>
>>Or should I avoid using of python logging module and log only with 
>>twisted
>>logging module? I didn’t find features like filtering logs in twisted
>>logging.****
>>
>>** **
>>
>>Am I right that twisted based log observer uses blocking i/o? 
>>Example:****
>>
>>observer = log.FileLogObserver(sys.stdout) # sys.stdio.write used in
>>implementation****
>>
>>** **
>>
>>** **
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From _ at lvh.cc  Thu Mar 14 16:56:12 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Thu, 14 Mar 2013 15:56:12 -0700
Subject: [Twisted-Python] Twisted BoF session
Message-ID: <CAE_Hg6b+pL_YTyTuA48VCNLOA78WSAJ5SBZtGm0OVBRtwN8FCg@mail.gmail.com>

I'm organizing a Twisted BoF session/open space.

I've tried to get a combination of a) nice room b) no collisions with
anyone's talks. I have it down for 7-9 in Great America Meeting Room 2
(that's next to the room where Itamar's tutorial was).

I'm in charge of open spaces, so I can probably cater to any objections I
get before late tonight.

-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130314/831f18db/attachment-0001.html>

From _ at lvh.cc  Thu Mar 14 23:34:13 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Thu, 14 Mar 2013 22:34:13 -0700
Subject: [Twisted-Python] Twisted BoF session
In-Reply-To: <CAE_Hg6b+pL_YTyTuA48VCNLOA78WSAJ5SBZtGm0OVBRtwN8FCg@mail.gmail.com>
References: <CAE_Hg6b+pL_YTyTuA48VCNLOA78WSAJ5SBZtGm0OVBRtwN8FCg@mail.gmail.com>
Message-ID: <CAE_Hg6Y7RaUYZAbkEF42xHE6QaRjPMRDjSYxhZ27zJTA6M_C0Q@mail.gmail.com>

By the way, this is *Friday*

On Thursday, March 14, 2013, Laurens Van Houtven <_ at lvh.cc> wrote:

> I'm organizing a Twisted BoF session/open space.
>
> I've tried to get a combination of a) nice room b) no collisions with
> anyone's talks. I have it down for 7-9 in Great America Meeting Room 2
> (that's next to the room where Itamar's tutorial was).
>
> I'm in charge of open spaces, so I can probably cater to any objections I
> get before late tonight.
>
> --
> cheers
> lvh
>


-- 
Sent from Gmail Mobile
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130314/e88e2fb6/attachment.html>

From glyph at twistedmatrix.com  Fri Mar 15 01:17:43 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 15 Mar 2013 00:17:43 -0700
Subject: [Twisted-Python] Twisted BoF session
In-Reply-To: <CAE_Hg6b+pL_YTyTuA48VCNLOA78WSAJ5SBZtGm0OVBRtwN8FCg@mail.gmail.com>
References: <CAE_Hg6b+pL_YTyTuA48VCNLOA78WSAJ5SBZtGm0OVBRtwN8FCg@mail.gmail.com>
Message-ID: <53FFA779-F320-4E66-85E8-3F26C1E67D65@twistedmatrix.com>


On Mar 14, 2013, at 3:56 PM, Laurens Van Houtven <_ at lvh.cc> wrote:

> I'm organizing a Twisted BoF session/open space.
> 
> I've tried to get a combination of a) nice room b) no collisions with anyone's talks. I have it down for 7-9 in Great America Meeting Room 2 (that's next to the room where Itamar's tutorial was).
> 
> I'm in charge of open spaces, so I can probably cater to any objections I get before late tonight.

Is there anywhere we should sign up?




From jonathan+twisted at jsphere.com  Fri Mar 15 05:11:07 2013
From: jonathan+twisted at jsphere.com (Jonathan Jacobs)
Date: Fri, 15 Mar 2013 13:11:07 +0200
Subject: [Twisted-Python] Final request URI from an Agent response
Message-ID: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>

Hello Twisters, 

I'm interested in working on ticket #5435: The ability to discover the final URI of an Agent request/response. Thomas summarised a previous IRC conversation on this topic quite well in a comment on the ticket [1].

The biggest issue I've encountered so far is that Request.uri is a relative URI. Since it is not possible to reconstruct an absolute URI given the information that Request has, at the very least the URI scheme is lost, we have a few options:

* Allow Request.uri to be either an absolute URI or a relative URI byte string, however this means that consumers of this attribute need to be aware that it could be either;

* Add a new attribute/method to Request (and parameter to Request.__init__) for the absolute URI, again this means that consumers need to be aware that the absolute URI might not be present.

If we are to change Request's URI API, it would be a good idea to do this as few times as possible. (One seems like a good number to me.)

JP commented that it would be nice if there was an object that represented a URL we could use, referring to ticket #5388. And although I would love to see #5388 finished (and might even be persuaded to work on it), discussions with Itamar and reading ticket comments have left me weary of the many nuanced complexities of this task.

What are the thoughts on changing the meaning of Request.uri?

Should the IRI branch be finished before attempting this ticket? (Note that this doesn't necessarily include my volunteering.)


[1] <https://twistedmatrix.com/trac/ticket/5435#comment:9> 

-- 
Jonathan





From _ at lvh.cc  Fri Mar 15 08:50:36 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Fri, 15 Mar 2013 07:50:36 -0700
Subject: [Twisted-Python] Twisted BoF session
In-Reply-To: <53FFA779-F320-4E66-85E8-3F26C1E67D65@twistedmatrix.com>
References: <CAE_Hg6b+pL_YTyTuA48VCNLOA78WSAJ5SBZtGm0OVBRtwN8FCg@mail.gmail.com>
	<53FFA779-F320-4E66-85E8-3F26C1E67D65@twistedmatrix.com>
Message-ID: <CAE_Hg6bR=sVxA_p0uBY4OwGcdG3UKXHMV_MQ6QrP8PzQRzKucw@mail.gmail.com>

Nah; I mean, you could, but it'd only be for advertisement reasons, but I'm
guessing all the usual suspects will show up anyway. It doesn't help me
much in terms of admin, I just picked a room that looks like it'd be big
enough for the amount of people I'd expect :)


On Fri, Mar 15, 2013 at 12:17 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 14, 2013, at 3:56 PM, Laurens Van Houtven <_ at lvh.cc> wrote:
>
> > I'm organizing a Twisted BoF session/open space.
> >
> > I've tried to get a combination of a) nice room b) no collisions with
> anyone's talks. I have it down for 7-9 in Great America Meeting Room 2
> (that's next to the room where Itamar's tutorial was).
> >
> > I'm in charge of open spaces, so I can probably cater to any objections
> I get before late tonight.
>
> Is there anywhere we should sign up?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130315/ef249ce2/attachment.html>

From contact at rkade.fr  Fri Mar 15 09:32:12 2013
From: contact at rkade.fr (rakdeFR)
Date: Fri, 15 Mar 2013 16:32:12 +0100
Subject: [Twisted-Python] Jabber client, tls and iqauth
Message-ID: <51433EFC.4010608@rkade.fr>

Hi!

I did some searches about my problem and didn't find any thing that 
match in the archives.

I'm trying to do a simple jabber client with the twisted framework in 
order to automatically send messages.

The server is a prosody server, and enabled the tls and iq auth.

So far, I can connect to the server, and can't login.

If I'm doing a XmlStreamFactory with the basicClientFactory, I have 
these initializers/authenticator:
Initializers 
[<twisted.words.protocols.jabber.xmlstream.TLSInitiatingInitializer 
object at 0x2c1ef50>, 
<twisted.words.protocols.jabber.client.IQAuthInitializer object at 
0x2c1ef90>]
Authenticator <twisted.words.protocols.jabber.client.BasicAuthenticator 
instance at 0x10f2320>

And if I create a XMPPClientFactory, I have these:
Initializers 
[<twisted.words.protocols.jabber.client.CheckVersionInitializer object 
at 0x2fe7f50>, 
<twisted.words.protocols.jabber.xmlstream.TLSInitiatingInitializer 
object at 0x2fe7fd0>, 
<twisted.words.protocols.jabber.sasl.SASLInitiatingInitializer object at 
0x2ff1050>, <twisted.words.protocols.jabber.client.BindInitializer 
object at 0x2ff1090>, 
<twisted.words.protocols.jabber.client.SessionInitializer object at 
0x2ff10d0>]
Authenticator <twisted.words.protocols.jabber.client.XMPPAuthenticator 
instance at 0x2fdd320>

So I look up the SEND and RECV message between the client and server, 
and I notice that if I do a XMPPClientFactory, it's doing a tls 
connection, then say it doesn't have the feature for iq auth.
And if I'm doing a basicClientFactory, I don't have the tls, so when it 
tries to logon with iq, the server answers that it needs the tls.

After noticing that, I tried to change the initializers and the 
authenticator in the connected function.
But when I'm doing a XMPPClientFactory with a BasicAuthenticator, I 
don't have the tls anymore.

What do I need to change in order to have the tls and after the iq auth?

Thank you for your help.

rkadeFR

My current code:
19 class ClientXMPP(object):
  20     def __init__(self, jid_user, password_user):
  21         self.reactor = reactor
  22         XmlStreamFactory = client.basicClientFactory(jid_user, 
password_user)
  23         
XmlStreamFactory.addBootstrap(xmlstream.STREAM_CONNECTED_EVENT, 
self.connected)
  24         XmlStreamFactory.addBootstrap(xmlstream.STREAM_END_EVENT, 
self.disconnected)
  25         XmlStreamFactory.addBootstrap(xmlstream.STREAM_AUTHD_EVENT, 
self.authenticated)
  26         XmlStreamFactory.addBootstrap(xmlstream.INIT_FAILED_EVENT, 
self.init_failed)
  27         connector = SRVConnector(reactor, 'xmpp-client', 
jid_user.host, XmlStreamFactory)
  28         connector.connect()
  29         self.finished = Deferred()
  30
  31     def rawDataIn(self, buf):
  32         print "RECV: %s" % unicode(buf, 'utf-8').encode('ascii', 
'replace')
  33
  34     def rawDataOut(self, buf):
  35         print "SEND: %s" % unicode(buf, 'utf-8').encode('ascii', 
'replace')
  36
  37     def connected(self, xs):
  38         xs.rawDataInFn = self.rawDataIn
  39         xs.rawDataOutFn = self.rawDataOut
  40         print 'Connected.'
  41         self.xmlstream = xs
  42 #
  43         print 'Initializers', xs.initializers
  44         print 'Authenticator', xs.authenticator
  45         print 'Am I initialized?', xs.initiating
  46         # Log trafic out
  47
  48     def disconnected(self, xs):
  49         print 'Disconnected.'
  50         self.finished.callback(None)
  51
  52     def authenticated(self, xs):
  53         print "Authenticated."
  54         presence = domish.Element((None, 'presence'))
  55         xs.send(presence)
  56         self.reactor.callLater(5, xs.sendFooter)
  57
  58     def send(self, message):
  59         print 'Send', message
  60
  61     def init_failed(self, failure):
  62         print "Initialization failed. Failure:"
  63         print failure
  64 #        self.xmlstream.sendFooter()
  65 #        self.xmlstream.authenticator.initializeStream()



From sergun at gmail.com  Fri Mar 15 13:03:33 2013
From: sergun at gmail.com (Sergey Gerasimov)
Date: Fri, 15 Mar 2013 23:03:33 +0400
Subject: [Twisted-Python] eated traceback when decorate method already
	decorated by inlineCallbacks
In-Reply-To: <20130314142046.5790.387630841.divmod.xquotient.39@localhost6.localdomain6>
References: <1b1501ce2097$f8926fa0$e9b74ee0$@gmail.com>
	<20130314142046.5790.387630841.divmod.xquotient.39@localhost6.localdomain6>
Message-ID: <B5F08EED-8BEC-4C44-954B-A0A689BED5B4@gmail.com>



14.03.2013, в 18:20, exarkun at twistedmatrix.com написал(а):

> On 09:40 am, sergun at gmail.com wrote:
>> Hello to all!
>> 
>> Why traceback doesn't include call of g() here?
> 
> Tracebacks are tricky, and inlineCallbacks doesn't make them look 
> exactly like they would look if you didn't have Deferreds.
> 
> twisted.python.failure is a little bit better at handling tracebacks 
> from this sort of code than the traceback module is, so if you write the 
> code like this things will at least be a little better:
> 
>    from twisted.python.failure import Failure
> 
>    def decor1():
>        try:
>            res = yield f(*argv, **kw)
>        except:
>            Failure.printTraceback()
>        else:
>            defer.returnValue(res)

How can I catch failure?

In your example you call printTraceback as classmethod but it is instance one.



> Notice also that I moved returnValue outside of the try block. 
> `returnValue` is implemented using exceptions, so you *must not* catch 
> and handle the exception it raises or it won't work.

Thanks for that detail!

> 
> Jean-Paul
>> import traceback
>> from twisted.internet import defer, reactor
>> 
>> def decor1(f, *argv, **kw):
>>   @defer.inlineCallbacks
>>   def decor1():
>>       try:
>>           res = yield f(*argv, **kw)
>>           defer.returnValue(res)
>>       except:
>>           traceback.print_exc()
>>   return decor1
>> 
>> @defer.inlineCallbacks
>> def g():
>>   raise AttributeError
>>   yield defer.succeed(1)
>> 
>> @decor1
>> @defer.inlineCallbacks
>> def f():
>>   yield g()
>> 
>> f()
>> reactor.run()
>> 
>> I see just:
>> Traceback (most recent call last):
>> File "C:\testing\test.py", line 9, in decor1
>>   res = yield f(*argv, **kw)
>> AttributeError
>> 
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From mithrandi at mithrandi.net  Fri Mar 15 19:40:53 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 16 Mar 2013 03:40:53 +0200
Subject: [Twisted-Python] eated traceback when decorate method already
 decorated by inlineCallbacks
In-Reply-To: <20130314142046.5790.387630841.divmod.xquotient.39@localhost6.localdomain6>
References: <1b1501ce2097$f8926fa0$e9b74ee0$@gmail.com>
	<20130314142046.5790.387630841.divmod.xquotient.39@localhost6.localdomain6>
Message-ID: <CAMcKhMQdHLGDkMcyQq7Fh=ySOR3u0xm=zg5FMw1m7MxDC1AGGw@mail.gmail.com>

On Thu, Mar 14, 2013 at 4:20 PM,  <exarkun at twistedmatrix.com> wrote:
>         except:
>             Failure.printTraceback()

I think this was supposed to be:

except:
    Failure().printTraceback()



From itamar at futurefoundries.com  Fri Mar 15 20:20:39 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Fri, 15 Mar 2013 19:20:39 -0700
Subject: [Twisted-Python] Final request URI from an Agent response
In-Reply-To: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>
References: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>
Message-ID: <CAOp9P3pmqt2Gt0XtL4uKScMD-CR4=5oJmbmhxF7++JoExOq98Q@mail.gmail.com>

On Fri, Mar 15, 2013 at 4:11 AM, Jonathan Jacobs <
jonathan+twisted at jsphere.com> wrote:

>
> Should the IRI branch be finished before attempting this ticket? (Note
> that this doesn't necessarily include my volunteering.)
>
>
The IRI ticket should *not* be a dependency. It would be nice, but it's
unlikely it will happen anytime soon.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130315/3d853cc0/attachment.html>

From abdulraufhaseeb at gmail.com  Sat Mar 16 04:22:47 2013
From: abdulraufhaseeb at gmail.com (Abdul Rauf)
Date: Sat, 16 Mar 2013 15:52:47 +0530
Subject: [Twisted-Python] Lore, Sphinx,
 and getting to the finish line (was: re: lore and tickets and other
 stuff)
In-Reply-To: <CA+U=zK178dwz6A_+V1cy60rK0O-b3KC01dzjEQkdKj82iXB_sw@mail.gmail.com>
References: <0A6E14E9-7715-4D65-AD46-404E7E9F61F0@twistedmatrix.com>
	<CA+U=zK0sQnhLzKjg8wf9a_hAa0Ydoz+bKUeutTTOt_DS+3FrXQ@mail.gmail.com>
	<4CADFE0C-E47A-40CC-B0E3-624A4344BDD6@twistedmatrix.com>
	<CA+U=zK2MWopdfKhjBEWK9-HFMDsVOYLAc+BaZ6ec_DzAyKXB3A@mail.gmail.com>
	<739CAE65-F29E-4FA8-96BF-A6C1548A9E02@twistedmatrix.com>
	<CA+U=zK178dwz6A_+V1cy60rK0O-b3KC01dzjEQkdKj82iXB_sw@mail.gmail.com>
Message-ID: <CADfPSp9N7PpQOReVYW0XEwoi2tmTpVL9j3KG0nvB6+MDfi47Cg@mail.gmail.com>

Hi,
I am very much interested to complete this project, i did apply to
Gsoc last time with this project and was rejected (however there were
better students). And i would be happy if i can take this time. Let me
know your thoughts.


On 3/7/13, Kevin Horn <kevin.horn at gmail.com> wrote:
> Sorry it's taken me so long to get back to this.  But it's gotten to be a
> Looong email.
>
> On Sat, Mar 2, 2013 at 3:14 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>> On Mar 1, 2013, at 9:35 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>>
>> That "never-ending" series of Lore source fixes took place over the
>> course
>> of a couple of weeks.  Doing things that way was not my idea, though it
>> seemed reasonable at the time because  the idea was that we would do the
>> cutover at the end of it.
>>
>>
>> Well, let's go to the video tape. Based on this comment -  <
>> http://twistedmatrix.com/trac/ticket/4500#comment:12> - these tickets
>> were closed over a period ranging from 2010/07 to 2011/03. 6 months isn't
>> quite "weeks", but okay I guess it wasn't "never-ending" either :).
>>
>>
> Hmmm.  I recall it as being much shorter.  Probably most of the work took
> place it two "spurts" around the beginning and end of that time, and that's
> why I remember it that way.  But I'm not interested in digging through a
> bunch of old dates to find out for sure.
>
>
>> (As an aside, lore2sphinx is in no way a "broken pile of regexes".  Not
>> to
>> say that it isn't broken in some really significant ways, because it is,
>> but it doesn't use regexes at all.  Just sayin'.)
>>
>>
>> Actually yeah, "regex" is just a curse-word here :).  It's the emitter
>> I'm
>> complaining about, anyway, not the parser, so deriding it as a "regex" is
>> in no way accurate.
>>
>
> I figured that was the case, I just wanted to say something so others
> reading this didn't get the wrong impression about how lore2sphinx is
> implemented.  I mean it's not code I'm very proud of, but it's not _that_
> bad :)
>
>
> <<< snip a bunch of stuff about who said what when, why I thought what I
> thought, etc. >>>
>
> It boils down to the fact that a bunch of the conversations happened either
> in person or on IRC.  This was mostly because I was in a hurry at the time,
> usually because I wanted to do something before additions were made to the
> documentation, which was in a somewhat "known" state (as in I knew how it
> was going to behave when run through lore2sphinx) at the time.
>
> Also, please elaborate on what you mean  by "do *everything* in one big
>> bang.  My intention was never to do anything but get the SphinxBuilder
>> working on that branch.  Was there something else you thought I was
>> doing?
>>  Was there something else I should (or should not) have been doing?
>>
>>
>> My reasoning goes like this: the ticket for the release tools is still
>> not
>> in review, so you must be waiting for something to re-submit it.  It
>> looks
>> like you responded to the code, so the only thing I could think you were
>> still waiting for would be for the lore sources themselves to be ready.
>>
>>
> It's been long enough that I can't fully recall my reasoning on this.  But
> _probably_ I decided that if I finished the release tools ticket, someone
> might use it.  Which would be great, except that I think I had decided that
> before that actually happened I needed to figure out a way to emit nicer
> output from lore2sphinx.  So I left it alone until I had figured out how to
> do that.
>
> At least, that _might_ have been part of my thought process.  It really was
> ages ago.
>
> [the fixed-up Lore sources] got left alone because of the release tools
>> hangup.  Ideally the release tools would have been done before the whole
>> lore-source-tweaking process, but they weren't.  I'll admit my
>> frustration
>> played a part in this, but so did the deafening silence I got when I
>> asked
>> for anyone to comment on the ticket.
>>
>>
>> Where and how did you ask people to comment on the ticket?  I don't
>> recall
>> being asked, and I tend to be pretty good about leaving prompts like that
>> in my inbox until I've done what was asked.  (Not *perfect*, of course,
>> and
>> if you asked a list then there might have been some bystander effect.)
>> It
>> seems like we might have avoided this whole mess if you had just attached
>> the 'review' keyword :).
>>
>
> On IRC.
>
>
>>
>> My perception has been that I would say "what do we need to do to make
>> this happen"?  There would be some hemming and hawing (and at least
>> several
>> times long discussions about how documentation didn't really fit the
>> regular UQDS process) and a sort of plan would be invented.  I would
>> proceed according to the plan as I understood it.  I would then say "OK,
>> we're ready"!  And then be told that some other thing not in the plan
>> needed to be done.  The cycle would then repeat.
>>
>>
>> The only "cycle" I can either see on the tickets or recall here is where
>> the release tools didn't come in to the initial plan.
>>
>
> This was the latest of several (3 or 4) according to my
> recollection/perception.  It doesn't really matter now.
>
>
>> No [the need for release automation] was not brought up until well into
>> the process. I (sort of) understand the desire for this, but it seems
>> pretty weird to be building what is essentially a wrapper for an existing
>> tool, along with tests for said wrapper,
>>
>>
>> OK.  I can believe that this did not happen.  One problem is that we (the
>> inner-circle old-school Twisted developers) tend to engage in
>> conversations
>> about how a thing might be done while at the same time we discuss what
>> must
>> be done.  And we also tend to discuss what policy is (or what all or some
>> of us believe it *ought to be* in some case, further confusing the issue)
>> without making explicit what the *purpose* of that requirement is.
>>
>> I would ask the community to help us with this by doing a couple of
>> things.
>>
>> If somebody says "X is policy", always ask for a link to it.  If there is
>> a link, it'll help you understand it better.  If there *isn't* a link,
>> then the authority telling you it's "policy" might just be remembering
>> that
>> it's the way we've done things since forever and of course it's a good
>> idea.  There are definitely things that I have thought were in the coding
>> standard that are not actually written down anywhere, on more than one
>> occasion.
>>
>> If a meandering discussion is happening - here, on the mailing list, on
>> the ticket - never be afraid to break it up and separate out the
>> different
>> concerns which are being discussed: what is necessary for compliance with
>> our development process, what would be a good idea from a design point of
>> view, how the work might be broken up to get through review more
>> manageably, what other concerns are in play.
>>
>> Especially, if you ever see a code review where a reviewer says "I
>> think..." without making it clear what you should *do*, you should always
>> ask, 'is this a requirement of the review or just some thoughts you
>> have'.
>>
>>
> And when we ask, we should ask on the ticket, and put it back into review,
> yes?  Because I think this was the part (or at least _A_ part) I was really
> missing here.
>
>
>> There's also the problem of "I think you should..." being interpreted as
>> "You must...".  It is *very* hard to consistently separate design
>> feedback from code review, although we try very hard; but, it's hard to
>> separate it out when reading it as well.  So one important point to keep
>> in
>> mind is that, as the author of a proposed change, outside the things that
>> are agreed upon policy consensus, you always have some degree of
>> discretion
>> to disagree with a reviewer.  And you should freely do so when submitting
>> anything for re-review.  It's best to just do this as quickly as
>> possible,
>> so that it gets back to the reviewer without a whole lot of delay, and
>> they
>> can respond with either "I still disagree, but you're doing the work, so
>> OK
>> go ahead" or "No, you really have to do this, it's required by policy
>> document X, here's a link" ;-).
>>
>>
>>>    1. The documentation itself needs to be able to be generated from any
>>>    version of trunk.  While one or two formatting snafus are acceptable
>>> to be
>>>    fixed after the fact, the documentation needs to be in a
>>> comprehensible
>>>    state in every revision of trunk, which means that in order to land
>>> on
>>>    trunk, the ReST output.
>>>
>>> So...you didn't finish that sentence.  I realize you apologized for
>> errors at the end of your mail, but I have a feeling you were going to
>> say
>> something rather important there...
>>
>>
>> Well yes, that was the point of the apology.  That was a rather important
>> thing.  What I was probably going to say was just:
>>
>> The ReST output needs to be in good enough shape to be generally
>> readable,
>> with a manageable number of errors.  But, we need to be able to *verify*
>> that it has not too many errors.
>>
>>
>> And I'd already discussed that somewhat above.
>>
>> Now that I've replied to all of that, let me give you a rundown of what
>> I've been thinking and planning, so that you have an idea of where I'm
>> coming from.
>>
>> Here are the various things that I have perceived to be
>> necessary/required
>> in order to get the conversion to happen:
>>
>> a) The conversion process needs to be able to be run concurrently with
>> Lore for an extended period of time.  In other words, Lore would be the
>> "official" version of the docs, and the Sphinx docs would be built in
>> some
>> form of automated fashion until everyone was happy with them and/or ready
>> to deprecate/abandon Lore.
>>
>>
>> Your understanding of this requirement is slightly off, I think, although
>> possibly the consequences are the same.  As per the difficulties I laid
>> out
>> above, about separating the requirements from the strategies for
>> satisfying
>> said requirements.
>>
>
> I've been told that almost verbatim, several times.  This is basically what
> led to the Sphinx buildbot happening.  Perhaps I wasn't clear about what I
> meant.
>
>
>> The thing that we weren't going to tolerate was any message saying that
>> people should hold off on writing documentation, even for "a little
>> while"
>> while we fixed up the lore conversion, because without a contractual
>> obligation for someone to finish this work, there's really no telling how
>> long "a little while" would be :).
>>
>
> Well, when I originally was pushing it, my plan was for that little while
> to be "today" (this was at PyCon during the only day of sprints I was able
> to attend), and if it didn't get done, we'd abandon that particular
> attempt.  You and exarkun managed to convince me that even this was
> probably not a very good idea though.
>
>
>> Since the whole point of this sphinx conversion is to appeal to
>> documentation authors who prefer the ReST format as input (it's
>> definitely
>> not to make the docs look nicer, writing a new stylesheet for Lore would
>> have taken 1/100th of the effort and nobody has expressed interest in
>> doing
>> that), creating a period where things were even *less* appealing to
>> documentation authors would defeat the purpose.
>>
>
> I actually considered the stylesheet thing, but it was really only a
> passing thought.  My personal motivation started with not being able to
> find things in the documentation.  So I started looking at the various Lore
> tickets to see whether there was something to clean up that would help.
>  And a bunch of them seemed to be asking for things that Sphinx already
> did.  Sphinx was starting to become a common tool, and I had used it on
> several other projects, and found it pleasant to work with.  Also, when I
> asked about Lore on IRC, I got a lot of "I'm not sure anyone knows how that
> works these days" and "oh man, I wish we didn't have to support that any
> more", etc.  So I started looking into how to convert the docs over to use
> Sphinx.
>
>
>> Another possible solution to this problem would be to modify Lore so it
>> could process ReST sources, so that we could convert the documentation
>> within the repository piecemeal, and start writing any new docs in ReST,
>> but still have a coherent whole of documentation produced, eventually
>> switching the documentation processor from Lore to Sphinx.
>>
>
> This would require someone smarter than me.  Or at least more versed in
> formal parsing theory/techniques.  Or something.  And that would be just to
> read the docutils sources.  I find them...alien. (though less so that when
> I first started looking at them...I'm not sure if they've improved, or I
> have)
>
>
>> Yet another possible solution would be to modify Sphinx, adding a plugin
>> to process the Lore sources.
>>
>
> This is more reasonable, but still has problems.  Actually the reasonable
> thing would be to create a docutils piece to process Lore sources, and then
> maybe some Sphinx extensions on top of that.  Or something.  Still, it
> might have been doable.  However, I think Lore would have had to be
> modified as well, and possibly the Lore format expanded
> to accommodate certain constructs that it just doesn't do right now (mostly
> I'm thinking of the toctree directive and related stuff).
>
>
>> As an aside: this is the part of the process which has been so
>> frustrating
>> to me, personally.  The two alternate solutions I proposed here (and have
>> proposed before) seem far saner and more manageable in terms of effort,
>> to
>> me.  But, everyone I have spoken to about docutils and ReST has told me
>> in
>> no uncertain terms that they are both a pile of heinous hacks that resist
>> any attempt at sensible software-engineering solutions to problems, so we
>> need to resort to hackish system-integration stuff like what we've done.
>>  This worries me.
>>
>
> Ooookaaaaay....I don't know how to respond to that exactly.
>
>
>> I know that Sphinx's output is well-loved by the Python community, but if
>> it's so hard to call into that we can't reasonably modify it to get an
>> XML
>> DOM that looks like Lore source to Lore, and it's so hard to plug in to
>> it
>> that we can't give it a data structure that it likes from Lore's XML DOM,
>> then how the heck is it being maintained?  And if it actually *isn't*
>> that
>> bad, then why haven't I managed to find someone that knows its code well
>> enough to do one or the other of these things?
>>
>
> It would be possible to make Sphinx emit Lore sources, though I'm not sure
> what that buys.  You could do this either through a custom Sphinx
> "builder", or possibly even just using a custom html template with the html
> builder.  But you'd need ReST sources to feed into Sphinx, so...
>
> You could write a docutils "parser" which parses a document and returns a
> "nodetree" data structure.  This would get you as far as docutils, but
> AFAIK there is no existing way to get Sphinx to use any parser other than
> the default ReST one.  You could probably create such a thing, which would
> almost certainly involve modifications to Sphinx, though that's not
> necessarily a big deal.  It might not even be hard.  I think this would
> actually be a lot easier now than when I started down this path, mostly
> because docutils seems to have better documentation on the nodes that can
> go in the "nodetree" I mentioned above.  Note that I said "seems" because
> I'm not sure if it's that docutils documentation has gotten more complete,
> or just that I've bounced around in it enough times to find things.  The
> Docutils docs have the same problem that the Twisted docs have, which is
> that they are nigh un-navigable.  (I also think that the docutils docs
> should start using Sphinx, but I'm not sure how well that would go over in
> that camp...)
>
> The main problem with creating such a parser, is that Sphinx uses a bunch
> of docutils extensions to tie together the disparate documents in your
> project, and Lore, like vanilla docutils, doesn't have much of a concept of
> being one document among many (at least not from within a document).  For
> example, it has things to handle tables of contents, cross document links
> (with the ability to link to a document section, rather than a specific
> document, so if it gets moved to a different document, the link gets
> adjusted), compilation for glossaries and index entries from across the
> docs project, etc.  So you'd need to add some stuff to Lore to account for
> this (some is already there).  And then we'd have to go through and modify
> a bunch of the Lore sources anyway.
>
> Like I said, this looks a lot more feasible now than it did when I first
> looked at it, though I'm not sure whether it's me or docutils/Sphinx that's
> changed.  Probably some of each.
>
> At any rate, back then it seemed awfully difficult, and less interesting.
>
> Hmmm.  And you'd also need to make some changes to the way Sphinx picks up
> files.  And probably some other stuff I haven't thought of.
>
> I have no direct knowledge of any of this stuff, because my main interest
>> here is improving the experience of working on Twisted, both for you,
>> Kevin, and for the people who will arguably be helped by the use of
>> Sphinx.
>>  Maybe I'm completely wrong and Sphinx is beautifully architected and we
>> could have done this from day 1.  But I faintly hope that some Docutils
>> and
>> Sphinx contributor hears that I said "sphinx is garbage" and makes a fool
>> of me by contributing either a lore modification or a sphinx plugin which
>> solves this whole problem so we can do the format or tool migration
>> incrementally :).
>>
>> b) Because of a), there needs to be tooling to run lore2sphinx (or
>> whatever) on a regular basis.  (This was sort of being done via the
>> Sphinx-building buildbot, but in a very ad-hockery sort of way, which was
>> brittle, broke a couple of times, and needed to be improved.)
>>
>>
>> Hmm. I wasn't aware of that. But it seems like it's running by a charm
>> now.
>>
>
> I think this is because a) exarkun fixed it a couple of times, and b) I
> stopped making changes to the lore2sphinx repo (which the buildbot pulls
> from).  I'm also referring here to something which is completely
> non-obvious to anyone who hasn't actually run lore2sphinx by hand, which is
> that the command line tool was fairly terrible in several ways.  This made
> it harder to use for development than it should have been.
>
>
>>
>> c) There needs to be release management tooling to build the Sphinx docs
>> from ReST into whatever formats we want to publish (HTML and PDF to
>> start,
>> maybe others later on)
>>
>>
>> Yup.  (ePub?  PDF is so last-century... :))
>>
>> d) Convert the Lore sources to better ReST documents without all the
>> problems that the current lore2sphinx output has.
>>
>>
>> So, this wasn't *necessary*.  If we had gotten through the release
>> automation stuff - and I still don't understand why that's stuck - we
>> could
>> have merged it.
>>
>
> Well, I decided it was.  Or at least really really desirable.
>
>
>> I at one time thought this was pretty impractical.  My first attempt at a
>> conversion tool tried to use an intermediate object model, but I ran into
>> trouble when trying to combine the various objects.  So I abandoned the
>> effort and created what became lore2sphinx, which basically just combined
>> a
>> bunch of strings.  I then figured out a way of making the intermediate
>> object thing work, and that was lore2sphinx-ng.  Then it became
>> convenient
>> to split out the intermediate object model from the documetn processing
>> code, so I put all of that into a library and that became rstgen.
>>
>> It seems the saving grace here is that rstgen might be a generally useful
>> tool in its own right, with more of a long-term future than lore2sphinx
>> would have had.
>>
>
> I admit that I have become more interested in the actual problem of
> "generating ReST" than I once was.  And I hope that it will become a
> generally useful tool.
>
> And probably one of the reasons I have been making such relatively slow
> progress on it is is _because_ I'm trying to solve a more general problem
> than I once was.  The original lore2sphinx (the one running on the buildbot
> now) was very much a minimal-thing-that-could-possibly-work kind of
> solution.  It tried to do just enough to get the job done.  It sort of did
> get the job done, but I was never very satisfied with it.
>
>
>> (For anyone who is curious, the lore2sphinx-ng repo is forked off from
>> the
>> lore2sphinx repo, primarily because I didn't want to break the Sphinx
>> buildbot by making drastic changes.)
>>
>>
>> Have a link?
>>
>
> I've posted it a couple of times in this thread, though I can hardly blame
> you for either missing it or losing track of it.
>
> original: https://bitbucket.org/khorn/lore2sphinx
> extra-crispy: https://bitbucket.org/khorn/lore2sphinx-ng
>
>
>>
>> Here's what my plan was prior to this whole discussion getting started
>> again.
>>
>> 1) Finish rstgen, where "finished" in this instance is defined as "is
>> capable of generating all the vanilla docutils and sphinx-specific ReST
>> elements that we need for converting the
>> Twisted documentation.
>>
>>
>> Sounds like a worthy goal, although I don't think this is necessarily
>> required.  Have you been working on it for the last 2 years?  Do you have
>> any idea when it might be done?  It might be worthwhile to write a
>> *smaller* .
>>
>
> I started on rstgen a bit more than a year ago.  I was hung up on the
> problem of how to combine various parts of a document for a while without
> having the crazy space-handling issues.  And also I've been trying to come
> up with a relatively friendly API, and enough generality that it will end
> up useful outside of the lore2sphinx context.
>
> I really started on l2s-ng last July during "Julython".  I've been working
> on it in fits and starts a few times since then.
>
>
>>
>> 2) Finish lore2sphinx-ng (which would probably have ended with merging it
>> back into the lore2sphinx repo), where "finished" means that it would be
>> capable of processing all the XHTML Lore tags that were defined in the
>> Lore
>> documentation and used in the Twisted documentation, and generating a
>> tree
>> of rstgen elements, which could then be rendered into ReST.
>>
>>
>> Cool.
>>
>> While this would be handy, especially for people working on documentation
>> branches, it's not necessarily necessary.
>>
>> (this would also serve to satisfy b) above, as the CLI in lore2sphinx-ng
>> is less...well, let's just call it broken than lore2sphinx's was/is.)
>>
>>
>> OK.
>>
>> 3) Go back and finish SphinxBuilder (release tooling for building a
>> sphinx
>> project, which is basically a wrapper for sphinx-build, plus some vague
>> "version feature").
>>
>>
>> This is really the crux; this is the thing you should work on first, I
>> think, even if you're going to keep working on lore2sphinx-ng.  Basically
>> the only reason that I was keen to get the lore to sphinx conversion
>> improved in the first place was that creating this tool seemed to be
>> dragging on for quite a while after the "chunk tickets" were done.  But
>> now, this tool is almost done, and we could re-do the lore-source review
>> if
>> you wanted to do that.  The current lore2sphinx might well be good enough
>> to just go with, especially if the next-generation version is going to
>> take
>> another six months to finish.
>>
>
> I'll take a look at this again soonish (a week?  this month? don't know.).
>  Probably it's a matter of:
>
> - merge forward (it has been a while)
> - figure out how the other tools guess/determine the Twisted version in the
> checkout, and make SphinxBuilder do that.
> - get it reveiewed
> - commit
>
> But I'll have to remember how to use combinator again (which will be much
> easier now that the combinator "docs" are on the Twisted wiki...thanks to
> whomever did that!)
>
> Yes, I could probably use Bazaar, but so far every time I've tried that,
> I've ended up spending waaaaaay too much time just on the VCS.  I guess I
> have some kind of mental block with bzr.  I'll get over it someday I
> suppose.
>
>
>>
>> 4) Get someone to use something less hackish than what's currently
>> building the Sphinx docs on the buildbot, and preferably in such a way
>> that
>> the results of those builds could be published somewhere and have
>> persistent links.  Currently the results of what the Sphinx buildbot does
>> are stored for a time, and then go away, so you'll see links to build
>> results in some trac tickets that go nowhere, which is decidedly
>> unhelpful.
>>  My plan was that we'd set up something where the Sphinx docs would get
>> generated and published someplace for every buildbot build so that we
>> could
>> always have the current results for the lore to sphinx conversion for the
>> tip of each branch.  I have no idea whether this is actually feasible or
>> practical, but it seemed like it would be useful.
>>
>>
>> OK, *this* sounds like really unnecessary turd-polishing ;-).  This
>> builder is an interim step; the more interesting step is the builder that
>> just builds the sphinx docs, in the same way that the current builder
>> builds the lore docs.  Furthermore, it seems to be working fine.  Build
>> results links that go nowhere are a known problem with buildbot, since it
>> does eventually lose most history, and this type of history takes up a
>> fair
>> bit of disk space.
>>
>
> Well, it was mostly motivated by the fact that we were doing a lot of
> linking to build results that would then cease to exist for a while, and it
> really annoyed me.  It doesn't seem nearly as "necessary" to me now as it
> once did.
>
>
>>
>> 5) Proceed with Sphinx docs being built from lore sources, making tweaks
>> as necessary to lore2sphinx(ng) for as long as it took for the generated
>> docs to be good enough to justify switching to Sphinx entirely.
>> 6) Switch to Sphinx entirely.
>>
>> I really wasn't planning on trying to get people excited about switching
>> to Sphinx again until 1) and 2) were at least "mostly" done (for certain
>> values of done) and I had gone back to finish 3).
>>
>> So.  I guess at this point the question is whether to try and go with
>> what's there (lore2sphinx) or finish up the "new stuff" (lore2sphinx-ng +
>> rstgen).  I think 3-6 in my above plan need to happen in any case, and I
>> think those will be much easier with lore2sphinx-ng+rstgen.
>>
>>
>> This decision is really determined by time estimates.
>>
>> In any case, work out the sphinx release automation tool first, since we
>> need that regardless of how we switch over
>>
>
> Got it.
>
>
>>
>> IIRC, rstgen has support for most of the vanilla docutils elements, with
>> the notable exception of tables (and maybe definition lists...can't
>> recall
>> whether I finished those).  It has a basic level of test coverage (of
>> course you can never have too many tests) for rendering the elements
>> individually, and some test for elements in combination (particularly
>> nested lists).  Footnotes and Citations I think also need some work,
>> which
>> I have a plan for, but haven't implemented yet (i don't think).
>>
>>
>> The "new" lore2sphinx CLI tool needs more work, but is relatively
>> straightforward.  Like the old tool, it's basically an elementtree
>> processor, except instead of spitting out strings that get joined
>> together
>> (which granted was an unholy mess), it generates rstgen elements, which
>> all
>> have a .render() method.  After processing a Lore document, you shoudl
>> end
>> up with a rstgen.Document object.  You call it's render() method, which
>> calls it's children's render() methods, etc. and it's turtles all the way
>> down.
>>
>> The framework is there for the new CLI tool, it's mostly a matter of
>> writing a bunch of short methods that take elementtree elements as input
>> and return appropriate rstgen objects.
>>
>> Obviously these tools aren't finished, but they produce much better
>> output
>> than the old version of lore2sphinx w.r.t. whitespace handling, paragraph
>> wrapping, etc.
>>
>>
>> Aesthetically, this appeals to me a lot more than going with the
>> messiness
>> of lore2sphinx.
>>
>
> Me too.
>
>
>
>> But it is _not_ a requirement.
>>
>
> Understood.  Though I think it might be a practical requirement, even if it
> isn't a policy requirement.  If that makes sense.
>
>
>
>> Some of the code is still pretty messy, but nowhere near the train wreck
>> that the current/old version of lore2sphinx is.  By which I mean it _can_
>> be cleaned up, it just hasn't been yet.  In particular there's some
>> places
>> in rstgen where the API is (to me at least) obviously awful, but I
>> haven't
>> gotten around to fixing it yet.
>>
>> Please review the code.  Please feel free to ask questions if you're
>> interested.
>>
>> Personally, I've gotten over being in a hurry about all this, and I think
>> a robust tool is more likely to succeed in the long run, though finishing
>> it may make the run a bit longer.  So I'm for finishing
>> lore2sphinx-ng+rstgen.
>>
>>
>> I think a little false urgency might not hurt here :-).  I'm not going to
>> work on the tool - just writing these emails probably blew my Twisted
>> development budget for the next two months ;-)
>>
>
> I can relate... :)
>
>
>> - but I will do my best to quickly clear up any procedural
>> what-needs-to-be-done questions unambiguously.  Please ping if anything
>> gets you stuck.
>>
>
> I'll let you know.
>
> --
> Kevin Horn
>


-- 
Cordially
Abdul Rauf (haseeb)



From exarkun at twistedmatrix.com  Sat Mar 16 07:49:30 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 16 Mar 2013 13:49:30 -0000
Subject: [Twisted-Python] Final request URI from an Agent response
In-Reply-To: <CAOp9P3pmqt2Gt0XtL4uKScMD-CR4=5oJmbmhxF7++JoExOq98Q@mail.gmail.com>
References: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>
	<CAOp9P3pmqt2Gt0XtL4uKScMD-CR4=5oJmbmhxF7++JoExOq98Q@mail.gmail.com>
Message-ID: <20130316134930.3608.1729472751.divmod.xquotient.6@localhost6.localdomain6>




On 02:20 am, itamar at futurefoundries.com wrote:
>On Fri, Mar 15, 2013 at 4:11 AM, Jonathan Jacobs <
>jonathan+twisted at jsphere.com> wrote:
>>
>>Should the IRI branch be finished before attempting this ticket? (Note
>>that this doesn't necessarily include my volunteering.)
>The IRI ticket should *not* be a dependency. It would be nice, but it's
>unlikely it will happen anytime soon.

The hard part of the IRI ticket is parsing all the extremely complex 
forms in which an IRI can appear, right?

If so, I agree.  However, there's no reason we can't have an object that 
represents an IRI *without* writing a parser for all those forms.  Agent 
only needs minimal functionality of being able to figure out the 
hostname, port number, and whatever makes up the rest.

Jean-Paul



From jonathan+twisted at jsphere.com  Sat Mar 16 08:52:20 2013
From: jonathan+twisted at jsphere.com (Jonathan Jacobs)
Date: Sat, 16 Mar 2013 16:52:20 +0200
Subject: [Twisted-Python] Final request URI from an Agent response
In-Reply-To: <20130316134930.3608.1729472751.divmod.xquotient.6@localhost6.localdomain6>
References: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>
	<CAOp9P3pmqt2Gt0XtL4uKScMD-CR4=5oJmbmhxF7++JoExOq98Q@mail.gmail.com>
	<20130316134930.3608.1729472751.divmod.xquotient.6@localhost6.localdomain6>
Message-ID: <CAM187SH0ezbA03QzP2YE1Lwsx_7fmMALuG+EMQSac4f9-teVag@mail.gmail.com>

On Sat, Mar 16, 2013 at 3:49 PM, <exarkun at twistedmatrix.com> wrote:

> However, there's no reason we can't have an object that
> represents an IRI *without* writing a parser for all those forms.  Agent
> only needs minimal functionality of being able to figure out the
> hostname, port number, and whatever makes up the rest.
>


Isn't this currently called twisted.web.client._URL? (Although _URL still
needs some more data to fill this role.)

I do like this idea, although I keep coming back to wondering how we
provide this to Request initially, an additional parameter was not received
with much enthusiasm on IRC. It would be unfortunate if Request.uri is
going to mean "the relative URI" forever. And, when the IRI ticket is
finally complete, are we going to have to introduce yet another API for
getting an IRI object?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130316/7b53d2d9/attachment-0001.html>

From itamar at futurefoundries.com  Sat Mar 16 09:43:15 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sat, 16 Mar 2013 08:43:15 -0700
Subject: [Twisted-Python] Final request URI from an Agent response
In-Reply-To: <CAM187SH0ezbA03QzP2YE1Lwsx_7fmMALuG+EMQSac4f9-teVag@mail.gmail.com>
References: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>
	<CAOp9P3pmqt2Gt0XtL4uKScMD-CR4=5oJmbmhxF7++JoExOq98Q@mail.gmail.com>
	<20130316134930.3608.1729472751.divmod.xquotient.6@localhost6.localdomain6>
	<CAM187SH0ezbA03QzP2YE1Lwsx_7fmMALuG+EMQSac4f9-teVag@mail.gmail.com>
Message-ID: <CAOp9P3rYwVZcqLUuLc+fu70aeKF2eq+cRoLV=zX7pwchdjPMWg@mail.gmail.com>

On Sat, Mar 16, 2013 at 7:52 AM, Jonathan Jacobs <
jonathan+twisted at jsphere.com> wrote:

>
> On Sat, Mar 16, 2013 at 3:49 PM, <exarkun at twistedmatrix.com> wrote:
>
>> However, there's no reason we can't have an object that
>> represents an IRI *without* writing a parser for all those forms.  Agent
>> only needs minimal functionality of being able to figure out the
>> hostname, port number, and whatever makes up the rest.
>>
>
>
> Isn't this currently called twisted.web.client._URL? (Although _URL still
> needs some more data to fill this role.)
>
> I do like this idea, although I keep coming back to wondering how we
> provide this to Request initially, an additional parameter was not received
> with much enthusiasm on IRC. It would be unfortunate if Request.uri is
> going to mean "the relative URI" forever.
>

An additional attribute is not ideal... but it's better than changing an
existing attribute's contents, which is *really* backwards incompatible.
It's probably too late for the ideal solution anyway, let's just get a
decent one done.


> And, when the IRI ticket is finally complete, are we going to have to
> introduce yet another API for getting an IRI object?
>

Or just IRI.fromString() or something.

Why don't you start coding, and we can then talk about actual
implementation details? It's going to be pretty short, so any review
comments should hopefully not take too long to address.

-Itamar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130316/fedfac34/attachment.html>

From exarkun at twistedmatrix.com  Sat Mar 16 09:48:21 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 16 Mar 2013 15:48:21 -0000
Subject: [Twisted-Python] Final request URI from an Agent response
In-Reply-To: <CAM187SH0ezbA03QzP2YE1Lwsx_7fmMALuG+EMQSac4f9-teVag@mail.gmail.com>
References: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>
	<CAOp9P3pmqt2Gt0XtL4uKScMD-CR4=5oJmbmhxF7++JoExOq98Q@mail.gmail.com>
	<20130316134930.3608.1729472751.divmod.xquotient.6@localhost6.localdomain6>
	<CAM187SH0ezbA03QzP2YE1Lwsx_7fmMALuG+EMQSac4f9-teVag@mail.gmail.com>
Message-ID: <20130316154821.3608.2127715739.divmod.xquotient.14@localhost6.localdomain6>

On 02:52 pm, jonathan+twisted at jsphere.com wrote:
>On Sat, Mar 16, 2013 at 3:49 PM, <exarkun at twistedmatrix.com> wrote:
>>However, there's no reason we can't have an object that
>>represents an IRI *without* writing a parser for all those forms. 
>>Agent
>>only needs minimal functionality of being able to figure out the
>>hostname, port number, and whatever makes up the rest.
>
>
>Isn't this currently called twisted.web.client._URL? (Although _URL 
>still
>needs some more data to fill this role.)

Something like it, yea.  Although please do not expose a tuple subclass 
publicly (in fact, if you could get rid of that tuple subclass while 
working on this, I don't think it would hurt. :)
>I do like this idea, although I keep coming back to wondering how we
>provide this to Request initially, an additional parameter was not 
>received
>with much enthusiasm on IRC. It would be unfortunate if Request.uri is
>going to mean "the relative URI" forever.

Yes.  I wish the API had been more well considered before being exposed 
publicly.
>And, when the IRI ticket is
>finally complete, are we going to have to introduce yet another API for
>getting an IRI object?

The object we expose now should be forward compatible with the future 
perfect IRI object so that we can replace it with the IRI object when 
that is ready.

Jean-Paul



From bkuhn at sfconservancy.org  Sat Mar 16 10:36:46 2013
From: bkuhn at sfconservancy.org (Bradley M. Kuhn)
Date: Sat, 16 Mar 2013 09:36:46 -0700
Subject: [Twisted-Python] TODAY @ 4PM in Rm 202: BoF/Meetup session at PyCon
	USA 2013
In-Reply-To: <87mwu63uc9.fsf@ebb.org> (Bradley M. Kuhn's message of "Thu, 14
	Mar 2013 07:54:30 -0700")
References: <87y5drl7pe.fsf@ebb.org>
	<CAK5idxQ5ir_LGeyeYTY5EX5f_Qf0KPG9naJfVV5iLp73THU6Fw@mail.gmail.com>
	<87mwu63uc9.fsf@ebb.org>
Message-ID: <874ngbpaht.fsf_-_@ebb.org>

I've set up a Conservancy BoF/Meetup session today at 16:00 (4PM) in
Room 202 (which is on floor 2A, you can find it on the map).

The meeting will last one hour, and is directly after the PyPy BoF
session (and in the same room).

Agenda for the earlier 4PM discussion is open, but can include:
   * Questions/concerns that existing Conservancy projects has.

   * Questions/discussion from existing Conservancy applicants or
     projects considering offers for membership.

   * A chance for different Representatives / Project Leadership
     Committess / contractors from different Conservancy projects to
     meet each other!

I look forward to seeing you there!
-- 
Bradley M. Kuhn, Executive Director, Software Freedom Conservancy



From _ at lvh.cc  Sat Mar 16 13:03:40 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 16 Mar 2013 12:03:40 -0700
Subject: [Twisted-Python] TODAY @ 4PM in Rm 202: BoF/Meetup session at
 PyCon USA 2013
In-Reply-To: <874ngbpaht.fsf_-_@ebb.org>
References: <87y5drl7pe.fsf@ebb.org>
	<CAK5idxQ5ir_LGeyeYTY5EX5f_Qf0KPG9naJfVV5iLp73THU6Fw@mail.gmail.com>
	<87mwu63uc9.fsf@ebb.org> <874ngbpaht.fsf_-_@ebb.org>
Message-ID: <CAE_Hg6Z5a=b5MEG43gGY+wd_UtUkZe4ZB31FpRwJn7omw4GWNw@mail.gmail.com>

I won't be able to make it :( My talk is from 4:15 PM onwards.


On Sat, Mar 16, 2013 at 9:36 AM, Bradley M. Kuhn <bkuhn at sfconservancy.org>wrote:

> I've set up a Conservancy BoF/Meetup session today at 16:00 (4PM) in
> Room 202 (which is on floor 2A, you can find it on the map).
>
> The meeting will last one hour, and is directly after the PyPy BoF
> session (and in the same room).
>
> Agenda for the earlier 4PM discussion is open, but can include:
>    * Questions/concerns that existing Conservancy projects has.
>
>    * Questions/discussion from existing Conservancy applicants or
>      projects considering offers for membership.
>
>    * A chance for different Representatives / Project Leadership
>      Committess / contractors from different Conservancy projects to
>      meet each other!
>
> I look forward to seeing you there!
> --
> Bradley M. Kuhn, Executive Director, Software Freedom Conservancy
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130316/3e04b34d/attachment-0001.html>

From exarkun at twistedmatrix.com  Sat Mar 16 22:05:25 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 Mar 2013 04:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1363493125.3.342548064@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130317/bf3ee971/attachment.html>

From burak.arslan at arskom.com.tr  Sun Mar 17 12:58:23 2013
From: burak.arslan at arskom.com.tr (burak.arslan at arskom.com.tr)
Date: Sun, 17 Mar 2013 18:58:23 +0000
Subject: [Twisted-Python] TWISTED DINNER TOMORROW: 5:30PM on
	Sunday	2013-03-17 at Buca di Beppo in Campbell, CA.  RSVP required.
In-Reply-To: <87li9nmb90.fsf_-_@ebb.org>
References: <878v5rmmf7.fsf@ebb.org>
	<05DBF422-58C1-4D77-B384-A8777940A1E0@twistedmatrix.com>
	<87wqta10g2.fsf@ebb.org>
	<6B75AE95-57D3-44B7-B8F7-339F277123B0@twistedmatrix.com>
	<20130315233055.GA18497@ebb.org> <87li9nmb90.fsf_-_@ebb.org>
Message-ID: <qccz2o.mjtjdh.2t93zf-qmf@node1.arskomhosting.com>

Hello!

please count me in, i think i'll be anle to make it.

Thanks

--
Sent from my mobile. Pardon the brevity.On 16/03/2013 11:48 Bradley M. Kuhn wrote:
On behalf of the Twisted Project Leadership Committee at Software
Freedom Conservancy, I'd like to invite all Twisted developers and
contributors who are here at PyCon 2013 to the Second Annual Twisted
Project Dinner at Buca di Beppo in Campbell, CA.

I've made a reservation for 17:30 (5:30 PM) tomorrow, Sunday 17 March
2013.

*Please* RSVP by private email to me at <bkuhn at sfconservancy.org> by
noon (12:00) on Sunday so I can update the restaurant with the proper
number for the reservation.

Let's meet by 5PM (17:00) in the lobby of the Hyatt Regency Santa Clara
to coordinate rides from the venue, with a plan to be leaving by 5:15
PM.  We'll get cabs as necessary if there aren't enough cars among us to
get us all there.

If you'd like to meet us at the restaurant, here's the address:

Buca di Beppo	
1875 S Bascom Ave
Campbell, CA 95008
Phone: +1-408-377-7722
URL: http://www.bucadibeppo.com/restaurants/ca/campbell/

The reservation is in my name, in case you arrive at the restaurant
before the main group.
-- 
Bradley M. Kuhn, Executive Director, Software Freedom Conservancy

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From duncan.mcgreggor at gmail.com  Sun Mar 17 14:25:17 2013
From: duncan.mcgreggor at gmail.com (Duncan M. McGreggor)
Date: Sun, 17 Mar 2013 13:25:17 -0700
Subject: [Twisted-Python] TWISTED DINNER TOMORROW: 5:30PM on Sunday
	2013-03-17 at Buca di Beppo in Campbell, CA.  RSVP required.
In-Reply-To: <87li9nmb90.fsf_-_@ebb.org>
References: <878v5rmmf7.fsf@ebb.org>
	<05DBF422-58C1-4D77-B384-A8777940A1E0@twistedmatrix.com>
	<87wqta10g2.fsf@ebb.org>
	<6B75AE95-57D3-44B7-B8F7-339F277123B0@twistedmatrix.com>
	<20130315233055.GA18497@ebb.org> <87li9nmb90.fsf_-_@ebb.org>
Message-ID: <B049A514-AD67-4B03-9418-CCEA621FD44A@gmail.com>

Yes!

I'm coming :-)

d

Sent from my iPhone

On Mar 16, 2013, at 11:48 AM, "Bradley M. Kuhn" <bkuhn at sfconservancy.org> wrote:

> On behalf of the Twisted Project Leadership Committee at Software
> Freedom Conservancy, I'd like to invite all Twisted developers and
> contributors who are here at PyCon 2013 to the Second Annual Twisted
> Project Dinner at Buca di Beppo in Campbell, CA.
> 
> I've made a reservation for 17:30 (5:30 PM) tomorrow, Sunday 17 March
> 2013.
> 
> *Please* RSVP by private email to me at <bkuhn at sfconservancy.org> by
> noon (12:00) on Sunday so I can update the restaurant with the proper
> number for the reservation.
> 
> Let's meet by 5PM (17:00) in the lobby of the Hyatt Regency Santa Clara
> to coordinate rides from the venue, with a plan to be leaving by 5:15
> PM.  We'll get cabs as necessary if there aren't enough cars among us to
> get us all there.
> 
> If you'd like to meet us at the restaurant, here's the address:
> 
> Buca di Beppo    
> 1875 S Bascom Ave
> Campbell, CA 95008
> Phone: +1-408-377-7722
> URL: http://www.bucadibeppo.com/restaurants/ca/campbell/
> 
> The reservation is in my name, in case you arrive at the restaurant
> before the main group.
> -- 
> Bradley M. Kuhn, Executive Director, Software Freedom Conservancy
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Sun Mar 17 23:17:11 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 17 Mar 2013 22:17:11 -0700
Subject: [Twisted-Python] Final request URI from an Agent response
In-Reply-To: <CAM187SH0ezbA03QzP2YE1Lwsx_7fmMALuG+EMQSac4f9-teVag@mail.gmail.com>
References: <F71D36BD91BA4621ABE0746F41D32C1B@jsphere.com>
	<CAOp9P3pmqt2Gt0XtL4uKScMD-CR4=5oJmbmhxF7++JoExOq98Q@mail.gmail.com>
	<20130316134930.3608.1729472751.divmod.xquotient.6@localhost6.localdomain6>
	<CAM187SH0ezbA03QzP2YE1Lwsx_7fmMALuG+EMQSac4f9-teVag@mail.gmail.com>
Message-ID: <305D44B9-DDD2-4F15-B692-DAB8438C0AEF@twistedmatrix.com>

On Mar 16, 2013, at 7:52 AM, Jonathan Jacobs <jonathan+twisted at jsphere.com> wrote:

> And, when the IRI ticket is finally complete, are we going to have to introduce yet another API for getting an IRI object?

It seems to me that it would be a compatible change to have an IRI.fromString method that could do some extremely straightforward parsing - heck, even ASCII-only! - and then add support for more complex forms later.  After all, we have APIs like clientFromString which explicitly support extension; the contract is just (string)->something or (string)->CantGiveYouSomething; the exact format of the string is up to modification.  (Although I would suggest that once we have tests for parsing a particular form we should never _remove_ that form...)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130317/14e1bb3f/attachment-0001.html>

From ralphm at ik.nu  Mon Mar 18 00:07:59 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Sun, 17 Mar 2013 23:07:59 -0700
Subject: [Twisted-Python] Jabber client, tls and iqauth
In-Reply-To: <51433EFC.4010608@rkade.fr>
References: <51433EFC.4010608@rkade.fr>
Message-ID: <5146AF3F.5020201@ik.nu>

On 2013-03-15 08:32, rakdeFR wrote:
> Hi!
>
> I did some searches about my problem and didn't find any thing that
> match in the archives.
>
> I'm trying to do a simple jabber client with the twisted framework in
> order to automatically send messages.
>
> The server is a prosody server, and enabled the tls and iq auth.
>
> So far, I can connect to the server, and can't login.

Before going into the problem you might be having, are you referring to 
non-SASL authentication [1]? If so, that way of authenticating is 
obsolete since 2008 and all XMPP clients and servers are required to do 
SASL authentication instead.

Does that Prosody server have SASL explicitly disabled? It would also be 
useful to have the traffic log. Be sure to redact (encoded) credentials.

[1] http://xmpp.org/extensions/xep-0078.html

-- 
ralphm



From sergun at gmail.com  Mon Mar 18 08:49:13 2013
From: sergun at gmail.com (Sergey Gerasimov)
Date: Mon, 18 Mar 2013 18:49:13 +0400
Subject: [Twisted-Python] banana SIZE_LIMIT
Message-ID: <025101ce23e7$c2d687e0$488397a0$@gmail.com>

Hi,

Are they some simple ways (keeping existing interface) around BananaError
for long values returned from PB methods?






From techtonik at gmail.com  Mon Mar 18 09:16:57 2013
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 18 Mar 2013 18:16:57 +0300
Subject: [Twisted-Python] Twisted Visualizations
Message-ID: <CAPkN8xJLtydZTbw1U8dSu+J96zyFgRhqG3LAKgnDbdHwbnE6gg@mail.gmail.com>

Hi,

I always thought that there is not enough art in STEM education, and
looking at how the STEAM powered education gains momentum, I can not resist
to throw in the idea to the Python community.

STEAM = (Science, Technology, Engineering, Arts, Mathematics)

So far, the PyCon has talks that cover everything above around the core,
but not really much of A stuff. To me it would be interesting to see the
visualization of Twisted, the visualization of Stackless, the visualization
of how source code transforms to data and code sections in memory and how
the data is processed in this memory.

That may not be strictly related to the Python, but it is vital for Python
development that people know how things work starting from the moment they
press a key to launch a Python interpreter. That's the first thing people
do - they touch the key on a keyboard. That's  the entrypoint .

For the people who want to start with Python it will be interesting to see
how systems work in 3D, 2D or any other xD that is accepted by human brain
(even in 1D if we can accept the idea of a simple scroller for Python
source code). It will be interesting to see open source visualization
models that many people can iterate on and improve in parts.

I imagine some things to a some degree and can draw some sketches on paper,
but what would be awesome if people at PyCon could use the chance to gather
together and discuss the idea from the perspective of folks with visual
arts experience (Blender, ...) - will those twisted visualizations be
awesome? Will they be useful? Interesting for artists? What could happen to
make them possible and the whole process fun.
-- 
anatoly t.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130318/2ce46b82/attachment.html>

From kmcintyre at greenchargenet.com  Mon Mar 18 13:14:06 2013
From: kmcintyre at greenchargenet.com (Kevin McIntyre)
Date: Mon, 18 Mar 2013 12:14:06 -0700
Subject: [Twisted-Python] more complex IBodyProducer?
Message-ID: <CAFvbmcnj2xpDpbdWz4g1ojU-efN0deD52gv1RZtVfPDi6oZuMQ@mail.gmail.com>

has anyone implemented a more complex IBodyProducer than

class POSTRequestProducer():
    implements(IBodyProducer)
    def __init__(self, body):
        self.body = body
        self.length = len(self.body)

    def startProducing(self, consumer):
        consumer.write(self.body)
        return succeed(None)

    def pauseProducing(self):
        pass

    def stopProducing(self):
        pass


I have an upload intensive application, that during periods of poor
connectivity ends up with a lots on zombie http TCP connections.  I'm
thinking maybe that the "pause" is being called and that my request
deferred is in a paused state.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130318/3635b339/attachment.html>

From adi at roiban.ro  Mon Mar 18 13:32:00 2013
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 18 Mar 2013 21:32:00 +0200
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
	<CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
	<20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>
Message-ID: <CAFycZ9cC1oE6a_+_x_kV7oTfL12jePbY_OM+DKt9RApNMYR5oQ@mail.gmail.com>

On 22 January 2013 22:03,  <exarkun at twistedmatrix.com> wrote:
> On 09:29 am, adi at roiban.ro wrote:
>>On 22 January 2013 02:21,  <exarkun at twistedmatrix.com> wrote:
>>>On 20 Jan, 02:35 pm, adi at roiban.ro wrote:

I agree that this is a ugly hack and I removed the project.

>
> Hi Adi,
>
> trial does what it does by touching a lot of internal stuff as well.
> This is still bad, but at least it's our fault if it ever breaks instead
> of yours.  There's also a long term plan (or "plan" may be putting it
> too strongly, perhaps I should say "hope") that this part of trial will
> change to only use public interfaces.  This will probably require
> reactors actually implementing restartability, or it will require
> changing the trial feature slightly (eg, so it starts a reactor, runs
> all tests, then stops the reactor - if it did this, I'm sure you can
> imagine how "waiting" for a Deferred would just be adding a callback to
> the right place, as in any other Twisted-based application).
>
> Are you interested in helping out with making reactors restartable? :)

Sorry for the late reply.

I am still clumsy when working with Twisted so I don't know if I can
help to much here.

I don't know what is expected from a restartable reactor.

The way I am testing deferreds is by starting the reactor, allow for
the deferred to execute and then stop the reactor.

I don't want to pause it and then continue the execution from where it
was stopped.

To help with debugging I am also printing a snapshot of reactor state
at a certain time.

----

I prefer the Arrange/Act/Assert way of writing test:


checker = mk.credentialsChecker()
credentials = mk.credentials()

deferred = checker.requestAvatarId(credentials)
failure = self.getDeferredFailure(deferred)

self.assertFailureType(AuthentiationError, failure)
self.assertEqual(credentials.username, failure.value.username)


I found it easier to read than this version:


checker = mk.credentialsChecker()
credentials = mk.credentials()

    def check_result(result_or_failure):
        self.assertFailureType(AuthentiationError, failure)
        self.assertEqual(credentials.username, failure.value.username)

deferred = checker.requestAvatarId(credentials)
deferred.addBoth(check_result)

return deferred

--------

I have updated the code to use as many public reactor members as possible.

The following private member are still use:
reactor._startedBefore, reactor._started

It uses the following public methods:
startRunning(), doIteration(), stop(), iterate()

Here is the main part that blocks the execution until the deferred got a result.
It executes the deferred in the reactor loop.

https://github.com/chevah/empirical/blob/master/chevah/empirical/testcase.py#L240

------

Maybe this is has only limited usage, but I just wanted to share this work.
For me, this makes writing test a much nicer experience.

Cheers,
-- 
Adi Roiban



From glyph at twistedmatrix.com  Mon Mar 18 13:35:51 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 18 Mar 2013 12:35:51 -0700
Subject: [Twisted-Python] banana SIZE_LIMIT
In-Reply-To: <025101ce23e7$c2d687e0$488397a0$@gmail.com>
References: <025101ce23e7$c2d687e0$488397a0$@gmail.com>
Message-ID: <9459EB1F-A40C-4B39-AAE7-85B0301A3819@twistedmatrix.com>


On Mar 18, 2013, at 7:49 AM, Sergey Gerasimov <sergun at gmail.com> wrote:

> Hi,
> 
> Are they some simple ways (keeping existing interface) around BananaError
> for long values returned from PB methods?

Don't return long values.  They block the connection.  Chunk them up and stream them asynchronously by repeatedly calling a method to buffer them up, and then add a .finish() method that takes the buffered data and invokes your original logic.

-glyph




From exarkun at twistedmatrix.com  Mon Mar 18 14:08:01 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 18 Mar 2013 20:08:01 -0000
Subject: [Twisted-Python] banana SIZE_LIMIT
In-Reply-To: <9459EB1F-A40C-4B39-AAE7-85B0301A3819@twistedmatrix.com>
References: <025101ce23e7$c2d687e0$488397a0$@gmail.com>
	<9459EB1F-A40C-4B39-AAE7-85B0301A3819@twistedmatrix.com>
Message-ID: <20130318200801.3273.126919926.divmod.xquotient.3@localhost6.localdomain6>




On 07:35 pm, glyph at twistedmatrix.com wrote:
>
>On Mar 18, 2013, at 7:49 AM, Sergey Gerasimov <sergun at gmail.com> wrote:
>>Hi,
>>
>>Are they some simple ways (keeping existing interface) around 
>>BananaError
>>for long values returned from PB methods?
>
>Don't return long values.  They block the connection.  Chunk them up 
>and stream them asynchronously by repeatedly calling a method to buffer 
>them up, and then add a .finish() method that takes the buffered data 
>and invokes your original logic.

eg, using twisted.spread.util.Pager (or the StringPager or FilePager 
subclasses).

Jean-Paul
>-glyph
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From screwtape at froup.com  Mon Mar 18 21:00:19 2013
From: screwtape at froup.com (Tim Allen)
Date: Tue, 19 Mar 2013 14:00:19 +1100
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
Message-ID: <20130319030019.GB21252@boombah.thristian.org>

In Guido's keynote at PyCon 2013, apparently he talked about adding an
async I/O module to Python 3.4. It looks like his slides can be viewed
here:

    https://www.dropbox.com/s/xknbe58zcvjhzhv/PyCon2013.pptx

...while this is the PEP he's talking about:

    http://www.python.org/dev/peps/pep-3156/

At first glance, the proposed reactor API looks very much like Twisted's
(or, to be fair, GTK's, or possibly any number of other async event loop
I'm less familiar with) but rather than Deferreds and callbacks, the API
will be based around Futures (similar, but not identical, to Python
3.2's concurrent.futures.Future class), and an inlineCallbacks-style
decorator for generators.

I know Deferreds are awesome, and I don't know much about Futures (and
I know Twisted core developers have given negative reviews of
other Deferred/Promise/Future implementations in, say, JavaScript
libraries before), and inlineCallbacks seems to have a negative
reputation among experienced Twisted users. Is there anybody on this
list who knows more about this new PEP (maybe somebody who's at PyCon
and saw the talk in person) who can give us an informed comparison with
the current state of Twisted?




From dynamicgl at gmail.com  Mon Mar 18 23:42:58 2013
From: dynamicgl at gmail.com (Gelin Yan)
Date: Tue, 19 Mar 2013 13:42:58 +0800
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
In-Reply-To: <20130319030019.GB21252@boombah.thristian.org>
References: <20130319030019.GB21252@boombah.thristian.org>
Message-ID: <CABkOF6T+3-Z7AUDgf0Cuqw=SD9pP7Rg-Wkg5GQYfFQVOOkyR1g@mail.gmail.com>

On Tue, Mar 19, 2013 at 11:00 AM, Tim Allen <screwtape at froup.com> wrote:

> In Guido's keynote at PyCon 2013, apparently he talked about adding an
> async I/O module to Python 3.4. It looks like his slides can be viewed
> here:
>
>     https://www.dropbox.com/s/xknbe58zcvjhzhv/PyCon2013.pptx
>
> ...while this is the PEP he's talking about:
>
>     http://www.python.org/dev/peps/pep-3156/
>
> At first glance, the proposed reactor API looks very much like Twisted's
> (or, to be fair, GTK's, or possibly any number of other async event loop
> I'm less familiar with) but rather than Deferreds and callbacks, the API
> will be based around Futures (similar, but not identical, to Python
> 3.2's concurrent.futures.Future class), and an inlineCallbacks-style
> decorator for generators.
>
> I know Deferreds are awesome, and I don't know much about Futures (and
> I know Twisted core developers have given negative reviews of
> other Deferred/Promise/Future implementations in, say, JavaScript
> libraries before), and inlineCallbacks seems to have a negative
> reputation among experienced Twisted users. Is there anybody on this
> list who knows more about this new PEP (maybe somebody who's at PyCon
> and saw the talk in person) who can give us an informed comparison with
> the current state of Twisted?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


Hi

  inlineCallbacks is ok to me. I use it daily. I can keep code snippets
succinct. no more callbacks, deep nested callbacks (they let me recall
those days with javascript & node.js). The only thing I complain is it
doesn't work with cython.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130319/0556ae37/attachment.html>

From stephen at thorne.id.au  Tue Mar 19 00:04:16 2013
From: stephen at thorne.id.au (Stephen Thorne)
Date: Tue, 19 Mar 2013 06:04:16 +0000
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
In-Reply-To: <20130319030019.GB21252@boombah.thristian.org>
References: <20130319030019.GB21252@boombah.thristian.org>
Message-ID: <CAFPU7=s0w4h2j++d0wWdcZ+kVPSXPcM6vT6om=R4vWvH8DP3gA@mail.gmail.com>

Not relavent to your questions, but there's a mailing list for discussing
the specifics of PEP 3156, which is worth subscribing to if you want to
provide specific feedback on the API.

https://groups.google.com/forum/?fromgroups#!forum/python-tulip



On Tue, Mar 19, 2013 at 3:00 AM, Tim Allen <screwtape at froup.com> wrote:

> In Guido's keynote at PyCon 2013, apparently he talked about adding an
> async I/O module to Python 3.4. It looks like his slides can be viewed
> here:
>
>     https://www.dropbox.com/s/xknbe58zcvjhzhv/PyCon2013.pptx
>
> ...while this is the PEP he's talking about:
>
>     http://www.python.org/dev/peps/pep-3156/
>
> At first glance, the proposed reactor API looks very much like Twisted's
> (or, to be fair, GTK's, or possibly any number of other async event loop
> I'm less familiar with) but rather than Deferreds and callbacks, the API
> will be based around Futures (similar, but not identical, to Python
> 3.2's concurrent.futures.Future class), and an inlineCallbacks-style
> decorator for generators.
>
> I know Deferreds are awesome, and I don't know much about Futures (and
> I know Twisted core developers have given negative reviews of
> other Deferred/Promise/Future implementations in, say, JavaScript
> libraries before), and inlineCallbacks seems to have a negative
> reputation among experienced Twisted users. Is there anybody on this
> list who knows more about this new PEP (maybe somebody who's at PyCon
> and saw the talk in person) who can give us an informed comparison with
> the current state of Twisted?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130319/0a2ced60/attachment.html>

From itamar at futurefoundries.com  Tue Mar 19 15:16:32 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Tue, 19 Mar 2013 17:16:32 -0400
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
In-Reply-To: <20130319030019.GB21252@boombah.thristian.org>
References: <20130319030019.GB21252@boombah.thristian.org>
Message-ID: <CAOp9P3ospcBpfcLxMrxpKq5j3F2RDtYEfvtGOX=Luf9sJXtR9g@mail.gmail.com>

On Mon, Mar 18, 2013 at 11:00 PM, Tim Allen <screwtape at froup.com> wrote:

> In Guido's keynote at PyCon 2013, apparently he talked about adding an
> async I/O module to Python 3.4. It looks like his slides can be viewed
> here:
>
>     https://www.dropbox.com/s/xknbe58zcvjhzhv/PyCon2013.pptx
>
> ...while this is the PEP he's talking about:
>
>     http://www.python.org/dev/peps/pep-3156/
>
> At first glance, the proposed reactor API looks very much like Twisted's
> (or, to be fair, GTK's, or possibly any number of other async event loop
> I'm less familiar with) but rather than Deferreds and callbacks, the API
> will be based around Futures (similar, but not identical, to Python
> 3.2's concurrent.futures.Future class), and an inlineCallbacks-style
> decorator for generators.
>

There's two parts: one is a standardized, pluggable API for event loops.
It's explicitly based on Twisted's, and will be easy to add a Twisted
implementation. The generator thing is layered on top, and somewhat
optional, in theory.

-Itamar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130319/cbf304f8/attachment.html>

From therve at free.fr  Tue Mar 19 17:21:50 2013
From: therve at free.fr (=?UTF-8?B?VGhvbWFzIEhlcnbDqQ==?=)
Date: Tue, 19 Mar 2013 16:21:50 -0700
Subject: [Twisted-Python] Second pre-release of Twisted 13.0.0
Message-ID: <5148F30E.5060509@free.fr>

Hello there,

Due to some test problems (#5989 being reverted), we cut a new 
pre-release for your testing pleasure.

You can find the tarballs here:
     http://twistedmatrix.com/~therve/13.0.0pre2/

Please give a quick test!

-- 
Thomas



From glyph at twistedmatrix.com  Tue Mar 19 17:56:20 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 Mar 2013 16:56:20 -0700
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
In-Reply-To: <20130319030019.GB21252@boombah.thristian.org>
References: <20130319030019.GB21252@boombah.thristian.org>
Message-ID: <5B04528C-C1B0-4584-B9AD-8CBB9DA26C3A@twistedmatrix.com>

On Mar 18, 2013, at 8:00 PM, Tim Allen <screwtape at froup.com> wrote:

> In Guido's keynote at PyCon 2013, apparently he talked about adding an
> async I/O module to Python 3.4.

> At first glance, the proposed reactor API looks very much like Twisted's
> (or, to be fair, GTK's, or possibly any number of other async event loop
> I'm less familiar with)

Importantly, the proposed loop API is like Twisted (in that it has callbacks for the receipt of data and the emptying of send buffers) and _not_ like GTK (in that it doesn't call handle_read() and hope you can handle a socket object).

> but rather than Deferreds and callbacks, the API
> will be based around Futures (similar, but not identical, to Python
> 3.2's concurrent.futures.Future class), and an inlineCallbacks-style
> decorator for generators.

Mostly accurate as far as I know.

> I know Deferreds are awesome, and I don't know much about Futures (and
> I know Twisted core developers have given negative reviews of
> other Deferred/Promise/Future implementations in, say, JavaScript
> libraries before), and inlineCallbacks seems to have a negative
> reputation among experienced Twisted users. Is there anybody on this
> list who knows more about this new PEP (maybe somebody who's at PyCon
> and saw the talk in person) who can give us an informed comparison with
> the current state of Twisted?

The interesting thing about the proposal from the perspective of the Twisted project is that it is an exciting opportunity for interoperability.  The availability of a standard-library, "blessed" event-loop API will give us something to write against, rather than Twisted and Tornado and Pulsar all having alternative main-loop APIs, and partial adapters between them.  In the future, it might make things like the GTK reactor obsolete, as it's possible that the PyGTK project would include their own Python-standard event-loop adapter.

Twisted is an amazingly full-featured and mature event-driven framework; it doesn't make sense (and isn't fair) to compare a minimalistic main-loop to it.  Tulip does not contain an IMAP client or an SSH server; it does not contain any XMPP logic.

As far as 'yield from' coroutines are concerned, I'm personally ambivalent, but I'm happy to ignore them.  The best part about this proposal is that anyone who wants to get this new thing does not need to abandon the extensive capabilities of Twisted over some tweak of syntax.  With only a little bit of specification-implementation glue, we can interoperate not just with things that do the equivalent of connectTCP/listenTCP, but we can bridge between Deferreds and Futures (as Guido's new not-quite-concurrent.-Future explicitly drops the concurrent.Future that Deferred can't implement, because it's serving the purpose of Deferred).

-glyph


From glyph at twistedmatrix.com  Tue Mar 19 17:59:29 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 Mar 2013 16:59:29 -0700
Subject: [Twisted-Python] Second pre-release of Twisted 13.0.0
In-Reply-To: <5148F30E.5060509@free.fr>
References: <5148F30E.5060509@free.fr>
Message-ID: <028FE2D5-0DFB-4A39-AA9D-BA1502B8F3E8@twistedmatrix.com>


On Mar 19, 2013, at 4:21 PM, Thomas Hervé <therve at free.fr> wrote:

> Hello there,
> 
> Due to some test problems (#5989 being reverted), we cut a new 
> pre-release for your testing pleasure.
> 
> You can find the tarballs here:
>     http://twistedmatrix.com/~therve/13.0.0pre2/
> 
> Please give a quick test!

Thanks again for your work, Thomas!

-glyph


From kevin.horn at gmail.com  Tue Mar 19 19:03:04 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 19 Mar 2013 20:03:04 -0500
Subject: [Twisted-Python] Second pre-release of Twisted 13.0.0
In-Reply-To: <5148F30E.5060509@free.fr>
References: <5148F30E.5060509@free.fr>
Message-ID: <CA+U=zK2ph1EB5b=2TKLMFpr4fv30eN4Gzy87cOcgb1KvoVbc_w@mail.gmail.com>

On Tue, Mar 19, 2013 at 6:21 PM, Thomas Hervé <therve at free.fr> wrote:

> Hello there,
>
> Due to some test problems (#5989 being reverted), we cut a new
> pre-release for your testing pleasure.
>
> You can find the tarballs here:
>      http://twistedmatrix.com/~therve/13.0.0pre2/
>
> Please give a quick test!
>
> --
> Thomas
>
>

Awesome!
--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130319/7eb83b24/attachment.html>

From tobias.oberstein at tavendo.de  Wed Mar 20 02:51:41 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 20 Mar 2013 01:51:41 -0700
Subject: [Twisted-Python] So... Python 3.4 is getting its own async
	I/O	system
In-Reply-To: <20130319030019.GB21252@boombah.thristian.org>
References: <20130319030019.GB21252@boombah.thristian.org>
Message-ID: <634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>

> In Guido's keynote at PyCon 2013, apparently he talked about adding an async
> I/O module to Python 3.4. It looks like his slides can be viewed

Will this tackle async file I/O also or only network?



From glyph at twistedmatrix.com  Wed Mar 20 03:36:55 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 20 Mar 2013 02:36:55 -0700
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
In-Reply-To: <634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
References: <20130319030019.GB21252@boombah.thristian.org>
	<634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>


On Mar 20, 2013, at 1:51 AM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:

>> In Guido's keynote at PyCon 2013, apparently he talked about adding an async
>> I/O module to Python 3.4. It looks like his slides can be viewed
> 
> Will this tackle async file I/O also or only network?


Since async file I/O is not a thing you can implement[1], presumably it will only be networking.

You probably want to join this group:

<https://groups.google.com/forum/?fromgroups=#!forum/python-tulip>

-glyph

[1]: <http://blog.libtorrent.org/2012/10/asynchronous-disk-io/>


From itamar at futurefoundries.com  Wed Mar 20 12:24:37 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Wed, 20 Mar 2013 14:24:37 -0400
Subject: [Twisted-Python] Notes from Twisted BoF at PyCon 2013
Message-ID: <CAOp9P3p9wJghCDNzdJA6jaNRCUr0yzUj+SBRT5dJXfR2s_bBFw@mail.gmail.com>


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130320/e2055733/attachment.html>
-------------- next part --------------
What Should Tom Do?
- Tickets already in review before
- Deferred cancellation
- Deploy to new tummy machine (ASAP)
- Attempt trac upgrade in a way that allows switching back to current version
- Support for non-OpenSSL SSL libraries: API replacement for twisted.internet.ssl Certificate APIs, and transport layer implementation. Alternative backends include win32 APIs, OS X SecureTransport (aka libsecurityssl?) and the cross-platform libnss3 (Mozilla). A good starting point would be a API specification, that at minimum includes current functionality.
- twist: command-line without daemonization
- import krondo tutorial into twisted (if davep agrees), update to newer code
- lore output plugin that generates ReST via docutils parse tree objects, then write code to run sphinx on this output


GSoC/OPW projects:
- Deferred cancellation.
- Frack? Personally I'd prefer not.
- ICE (NAT busting) with Allen Short.
- lore2sphinx stuff mentioned above?
- twisted.web, e.g. returning Deferreds

Other notes:
- "A Week in Twisted: What we did this week" would be nice.
- Ralph Meijer wants to port Words to Python 3.
- twisted.conch.stdio is in theory great, but buggy, or missing keystrokes; needs maintenance
- kline and treq have nice Travis-CI configs (multiple Python and Twisted versions)
- Fundraising! VMWare, Truephone, Cisco, Google Fiber, Olark (words, ralphm talked to them), ...


Sprint topics:
- rewrite protocol implementations with parsley, add to twisted once its good enough. Parsley needs CI, benchmarks.

From kevin.horn at gmail.com  Wed Mar 20 14:05:07 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 20 Mar 2013 15:05:07 -0500
Subject: [Twisted-Python] Notes from Twisted BoF at PyCon 2013
In-Reply-To: <CAOp9P3p9wJghCDNzdJA6jaNRCUr0yzUj+SBRT5dJXfR2s_bBFw@mail.gmail.com>
References: <CAOp9P3p9wJghCDNzdJA6jaNRCUr0yzUj+SBRT5dJXfR2s_bBFw@mail.gmail.com>
Message-ID: <CA+U=zK1T1ULNavNVcbPXx23qjr-PW6fkjGpzvMi_E_Dfu=25OA@mail.gmail.com>

On Wed, Mar 20, 2013 at 1:24 PM, Itamar Turner-Trauring <
itamar at futurefoundries.com> wrote:

>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
Thanks for posting this, Itamar.

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130320/af2bb7e1/attachment.html>

From exarkun at twistedmatrix.com  Wed Mar 20 17:07:06 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 20 Mar 2013 23:07:06 -0000
Subject: [Twisted-Python] Second pre-release of Twisted 13.0.0
In-Reply-To: <5148F30E.5060509@free.fr>
References: <5148F30E.5060509@free.fr>
Message-ID: <20130320230706.6540.200308746.divmod.xquotient.1@localhost6.localdomain6>

On 19 Mar, 11:21 pm, therve at free.fr wrote:
>Hello there,
>
>Due to some test problems (#5989 being reverted), we cut a new
>pre-release for your testing pleasure.
>
>You can find the tarballs here:
>     http://twistedmatrix.com/~therve/13.0.0pre2/
>
>Please give a quick test!

Thanks!  This email sent through a mail server running pre2.  No 
problems so far.

Jean-Paul



From kevin.horn at gmail.com  Thu Mar 21 08:17:01 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 21 Mar 2013 09:17:01 -0500
Subject: [Twisted-Python] Lore and generating reStructuredText (Lore2Sphinx)
Message-ID: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>

tl;dr  A Lore plugin won't work for generating Sphinx source files, at
least not by itself.

Itamar posted some notes from the Twisted BoF session that was held at
PyCon last weekend, and one of the things in it was the following line:

- lore output plugin that generates ReST via docutils parse tree
objects, then write code to run sphinx on this output


I wasn't there, so I don't know the exact context that this was referring
to, but let me try to explain a little bit about why this won't work (at
least not as written).

reStructuredText, as some of you may know, creates it's output by first
creating an intermediate representation of a document called a "node tree",
which is a tree of "nodes" which represents the various elements in a
document (text, paragraphs, lists, list items, etc.).  reStructuredText
also has a construct called a "directive", which is  some markup which
tells the docutils reST parser to create a bunch of these nodes.

Directives are awesome and are a big reason why reStructuredText is so much
more powerful than other lightweight markup languages like markdown,
textile, etc.  They serve as extension point and allow users to create
their own markup constructs without changing the actual parser.

The key thing is that a directive is not itself a type of node.  Rather it
's just a markup construct.  This means that once a reStructuredText
document goes through the docutils parser, the information about the
directives is lost, because they have been transformed into a bunch of
nodes.

For example there's a container directive, which looks like this:

Title
=====

.. container::

    I'm a content paragraph!  Yay!

When processed this creates a nodetree that looks something like this (in
docutils "pseudoxml" representation:

<document ids="title" names="title" source="test.rst" title="Title">
    <title>
        Title
    <container>
        <paragraph>
            I'm a content paragraph!  Yay!

It is entirely coincidental that the container directive and the
<container> node are named the same thing.  Don't let this confuse you.
 The point is that the directive goes away and is replaced by a  bunch of
nodes (more specifically, the node tree is transformed in some way...I
suppose a directive could remove nodes, but I don't think I've ever seen
that done).

We can see this using another example:

Here's some markup:

Title
=====

.. warning::

    I'm a content paragraph!  Yay!

and here's the pseudoxml representation of the nodetree:

<document ids="title" names="title" source="test.rst" title="Title">
    <title>
        Title
    <container>
        <paragraph>
            I'm a content paragraph!  Yay!

Notice that the node trees look exactly the same.  Now this is not quite
true, as there's probably some attributes on the actual Python nodes that
might be used to distinguish them when writing output which aren't
displayed here...they certainly get rendered into HTML differently.  But
the point is that the directive itself is GONE and you have no real way of
recreating it from the node tree.

I think this problem also happens with custom text roles, which is another
extension mechanism in reST, but I haven't looked too deeply into that.

Since you really, really want to have directives in your output (in fact
you have to have them if you want to use Sphinx, which makes heavy use of
them), you can't really generate Sphinx-capable source files using _only_
the nodetree representation.

I suppose you might be able to do something where you try to detect where
the directive _should_ go and try to insert it during the rendering step,
but such a thing would be an egregious kludge,  would take a lot of effort,
and I can't imagine it would work very well, if at all.

Another option would be to fork the distutils parser and change it so that
it could create "directive nodes" or something, but I certainly would not
recommend such a course. (If you think maintaining Lore is a pain, you
ain't seen nothin' yet.  And one thing this project has driven home to me
is that no software only needs to be maintained "for a little while".)

I'm not saying that the proposed plugin for lore is a bad idea...I think it
would be pretty cool.  You'd be able to send lore out to all of the various
formats supported by docutils, and who doesn't want to write their next s5
presentaton in Lore, right? :)  But it won't do the job that it was being
put forward for in the note Itamar mentioned.

So what about building some software that generates some other
representation of the source document, and then renders that as
reStructuredText?  Well this is the best idea I've come up with (or heard)
and is in fact exactly what lore2sphinx-ng_ (which is not intended to be a
separate thing, it's just an experimental fork of lore2sphinx) and rstgen_
do.  lore2spinx-ng creates the representation from lore sources (which is
also a tree of "nodes", though they aren't called that), and rstgen defines
the nodes, and renders them into reStructuredText source.

The only problem is that these aren't done yet, though the work done so far
looks very promising (in terms of actually being able to do the job
reliably someday).  If anyone has bothered to read this far and is
interested in helping out, please feel free to fork the repos and lend a
hand.  Also feel free to contact me either on this list or directly if you
have any questions.  I apologize in advance for the current state of the
code, which is a bit messy (especially lore2sphinx-ng, which still has a
bunch of cruft from the "old"/"current" version that I haven't gotten
around to removing yet).



.. _lore2sphinx-ng: https://bitbucket.org/khorn/lore2sphinx-ng
.. _rstgen:https://bitbucket.org/khorn/rstgen

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130321/77ad184b/attachment.html>

From kevin.horn at gmail.com  Thu Mar 21 09:52:17 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 21 Mar 2013 10:52:17 -0500
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
Message-ID: <CA+U=zK1n4OBLHzMAFKbYfLZ8zDA14qjdCZhCnWbaBiC6znQmhg@mail.gmail.com>

On Thu, Mar 21, 2013 at 9:17 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> tl;dr  A Lore plugin won't work for generating Sphinx source files, at
> least not by itself.
>
> Itamar posted some notes from the Twisted BoF session that was held at
> PyCon last weekend, and one of the things in it was the following line:
>
> - lore output plugin that generates ReST via docutils parse tree objects, then write code to run sphinx on this output
>
>
> I wasn't there, so I don't know the exact context that this was referring
> to, but let me try to explain a little bit about why this won't work (at
> least not as written).
>
> reStructuredText, as some of you may know, creates it's output by first
> creating an intermediate representation of a document called a "node tree",
> which is a tree of "nodes" which represents the various elements in a
> document (text, paragraphs, lists, list items, etc.).  reStructuredText
> also has a construct called a "directive", which is  some markup which
> tells the docutils reST parser to create a bunch of these nodes.
>
> Directives are awesome and are a big reason why reStructuredText is so
> much more powerful than other lightweight markup languages like markdown,
> textile, etc.  They serve as extension point and allow users to create
> their own markup constructs without changing the actual parser.
>
> The key thing is that a directive is not itself a type of node.  Rather it
> 's just a markup construct.  This means that once a reStructuredText
> document goes through the docutils parser, the information about the
> directives is lost, because they have been transformed into a bunch of
> nodes.
>
> For example there's a container directive, which looks like this:
>
> Title
> =====
>
> .. container::
>
>     I'm a content paragraph!  Yay!
>
> When processed this creates a nodetree that looks something like this (in
> docutils "pseudoxml" representation:
>
> <document ids="title" names="title" source="test.rst" title="Title">
>     <title>
>         Title
>     <container>
>         <paragraph>
>             I'm a content paragraph!  Yay!
>
> It is entirely coincidental that the container directive and the
> <container> node are named the same thing.  Don't let this confuse you.
>  The point is that the directive goes away and is replaced by a  bunch of
> nodes (more specifically, the node tree is transformed in some way...I
> suppose a directive could remove nodes, but I don't think I've ever seen
> that done).
>
> We can see this using another example:
>
> Here's some markup:
>
> Title
> =====
>
> .. warning::
>
>     I'm a content paragraph!  Yay!
>
> and here's the pseudoxml representation of the nodetree:
>
> <document ids="title" names="title" source="test.rst" title="Title">
>     <title>
>         Title
>     <container>
>         <paragraph>
>             I'm a content paragraph!  Yay!
>
> Notice that the node trees look exactly the same.  Now this is not quite
> true, as there's probably some attributes on the actual Python nodes that
> might be used to distinguish them when writing output which aren't
> displayed here...they certainly get rendered into HTML differently.  But
> the point is that the directive itself is GONE and you have no real way of
> recreating it from the node tree.
>
> I think this problem also happens with custom text roles, which is another
> extension mechanism in reST, but I haven't looked too deeply into that.
>
> Since you really, really want to have directives in your output (in fact
> you have to have them if you want to use Sphinx, which makes heavy use of
> them), you can't really generate Sphinx-capable source files using _only_
> the nodetree representation.
>
> I suppose you might be able to do something where you try to detect where
> the directive _should_ go and try to insert it during the rendering step,
> but such a thing would be an egregious kludge,  would take a lot of effort,
> and I can't imagine it would work very well, if at all.
>
> Another option would be to fork the distutils parser and change it so that
> it could create "directive nodes" or something, but I certainly would not
> recommend such a course. (If you think maintaining Lore is a pain, you
> ain't seen nothin' yet.  And one thing this project has driven home to me
> is that no software only needs to be maintained "for a little while".)
>
> I'm not saying that the proposed plugin for lore is a bad idea...I think
> it would be pretty cool.  You'd be able to send lore out to all of the
> various formats supported by docutils, and who doesn't want to write their
> next s5 presentaton in Lore, right? :)  But it won't do the job that it was
> being put forward for in the note Itamar mentioned.
>
> So what about building some software that generates some other
> representation of the source document, and then renders that as
> reStructuredText?  Well this is the best idea I've come up with (or heard)
> and is in fact exactly what lore2sphinx-ng_ (which is not intended to be a
> separate thing, it's just an experimental fork of lore2sphinx) and rstgen_
> do.  lore2spinx-ng creates the representation from lore sources (which is
> also a tree of "nodes", though they aren't called that), and rstgen defines
> the nodes, and renders them into reStructuredText source.
>
> The only problem is that these aren't done yet, though the work done so
> far looks very promising (in terms of actually being able to do the job
> reliably someday).  If anyone has bothered to read this far and is
> interested in helping out, please feel free to fork the repos and lend a
> hand.  Also feel free to contact me either on this list or directly if you
> have any questions.  I apologize in advance for the current state of the
> code, which is a bit messy (especially lore2sphinx-ng, which still has a
> bunch of cruft from the "old"/"current" version that I haven't gotten
> around to removing yet).
>
>
>
> .. _lore2sphinx-ng: https://bitbucket.org/khorn/lore2sphinx-ng
> .. _rstgen:https://bitbucket.org/khorn/rstgen
>
> --
> Kevin Horn
>

I screwed up the example above, due to misnaming a file and running
rst2pseudoxml.py on the wrong thing.

It should actually look something like this:

<document ids="title" names="title" source="test.rst" title="Title">
    <title>
        Title
    <warning>
        <paragraph>
            I'm a content paragraph!  Yay!

and this:

<document ids="title" names="title" source="test.rst" title="Title">
    <title>
        Title
    <admonition classes="admonition-hooray">
        <title>
            hooray!
        <paragraph>
            I'm a content paragraph!  Yay!

But the point still holds.  Directive info goes away after parsing.

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130321/b1f2db0e/attachment.html>

From glyph at twistedmatrix.com  Sat Mar 23 20:57:25 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2013 19:57:25 -0700
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
Message-ID: <03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>


On Mar 21, 2013, at 7:17 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> Notice that the node trees look exactly the same.  Now this is not quite true, as there's probably some attributes on the actual Python nodes that might be used to distinguish them when writing output which aren't displayed here...they certainly get rendered into HTML differently.  But the point is that the directive itself is GONE and you have no real way of recreating it from the node tree.

The directive isn't "gone"; it turns into the attributes on the Python nodes that you're talking about.  Presumably that's what's used to render it into HTML.  I believe it was Doug Hellmann who indicated to Jean-Paul that this was possible.

Perhaps you mean "there's no public API for constructing the node tree representation of an arbitrary directive"?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130323/8b3a3ba7/attachment-0001.html>

From exarkun at twistedmatrix.com  Sat Mar 23 22:05:26 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Mar 2013 04:05:26 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1364097926.87.1445567206@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130324/44925ade/attachment.html>

From exarkun at twistedmatrix.com  Sun Mar 24 09:45:42 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Mar 2013 15:45:42 -0000
Subject: [Twisted-Python] debugging listenTCP
In-Reply-To: <366DD0FD-01BD-44B1-BE87-7E374C44E055@conundrum.com>
References: <366DD0FD-01BD-44B1-BE87-7E374C44E055@conundrum.com>
Message-ID: <20130324154542.6540.1614103920.divmod.xquotient.23@localhost6.localdomain6>

On 12 Mar, 01:40 am, matt at conundrum.com wrote:
>
>I've got a weird one here.   I've just come back to some code that I 
>haven't worked on in a while, which is a simple XMLRPC server.  Last 
>time I touched it I was working on adding cred support, so I'd gone 
>from using a direct call to server.Site() in my listenTCP call to using 
>my own factory/portal/etc.
>
>When I fired it up this time, listenTCP was failing to bind to the 
>requested ports, but not raising an exception.  I started writing up an 
>email to ask about debugging this, but while doing information 
>collection it started working again.  Then not.  Now it's working 
>again.  It looks like I've got some sort of intermittent failure, but I 
>have no idea how to track it down.

Hi Matthew,

I wonder if you learned anything more about what was going on this case 
or if it's still causing problems for you.

Jean-Paul
>    # 'interfaces' is just a simple list of IP addresses.  The map()
>    # call provides formatting for the log message
>    logger.debug("Connecting to port {} on interfaces: {}".format(
>        port, ", ".join(map( lambda x: "'{}'".format(x), interfaces))))
>    for iface in interfaces:
>        reactor.listenTCP(port, factory, interface=iface)
>    reactor.run()
>
>The application should bind to [::1]:8602 and 127.0.0.1:8602, and 
>logging seems to indicate this is what it's trying to do.
>
>01:28:31 [server      ] Connecting to port 8602 on interfaces: '::1', 
>'127.0.0.1'
>
>However, intermittently lsof and netstat are showing no binding.
>>netstat -an | grep -c 8602
>0
>
>I tried turning on twisted's internal logging, but that is giving me 
>nothing useful.  I see no way to turn up the debugging level on this 
>log, but I normally use python's standard logger and perhaps I've 
>missed some piece of documentation.  This is a sample from when it was 
>failing:
>
>2013-03-12 01:28:31+0000 [-] Log opened.
>2013-03-12 01:28:31+0000 [-] ServerFactory starting on 8602
>2013-03-12 01:28:31+0000 [-] Starting factory 
><insurrection.server.ServerFactory instance at 0x85a81488>
>2013-03-12 01:28:31+0000 [-] ServerFactory starting on 8602
>
>Can anyone suggest anything more I can do to track down the problem 
>next time it crops up?
>
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Mon Mar 25 07:38:22 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 25 Mar 2013 13:38:22 -0000
Subject: [Twisted-Python] Notes from Twisted BoF at PyCon 2013
In-Reply-To: <CAOp9P3p9wJghCDNzdJA6jaNRCUr0yzUj+SBRT5dJXfR2s_bBFw@mail.gmail.com>
References: <CAOp9P3p9wJghCDNzdJA6jaNRCUr0yzUj+SBRT5dJXfR2s_bBFw@mail.gmail.com>
Message-ID: <20130325133822.2461.1510511860.divmod.xquotient.4@localhost6.localdomain6>

Thanks for taking those notes, Itamar.

I copied the summary onto the wiki and fleshed out the ideas a bit:

https://twistedmatrix.com/trac/wiki/Fellowship2013/Priorities

Jean-Paul



From exarkun at twistedmatrix.com  Mon Mar 25 07:48:39 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 25 Mar 2013 13:48:39 -0000
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <CAFycZ9cC1oE6a_+_x_kV7oTfL12jePbY_OM+DKt9RApNMYR5oQ@mail.gmail.com>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
	<CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
	<20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>
	<CAFycZ9cC1oE6a_+_x_kV7oTfL12jePbY_OM+DKt9RApNMYR5oQ@mail.gmail.com>
Message-ID: <20130325134839.2461.1356587987.divmod.xquotient.17@localhost6.localdomain6>

On 18 Mar, 07:32 pm, adi at roiban.ro wrote:
>On 22 January 2013 22:03,  <exarkun at twistedmatrix.com> wrote:
>>On 09:29 am, adi at roiban.ro wrote:
>>>On 22 January 2013 02:21,  <exarkun at twistedmatrix.com> wrote:
>>>>On 20 Jan, 02:35 pm, adi at roiban.ro wrote:
>
>I agree that this is a ugly hack and I removed the project.
>>
>>Hi Adi,
>>
>>trial does what it does by touching a lot of internal stuff as well.
>>This is still bad, but at least it's our fault if it ever breaks 
>>instead
>>of yours.  There's also a long term plan (or "plan" may be putting it
>>too strongly, perhaps I should say "hope") that this part of trial 
>>will
>>change to only use public interfaces.  This will probably require
>>reactors actually implementing restartability, or it will require
>>changing the trial feature slightly (eg, so it starts a reactor, runs
>>all tests, then stops the reactor - if it did this, I'm sure you can
>>imagine how "waiting" for a Deferred would just be adding a callback 
>>to
>>the right place, as in any other Twisted-based application).
>>
>>Are you interested in helping out with making reactors restartable? :)
>
>Sorry for the late reply.
>
>I am still clumsy when working with Twisted so I don't know if I can
>help to much here.
>
>I don't know what is expected from a restartable reactor.
>
>The way I am testing deferreds is by starting the reactor, allow for
>the deferred to execute and then stop the reactor.
>
>I don't want to pause it and then continue the execution from where it
>was stopped.
>
>To help with debugging I am also printing a snapshot of reactor state
>at a certain time.
>
>----
>
>I prefer the Arrange/Act/Assert way of writing test:
>
>
>checker = mk.credentialsChecker()
>credentials = mk.credentials()
>
>deferred = checker.requestAvatarId(credentials)
>failure = self.getDeferredFailure(deferred)
>
>self.assertFailureType(AuthentiationError, failure)
>self.assertEqual(credentials.username, failure.value.username)
>
>
>I found it easier to read than this version:
>
>
>checker = mk.credentialsChecker()
>credentials = mk.credentials()
>
>    def check_result(result_or_failure):
>        self.assertFailureType(AuthentiationError, failure)
>        self.assertEqual(credentials.username, failure.value.username)
>
>deferred = checker.requestAvatarId(credentials)
>deferred.addBoth(check_result)
>
>return deferred
>
>--------
>
>I have updated the code to use as many public reactor members as 
>possible.
>
>The following private member are still use:
>reactor._startedBefore, reactor._started
>
>It uses the following public methods:
>startRunning(), doIteration(), stop(), iterate()
>
>Here is the main part that blocks the execution until the deferred got 
>a result.
>It executes the deferred in the reactor loop.
>
>https://github.com/chevah/empirical/blob/master/chevah/empirical/testcase.py#L240
>
>------
>
>Maybe this is has only limited usage, but I just wanted to share this 
>work.
>For me, this makes writing test a much nicer experience.

Hi Adi,

This basically looks like an implementation of the old, now-removed 
`TestCase.wait` API.

We got rid of `wait` for several reasons:

  * It was hard to implement.  By the end, it sort of worked with most 
reactors - but not all of them.

  * It is a tool for building non-deterministic, slow tests.  If tests 
are written *not* to do real I/O and *not* to wait for real time to 
pass, then they don't need to let a real reactor spin.

We replaced these ideas:

  * with returning a `Deferred` from a test method (which works even if 
you don't use trial to run your tests - but not if you don't subclass 
trial's `TestCase`).  We eventually moved on from this idea, though many 
parts of Twisted itself are still tested using this feature, to...

  * things like `twisted.test.proto_helpers.MemoryReactor`, 
`twisted.internet.task.Clock`, and most recently 
`TestCase.successResultOf` and `TestCase.failureResultOf` (but don't 
confuse these with your `getDeferredFailure` - they are significantly 
less capable).

I'd encourage you to explore testing strategies that use 
reactor/transport/time fakes and give us feedback about where they're 
not making your job easy enough.  I think ultimately you'll be happier 
with the resulting tests, and you won't have to maintain so much hairy 
reactor manipulation code.

Jean-Paul



From peter.westlake at pobox.com  Mon Mar 25 09:59:50 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Mon, 25 Mar 2013 15:59:50 +0000
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
 system
In-Reply-To: <119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
References: <20130319030019.GB21252@boombah.thristian.org>
	<634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
	<119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
Message-ID: <1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>

On Wed, Mar 20, 2013, at 9:36, Glyph wrote:
...
> Since async file I/O is not a thing you can implement[1], ...
> 
> [1]: <http://blog.libtorrent.org/2012/10/asynchronous-disk-io/>

Understood that it isn't possible to use native asynchronous I/O. But an
implementation that used threads behind the scenes and returned a
Deferred (for small files) or a Protocol (for big ones) would be a nice
thing to have.

Peter.



From kevin.horn at gmail.com  Mon Mar 25 10:16:08 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 25 Mar 2013 11:16:08 -0500
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
	<03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
Message-ID: <CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>

On Sat, Mar 23, 2013 at 9:57 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 21, 2013, at 7:17 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> Notice that the node trees look exactly the same.  Now this is not quite
> true, as there's probably some attributes on the actual Python nodes that
> might be used to distinguish them when writing output which aren't
> displayed here...they certainly get rendered into HTML differently.  But
> the point is that the directive itself is GONE and you have no real way of
> recreating it from the node tree.
>
>
> The directive isn't "gone"; it turns into the attributes on the Python
> nodes that you're talking about.  Presumably that's what's used to render
> it into HTML.  I believe it was Doug Hellmann who indicated to Jean-Paul
> that this was possible.
>
>
While this is true for some built-in docutils directives, there is no
guarantee that this will be the case.  A directive basically says "call a
Python callable according to a certain interface, and put the returned
nodes here."  If the directive in question uses a callable that returns
nodes with attributes set in a certain way, then you have some breadcrumbs
to figure out how those nodes were created, but there's nothing that says
that the nodes will definitely be set up that way.

For example, you could have a directive that has a ReST list as content,
and changes the items in the list into some kind of link or something.
 maybe it looks something like this (not a real/valid nodetree...):

<list>
    <link>...
    <link>...
    <link>...

How can you tell that this was created by a directive?  You can't, because
it could just as easily have been a list full of links to begin with.

This is why rstgen has it's own node definitions, as it is focused on what
source constructs should be generated, rather than what the docutils output
should look like.

Of course it's possible that the docutils nodes that we would actually need
from the Twisted docs are all introspectible *enough* that you could maybe
just build a docutils doctree and make good enough guesses to create output
which included directives.  It might even be easy to make those guesses.
 But you'd still be guessing, and would fail in the general case.  Also,
you'd still need to write the code to render those nodes into valid ReST,
which is really the hard part of the process.  Also, you'd need to "parse"
everything inside the "directive node" (or whichever node you've decided
represents the directive) in order to turn it into directive arguments,
options and contents.

Reading exarkun's expansion of the notes Itamar posted [1]_ it looks like
another idea proposed was to generate Sphinx (or maybe Sphinx-looking)
output directly from Lore, which could maybe work, but I think would also
be a lot of work, for a lot less benefit.

However, if what you really want is to have a Lore plugin that generates
RestructuredText, then why not have a lore plugin that generates a rstgen
tree, which rstgen will already know how to render into ReST?  Other than
the obvious objection that rstgen isn't done yet, this seems the best
solution to me.  Of course I may be biased. :)

Even if you didn't want to use rstgen itself, though, I still think you're
better off creating some tree-like structure that is *not* a docutils
document tree, and then have that structure render itself into ReST.

BTW, Doug Hellman almost certainly knows more about the internals of
docutils than I do, so maybe he's right and there is a way to (relatively)
easily generate ReST from a docutils tree including the directives.  But I
don't think it is.


> Perhaps you mean "there's no public API for constructing the node tree
> representation of an arbitrary directive"?
>
>
This is certainly true, but I think it doesn't go far enough in describing
the issue



.. [1] https://twistedmatrix.com/trac/wiki/Fellowship2013/Priorities

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130325/95d0bc2b/attachment.html>

From hs at ox.cx  Mon Mar 25 12:02:00 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Mon, 25 Mar 2013 19:02:00 +0100
Subject: [Twisted-Python] Twisted dinner pictures
Message-ID: <06F12164-5776-43C2-B182-38F261C93DF5@ox.cx>

Hi,

As you may have noticed, I'm building a little page to show off that PyCon wasn't about donglegate. http://thisispycon.com

I would love to post about our little dinner and would be delighted if anyone having pics AND quotes could forward them to me.

Same goes for sprints etc, flood me!

Cheers,

Hynek

Sent from my phone.


From itamar at futurefoundries.com  Mon Mar 25 13:47:52 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Mon, 25 Mar 2013 15:47:52 -0400
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
In-Reply-To: <1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>
References: <20130319030019.GB21252@boombah.thristian.org>
	<634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
	<119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
	<1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>
Message-ID: <CAOp9P3oqzyxNqoQGJAnPpKkaRT0kjZe5JK26kwRNJ20gDp8rxQ@mail.gmail.com>

On Mon, Mar 25, 2013 at 11:59 AM, Peter Westlake
<peter.westlake at pobox.com>wrote:

> Understood that it isn't possible to use native asynchronous I/O. But an
> implementation that used threads behind the scenes and returned a
> Deferred (for small files) or a Protocol (for big ones) would be a nice
> thing to have.
>

For streaming files, you want something pausable; there are existing
producers which don't use threads, and there will presumably be a tubes
equivalent. Maybe having the tubes one use threads by default is a good
idea.

For getting a file as a string, you can just do:

d = deferToThread(lambda path: FilePath(path).getContent())

For more complex usage patterns, you'll probably want to write custom code
using deferToThread/deferToThreadPool anyway.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ — Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130325/9f797d5d/attachment.html>

From tobias.oberstein at tavendo.de  Mon Mar 25 14:01:52 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 25 Mar 2013 13:01:52 -0700
Subject: [Twisted-Python] So... Python 3.4 is getting its own async
	I/O	system
In-Reply-To: <119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
References: <20130319030019.GB21252@boombah.thristian.org>
	<634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
	<119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
Message-ID: <634914A010D0B943A035D226786325D44226FAA6D1@EXVMBX020-12.exch020.serverdata.net>

> > Will this tackle async file I/O also or only network?
> 
> 
> Since async file I/O is not a thing you can implement[1], presumably it will only
> be networking.
> 

Ok, so AIO is broken on Linux both implementation- and API-wise, but Windows/IOCP and/or *BSD/kqueue might be a different story. I haven't tested myself though. Probably would give kqueue on FreeBSD/ZFS a run ..



From tobias.oberstein at tavendo.de  Mon Mar 25 14:11:44 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 25 Mar 2013 13:11:44 -0700
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
 system
In-Reply-To: <1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>
References: <20130319030019.GB21252@boombah.thristian.org>
	<634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
	<119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
	<1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>
Message-ID: <634914A010D0B943A035D226786325D44226FAA6E0@EXVMBX020-12.exch020.serverdata.net>

> > Since async file I/O is not a thing you can implement[1], ...
> >
> > [1]: <http://blog.libtorrent.org/2012/10/asynchronous-disk-io/>
> 
> Understood that it isn't possible to use native asynchronous I/O. But an
> implementation that used threads behind the scenes and returned a Deferred
> (for small files) or a Protocol (for big ones) would be a nice thing to have.

Yeah, reading a single block from disk can take somewhere between roughly 10us (FusionIO) to 10ms (magnetic platter), and if I need only single blocks (not streaming .. say I access an on-disk key-value store), it would be nice if that would be encapsulated in a deferred, while the reactor drives other stuff. Ideally without a background worker thread pool on platforms that have sufficient/sane support. And worked around via thread pool on others.



From glyph at twistedmatrix.com  Mon Mar 25 16:34:00 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Mar 2013 15:34:00 -0700
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
	system
In-Reply-To: <1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>
References: <20130319030019.GB21252@boombah.thristian.org>
	<634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
	<119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
	<1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>
Message-ID: <B4DAFF8D-6A73-42AF-9564-AF993C2D9339@twistedmatrix.com>


On Mar 25, 2013, at 8:59 AM, Peter Westlake <peter.westlake at pobox.com> wrote:

> On Wed, Mar 20, 2013, at 9:36, Glyph wrote:
> ...
>> Since async file I/O is not a thing you can implement[1], ...
>> 
>> [1]: <http://blog.libtorrent.org/2012/10/asynchronous-disk-io/>
> 
> Understood that it isn't possible to use native asynchronous I/O. But an
> implementation that used threads behind the scenes and returned a
> Deferred (for small files) or a Protocol (for big ones) would be a nice
> thing to have.

For what it's worth, I completely agree.  If someone has, or someone ever does, implement a nice async file I/O system, a nice abstract API for Twisted to do it would allow us to swap in such a thing and get a performance boost without anyone changing their code.

As Itamar says though, a Fount would be an ideal way to present this once I merge the Tubes branch.  (It'll be up for review any day now, thanks to all the help I got at PyCon...)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130325/20aedd3a/attachment.html>

From exarkun at twistedmatrix.com  Mon Mar 25 16:45:06 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 25 Mar 2013 22:45:06 -0000
Subject: [Twisted-Python] So... Python 3.4 is getting its own async I/O
 system
In-Reply-To: <CAOp9P3oqzyxNqoQGJAnPpKkaRT0kjZe5JK26kwRNJ20gDp8rxQ@mail.gmail.com>
References: <20130319030019.GB21252@boombah.thristian.org>
	<634914A010D0B943A035D226786325D44226F06101@EXVMBX020-12.exch020.serverdata.net>
	<119924BA-A490-40CB-927C-0A379386A816@twistedmatrix.com>
	<1364227190.8995.140661208921733.6936D76A@webmail.messagingengine.com>
	<CAOp9P3oqzyxNqoQGJAnPpKkaRT0kjZe5JK26kwRNJ20gDp8rxQ@mail.gmail.com>
Message-ID: <20130325224506.2461.1639437574.divmod.xquotient.18@localhost6.localdomain6>

On 07:47 pm, itamar at futurefoundries.com wrote:
>On Mon, Mar 25, 2013 at 11:59 AM, Peter Westlake
><peter.westlake at pobox.com>wrote:
>>Understood that it isn't possible to use native asynchronous I/O. But 
>>an
>>implementation that used threads behind the scenes and returned a
>>Deferred (for small files) or a Protocol (for big ones) would be a 
>>nice
>>thing to have.
>
>For streaming files, you want something pausable; there are existing
>producers which don't use threads, and there will presumably be a tubes
>equivalent. Maybe having the tubes one use threads by default is a good
>idea.
>
>For getting a file as a string, you can just do:
>
>d = deferToThread(lambda path: FilePath(path).getContent())

Not that `FilePath` is guaranteed to be thread-safe...

Jean-Paul
>For more complex usage patterns, you'll probably want to write custom 
>code
>using deferToThread/deferToThreadPool anyway.
>
>--
>Itamar Turner-Trauring, Future Foundries LLC
>http://futurefoundries.com/ — Twisted consulting, training and support.



From glyph at twistedmatrix.com  Mon Mar 25 17:00:10 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Mar 2013 16:00:10 -0700
Subject: [Twisted-Python] Notes from Twisted BoF at PyCon 2013
In-Reply-To: <20130325133822.2461.1510511860.divmod.xquotient.4@localhost6.localdomain6>
References: <CAOp9P3p9wJghCDNzdJA6jaNRCUr0yzUj+SBRT5dJXfR2s_bBFw@mail.gmail.com>
	<20130325133822.2461.1510511860.divmod.xquotient.4@localhost6.localdomain6>
Message-ID: <39764F1B-2817-4862-AA63-42F6D4945DE3@twistedmatrix.com>


On Mar 25, 2013, at 6:38 AM, exarkun at twistedmatrix.com wrote:

> Thanks for taking those notes, Itamar.
> 
> I copied the summary onto the wiki and fleshed out the ideas a bit:
> 
> https://twistedmatrix.com/trac/wiki/Fellowship2013/Priorities
> 
> Jean-Paul

Thanks to both of you for getting this published.

I hope that everyone will read it and ask for clarification if anything is not obvious to those who could not attend :).

-glyph




From glyph at twistedmatrix.com  Mon Mar 25 17:13:05 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Mar 2013 16:13:05 -0700
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <20130325134839.2461.1356587987.divmod.xquotient.17@localhost6.localdomain6>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
	<CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
	<20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>
	<CAFycZ9cC1oE6a_+_x_kV7oTfL12jePbY_OM+DKt9RApNMYR5oQ@mail.gmail.com>
	<20130325134839.2461.1356587987.divmod.xquotient.17@localhost6.localdomain6>
Message-ID: <0A508FE0-1BC7-4903-8F6E-A1BD0FB222C9@twistedmatrix.com>


On Mar 25, 2013, at 6:48 AM, exarkun at twistedmatrix.com wrote:

>  * with returning a `Deferred` from a test method (which works even if 
> you don't use trial to run your tests - but not if you don't subclass 
> trial's `TestCase`).  We eventually moved on from this idea, though many 
> parts of Twisted itself are still tested using this feature, to...

I have a minor quibble with saying we have "moved on" from this idea.

Trial is useful both for writing unit tests (which use MemoryReactor, Clock, etc) and for writing integration tests (which return Deferreds and do real I/O).

Twisted *itself* is mostly tested with unit tests that test smaller chunks of functionality, and there are rarely (perhaps never) good reasons to return a Deferred from a test case within Twisted's own test suite, but I maintain lots of test code that depends intimately on the return-a-Deferred functionality, and other, higher-level projects do too.

We have no plans to remove or deprecate this functionality, but it's important to know that you should not use it unless you really need it.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130325/f2cf2f1d/attachment.html>

From glyph at twistedmatrix.com  Mon Mar 25 17:29:04 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Mar 2013 16:29:04 -0700
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
	<03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
	<CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>
Message-ID: <4804AB74-C814-4306-89F0-E381E34E248D@twistedmatrix.com>


On Mar 25, 2013, at 9:16 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> How can you tell that this was created by a directive?  You can't, because it could just as easily have been a list full of links to begin with.

But, I don't care if it was created by a directive or not.

I think we're talking about two different things.

What you seem to be talking about is using Sphinx to do source-to-source Lore-to-ReST transformation.  In that case, you're (sort of) right, in that information is lost when you invoke directives.  If we did this, and it worked, it would just be a slightly better way to implement lore2sphinx; we'd still need to manage the transition in largely the same way.

What *I'm* talking about is just using Lore source as an input to Sphinx, and going straight to the output HTML.  In order to do this, we just need to construct the right tree and actually *invoke* the directive callables at the right time.  They produce whatever output they want to produce, and we hand that back to Sphinx, and it outputs some docs.  With this strategy, we just switch to sphinx by switching our build process; we don't switch input formats.  Then, if someone wants to use Lore they can, if they want to use ReST they can, and we can migrate on an as-needed basis; there's no need for a single big format migration for us to start using Sphinx.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130325/e40c71a4/attachment.html>

From adi at roiban.ro  Tue Mar 26 04:39:25 2013
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 26 Mar 2013 12:39:25 +0200
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <20130325134839.2461.1356587987.divmod.xquotient.17@localhost6.localdomain6>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
	<CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
	<20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>
	<CAFycZ9cC1oE6a_+_x_kV7oTfL12jePbY_OM+DKt9RApNMYR5oQ@mail.gmail.com>
	<20130325134839.2461.1356587987.divmod.xquotient.17@localhost6.localdomain6>
Message-ID: <CAFycZ9d8scKXQnPa-0hfiVUbyc2QQYJ7QNQpdiT58q+sgdsgmw@mail.gmail.com>

On 25 March 2013 15:48,  <exarkun at twistedmatrix.com> wrote:
> On 18 Mar, 07:32 pm, adi at roiban.ro wrote:
>>On 22 January 2013 22:03,  <exarkun at twistedmatrix.com> wrote:
>>>On 09:29 am, adi at roiban.ro wrote:
>>>>On 22 January 2013 02:21,  <exarkun at twistedmatrix.com> wrote:
>>>>>On 20 Jan, 02:35 pm, adi at roiban.ro wrote:
>>
>>I agree that this is a ugly hack and I removed the project.
>>>
>>>Hi Adi,
>>>
>>>trial does what it does by touching a lot of internal stuff as well.
>>>This is still bad, but at least it's our fault if it ever breaks
>>>instead
>>>of yours.  There's also a long term plan (or "plan" may be putting it
>>>too strongly, perhaps I should say "hope") that this part of trial
>>>will
>>>change to only use public interfaces.  This will probably require
>>>reactors actually implementing restartability, or it will require
>>>changing the trial feature slightly (eg, so it starts a reactor, runs
>>>all tests, then stops the reactor - if it did this, I'm sure you can
>>>imagine how "waiting" for a Deferred would just be adding a callback
>>>to
>>>the right place, as in any other Twisted-based application).
>>>
>>>Are you interested in helping out with making reactors restartable? :)
>>
>>Sorry for the late reply.
>>
>>I am still clumsy when working with Twisted so I don't know if I can
>>help to much here.
>>
>>I don't know what is expected from a restartable reactor.
>>
>>The way I am testing deferreds is by starting the reactor, allow for
>>the deferred to execute and then stop the reactor.
>>
>>I don't want to pause it and then continue the execution from where it
>>was stopped.
>>
>>To help with debugging I am also printing a snapshot of reactor state
>>at a certain time.
>>
>>----
>>
>>I prefer the Arrange/Act/Assert way of writing test:
>>
>>
>>checker = mk.credentialsChecker()
>>credentials = mk.credentials()
>>
>>deferred = checker.requestAvatarId(credentials)
>>failure = self.getDeferredFailure(deferred)
>>
>>self.assertFailureType(AuthentiationError, failure)
>>self.assertEqual(credentials.username, failure.value.username)
>>
>>
>>I found it easier to read than this version:
>>
>>
>>checker = mk.credentialsChecker()
>>credentials = mk.credentials()
>>
>>    def check_result(result_or_failure):
>>        self.assertFailureType(AuthentiationError, failure)
>>        self.assertEqual(credentials.username, failure.value.username)
>>
>>deferred = checker.requestAvatarId(credentials)
>>deferred.addBoth(check_result)
>>
>>return deferred
>>
>>--------
>>
>>I have updated the code to use as many public reactor members as
>>possible.
>>
>>The following private member are still use:
>>reactor._startedBefore, reactor._started
>>
>>It uses the following public methods:
>>startRunning(), doIteration(), stop(), iterate()
>>
>>Here is the main part that blocks the execution until the deferred got
>>a result.
>>It executes the deferred in the reactor loop.
>>
>>https://github.com/chevah/empirical/blob/master/chevah/empirical/testcase.py#L240
>>
>>------
>>
>>Maybe this is has only limited usage, but I just wanted to share this
>>work.
>>For me, this makes writing test a much nicer experience.
>
> Hi Adi,
>
> This basically looks like an implementation of the old, now-removed
> `TestCase.wait` API.
>
> We got rid of `wait` for several reasons:
>
>   * It was hard to implement.  By the end, it sort of worked with most
> reactors - but not all of them.
>
>   * It is a tool for building non-deterministic, slow tests.  If tests
> are written *not* to do real I/O and *not* to wait for real time to
> pass, then they don't need to let a real reactor spin.
>
> We replaced these ideas:
>
>   * with returning a `Deferred` from a test method (which works even if
> you don't use trial to run your tests - but not if you don't subclass
> trial's `TestCase`).  We eventually moved on from this idea, though many
> parts of Twisted itself are still tested using this feature, to...
>
>   * things like `twisted.test.proto_helpers.MemoryReactor`,
> `twisted.internet.task.Clock`, and most recently
> `TestCase.successResultOf` and `TestCase.failureResultOf` (but don't
> confuse these with your `getDeferredFailure` - they are significantly
> less capable).
>
> I'd encourage you to explore testing strategies that use
> reactor/transport/time fakes and give us feedback about where they're
> not making your job easy enough.  I think ultimately you'll be happier
> with the resulting tests, and you won't have to maintain so much hairy
> reactor manipulation code.

I already use StringTransport in various forms for unit and
integration tests and it is great!
Clock is also great for delayedCalls. I also have various
mock/dummy/spy implementations for transports/channels.

The whole Twisted architecture make writing tests a fun task! Thanks!

I am "spining" the reactor to "resolve" all deferreds involved in a
StringTransport conversation or in an DeferredList or other kind of
chained deferreds. These are what I call "integration tests" and they
only use memory, no external I/O.

In most of my calles of result = self.getDeferredResult(deferred), the
deferred's callback() method was already called and I just want to
resolve the callbacks chain.

Is there something in _synctest that can "resolve" a list/chain of deferreds?

I was not aware of MemoryReactor. Thanks for the note. From what I can
read in the code, it does not help with spinning the reactor.

-----


I only do real I/O for what I call, "system tests" these are checking
integration of my code with the outside world (the system). They are
kept to a minimum.
Since there should not be to many of these tests, returning a deferred
is not a big annoyance... just that the code is harder to read.

Thanks again for all your feedback!
-- 
Adi Roiban



From adi at roiban.ro  Tue Mar 26 05:24:32 2013
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 26 Mar 2013 13:24:32 +0200
Subject: [Twisted-Python] GitHub Twisted organization/repo
Message-ID: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>

Hi,

Are there any plans with the Twisted repo from GitHub?

https://github.com/twisted/twisted

Looks like it was not updated in a while.

Garret Heaton is already doing a 15min mirroring of master/trunk

https://github.com/powdahound/twisted

Both repos have a couple of forks and it would be nice if all forks
are from the same repo.

I prefer and use GitHub code browsing since it is much faster than
Twisted's official Trac code browsing.

---------------

I now see that Tom Prince has already created git branches on GitHub
for the ticket he is reviewing. Many thanks!

I have already started creating git branches on GitHub for all my
patched for Twisted. I found it much pleasant to send a "live patch"
URL rather than a static attached diff file.

Ex live diff:
https://github.com/chevah/twisted/compare/chevah:master...chevah:5411-ftp-list-unicode

Append .diff to the url and you have a patch file:
https://github.com/chevah/twisted/compare/chevah:master...chevah:5411-ftp-list-unicode.diff

As a non-commiter for SVN this makes my life much more easier.
Manually creating diff and attaching them to a slow Trac can cause a
bit of frustration... but I always find to hard to follow a SVN branch
that was created for at ticket and manually apply diffs on local
copies.

I find it very hard to work in parallel on more than 4 tickets and
tracking diffs outside of SVN/GIT is not fun.

I understand that moving from SVN to GIT is not easy and if core
developers can create and share SVN branches there is no big
inconvenience.

For me, as a non-commiter, contributing to Twisted is not fun.

Sorry for bothering you with my frustrations. I hope that you find the
feedback useful, otherwise feel free to ignore it :)

-- 
Adi Roiban



From itamar at itamarst.org  Tue Mar 26 05:40:23 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 26 Mar 2013 07:40:23 -0400
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <CAFycZ9d8scKXQnPa-0hfiVUbyc2QQYJ7QNQpdiT58q+sgdsgmw@mail.gmail.com>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
	<CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
	<20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>
	<CAFycZ9cC1oE6a_+_x_kV7oTfL12jePbY_OM+DKt9RApNMYR5oQ@mail.gmail.com>
	<20130325134839.2461.1356587987.divmod.xquotient.17@localhost6.localdomain6>
	<CAFycZ9d8scKXQnPa-0hfiVUbyc2QQYJ7QNQpdiT58q+sgdsgmw@mail.gmail.com>
Message-ID: <51518927.4050902@itamarst.org>

On 03/26/2013 06:39 AM, Adi Roiban wrote:
> I am "spining" the reactor to "resolve" all deferreds involved in a
> StringTransport conversation or in an DeferredList or other kind of
> chained deferreds. These are what I call "integration tests" and they
> only use memory, no external I/O.
If you're only using StringTransport or Clock, there is no need for a 
real reactor. Deferreds have nothing to do with the reactor as such.

> In most of my calles of result = self.getDeferredResult(deferred), the
> deferred's callback() method was already called and I just want to
> resolve the callbacks chain.

Again, that does not require the reactor. E.g.:

 >>> d = Deferred()
 >>> d.callback(1)
 >>> l = []
 >>> d.addCallback(l.append)
 >>> l
[1]

You might also want to look at the latest version of 
http://twistedmatrix.com/documents/current/core/howto/trial.html, in 
particular the new successResultOf and similar APIs.




From adi at roiban.ro  Tue Mar 26 06:09:27 2013
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 26 Mar 2013 14:09:27 +0200
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <51518927.4050902@itamarst.org>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
	<CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
	<20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>
	<CAFycZ9cC1oE6a_+_x_kV7oTfL12jePbY_OM+DKt9RApNMYR5oQ@mail.gmail.com>
	<20130325134839.2461.1356587987.divmod.xquotient.17@localhost6.localdomain6>
	<CAFycZ9d8scKXQnPa-0hfiVUbyc2QQYJ7QNQpdiT58q+sgdsgmw@mail.gmail.com>
	<51518927.4050902@itamarst.org>
Message-ID: <CAFycZ9c453CdJuutAj80hwAB28hOx9vC8s6MeMOTeK-1gcaEzw@mail.gmail.com>

On 26 March 2013 13:40, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> On 03/26/2013 06:39 AM, Adi Roiban wrote:
>> I am "spining" the reactor to "resolve" all deferreds involved in a
>> StringTransport conversation or in an DeferredList or other kind of
>> chained deferreds. These are what I call "integration tests" and they
>> only use memory, no external I/O.
> If you're only using StringTransport or Clock, there is no need for a
> real reactor. Deferreds have nothing to do with the reactor as such.
>
>> In most of my calles of result = self.getDeferredResult(deferred), the
>> deferred's callback() method was already called and I just want to
>> resolve the callbacks chain.
>
> Again, that does not require the reactor. E.g.:
>
>  >>> d = Deferred()
>  >>> d.callback(1)
>  >>> l = []
>  >>> d.addCallback(l.append)
>  >>> l
> [1]
>
> You might also want to look at the latest version of
> http://twistedmatrix.com/documents/current/core/howto/trial.html, in
> particular the new successResultOf and similar APIs.

Many thanks for you comment. I am stupid :) and successResultOf is great!


-- 
Adi Roiban



From kevin.horn at gmail.com  Tue Mar 26 08:03:58 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 26 Mar 2013 09:03:58 -0500
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <4804AB74-C814-4306-89F0-E381E34E248D@twistedmatrix.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
	<03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
	<CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>
	<4804AB74-C814-4306-89F0-E381E34E248D@twistedmatrix.com>
Message-ID: <CA+U=zK0=BeDpGFkz44KYUfcqY7Hd-dkF634HqCiXeDBQXVXn8w@mail.gmail.com>

On Mon, Mar 25, 2013 at 6:29 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 25, 2013, at 9:16 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> How can you tell that this was created by a directive?  You can't, because
> it could just as easily have been a list full of links to begin with.
>
>
> But, I don't care if it was created by a directive or not.
>
> I think we're talking about two different things.
>
> What you seem to be talking about is using Sphinx to do source-to-source
> Lore-to-ReST transformation.  In that case, you're (sort of) right, in that
> information is lost when you invoke directives.  If we did this, and it
> worked, it would just be a slightly better way to implement lore2sphinx;
> we'd still need to manage the transition in largely the same way.
>
> What *I'm* talking about is just using Lore source as an input to Sphinx,
> and going straight to the output HTML.  In order to do this, we just need
> to construct the right tree and actually *invoke* the directive callables
> at the right time.  They produce whatever output they want to produce, and
> we hand that back to Sphinx, and it outputs some docs.  With this strategy,
> we just switch to sphinx by switching our build process; we don't switch
> input formats.  Then, if someone wants to use Lore they can, if they want
> to use ReST they can, and we can migrate on an as-needed basis; there's no
> need for a single big format migration for us to start using Sphinx.
>
>
Hmmm.  We are indeed talking about two different things.

What you describe is probably technically possible, but I still don't think
it's a very good approach.  It seems to me that it would be very brittle
and error prone.  You'd need to:
- figure out the node output of every directive you were trying to
replicate, with every type of (tedious in the best case, possibly very
tricky for some directives, but maybe not too bad)
- figure out a system to "inject" those nodes at the right time (not sure
how difficult this would be)
- figure out how Sphinx modifies the doctrees to do all it's linking, index
generation, toctree handling, etc. (I think this is the hardest part)
- figure out a way to get Sphinx to take doctrees as input (I'm guessing
you'd serialize them in whatever way Sphinx does when it does it's caching,
stick them in the cache, and then get Sphinx to build from the cache?)

What about changing the build process to use some kind of tool that goes
over the doc files, and if a source file is in lore format, it translates
it using rstgen, and if it's already a rst file, it just copies it into the
Sphinx project as-is?  Then just build the Sphinx project.  I think this
would be a lot less hassle than trying to decipher and replicate a bunch of
docutils and Sphinx internals, and would really only be a minor change to
the way that the lore2sphinx command line tool already works.  It just
processes each lore file and sends the output to an output directory, so
you'd just need to modify it to skip the processing and only copy rst files.

With the new refactoring of lore2sphinx into lore2sphinx-ng, I think this
is possible and would yield acceptable results.  Of course someone still
would need to finish lore2sphinx-ng and rstgen, but that's either going to
have to happen anyway, or some other tool would have to be built that mucks
with doctrees.

Thoughts?

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130326/46223bda/attachment.html>

From _ at lvh.cc  Tue Mar 26 09:11:48 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Tue, 26 Mar 2013 16:11:48 +0100
Subject: [Twisted-Python] Twisted dinner pictures
In-Reply-To: <06F12164-5776-43C2-B182-38F261C93DF5@ox.cx>
References: <06F12164-5776-43C2-B182-38F261C93DF5@ox.cx>
Message-ID: <CAE_Hg6beG+g+MtPHyjc2LZFnpzkuakFPRQWVfHpLiB+OCkTJ8g@mail.gmail.com>

I think that last year's GSoC student came in not knowing any Twisted and
was a speaker this year that picked up a release manager hat just to get me
to merge my 5 year old branch is a testament to:

- open source is awesome
- sprints are awesome
- pycon is awesome (even if my phone insists on correcting it to "toxin")
- ashfall is awesome
On Mar 25, 2013 7:08 PM, "Hynek Schlawack" <hs at ox.cx> wrote:

> Hi,
>
> As you may have noticed, I'm building a little page to show off that PyCon
> wasn't about donglegate. http://thisispycon.com
>
> I would love to post about our little dinner and would be delighted if
> anyone having pics AND quotes could forward them to me.
>
> Same goes for sprints etc, flood me!
>
> Cheers,
>
> Hynek
>
> Sent from my phone.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130326/2513b3d1/attachment.html>

From hs at ox.cx  Tue Mar 26 09:42:06 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Tue, 26 Mar 2013 16:42:06 +0100
Subject: [Twisted-Python] Twisted dinner pictures
In-Reply-To: <CAE_Hg6beG+g+MtPHyjc2LZFnpzkuakFPRQWVfHpLiB+OCkTJ8g@mail.gmail.com>
References: <06F12164-5776-43C2-B182-38F261C93DF5@ox.cx>
	<CAE_Hg6beG+g+MtPHyjc2LZFnpzkuakFPRQWVfHpLiB+OCkTJ8g@mail.gmail.com>
Message-ID: <B4920000-DBBE-404C-8773-B7BAAB58049A@ox.cx>

Great, now make it coherent and quotable please. :)

And the others: please help out too! I won’t name people I know about having pictures because they may not want me to share them with the world – but know that I’m sad. ;)

P.S. Does anyone have a picture of “Go Ashwini”?

Am 26.03.2013 um 16:11 schrieb Laurens Van Houtven <_ at lvh.cc>:

> I think that last year's GSoC student came in not knowing any Twisted and was a speaker this year that picked up a release manager hat just to get me to merge my 5 year old branch is a testament to:
> 
> - open source is awesome
> - sprints are awesome
> - pycon is awesome (even if my phone insists on correcting it to "toxin")
> - ashfall is awesome
> 
> On Mar 25, 2013 7:08 PM, "Hynek Schlawack" <hs at ox.cx> wrote:
> Hi,
> 
> As you may have noticed, I'm building a little page to show off that PyCon wasn't about donglegate. http://thisispycon.com
> 
> I would love to post about our little dinner and would be delighted if anyone having pics AND quotes could forward them to me.
> 
> Same goes for sprints etc, flood me!
> 
> Cheers,
> 
> Hynek
> 
> Sent from my phone.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130326/ad133d37/attachment.html>

From tom.prince at ualberta.net  Tue Mar 26 10:11:15 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Tue, 26 Mar 2013 10:11:15 -0600
Subject: [Twisted-Python] GitHub Twisted organization/repo
In-Reply-To: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>
References: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>
Message-ID: <87ehf2m998.fsf@hermes.hocat.ca>

Adi Roiban <adi at roiban.ro> writes:

> I now see that Tom Prince has already created git branches on GitHub
> for the ticket he is reviewing. Many thanks!

My repo is actually currently updated via a post-commit
hook. Eventually, that will change to point at twisted/twisted on
github, but I want to run it for a bit against an unofficial repo first.

> I have already started creating git branches on GitHub for all my
> patched for Twisted. I found it much pleasant to send a "live patch"
> URL rather than a static attached diff file.

One reason this is frowned on, is that the code then only exists in an
external resource that may disappear or change without notice. That
means that the work can be lost.

There have been a number of code hosting sites that have disappeared,
and that would take any contributions hosted only there with them.

https://twistedmatrix.com/trac/report/16 has a bunch of old tickets that
mostly with some code, that would potentially been lost.

> I understand that moving from SVN to GIT is not easy and if core
> developers can create and share SVN branches there is no big
> inconvenience.

I don't know if there is a desire to move to git. In any case, before
any such migration can occur. Namely, updating all the hooks and tools
to work with whatever vcs is being switched to. My impression is that,
at least at one point, bzr was a more likely choice of distributed vcs
to switch to.

  Tom



From _ at lvh.cc  Tue Mar 26 10:14:34 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Tue, 26 Mar 2013 17:14:34 +0100
Subject: [Twisted-Python] Twisted dinner pictures
In-Reply-To: <B4920000-DBBE-404C-8773-B7BAAB58049A@ox.cx>
References: <06F12164-5776-43C2-B182-38F261C93DF5@ox.cx>
	<CAE_Hg6beG+g+MtPHyjc2LZFnpzkuakFPRQWVfHpLiB+OCkTJ8g@mail.gmail.com>
	<B4920000-DBBE-404C-8773-B7BAAB58049A@ox.cx>
Message-ID: <CAE_Hg6b39U7GCLqkLe1pdbuq_0zPibR31cYiOkTK2Qnb1zo0wQ@mail.gmail.com>

Yep:

https://farm9.staticflickr.com/8391/8589643930_67282142ac_h.jpg
https://farm9.staticflickr.com/8099/8588545611_3001043027_h.jpg

Sorry for not being coherent: codeine-containing cough drugs + jetlag == bad


On Tue, Mar 26, 2013 at 4:42 PM, Hynek Schlawack <hs at ox.cx> wrote:

> Great, now make it coherent and quotable please. :)
>
> And the others: please help out too! I won’t name people I know about
> having pictures because they may not want me to share them with the world –
> but know that I’m sad. ;)
>
> P.S. Does anyone have a picture of “Go Ashwini”?
>
> Am 26.03.2013 um 16:11 schrieb Laurens Van Houtven <_ at lvh.cc>:
>
> I think that last year's GSoC student came in not knowing any Twisted and
> was a speaker this year that picked up a release manager hat just to get me
> to merge my 5 year old branch is a testament to:
>
> - open source is awesome
> - sprints are awesome
> - pycon is awesome (even if my phone insists on correcting it to "toxin")
> - ashfall is awesome
> On Mar 25, 2013 7:08 PM, "Hynek Schlawack" <hs at ox.cx> wrote:
>
>> Hi,
>>
>> As you may have noticed, I'm building a little page to show off that
>> PyCon wasn't about donglegate. http://thisispycon.com
>>
>> I would love to post about our little dinner and would be delighted if
>> anyone having pics AND quotes could forward them to me.
>>
>> Same goes for sprints etc, flood me!
>>
>> Cheers,
>>
>> Hynek
>>
>> Sent from my phone.
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130326/d1a5095c/attachment.html>

From adi at roiban.ro  Tue Mar 26 11:07:18 2013
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 26 Mar 2013 19:07:18 +0200
Subject: [Twisted-Python] GitHub Twisted organization/repo
In-Reply-To: <87ehf2m998.fsf@hermes.hocat.ca>
References: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>
	<87ehf2m998.fsf@hermes.hocat.ca>
Message-ID: <CAFycZ9cKFdFQOn8AGDRFGBs-q6xc2yrCahGpiNFKE2KijfyKVw@mail.gmail.com>

On 26 March 2013 18:11, Tom Prince <tom.prince at ualberta.net> wrote:
> Adi Roiban <adi at roiban.ro> writes:
>
>> I now see that Tom Prince has already created git branches on GitHub
>> for the ticket he is reviewing. Many thanks!
>
> My repo is actually currently updated via a post-commit
> hook. Eventually, that will change to point at twisted/twisted on
> github, but I want to run it for a bit against an unofficial repo first.

>> I have already started creating git branches on GitHub for all my
>> patched for Twisted. I found it much pleasant to send a "live patch"
>> URL rather than a static attached diff file.
>
> One reason this is frowned on, is that the code then only exists in an
> external resource that may disappear or change without notice. That
> means that the work can be lost.
>
> There have been a number of code hosting sites that have disappeared,
> and that would take any contributions hosted only there with them.
>
> https://twistedmatrix.com/trac/report/16 has a bunch of old tickets that
> mostly with some code, that would potentially been lost.

I understand this and I am not requesting to move the code to GitHub.
I don't think that this is a god idea.

I was only asking about GitHub mirrors.
The main request for this thread was to have a single source repo
mirror for Twisted in GitHub.
Now there are at least 2.

Now there are also 2 unrelated branches in GitHub for the same
twisted, my original branch and Tom's mirror.

>> I understand that moving from SVN to GIT is not easy and if core
>> developers can create and share SVN branches there is no big
>> inconvenience.
>
> I don't know if there is a desire to move to git. In any case, before
> any such migration can occur. Namely, updating all the hooks and tools
> to work with whatever vcs is being switched to. My impression is that,
> at least at one point, bzr was a more likely choice of distributed vcs
> to switch to.
>
I am not requesting to move to Git.

I was just expressing my frustration that attaching patch files to
Trac is not fun, and working with read-only SVN is not fun, and
following out-of-line review comments is not fun.


-- 
Adi Roiban



From glyph at twistedmatrix.com  Tue Mar 26 13:48:28 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 26 Mar 2013 12:48:28 -0700
Subject: [Twisted-Python] GitHub Twisted organization/repo
In-Reply-To: <CAFycZ9cKFdFQOn8AGDRFGBs-q6xc2yrCahGpiNFKE2KijfyKVw@mail.gmail.com>
References: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>
	<87ehf2m998.fsf@hermes.hocat.ca>
	<CAFycZ9cKFdFQOn8AGDRFGBs-q6xc2yrCahGpiNFKE2KijfyKVw@mail.gmail.com>
Message-ID: <7C164E68-BBC2-4F54-91B9-C3ED20C8A641@twistedmatrix.com>


On Mar 26, 2013, at 10:07 AM, Adi Roiban <adi at roiban.ro> wrote:

> I was just expressing my frustration that attaching patch files to
> Trac is not fun, and working with read-only SVN is not fun, and
> following out-of-line review comments is not fun.

Demonstrably, all of these things are more fun than volunteering to maintain a functioning git mirror, since people do these things all the time, but do not do that ;).

We'd love to have a single source github mirror.  Can you provide assistance getting it set up, monitored and maintained?

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130326/1f42e9df/attachment.html>

From adi at roiban.ro  Tue Mar 26 14:03:22 2013
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 26 Mar 2013 22:03:22 +0200
Subject: [Twisted-Python] GitHub Twisted organization/repo
In-Reply-To: <7C164E68-BBC2-4F54-91B9-C3ED20C8A641@twistedmatrix.com>
References: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>
	<87ehf2m998.fsf@hermes.hocat.ca>
	<CAFycZ9cKFdFQOn8AGDRFGBs-q6xc2yrCahGpiNFKE2KijfyKVw@mail.gmail.com>
	<7C164E68-BBC2-4F54-91B9-C3ED20C8A641@twistedmatrix.com>
Message-ID: <CAFycZ9ecJvQopAifQSSw7CKGHdm+7SjB7Zcdm6KF5D3hXYcRbw@mail.gmail.com>

On 26 March 2013 21:48, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Mar 26, 2013, at 10:07 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> I was just expressing my frustration that attaching patch files to
> Trac is not fun, and working with read-only SVN is not fun, and
> following out-of-line review comments is not fun.
>
>
> Demonstrably, all of these things are more fun than volunteering to maintain
> a functioning git mirror, since people do these things all the time, but do
> not do that ;).
>
> We'd love to have a single source github mirror.  Can you provide assistance
> getting it set up, monitored and maintained?
>
> Thanks,
>
> -glyph

Thanks Glyph,

I am happy to help with that.
I just wanted to know that there is interest in a single mirror and I
will work from that.

I will check with Garret Heaton and maybe with Tom Prince (if he is
not too busy).


-- 
Adi Roiban



From glyph at twistedmatrix.com  Tue Mar 26 14:41:47 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 26 Mar 2013 13:41:47 -0700
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <CA+U=zK0=BeDpGFkz44KYUfcqY7Hd-dkF634HqCiXeDBQXVXn8w@mail.gmail.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
	<03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
	<CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>
	<4804AB74-C814-4306-89F0-E381E34E248D@twistedmatrix.com>
	<CA+U=zK0=BeDpGFkz44KYUfcqY7Hd-dkF634HqCiXeDBQXVXn8w@mail.gmail.com>
Message-ID: <D8034A5E-360B-43E6-9065-1654A5CE94C1@twistedmatrix.com>

On Mar 26, 2013, at 7:03 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> - figure out a way to get Sphinx to take doctrees as input (I'm guessing you'd serialize them in whatever way Sphinx does when it does it's caching, stick them in the cache, and then get Sphinx to build from the cache?)

This is the only part of the process I believe is actually necessary.  All the other stuff you wrote assumes that this can't be made to work :).  But as I understand it, this is specifically what JP asked Doug.

The whole point is that we want to go straight from Lore->some docutils data structure.  If we have to emit intermediary ReST, it's almost as bad as having to do the whole source translation in the first place.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130326/6af06e15/attachment.html>

From glyph at twistedmatrix.com  Tue Mar 26 14:42:14 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 26 Mar 2013 13:42:14 -0700
Subject: [Twisted-Python] GitHub Twisted organization/repo
In-Reply-To: <CAFycZ9ecJvQopAifQSSw7CKGHdm+7SjB7Zcdm6KF5D3hXYcRbw@mail.gmail.com>
References: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>
	<87ehf2m998.fsf@hermes.hocat.ca>
	<CAFycZ9cKFdFQOn8AGDRFGBs-q6xc2yrCahGpiNFKE2KijfyKVw@mail.gmail.com>
	<7C164E68-BBC2-4F54-91B9-C3ED20C8A641@twistedmatrix.com>
	<CAFycZ9ecJvQopAifQSSw7CKGHdm+7SjB7Zcdm6KF5D3hXYcRbw@mail.gmail.com>
Message-ID: <BC95511D-EC00-42A8-AE46-F3AD164000D1@twistedmatrix.com>


On Mar 26, 2013, at 1:03 PM, Adi Roiban <adi at roiban.ro> wrote:

> Thanks Glyph,
> 
> I am happy to help with that.
> I just wanted to know that there is interest in a single mirror and I
> will work from that.
> 
> I will check with Garret Heaton and maybe with Tom Prince (if he is
> not too busy).

Great.  I hope we can corral all the effort that's being spent on this mirroring into the same direction :).

Thanks a lot,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130326/f77a7700/attachment.html>

From jml at mumak.net  Tue Mar 26 17:44:58 2013
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 26 Mar 2013 23:44:58 +0000
Subject: [Twisted-Python] Notes from Twisted BoF at PyCon 2013
In-Reply-To: <39764F1B-2817-4862-AA63-42F6D4945DE3@twistedmatrix.com>
References: <CAOp9P3p9wJghCDNzdJA6jaNRCUr0yzUj+SBRT5dJXfR2s_bBFw@mail.gmail.com>
	<20130325133822.2461.1510511860.divmod.xquotient.4@localhost6.localdomain6>
	<39764F1B-2817-4862-AA63-42F6D4945DE3@twistedmatrix.com>
Message-ID: <CAHZ8tna0JxjwJEg_1iSz0H-gUPKcYZiRUMqwnHXO35Qa+uPHOA@mail.gmail.com>

On Mon, Mar 25, 2013 at 11:00 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 25, 2013, at 6:38 AM, exarkun at twistedmatrix.com wrote:
>
> > Thanks for taking those notes, Itamar.
> >
> > I copied the summary onto the wiki and fleshed out the ideas a bit:
> >
> > https://twistedmatrix.com/trac/wiki/Fellowship2013/Priorities
> >
> > Jean-Paul
>
> Thanks to both of you for getting this published.
>
> I hope that everyone will read it and ask for clarification if anything is
> not obvious to those who could not attend :).
>

Looks both obvious & sensible to me. Thanks for sharing!

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130326/832535f2/attachment.html>

From powdahound at gmail.com  Tue Mar 26 19:32:09 2013
From: powdahound at gmail.com (Garret Heaton)
Date: Tue, 26 Mar 2013 18:32:09 -0700
Subject: [Twisted-Python] GitHub Twisted organization/repo
In-Reply-To: <BC95511D-EC00-42A8-AE46-F3AD164000D1@twistedmatrix.com>
References: <CAFycZ9f6V+c9BOm361rt1skt4B6Xd3-GHyRzN3vGEpemqNiQMQ@mail.gmail.com>
	<87ehf2m998.fsf@hermes.hocat.ca>
	<CAFycZ9cKFdFQOn8AGDRFGBs-q6xc2yrCahGpiNFKE2KijfyKVw@mail.gmail.com>
	<7C164E68-BBC2-4F54-91B9-C3ED20C8A641@twistedmatrix.com>
	<CAFycZ9ecJvQopAifQSSw7CKGHdm+7SjB7Zcdm6KF5D3hXYcRbw@mail.gmail.com>
	<BC95511D-EC00-42A8-AE46-F3AD164000D1@twistedmatrix.com>
Message-ID: <CANL3M9NdwHYv3hDwJJ8Ct+e+Aaz_r_RR=dA2MvNnactwgNq2ZQ@mail.gmail.com>

Here's the simple script I'm running to sync the repo over to
github.com/powdahound/twisted: https://gist.github.com/powdahound/5250837

Happy to transfer ownership of the repo to someone else if that ends up
being helpful. Don't believe I have much to add in terms of repo-syncing
knowledge, management, or monitoring. I'm honestly surprised this simple
cron has been working as well as it has for so long. :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130326/aeda567a/attachment.html>

From kevin.horn at gmail.com  Tue Mar 26 21:26:11 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 26 Mar 2013 22:26:11 -0500
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <D8034A5E-360B-43E6-9065-1654A5CE94C1@twistedmatrix.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
	<03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
	<CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>
	<4804AB74-C814-4306-89F0-E381E34E248D@twistedmatrix.com>
	<CA+U=zK0=BeDpGFkz44KYUfcqY7Hd-dkF634HqCiXeDBQXVXn8w@mail.gmail.com>
	<D8034A5E-360B-43E6-9065-1654A5CE94C1@twistedmatrix.com>
Message-ID: <CA+U=zK0Qc=e0c6TYK2XSVDtFnP-s8tSg3HOBHA=z8eedEfG_BQ@mail.gmail.com>

On Tue, Mar 26, 2013 at 3:41 PM, Glyph <glyph at twistedmatrix.com> wrote:

> On Mar 26, 2013, at 7:03 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> - figure out a way to get Sphinx to take doctrees as input (I'm guessing
> you'd serialize them in whatever way Sphinx does when it does it's caching,
> stick them in the cache, and then get Sphinx to build from the cache?)
>
>
> This is the only part of the process I believe is actually necessary.  All
> the other stuff you wrote assumes that this can't be made to work :).  But
> as I understand it, this is specifically what JP asked Doug.
>

I don't think this (only needing to figure out the last part) is really the
case:

- figure out the node output of every directive you were trying to
replicate, with every type of (tedious in the best case, possibly very
tricky for some directives, but maybe not too bad)

You need this to know what nodes to create in your tree.  This doesn't seem
too bad, until you realize that a number of the Sphinx-specific directives
you *absolutely must have* (or at least the nodes they create, depend on
the Sphinx build environment.  So you need to either re-create the build
environment, or you need to re-create all of these directives in your own
code.

- figure out a system to "inject" those nodes at the right time (not sure
how difficult this would be)

This one is probably not too bad, since you could probably get away with a
bare minimum of just sticking your (for example) toctree nodes right after
your main heading or something.  And you could probably get away with
something similar for index entries or whatever.

- figure out how Sphinx modifies the doctrees to do all it's linking, index
generation, toctree handling, etc.

Probably not too much needs to be done here directly, as I *think* that
Sphinx does all this after it builds the doctrees, so if you can get the
doctrees into Sphinx you're probably fine.  Don't quote me on that, though.
 So I no longer think this is the hardest part.  But I think you'd still
have to have a decent understanding of how these bits work internally to
generate your nodes correctly.  So a learning curve, though probably no
actual code to write specifically for this.

- figure out a way to get Sphinx to take doctrees as input (I'm guessing
you'd serialize them in whatever way Sphinx does when it does it's caching,
stick them in the cache, and then get Sphinx to build from the cache?)

Then you have to do this bit. The "obvious" way to do this is to create
your doctrees and then pickle them, like Sphinx does when it caches parsed
documents.  Then make Sphinx build its output from these "cached" files
(which I don't think it will currently do, but it can probably be made to
do it).

The whole point is that we want to go straight from Lore->some docutils
> data structure.
>

Why?  What does this buy us?  To me it seems more complicated, requires
more work, depends on *internal* APIs of a separate project (actually 2
separate projects), and doesn't seem to gain very much if anything.  What's
the reasoning here?  Keep in mind that I'm without the benefit of whatever
discussion on this took place at PyCon, so maybe I'm just missing something.

If it's just an incremental transition, then I think we can get that
without resorting to relying on the guts of two fairly complicated systems.

If we have to emit intermediary ReST, it's almost as bad as having to do
> the whole source translation in the first place.
>

I don't see how emitting intermediary ReST, which at least has a spec
(granted the spec is ugly to look at, but it's pretty complete) is any
worse than emitting intermediary doctrees, which could change out from
under us.

Summing up a bit:

Generating ReST is a challenging problem, no doubt.  But it's the _only_
challenging problem if we go the source translation route.

If we go the doctrees route, I don't understand the advantage gained, and
I'm concerned about dealing with the internals of docutils and Sphinx.

(also it's more work, and I'm lazy :P )

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130326/9872effe/attachment.html>

From andrew at bemusement.org  Tue Mar 26 21:43:08 2013
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 27 Mar 2013 14:43:08 +1100
Subject: [Twisted-Python] Lore and generating reStructuredText
 (Lore2Sphinx)
In-Reply-To: <CA+U=zK0Qc=e0c6TYK2XSVDtFnP-s8tSg3HOBHA=z8eedEfG_BQ@mail.gmail.com>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
	<03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
	<CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>
	<4804AB74-C814-4306-89F0-E381E34E248D@twistedmatrix.com>
	<CA+U=zK0=BeDpGFkz44KYUfcqY7Hd-dkF634HqCiXeDBQXVXn8w@mail.gmail.com>
	<D8034A5E-360B-43E6-9065-1654A5CE94C1@twistedmatrix.com>
	<CA+U=zK0Qc=e0c6TYK2XSVDtFnP-s8tSg3HOBHA=z8eedEfG_BQ@mail.gmail.com>
Message-ID: <20130327034308.GA5140@flay.puzzling.org>

Kevin Horn wrote:
[…]
> Why?  What does this buy us?  To me it seems more complicated, requires
[…]
> 
> If it's just an incremental transition, then I think we can get that
> without resorting to relying on the guts of two fairly complicated systems.

Although I'm blissfully ignorant of the deeper, darker details of
docutils and sphinx (and hope to remain so), I feel compelled to point
out that an incremental transition is more than a “just”.  You can start
reaping the rewards of the new system sooner and with less risk than an
all-or-nothing transition, it reduces merge conflicts for
work-in-progress doc branches, etc.

So I'd say incremental transition is closer to a “must” than a “just”!

-Andrew.



From kevin.horn at gmail.com  Wed Mar 27 07:17:21 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 27 Mar 2013 08:17:21 -0500
Subject: [Twisted-Python] Lore and generating reStructuredText
	(Lore2Sphinx)
In-Reply-To: <20130327034308.GA5140@flay.puzzling.org>
References: <CA+U=zK1n7BDDEPjmkpS8hhS8jowGHTpHENG1iMRQ5p-KDHWEYw@mail.gmail.com>
	<03E48D84-6BBA-4727-84B3-0656CE933A94@twistedmatrix.com>
	<CA+U=zK25eDrMWQAkr9YXUR=VyGDqb=hKhuDaT8RGtJON=HZJkQ@mail.gmail.com>
	<4804AB74-C814-4306-89F0-E381E34E248D@twistedmatrix.com>
	<CA+U=zK0=BeDpGFkz44KYUfcqY7Hd-dkF634HqCiXeDBQXVXn8w@mail.gmail.com>
	<D8034A5E-360B-43E6-9065-1654A5CE94C1@twistedmatrix.com>
	<CA+U=zK0Qc=e0c6TYK2XSVDtFnP-s8tSg3HOBHA=z8eedEfG_BQ@mail.gmail.com>
	<20130327034308.GA5140@flay.puzzling.org>
Message-ID: <CA+U=zK0ePDpJwb9U35=veUgeQgrfuhDHXELesj4uqV=eDo1BrQ@mail.gmail.com>

On Tue, Mar 26, 2013 at 10:43 PM, Andrew Bennetts <andrew at bemusement.org>wrote:

> Kevin Horn wrote:
> […]
> > Why?  What does this buy us?  To me it seems more complicated, requires
> […]
> >
> > If it's just an incremental transition, then I think we can get that
> > without resorting to relying on the guts of two fairly complicated
> systems.
>
> Although I'm blissfully ignorant of the deeper, darker details of
> docutils and sphinx (and hope to remain so), I feel compelled to point
> out that an incremental transition is more than a “just”.  You can start
> reaping the rewards of the new system sooner and with less risk than an
> all-or-nothing transition, it reduces merge conflicts for
> work-in-progress doc branches, etc.
>
> So I'd say incremental transition is closer to a “must” than a “just”!
>
> -Andrew.
>

Yes, that was "just" in the sense of "only", rather than in the sense of
"merely". :)


--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130327/47a3f258/attachment.html>

From williamson.michaelr at gmail.com  Thu Mar 28 10:24:17 2013
From: williamson.michaelr at gmail.com (Michael Williamson)
Date: Thu, 28 Mar 2013 10:24:17 -0600
Subject: [Twisted-Python] Problems with TLS connection not shutting down.
Message-ID: <CA+bfVEj6ez8HLNHKKg-WoXoNTN7LYhAg-J8w6z+ag9wABF2SLw@mail.gmail.com>

Hi, I'm having an issue where a tls connection never seems to shutdown
properly, and as a result, all the associated cleanup never happens.

Basically we're trying to implement a jabber client and allow the user to
sign out and then re-sign back in without completely quitting the program.
 When the user tries to sign back in, Twisted goes nuts because the
original connection was never shutdown properly.

So, I traced through the code with the debugger and I came to the
_shutdownTLS() function in tls.py.  I believe that what's supposed to
happen is that the first time through, the self._tlsConnection.shutdown()
returns False because the shutdown is initiated.  Then, when the 2nd part
of the shutdown handshake comes back from the server, dataReceived is
called, which calls shutdownTLS again, and then the cleanup can continue.

The problem is that after the initial call to shutdownTLS, I never see
anymore data from the server.  I'm not sure if it's a server issue (we're
just connecting to the Google jabber servers) where they don't close down
their SSL connections correctly, or if I'm just doing something silly.  So
anyway, I could solve this by overriding a bunch of stuff and ensuring that
self.transport.loseConnection() gets called no matter what, even when the
server doesn't respond with the second part of the close handshake, but I
figured I'd ask here first.

So, any TLS experts out there?  Thanks for any help or information - I
really appreciate it,
Mike
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130328/3e05c5e5/attachment.html>

From jonathan at stoppani.name  Thu Mar 28 11:16:15 2013
From: jonathan at stoppani.name (Jonathan Stoppani)
Date: Thu, 28 Mar 2013 13:16:15 -0400
Subject: [Twisted-Python] Twisted source, changes and social analysis
Message-ID: <CAFzCN1sU4Kc_TU2+JA-uH7XtGz-J=trv60Va2xGd4bH9CsPeoQ@mail.gmail.com>

Hello everybody (with access to the Trac DB),

I am currently doing my master thesis on the "analysis and management
of change propagation in complex systems". I'm concentrating my
efforts on software-based complex systems.

As part of my analysis, I gather data from different domains, such as
dependencies between modules of the source code, interactions between
people (like, for example, this mailing list) and change requests (in
this specific case, issues and tickets on an issue tracking system).

A couple of weeks ago I asked on IRC if it would be possible to get
the Trac data from twistedmatrix.com and I was told to write a script
to dump the database by excluding sensitive information.

The script is up for review and auditing over here:

https://gist.github.com/GaretJax/5264941

It can be run by saving it to a .py file or directly with the following command:

curl -s https://gist.github.com/GaretJax/5264941/raw/c478c2c4ec39cdb4bc3ceeb05d57a31063a0a486/dump-trac.py
| python - <projenv> <outfile>

(by replacing the two arguments: trac base directory and the output file).

There are no privacy concerns, as all data being analyzes is publicly
available, either in the repository, in the mailing list archives or
on twistedmatrix.com

After being reviewed, can someone with access to the server please run
it for me?

Thanks,
Jonathan

P.S.: If someone would like more details about the research, a draft
of the project statement can be found here:
https://www.dropbox.com/s/qu3jpxcd4wpat2i/statement-0-r0-2013-03-19.pdf



From glyph at twistedmatrix.com  Thu Mar 28 16:36:22 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 28 Mar 2013 15:36:22 -0700
Subject: [Twisted-Python] Problems with TLS connection not shutting down.
In-Reply-To: <CA+bfVEj6ez8HLNHKKg-WoXoNTN7LYhAg-J8w6z+ag9wABF2SLw@mail.gmail.com>
References: <CA+bfVEj6ez8HLNHKKg-WoXoNTN7LYhAg-J8w6z+ag9wABF2SLw@mail.gmail.com>
Message-ID: <954D03CC-64AF-4189-B2ED-FC46055F6E2C@twistedmatrix.com>


On Mar 28, 2013, at 9:24 AM, Michael Williamson <williamson.michaelr at gmail.com> wrote:

> Hi, I'm having an issue where a tls connection never seems to shutdown properly, and as a result, all the associated cleanup never happens.
> 
> Basically we're trying to implement a jabber client and allow the user to sign out and then re-sign back in without completely quitting the program.  When the user tries to sign back in, Twisted goes nuts because the original connection was never shutdown properly.
> 
> So, I traced through the code with the debugger and I came to the _shutdownTLS() function in tls.py.  I believe that what's supposed to happen is that the first time through, the self._tlsConnection.shutdown() returns False because the shutdown is initiated.  Then, when the 2nd part of the shutdown handshake comes back from the server, dataReceived is called, which calls shutdownTLS again, and then the cleanup can continue.
> 
> The problem is that after the initial call to shutdownTLS, I never see anymore data from the server.  I'm not sure if it's a server issue (we're just connecting to the Google jabber servers) where they don't close down their SSL connections correctly, or if I'm just doing something silly.  So anyway, I could solve this by overriding a bunch of stuff and ensuring that self.transport.loseConnection() gets called no matter what, even when the server doesn't respond with the second part of the close handshake, but I figured I'd ask here first.
> 
> So, any TLS experts out there?  Thanks for any help or information - I really appreciate it,

Sadly I don't know enough about TLS specifics to tell you for sure.

It sounds like you may have spotted a bug.  More investigation is required though.  Does .abortConnection() do what you expect?  In your current problematic scenario, does the TCP connection to your peer stay alive?

-glyph





From williamson.michaelr at gmail.com  Thu Mar 28 16:55:15 2013
From: williamson.michaelr at gmail.com (Michael Williamson)
Date: Thu, 28 Mar 2013 16:55:15 -0600
Subject: [Twisted-Python] Problems with TLS connection not shutting down.
In-Reply-To: <954D03CC-64AF-4189-B2ED-FC46055F6E2C@twistedmatrix.com>
References: <CA+bfVEj6ez8HLNHKKg-WoXoNTN7LYhAg-J8w6z+ag9wABF2SLw@mail.gmail.com>
	<954D03CC-64AF-4189-B2ED-FC46055F6E2C@twistedmatrix.com>
Message-ID: <CA+bfVEjK_XbwSyktHL_TS5vzMPmPTfLy40_nmOC_ME_PE6JfBQ@mail.gmail.com>

Ah, I never tried abortConnection, but I'm doing something similar - I just
call loseConnection() and that does the trick.  And yes, I believe that the
TCP connection does stay alive because I was watching closeSocket() and it
was never called.

I wish I could be more helpful with regard to code samples to reproduce
this - but right now my stuff is a mess.

We're using the wokkel library, calling stopService() when we want
everything to be cleaned up.  They override that function, but I believe
they're doing everything correctly.  Basically, they're just calling
connection.disconnect() - and eventually the shutdownTLS() gets invoked.

Maybe most people just never care about having to clean up their
connections during a single session?  As for a fix - maybe it's not
necessary to do the test for
if shutdownSuccess in _shutdownTLS() ?

According to the ssl spec, it's not absolutely necessary to wait for the
server to return the close handshake.

That being said, that seems lousy - and it really seems like something else
must be going on.




On Thu, Mar 28, 2013 at 4:36 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 28, 2013, at 9:24 AM, Michael Williamson <
> williamson.michaelr at gmail.com> wrote:
>
> > Hi, I'm having an issue where a tls connection never seems to shutdown
> properly, and as a result, all the associated cleanup never happens.
> >
> > Basically we're trying to implement a jabber client and allow the user
> to sign out and then re-sign back in without completely quitting the
> program.  When the user tries to sign back in, Twisted goes nuts because
> the original connection was never shutdown properly.
> >
> > So, I traced through the code with the debugger and I came to the
> _shutdownTLS() function in tls.py.  I believe that what's supposed to
> happen is that the first time through, the self._tlsConnection.shutdown()
> returns False because the shutdown is initiated.  Then, when the 2nd part
> of the shutdown handshake comes back from the server, dataReceived is
> called, which calls shutdownTLS again, and then the cleanup can continue.
> >
> > The problem is that after the initial call to shutdownTLS, I never see
> anymore data from the server.  I'm not sure if it's a server issue (we're
> just connecting to the Google jabber servers) where they don't close down
> their SSL connections correctly, or if I'm just doing something silly.  So
> anyway, I could solve this by overriding a bunch of stuff and ensuring that
> self.transport.loseConnection() gets called no matter what, even when the
> server doesn't respond with the second part of the close handshake, but I
> figured I'd ask here first.
> >
> > So, any TLS experts out there?  Thanks for any help or information - I
> really appreciate it,
>
> Sadly I don't know enough about TLS specifics to tell you for sure.
>
> It sounds like you may have spotted a bug.  More investigation is required
> though.  Does .abortConnection() do what you expect?  In your current
> problematic scenario, does the TCP connection to your peer stay alive?
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130328/c0ad483e/attachment.html>

From succer110 at tiscali.it  Thu Mar 28 19:24:00 2013
From: succer110 at tiscali.it (succer110 at tiscali.it)
Date: Fri, 29 Mar 2013 02:24:00 +0100 (CET)
Subject: [Twisted-Python] is twisted compatible with pickle?
Message-ID: <8116919.157021364520240322.JavaMail.defaultUser@defaultHost>

I have made 2 application: The client extract data from a sql server (10k lines), and send every line pickled to a "collector" server via socket.The server uses twisted and receive every line, unpikle it and store the data in another sql server.
Everytime i start sending data from client to server, in the first 200 line (everytime a different line) **the server** throws an exception:SOMETIMES it something like:
    Traceback (most recent call last):      File "collector2.py", line 81, in dataReceived        self.count,account	= pickle.loads(data)      File "/usr/lib/python2.6/pickle.py", line 1374, in loads        return Unpickler(file).load()      File "/usr/lib/python2.6/pickle.py", line 858, in load        dispatch[key](self)      File "/usr/lib/python2.6/pickle.py", line 1138, in load_pop        del self.stack[-1]    IndexError: list assignment index out of range
But it's NOT every time the same. Printing my exception i red: Exception: pop from empty listException: list index out of rangeException: "'"Exception: list assignment index out of range
Another strange errors is:File "/usr/lib/python2.6/pickle.py", line 1124, in find_class    __import__(module)exceptions.ImportError: No module named ond'
    for i in listaSAI:    	crm={}        try:    		crm['uid']=i[0]    	except:    		crm['uid']=None    	try:    		crm['type_cond']=i[01]    	except:    		crm['type_cond']=None    	try:    		crm['population_id']=i[2]    	except:    		crm['population_id']=None    	try:    		crm['product_id']=i[3]    	except:    		crm['product_id']=None    	try:    		crm['a_id']=i[4]    	except:    		crm['a_id']=None    	try:    		crm['status']=i[5]    	except:    		crm['status']=None    	#time.sleep(0.001)    	serialized = pickle.dumps((count,crm))    	#print "sent num", count, crm    	s.sendall(serialized)    	count += 1

And my server:
    def dataReceived(self, data):    	try:    		self.count,account	= pickle.loads(data)            	except Exception as e:    		print "Eccezione:", e    		print self.count+1    		print  data    		print traceback.print_exc()


Printing the data in my client tells me that everything it's ok.*If i try to slow down the process of sending using time.sleep(0.01) in my client, EVERYTHING IS FINE, and no exception are raised.*
What can i do to debug my code?
p.s. I suspect that exceptions.ImportError: No module named ond' refers to "type_cond" key in crm.

Invita i tuoi amici e Tiscali ti premia! Il consiglio di un amico vale più di uno spot in TV. Per ogni nuovo abbonato 30 € di premio per te e per lui! Un amico al mese e parli e navighi sempre gratis: http://freelosophy.tiscali.it/ 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130329/ede7ddbf/attachment.html>

From dreid at dreid.org  Thu Mar 28 21:07:18 2013
From: dreid at dreid.org (David Reid)
Date: Thu, 28 Mar 2013 20:07:18 -0700
Subject: [Twisted-Python] is twisted compatible with pickle?
In-Reply-To: <8116919.157021364520240322.JavaMail.defaultUser@defaultHost>
References: <8116919.157021364520240322.JavaMail.defaultUser@defaultHost>
Message-ID: <CA+t4pawXy0TdqhU_w3gMy1x9XRg3y4zadBwfhtkeyy4vLHROdA@mail.gmail.com>

dataReceived gets called with any data that is available on the socket.
 That might not be all data you sent on the other side.  To ensure complete
"messages" are delivered your application has to specify some framing, such
as Netstrings.

See:
http://twistedmatrix.com/documents/current/api/twisted.protocols.basic.NetstringReceiver.htmland
the original specification of netstrings
http://cr.yp.to/proto/netstrings.txt

That being said, it's a very bad idea to send pickles over the network
because unpickling can result in arbitrary code execution.

Peruse some of the results of
https://www.google.com/search?q=pickle+execute+arbitrary+code for examples
of these dangers.

-David


On Thu, Mar 28, 2013 at 6:24 PM, succer110 at tiscali.it
<succer110 at tiscali.it>wrote:

> I have made 2 application:
> The client extract data from a sql server (10k lines), and send every line
> pickled to a "collector" server via socket.
> The server uses twisted and receive every line, unpikle it and store the
> data in another sql server.
>
> Everytime i start sending data from client to server, in the first 200
> line (everytime a different line) **the server** throws an exception:
> SOMETIMES it something like:
>
>     Traceback (most recent call last):
>       File "collector2.py", line 81, in dataReceived
>         self.count,account = pickle.loads(data)
>       File "/usr/lib/python2.6/pickle.py", line 1374, in loads
>         return Unpickler(file).load()
>       File "/usr/lib/python2.6/pickle.py", line 858, in load
>         dispatch[key](self)
>       File "/usr/lib/python2.6/pickle.py", line 1138, in load_pop
>         del self.stack[-1]
>     IndexError: list assignment index out of range
>
> But it's NOT every time the same. Printing my exception i red:
> Exception: pop from empty list
> Exception: list index out of range
> Exception: "'"
> Exception: list assignment index out of range
>
> Another strange errors is:
> File "/usr/lib/python2.6/pickle.py", line 1124, in find_class
>     __import__(module)
> exceptions.ImportError: No module named ond'
>
>     for i in listaSAI:
>     crm={}
>         try:
>     crm['uid']=i[0]
>     except:
>     crm['uid']=None
>     try:
>     crm['type_cond']=i[01]
>     except:
>     crm['type_cond']=None
>     try:
>     crm['population_id']=i[2]
>     except:
>     crm['population_id']=None
>     try:
>     crm['product_id']=i[3]
>     except:
>     crm['product_id']=None
>     try:
>     crm['a_id']=i[4]
>     except:
>     crm['a_id']=None
>     try:
>     crm['status']=i[5]
>     except:
>     crm['status']=None
>     #time.sleep(0.001)
>     serialized = pickle.dumps((count,crm))
>     #print "sent num", count, crm
>     s.sendall(serialized)
>     count += 1
>
>
> And my server:
>
>     def dataReceived(self, data):
>     try:
>     self.count,account = pickle.loads(data)
>     except Exception as e:
>     print "Eccezione:", e
>     print self.count+1
>     print  data
>     print traceback.print_exc()
>
>
>
> Printing the data in my client tells me that everything it's ok.
> *If i try to slow down the process of sending using time.sleep(0.01) in my
> client, EVERYTHING IS FINE, and no exception are raised.*
>
> What can i do to debug my code?
>
> p.s.
> I suspect that exceptions.ImportError: No module named ond' refers to
> "type_cond" key in crm.
>
>
> Invita i tuoi amici e Tiscali ti premia! Il consiglio di un amico vale più
> di uno spot in TV. Per ogni nuovo abbonato 30 € di premio per te e per lui!
> Un amico al mese e parli e navighi sempre gratis:
> http://freelosophy.tiscali.it/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130328/3f5cbf88/attachment.html>

From radix at twistedmatrix.com  Thu Mar 28 21:26:30 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 28 Mar 2013 22:26:30 -0500
Subject: [Twisted-Python] is twisted compatible with pickle?
In-Reply-To: <CA+t4pawXy0TdqhU_w3gMy1x9XRg3y4zadBwfhtkeyy4vLHROdA@mail.gmail.com>
References: <8116919.157021364520240322.JavaMail.defaultUser@defaultHost>
	<CA+t4pawXy0TdqhU_w3gMy1x9XRg3y4zadBwfhtkeyy4vLHROdA@mail.gmail.com>
Message-ID: <CAPkRfURWb_M6R5ROy7NhYyXy1vATzoz5rAQkN=YfBLPhWPwUSA@mail.gmail.com>

>
> On Thu, Mar 28, 2013 at 6:24 PM, succer110 at tiscali.it <
> succer110 at tiscali.it> wrote:
>
>> I have made 2 application:
>> The client extract data from a sql server (10k lines), and send every
>> line pickled to a "collector" server via socket.
>> The server uses twisted and receive every line, unpikle it and store the
>> data in another sql server.
>>
>> Everytime i start sending data from client to server, in the first 200
>> line (everytime a different line) **the server** throws an exception:
>> SOMETIMES it something like:
>>
>>     Traceback (most recent call last):
>>       File "collector2.py", line 81, in dataReceived
>>         self.count,account = pickle.loads(data)
>>       File "/usr/lib/python2.6/pickle.py", line 1374, in loads
>>         return Unpickler(file).load()
>>       File "/usr/lib/python2.6/pickle.py", line 858, in load
>>         dispatch[key](self)
>>       File "/usr/lib/python2.6/pickle.py", line 1138, in load_pop
>>         del self.stack[-1]
>>     IndexError: list assignment index out of range
>>
>>

> And my server:
>>
>>     def dataReceived(self, data):
>>     try:
>>     self.count,account = pickle.loads(data)
>>     except Exception as e:
>>     print "Eccezione:", e
>>     print self.count+1
>>     print  data
>>     print traceback.print_exc()
>>
>>
>>

On Thu, Mar 28, 2013 at 10:07 PM, David Reid <dreid at dreid.org> wrote:

> dataReceived gets called with any data that is available on the socket.
>  That might not be all data you sent on the other side.  To ensure complete
> "messages" are delivered your application has to specify some framing, such
> as Netstrings.
>
> See:
> http://twistedmatrix.com/documents/current/api/twisted.protocols.basic.NetstringReceiver.html and
> the original specification of netstrings
> http://cr.yp.to/proto/netstrings.txt
>
> That being said, it's a very bad idea to send pickles over the network
> because unpickling can result in arbitrary code execution.
>
> Peruse some of the results of
> https://www.google.com/search?q=pickle+execute+arbitrary+code for
> examples of these dangers.
>
> -David
>
>
We also have a FAQ entry about this:

http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith



-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130328/a7ba24c5/attachment.html>

From _ at lvh.cc  Fri Mar 29 05:57:22 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Fri, 29 Mar 2013 12:57:22 +0100
Subject: [Twisted-Python] is twisted compatible with pickle?
In-Reply-To: <8116919.157021364520240322.JavaMail.defaultUser@defaultHost>
References: <8116919.157021364520240322.JavaMail.defaultUser@defaultHost>
Message-ID: <CAE_Hg6bX67k_ouuYSuTyJM_RNhBQ9hfxEezfNE+g60sRpcQhfg@mail.gmail.com>

While everything the people above me have said is correct, I would suggest
AMP as an alternative. It would allow you to send most basic Python data
types in your messages.
On Mar 29, 2013 2:32 AM, "succer110 at tiscali.it" <succer110 at tiscali.it>
wrote:

> I have made 2 application:
> The client extract data from a sql server (10k lines), and send every line
> pickled to a "collector" server via socket.
> The server uses twisted and receive every line, unpikle it and store the
> data in another sql server.
>
> Everytime i start sending data from client to server, in the first 200
> line (everytime a different line) **the server** throws an exception:
> SOMETIMES it something like:
>
>     Traceback (most recent call last):
>       File "collector2.py", line 81, in dataReceived
>         self.count,account = pickle.loads(data)
>       File "/usr/lib/python2.6/pickle.py", line 1374, in loads
>         return Unpickler(file).load()
>       File "/usr/lib/python2.6/pickle.py", line 858, in load
>         dispatch[key](self)
>       File "/usr/lib/python2.6/pickle.py", line 1138, in load_pop
>         del self.stack[-1]
>     IndexError: list assignment index out of range
>
> But it's NOT every time the same. Printing my exception i red:
> Exception: pop from empty list
> Exception: list index out of range
> Exception: "'"
> Exception: list assignment index out of range
>
> Another strange errors is:
> File "/usr/lib/python2.6/pickle.py", line 1124, in find_class
>     __import__(module)
> exceptions.ImportError: No module named ond'
>
>     for i in listaSAI:
>     crm={}
>         try:
>     crm['uid']=i[0]
>     except:
>     crm['uid']=None
>     try:
>     crm['type_cond']=i[01]
>     except:
>     crm['type_cond']=None
>     try:
>     crm['population_id']=i[2]
>     except:
>     crm['population_id']=None
>     try:
>     crm['product_id']=i[3]
>     except:
>     crm['product_id']=None
>     try:
>     crm['a_id']=i[4]
>     except:
>     crm['a_id']=None
>     try:
>     crm['status']=i[5]
>     except:
>     crm['status']=None
>     #time.sleep(0.001)
>     serialized = pickle.dumps((count,crm))
>     #print "sent num", count, crm
>     s.sendall(serialized)
>     count += 1
>
>
> And my server:
>
>     def dataReceived(self, data):
>     try:
>     self.count,account = pickle.loads(data)
>     except Exception as e:
>     print "Eccezione:", e
>     print self.count+1
>     print  data
>     print traceback.print_exc()
>
>
>
> Printing the data in my client tells me that everything it's ok.
> *If i try to slow down the process of sending using time.sleep(0.01) in my
> client, EVERYTHING IS FINE, and no exception are raised.*
>
> What can i do to debug my code?
>
> p.s.
> I suspect that exceptions.ImportError: No module named ond' refers to
> "type_cond" key in crm.
>
>
> Invita i tuoi amici e Tiscali ti premia! Il consiglio di un amico vale più
> di uno spot in TV. Per ogni nuovo abbonato 30 € di premio per te e per lui!
> Un amico al mese e parli e navighi sempre gratis:
> http://freelosophy.tiscali.it/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130329/e88883f7/attachment.html>

From sergun at gmail.com  Fri Mar 29 10:09:14 2013
From: sergun at gmail.com (Sergey Gerasimov)
Date: Fri, 29 Mar 2013 20:09:14 +0400
Subject: [Twisted-Python] Reason of calling Stale Broker inside loopback
Message-ID: <05b301ce2c97$c31e26a0$495a73e0$@gmail.com>

Hello,

 

1.       What is the reason of error "DeadReferenceError: Calling Stale
Broker"?

My program uses PB inside loopback, so I shouldn't have any disconnects.

 

2.       I call many time remote method returning pb.Referenceable. Can it
be a reason of topic 1 or generally lead to system's degradation?

 

Sergey.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130329/94ac07db/attachment-0001.html>

From donal.mcmullan at gmail.com  Fri Mar 29 20:23:55 2013
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Sat, 30 Mar 2013 15:23:55 +1300
Subject: [Twisted-Python] Weta Digital is hiring
Message-ID: <CADf-aJGmdTFF7NungrUWAu8iCCLQO-eQwcWDCCMKdXYuE16yCg@mail.gmail.com>

"Weta Digital is a world leading visual effects company based in
Wellington, New Zealand."

  The "Production Engineer" roles on our jobs page are heavily Python
focused. Some of that Python code will be inside applications like
Autodesk's Maya or the Foundry's Nuke, but most of it will solve the kinds
of problems I'm sure most of you work on routinely.
 http://www.wetafx.co.nz/jobs

  For example, because our render farm is on the large side, we face many
of the challenges of scale that those of you who work on internet-facing
applications will be familiar with. On the client side, we have an ocean of
data to track, and we try to provide our artists with simple tools to get
the most from that data. Frameworks like PySide, Bottle and TxWeb help us
to get there.

  Unsurprisingly, Twisted is well established in the pipeline at Weta, and
it's used in a diverse set of client, server and automated/unattended
applications. We've had superb service from Twisted, and we only
expect itsusage here to grow.

  We have roles in Production Engineering that we'd like to fill as soon as
we can, but we're protective of the great team that we have, and we try to
grow it carefully. We prefer to wait for the right people.

 If you're interested in helping us to deliver some extraordinary software
and film projects, we'd love to hear from you, and the recruitment form on
our site takes just a few minutes to fill in.


http://www.wetafx.co.nz/recruitment-form.php?job-title=Production%20Engineer&form_type=softdev<http://www-ext.wetafx.co.nz/recruitment-form.php?job-title=Production%20Engineer&form_type=softdev>

  Thank you

 Donal McMullan
 Senior Production Engineer
 Weta Digital
 http://www.wetafx.co.nz
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130330/b91c3bda/attachment.html>

From glyph at twistedmatrix.com  Sat Mar 30 13:07:25 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 30 Mar 2013 12:07:25 -0700
Subject: [Twisted-Python] Reason of calling Stale Broker inside loopback
In-Reply-To: <05b301ce2c97$c31e26a0$495a73e0$@gmail.com>
References: <05b301ce2c97$c31e26a0$495a73e0$@gmail.com>
Message-ID: <F3DA0A08-3D31-437B-872D-E027CC5B6392@twistedmatrix.com>


On Mar 29, 2013, at 9:09 AM, Sergey Gerasimov <sergun at gmail.com> wrote:

> Hello,
>  
> 1.       What is the reason of error “DeadReferenceError: Calling Stale Broker”?
> My program uses PB inside loopback, so I shouldn’t have any disconnects. 

It means something disconnected.  Disconnects can happen for many reasons; perhaps your process terminated, perhaps an unhandled exception caused a problem.

> 2.       I call many time remote method returning pb.Referenceable. Can it be a reason of topic 1 or generally lead to system’s degradation?

That should be fine. But I can't see your code, so I have no idea what you mean by "many time".  If you can provide a *short* example of a program with this problem (not your whole program, just the shortest one that works), we might be able to help more.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130330/c005e641/attachment.html>

From exarkun at twistedmatrix.com  Sat Mar 30 22:05:24 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 31 Mar 2013 04:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1364702724.2.928404487@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130331/9921467f/attachment.html>

From gbstack08 at gmail.com  Sun Mar 31 02:50:03 2013
From: gbstack08 at gmail.com (Todong Ma)
Date: Sun, 31 Mar 2013 16:50:03 +0800
Subject: [Twisted-Python] How to determine whether transport.write() succeed?
Message-ID: <CAHZXDMKnTsxmZNy7a6aq8jbP6ttpgbOfZwrP8uu6TNpqvfQgDA@mail.gmail.com>

Hi, everyone

How could I dertermine ITransport.write() succeed?
In windows socket API, I can check send()'s return value to dertermine
whether send() succeed.

Any suggestion is appreciated.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130331/2c0d24f2/attachment.html>

From glyph at twistedmatrix.com  Sun Mar 31 03:49:20 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 31 Mar 2013 02:49:20 -0700
Subject: [Twisted-Python] How to determine whether transport.write()
	succeed?
In-Reply-To: <CAHZXDMKnTsxmZNy7a6aq8jbP6ttpgbOfZwrP8uu6TNpqvfQgDA@mail.gmail.com>
References: <CAHZXDMKnTsxmZNy7a6aq8jbP6ttpgbOfZwrP8uu6TNpqvfQgDA@mail.gmail.com>
Message-ID: <97464120-5223-4F58-8BB8-B4C9713EC0D1@twistedmatrix.com>

On Mar 31, 2013, at 1:50 AM, Todong Ma <gbstack08 at gmail.com> wrote:

> Hi, everyone
> 
> How could I dertermine ITransport.write() succeed?
> In windows socket API, I can check send()'s return value to dertermine whether send() succeed.
> 
> Any suggestion is appreciated.

ITransport.write() always succeeds.  It may or may not call socket.send immediately, so it cannot tell you if the socket.send() succeeded or not.

What are you trying to do?

-glyph




From gbstack08 at gmail.com  Sun Mar 31 19:09:38 2013
From: gbstack08 at gmail.com (Todong Ma)
Date: Mon, 1 Apr 2013 09:09:38 +0800
Subject: [Twisted-Python] How to determine whether transport.write()
	succeed?
In-Reply-To: <97464120-5223-4F58-8BB8-B4C9713EC0D1@twistedmatrix.com>
References: <CAHZXDMKnTsxmZNy7a6aq8jbP6ttpgbOfZwrP8uu6TNpqvfQgDA@mail.gmail.com>
	<97464120-5223-4F58-8BB8-B4C9713EC0D1@twistedmatrix.com>
Message-ID: <CAHZXDMJy4Sd84=dFyKyKJqDPv=YZQ2a=B+UCL-F291d4jUs60g@mail.gmail.com>

I wrote a simple client and server to get system information (e.g. cpu,
memory, etc.)
Client send 'cpu' to the server, then server will return cpu's information
to client.

Now client send multiple commands to server one time, e.g. cpu, memory,
database, hard disk. But sometimes server couldn't receive some type
information (e.g. cpu, database), and the missed information type is not
fixed every time.

So I want client to check whether ITransport.write() sends message to
server successfully. If failed, client will resend the message to server.

On Sun, Mar 31, 2013 at 5:49 PM, Glyph <glyph at twistedmatrix.com> wrote:

> On Mar 31, 2013, at 1:50 AM, Todong Ma <gbstack08 at gmail.com> wrote:
>
> > Hi, everyone
> >
> > How could I dertermine ITransport.write() succeed?
> > In windows socket API, I can check send()'s return value to dertermine
> whether send() succeed.
> >
> > Any suggestion is appreciated.
>
> ITransport.write() always succeeds.  It may or may not call socket.send
> immediately, so it cannot tell you if the socket.send() succeeded or not.
>
> What are you trying to do?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130401/98f2e3c0/attachment.html>

From keturn at keturn.net  Tue Mar 26 18:25:06 2013
From: keturn at keturn.net (Kevin Turner)
Date: Tue, 26 Mar 2013 17:25:06 -0700
Subject: [Twisted-Python] Twisted dinner pictures
In-Reply-To: <06F12164-5776-43C2-B182-38F261C93DF5@ox.cx>
References: <06F12164-5776-43C2-B182-38F261C93DF5@ox.cx>
Message-ID: <1364343906.21038.140661209621477.6A3FE5F9@webmail.messagingengine.com>

I uploaded a bit of Spaceteam video from the sprints:
http://www.youtube.com/watch?v=bQqQTA1dtHk



