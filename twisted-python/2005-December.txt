From andrew-twisted at puzzling.org  Thu Dec  1 02:06:07 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 1 Dec 2005 18:06:07 +1100
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
Message-ID: <20051201070607.GS18323@home.puzzling.org>

On Thu, Dec 01, 2005 at 10:35:56AM +0800, Xu Ryan wrote:
> Thank you, but ClientCreator is seems just send message for once?? My
> app need connect with auth info, then send a command and request the
> return value. Can i use ClientCreator?

ClientCreator is simply an easy way to establish a single connection to a
server.  It has nothing to do with what happens to the connection after that;
that's what the Protocol does.

I can't really give you any more specific help without more information about
your problem.

-Andrew.




From xuryans at gmail.com  Thu Dec  1 03:22:03 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Thu, 1 Dec 2005 16:22:03 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051201070607.GS18323@home.puzzling.org>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
Message-ID: <f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>

Does Client Creator load protocol's "connectionMade" automatically ,
same as factory?

On 12/1/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> On Thu, Dec 01, 2005 at 10:35:56AM +0800, Xu Ryan wrote:
> > Thank you, but ClientCreator is seems just send message for once?? My
> > app need connect with auth info, then send a command and request the
> > return value. Can i use ClientCreator?
>
> ClientCreator is simply an easy way to establish a single connection to a
> server.  It has nothing to do with what happens to the connection after that;
> that's what the Protocol does.
>
> I can't really give you any more specific help without more information about
> your problem.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From andrew-twisted at puzzling.org  Thu Dec  1 03:45:03 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 1 Dec 2005 19:45:03 +1100
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
Message-ID: <20051201084503.GT18323@home.puzzling.org>

[please don't top-post]

On Thu, Dec 01, 2005 at 04:22:03PM +0800, Xu Ryan wrote:
> Does Client Creator load protocol's "connectionMade" automatically ,
> same as factory?

ClientCreator is just a shortcut for creating the factory and so forth manually.
The event handlers (connectionMade, dataReceived, connectionLost) on the
resulting protocol will be invoked as normal.

So yes, connectionMade will be called (assuming a connection is made, if the
connection fails the Deferred returned from ClientCreator.connectTCP will have
an error instead), but this isn't really anything to do with ClientCreator: once
the connection is established, ClientCreator is not involved.

Experimenting with the example at
http://twistedmatrix.com/projects/core/documentation/howto/clients.html#auto2
might be a good idea.

The source code for ClientCreator is quite simple.  Perhaps it would be worth
reading and understanding that, so you can see how little code is involved.  The
definition of ClientCreator is found in twisted/internet/protocol.py:
    http://svn.twistedmatrix.com/cvs/trunk/twisted/internet/protocol.py?view=auto&rev=14194

-Andrew.




From xuryans at gmail.com  Thu Dec  1 04:01:38 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Thu, 1 Dec 2005 17:01:38 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
Message-ID: <f6c194d30512010101u210670b3sfd0809098af1f0d9@mail.gmail.com>

I have solved this problem, thank you

On 12/1/05, Xu Ryan <xuryans at gmail.com> wrote:
> Does Client Creator load protocol's "connectionMade" automatically ,
> same as factory?
>
> On 12/1/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> > On Thu, Dec 01, 2005 at 10:35:56AM +0800, Xu Ryan wrote:
> > > Thank you, but ClientCreator is seems just send message for once?? My
> > > app need connect with auth info, then send a command and request the
> > > return value. Can i use ClientCreator?
> >
> > ClientCreator is simply an easy way to establish a single connection to a
> > server.  It has nothing to do with what happens to the connection after that;
> > that's what the Protocol does.
> >
> > I can't really give you any more specific help without more information about
> > your problem.
> >
> > -Andrew.
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
>
> --
> Xu Ryans
>


--
Xu Ryans



From vijay at accellion.com  Thu Dec  1 04:43:10 2005
From: vijay at accellion.com (Vijay Rao)
Date: Thu, 01 Dec 2005 15:13:10 +0530
Subject: [Twisted-Python] FTPS server
Message-ID: <6.2.3.4.0.20051201151306.0387ab10@mail.accellion.com>

Hi ,

I am trying to use a 'virtual' twisted FTP server ( using 2.1.0 ) in 
an application which can use a database instead of the file system.
It seems to work fine except I could not connect over SSL/TLS since 
the FTP security extensions enhancement 
http://www.ietf.org/rfc/rfc2228.txt is not yet implemented. Is there 
any plan to add this in the near future / any simple way to add it cleanly ?

Thanks
Vijay


-- 
No virus found in this outgoing message.
Checked by AVG Anti-Virus.
Version: 7.1.362 / Virus Database: 267.13.10/188 - Release Date: 11/29/2005





From xuryans at gmail.com  Thu Dec  1 04:48:12 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Thu, 1 Dec 2005 17:48:12 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051201084503.GT18323@home.puzzling.org>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
Message-ID: <f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>

I meet another problem. After i create some ClientCreate instance and
let the reactor run , it works ok.
But how could I send message when reactor is running? Because there
are not only one services that twisted provide. And when I need send
the messages i have told above , perhaps there are other service
running , using the same reactor(becaus it's global), and obviously I
can't stop it , re-create ClientCreator, then call reactor.run() to
send the message.

On 12/1/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> [please don't top-post]
>
> On Thu, Dec 01, 2005 at 04:22:03PM +0800, Xu Ryan wrote:
> > Does Client Creator load protocol's "connectionMade" automatically ,
> > same as factory?
>
> ClientCreator is just a shortcut for creating the factory and so forth manually.
> The event handlers (connectionMade, dataReceived, connectionLost) on the
> resulting protocol will be invoked as normal.
>
> So yes, connectionMade will be called (assuming a connection is made, if the
> connection fails the Deferred returned from ClientCreator.connectTCP will have
> an error instead), but this isn't really anything to do with ClientCreator: once
> the connection is established, ClientCreator is not involved.
>
> Experimenting with the example at
> http://twistedmatrix.com/projects/core/documentation/howto/clients.html#auto2
> might be a good idea.
>
> The source code for ClientCreator is quite simple.  Perhaps it would be worth
> reading and understanding that, so you can see how little code is involved.  The
> definition of ClientCreator is found in twisted/internet/protocol.py:
>     http://svn.twistedmatrix.com/cvs/trunk/twisted/internet/protocol.py?view=auto&rev=14194
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From andrew-twisted at puzzling.org  Thu Dec  1 04:51:37 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 1 Dec 2005 20:51:37 +1100
Subject: [Twisted-Python] FTPS server
In-Reply-To: <6.2.3.4.0.20051201151306.0387ab10@mail.accellion.com>
References: <6.2.3.4.0.20051201151306.0387ab10@mail.accellion.com>
Message-ID: <20051201095137.GV18323@home.puzzling.org>

On Thu, Dec 01, 2005 at 03:13:10PM +0530, Vijay Rao wrote:
> Hi ,
> 
> I am trying to use a 'virtual' twisted FTP server ( using 2.1.0 ) in 
> an application which can use a database instead of the file system.
> It seems to work fine except I could not connect over SSL/TLS since 
> the FTP security extensions enhancement 
> http://www.ietf.org/rfc/rfc2228.txt is not yet implemented. Is there 
> any plan to add this in the near future / any simple way to add it cleanly ?

No-one is working on this that I know of.  Patches gratefully accepted!

-Andrew.




From andrew-twisted at puzzling.org  Thu Dec  1 04:59:35 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 1 Dec 2005 20:59:35 +1100
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
Message-ID: <20051201095935.GW18323@home.puzzling.org>

On Thu, Dec 01, 2005 at 05:48:12PM +0800, Xu Ryan wrote:
> I meet another problem. After i create some ClientCreate instance and
> let the reactor run , it works ok.
> But how could I send message when reactor is running? Because there
> are not only one services that twisted provide. And when I need send
> the messages i have told above , perhaps there are other service
> running , using the same reactor(becaus it's global), and obviously I
> can't stop it , re-create ClientCreator, then call reactor.run() to
> send the message.

You seem to misunderstand how to do concurrent operations in Twisted.  You don't
need to stop the reactor.  If at some point in your code you want to make
another connection with ClientCreator, just call ClientCreator's connectTCP
method as usual -- without stopping the reactor.  The point of the reactor is
that it takes care of managing multiple connections and the like at once.

So, it's not "stop [the reactor] , re-create ClientCreator, then call
reactor.run() to send the message", it's just "re-create ClientCreator".  It may
even be just "call connectTCP on your existing ClientCreator again."

-Andrew.




From abe at fettig.net  Thu Dec  1 11:56:17 2005
From: abe at fettig.net (Abe Fettig)
Date: Thu, 01 Dec 2005 11:56:17 -0500
Subject: [Twisted-Python] New to twisted
In-Reply-To: <IBEKILOMELAPJHPEOCJMOECCCFAA.fhauck@srcpsolutions.com>
References: <IBEKILOMELAPJHPEOCJMOECCCFAA.fhauck@srcpsolutions.com>
Message-ID: <438F2B31.9010808@fettig.net>

Fred Hauck wrote:
> I am not only new to twisted, but to python as well.
> 
> I need what twisted does, so went out and got the "twisted" book
> by abe fettig. I am coding each example in the book as i get there.
> 
> the connectiontest.py example on page 16 gives me a call back on success,
> but not on error.

Hi Fred,

connectiontest.py should only report an error if you try to connect to
an invalid host, or to a port that isn't open. What happens if you try
to connect to an invalid host?

python connectiontest.py foo.bar 80

or a closed port?

python connectiontest.py fettig.net 81

Proper behavior is an error message, which indictates that the errback
fired correctly. Are you seeing something else?

I've tested that example on Windows XP, so I don't believe it's a
platform issue.

Abe



From alengarbage at yahoo.com  Thu Dec  1 15:11:43 2005
From: alengarbage at yahoo.com (Lenny G Arbage)
Date: Thu, 1 Dec 2005 12:11:43 -0800 (PST)
Subject: [Twisted-Python] user interaction & the reactor
Message-ID: <20051201201143.20280.qmail@web31510.mail.mud.yahoo.com>

Where can I find examples or instructions on combining
the reactor with [command-line] user interaction? 
I've been searching every resource I can, and know it
must be possible based on threads like this one:
http://twistedmatrix.com/pipermail/twisted-python/2005-June/010625.html
.  I /can/ block on a call made from within the
reactor while waiting for user's raw_input, but that
doesn't allow me to give live feedback to the user
from incoming status messages, and might cause
problems if a large number of status messages arrive
while the user is 'away'.  All the example clients I
can find inside of twisted are not [user-] interactive
(ftpclient, echoclient, simpleclient, etc).  Am I
looking in the wrong place?  Have I missed a howto?

Specifically I have a server that takes commands via a
protocol I define and a client that sends commands to
the server.  The commands on the server take some time
(on the order of 20 seconds to many minutes) to
complete or error out.  Once they do, status is sent
back to the client, i.e., the user can issue many
commands that are concurrently 'pending', completing
when the server sends back status.

I've started by running the client reactor in a
thread, and then using the main thread to get input
from the user.  Am I making this more difficult than
it needs to be?  Is there some way to integrate user
action (keyboard input) as events into the reactor's
event model?  Or is there a better approach?

  Thanks,
  Lenny


		
__________________________________ 
Yahoo! Music Unlimited 
Access over 1 million songs. Try it free. 
http://music.yahoo.com/unlimited/



From bob at redivi.com  Thu Dec  1 15:47:43 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 1 Dec 2005 12:47:43 -0800
Subject: [Twisted-Python] user interaction & the reactor
In-Reply-To: <20051201201143.20280.qmail@web31510.mail.mud.yahoo.com>
References: <20051201201143.20280.qmail@web31510.mail.mud.yahoo.com>
Message-ID: <68DAEEDF-3ABB-4DAF-A16A-46483CCB9CEE@redivi.com>


On Dec 1, 2005, at 12:11 PM, Lenny G Arbage wrote:

> Where can I find examples or instructions on combining
> the reactor with [command-line] user interaction?

http://twistedmatrix.com/projects/core/documentation/examples/stdin.py

-bob




From itamar at itamarst.org  Thu Dec  1 16:12:55 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 01 Dec 2005 16:12:55 -0500
Subject: [Twisted-Python] user interaction & the reactor
In-Reply-To: <68DAEEDF-3ABB-4DAF-A16A-46483CCB9CEE@redivi.com>
References: <20051201201143.20280.qmail@web31510.mail.mud.yahoo.com>
	<68DAEEDF-3ABB-4DAF-A16A-46483CCB9CEE@redivi.com>
Message-ID: <1133471575.9365.49.camel@localhost.localdomain>

On Thu, 2005-12-01 at 12:47 -0800, Bob Ippolito wrote:
> On Dec 1, 2005, at 12:11 PM, Lenny G Arbage wrote:
> 
> > Where can I find examples or instructions on combining
> > the reactor with [command-line] user interaction?
> 
> http://twistedmatrix.com/projects/core/documentation/examples/stdin.py

And you can combine this with the insults/recvline stuff included with
Conch (that has some examples too).




From alengarbage at yahoo.com  Thu Dec  1 17:53:43 2005
From: alengarbage at yahoo.com (Lenny G Arbage)
Date: Thu, 1 Dec 2005 14:53:43 -0800 (PST)
Subject: [Twisted-Python] Re: user interaction & the reactor
Message-ID: <20051201225343.75034.qmail@web31509.mail.mud.yahoo.com>

Okay, I think I've got it now.  This:
http://twistedmatrix.com/projects/core/documentation/howto/threading.html
combined with this:
http://mail.python.org/pipermail/python-list/2004-February/209632.html
contained some details I was woefully ignorant of.  


--- Lenny G Arbage <alengarbage at yahoo.com> wrote:

> Where can I find examples or instructions on
> combining
> the reactor with [command-line] user interaction? 
> I've been searching every resource I can, and know
> it
> must be possible based on threads like this one:
>
http://twistedmatrix.com/pipermail/twisted-python/2005-June/010625.html
> .  I /can/ block on a call made from within the
> reactor while waiting for user's raw_input, but that
> doesn't allow me to give live feedback to the user
> from incoming status messages, and might cause
> problems if a large number of status messages arrive
> while the user is 'away'.  All the example clients I
> can find inside of twisted are not [user-]
> interactive
> (ftpclient, echoclient, simpleclient, etc).  Am I
> looking in the wrong place?  Have I missed a howto?
> 
> Specifically I have a server that takes commands via
> a
> protocol I define and a client that sends commands
> to
> the server.  The commands on the server take some
> time
> (on the order of 20 seconds to many minutes) to
> complete or error out.  Once they do, status is sent
> back to the client, i.e., the user can issue many
> commands that are concurrently 'pending', completing
> when the server sends back status.
> 
> I've started by running the client reactor in a
> thread, and then using the main thread to get input
> from the user.  Am I making this more difficult than
> it needs to be?  Is there some way to integrate user
> action (keyboard input) as events into the reactor's
> event model?  Or is there a better approach?



		
__________________________________________ 
Yahoo! DSL ? Something to write home about. 
Just $16.99/mo. or less. 
dsl.yahoo.com 




From jml at mumak.net  Thu Dec  1 20:59:43 2005
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 2 Dec 2005 12:59:43 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] r15274 - Significantly
	improve twisted.python.filepath,
	adding several new features and tests.
In-Reply-To: <E1EhwGr-0005OJ-00@wolfwood>
References: <E1EhwGr-0005OJ-00@wolfwood>
Message-ID: <d06a5cd30512011759j313f855ek@mail.gmail.com>

On 02/12/05, Glyph Lefkowitz <glyph at wolfwood.twistedmatrix.com> wrote:
> Author: glyph
> Date: Thu Dec  1 14:47:17 2005
> New Revision: 15274
>
> Modified:
>    trunk/twisted/python/filepath.py
>    trunk/twisted/test/test_paths.py
> Log:
> Significantly improve twisted.python.filepath, adding several new features and tests.
<snip>
> Modified: trunk/twisted/python/filepath.py
> ==============================================================================
> --- trunk/twisted/python/filepath.py    (original)
> +++ trunk/twisted/python/filepath.py    Thu Dec  1 14:47:17 2005
> @@ -5,6 +5,10 @@
>  from __future__ import generators
>
>  import os
> +import errno
> +import base64
> +import sha
> +
>  from os.path import isabs, exists, normpath, abspath, splitext
>  from os.path import basename, dirname
>  from os.path import join as joinpath
> @@ -25,8 +29,13 @@
>  class InsecurePath(Exception):
>      pass
>
> +def _secureEnoughString():
> +    """
> +    Create a pseudorandom, 16-character string for use in secure filenames.
> +    """
> +    return base64.urlsafe_b64encode(sha.new(os.urandom(64)).digest())[:16]
> +
<snip>

This breaks Twisted.  base64.urlsafe_b64encode is not available in
Python before version 2.4.

cheers,
jml



From jtanis at pycoder.org  Thu Dec  1 22:05:16 2005
From: jtanis at pycoder.org (James Tanis)
Date: Thu, 1 Dec 2005 22:05:16 -0500
Subject: [Twisted-Python] Need a SmartHost(E)SMTPRelayingManager guru
Message-ID: <65dcde740512011905w59d69a76x1f08a0cc2b6a6098@mail.gmail.com>

Previously my only experience with Twisted was with 1.3 when I was
developing a protocol from the ground up. Right now I've got this SMTP
server that I've slowly been piecing together using Twisted 2.1. I was
able to get everything working but after experiencing the learning
curve firsthand I decided to buy the shiny new Twisted: Network
Programming Essentials -- which is a great book I might add. Although
the book did open my eyes to things I had missed as well as help me to
improve my own code for local delivery it does not seem to cover
(E)SMTP relaying which is a valuable component to me.

Anyway, after adding a relaymanager.Queue the server was able to
receive and queue messages from a mail client as well as deliver to
local accounts. The problem comes in with
relaymanager.SMTPRelayingManager (relaymanager.ESMTPRelayingManager
gave me errors even earlier so I dropped it for the time being). Here
is the log with traceback:

2005/12/01 21:24 EST [-] Log opened.
2005/12/01 21:24 EST [-] twistd 2.1.0 (/usr/local/bin/python 2.4.2) starting up
2005/12/01 21:24 EST [-] reactor class:
twisted.internet.selectreactor.SelectReactor
2005/12/01 21:24 EST [-] Loading ./h2smtp.py...
2005/12/01 21:24 EST [-] Set 71757_1133487291.33_0_138982188 waiting
2005/12/01 21:24 EST [-] Set 71757_1133487291.33_0_138982188 waiting
2005/12/01 21:24 EST [-] /etc/resolv.conf changed, reparsing
2005/12/01 21:24 EST [-] Resolver added ('24.197.160.17', 53) to server list
2005/12/01 21:24 EST [-] Resolver added ('24.197.160.18', 53) to server list
2005/12/01 21:24 EST [-] twisted.names.dns.DNSDatagramProtocol starting on 62457
2005/12/01 21:24 EST [-] Loaded.
2005/12/01 21:24 EST [-] twisted.mail.protocols.ESMTPFactory starting on 2500
2005/12/01 21:24 EST [-] Starting factory
<twisted.mail.protocols.ESMTPFactory instance at 0x85b04ec>
2005/12/01 21:24 EST [-] twisted.mail.protocols.POP3Factory starting on 1100
2005/12/01 21:24 EST [-] Starting factory
<twisted.mail.protocols.POP3Factory instance at 0x85b052c>
2005/12/01 21:24 EST [twisted.names.dns.DNSDatagramProtocol (UDP)]
Starting factory <twisted.mail.relaymanager.SMTPManagedRelayerFactory
instance at 0x85fff0c>
2005/12/01 21:24 EST [Uninitialized] Traceback (most recent call last):
	  File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py",
line 58, in callWithLogger
	    return callWithContext({"system": lp}, func, *args, **kw)
	  File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py",
line 43, in callWithContext
	    return context.call({ILogContext: newCtx}, func, *args, **kw)
	  File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
line 59, in callWithContext
	    return self.currentContext().callWithContext(ctx, func, *args, **kw)
	  File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
line 37, in callWithContext
	    return func(*args,**kw)
	--- <exception caught here> ---
	  File "/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py",
line 139, in _doReadOrWrite
	    why = getattr(selectable, method)()
	  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
line 542, in doConnect
	    self._connectDone()
	  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
line 545, in _connectDone
	    self.protocol = self.connector.buildProtocol(self.getPeer())
	  File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py",
line 669, in buildProtocol
	    return self.factory.buildProtocol(addr)
	  File "/usr/local/lib/python2.4/site-packages/twisted/mail/relaymanager.py",
line 103, in buildProtocol
	    protocol = self.protocol(self.messages, self.manager, *self.pArgs,
	  File "/usr/local/lib/python2.4/site-packages/twisted/mail/relaymanager.py",
line 79, in __init__
	    relay.SMTPRelayer.__init__(self, messages, *args, **kw)
	  File "/usr/local/lib/python2.4/site-packages/twisted/mail/relay.py",
line 108, in __init__
	    smtp.SMTPClient.__init__(self, *args, **kw)
	exceptions.TypeError: __init__() takes at least 2 arguments (1 given)
	
2005/12/01 21:24 EST [Uninitialized] Backing off on delivery of
['71757_1133487291.33_0_138982188']
2005/12/01 21:24 EST [Uninitialized] Stopping factory
<twisted.mail.relaymanager.SMTPManagedRelayerFactory instance at
0x85fff0c>

>From what I can tell smtp.SMTPClient isn't getting passed identity.
Since this error is generated with a call to the relaying manager's
.checkState(self) function which only takes self as a argument.. well
lets just say I can't figure out what I'm missing from my own tracing
through the code in the relay/relaymanager/smtp modules. You should
find my code attached, the error should be easily reproducible if you
want to run it.

--
James Tanis
jtanis at pycoder.org
http://pycoder.org
-------------- next part --------------
# Horizon/2 SMTP implementation
# Copyright (c) 2005-2006 James Tanis
# -----

#Permission is hereby granted, free of charge, to any person obtaining a copy of
#this software and associated documentation files (the "Software"), to deal in
#the Software without restriction, including without limitation the rights to
#use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
#of the Software, and to permit persons to whom the Software is furnished to do
#so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE


import os
import os.path
from twisted.application import internet
from twisted.application import service
from twisted.cred import checkers
from twisted.cred import credentials
from twisted.cred import portal
from twisted.internet import defer
from twisted.mail import mail
from twisted.mail import maildir
from twisted.mail import relaymanager
from twisted.mail import relay
from twisted.mail import smtp
from twisted.mail import protocols
from twisted.mail.protocols import SMTPDomainDelivery
from twisted.persisted import dirdbm
from zope.interface import implements

appname = 'Horizon/2-SMTP'
smtp.DNSNAME = 'pycoder.org'

class ESMTPDelivery(protocols.ESMTPDomainDelivery):
    
    def __init__(self, service, user, dir):
	protocols.ESMTPDomainDelivery.__init__(self, service, user)
	self.root = dir
        self.service = service
	self.user = user	
	if not os.path.isdir(self.root):
	    raise ValueError, "'%s' does not exist" % dir
	
    def receivedHeader(self, helo, orgn, rcpts):
	date = smtp.rfc822date()
	msgid = smtp.messageid()
	tmp_rcpts = ''
        for rcpt in rcpts:
            tmp_rcpts += str(rcpt)+', '
        tmp_rcpts = tmp_rcpts[:-2]	    
	hdr = 'Received: from ' + helo[0] + ' (' + helo[1] + ')\n        by ' + smtp.DNSNAME + ' (' + appname + ') \n        id ' + msgid + '\n        for ' + tmp_rcpts + '; ' + date
        return hdr

    def validateFrom(self, helo, orgn):
	return orgn

    def validateTo(self, user):
        d = self.service.domains.get(user.dest.domain)
        if d == None:  
            d = relay.DomainQueuer(self.service, True)
        return defer.maybeDeferred(d.exists, user)

	
class Message:
    implements(smtp.IMessage)
    
    def __init__(self, domroot, user):         
        self.lines = []
	self.userdir = os.path.join(domroot, str(user.dest.local))
	if not os.path.exists(self.userdir): os.mkdir(self.userdir)
	self.mbox = maildir.MaildirMailbox(os.path.join(self.userdir, 'Inbox'))

    def lineReceived(self, line):         
        self.lines.append(line)         

    def eomReceived(self):
	self.lines.append('')
	body = '\n'.join(self.lines)
	return self.mbox.appendMessage(body)
	
    def connectionLost(self): 
        self.lines = None

class Domain:
    implements(mail.IDomain)
    def __init__(self, domroot):
	self.domroot = domroot
        if not os.path.exists(self.domroot): os.mkdir(self.domroot)	
	self.users = dirdbm.Shelf(os.path.join(self.domroot, 'smtpdb'))

    def createNewMessage(self, user):
        return Message(self.domroot, user) 

    def exists(self, user):
	if self.users.has_key(str(user.dest.local)):
	    msg = self.createNewMessage(user)
	    return lambda: msg
	else:
	    raise smtp.SMTPBadRcpt(str(user))

    def addUser(self, user, pword):
	self.users[str(user)] = pword
	
    def getCredentialsCheckers(self):
	return [checkers.AllowAnonymousAccess()]


class H2Service(service.MultiService):
    def __init__(self, root):
	service.MultiService.__init__(self)
        self.root = root
        self.domains = dirdbm.Shelf(os.path.join(self.root, 'h2db'))
        
        if not os.path.exists('/var/tmp/h2spool/queue'): os.mkdir('/var/tmp/h2spool/queue') 
        self.queue = relaymanager.Queue('/var/tmp/h2spool/queue')
        self.r = relaymanager.SmartHostSMTPRelayingManager(self.queue)
        #self.r.checkState()
    def requestAvatar(self, avatarId, mind, *interfaces):
        if smtp.IMessageDelivery in interfaces:
            a = ESMTPDelivery(self, avatarId, self.root)
            return smtp.IMessageDelivery, a, lambda: None
        raise NotImplementedError()   

def main():
    root = '/var/tmp/h2spool'
    m = H2Service(root)
    
    smtpd = protocols.ESMTPFactory(m, portal.Portal(m, [checkers.AllowAnonymousAccess()]))
    popd = protocols.POP3Factory(None)
     
    m.addService(internet.TCPServer(2500, smtpd))
    m.addService(internet.TCPServer(1100, popd))
    
    a = service.Application('Horizon/2')
    m.setServiceParent(a)
    m.r.checkState()
    return a

if __name__ == "__main__":
    from optparse import OptionParser 
    import sys

    root = '/var/tmp/h2spool'

    parser = OptionParser()
    parser.add_option('-d', '--domain', dest = 'domain', default = None, help = 'modify/add domain')
    parser.add_option('-u', '--user', dest = 'user', default = None, help = 'modify/add user, requires -d')
    parser.add_option('-p', '--password', dest = 'password', default = None, help = 'modify/set password, requires -d and -u')

    opts, args = parser.parse_args()
    if opts.domain != None and opts.user != None and opts.password != None:
        m = H2Service(root)
        d = m.domains[opts.domain] 
        d.addUser(opts.user, opts.password)
        m.domains[opts.domain] = d
        print d.users.keys()
 
    elif opts.domain != None and opts.user != None:
        pass
 
    elif opts.domain != None:
        m = H2Service(root)
        if not m.domains.has_key(opts.domain):
            d = Domain(os.path.join('/var/tmp/h2spool', opts.domain))
            m.domains[opts.domain] = d
        print m.domains.keys()

application = main()


From xuryans at gmail.com  Thu Dec  1 22:42:49 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Fri, 2 Dec 2005 11:42:49 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051201095935.GW18323@home.puzzling.org>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
Message-ID: <f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>

Would you like show me an simple example about this? I wrote one, but
it dosn't work.

__sender = None

class p(Protocol):
    def connectionMade(self):
        print "Connecttion make"

    def sendMessage(self):
        self.transport.write("some message")

    def connectionLost(self, reason):
        print "Lost, reason", reason

def sendCmd(addr, port, cmd, task, options = ""):
    """Send Cmd to
    """
    global __sender

    __sender.connectTCP(addr, port).addCallback(send,\
            cmd, task, options)

def send(p,cmd, task, options):
    print "send"
    p.sendMessage()
    return p

def finishConnection(p):
    print "lostConnection"
    p.transport.loseConnection()

def initSendCommand():
    global __sender
    if not __sender:
        __sender = ClientCreator(reactor, p)

if __name__ == "__main__":
    def testSendMessage():
        time.sleep(2)
        sendCmd("localhost", 8009, "test send")

    initSendCommand()
    thread.start_new_thread(testSendMessage, ())
    reactor.run()


On 12/1/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:

> You seem to misunderstand how to do concurrent operations in Twisted.  You don't
> need to stop the reactor.  If at some point in your code you want to make
> another connection with ClientCreator, just call ClientCreator's connectTCP
> method as usual -- without stopping the reactor.  The point of the reactor is
> that it takes care of managing multiple connections and the like at once.
>
> So, it's not "stop [the reactor] , re-create ClientCreator, then call
> reactor.run() to send the message", it's just "re-create ClientCreator".  It may
> even be just "call connectTCP on your existing ClientCreator again."
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From andrew-twisted at puzzling.org  Thu Dec  1 22:57:51 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 2 Dec 2005 14:57:51 +1100
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
Message-ID: <20051202035751.GA20951@home.puzzling.org>

On Fri, Dec 02, 2005 at 11:42:49AM +0800, Xu Ryan wrote:
> Would you like show me an simple example about this? I wrote one, but
> it dosn't work.

Sure.  Thanks for taking the time to write a simple demonstration of your
problem, it makes it much easier to understand and discuss!

> __sender = None
> 
> class p(Protocol):
>     def connectionMade(self):
>         print "Connecttion make"
> 
>     def sendMessage(self):
>         self.transport.write("some message")
> 
>     def connectionLost(self, reason):
>         print "Lost, reason", reason
> 
> def sendCmd(addr, port, cmd, task, options = ""):
>     """Send Cmd to
>     """
>     global __sender
> 
>     __sender.connectTCP(addr, port).addCallback(send,\
>             cmd, task, options)
> 
> def send(p,cmd, task, options):
>     print "send"
>     p.sendMessage()
>     return p
> 
> def finishConnection(p):
>     print "lostConnection"
>     p.transport.loseConnection()
> 
> def initSendCommand():
>     global __sender
>     if not __sender:
>         __sender = ClientCreator(reactor, p)

This all looks ok (except for the unused 'finishConnection' function).

> if __name__ == "__main__":
>     def testSendMessage():
>         time.sleep(2)
>         sendCmd("localhost", 8009, "test send")
> 
>     initSendCommand()
>     thread.start_new_thread(testSendMessage, ())
>     reactor.run()

This is the problem.  There's two issues here. 

The first is that in general, a thread CANNOT call any Twisted functions
aside from reactor.callFromThread.  Twisted is not thread safe.  See
http://twistedmatrix.com/projects/core/documentation/howto/threading.html

The second, and more fundamental, is that threads are totally unnecessary for
this.

You can write that code block as:

if __name__ == "__main__":
    initSendCommand()
    reactor.callLater(2, sendCmd, "localhost", 8009, "test send")
    reactor.run()

-Andrew.




From jtanis at pycoder.org  Thu Dec  1 23:16:01 2005
From: jtanis at pycoder.org (James Tanis)
Date: Thu, 1 Dec 2005 23:16:01 -0500
Subject: [Twisted-Python] Help needed with SmartHostSMTPRelayingManager
Message-ID: <65dcde740512012016w53dc2817x3f161353e1240536@mail.gmail.com>

Right now I've got this SMTP server that I've slowly been piecing
together using Twisted 2.1. I was able to get everything working as
far as local delivery, but after adding a relaymanager.Queue the
server was able to receive and queue messages from a mail client as
well as deliver to local accounts. The problem comes in with
relaymanager.SmartHostSMTPRelayingManager. Here is the log with
traceback:

2005/12/01 21:24 EST [-] Log opened.
2005/12/01 21:24 EST [-] twistd 2.1.0 (/usr/local/bin/python 2.4.2) starting up
2005/12/01 21:24 EST [-] reactor class:
twisted.internet.selectreactor.SelectReactor
2005/12/01 21:24 EST [-] Loading ./h2smtp.py...
2005/12/01 21:24 EST [-] Set 71757_1133487291.33_0_138982188 waiting
2005/12/01 21:24 EST [-] Set 71757_1133487291.33_0_138982188 waiting
2005/12/01 21:24 EST [-] /etc/resolv.conf changed, reparsing
2005/12/01 21:24 EST [-] Resolver added ('24.197.160.17', 53) to server list
2005/12/01 21:24 EST [-] Resolver added ('24.197.160.18', 53) to server list
2005/12/01 21:24 EST [-] twisted.names.dns.DNSDatagramProtocol starting on 62457
2005/12/01 21:24 EST [-] Loaded.
2005/12/01 21:24 EST [-] twisted.mail.protocols.ESMTPFactory starting on 2500
2005/12/01 21:24 EST [-] Starting factory
<twisted.mail.protocols.ESMTPFactory instance at 0x85b04ec>
2005/12/01 21:24 EST [-] twisted.mail.protocols.POP3Factory starting on 1100
2005/12/01 21:24 EST [-] Starting factory
<twisted.mail.protocols.POP3Factory instance at 0x85b052c>
2005/12/01 21:24 EST [twisted.names.dns.DNSDatagramProtocol (UDP)]
Starting factory <twisted.mail.relaymanager.SMTPManagedRelayerFactory
instance at 0x85fff0c>
2005/12/01 21:24 EST [Uninitialized] Traceback (most recent call last):
         File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py",
line 58, in callWithLogger
           return callWithContext({"system": lp}, func, *args, **kw)
         File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py",
line 43, in callWithContext
           return context.call({ILogContext: newCtx}, func, *args, **kw)
         File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
line 59, in callWithContext
           return self.currentContext().callWithContext(ctx, func, *args, **kw)
         File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
line 37, in callWithContext
           return func(*args,**kw)
       --- <exception caught here> ---
         File "/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py",
line 139, in _doReadOrWrite
           why = getattr(selectable, method)()
         File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
line 542, in doConnect
           self._connectDone()
         File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
line 545, in _connectDone
           self.protocol = self.connector.buildProtocol(self.getPeer())
         File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py",
line 669, in buildProtocol
           return self.factory.buildProtocol(addr)
         File "/usr/local/lib/python2.4/site-packages/twisted/mail/relaymanager.py",
line 103, in buildProtocol
           protocol = self.protocol(self.messages, self.manager, *self.pArgs,
         File "/usr/local/lib/python2.4/site-packages/twisted/mail/relaymanager.py",
line 79, in __init__
           relay.SMTPRelayer.__init__(self, messages, *args, **kw)
         File "/usr/local/lib/python2.4/site-packages/twisted/mail/relay.py",
line 108, in __init__
           smtp.SMTPClient.__init__(self, *args, **kw)
       exceptions.TypeError: __init__() takes at least 2 arguments (1 given)

2005/12/01 21:24 EST [Uninitialized] Backing off on delivery of
['71757_1133487291.33_0_138982188']
2005/12/01 21:24 EST [Uninitialized] Stopping factory
<twisted.mail.relaymanager.SMTPManagedRelayerFactory instance at
0x85fff0c>

>From what I can tell smtp.SMTPClient isn't getting passed identity.
Since this error is generated with a call to the relaying manager's
.checkState(self) function which only takes self as a argument.. well
lets just say I can't figure out what I'm missing from my own tracing
through the code in the relay/relaymanager/smtp modules. You should
find my code attached, the error should be easily reproducible if you
want to run it.

--
James Tanis
jtanis at pycoder.org
http://pycoder.org
-------------- next part --------------
# Horizon/2 SMTP implementation
# Copyright (c) 2005-2006 James Tanis
# -----

#Permission is hereby granted, free of charge, to any person obtaining a copy of
#this software and associated documentation files (the "Software"), to deal in
#the Software without restriction, including without limitation the rights to
#use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
#of the Software, and to permit persons to whom the Software is furnished to do
#so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE


import os
import os.path
from twisted.application import internet
from twisted.application import service
from twisted.cred import checkers
from twisted.cred import credentials
from twisted.cred import portal
from twisted.internet import defer
from twisted.mail import mail
from twisted.mail import maildir
from twisted.mail import relaymanager
from twisted.mail import relay
from twisted.mail import smtp
from twisted.mail import protocols
from twisted.mail.protocols import SMTPDomainDelivery
from twisted.persisted import dirdbm
from zope.interface import implements

appname = 'Horizon/2-SMTP'
smtp.DNSNAME = 'pycoder.org'

class ESMTPDelivery(protocols.ESMTPDomainDelivery):
    
    def __init__(self, service, user, dir):
	protocols.ESMTPDomainDelivery.__init__(self, service, user)
	self.root = dir
        self.service = service
	self.user = user	
	if not os.path.isdir(self.root):
	    raise ValueError, "'%s' does not exist" % dir
	
    def receivedHeader(self, helo, orgn, rcpts):
	date = smtp.rfc822date()
	msgid = smtp.messageid()
	tmp_rcpts = ''
        for rcpt in rcpts:
            tmp_rcpts += str(rcpt)+', '
        tmp_rcpts = tmp_rcpts[:-2]	    
	hdr = 'Received: from ' + helo[0] + ' (' + helo[1] + ')\n        by ' + smtp.DNSNAME + ' (' + appname + ') \n        id ' + msgid + '\n        for ' + tmp_rcpts + '; ' + date
        return hdr

    def validateFrom(self, helo, orgn):
	return orgn

    def validateTo(self, user):
        d = self.service.domains.get(user.dest.domain)
        if d == None:  
            d = relay.DomainQueuer(self.service, True)
        return defer.maybeDeferred(d.exists, user)

	
class Message:
    implements(smtp.IMessage)
    
    def __init__(self, domroot, user):         
        self.lines = []
	self.userdir = os.path.join(domroot, str(user.dest.local))
	if not os.path.exists(self.userdir): os.mkdir(self.userdir)
	self.mbox = maildir.MaildirMailbox(os.path.join(self.userdir, 'Inbox'))

    def lineReceived(self, line):         
        self.lines.append(line)         

    def eomReceived(self):
	self.lines.append('')
	body = '\n'.join(self.lines)
	return self.mbox.appendMessage(body)
	
    def connectionLost(self): 
        self.lines = None

class Domain:
    implements(mail.IDomain)
    def __init__(self, domroot):
	self.domroot = domroot
        if not os.path.exists(self.domroot): os.mkdir(self.domroot)	
	self.users = dirdbm.Shelf(os.path.join(self.domroot, 'smtpdb'))

    def createNewMessage(self, user):
        return Message(self.domroot, user) 

    def exists(self, user):
	if self.users.has_key(str(user.dest.local)):
	    msg = self.createNewMessage(user)
	    return lambda: msg
	else:
	    raise smtp.SMTPBadRcpt(str(user))

    def addUser(self, user, pword):
	self.users[str(user)] = pword
	
    def getCredentialsCheckers(self):
	return [checkers.AllowAnonymousAccess()]


class H2Service(service.MultiService):
    def __init__(self, root):
	service.MultiService.__init__(self)
        self.root = root
        self.domains = dirdbm.Shelf(os.path.join(self.root, 'h2db'))
        
        if not os.path.exists('/var/tmp/h2spool/queue'): os.mkdir('/var/tmp/h2spool/queue') 
        self.queue = relaymanager.Queue('/var/tmp/h2spool/queue')
        self.r = relaymanager.SmartHostSMTPRelayingManager(self.queue)
        #self.r.checkState()
    def requestAvatar(self, avatarId, mind, *interfaces):
        if smtp.IMessageDelivery in interfaces:
            a = ESMTPDelivery(self, avatarId, self.root)
            return smtp.IMessageDelivery, a, lambda: None
        raise NotImplementedError()   

def main():
    root = '/var/tmp/h2spool'
    m = H2Service(root)
    
    smtpd = protocols.ESMTPFactory(m, portal.Portal(m, [checkers.AllowAnonymousAccess()]))
    popd = protocols.POP3Factory(None)
     
    m.addService(internet.TCPServer(2500, smtpd))
    m.addService(internet.TCPServer(1100, popd))
    
    a = service.Application('Horizon/2')
    m.setServiceParent(a)
    m.r.checkState()
    return a

if __name__ == "__main__":
    from optparse import OptionParser 
    import sys

    root = '/var/tmp/h2spool'

    parser = OptionParser()
    parser.add_option('-d', '--domain', dest = 'domain', default = None, help = 'modify/add domain')
    parser.add_option('-u', '--user', dest = 'user', default = None, help = 'modify/add user, requires -d')
    parser.add_option('-p', '--password', dest = 'password', default = None, help = 'modify/set password, requires -d and -u')

    opts, args = parser.parse_args()
    if opts.domain != None and opts.user != None and opts.password != None:
        m = H2Service(root)
        d = m.domains[opts.domain] 
        d.addUser(opts.user, opts.password)
        m.domains[opts.domain] = d
        print d.users.keys()
 
    elif opts.domain != None and opts.user != None:
        pass
 
    elif opts.domain != None:
        m = H2Service(root)
        if not m.domains.has_key(opts.domain):
            d = Domain(os.path.join('/var/tmp/h2spool', opts.domain))
            m.domains[opts.domain] = d
        print m.domains.keys()

application = main()






From jtanis at pycoder.org  Thu Dec  1 23:39:22 2005
From: jtanis at pycoder.org (James Tanis)
Date: Thu, 1 Dec 2005 23:39:22 -0500
Subject: [Twisted-Python] Re: Help needed with SmartHostSMTPRelayingManager
In-Reply-To: <65dcde740512012016w53dc2817x3f161353e1240536@mail.gmail.com>
References: <65dcde740512012016w53dc2817x3f161353e1240536@mail.gmail.com>
Message-ID: <65dcde740512012039y3067ca57k5a91f57a5fe55266@mail.gmail.com>

Alright, I believe I answered my own question. I just need to override
relaymanager.SmartHostSMTPRelayingManager.__init__ and define
self.fArgs there to include the needed arguments.. correct? Just
wondering why this isn't included in the default __init__ if it's
required by the default SMTPClient.__init__

On 12/1/05, James Tanis <jtanis at pycoder.org> wrote:
> Right now I've got this SMTP server that I've slowly been piecing
> together using Twisted 2.1. I was able to get everything working as
> far as local delivery, but after adding a relaymanager.Queue the
> server was able to receive and queue messages from a mail client as
> well as deliver to local accounts. The problem comes in with
> relaymanager.SmartHostSMTPRelayingManager. Here is the log with
> traceback:
>
> 2005/12/01 21:24 EST [-] Log opened.
> 2005/12/01 21:24 EST [-] twistd 2.1.0 (/usr/local/bin/python 2.4.2) starting up
> 2005/12/01 21:24 EST [-] reactor class:
> twisted.internet.selectreactor.SelectReactor
> 2005/12/01 21:24 EST [-] Loading ./h2smtp.py...
> 2005/12/01 21:24 EST [-] Set 71757_1133487291.33_0_138982188 waiting
> 2005/12/01 21:24 EST [-] Set 71757_1133487291.33_0_138982188 waiting
> 2005/12/01 21:24 EST [-] /etc/resolv.conf changed, reparsing
> 2005/12/01 21:24 EST [-] Resolver added ('24.197.160.17', 53) to server list
> 2005/12/01 21:24 EST [-] Resolver added ('24.197.160.18', 53) to server list
> 2005/12/01 21:24 EST [-] twisted.names.dns.DNSDatagramProtocol starting on 62457
> 2005/12/01 21:24 EST [-] Loaded.
> 2005/12/01 21:24 EST [-] twisted.mail.protocols.ESMTPFactory starting on 2500
> 2005/12/01 21:24 EST [-] Starting factory
> <twisted.mail.protocols.ESMTPFactory instance at 0x85b04ec>
> 2005/12/01 21:24 EST [-] twisted.mail.protocols.POP3Factory starting on 1100
> 2005/12/01 21:24 EST [-] Starting factory
> <twisted.mail.protocols.POP3Factory instance at 0x85b052c>
> 2005/12/01 21:24 EST [twisted.names.dns.DNSDatagramProtocol (UDP)]
> Starting factory <twisted.mail.relaymanager.SMTPManagedRelayerFactory
> instance at 0x85fff0c>
> 2005/12/01 21:24 EST [Uninitialized] Traceback (most recent call last):
>          File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py",
> line 58, in callWithLogger
>            return callWithContext({"system": lp}, func, *args, **kw)
>          File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py",
> line 43, in callWithContext
>            return context.call({ILogContext: newCtx}, func, *args, **kw)
>          File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
> line 59, in callWithContext
>            return self.currentContext().callWithContext(ctx, func, *args, **kw)
>          File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
> line 37, in callWithContext
>            return func(*args,**kw)
>        --- <exception caught here> ---
>          File "/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py",
> line 139, in _doReadOrWrite
>            why = getattr(selectable, method)()
>          File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
> line 542, in doConnect
>            self._connectDone()
>          File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
> line 545, in _connectDone
>            self.protocol = self.connector.buildProtocol(self.getPeer())
>          File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py",
> line 669, in buildProtocol
>            return self.factory.buildProtocol(addr)
>          File "/usr/local/lib/python2.4/site-packages/twisted/mail/relaymanager.py",
> line 103, in buildProtocol
>            protocol = self.protocol(self.messages, self.manager, *self.pArgs,
>          File "/usr/local/lib/python2.4/site-packages/twisted/mail/relaymanager.py",
> line 79, in __init__
>            relay.SMTPRelayer.__init__(self, messages, *args, **kw)
>          File "/usr/local/lib/python2.4/site-packages/twisted/mail/relay.py",
> line 108, in __init__
>            smtp.SMTPClient.__init__(self, *args, **kw)
>        exceptions.TypeError: __init__() takes at least 2 arguments (1 given)
>
> 2005/12/01 21:24 EST [Uninitialized] Backing off on delivery of
> ['71757_1133487291.33_0_138982188']
> 2005/12/01 21:24 EST [Uninitialized] Stopping factory
> <twisted.mail.relaymanager.SMTPManagedRelayerFactory instance at
> 0x85fff0c>
>
> From what I can tell smtp.SMTPClient isn't getting passed identity.
> Since this error is generated with a call to the relaying manager's
> .checkState(self) function which only takes self as a argument.. well
> lets just say I can't figure out what I'm missing from my own tracing
> through the code in the relay/relaymanager/smtp modules. You should
> find my code attached, the error should be easily reproducible if you
> want to run it.
>
> --
> James Tanis
> jtanis at pycoder.org
> http://pycoder.org
>
>
>


--
James Tanis
jtanis at pycoder.org
http://pycoder.org



From xuryans at gmail.com  Fri Dec  2 00:44:06 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Fri, 2 Dec 2005 13:44:06 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051202035751.GA20951@home.puzzling.org>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
Message-ID: <f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>

I use the thread to make the sendCmd be called after the reactor run.
Because in the real application, I should start the server(reactor)
first, and other logic will call the sendCmd, so I can't fix it before
reactor.run() (as callLater(foo)). What should I do ?

On 12/2/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> On Fri, Dec 02, 2005 at 11:42:49AM +0800, Xu Ryan wrote:
> > Would you like show me an simple example about this? I wrote one, but
> > it dosn't work.
>
> Sure.  Thanks for taking the time to write a simple demonstration of your
> problem, it makes it much easier to understand and discuss!
>
> > __sender = None
> >
> > class p(Protocol):
> >     def connectionMade(self):
> >         print "Connecttion make"
> >
> >     def sendMessage(self):
> >         self.transport.write("some message")
> >
> >     def connectionLost(self, reason):
> >         print "Lost, reason", reason
> >
> > def sendCmd(addr, port, cmd, task, options = ""):
> >     """Send Cmd to
> >     """
> >     global __sender
> >
> >     __sender.connectTCP(addr, port).addCallback(send,\
> >             cmd, task, options)
> >
> > def send(p,cmd, task, options):
> >     print "send"
> >     p.sendMessage()
> >     return p
> >
> > def finishConnection(p):
> >     print "lostConnection"
> >     p.transport.loseConnection()
> >
> > def initSendCommand():
> >     global __sender
> >     if not __sender:
> >         __sender = ClientCreator(reactor, p)
>
> This all looks ok (except for the unused 'finishConnection' function).
>
> > if __name__ == "__main__":
> >     def testSendMessage():
> >         time.sleep(2)
> >         sendCmd("localhost", 8009, "test send")
> >
> >     initSendCommand()
> >     thread.start_new_thread(testSendMessage, ())
> >     reactor.run()
>
> This is the problem.  There's two issues here.
>
> The first is that in general, a thread CANNOT call any Twisted functions
> aside from reactor.callFromThread.  Twisted is not thread safe.  See
> http://twistedmatrix.com/projects/core/documentation/howto/threading.html
>
> The second, and more fundamental, is that threads are totally unnecessary for
> this.
>
> You can write that code block as:
>
> if __name__ == "__main__":
>     initSendCommand()
>     reactor.callLater(2, sendCmd, "localhost", 8009, "test send")
>     reactor.run()
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From andrew-twisted at puzzling.org  Fri Dec  2 00:53:51 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 2 Dec 2005 16:53:51 +1100
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
References: <20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
	<f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
Message-ID: <20051202055351.GC20951@home.puzzling.org>

On Fri, Dec 02, 2005 at 01:44:06PM +0800, Xu Ryan wrote:
> I use the thread to make the sendCmd be called after the reactor run.
> Because in the real application, I should start the server(reactor)
> first, and other logic will call the sendCmd, so I can't fix it before
> reactor.run() (as callLater(foo)). What should I do ?

It's hard to know what you need here.  Can you elaborate more on this "other
logic"?

Note though that the callLater will also "make the sendCmd be called after the
reactor run" -- although a clearer phrasing would be "make the sendCmd be called
after the reactor starts", so I don't understand why it is inappropriate for
you.

Also, saying "the server(reactor)" suggests to me that you misunderstand the
role of the reactor.  The reactor isn't your server; it's the event loop that
runs all the networking Twisted does, servers, clients, whatever.  You don't
want to stop and start it for each task, or have a seperate one for each task,
it's a single object that handles the events that occur (like sockets receiving
data) and dispatching them to the right object.

-Andrew.




From xuryans at gmail.com  Fri Dec  2 01:44:17 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Fri, 2 Dec 2005 14:44:17 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051202055351.GC20951@home.puzzling.org>
References: <20051130113637.GP18323@home.puzzling.org>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
	<f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
	<20051202055351.GC20951@home.puzzling.org>
Message-ID: <f6c194d30512012244m7e240b33w60ac9722ce68421e@mail.gmail.com>

I have a master machine ,that will control hundreds remote
servers(agent). It will send authenticate and command message to
remote agent. The master will run months. And I can't sure which
command will be sent, and when it will be sent. So I cann't write it
in codes as "reactor.callLater" then "reactor.run()".

I need sth like a task pool, I can push a command into it in anytime,
and the pool will send out the command immediately. Those commands
will be send to different agent.

The "other logic" is "pushing commands into the pool". It's unsure
before running.
>
> It's hard to know what you need here.  Can you elaborate more on this "other
> logic"?
>
> Note though that the callLater will also "make the sendCmd be called after the
> reactor run" -- although a clearer phrasing would be "make the sendCmd be called
> after the reactor starts", so I don't understand why it is inappropriate for
> you.
>
> Also, saying "the server(reactor)" suggests to me that you misunderstand the
> role of the reactor.  The reactor isn't your server; it's the event loop that
> runs all the networking Twisted does, servers, clients, whatever.  You don't
> want to stop and start it for each task, or have a seperate one for each task,
> it's a single object that handles the events that occur (like sockets receiving
> data) and dispatching them to the right object.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From xuryans at gmail.com  Fri Dec  2 01:47:12 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Fri, 2 Dec 2005 14:47:12 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051202055351.GC20951@home.puzzling.org>
References: <20051130113637.GP18323@home.puzzling.org>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
	<f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
	<20051202055351.GC20951@home.puzzling.org>
Message-ID: <f6c194d30512012247s15462b4fw5a35b7b56e1abd58@mail.gmail.com>

As you saying, reactor handles the events. Can i register new event
after the event loop running?

On 12/2/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> On Fri, Dec 02, 2005 at 01:44:06PM +0800, Xu Ryan wrote:
> > I use the thread to make the sendCmd be called after the reactor run.
> > Because in the real application, I should start the server(reactor)
> > first, and other logic will call the sendCmd, so I can't fix it before
> > reactor.run() (as callLater(foo)). What should I do ?
>
> It's hard to know what you need here.  Can you elaborate more on this "other
> logic"?
>
> Note though that the callLater will also "make the sendCmd be called after the
> reactor run" -- although a clearer phrasing would be "make the sendCmd be called
> after the reactor starts", so I don't understand why it is inappropriate for
> you.
>
> Also, saying "the server(reactor)" suggests to me that you misunderstand the
> role of the reactor.  The reactor isn't your server; it's the event loop that
> runs all the networking Twisted does, servers, clients, whatever.  You don't
> want to stop and start it for each task, or have a seperate one for each task,
> it's a single object that handles the events that occur (like sockets receiving
> data) and dispatching them to the right object.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From andrew-twisted at puzzling.org  Fri Dec  2 02:10:52 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 2 Dec 2005 18:10:52 +1100
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30512012247s15462b4fw5a35b7b56e1abd58@mail.gmail.com>
References: <20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
	<f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
	<20051202055351.GC20951@home.puzzling.org>
	<f6c194d30512012247s15462b4fw5a35b7b56e1abd58@mail.gmail.com>
Message-ID: <20051202071052.GD20951@home.puzzling.org>

On Fri, Dec 02, 2005 at 02:47:12PM +0800, Xu Ryan wrote:
> As you saying, reactor handles the events. Can i register new event
> after the event loop running?

Absolutely.  You can, for instance, call connectTCP as many times as you like
while the event loop is running to establish multiple client connections, which
may be concurrent.

You can call listenTCP at any time too, if during the course of running the code
needs to start listening on another TCP port.

And so on.  Most of the reactor methods can be called while the reactor is
running, with a couple of obvious exceptions (e.g. you can't call reactor.run).

Many of the other actions you can take in a Twisted program, like writing to or
disconnecting a transport, are also at some level instructing the reactor to do
something, and again this happens inside the event loop.

-Andrew.




From xuryans at gmail.com  Fri Dec  2 02:25:48 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Fri, 2 Dec 2005 15:25:48 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051202071052.GD20951@home.puzzling.org>
References: <20051201070607.GS18323@home.puzzling.org>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
	<f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
	<20051202055351.GC20951@home.puzzling.org>
	<f6c194d30512012247s15462b4fw5a35b7b56e1abd58@mail.gmail.com>
	<20051202071052.GD20951@home.puzzling.org>
Message-ID: <f6c194d30512012325lcaa50b8n4c91bf1b0c9fad23@mail.gmail.com>

But when reactor.run() is called, the program lock here. and the codes
after "reactor.run()" are not been called until reactor is stop.

On 12/2/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> On Fri, Dec 02, 2005 at 02:47:12PM +0800, Xu Ryan wrote:
> > As you saying, reactor handles the events. Can i register new event
> > after the event loop running?
>
> Absolutely.  You can, for instance, call connectTCP as many times as you like
> while the event loop is running to establish multiple client connections, which
> may be concurrent.
>
> You can call listenTCP at any time too, if during the course of running the code
> needs to start listening on another TCP port.
>
> And so on.  Most of the reactor methods can be called while the reactor is
> running, with a couple of obvious exceptions (e.g. you can't call reactor.run).
>
> Many of the other actions you can take in a Twisted program, like writing to or
> disconnecting a transport, are also at some level instructing the reactor to do
> something, and again this happens inside the event loop.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From andrew-twisted at puzzling.org  Fri Dec  2 02:52:49 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 2 Dec 2005 18:52:49 +1100
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30512012325lcaa50b8n4c91bf1b0c9fad23@mail.gmail.com>
References: <20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
	<f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
	<20051202055351.GC20951@home.puzzling.org>
	<f6c194d30512012247s15462b4fw5a35b7b56e1abd58@mail.gmail.com>
	<20051202071052.GD20951@home.puzzling.org>
	<f6c194d30512012325lcaa50b8n4c91bf1b0c9fad23@mail.gmail.com>
Message-ID: <20051202075249.GE20951@home.puzzling.org>

On Fri, Dec 02, 2005 at 03:25:48PM +0800, Xu Ryan wrote:
> But when reactor.run() is called, the program lock here. and the codes
> after "reactor.run()" are not been called until reactor is stop.

Right.  You generally don't want to have any code after reactor.run().  The idea
is to react to events that occur, like receiving messages off the network.

For example, if you want to make a new connection while the reactor is running,
you do that from within an event handler.

There's some examples of this in Twisted, e.g. look at
twisted/protocols/portforward.py
(http://svn.twistedmatrix.com/cvs/trunk/twisted/protocols/portforward.py?view=auto&rev=12914).
An example of using this module would be:

    from twisted.internet import reactor
    from twisted.protocols.portforward import ProxyFactory
    reactor.listenTCP(1234, ProxyFactory('somewhere.com', 5678))
    reactor.run()

If you run that it will start listening on port 1234, and do nothing else until
you connect to that port.  As soon as a connection is established, a ProxyServer
protocol is made, and its connectionMade handler will call reactor.connectTCP to
establish a connection to somewhere.com's port 5678.

Here's another example of making new connections in response to events that
occur while the program is running.  You may find it simpler to understand,
although I haven't tested it so there may be bugs, and it has essentially no
error handling...:

----
from twisted.protocols import basic
from twisted.internet import reactor, protocol

class MessageReceiver(basic.LineReceiver):
    def lineReceived(self, line):
        # expects lines like "host.somewhere.com 1234 here's a message".
        host, port, message = line.split(' ', 2)
        sendMessage(host, port, message)

class MessageSender(protocol.Protocol):
    def __init__(self, message):
        self.message = message

    def connectionMade(self):
        # send the message
        self.transport.write(message)
        # close the connection
        self.transport.loseConnection()

def sendMessage(host, port, message):
    cc = protocol.ClientCreator(reactor, MessageSender, message)
    cc.connectTCP(host, port)

f = protocol.ServerFactory()
f.protocol = MessageReceiver
reactor.listenTCP(1234, f)
reactor.run()
----

You may also want to work through the finger tutorial -- it's a bit long, but it
does cover this sort of thing.

-Andrew.




From xuryans at gmail.com  Fri Dec  2 05:02:09 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Fri, 2 Dec 2005 18:02:09 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051202075249.GE20951@home.puzzling.org>
References: <20051201084503.GT18323@home.puzzling.org>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
	<f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
	<20051202055351.GC20951@home.puzzling.org>
	<f6c194d30512012247s15462b4fw5a35b7b56e1abd58@mail.gmail.com>
	<20051202071052.GD20951@home.puzzling.org>
	<f6c194d30512012325lcaa50b8n4c91bf1b0c9fad23@mail.gmail.com>
	<20051202075249.GE20951@home.puzzling.org>
Message-ID: <f6c194d30512020202k2395f60eh911e58c2bc781940@mail.gmail.com>

Thank you for you patient:)

The codes below seems have other problems:
1. one port bind one Proxy. And the proxy is also fixed before reactor run.
2. Should use other method make connect with localhost.
Perhaps it make my problem complicated.

I think i should make a schedule and check the command list, if it's
not empty, send the commands in the list. twisted has some module like
that, i rememberd.

> An example of using this module would be
>
>     from twisted.internet import reactor
>     from twisted.protocols.portforward import ProxyFactory
>     reactor.listenTCP(1234, ProxyFactory('somewhere.com', 5678))
>     reactor.run()
>
> If you run that it will start listening on port 1234, and do nothing else until
> you connect to that port.  As soon as a connection is established, a ProxyServer
> protocol is made, and its connectionMade handler will call reactor.connectTCP to
> establish a connection to somewhere.com's port 5678.
>
> Here's another example of making new connections in response to events that
> occur while the program is running.  You may find it simpler to understand,
> although I haven't tested it so there may be bugs, and it has essentially no
> error handling...:
>
> ----
> from twisted.protocols import basic
> from twisted.internet import reactor, protocol
>
> class MessageReceiver(basic.LineReceiver):
>     def lineReceived(self, line):
>         # expects lines like "host.somewhere.com 1234 here's a message".
>         host, port, message = line.split(' ', 2)
>         sendMessage(host, port, message)
>
> class MessageSender(protocol.Protocol):
>     def __init__(self, message):
>         self.message = message
>
>     def connectionMade(self):
>         # send the message
>         self.transport.write(message)
>         # close the connection
>         self.transport.loseConnection()
>
> def sendMessage(host, port, message):
>     cc = protocol.ClientCreator(reactor, MessageSender, message)
>     cc.connectTCP(host, port)
>
> f = protocol.ServerFactory()
> f.protocol = MessageReceiver
> reactor.listenTCP(1234, f)
> reactor.run()
> ----
>
> You may also want to work through the finger tutorial -- it's a bit long, but it
> does cover this sort of thing.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From doug at isotoma.com  Fri Dec  2 05:07:17 2005
From: doug at isotoma.com (Doug Winter)
Date: Fri, 02 Dec 2005 10:07:17 +0000
Subject: [Twisted-Python] Non-terminating Process using gtkreactor2
Message-ID: <43901CD5.1010008@isotoma.com>


I have a GTK program using twisted 2.1.0 and python 2.4.  On both Linux 
and Windows the program reliably fails to terminate after calling 
gtk.main_quit() and reactor.stop().  It just sits there.  All the 
windows close, but the process remains running.

It will terminate happily if the program has merely been run, but if 
"things" have happened, the program refuses to die.  I am guessing that 
this is because there are deferreds loitering around unfired, or some 
GTK resources remain that refuse to die.

To kill the process after this, it must be sent a KILL signal, TERM is 
not sufficient.  On windows it can be killed in the Task Manager 
processes tab.

I admit I am at a loss as to how to debug this - can someone give me 
some pointers to diagnostics I can try to find out what the problem is?

Cheers,

Doug.

-- 
doug at isotoma.com   / Isotoma, Open Source Software Consulting
Tel: 020 7620 1446 / Mobile: 07879 423002 / Fax: 020 79006980
Skype: dougwinter  / http://www.isotoma.com
Lincoln House, 75 Westminster Bridge Road, London, SE1 7HS



From amcouper at gmail.com  Fri Dec  2 09:28:32 2005
From: amcouper at gmail.com (Alex Couper)
Date: Fri, 2 Dec 2005 14:28:32 +0000
Subject: [Twisted-Python] Non-list expression received,
	'Server' object has no attribute 'socket'
Message-ID: <a8fa98110512020628u78d9d9b4nf9c4746450d37cb4@mail.gmail.com>

I have an application that requires each node using it to update each other,
and to fetch updates automatically. Each node, therefore, has a server and a
client on it.
I am receiving different errors each time I run the program, and they are
coming from within the twisted packages, (shown below)

Error 1:
  File "C:\Python24\lib\site-packages\twisted\internet\tcp.py", line 89, in
_closeSocket
    skt = self.socket
exceptions.AttributeError: 'Server' object has no attribute 'socket'

Error 2:
  File "C:\Python24\lib\site-packages\twisted\spread\pb.py", line 572, in
expressionReceived
    raise ProtocolError("Non-list expression received.")
twisted.spread.pb.ProtocolError: Non-list expression received.


I suspect that they are caused by the way that I am running my server. On
occasion, reactor.run() finishes, and thus there is no longer a server
running in effect. I therefore use a while loop to always be running the
server. The server is launched as a thread.

def run(self):
        while 1:
            application = service.Application("copy_receiver")
            internet.TCPServer(8800, pb.PBServerFactory
(self)).setServiceParent(
                service.IServiceCollection(application))
            self.listener = reactor.listenTCP(8800, pb.PBServerFactory
(self))

            #installSignalHandlers=0 allows the reactor to run in a non-main
thread
            reactor.run(installSignalHandlers=0)

Is this known to cause problems? If not, any ideas of why i might be getting
the error messages? or any ideas how I can keep the server running so that
it doesn't exit?


Alex Couper
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051202/0c98c4c7/attachment.htm 

From moe at divmod.com  Fri Dec  2 10:16:35 2005
From: moe at divmod.com (Moe Aboulkheir)
Date: Fri, 2 Dec 2005 17:16:35 +0200
Subject: [Twisted-Python] Non-terminating Process using gtkreactor2
In-Reply-To: <43901CD5.1010008@isotoma.com>
Message-ID: <20051202151635.1217.78844231.divmod.quotient.2764@ohm>

On Fri, 02 Dec 2005 10:07:17 +0000, Doug Winter <doug at isotoma.com> wrote:
>
>I have a GTK program using twisted 2.1.0 and python 2.4.  On both Linux and 
>Windows the program reliably fails to terminate after calling 
>gtk.main_quit() and reactor.stop().  It just sits there.  All the windows 
>close, but the process remains running.

AFAICT the twisted example pbgtk2.py seems to do the wrong thing here, and it too freezes up when the destroy handler of the login window is called.  if you call reactor.stop(), rather than gtk.main_quit() (assuming the gtk2reactor is installed) then your program will terminate normally.



From itamar at itamarst.org  Fri Dec  2 11:41:01 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 02 Dec 2005 11:41:01 -0500
Subject: [Twisted-Python] Non-list expression received, 'Server' object
	has no attribute 'socket'
In-Reply-To: <a8fa98110512020628u78d9d9b4nf9c4746450d37cb4@mail.gmail.com>
References: <a8fa98110512020628u78d9d9b4nf9c4746450d37cb4@mail.gmail.com>
Message-ID: <1133541661.9188.5.camel@localhost.localdomain>

On Fri, 2005-12-02 at 14:28 +0000, Alex Couper wrote:

> def run(self):  
>         while 1:
>             application = service.Application("copy_receiver")
>             internet.TCPServer(8800,
> pb.PBServerFactory(self)).setServiceParent(
>                 service.IServiceCollection(application))      
>             self.listener = reactor.listenTCP(8800,
> pb.PBServerFactory(self))
>             
>             #installSignalHandlers=0 allows the reactor to run in a
> non-main thread 
>             reactor.run(installSignalHandlers=0)
>           

This is wrong. You can only call reactor.run() *once* in your program's
lifetime. reactor.run() only exits when someone calls reactor.stop();
since you don't want it to finish, don't call reactor.stop() until you
need it to.





From doug at isotoma.com  Fri Dec  2 13:32:14 2005
From: doug at isotoma.com (Doug Winter)
Date: Fri, 02 Dec 2005 18:32:14 +0000
Subject: [Twisted-Python] Non-terminating Process using gtkreactor2
In-Reply-To: <20051202151635.1217.78844231.divmod.quotient.2764@ohm>
References: <20051202151635.1217.78844231.divmod.quotient.2764@ohm>
Message-ID: <4390932E.5040804@isotoma.com>

Moe Aboulkheir wrote:
> On Fri, 02 Dec 2005 10:07:17 +0000, Doug Winter <doug at isotoma.com> wrote:
>> I have a GTK program using twisted 2.1.0 and python 2.4.  On both 
>> Linux and Windows the program reliably fails to terminate after 
>> calling gtk.main_quit() and reactor.stop().  It just sits there.  All 
>> the windows close, but the process remains running.
> 
> AFAICT the twisted example pbgtk2.py seems to do the wrong thing here, 
> and it too freezes up when the destroy handler of the login window is 
> called.  if you call reactor.stop(), rather than gtk.main_quit() 
> (assuming the gtk2reactor is installed) then your program will terminate 
> normally.

Great, that's fixed it.  Thanks!

doug.

-- 
doug at isotoma.com   / Isotoma, Open Source Software Consulting
Tel: 020 7620 1446 / Mobile: 07879 423002 / Fax: 020 79006980
Skype: dougwinter  / http://www.isotoma.com
Lincoln House, 75 Westminster Bridge Road, London, SE1 7HS



From william.lewis at uk.bnpparibas.com  Fri Dec  2 13:33:58 2005
From: william.lewis at uk.bnpparibas.com (william.lewis at uk.bnpparibas.com)
Date: Fri, 2 Dec 2005 18:33:58 +0000
Subject: [Twisted-Python] pb references
Message-ID: <OFBB460905.BC9C9458-ON802570CB.006587B6-802570CB.0065FCC2@bnpparibas.com>

Hi

I am trying to call a remote method on a client from a server using a 
reference that has been given to the server by the client.

I am trying to do this in the way described in your "References to 
Client-side objects" documentation.
However, I keep getting the following error: "Can't send references to 
brokers other than their own." and I can't see why.

Any help with this error would be greatly appreciated.




This message and any attachments (the "message") is 
intended solely for the addressees and is confidential. 
If you receive this message in error, please delete it and
immediately notify the sender. Any use not in accord with
its purpose, any dissemination or disclosure, either whole
or partial, is prohibited except formal approval. The internet
can not guarantee the integrity of this message.
BNP PARIBAS (and its subsidiaries) shall (will) not
therefore be liable for the message if modified. 

**********************************************************************************************

BNP Paribas Private Bank London Branch is authorised
by CECEI & AMF and is regulated by the Financial Services
Authority for the conduct of its investment business in
the United Kingdom.

BNP Paribas Securities Services London Branch is authorised 
by CECEI & AMF and is regulated by the Financial Services 
Authority for the conduct of its investment business in 
the United Kingdom.
  
BNP Paribas Fund Services UK Limited is authorised and 
regulated by the Financial Services Authority

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051202/0fc93aae/attachment.htm 

From 7hs at muchan.org  Sat Dec  3 13:38:14 2005
From: 7hs at muchan.org (Seventh Holy Scripture)
Date: Sat, 3 Dec 2005 10:38:14 -0800
Subject: [Twisted-Python] Twisted Words: throttling server output
Message-ID: <D3EC1AC1-44EC-4BA4-9559-5871C22BF044@muchan.org>

I've been writing an IRC bot using Twisted Words, and am having  
difficulty keeping it from flooding itself off the server. Currently  
my output subroutines look like this:

     def queueMsg(self, channel, msg):
         self.chanQueue.append(channel)
         self.msgQueue.append(msg)

     def emptyMsgQueue(self):
         for msg in self.msgQueue:
             channel = self.chanQueue.pop(0)
             self.msg(channel, msg)
             if channel[0] == "#":
                 self.logger.log("<%s> %s" % (self.nickname, msg))
             time.sleep(0.5)
         self.msgQueue = []

This ought to work as far as I know... but the bot waits until after  
all the sleep statements have executed to spew the output to the IRC  
server, which (if there's a lot of it) results in a forced disconnect  
due to "Excess Flood". What am I doing wrong here? My guess is that  
twisted has its own message queue, and waits until after all host  
program subroutines have ended to process it... I'm not good at  
python, though, so it could be a stupid mistake on my part.

In any case, is there another way to introduce a delay between the  
messages sent to server that will work?



From exarkun at divmod.com  Sat Dec  3 14:40:00 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 3 Dec 2005 14:40:00 -0500
Subject: [Twisted-Python] Twisted Words: throttling server output
In-Reply-To: <D3EC1AC1-44EC-4BA4-9559-5871C22BF044@muchan.org>
Message-ID: <20051203194000.1217.2132745081.divmod.quotient.2938@ohm>

On Sat, 3 Dec 2005 10:38:14 -0800, Seventh Holy Scripture <7hs at muchan.org> wrote:
>I've been writing an IRC bot using Twisted Words, and am having  difficulty 
>keeping it from flooding itself off the server. Currently  my output 
>subroutines look like this:
>
>     def queueMsg(self, channel, msg):
>         self.chanQueue.append(channel)
>         self.msgQueue.append(msg)
>
>     def emptyMsgQueue(self):
>         for msg in self.msgQueue:
>             channel = self.chanQueue.pop(0)
>             self.msg(channel, msg)
>             if channel[0] == "#":
>                 self.logger.log("<%s> %s" % (self.nickname, msg))
>             time.sleep(0.5)
>         self.msgQueue = []

The time.sleep() call blocks the entire reactor thread.  Eventually, 
the loop exits, the reactor regains control of program flow, notices 
a huge pile of messages in the IRC connection's output buffer, and 
sends them all as fast as it can.  Woops. :)

Take a look at reactor.callLater() or twisted.internet.task.LoopingCall().
These will let you schedule events to happen at particular times without 
blocking the reactor, and thus allowing each message to be sent at a 
reasonable time.

Jean-Paul



From mwh at python.net  Sat Dec  3 15:54:39 2005
From: mwh at python.net (Michael Hudson)
Date: Sat, 03 Dec 2005 20:54:39 +0000
Subject: [Twisted-Python] Re: Twisted Words: throttling server output
References: <D3EC1AC1-44EC-4BA4-9559-5871C22BF044@muchan.org>
Message-ID: <2m8xv1c35c.fsf@starship.python.net>

Seventh Holy Scripture <7hs at muchan.org> writes:

> In any case, is there another way to introduce a delay between the
> messages sent to server that will work?

Are you aware of the 'lineRate' variable on irc.IRCClient?

Cheers,
mwh

-- 
  I have a feeling that any simple problem can be made arbitrarily
  difficult by imposing a suitably heavy administrative process
  around the development.       -- Joe Armstrong, comp.lang.functional




From kwhitesell at adelphia.net  Sat Dec  3 16:24:07 2005
From: kwhitesell at adelphia.net (Ken Whitesell)
Date: Sat, 03 Dec 2005 16:24:07 -0500
Subject: [Twisted-Python] Request for ideas
Message-ID: <43920CF7.8030204@adelphia.net>

Warning - fairly long post follows for what I hope is a simple question 
that only needs (possibly) a short answer. (I'm not looking for any 
code, just one of a couple possible ideas.)

Environment: A LAN with a server and multiple PCs. Full control is 
available over all the PCs. I have the ability to run whatever I want on 
each - in this case it means Python 2.4 / Twisted 2.

Background / Use Case: Imagine a simultaneous silent auction. (More like 
an RFP-type situation.) Any of the PCs can put an item up for bid. Other 
PCs can respond (or ignore!) that item. There are two timeout 
requirements - an "acknowledgement" timeout, where the PC has a certain 
period of time to respond "I want to make a bid", and a response timeout 
that restricts the clients to how much time they have to make the bid. 
These timeouts can change depending on the item going up for bid.
(How and 'what' goes up for bid is irrelevant to my question.)

What I've done so far: I've created a class called "CommTrans" to manage 
the auction. Each time an item goes up for bid, an instance of CommTrans 
is created.

CommTrans creates two objects, one each to manage the acknowlegements 
and the other to manage the replies (AckMgr, RepMgr). The RepMgr is a 
Viewable that can be called by the client to submit its bid. (RepMgr is 
passed to the client in the callRemote call.)

CommTrans issues the callRemote, passing RepMgr to the client. Then it 
sets a function in the AckMgr as the callback.

The client receives the request, and decides whether or not to respond 
to the request. If yes, it issues a callLater on the function to 
determine the bid and submit it to the RepMgr. Either way, the original 
function returns either "Yes" or "No", triggering the callback on the 
CommTrans.

Both the AckMgr and RepMgr issue callLater to schedule the timeout. If 
all possible machines reply before the timeout occurs, the timeout is 
cancelled. If the timeout occurs first, a flag is set to have the 
objects reject all further information from the clients. (It's simply 
ignored, nothing special occurs.)

QUESTION #1: Did I miss something in the Twisted API that would handle 
this type of situation? I don't think a Deferred list would work in this 
situation, because it's not going to fire until all deferrs complete - 
something which might not occur.

But this isn't the problem - the code that I have written for these 
functions all work.

The specific problem occurs when objects are reused. I've had situations 
where a client fails to reply for significantly longer than the timeout 
period. In that interval, the original CommTrans, AckMgr and RepMgr have 
been deleted and replaced by new instances. The client finally replies 
to the original request, and the reply is caught by those new objects!
(There is what I think is a very small, but non-zero probability that 
I'm misinterpreting what I'm seeing.)

 From what I can see in the source code, the internal ID is what's set 
by the builtin 'id' function. I'm printing these at key times and I can 
see where they're being duplicated. The only time I see this problem 
occur is when a new object has been created with the same id as a 
previous object.

So this leads me to QUESTION #2: Anyone have ideas on how to resolve 
this? (Note: I can't channel everything through a single CommTrans 
object, because multiple bids might be happening concurrently with 
overlapping timeouts.)

About the only thought I've had so far is to generate a GUID-like object 
for each CommTrans, and include that in every communication to and from 
the clients. The server would check each ack and each reply to ensure 
that the ack and reply are for the proper auction.

Sending another message to the client isn't going to be a good solution, 
because the client might be tied up doing other things - starving the 
reactor - so by the time the message is processed, it may be too late.

This also brings up QUESTION #3, although it hasn't happened yet: Server
does a callRemote to the client from a commTrans object. Before the 
remote function returns (client is _extremely_ busy) the commTrans 
object goes away. What will happen when the function exits? (I know, I 
ought to generate a test-case for this - I'm more wondering if anyone 
knows right off-hand.)

All thoughts, ideas, comments, recommendations are encouraged. Thanks to 
any/everyone who managed to get this far through my writing.

Finally, I'm most pleased to announce that my proposal to provide a 
"Getting Started with Twisted" tutorial at PyCon has been accepted! I 
know I can't turn people into Twisted gurus in 3 hours, but I hope I can 
get a few over that initial hurdle.

Thanks,
	Ken




From frank at chagford.com  Sun Dec  4 06:33:23 2005
From: frank at chagford.com (Frank Millman)
Date: Sun, 4 Dec 2005 13:33:23 +0200
Subject: [Twisted-Python] Question on deferreds
Message-ID: <20051204112834.962643F4366@fcserver.chagford.com>

Hi all,

I am trying to convert my app to use Twisted. The original version handles a
gui, some business logic, and a database connection, all in one program. I
have split it into a 'client' program, that handles the gui; and a server
program, that handles the business logic and the database connection, and
communicates with the client using pb.

The original program has some logic to validate user input. The data to be
validated is passed up through 3 or 4 classes. Here is some very simplified
pseudo code -

    class1():
        def check1(data):
            perform test
            if test failed:
                return False
            if not class2.check2(data):
                return False
            return True

    class2():
        def check2(data):
            perform test
            if test failed:
                return False
            if not class3.check3(data):
                return False
            return True

    class3():
        def check3(data):
            perform test
            if test failed:
                return False
            if not class4.check4(data):
                return False
            return True

    class4():
        def check4(data):
            perform test
            if test failed:
                return False
            return True

In my new program, classes 1-3 run on the client, class4 runs on the server.
Therefore I tried to change class3 as follows -

    class3():
        def check3(data):
            avatar.callRemote(check4,data).addCallback(afterCheck)

        def afterCheck(result):
            return result

This does not work, as check1 and check2 never receive the result.

I would like to avoid going through my entire program and changing each
occurrence of check1 and check2 into a deferred and a callback. I do not
particularly mind if the client program blocks, as I do not want the user to
proceed until the result is known.

Is there any way to accomplish this?

Thanks for any advice

Frank Millman




From kwhitesell at adelphia.net  Sun Dec  4 08:17:55 2005
From: kwhitesell at adelphia.net (kwhitesell at adelphia.net)
Date: Sun, 4 Dec 2005 8:17:55 -0500
Subject: [Twisted-Python] (no subject)
Message-ID: <17833893.1133702275128.JavaMail.root@web10.mail.adelphia.net>

Hi Frank,

Best that I can tell, it's not your various classes that need to be converted to deferreds, just your program that calls class1, or even class1 itself.

The bottom line is that _something_ higher up the calling stack needs to be aware that this is an asynchronous process - and that a deferred gets generated along the way. I believe it would be helpful if the originating function is coded for this.

	I'm not a Twisted guru, so there may be an easier way to do this - but as I see it...

I would be writing the classes to look more like the following:

    class1():
        def check1(data):
            perform test
            if test failed:
                return defer.succeed(False)
            return class2.check2(data):

    class2():
        def check2(data):
            perform test
            if test failed:
                return defer.succeed(False)
            return class3.check3(data):

    class3():
        def check3(data):
            perform test
            if test failed:
                return defer.succeed(False)
            aDeferred = avatar.callRemote(check4,data)
            return aDeferred


Then, my originating class (and possibly becomming a wrapper class if this is used in many places).

    class0():
       def check0(data):
           class1.check1(data).addCallback(afterCheck)

        def afterCheck(result):
            return result


This way, all the functions return a deferred back up to the calling program - but the only one that causes a delay is the call to check4.

Ken



From shamrin at gmail.com  Mon Dec  5 00:47:52 2005
From: shamrin at gmail.com (Alexey Shamrin)
Date: Mon, 5 Dec 2005 08:47:52 +0300
Subject: [Twisted-Python] [patch] issue 630: timezone in twisted log
Message-ID: <28d42ea70512042147r14ab13a4g@mail.gmail.com>

Hello!

Nearly half a year ago I took issue 630 from twisted bug database [1]
and tried to fix it. This bug is good to fix, because it makes the
experience of looking at the console after issuing "twistd -noy
some.tac" much better.

But after adding several comments on the issue and attaching patches,
I recieved ZERO response... :-(

[1] http://twistedmatrix.com/bugs/issue630

--
Alexey



From frank at chagford.com  Mon Dec  5 04:33:51 2005
From: frank at chagford.com (Frank Millman)
Date: Mon, 5 Dec 2005 11:33:51 +0200
Subject: [Twisted-Python] Question on deferreds
In-Reply-To: <17833893.1133702275128.JavaMail.root@web10.mail.adelphia.net>
Message-ID: <20051205092855.368BE3F433B@fcserver.chagford.com>

Ken wrote:
> 
> Hi Frank,
> 
> Best that I can tell, it's not your various classes that need 
> to be converted to deferreds, just your program that calls 
> class1, or even class1 itself.

Thanks for the reply.

> 
> The bottom line is that _something_ higher up the calling 
> stack needs to be aware that this is an asynchronous process 
> - and that a deferred gets generated along the way. I believe 
> it would be helpful if the originating function is coded for this.
> 

I understand what you are getting at, but I have spent a few hours trying to
squeeze this concept into my program, and I am not succeeding.

There are two main reasons that I can see.

Firstly, I oversimplified my pseudo code.

You suggested changing this

    class1():
        def check1(data):
            perform test
            if test failed:
                return False
            if not class2.check2(data):
                return False
            return True

to this

     class1():
         def check1(data):
             perform test
             if test failed:
                 return defer.succeed(False)
             return class2.check2(data)

I understand that, but I should have used this as an example -

    class1():
        def check1(data):
            perform test
            if test failed:
                return False
            if not class2.check2(data):
                return False
            do some extra stuff here  # this is what I left out
            return True

This 'extra stuff' can occur at any of the levels in the stack. I cannot see
where I could put this using your version.

Secondly, under some circumstances I loop over a number of objects and
validate them one after the other -

    class1():
        def check1(data):
            for obj in objList:
                if not check2(obj):
                    return False
            perform test
            if test failed:
                return False
            if not check2(data):
                return False
            do some extra stuff here
            return True

As you can see, it is getting even more complicated to do this using
deferreds.

The irony is that I actually want the client program to block until a
response is received, so maybe I should not be using Twisted on the client
at all. I could write a normal socket client, and use a ServerFactory on the
server.

I am very new to Twisted, so it is likely that my problem is that I have not
learned to think in a Twisted manner yet. Any advice to put me straight will
be much appreciated.

Thanks

Frank




From sam at SpinwardStars.com  Sat Dec  3 19:06:52 2005
From: sam at SpinwardStars.com (Samuel Reynolds)
Date: Sat, 03 Dec 2005 17:06:52 -0700
Subject: [Twisted-Python] Request for ideas
In-Reply-To: <43920CF7.8030204@adelphia.net>
References: <43920CF7.8030204@adelphia.net>
Message-ID: <6.1.2.0.0.20051203165555.0261cbb0@mail.myedl.com>

At 2005-12-03 04:24 PM -0500, you wrote:
>The specific problem occurs when objects are reused. I've had situations 
>where a client fails to reply for significantly longer than the timeout 
>period. In that interval, the original CommTrans, AckMgr and RepMgr have 
>been deleted and replaced by new instances. The client finally replies to 
>the original request, and the reply is caught by those new objects!
>(There is what I think is a very small, but non-zero probability that I'm 
>misinterpreting what I'm seeing.)
>
> From what I can see in the source code, the internal ID is what's set by 
> the builtin 'id' function. I'm printing these at key times and I can see 
> where they're being duplicated. The only time I see this problem occur is 
> when a new object has been created with the same id as a previous object.

Sounds like an object aliasing problem.
And I don't think that it's *objects* that are being
re-used, but *memory locations* for same-class objects.

Don't use the built-in id() function. I'm not sure if this
is correct, but it seems to me something like the memory
address of the object. When the memory gets re-used, the
same ID sometimes recurrs.

*****
If you need a unique identifier for your application logic,
create and assign it yourself. Don't use the id() function.
*****

One possibility is to give each AckMgr/RepMgr pair an auction ID.

Create a simple ID generator (object or function).
When you create a new AckMgr and RepMgr, get a new ID
from the generator and assign it to each one *before*
you use it.

The AckMgr then could simply ignore any response that
doesn't have the expected ID.

More generally, I would put the AckMgrs in a dictionary,
keyed by the action ID. I would have *one* function/method
(ProcessAck) that gets responses and dispatches them to the
appropriate AckMgr, or drops them if no matching AckMgr
is found. This would make testing, debugging, and tuning
easier, too, by providing a single location for
instrumentation.

- Sam

__________________________________________________________
Spinward Stars, LLC                        Samuel Reynolds
Software Consulting and Development           303-805-1446
http://SpinwardStars.com/           sam at SpinwardStars.com  





From Keith.Gunderson at act.org  Tue Dec  6 17:41:07 2005
From: Keith.Gunderson at act.org (Keith.Gunderson at act.org)
Date: Tue, 6 Dec 2005 16:41:07 -0600
Subject: [Twisted-Python] ftpClient.py, retrieveFile, and line ending issues
Message-ID: <OFF16B02C1.4046BB10-ON862570CF.0079B266-862570CF.007C9DC1@LocalDomain>

Hello,

If any of you have a spare minute, I can't figure out else where I might
solve my present dilemma.  Its certainly likely that my only issues are
ignorance about Python's file operations or the features that are a part of
other FTP clients that I use.

I'm using the ftpclient.py code to write a script which downloads file via
FTP.  My example code shows the basics.  The file is transferred, but the
lines seem to have different line endings when I view them 'hexlified' in
xemacs.  My twisted-created files has hex 0D0D 0D0D 0D0D at the end of
lines while a file downloaded using SmartFTP has hex 0D0A 0D0A.

Is it clear, based on that information, if there is an issue in my code?
Or an easy way to fix it?

class FileWriterProtocol(Protocol):
    def __init__(self, filename):
        self.file = open(filename, 'w')

    def dataReceived(self, data):
        self.file.write(data)


def connectionMade(ftpClient):

    proto2 = FileWriterProtocol( 'c:/ftpfile1.txt' )

    # Get the file, and quit when done
    d = ftpClient.retrieveFile( 's1/s2/T2005C.processed' ,
      proto2)
    d.addCallback(lambda result: reactor.stop())


Thanks very much,

Keith Gunderson






From itamar at itamarst.org  Tue Dec  6 17:50:53 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 06 Dec 2005 17:50:53 -0500
Subject: [Twisted-Python] ftpClient.py, retrieveFile, and line ending
	issues
In-Reply-To: <OFF16B02C1.4046BB10-ON862570CF.0079B266-862570CF.007C9DC1@LocalDomain>
References: <OFF16B02C1.4046BB10-ON862570CF.0079B266-862570CF.007C9DC1@LocalDomain>
Message-ID: <1133909453.9093.0.camel@localhost.localdomain>

On Tue, 2005-12-06 at 16:41 -0600, Keith.Gunderson at act.org wrote:

> class FileWriterProtocol(Protocol):
>     def __init__(self, filename):
>         self.file = open(filename, 'w')

You probably want open(filename, "wb"), which implies binary mode. On
Unix this does nothing, on Windows it keeps Windows from screwing with
your data line endings.




From Keith.Gunderson at act.org  Tue Dec  6 17:54:02 2005
From: Keith.Gunderson at act.org (Keith.Gunderson at act.org)
Date: Tue, 6 Dec 2005 16:54:02 -0600
Subject: [Twisted-Python] XML consumers and protocols
Message-ID: <OFCE77B0EF.8F887367-ON862570CF.007CF7C0-862570CF.007DCC73@LocalDomain>


Another question I'm trying to hunt down regarding my plans to develop an
ftpClient that will download XML files...

How can I teach myself what is important to know about the relationship
between Protocols and Consumers?  How much of these concepts are twisted
specific...  or Components/ Interfaces ...  or just native Python stuff.

I have a notion of abstractly passing data from an ftpClient to an XML
parser, but I'm obviously not there yet.

Thanks!

Keith Gunderson






From jmbenski at micron.com  Tue Dec  6 21:58:13 2005
From: jmbenski at micron.com (jmbenski at micron.com)
Date: Tue, 6 Dec 2005 19:58:13 -0700
Subject: [Twisted-Python] RE: waiting on transport return
Message-ID: <3E7F9D21F31D094DB7721553EA2CD1B5E72AD6@NTXBOIMBX15.micron.com>

            Ok, I need some help to write some code using deferred's the way they were meant, not the way I've bastardized them.

 

My framework...

 

I have a client that will connect to a server and MAINTAIN that connection.  I can't create a protocol factory.  The server and the client communicate commands through stdin and stdout.  I need to write my commands to the server and wait for the response in some cases.

 

I've setup a system that passes a deferred chain to my process protocol and once my process knows that the data it needs is received it will kick off the deferred chain that happens after that response.  This seems backwards.  From my reading and understanding of deferreds, they should bubble down and not have to be pushed up.  How do I handle the case of some protocol command kicking off the rest of a deferred chain or of passing back a deferred, so that I can add to it the things that need to run?

 

class SyncManagerProtocol(protocol.ProcessProtocol):

    def __init__(self ):

        self.dataStore = ""

        ##queue that holds the commands 

        self.cmdQueue = list()

        ##queue that holds the callback function to call once the call returns

        self.deferredQueue = list()

           

    def outReceived(self, data):

        

        if len(self.cmdQueue) > 0:

            ##take the data and shove it into our internal store

            self.dataStore += data

            ##determine what is good data

            cmd = self.cmdQueue[0]

            ##look for the command the is next in the queue.  grab all the return data

            ##between the command block.

            ##      syncCmd {

            ##      return data goes here

            ##      } syncCmd

            cmdBlock = r"%s {(?P<cmd>.*)} %s(?P<rest>.*)" % (cmd, cmd)

            errBlock = r"invalid {(?P<errMsg>.*)}"

    

            cmdMatch = re.compile( cmdBlock, re.S ).search( self.dataStore )           

 

            if cmdMatch:

                ##set the rest of the data to the dataStore.  This clears out the current contents

                ##but keeps any extra data that may be coming in from the next command

                self.dataStore = cmdMatch.group( "rest" )

                ##clean up this command

                self.commandComplete( cmdMatch.group("cmd").lstrip() )

    

    ##This is called if all the data we need has been returned.                   

    def commandComplete(self, cmdData):

        ##pop this command since we are done with it

        self.cmdQueue.pop(0)

        ##pop the deferred that matches this command

        deferred = self.deferredQueue.pop(0)        

        ##pass the results to the deferred

        deferred.callback( cmdData )

    

    ##interface to the process that sends a command to execute

    def sendCommand( self, cmd, args, deferred ):       

        ##store the command in the queue, so we can check it when we get data

        self.cmdQueue.append( cmd )

        ##store the deferred in the queue that we need to run when this command has been completed

        self.deferredQueue.append( deferred )

        ##write out command to the process

        cmd = cmd + " " + args + "\n"

        self.transport.write( cmd )

 

 

 

##   This code is my client interface class to the server that holds the processProtocol instance.   ##

 

 

#setup a command that will handle errors or good data

d = defer.Deferred().addCallback( self.handleThisCommand )

#run the calling function handler that will handle an error or returned data.  This will allow something like a GUI to process data that will now be available

d.addCallback( self.theRestOfTheCommands )

cmd = "some command goes here"

self.processProtocol.sendCommand( "syncCmd", cmd, d)

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051206/fd900381/attachment.htm 

From kwhitesell at adelphia.net  Wed Dec  7 00:19:18 2005
From: kwhitesell at adelphia.net (Ken Whitesell)
Date: Wed, 07 Dec 2005 00:19:18 -0500
Subject: [Twisted-Python] Question on deferreds
Message-ID: <439670D6.9050508@adelphia.net>

Frank,

	Ok, your clarifications make things a little more difficult, but 
not impossible.

	Standard disclaimer: I'm no Twisted-guru. There may be an easier 
way to do this. I can only take this as far as my knowledge extends. 
So having said that...

There's no way to get around the fact that the calling program needs 
to be 'broken' down into two parts, 'separated' by the deferred.

In other words, to greatly simplify the situation, your flow should 
be something like:

function 1
	do stuff...
	do more stuff...
	do more stuff...
	callRemote...
	addCallback(function2)
return

function 2
	do more stuff...
	do more stuff...
	do more stuff...
end of tests.

The bottom line is that your entire program flow needs to be 
reworked around the Twisted methodology. (Or, in other words, you 
need to Twist your program. <g>)

I don't remember where I saw this first, but the best way I know to
describe this situation is to stop thinking of your program as a 
program and Twisted as a library. Twisted is the program, and your 
code is the library.

Your functions get called by the reactor because of some event. You
handle this event then return control to the reactor. The reactor 
then calls other functions as necessary.

So you perform some tests, then call remote to invoke a process on 
the server, register your callback and yield control back to the 
reactor.

When the reply is received, a different function gets control and 
you continue processing.

One way this can look, is to take your original program (section 1) 
and modify it to look more like the pseudo code below.

*** Original code, with modified class 3 ***
     class1():
         def check1(data):
             perform test
             if test failed:
                 return False
             if not class2.check2(data):
                 return False
             do_additional_stuff_1
             return True

     class2():
         def check2(data):
             perform test
             if test failed:
                 return False
             if not class3.check3(data):
                 return False
             do_additional_stuff_2
             return True

     class3():
         def check3(data):
             perform test
             if test failed:
                 return False

		*** This is where the flow breaks ***
             avatar.callRemote(check4,data).addCallback(afterCheck)

             if not class4.check4(data):
                 return False
             do_additional_stuff_3
             return True

         def afterCheck(result):
             return result

The simplest rework I can come up with for this is:

     class0():
        def check0(data):
             part1 = class1.check1(data)
		# Assuming part1 is either false or a deferred
             if part1:
                 part1.addCallback(afterCheck)
		else callLater(0, afterCheck, False)

         def afterCheck(result):
             # part 2
		# Do the stuff after check4
		# This would include the stuff that needs to be done
		# after the tests. So code from
                 # do_additional_stuff_x
		# can be called from here.
		finalResults = class1.do_additional_stuff_1(data)
             return finalResult

     class1():
         def check1(data):
             perform test
             if test failed:
                 return False
             if not class2.check2(data):
                 return False
		# Note, we can't get here so this code can go
             # return True

        def do_additional_stuff_1(data):
            class2.do_additional_stuff_2(data)
            more suff goes here.

     class2():
         def check2(data):
             perform test
             if test failed:
                 return False
             if not class3.check3(data):
                 return False
		# Note, we can't get here so this code can go
             # return True

        def do_additional_stuff_2(data):
            class3.do_additional_stuff_3(data)
            more suff goes here.

     class3():
         def check3(data):
             perform test
             if test failed:
                 return False

		*** This is where the flow breaks ***
             aDeferred =
avatar.callRemote(check4,data).addCallback(afterCheck)
             return aDeferred

        def do_additional_stuff_3(data):
            suff goes here.

**************************************

As you can see, it does chop things up a bit - and I'm still not 
sure that I've really captured what you're trying to do. I've just 
tried to match your existing class structure - which I believe to be 
sub-optimal in this context, given that I'm working from some very 
generic descriptions.

Specifically, I'm not sure if these "class1, class2 and class3"
definitions are truly classes, or if they're simply "organizational
usage groups". (I'm not judging one way or the other, I'm only 
working from what you've written and what assumptions I can make - 
this isn't meant to disparage your code, just that I don't feel like 
I have enough solid information to make a more accurate judgement.)

Hope this helps spark some ideas on your end.

Ken




From foom at fuhm.net  Wed Dec  7 02:00:05 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 07 Dec 2005 00:00:05 -0700
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EjtHZ-0005lA-00@pyramid.twistedmatrix.com>

KIND == 'create'
Bug summary
______________________
Since 2005-11-30 07:00:02.250000:
 Bugs opened: 11   Bugs closed: 2   Total open bugs: 493 (+9)
  Urgent: 2 (+1)
  Bug: 232 (+5)
  Feature: 176 (+3)
  Wish: 83 (+0)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[TRIAL] trial passes deferredGenerator test cases without running the test case  (8 hours ago)
       http://twistedmatrix.com/bugs/issue1353 opened by hagna

[CORE] FilePath sucks  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1348 opened by glyph

                    ==== Bug ====
[CORE] threadedselectreactor queue size  (5 days ago)
       http://twistedmatrix.com/bugs/issue1347 opened by Toby Dickenson

Separate reporter result handling from output  (5 days ago)
       http://twistedmatrix.com/bugs/issue1349 opened by jml

[CORE, WIN32] iocpreactor [Errno 10014] The system detected an invalid pointer address in attempting to use a pointer argument in a call  (6 days ago)
       http://twistedmatrix.com/bugs/issue1346 opened by ghazel

[CORE, WIN32] socket.error: (19, 'No such device')  (6 days ago)
       http://twistedmatrix.com/bugs/issue1345 opened by ghazel

[CORE] posixbase win32 waker problem  (6 days ago)
       http://twistedmatrix.com/bugs/issue1344 opened by antony

[CORE] readers and writers not removed properly from threadedselectreactor  (6 days ago)
       http://twistedmatrix.com/bugs/issue1343 opened by antony

                    ==== Feature ====
[TRIAL] [PATCH] HTML reporter for trial  (4 days ago)
       http://twistedmatrix.com/bugs/issue1350 opened by dialtone

log observer bridging to python logging facility  (4 days ago)
       http://twistedmatrix.com/bugs/issue1351 opened by ctheune

                    ==== Wish ====
twisted + dbus 0.60 howto  (yesterday)
       http://twistedmatrix.com/bugs/issue1352 opened by senko

Bugs Closed
______________________
                    ==== Urgent ====
[CORE] FilePath sucks  (5 days ago)
       http://twistedmatrix.com/bugs/issue1348 opened by glyph, closed by <unknown>

                    ==== Bug ====
twisted.web.html.output bug (IRC)  (1 week ago)
       http://twistedmatrix.com/bugs/issue1337 opened by kyle, closed by exarkun




From mwh at python.net  Wed Dec  7 04:41:39 2005
From: mwh at python.net (Michael Hudson)
Date: Wed, 07 Dec 2005 09:41:39 +0000
Subject: [Twisted-Python] Re: ftpClient.py, retrieveFile,
	and line ending issues
References: <OFF16B02C1.4046BB10-ON862570CF.0079B266-862570CF.007C9DC1@LocalDomain>
	<1133909453.9093.0.camel@localhost.localdomain>
Message-ID: <2m1x0p9rcc.fsf@starship.python.net>

Itamar Shtull-Trauring <itamar at itamarst.org> writes:

> On Tue, 2005-12-06 at 16:41 -0600, Keith.Gunderson at act.org wrote:
>
>> class FileWriterProtocol(Protocol):
>>     def __init__(self, filename):
>>         self.file = open(filename, 'w')
>
> You probably want open(filename, "wb"), which implies binary mode. On
> Unix this does nothing,

Actually, this is not quite true!

>>> import array
>>> open('foo', 'w').write(array.array('b', [0]))
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
TypeError: argument 1 must be string or read-only character buffer, not array.array
>>> open('foo', 'wb').write(array.array('b', [0]))

> on Windows it keeps Windows from screwing with your data line
> endings.

This is still true.

pedantically-ly y'rs
mwh

-- 
  If you're talking "useful", I'm not your bot.
                                            -- Tim Peters, 08 Nov 2001




From matusis at matusis.com  Wed Dec  7 05:04:26 2005
From: matusis at matusis.com (Alec Matusis)
Date: Wed, 7 Dec 2005 02:04:26 -0800
Subject: [Twisted-Python] twisted performance
Message-ID: <E1EjwA3-00085E-00@pyramid.twistedmatrix.com>

I am running Twisted 1.3 server with a fairly large number of clients.
The hardware is two 64 bit 3.0 GHz Xeons with HT, 4GB RAM, and it's on
2.6.11 kernel.
I am using poll reactor.
Currently, when the number of clients approaches 5000, the "top" shows 99%
CPU load for twistd process, the event loop slows down and weird racing
conditions show up. 
 
My clients basically do nothing: they connect and just sit there, sending
application-level keep-alives (null character string) to the server every 90
sec, which are echoed back. The connections/ disconnections for clients are
rare- about 4-5 per sec. So I am mostly dealing with 5000 clients in the
ESTABLISHED state. Very rarely (5x per second on average) one of the clients
gets a message from the server, but I am sure that this is not what keeps
the load so high (I slowed down message rates, and the CPU load did not
change).  
 
What are your thoughts on this performance? Is this load mainly due to
poll() overhead, polling a large number of file descriptors? 
I would love to try an epoll reactor, but as I understand, it's not yet
available?
 
Additionally, the process leaks about 100MB memory per day. I made the
garbage collector print out the number of objects traced by it every 30 min,
and this number stays more or less constant. When the memory held by the
process becomes larger, the event loop further slows down, and the
performance with the same number of clients degrades, as the memory
footprint increases. 
 
Thanks for any advice.
 
Alec.
 


 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051207/3b5880f5/attachment.htm 

From itamar at itamarst.org  Wed Dec  7 12:09:31 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 07 Dec 2005 12:09:31 -0500
Subject: [Twisted-Python] Re: ftpClient.py, retrieveFile, and line
	ending issues
In-Reply-To: <2m1x0p9rcc.fsf@starship.python.net>
References: <OFF16B02C1.4046BB10-ON862570CF.0079B266-862570CF.007C9DC1@LocalDomain>
	<1133909453.9093.0.camel@localhost.localdomain>
	<2m1x0p9rcc.fsf@starship.python.net>
Message-ID: <1133975371.9141.1.camel@localhost.localdomain>

On Wed, 2005-12-07 at 09:41 +0000, Michael Hudson wrote:

> >>> import array
> >>> open('foo', 'w').write(array.array('b', [0]))
> Traceback (most recent call last):
>   File "<stdin>", line 1, in ?
> TypeError: argument 1 must be string or read-only character buffer, not array.array
> >>> open('foo', 'wb').write(array.array('b', [0]))

OK then, "wb" does nothing on Unix modulo Python doing wacky shit ;)





From itamar at itamarst.org  Wed Dec  7 12:15:43 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 07 Dec 2005 12:15:43 -0500
Subject: [Twisted-Python] twisted performance
In-Reply-To: <E1EjwA3-00085E-00@pyramid.twistedmatrix.com>
References: <E1EjwA3-00085E-00@pyramid.twistedmatrix.com>
Message-ID: <1133975743.9141.7.camel@localhost.localdomain>

On Wed, 2005-12-07 at 02:04 -0800, Alec Matusis wrote:
> I am running Twisted 1.3 server with a fairly large number of clients.
> The hardware is two 64 bit 3.0 GHz Xeons with HT, 4GB RAM, and it's on
> 2.6.11 kernel.
> I am using poll reactor.
> Currently, when the number of clients approaches 5000, the "top" shows
> 99% CPU load for twistd process, the event loop slows down and weird
> racing conditions show up. 

Could you try this experiment with Twisted 2.1, ideally with the latest
version of Python? There were a number of algorithmic improvements since
1.3 (the one that comes to mind in this case is the scheduler.)

One way to discover if the OS-level poll() is the problem is to use
oprofile; you should be able to use it to see how much time is spent in
there. Before that however, you'd want to use the Python profiler to
figure out if there's any obvious hotspots.





From frank at chagford.com  Fri Dec  9 04:54:09 2005
From: frank at chagford.com (Frank Millman)
Date: Fri, 9 Dec 2005 11:54:09 +0200
Subject: [Twisted-Python] Question on deferreds
In-Reply-To: <17833893.1133702275128.JavaMail.root@web10.mail.adelphia.net>
Message-ID: <20051209094934.34FEC3F4366@fcserver.chagford.com>

Hi Ken

Many thanks for your reply. Sorry for not replying earlier - I seem to have
lost some mail due to ISP problems, and I just noticed your message in the
archive.

I have not included your response, as I want to come at this from another
angle. I confess that I am under pressure to 'get something working', even
if it is not the optimal solution, and this is all getting a bit
complicated.

I have been experimenting with using a socket client instead of Twisted, and
I got something up and running quite quickly. When I take a step back and
look at how I got it working, I feel that I should be able to apply the same
technique to Twisted, but I cannot get it to work. I will show both methods,
and perhaps someone can point me in the right direction.

The trick is that I have two threads running concurrently - a wxPython main
loop, and a subthread that monitors the socket. The socket loop looks like
this (simplified), subclassed from threading.Thread -

    def run(self):
        readable = [s.fileno()]
        error = []
        self.sendData = []
        while 1:
            if self.sendData:
                writable = [s.fileno()]
            else:
                writable = []
            r,w,e = select.select(readable,writable,error,0.01)
            if r:
                self.recvData = s.recv(1024)
            if w:
                s.send(self.sendData.pop(0))

    def checkData(self,item,value):  # this is called from the *wx* thread
        self.recvData = None
        self.sendData.append(cPickle.dumps((CHECK,item,value)))
        while self.recvData is None:
            sleep(0.01)
        return self.recvData

As you can see, checkData() blocks the wxPython thread until it receives a
response from the socket thread.

This is how I tried with Twisted -

    def checkData(self,item,value):  # this is called from the *wx* thread
        self.recvData = None
        self.callCheckData(item,value)
        while self.recvData is None:
            sleep(0.01)
        return self.recvData

    def callCheckData(self,item,value):
 
self.avatar.callRemote('checkData',item,value).addCallback(self.dataChecked)

    def dataChecked(self,answer):
        self.recvData = answer

It looks as if it should work, but the server method 'perspective_checkData'
never gets called.

Is it possible to do anything like this?

Thanks

Frank Millman




From p.mayers at imperial.ac.uk  Fri Dec  9 06:09:33 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 09 Dec 2005 11:09:33 +0000
Subject: [Twisted-Python] Question on deferreds
In-Reply-To: <20051209094934.34FEC3F4366@fcserver.chagford.com>
References: <20051209094934.34FEC3F4366@fcserver.chagford.com>
Message-ID: <439965ED.6050105@imperial.ac.uk>

Frank Millman wrote:

> I have been experimenting with using a socket client instead of Twisted, and
> I got something up and running quite quickly. When I take a step back and
> look at how I got it working, I feel that I should be able to apply the same
> technique to Twisted, but I cannot get it to work. I will show both methods,
> and perhaps someone can point me in the right direction.

No, of course you can't apply the same technique. A socket client is a 
blocking, synchronous bit of code. The ENTIRE POINT of Twisted is that 
all operations are non-blocking, and asynchronous. Basically you're 
going to find it hard going until that's clear (I know I did).

And sadly you're using wx, which is REALLY BAD and does not interact 
well with Twisted until recent developments (see below).

> 
> The trick is that I have two threads running concurrently - a wxPython main
> loop, and a subthread that monitors the socket. The socket loop looks like
> this (simplified), subclassed from threading.Thread -


> 
>     def run(self):
>         readable = [s.fileno()]
>         error = []
>         self.sendData = []
>         while 1:
>             if self.sendData:
>                 writable = [s.fileno()]
>             else:
>                 writable = []
>             r,w,e = select.select(readable,writable,error,0.01)
>             if r:
>                 self.recvData = s.recv(1024)
>             if w:
>                 s.send(self.sendData.pop(0))
> 
>     def checkData(self,item,value):  # this is called from the *wx* thread
>         self.recvData = None
>         self.sendData.append(cPickle.dumps((CHECK,item,value)))
>         while self.recvData is None:
>             sleep(0.01)
>         return self.recvData
> 
> As you can see, checkData() blocks the wxPython thread until it receives a
> response from the socket thread.

Fine. Odd, but fine (I'd use a semaphore as opposed to while True: sleep 
but whatever floats your boat)

> 
> This is how I tried with Twisted -
> 
>     def checkData(self,item,value):  # this is called from the *wx* thread
>         self.recvData = None
>         self.callCheckData(item,value)
>         while self.recvData is None:
>             sleep(0.01)
>         return self.recvData
> 

Bzzt! Error.

You cannot call twisted functions from a thread. See extensive (and 
repetitive) posts in the archives about "threadselectreactor AND wx" for 
about a million posts describing this.

Other than that, and the fact you've got no locking around mutable data 
structures, that code would probably work.

>     def callCheckData(self,item,value):
>  
> self.avatar.callRemote('checkData',item,value).addCallback(self.dataChecked)
> 
>     def dataChecked(self,answer):
>         self.recvData = answer
> 
> It looks as if it should work, but the server method 'perspective_checkData'
> never gets called.

It should not and does not work for the reason above.

I believe "threadselectreactor" is what you want for wx integation. 
Sadly, I've never used threadselectreactor or wx, so can't be more 
useful to you.

See:

http://bob.pythonmac.org/archives/2005/04/17/twisted-and-foreign-event-loops/
http://twistedmatrix.com/pipermail/twisted-python/2005-April/thread.html#10146



From jmbenski at micron.com  Fri Dec  9 11:03:52 2005
From: jmbenski at micron.com (jmbenski at micron.com)
Date: Fri, 9 Dec 2005 09:03:52 -0700
Subject: [Twisted-Python] RE: waiting on transport return
Message-ID: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE7@NTXBOIMBX15.micron.com>

I'm not trying to bump my question, but if someone could tell me if I'm just being stupid and missing something with this code or that it isn't possible to do what I need with a spawned process?  If I know it isn't possible, I can just continue down the path I am.  It's not too much of a pain, but it just feels...wrong.

 

Thanks,

 

Jon

 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of jmbenski
Sent: Tuesday, December 06, 2005 7:58 PM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] RE: waiting on transport return

 

            Ok, I need some help to write some code using deferred's the way they were meant, not the way I've bastardized them.

 

My framework...

 

I have a client that will connect to a server and MAINTAIN that connection.  I can't create a protocol factory.  The server and the client communicate commands through stdin and stdout.  I need to write my commands to the server and wait for the response in some cases.

 

I've setup a system that passes a deferred chain to my process protocol and once my process knows that the data it needs is received it will kick off the deferred chain that happens after that response.  This seems backwards.  From my reading and understanding of deferreds, they should bubble down and not have to be pushed up.  How do I handle the case of some protocol command kicking off the rest of a deferred chain or of passing back a deferred, so that I can add to it the things that need to run?

 

class SyncManagerProtocol(protocol.ProcessProtocol):

    def __init__(self ):

        self.dataStore = ""

        ##queue that holds the commands 

        self.cmdQueue = list()

        ##queue that holds the callback function to call once the call returns

        self.deferredQueue = list()

           

    def outReceived(self, data):

        

        if len(self.cmdQueue) > 0:

            ##take the data and shove it into our internal store

            self.dataStore += data

            ##determine what is good data

            cmd = self.cmdQueue[0]

            ##look for the command the is next in the queue.  grab all the return data

            ##between the command block.

            ##      syncCmd {

            ##      return data goes here

            ##      } syncCmd

            cmdBlock = r"%s {(?P<cmd>.*)} %s(?P<rest>.*)" % (cmd, cmd)

            errBlock = r"invalid {(?P<errMsg>.*)}"

    

            cmdMatch = re.compile( cmdBlock, re.S ).search( self.dataStore )           

 

            if cmdMatch:

                ##set the rest of the data to the dataStore.  This clears out the current contents

                ##but keeps any extra data that may be coming in from the next command

                self.dataStore = cmdMatch.group( "rest" )

                ##clean up this command

                self.commandComplete( cmdMatch.group("cmd").lstrip() )

    

    ##This is called if all the data we need has been returned.                   

    def commandComplete(self, cmdData):

        ##pop this command since we are done with it

        self.cmdQueue.pop(0)

        ##pop the deferred that matches this command

        deferred = self.deferredQueue.pop(0)        

        ##pass the results to the deferred

        deferred.callback( cmdData )

    

    ##interface to the process that sends a command to execute

    def sendCommand( self, cmd, args, deferred ):       

        ##store the command in the queue, so we can check it when we get data

        self.cmdQueue.append( cmd )

        ##store the deferred in the queue that we need to run when this command has been completed

        self.deferredQueue.append( deferred )

        ##write out command to the process

        cmd = cmd + " " + args + "\n"

        self.transport.write( cmd )

 

 

 

##   This code is my client interface class to the server that holds the processProtocol instance.   ##

 

 

#setup a command that will handle errors or good data

d = defer.Deferred().addCallback( self.handleThisCommand )

#run the calling function handler that will handle an error or returned data.  This will allow something like a GUI to process data that will now be available

d.addCallback( self.theRestOfTheCommands )

cmd = "some command goes here"

self.processProtocol.sendCommand( "syncCmd", cmd, d)

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051209/ffb371f3/attachment.htm 

From exarkun at divmod.com  Fri Dec  9 12:01:14 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 9 Dec 2005 12:01:14 -0500
Subject: [Twisted-Python] RE: waiting on transport return
In-Reply-To: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE7@NTXBOIMBX15.micron.com>
Message-ID: <20051209170114.1217.1040285964.divmod.quotient.4420@ohm>

On Fri, 9 Dec 2005 09:03:52 -0700, jmbenski at micron.com wrote:
>I'm not trying to bump my question, but if someone could tell me if I'm just being stupid and missing something with this code or that it isn't possible to do what I need with a spawned process?  If I know it isn't possible, I can just continue down the path I am.  It's not too much of a pain, but it just feels...wrong.
>

The code mostly seems good to me.  The only thing I might change is 
completely trivial: instead of passing a Deferred in to sendCommand, 
I'd have sendCommand be responsible for creating the Deferred and 
then return it, so your application code would look like this - 

  d = self.processprotocol.sendCommand("syncCmd", cmd)
  d.addCallback(self.handleTheCommand)
  d.addCallback(Self.theRestOfTheCommands)

I'm not sure from where your unhappyness with the version you posted 
stems, so I'm not sure what other comments to make.

Jean-Paul



From jmbenski at micron.com  Fri Dec  9 13:02:03 2005
From: jmbenski at micron.com (jmbenski at micron.com)
Date: Fri, 9 Dec 2005 11:02:03 -0700
Subject: [Twisted-Python] RE: waiting on transport return
Message-ID: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE8@NTXBOIMBX15.micron.com>

I guess I'm still trying to wrap my head around deferreds and how best to use them as they were intended.  The way that code works, I have to pass my deferred chain to sendCommand.  The protocol needs to store that deferred on its deferred stack, so that I can pass the results of the command back to the deferred function.

After looking at the code a bit more and your change below, I'm surprised that my code works.  Why isn't the reactor kicking off my deferreds that are stored in the queue?  My current logic is dependent on the protocol running the commandComplete function before the deferreds fire in the protocol's deferred queue.  

#Do some thing
#Send the command
self.processProtocol.sendCommand
#Do some more
#return control to the reactor

??Here the reactor should kick off my command and run any deferreds.

Am I just lucky that my server returns the response(commandComplete) before the deferreds in the queue fire?  The return of the data and the chain of deferreds are not linked in any way, which I guess is what my original question is.  How can my commandComplete return a deferred and kick off a logic chain?  How is it working now?


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Jean-Paul Calderone
Sent: Friday, December 09, 2005 10:01 AM
To: Twisted general discussion
Subject: RE: [Twisted-Python] RE: waiting on transport return

On Fri, 9 Dec 2005 09:03:52 -0700, jmbenski at micron.com wrote:
>I'm not trying to bump my question, but if someone could tell me if I'm just being stupid and missing something with this code or that it isn't possible to do what I need with a spawned process?  If I know it isn't possible, I can just continue down the path I am.  It's not too much of a pain, but it just feels...wrong.
>

The code mostly seems good to me.  The only thing I might change is 
completely trivial: instead of passing a Deferred in to sendCommand, 
I'd have sendCommand be responsible for creating the Deferred and 
then return it, so your application code would look like this - 

  d = self.processprotocol.sendCommand("syncCmd", cmd)
  d.addCallback(self.handleTheCommand)
  d.addCallback(Self.theRestOfTheCommands)

I'm not sure from where your unhappyness with the version you posted 
stems, so I'm not sure what other comments to make.

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From itamar at itamarst.org  Fri Dec  9 13:29:12 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 09 Dec 2005 13:29:12 -0500
Subject: [Twisted-Python] RE: waiting on transport return
In-Reply-To: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE8@NTXBOIMBX15.micron.com>
References: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE8@NTXBOIMBX15.micron.com>
Message-ID: <1134152953.11337.1.camel@localhost.localdomain>

On Fri, 2005-12-09 at 11:02 -0700, jmbenski at micron.com wrote:

> After looking at the code a bit more and your change below, I'm
> surprised that my code works.  Why isn't the reactor kicking off my
> deferreds that are stored in the queue? 

Deferreds have nothing to do with the reactor. So, doing
aDeferred.callback(result) or .errback(error) are the only way it gets a
value.





From jmbenski at micron.com  Fri Dec  9 14:08:16 2005
From: jmbenski at micron.com (jmbenski at micron.com)
Date: Fri, 9 Dec 2005 12:08:16 -0700
Subject: [Twisted-Python] RE: waiting on transport return
Message-ID: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE9@NTXBOIMBX15.micron.com>

Maybe I misspoke.  The way I understand it, is that deferreds do not get CPU time until the reactor resumes control.  Once the reactor gets control it allows events to happen, some of which may be deferreds.  I'm not sure what does the scheduling or what order deferred objects get control of the thread.  I had assumed that the reactor or whatever scheduler kicked off deferreds in the order that they were created.  Once that deferred chain got control of the main loop it would run to completion and the next event whether a deferred or something else would run.

In my case I need the deferred to wait until my commandComplete function runs.  Is the aDeferred.callback(result) the trigger that starts the deferred?  If that is the case, then I understand how my current code is working and I understand that there IS no scheduler for the deferreds.  Deferreds fire when a callback or errback function is called on them.  End of story and no magic done behind the scenes.  

Jon



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Itamar Shtull-Trauring
Sent: Friday, December 09, 2005 11:29 AM
To: Twisted general discussion
Subject: RE: [Twisted-Python] RE: waiting on transport return

On Fri, 2005-12-09 at 11:02 -0700, jmbenski at micron.com wrote:

> After looking at the code a bit more and your change below, I'm
> surprised that my code works.  Why isn't the reactor kicking off my
> deferreds that are stored in the queue? 

Deferreds have nothing to do with the reactor. So, doing
aDeferred.callback(result) or .errback(error) are the only way it gets a
value.



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From itamar at itamarst.org  Fri Dec  9 14:39:26 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 09 Dec 2005 14:39:26 -0500
Subject: [Twisted-Python] RE: waiting on transport return
In-Reply-To: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE9@NTXBOIMBX15.micron.com>
References: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE9@NTXBOIMBX15.micron.com>
Message-ID: <1134157167.11337.19.camel@localhost.localdomain>

On Fri, 2005-12-09 at 12:08 -0700, jmbenski at micron.com wrote:
> Maybe I misspoke.  The way I understand it, is that deferreds do not
> get CPU time until the reactor resumes control. 

No, reactor has nothing to do with Deferred's implementation.

> In my case I need the deferred to wait until my commandComplete
> function runs.  Is the aDeferred.callback(result) the trigger that
> starts the deferred?  If that is the case, then I understand how my
> current code is working and I understand that there IS no scheduler
> for the deferreds.  Deferreds fire when a callback or errback function
> is called on them.  End of story and no magic done behind the
> scenes.  

Yes, exactly.




From exarkun at divmod.com  Sat Dec 10 09:22:52 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 10 Dec 2005 09:22:52 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15316 - Reorganize
 davxml.py into a few files, still exposed as davxml.py.
In-Reply-To: <E1EkuJV-0001ZI-00@wolfwood>
Message-ID: <20051210142252.1217.2133164646.divmod.quotient.4704@ohm>

On Fri, 09 Dec 2005 19:18:17 -0700, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
>Author: wsanchez
>Date: Fri Dec  9 19:18:17 2005
>New Revision: 15316
>
>Added:
>   branches/wsanchez/dav/twisted/web2/dav/elements/
>   branches/wsanchez/dav/twisted/web2/dav/elements/__init__.py
>   branches/wsanchez/dav/twisted/web2/dav/elements/base.py
>      - copied, changed from r15315, branches/wsanchez/dav/twisted/web2/dav/davxml.py
>   branches/wsanchez/dav/twisted/web2/dav/elements/rfc2518.py
>      - copied, changed from r15315, branches/wsanchez/dav/twisted/web2/dav/davxml.py
>   branches/wsanchez/dav/twisted/web2/dav/elements/rfc3253.py
>      - copied, changed from r15315, branches/wsanchez/dav/twisted/web2/dav/davxml.py
>   branches/wsanchez/dav/twisted/web2/dav/elements/rfc3744.py
>      - copied, changed from r15315, branches/wsanchez/dav/twisted/web2/dav/davxml.py
>Modified:
>   branches/wsanchez/dav/twisted/web2/dav/davxml.py
>Log:
>Reorganize davxml.py into a few files, still exposed as davxml.py.
>davxml.py was getting way too big.  Now elements are in files split up by RFC.
>We no longer have to manage __all__.

These elements don't constitute part of the application-level API, right?

Jean-Paul



From ml.flex at gmail.com  Sun Dec 11 04:17:48 2005
From: ml.flex at gmail.com (Micky Latowicki)
Date: Sun, 11 Dec 2005 11:17:48 +0200
Subject: [Twisted-Python] pb references
In-Reply-To: <OFBB460905.BC9C9458-ON802570CB.006587B6-802570CB.0065FCC2@bnpparibas.com>
References: <OFBB460905.BC9C9458-ON802570CB.006587B6-802570CB.0065FCC2@bnpparibas.com>
Message-ID: <d27002d90512110117sa5d5966p@mail.gmail.com>

> However, I keep getting the following error: "Can't send references to
> brokers other than their own." and I can't see why.

To get this kind of error, you need to have 3 parties communicating. Let's call
them A, B, and C.

A creates a referenceable object, and sends it to B.
The perpsective broker on B's side, upon receiving what A sent it,
creates an object called RemoteReference. A RemoteReference is an
object that
is the local representative for the Referenceable that was sent from
A. This means that you call callRemote using this RemoteReference.

Now, B is apparently trying to send this RemoteReference to some third
party, C. This is not allowed by twisted, possibly because that would
often require forwarding messages from C to A through B, which can be
inefficient and unreliable.

In short: you seem to be sending an reference you got through pb to
another pb peer, which is not allowed.

I hope that helps.

From ml.flex at gmail.com  Sun Dec 11 04:22:10 2005
From: ml.flex at gmail.com (Micky Latowicki)
Date: Sun, 11 Dec 2005 11:22:10 +0200
Subject: [Twisted-Python] Non-terminating Process using gtkreactor2
In-Reply-To: <43901CD5.1010008@isotoma.com>
References: <43901CD5.1010008@isotoma.com>
Message-ID: <d27002d90512110122o69cea171x@mail.gmail.com>

>
> I admit I am at a loss as to how to debug this - can someone give me
> some pointers to diagnostics I can try to find out what the problem is?
>
In general, when your program hangs and you don't know what it's
waiting for, it can help to run it in a debugger like WinPDB, and
break the program when it's stuck. Then you can see the stack trace
for every thread, and it sometimes tells you a lot about what's
keeping the program waiting.

From khoa.coffee at gmail.com  Sun Dec 11 13:07:46 2005
From: khoa.coffee at gmail.com (Khoa Nguyen)
Date: Sun, 11 Dec 2005 18:07:46 -0000
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
Message-ID: <000001c5fe86$a5718440$6500a8c0@megisto.com>

Hi Xu,

How did you solve this problem? I face a similar issue and would appreciate if you post a working sample code

Thanks,
Khoa
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051211/67d51310/attachment.htm 

From andrea at cpushare.com  Sun Dec 11 17:04:30 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun, 11 Dec 2005 23:04:30 +0100
Subject: [Twisted-Python] twisted performance
In-Reply-To: <1133975743.9141.7.camel@localhost.localdomain>
References: <E1EjwA3-00085E-00@pyramid.twistedmatrix.com>
	<1133975743.9141.7.camel@localhost.localdomain>
Message-ID: <20051211220430.GF23266@opteron.random>

On Wed, Dec 07, 2005 at 12:15:43PM -0500, Itamar Shtull-Trauring wrote:
> One way to discover if the OS-level poll() is the problem is to use
> oprofile; you should be able to use it to see how much time is spent in

Checking the system time with top may be enough, when poll is the
bottleneck the percentage of system time increases significantly. I
think with >5000 clients epoll is needed.

The memleak I guess is going to be an application bug (like forgetting
to remove an entry from a factory list when a client abruptly
disconnects or similar). FWIW I see no leaks with my usages, but OTOH I
use latest SVN/CVS of everything.



From warner at lothar.com  Mon Dec 12 04:00:55 2005
From: warner at lothar.com (Brian Warner)
Date: Mon, 12 Dec 2005 01:00:55 -0800 (PST)
Subject: [Twisted-Python] pb references
Message-ID: <20051212.010055.51677276.warner@lothar.com>

Micky Latowicki <ml.flex at gmail.com> writes:

> Now, B is apparently trying to send this RemoteReference to some third
> party, C. This is not allowed by twisted, possibly because that would
> often require forwarding messages from C to A through B, which can be
> inefficient and unreliable.

In PB we call this "serializing third-party references". and it's illustrated
concisely by the "Granovetter Diagram"[1] as described by papers on
distributed computing[2]. I also sometimes call it the "Gift" pattern. Micky
has described the situtation accurately, but I wanted to add some detail on
the whole third-party reference thing, because it's changing in newpb. Some
of this is pretty verbose, probably more information than anybody but a newpb
implementor is likely to care about, but I figured I'll throw it out there so
people can know what's going on behind the scenes.

oldpb refuses to serialize third-party references because there's no
reference-identification infrastructure in place to let the recipient
establish a direct connection to the originator. Each RemoteReference is
really just a connection-local ID number (the CLID), like "4", wrapped by a
bunch of code that implements callRemote(). The CLID is only meaningful when
it gets looked up by the Broker on the other end of the wire that it's scoped
to. So if B wants to send his RemoteReference(A) to C, the only way to send
something that C will actually be able to use would be to create a proxy
object that provides a whole bunch of methods like the following:

 def remote_foo(self, *args, **kwargs):
     return self.refA.callRemote("foo", *args, **kwargs)

(with suitable cleverness, you could make this into a generic Proxy object,
such that you didn't have to manually duplicate this for every single method
that A can respond to. Note that even in newpb this pattern is useful, so
we'll figure out some way to make it convenient: Revocable Forwarders,
Logging Proxies, and restricted Facets are all design patterns implemented
with proxy objects like these).

The issue of course is speed and resource consumption. With this proxy in
place, B has to be involved in every message between A and C, even if he
doesn't want to, adding at least an extra round trip for every method call.
Worse yet, B has to carefully watch the arguments and return values of all
the methods flying between A and C to see if either end has included a new
RemoteReference to some local object. If so, B has to create a new proxy for
that object too. (this is one of the obligations of a "Membrane", and is a
nuisance that would be nice to avoid).

Finally, one of the design goals of oldpb has been reasonable security: make
it slightly harder to accidentally leak information or authority. To this
end, objects must be declared pb.Referenceable to be remotely callable,
instances must inherit from pb.Copyable to be transferred across the wire,
and RemoteReferences cannot be sent to third parties. oldpb forces you to
make certain designations explicit. For both these reasons (and because it's
just too much of a hassle to implement), oldpb takes the easy way out and
punts, by disallowing third-party references and forcing the user to
implement a proxy if that's what they really want.

NEWPB

In newpb, things are much better. Assuming you make your Tub accessible to
the outside world (by telling it to listen on a port, and by telling it what
hostname+portno it's listening on), each Referenceable you publish gets a
PB-URL, which is then accessible from any other Tub, anywhere. (the return
value from tub.registerReference() is this PB-URL). To "gift" a
RemoteReference to a third party, you simply include the RemoteReference as
an argument in a callRemote (or return it from a remotely-invoked method),
and PB will handle the rest for you. This works by passing a special sequence
that includes the PB-URL of the target object, which the receiving side then
submits to tub.getReference() to obtain their own RemoteReference before
invoking the target method.

If you don't want to pass live references around, you can turn any
RemoteReference into a "SturdyRef" (which is like an object form of a PB-URL)
with rref.getSturdyRef(), and then pass *that*, since SturdyRefs are
pb.Copyable . You can also take a SturdyRef and pass it "live" to a remote
Tub, by doing something like:

 rref.callRemote("introduce", sturdy.asLiveRef())

whereupon the recipient's remote_introduce() method will be invoked with a
live RemoteReference to the target of the sturdyref.

The API is still up in the air, but my plan is for every RemoteReference you
pass over a wire to be given an unguessable PB-URL so that it is eligible for
being sent as a gift to a third-party Tub. (one possibility is that you have
to explicitly publish the ones that you want to be giftable.. there might be
a switch to turn this sort of thing on or off, it's a tradeoff of memory
consumption versus convenience). Another design question has to do with
object lifetime: in the current implementation, when B sends rref(A) to C, B
makes sure to keep it's handle on A alive until C confirms it has acquired
its own. This improves the chances that C will be able to acquire a live
reference, but it also allows a malicious C to force B to keep that rref
alive forever, wasting memory. The alternative is to just tell C to take
their chances, and maybe they'll wind up with a working RemoteReference, and
maybe they'll be unlucky and A will have garbage-collected that object by the
time they finish trying to acquire their own. Distributed garbage collection
is very tricky.

The object-lifetime design issues show up elsewhere too. Should an object,
once it gets sent over the wire (any wire), stay alive forever, just in case
somebody wrote down its URL and might some day come calling for it? Or should
it be allowed to vanish as soon as the last live reference is released? In
the current implementation, anything you submit to tub.registerReference()
will stay alive forever (where "forever" is equal to the lifetime of the
Tub), whereas objects that cross the wire in method invocations get
reference-counted and released when there are no more live references to
them. Correspondingly, objects submitted to tub.registerReference() get
globally-reachable names (PB-URLs), and are therefore eligible for gifting,
whereas objects merely crossing the wire do not (and cannot be gifted). The
latter needs to change, since *all* objects should be giftable, but it's
quite possible that the URL->object table will use weakrefs so that the
giftable/non-giftable distinction can be orthogonal to the
long-lived/ephemeral distinction. Tyler's trying to convince me to let
objects stay alive "forever", get rid of garbage collection and distributed
reference counting, and just use the Tub lifetime to reclaim memory or block
access to old objects. I'm not sure yet, though, it may become a flag you set
on the Tub.

One of the issues with allowing Gifts is that it opens up the possibility
that methods will be invoked out-of-order. In the present implementation, if
you do:

  a.callRemote("introduce", gift_rref_to_B)
  a.callRemote("second", 1, 2, 3)

then remote_second() will probably be invoked *first*, because the potential
call to remote_introduce() is held up waiting for gift_rref_to_B to be turned
into a real RemoteReference (which must wait for connection negotiation,
etc). I'm thinking that this will be changed (by queueing all method
invocations and stalling remote_second until remote_introduce has been
invoked), but I might add a flag that lets you choose between the two
behaviors. Setting the flag one way lets methods be invoked as quickly as
possible, setting it the other way forces them to be called in-order, even if
that adds arbitrarily long delays to deal with Gifts. I might add a flag
which would disable Gifts altogether, since they're a moderately advanced
feature and it might be confusing to have them work so transparently.

Finally, there's the complex issue of what kind of ordering guarantees to
make regarding methods invoked on gifted references. The E documents[3]
describe a situation where you'd like to make certain promises about the
relative ordering of methods invoked (by you) on some reference, versus
methods invoked (on that same reference) by someone else you've just given
that reference to. E (or VatTP, to be precise) suggests a funny kind of proxy
behavior called the WormholeOp[4] to provide these promises. At the moment,
newpb just punts on the issue, and only makes claims about the relative
ordering of messages sent on a *single connection*. If you want to make sure
that messages sent to or from different parties happen in some particular
order, you must wait for the first to complete before allowing the second to
occur. This might be improved in the future (once I understand the issue
better, for starters), but for now newpb's ordering guarantees may not be as
thorough as certain environments might prefer. (I *think* the only practical
consequence is that certain kinds of promise-pipelining optimizations cannot
be made, occasionally increasing the number of round trips, but really I
don't understand enough yet, and neither of the two people on the planet who
*do* understand enough have been able to explain it to me in a way that I can
get my head around).

Also, the proxy object described above (as the only way to accomplish
third-party references in oldpb) is actually quite useful, so newpb will
eventually make it easy and cheap to build them. One pattern is the Revocable
Forwarder, where you want to extend your authority to somebody else, but you
want to be able to cut them off if you change your mind. This is as simple as
an object that does the same sort of "def remote_foo(): return
self.refA.callRemote('foo')" thing as above, but adds an extra method
(exposed in a separate capability) that does 'del self.refA' to turn off all
forwarding at once. Another pattern is the restrictive Facet, which forwards
access to some (but not all) methods. Either of things might add logging,
where the caller doesn't notice anything special, but somebody else gets a
record of each method invoked.


Anyway, I just wanted to do a bit of a braindump on where third-party
references are going in newpb. The summary is that using them is as easy as
you think it ought to be. "make simple things simple", and all that :).

cheers,
 -Brian



[1]: "Ode to the Granovetter Diagram"
     http://www.erights.org/elib/capability/ode/index.html
[2]: pretty much everything at http://www.erights.org/
[3]: http://www.erights.org/elib/concurrency/partial-order.html
[4]: http://www.erights.org/elib/distrib/captp/WormholeOp.html



From william.lewis at uk.bnpparibas.com  Mon Dec 12 06:32:10 2005
From: william.lewis at uk.bnpparibas.com (william.lewis at uk.bnpparibas.com)
Date: Mon, 12 Dec 2005 11:32:10 +0000
Subject: [Twisted-Python] Re: pb references
In-Reply-To: <E1ElWQV-0007g8-02@pyramid.twistedmatrix.com>
Message-ID: <OFE0A4A2D5.459055F5-ON802570D5.0037FF88-802570D5.003F5ECA@bnpparibas.com>

> In short: you seem to be sending an reference you got through pb to
> another pb peer, which is not allowed.
>
> I hope that helps.

Yes, that was indeed the problem. My server was taking a root object
from a client and attempting to pass it on to another server as an
argument to a remote method. Thanks.

I now have a further question:

When my server takes the root object from a client it keeps and uses that 
object,
later on, to call remote methods on the client (as described in the docs).
What I am not sure about is what happens to the root object if the TCP/IP
connection goes down between the server and client.

Presumably, nothing will happen until I try to call a remote method on the
client?

In which case, how can the server attempt to reconnect to the client if it
only has the original root object given to it by the client and the 
connection
has temporarily gone down? Or is the client responsible for keeping the 
connection
open?

Thanks

William Lewis







This message and any attachments (the "message") is 
intended solely for the addressees and is confidential. 
If you receive this message in error, please delete it and
immediately notify the sender. Any use not in accord with
its purpose, any dissemination or disclosure, either whole
or partial, is prohibited except formal approval. The internet
can not guarantee the integrity of this message.
BNP PARIBAS (and its subsidiaries) shall (will) not
therefore be liable for the message if modified. 

**********************************************************************************************

BNP Paribas Private Bank London Branch is authorised
by CECEI & AMF and is regulated by the Financial Services
Authority for the conduct of its investment business in
the United Kingdom.

BNP Paribas Securities Services London Branch is authorised 
by CECEI & AMF and is regulated by the Financial Services 
Authority for the conduct of its investment business in 
the United Kingdom.
  
BNP Paribas Fund Services UK Limited is authorised and 
regulated by the Financial Services Authority

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051212/bfe6e55d/attachment.htm 

From olivier.guilloux at gmail.com  Mon Dec 12 10:04:07 2005
From: olivier.guilloux at gmail.com (Kaladan)
Date: Mon, 12 Dec 2005 16:04:07 +0100
Subject: [Twisted-Python] How can I keep data integrity in multiple threads
	environment
Message-ID: <7fb2650a0512120704x5b9f3b02p@mail.gmail.com>

Hello,

I am new to twisted and I have a few questions: I have implemented a
TCPServer
and the associated Factory, which manages data and dispatches treatments
(According to the tutorial it's not the best solution but actually this is
not
the point ;) )

All of the treatments run in threads and thus use shared data. The allData
dictionnary is critical since it can be used by multiple threads. How can I
keep
the allData integrity ? Does Twisted core provide such facilites or do I
have to use semaphore or other stuff ?


class GestionnaireXXX(protocol.Protocol)
    def dataReceived(self, data):
        self.factory.dispatch(data)

class GestionnaireXXXFactory(protocol.ServerFactory):
    def __init__(self):
        self.allData = {}
        self.initData()
        self._dispatcher = {
            1: self.alert,
            4: self.create,
        }
    def initData(self):
        if os.path.isfile(TEMP)
            self.allData = aot.unjellyFromSource(file(TEMP, 'r'))
    def dispatch(self, data):
        splitedData = data.split('\n')
        method = self._dispatcher.get(len(splitedData), self.doNothing)
        reactor.runInThread(method, splitedData)

    def create(self, *data):
        # Some treatments on allData
        ...
        aot.jellyToSource(file(TEMP, 'w'))

    def alert(self, *unused):
        # XXX
        sem = DeferredSemaphore()
        sem.acquire()
        allDataCopy = self.allData.copy()
        self.allData.clear()
        sem.release()
        # End XXX
        # some long treatments on allDataCopy
        ...

Thank's,

--
Olivier Guilloux
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051212/94f8a4b6/attachment.htm 

From p.mayers at imperial.ac.uk  Mon Dec 12 12:15:17 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 12 Dec 2005 17:15:17 +0000
Subject: [Twisted-Python] How can I keep data integrity in multiple threads
	environment
In-Reply-To: <7fb2650a0512120704x5b9f3b02p@mail.gmail.com>
References: <7fb2650a0512120704x5b9f3b02p@mail.gmail.com>
Message-ID: <439DB025.5080607@imperial.ac.uk>

Kaladan wrote:
> Hello,
> 
> I am new to twisted and I have a few questions: I have implemented a
> TCPServer
> and the associated Factory, which manages data and dispatches treatments
> (According to the tutorial it's not the best solution but actually this is
> not
> the point ;) )
> 
> All of the treatments run in threads and thus use shared data. The allData
> dictionnary is critical since it can be used by multiple threads. How can I
> keep
> the allData integrity ? Does Twisted core provide such facilites or do I
> have to use semaphore or other stuff ?

You have to do it yourself. Twisted is not thread-safe and does not 
provide any thread support beyond the two most basic methods to talk to 
threads: deferToThread/callInThread and callFromThread



From itamar at itamarst.org  Mon Dec 12 12:35:53 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 12 Dec 2005 12:35:53 -0500
Subject: [Twisted-Python] How can I keep data integrity in multiple
	threads environment
In-Reply-To: <7fb2650a0512120704x5b9f3b02p@mail.gmail.com>
References: <7fb2650a0512120704x5b9f3b02p@mail.gmail.com>
Message-ID: <1134408954.9006.3.camel@localhost.localdomain>

On Mon, 2005-12-12 at 16:04 +0100, Kaladan wrote:

> All of the treatments run in threads and thus use shared data. The
> allData
> dictionnary is critical since it can be used by multiple threads. How
> can I keep 
> the allData integrity ? Does Twisted core provide such facilites or do
> I
> have to use semaphore or other stuff ?

"Don't use threads" is a good way to start; unless you're calling into
blocking C libraries using threads won't help you much. Even if you are
(e.g. using Numeric, or DB-API or something), you can still avoid shared
data structures in most cases:

Get data from shared structure in the main (i.e. Twisted's) thread, hand
it to thread that does self-contained operation on data. Thread then
does callFromThread(self.putBackInSharedDataStructure, result), which
will run in the Twisted thread.





From a.poisel at acat.cc  Tue Dec 13 18:04:46 2005
From: a.poisel at acat.cc (Andreas Poisel)
Date: Wed, 14 Dec 2005 00:04:46 +0100
Subject: [Twisted-Python] threading issues with DB connection pooling and
	ReconnectingClientFactory
Message-ID: <20051213230446.GA29506@flake>

Hi Twisted Experts,

in my application I use ReconnectingClientFactory to handle a TCP
connection which is supposed to be permanent.  The server side (which is
not a twisted application) is very fragile and closes the connection
frequently.

The client has to do database queries on a regular basis and talk to the
server depending on the query results.  The client runs into a problem
with the following application flow:

 - Client and server are up and running, the database is queried
   frequently, server talks to client and vice versa, everything is
   fine.

 - The server closes the connection and the client stops it's database
   queries.

 - The server is reachable again, the client reconnects.

 - A database query on the client side is performed and we find
   something we want to transmit to the server.  But we fail because the
   transport object we use after our database query is not connected
   (transport.connected == 0 and transport.disconnected == 1).


These are my conclusions (maybe that's garbage):

The reconnection of the client works perfectly for the main reactor
thread.  But when we try a database query, we get a cached thread which
doesn't have a working transport object anymore.  Some experiments with
protocol and transport object id()s seem to second this assumption.

I've some ideas how to solve this problem:

 - Empty the thread pool after reconnecting and use "fresh threads" with
   valid transport objects.  I can't find a hint how to do this.

 - Pass a valid transport object to the thread which just did the
   database query.  I'm not sure how to do this properly.

 - Pass the query result back to the main thread.  Hmmm...


I would very much appreciate some hints on how to handle this problem
properly.

Thank you very much!
-- 
Regards, Andi



From andrew-twisted at puzzling.org  Tue Dec 13 19:47:12 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 14 Dec 2005 11:47:12 +1100
Subject: [Twisted-Python] threading issues with DB connection pooling and
	ReconnectingClientFactory
In-Reply-To: <20051213230446.GA29506@flake>
References: <20051213230446.GA29506@flake>
Message-ID: <20051214004712.GL4771@home.puzzling.org>

On Wed, Dec 14, 2005 at 12:04:46AM +0100, Andreas Poisel wrote:
[...]
> 
> I've some ideas how to solve this problem:
> 
[...]
>  - Pass a valid transport object to the thread which just did the
>    database query.  I'm not sure how to do this properly.

This implies to me that the real problem is that you are treating Twisted as if
it's thread-safe, when it explicitly isn't (except in very clearly defined,
narrow places, e.g. reactor.callFromThread).  See
http://twistedmatrix.com/projects/core/documentation/howto/threading.html

If you are using any Twisted objects, such as transports, in a thread, you are
doing something wrong.

>  - Pass the query result back to the main thread.  Hmmm...

This would be the way to do it.  You probably want to do something like 
"reactor.callFromThread(thing.gotResult, result)" in your thread.  Actually, you
probably want to fire a deferred with the result, which is easy to do:

    from twisted.internet.threads import deferToThread
    def queryDB(...):
        ...

    # run queryDB in a thread
    deferred = deferToThread(queryDB)

    # call gotResult when done
    deferred.addCallback(gotResult)

The twisted.enterprise.adbapi module works much like this.

-Andrew.




From foom at fuhm.net  Wed Dec 14 02:00:05 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 14 Dec 2005 00:00:05 -0700
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EmQcP-0003Jt-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-12-07 07:00:01.870000:
 Bugs opened: 9   Bugs closed: 2   Total open bugs: 500 (+7)
  Urgent: 1 (-1)
  Bug: 238 (+6)
  Feature: 178 (+2)
  Wish: 83 (+0)

New / Reopened Bugs
______________________
                    ==== Bug ====
[CGI, WEB2, WSGI] createCGIEnvironment fails to include ;parameters in PATH_INFO  (yesterday)
       http://twistedmatrix.com/bugs/issue1361 opened by cce

[BACKPORT, WEB2] twisted.web2.stream and wsgi  (yesterday)
       http://twistedmatrix.com/bugs/issue1362 opened by mkerrin

[TRIAL] [PATCH] Traceback running a test with broken setUp method  (2 days ago)
       http://twistedmatrix.com/bugs/issue1359 opened by headly

[TRIAL] Clean up Trial's Runner and Loader concepts  (5 days ago)
       http://twistedmatrix.com/bugs/issue1355 opened by jml

[WEB] [PATCH] microdom is not case sensitive when doing laterClosers  (2 days ago)
       http://twistedmatrix.com/bugs/issue1358 opened by Tv

[CORE] [PATCH] t.p.usage error messages mangle option case  (6 days ago)
       http://twistedmatrix.com/bugs/issue1354 opened by Tv

                    ==== Feature ====
[MAIL] IMessageDelivery.validateTo API simplification  (yesterday)
       http://twistedmatrix.com/bugs/issue1360 opened by Tv

sendFile handy API for FTPClient  (3 days ago)
       http://twistedmatrix.com/bugs/issue1357 opened by dialtone

                    ==== Wish ====
[MAIL] Twisted Mail/OS X performance problem  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1356 opened by exarkun

Bugs Closed
______________________
                    ==== Urgent ====
[TRIAL] trial loads test methods incorrectly  (7 days ago)
       http://twistedmatrix.com/bugs/issue1353 opened by hagna, closed by jml

                    ==== Wish ====
[MAIL] Twisted Mail/OS X performance problem  (3 days ago)
       http://twistedmatrix.com/bugs/issue1356 opened by exarkun, closed by exarkun




From jsbenson at bensonsystems.com  Wed Dec 14 03:40:47 2005
From: jsbenson at bensonsystems.com (John Benson)
Date: Wed, 14 Dec 2005 00:40:47 -0800
Subject: [Twisted-Python] Rails? Twisted versus J2EE? Metaprogramming as
	self-modifying code?
Message-ID: <439FDA8F.1010302@bensonsystems.com>

Hi, I did some Python and Twisted two years ago got distracted, picked 
up some IBM WebSphere certifications, got turned off by the verbosity of 
J2EE and suspected that there was a cleaner way to do it.

I just got through Bruce Tate's O'Reilly book /Beyond Java/ and am 
hearing the siren call of Ruby on Rails. Tate is unwilling to champion 
Ruby over Python or vice versa, but waxes poetic about Rails.

I know there is a Rail-like Python project (Subway?) but I'd like to 
know if there is a Rail-alike that works with Twisted.

Also, I'd like to hear about the advantages of J2EE over Twisted (if 
any), especially in the scalability and MQ Series connectivity areas. 
The little project I did with Python and Twisted was a joy and would 
easily have taken 4X the time and effort in a compiled environment. Now 
that I've seen what J2EE tries to do, I'm curious to see how Twisted 
stacks up against the J2EE specialties.

Comparisons between Python and Ruby will also interest, especially 
regarding ease of metaprogramming since this seems to be the arena in 
which the Next Big Thing will hit software practice with aspect-oriented 
programming, dependency injection and mixins. Kind of like when COBOL 
programmers had to learn pointers to deal with C, or when C programmers 
had to learn about objects to deal with C++ and/or Java.

By the way, I remember the campaign to stamp out self-modifying code 
back during the structured programming wars of the 1970's. Although the 
benefits of metaprogramming are attractive, isn't metaprogramming just 
self-modifying code at the object level? If so, should we just say no? 
If not, what has changed to make it reasonable now?




From p.mayers at imperial.ac.uk  Wed Dec 14 05:54:33 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 14 Dec 2005 10:54:33 +0000
Subject: [Twisted-Python] Rails? Twisted versus J2EE? Metaprogramming
	as	self-modifying code?
In-Reply-To: <439FDA8F.1010302@bensonsystems.com>
References: <439FDA8F.1010302@bensonsystems.com>
Message-ID: <439FF9E9.6070101@imperial.ac.uk>

John Benson wrote:
> Hi, I did some Python and Twisted two years ago got distracted, picked 
> up some IBM WebSphere certifications, got turned off by the verbosity of 
> J2EE and suspected that there was a cleaner way to do it.
> 
> I just got through Bruce Tate's O'Reilly book /Beyond Java/ and am 
> hearing the siren call of Ruby on Rails. Tate is unwilling to champion 
> Ruby over Python or vice versa, but waxes poetic about Rails.
> 
> I know there is a Rail-like Python project (Subway?) but I'd like to 
> know if there is a Rail-alike that works with Twisted.

Wrong place to ask really - twisted-web would be more appropriate.

Generally it's harder to be as "simple" as some of the Rails (mass 
produced) clones with async code, that being the entire point of Twisted.

But Divmod's Mantissa seems to be getting there - see innumerable recent 
posts by the guys here:

http://www.livejournal.com/users/jcalderone/
http://www.livejournal.com/users/glyf/

> 
> Also, I'd like to hear about the advantages of J2EE over Twisted (if 
> any), especially in the scalability and MQ Series connectivity areas.

I care about nothing below this line in the email, so will let others 
comment! :o)



From a.poisel at acat.cc  Wed Dec 14 06:33:10 2005
From: a.poisel at acat.cc (Andreas Poisel)
Date: Wed, 14 Dec 2005 12:33:10 +0100
Subject: [Twisted-Python] threading issues with DB connection pooling and
	ReconnectingClientFactory
In-Reply-To: <20051214004712.GL4771@home.puzzling.org>
References: <20051213230446.GA29506@flake>
	<20051214004712.GL4771@home.puzzling.org>
Message-ID: <20051214113310.GG29506@flake>

Andrew,

thank you for your comments.

* Andrew Bennetts <andrew-twisted at puzzling.org> [051214 02:00]:

> If you are using any Twisted objects, such as transports, in a thread, you are
> doing something wrong.

I'm really sorry, my assumptions were totally wrong.

>     # run queryDB in a thread
>     deferred = deferToThread(queryDB)

I'm using dbapi to query the database and now I understand that I'm back
in the main thread when the query results are available.

Now I think my problem (no valid transport object after reconnect) has
nothing to do with threads.

I'm using task.LoopingCall() to query the database frequently.  After
reconnecting to the server, the protocol object which is in charge for
the looping calls to the database does not reconnect to the server
automatically.  I think I have to stop() and start() the looping calls
after reconnecting to get a working transport again.

> The twisted.enterprise.adbapi module works much like this.

Sorry for wasting your time but you nevertheless helped me "getting"
some aspects of twisted.

-- 
Regards, Andi



From xuryans at gmail.com  Wed Dec 14 20:17:02 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Thu, 15 Dec 2005 09:17:02 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <000001c5fe86$a5718440$6500a8c0@megisto.com>
References: <000001c5fe86$a5718440$6500a8c0@megisto.com>
Message-ID: <f6c194d30512141717w36e302b1q73533e6ff8fde4a9@mail.gmail.com>

hi, I use a pool for connect task, and recall it in some seconds. I
write some simple codes below to explain my idea, but i have not run
it, so just read it do not run it:)

from Queue import Queue

TaskQueue = Queue()

def sendTcp(addr, port, message):
    global TaskQueue
    TaskQueue.put((addr, port, message))

def __send():
    global TaskQueue
    while not TaskQueue.empty():
         addr, port, message = TaskQueue.pop()
         reactor.connectTCP(addr, port, FooFactory(message))

    reactor.callLater(15, __send)

if __name__ == "__main__":
    reactor.callLater(15, __send)
    reactor.run()

I'm appreciate to listen any advice
On 12/12/05, Khoa Nguyen <khoa.coffee at gmail.com> wrote:
>
> Hi Xu,
>
> How did you solve this problem? I face a similar issue and would appreciate
> if you post a working sample code
>
> Thanks,
> Khoa
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>


--
Xu Ryans



From olivier.guilloux at gmail.com  Thu Dec 15 11:23:23 2005
From: olivier.guilloux at gmail.com (Kaladan)
Date: Thu, 15 Dec 2005 17:23:23 +0100
Subject: [Twisted-Python] how to run a twisted daemon without tcpserver
Message-ID: <7fb2650a0512150823i3bf67c04t@mail.gmail.com>

Can I run a twisted daemon (twistd) without TCPServer, basically I want to
run
a reactor within an application, something like :
application = service.Application('myApp', uid=505, gid=506)
reactor.run(application)

Thank's
--
Olivier Guilloux
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051215/b24341a5/attachment.htm 

From jim at zope.com  Thu Dec 15 16:22:21 2005
From: jim at zope.com (Jim Fulton)
Date: Thu, 15 Dec 2005 16:22:21 -0500
Subject: [Twisted-Python] WSGI Thread-management strategy
Message-ID: <43A1DE8D.8030604@zope.com>

The strategy used by twisted WSGI, as I understand it, doesn't meet
our needs. Currently, a thread is created for each request.  The total
number of threads is throttled, I gather using a general Twisted
thread limit.  WSGI applications are called as soon as input headers
have been received completely. An application may be called before all
body input is received.  We need application calls to be delayed until
all request input has been received,

In an application like Zope, application threads are expensive.  There
are application resources, such as database connections and caches
needed by the application threads.  To limit resource consumption, we
have to limit the number of application threads.  Because the number
of threads is limited, application threads are scarce and thus
valuable resources that need to be used very efficiently.  In
particular, we don't want to tie up an application thread waiting for
request body input.

I propose that the default thread-management strategy should be to delay
calling an application until all request input has been received. If
this isn't the default, then there should at least be an option to get
this behavior.  (Of course, the buffering strategy needs to be clever
enough to switch to a file when the input gets over some size.)

Thoughts?

Jim

-- 
Jim Fulton           mailto:jim at zope.com       Python Powered!
CTO                  (540) 361-1714            http://www.python.org
Zope Corporation     http://www.zope.com       http://www.zope.org



From jim at zope.com  Thu Dec 15 17:15:42 2005
From: jim at zope.com (Jim Fulton)
Date: Thu, 15 Dec 2005 17:15:42 -0500
Subject: [Twisted-Python] WSGI Thread-management strategy
In-Reply-To: <43A1DE8D.8030604@zope.com>
References: <43A1DE8D.8030604@zope.com>
Message-ID: <43A1EB0E.8070305@zope.com>

Jim Fulton wrote:
...
> In an application like Zope, application threads are expensive.

Of course, threads are expensive for all applications, to some degree.
Typically, they require at least a meg of stack space. No big deal
of you only have a few, but quire a problem if you had to have one
for each acrive request on a busy server.  But, of course, y'all
know this. That's why you use Twisted. :)

Jim

-- 
Jim Fulton           mailto:jim at zope.com       Python Powered!
CTO                  (540) 361-1714            http://www.python.org
Zope Corporation     http://www.zope.com       http://www.zope.org



From foom at fuhm.net  Fri Dec 16 12:14:34 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 16 Dec 2005 12:14:34 -0500
Subject: [Twisted-Python] WSGI Thread-management strategy
In-Reply-To: <43A1DE8D.8030604@zope.com>
References: <43A1DE8D.8030604@zope.com>
Message-ID: <B50EC6B5-6B3D-4254-9FC5-AD0CE32CC568@fuhm.net>

(BTW, the correct mailing list for twisted webbish stuff is twisted- 
web at twistedmatrix.com)
On Dec 15, 2005, at 4:22 PM, Jim Fulton wrote:

> The strategy used by twisted WSGI, as I understand it, doesn't meet
> our needs. Currently, a thread is created for each request.  The total
> number of threads is throttled, I gather using a general Twisted
> thread limit.  WSGI applications are called as soon as input headers
> have been received completely. An application may be called before all
> body input is received.  We need application calls to be delayed until
> all request input has been received,
>
> [...]
>
> I propose that the default thread-management strategy should be to  
> delay
> calling an application until all request input has been received. If
> this isn't the default, then there should at least be an option to get
> this behavior.  (Of course, the buffering strategy needs to be clever
> enough to switch to a file when the input gets over some size.)

Sounds sensible, and is doable external to the WSGI wrapper. Here's a  
little bit I whipped up. (works on the 2.1.x branch and head). Could  
be smarter, by starting out the buffer in memory and switching to a  
file if necessary. Also shows off a couple of minor bugs I need to  
fix. :)

def simple_wsgi_app(environ, start_response):
     print "Starting wsgi app"
     start_response("200 OK", [('Content-type','text/html;  
charset=ISO-8859-1')])
     data = environ['wsgi.input'].read()
     return ['<pre>', data, '</pre>']


class Prebuffer(resource.WrapperResource):
     def hook(self, ctx):
         req = iweb.IRequest(ctx)
         temp = tempfile.TemporaryFile()
         def done(_):
             temp.seek(0)
             # Replace the request's stream object with the tempfile
             req.stream = stream.FileStream(temp)
             # Hm, this shouldn't be required:
             req.stream.doStartReading = None
         return stream.readStream(req.stream, temp.write).addCallback 
(done)

     # Oops, fix missing () in lambda in WrapperResource
     def locateChild(self, ctx, segments):
         x = self.hook(ctx)
         if x is not None:
             return x.addCallback(lambda data: (self.res, segments))
         return self.res, segments

if __name__ == '__builtin__':
     from twisted.application import service, strports
     from twisted.web2 import server, channel

     res = Prebuffer(wsgi.WSGIResource(simple_wsgi_app))

     site = server.Site(res)
     application = service.Application("demo")

     s = strports.service('tcp:8080', channel.HTTPFactory(site))
     s.setServiceParent(application)




From jim at zope.com  Fri Dec 16 12:20:59 2005
From: jim at zope.com (Jim Fulton)
Date: Fri, 16 Dec 2005 12:20:59 -0500
Subject: [Twisted-Python] WSGI Thread-management strategy
In-Reply-To: <B50EC6B5-6B3D-4254-9FC5-AD0CE32CC568@fuhm.net>
References: <43A1DE8D.8030604@zope.com>
	<B50EC6B5-6B3D-4254-9FC5-AD0CE32CC568@fuhm.net>
Message-ID: <43A2F77B.80305@zope.com>

James Y Knight wrote:
> (BTW, the correct mailing list for twisted webbish stuff is twisted- 
> web at twistedmatrix.com)

Oops. OK, I'll reply there. :)

Jim

-- 
Jim Fulton           mailto:jim at zope.com       Python Powered!
CTO                  (540) 361-1714            http://www.python.org
Zope Corporation     http://www.zope.com       http://www.zope.org



From jcea at argo.es  Sat Dec 17 17:14:10 2005
From: jcea at argo.es (Jesus Cea)
Date: Sat, 17 Dec 2005 23:14:10 +0100
Subject: [Twisted-Python] Some beginner questions about
	"twisted.names.client" and ".tac" environment
Message-ID: <43A48DB2.5020609@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Twisted 2.1, twisted.named 0.2, here.

I'm taking my first steps with Twisted (documentation -inexistence-
nightmare :-), and my first project will be a bulk mailer as the backend
of my mailing list system.

The application would take the message and the subscriber list and a)
resolve the MX for the domains and b) connect to the MX's and send the
message, trying to minimice traffic sending a single envelope for
several recipients sharing the domain or the MX's.

I'm doing currently the DNS stuff. The result are promising, resolving
about 200 domains per second in a 1.4GHz P4, so my biggest mailing list
(about 31500 unique domains, m?ltiple subscribers per domain) is
"resolved" in less than three minutes.

Nice so far. The demo code (2Kbytes) is the following (if I'm violating
the rules posting this code, please tell me):

=====
# File "dns.tac"

from twisted.application import service

application = service.Application("DNS test")

import time
t=time.time()

class resolucion(object) :
  def __init__(self,dominio) :
    from twisted.names import client
    d = client.lookupMailExchange(dominio,timeout=(60,))
    d.addCallbacks(self._cbMailExchange, self._ebMailExchange)
    self.dominio=dominio

  def _cbMailExchange(self,results):
    # Callback for MX query
    global aun_pendientes
    aun_pendientes-=1
    if not aun_pendientes :
      print "OK",time.time()-t
      return
      from twisted.internet import reactor
      reactor.stop()
      return
    if not len(pendientes) :
      return

    resolucion(pendientes.pop())
    from twisted.names.dns import QUERY_TYPES
    for i in results[0] :
      n=i.payload.name
      tipo=QUERY_TYPES[i.payload.TYPE]
      if tipo=="MX" :
        return
        p=i.payload.preference
        print n,p,
        for j in results[2] :
          if n==j.name :
            print j.payload.dottedQuad(),"(%d)" %j.ttl
            break
        else :
          print "???"
      elif tipo=="CNAME" :
        redirigidos.append((self.dominio,i.payload.name))

  def _ebMailExchange(self,failure):
    # Error callback for MX query
    global aun_pendientes
    aun_pendientes-=1
    if not aun_pendientes :
      print "ERROR",time.time()-t
      return
      from twisted.internet import reactor
      reactor.stop()
      return
    if not len(pendientes) :
      return

    resolucion(pendientes.pop())
    print "XXX",self.dominio
    print 'Lookup failed:'
    failure.printTraceback()

pendientes=[]
redirigidos=[]

f=open("domain_list")
for i in f :
  pendientes.append(i)

aun_pendientes=len(pendientes)

concurrencia=1000

for i in pendientes[:concurrencia] :
  resolucion(i)

from twisted.names import client
client.theResolver.resolvers[-1].dynServers=[('127.0.0.1', 53)]
# client.theResolver.resolvers=[client.theResolver.resolvers[-1]]

pendientes=pendientes[concurrencia:]

=====

I launch the code as "twistd -ny dns.tac".

The demo does 1000 resolutions in parallel. If you experiment with the
code, reduce the value.

Questions:

1. I get a warning: "[Uninitialized]
/usr/local/lib/python2.4/site-packages/twisted/names/dns.py:1227:
exceptions.DeprecationWarning: Deferred.setTimeout is deprecated.  Look
for timeout support specific to the API you are using instead."

 I'm using, the native "twisted.names" timeout API, as far as I know...

2. By default "twisted.names.client" uses the "/etc/resolv.conf" file to
know which nameservers to use. I, nevertheless, want to use a particular
nameserver, so:

 2.1. I couldn't to find an appropiate API. I had to do a "hack",
reading the "twisted.names" core to know implementation details:
"client.theResolver.resolvers[-1].dynServers=[('127.0.0.1', 53)]"

 2.2. The previous "hack" is only effective for future
"twisted.names.client" instances. The previous ones use the
"/etc/resolv.conf" entries. Putting the "hack" code before any instance
creation doesn't work.

 2.3. While reading the framework code, I saw that "client" uses a
resolver chain: host, cache, network. But the cache is initially clear
(of course) and NEVER ever gets populated, so we are not using it but
checking missing entries eats CPU: 155 seconds for the unchanged code,
125 seconds if I drop the host and cache resolvers.

 A caching client would be very nice, if the client is long running (my
original idea).

 2.4. The resolution failure code is only called if the resolution
timeouts. But if the domain doesn't exists, the code called is the
"success" one, with a "nil" answer. So we can't diferenciate between
inexistant domains and inexistant RRs.

3. How can I stop this ".tac"?. If I do "reactor.stop()", I get an
infinite error, repeated forever:

=====

[twisted.names.dns.DNSDatagramProtocol (UDP)] Traceback (most recent
call last):
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/log.py", line 43,
in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line
59, in callWithContext
            return self.currentContext().callWithContext(ctx, func,
*args, **kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line
37, in callWithContext
            return func(*args,**kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py",
line 139, in _doReadOrWrite
            why = getattr(selectable, method)()
        --- <exception caught here> ---
          File
"/usr/local/lib/python2.4/site-packages/twisted/internet/udp.py", line
113, in doRead
            data, addr = self.socket.recvfrom(self.maxPacketSize)
        exceptions.AttributeError: 'Port' object has no attribute 'socket'

=====

I must kill -9 the "twistd" process.

Thank you for your time and attention. Help greatly appreciated :-)

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ6SNsplgi5GaxT1NAQLMQwP/czYFLQ6+olTCvM0jdmMlaBgwxHsHdvxT
/2mhWqtyhIf1Kdh6FioFQq13xqCfZxFIkwuUwTlG+ZmkSYK1iWZEmaS0CGa5YmuA
d7miIFfL9Tfa3OLyV1nvqdCR3YtzH/ws9UuJ2DGnACRI++Of6gBVwGlhFDa7S57o
wZcsYWAS6Sk=
=/Pks
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Sat Dec 17 18:10:16 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 17 Dec 2005 18:10:16 -0500
Subject: [Twisted-Python] Some beginner questions about
	"twisted.names.client" and ".tac" environment
In-Reply-To: <43A48DB2.5020609@argo.es>
Message-ID: <20051217231016.1217.997986057.divmod.quotient.6793@ohm>

On Sat, 17 Dec 2005 23:14:10 +0100, Jesus Cea <jcea at argo.es> wrote:
>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>Twisted 2.1, twisted.named 0.2, here.
>
>I'm taking my first steps with Twisted (documentation -inexistence-
>nightmare :-), and my first project will be a bulk mailer as the backend
>of my mailing list system.
>
>The application would take the message and the subscriber list and a)
>resolve the MX for the domains and b) connect to the MX's and send the
>message, trying to minimice traffic sending a single envelope for
>several recipients sharing the domain or the MX's.
>
>I'm doing currently the DNS stuff. The result are promising, resolving
>about 200 domains per second in a 1.4GHz P4, so my biggest mailing list
>(about 31500 unique domains, m?ltiple subscribers per domain) is
>"resolved" in less than three minutes.
>
>Nice so far. The demo code (2Kbytes) is the following (if I'm violating
>the rules posting this code, please tell me):
>
>=====
># File "dns.tac"
>
>from twisted.application import service
>
>application = service.Application("DNS test")
>

You probably want to move most of your program out if "dns.tac" and into an importable Python module.  Code defined inside .tac files lives in a weird world where some surprising rules apply.  It's best to keep the .tac file as short as possible.  Generally, you just want to create an Application and give it some children, importing from modules the definitions of all classes and functions needed to set this up.

>import time
>t=time.time()
>
>class resolucion(object) :
>  def __init__(self,dominio) :
>    from twisted.names import client
>    d = client.lookupMailExchange(dominio,timeout=(60,))

Passing (60,) as the timeout might not be the best idea.  This will cause the DNS client to send one request and then wait 60 seconds for a response.  If either the request or the response is dropped (as often happens with UDP traffic), you will never get a result, and you will have to wait 60 seconds to discover this fact.

If you don't want retransmission, a value of (15,) or so is probably better.  However, I suspect you really do want retransmissions.  The default timeout is also 60 seconds total, but performs several retransmissions during the interim.

>    d.addCallbacks(self._cbMailExchange, self._ebMailExchange)
>    self.dominio=dominio
>
>  def _cbMailExchange(self,results):
>    # Callback for MX query
>    global aun_pendientes
>    aun_pendientes-=1
>    if not aun_pendientes :
>      print "OK",time.time()-t
>      return
>      from twisted.internet import reactor
>      reactor.stop()
>      return
>    if not len(pendientes) :
>      return
>
>    resolucion(pendientes.pop())
>    from twisted.names.dns import QUERY_TYPES
>    for i in results[0] :
>      n=i.payload.name
>      tipo=QUERY_TYPES[i.payload.TYPE]
>      if tipo=="MX" :

You can just use dns.MX here, instead of looking up "MX" in QUERY_TYPES.

>        return
>        p=i.payload.preference
>        print n,p,
>        for j in results[2] :
>          if n==j.name :
>            print j.payload.dottedQuad(),"(%d)" %j.ttl
>            break
>        else :
>          print "???"
>      elif tipo=="CNAME" :
>        redirigidos.append((self.dominio,i.payload.name))
>
>  def _ebMailExchange(self,failure):
>    # Error callback for MX query
>    global aun_pendientes
>    aun_pendientes-=1
>    if not aun_pendientes :
>      print "ERROR",time.time()-t
>      return
>      from twisted.internet import reactor
>      reactor.stop()
>      return
>    if not len(pendientes) :
>      return
>
>    resolucion(pendientes.pop())
>    print "XXX",self.dominio
>    print 'Lookup failed:'
>    failure.printTraceback()
>
>pendientes=[]
>redirigidos=[]
>
>f=open("domain_list")
>for i in f :
>  pendientes.append(i)
>
>aun_pendientes=len(pendientes)
>
>concurrencia=1000
>
>for i in pendientes[:concurrencia] :
>  resolucion(i)
>
>from twisted.names import client
>client.theResolver.resolvers[-1].dynServers=[('127.0.0.1', 53)]
># client.theResolver.resolvers=[client.theResolver.resolvers[-1]]

To customize the server used by the resolver, you may want to create your own resolver instance, rather than relying on the defaults guessed by the resolver automatically created in the client module.

>
>pendientes=pendientes[concurrencia:]
>
>=====
>
>I launch the code as "twistd -ny dns.tac".
>
>The demo does 1000 resolutions in parallel. If you experiment with the
>code, reduce the value.
>
>Questions:
>
>1. I get a warning: "[Uninitialized]
>/usr/local/lib/python2.4/site-packages/twisted/names/dns.py:1227:
>exceptions.DeprecationWarning: Deferred.setTimeout is deprecated.  Look
>for timeout support specific to the API you are using instead."
>
> I'm using, the native "twisted.names" timeout API, as far as I know...

This is a problem internal to twisted.names.  Your code isn't doing anything wrong to cause it.  Hopefully this will be fixed by the next release.

>
>2. By default "twisted.names.client" uses the "/etc/resolv.conf" file to
>know which nameservers to use. I, nevertheless, want to use a particular
>nameserver, so:
>
> 2.1. I couldn't to find an appropiate API. I had to do a "hack",
>reading the "twisted.names" core to know implementation details:
>"client.theResolver.resolvers[-1].dynServers=[('127.0.0.1', 53)]"
>
> 2.2. The previous "hack" is only effective for future
>"twisted.names.client" instances. The previous ones use the
>"/etc/resolv.conf" entries. Putting the "hack" code before any instance
>creation doesn't work.
>
> 2.3. While reading the framework code, I saw that "client" uses a
>resolver chain: host, cache, network. But the cache is initially clear
>(of course) and NEVER ever gets populated, so we are not using it but
>checking missing entries eats CPU: 155 seconds for the unchanged code,
>125 seconds if I drop the host and cache resolvers.
>
> A caching client would be very nice, if the client is long running (my
>original idea).

All three of these can be addressed by constructing your own resolver:

  from twisted.names import client
  myResolver = client.Resolver(servers=[('127.0.0.1', 53)])

This gives you a resolver which uses only localhost, doesn't involve any nasty hacks, and doesn't have an /etc/hosts resolver or a caching resolver to slow things down.

>
> 2.4. The resolution failure code is only called if the resolution
>timeouts. But if the domain doesn't exists, the code called is the
>"success" one, with a "nil" answer. So we can't diferenciate between
>inexistant domains and inexistant RRs.

Hmm.  The non-existence of the domain is hidden by the very last step in performing the lookup.  The Resolver class has a method, filterAnswers, which is used to turn a DNS response into the three-tuple of lists which all the lookup* methods return.  You may want to subclass Resolver and override filterAnswers to behave differently when the `message' argument it is given has an `rCode' attribute equal to twisted.names.dns.ENAME, which indicates the name requested does not exist.

>
>3. How can I stop this ".tac"?. If I do "reactor.stop()", I get an
>infinite error, repeated forever:

reactor.stop() is the correct way to end the program.  If you still have this problem after you have split the program into multiple files, please post again.

Jean-Paul



From jcea at argo.es  Sat Dec 17 19:05:32 2005
From: jcea at argo.es (Jesus Cea)
Date: Sun, 18 Dec 2005 01:05:32 +0100
Subject: [Twisted-Python] Some beginner questions
	about	"twisted.names.client" and ".tac" environment
In-Reply-To: <20051217231016.1217.997986057.divmod.quotient.6793@ohm>
References: <20051217231016.1217.997986057.divmod.quotient.6793@ohm>
Message-ID: <43A4A7CC.7060505@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jean-Paul Calderone wrote:
> You probably want to move most of your program out if "dns.tac" and into
> an importable Python module.  Code defined inside .tac files lives in a
> weird world where some surprising rules apply.

Any documentation about that?

> It's best to keep the
> .tac file as short as possible.  Generally, you just want to create an
> Application and give it some children, importing from modules the
> definitions of all classes and functions needed to set this up.

I reduced the "dns3.tac" to:

=====

from twisted.application import service

application = service.Application("DNS test")

import sys
sys.path=["."]+sys.path
import dns3

=====

All logic is in "dns3.tac". Basically the same code posted in my
previous message.

I have the very same problem with "reactor.stop()": repeated exceptions,
only stoppable using "kill -9".

I don't get the "give it some children" point. Could you post some
sample code?.

> Passing (60,) as the timeout might not be the best idea.  This will
> cause the DNS client to send one request and then wait 60 seconds for a
> response.  If either the request or the response is dropped (as often
> happens with UDP traffic), you will never get a result, and you will
> have to wait 60 seconds to discover this fact.

I'm resolving several thousand of domains, so one minute more or less is
not an issue. I don't want to retransmit since I'm using 127.0.0.1, so
losing request (in the same machine) should be rare (udp backlog
overflow, basically).

Some domains takes a long time to resolve. So if I use an small value I
load the server and get "Unexpected message (XXXXX) received from
('127.0.0.1', 53)", caused because the DNS server gets a late answers
and my code already give up.

> If you don't want retransmission, a value of (15,) or so is probably
> better.

Then I get a lot of "unexpected DNS responses". Seems a fair number of
domains takes more than 15 seconds to fulfill the request :-p.

In any case this number is not really important. I'm more concerned
about the Twisted specific issues :p

> You can just use dns.MX here, instead of looking up "MX" in QUERY_TYPES.

Good point. Changes done.

> To customize the server used by the resolver, you may want to create
> your own resolver instance, rather than relying on the defaults guessed
> by the resolver automatically created in the client module.

Also a good point. Done and working fine.

How can I easily use the cache resolver?. My problem is updating the
cache when I get a response thru the network. In a long running daemon,
caching DNS when I'm serving several hundreds of email for day woul dbe
a big win.

Maybe with my own overloaded cache class, but seems an obvious addition
to standard twisted.names. :-? Maybe next release :-)

> Hmm.  The non-existence of the domain is hidden by the very last step in
> performing the lookup.  The Resolver class has a method, filterAnswers,
> which is used to turn a DNS response into the three-tuple of lists which
> all the lookup* methods return.  You may want to subclass Resolver and
> override filterAnswers to behave differently when the `message' argument
> it is given has an `rCode' attribute equal to twisted.names.dns.ENAME,
> which indicates the name requested does not exist.

That seems doable but an ugly hack :-). Perhaps a future "twisted.named"
release could include a flag to easily differenciate between missing RR
and nonexistent domain. Any hope?.

>> 3. How can I stop this ".tac"?. If I do "reactor.stop()", I get an
>> infinite error, repeated forever:
> 
> reactor.stop() is the correct way to end the program.  If you still have
> this problem after you have split the program into multiple files,
> please post again.

Program splitted. Same problem :-/

The dode is basically the same that in my previous email. Moved 99% of
code to "dns3.py". The dns3.tac" is trivial:

=====

from twisted.application import service

application = service.Application("DNS test")

import sys
sys.path=["."]+sys.path
import dns3

=====

Help appreciated. Thanks for you time and efford.

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ6SnzJlgi5GaxT1NAQLFgwP/U01pixJpJ39iwA8jZHOgfBJCOoOzI+h2
uhWh3bWHcecXddhutTCCwJb9rw1VFLBwTCyzoSXx2Qn6c1qLgKkSIt/My9RDD0js
BPhJ2AV+8zQyc7ySAdYM3pTy4HNjw5JviDsymHs3KWw3AMDR/JhN46bXBgqARZtM
IIe1xBs/HZc=
=rXOt
-----END PGP SIGNATURE-----



From jcea at argo.es  Sat Dec 17 19:10:24 2005
From: jcea at argo.es (Jesus Cea)
Date: Sun, 18 Dec 2005 01:10:24 +0100
Subject: [Twisted-Python] Some beginner questions
	about	"twisted.names.client" and ".tac" environment
In-Reply-To: <43A4A7CC.7060505@argo.es>
References: <20051217231016.1217.997986057.divmod.quotient.6793@ohm>
	<43A4A7CC.7060505@argo.es>
Message-ID: <43A4A8F0.9060504@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jesus Cea wrote:
> All logic is in "dns3.tac". Basically the same code posted in my
> previous message.

Sorry. Logic in "dns3.py", of course.

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ6So8Jlgi5GaxT1NAQIAVAP/fKxYtCRfIYA2n6Y9cyV3WPOsKfnaZqYu
Nsq+0e0YwokLVFWB/33nAcnRZ2muW52Mmf4FHp/sFunzQ5gmwcF7+bSQVrN6+AYt
g7do010nvONSOzJYLX9DJqwDD3r7DObbhvkAa4+0XLBEb7D394ErnhM50eIwwYNZ
pQuFEZ5j264=
=1N+i
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Sat Dec 17 19:55:04 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 17 Dec 2005 19:55:04 -0500
Subject: [Twisted-Python] Some beginner questions
	about	"twisted.names.client" and ".tac" environment
In-Reply-To: <43A4A7CC.7060505@argo.es>
Message-ID: <20051218005504.1217.2114116549.divmod.quotient.6796@ohm>

On Sun, 18 Dec 2005 01:05:32 +0100, Jesus Cea <jcea at argo.es> wrote:
>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>Jean-Paul Calderone wrote:
>> You probably want to move most of your program out if "dns.tac" and into
>> an importable Python module.  Code defined inside .tac files lives in a
>> weird world where some surprising rules apply.
>
>Any documentation about that?
>

Hmmm, not that I know of.  The problems are all essentially consequences of the fact that .tac files are run using the built-in execfile() function (or equivalent), rather than being loaded as modules.

>> It's best to keep the
>> .tac file as short as possible.  Generally, you just want to create an
>> Application and give it some children, importing from modules the
>> definitions of all classes and functions needed to set this up.
>
>I reduced the "dns3.tac" to:
>
>=====
>
>from twisted.application import service
>
>application = service.Application("DNS test")
>
>import sys
>sys.path=["."]+sys.path
>import dns3
>
>=====
>
>All logic is in "dns3.tac". Basically the same code posted in my
>previous message.
>
>I have the very same problem with "reactor.stop()": repeated exceptions,
>only stoppable using "kill -9".
>
>I don't get the "give it some children" point. Could you post some
>sample code?.

You want to tie your application logic to a Service subclass.  To start with, I'd try something like this, in dns3.py:

  from twisted.application import service

  class DomainResolver(service.Service):
      def startService(self):
          # Copied the top-level code from the original dns.tac
          pendientes = []
          redirigidos = []
          f = open("domain_list")
          for i in f :
              pendientes.append(i)
          aun_pendientes = len(pendientes)
          concurrencia = 1000
          for i in pendientes[:concurrencia]:
              resolucion(i)
          pendientes=pendientes[concurrencia:]

Then, in dns3.tac after application is defined,

    from dns import DomainResolver
    DomainResolver().setServiceParent(application)

This will delay the execution of your startup code until twistd is totally ready and the reactor is fully initialized.

>
>> Passing (60,) as the timeout might not be the best idea.  This will
>> cause the DNS client to send one request and then wait 60 seconds for a
>> response.  If either the request or the response is dropped (as often
>> happens with UDP traffic), you will never get a result, and you will
>> have to wait 60 seconds to discover this fact.
>
>I'm resolving several thousand of domains, so one minute more or less is
>not an issue. I don't want to retransmit since I'm using 127.0.0.1, so
>losing request (in the same machine) should be rare (udp backlog
>overflow, basically).
>
>Some domains takes a long time to resolve. So if I use an small value I
>load the server and get "Unexpected message (XXXXX) received from
>('127.0.0.1', 53)", caused because the DNS server gets a late answers
>and my code already give up.
>

Okay, it sounds like you know what you're doing here :)

> [snip]
>
>> To customize the server used by the resolver, you may want to create
>> your own resolver instance, rather than relying on the defaults guessed
>> by the resolver automatically created in the client module.
>
>Also a good point. Done and working fine.
>
>How can I easily use the cache resolver?. My problem is updating the
>cache when I get a response thru the network. In a long running daemon,
>caching DNS when I'm serving several hundreds of email for day woul dbe
>a big win.
>
>Maybe with my own overloaded cache class, but seems an obvious addition
>to standard twisted.names. :-? Maybe next release :-)

I think the current caching resolver was a step in the wrong direction.  A cache should probably *wrap* another resolver, not whatever weird thing it is doing now.

If you write such a thing, it'd be great if you could submit it for inclusion :)

>
>> Hmm.  The non-existence of the domain is hidden by the very last step in
>> performing the lookup.  The Resolver class has a method, filterAnswers,
>> which is used to turn a DNS response into the three-tuple of lists which
>> all the lookup* methods return.  You may want to subclass Resolver and
>> override filterAnswers to behave differently when the `message' argument
>> it is given has an `rCode' attribute equal to twisted.names.dns.ENAME,
>> which indicates the name requested does not exist.
>
>That seems doable but an ugly hack :-). Perhaps a future "twisted.named"
>release could include a flag to easily differenciate between missing RR
>and nonexistent domain. Any hope?.

I think flags like this are ugly hacks as well.  I completely agree that subclass/override is not a great way to get this functionality, but I'd like to think of a cleaner way to offer the new feature while still maintaining backwards compatibility.

>
>>> 3. How can I stop this ".tac"?. If I do "reactor.stop()", I get an
>>> infinite error, repeated forever:
>>
>> reactor.stop() is the correct way to end the program.  If you still have
>> this problem after you have split the program into multiple files,
>> please post again.
>
>Program splitted. Same problem :-/
>
>The dode is basically the same that in my previous email. Moved 99% of
>code to "dns3.py". The dns3.tac" is trivial:

Try the service class I used above.  If you still see the exception, it may indicate a bug in Twisted's UDP support.  If this case, could you attach the new version of the whole program?  I'll take a closer look and see if I can nail down the exact cause.

Jean-Paul



From jcea at argo.es  Sun Dec 18 10:16:06 2005
From: jcea at argo.es (Jesus Cea)
Date: Sun, 18 Dec 2005 16:16:06 +0100
Subject: [Twisted-Python] Some beginner
	questions	about	"twisted.names.client" and ".tac" environment
In-Reply-To: <20051218005504.1217.2114116549.divmod.quotient.6796@ohm>
References: <20051218005504.1217.2114116549.divmod.quotient.6796@ohm>
Message-ID: <43A57D36.2050308@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jean-Paul Calderone wrote:

> You want to tie your application logic to a Service subclass.  To start
> with, I'd try something like this, in dns3.py:

The very same error :-(.

My code for "dns3.tac":

=====

from twisted.application import service

application = service.Application("DNS test")

import sys
sys.path=["."]+sys.path

from dns3 import DomainResolver
DomainResolver().setServiceParent(application)

=====

My code for "dns3.py":

=====

class resolucion(object) :
  def __init__(self,dominio) :
    global myResolver
    d = myResolver.lookupMailExchange(dominio,timeout=(1,))
    d.addCallbacks(self._cbMailExchange, self._ebMailExchange)
    self.dominio=dominio

  def _cbMailExchange(self,results):
    # Callback for MX query
    global aun_pendientes
    aun_pendientes-=1
    if not aun_pendientes :
      import time
      print "OK",time.time()-t
      #return
      from twisted.internet import reactor
      reactor.stop()
      return
    if not len(pendientes) :
      return

    resolucion(pendientes.pop())
    from twisted.names import dns
    for i in results[0] :
      n=i.payload.name
      tipo=i.payload.TYPE
      if tipo==dns.MX :
        return
        p=i.payload.preference
        print n,p,
        for j in results[2] :
          if n==j.name :
            print j.payload.dottedQuad(),"(%d)" %j.ttl
            break
        else :
          print "???"
      elif tipo==dns.CNAME :
        redirigidos.append((self.dominio,i.payload.name))

  def _ebMailExchange(self,failure):
    # Error callback for MX query
    global aun_pendientes
    aun_pendientes-=1
    if not aun_pendientes :
      import time
      print "ERROR",time.time()-t
      #return
      from twisted.internet import reactor
      reactor.stop()
      return
    if not len(pendientes) :
      return

    resolucion(pendientes.pop())
    print "XXX",self.dominio
    print 'Lookup failed:'
    failure.printTraceback()



from twisted.application import service

class DomainResolver(service.Service):
  def startService(self) :
    global pendientes,redirigidos,aun_pendientes,t,myResolver

    from twisted.names import client
    myResolver=client.Resolver(servers=[('127.0.0.1', 53)])

    import time
    t=time.time()

    pendientes=[]
    redirigidos=[]

    f=open("z1")
    for i in f :
      pendientes.append(i.split()[0])
    f.close()

    aun_pendientes=len(pendientes)

    concurrencia=1

    for i in pendientes[:concurrencia] :
      resolucion(i)

    pendientes=pendientes[concurrencia:]

=====


> This will delay the execution of your startup code until twistd is
> totally ready and the reactor is fully initialized.

Done, but not working :-(

[... DNS timeouts ...]
> Okay, it sounds like you know what you're doing here :)

I like to think so };-)

> I think the current caching resolver was a step in the wrong direction. 
> A cache should probably *wrap* another resolver, not whatever weird
> thing it is doing now.

I agree. Perhaps a subclass of the network DNS resolver could be fine.
So we could have a "client" class and a "cachingClient" one.

In any case, current code simply doesn't cache anything, but eats CPU
cycles.

> If you write such a thing, it'd be great if you could submit it for
> inclusion :)

I'm not familiar enough with Twisted internal, yet, to try.
Nevertheless, I would suggest an optional parameter in the caching
resolver constructor, pointing to a callable object to resolve misses.
Sort of. Code changes would be minimal...

[... about differenciatiing DNS misses from RR misses...]
> I think flags like this are ugly hacks as well.  I completely agree that
> subclass/override is not a great way to get this functionality, but I'd
> like to think of a cleaner way to offer the new feature while still
> maintaining backwards compatibility.

Keep me informed :-p

> Try the service class I used above.  If you still see the exception, it
> may indicate a bug in Twisted's UDP support.  If this case, could you
> attach the new version of the whole program?  I'll take a closer look
> and see if I can nail down the exact cause.

Not working. Same exception. Code posted.

Thanks a lot for your help, Jean Paul. Greatly appreciated.

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ6V9Nplgi5GaxT1NAQKAOwP9H251Jjvd/kNPJf7R+S9faHN9YFcSBluL
YgBleuECDUG5WvJV2O+ZJwkHr05+qQ4qGzD13ydWnxdNCG1UMgWmIJ+TNfu2hOKN
L+rQmNKIUKuPFTOHA+tACYqJaE9rkkcJumR7FON81kNJdEShs52aNUlnc1Q6A9IB
iFyfaa9jcVI=
=V82G
-----END PGP SIGNATURE-----



From viktor.ransmayr at t-online.de  Sun Dec 18 16:29:50 2005
From: viktor.ransmayr at t-online.de (Viktor Ransmayr)
Date: Sun, 18 Dec 2005 22:29:50 +0100
Subject: [Twisted-Python] Problem w/ TNPE Example on Windows
Message-ID: <43A5D4CE.6080205@t-online.de>

Hello,

    I'm new to Twisted and just started reading "Twisted Network Programming
Essentials".

The example "dataforward.py" in chapter 2 creates a traceback and an import
error, if executed on my laptop running WinXP/Pro-SP2, using Python-2.4.2
and Twisted-2.1.0

The import error complains about a missing module "fcntl" required by
...\twisted\internet\fdesc.py

Reading the python documentation states that the "fcntl" module is 
available on
Unix only. - Does that mean, that this example is working on Unix only or
what am I missing?

Kind regards,

    Viktor Ransmayr








From andrew-twisted at puzzling.org  Sun Dec 18 18:09:39 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 19 Dec 2005 10:09:39 +1100
Subject: [Twisted-Python] Problem w/ TNPE Example on Windows
In-Reply-To: <43A5D4CE.6080205@t-online.de>
References: <43A5D4CE.6080205@t-online.de>
Message-ID: <20051218230939.GE8331@home.puzzling.org>

On Sun, Dec 18, 2005 at 10:29:50PM +0100, Viktor Ransmayr wrote:
> Hello,
> 
>    I'm new to Twisted and just started reading "Twisted Network Programming
> Essentials".
> 
> The example "dataforward.py" in chapter 2 creates a traceback and an import
> error, if executed on my laptop running WinXP/Pro-SP2, using Python-2.4.2
> and Twisted-2.1.0
> 
> The import error complains about a missing module "fcntl" required by
> ...\twisted\internet\fdesc.py
> 
> Reading the python documentation states that the "fcntl" module is 
> available on
> Unix only. - Does that mean, that this example is working on Unix only or
> what am I missing?

That's right, unfortunately.  That example uses the twisted.internet.stdio
module, which relies on fcntl (and the ability to pass the stdin/stdout file
descriptors to select), which isn't available on Windows.

-Andrew.




From olivier.guilloux at gmail.com  Mon Dec 19 04:46:26 2005
From: olivier.guilloux at gmail.com (Kaladan)
Date: Mon, 19 Dec 2005 10:46:26 +0100
Subject: [Twisted-Python] Is it necessary to create a new reactor to
	daemonize a File Alteration Monitoring system
Message-ID: <7fb2650a0512190146x311421caj@mail.gmail.com>

Hello,

I manage to write a file system monitoring daemon based on gamin (
http://gnome.org/~veillard/gamin/) thanks to twisted API.
Therefore I have created a new reactor, which inherit from the ReactorBase.
In order to use the twistd application runner I have a GaminService which
define a simple StartService.

Am I in the good way ?

The code is in attachment
--
Olivier Guilloux
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051219/0e7d305e/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: GaminReactor.py
Type: text/x-python
Size: 3772 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20051219/0e7d305e/attachment.py 

From tv at twistedmatrix.com  Mon Dec 19 10:24:36 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 19 Dec 2005 17:24:36 +0200
Subject: [Twisted-Python] Is it necessary to create a new reactor
	to	daemonize a File Alteration Monitoring system
In-Reply-To: <7fb2650a0512190146x311421caj@mail.gmail.com>
References: <7fb2650a0512190146x311421caj@mail.gmail.com>
Message-ID: <43A6D0B4.9080607@twistedmatrix.com>

Kaladan wrote:
> I manage to write a file system monitoring daemon based on gamin
> (http://gnome.org/~veillard/gamin/) thanks to twisted API.
> Therefore I have created a new reactor, which inherit from the
> ReactorBase. In order to use the twistd application runner I have a
> GaminService which define a simple StartService.

Creating a new reactor is a horrible way to do that.
I guess you should either

1) use get_fd(), an existing reactor and handle_events() to talk to
   gamin in a non-blocking way (and if that proves impossible, work on
   improving the gamin client side library or python bindings so that it
   becomes possible)

   (plug the result of get_fd() as a readable fd in a reactor, whenever
   it is readable, call handle_events(); the web docs don't explain if
   non-blocking add of watchers is supported or not)

OR

2) reimplement the gamin client protocol from scratch with twisted.



From abe at fettig.net  Mon Dec 19 11:23:01 2005
From: abe at fettig.net (Abe Fettig)
Date: Mon, 19 Dec 2005 11:23:01 -0500
Subject: [Twisted-Python] Problem w/ TNPE Example on Windows
In-Reply-To: <20051218230939.GE8331@home.puzzling.org>
References: <43A5D4CE.6080205@t-online.de>
	<20051218230939.GE8331@home.puzzling.org>
Message-ID: <43A6DE65.9040908@fettig.net>

Andrew Bennetts wrote:

>>Reading the python documentation states that the "fcntl" module is 
>>available on
>>Unix only. - Does that mean, that this example is working on Unix only or
>>what am I missing?
> 
> 
> That's right, unfortunately.  That example uses the twisted.internet.stdio
> module, which relies on fcntl (and the ability to pass the stdin/stdout file
> descriptors to select), which isn't available on Windows.

And unfortunately I failed to notice this while writing the book.
Apologies to Windows users. Is it really impossible to do asynchronous
IO on stdin/out on Windows? Anybody have any ideas for working around
the lack of fcntl? I'd be happy to contribute to an effort to make
twisted.internet.stdio run on Windows.

Abe



From itamar at itamarst.org  Mon Dec 19 12:02:15 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 19 Dec 2005 12:02:15 -0500
Subject: [Twisted-Python] Problem w/ TNPE Example on Windows
In-Reply-To: <43A6DE65.9040908@fettig.net>
References: <43A5D4CE.6080205@t-online.de>
	<20051218230939.GE8331@home.puzzling.org> <43A6DE65.9040908@fettig.net>
Message-ID: <1135011736.15405.2.camel@localhost.localdomain>

On Mon, 2005-12-19 at 11:23 -0500, Abe Fettig wrote:

> And unfortunately I failed to notice this while writing the book.
> Apologies to Windows users. Is it really impossible to do asynchronous
> IO on stdin/out on Windows? Anybody have any ideas for working around
> the lack of fcntl? I'd be happy to contribute to an effort to make
> twisted.internet.stdio run on Windows.

*mumble* *mumble* *blush*. That's my fault, since I did know that. 

It may be possible to do stdio on Windows using the IOCP reactor.




From foom at fuhm.net  Mon Dec 19 13:19:34 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 19 Dec 2005 13:19:34 -0500
Subject: [Twisted-Python] Problem w/ TNPE Example on Windows
In-Reply-To: <43A6DE65.9040908@fettig.net>
References: <43A5D4CE.6080205@t-online.de>
	<20051218230939.GE8331@home.puzzling.org>
	<43A6DE65.9040908@fettig.net>
Message-ID: <BD442F5B-56C2-4A97-A406-E91E1AB8D4B7@fuhm.net>


On Dec 19, 2005, at 11:23 AM, Abe Fettig wrote:

> Andrew Bennetts wrote:
>
>
>>> Reading the python documentation states that the "fcntl" module is
>>> available on
>>> Unix only. - Does that mean, that this example is working on Unix  
>>> only or
>>> what am I missing?
>>>
>>
>>
>> That's right, unfortunately.  That example uses the  
>> twisted.internet.stdio
>> module, which relies on fcntl (and the ability to pass the stdin/ 
>> stdout file
>> descriptors to select), which isn't available on Windows.
>>
>
> And unfortunately I failed to notice this while writing the book.
> Apologies to Windows users. Is it really impossible to do asynchronous
> IO on stdin/out on Windows? Anybody have any ideas for working around
> the lack of fcntl? I'd be happy to contribute to an effort to make
> twisted.internet.stdio run on Windows.

In the worst case, it could be emulated using threads doing blocking  
read/write.

James




From pmezard at gmail.com  Mon Dec 19 15:06:13 2005
From: pmezard at gmail.com (=?ISO-8859-1?Q?Patrick_M=E9zard?=)
Date: Mon, 19 Dec 2005 21:06:13 +0100
Subject: [Twisted-Python] Re: Problem w/ TNPE Example on Windows
In-Reply-To: <1135011736.15405.2.camel@localhost.localdomain>
References: <43A5D4CE.6080205@t-online.de>	<20051218230939.GE8331@home.puzzling.org>
	<43A6DE65.9040908@fettig.net>
	<1135011736.15405.2.camel@localhost.localdomain>
Message-ID: <do73o3$coi$1@sea.gmane.org>

Itamar Shtull-Trauring a ?crit :
> On Mon, 2005-12-19 at 11:23 -0500, Abe Fettig wrote:
> 
> 
>>And unfortunately I failed to notice this while writing the book.
>>Apologies to Windows users. Is it really impossible to do asynchronous
>>IO on stdin/out on Windows? Anybody have any ideas for working around
>>the lack of fcntl? I'd be happy to contribute to an effort to make
>>twisted.internet.stdio run on Windows.
> 
> 
> *mumble* *mumble* *blush*. That's my fault, since I did know that. 
> 
> It may be possible to do stdio on Windows using the IOCP reactor.

Talking about that, what is the exact status of the IOCP reactor? I have 
seen J. Johnson commiting patches related to process creation recently. 
Are there still mandatory features missing to have complete reactor?

Patrick M?zard




From paul-lists at perforge.com  Mon Dec 19 15:27:55 2005
From: paul-lists at perforge.com (Paul G)
Date: Mon, 19 Dec 2005 15:27:55 -0500
Subject: [Twisted-Python] xpost: multiple job openings
Message-ID: <00e801c604da$b1c3f930$6402a8c0@dcore>

folks,

i'm crossposting this to twisted-python-l and twisted-web-l for the benefit 
of those who don't read both. apologies to those who will consequently have 
to read this twice.

---
We've got multiple job openings for great engineers familiar with python and 
twisted, senior and junior positions available. We're building a small team 
of folks who like working hard, solving interesting problems, writing clean 
code and having fun doing it. If you got into coding because that's where 
the money was in the '90s, please skip this one and see my next job posting 
where I'm recruiting bodyguards for work in the Persian Gulf.

The dev team is run by an engineer ('run' in the sense that I shield you 
from the crazy business folk), so it is a strict meritocracy. You will be 
working on rebuilding/refactoring an existing PHP (ugh) web application into 
python services built on top of twisted as well as implementing new 
features. This is a high volume system, with millions of transactions a 
day - if you dig concurrency, you won't be bored. Must be able to handle the 
excitement ;)

Requirements:
* We're looking for great engineers - while your ability to discuss 
Wittgenstein over our 5th beer is welcome,
  a piece of paper^W^W^Wdiploma is not required.
* You should be old enough not to get us in trouble with Amnesty 
International for child exploitation.
* Experience working on hobby, open source and commercial projects counts 
with me.
* Python/Twisted and SQL a must.
* Reading/grokking bad PHP code a big plus. Writing PHP code useful, since 
we'll be hacking in the twisted/python bits over time.
* Javascript/DHTML/AJAX(ugh, buzzowrd) familiarity needed in at least one 
hire, so a plus.
* Experience with C and ASM good in that it is a good predictor of your 
understanding of memory allocation and performance issues.
* Don't mention Java, unless it has caused a medical (eg mental health) 
problem we should know about. <grin>
* Understanding of performance and scalability principles and issues.

Work environment:
* Onsite in NYC/NY Metro area strongly preferred.
* Don't let the above deter you - we can make telecommuting work under the 
right conditions.
* Competitive compensation - I know what good people are worth and have 
managed to beat that into the management with a clue-by-four.
* Flex time - relaxed cluture - getting your job done is all that matters.
---

Shoot me a resume, CV, writeup of what you've done, absolutely anything. Put 
[twisted-resume] in the subject. Include your phone number, time zone and a 
good time to call. I'll respond to everyone.

cheers,
-p 




From itamar at itamarst.org  Mon Dec 19 17:03:26 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 19 Dec 2005 17:03:26 -0500
Subject: [Twisted-Python] Re: Problem w/ TNPE Example on Windows
In-Reply-To: <do73o3$coi$1@sea.gmane.org>
References: <43A5D4CE.6080205@t-online.de>
	<20051218230939.GE8331@home.puzzling.org> <43A6DE65.9040908@fettig.net>
	<1135011736.15405.2.camel@localhost.localdomain>
	<do73o3$coi$1@sea.gmane.org>
Message-ID: <1135029806.23645.28.camel@localhost.localdomain>

On Mon, 2005-12-19 at 21:06 +0100, Patrick M?zard wrote:

> Talking about that, what is the exact status of the IOCP reactor? I have 
> seen J. Johnson commiting patches related to process creation recently. 
> Are there still mandatory features missing to have complete reactor?

At the minimum, producer/consumer API and passing tests; TLS/SSL support
would also be a very useful addition however.




From abe at fettig.net  Mon Dec 19 22:52:15 2005
From: abe at fettig.net (Abe Fettig)
Date: Mon, 19 Dec 2005 22:52:15 -0500
Subject: [Twisted-Python] Problem w/ TNPE Example on Windows
In-Reply-To: <1135011736.15405.2.camel@localhost.localdomain>
References: <43A5D4CE.6080205@t-online.de>	<20051218230939.GE8331@home.puzzling.org>
	<43A6DE65.9040908@fettig.net>
	<1135011736.15405.2.camel@localhost.localdomain>
Message-ID: <43A77FEF.1000102@fettig.net>

Itamar Shtull-Trauring wrote:
> On Mon, 2005-12-19 at 11:23 -0500, Abe Fettig wrote:
> 
> 
>>And unfortunately I failed to notice this while writing the book.
>>Apologies to Windows users. Is it really impossible to do asynchronous
>>IO on stdin/out on Windows? Anybody have any ideas for working around
>>the lack of fcntl? I'd be happy to contribute to an effort to make
>>twisted.internet.stdio run on Windows.
> 
> 
> *mumble* *mumble* *blush*. That's my fault, since I did know that. 

No, it's my fault. Don't worry about it. The buck stops here. You can
make it up to me by helping make twisted.internet.stdio work on Windows
though :-)

> It may be possible to do stdio on Windows using the IOCP reactor.

According to the inline docs, twisted.internet.stdio is:

  unstable (pending deprecation in favor of a reactor-based API)
  Future Plans:
    support for stderr, perhaps
    Rewrite to use the reactor instead of an ad-hoc
        mechanism for connecting
        protocols to transport.

So for now, stdio in Twisted isn't reactor specific. As we're discussing
here, though, it only works on Unixy operating systems. Would it be sane
to try and import the fcntl module, and if that fails fall back to using
threads to fake async stdio?

Abe



From p.mayers at imperial.ac.uk  Tue Dec 20 12:52:55 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 20 Dec 2005 17:52:55 +0000
Subject: [Twisted-Python] Twisted conch bad key signatures
Message-ID: <43A844F7.1090507@imperial.ac.uk>

All,

I've got an SSH server (Extremeware 7.3 router) which OpenSSH can SFTP 
into without problem but Twisted Conch reports:

2005/12/20 17:50 GMT [-] Log opened.
2005/12/20 17:50 GMT [-] Enabling Multithreading.
2005/12/20 17:50 GMT [Transport,client] kex alg, key alg: 
diffie-hellman-group1-sha1 ssh-dss
2005/12/20 17:50 GMT [Transport,client] client->server: 3des-cbc 
hmac-md5 none
2005/12/20 17:50 GMT [Transport,client] server->client: 3des-cbc 
hmac-md5 none

2005/12/20 17:50 GMT [Transport,client] host key fingerprint: 
51:11:e1:76:89:f8:cd:af:8c:09:42:9e:37:a8:0a:36
2005/12/20 17:50 GMT [Transport,client] Disconnecting with error, code 3
         reason: bad signature
2005/12/20 17:50 GMT [Transport,client] connection lost
2005/12/20 17:50 GMT [Transport,client] Stopping factory 
<twisted.internet.protocol._InstanceFactory instance at 0xb71b6b0c>
2005/12/20 17:50 GMT [-] Received SIGINT, shutting down.
2005/12/20 17:50 GMT [-] Main loop terminated.

(cftp does the same). What debugging do I need to do to identify the cause?



From p.mayers at imperial.ac.uk  Tue Dec 20 13:09:58 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 20 Dec 2005 18:09:58 +0000
Subject: [Twisted-Python] Twisted SCP
Message-ID: <43A848F6.7090608@imperial.ac.uk>

All,

This is a very very horrible bit of code (stupid undocumented RCP junk), 
but a basic single-file remote -> local SCP can be done using the 
attached code.

It's clearly as dumb as a box of rocks, but seems to work against 
OpenSSH and Cisco IOS, so is fine for what we need.

If anyone knows why the sftp stuff in it doesn't work that would be useful.

Anyway, hope it's helpful to someone. If I get time over or after xmas 
I'll clean it up - it seems pretty clear to me how to make the code 
pretty modular without it descending into the mess that OpenSSH and 
Putty's SCP/SFTP code has become (with the greatest of respect to the 
developers involved of course)
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: tscp
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051220/eca1dc4a/attachment.txt 

From mcfletch at rogers.com  Tue Dec 20 13:25:10 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Tue, 20 Dec 2005 13:25:10 -0500
Subject: [Twisted-Python] I'm missing something on SSL-encrypted PB
	connections...
Message-ID: <43A84C86.4020805@rogers.com>

Hi all,

I'm working on refining a load-sharing mechanism to run across a number 
of pb connections (sharing processor time and/or access to a network).  
One of the requirements I have is that I must be able to run the pb 
connections over encrypted channels.  However, when I try to set up an 
SSL-encrypted server (using the same mechanisms I've used for setting up 
SSL-encrypted Nevow sites and the same ones in the echo examples) I 
always get a connection refused error on the client when I try to connect.

I'm using self-generated keys from:

    openssl genrsa > privkey.pem
    openssl req -new -x509 -key privkey.pem -out cacert.pem -days 1000

I'm guessing this has to be some incredibly stupid error, but I'm not 
seeing it in a few hours of poking now, so this is basically a request 
for more eyes.  I've reduced the failing code down to a modification of 
the pbecho* example code (attached).  With keys generated as above in 
the current directory the server starts fine, but the client always 
receives:

    Failure: twisted.internet.error.ConnectionRefusedError: Connection
    was refused by other side: 111: Connection refused.

when it tries to connect.

The only other code I've found trying to use SSL + PB is connecting it 
up to a multi-service of some sort, which I don't *think* should be 
necessary.

Thoughts appreciated,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com

-------------- next part --------------
A non-text attachment was scrubbed...
Name: pbecho_ssl.py
Type: text/x-python
Size: 1416 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20051220/ae2f7f54/attachment.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pbechoclient_ssl.py
Type: text/x-python
Size: 856 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20051220/ae2f7f54/attachment-0001.py 

From itamar at itamarst.org  Tue Dec 20 13:41:49 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Dec 2005 13:41:49 -0500
Subject: [Twisted-Python] I'm missing something on SSL-encrypted PB
	connections...
In-Reply-To: <43A84C86.4020805@rogers.com>
References: <43A84C86.4020805@rogers.com>
Message-ID: <1135104110.9228.3.camel@localhost.localdomain>

On Tue, 2005-12-20 at 13:25 -0500, Mike C. Fletcher wrote:

> I'm working on refining a load-sharing mechanism to run across a number 
> of pb connections (sharing processor time and/or access to a network).  
> One of the requirements I have is that I must be able to run the pb 
> connections over encrypted channels.  However, when I try to set up an 
> SSL-encrypted server (using the same mechanisms I've used for setting up 
> SSL-encrypted Nevow sites and the same ones in the echo examples) I 
> always get a connection refused error on the client when I try to connect.

That's because you haven't actually started listening on the port; you
forgot to do serve.startService() in your code. Or, since you're using
reactor directly, you can just reactor.listenSSL instead of using a
Service.





From mcfletch at rogers.com  Tue Dec 20 19:59:30 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Tue, 20 Dec 2005 19:59:30 -0500
Subject: [Twisted-Python] I'm missing something on SSL-encrypted
	PB	connections...
In-Reply-To: <1135104110.9228.3.camel@localhost.localdomain>
References: <43A84C86.4020805@rogers.com>
	<1135104110.9228.3.camel@localhost.localdomain>
Message-ID: <43A8A8F2.8030902@rogers.com>

Itamar Shtull-Trauring wrote:

>On Tue, 2005-12-20 at 13:25 -0500, Mike C. Fletcher wrote:
>  
>
... stupidity ...

>That's because you haven't actually started listening on the port; you
>forgot to do serve.startService() in your code. Or, since you're using
>reactor directly, you can just reactor.listenSSL instead of using a
>Service.
>  
>
Duh!  Sigh, I figured it had to be something so blindingly stupid I just 
couldn't see it.

Sorry for the wasted bandwidth, and thanks for the clue-stick,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From mcfletch at rogers.com  Tue Dec 20 22:58:49 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Tue, 20 Dec 2005 22:58:49 -0500
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
Message-ID: <43A8D2F9.1020305@rogers.com>

This is one of those problems where I've got a solution, but it *seems* 
like it should be something that can be done that's a little less 
drastic.  Here's the problem:

    Want to expose a simple data-type (in this case a sub-class of
    tuple, the PySNMP OID object) to allow for transmission across pb
    queries and returns.

Now, I've tried quite a number of iterations on this, from:

    jelly.globalSecurity.allowInstancesOf(
        oid.OID,
    )

through using classes like this:

    class PBTypeAllowingServerFactory( pb.PBServerFactory ):
        """Allow various types to be transported"""
        def buildProtocol(self, addr):
            """Return a Broker attached to me (as the service provider).
            """
            broker = pb.PBServerFactory.buildProtocol( self, addr )
            broker.security.allowInstancesOf(
                oid.OID,
            )
            return broker

    class PBTypeAllowingClientFactory( pb.PBClientFactory ):
        def clientConnectionMade(self, broker):
            """Expand the types allowed to be communicated"""
            broker.security.allowInstancesOf(
                oid.OID,
            )
            return pb.PBClientFactory.clientConnectionMade( self, broker )

but whenever I try using jelly for the encoding it complains that:

    Traceback (most recent call last):
      File "/home/mcfletch/pylive/Twisted/twisted/internet/defer.py",
    line 190, in addCallbacks
        self._runCallbacks()
      File "/home/mcfletch/pylive/Twisted/twisted/internet/defer.py",
    line 358, in _runCallbacks
        self.result = callback(self.result, *args, **kw)
      File
    "/home/mcfletch/pylive/cinemon/cinespread/metaperspective.py", line
    216, in callWhenFree
        return perspective.callRemote( *args, **named ).addErrback(
      File "/home/mcfletch/pylive/Twisted/twisted/spread/pb.py", line
    382, in callRemote
        _name, args, kw)
    --- <exception caught here> ---
      File "/home/mcfletch/pylive/Twisted/twisted/spread/pb.py", line
    857, in _sendMessage
        netArgs = self.serialize(args, perspective=perspective,
    method=message)
      File "/home/mcfletch/pylive/Twisted/twisted/spread/pb.py", line
    811, in serialize
        return jelly(object, self.security, None, self)
      File "/home/mcfletch/pylive/Twisted/twisted/spread/jelly.py", line
    896, in jelly
        return _Jellier(taster, persistentStore, invoker).jelly(object)
      File "/home/mcfletch/pylive/Twisted/twisted/spread/jelly.py", line
    480, in jelly
        sxp.append(self.jelly(item))
      File "/home/mcfletch/pylive/Twisted/twisted/spread/jelly.py", line
    476, in jelly
        sxp.append(self.jelly(item))
      File "/home/mcfletch/pylive/Twisted/twisted/spread/jelly.py", line
    511, in jelly
        raise InsecureJelly("Type not allowed for object: %s %s" %
    twisted.spread.jelly.InsecureJelly: Type not allowed for object:
    <class 'cinemon.snmp.oidobject.OID'> .1.3.6.1.2.1.1.4.0

to hack around it I've built my own generic (security restricted) 
pickle-like system, and freeze the parameters and return values before 
passing them across pb... which just seems *so* wrong.  My system is 
almost as large as jelly, and is just entirely redundant code other than 
its allowing me to add new classes to the set allowed.

Anyway, I'm sure I'm once again missing something blindingly obvious, 
but given that I missed the logical equivalent of turning on the power 
switch earlier I thought I'd ask if someone had a recipe for this type 
of operation.  BTW, this seems like something that should be covered in 
the tutorial for pb, as it would seem like a common need to add a 
low-level object-type or two to the set allowed.

Freezer-isn't-so-wonderful-I-want-to-use-it-pointlessly y'rs,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From andrew-twisted at puzzling.org  Tue Dec 20 23:30:48 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 21 Dec 2005 15:30:48 +1100
Subject: [Twisted-Python] Problem w/ TNPE Example on Windows
In-Reply-To: <BD442F5B-56C2-4A97-A406-E91E1AB8D4B7@fuhm.net>
References: <43A5D4CE.6080205@t-online.de>
	<20051218230939.GE8331@home.puzzling.org>
	<43A6DE65.9040908@fettig.net>
	<BD442F5B-56C2-4A97-A406-E91E1AB8D4B7@fuhm.net>
Message-ID: <20051221043048.GK8331@home.puzzling.org>

On Mon, Dec 19, 2005 at 01:19:34PM -0500, James Y Knight wrote:
> On Dec 19, 2005, at 11:23 AM, Abe Fettig wrote:
[...]
> >And unfortunately I failed to notice this while writing the book.
> >Apologies to Windows users. Is it really impossible to do asynchronous
> >IO on stdin/out on Windows? Anybody have any ideas for working around
> >the lack of fcntl? I'd be happy to contribute to an effort to make
> >twisted.internet.stdio run on Windows.
> 
> In the worst case, it could be emulated using threads doing blocking  
> read/write.

I think this is the simplest and most practical way to implement it on windows.
I suggest anyone interested in implementing it on windows tries this method.

-Andrew.




From johann.borck at densedata.com  Wed Dec 21 00:23:16 2005
From: johann.borck at densedata.com (Johann Borck)
Date: Wed, 21 Dec 2005 06:23:16 +0100
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
In-Reply-To: <43A8D2F9.1020305@rogers.com>
References: <43A8D2F9.1020305@rogers.com>
Message-ID: <43A8E6C4.9070306@densedata.com>

hi, this is from the pb docs: http://twistedmatrix.com/projects/core/documentation/howto/pb-copyable.html

class ReceiverPond(pb.RemoteCopy, LilyPond):
    pass


pb.setUnjellyableForClass(CopyPond, ReceiverPond)#        <---  Did you forget this? 

I only got this error, when i forgot this line. wow, reimplementing jelly?!! seems like you should have asked before :)

Johann




From foom at fuhm.net  Wed Dec 21 02:00:13 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 21 Dec 2005 00:00:13 -0700
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EoxxN-0005fO-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-12-14 07:00:01.820000:
 Bugs opened: 10   Bugs closed: 9   Total open bugs: 501 (+1)
  Urgent: 1 (+0)
  Bug: 240 (+2)
  Feature: 177 (-1)
  Wish: 83 (+0)

New / Reopened Bugs
______________________
                    ==== Bug ====
[CORE, TRIAL] Raising SkipTest in setUp is treated as an error  (12 hours ago)
       http://twistedmatrix.com/bugs/issue1372 opened by exarkun

[CORE, TESTS] Possible race condition in test_tcp  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1370 opened by jml

[CORE, TESTS] Possible race condition in test_tcp  (yesterday)
       http://twistedmatrix.com/bugs/issue1371 opened by jml

iocpreactor (udp) socket.error: (10049, "Can't assign requested address")  (yesterday)
       http://twistedmatrix.com/bugs/issue1369 opened by ghazel

[CORE, FTP] FTP server tests are a mess  (2 days ago)
       http://twistedmatrix.com/bugs/issue1368 opened by exarkun

[CORE, TRIAL] If setUp returns an unfired Deferred, test methods cannot use wait()  (2 days ago)
       http://twistedmatrix.com/bugs/issue1367 opened by exarkun

[CORE, DOCUMENTATION] TwistedQuotes documentation references external source files  (2 days ago)
       http://twistedmatrix.com/bugs/issue1366 opened by exarkun

select.error: (10022, 'Windows Error 0x2726')  (3 days ago)
       http://twistedmatrix.com/bugs/issue1365 opened by ghazel

                    ==== Feature ====
[CORE] [PATCH] re-installation of the same reactor  (6 days ago)
       http://twistedmatrix.com/bugs/issue1364 opened by antony

[CORE] [PATCH] broadcasting over udp causes warning  (6 days ago)
       http://twistedmatrix.com/bugs/issue1363 opened by antony

Bugs Closed
______________________
                    ==== Bug ====
Separate reporter result handling from output  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1349 opened by jml, closed by jml

[CORE, TESTS] Possible race condition in test_tcp  (yesterday)
       http://twistedmatrix.com/bugs/issue1370 opened by jml, closed by jml

[CORE, TRIAL] Test case run() methods to use Deferreds internally  (3 weeks ago)
       http://twistedmatrix.com/bugs/issue1341 opened by jml, closed by jml

[TRIAL] Trial doesn't cut tracebacks properly  (13 months ago)
       http://twistedmatrix.com/bugs/issue773 opened by jknight, closed by jml

[TRIAL] [PATCH] Traceback running a test with broken setUp method  (1 week ago)
       http://twistedmatrix.com/bugs/issue1359 opened by headly, closed by jml

[BACKPORT, WEB2] twisted.web2.stream and wsgi  (7 days ago)
       http://twistedmatrix.com/bugs/issue1362 opened by mkerrin, closed by jknight

                    ==== Feature ====
Trial spews color codes by default  on win32  (4 months ago)
       http://twistedmatrix.com/bugs/issue1141 opened by TimothyFitz, closed by jml

[DOCUMENTATION, TRIAL] Draft release notes for the recent and upcoming Trial changes  (3 months ago)
       http://twistedmatrix.com/bugs/issue1172 opened by jml, closed by jml

[TRIAL] TASK: Deprecate setUpClass/tearDownClass.  Provide replacement  (2 months ago)
       http://twistedmatrix.com/bugs/issue1206 opened by jml, closed by jml




From z3p at twistedmatrix.com  Wed Dec 21 04:07:56 2005
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Wed, 21 Dec 2005 04:07:56 -0500
Subject: [Twisted-Python] Twisted conch bad key signatures
In-Reply-To: <43A844F7.1090507@imperial.ac.uk>
References: <43A844F7.1090507@imperial.ac.uk>
Message-ID: <43A91B6C.3060701@twistedmatrix.com>

Phil Mayers wrote:

> All,
>
> I've got an SSH server (Extremeware 7.3 router) which OpenSSH can SFTP
> into without problem but Twisted Conch reports:
>
> 2005/12/20 17:50 GMT [-] Log opened.
> 2005/12/20 17:50 GMT [-] Enabling Multithreading.
> 2005/12/20 17:50 GMT [Transport,client] kex alg, key alg:
> diffie-hellman-group1-sha1 ssh-dss
> 2005/12/20 17:50 GMT [Transport,client] client->server: 3des-cbc
> hmac-md5 none
> 2005/12/20 17:50 GMT [Transport,client] server->client: 3des-cbc
> hmac-md5 none
>
> 2005/12/20 17:50 GMT [Transport,client] host key fingerprint:
> 51:11:e1:76:89:f8:cd:af:8c:09:42:9e:37:a8:0a:36
> 2005/12/20 17:50 GMT [Transport,client] Disconnecting with error, code 3
>         reason: bad signature
> 2005/12/20 17:50 GMT [Transport,client] connection lost
> 2005/12/20 17:50 GMT [Transport,client] Stopping factory
> <twisted.internet.protocol._InstanceFactory instance at 0xb71b6b0c>
> 2005/12/20 17:50 GMT [-] Received SIGINT, shutting down.
> 2005/12/20 17:50 GMT [-] Main loop terminated.
>
> (cftp does the same). What debugging do I need to do to identify the
> cause?

Run OpenSSH with debugging on.  I'm guessing that they're enabling a workaround for a non-compliant server.

-p
-- 
       Paul Swartz
(o_    http://www.twistedmatrix.com/users/z3p.twistd/  _o)
//\    z3p at twistedmatrix.com                           /\\
V_/_   AIM: z3penguin                                 _\_V->




From itamar at itamarst.org  Wed Dec 21 10:41:31 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 21 Dec 2005 10:41:31 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15355 - Add
	twisted.python.pymodules.datetime and use it if "import datetime"
	fails.
In-Reply-To: <E1EoskY-0007Q5-00@wolfwood>
References: <E1EoskY-0007Q5-00@wolfwood>
Message-ID: <1135179691.30771.1.camel@localhost.localdomain>

On Tue, 2005-12-20 at 18:26 -0700, Wilfredo Sanchez wrote:

> +try:
> +    import datetime
> +except ImportError:
> +    import twisted.python.pymodules.datetime as datetime

twisted.python.compat is an even better place, so other modules can
benefit (check out how other compat stuff is handled).





From p.mayers at imperial.ac.uk  Wed Dec 21 10:51:54 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 21 Dec 2005 15:51:54 +0000
Subject: [Twisted-Python] Twisted conch bad key signatures
In-Reply-To: <43A91B6C.3060701@twistedmatrix.com>
References: <43A844F7.1090507@imperial.ac.uk>
	<43A91B6C.3060701@twistedmatrix.com>
Message-ID: <43A97A1A.2040105@imperial.ac.uk>

Paul Swartz wrote:
> 
> Run OpenSSH with debugging on.  I'm guessing that they're enabling a workaround for a non-compliant server.
> 
> -p

Hmm. psftp (Putty SFTP) reports:

Server version: SSH-2.0-2.0.12 (non-commercial)
We believe remote version has SSH2 HMAC bug
We claim version: SSH-2.0-PuTTY-Release-0.54
Using SSH protocol version 2
Doing Diffie-Hellman key exchange
Host key fingerprint is:
ssh-dss 1024 51:11:e1:76:89:f8:cd:af:8c:09:42:9e:37:a8:0a:36
Initialised Blowfish client->server encryption
Initialised Blowfish server->client encryption
Using username "admin".

...but the Twisted SFTP bombs out in _continueGEX_GROUP, well before the 
HMAC bug becomes an issue.

The Putty, OpenSSH and (sadly) Twisted Conch code are more or less 
incomprehensible at first glance (dynamic imports, for hot rooting 
action!) so I think I'll have to leave this to one side.



From william.lewis at uk.bnpparibas.com  Wed Dec 21 12:59:24 2005
From: william.lewis at uk.bnpparibas.com (william.lewis at uk.bnpparibas.com)
Date: Wed, 21 Dec 2005 17:59:24 +0000
Subject: [Twisted-Python] Receiving a root from a pb client
Message-ID: <OF2099ECF4.E042CF41-ON802570DE.005F4171-802570DE.0062D271@bnpparibas.com>

Hi,

I am using pb to communicate in a client-server configuration. My client 
inherits from PBClientFactory.
My server has a remote_take_root() method by which the client can connect 
to the server and pass in
its root, thus allowing two-way communication.

Is there anyway for the server to re-establish the connection (should it 
go down)  in this setup, or is
this the sole responsibility of the client?

Thanks

William Lewis


This message and any attachments (the "message") is 
intended solely for the addressees and is confidential. 
If you receive this message in error, please delete it and
immediately notify the sender. Any use not in accord with
its purpose, any dissemination or disclosure, either whole
or partial, is prohibited except formal approval. The internet
can not guarantee the integrity of this message.
BNP PARIBAS (and its subsidiaries) shall (will) not
therefore be liable for the message if modified. 

**********************************************************************************************

BNP Paribas Private Bank London Branch is authorised
by CECEI & AMF and is regulated by the Financial Services
Authority for the conduct of its investment business in
the United Kingdom.

BNP Paribas Securities Services London Branch is authorised 
by CECEI & AMF and is regulated by the Financial Services 
Authority for the conduct of its investment business in 
the United Kingdom.
  
BNP Paribas Fund Services UK Limited is authorised and 
regulated by the Financial Services Authority

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051221/2feb19d5/attachment.htm 

From mcfletch at rogers.com  Wed Dec 21 21:06:51 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Wed, 21 Dec 2005 21:06:51 -0500
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
In-Reply-To: <43A8E6C4.9070306@densedata.com>
References: <43A8D2F9.1020305@rogers.com> <43A8E6C4.9070306@densedata.com>
Message-ID: <43AA0A3B.5000606@rogers.com>

Johann Borck wrote:

>hi, this is from the pb docs: http://twistedmatrix.com/projects/core/documentation/howto/pb-copyable.html
>
>class ReceiverPond(pb.RemoteCopy, LilyPond):
>    pass
>
>
>pb.setUnjellyableForClass(CopyPond, ReceiverPond)#        <---  Did you forget this? 
>
>I only got this error, when i forgot this line. wow, reimplementing jelly?!! seems like you should have asked before :)
>
>Johann
>  
>
Thanks for the pointer.  I've read that document, and may just be
missing the point here.  I don't want all of the thousands upon
thousands of OID objects to be lugging around extra dictionaries
inherited from pb.RemoteCopy (they're just tuples of integers,
implemented as such because they are so extremely common in the
system).  I want the objects to actually *be* OID objects on the client end.

That is, what I'm looking for is a way to tell jelly "when you see an
object like this, linearise it like this, and reconstitute it like
this", rather than creating a different type Y and using that in place
of the object on the client side.

Yes, probably should have asked before reimplementing jelly, but I was
wanting to get a spike test done that evening.

Thanks all,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com





From ml.flex at gmail.com  Thu Dec 22 03:35:14 2005
From: ml.flex at gmail.com (Micky Latowicki)
Date: Thu, 22 Dec 2005 10:35:14 +0200
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
In-Reply-To: <43AA0A3B.5000606@rogers.com>
References: <43A8D2F9.1020305@rogers.com> <43A8E6C4.9070306@densedata.com>
	<43AA0A3B.5000606@rogers.com>
Message-ID: <d27002d90512220035r12a00278y@mail.gmail.com>

From what I know, tuples jelly just fine. I think that what you're
serializing isn't a tuple, but rather a cinemon.snmp.oidobject.OID, or
something that contains a reference to that. Is that a tuple? if it is, how
is it defined?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051222/98bb835b/attachment.htm 

From itamar at itamarst.org  Thu Dec 22 11:17:47 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 22 Dec 2005 11:17:47 -0500
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
In-Reply-To: <43AA0A3B.5000606@rogers.com>
References: <43A8D2F9.1020305@rogers.com> <43A8E6C4.9070306@densedata.com>
	<43AA0A3B.5000606@rogers.com>
Message-ID: <1135268268.22336.0.camel@localhost.localdomain>

On Wed, 2005-12-21 at 21:06 -0500, Mike C. Fletcher wrote:

> That is, what I'm looking for is a way to tell jelly "when you see an
> object like this, linearise it like this, and reconstitute it like
> this", rather than creating a different type Y and using that in place
> of the object on the client side.

I am pretty sure newpb, which Brian Warner was threatening to merge any
day now, will support this much better than PB does.




From mcfletch at vrplumber.com  Thu Dec 22 11:35:48 2005
From: mcfletch at vrplumber.com (Mike C. Fletcher)
Date: Thu, 22 Dec 2005 11:35:48 -0500
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
In-Reply-To: <d27002d90512220035r12a00278y@mail.gmail.com>
References: <43A8D2F9.1020305@rogers.com> <43A8E6C4.9070306@densedata.com>	
	<43AA0A3B.5000606@rogers.com>
	<d27002d90512220035r12a00278y@mail.gmail.com>
Message-ID: <43AAD5E4.2080601@vrplumber.com>

Micky Latowicki wrote:

> From what I know, tuples jelly just fine. I think that what you're 
> serializing isn't a tuple, but rather a cinemon.snmp.oidobject.OID, or 
> something that contains a reference to that. Is that a tuple? if it 
> is, how is it defined?
>
cinemon.snmp.oidobject.OID and pysnmp.asn1.oid.OID are tuple sub-classes 
with __slots__ defined to () such that they have the internal layout of 
tuples.  That's done to improve the efficiency of PySNMP, TwistedSNMP 
and Cinemon, the classes just add new methods, no new data is stored in 
the instance's object structure.

Bald tuples do, indeed, transmit fine, but sub-classes do not.

Enjoy,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From mcfletch at vrplumber.com  Thu Dec 22 11:39:56 2005
From: mcfletch at vrplumber.com (Mike C. Fletcher)
Date: Thu, 22 Dec 2005 11:39:56 -0500
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
In-Reply-To: <1135268268.22336.0.camel@localhost.localdomain>
References: <43A8D2F9.1020305@rogers.com> <43A8E6C4.9070306@densedata.com>	
	<43AA0A3B.5000606@rogers.com>
	<1135268268.22336.0.camel@localhost.localdomain>
Message-ID: <43AAD6DC.6020105@vrplumber.com>

Itamar Shtull-Trauring wrote:

>On Wed, 2005-12-21 at 21:06 -0500, Mike C. Fletcher wrote:
>
>  
>
>>That is, what I'm looking for is a way to tell jelly "when you see an
>>object like this, linearise it like this, and reconstitute it like
>>this", rather than creating a different type Y and using that in place
>>of the object on the client side.
>>    
>>
>
>I am pretty sure newpb, which Brian Warner was threatening to merge any
>day now, will support this much better than PB does.
>  
>
Aw, you're just trying to make me feel better about reimplementing 
jelly, I'm sure :) .

Guess I'll wait for newpb to emerge and go back to freezing everything 
until then.

Have fun,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From itamar at itamarst.org  Thu Dec 22 12:11:30 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 22 Dec 2005 12:11:30 -0500
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
In-Reply-To: <43AAD5E4.2080601@vrplumber.com>
References: <43A8D2F9.1020305@rogers.com> <43A8E6C4.9070306@densedata.com>
	<43AA0A3B.5000606@rogers.com>
	<d27002d90512220035r12a00278y@mail.gmail.com>
	<43AAD5E4.2080601@vrplumber.com>
Message-ID: <1135271491.22336.3.camel@localhost.localdomain>

On Thu, 2005-12-22 at 11:35 -0500, Mike C. Fletcher wrote:

> cinemon.snmp.oidobject.OID and pysnmp.asn1.oid.OID are tuple sub-classes 
> with __slots__ defined to () such that they have the internal layout of 
> tuples.  That's done to improve the efficiency of PySNMP, TwistedSNMP 
> and Cinemon, the classes just add new methods, no new data is stored in 
> the instance's object structure.
> 
> Bald tuples do, indeed, transmit fine, but sub-classes do not.

Should be possible to have existing jelly support those, I bet.




From dkarbott at comcast.net  Thu Dec 22 14:26:45 2005
From: dkarbott at comcast.net (dkarbott at comcast.net)
Date: Thu, 22 Dec 2005 19:26:45 +0000
Subject: [Twisted-Python] Analog to asyncore.dispatcher.handle_write()?
Message-ID: <122220051926.27005.43AAFDF50000BAB90000697D22028887449B9B010D9D0E050B@comcast.net>

Hi,
I'm new to twisted so this may be a simple question.

I want to write a twisted.internet.protocol.Protocol implementation which doesn't write too far ahead of the socket it's writing into.

How do I get a notification when the underlying socket is ready to
write more data?

Any info would be much appreciated.

-- Darrell



From itamar at itamarst.org  Thu Dec 22 14:47:05 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 22 Dec 2005 14:47:05 -0500
Subject: [Twisted-Python] Analog to asyncore.dispatcher.handle_write()?
In-Reply-To: <122220051926.27005.43AAFDF50000BAB90000697D22028887449B9B010D9D0E050B@comcast.net>
References: <122220051926.27005.43AAFDF50000BAB90000697D22028887449B9B010D9D0E050B@comcast.net>
Message-ID: <1135280825.22336.16.camel@localhost.localdomain>

On Thu, 2005-12-22 at 19:26 +0000, dkarbott at comcast.net wrote:

> I want to write a twisted.internet.protocol.Protocol implementation
> which doesn't write too far ahead of the socket it's writing into.
> 
> How do I get a notification when the underlying socket is ready to
> write more data?

transports have a registerProducer(consumer, streaming) method, as they
are consumers - see twisted.internet.interface.IConsumer and IProducer.
You would implement a producer (the protocol instance, for example) with
the resumeProducing, pauseProducing, stopProducing methods which would
get called depending on socket state.




From foom at fuhm.net  Thu Dec 22 17:54:54 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu, 22 Dec 2005 17:54:54 -0500
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <43722C5D.901@carmensystems.com>
References: <60ed19d40511051714o6565bd29nd6885511808fb2ae@mail.gmail.com>	<20051106022657.10365.1687580705.divmod.quotient.4496@ohm>	<d06a5cd30511070547o59a504e2p@mail.gmail.com>
	<FC5A7D49-45C9-48BD-853E-B80D6628E8C7@junklight.com>
	<43722C5D.901@carmensystems.com>
Message-ID: <3F1FC04D-00D2-43C9-9105-8DE0CD63E2BB@fuhm.net>

I'm going to vote for dropping Python 2.2 support in Twisted trunk  
now. Twisted 2.1 is a fine release to use if you want to use an  
ancient version of python. Keeping compat is a pain in the ass. And  
lest exarkun complain about lack of enthusiasm: I'll declare myself  
quite enthusiastic about the concept. :)

James



From jcase at steuber.com  Thu Dec 22 18:07:07 2005
From: jcase at steuber.com (John Case)
Date: Thu, 22 Dec 2005 18:07:07 -0500
Subject: [Twisted-Python] python crash when running sample code from Twisted
	Book....
Message-ID: <43AB319B.6080309@steuber.com>

Hello!
I am working through the Twisted Network Programming Essentials book by 
Abe Fettig, using python24 and twisted 2.1 on a Win2k sp4 Server 
platform. Python crashes with a memory reference error on 
'reactor.run()' when I run this code (connectiontest.py from Chap 2):

Any suggestions greatly appreciated!!!

****

from twisted.internet import reactor, defer, protocol

class CallbackAndDisconnectProtocol(protocol.Protocol):
    def connectionMade(self):
        self.factory.deferred.callback("Connected!")
        self.transport.loseConnection()

class ConnectionTestFactory(protocol.ClientFactory):
    protocol = CallbackAndDisconnectProtocol

    def __init__(self):
        self.deferred = defer.Deferred()

    def clientConnectionFailed(self, connector, reason):
        self.deferred.errback(reason)

def testConnect(host, port):
    testFactory = ConnectionTestFactory()
    reactor.connectTCP(host, port, testFactory)
    return testFactory.deferred

def handleSuccess(result, port):
    print "Connected to port %i" % port
    reactor.stop()

def handleFailure(failure, port):
    print "Error connecting to port %i: %s" % (
        port, failure.getErrorMessage())
    reactor.stop()

if __name__ == "__main__":
    import sys
    #if not len(sys.argv) == 3:
     #   print "Usage: connectiontest.py host port"
      #  sys.exit(1)
   
    host = 'localhost'
    port = 82
    connecting = testConnect(host, port)
    connecting.addCallback(handleSuccess, port)
    connecting.addErrback(handleFailure, port)
    reactor.run()



From adam at atommic.com  Thu Dec 22 18:34:24 2005
From: adam at atommic.com (Adam Atlas)
Date: Thu, 22 Dec 2005 18:34:24 -0500
Subject: [Twisted-Python] Custom transports
Message-ID: <62B236F8-1E28-41A6-982E-10F70C1D2583@atommic.com>

Hello,

What would I do to implement a custom transport within the Twisted  
framework? That is, I'd like to be able to add custom listen___ and  
connect___ methods to the reactor, so that existing protocols can run  
over a new backend transport protocol. What API would I use for this?

-- Adam



From jml at mumak.net  Fri Dec 23 01:05:19 2005
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 23 Dec 2005 17:05:19 +1100
Subject: [Twisted-Python] Trial and ImportErrors
Message-ID: <d06a5cd30512222205g45aeaa4evc5937809bbc840f9@mail.gmail.com>

Hello,

For a while I've been thinking of changing Trial so that import errors
flag the test suite as failed.
This would mean the buildbot would go red if things fail to import.

What do you all think?

jml



From jml at mumak.net  Fri Dec 23 01:12:16 2005
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 23 Dec 2005 17:12:16 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] r15363 - Merge the DAV
	branch to trunk.
In-Reply-To: <E1EpEKJ-0007se-00@wolfwood>
References: <E1EpEKJ-0007se-00@wolfwood>
Message-ID: <d06a5cd30512222212t7a07416bx9df9bdc07151e2d9@mail.gmail.com>

On 12/22/05, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
> Author: wsanchez
> Date: Wed Dec 21 17:28:58 2005
> New Revision: 15363
>
> Added:
>    trunk/twisted/python/pymodules/LICENSE-pypy.txt
>       - copied unchanged from r15360, branches/wsanchez/dav/twisted/python/pymodules/LICENSE-pypy.txt
>    trunk/twisted/python/pymodules/datetime.py
>       - copied unchanged from r15360, branches/wsanchez/dav/twisted/python/pymodules/datetime.py
>    trunk/twisted/web2/dav/
>       - copied from r15360, branches/wsanchez/dav/twisted/web2/dav/
<snip>

twisted.web2.dav.test.util uses tempfile.mkdtemp, which is unavailable
in Python 2.2.  We still support Python 2.2 (ungh!).



From andrew-twisted at puzzling.org  Fri Dec 23 01:26:30 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 23 Dec 2005 17:26:30 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] r15363 - Merge the DAV
	branch to trunk.
In-Reply-To: <d06a5cd30512222212t7a07416bx9df9bdc07151e2d9@mail.gmail.com>
References: <E1EpEKJ-0007se-00@wolfwood>
	<d06a5cd30512222212t7a07416bx9df9bdc07151e2d9@mail.gmail.com>
Message-ID: <20051223062630.GC8148@home.puzzling.org>

On Fri, Dec 23, 2005 at 05:12:16PM +1100, Jonathan Lange wrote:
> On 12/22/05, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
> > Author: wsanchez
> > Date: Wed Dec 21 17:28:58 2005
> > New Revision: 15363
> >
> > Added:
> >    trunk/twisted/python/pymodules/LICENSE-pypy.txt
> >       - copied unchanged from r15360, branches/wsanchez/dav/twisted/python/pymodules/LICENSE-pypy.txt
> >    trunk/twisted/python/pymodules/datetime.py
> >       - copied unchanged from r15360, branches/wsanchez/dav/twisted/python/pymodules/datetime.py
> >    trunk/twisted/web2/dav/
> >       - copied from r15360, branches/wsanchez/dav/twisted/web2/dav/
> <snip>
> 
> twisted.web2.dav.test.util uses tempfile.mkdtemp, which is unavailable
> in Python 2.2.  We still support Python 2.2 (ungh!).

Luckily twisted.trial.unittest.TestCase has a mktemp method that works even in
Python 2.2!  The DAV code should use that instead.

-Andrew



From corydodt at twistedmatrix.com  Fri Dec 23 01:41:54 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu, 22 Dec 2005 22:41:54 -0800
Subject: [Twisted-Python] Trial and ImportErrors
In-Reply-To: <d06a5cd30512222205g45aeaa4evc5937809bbc840f9@mail.gmail.com>
References: <d06a5cd30512222205g45aeaa4evc5937809bbc840f9@mail.gmail.com>
Message-ID: <43AB9C32.8020302@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

We just ran into this today with Athena tests.  It's actually easy to
write a test that just imports everything once, but nobody seems to ever
do that.  Having an import failure show up somewhere in the test summary
is pretty important.

C


Jonathan Lange wrote:
> Hello,
> 
> For a while I've been thinking of changing Trial so that import errors
> flag the test suite as failed.
> This would mean the buildbot would go red if things fail to import.
> 
> What do you all think?
> 
> jml
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDq5wy3A5SrXAiHQcRApnDAJ472YMWIq/KTEdiztZ1MPbu5WTWAwCfc3en
Z8go682s3sH8HOaqBohBpvE=
=iFqr
-----END PGP SIGNATURE-----



From jml at mumak.net  Fri Dec 23 01:53:57 2005
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 23 Dec 2005 17:53:57 +1100
Subject: [Twisted-Python] Trial and ImportErrors
In-Reply-To: <43AB9C32.8020302@twistedmatrix.com>
References: <d06a5cd30512222205g45aeaa4evc5937809bbc840f9@mail.gmail.com>
	<43AB9C32.8020302@twistedmatrix.com>
Message-ID: <d06a5cd30512222253q7bc25cua540c778f61d5b89@mail.gmail.com>

On 12/23/05, Cory Dodt <corydodt at twistedmatrix.com> wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> We just ran into this today with Athena tests.  It's actually easy to
> write a test that just imports everything once, but nobody seems to ever
> do that.  Having an import failure show up somewhere in the test summary
> is pretty important.
>

Import failures show up in the test summary.  They just don't flag the
suite as failed.  In this way, they are similar to skipped tests.

jml



From glyph at divmod.com  Fri Dec 23 05:22:14 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 23 Dec 2005 05:22:14 -0500
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <3F1FC04D-00D2-43C9-9105-8DE0CD63E2BB@fuhm.net>
Message-ID: <20051223102214.1217.1628161043.divmod.quotient.7762@ohm>



On Thu, 22 Dec 2005 17:54:54 -0500, James Y Knight <foom at fuhm.net> wrote:
>I'm going to vote for dropping Python 2.2 support in Twisted trunk  now. 
>Twisted 2.1 is a fine release to use if you want to use an  ancient version 
>of python. Keeping compat is a pain in the ass. And  lest exarkun complain 
>about lack of enthusiasm: I'll declare myself  quite enthusiastic about the 
>concept. :)

I don't think you can "vote" yet since that violates parliamentary procedure, maybe.  I will assume you are making a motion.

I will second this motion!  Since I am also the chair, I can say that the motion carries!

Anybody want to filibuster?



From glyph at divmod.com  Fri Dec 23 05:29:18 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 23 Dec 2005 05:29:18 -0500
Subject: [Twisted-Python] Trial and ImportErrors
In-Reply-To: <d06a5cd30512222205g45aeaa4evc5937809bbc840f9@mail.gmail.com>
Message-ID: <20051223102918.1217.754741711.divmod.quotient.7764@ohm>



On Fri, 23 Dec 2005 17:05:19 +1100, Jonathan Lange <jml at mumak.net> wrote:
>Hello,
>
>For a while I've been thinking of changing Trial so that import errors
>flag the test suite as failed.
>This would mean the buildbot would go red if things fail to import.
>
>What do you all think?

Yes.  DEFINITELY.  I'd go so far as to say that this is simply a bug, and I don't care if anyone disagrees - you should go ahead.



From Wolfgang.W.Eichler at gmx.de  Fri Dec 23 08:23:11 2005
From: Wolfgang.W.Eichler at gmx.de (Wolfgang Eichler)
Date: Fri, 23 Dec 2005 14:23:11 +0100
Subject: [Twisted-Python] Integrate other API that uses select
Message-ID: <E1Epmt8-0005Sl-00@pyramid.twistedmatrix.com>

Hi,

newbie question:

I would like to integrate another c-api, that uses select ( for some tcp - connection ); 

If I could extend this c-api, to question for the bit-arry it uses for the select, could I enter this in the twisted framework to get the control, if some event for these sockets are coming in and then notifiy the  c-api to handle the events on his sockets.

The aim is to keep the single waiting point in twisted and not being forced to poll on the c-api.

Thanks for any help ...

Wolfgang
 




From general at eepatents.com  Fri Dec 23 09:34:23 2005
From: general at eepatents.com (Ed Suominen)
Date: Fri, 23 Dec 2005 06:34:23 -0800
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <E1EpmtF-0005TT-02@pyramid.twistedmatrix.com>
References: <E1EpmtF-0005TT-02@pyramid.twistedmatrix.com>
Message-ID: <1135348464.9212.123.camel@207-118-88-159.dyn.centurytel.net>

As a humble user, that makes perfect sense to me. I wonder how many
people really are stuck with Python 2.2 at this point, through ignorance
(not necessarily their own, but perhaps of people higher up) or
otherwise.

Best regards,
Ed Suominen

On Fri, 2005-12-23 at 07:23 -0600,
twisted-python-request at twistedmatrix.com wrote:
> I'm going to vote for dropping Python 2.2 support in Twisted trunk  
> now. Twisted 2.1 is a fine release to use if you want to use an  
> ancient version of python. Keeping compat is a pain in the ass. And  
> lest exarkun complain about lack of enthusiasm: I'll declare myself  
> quite enthusiastic about the concept. :)
> 
> James




From jim at zope.com  Fri Dec 23 10:01:22 2005
From: jim at zope.com (Jim Fulton)
Date: Fri, 23 Dec 2005 10:01:22 -0500
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <3F1FC04D-00D2-43C9-9105-8DE0CD63E2BB@fuhm.net>
References: <60ed19d40511051714o6565bd29nd6885511808fb2ae@mail.gmail.com>	<20051106022657.10365.1687580705.divmod.quotient.4496@ohm>	<d06a5cd30511070547o59a504e2p@mail.gmail.com>	<FC5A7D49-45C9-48BD-853E-B80D6628E8C7@junklight.com>	<43722C5D.901@carmensystems.com>
	<3F1FC04D-00D2-43C9-9105-8DE0CD63E2BB@fuhm.net>
Message-ID: <43AC1142.1000306@zope.com>

James Y Knight wrote:
> I'm going to vote for dropping Python 2.2 support in Twisted trunk  now. 
> Twisted 2.1 is a fine release to use if you want to use an  ancient 
> version of python. Keeping compat is a pain in the ass. And  lest 
> exarkun complain about lack of enthusiasm: I'll declare myself  quite 
> enthusiastic about the concept. :)

+1

Jim

-- 
Jim Fulton           mailto:jim at zope.com       Python Powered!
CTO                  (540) 361-1714            http://www.python.org
Zope Corporation     http://www.zope.com       http://www.zope.org



From itamar at itamarst.org  Fri Dec 23 13:45:20 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 23 Dec 2005 13:45:20 -0500
Subject: [Twisted-Python] Custom transports
In-Reply-To: <62B236F8-1E28-41A6-982E-10F70C1D2583@atommic.com>
References: <62B236F8-1E28-41A6-982E-10F70C1D2583@atommic.com>
Message-ID: <1135363520.22336.30.camel@localhost.localdomain>

On Thu, 2005-12-22 at 18:34 -0500, Adam Atlas wrote:
> Hello,
> 
> What would I do to implement a custom transport within the Twisted  
> framework? That is, I'd like to be able to add custom listen___ and  
> connect___ methods to the reactor, so that existing protocols can run  
> over a new backend transport protocol. What API would I use for this?

If this transport is implemented in terms of other protocols, it doesn't
have to be a reactor method. For example, lets say you write a SOCKSv4
transport; the way users would use it is probably:

mySocksProxy = SOCKSProxy('myproxy.example.com', 9999)
mySocksProxy.listenTCP(8080, SomeFactory())

Even if it requires registering file descriptors, you don't *have* to
add reactor.* methods (see e.g. twisted.internet.stdio).




From itamar at itamarst.org  Fri Dec 23 13:48:38 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 23 Dec 2005 13:48:38 -0500
Subject: [Twisted-Python] Integrate other API that uses select
In-Reply-To: <E1Epmt8-0005Sl-00@pyramid.twistedmatrix.com>
References: <E1Epmt8-0005Sl-00@pyramid.twistedmatrix.com>
Message-ID: <1135363719.22336.34.camel@localhost.localdomain>

On Fri, 2005-12-23 at 14:23 +0100, Wolfgang Eichler wrote:

> 
> I would like to integrate another c-api, that uses select ( for some tcp - connection ); 
> 
> If I could extend this c-api, to question for the bit-arry it uses for
> the select, could I enter this in the twisted framework to get the
> control, if some event for these sockets are coming in and then
> notifiy the  c-api to handle the events on his sockets.

Yep - reactor.addReader and reactor.addWriter let you register file
descriptors; typically the object you register would be an instance of a
subclass of twisted.internet.abstract.FileDescriptor.

Well designed C APIs will expose the underlying parsing code in addition
to a TCP-specific implementation, and it'd be better to wrap this. 




From radeex at gmail.com  Fri Dec 23 22:17:39 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 24 Dec 2005 14:17:39 +1100
Subject: [Twisted-Python] Custom transports
In-Reply-To: <1135363520.22336.30.camel@localhost.localdomain>
References: <62B236F8-1E28-41A6-982E-10F70C1D2583@atommic.com>
	<1135363520.22336.30.camel@localhost.localdomain>
Message-ID: <60ed19d40512231917v4a9123ffm3e90b49f6770ed45@mail.gmail.com>

On 12/24/05, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> On Thu, 2005-12-22 at 18:34 -0500, Adam Atlas wrote:
> > Hello,
> >
> > What would I do to implement a custom transport within the Twisted
> > framework? That is, I'd like to be able to add custom listen___ and
> > connect___ methods to the reactor, so that existing protocols can run
> > over a new backend transport protocol. What API would I use for this?
>
> If this transport is implemented in terms of other protocols, it doesn't
> have to be a reactor method. For example, lets say you write a SOCKSv4
> transport; the way users would use it is probably:
>
> mySocksProxy = SOCKSProxy('myproxy.example.com', 9999)
> mySocksProxy.listenTCP(8080, SomeFactory())
>
> Even if it requires registering file descriptors, you don't *have* to
> add reactor.* methods (see e.g. twisted.internet.stdio).

Also, the reactor has a method listenWith that may be useful. See the
docs for it in twisted.internet.interfaces.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From glyph at divmod.com  Fri Dec 23 23:14:45 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 23 Dec 2005 23:14:45 -0500
Subject: Python 2.2 Support has been officially dropped (was Re:
	[Twisted-Python] Python 2.2 Support)
In-Reply-To: <43AC1142.1000306@zope.com>
Message-ID: <20051224041445.1217.1583662422.divmod.quotient.7996@ohm>

On Fri, 23 Dec 2005 10:01:22 -0500, Jim Fulton <jim at zope.com> wrote:

>+1

As of some time yesterday, JP has taken the Python buildbot offline.

That means that 2.2 is no longer officially supported, and the next release will not run on any 2.2-only platforms.

Merry christmas, I guess :).



From ml.flex at gmail.com  Mon Dec 26 05:35:52 2005
From: ml.flex at gmail.com (Micky Latowicki)
Date: Mon, 26 Dec 2005 12:35:52 +0200
Subject: [Twisted-Python] Receiving a root from a pb client
In-Reply-To: <OF2099ECF4.E042CF41-ON802570DE.005F4171-802570DE.0062D271@bnpparibas.com>
References: <OF2099ECF4.E042CF41-ON802570DE.005F4171-802570DE.0062D271@bnpparibas.com>
Message-ID: <d27002d90512260235t74f71029s@mail.gmail.com>

I don't see any response from the experts, so I'll say what I think:

No. There is no way. One side has to listen, the other has to connect.
You can make the network symmetric only by having both sides listen on
different occasions - that means that for the server to initiate a
connection, the client has to become a server itself.

This is how TCP works.

HTH.

On 21/12/05, william.lewis at uk.bnpparibas.com
<william.lewis at uk.bnpparibas.com> wrote:
>
> Hi,
>
> I am using pb to communicate in a client-server configuration. My client
> inherits from PBClientFactory.
> My server has a remote_take_root() method by which the client can connect to
> the server and pass in
> its root, thus allowing two-way communication.
>
> Is there anyway for the server to re-establish the connection (should it go
> down)  in this setup, or is
> this the sole responsibility of the client?
>
> Thanks
>
> William Lewis
> This message and any attachments (the "message") is
> intended solely for the addressees and is confidential.
> If you receive this message in error, please delete it and
> immediately notify the sender. Any use not in accord with
> its purpose, any dissemination or disclosure, either whole
> or partial, is prohibited except formal approval. The internet
> can not guarantee the integrity of this message.
> BNP PARIBAS (and its subsidiaries) shall (will) not
> therefore be liable for the message if modified.
>
> **********************************************************************************************
>
> BNP Paribas Private Bank London Branch is authorised
> by CECEI & AMF and is regulated by the Financial Services
> Authority for the conduct of its investment business in
> the United Kingdom.
>
> BNP Paribas Securities Services London Branch is authorised
> by CECEI & AMF and is regulated by the Financial Services
> Authority for the conduct of its investment business in
> the United Kingdom.
>
> BNP Paribas Fund Services UK Limited is authorised and
> regulated by the Financial Services Authority
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>

From martin at moellenbecks.de  Mon Dec 26 05:56:24 2005
From: martin at moellenbecks.de (=?ISO-8859-1?Q?Martin_M=F6llenbeck?=)
Date: Mon, 26 Dec 2005 11:56:24 +0100
Subject: [Twisted-Python] Receiving a root from a pb client
In-Reply-To: <OF2099ECF4.E042CF41-ON802570DE.005F4171-802570DE.0062D271@bnpparibas.com>
References: <OF2099ECF4.E042CF41-ON802570DE.005F4171-802570DE.0062D271@bnpparibas.com>
Message-ID: <2C0BC411-4012-439E-A371-8A097458E333@moellenbecks.de>

Hi,

first off all:
   - The only different between client and server in a twisted  
application is the way to etablish a connection.
   - The server listen, the client makes the connection.

For the needs to re-connect after the connection had lost, use the  
"ReconnectingPBClientFactory" defined pbutil.py
from the buildbot source. I use it to handle bad internet connection,  
that often lost the connection. With this factory
and the a client that derived from pb.Root you could get the Root of  
the client at server side after a connection have
been etablished.

Hope that helps.

Greeting
Martin


Am 21.12.2005 um 18:59 schrieb william.lewis at uk.bnpparibas.com:

>
> Hi,
>
> I am using pb to communicate in a client-server configuration. My  
> client inherits from PBClientFactory.
> My server has a remote_take_root() method by which the client can  
> connect to the server and pass in
> its root, thus allowing two-way communication.
>
> Is there anyway for the server to re-establish the connection  
> (should it go down)  in this setup, or is
> this the sole responsibility of the client?
>
> Thanks
>
> William Lewis
> This message and any attachments (the "message") is
> intended solely for the addressees and is confidential.
> If you receive this message in error, please delete it and
> immediately notify the sender. Any use not in accord with
> its purpose, any dissemination or disclosure, either whole
> or partial, is prohibited except formal approval. The internet
> can not guarantee the integrity of this message.
> BNP PARIBAS (and its subsidiaries) shall (will) not
> therefore be liable for the message if modified.
>
> ********************************************************************** 
> ************************
>
> BNP Paribas Private Bank London Branch is authorised
> by CECEI & AMF and is regulated by the Financial Services
> Authority for the conduct of its investment business in
> the United Kingdom.
>
> BNP Paribas Securities Services London Branch is authorised
> by CECEI & AMF and is regulated by the Financial Services
> Authority for the conduct of its investment business in
> the United Kingdom.
>
> BNP Paribas Fund Services UK Limited is authorised and
> regulated by the Financial Services Authority
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051226/386b8901/attachment.htm 

From andrea at cpushare.com  Mon Dec 26 11:07:35 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 26 Dec 2005 17:07:35 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
Message-ID: <20051226160735.GP9576@opteron.random>

Hello,

I was just shoked today when I noticed this:

-------------------
import sys

class A(object):
	y = None
	def x(self):
		pass
	def __del__(self):
		print 'deleted'


a = A()
print sys.getrefcount(a)
if 1:
	a.y = a.x
print sys.getrefcount(a)
del a
-------------------

I understood the cross references memleaks well, like "x.y = y; y.x= x;
del x,y", but I didn't imagine that "a.y = a.x" would be enough to
generate a memleak. "a.y = a.x" isn't referencing another structure,
it's referencing itself only. Infact if I do this the memleak goes
away!!

-------------------
import sys

class A(object):
	def x(self):
		pass
	y = x
	def __del__(self):
		print 'deleted'


a = A()
print sys.getrefcount(a)
a.x()
a.y()
print a.x, a.y
del a
-------------------

Now the fact a static field doesn't generate a reference but a dynamic
one does is quite confusing to me and it also opened a can of worms in
my code. I can handle that now that I know about it, but I wonder what
people recommends to solve memleaks of this kind.

I'd also like to know how other languages like ruby and java behave in
terms of self-references of objects. Can't the language understand it's
a self reference, and in turn it's the same as an integer or a string,
like it already does when the member is initialized statically?

Infact can't the language be smart enough to even understand when two
cross referenced objects lost visibility from all points of view, and
drop both objects even if they hold a reference on each other? I
understand this is a lot more complicated but wouldn't it be possible in
theory? What does the garbage collection of other languages like ruby
and java, the same as python or more advanced?

So far my python programs never really cared to released memory (so my
not full understanding of python refcounts wasn't a problem), but now
since I'm dealing with a server I must make sure that the "proto" is
released after a loseConnection invocation. So I must cleanup all cross
and self! references in loseConnection and use weakrefs where needed.

Now those structures that I'm leaking (like the protocol object) are so
tiny that there's no chance that I could ever notice the memleak in real
life, so I had to add debugging code to trap memleaks. You can imagine
my server code like this:

class cpushare_protocol(Int32StringReceiver):
	def connectionMade(self):
		[..]
		self.hard_handlers = {
			PROTO_SECCOMP : self.seccomp_handler,
			PROTO_LOG : self.log_handler,
			}
		[..]
 	def log_handler(self, string):
		[..]
	def seccomp_handler(self, string):
		[..]
	def __del__(self):
		print 'protocol deleted'
	def connectionLost(self, reason):
		[..]
		# memleaks
		del self.hard_handlers
		print 'protocol refcount:', sys.getrefcount(self)
		#assert sys.getrefcount(self) == 4

For things like hard_handlers (that are self-referencing callbacks) I
can't even use the weakref.WeakValueDictionary, because it wouldn't hold
itself, the object gets released immediately. So the only chance I have
to release the memory of the protocol object when the connection is
dropped, is to do an explicit del self.hard_handlers in loseConnection.

I wonder what other twisted developers do to avoid those troubles.
Perhaps I shouldn't use self referencing callbacks to hold the state
machine, and do like the smpt protocol that does this:

    def lookupMethod(self, command):
        return getattr(self, 'do_' + command.upper(), None)

basically working with strings instead of pointers. Or I can simply make
sure to cleanup all structures when I stop using them (like with the del
self.hard_handlers above), but then I'll lose part of the automatic
garbage collection features of python. I really want garbage collection
or I could have written this in C++ if I'm forced to cleanup by hand.

Help is appreciated, thanks!

PS. Merry Christmas and Happy New 2006!



From exarkun at divmod.com  Mon Dec 26 12:21:29 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 26 Dec 2005 12:21:29 -0500
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051226160735.GP9576@opteron.random>
Message-ID: <20051226172129.1217.36853620.divmod.quotient.8236@ohm>

On Mon, 26 Dec 2005 17:07:35 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:
>Hello,

Hey,

This is really a question for a Python list.  However, I've attached 
some comments below. 

>
>I was just shoked today when I noticed this:
>
>-------------------
>import sys
>
>class A(object):
>	y = None
>	def x(self):
>		pass
>	def __del__(self):
>		print 'deleted'
>
>
>a = A()
>print sys.getrefcount(a)
>if 1:
>	a.y = a.x
>print sys.getrefcount(a)
>del a
>-------------------
>
>I understood the cross references memleaks well, like "x.y = y; y.x= x;
>del x,y", but I didn't imagine that "a.y = a.x" would be enough to
>generate a memleak. "a.y = a.x" isn't referencing another structure,
>it's referencing itself only. Infact if I do this the memleak goes
>away!!

I'm not sure how far you've gotten into this, but here's the basic 
explanation: "a.x" gives you a "bound method instance"; since you 
might do anything at all with the object it evaluates to, it wraps 
up a reference to the object "a" references, so it knows what object 
to use as "self"; this has the effect of increasing the reference 
count of "a", but it doesn't actually leak any memory.

Of course, in creating a cycle which contains an object with an 
implementation of __del__, you have created a leak, since Python's 
GC cannot collect that kind of graph.

Hopefully the __del__ implementation is only included as an aid to 
understanding what is going on, and you don't actually need it in 
any of your actual applications.  Once removed, the cycle will be 
collectable by Python.

Another strategy is to periodically examine gc.garbage and manually 
break cycles.  This way, if you do have any __del__ implementations, 
they will no longer be part of a cycle, and Python will again be 
able to collect these objects.

>
>-------------------
>import sys
>
>class A(object):
>	def x(self):
>		pass
>	y = x
>	def __del__(self):
>		print 'deleted'
>
>
>a = A()
>print sys.getrefcount(a)
>a.x()
>a.y()
>print a.x, a.y
>del a
>-------------------
>
>Now the fact a static field doesn't generate a reference but a dynamic
>one does is quite confusing to me and it also opened a can of worms in
>my code. I can handle that now that I know about it, but I wonder what
>people recommends to solve memleaks of this kind.

This is an interesting case.  Python does not do what you probably 
expect here.  When you define a class with methods, Python does not 
actually create any method objects!  It is the actual attribute lookup 
on an instance which creates the method object.  You can see this in 
the following example:


    >>> class X:
    ...   def y(self): pass
    ... 
    >>> a = X()
    >>> a.y is a.y
    False
    >>> a.y is X.__dict__['y']
    False
    >>> X.__dict__['y'] is X.__dict__['y']
    True
    >>> 

So when you added "y" to your class "A", Python didn't care, because 
there aren't even any method objects until you access an attribute 
which is bound to a function.  Continuing the above example:

    >>> sys.getrefcount(a)
    2
    >>> L = [a.y, a.y, a.y, a.y]
    >>> sys.getrefcount(a)
    6
    >>> 

>
>I'd also like to know how other languages like ruby and java behave in
>terms of self-references of objects. Can't the language understand it's
>a self reference, and in turn it's the same as an integer or a string,
>like it already does when the member is initialized statically?

I don't know Ruby well enough to comment directly, but I believe Ruby's 
GC is much simpler (and less capable) than Python's.  Java doesn't have 
bound methods (or unbound methods, or heck, functions): the obvious way 
in which you would construct them on top of the primitives the language 
does offer seems to me as though it would introduce the same "problem" 
you are seeing in Python, but that may just be due to the influence 
Python has had on my thinking.

>
>Infact can't the language be smart enough to even understand when two
>cross referenced objects lost visibility from all points of view, and
>drop both objects even if they hold a reference on each other? I
>understand this is a lot more complicated but wouldn't it be possible in
>theory? What does the garbage collection of other languages like ruby
>and java, the same as python or more advanced?

When you have "two cross referenced objects", that's a cycle, and 
Python will indeed clean it up.  The only exception is if there is a 
__del__ implementation, as I mentioned above.  This is a general problem 
with garbage collection.  If you have two objects which refer to each 
other and which each wish to perform some finalization, which finalizer 
do you call first?

>
>So far my python programs never really cared to released memory (so my
>not full understanding of python refcounts wasn't a problem), but now
>since I'm dealing with a server I must make sure that the "proto" is
>released after a loseConnection invocation. So I must cleanup all cross
>and self! references in loseConnection and use weakrefs where needed.
>
>Now those structures that I'm leaking (like the protocol object) are so
>tiny that there's no chance that I could ever notice the memleak in real
>life, so I had to add debugging code to trap memleaks. You can imagine
>my server code like this:

You might be surprised :)  These things tend to build up, if your process 
is long-running.

>
>class cpushare_protocol(Int32StringReceiver):
>	def connectionMade(self):
>		[..]
>		self.hard_handlers = {
>			PROTO_SECCOMP : self.seccomp_handler,
>			PROTO_LOG : self.log_handler,
>			}
>		[..]
> 	def log_handler(self, string):
>		[..]
>	def seccomp_handler(self, string):
>		[..]
>	def __del__(self):
>		print 'protocol deleted'
>	def connectionLost(self, reason):
>		[..]
>		# memleaks
>		del self.hard_handlers
>		print 'protocol refcount:', sys.getrefcount(self)
>		#assert sys.getrefcount(self) == 4
>
>For things like hard_handlers (that are self-referencing callbacks) I
>can't even use the weakref.WeakValueDictionary, because it wouldn't hold
>itself, the object gets released immediately. So the only chance I have
>to release the memory of the protocol object when the connection is
>dropped, is to do an explicit del self.hard_handlers in loseConnection.
>
>I wonder what other twisted developers do to avoid those troubles.
>Perhaps I shouldn't use self referencing callbacks to hold the state
>machine, and do like the smpt protocol that does this:
>
>    def lookupMethod(self, command):
>        return getattr(self, 'do_' + command.upper(), None)
>
>basically working with strings instead of pointers. Or I can simply make
>sure to cleanup all structures when I stop using them (like with the del
>self.hard_handlers above), but then I'll lose part of the automatic
>garbage collection features of python. I really want garbage collection
>or I could have written this in C++ if I'm forced to cleanup by hand.

(You can probably guess what I'm going to say here. ;)  In general, I 
avoid implementing __del__.  My programs may end up with cycles, but 
as long as I don't have __del__, Python can figure out how to free the 
objects.  Note that it does sometimes take it a while (and this has 
implications for peak memory usage which may be important to you), but 
if you find a case that it doesn't handle, then you've probably found 
a bug in the GC that python-dev will fix.

Hope this helps, and happy holidays,

Jean-Paul



From bob at redivi.com  Mon Dec 26 12:31:32 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 26 Dec 2005 12:31:32 -0500
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051226160735.GP9576@opteron.random>
References: <20051226160735.GP9576@opteron.random>
Message-ID: <2BD9F3A6-B730-4FBF-8E95-86B0A312A881@redivi.com>


On Dec 26, 2005, at 11:07 AM, Andrea Arcangeli wrote:

> I was just shoked today when I noticed this:
>
> -------------------
> import sys
>
> class A(object):
> 	y = None
> 	def x(self):
> 		pass
> 	def __del__(self):
> 		print 'deleted'
>
>
> a = A()
> print sys.getrefcount(a)
> if 1:
> 	a.y = a.x
> print sys.getrefcount(a)
> del a
> -------------------
>
> I understood the cross references memleaks well, like "x.y = y;  
> y.x= x;
> del x,y", but I didn't imagine that "a.y = a.x" would be enough to
> generate a memleak. "a.y = a.x" isn't referencing another structure,
> it's referencing itself only. Infact if I do this the memleak goes
> away!!

Objects that use __del__ don't participate in cyclic garbage  
collection.  You really want to write code that doesn't need it, or  
that uses weakref callbacks instead of __del__.

-bob




From andrea at cpushare.com  Mon Dec 26 19:18:33 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 01:18:33 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051226172129.1217.36853620.divmod.quotient.8236@ohm>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
Message-ID: <20051227001833.GQ9576@opteron.random>

On Mon, Dec 26, 2005 at 12:21:29PM -0500, Jean-Paul Calderone wrote:
> Of course, in creating a cycle which contains an object with an 
> implementation of __del__, you have created a leak, since Python's 
> GC cannot collect that kind of graph.

Ah this explains many things. I didn't realize that having a __del__
callback made any difference from a garbage collection point of view, so
while trying to fix memleaks I probably added them ;).

Sorry for posting it here and not a python list, but my basic problem is
to make sure the "protocol" object is being collected away, and the
protocol object is a very twisted thing, so I thought it would be at
on topic here since everyone of us needs the protocol object garbage
collected properly. Now it turned out more a language thing than I
thought originally...

Ok, going back to how this thing started. I happened to allocate 50M of
ram somehow attached to a protocol object, and then I noticed that the
reconnectingclientfactory was leaking memory after a
disconnect/reconnect event. Every time I restarted the server, 50M were
added to the RSS of the task. That was definitely a memleak, and I never
had a __del__ method. Then I started adding debugging aid to figure out
what was going wrong. By removing the self and cross references the
memleak was fixed in the client. So then I figured out the same
self-references were in the server as well, and I added more debugging
in the server as well. That lead me in the current situation.  So
something was definitely going wrong w.r.t. memleaks even before I
started messing with the __del__ methods.

But I'm very relieived to know that python gets it right if __del__
isn't implemented.

> Hopefully the __del__ implementation is only included as an aid to 
> understanding what is going on, and you don't actually need it in 
> any of your actual applications.  Once removed, the cycle will be 
> collectable by Python.

Correct, it was only an aid, it didn't exist until today.

> When you have "two cross referenced objects", that's a cycle, and 
> Python will indeed clean it up.  The only exception is if there is a 

Well, I never cared about cyclic references until today, because I
thought python would understand it automatically like I think it's
possible infact.

But then while trying to debug the 50M leak in the client at every
server restart (so very visible), I quickly into this:

	http://www.nightmare.com/medusa/memory-leaks.html

class thing:
    pass

a = thing()
b = thing()
a.other = b
b.other = a

del a
del b    

Code like above is very common in my twisted based server. Note that
there's no __del__ method in the class "thing". So what you say seems in
disagreement with the above url. Perhaps I got bitten by the common
mistake "I found it on the internet so it must be true"... I really
hope you're the one being right, my code was all written with your ideas
in mind but that seems to collide strong with the above url. I guess I
should have checked the date, it's from 99, perhaps it has been true a
long time ago?

> __del__ implementation, as I mentioned above.  This is a general problem 
> with garbage collection.  If you have two objects which refer to each 
> other and which each wish to perform some finalization, which finalizer 
> do you call first?

Why would it matter which one you call first? Random no? Better to call
it random than to leak memory, no? At least python should spawn a
gigantic warning that there's a cross reference leaking, instead of
silenty not calling __del__.

> You might be surprised :)  These things tend to build up, if your process 
> is long-running.

I think you're right there was no memleak generated by self/cross
cyclic references, but then the load is pretty low at the moment so I
could have overlooked it. I periodically monitor the rss of all tasks.
I never had problems before noticing the reconnectingclientfactory
memleak (which btw I can't reproduce anymore after removing the cross
references).

> (You can probably guess what I'm going to say here. ;)  In general, I 
> avoid implementing __del__.  My programs may end up with cycles, but 
> as long as I don't have __del__, Python can figure out how to free the 
> objects.  Note that it does sometimes take it a while (and this has 
> implications for peak memory usage which may be important to you), but 
> if you find a case that it doesn't handle, then you've probably found 
> a bug in the GC that python-dev will fix.
> 
> Hope this helps, and happy holidays,

Thanks a lot, things looks much better now, I'm relieved that python can
figure out how to free objects, I always thought it was able to do so
infact ;). Happy holidays to you too.

So, I'll backout all my latest changes, and I'll try to find the real
cause of the reconnectingclientfactory memleak which definitely happened
even though there was no __del__ method implemented.



From andrea at cpushare.com  Mon Dec 26 19:20:09 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 01:20:09 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <2BD9F3A6-B730-4FBF-8E95-86B0A312A881@redivi.com>
References: <20051226160735.GP9576@opteron.random>
	<2BD9F3A6-B730-4FBF-8E95-86B0A312A881@redivi.com>
Message-ID: <20051227002009.GR9576@opteron.random>

On Mon, Dec 26, 2005 at 12:31:32PM -0500, Bob Ippolito wrote:
> Objects that use __del__ don't participate in cyclic garbage  
> collection.  You really want to write code that doesn't need it, or  
> that uses weakref callbacks instead of __del__.

Thanks for the hint! I didn't know that __del__ made a difference to the
garabage collection decisions, that combined with an obsolete webpage
written in 99 was the source of quite some confusion to me.



From moe at divmod.com  Mon Dec 26 19:39:30 2005
From: moe at divmod.com (Moe Aboulkheir)
Date: Tue, 27 Dec 2005 02:39:30 +0200
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051227001833.GQ9576@opteron.random>
Message-ID: <20051227003930.1217.246783937.divmod.quotient.8247@ohm>

On Tue, 27 Dec 2005 01:18:33 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:

>But then while trying to debug the 50M leak in the client at every
>server restart (so very visible), I quickly into this:
>
>	http://www.nightmare.com/medusa/memory-leaks.html
>
>class thing:
>    pass
>
>a = thing()
>b = thing()
>a.other = b
>b.other = a
>
>del a
>del b
>
>Code like above is very common in my twisted based server. Note that
>there's no __del__ method in the class "thing". So what you say seems in
>disagreement with the above url. Perhaps I got bitten by the common
>mistake "I found it on the internet so it must be true"...

the document at that URL is six years old, and so dates from a time when python's garbage collector couldn't properly deal with plain cyclical references, AFAICT.

--
Moe Aboulkheir



From andrea at cpushare.com  Mon Dec 26 20:02:37 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 02:02:37 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051227001833.GQ9576@opteron.random>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
Message-ID: <20051227010237.GS9576@opteron.random>

On Tue, Dec 27, 2005 at 01:18:33AM +0100, Andrea Arcangeli wrote:
> So, I'll backout all my latest changes, and I'll try to find the real

Now after understanding the __del__ heisenbug in my testcases, and a
1000 lines backout (dropping all weakrefs and hacks I did to try to
remove those pratical memleaks) here my findings on the real life
reconnectingclientfactory memleak that made me look into this in the
first place: It wasn't a memleak in theory, it was only in practice...
gc.collect() seems not invoked frequently enough.

Here it is a ps v of my reconnectingclientfactory with an artificial disconnect
from the server at every second (as said before about 50M were attached to
every new protocol instance).

while :; do ps v |grep [c]pushare-0; sleep 1; done
20113 pts/6    SNl+   0:00      0     2 94453 51492  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:00      0     2 115017 70120  4.5 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:00      0     2 135513 92528  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:00      0     2 135513 92528  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:00      0     2 135513 92528  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:01      0     2 176497 133512  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:01      0     2 176497 133512  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:01      0     2 176497 133512  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:01      0     2 217481 174496 11.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:01      0     2 217481 174496 11.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:01      0     2 217481 174496 11.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:01      0     2 278957 216252 14.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 94529 51568  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 94529 51568  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:02      0     2 125269 82252  5.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 135513 92584  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 135513 92584  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 135513 92584  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 176497 133580  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 176497 133580  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 176497 133596  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 135513 92584  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 135513 92584  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 135513 92584  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 176497 133580  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 176497 133580  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 176497 133596  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 217481 174588 11.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 217481 174588 11.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 217481 174596 11.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 258465 215580 14.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 258465 215580 14.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 258465 215580 14.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 299449 256584 16.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 299449 256584 16.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 299449 256584 16.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:04      0     2 319937 275096 17.8 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:04      0     2 340433 297568 19.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:04      0     2 340433 297568 19.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:04      0     2 340433 297584 19.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:04      0     2 381417 338568 22.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:04      0     2 381417 338568 22.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:04      0     2 381417 338568 22.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:05      0     2 412221 369312 24.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:05      0     2 422469 379560 24.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:04      0     2 381417 338568 22.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:05      0     2 412221 369312 24.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:05      0     2 422469 379560 24.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:05      0     2 422469 379560 24.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:05      0     2 422537 379572 24.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:05      0     2 463457 420556 27.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:05      0     2 463457 420556 27.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:05      0     2 463457 420556 27.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:06      0     2 524933 472712 30.7 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:06      0     2 504441 461548 30.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:06      0     2 504441 461548 30.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:06      0     2 524929 482044 31.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:07      0     2 545425 502540 32.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:07      0     2 545425 502540 32.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:07      0     2 545425 502540 32.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:07      0     2 586413 534096 34.7 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:07      0     2 586409 543532 35.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:07      0     2 586409 543532 35.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:07      0     2 586497 543540 35.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:08      0     2 627417 584524 38.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:08      0     2 627417 584524 38.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:08      0     2 627417 584524 38.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:08      0     2 647905 605016 39.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:08      0     2 668401 625512 40.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:08      0     2 668401 625512 40.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:08      0     2 668401 625512 40.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:09      0     2 709389 663952 43.1 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:09      0     2 709385 666500 43.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:09      0     2 709385 666500 43.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:09      0     2 709385 666500 43.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:09      0     2 740121 697240 45.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:10      0     2 750369 707488 45.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:10      0     2 750369 707488 45.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:10      0     2 750369 707488 45.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:10      0     2 791357 744356 48.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:10      0     2 791353 748248 48.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:10      0     2 791353 748248 48.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:10      0     2 791353 748252 48.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:11      0     2 842581 790452 51.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:11      0     2 832337 788608 51.2 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:11      0     2 832337 788608 51.2 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:11      0     2 832337 788608 51.2 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:11      0     2 863077 819348 53.2 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 873321 829596 53.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 873321 829596 53.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:11      0     2 832337 788608 51.2 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:11      0     2 832337 788608 51.2 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:11      0     2 863077 819348 53.2 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 873321 829596 53.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 873321 829596 53.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 873321 829596 53.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 904061 860200 55.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    DNl+   0:12      0     2 924549 874220 56.8 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    DNl+   0:12      0     2 934797 883008 57.4 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    DNl+   0:12      0     2 934797 890176 57.8 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 914305 869848 56.5 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 914305 869848 56.5 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:12      0     2 914305 869848 56.5 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    DNl+   0:13      0     2 945041 900420 58.5 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    DNl+   0:13      0     2 965533 916084 59.5 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    DNl+   0:13      0     2 975781 925724 60.1 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py


At the end the system was heavy into swap: huge memelak. But it shouldn't have
happened, I know how to write code not to generate memleaks, the only thing left
were cyclical references and self references, but there was no visibility at all
of the objects that were supposed to be freed.

Now see the right fix that made the original gigantic memleak go away!

Index: cpushare/proto.py
===================================================================
RCS file: /home/andrea/crypto/cvs/cpushare/client/cpushare/cpushare/proto.py,v
retrieving revision 1.62
diff -u -p -r1.62 proto.py
--- cpushare/proto.py	27 Dec 2005 00:43:34 -0000	1.62
+++ cpushare/proto.py	27 Dec 2005 00:50:13 -0000
@@ -206,6 +206,8 @@ class cpushare_factory(ReconnectingClien
 
 	def buildProtocol(self, addr):
 		self.resetDelay()
+		import gc
+		gc.collect()
 		return ReconnectingClientFactory.buildProtocol(self, addr)
 
 	def clientConnectionLost(self, connector, reason):



And now see the output of the same command with the same
reconnectingclientfactory being restarted once every second, but with the above
two liner fix applied.

21219 pts/6    RNl+   0:00      0     2 73773 30924  2.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:00      0     2 94233 51428  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:00      0     2 94233 51428  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:00      0     2 94233 51428  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    RNl+   0:01      0     2 83985 41188  2.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:01      0     2 94233 51436  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:01      0     2 94233 51436  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    RNl+   0:01      0     2 73737 30944  2.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:01      0     2 94233 51440  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:01      0     2 94233 51440  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    RNl+   0:01      0     2 63497 17496  1.1 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:01      0     2 94233 51440  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:01      0     2 94233 51440  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    RNl+   0:02      0     2 53249 10464  0.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:02      0     2 94233 51448  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:02      0     2 94233 51448  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:02      0     2 53249 10468  0.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:02      0     2 94233 51452  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:02      0     2 94233 51452  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    RNl+   0:02      0     2 63497 15368  0.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51476  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51476  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51476  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51476  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51476  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51476  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51480  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51480  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51480  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py

Now the RSS of the task never exceeds 50M, this is perfectly correct and
the expected behaviour since the first place.

The memleak disappeared completely. So it wasn't a memleak, nor a bug in my
code, but it was only the lack of garbage collection invocation! Of course
my previous attempts of removing the cyclical references made the
problem go away artificially but it made my code a total mess (similar
to c++ style), because then the refcount of the protocol was forced to
go down to 0 and so the memory was released synchronously.

So the question now, is how frequently is the garbage collection invoked, and
why do I need to invoke it by myself to avoid a gigantic "pratical"
memleaks?

Of course now I'll keep an explicit gc.collect() into the reconnecting
handler. Should I add an explicit timer rearming itself and invoking the
garbage collection periodically in the server too?

I'm really relieved the article dating back to 99 was totally obsolete
since my code has always been written for 2005 python garbage collection ;)

Thanks a lot for the quick help!



From andrea at cpushare.com  Mon Dec 26 20:09:46 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 02:09:46 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051227003930.1217.246783937.divmod.quotient.8247@ohm>
References: <20051227001833.GQ9576@opteron.random>
	<20051227003930.1217.246783937.divmod.quotient.8247@ohm>
Message-ID: <20051227010946.GT9576@opteron.random>

On Tue, Dec 27, 2005 at 02:39:30AM +0200, Moe Aboulkheir wrote:
> the document at that URL is six years old, and so dates from a time when 
> python's garbage collector couldn't properly deal with plain cyclical 
> references, AFAICT.

cool, thanks for confirming this. I admit I didn't pay attention to the
date before reading your replies here... also because I could reproduce
the problem here due the __del__ heisenbug in my testcases.

I'm just sending an email to the owner of the obsolete info, that page
scored at the top of my google search for python memleaks and it created
me lots of unnecessary confusion ;). But after all it's good because now
I learnt about the __del__ effect on the gc. Sorry for the noise.

The only remaining thing to understand is why by default the collect()
method is never invoked and I've to invoke it explicitly to avoid a
gigantic leak (see my previous email with the fix for my
reconnectingclientfactory pratical memleak that made me look into this).



From bob at redivi.com  Mon Dec 26 20:22:24 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 26 Dec 2005 20:22:24 -0500
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051227010237.GS9576@opteron.random>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random>
Message-ID: <ADFEA6CA-5E1D-4511-9E7D-C501AB286BC9@redivi.com>


On Dec 26, 2005, at 8:02 PM, Andrea Arcangeli wrote:

> On Tue, Dec 27, 2005 at 01:18:33AM +0100, Andrea Arcangeli wrote:
>> So, I'll backout all my latest changes, and I'll try to find the real
>
> Now after understanding the __del__ heisenbug in my testcases, and a
> 1000 lines backout (dropping all weakrefs and hacks I did to try to
> remove those pratical memleaks) here my findings on the real life
> reconnectingclientfactory memleak that made me look into this in the
> first place: It wasn't a memleak in theory, it was only in practice...
> gc.collect() seems not invoked frequently enough.

Take a look at:
http://docs.python.org/lib/module-gc.html

You can adjust the threshold for each GC generation to suit your  
application better.

-bob




From jcea at argo.es  Mon Dec 26 21:28:30 2005
From: jcea at argo.es (Jesus Cea)
Date: Tue, 27 Dec 2005 03:28:30 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051227010237.GS9576@opteron.random>
References: <20051226160735.GP9576@opteron.random>	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random>
Message-ID: <43B0A6CE.7080200@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Wow, Andrea Arcangeli, of Linux Kernel fame. What an honor :).

> +		import gc
> +		gc.collect()

Haha. I was just writing you about manual garbage collector invocations.

Manual collections can be costly, nevertheless. Since the manual
collector is only needed to free cyclic references, I guess that Twisted
people would rather prefer a patch to break cyclic references in Twisted
code. For example, using "__del__" methods or "weakref".

You can easily see what objects and references keep the cycles alive
using "gc.garbage" and "gc.get_referrers()". Usually a single
"a.value=None" can do miracles :-). Weakref can be very very helpful, also.

http://docs.python.org/lib/module-gc.html
http://docs.python.org/lib/module-weakref.html

Merry Christmas and happy 2006, by the way.

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ7Cmzplgi5GaxT1NAQJndAP/YQNK/wHcBWIBfybJEeMyyaCJ+nxNsOXo
XYZ/L0znLwnUY2enpwQ9GWDb1N1JlSRGyBs19EVXsu1kl9XuCxKjO+Qc2wuZE8La
kspNJu9ZEHTVn8hNhgoZkFsKmed8g2zvP8HmlFD1ZEdXJ3+nuzmf2AjcsBHUkFl8
Aqe1+xrIp+Q=
=Cobp
-----END PGP SIGNATURE-----



From andrea at cpushare.com  Mon Dec 26 21:37:06 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 03:37:06 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <ADFEA6CA-5E1D-4511-9E7D-C501AB286BC9@redivi.com>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random>
	<ADFEA6CA-5E1D-4511-9E7D-C501AB286BC9@redivi.com>
Message-ID: <20051227023706.GW9576@opteron.random>

On Mon, Dec 26, 2005 at 08:22:24PM -0500, Bob Ippolito wrote:
> Take a look at:
> http://docs.python.org/lib/module-gc.html
> 
> You can adjust the threshold for each GC generation to suit your  
> application better.

gc.set_threshold(1, 1, 1) fixed it too, any other setting didn't
(sometime it increases to 100m). If (1,1,1) is as good as it can get,
I'll keep doing the gc.collect() during the factory restart since the
50m allocation only happens after the connectionMade callback and never
again in the context of any given protocol. So the gc.collect() seems
the optimal fix to me for now.

I wish the size of the task would be taken into account any way in the
threshold tunables. I'd like to say "gc.set_mem_threshold({30*1024*1024
: (10, 10, 10), 50*1024*1024 : (1, 1, 1),})", which mean it's a dynamic
threshold. It should be possible to implement this in O(1), the
interpreter should easily track how much anonymous memory it has
allocated with malloc at any given time. The more anonymous memory, the
less generations it should wait. It could be a linear function too.
However for now I'm happy with the gc.collect().

Thanks a lot for all help.



From radeex at gmail.com  Mon Dec 26 21:47:42 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 27 Dec 2005 13:47:42 +1100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <43B0A6CE.7080200@argo.es>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random> <43B0A6CE.7080200@argo.es>
Message-ID: <60ed19d40512261847k56ee4da4o654a80f978edfbd2@mail.gmail.com>

On 12/27/05, Jesus Cea <jcea at argo.es> wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Wow, Andrea Arcangeli, of Linux Kernel fame. What an honor :).
>
> > +             import gc
> > +             gc.collect()
>
> Haha. I was just writing you about manual garbage collector invocations.
>
> Manual collections can be costly, nevertheless. Since the manual
> collector is only needed to free cyclic references, I guess that Twisted
> people would rather prefer a patch to break cyclic references in Twisted
> code. For example, using "__del__" methods or "weakref".
>
> You can easily see what objects and references keep the cycles alive
> using "gc.garbage" and "gc.get_referrers()". Usually a single
> "a.value=None" can do miracles :-). Weakref can be very very helpful, also.

Just some points of clarification, as I don't think Jesus has got the
whole story:

 - gc.collect() is the equivalent of what's run occassionally by
Python. So explicitly calling it is *not* required to break all
circular references. In this case, it only helped because Andrea was
accumulating objects quicker than the Python-scheduled gc.collect was
being run.
 - I really doubt we need a patch to Twisted to break any cyclic references. :)
 - gc.garbage contains what _won't_ be collected by a call to
gc.collect(). gc.garbage contains only broken cycles (e.g., those with
objects that have __del__ methods), not all cycles.
- Ever since the new gc system was enabled by default in Python, it
should never be necessary to manually break cycles unless you have
__del__ crap involved.


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From jcea at argo.es  Mon Dec 26 22:17:21 2005
From: jcea at argo.es (Jesus Cea)
Date: Tue, 27 Dec 2005 04:17:21 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <60ed19d40512261847k56ee4da4o654a80f978edfbd2@mail.gmail.com>
References: <20051226160735.GP9576@opteron.random>	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>	<20051227001833.GQ9576@opteron.random>	<20051227010237.GS9576@opteron.random>
	<43B0A6CE.7080200@argo.es>
	<60ed19d40512261847k56ee4da4o654a80f978edfbd2@mail.gmail.com>
Message-ID: <43B0B241.6090607@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Thank you for ypur correction, Christopher. You are right, of course. My
fault. I apologize. 04:08 in the morning in Spain :-p. Better go to bed
now...

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ7CyQJlgi5GaxT1NAQKyWAP9FNb1a9POh2XsTnCrRcxEDQQdIy2451iq
uqGVlFHmUMx90TmY3rn2HATXOASzc+pz+UPQOD8eRJiyhNVNP/OSxK6sx55Wyjnm
6KI01j7WxlE5P06tS58ANFDiDuudDOqM4kmOb6xtXkSSfeDFsmfecwWnXhKgnzaZ
cyeAWW92cR0=
=xanq
-----END PGP SIGNATURE-----



From andrea at cpushare.com  Mon Dec 26 22:20:07 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 04:20:07 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <43B0A6CE.7080200@argo.es>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random> <43B0A6CE.7080200@argo.es>
Message-ID: <20051227032007.GY9576@opteron.random>

On Tue, Dec 27, 2005 at 03:28:30AM +0100, Jesus Cea wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> Wow, Andrea Arcangeli, of Linux Kernel fame. What an honor :).
> 
> > +		import gc
> > +		gc.collect()
> 
> Haha. I was just writing you about manual garbage collector invocations.

;) Thanks! I couldn't even think that it could have been the garbage
collector because the thing was >1G large. I definitely expected any
sane garbage collector to kick in at least once every time the task was
doubling in size and certainly before the thing could grow to the
gigabytes. Perhaps this is what should really happen. Every time the
task doubles in size we could force a gc.collect(). The growth rate that
should trigger a collect() could be a threshold tunable too (default
None to be backwards compatible even though I think None is not a
safe/sane default).

> Manual collections can be costly, nevertheless. Since the manual
> collector is only needed to free cyclic references, I guess that Twisted
> people would rather prefer a patch to break cyclic references in Twisted
> code. For example, using "__del__" methods or "weakref".
> 
> You can easily see what objects and references keep the cycles alive
> using "gc.garbage" and "gc.get_referrers()". Usually a single
> "a.value=None" can do miracles :-). Weakref can be very very helpful, also.

a.value=None + weakrefs is what did the miracles indeed, but I did it in my
code not in twisted code. twisted code has no cyclic references. All
cyclic references were in my code sitting on top of twisted. It's me
implementing the protocol.

The a.value=None made the code a mess, the weakref complicated things
too (especially because I had to hash one of those weak values, so I had
to use weakref.ref and I had to change lots of code to add "()"). So I'm
soooo glad to have backed out all those changes because they were
unnecessary ;). Plus a.value = None is similar to freeing memory in a
normal language without garbage collection, not very different from
free(a.value). So I certainly prefer to use the more advanced features
of the garbage collector, even if I have to invoke it by hand... ;)



From andrea at cpushare.com  Mon Dec 26 22:27:24 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 04:27:24 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <60ed19d40512261847k56ee4da4o654a80f978edfbd2@mail.gmail.com>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random> <43B0A6CE.7080200@argo.es>
	<60ed19d40512261847k56ee4da4o654a80f978edfbd2@mail.gmail.com>
Message-ID: <20051227032724.GZ9576@opteron.random>

On Tue, Dec 27, 2005 at 01:47:42PM +1100, Christopher Armstrong wrote:
>  - gc.collect() is the equivalent of what's run occassionally by

IMHO the "occasionally" is the only wrong thing of the whole story. It
must not be "occasionally", it must be "occasionally _or_ when the task
is growing to an insanse size". The total amount of anonymous memory
allocated by the interpreter must be tracked in O(1) and a collect()
should have been invokved at least every time the amount of memory
doubled.

The reason it took me so long before I could suspect the gc, is that
coming from a vm kernel background, I couldn't even dream that after the
task grown up to >1G and the system was into swap, the python gc didn't
even yet try to prune all potentially freeable objects. The gc should
definitely be in function of "size" too, and currently it's not. There
is definitely room for improvements in the gc by adding heuristics in
function of "size of anonymous memory allocated", and it doesn't seem
difficult to add it, nor it should impact performance since the
deep gc.collect() (the only costly thing) would very rarely be invoked
more frequently.



From therve at free.fr  Tue Dec 27 03:35:03 2005
From: therve at free.fr (Thomas HERVE)
Date: Tue, 27 Dec 2005 09:35:03 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051227032724.GZ9576@opteron.random>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random> <43B0A6CE.7080200@argo.es>
	<60ed19d40512261847k56ee4da4o654a80f978edfbd2@mail.gmail.com>
	<20051227032724.GZ9576@opteron.random>
Message-ID: <20051227093503.ybjc3vp9w880wo4o@itchy.wasabout.net>

Quoting Andrea Arcangeli <andrea at cpushare.com>:

> On Tue, Dec 27, 2005 at 01:47:42PM +1100, Christopher Armstrong wrote:
>>  - gc.collect() is the equivalent of what's run occassionally by
>
> IMHO the "occasionally" is the only wrong thing of the whole story. It
> must not be "occasionally", it must be "occasionally _or_ when the task
> is growing to an insanse size".

One good way to see the gc in action is to add 
'gc.set_debug(gc.DEBUG_LEAK)' at
the start of your program. Most of the time I realize it's my program fault
when I use this :).

But you may have to adjust the gc threshold in real life application 
(note that
a reconnectingclientfactory with a disconnect every second is not 
exactly a use
case).

-- 
Thomas




From therve at free.fr  Tue Dec 27 08:15:53 2005
From: therve at free.fr (Thomas HERVE)
Date: Tue, 27 Dec 2005 14:15:53 +0100
Subject: Python 2.2 Support has been officially dropped (was Re:
	[Twisted-Python] Python 2.2 Support)
In-Reply-To: <20051224041445.1217.1583662422.divmod.quotient.7996@ohm>
References: <20051224041445.1217.1583662422.divmod.quotient.7996@ohm>
Message-ID: <20051227141553.y5kvigumbk04gos8@itchy.wasabout.net>

Quoting glyph at divmod.com:

> That means that 2.2 is no longer officially supported, and the next 
> release will not run on any 2.2-only platforms.
>
> Merry christmas, I guess :).
>

Great news ! We may finally enjoy 2.3 optimizations in Twisted : I think about
string module, list comprehensions, optparse, new style classes... without
introducing changes (just syntaxic/optimization changes).

Would it be the good moment to open a topic in the bug tracker to hold these
patches ? Or it's better to wait for a sprint, when all these changes could be
made ?

Thanks for everything,

-- 
Thomas






From radeex at gmail.com  Tue Dec 27 08:23:59 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 28 Dec 2005 00:23:59 +1100
Subject: Python 2.2 Support has been officially dropped (was Re:
	[Twisted-Python] Python 2.2 Support)
In-Reply-To: <20051227141553.y5kvigumbk04gos8@itchy.wasabout.net>
References: <20051224041445.1217.1583662422.divmod.quotient.7996@ohm>
	<20051227141553.y5kvigumbk04gos8@itchy.wasabout.net>
Message-ID: <60ed19d40512270523m4e2992cv4c7176addc5a85d3@mail.gmail.com>

On 12/28/05, Thomas HERVE <therve at free.fr> wrote:
> Great news ! We may finally enjoy 2.3 optimizations in Twisted : I think about
> string module, list comprehensions, optparse, new style classes... without
> introducing changes (just syntaxic/optimization changes).

Wow man, where have you been? The string module has been mostly
obsolete since (I think) 2.0, and the list comps and new style classes
were already in Python 2.2. I can't remember about optparse; all
Twisted code uses twisted.python.usage.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From andrea at cpushare.com  Tue Dec 27 08:37:54 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 14:37:54 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051227093503.ybjc3vp9w880wo4o@itchy.wasabout.net>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random> <43B0A6CE.7080200@argo.es>
	<60ed19d40512261847k56ee4da4o654a80f978edfbd2@mail.gmail.com>
	<20051227032724.GZ9576@opteron.random>
	<20051227093503.ybjc3vp9w880wo4o@itchy.wasabout.net>
Message-ID: <20051227133754.GA27200@opteron.random>

On Tue, Dec 27, 2005 at 09:35:03AM +0100, Thomas HERVE wrote:
> But you may have to adjust the gc threshold in real life application 
> (note that
> a reconnectingclientfactory with a disconnect every second is not 
> exactly a use
> case).

You just need to send a buffer larger than MAX_LENGTH of the
Int32StringReceiver to trigger a disconnect on the other end, this is
what my testcase did. Of course it's not the normal behaviour, but
python shouldn't allocate >1G of ram in that case, exactly because this
is not a common load, you should only have to worry about why the other
end dropped the connection, and not about the memory management.



From therve at free.fr  Tue Dec 27 08:59:00 2005
From: therve at free.fr (Thomas HERVE)
Date: Tue, 27 Dec 2005 14:59:00 +0100
Subject: Python 2.2 Support has been officially dropped (was Re:
	[Twisted-Python] Python 2.2 Support)
In-Reply-To: <60ed19d40512270523m4e2992cv4c7176addc5a85d3@mail.gmail.com>
References: <20051224041445.1217.1583662422.divmod.quotient.7996@ohm>
	<20051227141553.y5kvigumbk04gos8@itchy.wasabout.net>
	<60ed19d40512270523m4e2992cv4c7176addc5a85d3@mail.gmail.com>
Message-ID: <20051227145900.79rkpba0gs0kg4k4@itchy.wasabout.net>

Quoting Christopher Armstrong <radeex at gmail.com>:
>
> Wow man, where have you been? The string module has been mostly
> obsolete since (I think) 2.0, and the list comps and new style classes
> were already in Python 2.2

Well I do know that, but what's the reason why I see so many "import 
string" in
the trunk ? Why I see so many classes that don't subclass object ?

I know it's a lot of work, so I was just asking if it's in the roadmap or not.

> I can't remember about optparse; all
> Twisted code uses twisted.python.usage.

Wouldn't it be better to subclass OptParse ? I have the feeling usage.Options
does nearly the same things.

-- 
Thomas





From exarkun at divmod.com  Tue Dec 27 09:14:35 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 27 Dec 2005 09:14:35 -0500
Subject: Python 2.2 Support has been officially dropped (was Re:
	[Twisted-Python] Python 2.2 Support)
In-Reply-To: <20051227145900.79rkpba0gs0kg4k4@itchy.wasabout.net>
Message-ID: <20051227141435.1217.545088208.divmod.quotient.8347@ohm>

On Tue, 27 Dec 2005 14:59:00 +0100, Thomas HERVE <therve at free.fr> wrote:
>Quoting Christopher Armstrong <radeex at gmail.com>:
>>
>>Wow man, where have you been? The string module has been mostly
>>obsolete since (I think) 2.0, and the list comps and new style classes
>>were already in Python 2.2
>
>Well I do know that, but what's the reason why I see so many "import string" 
>in
>the trunk ? Why I see so many classes that don't subclass object ?

Patches that remove usage of the string module will surely be 
accepted. :)

Patches that introduce object as a base class may not be.  Classic 
classes behave differently than new-style classes.  It is not always 
possible to replace the former with the latter while maintaining API
compatibility.

>
>I know it's a lot of work, so I was just asking if it's in the roadmap or 
>not.
>>I can't remember about optparse; all
>>Twisted code uses twisted.python.usage.
>
>Wouldn't it be better to subclass OptParse ? I have the feeling 
>usage.Options
>does nearly the same things.

Perhaps OptParse should subclass usage.Options.

Seriously.  We looked at switching to optparse a while ago.  t.p.u 
is better.  Nothing stops you from using optparse with Twisted, 
though.

Jean-Paul



From radeex at gmail.com  Tue Dec 27 09:17:13 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 28 Dec 2005 01:17:13 +1100
Subject: Python 2.2 Support has been officially dropped (was Re:
	[Twisted-Python] Python 2.2 Support)
In-Reply-To: <20051227145900.79rkpba0gs0kg4k4@itchy.wasabout.net>
References: <20051224041445.1217.1583662422.divmod.quotient.7996@ohm>
	<20051227141553.y5kvigumbk04gos8@itchy.wasabout.net>
	<60ed19d40512270523m4e2992cv4c7176addc5a85d3@mail.gmail.com>
	<20051227145900.79rkpba0gs0kg4k4@itchy.wasabout.net>
Message-ID: <60ed19d40512270617y40acf231o9f36b750b26a7039@mail.gmail.com>

On 12/28/05, Thomas HERVE <therve at free.fr> wrote:
> Quoting Christopher Armstrong <radeex at gmail.com>:
> >
> > Wow man, where have you been? The string module has been mostly
> > obsolete since (I think) 2.0, and the list comps and new style classes
> > were already in Python 2.2
>
> Well I do know that, but what's the reason why I see so many "import
> string" in
> the trunk ? Why I see so many classes that don't subclass object ?

Don't rock the boat. Don't fix what ain't broken. etc. New classes
often subclass object, and new code always uses str methods. I do seem
to remember that there was a big str-method change to Twisted a while
back, for the sake of optimisation. I don't see any similar
improvement to having a big festival for switching everything to
object.

> > I can't remember about optparse; all
> > Twisted code uses twisted.python.usage.
>
> Wouldn't it be better to subclass OptParse ? I have the feeling usage.Options
> does nearly the same things.

I'm pretty sure that debate has been had, although I don't know if it
was on the mailing list. I suggest searching the archives.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From therve at free.fr  Tue Dec 27 09:45:48 2005
From: therve at free.fr (Thomas HERVE)
Date: Tue, 27 Dec 2005 15:45:48 +0100
Subject: Python 2.2 Support has been officially dropped (was Re:
	[Twisted-Python] Python 2.2 Support)
In-Reply-To: <20051227141435.1217.545088208.divmod.quotient.8347@ohm>
References: <20051227141435.1217.545088208.divmod.quotient.8347@ohm>
Message-ID: <20051227154548.fei8yqvgcgo4ocsg@itchy.wasabout.net>

Quoting Jean-Paul Calderone <exarkun at divmod.com>:

> Patches that remove usage of the string module will surely be accepted. :)

It would be good : I count 94 occurences of string import in the trunk. I'll
open a topic.

> Patches that introduce object as a base class may not be.  Classic 
> classes behave differently than new-style classes.  It is not always 
> possible to replace the former with the latter while maintaining API
> compatibility.

Ok, thanks for your answer. I miss new-style class for mainly one thing : the
automatic __init__, great for subclasses.

-- 
Thomas




From glyph at divmod.com  Tue Dec 27 10:21:10 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 27 Dec 2005 10:21:10 -0500
Subject: Curb Your Enthusiasm (was Re: Python 2.2 Support has been
	officially dropped (was Re: [Twisted-Python] Python 2.2 Support))
In-Reply-To: <20051227154548.fei8yqvgcgo4ocsg@itchy.wasabout.net>
Message-ID: <20051227152110.1217.490878974.divmod.quotient.8365@ohm>

On Tue, 27 Dec 2005 15:45:48 +0100, Thomas HERVE <therve at free.fr> wrote:
>Quoting Jean-Paul Calderone <exarkun at divmod.com>:
>>Patches that remove usage of the string module will surely be accepted. :)
>
>It would be good : I count 94 occurences of string import in the trunk. I'll
>open a topic.

This is a worthwhile goal since we made the decision to stop importing the string module several years ago, however:

Just because Python2.2 support has been dropped does not mean that we should waste time crawling all over the codebase to update "old" code to the new standard.

1) Somebody might still have to backport it one day.  We aren't going to support that, but neither should we make it unnecessarily difficult.

2) If you're that enthused to do work on Twisted, there are lots of other, more worthwhile projects you could be engaging in.  I'm tempted to write a list, but you know where the bugtracker is.  Let's not make any unnecessary work.  If you're interested in stylistic improvements, one thing you might want to look at is removing uses of deprecated trial APIs such as wait() from the unit tests.

>Ok, thanks for your answer. I miss new-style class for mainly one thing : 
>the
>automatic __init__, great for subclasses.

How is __init__ more automatic in new-style classes?  Do you mean super()?

At any rate, when we do start a new-style push, we should probably have a 'from twisted import __metaclass__' at the top of each file, to make updating the codebase to incorporate object-model and/or debugging enhancements easier.



From therve at free.fr  Tue Dec 27 12:04:20 2005
From: therve at free.fr (Thomas HERVE)
Date: Tue, 27 Dec 2005 18:04:20 +0100
Subject: Curb Your Enthusiasm (was Re: Python 2.2 Support has been
	officially dropped (was Re: [Twisted-Python] Python 2.2 Support))
In-Reply-To: <20051227152110.1217.490878974.divmod.quotient.8365@ohm>
References: <20051227152110.1217.490878974.divmod.quotient.8365@ohm>
Message-ID: <20051227180420.3ngxi8log40kk40c@itchy.wasabout.net>

Quoting glyph at divmod.com:

> On Tue, 27 Dec 2005 15:45:48 +0100, Thomas HERVE <therve at free.fr> wrote:
>> Quoting Jean-Paul Calderone <exarkun at divmod.com>:
>>> Patches that remove usage of the string module will surely be accepted. :)
>>
>> It would be good : I count 94 occurences of string import in the trunk. I'll
>> open a topic.
>
> This is a worthwhile goal since we made the decision to stop 
> importing the string module several years ago, however:

[Issue created here : http://twistedmatrix.com/bugs/issue1381].

> Just because Python2.2 support has been dropped does not mean that we 
> should waste time crawling all over the codebase to update "old" code 
> to the new standard.

Ok I understand that. Hopefully it doesn't apply to the string module :).

> 2) If you're that enthused to do work on Twisted, there are lots of 
> other, more worthwhile projects you could be engaging in.  I'm 
> tempted to write a list, but you know where the bugtracker is.  Let's 
> not make any unnecessary work.  If you're interested in stylistic 
> improvements, one thing you might want to look at is removing uses of 
> deprecated trial APIs such as wait() from the unit tests.

Great. I'm willing to work on Twisted, and I have time for that. I work
full-time on Twisted-based applications, and my employer is well-disposed to
give a bit of this time to Twisted itself. Indeed taking tasks in the bts is a
good way to help Twisted.

>> Ok, thanks for your answer. I miss new-style class for mainly one 
>> thing : the
>> automatic __init__, great for subclasses.
>
> How is __init__ more automatic in new-style classes?  Do you mean super()?

Well I mean like that:

class MyClass(TwistedClass):
    def __init__(self, myargs):
        super(TwistedClass, self).__init__() # doesn't work
        TwistedClass.__init__(self) # doesn't work either

> At any rate, when we do start a new-style push, we should probably 
> have a 'from twisted import __metaclass__' at the top of each file, 
> to make updating the codebase to incorporate object-model and/or 
> debugging enhancements easier.

I remember seeing this in Nevow, without understanding it at first. It 
seeems to
solve the super problem, but looks a bit like black magic :).

Thanks a lot for your patience, I'll try to bit less noisy and more useful.

-- 
Thomas




From bgranger at scu.edu  Tue Dec 27 12:36:57 2005
From: bgranger at scu.edu (Brian Granger)
Date: Tue, 27 Dec 2005 09:36:57 -0800
Subject: [Twisted-Python] Securing a custom protocol
Message-ID: <23206A12-219B-4357-BEAE-396B706D1BFF@scu.edu>

Hi,

I have written a custom line based protocol using twisted.  I need to  
add authentication and encryption to my protocol and I am wondering  
what the best route is.  Here are some options that I see:

1.  Use SSL for encryption and cred for user authentication

2.  Use SSH through conch

As I understand it, both of these approaches can do authentication  
and encryption of any protocol.  What are the advantages and  
disadvantages or each?  Which is more robust and supported in  
twisted?  Are there other approaches in twisted that I am missing?

Some design constraints I have:

1.  I need the protocol to be as fast as possible - low latency and  
high throughput.

2.  I need to be able to run the protocol without encryption when  
speed is more important than security.

Thanks!

Brian



From warner at lothar.com  Tue Dec 27 13:15:42 2005
From: warner at lothar.com (Brian Warner)
Date: Tue, 27 Dec 2005 10:15:42 -0800 (PST)
Subject: [Twisted-Python] Receiving a root from a pb client
Message-ID: <20051227.101542.74740205.warner@lothar.com>

william.lewis at uk.bnpparibas.com writes:

> I am using pb to communicate in a client-server configuration. My client
> inherits from PBClientFactory. My server has a remote_take_root() method
> by which the client can connect to the server and pass in its root, thus
> allowing two-way communication. Is there anyway for the server to
> re-establish the connection (should it go down) in this setup, or is
> this the sole responsibility of the client?

The other posters in this thread have it exactly right. The RemoteReference
that is received by your remote_take_root() method does not carry enough
information to allow anyone else (including your server) to initiate a new
connection to the Broker which hosts it. In this configuration, the "client"
side (specifically the side which initiates the PB connection with a
PBClientFactory) must be responsible for any sort of reconnection.

Incidentally, in newpb this won't necessarily be the case. Both ends can
listen on a TCP socket, and the RemoteReference that you receive may contain
enough information to connect to its source. It is still a good idea to make
exactly one side be responsible for things like reconnection, though, because
otherwise you get a bunch of ugly race conditions as both sides attempt to
connect at the same time. (newpb handles this for you, so you'll only get a
single connection between the two Tubs, but it's still ugly). Also, the
application level should be aware of the reconnection events, otherwise it
becomes more difficult to be sure about which methods have been successfully
invoked and which have not.

cheers,
 -Brian



From warner at lothar.com  Tue Dec 27 13:38:28 2005
From: warner at lothar.com (Brian Warner)
Date: Tue, 27 Dec 2005 10:38:28 -0800 (PST)
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
Message-ID: <20051227.103828.79929151.warner@lothar.com>

>>I am pretty sure newpb, which Brian Warner was threatening to merge any
>>day now, will support this much better than PB does.

Yup.

In oldpb, object graphs are serialized through recursive calls to Jelly,
which has a big switch statement (in twisted.spread.jelly._Jellier.jelly)
that uses a different one-object serializer for each type. To teach oldpb how
to handle a new type, you have to modify this function, and the corresponding
unjellier, and then arrange for your Broker to use the new _Jellier classes
instead of the normal ones. Subclassing pb.Copyable does away with this, but
as you've noticed it is both slightly inefficent (particularly if you're
using __slots__ anyway) and requires extensive surgery or pre-marshalling to
use with third-party code that doesn't happen to inherit from pb.Copyable.

In newpb, object graphs are serialized through iterative calls to a
collection of Slicers. Each time a new object needs to be serialized, the
enclosing Slicers help decide (based upon both the type of the object and any
adapters that have been registered for it) which new Slicer to use. To teach
newpb how to serialize a new type, you register an adapter for it (e.g.
registerAdapter(BooleanSlicer, bool, ISlicer)). To teach newpb how to
unserialize the resulting stream, you define an Unslicer class (there is some
metaclass magic which auto-registers the Unslicer for you.. I'm still going
back and forth on the best way to do this).

The advantage of the adapter/registration scheme is that you don't have to
modify the inheritance set of the classes you want to serialize, so
third-party code is easy to accomodate without surgery or pre-marshalling.
Pre-marshalling is a serious nuisance, because to do it correctly means
looking inside every possible container for further instances of the type
that needs to be converted into something jelly can handle, which is just as
much work as the final serialization itself.

Take a look at branches/newpb-again, in the doc/pb directory, for some
examples and descriptions of how to use newpb. The code itself is in the
twisted/pb directory (unless we come up with a different name for it). It's
still in development: it was in the trunk for a few hours last week, but
hopefully I'll get the remaining test failures resolved and it will go back
into the trunk some time this week.

cheers,
 -Brian



From foom at fuhm.net  Wed Dec 28 01:00:07 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 28 Dec 2005 00:00:07 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1ErUM3-0008HX-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-12-21 07:00:01.630000:
 Bugs opened: 10   Bugs closed: 5   Total open bugs: 506 (+5)
  Urgent: 1 (+0)
  Bug: 241 (+1)
  Feature: 180 (+3)
  Wish: 84 (+1)

New / Reopened Bugs
______________________
                    ==== Bug ====
twisted.web.client.HTTPClientFactory sends Host header (and others) more than once  (yesterday)
       http://twistedmatrix.com/bugs/issue1382 opened by trickos

[TESTS, TRIAL] t.trial.test.test_output tests fail on win32 select reactor  (yesterday)
       http://twistedmatrix.com/bugs/issue1380 opened by jml

[TRIAL] Implementing setUpClass should not require ClassSuite  (2 days ago)
       http://twistedmatrix.com/bugs/issue1379 opened by jml

[TRIAL] Fail test suite on import error  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1377 opened by jml

iocpreactor WindowsError: (0, 'De bewerking is voltooid')  (3 days ago)
       http://twistedmatrix.com/bugs/issue1378 opened by ghazel

[TRIAL] Organise Trial's unit tests  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1374 opened by jml

                    ==== Feature ====
[CONCH] hashed host entries in known_hosts for conch (SSH)  (4 days ago)
       http://twistedmatrix.com/bugs/issue1376 opened by count0

hashed host entries in known_hosts for conch (SSH)  (4 days ago)
       http://twistedmatrix.com/bugs/issue1375 opened by count0

[CORE] Support twisted.internet.stdio on Windows  (6 days ago)
       http://twistedmatrix.com/bugs/issue1373 opened by itamarst

                    ==== Wish ====
[CORE] Remove string import  (yesterday)
       http://twistedmatrix.com/bugs/issue1381 opened by therve

Bugs Closed
______________________
                    ==== Bug ====
[TESTS, WEB] twisted.web2.test.test_http calls reactor.iterate()  (3 months ago)
       http://twistedmatrix.com/bugs/issue1186 opened by exarkun, closed by jknight

[TRIAL] Fail test suite on import error  (4 days ago)
       http://twistedmatrix.com/bugs/issue1377 opened by jml, closed by jml

[TRIAL] Organise Trial's unit tests  (5 days ago)
       http://twistedmatrix.com/bugs/issue1374 opened by jml, closed by jml

[TRIAL] Clean up Trial's Runner and Loader concepts  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1355 opened by jml, closed by jml

[CORE, TRIAL] Raising SkipTest in setUp is treated as an error  (7 days ago)
       http://twistedmatrix.com/bugs/issue1372 opened by exarkun, closed by jml




From dkarbott at comcast.net  Wed Dec 28 14:24:32 2005
From: dkarbott at comcast.net (dkarbott at comcast.net)
Date: Wed, 28 Dec 2005 19:24:32 +0000
Subject: [Twisted-Python] SSL client authentication
Message-ID: <122820051924.19895.43B2E670000BCC0700004DB722007504389B9B010D9D0E050B@comcast.net>

Is it possible to do client authentication with reactor.listenSSL() and reactor.connectSSL()?

If so, are there any examples?

Any info would be much appreciated.  

Regards,

-- Darrell



From andrea at cpushare.com  Wed Dec 28 20:53:37 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu, 29 Dec 2005 02:53:37 +0100
Subject: [Twisted-Python] SSL client authentication
In-Reply-To: <122820051924.19895.43B2E670000BCC0700004DB722007504389B9B010D9D0E050B@comcast.net>
References: <122820051924.19895.43B2E670000BCC0700004DB722007504389B9B010D9D0E050B@comcast.net>
Message-ID: <20051229015337.GN27200@opteron.random>

On Wed, Dec 28, 2005 at 07:24:32PM +0000, dkarbott at comcast.net wrote:
> Is it possible to do client authentication with reactor.listenSSL() and reactor.connectSSL()?
> 
> If so, are there any examples?

I authenticate the certificate of the server in this client app:

	https://www.cpushare.com/downloads/cpushare-0.24.tar.bz2

Hope this example helps.



From paulswartz at gmail.com  Thu Dec 29 16:30:26 2005
From: paulswartz at gmail.com (Paul Swartz)
Date: Thu, 29 Dec 2005 16:30:26 -0500
Subject: [Twisted-Python] Depreciation of trial.unittest functions?
Message-ID: <43B45572.9020405@gmail.com>

I'm not sure if Conch is the only project that did this, but it used the
trial.unittest.* functions instead of methods on TestCases.  I used them
to avoid having to pass TestCase instances around all over the places,
or using a global variable.  To avoid the depreciation warnings, I've
starting using the unittest._inst global variable, but I doubt that this
is the appropriate way to change my code.  Is this just not a supported
way of using Trial, or is there something else I should be doing?

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin
GPG: 5CF0B1C9



From umit at liqia.com  Fri Dec 30 10:26:08 2005
From: umit at liqia.com (Umit Oztosun)
Date: Fri, 30 Dec 2005 17:26:08 +0200
Subject: [Twisted-Python] Qtreactor problem on twisted 2.1
In-Reply-To: <d95439ec0512300647j29e8b78cv5f2649a16d37e87f@mail.gmail.com>
References: <d95439ec0512300647j29e8b78cv5f2649a16d37e87f@mail.gmail.com>
Message-ID: <d95439ec0512300726k528c9016mf0a2728c8ee48be1@mail.gmail.com>

Hello,

Our application uses twisted as the core network framework. It
basically consists of a server and multiple clients. All communication
is carried on a twisted.spread.pb channel. We have been using twisted
1.3 since the beginning, we decided to switch to twisted 2.1, the
switch was easy but an interesting problem showed up.

Our client is based on PyQt, so uses qtreactor. If something goes
wrong on the server side, the error is transferred to the client
(automagically, thanks to twisted & deferreds), and handled there
(with an errback). We warn our users about the failure with a dialog.
The interesting part is, with twisted 2.1, at the dialog's exec_loop()
call, occasionally the connection between the server and client goes
away with the following exception:
-------------------------------------------
2005/12/30 15:51 GTB Standard Time [-] Error in <<class
'twisted.internet.tcp.TLSConnection'> to (u'localhost', 4243) at
1312e50>.doRead()
2005/12/30 15:51 GTB Standard Time [-] Traceback (most recent call last):
          File "C:\Python24\Lib\site-packages\twisted\internet\defer.py",
line 182, in addCallbacks
            self._runCallbacks()
          File "C:\Python24\Lib\site-packages\twisted\internet\defer.py",
line 307, in _runCallbacks
            self.result = callback(self.result, *args, **kw)
          File ".\lq\lqtrxutils.py", line 126, in eb_localFailed

          File ".\lq\lqdialog.py", line 201, in showDialog

        --- <exception caught here> ---
          File "C:\Python24\Lib\site-packages\twisted\internet\qtreactor.py",
line 62, in read
            why = w.doRead()
          File "C:\Python24\Lib\site-packages\twisted\internet\tcp.py", line
111, in doRead
            return Connection.doRead(self)
          File "C:\Python24\Lib\site-packages\twisted\internet\tcp.py", line
347, in doRead
            return self.protocol.dataReceived(data)
          File "C:\Python24\Lib\site-packages\twisted\spread\banana.py", line
173, in dataReceived
            gotItem(self.incomingVocabulary[num])
          File "C:\Python24\Lib\site-packages\twisted\spread\banana.py", line
114, in gotItem
            self.callExpressionReceived(item)
          File "C:\Python24\Lib\site-packages\twisted\spread\banana.py", line
81, in callExpressionReceived
            self.expressionReceived(obj)
          File "C:\Python24\Lib\site-packages\twisted\spread\pb.py", line
567, in expressionReceived
            raise ProtocolError("Non-list expression received.")
        twisted.spread.pb.ProtocolError: Non-list expression received.

2005/12/30 15:51 GTB Standard Time [-] <twisted.internet.ssl.Connector
instance at 0x0134BE90> will retry in 2 seconds
2005/12/30 15:51 GTB Standard Time [-] Stopping factory
<lqclientfactory.lqClientFactory instance at 0x0134BDF0>
-------------------------------------------
Line 201 at lqdialog.py reads as
    result = self.exec_loop()

We are using a reconnecting client factory, the application reconnects
in a matter of seconds but this behaviour is annoying. As I wrote
above, the we had no problem when using 1.3.

Any ideas?

Regards, and happy new year!
Umit Oztosun

P.S.: Tested on both Windows XP and Ubuntu Linux (5.10 and 5.04).
Disconnection occurs regardless of using or not using SSL.



From foom at fuhm.net  Fri Dec 30 11:42:02 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 30 Dec 2005 11:42:02 -0500
Subject: [Twisted-Python] Qtreactor problem on twisted 2.1
In-Reply-To: <d95439ec0512300726k528c9016mf0a2728c8ee48be1@mail.gmail.com>
References: <d95439ec0512300647j29e8b78cv5f2649a16d37e87f@mail.gmail.com>
	<d95439ec0512300726k528c9016mf0a2728c8ee48be1@mail.gmail.com>
Message-ID: <600A6501-4966-484E-B024-C26CEBA7B5A7@fuhm.net>


On Dec 30, 2005, at 10:26 AM, Umit Oztosun wrote:

> Hello,
>
> Our application uses twisted as the core network framework. It
> basically consists of a server and multiple clients. All communication
> is carried on a twisted.spread.pb channel. We have been using twisted
> 1.3 since the beginning, we decided to switch to twisted 2.1, the
> switch was easy but an interesting problem showed up.
>
> Our client is based on PyQt, so uses qtreactor. If something goes
> wrong on the server side, the error is transferred to the client
> (automagically, thanks to twisted & deferreds), and handled there
> (with an errback). We warn our users about the failure with a dialog.
> The interesting part is, with twisted 2.1, at the dialog's exec_loop()
> call, occasionally the connection between the server and client goes
> away with the following exception:

For some reason, the stack trace looks truncated, since it starts  
with defer.py:addCallbacks. But my guess is that read is getting  
called re-entrantly. By calling exec_loop within a callback, you're  
causing the reactor to loop within another reactor loop, and the  
reactor isn't designed to ensure it's safe to do that. Is it possible  
to change the code to show a dialog box without running a sub-loop?

James




From glyph at divmod.com  Fri Dec 30 20:35:44 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 30 Dec 2005 20:35:44 -0500
Subject: [Twisted-Python] Twisted windows hackers - help the tests to pass!
In-Reply-To: 0
Message-ID: <20051231013544.1217.85617702.divmod.quotient.8979@ohm>

Twisted fails scads of tests on Windows.  You can see that here: http://twistedmatrix.com/buildbot/

I know that there are at least a few people on this list that use Twisted on Windows.  Doesn't it bother you that it's broken?  If you're a windows developer, help out and fix some tests!  A few Twisted hackers, Justin J. in particular, are hard at work to make it scale and perform well on Windows, but in addition to the rocket-science of IOCP there is quite a bit of grunt work to do, especially in the area of understanding why certain tests fail when they pass on other (more UNIX-y) platforms.

So please, try debugging some Twisted unit tests and either submitting bug reports explaining what's going on so an existing Twisted dev can fix them, or submitting patches that we can apply.

The real bonus for you if you're using Twisted on Windows in some commercial capacity is that once the buildbot turns green, test fascists like JP (or, on off days, myself) can revert changes which break it, and enforce a higher standard of quality for portability of Twisted code.  Right now it's hard to convince developers to not make it fail _more_ tests, since hey, it's broken already, right?



From corydodt at twistedmatrix.com  Fri Dec 30 23:39:46 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Fri, 30 Dec 2005 20:39:46 -0800
Subject: [Twisted-Python] Twisted windows hackers - help the tests to pass!
In-Reply-To: <20051231013544.1217.85617702.divmod.quotient.8979@ohm>
References: <20051231013544.1217.85617702.divmod.quotient.8979@ohm>
Message-ID: <43B60B92.4040205@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Well, let's start by looking at the buildslave environment itself.
http://tm.com/bb shows 21 errors.  Most of them appear to be identical
permission denied errors, which suggests a configuration problem
particular to that buildbot installation.

When I run the tests, I get:

===============================================================================
[ERROR]: twisted.test.test_paths.FilePathTestCase.testOpen

  File "C:\Documents and
Settings\cory\svn\Twisted\twisted\test\test_paths.py",
line 249, in testOpen
    f.write('ghi')
exceptions.IOError: (0, 'Error')
===============================================================================
[ERROR]: twisted.test.test_ssl.ConnectionLostTestCase.testFailedVerify

Failure: twisted.internet.error.ConnectionLost: Connection to the other
side was
 lost in a non-clean fashion.
-
-------------------------------------------------------------------------------
Ran 891 tests in 68.844s

FAILED (skips=77, expectedFailures=9, errors=2, successes=802)


- - C


glyph at divmod.com wrote:
> Twisted fails scads of tests on Windows.  You can see that here:
> http://twistedmatrix.com/buildbot/
> 
> I know that there are at least a few people on this list that use
> Twisted on Windows.  Doesn't it bother you that it's broken?  If you're
> a windows developer, help out and fix some tests!  A few Twisted
> hackers, Justin J. in particular, are hard at work to make it scale and
> perform well on Windows, but in addition to the rocket-science of IOCP
> there is quite a bit of grunt work to do, especially in the area of
> understanding why certain tests fail when they pass on other (more
> UNIX-y) platforms.
> 
> So please, try debugging some Twisted unit tests and either submitting
> bug reports explaining what's going on so an existing Twisted dev can
> fix them, or submitting patches that we can apply.
> 
> The real bonus for you if you're using Twisted on Windows in some
> commercial capacity is that once the buildbot turns green, test fascists
> like JP (or, on off days, myself) can revert changes which break it, and
> enforce a higher standard of quality for portability of Twisted code. 
> Right now it's hard to convince developers to not make it fail _more_
> tests, since hey, it's broken already, right?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDtguS3A5SrXAiHQcRAmDmAKClsweuv3R8x53G1TJHiUoEbiWsPwCgj2gJ
CTtw71uOF3472VLA/QW4Hzk=
=1tb2
-----END PGP SIGNATURE-----



From glyph at divmod.com  Sat Dec 31 00:01:18 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 31 Dec 2005 00:01:18 -0500
Subject: [Twisted-Python] Twisted windows hackers - help the tests to pass!
In-Reply-To: <43B60B92.4040205@twistedmatrix.com>
Message-ID: <20051231050118.1217.1213416050.divmod.quotient.9023@ohm>



On Fri, 30 Dec 2005 20:39:46 -0800, Cory Dodt <corydodt at twistedmatrix.com> wrote:

>Well, let's start by looking at the buildslave environment itself.
>http://tm.com/bb shows 21 errors.  Most of them appear to be identical
>permission denied errors, which suggests a configuration problem
>particular to that buildbot installation.

Well, that's good to know!  Thanks for clearing that up.  Any clue what the particular misconfiguration might be?  I have never even seen that particular buildbot machine.  (I can volunteer another one through VNC for the buildbot maintainer to test with if that would help.)

I think there is still a generally good reason to be concerned though - quite a few tests are still set to skip on Windows that aren't on UNIX. (and the aforementioned "it's broken anyway" attitude is especially bad if, in fact, it is *that* close to working)



From moof at metamoof.net  Sat Dec 31 02:15:33 2005
From: moof at metamoof.net (Moof)
Date: Sat, 31 Dec 2005 08:15:33 +0100
Subject: [Twisted-Python] Twisted windows hackers - help the tests to pass!
In-Reply-To: <20051231050118.1217.1213416050.divmod.quotient.9023@ohm>
References: <43B60B92.4040205@twistedmatrix.com>
	<20051231050118.1217.1213416050.divmod.quotient.9023@ohm>
Message-ID: <bff8eeef0512302315q50cc06b3y6af9e55a5fb975d0@mail.gmail.com>

On 12/31/05, glyph at divmod.com <glyph at divmod.com> wrote:
>
>
>
> On Fri, 30 Dec 2005 20:39:46 -0800, Cory Dodt <corydodt at twistedmatrix.com>
> wrote:
>
> >Well, let's start by looking at the buildslave environment itself.
> >http://tm.com/bb shows 21 errors.  Most of them appear to be identical
> >permission denied errors, which suggests a configuration problem
> >particular to that buildbot installation.
>
> Well, that's good to know!  Thanks for clearing that up.  Any clue what
> the particular misconfiguration might be?  I have never even seen that
> particular buildbot machine.  (I can volunteer another one through VNC for
> the buildbot maintainer to test with if that would help.)


It's not so much a misconfiguration, as an issue with the fact that trial on
Window s is failing to rename its _trial_temp folder, because there are
files inside it that are open. I've opened a bug on it over on <
http://twistedmatrix.com/bugs/issue1387>. It's going to need a rethink on
how _trial_temp works, because my instant thought on how to solve was
"symlinks" and python doesn't support them on windows, mostly because
windows' own support of them is a tad on the "dont' ask, don't tell" side of
things, and NTFS-only anyway.

MFen tracked down an error involving "r+b" mode. Seems windows handling of
it is insane. See <http://twistedmatrix.com/bugs/issue1386>. This could well
be a python bug, or a feature of windows.

Moof
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051231/4d951962/attachment.htm 

From jml at mumak.net  Sat Dec 31 05:16:26 2005
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 31 Dec 2005 20:16:26 +1000
Subject: [Twisted-Python] Depreciation of trial.unittest functions?
In-Reply-To: <43B45572.9020405@gmail.com>
References: <43B45572.9020405@gmail.com>
Message-ID: <d06a5cd30512310216o781c740j5c678c42cf854f68@mail.gmail.com>

On 12/30/05, Paul Swartz <paulswartz at gmail.com> wrote:
> I'm not sure if Conch is the only project that did this, but it used the
> trial.unittest.* functions instead of methods on TestCases.  I used them
> to avoid having to pass TestCase instances around all over the places,
> or using a global variable.  To avoid the depreciation warnings, I've
> starting using the unittest._inst global variable, but I doubt that this
> is the appropriate way to change my code.  Is this just not a supported
> way of using Trial, or is there something else I should be doing?
>

This is just not a supported way of using Trial.

jml



From paul-lists at perforge.com  Sat Dec 31 05:48:43 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 05:48:43 -0500
Subject: how winnt fileops work and what to do about it (was Re:
	[Twisted-Python] Twisted windows hackers - help the tests to pass!)
References: <43B60B92.4040205@twistedmatrix.com><20051231050118.1217.1213416050.divmod.quotient.9023@ohm>
	<bff8eeef0512302315q50cc06b3y6af9e55a5fb975d0@mail.gmail.com>
Message-ID: <0aff01c60df7$c588adf0$6402a8c0@dcore>


ok, i can actually chime in here because i've done filesystems work on 
windows (don't ask ;). now, it's been a while, but i should remember things 
reasonably accurately (i hope). see below for comments:

----- Original Message ----- 
From: Moof
To: twisted-python at twistedmatrix.com
Sent: Saturday, December 31, 2005 2:15 AM
Subject: Re: [Twisted-Python] Twisted windows hackers - help the tests to 
pass!


> It's not so much a misconfiguration, as an issue with the fact that trial 
> on Window s is failing to rename its _trial_temp folder,
> because there are files inside it that are open. I've opened a bug on it 
> over on < http://twistedmatrix.com/bugs/issue1387>.

it is incorrect to state that file deletion will always fail when the file 
is open. let me explain how nt/ntfs/win32 does this, because it's highly 
'strange' to folks from a posix background. this may be way more info than 
you were looking for, but i'm going to type it out anyway so that someone 
can then make the call on how to deal with the issue.

for functionality implemented in the kernel, such as ntfs, windows has 2 api 
layers: win32 (you see CreateFile() here) and the native nt api. win32 is 
implemented in usermode, while the native api is implemented as a kernel 
service, which is exposed to userspace code with the Zw prefix (ie 
ZwCreateFile()). sometimes the win32 api calls map directly, sometimes they 
are multiplexed (ie one win32 api call may use multiple native api calls to 
do the work). what happens here is undocumented (at least officially and 
without an nda). what is important is that some calls allow you to do things 
which win32 does not expose; most popular ones deal with io completion (this 
is how you cancel async i/o on windows nt).

now, on to the meat: the win32 CreateFile() is actually a jack-of-all-trades 
call (horrible design), used for file creation, opening *and authorization*. 
we're not interested in ACLs in this case, but we are interested in locks - 
locks in nt are compulsory (as opposed to purely advisory in posix) and 
violating one will result in an auth failure. now, disregarding the ability 
to take out range locks (locks on a byterange within a file), CreateFile() 
takes out certain locks based on the sharemode (iirc, not sure) parameter. 
the rules here are funky, iirc, but the one we care about is 
FILE_SHARE_DELETE. *unless* this flag is set in sharemode passed to 
CreateFile(), all attempts to open this file for deletion (see, 
authorization) going forward will fail.

it will fail when the file is opened exclusively. CreateFile takes a 
parameter called sharemode, iirc, which can be a combination of 
FILE_SHARE_READ, FILE_SHARE_WRITE, and FILE_SHARE_DELETE. *unless* 
FILE_SHARE_DELETE is set in the flag parameter, a lock preventing deletion 
gets taken out and you get to enjoy all the wonders of compulsory locking 
you are hitting.

here's why i think this happens: win32 DeleteFile() does *not* actually use 
ZwDeleteFile() native call to delete a file. instead, it does a CreateFile() 
(or ZwCreateFile(), could be either) to open the file (and get a handle to 
it), telling it the desired access is DELETE. then it does a 
ZwSetFileInformation(), which it tells it wants to set 'disposition' and 
passes in the appropriate disposition info struct with the DELETE 
disposition set. you can't cheat this, because ZwSetInformation() will fail 
if the handle doesn't have DELETE rights, and you won't get them if the file 
isn't opened with FILE_SHARE_DELETE. bummer. the reason this is all so 
roundabout is that the file whose disposition is set to DELETE doesn't 
actually get deleted until the last handle is ZwClose()'d - this is where 
the deletion takes place. now, this is from memory, so don't hold me to it 
exactly, but the jist of it should be correct.

the interesting, albeit non-obvious, question is: what does ZwDeleteFile() 
do? it takes either a handle *or a path* and deletes it *right away*, 
without waiting for handles to be closed. now, i don't know whether it 
bypasses the ZwCreateFile() and hence the DELETE check, but there's a chance 
that it is the call ZwClose() makes internally when it does a delete based 
on the disposition (this guess would be supported by the fact that 
ZwCreateFile() and a few other fs calls are documented in msdn/ddk, but 
ZwDeleteFile() is not) and hence doesn't hit this check. what is even more 
interesting is that, in win32, the only way to remove a directory is using 
RemoveDirectory(), which requires the directory to be empty. you have to 
recursively delete all contents, either by hand or using SHFileOperation, 
iirc. this is the op that hits your open files problem. i remember seeing 
code (this part i didn't work on, but did read brielfy) which deleted 
directories with ZwDeleteFile() and there was no resurive content deletion 
code, so i suspect that you could delete a non-empty directory this way. 
neither of this is valid ntfs usage, so doing it may not be kosher.

whatever the case may be, those two options are available if you can stomach 
them.

> It's
> going to need a rethink on how _trial_temp works, because my instant 
> thought on how to solve was "symlinks" and python
> doesn't support them on windows, mostly because windows' own support of 
> them is a tad on the "dont' ask, don't tell" side of
> things, and NTFS-only anyway.

NTFS and DFS, but yeah, no FAT (if anyone cares). symlinks in ntfs can be 
implemented using what's called 'reparse points'. these are actually quite 
powerful - you can attach either a static transformation or code (you need a 
driver for this, iirc) to a certain dentry  these symlinks are called 
'junctions', but they work only for directories. currently, all of this is 
extremely hairy to use. there are also hardlinks, which you can actually 
create with the win32 api, but they are only for files  moreover, none of 
this behaves like symlinks and hardlinks in terms of finer semantics (ie 
unlinking). junctions are most closely related to mount --bind, rather than 
symlinks, for example.


with all of the above said, you've basically got these choices (in no 
particular order) to deal with the issue at hand:

1. change the offending code not to do this rename
2. instead of a rename, create a new directory, do a recursive copy into it 
from the original and retry removing the original directory asynchronously 
until it succeeds. obviously, the file handles which are open at that point 
will be referencing a different copy of the files from the ones which will 
be opened subsequently.
3. test whether the zwDeleteFile() behaves in the way i conjrectured it to 
(wrt files or directories). if so, cause it to be implemented in the pywin32 
extension and use it to perform the delete.
4. test whether you can either use ZwSetFileInformation() to rename 
directories by changing the FILE_NAME attr in the appropriate info structure 
or use it to move by renaming files which are open, again using the 
appropriate (but different) structure.
if so, implement this or cause this to be implemented in pywin32. it is 
unclear (to me) whether this would result in the pre-move file handles being 
dead, stale or correct.
5. instead of opening the files as normal, open them with pywin32's 
implementation of CreateFile(), specifying the appropriate sharemode. this 
will allow the rename (move really) to go through, but it is unclear what 
happens to the preexisting filehandles.
6. implement, or cause to be implemented, CreateHardlink() in pywin32. 
create a new directory and recursively hardlink contents of the original 
into the new directory. asynchronously retry recursive deletion of the 
original one.

that's all i can think of anyway.

>MFen tracked down an error involving "r+b" mode. Seems windows handling of 
>it is insane. See ><http://twistedmatrix.com/bugs/issue1386>. This could 
>well be a python bug, or a feature of windows.

i'm not sure how python does file opens and i/o on windows. with that said, 
assuming that it uses fopen() from the visual studio c runtime library, 
there is a quirk in the implementation that might be causing this. if you 
use any of the + modes, ie a+, r+ or w+. when you switch between reading and 
writing you need to do an fflush() or fsetpos() (possibly some others like 
fseek() could work too, don't remember). try doing a file.flush() on your 
file object somewhere in there and see if that fixes things for you. if it 
does, this should probably be reported as a python stdlib bug.

it's really late, so pardon the wordiness and possible inaccuracies due to 
memory lapses.

hth,
-p 




From umit at liqia.com  Sat Dec 31 06:37:44 2005
From: umit at liqia.com (Umit Oztosun)
Date: Sat, 31 Dec 2005 13:37:44 +0200
Subject: [Twisted-Python] Qtreactor problem on twisted 2.1
In-Reply-To: <600A6501-4966-484E-B024-C26CEBA7B5A7@fuhm.net>
References: <d95439ec0512300647j29e8b78cv5f2649a16d37e87f@mail.gmail.com>
	<d95439ec0512300726k528c9016mf0a2728c8ee48be1@mail.gmail.com>
	<600A6501-4966-484E-B024-C26CEBA7B5A7@fuhm.net>
Message-ID: <d95439ec0512310337s214c0e84x2b0f438b360beeed@mail.gmail.com>

Hi,

On 12/30/05, James Y Knight <foom at fuhm.net> wrote:
> For some reason, the stack trace looks truncated, since it starts
> with defer.py:addCallbacks. But my guess is that read is getting
> called re-entrantly. By calling exec_loop within a callback, you're
> causing the reactor to loop within another reactor loop, and the
> reactor isn't designed to ensure it's safe to do that. Is it possible
> to change the code to show a dialog box without running a sub-loop?

Well, our dialog is a custom widget derived from QDialog. Displaying
the dialog without exec_loop is not a problem, but in order to receive
and process GUI events, one should somehow call qApp.processEvents()
or a similar call. Otherwise GUI basically locks up. I constructed a
dummy loop periodically calling qApp.processEvents() in order to
simulate the exec_loop behaviour. However, the problem still persists.
After a few seconds after the dialog is displayed, the "Non-list
expression received" exception is fired.

I even tried "qApp.eventLoop().processEvents(QEventLoop.ExcludeSocketNotifiers)"
in order to only process user input events, but this again didn't
work.

This does not always happen, but happens quite occasionally. To
emphasize again, problem does not exist when using twisted 1.3. I also
tried to connect a twisted 2.1 server with a twisted 1.3 client, and
it was still OK.

Regards,
Umit Oztosun



From foom at fuhm.net  Sat Dec 31 11:59:39 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 31 Dec 2005 11:59:39 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15451 - Fix test failures
	under windows by changing the eventual-send operation to
In-Reply-To: <E1EsaOd-0005YM-00@wolfwood>
References: <E1EsaOd-0005YM-00@wolfwood>
Message-ID: <89CC1D6D-85D4-4998-94F1-E25384FC2B5A@fuhm.net>

On Dec 31, 2005, at 1:39 AM, Brian Warner wrote:
> callLater(0) does not guarantee
> relative ordering of sequentially-scheduled calls,

Yes it does: order of method call.

> and the windows
> reactors in fact execute them in random order.

That is broken.

James



From foom at fuhm.net  Sat Dec 31 12:42:07 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 31 Dec 2005 12:42:07 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15451 - Fix test failures
	under windows by changing the eventual-send operation to
In-Reply-To: <89CC1D6D-85D4-4998-94F1-E25384FC2B5A@fuhm.net>
References: <E1EsaOd-0005YM-00@wolfwood>
	<89CC1D6D-85D4-4998-94F1-E25384FC2B5A@fuhm.net>
Message-ID: <5F60A50B-53F9-4AC2-AECA-681882929FB3@fuhm.net>


On Dec 31, 2005, at 11:59 AM, James Y Knight wrote:

> On Dec 31, 2005, at 1:39 AM, Brian Warner wrote:
>
>> callLater(0) does not guarantee
>> relative ordering of sequentially-scheduled calls,
>>
>
> Yes it does: order of method call.
>
>
>> and the windows
>> reactors in fact execute them in random order.
>>
>
> That is broken.

I'm afraid this is my fault. Heapq does not guarantee stable ordering  
amongst elements with the same key, and on windows, two successive  
calls to time.time() are very likely to return the same number,  
because of its poor resolution. The same error could probably occur  
on unix/linux systems as well, although currently unlikely to the  
point of impossibility. It should be fixable by storing the last time  
of an element added to the queue, and adding epsilon if current time  
is the same.

Just as a point of interest, on my system, this loop never finishes:
import time
def f():
  while 1:
   if time.time()==time.time():
    break

But this one does:
from time import time
def f():
  while 1:
   if time()==time():
    break


James



From corydodt at twistedmatrix.com  Sat Dec 31 13:46:51 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Sat, 31 Dec 2005 10:46:51 -0800
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and
 what to do about it
In-Reply-To: <0aff01c60df7$c588adf0$6402a8c0@dcore>
References: <43B60B92.4040205@twistedmatrix.com><20051231050118.1217.1213416050.divmod.quotient.9023@ohm>	<bff8eeef0512302315q50cc06b3y6af9e55a5fb975d0@mail.gmail.com>
	<0aff01c60df7$c588adf0$6402a8c0@dcore>
Message-ID: <43B6D21B.1050508@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Paul, flush fixes one kind of insanity and seek fixes another:

One ===========
$ echo abcdef > foo
$ python
>>> f = file('foo', 'r+b')
>>> f.write('ghi')
>>> f.flush()
>>> f.read()
'def\n'
>>> # hooray!


Two ===========
$ echo abcdef > foo
$ python
>>> f = file('foo','r+b')
>>> f.read()
'abcdef\n'
>>> f.seek(7, 0)
>>> f.write('xyz')
>>> ^D
$ cat foo
abcdef
xyz
$ # hooray

Paul - Do you still think this is a Python bug?  Does anyone know if
this has already been discussed on pyml?

C



Paul G wrote:
> 
> ok, i can actually chime in here because i've done filesystems work on
> windows (don't ask ;). now, it's been a while, but i should remember
> things reasonably accurately (i hope). see below for comments:
> 
> ----- Original Message ----- From: Moof
> To: twisted-python at twistedmatrix.com
> Sent: Saturday, December 31, 2005 2:15 AM
> Subject: Re: [Twisted-Python] Twisted windows hackers - help the tests
> to pass!
> 
> 
>> It's not so much a misconfiguration, as an issue with the fact that
>> trial on Window s is failing to rename its _trial_temp folder,
>> because there are files inside it that are open. I've opened a bug on
>> it over on < http://twistedmatrix.com/bugs/issue1387>.
> 
> 
> it is incorrect to state that file deletion will always fail when the
> file is open. let me explain how nt/ntfs/win32 does this, because it's
> highly 'strange' to folks from a posix background. this may be way more
> info than you were looking for, but i'm going to type it out anyway so
> that someone can then make the call on how to deal with the issue.
> 
> for functionality implemented in the kernel, such as ntfs, windows has 2
> api layers: win32 (you see CreateFile() here) and the native nt api.
> win32 is implemented in usermode, while the native api is implemented as
> a kernel service, which is exposed to userspace code with the Zw prefix
> (ie ZwCreateFile()). sometimes the win32 api calls map directly,
> sometimes they are multiplexed (ie one win32 api call may use multiple
> native api calls to do the work). what happens here is undocumented (at
> least officially and without an nda). what is important is that some
> calls allow you to do things which win32 does not expose; most popular
> ones deal with io completion (this is how you cancel async i/o on
> windows nt).
> 
> now, on to the meat: the win32 CreateFile() is actually a
> jack-of-all-trades call (horrible design), used for file creation,
> opening *and authorization*. we're not interested in ACLs in this case,
> but we are interested in locks - locks in nt are compulsory (as opposed
> to purely advisory in posix) and violating one will result in an auth
> failure. now, disregarding the ability to take out range locks (locks on
> a byterange within a file), CreateFile() takes out certain locks based
> on the sharemode (iirc, not sure) parameter. the rules here are funky,
> iirc, but the one we care about is FILE_SHARE_DELETE. *unless* this flag
> is set in sharemode passed to CreateFile(), all attempts to open this
> file for deletion (see, authorization) going forward will fail.
> 
> it will fail when the file is opened exclusively. CreateFile takes a
> parameter called sharemode, iirc, which can be a combination of
> FILE_SHARE_READ, FILE_SHARE_WRITE, and FILE_SHARE_DELETE. *unless*
> FILE_SHARE_DELETE is set in the flag parameter, a lock preventing
> deletion gets taken out and you get to enjoy all the wonders of
> compulsory locking you are hitting.
> 
> here's why i think this happens: win32 DeleteFile() does *not* actually
> use ZwDeleteFile() native call to delete a file. instead, it does a
> CreateFile() (or ZwCreateFile(), could be either) to open the file (and
> get a handle to it), telling it the desired access is DELETE. then it
> does a ZwSetFileInformation(), which it tells it wants to set
> 'disposition' and passes in the appropriate disposition info struct with
> the DELETE disposition set. you can't cheat this, because
> ZwSetInformation() will fail if the handle doesn't have DELETE rights,
> and you won't get them if the file isn't opened with FILE_SHARE_DELETE.
> bummer. the reason this is all so roundabout is that the file whose
> disposition is set to DELETE doesn't actually get deleted until the last
> handle is ZwClose()'d - this is where the deletion takes place. now,
> this is from memory, so don't hold me to it exactly, but the jist of it
> should be correct.
> 
> the interesting, albeit non-obvious, question is: what does
> ZwDeleteFile() do? it takes either a handle *or a path* and deletes it
> *right away*, without waiting for handles to be closed. now, i don't
> know whether it bypasses the ZwCreateFile() and hence the DELETE check,
> but there's a chance that it is the call ZwClose() makes internally when
> it does a delete based on the disposition (this guess would be supported
> by the fact that ZwCreateFile() and a few other fs calls are documented
> in msdn/ddk, but ZwDeleteFile() is not) and hence doesn't hit this
> check. what is even more interesting is that, in win32, the only way to
> remove a directory is using RemoveDirectory(), which requires the
> directory to be empty. you have to recursively delete all contents,
> either by hand or using SHFileOperation, iirc. this is the op that hits
> your open files problem. i remember seeing code (this part i didn't work
> on, but did read brielfy) which deleted directories with ZwDeleteFile()
> and there was no resurive content deletion code, so i suspect that you
> could delete a non-empty directory this way. neither of this is valid
> ntfs usage, so doing it may not be kosher.
> 
> whatever the case may be, those two options are available if you can
> stomach them.
> 
>> It's
>> going to need a rethink on how _trial_temp works, because my instant
>> thought on how to solve was "symlinks" and python
>> doesn't support them on windows, mostly because windows' own support
>> of them is a tad on the "dont' ask, don't tell" side of
>> things, and NTFS-only anyway.
> 
> 
> NTFS and DFS, but yeah, no FAT (if anyone cares). symlinks in ntfs can
> be implemented using what's called 'reparse points'. these are actually
> quite powerful - you can attach either a static transformation or code
> (you need a driver for this, iirc) to a certain dentry  these symlinks
> are called 'junctions', but they work only for directories. currently,
> all of this is extremely hairy to use. there are also hardlinks, which
> you can actually create with the win32 api, but they are only for files 
> moreover, none of this behaves like symlinks and hardlinks in terms of
> finer semantics (ie unlinking). junctions are most closely related to
> mount --bind, rather than symlinks, for example.
> 
> 
> with all of the above said, you've basically got these choices (in no
> particular order) to deal with the issue at hand:
> 
> 1. change the offending code not to do this rename
> 2. instead of a rename, create a new directory, do a recursive copy into
> it from the original and retry removing the original directory
> asynchronously until it succeeds. obviously, the file handles which are
> open at that point will be referencing a different copy of the files
> from the ones which will be opened subsequently.
> 3. test whether the zwDeleteFile() behaves in the way i conjrectured it
> to (wrt files or directories). if so, cause it to be implemented in the
> pywin32 extension and use it to perform the delete.
> 4. test whether you can either use ZwSetFileInformation() to rename
> directories by changing the FILE_NAME attr in the appropriate info
> structure or use it to move by renaming files which are open, again
> using the appropriate (but different) structure.
> if so, implement this or cause this to be implemented in pywin32. it is
> unclear (to me) whether this would result in the pre-move file handles
> being dead, stale or correct.
> 5. instead of opening the files as normal, open them with pywin32's
> implementation of CreateFile(), specifying the appropriate sharemode.
> this will allow the rename (move really) to go through, but it is
> unclear what happens to the preexisting filehandles.
> 6. implement, or cause to be implemented, CreateHardlink() in pywin32.
> create a new directory and recursively hardlink contents of the original
> into the new directory. asynchronously retry recursive deletion of the
> original one.
> 
> that's all i can think of anyway.
> 
>> MFen tracked down an error involving "r+b" mode. Seems windows
>> handling of it is insane. See
>> ><http://twistedmatrix.com/bugs/issue1386>. This could well be a
>> python bug, or a feature of windows.
> 
> 
> i'm not sure how python does file opens and i/o on windows. with that
> said, assuming that it uses fopen() from the visual studio c runtime
> library, there is a quirk in the implementation that might be causing
> this. if you use any of the + modes, ie a+, r+ or w+. when you switch
> between reading and writing you need to do an fflush() or fsetpos()
> (possibly some others like fseek() could work too, don't remember). try
> doing a file.flush() on your file object somewhere in there and see if
> that fixes things for you. if it does, this should probably be reported
> as a python stdlib bug.
> 
> it's really late, so pardon the wordiness and possible inaccuracies due
> to memory lapses.
> 
> hth,
> -p
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDttEp3A5SrXAiHQcRAq4gAJ4pZQS+vFSlKqS8RvJe8ialmzANEgCfe4BL
G4OrBEocHxEcB3LD3tpr1OY=
=XA5K
-----END PGP SIGNATURE-----



From warner at lothar.com  Sat Dec 31 13:57:21 2005
From: warner at lothar.com (Brian Warner)
Date: Sat, 31 Dec 2005 10:57:21 -0800 (PST)
Subject: [Twisted-Python] Re: r15451 - Fix test failures under windows by
 changing the eventual-send operation to
Message-ID: <20051231.105721.17570930.warner@lothar.com>

>> Yes it does: order of method call.

Ah. That's useful to know: I would prefer to use a non-threading-related call
to achieve this eventual-send functionality. I'll add a TODO test to check
that this promise is being met.


> It should be fixable by storing the last time of an element added to the
> queue, and adding epsilon if current time is the same.

Wouldn't you have to guarantee that epsilon is smaller than the resolution of
your time.time() return value? What if you sorted on a tuple of (time,
counter) instead? (the down side is that you'd have to search for all
existing timers with the same time value to figure out what counter value you
ought to use. ick.).

We should clarify what guarantees are made by callLater. I think there may be
several separate ones here:

 1: callLater(0, A); callLater(0, B)
     will result in A being invoked before B
     will result in both A and B being invoked before any other DelayedCalls

 2: callLater(N, A); callLater(N, B)
     will result in A being invoked before B

 3: callLater(N, A); callLater(N+M, C); callLater(N, B)
     will result in A being invoked before B
     (think of this as a unit test for the adding-epsilon concern above)

The second and third ones are not so important to me, just in terms of what I
need to use it as a plan-coordination tool. I only intend to use this with
N=0.

To that end, using a separate queue for timers that are ready to go "now"
(i.e. ones that will be fired before calling select() or the like) might be
useful, basically making N=0 a special case. This would avoid the overhead of
inserting the DelayedCall into an arbitrary place and maintaining the
ordering guarantees of #2 and #3, and would avoid an extra select() spin
between the time an N=0 timer was inserted and the time it was fired.

The existing threadCallQueue happens to behave exactly this way, although I'd
want to write some additional tests to make sure it gets serviced as many
times as it's supposed to be (specifically, when threads are unavailable and
therefore wakeUp() is not used, does a call inserted from within an N=0
callback get serviced before the reactor sleeps again?). The problem is both
the word "thread" in the name, and the fact that we might not be making the
same guarantees about the behavior of callFromThread as we are about that of
callLater.

Hmm. Most reactors split off a list of timers that are ready to go "now" on
each spin, right? And/or there's that _pendingTimedCalls list I see in
t.i.base .. maybe we could take advantage of one of those, just appending the
call to those lists and making sure they'll be serviced again, rather than
adding the overhead of maintaining ordering guarantees #2 and #3.

hmm-ingly,
 -Brian



From michaelschneider at fuse.net  Sat Dec 31 14:23:55 2005
From: michaelschneider at fuse.net (Michael Schneider)
Date: Sat, 31 Dec 2005 14:23:55 -0500
Subject: [Twisted-Python] Re: Twisted-Python Digest, Vol 21, Issue 39
In-Reply-To: <E1Esl1P-0002bb-01@pyramid.twistedmatrix.com>
References: <E1Esl1P-0002bb-01@pyramid.twistedmatrix.com>
Message-ID: <43B6DACB.4000507@fuse.net>

On Windows, you might use time.clock() it is more precise (keep with 
time.time on UNIX

Hope this helps,
Mike

>
>
>Message: 2
>Date: Sat, 31 Dec 2005 12:42:07 -0500
>From: James Y Knight <foom at fuhm.net>
>Subject: Re: [Twisted-Python] Re: [Twisted-commits] r15451 - Fix test
>	failures	under windows by changing the eventual-send operation to
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Message-ID: <5F60A50B-53F9-4AC2-AECA-681882929FB3 at fuhm.net>
>Content-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed
>
>
>On Dec 31, 2005, at 11:59 AM, James Y Knight wrote:
>
>  
>
>>On Dec 31, 2005, at 1:39 AM, Brian Warner wrote:
>>
>>    
>>
>>>callLater(0) does not guarantee
>>>relative ordering of sequentially-scheduled calls,
>>>
>>>      
>>>
>>Yes it does: order of method call.
>>
>>
>>    
>>
>>>and the windows
>>>reactors in fact execute them in random order.
>>>
>>>      
>>>
>>That is broken.
>>    
>>
>
>I'm afraid this is my fault. Heapq does not guarantee stable ordering  
>amongst elements with the same key, and on windows, two successive  
>calls to time.time() are very likely to return the same number,  
>because of its poor resolution. The same error could probably occur  
>on unix/linux systems as well, although currently unlikely to the  
>point of impossibility. It should be fixable by storing the last time  
>of an element added to the queue, and adding epsilon if current time  
>is the same.
>
>Just as a point of interest, on my system, this loop never finishes:
>import time
>def f():
>  while 1:
>   if time.time()==time.time():
>    break
>
>But this one does:
>from time import time
>def f():
>  while 1:
>   if time()==time():
>    break
>
>
>James
>
>
>
>------------------------------
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>End of Twisted-Python Digest, Vol 21, Issue 39
>**********************************************
>
>  
>


-- 
The greatest performance improvement occurs on the transition of from the non-working state to the working state.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051231/e774a614/attachment.htm 

From exarkun at divmod.com  Sat Dec 31 14:52:59 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 31 Dec 2005 14:52:59 -0500
Subject: [Twisted-Python] Re: Twisted-Python Digest, Vol 21, Issue 39
In-Reply-To: <43B6DACB.4000507@fuse.net>
Message-ID: <20051231195259.1217.780865545.divmod.quotient.9206@ohm>

On Sat, 31 Dec 2005 14:23:55 -0500, Michael Schneider <michaelschneider at fuse.net> wrote:
>On Windows, you might use time.clock() it is more precise (keep with 
>time.time on UNIX

Unfortunately, it wraps around after ~40 days, making it unsuitable for use tracking long periods of time.  It is probably possible to build a usable timer on top of this using a wrap-around counter, but afaik no one has yet attempted this.

Jean-Paul



From paul-lists at perforge.com  Sat Dec 31 15:21:45 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 15:21:45 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and
	what to do about it
References: <43B60B92.4040205@twistedmatrix.com><20051231050118.1217.1213416050.divmod.quotient.9023@ohm>	<bff8eeef0512302315q50cc06b3y6af9e55a5fb975d0@mail.gmail.com><0aff01c60df7$c588adf0$6402a8c0@dcore>
	<43B6D21B.1050508@twistedmatrix.com>
Message-ID: <0b6201c60e48$704c7190$6402a8c0@dcore>


----- Original Message ----- 
From: "Cory Dodt" <corydodt at twistedmatrix.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 1:46 PM
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and 
what to do about it


> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Paul, flush fixes one kind of insanity and seek fixes another:
>
> One ===========
> $ echo abcdef > foo
> $ python
>>>> f = file('foo', 'r+b')
>>>> f.write('ghi')
>>>> f.flush()
>>>> f.read()
> 'def\n'
>>>> # hooray!
>
>
> Two ===========
> $ echo abcdef > foo
> $ python
>>>> f = file('foo','r+b')
>>>> f.read()
> 'abcdef\n'
>>>> f.seek(7, 0)
>>>> f.write('xyz')
>>>> ^D
> $ cat foo
> abcdef
> xyz
> $ # hooray
>
> Paul - Do you still think this is a Python bug?

depends on what you call a bug. this behaviour is, afaik, specific to 
microsoft libc's (aka c runtime)  implementation of file streams. since 
their implementation exhibits arcanely and somewhat subtly (subtle in terms 
of cause, as opposed to effect - the effect is quite apparent) divergent 
behaviour, it definitely violates the users' expectations, so it is a bug in 
that sense. with that said, they never claimed to be $standard compliant and 
they do document this, iirc, so it is not quite a bug in that sense. in 
practical terms, their implementation is not likely to 'get fixed', so the 
failure to deal with this quirk is a python bug. there are two options for 
python:

1. say that python expects users to be aware of quirks on specific platforms 
and the responsibility of dealing with them lies with the user. in this 
case, this quirk needs to be mentioned in the python docs, since it is not 
reasonable to expect people to figure out that they need to look at msdn c 
runtime api docs.

2. say that across all platforms python supports given functionality on, 
said functionality needs to have functionally identical results given 
identical input. in this case, the flush+seek workaround needs to be 
utilized on all cpythons linked with msvscrt in a manner transparent to the 
user.

make sense?

-p 




From paul-lists at perforge.com  Sat Dec 31 15:38:48 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 15:38:48 -0500
Subject: [Twisted-Python] Re: r15451 - Fix test failures under windows by
	changing the eventual-send operation to
References: <20051231.105721.17570930.warner@lothar.com>
Message-ID: <0b6701c60e4a$35c01f70$6402a8c0@dcore>


----- Original Message ----- 
From: "Brian Warner" <warner at lothar.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 1:57 PM
Subject: [Twisted-Python] Re: r15451 - Fix test failures under windows by 
changing the eventual-send operation to


> To that end, using a separate queue for timers that are ready to go "now"
> (i.e. ones that will be fired before calling select() or the like) might 
> be
> useful, basically making N=0 a special case. This would avoid the overhead 
> of
> inserting the DelayedCall into an arbitrary place and maintaining the
> ordering guarantees of #2 and #3, and would avoid an extra select() spin
> between the time an N=0 timer was inserted and the time it was fired.

specialcasing this is ugly, imo, not that i get any votes ;) you need to 
decide:

1. what cost you want insert, traversal and possibly async sorting/ordering 
passes to carry
2. what guarantees you want to provide, in the general case

eg, it would be reasonable to say 'we want to be O(1) on traversal' (at 
least O(1) in terms of getting a list of events that fire now) and we want 
to guarantee ordering  in this case, you can decide to take the full 
ordering/sorting hit on inserts. if you think a little harder, this can be 
made fairly efficient with a sparse circular list of event buckets, with 
each bucket being a fifo queue of events to be fired at that time. whether 
it's worth bothering with the additional complexity is up for discussion.

i'm sleep deprived, so apologies in advance if this made no sense at all.

-p 




From paul-lists at perforge.com  Sat Dec 31 16:02:31 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 16:02:31 -0500
Subject: [Twisted-Python] Re: Twisted-Python Digest, Vol 21, Issue 39
References: <20051231195259.1217.780865545.divmod.quotient.9206@ohm>
Message-ID: <0b8401c60e4d$840d69a0$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 2:52 PM
Subject: Re: [Twisted-Python] Re: Twisted-Python Digest, Vol 21, Issue 39


> On Sat, 31 Dec 2005 14:23:55 -0500, Michael Schneider 
> <michaelschneider at fuse.net> wrote:
>>On Windows, you might use time.clock() it is more precise (keep with 
>>time.time on UNIX
>
> Unfortunately, it wraps around after ~40 days, making it unsuitable for 
> use tracking long periods of time.  It is probably possible > to build a 
> usable timer on top of this using a wrap-around counter, but afaik no one 
> has yet attempted this.

it's actually slightly less than 50 days. time.clock() is not usable on 
windows, i think, without being able to determine its frequency (you need to 
be able to do QueryPerformanceFrequency() iirc). there's a right way to do 
this (although the api may not be available from python/pywin32), i just 
can't remember (i'm not very clueful when it comes to windows and whatever 
experience i had was a long time ago). i'll sleep on it and see if i can 
remember it in the morning.

-p 




From glyph at divmod.com  Sat Dec 31 16:19:52 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 31 Dec 2005 16:19:52 -0500
Subject: [Twisted-Python] Re: r15451 - Fix test failures under windows by
	changing the eventual-send operation to
In-Reply-To: <20051231.105721.17570930.warner@lothar.com>
Message-ID: <20051231211952.1217.1378987386.divmod.quotient.9225@ohm>



On Sat, 31 Dec 2005 10:57:21 -0800 (PST), Brian Warner <warner at lothar.com> wrote:
>>> Yes it does: order of method call.

Hmm.  Does it?  The interface documentation is pretty light on guarantees, and that's on purpose: what happens if the user does callLater(0), then sets the system clock back, then does callLater(0) again?

>Ah. That's useful to know: I would prefer to use a non-threading-related call
>to achieve this eventual-send functionality. I'll add a TODO test to check
>that this promise is being met.

I think that your eventual-send queue should probably be its own event-queuing API.  If you have:

  callLater(0, foo); callLater(0, bar)

and you expect ordering between them, something like this is better:

  callLater(0, lambda : foo(); bar())
or perhaps
  myRunQueue.put(foo); myRunQueue.put(bar); callLater(0, myRunQueue.activate)

You get the idea.

That's not to say that stabilizing ordering in the win32 reactor is necessarily bad; but I think we should be careful with specifying overly strict behaviors with respect to the exact ordering that the reactor applies to different invocations of events, whether they're time or network or whatever.  There should be some wiggle-room so that faster/fairer approaches can be tried.



From glyph at divmod.com  Sat Dec 31 16:33:46 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 31 Dec 2005 16:33:46 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work
	and what to do about it
In-Reply-To: <0b6201c60e48$704c7190$6402a8c0@dcore>
Message-ID: <20051231213346.1217.292143908.divmod.quotient.9228@ohm>



On Sat, 31 Dec 2005 15:21:45 -0500, Paul G <paul-lists at perforge.com> wrote:

>2. say that across all platforms python supports given functionality on, 
>said functionality needs to have functionally identical results given 
>identical input. in this case, the flush+seek workaround needs to be 
>utilized on all cpythons linked with msvscrt in a manner transparent to the 
>user.

It seems like we can work around this more easily than that, considering that flush and seek are available from Twisted; the file object causing problems in the tests is being returned from the open() method of a FilePath object, if I understand it correctly.  FilePath could include the workaround far in advance of Python deciding to.



From exarkun at divmod.com  Sat Dec 31 16:41:22 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 31 Dec 2005 16:41:22 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work
	and what to do about it
In-Reply-To: <20051231213346.1217.292143908.divmod.quotient.9228@ohm>
Message-ID: <20051231214122.1217.1115795734.divmod.quotient.9231@ohm>

On Sat, 31 Dec 2005 16:33:46 -0500, glyph at divmod.com wrote:
>
>
>On Sat, 31 Dec 2005 15:21:45 -0500, Paul G <paul-lists at perforge.com> wrote:
>>2. say that across all platforms python supports given functionality on, 
>>said functionality needs to have functionally identical results given 
>>identical input. in this case, the flush+seek workaround needs to be 
>>utilized on all cpythons linked with msvscrt in a manner transparent to the 
>>user.
>
>It seems like we can work around this more easily than that, considering 
>that flush and seek are available from Twisted; the file object causing 
>problems in the tests is being returned from the open() method of a FilePath 
>object, if I understand it correctly.  FilePath could include the workaround 
>far in advance of Python deciding to.
>

Quite so.  I definitely think this is a bug in Python though.  Someone should open a ticket in the Python bug tracker.  Cory?

Jean-Paul




From exarkun at divmod.com  Sat Dec 31 16:52:30 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 31 Dec 2005 16:52:30 -0500
Subject: how winnt fileops work and what to do about it (was Re:
	[Twisted-Python] Twisted windows hackers - help the tests to pass!)
In-Reply-To: <0aff01c60df7$c588adf0$6402a8c0@dcore>
Message-ID: <20051231215230.1217.821296097.divmod.quotient.9234@ohm>

On Sat, 31 Dec 2005 05:48:43 -0500, Paul G <paul-lists at perforge.com> wrote:
>
>ok, i can actually chime in here because i've done filesystems work on 
>windows (don't ask ;). now, it's been a while, but i should remember things 
>reasonably accurately (i hope). see below for comments:

Thanks, Paul, for these comments.  This cleared up a lot about how the filesystem works on Win32 for me.

> [snip]
>
>1. change the offending code not to do this rename
>2. instead of a rename, create a new directory, do a recursive copy into it 
>from the original and retry removing the original directory asynchronously 
>until it succeeds. obviously, the file handles which are open at that point 
>will be referencing a different copy of the files from the ones which will 
>be opened subsequently.
>3. test whether the zwDeleteFile() behaves in the way i conjrectured it to 
>(wrt files or directories). if so, cause it to be implemented in the pywin32 
>extension and use it to perform the delete.
>4. test whether you can either use ZwSetFileInformation() to rename 
>directories by changing the FILE_NAME attr in the appropriate info structure 
>or use it to move by renaming files which are open, again using the 
>appropriate (but different) structure.
>if so, implement this or cause this to be implemented in pywin32. it is 
>unclear (to me) whether this would result in the pre-move file handles being 
>dead, stale or correct.
>5. instead of opening the files as normal, open them with pywin32's 
>implementation of CreateFile(), specifying the appropriate sharemode. this 
>will allow the rename (move really) to go through, but it is unclear what 
>happens to the preexisting filehandles.
>6. implement, or cause to be implemented, CreateHardlink() in pywin32. 
>create a new directory and recursively hardlink contents of the original 
>into the new directory. asynchronously retry recursive deletion of the 
>original one.

To these, I would insert a few questions to be answered first:

0. Are the test_output and test_runner tests attempting to move the top-level _trial_temp, or an identically named directory somewhere inside it?

1. Why are the tests trying to move the _trial_temp directory aside at all?

2. If there is a legitimate reason for #1, what files remain open in _trial_temp which are preventing the move from succeeding?

Jean-Paul



From paul-lists at perforge.com  Sat Dec 31 16:57:10 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 16:57:10 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops workand
	what to do about it
References: <20051231213346.1217.292143908.divmod.quotient.9228@ohm>
Message-ID: <0b9801c60e55$26ead110$6402a8c0@dcore>


----- Original Message ----- 
From: <glyph at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 4:33 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
workand what to do about it


>
>
> On Sat, 31 Dec 2005 15:21:45 -0500, Paul G <paul-lists at perforge.com> 
> wrote:
>
>>2. say that across all platforms python supports given functionality on, 
>>said functionality needs to have functionally identical results given 
>>identical input. in this case, the flush+seek workaround needs to be 
>>utilized on all cpythons linked with msvscrt in a manner transparent to 
>>the user.
>
> It seems like we can work around this more easily than that, considering 
> that flush and seek are available from Twisted; the file object causing 
> problems in the tests is being returned from the open() method of a 
> FilePath object, if I understand it correctly.  FilePath could include the 
> workaround far in advance of Python deciding to.

oh, it makes perfect sense to have a workaround in twisted, i'm not 
suggesting otherwise. however, it should be just that - a temporary 
workaround until cpython has a fix for the issue, because (outside of the 
offending libc implementation), that is the right place to fix it.

-p




From paul-lists at perforge.com  Sat Dec 31 16:58:34 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 16:58:34 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops workand
	what to do about it
References: <20051231214122.1217.1115795734.divmod.quotient.9231@ohm>
Message-ID: <0b9d01c60e55$58875130$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 4:41 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
workand what to do about it


> On Sat, 31 Dec 2005 16:33:46 -0500, glyph at divmod.com wrote:
>>
>>
>>On Sat, 31 Dec 2005 15:21:45 -0500, Paul G <paul-lists at perforge.com> 
>>wrote:
>>>2. say that across all platforms python supports given functionality on, 
>>>said functionality needs to have functionally identical results given 
>>>identical input. in this case, the flush+seek workaround needs to be 
>>>utilized on all cpythons linked with msvscrt in a manner transparent to 
>>>the user.
>>
>>It seems like we can work around this more easily than that, considering 
>>that flush and seek are available from Twisted; the file object causing 
>>problems in the tests is being returned from the open() method of a 
>>FilePath object, if I understand it correctly.  FilePath could include the 
>>workaround far in advance of Python deciding to.
>>
>
> Quite so.  I definitely think this is a bug in Python though.  Someone 
> should open a ticket in the Python bug tracker.  Cory?

cory,

i'll be happy to see if i can dig up an msdn entry documenting this so you 
can include it in the bug report. ping me if you need me to do it.

-p 




From warner at lothar.com  Sat Dec 31 17:04:27 2005
From: warner at lothar.com (Brian Warner)
Date: Sat, 31 Dec 2005 14:04:27 -0800 (PST)
Subject: [Twisted-Python] Re: r15451 - Fix test failures under windows
	by changing the eventual-send operation to
Message-ID: <20051231.140427.07612418.warner@lothar.com>

> I think that your eventual-send queue should probably be its own
> event-queuing API. If you have:
>
>  callLater(0, foo); callLater(0, bar)
>
> and you expect ordering between them, something like this is better:
>
>  callLater(0, lambda : foo(); bar())
> or perhaps
>  myRunQueue.put(foo); myRunQueue.put(bar); callLater(0, myRunQueue.activate)
>
> You get the idea.

The issue here is with multiple eventual-sends being called from other code.
Specifically, the context was an ITransport-providing Loopback class, used in
newpb unit tests, which needs to decouple transport.write() from the
resulting proto.dataReceived(). The write() calls are being made from all
over the place, with no good location to coordinate or batch them together.
Technically I could rig it so that transport.write() queues the data and then
oblige the writing Protocol to invoke transport.flush() (newpb has a place
for this to go, to support more datagram-oriented transports someday), but
then who's to say that whatever code invokes *that* won't want to run
multiple times in a brief period of time?

I heartily agree that callLater() is not the appropriate tool for this
purpose. A week ago I thought it might be, but at that point I didn't realize
that I need the ordering guarantee described above. The implementation of
callFromThread() happens to match both my needs and my expectations about
efficiency, but of course it isn't documented to provide either, plus this
eventual-send functionality should be completely unrelated to threads.

 -Brian



From paul-lists at perforge.com  Sat Dec 31 17:12:55 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 17:12:55 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops
	workandwhat to do about it
References: <20051231213346.1217.292143908.divmod.quotient.9228@ohm>
	<0b9801c60e55$26ead110$6402a8c0@dcore>
Message-ID: <0ba401c60e57$59d3bc70$6402a8c0@dcore>


----- Original Message ----- 
From: "Paul G" <paul-lists at perforge.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 4:57 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
workandwhat to do about it


>
> ----- Original Message ----- 
> From: <glyph at divmod.com>
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Sent: Saturday, December 31, 2005 4:33 PM
> Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
> workand what to do about it
>
>
>>
>>
>> On Sat, 31 Dec 2005 15:21:45 -0500, Paul G <paul-lists at perforge.com> 
>> wrote:
>>
>>>2. say that across all platforms python supports given functionality on, 
>>>said functionality needs to have functionally identical results given 
>>>identical input. in this case, the flush+seek workaround needs to be 
>>>utilized on all cpythons linked with msvscrt in a manner transparent to 
>>>the user.
>>
>> It seems like we can work around this more easily than that, considering 
>> that flush and seek are available from Twisted; the file object causing 
>> problems in the tests is being returned from the open() method of a 
>> FilePath object, if I understand it correctly.  FilePath could include 
>> the workaround far in advance of Python deciding to.
>
> oh, it makes perfect sense to have a workaround in twisted, i'm not 
> suggesting otherwise. however, it should be just that - a temporary 
> workaround until cpython has a fix for the issue, because (outside of the 
> offending libc implementation), that is the right place to fix it.

just to clarify: there was no question to the effect of  'should we fix this 
in twisted for now?' - i was presuming that this course of action would be 
obvious and, indeed, the one being taken. cory specifically asked where i 
thought the bug was, so i explained my take on that.

more importantly, it just occurred to me that even if the next minor cpython 
release contains this fix, we (and all python users) would still be stuck 
with this issue in previous releases. twisted would have to contain the 
workaround until the last version of cpython without the fix became 
unsupported, which could be quite a while. in light of this, not only should 
python be fixed, but this behaviour needs to be explained in the respective 
python docs quite prominently as well.

-p 




From warner at lothar.com  Sat Dec 31 17:16:39 2005
From: warner at lothar.com (Brian Warner)
Date: Sat, 31 Dec 2005 14:16:39 -0800 (PST)
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and
 what to do about it
Message-ID: <20051231.141639.112593935.warner@lothar.com>

glyph at divmod.com writes:

> It seems like we can work around this more easily than that, considering
> that flush and seek are available from Twisted; the file object causing
> problems in the tests is being returned from the open() method of a
> FilePath object, if I understand it correctly. FilePath could include the
> workaround far in advance of Python deciding to.

I'm pretty sure that the real problem we're trying to solve here is caused by
a stuck process keeping a .pyd file open. Indeed, if you look at the
buildslave's logs, you'll see the exception is as follows:

 exceptions.OSError: [Errno 13] Permission denied: 'c:\\buildslave\\win32-win32er\\W32-full2.4-win32er\\Twisted\\twisted\\protocols\\_c_urlarg.pyd'

So changing the way Twisted or its unit tests open a file is just not going
to help. What matters is the way python (or.. pyrex?) opens a file.

(for context: the buildbot is currently configured to do SVN checkout/updates
into one directory, then copy the tree into a second directory, then run
tests on that second directory. This mode='copy' approach uses 'svn update'
to minimizes network bandwidth, but at the expense of doubling the disk usage
with the extra copy. At the beginning of each build, the buildslave deletes
the second directory with a function named rmdirRecursive() that bear
provided, which does a chmod() of any mis-permissioned files before deleting
them. It was an os.remove() inside this rmdirRecursive which raised the
exception).


I've run into a similar problem in the past, under Solaris, using NFS, where
a test case spawned off a daemon process which then didn't die when it was
supposed to, somehow held on to a file (I think solaris won't let you delete
a file that is being used as the backing store for an executable), and that
prevented the unlink() from succeeding.

In that environment, I just renamed the top-level directory to something
unique, spawned off an 'rm -rf' into the background to delete the old
directory if it was possible, then continued on with the next build. If the
code had to try too hard to come up with a unique name, it would flag a
warning that there might be a stuck process somewhere.

Perhaps we could use something similar here?

Of course, the real fix would be to find a way to let the testing code kill
off any stuck processes, but that'll probably be very windows-specific.


cheers,
 -Brian



From paul-lists at perforge.com  Sat Dec 31 17:23:47 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 17:23:47 -0500
Subject: how winnt fileops work and what to do about it (was
	Re:[Twisted-Python] Twisted windows hackers - help the tests to pass!)
References: <20051231215230.1217.821296097.divmod.quotient.9234@ohm>
Message-ID: <0bab01c60e58$dec410a0$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 4:52 PM
Subject: Re: how winnt fileops work and what to do about it (was 
Re:[Twisted-Python] Twisted windows hackers - help the tests to pass!)


> On Sat, 31 Dec 2005 05:48:43 -0500, Paul G <paul-lists at perforge.com> 
> wrote:
>>
>>ok, i can actually chime in here because i've done filesystems work on 
>>windows (don't ask ;). now, it's been a while, but i should remember 
>>things reasonably accurately (i hope). see below for comments:
>
> Thanks, Paul, for these comments.  This cleared up a lot about how the 
> filesystem works on Win32 for me.

just a quick revision from me, for the benefit of posterity only, since 
investigating the feasibility of fixing the underlying cause (files being 
held open) seems to be the best course of action.

>>4. test whether you can either use ZwSetFileInformation() to rename 
>>directories by changing the FILE_NAME attr in the appropriate info 
>>structure or use it to move by renaming files which are open, again using 
>>the appropriate (but different) structure.

this will definitely not work for files based on the ddk docs i managed to 
dig out, and will almost certainly not work for directories (though this 
isn't documented either way). quite simply, expecting this to work is an 
expectation borne out of familiarity with things like ext2/linux-vfs, where 
all filesystem objects are inodes mapped into a namespace with dentries.  it 
appears that no matter how you slice it, the underlying implementation of 
ntfs is drastically different, so a rename is a move and a move is a 
copy+delete, which brings us back to our problem.

-p 




From warner at lothar.com  Sat Dec 31 17:25:36 2005
From: warner at lothar.com (Brian Warner)
Date: Sat, 31 Dec 2005 14:25:36 -0800 (PST)
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work
	and what to do about it
Message-ID: <20051231.142536.115608090.warner@lothar.com>


Ah, sorry, there are two separate bugs, and this thread is dealing with the
other one. Nevermind.

 -Brian (plus, this thread makes me realize that renaming the directory won't
         work anyway)



From exarkun at divmod.com  Sat Dec 31 17:27:48 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 31 Dec 2005 17:27:48 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work
	and what to do about it
In-Reply-To: <20051231.141639.112593935.warner@lothar.com>
Message-ID: <20051231222748.1217.1414203448.divmod.quotient.9242@ohm>

On Sat, 31 Dec 2005 14:16:39 -0800 (PST), Brian Warner <warner at lothar.com> wrote:
>glyph at divmod.com writes:
>
>> It seems like we can work around this more easily than that, considering
>> that flush and seek are available from Twisted; the file object causing
>> problems in the tests is being returned from the open() method of a
>> FilePath object, if I understand it correctly. FilePath could include the
>> workaround far in advance of Python deciding to.
>
>I'm pretty sure that the real problem we're trying to solve here is caused by
>a stuck process keeping a .pyd file open. Indeed, if you look at the
>buildslave's logs, you'll see the exception is as follows:

To clarify, there are many, many problems we are attempting to solve >:)  Confusingly, they seem to be predominantly filesystem related.

>
> exceptions.OSError: [Errno 13] Permission denied: 'c:\\buildslave\\win32-win32er\\W32-full2.4-win32er\\Twisted\\twisted\\protocols\\_c_urlarg.pyd'
>

This is definitely one of them.  Another is that trial's test_output and test_runner try to move a directory aside and fail for some reason.  Another is that some tests assert things about the behavior of files opened in 'r+b' mode, which does not behave the same way on Win32 as on POSIX.

Jean-Paul



From paul-lists at perforge.com  Sat Dec 31 17:48:29 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 17:48:29 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and
	what to do about it
References: <20051231.141639.112593935.warner@lothar.com>
Message-ID: <0bb701c60e5c$53d20250$6402a8c0@dcore>


----- Original Message ----- 
From: "Brian Warner" <warner at lothar.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 5:16 PM
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and 
what to do about it


> glyph at divmod.com writes:
>
>> It seems like we can work around this more easily than that, considering
>> that flush and seek are available from Twisted; the file object causing
>> problems in the tests is being returned from the open() method of a
>> FilePath object, if I understand it correctly. FilePath could include the
>> workaround far in advance of Python deciding to.
>
> I'm pretty sure that the real problem we're trying to solve here is caused 
> by
> a stuck process keeping a .pyd file open. Indeed, if you look at the
> buildslave's logs, you'll see the exception is as follows:
>
> exceptions.OSError: [Errno 13] Permission denied: 
> 'c:\\buildslave\\win32-win32er\\W32-full2.4-win32er\\Twisted\\twisted\\protocols\\_c_urlarg.pyd'
>
> So changing the way Twisted or its unit tests open a file is just not 
> going
> to help. What matters is the way python (or.. pyrex?) opens a file.
>
> (for context: the buildbot is currently configured to do SVN 
> checkout/updates
> into one directory, then copy the tree into a second directory, then run
> tests on that second directory. This mode='copy' approach uses 'svn 
> update'
> to minimizes network bandwidth, but at the expense of doubling the disk 
> usage
> with the extra copy. At the beginning of each build, the buildslave 
> deletes
> the second directory with a function named rmdirRecursive() that bear
> provided, which does a chmod() of any mis-permissioned files before 
> deleting
> them. It was an os.remove() inside this rmdirRecursive which raised the
> exception).

sysinternals.com should have a utility equivalent to lsof. this is probably 
the best way to figure out who's doing this.

> I've run into a similar problem in the past, under Solaris, using NFS, 
> where
> a test case spawned off a daemon process which then didn't die when it was
> supposed to, somehow held on to a file (I think solaris won't let you 
> delete
> a file that is being used as the backing store for an executable), and 
> that
> prevented the unlink() from succeeding.

this has to do with how execution works in unices generally. it is *not* a 
lock - there are no compulsory locks - so while the situation is somewhat 
(not very, though) similar wrt effects, it's actually completely different. 
posix semantics dictate that you can not open a file being executed for 
writing and can not execute if it's open for writing; you can, however, 
unlink because the inode doesn't get reaped until the refcount drops to 0. 
this is the case on linux systems. svr4 prohibits the unlink as well, this 
is an svr4 extension to posix. as an interesting piece of trivia to chuckle 
about, the errno for these conditions is ETXTBUSY aka Textfile Busy. (this 
is funny because executables are always binary in practice).

> In that environment, I just renamed the top-level directory to something
> unique, spawned off an 'rm -rf' into the background to delete the old
> directory if it was possible, then continued on with the next build. If 
> the
> code had to try too hard to come up with a unique name, it would flag a
> warning that there might be a stuck process somewhere.

this is a valid technique, except when you're dealing with windows ;) as i 
mentioned in another post, renames (regardless of how high up in the tree 
you go) are recursive copy + recursive delete. the delete will fail. 
furthermore, SHFileOperation recursive deletes bail on first error, afair.

> Perhaps we could use something similar here?

no, see above.

> Of course, the real fix would be to find a way to let the testing code 
> kill
> off any stuck processes, but that'll probably be very windows-specific.

on windows, we probably want to use os.abort() and on *nix os.kill(). 
however, it is probably more interesting to figure out why processes are 
getting stuck ;)

-p 




From paul-lists at perforge.com  Sat Dec 31 18:04:16 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 18:04:16 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops workand
	what to do about it
References: <20051231222748.1217.1414203448.divmod.quotient.9242@ohm>
Message-ID: <0bcf01c60e5e$86af06d0$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 5:27 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
workand what to do about it


> This is definitely one of them.  Another is that trial's test_output and 
> test_runner try to move a directory aside and fail for some > reason.

they fail for the same reason it looks like. the crux of the issue is that 
you can't hold files open if you're going to be performing ops on an 
ancestor directory.


>  Another is that some tests assert things about the behavior of files 
> opened in 'r+b' mode, which does not behave the same way > on Win32 as on 
> POSIX.

this has been resolved (as in cause found and confirmed). also, if you will 
excuse me for being pedantically retentive, there is no direct equivalent to 
ansi c file stream apis in either win32 or nt native. in fact, neither is 
there one on posix. nt/posix is syscalls, win32 is a libc-like layer on top 
of ntapi, but completely different. this weirdness is all in the libc. the 
issue lies, specifically, with the libc (aka c runtime as they call it) 
visual studio provides and its implementation of file streams. i'm willing 
to bet that if cpython can be built using something other than visual studio 
on windows, those builds do not suffer from the same issue (unless that 
product's authors decided to lemming microsoft when writing their libc).

-p 




From foom at fuhm.net  Sat Dec 31 18:12:06 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 31 Dec 2005 18:12:06 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops workand
	what to do about it
In-Reply-To: <0b9801c60e55$26ead110$6402a8c0@dcore>
References: <20051231213346.1217.292143908.divmod.quotient.9228@ohm>
	<0b9801c60e55$26ead110$6402a8c0@dcore>
Message-ID: <97E41409-3595-4FE3-B4C9-E1063BFF38DF@fuhm.net>


On Dec 31, 2005, at 4:57 PM, Paul G wrote:
> oh, it makes perfect sense to have a workaround in twisted, i'm not  
> suggesting otherwise. however, it should be just that - a temporary  
> workaround until cpython has a fix for the issue, because (outside  
> of the offending libc implementation), that is the right place to  
> fix it.

As I wrote in the bug report:
> It's not a python bug except perhaps that python should raise an  
> exception.
> Doing a read and write without a seek in between is illegal in C.
>
> "ANSI C requires that a file positioning function intervene between  
> output and
> input, unless an input operation encounters end-of-file."

I am against including any sort of workaround besides raising an  
exception if the situation occurs. And I don't think even that is  
particularly warranted.

James



From paul-lists at perforge.com  Sat Dec 31 18:25:29 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 18:25:29 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and
	what to do about it
References: <20051231.141639.112593935.warner@lothar.com>
Message-ID: <0be401c60e61$7cf9cc80$6402a8c0@dcore>


----- Original Message ----- 
From: "Brian Warner" <warner at lothar.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 5:16 PM
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and 
what to do about it

> Of course, the real fix would be to find a way to let the testing code 
> kill
> off any stuck processes, but that'll probably be very windows-specific.

on *nix, we can use os.waitpid() and os.kill(). on windows, we can use win32 
api OpenProcess+WaitFor{Single,Multiple}Object[s]() and TerminateProcess. 
please keep in mind that killing processes on windows is not safe when they 
use dlls..on *nix, this is of course protected against with proper signal 
handling.

-p 




From corydodt at twistedmatrix.com  Sat Dec 31 18:34:07 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Sat, 31 Dec 2005 15:34:07 -0800
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops workand
	what to do about it
In-Reply-To: <97E41409-3595-4FE3-B4C9-E1063BFF38DF@fuhm.net>
References: <20051231213346.1217.292143908.divmod.quotient.9228@ohm>	<0b9801c60e55$26ead110$6402a8c0@dcore>
	<97E41409-3595-4FE3-B4C9-E1063BFF38DF@fuhm.net>
Message-ID: <43B7156F.9010902@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Fair enough.  In that case, the test itself is broken, since it doesn't
do seeks or flushes.

C


James Y Knight wrote:
> 
> On Dec 31, 2005, at 4:57 PM, Paul G wrote:
> 
>> oh, it makes perfect sense to have a workaround in twisted, i'm not 
>> suggesting otherwise. however, it should be just that - a temporary 
>> workaround until cpython has a fix for the issue, because (outside  of
>> the offending libc implementation), that is the right place to  fix it.
> 
> 
> As I wrote in the bug report:
> 
>> It's not a python bug except perhaps that python should raise an 
>> exception.
>> Doing a read and write without a seek in between is illegal in C.
>>
>> "ANSI C requires that a file positioning function intervene between 
>> output and
>> input, unless an input operation encounters end-of-file."
> 
> 
> I am against including any sort of workaround besides raising an 
> exception if the situation occurs. And I don't think even that is 
> particularly warranted.
> 
> James
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDtxVu3A5SrXAiHQcRApqwAJ0Ywaxg9qxs2QZQxB8NIILUFnTXUgCfaNHl
QVcMaluKYVx0cf5+mWHo2mU=
=9NK8
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Sat Dec 31 18:46:35 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 31 Dec 2005 18:46:35 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops workand
	what to do about it
In-Reply-To: <97E41409-3595-4FE3-B4C9-E1063BFF38DF@fuhm.net>
Message-ID: <20051231234635.1217.13865851.divmod.quotient.9259@ohm>

On Sat, 31 Dec 2005 18:12:06 -0500, James Y Knight <foom at fuhm.net> wrote:
>
>On Dec 31, 2005, at 4:57 PM, Paul G wrote:
>>oh, it makes perfect sense to have a workaround in twisted, i'm not 
>>suggesting otherwise. however, it should be just that - a temporary 
>>workaround until cpython has a fix for the issue, because (outside  of the 
>>offending libc implementation), that is the right place to  fix it.
>
>As I wrote in the bug report:
>>It's not a python bug except perhaps that python should raise an 
>>exception.
>>Doing a read and write without a seek in between is illegal in C.
>>
>>"ANSI C requires that a file positioning function intervene between  output 
>>and
>>input, unless an input operation encounters end-of-file."
>
>I am against including any sort of workaround besides raising an  exception 
>if the situation occurs. And I don't think even that is  particularly 
>warranted.

Thanks for pointing this out.  The immediate fix is now obvious: the test needs to change.  It _might_ be nice to have an assertion for this behavior, but I'm not about to add a file wrapper just for this (if all of Twisted used FilePath, instead of opening files directly, I might grant more weight to this, but since it doesn't...).

Jean-Paul



From paul-lists at perforge.com  Sat Dec 31 18:50:24 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 18:50:24 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops
	workandwhat to do about it
References: <20051231213346.1217.292143908.divmod.quotient.9228@ohm><0b9801c60e55$26ead110$6402a8c0@dcore>
	<97E41409-3595-4FE3-B4C9-E1063BFF38DF@fuhm.net>
Message-ID: <0c0201c60e64$f849ea70$6402a8c0@dcore>


----- Original Message ----- 
From: "James Y Knight" <foom at fuhm.net>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 6:12 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
workandwhat to do about it


>
> On Dec 31, 2005, at 4:57 PM, Paul G wrote:
>> oh, it makes perfect sense to have a workaround in twisted, i'm not 
>> suggesting otherwise. however, it should be just that - a temporary 
>> workaround until cpython has a fix for the issue, because (outside  of 
>> the offending libc implementation), that is the right place to  fix it.
>
> As I wrote in the bug report:
>> It's not a python bug except perhaps that python should raise an 
>> exception.
>> Doing a read and write without a seek in between is illegal in C.
>>
>> "ANSI C requires that a file positioning function intervene between 
>> output and
>> input, unless an input operation encounters end-of-file."

you stop quoting right at the relevant part (ie, where the difference 
between eg glibc and msvcrt comes in):

"(If this condition is not met, then a read is allowed to  return
       the result of writes other than the most recent.)"

does msvcrt do this? no. moreover, msvcrt needs an *fsetpos()*/fseek() and 
an *fflush()* (as per cory), whereas glibc will take fseek() or *fgetpos()*. 
this means that calls resulting in synchronization in glibc and msvcrt are 
different, with glibc sticking to ansi c and msvcrt deviating.

there is an obvious deviation both from ansi c and from glibc usage.

moreover, none of this seems to be necessary with glibc in practice (and 
cpython seems to not be doing it or suggesting it in the docs), since this 
test doesn't fail on linux. different results given the same input is a bug, 
imo.

let us step back for a second: the problem rears its head in a file object 
"being returned from the open() method of a FilePath
object". the user has no way to know that he should be syncing the stream, 
primarily because he's being given a 'File', not a 'File stream'. either 
these issues should be listed in the docs, or taken care of underneath, 
keeping a File a black box. from a design point of view, the stream is an 
implementation detail - exposing it is ugly.

a matter of how you view it though.

-p 




From paul-lists at perforge.com  Sat Dec 31 18:56:49 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 18:56:49 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops
	workandwhat to do about it
References: <20051231234635.1217.13865851.divmod.quotient.9259@ohm>
Message-ID: <0c1801c60e65$dd864d90$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 6:46 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
workandwhat to do about it


> On Sat, 31 Dec 2005 18:12:06 -0500, James Y Knight <foom at fuhm.net> wrote:
>>
>>On Dec 31, 2005, at 4:57 PM, Paul G wrote:
>>>oh, it makes perfect sense to have a workaround in twisted, i'm not 
>>>suggesting otherwise. however, it should be just that - a temporary 
>>>workaround until cpython has a fix for the issue, because (outside  of 
>>>the offending libc implementation), that is the right place to  fix it.
>>
>>As I wrote in the bug report:
>>>It's not a python bug except perhaps that python should raise an 
>>>exception.
>>>Doing a read and write without a seek in between is illegal in C.
>>>
>>>"ANSI C requires that a file positioning function intervene between 
>>>output and
>>>input, unless an input operation encounters end-of-file."
>>
>>I am against including any sort of workaround besides raising an 
>>exception if the situation occurs. And I don't think even that is 
>>particularly warranted.
>
> Thanks for pointing this out.  The immediate fix is now obvious: the test 
> needs to change.  It _might_ be nice to have an assertion for this 
> behavior, but I'm not about to add a file wrapper just for this (if all of 
> Twisted used FilePath, instead of opening files directly, I might grant 
> more weight to this, but since it doesn't...).

are we sure streams are only used with File objects FilePath gives us?

-p




From paul-lists at perforge.com  Sat Dec 31 19:00:55 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 19:00:55 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt
	fileopsworkandwhat to do about it
References: <20051231213346.1217.292143908.divmod.quotient.9228@ohm><0b9801c60e55$26ead110$6402a8c0@dcore><97E41409-3595-4FE3-B4C9-E1063BFF38DF@fuhm.net>
	<0c0201c60e64$f849ea70$6402a8c0@dcore>
Message-ID: <0c1d01c60e66$705b6a10$6402a8c0@dcore>


----- Original Message ----- 
From: "Paul G" <paul-lists at perforge.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 6:50 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt 
fileopsworkandwhat to do about it


>
> ----- Original Message ----- 
> From: "James Y Knight" <foom at fuhm.net>
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Sent: Saturday, December 31, 2005 6:12 PM
> Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
> workandwhat to do about it
>
>
>>
>> On Dec 31, 2005, at 4:57 PM, Paul G wrote:
>>> oh, it makes perfect sense to have a workaround in twisted, i'm not 
>>> suggesting otherwise. however, it should be just that - a temporary 
>>> workaround until cpython has a fix for the issue, because (outside  of 
>>> the offending libc implementation), that is the right place to  fix it.
>>
>> As I wrote in the bug report:
>>> It's not a python bug except perhaps that python should raise an 
>>> exception.
>>> Doing a read and write without a seek in between is illegal in C.
>>>
>>> "ANSI C requires that a file positioning function intervene between 
>>> output and
>>> input, unless an input operation encounters end-of-file."
>
> you stop quoting right at the relevant part (ie, where the difference 
> between eg glibc and msvcrt comes in):
>
> "(If this condition is not met, then a read is allowed to  return
>       the result of writes other than the most recent.)"
>
> does msvcrt do this? no. moreover, msvcrt needs an *fsetpos()*/fseek() and 
> an *fflush()* (as per cory), whereas glibc will take fseek() or 
> *fgetpos()*. this means that calls resulting in synchronization in glibc 
> and msvcrt are different, with glibc sticking to ansi c and msvcrt 
> deviating.
>
> there is an obvious deviation both from ansi c and from glibc usage.
>
> moreover, none of this seems to be necessary with glibc in practice (and 
> cpython seems to not be doing it or suggesting it in the docs), since this 
> test doesn't fail on linux. different results given the same input is a 
> bug, imo.
>
> let us step back for a second: the problem rears its head in a file object 
> "being returned from the open() method of a FilePath
> object". the user has no way to know that he should be syncing the stream, 
> primarily because he's being given a 'File', not a 'File stream'. either 
> these issues should be listed in the docs, or taken care of underneath, 
> keeping a File a black box. from a design point of view, the stream is an 
> implementation detail - exposing it is ugly.
>
> a matter of how you view it though.

talking to myself: no it isn't. here's the msdn article:

http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vclib/html/_crt_fopen.2c_._wfopen.asp

see the difference to the excerpt you quoted from fopen(2)? yep, no 'you 
dont have to sync if input op hits eof' exception. this is what's causing 
the breakage with msvcrt but not glibc, i bet. still think it's not a bug/is 
a bug in the test?

i'll go sleep now, so if i've missed the boat again, i won't be here to 
witness the smackdown <g>.

-p 




From paul-lists at perforge.com  Sat Dec 31 19:27:34 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 19:27:34 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt
	fileopsworkandwhat to do about it
References: <20051231234635.1217.13865851.divmod.quotient.9259@ohm>
	<0c1801c60e65$dd864d90$6402a8c0@dcore>
Message-ID: <0c3401c60e6a$29959930$6402a8c0@dcore>


----- Original Message ----- 
From: "Paul G" <paul-lists at perforge.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 6:56 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt 
fileopsworkandwhat to do about it


>
> ----- Original Message ----- 
> From: "Jean-Paul Calderone" <exarkun at divmod.com>
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Sent: Saturday, December 31, 2005 6:46 PM
> Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
> workandwhat to do about it
>
>
>> On Sat, 31 Dec 2005 18:12:06 -0500, James Y Knight <foom at fuhm.net> wrote:
>>>
>>>On Dec 31, 2005, at 4:57 PM, Paul G wrote:
>>>>oh, it makes perfect sense to have a workaround in twisted, i'm not 
>>>>suggesting otherwise. however, it should be just that - a temporary 
>>>>workaround until cpython has a fix for the issue, because (outside  of 
>>>>the offending libc implementation), that is the right place to  fix it.
>>>
>>>As I wrote in the bug report:
>>>>It's not a python bug except perhaps that python should raise an 
>>>>exception.
>>>>Doing a read and write without a seek in between is illegal in C.
>>>>
>>>>"ANSI C requires that a file positioning function intervene between 
>>>>output and
>>>>input, unless an input operation encounters end-of-file."
>>>
>>>I am against including any sort of workaround besides raising an 
>>>exception if the situation occurs. And I don't think even that is 
>>>particularly warranted.
>>
>> Thanks for pointing this out.  The immediate fix is now obvious: the test 
>> needs to change.  It _might_ be nice to have an assertion for this 
>> behavior, but I'm not about to add a file wrapper just for this (if all 
>> of Twisted used FilePath, instead of opening files directly, I might 
>> grant more weight to this, but since it doesn't...).
>
> are we sure streams are only used with File objects FilePath gives us?

the relevant snippet of an ltrace python -c "f=open('/etc/hosts/', 'r+')"

---
__ctype_b_loc(0x40115740, 0x40115548, 5, 0x08112740, 0) = 0x401138e4
malloc(11)                                       = 0x0814cd18
realloc(NULL, 16)                                = 0x08157910
memcpy(0x0814cd18, "/etc/hosts", 11)             = 0x0814cd18
free(0x08157910)                                 = <void>
__ctype_b_loc(0x40115740, 0x40115548, 0, 0, 0)   = 0x401138e4
memcpy(0x40160c74, "r+", 3)                      = 0x40160c74
strchr("r+", 'b')                                = NULL
strchr("r+", 'U')                                = NULL
__errno_location()                               = 0x401138e0
fopen64("/etc/hosts", "r+")                      = 0x08175538
---

sure enough, fopen.

-p 




From foom at fuhm.net  Sat Dec 31 23:29:12 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 31 Dec 2005 23:29:12 -0500
Subject: [Twisted-Python] Depreciation of trial.unittest functions?
In-Reply-To: <d06a5cd30512310216o781c740j5c678c42cf854f68@mail.gmail.com>
References: <43B45572.9020405@gmail.com>
	<d06a5cd30512310216o781c740j5c678c42cf854f68@mail.gmail.com>
Message-ID: <271E232A-9316-4471-96BC-B196D3DB4FA9@fuhm.net>


On Dec 31, 2005, at 5:16 AM, Jonathan Lange wrote:

> On 12/30/05, Paul Swartz <paulswartz at gmail.com> wrote:
>
>> I'm not sure if Conch is the only project that did this, but it  
>> used the
>> trial.unittest.* functions instead of methods on TestCases.  I  
>> used them
>> to avoid having to pass TestCase instances around all over the  
>> places,
>> or using a global variable.  To avoid the depreciation warnings, I've
>> starting using the unittest._inst global variable, but I doubt  
>> that this
>> is the appropriate way to change my code.  Is this just not a  
>> supported
>> way of using Trial, or is there something else I should be doing?
>>
>>
>
> This is just not a supported way of using Trial.

Given that the methods don't use self at all (and at least I can't  
forsee any need to in the future), is there a reason they can't be  
class methods, so that unittest.TestCase.assertEquals(a, b) would work?

James




From andrew-twisted at puzzling.org  Thu Dec  1 00:06:07 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 1 Dec 2005 18:06:07 +1100
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
Message-ID: <20051201070607.GS18323@home.puzzling.org>

On Thu, Dec 01, 2005 at 10:35:56AM +0800, Xu Ryan wrote:
> Thank you, but ClientCreator is seems just send message for once?? My
> app need connect with auth info, then send a command and request the
> return value. Can i use ClientCreator?

ClientCreator is simply an easy way to establish a single connection to a
server.  It has nothing to do with what happens to the connection after that;
that's what the Protocol does.

I can't really give you any more specific help without more information about
your problem.

-Andrew.




From xuryans at gmail.com  Thu Dec  1 01:22:03 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Thu, 1 Dec 2005 16:22:03 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051201070607.GS18323@home.puzzling.org>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
Message-ID: <f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>

Does Client Creator load protocol's "connectionMade" automatically ,
same as factory?

On 12/1/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> On Thu, Dec 01, 2005 at 10:35:56AM +0800, Xu Ryan wrote:
> > Thank you, but ClientCreator is seems just send message for once?? My
> > app need connect with auth info, then send a command and request the
> > return value. Can i use ClientCreator?
>
> ClientCreator is simply an easy way to establish a single connection to a
> server.  It has nothing to do with what happens to the connection after that;
> that's what the Protocol does.
>
> I can't really give you any more specific help without more information about
> your problem.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From andrew-twisted at puzzling.org  Thu Dec  1 01:45:03 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 1 Dec 2005 19:45:03 +1100
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
Message-ID: <20051201084503.GT18323@home.puzzling.org>

[please don't top-post]

On Thu, Dec 01, 2005 at 04:22:03PM +0800, Xu Ryan wrote:
> Does Client Creator load protocol's "connectionMade" automatically ,
> same as factory?

ClientCreator is just a shortcut for creating the factory and so forth manually.
The event handlers (connectionMade, dataReceived, connectionLost) on the
resulting protocol will be invoked as normal.

So yes, connectionMade will be called (assuming a connection is made, if the
connection fails the Deferred returned from ClientCreator.connectTCP will have
an error instead), but this isn't really anything to do with ClientCreator: once
the connection is established, ClientCreator is not involved.

Experimenting with the example at
http://twistedmatrix.com/projects/core/documentation/howto/clients.html#auto2
might be a good idea.

The source code for ClientCreator is quite simple.  Perhaps it would be worth
reading and understanding that, so you can see how little code is involved.  The
definition of ClientCreator is found in twisted/internet/protocol.py:
    http://svn.twistedmatrix.com/cvs/trunk/twisted/internet/protocol.py?view=auto&rev=14194

-Andrew.




From xuryans at gmail.com  Thu Dec  1 02:01:38 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Thu, 1 Dec 2005 17:01:38 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
Message-ID: <f6c194d30512010101u210670b3sfd0809098af1f0d9@mail.gmail.com>

I have solved this problem, thank you

On 12/1/05, Xu Ryan <xuryans at gmail.com> wrote:
> Does Client Creator load protocol's "connectionMade" automatically ,
> same as factory?
>
> On 12/1/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> > On Thu, Dec 01, 2005 at 10:35:56AM +0800, Xu Ryan wrote:
> > > Thank you, but ClientCreator is seems just send message for once?? My
> > > app need connect with auth info, then send a command and request the
> > > return value. Can i use ClientCreator?
> >
> > ClientCreator is simply an easy way to establish a single connection to a
> > server.  It has nothing to do with what happens to the connection after that;
> > that's what the Protocol does.
> >
> > I can't really give you any more specific help without more information about
> > your problem.
> >
> > -Andrew.
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
>
> --
> Xu Ryans
>


--
Xu Ryans



From vijay at accellion.com  Thu Dec  1 02:43:10 2005
From: vijay at accellion.com (Vijay Rao)
Date: Thu, 01 Dec 2005 15:13:10 +0530
Subject: [Twisted-Python] FTPS server
Message-ID: <6.2.3.4.0.20051201151306.0387ab10@mail.accellion.com>

Hi ,

I am trying to use a 'virtual' twisted FTP server ( using 2.1.0 ) in 
an application which can use a database instead of the file system.
It seems to work fine except I could not connect over SSL/TLS since 
the FTP security extensions enhancement 
http://www.ietf.org/rfc/rfc2228.txt is not yet implemented. Is there 
any plan to add this in the near future / any simple way to add it cleanly ?

Thanks
Vijay


-- 
No virus found in this outgoing message.
Checked by AVG Anti-Virus.
Version: 7.1.362 / Virus Database: 267.13.10/188 - Release Date: 11/29/2005





From xuryans at gmail.com  Thu Dec  1 02:48:12 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Thu, 1 Dec 2005 17:48:12 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051201084503.GT18323@home.puzzling.org>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
Message-ID: <f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>

I meet another problem. After i create some ClientCreate instance and
let the reactor run , it works ok.
But how could I send message when reactor is running? Because there
are not only one services that twisted provide. And when I need send
the messages i have told above , perhaps there are other service
running , using the same reactor(becaus it's global), and obviously I
can't stop it , re-create ClientCreator, then call reactor.run() to
send the message.

On 12/1/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> [please don't top-post]
>
> On Thu, Dec 01, 2005 at 04:22:03PM +0800, Xu Ryan wrote:
> > Does Client Creator load protocol's "connectionMade" automatically ,
> > same as factory?
>
> ClientCreator is just a shortcut for creating the factory and so forth manually.
> The event handlers (connectionMade, dataReceived, connectionLost) on the
> resulting protocol will be invoked as normal.
>
> So yes, connectionMade will be called (assuming a connection is made, if the
> connection fails the Deferred returned from ClientCreator.connectTCP will have
> an error instead), but this isn't really anything to do with ClientCreator: once
> the connection is established, ClientCreator is not involved.
>
> Experimenting with the example at
> http://twistedmatrix.com/projects/core/documentation/howto/clients.html#auto2
> might be a good idea.
>
> The source code for ClientCreator is quite simple.  Perhaps it would be worth
> reading and understanding that, so you can see how little code is involved.  The
> definition of ClientCreator is found in twisted/internet/protocol.py:
>     http://svn.twistedmatrix.com/cvs/trunk/twisted/internet/protocol.py?view=auto&rev=14194
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From andrew-twisted at puzzling.org  Thu Dec  1 02:51:37 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 1 Dec 2005 20:51:37 +1100
Subject: [Twisted-Python] FTPS server
In-Reply-To: <6.2.3.4.0.20051201151306.0387ab10@mail.accellion.com>
References: <6.2.3.4.0.20051201151306.0387ab10@mail.accellion.com>
Message-ID: <20051201095137.GV18323@home.puzzling.org>

On Thu, Dec 01, 2005 at 03:13:10PM +0530, Vijay Rao wrote:
> Hi ,
> 
> I am trying to use a 'virtual' twisted FTP server ( using 2.1.0 ) in 
> an application which can use a database instead of the file system.
> It seems to work fine except I could not connect over SSL/TLS since 
> the FTP security extensions enhancement 
> http://www.ietf.org/rfc/rfc2228.txt is not yet implemented. Is there 
> any plan to add this in the near future / any simple way to add it cleanly ?

No-one is working on this that I know of.  Patches gratefully accepted!

-Andrew.




From andrew-twisted at puzzling.org  Thu Dec  1 02:59:35 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 1 Dec 2005 20:59:35 +1100
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
Message-ID: <20051201095935.GW18323@home.puzzling.org>

On Thu, Dec 01, 2005 at 05:48:12PM +0800, Xu Ryan wrote:
> I meet another problem. After i create some ClientCreate instance and
> let the reactor run , it works ok.
> But how could I send message when reactor is running? Because there
> are not only one services that twisted provide. And when I need send
> the messages i have told above , perhaps there are other service
> running , using the same reactor(becaus it's global), and obviously I
> can't stop it , re-create ClientCreator, then call reactor.run() to
> send the message.

You seem to misunderstand how to do concurrent operations in Twisted.  You don't
need to stop the reactor.  If at some point in your code you want to make
another connection with ClientCreator, just call ClientCreator's connectTCP
method as usual -- without stopping the reactor.  The point of the reactor is
that it takes care of managing multiple connections and the like at once.

So, it's not "stop [the reactor] , re-create ClientCreator, then call
reactor.run() to send the message", it's just "re-create ClientCreator".  It may
even be just "call connectTCP on your existing ClientCreator again."

-Andrew.




From abe at fettig.net  Thu Dec  1 09:56:17 2005
From: abe at fettig.net (Abe Fettig)
Date: Thu, 01 Dec 2005 11:56:17 -0500
Subject: [Twisted-Python] New to twisted
In-Reply-To: <IBEKILOMELAPJHPEOCJMOECCCFAA.fhauck@srcpsolutions.com>
References: <IBEKILOMELAPJHPEOCJMOECCCFAA.fhauck@srcpsolutions.com>
Message-ID: <438F2B31.9010808@fettig.net>

Fred Hauck wrote:
> I am not only new to twisted, but to python as well.
> 
> I need what twisted does, so went out and got the "twisted" book
> by abe fettig. I am coding each example in the book as i get there.
> 
> the connectiontest.py example on page 16 gives me a call back on success,
> but not on error.

Hi Fred,

connectiontest.py should only report an error if you try to connect to
an invalid host, or to a port that isn't open. What happens if you try
to connect to an invalid host?

python connectiontest.py foo.bar 80

or a closed port?

python connectiontest.py fettig.net 81

Proper behavior is an error message, which indictates that the errback
fired correctly. Are you seeing something else?

I've tested that example on Windows XP, so I don't believe it's a
platform issue.

Abe



From alengarbage at yahoo.com  Thu Dec  1 13:11:43 2005
From: alengarbage at yahoo.com (Lenny G Arbage)
Date: Thu, 1 Dec 2005 12:11:43 -0800 (PST)
Subject: [Twisted-Python] user interaction & the reactor
Message-ID: <20051201201143.20280.qmail@web31510.mail.mud.yahoo.com>

Where can I find examples or instructions on combining
the reactor with [command-line] user interaction? 
I've been searching every resource I can, and know it
must be possible based on threads like this one:
http://twistedmatrix.com/pipermail/twisted-python/2005-June/010625.html
.  I /can/ block on a call made from within the
reactor while waiting for user's raw_input, but that
doesn't allow me to give live feedback to the user
from incoming status messages, and might cause
problems if a large number of status messages arrive
while the user is 'away'.  All the example clients I
can find inside of twisted are not [user-] interactive
(ftpclient, echoclient, simpleclient, etc).  Am I
looking in the wrong place?  Have I missed a howto?

Specifically I have a server that takes commands via a
protocol I define and a client that sends commands to
the server.  The commands on the server take some time
(on the order of 20 seconds to many minutes) to
complete or error out.  Once they do, status is sent
back to the client, i.e., the user can issue many
commands that are concurrently 'pending', completing
when the server sends back status.

I've started by running the client reactor in a
thread, and then using the main thread to get input
from the user.  Am I making this more difficult than
it needs to be?  Is there some way to integrate user
action (keyboard input) as events into the reactor's
event model?  Or is there a better approach?

  Thanks,
  Lenny


		
__________________________________ 
Yahoo! Music Unlimited 
Access over 1 million songs. Try it free. 
http://music.yahoo.com/unlimited/



From bob at redivi.com  Thu Dec  1 13:47:43 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 1 Dec 2005 12:47:43 -0800
Subject: [Twisted-Python] user interaction & the reactor
In-Reply-To: <20051201201143.20280.qmail@web31510.mail.mud.yahoo.com>
References: <20051201201143.20280.qmail@web31510.mail.mud.yahoo.com>
Message-ID: <68DAEEDF-3ABB-4DAF-A16A-46483CCB9CEE@redivi.com>


On Dec 1, 2005, at 12:11 PM, Lenny G Arbage wrote:

> Where can I find examples or instructions on combining
> the reactor with [command-line] user interaction?

http://twistedmatrix.com/projects/core/documentation/examples/stdin.py

-bob




From itamar at itamarst.org  Thu Dec  1 14:12:55 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 01 Dec 2005 16:12:55 -0500
Subject: [Twisted-Python] user interaction & the reactor
In-Reply-To: <68DAEEDF-3ABB-4DAF-A16A-46483CCB9CEE@redivi.com>
References: <20051201201143.20280.qmail@web31510.mail.mud.yahoo.com>
	<68DAEEDF-3ABB-4DAF-A16A-46483CCB9CEE@redivi.com>
Message-ID: <1133471575.9365.49.camel@localhost.localdomain>

On Thu, 2005-12-01 at 12:47 -0800, Bob Ippolito wrote:
> On Dec 1, 2005, at 12:11 PM, Lenny G Arbage wrote:
> 
> > Where can I find examples or instructions on combining
> > the reactor with [command-line] user interaction?
> 
> http://twistedmatrix.com/projects/core/documentation/examples/stdin.py

And you can combine this with the insults/recvline stuff included with
Conch (that has some examples too).




From alengarbage at yahoo.com  Thu Dec  1 15:53:43 2005
From: alengarbage at yahoo.com (Lenny G Arbage)
Date: Thu, 1 Dec 2005 14:53:43 -0800 (PST)
Subject: [Twisted-Python] Re: user interaction & the reactor
Message-ID: <20051201225343.75034.qmail@web31509.mail.mud.yahoo.com>

Okay, I think I've got it now.  This:
http://twistedmatrix.com/projects/core/documentation/howto/threading.html
combined with this:
http://mail.python.org/pipermail/python-list/2004-February/209632.html
contained some details I was woefully ignorant of.  


--- Lenny G Arbage <alengarbage at yahoo.com> wrote:

> Where can I find examples or instructions on
> combining
> the reactor with [command-line] user interaction? 
> I've been searching every resource I can, and know
> it
> must be possible based on threads like this one:
>
http://twistedmatrix.com/pipermail/twisted-python/2005-June/010625.html
> .  I /can/ block on a call made from within the
> reactor while waiting for user's raw_input, but that
> doesn't allow me to give live feedback to the user
> from incoming status messages, and might cause
> problems if a large number of status messages arrive
> while the user is 'away'.  All the example clients I
> can find inside of twisted are not [user-]
> interactive
> (ftpclient, echoclient, simpleclient, etc).  Am I
> looking in the wrong place?  Have I missed a howto?
> 
> Specifically I have a server that takes commands via
> a
> protocol I define and a client that sends commands
> to
> the server.  The commands on the server take some
> time
> (on the order of 20 seconds to many minutes) to
> complete or error out.  Once they do, status is sent
> back to the client, i.e., the user can issue many
> commands that are concurrently 'pending', completing
> when the server sends back status.
> 
> I've started by running the client reactor in a
> thread, and then using the main thread to get input
> from the user.  Am I making this more difficult than
> it needs to be?  Is there some way to integrate user
> action (keyboard input) as events into the reactor's
> event model?  Or is there a better approach?



		
__________________________________________ 
Yahoo! DSL  Something to write home about. 
Just $16.99/mo. or less. 
dsl.yahoo.com 




From jml at mumak.net  Thu Dec  1 18:59:43 2005
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 2 Dec 2005 12:59:43 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] r15274 - Significantly
	improve twisted.python.filepath,
	adding several new features and tests.
In-Reply-To: <E1EhwGr-0005OJ-00@wolfwood>
References: <E1EhwGr-0005OJ-00@wolfwood>
Message-ID: <d06a5cd30512011759j313f855ek@mail.gmail.com>

On 02/12/05, Glyph Lefkowitz <glyph at wolfwood.twistedmatrix.com> wrote:
> Author: glyph
> Date: Thu Dec  1 14:47:17 2005
> New Revision: 15274
>
> Modified:
>    trunk/twisted/python/filepath.py
>    trunk/twisted/test/test_paths.py
> Log:
> Significantly improve twisted.python.filepath, adding several new features and tests.
<snip>
> Modified: trunk/twisted/python/filepath.py
> ==============================================================================
> --- trunk/twisted/python/filepath.py    (original)
> +++ trunk/twisted/python/filepath.py    Thu Dec  1 14:47:17 2005
> @@ -5,6 +5,10 @@
>  from __future__ import generators
>
>  import os
> +import errno
> +import base64
> +import sha
> +
>  from os.path import isabs, exists, normpath, abspath, splitext
>  from os.path import basename, dirname
>  from os.path import join as joinpath
> @@ -25,8 +29,13 @@
>  class InsecurePath(Exception):
>      pass
>
> +def _secureEnoughString():
> +    """
> +    Create a pseudorandom, 16-character string for use in secure filenames.
> +    """
> +    return base64.urlsafe_b64encode(sha.new(os.urandom(64)).digest())[:16]
> +
<snip>

This breaks Twisted.  base64.urlsafe_b64encode is not available in
Python before version 2.4.

cheers,
jml



From jtanis at pycoder.org  Thu Dec  1 20:05:16 2005
From: jtanis at pycoder.org (James Tanis)
Date: Thu, 1 Dec 2005 22:05:16 -0500
Subject: [Twisted-Python] Need a SmartHost(E)SMTPRelayingManager guru
Message-ID: <65dcde740512011905w59d69a76x1f08a0cc2b6a6098@mail.gmail.com>

Previously my only experience with Twisted was with 1.3 when I was
developing a protocol from the ground up. Right now I've got this SMTP
server that I've slowly been piecing together using Twisted 2.1. I was
able to get everything working but after experiencing the learning
curve firsthand I decided to buy the shiny new Twisted: Network
Programming Essentials -- which is a great book I might add. Although
the book did open my eyes to things I had missed as well as help me to
improve my own code for local delivery it does not seem to cover
(E)SMTP relaying which is a valuable component to me.

Anyway, after adding a relaymanager.Queue the server was able to
receive and queue messages from a mail client as well as deliver to
local accounts. The problem comes in with
relaymanager.SMTPRelayingManager (relaymanager.ESMTPRelayingManager
gave me errors even earlier so I dropped it for the time being). Here
is the log with traceback:

2005/12/01 21:24 EST [-] Log opened.
2005/12/01 21:24 EST [-] twistd 2.1.0 (/usr/local/bin/python 2.4.2) starting up
2005/12/01 21:24 EST [-] reactor class:
twisted.internet.selectreactor.SelectReactor
2005/12/01 21:24 EST [-] Loading ./h2smtp.py...
2005/12/01 21:24 EST [-] Set 71757_1133487291.33_0_138982188 waiting
2005/12/01 21:24 EST [-] Set 71757_1133487291.33_0_138982188 waiting
2005/12/01 21:24 EST [-] /etc/resolv.conf changed, reparsing
2005/12/01 21:24 EST [-] Resolver added ('24.197.160.17', 53) to server list
2005/12/01 21:24 EST [-] Resolver added ('24.197.160.18', 53) to server list
2005/12/01 21:24 EST [-] twisted.names.dns.DNSDatagramProtocol starting on 62457
2005/12/01 21:24 EST [-] Loaded.
2005/12/01 21:24 EST [-] twisted.mail.protocols.ESMTPFactory starting on 2500
2005/12/01 21:24 EST [-] Starting factory
<twisted.mail.protocols.ESMTPFactory instance at 0x85b04ec>
2005/12/01 21:24 EST [-] twisted.mail.protocols.POP3Factory starting on 1100
2005/12/01 21:24 EST [-] Starting factory
<twisted.mail.protocols.POP3Factory instance at 0x85b052c>
2005/12/01 21:24 EST [twisted.names.dns.DNSDatagramProtocol (UDP)]
Starting factory <twisted.mail.relaymanager.SMTPManagedRelayerFactory
instance at 0x85fff0c>
2005/12/01 21:24 EST [Uninitialized] Traceback (most recent call last):
	  File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py",
line 58, in callWithLogger
	    return callWithContext({"system": lp}, func, *args, **kw)
	  File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py",
line 43, in callWithContext
	    return context.call({ILogContext: newCtx}, func, *args, **kw)
	  File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
line 59, in callWithContext
	    return self.currentContext().callWithContext(ctx, func, *args, **kw)
	  File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
line 37, in callWithContext
	    return func(*args,**kw)
	--- <exception caught here> ---
	  File "/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py",
line 139, in _doReadOrWrite
	    why = getattr(selectable, method)()
	  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
line 542, in doConnect
	    self._connectDone()
	  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
line 545, in _connectDone
	    self.protocol = self.connector.buildProtocol(self.getPeer())
	  File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py",
line 669, in buildProtocol
	    return self.factory.buildProtocol(addr)
	  File "/usr/local/lib/python2.4/site-packages/twisted/mail/relaymanager.py",
line 103, in buildProtocol
	    protocol = self.protocol(self.messages, self.manager, *self.pArgs,
	  File "/usr/local/lib/python2.4/site-packages/twisted/mail/relaymanager.py",
line 79, in __init__
	    relay.SMTPRelayer.__init__(self, messages, *args, **kw)
	  File "/usr/local/lib/python2.4/site-packages/twisted/mail/relay.py",
line 108, in __init__
	    smtp.SMTPClient.__init__(self, *args, **kw)
	exceptions.TypeError: __init__() takes at least 2 arguments (1 given)
	
2005/12/01 21:24 EST [Uninitialized] Backing off on delivery of
['71757_1133487291.33_0_138982188']
2005/12/01 21:24 EST [Uninitialized] Stopping factory
<twisted.mail.relaymanager.SMTPManagedRelayerFactory instance at
0x85fff0c>

>From what I can tell smtp.SMTPClient isn't getting passed identity.
Since this error is generated with a call to the relaying manager's
.checkState(self) function which only takes self as a argument.. well
lets just say I can't figure out what I'm missing from my own tracing
through the code in the relay/relaymanager/smtp modules. You should
find my code attached, the error should be easily reproducible if you
want to run it.

--
James Tanis
jtanis at pycoder.org
http://pycoder.org
-------------- next part --------------
# Horizon/2 SMTP implementation
# Copyright (c) 2005-2006 James Tanis
# -----

#Permission is hereby granted, free of charge, to any person obtaining a copy of
#this software and associated documentation files (the "Software"), to deal in
#the Software without restriction, including without limitation the rights to
#use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
#of the Software, and to permit persons to whom the Software is furnished to do
#so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE


import os
import os.path
from twisted.application import internet
from twisted.application import service
from twisted.cred import checkers
from twisted.cred import credentials
from twisted.cred import portal
from twisted.internet import defer
from twisted.mail import mail
from twisted.mail import maildir
from twisted.mail import relaymanager
from twisted.mail import relay
from twisted.mail import smtp
from twisted.mail import protocols
from twisted.mail.protocols import SMTPDomainDelivery
from twisted.persisted import dirdbm
from zope.interface import implements

appname = 'Horizon/2-SMTP'
smtp.DNSNAME = 'pycoder.org'

class ESMTPDelivery(protocols.ESMTPDomainDelivery):
    
    def __init__(self, service, user, dir):
	protocols.ESMTPDomainDelivery.__init__(self, service, user)
	self.root = dir
        self.service = service
	self.user = user	
	if not os.path.isdir(self.root):
	    raise ValueError, "'%s' does not exist" % dir
	
    def receivedHeader(self, helo, orgn, rcpts):
	date = smtp.rfc822date()
	msgid = smtp.messageid()
	tmp_rcpts = ''
        for rcpt in rcpts:
            tmp_rcpts += str(rcpt)+', '
        tmp_rcpts = tmp_rcpts[:-2]	    
	hdr = 'Received: from ' + helo[0] + ' (' + helo[1] + ')\n        by ' + smtp.DNSNAME + ' (' + appname + ') \n        id ' + msgid + '\n        for ' + tmp_rcpts + '; ' + date
        return hdr

    def validateFrom(self, helo, orgn):
	return orgn

    def validateTo(self, user):
        d = self.service.domains.get(user.dest.domain)
        if d == None:  
            d = relay.DomainQueuer(self.service, True)
        return defer.maybeDeferred(d.exists, user)

	
class Message:
    implements(smtp.IMessage)
    
    def __init__(self, domroot, user):         
        self.lines = []
	self.userdir = os.path.join(domroot, str(user.dest.local))
	if not os.path.exists(self.userdir): os.mkdir(self.userdir)
	self.mbox = maildir.MaildirMailbox(os.path.join(self.userdir, 'Inbox'))

    def lineReceived(self, line):         
        self.lines.append(line)         

    def eomReceived(self):
	self.lines.append('')
	body = '\n'.join(self.lines)
	return self.mbox.appendMessage(body)
	
    def connectionLost(self): 
        self.lines = None

class Domain:
    implements(mail.IDomain)
    def __init__(self, domroot):
	self.domroot = domroot
        if not os.path.exists(self.domroot): os.mkdir(self.domroot)	
	self.users = dirdbm.Shelf(os.path.join(self.domroot, 'smtpdb'))

    def createNewMessage(self, user):
        return Message(self.domroot, user) 

    def exists(self, user):
	if self.users.has_key(str(user.dest.local)):
	    msg = self.createNewMessage(user)
	    return lambda: msg
	else:
	    raise smtp.SMTPBadRcpt(str(user))

    def addUser(self, user, pword):
	self.users[str(user)] = pword
	
    def getCredentialsCheckers(self):
	return [checkers.AllowAnonymousAccess()]


class H2Service(service.MultiService):
    def __init__(self, root):
	service.MultiService.__init__(self)
        self.root = root
        self.domains = dirdbm.Shelf(os.path.join(self.root, 'h2db'))
        
        if not os.path.exists('/var/tmp/h2spool/queue'): os.mkdir('/var/tmp/h2spool/queue') 
        self.queue = relaymanager.Queue('/var/tmp/h2spool/queue')
        self.r = relaymanager.SmartHostSMTPRelayingManager(self.queue)
        #self.r.checkState()
    def requestAvatar(self, avatarId, mind, *interfaces):
        if smtp.IMessageDelivery in interfaces:
            a = ESMTPDelivery(self, avatarId, self.root)
            return smtp.IMessageDelivery, a, lambda: None
        raise NotImplementedError()   

def main():
    root = '/var/tmp/h2spool'
    m = H2Service(root)
    
    smtpd = protocols.ESMTPFactory(m, portal.Portal(m, [checkers.AllowAnonymousAccess()]))
    popd = protocols.POP3Factory(None)
     
    m.addService(internet.TCPServer(2500, smtpd))
    m.addService(internet.TCPServer(1100, popd))
    
    a = service.Application('Horizon/2')
    m.setServiceParent(a)
    m.r.checkState()
    return a

if __name__ == "__main__":
    from optparse import OptionParser 
    import sys

    root = '/var/tmp/h2spool'

    parser = OptionParser()
    parser.add_option('-d', '--domain', dest = 'domain', default = None, help = 'modify/add domain')
    parser.add_option('-u', '--user', dest = 'user', default = None, help = 'modify/add user, requires -d')
    parser.add_option('-p', '--password', dest = 'password', default = None, help = 'modify/set password, requires -d and -u')

    opts, args = parser.parse_args()
    if opts.domain != None and opts.user != None and opts.password != None:
        m = H2Service(root)
        d = m.domains[opts.domain] 
        d.addUser(opts.user, opts.password)
        m.domains[opts.domain] = d
        print d.users.keys()
 
    elif opts.domain != None and opts.user != None:
        pass
 
    elif opts.domain != None:
        m = H2Service(root)
        if not m.domains.has_key(opts.domain):
            d = Domain(os.path.join('/var/tmp/h2spool', opts.domain))
            m.domains[opts.domain] = d
        print m.domains.keys()

application = main()


From xuryans at gmail.com  Thu Dec  1 20:42:49 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Fri, 2 Dec 2005 11:42:49 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051201095935.GW18323@home.puzzling.org>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
Message-ID: <f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>

Would you like show me an simple example about this? I wrote one, but
it dosn't work.

__sender = None

class p(Protocol):
    def connectionMade(self):
        print "Connecttion make"

    def sendMessage(self):
        self.transport.write("some message")

    def connectionLost(self, reason):
        print "Lost, reason", reason

def sendCmd(addr, port, cmd, task, options = ""):
    """Send Cmd to
    """
    global __sender

    __sender.connectTCP(addr, port).addCallback(send,\
            cmd, task, options)

def send(p,cmd, task, options):
    print "send"
    p.sendMessage()
    return p

def finishConnection(p):
    print "lostConnection"
    p.transport.loseConnection()

def initSendCommand():
    global __sender
    if not __sender:
        __sender = ClientCreator(reactor, p)

if __name__ == "__main__":
    def testSendMessage():
        time.sleep(2)
        sendCmd("localhost", 8009, "test send")

    initSendCommand()
    thread.start_new_thread(testSendMessage, ())
    reactor.run()


On 12/1/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:

> You seem to misunderstand how to do concurrent operations in Twisted.  You don't
> need to stop the reactor.  If at some point in your code you want to make
> another connection with ClientCreator, just call ClientCreator's connectTCP
> method as usual -- without stopping the reactor.  The point of the reactor is
> that it takes care of managing multiple connections and the like at once.
>
> So, it's not "stop [the reactor] , re-create ClientCreator, then call
> reactor.run() to send the message", it's just "re-create ClientCreator".  It may
> even be just "call connectTCP on your existing ClientCreator again."
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From andrew-twisted at puzzling.org  Thu Dec  1 20:57:51 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 2 Dec 2005 14:57:51 +1100
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
Message-ID: <20051202035751.GA20951@home.puzzling.org>

On Fri, Dec 02, 2005 at 11:42:49AM +0800, Xu Ryan wrote:
> Would you like show me an simple example about this? I wrote one, but
> it dosn't work.

Sure.  Thanks for taking the time to write a simple demonstration of your
problem, it makes it much easier to understand and discuss!

> __sender = None
> 
> class p(Protocol):
>     def connectionMade(self):
>         print "Connecttion make"
> 
>     def sendMessage(self):
>         self.transport.write("some message")
> 
>     def connectionLost(self, reason):
>         print "Lost, reason", reason
> 
> def sendCmd(addr, port, cmd, task, options = ""):
>     """Send Cmd to
>     """
>     global __sender
> 
>     __sender.connectTCP(addr, port).addCallback(send,\
>             cmd, task, options)
> 
> def send(p,cmd, task, options):
>     print "send"
>     p.sendMessage()
>     return p
> 
> def finishConnection(p):
>     print "lostConnection"
>     p.transport.loseConnection()
> 
> def initSendCommand():
>     global __sender
>     if not __sender:
>         __sender = ClientCreator(reactor, p)

This all looks ok (except for the unused 'finishConnection' function).

> if __name__ == "__main__":
>     def testSendMessage():
>         time.sleep(2)
>         sendCmd("localhost", 8009, "test send")
> 
>     initSendCommand()
>     thread.start_new_thread(testSendMessage, ())
>     reactor.run()

This is the problem.  There's two issues here. 

The first is that in general, a thread CANNOT call any Twisted functions
aside from reactor.callFromThread.  Twisted is not thread safe.  See
http://twistedmatrix.com/projects/core/documentation/howto/threading.html

The second, and more fundamental, is that threads are totally unnecessary for
this.

You can write that code block as:

if __name__ == "__main__":
    initSendCommand()
    reactor.callLater(2, sendCmd, "localhost", 8009, "test send")
    reactor.run()

-Andrew.




From jtanis at pycoder.org  Thu Dec  1 21:16:01 2005
From: jtanis at pycoder.org (James Tanis)
Date: Thu, 1 Dec 2005 23:16:01 -0500
Subject: [Twisted-Python] Help needed with SmartHostSMTPRelayingManager
Message-ID: <65dcde740512012016w53dc2817x3f161353e1240536@mail.gmail.com>

Right now I've got this SMTP server that I've slowly been piecing
together using Twisted 2.1. I was able to get everything working as
far as local delivery, but after adding a relaymanager.Queue the
server was able to receive and queue messages from a mail client as
well as deliver to local accounts. The problem comes in with
relaymanager.SmartHostSMTPRelayingManager. Here is the log with
traceback:

2005/12/01 21:24 EST [-] Log opened.
2005/12/01 21:24 EST [-] twistd 2.1.0 (/usr/local/bin/python 2.4.2) starting up
2005/12/01 21:24 EST [-] reactor class:
twisted.internet.selectreactor.SelectReactor
2005/12/01 21:24 EST [-] Loading ./h2smtp.py...
2005/12/01 21:24 EST [-] Set 71757_1133487291.33_0_138982188 waiting
2005/12/01 21:24 EST [-] Set 71757_1133487291.33_0_138982188 waiting
2005/12/01 21:24 EST [-] /etc/resolv.conf changed, reparsing
2005/12/01 21:24 EST [-] Resolver added ('24.197.160.17', 53) to server list
2005/12/01 21:24 EST [-] Resolver added ('24.197.160.18', 53) to server list
2005/12/01 21:24 EST [-] twisted.names.dns.DNSDatagramProtocol starting on 62457
2005/12/01 21:24 EST [-] Loaded.
2005/12/01 21:24 EST [-] twisted.mail.protocols.ESMTPFactory starting on 2500
2005/12/01 21:24 EST [-] Starting factory
<twisted.mail.protocols.ESMTPFactory instance at 0x85b04ec>
2005/12/01 21:24 EST [-] twisted.mail.protocols.POP3Factory starting on 1100
2005/12/01 21:24 EST [-] Starting factory
<twisted.mail.protocols.POP3Factory instance at 0x85b052c>
2005/12/01 21:24 EST [twisted.names.dns.DNSDatagramProtocol (UDP)]
Starting factory <twisted.mail.relaymanager.SMTPManagedRelayerFactory
instance at 0x85fff0c>
2005/12/01 21:24 EST [Uninitialized] Traceback (most recent call last):
         File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py",
line 58, in callWithLogger
           return callWithContext({"system": lp}, func, *args, **kw)
         File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py",
line 43, in callWithContext
           return context.call({ILogContext: newCtx}, func, *args, **kw)
         File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
line 59, in callWithContext
           return self.currentContext().callWithContext(ctx, func, *args, **kw)
         File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
line 37, in callWithContext
           return func(*args,**kw)
       --- <exception caught here> ---
         File "/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py",
line 139, in _doReadOrWrite
           why = getattr(selectable, method)()
         File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
line 542, in doConnect
           self._connectDone()
         File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
line 545, in _connectDone
           self.protocol = self.connector.buildProtocol(self.getPeer())
         File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py",
line 669, in buildProtocol
           return self.factory.buildProtocol(addr)
         File "/usr/local/lib/python2.4/site-packages/twisted/mail/relaymanager.py",
line 103, in buildProtocol
           protocol = self.protocol(self.messages, self.manager, *self.pArgs,
         File "/usr/local/lib/python2.4/site-packages/twisted/mail/relaymanager.py",
line 79, in __init__
           relay.SMTPRelayer.__init__(self, messages, *args, **kw)
         File "/usr/local/lib/python2.4/site-packages/twisted/mail/relay.py",
line 108, in __init__
           smtp.SMTPClient.__init__(self, *args, **kw)
       exceptions.TypeError: __init__() takes at least 2 arguments (1 given)

2005/12/01 21:24 EST [Uninitialized] Backing off on delivery of
['71757_1133487291.33_0_138982188']
2005/12/01 21:24 EST [Uninitialized] Stopping factory
<twisted.mail.relaymanager.SMTPManagedRelayerFactory instance at
0x85fff0c>

>From what I can tell smtp.SMTPClient isn't getting passed identity.
Since this error is generated with a call to the relaying manager's
.checkState(self) function which only takes self as a argument.. well
lets just say I can't figure out what I'm missing from my own tracing
through the code in the relay/relaymanager/smtp modules. You should
find my code attached, the error should be easily reproducible if you
want to run it.

--
James Tanis
jtanis at pycoder.org
http://pycoder.org
-------------- next part --------------
# Horizon/2 SMTP implementation
# Copyright (c) 2005-2006 James Tanis
# -----

#Permission is hereby granted, free of charge, to any person obtaining a copy of
#this software and associated documentation files (the "Software"), to deal in
#the Software without restriction, including without limitation the rights to
#use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
#of the Software, and to permit persons to whom the Software is furnished to do
#so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE


import os
import os.path
from twisted.application import internet
from twisted.application import service
from twisted.cred import checkers
from twisted.cred import credentials
from twisted.cred import portal
from twisted.internet import defer
from twisted.mail import mail
from twisted.mail import maildir
from twisted.mail import relaymanager
from twisted.mail import relay
from twisted.mail import smtp
from twisted.mail import protocols
from twisted.mail.protocols import SMTPDomainDelivery
from twisted.persisted import dirdbm
from zope.interface import implements

appname = 'Horizon/2-SMTP'
smtp.DNSNAME = 'pycoder.org'

class ESMTPDelivery(protocols.ESMTPDomainDelivery):
    
    def __init__(self, service, user, dir):
	protocols.ESMTPDomainDelivery.__init__(self, service, user)
	self.root = dir
        self.service = service
	self.user = user	
	if not os.path.isdir(self.root):
	    raise ValueError, "'%s' does not exist" % dir
	
    def receivedHeader(self, helo, orgn, rcpts):
	date = smtp.rfc822date()
	msgid = smtp.messageid()
	tmp_rcpts = ''
        for rcpt in rcpts:
            tmp_rcpts += str(rcpt)+', '
        tmp_rcpts = tmp_rcpts[:-2]	    
	hdr = 'Received: from ' + helo[0] + ' (' + helo[1] + ')\n        by ' + smtp.DNSNAME + ' (' + appname + ') \n        id ' + msgid + '\n        for ' + tmp_rcpts + '; ' + date
        return hdr

    def validateFrom(self, helo, orgn):
	return orgn

    def validateTo(self, user):
        d = self.service.domains.get(user.dest.domain)
        if d == None:  
            d = relay.DomainQueuer(self.service, True)
        return defer.maybeDeferred(d.exists, user)

	
class Message:
    implements(smtp.IMessage)
    
    def __init__(self, domroot, user):         
        self.lines = []
	self.userdir = os.path.join(domroot, str(user.dest.local))
	if not os.path.exists(self.userdir): os.mkdir(self.userdir)
	self.mbox = maildir.MaildirMailbox(os.path.join(self.userdir, 'Inbox'))

    def lineReceived(self, line):         
        self.lines.append(line)         

    def eomReceived(self):
	self.lines.append('')
	body = '\n'.join(self.lines)
	return self.mbox.appendMessage(body)
	
    def connectionLost(self): 
        self.lines = None

class Domain:
    implements(mail.IDomain)
    def __init__(self, domroot):
	self.domroot = domroot
        if not os.path.exists(self.domroot): os.mkdir(self.domroot)	
	self.users = dirdbm.Shelf(os.path.join(self.domroot, 'smtpdb'))

    def createNewMessage(self, user):
        return Message(self.domroot, user) 

    def exists(self, user):
	if self.users.has_key(str(user.dest.local)):
	    msg = self.createNewMessage(user)
	    return lambda: msg
	else:
	    raise smtp.SMTPBadRcpt(str(user))

    def addUser(self, user, pword):
	self.users[str(user)] = pword
	
    def getCredentialsCheckers(self):
	return [checkers.AllowAnonymousAccess()]


class H2Service(service.MultiService):
    def __init__(self, root):
	service.MultiService.__init__(self)
        self.root = root
        self.domains = dirdbm.Shelf(os.path.join(self.root, 'h2db'))
        
        if not os.path.exists('/var/tmp/h2spool/queue'): os.mkdir('/var/tmp/h2spool/queue') 
        self.queue = relaymanager.Queue('/var/tmp/h2spool/queue')
        self.r = relaymanager.SmartHostSMTPRelayingManager(self.queue)
        #self.r.checkState()
    def requestAvatar(self, avatarId, mind, *interfaces):
        if smtp.IMessageDelivery in interfaces:
            a = ESMTPDelivery(self, avatarId, self.root)
            return smtp.IMessageDelivery, a, lambda: None
        raise NotImplementedError()   

def main():
    root = '/var/tmp/h2spool'
    m = H2Service(root)
    
    smtpd = protocols.ESMTPFactory(m, portal.Portal(m, [checkers.AllowAnonymousAccess()]))
    popd = protocols.POP3Factory(None)
     
    m.addService(internet.TCPServer(2500, smtpd))
    m.addService(internet.TCPServer(1100, popd))
    
    a = service.Application('Horizon/2')
    m.setServiceParent(a)
    m.r.checkState()
    return a

if __name__ == "__main__":
    from optparse import OptionParser 
    import sys

    root = '/var/tmp/h2spool'

    parser = OptionParser()
    parser.add_option('-d', '--domain', dest = 'domain', default = None, help = 'modify/add domain')
    parser.add_option('-u', '--user', dest = 'user', default = None, help = 'modify/add user, requires -d')
    parser.add_option('-p', '--password', dest = 'password', default = None, help = 'modify/set password, requires -d and -u')

    opts, args = parser.parse_args()
    if opts.domain != None and opts.user != None and opts.password != None:
        m = H2Service(root)
        d = m.domains[opts.domain] 
        d.addUser(opts.user, opts.password)
        m.domains[opts.domain] = d
        print d.users.keys()
 
    elif opts.domain != None and opts.user != None:
        pass
 
    elif opts.domain != None:
        m = H2Service(root)
        if not m.domains.has_key(opts.domain):
            d = Domain(os.path.join('/var/tmp/h2spool', opts.domain))
            m.domains[opts.domain] = d
        print m.domains.keys()

application = main()






From jtanis at pycoder.org  Thu Dec  1 21:39:22 2005
From: jtanis at pycoder.org (James Tanis)
Date: Thu, 1 Dec 2005 23:39:22 -0500
Subject: [Twisted-Python] Re: Help needed with SmartHostSMTPRelayingManager
In-Reply-To: <65dcde740512012016w53dc2817x3f161353e1240536@mail.gmail.com>
References: <65dcde740512012016w53dc2817x3f161353e1240536@mail.gmail.com>
Message-ID: <65dcde740512012039y3067ca57k5a91f57a5fe55266@mail.gmail.com>

Alright, I believe I answered my own question. I just need to override
relaymanager.SmartHostSMTPRelayingManager.__init__ and define
self.fArgs there to include the needed arguments.. correct? Just
wondering why this isn't included in the default __init__ if it's
required by the default SMTPClient.__init__

On 12/1/05, James Tanis <jtanis at pycoder.org> wrote:
> Right now I've got this SMTP server that I've slowly been piecing
> together using Twisted 2.1. I was able to get everything working as
> far as local delivery, but after adding a relaymanager.Queue the
> server was able to receive and queue messages from a mail client as
> well as deliver to local accounts. The problem comes in with
> relaymanager.SmartHostSMTPRelayingManager. Here is the log with
> traceback:
>
> 2005/12/01 21:24 EST [-] Log opened.
> 2005/12/01 21:24 EST [-] twistd 2.1.0 (/usr/local/bin/python 2.4.2) starting up
> 2005/12/01 21:24 EST [-] reactor class:
> twisted.internet.selectreactor.SelectReactor
> 2005/12/01 21:24 EST [-] Loading ./h2smtp.py...
> 2005/12/01 21:24 EST [-] Set 71757_1133487291.33_0_138982188 waiting
> 2005/12/01 21:24 EST [-] Set 71757_1133487291.33_0_138982188 waiting
> 2005/12/01 21:24 EST [-] /etc/resolv.conf changed, reparsing
> 2005/12/01 21:24 EST [-] Resolver added ('24.197.160.17', 53) to server list
> 2005/12/01 21:24 EST [-] Resolver added ('24.197.160.18', 53) to server list
> 2005/12/01 21:24 EST [-] twisted.names.dns.DNSDatagramProtocol starting on 62457
> 2005/12/01 21:24 EST [-] Loaded.
> 2005/12/01 21:24 EST [-] twisted.mail.protocols.ESMTPFactory starting on 2500
> 2005/12/01 21:24 EST [-] Starting factory
> <twisted.mail.protocols.ESMTPFactory instance at 0x85b04ec>
> 2005/12/01 21:24 EST [-] twisted.mail.protocols.POP3Factory starting on 1100
> 2005/12/01 21:24 EST [-] Starting factory
> <twisted.mail.protocols.POP3Factory instance at 0x85b052c>
> 2005/12/01 21:24 EST [twisted.names.dns.DNSDatagramProtocol (UDP)]
> Starting factory <twisted.mail.relaymanager.SMTPManagedRelayerFactory
> instance at 0x85fff0c>
> 2005/12/01 21:24 EST [Uninitialized] Traceback (most recent call last):
>          File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py",
> line 58, in callWithLogger
>            return callWithContext({"system": lp}, func, *args, **kw)
>          File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py",
> line 43, in callWithContext
>            return context.call({ILogContext: newCtx}, func, *args, **kw)
>          File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
> line 59, in callWithContext
>            return self.currentContext().callWithContext(ctx, func, *args, **kw)
>          File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
> line 37, in callWithContext
>            return func(*args,**kw)
>        --- <exception caught here> ---
>          File "/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py",
> line 139, in _doReadOrWrite
>            why = getattr(selectable, method)()
>          File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
> line 542, in doConnect
>            self._connectDone()
>          File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
> line 545, in _connectDone
>            self.protocol = self.connector.buildProtocol(self.getPeer())
>          File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py",
> line 669, in buildProtocol
>            return self.factory.buildProtocol(addr)
>          File "/usr/local/lib/python2.4/site-packages/twisted/mail/relaymanager.py",
> line 103, in buildProtocol
>            protocol = self.protocol(self.messages, self.manager, *self.pArgs,
>          File "/usr/local/lib/python2.4/site-packages/twisted/mail/relaymanager.py",
> line 79, in __init__
>            relay.SMTPRelayer.__init__(self, messages, *args, **kw)
>          File "/usr/local/lib/python2.4/site-packages/twisted/mail/relay.py",
> line 108, in __init__
>            smtp.SMTPClient.__init__(self, *args, **kw)
>        exceptions.TypeError: __init__() takes at least 2 arguments (1 given)
>
> 2005/12/01 21:24 EST [Uninitialized] Backing off on delivery of
> ['71757_1133487291.33_0_138982188']
> 2005/12/01 21:24 EST [Uninitialized] Stopping factory
> <twisted.mail.relaymanager.SMTPManagedRelayerFactory instance at
> 0x85fff0c>
>
> From what I can tell smtp.SMTPClient isn't getting passed identity.
> Since this error is generated with a call to the relaying manager's
> .checkState(self) function which only takes self as a argument.. well
> lets just say I can't figure out what I'm missing from my own tracing
> through the code in the relay/relaymanager/smtp modules. You should
> find my code attached, the error should be easily reproducible if you
> want to run it.
>
> --
> James Tanis
> jtanis at pycoder.org
> http://pycoder.org
>
>
>


--
James Tanis
jtanis at pycoder.org
http://pycoder.org



From xuryans at gmail.com  Thu Dec  1 22:44:06 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Fri, 2 Dec 2005 13:44:06 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051202035751.GA20951@home.puzzling.org>
References: <f6c194d30511292319n2e83c27dxe5d7cd4307c04c14@mail.gmail.com>
	<20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
Message-ID: <f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>

I use the thread to make the sendCmd be called after the reactor run.
Because in the real application, I should start the server(reactor)
first, and other logic will call the sendCmd, so I can't fix it before
reactor.run() (as callLater(foo)). What should I do ?

On 12/2/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> On Fri, Dec 02, 2005 at 11:42:49AM +0800, Xu Ryan wrote:
> > Would you like show me an simple example about this? I wrote one, but
> > it dosn't work.
>
> Sure.  Thanks for taking the time to write a simple demonstration of your
> problem, it makes it much easier to understand and discuss!
>
> > __sender = None
> >
> > class p(Protocol):
> >     def connectionMade(self):
> >         print "Connecttion make"
> >
> >     def sendMessage(self):
> >         self.transport.write("some message")
> >
> >     def connectionLost(self, reason):
> >         print "Lost, reason", reason
> >
> > def sendCmd(addr, port, cmd, task, options = ""):
> >     """Send Cmd to
> >     """
> >     global __sender
> >
> >     __sender.connectTCP(addr, port).addCallback(send,\
> >             cmd, task, options)
> >
> > def send(p,cmd, task, options):
> >     print "send"
> >     p.sendMessage()
> >     return p
> >
> > def finishConnection(p):
> >     print "lostConnection"
> >     p.transport.loseConnection()
> >
> > def initSendCommand():
> >     global __sender
> >     if not __sender:
> >         __sender = ClientCreator(reactor, p)
>
> This all looks ok (except for the unused 'finishConnection' function).
>
> > if __name__ == "__main__":
> >     def testSendMessage():
> >         time.sleep(2)
> >         sendCmd("localhost", 8009, "test send")
> >
> >     initSendCommand()
> >     thread.start_new_thread(testSendMessage, ())
> >     reactor.run()
>
> This is the problem.  There's two issues here.
>
> The first is that in general, a thread CANNOT call any Twisted functions
> aside from reactor.callFromThread.  Twisted is not thread safe.  See
> http://twistedmatrix.com/projects/core/documentation/howto/threading.html
>
> The second, and more fundamental, is that threads are totally unnecessary for
> this.
>
> You can write that code block as:
>
> if __name__ == "__main__":
>     initSendCommand()
>     reactor.callLater(2, sendCmd, "localhost", 8009, "test send")
>     reactor.run()
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From andrew-twisted at puzzling.org  Thu Dec  1 22:53:51 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 2 Dec 2005 16:53:51 +1100
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
References: <20051130113637.GP18323@home.puzzling.org>
	<f6c194d30511301835h66cccab7g44f5dc2e8bb2290a@mail.gmail.com>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
	<f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
Message-ID: <20051202055351.GC20951@home.puzzling.org>

On Fri, Dec 02, 2005 at 01:44:06PM +0800, Xu Ryan wrote:
> I use the thread to make the sendCmd be called after the reactor run.
> Because in the real application, I should start the server(reactor)
> first, and other logic will call the sendCmd, so I can't fix it before
> reactor.run() (as callLater(foo)). What should I do ?

It's hard to know what you need here.  Can you elaborate more on this "other
logic"?

Note though that the callLater will also "make the sendCmd be called after the
reactor run" -- although a clearer phrasing would be "make the sendCmd be called
after the reactor starts", so I don't understand why it is inappropriate for
you.

Also, saying "the server(reactor)" suggests to me that you misunderstand the
role of the reactor.  The reactor isn't your server; it's the event loop that
runs all the networking Twisted does, servers, clients, whatever.  You don't
want to stop and start it for each task, or have a seperate one for each task,
it's a single object that handles the events that occur (like sockets receiving
data) and dispatching them to the right object.

-Andrew.




From xuryans at gmail.com  Thu Dec  1 23:44:17 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Fri, 2 Dec 2005 14:44:17 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051202055351.GC20951@home.puzzling.org>
References: <20051130113637.GP18323@home.puzzling.org>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
	<f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
	<20051202055351.GC20951@home.puzzling.org>
Message-ID: <f6c194d30512012244m7e240b33w60ac9722ce68421e@mail.gmail.com>

I have a master machine ,that will control hundreds remote
servers(agent). It will send authenticate and command message to
remote agent. The master will run months. And I can't sure which
command will be sent, and when it will be sent. So I cann't write it
in codes as "reactor.callLater" then "reactor.run()".

I need sth like a task pool, I can push a command into it in anytime,
and the pool will send out the command immediately. Those commands
will be send to different agent.

The "other logic" is "pushing commands into the pool". It's unsure
before running.
>
> It's hard to know what you need here.  Can you elaborate more on this "other
> logic"?
>
> Note though that the callLater will also "make the sendCmd be called after the
> reactor run" -- although a clearer phrasing would be "make the sendCmd be called
> after the reactor starts", so I don't understand why it is inappropriate for
> you.
>
> Also, saying "the server(reactor)" suggests to me that you misunderstand the
> role of the reactor.  The reactor isn't your server; it's the event loop that
> runs all the networking Twisted does, servers, clients, whatever.  You don't
> want to stop and start it for each task, or have a seperate one for each task,
> it's a single object that handles the events that occur (like sockets receiving
> data) and dispatching them to the right object.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From xuryans at gmail.com  Thu Dec  1 23:47:12 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Fri, 2 Dec 2005 14:47:12 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051202055351.GC20951@home.puzzling.org>
References: <20051130113637.GP18323@home.puzzling.org>
	<20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
	<f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
	<20051202055351.GC20951@home.puzzling.org>
Message-ID: <f6c194d30512012247s15462b4fw5a35b7b56e1abd58@mail.gmail.com>

As you saying, reactor handles the events. Can i register new event
after the event loop running?

On 12/2/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> On Fri, Dec 02, 2005 at 01:44:06PM +0800, Xu Ryan wrote:
> > I use the thread to make the sendCmd be called after the reactor run.
> > Because in the real application, I should start the server(reactor)
> > first, and other logic will call the sendCmd, so I can't fix it before
> > reactor.run() (as callLater(foo)). What should I do ?
>
> It's hard to know what you need here.  Can you elaborate more on this "other
> logic"?
>
> Note though that the callLater will also "make the sendCmd be called after the
> reactor run" -- although a clearer phrasing would be "make the sendCmd be called
> after the reactor starts", so I don't understand why it is inappropriate for
> you.
>
> Also, saying "the server(reactor)" suggests to me that you misunderstand the
> role of the reactor.  The reactor isn't your server; it's the event loop that
> runs all the networking Twisted does, servers, clients, whatever.  You don't
> want to stop and start it for each task, or have a seperate one for each task,
> it's a single object that handles the events that occur (like sockets receiving
> data) and dispatching them to the right object.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From andrew-twisted at puzzling.org  Fri Dec  2 00:10:52 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 2 Dec 2005 18:10:52 +1100
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30512012247s15462b4fw5a35b7b56e1abd58@mail.gmail.com>
References: <20051201070607.GS18323@home.puzzling.org>
	<f6c194d30512010022m46976827v6d45c4a08c0b0209@mail.gmail.com>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
	<f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
	<20051202055351.GC20951@home.puzzling.org>
	<f6c194d30512012247s15462b4fw5a35b7b56e1abd58@mail.gmail.com>
Message-ID: <20051202071052.GD20951@home.puzzling.org>

On Fri, Dec 02, 2005 at 02:47:12PM +0800, Xu Ryan wrote:
> As you saying, reactor handles the events. Can i register new event
> after the event loop running?

Absolutely.  You can, for instance, call connectTCP as many times as you like
while the event loop is running to establish multiple client connections, which
may be concurrent.

You can call listenTCP at any time too, if during the course of running the code
needs to start listening on another TCP port.

And so on.  Most of the reactor methods can be called while the reactor is
running, with a couple of obvious exceptions (e.g. you can't call reactor.run).

Many of the other actions you can take in a Twisted program, like writing to or
disconnecting a transport, are also at some level instructing the reactor to do
something, and again this happens inside the event loop.

-Andrew.




From xuryans at gmail.com  Fri Dec  2 00:25:48 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Fri, 2 Dec 2005 15:25:48 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051202071052.GD20951@home.puzzling.org>
References: <20051201070607.GS18323@home.puzzling.org>
	<20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
	<f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
	<20051202055351.GC20951@home.puzzling.org>
	<f6c194d30512012247s15462b4fw5a35b7b56e1abd58@mail.gmail.com>
	<20051202071052.GD20951@home.puzzling.org>
Message-ID: <f6c194d30512012325lcaa50b8n4c91bf1b0c9fad23@mail.gmail.com>

But when reactor.run() is called, the program lock here. and the codes
after "reactor.run()" are not been called until reactor is stop.

On 12/2/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> On Fri, Dec 02, 2005 at 02:47:12PM +0800, Xu Ryan wrote:
> > As you saying, reactor handles the events. Can i register new event
> > after the event loop running?
>
> Absolutely.  You can, for instance, call connectTCP as many times as you like
> while the event loop is running to establish multiple client connections, which
> may be concurrent.
>
> You can call listenTCP at any time too, if during the course of running the code
> needs to start listening on another TCP port.
>
> And so on.  Most of the reactor methods can be called while the reactor is
> running, with a couple of obvious exceptions (e.g. you can't call reactor.run).
>
> Many of the other actions you can take in a Twisted program, like writing to or
> disconnecting a transport, are also at some level instructing the reactor to do
> something, and again this happens inside the event loop.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From andrew-twisted at puzzling.org  Fri Dec  2 00:52:49 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 2 Dec 2005 18:52:49 +1100
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <f6c194d30512012325lcaa50b8n4c91bf1b0c9fad23@mail.gmail.com>
References: <20051201084503.GT18323@home.puzzling.org>
	<f6c194d30512010148q49485a4axe1bea7064ceeb65b@mail.gmail.com>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
	<f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
	<20051202055351.GC20951@home.puzzling.org>
	<f6c194d30512012247s15462b4fw5a35b7b56e1abd58@mail.gmail.com>
	<20051202071052.GD20951@home.puzzling.org>
	<f6c194d30512012325lcaa50b8n4c91bf1b0c9fad23@mail.gmail.com>
Message-ID: <20051202075249.GE20951@home.puzzling.org>

On Fri, Dec 02, 2005 at 03:25:48PM +0800, Xu Ryan wrote:
> But when reactor.run() is called, the program lock here. and the codes
> after "reactor.run()" are not been called until reactor is stop.

Right.  You generally don't want to have any code after reactor.run().  The idea
is to react to events that occur, like receiving messages off the network.

For example, if you want to make a new connection while the reactor is running,
you do that from within an event handler.

There's some examples of this in Twisted, e.g. look at
twisted/protocols/portforward.py
(http://svn.twistedmatrix.com/cvs/trunk/twisted/protocols/portforward.py?view=auto&rev=12914).
An example of using this module would be:

    from twisted.internet import reactor
    from twisted.protocols.portforward import ProxyFactory
    reactor.listenTCP(1234, ProxyFactory('somewhere.com', 5678))
    reactor.run()

If you run that it will start listening on port 1234, and do nothing else until
you connect to that port.  As soon as a connection is established, a ProxyServer
protocol is made, and its connectionMade handler will call reactor.connectTCP to
establish a connection to somewhere.com's port 5678.

Here's another example of making new connections in response to events that
occur while the program is running.  You may find it simpler to understand,
although I haven't tested it so there may be bugs, and it has essentially no
error handling...:

----
from twisted.protocols import basic
from twisted.internet import reactor, protocol

class MessageReceiver(basic.LineReceiver):
    def lineReceived(self, line):
        # expects lines like "host.somewhere.com 1234 here's a message".
        host, port, message = line.split(' ', 2)
        sendMessage(host, port, message)

class MessageSender(protocol.Protocol):
    def __init__(self, message):
        self.message = message

    def connectionMade(self):
        # send the message
        self.transport.write(message)
        # close the connection
        self.transport.loseConnection()

def sendMessage(host, port, message):
    cc = protocol.ClientCreator(reactor, MessageSender, message)
    cc.connectTCP(host, port)

f = protocol.ServerFactory()
f.protocol = MessageReceiver
reactor.listenTCP(1234, f)
reactor.run()
----

You may also want to work through the finger tutorial -- it's a bit long, but it
does cover this sort of thing.

-Andrew.




From xuryans at gmail.com  Fri Dec  2 03:02:09 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Fri, 2 Dec 2005 18:02:09 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <20051202075249.GE20951@home.puzzling.org>
References: <20051201084503.GT18323@home.puzzling.org>
	<20051201095935.GW18323@home.puzzling.org>
	<f6c194d30512011942u1a54a1ado6ed3d3ba9983b6e@mail.gmail.com>
	<20051202035751.GA20951@home.puzzling.org>
	<f6c194d30512012144r41baa899xd30aa7dd462184f3@mail.gmail.com>
	<20051202055351.GC20951@home.puzzling.org>
	<f6c194d30512012247s15462b4fw5a35b7b56e1abd58@mail.gmail.com>
	<20051202071052.GD20951@home.puzzling.org>
	<f6c194d30512012325lcaa50b8n4c91bf1b0c9fad23@mail.gmail.com>
	<20051202075249.GE20951@home.puzzling.org>
Message-ID: <f6c194d30512020202k2395f60eh911e58c2bc781940@mail.gmail.com>

Thank you for you patient:)

The codes below seems have other problems:
1. one port bind one Proxy. And the proxy is also fixed before reactor run.
2. Should use other method make connect with localhost.
Perhaps it make my problem complicated.

I think i should make a schedule and check the command list, if it's
not empty, send the commands in the list. twisted has some module like
that, i rememberd.

> An example of using this module would be
>
>     from twisted.internet import reactor
>     from twisted.protocols.portforward import ProxyFactory
>     reactor.listenTCP(1234, ProxyFactory('somewhere.com', 5678))
>     reactor.run()
>
> If you run that it will start listening on port 1234, and do nothing else until
> you connect to that port.  As soon as a connection is established, a ProxyServer
> protocol is made, and its connectionMade handler will call reactor.connectTCP to
> establish a connection to somewhere.com's port 5678.
>
> Here's another example of making new connections in response to events that
> occur while the program is running.  You may find it simpler to understand,
> although I haven't tested it so there may be bugs, and it has essentially no
> error handling...:
>
> ----
> from twisted.protocols import basic
> from twisted.internet import reactor, protocol
>
> class MessageReceiver(basic.LineReceiver):
>     def lineReceived(self, line):
>         # expects lines like "host.somewhere.com 1234 here's a message".
>         host, port, message = line.split(' ', 2)
>         sendMessage(host, port, message)
>
> class MessageSender(protocol.Protocol):
>     def __init__(self, message):
>         self.message = message
>
>     def connectionMade(self):
>         # send the message
>         self.transport.write(message)
>         # close the connection
>         self.transport.loseConnection()
>
> def sendMessage(host, port, message):
>     cc = protocol.ClientCreator(reactor, MessageSender, message)
>     cc.connectTCP(host, port)
>
> f = protocol.ServerFactory()
> f.protocol = MessageReceiver
> reactor.listenTCP(1234, f)
> reactor.run()
> ----
>
> You may also want to work through the finger tutorial -- it's a bit long, but it
> does cover this sort of thing.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--
Xu Ryans



From doug at isotoma.com  Fri Dec  2 03:07:17 2005
From: doug at isotoma.com (Doug Winter)
Date: Fri, 02 Dec 2005 10:07:17 +0000
Subject: [Twisted-Python] Non-terminating Process using gtkreactor2
Message-ID: <43901CD5.1010008@isotoma.com>


I have a GTK program using twisted 2.1.0 and python 2.4.  On both Linux 
and Windows the program reliably fails to terminate after calling 
gtk.main_quit() and reactor.stop().  It just sits there.  All the 
windows close, but the process remains running.

It will terminate happily if the program has merely been run, but if 
"things" have happened, the program refuses to die.  I am guessing that 
this is because there are deferreds loitering around unfired, or some 
GTK resources remain that refuse to die.

To kill the process after this, it must be sent a KILL signal, TERM is 
not sufficient.  On windows it can be killed in the Task Manager 
processes tab.

I admit I am at a loss as to how to debug this - can someone give me 
some pointers to diagnostics I can try to find out what the problem is?

Cheers,

Doug.

-- 
doug at isotoma.com   / Isotoma, Open Source Software Consulting
Tel: 020 7620 1446 / Mobile: 07879 423002 / Fax: 020 79006980
Skype: dougwinter  / http://www.isotoma.com
Lincoln House, 75 Westminster Bridge Road, London, SE1 7HS



From amcouper at gmail.com  Fri Dec  2 07:28:32 2005
From: amcouper at gmail.com (Alex Couper)
Date: Fri, 2 Dec 2005 14:28:32 +0000
Subject: [Twisted-Python] Non-list expression received,
	'Server' object has no attribute 'socket'
Message-ID: <a8fa98110512020628u78d9d9b4nf9c4746450d37cb4@mail.gmail.com>

I have an application that requires each node using it to update each other,
and to fetch updates automatically. Each node, therefore, has a server and a
client on it.
I am receiving different errors each time I run the program, and they are
coming from within the twisted packages, (shown below)

Error 1:
  File "C:\Python24\lib\site-packages\twisted\internet\tcp.py", line 89, in
_closeSocket
    skt = self.socket
exceptions.AttributeError: 'Server' object has no attribute 'socket'

Error 2:
  File "C:\Python24\lib\site-packages\twisted\spread\pb.py", line 572, in
expressionReceived
    raise ProtocolError("Non-list expression received.")
twisted.spread.pb.ProtocolError: Non-list expression received.


I suspect that they are caused by the way that I am running my server. On
occasion, reactor.run() finishes, and thus there is no longer a server
running in effect. I therefore use a while loop to always be running the
server. The server is launched as a thread.

def run(self):
        while 1:
            application = service.Application("copy_receiver")
            internet.TCPServer(8800, pb.PBServerFactory
(self)).setServiceParent(
                service.IServiceCollection(application))
            self.listener = reactor.listenTCP(8800, pb.PBServerFactory
(self))

            #installSignalHandlers=0 allows the reactor to run in a non-main
thread
            reactor.run(installSignalHandlers=0)

Is this known to cause problems? If not, any ideas of why i might be getting
the error messages? or any ideas how I can keep the server running so that
it doesn't exit?


Alex Couper
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051202/0c98c4c7/attachment.html>

From moe at divmod.com  Fri Dec  2 08:16:35 2005
From: moe at divmod.com (Moe Aboulkheir)
Date: Fri, 2 Dec 2005 17:16:35 +0200
Subject: [Twisted-Python] Non-terminating Process using gtkreactor2
In-Reply-To: <43901CD5.1010008@isotoma.com>
Message-ID: <20051202151635.1217.78844231.divmod.quotient.2764@ohm>

On Fri, 02 Dec 2005 10:07:17 +0000, Doug Winter <doug at isotoma.com> wrote:
>
>I have a GTK program using twisted 2.1.0 and python 2.4.  On both Linux and 
>Windows the program reliably fails to terminate after calling 
>gtk.main_quit() and reactor.stop().  It just sits there.  All the windows 
>close, but the process remains running.

AFAICT the twisted example pbgtk2.py seems to do the wrong thing here, and it too freezes up when the destroy handler of the login window is called.  if you call reactor.stop(), rather than gtk.main_quit() (assuming the gtk2reactor is installed) then your program will terminate normally.



From itamar at itamarst.org  Fri Dec  2 09:41:01 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 02 Dec 2005 11:41:01 -0500
Subject: [Twisted-Python] Non-list expression received, 'Server' object
	has no attribute 'socket'
In-Reply-To: <a8fa98110512020628u78d9d9b4nf9c4746450d37cb4@mail.gmail.com>
References: <a8fa98110512020628u78d9d9b4nf9c4746450d37cb4@mail.gmail.com>
Message-ID: <1133541661.9188.5.camel@localhost.localdomain>

On Fri, 2005-12-02 at 14:28 +0000, Alex Couper wrote:

> def run(self):  
>         while 1:
>             application = service.Application("copy_receiver")
>             internet.TCPServer(8800,
> pb.PBServerFactory(self)).setServiceParent(
>                 service.IServiceCollection(application))      
>             self.listener = reactor.listenTCP(8800,
> pb.PBServerFactory(self))
>             
>             #installSignalHandlers=0 allows the reactor to run in a
> non-main thread 
>             reactor.run(installSignalHandlers=0)
>           

This is wrong. You can only call reactor.run() *once* in your program's
lifetime. reactor.run() only exits when someone calls reactor.stop();
since you don't want it to finish, don't call reactor.stop() until you
need it to.





From doug at isotoma.com  Fri Dec  2 11:32:14 2005
From: doug at isotoma.com (Doug Winter)
Date: Fri, 02 Dec 2005 18:32:14 +0000
Subject: [Twisted-Python] Non-terminating Process using gtkreactor2
In-Reply-To: <20051202151635.1217.78844231.divmod.quotient.2764@ohm>
References: <20051202151635.1217.78844231.divmod.quotient.2764@ohm>
Message-ID: <4390932E.5040804@isotoma.com>

Moe Aboulkheir wrote:
> On Fri, 02 Dec 2005 10:07:17 +0000, Doug Winter <doug at isotoma.com> wrote:
>> I have a GTK program using twisted 2.1.0 and python 2.4.  On both 
>> Linux and Windows the program reliably fails to terminate after 
>> calling gtk.main_quit() and reactor.stop().  It just sits there.  All 
>> the windows close, but the process remains running.
> 
> AFAICT the twisted example pbgtk2.py seems to do the wrong thing here, 
> and it too freezes up when the destroy handler of the login window is 
> called.  if you call reactor.stop(), rather than gtk.main_quit() 
> (assuming the gtk2reactor is installed) then your program will terminate 
> normally.

Great, that's fixed it.  Thanks!

doug.

-- 
doug at isotoma.com   / Isotoma, Open Source Software Consulting
Tel: 020 7620 1446 / Mobile: 07879 423002 / Fax: 020 79006980
Skype: dougwinter  / http://www.isotoma.com
Lincoln House, 75 Westminster Bridge Road, London, SE1 7HS



From william.lewis at uk.bnpparibas.com  Fri Dec  2 11:33:58 2005
From: william.lewis at uk.bnpparibas.com (william.lewis at uk.bnpparibas.com)
Date: Fri, 2 Dec 2005 18:33:58 +0000
Subject: [Twisted-Python] pb references
Message-ID: <OFBB460905.BC9C9458-ON802570CB.006587B6-802570CB.0065FCC2@bnpparibas.com>

Hi

I am trying to call a remote method on a client from a server using a 
reference that has been given to the server by the client.

I am trying to do this in the way described in your "References to 
Client-side objects" documentation.
However, I keep getting the following error: "Can't send references to 
brokers other than their own." and I can't see why.

Any help with this error would be greatly appreciated.




This message and any attachments (the "message") is 
intended solely for the addressees and is confidential. 
If you receive this message in error, please delete it and
immediately notify the sender. Any use not in accord with
its purpose, any dissemination or disclosure, either whole
or partial, is prohibited except formal approval. The internet
can not guarantee the integrity of this message.
BNP PARIBAS (and its subsidiaries) shall (will) not
therefore be liable for the message if modified. 

**********************************************************************************************

BNP Paribas Private Bank London Branch is authorised
by CECEI & AMF and is regulated by the Financial Services
Authority for the conduct of its investment business in
the United Kingdom.

BNP Paribas Securities Services London Branch is authorised 
by CECEI & AMF and is regulated by the Financial Services 
Authority for the conduct of its investment business in 
the United Kingdom.
  
BNP Paribas Fund Services UK Limited is authorised and 
regulated by the Financial Services Authority

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051202/0fc93aae/attachment.html>

From 7hs at muchan.org  Sat Dec  3 11:38:14 2005
From: 7hs at muchan.org (Seventh Holy Scripture)
Date: Sat, 3 Dec 2005 10:38:14 -0800
Subject: [Twisted-Python] Twisted Words: throttling server output
Message-ID: <D3EC1AC1-44EC-4BA4-9559-5871C22BF044@muchan.org>

I've been writing an IRC bot using Twisted Words, and am having  
difficulty keeping it from flooding itself off the server. Currently  
my output subroutines look like this:

     def queueMsg(self, channel, msg):
         self.chanQueue.append(channel)
         self.msgQueue.append(msg)

     def emptyMsgQueue(self):
         for msg in self.msgQueue:
             channel = self.chanQueue.pop(0)
             self.msg(channel, msg)
             if channel[0] == "#":
                 self.logger.log("<%s> %s" % (self.nickname, msg))
             time.sleep(0.5)
         self.msgQueue = []

This ought to work as far as I know... but the bot waits until after  
all the sleep statements have executed to spew the output to the IRC  
server, which (if there's a lot of it) results in a forced disconnect  
due to "Excess Flood". What am I doing wrong here? My guess is that  
twisted has its own message queue, and waits until after all host  
program subroutines have ended to process it... I'm not good at  
python, though, so it could be a stupid mistake on my part.

In any case, is there another way to introduce a delay between the  
messages sent to server that will work?



From exarkun at divmod.com  Sat Dec  3 12:40:00 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 3 Dec 2005 14:40:00 -0500
Subject: [Twisted-Python] Twisted Words: throttling server output
In-Reply-To: <D3EC1AC1-44EC-4BA4-9559-5871C22BF044@muchan.org>
Message-ID: <20051203194000.1217.2132745081.divmod.quotient.2938@ohm>

On Sat, 3 Dec 2005 10:38:14 -0800, Seventh Holy Scripture <7hs at muchan.org> wrote:
>I've been writing an IRC bot using Twisted Words, and am having  difficulty 
>keeping it from flooding itself off the server. Currently  my output 
>subroutines look like this:
>
>     def queueMsg(self, channel, msg):
>         self.chanQueue.append(channel)
>         self.msgQueue.append(msg)
>
>     def emptyMsgQueue(self):
>         for msg in self.msgQueue:
>             channel = self.chanQueue.pop(0)
>             self.msg(channel, msg)
>             if channel[0] == "#":
>                 self.logger.log("<%s> %s" % (self.nickname, msg))
>             time.sleep(0.5)
>         self.msgQueue = []

The time.sleep() call blocks the entire reactor thread.  Eventually, 
the loop exits, the reactor regains control of program flow, notices 
a huge pile of messages in the IRC connection's output buffer, and 
sends them all as fast as it can.  Woops. :)

Take a look at reactor.callLater() or twisted.internet.task.LoopingCall().
These will let you schedule events to happen at particular times without 
blocking the reactor, and thus allowing each message to be sent at a 
reasonable time.

Jean-Paul



From mwh at python.net  Sat Dec  3 13:54:39 2005
From: mwh at python.net (Michael Hudson)
Date: Sat, 03 Dec 2005 20:54:39 +0000
Subject: [Twisted-Python] Re: Twisted Words: throttling server output
References: <D3EC1AC1-44EC-4BA4-9559-5871C22BF044@muchan.org>
Message-ID: <2m8xv1c35c.fsf@starship.python.net>

Seventh Holy Scripture <7hs at muchan.org> writes:

> In any case, is there another way to introduce a delay between the
> messages sent to server that will work?

Are you aware of the 'lineRate' variable on irc.IRCClient?

Cheers,
mwh

-- 
  I have a feeling that any simple problem can be made arbitrarily
  difficult by imposing a suitably heavy administrative process
  around the development.       -- Joe Armstrong, comp.lang.functional




From kwhitesell at adelphia.net  Sat Dec  3 14:24:07 2005
From: kwhitesell at adelphia.net (Ken Whitesell)
Date: Sat, 03 Dec 2005 16:24:07 -0500
Subject: [Twisted-Python] Request for ideas
Message-ID: <43920CF7.8030204@adelphia.net>

Warning - fairly long post follows for what I hope is a simple question 
that only needs (possibly) a short answer. (I'm not looking for any 
code, just one of a couple possible ideas.)

Environment: A LAN with a server and multiple PCs. Full control is 
available over all the PCs. I have the ability to run whatever I want on 
each - in this case it means Python 2.4 / Twisted 2.

Background / Use Case: Imagine a simultaneous silent auction. (More like 
an RFP-type situation.) Any of the PCs can put an item up for bid. Other 
PCs can respond (or ignore!) that item. There are two timeout 
requirements - an "acknowledgement" timeout, where the PC has a certain 
period of time to respond "I want to make a bid", and a response timeout 
that restricts the clients to how much time they have to make the bid. 
These timeouts can change depending on the item going up for bid.
(How and 'what' goes up for bid is irrelevant to my question.)

What I've done so far: I've created a class called "CommTrans" to manage 
the auction. Each time an item goes up for bid, an instance of CommTrans 
is created.

CommTrans creates two objects, one each to manage the acknowlegements 
and the other to manage the replies (AckMgr, RepMgr). The RepMgr is a 
Viewable that can be called by the client to submit its bid. (RepMgr is 
passed to the client in the callRemote call.)

CommTrans issues the callRemote, passing RepMgr to the client. Then it 
sets a function in the AckMgr as the callback.

The client receives the request, and decides whether or not to respond 
to the request. If yes, it issues a callLater on the function to 
determine the bid and submit it to the RepMgr. Either way, the original 
function returns either "Yes" or "No", triggering the callback on the 
CommTrans.

Both the AckMgr and RepMgr issue callLater to schedule the timeout. If 
all possible machines reply before the timeout occurs, the timeout is 
cancelled. If the timeout occurs first, a flag is set to have the 
objects reject all further information from the clients. (It's simply 
ignored, nothing special occurs.)

QUESTION #1: Did I miss something in the Twisted API that would handle 
this type of situation? I don't think a Deferred list would work in this 
situation, because it's not going to fire until all deferrs complete - 
something which might not occur.

But this isn't the problem - the code that I have written for these 
functions all work.

The specific problem occurs when objects are reused. I've had situations 
where a client fails to reply for significantly longer than the timeout 
period. In that interval, the original CommTrans, AckMgr and RepMgr have 
been deleted and replaced by new instances. The client finally replies 
to the original request, and the reply is caught by those new objects!
(There is what I think is a very small, but non-zero probability that 
I'm misinterpreting what I'm seeing.)

 From what I can see in the source code, the internal ID is what's set 
by the builtin 'id' function. I'm printing these at key times and I can 
see where they're being duplicated. The only time I see this problem 
occur is when a new object has been created with the same id as a 
previous object.

So this leads me to QUESTION #2: Anyone have ideas on how to resolve 
this? (Note: I can't channel everything through a single CommTrans 
object, because multiple bids might be happening concurrently with 
overlapping timeouts.)

About the only thought I've had so far is to generate a GUID-like object 
for each CommTrans, and include that in every communication to and from 
the clients. The server would check each ack and each reply to ensure 
that the ack and reply are for the proper auction.

Sending another message to the client isn't going to be a good solution, 
because the client might be tied up doing other things - starving the 
reactor - so by the time the message is processed, it may be too late.

This also brings up QUESTION #3, although it hasn't happened yet: Server
does a callRemote to the client from a commTrans object. Before the 
remote function returns (client is _extremely_ busy) the commTrans 
object goes away. What will happen when the function exits? (I know, I 
ought to generate a test-case for this - I'm more wondering if anyone 
knows right off-hand.)

All thoughts, ideas, comments, recommendations are encouraged. Thanks to 
any/everyone who managed to get this far through my writing.

Finally, I'm most pleased to announce that my proposal to provide a 
"Getting Started with Twisted" tutorial at PyCon has been accepted! I 
know I can't turn people into Twisted gurus in 3 hours, but I hope I can 
get a few over that initial hurdle.

Thanks,
	Ken




From frank at chagford.com  Sun Dec  4 04:33:23 2005
From: frank at chagford.com (Frank Millman)
Date: Sun, 4 Dec 2005 13:33:23 +0200
Subject: [Twisted-Python] Question on deferreds
Message-ID: <20051204112834.962643F4366@fcserver.chagford.com>

Hi all,

I am trying to convert my app to use Twisted. The original version handles a
gui, some business logic, and a database connection, all in one program. I
have split it into a 'client' program, that handles the gui; and a server
program, that handles the business logic and the database connection, and
communicates with the client using pb.

The original program has some logic to validate user input. The data to be
validated is passed up through 3 or 4 classes. Here is some very simplified
pseudo code -

    class1():
        def check1(data):
            perform test
            if test failed:
                return False
            if not class2.check2(data):
                return False
            return True

    class2():
        def check2(data):
            perform test
            if test failed:
                return False
            if not class3.check3(data):
                return False
            return True

    class3():
        def check3(data):
            perform test
            if test failed:
                return False
            if not class4.check4(data):
                return False
            return True

    class4():
        def check4(data):
            perform test
            if test failed:
                return False
            return True

In my new program, classes 1-3 run on the client, class4 runs on the server.
Therefore I tried to change class3 as follows -

    class3():
        def check3(data):
            avatar.callRemote(check4,data).addCallback(afterCheck)

        def afterCheck(result):
            return result

This does not work, as check1 and check2 never receive the result.

I would like to avoid going through my entire program and changing each
occurrence of check1 and check2 into a deferred and a callback. I do not
particularly mind if the client program blocks, as I do not want the user to
proceed until the result is known.

Is there any way to accomplish this?

Thanks for any advice

Frank Millman




From kwhitesell at adelphia.net  Sun Dec  4 06:17:55 2005
From: kwhitesell at adelphia.net (kwhitesell at adelphia.net)
Date: Sun, 4 Dec 2005 8:17:55 -0500
Subject: [Twisted-Python] (no subject)
Message-ID: <17833893.1133702275128.JavaMail.root@web10.mail.adelphia.net>

Hi Frank,

Best that I can tell, it's not your various classes that need to be converted to deferreds, just your program that calls class1, or even class1 itself.

The bottom line is that _something_ higher up the calling stack needs to be aware that this is an asynchronous process - and that a deferred gets generated along the way. I believe it would be helpful if the originating function is coded for this.

	I'm not a Twisted guru, so there may be an easier way to do this - but as I see it...

I would be writing the classes to look more like the following:

    class1():
        def check1(data):
            perform test
            if test failed:
                return defer.succeed(False)
            return class2.check2(data):

    class2():
        def check2(data):
            perform test
            if test failed:
                return defer.succeed(False)
            return class3.check3(data):

    class3():
        def check3(data):
            perform test
            if test failed:
                return defer.succeed(False)
            aDeferred = avatar.callRemote(check4,data)
            return aDeferred


Then, my originating class (and possibly becomming a wrapper class if this is used in many places).

    class0():
       def check0(data):
           class1.check1(data).addCallback(afterCheck)

        def afterCheck(result):
            return result


This way, all the functions return a deferred back up to the calling program - but the only one that causes a delay is the call to check4.

Ken



From shamrin at gmail.com  Sun Dec  4 22:47:52 2005
From: shamrin at gmail.com (Alexey Shamrin)
Date: Mon, 5 Dec 2005 08:47:52 +0300
Subject: [Twisted-Python] [patch] issue 630: timezone in twisted log
Message-ID: <28d42ea70512042147r14ab13a4g@mail.gmail.com>

Hello!

Nearly half a year ago I took issue 630 from twisted bug database [1]
and tried to fix it. This bug is good to fix, because it makes the
experience of looking at the console after issuing "twistd -noy
some.tac" much better.

But after adding several comments on the issue and attaching patches,
I recieved ZERO response... :-(

[1] http://twistedmatrix.com/bugs/issue630

--
Alexey



From frank at chagford.com  Mon Dec  5 02:33:51 2005
From: frank at chagford.com (Frank Millman)
Date: Mon, 5 Dec 2005 11:33:51 +0200
Subject: [Twisted-Python] Question on deferreds
In-Reply-To: <17833893.1133702275128.JavaMail.root@web10.mail.adelphia.net>
Message-ID: <20051205092855.368BE3F433B@fcserver.chagford.com>

Ken wrote:
> 
> Hi Frank,
> 
> Best that I can tell, it's not your various classes that need 
> to be converted to deferreds, just your program that calls 
> class1, or even class1 itself.

Thanks for the reply.

> 
> The bottom line is that _something_ higher up the calling 
> stack needs to be aware that this is an asynchronous process 
> - and that a deferred gets generated along the way. I believe 
> it would be helpful if the originating function is coded for this.
> 

I understand what you are getting at, but I have spent a few hours trying to
squeeze this concept into my program, and I am not succeeding.

There are two main reasons that I can see.

Firstly, I oversimplified my pseudo code.

You suggested changing this

    class1():
        def check1(data):
            perform test
            if test failed:
                return False
            if not class2.check2(data):
                return False
            return True

to this

     class1():
         def check1(data):
             perform test
             if test failed:
                 return defer.succeed(False)
             return class2.check2(data)

I understand that, but I should have used this as an example -

    class1():
        def check1(data):
            perform test
            if test failed:
                return False
            if not class2.check2(data):
                return False
            do some extra stuff here  # this is what I left out
            return True

This 'extra stuff' can occur at any of the levels in the stack. I cannot see
where I could put this using your version.

Secondly, under some circumstances I loop over a number of objects and
validate them one after the other -

    class1():
        def check1(data):
            for obj in objList:
                if not check2(obj):
                    return False
            perform test
            if test failed:
                return False
            if not check2(data):
                return False
            do some extra stuff here
            return True

As you can see, it is getting even more complicated to do this using
deferreds.

The irony is that I actually want the client program to block until a
response is received, so maybe I should not be using Twisted on the client
at all. I could write a normal socket client, and use a ServerFactory on the
server.

I am very new to Twisted, so it is likely that my problem is that I have not
learned to think in a Twisted manner yet. Any advice to put me straight will
be much appreciated.

Thanks

Frank




From sam at SpinwardStars.com  Sat Dec  3 17:06:52 2005
From: sam at SpinwardStars.com (Samuel Reynolds)
Date: Sat, 03 Dec 2005 17:06:52 -0700
Subject: [Twisted-Python] Request for ideas
In-Reply-To: <43920CF7.8030204@adelphia.net>
References: <43920CF7.8030204@adelphia.net>
Message-ID: <6.1.2.0.0.20051203165555.0261cbb0@mail.myedl.com>

At 2005-12-03 04:24 PM -0500, you wrote:
>The specific problem occurs when objects are reused. I've had situations 
>where a client fails to reply for significantly longer than the timeout 
>period. In that interval, the original CommTrans, AckMgr and RepMgr have 
>been deleted and replaced by new instances. The client finally replies to 
>the original request, and the reply is caught by those new objects!
>(There is what I think is a very small, but non-zero probability that I'm 
>misinterpreting what I'm seeing.)
>
> From what I can see in the source code, the internal ID is what's set by 
> the builtin 'id' function. I'm printing these at key times and I can see 
> where they're being duplicated. The only time I see this problem occur is 
> when a new object has been created with the same id as a previous object.

Sounds like an object aliasing problem.
And I don't think that it's *objects* that are being
re-used, but *memory locations* for same-class objects.

Don't use the built-in id() function. I'm not sure if this
is correct, but it seems to me something like the memory
address of the object. When the memory gets re-used, the
same ID sometimes recurrs.

*****
If you need a unique identifier for your application logic,
create and assign it yourself. Don't use the id() function.
*****

One possibility is to give each AckMgr/RepMgr pair an auction ID.

Create a simple ID generator (object or function).
When you create a new AckMgr and RepMgr, get a new ID
from the generator and assign it to each one *before*
you use it.

The AckMgr then could simply ignore any response that
doesn't have the expected ID.

More generally, I would put the AckMgrs in a dictionary,
keyed by the action ID. I would have *one* function/method
(ProcessAck) that gets responses and dispatches them to the
appropriate AckMgr, or drops them if no matching AckMgr
is found. This would make testing, debugging, and tuning
easier, too, by providing a single location for
instrumentation.

- Sam

__________________________________________________________
Spinward Stars, LLC                        Samuel Reynolds
Software Consulting and Development           303-805-1446
http://SpinwardStars.com/           sam at SpinwardStars.com  





From Keith.Gunderson at act.org  Tue Dec  6 15:41:07 2005
From: Keith.Gunderson at act.org (Keith.Gunderson at act.org)
Date: Tue, 6 Dec 2005 16:41:07 -0600
Subject: [Twisted-Python] ftpClient.py, retrieveFile, and line ending issues
Message-ID: <OFF16B02C1.4046BB10-ON862570CF.0079B266-862570CF.007C9DC1@LocalDomain>

Hello,

If any of you have a spare minute, I can't figure out else where I might
solve my present dilemma.  Its certainly likely that my only issues are
ignorance about Python's file operations or the features that are a part of
other FTP clients that I use.

I'm using the ftpclient.py code to write a script which downloads file via
FTP.  My example code shows the basics.  The file is transferred, but the
lines seem to have different line endings when I view them 'hexlified' in
xemacs.  My twisted-created files has hex 0D0D 0D0D 0D0D at the end of
lines while a file downloaded using SmartFTP has hex 0D0A 0D0A.

Is it clear, based on that information, if there is an issue in my code?
Or an easy way to fix it?

class FileWriterProtocol(Protocol):
    def __init__(self, filename):
        self.file = open(filename, 'w')

    def dataReceived(self, data):
        self.file.write(data)


def connectionMade(ftpClient):

    proto2 = FileWriterProtocol( 'c:/ftpfile1.txt' )

    # Get the file, and quit when done
    d = ftpClient.retrieveFile( 's1/s2/T2005C.processed' ,
      proto2)
    d.addCallback(lambda result: reactor.stop())


Thanks very much,

Keith Gunderson






From itamar at itamarst.org  Tue Dec  6 15:50:53 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 06 Dec 2005 17:50:53 -0500
Subject: [Twisted-Python] ftpClient.py, retrieveFile, and line ending
	issues
In-Reply-To: <OFF16B02C1.4046BB10-ON862570CF.0079B266-862570CF.007C9DC1@LocalDomain>
References: <OFF16B02C1.4046BB10-ON862570CF.0079B266-862570CF.007C9DC1@LocalDomain>
Message-ID: <1133909453.9093.0.camel@localhost.localdomain>

On Tue, 2005-12-06 at 16:41 -0600, Keith.Gunderson at act.org wrote:

> class FileWriterProtocol(Protocol):
>     def __init__(self, filename):
>         self.file = open(filename, 'w')

You probably want open(filename, "wb"), which implies binary mode. On
Unix this does nothing, on Windows it keeps Windows from screwing with
your data line endings.




From Keith.Gunderson at act.org  Tue Dec  6 15:54:02 2005
From: Keith.Gunderson at act.org (Keith.Gunderson at act.org)
Date: Tue, 6 Dec 2005 16:54:02 -0600
Subject: [Twisted-Python] XML consumers and protocols
Message-ID: <OFCE77B0EF.8F887367-ON862570CF.007CF7C0-862570CF.007DCC73@LocalDomain>


Another question I'm trying to hunt down regarding my plans to develop an
ftpClient that will download XML files...

How can I teach myself what is important to know about the relationship
between Protocols and Consumers?  How much of these concepts are twisted
specific...  or Components/ Interfaces ...  or just native Python stuff.

I have a notion of abstractly passing data from an ftpClient to an XML
parser, but I'm obviously not there yet.

Thanks!

Keith Gunderson






From jmbenski at micron.com  Tue Dec  6 19:58:13 2005
From: jmbenski at micron.com (jmbenski at micron.com)
Date: Tue, 6 Dec 2005 19:58:13 -0700
Subject: [Twisted-Python] RE: waiting on transport return
Message-ID: <3E7F9D21F31D094DB7721553EA2CD1B5E72AD6@NTXBOIMBX15.micron.com>

            Ok, I need some help to write some code using deferred's the way they were meant, not the way I've bastardized them.

 

My framework...

 

I have a client that will connect to a server and MAINTAIN that connection.  I can't create a protocol factory.  The server and the client communicate commands through stdin and stdout.  I need to write my commands to the server and wait for the response in some cases.

 

I've setup a system that passes a deferred chain to my process protocol and once my process knows that the data it needs is received it will kick off the deferred chain that happens after that response.  This seems backwards.  From my reading and understanding of deferreds, they should bubble down and not have to be pushed up.  How do I handle the case of some protocol command kicking off the rest of a deferred chain or of passing back a deferred, so that I can add to it the things that need to run?

 

class SyncManagerProtocol(protocol.ProcessProtocol):

    def __init__(self ):

        self.dataStore = ""

        ##queue that holds the commands 

        self.cmdQueue = list()

        ##queue that holds the callback function to call once the call returns

        self.deferredQueue = list()

           

    def outReceived(self, data):

        

        if len(self.cmdQueue) > 0:

            ##take the data and shove it into our internal store

            self.dataStore += data

            ##determine what is good data

            cmd = self.cmdQueue[0]

            ##look for the command the is next in the queue.  grab all the return data

            ##between the command block.

            ##      syncCmd {

            ##      return data goes here

            ##      } syncCmd

            cmdBlock = r"%s {(?P<cmd>.*)} %s(?P<rest>.*)" % (cmd, cmd)

            errBlock = r"invalid {(?P<errMsg>.*)}"

    

            cmdMatch = re.compile( cmdBlock, re.S ).search( self.dataStore )           

 

            if cmdMatch:

                ##set the rest of the data to the dataStore.  This clears out the current contents

                ##but keeps any extra data that may be coming in from the next command

                self.dataStore = cmdMatch.group( "rest" )

                ##clean up this command

                self.commandComplete( cmdMatch.group("cmd").lstrip() )

    

    ##This is called if all the data we need has been returned.                   

    def commandComplete(self, cmdData):

        ##pop this command since we are done with it

        self.cmdQueue.pop(0)

        ##pop the deferred that matches this command

        deferred = self.deferredQueue.pop(0)        

        ##pass the results to the deferred

        deferred.callback( cmdData )

    

    ##interface to the process that sends a command to execute

    def sendCommand( self, cmd, args, deferred ):       

        ##store the command in the queue, so we can check it when we get data

        self.cmdQueue.append( cmd )

        ##store the deferred in the queue that we need to run when this command has been completed

        self.deferredQueue.append( deferred )

        ##write out command to the process

        cmd = cmd + " " + args + "\n"

        self.transport.write( cmd )

 

 

 

##   This code is my client interface class to the server that holds the processProtocol instance.   ##

 

 

#setup a command that will handle errors or good data

d = defer.Deferred().addCallback( self.handleThisCommand )

#run the calling function handler that will handle an error or returned data.  This will allow something like a GUI to process data that will now be available

d.addCallback( self.theRestOfTheCommands )

cmd = "some command goes here"

self.processProtocol.sendCommand( "syncCmd", cmd, d)

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051206/fd900381/attachment.html>

From kwhitesell at adelphia.net  Tue Dec  6 22:19:18 2005
From: kwhitesell at adelphia.net (Ken Whitesell)
Date: Wed, 07 Dec 2005 00:19:18 -0500
Subject: [Twisted-Python] Question on deferreds
Message-ID: <439670D6.9050508@adelphia.net>

Frank,

	Ok, your clarifications make things a little more difficult, but 
not impossible.

	Standard disclaimer: I'm no Twisted-guru. There may be an easier 
way to do this. I can only take this as far as my knowledge extends. 
So having said that...

There's no way to get around the fact that the calling program needs 
to be 'broken' down into two parts, 'separated' by the deferred.

In other words, to greatly simplify the situation, your flow should 
be something like:

function 1
	do stuff...
	do more stuff...
	do more stuff...
	callRemote...
	addCallback(function2)
return

function 2
	do more stuff...
	do more stuff...
	do more stuff...
end of tests.

The bottom line is that your entire program flow needs to be 
reworked around the Twisted methodology. (Or, in other words, you 
need to Twist your program. <g>)

I don't remember where I saw this first, but the best way I know to
describe this situation is to stop thinking of your program as a 
program and Twisted as a library. Twisted is the program, and your 
code is the library.

Your functions get called by the reactor because of some event. You
handle this event then return control to the reactor. The reactor 
then calls other functions as necessary.

So you perform some tests, then call remote to invoke a process on 
the server, register your callback and yield control back to the 
reactor.

When the reply is received, a different function gets control and 
you continue processing.

One way this can look, is to take your original program (section 1) 
and modify it to look more like the pseudo code below.

*** Original code, with modified class 3 ***
     class1():
         def check1(data):
             perform test
             if test failed:
                 return False
             if not class2.check2(data):
                 return False
             do_additional_stuff_1
             return True

     class2():
         def check2(data):
             perform test
             if test failed:
                 return False
             if not class3.check3(data):
                 return False
             do_additional_stuff_2
             return True

     class3():
         def check3(data):
             perform test
             if test failed:
                 return False

		*** This is where the flow breaks ***
             avatar.callRemote(check4,data).addCallback(afterCheck)

             if not class4.check4(data):
                 return False
             do_additional_stuff_3
             return True

         def afterCheck(result):
             return result

The simplest rework I can come up with for this is:

     class0():
        def check0(data):
             part1 = class1.check1(data)
		# Assuming part1 is either false or a deferred
             if part1:
                 part1.addCallback(afterCheck)
		else callLater(0, afterCheck, False)

         def afterCheck(result):
             # part 2
		# Do the stuff after check4
		# This would include the stuff that needs to be done
		# after the tests. So code from
                 # do_additional_stuff_x
		# can be called from here.
		finalResults = class1.do_additional_stuff_1(data)
             return finalResult

     class1():
         def check1(data):
             perform test
             if test failed:
                 return False
             if not class2.check2(data):
                 return False
		# Note, we can't get here so this code can go
             # return True

        def do_additional_stuff_1(data):
            class2.do_additional_stuff_2(data)
            more suff goes here.

     class2():
         def check2(data):
             perform test
             if test failed:
                 return False
             if not class3.check3(data):
                 return False
		# Note, we can't get here so this code can go
             # return True

        def do_additional_stuff_2(data):
            class3.do_additional_stuff_3(data)
            more suff goes here.

     class3():
         def check3(data):
             perform test
             if test failed:
                 return False

		*** This is where the flow breaks ***
             aDeferred =
avatar.callRemote(check4,data).addCallback(afterCheck)
             return aDeferred

        def do_additional_stuff_3(data):
            suff goes here.

**************************************

As you can see, it does chop things up a bit - and I'm still not 
sure that I've really captured what you're trying to do. I've just 
tried to match your existing class structure - which I believe to be 
sub-optimal in this context, given that I'm working from some very 
generic descriptions.

Specifically, I'm not sure if these "class1, class2 and class3"
definitions are truly classes, or if they're simply "organizational
usage groups". (I'm not judging one way or the other, I'm only 
working from what you've written and what assumptions I can make - 
this isn't meant to disparage your code, just that I don't feel like 
I have enough solid information to make a more accurate judgement.)

Hope this helps spark some ideas on your end.

Ken




From foom at fuhm.net  Wed Dec  7 00:00:05 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 07 Dec 2005 00:00:05 -0700
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EjtHZ-0005lA-00@pyramid.twistedmatrix.com>

KIND == 'create'
Bug summary
______________________
Since 2005-11-30 07:00:02.250000:
 Bugs opened: 11   Bugs closed: 2   Total open bugs: 493 (+9)
  Urgent: 2 (+1)
  Bug: 232 (+5)
  Feature: 176 (+3)
  Wish: 83 (+0)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[TRIAL] trial passes deferredGenerator test cases without running the test case  (8 hours ago)
       http://twistedmatrix.com/bugs/issue1353 opened by hagna

[CORE] FilePath sucks  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1348 opened by glyph

                    ==== Bug ====
[CORE] threadedselectreactor queue size  (5 days ago)
       http://twistedmatrix.com/bugs/issue1347 opened by Toby Dickenson

Separate reporter result handling from output  (5 days ago)
       http://twistedmatrix.com/bugs/issue1349 opened by jml

[CORE, WIN32] iocpreactor [Errno 10014] The system detected an invalid pointer address in attempting to use a pointer argument in a call  (6 days ago)
       http://twistedmatrix.com/bugs/issue1346 opened by ghazel

[CORE, WIN32] socket.error: (19, 'No such device')  (6 days ago)
       http://twistedmatrix.com/bugs/issue1345 opened by ghazel

[CORE] posixbase win32 waker problem  (6 days ago)
       http://twistedmatrix.com/bugs/issue1344 opened by antony

[CORE] readers and writers not removed properly from threadedselectreactor  (6 days ago)
       http://twistedmatrix.com/bugs/issue1343 opened by antony

                    ==== Feature ====
[TRIAL] [PATCH] HTML reporter for trial  (4 days ago)
       http://twistedmatrix.com/bugs/issue1350 opened by dialtone

log observer bridging to python logging facility  (4 days ago)
       http://twistedmatrix.com/bugs/issue1351 opened by ctheune

                    ==== Wish ====
twisted + dbus 0.60 howto  (yesterday)
       http://twistedmatrix.com/bugs/issue1352 opened by senko

Bugs Closed
______________________
                    ==== Urgent ====
[CORE] FilePath sucks  (5 days ago)
       http://twistedmatrix.com/bugs/issue1348 opened by glyph, closed by <unknown>

                    ==== Bug ====
twisted.web.html.output bug (IRC)  (1 week ago)
       http://twistedmatrix.com/bugs/issue1337 opened by kyle, closed by exarkun




From mwh at python.net  Wed Dec  7 02:41:39 2005
From: mwh at python.net (Michael Hudson)
Date: Wed, 07 Dec 2005 09:41:39 +0000
Subject: [Twisted-Python] Re: ftpClient.py, retrieveFile,
	and line ending issues
References: <OFF16B02C1.4046BB10-ON862570CF.0079B266-862570CF.007C9DC1@LocalDomain>
	<1133909453.9093.0.camel@localhost.localdomain>
Message-ID: <2m1x0p9rcc.fsf@starship.python.net>

Itamar Shtull-Trauring <itamar at itamarst.org> writes:

> On Tue, 2005-12-06 at 16:41 -0600, Keith.Gunderson at act.org wrote:
>
>> class FileWriterProtocol(Protocol):
>>     def __init__(self, filename):
>>         self.file = open(filename, 'w')
>
> You probably want open(filename, "wb"), which implies binary mode. On
> Unix this does nothing,

Actually, this is not quite true!

>>> import array
>>> open('foo', 'w').write(array.array('b', [0]))
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
TypeError: argument 1 must be string or read-only character buffer, not array.array
>>> open('foo', 'wb').write(array.array('b', [0]))

> on Windows it keeps Windows from screwing with your data line
> endings.

This is still true.

pedantically-ly y'rs
mwh

-- 
  If you're talking "useful", I'm not your bot.
                                            -- Tim Peters, 08 Nov 2001




From matusis at matusis.com  Wed Dec  7 03:04:26 2005
From: matusis at matusis.com (Alec Matusis)
Date: Wed, 7 Dec 2005 02:04:26 -0800
Subject: [Twisted-Python] twisted performance
Message-ID: <E1EjwA3-00085E-00@pyramid.twistedmatrix.com>

I am running Twisted 1.3 server with a fairly large number of clients.
The hardware is two 64 bit 3.0 GHz Xeons with HT, 4GB RAM, and it's on
2.6.11 kernel.
I am using poll reactor.
Currently, when the number of clients approaches 5000, the "top" shows 99%
CPU load for twistd process, the event loop slows down and weird racing
conditions show up. 
 
My clients basically do nothing: they connect and just sit there, sending
application-level keep-alives (null character string) to the server every 90
sec, which are echoed back. The connections/ disconnections for clients are
rare- about 4-5 per sec. So I am mostly dealing with 5000 clients in the
ESTABLISHED state. Very rarely (5x per second on average) one of the clients
gets a message from the server, but I am sure that this is not what keeps
the load so high (I slowed down message rates, and the CPU load did not
change).  
 
What are your thoughts on this performance? Is this load mainly due to
poll() overhead, polling a large number of file descriptors? 
I would love to try an epoll reactor, but as I understand, it's not yet
available?
 
Additionally, the process leaks about 100MB memory per day. I made the
garbage collector print out the number of objects traced by it every 30 min,
and this number stays more or less constant. When the memory held by the
process becomes larger, the event loop further slows down, and the
performance with the same number of clients degrades, as the memory
footprint increases. 
 
Thanks for any advice.
 
Alec.
 


 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051207/3b5880f5/attachment.html>

From itamar at itamarst.org  Wed Dec  7 10:09:31 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 07 Dec 2005 12:09:31 -0500
Subject: [Twisted-Python] Re: ftpClient.py, retrieveFile, and line
	ending issues
In-Reply-To: <2m1x0p9rcc.fsf@starship.python.net>
References: <OFF16B02C1.4046BB10-ON862570CF.0079B266-862570CF.007C9DC1@LocalDomain>
	<1133909453.9093.0.camel@localhost.localdomain>
	<2m1x0p9rcc.fsf@starship.python.net>
Message-ID: <1133975371.9141.1.camel@localhost.localdomain>

On Wed, 2005-12-07 at 09:41 +0000, Michael Hudson wrote:

> >>> import array
> >>> open('foo', 'w').write(array.array('b', [0]))
> Traceback (most recent call last):
>   File "<stdin>", line 1, in ?
> TypeError: argument 1 must be string or read-only character buffer, not array.array
> >>> open('foo', 'wb').write(array.array('b', [0]))

OK then, "wb" does nothing on Unix modulo Python doing wacky shit ;)





From itamar at itamarst.org  Wed Dec  7 10:15:43 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 07 Dec 2005 12:15:43 -0500
Subject: [Twisted-Python] twisted performance
In-Reply-To: <E1EjwA3-00085E-00@pyramid.twistedmatrix.com>
References: <E1EjwA3-00085E-00@pyramid.twistedmatrix.com>
Message-ID: <1133975743.9141.7.camel@localhost.localdomain>

On Wed, 2005-12-07 at 02:04 -0800, Alec Matusis wrote:
> I am running Twisted 1.3 server with a fairly large number of clients.
> The hardware is two 64 bit 3.0 GHz Xeons with HT, 4GB RAM, and it's on
> 2.6.11 kernel.
> I am using poll reactor.
> Currently, when the number of clients approaches 5000, the "top" shows
> 99% CPU load for twistd process, the event loop slows down and weird
> racing conditions show up. 

Could you try this experiment with Twisted 2.1, ideally with the latest
version of Python? There were a number of algorithmic improvements since
1.3 (the one that comes to mind in this case is the scheduler.)

One way to discover if the OS-level poll() is the problem is to use
oprofile; you should be able to use it to see how much time is spent in
there. Before that however, you'd want to use the Python profiler to
figure out if there's any obvious hotspots.





From frank at chagford.com  Fri Dec  9 02:54:09 2005
From: frank at chagford.com (Frank Millman)
Date: Fri, 9 Dec 2005 11:54:09 +0200
Subject: [Twisted-Python] Question on deferreds
In-Reply-To: <17833893.1133702275128.JavaMail.root@web10.mail.adelphia.net>
Message-ID: <20051209094934.34FEC3F4366@fcserver.chagford.com>

Hi Ken

Many thanks for your reply. Sorry for not replying earlier - I seem to have
lost some mail due to ISP problems, and I just noticed your message in the
archive.

I have not included your response, as I want to come at this from another
angle. I confess that I am under pressure to 'get something working', even
if it is not the optimal solution, and this is all getting a bit
complicated.

I have been experimenting with using a socket client instead of Twisted, and
I got something up and running quite quickly. When I take a step back and
look at how I got it working, I feel that I should be able to apply the same
technique to Twisted, but I cannot get it to work. I will show both methods,
and perhaps someone can point me in the right direction.

The trick is that I have two threads running concurrently - a wxPython main
loop, and a subthread that monitors the socket. The socket loop looks like
this (simplified), subclassed from threading.Thread -

    def run(self):
        readable = [s.fileno()]
        error = []
        self.sendData = []
        while 1:
            if self.sendData:
                writable = [s.fileno()]
            else:
                writable = []
            r,w,e = select.select(readable,writable,error,0.01)
            if r:
                self.recvData = s.recv(1024)
            if w:
                s.send(self.sendData.pop(0))

    def checkData(self,item,value):  # this is called from the *wx* thread
        self.recvData = None
        self.sendData.append(cPickle.dumps((CHECK,item,value)))
        while self.recvData is None:
            sleep(0.01)
        return self.recvData

As you can see, checkData() blocks the wxPython thread until it receives a
response from the socket thread.

This is how I tried with Twisted -

    def checkData(self,item,value):  # this is called from the *wx* thread
        self.recvData = None
        self.callCheckData(item,value)
        while self.recvData is None:
            sleep(0.01)
        return self.recvData

    def callCheckData(self,item,value):
 
self.avatar.callRemote('checkData',item,value).addCallback(self.dataChecked)

    def dataChecked(self,answer):
        self.recvData = answer

It looks as if it should work, but the server method 'perspective_checkData'
never gets called.

Is it possible to do anything like this?

Thanks

Frank Millman




From p.mayers at imperial.ac.uk  Fri Dec  9 04:09:33 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 09 Dec 2005 11:09:33 +0000
Subject: [Twisted-Python] Question on deferreds
In-Reply-To: <20051209094934.34FEC3F4366@fcserver.chagford.com>
References: <20051209094934.34FEC3F4366@fcserver.chagford.com>
Message-ID: <439965ED.6050105@imperial.ac.uk>

Frank Millman wrote:

> I have been experimenting with using a socket client instead of Twisted, and
> I got something up and running quite quickly. When I take a step back and
> look at how I got it working, I feel that I should be able to apply the same
> technique to Twisted, but I cannot get it to work. I will show both methods,
> and perhaps someone can point me in the right direction.

No, of course you can't apply the same technique. A socket client is a 
blocking, synchronous bit of code. The ENTIRE POINT of Twisted is that 
all operations are non-blocking, and asynchronous. Basically you're 
going to find it hard going until that's clear (I know I did).

And sadly you're using wx, which is REALLY BAD and does not interact 
well with Twisted until recent developments (see below).

> 
> The trick is that I have two threads running concurrently - a wxPython main
> loop, and a subthread that monitors the socket. The socket loop looks like
> this (simplified), subclassed from threading.Thread -


> 
>     def run(self):
>         readable = [s.fileno()]
>         error = []
>         self.sendData = []
>         while 1:
>             if self.sendData:
>                 writable = [s.fileno()]
>             else:
>                 writable = []
>             r,w,e = select.select(readable,writable,error,0.01)
>             if r:
>                 self.recvData = s.recv(1024)
>             if w:
>                 s.send(self.sendData.pop(0))
> 
>     def checkData(self,item,value):  # this is called from the *wx* thread
>         self.recvData = None
>         self.sendData.append(cPickle.dumps((CHECK,item,value)))
>         while self.recvData is None:
>             sleep(0.01)
>         return self.recvData
> 
> As you can see, checkData() blocks the wxPython thread until it receives a
> response from the socket thread.

Fine. Odd, but fine (I'd use a semaphore as opposed to while True: sleep 
but whatever floats your boat)

> 
> This is how I tried with Twisted -
> 
>     def checkData(self,item,value):  # this is called from the *wx* thread
>         self.recvData = None
>         self.callCheckData(item,value)
>         while self.recvData is None:
>             sleep(0.01)
>         return self.recvData
> 

Bzzt! Error.

You cannot call twisted functions from a thread. See extensive (and 
repetitive) posts in the archives about "threadselectreactor AND wx" for 
about a million posts describing this.

Other than that, and the fact you've got no locking around mutable data 
structures, that code would probably work.

>     def callCheckData(self,item,value):
>  
> self.avatar.callRemote('checkData',item,value).addCallback(self.dataChecked)
> 
>     def dataChecked(self,answer):
>         self.recvData = answer
> 
> It looks as if it should work, but the server method 'perspective_checkData'
> never gets called.

It should not and does not work for the reason above.

I believe "threadselectreactor" is what you want for wx integation. 
Sadly, I've never used threadselectreactor or wx, so can't be more 
useful to you.

See:

http://bob.pythonmac.org/archives/2005/04/17/twisted-and-foreign-event-loops/
http://twistedmatrix.com/pipermail/twisted-python/2005-April/thread.html#10146



From jmbenski at micron.com  Fri Dec  9 09:03:52 2005
From: jmbenski at micron.com (jmbenski at micron.com)
Date: Fri, 9 Dec 2005 09:03:52 -0700
Subject: [Twisted-Python] RE: waiting on transport return
Message-ID: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE7@NTXBOIMBX15.micron.com>

I'm not trying to bump my question, but if someone could tell me if I'm just being stupid and missing something with this code or that it isn't possible to do what I need with a spawned process?  If I know it isn't possible, I can just continue down the path I am.  It's not too much of a pain, but it just feels...wrong.

 

Thanks,

 

Jon

 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of jmbenski
Sent: Tuesday, December 06, 2005 7:58 PM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] RE: waiting on transport return

 

            Ok, I need some help to write some code using deferred's the way they were meant, not the way I've bastardized them.

 

My framework...

 

I have a client that will connect to a server and MAINTAIN that connection.  I can't create a protocol factory.  The server and the client communicate commands through stdin and stdout.  I need to write my commands to the server and wait for the response in some cases.

 

I've setup a system that passes a deferred chain to my process protocol and once my process knows that the data it needs is received it will kick off the deferred chain that happens after that response.  This seems backwards.  From my reading and understanding of deferreds, they should bubble down and not have to be pushed up.  How do I handle the case of some protocol command kicking off the rest of a deferred chain or of passing back a deferred, so that I can add to it the things that need to run?

 

class SyncManagerProtocol(protocol.ProcessProtocol):

    def __init__(self ):

        self.dataStore = ""

        ##queue that holds the commands 

        self.cmdQueue = list()

        ##queue that holds the callback function to call once the call returns

        self.deferredQueue = list()

           

    def outReceived(self, data):

        

        if len(self.cmdQueue) > 0:

            ##take the data and shove it into our internal store

            self.dataStore += data

            ##determine what is good data

            cmd = self.cmdQueue[0]

            ##look for the command the is next in the queue.  grab all the return data

            ##between the command block.

            ##      syncCmd {

            ##      return data goes here

            ##      } syncCmd

            cmdBlock = r"%s {(?P<cmd>.*)} %s(?P<rest>.*)" % (cmd, cmd)

            errBlock = r"invalid {(?P<errMsg>.*)}"

    

            cmdMatch = re.compile( cmdBlock, re.S ).search( self.dataStore )           

 

            if cmdMatch:

                ##set the rest of the data to the dataStore.  This clears out the current contents

                ##but keeps any extra data that may be coming in from the next command

                self.dataStore = cmdMatch.group( "rest" )

                ##clean up this command

                self.commandComplete( cmdMatch.group("cmd").lstrip() )

    

    ##This is called if all the data we need has been returned.                   

    def commandComplete(self, cmdData):

        ##pop this command since we are done with it

        self.cmdQueue.pop(0)

        ##pop the deferred that matches this command

        deferred = self.deferredQueue.pop(0)        

        ##pass the results to the deferred

        deferred.callback( cmdData )

    

    ##interface to the process that sends a command to execute

    def sendCommand( self, cmd, args, deferred ):       

        ##store the command in the queue, so we can check it when we get data

        self.cmdQueue.append( cmd )

        ##store the deferred in the queue that we need to run when this command has been completed

        self.deferredQueue.append( deferred )

        ##write out command to the process

        cmd = cmd + " " + args + "\n"

        self.transport.write( cmd )

 

 

 

##   This code is my client interface class to the server that holds the processProtocol instance.   ##

 

 

#setup a command that will handle errors or good data

d = defer.Deferred().addCallback( self.handleThisCommand )

#run the calling function handler that will handle an error or returned data.  This will allow something like a GUI to process data that will now be available

d.addCallback( self.theRestOfTheCommands )

cmd = "some command goes here"

self.processProtocol.sendCommand( "syncCmd", cmd, d)

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051209/ffb371f3/attachment.html>

From exarkun at divmod.com  Fri Dec  9 10:01:14 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 9 Dec 2005 12:01:14 -0500
Subject: [Twisted-Python] RE: waiting on transport return
In-Reply-To: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE7@NTXBOIMBX15.micron.com>
Message-ID: <20051209170114.1217.1040285964.divmod.quotient.4420@ohm>

On Fri, 9 Dec 2005 09:03:52 -0700, jmbenski at micron.com wrote:
>I'm not trying to bump my question, but if someone could tell me if I'm just being stupid and missing something with this code or that it isn't possible to do what I need with a spawned process?  If I know it isn't possible, I can just continue down the path I am.  It's not too much of a pain, but it just feels...wrong.
>

The code mostly seems good to me.  The only thing I might change is 
completely trivial: instead of passing a Deferred in to sendCommand, 
I'd have sendCommand be responsible for creating the Deferred and 
then return it, so your application code would look like this - 

  d = self.processprotocol.sendCommand("syncCmd", cmd)
  d.addCallback(self.handleTheCommand)
  d.addCallback(Self.theRestOfTheCommands)

I'm not sure from where your unhappyness with the version you posted 
stems, so I'm not sure what other comments to make.

Jean-Paul



From jmbenski at micron.com  Fri Dec  9 11:02:03 2005
From: jmbenski at micron.com (jmbenski at micron.com)
Date: Fri, 9 Dec 2005 11:02:03 -0700
Subject: [Twisted-Python] RE: waiting on transport return
Message-ID: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE8@NTXBOIMBX15.micron.com>

I guess I'm still trying to wrap my head around deferreds and how best to use them as they were intended.  The way that code works, I have to pass my deferred chain to sendCommand.  The protocol needs to store that deferred on its deferred stack, so that I can pass the results of the command back to the deferred function.

After looking at the code a bit more and your change below, I'm surprised that my code works.  Why isn't the reactor kicking off my deferreds that are stored in the queue?  My current logic is dependent on the protocol running the commandComplete function before the deferreds fire in the protocol's deferred queue.  

#Do some thing
#Send the command
self.processProtocol.sendCommand
#Do some more
#return control to the reactor

??Here the reactor should kick off my command and run any deferreds.

Am I just lucky that my server returns the response(commandComplete) before the deferreds in the queue fire?  The return of the data and the chain of deferreds are not linked in any way, which I guess is what my original question is.  How can my commandComplete return a deferred and kick off a logic chain?  How is it working now?


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Jean-Paul Calderone
Sent: Friday, December 09, 2005 10:01 AM
To: Twisted general discussion
Subject: RE: [Twisted-Python] RE: waiting on transport return

On Fri, 9 Dec 2005 09:03:52 -0700, jmbenski at micron.com wrote:
>I'm not trying to bump my question, but if someone could tell me if I'm just being stupid and missing something with this code or that it isn't possible to do what I need with a spawned process?  If I know it isn't possible, I can just continue down the path I am.  It's not too much of a pain, but it just feels...wrong.
>

The code mostly seems good to me.  The only thing I might change is 
completely trivial: instead of passing a Deferred in to sendCommand, 
I'd have sendCommand be responsible for creating the Deferred and 
then return it, so your application code would look like this - 

  d = self.processprotocol.sendCommand("syncCmd", cmd)
  d.addCallback(self.handleTheCommand)
  d.addCallback(Self.theRestOfTheCommands)

I'm not sure from where your unhappyness with the version you posted 
stems, so I'm not sure what other comments to make.

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From itamar at itamarst.org  Fri Dec  9 11:29:12 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 09 Dec 2005 13:29:12 -0500
Subject: [Twisted-Python] RE: waiting on transport return
In-Reply-To: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE8@NTXBOIMBX15.micron.com>
References: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE8@NTXBOIMBX15.micron.com>
Message-ID: <1134152953.11337.1.camel@localhost.localdomain>

On Fri, 2005-12-09 at 11:02 -0700, jmbenski at micron.com wrote:

> After looking at the code a bit more and your change below, I'm
> surprised that my code works.  Why isn't the reactor kicking off my
> deferreds that are stored in the queue? 

Deferreds have nothing to do with the reactor. So, doing
aDeferred.callback(result) or .errback(error) are the only way it gets a
value.





From jmbenski at micron.com  Fri Dec  9 12:08:16 2005
From: jmbenski at micron.com (jmbenski at micron.com)
Date: Fri, 9 Dec 2005 12:08:16 -0700
Subject: [Twisted-Python] RE: waiting on transport return
Message-ID: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE9@NTXBOIMBX15.micron.com>

Maybe I misspoke.  The way I understand it, is that deferreds do not get CPU time until the reactor resumes control.  Once the reactor gets control it allows events to happen, some of which may be deferreds.  I'm not sure what does the scheduling or what order deferred objects get control of the thread.  I had assumed that the reactor or whatever scheduler kicked off deferreds in the order that they were created.  Once that deferred chain got control of the main loop it would run to completion and the next event whether a deferred or something else would run.

In my case I need the deferred to wait until my commandComplete function runs.  Is the aDeferred.callback(result) the trigger that starts the deferred?  If that is the case, then I understand how my current code is working and I understand that there IS no scheduler for the deferreds.  Deferreds fire when a callback or errback function is called on them.  End of story and no magic done behind the scenes.  

Jon



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Itamar Shtull-Trauring
Sent: Friday, December 09, 2005 11:29 AM
To: Twisted general discussion
Subject: RE: [Twisted-Python] RE: waiting on transport return

On Fri, 2005-12-09 at 11:02 -0700, jmbenski at micron.com wrote:

> After looking at the code a bit more and your change below, I'm
> surprised that my code works.  Why isn't the reactor kicking off my
> deferreds that are stored in the queue? 

Deferreds have nothing to do with the reactor. So, doing
aDeferred.callback(result) or .errback(error) are the only way it gets a
value.



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From itamar at itamarst.org  Fri Dec  9 12:39:26 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 09 Dec 2005 14:39:26 -0500
Subject: [Twisted-Python] RE: waiting on transport return
In-Reply-To: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE9@NTXBOIMBX15.micron.com>
References: <3E7F9D21F31D094DB7721553EA2CD1B5E72AE9@NTXBOIMBX15.micron.com>
Message-ID: <1134157167.11337.19.camel@localhost.localdomain>

On Fri, 2005-12-09 at 12:08 -0700, jmbenski at micron.com wrote:
> Maybe I misspoke.  The way I understand it, is that deferreds do not
> get CPU time until the reactor resumes control. 

No, reactor has nothing to do with Deferred's implementation.

> In my case I need the deferred to wait until my commandComplete
> function runs.  Is the aDeferred.callback(result) the trigger that
> starts the deferred?  If that is the case, then I understand how my
> current code is working and I understand that there IS no scheduler
> for the deferreds.  Deferreds fire when a callback or errback function
> is called on them.  End of story and no magic done behind the
> scenes.  

Yes, exactly.




From exarkun at divmod.com  Sat Dec 10 07:22:52 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 10 Dec 2005 09:22:52 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15316 - Reorganize
 davxml.py into a few files, still exposed as davxml.py.
In-Reply-To: <E1EkuJV-0001ZI-00@wolfwood>
Message-ID: <20051210142252.1217.2133164646.divmod.quotient.4704@ohm>

On Fri, 09 Dec 2005 19:18:17 -0700, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
>Author: wsanchez
>Date: Fri Dec  9 19:18:17 2005
>New Revision: 15316
>
>Added:
>   branches/wsanchez/dav/twisted/web2/dav/elements/
>   branches/wsanchez/dav/twisted/web2/dav/elements/__init__.py
>   branches/wsanchez/dav/twisted/web2/dav/elements/base.py
>      - copied, changed from r15315, branches/wsanchez/dav/twisted/web2/dav/davxml.py
>   branches/wsanchez/dav/twisted/web2/dav/elements/rfc2518.py
>      - copied, changed from r15315, branches/wsanchez/dav/twisted/web2/dav/davxml.py
>   branches/wsanchez/dav/twisted/web2/dav/elements/rfc3253.py
>      - copied, changed from r15315, branches/wsanchez/dav/twisted/web2/dav/davxml.py
>   branches/wsanchez/dav/twisted/web2/dav/elements/rfc3744.py
>      - copied, changed from r15315, branches/wsanchez/dav/twisted/web2/dav/davxml.py
>Modified:
>   branches/wsanchez/dav/twisted/web2/dav/davxml.py
>Log:
>Reorganize davxml.py into a few files, still exposed as davxml.py.
>davxml.py was getting way too big.  Now elements are in files split up by RFC.
>We no longer have to manage __all__.

These elements don't constitute part of the application-level API, right?

Jean-Paul



From ml.flex at gmail.com  Sun Dec 11 02:17:48 2005
From: ml.flex at gmail.com (Micky Latowicki)
Date: Sun, 11 Dec 2005 11:17:48 +0200
Subject: [Twisted-Python] pb references
In-Reply-To: <OFBB460905.BC9C9458-ON802570CB.006587B6-802570CB.0065FCC2@bnpparibas.com>
References: <OFBB460905.BC9C9458-ON802570CB.006587B6-802570CB.0065FCC2@bnpparibas.com>
Message-ID: <d27002d90512110117sa5d5966p@mail.gmail.com>

> However, I keep getting the following error: "Can't send references to
> brokers other than their own." and I can't see why.

To get this kind of error, you need to have 3 parties communicating. Let's call
them A, B, and C.

A creates a referenceable object, and sends it to B.
The perpsective broker on B's side, upon receiving what A sent it,
creates an object called RemoteReference. A RemoteReference is an
object that
is the local representative for the Referenceable that was sent from
A. This means that you call callRemote using this RemoteReference.

Now, B is apparently trying to send this RemoteReference to some third
party, C. This is not allowed by twisted, possibly because that would
often require forwarding messages from C to A through B, which can be
inefficient and unreliable.

In short: you seem to be sending an reference you got through pb to
another pb peer, which is not allowed.

I hope that helps.

From ml.flex at gmail.com  Sun Dec 11 02:22:10 2005
From: ml.flex at gmail.com (Micky Latowicki)
Date: Sun, 11 Dec 2005 11:22:10 +0200
Subject: [Twisted-Python] Non-terminating Process using gtkreactor2
In-Reply-To: <43901CD5.1010008@isotoma.com>
References: <43901CD5.1010008@isotoma.com>
Message-ID: <d27002d90512110122o69cea171x@mail.gmail.com>

>
> I admit I am at a loss as to how to debug this - can someone give me
> some pointers to diagnostics I can try to find out what the problem is?
>
In general, when your program hangs and you don't know what it's
waiting for, it can help to run it in a debugger like WinPDB, and
break the program when it's stuck. Then you can see the stack trace
for every thread, and it sometimes tells you a lot about what's
keeping the program waiting.

From khoa.coffee at gmail.com  Sun Dec 11 11:07:46 2005
From: khoa.coffee at gmail.com (Khoa Nguyen)
Date: Sun, 11 Dec 2005 18:07:46 -0000
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
Message-ID: <000001c5fe86$a5718440$6500a8c0@megisto.com>

Hi Xu,

How did you solve this problem? I face a similar issue and would appreciate if you post a working sample code

Thanks,
Khoa
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051211/67d51310/attachment.html>

From andrea at cpushare.com  Sun Dec 11 15:04:30 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun, 11 Dec 2005 23:04:30 +0100
Subject: [Twisted-Python] twisted performance
In-Reply-To: <1133975743.9141.7.camel@localhost.localdomain>
References: <E1EjwA3-00085E-00@pyramid.twistedmatrix.com>
	<1133975743.9141.7.camel@localhost.localdomain>
Message-ID: <20051211220430.GF23266@opteron.random>

On Wed, Dec 07, 2005 at 12:15:43PM -0500, Itamar Shtull-Trauring wrote:
> One way to discover if the OS-level poll() is the problem is to use
> oprofile; you should be able to use it to see how much time is spent in

Checking the system time with top may be enough, when poll is the
bottleneck the percentage of system time increases significantly. I
think with >5000 clients epoll is needed.

The memleak I guess is going to be an application bug (like forgetting
to remove an entry from a factory list when a client abruptly
disconnects or similar). FWIW I see no leaks with my usages, but OTOH I
use latest SVN/CVS of everything.



From warner at lothar.com  Mon Dec 12 02:00:55 2005
From: warner at lothar.com (Brian Warner)
Date: Mon, 12 Dec 2005 01:00:55 -0800 (PST)
Subject: [Twisted-Python] pb references
Message-ID: <20051212.010055.51677276.warner@lothar.com>

Micky Latowicki <ml.flex at gmail.com> writes:

> Now, B is apparently trying to send this RemoteReference to some third
> party, C. This is not allowed by twisted, possibly because that would
> often require forwarding messages from C to A through B, which can be
> inefficient and unreliable.

In PB we call this "serializing third-party references". and it's illustrated
concisely by the "Granovetter Diagram"[1] as described by papers on
distributed computing[2]. I also sometimes call it the "Gift" pattern. Micky
has described the situtation accurately, but I wanted to add some detail on
the whole third-party reference thing, because it's changing in newpb. Some
of this is pretty verbose, probably more information than anybody but a newpb
implementor is likely to care about, but I figured I'll throw it out there so
people can know what's going on behind the scenes.

oldpb refuses to serialize third-party references because there's no
reference-identification infrastructure in place to let the recipient
establish a direct connection to the originator. Each RemoteReference is
really just a connection-local ID number (the CLID), like "4", wrapped by a
bunch of code that implements callRemote(). The CLID is only meaningful when
it gets looked up by the Broker on the other end of the wire that it's scoped
to. So if B wants to send his RemoteReference(A) to C, the only way to send
something that C will actually be able to use would be to create a proxy
object that provides a whole bunch of methods like the following:

 def remote_foo(self, *args, **kwargs):
     return self.refA.callRemote("foo", *args, **kwargs)

(with suitable cleverness, you could make this into a generic Proxy object,
such that you didn't have to manually duplicate this for every single method
that A can respond to. Note that even in newpb this pattern is useful, so
we'll figure out some way to make it convenient: Revocable Forwarders,
Logging Proxies, and restricted Facets are all design patterns implemented
with proxy objects like these).

The issue of course is speed and resource consumption. With this proxy in
place, B has to be involved in every message between A and C, even if he
doesn't want to, adding at least an extra round trip for every method call.
Worse yet, B has to carefully watch the arguments and return values of all
the methods flying between A and C to see if either end has included a new
RemoteReference to some local object. If so, B has to create a new proxy for
that object too. (this is one of the obligations of a "Membrane", and is a
nuisance that would be nice to avoid).

Finally, one of the design goals of oldpb has been reasonable security: make
it slightly harder to accidentally leak information or authority. To this
end, objects must be declared pb.Referenceable to be remotely callable,
instances must inherit from pb.Copyable to be transferred across the wire,
and RemoteReferences cannot be sent to third parties. oldpb forces you to
make certain designations explicit. For both these reasons (and because it's
just too much of a hassle to implement), oldpb takes the easy way out and
punts, by disallowing third-party references and forcing the user to
implement a proxy if that's what they really want.

NEWPB

In newpb, things are much better. Assuming you make your Tub accessible to
the outside world (by telling it to listen on a port, and by telling it what
hostname+portno it's listening on), each Referenceable you publish gets a
PB-URL, which is then accessible from any other Tub, anywhere. (the return
value from tub.registerReference() is this PB-URL). To "gift" a
RemoteReference to a third party, you simply include the RemoteReference as
an argument in a callRemote (or return it from a remotely-invoked method),
and PB will handle the rest for you. This works by passing a special sequence
that includes the PB-URL of the target object, which the receiving side then
submits to tub.getReference() to obtain their own RemoteReference before
invoking the target method.

If you don't want to pass live references around, you can turn any
RemoteReference into a "SturdyRef" (which is like an object form of a PB-URL)
with rref.getSturdyRef(), and then pass *that*, since SturdyRefs are
pb.Copyable . You can also take a SturdyRef and pass it "live" to a remote
Tub, by doing something like:

 rref.callRemote("introduce", sturdy.asLiveRef())

whereupon the recipient's remote_introduce() method will be invoked with a
live RemoteReference to the target of the sturdyref.

The API is still up in the air, but my plan is for every RemoteReference you
pass over a wire to be given an unguessable PB-URL so that it is eligible for
being sent as a gift to a third-party Tub. (one possibility is that you have
to explicitly publish the ones that you want to be giftable.. there might be
a switch to turn this sort of thing on or off, it's a tradeoff of memory
consumption versus convenience). Another design question has to do with
object lifetime: in the current implementation, when B sends rref(A) to C, B
makes sure to keep it's handle on A alive until C confirms it has acquired
its own. This improves the chances that C will be able to acquire a live
reference, but it also allows a malicious C to force B to keep that rref
alive forever, wasting memory. The alternative is to just tell C to take
their chances, and maybe they'll wind up with a working RemoteReference, and
maybe they'll be unlucky and A will have garbage-collected that object by the
time they finish trying to acquire their own. Distributed garbage collection
is very tricky.

The object-lifetime design issues show up elsewhere too. Should an object,
once it gets sent over the wire (any wire), stay alive forever, just in case
somebody wrote down its URL and might some day come calling for it? Or should
it be allowed to vanish as soon as the last live reference is released? In
the current implementation, anything you submit to tub.registerReference()
will stay alive forever (where "forever" is equal to the lifetime of the
Tub), whereas objects that cross the wire in method invocations get
reference-counted and released when there are no more live references to
them. Correspondingly, objects submitted to tub.registerReference() get
globally-reachable names (PB-URLs), and are therefore eligible for gifting,
whereas objects merely crossing the wire do not (and cannot be gifted). The
latter needs to change, since *all* objects should be giftable, but it's
quite possible that the URL->object table will use weakrefs so that the
giftable/non-giftable distinction can be orthogonal to the
long-lived/ephemeral distinction. Tyler's trying to convince me to let
objects stay alive "forever", get rid of garbage collection and distributed
reference counting, and just use the Tub lifetime to reclaim memory or block
access to old objects. I'm not sure yet, though, it may become a flag you set
on the Tub.

One of the issues with allowing Gifts is that it opens up the possibility
that methods will be invoked out-of-order. In the present implementation, if
you do:

  a.callRemote("introduce", gift_rref_to_B)
  a.callRemote("second", 1, 2, 3)

then remote_second() will probably be invoked *first*, because the potential
call to remote_introduce() is held up waiting for gift_rref_to_B to be turned
into a real RemoteReference (which must wait for connection negotiation,
etc). I'm thinking that this will be changed (by queueing all method
invocations and stalling remote_second until remote_introduce has been
invoked), but I might add a flag that lets you choose between the two
behaviors. Setting the flag one way lets methods be invoked as quickly as
possible, setting it the other way forces them to be called in-order, even if
that adds arbitrarily long delays to deal with Gifts. I might add a flag
which would disable Gifts altogether, since they're a moderately advanced
feature and it might be confusing to have them work so transparently.

Finally, there's the complex issue of what kind of ordering guarantees to
make regarding methods invoked on gifted references. The E documents[3]
describe a situation where you'd like to make certain promises about the
relative ordering of methods invoked (by you) on some reference, versus
methods invoked (on that same reference) by someone else you've just given
that reference to. E (or VatTP, to be precise) suggests a funny kind of proxy
behavior called the WormholeOp[4] to provide these promises. At the moment,
newpb just punts on the issue, and only makes claims about the relative
ordering of messages sent on a *single connection*. If you want to make sure
that messages sent to or from different parties happen in some particular
order, you must wait for the first to complete before allowing the second to
occur. This might be improved in the future (once I understand the issue
better, for starters), but for now newpb's ordering guarantees may not be as
thorough as certain environments might prefer. (I *think* the only practical
consequence is that certain kinds of promise-pipelining optimizations cannot
be made, occasionally increasing the number of round trips, but really I
don't understand enough yet, and neither of the two people on the planet who
*do* understand enough have been able to explain it to me in a way that I can
get my head around).

Also, the proxy object described above (as the only way to accomplish
third-party references in oldpb) is actually quite useful, so newpb will
eventually make it easy and cheap to build them. One pattern is the Revocable
Forwarder, where you want to extend your authority to somebody else, but you
want to be able to cut them off if you change your mind. This is as simple as
an object that does the same sort of "def remote_foo(): return
self.refA.callRemote('foo')" thing as above, but adds an extra method
(exposed in a separate capability) that does 'del self.refA' to turn off all
forwarding at once. Another pattern is the restrictive Facet, which forwards
access to some (but not all) methods. Either of things might add logging,
where the caller doesn't notice anything special, but somebody else gets a
record of each method invoked.


Anyway, I just wanted to do a bit of a braindump on where third-party
references are going in newpb. The summary is that using them is as easy as
you think it ought to be. "make simple things simple", and all that :).

cheers,
 -Brian



[1]: "Ode to the Granovetter Diagram"
     http://www.erights.org/elib/capability/ode/index.html
[2]: pretty much everything at http://www.erights.org/
[3]: http://www.erights.org/elib/concurrency/partial-order.html
[4]: http://www.erights.org/elib/distrib/captp/WormholeOp.html



From william.lewis at uk.bnpparibas.com  Mon Dec 12 04:32:10 2005
From: william.lewis at uk.bnpparibas.com (william.lewis at uk.bnpparibas.com)
Date: Mon, 12 Dec 2005 11:32:10 +0000
Subject: [Twisted-Python] Re: pb references
In-Reply-To: <E1ElWQV-0007g8-02@pyramid.twistedmatrix.com>
Message-ID: <OFE0A4A2D5.459055F5-ON802570D5.0037FF88-802570D5.003F5ECA@bnpparibas.com>

> In short: you seem to be sending an reference you got through pb to
> another pb peer, which is not allowed.
>
> I hope that helps.

Yes, that was indeed the problem. My server was taking a root object
from a client and attempting to pass it on to another server as an
argument to a remote method. Thanks.

I now have a further question:

When my server takes the root object from a client it keeps and uses that 
object,
later on, to call remote methods on the client (as described in the docs).
What I am not sure about is what happens to the root object if the TCP/IP
connection goes down between the server and client.

Presumably, nothing will happen until I try to call a remote method on the
client?

In which case, how can the server attempt to reconnect to the client if it
only has the original root object given to it by the client and the 
connection
has temporarily gone down? Or is the client responsible for keeping the 
connection
open?

Thanks

William Lewis







This message and any attachments (the "message") is 
intended solely for the addressees and is confidential. 
If you receive this message in error, please delete it and
immediately notify the sender. Any use not in accord with
its purpose, any dissemination or disclosure, either whole
or partial, is prohibited except formal approval. The internet
can not guarantee the integrity of this message.
BNP PARIBAS (and its subsidiaries) shall (will) not
therefore be liable for the message if modified. 

**********************************************************************************************

BNP Paribas Private Bank London Branch is authorised
by CECEI & AMF and is regulated by the Financial Services
Authority for the conduct of its investment business in
the United Kingdom.

BNP Paribas Securities Services London Branch is authorised 
by CECEI & AMF and is regulated by the Financial Services 
Authority for the conduct of its investment business in 
the United Kingdom.
  
BNP Paribas Fund Services UK Limited is authorised and 
regulated by the Financial Services Authority

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051212/bfe6e55d/attachment.html>

From olivier.guilloux at gmail.com  Mon Dec 12 08:04:07 2005
From: olivier.guilloux at gmail.com (Kaladan)
Date: Mon, 12 Dec 2005 16:04:07 +0100
Subject: [Twisted-Python] How can I keep data integrity in multiple threads
	environment
Message-ID: <7fb2650a0512120704x5b9f3b02p@mail.gmail.com>

Hello,

I am new to twisted and I have a few questions: I have implemented a
TCPServer
and the associated Factory, which manages data and dispatches treatments
(According to the tutorial it's not the best solution but actually this is
not
the point ;) )

All of the treatments run in threads and thus use shared data. The allData
dictionnary is critical since it can be used by multiple threads. How can I
keep
the allData integrity ? Does Twisted core provide such facilites or do I
have to use semaphore or other stuff ?


class GestionnaireXXX(protocol.Protocol)
    def dataReceived(self, data):
        self.factory.dispatch(data)

class GestionnaireXXXFactory(protocol.ServerFactory):
    def __init__(self):
        self.allData = {}
        self.initData()
        self._dispatcher = {
            1: self.alert,
            4: self.create,
        }
    def initData(self):
        if os.path.isfile(TEMP)
            self.allData = aot.unjellyFromSource(file(TEMP, 'r'))
    def dispatch(self, data):
        splitedData = data.split('\n')
        method = self._dispatcher.get(len(splitedData), self.doNothing)
        reactor.runInThread(method, splitedData)

    def create(self, *data):
        # Some treatments on allData
        ...
        aot.jellyToSource(file(TEMP, 'w'))

    def alert(self, *unused):
        # XXX
        sem = DeferredSemaphore()
        sem.acquire()
        allDataCopy = self.allData.copy()
        self.allData.clear()
        sem.release()
        # End XXX
        # some long treatments on allDataCopy
        ...

Thank's,

--
Olivier Guilloux
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051212/94f8a4b6/attachment.html>

From p.mayers at imperial.ac.uk  Mon Dec 12 10:15:17 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 12 Dec 2005 17:15:17 +0000
Subject: [Twisted-Python] How can I keep data integrity in multiple threads
	environment
In-Reply-To: <7fb2650a0512120704x5b9f3b02p@mail.gmail.com>
References: <7fb2650a0512120704x5b9f3b02p@mail.gmail.com>
Message-ID: <439DB025.5080607@imperial.ac.uk>

Kaladan wrote:
> Hello,
> 
> I am new to twisted and I have a few questions: I have implemented a
> TCPServer
> and the associated Factory, which manages data and dispatches treatments
> (According to the tutorial it's not the best solution but actually this is
> not
> the point ;) )
> 
> All of the treatments run in threads and thus use shared data. The allData
> dictionnary is critical since it can be used by multiple threads. How can I
> keep
> the allData integrity ? Does Twisted core provide such facilites or do I
> have to use semaphore or other stuff ?

You have to do it yourself. Twisted is not thread-safe and does not 
provide any thread support beyond the two most basic methods to talk to 
threads: deferToThread/callInThread and callFromThread



From itamar at itamarst.org  Mon Dec 12 10:35:53 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 12 Dec 2005 12:35:53 -0500
Subject: [Twisted-Python] How can I keep data integrity in multiple
	threads environment
In-Reply-To: <7fb2650a0512120704x5b9f3b02p@mail.gmail.com>
References: <7fb2650a0512120704x5b9f3b02p@mail.gmail.com>
Message-ID: <1134408954.9006.3.camel@localhost.localdomain>

On Mon, 2005-12-12 at 16:04 +0100, Kaladan wrote:

> All of the treatments run in threads and thus use shared data. The
> allData
> dictionnary is critical since it can be used by multiple threads. How
> can I keep 
> the allData integrity ? Does Twisted core provide such facilites or do
> I
> have to use semaphore or other stuff ?

"Don't use threads" is a good way to start; unless you're calling into
blocking C libraries using threads won't help you much. Even if you are
(e.g. using Numeric, or DB-API or something), you can still avoid shared
data structures in most cases:

Get data from shared structure in the main (i.e. Twisted's) thread, hand
it to thread that does self-contained operation on data. Thread then
does callFromThread(self.putBackInSharedDataStructure, result), which
will run in the Twisted thread.





From a.poisel at acat.cc  Tue Dec 13 16:04:46 2005
From: a.poisel at acat.cc (Andreas Poisel)
Date: Wed, 14 Dec 2005 00:04:46 +0100
Subject: [Twisted-Python] threading issues with DB connection pooling and
	ReconnectingClientFactory
Message-ID: <20051213230446.GA29506@flake>

Hi Twisted Experts,

in my application I use ReconnectingClientFactory to handle a TCP
connection which is supposed to be permanent.  The server side (which is
not a twisted application) is very fragile and closes the connection
frequently.

The client has to do database queries on a regular basis and talk to the
server depending on the query results.  The client runs into a problem
with the following application flow:

 - Client and server are up and running, the database is queried
   frequently, server talks to client and vice versa, everything is
   fine.

 - The server closes the connection and the client stops it's database
   queries.

 - The server is reachable again, the client reconnects.

 - A database query on the client side is performed and we find
   something we want to transmit to the server.  But we fail because the
   transport object we use after our database query is not connected
   (transport.connected == 0 and transport.disconnected == 1).


These are my conclusions (maybe that's garbage):

The reconnection of the client works perfectly for the main reactor
thread.  But when we try a database query, we get a cached thread which
doesn't have a working transport object anymore.  Some experiments with
protocol and transport object id()s seem to second this assumption.

I've some ideas how to solve this problem:

 - Empty the thread pool after reconnecting and use "fresh threads" with
   valid transport objects.  I can't find a hint how to do this.

 - Pass a valid transport object to the thread which just did the
   database query.  I'm not sure how to do this properly.

 - Pass the query result back to the main thread.  Hmmm...


I would very much appreciate some hints on how to handle this problem
properly.

Thank you very much!
-- 
Regards, Andi



From andrew-twisted at puzzling.org  Tue Dec 13 17:47:12 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 14 Dec 2005 11:47:12 +1100
Subject: [Twisted-Python] threading issues with DB connection pooling and
	ReconnectingClientFactory
In-Reply-To: <20051213230446.GA29506@flake>
References: <20051213230446.GA29506@flake>
Message-ID: <20051214004712.GL4771@home.puzzling.org>

On Wed, Dec 14, 2005 at 12:04:46AM +0100, Andreas Poisel wrote:
[...]
> 
> I've some ideas how to solve this problem:
> 
[...]
>  - Pass a valid transport object to the thread which just did the
>    database query.  I'm not sure how to do this properly.

This implies to me that the real problem is that you are treating Twisted as if
it's thread-safe, when it explicitly isn't (except in very clearly defined,
narrow places, e.g. reactor.callFromThread).  See
http://twistedmatrix.com/projects/core/documentation/howto/threading.html

If you are using any Twisted objects, such as transports, in a thread, you are
doing something wrong.

>  - Pass the query result back to the main thread.  Hmmm...

This would be the way to do it.  You probably want to do something like 
"reactor.callFromThread(thing.gotResult, result)" in your thread.  Actually, you
probably want to fire a deferred with the result, which is easy to do:

    from twisted.internet.threads import deferToThread
    def queryDB(...):
        ...

    # run queryDB in a thread
    deferred = deferToThread(queryDB)

    # call gotResult when done
    deferred.addCallback(gotResult)

The twisted.enterprise.adbapi module works much like this.

-Andrew.




From foom at fuhm.net  Wed Dec 14 00:00:05 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 14 Dec 2005 00:00:05 -0700
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EmQcP-0003Jt-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-12-07 07:00:01.870000:
 Bugs opened: 9   Bugs closed: 2   Total open bugs: 500 (+7)
  Urgent: 1 (-1)
  Bug: 238 (+6)
  Feature: 178 (+2)
  Wish: 83 (+0)

New / Reopened Bugs
______________________
                    ==== Bug ====
[CGI, WEB2, WSGI] createCGIEnvironment fails to include ;parameters in PATH_INFO  (yesterday)
       http://twistedmatrix.com/bugs/issue1361 opened by cce

[BACKPORT, WEB2] twisted.web2.stream and wsgi  (yesterday)
       http://twistedmatrix.com/bugs/issue1362 opened by mkerrin

[TRIAL] [PATCH] Traceback running a test with broken setUp method  (2 days ago)
       http://twistedmatrix.com/bugs/issue1359 opened by headly

[TRIAL] Clean up Trial's Runner and Loader concepts  (5 days ago)
       http://twistedmatrix.com/bugs/issue1355 opened by jml

[WEB] [PATCH] microdom is not case sensitive when doing laterClosers  (2 days ago)
       http://twistedmatrix.com/bugs/issue1358 opened by Tv

[CORE] [PATCH] t.p.usage error messages mangle option case  (6 days ago)
       http://twistedmatrix.com/bugs/issue1354 opened by Tv

                    ==== Feature ====
[MAIL] IMessageDelivery.validateTo API simplification  (yesterday)
       http://twistedmatrix.com/bugs/issue1360 opened by Tv

sendFile handy API for FTPClient  (3 days ago)
       http://twistedmatrix.com/bugs/issue1357 opened by dialtone

                    ==== Wish ====
[MAIL] Twisted Mail/OS X performance problem  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1356 opened by exarkun

Bugs Closed
______________________
                    ==== Urgent ====
[TRIAL] trial loads test methods incorrectly  (7 days ago)
       http://twistedmatrix.com/bugs/issue1353 opened by hagna, closed by jml

                    ==== Wish ====
[MAIL] Twisted Mail/OS X performance problem  (3 days ago)
       http://twistedmatrix.com/bugs/issue1356 opened by exarkun, closed by exarkun




From jsbenson at bensonsystems.com  Wed Dec 14 01:40:47 2005
From: jsbenson at bensonsystems.com (John Benson)
Date: Wed, 14 Dec 2005 00:40:47 -0800
Subject: [Twisted-Python] Rails? Twisted versus J2EE? Metaprogramming as
	self-modifying code?
Message-ID: <439FDA8F.1010302@bensonsystems.com>

Hi, I did some Python and Twisted two years ago got distracted, picked 
up some IBM WebSphere certifications, got turned off by the verbosity of 
J2EE and suspected that there was a cleaner way to do it.

I just got through Bruce Tate's O'Reilly book /Beyond Java/ and am 
hearing the siren call of Ruby on Rails. Tate is unwilling to champion 
Ruby over Python or vice versa, but waxes poetic about Rails.

I know there is a Rail-like Python project (Subway?) but I'd like to 
know if there is a Rail-alike that works with Twisted.

Also, I'd like to hear about the advantages of J2EE over Twisted (if 
any), especially in the scalability and MQ Series connectivity areas. 
The little project I did with Python and Twisted was a joy and would 
easily have taken 4X the time and effort in a compiled environment. Now 
that I've seen what J2EE tries to do, I'm curious to see how Twisted 
stacks up against the J2EE specialties.

Comparisons between Python and Ruby will also interest, especially 
regarding ease of metaprogramming since this seems to be the arena in 
which the Next Big Thing will hit software practice with aspect-oriented 
programming, dependency injection and mixins. Kind of like when COBOL 
programmers had to learn pointers to deal with C, or when C programmers 
had to learn about objects to deal with C++ and/or Java.

By the way, I remember the campaign to stamp out self-modifying code 
back during the structured programming wars of the 1970's. Although the 
benefits of metaprogramming are attractive, isn't metaprogramming just 
self-modifying code at the object level? If so, should we just say no? 
If not, what has changed to make it reasonable now?




From p.mayers at imperial.ac.uk  Wed Dec 14 03:54:33 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 14 Dec 2005 10:54:33 +0000
Subject: [Twisted-Python] Rails? Twisted versus J2EE? Metaprogramming
	as	self-modifying code?
In-Reply-To: <439FDA8F.1010302@bensonsystems.com>
References: <439FDA8F.1010302@bensonsystems.com>
Message-ID: <439FF9E9.6070101@imperial.ac.uk>

John Benson wrote:
> Hi, I did some Python and Twisted two years ago got distracted, picked 
> up some IBM WebSphere certifications, got turned off by the verbosity of 
> J2EE and suspected that there was a cleaner way to do it.
> 
> I just got through Bruce Tate's O'Reilly book /Beyond Java/ and am 
> hearing the siren call of Ruby on Rails. Tate is unwilling to champion 
> Ruby over Python or vice versa, but waxes poetic about Rails.
> 
> I know there is a Rail-like Python project (Subway?) but I'd like to 
> know if there is a Rail-alike that works with Twisted.

Wrong place to ask really - twisted-web would be more appropriate.

Generally it's harder to be as "simple" as some of the Rails (mass 
produced) clones with async code, that being the entire point of Twisted.

But Divmod's Mantissa seems to be getting there - see innumerable recent 
posts by the guys here:

http://www.livejournal.com/users/jcalderone/
http://www.livejournal.com/users/glyf/

> 
> Also, I'd like to hear about the advantages of J2EE over Twisted (if 
> any), especially in the scalability and MQ Series connectivity areas.

I care about nothing below this line in the email, so will let others 
comment! :o)



From a.poisel at acat.cc  Wed Dec 14 04:33:10 2005
From: a.poisel at acat.cc (Andreas Poisel)
Date: Wed, 14 Dec 2005 12:33:10 +0100
Subject: [Twisted-Python] threading issues with DB connection pooling and
	ReconnectingClientFactory
In-Reply-To: <20051214004712.GL4771@home.puzzling.org>
References: <20051213230446.GA29506@flake>
	<20051214004712.GL4771@home.puzzling.org>
Message-ID: <20051214113310.GG29506@flake>

Andrew,

thank you for your comments.

* Andrew Bennetts <andrew-twisted at puzzling.org> [051214 02:00]:

> If you are using any Twisted objects, such as transports, in a thread, you are
> doing something wrong.

I'm really sorry, my assumptions were totally wrong.

>     # run queryDB in a thread
>     deferred = deferToThread(queryDB)

I'm using dbapi to query the database and now I understand that I'm back
in the main thread when the query results are available.

Now I think my problem (no valid transport object after reconnect) has
nothing to do with threads.

I'm using task.LoopingCall() to query the database frequently.  After
reconnecting to the server, the protocol object which is in charge for
the looping calls to the database does not reconnect to the server
automatically.  I think I have to stop() and start() the looping calls
after reconnecting to get a working transport again.

> The twisted.enterprise.adbapi module works much like this.

Sorry for wasting your time but you nevertheless helped me "getting"
some aspects of twisted.

-- 
Regards, Andi



From xuryans at gmail.com  Wed Dec 14 18:17:02 2005
From: xuryans at gmail.com (Xu Ryan)
Date: Thu, 15 Dec 2005 09:17:02 +0800
Subject: [Twisted-Python] How can a tcp client connect with multi servers?
In-Reply-To: <000001c5fe86$a5718440$6500a8c0@megisto.com>
References: <000001c5fe86$a5718440$6500a8c0@megisto.com>
Message-ID: <f6c194d30512141717w36e302b1q73533e6ff8fde4a9@mail.gmail.com>

hi, I use a pool for connect task, and recall it in some seconds. I
write some simple codes below to explain my idea, but i have not run
it, so just read it do not run it:)

from Queue import Queue

TaskQueue = Queue()

def sendTcp(addr, port, message):
    global TaskQueue
    TaskQueue.put((addr, port, message))

def __send():
    global TaskQueue
    while not TaskQueue.empty():
         addr, port, message = TaskQueue.pop()
         reactor.connectTCP(addr, port, FooFactory(message))

    reactor.callLater(15, __send)

if __name__ == "__main__":
    reactor.callLater(15, __send)
    reactor.run()

I'm appreciate to listen any advice
On 12/12/05, Khoa Nguyen <khoa.coffee at gmail.com> wrote:
>
> Hi Xu,
>
> How did you solve this problem? I face a similar issue and would appreciate
> if you post a working sample code
>
> Thanks,
> Khoa
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>


--
Xu Ryans



From olivier.guilloux at gmail.com  Thu Dec 15 09:23:23 2005
From: olivier.guilloux at gmail.com (Kaladan)
Date: Thu, 15 Dec 2005 17:23:23 +0100
Subject: [Twisted-Python] how to run a twisted daemon without tcpserver
Message-ID: <7fb2650a0512150823i3bf67c04t@mail.gmail.com>

Can I run a twisted daemon (twistd) without TCPServer, basically I want to
run
a reactor within an application, something like :
application = service.Application('myApp', uid=505, gid=506)
reactor.run(application)

Thank's
--
Olivier Guilloux
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051215/b24341a5/attachment.html>

From jim at zope.com  Thu Dec 15 14:22:21 2005
From: jim at zope.com (Jim Fulton)
Date: Thu, 15 Dec 2005 16:22:21 -0500
Subject: [Twisted-Python] WSGI Thread-management strategy
Message-ID: <43A1DE8D.8030604@zope.com>

The strategy used by twisted WSGI, as I understand it, doesn't meet
our needs. Currently, a thread is created for each request.  The total
number of threads is throttled, I gather using a general Twisted
thread limit.  WSGI applications are called as soon as input headers
have been received completely. An application may be called before all
body input is received.  We need application calls to be delayed until
all request input has been received,

In an application like Zope, application threads are expensive.  There
are application resources, such as database connections and caches
needed by the application threads.  To limit resource consumption, we
have to limit the number of application threads.  Because the number
of threads is limited, application threads are scarce and thus
valuable resources that need to be used very efficiently.  In
particular, we don't want to tie up an application thread waiting for
request body input.

I propose that the default thread-management strategy should be to delay
calling an application until all request input has been received. If
this isn't the default, then there should at least be an option to get
this behavior.  (Of course, the buffering strategy needs to be clever
enough to switch to a file when the input gets over some size.)

Thoughts?

Jim

-- 
Jim Fulton           mailto:jim at zope.com       Python Powered!
CTO                  (540) 361-1714            http://www.python.org
Zope Corporation     http://www.zope.com       http://www.zope.org



From jim at zope.com  Thu Dec 15 15:15:42 2005
From: jim at zope.com (Jim Fulton)
Date: Thu, 15 Dec 2005 17:15:42 -0500
Subject: [Twisted-Python] WSGI Thread-management strategy
In-Reply-To: <43A1DE8D.8030604@zope.com>
References: <43A1DE8D.8030604@zope.com>
Message-ID: <43A1EB0E.8070305@zope.com>

Jim Fulton wrote:
...
> In an application like Zope, application threads are expensive.

Of course, threads are expensive for all applications, to some degree.
Typically, they require at least a meg of stack space. No big deal
of you only have a few, but quire a problem if you had to have one
for each acrive request on a busy server.  But, of course, y'all
know this. That's why you use Twisted. :)

Jim

-- 
Jim Fulton           mailto:jim at zope.com       Python Powered!
CTO                  (540) 361-1714            http://www.python.org
Zope Corporation     http://www.zope.com       http://www.zope.org



From foom at fuhm.net  Fri Dec 16 10:14:34 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 16 Dec 2005 12:14:34 -0500
Subject: [Twisted-Python] WSGI Thread-management strategy
In-Reply-To: <43A1DE8D.8030604@zope.com>
References: <43A1DE8D.8030604@zope.com>
Message-ID: <B50EC6B5-6B3D-4254-9FC5-AD0CE32CC568@fuhm.net>

(BTW, the correct mailing list for twisted webbish stuff is twisted- 
web at twistedmatrix.com)
On Dec 15, 2005, at 4:22 PM, Jim Fulton wrote:

> The strategy used by twisted WSGI, as I understand it, doesn't meet
> our needs. Currently, a thread is created for each request.  The total
> number of threads is throttled, I gather using a general Twisted
> thread limit.  WSGI applications are called as soon as input headers
> have been received completely. An application may be called before all
> body input is received.  We need application calls to be delayed until
> all request input has been received,
>
> [...]
>
> I propose that the default thread-management strategy should be to  
> delay
> calling an application until all request input has been received. If
> this isn't the default, then there should at least be an option to get
> this behavior.  (Of course, the buffering strategy needs to be clever
> enough to switch to a file when the input gets over some size.)

Sounds sensible, and is doable external to the WSGI wrapper. Here's a  
little bit I whipped up. (works on the 2.1.x branch and head). Could  
be smarter, by starting out the buffer in memory and switching to a  
file if necessary. Also shows off a couple of minor bugs I need to  
fix. :)

def simple_wsgi_app(environ, start_response):
     print "Starting wsgi app"
     start_response("200 OK", [('Content-type','text/html;  
charset=ISO-8859-1')])
     data = environ['wsgi.input'].read()
     return ['<pre>', data, '</pre>']


class Prebuffer(resource.WrapperResource):
     def hook(self, ctx):
         req = iweb.IRequest(ctx)
         temp = tempfile.TemporaryFile()
         def done(_):
             temp.seek(0)
             # Replace the request's stream object with the tempfile
             req.stream = stream.FileStream(temp)
             # Hm, this shouldn't be required:
             req.stream.doStartReading = None
         return stream.readStream(req.stream, temp.write).addCallback 
(done)

     # Oops, fix missing () in lambda in WrapperResource
     def locateChild(self, ctx, segments):
         x = self.hook(ctx)
         if x is not None:
             return x.addCallback(lambda data: (self.res, segments))
         return self.res, segments

if __name__ == '__builtin__':
     from twisted.application import service, strports
     from twisted.web2 import server, channel

     res = Prebuffer(wsgi.WSGIResource(simple_wsgi_app))

     site = server.Site(res)
     application = service.Application("demo")

     s = strports.service('tcp:8080', channel.HTTPFactory(site))
     s.setServiceParent(application)




From jim at zope.com  Fri Dec 16 10:20:59 2005
From: jim at zope.com (Jim Fulton)
Date: Fri, 16 Dec 2005 12:20:59 -0500
Subject: [Twisted-Python] WSGI Thread-management strategy
In-Reply-To: <B50EC6B5-6B3D-4254-9FC5-AD0CE32CC568@fuhm.net>
References: <43A1DE8D.8030604@zope.com>
	<B50EC6B5-6B3D-4254-9FC5-AD0CE32CC568@fuhm.net>
Message-ID: <43A2F77B.80305@zope.com>

James Y Knight wrote:
> (BTW, the correct mailing list for twisted webbish stuff is twisted- 
> web at twistedmatrix.com)

Oops. OK, I'll reply there. :)

Jim

-- 
Jim Fulton           mailto:jim at zope.com       Python Powered!
CTO                  (540) 361-1714            http://www.python.org
Zope Corporation     http://www.zope.com       http://www.zope.org



From jcea at argo.es  Sat Dec 17 15:14:10 2005
From: jcea at argo.es (Jesus Cea)
Date: Sat, 17 Dec 2005 23:14:10 +0100
Subject: [Twisted-Python] Some beginner questions about
	"twisted.names.client" and ".tac" environment
Message-ID: <43A48DB2.5020609@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Twisted 2.1, twisted.named 0.2, here.

I'm taking my first steps with Twisted (documentation -inexistence-
nightmare :-), and my first project will be a bulk mailer as the backend
of my mailing list system.

The application would take the message and the subscriber list and a)
resolve the MX for the domains and b) connect to the MX's and send the
message, trying to minimice traffic sending a single envelope for
several recipients sharing the domain or the MX's.

I'm doing currently the DNS stuff. The result are promising, resolving
about 200 domains per second in a 1.4GHz P4, so my biggest mailing list
(about 31500 unique domains, múltiple subscribers per domain) is
"resolved" in less than three minutes.

Nice so far. The demo code (2Kbytes) is the following (if I'm violating
the rules posting this code, please tell me):

=====
# File "dns.tac"

from twisted.application import service

application = service.Application("DNS test")

import time
t=time.time()

class resolucion(object) :
  def __init__(self,dominio) :
    from twisted.names import client
    d = client.lookupMailExchange(dominio,timeout=(60,))
    d.addCallbacks(self._cbMailExchange, self._ebMailExchange)
    self.dominio=dominio

  def _cbMailExchange(self,results):
    # Callback for MX query
    global aun_pendientes
    aun_pendientes-=1
    if not aun_pendientes :
      print "OK",time.time()-t
      return
      from twisted.internet import reactor
      reactor.stop()
      return
    if not len(pendientes) :
      return

    resolucion(pendientes.pop())
    from twisted.names.dns import QUERY_TYPES
    for i in results[0] :
      n=i.payload.name
      tipo=QUERY_TYPES[i.payload.TYPE]
      if tipo=="MX" :
        return
        p=i.payload.preference
        print n,p,
        for j in results[2] :
          if n==j.name :
            print j.payload.dottedQuad(),"(%d)" %j.ttl
            break
        else :
          print "???"
      elif tipo=="CNAME" :
        redirigidos.append((self.dominio,i.payload.name))

  def _ebMailExchange(self,failure):
    # Error callback for MX query
    global aun_pendientes
    aun_pendientes-=1
    if not aun_pendientes :
      print "ERROR",time.time()-t
      return
      from twisted.internet import reactor
      reactor.stop()
      return
    if not len(pendientes) :
      return

    resolucion(pendientes.pop())
    print "XXX",self.dominio
    print 'Lookup failed:'
    failure.printTraceback()

pendientes=[]
redirigidos=[]

f=open("domain_list")
for i in f :
  pendientes.append(i)

aun_pendientes=len(pendientes)

concurrencia=1000

for i in pendientes[:concurrencia] :
  resolucion(i)

from twisted.names import client
client.theResolver.resolvers[-1].dynServers=[('127.0.0.1', 53)]
# client.theResolver.resolvers=[client.theResolver.resolvers[-1]]

pendientes=pendientes[concurrencia:]

=====

I launch the code as "twistd -ny dns.tac".

The demo does 1000 resolutions in parallel. If you experiment with the
code, reduce the value.

Questions:

1. I get a warning: "[Uninitialized]
/usr/local/lib/python2.4/site-packages/twisted/names/dns.py:1227:
exceptions.DeprecationWarning: Deferred.setTimeout is deprecated.  Look
for timeout support specific to the API you are using instead."

 I'm using, the native "twisted.names" timeout API, as far as I know...

2. By default "twisted.names.client" uses the "/etc/resolv.conf" file to
know which nameservers to use. I, nevertheless, want to use a particular
nameserver, so:

 2.1. I couldn't to find an appropiate API. I had to do a "hack",
reading the "twisted.names" core to know implementation details:
"client.theResolver.resolvers[-1].dynServers=[('127.0.0.1', 53)]"

 2.2. The previous "hack" is only effective for future
"twisted.names.client" instances. The previous ones use the
"/etc/resolv.conf" entries. Putting the "hack" code before any instance
creation doesn't work.

 2.3. While reading the framework code, I saw that "client" uses a
resolver chain: host, cache, network. But the cache is initially clear
(of course) and NEVER ever gets populated, so we are not using it but
checking missing entries eats CPU: 155 seconds for the unchanged code,
125 seconds if I drop the host and cache resolvers.

 A caching client would be very nice, if the client is long running (my
original idea).

 2.4. The resolution failure code is only called if the resolution
timeouts. But if the domain doesn't exists, the code called is the
"success" one, with a "nil" answer. So we can't diferenciate between
inexistant domains and inexistant RRs.

3. How can I stop this ".tac"?. If I do "reactor.stop()", I get an
infinite error, repeated forever:

=====

[twisted.names.dns.DNSDatagramProtocol (UDP)] Traceback (most recent
call last):
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/log.py", line 43,
in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line
59, in callWithContext
            return self.currentContext().callWithContext(ctx, func,
*args, **kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line
37, in callWithContext
            return func(*args,**kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py",
line 139, in _doReadOrWrite
            why = getattr(selectable, method)()
        --- <exception caught here> ---
          File
"/usr/local/lib/python2.4/site-packages/twisted/internet/udp.py", line
113, in doRead
            data, addr = self.socket.recvfrom(self.maxPacketSize)
        exceptions.AttributeError: 'Port' object has no attribute 'socket'

=====

I must kill -9 the "twistd" process.

Thank you for your time and attention. Help greatly appreciated :-)

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ6SNsplgi5GaxT1NAQLMQwP/czYFLQ6+olTCvM0jdmMlaBgwxHsHdvxT
/2mhWqtyhIf1Kdh6FioFQq13xqCfZxFIkwuUwTlG+ZmkSYK1iWZEmaS0CGa5YmuA
d7miIFfL9Tfa3OLyV1nvqdCR3YtzH/ws9UuJ2DGnACRI++Of6gBVwGlhFDa7S57o
wZcsYWAS6Sk=
=/Pks
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Sat Dec 17 16:10:16 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 17 Dec 2005 18:10:16 -0500
Subject: [Twisted-Python] Some beginner questions about
	"twisted.names.client" and ".tac" environment
In-Reply-To: <43A48DB2.5020609@argo.es>
Message-ID: <20051217231016.1217.997986057.divmod.quotient.6793@ohm>

On Sat, 17 Dec 2005 23:14:10 +0100, Jesus Cea <jcea at argo.es> wrote:
>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>Twisted 2.1, twisted.named 0.2, here.
>
>I'm taking my first steps with Twisted (documentation -inexistence-
>nightmare :-), and my first project will be a bulk mailer as the backend
>of my mailing list system.
>
>The application would take the message and the subscriber list and a)
>resolve the MX for the domains and b) connect to the MX's and send the
>message, trying to minimice traffic sending a single envelope for
>several recipients sharing the domain or the MX's.
>
>I'm doing currently the DNS stuff. The result are promising, resolving
>about 200 domains per second in a 1.4GHz P4, so my biggest mailing list
>(about 31500 unique domains, múltiple subscribers per domain) is
>"resolved" in less than three minutes.
>
>Nice so far. The demo code (2Kbytes) is the following (if I'm violating
>the rules posting this code, please tell me):
>
>=====
># File "dns.tac"
>
>from twisted.application import service
>
>application = service.Application("DNS test")
>

You probably want to move most of your program out if "dns.tac" and into an importable Python module.  Code defined inside .tac files lives in a weird world where some surprising rules apply.  It's best to keep the .tac file as short as possible.  Generally, you just want to create an Application and give it some children, importing from modules the definitions of all classes and functions needed to set this up.

>import time
>t=time.time()
>
>class resolucion(object) :
>  def __init__(self,dominio) :
>    from twisted.names import client
>    d = client.lookupMailExchange(dominio,timeout=(60,))

Passing (60,) as the timeout might not be the best idea.  This will cause the DNS client to send one request and then wait 60 seconds for a response.  If either the request or the response is dropped (as often happens with UDP traffic), you will never get a result, and you will have to wait 60 seconds to discover this fact.

If you don't want retransmission, a value of (15,) or so is probably better.  However, I suspect you really do want retransmissions.  The default timeout is also 60 seconds total, but performs several retransmissions during the interim.

>    d.addCallbacks(self._cbMailExchange, self._ebMailExchange)
>    self.dominio=dominio
>
>  def _cbMailExchange(self,results):
>    # Callback for MX query
>    global aun_pendientes
>    aun_pendientes-=1
>    if not aun_pendientes :
>      print "OK",time.time()-t
>      return
>      from twisted.internet import reactor
>      reactor.stop()
>      return
>    if not len(pendientes) :
>      return
>
>    resolucion(pendientes.pop())
>    from twisted.names.dns import QUERY_TYPES
>    for i in results[0] :
>      n=i.payload.name
>      tipo=QUERY_TYPES[i.payload.TYPE]
>      if tipo=="MX" :

You can just use dns.MX here, instead of looking up "MX" in QUERY_TYPES.

>        return
>        p=i.payload.preference
>        print n,p,
>        for j in results[2] :
>          if n==j.name :
>            print j.payload.dottedQuad(),"(%d)" %j.ttl
>            break
>        else :
>          print "???"
>      elif tipo=="CNAME" :
>        redirigidos.append((self.dominio,i.payload.name))
>
>  def _ebMailExchange(self,failure):
>    # Error callback for MX query
>    global aun_pendientes
>    aun_pendientes-=1
>    if not aun_pendientes :
>      print "ERROR",time.time()-t
>      return
>      from twisted.internet import reactor
>      reactor.stop()
>      return
>    if not len(pendientes) :
>      return
>
>    resolucion(pendientes.pop())
>    print "XXX",self.dominio
>    print 'Lookup failed:'
>    failure.printTraceback()
>
>pendientes=[]
>redirigidos=[]
>
>f=open("domain_list")
>for i in f :
>  pendientes.append(i)
>
>aun_pendientes=len(pendientes)
>
>concurrencia=1000
>
>for i in pendientes[:concurrencia] :
>  resolucion(i)
>
>from twisted.names import client
>client.theResolver.resolvers[-1].dynServers=[('127.0.0.1', 53)]
># client.theResolver.resolvers=[client.theResolver.resolvers[-1]]

To customize the server used by the resolver, you may want to create your own resolver instance, rather than relying on the defaults guessed by the resolver automatically created in the client module.

>
>pendientes=pendientes[concurrencia:]
>
>=====
>
>I launch the code as "twistd -ny dns.tac".
>
>The demo does 1000 resolutions in parallel. If you experiment with the
>code, reduce the value.
>
>Questions:
>
>1. I get a warning: "[Uninitialized]
>/usr/local/lib/python2.4/site-packages/twisted/names/dns.py:1227:
>exceptions.DeprecationWarning: Deferred.setTimeout is deprecated.  Look
>for timeout support specific to the API you are using instead."
>
> I'm using, the native "twisted.names" timeout API, as far as I know...

This is a problem internal to twisted.names.  Your code isn't doing anything wrong to cause it.  Hopefully this will be fixed by the next release.

>
>2. By default "twisted.names.client" uses the "/etc/resolv.conf" file to
>know which nameservers to use. I, nevertheless, want to use a particular
>nameserver, so:
>
> 2.1. I couldn't to find an appropiate API. I had to do a "hack",
>reading the "twisted.names" core to know implementation details:
>"client.theResolver.resolvers[-1].dynServers=[('127.0.0.1', 53)]"
>
> 2.2. The previous "hack" is only effective for future
>"twisted.names.client" instances. The previous ones use the
>"/etc/resolv.conf" entries. Putting the "hack" code before any instance
>creation doesn't work.
>
> 2.3. While reading the framework code, I saw that "client" uses a
>resolver chain: host, cache, network. But the cache is initially clear
>(of course) and NEVER ever gets populated, so we are not using it but
>checking missing entries eats CPU: 155 seconds for the unchanged code,
>125 seconds if I drop the host and cache resolvers.
>
> A caching client would be very nice, if the client is long running (my
>original idea).

All three of these can be addressed by constructing your own resolver:

  from twisted.names import client
  myResolver = client.Resolver(servers=[('127.0.0.1', 53)])

This gives you a resolver which uses only localhost, doesn't involve any nasty hacks, and doesn't have an /etc/hosts resolver or a caching resolver to slow things down.

>
> 2.4. The resolution failure code is only called if the resolution
>timeouts. But if the domain doesn't exists, the code called is the
>"success" one, with a "nil" answer. So we can't diferenciate between
>inexistant domains and inexistant RRs.

Hmm.  The non-existence of the domain is hidden by the very last step in performing the lookup.  The Resolver class has a method, filterAnswers, which is used to turn a DNS response into the three-tuple of lists which all the lookup* methods return.  You may want to subclass Resolver and override filterAnswers to behave differently when the `message' argument it is given has an `rCode' attribute equal to twisted.names.dns.ENAME, which indicates the name requested does not exist.

>
>3. How can I stop this ".tac"?. If I do "reactor.stop()", I get an
>infinite error, repeated forever:

reactor.stop() is the correct way to end the program.  If you still have this problem after you have split the program into multiple files, please post again.

Jean-Paul



From jcea at argo.es  Sat Dec 17 17:05:32 2005
From: jcea at argo.es (Jesus Cea)
Date: Sun, 18 Dec 2005 01:05:32 +0100
Subject: [Twisted-Python] Some beginner questions
	about	"twisted.names.client" and ".tac" environment
In-Reply-To: <20051217231016.1217.997986057.divmod.quotient.6793@ohm>
References: <20051217231016.1217.997986057.divmod.quotient.6793@ohm>
Message-ID: <43A4A7CC.7060505@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jean-Paul Calderone wrote:
> You probably want to move most of your program out if "dns.tac" and into
> an importable Python module.  Code defined inside .tac files lives in a
> weird world where some surprising rules apply.

Any documentation about that?

> It's best to keep the
> .tac file as short as possible.  Generally, you just want to create an
> Application and give it some children, importing from modules the
> definitions of all classes and functions needed to set this up.

I reduced the "dns3.tac" to:

=====

from twisted.application import service

application = service.Application("DNS test")

import sys
sys.path=["."]+sys.path
import dns3

=====

All logic is in "dns3.tac". Basically the same code posted in my
previous message.

I have the very same problem with "reactor.stop()": repeated exceptions,
only stoppable using "kill -9".

I don't get the "give it some children" point. Could you post some
sample code?.

> Passing (60,) as the timeout might not be the best idea.  This will
> cause the DNS client to send one request and then wait 60 seconds for a
> response.  If either the request or the response is dropped (as often
> happens with UDP traffic), you will never get a result, and you will
> have to wait 60 seconds to discover this fact.

I'm resolving several thousand of domains, so one minute more or less is
not an issue. I don't want to retransmit since I'm using 127.0.0.1, so
losing request (in the same machine) should be rare (udp backlog
overflow, basically).

Some domains takes a long time to resolve. So if I use an small value I
load the server and get "Unexpected message (XXXXX) received from
('127.0.0.1', 53)", caused because the DNS server gets a late answers
and my code already give up.

> If you don't want retransmission, a value of (15,) or so is probably
> better.

Then I get a lot of "unexpected DNS responses". Seems a fair number of
domains takes more than 15 seconds to fulfill the request :-p.

In any case this number is not really important. I'm more concerned
about the Twisted specific issues :p

> You can just use dns.MX here, instead of looking up "MX" in QUERY_TYPES.

Good point. Changes done.

> To customize the server used by the resolver, you may want to create
> your own resolver instance, rather than relying on the defaults guessed
> by the resolver automatically created in the client module.

Also a good point. Done and working fine.

How can I easily use the cache resolver?. My problem is updating the
cache when I get a response thru the network. In a long running daemon,
caching DNS when I'm serving several hundreds of email for day woul dbe
a big win.

Maybe with my own overloaded cache class, but seems an obvious addition
to standard twisted.names. :-? Maybe next release :-)

> Hmm.  The non-existence of the domain is hidden by the very last step in
> performing the lookup.  The Resolver class has a method, filterAnswers,
> which is used to turn a DNS response into the three-tuple of lists which
> all the lookup* methods return.  You may want to subclass Resolver and
> override filterAnswers to behave differently when the `message' argument
> it is given has an `rCode' attribute equal to twisted.names.dns.ENAME,
> which indicates the name requested does not exist.

That seems doable but an ugly hack :-). Perhaps a future "twisted.named"
release could include a flag to easily differenciate between missing RR
and nonexistent domain. Any hope?.

>> 3. How can I stop this ".tac"?. If I do "reactor.stop()", I get an
>> infinite error, repeated forever:
> 
> reactor.stop() is the correct way to end the program.  If you still have
> this problem after you have split the program into multiple files,
> please post again.

Program splitted. Same problem :-/

The dode is basically the same that in my previous email. Moved 99% of
code to "dns3.py". The dns3.tac" is trivial:

=====

from twisted.application import service

application = service.Application("DNS test")

import sys
sys.path=["."]+sys.path
import dns3

=====

Help appreciated. Thanks for you time and efford.

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ6SnzJlgi5GaxT1NAQLFgwP/U01pixJpJ39iwA8jZHOgfBJCOoOzI+h2
uhWh3bWHcecXddhutTCCwJb9rw1VFLBwTCyzoSXx2Qn6c1qLgKkSIt/My9RDD0js
BPhJ2AV+8zQyc7ySAdYM3pTy4HNjw5JviDsymHs3KWw3AMDR/JhN46bXBgqARZtM
IIe1xBs/HZc=
=rXOt
-----END PGP SIGNATURE-----



From jcea at argo.es  Sat Dec 17 17:10:24 2005
From: jcea at argo.es (Jesus Cea)
Date: Sun, 18 Dec 2005 01:10:24 +0100
Subject: [Twisted-Python] Some beginner questions
	about	"twisted.names.client" and ".tac" environment
In-Reply-To: <43A4A7CC.7060505@argo.es>
References: <20051217231016.1217.997986057.divmod.quotient.6793@ohm>
	<43A4A7CC.7060505@argo.es>
Message-ID: <43A4A8F0.9060504@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jesus Cea wrote:
> All logic is in "dns3.tac". Basically the same code posted in my
> previous message.

Sorry. Logic in "dns3.py", of course.

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ6So8Jlgi5GaxT1NAQIAVAP/fKxYtCRfIYA2n6Y9cyV3WPOsKfnaZqYu
Nsq+0e0YwokLVFWB/33nAcnRZ2muW52Mmf4FHp/sFunzQ5gmwcF7+bSQVrN6+AYt
g7do010nvONSOzJYLX9DJqwDD3r7DObbhvkAa4+0XLBEb7D394ErnhM50eIwwYNZ
pQuFEZ5j264=
=1N+i
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Sat Dec 17 17:55:04 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 17 Dec 2005 19:55:04 -0500
Subject: [Twisted-Python] Some beginner questions
	about	"twisted.names.client" and ".tac" environment
In-Reply-To: <43A4A7CC.7060505@argo.es>
Message-ID: <20051218005504.1217.2114116549.divmod.quotient.6796@ohm>

On Sun, 18 Dec 2005 01:05:32 +0100, Jesus Cea <jcea at argo.es> wrote:
>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>Jean-Paul Calderone wrote:
>> You probably want to move most of your program out if "dns.tac" and into
>> an importable Python module.  Code defined inside .tac files lives in a
>> weird world where some surprising rules apply.
>
>Any documentation about that?
>

Hmmm, not that I know of.  The problems are all essentially consequences of the fact that .tac files are run using the built-in execfile() function (or equivalent), rather than being loaded as modules.

>> It's best to keep the
>> .tac file as short as possible.  Generally, you just want to create an
>> Application and give it some children, importing from modules the
>> definitions of all classes and functions needed to set this up.
>
>I reduced the "dns3.tac" to:
>
>=====
>
>from twisted.application import service
>
>application = service.Application("DNS test")
>
>import sys
>sys.path=["."]+sys.path
>import dns3
>
>=====
>
>All logic is in "dns3.tac". Basically the same code posted in my
>previous message.
>
>I have the very same problem with "reactor.stop()": repeated exceptions,
>only stoppable using "kill -9".
>
>I don't get the "give it some children" point. Could you post some
>sample code?.

You want to tie your application logic to a Service subclass.  To start with, I'd try something like this, in dns3.py:

  from twisted.application import service

  class DomainResolver(service.Service):
      def startService(self):
          # Copied the top-level code from the original dns.tac
          pendientes = []
          redirigidos = []
          f = open("domain_list")
          for i in f :
              pendientes.append(i)
          aun_pendientes = len(pendientes)
          concurrencia = 1000
          for i in pendientes[:concurrencia]:
              resolucion(i)
          pendientes=pendientes[concurrencia:]

Then, in dns3.tac after application is defined,

    from dns import DomainResolver
    DomainResolver().setServiceParent(application)

This will delay the execution of your startup code until twistd is totally ready and the reactor is fully initialized.

>
>> Passing (60,) as the timeout might not be the best idea.  This will
>> cause the DNS client to send one request and then wait 60 seconds for a
>> response.  If either the request or the response is dropped (as often
>> happens with UDP traffic), you will never get a result, and you will
>> have to wait 60 seconds to discover this fact.
>
>I'm resolving several thousand of domains, so one minute more or less is
>not an issue. I don't want to retransmit since I'm using 127.0.0.1, so
>losing request (in the same machine) should be rare (udp backlog
>overflow, basically).
>
>Some domains takes a long time to resolve. So if I use an small value I
>load the server and get "Unexpected message (XXXXX) received from
>('127.0.0.1', 53)", caused because the DNS server gets a late answers
>and my code already give up.
>

Okay, it sounds like you know what you're doing here :)

> [snip]
>
>> To customize the server used by the resolver, you may want to create
>> your own resolver instance, rather than relying on the defaults guessed
>> by the resolver automatically created in the client module.
>
>Also a good point. Done and working fine.
>
>How can I easily use the cache resolver?. My problem is updating the
>cache when I get a response thru the network. In a long running daemon,
>caching DNS when I'm serving several hundreds of email for day woul dbe
>a big win.
>
>Maybe with my own overloaded cache class, but seems an obvious addition
>to standard twisted.names. :-? Maybe next release :-)

I think the current caching resolver was a step in the wrong direction.  A cache should probably *wrap* another resolver, not whatever weird thing it is doing now.

If you write such a thing, it'd be great if you could submit it for inclusion :)

>
>> Hmm.  The non-existence of the domain is hidden by the very last step in
>> performing the lookup.  The Resolver class has a method, filterAnswers,
>> which is used to turn a DNS response into the three-tuple of lists which
>> all the lookup* methods return.  You may want to subclass Resolver and
>> override filterAnswers to behave differently when the `message' argument
>> it is given has an `rCode' attribute equal to twisted.names.dns.ENAME,
>> which indicates the name requested does not exist.
>
>That seems doable but an ugly hack :-). Perhaps a future "twisted.named"
>release could include a flag to easily differenciate between missing RR
>and nonexistent domain. Any hope?.

I think flags like this are ugly hacks as well.  I completely agree that subclass/override is not a great way to get this functionality, but I'd like to think of a cleaner way to offer the new feature while still maintaining backwards compatibility.

>
>>> 3. How can I stop this ".tac"?. If I do "reactor.stop()", I get an
>>> infinite error, repeated forever:
>>
>> reactor.stop() is the correct way to end the program.  If you still have
>> this problem after you have split the program into multiple files,
>> please post again.
>
>Program splitted. Same problem :-/
>
>The dode is basically the same that in my previous email. Moved 99% of
>code to "dns3.py". The dns3.tac" is trivial:

Try the service class I used above.  If you still see the exception, it may indicate a bug in Twisted's UDP support.  If this case, could you attach the new version of the whole program?  I'll take a closer look and see if I can nail down the exact cause.

Jean-Paul



From jcea at argo.es  Sun Dec 18 08:16:06 2005
From: jcea at argo.es (Jesus Cea)
Date: Sun, 18 Dec 2005 16:16:06 +0100
Subject: [Twisted-Python] Some beginner
	questions	about	"twisted.names.client" and ".tac" environment
In-Reply-To: <20051218005504.1217.2114116549.divmod.quotient.6796@ohm>
References: <20051218005504.1217.2114116549.divmod.quotient.6796@ohm>
Message-ID: <43A57D36.2050308@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jean-Paul Calderone wrote:

> You want to tie your application logic to a Service subclass.  To start
> with, I'd try something like this, in dns3.py:

The very same error :-(.

My code for "dns3.tac":

=====

from twisted.application import service

application = service.Application("DNS test")

import sys
sys.path=["."]+sys.path

from dns3 import DomainResolver
DomainResolver().setServiceParent(application)

=====

My code for "dns3.py":

=====

class resolucion(object) :
  def __init__(self,dominio) :
    global myResolver
    d = myResolver.lookupMailExchange(dominio,timeout=(1,))
    d.addCallbacks(self._cbMailExchange, self._ebMailExchange)
    self.dominio=dominio

  def _cbMailExchange(self,results):
    # Callback for MX query
    global aun_pendientes
    aun_pendientes-=1
    if not aun_pendientes :
      import time
      print "OK",time.time()-t
      #return
      from twisted.internet import reactor
      reactor.stop()
      return
    if not len(pendientes) :
      return

    resolucion(pendientes.pop())
    from twisted.names import dns
    for i in results[0] :
      n=i.payload.name
      tipo=i.payload.TYPE
      if tipo==dns.MX :
        return
        p=i.payload.preference
        print n,p,
        for j in results[2] :
          if n==j.name :
            print j.payload.dottedQuad(),"(%d)" %j.ttl
            break
        else :
          print "???"
      elif tipo==dns.CNAME :
        redirigidos.append((self.dominio,i.payload.name))

  def _ebMailExchange(self,failure):
    # Error callback for MX query
    global aun_pendientes
    aun_pendientes-=1
    if not aun_pendientes :
      import time
      print "ERROR",time.time()-t
      #return
      from twisted.internet import reactor
      reactor.stop()
      return
    if not len(pendientes) :
      return

    resolucion(pendientes.pop())
    print "XXX",self.dominio
    print 'Lookup failed:'
    failure.printTraceback()



from twisted.application import service

class DomainResolver(service.Service):
  def startService(self) :
    global pendientes,redirigidos,aun_pendientes,t,myResolver

    from twisted.names import client
    myResolver=client.Resolver(servers=[('127.0.0.1', 53)])

    import time
    t=time.time()

    pendientes=[]
    redirigidos=[]

    f=open("z1")
    for i in f :
      pendientes.append(i.split()[0])
    f.close()

    aun_pendientes=len(pendientes)

    concurrencia=1

    for i in pendientes[:concurrencia] :
      resolucion(i)

    pendientes=pendientes[concurrencia:]

=====


> This will delay the execution of your startup code until twistd is
> totally ready and the reactor is fully initialized.

Done, but not working :-(

[... DNS timeouts ...]
> Okay, it sounds like you know what you're doing here :)

I like to think so };-)

> I think the current caching resolver was a step in the wrong direction. 
> A cache should probably *wrap* another resolver, not whatever weird
> thing it is doing now.

I agree. Perhaps a subclass of the network DNS resolver could be fine.
So we could have a "client" class and a "cachingClient" one.

In any case, current code simply doesn't cache anything, but eats CPU
cycles.

> If you write such a thing, it'd be great if you could submit it for
> inclusion :)

I'm not familiar enough with Twisted internal, yet, to try.
Nevertheless, I would suggest an optional parameter in the caching
resolver constructor, pointing to a callable object to resolve misses.
Sort of. Code changes would be minimal...

[... about differenciatiing DNS misses from RR misses...]
> I think flags like this are ugly hacks as well.  I completely agree that
> subclass/override is not a great way to get this functionality, but I'd
> like to think of a cleaner way to offer the new feature while still
> maintaining backwards compatibility.

Keep me informed :-p

> Try the service class I used above.  If you still see the exception, it
> may indicate a bug in Twisted's UDP support.  If this case, could you
> attach the new version of the whole program?  I'll take a closer look
> and see if I can nail down the exact cause.

Not working. Same exception. Code posted.

Thanks a lot for your help, Jean Paul. Greatly appreciated.

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ6V9Nplgi5GaxT1NAQKAOwP9H251Jjvd/kNPJf7R+S9faHN9YFcSBluL
YgBleuECDUG5WvJV2O+ZJwkHr05+qQ4qGzD13ydWnxdNCG1UMgWmIJ+TNfu2hOKN
L+rQmNKIUKuPFTOHA+tACYqJaE9rkkcJumR7FON81kNJdEShs52aNUlnc1Q6A9IB
iFyfaa9jcVI=
=V82G
-----END PGP SIGNATURE-----



From viktor.ransmayr at t-online.de  Sun Dec 18 14:29:50 2005
From: viktor.ransmayr at t-online.de (Viktor Ransmayr)
Date: Sun, 18 Dec 2005 22:29:50 +0100
Subject: [Twisted-Python] Problem w/ TNPE Example on Windows
Message-ID: <43A5D4CE.6080205@t-online.de>

Hello,

    I'm new to Twisted and just started reading "Twisted Network Programming
Essentials".

The example "dataforward.py" in chapter 2 creates a traceback and an import
error, if executed on my laptop running WinXP/Pro-SP2, using Python-2.4.2
and Twisted-2.1.0

The import error complains about a missing module "fcntl" required by
...\twisted\internet\fdesc.py

Reading the python documentation states that the "fcntl" module is 
available on
Unix only. - Does that mean, that this example is working on Unix only or
what am I missing?

Kind regards,

    Viktor Ransmayr








From andrew-twisted at puzzling.org  Sun Dec 18 16:09:39 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 19 Dec 2005 10:09:39 +1100
Subject: [Twisted-Python] Problem w/ TNPE Example on Windows
In-Reply-To: <43A5D4CE.6080205@t-online.de>
References: <43A5D4CE.6080205@t-online.de>
Message-ID: <20051218230939.GE8331@home.puzzling.org>

On Sun, Dec 18, 2005 at 10:29:50PM +0100, Viktor Ransmayr wrote:
> Hello,
> 
>    I'm new to Twisted and just started reading "Twisted Network Programming
> Essentials".
> 
> The example "dataforward.py" in chapter 2 creates a traceback and an import
> error, if executed on my laptop running WinXP/Pro-SP2, using Python-2.4.2
> and Twisted-2.1.0
> 
> The import error complains about a missing module "fcntl" required by
> ...\twisted\internet\fdesc.py
> 
> Reading the python documentation states that the "fcntl" module is 
> available on
> Unix only. - Does that mean, that this example is working on Unix only or
> what am I missing?

That's right, unfortunately.  That example uses the twisted.internet.stdio
module, which relies on fcntl (and the ability to pass the stdin/stdout file
descriptors to select), which isn't available on Windows.

-Andrew.




From olivier.guilloux at gmail.com  Mon Dec 19 02:46:26 2005
From: olivier.guilloux at gmail.com (Kaladan)
Date: Mon, 19 Dec 2005 10:46:26 +0100
Subject: [Twisted-Python] Is it necessary to create a new reactor to
	daemonize a File Alteration Monitoring system
Message-ID: <7fb2650a0512190146x311421caj@mail.gmail.com>

Hello,

I manage to write a file system monitoring daemon based on gamin (
http://gnome.org/~veillard/gamin/) thanks to twisted API.
Therefore I have created a new reactor, which inherit from the ReactorBase.
In order to use the twistd application runner I have a GaminService which
define a simple StartService.

Am I in the good way ?

The code is in attachment
--
Olivier Guilloux
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051219/0e7d305e/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: GaminReactor.py
Type: text/x-python
Size: 3772 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20051219/0e7d305e/attachment-0002.py>

From tv at twistedmatrix.com  Mon Dec 19 08:24:36 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 19 Dec 2005 17:24:36 +0200
Subject: [Twisted-Python] Is it necessary to create a new reactor
	to	daemonize a File Alteration Monitoring system
In-Reply-To: <7fb2650a0512190146x311421caj@mail.gmail.com>
References: <7fb2650a0512190146x311421caj@mail.gmail.com>
Message-ID: <43A6D0B4.9080607@twistedmatrix.com>

Kaladan wrote:
> I manage to write a file system monitoring daemon based on gamin
> (http://gnome.org/~veillard/gamin/) thanks to twisted API.
> Therefore I have created a new reactor, which inherit from the
> ReactorBase. In order to use the twistd application runner I have a
> GaminService which define a simple StartService.

Creating a new reactor is a horrible way to do that.
I guess you should either

1) use get_fd(), an existing reactor and handle_events() to talk to
   gamin in a non-blocking way (and if that proves impossible, work on
   improving the gamin client side library or python bindings so that it
   becomes possible)

   (plug the result of get_fd() as a readable fd in a reactor, whenever
   it is readable, call handle_events(); the web docs don't explain if
   non-blocking add of watchers is supported or not)

OR

2) reimplement the gamin client protocol from scratch with twisted.



From abe at fettig.net  Mon Dec 19 09:23:01 2005
From: abe at fettig.net (Abe Fettig)
Date: Mon, 19 Dec 2005 11:23:01 -0500
Subject: [Twisted-Python] Problem w/ TNPE Example on Windows
In-Reply-To: <20051218230939.GE8331@home.puzzling.org>
References: <43A5D4CE.6080205@t-online.de>
	<20051218230939.GE8331@home.puzzling.org>
Message-ID: <43A6DE65.9040908@fettig.net>

Andrew Bennetts wrote:

>>Reading the python documentation states that the "fcntl" module is 
>>available on
>>Unix only. - Does that mean, that this example is working on Unix only or
>>what am I missing?
> 
> 
> That's right, unfortunately.  That example uses the twisted.internet.stdio
> module, which relies on fcntl (and the ability to pass the stdin/stdout file
> descriptors to select), which isn't available on Windows.

And unfortunately I failed to notice this while writing the book.
Apologies to Windows users. Is it really impossible to do asynchronous
IO on stdin/out on Windows? Anybody have any ideas for working around
the lack of fcntl? I'd be happy to contribute to an effort to make
twisted.internet.stdio run on Windows.

Abe



From itamar at itamarst.org  Mon Dec 19 10:02:15 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 19 Dec 2005 12:02:15 -0500
Subject: [Twisted-Python] Problem w/ TNPE Example on Windows
In-Reply-To: <43A6DE65.9040908@fettig.net>
References: <43A5D4CE.6080205@t-online.de>
	<20051218230939.GE8331@home.puzzling.org> <43A6DE65.9040908@fettig.net>
Message-ID: <1135011736.15405.2.camel@localhost.localdomain>

On Mon, 2005-12-19 at 11:23 -0500, Abe Fettig wrote:

> And unfortunately I failed to notice this while writing the book.
> Apologies to Windows users. Is it really impossible to do asynchronous
> IO on stdin/out on Windows? Anybody have any ideas for working around
> the lack of fcntl? I'd be happy to contribute to an effort to make
> twisted.internet.stdio run on Windows.

*mumble* *mumble* *blush*. That's my fault, since I did know that. 

It may be possible to do stdio on Windows using the IOCP reactor.




From foom at fuhm.net  Mon Dec 19 11:19:34 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 19 Dec 2005 13:19:34 -0500
Subject: [Twisted-Python] Problem w/ TNPE Example on Windows
In-Reply-To: <43A6DE65.9040908@fettig.net>
References: <43A5D4CE.6080205@t-online.de>
	<20051218230939.GE8331@home.puzzling.org>
	<43A6DE65.9040908@fettig.net>
Message-ID: <BD442F5B-56C2-4A97-A406-E91E1AB8D4B7@fuhm.net>


On Dec 19, 2005, at 11:23 AM, Abe Fettig wrote:

> Andrew Bennetts wrote:
>
>
>>> Reading the python documentation states that the "fcntl" module is
>>> available on
>>> Unix only. - Does that mean, that this example is working on Unix  
>>> only or
>>> what am I missing?
>>>
>>
>>
>> That's right, unfortunately.  That example uses the  
>> twisted.internet.stdio
>> module, which relies on fcntl (and the ability to pass the stdin/ 
>> stdout file
>> descriptors to select), which isn't available on Windows.
>>
>
> And unfortunately I failed to notice this while writing the book.
> Apologies to Windows users. Is it really impossible to do asynchronous
> IO on stdin/out on Windows? Anybody have any ideas for working around
> the lack of fcntl? I'd be happy to contribute to an effort to make
> twisted.internet.stdio run on Windows.

In the worst case, it could be emulated using threads doing blocking  
read/write.

James




From pmezard at gmail.com  Mon Dec 19 13:06:13 2005
From: pmezard at gmail.com (=?ISO-8859-1?Q?Patrick_M=E9zard?=)
Date: Mon, 19 Dec 2005 21:06:13 +0100
Subject: [Twisted-Python] Re: Problem w/ TNPE Example on Windows
In-Reply-To: <1135011736.15405.2.camel@localhost.localdomain>
References: <43A5D4CE.6080205@t-online.de>	<20051218230939.GE8331@home.puzzling.org>
	<43A6DE65.9040908@fettig.net>
	<1135011736.15405.2.camel@localhost.localdomain>
Message-ID: <do73o3$coi$1@sea.gmane.org>

Itamar Shtull-Trauring a écrit :
> On Mon, 2005-12-19 at 11:23 -0500, Abe Fettig wrote:
> 
> 
>>And unfortunately I failed to notice this while writing the book.
>>Apologies to Windows users. Is it really impossible to do asynchronous
>>IO on stdin/out on Windows? Anybody have any ideas for working around
>>the lack of fcntl? I'd be happy to contribute to an effort to make
>>twisted.internet.stdio run on Windows.
> 
> 
> *mumble* *mumble* *blush*. That's my fault, since I did know that. 
> 
> It may be possible to do stdio on Windows using the IOCP reactor.

Talking about that, what is the exact status of the IOCP reactor? I have 
seen J. Johnson commiting patches related to process creation recently. 
Are there still mandatory features missing to have complete reactor?

Patrick Mézard




From paul-lists at perforge.com  Mon Dec 19 13:27:55 2005
From: paul-lists at perforge.com (Paul G)
Date: Mon, 19 Dec 2005 15:27:55 -0500
Subject: [Twisted-Python] xpost: multiple job openings
Message-ID: <00e801c604da$b1c3f930$6402a8c0@dcore>

folks,

i'm crossposting this to twisted-python-l and twisted-web-l for the benefit 
of those who don't read both. apologies to those who will consequently have 
to read this twice.

---
We've got multiple job openings for great engineers familiar with python and 
twisted, senior and junior positions available. We're building a small team 
of folks who like working hard, solving interesting problems, writing clean 
code and having fun doing it. If you got into coding because that's where 
the money was in the '90s, please skip this one and see my next job posting 
where I'm recruiting bodyguards for work in the Persian Gulf.

The dev team is run by an engineer ('run' in the sense that I shield you 
from the crazy business folk), so it is a strict meritocracy. You will be 
working on rebuilding/refactoring an existing PHP (ugh) web application into 
python services built on top of twisted as well as implementing new 
features. This is a high volume system, with millions of transactions a 
day - if you dig concurrency, you won't be bored. Must be able to handle the 
excitement ;)

Requirements:
* We're looking for great engineers - while your ability to discuss 
Wittgenstein over our 5th beer is welcome,
  a piece of paper^W^W^Wdiploma is not required.
* You should be old enough not to get us in trouble with Amnesty 
International for child exploitation.
* Experience working on hobby, open source and commercial projects counts 
with me.
* Python/Twisted and SQL a must.
* Reading/grokking bad PHP code a big plus. Writing PHP code useful, since 
we'll be hacking in the twisted/python bits over time.
* Javascript/DHTML/AJAX(ugh, buzzowrd) familiarity needed in at least one 
hire, so a plus.
* Experience with C and ASM good in that it is a good predictor of your 
understanding of memory allocation and performance issues.
* Don't mention Java, unless it has caused a medical (eg mental health) 
problem we should know about. <grin>
* Understanding of performance and scalability principles and issues.

Work environment:
* Onsite in NYC/NY Metro area strongly preferred.
* Don't let the above deter you - we can make telecommuting work under the 
right conditions.
* Competitive compensation - I know what good people are worth and have 
managed to beat that into the management with a clue-by-four.
* Flex time - relaxed cluture - getting your job done is all that matters.
---

Shoot me a resume, CV, writeup of what you've done, absolutely anything. Put 
[twisted-resume] in the subject. Include your phone number, time zone and a 
good time to call. I'll respond to everyone.

cheers,
-p 




From itamar at itamarst.org  Mon Dec 19 15:03:26 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 19 Dec 2005 17:03:26 -0500
Subject: [Twisted-Python] Re: Problem w/ TNPE Example on Windows
In-Reply-To: <do73o3$coi$1@sea.gmane.org>
References: <43A5D4CE.6080205@t-online.de>
	<20051218230939.GE8331@home.puzzling.org> <43A6DE65.9040908@fettig.net>
	<1135011736.15405.2.camel@localhost.localdomain>
	<do73o3$coi$1@sea.gmane.org>
Message-ID: <1135029806.23645.28.camel@localhost.localdomain>

On Mon, 2005-12-19 at 21:06 +0100, Patrick Mézard wrote:

> Talking about that, what is the exact status of the IOCP reactor? I have 
> seen J. Johnson commiting patches related to process creation recently. 
> Are there still mandatory features missing to have complete reactor?

At the minimum, producer/consumer API and passing tests; TLS/SSL support
would also be a very useful addition however.




From abe at fettig.net  Mon Dec 19 20:52:15 2005
From: abe at fettig.net (Abe Fettig)
Date: Mon, 19 Dec 2005 22:52:15 -0500
Subject: [Twisted-Python] Problem w/ TNPE Example on Windows
In-Reply-To: <1135011736.15405.2.camel@localhost.localdomain>
References: <43A5D4CE.6080205@t-online.de>	<20051218230939.GE8331@home.puzzling.org>
	<43A6DE65.9040908@fettig.net>
	<1135011736.15405.2.camel@localhost.localdomain>
Message-ID: <43A77FEF.1000102@fettig.net>

Itamar Shtull-Trauring wrote:
> On Mon, 2005-12-19 at 11:23 -0500, Abe Fettig wrote:
> 
> 
>>And unfortunately I failed to notice this while writing the book.
>>Apologies to Windows users. Is it really impossible to do asynchronous
>>IO on stdin/out on Windows? Anybody have any ideas for working around
>>the lack of fcntl? I'd be happy to contribute to an effort to make
>>twisted.internet.stdio run on Windows.
> 
> 
> *mumble* *mumble* *blush*. That's my fault, since I did know that. 

No, it's my fault. Don't worry about it. The buck stops here. You can
make it up to me by helping make twisted.internet.stdio work on Windows
though :-)

> It may be possible to do stdio on Windows using the IOCP reactor.

According to the inline docs, twisted.internet.stdio is:

  unstable (pending deprecation in favor of a reactor-based API)
  Future Plans:
    support for stderr, perhaps
    Rewrite to use the reactor instead of an ad-hoc
        mechanism for connecting
        protocols to transport.

So for now, stdio in Twisted isn't reactor specific. As we're discussing
here, though, it only works on Unixy operating systems. Would it be sane
to try and import the fcntl module, and if that fails fall back to using
threads to fake async stdio?

Abe



From p.mayers at imperial.ac.uk  Tue Dec 20 10:52:55 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 20 Dec 2005 17:52:55 +0000
Subject: [Twisted-Python] Twisted conch bad key signatures
Message-ID: <43A844F7.1090507@imperial.ac.uk>

All,

I've got an SSH server (Extremeware 7.3 router) which OpenSSH can SFTP 
into without problem but Twisted Conch reports:

2005/12/20 17:50 GMT [-] Log opened.
2005/12/20 17:50 GMT [-] Enabling Multithreading.
2005/12/20 17:50 GMT [Transport,client] kex alg, key alg: 
diffie-hellman-group1-sha1 ssh-dss
2005/12/20 17:50 GMT [Transport,client] client->server: 3des-cbc 
hmac-md5 none
2005/12/20 17:50 GMT [Transport,client] server->client: 3des-cbc 
hmac-md5 none

2005/12/20 17:50 GMT [Transport,client] host key fingerprint: 
51:11:e1:76:89:f8:cd:af:8c:09:42:9e:37:a8:0a:36
2005/12/20 17:50 GMT [Transport,client] Disconnecting with error, code 3
         reason: bad signature
2005/12/20 17:50 GMT [Transport,client] connection lost
2005/12/20 17:50 GMT [Transport,client] Stopping factory 
<twisted.internet.protocol._InstanceFactory instance at 0xb71b6b0c>
2005/12/20 17:50 GMT [-] Received SIGINT, shutting down.
2005/12/20 17:50 GMT [-] Main loop terminated.

(cftp does the same). What debugging do I need to do to identify the cause?



From p.mayers at imperial.ac.uk  Tue Dec 20 11:09:58 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 20 Dec 2005 18:09:58 +0000
Subject: [Twisted-Python] Twisted SCP
Message-ID: <43A848F6.7090608@imperial.ac.uk>

All,

This is a very very horrible bit of code (stupid undocumented RCP junk), 
but a basic single-file remote -> local SCP can be done using the 
attached code.

It's clearly as dumb as a box of rocks, but seems to work against 
OpenSSH and Cisco IOS, so is fine for what we need.

If anyone knows why the sftp stuff in it doesn't work that would be useful.

Anyway, hope it's helpful to someone. If I get time over or after xmas 
I'll clean it up - it seems pretty clear to me how to make the code 
pretty modular without it descending into the mess that OpenSSH and 
Putty's SCP/SFTP code has become (with the greatest of respect to the 
developers involved of course)
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: tscp
URL: </pipermail/twisted-python/attachments/20051220/eca1dc4a/attachment.ksh>

From mcfletch at rogers.com  Tue Dec 20 11:25:10 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Tue, 20 Dec 2005 13:25:10 -0500
Subject: [Twisted-Python] I'm missing something on SSL-encrypted PB
	connections...
Message-ID: <43A84C86.4020805@rogers.com>

Hi all,

I'm working on refining a load-sharing mechanism to run across a number 
of pb connections (sharing processor time and/or access to a network).  
One of the requirements I have is that I must be able to run the pb 
connections over encrypted channels.  However, when I try to set up an 
SSL-encrypted server (using the same mechanisms I've used for setting up 
SSL-encrypted Nevow sites and the same ones in the echo examples) I 
always get a connection refused error on the client when I try to connect.

I'm using self-generated keys from:

    openssl genrsa > privkey.pem
    openssl req -new -x509 -key privkey.pem -out cacert.pem -days 1000

I'm guessing this has to be some incredibly stupid error, but I'm not 
seeing it in a few hours of poking now, so this is basically a request 
for more eyes.  I've reduced the failing code down to a modification of 
the pbecho* example code (attached).  With keys generated as above in 
the current directory the server starts fine, but the client always 
receives:

    Failure: twisted.internet.error.ConnectionRefusedError: Connection
    was refused by other side: 111: Connection refused.

when it tries to connect.

The only other code I've found trying to use SSL + PB is connecting it 
up to a multi-service of some sort, which I don't *think* should be 
necessary.

Thoughts appreciated,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com

-------------- next part --------------
A non-text attachment was scrubbed...
Name: pbecho_ssl.py
Type: text/x-python
Size: 1416 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20051220/ae2f7f54/attachment-0004.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pbechoclient_ssl.py
Type: text/x-python
Size: 856 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20051220/ae2f7f54/attachment-0005.py>

From itamar at itamarst.org  Tue Dec 20 11:41:49 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 20 Dec 2005 13:41:49 -0500
Subject: [Twisted-Python] I'm missing something on SSL-encrypted PB
	connections...
In-Reply-To: <43A84C86.4020805@rogers.com>
References: <43A84C86.4020805@rogers.com>
Message-ID: <1135104110.9228.3.camel@localhost.localdomain>

On Tue, 2005-12-20 at 13:25 -0500, Mike C. Fletcher wrote:

> I'm working on refining a load-sharing mechanism to run across a number 
> of pb connections (sharing processor time and/or access to a network).  
> One of the requirements I have is that I must be able to run the pb 
> connections over encrypted channels.  However, when I try to set up an 
> SSL-encrypted server (using the same mechanisms I've used for setting up 
> SSL-encrypted Nevow sites and the same ones in the echo examples) I 
> always get a connection refused error on the client when I try to connect.

That's because you haven't actually started listening on the port; you
forgot to do serve.startService() in your code. Or, since you're using
reactor directly, you can just reactor.listenSSL instead of using a
Service.





From mcfletch at rogers.com  Tue Dec 20 17:59:30 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Tue, 20 Dec 2005 19:59:30 -0500
Subject: [Twisted-Python] I'm missing something on SSL-encrypted
	PB	connections...
In-Reply-To: <1135104110.9228.3.camel@localhost.localdomain>
References: <43A84C86.4020805@rogers.com>
	<1135104110.9228.3.camel@localhost.localdomain>
Message-ID: <43A8A8F2.8030902@rogers.com>

Itamar Shtull-Trauring wrote:

>On Tue, 2005-12-20 at 13:25 -0500, Mike C. Fletcher wrote:
>  
>
... stupidity ...

>That's because you haven't actually started listening on the port; you
>forgot to do serve.startService() in your code. Or, since you're using
>reactor directly, you can just reactor.listenSSL instead of using a
>Service.
>  
>
Duh!  Sigh, I figured it had to be something so blindingly stupid I just 
couldn't see it.

Sorry for the wasted bandwidth, and thanks for the clue-stick,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From mcfletch at rogers.com  Tue Dec 20 20:58:49 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Tue, 20 Dec 2005 22:58:49 -0500
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
Message-ID: <43A8D2F9.1020305@rogers.com>

This is one of those problems where I've got a solution, but it *seems* 
like it should be something that can be done that's a little less 
drastic.  Here's the problem:

    Want to expose a simple data-type (in this case a sub-class of
    tuple, the PySNMP OID object) to allow for transmission across pb
    queries and returns.

Now, I've tried quite a number of iterations on this, from:

    jelly.globalSecurity.allowInstancesOf(
        oid.OID,
    )

through using classes like this:

    class PBTypeAllowingServerFactory( pb.PBServerFactory ):
        """Allow various types to be transported"""
        def buildProtocol(self, addr):
            """Return a Broker attached to me (as the service provider).
            """
            broker = pb.PBServerFactory.buildProtocol( self, addr )
            broker.security.allowInstancesOf(
                oid.OID,
            )
            return broker

    class PBTypeAllowingClientFactory( pb.PBClientFactory ):
        def clientConnectionMade(self, broker):
            """Expand the types allowed to be communicated"""
            broker.security.allowInstancesOf(
                oid.OID,
            )
            return pb.PBClientFactory.clientConnectionMade( self, broker )

but whenever I try using jelly for the encoding it complains that:

    Traceback (most recent call last):
      File "/home/mcfletch/pylive/Twisted/twisted/internet/defer.py",
    line 190, in addCallbacks
        self._runCallbacks()
      File "/home/mcfletch/pylive/Twisted/twisted/internet/defer.py",
    line 358, in _runCallbacks
        self.result = callback(self.result, *args, **kw)
      File
    "/home/mcfletch/pylive/cinemon/cinespread/metaperspective.py", line
    216, in callWhenFree
        return perspective.callRemote( *args, **named ).addErrback(
      File "/home/mcfletch/pylive/Twisted/twisted/spread/pb.py", line
    382, in callRemote
        _name, args, kw)
    --- <exception caught here> ---
      File "/home/mcfletch/pylive/Twisted/twisted/spread/pb.py", line
    857, in _sendMessage
        netArgs = self.serialize(args, perspective=perspective,
    method=message)
      File "/home/mcfletch/pylive/Twisted/twisted/spread/pb.py", line
    811, in serialize
        return jelly(object, self.security, None, self)
      File "/home/mcfletch/pylive/Twisted/twisted/spread/jelly.py", line
    896, in jelly
        return _Jellier(taster, persistentStore, invoker).jelly(object)
      File "/home/mcfletch/pylive/Twisted/twisted/spread/jelly.py", line
    480, in jelly
        sxp.append(self.jelly(item))
      File "/home/mcfletch/pylive/Twisted/twisted/spread/jelly.py", line
    476, in jelly
        sxp.append(self.jelly(item))
      File "/home/mcfletch/pylive/Twisted/twisted/spread/jelly.py", line
    511, in jelly
        raise InsecureJelly("Type not allowed for object: %s %s" %
    twisted.spread.jelly.InsecureJelly: Type not allowed for object:
    <class 'cinemon.snmp.oidobject.OID'> .1.3.6.1.2.1.1.4.0

to hack around it I've built my own generic (security restricted) 
pickle-like system, and freeze the parameters and return values before 
passing them across pb... which just seems *so* wrong.  My system is 
almost as large as jelly, and is just entirely redundant code other than 
its allowing me to add new classes to the set allowed.

Anyway, I'm sure I'm once again missing something blindingly obvious, 
but given that I missed the logical equivalent of turning on the power 
switch earlier I thought I'd ask if someone had a recipe for this type 
of operation.  BTW, this seems like something that should be covered in 
the tutorial for pb, as it would seem like a common need to add a 
low-level object-type or two to the set allowed.

Freezer-isn't-so-wonderful-I-want-to-use-it-pointlessly y'rs,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From andrew-twisted at puzzling.org  Tue Dec 20 21:30:48 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 21 Dec 2005 15:30:48 +1100
Subject: [Twisted-Python] Problem w/ TNPE Example on Windows
In-Reply-To: <BD442F5B-56C2-4A97-A406-E91E1AB8D4B7@fuhm.net>
References: <43A5D4CE.6080205@t-online.de>
	<20051218230939.GE8331@home.puzzling.org>
	<43A6DE65.9040908@fettig.net>
	<BD442F5B-56C2-4A97-A406-E91E1AB8D4B7@fuhm.net>
Message-ID: <20051221043048.GK8331@home.puzzling.org>

On Mon, Dec 19, 2005 at 01:19:34PM -0500, James Y Knight wrote:
> On Dec 19, 2005, at 11:23 AM, Abe Fettig wrote:
[...]
> >And unfortunately I failed to notice this while writing the book.
> >Apologies to Windows users. Is it really impossible to do asynchronous
> >IO on stdin/out on Windows? Anybody have any ideas for working around
> >the lack of fcntl? I'd be happy to contribute to an effort to make
> >twisted.internet.stdio run on Windows.
> 
> In the worst case, it could be emulated using threads doing blocking  
> read/write.

I think this is the simplest and most practical way to implement it on windows.
I suggest anyone interested in implementing it on windows tries this method.

-Andrew.




From johann.borck at densedata.com  Tue Dec 20 22:23:16 2005
From: johann.borck at densedata.com (Johann Borck)
Date: Wed, 21 Dec 2005 06:23:16 +0100
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
In-Reply-To: <43A8D2F9.1020305@rogers.com>
References: <43A8D2F9.1020305@rogers.com>
Message-ID: <43A8E6C4.9070306@densedata.com>

hi, this is from the pb docs: http://twistedmatrix.com/projects/core/documentation/howto/pb-copyable.html

class ReceiverPond(pb.RemoteCopy, LilyPond):
    pass


pb.setUnjellyableForClass(CopyPond, ReceiverPond)#        <---  Did you forget this? 

I only got this error, when i forgot this line. wow, reimplementing jelly?!! seems like you should have asked before :)

Johann




From foom at fuhm.net  Wed Dec 21 00:00:13 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 21 Dec 2005 00:00:13 -0700
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EoxxN-0005fO-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-12-14 07:00:01.820000:
 Bugs opened: 10   Bugs closed: 9   Total open bugs: 501 (+1)
  Urgent: 1 (+0)
  Bug: 240 (+2)
  Feature: 177 (-1)
  Wish: 83 (+0)

New / Reopened Bugs
______________________
                    ==== Bug ====
[CORE, TRIAL] Raising SkipTest in setUp is treated as an error  (12 hours ago)
       http://twistedmatrix.com/bugs/issue1372 opened by exarkun

[CORE, TESTS] Possible race condition in test_tcp  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1370 opened by jml

[CORE, TESTS] Possible race condition in test_tcp  (yesterday)
       http://twistedmatrix.com/bugs/issue1371 opened by jml

iocpreactor (udp) socket.error: (10049, "Can't assign requested address")  (yesterday)
       http://twistedmatrix.com/bugs/issue1369 opened by ghazel

[CORE, FTP] FTP server tests are a mess  (2 days ago)
       http://twistedmatrix.com/bugs/issue1368 opened by exarkun

[CORE, TRIAL] If setUp returns an unfired Deferred, test methods cannot use wait()  (2 days ago)
       http://twistedmatrix.com/bugs/issue1367 opened by exarkun

[CORE, DOCUMENTATION] TwistedQuotes documentation references external source files  (2 days ago)
       http://twistedmatrix.com/bugs/issue1366 opened by exarkun

select.error: (10022, 'Windows Error 0x2726')  (3 days ago)
       http://twistedmatrix.com/bugs/issue1365 opened by ghazel

                    ==== Feature ====
[CORE] [PATCH] re-installation of the same reactor  (6 days ago)
       http://twistedmatrix.com/bugs/issue1364 opened by antony

[CORE] [PATCH] broadcasting over udp causes warning  (6 days ago)
       http://twistedmatrix.com/bugs/issue1363 opened by antony

Bugs Closed
______________________
                    ==== Bug ====
Separate reporter result handling from output  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1349 opened by jml, closed by jml

[CORE, TESTS] Possible race condition in test_tcp  (yesterday)
       http://twistedmatrix.com/bugs/issue1370 opened by jml, closed by jml

[CORE, TRIAL] Test case run() methods to use Deferreds internally  (3 weeks ago)
       http://twistedmatrix.com/bugs/issue1341 opened by jml, closed by jml

[TRIAL] Trial doesn't cut tracebacks properly  (13 months ago)
       http://twistedmatrix.com/bugs/issue773 opened by jknight, closed by jml

[TRIAL] [PATCH] Traceback running a test with broken setUp method  (1 week ago)
       http://twistedmatrix.com/bugs/issue1359 opened by headly, closed by jml

[BACKPORT, WEB2] twisted.web2.stream and wsgi  (7 days ago)
       http://twistedmatrix.com/bugs/issue1362 opened by mkerrin, closed by jknight

                    ==== Feature ====
Trial spews color codes by default  on win32  (4 months ago)
       http://twistedmatrix.com/bugs/issue1141 opened by TimothyFitz, closed by jml

[DOCUMENTATION, TRIAL] Draft release notes for the recent and upcoming Trial changes  (3 months ago)
       http://twistedmatrix.com/bugs/issue1172 opened by jml, closed by jml

[TRIAL] TASK: Deprecate setUpClass/tearDownClass.  Provide replacement  (2 months ago)
       http://twistedmatrix.com/bugs/issue1206 opened by jml, closed by jml




From z3p at twistedmatrix.com  Wed Dec 21 02:07:56 2005
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Wed, 21 Dec 2005 04:07:56 -0500
Subject: [Twisted-Python] Twisted conch bad key signatures
In-Reply-To: <43A844F7.1090507@imperial.ac.uk>
References: <43A844F7.1090507@imperial.ac.uk>
Message-ID: <43A91B6C.3060701@twistedmatrix.com>

Phil Mayers wrote:

> All,
>
> I've got an SSH server (Extremeware 7.3 router) which OpenSSH can SFTP
> into without problem but Twisted Conch reports:
>
> 2005/12/20 17:50 GMT [-] Log opened.
> 2005/12/20 17:50 GMT [-] Enabling Multithreading.
> 2005/12/20 17:50 GMT [Transport,client] kex alg, key alg:
> diffie-hellman-group1-sha1 ssh-dss
> 2005/12/20 17:50 GMT [Transport,client] client->server: 3des-cbc
> hmac-md5 none
> 2005/12/20 17:50 GMT [Transport,client] server->client: 3des-cbc
> hmac-md5 none
>
> 2005/12/20 17:50 GMT [Transport,client] host key fingerprint:
> 51:11:e1:76:89:f8:cd:af:8c:09:42:9e:37:a8:0a:36
> 2005/12/20 17:50 GMT [Transport,client] Disconnecting with error, code 3
>         reason: bad signature
> 2005/12/20 17:50 GMT [Transport,client] connection lost
> 2005/12/20 17:50 GMT [Transport,client] Stopping factory
> <twisted.internet.protocol._InstanceFactory instance at 0xb71b6b0c>
> 2005/12/20 17:50 GMT [-] Received SIGINT, shutting down.
> 2005/12/20 17:50 GMT [-] Main loop terminated.
>
> (cftp does the same). What debugging do I need to do to identify the
> cause?

Run OpenSSH with debugging on.  I'm guessing that they're enabling a workaround for a non-compliant server.

-p
-- 
       Paul Swartz
(o_    http://www.twistedmatrix.com/users/z3p.twistd/  _o)
//\    z3p at twistedmatrix.com                           /\\
V_/_   AIM: z3penguin                                 _\_V->




From itamar at itamarst.org  Wed Dec 21 08:41:31 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 21 Dec 2005 10:41:31 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15355 - Add
	twisted.python.pymodules.datetime and use it if "import datetime"
	fails.
In-Reply-To: <E1EoskY-0007Q5-00@wolfwood>
References: <E1EoskY-0007Q5-00@wolfwood>
Message-ID: <1135179691.30771.1.camel@localhost.localdomain>

On Tue, 2005-12-20 at 18:26 -0700, Wilfredo Sanchez wrote:

> +try:
> +    import datetime
> +except ImportError:
> +    import twisted.python.pymodules.datetime as datetime

twisted.python.compat is an even better place, so other modules can
benefit (check out how other compat stuff is handled).





From p.mayers at imperial.ac.uk  Wed Dec 21 08:51:54 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 21 Dec 2005 15:51:54 +0000
Subject: [Twisted-Python] Twisted conch bad key signatures
In-Reply-To: <43A91B6C.3060701@twistedmatrix.com>
References: <43A844F7.1090507@imperial.ac.uk>
	<43A91B6C.3060701@twistedmatrix.com>
Message-ID: <43A97A1A.2040105@imperial.ac.uk>

Paul Swartz wrote:
> 
> Run OpenSSH with debugging on.  I'm guessing that they're enabling a workaround for a non-compliant server.
> 
> -p

Hmm. psftp (Putty SFTP) reports:

Server version: SSH-2.0-2.0.12 (non-commercial)
We believe remote version has SSH2 HMAC bug
We claim version: SSH-2.0-PuTTY-Release-0.54
Using SSH protocol version 2
Doing Diffie-Hellman key exchange
Host key fingerprint is:
ssh-dss 1024 51:11:e1:76:89:f8:cd:af:8c:09:42:9e:37:a8:0a:36
Initialised Blowfish client->server encryption
Initialised Blowfish server->client encryption
Using username "admin".

...but the Twisted SFTP bombs out in _continueGEX_GROUP, well before the 
HMAC bug becomes an issue.

The Putty, OpenSSH and (sadly) Twisted Conch code are more or less 
incomprehensible at first glance (dynamic imports, for hot rooting 
action!) so I think I'll have to leave this to one side.



From william.lewis at uk.bnpparibas.com  Wed Dec 21 10:59:24 2005
From: william.lewis at uk.bnpparibas.com (william.lewis at uk.bnpparibas.com)
Date: Wed, 21 Dec 2005 17:59:24 +0000
Subject: [Twisted-Python] Receiving a root from a pb client
Message-ID: <OF2099ECF4.E042CF41-ON802570DE.005F4171-802570DE.0062D271@bnpparibas.com>

Hi,

I am using pb to communicate in a client-server configuration. My client 
inherits from PBClientFactory.
My server has a remote_take_root() method by which the client can connect 
to the server and pass in
its root, thus allowing two-way communication.

Is there anyway for the server to re-establish the connection (should it 
go down)  in this setup, or is
this the sole responsibility of the client?

Thanks

William Lewis


This message and any attachments (the "message") is 
intended solely for the addressees and is confidential. 
If you receive this message in error, please delete it and
immediately notify the sender. Any use not in accord with
its purpose, any dissemination or disclosure, either whole
or partial, is prohibited except formal approval. The internet
can not guarantee the integrity of this message.
BNP PARIBAS (and its subsidiaries) shall (will) not
therefore be liable for the message if modified. 

**********************************************************************************************

BNP Paribas Private Bank London Branch is authorised
by CECEI & AMF and is regulated by the Financial Services
Authority for the conduct of its investment business in
the United Kingdom.

BNP Paribas Securities Services London Branch is authorised 
by CECEI & AMF and is regulated by the Financial Services 
Authority for the conduct of its investment business in 
the United Kingdom.
  
BNP Paribas Fund Services UK Limited is authorised and 
regulated by the Financial Services Authority

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051221/2feb19d5/attachment.html>

From mcfletch at rogers.com  Wed Dec 21 19:06:51 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Wed, 21 Dec 2005 21:06:51 -0500
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
In-Reply-To: <43A8E6C4.9070306@densedata.com>
References: <43A8D2F9.1020305@rogers.com> <43A8E6C4.9070306@densedata.com>
Message-ID: <43AA0A3B.5000606@rogers.com>

Johann Borck wrote:

>hi, this is from the pb docs: http://twistedmatrix.com/projects/core/documentation/howto/pb-copyable.html
>
>class ReceiverPond(pb.RemoteCopy, LilyPond):
>    pass
>
>
>pb.setUnjellyableForClass(CopyPond, ReceiverPond)#        <---  Did you forget this? 
>
>I only got this error, when i forgot this line. wow, reimplementing jelly?!! seems like you should have asked before :)
>
>Johann
>  
>
Thanks for the pointer.  I've read that document, and may just be
missing the point here.  I don't want all of the thousands upon
thousands of OID objects to be lugging around extra dictionaries
inherited from pb.RemoteCopy (they're just tuples of integers,
implemented as such because they are so extremely common in the
system).  I want the objects to actually *be* OID objects on the client end.

That is, what I'm looking for is a way to tell jelly "when you see an
object like this, linearise it like this, and reconstitute it like
this", rather than creating a different type Y and using that in place
of the object on the client side.

Yes, probably should have asked before reimplementing jelly, but I was
wanting to get a spike test done that evening.

Thanks all,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com





From ml.flex at gmail.com  Thu Dec 22 01:35:14 2005
From: ml.flex at gmail.com (Micky Latowicki)
Date: Thu, 22 Dec 2005 10:35:14 +0200
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
In-Reply-To: <43AA0A3B.5000606@rogers.com>
References: <43A8D2F9.1020305@rogers.com> <43A8E6C4.9070306@densedata.com>
	<43AA0A3B.5000606@rogers.com>
Message-ID: <d27002d90512220035r12a00278y@mail.gmail.com>

From what I know, tuples jelly just fine. I think that what you're
serializing isn't a tuple, but rather a cinemon.snmp.oidobject.OID, or
something that contains a reference to that. Is that a tuple? if it is, how
is it defined?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051222/98bb835b/attachment.html>

From itamar at itamarst.org  Thu Dec 22 09:17:47 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 22 Dec 2005 11:17:47 -0500
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
In-Reply-To: <43AA0A3B.5000606@rogers.com>
References: <43A8D2F9.1020305@rogers.com> <43A8E6C4.9070306@densedata.com>
	<43AA0A3B.5000606@rogers.com>
Message-ID: <1135268268.22336.0.camel@localhost.localdomain>

On Wed, 2005-12-21 at 21:06 -0500, Mike C. Fletcher wrote:

> That is, what I'm looking for is a way to tell jelly "when you see an
> object like this, linearise it like this, and reconstitute it like
> this", rather than creating a different type Y and using that in place
> of the object on the client side.

I am pretty sure newpb, which Brian Warner was threatening to merge any
day now, will support this much better than PB does.




From mcfletch at vrplumber.com  Thu Dec 22 09:35:48 2005
From: mcfletch at vrplumber.com (Mike C. Fletcher)
Date: Thu, 22 Dec 2005 11:35:48 -0500
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
In-Reply-To: <d27002d90512220035r12a00278y@mail.gmail.com>
References: <43A8D2F9.1020305@rogers.com> <43A8E6C4.9070306@densedata.com>	
	<43AA0A3B.5000606@rogers.com>
	<d27002d90512220035r12a00278y@mail.gmail.com>
Message-ID: <43AAD5E4.2080601@vrplumber.com>

Micky Latowicki wrote:

> From what I know, tuples jelly just fine. I think that what you're 
> serializing isn't a tuple, but rather a cinemon.snmp.oidobject.OID, or 
> something that contains a reference to that. Is that a tuple? if it 
> is, how is it defined?
>
cinemon.snmp.oidobject.OID and pysnmp.asn1.oid.OID are tuple sub-classes 
with __slots__ defined to () such that they have the internal layout of 
tuples.  That's done to improve the efficiency of PySNMP, TwistedSNMP 
and Cinemon, the classes just add new methods, no new data is stored in 
the instance's object structure.

Bald tuples do, indeed, transmit fine, but sub-classes do not.

Enjoy,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From mcfletch at vrplumber.com  Thu Dec 22 09:39:56 2005
From: mcfletch at vrplumber.com (Mike C. Fletcher)
Date: Thu, 22 Dec 2005 11:39:56 -0500
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
In-Reply-To: <1135268268.22336.0.camel@localhost.localdomain>
References: <43A8D2F9.1020305@rogers.com> <43A8E6C4.9070306@densedata.com>	
	<43AA0A3B.5000606@rogers.com>
	<1135268268.22336.0.camel@localhost.localdomain>
Message-ID: <43AAD6DC.6020105@vrplumber.com>

Itamar Shtull-Trauring wrote:

>On Wed, 2005-12-21 at 21:06 -0500, Mike C. Fletcher wrote:
>
>  
>
>>That is, what I'm looking for is a way to tell jelly "when you see an
>>object like this, linearise it like this, and reconstitute it like
>>this", rather than creating a different type Y and using that in place
>>of the object on the client side.
>>    
>>
>
>I am pretty sure newpb, which Brian Warner was threatening to merge any
>day now, will support this much better than PB does.
>  
>
Aw, you're just trying to make me feel better about reimplementing 
jelly, I'm sure :) .

Guess I'll wait for newpb to emerge and go back to freezing everything 
until then.

Have fun,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From itamar at itamarst.org  Thu Dec 22 10:11:30 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 22 Dec 2005 12:11:30 -0500
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
In-Reply-To: <43AAD5E4.2080601@vrplumber.com>
References: <43A8D2F9.1020305@rogers.com> <43A8E6C4.9070306@densedata.com>
	<43AA0A3B.5000606@rogers.com>
	<d27002d90512220035r12a00278y@mail.gmail.com>
	<43AAD5E4.2080601@vrplumber.com>
Message-ID: <1135271491.22336.3.camel@localhost.localdomain>

On Thu, 2005-12-22 at 11:35 -0500, Mike C. Fletcher wrote:

> cinemon.snmp.oidobject.OID and pysnmp.asn1.oid.OID are tuple sub-classes 
> with __slots__ defined to () such that they have the internal layout of 
> tuples.  That's done to improve the efficiency of PySNMP, TwistedSNMP 
> and Cinemon, the classes just add new methods, no new data is stored in 
> the instance's object structure.
> 
> Bald tuples do, indeed, transmit fine, but sub-classes do not.

Should be possible to have existing jelly support those, I bet.




From dkarbott at comcast.net  Thu Dec 22 12:26:45 2005
From: dkarbott at comcast.net (dkarbott at comcast.net)
Date: Thu, 22 Dec 2005 19:26:45 +0000
Subject: [Twisted-Python] Analog to asyncore.dispatcher.handle_write()?
Message-ID: <122220051926.27005.43AAFDF50000BAB90000697D22028887449B9B010D9D0E050B@comcast.net>

Hi,
I'm new to twisted so this may be a simple question.

I want to write a twisted.internet.protocol.Protocol implementation which doesn't write too far ahead of the socket it's writing into.

How do I get a notification when the underlying socket is ready to
write more data?

Any info would be much appreciated.

-- Darrell



From itamar at itamarst.org  Thu Dec 22 12:47:05 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 22 Dec 2005 14:47:05 -0500
Subject: [Twisted-Python] Analog to asyncore.dispatcher.handle_write()?
In-Reply-To: <122220051926.27005.43AAFDF50000BAB90000697D22028887449B9B010D9D0E050B@comcast.net>
References: <122220051926.27005.43AAFDF50000BAB90000697D22028887449B9B010D9D0E050B@comcast.net>
Message-ID: <1135280825.22336.16.camel@localhost.localdomain>

On Thu, 2005-12-22 at 19:26 +0000, dkarbott at comcast.net wrote:

> I want to write a twisted.internet.protocol.Protocol implementation
> which doesn't write too far ahead of the socket it's writing into.
> 
> How do I get a notification when the underlying socket is ready to
> write more data?

transports have a registerProducer(consumer, streaming) method, as they
are consumers - see twisted.internet.interface.IConsumer and IProducer.
You would implement a producer (the protocol instance, for example) with
the resumeProducing, pauseProducing, stopProducing methods which would
get called depending on socket state.




From foom at fuhm.net  Thu Dec 22 15:54:54 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu, 22 Dec 2005 17:54:54 -0500
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <43722C5D.901@carmensystems.com>
References: <60ed19d40511051714o6565bd29nd6885511808fb2ae@mail.gmail.com>	<20051106022657.10365.1687580705.divmod.quotient.4496@ohm>	<d06a5cd30511070547o59a504e2p@mail.gmail.com>
	<FC5A7D49-45C9-48BD-853E-B80D6628E8C7@junklight.com>
	<43722C5D.901@carmensystems.com>
Message-ID: <3F1FC04D-00D2-43C9-9105-8DE0CD63E2BB@fuhm.net>

I'm going to vote for dropping Python 2.2 support in Twisted trunk  
now. Twisted 2.1 is a fine release to use if you want to use an  
ancient version of python. Keeping compat is a pain in the ass. And  
lest exarkun complain about lack of enthusiasm: I'll declare myself  
quite enthusiastic about the concept. :)

James



From jcase at steuber.com  Thu Dec 22 16:07:07 2005
From: jcase at steuber.com (John Case)
Date: Thu, 22 Dec 2005 18:07:07 -0500
Subject: [Twisted-Python] python crash when running sample code from Twisted
	Book....
Message-ID: <43AB319B.6080309@steuber.com>

Hello!
I am working through the Twisted Network Programming Essentials book by 
Abe Fettig, using python24 and twisted 2.1 on a Win2k sp4 Server 
platform. Python crashes with a memory reference error on 
'reactor.run()' when I run this code (connectiontest.py from Chap 2):

Any suggestions greatly appreciated!!!

****

from twisted.internet import reactor, defer, protocol

class CallbackAndDisconnectProtocol(protocol.Protocol):
    def connectionMade(self):
        self.factory.deferred.callback("Connected!")
        self.transport.loseConnection()

class ConnectionTestFactory(protocol.ClientFactory):
    protocol = CallbackAndDisconnectProtocol

    def __init__(self):
        self.deferred = defer.Deferred()

    def clientConnectionFailed(self, connector, reason):
        self.deferred.errback(reason)

def testConnect(host, port):
    testFactory = ConnectionTestFactory()
    reactor.connectTCP(host, port, testFactory)
    return testFactory.deferred

def handleSuccess(result, port):
    print "Connected to port %i" % port
    reactor.stop()

def handleFailure(failure, port):
    print "Error connecting to port %i: %s" % (
        port, failure.getErrorMessage())
    reactor.stop()

if __name__ == "__main__":
    import sys
    #if not len(sys.argv) == 3:
     #   print "Usage: connectiontest.py host port"
      #  sys.exit(1)
   
    host = 'localhost'
    port = 82
    connecting = testConnect(host, port)
    connecting.addCallback(handleSuccess, port)
    connecting.addErrback(handleFailure, port)
    reactor.run()



From adam at atommic.com  Thu Dec 22 16:34:24 2005
From: adam at atommic.com (Adam Atlas)
Date: Thu, 22 Dec 2005 18:34:24 -0500
Subject: [Twisted-Python] Custom transports
Message-ID: <62B236F8-1E28-41A6-982E-10F70C1D2583@atommic.com>

Hello,

What would I do to implement a custom transport within the Twisted  
framework? That is, I'd like to be able to add custom listen___ and  
connect___ methods to the reactor, so that existing protocols can run  
over a new backend transport protocol. What API would I use for this?

-- Adam



From jml at mumak.net  Thu Dec 22 23:05:19 2005
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 23 Dec 2005 17:05:19 +1100
Subject: [Twisted-Python] Trial and ImportErrors
Message-ID: <d06a5cd30512222205g45aeaa4evc5937809bbc840f9@mail.gmail.com>

Hello,

For a while I've been thinking of changing Trial so that import errors
flag the test suite as failed.
This would mean the buildbot would go red if things fail to import.

What do you all think?

jml



From jml at mumak.net  Thu Dec 22 23:12:16 2005
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 23 Dec 2005 17:12:16 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] r15363 - Merge the DAV
	branch to trunk.
In-Reply-To: <E1EpEKJ-0007se-00@wolfwood>
References: <E1EpEKJ-0007se-00@wolfwood>
Message-ID: <d06a5cd30512222212t7a07416bx9df9bdc07151e2d9@mail.gmail.com>

On 12/22/05, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
> Author: wsanchez
> Date: Wed Dec 21 17:28:58 2005
> New Revision: 15363
>
> Added:
>    trunk/twisted/python/pymodules/LICENSE-pypy.txt
>       - copied unchanged from r15360, branches/wsanchez/dav/twisted/python/pymodules/LICENSE-pypy.txt
>    trunk/twisted/python/pymodules/datetime.py
>       - copied unchanged from r15360, branches/wsanchez/dav/twisted/python/pymodules/datetime.py
>    trunk/twisted/web2/dav/
>       - copied from r15360, branches/wsanchez/dav/twisted/web2/dav/
<snip>

twisted.web2.dav.test.util uses tempfile.mkdtemp, which is unavailable
in Python 2.2.  We still support Python 2.2 (ungh!).



From andrew-twisted at puzzling.org  Thu Dec 22 23:26:30 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 23 Dec 2005 17:26:30 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] r15363 - Merge the DAV
	branch to trunk.
In-Reply-To: <d06a5cd30512222212t7a07416bx9df9bdc07151e2d9@mail.gmail.com>
References: <E1EpEKJ-0007se-00@wolfwood>
	<d06a5cd30512222212t7a07416bx9df9bdc07151e2d9@mail.gmail.com>
Message-ID: <20051223062630.GC8148@home.puzzling.org>

On Fri, Dec 23, 2005 at 05:12:16PM +1100, Jonathan Lange wrote:
> On 12/22/05, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
> > Author: wsanchez
> > Date: Wed Dec 21 17:28:58 2005
> > New Revision: 15363
> >
> > Added:
> >    trunk/twisted/python/pymodules/LICENSE-pypy.txt
> >       - copied unchanged from r15360, branches/wsanchez/dav/twisted/python/pymodules/LICENSE-pypy.txt
> >    trunk/twisted/python/pymodules/datetime.py
> >       - copied unchanged from r15360, branches/wsanchez/dav/twisted/python/pymodules/datetime.py
> >    trunk/twisted/web2/dav/
> >       - copied from r15360, branches/wsanchez/dav/twisted/web2/dav/
> <snip>
> 
> twisted.web2.dav.test.util uses tempfile.mkdtemp, which is unavailable
> in Python 2.2.  We still support Python 2.2 (ungh!).

Luckily twisted.trial.unittest.TestCase has a mktemp method that works even in
Python 2.2!  The DAV code should use that instead.

-Andrew



From corydodt at twistedmatrix.com  Thu Dec 22 23:41:54 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu, 22 Dec 2005 22:41:54 -0800
Subject: [Twisted-Python] Trial and ImportErrors
In-Reply-To: <d06a5cd30512222205g45aeaa4evc5937809bbc840f9@mail.gmail.com>
References: <d06a5cd30512222205g45aeaa4evc5937809bbc840f9@mail.gmail.com>
Message-ID: <43AB9C32.8020302@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

We just ran into this today with Athena tests.  It's actually easy to
write a test that just imports everything once, but nobody seems to ever
do that.  Having an import failure show up somewhere in the test summary
is pretty important.

C


Jonathan Lange wrote:
> Hello,
> 
> For a while I've been thinking of changing Trial so that import errors
> flag the test suite as failed.
> This would mean the buildbot would go red if things fail to import.
> 
> What do you all think?
> 
> jml
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDq5wy3A5SrXAiHQcRApnDAJ472YMWIq/KTEdiztZ1MPbu5WTWAwCfc3en
Z8go682s3sH8HOaqBohBpvE=
=iFqr
-----END PGP SIGNATURE-----



From jml at mumak.net  Thu Dec 22 23:53:57 2005
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 23 Dec 2005 17:53:57 +1100
Subject: [Twisted-Python] Trial and ImportErrors
In-Reply-To: <43AB9C32.8020302@twistedmatrix.com>
References: <d06a5cd30512222205g45aeaa4evc5937809bbc840f9@mail.gmail.com>
	<43AB9C32.8020302@twistedmatrix.com>
Message-ID: <d06a5cd30512222253q7bc25cua540c778f61d5b89@mail.gmail.com>

On 12/23/05, Cory Dodt <corydodt at twistedmatrix.com> wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> We just ran into this today with Athena tests.  It's actually easy to
> write a test that just imports everything once, but nobody seems to ever
> do that.  Having an import failure show up somewhere in the test summary
> is pretty important.
>

Import failures show up in the test summary.  They just don't flag the
suite as failed.  In this way, they are similar to skipped tests.

jml



From glyph at divmod.com  Fri Dec 23 03:22:14 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 23 Dec 2005 05:22:14 -0500
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <3F1FC04D-00D2-43C9-9105-8DE0CD63E2BB@fuhm.net>
Message-ID: <20051223102214.1217.1628161043.divmod.quotient.7762@ohm>



On Thu, 22 Dec 2005 17:54:54 -0500, James Y Knight <foom at fuhm.net> wrote:
>I'm going to vote for dropping Python 2.2 support in Twisted trunk  now. 
>Twisted 2.1 is a fine release to use if you want to use an  ancient version 
>of python. Keeping compat is a pain in the ass. And  lest exarkun complain 
>about lack of enthusiasm: I'll declare myself  quite enthusiastic about the 
>concept. :)

I don't think you can "vote" yet since that violates parliamentary procedure, maybe.  I will assume you are making a motion.

I will second this motion!  Since I am also the chair, I can say that the motion carries!

Anybody want to filibuster?



From glyph at divmod.com  Fri Dec 23 03:29:18 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 23 Dec 2005 05:29:18 -0500
Subject: [Twisted-Python] Trial and ImportErrors
In-Reply-To: <d06a5cd30512222205g45aeaa4evc5937809bbc840f9@mail.gmail.com>
Message-ID: <20051223102918.1217.754741711.divmod.quotient.7764@ohm>



On Fri, 23 Dec 2005 17:05:19 +1100, Jonathan Lange <jml at mumak.net> wrote:
>Hello,
>
>For a while I've been thinking of changing Trial so that import errors
>flag the test suite as failed.
>This would mean the buildbot would go red if things fail to import.
>
>What do you all think?

Yes.  DEFINITELY.  I'd go so far as to say that this is simply a bug, and I don't care if anyone disagrees - you should go ahead.



From Wolfgang.W.Eichler at gmx.de  Fri Dec 23 06:23:11 2005
From: Wolfgang.W.Eichler at gmx.de (Wolfgang Eichler)
Date: Fri, 23 Dec 2005 14:23:11 +0100
Subject: [Twisted-Python] Integrate other API that uses select
Message-ID: <E1Epmt8-0005Sl-00@pyramid.twistedmatrix.com>

Hi,

newbie question:

I would like to integrate another c-api, that uses select ( for some tcp - connection ); 

If I could extend this c-api, to question for the bit-arry it uses for the select, could I enter this in the twisted framework to get the control, if some event for these sockets are coming in and then notifiy the  c-api to handle the events on his sockets.

The aim is to keep the single waiting point in twisted and not being forced to poll on the c-api.

Thanks for any help ...

Wolfgang
 




From general at eepatents.com  Fri Dec 23 07:34:23 2005
From: general at eepatents.com (Ed Suominen)
Date: Fri, 23 Dec 2005 06:34:23 -0800
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <E1EpmtF-0005TT-02@pyramid.twistedmatrix.com>
References: <E1EpmtF-0005TT-02@pyramid.twistedmatrix.com>
Message-ID: <1135348464.9212.123.camel@207-118-88-159.dyn.centurytel.net>

As a humble user, that makes perfect sense to me. I wonder how many
people really are stuck with Python 2.2 at this point, through ignorance
(not necessarily their own, but perhaps of people higher up) or
otherwise.

Best regards,
Ed Suominen

On Fri, 2005-12-23 at 07:23 -0600,
twisted-python-request at twistedmatrix.com wrote:
> I'm going to vote for dropping Python 2.2 support in Twisted trunk  
> now. Twisted 2.1 is a fine release to use if you want to use an  
> ancient version of python. Keeping compat is a pain in the ass. And  
> lest exarkun complain about lack of enthusiasm: I'll declare myself  
> quite enthusiastic about the concept. :)
> 
> James




From jim at zope.com  Fri Dec 23 08:01:22 2005
From: jim at zope.com (Jim Fulton)
Date: Fri, 23 Dec 2005 10:01:22 -0500
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <3F1FC04D-00D2-43C9-9105-8DE0CD63E2BB@fuhm.net>
References: <60ed19d40511051714o6565bd29nd6885511808fb2ae@mail.gmail.com>	<20051106022657.10365.1687580705.divmod.quotient.4496@ohm>	<d06a5cd30511070547o59a504e2p@mail.gmail.com>	<FC5A7D49-45C9-48BD-853E-B80D6628E8C7@junklight.com>	<43722C5D.901@carmensystems.com>
	<3F1FC04D-00D2-43C9-9105-8DE0CD63E2BB@fuhm.net>
Message-ID: <43AC1142.1000306@zope.com>

James Y Knight wrote:
> I'm going to vote for dropping Python 2.2 support in Twisted trunk  now. 
> Twisted 2.1 is a fine release to use if you want to use an  ancient 
> version of python. Keeping compat is a pain in the ass. And  lest 
> exarkun complain about lack of enthusiasm: I'll declare myself  quite 
> enthusiastic about the concept. :)

+1

Jim

-- 
Jim Fulton           mailto:jim at zope.com       Python Powered!
CTO                  (540) 361-1714            http://www.python.org
Zope Corporation     http://www.zope.com       http://www.zope.org



From itamar at itamarst.org  Fri Dec 23 11:45:20 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 23 Dec 2005 13:45:20 -0500
Subject: [Twisted-Python] Custom transports
In-Reply-To: <62B236F8-1E28-41A6-982E-10F70C1D2583@atommic.com>
References: <62B236F8-1E28-41A6-982E-10F70C1D2583@atommic.com>
Message-ID: <1135363520.22336.30.camel@localhost.localdomain>

On Thu, 2005-12-22 at 18:34 -0500, Adam Atlas wrote:
> Hello,
> 
> What would I do to implement a custom transport within the Twisted  
> framework? That is, I'd like to be able to add custom listen___ and  
> connect___ methods to the reactor, so that existing protocols can run  
> over a new backend transport protocol. What API would I use for this?

If this transport is implemented in terms of other protocols, it doesn't
have to be a reactor method. For example, lets say you write a SOCKSv4
transport; the way users would use it is probably:

mySocksProxy = SOCKSProxy('myproxy.example.com', 9999)
mySocksProxy.listenTCP(8080, SomeFactory())

Even if it requires registering file descriptors, you don't *have* to
add reactor.* methods (see e.g. twisted.internet.stdio).




From itamar at itamarst.org  Fri Dec 23 11:48:38 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 23 Dec 2005 13:48:38 -0500
Subject: [Twisted-Python] Integrate other API that uses select
In-Reply-To: <E1Epmt8-0005Sl-00@pyramid.twistedmatrix.com>
References: <E1Epmt8-0005Sl-00@pyramid.twistedmatrix.com>
Message-ID: <1135363719.22336.34.camel@localhost.localdomain>

On Fri, 2005-12-23 at 14:23 +0100, Wolfgang Eichler wrote:

> 
> I would like to integrate another c-api, that uses select ( for some tcp - connection ); 
> 
> If I could extend this c-api, to question for the bit-arry it uses for
> the select, could I enter this in the twisted framework to get the
> control, if some event for these sockets are coming in and then
> notifiy the  c-api to handle the events on his sockets.

Yep - reactor.addReader and reactor.addWriter let you register file
descriptors; typically the object you register would be an instance of a
subclass of twisted.internet.abstract.FileDescriptor.

Well designed C APIs will expose the underlying parsing code in addition
to a TCP-specific implementation, and it'd be better to wrap this. 




From radeex at gmail.com  Fri Dec 23 20:17:39 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 24 Dec 2005 14:17:39 +1100
Subject: [Twisted-Python] Custom transports
In-Reply-To: <1135363520.22336.30.camel@localhost.localdomain>
References: <62B236F8-1E28-41A6-982E-10F70C1D2583@atommic.com>
	<1135363520.22336.30.camel@localhost.localdomain>
Message-ID: <60ed19d40512231917v4a9123ffm3e90b49f6770ed45@mail.gmail.com>

On 12/24/05, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> On Thu, 2005-12-22 at 18:34 -0500, Adam Atlas wrote:
> > Hello,
> >
> > What would I do to implement a custom transport within the Twisted
> > framework? That is, I'd like to be able to add custom listen___ and
> > connect___ methods to the reactor, so that existing protocols can run
> > over a new backend transport protocol. What API would I use for this?
>
> If this transport is implemented in terms of other protocols, it doesn't
> have to be a reactor method. For example, lets say you write a SOCKSv4
> transport; the way users would use it is probably:
>
> mySocksProxy = SOCKSProxy('myproxy.example.com', 9999)
> mySocksProxy.listenTCP(8080, SomeFactory())
>
> Even if it requires registering file descriptors, you don't *have* to
> add reactor.* methods (see e.g. twisted.internet.stdio).

Also, the reactor has a method listenWith that may be useful. See the
docs for it in twisted.internet.interfaces.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From glyph at divmod.com  Fri Dec 23 21:14:45 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 23 Dec 2005 23:14:45 -0500
Subject: Python 2.2 Support has been officially dropped (was Re:
	[Twisted-Python] Python 2.2 Support)
In-Reply-To: <43AC1142.1000306@zope.com>
Message-ID: <20051224041445.1217.1583662422.divmod.quotient.7996@ohm>

On Fri, 23 Dec 2005 10:01:22 -0500, Jim Fulton <jim at zope.com> wrote:

>+1

As of some time yesterday, JP has taken the Python buildbot offline.

That means that 2.2 is no longer officially supported, and the next release will not run on any 2.2-only platforms.

Merry christmas, I guess :).



From ml.flex at gmail.com  Mon Dec 26 03:35:52 2005
From: ml.flex at gmail.com (Micky Latowicki)
Date: Mon, 26 Dec 2005 12:35:52 +0200
Subject: [Twisted-Python] Receiving a root from a pb client
In-Reply-To: <OF2099ECF4.E042CF41-ON802570DE.005F4171-802570DE.0062D271@bnpparibas.com>
References: <OF2099ECF4.E042CF41-ON802570DE.005F4171-802570DE.0062D271@bnpparibas.com>
Message-ID: <d27002d90512260235t74f71029s@mail.gmail.com>

I don't see any response from the experts, so I'll say what I think:

No. There is no way. One side has to listen, the other has to connect.
You can make the network symmetric only by having both sides listen on
different occasions - that means that for the server to initiate a
connection, the client has to become a server itself.

This is how TCP works.

HTH.

On 21/12/05, william.lewis at uk.bnpparibas.com
<william.lewis at uk.bnpparibas.com> wrote:
>
> Hi,
>
> I am using pb to communicate in a client-server configuration. My client
> inherits from PBClientFactory.
> My server has a remote_take_root() method by which the client can connect to
> the server and pass in
> its root, thus allowing two-way communication.
>
> Is there anyway for the server to re-establish the connection (should it go
> down)  in this setup, or is
> this the sole responsibility of the client?
>
> Thanks
>
> William Lewis
> This message and any attachments (the "message") is
> intended solely for the addressees and is confidential.
> If you receive this message in error, please delete it and
> immediately notify the sender. Any use not in accord with
> its purpose, any dissemination or disclosure, either whole
> or partial, is prohibited except formal approval. The internet
> can not guarantee the integrity of this message.
> BNP PARIBAS (and its subsidiaries) shall (will) not
> therefore be liable for the message if modified.
>
> **********************************************************************************************
>
> BNP Paribas Private Bank London Branch is authorised
> by CECEI & AMF and is regulated by the Financial Services
> Authority for the conduct of its investment business in
> the United Kingdom.
>
> BNP Paribas Securities Services London Branch is authorised
> by CECEI & AMF and is regulated by the Financial Services
> Authority for the conduct of its investment business in
> the United Kingdom.
>
> BNP Paribas Fund Services UK Limited is authorised and
> regulated by the Financial Services Authority
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>

From martin at moellenbecks.de  Mon Dec 26 03:56:24 2005
From: martin at moellenbecks.de (=?ISO-8859-1?Q?Martin_M=F6llenbeck?=)
Date: Mon, 26 Dec 2005 11:56:24 +0100
Subject: [Twisted-Python] Receiving a root from a pb client
In-Reply-To: <OF2099ECF4.E042CF41-ON802570DE.005F4171-802570DE.0062D271@bnpparibas.com>
References: <OF2099ECF4.E042CF41-ON802570DE.005F4171-802570DE.0062D271@bnpparibas.com>
Message-ID: <2C0BC411-4012-439E-A371-8A097458E333@moellenbecks.de>

Hi,

first off all:
   - The only different between client and server in a twisted  
application is the way to etablish a connection.
   - The server listen, the client makes the connection.

For the needs to re-connect after the connection had lost, use the  
"ReconnectingPBClientFactory" defined pbutil.py
from the buildbot source. I use it to handle bad internet connection,  
that often lost the connection. With this factory
and the a client that derived from pb.Root you could get the Root of  
the client at server side after a connection have
been etablished.

Hope that helps.

Greeting
Martin


Am 21.12.2005 um 18:59 schrieb william.lewis at uk.bnpparibas.com:

>
> Hi,
>
> I am using pb to communicate in a client-server configuration. My  
> client inherits from PBClientFactory.
> My server has a remote_take_root() method by which the client can  
> connect to the server and pass in
> its root, thus allowing two-way communication.
>
> Is there anyway for the server to re-establish the connection  
> (should it go down)  in this setup, or is
> this the sole responsibility of the client?
>
> Thanks
>
> William Lewis
> This message and any attachments (the "message") is
> intended solely for the addressees and is confidential.
> If you receive this message in error, please delete it and
> immediately notify the sender. Any use not in accord with
> its purpose, any dissemination or disclosure, either whole
> or partial, is prohibited except formal approval. The internet
> can not guarantee the integrity of this message.
> BNP PARIBAS (and its subsidiaries) shall (will) not
> therefore be liable for the message if modified.
>
> ********************************************************************** 
> ************************
>
> BNP Paribas Private Bank London Branch is authorised
> by CECEI & AMF and is regulated by the Financial Services
> Authority for the conduct of its investment business in
> the United Kingdom.
>
> BNP Paribas Securities Services London Branch is authorised
> by CECEI & AMF and is regulated by the Financial Services
> Authority for the conduct of its investment business in
> the United Kingdom.
>
> BNP Paribas Fund Services UK Limited is authorised and
> regulated by the Financial Services Authority
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051226/386b8901/attachment.html>

From andrea at cpushare.com  Mon Dec 26 09:07:35 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 26 Dec 2005 17:07:35 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
Message-ID: <20051226160735.GP9576@opteron.random>

Hello,

I was just shoked today when I noticed this:

-------------------
import sys

class A(object):
	y = None
	def x(self):
		pass
	def __del__(self):
		print 'deleted'


a = A()
print sys.getrefcount(a)
if 1:
	a.y = a.x
print sys.getrefcount(a)
del a
-------------------

I understood the cross references memleaks well, like "x.y = y; y.x= x;
del x,y", but I didn't imagine that "a.y = a.x" would be enough to
generate a memleak. "a.y = a.x" isn't referencing another structure,
it's referencing itself only. Infact if I do this the memleak goes
away!!

-------------------
import sys

class A(object):
	def x(self):
		pass
	y = x
	def __del__(self):
		print 'deleted'


a = A()
print sys.getrefcount(a)
a.x()
a.y()
print a.x, a.y
del a
-------------------

Now the fact a static field doesn't generate a reference but a dynamic
one does is quite confusing to me and it also opened a can of worms in
my code. I can handle that now that I know about it, but I wonder what
people recommends to solve memleaks of this kind.

I'd also like to know how other languages like ruby and java behave in
terms of self-references of objects. Can't the language understand it's
a self reference, and in turn it's the same as an integer or a string,
like it already does when the member is initialized statically?

Infact can't the language be smart enough to even understand when two
cross referenced objects lost visibility from all points of view, and
drop both objects even if they hold a reference on each other? I
understand this is a lot more complicated but wouldn't it be possible in
theory? What does the garbage collection of other languages like ruby
and java, the same as python or more advanced?

So far my python programs never really cared to released memory (so my
not full understanding of python refcounts wasn't a problem), but now
since I'm dealing with a server I must make sure that the "proto" is
released after a loseConnection invocation. So I must cleanup all cross
and self! references in loseConnection and use weakrefs where needed.

Now those structures that I'm leaking (like the protocol object) are so
tiny that there's no chance that I could ever notice the memleak in real
life, so I had to add debugging code to trap memleaks. You can imagine
my server code like this:

class cpushare_protocol(Int32StringReceiver):
	def connectionMade(self):
		[..]
		self.hard_handlers = {
			PROTO_SECCOMP : self.seccomp_handler,
			PROTO_LOG : self.log_handler,
			}
		[..]
 	def log_handler(self, string):
		[..]
	def seccomp_handler(self, string):
		[..]
	def __del__(self):
		print 'protocol deleted'
	def connectionLost(self, reason):
		[..]
		# memleaks
		del self.hard_handlers
		print 'protocol refcount:', sys.getrefcount(self)
		#assert sys.getrefcount(self) == 4

For things like hard_handlers (that are self-referencing callbacks) I
can't even use the weakref.WeakValueDictionary, because it wouldn't hold
itself, the object gets released immediately. So the only chance I have
to release the memory of the protocol object when the connection is
dropped, is to do an explicit del self.hard_handlers in loseConnection.

I wonder what other twisted developers do to avoid those troubles.
Perhaps I shouldn't use self referencing callbacks to hold the state
machine, and do like the smpt protocol that does this:

    def lookupMethod(self, command):
        return getattr(self, 'do_' + command.upper(), None)

basically working with strings instead of pointers. Or I can simply make
sure to cleanup all structures when I stop using them (like with the del
self.hard_handlers above), but then I'll lose part of the automatic
garbage collection features of python. I really want garbage collection
or I could have written this in C++ if I'm forced to cleanup by hand.

Help is appreciated, thanks!

PS. Merry Christmas and Happy New 2006!



From exarkun at divmod.com  Mon Dec 26 10:21:29 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 26 Dec 2005 12:21:29 -0500
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051226160735.GP9576@opteron.random>
Message-ID: <20051226172129.1217.36853620.divmod.quotient.8236@ohm>

On Mon, 26 Dec 2005 17:07:35 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:
>Hello,

Hey,

This is really a question for a Python list.  However, I've attached 
some comments below. 

>
>I was just shoked today when I noticed this:
>
>-------------------
>import sys
>
>class A(object):
>	y = None
>	def x(self):
>		pass
>	def __del__(self):
>		print 'deleted'
>
>
>a = A()
>print sys.getrefcount(a)
>if 1:
>	a.y = a.x
>print sys.getrefcount(a)
>del a
>-------------------
>
>I understood the cross references memleaks well, like "x.y = y; y.x= x;
>del x,y", but I didn't imagine that "a.y = a.x" would be enough to
>generate a memleak. "a.y = a.x" isn't referencing another structure,
>it's referencing itself only. Infact if I do this the memleak goes
>away!!

I'm not sure how far you've gotten into this, but here's the basic 
explanation: "a.x" gives you a "bound method instance"; since you 
might do anything at all with the object it evaluates to, it wraps 
up a reference to the object "a" references, so it knows what object 
to use as "self"; this has the effect of increasing the reference 
count of "a", but it doesn't actually leak any memory.

Of course, in creating a cycle which contains an object with an 
implementation of __del__, you have created a leak, since Python's 
GC cannot collect that kind of graph.

Hopefully the __del__ implementation is only included as an aid to 
understanding what is going on, and you don't actually need it in 
any of your actual applications.  Once removed, the cycle will be 
collectable by Python.

Another strategy is to periodically examine gc.garbage and manually 
break cycles.  This way, if you do have any __del__ implementations, 
they will no longer be part of a cycle, and Python will again be 
able to collect these objects.

>
>-------------------
>import sys
>
>class A(object):
>	def x(self):
>		pass
>	y = x
>	def __del__(self):
>		print 'deleted'
>
>
>a = A()
>print sys.getrefcount(a)
>a.x()
>a.y()
>print a.x, a.y
>del a
>-------------------
>
>Now the fact a static field doesn't generate a reference but a dynamic
>one does is quite confusing to me and it also opened a can of worms in
>my code. I can handle that now that I know about it, but I wonder what
>people recommends to solve memleaks of this kind.

This is an interesting case.  Python does not do what you probably 
expect here.  When you define a class with methods, Python does not 
actually create any method objects!  It is the actual attribute lookup 
on an instance which creates the method object.  You can see this in 
the following example:


    >>> class X:
    ...   def y(self): pass
    ... 
    >>> a = X()
    >>> a.y is a.y
    False
    >>> a.y is X.__dict__['y']
    False
    >>> X.__dict__['y'] is X.__dict__['y']
    True
    >>> 

So when you added "y" to your class "A", Python didn't care, because 
there aren't even any method objects until you access an attribute 
which is bound to a function.  Continuing the above example:

    >>> sys.getrefcount(a)
    2
    >>> L = [a.y, a.y, a.y, a.y]
    >>> sys.getrefcount(a)
    6
    >>> 

>
>I'd also like to know how other languages like ruby and java behave in
>terms of self-references of objects. Can't the language understand it's
>a self reference, and in turn it's the same as an integer or a string,
>like it already does when the member is initialized statically?

I don't know Ruby well enough to comment directly, but I believe Ruby's 
GC is much simpler (and less capable) than Python's.  Java doesn't have 
bound methods (or unbound methods, or heck, functions): the obvious way 
in which you would construct them on top of the primitives the language 
does offer seems to me as though it would introduce the same "problem" 
you are seeing in Python, but that may just be due to the influence 
Python has had on my thinking.

>
>Infact can't the language be smart enough to even understand when two
>cross referenced objects lost visibility from all points of view, and
>drop both objects even if they hold a reference on each other? I
>understand this is a lot more complicated but wouldn't it be possible in
>theory? What does the garbage collection of other languages like ruby
>and java, the same as python or more advanced?

When you have "two cross referenced objects", that's a cycle, and 
Python will indeed clean it up.  The only exception is if there is a 
__del__ implementation, as I mentioned above.  This is a general problem 
with garbage collection.  If you have two objects which refer to each 
other and which each wish to perform some finalization, which finalizer 
do you call first?

>
>So far my python programs never really cared to released memory (so my
>not full understanding of python refcounts wasn't a problem), but now
>since I'm dealing with a server I must make sure that the "proto" is
>released after a loseConnection invocation. So I must cleanup all cross
>and self! references in loseConnection and use weakrefs where needed.
>
>Now those structures that I'm leaking (like the protocol object) are so
>tiny that there's no chance that I could ever notice the memleak in real
>life, so I had to add debugging code to trap memleaks. You can imagine
>my server code like this:

You might be surprised :)  These things tend to build up, if your process 
is long-running.

>
>class cpushare_protocol(Int32StringReceiver):
>	def connectionMade(self):
>		[..]
>		self.hard_handlers = {
>			PROTO_SECCOMP : self.seccomp_handler,
>			PROTO_LOG : self.log_handler,
>			}
>		[..]
> 	def log_handler(self, string):
>		[..]
>	def seccomp_handler(self, string):
>		[..]
>	def __del__(self):
>		print 'protocol deleted'
>	def connectionLost(self, reason):
>		[..]
>		# memleaks
>		del self.hard_handlers
>		print 'protocol refcount:', sys.getrefcount(self)
>		#assert sys.getrefcount(self) == 4
>
>For things like hard_handlers (that are self-referencing callbacks) I
>can't even use the weakref.WeakValueDictionary, because it wouldn't hold
>itself, the object gets released immediately. So the only chance I have
>to release the memory of the protocol object when the connection is
>dropped, is to do an explicit del self.hard_handlers in loseConnection.
>
>I wonder what other twisted developers do to avoid those troubles.
>Perhaps I shouldn't use self referencing callbacks to hold the state
>machine, and do like the smpt protocol that does this:
>
>    def lookupMethod(self, command):
>        return getattr(self, 'do_' + command.upper(), None)
>
>basically working with strings instead of pointers. Or I can simply make
>sure to cleanup all structures when I stop using them (like with the del
>self.hard_handlers above), but then I'll lose part of the automatic
>garbage collection features of python. I really want garbage collection
>or I could have written this in C++ if I'm forced to cleanup by hand.

(You can probably guess what I'm going to say here. ;)  In general, I 
avoid implementing __del__.  My programs may end up with cycles, but 
as long as I don't have __del__, Python can figure out how to free the 
objects.  Note that it does sometimes take it a while (and this has 
implications for peak memory usage which may be important to you), but 
if you find a case that it doesn't handle, then you've probably found 
a bug in the GC that python-dev will fix.

Hope this helps, and happy holidays,

Jean-Paul



From bob at redivi.com  Mon Dec 26 10:31:32 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 26 Dec 2005 12:31:32 -0500
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051226160735.GP9576@opteron.random>
References: <20051226160735.GP9576@opteron.random>
Message-ID: <2BD9F3A6-B730-4FBF-8E95-86B0A312A881@redivi.com>


On Dec 26, 2005, at 11:07 AM, Andrea Arcangeli wrote:

> I was just shoked today when I noticed this:
>
> -------------------
> import sys
>
> class A(object):
> 	y = None
> 	def x(self):
> 		pass
> 	def __del__(self):
> 		print 'deleted'
>
>
> a = A()
> print sys.getrefcount(a)
> if 1:
> 	a.y = a.x
> print sys.getrefcount(a)
> del a
> -------------------
>
> I understood the cross references memleaks well, like "x.y = y;  
> y.x= x;
> del x,y", but I didn't imagine that "a.y = a.x" would be enough to
> generate a memleak. "a.y = a.x" isn't referencing another structure,
> it's referencing itself only. Infact if I do this the memleak goes
> away!!

Objects that use __del__ don't participate in cyclic garbage  
collection.  You really want to write code that doesn't need it, or  
that uses weakref callbacks instead of __del__.

-bob




From andrea at cpushare.com  Mon Dec 26 17:18:33 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 01:18:33 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051226172129.1217.36853620.divmod.quotient.8236@ohm>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
Message-ID: <20051227001833.GQ9576@opteron.random>

On Mon, Dec 26, 2005 at 12:21:29PM -0500, Jean-Paul Calderone wrote:
> Of course, in creating a cycle which contains an object with an 
> implementation of __del__, you have created a leak, since Python's 
> GC cannot collect that kind of graph.

Ah this explains many things. I didn't realize that having a __del__
callback made any difference from a garbage collection point of view, so
while trying to fix memleaks I probably added them ;).

Sorry for posting it here and not a python list, but my basic problem is
to make sure the "protocol" object is being collected away, and the
protocol object is a very twisted thing, so I thought it would be at
on topic here since everyone of us needs the protocol object garbage
collected properly. Now it turned out more a language thing than I
thought originally...

Ok, going back to how this thing started. I happened to allocate 50M of
ram somehow attached to a protocol object, and then I noticed that the
reconnectingclientfactory was leaking memory after a
disconnect/reconnect event. Every time I restarted the server, 50M were
added to the RSS of the task. That was definitely a memleak, and I never
had a __del__ method. Then I started adding debugging aid to figure out
what was going wrong. By removing the self and cross references the
memleak was fixed in the client. So then I figured out the same
self-references were in the server as well, and I added more debugging
in the server as well. That lead me in the current situation.  So
something was definitely going wrong w.r.t. memleaks even before I
started messing with the __del__ methods.

But I'm very relieived to know that python gets it right if __del__
isn't implemented.

> Hopefully the __del__ implementation is only included as an aid to 
> understanding what is going on, and you don't actually need it in 
> any of your actual applications.  Once removed, the cycle will be 
> collectable by Python.

Correct, it was only an aid, it didn't exist until today.

> When you have "two cross referenced objects", that's a cycle, and 
> Python will indeed clean it up.  The only exception is if there is a 

Well, I never cared about cyclic references until today, because I
thought python would understand it automatically like I think it's
possible infact.

But then while trying to debug the 50M leak in the client at every
server restart (so very visible), I quickly into this:

	http://www.nightmare.com/medusa/memory-leaks.html

class thing:
    pass

a = thing()
b = thing()
a.other = b
b.other = a

del a
del b    

Code like above is very common in my twisted based server. Note that
there's no __del__ method in the class "thing". So what you say seems in
disagreement with the above url. Perhaps I got bitten by the common
mistake "I found it on the internet so it must be true"... I really
hope you're the one being right, my code was all written with your ideas
in mind but that seems to collide strong with the above url. I guess I
should have checked the date, it's from 99, perhaps it has been true a
long time ago?

> __del__ implementation, as I mentioned above.  This is a general problem 
> with garbage collection.  If you have two objects which refer to each 
> other and which each wish to perform some finalization, which finalizer 
> do you call first?

Why would it matter which one you call first? Random no? Better to call
it random than to leak memory, no? At least python should spawn a
gigantic warning that there's a cross reference leaking, instead of
silenty not calling __del__.

> You might be surprised :)  These things tend to build up, if your process 
> is long-running.

I think you're right there was no memleak generated by self/cross
cyclic references, but then the load is pretty low at the moment so I
could have overlooked it. I periodically monitor the rss of all tasks.
I never had problems before noticing the reconnectingclientfactory
memleak (which btw I can't reproduce anymore after removing the cross
references).

> (You can probably guess what I'm going to say here. ;)  In general, I 
> avoid implementing __del__.  My programs may end up with cycles, but 
> as long as I don't have __del__, Python can figure out how to free the 
> objects.  Note that it does sometimes take it a while (and this has 
> implications for peak memory usage which may be important to you), but 
> if you find a case that it doesn't handle, then you've probably found 
> a bug in the GC that python-dev will fix.
> 
> Hope this helps, and happy holidays,

Thanks a lot, things looks much better now, I'm relieved that python can
figure out how to free objects, I always thought it was able to do so
infact ;). Happy holidays to you too.

So, I'll backout all my latest changes, and I'll try to find the real
cause of the reconnectingclientfactory memleak which definitely happened
even though there was no __del__ method implemented.



From andrea at cpushare.com  Mon Dec 26 17:20:09 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 01:20:09 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <2BD9F3A6-B730-4FBF-8E95-86B0A312A881@redivi.com>
References: <20051226160735.GP9576@opteron.random>
	<2BD9F3A6-B730-4FBF-8E95-86B0A312A881@redivi.com>
Message-ID: <20051227002009.GR9576@opteron.random>

On Mon, Dec 26, 2005 at 12:31:32PM -0500, Bob Ippolito wrote:
> Objects that use __del__ don't participate in cyclic garbage  
> collection.  You really want to write code that doesn't need it, or  
> that uses weakref callbacks instead of __del__.

Thanks for the hint! I didn't know that __del__ made a difference to the
garabage collection decisions, that combined with an obsolete webpage
written in 99 was the source of quite some confusion to me.



From moe at divmod.com  Mon Dec 26 17:39:30 2005
From: moe at divmod.com (Moe Aboulkheir)
Date: Tue, 27 Dec 2005 02:39:30 +0200
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051227001833.GQ9576@opteron.random>
Message-ID: <20051227003930.1217.246783937.divmod.quotient.8247@ohm>

On Tue, 27 Dec 2005 01:18:33 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:

>But then while trying to debug the 50M leak in the client at every
>server restart (so very visible), I quickly into this:
>
>	http://www.nightmare.com/medusa/memory-leaks.html
>
>class thing:
>    pass
>
>a = thing()
>b = thing()
>a.other = b
>b.other = a
>
>del a
>del b
>
>Code like above is very common in my twisted based server. Note that
>there's no __del__ method in the class "thing". So what you say seems in
>disagreement with the above url. Perhaps I got bitten by the common
>mistake "I found it on the internet so it must be true"...

the document at that URL is six years old, and so dates from a time when python's garbage collector couldn't properly deal with plain cyclical references, AFAICT.

--
Moe Aboulkheir



From andrea at cpushare.com  Mon Dec 26 18:02:37 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 02:02:37 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051227001833.GQ9576@opteron.random>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
Message-ID: <20051227010237.GS9576@opteron.random>

On Tue, Dec 27, 2005 at 01:18:33AM +0100, Andrea Arcangeli wrote:
> So, I'll backout all my latest changes, and I'll try to find the real

Now after understanding the __del__ heisenbug in my testcases, and a
1000 lines backout (dropping all weakrefs and hacks I did to try to
remove those pratical memleaks) here my findings on the real life
reconnectingclientfactory memleak that made me look into this in the
first place: It wasn't a memleak in theory, it was only in practice...
gc.collect() seems not invoked frequently enough.

Here it is a ps v of my reconnectingclientfactory with an artificial disconnect
from the server at every second (as said before about 50M were attached to
every new protocol instance).

while :; do ps v |grep [c]pushare-0; sleep 1; done
20113 pts/6    SNl+   0:00      0     2 94453 51492  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:00      0     2 115017 70120  4.5 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:00      0     2 135513 92528  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:00      0     2 135513 92528  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:00      0     2 135513 92528  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:01      0     2 176497 133512  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:01      0     2 176497 133512  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:01      0     2 176497 133512  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:01      0     2 217481 174496 11.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:01      0     2 217481 174496 11.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:01      0     2 217481 174496 11.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:01      0     2 278957 216252 14.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 94529 51568  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 94529 51568  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:02      0     2 125269 82252  5.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 135513 92584  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 135513 92584  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 135513 92584  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 176497 133580  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 176497 133580  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 176497 133596  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 135513 92584  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 135513 92584  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 135513 92584  6.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 176497 133580  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 176497 133580  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:02      0     2 176497 133596  8.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 217481 174588 11.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 217481 174588 11.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 217481 174596 11.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 258465 215580 14.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 258465 215580 14.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 258465 215580 14.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 299449 256584 16.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 299449 256584 16.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:03      0     2 299449 256584 16.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:04      0     2 319937 275096 17.8 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:04      0     2 340433 297568 19.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:04      0     2 340433 297568 19.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:04      0     2 340433 297584 19.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:04      0     2 381417 338568 22.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:04      0     2 381417 338568 22.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:04      0     2 381417 338568 22.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:05      0     2 412221 369312 24.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:05      0     2 422469 379560 24.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:04      0     2 381417 338568 22.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:05      0     2 412221 369312 24.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:05      0     2 422469 379560 24.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:05      0     2 422469 379560 24.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:05      0     2 422537 379572 24.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:05      0     2 463457 420556 27.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:05      0     2 463457 420556 27.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:05      0     2 463457 420556 27.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:06      0     2 524933 472712 30.7 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:06      0     2 504441 461548 30.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:06      0     2 504441 461548 30.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:06      0     2 524929 482044 31.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:07      0     2 545425 502540 32.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:07      0     2 545425 502540 32.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:07      0     2 545425 502540 32.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:07      0     2 586413 534096 34.7 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:07      0     2 586409 543532 35.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:07      0     2 586409 543532 35.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:07      0     2 586497 543540 35.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:08      0     2 627417 584524 38.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:08      0     2 627417 584524 38.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:08      0     2 627417 584524 38.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:08      0     2 647905 605016 39.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:08      0     2 668401 625512 40.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:08      0     2 668401 625512 40.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:08      0     2 668401 625512 40.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:09      0     2 709389 663952 43.1 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:09      0     2 709385 666500 43.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:09      0     2 709385 666500 43.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:09      0     2 709385 666500 43.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:09      0     2 740121 697240 45.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:10      0     2 750369 707488 45.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:10      0     2 750369 707488 45.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:10      0     2 750369 707488 45.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:10      0     2 791357 744356 48.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:10      0     2 791353 748248 48.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:10      0     2 791353 748248 48.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:10      0     2 791353 748252 48.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:11      0     2 842581 790452 51.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:11      0     2 832337 788608 51.2 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:11      0     2 832337 788608 51.2 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:11      0     2 832337 788608 51.2 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:11      0     2 863077 819348 53.2 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 873321 829596 53.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 873321 829596 53.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:11      0     2 832337 788608 51.2 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:11      0     2 832337 788608 51.2 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:11      0     2 863077 819348 53.2 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 873321 829596 53.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 873321 829596 53.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 873321 829596 53.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 904061 860200 55.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    DNl+   0:12      0     2 924549 874220 56.8 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    DNl+   0:12      0     2 934797 883008 57.4 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    DNl+   0:12      0     2 934797 890176 57.8 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 914305 869848 56.5 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    SNl+   0:12      0     2 914305 869848 56.5 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    RNl+   0:12      0     2 914305 869848 56.5 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    DNl+   0:13      0     2 945041 900420 58.5 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    DNl+   0:13      0     2 965533 916084 59.5 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
20113 pts/6    DNl+   0:13      0     2 975781 925724 60.1 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py


At the end the system was heavy into swap: huge memelak. But it shouldn't have
happened, I know how to write code not to generate memleaks, the only thing left
were cyclical references and self references, but there was no visibility at all
of the objects that were supposed to be freed.

Now see the right fix that made the original gigantic memleak go away!

Index: cpushare/proto.py
===================================================================
RCS file: /home/andrea/crypto/cvs/cpushare/client/cpushare/cpushare/proto.py,v
retrieving revision 1.62
diff -u -p -r1.62 proto.py
--- cpushare/proto.py	27 Dec 2005 00:43:34 -0000	1.62
+++ cpushare/proto.py	27 Dec 2005 00:50:13 -0000
@@ -206,6 +206,8 @@ class cpushare_factory(ReconnectingClien
 
 	def buildProtocol(self, addr):
 		self.resetDelay()
+		import gc
+		gc.collect()
 		return ReconnectingClientFactory.buildProtocol(self, addr)
 
 	def clientConnectionLost(self, connector, reason):



And now see the output of the same command with the same
reconnectingclientfactory being restarted once every second, but with the above
two liner fix applied.

21219 pts/6    RNl+   0:00      0     2 73773 30924  2.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:00      0     2 94233 51428  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:00      0     2 94233 51428  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:00      0     2 94233 51428  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    RNl+   0:01      0     2 83985 41188  2.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:01      0     2 94233 51436  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:01      0     2 94233 51436  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    RNl+   0:01      0     2 73737 30944  2.0 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:01      0     2 94233 51440  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:01      0     2 94233 51440  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    RNl+   0:01      0     2 63497 17496  1.1 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:01      0     2 94233 51440  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:01      0     2 94233 51440  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    RNl+   0:02      0     2 53249 10464  0.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:02      0     2 94233 51448  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:02      0     2 94233 51448  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:02      0     2 53249 10468  0.6 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:02      0     2 94233 51452  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:02      0     2 94233 51452  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    RNl+   0:02      0     2 63497 15368  0.9 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51476  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51476  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51476  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51476  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51476  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51476  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51480  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51480  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py
21219 pts/6    SNl+   0:03      0     2 94233 51480  3.3 python /home/andrea/bin/x86_64/python/bin/twistd --pidfile cpushare-0.pid -noy cpushare/tap.py

Now the RSS of the task never exceeds 50M, this is perfectly correct and
the expected behaviour since the first place.

The memleak disappeared completely. So it wasn't a memleak, nor a bug in my
code, but it was only the lack of garbage collection invocation! Of course
my previous attempts of removing the cyclical references made the
problem go away artificially but it made my code a total mess (similar
to c++ style), because then the refcount of the protocol was forced to
go down to 0 and so the memory was released synchronously.

So the question now, is how frequently is the garbage collection invoked, and
why do I need to invoke it by myself to avoid a gigantic "pratical"
memleaks?

Of course now I'll keep an explicit gc.collect() into the reconnecting
handler. Should I add an explicit timer rearming itself and invoking the
garbage collection periodically in the server too?

I'm really relieved the article dating back to 99 was totally obsolete
since my code has always been written for 2005 python garbage collection ;)

Thanks a lot for the quick help!



From andrea at cpushare.com  Mon Dec 26 18:09:46 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 02:09:46 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051227003930.1217.246783937.divmod.quotient.8247@ohm>
References: <20051227001833.GQ9576@opteron.random>
	<20051227003930.1217.246783937.divmod.quotient.8247@ohm>
Message-ID: <20051227010946.GT9576@opteron.random>

On Tue, Dec 27, 2005 at 02:39:30AM +0200, Moe Aboulkheir wrote:
> the document at that URL is six years old, and so dates from a time when 
> python's garbage collector couldn't properly deal with plain cyclical 
> references, AFAICT.

cool, thanks for confirming this. I admit I didn't pay attention to the
date before reading your replies here... also because I could reproduce
the problem here due the __del__ heisenbug in my testcases.

I'm just sending an email to the owner of the obsolete info, that page
scored at the top of my google search for python memleaks and it created
me lots of unnecessary confusion ;). But after all it's good because now
I learnt about the __del__ effect on the gc. Sorry for the noise.

The only remaining thing to understand is why by default the collect()
method is never invoked and I've to invoke it explicitly to avoid a
gigantic leak (see my previous email with the fix for my
reconnectingclientfactory pratical memleak that made me look into this).



From bob at redivi.com  Mon Dec 26 18:22:24 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 26 Dec 2005 20:22:24 -0500
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051227010237.GS9576@opteron.random>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random>
Message-ID: <ADFEA6CA-5E1D-4511-9E7D-C501AB286BC9@redivi.com>


On Dec 26, 2005, at 8:02 PM, Andrea Arcangeli wrote:

> On Tue, Dec 27, 2005 at 01:18:33AM +0100, Andrea Arcangeli wrote:
>> So, I'll backout all my latest changes, and I'll try to find the real
>
> Now after understanding the __del__ heisenbug in my testcases, and a
> 1000 lines backout (dropping all weakrefs and hacks I did to try to
> remove those pratical memleaks) here my findings on the real life
> reconnectingclientfactory memleak that made me look into this in the
> first place: It wasn't a memleak in theory, it was only in practice...
> gc.collect() seems not invoked frequently enough.

Take a look at:
http://docs.python.org/lib/module-gc.html

You can adjust the threshold for each GC generation to suit your  
application better.

-bob




From jcea at argo.es  Mon Dec 26 19:28:30 2005
From: jcea at argo.es (Jesus Cea)
Date: Tue, 27 Dec 2005 03:28:30 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051227010237.GS9576@opteron.random>
References: <20051226160735.GP9576@opteron.random>	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random>
Message-ID: <43B0A6CE.7080200@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Wow, Andrea Arcangeli, of Linux Kernel fame. What an honor :).

> +		import gc
> +		gc.collect()

Haha. I was just writing you about manual garbage collector invocations.

Manual collections can be costly, nevertheless. Since the manual
collector is only needed to free cyclic references, I guess that Twisted
people would rather prefer a patch to break cyclic references in Twisted
code. For example, using "__del__" methods or "weakref".

You can easily see what objects and references keep the cycles alive
using "gc.garbage" and "gc.get_referrers()". Usually a single
"a.value=None" can do miracles :-). Weakref can be very very helpful, also.

http://docs.python.org/lib/module-gc.html
http://docs.python.org/lib/module-weakref.html

Merry Christmas and happy 2006, by the way.

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ7Cmzplgi5GaxT1NAQJndAP/YQNK/wHcBWIBfybJEeMyyaCJ+nxNsOXo
XYZ/L0znLwnUY2enpwQ9GWDb1N1JlSRGyBs19EVXsu1kl9XuCxKjO+Qc2wuZE8La
kspNJu9ZEHTVn8hNhgoZkFsKmed8g2zvP8HmlFD1ZEdXJ3+nuzmf2AjcsBHUkFl8
Aqe1+xrIp+Q=
=Cobp
-----END PGP SIGNATURE-----



From andrea at cpushare.com  Mon Dec 26 19:37:06 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 03:37:06 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <ADFEA6CA-5E1D-4511-9E7D-C501AB286BC9@redivi.com>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random>
	<ADFEA6CA-5E1D-4511-9E7D-C501AB286BC9@redivi.com>
Message-ID: <20051227023706.GW9576@opteron.random>

On Mon, Dec 26, 2005 at 08:22:24PM -0500, Bob Ippolito wrote:
> Take a look at:
> http://docs.python.org/lib/module-gc.html
> 
> You can adjust the threshold for each GC generation to suit your  
> application better.

gc.set_threshold(1, 1, 1) fixed it too, any other setting didn't
(sometime it increases to 100m). If (1,1,1) is as good as it can get,
I'll keep doing the gc.collect() during the factory restart since the
50m allocation only happens after the connectionMade callback and never
again in the context of any given protocol. So the gc.collect() seems
the optimal fix to me for now.

I wish the size of the task would be taken into account any way in the
threshold tunables. I'd like to say "gc.set_mem_threshold({30*1024*1024
: (10, 10, 10), 50*1024*1024 : (1, 1, 1),})", which mean it's a dynamic
threshold. It should be possible to implement this in O(1), the
interpreter should easily track how much anonymous memory it has
allocated with malloc at any given time. The more anonymous memory, the
less generations it should wait. It could be a linear function too.
However for now I'm happy with the gc.collect().

Thanks a lot for all help.



From radeex at gmail.com  Mon Dec 26 19:47:42 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 27 Dec 2005 13:47:42 +1100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <43B0A6CE.7080200@argo.es>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random> <43B0A6CE.7080200@argo.es>
Message-ID: <60ed19d40512261847k56ee4da4o654a80f978edfbd2@mail.gmail.com>

On 12/27/05, Jesus Cea <jcea at argo.es> wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Wow, Andrea Arcangeli, of Linux Kernel fame. What an honor :).
>
> > +             import gc
> > +             gc.collect()
>
> Haha. I was just writing you about manual garbage collector invocations.
>
> Manual collections can be costly, nevertheless. Since the manual
> collector is only needed to free cyclic references, I guess that Twisted
> people would rather prefer a patch to break cyclic references in Twisted
> code. For example, using "__del__" methods or "weakref".
>
> You can easily see what objects and references keep the cycles alive
> using "gc.garbage" and "gc.get_referrers()". Usually a single
> "a.value=None" can do miracles :-). Weakref can be very very helpful, also.

Just some points of clarification, as I don't think Jesus has got the
whole story:

 - gc.collect() is the equivalent of what's run occassionally by
Python. So explicitly calling it is *not* required to break all
circular references. In this case, it only helped because Andrea was
accumulating objects quicker than the Python-scheduled gc.collect was
being run.
 - I really doubt we need a patch to Twisted to break any cyclic references. :)
 - gc.garbage contains what _won't_ be collected by a call to
gc.collect(). gc.garbage contains only broken cycles (e.g., those with
objects that have __del__ methods), not all cycles.
- Ever since the new gc system was enabled by default in Python, it
should never be necessary to manually break cycles unless you have
__del__ crap involved.


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From jcea at argo.es  Mon Dec 26 20:17:21 2005
From: jcea at argo.es (Jesus Cea)
Date: Tue, 27 Dec 2005 04:17:21 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <60ed19d40512261847k56ee4da4o654a80f978edfbd2@mail.gmail.com>
References: <20051226160735.GP9576@opteron.random>	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>	<20051227001833.GQ9576@opteron.random>	<20051227010237.GS9576@opteron.random>
	<43B0A6CE.7080200@argo.es>
	<60ed19d40512261847k56ee4da4o654a80f978edfbd2@mail.gmail.com>
Message-ID: <43B0B241.6090607@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Thank you for ypur correction, Christopher. You are right, of course. My
fault. I apologize. 04:08 in the morning in Spain :-p. Better go to bed
now...

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ7CyQJlgi5GaxT1NAQKyWAP9FNb1a9POh2XsTnCrRcxEDQQdIy2451iq
uqGVlFHmUMx90TmY3rn2HATXOASzc+pz+UPQOD8eRJiyhNVNP/OSxK6sx55Wyjnm
6KI01j7WxlE5P06tS58ANFDiDuudDOqM4kmOb6xtXkSSfeDFsmfecwWnXhKgnzaZ
cyeAWW92cR0=
=xanq
-----END PGP SIGNATURE-----



From andrea at cpushare.com  Mon Dec 26 20:20:07 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 04:20:07 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <43B0A6CE.7080200@argo.es>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random> <43B0A6CE.7080200@argo.es>
Message-ID: <20051227032007.GY9576@opteron.random>

On Tue, Dec 27, 2005 at 03:28:30AM +0100, Jesus Cea wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> Wow, Andrea Arcangeli, of Linux Kernel fame. What an honor :).
> 
> > +		import gc
> > +		gc.collect()
> 
> Haha. I was just writing you about manual garbage collector invocations.

;) Thanks! I couldn't even think that it could have been the garbage
collector because the thing was >1G large. I definitely expected any
sane garbage collector to kick in at least once every time the task was
doubling in size and certainly before the thing could grow to the
gigabytes. Perhaps this is what should really happen. Every time the
task doubles in size we could force a gc.collect(). The growth rate that
should trigger a collect() could be a threshold tunable too (default
None to be backwards compatible even though I think None is not a
safe/sane default).

> Manual collections can be costly, nevertheless. Since the manual
> collector is only needed to free cyclic references, I guess that Twisted
> people would rather prefer a patch to break cyclic references in Twisted
> code. For example, using "__del__" methods or "weakref".
> 
> You can easily see what objects and references keep the cycles alive
> using "gc.garbage" and "gc.get_referrers()". Usually a single
> "a.value=None" can do miracles :-). Weakref can be very very helpful, also.

a.value=None + weakrefs is what did the miracles indeed, but I did it in my
code not in twisted code. twisted code has no cyclic references. All
cyclic references were in my code sitting on top of twisted. It's me
implementing the protocol.

The a.value=None made the code a mess, the weakref complicated things
too (especially because I had to hash one of those weak values, so I had
to use weakref.ref and I had to change lots of code to add "()"). So I'm
soooo glad to have backed out all those changes because they were
unnecessary ;). Plus a.value = None is similar to freeing memory in a
normal language without garbage collection, not very different from
free(a.value). So I certainly prefer to use the more advanced features
of the garbage collector, even if I have to invoke it by hand... ;)



From andrea at cpushare.com  Mon Dec 26 20:27:24 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 04:27:24 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <60ed19d40512261847k56ee4da4o654a80f978edfbd2@mail.gmail.com>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random> <43B0A6CE.7080200@argo.es>
	<60ed19d40512261847k56ee4da4o654a80f978edfbd2@mail.gmail.com>
Message-ID: <20051227032724.GZ9576@opteron.random>

On Tue, Dec 27, 2005 at 01:47:42PM +1100, Christopher Armstrong wrote:
>  - gc.collect() is the equivalent of what's run occassionally by

IMHO the "occasionally" is the only wrong thing of the whole story. It
must not be "occasionally", it must be "occasionally _or_ when the task
is growing to an insanse size". The total amount of anonymous memory
allocated by the interpreter must be tracked in O(1) and a collect()
should have been invokved at least every time the amount of memory
doubled.

The reason it took me so long before I could suspect the gc, is that
coming from a vm kernel background, I couldn't even dream that after the
task grown up to >1G and the system was into swap, the python gc didn't
even yet try to prune all potentially freeable objects. The gc should
definitely be in function of "size" too, and currently it's not. There
is definitely room for improvements in the gc by adding heuristics in
function of "size of anonymous memory allocated", and it doesn't seem
difficult to add it, nor it should impact performance since the
deep gc.collect() (the only costly thing) would very rarely be invoked
more frequently.



From therve at free.fr  Tue Dec 27 01:35:03 2005
From: therve at free.fr (Thomas HERVE)
Date: Tue, 27 Dec 2005 09:35:03 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051227032724.GZ9576@opteron.random>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random> <43B0A6CE.7080200@argo.es>
	<60ed19d40512261847k56ee4da4o654a80f978edfbd2@mail.gmail.com>
	<20051227032724.GZ9576@opteron.random>
Message-ID: <20051227093503.ybjc3vp9w880wo4o@itchy.wasabout.net>

Quoting Andrea Arcangeli <andrea at cpushare.com>:

> On Tue, Dec 27, 2005 at 01:47:42PM +1100, Christopher Armstrong wrote:
>>  - gc.collect() is the equivalent of what's run occassionally by
>
> IMHO the "occasionally" is the only wrong thing of the whole story. It
> must not be "occasionally", it must be "occasionally _or_ when the task
> is growing to an insanse size".

One good way to see the gc in action is to add 
'gc.set_debug(gc.DEBUG_LEAK)' at
the start of your program. Most of the time I realize it's my program fault
when I use this :).

But you may have to adjust the gc threshold in real life application 
(note that
a reconnectingclientfactory with a disconnect every second is not 
exactly a use
case).

-- 
Thomas




From therve at free.fr  Tue Dec 27 06:15:53 2005
From: therve at free.fr (Thomas HERVE)
Date: Tue, 27 Dec 2005 14:15:53 +0100
Subject: Python 2.2 Support has been officially dropped (was Re:
	[Twisted-Python] Python 2.2 Support)
In-Reply-To: <20051224041445.1217.1583662422.divmod.quotient.7996@ohm>
References: <20051224041445.1217.1583662422.divmod.quotient.7996@ohm>
Message-ID: <20051227141553.y5kvigumbk04gos8@itchy.wasabout.net>

Quoting glyph at divmod.com:

> That means that 2.2 is no longer officially supported, and the next 
> release will not run on any 2.2-only platforms.
>
> Merry christmas, I guess :).
>

Great news ! We may finally enjoy 2.3 optimizations in Twisted : I think about
string module, list comprehensions, optparse, new style classes... without
introducing changes (just syntaxic/optimization changes).

Would it be the good moment to open a topic in the bug tracker to hold these
patches ? Or it's better to wait for a sprint, when all these changes could be
made ?

Thanks for everything,

-- 
Thomas






From radeex at gmail.com  Tue Dec 27 06:23:59 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 28 Dec 2005 00:23:59 +1100
Subject: Python 2.2 Support has been officially dropped (was Re:
	[Twisted-Python] Python 2.2 Support)
In-Reply-To: <20051227141553.y5kvigumbk04gos8@itchy.wasabout.net>
References: <20051224041445.1217.1583662422.divmod.quotient.7996@ohm>
	<20051227141553.y5kvigumbk04gos8@itchy.wasabout.net>
Message-ID: <60ed19d40512270523m4e2992cv4c7176addc5a85d3@mail.gmail.com>

On 12/28/05, Thomas HERVE <therve at free.fr> wrote:
> Great news ! We may finally enjoy 2.3 optimizations in Twisted : I think about
> string module, list comprehensions, optparse, new style classes... without
> introducing changes (just syntaxic/optimization changes).

Wow man, where have you been? The string module has been mostly
obsolete since (I think) 2.0, and the list comps and new style classes
were already in Python 2.2. I can't remember about optparse; all
Twisted code uses twisted.python.usage.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From andrea at cpushare.com  Tue Dec 27 06:37:54 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 27 Dec 2005 14:37:54 +0100
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051227093503.ybjc3vp9w880wo4o@itchy.wasabout.net>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
	<20051227001833.GQ9576@opteron.random>
	<20051227010237.GS9576@opteron.random> <43B0A6CE.7080200@argo.es>
	<60ed19d40512261847k56ee4da4o654a80f978edfbd2@mail.gmail.com>
	<20051227032724.GZ9576@opteron.random>
	<20051227093503.ybjc3vp9w880wo4o@itchy.wasabout.net>
Message-ID: <20051227133754.GA27200@opteron.random>

On Tue, Dec 27, 2005 at 09:35:03AM +0100, Thomas HERVE wrote:
> But you may have to adjust the gc threshold in real life application 
> (note that
> a reconnectingclientfactory with a disconnect every second is not 
> exactly a use
> case).

You just need to send a buffer larger than MAX_LENGTH of the
Int32StringReceiver to trigger a disconnect on the other end, this is
what my testcase did. Of course it's not the normal behaviour, but
python shouldn't allocate >1G of ram in that case, exactly because this
is not a common load, you should only have to worry about why the other
end dropped the connection, and not about the memory management.



From therve at free.fr  Tue Dec 27 06:59:00 2005
From: therve at free.fr (Thomas HERVE)
Date: Tue, 27 Dec 2005 14:59:00 +0100
Subject: Python 2.2 Support has been officially dropped (was Re:
	[Twisted-Python] Python 2.2 Support)
In-Reply-To: <60ed19d40512270523m4e2992cv4c7176addc5a85d3@mail.gmail.com>
References: <20051224041445.1217.1583662422.divmod.quotient.7996@ohm>
	<20051227141553.y5kvigumbk04gos8@itchy.wasabout.net>
	<60ed19d40512270523m4e2992cv4c7176addc5a85d3@mail.gmail.com>
Message-ID: <20051227145900.79rkpba0gs0kg4k4@itchy.wasabout.net>

Quoting Christopher Armstrong <radeex at gmail.com>:
>
> Wow man, where have you been? The string module has been mostly
> obsolete since (I think) 2.0, and the list comps and new style classes
> were already in Python 2.2

Well I do know that, but what's the reason why I see so many "import 
string" in
the trunk ? Why I see so many classes that don't subclass object ?

I know it's a lot of work, so I was just asking if it's in the roadmap or not.

> I can't remember about optparse; all
> Twisted code uses twisted.python.usage.

Wouldn't it be better to subclass OptParse ? I have the feeling usage.Options
does nearly the same things.

-- 
Thomas





From exarkun at divmod.com  Tue Dec 27 07:14:35 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 27 Dec 2005 09:14:35 -0500
Subject: Python 2.2 Support has been officially dropped (was Re:
	[Twisted-Python] Python 2.2 Support)
In-Reply-To: <20051227145900.79rkpba0gs0kg4k4@itchy.wasabout.net>
Message-ID: <20051227141435.1217.545088208.divmod.quotient.8347@ohm>

On Tue, 27 Dec 2005 14:59:00 +0100, Thomas HERVE <therve at free.fr> wrote:
>Quoting Christopher Armstrong <radeex at gmail.com>:
>>
>>Wow man, where have you been? The string module has been mostly
>>obsolete since (I think) 2.0, and the list comps and new style classes
>>were already in Python 2.2
>
>Well I do know that, but what's the reason why I see so many "import string" 
>in
>the trunk ? Why I see so many classes that don't subclass object ?

Patches that remove usage of the string module will surely be 
accepted. :)

Patches that introduce object as a base class may not be.  Classic 
classes behave differently than new-style classes.  It is not always 
possible to replace the former with the latter while maintaining API
compatibility.

>
>I know it's a lot of work, so I was just asking if it's in the roadmap or 
>not.
>>I can't remember about optparse; all
>>Twisted code uses twisted.python.usage.
>
>Wouldn't it be better to subclass OptParse ? I have the feeling 
>usage.Options
>does nearly the same things.

Perhaps OptParse should subclass usage.Options.

Seriously.  We looked at switching to optparse a while ago.  t.p.u 
is better.  Nothing stops you from using optparse with Twisted, 
though.

Jean-Paul



From radeex at gmail.com  Tue Dec 27 07:17:13 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 28 Dec 2005 01:17:13 +1100
Subject: Python 2.2 Support has been officially dropped (was Re:
	[Twisted-Python] Python 2.2 Support)
In-Reply-To: <20051227145900.79rkpba0gs0kg4k4@itchy.wasabout.net>
References: <20051224041445.1217.1583662422.divmod.quotient.7996@ohm>
	<20051227141553.y5kvigumbk04gos8@itchy.wasabout.net>
	<60ed19d40512270523m4e2992cv4c7176addc5a85d3@mail.gmail.com>
	<20051227145900.79rkpba0gs0kg4k4@itchy.wasabout.net>
Message-ID: <60ed19d40512270617y40acf231o9f36b750b26a7039@mail.gmail.com>

On 12/28/05, Thomas HERVE <therve at free.fr> wrote:
> Quoting Christopher Armstrong <radeex at gmail.com>:
> >
> > Wow man, where have you been? The string module has been mostly
> > obsolete since (I think) 2.0, and the list comps and new style classes
> > were already in Python 2.2
>
> Well I do know that, but what's the reason why I see so many "import
> string" in
> the trunk ? Why I see so many classes that don't subclass object ?

Don't rock the boat. Don't fix what ain't broken. etc. New classes
often subclass object, and new code always uses str methods. I do seem
to remember that there was a big str-method change to Twisted a while
back, for the sake of optimisation. I don't see any similar
improvement to having a big festival for switching everything to
object.

> > I can't remember about optparse; all
> > Twisted code uses twisted.python.usage.
>
> Wouldn't it be better to subclass OptParse ? I have the feeling usage.Options
> does nearly the same things.

I'm pretty sure that debate has been had, although I don't know if it
was on the mailing list. I suggest searching the archives.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From therve at free.fr  Tue Dec 27 07:45:48 2005
From: therve at free.fr (Thomas HERVE)
Date: Tue, 27 Dec 2005 15:45:48 +0100
Subject: Python 2.2 Support has been officially dropped (was Re:
	[Twisted-Python] Python 2.2 Support)
In-Reply-To: <20051227141435.1217.545088208.divmod.quotient.8347@ohm>
References: <20051227141435.1217.545088208.divmod.quotient.8347@ohm>
Message-ID: <20051227154548.fei8yqvgcgo4ocsg@itchy.wasabout.net>

Quoting Jean-Paul Calderone <exarkun at divmod.com>:

> Patches that remove usage of the string module will surely be accepted. :)

It would be good : I count 94 occurences of string import in the trunk. I'll
open a topic.

> Patches that introduce object as a base class may not be.  Classic 
> classes behave differently than new-style classes.  It is not always 
> possible to replace the former with the latter while maintaining API
> compatibility.

Ok, thanks for your answer. I miss new-style class for mainly one thing : the
automatic __init__, great for subclasses.

-- 
Thomas




From glyph at divmod.com  Tue Dec 27 08:21:10 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 27 Dec 2005 10:21:10 -0500
Subject: Curb Your Enthusiasm (was Re: Python 2.2 Support has been
	officially dropped (was Re: [Twisted-Python] Python 2.2 Support))
In-Reply-To: <20051227154548.fei8yqvgcgo4ocsg@itchy.wasabout.net>
Message-ID: <20051227152110.1217.490878974.divmod.quotient.8365@ohm>

On Tue, 27 Dec 2005 15:45:48 +0100, Thomas HERVE <therve at free.fr> wrote:
>Quoting Jean-Paul Calderone <exarkun at divmod.com>:
>>Patches that remove usage of the string module will surely be accepted. :)
>
>It would be good : I count 94 occurences of string import in the trunk. I'll
>open a topic.

This is a worthwhile goal since we made the decision to stop importing the string module several years ago, however:

Just because Python2.2 support has been dropped does not mean that we should waste time crawling all over the codebase to update "old" code to the new standard.

1) Somebody might still have to backport it one day.  We aren't going to support that, but neither should we make it unnecessarily difficult.

2) If you're that enthused to do work on Twisted, there are lots of other, more worthwhile projects you could be engaging in.  I'm tempted to write a list, but you know where the bugtracker is.  Let's not make any unnecessary work.  If you're interested in stylistic improvements, one thing you might want to look at is removing uses of deprecated trial APIs such as wait() from the unit tests.

>Ok, thanks for your answer. I miss new-style class for mainly one thing : 
>the
>automatic __init__, great for subclasses.

How is __init__ more automatic in new-style classes?  Do you mean super()?

At any rate, when we do start a new-style push, we should probably have a 'from twisted import __metaclass__' at the top of each file, to make updating the codebase to incorporate object-model and/or debugging enhancements easier.



From therve at free.fr  Tue Dec 27 10:04:20 2005
From: therve at free.fr (Thomas HERVE)
Date: Tue, 27 Dec 2005 18:04:20 +0100
Subject: Curb Your Enthusiasm (was Re: Python 2.2 Support has been
	officially dropped (was Re: [Twisted-Python] Python 2.2 Support))
In-Reply-To: <20051227152110.1217.490878974.divmod.quotient.8365@ohm>
References: <20051227152110.1217.490878974.divmod.quotient.8365@ohm>
Message-ID: <20051227180420.3ngxi8log40kk40c@itchy.wasabout.net>

Quoting glyph at divmod.com:

> On Tue, 27 Dec 2005 15:45:48 +0100, Thomas HERVE <therve at free.fr> wrote:
>> Quoting Jean-Paul Calderone <exarkun at divmod.com>:
>>> Patches that remove usage of the string module will surely be accepted. :)
>>
>> It would be good : I count 94 occurences of string import in the trunk. I'll
>> open a topic.
>
> This is a worthwhile goal since we made the decision to stop 
> importing the string module several years ago, however:

[Issue created here : http://twistedmatrix.com/bugs/issue1381].

> Just because Python2.2 support has been dropped does not mean that we 
> should waste time crawling all over the codebase to update "old" code 
> to the new standard.

Ok I understand that. Hopefully it doesn't apply to the string module :).

> 2) If you're that enthused to do work on Twisted, there are lots of 
> other, more worthwhile projects you could be engaging in.  I'm 
> tempted to write a list, but you know where the bugtracker is.  Let's 
> not make any unnecessary work.  If you're interested in stylistic 
> improvements, one thing you might want to look at is removing uses of 
> deprecated trial APIs such as wait() from the unit tests.

Great. I'm willing to work on Twisted, and I have time for that. I work
full-time on Twisted-based applications, and my employer is well-disposed to
give a bit of this time to Twisted itself. Indeed taking tasks in the bts is a
good way to help Twisted.

>> Ok, thanks for your answer. I miss new-style class for mainly one 
>> thing : the
>> automatic __init__, great for subclasses.
>
> How is __init__ more automatic in new-style classes?  Do you mean super()?

Well I mean like that:

class MyClass(TwistedClass):
    def __init__(self, myargs):
        super(TwistedClass, self).__init__() # doesn't work
        TwistedClass.__init__(self) # doesn't work either

> At any rate, when we do start a new-style push, we should probably 
> have a 'from twisted import __metaclass__' at the top of each file, 
> to make updating the codebase to incorporate object-model and/or 
> debugging enhancements easier.

I remember seeing this in Nevow, without understanding it at first. It 
seeems to
solve the super problem, but looks a bit like black magic :).

Thanks a lot for your patience, I'll try to bit less noisy and more useful.

-- 
Thomas




From bgranger at scu.edu  Tue Dec 27 10:36:57 2005
From: bgranger at scu.edu (Brian Granger)
Date: Tue, 27 Dec 2005 09:36:57 -0800
Subject: [Twisted-Python] Securing a custom protocol
Message-ID: <23206A12-219B-4357-BEAE-396B706D1BFF@scu.edu>

Hi,

I have written a custom line based protocol using twisted.  I need to  
add authentication and encryption to my protocol and I am wondering  
what the best route is.  Here are some options that I see:

1.  Use SSL for encryption and cred for user authentication

2.  Use SSH through conch

As I understand it, both of these approaches can do authentication  
and encryption of any protocol.  What are the advantages and  
disadvantages or each?  Which is more robust and supported in  
twisted?  Are there other approaches in twisted that I am missing?

Some design constraints I have:

1.  I need the protocol to be as fast as possible - low latency and  
high throughput.

2.  I need to be able to run the protocol without encryption when  
speed is more important than security.

Thanks!

Brian



From warner at lothar.com  Tue Dec 27 11:15:42 2005
From: warner at lothar.com (Brian Warner)
Date: Tue, 27 Dec 2005 10:15:42 -0800 (PST)
Subject: [Twisted-Python] Receiving a root from a pb client
Message-ID: <20051227.101542.74740205.warner@lothar.com>

william.lewis at uk.bnpparibas.com writes:

> I am using pb to communicate in a client-server configuration. My client
> inherits from PBClientFactory. My server has a remote_take_root() method
> by which the client can connect to the server and pass in its root, thus
> allowing two-way communication. Is there anyway for the server to
> re-establish the connection (should it go down) in this setup, or is
> this the sole responsibility of the client?

The other posters in this thread have it exactly right. The RemoteReference
that is received by your remote_take_root() method does not carry enough
information to allow anyone else (including your server) to initiate a new
connection to the Broker which hosts it. In this configuration, the "client"
side (specifically the side which initiates the PB connection with a
PBClientFactory) must be responsible for any sort of reconnection.

Incidentally, in newpb this won't necessarily be the case. Both ends can
listen on a TCP socket, and the RemoteReference that you receive may contain
enough information to connect to its source. It is still a good idea to make
exactly one side be responsible for things like reconnection, though, because
otherwise you get a bunch of ugly race conditions as both sides attempt to
connect at the same time. (newpb handles this for you, so you'll only get a
single connection between the two Tubs, but it's still ugly). Also, the
application level should be aware of the reconnection events, otherwise it
becomes more difficult to be sure about which methods have been successfully
invoked and which have not.

cheers,
 -Brian



From warner at lothar.com  Tue Dec 27 11:38:28 2005
From: warner at lothar.com (Brian Warner)
Date: Tue, 27 Dec 2005 10:38:28 -0800 (PST)
Subject: [Twisted-Python] Allowing a type to be transmitted by jelly?
Message-ID: <20051227.103828.79929151.warner@lothar.com>

>>I am pretty sure newpb, which Brian Warner was threatening to merge any
>>day now, will support this much better than PB does.

Yup.

In oldpb, object graphs are serialized through recursive calls to Jelly,
which has a big switch statement (in twisted.spread.jelly._Jellier.jelly)
that uses a different one-object serializer for each type. To teach oldpb how
to handle a new type, you have to modify this function, and the corresponding
unjellier, and then arrange for your Broker to use the new _Jellier classes
instead of the normal ones. Subclassing pb.Copyable does away with this, but
as you've noticed it is both slightly inefficent (particularly if you're
using __slots__ anyway) and requires extensive surgery or pre-marshalling to
use with third-party code that doesn't happen to inherit from pb.Copyable.

In newpb, object graphs are serialized through iterative calls to a
collection of Slicers. Each time a new object needs to be serialized, the
enclosing Slicers help decide (based upon both the type of the object and any
adapters that have been registered for it) which new Slicer to use. To teach
newpb how to serialize a new type, you register an adapter for it (e.g.
registerAdapter(BooleanSlicer, bool, ISlicer)). To teach newpb how to
unserialize the resulting stream, you define an Unslicer class (there is some
metaclass magic which auto-registers the Unslicer for you.. I'm still going
back and forth on the best way to do this).

The advantage of the adapter/registration scheme is that you don't have to
modify the inheritance set of the classes you want to serialize, so
third-party code is easy to accomodate without surgery or pre-marshalling.
Pre-marshalling is a serious nuisance, because to do it correctly means
looking inside every possible container for further instances of the type
that needs to be converted into something jelly can handle, which is just as
much work as the final serialization itself.

Take a look at branches/newpb-again, in the doc/pb directory, for some
examples and descriptions of how to use newpb. The code itself is in the
twisted/pb directory (unless we come up with a different name for it). It's
still in development: it was in the trunk for a few hours last week, but
hopefully I'll get the remaining test failures resolved and it will go back
into the trunk some time this week.

cheers,
 -Brian



From foom at fuhm.net  Tue Dec 27 23:00:07 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 28 Dec 2005 00:00:07 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1ErUM3-0008HX-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-12-21 07:00:01.630000:
 Bugs opened: 10   Bugs closed: 5   Total open bugs: 506 (+5)
  Urgent: 1 (+0)
  Bug: 241 (+1)
  Feature: 180 (+3)
  Wish: 84 (+1)

New / Reopened Bugs
______________________
                    ==== Bug ====
twisted.web.client.HTTPClientFactory sends Host header (and others) more than once  (yesterday)
       http://twistedmatrix.com/bugs/issue1382 opened by trickos

[TESTS, TRIAL] t.trial.test.test_output tests fail on win32 select reactor  (yesterday)
       http://twistedmatrix.com/bugs/issue1380 opened by jml

[TRIAL] Implementing setUpClass should not require ClassSuite  (2 days ago)
       http://twistedmatrix.com/bugs/issue1379 opened by jml

[TRIAL] Fail test suite on import error  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1377 opened by jml

iocpreactor WindowsError: (0, 'De bewerking is voltooid')  (3 days ago)
       http://twistedmatrix.com/bugs/issue1378 opened by ghazel

[TRIAL] Organise Trial's unit tests  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1374 opened by jml

                    ==== Feature ====
[CONCH] hashed host entries in known_hosts for conch (SSH)  (4 days ago)
       http://twistedmatrix.com/bugs/issue1376 opened by count0

hashed host entries in known_hosts for conch (SSH)  (4 days ago)
       http://twistedmatrix.com/bugs/issue1375 opened by count0

[CORE] Support twisted.internet.stdio on Windows  (6 days ago)
       http://twistedmatrix.com/bugs/issue1373 opened by itamarst

                    ==== Wish ====
[CORE] Remove string import  (yesterday)
       http://twistedmatrix.com/bugs/issue1381 opened by therve

Bugs Closed
______________________
                    ==== Bug ====
[TESTS, WEB] twisted.web2.test.test_http calls reactor.iterate()  (3 months ago)
       http://twistedmatrix.com/bugs/issue1186 opened by exarkun, closed by jknight

[TRIAL] Fail test suite on import error  (4 days ago)
       http://twistedmatrix.com/bugs/issue1377 opened by jml, closed by jml

[TRIAL] Organise Trial's unit tests  (5 days ago)
       http://twistedmatrix.com/bugs/issue1374 opened by jml, closed by jml

[TRIAL] Clean up Trial's Runner and Loader concepts  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1355 opened by jml, closed by jml

[CORE, TRIAL] Raising SkipTest in setUp is treated as an error  (7 days ago)
       http://twistedmatrix.com/bugs/issue1372 opened by exarkun, closed by jml




From dkarbott at comcast.net  Wed Dec 28 12:24:32 2005
From: dkarbott at comcast.net (dkarbott at comcast.net)
Date: Wed, 28 Dec 2005 19:24:32 +0000
Subject: [Twisted-Python] SSL client authentication
Message-ID: <122820051924.19895.43B2E670000BCC0700004DB722007504389B9B010D9D0E050B@comcast.net>

Is it possible to do client authentication with reactor.listenSSL() and reactor.connectSSL()?

If so, are there any examples?

Any info would be much appreciated.  

Regards,

-- Darrell



From andrea at cpushare.com  Wed Dec 28 18:53:37 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu, 29 Dec 2005 02:53:37 +0100
Subject: [Twisted-Python] SSL client authentication
In-Reply-To: <122820051924.19895.43B2E670000BCC0700004DB722007504389B9B010D9D0E050B@comcast.net>
References: <122820051924.19895.43B2E670000BCC0700004DB722007504389B9B010D9D0E050B@comcast.net>
Message-ID: <20051229015337.GN27200@opteron.random>

On Wed, Dec 28, 2005 at 07:24:32PM +0000, dkarbott at comcast.net wrote:
> Is it possible to do client authentication with reactor.listenSSL() and reactor.connectSSL()?
> 
> If so, are there any examples?

I authenticate the certificate of the server in this client app:

	https://www.cpushare.com/downloads/cpushare-0.24.tar.bz2

Hope this example helps.



From paulswartz at gmail.com  Thu Dec 29 14:30:26 2005
From: paulswartz at gmail.com (Paul Swartz)
Date: Thu, 29 Dec 2005 16:30:26 -0500
Subject: [Twisted-Python] Depreciation of trial.unittest functions?
Message-ID: <43B45572.9020405@gmail.com>

I'm not sure if Conch is the only project that did this, but it used the
trial.unittest.* functions instead of methods on TestCases.  I used them
to avoid having to pass TestCase instances around all over the places,
or using a global variable.  To avoid the depreciation warnings, I've
starting using the unittest._inst global variable, but I doubt that this
is the appropriate way to change my code.  Is this just not a supported
way of using Trial, or is there something else I should be doing?

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin
GPG: 5CF0B1C9



From umit at liqia.com  Fri Dec 30 08:26:08 2005
From: umit at liqia.com (Umit Oztosun)
Date: Fri, 30 Dec 2005 17:26:08 +0200
Subject: [Twisted-Python] Qtreactor problem on twisted 2.1
In-Reply-To: <d95439ec0512300647j29e8b78cv5f2649a16d37e87f@mail.gmail.com>
References: <d95439ec0512300647j29e8b78cv5f2649a16d37e87f@mail.gmail.com>
Message-ID: <d95439ec0512300726k528c9016mf0a2728c8ee48be1@mail.gmail.com>

Hello,

Our application uses twisted as the core network framework. It
basically consists of a server and multiple clients. All communication
is carried on a twisted.spread.pb channel. We have been using twisted
1.3 since the beginning, we decided to switch to twisted 2.1, the
switch was easy but an interesting problem showed up.

Our client is based on PyQt, so uses qtreactor. If something goes
wrong on the server side, the error is transferred to the client
(automagically, thanks to twisted & deferreds), and handled there
(with an errback). We warn our users about the failure with a dialog.
The interesting part is, with twisted 2.1, at the dialog's exec_loop()
call, occasionally the connection between the server and client goes
away with the following exception:
-------------------------------------------
2005/12/30 15:51 GTB Standard Time [-] Error in <<class
'twisted.internet.tcp.TLSConnection'> to (u'localhost', 4243) at
1312e50>.doRead()
2005/12/30 15:51 GTB Standard Time [-] Traceback (most recent call last):
          File "C:\Python24\Lib\site-packages\twisted\internet\defer.py",
line 182, in addCallbacks
            self._runCallbacks()
          File "C:\Python24\Lib\site-packages\twisted\internet\defer.py",
line 307, in _runCallbacks
            self.result = callback(self.result, *args, **kw)
          File ".\lq\lqtrxutils.py", line 126, in eb_localFailed

          File ".\lq\lqdialog.py", line 201, in showDialog

        --- <exception caught here> ---
          File "C:\Python24\Lib\site-packages\twisted\internet\qtreactor.py",
line 62, in read
            why = w.doRead()
          File "C:\Python24\Lib\site-packages\twisted\internet\tcp.py", line
111, in doRead
            return Connection.doRead(self)
          File "C:\Python24\Lib\site-packages\twisted\internet\tcp.py", line
347, in doRead
            return self.protocol.dataReceived(data)
          File "C:\Python24\Lib\site-packages\twisted\spread\banana.py", line
173, in dataReceived
            gotItem(self.incomingVocabulary[num])
          File "C:\Python24\Lib\site-packages\twisted\spread\banana.py", line
114, in gotItem
            self.callExpressionReceived(item)
          File "C:\Python24\Lib\site-packages\twisted\spread\banana.py", line
81, in callExpressionReceived
            self.expressionReceived(obj)
          File "C:\Python24\Lib\site-packages\twisted\spread\pb.py", line
567, in expressionReceived
            raise ProtocolError("Non-list expression received.")
        twisted.spread.pb.ProtocolError: Non-list expression received.

2005/12/30 15:51 GTB Standard Time [-] <twisted.internet.ssl.Connector
instance at 0x0134BE90> will retry in 2 seconds
2005/12/30 15:51 GTB Standard Time [-] Stopping factory
<lqclientfactory.lqClientFactory instance at 0x0134BDF0>
-------------------------------------------
Line 201 at lqdialog.py reads as
    result = self.exec_loop()

We are using a reconnecting client factory, the application reconnects
in a matter of seconds but this behaviour is annoying. As I wrote
above, the we had no problem when using 1.3.

Any ideas?

Regards, and happy new year!
Umit Oztosun

P.S.: Tested on both Windows XP and Ubuntu Linux (5.10 and 5.04).
Disconnection occurs regardless of using or not using SSL.



From foom at fuhm.net  Fri Dec 30 09:42:02 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 30 Dec 2005 11:42:02 -0500
Subject: [Twisted-Python] Qtreactor problem on twisted 2.1
In-Reply-To: <d95439ec0512300726k528c9016mf0a2728c8ee48be1@mail.gmail.com>
References: <d95439ec0512300647j29e8b78cv5f2649a16d37e87f@mail.gmail.com>
	<d95439ec0512300726k528c9016mf0a2728c8ee48be1@mail.gmail.com>
Message-ID: <600A6501-4966-484E-B024-C26CEBA7B5A7@fuhm.net>


On Dec 30, 2005, at 10:26 AM, Umit Oztosun wrote:

> Hello,
>
> Our application uses twisted as the core network framework. It
> basically consists of a server and multiple clients. All communication
> is carried on a twisted.spread.pb channel. We have been using twisted
> 1.3 since the beginning, we decided to switch to twisted 2.1, the
> switch was easy but an interesting problem showed up.
>
> Our client is based on PyQt, so uses qtreactor. If something goes
> wrong on the server side, the error is transferred to the client
> (automagically, thanks to twisted & deferreds), and handled there
> (with an errback). We warn our users about the failure with a dialog.
> The interesting part is, with twisted 2.1, at the dialog's exec_loop()
> call, occasionally the connection between the server and client goes
> away with the following exception:

For some reason, the stack trace looks truncated, since it starts  
with defer.py:addCallbacks. But my guess is that read is getting  
called re-entrantly. By calling exec_loop within a callback, you're  
causing the reactor to loop within another reactor loop, and the  
reactor isn't designed to ensure it's safe to do that. Is it possible  
to change the code to show a dialog box without running a sub-loop?

James




From glyph at divmod.com  Fri Dec 30 18:35:44 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 30 Dec 2005 20:35:44 -0500
Subject: [Twisted-Python] Twisted windows hackers - help the tests to pass!
In-Reply-To: 0
Message-ID: <20051231013544.1217.85617702.divmod.quotient.8979@ohm>

Twisted fails scads of tests on Windows.  You can see that here: http://twistedmatrix.com/buildbot/

I know that there are at least a few people on this list that use Twisted on Windows.  Doesn't it bother you that it's broken?  If you're a windows developer, help out and fix some tests!  A few Twisted hackers, Justin J. in particular, are hard at work to make it scale and perform well on Windows, but in addition to the rocket-science of IOCP there is quite a bit of grunt work to do, especially in the area of understanding why certain tests fail when they pass on other (more UNIX-y) platforms.

So please, try debugging some Twisted unit tests and either submitting bug reports explaining what's going on so an existing Twisted dev can fix them, or submitting patches that we can apply.

The real bonus for you if you're using Twisted on Windows in some commercial capacity is that once the buildbot turns green, test fascists like JP (or, on off days, myself) can revert changes which break it, and enforce a higher standard of quality for portability of Twisted code.  Right now it's hard to convince developers to not make it fail _more_ tests, since hey, it's broken already, right?



From corydodt at twistedmatrix.com  Fri Dec 30 21:39:46 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Fri, 30 Dec 2005 20:39:46 -0800
Subject: [Twisted-Python] Twisted windows hackers - help the tests to pass!
In-Reply-To: <20051231013544.1217.85617702.divmod.quotient.8979@ohm>
References: <20051231013544.1217.85617702.divmod.quotient.8979@ohm>
Message-ID: <43B60B92.4040205@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Well, let's start by looking at the buildslave environment itself.
http://tm.com/bb shows 21 errors.  Most of them appear to be identical
permission denied errors, which suggests a configuration problem
particular to that buildbot installation.

When I run the tests, I get:

===============================================================================
[ERROR]: twisted.test.test_paths.FilePathTestCase.testOpen

  File "C:\Documents and
Settings\cory\svn\Twisted\twisted\test\test_paths.py",
line 249, in testOpen
    f.write('ghi')
exceptions.IOError: (0, 'Error')
===============================================================================
[ERROR]: twisted.test.test_ssl.ConnectionLostTestCase.testFailedVerify

Failure: twisted.internet.error.ConnectionLost: Connection to the other
side was
 lost in a non-clean fashion.
-
-------------------------------------------------------------------------------
Ran 891 tests in 68.844s

FAILED (skips=77, expectedFailures=9, errors=2, successes=802)


- - C


glyph at divmod.com wrote:
> Twisted fails scads of tests on Windows.  You can see that here:
> http://twistedmatrix.com/buildbot/
> 
> I know that there are at least a few people on this list that use
> Twisted on Windows.  Doesn't it bother you that it's broken?  If you're
> a windows developer, help out and fix some tests!  A few Twisted
> hackers, Justin J. in particular, are hard at work to make it scale and
> perform well on Windows, but in addition to the rocket-science of IOCP
> there is quite a bit of grunt work to do, especially in the area of
> understanding why certain tests fail when they pass on other (more
> UNIX-y) platforms.
> 
> So please, try debugging some Twisted unit tests and either submitting
> bug reports explaining what's going on so an existing Twisted dev can
> fix them, or submitting patches that we can apply.
> 
> The real bonus for you if you're using Twisted on Windows in some
> commercial capacity is that once the buildbot turns green, test fascists
> like JP (or, on off days, myself) can revert changes which break it, and
> enforce a higher standard of quality for portability of Twisted code. 
> Right now it's hard to convince developers to not make it fail _more_
> tests, since hey, it's broken already, right?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDtguS3A5SrXAiHQcRAmDmAKClsweuv3R8x53G1TJHiUoEbiWsPwCgj2gJ
CTtw71uOF3472VLA/QW4Hzk=
=1tb2
-----END PGP SIGNATURE-----



From glyph at divmod.com  Fri Dec 30 22:01:18 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 31 Dec 2005 00:01:18 -0500
Subject: [Twisted-Python] Twisted windows hackers - help the tests to pass!
In-Reply-To: <43B60B92.4040205@twistedmatrix.com>
Message-ID: <20051231050118.1217.1213416050.divmod.quotient.9023@ohm>



On Fri, 30 Dec 2005 20:39:46 -0800, Cory Dodt <corydodt at twistedmatrix.com> wrote:

>Well, let's start by looking at the buildslave environment itself.
>http://tm.com/bb shows 21 errors.  Most of them appear to be identical
>permission denied errors, which suggests a configuration problem
>particular to that buildbot installation.

Well, that's good to know!  Thanks for clearing that up.  Any clue what the particular misconfiguration might be?  I have never even seen that particular buildbot machine.  (I can volunteer another one through VNC for the buildbot maintainer to test with if that would help.)

I think there is still a generally good reason to be concerned though - quite a few tests are still set to skip on Windows that aren't on UNIX. (and the aforementioned "it's broken anyway" attitude is especially bad if, in fact, it is *that* close to working)



From moof at metamoof.net  Sat Dec 31 00:15:33 2005
From: moof at metamoof.net (Moof)
Date: Sat, 31 Dec 2005 08:15:33 +0100
Subject: [Twisted-Python] Twisted windows hackers - help the tests to pass!
In-Reply-To: <20051231050118.1217.1213416050.divmod.quotient.9023@ohm>
References: <43B60B92.4040205@twistedmatrix.com>
	<20051231050118.1217.1213416050.divmod.quotient.9023@ohm>
Message-ID: <bff8eeef0512302315q50cc06b3y6af9e55a5fb975d0@mail.gmail.com>

On 12/31/05, glyph at divmod.com <glyph at divmod.com> wrote:
>
>
>
> On Fri, 30 Dec 2005 20:39:46 -0800, Cory Dodt <corydodt at twistedmatrix.com>
> wrote:
>
> >Well, let's start by looking at the buildslave environment itself.
> >http://tm.com/bb shows 21 errors.  Most of them appear to be identical
> >permission denied errors, which suggests a configuration problem
> >particular to that buildbot installation.
>
> Well, that's good to know!  Thanks for clearing that up.  Any clue what
> the particular misconfiguration might be?  I have never even seen that
> particular buildbot machine.  (I can volunteer another one through VNC for
> the buildbot maintainer to test with if that would help.)


It's not so much a misconfiguration, as an issue with the fact that trial on
Window s is failing to rename its _trial_temp folder, because there are
files inside it that are open. I've opened a bug on it over on <
http://twistedmatrix.com/bugs/issue1387>. It's going to need a rethink on
how _trial_temp works, because my instant thought on how to solve was
"symlinks" and python doesn't support them on windows, mostly because
windows' own support of them is a tad on the "dont' ask, don't tell" side of
things, and NTFS-only anyway.

MFen tracked down an error involving "r+b" mode. Seems windows handling of
it is insane. See <http://twistedmatrix.com/bugs/issue1386>. This could well
be a python bug, or a feature of windows.

Moof
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051231/4d951962/attachment.html>

From jml at mumak.net  Sat Dec 31 03:16:26 2005
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 31 Dec 2005 20:16:26 +1000
Subject: [Twisted-Python] Depreciation of trial.unittest functions?
In-Reply-To: <43B45572.9020405@gmail.com>
References: <43B45572.9020405@gmail.com>
Message-ID: <d06a5cd30512310216o781c740j5c678c42cf854f68@mail.gmail.com>

On 12/30/05, Paul Swartz <paulswartz at gmail.com> wrote:
> I'm not sure if Conch is the only project that did this, but it used the
> trial.unittest.* functions instead of methods on TestCases.  I used them
> to avoid having to pass TestCase instances around all over the places,
> or using a global variable.  To avoid the depreciation warnings, I've
> starting using the unittest._inst global variable, but I doubt that this
> is the appropriate way to change my code.  Is this just not a supported
> way of using Trial, or is there something else I should be doing?
>

This is just not a supported way of using Trial.

jml



From paul-lists at perforge.com  Sat Dec 31 03:48:43 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 05:48:43 -0500
Subject: how winnt fileops work and what to do about it (was Re:
	[Twisted-Python] Twisted windows hackers - help the tests to pass!)
References: <43B60B92.4040205@twistedmatrix.com><20051231050118.1217.1213416050.divmod.quotient.9023@ohm>
	<bff8eeef0512302315q50cc06b3y6af9e55a5fb975d0@mail.gmail.com>
Message-ID: <0aff01c60df7$c588adf0$6402a8c0@dcore>


ok, i can actually chime in here because i've done filesystems work on 
windows (don't ask ;). now, it's been a while, but i should remember things 
reasonably accurately (i hope). see below for comments:

----- Original Message ----- 
From: Moof
To: twisted-python at twistedmatrix.com
Sent: Saturday, December 31, 2005 2:15 AM
Subject: Re: [Twisted-Python] Twisted windows hackers - help the tests to 
pass!


> It's not so much a misconfiguration, as an issue with the fact that trial 
> on Window s is failing to rename its _trial_temp folder,
> because there are files inside it that are open. I've opened a bug on it 
> over on < http://twistedmatrix.com/bugs/issue1387>.

it is incorrect to state that file deletion will always fail when the file 
is open. let me explain how nt/ntfs/win32 does this, because it's highly 
'strange' to folks from a posix background. this may be way more info than 
you were looking for, but i'm going to type it out anyway so that someone 
can then make the call on how to deal with the issue.

for functionality implemented in the kernel, such as ntfs, windows has 2 api 
layers: win32 (you see CreateFile() here) and the native nt api. win32 is 
implemented in usermode, while the native api is implemented as a kernel 
service, which is exposed to userspace code with the Zw prefix (ie 
ZwCreateFile()). sometimes the win32 api calls map directly, sometimes they 
are multiplexed (ie one win32 api call may use multiple native api calls to 
do the work). what happens here is undocumented (at least officially and 
without an nda). what is important is that some calls allow you to do things 
which win32 does not expose; most popular ones deal with io completion (this 
is how you cancel async i/o on windows nt).

now, on to the meat: the win32 CreateFile() is actually a jack-of-all-trades 
call (horrible design), used for file creation, opening *and authorization*. 
we're not interested in ACLs in this case, but we are interested in locks - 
locks in nt are compulsory (as opposed to purely advisory in posix) and 
violating one will result in an auth failure. now, disregarding the ability 
to take out range locks (locks on a byterange within a file), CreateFile() 
takes out certain locks based on the sharemode (iirc, not sure) parameter. 
the rules here are funky, iirc, but the one we care about is 
FILE_SHARE_DELETE. *unless* this flag is set in sharemode passed to 
CreateFile(), all attempts to open this file for deletion (see, 
authorization) going forward will fail.

it will fail when the file is opened exclusively. CreateFile takes a 
parameter called sharemode, iirc, which can be a combination of 
FILE_SHARE_READ, FILE_SHARE_WRITE, and FILE_SHARE_DELETE. *unless* 
FILE_SHARE_DELETE is set in the flag parameter, a lock preventing deletion 
gets taken out and you get to enjoy all the wonders of compulsory locking 
you are hitting.

here's why i think this happens: win32 DeleteFile() does *not* actually use 
ZwDeleteFile() native call to delete a file. instead, it does a CreateFile() 
(or ZwCreateFile(), could be either) to open the file (and get a handle to 
it), telling it the desired access is DELETE. then it does a 
ZwSetFileInformation(), which it tells it wants to set 'disposition' and 
passes in the appropriate disposition info struct with the DELETE 
disposition set. you can't cheat this, because ZwSetInformation() will fail 
if the handle doesn't have DELETE rights, and you won't get them if the file 
isn't opened with FILE_SHARE_DELETE. bummer. the reason this is all so 
roundabout is that the file whose disposition is set to DELETE doesn't 
actually get deleted until the last handle is ZwClose()'d - this is where 
the deletion takes place. now, this is from memory, so don't hold me to it 
exactly, but the jist of it should be correct.

the interesting, albeit non-obvious, question is: what does ZwDeleteFile() 
do? it takes either a handle *or a path* and deletes it *right away*, 
without waiting for handles to be closed. now, i don't know whether it 
bypasses the ZwCreateFile() and hence the DELETE check, but there's a chance 
that it is the call ZwClose() makes internally when it does a delete based 
on the disposition (this guess would be supported by the fact that 
ZwCreateFile() and a few other fs calls are documented in msdn/ddk, but 
ZwDeleteFile() is not) and hence doesn't hit this check. what is even more 
interesting is that, in win32, the only way to remove a directory is using 
RemoveDirectory(), which requires the directory to be empty. you have to 
recursively delete all contents, either by hand or using SHFileOperation, 
iirc. this is the op that hits your open files problem. i remember seeing 
code (this part i didn't work on, but did read brielfy) which deleted 
directories with ZwDeleteFile() and there was no resurive content deletion 
code, so i suspect that you could delete a non-empty directory this way. 
neither of this is valid ntfs usage, so doing it may not be kosher.

whatever the case may be, those two options are available if you can stomach 
them.

> It's
> going to need a rethink on how _trial_temp works, because my instant 
> thought on how to solve was "symlinks" and python
> doesn't support them on windows, mostly because windows' own support of 
> them is a tad on the "dont' ask, don't tell" side of
> things, and NTFS-only anyway.

NTFS and DFS, but yeah, no FAT (if anyone cares). symlinks in ntfs can be 
implemented using what's called 'reparse points'. these are actually quite 
powerful - you can attach either a static transformation or code (you need a 
driver for this, iirc) to a certain dentry  these symlinks are called 
'junctions', but they work only for directories. currently, all of this is 
extremely hairy to use. there are also hardlinks, which you can actually 
create with the win32 api, but they are only for files  moreover, none of 
this behaves like symlinks and hardlinks in terms of finer semantics (ie 
unlinking). junctions are most closely related to mount --bind, rather than 
symlinks, for example.


with all of the above said, you've basically got these choices (in no 
particular order) to deal with the issue at hand:

1. change the offending code not to do this rename
2. instead of a rename, create a new directory, do a recursive copy into it 
from the original and retry removing the original directory asynchronously 
until it succeeds. obviously, the file handles which are open at that point 
will be referencing a different copy of the files from the ones which will 
be opened subsequently.
3. test whether the zwDeleteFile() behaves in the way i conjrectured it to 
(wrt files or directories). if so, cause it to be implemented in the pywin32 
extension and use it to perform the delete.
4. test whether you can either use ZwSetFileInformation() to rename 
directories by changing the FILE_NAME attr in the appropriate info structure 
or use it to move by renaming files which are open, again using the 
appropriate (but different) structure.
if so, implement this or cause this to be implemented in pywin32. it is 
unclear (to me) whether this would result in the pre-move file handles being 
dead, stale or correct.
5. instead of opening the files as normal, open them with pywin32's 
implementation of CreateFile(), specifying the appropriate sharemode. this 
will allow the rename (move really) to go through, but it is unclear what 
happens to the preexisting filehandles.
6. implement, or cause to be implemented, CreateHardlink() in pywin32. 
create a new directory and recursively hardlink contents of the original 
into the new directory. asynchronously retry recursive deletion of the 
original one.

that's all i can think of anyway.

>MFen tracked down an error involving "r+b" mode. Seems windows handling of 
>it is insane. See ><http://twistedmatrix.com/bugs/issue1386>. This could 
>well be a python bug, or a feature of windows.

i'm not sure how python does file opens and i/o on windows. with that said, 
assuming that it uses fopen() from the visual studio c runtime library, 
there is a quirk in the implementation that might be causing this. if you 
use any of the + modes, ie a+, r+ or w+. when you switch between reading and 
writing you need to do an fflush() or fsetpos() (possibly some others like 
fseek() could work too, don't remember). try doing a file.flush() on your 
file object somewhere in there and see if that fixes things for you. if it 
does, this should probably be reported as a python stdlib bug.

it's really late, so pardon the wordiness and possible inaccuracies due to 
memory lapses.

hth,
-p 




From umit at liqia.com  Sat Dec 31 04:37:44 2005
From: umit at liqia.com (Umit Oztosun)
Date: Sat, 31 Dec 2005 13:37:44 +0200
Subject: [Twisted-Python] Qtreactor problem on twisted 2.1
In-Reply-To: <600A6501-4966-484E-B024-C26CEBA7B5A7@fuhm.net>
References: <d95439ec0512300647j29e8b78cv5f2649a16d37e87f@mail.gmail.com>
	<d95439ec0512300726k528c9016mf0a2728c8ee48be1@mail.gmail.com>
	<600A6501-4966-484E-B024-C26CEBA7B5A7@fuhm.net>
Message-ID: <d95439ec0512310337s214c0e84x2b0f438b360beeed@mail.gmail.com>

Hi,

On 12/30/05, James Y Knight <foom at fuhm.net> wrote:
> For some reason, the stack trace looks truncated, since it starts
> with defer.py:addCallbacks. But my guess is that read is getting
> called re-entrantly. By calling exec_loop within a callback, you're
> causing the reactor to loop within another reactor loop, and the
> reactor isn't designed to ensure it's safe to do that. Is it possible
> to change the code to show a dialog box without running a sub-loop?

Well, our dialog is a custom widget derived from QDialog. Displaying
the dialog without exec_loop is not a problem, but in order to receive
and process GUI events, one should somehow call qApp.processEvents()
or a similar call. Otherwise GUI basically locks up. I constructed a
dummy loop periodically calling qApp.processEvents() in order to
simulate the exec_loop behaviour. However, the problem still persists.
After a few seconds after the dialog is displayed, the "Non-list
expression received" exception is fired.

I even tried "qApp.eventLoop().processEvents(QEventLoop.ExcludeSocketNotifiers)"
in order to only process user input events, but this again didn't
work.

This does not always happen, but happens quite occasionally. To
emphasize again, problem does not exist when using twisted 1.3. I also
tried to connect a twisted 2.1 server with a twisted 1.3 client, and
it was still OK.

Regards,
Umit Oztosun



From foom at fuhm.net  Sat Dec 31 09:59:39 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 31 Dec 2005 11:59:39 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15451 - Fix test failures
	under windows by changing the eventual-send operation to
In-Reply-To: <E1EsaOd-0005YM-00@wolfwood>
References: <E1EsaOd-0005YM-00@wolfwood>
Message-ID: <89CC1D6D-85D4-4998-94F1-E25384FC2B5A@fuhm.net>

On Dec 31, 2005, at 1:39 AM, Brian Warner wrote:
> callLater(0) does not guarantee
> relative ordering of sequentially-scheduled calls,

Yes it does: order of method call.

> and the windows
> reactors in fact execute them in random order.

That is broken.

James



From foom at fuhm.net  Sat Dec 31 10:42:07 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 31 Dec 2005 12:42:07 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15451 - Fix test failures
	under windows by changing the eventual-send operation to
In-Reply-To: <89CC1D6D-85D4-4998-94F1-E25384FC2B5A@fuhm.net>
References: <E1EsaOd-0005YM-00@wolfwood>
	<89CC1D6D-85D4-4998-94F1-E25384FC2B5A@fuhm.net>
Message-ID: <5F60A50B-53F9-4AC2-AECA-681882929FB3@fuhm.net>


On Dec 31, 2005, at 11:59 AM, James Y Knight wrote:

> On Dec 31, 2005, at 1:39 AM, Brian Warner wrote:
>
>> callLater(0) does not guarantee
>> relative ordering of sequentially-scheduled calls,
>>
>
> Yes it does: order of method call.
>
>
>> and the windows
>> reactors in fact execute them in random order.
>>
>
> That is broken.

I'm afraid this is my fault. Heapq does not guarantee stable ordering  
amongst elements with the same key, and on windows, two successive  
calls to time.time() are very likely to return the same number,  
because of its poor resolution. The same error could probably occur  
on unix/linux systems as well, although currently unlikely to the  
point of impossibility. It should be fixable by storing the last time  
of an element added to the queue, and adding epsilon if current time  
is the same.

Just as a point of interest, on my system, this loop never finishes:
import time
def f():
  while 1:
   if time.time()==time.time():
    break

But this one does:
from time import time
def f():
  while 1:
   if time()==time():
    break


James



From corydodt at twistedmatrix.com  Sat Dec 31 11:46:51 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Sat, 31 Dec 2005 10:46:51 -0800
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and
 what to do about it
In-Reply-To: <0aff01c60df7$c588adf0$6402a8c0@dcore>
References: <43B60B92.4040205@twistedmatrix.com><20051231050118.1217.1213416050.divmod.quotient.9023@ohm>	<bff8eeef0512302315q50cc06b3y6af9e55a5fb975d0@mail.gmail.com>
	<0aff01c60df7$c588adf0$6402a8c0@dcore>
Message-ID: <43B6D21B.1050508@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Paul, flush fixes one kind of insanity and seek fixes another:

One ===========
$ echo abcdef > foo
$ python
>>> f = file('foo', 'r+b')
>>> f.write('ghi')
>>> f.flush()
>>> f.read()
'def\n'
>>> # hooray!


Two ===========
$ echo abcdef > foo
$ python
>>> f = file('foo','r+b')
>>> f.read()
'abcdef\n'
>>> f.seek(7, 0)
>>> f.write('xyz')
>>> ^D
$ cat foo
abcdef
xyz
$ # hooray

Paul - Do you still think this is a Python bug?  Does anyone know if
this has already been discussed on pyml?

C



Paul G wrote:
> 
> ok, i can actually chime in here because i've done filesystems work on
> windows (don't ask ;). now, it's been a while, but i should remember
> things reasonably accurately (i hope). see below for comments:
> 
> ----- Original Message ----- From: Moof
> To: twisted-python at twistedmatrix.com
> Sent: Saturday, December 31, 2005 2:15 AM
> Subject: Re: [Twisted-Python] Twisted windows hackers - help the tests
> to pass!
> 
> 
>> It's not so much a misconfiguration, as an issue with the fact that
>> trial on Window s is failing to rename its _trial_temp folder,
>> because there are files inside it that are open. I've opened a bug on
>> it over on < http://twistedmatrix.com/bugs/issue1387>.
> 
> 
> it is incorrect to state that file deletion will always fail when the
> file is open. let me explain how nt/ntfs/win32 does this, because it's
> highly 'strange' to folks from a posix background. this may be way more
> info than you were looking for, but i'm going to type it out anyway so
> that someone can then make the call on how to deal with the issue.
> 
> for functionality implemented in the kernel, such as ntfs, windows has 2
> api layers: win32 (you see CreateFile() here) and the native nt api.
> win32 is implemented in usermode, while the native api is implemented as
> a kernel service, which is exposed to userspace code with the Zw prefix
> (ie ZwCreateFile()). sometimes the win32 api calls map directly,
> sometimes they are multiplexed (ie one win32 api call may use multiple
> native api calls to do the work). what happens here is undocumented (at
> least officially and without an nda). what is important is that some
> calls allow you to do things which win32 does not expose; most popular
> ones deal with io completion (this is how you cancel async i/o on
> windows nt).
> 
> now, on to the meat: the win32 CreateFile() is actually a
> jack-of-all-trades call (horrible design), used for file creation,
> opening *and authorization*. we're not interested in ACLs in this case,
> but we are interested in locks - locks in nt are compulsory (as opposed
> to purely advisory in posix) and violating one will result in an auth
> failure. now, disregarding the ability to take out range locks (locks on
> a byterange within a file), CreateFile() takes out certain locks based
> on the sharemode (iirc, not sure) parameter. the rules here are funky,
> iirc, but the one we care about is FILE_SHARE_DELETE. *unless* this flag
> is set in sharemode passed to CreateFile(), all attempts to open this
> file for deletion (see, authorization) going forward will fail.
> 
> it will fail when the file is opened exclusively. CreateFile takes a
> parameter called sharemode, iirc, which can be a combination of
> FILE_SHARE_READ, FILE_SHARE_WRITE, and FILE_SHARE_DELETE. *unless*
> FILE_SHARE_DELETE is set in the flag parameter, a lock preventing
> deletion gets taken out and you get to enjoy all the wonders of
> compulsory locking you are hitting.
> 
> here's why i think this happens: win32 DeleteFile() does *not* actually
> use ZwDeleteFile() native call to delete a file. instead, it does a
> CreateFile() (or ZwCreateFile(), could be either) to open the file (and
> get a handle to it), telling it the desired access is DELETE. then it
> does a ZwSetFileInformation(), which it tells it wants to set
> 'disposition' and passes in the appropriate disposition info struct with
> the DELETE disposition set. you can't cheat this, because
> ZwSetInformation() will fail if the handle doesn't have DELETE rights,
> and you won't get them if the file isn't opened with FILE_SHARE_DELETE.
> bummer. the reason this is all so roundabout is that the file whose
> disposition is set to DELETE doesn't actually get deleted until the last
> handle is ZwClose()'d - this is where the deletion takes place. now,
> this is from memory, so don't hold me to it exactly, but the jist of it
> should be correct.
> 
> the interesting, albeit non-obvious, question is: what does
> ZwDeleteFile() do? it takes either a handle *or a path* and deletes it
> *right away*, without waiting for handles to be closed. now, i don't
> know whether it bypasses the ZwCreateFile() and hence the DELETE check,
> but there's a chance that it is the call ZwClose() makes internally when
> it does a delete based on the disposition (this guess would be supported
> by the fact that ZwCreateFile() and a few other fs calls are documented
> in msdn/ddk, but ZwDeleteFile() is not) and hence doesn't hit this
> check. what is even more interesting is that, in win32, the only way to
> remove a directory is using RemoveDirectory(), which requires the
> directory to be empty. you have to recursively delete all contents,
> either by hand or using SHFileOperation, iirc. this is the op that hits
> your open files problem. i remember seeing code (this part i didn't work
> on, but did read brielfy) which deleted directories with ZwDeleteFile()
> and there was no resurive content deletion code, so i suspect that you
> could delete a non-empty directory this way. neither of this is valid
> ntfs usage, so doing it may not be kosher.
> 
> whatever the case may be, those two options are available if you can
> stomach them.
> 
>> It's
>> going to need a rethink on how _trial_temp works, because my instant
>> thought on how to solve was "symlinks" and python
>> doesn't support them on windows, mostly because windows' own support
>> of them is a tad on the "dont' ask, don't tell" side of
>> things, and NTFS-only anyway.
> 
> 
> NTFS and DFS, but yeah, no FAT (if anyone cares). symlinks in ntfs can
> be implemented using what's called 'reparse points'. these are actually
> quite powerful - you can attach either a static transformation or code
> (you need a driver for this, iirc) to a certain dentry  these symlinks
> are called 'junctions', but they work only for directories. currently,
> all of this is extremely hairy to use. there are also hardlinks, which
> you can actually create with the win32 api, but they are only for files 
> moreover, none of this behaves like symlinks and hardlinks in terms of
> finer semantics (ie unlinking). junctions are most closely related to
> mount --bind, rather than symlinks, for example.
> 
> 
> with all of the above said, you've basically got these choices (in no
> particular order) to deal with the issue at hand:
> 
> 1. change the offending code not to do this rename
> 2. instead of a rename, create a new directory, do a recursive copy into
> it from the original and retry removing the original directory
> asynchronously until it succeeds. obviously, the file handles which are
> open at that point will be referencing a different copy of the files
> from the ones which will be opened subsequently.
> 3. test whether the zwDeleteFile() behaves in the way i conjrectured it
> to (wrt files or directories). if so, cause it to be implemented in the
> pywin32 extension and use it to perform the delete.
> 4. test whether you can either use ZwSetFileInformation() to rename
> directories by changing the FILE_NAME attr in the appropriate info
> structure or use it to move by renaming files which are open, again
> using the appropriate (but different) structure.
> if so, implement this or cause this to be implemented in pywin32. it is
> unclear (to me) whether this would result in the pre-move file handles
> being dead, stale or correct.
> 5. instead of opening the files as normal, open them with pywin32's
> implementation of CreateFile(), specifying the appropriate sharemode.
> this will allow the rename (move really) to go through, but it is
> unclear what happens to the preexisting filehandles.
> 6. implement, or cause to be implemented, CreateHardlink() in pywin32.
> create a new directory and recursively hardlink contents of the original
> into the new directory. asynchronously retry recursive deletion of the
> original one.
> 
> that's all i can think of anyway.
> 
>> MFen tracked down an error involving "r+b" mode. Seems windows
>> handling of it is insane. See
>> ><http://twistedmatrix.com/bugs/issue1386>. This could well be a
>> python bug, or a feature of windows.
> 
> 
> i'm not sure how python does file opens and i/o on windows. with that
> said, assuming that it uses fopen() from the visual studio c runtime
> library, there is a quirk in the implementation that might be causing
> this. if you use any of the + modes, ie a+, r+ or w+. when you switch
> between reading and writing you need to do an fflush() or fsetpos()
> (possibly some others like fseek() could work too, don't remember). try
> doing a file.flush() on your file object somewhere in there and see if
> that fixes things for you. if it does, this should probably be reported
> as a python stdlib bug.
> 
> it's really late, so pardon the wordiness and possible inaccuracies due
> to memory lapses.
> 
> hth,
> -p
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDttEp3A5SrXAiHQcRAq4gAJ4pZQS+vFSlKqS8RvJe8ialmzANEgCfe4BL
G4OrBEocHxEcB3LD3tpr1OY=
=XA5K
-----END PGP SIGNATURE-----



From warner at lothar.com  Sat Dec 31 11:57:21 2005
From: warner at lothar.com (Brian Warner)
Date: Sat, 31 Dec 2005 10:57:21 -0800 (PST)
Subject: [Twisted-Python] Re: r15451 - Fix test failures under windows by
 changing the eventual-send operation to
Message-ID: <20051231.105721.17570930.warner@lothar.com>

>> Yes it does: order of method call.

Ah. That's useful to know: I would prefer to use a non-threading-related call
to achieve this eventual-send functionality. I'll add a TODO test to check
that this promise is being met.


> It should be fixable by storing the last time of an element added to the
> queue, and adding epsilon if current time is the same.

Wouldn't you have to guarantee that epsilon is smaller than the resolution of
your time.time() return value? What if you sorted on a tuple of (time,
counter) instead? (the down side is that you'd have to search for all
existing timers with the same time value to figure out what counter value you
ought to use. ick.).

We should clarify what guarantees are made by callLater. I think there may be
several separate ones here:

 1: callLater(0, A); callLater(0, B)
     will result in A being invoked before B
     will result in both A and B being invoked before any other DelayedCalls

 2: callLater(N, A); callLater(N, B)
     will result in A being invoked before B

 3: callLater(N, A); callLater(N+M, C); callLater(N, B)
     will result in A being invoked before B
     (think of this as a unit test for the adding-epsilon concern above)

The second and third ones are not so important to me, just in terms of what I
need to use it as a plan-coordination tool. I only intend to use this with
N=0.

To that end, using a separate queue for timers that are ready to go "now"
(i.e. ones that will be fired before calling select() or the like) might be
useful, basically making N=0 a special case. This would avoid the overhead of
inserting the DelayedCall into an arbitrary place and maintaining the
ordering guarantees of #2 and #3, and would avoid an extra select() spin
between the time an N=0 timer was inserted and the time it was fired.

The existing threadCallQueue happens to behave exactly this way, although I'd
want to write some additional tests to make sure it gets serviced as many
times as it's supposed to be (specifically, when threads are unavailable and
therefore wakeUp() is not used, does a call inserted from within an N=0
callback get serviced before the reactor sleeps again?). The problem is both
the word "thread" in the name, and the fact that we might not be making the
same guarantees about the behavior of callFromThread as we are about that of
callLater.

Hmm. Most reactors split off a list of timers that are ready to go "now" on
each spin, right? And/or there's that _pendingTimedCalls list I see in
t.i.base .. maybe we could take advantage of one of those, just appending the
call to those lists and making sure they'll be serviced again, rather than
adding the overhead of maintaining ordering guarantees #2 and #3.

hmm-ingly,
 -Brian



From michaelschneider at fuse.net  Sat Dec 31 12:23:55 2005
From: michaelschneider at fuse.net (Michael Schneider)
Date: Sat, 31 Dec 2005 14:23:55 -0500
Subject: [Twisted-Python] Re: Twisted-Python Digest, Vol 21, Issue 39
In-Reply-To: <E1Esl1P-0002bb-01@pyramid.twistedmatrix.com>
References: <E1Esl1P-0002bb-01@pyramid.twistedmatrix.com>
Message-ID: <43B6DACB.4000507@fuse.net>

On Windows, you might use time.clock() it is more precise (keep with 
time.time on UNIX

Hope this helps,
Mike

>
>
>Message: 2
>Date: Sat, 31 Dec 2005 12:42:07 -0500
>From: James Y Knight <foom at fuhm.net>
>Subject: Re: [Twisted-Python] Re: [Twisted-commits] r15451 - Fix test
>	failures	under windows by changing the eventual-send operation to
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Message-ID: <5F60A50B-53F9-4AC2-AECA-681882929FB3 at fuhm.net>
>Content-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed
>
>
>On Dec 31, 2005, at 11:59 AM, James Y Knight wrote:
>
>  
>
>>On Dec 31, 2005, at 1:39 AM, Brian Warner wrote:
>>
>>    
>>
>>>callLater(0) does not guarantee
>>>relative ordering of sequentially-scheduled calls,
>>>
>>>      
>>>
>>Yes it does: order of method call.
>>
>>
>>    
>>
>>>and the windows
>>>reactors in fact execute them in random order.
>>>
>>>      
>>>
>>That is broken.
>>    
>>
>
>I'm afraid this is my fault. Heapq does not guarantee stable ordering  
>amongst elements with the same key, and on windows, two successive  
>calls to time.time() are very likely to return the same number,  
>because of its poor resolution. The same error could probably occur  
>on unix/linux systems as well, although currently unlikely to the  
>point of impossibility. It should be fixable by storing the last time  
>of an element added to the queue, and adding epsilon if current time  
>is the same.
>
>Just as a point of interest, on my system, this loop never finishes:
>import time
>def f():
>  while 1:
>   if time.time()==time.time():
>    break
>
>But this one does:
>from time import time
>def f():
>  while 1:
>   if time()==time():
>    break
>
>
>James
>
>
>
>------------------------------
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>End of Twisted-Python Digest, Vol 21, Issue 39
>**********************************************
>
>  
>


-- 
The greatest performance improvement occurs on the transition of from the non-working state to the working state.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051231/e774a614/attachment.html>

From exarkun at divmod.com  Sat Dec 31 12:52:59 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 31 Dec 2005 14:52:59 -0500
Subject: [Twisted-Python] Re: Twisted-Python Digest, Vol 21, Issue 39
In-Reply-To: <43B6DACB.4000507@fuse.net>
Message-ID: <20051231195259.1217.780865545.divmod.quotient.9206@ohm>

On Sat, 31 Dec 2005 14:23:55 -0500, Michael Schneider <michaelschneider at fuse.net> wrote:
>On Windows, you might use time.clock() it is more precise (keep with 
>time.time on UNIX

Unfortunately, it wraps around after ~40 days, making it unsuitable for use tracking long periods of time.  It is probably possible to build a usable timer on top of this using a wrap-around counter, but afaik no one has yet attempted this.

Jean-Paul



From paul-lists at perforge.com  Sat Dec 31 13:21:45 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 15:21:45 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and
	what to do about it
References: <43B60B92.4040205@twistedmatrix.com><20051231050118.1217.1213416050.divmod.quotient.9023@ohm>	<bff8eeef0512302315q50cc06b3y6af9e55a5fb975d0@mail.gmail.com><0aff01c60df7$c588adf0$6402a8c0@dcore>
	<43B6D21B.1050508@twistedmatrix.com>
Message-ID: <0b6201c60e48$704c7190$6402a8c0@dcore>


----- Original Message ----- 
From: "Cory Dodt" <corydodt at twistedmatrix.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 1:46 PM
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and 
what to do about it


> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Paul, flush fixes one kind of insanity and seek fixes another:
>
> One ===========
> $ echo abcdef > foo
> $ python
>>>> f = file('foo', 'r+b')
>>>> f.write('ghi')
>>>> f.flush()
>>>> f.read()
> 'def\n'
>>>> # hooray!
>
>
> Two ===========
> $ echo abcdef > foo
> $ python
>>>> f = file('foo','r+b')
>>>> f.read()
> 'abcdef\n'
>>>> f.seek(7, 0)
>>>> f.write('xyz')
>>>> ^D
> $ cat foo
> abcdef
> xyz
> $ # hooray
>
> Paul - Do you still think this is a Python bug?

depends on what you call a bug. this behaviour is, afaik, specific to 
microsoft libc's (aka c runtime)  implementation of file streams. since 
their implementation exhibits arcanely and somewhat subtly (subtle in terms 
of cause, as opposed to effect - the effect is quite apparent) divergent 
behaviour, it definitely violates the users' expectations, so it is a bug in 
that sense. with that said, they never claimed to be $standard compliant and 
they do document this, iirc, so it is not quite a bug in that sense. in 
practical terms, their implementation is not likely to 'get fixed', so the 
failure to deal with this quirk is a python bug. there are two options for 
python:

1. say that python expects users to be aware of quirks on specific platforms 
and the responsibility of dealing with them lies with the user. in this 
case, this quirk needs to be mentioned in the python docs, since it is not 
reasonable to expect people to figure out that they need to look at msdn c 
runtime api docs.

2. say that across all platforms python supports given functionality on, 
said functionality needs to have functionally identical results given 
identical input. in this case, the flush+seek workaround needs to be 
utilized on all cpythons linked with msvscrt in a manner transparent to the 
user.

make sense?

-p 




From paul-lists at perforge.com  Sat Dec 31 13:38:48 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 15:38:48 -0500
Subject: [Twisted-Python] Re: r15451 - Fix test failures under windows by
	changing the eventual-send operation to
References: <20051231.105721.17570930.warner@lothar.com>
Message-ID: <0b6701c60e4a$35c01f70$6402a8c0@dcore>


----- Original Message ----- 
From: "Brian Warner" <warner at lothar.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 1:57 PM
Subject: [Twisted-Python] Re: r15451 - Fix test failures under windows by 
changing the eventual-send operation to


> To that end, using a separate queue for timers that are ready to go "now"
> (i.e. ones that will be fired before calling select() or the like) might 
> be
> useful, basically making N=0 a special case. This would avoid the overhead 
> of
> inserting the DelayedCall into an arbitrary place and maintaining the
> ordering guarantees of #2 and #3, and would avoid an extra select() spin
> between the time an N=0 timer was inserted and the time it was fired.

specialcasing this is ugly, imo, not that i get any votes ;) you need to 
decide:

1. what cost you want insert, traversal and possibly async sorting/ordering 
passes to carry
2. what guarantees you want to provide, in the general case

eg, it would be reasonable to say 'we want to be O(1) on traversal' (at 
least O(1) in terms of getting a list of events that fire now) and we want 
to guarantee ordering  in this case, you can decide to take the full 
ordering/sorting hit on inserts. if you think a little harder, this can be 
made fairly efficient with a sparse circular list of event buckets, with 
each bucket being a fifo queue of events to be fired at that time. whether 
it's worth bothering with the additional complexity is up for discussion.

i'm sleep deprived, so apologies in advance if this made no sense at all.

-p 




From paul-lists at perforge.com  Sat Dec 31 14:02:31 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 16:02:31 -0500
Subject: [Twisted-Python] Re: Twisted-Python Digest, Vol 21, Issue 39
References: <20051231195259.1217.780865545.divmod.quotient.9206@ohm>
Message-ID: <0b8401c60e4d$840d69a0$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 2:52 PM
Subject: Re: [Twisted-Python] Re: Twisted-Python Digest, Vol 21, Issue 39


> On Sat, 31 Dec 2005 14:23:55 -0500, Michael Schneider 
> <michaelschneider at fuse.net> wrote:
>>On Windows, you might use time.clock() it is more precise (keep with 
>>time.time on UNIX
>
> Unfortunately, it wraps around after ~40 days, making it unsuitable for 
> use tracking long periods of time.  It is probably possible > to build a 
> usable timer on top of this using a wrap-around counter, but afaik no one 
> has yet attempted this.

it's actually slightly less than 50 days. time.clock() is not usable on 
windows, i think, without being able to determine its frequency (you need to 
be able to do QueryPerformanceFrequency() iirc). there's a right way to do 
this (although the api may not be available from python/pywin32), i just 
can't remember (i'm not very clueful when it comes to windows and whatever 
experience i had was a long time ago). i'll sleep on it and see if i can 
remember it in the morning.

-p 




From glyph at divmod.com  Sat Dec 31 14:19:52 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 31 Dec 2005 16:19:52 -0500
Subject: [Twisted-Python] Re: r15451 - Fix test failures under windows by
	changing the eventual-send operation to
In-Reply-To: <20051231.105721.17570930.warner@lothar.com>
Message-ID: <20051231211952.1217.1378987386.divmod.quotient.9225@ohm>



On Sat, 31 Dec 2005 10:57:21 -0800 (PST), Brian Warner <warner at lothar.com> wrote:
>>> Yes it does: order of method call.

Hmm.  Does it?  The interface documentation is pretty light on guarantees, and that's on purpose: what happens if the user does callLater(0), then sets the system clock back, then does callLater(0) again?

>Ah. That's useful to know: I would prefer to use a non-threading-related call
>to achieve this eventual-send functionality. I'll add a TODO test to check
>that this promise is being met.

I think that your eventual-send queue should probably be its own event-queuing API.  If you have:

  callLater(0, foo); callLater(0, bar)

and you expect ordering between them, something like this is better:

  callLater(0, lambda : foo(); bar())
or perhaps
  myRunQueue.put(foo); myRunQueue.put(bar); callLater(0, myRunQueue.activate)

You get the idea.

That's not to say that stabilizing ordering in the win32 reactor is necessarily bad; but I think we should be careful with specifying overly strict behaviors with respect to the exact ordering that the reactor applies to different invocations of events, whether they're time or network or whatever.  There should be some wiggle-room so that faster/fairer approaches can be tried.



From glyph at divmod.com  Sat Dec 31 14:33:46 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 31 Dec 2005 16:33:46 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work
	and what to do about it
In-Reply-To: <0b6201c60e48$704c7190$6402a8c0@dcore>
Message-ID: <20051231213346.1217.292143908.divmod.quotient.9228@ohm>



On Sat, 31 Dec 2005 15:21:45 -0500, Paul G <paul-lists at perforge.com> wrote:

>2. say that across all platforms python supports given functionality on, 
>said functionality needs to have functionally identical results given 
>identical input. in this case, the flush+seek workaround needs to be 
>utilized on all cpythons linked with msvscrt in a manner transparent to the 
>user.

It seems like we can work around this more easily than that, considering that flush and seek are available from Twisted; the file object causing problems in the tests is being returned from the open() method of a FilePath object, if I understand it correctly.  FilePath could include the workaround far in advance of Python deciding to.



From exarkun at divmod.com  Sat Dec 31 14:41:22 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 31 Dec 2005 16:41:22 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work
	and what to do about it
In-Reply-To: <20051231213346.1217.292143908.divmod.quotient.9228@ohm>
Message-ID: <20051231214122.1217.1115795734.divmod.quotient.9231@ohm>

On Sat, 31 Dec 2005 16:33:46 -0500, glyph at divmod.com wrote:
>
>
>On Sat, 31 Dec 2005 15:21:45 -0500, Paul G <paul-lists at perforge.com> wrote:
>>2. say that across all platforms python supports given functionality on, 
>>said functionality needs to have functionally identical results given 
>>identical input. in this case, the flush+seek workaround needs to be 
>>utilized on all cpythons linked with msvscrt in a manner transparent to the 
>>user.
>
>It seems like we can work around this more easily than that, considering 
>that flush and seek are available from Twisted; the file object causing 
>problems in the tests is being returned from the open() method of a FilePath 
>object, if I understand it correctly.  FilePath could include the workaround 
>far in advance of Python deciding to.
>

Quite so.  I definitely think this is a bug in Python though.  Someone should open a ticket in the Python bug tracker.  Cory?

Jean-Paul




From exarkun at divmod.com  Sat Dec 31 14:52:30 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 31 Dec 2005 16:52:30 -0500
Subject: how winnt fileops work and what to do about it (was Re:
	[Twisted-Python] Twisted windows hackers - help the tests to pass!)
In-Reply-To: <0aff01c60df7$c588adf0$6402a8c0@dcore>
Message-ID: <20051231215230.1217.821296097.divmod.quotient.9234@ohm>

On Sat, 31 Dec 2005 05:48:43 -0500, Paul G <paul-lists at perforge.com> wrote:
>
>ok, i can actually chime in here because i've done filesystems work on 
>windows (don't ask ;). now, it's been a while, but i should remember things 
>reasonably accurately (i hope). see below for comments:

Thanks, Paul, for these comments.  This cleared up a lot about how the filesystem works on Win32 for me.

> [snip]
>
>1. change the offending code not to do this rename
>2. instead of a rename, create a new directory, do a recursive copy into it 
>from the original and retry removing the original directory asynchronously 
>until it succeeds. obviously, the file handles which are open at that point 
>will be referencing a different copy of the files from the ones which will 
>be opened subsequently.
>3. test whether the zwDeleteFile() behaves in the way i conjrectured it to 
>(wrt files or directories). if so, cause it to be implemented in the pywin32 
>extension and use it to perform the delete.
>4. test whether you can either use ZwSetFileInformation() to rename 
>directories by changing the FILE_NAME attr in the appropriate info structure 
>or use it to move by renaming files which are open, again using the 
>appropriate (but different) structure.
>if so, implement this or cause this to be implemented in pywin32. it is 
>unclear (to me) whether this would result in the pre-move file handles being 
>dead, stale or correct.
>5. instead of opening the files as normal, open them with pywin32's 
>implementation of CreateFile(), specifying the appropriate sharemode. this 
>will allow the rename (move really) to go through, but it is unclear what 
>happens to the preexisting filehandles.
>6. implement, or cause to be implemented, CreateHardlink() in pywin32. 
>create a new directory and recursively hardlink contents of the original 
>into the new directory. asynchronously retry recursive deletion of the 
>original one.

To these, I would insert a few questions to be answered first:

0. Are the test_output and test_runner tests attempting to move the top-level _trial_temp, or an identically named directory somewhere inside it?

1. Why are the tests trying to move the _trial_temp directory aside at all?

2. If there is a legitimate reason for #1, what files remain open in _trial_temp which are preventing the move from succeeding?

Jean-Paul



From paul-lists at perforge.com  Sat Dec 31 14:57:10 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 16:57:10 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops workand
	what to do about it
References: <20051231213346.1217.292143908.divmod.quotient.9228@ohm>
Message-ID: <0b9801c60e55$26ead110$6402a8c0@dcore>


----- Original Message ----- 
From: <glyph at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 4:33 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
workand what to do about it


>
>
> On Sat, 31 Dec 2005 15:21:45 -0500, Paul G <paul-lists at perforge.com> 
> wrote:
>
>>2. say that across all platforms python supports given functionality on, 
>>said functionality needs to have functionally identical results given 
>>identical input. in this case, the flush+seek workaround needs to be 
>>utilized on all cpythons linked with msvscrt in a manner transparent to 
>>the user.
>
> It seems like we can work around this more easily than that, considering 
> that flush and seek are available from Twisted; the file object causing 
> problems in the tests is being returned from the open() method of a 
> FilePath object, if I understand it correctly.  FilePath could include the 
> workaround far in advance of Python deciding to.

oh, it makes perfect sense to have a workaround in twisted, i'm not 
suggesting otherwise. however, it should be just that - a temporary 
workaround until cpython has a fix for the issue, because (outside of the 
offending libc implementation), that is the right place to fix it.

-p




From paul-lists at perforge.com  Sat Dec 31 14:58:34 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 16:58:34 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops workand
	what to do about it
References: <20051231214122.1217.1115795734.divmod.quotient.9231@ohm>
Message-ID: <0b9d01c60e55$58875130$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 4:41 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
workand what to do about it


> On Sat, 31 Dec 2005 16:33:46 -0500, glyph at divmod.com wrote:
>>
>>
>>On Sat, 31 Dec 2005 15:21:45 -0500, Paul G <paul-lists at perforge.com> 
>>wrote:
>>>2. say that across all platforms python supports given functionality on, 
>>>said functionality needs to have functionally identical results given 
>>>identical input. in this case, the flush+seek workaround needs to be 
>>>utilized on all cpythons linked with msvscrt in a manner transparent to 
>>>the user.
>>
>>It seems like we can work around this more easily than that, considering 
>>that flush and seek are available from Twisted; the file object causing 
>>problems in the tests is being returned from the open() method of a 
>>FilePath object, if I understand it correctly.  FilePath could include the 
>>workaround far in advance of Python deciding to.
>>
>
> Quite so.  I definitely think this is a bug in Python though.  Someone 
> should open a ticket in the Python bug tracker.  Cory?

cory,

i'll be happy to see if i can dig up an msdn entry documenting this so you 
can include it in the bug report. ping me if you need me to do it.

-p 




From warner at lothar.com  Sat Dec 31 15:04:27 2005
From: warner at lothar.com (Brian Warner)
Date: Sat, 31 Dec 2005 14:04:27 -0800 (PST)
Subject: [Twisted-Python] Re: r15451 - Fix test failures under windows
	by changing the eventual-send operation to
Message-ID: <20051231.140427.07612418.warner@lothar.com>

> I think that your eventual-send queue should probably be its own
> event-queuing API. If you have:
>
>  callLater(0, foo); callLater(0, bar)
>
> and you expect ordering between them, something like this is better:
>
>  callLater(0, lambda : foo(); bar())
> or perhaps
>  myRunQueue.put(foo); myRunQueue.put(bar); callLater(0, myRunQueue.activate)
>
> You get the idea.

The issue here is with multiple eventual-sends being called from other code.
Specifically, the context was an ITransport-providing Loopback class, used in
newpb unit tests, which needs to decouple transport.write() from the
resulting proto.dataReceived(). The write() calls are being made from all
over the place, with no good location to coordinate or batch them together.
Technically I could rig it so that transport.write() queues the data and then
oblige the writing Protocol to invoke transport.flush() (newpb has a place
for this to go, to support more datagram-oriented transports someday), but
then who's to say that whatever code invokes *that* won't want to run
multiple times in a brief period of time?

I heartily agree that callLater() is not the appropriate tool for this
purpose. A week ago I thought it might be, but at that point I didn't realize
that I need the ordering guarantee described above. The implementation of
callFromThread() happens to match both my needs and my expectations about
efficiency, but of course it isn't documented to provide either, plus this
eventual-send functionality should be completely unrelated to threads.

 -Brian



From paul-lists at perforge.com  Sat Dec 31 15:12:55 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 17:12:55 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops
	workandwhat to do about it
References: <20051231213346.1217.292143908.divmod.quotient.9228@ohm>
	<0b9801c60e55$26ead110$6402a8c0@dcore>
Message-ID: <0ba401c60e57$59d3bc70$6402a8c0@dcore>


----- Original Message ----- 
From: "Paul G" <paul-lists at perforge.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 4:57 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
workandwhat to do about it


>
> ----- Original Message ----- 
> From: <glyph at divmod.com>
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Sent: Saturday, December 31, 2005 4:33 PM
> Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
> workand what to do about it
>
>
>>
>>
>> On Sat, 31 Dec 2005 15:21:45 -0500, Paul G <paul-lists at perforge.com> 
>> wrote:
>>
>>>2. say that across all platforms python supports given functionality on, 
>>>said functionality needs to have functionally identical results given 
>>>identical input. in this case, the flush+seek workaround needs to be 
>>>utilized on all cpythons linked with msvscrt in a manner transparent to 
>>>the user.
>>
>> It seems like we can work around this more easily than that, considering 
>> that flush and seek are available from Twisted; the file object causing 
>> problems in the tests is being returned from the open() method of a 
>> FilePath object, if I understand it correctly.  FilePath could include 
>> the workaround far in advance of Python deciding to.
>
> oh, it makes perfect sense to have a workaround in twisted, i'm not 
> suggesting otherwise. however, it should be just that - a temporary 
> workaround until cpython has a fix for the issue, because (outside of the 
> offending libc implementation), that is the right place to fix it.

just to clarify: there was no question to the effect of  'should we fix this 
in twisted for now?' - i was presuming that this course of action would be 
obvious and, indeed, the one being taken. cory specifically asked where i 
thought the bug was, so i explained my take on that.

more importantly, it just occurred to me that even if the next minor cpython 
release contains this fix, we (and all python users) would still be stuck 
with this issue in previous releases. twisted would have to contain the 
workaround until the last version of cpython without the fix became 
unsupported, which could be quite a while. in light of this, not only should 
python be fixed, but this behaviour needs to be explained in the respective 
python docs quite prominently as well.

-p 




From warner at lothar.com  Sat Dec 31 15:16:39 2005
From: warner at lothar.com (Brian Warner)
Date: Sat, 31 Dec 2005 14:16:39 -0800 (PST)
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and
 what to do about it
Message-ID: <20051231.141639.112593935.warner@lothar.com>

glyph at divmod.com writes:

> It seems like we can work around this more easily than that, considering
> that flush and seek are available from Twisted; the file object causing
> problems in the tests is being returned from the open() method of a
> FilePath object, if I understand it correctly. FilePath could include the
> workaround far in advance of Python deciding to.

I'm pretty sure that the real problem we're trying to solve here is caused by
a stuck process keeping a .pyd file open. Indeed, if you look at the
buildslave's logs, you'll see the exception is as follows:

 exceptions.OSError: [Errno 13] Permission denied: 'c:\\buildslave\\win32-win32er\\W32-full2.4-win32er\\Twisted\\twisted\\protocols\\_c_urlarg.pyd'

So changing the way Twisted or its unit tests open a file is just not going
to help. What matters is the way python (or.. pyrex?) opens a file.

(for context: the buildbot is currently configured to do SVN checkout/updates
into one directory, then copy the tree into a second directory, then run
tests on that second directory. This mode='copy' approach uses 'svn update'
to minimizes network bandwidth, but at the expense of doubling the disk usage
with the extra copy. At the beginning of each build, the buildslave deletes
the second directory with a function named rmdirRecursive() that bear
provided, which does a chmod() of any mis-permissioned files before deleting
them. It was an os.remove() inside this rmdirRecursive which raised the
exception).


I've run into a similar problem in the past, under Solaris, using NFS, where
a test case spawned off a daemon process which then didn't die when it was
supposed to, somehow held on to a file (I think solaris won't let you delete
a file that is being used as the backing store for an executable), and that
prevented the unlink() from succeeding.

In that environment, I just renamed the top-level directory to something
unique, spawned off an 'rm -rf' into the background to delete the old
directory if it was possible, then continued on with the next build. If the
code had to try too hard to come up with a unique name, it would flag a
warning that there might be a stuck process somewhere.

Perhaps we could use something similar here?

Of course, the real fix would be to find a way to let the testing code kill
off any stuck processes, but that'll probably be very windows-specific.


cheers,
 -Brian



From paul-lists at perforge.com  Sat Dec 31 15:23:47 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 17:23:47 -0500
Subject: how winnt fileops work and what to do about it (was
	Re:[Twisted-Python] Twisted windows hackers - help the tests to pass!)
References: <20051231215230.1217.821296097.divmod.quotient.9234@ohm>
Message-ID: <0bab01c60e58$dec410a0$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 4:52 PM
Subject: Re: how winnt fileops work and what to do about it (was 
Re:[Twisted-Python] Twisted windows hackers - help the tests to pass!)


> On Sat, 31 Dec 2005 05:48:43 -0500, Paul G <paul-lists at perforge.com> 
> wrote:
>>
>>ok, i can actually chime in here because i've done filesystems work on 
>>windows (don't ask ;). now, it's been a while, but i should remember 
>>things reasonably accurately (i hope). see below for comments:
>
> Thanks, Paul, for these comments.  This cleared up a lot about how the 
> filesystem works on Win32 for me.

just a quick revision from me, for the benefit of posterity only, since 
investigating the feasibility of fixing the underlying cause (files being 
held open) seems to be the best course of action.

>>4. test whether you can either use ZwSetFileInformation() to rename 
>>directories by changing the FILE_NAME attr in the appropriate info 
>>structure or use it to move by renaming files which are open, again using 
>>the appropriate (but different) structure.

this will definitely not work for files based on the ddk docs i managed to 
dig out, and will almost certainly not work for directories (though this 
isn't documented either way). quite simply, expecting this to work is an 
expectation borne out of familiarity with things like ext2/linux-vfs, where 
all filesystem objects are inodes mapped into a namespace with dentries.  it 
appears that no matter how you slice it, the underlying implementation of 
ntfs is drastically different, so a rename is a move and a move is a 
copy+delete, which brings us back to our problem.

-p 




From warner at lothar.com  Sat Dec 31 15:25:36 2005
From: warner at lothar.com (Brian Warner)
Date: Sat, 31 Dec 2005 14:25:36 -0800 (PST)
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work
	and what to do about it
Message-ID: <20051231.142536.115608090.warner@lothar.com>


Ah, sorry, there are two separate bugs, and this thread is dealing with the
other one. Nevermind.

 -Brian (plus, this thread makes me realize that renaming the directory won't
         work anyway)



From exarkun at divmod.com  Sat Dec 31 15:27:48 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 31 Dec 2005 17:27:48 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work
	and what to do about it
In-Reply-To: <20051231.141639.112593935.warner@lothar.com>
Message-ID: <20051231222748.1217.1414203448.divmod.quotient.9242@ohm>

On Sat, 31 Dec 2005 14:16:39 -0800 (PST), Brian Warner <warner at lothar.com> wrote:
>glyph at divmod.com writes:
>
>> It seems like we can work around this more easily than that, considering
>> that flush and seek are available from Twisted; the file object causing
>> problems in the tests is being returned from the open() method of a
>> FilePath object, if I understand it correctly. FilePath could include the
>> workaround far in advance of Python deciding to.
>
>I'm pretty sure that the real problem we're trying to solve here is caused by
>a stuck process keeping a .pyd file open. Indeed, if you look at the
>buildslave's logs, you'll see the exception is as follows:

To clarify, there are many, many problems we are attempting to solve >:)  Confusingly, they seem to be predominantly filesystem related.

>
> exceptions.OSError: [Errno 13] Permission denied: 'c:\\buildslave\\win32-win32er\\W32-full2.4-win32er\\Twisted\\twisted\\protocols\\_c_urlarg.pyd'
>

This is definitely one of them.  Another is that trial's test_output and test_runner try to move a directory aside and fail for some reason.  Another is that some tests assert things about the behavior of files opened in 'r+b' mode, which does not behave the same way on Win32 as on POSIX.

Jean-Paul



From paul-lists at perforge.com  Sat Dec 31 15:48:29 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 17:48:29 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and
	what to do about it
References: <20051231.141639.112593935.warner@lothar.com>
Message-ID: <0bb701c60e5c$53d20250$6402a8c0@dcore>


----- Original Message ----- 
From: "Brian Warner" <warner at lothar.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 5:16 PM
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and 
what to do about it


> glyph at divmod.com writes:
>
>> It seems like we can work around this more easily than that, considering
>> that flush and seek are available from Twisted; the file object causing
>> problems in the tests is being returned from the open() method of a
>> FilePath object, if I understand it correctly. FilePath could include the
>> workaround far in advance of Python deciding to.
>
> I'm pretty sure that the real problem we're trying to solve here is caused 
> by
> a stuck process keeping a .pyd file open. Indeed, if you look at the
> buildslave's logs, you'll see the exception is as follows:
>
> exceptions.OSError: [Errno 13] Permission denied: 
> 'c:\\buildslave\\win32-win32er\\W32-full2.4-win32er\\Twisted\\twisted\\protocols\\_c_urlarg.pyd'
>
> So changing the way Twisted or its unit tests open a file is just not 
> going
> to help. What matters is the way python (or.. pyrex?) opens a file.
>
> (for context: the buildbot is currently configured to do SVN 
> checkout/updates
> into one directory, then copy the tree into a second directory, then run
> tests on that second directory. This mode='copy' approach uses 'svn 
> update'
> to minimizes network bandwidth, but at the expense of doubling the disk 
> usage
> with the extra copy. At the beginning of each build, the buildslave 
> deletes
> the second directory with a function named rmdirRecursive() that bear
> provided, which does a chmod() of any mis-permissioned files before 
> deleting
> them. It was an os.remove() inside this rmdirRecursive which raised the
> exception).

sysinternals.com should have a utility equivalent to lsof. this is probably 
the best way to figure out who's doing this.

> I've run into a similar problem in the past, under Solaris, using NFS, 
> where
> a test case spawned off a daemon process which then didn't die when it was
> supposed to, somehow held on to a file (I think solaris won't let you 
> delete
> a file that is being used as the backing store for an executable), and 
> that
> prevented the unlink() from succeeding.

this has to do with how execution works in unices generally. it is *not* a 
lock - there are no compulsory locks - so while the situation is somewhat 
(not very, though) similar wrt effects, it's actually completely different. 
posix semantics dictate that you can not open a file being executed for 
writing and can not execute if it's open for writing; you can, however, 
unlink because the inode doesn't get reaped until the refcount drops to 0. 
this is the case on linux systems. svr4 prohibits the unlink as well, this 
is an svr4 extension to posix. as an interesting piece of trivia to chuckle 
about, the errno for these conditions is ETXTBUSY aka Textfile Busy. (this 
is funny because executables are always binary in practice).

> In that environment, I just renamed the top-level directory to something
> unique, spawned off an 'rm -rf' into the background to delete the old
> directory if it was possible, then continued on with the next build. If 
> the
> code had to try too hard to come up with a unique name, it would flag a
> warning that there might be a stuck process somewhere.

this is a valid technique, except when you're dealing with windows ;) as i 
mentioned in another post, renames (regardless of how high up in the tree 
you go) are recursive copy + recursive delete. the delete will fail. 
furthermore, SHFileOperation recursive deletes bail on first error, afair.

> Perhaps we could use something similar here?

no, see above.

> Of course, the real fix would be to find a way to let the testing code 
> kill
> off any stuck processes, but that'll probably be very windows-specific.

on windows, we probably want to use os.abort() and on *nix os.kill(). 
however, it is probably more interesting to figure out why processes are 
getting stuck ;)

-p 




From paul-lists at perforge.com  Sat Dec 31 16:04:16 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 18:04:16 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops workand
	what to do about it
References: <20051231222748.1217.1414203448.divmod.quotient.9242@ohm>
Message-ID: <0bcf01c60e5e$86af06d0$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 5:27 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
workand what to do about it


> This is definitely one of them.  Another is that trial's test_output and 
> test_runner try to move a directory aside and fail for some > reason.

they fail for the same reason it looks like. the crux of the issue is that 
you can't hold files open if you're going to be performing ops on an 
ancestor directory.


>  Another is that some tests assert things about the behavior of files 
> opened in 'r+b' mode, which does not behave the same way > on Win32 as on 
> POSIX.

this has been resolved (as in cause found and confirmed). also, if you will 
excuse me for being pedantically retentive, there is no direct equivalent to 
ansi c file stream apis in either win32 or nt native. in fact, neither is 
there one on posix. nt/posix is syscalls, win32 is a libc-like layer on top 
of ntapi, but completely different. this weirdness is all in the libc. the 
issue lies, specifically, with the libc (aka c runtime as they call it) 
visual studio provides and its implementation of file streams. i'm willing 
to bet that if cpython can be built using something other than visual studio 
on windows, those builds do not suffer from the same issue (unless that 
product's authors decided to lemming microsoft when writing their libc).

-p 




From foom at fuhm.net  Sat Dec 31 16:12:06 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 31 Dec 2005 18:12:06 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops workand
	what to do about it
In-Reply-To: <0b9801c60e55$26ead110$6402a8c0@dcore>
References: <20051231213346.1217.292143908.divmod.quotient.9228@ohm>
	<0b9801c60e55$26ead110$6402a8c0@dcore>
Message-ID: <97E41409-3595-4FE3-B4C9-E1063BFF38DF@fuhm.net>


On Dec 31, 2005, at 4:57 PM, Paul G wrote:
> oh, it makes perfect sense to have a workaround in twisted, i'm not  
> suggesting otherwise. however, it should be just that - a temporary  
> workaround until cpython has a fix for the issue, because (outside  
> of the offending libc implementation), that is the right place to  
> fix it.

As I wrote in the bug report:
> It's not a python bug except perhaps that python should raise an  
> exception.
> Doing a read and write without a seek in between is illegal in C.
>
> "ANSI C requires that a file positioning function intervene between  
> output and
> input, unless an input operation encounters end-of-file."

I am against including any sort of workaround besides raising an  
exception if the situation occurs. And I don't think even that is  
particularly warranted.

James



From paul-lists at perforge.com  Sat Dec 31 16:25:29 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 18:25:29 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and
	what to do about it
References: <20051231.141639.112593935.warner@lothar.com>
Message-ID: <0be401c60e61$7cf9cc80$6402a8c0@dcore>


----- Original Message ----- 
From: "Brian Warner" <warner at lothar.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 5:16 PM
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops work and 
what to do about it

> Of course, the real fix would be to find a way to let the testing code 
> kill
> off any stuck processes, but that'll probably be very windows-specific.

on *nix, we can use os.waitpid() and os.kill(). on windows, we can use win32 
api OpenProcess+WaitFor{Single,Multiple}Object[s]() and TerminateProcess. 
please keep in mind that killing processes on windows is not safe when they 
use dlls..on *nix, this is of course protected against with proper signal 
handling.

-p 




From corydodt at twistedmatrix.com  Sat Dec 31 16:34:07 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Sat, 31 Dec 2005 15:34:07 -0800
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops workand
	what to do about it
In-Reply-To: <97E41409-3595-4FE3-B4C9-E1063BFF38DF@fuhm.net>
References: <20051231213346.1217.292143908.divmod.quotient.9228@ohm>	<0b9801c60e55$26ead110$6402a8c0@dcore>
	<97E41409-3595-4FE3-B4C9-E1063BFF38DF@fuhm.net>
Message-ID: <43B7156F.9010902@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Fair enough.  In that case, the test itself is broken, since it doesn't
do seeks or flushes.

C


James Y Knight wrote:
> 
> On Dec 31, 2005, at 4:57 PM, Paul G wrote:
> 
>> oh, it makes perfect sense to have a workaround in twisted, i'm not 
>> suggesting otherwise. however, it should be just that - a temporary 
>> workaround until cpython has a fix for the issue, because (outside  of
>> the offending libc implementation), that is the right place to  fix it.
> 
> 
> As I wrote in the bug report:
> 
>> It's not a python bug except perhaps that python should raise an 
>> exception.
>> Doing a read and write without a seek in between is illegal in C.
>>
>> "ANSI C requires that a file positioning function intervene between 
>> output and
>> input, unless an input operation encounters end-of-file."
> 
> 
> I am against including any sort of workaround besides raising an 
> exception if the situation occurs. And I don't think even that is 
> particularly warranted.
> 
> James
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDtxVu3A5SrXAiHQcRApqwAJ0Ywaxg9qxs2QZQxB8NIILUFnTXUgCfaNHl
QVcMaluKYVx0cf5+mWHo2mU=
=9NK8
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Sat Dec 31 16:46:35 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 31 Dec 2005 18:46:35 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops workand
	what to do about it
In-Reply-To: <97E41409-3595-4FE3-B4C9-E1063BFF38DF@fuhm.net>
Message-ID: <20051231234635.1217.13865851.divmod.quotient.9259@ohm>

On Sat, 31 Dec 2005 18:12:06 -0500, James Y Knight <foom at fuhm.net> wrote:
>
>On Dec 31, 2005, at 4:57 PM, Paul G wrote:
>>oh, it makes perfect sense to have a workaround in twisted, i'm not 
>>suggesting otherwise. however, it should be just that - a temporary 
>>workaround until cpython has a fix for the issue, because (outside  of the 
>>offending libc implementation), that is the right place to  fix it.
>
>As I wrote in the bug report:
>>It's not a python bug except perhaps that python should raise an 
>>exception.
>>Doing a read and write without a seek in between is illegal in C.
>>
>>"ANSI C requires that a file positioning function intervene between  output 
>>and
>>input, unless an input operation encounters end-of-file."
>
>I am against including any sort of workaround besides raising an  exception 
>if the situation occurs. And I don't think even that is  particularly 
>warranted.

Thanks for pointing this out.  The immediate fix is now obvious: the test needs to change.  It _might_ be nice to have an assertion for this behavior, but I'm not about to add a file wrapper just for this (if all of Twisted used FilePath, instead of opening files directly, I might grant more weight to this, but since it doesn't...).

Jean-Paul



From paul-lists at perforge.com  Sat Dec 31 16:50:24 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 18:50:24 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops
	workandwhat to do about it
References: <20051231213346.1217.292143908.divmod.quotient.9228@ohm><0b9801c60e55$26ead110$6402a8c0@dcore>
	<97E41409-3595-4FE3-B4C9-E1063BFF38DF@fuhm.net>
Message-ID: <0c0201c60e64$f849ea70$6402a8c0@dcore>


----- Original Message ----- 
From: "James Y Knight" <foom at fuhm.net>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 6:12 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
workandwhat to do about it


>
> On Dec 31, 2005, at 4:57 PM, Paul G wrote:
>> oh, it makes perfect sense to have a workaround in twisted, i'm not 
>> suggesting otherwise. however, it should be just that - a temporary 
>> workaround until cpython has a fix for the issue, because (outside  of 
>> the offending libc implementation), that is the right place to  fix it.
>
> As I wrote in the bug report:
>> It's not a python bug except perhaps that python should raise an 
>> exception.
>> Doing a read and write without a seek in between is illegal in C.
>>
>> "ANSI C requires that a file positioning function intervene between 
>> output and
>> input, unless an input operation encounters end-of-file."

you stop quoting right at the relevant part (ie, where the difference 
between eg glibc and msvcrt comes in):

"(If this condition is not met, then a read is allowed to  return
       the result of writes other than the most recent.)"

does msvcrt do this? no. moreover, msvcrt needs an *fsetpos()*/fseek() and 
an *fflush()* (as per cory), whereas glibc will take fseek() or *fgetpos()*. 
this means that calls resulting in synchronization in glibc and msvcrt are 
different, with glibc sticking to ansi c and msvcrt deviating.

there is an obvious deviation both from ansi c and from glibc usage.

moreover, none of this seems to be necessary with glibc in practice (and 
cpython seems to not be doing it or suggesting it in the docs), since this 
test doesn't fail on linux. different results given the same input is a bug, 
imo.

let us step back for a second: the problem rears its head in a file object 
"being returned from the open() method of a FilePath
object". the user has no way to know that he should be syncing the stream, 
primarily because he's being given a 'File', not a 'File stream'. either 
these issues should be listed in the docs, or taken care of underneath, 
keeping a File a black box. from a design point of view, the stream is an 
implementation detail - exposing it is ugly.

a matter of how you view it though.

-p 




From paul-lists at perforge.com  Sat Dec 31 16:56:49 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 18:56:49 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt fileops
	workandwhat to do about it
References: <20051231234635.1217.13865851.divmod.quotient.9259@ohm>
Message-ID: <0c1801c60e65$dd864d90$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 6:46 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
workandwhat to do about it


> On Sat, 31 Dec 2005 18:12:06 -0500, James Y Knight <foom at fuhm.net> wrote:
>>
>>On Dec 31, 2005, at 4:57 PM, Paul G wrote:
>>>oh, it makes perfect sense to have a workaround in twisted, i'm not 
>>>suggesting otherwise. however, it should be just that - a temporary 
>>>workaround until cpython has a fix for the issue, because (outside  of 
>>>the offending libc implementation), that is the right place to  fix it.
>>
>>As I wrote in the bug report:
>>>It's not a python bug except perhaps that python should raise an 
>>>exception.
>>>Doing a read and write without a seek in between is illegal in C.
>>>
>>>"ANSI C requires that a file positioning function intervene between 
>>>output and
>>>input, unless an input operation encounters end-of-file."
>>
>>I am against including any sort of workaround besides raising an 
>>exception if the situation occurs. And I don't think even that is 
>>particularly warranted.
>
> Thanks for pointing this out.  The immediate fix is now obvious: the test 
> needs to change.  It _might_ be nice to have an assertion for this 
> behavior, but I'm not about to add a file wrapper just for this (if all of 
> Twisted used FilePath, instead of opening files directly, I might grant 
> more weight to this, but since it doesn't...).

are we sure streams are only used with File objects FilePath gives us?

-p




From paul-lists at perforge.com  Sat Dec 31 17:00:55 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 19:00:55 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt
	fileopsworkandwhat to do about it
References: <20051231213346.1217.292143908.divmod.quotient.9228@ohm><0b9801c60e55$26ead110$6402a8c0@dcore><97E41409-3595-4FE3-B4C9-E1063BFF38DF@fuhm.net>
	<0c0201c60e64$f849ea70$6402a8c0@dcore>
Message-ID: <0c1d01c60e66$705b6a10$6402a8c0@dcore>


----- Original Message ----- 
From: "Paul G" <paul-lists at perforge.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 6:50 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt 
fileopsworkandwhat to do about it


>
> ----- Original Message ----- 
> From: "James Y Knight" <foom at fuhm.net>
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Sent: Saturday, December 31, 2005 6:12 PM
> Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
> workandwhat to do about it
>
>
>>
>> On Dec 31, 2005, at 4:57 PM, Paul G wrote:
>>> oh, it makes perfect sense to have a workaround in twisted, i'm not 
>>> suggesting otherwise. however, it should be just that - a temporary 
>>> workaround until cpython has a fix for the issue, because (outside  of 
>>> the offending libc implementation), that is the right place to  fix it.
>>
>> As I wrote in the bug report:
>>> It's not a python bug except perhaps that python should raise an 
>>> exception.
>>> Doing a read and write without a seek in between is illegal in C.
>>>
>>> "ANSI C requires that a file positioning function intervene between 
>>> output and
>>> input, unless an input operation encounters end-of-file."
>
> you stop quoting right at the relevant part (ie, where the difference 
> between eg glibc and msvcrt comes in):
>
> "(If this condition is not met, then a read is allowed to  return
>       the result of writes other than the most recent.)"
>
> does msvcrt do this? no. moreover, msvcrt needs an *fsetpos()*/fseek() and 
> an *fflush()* (as per cory), whereas glibc will take fseek() or 
> *fgetpos()*. this means that calls resulting in synchronization in glibc 
> and msvcrt are different, with glibc sticking to ansi c and msvcrt 
> deviating.
>
> there is an obvious deviation both from ansi c and from glibc usage.
>
> moreover, none of this seems to be necessary with glibc in practice (and 
> cpython seems to not be doing it or suggesting it in the docs), since this 
> test doesn't fail on linux. different results given the same input is a 
> bug, imo.
>
> let us step back for a second: the problem rears its head in a file object 
> "being returned from the open() method of a FilePath
> object". the user has no way to know that he should be syncing the stream, 
> primarily because he's being given a 'File', not a 'File stream'. either 
> these issues should be listed in the docs, or taken care of underneath, 
> keeping a File a black box. from a design point of view, the stream is an 
> implementation detail - exposing it is ugly.
>
> a matter of how you view it though.

talking to myself: no it isn't. here's the msdn article:

http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vclib/html/_crt_fopen.2c_._wfopen.asp

see the difference to the excerpt you quoted from fopen(2)? yep, no 'you 
dont have to sync if input op hits eof' exception. this is what's causing 
the breakage with msvcrt but not glibc, i bet. still think it's not a bug/is 
a bug in the test?

i'll go sleep now, so if i've missed the boat again, i won't be here to 
witness the smackdown <g>.

-p 




From paul-lists at perforge.com  Sat Dec 31 17:27:34 2005
From: paul-lists at perforge.com (Paul G)
Date: Sat, 31 Dec 2005 19:27:34 -0500
Subject: [Twisted-Python] Re: plus mode was Re: how winnt
	fileopsworkandwhat to do about it
References: <20051231234635.1217.13865851.divmod.quotient.9259@ohm>
	<0c1801c60e65$dd864d90$6402a8c0@dcore>
Message-ID: <0c3401c60e6a$29959930$6402a8c0@dcore>


----- Original Message ----- 
From: "Paul G" <paul-lists at perforge.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, December 31, 2005 6:56 PM
Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt 
fileopsworkandwhat to do about it


>
> ----- Original Message ----- 
> From: "Jean-Paul Calderone" <exarkun at divmod.com>
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Sent: Saturday, December 31, 2005 6:46 PM
> Subject: Re: [Twisted-Python] Re: plus mode was Re: how winnt fileops 
> workandwhat to do about it
>
>
>> On Sat, 31 Dec 2005 18:12:06 -0500, James Y Knight <foom at fuhm.net> wrote:
>>>
>>>On Dec 31, 2005, at 4:57 PM, Paul G wrote:
>>>>oh, it makes perfect sense to have a workaround in twisted, i'm not 
>>>>suggesting otherwise. however, it should be just that - a temporary 
>>>>workaround until cpython has a fix for the issue, because (outside  of 
>>>>the offending libc implementation), that is the right place to  fix it.
>>>
>>>As I wrote in the bug report:
>>>>It's not a python bug except perhaps that python should raise an 
>>>>exception.
>>>>Doing a read and write without a seek in between is illegal in C.
>>>>
>>>>"ANSI C requires that a file positioning function intervene between 
>>>>output and
>>>>input, unless an input operation encounters end-of-file."
>>>
>>>I am against including any sort of workaround besides raising an 
>>>exception if the situation occurs. And I don't think even that is 
>>>particularly warranted.
>>
>> Thanks for pointing this out.  The immediate fix is now obvious: the test 
>> needs to change.  It _might_ be nice to have an assertion for this 
>> behavior, but I'm not about to add a file wrapper just for this (if all 
>> of Twisted used FilePath, instead of opening files directly, I might 
>> grant more weight to this, but since it doesn't...).
>
> are we sure streams are only used with File objects FilePath gives us?

the relevant snippet of an ltrace python -c "f=open('/etc/hosts/', 'r+')"

---
__ctype_b_loc(0x40115740, 0x40115548, 5, 0x08112740, 0) = 0x401138e4
malloc(11)                                       = 0x0814cd18
realloc(NULL, 16)                                = 0x08157910
memcpy(0x0814cd18, "/etc/hosts", 11)             = 0x0814cd18
free(0x08157910)                                 = <void>
__ctype_b_loc(0x40115740, 0x40115548, 0, 0, 0)   = 0x401138e4
memcpy(0x40160c74, "r+", 3)                      = 0x40160c74
strchr("r+", 'b')                                = NULL
strchr("r+", 'U')                                = NULL
__errno_location()                               = 0x401138e0
fopen64("/etc/hosts", "r+")                      = 0x08175538
---

sure enough, fopen.

-p 




From foom at fuhm.net  Sat Dec 31 21:29:12 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 31 Dec 2005 23:29:12 -0500
Subject: [Twisted-Python] Depreciation of trial.unittest functions?
In-Reply-To: <d06a5cd30512310216o781c740j5c678c42cf854f68@mail.gmail.com>
References: <43B45572.9020405@gmail.com>
	<d06a5cd30512310216o781c740j5c678c42cf854f68@mail.gmail.com>
Message-ID: <271E232A-9316-4471-96BC-B196D3DB4FA9@fuhm.net>


On Dec 31, 2005, at 5:16 AM, Jonathan Lange wrote:

> On 12/30/05, Paul Swartz <paulswartz at gmail.com> wrote:
>
>> I'm not sure if Conch is the only project that did this, but it  
>> used the
>> trial.unittest.* functions instead of methods on TestCases.  I  
>> used them
>> to avoid having to pass TestCase instances around all over the  
>> places,
>> or using a global variable.  To avoid the depreciation warnings, I've
>> starting using the unittest._inst global variable, but I doubt  
>> that this
>> is the appropriate way to change my code.  Is this just not a  
>> supported
>> way of using Trial, or is there something else I should be doing?
>>
>>
>
> This is just not a supported way of using Trial.

Given that the methods don't use self at all (and at least I can't  
forsee any need to in the future), is there a reason they can't be  
class methods, so that unittest.TestCase.assertEquals(a, b) would work?

James




