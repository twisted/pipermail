From twisted-python at milkpotato.org  Fri Sep  1 10:13:32 2006
From: twisted-python at milkpotato.org (Fritz Platzke)
Date: Fri, 1 Sep 2006 10:13:32 -0400 (EDT)
Subject: [Twisted-Python] unable to install twisted
Message-ID: <61284.69.249.228.28.1157120012.squirrel@webmail.milkpotato.org>


Hello,
I hate asking questions like this but quite frankly I'm stumped. I have
been trying to install Twisted for the past two days and it just won't go.
I've tried multiple versions of Zope and Twisted but nothing seems to
work.

The box I am attempting the install is a fresh install of CentOS 4.4 on an
Intel Celeron 733 mhz processor

[root at milky ~]# gcc -v
Reading specs from /usr/lib/gcc/i386-redhat-linux/3.4.6/specs
Configured with: ../configure --prefix=/usr --mandir=/usr/share/man
--infodir=/usr/share/info --enable-shared --enable-threads=posix
--disable-checking --with-system-zlib --enable-__cxa_atexit
--disable-libunwind-exceptions --enable-java-awt=gtk
--host=i386-redhat-linux
Thread model: posix
gcc version 3.4.6 20060404 (Red Hat 3.4.6-3)
[root at milky ~]# python -V
Python 2.3.4

This is what happens when I attempt to build zope...
running build
running build_py
running build_ext
building 'zope.interface._zope_interface_coptimizations' extension
gcc -pthread -fno-strict-aliasing -DNDEBUG -O2 -g -pipe -m32 -march=i386
-mtune=pentium4 -D_GNU_SOURCE -fPIC -fPIC
-IDependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface
-I/usr/include/python2.3 -c
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c
-o
build/temp.linux-i686-2.3/Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.o
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:15:20:
Python.h: Nosuch file or directory
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:16:26:
structmember.h: No such file or directory
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:22:
error: syntax error before '*' token
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:22:
warning: data definition has no type or storage class
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:23:
error: syntax error before '*' token
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:23:
warning: data definition has no type or storage class
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:24:
error: syntax error before '*' token
...
...
etc
...
...
error: command 'gcc' failed with exit status 1


Now I realize that I could probably ask for help on the Zope list but
seeing as how a person NEEDS zope in order to install twisted I'm hoping
someone here has experienced similar issues and can provide some insight
into what I'm missing and/or doing wrong. Surely someone running either
CentOS or RHEL has encountered this problem and can explain what is going
on.

Thanks in advance,
Fritz





From gah at research.att.com  Fri Sep  1 10:33:37 2006
From: gah at research.att.com (Glenn Hochberg)
Date: Fri, 1 Sep 2006 10:33:37 -0400
Subject: [Twisted-Python] strports.service, ssl and forcing client certs
In-Reply-To: <44F69E83.3000303@imperial.ac.uk>
References: <20060830163035.1717.806136533.divmod.quotient.34631@ohm>
	<44F69E83.3000303@imperial.ac.uk>
Message-ID: <DF89DF28-199A-4F2F-9CB1-340F1CDFBB82@research.att.com>

On Aug 31, 2006, at 4:32 AM, Phil Mayers wrote:

>
>> Unlike the older ContextFactory classes, CertificateOptions has  
>> somewhat
>> more modern requirements not dictated by HTTP.  Specifically, the  
>> method
>> is TLSv1 and certificates are required.
>
> >>> import twisted
> >>> import twisted.internet.ssl
> >>> ssl.CertificateOptions()
> Traceback (most recent call last):
>   File "<stdin>", line 1, in ?
> NameError: name 'ssl' is not defined
> >>> twisted.__version__
> '2.4.0'
>
> When was that added?

Your import statement is not consistent with your usage.  You  
probably wanted:
	from twisted.internet import ssl



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060901/baebfa4a/attachment.htm 

From therve at free.fr  Fri Sep  1 10:34:09 2006
From: therve at free.fr (Thomas HERVE)
Date: Fri, 01 Sep 2006 16:34:09 +0200
Subject: [Twisted-Python] unable to install twisted
In-Reply-To: <61284.69.249.228.28.1157120012.squirrel@webmail.milkpotato.org>
References: <61284.69.249.228.28.1157120012.squirrel@webmail.milkpotato.org>
Message-ID: <20060901163409.89kuwknv34gock40@itchy.wasabout.net>

Quoting Fritz Platzke <twisted-python at milkpotato.org>:

> Python.h: No such file or directory

Your problem is here. Something like 'yum install python-devel' should 
do the trick.

-- 
Thomas


----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.




From p.mayers at imperial.ac.uk  Fri Sep  1 10:54:21 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 01 Sep 2006 15:54:21 +0100
Subject: [Twisted-Python] strports.service, ssl and forcing client certs
In-Reply-To: <DF89DF28-199A-4F2F-9CB1-340F1CDFBB82@research.att.com>
References: <20060830163035.1717.806136533.divmod.quotient.34631@ohm>	<44F69E83.3000303@imperial.ac.uk>
	<DF89DF28-199A-4F2F-9CB1-340F1CDFBB82@research.att.com>
Message-ID: <44F8499D.8060309@imperial.ac.uk>

Glenn Hochberg wrote:

> Your import statement is not consistent with your usage.  You probably 
> wanted:
> from twisted.internet import ssl

That is unrelated to the actual question, but you are correct. Copy and 
paste error.



From p.mayers at imperial.ac.uk  Fri Sep  1 10:57:12 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 01 Sep 2006 15:57:12 +0100
Subject: [Twisted-Python] strports.service, ssl and forcing client certs
In-Reply-To: <DF89DF28-199A-4F2F-9CB1-340F1CDFBB82@research.att.com>
References: <20060830163035.1717.806136533.divmod.quotient.34631@ohm>	<44F69E83.3000303@imperial.ac.uk>
	<DF89DF28-199A-4F2F-9CB1-340F1CDFBB82@research.att.com>
Message-ID: <44F84A48.1050708@imperial.ac.uk>

Glenn Hochberg wrote:
>> >>> import twisted.internet.ssl
>> >>> ssl.CertificateOptions()
>> Traceback (most recent call last):
>>   File "<stdin>", line 1, in ?
>> NameError: name 'ssl' is not defined

> Your import statement is not consistent with your usage.  You probably 
> wanted:
> from twisted.internet import ssl

Sorry, ignore the previous reply, I see what you're getting at now. 
However, CertificateOptions still seems to be newer than 2.4.0:


 >>> import twisted.internet.ssl
 >>> twisted.internet.ssl.CertificateOptions()
Traceback (most recent call last):
   File "<stdin>", line 1, in ?
AttributeError: 'module' object has no attribute 'CertificateOptions'
 >>> dir(twisted.internet.ssl)
['Client', 'ClientContextFactory', 'Connector', 'ContextFactory', 
'DefaultOpenSSLContextFactory', 'Port', 'SSL', 'Server', '__all__', 
'__builtins__', '__doc__', '__file__', '__name__', 'address', 'base', 
'components', 'implementedBy', 'implements', 'implementsOnly', 
'interfaces', 'log', 'socket', 'supported', 'tcp']
 >>> twisted.__version__
'2.4.0'

SVN logs look like it was added about a month after the 2.4.0 release?



From exarkun at divmod.com  Fri Sep  1 11:18:14 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 1 Sep 2006 11:18:14 -0400
Subject: [Twisted-Python] strports.service, ssl and forcing client certs
In-Reply-To: <44F84A48.1050708@imperial.ac.uk>
Message-ID: <20060901151814.1717.2116696183.divmod.quotient.35995@ohm>

On Fri, 01 Sep 2006 15:57:12 +0100, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>
>Sorry, ignore the previous reply, I see what you're getting at now. However, 
>CertificateOptions still seems to be newer than 2.4.0:
>

Hmm, sorry.  I thought it made it into 2.4.0, but you're right, it didn't.

You can accomplish the same thing without CertificateOptions, it's just a
lot less fun.  Take a look at what OpenSSL APIs it is using:

http://twistedmatrix.com/trac/browser/trunk/twisted/internet/_sslverify.py#L795

The actual object you need to control the behavior of OpenSSL comes from
OpenSSL itself.  CertificateOptions is just a bit easier to use.

Hopefully Twisted 2.5 will be out before much longer...

Jean-Paul



From twisted-python at milkpotato.org  Fri Sep  1 17:53:44 2006
From: twisted-python at milkpotato.org (Fritz Platzke)
Date: Fri, 1 Sep 2006 17:53:44 -0400 (EDT)
Subject: [Twisted-Python] unable to install twisted
In-Reply-To: <20060901163409.89kuwknv34gock40@itchy.wasabout.net>
References: <61284.69.249.228.28.1157120012.squirrel@webmail.milkpotato.org>
	<20060901163409.89kuwknv34gock40@itchy.wasabout.net>
Message-ID: <63774.69.249.228.28.1157147624.squirrel@webmail.milkpotato.org>

I can't believe I missed this. It should have been so obvious considering
I had to install gcc the other day after a make failed. I don't know how I
left out the devel packages when I flattened/reinstalled last week.

Thanks for making me look dumb,
Fritz

> Quoting Fritz Platzke <twisted-python at milkpotato.org>:
>
>> Python.h: No such file or directory
>
> Your problem is here. Something like 'yum install python-devel' should
> do the trick.
>
> --
> Thomas
>
>
> ----------------------------------------------------------------
> This message was sent using IMP, the Internet Messaging Program.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From ppergame at gmail.com  Sat Sep  2 00:01:14 2006
From: ppergame at gmail.com (Pavel Pergamenshchik)
Date: Fri, 1 Sep 2006 21:01:14 -0700
Subject: [Twisted-Python] unable to install twisted
In-Reply-To: <61284.69.249.228.28.1157120012.squirrel@webmail.milkpotato.org>
References: <61284.69.249.228.28.1157120012.squirrel@webmail.milkpotato.org>
Message-ID: <4a5c1b500609012101qfecaa0ap956c60d37cfe7b7a@mail.gmail.com>

On 9/1/06, Fritz Platzke <twisted-python at milkpotato.org> wrote:
>
> Hello,
> I hate asking questions like this but quite frankly I'm stumped. I have
> been trying to install Twisted for the past two days and it just won't go.
> I've tried multiple versions of Zope and Twisted but nothing seems to
> work.

<snip>

> Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:15:20:
> Python.h: Nosuch file or directory

Python.h is usually supplied separately, in a package named python-dev
or python2.3-dev or some such. Try installing that.



From robert at gravina.com  Sat Sep  2 05:20:19 2006
From: robert at gravina.com (Robert Gravina)
Date: Sat, 2 Sep 2006 18:20:19 +0900
Subject: [Twisted-Python] Data management in a Twisted application
Message-ID: <C33AC969-CC18-4DEC-AC98-7A2B3EA7FE52@gravina.com>

Twisted and Divmod lists,

Sorry about the cross posting here - this is mainly a Twisted  
question but it involves Divmod Axiom a little too.

I'm looking for some advice about the best way to implement data  
management in my application. The way I see it, there is a "client  
does almost everything" approach, and "server does almost everything"  
approach. I'd currently using the former, but I'd like to hear some  
opinions about switching to the latter, or if there is a better  
approach you can think of.

Here are the approaches as I see them:

---

1) Client does almost everything approach

When the user logs on they get a Cacheable, which contains a list of  
Copyable objects that they will be able to add/edit/delete. These  
objects are quite complex (have list of other objects etc.). There is  
a main screen which lists the objects details.

The user can select a row, and they get a form where that can edit  
all the various attributes (obviously much more than is displayed on  
the list on the main screen), and save it to the server. The server  
calls an update method which essentially copies across all the  
attributes to the server-side Axiom Item instance which it  
represents . Using the Cacheable previously mentioned, it notifies  
all clients that an object has been updated and sends them this  
updated object. Adding new objects works in a similar way.

Problems arise with things like delete - I'd really need to set a  
flag on the server-side object when someone has it open, so that I  
can inform other users they can't delete it.

At some point I'd like to implement searching on the main interface,  
so the users can filter their list of objects. This would require me  
to build up boolean search criteria and roll my own search using the  
lists of objects.

2) Sever does almost everything

When the user logs on they get a Cacheable again, but this time the  
list is just a summary of the objects attributes, enough to populate  
the main screen list. When the user edits a row, the client requests  
the Cacheable from the server it represents (not a Copyable anymore).  
When they save, they sent the Cacheable back to the server (is this  
possible I wonder?) and copy accross all the data like before, and  
update the clients by sending them new summary data for that object  
(but not the object itself). I hope, it's possible to stop observing  
the object too.  That way, on the server I could maintain a list of  
who has the object open at the moment.

For searching, now that all the objects live on the server I could  
send my boolean search criteria and use Axiom's search facilities to  
so a proper database search. This saves my rolling me own.

Also, another bonus of this approach is if Axiom one day supports  
Live Queries (maybe I can help implement this when I get the bulk of  
this app done) I can update the clients when their query results  
changes!

---

However, it's expected the users will be searching often, so there's  
something to be said about having all the data close at hand on the  
client. Obviously, this has drawbacks too. Aside from having to  
implement my own search, I'm worried this might mean having thousands  
of objects locally might be a memory hog (but premature optimisation  
is the root of all evil, so I'll worry about this later). The search  
might by faster since there's no need to ask the server to do it, but  
since server-side search is probably going to be much faster than my  
client side search, it's hard to estimate which will be faster.

Anyway, I hope the issues here and my implementation makes sense. I'm  
torn between which approach to take, and I'd really appreciate some  
advice.

Robert





From thisaddressisnotmine at td.selfip.net  Sat Sep  2 10:45:00 2006
From: thisaddressisnotmine at td.selfip.net (Oleg Deribas)
Date: Sat, 02 Sep 2006 17:45:00 +0300
Subject: [Twisted-Python] Re: twisted rpm
In-Reply-To: <1798295731.4581156519336620.JavaMail.tomcat@dell.tecnova.cl>
References: <1798295731.4581156519336620.JavaMail.tomcat@dell.tecnova.cl>
Message-ID: <11ios3-0ff.ln1@td.selfip.net>

Hello,

Jorge Sep?lveda Pereda said the following on 25.08.2006 18:22:

> Hi, i need to know, if there are, a twisted install RPM for Fedora linux ( FC4) . 

http://article.gmane.org/gmane.comp.python.twisted/12098

On some unknown reason these packages are not mentioned at
http://twistedmatrix.com/trac/wiki/Packages

-- 
Oleg




From foom at fuhm.net  Sat Sep  2 11:30:56 2006
From: foom at fuhm.net (James Y Knight)
Date: Sat, 2 Sep 2006 11:30:56 -0400
Subject: [Twisted-Python] Re: twisted rpm
In-Reply-To: <11ios3-0ff.ln1@td.selfip.net>
References: <1798295731.4581156519336620.JavaMail.tomcat@dell.tecnova.cl>
	<11ios3-0ff.ln1@td.selfip.net>
Message-ID: <1FD7DF8D-B51C-4D34-A5A2-62F58696E69F@fuhm.net>

On Sep 2, 2006, at 10:45 AM, Oleg Deribas wrote:
> Jorge Sep?lveda Pereda said the following on 25.08.2006 18:22:
>
>> Hi, i need to know, if there are, a twisted install RPM for Fedora  
>> linux ( FC4) .
>
> http://article.gmane.org/gmane.comp.python.twisted/12098
>
> On some unknown reason these packages are not mentioned at
> http://twistedmatrix.com/trac/wiki/Packages

They are now.

James





From exarkun at twistedmatrix.com  Sun Sep  3 01:05:01 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 03 Sep 2006 05:05:01 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1157259901.6.400592379@twistedmatrix.com

Bug summary
______________________
Summary for 2006-08-27 through 2006-09-03
Bugs opened: 38    Bugs closed: 6  Total open bugs: 722 (+32)

|== Type Changes   |== Priority Changes   |== Component Changes     
|Defect:      +18  |Highest:  +2          |Conch:               +1  
|Enhancement: +14  |High:     +3          |Core:               +15  
|Task:         +0  |Normal:  +25          |Mail:                +2  
                   |Low:      +2          |Release Management:  +1  
                                          |Trial:               +2  
                                          |Web:                 +2  
                                          |Web2:               +10  
                                          |Words:               -1  


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2021] iocpreactor.tcp.ClientSocket should implement ISystemHandle (opened by ghazel)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2021

[#2040] SSL echo client example incorrectly stops the reactor multiple times (opened by exarkun) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2040

[#2044] twisted.test.test_logfile.testNoPermission failing will break buildbot (opened by jerub)
    defect          core       http://twistedmatrix.com/trac/ticket/2044

[#2045] spelling error in _sslverify.OpenSSLCertificateOptions.__getstate__() (opened by dq)
    defect          core       http://twistedmatrix.com/trac/ticket/2045

[#2051] test_imap uses deprecated Deferred.setTimeout (opened by exarkun)
    enhancement     mail       http://twistedmatrix.com/trac/ticket/2051

[#2052] test_defer calls reactor.run() (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2052

                    ===== High =====
[#2020] tkmktap is broken and probably useless, eliminate it (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/2020

[#2033] Removing non-existent property results in error. (opened by rfmohr at osc.edu)
    defect          web2       http://twistedmatrix.com/trac/ticket/2033

[#2042] twisted.web2.auth.wrapper's interface is backwards (opened by glyph)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2042

                    ===== Normal =====
[#2022] ConnectionRefusedError's errno and strerror surprising on BSD/OSX (opened by dalke)
    defect          core       http://twistedmatrix.com/trac/ticket/2022

[#2023] twisted/mail/smtp.py SenderMixin error logging bug (opened by shieldszero)
    defect          mail       http://twistedmatrix.com/trac/ticket/2023

[#2024] trial --dry-run fails with real test_suites, because pyunit suites don't have names (opened by spiv)
    defect          trial      http://twistedmatrix.com/trac/ticket/2024

[#2025] Include reference to client in twisted.web's docstring (opened by jml)
    defect          web        http://twistedmatrix.com/trac/ticket/2025

[#2026] Edit the twisted.internet docstring to make contents clearer (opened by jml)
    defect          core       http://twistedmatrix.com/trac/ticket/2026

[#2027] Provide some general information about the split in the t.protocols' docstring (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2027

[#2028] web2's docstring should indicate the stability of web2 (opened by jml)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2028

[#2029] Use a consistent style for docstrings (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2029

[#2030] twisted.web.trp's docstring is murky (opened by jml)
    defect          web        http://twistedmatrix.com/trac/ticket/2030

[#2034] Improper handling of properties with no namespace (opened by rfmohr at osc.edu)
    defect          web2       http://twistedmatrix.com/trac/ticket/2034

[#2035] twisted.internet.udp.Port implements twisted.internet.interfaces.IConsumer (opened by exarkun)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2035

[#2036] trial runs tests from .pyc files even if there is no .py file (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2036

[#2037] twisted.python.reflect.namedAny depends on undocumented import implementation details (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2037

[#2039] Wrong namespace assigned to properties (opened by rfmohr at osc.edu)
    defect          web2       http://twistedmatrix.com/trac/ticket/2039

[#2041] web2.auth.wrapper.HTTPAuthResource mis-handles URL path (opened by rfmohr at osc.edu)
    defect          web2       http://twistedmatrix.com/trac/ticket/2041

[#2043] defgen would be better without waitForDeferred (opened by ghazel)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2043

[#2046] remove license duplication from web2.dav if possible, add note if not (opened by glyph)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2046

[#2047] use regular class statements in web2.dav, remove bindMethods (opened by glyph)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2047

[#2048] In twisted.web2 the fileupload.parseMultipartFormData function has an unoverideable keyword argument (opened by fade)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2048

[#2049] web2/fileupload.py parseMultipartFormData has unoverideable default keyword arguments (opened by fade)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2049

[#2050] funcion parseMultipartFormData in web2/fileupload.py has unalterable default keword args (opened by fade)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2050

[#2053] twisted.test.test_import is redundant (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2053

[#2054] ProperlyCloseFilesTestCase.testProperlyCloseFiles written in an aggressively stupid manner (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2054

[#2055] twisted.test.test_ssl.SpammyTLSTestCase exercises codepaths with warnings without suppressing them (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2055

[#2056] twisted.test.test_internet.ReactorCoreTestCase defines a timeout method which conflicts with trial's timeout attribute (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2056

[#2057] twisted.conch.test.test_ssh.UtilityTestCase.testCounter relies on deprecated wrapping behavior of struct module (opened by exarkun)
    defect          conch      http://twistedmatrix.com/trac/ticket/2057

                    ===== Low =====
[#2031] "setup.py clean" does not remove all files after build (opened by rfmohr at osc.edu)
    enhancement     release management http://twistedmatrix.com/trac/ticket/2031

[#2032] "setup.py clean" does not remove all files after build (opened by rfmohr at osc.edu) (CLOSED, duplicate)
    enhancement     release management http://twistedmatrix.com/trac/ticket/2032

[#2038] Make the pypy builder work (opened by jerub)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2038



Closed Bugs
______________________
                    ===== Highest =====
[#2019] t.w.p.msn does not properly execute errbacks when an error packet is received (opened by habnabit, closed by spiv, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/2019

[#1922] make twistd pluggable, nerf mktap (opened by tjs, closed by radix, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1922

[#2002] t.i.unix.Port fails on bound incoming unix sockets (opened by ghazel, closed by alus, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2002

[#2040] SSL echo client example incorrectly stops the reactor multiple times (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2040

                    ===== Normal =====
[#2013] Deprecate mktap and document usage of Twisted Application Plugins with twistd (opened by radix, closed by radix, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2013

                    ===== Low =====
[#2032] "setup.py clean" does not remove all files after build (opened by rfmohr at osc.edu, closed by exarkun, duplicate)
    enhancement     release management http://twistedmatrix.com/trac/ticket/2032





From etaoinbe at yahoo.com  Mon Sep  4 08:10:16 2006
From: etaoinbe at yahoo.com (f rom)
Date: Mon, 4 Sep 2006 05:10:16 -0700 (PDT)
Subject: [Twisted-Python] how to scp with twisted?
Message-ID: <20060904121017.14088.qmail@web50910.mail.yahoo.com>

hi, can you point me to a sample or whatever on how to
implement "scp" secure file copy with twisted for
python on windows ?

thanx

Joe

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From manlio_perillo at libero.it  Mon Sep  4 12:02:51 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 04 Sep 2006 18:02:51 +0200
Subject: [Twisted-Python] callLater
Message-ID: <44FC4E2B.2080801@libero.it>

Hi.

I need to implement a function for scheduling function calls at specific
times.

A simple implementation is:

def callAt(when):
    from twisted.internet import reactor

    delta = when - datetime.now()
    delay = delta.days * 24 * 3600 + delta.seconds + delta.microseconds
/ 1000000.

    return reactor.callLater(delay)


However I'm going to have lots of this scheduled calls, many of these
are far away in the future.

Can this be a problem?

An alternative implementation is to use LoopingCall that, say, every 15
minutes, check the scheduled functions.
Here I can think of some optimization, to avoid a linear search.


Thanks  Manlio Perillo



From exarkun at divmod.com  Mon Sep  4 12:08:44 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 4 Sep 2006 12:08:44 -0400
Subject: [Twisted-Python] callLater
In-Reply-To: <44FC4E2B.2080801@libero.it>
Message-ID: <20060904160844.1717.1864548135.divmod.quotient.38962@ohm>

On Mon, 04 Sep 2006 18:02:51 +0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>Hi.
>
>I need to implement a function for scheduling function calls at specific
>times.
>
>A simple implementation is:
>
>def callAt(when):
>    from twisted.internet import reactor
>
>    delta = when - datetime.now()
>    delay = delta.days * 24 * 3600 + delta.seconds + delta.microseconds
>/ 1000000.
>
>    return reactor.callLater(delay)
>
>
>However I'm going to have lots of this scheduled calls, many of these
>are far away in the future.
>
>Can this be a problem?

Profile your application and find out.  Anything else you do is premature
optimization and a waste of time.

Jean-Paul



From manlio_perillo at libero.it  Mon Sep  4 12:26:59 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 04 Sep 2006 18:26:59 +0200
Subject: [Twisted-Python] callLater
In-Reply-To: <20060904160844.1717.1864548135.divmod.quotient.38962@ohm>
References: <20060904160844.1717.1864548135.divmod.quotient.38962@ohm>
Message-ID: <44FC53D3.8000300@libero.it>

First of all, the subject should have been "callAt" and not callLater,
sorry.

Jean-Paul Calderone ha scritto:
> On Mon, 04 Sep 2006 18:02:51 +0200, Manlio Perillo
> <manlio_perillo at libero.it> wrote:
>> Hi.
>>
>> I need to implement a function for scheduling function calls at specific
>> times.
>>
>> A simple implementation is:
>>
>> def callAt(when):
>>    from twisted.internet import reactor
>>
>>    delta = when - datetime.now()
>>    delay = delta.days * 24 * 3600 + delta.seconds + delta.microseconds
>> / 1000000.
>>
>>    return reactor.callLater(delay)
>>
>>
>> However I'm going to have lots of this scheduled calls, many of these
>> are far away in the future.
>>
>> Can this be a problem?
> 
> Profile your application and find out.  Anything else you do is premature
> optimization and a waste of time.
> 

I don't think this is a premature optimization.
I'm just considering two different implementations.

I whould like to know if someone is using thousands instances of
DelayedCall without having problems.


However only now I'm noting that the reactor uses the heapq module, so
there should be no performance problems.


Thanks and regards  Manlio Perillo



From therve at free.fr  Mon Sep  4 12:24:29 2006
From: therve at free.fr (Thomas HERVE)
Date: Mon, 04 Sep 2006 18:24:29 +0200
Subject: [Twisted-Python] callLater
In-Reply-To: <44FC4E2B.2080801@libero.it>
References: <44FC4E2B.2080801@libero.it>
Message-ID: <20060904182429.vpwohj1tgco8so00@itchy.wasabout.net>

Quoting Manlio Perillo <manlio_perillo at libero.it>:

> Hi.

Hi,

> I need to implement a function for scheduling function calls at specific
> times.
>
> [snip]
>
> However I'm going to have lots of this scheduled calls, many of these
> are far away in the future.
>
> Can this be a problem?

The real problem of this kind of solution is the lost of data if you 
restart your application. If your 'far away in the future' is 6 months, 
I won't expect my server to run 6 months (not for reliability reason, 
but a change of configuration for example, or a new feature of my app). 
So you have to store the scheduled calls somewhere.

For the use of callLater, like Jean-Paul said you should try and see if 
it works for you. If you already store your calls somewhere it won't be 
hard to make a simple scheduler with a tick function.

-- 
Thomas


----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.




From manlio_perillo at libero.it  Mon Sep  4 12:45:14 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 04 Sep 2006 18:45:14 +0200
Subject: [Twisted-Python] callLater
In-Reply-To: <20060904182429.vpwohj1tgco8so00@itchy.wasabout.net>
References: <44FC4E2B.2080801@libero.it>
	<20060904182429.vpwohj1tgco8so00@itchy.wasabout.net>
Message-ID: <44FC581A.5080709@libero.it>

Thomas HERVE ha scritto:
> Quoting Manlio Perillo <manlio_perillo at libero.it>:
> 
>> Hi.
> 
> Hi,
> 
>> I need to implement a function for scheduling function calls at specific
>> times.
>>
>> [snip]
>>
>> However I'm going to have lots of this scheduled calls, many of these
>> are far away in the future.
>>
>> Can this be a problem?
> 
> The real problem of this kind of solution is the lost of data if you
> restart your application. If your 'far away in the future' is 6 months,
> I won't expect my server to run 6 months (not for reliability reason,
> but a change of configuration for example, or a new feature of my app).
> So you have to store the scheduled calls somewhere.
> 

I'm implementing a simple calendar (using IETF icalendar as a reference).

What I need to schedule are the alarms.
Alarm data is stored in a relational database.

So, every time the server starts, it can read alarm data from the
database and do the scheduling job.

> For the use of callLater, like Jean-Paul said you should try and see if
> it works for you. If you already store your calls somewhere it won't be
> hard to make a simple scheduler with a tick function.
> 

Ok.
For now I'm going to use callLater.



Thanks and regards  Manlio Perillo



From mmcnett at cs.ucsd.edu  Mon Sep  4 14:02:57 2006
From: mmcnett at cs.ucsd.edu (Marvin McNett)
Date: Mon, 04 Sep 2006 11:02:57 -0700
Subject: [Twisted-Python] PB auth with LDAP
Message-ID: <44FC6A51.6090407@cs.ucsd.edu>

Hi,

Just noticed that PB's _PortalAuthChallenger implements 
IUsernameHashedPassword, IUsernameMD5Passwordauth, but not 
IUsernamePassword.  This requires that I store my passwords in plain 
text or MD5 hash, then fetch the password to do a comparison at login. 
However, this is inconvenient when storing passwords in LDAP.  First, 
LDAP doesn't like returning passwords (Unless you're requesting it as 
the database administrator).  Second, storing passwords in plain text or 
even as MD5 hashes is less than ideal.  Finally, LDAP already has a 
comparison operation (which I can do with minimal privileges), so I 
should never need to actually fetch the password.

All this means that it would be very convenient for 
_PortalAuthChallenger to also implement IUsernamePassword (what's wrong 
with sending clear text passwords over SSL anyway?).  However, it's not 
clear to me how I'd go about overriding the current behavior.  I've 
tried the naive thing which is, in a separate file:

from twisted.cred import credentials
from twisted.spread.pb import *"

then overriding the _PortalRoot, _PortalWrapper, and 
_PortalAuthChallenger classes, and registering the alternate adapter. 
However, the "registerAdapter(_PortalRoot, Portal, IPBRoot)" comes back 
to bite me with:

   exceptions.ValueError: an adapter (twisted.spread.pb._PortalRoot) was 
already registered.

unless I comment it out in the actual twisted.spread.pb.py file.  Is 
there a way to unregister an adapter?  I'm sure there's a better way of 
doing this since I've seen mention of writing alternate login sequences, 
but I haven't been smart enough to figure it out.  Any help would be 
appreciated.

Thanks,
Marvin



From exarkun at divmod.com  Mon Sep  4 14:16:54 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 4 Sep 2006 14:16:54 -0400
Subject: [Twisted-Python] PB auth with LDAP
In-Reply-To: <44FC6A51.6090407@cs.ucsd.edu>
Message-ID: <20060904181654.1717.146591684.divmod.quotient.39069@ohm>

On Mon, 04 Sep 2006 11:02:57 -0700, Marvin McNett <mmcnett at cs.ucsd.edu> wrote:
>Hi,
>
> [snip]
>
>from twisted.cred import credentials
>from twisted.spread.pb import *"
>
>then overriding the _PortalRoot, _PortalWrapper, and _PortalAuthChallenger 
>classes, and registering the alternate adapter. However, the 
>"registerAdapter(_PortalRoot, Portal, IPBRoot)" comes back to bite me with:
>
>   exceptions.ValueError: an adapter (twisted.spread.pb._PortalRoot) was 
>already registered.
>
>unless I comment it out in the actual twisted.spread.pb.py file.  Is there a 
>way to unregister an adapter?  I'm sure there's a better way of doing this 
>since I've seen mention of writing alternate login sequences, but I haven't 
>been smart enough to figure it out.  Any help would be appreciated.

Instead of registering another adapter, instantiate your _PortalRoot class
directly and pass that to PBServerFactory.

Jean-Paul



From p.mayers at imperial.ac.uk  Mon Sep  4 16:35:01 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 04 Sep 2006 21:35:01 +0100
Subject: [Twisted-Python] how to scp with twisted?
In-Reply-To: <20060904121017.14088.qmail@web50910.mail.yahoo.com>
References: <20060904121017.14088.qmail@web50910.mail.yahoo.com>
Message-ID: <44FC8DF5.60706@imperial.ac.uk>

f rom wrote:
> hi, can you point me to a sample or whatever on how to
> implement "scp" secure file copy with twisted for
> python on windows ?

The very first hit for "twisted scp" on Google is a post containing code 
I wrote which does a simple copy remote -> local

http://twistedmatrix.com/pipermail/twisted-python/2005-December/012180.html

The scp "application" is basically:

  1. ssh in
  2. authenticate
  3. open a channel
  4. run the "scp" app on the channel
  5. communicate using the rcp protocol to "scp" stdin/stdout via the 
SSH channel

The rcp protocol is undocumented as far as I can tell, and I had to read 
the openssh and putty source codes to get even that far, but if you have 
a dig then implementing the other bits e.g. local -> remote, directory 
listings (for recursive copies) and so on should not be that hard.

HTH



From mmcnett at cs.ucsd.edu  Mon Sep  4 20:52:52 2006
From: mmcnett at cs.ucsd.edu (Marvin McNett)
Date: Mon, 04 Sep 2006 17:52:52 -0700
Subject: [Twisted-Python] PB auth with LDAP
In-Reply-To: <20060904181654.1717.146591684.divmod.quotient.39069@ohm>
References: <20060904181654.1717.146591684.divmod.quotient.39069@ohm>
Message-ID: <44FCCA64.3030802@cs.ucsd.edu>

Jean-Paul Calderone wrote:
> On Mon, 04 Sep 2006 11:02:57 -0700, Marvin McNett <mmcnett at cs.ucsd.edu> 
> wrote:
>> Hi,
>>
>> [snip]
>>
>> unless I comment it out in the actual twisted.spread.pb.py file.  Is 
>> there a way to unregister an adapter?  I'm sure there's a better way 
>> of doing this since I've seen mention of writing alternate login 
>> sequences, but I haven't been smart enough to figure it out.  Any help 
>> would be appreciated.
> 
> Instead of registering another adapter, instantiate your _PortalRoot class
> directly and pass that to PBServerFactory.
> 

Worked like a charm -- LDAP auth in PB without fetching passwords. Nice.

Thanks, Marvin



From l.allegrucci at gmail.com  Tue Sep  5 12:21:56 2006
From: l.allegrucci at gmail.com (Lorenzo Allegrucci)
Date: Tue, 05 Sep 2006 18:21:56 +0200
Subject: [Twisted-Python] twistd and passphrase
Message-ID: <1157473316.5101.7.camel@odyssey.lan>


Hi,

I'm using twistd to run my server as a daemon but I couldn't find a way
to prompt the user for a passphrase (such passphrase is used by the
server to read its SSL key).  I tried getpass() but it doesn't work
because /dev/stdin is already redirected to /dev/null.  How can I ask
for a passphrase using twistd?
Thank you





From mike at mkp.ca  Tue Sep  5 13:18:49 2006
From: mike at mkp.ca (Mike Pelletier)
Date: Tue, 5 Sep 2006 13:18:49 -0400
Subject: [Twisted-Python] twistd and passphrase
In-Reply-To: <1157473316.5101.7.camel@odyssey.lan>
References: <1157473316.5101.7.camel@odyssey.lan>
Message-ID: <200609051318.49688.mike@mkp.ca>

On Tuesday 05 September 2006 12:21, Lorenzo Allegrucci wrote:
> Hi,
>
> I'm using twistd to run my server as a daemon but I couldn't find a way
> to prompt the user for a passphrase (such passphrase is used by the
> server to read its SSL key).  I tried getpass() but it doesn't work
> because /dev/stdin is already redirected to /dev/null.  How can I ask
> for a passphrase using twistd?
> Thank you

Hi, Lorenzo.  I'm going to assume you are completely new to Twisted.  
Apologies if this is not so; just skip ahead 2-4 paragraphs.  Apologies also 
for my awkward writing.

Abstractly, the way to do this is to write a Protocol that uses a Transport to 
prompt the user and receive their response, and wire it all together with a 
Factory.  (Though in the case of stdio, the Factory is purely conceptual as 
explained below.)

A Protocol is responsible for the reading and writing of a connection, without 
concern for the exact nature of that connection.  A Transport is concerned 
with the nature of a connection without having to know anything about where 
the connection came from.  And a Factory is responsible for the creation of 
connections (either by originating or accepting them), creating the Transport 
object that will represent and manage that connection, and attaching a 
Protocol to the Transport.  Though I think that for your immediate purposes, 
you can ignore Factories, since when twisted starts up stdio is 
already "connected".

Less abstractly, what you need to do is instantiate 
twisted.internet.stdio.StandardIO, which is a Transport, passing the 
constructor an instance of your password-prompting Protocol.  In doing this, 
you are acting as the Factory by "accepting" the stdio connection, creating a 
Transport to deal with the connection, and associating the Transport with a 
Protocol.

As I said at the beginning, you will need to write the Protocol class 
yourself.  There is an example of a Protocol that uses the StandardIO 
Transport in twisted.test.process_twisted which you can use as a model.  I 
kinda think there already exists a Protocol that does what you need 
(including turning off character echoing, etc) but I cannot recall where I 
might have encountered it.  Perhaps someone else can help there.

If you want your server to be able to start up unattended (for instance, 
whenever the system is rebooted) you might want to consider using telnet or 
SSH rather than stdin for reading the password.  You should be able to re-use 
the same Protocol (except maybe for the part that turns off echoing).  You 
are never going to be able to read a password from stdin if twisted is 
starting up in daemon mode.  As you noticed, in daemon mode stdin has been 
closed before you have a chance to do anything with it.  You would instead 
have to start it in "foreground" mode, then read the password with your 
Protocol, and once the password has been validated ask twistd to switch to 
daemon mode.  (If indeed there even exists an interface for daemonizing after 
the fact; I've never looked.)  And of course, if you launch twistd in 
foreground mode from a boot script, the boot process will block until someone 
comes along and types the password, which is usually a Bad Thing.

Gosh, that was even an more awkward explanation than I'd expected.  I hope you 
manage to get something out of it.

Mike.



From sbernste at mitre.org  Tue Sep  5 18:25:21 2006
From: sbernste at mitre.org (Stan Benrsteen)
Date: Tue, 5 Sep 2006 18:25:21 -0400
Subject: [Twisted-Python] Newbie question
Message-ID: <EE2D05C3-84B4-42CA-A38E-FB4901F57B38@mitre.org>

Gentlemen:

I am trying to use the twisted perspective broker in a client that  
repeatedly makes remote calls to a twisted server.  I'm running a MAC  
OS X.

I create a client object, which calls reactor.connectTCP(), builds  
the deferred object to make the remote call, calls reactor.run().  A  
deferred callback eventually reactor.stop() and returns the correct  
answer.

Now I need to do this again, so I create a new client object, etc.,  
which goes through the same procedure and eventually call reactor.stop 
().  Again, I get the correct answer from the remote call, but the  
reactor keeps running.  In other words, the statements after the  
reactor.stop() execute, but the statement after reactor.run() is  
never reached.  The client hangs.

What am I overlooking??

-- perplexed





From exarkun at divmod.com  Tue Sep  5 18:49:32 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 5 Sep 2006 18:49:32 -0400
Subject: [Twisted-Python] Newbie question
In-Reply-To: <EE2D05C3-84B4-42CA-A38E-FB4901F57B38@mitre.org>
Message-ID: <20060905224932.1717.230399899.divmod.quotient.40286@ohm>

On Tue, 5 Sep 2006 18:25:21 -0400, Stan Benrsteen <sbernste at mitre.org> wrote:
>Gentlemen:
>
>I am trying to use the twisted perspective broker in a client that 
>repeatedly makes remote calls to a twisted server.  I'm running a MAC  OS X.
>
>I create a client object, which calls reactor.connectTCP(), builds  the 
>deferred object to make the remote call, calls reactor.run().  A  deferred 
>callback eventually reactor.stop() and returns the correct  answer.
>
>Now I need to do this again, so I create a new client object, etc.,  which 
>goes through the same procedure and eventually call reactor.stop ().  Again, 
>I get the correct answer from the remote call, but the  reactor keeps 
>running.  In other words, the statements after the  reactor.stop() execute, 
>but the statement after reactor.run() is  never reached.  The client hangs.
>
>What am I overlooking??
>

You cannot stop the reactor and then start it again.

Jean-Paul



From sbernste at mitre.org  Wed Sep  6 17:12:29 2006
From: sbernste at mitre.org (Stan Benrsteen)
Date: Wed, 6 Sep 2006 17:12:29 -0400
Subject: [Twisted-Python] Multiple client connections
Message-ID: <32505CBB-CC6F-4A3A-898D-37F296AB2542@mitre.org>

All,

I want to write a client that connects to a Twisted Server using pb.   
I want my client to make several connections. For example:

from twisted.spread import pb
from twisted.internet import defer

from twisted.internet.tcp import Connector
from twisted.internet import reactor
PORT = 8992

class ModelCalculator:
     def __init__(self, host, port):
         self.host = host
         self.port = port

     def add(self, a, b):
         self.factory = pb.PBClientFactory()
         deferred = self.factory.getRootObject()
         deferred.addCallback(self.connected, a, b)
         deferred.addErrback(self.failure)
         reactor.run()
         return self.result

     def connected(self, perspective, a, b):
         deferred = perspective.callRemote('calculate', a, b)
         deferred.addCallback(self.success, perspective)
         deferred.addErrback(self.failure)

     def success(self, result, perspective):
         self.result = result
         self.stopReactor()

     def failure(self, reason):
         self.result = None
         self.stopReactor()

     def stopReactor(self):
         reactor.stop()

if __name__ == '__main__':
     calculator = ModelCalculator("127.0.0.1", PORT)
     print calculator.add(4,5)
     print calculator.add(14,5)
     print calculator.add(24,5)
     print calculator.add(34,5)



As you see, I want to add many numbers and print out the result.   
This doesn't work because the reactor is been stopped in the  
stopReactor() method that is invoked in either success() or failure 
().  How can I change it so I can call my remote add() method many  
times without waiting for the reactor to be stopped? Is there a way  
that I can use the PB stuff without the reactor?

thanks,
/amn




From exarkun at divmod.com  Wed Sep  6 17:27:53 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 6 Sep 2006 17:27:53 -0400
Subject: [Twisted-Python] Multiple client connections
In-Reply-To: <32505CBB-CC6F-4A3A-898D-37F296AB2542@mitre.org>
Message-ID: <20060906212753.1717.376878495.divmod.quotient.41232@ohm>

On Wed, 6 Sep 2006 17:12:29 -0400, Stan Benrsteen <sbernste at mitre.org> wrote:
>All,
>
>I want to write a client that connects to a Twisted Server using pb.   I 
>want my client to make several connections. For example:
>
>from twisted.spread import pb
>from twisted.internet import defer
>
>from twisted.internet.tcp import Connector
>from twisted.internet import reactor
>PORT = 8992
>
>class ModelCalculator:
>     def __init__(self, host, port):
>         self.host = host
>         self.port = port
>
>     def add(self, a, b):
>         self.factory = pb.PBClientFactory()
>         deferred = self.factory.getRootObject()
>         deferred.addCallback(self.connected, a, b)
>         deferred.addErrback(self.failure)
>         reactor.run()
>         return self.result

Instead, use this definition of add:

    def add(self, a, b):
        self.factory = pb.PBClientFactory()
        deferred = self.factory.getRootObject()
        deferred.addCallback(self.connected, a, b)
        deferred.addErrback(self.failure)
        return deferred

>
>     def connected(self, perspective, a, b):
>         deferred = perspective.callRemote('calculate', a, b)
>         deferred.addCallback(self.success, perspective)
>         deferred.addErrback(self.failure)

And this definition of connected:

    def connected(self, perspective, a, b):
        return perspective.callRemote('calculate', a, b)

>
>     def success(self, result, perspective):
>         self.result = result
>         self.stopReactor()
>
>     def failure(self, reason):
>         self.result = None
>         self.stopReactor()
>
>     def stopReactor(self):
>         reactor.stop()
>

Now you don't need any of these methods.

>if __name__ == '__main__':
>     calculator = ModelCalculator("127.0.0.1", PORT)
>     print calculator.add(4,5)
>     print calculator.add(14,5)
>     print calculator.add(24,5)
>     print calculator.add(34,5)
>

Rewrite this as:

    def reportSums(sums):
        for s in sums:
            print s

    def reportFailure(err):
        err.printTraceback()

    if __name__ == '__main__':
        calls = []
        calculator = ModelCalculator("127.0.0.1", PORT)
        for sums in [(4, 5), (14, 5), (24, 5), (34, 5)]:
            calls.append(calculator.add(*sums))
        d = defer.gatherResults(sums)
        d.addCallbacks(reportSumsm, reportFailure)
        d.addCallback(lambda ignored: reactor.stop())
        reactor.run()

>
>
>As you see, I want to add many numbers and print out the result.   This 
>doesn't work because the reactor is been stopped in the  stopReactor() 
>method that is invoked in either success() or failure ().  How can I change 
>it so I can call my remote add() method many  times without waiting for the 
>reactor to be stopped? Is there a way  that I can use the PB stuff without 
>the reactor?

Deferreds are the abstraction Twisted provides for dealing with callbacks.
It provides this abstraction because Twisted applications use callbacks
/a lot/.  You won't be able to avoid using them.  You need to structure
your programs in the way I have demonstrated above.

Jean-Paul



From TimothyFitz at gmail.com  Thu Sep  7 10:39:27 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Thu, 7 Sep 2006 10:39:27 -0400
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
Message-ID: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>

Let me prefix this by the fact that I am in college and very very poor
at the moment. I have scrapped spare parts together to create a very
decent machine (Athlon 64 3000+), it's completely built but I could
not find anyone with spare ram.



From TimothyFitz at gmail.com  Thu Sep  7 10:40:58 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Thu, 7 Sep 2006 10:40:58 -0400
Subject: [Twisted-Python] Re: Windows Buildbot for DDR Ram
In-Reply-To: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
References: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
Message-ID: <972ec5bd0609070740t3663ec81lfb7be9a1da4703ef@mail.gmail.com>

Hooray for clicking "send" instead of "save now."

To finish what I was saying, if anyone has a half gig or more of DDR
ram to spare (PC 2700 or higher, anything is good) I'll have a fully
operational buildbot to replace the (broken? missing?) iocp buildbot.

On 9/7/06, Timothy Fitz <TimothyFitz at gmail.com> wrote:
> Let me prefix this by the fact that I am in college and very very poor
> at the moment. I have scrapped spare parts together to create a very
> decent machine (Athlon 64 3000+), it's completely built but I could
> not find anyone with spare ram.
>



From TimothyFitz at gmail.com  Thu Sep  7 11:41:48 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Thu, 7 Sep 2006 11:41:48 -0400
Subject: [Twisted-Python] Newbie question
In-Reply-To: <20060905224932.1717.230399899.divmod.quotient.40286@ohm>
References: <EE2D05C3-84B4-42CA-A38E-FB4901F57B38@mitre.org>
	<20060905224932.1717.230399899.divmod.quotient.40286@ohm>
Message-ID: <972ec5bd0609070841j6cd2a600o4c6db5567dffd790@mail.gmail.com>

On 9/5/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> You cannot stop the reactor and then start it again.

Why don't the reactors throw if this happens? This question comes up
almost once a month.



From jarrod at vertigrated.com  Thu Sep  7 13:01:12 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Thu, 7 Sep 2006 13:01:12 -0400
Subject: [Twisted-Python] LineReceiver and setRawMode()
Message-ID: <2389d4730609071001yd35dc47l4c9231cebe61b00f@mail.gmail.com>

I got a simple line protocol I am trying to implement, blocks .

CMD <byte count>\r\n
<payload>

when CMD 5\r\n

is received, I setRawMode()
and then inside of rawDataReceived() handle the blob

the problem is when my client sends the data and the next CMD line
gets eaten by the rawDataReceived() call before I can set it back to
lineMode().

so for something like

CMD 5\r\n
abcde
CMD 10\r\n
abcdefghij

after I get CMD 5\r\n
setRawMode()

inside rawDataReceived(data)
data = abcdeCMD 10\r\n

is there something in twisted that will help with this?
or do I need to subclass LineReceiver and add a
setRawMode(bytesToRead) or something?



From TimothyFitz at gmail.com  Thu Sep  7 13:20:34 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Thu, 7 Sep 2006 13:20:34 -0400
Subject: [Python-Dev] [Twisted-Python] Newbie question
In-Reply-To: <20060907160613.1717.1053187541.divmod.quotient.42002@ohm>
References: <972ec5bd0609070841j6cd2a600o4c6db5567dffd790@mail.gmail.com>
	<20060907160613.1717.1053187541.divmod.quotient.42002@ohm>
Message-ID: <972ec5bd0609071020r3897107apc645a8602b126fee@mail.gmail.com>

On 9/7/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> One could just as easily ask why no one bothers to read mailing list
> archives to see if their question has been answered before.

Is there a technical reason why they can't? If not I'm opening up a bug on it.



From therve at free.fr  Thu Sep  7 13:34:19 2006
From: therve at free.fr (Thomas HERVE)
Date: Thu, 07 Sep 2006 19:34:19 +0200
Subject: [Twisted-Python] LineReceiver and setRawMode()
In-Reply-To: <2389d4730609071001yd35dc47l4c9231cebe61b00f@mail.gmail.com>
References: <2389d4730609071001yd35dc47l4c9231cebe61b00f@mail.gmail.com>
Message-ID: <20060907193419.8p4pjrbfkgoocgs8@itchy.wasabout.net>

Quoting jarrod roberson <jarrod at vertigrated.com>:

> I got a simple line protocol I am trying to implement, blocks .
>
> [snip]
>
> inside rawDataReceived(data)
> data = abcdeCMD 10\r\n
>
> is there something in twisted that will help with this?
> or do I need to subclass LineReceiver and add a
> setRawMode(bytesToRead) or something?

What I've done in this case is something like this:

def rawDataReceived(self, data):
    self.buffer += data
    if len(self.buffer) >= self.lenExpected:
        buf = self.buffer[:self.lenExpected]
        rem = self.buffer[self.lenExpected:]
        doSometingWithBuff(buf)
        self.buffer = ""
        self.setLineMode()
        if rem:
            self.dataReceived(rem)

You need to set the variable self.lenExpected. You read the data and 
when you can all what you needed, you push it back again with 
dataReceived.

-- 
Thomas






----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.




From TimothyFitz at gmail.com  Thu Sep  7 14:08:13 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Thu, 7 Sep 2006 14:08:13 -0400
Subject: [Python-Dev] [Twisted-Python] Newbie question
In-Reply-To: <20060907160613.1717.1053187541.divmod.quotient.42002@ohm>
References: <972ec5bd0609070841j6cd2a600o4c6db5567dffd790@mail.gmail.com>
	<20060907160613.1717.1053187541.divmod.quotient.42002@ohm>
Message-ID: <972ec5bd0609071108k3f1f6d50id547cc7db8e4b283@mail.gmail.com>

On 9/7/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Thu, 7 Sep 2006 11:41:48 -0400, Timothy Fitz <timothyfitz at gmail.com> wrote:
> >Why don't the reactors throw if this happens? This question comes up
> >almost once a month.
> >
>
> One could just as easily ask why no one bothers to read mailing list
> archives to see if their question has been answered before.

Let me rephrase. Are there any technical reasons preventing
reactor.run() from throwing if started twice? Is there any reason
*not* to make this throw an exception?

Timothy Fitz



From exarkun at divmod.com  Thu Sep  7 14:25:59 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 7 Sep 2006 14:25:59 -0400
Subject: [Python-Dev] [Twisted-Python] Newbie question
In-Reply-To: <972ec5bd0609071108k3f1f6d50id547cc7db8e4b283@mail.gmail.com>
Message-ID: <20060907182559.1717.748564968.divmod.quotient.42079@ohm>

On Thu, 7 Sep 2006 14:08:13 -0400, Timothy Fitz <timothyfitz at gmail.com> wrote:
>On 9/7/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>>On Thu, 7 Sep 2006 11:41:48 -0400, Timothy Fitz <timothyfitz at gmail.com> 
>>wrote:
>> >Why don't the reactors throw if this happens? This question comes up
>> >almost once a month.
>> >
>>
>>One could just as easily ask why no one bothers to read mailing list
>>archives to see if their question has been answered before.
>
>Let me rephrase. Are there any technical reasons preventing
>reactor.run() from throwing if started twice? Is there any reason
>*not* to make this throw an exception?

Not really.

Jean-Paul



From foom at fuhm.net  Thu Sep  7 15:01:08 2006
From: foom at fuhm.net (James Y Knight)
Date: Thu, 7 Sep 2006 15:01:08 -0400
Subject: [Python-Dev] [Twisted-Python] Newbie question
In-Reply-To: <20060907182559.1717.748564968.divmod.quotient.42079@ohm>
References: <20060907182559.1717.748564968.divmod.quotient.42079@ohm>
Message-ID: <BC69EF55-B9A1-4A81-8200-74DE0C0079E0@fuhm.net>


On Sep 7, 2006, at 2:25 PM, Jean-Paul Calderone wrote:

>> Let me rephrase. Are there any technical reasons preventing
>> reactor.run() from throwing if started twice? Is there any reason
>> *not* to make this throw an exception?
>
> Not really.

It could also work. What's preventing it is that the shutdown  
triggers are cleared when the reactor stops, and some of the triggers  
are essential for the shutdown process, so the second time, it  
doesn't ever finish shutting down.

However, even though it'd be possible to fix, perhaps it is better to  
simply throw an exception on the second reactor.run(), since most  
people who do that shouldn't actually be running the reactor twice,  
they just didn't know the better thing to do yet.

James



From ppergame at gmail.com  Thu Sep  7 15:17:06 2006
From: ppergame at gmail.com (Pavel Pergamenshchik)
Date: Thu, 7 Sep 2006 12:17:06 -0700
Subject: [Twisted-Python] LineReceiver and setRawMode()
In-Reply-To: <20060907193419.8p4pjrbfkgoocgs8@itchy.wasabout.net>
References: <2389d4730609071001yd35dc47l4c9231cebe61b00f@mail.gmail.com>
	<20060907193419.8p4pjrbfkgoocgs8@itchy.wasabout.net>
Message-ID: <4a5c1b500609071217v5b919aabw56e59d9efe5f4a52@mail.gmail.com>

On 9/7/06, Thomas HERVE <therve at free.fr> wrote:
>
> Quoting jarrod roberson <jarrod at vertigrated.com>:
>
> > I got a simple line protocol I am trying to implement, blocks .
> >
> > [snip]
> >
> > inside rawDataReceived(data)
> > data = abcdeCMD 10\r\n
> >
> > is there something in twisted that will help with this?
> > or do I need to subclass LineReceiver and add a
> > setRawMode(bytesToRead) or something?
>
> What I've done in this case is something like this:
>
> def rawDataReceived(self, data):
>     self.buffer += data
>     if len(self.buffer) >= self.lenExpected:
>         buf = self.buffer[:self.lenExpected]
>         rem = self.buffer[self.lenExpected:]
>         doSometingWithBuff(buf)
>         self.buffer = ""
>         self.setLineMode()
>         if rem:
>             self.dataReceived(rem)
>
> You need to set the variable self.lenExpected. You read the data and
> when you can all what you needed, you push it back again with
> dataReceived.


setLineMode happens to take an optional argument for the remainder. You
should use that instead of calling dataReceived directly.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060907/33dd05fa/attachment.htm 

From glyph at divmod.com  Thu Sep  7 15:32:41 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 7 Sep 2006 15:32:41 -0400
Subject: [Python-Dev] [Twisted-Python] Newbie question
In-Reply-To: <BC69EF55-B9A1-4A81-8200-74DE0C0079E0@fuhm.net>
Message-ID: <20060907193241.1717.1098190683.divmod.quotient.42115@ohm>

On Thu, 7 Sep 2006 15:01:08 -0400, James Y Knight <foom at fuhm.net> wrote:

>However, even though it'd be possible to fix, perhaps it is better to 
>simply throw an exception on the second reactor.run(), since most  people 
>who do that shouldn't actually be running the reactor twice,  they just 
>didn't know the better thing to do yet.

I think that's a good idea.  Based on the nature of the questions that I've seen, I think that this would probably be a good idea even if we *did* have a restartable reactor.  Add an interface, IRestartableReactor, and require people who want to use it to call 'reactor.restart()'.  While this might not actually *do* anything, the conspicuous absence of it from any example code and a potentially useful error message from reactor.run would prevent the question from being asked repeatedly...



From TimothyFitz at gmail.com  Thu Sep  7 15:55:09 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Thu, 7 Sep 2006 15:55:09 -0400
Subject: [Python-Dev] [Twisted-Python] Newbie question
In-Reply-To: <20060907193241.1717.1098190683.divmod.quotient.42115@ohm>
References: <BC69EF55-B9A1-4A81-8200-74DE0C0079E0@fuhm.net>
	<20060907193241.1717.1098190683.divmod.quotient.42115@ohm>
Message-ID: <972ec5bd0609071255m33163df9t13dcaefc3027f61a@mail.gmail.com>

On 9/7/06, glyph at divmod.com <glyph at divmod.com> wrote:
> On Thu, 7 Sep 2006 15:01:08 -0400, James Y Knight <foom at fuhm.net> wrote:
>
> >However, even though it'd be possible to fix, perhaps it is better to
> >simply throw an exception on the second reactor.run(), since most  people
> >who do that shouldn't actually be running the reactor twice,  they just
> >didn't know the better thing to do yet.
>
> I think that's a good idea.  Based on the nature of the questions that I've seen, I think that this would probably be a good idea even if we *did* have a restartable reactor.  Add an interface, IRestartableReactor, and require people who want to use it to call 'reactor.restart()'.  While this might not actually *do* anything, the conspicuous absence of it from any example code and a potentially useful error message from reactor.run would prevent the question from being asked repeatedly...

I've added this to the tracker
[http://twistedmatrix.com/trac/ticket/2066], further discussion should
probably be taken there.



From l.allegrucci at gmail.com  Thu Sep  7 16:39:05 2006
From: l.allegrucci at gmail.com (Lorenzo Allegrucci)
Date: Thu, 07 Sep 2006 22:39:05 +0200
Subject: [Twisted-Python] twistd and passphrase
In-Reply-To: <200609051318.49688.mike@mkp.ca>
References: <1157473316.5101.7.camel@odyssey.lan>
	<200609051318.49688.mike@mkp.ca>
Message-ID: <1157661545.4683.65.camel@odyssey.lan>

On Tue, 2006-09-05 at 13:18 -0400, Mike Pelletier wrote: 
> On Tuesday 05 September 2006 12:21, Lorenzo Allegrucci wrote:
> > Hi,
> >
> > I'm using twistd to run my server as a daemon but I couldn't find a way
> > to prompt the user for a passphrase (such passphrase is used by the
> > server to read its SSL key).  I tried getpass() but it doesn't work
> > because /dev/stdin is already redirected to /dev/null.  How can I ask
> > for a passphrase using twistd?
> > Thank you
> 
> Hi, Lorenzo.  I'm going to assume you are completely new to Twisted.

Yes, I'm new to Twisted and I'm using it for a project of my degree
thesis :)
Your explanations have been very helpful and gave me some ideas, in the
meantime I post my actual code.  (non important parts taken away)

---myserver.py---
class SCF(ssl.ContextFactory):
    """Server context factory."""
    def __init__(self, passphraseCB, cacert, cert, key):
        self.passphraseCB = passphraseCB
        self.cacert = cacert
        self.cert = cert
        self.key = key  
        
    def verify(self, conn, cert, errnum, depth, ok):
        """Check the certificate of an incoming connection."""
        # snip...
        return ok
    
    def getContext(self):
        """Return an SSL context."""
        context = SSL.Context(SSL.TLSv1_METHOD)
        context.set_passwd_cb(self.passphraseCB)
        # snip...
        return context

class MyService(internet.SSLServer):
    def __init__(self):
        root = XMLRPCServer()
        
        key = config.getOption("SSL", "key")
        cert = config.getOption("SSL", "cert")
        cacert = config.getOption("SSL", "cacert") 
        port = config.getOption("daemon", "port")
        host = config.getOption("daemon", "host")
        
        context = SCF(self.getPassphraseCB, cacert, cert, key)
        internet.SSLServer.__init__(self, port, server.Site(root),
context,
                                     interface=host)
    
    def getPassphraseCB(self, repeat=False, *data):
        return "secret"

application = service.Application("MyApp")
myService = MyService()
myService.setServiceParent(application)
---myserver.py--


To start my daemon I use 'twistd -y myserver.py' and everything works
fine except for the fact that I have to "hardwire" the passphrase in
'getPassphraseCB'.
Of course this in not what I want and I would like to rewrite
getPassphraseCB as:

   def getPassphraseCB(self, repeat=False, *data):
        return self.passphrase

where self.passphrase should be set (somehow) _before_ twistd makes my
application a daemon, but I couldn't find a way to do it yet.

> You are never going to be able to read a password from stdin if twisted is 
> starting up in daemon mode.  As you noticed, in daemon mode stdin has been 
> closed before you have a chance to do anything with it.  You would instead 
> have to start it in "foreground" mode, then read the password with your 
> Protocol, and once the password has been validated ask twistd to switch to 
> daemon mode.

Exactly.

> (If indeed there even exists an interface for daemonizing after 
> the fact; I've never looked.)

Looking at the twistd.py source I would say no..





From exarkun at divmod.com  Thu Sep  7 17:40:02 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 7 Sep 2006 17:40:02 -0400
Subject: [Twisted-Python] twistd and passphrase
In-Reply-To: <1157661545.4683.65.camel@odyssey.lan>
Message-ID: <20060907214002.1717.1501014696.divmod.quotient.42192@ohm>

On Thu, 07 Sep 2006 22:39:05 +0200, Lorenzo Allegrucci <l.allegrucci at gmail.com> wrote:
>On Tue, 2006-09-05 at 13:18 -0400, Mike Pelletier wrote:
>> On Tuesday 05 September 2006 12:21, Lorenzo Allegrucci wrote:
>> > Hi,
>> >
>> > I'm using twistd to run my server as a daemon but I couldn't find a way
>> > to prompt the user for a passphrase (such passphrase is used by the
>> > server to read its SSL key).  I tried getpass() but it doesn't work
>> > because /dev/stdin is already redirected to /dev/null.  How can I ask
>> > for a passphrase using twistd?
>> > Thank you
>>
>> Hi, Lorenzo.  I'm going to assume you are completely new to Twisted.
>
>Yes, I'm new to Twisted and I'm using it for a project of my degree
>thesis :)
>Your explanations have been very helpful and gave me some ideas, in the
>meantime I post my actual code.  (non important parts taken away)
>
>---myserver.py---
>class SCF(ssl.ContextFactory):
>    """Server context factory."""
>    def __init__(self, passphraseCB, cacert, cert, key):
>        self.passphraseCB = passphraseCB
>        self.cacert = cacert
>        self.cert = cert
>        self.key = key
>
>    def verify(self, conn, cert, errnum, depth, ok):
>        """Check the certificate of an incoming connection."""
>        # snip...
>        return ok
>
>    def getContext(self):
>        """Return an SSL context."""
>        context = SSL.Context(SSL.TLSv1_METHOD)
>        context.set_passwd_cb(self.passphraseCB)
>        # snip...
>        return context
>
>class MyService(internet.SSLServer):
>    def __init__(self):
>        root = XMLRPCServer()
>
>        key = config.getOption("SSL", "key")
>        cert = config.getOption("SSL", "cert")
>        cacert = config.getOption("SSL", "cacert")
>        port = config.getOption("daemon", "port")
>        host = config.getOption("daemon", "host")
>
>        context = SCF(self.getPassphraseCB, cacert, cert, key)
>        internet.SSLServer.__init__(self, port, server.Site(root),
>context,
>                                     interface=host)
>
>    def getPassphraseCB(self, repeat=False, *data):
>        return "secret"

    def getPassphraseCB(self, repeat=False, *data):
        return passphrase

import getpass
passphrase = getpass.getpass()

>
>application = service.Application("MyApp")
>myService = MyService()
>myService.setServiceParent(application)
>---myserver.py--
>
>
>To start my daemon I use 'twistd -y myserver.py' and everything works
>fine except for the fact that I have to "hardwire" the passphrase in
>'getPassphraseCB'.
>Of course this in not what I want and I would like to rewrite
>getPassphraseCB as:
>
>   def getPassphraseCB(self, repeat=False, *data):
>        return self.passphrase
>
>where self.passphrase should be set (somehow) _before_ twistd makes my
>application a daemon, but I couldn't find a way to do it yet.
>
>> You are never going to be able to read a password from stdin if twisted is
>> starting up in daemon mode.  As you noticed, in daemon mode stdin has been
>> closed before you have a chance to do anything with it.  You would instead
>> have to start it in "foreground" mode, then read the password with your
>> Protocol, and once the password has been validated ask twistd to switch to
>> daemon mode.
>
>Exactly.
>
>> (If indeed there even exists an interface for daemonizing after
>> the fact; I've never looked.)
>
>Looking at the twistd.py source I would say no..
>

Jean-Paul



From manlio_perillo at libero.it  Thu Sep  7 18:07:31 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 08 Sep 2006 00:07:31 +0200
Subject: [Twisted-Python] twistd and passphrase
In-Reply-To: <1157661545.4683.65.camel@odyssey.lan>
References: <1157473316.5101.7.camel@odyssey.lan>	<200609051318.49688.mike@mkp.ca>
	<1157661545.4683.65.camel@odyssey.lan>
Message-ID: <45009823.4010109@libero.it>

Lorenzo Allegrucci ha scritto:
> [...]
> 
> To start my daemon I use 'twistd -y myserver.py' and everything works
> fine except for the fact that I have to "hardwire" the passphrase in
> 'getPassphraseCB'.
> Of course this in not what I want and I would like to rewrite
> getPassphraseCB as:
> 
>    def getPassphraseCB(self, repeat=False, *data):
>         return self.passphrase
> 
> where self.passphrase should be set (somehow) _before_ twistd makes my
> application a daemon, but I couldn't find a way to do it yet.
> 


Just use twisted.python.util.getPassword(forceTTY=True).
However (I ignore why) in this way no prompt is written on the screen.

Note that getPassword does not return a deferred, so you should not call
it when the reactor is running (not sure about this).



Regards  Manlio Perillo



From speedy at nitroforce.eu  Mon Sep  4 15:57:36 2006
From: speedy at nitroforce.eu (Nick Rehm)
Date: Mon, 04 Sep 2006 21:57:36 +0200
Subject: [Twisted-Python] how to access irc.IRCClient.* from other classes
Message-ID: <1157399856.520.11.camel@speeda.tinyworlds.net>

Hello,
iam playing around with twisted.words.irc and come upon this what i dont
understand right now

Here is a small example.

everything is working fine except the msg that should be send to the
channel.

from twisted.internet import protocol, reactor
from twisted.words.protocols import irc

class somestuff:

 def test(self):
    self.test = mainirc()
    self.test.test("#someircchannel","hi")
    #what i want to access here is 
    #irc.IRCClient.msg

class mainirc(irc.IRCClient):

  nickname = "twistedtest"

  def test(self,channel,msg):
     print channel
     print msg
     hold = channel
     hold2 = msg
     self.msg(hold,hold2)

  def connectionMade(self):
     irc.IRCClient.connectionMade(self)
     self.bot = somestuff()

  def joined(self,channel):
     print "joined"
     self.bot.test()

  def signedOn(self):
    self.join("#someircchannel")

class mainircFactory(protocol.ClientFactory):

  protocol = mainirc

  def clientConnectionLost(self,connector,reason):
    connector.connect()

  def clientConnectFailed(self,connector,reason):
    reactor.stop()

if __name__ == '__main__':
   f = mainircFactory()
   reactor.connectTCP("irc.someircserver.org",6667,f)
   reactor.run()



speeda at speeda:~$ python twistedirc.py
joined
#someircchannel
hi
Traceback (most recent call last):
  File "/usr/lib/python2.4/site-packages/twisted/internet/tcp.py", line
348, in doRead
    return self.protocol.dataReceived(data)
  File
"/usr/lib/python2.4/site-packages/twisted/words/protocols/irc.py", line
1478, in dataReceived
    basic.LineReceiver.dataReceived(self, data.replace('\r', ''))
  File "/usr/lib/python2.4/site-packages/twisted/protocols/basic.py",
line 232, in dataReceived
    why = self.lineReceived(line)
  File
"/usr/lib/python2.4/site-packages/twisted/words/protocols/irc.py", line
1486, in lineReceived
    self.handleCommand(command, prefix, params)
--- <exception caught here> ---
  File
"/usr/lib/python2.4/site-packages/twisted/words/protocols/irc.py", line
1498, in handleCommand
    method(prefix, params)
  File
"/usr/lib/python2.4/site-packages/twisted/words/protocols/irc.py", line
1000, in irc_JOIN
    self.joined(channel)
  File "twistedirc.py", line 27, in joined
    self.bot.test()
  File "twistedirc.py", line 8, in test
    self.test.test("#tinyworlds","hi")
  File "twistedirc.py", line 19, in test
    self.msg(hold,hold2)
  File
"/usr/lib/python2.4/site-packages/twisted/words/protocols/irc.py", line
879, in msg
    self.sendLine(fmt % (message,))
  File
"/usr/lib/python2.4/site-packages/twisted/words/protocols/irc.py", line
572, in sendLine
    self._reallySendLine(line)
  File
"/usr/lib/python2.4/site-packages/twisted/words/protocols/irc.py", line
568, in _reallySendLine
    return basic.LineReceiver.sendLine(self, lowQuote(line) + '\r')
  File "/usr/lib/python2.4/site-packages/twisted/protocols/basic.py",
line 277, in sendLine
    return self.transport.write(line + self.delimiter)
exceptions.AttributeError: 'NoneType' object has no attribute 'write'

i hope someone can help me thanks in advance
Nick Rehm




From jml at mumak.net  Fri Sep  8 00:49:42 2006
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 8 Sep 2006 14:49:42 +1000
Subject: [Twisted-Python] how to access irc.IRCClient.* from other classes
In-Reply-To: <1157399856.520.11.camel@speeda.tinyworlds.net>
References: <1157399856.520.11.camel@speeda.tinyworlds.net>
Message-ID: <d06a5cd30609072149m7ecd6416j4fa0d68533123466@mail.gmail.com>

On 9/5/06, Nick Rehm <speedy at nitroforce.eu> wrote:
> Hello,
> iam playing around with twisted.words.irc and come upon this what i dont
> understand right now
>

You have to pass a reference to 'mainirc' to either 'somestuff' or 'test'. e.g.

class somestuff:
    def __init__(self, ircClient):
        self.ircClient = ircClient
    def test(self):
        self.ircClient.msg('foo')

class mainirc(irc.IRCClient):
...
    def connectionMade(self):
        irc.IRCClient.connectionMade(self)
        self.bot = somestuff(self)


Constructing a new instance of 'mainirc' won't work, because the new
instance won't be associated with a connection.

hope this helps,
jml



From mli at deform.com  Fri Sep  8 14:59:01 2006
From: mli at deform.com (Michael Li)
Date: Fri, 08 Sep 2006 14:59:01 -0400
Subject: [Twisted-Python] how to scp with twisted?
In-Reply-To: <44FC8DF5.60706@imperial.ac.uk>
References: <20060904121017.14088.qmail@web50910.mail.yahoo.com>
	<44FC8DF5.60706@imperial.ac.uk>
Message-ID: <4501BD75.6010500@deform.com>

Hi, Phil
I've looked at your code, it's very helpful.
I am not familiar with Twisted,
is it possible for you to show some code of
local -> remote and directory listings ?

I am very interested in directory listings, specially
in a Windows<->linux environment. I want to have something
like FileZilla, but I can program. More specific, the actual
location of files is on linux harddisk, the harddisk is
shared to Windows by Samba, from Windows, I want to know
the local path on linux. For example, X:\a_file.txt on Windows,
I want to get local path on linux, something like /home/a_file.txt.

Thank you very much in advance.

Best regards.
Michael Li


Phil Mayers wrote:
> f rom wrote:
> 
>> hi, can you point me to a sample or whatever on how to
>> implement "scp" secure file copy with twisted for
>> python on windows ?
> 
> 
> The very first hit for "twisted scp" on Google is a post containing code 
> I wrote which does a simple copy remote -> local
> 
> http://twistedmatrix.com/pipermail/twisted-python/2005-December/012180.html
> 
> The scp "application" is basically:
> 
>  1. ssh in
>  2. authenticate
>  3. open a channel
>  4. run the "scp" app on the channel
>  5. communicate using the rcp protocol to "scp" stdin/stdout via the SSH 
> channel
> 
> The rcp protocol is undocumented as far as I can tell, and I had to read 
> the openssh and putty source codes to get even that far, but if you have 
> a dig then implementing the other bits e.g. local -> remote, directory 
> listings (for recursive copies) and so on should not be that hard.
> 
> HTH
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

==========
This email message and any attachments are for the sole use of the intended recipients and may contain proprietary and/or confidential information which may be privileged or otherwise protected from disclosure. Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipients, please contact the sender by reply email and destroy the original message and any copies of the message as well as any attachments to the original message.




From l.allegrucci at gmail.com  Sat Sep  9 15:18:51 2006
From: l.allegrucci at gmail.com (Lorenzo Allegrucci)
Date: Sat, 09 Sep 2006 21:18:51 +0200
Subject: [Twisted-Python] twistd and passphrase
In-Reply-To: <20060907214002.1717.1501014696.divmod.quotient.42192@ohm>
References: <20060907214002.1717.1501014696.divmod.quotient.42192@ohm>
Message-ID: <1157829532.5106.5.camel@odyssey.lan>

On Thu, 2006-09-07 at 17:40 -0400, Jean-Paul Calderone wrote:
> >class MyService(internet.SSLServer):
> >    def __init__(self):
> >        root = XMLRPCServer()
> >
> >        key = config.getOption("SSL", "key")
> >        cert = config.getOption("SSL", "cert")
> >        cacert = config.getOption("SSL", "cacert")
> >        port = config.getOption("daemon", "port")
> >        host = config.getOption("daemon", "host")
> >
> >        context = SCF(self.getPassphraseCB, cacert, cert, key)
> >        internet.SSLServer.__init__(self, port, server.Site(root),
> >context,
> >                                     interface=host)
> >
> >    def getPassphraseCB(self, repeat=False, *data):
> >        return "secret"
> 
>     def getPassphraseCB(self, repeat=False, *data):
>         return passphrase
> 
> import getpass
> passphrase = getpass.getpass()

It works, thanks for your hint.





From exarkun at twistedmatrix.com  Sun Sep 10 01:05:02 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 10 Sep 2006 05:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1157864702.42.1043708460@twistedmatrix.com

Bug summary
______________________
Summary for 2006-09-03 through 2006-09-10
Bugs opened: 12    Bugs closed: 16  Total open bugs: 718 (-4)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       -3  |Highest:  -8          |Conch:     -1          
|Enhancement:  -2  |Normal:   +4          |Core:      -1          
|Task:         +1                         |Mail:      -2          
                                          |Pb:        -1          
                                          |Pydoctor:  +1          
                                          |Web:       +2          
                                          |Web2:      -2          
                                          |Website:   +1          
                                          |Words:     -1          


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2063] String exceptions are being raised in Twisted (opened by jerub)
    defect          core       http://twistedmatrix.com/trac/ticket/2063

[#2064] In twisted.application.internet 'new.classobj()' is used where 'type()' could be used. (opened by jerub)
    defect          core       http://twistedmatrix.com/trac/ticket/2064

[#2065] windows buildbot errors,  already imported failures (opened by scmikes)
    defect          core       http://twistedmatrix.com/trac/ticket/2065

                    ===== Normal =====
[#2058] Can't pass unicode URL to xmlrpc.Proxy (opened by yang) (CLOSED, duplicate)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2058

[#2059] Can't pass unicode URL to xmlrpc.Proxy (opened by yang)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2059

[#2060] Generic IAddress connect and listen methods. (opened by rwall)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2060

[#2061] _sslverify.py: Wrong use of param caCerts in OpenSSLCertificateOptions (opened by dq)
    defect          core       http://twistedmatrix.com/trac/ticket/2061

[#2062] Handle multiple-line headers in web/http.py (opened by kkinder)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2062

[#2066] Restarting a reactor should raise an exception (opened by TimothyFitz)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2066

[#2067] string formatting bug in "twisted.python.reflect.funcinfo" (opened by james.townson)
    defect          core       http://twistedmatrix.com/trac/ticket/2067

[#2068] tm.com's documentation should include links to svn (opened by jerub)
    task            website    http://twistedmatrix.com/trac/ticket/2068

[#2069] Make nevowwriter the default (opened by jml)
    enhancement     pydoctor   http://twistedmatrix.com/trac/ticket/2069



Closed Bugs
______________________
                    ===== Highest =====
[#2044] twisted.test.test_logfile.testNoPermission failing will break buildbot (opened by jerub, closed by stephen, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2044

[#1617] Move 'notes to self' documentation aimed at developers *only* into a separate workspace. (opened by hypatia, closed by exarkun, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1617

[#1046] xmlstream patch to get ready for TLS and SASL authenticators (opened by tofu, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/1046

[#2057] twisted.conch.test.test_ssh.UtilityTestCase.testCounter relies on deprecated wrapping behavior of struct module (opened by exarkun, closed by exarkun, fixed)
    defect          conch      http://twistedmatrix.com/trac/ticket/2057

[#2045] spelling error in _sslverify.OpenSSLCertificateOptions.__getstate__() (opened by dq, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2045

[#2051] test_imap uses deprecated Deferred.setTimeout (opened by exarkun, closed by exarkun, fixed)
    enhancement     mail       http://twistedmatrix.com/trac/ticket/2051

[#2055] twisted.test.test_ssl.SpammyTLSTestCase exercises codepaths with warnings without suppressing them (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2055

[#2056] twisted.test.test_internet.ReactorCoreTestCase defines a timeout method which conflicts with trial's timeout attribute (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2056

[#2022] ConnectionRefusedError's errno and strerror surprising on BSD/OSX (opened by dalke, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2022

[#2052] test_defer calls reactor.run() (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2052

[#1552] SMTP server doesn't support "AUTH <mechanism> <initial data>" for of authentication (opened by exarkun, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/1552

                    ===== Normal =====
[#2048] In twisted.web2 the fileupload.parseMultipartFormData function has an unoverideable keyword argument (opened by fade, closed by jerub, duplicate)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2048

[#2049] web2/fileupload.py parseMultipartFormData has unoverideable default keyword arguments (opened by fade, closed by jerub, duplicate)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2049

[#2058] Can't pass unicode URL to xmlrpc.Proxy (opened by yang, closed by yang, duplicate)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2058

[#2043] defgen would be better without waitForDeferred (opened by ghazel, closed by radix, wontfix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2043

[#133 ] Allow registration of adapters for PB serialization (opened by itamarst, closed by warner, fixed)
    enhancement     pb         http://twistedmatrix.com/trac/ticket/133





From glyph at divmod.com  Sun Sep 10 20:29:02 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 10 Sep 2006 20:29:02 -0400
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
In-Reply-To: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
Message-ID: <20060911002902.1717.209455672.divmod.quotient.45439@ohm>

On Thu, 7 Sep 2006 10:39:27 -0400, Timothy Fitz <timothyfitz at gmail.com> wrote:
>Let me prefix this by the fact that I am in college and very very poor
>at the moment. I have scrapped spare parts together to create a very
>decent machine (Athlon 64 3000+), it's completely built but I could
>not find anyone with spare ram.

I'd appreciate it if someone could find some RAM for Timothy.  The current IOCP buildbot is offline and likely to remain so for the forseeable future.  Even if we manage to get it back online it is still an ancient, slow machine.

Very few Twisted users, and even fewer developers, understand the IOCP code or run its tests on a regular basis, so the longer we go without a buildbot, the more likely it is that something will be fundamentally broken.



From dreid at dreid.org  Sun Sep 10 23:25:46 2006
From: dreid at dreid.org (David Reid)
Date: Sun, 10 Sep 2006 20:25:46 -0700
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
In-Reply-To: <20060911002902.1717.209455672.divmod.quotient.45439@ohm>
References: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
	<20060911002902.1717.209455672.divmod.quotient.45439@ohm>
Message-ID: <20060911032546.GA2558@dreid.org>

On Sun, Sep 10, 2006 at 08:29:02PM -0400, glyph at divmod.com wrote:
> On Thu, 7 Sep 2006 10:39:27 -0400, Timothy Fitz <timothyfitz at gmail.com> 
> wrote:
> >Let me prefix this by the fact that I am in college and very very poor
> >at the moment. I have scrapped spare parts together to create a very
> >decent machine (Athlon 64 3000+), it's completely built but I could
> >not find anyone with spare ram.

Email me some paypal information and I'll send you $50 it's not a lot
but it's all I can afford right now.  Hopefully some other people will
step up and help out too.

-David

-- 
"Usually the protocol is this: I appoint someone for a task,
which they are not qualified to do.  Then, they have to fight
a bear if they don't want to do it." -- Glyph Lefkowitz



From manlio_perillo at libero.it  Mon Sep 11 04:03:06 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 11 Sep 2006 10:03:06 +0200
Subject: [Twisted-Python] sshsimpleserver.py on Windows
Message-ID: <4505183A.3010100@libero.it>

I have tried to run the conch example sshsimpleserver on Windows, using
Putty as the client.

All works fine, but I can't see the echo data from the server in Putty.
Is this a client's problem?



Thanks  Manlio Perillo



From drakesmith at adelphia.net  Mon Sep 11 06:57:51 2006
From: drakesmith at adelphia.net (Drake Smith)
Date: Mon, 11 Sep 2006 06:57:51 -0400
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
In-Reply-To: <20060911032546.GA2558@dreid.org>
References: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
	<20060911002902.1717.209455672.divmod.quotient.45439@ohm>
	<20060911032546.GA2558@dreid.org>
Message-ID: <7.0.1.0.2.20060911065215.02b18550@adelphia.net>

At 11:25 PM 9/10/2006, you wrote:
>On Sun, Sep 10, 2006 at 08:29:02PM -0400, glyph at divmod.com wrote:
> > On Thu, 7 Sep 2006 10:39:27 -0400, Timothy Fitz <timothyfitz at gmail.com>
> > wrote:
> > >Let me prefix this by the fact that I am in college and very very poor
> > >at the moment. I have scrapped spare parts together to create a very
> > >decent machine (Athlon 64 3000+), it's completely built but I could
> > >not find anyone with spare ram.
>
>Email me some paypal information and I'll send you $50 it's not a lot
>but it's all I can afford right now.  Hopefully some other people will
>step up and help out too.
>
>-David
>
>--
>"Usually the protocol is this: I appoint someone for a task,
>which they are not qualified to do.  Then, they have to fight
>a bear if they don't want to do it." -- Glyph Lefkowitz

I will gladly send $50 as well. Please e-mail me PayPal information 
or a postal address.

--Drake




From exarkun at divmod.com  Mon Sep 11 08:12:37 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 11 Sep 2006 08:12:37 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18086 - Import minidom
 within a try/except to
 cause this not to break platforms without minidom.
In-Reply-To: <E1GMiOa-0002aE-00@wolfwood>
Message-ID: <20060911121237.1717.1445881463.divmod.quotient.45923@ohm>

On Mon, 11 Sep 2006 03:48:04 -0600, Stephen Thorne <stephen at wolfwood.twistedmatrix.com> wrote:
>Author: stephen
>Date: Mon Sep 11 03:48:03 2006
>New Revision: 18086
>
>Modified:
>   trunk/twisted/python/versions.py
>Log:
>Import minidom within a try/except to cause this not to break platforms without minidom.
>
>Author: Stephen Thorne
>Reviewer: jml
>Fixes: #2076
>

Tests?

Jean-Paul



From exarkun at divmod.com  Mon Sep 11 08:27:20 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 11 Sep 2006 08:27:20 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18086 - Import minidom
	within a try/except to
	cause this not to break platforms without minidom.
In-Reply-To: <20060911121237.1717.1445881463.divmod.quotient.45923@ohm>
Message-ID: <20060911122720.1717.1567239911.divmod.quotient.45936@ohm>

On Mon, 11 Sep 2006 08:12:37 -0400, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>On Mon, 11 Sep 2006 03:48:04 -0600, Stephen Thorne 
><stephen at wolfwood.twistedmatrix.com> wrote:
>>Author: stephen
>>Date: Mon Sep 11 03:48:03 2006
>>New Revision: 18086
>>
>>Modified:
>>   trunk/twisted/python/versions.py
>>Log:
>>Import minidom within a try/except to cause this not to break platforms 
>>without minidom.
>>
>>Author: Stephen Thorne
>>Reviewer: jml
>>Fixes: #2076
>
>Tests?

Also, this doesn't fix the PyPy buildslave problem that it claims to fix.

>
>Jean-Paul
>



From markus at bluegap.ch  Mon Sep 11 08:35:44 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Mon, 11 Sep 2006 14:35:44 +0200
Subject: [Twisted-Python] HTTP 302 instead of just delivering the content.
Message-ID: <45055820.6030505@bluegap.ch>

Hi,

I'm using twisted-web on port 8083 and apache as a reverse proxy on port 
80. I can connect to my domain on port 80 and the HTTP request gets 
forwarded to twisted correctly. Twisted also replies and I get the website.

But as soon as I click a link, the 8083 port appears in the URL. And 
according to tcpdump, it also got transfered via 8083. I figured Twisted 
replied with the following (my real domain replaced by some 'x'):

HTTP/1.1 302 Found
Date: Mon, 11 Sep 2006 12:22:57 GMT
Server: TwistedWeb/2.4.0+r17646
Content-type: text/html; charset=UTF-8
Location: http://www.xxxxxxxx.ch:8083/firma/
Transfer-Encoding: chunked

Why does it do that? The request sent was:

GET /firma HTTP/1.1
Host: www.xxxxxxxxx.ch
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.6) 
Gecko/20060728 Firefox/1.5.0.6 (Debian-1.5.dfsg+1.5.0.6-4)
....

The apache2 reverse proxy configuration part is:

RewriteRule ^(.*)$ http://localhost:8083$1 [P]

ProxyRequests Off
ProxyPreserveHost On

ProxyVia Off

<Proxy *>
	Order deny,allow
	Allow from all
</Proxy>


How can I tell twisted to not only accept requests on port 8083, but 
also serve those with Host: www.xxxxxxxxx.ch?

Regards

Markus



From TimothyFitz at gmail.com  Mon Sep 11 10:52:10 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Mon, 11 Sep 2006 10:52:10 -0400
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
In-Reply-To: <7.0.1.0.2.20060911065215.02b18550@adelphia.net>
References: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
	<20060911002902.1717.209455672.divmod.quotient.45439@ohm>
	<20060911032546.GA2558@dreid.org>
	<7.0.1.0.2.20060911065215.02b18550@adelphia.net>
Message-ID: <972ec5bd0609110752q4d42eaf6t8edbb2ea49647b70@mail.gmail.com>

Thank you, both of you! My paypal address is FireMoth at gmail.com (my
IRC nickname for those of you who know better than to step foot into
#twisted). Thanks to your contributions, the buildbot will have more
ram than my desktop (:



From sbernste at mitre.org  Mon Sep 11 11:11:58 2006
From: sbernste at mitre.org (Stan Benrsteen)
Date: Mon, 11 Sep 2006 11:11:58 -0400
Subject: [Twisted-Python] Newbie question
Message-ID: <FC7C234E-3D6E-4514-85A5-8711619DBEC4@mitre.org>

Gentlemen:

Thanks for all your responses.  I think a restartable reactor is a  
great idea!

In the meantime, here is what I am really trying to do.  I have a  
server running a perspective broker, doing its select loop.  I need  
to access that server from a client that is not in a select loop.   
The client wants to treat the server as if it were an ordinary rpc --  
make the call and get the response synchronously, and go away.  Then  
later on it will come back later and call the server again.

Is it possible to use twisted servers with "ordinary" clients?

-- perplexed



From dialtone at divmod.com  Mon Sep 11 11:32:24 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon, 11 Sep 2006 17:32:24 +0200
Subject: [Twisted-Python] Newbie question
In-Reply-To: <FC7C234E-3D6E-4514-85A5-8711619DBEC4@mitre.org>
Message-ID: <20060911153224.1717.2054261812.divmod.quotient.46086@ohm>

On Mon, 11 Sep 2006 11:11:58 -0400, Stan Benrsteen <sbernste at mitre.org> wrote:

>Is it possible to use twisted servers with "ordinary" clients?

nope :).

You should really use twisted also on the client side, it can work with all the major GUI toolkits available without many problems.



From dan.heidebrecht at gmail.com  Mon Sep 11 11:57:42 2006
From: dan.heidebrecht at gmail.com (Dan Heidebrecht)
Date: Mon, 11 Sep 2006 11:57:42 -0400
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
In-Reply-To: <972ec5bd0609110752q4d42eaf6t8edbb2ea49647b70@mail.gmail.com>
References: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
	<20060911002902.1717.209455672.divmod.quotient.45439@ohm>
	<20060911032546.GA2558@dreid.org>
	<7.0.1.0.2.20060911065215.02b18550@adelphia.net>
	<972ec5bd0609110752q4d42eaf6t8edbb2ea49647b70@mail.gmail.com>
Message-ID: <ac6817db0609110857l68a63e98n8701a3658e93cdc9@mail.gmail.com>

Hi,

How much more do you need?

On 9/11/06, Timothy Fitz <TimothyFitz at gmail.com> wrote:
> Thank you, both of you! My paypal address is FireMoth at gmail.com (my
> IRC nickname for those of you who know better than to step foot into
> #twisted). Thanks to your contributions, the buildbot will have more
> ram than my desktop (:
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From TimothyFitz at gmail.com  Mon Sep 11 12:18:11 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Mon, 11 Sep 2006 12:18:11 -0400
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
In-Reply-To: <972ec5bd0609110915j727e4b01t1367836df27de808@mail.gmail.com>
References: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
	<20060911002902.1717.209455672.divmod.quotient.45439@ohm>
	<20060911032546.GA2558@dreid.org>
	<7.0.1.0.2.20060911065215.02b18550@adelphia.net>
	<972ec5bd0609110752q4d42eaf6t8edbb2ea49647b70@mail.gmail.com>
	<ac6817db0609110857l68a63e98n8701a3658e93cdc9@mail.gmail.com>
	<972ec5bd0609110915j727e4b01t1367836df27de808@mail.gmail.com>
Message-ID: <972ec5bd0609110918g1ee08e8r30a0610447c82d45@mail.gmail.com>

At the moment I'm looking at 2x512MB Crucial ram from Newegg, which is
going to be $115 shipped[1]. The box could seriously use a new case
(the current one is missing the front panel and both side doors, and
is from an eMachines K6-250) which will be about $30[2]. Another $50
could easily be put to good use. Additionally I could bump up to 2x1GB
for $210[3], which would require another $100 donation.


[1] http://www.newegg.com/Product/Product.asp?Item=N82E16820146577
[2] http://www.newegg.com/Product/Product.asp?Item=N82E16811212030
[3] http://www.newegg.com/Product/Product.asp?Item=N82E16820146970

On 9/11/06, Dan Heidebrecht <dan.heidebrecht at gmail.com> wrote:
> Hi,
>
> How much more do you need?
>
> On 9/11/06, Timothy Fitz <TimothyFitz at gmail.com> wrote:
> > Thank you, both of you! My paypal address is FireMoth at gmail.com (my
> > IRC nickname for those of you who know better than to step foot into
> > #twisted). Thanks to your contributions, the buildbot will have more
> > ram than my desktop (:
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>



From glyph at divmod.com  Mon Sep 11 12:23:13 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 11 Sep 2006 12:23:13 -0400
Subject: [Twisted-Python] Newbie question
In-Reply-To: <FC7C234E-3D6E-4514-85A5-8711619DBEC4@mitre.org>
Message-ID: <20060911162313.1717.36717167.divmod.quotient.46128@ohm>

On Mon, 11 Sep 2006 11:11:58 -0400, Stan Benrsteen <sbernste at mitre.org> wrote:

>Thanks for all your responses.  I think a restartable reactor is a  great 
>idea!

I look forward to your patches :)

>Is it possible to use twisted servers with "ordinary" clients?

Yes, in the sense that you can easily connect a "regular" client to a Twisted server.  No, in the sense that you want, which is to say you shouldn't use a blocking client within the Twisted main loop.  However, as dialtone said, it should be easy enough to write a non-blocking client; twisted's client support is just as good as its server support :)



From terry at jon.es  Mon Sep 11 12:42:27 2006
From: terry at jon.es (Terry Jones)
Date: Mon, 11 Sep 2006 18:42:27 +0200
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
In-Reply-To: Your message at 12:18:11 on Monday, 11 September 2006
References: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
	<20060911002902.1717.209455672.divmod.quotient.45439@ohm>
	<20060911032546.GA2558@dreid.org>
	<7.0.1.0.2.20060911065215.02b18550@adelphia.net>
	<972ec5bd0609110752q4d42eaf6t8edbb2ea49647b70@mail.gmail.com>
	<ac6817db0609110857l68a63e98n8701a3658e93cdc9@mail.gmail.com>
	<972ec5bd0609110915j727e4b01t1367836df27de808@mail.gmail.com>
	<972ec5bd0609110918g1ee08e8r30a0610447c82d45@mail.gmail.com>
Message-ID: <17669.37363.893469.295889@terry-jones-computer.local>

Hi Timothy

| At the moment I'm looking at 2x512MB Crucial ram from Newegg, which is
| going to be $115 shipped[1]. The box could seriously use a new case (the
| current one is missing the front panel and both side doors, and is from an
| eMachines K6-250) which will be about $30[2]. Another $50 could easily be
| put to good use. Additionally I could bump up to 2x1GB for $210[3], which
| would require another $100 donation.

I'll happily put in $50. Send me mail to figure out the best way.

Regards,
Terry



From TimothyFitz at gmail.com  Mon Sep 11 13:33:40 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Mon, 11 Sep 2006 13:33:40 -0400
Subject: [Twisted-Python] Newbie question
In-Reply-To: <20060911162313.1717.36717167.divmod.quotient.46128@ohm>
References: <FC7C234E-3D6E-4514-85A5-8711619DBEC4@mitre.org>
	<20060911162313.1717.36717167.divmod.quotient.46128@ohm>
Message-ID: <972ec5bd0609111033q3d797a9cla3a5de2193725e60@mail.gmail.com>

On 9/11/06, glyph at divmod.com <glyph at divmod.com> wrote:
> However, as dialtone said, it should be easy enough to write a non-blocking client; twisted's client support is just as good as its server support :)

Of course, sometimes this isn't possible at all (you're embedded in a
closed source application, etc). The general answer is you need
twisted's loop running on another thread or in another process and you
need to make calls across this. A simple way is to spawn the reactor
in a separate thread (IIRC not all reactors are safe to run on a
thread other than the main one, check with someone more knowledgeable)
and use the threadsafe built-in queue to push requests across (you
just do a blocking pop on the "output" queue and you have the blocking
semantics you wish, but this part is optional). This isn't a common
use case for me, so there may be better or built-in ways of doing
this.

To summarize, Glyph and Dialtone are right, if you can rewrite you
definitely should, but if you can't there are ways around it.



From p.mayers at imperial.ac.uk  Mon Sep 11 14:56:35 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 11 Sep 2006 19:56:35 +0100
Subject: [Twisted-Python] HTTP 302 instead of just delivering the content.
In-Reply-To: <45055820.6030505@bluegap.ch>
References: <45055820.6030505@bluegap.ch>
Message-ID: <4505B163.900@imperial.ac.uk>

Markus Schiltknecht wrote:
> Hi,
> 
> I'm using twisted-web on port 8083 and apache as a reverse proxy on port 
> 80. I can connect to my domain on port 80 and the HTTP request gets 
> forwarded to twisted correctly. Twisted also replies and I get the website.
> 
> But as soon as I click a link, the 8083 port appears in the URL. And 
> according to tcpdump, it also got transfered via 8083. I figured Twisted 
> replied with the following (my real domain replaced by some 'x'):
> 
> HTTP/1.1 302 Found
> Date: Mon, 11 Sep 2006 12:22:57 GMT
> Server: TwistedWeb/2.4.0+r17646
> Content-type: text/html; charset=UTF-8
> Location: http://www.xxxxxxxx.ch:8083/firma/
> Transfer-Encoding: chunked
> 
> Why does it do that? The request sent was:
> 
> GET /firma HTTP/1.1
> Host: www.xxxxxxxxx.ch
> User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.6) 
> Gecko/20060728 Firefox/1.5.0.6 (Debian-1.5.dfsg+1.5.0.6-4)
> ....
> 
> The apache2 reverse proxy configuration part is:
> 
> RewriteRule ^(.*)$ http://localhost:8083$1 [P]
> 
> ProxyRequests Off
> ProxyPreserveHost On
> 
> ProxyVia Off
> 
> <Proxy *>
>     Order deny,allow
>     Allow from all
> </Proxy>
> 
> 
> How can I tell twisted to not only accept requests on port 8083, but 
> also serve those with Host: www.xxxxxxxxx.ch?

You need a vhostmonster

http://twistedmatrix.com/projects/web/documentation/howto/using-twistedweb.html#auto21



From p.mayers at imperial.ac.uk  Mon Sep 11 14:58:15 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 11 Sep 2006 19:58:15 +0100
Subject: [Twisted-Python] how to scp with twisted?
In-Reply-To: <4501BD75.6010500@deform.com>
References: <20060904121017.14088.qmail@web50910.mail.yahoo.com>
	<44FC8DF5.60706@imperial.ac.uk> <4501BD75.6010500@deform.com>
Message-ID: <4505B1C7.5060108@imperial.ac.uk>

Michael Li wrote:
> Hi, Phil
> I've looked at your code, it's very helpful.
> I am not familiar with Twisted,
> is it possible for you to show some code of
> local -> remote and directory listings ?

Sorry, I don't have any time to look at this at the moment





From ncesar at lunix.com.ar  Mon Sep 11 15:57:10 2006
From: ncesar at lunix.com.ar (Nicolas D. Cesar)
Date: Mon, 11 Sep 2006 16:57:10 -0300
Subject: [Twisted-Python] Support for ICMP ping?
Message-ID: <200609111657.11790.ncesar@lunix.com.ar>

I've been googling if there is any 'ICMP ping' support in Twisted. I've 
encounter ancient replies:

http://twistedmatrix.com/pipermail/twisted-python/2003-August/005542.html

I wonder if today is any ICMP support. I've tried to search the source 
tree[1], and doesn't seem.

My actual needs is creating a DeferredList with "ping-testers" for different 
IPs, just to check if there up or not. 

I know I can end up using twisted.internet.utils.getProcessOutput and calling 
ping, as I would normally do from command line. For other newbies as me in 
the same situation please read: 
http://twistedmatrix.com/users/moshez/talk.html and search 
for 'getProcessOutput' ;-)

Greetings,

[1] my search was:

--------------------------------------------------------------------
$ grep  -C3 -ir icmp *
internet/protocol.py-
internet/protocol.py-
internet/protocol.py-class AbstractDatagramProtocol:
internet/protocol.py:    """Abstract protocol for datagram-oriented 
transports, e.g. IP, ICMP, ARP, UDP."""
internet/protocol.py-
internet/protocol.py-    transport = None
internet/protocol.py-    numPorts = 0
--
internet/protocol.py-    def connectionRefused(self):
internet/protocol.py-        """Called due to error from write in connected 
mode.
internet/protocol.py-
internet/protocol.py:        Note this is a result of ICMP message generated 
by *previous*
internet/protocol.py-        write.
internet/protocol.py-        """
internet/protocol.py-
--------------------------------------------------------------------


--
Nicol?s D. C?sar <ncesar at lunix.com.ar>
Lunix S.R.L. -[ http://www.lunix.com.ar ]-
GnuPG Public Key: gpg --keyserver wwwkeys.pgp.net --recv-key 0x3606F3E6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060911/44c9ae4e/attachment.pgp 

From mcmillen at cs.cmu.edu  Mon Sep 11 16:10:32 2006
From: mcmillen at cs.cmu.edu (Colin McMillen)
Date: Mon, 11 Sep 2006 16:10:32 -0400
Subject: [Twisted-Python] Support for ICMP ping?
In-Reply-To: <200609111657.11790.ncesar@lunix.com.ar>
References: <200609111657.11790.ncesar@lunix.com.ar>
Message-ID: <20060911201032.GN4315@cs.cmu.edu>

FWIW, I wrote a Perl module called Net::Ping::External that used the
system 'ping' command to do ICMP ping on a variety of OSes.  'ping'
commands are remarkably different from platform to platform, in terms
of the arguments expected and the return values (IIRC win32 doesn't
return differently on success or failure so you actually need to parse
the output), so the purpose of N::P::E was to make a standard
cross-platform way of getting a useful result from the system ICMP
ping utilities.

The module supports Win32, Linux, BSD, Solaris (2.6 and 2.7 at least),
IRIX, and supposedly a bunch of other obscure systems (based on output
that I was given by a few of the Perl developers that had odd
platforms available.)

I've not look at or touched that code in years, but you might want to
look into it if you feel like writing a cross-platformish pinger for
Python.  (Google for Net::Ping::External and take any of the first 50
or so hits :))

- Colin

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 191 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060911/f671cee9/attachment.pgp 

From ncesar at lunix.com.ar  Mon Sep 11 16:24:48 2006
From: ncesar at lunix.com.ar (Nicolas D. Cesar)
Date: Mon, 11 Sep 2006 17:24:48 -0300
Subject: [Twisted-Python] Support for ICMP ping?
In-Reply-To: <20060911201032.GN4315@cs.cmu.edu>
References: <200609111657.11790.ncesar@lunix.com.ar>
	<20060911201032.GN4315@cs.cmu.edu>
Message-ID: <200609111724.51868.ncesar@lunix.com.ar>

El Lunes, 11 de Septiembre de 2006 17:10, Colin McMillen escribi?:
> FWIW, I wrote a Perl module called Net::Ping::External that used the
> system 'ping' command to do ICMP ping on a variety of OSes.

Thanks Colin for your reply. I'm not a very good Perl speaker and I must do 
this in Python, so probably I'll see Net::Ping::External as a future 
reference.

Greetings
-- 
Nicol?s D. C?sar <ncesar at lunix.com.ar>
Lunix S.R.L. -[ http://www.lunix.com.ar ]-
GnuPG Public Key: gpg --keyserver wwwkeys.pgp.net --recv-key 0x3606F3E6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060911/04ddf91d/attachment.pgp 

From mcmillen at cs.cmu.edu  Mon Sep 11 16:32:38 2006
From: mcmillen at cs.cmu.edu (Colin McMillen)
Date: Mon, 11 Sep 2006 16:32:38 -0400
Subject: [Twisted-Python] Support for ICMP ping?
In-Reply-To: <200609111724.51868.ncesar@lunix.com.ar>
References: <200609111657.11790.ncesar@lunix.com.ar>
	<20060911201032.GN4315@cs.cmu.edu>
	<200609111724.51868.ncesar@lunix.com.ar>
Message-ID: <20060911203238.GB25556@cs.cmu.edu>

On Mon, Sep 11, 2006 at 05:24:48PM -0300, Nicolas D. Cesar wrote:
> El Lunes, 11 de Septiembre de 2006 17:10, Colin McMillen escribi?:
> > FWIW, I wrote a Perl module called Net::Ping::External that used the
> > system 'ping' command to do ICMP ping on a variety of OSes.
> 
> Thanks Colin for your reply. I'm not a very good Perl speaker and I must do 
> this in Python, so probably I'll see Net::Ping::External as a future 
> reference.

That's mostly what I intended.  What I mean is, a bunch of people
already did the difficult work of reporting the arguments and outputs
to "ping" on their system, so reading the code should at least give
you an idea of how to write code that supports the systems you're
interested in supporting.  (Of course, most likely you only care about
one specific system, in which case you may as well make a throwaway
script with a shell command in it. :))

- Colin

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 191 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060911/063771f1/attachment.pgp 

From michael at miknet.net  Mon Sep 11 21:42:49 2006
From: michael at miknet.net (Michael Samuel)
Date: Tue, 12 Sep 2006 11:42:49 +1000
Subject: [Twisted-Python] Support for ICMP ping?
In-Reply-To: <200609111657.11790.ncesar@lunix.com.ar>
References: <200609111657.11790.ncesar@lunix.com.ar>
Message-ID: <1158025369.31866.14.camel@mikompaq.ipsystems.com.au>

On a similar note, I've been looking to implement OSPF in twisted (which
does multicast over IP protocol 89), and was wondering the best way to
bludgeon DatagramSocket into doing raw IP. (Preferably in a
cross-platform manner, but if it only works on Linux it'd suit my
purposes fine)  Any hints?

BTW, is there any interest in BGP around here?  I've implemented it as a
research project for work, and they've given me the go ahead to release
the source.

Oh, and to answer the original question... take a look at fping.  It's
output is designed to be parsed, and it scales really well.





From exarkun at divmod.com  Mon Sep 11 22:42:13 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 11 Sep 2006 22:42:13 -0400
Subject: [Twisted-Python] Support for ICMP ping?
In-Reply-To: <1158025369.31866.14.camel@mikompaq.ipsystems.com.au>
Message-ID: <20060912024213.1717.253566150.divmod.quotient.46616@ohm>

On Tue, 12 Sep 2006 11:42:49 +1000, Michael Samuel <michael at miknet.net> wrote:
>On a similar note, I've been looking to implement OSPF in twisted (which
>does multicast over IP protocol 89), and was wondering the best way to
>bludgeon DatagramSocket into doing raw IP. (Preferably in a
>cross-platform manner, but if it only works on Linux it'd suit my
>purposes fine)  Any hints?

You can't and shouldn't co-opt DatagramSocket for this.  Instead, add a new kind of transport, a raw socket.  This should be fairly straightforward and it would actually be a fairly useful addition to Twisted.

>
>BTW, is there any interest in BGP around here?  I've implemented it as a
>research project for work, and they've given me the go ahead to release
>the source.

It'd be neat.  I can't think of anything I'd personally be able to _do_
with it. :)

>
>Oh, and to answer the original question... take a look at fping.  It's
>output is designed to be parsed, and it scales really well.
>

I'll second this recommendation.  You need root privileges on most systems
to open an ICMPable socket anyway.  Running your whole process as root just
so you can ping some stuff is kind of unfortunate.

Jean-Paul



From markus at bluegap.ch  Tue Sep 12 04:41:16 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Tue, 12 Sep 2006 10:41:16 +0200
Subject: [Twisted-Python] HTTP 302 instead of just delivering the content.
In-Reply-To: <4505B163.900@imperial.ac.uk>
References: <45055820.6030505@bluegap.ch> <4505B163.900@imperial.ac.uk>
Message-ID: <450672AC.2040409@bluegap.ch>

Hi,

Phil Mayers wrote:
> You need a vhostmonster

Thank you, I didn't think about a vhostmonster, because I don't want to 
serve multiple vhosts. I only want to serve _one_ website. It gets 
accessed from different URLs, though.

As I'm using nevow, I think I have to use the nevow vhost thingie:

from nevow import appserver
from nevow import vhost

root = vhost.NameVirtualHost()

webroot = Website('sites')
webroot.putChild('xxxxxx.ch', root)
webroot.putChild('www.xxxxxx.ch', root)
site = appserver.NevowSite(webroot)
webserver = internet.TCPServer(8083, site)

application = service.Application('ulmann website')
webserver.setServiceParent(application)

But, that works as before: it still redirects to port 8083 instead of 
just ignoring the HTTP Host: Header field.

Can't I just tell twisted web to ignore that? Without VHostMonsters and 
stuff like that? IMHO twisted should not mind and just serve what it's 
told to serve on port 8083. And let apache do the reverse proxying.

Regards

Markus




From dreid at dreid.org  Tue Sep 12 10:25:29 2006
From: dreid at dreid.org (David Reid)
Date: Tue, 12 Sep 2006 07:25:29 -0700
Subject: [Twisted-Python] HTTP 302 instead of just delivering the content.
In-Reply-To: <450672AC.2040409@bluegap.ch>
References: <45055820.6030505@bluegap.ch> <4505B163.900@imperial.ac.uk>
	<450672AC.2040409@bluegap.ch>
Message-ID: <20060912142529.GA1271@dreid.org>

On Tue, Sep 12, 2006 at 10:41:16AM +0200, Markus Schiltknecht wrote:
> Hi,
> 
> Phil Mayers wrote:
> >You need a vhostmonster
> 
> Thank you, I didn't think about a vhostmonster, because I don't want to 
> serve multiple vhosts. I only want to serve _one_ website. It gets 
> accessed from different URLs, though.
> 
> As I'm using nevow, I think I have to use the nevow vhost thingie:
> 
> from nevow import appserver
> from nevow import vhost

Nevow has a VHostMonster.
 
> root = vhost.NameVirtualHost()
> 
> webroot = Website('sites')
> webroot.putChild('xxxxxx.ch', root)
> webroot.putChild('www.xxxxxx.ch', root)

What do you expect this to do?  

> site = appserver.NevowSite(webroot)
> webserver = internet.TCPServer(8083, site)
> 
> application = service.Application('ulmann website')
> webserver.setServiceParent(application)

See:
http://twistedmatrix.com/projects/web/documentation/howto/using-twistedweb.html#auto21
The usage is exactly the same for Nevow's VHostMonster.
 
> But, that works as before: it still redirects to port 8083 instead of 
> just ignoring the HTTP Host: Header field.
> 
> Can't I just tell twisted web to ignore that? Without VHostMonsters and 
> stuff like that? IMHO twisted should not mind and just serve what it's 
> told to serve on port 8083. And let apache do the reverse proxying.

It's an issue of URL generation from the request object.  There is no
good way to make the right thing just magically happen.  Because as
usual your right thing will be different from someone elses.
VHostMonster is an atrocity though, someone should seriously consider
backporting the *VHostURIRewrite resources in twisted.web2.vhost.

I'll go get the bear.

-David

-- 
"Usually the protocol is this: I appoint someone for a task,
which they are not qualified to do.  Then, they have to fight
a bear if they don't want to do it." -- Glyph Lefkowitz



From markus at bluegap.ch  Tue Sep 12 10:51:46 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Tue, 12 Sep 2006 16:51:46 +0200
Subject: [Twisted-Python] HTTP 302 instead of just delivering the content.
In-Reply-To: <20060912142529.GA1271@dreid.org>
References: <45055820.6030505@bluegap.ch>
	<4505B163.900@imperial.ac.uk>	<450672AC.2040409@bluegap.ch>
	<20060912142529.GA1271@dreid.org>
Message-ID: <4506C982.1030505@bluegap.ch>

David Reid wrote:
> Nevow has a VHostMonster.

Yes. So?

>> webroot = Website('sites')
>> webroot.putChild('xxxxxx.ch', root)
>> webroot.putChild('www.xxxxxx.ch', root)
> 
> What do you expect this to do?

the same as root.addHost() in the twisted VHostMonster.

> See:
> http://twistedmatrix.com/projects/web/documentation/howto/using-twistedweb.html#auto21
> The usage is exactly the same for Nevow's VHostMonster.

Hm.. I've tried that but didn't manage to get twisted to correctly 
answer HTTP requests anymore. Thus I've been googling and figured out, 
that Nevow didn't work well with the VHostMonster and thus provides it's 
own.

Anyway, the code in the docu is:

root = vhost.NameVirtualHost()
root.addHost(vhostName, reverseProxy)
site = server.Site(root)
application = service.Application('web-proxy')
sc = service.IServiceCollection(application)
i = internet.TCPServer(80, site)
i.setServiceParent(sc)

Now, I don't have a reverseProxy, but a NevowSite(). Unfortunately 
that's a 'Site' and not a 'Resource' (whatever the exact difference is).

> It's an issue of URL generation from the request object.

Where does twisted need to generate a URL? I'm even mostly using 
relative links, AFAICR...

Regards

Markus



From exarkun at divmod.com  Tue Sep 12 11:41:15 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 12 Sep 2006 11:41:15 -0400
Subject: [Twisted-Python] HTTP 302 instead of just delivering the content.
In-Reply-To: <4506C982.1030505@bluegap.ch>
Message-ID: <20060912154115.1717.831975987.divmod.quotient.47102@ohm>

This discussion would be more appropriate on the twisted-web mailing list.

Jean-Paul



From ncesar at lunix.com.ar  Tue Sep 12 15:20:25 2006
From: ncesar at lunix.com.ar (Nicolas D. Cesar)
Date: Tue, 12 Sep 2006 16:20:25 -0300
Subject: [Twisted-Python] Support for ICMP ping?
In-Reply-To: <20060912024213.1717.253566150.divmod.quotient.46616@ohm>
References: <20060912024213.1717.253566150.divmod.quotient.46616@ohm>
Message-ID: <200609121620.25283.ncesar@lunix.com.ar>

El Lunes, 11 de Septiembre de 2006 23:42, Jean-Paul Calderone escribi?:
> I'll second this recommendation. ?You need root privileges on most systems
> to open an ICMPable socket anyway. ?Running your whole process as root just
> so you can ping some stuff is kind of unfortunate.

Thanks Jean-Paul for the reply. 

Yes, i'm aware of that,  but in my case, I need to run my application as root 
anyway because im using ip_queue to filter dhcp packets, and only root can do 
that.

So I was asking if there is any plans of expanding twisted, so a root-capable 
twisted application could ping the world!

I have little python and twisted skills , but if there is interest I could 
help in the develop.

Greetings,

BTW, the application I'm developing (and all my work actually) is released as 
Free Software. If anyone is interested in having it, just mail me or wait 
until I put a nice-little-project page on-line.

As allways: Pardon my English.
-- 
Nicol?s D. C?sar <ncesar at lunix.com.ar>
Lunix S.R.L. -[ http://www.lunix.com.ar ]-
GnuPG Public Key: gpg --keyserver wwwkeys.pgp.net --recv-key 0x3606F3E6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060912/185dedb3/attachment.pgp 

From exarkun at divmod.com  Tue Sep 12 18:10:38 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 12 Sep 2006 18:10:38 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18104 - Some systems raise
 an OSError with
 EPERM rather than an IOError with EACCES for filesystem permissions
 errors.
In-Reply-To: <E1GNGRh-0003PF-00@wolfwood>
Message-ID: <20060912221038.1717.1002966027.divmod.quotient.47399@ohm>

On Tue, 12 Sep 2006 16:09:33 -0600, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
>Author: wsanchez
>Date: Tue Sep 12 16:09:31 2006
>New Revision: 18104
>
>Modified:
>   trunk/twisted/web2/dav/http.py
>Log:
>Some systems raise an OSError with EPERM rather than an IOError with EACCES for filesystem permissions errors.
>Submitted by rfmohr at osc.edu
>Reviewed by wsanchez
>Fixes #1807
>
>
>Modified: trunk/twisted/web2/dav/http.py
>==============================================================================
>--- trunk/twisted/web2/dav/http.py	(original)
>+++ trunk/twisted/web2/dav/http.py	Tue Sep 12 16:09:31 2006
>@@ -262,9 +262,9 @@
>         if what is not None:
>             log.msg("%s while %s" % (err, what))
>
>-    if failure.check(IOError):
>+    if failure.check(IOError, OSError):
>         e = failure.value[0]
>-        if e == errno.EACCES:
>+        if e == errno.EACCES or e == errno.EPERM:
>             msg("Permission denied")
>             return responsecode.FORBIDDEN
>         elif e == errno.ENOSPC:
>

Tests?

Jean-Paul




From twisted-python at 2xlp.com  Tue Sep 12 21:10:26 2006
From: twisted-python at 2xlp.com (Jonathan)
Date: Tue, 12 Sep 2006 21:10:26 -0400
Subject: [Twisted-Python] mechanize in twisted ?
In-Reply-To: <dbeb95830608070005m23437041h9c9d880139d54aec@mail.gmail.com>
References: <dbeb95830608070005m23437041h9c9d880139d54aec@mail.gmail.com>
Message-ID: <D1BAAA71-D133-47B0-95FF-3D3530009FA3@2xlp.com>

I've got a job-queue process implemented twisted that interfaces with  
Postgres and occasionally downloads some urls

To handle the URLs, I'm using mechanize.  I know that twisted.web1  
has the client, but it seems to be not actively maintained, and  
there's no client in twisted.web2.  mechanize is actively maintained  
and has a bunch of features that I like, so its a win win situation.

except for timeouts

mechanize doesn't have a timeout of its own.  its using a global  
timeout , i think its using the default python socket timeout, and  
there isn't any override available. a 60s timeout doesn't work for  
me.  i need 10s-- but i can't change the global timeout , as its in a  
long running process and I don't want to interfere with any of my  
other tasks.

so I'm thinking that I somehow wrap mechanize and toss it into the  
event loop.

rather than spend a few hours reinventing the wheel, i figure someone  
here *might* have done this before and can offer a pointer.  anyone?



From moe at divmod.com  Tue Sep 12 22:48:02 2006
From: moe at divmod.com (Moe Aboulkheir)
Date: Wed, 13 Sep 2006 04:48:02 +0200
Subject: [Twisted-Python] mechanize in twisted ?
In-Reply-To: <D1BAAA71-D133-47B0-95FF-3D3530009FA3@2xlp.com>
Message-ID: <20060913024802.1717.1583484354.divmod.quotient.47611@ohm>



On Tue, 12 Sep 2006 21:10:26 -0400, Jonathan <twisted-python at 2xlp.com> wrote:
>I've got a job-queue process implemented twisted that interfaces with 
>Postgres and occasionally downloads some urls
>
>To handle the URLs, I'm using mechanize.  I know that twisted.web1  has the 
>client, but it seems to be not actively maintained, and  there's no client 
>in twisted.web2.

I'm not sure that there is much active maintenance to do.  For what it's worth, I've called t.web.client.getPage() at least 10 million times, and i don't have any complaints.

--
Moe Aboulkheir



From ldanielburr at mac.com  Tue Sep 12 23:06:45 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Tue, 12 Sep 2006 22:06:45 -0500
Subject: [Twisted-Python] mechanize in twisted ?
In-Reply-To: <20060913024802.1717.1583484354.divmod.quotient.47611@ohm>
References: <20060913024802.1717.1583484354.divmod.quotient.47611@ohm>
Message-ID: <op.tfsqxj143oj628@l-daniel-burrs-powerbook-g4-17.local>

On Tue, 12 Sep 2006 21:48:02 -0500, Moe Aboulkheir <moe at divmod.com> wrote:

>
>
> On Tue, 12 Sep 2006 21:10:26 -0400, Jonathan <twisted-python at 2xlp.com>  
> wrote:
>> I've got a job-queue process implemented twisted that interfaces with  
>> Postgres and occasionally downloads some urls
>>
>> To handle the URLs, I'm using mechanize.  I know that twisted.web1  has  
>> the client, but it seems to be not actively maintained, and  there's no  
>> client in twisted.web2.
>
> I'm not sure that there is much active maintenance to do.  For what it's  
> worth, I've called t.web.client.getPage() at least 10 million times, and  
> i don't have any complaints.
>
> --
> Moe Aboulkheir

My experience has been the same; I've used twisted.web.client for years
now, in production applications, with no issues.  That said, the original
poster didn't mention any special requirements that forced him to go with
mechanize; rather, the choice appears to have been made on the basis of
activity.

That said, there *is* a web2-based client, available from OSAF, named
zanshin.  I haven't used it, but it is most certainly being actively
developed.

L. Daniel Burr



From damonkohler at yahoo.com  Wed Sep 13 00:11:30 2006
From: damonkohler at yahoo.com (Damon Kohler)
Date: Tue, 12 Sep 2006 21:11:30 -0700 (PDT)
Subject: [Twisted-Python] Newbie Problem
Message-ID: <20060913041130.7912.qmail@web53502.mail.yahoo.com>

This is probably something simple. I'm having some trouble with this little bit
of code below. I start it up once as a server, then a second time as the client
connecting to localhost. However, it never actually seems to connect. Both
sides just wait indefinitely. I'm a bit stuck as to how to debug this, so if
someone has a solution for me and could tell me how I would have figured it
out, that would be great!

Thanks,
Damon

import sys
import optparse

import zope.interface

from twisted.spread import pb
from twisted.internet import reactor
from twisted.internet import interfaces
from twisted.python import util


class ConsoleInput(object):
    zope.interface.implements(interfaces.IReadDescriptor)
    
    def fileno(self):
        return 0

    def connectionLost(self, reason):
        print "Lost connection because %s" % reason

    def doRead(self):
        d = self.root.callRemote("echo", sys.stdin.readline().strip())
       
    def setRoot(self, root):
        print "got root"
        self.myEchoer = Echoer()
        self.root = root
        self.root.callRemote('GiveReference', self.myEchoer)

    def logPrefix(self):
        return 'ConsoleInput'


class Echoer(pb.Root):
    def remote_echo(self, st):
        print 'echoing:', st
        return st

    def remote_GiveReference(self, ref):
        self.client_ref = ref

def main():
    parser = optparse.OptionParser()
    parser.add_option('--host', dest='host', help='Host to connect to.')
    options, args = parser.parse_args()

    ci = ConsoleInput()
    reactor.addReader(ci)

    if options.host:
        host = options.host
        factory = pb.PBClientFactory()
        print "Connecting to %s..." % host
        reactor.connectTCP(host, 8789, pb.PBClientFactory())
        d = factory.getRootObject()
        d.addCallback(ci.setRoot)
        d.addErrback(lambda reason: "error %s" % reason.value)
        d.addCallback(util.println)
    else:
        print "Listening..."
        root = Echoer()
        factory = pb.PBServerFactory(root)
        reactor.listenTCP(8789, factory)

    reactor.run()

if __name__ == '__main__':
    main()


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From exarkun at divmod.com  Wed Sep 13 09:09:30 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 13 Sep 2006 09:09:30 -0400
Subject: [Twisted-Python] Newbie Problem
In-Reply-To: <20060913041130.7912.qmail@web53502.mail.yahoo.com>
Message-ID: <20060913130930.1717.163455465.divmod.quotient.47966@ohm>

On Tue, 12 Sep 2006 21:11:30 -0700 (PDT), Damon Kohler <damonkohler at yahoo.com> wrote:
>This is probably something simple. I'm having some trouble with this little bit
>of code below. I start it up once as a server, then a second time as the client
>connecting to localhost. However, it never actually seems to connect. Both
>sides just wait indefinitely. I'm a bit stuck as to how to debug this, so if
>someone has a solution for me and could tell me how I would have figured it
>out, that would be great!

Most likely the problem is sys.stdin.readline().  I suggest taking a look
at twisted.internet.stdio as a way to eliminate your ConsoleInput class
and the uses of the reactor-private method addReader().

If I were going to try to track down the cause of the hang, I'd probably
start with strace to see where the processes are waiting.

Jean-Paul



From sylvain.thenault at logilab.fr  Wed Sep 13 11:28:04 2006
From: sylvain.thenault at logilab.fr (Sylvain =?iso-8859-1?Q?Th=E9nault?=)
Date: Wed, 13 Sep 2006 17:28:04 +0200
Subject: [Twisted-Python] twisted.web2 and blank values in POST
Message-ID: <20060913152804.GB25735@crater.logilab.fr>

Hi there,

I've found a strange behaviour in twisted web2'server : the behaviour with blank values
in form parameters is not consistent between GET and POST: on GET blank values are kept while 
this is not the case on POST. I'ld have expected blank values to be kept on POST as well. Is this 
a bug or an expected behavour ?


PS: if this is a bug, an easy fix is to add keep_blank_values=True to the 
fileupload.parse_urlencoded call in server.py line 91.
-- 
Sylvain Th?nault                               LOGILAB, Paris (France)
Formations Python, Zope, Plone, Debian:  http://www.logilab.fr/formations
D?veloppement logiciel sur mesure:       http://www.logilab.fr/services
Python et calcul scientifique:           http://www.logilab.fr/science




From exarkun at divmod.com  Wed Sep 13 11:45:10 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 13 Sep 2006 11:45:10 -0400
Subject: [Twisted-Python] twisted.web2 and blank values in POST
In-Reply-To: <20060913152804.GB25735@crater.logilab.fr>
Message-ID: <20060913154510.1717.1246633757.divmod.quotient.48076@ohm>

On Wed, 13 Sep 2006 17:28:04 +0200, Sylvain Th?nault <sylvain.thenault at logilab.fr> wrote:
>Hi there,
>
>I've found a strange behaviour in twisted web2'server : the behaviour with blank values
>in form parameters is not consistent between GET and POST: on GET blank values are kept while
>this is not the case on POST. I'ld have expected blank values to be kept on POST as well. Is this
>a bug or an expected behavour ?
>
>
>PS: if this is a bug, an easy fix is to add keep_blank_values=True to the
>fileupload.parse_urlencoded call in server.py line 91.

Hi.  You might want to post this to the twisted-web mailing list, instead.

Jean-Paul



From sylvain.thenault at logilab.fr  Wed Sep 13 11:58:23 2006
From: sylvain.thenault at logilab.fr (Sylvain =?iso-8859-1?Q?Th=E9nault?=)
Date: Wed, 13 Sep 2006 17:58:23 +0200
Subject: [Twisted-Python] twisted.web2 and blank values in POST
In-Reply-To: <20060913154510.1717.1246633757.divmod.quotient.48076@ohm>
References: <20060913152804.GB25735@crater.logilab.fr>
	<20060913154510.1717.1246633757.divmod.quotient.48076@ohm>
Message-ID: <20060913155823.GD25735@crater.logilab.fr>

On Wednesday 13 September ? 11:45, Jean-Paul Calderone wrote:
> On Wed, 13 Sep 2006 17:28:04 +0200, Sylvain Th?nault 
> <sylvain.thenault at logilab.fr> wrote:
> >Hi there,
> >
> >I've found a strange behaviour in twisted web2'server : the behaviour with 
> >blank values
> >in form parameters is not consistent between GET and POST: on GET blank 
> >values are kept while
> >this is not the case on POST. I'ld have expected blank values to be kept 
> >on POST as well. Is this
> >a bug or an expected behavour ?
> >
> >
> >PS: if this is a bug, an easy fix is to add keep_blank_values=True to the
> >fileupload.parse_urlencoded call in server.py line 91.
> 
> Hi.  You might want to post this to the twisted-web mailing list, instead.

oops, good point. I've just bounced it on the web list, thx !

-- 
Sylvain Th?nault                               LOGILAB, Paris (France)
Formations Python, Zope, Plone, Debian:  http://www.logilab.fr/formations
D?veloppement logiciel sur mesure:       http://www.logilab.fr/services
Python et calcul scientifique:           http://www.logilab.fr/science




From damonkohler at yahoo.com  Wed Sep 13 15:55:38 2006
From: damonkohler at yahoo.com (Damon Kohler)
Date: Wed, 13 Sep 2006 12:55:38 -0700 (PDT)
Subject: [Twisted-Python] Newbie Problem
In-Reply-To: <20060913130930.1717.163455465.divmod.quotient.47966@ohm>
Message-ID: <20060913195539.1056.qmail@web53503.mail.yahoo.com>

Thanks for the help. Unfortuantely, I'm still stuck. I'm on OS X and so I'm
using ktrace. So far, it hasn't given me much insight. Also, it doesn't appear
to be the sys.stdin call causing the trouble since I can replace that with just
a string and get the same results. Any other ideas?

Damon

--- Jean-Paul Calderone <exarkun at divmod.com> wrote:

> On Tue, 12 Sep 2006 21:11:30 -0700 (PDT), Damon Kohler
> <damonkohler at yahoo.com> wrote:
> >This is probably something simple. I'm having some trouble with this little
> bit
> >of code below. I start it up once as a server, then a second time as the
> client
> >connecting to localhost. However, it never actually seems to connect. Both
> >sides just wait indefinitely. I'm a bit stuck as to how to debug this, so if
> >someone has a solution for me and could tell me how I would have figured it
> >out, that would be great!
> 
> Most likely the problem is sys.stdin.readline().  I suggest taking a look
> at twisted.internet.stdio as a way to eliminate your ConsoleInput class
> and the uses of the reactor-private method addReader().
> 
> If I were going to try to track down the cause of the hang, I'd probably
> start with strace to see where the processes are waiting.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From twisted-python at 2xlp.com  Wed Sep 13 17:14:24 2006
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 13 Sep 2006 17:14:24 -0400
Subject: [Twisted-Python] design pattern advice needed
Message-ID: <1498079C-0ECA-482D-8B73-FB826BBBE2F5@2xlp.com>

I can't wrap my head around this

	FactoryA needs an object from FactoryB
	FactoryB has a finite pool of objects, which can be checked in and  
checked out

I need FactoryA to not-progress until FactoryB is ready to dispense  
an object.

in all of my attempts, i end up with a deferred object in the Factory  
A code.

can anyone point me in the right  direction?



From twisted-python at 2xlp.com  Wed Sep 13 17:29:13 2006
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 13 Sep 2006 17:29:13 -0400
Subject: [Twisted-Python] mechanize in twisted ?
In-Reply-To: <76B51183-6693-4B21-822E-0C886A84D397@2xlp.com>
References: <20060913024802.1717.1583484354.divmod.quotient.47611@ohm>
	<op.tfsqxj143oj628@l-daniel-burrs-powerbook-g4-17.local>
	<1C2DE905-4450-49B8-83F5-0A4D71A8241F@2xlp.com>
	<76B51183-6693-4B21-822E-0C886A84D397@2xlp.com>
Message-ID: <95FEEE4F-DA92-4F6B-B5E9-0D094F412434@2xlp.com>

On Sep 12, 2006, at 11:06 PM, L. Daniel Burr wrote:



> My experience has been the same; I've used twisted.web.client for  
> years
> now, in production applications, with no issues.  That said, the  
> original
> poster didn't mention any special requirements that forced him to  
> go with
> mechanize; rather, the choice appears to have been made on the  
> basis of
> activity.
>
> That said, there *is* a web2-based client, available from OSAF, named
> zanshin.  I haven't used it, but it is most certainly being actively
> developed
>
>

Sorry, I wrote this while rather tired.  Let me clarify.

	I know that twisted.web 1.0 is stable and production proven.
	And I know people are happy with it and love it.

	Right now I have a bunch of existing scripts that crunch analytics  
and are already built on mechanize and run as cronjobs.
	I'm transitioning some to a job queue system , trying to optimize  
some resources by handling it all within twisted.
	My winwin situation on choosing mechanize is in part , because
		a) it involves copy-pasting a few lines and reusing classes I  
already have -- hopefully wrapping it into the event loop -- vs  
porting a bunch of stuff to twisted.web.client1
		and
		b) its actively maintained, which means i get some random new  
features on their development list that I need already ( like  
integrated beautful soup support ).  most that  stuff is  trivial and  
easily implemented in twisted, but i don't have to do that work.  its  
done (in mechanize ).

So I'd like to stay within mechanize.   and I think i've got a way to  
wrap it into twisted.

Thanks for the suggestions and trying to put me on the right track.




From damonkohler at yahoo.com  Wed Sep 13 18:24:49 2006
From: damonkohler at yahoo.com (Damon Kohler)
Date: Wed, 13 Sep 2006 15:24:49 -0700 (PDT)
Subject: [Twisted-Python] Newbie Problem
In-Reply-To: <20060913195539.1056.qmail@web53503.mail.yahoo.com>
Message-ID: <20060913222449.96934.qmail@web53504.mail.yahoo.com>

Whoops. Found the problem. Wasn't using the client factory I created and
instead used a new factory in the reactor call :(

--- Damon Kohler <damonkohler at yahoo.com> wrote:

> Thanks for the help. Unfortuantely, I'm still stuck. I'm on OS X and so I'm
> using ktrace. So far, it hasn't given me much insight. Also, it doesn't
> appear
> to be the sys.stdin call causing the trouble since I can replace that with
> just
> a string and get the same results. Any other ideas?
> 
> Damon
> 
> --- Jean-Paul Calderone <exarkun at divmod.com> wrote:
> 
> > On Tue, 12 Sep 2006 21:11:30 -0700 (PDT), Damon Kohler
> > <damonkohler at yahoo.com> wrote:
> > >This is probably something simple. I'm having some trouble with this
> little
> > bit
> > >of code below. I start it up once as a server, then a second time as the
> > client
> > >connecting to localhost. However, it never actually seems to connect. Both
> > >sides just wait indefinitely. I'm a bit stuck as to how to debug this, so
> if
> > >someone has a solution for me and could tell me how I would have figured
> it
> > >out, that would be great!
> > 
> > Most likely the problem is sys.stdin.readline().  I suggest taking a look
> > at twisted.internet.stdio as a way to eliminate your ConsoleInput class
> > and the uses of the reactor-private method addReader().
> > 
> > If I were going to try to track down the cause of the hang, I'd probably
> > start with strace to see where the processes are waiting.
> > 
> > Jean-Paul
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > 
> 
> 
> __________________________________________________
> Do You Yahoo!?
> Tired of spam?  Yahoo! Mail has the best spam protection around 
> http://mail.yahoo.com 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From felipe.lessa at gmail.com  Wed Sep 13 20:44:21 2006
From: felipe.lessa at gmail.com (Felipe Almeida Lessa)
Date: Wed, 13 Sep 2006 21:44:21 -0300
Subject: [Twisted-Python] mechanize in twisted ?
In-Reply-To: <95FEEE4F-DA92-4F6B-B5E9-0D094F412434@2xlp.com>
References: <20060913024802.1717.1583484354.divmod.quotient.47611@ohm>
	<op.tfsqxj143oj628@l-daniel-burrs-powerbook-g4-17.local>
	<1C2DE905-4450-49B8-83F5-0A4D71A8241F@2xlp.com>
	<76B51183-6693-4B21-822E-0C886A84D397@2xlp.com>
	<95FEEE4F-DA92-4F6B-B5E9-0D094F412434@2xlp.com>
Message-ID: <c2701f5c0609131744mbfd95fdl74b1c0663b43d46d@mail.gmail.com>

2006/9/13, Jonathan Vanasco <twisted-python at 2xlp.com>:
> most that  stuff is  trivial and
> easily implemented in twisted, but i don't have to do that work.  its
> done (in mechanize )

I may be wrong, but I think that porting mechanize to Twisted would be
more difficult than porting your mechanize scripts to Twisted. Maybe
not, just a thought.

-- 
Felipe.



From exarkun at divmod.com  Wed Sep 13 21:47:53 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 13 Sep 2006 21:47:53 -0400
Subject: [Twisted-Python] Twisted Development Procedures
In-Reply-To: 0
Message-ID: <20060914014753.1717.904981824.divmod.quotient.48457@ohm>

It's been pointed out to me lately that, while the general procedures in
place for Twisted development are somewhat understood, specifics may be
lacking.  So, specifically, the development process Twisted has adopted
is this:

  Commits to trunk/ must be the result of the review process outlined
below.  The only exception to this is the Twisted.Quotes file.  There
are no other exceptions.

  Changes to Twisted must be accompanied by a ticket in the tracker.

  Changes must be reviewed by a developer other than the author of the
changes.  If changes are paired on, a third party must review them.  If
changes constitute the work of several people who worked independently,
a non-author must review them.

  A reviewer can be anyone who is familiar with the Twisted codebase,
coding standard, and review requirements.  A reviewer need not
necessarily be familiar with the specific area of Twisted being changed,
but he or she should feel confident in his or her abilities to spot
problems in the change.

  A reviewer must reject a set of changes in any of the following
circumstances:

    The test suite fails on any of the supported* platforms as a result
of the changes.

    The changes alter the behavior of code in a way which is not tested.

    The changes add new behavior without adding test coverage for that
behavior.

    The changes modify public APIs which are undocumented (ie, a
function which has no docstring is modified, or a class which has no
docstring has methods added to it).

    The changes modify the behavior of a documented API without updating
the documentation.

    The changes violate the coding standard.

  A reviewer may reject a set of changes for other reasons, most of
which are hard to quantify.  Basically, use your best judgement, and
don't be afraid to point out problems which don't fit into the above
list.

  After a reviewer has given a change set the okay, the author (or
another developer, if the author is so inclined or lacks commit
privileges) may commit the change set to trunk.

  The trunk commit must include the name of the author or authors,
reviewer or reviews, and the tickets which are being resolved by the
changes being committed.  The suggested format for this is:

    Author: <names>
    Reviewer: <names>
    Fixes #<ticket number>

  Only the "Fixes" line actually *needs* to conform to this (since it is
automatically processed in order to update the ticket's state in the
tracker).  The commit message should also describe the change being made
in a modest amount of detail.  This should be detailed enough for
someone doing a release to formulate a changelog entry.

  If a change set somehow introduces a test suite regression or is
otherwise found to be undesirable, it is to be reverted.  Any developer
may revert a commit which introduces a test suite regression on a
supported platform.

  If a branch is used, it should be deleted a short time after after it
is merged into trunk (leaving enough time for the buildslaves to run to
completion is a good idea, in case a regression has been introduced and
the merge must be reverted).

Chris has put this onto the wiki:

    http://twistedmatrix.com/trac/wiki/ReviewProcess

Developers, please ask questions if any part of this remains unclear.

Apologies for not posting this sooner,

Jean-Paul



From gah at research.att.com  Wed Sep 13 21:47:56 2006
From: gah at research.att.com (Glenn Hochberg)
Date: Wed, 13 Sep 2006 21:47:56 -0400
Subject: [Twisted-Python] design pattern advice needed
In-Reply-To: <1498079C-0ECA-482D-8B73-FB826BBBE2F5@2xlp.com>
References: <1498079C-0ECA-482D-8B73-FB826BBBE2F5@2xlp.com>
Message-ID: <D6DFD5E8-0972-4B95-B119-9FAE81157CEF@research.att.com>


On Sep 13, 2006, at 5:14 PM, Jonathan Vanasco wrote:

> I can't wrap my head around this
>
> 	FactoryA needs an object from FactoryB
> 	FactoryB has a finite pool of objects, which can be checked in and  
> checked out
>
> I need FactoryA to not-progress until FactoryB is ready to dispense  
> an object.
>
> in all of my attempts, i end up with a deferred object in the  
> Factory A code.
>
> can anyone point me in the right  direction?

Here's a stab at the idea.

class FactoryB:
	product = B
	pool = [ self.product() for _ in range(0,10) ]
	queue = []

	def allocate( self ):
		if not self.pool:
			d = defer.Deferred()
			self.queue.append( d )
			return d
		else:
			return defer.succeed( self.pool.pop() )

	def free( self, p ):
		if self.queue:
			d = self.queue.pop( 0 )
			d.callback( p )
		else:
			self.pool.append( p )

class FactoryA:
	product = A
	factoryB = FactoryB()
	
	def allocate( self ):
		d = self.factoryB.allocate()
		d.addCallback( self._gotB )
		return d

	def _gotB( self, b )
		a = self.product()
		a.b = b
		return a

def _gotA( a ):
	# do something with the A object

def main():
	factoryA = FactoryA()
	d = factoryA.allocate()
	d.addCallback( _gotA )

Maybe others will have a more refined explanation.



From schneider at gl-systemhaus.de  Thu Sep 14 08:35:46 2006
From: schneider at gl-systemhaus.de (Christian Schneider)
Date: Thu, 14 Sep 2006 14:35:46 +0200
Subject: [Twisted-Python] Rotating logfiles (SIGUSR1 doesn't work)
Message-ID: <00259AE0-AB94-4495-90DF-FF43F6553460@gl-systemhaus.de>

Hi,

we've written a server running as a twisted application. Logging is  
done via twisted.python.log.msg. The log file is growing rather big  
and only rotated on server startup, which hopefully is a very rare  
occurrence, indeed.

Sending a SIGUSR1 to twistd unfortunately doesn't do anything.

I've seen that the class LogFile has a rotate method but I don't see  
the connection between twisted.python.log and that class if there is  
any at all.

Any hint would be highly appreciated

chris



From twisted-python at 2xlp.com  Thu Sep 14 23:31:38 2006
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 14 Sep 2006 23:31:38 -0400
Subject: [Twisted-Python] 2 questions: adbapi.ConnectionPool ;
	Defer.DeferredSemaphore , threads.deferToThread
Message-ID: <85B7D56A-9E6F-435E-8785-D474BB4E8661@2xlp.com>


a-
	can someone clarify adbapi.ConnectionPool for me?
	i'm specifically wondering if connect/disconnect returns a handle to  
the pool and it the pool blocks until a handle is ready.  i think it  
probably doesn't work that way.  but i feel the need to check.
	

b-
	has anyone ever used Defer.DeferredSemaphore with  
threads.deferToThread ?
	if so, how?  all of my attempts thus far have not given the desired  
results

specifically, i'm trying to have a scheduled job queue seed 1-50  
'tasks' at once, each one using a seperate DB connection and running  
in a seperate thread.
once they all complete, the job reschedules itself to run in the future.

i'm probably approaching this problem wrong.  so feel free to tell me  
i'm an idiot and point in a better direction.

the closest thing I could think of was:
	1- imports= [ self.semaphore.run( threads.deferToThread 
( self.import_request, queue_item ) ) for queue_item in queue_import ]
	2- imports= [ threads.deferToThread( self.semaphore.run 
( self.import_request, queue_item ) ) for queue_item in queue_import ]

neither of which work as:
	1-  gives me imports all at once, as deferToThread immediately  
returns a deferred object
	2- self.import_request blocks , as its not in its own thread





From dave at krondo.com  Fri Sep 15 00:39:44 2006
From: dave at krondo.com (Dave Peticolas)
Date: Thu, 14 Sep 2006 21:39:44 -0700
Subject: [Twisted-Python] 2 questions: adbapi.ConnectionPool ;
	Defer.DeferredSemaphore , threads.deferToThread
In-Reply-To: <85B7D56A-9E6F-435E-8785-D474BB4E8661@2xlp.com>
References: <85B7D56A-9E6F-435E-8785-D474BB4E8661@2xlp.com>
Message-ID: <450A2E90.3000807@krondo.com>

Jonathan Vanasco wrote:
>
> a-
>     can someone clarify adbapi.ConnectionPool for me?
>     i'm specifically wondering if connect/disconnect returns a handle 
> to the pool and it the pool blocks until a handle is ready.  i think 
> it probably doesn't work that way.  but i feel the need to check.
>    

I can only answer your first question. Connect/disconnect are blocking
functions and are generally only called from the connection pool itself.

User code generally only needs to call runInteraction, runQuery, or
runOperation, and the pool will make connections as needed.

dave





From twisted-python at 2xlp.com  Fri Sep 15 01:06:37 2006
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Fri, 15 Sep 2006 01:06:37 -0400
Subject: [Twisted-Python] 2 questions: adbapi.ConnectionPool ;
	Defer.DeferredSemaphore , threads.deferToThread
In-Reply-To: <450A2E90.3000807@krondo.com>
References: <85B7D56A-9E6F-435E-8785-D474BB4E8661@2xlp.com>
	<450A2E90.3000807@krondo.com>
Message-ID: <EB867216-8E5B-4790-B775-65CB041EDDBE@2xlp.com>

>> a-
>>     can someone clarify adbapi.ConnectionPool for me?
>>     i'm specifically wondering if connect/disconnect returns a  
>> handle to the pool and it the pool blocks until a handle is  
>> ready.  i think it probably doesn't work that way.  but i feel the  
>> need to check.


>> I can only answer your first question. Connect/disconnect are  
>> blocking
> functions and are generally only called from the connection pool  
> itself.
>
> User code generally only needs to call runInteraction, runQuery, or
> runOperation, and the pool will make connections as needed.

hm... i'll have to play with this.  i'm trying to fork some already  
written scripts that block as threads... grabbing a lock on a db from  
the pool, then returning it when done.

i answered part b for me.

i don't know if this example below would be of use to anyone, and its  
definitely poorly written.
but it is both functional and example of running a bunch of blocking  
processes in a finite number of threads managed by DeferredSemaphore  
( i could only find docs/examples for infinite threads or non- 
threaded DeferredSemaphore )

------------------------------------------------------------------------ 
------------------

from twisted.application import internet
from twisted.internet import defer , reactor , threads

import time

CHECK_PERIOD= 5
SIMULTANEOUS= 2
HELP= 1

class ThreadedSemaphoreService(object):
	semaphore= defer.DeferredSemaphore( tokens= SIMULTANEOUS )

	def __init__(self):
		self.interval_action()

	def interval_action( self ):
		if HELP:
			print "interval_action()"
		
		# this would likely be a sql select
		action_queue= range(1,6)

		if len ( action_queue ):
			actions= []
			for action_item in action_queue:
				d= self.act_on( action_item )
				actions.append(d)
			finished= defer.DeferredList( actions )
			finished.addCallback( self.re_register__interval_action )
		else:
			self.re_register__interval_action()

	def re_register__interval_action( self , deferlist ):
		if HELP:
			print "re_register__interval_action()"
		reactor.callLater( CHECK_PERIOD , self.interval_action )
	
	def act_on( self , queue_item ):
		if HELP:
			print "in main - act_on()"
		t= threads.deferToThread( self._act_on )
		return t

	def _act_on( self ):
		if HELP:
			print "\t thread - _act_on()"
		d= self.semaphore.acquire()
		d.addCallback( self.sleeper )
		d.addCallback( self.awake )

	def sleeper( self , deferredSemaphore ):
		if HELP:
			print "\t thread - sleeper() - i want to sleep in my own thread  
tonight"
		time.sleep(2)
		return deferredSemaphore

	def awake( self , deferredSemaphore ):
		if HELP:
			print "\t thead - awake() - now awake"
		deferredSemaphore.release()

if __name__ == '__main__':
	myService= ThreadedSemaphoreService()
	reactor.run()



From andrew-twisted at puzzling.org  Fri Sep 15 02:42:50 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 15 Sep 2006 16:42:50 +1000
Subject: [Twisted-Python] 2 questions: adbapi.ConnectionPool ;
	Defer.DeferredSemaphore , threads.deferToThread
In-Reply-To: <85B7D56A-9E6F-435E-8785-D474BB4E8661@2xlp.com>
References: <85B7D56A-9E6F-435E-8785-D474BB4E8661@2xlp.com>
Message-ID: <20060915064250.GB20197@steerpike.home.puzzling.org>

On Thu, Sep 14, 2006 at 11:31:38PM -0400, Jonathan Vanasco wrote:
[...]
> 
> b-
> 	has anyone ever used Defer.DeferredSemaphore with  
> threads.deferToThread ?
> 	if so, how?  all of my attempts thus far have not given the desired  
> results
> 
> specifically, i'm trying to have a scheduled job queue seed 1-50  
> 'tasks' at once, each one using a seperate DB connection and running  
> in a seperate thread.
> once they all complete, the job reschedules itself to run in the future.
> 
> i'm probably approaching this problem wrong.  so feel free to tell me  
> i'm an idiot and point in a better direction.
> 
> the closest thing I could think of was:
> 	1- imports= [ self.semaphore.run( threads.deferToThread 
> ( self.import_request, queue_item ) ) for queue_item in queue_import ]
> 	2- imports= [ threads.deferToThread( self.semaphore.run 
> ( self.import_request, queue_item ) ) for queue_item in queue_import ]
> 
> neither of which work as:
> 	1-  gives me imports all at once, as deferToThread immediately  
> returns a deferred object
> 	2- self.import_request blocks , as its not in its own thread

You probably want something more like:

    [self.semaphore.run(threads.deferToThread, self.import_request, queue_import)
     for queue_item in queue_import]

-Andrew.




From Marcin.Kasperski at softax.com.pl  Fri Sep 15 05:24:19 2006
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Fri, 15 Sep 2006 11:24:19 +0200
Subject: [Twisted-Python] Rotating logfiles (SIGUSR1 doesn't work)
In-Reply-To: <00259AE0-AB94-4495-90DF-FF43F6553460@gl-systemhaus.de>
References: <00259AE0-AB94-4495-90DF-FF43F6553460@gl-systemhaus.de>
Message-ID: <200609151124.20340.Marcin.Kasperski@softax.com.pl>


Not quite what you ask, but I use alternative logging method 
(logging.handlers.RotatingFileHandler) and it works perfectly...




From manlio_perillo at libero.it  Fri Sep 15 06:12:57 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 15 Sep 2006 12:12:57 +0200
Subject: [Twisted-Python] Rotating logfiles (SIGUSR1 doesn't work)
In-Reply-To: <00259AE0-AB94-4495-90DF-FF43F6553460@gl-systemhaus.de>
References: <00259AE0-AB94-4495-90DF-FF43F6553460@gl-systemhaus.de>
Message-ID: <450A7CA9.6030605@libero.it>

Christian Schneider ha scritto:
> Hi,
> 
> we've written a server running as a twisted application. Logging is done
> via twisted.python.log.msg. The log file is growing rather big and only
> rotated on server startup, which hopefully is a very rare occurrence,
> indeed.
> 

At least on Windows the file is rotated when its size reachs 1 MB.


Regards  Manlio Perillo




From general at eepatents.com  Fri Sep 15 14:37:08 2006
From: general at eepatents.com (Ed Suominen)
Date: Fri, 15 Sep 2006 11:37:08 -0700
Subject: [Twisted-Python] Re: 2 questions: adbapi.ConnectionPool ;
 Defer.DeferredSemaphore , threads.deferToThread
In-Reply-To: <E1GOH2r-0003dF-01@pyramid.twistedmatrix.com>
References: <E1GOH2r-0003dF-01@pyramid.twistedmatrix.com>
Message-ID: <450AF2D4.8060505@eepatents.com>

> specifically, i'm trying to have a scheduled job queue seed 1-50  
> 'tasks' at once, each one using a seperate DB connection and running  
> in a seperate thread.
> once they all complete, the job reschedules itself to run in the future.

I suggest you take a look at the asynchronous task queue on which my
sAsync package is based. I've been lobbying to get it included into the
twisted code base, see http://twistedmatrix.com/trac/ticket/1768.

The latest SVN of the module is at
http://foss.eepatents.com/sAsync/browser/trunk/sasync/taskqueue.py and
the API document is at
http://foss.eepatents.com/api/sasync/sasync.taskqueue.html.

Unlike the rest of sAsync, which is GPL'd, the taskqueue module and its
unit test module are distributed under a variant of the MIT license in
order to be suitable for inclusion in the Twisted codebase.

Best regards, Ed




From exarkun at twistedmatrix.com  Sun Sep 17 01:05:02 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 Sep 2006 05:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1158469502.95.636023027@twistedmatrix.com

Bug summary
______________________
Summary for 2006-09-10 through 2006-09-17
Bugs opened: 32    Bugs closed: 20  Total open bugs: 730 (+12)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +2  |Highest:  +6          |Conch:     -2          
|Enhancement: +11  |High:     +1          |Core:      +5          
|Task:         +3  |Normal:   +8          |Mail:      +1          
                   |Low:      -1          |Pb:        +2          
                   |Lowest:   +2          |Trial:     +3          
                                          |Web2:      +2          
                                          |Web2.Dav:  +0          
                                          |Website:   +2          
                                          |Words:     +3          


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2074] Access to twisted request object in WSGI applications (opened by martinpaljak)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2074

[#2076] twisted from svn will traceback when run on platform without working xml.dom.minidom (opened by jerub) (CLOSED, duplicate)
    defect          core       http://twistedmatrix.com/trac/ticket/2076

[#2079] Deprecate twisted.python.reflect.funcinfo (opened by radix)
    task            core       http://twistedmatrix.com/trac/ticket/2079

[#2083] Add test for statusForException() (opened by wsanchez)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2083

[#2086] t.words.basesupport attributeerror when "already connecting" (opened by moonfallen)
    defect          words      http://twistedmatrix.com/trac/ticket/2086

[#2089] twisted.words.protocol.irc.IRC.whois references undefined variable RPL_WHOISOPER, (opened by jerub)
    defect          words      http://twistedmatrix.com/trac/ticket/2089

[#2091] Make reactor unclean warnings reported errors (opened by jml)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2091

[#2054] ProperlyCloseFilesTestCase.testProperlyCloseFiles written in an aggressively stupid manner (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2054

                    ===== High =====
[#2084] Review public API of web2 (opened by glyph)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2084

[#2090] Deprecate reactor methods in tests (opened by jml)
    task            trial      http://twistedmatrix.com/trac/ticket/2090

                    ===== Normal =====
[#2070] cr+lf replacement in pop3.py/transformChunk() (opened by kaimorich) (CLOSED, duplicate)
    enhancement     mail       http://twistedmatrix.com/trac/ticket/2070

[#2071] cr+lf replacement in pop3.py/transformChunk() (opened by kaimorich) (CLOSED, wontfix)
    defect          mail       http://twistedmatrix.com/trac/ticket/2071

[#2072] Document newline convention required by twisted.mail.pop3.IMailbox.getMessage (opened by exarkun)
    enhancement     mail       http://twistedmatrix.com/trac/ticket/2072

[#2073] Access to twisted request object in WSGI applications (opened by martinpaljak) (CLOSED, duplicate)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2073

[#2075] set SCRIPT_NAME (properly?) in CGI environment (opened by martinpaljak)
    defect          web2       http://twistedmatrix.com/trac/ticket/2075

[#2077] Add a report for "Tickets Pending Review" (opened by jml)
    enhancement     website    http://twistedmatrix.com/trac/ticket/2077

[#2078] Twisted shouldn't start processes until the reactor is running (opened by radix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2078

[#2080] (Select) reactor doesn't wake up as a result of callFromThread (opened by mwk) (CLOSED, worksforme)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2080

[#2081] Linux filesystem extended attributes require a "user." prefix (opened by wsanchez) (CLOSED, fixed)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2081

[#2082] web2.dav.fileop should avoid using the os module (opened by wsanchez)
    defect          web2.dav   http://twistedmatrix.com/trac/ticket/2082

[#2085] Declare twisted.web2 stable and supported, de-emphasize twisted.web (opened by glyph)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2085

[#2087] buffer size doubling for iocpreactor (opened by ghazel)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2087

[#2088] twisted.words.im.basechat.ChatUI.contactChangedNick is completely broken. (opened by jerub)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2088

[#2092] Remove reactor.iterate calls from do_cleanPending (opened by jml)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2092

[#2093] URLPath should parse netloc more thoroughly. (opened by dreid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2093

[#2094] URLPath should provide an API for manipulating query arguments (opened by dreid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2094

[#2095] Add WebDAV quota support (opened by wsanchez)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2095

[#2097] Web Site Maintenance Info (opened by oubiwann)
    task            website    http://twistedmatrix.com/trac/ticket/2097

[#133 ] Allow registration of adapters for PB serialization (opened by itamarst)
    enhancement     pb         http://twistedmatrix.com/trac/ticket/133

[#1502] call selectreactor._preenDescriptors for WSAENOTSOCK (opened by titty)
    defect          core       http://twistedmatrix.com/trac/ticket/1502

                    ===== Lowest =====
[#2096] Support binding extensions to WebDAV (opened by wsanchez)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2096

[#1997] perhaps wakeUp could be slightly simpler (opened by wingo)
    defect          core       http://twistedmatrix.com/trac/ticket/1997



Closed Bugs
______________________
                    ===== Highest =====
[#2054] ProperlyCloseFilesTestCase.testProperlyCloseFiles written in an aggressively stupid manner (opened by exarkun, closed by exarkun, )
    defect          core       http://twistedmatrix.com/trac/ticket/2054

[#2076] twisted from svn will traceback when run on platform without working xml.dom.minidom (opened by jerub, closed by jerub, duplicate)
    defect          core       http://twistedmatrix.com/trac/ticket/2076

[#1850] web2 documentation should recommend putChild instead of setattr (opened by marienz, closed by dreid, fixed)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/1850

                    ===== High =====
[#2033] Removing non-existent property results in error. (opened by rfmohr at osc.edu, closed by wsanchez, fixed)
    defect          web2.dav   http://twistedmatrix.com/trac/ticket/2033

                    ===== Normal =====
[#2070] cr+lf replacement in pop3.py/transformChunk() (opened by kaimorich, closed by kaimorich, duplicate)
    enhancement     mail       http://twistedmatrix.com/trac/ticket/2070

[#2071] cr+lf replacement in pop3.py/transformChunk() (opened by kaimorich, closed by exarkun, wontfix)
    defect          mail       http://twistedmatrix.com/trac/ticket/2071

[#2073] Access to twisted request object in WSGI applications (opened by martinpaljak, closed by martinpaljak, duplicate)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2073

[#1848] Python 2.5b1  svn (opened by scmikes, closed by radix, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1848

[#1854] Suse 10,  Python 2.5   32 bit  Twisted SVN (opened by scmikes, closed by radix, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1854

[#1572] twistd starts services synchronously: it should  start them using the startup system event. (opened by exarkun, closed by radix, wontfix)
    defect          core       http://twistedmatrix.com/trac/ticket/1572

[#2067] string formatting bug in "twisted.python.reflect.funcinfo" (opened by james.townson, closed by radix, wontfix)
    defect          core       http://twistedmatrix.com/trac/ticket/2067

[#1501] Make twistd a library (opened by radix, closed by radix, wontfix)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/1501

[#2080] (Select) reactor doesn't wake up as a result of callFromThread (opened by mwk, closed by mwk, worksforme)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2080

[#1825] web2.dav COPY and MOVE methods fail if root directory of DAV resource is unwritable (opened by troy at osc.edu, closed by wsanchez, fixed)
    defect          web2.dav   http://twistedmatrix.com/trac/ticket/1825

[#2081] Linux filesystem extended attributes require a "user." prefix (opened by wsanchez, closed by wsanchez, fixed)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2081

[#1807] Exception handling improvements in web2/dav (opened by troy at osc.edu, closed by wsanchez, fixed)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/1807

[#1838] DAV MKCOL method with body causes uncaught exception (opened by troy at osc.edu, closed by wsanchez, fixed)
    defect          web2.dav   http://twistedmatrix.com/trac/ticket/1838

[#1752] t.w2's header tests that use runRoundtripTest and requiredGeneratedElements are invalid. (opened by dreid, closed by dreid, wontfix)
    defect          web2       http://twistedmatrix.com/trac/ticket/1752

                    ===== Low =====
[#1203] web2.stream.IStream.read() needs to take a length argument (opened by PenguinOfDoom, closed by dreid, invalid)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/1203

                    ===== Lowest =====
[#1997] perhaps wakeUp could be slightly simpler (opened by wingo, closed by glyph, )
    defect          core       http://twistedmatrix.com/trac/ticket/1997





From manlio_perillo at libero.it  Sun Sep 17 14:36:05 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sun, 17 Sep 2006 20:36:05 +0200
Subject: [Twisted-Python] manhole and exceptions
Message-ID: <450D9595.2080505@libero.it>

Hi.

I have started to play with manhole (on Windows XP, using putty as the
client).

After doing a:

>>> raise SystemExit()

from the terminal, the prompt ('>>>') does not appear.
Moreover every time I hit [RETURN] the same exception is re-raised in
the program.

I have to hit Ctrl-C to obtain the prompt again.




Thanks and regards  Manlio Perillo




From manlio_perillo at libero.it  Sun Sep 17 15:55:24 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sun, 17 Sep 2006 21:55:24 +0200
Subject: [Twisted-Python] manhole and exceptions
In-Reply-To: <450D9595.2080505@libero.it>
References: <450D9595.2080505@libero.it>
Message-ID: <450DA82C.7000104@libero.it>

Manlio Perillo ha scritto:
> Hi.
> 
> I have started to play with manhole (on Windows XP, using putty as the
> client).
> 

There seems to be a problem with history editing when a command is
written on more than one string.


Regards  Manlio Perillo



From exarkun at divmod.com  Sun Sep 17 19:09:03 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 17 Sep 2006 19:09:03 -0400
Subject: [Twisted-Python] manhole and exceptions
In-Reply-To: <450DA82C.7000104@libero.it>
Message-ID: <20060917230903.1717.371155045.divmod.quotient.52280@ohm>

On Sun, 17 Sep 2006 21:55:24 +0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>Manlio Perillo ha scritto:
>> Hi.
>>
>> I have started to play with manhole (on Windows XP, using putty as the
>> client).
>>
>
>There seems to be a problem with history editing when a command is
>written on more than one string.
>

For problems you find in Twisted, consider filing bug reports in our tracker,
<http://twistedmatrix.com/>.  Bug reports sent to the mailing list are usually
forgotten about.

Jean-Paul



From warner at lothar.com  Mon Sep 18 03:44:30 2006
From: warner at lothar.com (Brian Warner)
Date: Mon, 18 Sep 2006 00:44:30 -0700 (PDT)
Subject: [Twisted-Python] Foolscap (aka newpb) 0.0.2 released
Message-ID: <20060918.004430.98223299.warner@lothar.com>

I'm pleased to announce the release of Foolscap-0.0.2 .

 (What is 'foolscap', you ask? Good question. It is a size of paper, or the
 hat worn by a court jester, or a distributed object-capability protocol for
 Twisted. Only the first two definitions show up in wikipedia, however.)

newpb has been moved out of the Twisted SVN subdirectory into a new top-level
package where it can be developed independently of the Twisted release cycle.
(see ticket #1999 for details). In the process it has been renamed to
"Foolscap". (this name has some good properties, but "rolls pleasantly off
the tongue" is not one of them, and I'm not completely settled on it yet, so
don't be surprised if the name changes again in the next couple of months).

Foolscap is the next-generation version of Twisted's native RPC protocol, the
venerable Perspective Broker. It lets you make certain methods of certain
objects on one machine invokable from other machines. Foolscap (aka newpb)
has been in development on and off for, um, years, and is starting to be
ready for brave adventurers to give it a spin. Incompatible protocol and API
changes are likely to come, so keep in mind that it is not yet suitable for
production deployment.

The 0.0.2 release does not make any significant behavioral or protocol
changes relative to the earlier 0.0.1 release, but it does change the package
name and rearranges the preferred entry point. In 0.0.1 you needed to import
a number of second-level modules to use newpb (i.e. 'from twisted.pb import
pb; tub = pb.PBService()'). In 0.0.2 the foolscap/__init__.py file contains
all the important entry points, so you just do 'from foolscap import
PBService'.

The newpb (aka foolscap) wiki page contains lots of information about what
sorts of new features foolscap has relative to PB, links to view the source
and protocol specifications, and of course the download tarball:

 http://twistedmatrix.com/trac/wiki/FoolsCap

The release itself is available in my home directory on pyramid:

 http://twistedmatrix.com/~warner/Foolscap/

The source code lives in Twisted SVN in the sandbox:

 svn://svn.twistedmatrix.com/svn/Twisted/sandbox/warner/Foolscap/trunk


For a quick taste of what it looks like to make objects remotely available
via Foolscap, take a look at the simple client+server examples in the docs:

 http://twistedmatrix.com/trac/browser/sandbox/warner/Foolscap/trunk/doc/listings/pb1server.py

 http://twistedmatrix.com/trac/browser/sandbox/warner/Foolscap/trunk/doc/listings/pb1client.py


Please grab the release and give it a whirl. The more people who use it, the
better ideas we'll get about where it needs to go and what development still
needs to be done. The docs have a number of files describing the protocol
work that remains to be finished, but usability and practical deployment
issues are the biggest unknowns right now, and the only way to figure those
out is to actually use it for something.

share and enjoy,
 -Brian




From hanwoody at gmail.com  Tue Sep 19 10:23:00 2006
From: hanwoody at gmail.com (William Hanwoody)
Date: Tue, 19 Sep 2006 14:23:00 +0000
Subject: [Twisted-Python] how to manage multiple services using application
Message-ID: <200609191423.00232.hanwoody@gmail.com>

Hi All:

I want to manage multiple services in one twisted.application? multiple 
services contain t.app.internet.TCPClient services and 
t.app.internet.TCPServer services.

After client service(a.app.internet.TCPClient) connected and get results,
Do I need to stop client service? if needed, how to do it?

another question is how to use Deferred in twisted.application framework?

Thanks

-- 
_______________________________________________________________
William Hanwoody                             hanwoody at gmail.com

A senior Linux engineer, like system integrate
My blog - hanwoody.livejournal.com
_______________________________________________________________
Q:	What does it say on the bottom of Coke cans in North Dakota?
A:	Open other end.
_______________________________________________________________




From aronbierbaum at gmail.com  Wed Sep 20 23:13:38 2006
From: aronbierbaum at gmail.com (Aron Bierbaum)
Date: Wed, 20 Sep 2006 22:13:38 -0500
Subject: [Twisted-Python] PB over SSH
Message-ID: <34457a4c0609202013j41faa26bp9d4e256cb0d71189@mail.gmail.com>

Is there currently any way to us PB over a SSH connection? I noticed that
there was a post on this list back in Feb 2004, but I didn't see anyone
mention it after that. If anyone has any sample code that does this I would
greatly appreciate it.

-Aron
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060920/bb4431d2/attachment.htm 

From glyph at divmod.com  Thu Sep 21 14:00:25 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 21 Sep 2006 14:00:25 -0400
Subject: [Twisted-Python] New OS X buildbot courtesy of Apple Computer, Inc.
In-Reply-To: 0
Message-ID: <20060921180025.1717.206593441.divmod.quotient.55983@ohm>

Today a box arrived in the Twisted Matrix Labs global headquarters (AKA the Divmod offices) containing a tricked-out Xserve G5, sent gratis by Apple Computer to help the Twisted team better support the Macintosh platform.

Chris Armstrong and JP Calderone have already set up the buildslaves, and you can see them featured on our Buildbot page as "osx-2.4" and "poll-osx-2.4".

    http://twistedmatrix.com/buildbot/

This new machine is serving its purpose admirably.  The new build configuration, poll on osx, has already revealed some bugs that need fixing, less than 20 minutes after the machine was set up :).

There are several people who deserve some kudos here:

First of all, Wilfredo Sanchez, for both getting Apple to use Twisted on a high-profile project in the first place, and driving the process which culminated in the delivery of this beautiful machine.

Thanks to Apple Computer for dedicating these resources to our project.  I trust it will prove a worthwhile investment for them.

And finally, thanks to Stephen Thorne, who has been tirelessly keeping our tests running on a personal machine, and helping to keep the OS X platform supported until now.  Stephen, you can finally turn it off :-).

Pictures are forthcoming, if you know how Flickr works and such.



From duncan.mcgreggor at gmail.com  Thu Sep 21 14:12:44 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Thu, 21 Sep 2006 12:12:44 -0600
Subject: [Twisted-Python] New OS X buildbot courtesy of Apple Computer,
	Inc.
In-Reply-To: <20060921180025.1717.206593441.divmod.quotient.55983@ohm>
References: <20060921180025.1717.206593441.divmod.quotient.55983@ohm>
Message-ID: <4512D61C.9070404@gmail.com>

glyph at divmod.com wrote:

> Today a box arrived in the Twisted Matrix Labs global headquarters
> (AKA the Divmod offices) containing a tricked-out Xserve G5, sent
> gratis by Apple Computer to help the Twisted team better support the
> Macintosh platform.

Sa-hweet!

This is very, very cool. In so many ways.

> There are several people who deserve some kudos here:
> 
> First of all, Wilfredo Sanchez, for both getting Apple to use Twisted
> on a high-profile project

+1

> Thanks to Apple Computer for dedicating these resources to our
> project

+1

> And finally, thanks to Stephen Thorne

+1!

> Pictures are forthcoming

Yeay! We love comp pics!



From yoheeb at yahoo.com  Thu Sep 21 16:18:52 2006
From: yoheeb at yahoo.com (Yoheeb)
Date: Thu, 21 Sep 2006 20:18:52 +0000 (UTC)
Subject: [Twisted-Python] Perspective Broker vs XMLRPC for this...
Message-ID: <loom.20060921T220523-828@post.gmane.org>

Hi all, 

I have never used twisted, but really would like to.  I am in the middle of
rough design of an xmlrpc OR OTHER remote method invocation type system.  I am
debating the use of xmlrpc vs the use of perspective broker.  (for a quick
prototype I will likely use the python base xmlrpc lib, but just for proof of
concept)

I need to support both java and python. (and really c/c++ in some fashion would
be nice also) from both "local" and remote sources.

I really need something that is secure as well, although I can work around
security with either via pre-post process encrytption techniques as needed.

I will need the ability to expose/hide methods based on the user privledges.  I
envision a single "services" like tool that populates a list of things you can
run based on user rights.  For this I need usernames/pwds to somehow be secure
(md5, rot13, whatever, just something)

I will have connections over vpn, local code calls, and eventually over local
serial and usb ports. (assuming everthing looks like a simple IP socket stream)

Finally, I have somehting else running a simple xmlrpc server on the system, and
may want to propogate calls to that with some magic wrapper function. (to be
specific, I am running a copy of eXist, the xmldb)

Breathe....

Ok, so with all those rough requirements in mind, will PB be worthwhile?  There
is no preference from the client applications point of view.

Right now I am doing a proof of concept, and have a ton of issues that could be
neatly solved by a nice RMI system that is secure.

Thanks in advance.

Yoheeb




From exarkun at divmod.com  Thu Sep 21 20:54:06 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 21 Sep 2006 20:54:06 -0400
Subject: [Twisted-Python] PB over SSH
In-Reply-To: <34457a4c0609202013j41faa26bp9d4e256cb0d71189@mail.gmail.com>
Message-ID: <20060922005406.1717.2081837661.divmod.quotient.56250@ohm>

On Wed, 20 Sep 2006 22:13:38 -0500, Aron Bierbaum <aronbierbaum at gmail.com> wrote:
>Is there currently any way to us PB over a SSH connection? I noticed that
>there was a post on this list back in Feb 2004, but I didn't see anyone
>mention it after that. If anyone has any sample code that does this I would
>greatly appreciate it.

PB requires a particular API from its transport, like many protocols.  It is
entirely possible to implement this API in terms of SSH, and probably not even particularly difficult.  However, no one has done this yet (and contributed the result to Twisted), so if you will need to if you want to run PB over SSH.

Running PB over SSL is significantly easier and may provide all of the features you are looking for.

Jean-Paul



From exarkun at divmod.com  Thu Sep 21 20:57:56 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 21 Sep 2006 20:57:56 -0400
Subject: [Twisted-Python] Perspective Broker vs XMLRPC for this...
In-Reply-To: <loom.20060921T220523-828@post.gmane.org>
Message-ID: <20060922005756.1717.1691604882.divmod.quotient.56253@ohm>

On Thu, 21 Sep 2006 20:18:52 +0000 (UTC), Yoheeb <yoheeb at yahoo.com> wrote:
>Hi all,
>
>I have never used twisted, but really would like to.  I am in the middle of
>rough design of an xmlrpc OR OTHER remote method invocation type system.  I am
>debating the use of xmlrpc vs the use of perspective broker.  (for a quick
>prototype I will likely use the python base xmlrpc lib, but just for proof of
>concept)
>
>I need to support both java and python. (and really c/c++ in some fashion would
>be nice also) from both "local" and remote sources.
>
>I really need something that is secure as well, although I can work around
>security with either via pre-post process encrytption techniques as needed.
>
>I will need the ability to expose/hide methods based on the user privledges.  I
>envision a single "services" like tool that populates a list of things you can
>run based on user rights.  For this I need usernames/pwds to somehow be secure
>(md5, rot13, whatever, just something)
>
>I will have connections over vpn, local code calls, and eventually over local
>serial and usb ports. (assuming everthing looks like a simple IP socket stream)
>
>Finally, I have somehting else running a simple xmlrpc server on the system, and
>may want to propogate calls to that with some magic wrapper function. (to be
>specific, I am running a copy of eXist, the xmldb)
>
>Breathe....
>
>Ok, so with all those rough requirements in mind, will PB be worthwhile?  There
>is no preference from the client applications point of view.
>
>Right now I am doing a proof of concept, and have a ton of issues that could be
>neatly solved by a nice RMI system that is secure.

All of this sounds doable, either with PB or with XML-RPC.  Certain parts
will be easier with PB, like permissions (since PB gives you remote objects
which can represent the capabilities available to a particular user - with
XML-RPC you don't have remote objects, but you can cobble together something
equivalent, it'll just be either slightly messier or slightly harder).  Other
parts will be easier with XML-RPC, like accessing the system from a C or C++
application, since there are numerous XML-RPC implementations for those
languages, and as far as I know no complete PB implementation for either.  A
third choice to consider may be AMP, which would be easy to implement in C or
C++ (and someone else may have done it by the time you actually get around to
that part of your project), although it also does not provide a remote object
system natively.

Jean-Paul



From robert at gravina.com  Thu Sep 21 21:05:10 2006
From: robert at gravina.com (Robert Gravina)
Date: Fri, 22 Sep 2006 10:05:10 +0900
Subject: [Twisted-Python] New OS X buildbot courtesy of Apple Computer,
	Inc.
In-Reply-To: <20060921180025.1717.206593441.divmod.quotient.55983@ohm>
References: <20060921180025.1717.206593441.divmod.quotient.55983@ohm>
Message-ID: <056347BB-8D17-4FA5-A389-19E544E68E46@gravina.com>

> Today a box arrived in the Twisted Matrix Labs global headquarters  
> (AKA the Divmod offices) containing a tricked-out Xserve G5, sent  
> gratis by Apple Computer to help the Twisted team better support  
> the Macintosh platform.

Yes this is fantastic news!

> First of all, Wilfredo Sanchez, for both getting Apple to use  
> Twisted on a high-profile project in the first place, and driving  
> the process which culminated in the delivery of this beautiful  
> machine.

Just out of interest, what is the name of the Apple product using  
Twisted? Or is it some secret internal project?

Robert



From mwh at python.net  Fri Sep 22 04:39:51 2006
From: mwh at python.net (Michael Hudson)
Date: Fri, 22 Sep 2006 09:39:51 +0100
Subject: [Twisted-Python] Re: New OS X buildbot courtesy of Apple Computer,
	Inc.
References: <20060921180025.1717.206593441.divmod.quotient.55983@ohm>
	<056347BB-8D17-4FA5-A389-19E544E68E46@gravina.com>
Message-ID: <2my7scjnvs.fsf@starship.python.net>

Robert Gravina <robert at gravina.com> writes:

>> Today a box arrived in the Twisted Matrix Labs global headquarters
>> (AKA the Divmod offices) containing a tricked-out Xserve G5, sent
>> gratis by Apple Computer to help the Twisted team better support
>> the Macintosh platform.
>
> Yes this is fantastic news!
>
>> First of all, Wilfredo Sanchez, for both getting Apple to use
>> Twisted on a high-profile project in the first place, and driving
>> the process which culminated in the delivery of this beautiful
>> machine.
>
> Just out of interest, what is the name of the Apple product using
> Twisted? Or is it some secret internal project?

It's (at least) the "Darwin Calendar Server":
http://trac.macosforge.org/projects/calendarserver/

Cheers,
mwh

-- 
  Hmm, that attempt at trolling did not work out as well as I had
  hoped.                                     -- Steve VanDevender, asr




From exarkun at divmod.com  Fri Sep 22 08:58:36 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 22 Sep 2006 08:58:36 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18220 - Make tests clean up
	after themselves
In-Reply-To: <E1GQbmR-00015G-00@wolfwood>
Message-ID: <20060922125836.1717.358516602.divmod.quotient.56721@ohm>

On Thu, 21 Sep 2006 21:32:47 -0600, Jonathan Lange <jml at wolfwood.twistedmatrix.com> wrote:
>Author: jml
>Date: Thu Sep 21 21:32:47 2006
>New Revision: 18220
>
>Modified:
>   trunk/twisted/web/test/test_distrib.py
>   trunk/twisted/web2/test/test_static.py
>   trunk/twisted/words/test/test_service.py
>Log:
>Make tests clean up after themselves
>
> * Fixes #1883
> * Author: jml
> * Reviewer: MFen
>
>Although not apparent to the naked eye, these tests previous did not
>correctly clean up after themselves. Instead, they relied on a couple
>of spins of the reactor to do their cleaning for them. This has been
>corrected.
>
>
>
>Modified: trunk/twisted/web/test/test_distrib.py
>==============================================================================
>--- trunk/twisted/web/test/test_distrib.py	(original)
>+++ trunk/twisted/web/test/test_distrib.py	Thu Sep 21 21:32:47 2006
>@@ -15,16 +15,26 @@
>                 self.logFile.close()
>             del self.logFile
>
>+
>+class PBServerFactory(pb.PBServerFactory):

Docstring?

>+    def buildProtocol(self, addr):
>+        self.proto = pb.PBServerFactory.buildProtocol(self, addr)
>+        return self.proto
>+
>+
> class DistribTest(unittest.TestCase):
>     port1 = None
>     port2 = None
>     sub = None
>
>     def tearDown(self):

Docstring?

>+        dl = [defer.Deferred(), defer.Deferred()]
>+        self.f1.proto.notifyOnDisconnect(lambda: dl[0].callback(None))
>         if self.sub is not None:
>+            self.sub.publisher.broker.notifyOnDisconnect(
>+                lambda: dl[1].callback(None))
>             self.sub.publisher.broker.transport.loseConnection()
>         http._logDateTimeStop()
>-        dl = []
>         if self.port1 is not None:
>             dl.append(self.port1.stopListening())
>         if self.port2 is not None:
>@@ -36,8 +46,8 @@
>         r1 = resource.Resource()
>         r1.putChild("there", static.Data("root", "text/plain"))
>         site1 = server.Site(r1)
>-        f1 = pb.PBServerFactory(distrib.ResourcePublisher(site1))
>-        self.port1 = reactor.listenTCP(0, f1)
>+        self.f1 = PBServerFactory(distrib.ResourcePublisher(site1))
>+        self.port1 = reactor.listenTCP(0, self.f1)
>         self.sub = distrib.ResourceSubscription("127.0.0.1",
>                                                 self.port1.getHost().port)
>         r2 = resource.Resource()
>
>Modified: trunk/twisted/web2/test/test_static.py
>==============================================================================
>--- trunk/twisted/web2/test/test_static.py	(original)
>+++ trunk/twisted/web2/test/test_static.py	Thu Sep 21 21:32:47 2006
>@@ -11,7 +11,6 @@
>         self.text = "Hello, World\n"
>         self.data = static.Data(self.text, "text/plain")
>
>-
>     def test_dataState(self):
>         """
>         Test the internal state of the Data object
>@@ -42,7 +41,6 @@
>                          http_headers.MimeType("text", "plain"))
>         def checkStream(data):
>             self.assertEquals(str(data), self.text)
>-
>         return stream.readStream(iweb.IResponse(self.data.render(None)).stream,
>                                  checkStream)
>
>@@ -58,7 +56,8 @@
>                               maxBytes=16)
>         self.root.addSlash = True
>
>-    def uploadFile(self, fieldname, filename, mimetype, content, resrc=None, host='foo', path='/'):
>+    def uploadFile(self, fieldname, filename, mimetype, content, resrc=None,
>+                   host='foo', path='/'):
>         if not resrc:
>             resrc = self.root
>
>@@ -102,32 +101,33 @@
>         return d
>
>     def test_enforcesMaxBytes(self):

Docstring?

>-        return self.assertInResponse(self.uploadFile('FileNameOne', 'myfilename',
>-                                         'text/html', 'X'*32),
>-                              (200, {}, 'exceeds maximum length'))
>+        return self.assertInResponse(
>+            self.uploadFile('FileNameOne', 'myfilename', 'text/html', 'X'*32),
>+            (200, {}, 'exceeds maximum length'))
>
>     def test_enforcesMimeType(self):

Docstring?

>-        return self.assertInResponse(self.uploadFile('FileNameOne', 'myfilename',
>-                                              'application/x-python', 'X'),
>-                              (200, {}, 'type not allowed'))
>+        return self.assertInResponse(
>+            self.uploadFile('FileNameOne', 'myfilename',
>+                            'application/x-python', 'X'),
>+            (200, {}, 'type not allowed'))
>
>     def test_invalidField(self):

Docstring?

>-        return self.assertInResponse(self.uploadFile('NotARealField', 'myfilename',
>-                                              'text/html', 'X'),
>-                              (200, {}, 'not a valid field'))
>+        return self.assertInResponse(

Docstring?

>+            self.uploadFile('NotARealField', 'myfilename', 'text/html', 'X'),
>+            (200, {}, 'not a valid field'))
>
>     def test_reportFileSave(self):

Docstring?

>-        return self.assertInResponse(self.uploadFile('FileNameOne', 'myfilename',
>-                                              'text/plain',
>-                                              'X'),
>-                              (200, {}, 'Saved file'))
>+        return self.assertInResponse(
>+            self.uploadFile('FileNameOne', 'myfilename', 'text/plain', 'X'),
>+            (200, {}, 'Saved file'))
>
>     def test_compareFileContents(self):

Docstring?

>         def gotFname(fname):
>             contents = file(fname, 'r').read()
>             self.assertEquals(contents, 'Test contents')
>-
>-        return self.uploadFile('FileNameOne', 'myfilename', 'text/plain',
>-                               'Test contents').addCallback(
>-            self.fileNameFromResponse
>-            ).addCallback(gotFname)
>+
>+        d = self.uploadFile('FileNameOne', 'myfilename', 'text/plain',
>+                            'Test contents')
>+        d.addCallback(self.fileNameFromResponse)
>+        d.addCallback(gotFname)
>+        return d
>
>Modified: trunk/twisted/words/test/test_service.py
>==============================================================================
>--- trunk/twisted/words/test/test_service.py	(original)
>+++ trunk/twisted/words/test/test_service.py	Thu Sep 21 21:32:47 2006
>@@ -875,21 +875,26 @@
>         self.portal = portal.Portal(
>             self.realm, [self.checker])
>         self.serverFactory = pb.PBServerFactory(self.portal)
>+        self.serverFactory.protocol = self._protocolFactory
>         self.serverFactory.unsafeTracebacks = True
>         self.clientFactory = pb.PBClientFactory()
>         self.clientFactory.unsafeTracebacks = True
>-
>         self.serverPort = reactor.listenTCP(0, self.serverFactory)
>         self.clientConn = reactor.connectTCP(
>             '127.0.0.1',
>             self.serverPort.getHost().port,
>             self.clientFactory)
>
>+    def _protocolFactory(self, *args, **kw):

Docstring?

>+        self._serverProtocol = pb.Broker(0)
>+        return self._serverProtocol
>
>     def tearDown(self):

Docstring?

>+        d3 = Deferred()
>+        self._serverProtocol.notifyOnDisconnect(lambda: d3.callback(None))
>         return DeferredList([
>             maybeDeferred(self.serverPort.stopListening),
>-            maybeDeferred(self.clientConn.disconnect)])
>+            maybeDeferred(self.clientConn.disconnect), d3])
>
>     def _loggedInAvatar(self, name, password, mind):
>         creds = credentials.UsernamePassword(name, password)
>
>_______________________________________________
>Twisted-commits mailing list
>Twisted-commits at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-commits
>



From glyph at divmod.com  Fri Sep 22 10:21:09 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 22 Sep 2006 10:21:09 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18220 - Make tests
	clean up after themselves
In-Reply-To: <20060922125836.1717.358516602.divmod.quotient.56721@ohm>
Message-ID: <20060922142109.1717.41196416.divmod.quotient.56788@ohm>

On Fri, 22 Sep 2006 08:58:36 -0400, Jean-Paul Calderone <exarkun at divmod.com> wrote:

>Docstring?

I'd like to direct all reviewers' attention at this point to the excellent wiki page that Chris and JP wrote a little while ago:

    http://twistedmatrix.com/trac/wiki/ReviewProcess

Especially to this section:

"""

  A reviewer must reject a set of changes in any of the following circumstances:

    * The test suite fails on any of the supported* platforms as a result of the changes.
    * The changes alter the behavior of code in a way which is not tested.
    * The changes add new behavior without adding test coverage for that behavior.
    * The changes modify public APIs which are undocumented (ie, a function which has no docstring is modified, or a class which has no docstring has methods added to it) without adding documentation.
    * The changes modify the behavior of a documented API without updating the documentation.
    * The changes violate the coding standard.

"""



From corydodt at gmail.com  Fri Sep 22 11:12:20 2006
From: corydodt at gmail.com (Cory Dodt)
Date: Fri, 22 Sep 2006 08:12:20 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] r18220 - Make tests clean
	up after themselves
In-Reply-To: <20060922142109.1717.41196416.divmod.quotient.56788@ohm>
References: <20060922125836.1717.358516602.divmod.quotient.56721@ohm>
	<20060922142109.1717.41196416.divmod.quotient.56788@ohm>
Message-ID: <c16a94ff0609220812j756bea39ld5e0e52495597c65@mail.gmail.com>

   * The changes modify public APIs which are undocumented (ie, a function
which has no docstring is modified, or a class which has no docstring has
methods added to it) without adding documentation.

Since when are tests public APIs?

C

On 9/22/06, glyph at divmod.com <glyph at divmod.com> wrote:
>
> On Fri, 22 Sep 2006 08:58:36 -0400, Jean-Paul Calderone <
> exarkun at divmod.com> wrote:
>
> >Docstring?
>
> I'd like to direct all reviewers' attention at this point to the excellent
> wiki page that Chris and JP wrote a little while ago:
>
>     http://twistedmatrix.com/trac/wiki/ReviewProcess
>
> Especially to this section:
>
> """
>
>   A reviewer must reject a set of changes in any of the following
> circumstances:
>
>     * The test suite fails on any of the supported* platforms as a result
> of the changes.
>     * The changes alter the behavior of code in a way which is not tested.
>     * The changes add new behavior without adding test coverage for that
> behavior.
>     * The changes modify public APIs which are undocumented (ie, a
> function which has no docstring is modified, or a class which has no
> docstring has methods added to it) without adding documentation.
>     * The changes modify the behavior of a documented API without updating
> the documentation.
>     * The changes violate the coding standard.
>
> """
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060922/25f78d5f/attachment.htm 

From exarkun at divmod.com  Fri Sep 22 11:33:26 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 22 Sep 2006 11:33:26 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18220 - Make tests clean
	up after themselves
In-Reply-To: <c16a94ff0609220812j756bea39ld5e0e52495597c65@mail.gmail.com>
Message-ID: <20060922153326.1717.480256014.divmod.quotient.56844@ohm>

On Fri, 22 Sep 2006 08:12:20 -0700, Cory Dodt <corydodt at gmail.com> wrote:
>   * The changes modify public APIs which are undocumented (ie, a function
>which has no docstring is modified, or a class which has no docstring has
>methods added to it) without adding documentation.
>
>Since when are tests public APIs?

All test methods must have their intent documented.

I'll clarify this section on the wiki.

Jean-Paul



From glyph at divmod.com  Fri Sep 22 11:36:26 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 22 Sep 2006 11:36:26 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18220 - Make tests clean
	up after themselves
In-Reply-To: <c16a94ff0609220812j756bea39ld5e0e52495597c65@mail.gmail.com>
Message-ID: <20060922153626.1717.349270098.divmod.quotient.56847@ohm>

On Fri, 22 Sep 2006 08:12:20 -0700, Cory Dodt <corydodt at gmail.com> wrote:
>   * The changes modify public APIs which are undocumented (ie, a function
>which has no docstring is modified, or a class which has no docstring has
>methods added to it) without adding documentation.
>
>Since when are tests public APIs?

Hmm, good point, I guess "public API" is a bit misleading there.

Tests also need docstrings to explain what they're testing, and what code they're supposed to cover.  The test docstrings need to explain the verified constraints of the public API, or to explicitly say "this is not testing a public API" - although the vast majority of tests are verifying at least some behavior of a public API, although not directly.

I'll update that document a bit later.



From corydodt at gmail.com  Fri Sep 22 11:59:01 2006
From: corydodt at gmail.com (Cory Dodt)
Date: Fri, 22 Sep 2006 08:59:01 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] r18220 - Make tests clean
	up after themselves
In-Reply-To: <20060922153626.1717.349270098.divmod.quotient.56847@ohm>
References: <c16a94ff0609220812j756bea39ld5e0e52495597c65@mail.gmail.com>
	<20060922153626.1717.349270098.divmod.quotient.56847@ohm>
Message-ID: <c16a94ff0609220859i3acae18ep68b1ecf4a21ad6e3@mail.gmail.com>

I'm all for having more documentation.  When I reviewed that bug I went by
the strictest interpretation of ReviewProcess, which it seems wasn't clear.
I'm glad it'll get clarified.

Thanks!

C

On 9/22/06, glyph at divmod.com <glyph at divmod.com> wrote:
>
> On Fri, 22 Sep 2006 08:12:20 -0700, Cory Dodt <corydodt at gmail.com> wrote:
> >   * The changes modify public APIs which are undocumented (ie, a
> function
> >which has no docstring is modified, or a class which has no docstring has
> >methods added to it) without adding documentation.
> >
> >Since when are tests public APIs?
>
> Hmm, good point, I guess "public API" is a bit misleading there.
>
> Tests also need docstrings to explain what they're testing, and what code
> they're supposed to cover.  The test docstrings need to explain the verified
> constraints of the public API, or to explicitly say "this is not testing a
> public API" - although the vast majority of tests are verifying at least
> some behavior of a public API, although not directly.
>
> I'll update that document a bit later.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060922/3c2f7262/attachment.htm 

From ellisonbg.net at gmail.com  Fri Sep 22 13:38:40 2006
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Fri, 22 Sep 2006 11:38:40 -0600
Subject: [Twisted-Python] PB over SSH
In-Reply-To: <20060922005406.1717.2081837661.divmod.quotient.56250@ohm>
References: <34457a4c0609202013j41faa26bp9d4e256cb0d71189@mail.gmail.com>
	<20060922005406.1717.2081837661.divmod.quotient.56250@ohm>
Message-ID: <6ce0ac130609221038w42a07393t63bad06ec8a2b099@mail.gmail.com>

When I have needed this I have just used SSH tunneling.  It works like a charm.

Brian

On 9/21/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Wed, 20 Sep 2006 22:13:38 -0500, Aron Bierbaum <aronbierbaum at gmail.com> wrote:
> >Is there currently any way to us PB over a SSH connection? I noticed that
> >there was a post on this list back in Feb 2004, but I didn't see anyone
> >mention it after that. If anyone has any sample code that does this I would
> >greatly appreciate it.
>
> PB requires a particular API from its transport, like many protocols.  It is
> entirely possible to implement this API in terms of SSH, and probably not even particularly difficult.  However, no one has done this yet (and contributed the result to Twisted), so if you will need to if you want to run PB over SSH.
>
> Running PB over SSL is significantly easier and may provide all of the features you are looking for.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From stephen at thorne.id.au  Sat Sep 23 07:42:18 2006
From: stephen at thorne.id.au (Stephen Thorne)
Date: Sat, 23 Sep 2006 21:42:18 +1000
Subject: [Twisted-Python] New OS X buildbot courtesy of Apple Computer,
	Inc.
In-Reply-To: <20060921180025.1717.206593441.divmod.quotient.55983@ohm>
Message-ID: <20060923114218.1717.1845542246.divmod.quotient.57618@ohm>

On Thu, 21 Sep 2006 14:00:25 -0400, glyph at divmod.com wrote:
>And finally, thanks to Stephen Thorne, who has been tirelessly keeping our 
>tests running on a personal machine, and helping to keep the OS X platform 
>supported until now.  Stephen, you can finally turn it off :-).

Well, I've been considering trying out this loonix thing. I'm going to see how you bun two runs on my powermac. :)

Please remove the OS-X column on the buildslave, but if it's no hassle, please leave the pypy column there. I'm going to be hacking on that when I get back from my week away.

Regards,
Stephen Thorne.



From glyph at divmod.com  Sat Sep 23 22:20:46 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 23 Sep 2006 22:20:46 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
 corefoundation, threadedselect, wx
In-Reply-To: 0
Message-ID: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>

There are a few reactors in the twisted codebase which currently have no maintainer and do not pass the test suite.  I've listed them in the subject of this message.

I'm comfortable to leave half-supported or potentially broken reactors in the Twisted distribution, as long as they were clearly marked as such and there was some at least potential path to making them work.  IOCP, for example, is good enough for many uses despite not passing the full test suite (and there are rumours of a new buildbot for it appearing soon...)  However, leaving a pile of known-to-be-broken and unmaintained reactors in Twisted is just going to give the impression that Twisted is buggy, and increase the amount of dead code that people reading the codebase can be confused by.

The reactors presented in the subject all seem to have been abandoned.  Even our friends at Apple are mainly concerned with the use of Twisted for server work, and while they've been attempting to help us find someone to poke around GUI <-> reactor integration on OS X, it's not their area of expertise.

At this point, I believe that setting up a buildslave for any of these reactors should be possible with our existing build infrastructure.  Of course, contributions of additional buildslaves are always welcome :), but we can set up slaves for wx and corefoundation ourselves if someone is going to actually start trying to fix them.

I know that there are people in the Twisted community integrating it with wxpython and qt.  I'd really like it if someone could commit to at least contributing some patches in the future.

If I don't hear anything on these fronts before the Twisted 2.6 release, those reactors will be removed from SVN trunk at HEAD and not be included in the 2.6 release.  (The next planned release is Twisted 2.5, so you still have some breathing room.)

Currently qtreactor is being tested on the "reactors" buildslave and is keeping it red, despite the fact that all the other reactors on that slave work fine (modulo a few elusive race conditions).  wxreactor is not being tested at all.  I believe we should split qt out so that it can have its own red column and not interfere with the gtk and poll reactors, and if we run a wx slave it should also be separate.

Although I know of Qt and WX users, I do not know of anyone currently using the corefoundation reactor in an application.  Are you out there?  Is it being used?

The last word I heard on the corefoundation reactor was from its author, Bob Ippolito, who suggested that it was not the correct way to integrate Twisted with GUI applications.  However, his suggested replacement (threadedselectreactor) is buggy, also unmaintained, and IMHO misdesigned, so in the absence of other knowledge I believe that continuing to provide some corefoundation support would be the best way to support the mac.  After receiving a shiny new computer from them I feel inclined to do the best job possible to support Apple's platform, but I simply don't have the time, knowledge, or energy to do the development myself.

With the aforementioned hardware, I believe it would not be much trouble for us to set up a corefoundation reactor buildslave of our own, but we still need someone who will actually work on fixing the bugs, otherwise, the code should be removed.

threadedselectreactor is an interesting concept but hopelessly broken and untested in its current implementation.  I believe it should definitely be removed as a reactor of its own, although as a supporting basis for other reactors it might be good to leave around.  While not entirely correct, it is certainly _less_ broken than the previous ghastly attempt at a wxreactor.  I think it would be a good idea to remove threadedselect from the reactors list in Twisted 2.6, although if someone wants to convince me otherwise with a use-case (and a similar promise of future patches), I'd be happy to hear it.

Once all these reactors have dedicated buildslaves and pass the tests, it is far less important that we have dedicated maintainers.  We can simply insist that all future commits keep all the buildslaves green.  I say this because I want to be clear that I am not asking for a lifetime commitment or we are going to instantly desupport your platform: I'm asking for help getting to the point where we can support multiple platforms without having to be experts in all of them.



From waterbug at pangalactic.us  Sat Sep 23 23:33:11 2006
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Sat, 23 Sep 2006 23:33:11 -0400
Subject: Other wx/twisted methods (was Re: [Twisted-Python] removing
	unsupported
	reactors in twisted 2.6: qt, corefoundation, threadedselect, wx)
In-Reply-To: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
References: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
Message-ID: <4515FC77.60407@pangalactic.us>

Hi Glyph,

I completely agree with your position on moving those reactors out of
the production Twisted codebase.  The only one remotely interesting to
me is the wx reactor, but having thought about this issue for a long
time, I've decided to try the Pyro connection (proposed by someone).

If I can get that to work (which I haven't had time to play with yet),
it would seem to offer several advantages:  (1) running wx and twisted
event loops in completely separate processes, (2) making relatively
minimal use of threads in the wx process (well-supported by the wx
libraries) to drive Pyro, and using the usual twisted paradigm in
the twisted process.  I would appreciate any advice, but I don't see
any show-stoppers.  I would do the Pyro communications on 127.0.0.1,
since Pyro has essentially zero security, keeping it completely within
the local machine.  Twisted would handle all external protocols.

Thoughts?

Cheers,
Steve



From felipe.lessa at gmail.com  Sat Sep 23 23:44:03 2006
From: felipe.lessa at gmail.com (Felipe Almeida Lessa)
Date: Sun, 24 Sep 2006 00:44:03 -0300
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
References: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
Message-ID: <c2701f5c0609232044y5c2b6b79k58c10ef3f5488144@mail.gmail.com>

2006/9/23, glyph at divmod.com <glyph at divmod.com>:
[snip]
> Although I know of Qt and WX users, I do not know of anyone currently using the corefoundation reactor in an application.  Are you out there?  Is it being used?
[snip]

So the only GUI toolkits that will be officialy supported are going to
be Gtk, Tk and PyUI?

-- 
Felipe.



From glyph at divmod.com  Sun Sep 24 00:16:16 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 Sep 2006 00:16:16 -0400
Subject: Other wx/twisted methods (was Re: [Twisted-Python] removing
	unsupported
	reactors in twisted 2.6: qt, corefoundation, threadedselect, wx)
In-Reply-To: <4515FC77.60407@pangalactic.us>
Message-ID: <20060924041616.1717.1221777311.divmod.quotient.58251@ohm>

On Sat, 23 Sep 2006 23:33:11 -0400, Stephen Waterbury <waterbug at pangalactic.us> wrote:

>If I can get that to work (which I haven't had time to play with yet),
>it would seem to offer several advantages:  (1) running wx and twisted
>event loops in completely separate processes, (2) making relatively
>minimal use of threads in the wx process (well-supported by the wx
>libraries) to drive Pyro, and using the usual twisted paradigm in
>the twisted process.  I would appreciate any advice, but I don't see
>any show-stoppers.  I would do the Pyro communications on 127.0.0.1,
>since Pyro has essentially zero security, keeping it completely within
>the local machine.  Twisted would handle all external protocols.

Thanks for the suggestion, Stephen.  I don't think I like this approach though.

The major reason is that it introduces a process boundary between Twisted code and WX code.  In every other toolkit Twisted supports, you can handle GUI events and network events in the same process, in the same thread.   That makes it possible to have individual state machines which can emit output in the form of either GUI updates and writes to streams, and you can similarly receive GUI events or data from the network as input.

Keep in mind that each of the toolkits that WX backends to already *has* either a supported reactor or a proof of concept for Twisted integration: GTK+, the Win32 event loop, and Cococa.  It's not that we can't get network I/O notifications from the platform.  The real problem here is that WX obscures the underlying APIs for integrating sockets.  (I say "obscures" rather than "does not wrap" because the last time I tried to use gtk reactor with a gtk build of wx, the process segfaulted after emitting a pile of dynamic linker errors.  I have no idea what would happen on Windows or the Mac.)  Whatever we're going to do at this point without getting some new code from the WX developers is going to be a workaround.

That said, the mechanism that you propose may be the best way to practically integrate Twisted and WX today.  If it is, I think that it would work better as a separate project, because it is a workaround with a lot of pointy edges and not a real solution.

One major reason I'd like a WX reactor to continue to exist in some form is OSAF's usage of Twisted and WX.  They have a similarly baroque model for handing data back and forth between Twisted code and GUI code, and I'd love to have something to propose to them that was (A) supported by Twisted (B) well tested, and (C) didn't involve lots of potential race conditions, as all shared-state-threading code was likely to do.  I haven't looked at it in a while, but if I remember correctly their separation between Twisted code and GUI code was fairly clean and well-thought-out, but the separation would have been unnecessary if wx had native Twisted integration.

There are other problems with a Pyro-driven Twisted subprocess, which are relevant as the goal here is a well-supported and well-tested path for integration.

Multiprocess communication and process spawning, especially on Windows, is fraught with peril.  We've been working on reliable event-driven process spawning in Twisted for years and years, and only recently have we gotten to the point where the published API works reliably cross-platform.  Given that Twisted would be left out of this loop, I imagine the process control would be rather ad-hoc, so getting the Twisted and WX processes synchronized would be problematic, and extremely hard to unit test.  Although it would be slightly easier if the Twisted proces is 'on top', you still have to inject test code into both the parent and child processes, and have a way to verify the state of both.

The last release of pyro is almost a year old.  That suggests it is not actively maintained.

Pyro doesn't have a buildbot, or (as far as I can tell from the release) any automated tests of its own.  That would make it a wash in terms of tested, robust integration support.

You'd have to re-implement the Pyro protocol on top of Twisted to communicate with it without spawning lots of threads.  That's a bunch of new code which is going to need a home, again, possibly a whole new project.  Even after that's done, Pyro is going to be spawning threads and blocking inside the WX process because the Twisted implementation isn't running there.



From glyph at divmod.com  Sun Sep 24 00:31:49 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 Sep 2006 00:31:49 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, corefoundation, threadedselect, wx
In-Reply-To: <c2701f5c0609232044y5c2b6b79k58c10ef3f5488144@mail.gmail.com>
Message-ID: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>

On Sun, 24 Sep 2006 00:44:03 -0300, Felipe Almeida Lessa <felipe.lessa at gmail.com> wrote:

>So the only GUI toolkits that will be officialy supported are going to
>be Gtk, Tk and PyUI?

Thanks for reminding me.

Neither Tk nor PyUI have buildbots.  However, they're both implemented using polling timed events running on top of another reactor... I don't know how much "support" those really count for.  It might be good to remove them as well, but they're very little code.

GTK is supported, has a buildbot, and is currently green.  Frankly, the people who currently do at least 90% of the maintenance on Twisted (myself included) only care about this toolkit, so it's the one that is likely to remain the best supported.  It is my sincere hope that someone will port GTK to the Cocoa APIs for OS X at some point in the near future.  Then I can cease caring even about corefoundation ;).

The Win32 event loop is also supported, although its buildbot still isn't green yet.  That is a "toolkit" of sorts.  I think that it might even work with MFC but I'm a bit murky on the details.

So, yes, the situation is even worse than you suggest; unless someone else volunteers to help, we will have 2 supported toolkits: GTK, and GDI.

Twisted's architecture was developed with GUI toolkits in mind, and I would like it to support as many as possible.  I hope that one day, all toolkit developers will actually care whether Twisted supports their code or not.  Until now, though, it seems that we have been unable to attract the attention of even one member of each community with the appropriate experience and motivation to help out.



From exarkun at twistedmatrix.com  Sun Sep 24 01:05:03 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Sep 2006 05:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1159074303.17.1519694493@twistedmatrix.com

Bug summary
______________________
Summary for 2006-09-17 through 2006-09-24
Bugs opened: 26    Bugs closed: 26  Total open bugs: 730 (+0)

|== Type Changes   |== Priority Changes   |== Component Changes     
|Defect:       -1  |Highest:  -9          |Conch:               +4  
|Enhancement:  +4  |High:     +1          |Core:                -1  
|Task:         -3  |Normal:   +8          |Release Management:  -1  
                   |Low:      +0          |Trial:               -1  
                                          |Web:                 -2  
                                          |Web2:                +3  
                                          |Web2.Dav:            +1  
                                          |Website:             -2  
                                          |Words:               -1  


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2098] XMPP SASL implementation chokes when no realm has been received (opened by ralphm)
    defect          words      http://twistedmatrix.com/trac/ticket/2098

[#2099] manhole telnet server broken (opened by exarkun)
    defect          conch      http://twistedmatrix.com/trac/ticket/2099

[#2100] new defgen for python 2.5 enhanced generators (opened by jknight)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2100

[#2118] ICredentialFactory.decode() should take a request instead of an HTTP method name (opened by wsanchez) (CLOSED, fixed)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2118

[#2119] Need a location: header for CREATED response (opened by wsanchez) (CLOSED, fixed)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2119

                    ===== High =====
[#2102] Access log has multiple copies of the same entry (opened by Cyrus Daboo)
    defect          web2       http://twistedmatrix.com/trac/ticket/2102

[#2103] http DIGEST authentication forced on each page refresh (opened by Cyrus Daboo) (CLOSED, duplicate)
    defect          web2       http://twistedmatrix.com/trac/ticket/2103

[#2104] HTTP digest authentication forced for each page refresh (opened by Cyrus Daboo)
    defect          web2       http://twistedmatrix.com/trac/ticket/2104

                    ===== Normal =====
[#2101] Coding standard should fallback to PEP 8 (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2101

[#2105] Go over the web2.dav API docs again (opened by wsanchez)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2105

[#2107] [patch] Greatly improve telnet performance (opened by shieldszero)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2107

[#2109] twisted.web.server imports pb from spread (opened by ghazel) (CLOSED, wontfix)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2109

[#2110] finger tutorial uses unclear python idioms. (opened by jerub)
    defect          core       http://twistedmatrix.com/trac/ticket/2110

[#2111] test trac r3756 irc/ticket creation integration (opened by exarkun) (CLOSED, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2111

[#2112] conch tests make heavy use of deprecated assert* free functions (opened by exarkun)
    defect          conch      http://twistedmatrix.com/trac/ticket/2112

[#2113] support uploads from Macromedia Flash plugins (opened by yacc)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2113

[#2114] t.conch.test.test_cftp uses reactor.iterate() (opened by jml) (CLOSED, duplicate)
    defect          conch      http://twistedmatrix.com/trac/ticket/2114

[#2115] manhole and exception (opened by synapsis)
    defect          conch      http://twistedmatrix.com/trac/ticket/2115

[#2116] sshsimpleserver.py on Windows (opened by synapsis)
    defect          conch      http://twistedmatrix.com/trac/ticket/2116

[#2117] Buildslaves without find and xargs fail remove pyc step (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2117

[#2122] Expose various accept failures to application-level code (opened by exarkun)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2122

[#2123] t.c.t.test_manhole.ManholeLoopbackStdio.testControlBackslash fails intermittently (opened by dreid)
    defect          conch      http://twistedmatrix.com/trac/ticket/2123

                    ===== Low =====
[#2106] t.p.versions needs to be updated to handle Subversion 1.4 (opened by oubiwann) (CLOSED, duplicate)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2106

[#2108] Yaarr, the docks be needing translations for the scurvy dogs. (opened by jerub) (CLOSED, wontfix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2108

[#2120] usage.Options breaks with short subcommand names longer than 1 char (opened by msalib) (CLOSED, duplicate)
    defect          core       http://twistedmatrix.com/trac/ticket/2120

[#2121] usage.Options breaks with short subcommand names longer than 1 char (opened by msalib)
    defect          core       http://twistedmatrix.com/trac/ticket/2121



Closed Bugs
______________________
                    ===== Highest =====
[#1507] trial doesn't gc.collect between test methods (opened by jknight, closed by jml, fixed)
    defect          trial      http://twistedmatrix.com/trac/ticket/1507

[#2054] ProperlyCloseFilesTestCase.testProperlyCloseFiles written in an aggressively stupid manner (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2054

[#1970] "admin/release-twisted --help" contains typo (opened by exarkun, closed by radix, fixed)
    defect          release management http://twistedmatrix.com/trac/ticket/1970

[#1968] twisted.python.versions uses implementation detail of SVN, broken on 1.4 (opened by jknight, closed by radix, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1968

[#1883] Make selected tests clean up after themselves (opened by jml, closed by jml, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1883

[#2089] twisted.words.protocol.irc.IRC.whois references undefined variable RPL_WHOISOPER, (opened by jerub, closed by moonfallen, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/2089

[#2086] t.words.basesupport attributeerror when "already connecting" (opened by moonfallen, closed by moonfallen, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/2086

[#2119] Need a location: header for CREATED response (opened by wsanchez, closed by wsanchez, fixed)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2119

[#2118] ICredentialFactory.decode() should take a request instead of an HTTP method name (opened by wsanchez, closed by wsanchez, fixed)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2118

[#662 ] twisted.internet does not handle EMFILE (Too many files) (opened by jdahlin, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/662

[#1910] delete deprecated crud from twisted.python.log (opened by radix, closed by glyph, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1910

[#1694] killing a process (opened by synapsis, closed by glyph, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1694

[#1550] [PATCH] requestReceived drops arguments after two or more '?' in the uri (opened by zectbumo, closed by exarkun, fixed)
    defect          web        http://twistedmatrix.com/trac/ticket/1550

[#2020] tkmktap is broken and probably useless, eliminate it (opened by exarkun, closed by radix, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2020

                    ===== High =====
[#2103] http DIGEST authentication forced on each page refresh (opened by Cyrus Daboo, closed by dreid, duplicate)
    defect          web2       http://twistedmatrix.com/trac/ticket/2103

[#1080] twisted.web.client _parse URL parse bug (opened by gentoo.cn, closed by glyph, fixed)
    defect          web        http://twistedmatrix.com/trac/ticket/1080

                    ===== Normal =====
[#2077] Add a report for "Tickets Pending Review" (opened by jml, closed by jml, invalid)
    enhancement     website    http://twistedmatrix.com/trac/ticket/2077

[#2111] test trac r3756 irc/ticket creation integration (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2111

[#1885] test_ssh.UtilityTestCase.testCounter emits DeprecationWarning in python2.5 (opened by jknight, closed by exarkun, fixed)
    defect          conch      http://twistedmatrix.com/trac/ticket/1885

[#2114] t.conch.test.test_cftp uses reactor.iterate() (opened by jml, closed by jml, duplicate)
    defect          conch      http://twistedmatrix.com/trac/ticket/2114

[#1543] Request for Documentation: How to Review a Branch (opened by jml, closed by jml, fixed)
    defect          website    http://twistedmatrix.com/trac/ticket/1543

[#2109] twisted.web.server imports pb from spread (opened by ghazel, closed by jknight, wontfix)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2109

                    ===== Low =====
[#2106] t.p.versions needs to be updated to handle Subversion 1.4 (opened by oubiwann, closed by jknight, duplicate)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2106

[#2108] Yaarr, the docks be needing translations for the scurvy dogs. (opened by jerub, closed by jknight, wontfix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2108

[#2120] usage.Options breaks with short subcommand names longer than 1 char (opened by msalib, closed by exarkun, duplicate)
    defect          core       http://twistedmatrix.com/trac/ticket/2120

[#191 ] twisted.internet refactor to better support non-select reactors (opened by etrepum, closed by glyph, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/191





From felipe.lessa at gmail.com  Sun Sep 24 01:10:00 2006
From: felipe.lessa at gmail.com (Felipe Almeida Lessa)
Date: Sun, 24 Sep 2006 02:10:00 -0300
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
References: <c2701f5c0609232044y5c2b6b79k58c10ef3f5488144@mail.gmail.com>
	<20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
Message-ID: <c2701f5c0609232210w69944ffl5787230a1757e330@mail.gmail.com>

2006/9/24, glyph at divmod.com <glyph at divmod.com>:
> Frankly, the people who currently do at least 90% of the maintenance on Twisted (myself included) only care about this toolkit, so it's the one that is likely to remain the best supported.

I'm developing a small Twisted application and was planning to write
it using wx to learn how to use this toolkit, that's why I asked about
it. Looking at the docs and the source, it sounds like wxreactor works
nicely -- the author says that tests are expected to fail --, so it's
somewhat disappointing to know that it's going to be removed from the
new Twisted version. Nevertheless, I don't have the knowledge to fix
whatever bugs it have.

So maybe I'll stick with Gtk =).

Thanks,

-- 
Felipe.



From uwe at oss4u.com  Sun Sep 24 01:41:23 2006
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 23 Sep 2006 22:41:23 -0700
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
References: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
Message-ID: <200609232241.23444.uwe@oss4u.com>

Well, for me the threadedselectreactor works quite nicely with wx.
It has it's flaws and I've spent some time working around them. On the other 
hand if that reactor is dropped, I'd rather drop Twisted from my application 
than rewrite the GUI part with a toolkit that kind of sucks and looks like 
crap on most platforms (i.e. GTK or TK).
I like Twisted PB and I like wx - that's pretty much all I have to say about 
this.  Let's say it this way: the network part of an application is what 
makes it work, the GUI part is what makes the money - guess what's dropped 
first :-(

UC


On Saturday 23 September 2006 21:31, glyph at divmod.com wrote:
> On Sun, 24 Sep 2006 00:44:03 -0300, Felipe Almeida Lessa 
<felipe.lessa at gmail.com> wrote:
> >So the only GUI toolkits that will be officialy supported are going to
> >be Gtk, Tk and PyUI?
>
> Thanks for reminding me.
>
> Neither Tk nor PyUI have buildbots.  However, they're both implemented
> using polling timed events running on top of another reactor... I don't
> know how much "support" those really count for.  It might be good to remove
> them as well, but they're very little code.
>
> GTK is supported, has a buildbot, and is currently green.  Frankly, the
> people who currently do at least 90% of the maintenance on Twisted (myself
> included) only care about this toolkit, so it's the one that is likely to
> remain the best supported.  It is my sincere hope that someone will port
> GTK to the Cocoa APIs for OS X at some point in the near future.  Then I
> can cease caring even about corefoundation ;).
>
> The Win32 event loop is also supported, although its buildbot still isn't
> green yet.  That is a "toolkit" of sorts.  I think that it might even work
> with MFC but I'm a bit murky on the details.
>
> So, yes, the situation is even worse than you suggest; unless someone else
> volunteers to help, we will have 2 supported toolkits: GTK, and GDI.
>
> Twisted's architecture was developed with GUI toolkits in mind, and I would
> like it to support as many as possible.  I hope that one day, all toolkit
> developers will actually care whether Twisted supports their code or not. 
> Until now, though, it seems that we have been unable to attract the
> attention of even one member of each community with the appropriate
> experience and motivation to help out.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
	UC

--
Open Source Solutions 4U, LLC	1618 Kelly St
Phone:  +1 707 568 3056		Santa Rosa, CA 95401
Cell:   +1 650 302 2405		United States
Fax:    +1 707 568 6416



From jml at mumak.net  Sun Sep 24 03:26:10 2006
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 24 Sep 2006 17:26:10 +1000
Subject: [Twisted-Python] Removing _wait from Trial
Message-ID: <d06a5cd30609240026y3b50e953s472e4dd4eb70fb06@mail.gmail.com>

So, I would like to remove _wait() from Trial and make it work like a
regular Twisted application. I've had all this stuff on my brain, and
have decided to dump it here for feedback. Here's how the plan looks
at the moment[1]:


1. Deprecate the use of reactor-spinning things within tests. (Twisted 2.5)

We've already done a great deal of work on this. spinWhile, spinUntil
and util.wait have alll been deprecated and removed.

#2090 (ready for review) actually issues deprecation warnings when the
reactor is iterated, crashed or stopped within a test.

Unfortunately, some of Trial's cleanup code spins the reactor (see
t.trial.util._Janitor.do_cleanPending). This has to go.


2. Tighten test cleanup errors. (Twisted 2.5)

#2091 (ready for review) fulfils a long-standing promise. The "reactor
unclean" warnings have been turned into errors. It doesn't help us
remove _wait, but

To remove _wait, we'll also have to remove the two calls to
reactor.iterate() from _Janitor (see #2092). That means that many
tests that *thought* they were cleaning up the reactor properly will
find out that they weren't. We can reduce the number of errors by
simulating reactor.iterate() using callLater. However, experiments
show that even with this bandaid, there will still be new errors in
the Twisted suite.

That means we will have to either:
a) surprise our users with new errors in their tests
b) find some way to introduce this gradually.

Obviously everyone[2] would prefer b). I've filed #2124 explaining how
that might work.


3. Introduce asynchronous APIs to Trial (Twisted 2.6)

Currently TestCase.run() is a blocking call. I wish it could remain a
blocking call, but it can't.

The branch for #1781 makes a SyncTestCase and an AsyncTestCase. run()
works in SyncTestCase and doesn't work in AsyncTestCase. For
AsyncTestCase, one uses runDeferred().

Although the branch for #1781 will need to be abandoned, these new
classes should be brought in for Twisted 2.6 (without breaking run()).
Naturally, this affects many, many tests in Trial.

We might even add runDeferred to TestSuite at this point.


4. Deprecate TestSuite.run and TestCase.run. (Twisted 2.6)

Neither of these will work without wait[3] and they are both public
APIs. Also remove the calls to iterate() from _Janitor at this point.


5. Actually remove _wait. (Twisted 2.7)

Add runDeferred() to TestSuite, make run() raise NotImplementedErrors
for TestCase and TestSuite. Alter TrialSuite to start and stop the
reactor.

I can't find a theory to explain why this change will break unexpected
tests in the Twisted suite. However, it will certainly happen. That
means that some tests in user code will probably break as well. I
don't know how we could make this any smoother.


Questions:
- What should I do with the ticket #1781?
- What should I do with the branch for #1781?
- What more can we do to reduce the number of tests that will break
when _wait is removed?
- Thoughts?

thanks for getting this far :),
jml

[1] Incidentally, all of this would be superfluous if reactors were restartable.
[2] Well, almost everyone
[3] ... or restartable reactors.



From waterbug at pangalactic.us  Sun Sep 24 04:53:54 2006
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Sun, 24 Sep 2006 04:53:54 -0400
Subject: Other wx/twisted methods (was Re: [Twisted-Python]
	removing	unsupported
	reactors in twisted 2.6: qt, corefoundation, threadedselect, wx)
In-Reply-To: <20060924041616.1717.1221777311.divmod.quotient.58251@ohm>
References: <20060924041616.1717.1221777311.divmod.quotient.58251@ohm>
Message-ID: <451647A2.3000709@pangalactic.us>

glyph at divmod.com wrote:
> On Sat, 23 Sep 2006 23:33:11 -0400, Stephen Waterbury 
> <waterbug at pangalactic.us> wrote:
> 
>> If I can get that to work (which I haven't had time to play with yet),
>> it would seem to offer several advantages:  (1) running wx and twisted
>> event loops in completely separate processes, (2) making relatively
>> minimal use of threads in the wx process (well-supported by the wx
>> libraries) to drive Pyro, and using the usual twisted paradigm in
>> the twisted process.  I would appreciate any advice, but I don't see
>> any show-stoppers.  I would do the Pyro communications on 127.0.0.1,
>> since Pyro has essentially zero security, keeping it completely within
>> the local machine.  Twisted would handle all external protocols.
> 
> Thanks for the suggestion, Stephen.  I don't think I like this approach 
> though.
> 
> The major reason is that it introduces a process boundary between 
> Twisted code and WX code.

I see that as a *good* thing.  ;)

> In every other toolkit Twisted supports,

... of which there's really only *one* (GTK) that's at all
interesting to anyone doing cross-platform apps ... and
even that one, IMO, isn't very cross-platform, although
that could certainly be argued either way ...

> you 
> can handle GUI events and network events in the same process, in the 
> same thread.   That makes it possible to have individual state machines 
> which can emit output in the form of either GUI updates and writes to 
> streams, and you can similarly receive GUI events or data from the 
> network as input.

Okay.  I'm willing to do without that.

> Keep in mind that each of the toolkits that WX backends to already *has* 
> either a supported reactor or a proof of concept for Twisted 
> integration: GTK+, the Win32 event loop, and Cococa.  It's not that we 
> can't get network I/O notifications from the platform.  The real problem 
> here is that WX obscures the underlying APIs for integrating sockets.  
> (I say "obscures" rather than "does not wrap" because the last time I 
> tried to use gtk reactor with a gtk build of wx, the process segfaulted 
> after emitting a pile of dynamic linker errors.  I have no idea what 
> would happen on Windows or the Mac.)  Whatever we're going to do at this 
> point without getting some new code from the WX developers is going to 
> be a workaround.

I think *that* is the real problem ... not technical, just interest
from the right people.  I've waited enough years (about 5) that
I've given up on that.

> That said, the mechanism that you propose may be the best way to 
> practically integrate Twisted and WX today.  If it is, I think that it 
> would work better as a separate project, because it is a workaround with 
> a lot of pointy edges and not a real solution.

What's reality?  :)  OTOH ...
I completely agree that it should not be part of Twisted
at all ... but if I succeed with it, I'll certainly document what I
do.

> One major reason I'd like a WX reactor to continue to exist in some form 
> is OSAF's usage of Twisted and WX.  They have a similarly baroque model 
> for handing data back and forth between Twisted code and GUI code, ...

... and everything else (sorry, couldn't resist ;) ...

> ... and 
> I'd love to have something to propose to them that was (A) supported by 
> Twisted (B) well tested, and (C) didn't involve lots of potential race 
> conditions, as all shared-state-threading code was likely to do.  I 
> haven't looked at it in a while, but if I remember correctly their 
> separation between Twisted code and GUI code was fairly clean and 
> well-thought-out,

... hmmm ... I've been on all the OSAF Chandler/Scooby/Cosmo lists
since April (and that's a lot of freakin' mail ;), and not *once* in
that interval has "twisted" occurred in the subject line of a
message, and no substantive discussion of it in the bodies either.

I know about their zanshin twisted-based framework for WebDAV/CalDAV,
and that it's used in their Sharing architecture, which is used by
the Chandler wx GUI, but I just updated my chandler svn checkout, and
I counted 17 occurrences of the zanshin "blockUntil" function in the
Sharing.py module ... if it's so clean, how come they need those?
(In zanshin's docs, "blockUntil" is billed as "for test purposes" ... ;)

> but the separation would have been unnecessary if wx 
> had native Twisted integration.

Well, yeah, but I don't think OSAF has the resources to put into it
either, and Robin *works* for OSAF.

> There are other problems with a Pyro-driven Twisted subprocess, which 
> are relevant as the goal here is a well-supported and well-tested path 
> for integration.
> 
> Multiprocess communication and process spawning, especially on Windows, 
> is fraught with peril.  We've been working on reliable event-driven 
> process spawning in Twisted for years and years, and only recently have 
> we gotten to the point where the published API works reliably 
> cross-platform.  Given that Twisted would be left out of this loop, I 
> imagine the process control would be rather ad-hoc, so getting the 
> Twisted and WX processes synchronized would be problematic, and 
> extremely hard to unit test.  Although it would be slightly easier if 
> the Twisted proces is 'on top', you still have to inject test code into 
> both the parent and child processes, and have a way to verify the state 
> of both.
> 
> The last release of pyro is almost a year old.  That suggests it is not 
> actively maintained.

Or else it just works.  ;)

> Pyro doesn't have a buildbot, or (as far as I can tell from the release) 
> any automated tests of its own.  That would make it a wash in terms of 
> tested, robust integration support.

As if there's going to be some other "tested, robust integration
support" ... nothing on the horizon that I can see (and as I say,
I've been watching for a long time).

> You'd have to re-implement the Pyro protocol on top of Twisted to 
> communicate with it without spawning lots of threads.  That's a bunch of 
> new code which is going to need a home, again, possibly a whole new 
> project.  Even after that's done, Pyro is going to be spawning threads 
> and blocking inside the WX process because the Twisted implementation 
> isn't running there.

Process spawning!  Rusty code!  Spawning threads, *and* blocking!
My, you do paint a rosy picture.  All your handwaving and FUD makes
me want to try it, because it's probably quicker and easier than
discussing it.  But thanks for the warnings, anyway!  ;)

Cheers,
Steve




From mwh at python.net  Sun Sep 24 05:28:08 2006
From: mwh at python.net (Michael Hudson)
Date: Sun, 24 Sep 2006 10:28:08 +0100
Subject: [Twisted-Python] Re: removing unsupported reactors in twisted 2.6:
 qt, corefoundation, threadedselect, wx
References: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
Message-ID: <2mac4pk40n.fsf@starship.python.net>

glyph at divmod.com writes:

> Although I know of Qt and WX users, I do not know of anyone
> currently using the corefoundation reactor in an application.  Are
> you out there?  Is it being used?
>
> The last word I heard on the corefoundation reactor was from its
> author, Bob Ippolito, who suggested that it was not the correct way
> to integrate Twisted with GUI applications.  However, his suggested
> replacement (threadedselectreactor) is buggy, also unmaintained, and
> IMHO misdesigned, so in the absence of other knowledge I believe
> that continuing to provide some corefoundation support would be the
> best way to support the mac.  After receiving a shiny new computer
> from them I feel inclined to do the best job possible to support
> Apple's platform, but I simply don't have the time, knowledge, or
> energy to do the development myself.

It would be annoying to me if I could not use Twisted and PyObjC
together.  Currently I have a couple of noddy applications (the GUI
equivalent of 5 line shell scripts) doing this (using tsr) and they
work fine.

I understand why you want to have less untrustworthy code in Twisted,
but I think throwing out both tsr and cfreactor in 2.6 would be a step
back, not forwards.

I could claim that I'll try to look at cfreactor, but it's not
especially realistic...

Cheers,
mwh

-- 
  "Also, does the simple algorithm you used in Cyclops have a name?"
  "Not officially, but it answers to "hey, dumb-ass!"
                       -- Neil Schemenauer and Tim Peters, 23 Feb 2001




From therve at free.fr  Sun Sep 24 09:20:19 2006
From: therve at free.fr (Thomas HERVE)
Date: Sun, 24 Sep 2006 15:20:19 +0200
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, corefoundation, threadedselect, wx
In-Reply-To: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
References: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
Message-ID: <20060924152019.tet5k79soc0s4coc@itchy.wasabout.net>

Quoting glyph at divmod.com:

> Currently qtreactor is being tested on the "reactors" buildslave and 
> is keeping it red, despite the fact that all the other reactors on 
> that slave work fine (modulo a few elusive race conditions).  
> wxreactor is not being tested at all.  I believe we should split qt 
> out so that it can have its own red column and not interfere with the 
> gtk and poll reactors, and if we run a wx slave it should also be 
> separate.

The next QT version (4.2, currently in RC1) contains support for the 
Glib eventloop. This has to be tested, but it promises use of the gtk 
reactor with Qt application. Qt 4.2 (and PyQt) is not released but 
should be by the time of Twisted 2.6; we could then write a 
documentation about integration. The drawback is that you'll need glib 
(ie, python-gtk) to write a Qt app.

We also have a qt4 reactor (http://twistedmatrix.com/trac/ticket/1770) 
that needs a maintener. Last time I checked few things were needed to 
make the test suite pass.

-- 
Thomas


----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.




From itamar at itamarst.org  Sun Sep 24 10:54:15 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 24 Sep 2006 10:54:15 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, corefoundation, threadedselect, wx)
In-Reply-To: <20060924041616.1717.1221777311.divmod.quotient.58251@ohm>
References: <20060924041616.1717.1221777311.divmod.quotient.58251@ohm>
Message-ID: <1159109655.5657.12.camel@localhost.localdomain>

I haven't received the original email, for some reason, so apologies for
respoding in wrong place in thread.

Removing is a bad idea, although adding quality warning seems like a
good idea:

qt is failing *7* tests out of 3034, all but one i; that doesn't seem to
merit removing it. If there were serious problems I would expect we
would have many bug reports from qt users, but we don't.

cf... dunno.

tsreactor is private in twisted - starts with _, so it doesn't really
guarantee anything or make any promises about working, and it's very
useful for integrating with broken event loops.

wxreactor is a tsreactor wrapper which makes it suck less for the wx
case. AFAICT wx is one of the most popular ui toolkits for python, so
people will want to use it; wxreactor for all it faults is in most cases
going to be way better than whatever people try to do on their own,
especially if the branch I have lying around is ever merged.

The basic argument here is the same: 

1. People want to use these GUI toolkits.
2. They will thus either drop Twisted and write their own networking
framework, or they will write their own GUI integration code. Both of
these cases result in code that is likely will be worse than our current
providing.

So as long we are up front and visible about existing limitations in
these reactors, our users benefit by us including them.




From exarkun at divmod.com  Sun Sep 24 11:20:51 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 24 Sep 2006 11:20:51 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, corefoundation, threadedselect, wx
In-Reply-To: <20060924152019.tet5k79soc0s4coc@itchy.wasabout.net>
Message-ID: <20060924152051.1717.2029822361.divmod.quotient.58629@ohm>

On Sun, 24 Sep 2006 15:20:19 +0200, Thomas HERVE <therve at free.fr> wrote:
>Quoting glyph at divmod.com:
>>Currently qtreactor is being tested on the "reactors" buildslave and is 
>>keeping it red, despite the fact that all the other reactors on that slave 
>>work fine (modulo a few elusive race conditions).  wxreactor is not being 
>>tested at all.  I believe we should split qt out so that it can have its 
>>own red column and not interfere with the gtk and poll reactors, and if we 
>>run a wx slave it should also be separate.
>
>The next QT version (4.2, currently in RC1) contains support for the Glib 
>eventloop. This has to be tested, but it promises use of the gtk reactor 
>with Qt application. Qt 4.2 (and PyQt) is not released but should be by the 
>time of Twisted 2.6; we could then write a documentation about integration. 
>The drawback is that you'll need glib (ie, python-gtk) to write a Qt app.
>
>We also have a qt4 reactor (http://twistedmatrix.com/trac/ticket/1770) that 
>needs a maintener. Last time I checked few things were needed to make the 
>test suite pass.
>

AFAICT, Qt4 also fixes the problem which is causing the current qtreactor
test failures.

Jean-Paul



From glyph at divmod.com  Sun Sep 24 15:34:54 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 Sep 2006 15:34:54 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
In-Reply-To: <20060924152019.tet5k79soc0s4coc@itchy.wasabout.net>
Message-ID: <20060924193454.1717.730206262.divmod.quotient.58820@ohm>

On Sun, 24 Sep 2006 15:20:19 +0200, Thomas HERVE <therve at free.fr> wrote:
>Quoting glyph at divmod.com:
>>Currently qtreactor is being tested on the "reactors" buildslave and is 
>>keeping it red, despite the fact that all the other reactors on that slave 
>>work fine (modulo a few elusive race conditions).  wxreactor is not being 
>>tested at all.  I believe we should split qt out so that it can have its 
>>own red column and not interfere with the gtk and poll reactors, and if we 
>>run a wx slave it should also be separate.

>The next QT version (4.2, currently in RC1) contains support for the Glib 
>eventloop. This has to be tested, but it promises use of the gtk reactor 
>with Qt application. Qt 4.2 (and PyQt) is not released but should be by the 
>time of Twisted 2.6; we could then write a documentation about integration. 

That would be great.  Is that going to be the default mainloop or an optional add-on?

>The drawback is that you'll need glib (ie, python-gtk) to write a Qt app.

Some might not call that a drawback ;).

>We also have a qt4 reactor (http://twistedmatrix.com/trac/ticket/1770) that 
>needs a maintener. Last time I checked few things were needed to make the 
>test suite pass.

Are you willing to have a crack at fixing that code?



From glyph at divmod.com  Sun Sep 24 15:39:00 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 Sep 2006 15:39:00 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, 
In-Reply-To: <200609232241.23444.uwe@oss4u.com>
Message-ID: <20060924193900.1717.89550137.divmod.quotient.58826@ohm>

On Sat, 23 Sep 2006 22:41:23 -0700, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:
>Well, for me the threadedselectreactor works quite nicely with wx.
>It has it's flaws and I've spent some time working around them. On the other
>hand if that reactor is dropped, I'd rather drop Twisted from my application
>than rewrite the GUI part with a toolkit that kind of sucks and looks like
>crap on most platforms (i.e. GTK or TK).

You have lots of other options.

1. Continue using the wxreactor code by copying it into your application.  We could even provide a separate page with "unmaintained reactors" for download.  That way you could fix the reactor   I'm just talking about removing the code from Twisted, not ordering soldiers to destroy it everywhere that it exists.  In fact, this would probably be better for you anyway, if you intend to keep up with future versions of Twisted, because it would allow you to apply hacks to keep your particular application working even if the reactor in question breaks with a new release of Twisted.

2. Help fix the problem.  This is really what I'd prefer.  You don't have to have all the appropriate knowledge right now, just sufficient interest and energy to commit to *caring* that the buildbot is red in the future, and trying to fix it.

3. Find someone else to fix the problem.  Do you know any other wx/twisted users who don't subscribe to this list, but know something about networking?

>I like Twisted PB and I like wx - that's pretty much all I have to say about
>this.  Let's say it this way: the network part of an application is what
>makes it work, the GUI part is what makes the money - guess what's dropped
>first :-(

4. Finance someone else to fix the problem, since you say you're making money from this.  Maybe you can find a university student with enough time on their hands who would do it for a few hundred bucks.  If you want to make money off of other people's work without contributing anything back, you may find that occasionally they do not do things in the most convenient way possible for you :).



From glyph at divmod.com  Sun Sep 24 15:42:11 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 Sep 2006 15:42:11 -0400
Subject: [Twisted-Python] Re: removing unsupported reactors in twisted 2.6:
In-Reply-To: <2mac4pk40n.fsf@starship.python.net>
Message-ID: <20060924194211.1717.749203560.divmod.quotient.58830@ohm>

On Sun, 24 Sep 2006 10:28:08 +0100, Michael Hudson <mwh at python.net> wrote:
>glyph at divmod.com writes:

>I understand why you want to have less untrustworthy code in Twisted,
>but I think throwing out both tsr and cfreactor in 2.6 would be a step
>back, not forwards.

The alternative is to eventually ship a version of Twisted where that reactor doesn't work at all.  (Heck, maybe it doesn't work now, I don't know.  I haven't heard from anyone using it yet.)  As I said to Uwe, I am saying that these reactors should not be distributed with Twisted because we don't know whether they work; I am not saying that we should aggressively attempt to destroy all copies of this code present anywhere.

>I could claim that I'll try to look at cfreactor, but it's not
>especially realistic...

If you think that tsreactor is the right way to go for mac apps, by all means, have a look at that instead.  It doesn't sound like you'd care if cfreactor went away.

Ideally, you could write a "macreactor" which would set up the appropriate interleave and shutdown with tsreactor so that we could run a buildbot in the context of a mac gui, similar to what itamar's wxreactor does, and start fixing tests from there.



From glyph at divmod.com  Sun Sep 24 15:43:42 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 Sep 2006 15:43:42 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
In-Reply-To: <1159109655.5657.12.camel@localhost.localdomain>
Message-ID: <20060924194342.1717.434036965.divmod.quotient.58832@ohm>

On Sun, 24 Sep 2006 10:54:15 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:

>Removing is a bad idea, although adding quality warning seems like a
>good idea:

Where would you suggest adding that warning?

>qt is failing *7* tests out of 3034, all but one i; that doesn't seem to
>merit removing it. If there were serious problems I would expect we
>would have many bug reports from qt users, but we don't.

I don't expect that we'll ever hear from users about anything, unless we threaten them directly :).

Qt is definitely in a better situation than the other reactors we're talking about.  However, it's very likely that code could be added or changed which would make it "redder" and nobody would notice until well after the fact.  Can we set those tests to 'skip' or 'todo' in the context of the Qt reactor and call that "good enough"?

tsreactor failed something like 30 tests the first time I ran trial on it and something like 100 the second time.  The third run did not complete.  I assume it's mainly race conditions which are killing it, but I don't know where they are.

>tsreactor is private in twisted - starts with _, so it doesn't really
>guarantee anything or make any promises about working, and it's very
>useful for integrating with broken event loops.

It's exposed to users as a reactor on the command line.  Maybe *that* should have an "_" added to it as well.  However, if we're going to keep it around, it should have a buildbot, end of story.

>wxreactor is a tsreactor wrapper which makes it suck less for the wx
>case. AFAICT wx is one of the most popular ui toolkits for python, so
>people will want to use it;

If it's so popular, why does nobody care enough to contribute a few patches to make it work properly?

>wxreactor for all it faults is in most cases going to be way better than whatever people try to do on their own,

I agree, but mainly because the average case of "whatever people try to do on their own" is going to be ad-hoc and untested.  Right now the alternative we are proposing is also ad-hoc and untested, just in a smaller way.

>especially if the branch I have lying around is ever merged.

What branch is that?  Should it be marked for review?

At any rate, it sounds like YOU care enough about wxreactor to put some effor into it, which is enough to satisfy me.  Should we add a --reactor option for wx, and set up a buildbot for wxreactor?

>The basic argument here is the same:

>1. People want to use these GUI toolkits.
>2. They will thus either drop Twisted and write their own networking
>framework, or they will write their own GUI integration code. Both of
>these cases result in code that is likely will be worse than our current
>providing.

This is true for the moment, but eventually some of the code in quesiton is going to decay to the point where it is so seriously out of sync with the rest of Twisted that it won't even import.

>So as long we are up front and visible about existing limitations in
>these reactors, our users benefit by us including them.

I don't think we have nearly enough visibility on the quality or stability of those reactors.  "Stability: Unstable" means "we might change this", not "it is known to be broken and to fail numerous tests".



From glyph at divmod.com  Sun Sep 24 15:47:24 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 Sep 2006 15:47:24 -0400
Subject: Other wx/twisted methods (was Re: [Twisted-Python]
In-Reply-To: <451647A2.3000709@pangalactic.us>
Message-ID: <20060924194724.1717.230094804.divmod.quotient.58837@ohm>

On Sun, 24 Sep 2006 04:53:54 -0400, Stephen Waterbury <waterbug at pangalactic.us> wrote:
>glyph at divmod.com wrote:
>>On Sat, 23 Sep 2006 23:33:11 -0400, Stephen Waterbury 
>><waterbug at pangalactic.us> wrote:

>>In every other toolkit Twisted supports,
>
>... of which there's really only *one* (GTK)

Fair enough.  I meant to say that the way Twisted apps are designed is to treat all events as events.  This would require writing extra glue code for certain tyes of events.

>Okay.  I'm willing to do without that.

In that case, more power to you :)

>I think *that* is the real problem ... not technical, just interest
>from the right people.  I've waited enough years (about 5) that
>I've given up on that.

I've done a lot of waiting too.  Now I'm starting with the yelling and hollering, see if that strategy works better :).

>I completely agree that it should not be part of Twisted
>at all ... but if I succeed with it, I'll certainly document what I
>do.

Sounds great to me.

>>One major reason I'd like a WX reactor to continue to exist in some form is 
>>OSAF's usage of Twisted and WX.  They have a similarly baroque model for 
>>handing data back and forth between Twisted code and GUI code, ...
>
>... and everything else (sorry, couldn't resist ;) ...

Heh.  Let's just keep it straight on the record - *I* didn't say it! :-)

>... hmmm ... I've been on all the OSAF Chandler/Scooby/Cosmo lists
>since April (and that's a lot of freakin' mail ;), and not *once* in
>that interval has "twisted" occurred in the subject line of a
>message, and no substantive discussion of it in the bodies either.

Yeah, I don't think that this is really a high priority issue for them.  Their application works fine in its current state, and they have a LOT of programmers working on it.  A change to the architecture at this point would be so expensive that any other benefits which might come along with it wouldn't be worth it.

>I know about their zanshin twisted-based framework for WebDAV/CalDAV,
>and that it's used in their Sharing architecture, which is used by
>the Chandler wx GUI, but I just updated my chandler svn checkout, and
>I counted 17 occurrences of the zanshin "blockUntil" function in the
>Sharing.py module ... if it's so clean, how come they need those?

I was just trying to be nice :-P.

>(In zanshin's docs, "blockUntil" is billed as "for test purposes" ... ;)

Oh yeah, I remember that "test" function... heh heh.  I wish them much luck in the 5-year 1000-man project it takes to remove it.

>Well, yeah, but I don't think OSAF has the resources to put into it
>either, and Robin *works* for OSAF.

I just don't think it's a relevant issue for them.  They're not even using the code I'm talking about removing.

>As if there's going to be some other "tested, robust integration
>support" ... nothing on the horizon that I can see (and as I say,
>I've been watching for a long time).

Understandable...

>Process spawning!  Rusty code!  Spawning threads, *and* blocking!
>My, you do paint a rosy picture.  All your handwaving and FUD makes
>me want to try it, because it's probably quicker and easier than
>discussing it.  But thanks for the warnings, anyway!  ;)

What can I say?  Everything is completely terrible.  Still, good luck trying to make that work; let us know how it goes.



From andrew-twisted at puzzling.org  Sun Sep 24 21:39:03 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 25 Sep 2006 11:39:03 +1000
Subject: [Twisted-Python] "Stability: Unstable" might be clearer as "API
	status: unsupported"?
In-Reply-To: <20060924194342.1717.434036965.divmod.quotient.58832@ohm>
References: <1159109655.5657.12.camel@localhost.localdomain>
	<20060924194342.1717.434036965.divmod.quotient.58832@ohm>
Message-ID: <20060925013903.GF5054@steerpike.home.puzzling.org>

glyph at divmod.com wrote:
> On Sun, 24 Sep 2006 10:54:15 -0400, Itamar Shtull-Trauring 
[...]
> 
> >So as long we are up front and visible about existing limitations in
> >these reactors, our users benefit by us including them.
> 
> I don't think we have nearly enough visibility on the quality or stability 
> of those reactors.  "Stability: Unstable" means "we might change this", not 
> "it is known to be broken and to fail numerous tests".

As a tangent, people seem to get confused by this.  Perhaps it would be less
ambiguous to replace "Stability: Unstable" with something like:

    API status: in flux

or:

    API status: unsupported

and "Stability: stable" with:

    API status: supported

Just to remove the ambiguity?

-Andrew.




From paulswartz at gmail.com  Sun Sep 24 22:46:20 2006
From: paulswartz at gmail.com (Paul Swartz)
Date: Sun, 24 Sep 2006 22:46:20 -0400
Subject: [Twisted-Python] "Stability: Unstable" might be clearer as "API
	status: unsupported"?
In-Reply-To: <20060925013903.GF5054@steerpike.home.puzzling.org>
References: <1159109655.5657.12.camel@localhost.localdomain>
	<20060924194342.1717.434036965.divmod.quotient.58832@ohm>
	<20060925013903.GF5054@steerpike.home.puzzling.org>
Message-ID: <324cfb540609241946m5a20759aod61cbb092359398@mail.gmail.com>

On 9/24/06, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> As a tangent, people seem to get confused by this.  Perhaps it would be less
> ambiguous to replace "Stability: Unstable" with something like:
>
>     API status: in flux
>
> or:
>
>     API status: unsupported
>
> and "Stability: stable" with:
>
>     API status: supported
>
> Just to remove the ambiguity?

I heartily second "in flux".  I've gotten lots of e-mail from
t.w.p.oscar users asking what "unstable" means.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From jml at mumak.net  Sun Sep 24 22:53:57 2006
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 25 Sep 2006 12:53:57 +1000
Subject: [Twisted-Python] "Stability: Unstable" might be clearer as "API
	status: unsupported"?
In-Reply-To: <20060925013903.GF5054@steerpike.home.puzzling.org>
References: <1159109655.5657.12.camel@localhost.localdomain>
	<20060924194342.1717.434036965.divmod.quotient.58832@ohm>
	<20060925013903.GF5054@steerpike.home.puzzling.org>
Message-ID: <d06a5cd30609241953i700b8d0ct2f06c4dad21a5e50@mail.gmail.com>

On 9/25/06, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> As a tangent, people seem to get confused by this.  Perhaps it would be less
> ambiguous to replace "Stability: Unstable" with something like:
>
>     API status: in flux

I reckon this is a good idea. However, it would be good to know
exactly what 'supported' and 'unsupported' mean -- particularly in
terms of DeprecationWarnings, releases etc.

cheers,
jml



From fairwinds at eastlink.ca  Mon Sep 25 00:17:14 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Mon, 25 Sep 2006 01:17:14 -0300
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <200609232241.23444.uwe@oss4u.com>
References: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
	<200609232241.23444.uwe@oss4u.com>
Message-ID: <4517584A.1030008@eastlink.ca>

Hi all. I am also using the threadedselectreactor in wx without 
problems. I have only just read these posts and cannot understand any 
reasoning to drop it. What am I missing?

Regards,
David


Uwe C. Schroeder wrote:
> Well, for me the threadedselectreactor works quite nicely with wx.
> It has it's flaws and I've spent some time working around them. On the other 
> hand if that reactor is dropped, I'd rather drop Twisted from my application 
> than rewrite the GUI part with a toolkit that kind of sucks and looks like 
> crap on most platforms (i.e. GTK or TK).
> I like Twisted PB and I like wx - that's pretty much all I have to say about 
> this.  Let's say it this way: the network part of an application is what 
> makes it work, the GUI part is what makes the money - guess what's dropped 
> first :-(
> 
> UC
> 
> 
> On Saturday 23 September 2006 21:31, glyph at divmod.com wrote:
>> On Sun, 24 Sep 2006 00:44:03 -0300, Felipe Almeida Lessa 
> <felipe.lessa at gmail.com> wrote:
>>> So the only GUI toolkits that will be officialy supported are going to
>>> be Gtk, Tk and PyUI?
>> Thanks for reminding me.
>>
>> Neither Tk nor PyUI have buildbots.  However, they're both implemented
>> using polling timed events running on top of another reactor... I don't
>> know how much "support" those really count for.  It might be good to remove
>> them as well, but they're very little code.
>>
>> GTK is supported, has a buildbot, and is currently green.  Frankly, the
>> people who currently do at least 90% of the maintenance on Twisted (myself
>> included) only care about this toolkit, so it's the one that is likely to
>> remain the best supported.  It is my sincere hope that someone will port
>> GTK to the Cocoa APIs for OS X at some point in the near future.  Then I
>> can cease caring even about corefoundation ;).
>>
>> The Win32 event loop is also supported, although its buildbot still isn't
>> green yet.  That is a "toolkit" of sorts.  I think that it might even work
>> with MFC but I'm a bit murky on the details.
>>
>> So, yes, the situation is even worse than you suggest; unless someone else
>> volunteers to help, we will have 2 supported toolkits: GTK, and GDI.
>>
>> Twisted's architecture was developed with GUI toolkits in mind, and I would
>> like it to support as many as possible.  I hope that one day, all toolkit
>> developers will actually care whether Twisted supports their code or not. 
>> Until now, though, it seems that we have been unable to attract the
>> attention of even one member of each community with the appropriate
>> experience and motivation to help out.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From glyph at divmod.com  Mon Sep 25 00:28:11 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 25 Sep 2006 00:28:11 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, 
In-Reply-To: <4517584A.1030008@eastlink.ca>
Message-ID: <20060925042811.1717.24676830.divmod.quotient.59246@ohm>

On Mon, 25 Sep 2006 01:17:14 -0300, David Pratt <fairwinds at eastlink.ca> wrote:
>Hi all. I am also using the threadedselectreactor in wx without problems. I 
>have only just read these posts and cannot understand any reasoning to drop 
>it. What am I missing?

"If it's not tested, it's broken."

The point is not that I want to drop this code from Twisted.  In fact, far from it, I would like Twisted to support as many toolkits as possible.

The point is that these reactors are currently excluded from automated test coverage, and have no maintainers.  That means that they do not currently work as well as the other reactors, but more seriously, if they were to be *completely* broken (say, start raising exceptions upon import), nobody on the Twisted team would know until users started complaining, and most likely users would not complain until well after we had already produced a broken release.

We could add automated test coverage relatively easily, *IF* someone would volunteer to at least look at the results of that coverage and contribute some fixes.  Perhaps you were not even aware that there are reliability problems with threadedselectreactor.  To see an example of the problem, run "trial --reactor threadedselect twisted".

Would you volunteer to have a look at some of these problems and try to fix them?  I have no idea how many people are using Twisted in conjunction with wxwindows today, but you would be a hero to all of them, I'm sure :).



From glyph at divmod.com  Mon Sep 25 00:32:27 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 25 Sep 2006 00:32:27 -0400
Subject: [Twisted-Python] "Stability: Unstable" might be clearer as "API
In-Reply-To: <324cfb540609241946m5a20759aod61cbb092359398@mail.gmail.com>
Message-ID: <20060925043227.1717.1115399547.divmod.quotient.59250@ohm>

On Sun, 24 Sep 2006 22:46:20 -0400, Paul Swartz <paulswartz at gmail.com> wrote:
>On 9/24/06, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
>>As a tangent, people seem to get confused by this.  Perhaps it would be 
>>less
>>ambiguous to replace "Stability: Unstable" with something like:
>>
>>     API status: in flux

>I heartily second "in flux".  I've gotten lots of e-mail from
>t.w.p.oscar users asking what "unstable" means.

I suspect that the phrase "in flux" may be equally jargonesque, although it does make more sense to me personally.

There are 3 problems here though:

 1. Modules' stability markers are not kept up-to-date as community perception changes.

Not much that we can do about that except have periodic docstring reviews.

 2. The terminology doesn't immediately make much sense.

Changing the terminology in the way that Andrew suggests could probably improve this situation, but I think that it would not be a complete solution to the problem, because:

 3. There's no good description of what we mean by the specialized terms we have chosen to describe a module's status.

I think that means we need to update this document:

    http://twistedmatrix.com/projects/core/documentation/howto/faq.html#auto5

regardless of any change (or no change) to the terminology.



From foom at fuhm.net  Mon Sep 25 00:45:29 2006
From: foom at fuhm.net (James Y Knight)
Date: Mon, 25 Sep 2006 00:45:29 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <4517584A.1030008@eastlink.ca>
References: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
	<200609232241.23444.uwe@oss4u.com> <4517584A.1030008@eastlink.ca>
Message-ID: <C66FBE50-12E2-4B29-AF8D-A7DC32F3D381@fuhm.net>

On Sep 25, 2006, at 12:17 AM, David Pratt wrote:
> Hi all. I am also using the threadedselectreactor in wx without  
> problems. I have only just read these posts and cannot understand  
> any reasoning to drop it. What am I missing?

That it's broken according to the test suite, and that nobody has  
volunteered to fix it.

Perhaps the bugs are in the tests (a cursory glance at the qt  
failures suggests this might be the case for that reactor), or  
perhaps the tested functionality is something that should be expected  
to not work for that reactor, but in any case, either the tests or  
the reactor should be fixed. Tests that have been failing for a long  
time indicates that nobody cares enough about that code to fix them.

Clearly the best resolution of this would be to have all the  
mentioned reactors fixed. Then, nobody would propose that they be  
removed.

James



From bob at redivi.com  Mon Sep 25 01:19:32 2006
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 24 Sep 2006 22:19:32 -0700
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <C66FBE50-12E2-4B29-AF8D-A7DC32F3D381@fuhm.net>
References: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
	<200609232241.23444.uwe@oss4u.com> <4517584A.1030008@eastlink.ca>
	<C66FBE50-12E2-4B29-AF8D-A7DC32F3D381@fuhm.net>
Message-ID: <6a36e7290609242219r34150f81r42b84796769f355a@mail.gmail.com>

On 9/24/06, James Y Knight <foom at fuhm.net> wrote:
> On Sep 25, 2006, at 12:17 AM, David Pratt wrote:
> > Hi all. I am also using the threadedselectreactor in wx without
> > problems. I have only just read these posts and cannot understand
> > any reasoning to drop it. What am I missing?
>
> That it's broken according to the test suite, and that nobody has
> volunteered to fix it.
>
> Perhaps the bugs are in the tests (a cursory glance at the qt
> failures suggests this might be the case for that reactor), or
> perhaps the tested functionality is something that should be expected
> to not work for that reactor, but in any case, either the tests or
> the reactor should be fixed. Tests that have been failing for a long
> time indicates that nobody cares enough about that code to fix them.
>
> Clearly the best resolution of this would be to have all the
> mentioned reactors fixed. Then, nobody would propose that they be
> removed.

The biggest issue is that the tests work by reactor iteration, which
is not how some of the reactors actually work in practice. Tests
passing or failing don't necessarily reflect how the reactor is going
to behave under normal circumstances.

-bob



From fairwinds at eastlink.ca  Mon Sep 25 01:32:03 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Mon, 25 Sep 2006 02:32:03 -0300
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <20060925042811.1717.24676830.divmod.quotient.59246@ohm>
References: <20060925042811.1717.24676830.divmod.quotient.59246@ohm>
Message-ID: <451769D3.80803@eastlink.ca>

Hi Glyph. I am not sure if I am the right person, but at the same time I 
don't wish to see the code removed. I see deprecation warnings and 
failed tests. Not great.

I am willing to help but I am not sure that I possess the expertise to 
solve all the issues. I am willing to commit to trying though, hopefully 
with the help of others. Perhaps I'll post on wxpython list to see if 
there are others willing to help.

wxpython and twisted are both important toolkits. Twisted integration is 
important to me for my own projects. I am hoping someone from the 
Chandler project thinks so too and feels that sharing in this effort is 
the right thing to do. I know there are a number of folks using 
wxreactor or threadedselectreactor in their wxpython code. It is 
reasonable that we shoulder some responsibility to help ourselves.

Regards,
David

glyph at divmod.com wrote:
> On Mon, 25 Sep 2006 01:17:14 -0300, David Pratt <fairwinds at eastlink.ca> 
> wrote:
>> Hi all. I am also using the threadedselectreactor in wx without 
>> problems. I have only just read these posts and cannot understand any 
>> reasoning to drop it. What am I missing?
> 
> "If it's not tested, it's broken."
> 
> The point is not that I want to drop this code from Twisted.  In fact, 
> far from it, I would like Twisted to support as many toolkits as possible.
> 
> The point is that these reactors are currently excluded from automated 
> test coverage, and have no maintainers.  That means that they do not 
> currently work as well as the other reactors, but more seriously, if 
> they were to be *completely* broken (say, start raising exceptions upon 
> import), nobody on the Twisted team would know until users started 
> complaining, and most likely users would not complain until well after 
> we had already produced a broken release.
> 
> We could add automated test coverage relatively easily, *IF* someone 
> would volunteer to at least look at the results of that coverage and 
> contribute some fixes.  Perhaps you were not even aware that there are 
> reliability problems with threadedselectreactor.  To see an example of 
> the problem, run "trial --reactor threadedselect twisted".
> 
> Would you volunteer to have a look at some of these problems and try to 
> fix them?  I have no idea how many people are using Twisted in 
> conjunction with wxwindows today, but you would be a hero to all of 
> them, I'm sure :).
> 



From glyph at divmod.com  Mon Sep 25 01:52:02 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 25 Sep 2006 01:52:02 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, 
In-Reply-To: <6a36e7290609242219r34150f81r42b84796769f355a@mail.gmail.com>
Message-ID: <20060925055202.1717.192272617.divmod.quotient.59312@ohm>

On Sun, 24 Sep 2006 22:19:32 -0700, Bob Ippolito <bob at redivi.com> wrote:
>On 9/24/06, James Y Knight <foom at fuhm.net> wrote:
>>On Sep 25, 2006, at 12:17 AM, David Pratt wrote:
>> > Hi all. I am also using the threadedselectreactor in wx without
>> > problems. I have only just read these posts and cannot understand
>> > any reasoning to drop it. What am I missing?

>>Clearly the best resolution of this would be to have all the
>>mentioned reactors fixed. Then, nobody would propose that they be
>>removed.

>The biggest issue is that the tests work by reactor iteration, which
>is not how some of the reactors actually work in practice. Tests
>passing or failing don't necessarily reflect how the reactor is going
>to behave under normal circumstances.

Over the last year, jml has been making good progress towards grinding down the unfortunate protuberances in Trial which make it less like a real application.

See the following tickets:

  http://twistedmatrix.com/trac/ticket/1781
  http://twistedmatrix.com/trac/ticket/2090

It's been a gradual process but we've been moving in this direction for a while.

If we can attribute specific test failures to this issue, we should try to work around it (which is possible in many cases), otherwise .todo or .skip them as appropriate until trial's metamorphosis is complete.



From glyph at divmod.com  Mon Sep 25 02:04:07 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 25 Sep 2006 02:04:07 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, 
In-Reply-To: <451769D3.80803@eastlink.ca>
Message-ID: <20060925060407.1717.1679192272.divmod.quotient.59320@ohm>

On Mon, 25 Sep 2006 02:32:03 -0300, David Pratt <fairwinds at eastlink.ca> wrote:
>Hi Glyph. I am not sure if I am the right person, but at the same time I 
>don't wish to see the code removed. I see deprecation warnings and failed 
>tests. Not great.

Now you can see how I feel about this code :).

>I am willing to help but I am not sure that I possess the expertise to solve 
>all the issues. I am willing to commit to trying though, hopefully with the 
>help of others. Perhaps I'll post on wxpython list to see if there are 
>others willing to help.

Thanks a lot.

This is as much as anyone could reasonably ask.  I'm sure that if you start trying to track down the issues within Twisted and asking questions, you will find that people on this mailing list and #twisted on chat.freenode.net would be more than happy to help you learn more about the reactor's internals.

>wxpython and twisted are both important toolkits. Twisted integration is 
>important to me for my own projects. I am hoping someone from the Chandler 
>project thinks so too and feels that sharing in this effort is the right 
>thing to do. I know there are a number of folks using wxreactor or 
>threadedselectreactor in their wxpython code. It is reasonable that we 
>shoulder some responsibility to help ourselves.

I really appreciate this sentiment.  I'm glad you're interested in helping out.

However, I think that Chandler uses Twisted in a rather idiosyncratic way; it doesn't necessarily make sense for them to help, since this isn't code that they're using.  If you can interest them in doing so, of course, that's great :)

If you are aware of other uses of wxreactor though, the more the merrier.

Now that you've volunteered to at least start looking at the problems here, I'll see if I can set up a buildslave to test these reactors.  However, I will probably only be able to set it up on one platform, and given wx's nature we'll need a few other buildbots to make sure it works consistently on mac/win/linux, so if any wxreactor users want to contribute an additional buildbot that would be great.

Please keep us all appraised of your progress and let us know if you need help!



From glyph at divmod.com  Mon Sep 25 02:48:15 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 25 Sep 2006 02:48:15 -0400
Subject: [Twisted-Python] Removing _wait from Trial
In-Reply-To: <d06a5cd30609240026y3b50e953s472e4dd4eb70fb06@mail.gmail.com>
Message-ID: <20060925064815.1717.606494837.divmod.quotient.59338@ohm>

On Sun, 24 Sep 2006 17:26:10 +1000, Jonathan Lange <jml at mumak.net> wrote:
>So, I would like to remove _wait() from Trial and make it work like a
>regular Twisted application. I've had all this stuff on my brain, and
>have decided to dump it here for feedback. Here's how the plan looks
>at the moment[1]:

>1. Deprecate the use of reactor-spinning things within tests. (Twisted 2.5)

YES.

>Unfortunately, some of Trial's cleanup code spins the reactor (see
>t.trial.util._Janitor.do_cleanPending). This has to go.

You are saying this part of the plan will happen post-2.5, I assume?

>2. Tighten test cleanup errors. (Twisted 2.5)
>
>#2091 (ready for review) fulfils a long-standing promise. The "reactor
>unclean" warnings have been turned into errors.

I would really like it to be possible to turn these errors into warnings by passing a command-line flag, mainly for the migration path between 2.4 and 2.5.  If you upgrade an application to Twisted 2.5 and then run your tests, and you get 100 failures, it would be nice to be able to run "trial --unclean=warn_only", and focus on fixing any issues with the upgrade of APIs rather than just the test tool.  Even nicer to see that your tests still pass and you just need to update the tests to clean up after themselves.

Twisted's buildslaves should _NOT_ use this flag, nor should it still be present in 2.6.  I am suggesting it _ONLY_ as a migration tool.

>To remove _wait, we'll also have to remove the two calls to
>reactor.iterate() from _Janitor (see #2092). That means that many
>tests that *thought* they were cleaning up the reactor properly will
>find out that they weren't. We can reduce the number of errors by
>simulating reactor.iterate() using callLater. However, experiments
>show that even with this bandaid, there will still be new errors in
>the Twisted suite.

It sounds like a good process for getting changes like this through the Twisted suite might be:

 * prepare the branch
 * get it reviewed, but don't fix the tests yet
 * have a "fix trial party" where we encourage lots of other hackers to get together on IRC and contribute to the same branch
 * get it reviewed by someone who couldn't participant (bonus: incentive to participate is that you don't have to review a massive branch...)

>That means we will have to either:
>a) surprise our users with new errors in their tests
>b) find some way to introduce this gradually.

I think this might be another use-case for a flag.  Really, developers should be alerted to these changes as soon as possible (warnings are too easily ignored), but have a way to give themselves a little leeway to fix the problems before the next release.

>Obviously everyone[2] would prefer b). I've filed #2124 explaining how
>that might work.

>3. Introduce asynchronous APIs to Trial (Twisted 2.6)
>
>Currently TestCase.run() is a blocking call. I wish it could remain a
>blocking call, but it can't.

Why do you say you wish it could?  Isn't the whole point here to make it not be a blocking call?

>The branch for #1781 makes a SyncTestCase and an AsyncTestCase. run()
>works in SyncTestCase and doesn't work in AsyncTestCase. For
>AsyncTestCase, one uses runDeferred().

This all sounds fine.

>Although the branch for #1781 will need to be abandoned, these new
>classes should be brought in for Twisted 2.6 (without breaking run()).
>Naturally, this affects many, many tests in Trial.

Another potential place where a 'fix trial party' might be useful.

>4. Deprecate TestSuite.run and TestCase.run. (Twisted 2.6)
>
>Neither of these will work without wait[3] and they are both public
>APIs. Also remove the calls to iterate() from _Janitor at this point.

In what sense are these APIs "public"?  Are there really people calling them outside of the 'trial' tool?

>5. Actually remove _wait. (Twisted 2.7)

>Add runDeferred() to TestSuite, make run() raise NotImplementedErrors
>for TestCase and TestSuite. Alter TrialSuite to start and stop the
>reactor.

Is there something significant about raising NotImplementedError?  Why aren't you just going to remove the method?

>I can't find a theory to explain why this change will break unexpected
>tests in the Twisted suite. However, it will certainly happen. That
>means that some tests in user code will probably break as well. I
>don't know how we could make this any smoother.

Until we have a theory about how and why things are going to break, we shouldn't worry about making it smoother.  That's not to say that things aren't going to break, but the plan for smoothing things out is likely to depend upon the details of the breakage.

>Questions:
>- What should I do with the ticket #1781?

It looks like it should have a milestone of Twisted-2.7, and stay as it is.

>- What should I do with the branch for #1781?

I'd have to review a bunch of other code to be sure, and I haven't, but I'd say "keep merging it forward".  Maybe just dropping it and rewriting it later makes more sense, though.

>- What more can we do to reduce the number of tests that will break
>when _wait is removed?

See above.

>[1] Incidentally, all of this would be superfluous if reactors were 
>restartable.

A clean restart() API would be a possible way of fixing some things, but I think you are underestimating how much code would break with a clean restart() method, too.  For example: the threadpool would be stopped after each test.  Would that make any existing Twisted tests fail?  I don't know, but operating under your (probably correct) pessimistic assumption that any change to the test framework's interaction with the reactor will break some things, I'd have to say yes.

Then there is the issue that Bob recently brought up, which is that in a 'normal' Twisted application the reactor is only started once, and so it's not really a representative test to constantly be pausing and resuming it.  If we implement a restartable reactor it would probably be a good torture-test though.

Thanks for all the work on this issue.  Every time I look at it, I'm shocked by just how difficult this transition has been, and all the more thankful for your capable stewardship of it.



From waterbug at pangalactic.us  Mon Sep 25 03:40:45 2006
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Mon, 25 Sep 2006 03:40:45 -0400
Subject: [Twisted-Python] wxreactor buildbots
In-Reply-To: <20060925060407.1717.1679192272.divmod.quotient.59320@ohm>
References: <20060925060407.1717.1679192272.divmod.quotient.59320@ohm>
Message-ID: <451787FD.5010005@pangalactic.us>

glyph at divmod.com wrote:
> Now that you've volunteered to at least start looking at the problems 
> here, I'll see if I can set up a buildslave to test these reactors.  
> However, I will probably only be able to set it up on one platform, and 
> given wx's nature we'll need a few other buildbots to make sure it works 
> consistently on mac/win/linux, so if any wxreactor users want to 
> contribute an additional buildbot that would be great.

I'll volunteer to set up a wxreactor buildbot on the machine I use
to do my windows builds.  It's not my platform of choice, but
the vast majority of the user community I'm supporting use it
(shudder), so it's the most important platform for my wx app.

I haven't run buildbot before, but I want to run it for my own
app, too, and a windows bot would make the most sense for that,
since I develop on Linux.

I'll be away on business the rest of this week but will get
started as soon as I get back.

Maybe we can get some twisted/wx momentum going.  :)

Cheers,
Steve



From robert at gravina.com  Mon Sep 25 03:26:04 2006
From: robert at gravina.com (Robert Gravina)
Date: Mon, 25 Sep 2006 16:26:04 +0900
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <20060925042811.1717.24676830.divmod.quotient.59246@ohm>
References: <20060925042811.1717.24676830.divmod.quotient.59246@ohm>
Message-ID: <D887F938-6EDF-4BD4-9419-715F8144C99A@gravina.com>

> That means that they do not currently work as well as the other  
> reactors, but more seriously, if they were to be *completely*  
> broken (say, start raising exceptions upon import)

Hate to break it to you, but I tried a preview build of soon-to-be- 
released (I think) wxPython 2.7, and the twisted code raised  
exceptions on import :) I reinstalled 2.6.3.3 so can't show you the  
traceback. Dailies are available here if anyone wants to see what I  
mean.
http://starship.python.net/crew/robind/wxPython/daily/

Anyway, I am currently using wxPython and Twisted in a project and I  
would sorely miss either of them!!! I just wanted to cast my vote as  
another developer using this (killer) combination! wx and Twisted  
(especially PB) are making short work of writing a multi-user client/ 
server app. From what I've been able to find, wx is the only GUI  
toolkit that is cross platform and rich. Qt isn't an option for me  
because of it's expensive commercial licensing, and Tk just looks  
plain horrible. There must be many other users wx/Twisted, surely.

I haven't experienced any problems using wxPython and Twisted  
together, except perhaps for this.  Normally, a wx app will shutdown  
when the last window in your applciation closes. Since the reactor  
stops this from happening I workaround this by maintaining a list of  
open windows and on close of a window I remove it from the list and  
then check if it's empty. If it is, I shutdown the reactor.

Robert



From tdickenson at geminidataloggers.com  Mon Sep 25 07:44:16 2006
From: tdickenson at geminidataloggers.com (Toby Dickenson)
Date: Mon, 25 Sep 2006 12:44:16 +0100
Subject: [Twisted-Python] Re: removing unsupported reactors in twisted 2.6:
	qt, corefoundation, threadedselect, wx
References: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
	<20060924152019.tet5k79soc0s4coc@itchy.wasabout.net>
Message-ID: <ef8feg$1l0$1@sea.gmane.org>

Thomas HERVE wrote:

> The next QT version (4.2, currently in RC1) contains support for the
> Glib eventloop. This has to be tested, but it promises use of the gtk
> reactor with Qt application. Qt 4.2 (and PyQt) is not released but
> should be by the time of Twisted 2.6; we could then write a
> documentation about integration. The drawback is that you'll need glib
> (ie, python-gtk) to write a Qt app.
> 
> We also have a qt4 reactor (http://twistedmatrix.com/trac/ticket/1770)
> that needs a maintener. Last time I checked few things were needed to
> make the test suite pass.

As far as I am aware (and please correct me if I am wrong) all these recent
qt-specific reactors have the same systematic problem on win32 because they
rely on hooks into the Qt main loop. This means that the reactor only
processes events when the Qt main loop is running, and it stalls if the
main thread blocks in some nested non-Qt message loop. This is a reasonable
thing to happen in a GUI application; nested message loops are used in
MessageBox, drap/drop, window resizing, and non-Qt dialog boxes (like the
standard file chooser).

The nested message loop will be doing the win32 GetMessage/DispatchMessage
dance. This is sufficient to keep the GUI updating smoothly, and it should
be sufficient for the reactor too. IMHO threadedselectreactor seems like
the best option for getting *this* right.

glyph wrote:

> threadedselectreactor is an interesting concept but hopelessly broken
> and untested in its current implementation.

Im currently using threadedselectreactor (plus private patches) and a
derivative threadedwin32eventreactor in production, so this statement
leaves me with a fairly big itch to scratch. I will check out the failing
tests.






From therve at free.fr  Mon Sep 25 08:48:18 2006
From: therve at free.fr (Thomas HERVE)
Date: Mon, 25 Sep 2006 14:48:18 +0200
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
In-Reply-To: <20060924193454.1717.730206262.divmod.quotient.58820@ohm>
References: <20060924193454.1717.730206262.divmod.quotient.58820@ohm>
Message-ID: <20060925144818.o1zpmy1j40ksgkso@itchy.wasabout.net>

Quoting glyph at divmod.com:

>> The next QT version (4.2, currently in RC1) contains support for the 
>> Glib eventloop. This has to be tested, but it promises use of the 
>> gtk reactor with Qt application. Qt 4.2 (and PyQt) is not released 
>> but should be by the time of Twisted 2.6; we could then write a 
>> documentation about integration.
>
> That would be great.  Is that going to be the default mainloop or an 
> optional add-on?

It's optional. It seems C++ apps will have a command-line switch. I 
don't know about PyQt, though.

>> The drawback is that you'll need glib (ie, python-gtk) to write a Qt app.
>
> Some might not call that a drawback ;).

Well, it might be a drawback if you want to use Qt under Mac :).

>> We also have a qt4 reactor 
>> (http://twistedmatrix.com/trac/ticket/1770) that needs a maintener. 
>> Last time I checked few things were needed to make the test suite 
>> pass.
>
> Are you willing to have a crack at fixing that code?

I'm no Qt expert, but I work with some so it could help. Consider it assigned.

-- 
Thomas


----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.




From fairwinds at eastlink.ca  Mon Sep 25 09:58:13 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Mon, 25 Sep 2006 10:58:13 -0300
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <20060925060407.1717.1679192272.divmod.quotient.59320@ohm>
References: <20060925060407.1717.1679192272.divmod.quotient.59320@ohm>
Message-ID: <4517E075.807@eastlink.ca>

Hi Glyph. I have recently added a post to the wxpython list to see if
other folks can make themselves available to assist with this effort.

http://lists.wxwidgets.org/cgi-bin/ezmlm-cgi?11:mss:55602:200609:hafkbkhbehmbhikjmmaf

Perhaps the first thing will be the deprecation warnings since these 
should be relatively simple. Then try and see what is happening with the 
failures. If the failures are as the result of reactor iterations for 
tests not relevant to the reactor, what direction should be taken? I 
raise this since this seems to run through Bob's comments and others 
concerning the qt reactor.

Please let us know about the buildbot once it is set up. I see Stephen
has offered support for a buildbot for windows which is excellent. Thank
you Stephen! Stephen - my sentiments about windows too but I am also in
the same boat as far as potential consumers of my app. I am also trying 
to keep my code crossplatform for mac (second most important) and linux.

Regards,
David


glyph at divmod.com wrote:
> On Mon, 25 Sep 2006 02:32:03 -0300, David Pratt <fairwinds at eastlink.ca> 
> wrote:
>> Hi Glyph. I am not sure if I am the right person, but at the same time 
>> I don't wish to see the code removed. I see deprecation warnings and 
>> failed tests. Not great.
> 
> Now you can see how I feel about this code :).
> 
>> I am willing to help but I am not sure that I possess the expertise to 
>> solve all the issues. I am willing to commit to trying though, 
>> hopefully with the help of others. Perhaps I'll post on wxpython list 
>> to see if there are others willing to help.
> 
> Thanks a lot.
> 
> This is as much as anyone could reasonably ask.  I'm sure that if you 
> start trying to track down the issues within Twisted and asking 
> questions, you will find that people on this mailing list and #twisted 
> on chat.freenode.net would be more than happy to help you learn more 
> about the reactor's internals.
> 
>> wxpython and twisted are both important toolkits. Twisted integration 
>> is important to me for my own projects. I am hoping someone from the 
>> Chandler project thinks so too and feels that sharing in this effort 
>> is the right thing to do. I know there are a number of folks using 
>> wxreactor or threadedselectreactor in their wxpython code. It is 
>> reasonable that we shoulder some responsibility to help ourselves.
> 
> I really appreciate this sentiment.  I'm glad you're interested in 
> helping out.
> 
> However, I think that Chandler uses Twisted in a rather idiosyncratic 
> way; it doesn't necessarily make sense for them to help, since this 
> isn't code that they're using.  If you can interest them in doing so, of 
> course, that's great :)
> 
> If you are aware of other uses of wxreactor though, the more the merrier.
> 
> Now that you've volunteered to at least start looking at the problems 
> here, I'll see if I can set up a buildslave to test these reactors.  
> However, I will probably only be able to set it up on one platform, and 
> given wx's nature we'll need a few other buildbots to make sure it works 
> consistently on mac/win/linux, so if any wxreactor users want to 
> contribute an additional buildbot that would be great.
> 
> Please keep us all appraised of your progress and let us know if you 
> need help!
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From general at eepatents.com  Mon Sep 25 11:01:46 2006
From: general at eepatents.com (Ed Suominen)
Date: Mon, 25 Sep 2006 08:01:46 -0700
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <E1GRXKs-0007p3-02@pyramid.twistedmatrix.com>
References: <E1GRXKs-0007p3-02@pyramid.twistedmatrix.com>
Message-ID: <4517EF5A.7090304@eepatents.com>

I'm using the qtreactor in a GPL-but-unreleased PyQt 4.1 application of
my own, and have not found any problems whatsoever with the integration
of the Qt Twisted event loops.  It's really a pretty slick combination.

As an example and a contribution, I offer the following (GPL'd) module:
http://deadbeefbabe.org/paste/1996 (syntax-highlighted version),
http://foss.eepatents.com/misc/qt-twisted-dialog.py (source). It allows
you to construct a non-blocking modal dialog, immediately obtaining a
deferred to the user's eventual input.

As an aside, I would be interested in people's viewpoints about whether
the Qt reactor is suitable for Twisted's MIT-style license, given that
it doesn't actually import any Qt code itself. It leaves that step up to
the user with the installation of a reactor into the Qt application
object. As every Qt user probably knows, the Qt library itself is
dual-licensed under either the GPL or Trolltech's proprietary license.

Best regards, Ed



From robert at gravina.com  Mon Sep 25 11:12:32 2006
From: robert at gravina.com (Robert Gravina)
Date: Tue, 26 Sep 2006 00:12:32 +0900
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <4517E075.807@eastlink.ca>
References: <20060925060407.1717.1679192272.divmod.quotient.59320@ohm>
	<4517E075.807@eastlink.ca>
Message-ID: <6661A04B-77D9-4E21-B234-EBA0F1AB6396@gravina.com>

> Hi Glyph. I have recently added a post to the wxpython list to see if
> other folks can make themselves available to assist with this effort.
>
> http://lists.wxwidgets.org/cgi-bin/ezmlm-cgi?11:mss: 
> 55602:200609:hafkbkhbehmbhikjmmaf
>

I'll be extremely embarrassed if I was wrong about the errors with  
2.7 :) All I did was run my (currently working on 2.6.3.3) code with  
2.7, noticed an error on startup, and reverted to 2.6.3.3.

Update: I reinstalled the version for my platform (Mac OS X, python  
2.4 unicode PPC - actually I now have both versions installed) and  
wrote a simple script and got this traceback. It would seem the  
problem might just be that wxreactor is using a depreciated way to  
use wxPython (i.e. was wxSOMETHING now is wx.SOMETHING), thanks to  
the helpful depreciation warning.

*** My script ***
import wxversion
#I have both 2.6.3.3 and 2.7 installed. Change this to 2.6.3.3 and  
the example works
wxversion.select("2.7")
from twisted.internet import wxreactor
wxreactor.install()
import wx

class MyApp(wx.App):
     def OnInit(self):
         frame = wx.Frame(None, -1, "Hello wxPython world")
         frame.Show(True)
         self.SetTopWindow(frame)
         return True

if __name__ == "__main__":
     app = MyApp(False)
     app.MainLoop()

*** The traceback: ***
moko:~/sp rgravina$ pythonw wxtest.py
/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site- 
packages/twisted/internet/wxreactor.py:37: DeprecationWarning: The  
wxPython compatibility package is no longer automatically generated  
or activly maintained.  Please switch to the wx package as soon as  
possible.
   from wxPython.wx import wxApp, wxCallAfter, wxEventLoop, wxFrame,  
NULL
Traceback (most recent call last):
   File "wxtest.py", line 4, in ?
     from twisted.internet import wxreactor
   File "/Library/Frameworks/Python.framework/Versions/2.4/lib/ 
python2.4/site-packages/twisted/internet/wxreactor.py", line 37, in ?
     from wxPython.wx import wxApp, wxCallAfter, wxEventLoop,  
wxFrame, NULL
   File "//Library/Frameworks/Python.framework/Versions/2.4/lib/ 
python2.4/site-packages/wx-2.7.0-mac-unicode/wxPython/__init__.py",  
line 15, in ?
     import _wx
   File "//Library/Frameworks/Python.framework/Versions/2.4/lib/ 
python2.4/site-packages/wx-2.7.0-mac-unicode/wxPython/_wx.py", line  
7, in ?
     from _controls import *
   File "//Library/Frameworks/Python.framework/Versions/2.4/lib/ 
python2.4/site-packages/wx-2.7.0-mac-unicode/wxPython/_controls.py",  
line 441, in ?
     wxFRAME_EX_CONTEXTHELP = wx._controls.FRAME_EX_CONTEXTHELP
AttributeError: 'module' object has no attribute 'FRAME_EX_CONTEXTHELP'

Robert



From michele.petrazzo at unipex.it  Mon Sep 25 11:46:52 2006
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Mon, 25 Sep 2006 17:46:52 +0200
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <D887F938-6EDF-4BD4-9419-715F8144C99A@gravina.com>
References: <20060925042811.1717.24676830.divmod.quotient.59246@ohm>
	<D887F938-6EDF-4BD4-9419-715F8144C99A@gravina.com>
Message-ID: <4517F9EC.6090703@unipex.it>

Robert  wrote:
>> That means that they do not currently work as well as the other 
>> reactors, but more seriously, if they were to be *completely* broken 
>> (say, start raising exceptions upon import)
> 
> Hate to break it to you, but I tried a preview build of 
> soon-to-be-released (I think) wxPython 2.7, and the twisted code raised 
> exceptions on import :) I reinstalled 2.6.3.3 so can't show you the 
> traceback. Dailies are available here if anyone wants to see what I mean.
> http://starship.python.net/crew/robind/wxPython/daily/
> 

I don't know what platform are you using, but here wx 2.7 
(2.7.0.0pre.20060712) and linux (gtk) work well. Work also well into my 
win box...

Simple tried replacing 2.6 with 2.7 and executing my _not so simple_ 
applications that use wx, twisted for tcp comunication and adbapi for db 
connections.


Michele



From fairwinds at eastlink.ca  Mon Sep 25 12:00:31 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Mon, 25 Sep 2006 13:00:31 -0300
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <4517EF5A.7090304@eepatents.com>
References: <E1GRXKs-0007p3-02@pyramid.twistedmatrix.com>
	<4517EF5A.7090304@eepatents.com>
Message-ID: <4517FD1F.6000304@eastlink.ca>

Hi Ed. Let's please leave the licensing issues of Twisted alone. This 
change was made quite some time ago as a license that would encourage 
developers to use Twisted. I think this should be respected and the 
licensing of code you are willing to commit, committed at MIT, so we 
don't need to open this debate.

It is a reasonable and open license for this type of framework and there 
is no point in cutting off commercial developers that wish to use it by 
inserting GPL code. The point is that there are those who do in fact 
obtain a license from Trolltech and will not wish to mix GPL with a 
proprietary app, thus the MIT works well for this. Many thanks.

Regards,
David

Ed Suominen wrote:
> I'm using the qtreactor in a GPL-but-unreleased PyQt 4.1 application of
> my own, and have not found any problems whatsoever with the integration
> of the Qt Twisted event loops.  It's really a pretty slick combination.
> 
> As an example and a contribution, I offer the following (GPL'd) module:
> http://deadbeefbabe.org/paste/1996 (syntax-highlighted version),
> http://foss.eepatents.com/misc/qt-twisted-dialog.py (source). It allows
> you to construct a non-blocking modal dialog, immediately obtaining a
> deferred to the user's eventual input.
> 
> As an aside, I would be interested in people's viewpoints about whether
> the Qt reactor is suitable for Twisted's MIT-style license, given that
> it doesn't actually import any Qt code itself. It leaves that step up to
> the user with the installation of a reactor into the Qt application
> object. As every Qt user probably knows, the Qt library itself is
> dual-licensed under either the GPL or Trolltech's proprietary license.
> 
> Best regards, Ed
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From michele.petrazzo at unipex.it  Mon Sep 25 12:06:50 2006
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Mon, 25 Sep 2006 18:06:50 +0200
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <20060924193900.1717.89550137.divmod.quotient.58826@ohm>
References: <20060924193900.1717.89550137.divmod.quotient.58826@ohm>
Message-ID: <4517FE9A.5050000@unipex.it>

glyph at divmod.com wrote:
> You have lots of other options.
> 
> 1. Continue using the wxreactor code by copying it into your 
> application.  We could even provide a separate page with
> "unmaintained reactors" for download.

For me, if you don't find someone that help you to maintain the wx
reactor, this are a good solution, since there are a lot of person, like
me, that use the (fantastic) twisted library and wx like GUI.

> 2. Help fix the problem.  This is really what I'd prefer.  You don't
>  have to have all the appropriate knowledge right now, just
> sufficient interest and energy to commit to *caring* that the
> buildbot is red in the future, and trying to fix it.

Just for see if I can help, I tried the "trial --reactor threadedselect
twisted", but after some (10 min) work, trial eat all my ram! and I must
close it with e "kill -9". Are there another method for execute trial?

Bye,
Michele

P.s.:
michele:~$ python
Python 2.4.4c0 (#2, Jul 30 2006, 15:43:58)
[GCC 4.1.2 20060715 (prerelease) (Debian 4.1.1-9)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import twisted twisted.__version__
'2.4.0'
>>> 




From exarkun at divmod.com  Mon Sep 25 12:27:55 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 25 Sep 2006 12:27:55 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, 
In-Reply-To: <4517FE9A.5050000@unipex.it>
Message-ID: <20060925162755.1717.853062564.divmod.quotient.59686@ohm>

On Mon, 25 Sep 2006 18:06:50 +0200, Michele Petrazzo <michele.petrazzo at unipex.it> wrote:
>glyph at divmod.com wrote:
>>You have lots of other options.
>>
>>1. Continue using the wxreactor code by copying it into your application. 
>>We could even provide a separate page with
>>"unmaintained reactors" for download.
>
>For me, if you don't find someone that help you to maintain the wx
>reactor, this are a good solution, since there are a lot of person, like
>me, that use the (fantastic) twisted library and wx like GUI.
>>2. Help fix the problem.  This is really what I'd prefer.  You don't
>>  have to have all the appropriate knowledge right now, just
>>sufficient interest and energy to commit to *caring* that the
>>buildbot is red in the future, and trying to fix it.
>
>Just for see if I can help, I tried the "trial --reactor threadedselect
>twisted", but after some (10 min) work, trial eat all my ram! and I must
>close it with e "kill -9". Are there another method for execute trial?

As a comparison, have you run trial with the default reactor?  If this fails
the same way, your machine have an odd configuration which is fouling up the
tests, or it may simply not have enough ram to run the full test suite.

On the other hand, if this runs successfully, then what you are seeing is
basically one aspect of the current problem with threadedselect reactor :)

Jean-Paul



From michele.petrazzo at unipex.it  Mon Sep 25 12:49:12 2006
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Mon, 25 Sep 2006 18:49:12 +0200
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <20060925162755.1717.853062564.divmod.quotient.59686@ohm>
References: <20060925162755.1717.853062564.divmod.quotient.59686@ohm>
Message-ID: <45180888.7030904@unipex.it>

Jean-Paul Calderone wrote:
>> Just for see if I can help, I tried the "trial --reactor 
>> threadedselect twisted", but after some (10 min) work, trial eat 
>> all my ram! and I must close it with e "kill -9". Are there another
>>  method for execute trial?
> 
> As a comparison, have you run trial with the default reactor?  If 
> this fails the same way, your machine have an odd configuration which
>  is fouling up the tests, or it may simply not have enough ram to run
>  the full test suite.
> 

My top say:
Mem:    776656k total,   592024k used,   184632k free,    31956k buffers

and after two minutes of "trial twisted",
5273 michele   25   0  250m 203m 5012 R 95.9 26.8   1:13.57 trial


What can I try, or what can I modify for make the tests? All my packages
are default packages from debian testing repository!

Michele



From exarkun at divmod.com  Mon Sep 25 13:12:29 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 25 Sep 2006 13:12:29 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, 
In-Reply-To: <45180888.7030904@unipex.it>
Message-ID: <20060925171229.1717.1479623071.divmod.quotient.59722@ohm>

On Mon, 25 Sep 2006 18:49:12 +0200, Michele Petrazzo <michele.petrazzo at unipex.it> wrote:
>Jean-Paul Calderone wrote:
>>>Just for see if I can help, I tried the "trial --reactor threadedselect 
>>>twisted", but after some (10 min) work, trial eat all my ram! and I must 
>>>close it with e "kill -9". Are there another
>>>  method for execute trial?
>>
>>As a comparison, have you run trial with the default reactor?  If this 
>>fails the same way, your machine have an odd configuration which
>>  is fouling up the tests, or it may simply not have enough ram to run
>>  the full test suite.
>
>My top say:
>Mem:    776656k total,   592024k used,   184632k free,    31956k buffers
>
>and after two minutes of "trial twisted",
>5273 michele   25   0  250m 203m 5012 R 95.9 26.8   1:13.57 trial
>
>
>What can I try, or what can I modify for make the tests? All my packages
>are default packages from debian testing repository!

Do you get any output at all?  It is not uncommon for the full test suite
to take as long as ten minutes.  It might take even longer, depending on how
fast the machine running the tests is.

You may also want to try running a subset of the tests.  To run only the core
tests, "trial twisted.test".  To run only the web tests, "trial twisted.web",
etc.

Jean-Paul



From michele.petrazzo at unipex.it  Mon Sep 25 13:13:52 2006
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Mon, 25 Sep 2006 19:13:52 +0200
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <4517F9EC.6090703@unipex.it>
References: <20060925042811.1717.24676830.divmod.quotient.59246@ohm>	<D887F938-6EDF-4BD4-9419-715F8144C99A@gravina.com>
	<4517F9EC.6090703@unipex.it>
Message-ID: <45180E50.1040100@unipex.it>

Michele Petrazzo wrote:
> I don't know what platform are you using, but here wx 2.7 
> (2.7.0.0pre.20060712) and linux (gtk) work well. Work also well into my 
> win box...
> 

Sorry, but I was using threadselectreactor direcly... This is my own
patch for wxreactor that work with wx 2.7.

Hope this help,
Michele

michele:/usr/lib/python2.4/site-packages/twisted/internet# diff 
wxreactor.py wxreactor_ok.py
37c37
< import wx
---
 > from wxPython.wx import wxApp, wxCallAfter, wxEventLoop, wxFrame, NULL
40c40
< class DummyApp(wx.App):
---
 > class DummyApp(wxApp):
84c84
<         self.interleave(wx.CallAfter)
---
 >         self.interleave(wxCallAfter)
92,93c92,93
<         ev = wx.EventLoop()
<         wx.EventLoop.SetActive(ev)
---
 >         ev = wxEventLoop()
 >         wxEventLoop.SetActive(ev)




From itamar at itamarst.org  Mon Sep 25 13:15:32 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 25 Sep 2006 13:15:32 -0400
Subject: [Twisted-Python] wxreactor buildbots
In-Reply-To: <451787FD.5010005@pangalactic.us>
References: <20060925060407.1717.1679192272.divmod.quotient.59320@ohm>
	<451787FD.5010005@pangalactic.us>
Message-ID: <45180EB4.2040208@itamarst.org>

Stephen Waterbury wrote:
> glyph at divmod.com wrote:
>> Now that you've volunteered to at least start looking at the problems 
>> here, I'll see if I can set up a buildslave to test these reactors.  
>> However, I will probably only be able to set it up on one platform, 
>> and given wx's nature we'll need a few other buildbots to make sure 
>> it works consistently on mac/win/linux, so if any wxreactor users 
>> want to contribute an additional buildbot that would be great.
>
> I'll volunteer to set up a wxreactor buildbot on the machine I use
> to do my windows builds.  It's not my platform of choice, but
> the vast majority of the user community I'm supporting use it
> (shudder), so it's the most important platform for my wx app.
Because of the way tsreactor and thus Wxreactor works you can't use 
trial with it... which is a good reason why we should figure out a 
better way to  support wx.



From michele.petrazzo at unipex.it  Mon Sep 25 13:31:25 2006
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Mon, 25 Sep 2006 19:31:25 +0200
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <20060925171229.1717.1479623071.divmod.quotient.59722@ohm>
References: <20060925171229.1717.1479623071.divmod.quotient.59722@ohm>
Message-ID: <4518126D.7020108@unipex.it>

> Do you get any output at all?
Yes, I see a lot of input

> It is not uncommon for the full test suite to take as long as ten
> minutes.  It might take even longer, depending on how fast the
> machine running the tests is.

AMD 2.6, 750 MB ram

> You may also want to try running a subset of the tests.  To run only
> the core tests, "trial twisted.test".  To run only the web tests,
> "trial twisted.web", etc.

michele:~$ trial twisted.web

<cut code>

Ran 186 tests in 4.249s

PASSED (skips=22, expectedFailures=6, successes=158)

What subset of test need I to execute for see the wxreactor problems, 
since I can't try the whole one?

Michele



From glyph at divmod.com  Mon Sep 25 17:39:44 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 25 Sep 2006 17:39:44 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <4517EF5A.7090304@eepatents.com>
Message-ID: <20060925213944.1717.150174852.divmod.quotient.59959@ohm>

On Mon, 25 Sep 2006 08:01:46 -0700, Ed Suominen <general at eepatents.com> wrote:

>As an example and a contribution, I offer the following (GPL'd) module:
>http://deadbeefbabe.org/paste/1996 (syntax-highlighted version),
>http://foss.eepatents.com/misc/qt-twisted-dialog.py (source). It allows
>you to construct a non-blocking modal dialog, immediately obtaining a
>deferred to the user's eventual input.

Thanks very much for that pointer.  I knew this was possible but it is the first working example I've seen of it!

>As an aside, I would be interested in people's viewpoints about whether
>the Qt reactor is suitable for Twisted's MIT-style license, given that
>it doesn't actually import any Qt code itself. It leaves that step up to
>the user with the installation of a reactor into the Qt application
>object. As every Qt user probably knows, the Qt library itself is
>dual-licensed under either the GPL or Trolltech's proprietary license.

It does "import" qt in the sense that there is an import line at the top of the file which will load the library.  IANAL, but as far as I know it is a matter of debate whether this sort of reference constitutes a "derivative work" under copyright law.  As such, it would be best to get Riverbank and Trolltech on the record as to their respective opinions on whether licensing such code as MIT is a GPL violation, since I believe PyQt is clearly a derivative work of Qt itself, and therefore both companies are potential enforcers of the license in this case.  Is anyone aware of the correct point of contact for these inquiries?

If they do indeed consider it a violation, we'd have to remove it from Twisted.  However, in that case, I would be happy to contribute the qt reactor to Riverbank and have them distribute it (under the GPL) with PyQt rather than us distributing it together with Twisted.  This might be a good excuse to finally make reactors properly pluggable.

As for this thread, I'd appreciate it if only people with relevant legal expertise and/or information from a responsible party at Trolltech or Riverbank would reply.  I know license debates are always fun to get involved in, but this is not the appropriate forum.  Twisted's MIT license is a matter of policy and is not open to debate.



From wsanchez at wsanchez.net  Mon Sep 25 22:41:06 2006
From: wsanchez at wsanchez.net (=?ISO-8859-1?Q?Wilfredo_S=E1nchez_Vega?=)
Date: Mon, 25 Sep 2006 19:41:06 -0700
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
References: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
Message-ID: <C11E7916-7A3E-4089-B727-769D801D3CF6@wsanchez.net>

On Sep 23, 2006, at 7:20 PM, glyph at divmod.com wrote:
> The reactors presented in the subject all seem to have been  
> abandoned.  Even our friends at Apple are mainly concerned with the  
> use of Twisted for server work, and while they've been attempting  
> to help us find someone to poke around GUI <-> reactor integration  
> on OS X, it's not their area of expertise.

   To be clear, the need for tsr or cfr is not limited to GUI  
applications; it's needed by anything using CoreFoundation and  
therefore requiring CFRunLoop.  Many non-GUI applications require a  
CFRunLoop.  Server applications that want to use any of the above-BSD  
OS X toolkits (eg. via PyObjC) will fall into this camp.

   I expect to be in this category eventually, though I have been  
avoiding it to date because PyObjC isn't presently included in OS X.

>> tsreactor is private in twisted - starts with _, so it doesn't really
>> guarantee anything or make any promises about working, and it's very
>> useful for integrating with broken event loops.
>
> It's exposed to users as a reactor on the command line.  Maybe  
> *that* should have an "_" added to it as well.  However, if we're  
> going to keep it around, it should have a buildbot, end of story.

   Well, you just got this spiffy XServe.  Is it not capable of  
running a tsr buildbot?  Would it be hard to maintain?  (I seriously  
have no clue.)

	-wsv

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2746 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060925/d5293a7a/attachment.bin 

From exarkun at divmod.com  Mon Sep 25 23:07:01 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 25 Sep 2006 23:07:01 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, corefoundation, threadedselect, wx
In-Reply-To: <C11E7916-7A3E-4089-B727-769D801D3CF6@wsanchez.net>
Message-ID: <20060926030701.1717.982929278.divmod.quotient.60227@ohm>

On Mon, 25 Sep 2006 19:41:06 -0700, Wilfredo S?nchez Vega <wsanchez at wsanchez.net> wrote:
>>
>>It's exposed to users as a reactor on the command line.  Maybe  *that* 
>>should have an "_" added to it as well.  However, if we're  going to keep 
>>it around, it should have a buildbot, end of story.
>
>   Well, you just got this spiffy XServe.  Is it not capable of  running a 
>tsr buildbot?  Would it be hard to maintain?  (I seriously  have no clue.)

One difficulty is that trial cannot currently run the test suite with tsr.
tsr is not really a reactor in the same way that poll, select, and gtk are
reactors: it has a run method, but calling it isn't how you invoke the magic
secrets of tsr.  Instead, you set it up to cooperate with another event loop.

So we need to have a way to run the tests at all first.  Then we can set up
a buildslave (which will presumably fail most of the test suite).  Then someone
needs to start fixing it :)

Jean-Paul



From NormanTindall at zdisk.net  Tue Sep 26 06:10:54 2006
From: NormanTindall at zdisk.net (Norman Tindall)
Date: Tue, 26 Sep 2006 14:10:54 +0400
Subject: [Twisted-Python] How to get protocol function do not block server?
Message-ID: <17813668843.20060926141054@zdisk.net>

Hello,
   I am a newbie in twisted, sorry if this was asked thousands times
   before.

I have wrote a simple protocol (over TCP sockets) with crc32.

Suppose one client made a handshake.. and then sends to server 10Mb of
data... at the end of that 10Mb there is an crc32..

crc32 is a pretty time consuming task on a slow machine..
while server calculates crc32 of 10Mb sent by client one,
other clients can not communicate with server
(i tryed by myself to log in while transfer.. and i was wating about a
10 seconds)
And also i have a UnCryptAFrame time consuming function.

How to make those function do not block server,
to run in background, and when result is avalable call a chain of
other functions (for example it would be nice to add a callback to
Factory.handleFrame(data) with the return results of
Protocol.UnCryptAFrame())?

Is it have to be deferToThread ?

And also does dataReceived blocks server by itself?
Is twisted.TCPServer scalable, can it serve 1000 - 10000 request in a
minute? (in a secound would be great :) )

-------------------------------------------------------------------------------- server.py
class MyProtocolServer(protocol.Protocol):
      # ... connectionMade ..

    def dataReceived(self, data):

        self.inp_buf += data
        if self.initialized != 0:
            self.handleData()
        else:
            self.handShake() # handshake is fast.. but i would gladly
                             # make async if i know how.

    def handleData(self):
        if self.w_len is None and len(self.inp_buf) >= 5:
            self.w_len = struct.unpack("L",self.UncryptLen(self.inp_buf[:5]))[0]
        if len(self.inp_buf) == self.w_len:
            uncrypt_frame = self.UnCryptAFrame(self.inp_buf)
            self.NullInpBufer()

    def UnCryptAFrame(self):
        # a very slow function!
        pass

class MyFactory(protocol.ServerFactory):

    protocol = MyProtocolServer

    def buildProtocol(self, addr):
        p = MyProtocolServer()
        p.factory = self
        p.addr = addr
        # ...
        return p

factory = MyFactory()

application = service.Application('myservice', uid=1, gid=1)

internet.TCPServer(9090, factory).setServiceParent(service.IServiceCollection(application))

-------------------------------------------------------------------------------- end server.py

$ twistd -ny ./f_server.py
2006/09/26 14:18 SST [-] Log opened.
2006/09/26 14:18 SST [-] twistd 2.4.0 (/usr/bin/python 2.4.2) starting up
2006/09/26 14:18 SST [-] reactor class: <class 'twisted.internet.selectreactor.SelectReactor'>
2006/09/26 14:18 SST [-] Loading ./f_server.py...
2006/09/26 14:18 SST [-] Loaded.
2006/09/26 14:18 SST [-] __builtin__.UpSTPFactory starting on 9090
2006/09/26 14:18 SST [-] Starting factory <__builtin__.UpSTPFactory instance at 0x407ec54c>
2006/09/26 14:18 SST [-] set uid/gid 1/1
-------------------------------------------------------

In other words if i do something slow in dataReceived (of my Protocol)
it seems that it blocks server. how to avoid this?

sorry for my english :)
-- 
Best regards,
 Norman                          mailto:NormanTindall at zdisk.net




From mithrandi-twisted-python at mithrandi.za.net  Tue Sep 26 05:49:47 2006
From: mithrandi-twisted-python at mithrandi.za.net (Tristan Seligmann)
Date: Tue, 26 Sep 2006 11:49:47 +0200
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <4517FD1F.6000304@eastlink.ca>
References: <E1GRXKs-0007p3-02@pyramid.twistedmatrix.com>
	<4517EF5A.7090304@eepatents.com> <4517FD1F.6000304@eastlink.ca>
Message-ID: <20060926094946.GN23117@mithrandi.za.net>

* David Pratt <fairwinds at eastlink.ca> [2006-09-25 13:00:31 -0300]:

> Hi Ed. Let's please leave the licensing issues of Twisted alone. This 
> change was made quite some time ago as a license that would encourage 
> developers to use Twisted. I think this should be respected and the 
> licensing of code you are willing to commit, committed at MIT, so we 
> don't need to open this debate.

I was not under the impression that he was suggesting that Twisted's
license be changed; instead I believe he was merely trying to point out
that since Twisted code is MIT-licensed as a matter of policy, having
code that possible constitutes a derivative work of Qt may be legally
problematic. Please note that I'm not trying to suggest an informed
opinion on whether or not this is true; IANAL etc. Also see glyph's post
in this thread for a reasonable course of action to clear this potential
issue up.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060926/9cdc9f4b/attachment.pgp 

From ssgzhantr at gmail.com  Tue Sep 26 05:54:04 2006
From: ssgzhantr at gmail.com (aerodew)
Date: Tue, 26 Sep 2006 17:54:04 +0800
Subject: [Twisted-Python] How to get protocol function do not block server?
In-Reply-To: <17813668843.20060926141054@zdisk.net>
References: <17813668843.20060926141054@zdisk.net>
Message-ID: <baf51e510609260254v2b54843ej8b64845e12d33642@mail.gmail.com>

Is it have to be deferToThread ?

   I think so.since if you don't want to block server ,you should let the
time-consuming process run in a separate thread from the main one

And also does dataReceived blocks server by itself?

   yes, if you have ever hacked implementation of reactor,you will see that
reactor just dispatches  the data recevied  event  to correspondent
protocol's dataReceived handle.
   there is a threadable reactor available,but seemingly it is not stable
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060926/f8553a8f/attachment.htm 

From manlio_perillo at libero.it  Tue Sep 26 06:31:33 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue, 26 Sep 2006 12:31:33 +0200
Subject: [Twisted-Python] How to get protocol function do not block server?
In-Reply-To: <17813668843.20060926141054@zdisk.net>
References: <17813668843.20060926141054@zdisk.net>
Message-ID: <45190185.50707@libero.it>

Norman Tindall ha scritto:
> Hello,
>    I am a newbie in twisted, sorry if this was asked thousands times
>    before.
> 
> I have wrote a simple protocol (over TCP sockets) with crc32.
> 
> Suppose one client made a handshake.. and then sends to server 10Mb of
> data... at the end of that 10Mb there is an crc32..
> 

You can require a max size for the packets.

A more general solution is to do the job in chunks:

>From Python documentation:
    print binascii.crc32("hello world")
    # Or, in two pieces:
    crc = binascii.crc32("hello")
    crc = binascii.crc32(" world", crc)
    print crc


Here is an example of computing the edonkey2k hash:

def waitFor(seconds):
    """Wait for the specified amount of seconds.
    To be used in a deferred generator.
    """

    from twisted.internet import reactor

    d = defer.Deferred()
    reactor.callLater(seconds, lambda: d.callback(None))

    return defer.waitForDeferred(d)


@defer.deferredGenerator
def getFileHash(path):
    """XXX TODO use a smaller file buffer size (8096 bytes?)
                use a thread?

    XXX TODO add support for md5, sha1 and crc32.
    """

    from Crypto.Hash import MD4


    # this is used as file buffer size, too
    CHUNK_SIZE = 9728000

    # XXX delay to give the reactor a chance
    DELAY = 0

    hashList = []

    fp = file(path, 'rb')
    while True:
        hash = MD4.new()
        data = fp.read(CHUNK_SIZE)
        yield waitFor(DELAY)

        if len(data) == 0:
            hash.update('')
            hashList.append(hash.digest())

        hash.update(data)
        yield waitFor(DELAY)

        hashList.append(hash.digest())

        if len(data) < CHUNK_SIZE:
            break

    # compute the hash of the hash list
    hash = MD4.new()
    hash.update(''.join(hashList))
    yield waitFor(DELAY)

    yield hash.hexdigest()

You can do the same, using cStringIO.

> crc32 is a pretty time consuming task on a slow machine..
> while server calculates crc32 of 10Mb sent by client one,
> other clients can not communicate with server
> (i tryed by myself to log in while transfer.. and i was wating about a
> 10 seconds)
> And also i have a UnCryptAFrame time consuming function.
> 

Check if the encryption can be done in chunks.




Regards  Manlio Perillo



From glyph at divmod.com  Tue Sep 26 09:45:45 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 26 Sep 2006 09:45:45 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926094946.GN23117@mithrandi.za.net>
Message-ID: <20060926134545.1717.1841879848.divmod.quotient.60675@ohm>


On Tue, 26 Sep 2006 11:49:47 +0200, Tristan Seligmann <mithrandi-twisted-python at mithrandi.za.net> wrote:
>* David Pratt <fairwinds at eastlink.ca> [2006-09-25 13:00:31 -0300]:
>
>> Hi Ed. Let's please leave the licensing issues of Twisted alone. This
>> change was made quite some time ago as a license that would encourage
>> developers to use Twisted. I think this should be respected and the
>> licensing of code you are willing to commit, committed at MIT, so we
>> don't need to open this debate.
>
>I was not under the impression that he was suggesting that Twisted's
>license be changed; instead I believe he was merely trying to point out
>that since Twisted code is MIT-licensed as a matter of policy, having
>code that possible constitutes a derivative work of Qt may be legally
>problematic.

That's what I took away from it as well, and it turns out that he was correct.  There is a problem.

I've gotten in touch with Riverbank Computing, the copyright holders on PyQt, and they are of the opinion that any Python code that imports "qt" is, in fact, a derivative work and therefore beholden to the GPL.

I'll be removing it from the Twisted repository and contributing it to Riverbank for inclusion in PyQt at my next available opportunity.  This is probably going to require an immediate addition of a plugin API for reactors, so it can be loaded externally.



From foom at fuhm.net  Tue Sep 26 11:42:18 2006
From: foom at fuhm.net (James Y Knight)
Date: Tue, 26 Sep 2006 11:42:18 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926134545.1717.1841879848.divmod.quotient.60675@ohm>
References: <20060926134545.1717.1841879848.divmod.quotient.60675@ohm>
Message-ID: <C2AF19A4-C84D-410C-91F6-4B29A55AA21F@fuhm.net>

On Sep 26, 2006, at 9:45 AM, glyph at divmod.com wrote:
> I've gotten in touch with Riverbank Computing, the copyright  
> holders on PyQt, and they are of the opinion that any Python code  
> that imports "qt" is, in fact, a derivative work and therefore  
> beholden to the GPL.

The only issue here is that we don't want to confuse people by having  
part of Twisted (qtreactor) be GPL.

But wait, the MIT license is compatible with the GPL. It is perfectly  
acceptable to write a work under the MIT license (qtreactor) which  
links to a GPLd work (pyqt). I've never seen anybody say that's  
illegal. The only issue here is that you cannot write a proprietary  
program using qtreactor (even though qtreactor itself is MIT),  
because pyqt is still licensed under the GPL, and anything linking  
with the GPL program must be *GPL-compatible*. But even though you  
cannot take advantage of all the permissions of the MIT license when  
using qtreactor, our code, itself, is not under the GPL. You could  
take the qtreactor, make a derivative of it which doesn't use qt, and  
have that be MIT. I really think there's no problem here.


> I'll be removing it from the Twisted repository and contributing it  
> to Riverbank for inclusion in PyQt at my next available  
> opportunity.  This is probably going to require an immediate  
> addition of a plugin API for reactors, so it can be loaded externally.

I strongly object to this, regardless of the outcome of the above.  
The internal reactor supporting APIs (posixbase etc) are not stable  
enough that I'm at all comfortable with giving a reactor over to  
external maintenance. If we have to, please instead let's segment it  
into a separate distributable, but still develop and release it in  
lockstep with twisted core.

James



From glyph at divmod.com  Tue Sep 26 12:12:20 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 26 Sep 2006 12:12:20 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <C2AF19A4-C84D-410C-91F6-4B29A55AA21F@fuhm.net>
Message-ID: <20060926161220.1717.85315677.divmod.quotient.60772@ohm>

On Tue, 26 Sep 2006 11:42:18 -0400, James Y Knight <foom at fuhm.net> wrote:
>On Sep 26, 2006, at 9:45 AM, glyph at divmod.com wrote:
>>I've gotten in touch with Riverbank Computing, the copyright  holders on 
>>PyQt, and they are of the opinion that any Python code  that imports "qt" 
>>is, in fact, a derivative work and therefore  beholden to the GPL.

>The only issue here is that we don't want to confuse people by having  part 
>of Twisted (qtreactor) be GPL.

Twisted is ostensibly a derivative work of all of the parts of Twisted.

>But wait, the MIT license is compatible with the GPL.

And that's your professional legal opinion?

It may be that riverbank and trolltech agree with this interpretation.  The response I received wasn't entirely clear.  However, you are making a number of assumptions about intellectual propertly law which are both outside your expertise and, to my knowledge, still undecided by any case law.

I've asked the fellow at Riverbank for a clarification of his intent before reviewing and committing the removal.  However, the impression I got from my first exchange is that Trolltech regards the QT API as their intellectual property, so the presence of phrases like "QObject.connect" and "QSocketNotifier.__init__" would make qtreactor a derivative work of their intellectual property, much like simple mentions of a fictional character's name in a short story can also classify as a derivative work.

>>I'll be removing it from the Twisted repository and contributing it  to 
>>Riverbank for inclusion in PyQt at my next available  opportunity.  This is 
>>probably going to require an immediate  addition of a plugin API for 
>>reactors, so it can be loaded externally.
>
>I strongly object to this, regardless of the outcome of the above.  The 
>internal reactor supporting APIs (posixbase etc) are not stable  enough that 
>I'm at all comfortable with giving a reactor over to  external maintenance. 
>If we have to, please instead let's segment it  into a separate 
>distributable, but still develop and release it in  lockstep with twisted 
>core.

If we distribute it separately, I believe it will create license confusion due to the interaction of Qt and PyQt commercial licenses.  However, I'll let the people who are actually interested in Twisted and Qt integration work this out with the PyQt maintainer; I don't care, personally.



From bob at redivi.com  Tue Sep 26 12:30:54 2006
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 26 Sep 2006 09:30:54 -0700
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926134545.1717.1841879848.divmod.quotient.60675@ohm>
References: <20060926094946.GN23117@mithrandi.za.net>
	<20060926134545.1717.1841879848.divmod.quotient.60675@ohm>
Message-ID: <6a36e7290609260930w48dbfaa4x7bce179d83d12994@mail.gmail.com>

On 9/26/06, glyph at divmod.com <glyph at divmod.com> wrote:
>
> On Tue, 26 Sep 2006 11:49:47 +0200, Tristan Seligmann <mithrandi-twisted-python at mithrandi.za.net> wrote:
> >* David Pratt <fairwinds at eastlink.ca> [2006-09-25 13:00:31 -0300]:
> >
> >> Hi Ed. Let's please leave the licensing issues of Twisted alone. This
> >> change was made quite some time ago as a license that would encourage
> >> developers to use Twisted. I think this should be respected and the
> >> licensing of code you are willing to commit, committed at MIT, so we
> >> don't need to open this debate.
> >
> >I was not under the impression that he was suggesting that Twisted's
> >license be changed; instead I believe he was merely trying to point out
> >that since Twisted code is MIT-licensed as a matter of policy, having
> >code that possible constitutes a derivative work of Qt may be legally
> >problematic.
>
> That's what I took away from it as well, and it turns out that he was correct.  There is a problem.
>
> I've gotten in touch with Riverbank Computing, the copyright holders on PyQt, and they are of the opinion that any Python code that imports "qt" is, in fact, a derivative work and therefore beholden to the GPL.
>
> I'll be removing it from the Twisted repository and contributing it to Riverbank for inclusion in PyQt at my next available opportunity.  This is probably going to require an immediate addition of a plugin API for reactors, so it can be loaded externally.

Maybe this is a good time to consider setuptools support? Entry points
are the external plug-in API that everyone else uses. Also, the fact
that Twisted can't be listed as a dependency in any setuptools-using
projects due to its non-standard setup.py is one huge pain in the ass.

-bob



From eprparadocs at gmail.com  Tue Sep 26 12:51:13 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Tue, 26 Sep 2006 12:51:13 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926161220.1717.85315677.divmod.quotient.60772@ohm>
References: <20060926161220.1717.85315677.divmod.quotient.60772@ohm>
Message-ID: <45195A81.50208@gmail.com>

Not that I mean to beat a dead horse, but the use of a single word or 
phrase in a document doesn't fall under the derivative work clause of 
copyright. Instead in comes from trademark law. For instance to xerox 
something is one of those cases where the mark Xerox was lost to the 
common use of to copy something. Google is undergoing just such an issue 
right now. At no point can't you use one word or phase in an document 
and have it magically copyrighted. On the other hand using a trademark 
means you have to acknowledge ownership.

Now this isn't to say that you can use the idea of Professor X in a 
document - a story - and not run into problems. That is a totally 
different beast and isn't covered by Trademark or Copyright law. Instead 
it is a part of intellectual property law.

But none of this applies to QT. You can easily use a library - with an 
MIT license or not - to link to a GPL'ed library. What you can't do is 
assume the entire work produce as the lesser of the two libraries. This 
means that you can link something with Twisted's QT reactor and still 
link it with PyQT or QT. The heart of the issue is that the entire 
product will fall under the more restrictive of the libraries, in this 
case GPL. GPL doesn't say you can't link with anything other than GPL; 
it only says the resulting work must be GPL. Since neither the MIT or 
BSD licenses say that you must have a resulting work product of MIT or 
BSD, you are safe.

In no case, do I believe you need to remove the QT reactor from the 
Twisted. It has no impact other than to make things more difficult to 
use. Is this what is really wanted here?

FWIW,
Chuck Wegrzyn


glyph at divmod.com wrote:
> On Tue, 26 Sep 2006 11:42:18 -0400, James Y Knight <foom at fuhm.net> wrote:
>> On Sep 26, 2006, at 9:45 AM, glyph at divmod.com wrote:
>>> I've gotten in touch with Riverbank Computing, the copyright  holders 
>>> on PyQt, and they are of the opinion that any Python code  that 
>>> imports "qt" is, in fact, a derivative work and therefore  beholden 
>>> to the GPL.
> 
>> The only issue here is that we don't want to confuse people by having  
>> part of Twisted (qtreactor) be GPL.
> 
> Twisted is ostensibly a derivative work of all of the parts of Twisted.
> 
>> But wait, the MIT license is compatible with the GPL.
> 
> And that's your professional legal opinion?
> 
> It may be that riverbank and trolltech agree with this interpretation.  
> The response I received wasn't entirely clear.  However, you are making 
> a number of assumptions about intellectual propertly law which are both 
> outside your expertise and, to my knowledge, still undecided by any case 
> law.
> 
> I've asked the fellow at Riverbank for a clarification of his intent 
> before reviewing and committing the removal.  However, the impression I 
> got from my first exchange is that Trolltech regards the QT API as their 
> intellectual property, so the presence of phrases like "QObject.connect" 
> and "QSocketNotifier.__init__" would make qtreactor a derivative work of 
> their intellectual property, much like simple mentions of a fictional 
> character's name in a short story can also classify as a derivative work.
> 
>>> I'll be removing it from the Twisted repository and contributing it  
>>> to Riverbank for inclusion in PyQt at my next available  
>>> opportunity.  This is probably going to require an immediate  
>>> addition of a plugin API for reactors, so it can be loaded externally.
>>
>> I strongly object to this, regardless of the outcome of the above.  
>> The internal reactor supporting APIs (posixbase etc) are not stable  
>> enough that I'm at all comfortable with giving a reactor over to  
>> external maintenance. If we have to, please instead let's segment it  
>> into a separate distributable, but still develop and release it in  
>> lockstep with twisted core.
> 
> If we distribute it separately, I believe it will create license 
> confusion due to the interaction of Qt and PyQt commercial licenses.  
> However, I'll let the people who are actually interested in Twisted and 
> Qt integration work this out with the PyQt maintainer; I don't care, 
> personally.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From foom at fuhm.net  Tue Sep 26 13:01:50 2006
From: foom at fuhm.net (James Y Knight)
Date: Tue, 26 Sep 2006 13:01:50 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926161220.1717.85315677.divmod.quotient.60772@ohm>
References: <20060926161220.1717.85315677.divmod.quotient.60772@ohm>
Message-ID: <675CF4CB-D067-4EE7-81A7-1F4C27C4F998@fuhm.net>


On Sep 26, 2006, at 12:12 PM, glyph at divmod.com wrote:

> On Tue, 26 Sep 2006 11:42:18 -0400, James Y Knight <foom at fuhm.net>  
> wrote:
>> On Sep 26, 2006, at 9:45 AM, glyph at divmod.com wrote:
>>> I've gotten in touch with Riverbank Computing, the copyright   
>>> holders on PyQt, and they are of the opinion that any Python  
>>> code  that imports "qt" is, in fact, a derivative work and  
>>> therefore  beholden to the GPL.
>
>> The only issue here is that we don't want to confuse people by  
>> having  part of Twisted (qtreactor) be GPL.
>
> Twisted is ostensibly a derivative work of all of the parts of  
> Twisted.

More than ostensibly, since code has been _literally_ copied all  
around the codebase from file to file.

>> But wait, the MIT license is compatible with the GPL.
>
> And that's your professional legal opinion?

It is a statement of indisputable fact that you can take MIT licensed  
source code and combine with GPL licensed source code and create a  
GPL licensed executable. We distribute MIT licensed source code.

Apparently RMS said the following to a gnome mailing list circa 2003.  
I can't find the original message, but I have no reason to doubt its  
authenticity:
> This exception would be redundant, because simple non-copyleft
> licenses such as X11 and BSD are compatible with the GPL already.
>
> So if you want to write a non-copylefted application, release it under
> the X11 license, and link it with a GPL-covered library, that is
> allowed. The linked executable would be covered by the GPL, of
> course, but the app source code would be covered by the X11 license
> alone.

And let's take the example of Python itself, which has a readline  
module, distributed under the python license. Again, similar  
circumstance. If you actually make use of the readline module, your  
program will need to be distributed under the GPL. But the source  
code is still Python licensed.

> It may be that riverbank and trolltech agree with this  
> interpretation.  The response I received wasn't entirely clear.   
> However, you are making a number of assumptions about intellectual  
> propertly law which are both outside your expertise and, to my  
> knowledge, still undecided by any case law.

If you think that twisted is in imminent danger of a lawsuit from  
Riverbank or Trolltech, then by all means simply remove qtreactor  
completely. Even presuming we are not doing anything wrong, it would  
still not be worth a lawsuit to determine that. However, I don't  
think anybody is about to sue Twisted for including qtreactor. But,  
if we're not about to be sued, case law is much less important than  
accepted existing practice in the open source world.

> I've asked the fellow at Riverbank for a clarification of his  
> intent before reviewing and committing the removal.  However, the  
> impression I got from my first exchange is that Trolltech regards  
> the QT API as their intellectual property, so the presence of  
> phrases like "QObject.connect" and "QSocketNotifier.__init__" would  
> make qtreactor a derivative work of their intellectual property,  
> much like simple mentions of a fictional character's name in a  
> short story can also classify as a derivative work.

Please don't use the phrase "intellectual property". It is  
dangerously misleading and worse than meaningless. I assume you mean  
copyright, in which it is my unprofessional opinion that it is  
ridiculous to talk about copyright in the phrase  
QSocketNotifier.__init__. If it is truly their position that the  
textual source code of qtreactor is a derivative work of PyQT, I  
think they are quite confused.

There are numerous instances of programs using Qt (take KDE for  
example!) licensed under non-GPL terms. Parts of KDE are under LGPL,  
BSD, and Artistic licenses. See http://developer.kde.org/ 
documentation/books/kde-2.0-development/ch19.html

If it's good enough for KDE, I don't see how it's not good enough for  
us. I'm sure many more people with actual legal experience have  
looked over the situation with KDE.

James
>



From TimothyFitz at gmail.com  Tue Sep 26 13:06:46 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Tue, 26 Sep 2006 13:06:46 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <6a36e7290609260930w48dbfaa4x7bce179d83d12994@mail.gmail.com>
References: <20060926094946.GN23117@mithrandi.za.net>
	<20060926134545.1717.1841879848.divmod.quotient.60675@ohm>
	<6a36e7290609260930w48dbfaa4x7bce179d83d12994@mail.gmail.com>
Message-ID: <972ec5bd0609261006rc0e0922i3d2c4c334da0d315@mail.gmail.com>

On 9/26/06, Bob Ippolito <bob at redivi.com> wrote:
> Maybe this is a good time to consider setuptools support? Entry points
> are the external plug-in API that everyone else uses. Also, the fact
> that Twisted can't be listed as a dependency in any setuptools-using
> projects due to its non-standard setup.py is one huge pain in the ass.

it was considered, and there were no objections (and many people who
would like it):
http://twistedmatrix.com/trac/ticket/1533

someone just has to actually implement it. I'd like to sprint on this
Friday (At Rochester DevHouse, http://xkfm.com/wiki) assuming the
buildslave is up by then.

I'm completely mac-ignorant, how is our installation on that platform?



From bob at redivi.com  Tue Sep 26 13:18:50 2006
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 26 Sep 2006 10:18:50 -0700
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <972ec5bd0609261006rc0e0922i3d2c4c334da0d315@mail.gmail.com>
References: <20060926094946.GN23117@mithrandi.za.net>
	<20060926134545.1717.1841879848.divmod.quotient.60675@ohm>
	<6a36e7290609260930w48dbfaa4x7bce179d83d12994@mail.gmail.com>
	<972ec5bd0609261006rc0e0922i3d2c4c334da0d315@mail.gmail.com>
Message-ID: <6a36e7290609261018u3109d163i9efacf2b781dc584@mail.gmail.com>

On 9/26/06, Timothy Fitz <TimothyFitz at gmail.com> wrote:
> On 9/26/06, Bob Ippolito <bob at redivi.com> wrote:
> > Maybe this is a good time to consider setuptools support? Entry points
> > are the external plug-in API that everyone else uses. Also, the fact
> > that Twisted can't be listed as a dependency in any setuptools-using
> > projects due to its non-standard setup.py is one huge pain in the ass.
>
> it was considered, and there were no objections (and many people who
> would like it):
> http://twistedmatrix.com/trac/ticket/1533
>
> someone just has to actually implement it. I'd like to sprint on this
> Friday (At Rochester DevHouse, http://xkfm.com/wiki) assuming the
> buildslave is up by then.

Awesome.

> I'm completely mac-ignorant, how is our installation on that platform?

Same as any other *nix.

-bob



From glyph at divmod.com  Tue Sep 26 14:14:24 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 26 Sep 2006 14:14:24 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <675CF4CB-D067-4EE7-81A7-1F4C27C4F998@fuhm.net>
Message-ID: <20060926181424.1717.368017904.divmod.quotient.60855@ohm>

On Tue, 26 Sep 2006 13:01:50 -0400, James Y Knight <foom at fuhm.net> wrote:

>On Sep 26, 2006, at 12:12 PM, glyph at divmod.com wrote:
>>On Tue, 26 Sep 2006 11:42:18 -0400, James Y Knight <foom at fuhm.net>  wrote:
>>>On Sep 26, 2006, at 9:45 AM, glyph at divmod.com wrote:

>>And that's your professional legal opinion?

>We distribute MIT licensed source code.

That is the question, isn't it :).

>>So if you want to write a non-copylefted application, release it under
>>the X11 license, and link it with a GPL-covered library, that is
>>allowed. The linked executable would be covered by the GPL, of
>>course, but the app source code would be covered by the X11 license
>>alone.

The GPL license text doesn't refer to "linking", there's really practically no such thing as "linking" in Python, so this is RMS's opinion of how the license should work in a different context than the one we're talking about.  What's interesting is to what extent the copyright holders in this situation agree, and when (and where) they think this "linking" happens.

>And let's take the example of Python itself, which has a readline  module, 
>distributed under the python license. Again, similar  circumstance. If you 
>actually make use of the readline module, your  program will need to be 
>distributed under the GPL. But the source  code is still Python licensed.

Python is a C program, where the conventional understanding of "linking" makes sense, and readline is copyrighted by the FSF, which makes RMS's interpretation relevant.  This is not the same situation.

>>It may be that riverbank and trolltech agree with this  interpretation. 
>>The response I received wasn't entirely clear.

>If you think that twisted is in imminent danger of a lawsuit from  Riverbank 
>or Trolltech, then by all means simply remove qtreactor  completely.

Obviously not.  The question here is one of intent, not punitive damages.

In Riverbank/Trolltech's case, the license is used as a means to deter commercial users from using the software unless they pay a licensing fee.  Lawsuits, and the threat thereof, are the weapon used to enforce that intent.

I don't think that we should wait until they actually start threatening us with legal action before we do something to put the situation with respect to their code more in line with their intent with their licenses.

>Please don't use the phrase "intellectual property".

I wish I didn't even *know* the phrase, but I was quoting Phil Thompson (Riverbank) directly.  He wrote:

"""
Trolltech will have the same view. As far as they are concerned their
intellectual property is the API and it doesn't matter how it is
accessed.
"""

This is probably, as you say, legal nonsense.  I don't think Mr. Thompson is a lawyer either, nor is he speaking authoritatively for trolltech's lawyers.  But, he is a copyright holder in this case, and therefore entitled to certain outlandish opinions.

>If it is truly their 
>position that the  textual source code of qtreactor is a derivative work of 
>PyQT, I  think they are quite confused.

If it is your opinion that the "textual source code" is not a derivative work because it merely refers to, but does not incorporate, the text of qtreactor or qt, then the GPL is completely meaningless in the context of Python and there was no point in licensing it that way in the first place.  Python bytecode does not make any additional references to the code it is importing beyond what Python source code does.

In that case the GPL can not apply to Python in any practical way.  I suspect that someone applying the GPL license to a bunch of Python code *would* disagree with that interpratation.

>If it's good enough for KDE, I don't see how it's not good enough for  us. 
>I'm sure many more people with actual legal experience have  looked over the 
>situation with KDE.

Oh yeah, and KDE has never had any problems with licensing ;-).



From glyph at divmod.com  Tue Sep 26 14:17:35 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 26 Sep 2006 14:17:35 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <6a36e7290609261018u3109d163i9efacf2b781dc584@mail.gmail.com>
Message-ID: <20060926181735.1717.1177674818.divmod.quotient.60857@ohm>

On Tue, 26 Sep 2006 10:18:50 -0700, Bob Ippolito <bob at redivi.com> wrote:
>On 9/26/06, Timothy Fitz <TimothyFitz at gmail.com> wrote:
>>On 9/26/06, Bob Ippolito <bob at redivi.com> wrote:
>> > Maybe this is a good time to consider setuptools support? Entry points
>> > are the external plug-in API that everyone else uses. Also, the fact
>> > that Twisted can't be listed as a dependency in any setuptools-using
>> > projects due to its non-standard setup.py is one huge pain in the ass.
>>
>>it was considered, and there were no objections (and many people who
>>would like it):
>>http://twistedmatrix.com/trac/ticket/1533

That ticket doesn't seem to refer to setuptools at all, just distutils.  I certainly haven't seen a discussion of removing twisted.plugin and switching to entry points.

>>someone just has to actually implement it. I'd like to sprint on this
>>Friday (At Rochester DevHouse, http://xkfm.com/wiki) assuming the
>>buildslave is up by then.
>
>Awesome.
>>I'm completely mac-ignorant, how is our installation on that platform?
>
>Same as any other *nix.

... except for the parts that aren't :).

You can find some packages for different styles of Mac installation at

    http://twistedmatrix.com/trac/wiki/Packages#MacOSX




From TimothyFitz at gmail.com  Tue Sep 26 14:24:40 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Tue, 26 Sep 2006 14:24:40 -0400
Subject: Fwd: [Twisted-Python] Twisted & Qt
In-Reply-To: <972ec5bd0609261124q30451400q78da5a269223f7d5@mail.gmail.com>
References: <6a36e7290609261018u3109d163i9efacf2b781dc584@mail.gmail.com>
	<20060926181735.1717.1177674818.divmod.quotient.60857@ohm>
	<972ec5bd0609261124q30451400q78da5a269223f7d5@mail.gmail.com>
Message-ID: <972ec5bd0609261124s3d8c6a4bwe3d0e13eea806cea@mail.gmail.com>

On 9/26/06, glyph at divmod.com <glyph at divmod.com> wrote:
> That ticket doesn't seem to refer to setuptools at all, just distutils.  I certainly haven't seen a discussion of removing twisted.plugin and switching to entry points.


Bob said "Maybe this is a good time to consider setuptools support?"
and I was trying to answer that one question. I agree that it's not
about moving entry points, but distutils is a required precursor for
setuptools.

Gah, sorry for the confusion.

To clarify *once* we make it to actually using distutils, then we'll
talk about setuptools (it's the direction I'd like to go, but there
have been significant issues that I think were resolved but I haven't
checked in the past six months).



From bob at redivi.com  Tue Sep 26 14:59:57 2006
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 26 Sep 2006 11:59:57 -0700
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <972ec5bd0609261124s3d8c6a4bwe3d0e13eea806cea@mail.gmail.com>
References: <6a36e7290609261018u3109d163i9efacf2b781dc584@mail.gmail.com>
	<20060926181735.1717.1177674818.divmod.quotient.60857@ohm>
	<972ec5bd0609261124q30451400q78da5a269223f7d5@mail.gmail.com>
	<972ec5bd0609261124s3d8c6a4bwe3d0e13eea806cea@mail.gmail.com>
Message-ID: <6a36e7290609261159j7eb4c05fle3938a30ef2f1792@mail.gmail.com>

On 9/26/06, Timothy Fitz <TimothyFitz at gmail.com> wrote:
> On 9/26/06, glyph at divmod.com <glyph at divmod.com> wrote:
> > That ticket doesn't seem to refer to setuptools at all, just distutils.  I certainly haven't seen a discussion of removing twisted.plugin and switching to entry points.
>
>
> Bob said "Maybe this is a good time to consider setuptools support?"
> and I was trying to answer that one question. I agree that it's not
> about moving entry points, but distutils is a required precursor for
> setuptools.
>
> Gah, sorry for the confusion.
>
> To clarify *once* we make it to actually using distutils, then we'll
> talk about setuptools (it's the direction I'd like to go, but there
> have been significant issues that I think were resolved but I haven't
> checked in the past six months).

Well, if the main setup.py is a single call to distutils.core.setup()
then setuptools support comes more or less for free. easy_install has
no problem building distutils-based stuff, so long as it's not insane.

entry point support would require setuptools, but I'd be happy just to
have setup.py be sane so that Twisted could be listed as a dependency
by setuptools-using projects and installed with easy_install.

-bob



From glyph at divmod.com  Tue Sep 26 15:05:06 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 26 Sep 2006 15:05:06 -0400
Subject: [Twisted-Python] Non-Insane Distutils Integration (was: silly
	licensing stuff)
In-Reply-To: <6a36e7290609261159j7eb4c05fle3938a30ef2f1792@mail.gmail.com>
Message-ID: <20060926190506.1717.1777665480.divmod.quotient.60888@ohm>

On Tue, 26 Sep 2006 11:59:57 -0700, Bob Ippolito <bob at redivi.com> wrote:

>Well, if the main setup.py is a single call to distutils.core.setup()
>then setuptools support comes more or less for free. easy_install has
>no problem building distutils-based stuff, so long as it's not insane.

OK, cool.  I think we can all get behind a non-insane distutils.

Periodically I forget and open up twisted's setup.py as an example for writing some simpler project's build script, and have to spend the next hour washing my eyes out with acid...



From manlio_perillo at libero.it  Tue Sep 26 15:20:15 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue, 26 Sep 2006 21:20:15 +0200
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926181424.1717.368017904.divmod.quotient.60855@ohm>
References: <20060926181424.1717.368017904.divmod.quotient.60855@ohm>
Message-ID: <45197D6F.1070501@libero.it>

glyph at divmod.com ha scritto:
> [...]
> 
>> Please don't use the phrase "intellectual property".
> 
> I wish I didn't even *know* the phrase, but I was quoting Phil Thompson
> (Riverbank) directly.  He wrote:
> 
> """
> Trolltech will have the same view. As far as they are concerned their
> intellectual property is the API and it doesn't matter how it is
> accessed.
> """
> 
> This is probably, as you say, legal nonsense.  I don't think Mr.
> Thompson is a lawyer either, nor is he speaking authoritatively for
> trolltech's lawyers.  But, he is a copyright holder in this case, and
> therefore entitled to certain outlandish opinions.
> 

It seems they are in good company with MySQL AB:
http://dev.mysql.com/doc/internals/en/licensing-notice.html

"""
The MySQL Protocol is part of the MySQL Database Management System. As
such, it falls under the provisions of the GNU Public License (GPL). A
copy of the GNU Public License is available on MySQL's web site, and in
the product download.

Because this is a GPL protocol, any product which uses it to connect to
a MySQL server, or to emulate a MySQL server, or to interpose between
any client and server which uses the protocol, or for any similar
purpose, is also bound by the GPL. Therefore if you use this description
to write a program, you must release your program as GPL.
"""

;-)



Regards  Manlio Perillo



From mak at trisoft.com.pl  Tue Sep 26 15:41:45 2006
From: mak at trisoft.com.pl (Grzegorz Makarewicz)
Date: Tue, 26 Sep 2006 21:41:45 +0200
Subject: [Twisted-Python] Non-Insane Distutils Integration
In-Reply-To: <20060926190506.1717.1777665480.divmod.quotient.60888@ohm>
References: <20060926190506.1717.1777665480.divmod.quotient.60888@ohm>
Message-ID: <45198279.1000909@trisoft.com.pl>

glyph at divmod.com wrote:
> On Tue, 26 Sep 2006 11:59:57 -0700, Bob Ippolito <bob at redivi.com> wrote:
>
>> Well, if the main setup.py is a single call to distutils.core.setup()
>> then setuptools support comes more or less for free. easy_install has
>> no problem building distutils-based stuff, so long as it's not insane.
>
> OK, cool.  I think we can all get behind a non-insane distutils.
>
Glyph - using twisted is hard, with (py 2.5 I assume) it's much harder, 
even witch distutils :) - like python from MvL.

who is using medusa :?

mak



From twisted-python at 2xlp.com  Tue Sep 26 19:42:57 2006
From: twisted-python at 2xlp.com (Jonathan)
Date: Tue, 26 Sep 2006 19:42:57 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926094946.GN23117@mithrandi.za.net>
References: <E1GRXKs-0007p3-02@pyramid.twistedmatrix.com>
	<4517EF5A.7090304@eepatents.com> <4517FD1F.6000304@eastlink.ca>
	<20060926094946.GN23117@mithrandi.za.net>
Message-ID: <353BED45-A499-4614-B0B1-9F29CDC21457@2xlp.com>

if this helps at all:

http://www.gnu.org/licenses/gpl-faq.html#IfLibraryIsGPL
http://www.gnu.org/licenses/gpl-faq.html#IfInterpreterIsGPL

Both copied below.

------


If a library is released under the GPL (not the LGPL), does that mean  
that any program which uses it has to be under the GPL?

Yes, because the program as it is actually run includes the library.





If a programming language interpreter is released under the GPL, does  
that mean programs written to be interpreted by it must be under GPL- 
compatible licenses?

When the interpreter just interprets a language, the answer is no.  
The interpreted program, to the interpreter, is just data; a free  
software license like the GPL, based on copyright law, cannot limit  
what data you use the interpreter on. You can run it on any data  
(interpreted program), any way you like, and there are no  
requirements about licensing that data to anyone.
However, when the interpreter is extended to provide "bindings" to  
other facilities (often, but not necessarily, libraries), the  
interpreted program is effectively linked to the facilities it uses  
through these bindings. So if these facilities are released under the  
GPL, the interpreted program that uses them must be released in a GPL- 
compatible way. The JNI or Java Native Interface is an example of  
such a binding mechanism; libraries that are accessed in this way are  
linked dynamically with the Java programs that call them. These  
libraries are also linked with the interpreter. If the interpreter is  
linked statically with these libraries, or if it is designed to link  
dynamically with these specific libraries, then it too needs to be  
released in a GPL-compatible way.
Another similar and very common case is to provide libraries with the  
interpreter which are themselves interpreted. For instance, Perl  
comes with many Perl modules, and a Java implementation comes with  
many Java classes. These libraries and the programs that call them  
are always dynamically linked together.
A consequence is that if you choose to use GPL'd Perl modules or Java  
classes in your program, you must release the program in a GPL- 
compatible way, regardless of the license used in the Perl or Java  
interpreter that the combined Perl or Java program will run on.



From jacob at cozi.com  Tue Sep 26 20:32:25 2006
From: jacob at cozi.com (Jacob Gabrielson)
Date: Tue, 26 Sep 2006 17:32:25 -0700
Subject: [Twisted-Python] SIGBREAK on windows
Message-ID: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>

Hi,
 
Has anyone run into a problem where their Twisted application gets a
SIGBREAK and shuts down, on Windows?  I have a simple application using
the ReconnectingClientFactory, running as a service (via srvany.exe),
that occasionally dies with a few messages:

2006/09/24 16:46 Pacific Daylight Time [-] Received SIGBREAK, shutting
down.
2006/09/24 16:46 Pacific Daylight Time [AgentProtocol,client]
<twisted.internet.tcp.Connector instance at 0x00A1B468> will retry in 2
seconds
2006/09/24 16:46 Pacific Daylight Time [AgentProtocol,client] Stopping
factory <twisted.internet.protocol.ReconnectingClientFactory instance at
0x00A10D28>
2006/09/24 16:46 Pacific Daylight Time [-] Main loop terminated.  

There's not a lot to go on, but I'm wondering if this is something
anyone else has run into on Windows.  I'm not really sure how a SIGBREAK
could get generated there in the first place.
 
Thanks,
 
-- Jacob



From jacob at internet24.de  Wed Sep 27 04:32:24 2006
From: jacob at internet24.de (Thomas Jacob)
Date: Wed, 27 Sep 2006 10:32:24 +0200
Subject: [Twisted-Python] SIGBREAK on windows
In-Reply-To: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>
References: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>
Message-ID: <1159345944.15741.9.camel@localhost.localdomain>

Twisted's default reactor on Windows shuts down when receiving  a
SIGBREAK (a Windows specific signal) (see
twisted.internet.{base,posixbase}.py), probably
so that you can hit CTRL-BREAK on a twisted app in a Windows console to
shut the app down.

Cf. also
http://windowssdk.msdn.microsoft.com/en-us/library/ms682541.aspx

So AFAIK you  or someone else probably just hit  ^C/^BREAK, but maybe
there are other ways to raise SIGBREAK...

On Tue, 2006-09-26 at 17:32 -0700, Jacob Gabrielson wrote:
> Hi,
>  
> Has anyone run into a problem where their Twisted application gets a
> SIGBREAK and shuts down, on Windows?  I have a simple application using
> the ReconnectingClientFactory, running as a service (via srvany.exe),
> that occasionally dies with a few messages:
> 
> 2006/09/24 16:46 Pacific Daylight Time [-] Received SIGBREAK, shutting
> down.
> 2006/09/24 16:46 Pacific Daylight Time [AgentProtocol,client]
> <twisted.internet.tcp.Connector instance at 0x00A1B468> will retry in 2
> seconds
> 2006/09/24 16:46 Pacific Daylight Time [AgentProtocol,client] Stopping
> factory <twisted.internet.protocol.ReconnectingClientFactory instance at
> 0x00A10D28>
> 2006/09/24 16:46 Pacific Daylight Time [-] Main loop terminated.  
> 
> There's not a lot to go on, but I'm wondering if this is something
> anyone else has run into on Windows.  I'm not really sure how a SIGBREAK
> could get generated there in the first place.
>  
> Thanks,
>  
> -- Jacob
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 191 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060927/064462ff/attachment.pgp 

From ralf at brainbot.com  Wed Sep 27 04:32:39 2006
From: ralf at brainbot.com (Ralf Schmitt)
Date: Wed, 27 Sep 2006 10:32:39 +0200
Subject: [Twisted-Python] Re: SIGBREAK on windows
In-Reply-To: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>
References: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>
Message-ID: <efdcv8$496$1@sea.gmane.org>

Jacob Gabrielson wrote:
> Hi,
>  
> Has anyone run into a problem where their Twisted application gets a
> SIGBREAK and shuts down, on Windows?  I have a simple application using
> the ReconnectingClientFactory, running as a service (via srvany.exe),
> that occasionally dies with a few messages:
> 
> 2006/09/24 16:46 Pacific Daylight Time [-] Received SIGBREAK, shutting
> down.
> 2006/09/24 16:46 Pacific Daylight Time [AgentProtocol,client]
> <twisted.internet.tcp.Connector instance at 0x00A1B468> will retry in 2
> seconds
> 2006/09/24 16:46 Pacific Daylight Time [AgentProtocol,client] Stopping
> factory <twisted.internet.protocol.ReconnectingClientFactory instance at
> 0x00A10D28>
> 2006/09/24 16:46 Pacific Daylight Time [-] Main loop terminated.  
> 
> There's not a lot to go on, but I'm wondering if this is something
> anyone else has run into on Windows.  I'm not really sure how a SIGBREAK
> could get generated there in the first place.
>  

You may receive that signal when users log off. I'm using the following
code to ignore signals when running as service (but I'm also using the
win32serviceutil module to start as a service).

import win32api

def sighandler(sig):
    print "received signal %s" % (sig,)
    return True

win32api.SetConsoleCtrlHandler(sighandler, True)

However, I guess that if you're using that code unchanged you might not
be able to stop your service anymore.

More Information can be found at msdn:
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/setconsolectrlhandler.asp

You might also want to look into using the win32service module. IMHO,
it's a lot easier to handle than srvany. I'm attaching our nbsvc program
as example, which we use to start our programs as NT services.

Regards,
- Ralf


-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: nbsvc
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060927/f4b00e5e/attachment.txt 

From jacob at internet24.de  Wed Sep 27 04:59:46 2006
From: jacob at internet24.de (Thomas Jacob)
Date: Wed, 27 Sep 2006 10:59:46 +0200
Subject: [Twisted-Python] Re: SIGBREAK on windows
In-Reply-To: <efdcv8$496$1@sea.gmane.org>
References: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>
	<efdcv8$496$1@sea.gmane.org>
Message-ID: <1159347586.15741.16.camel@localhost.localdomain>

> You may receive that signal when users log off. I'm using the following
> code to ignore signals when running as service (but I'm also using the
> win32serviceutil module to start as a service).

I've never got a sigbreak signal sent to my twisted/pywin32 services
when users log off so far, under what circumstances or on which
Windows platforms does this actually happen?


-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 191 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060927/182ba76f/attachment.pgp 

From ralf at brainbot.com  Wed Sep 27 05:54:24 2006
From: ralf at brainbot.com (Ralf Schmitt)
Date: Wed, 27 Sep 2006 11:54:24 +0200
Subject: [Twisted-Python] Re: SIGBREAK on windows
In-Reply-To: <1159347586.15741.16.camel@localhost.localdomain>
References: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>	<efdcv8$496$1@sea.gmane.org>
	<1159347586.15741.16.camel@localhost.localdomain>
Message-ID: <451A4A50.4000606@brainbot.com>

Thomas Jacob wrote:
>> You may receive that signal when users log off. I'm using the following
>> code to ignore signals when running as service (but I'm also using the
>> win32serviceutil module to start as a service).
> 
> I've never got a sigbreak signal sent to my twisted/pywin32 services
> when users log off so far, under what circumstances or on which
> Windows platforms does this actually happen?
> 

I've tested Windows XP and it only sends me signal 5/6 (logoff and
shutdown I suppose). So it must have been Windows 2000 I guess.
http://www.eby-sarna.com/pipermail/peak/2004-August/001686.html also
mentions this problem.

Regards,
- Ralf




From moof at metamoof.net  Wed Sep 27 07:29:36 2006
From: moof at metamoof.net (Moof)
Date: Wed, 27 Sep 2006 11:29:36 +0000
Subject: [Twisted-Python] Non-Insane Distutils Integration (was: silly
	licensing stuff)
In-Reply-To: <20060926190506.1717.1777665480.divmod.quotient.60888@ohm>
References: <6a36e7290609261159j7eb4c05fle3938a30ef2f1792@mail.gmail.com>
	<20060926190506.1717.1777665480.divmod.quotient.60888@ohm>
Message-ID: <bff8eeef0609270429k4f322321ma74903fc3766f083@mail.gmail.com>

On 9/26/06, glyph at divmod.com <glyph at divmod.com> wrote:
> On Tue, 26 Sep 2006 11:59:57 -0700, Bob Ippolito <bob at redivi.com> wrote:
>
> >Well, if the main setup.py is a single call to distutils.core.setup()
> >then setuptools support comes more or less for free. easy_install has
> >no problem building distutils-based stuff, so long as it's not insane.
>
> OK, cool.  I think we can all get behind a non-insane distutils.
>
> Periodically I forget and open up twisted's setup.py as an example for writing some simpler project's build script, and have to spend the next hour washing my eyes out with acid...

I know a Sprint in New york's been announced. I wonder if anyone else
might be wanting to join in virtually? Preferably at a time us GMT
folk can still work at?

Moof - in Morocco. Works Saturdays.



From TimothyFitz at gmail.com  Wed Sep 27 09:35:29 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Wed, 27 Sep 2006 09:35:29 -0400
Subject: [Twisted-Python] Re: SIGBREAK on windows
In-Reply-To: <1159347586.15741.16.camel@localhost.localdomain>
References: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>
	<efdcv8$496$1@sea.gmane.org>
	<1159347586.15741.16.camel@localhost.localdomain>
Message-ID: <972ec5bd0609270635i7556532by2287390543ecd24b@mail.gmail.com>

SIGBREAK will be sent if you have a program open in a console and
close the window by clicking the x. This can happen to services if
you're running them via a debug mechanism that connects them to the
console.

On 9/27/06, Thomas Jacob <jacob at internet24.de> wrote:
> > You may receive that signal when users log off. I'm using the following
> > code to ignore signals when running as service (but I'm also using the
> > win32serviceutil module to start as a service).
>
> I've never got a sigbreak signal sent to my twisted/pywin32 services
> when users log off so far, under what circumstances or on which
> Windows platforms does this actually happen?
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>



From thomas at apestaart.org  Wed Sep 27 14:38:47 2006
From: thomas at apestaart.org (thomas at apestaart.org)
Date: Wed, 27 Sep 2006 20:38:47 +0200 (CEST)
Subject: [Twisted-Python] RELEASE: Flumotion 0.2.2 'IT'
Message-ID: <20060927183848.06C0EEF9D5@otto.amantes>

This mail announces the release of Flumotion 0.2.2 'IT'.


Flumotion is a GPL streaming media server written in Python. It is distributed
and component-based: every step in the streaming process (production,
conversion, consumption) can be run inside a separate process on separate
machines.

Flumotion uses Twisted and GStreamer. Twisted enables the high-level
functionality, distributing components over the network. GStreamer, through the
Python bindings, enables the high-speed low-level functionality: actual media
processing.

Flumotion uses a central manager process to control the complete network; one
or more worker processes distributed over machines to run actual streaming
components; and one or more admin clients connecting to the manager to control
it.
 
-------------- next part --------------

Release notes for Flumotion??0.2.2 "IT"
        

The Flumotion team is happy to announce a new release of the
Flumotion Streaming Server.

Flumotion is a streaming server for GNU/Linux
systems featuring an easy to use configuration and administration GUI. 
Implemented using GStreamer as the processing backend and using python and
Twisted for the high-level operations and GUI, it combines a wide feature set
with ease of use.

  
Features of this release
    
      * Fully works with GStreamer 0.8 and 0.10
      * Fully works with Twisted 1.3.0 through 2.4.0
      * bug fixes

Bugs fixed in this release
    
      * 235 :  When selecting the TV card, the device name is not shown
      * 12 :   gstreactor bug
      * 14 :   crash after four days
      * 17 :   Clean up temporary files
      * 263 :  Old component UI remains when new pipeline loaded
      * 267 :  Admin UI doesn't provide a way to find out where http-streamer is listening
      * 317 :  cortado should do typefinding on its input instead of relying on mime type from server
      * 372 :  service scripts can run into permission failures writing to the log file
      * 374 :  running flumotion from service scripts makes it impossible to generate core dumps
      * 388 :  manager could detect registry needing an update before sending bundles
      * 413 :  stopping a component doesn't cause downstream components to go hungry

Download

You can find source releases of flumotion in the download directory:
http://flumotion.net/src/flumotion/

Flumotion Homepage

More details can be found on the project's website:
http://flumotion.net/

Support and Bugs

We use an issue tracker for bug reports and feature requests:
https://core.fluendo.com/flumotion/trac/newticket

Developers

You can browse the repository of SVN code from our tracker.

All code is in SVN and can be checked out from there.
It is hosted on https://core.fluendo.com/svn/

        
Contributors to this release
    
      * Andy Wingo
      * Michael Smith
      * Thomas Vander Stichele
      * Zaheer Merali
??
        
??

From ellisonbg.net at gmail.com  Thu Sep 28 02:11:41 2006
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Thu, 28 Sep 2006 00:11:41 -0600
Subject: [Twisted-Python] Sending a long string/buffer without copying it
Message-ID: <6ce0ac130609272311o2613a6fbhc57b50665a57dc25@mail.gmail.com>

HI,

In one of my Twisted based applications, I need to send large string
and buffers.  They can be 100's of MB's long (they come from large
numpy arrays).  I would like to be able to send them *without making
any copies* in the process.

This seems to be dificult with the way that certain parts of Twisted
are written:

in protocols.basic many of the sendString/sendLine method having
things that make a copy of the string or line to be send:

    def sendLine(self, line):
        """Sends a line to the other end of the connection.
        """
        return self.transport.write(line + self.delimiter)

If line is 100MB, this just made a second 100MB string.  To make
things worse, in my case a server needs to send this line to many
clients that are connected.  The line gets copied for each client!  If
I have 10 clients, I have nearly a GB worth of extra memory allocated
for this temporary copy.

This problem is easy solve at the protocol level: you just do separate
writes for the delimiter and the line.  Or if you are using a length
prefixed protocol, write the length bytes and the string separately.

BUT....

Even if I do that, it appears that Twisted is making copies elsewhere
- like in FileDescriptor.doWrite.  So, how can I send something
without making a copy?  I don't mind making copies of slices, just not
the whole thing.

Thanks

Brian



From p.mayers at imperial.ac.uk  Thu Sep 28 04:55:02 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 28 Sep 2006 09:55:02 +0100
Subject: [Twisted-Python] Sending a long string/buffer without copying it
In-Reply-To: <6ce0ac130609272311o2613a6fbhc57b50665a57dc25@mail.gmail.com>
References: <6ce0ac130609272311o2613a6fbhc57b50665a57dc25@mail.gmail.com>
Message-ID: <451B8DE6.5010907@imperial.ac.uk>

Brian Granger wrote:
> 
> Even if I do that, it appears that Twisted is making copies elsewhere
> - like in FileDescriptor.doWrite.  So, how can I send something
> without making a copy?  I don't mind making copies of slices, just not
> the whole thing.

You'd need to patch the reactor.

Isn't there some talk about a python buffer thingie for this kind of need?



From exarkun at divmod.com  Thu Sep 28 08:22:01 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 28 Sep 2006 08:22:01 -0400
Subject: [Twisted-Python] Sending a long string/buffer without copying it
In-Reply-To: <6ce0ac130609272311o2613a6fbhc57b50665a57dc25@mail.gmail.com>
Message-ID: <20060928122201.1717.2044684215.divmod.quotient.62166@ohm>

On Thu, 28 Sep 2006 00:11:41 -0600, Brian Granger <ellisonbg.net at gmail.com> wrote:
>HI,
>
>In one of my Twisted based applications, I need to send large string
>and buffers.  They can be 100's of MB's long (they come from large
>numpy arrays).  I would like to be able to send them *without making
>any copies* in the process.
>
>This seems to be dificult with the way that certain parts of Twisted
>are written:
>
>in protocols.basic many of the sendString/sendLine method having
>things that make a copy of the string or line to be send:
>
>    def sendLine(self, line):
>        """Sends a line to the other end of the connection.
>        """
>        return self.transport.write(line + self.delimiter)
>
>If line is 100MB, this just made a second 100MB string.  To make
>things worse, in my case a server needs to send this line to many
>clients that are connected.  The line gets copied for each client!  If
>I have 10 clients, I have nearly a GB worth of extra memory allocated
>for this temporary copy.
>
>This problem is easy solve at the protocol level: you just do separate
>writes for the delimiter and the line.  Or if you are using a length
>prefixed protocol, write the length bytes and the string separately.
>
>BUT....
>
>Even if I do that, it appears that Twisted is making copies elsewhere
>- like in FileDescriptor.doWrite.  So, how can I send something
>without making a copy?  I don't mind making copies of slices, just not
>the whole thing.

Don't pass the entire thing to a single call to transport.write() (or
LineReceiver.sendLine).  Instead, write a producer.

Jean-Paul



From mailinglists at smartology.nl  Thu Sep 28 08:22:57 2006
From: mailinglists at smartology.nl (Remi Cool)
Date: Thu, 28 Sep 2006 14:22:57 +0200
Subject: [Twisted-Python] twistd save state does not work
Message-ID: <451BBEA1.8040305@smartology.nl>

Hello,

I've readied my app for use with twistd, the daemonizing works, but a 
tap file is not saved upon exit (kill 'cat twisted.pid'). How can I 
enable the save state option? BTW I'm not using the -o option with twistd ;)

Second ... is it possible to disable the twisted logging if you use 
twistd to start the app? Or is it possible to set a log level so that 
only warnings and errors are shown and my log is not flooded with 
(TCPServer) connection messages.

- Remi -




From jacob at cozi.com  Thu Sep 28 17:19:05 2006
From: jacob at cozi.com (Jacob Gabrielson)
Date: Thu, 28 Sep 2006 14:19:05 -0700
Subject: [Twisted-Python] Re: SIGBREAK on windows
In-Reply-To: <972ec5bd0609270635i7556532by2287390543ecd24b@mail.gmail.com>
Message-ID: <5AD9DC1AD1BC4241A8AB56D46DE5DFA8099DFA39@ehost011-6.exch011.intermedia.net>

I think that is it.  I'll try an use Ralf's solution and make my stuff a
real Service.  It looks like Java folks have run into similar issues in
the past:

http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4323062

This rather long page eventually explains the problem in fairly gory
detail.

Thanks,

-- Jacob

 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Timothy
Fitz
Sent: Wednesday, September 27, 2006 6:35 AM
To: Twisted general discussion; jacob at internet24.de
Subject: Re: [Twisted-Python] Re: SIGBREAK on windows

SIGBREAK will be sent if you have a program open in a console and close
the window by clicking the x. This can happen to services if you're
running them via a debug mechanism that connects them to the console.

On 9/27/06, Thomas Jacob <jacob at internet24.de> wrote:
> > You may receive that signal when users log off. I'm using the 
> > following code to ignore signals when running as service (but I'm 
> > also using the win32serviceutil module to start as a service).
>
> I've never got a sigbreak signal sent to my twisted/pywin32 services 
> when users log off so far, under what circumstances or on which 
> Windows platforms does this actually happen?
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From ellisonbg.net at gmail.com  Thu Sep 28 18:48:08 2006
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Thu, 28 Sep 2006 16:48:08 -0600
Subject: [Twisted-Python] Sending a long string/buffer without copying it
In-Reply-To: <20060928122201.1717.2044684215.divmod.quotient.62166@ohm>
References: <6ce0ac130609272311o2613a6fbhc57b50665a57dc25@mail.gmail.com>
	<20060928122201.1717.2044684215.divmod.quotient.62166@ohm>
Message-ID: <6ce0ac130609281548r30c89fb7t3fcd10bb44604357@mail.gmail.com>

But a producer will just make sure the whole thing isn't copied at the
same time right?  It still does many smaller copies - while the memory
is saved there is still the performance hit.

I just wanted to make sure that I wan't missing something obvious.  I
think the right way of doing this is to use a true rw buffer, such as
those created by numpy.

On 9/28/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Thu, 28 Sep 2006 00:11:41 -0600, Brian Granger <ellisonbg.net at gmail.com> wrote:
> >HI,
> >
> >In one of my Twisted based applications, I need to send large string
> >and buffers.  They can be 100's of MB's long (they come from large
> >numpy arrays).  I would like to be able to send them *without making
> >any copies* in the process.
> >
> >This seems to be dificult with the way that certain parts of Twisted
> >are written:
> >
> >in protocols.basic many of the sendString/sendLine method having
> >things that make a copy of the string or line to be send:
> >
> >    def sendLine(self, line):
> >        """Sends a line to the other end of the connection.
> >        """
> >        return self.transport.write(line + self.delimiter)
> >
> >If line is 100MB, this just made a second 100MB string.  To make
> >things worse, in my case a server needs to send this line to many
> >clients that are connected.  The line gets copied for each client!  If
> >I have 10 clients, I have nearly a GB worth of extra memory allocated
> >for this temporary copy.
> >
> >This problem is easy solve at the protocol level: you just do separate
> >writes for the delimiter and the line.  Or if you are using a length
> >prefixed protocol, write the length bytes and the string separately.
> >
> >BUT....
> >
> >Even if I do that, it appears that Twisted is making copies elsewhere
> >- like in FileDescriptor.doWrite.  So, how can I send something
> >without making a copy?  I don't mind making copies of slices, just not
> >the whole thing.
>
> Don't pass the entire thing to a single call to transport.write() (or
> LineReceiver.sendLine).  Instead, write a producer.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From bob at redivi.com  Thu Sep 28 19:08:25 2006
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 28 Sep 2006 16:08:25 -0700
Subject: [Twisted-Python] Sending a long string/buffer without copying it
In-Reply-To: <6ce0ac130609281548r30c89fb7t3fcd10bb44604357@mail.gmail.com>
References: <6ce0ac130609272311o2613a6fbhc57b50665a57dc25@mail.gmail.com>
	<20060928122201.1717.2044684215.divmod.quotient.62166@ohm>
	<6ce0ac130609281548r30c89fb7t3fcd10bb44604357@mail.gmail.com>
Message-ID: <6a36e7290609281608s5ca60e6na82f417567038323@mail.gmail.com>

That's going to happen anyway. The buffers for a socket are a few
kilobytes. While it's possible in C to get away with zero copy if you
try hard enough, it's not really possible from Python.

Your bottleneck is almost certainly going to be I/O, not memcpy.
You're worrying too much about what amounts to premature optimization.

-bob

On 9/28/06, Brian Granger <ellisonbg.net at gmail.com> wrote:
> But a producer will just make sure the whole thing isn't copied at the
> same time right?  It still does many smaller copies - while the memory
> is saved there is still the performance hit.
>
> I just wanted to make sure that I wan't missing something obvious.  I
> think the right way of doing this is to use a true rw buffer, such as
> those created by numpy.
>
> On 9/28/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> > On Thu, 28 Sep 2006 00:11:41 -0600, Brian Granger <ellisonbg.net at gmail.com> wrote:
> > >HI,
> > >
> > >In one of my Twisted based applications, I need to send large string
> > >and buffers.  They can be 100's of MB's long (they come from large
> > >numpy arrays).  I would like to be able to send them *without making
> > >any copies* in the process.
> > >
> > >This seems to be dificult with the way that certain parts of Twisted
> > >are written:
> > >
> > >in protocols.basic many of the sendString/sendLine method having
> > >things that make a copy of the string or line to be send:
> > >
> > >    def sendLine(self, line):
> > >        """Sends a line to the other end of the connection.
> > >        """
> > >        return self.transport.write(line + self.delimiter)
> > >
> > >If line is 100MB, this just made a second 100MB string.  To make
> > >things worse, in my case a server needs to send this line to many
> > >clients that are connected.  The line gets copied for each client!  If
> > >I have 10 clients, I have nearly a GB worth of extra memory allocated
> > >for this temporary copy.
> > >
> > >This problem is easy solve at the protocol level: you just do separate
> > >writes for the delimiter and the line.  Or if you are using a length
> > >prefixed protocol, write the length bytes and the string separately.
> > >
> > >BUT....
> > >
> > >Even if I do that, it appears that Twisted is making copies elsewhere
> > >- like in FileDescriptor.doWrite.  So, how can I send something
> > >without making a copy?  I don't mind making copies of slices, just not
> > >the whole thing.
> >
> > Don't pass the entire thing to a single call to transport.write() (or
> > LineReceiver.sendLine).  Instead, write a producer.
> >
> > Jean-Paul
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From jacob at cozi.com  Thu Sep 28 19:18:42 2006
From: jacob at cozi.com (Jacob Gabrielson)
Date: Thu, 28 Sep 2006 16:18:42 -0700
Subject: [Twisted-Python] Sending a long string/buffer without copying it
In-Reply-To: <6ce0ac130609281548r30c89fb7t3fcd10bb44604357@mail.gmail.com>
Message-ID: <5AD9DC1AD1BC4241A8AB56D46DE5DFA8099DFB50@ehost011-6.exch011.intermedia.net>

I'm probably missing something, but your outgoing bytes have to be
copied at least once, anyway, into the kernel's address space (unless
you're using some kind of trick like sendfile()).  Clearly creating a
duplicate of the entire multi-MB string would be bad.  But as long as
the Producer kept returning the same, say, 4KB buffer (I'm assuming
that's possible?), you're only talking about one extra copy per write.
That *might* still be significant, but without measuring it it would be
very hard to say.

Just my $.02,

-- Jacob 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Brian
Granger
Sent: Thursday, September 28, 2006 3:48 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] Sending a long string/buffer without
copying it

But a producer will just make sure the whole thing isn't copied at the
same time right?  It still does many smaller copies - while the memory
is saved there is still the performance hit.

I just wanted to make sure that I wan't missing something obvious.  I
think the right way of doing this is to use a true rw buffer, such as
those created by numpy.

On 9/28/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Thu, 28 Sep 2006 00:11:41 -0600, Brian Granger
<ellisonbg.net at gmail.com> wrote:
> >HI,
> >
> >In one of my Twisted based applications, I need to send large string 
> >and buffers.  They can be 100's of MB's long (they come from large 
> >numpy arrays).  I would like to be able to send them *without making 
> >any copies* in the process.
> >
> >This seems to be dificult with the way that certain parts of Twisted 
> >are written:
> >
> >in protocols.basic many of the sendString/sendLine method having 
> >things that make a copy of the string or line to be send:
> >
> >    def sendLine(self, line):
> >        """Sends a line to the other end of the connection.
> >        """
> >        return self.transport.write(line + self.delimiter)
> >
> >If line is 100MB, this just made a second 100MB string.  To make 
> >things worse, in my case a server needs to send this line to many 
> >clients that are connected.  The line gets copied for each client!  
> >If I have 10 clients, I have nearly a GB worth of extra memory 
> >allocated for this temporary copy.
> >
> >This problem is easy solve at the protocol level: you just do 
> >separate writes for the delimiter and the line.  Or if you are using 
> >a length prefixed protocol, write the length bytes and the string
separately.
> >
> >BUT....
> >
> >Even if I do that, it appears that Twisted is making copies elsewhere
> >- like in FileDescriptor.doWrite.  So, how can I send something 
> >without making a copy?  I don't mind making copies of slices, just 
> >not the whole thing.
>
> Don't pass the entire thing to a single call to transport.write() (or 
> LineReceiver.sendLine).  Instead, write a producer.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From ellisonbg.net at gmail.com  Thu Sep 28 21:45:01 2006
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Thu, 28 Sep 2006 19:45:01 -0600
Subject: [Twisted-Python] Sending a long string/buffer without copying it
In-Reply-To: <5AD9DC1AD1BC4241A8AB56D46DE5DFA8099DFB50@ehost011-6.exch011.intermedia.net>
References: <6ce0ac130609281548r30c89fb7t3fcd10bb44604357@mail.gmail.com>
	<5AD9DC1AD1BC4241A8AB56D46DE5DFA8099DFB50@ehost011-6.exch011.intermedia.net>
Message-ID: <6ce0ac130609281845n1960737cw698380dbfc3448f8@mail.gmail.com>

Yes, if the sockets have buffers of a few k, then using a producer
should be fine.  I will try this out.  Thanks!

Brian



From anthony at interlink.com.au  Fri Sep 29 00:29:10 2006
From: anthony at interlink.com.au (Anthony Baxter)
Date: Fri, 29 Sep 2006 14:29:10 +1000
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
References: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
Message-ID: <200609291429.11882.anthony@interlink.com.au>

On Sunday 24 September 2006 14:31, glyph at divmod.com wrote:
> On Sun, 24 Sep 2006 00:44:03 -0300, Felipe Almeida Lessa 
<felipe.lessa at gmail.com> wrote:
> >So the only GUI toolkits that will be officialy supported are going to
> >be Gtk, Tk and PyUI?
>
> Thanks for reminding me.
>
> Neither Tk nor PyUI have buildbots.  However, they're both implemented
> using polling timed events running on top of another reactor... I don't
> know how much "support" those really count for.  It might be good to remove
> them as well, but they're very little code.

I'd be opposed to removing Tk - it allows you to build (ok, ugly looking) 
simple UIs on top of twisted+python without needing to download anything 
other than the core Python and twisted code. As you noted, the Tk code isn't 
a real reactor of it's own, so what does "untested" mean, in this case?

Anthony
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From NormanTindall at zdisk.net  Fri Sep 29 04:12:27 2006
From: NormanTindall at zdisk.net (Norman Tindall)
Date: Fri, 29 Sep 2006 12:12:27 +0400
Subject: [Twisted-Python] Socket - connection lost
Message-ID: <1642671750.20060929121227@zdisk.net>

Hello,

      Reciently i wrote a simple client using Reconnecting Factory.
      That client logins to my socket server.. and that`s it.

      Interesting thing is that it is seems that twisted client,
      sends some ping on a TCP level without sending any data to the
      socket directly.
      Because when i pull out cord from the ethernet card simulating
      network falure, client in about 10-15 seconds determines that
      connection lost!! (pretty cool) While my server still thinks
      that client is up.

      I am using SO_KEEPALIVE on server - but documentations says
      it will only ping (and so timed outed) on a few hours.

      How do i make my server act the same way as the client?
      (to make some sort of a low level cheching of connections is
      broken without actualy sending anything to socket)
  

-- 
Best regards,
 Norman                          mailto:NormanTindall at zdisk.net




From ellisonbg.net at gmail.com  Fri Sep 29 02:27:36 2006
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Fri, 29 Sep 2006 00:27:36 -0600
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <200609291429.11882.anthony@interlink.com.au>
References: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
	<200609291429.11882.anthony@interlink.com.au>
Message-ID: <6ce0ac130609282327h2956c49bq6435ac8ca6694c39@mail.gmail.com>

I am on the IPython development team and one of the features of
IPython that is highly praised by users is its ability to use various
GUI toolkits interactively (wc, qt3, qt4, tk, gtk).  Currently, this
is not done using Twisted...but we are completely redesigning IPython
from the ground up to use Twisted to allow us to have IPython run
remotely, and lots of other interesting things.

One of the reason that we went with Twisted is that it looked like it
would be easy to integrate Twisted with the various GUI run loops - a
feature we need to continue to support.  We did some basic tests with
wx and threadedselect reactor and it worked well for what we
tried....but that was when tsr first came out and I guess it has never
matured enough to be stable.

I completely understand the desire to have code that passes tests
(especially reactors).  But I think the importance of these GUI
reactors is being greatly underestimated if they are under
consideration for removal.  Minimally, they should remain somewhere in
the repository and be well documented as to why they are there and
their history.  I don't have time to dig into this code right, but
eventually, I will need to come back to this and get our code working
with lots of different toolkits.

I guess I would vote to leave them in, but clearly and verbosely
document their status.  This will encourage folks to work on them
whereas removing them will lead people to simply create more half
baked GUI reactors.



From mailinglists at smartology.nl  Fri Sep 29 10:53:10 2006
From: mailinglists at smartology.nl (Remi Cool)
Date: Fri, 29 Sep 2006 16:53:10 +0200
Subject: [Twisted-Python] twistd save state does not work
In-Reply-To: <451BBEA1.8040305@smartology.nl>
References: <451BBEA1.8040305@smartology.nl>
Message-ID: <451D3356.5060208@smartology.nl>

Remi Cool wrote:
> Hello,
>
> I've readied my app for use with twistd, the daemonizing works, but a 
> tap file is not saved upon exit (kill 'cat twisted.pid'). How can I 
> enable the save state option? BTW I'm not using the -o option with 
> twistd ;)
>
> Second ... is it possible to disable the twisted logging if you use 
> twistd to start the app? Or is it possible to set a log level so that 
> only warnings and errors are shown and my log is not flooded with 
> (TCPServer) connection messages.
>
The save state function only seems to work when you start with a tap in 
the firstplace. It then saves the state in appname-shutdown.tap ... ok 
but why doesn't it work when you start from a python file?

My 2nd question about the logging still stands ... and is it possible to 
(re)set the name of the log file in the python file where application is 
defined? I have all paths for the app in an ini file (configParser) and 
it would not be a good solution to declare the logfile path somewhere else.

- Remi -




From exarkun at divmod.com  Fri Sep 29 12:07:07 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 29 Sep 2006 12:07:07 -0400
Subject: [Twisted-Python] twistd save state does not work
In-Reply-To: <451D3356.5060208@smartology.nl>
Message-ID: <20060929160707.1717.1403292531.divmod.quotient.63126@ohm>

On Fri, 29 Sep 2006 16:53:10 +0200, Remi Cool <mailinglists at smartology.nl> wrote:
>Remi Cool wrote:
>>Hello,
>>
>>I've readied my app for use with twistd, the daemonizing works, but a tap 
>>file is not saved upon exit (kill 'cat twisted.pid'). How can I enable the 
>>save state option? BTW I'm not using the -o option with twistd ;)
>>
>>Second ... is it possible to disable the twisted logging if you use twistd 
>>to start the app? Or is it possible to set a log level so that only 
>>warnings and errors are shown and my log is not flooded with (TCPServer) 
>>connection messages.
>The save state function only seems to work when you start with a tap in the 
>firstplace. It then saves the state in appname-shutdown.tap ... ok but why 
>doesn't it work when you start from a python file?
>

It's implicitly disabled when loading an application from a Python file,
since there is no guarantee that the application will be serializable.

There is no way to explicitly re-enable it.  I would suggest that this
feature be added, but since most people seem to think tap files should
be eliminated as soon as possible, pursuing this would probably involve
a lot of debate that I'm not personally interested in participating in.

I would suggest using an alternate mechanism for persistence.

>My 2nd question about the logging still stands ...

It's not, although it certainly should be.  I believe there is at least
one ticket open in the tracker for improving the logging features of
twistd.

> and is it possible to 
>(re)set the name of the log file in the python file where application is 
>defined? I have all paths for the app in an ini file (configParser) and it 
>would not be a good solution to declare the logfile path somewhere else.

The next release of Twisted will include a much more extensible way to
interact with twistd which should satisfy this use-case.  If you want
to play with it in svn trunk at HEAD, you can take a look at the output of
`twistd --help'.  The command list which shows up at the end of that
output can be extending using the plugin system, so you can add your
command, which sets up logging or loads configuration from an ini, or
whatever else you like.

Jean-Paul



From foom at fuhm.net  Fri Sep 29 16:16:20 2006
From: foom at fuhm.net (James Y Knight)
Date: Fri, 29 Sep 2006 16:16:20 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18320 - Name functions in
	deprecation warnings
In-Reply-To: <E1GT88w-0002KO-00@wolfwood>
References: <E1GT88w-0002KO-00@wolfwood>
Message-ID: <05C9CDDA-AB5D-4173-AD5B-C658B3E63169@fuhm.net>


On Sep 28, 2006, at 10:30 PM, Jonathan Lange wrote:
>  def flushErrors(*errorTypes):
> -    """Support function for testing frameworks.
> +    """
> +    DEPRECATED in Twisted 2.5.
> +
> +    Support function for testing frameworks.
>
>      Return a list of errors that occurred since the last call to  
> flushErrors().
>      (This will return None unless startKeepingErrors has been  
> called.)
>      """
>
> +    warnings.warn("Deprecated in Twisted 2.5",  
> category=DeprecationWarning,
> +                  stacklevel=2)

As a general note, when deprecating something that is replaced by  
something else, the original thing should mention what the new thing  
is you should use instead. In this case, that'd be  
"self.observer.flushErrors(...)", if you're using it in a test case,  
I think?

James



From manlio_perillo at libero.it  Fri Sep 29 19:01:06 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 30 Sep 2006 01:01:06 +0200
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
Message-ID: <451DA5B2.2040504@libero.it>

From the msdn:
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/ipc/base/setnamedpipehandlestate.asp

"""PIPE_NOWAIT 0x00000001 	

Nonblocking mode is enabled. In this mode, ReadFile, WriteFile, and
ConnectNamedPipe always return immediately. Note that nonblocking mode
is supported for compatibility with Microsoft? LAN Manager version 2.0
and should not be used to achieve asynchronous input and output (I/O)
with named pipes.
"""


P.S.
I really can't believe that win32 support for asynchronous I/O works
with named pipes but not with anonymous pipes...

By the way, instead of using a polling, why not to use a separate thread
that puts data into a DeferredQueue?


P.S.2:
From:
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/ipc/base/anonymous_pipe_operations.asp

"""Anonymous pipes are implemented using a named pipe with a unique
name. Therefore, you can often pass a handle to an anonymous pipe to a
function that requires a handle to a named pipe.
"""

And from:
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/inheritance.asp

"""A child process can inherit [...]

* Open handles returned by the CreateFile function. This includes
handles to files, console input buffers, console screen buffers, named
pipes, serial communication devices, and mailslots.

* Open handles to process, thread, mutex, event, semaphore, named-pipe,
anonymous-pipe, and file-mapping objects. These are returned by the
CreateProcess, CreateThread, CreateMutex, CreateEvent, CreateSemaphore,
CreateNamedPipe, CreatePipe, and CreateFileMapping functions, respectively.
"""

So, why not to create a named pipe with an unique name, know to both the
 parent and the child process, as an example using an enviroment variable?

I think that using named pipes can simplify the _dumbwin32proc.
Moreover polling a named pipe is not an efficient operation
(reading the author of "Windows System Programming").

Lastly, the parent process, after creating a named pipe instance, can
wait for a client connection using ConnectNamedPipe.




Regards  Manlio Perillo




From glyph at divmod.com  Fri Sep 29 22:38:27 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 29 Sep 2006 22:38:27 -0400
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <451DA5B2.2040504@libero.it>
Message-ID: <20060930023827.1717.1439111136.divmod.quotient.63491@ohm>

On Sat, 30 Sep 2006 01:01:06 +0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>From the msdn:

Yep, it's unfortunate that we were forced to use such an ugly API.  However, the *correct* way to do this is to use IOCP, and good IOCP support has been *years* in the making.  We still haven't got a reliably working IOCP buildbot.

You're welcome to contribute a patch which cleans this up on the select reactor, but frankly I don't se any approach which would be better.

>I really can't believe that win32 support for asynchronous I/O works
>with named pipes but not with anonymous pipes...

Yeah, Windows is pretty terrible.  It's only a problem in some versions, but I forget where and when it was fixed.

>By the way, instead of using a polling, why not to use a separate thread
>that puts data into a DeferredQueue?

Because interrupting a blocked thread is a dangerous and error-prone task.  It was hard enough getting the thing to just work with non-blocking pipe IO.

>"""Anonymous pipes are implemented using a named pipe with a unique
>name. Therefore, you can often pass a handle to an anonymous pipe to a
>function that requires a handle to a named pipe.
>"""

The word "often" is the killer there.

>"""A child process can inherit [...]
>"""

>So, why not to create a named pipe with an unique name, know to both the
> parent and the child process, as an example using an enviroment variable?

Because that would not be usable as standard output using the usual APIs.  This is not just for running other Twisted-using programs in a subprocess, but any program which attempts to adhere to UNIX conventions around standard IO.

>I think that using named pipes can simplify the _dumbwin32proc.
>Moreover polling a named pipe is not an efficient operation
>(reading the author of "Windows System Programming").

The goal of _dumbwin32proc is obviously not efficiency, it is correctness in a configuration which is not well-supported on Windows.  Why do you think its name begins with "dumb"?

>Lastly, the parent process, after creating a named pipe instance, can
>wait for a client connection using ConnectNamedPipe.

... as long as it can wait for the completion event.  Which it can't, because it's using select().



From jml at mumak.net  Sat Sep 30 01:33:49 2006
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 30 Sep 2006 15:33:49 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r18320 - Name functions in
	deprecation warnings
In-Reply-To: <05C9CDDA-AB5D-4173-AD5B-C658B3E63169@fuhm.net>
References: <E1GT88w-0002KO-00@wolfwood>
	<05C9CDDA-AB5D-4173-AD5B-C658B3E63169@fuhm.net>
Message-ID: <d06a5cd30609292233vd0c35d7o72c92115cbbecb36@mail.gmail.com>

On 9/30/06, James Y Knight <foom at fuhm.net> wrote:
>
> As a general note, when deprecating something that is replaced by
> something else, the original thing should mention what the new thing
> is you should use instead. In this case, that'd be
> "self.observer.flushErrors(...)", if you're using it in a test case,
> I think?
>

I normally do this. I didn't in this case because
TestCase.flushLoggedErrors isn't a full replacement. Still, from what
I understand, these APIs were added for tests so it's probably worth
documenting.

cheers,
jml



From manlio_perillo at libero.it  Sat Sep 30 04:04:47 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 30 Sep 2006 10:04:47 +0200
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <20060930023827.1717.1439111136.divmod.quotient.63491@ohm>
References: <20060930023827.1717.1439111136.divmod.quotient.63491@ohm>
Message-ID: <451E251F.9010302@libero.it>

glyph at divmod.com ha scritto:
> On Sat, 30 Sep 2006 01:01:06 +0200, Manlio Perillo
> <manlio_perillo at libero.it> wrote:
>> From the msdn:
> 
> Yep, it's unfortunate that we were forced to use such an ugly API. 
> However, the *correct* way to do this is to use IOCP, and good IOCP
> support has been *years* in the making.  We still haven't got a reliably
> working IOCP buildbot.
> 

Unfortunately I don't know I/O completion ports.

> You're welcome to contribute a patch which cleans this up on the select
> reactor, but frankly I don't se any approach which would be better.
> 
>> I really can't believe that win32 support for asynchronous I/O works
>> with named pipes but not with anonymous pipes...
> 
> Yeah, Windows is pretty terrible.  It's only a problem in some versions,
> but I forget where and when it was fixed.
> 
>> By the way, instead of using a polling, why not to use a separate thread
>> that puts data into a DeferredQueue?
> 
> Because interrupting a blocked thread is a dangerous and error-prone
> task.  It was hard enough getting the thing to just work with
> non-blocking pipe IO.
> 

Not sure to understand here.

> [...]
>> So, why not to create a named pipe with an unique name, know to both the
>> parent and the child process, as an example using an enviroment variable?
> 
> Because that would not be usable as standard output using the usual
> APIs.  This is not just for running other Twisted-using programs in a
> subprocess, but any program which attempts to adhere to UNIX conventions
> around standard IO.
> 

The solution is simple.
Windows *do not* supports POSIX ;-).

If one want to use Windows, the win32eventreactor (or, in future, the
iocp reactor) should be the default (and the only one allowed).

One needs to write a specializd abstract.FileDescriptor class, that use
the Overlapped structure for I/O.

This should allow one to easily use asyncronous I/O support of Window,
not only for sockets, but on all (not many...) 'handles' that support
the asyncronous I/O API.

One can even add support to asyncronous I/O from a console, since
WaitForMultipleObjects supports console handles, and the number of event
pending in the input queue can be retrieved using
GetNumberOfConsoleInputEvents().


By the way: serialport already works only with win32eventreactor.






Regards   Manlio Perillo



From glyph at divmod.com  Sat Sep 30 05:34:14 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 30 Sep 2006 05:34:14 -0400
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <451E251F.9010302@libero.it>
Message-ID: <20060930093414.1717.635703473.divmod.quotient.63636@ohm>

On Sat, 30 Sep 2006 10:04:47 +0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>glyph at divmod.com ha scritto:
>> On Sat, 30 Sep 2006 01:01:06 +0200, Manlio Perillo
>> <manlio_perillo at libero.it> wrote:

>Unfortunately I don't know I/O completion ports.

That's unfortunate, but I'm not surprised :).

>> Because interrupting a blocked thread is a dangerous and error-prone
>> task.  It was hard enough getting the thing to just work with
>> non-blocking pipe IO.

>Not sure to understand here.

"threads are bad"

>The solution is simple.
>Windows *do not* supports POSIX ;-).

It does, however, support standard IO, at least well enough for a large chunk of applications.  Although it's not as well supported as on "POSIX" platforms, there are plenty of programs that produce output which Twisted can happily parse semi-asynchronously using the current strategy.  Why on earth would you want to remove it?  It serves a purpose (cross-platform multi-process communication and control), it works, it's tested.

>If one want to use Windows, the win32eventreactor (or, in future, the
>iocp reactor) should be the default (and the only one allowed).

win32eventreactor can only support 64 sockets.  The IOCP reactor currently has several issues and is missing, e.g. SSL support.  While true asynchronous I/O and GUI event loop integration have their advantages, the primary feature of the select reactor on Windows is that it actually *works* in most cases.

>One needs to write a specializd abstract.FileDescriptor class, that use
>the Overlapped structure for I/O.

You mean like twisted.internet.iocpreactor.abstract.ConnectedSocket?  Have you even read this code?

> [snip more oblique allusions to various win32 APIs]

Frankly, I don't think you know what you're talking about.  If you know enough to make iocpreactor, or even win32eventreactor, work on Windows with SSL and GUI support, great, do that and contribute it, and we can discuss the patch.  If not, we're not going to break the *only* working, tested Windows reactor because you think one day it should be different.

>This should allow one to easily use asyncronous I/O support of Window,
>not only for sockets, but on all (not many...) 'handles' that support
>the asyncronous I/O API.

If it's easy, feel free to do it :).

>By the way: serialport already works only with win32eventreactor.

That is correct, but hardly relevant.



From glyph at divmod.com  Sat Sep 30 05:54:17 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 30 Sep 2006 05:54:17 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926181424.1717.368017904.divmod.quotient.60855@ohm>
Message-ID: <20060930095417.1717.528727954.divmod.quotient.63644@ohm>

On Tue, 26 Sep 2006 14:14:24 -0400, glyph at divmod.com wrote:
>On Tue, 26 Sep 2006 13:01:50 -0400, James Y Knight <foom at fuhm.net> wrote:

>>If it is truly their position that the  textual source code of qtreactor is 
>>a derivative work of PyQT, I  think they are quite confused.

>If it is your opinion that the "textual source code" is not a derivative 
>work because it merely refers to, but does not incorporate, the text of 
>qtreactor or qt, then the GPL is completely meaningless in the context of 
>Python and there was no point in licensing it that way in the first place. 
>Python bytecode does not make any additional references to the code it is 
>importing beyond what Python source code does.

I've got what I believe is the final word on this.  Phil Thompson (again, Riverbank) says:

"""
The reactor must be licensed under the GPL, but the rest of Twisted
doesn't. A Twisted application that doesn't use the reactor can be
licensed under the Twisted license. A Twisted application that uses the
reactor must be licensed under the GPL.
"""

The best course of action, then, would be to distribute qtreactor separately, since we can no longer say that Twisted is all MIT licensed if we do not.  The practical ramifications of this are not earth-shattering, so I think that we do not need to, e.g. release a 2.4.1 which does not include qtreactor, but 2.5+ should definitely not include it.

I also asked specifically about not interfering with the PyQt/Qt commercial license, and Mr. Thompson suggested wording like this:

"""
This code is licensed under either the Twisted license or the GPL
depending on the license of the copy of PyQt being used.

If the GPL version of PyQt is being used then this code is also licensed
under the GPL. Given the viral nature of the GPL this means that any
application must also be licensed under the GPL.

If any other version of PyQt is being used (eg. commercial, evaluation,
educational) then this code is licensed under the Twisted license.
"""

I suggest that we leave that wording mostly unchanged.



From glyph at divmod.com  Sat Sep 30 06:00:47 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 30 Sep 2006 06:00:47 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, corefoundation, threadedselect, wx
In-Reply-To: <6ce0ac130609282327h2956c49bq6435ac8ca6694c39@mail.gmail.com>
Message-ID: <20060930100047.1717.904312517.divmod.quotient.63648@ohm>

On Fri, 29 Sep 2006 00:27:36 -0600, Brian Granger <ellisonbg.net at gmail.com> wrote:
>I am on the IPython development team and one of the features of
>IPython that is highly praised by users is its ability to use various
>GUI toolkits interactively (wc, qt3, qt4, tk, gtk).  Currently, this
>is not done using Twisted...but we are completely redesigning IPython
>from the ground up to use Twisted to allow us to have IPython run
>remotely, and lots of other interesting things.

Thanks for thinking of Twisted when you did this :).

>I completely understand the desire to have code that passes tests
>(especially reactors).  But I think the importance of these GUI
>reactors is being greatly underestimated if they are under
>consideration for removal.  Minimally, they should remain somewhere in
>the repository and be well documented as to why they are there and
>their history.  I don't have time to dig into this code right, but
>eventually, I will need to come back to this and get our code working
>with lots of different toolkits.

A major complaint that many users have about Twisted is that it is sprawling. I've repeatedly heard complaints that it's very difficult to look at the source tree and have any idea what's going on.  In many cases I think this complaint is miguided, because you don't have to understand everything to use some things, but there's no point in bloating the repository with code that is decaying with each release, which is never looked at by any developers, and which could silently break due to an unrelated internal API change with no test coverage or automated builds to bring anyone's attention to it.

>I guess I would vote to leave them in, but clearly and verbosely
>document their status.  This will encourage folks to work on them
>whereas removing them will lead people to simply create more half
>baked GUI reactors.

I am inviting anyone who would like to improve them to speak up now, and a few people have.  Right now it seems like we have at least a few volunteers who will keep these reactors alive, but of course any additional contribution would be welcome.



From manlio_perillo at libero.it  Sat Sep 30 07:06:03 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 30 Sep 2006 13:06:03 +0200
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <20060930093414.1717.635703473.divmod.quotient.63636@ohm>
References: <20060930093414.1717.635703473.divmod.quotient.63636@ohm>
Message-ID: <451E4F9B.6080708@libero.it>

glyph at divmod.com ha scritto:
> [...]
> 
> "threads are bad"
> 

But they are used in twisted.enterprise.adbapi, and as I can see several
developers prefer to use threads to interact with "foreign" APIs instead
of develope native asyncronous API.

>> The solution is simple.
>> Windows *do not* supports POSIX ;-).
> 
> It does, however, support standard IO, at least well enough for a large
> chunk of applications.  Although it's not as well supported as on
> "POSIX" platforms, there are plenty of programs that produce output
> which Twisted can happily parse semi-asynchronously using the current
> strategy.  Why on earth would you want to remove it?  It serves a
> purpose (cross-platform multi-process communication and control), it
> works, it's tested.
> 

This is true, for sockets it works well, but for pipes it uses an
inefficient implementation.

> [...]

>> One needs to write a specializd abstract.FileDescriptor class, that use
>> the Overlapped structure for I/O.
> 
> You mean like twisted.internet.iocpreactor.abstract.ConnectedSocket? 
> Have you even read this code?
> 

Yes, but as the name suggests it works only for Sockets(?).

The problem is simple:
if I want to do asyncronous I/O with Windows I don't have an unique
'interface'.

Only sockets are really integrated with the reactor.
serialport has some specialized code for win32eventreactor integration,
but if I want to use, as an example, named pipe, I have to write my own
support
(but it seems this is an issue for broken POSIX implementations, too).


>> [snip more oblique allusions to various win32 APIs]
> 
> Frankly, I don't think you know what you're talking about.  

This is very likely ;-)

> If you know
> enough to make iocpreactor, or even win32eventreactor, work on Windows
> with SSL and GUI support, great, do that and contribute it, and we can
> discuss the patch.  If not, we're not going to break the *only* working,
> tested Windows reactor because you think one day it should be different.
> 

Is win32eventreactor not working and not tested?
You did not mention it in the "removing unsupported reactors in twisted"
thread.

>> This should allow one to easily use asyncronous I/O support of Window,
>> not only for sockets, but on all (not many...) 'handles' that support
>> the asyncronous I/O API.
> 
> If it's easy, feel free to do it :).
> 

I have write it, now stdio works ;-).

Unfortunately it is not very efficient since:
- it uses _pollingfile (not a real porblem)
- it reads raw keyboard input and have to do all low level stuff like
  '\b' handling, '\r' conversion, and so


Here is the main code.
I suspect such a thing will never be accepted into Twisted ;-):


class _PollableConsoleReader(_PollableResource):
    # XXX TODO add support for Window events (resize)
    implements(IPushProducer)

    def __init__(self, con, receivedCallback, lostCallback):
        self.con = con
        self.receivedCallback = receivedCallback
        self.lostCallback = lostCallback
        self.cp = "cp%d" % win32console.GetConsoleCP()

        # We need this
        self._stdout = win32console.GetStdHandle(
	                   win32console.STD_OUTPUT_HANDLE
                        )

    def checkWork(self):
        finished = 0
        fullDataRead = []

        info = self._stdout.GetConsoleScreenBufferInfo()
        Y = info["CursorPosition"].Y

        while 1:
            try:
                n = self.con.GetNumberOfConsoleInputEvents()
                if n == 0:
                    break

                records = self.con.ReadConsoleInput(n)

                # We need to process input
                # XXX check me
                # XXX TODO rewrite in C(?), now this is very inefficient
                for record in records:
                    if record.EventType != win32console.KEY_EVENT \
                            or not record.KeyDown:
                        continue

                    char = record.Char
                    if char == '\b':
                        # We need to handle this
                        info = self._stdout.GetConsoleScreenBufferInfo()
                        rowSize = info["MaximumWindowSize"].X
                        cursorPosition = info["CursorPosition"]

                        # Move the cursor
                        if cursorPosition.X == 0:
                            if cursorPosition.Y > Y:
                                cursorPosition.Y -= 1
                                cursorPosition.X = rowSize - 1
                        else:
                            cursorPosition.X -= 1

                        self._stdout.SetConsoleCursorPosition(
                            cursorPosition
                         )
                        self._stdout.WriteConsoleOutputCharacter(' ',
                                                      cursorPosition)
                        continue
                    elif char == '\0':
                        continue
                    elif char == '\r':
                        char = '\n'

                    char = char * record.RepeatCount
                    data = char.encode(self.cp)
                    self._stdout.WriteConsole(data) # Do echo

                    fullDataRead.append(data)
            except pywintypes.error:
                raise
                # XXX this should not happen
                finished = 1
                break

        dataBuf = ''.join(fullDataRead)
        if dataBuf:
            self.receivedCallback(dataBuf)
        if finished:
            self.cleanup()

        return len(dataBuf)

   ...

The ConsoleWriter does not need to support asyncronous I/O, so it is a
simple wrapper for ConsoleWrite.

This code still have some problems[1]...
For now I have added this to _pollingfile module.

The _win32stdio module can simply check if the stdin is attached to a
terminal, so it (hopefully) can support both pipes and consoles.


Many things can be added, like an emulation of POSIX terminal, callbacks
for resize events, support for focus in/out, colored output, history
editing, ...


[1]
How can be tested such a thing?



Regards  Manlio Perillo



From general at eepatents.com  Sat Sep 30 11:35:25 2006
From: general at eepatents.com (Ed Suominen)
Date: Sat, 30 Sep 2006 08:35:25 -0700
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <E1GTccm-0008BJ-02@pyramid.twistedmatrix.com>
References: <E1GTccm-0008BJ-02@pyramid.twistedmatrix.com>
Message-ID: <451E8EBD.9040008@eepatents.com>

> On Tue, 26 Sep 2006 14:14:24 -0400, glyph at divmod.com wrote: I've got
> what I believe is the final word on this.  Phil Thompson (again,
> Riverbank) says:
> 
> """ The reactor must be licensed under the GPL, but the rest of
> Twisted doesn't. A Twisted application that doesn't use the reactor
> can be licensed under the Twisted license. A Twisted application that
> uses the reactor must be licensed under the GPL. """
> 
> The best course of action, then, would be to distribute qtreactor
> separately, since we can no longer say that Twisted is all MIT
> licensed if we do not.  The practical ramifications of this are not
> earth-shattering, so I think that we do not need to, e.g. release a
> 2.4.1 which does not include qtreactor, but 2.5+ should definitely
> not include it.
> 
> I also asked specifically about not interfering with the PyQt/Qt
> commercial license, and Mr. Thompson suggested wording like this:
> 
> """ This code is licensed under either the Twisted license or the GPL
>  depending on the license of the copy of PyQt being used.
> 
> If the GPL version of PyQt is being used then this code is also
> licensed under the GPL. Given the viral nature of the GPL this means
> that any application must also be licensed under the GPL.
> 
> If any other version of PyQt is being used (eg. commercial,
> evaluation, educational) then this code is licensed under the Twisted
> license. """
> 
> I suggest that we leave that wording mostly unchanged.

I agree and think (see disclaimer below) that this is just fine. It does
not seem to inhibit the developer's flexibility at all.

If you are developing with GPL PyQt, it looks like you can use freely
qtreactor, under the condition that distributions of your application
(including the copy of qtreactor that it incorporates) are made under
the terms of the GPL. Nothing in the licensing of qtreactor could remove
that requirement.

If you are developing with commercial PyQt, Mr. Thomson's suggested
wording indicates that your commercial application can also use
qtreactor without any adverse impact on the proprietary nature of your work.

This allows people to develop Twisted-based PyQt applications as free
software (GPL) or commercially with the purchase of a commercial PyQt
license, which is the desirable outcome for both Riverbank Computing and
Twisted fans alike.

I would think that Mr. Thompson's authorization from TrollTech to
dual-license PyQt gives him the ability  to authorize this sensible
arrangement regarding qtreactor's use of PyQt. It would be nice to have
confirmation of that from him as well, however, since anything importing
PyQt ultimately has a dependency on Qt itself.

If you need someone to host qtreactor, I'd be willing to do so from
http://foss.eepatents.com, as long as I had direct assurance from Mr.
Thompson that all these questions are settled. I could also contribute a
few Twisted-friendly enhancements like the deferred-returning modal
dialog box I posted a while back. However, such enhancements will have
been developed with the GPL version of PyQt and would not be subject to
the special provisions above unless Mr. Thompson chose to offer that as
well.

Best regards, Ed

DISCLAIMER: Nothing in this comment is to be construed as legal advice.
Although I probably think about things legal more often than the average
person, being a registered patent agent, I am not a lawyer qualified to
practice copyright law or anything else outside the representation of
patent applicants before the US patent office. Nobody related to this
topic is my client in even that capacity.



From exarkun at divmod.com  Sat Sep 30 14:32:35 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 30 Sep 2006 14:32:35 -0400
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <451E4F9B.6080708@libero.it>
Message-ID: <20060930183235.1717.126919328.divmod.quotient.63875@ohm>

On Sat, 30 Sep 2006 13:06:03 +0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
> [snip]
>
>Here is the main code.
>I suspect such a thing will never be accepted into Twisted ;-):
>
> [snip]
>

This looks like it could be an interesting beginning for better terminal
support on Windows.  It would be better if you included it in unified
diff format in the issue tracker, though, along with the unit tests you
developed with it.  I don't know if anyone out there is interested enough
to finish it, but if it correctly provides even a basic level of
functionality, it might prove a useful starting place for some other
developer.  Comprehensive test coverage and developer-oriented documentation
improve the chances of someone else picking up where you've left off.

>The ConsoleWriter does not need to support asyncronous I/O, so it is a
>simple wrapper for ConsoleWrite.

Why?  Can't writing block?  What if you write a huge amount of data?  What
if the user clicks and holds on the terminal, or selects a menu or resizes
the window?  Won't those lead to a write blocking for an arbitrary amount
of time?

>
>This code still have some problems[1]...
>For now I have added this to _pollingfile module.
>
> [snip]
>
>
>[1]
>How can be tested such a thing?
>

Presumably by launching a process in a terminal and then communicating with
it in order to assert things about its behavior.

Jean-Paul



From manlio_perillo at libero.it  Sat Sep 30 15:05:46 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 30 Sep 2006 21:05:46 +0200
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <20060930183235.1717.126919328.divmod.quotient.63875@ohm>
References: <20060930183235.1717.126919328.divmod.quotient.63875@ohm>
Message-ID: <451EC00A.2040908@libero.it>

Jean-Paul Calderone ha scritto:
> On Sat, 30 Sep 2006 13:06:03 +0200, Manlio Perillo
> <manlio_perillo at libero.it> wrote:
>> [snip]
>>
>> Here is the main code.
>> I suspect such a thing will never be accepted into Twisted ;-):
>>
>> [snip]
>>
> 
> This looks like it could be an interesting beginning for better terminal
> support on Windows.  It would be better if you included it in unified
> diff format in the issue tracker, though, along with the unit tests you
> developed with it.  I don't know if anyone out there is interested enough
> to finish it, but if it correctly provides even a basic level of
> functionality, it might prove a useful starting place for some other
> developer. 


I just remembered that IPython came with a readline implementation in
Python + ctypes.
There is a complete console module with ansi terminal emulation.

The idea is to write a conio module with an implementation for both
Windows and POSIX (like serialport).


> Comprehensive test coverage and developer-oriented
> documentation
> improve the chances of someone else picking up where you've left off.
>

I'll try to reuse the console module from IPython.
Is it a problem the use of ctype?
This is not really necessary with pywin32.

>> The ConsoleWriter does not need to support asyncronous I/O, so it is a
>> simple wrapper for ConsoleWrite.
> 
> Why?  Can't writing block?  What if you write a huge amount of data?  What
> if the user clicks and holds on the terminal, or selects a menu or resizes
> the window?  Won't those lead to a write blocking for an arbitrary amount
> of time?
> 

Ok. I'll just copy the code from _PollableWritePipe.
If I'm not wrong it simply write a chunk of data at every tick of the timer.

>>
>> This code still have some problems[1]...
>> For now I have added this to _pollingfile module.
>>
>> [snip]
>>
>>
>> [1]
>> How can be tested such a thing?
>>
> 
> Presumably by launching a process in a terminal and then communicating with
> it in order to assert things about its behavior.
> 

I'll try to do something.



Regards  Manlio Perillo



From corydodt at gmail.com  Sat Sep 30 16:09:58 2006
From: corydodt at gmail.com (Cory Dodt)
Date: Sat, 30 Sep 2006 13:09:58 -0700
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <451EC00A.2040908@libero.it>
References: <20060930183235.1717.126919328.divmod.quotient.63875@ohm>
	<451EC00A.2040908@libero.it>
Message-ID: <c16a94ff0609301309m2c93d13et9f762cef8d042a14@mail.gmail.com>

> The idea is to write a conio module with an implementation for both
> Windows and POSIX (like serialport).
>
>
> > Comprehensive test coverage and developer-oriented
> > documentation
> > improve the chances of someone else picking up where you've left off.
> >
>
> I'll try to reuse the console module from IPython.
> Is it a problem the use of ctype?
> This is not really necessary with pywin32.


Personally I'd prefer a switch to ctypes from pywin32.  It's smaller, it's
included in Python 2.5.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060930/aaa6c559/attachment.htm 

From glyph at divmod.com  Sat Sep 30 18:58:37 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 30 Sep 2006 18:58:37 -0400
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <c16a94ff0609301309m2c93d13et9f762cef8d042a14@mail.gmail.com>
Message-ID: <20060930225837.1717.1786729602.divmod.quotient.63966@ohm>


On Sat, 30 Sep 2006 13:09:58 -0700, Cory Dodt <corydodt at gmail.com> wrote:

>Personally I'd prefer a switch to ctypes from pywin32.  It's smaller, it's
>included in Python 2.5.

But it's not included with Python 2.3 and the rest of our win32 support.  This sounds like an entirely separate issue.




From glyph at divmod.com  Sat Sep 30 19:12:08 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 30 Sep 2006 19:12:08 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <451E8EBD.9040008@eepatents.com>
Message-ID: <20060930231208.1717.977460358.divmod.quotient.63972@ohm>

On Sat, 30 Sep 2006 08:35:25 -0700, Ed Suominen <general at eepatents.com> wrote:

>> The best course of action, then, would be to distribute qtreactor
>> separately, since we can no longer say that Twisted is all MIT
>> licensed if we do not.  The practical ramifications of this are not
>> earth-shattering, so I think that we do not need to, e.g. release a
>> 2.4.1 which does not include qtreactor, but 2.5+ should definitely
>> not include it.
>>
>> I also asked specifically about not interfering with the PyQt/Qt
>> commercial license, and Mr. Thompson suggested wording like this:

 [...]

>I agree and think (see disclaimer below) that this is just fine. It does
>not seem to inhibit the developer's flexibility at all.

Excellent.  As both a PyQt developer and someone with more legal experience than anyone else posting I am glad to see you agree :).

>If you need someone to host qtreactor, I'd be willing to do so 

I think we will still be hosting it from twistedmatrix.com, and hopefully, it will get its own buildbot there as well.  As James noted earlier, the reactor APIs are still fragile and internal, so developing it externally doesn't really make sense.  There's no particular problem with TMLabs distributing GPL'd software.  I just don't want it to be part of the Twisted tarball.



From glyph at divmod.com  Sat Sep 30 19:23:37 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 30 Sep 2006 19:23:37 -0400
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <451E4F9B.6080708@libero.it>
Message-ID: <20060930232337.1717.1142591311.divmod.quotient.63977@ohm>

I think I get it now.  The actual issue you're talking about is console IO.  The thing about the efficiency of polling is a side issue.

On Sat, 30 Sep 2006 13:06:03 +0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>glyph at divmod.com ha scritto:

>The problem is simple:
>if I want to do asyncronous I/O with Windows I don't have an unique
>'interface'.

Yes.  Take it up with Microsoft :).  Even within their native event loops, things are inconsistent.

>Is win32eventreactor not working and not tested?

It's tested, but it's not working.  See http://twistedmatrix.com/buildbot/ - you'll notice the "win32-win32er" column is always red.  It's also limited because it still allows only 63 objects.

>You did not mention it in the "removing unsupported reactors in twisted"
>thread.

It has maintainers, it has a buildbot, and it's been gradually decreasing its number of failing tests over time.  It didn't seem like a candidate for removal.

>I have write it, now stdio works ;-).

>Unfortunately it is not very efficient since:
>- it uses _pollingfile (not a real porblem)
>- it reads raw keyboard input and have to do all low level stuff like
>  '\b' handling, '\r' conversion, and so

It's very hard to do these things efficiently, so I'm not too worried about that.  We also don't have a lot of programmers interested in Windows support.  My interest in Windows support ends right about at the point where the servers I develop can be successfully tested and developed on win32 :).  Providing functionality in an inefficient implementation at least provides some useful functionality in the meanwhile, and something to optimize later if it becomes important.

>Here is the main code.
>I suspect such a thing will never be accepted into Twisted ;-):

As JP said, it might, with some tests and a patch in the tracker :).

>The _win32stdio module can simply check if the stdin is attached to a
>terminal, so it (hopefully) can support both pipes and consoles.

That would be great.

>Many things can be added, like an emulation of POSIX terminal, callbacks
>for resize events, support for focus in/out, colored output, history
>editing, ...

>[1]
>How can be tested such a thing?

In addition to JP's suggestion, "mock" the actual API you will be testing with, by replacing it in the tests and asserting that the appropriate things are called on the console object that you are passing it.

Both approaches make sense in different situations, and good test coverage will generally do both.



From twisted-python at milkpotato.org  Fri Sep  1 08:13:32 2006
From: twisted-python at milkpotato.org (Fritz Platzke)
Date: Fri, 1 Sep 2006 10:13:32 -0400 (EDT)
Subject: [Twisted-Python] unable to install twisted
Message-ID: <61284.69.249.228.28.1157120012.squirrel@webmail.milkpotato.org>


Hello,
I hate asking questions like this but quite frankly I'm stumped. I have
been trying to install Twisted for the past two days and it just won't go.
I've tried multiple versions of Zope and Twisted but nothing seems to
work.

The box I am attempting the install is a fresh install of CentOS 4.4 on an
Intel Celeron 733 mhz processor

[root at milky ~]# gcc -v
Reading specs from /usr/lib/gcc/i386-redhat-linux/3.4.6/specs
Configured with: ../configure --prefix=/usr --mandir=/usr/share/man
--infodir=/usr/share/info --enable-shared --enable-threads=posix
--disable-checking --with-system-zlib --enable-__cxa_atexit
--disable-libunwind-exceptions --enable-java-awt=gtk
--host=i386-redhat-linux
Thread model: posix
gcc version 3.4.6 20060404 (Red Hat 3.4.6-3)
[root at milky ~]# python -V
Python 2.3.4

This is what happens when I attempt to build zope...
running build
running build_py
running build_ext
building 'zope.interface._zope_interface_coptimizations' extension
gcc -pthread -fno-strict-aliasing -DNDEBUG -O2 -g -pipe -m32 -march=i386
-mtune=pentium4 -D_GNU_SOURCE -fPIC -fPIC
-IDependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface
-I/usr/include/python2.3 -c
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c
-o
build/temp.linux-i686-2.3/Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.o
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:15:20:
Python.h: Nosuch file or directory
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:16:26:
structmember.h: No such file or directory
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:22:
error: syntax error before '*' token
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:22:
warning: data definition has no type or storage class
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:23:
error: syntax error before '*' token
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:23:
warning: data definition has no type or storage class
Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:24:
error: syntax error before '*' token
...
...
etc
...
...
error: command 'gcc' failed with exit status 1


Now I realize that I could probably ask for help on the Zope list but
seeing as how a person NEEDS zope in order to install twisted I'm hoping
someone here has experienced similar issues and can provide some insight
into what I'm missing and/or doing wrong. Surely someone running either
CentOS or RHEL has encountered this problem and can explain what is going
on.

Thanks in advance,
Fritz





From gah at research.att.com  Fri Sep  1 08:33:37 2006
From: gah at research.att.com (Glenn Hochberg)
Date: Fri, 1 Sep 2006 10:33:37 -0400
Subject: [Twisted-Python] strports.service, ssl and forcing client certs
In-Reply-To: <44F69E83.3000303@imperial.ac.uk>
References: <20060830163035.1717.806136533.divmod.quotient.34631@ohm>
	<44F69E83.3000303@imperial.ac.uk>
Message-ID: <DF89DF28-199A-4F2F-9CB1-340F1CDFBB82@research.att.com>

On Aug 31, 2006, at 4:32 AM, Phil Mayers wrote:

>
>> Unlike the older ContextFactory classes, CertificateOptions has  
>> somewhat
>> more modern requirements not dictated by HTTP.  Specifically, the  
>> method
>> is TLSv1 and certificates are required.
>
> >>> import twisted
> >>> import twisted.internet.ssl
> >>> ssl.CertificateOptions()
> Traceback (most recent call last):
>   File "<stdin>", line 1, in ?
> NameError: name 'ssl' is not defined
> >>> twisted.__version__
> '2.4.0'
>
> When was that added?

Your import statement is not consistent with your usage.  You  
probably wanted:
	from twisted.internet import ssl



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060901/baebfa4a/attachment.html>

From therve at free.fr  Fri Sep  1 08:34:09 2006
From: therve at free.fr (Thomas HERVE)
Date: Fri, 01 Sep 2006 16:34:09 +0200
Subject: [Twisted-Python] unable to install twisted
In-Reply-To: <61284.69.249.228.28.1157120012.squirrel@webmail.milkpotato.org>
References: <61284.69.249.228.28.1157120012.squirrel@webmail.milkpotato.org>
Message-ID: <20060901163409.89kuwknv34gock40@itchy.wasabout.net>

Quoting Fritz Platzke <twisted-python at milkpotato.org>:

> Python.h: No such file or directory

Your problem is here. Something like 'yum install python-devel' should 
do the trick.

-- 
Thomas


----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.




From p.mayers at imperial.ac.uk  Fri Sep  1 08:54:21 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 01 Sep 2006 15:54:21 +0100
Subject: [Twisted-Python] strports.service, ssl and forcing client certs
In-Reply-To: <DF89DF28-199A-4F2F-9CB1-340F1CDFBB82@research.att.com>
References: <20060830163035.1717.806136533.divmod.quotient.34631@ohm>	<44F69E83.3000303@imperial.ac.uk>
	<DF89DF28-199A-4F2F-9CB1-340F1CDFBB82@research.att.com>
Message-ID: <44F8499D.8060309@imperial.ac.uk>

Glenn Hochberg wrote:

> Your import statement is not consistent with your usage.  You probably 
> wanted:
> from twisted.internet import ssl

That is unrelated to the actual question, but you are correct. Copy and 
paste error.



From p.mayers at imperial.ac.uk  Fri Sep  1 08:57:12 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 01 Sep 2006 15:57:12 +0100
Subject: [Twisted-Python] strports.service, ssl and forcing client certs
In-Reply-To: <DF89DF28-199A-4F2F-9CB1-340F1CDFBB82@research.att.com>
References: <20060830163035.1717.806136533.divmod.quotient.34631@ohm>	<44F69E83.3000303@imperial.ac.uk>
	<DF89DF28-199A-4F2F-9CB1-340F1CDFBB82@research.att.com>
Message-ID: <44F84A48.1050708@imperial.ac.uk>

Glenn Hochberg wrote:
>> >>> import twisted.internet.ssl
>> >>> ssl.CertificateOptions()
>> Traceback (most recent call last):
>>   File "<stdin>", line 1, in ?
>> NameError: name 'ssl' is not defined

> Your import statement is not consistent with your usage.  You probably 
> wanted:
> from twisted.internet import ssl

Sorry, ignore the previous reply, I see what you're getting at now. 
However, CertificateOptions still seems to be newer than 2.4.0:


 >>> import twisted.internet.ssl
 >>> twisted.internet.ssl.CertificateOptions()
Traceback (most recent call last):
   File "<stdin>", line 1, in ?
AttributeError: 'module' object has no attribute 'CertificateOptions'
 >>> dir(twisted.internet.ssl)
['Client', 'ClientContextFactory', 'Connector', 'ContextFactory', 
'DefaultOpenSSLContextFactory', 'Port', 'SSL', 'Server', '__all__', 
'__builtins__', '__doc__', '__file__', '__name__', 'address', 'base', 
'components', 'implementedBy', 'implements', 'implementsOnly', 
'interfaces', 'log', 'socket', 'supported', 'tcp']
 >>> twisted.__version__
'2.4.0'

SVN logs look like it was added about a month after the 2.4.0 release?



From exarkun at divmod.com  Fri Sep  1 09:18:14 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 1 Sep 2006 11:18:14 -0400
Subject: [Twisted-Python] strports.service, ssl and forcing client certs
In-Reply-To: <44F84A48.1050708@imperial.ac.uk>
Message-ID: <20060901151814.1717.2116696183.divmod.quotient.35995@ohm>

On Fri, 01 Sep 2006 15:57:12 +0100, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>
>Sorry, ignore the previous reply, I see what you're getting at now. However, 
>CertificateOptions still seems to be newer than 2.4.0:
>

Hmm, sorry.  I thought it made it into 2.4.0, but you're right, it didn't.

You can accomplish the same thing without CertificateOptions, it's just a
lot less fun.  Take a look at what OpenSSL APIs it is using:

http://twistedmatrix.com/trac/browser/trunk/twisted/internet/_sslverify.py#L795

The actual object you need to control the behavior of OpenSSL comes from
OpenSSL itself.  CertificateOptions is just a bit easier to use.

Hopefully Twisted 2.5 will be out before much longer...

Jean-Paul



From twisted-python at milkpotato.org  Fri Sep  1 15:53:44 2006
From: twisted-python at milkpotato.org (Fritz Platzke)
Date: Fri, 1 Sep 2006 17:53:44 -0400 (EDT)
Subject: [Twisted-Python] unable to install twisted
In-Reply-To: <20060901163409.89kuwknv34gock40@itchy.wasabout.net>
References: <61284.69.249.228.28.1157120012.squirrel@webmail.milkpotato.org>
	<20060901163409.89kuwknv34gock40@itchy.wasabout.net>
Message-ID: <63774.69.249.228.28.1157147624.squirrel@webmail.milkpotato.org>

I can't believe I missed this. It should have been so obvious considering
I had to install gcc the other day after a make failed. I don't know how I
left out the devel packages when I flattened/reinstalled last week.

Thanks for making me look dumb,
Fritz

> Quoting Fritz Platzke <twisted-python at milkpotato.org>:
>
>> Python.h: No such file or directory
>
> Your problem is here. Something like 'yum install python-devel' should
> do the trick.
>
> --
> Thomas
>
>
> ----------------------------------------------------------------
> This message was sent using IMP, the Internet Messaging Program.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From ppergame at gmail.com  Fri Sep  1 22:01:14 2006
From: ppergame at gmail.com (Pavel Pergamenshchik)
Date: Fri, 1 Sep 2006 21:01:14 -0700
Subject: [Twisted-Python] unable to install twisted
In-Reply-To: <61284.69.249.228.28.1157120012.squirrel@webmail.milkpotato.org>
References: <61284.69.249.228.28.1157120012.squirrel@webmail.milkpotato.org>
Message-ID: <4a5c1b500609012101qfecaa0ap956c60d37cfe7b7a@mail.gmail.com>

On 9/1/06, Fritz Platzke <twisted-python at milkpotato.org> wrote:
>
> Hello,
> I hate asking questions like this but quite frankly I'm stumped. I have
> been trying to install Twisted for the past two days and it just won't go.
> I've tried multiple versions of Zope and Twisted but nothing seems to
> work.

<snip>

> Dependencies/zope.interface-ZopeInterface-3.1.0c1/zope.interface/_zope_interface_coptimizations.c:15:20:
> Python.h: Nosuch file or directory

Python.h is usually supplied separately, in a package named python-dev
or python2.3-dev or some such. Try installing that.



From robert at gravina.com  Sat Sep  2 03:20:19 2006
From: robert at gravina.com (Robert Gravina)
Date: Sat, 2 Sep 2006 18:20:19 +0900
Subject: [Twisted-Python] Data management in a Twisted application
Message-ID: <C33AC969-CC18-4DEC-AC98-7A2B3EA7FE52@gravina.com>

Twisted and Divmod lists,

Sorry about the cross posting here - this is mainly a Twisted  
question but it involves Divmod Axiom a little too.

I'm looking for some advice about the best way to implement data  
management in my application. The way I see it, there is a "client  
does almost everything" approach, and "server does almost everything"  
approach. I'd currently using the former, but I'd like to hear some  
opinions about switching to the latter, or if there is a better  
approach you can think of.

Here are the approaches as I see them:

---

1) Client does almost everything approach

When the user logs on they get a Cacheable, which contains a list of  
Copyable objects that they will be able to add/edit/delete. These  
objects are quite complex (have list of other objects etc.). There is  
a main screen which lists the objects details.

The user can select a row, and they get a form where that can edit  
all the various attributes (obviously much more than is displayed on  
the list on the main screen), and save it to the server. The server  
calls an update method which essentially copies across all the  
attributes to the server-side Axiom Item instance which it  
represents . Using the Cacheable previously mentioned, it notifies  
all clients that an object has been updated and sends them this  
updated object. Adding new objects works in a similar way.

Problems arise with things like delete - I'd really need to set a  
flag on the server-side object when someone has it open, so that I  
can inform other users they can't delete it.

At some point I'd like to implement searching on the main interface,  
so the users can filter their list of objects. This would require me  
to build up boolean search criteria and roll my own search using the  
lists of objects.

2) Sever does almost everything

When the user logs on they get a Cacheable again, but this time the  
list is just a summary of the objects attributes, enough to populate  
the main screen list. When the user edits a row, the client requests  
the Cacheable from the server it represents (not a Copyable anymore).  
When they save, they sent the Cacheable back to the server (is this  
possible I wonder?) and copy accross all the data like before, and  
update the clients by sending them new summary data for that object  
(but not the object itself). I hope, it's possible to stop observing  
the object too.  That way, on the server I could maintain a list of  
who has the object open at the moment.

For searching, now that all the objects live on the server I could  
send my boolean search criteria and use Axiom's search facilities to  
so a proper database search. This saves my rolling me own.

Also, another bonus of this approach is if Axiom one day supports  
Live Queries (maybe I can help implement this when I get the bulk of  
this app done) I can update the clients when their query results  
changes!

---

However, it's expected the users will be searching often, so there's  
something to be said about having all the data close at hand on the  
client. Obviously, this has drawbacks too. Aside from having to  
implement my own search, I'm worried this might mean having thousands  
of objects locally might be a memory hog (but premature optimisation  
is the root of all evil, so I'll worry about this later). The search  
might by faster since there's no need to ask the server to do it, but  
since server-side search is probably going to be much faster than my  
client side search, it's hard to estimate which will be faster.

Anyway, I hope the issues here and my implementation makes sense. I'm  
torn between which approach to take, and I'd really appreciate some  
advice.

Robert





From thisaddressisnotmine at td.selfip.net  Sat Sep  2 08:45:00 2006
From: thisaddressisnotmine at td.selfip.net (Oleg Deribas)
Date: Sat, 02 Sep 2006 17:45:00 +0300
Subject: [Twisted-Python] Re: twisted rpm
In-Reply-To: <1798295731.4581156519336620.JavaMail.tomcat@dell.tecnova.cl>
References: <1798295731.4581156519336620.JavaMail.tomcat@dell.tecnova.cl>
Message-ID: <11ios3-0ff.ln1@td.selfip.net>

Hello,

Jorge Sepúlveda Pereda said the following on 25.08.2006 18:22:

> Hi, i need to know, if there are, a twisted install RPM for Fedora linux ( FC4) . 

http://article.gmane.org/gmane.comp.python.twisted/12098

On some unknown reason these packages are not mentioned at
http://twistedmatrix.com/trac/wiki/Packages

-- 
Oleg




From foom at fuhm.net  Sat Sep  2 09:30:56 2006
From: foom at fuhm.net (James Y Knight)
Date: Sat, 2 Sep 2006 11:30:56 -0400
Subject: [Twisted-Python] Re: twisted rpm
In-Reply-To: <11ios3-0ff.ln1@td.selfip.net>
References: <1798295731.4581156519336620.JavaMail.tomcat@dell.tecnova.cl>
	<11ios3-0ff.ln1@td.selfip.net>
Message-ID: <1FD7DF8D-B51C-4D34-A5A2-62F58696E69F@fuhm.net>

On Sep 2, 2006, at 10:45 AM, Oleg Deribas wrote:
> Jorge Sepúlveda Pereda said the following on 25.08.2006 18:22:
>
>> Hi, i need to know, if there are, a twisted install RPM for Fedora  
>> linux ( FC4) .
>
> http://article.gmane.org/gmane.comp.python.twisted/12098
>
> On some unknown reason these packages are not mentioned at
> http://twistedmatrix.com/trac/wiki/Packages

They are now.

James





From exarkun at twistedmatrix.com  Sat Sep  2 23:05:01 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 03 Sep 2006 05:05:01 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1157259901.6.400592379@twistedmatrix.com

Bug summary
______________________
Summary for 2006-08-27 through 2006-09-03
Bugs opened: 38    Bugs closed: 6  Total open bugs: 722 (+32)

|== Type Changes   |== Priority Changes   |== Component Changes     
|Defect:      +18  |Highest:  +2          |Conch:               +1  
|Enhancement: +14  |High:     +3          |Core:               +15  
|Task:         +0  |Normal:  +25          |Mail:                +2  
                   |Low:      +2          |Release Management:  +1  
                                          |Trial:               +2  
                                          |Web:                 +2  
                                          |Web2:               +10  
                                          |Words:               -1  


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2021] iocpreactor.tcp.ClientSocket should implement ISystemHandle (opened by ghazel)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2021

[#2040] SSL echo client example incorrectly stops the reactor multiple times (opened by exarkun) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2040

[#2044] twisted.test.test_logfile.testNoPermission failing will break buildbot (opened by jerub)
    defect          core       http://twistedmatrix.com/trac/ticket/2044

[#2045] spelling error in _sslverify.OpenSSLCertificateOptions.__getstate__() (opened by dq)
    defect          core       http://twistedmatrix.com/trac/ticket/2045

[#2051] test_imap uses deprecated Deferred.setTimeout (opened by exarkun)
    enhancement     mail       http://twistedmatrix.com/trac/ticket/2051

[#2052] test_defer calls reactor.run() (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2052

                    ===== High =====
[#2020] tkmktap is broken and probably useless, eliminate it (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/2020

[#2033] Removing non-existent property results in error. (opened by rfmohr at osc.edu)
    defect          web2       http://twistedmatrix.com/trac/ticket/2033

[#2042] twisted.web2.auth.wrapper's interface is backwards (opened by glyph)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2042

                    ===== Normal =====
[#2022] ConnectionRefusedError's errno and strerror surprising on BSD/OSX (opened by dalke)
    defect          core       http://twistedmatrix.com/trac/ticket/2022

[#2023] twisted/mail/smtp.py SenderMixin error logging bug (opened by shieldszero)
    defect          mail       http://twistedmatrix.com/trac/ticket/2023

[#2024] trial --dry-run fails with real test_suites, because pyunit suites don't have names (opened by spiv)
    defect          trial      http://twistedmatrix.com/trac/ticket/2024

[#2025] Include reference to client in twisted.web's docstring (opened by jml)
    defect          web        http://twistedmatrix.com/trac/ticket/2025

[#2026] Edit the twisted.internet docstring to make contents clearer (opened by jml)
    defect          core       http://twistedmatrix.com/trac/ticket/2026

[#2027] Provide some general information about the split in the t.protocols' docstring (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2027

[#2028] web2's docstring should indicate the stability of web2 (opened by jml)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2028

[#2029] Use a consistent style for docstrings (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2029

[#2030] twisted.web.trp's docstring is murky (opened by jml)
    defect          web        http://twistedmatrix.com/trac/ticket/2030

[#2034] Improper handling of properties with no namespace (opened by rfmohr at osc.edu)
    defect          web2       http://twistedmatrix.com/trac/ticket/2034

[#2035] twisted.internet.udp.Port implements twisted.internet.interfaces.IConsumer (opened by exarkun)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2035

[#2036] trial runs tests from .pyc files even if there is no .py file (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2036

[#2037] twisted.python.reflect.namedAny depends on undocumented import implementation details (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2037

[#2039] Wrong namespace assigned to properties (opened by rfmohr at osc.edu)
    defect          web2       http://twistedmatrix.com/trac/ticket/2039

[#2041] web2.auth.wrapper.HTTPAuthResource mis-handles URL path (opened by rfmohr at osc.edu)
    defect          web2       http://twistedmatrix.com/trac/ticket/2041

[#2043] defgen would be better without waitForDeferred (opened by ghazel)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2043

[#2046] remove license duplication from web2.dav if possible, add note if not (opened by glyph)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2046

[#2047] use regular class statements in web2.dav, remove bindMethods (opened by glyph)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2047

[#2048] In twisted.web2 the fileupload.parseMultipartFormData function has an unoverideable keyword argument (opened by fade)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2048

[#2049] web2/fileupload.py parseMultipartFormData has unoverideable default keyword arguments (opened by fade)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2049

[#2050] funcion parseMultipartFormData in web2/fileupload.py has unalterable default keword args (opened by fade)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2050

[#2053] twisted.test.test_import is redundant (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2053

[#2054] ProperlyCloseFilesTestCase.testProperlyCloseFiles written in an aggressively stupid manner (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2054

[#2055] twisted.test.test_ssl.SpammyTLSTestCase exercises codepaths with warnings without suppressing them (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2055

[#2056] twisted.test.test_internet.ReactorCoreTestCase defines a timeout method which conflicts with trial's timeout attribute (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2056

[#2057] twisted.conch.test.test_ssh.UtilityTestCase.testCounter relies on deprecated wrapping behavior of struct module (opened by exarkun)
    defect          conch      http://twistedmatrix.com/trac/ticket/2057

                    ===== Low =====
[#2031] "setup.py clean" does not remove all files after build (opened by rfmohr at osc.edu)
    enhancement     release management http://twistedmatrix.com/trac/ticket/2031

[#2032] "setup.py clean" does not remove all files after build (opened by rfmohr at osc.edu) (CLOSED, duplicate)
    enhancement     release management http://twistedmatrix.com/trac/ticket/2032

[#2038] Make the pypy builder work (opened by jerub)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2038



Closed Bugs
______________________
                    ===== Highest =====
[#2019] t.w.p.msn does not properly execute errbacks when an error packet is received (opened by habnabit, closed by spiv, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/2019

[#1922] make twistd pluggable, nerf mktap (opened by tjs, closed by radix, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1922

[#2002] t.i.unix.Port fails on bound incoming unix sockets (opened by ghazel, closed by alus, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2002

[#2040] SSL echo client example incorrectly stops the reactor multiple times (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2040

                    ===== Normal =====
[#2013] Deprecate mktap and document usage of Twisted Application Plugins with twistd (opened by radix, closed by radix, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2013

                    ===== Low =====
[#2032] "setup.py clean" does not remove all files after build (opened by rfmohr at osc.edu, closed by exarkun, duplicate)
    enhancement     release management http://twistedmatrix.com/trac/ticket/2032





From etaoinbe at yahoo.com  Mon Sep  4 06:10:16 2006
From: etaoinbe at yahoo.com (f rom)
Date: Mon, 4 Sep 2006 05:10:16 -0700 (PDT)
Subject: [Twisted-Python] how to scp with twisted?
Message-ID: <20060904121017.14088.qmail@web50910.mail.yahoo.com>

hi, can you point me to a sample or whatever on how to
implement "scp" secure file copy with twisted for
python on windows ?

thanx

Joe

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From manlio_perillo at libero.it  Mon Sep  4 10:02:51 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 04 Sep 2006 18:02:51 +0200
Subject: [Twisted-Python] callLater
Message-ID: <44FC4E2B.2080801@libero.it>

Hi.

I need to implement a function for scheduling function calls at specific
times.

A simple implementation is:

def callAt(when):
    from twisted.internet import reactor

    delta = when - datetime.now()
    delay = delta.days * 24 * 3600 + delta.seconds + delta.microseconds
/ 1000000.

    return reactor.callLater(delay)


However I'm going to have lots of this scheduled calls, many of these
are far away in the future.

Can this be a problem?

An alternative implementation is to use LoopingCall that, say, every 15
minutes, check the scheduled functions.
Here I can think of some optimization, to avoid a linear search.


Thanks  Manlio Perillo



From exarkun at divmod.com  Mon Sep  4 10:08:44 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 4 Sep 2006 12:08:44 -0400
Subject: [Twisted-Python] callLater
In-Reply-To: <44FC4E2B.2080801@libero.it>
Message-ID: <20060904160844.1717.1864548135.divmod.quotient.38962@ohm>

On Mon, 04 Sep 2006 18:02:51 +0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>Hi.
>
>I need to implement a function for scheduling function calls at specific
>times.
>
>A simple implementation is:
>
>def callAt(when):
>    from twisted.internet import reactor
>
>    delta = when - datetime.now()
>    delay = delta.days * 24 * 3600 + delta.seconds + delta.microseconds
>/ 1000000.
>
>    return reactor.callLater(delay)
>
>
>However I'm going to have lots of this scheduled calls, many of these
>are far away in the future.
>
>Can this be a problem?

Profile your application and find out.  Anything else you do is premature
optimization and a waste of time.

Jean-Paul



From manlio_perillo at libero.it  Mon Sep  4 10:26:59 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 04 Sep 2006 18:26:59 +0200
Subject: [Twisted-Python] callLater
In-Reply-To: <20060904160844.1717.1864548135.divmod.quotient.38962@ohm>
References: <20060904160844.1717.1864548135.divmod.quotient.38962@ohm>
Message-ID: <44FC53D3.8000300@libero.it>

First of all, the subject should have been "callAt" and not callLater,
sorry.

Jean-Paul Calderone ha scritto:
> On Mon, 04 Sep 2006 18:02:51 +0200, Manlio Perillo
> <manlio_perillo at libero.it> wrote:
>> Hi.
>>
>> I need to implement a function for scheduling function calls at specific
>> times.
>>
>> A simple implementation is:
>>
>> def callAt(when):
>>    from twisted.internet import reactor
>>
>>    delta = when - datetime.now()
>>    delay = delta.days * 24 * 3600 + delta.seconds + delta.microseconds
>> / 1000000.
>>
>>    return reactor.callLater(delay)
>>
>>
>> However I'm going to have lots of this scheduled calls, many of these
>> are far away in the future.
>>
>> Can this be a problem?
> 
> Profile your application and find out.  Anything else you do is premature
> optimization and a waste of time.
> 

I don't think this is a premature optimization.
I'm just considering two different implementations.

I whould like to know if someone is using thousands instances of
DelayedCall without having problems.


However only now I'm noting that the reactor uses the heapq module, so
there should be no performance problems.


Thanks and regards  Manlio Perillo



From therve at free.fr  Mon Sep  4 10:24:29 2006
From: therve at free.fr (Thomas HERVE)
Date: Mon, 04 Sep 2006 18:24:29 +0200
Subject: [Twisted-Python] callLater
In-Reply-To: <44FC4E2B.2080801@libero.it>
References: <44FC4E2B.2080801@libero.it>
Message-ID: <20060904182429.vpwohj1tgco8so00@itchy.wasabout.net>

Quoting Manlio Perillo <manlio_perillo at libero.it>:

> Hi.

Hi,

> I need to implement a function for scheduling function calls at specific
> times.
>
> [snip]
>
> However I'm going to have lots of this scheduled calls, many of these
> are far away in the future.
>
> Can this be a problem?

The real problem of this kind of solution is the lost of data if you 
restart your application. If your 'far away in the future' is 6 months, 
I won't expect my server to run 6 months (not for reliability reason, 
but a change of configuration for example, or a new feature of my app). 
So you have to store the scheduled calls somewhere.

For the use of callLater, like Jean-Paul said you should try and see if 
it works for you. If you already store your calls somewhere it won't be 
hard to make a simple scheduler with a tick function.

-- 
Thomas


----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.




From manlio_perillo at libero.it  Mon Sep  4 10:45:14 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 04 Sep 2006 18:45:14 +0200
Subject: [Twisted-Python] callLater
In-Reply-To: <20060904182429.vpwohj1tgco8so00@itchy.wasabout.net>
References: <44FC4E2B.2080801@libero.it>
	<20060904182429.vpwohj1tgco8so00@itchy.wasabout.net>
Message-ID: <44FC581A.5080709@libero.it>

Thomas HERVE ha scritto:
> Quoting Manlio Perillo <manlio_perillo at libero.it>:
> 
>> Hi.
> 
> Hi,
> 
>> I need to implement a function for scheduling function calls at specific
>> times.
>>
>> [snip]
>>
>> However I'm going to have lots of this scheduled calls, many of these
>> are far away in the future.
>>
>> Can this be a problem?
> 
> The real problem of this kind of solution is the lost of data if you
> restart your application. If your 'far away in the future' is 6 months,
> I won't expect my server to run 6 months (not for reliability reason,
> but a change of configuration for example, or a new feature of my app).
> So you have to store the scheduled calls somewhere.
> 

I'm implementing a simple calendar (using IETF icalendar as a reference).

What I need to schedule are the alarms.
Alarm data is stored in a relational database.

So, every time the server starts, it can read alarm data from the
database and do the scheduling job.

> For the use of callLater, like Jean-Paul said you should try and see if
> it works for you. If you already store your calls somewhere it won't be
> hard to make a simple scheduler with a tick function.
> 

Ok.
For now I'm going to use callLater.



Thanks and regards  Manlio Perillo



From mmcnett at cs.ucsd.edu  Mon Sep  4 12:02:57 2006
From: mmcnett at cs.ucsd.edu (Marvin McNett)
Date: Mon, 04 Sep 2006 11:02:57 -0700
Subject: [Twisted-Python] PB auth with LDAP
Message-ID: <44FC6A51.6090407@cs.ucsd.edu>

Hi,

Just noticed that PB's _PortalAuthChallenger implements 
IUsernameHashedPassword, IUsernameMD5Passwordauth, but not 
IUsernamePassword.  This requires that I store my passwords in plain 
text or MD5 hash, then fetch the password to do a comparison at login. 
However, this is inconvenient when storing passwords in LDAP.  First, 
LDAP doesn't like returning passwords (Unless you're requesting it as 
the database administrator).  Second, storing passwords in plain text or 
even as MD5 hashes is less than ideal.  Finally, LDAP already has a 
comparison operation (which I can do with minimal privileges), so I 
should never need to actually fetch the password.

All this means that it would be very convenient for 
_PortalAuthChallenger to also implement IUsernamePassword (what's wrong 
with sending clear text passwords over SSL anyway?).  However, it's not 
clear to me how I'd go about overriding the current behavior.  I've 
tried the naive thing which is, in a separate file:

from twisted.cred import credentials
from twisted.spread.pb import *"

then overriding the _PortalRoot, _PortalWrapper, and 
_PortalAuthChallenger classes, and registering the alternate adapter. 
However, the "registerAdapter(_PortalRoot, Portal, IPBRoot)" comes back 
to bite me with:

   exceptions.ValueError: an adapter (twisted.spread.pb._PortalRoot) was 
already registered.

unless I comment it out in the actual twisted.spread.pb.py file.  Is 
there a way to unregister an adapter?  I'm sure there's a better way of 
doing this since I've seen mention of writing alternate login sequences, 
but I haven't been smart enough to figure it out.  Any help would be 
appreciated.

Thanks,
Marvin



From exarkun at divmod.com  Mon Sep  4 12:16:54 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 4 Sep 2006 14:16:54 -0400
Subject: [Twisted-Python] PB auth with LDAP
In-Reply-To: <44FC6A51.6090407@cs.ucsd.edu>
Message-ID: <20060904181654.1717.146591684.divmod.quotient.39069@ohm>

On Mon, 04 Sep 2006 11:02:57 -0700, Marvin McNett <mmcnett at cs.ucsd.edu> wrote:
>Hi,
>
> [snip]
>
>from twisted.cred import credentials
>from twisted.spread.pb import *"
>
>then overriding the _PortalRoot, _PortalWrapper, and _PortalAuthChallenger 
>classes, and registering the alternate adapter. However, the 
>"registerAdapter(_PortalRoot, Portal, IPBRoot)" comes back to bite me with:
>
>   exceptions.ValueError: an adapter (twisted.spread.pb._PortalRoot) was 
>already registered.
>
>unless I comment it out in the actual twisted.spread.pb.py file.  Is there a 
>way to unregister an adapter?  I'm sure there's a better way of doing this 
>since I've seen mention of writing alternate login sequences, but I haven't 
>been smart enough to figure it out.  Any help would be appreciated.

Instead of registering another adapter, instantiate your _PortalRoot class
directly and pass that to PBServerFactory.

Jean-Paul



From p.mayers at imperial.ac.uk  Mon Sep  4 14:35:01 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 04 Sep 2006 21:35:01 +0100
Subject: [Twisted-Python] how to scp with twisted?
In-Reply-To: <20060904121017.14088.qmail@web50910.mail.yahoo.com>
References: <20060904121017.14088.qmail@web50910.mail.yahoo.com>
Message-ID: <44FC8DF5.60706@imperial.ac.uk>

f rom wrote:
> hi, can you point me to a sample or whatever on how to
> implement "scp" secure file copy with twisted for
> python on windows ?

The very first hit for "twisted scp" on Google is a post containing code 
I wrote which does a simple copy remote -> local

http://twistedmatrix.com/pipermail/twisted-python/2005-December/012180.html

The scp "application" is basically:

  1. ssh in
  2. authenticate
  3. open a channel
  4. run the "scp" app on the channel
  5. communicate using the rcp protocol to "scp" stdin/stdout via the 
SSH channel

The rcp protocol is undocumented as far as I can tell, and I had to read 
the openssh and putty source codes to get even that far, but if you have 
a dig then implementing the other bits e.g. local -> remote, directory 
listings (for recursive copies) and so on should not be that hard.

HTH



From mmcnett at cs.ucsd.edu  Mon Sep  4 18:52:52 2006
From: mmcnett at cs.ucsd.edu (Marvin McNett)
Date: Mon, 04 Sep 2006 17:52:52 -0700
Subject: [Twisted-Python] PB auth with LDAP
In-Reply-To: <20060904181654.1717.146591684.divmod.quotient.39069@ohm>
References: <20060904181654.1717.146591684.divmod.quotient.39069@ohm>
Message-ID: <44FCCA64.3030802@cs.ucsd.edu>

Jean-Paul Calderone wrote:
> On Mon, 04 Sep 2006 11:02:57 -0700, Marvin McNett <mmcnett at cs.ucsd.edu> 
> wrote:
>> Hi,
>>
>> [snip]
>>
>> unless I comment it out in the actual twisted.spread.pb.py file.  Is 
>> there a way to unregister an adapter?  I'm sure there's a better way 
>> of doing this since I've seen mention of writing alternate login 
>> sequences, but I haven't been smart enough to figure it out.  Any help 
>> would be appreciated.
> 
> Instead of registering another adapter, instantiate your _PortalRoot class
> directly and pass that to PBServerFactory.
> 

Worked like a charm -- LDAP auth in PB without fetching passwords. Nice.

Thanks, Marvin



From l.allegrucci at gmail.com  Tue Sep  5 10:21:56 2006
From: l.allegrucci at gmail.com (Lorenzo Allegrucci)
Date: Tue, 05 Sep 2006 18:21:56 +0200
Subject: [Twisted-Python] twistd and passphrase
Message-ID: <1157473316.5101.7.camel@odyssey.lan>


Hi,

I'm using twistd to run my server as a daemon but I couldn't find a way
to prompt the user for a passphrase (such passphrase is used by the
server to read its SSL key).  I tried getpass() but it doesn't work
because /dev/stdin is already redirected to /dev/null.  How can I ask
for a passphrase using twistd?
Thank you





From mike at mkp.ca  Tue Sep  5 11:18:49 2006
From: mike at mkp.ca (Mike Pelletier)
Date: Tue, 5 Sep 2006 13:18:49 -0400
Subject: [Twisted-Python] twistd and passphrase
In-Reply-To: <1157473316.5101.7.camel@odyssey.lan>
References: <1157473316.5101.7.camel@odyssey.lan>
Message-ID: <200609051318.49688.mike@mkp.ca>

On Tuesday 05 September 2006 12:21, Lorenzo Allegrucci wrote:
> Hi,
>
> I'm using twistd to run my server as a daemon but I couldn't find a way
> to prompt the user for a passphrase (such passphrase is used by the
> server to read its SSL key).  I tried getpass() but it doesn't work
> because /dev/stdin is already redirected to /dev/null.  How can I ask
> for a passphrase using twistd?
> Thank you

Hi, Lorenzo.  I'm going to assume you are completely new to Twisted.  
Apologies if this is not so; just skip ahead 2-4 paragraphs.  Apologies also 
for my awkward writing.

Abstractly, the way to do this is to write a Protocol that uses a Transport to 
prompt the user and receive their response, and wire it all together with a 
Factory.  (Though in the case of stdio, the Factory is purely conceptual as 
explained below.)

A Protocol is responsible for the reading and writing of a connection, without 
concern for the exact nature of that connection.  A Transport is concerned 
with the nature of a connection without having to know anything about where 
the connection came from.  And a Factory is responsible for the creation of 
connections (either by originating or accepting them), creating the Transport 
object that will represent and manage that connection, and attaching a 
Protocol to the Transport.  Though I think that for your immediate purposes, 
you can ignore Factories, since when twisted starts up stdio is 
already "connected".

Less abstractly, what you need to do is instantiate 
twisted.internet.stdio.StandardIO, which is a Transport, passing the 
constructor an instance of your password-prompting Protocol.  In doing this, 
you are acting as the Factory by "accepting" the stdio connection, creating a 
Transport to deal with the connection, and associating the Transport with a 
Protocol.

As I said at the beginning, you will need to write the Protocol class 
yourself.  There is an example of a Protocol that uses the StandardIO 
Transport in twisted.test.process_twisted which you can use as a model.  I 
kinda think there already exists a Protocol that does what you need 
(including turning off character echoing, etc) but I cannot recall where I 
might have encountered it.  Perhaps someone else can help there.

If you want your server to be able to start up unattended (for instance, 
whenever the system is rebooted) you might want to consider using telnet or 
SSH rather than stdin for reading the password.  You should be able to re-use 
the same Protocol (except maybe for the part that turns off echoing).  You 
are never going to be able to read a password from stdin if twisted is 
starting up in daemon mode.  As you noticed, in daemon mode stdin has been 
closed before you have a chance to do anything with it.  You would instead 
have to start it in "foreground" mode, then read the password with your 
Protocol, and once the password has been validated ask twistd to switch to 
daemon mode.  (If indeed there even exists an interface for daemonizing after 
the fact; I've never looked.)  And of course, if you launch twistd in 
foreground mode from a boot script, the boot process will block until someone 
comes along and types the password, which is usually a Bad Thing.

Gosh, that was even an more awkward explanation than I'd expected.  I hope you 
manage to get something out of it.

Mike.



From sbernste at mitre.org  Tue Sep  5 16:25:21 2006
From: sbernste at mitre.org (Stan Benrsteen)
Date: Tue, 5 Sep 2006 18:25:21 -0400
Subject: [Twisted-Python] Newbie question
Message-ID: <EE2D05C3-84B4-42CA-A38E-FB4901F57B38@mitre.org>

Gentlemen:

I am trying to use the twisted perspective broker in a client that  
repeatedly makes remote calls to a twisted server.  I'm running a MAC  
OS X.

I create a client object, which calls reactor.connectTCP(), builds  
the deferred object to make the remote call, calls reactor.run().  A  
deferred callback eventually reactor.stop() and returns the correct  
answer.

Now I need to do this again, so I create a new client object, etc.,  
which goes through the same procedure and eventually call reactor.stop 
().  Again, I get the correct answer from the remote call, but the  
reactor keeps running.  In other words, the statements after the  
reactor.stop() execute, but the statement after reactor.run() is  
never reached.  The client hangs.

What am I overlooking??

-- perplexed





From exarkun at divmod.com  Tue Sep  5 16:49:32 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 5 Sep 2006 18:49:32 -0400
Subject: [Twisted-Python] Newbie question
In-Reply-To: <EE2D05C3-84B4-42CA-A38E-FB4901F57B38@mitre.org>
Message-ID: <20060905224932.1717.230399899.divmod.quotient.40286@ohm>

On Tue, 5 Sep 2006 18:25:21 -0400, Stan Benrsteen <sbernste at mitre.org> wrote:
>Gentlemen:
>
>I am trying to use the twisted perspective broker in a client that 
>repeatedly makes remote calls to a twisted server.  I'm running a MAC  OS X.
>
>I create a client object, which calls reactor.connectTCP(), builds  the 
>deferred object to make the remote call, calls reactor.run().  A  deferred 
>callback eventually reactor.stop() and returns the correct  answer.
>
>Now I need to do this again, so I create a new client object, etc.,  which 
>goes through the same procedure and eventually call reactor.stop ().  Again, 
>I get the correct answer from the remote call, but the  reactor keeps 
>running.  In other words, the statements after the  reactor.stop() execute, 
>but the statement after reactor.run() is  never reached.  The client hangs.
>
>What am I overlooking??
>

You cannot stop the reactor and then start it again.

Jean-Paul



From sbernste at mitre.org  Wed Sep  6 15:12:29 2006
From: sbernste at mitre.org (Stan Benrsteen)
Date: Wed, 6 Sep 2006 17:12:29 -0400
Subject: [Twisted-Python] Multiple client connections
Message-ID: <32505CBB-CC6F-4A3A-898D-37F296AB2542@mitre.org>

All,

I want to write a client that connects to a Twisted Server using pb.   
I want my client to make several connections. For example:

from twisted.spread import pb
from twisted.internet import defer

from twisted.internet.tcp import Connector
from twisted.internet import reactor
PORT = 8992

class ModelCalculator:
     def __init__(self, host, port):
         self.host = host
         self.port = port

     def add(self, a, b):
         self.factory = pb.PBClientFactory()
         deferred = self.factory.getRootObject()
         deferred.addCallback(self.connected, a, b)
         deferred.addErrback(self.failure)
         reactor.run()
         return self.result

     def connected(self, perspective, a, b):
         deferred = perspective.callRemote('calculate', a, b)
         deferred.addCallback(self.success, perspective)
         deferred.addErrback(self.failure)

     def success(self, result, perspective):
         self.result = result
         self.stopReactor()

     def failure(self, reason):
         self.result = None
         self.stopReactor()

     def stopReactor(self):
         reactor.stop()

if __name__ == '__main__':
     calculator = ModelCalculator("127.0.0.1", PORT)
     print calculator.add(4,5)
     print calculator.add(14,5)
     print calculator.add(24,5)
     print calculator.add(34,5)



As you see, I want to add many numbers and print out the result.   
This doesn't work because the reactor is been stopped in the  
stopReactor() method that is invoked in either success() or failure 
().  How can I change it so I can call my remote add() method many  
times without waiting for the reactor to be stopped? Is there a way  
that I can use the PB stuff without the reactor?

thanks,
/amn




From exarkun at divmod.com  Wed Sep  6 15:27:53 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 6 Sep 2006 17:27:53 -0400
Subject: [Twisted-Python] Multiple client connections
In-Reply-To: <32505CBB-CC6F-4A3A-898D-37F296AB2542@mitre.org>
Message-ID: <20060906212753.1717.376878495.divmod.quotient.41232@ohm>

On Wed, 6 Sep 2006 17:12:29 -0400, Stan Benrsteen <sbernste at mitre.org> wrote:
>All,
>
>I want to write a client that connects to a Twisted Server using pb.   I 
>want my client to make several connections. For example:
>
>from twisted.spread import pb
>from twisted.internet import defer
>
>from twisted.internet.tcp import Connector
>from twisted.internet import reactor
>PORT = 8992
>
>class ModelCalculator:
>     def __init__(self, host, port):
>         self.host = host
>         self.port = port
>
>     def add(self, a, b):
>         self.factory = pb.PBClientFactory()
>         deferred = self.factory.getRootObject()
>         deferred.addCallback(self.connected, a, b)
>         deferred.addErrback(self.failure)
>         reactor.run()
>         return self.result

Instead, use this definition of add:

    def add(self, a, b):
        self.factory = pb.PBClientFactory()
        deferred = self.factory.getRootObject()
        deferred.addCallback(self.connected, a, b)
        deferred.addErrback(self.failure)
        return deferred

>
>     def connected(self, perspective, a, b):
>         deferred = perspective.callRemote('calculate', a, b)
>         deferred.addCallback(self.success, perspective)
>         deferred.addErrback(self.failure)

And this definition of connected:

    def connected(self, perspective, a, b):
        return perspective.callRemote('calculate', a, b)

>
>     def success(self, result, perspective):
>         self.result = result
>         self.stopReactor()
>
>     def failure(self, reason):
>         self.result = None
>         self.stopReactor()
>
>     def stopReactor(self):
>         reactor.stop()
>

Now you don't need any of these methods.

>if __name__ == '__main__':
>     calculator = ModelCalculator("127.0.0.1", PORT)
>     print calculator.add(4,5)
>     print calculator.add(14,5)
>     print calculator.add(24,5)
>     print calculator.add(34,5)
>

Rewrite this as:

    def reportSums(sums):
        for s in sums:
            print s

    def reportFailure(err):
        err.printTraceback()

    if __name__ == '__main__':
        calls = []
        calculator = ModelCalculator("127.0.0.1", PORT)
        for sums in [(4, 5), (14, 5), (24, 5), (34, 5)]:
            calls.append(calculator.add(*sums))
        d = defer.gatherResults(sums)
        d.addCallbacks(reportSumsm, reportFailure)
        d.addCallback(lambda ignored: reactor.stop())
        reactor.run()

>
>
>As you see, I want to add many numbers and print out the result.   This 
>doesn't work because the reactor is been stopped in the  stopReactor() 
>method that is invoked in either success() or failure ().  How can I change 
>it so I can call my remote add() method many  times without waiting for the 
>reactor to be stopped? Is there a way  that I can use the PB stuff without 
>the reactor?

Deferreds are the abstraction Twisted provides for dealing with callbacks.
It provides this abstraction because Twisted applications use callbacks
/a lot/.  You won't be able to avoid using them.  You need to structure
your programs in the way I have demonstrated above.

Jean-Paul



From TimothyFitz at gmail.com  Thu Sep  7 08:39:27 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Thu, 7 Sep 2006 10:39:27 -0400
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
Message-ID: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>

Let me prefix this by the fact that I am in college and very very poor
at the moment. I have scrapped spare parts together to create a very
decent machine (Athlon 64 3000+), it's completely built but I could
not find anyone with spare ram.



From TimothyFitz at gmail.com  Thu Sep  7 08:40:58 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Thu, 7 Sep 2006 10:40:58 -0400
Subject: [Twisted-Python] Re: Windows Buildbot for DDR Ram
In-Reply-To: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
References: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
Message-ID: <972ec5bd0609070740t3663ec81lfb7be9a1da4703ef@mail.gmail.com>

Hooray for clicking "send" instead of "save now."

To finish what I was saying, if anyone has a half gig or more of DDR
ram to spare (PC 2700 or higher, anything is good) I'll have a fully
operational buildbot to replace the (broken? missing?) iocp buildbot.

On 9/7/06, Timothy Fitz <TimothyFitz at gmail.com> wrote:
> Let me prefix this by the fact that I am in college and very very poor
> at the moment. I have scrapped spare parts together to create a very
> decent machine (Athlon 64 3000+), it's completely built but I could
> not find anyone with spare ram.
>



From TimothyFitz at gmail.com  Thu Sep  7 09:41:48 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Thu, 7 Sep 2006 11:41:48 -0400
Subject: [Twisted-Python] Newbie question
In-Reply-To: <20060905224932.1717.230399899.divmod.quotient.40286@ohm>
References: <EE2D05C3-84B4-42CA-A38E-FB4901F57B38@mitre.org>
	<20060905224932.1717.230399899.divmod.quotient.40286@ohm>
Message-ID: <972ec5bd0609070841j6cd2a600o4c6db5567dffd790@mail.gmail.com>

On 9/5/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> You cannot stop the reactor and then start it again.

Why don't the reactors throw if this happens? This question comes up
almost once a month.



From jarrod at vertigrated.com  Thu Sep  7 11:01:12 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Thu, 7 Sep 2006 13:01:12 -0400
Subject: [Twisted-Python] LineReceiver and setRawMode()
Message-ID: <2389d4730609071001yd35dc47l4c9231cebe61b00f@mail.gmail.com>

I got a simple line protocol I am trying to implement, blocks .

CMD <byte count>\r\n
<payload>

when CMD 5\r\n

is received, I setRawMode()
and then inside of rawDataReceived() handle the blob

the problem is when my client sends the data and the next CMD line
gets eaten by the rawDataReceived() call before I can set it back to
lineMode().

so for something like

CMD 5\r\n
abcde
CMD 10\r\n
abcdefghij

after I get CMD 5\r\n
setRawMode()

inside rawDataReceived(data)
data = abcdeCMD 10\r\n

is there something in twisted that will help with this?
or do I need to subclass LineReceiver and add a
setRawMode(bytesToRead) or something?



From TimothyFitz at gmail.com  Thu Sep  7 11:20:34 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Thu, 7 Sep 2006 13:20:34 -0400
Subject: [Python-Dev] [Twisted-Python] Newbie question
In-Reply-To: <20060907160613.1717.1053187541.divmod.quotient.42002@ohm>
References: <972ec5bd0609070841j6cd2a600o4c6db5567dffd790@mail.gmail.com>
	<20060907160613.1717.1053187541.divmod.quotient.42002@ohm>
Message-ID: <972ec5bd0609071020r3897107apc645a8602b126fee@mail.gmail.com>

On 9/7/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> One could just as easily ask why no one bothers to read mailing list
> archives to see if their question has been answered before.

Is there a technical reason why they can't? If not I'm opening up a bug on it.



From therve at free.fr  Thu Sep  7 11:34:19 2006
From: therve at free.fr (Thomas HERVE)
Date: Thu, 07 Sep 2006 19:34:19 +0200
Subject: [Twisted-Python] LineReceiver and setRawMode()
In-Reply-To: <2389d4730609071001yd35dc47l4c9231cebe61b00f@mail.gmail.com>
References: <2389d4730609071001yd35dc47l4c9231cebe61b00f@mail.gmail.com>
Message-ID: <20060907193419.8p4pjrbfkgoocgs8@itchy.wasabout.net>

Quoting jarrod roberson <jarrod at vertigrated.com>:

> I got a simple line protocol I am trying to implement, blocks .
>
> [snip]
>
> inside rawDataReceived(data)
> data = abcdeCMD 10\r\n
>
> is there something in twisted that will help with this?
> or do I need to subclass LineReceiver and add a
> setRawMode(bytesToRead) or something?

What I've done in this case is something like this:

def rawDataReceived(self, data):
    self.buffer += data
    if len(self.buffer) >= self.lenExpected:
        buf = self.buffer[:self.lenExpected]
        rem = self.buffer[self.lenExpected:]
        doSometingWithBuff(buf)
        self.buffer = ""
        self.setLineMode()
        if rem:
            self.dataReceived(rem)

You need to set the variable self.lenExpected. You read the data and 
when you can all what you needed, you push it back again with 
dataReceived.

-- 
Thomas






----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.




From TimothyFitz at gmail.com  Thu Sep  7 12:08:13 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Thu, 7 Sep 2006 14:08:13 -0400
Subject: [Python-Dev] [Twisted-Python] Newbie question
In-Reply-To: <20060907160613.1717.1053187541.divmod.quotient.42002@ohm>
References: <972ec5bd0609070841j6cd2a600o4c6db5567dffd790@mail.gmail.com>
	<20060907160613.1717.1053187541.divmod.quotient.42002@ohm>
Message-ID: <972ec5bd0609071108k3f1f6d50id547cc7db8e4b283@mail.gmail.com>

On 9/7/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Thu, 7 Sep 2006 11:41:48 -0400, Timothy Fitz <timothyfitz at gmail.com> wrote:
> >Why don't the reactors throw if this happens? This question comes up
> >almost once a month.
> >
>
> One could just as easily ask why no one bothers to read mailing list
> archives to see if their question has been answered before.

Let me rephrase. Are there any technical reasons preventing
reactor.run() from throwing if started twice? Is there any reason
*not* to make this throw an exception?

Timothy Fitz



From exarkun at divmod.com  Thu Sep  7 12:25:59 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 7 Sep 2006 14:25:59 -0400
Subject: [Python-Dev] [Twisted-Python] Newbie question
In-Reply-To: <972ec5bd0609071108k3f1f6d50id547cc7db8e4b283@mail.gmail.com>
Message-ID: <20060907182559.1717.748564968.divmod.quotient.42079@ohm>

On Thu, 7 Sep 2006 14:08:13 -0400, Timothy Fitz <timothyfitz at gmail.com> wrote:
>On 9/7/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>>On Thu, 7 Sep 2006 11:41:48 -0400, Timothy Fitz <timothyfitz at gmail.com> 
>>wrote:
>> >Why don't the reactors throw if this happens? This question comes up
>> >almost once a month.
>> >
>>
>>One could just as easily ask why no one bothers to read mailing list
>>archives to see if their question has been answered before.
>
>Let me rephrase. Are there any technical reasons preventing
>reactor.run() from throwing if started twice? Is there any reason
>*not* to make this throw an exception?

Not really.

Jean-Paul



From foom at fuhm.net  Thu Sep  7 13:01:08 2006
From: foom at fuhm.net (James Y Knight)
Date: Thu, 7 Sep 2006 15:01:08 -0400
Subject: [Python-Dev] [Twisted-Python] Newbie question
In-Reply-To: <20060907182559.1717.748564968.divmod.quotient.42079@ohm>
References: <20060907182559.1717.748564968.divmod.quotient.42079@ohm>
Message-ID: <BC69EF55-B9A1-4A81-8200-74DE0C0079E0@fuhm.net>


On Sep 7, 2006, at 2:25 PM, Jean-Paul Calderone wrote:

>> Let me rephrase. Are there any technical reasons preventing
>> reactor.run() from throwing if started twice? Is there any reason
>> *not* to make this throw an exception?
>
> Not really.

It could also work. What's preventing it is that the shutdown  
triggers are cleared when the reactor stops, and some of the triggers  
are essential for the shutdown process, so the second time, it  
doesn't ever finish shutting down.

However, even though it'd be possible to fix, perhaps it is better to  
simply throw an exception on the second reactor.run(), since most  
people who do that shouldn't actually be running the reactor twice,  
they just didn't know the better thing to do yet.

James



From ppergame at gmail.com  Thu Sep  7 13:17:06 2006
From: ppergame at gmail.com (Pavel Pergamenshchik)
Date: Thu, 7 Sep 2006 12:17:06 -0700
Subject: [Twisted-Python] LineReceiver and setRawMode()
In-Reply-To: <20060907193419.8p4pjrbfkgoocgs8@itchy.wasabout.net>
References: <2389d4730609071001yd35dc47l4c9231cebe61b00f@mail.gmail.com>
	<20060907193419.8p4pjrbfkgoocgs8@itchy.wasabout.net>
Message-ID: <4a5c1b500609071217v5b919aabw56e59d9efe5f4a52@mail.gmail.com>

On 9/7/06, Thomas HERVE <therve at free.fr> wrote:
>
> Quoting jarrod roberson <jarrod at vertigrated.com>:
>
> > I got a simple line protocol I am trying to implement, blocks .
> >
> > [snip]
> >
> > inside rawDataReceived(data)
> > data = abcdeCMD 10\r\n
> >
> > is there something in twisted that will help with this?
> > or do I need to subclass LineReceiver and add a
> > setRawMode(bytesToRead) or something?
>
> What I've done in this case is something like this:
>
> def rawDataReceived(self, data):
>     self.buffer += data
>     if len(self.buffer) >= self.lenExpected:
>         buf = self.buffer[:self.lenExpected]
>         rem = self.buffer[self.lenExpected:]
>         doSometingWithBuff(buf)
>         self.buffer = ""
>         self.setLineMode()
>         if rem:
>             self.dataReceived(rem)
>
> You need to set the variable self.lenExpected. You read the data and
> when you can all what you needed, you push it back again with
> dataReceived.


setLineMode happens to take an optional argument for the remainder. You
should use that instead of calling dataReceived directly.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060907/33dd05fa/attachment.html>

From glyph at divmod.com  Thu Sep  7 13:32:41 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 7 Sep 2006 15:32:41 -0400
Subject: [Python-Dev] [Twisted-Python] Newbie question
In-Reply-To: <BC69EF55-B9A1-4A81-8200-74DE0C0079E0@fuhm.net>
Message-ID: <20060907193241.1717.1098190683.divmod.quotient.42115@ohm>

On Thu, 7 Sep 2006 15:01:08 -0400, James Y Knight <foom at fuhm.net> wrote:

>However, even though it'd be possible to fix, perhaps it is better to 
>simply throw an exception on the second reactor.run(), since most  people 
>who do that shouldn't actually be running the reactor twice,  they just 
>didn't know the better thing to do yet.

I think that's a good idea.  Based on the nature of the questions that I've seen, I think that this would probably be a good idea even if we *did* have a restartable reactor.  Add an interface, IRestartableReactor, and require people who want to use it to call 'reactor.restart()'.  While this might not actually *do* anything, the conspicuous absence of it from any example code and a potentially useful error message from reactor.run would prevent the question from being asked repeatedly...



From TimothyFitz at gmail.com  Thu Sep  7 13:55:09 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Thu, 7 Sep 2006 15:55:09 -0400
Subject: [Python-Dev] [Twisted-Python] Newbie question
In-Reply-To: <20060907193241.1717.1098190683.divmod.quotient.42115@ohm>
References: <BC69EF55-B9A1-4A81-8200-74DE0C0079E0@fuhm.net>
	<20060907193241.1717.1098190683.divmod.quotient.42115@ohm>
Message-ID: <972ec5bd0609071255m33163df9t13dcaefc3027f61a@mail.gmail.com>

On 9/7/06, glyph at divmod.com <glyph at divmod.com> wrote:
> On Thu, 7 Sep 2006 15:01:08 -0400, James Y Knight <foom at fuhm.net> wrote:
>
> >However, even though it'd be possible to fix, perhaps it is better to
> >simply throw an exception on the second reactor.run(), since most  people
> >who do that shouldn't actually be running the reactor twice,  they just
> >didn't know the better thing to do yet.
>
> I think that's a good idea.  Based on the nature of the questions that I've seen, I think that this would probably be a good idea even if we *did* have a restartable reactor.  Add an interface, IRestartableReactor, and require people who want to use it to call 'reactor.restart()'.  While this might not actually *do* anything, the conspicuous absence of it from any example code and a potentially useful error message from reactor.run would prevent the question from being asked repeatedly...

I've added this to the tracker
[http://twistedmatrix.com/trac/ticket/2066], further discussion should
probably be taken there.



From l.allegrucci at gmail.com  Thu Sep  7 14:39:05 2006
From: l.allegrucci at gmail.com (Lorenzo Allegrucci)
Date: Thu, 07 Sep 2006 22:39:05 +0200
Subject: [Twisted-Python] twistd and passphrase
In-Reply-To: <200609051318.49688.mike@mkp.ca>
References: <1157473316.5101.7.camel@odyssey.lan>
	<200609051318.49688.mike@mkp.ca>
Message-ID: <1157661545.4683.65.camel@odyssey.lan>

On Tue, 2006-09-05 at 13:18 -0400, Mike Pelletier wrote: 
> On Tuesday 05 September 2006 12:21, Lorenzo Allegrucci wrote:
> > Hi,
> >
> > I'm using twistd to run my server as a daemon but I couldn't find a way
> > to prompt the user for a passphrase (such passphrase is used by the
> > server to read its SSL key).  I tried getpass() but it doesn't work
> > because /dev/stdin is already redirected to /dev/null.  How can I ask
> > for a passphrase using twistd?
> > Thank you
> 
> Hi, Lorenzo.  I'm going to assume you are completely new to Twisted.

Yes, I'm new to Twisted and I'm using it for a project of my degree
thesis :)
Your explanations have been very helpful and gave me some ideas, in the
meantime I post my actual code.  (non important parts taken away)

---myserver.py---
class SCF(ssl.ContextFactory):
    """Server context factory."""
    def __init__(self, passphraseCB, cacert, cert, key):
        self.passphraseCB = passphraseCB
        self.cacert = cacert
        self.cert = cert
        self.key = key  
        
    def verify(self, conn, cert, errnum, depth, ok):
        """Check the certificate of an incoming connection."""
        # snip...
        return ok
    
    def getContext(self):
        """Return an SSL context."""
        context = SSL.Context(SSL.TLSv1_METHOD)
        context.set_passwd_cb(self.passphraseCB)
        # snip...
        return context

class MyService(internet.SSLServer):
    def __init__(self):
        root = XMLRPCServer()
        
        key = config.getOption("SSL", "key")
        cert = config.getOption("SSL", "cert")
        cacert = config.getOption("SSL", "cacert") 
        port = config.getOption("daemon", "port")
        host = config.getOption("daemon", "host")
        
        context = SCF(self.getPassphraseCB, cacert, cert, key)
        internet.SSLServer.__init__(self, port, server.Site(root),
context,
                                     interface=host)
    
    def getPassphraseCB(self, repeat=False, *data):
        return "secret"

application = service.Application("MyApp")
myService = MyService()
myService.setServiceParent(application)
---myserver.py--


To start my daemon I use 'twistd -y myserver.py' and everything works
fine except for the fact that I have to "hardwire" the passphrase in
'getPassphraseCB'.
Of course this in not what I want and I would like to rewrite
getPassphraseCB as:

   def getPassphraseCB(self, repeat=False, *data):
        return self.passphrase

where self.passphrase should be set (somehow) _before_ twistd makes my
application a daemon, but I couldn't find a way to do it yet.

> You are never going to be able to read a password from stdin if twisted is 
> starting up in daemon mode.  As you noticed, in daemon mode stdin has been 
> closed before you have a chance to do anything with it.  You would instead 
> have to start it in "foreground" mode, then read the password with your 
> Protocol, and once the password has been validated ask twistd to switch to 
> daemon mode.

Exactly.

> (If indeed there even exists an interface for daemonizing after 
> the fact; I've never looked.)

Looking at the twistd.py source I would say no..





From exarkun at divmod.com  Thu Sep  7 15:40:02 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 7 Sep 2006 17:40:02 -0400
Subject: [Twisted-Python] twistd and passphrase
In-Reply-To: <1157661545.4683.65.camel@odyssey.lan>
Message-ID: <20060907214002.1717.1501014696.divmod.quotient.42192@ohm>

On Thu, 07 Sep 2006 22:39:05 +0200, Lorenzo Allegrucci <l.allegrucci at gmail.com> wrote:
>On Tue, 2006-09-05 at 13:18 -0400, Mike Pelletier wrote:
>> On Tuesday 05 September 2006 12:21, Lorenzo Allegrucci wrote:
>> > Hi,
>> >
>> > I'm using twistd to run my server as a daemon but I couldn't find a way
>> > to prompt the user for a passphrase (such passphrase is used by the
>> > server to read its SSL key).  I tried getpass() but it doesn't work
>> > because /dev/stdin is already redirected to /dev/null.  How can I ask
>> > for a passphrase using twistd?
>> > Thank you
>>
>> Hi, Lorenzo.  I'm going to assume you are completely new to Twisted.
>
>Yes, I'm new to Twisted and I'm using it for a project of my degree
>thesis :)
>Your explanations have been very helpful and gave me some ideas, in the
>meantime I post my actual code.  (non important parts taken away)
>
>---myserver.py---
>class SCF(ssl.ContextFactory):
>    """Server context factory."""
>    def __init__(self, passphraseCB, cacert, cert, key):
>        self.passphraseCB = passphraseCB
>        self.cacert = cacert
>        self.cert = cert
>        self.key = key
>
>    def verify(self, conn, cert, errnum, depth, ok):
>        """Check the certificate of an incoming connection."""
>        # snip...
>        return ok
>
>    def getContext(self):
>        """Return an SSL context."""
>        context = SSL.Context(SSL.TLSv1_METHOD)
>        context.set_passwd_cb(self.passphraseCB)
>        # snip...
>        return context
>
>class MyService(internet.SSLServer):
>    def __init__(self):
>        root = XMLRPCServer()
>
>        key = config.getOption("SSL", "key")
>        cert = config.getOption("SSL", "cert")
>        cacert = config.getOption("SSL", "cacert")
>        port = config.getOption("daemon", "port")
>        host = config.getOption("daemon", "host")
>
>        context = SCF(self.getPassphraseCB, cacert, cert, key)
>        internet.SSLServer.__init__(self, port, server.Site(root),
>context,
>                                     interface=host)
>
>    def getPassphraseCB(self, repeat=False, *data):
>        return "secret"

    def getPassphraseCB(self, repeat=False, *data):
        return passphrase

import getpass
passphrase = getpass.getpass()

>
>application = service.Application("MyApp")
>myService = MyService()
>myService.setServiceParent(application)
>---myserver.py--
>
>
>To start my daemon I use 'twistd -y myserver.py' and everything works
>fine except for the fact that I have to "hardwire" the passphrase in
>'getPassphraseCB'.
>Of course this in not what I want and I would like to rewrite
>getPassphraseCB as:
>
>   def getPassphraseCB(self, repeat=False, *data):
>        return self.passphrase
>
>where self.passphrase should be set (somehow) _before_ twistd makes my
>application a daemon, but I couldn't find a way to do it yet.
>
>> You are never going to be able to read a password from stdin if twisted is
>> starting up in daemon mode.  As you noticed, in daemon mode stdin has been
>> closed before you have a chance to do anything with it.  You would instead
>> have to start it in "foreground" mode, then read the password with your
>> Protocol, and once the password has been validated ask twistd to switch to
>> daemon mode.
>
>Exactly.
>
>> (If indeed there even exists an interface for daemonizing after
>> the fact; I've never looked.)
>
>Looking at the twistd.py source I would say no..
>

Jean-Paul



From manlio_perillo at libero.it  Thu Sep  7 16:07:31 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 08 Sep 2006 00:07:31 +0200
Subject: [Twisted-Python] twistd and passphrase
In-Reply-To: <1157661545.4683.65.camel@odyssey.lan>
References: <1157473316.5101.7.camel@odyssey.lan>	<200609051318.49688.mike@mkp.ca>
	<1157661545.4683.65.camel@odyssey.lan>
Message-ID: <45009823.4010109@libero.it>

Lorenzo Allegrucci ha scritto:
> [...]
> 
> To start my daemon I use 'twistd -y myserver.py' and everything works
> fine except for the fact that I have to "hardwire" the passphrase in
> 'getPassphraseCB'.
> Of course this in not what I want and I would like to rewrite
> getPassphraseCB as:
> 
>    def getPassphraseCB(self, repeat=False, *data):
>         return self.passphrase
> 
> where self.passphrase should be set (somehow) _before_ twistd makes my
> application a daemon, but I couldn't find a way to do it yet.
> 


Just use twisted.python.util.getPassword(forceTTY=True).
However (I ignore why) in this way no prompt is written on the screen.

Note that getPassword does not return a deferred, so you should not call
it when the reactor is running (not sure about this).



Regards  Manlio Perillo



From speedy at nitroforce.eu  Mon Sep  4 13:57:36 2006
From: speedy at nitroforce.eu (Nick Rehm)
Date: Mon, 04 Sep 2006 21:57:36 +0200
Subject: [Twisted-Python] how to access irc.IRCClient.* from other classes
Message-ID: <1157399856.520.11.camel@speeda.tinyworlds.net>

Hello,
iam playing around with twisted.words.irc and come upon this what i dont
understand right now

Here is a small example.

everything is working fine except the msg that should be send to the
channel.

from twisted.internet import protocol, reactor
from twisted.words.protocols import irc

class somestuff:

 def test(self):
    self.test = mainirc()
    self.test.test("#someircchannel","hi")
    #what i want to access here is 
    #irc.IRCClient.msg

class mainirc(irc.IRCClient):

  nickname = "twistedtest"

  def test(self,channel,msg):
     print channel
     print msg
     hold = channel
     hold2 = msg
     self.msg(hold,hold2)

  def connectionMade(self):
     irc.IRCClient.connectionMade(self)
     self.bot = somestuff()

  def joined(self,channel):
     print "joined"
     self.bot.test()

  def signedOn(self):
    self.join("#someircchannel")

class mainircFactory(protocol.ClientFactory):

  protocol = mainirc

  def clientConnectionLost(self,connector,reason):
    connector.connect()

  def clientConnectFailed(self,connector,reason):
    reactor.stop()

if __name__ == '__main__':
   f = mainircFactory()
   reactor.connectTCP("irc.someircserver.org",6667,f)
   reactor.run()



speeda at speeda:~$ python twistedirc.py
joined
#someircchannel
hi
Traceback (most recent call last):
  File "/usr/lib/python2.4/site-packages/twisted/internet/tcp.py", line
348, in doRead
    return self.protocol.dataReceived(data)
  File
"/usr/lib/python2.4/site-packages/twisted/words/protocols/irc.py", line
1478, in dataReceived
    basic.LineReceiver.dataReceived(self, data.replace('\r', ''))
  File "/usr/lib/python2.4/site-packages/twisted/protocols/basic.py",
line 232, in dataReceived
    why = self.lineReceived(line)
  File
"/usr/lib/python2.4/site-packages/twisted/words/protocols/irc.py", line
1486, in lineReceived
    self.handleCommand(command, prefix, params)
--- <exception caught here> ---
  File
"/usr/lib/python2.4/site-packages/twisted/words/protocols/irc.py", line
1498, in handleCommand
    method(prefix, params)
  File
"/usr/lib/python2.4/site-packages/twisted/words/protocols/irc.py", line
1000, in irc_JOIN
    self.joined(channel)
  File "twistedirc.py", line 27, in joined
    self.bot.test()
  File "twistedirc.py", line 8, in test
    self.test.test("#tinyworlds","hi")
  File "twistedirc.py", line 19, in test
    self.msg(hold,hold2)
  File
"/usr/lib/python2.4/site-packages/twisted/words/protocols/irc.py", line
879, in msg
    self.sendLine(fmt % (message,))
  File
"/usr/lib/python2.4/site-packages/twisted/words/protocols/irc.py", line
572, in sendLine
    self._reallySendLine(line)
  File
"/usr/lib/python2.4/site-packages/twisted/words/protocols/irc.py", line
568, in _reallySendLine
    return basic.LineReceiver.sendLine(self, lowQuote(line) + '\r')
  File "/usr/lib/python2.4/site-packages/twisted/protocols/basic.py",
line 277, in sendLine
    return self.transport.write(line + self.delimiter)
exceptions.AttributeError: 'NoneType' object has no attribute 'write'

i hope someone can help me thanks in advance
Nick Rehm




From jml at mumak.net  Thu Sep  7 22:49:42 2006
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 8 Sep 2006 14:49:42 +1000
Subject: [Twisted-Python] how to access irc.IRCClient.* from other classes
In-Reply-To: <1157399856.520.11.camel@speeda.tinyworlds.net>
References: <1157399856.520.11.camel@speeda.tinyworlds.net>
Message-ID: <d06a5cd30609072149m7ecd6416j4fa0d68533123466@mail.gmail.com>

On 9/5/06, Nick Rehm <speedy at nitroforce.eu> wrote:
> Hello,
> iam playing around with twisted.words.irc and come upon this what i dont
> understand right now
>

You have to pass a reference to 'mainirc' to either 'somestuff' or 'test'. e.g.

class somestuff:
    def __init__(self, ircClient):
        self.ircClient = ircClient
    def test(self):
        self.ircClient.msg('foo')

class mainirc(irc.IRCClient):
...
    def connectionMade(self):
        irc.IRCClient.connectionMade(self)
        self.bot = somestuff(self)


Constructing a new instance of 'mainirc' won't work, because the new
instance won't be associated with a connection.

hope this helps,
jml



From mli at deform.com  Fri Sep  8 12:59:01 2006
From: mli at deform.com (Michael Li)
Date: Fri, 08 Sep 2006 14:59:01 -0400
Subject: [Twisted-Python] how to scp with twisted?
In-Reply-To: <44FC8DF5.60706@imperial.ac.uk>
References: <20060904121017.14088.qmail@web50910.mail.yahoo.com>
	<44FC8DF5.60706@imperial.ac.uk>
Message-ID: <4501BD75.6010500@deform.com>

Hi, Phil
I've looked at your code, it's very helpful.
I am not familiar with Twisted,
is it possible for you to show some code of
local -> remote and directory listings ?

I am very interested in directory listings, specially
in a Windows<->linux environment. I want to have something
like FileZilla, but I can program. More specific, the actual
location of files is on linux harddisk, the harddisk is
shared to Windows by Samba, from Windows, I want to know
the local path on linux. For example, X:\a_file.txt on Windows,
I want to get local path on linux, something like /home/a_file.txt.

Thank you very much in advance.

Best regards.
Michael Li


Phil Mayers wrote:
> f rom wrote:
> 
>> hi, can you point me to a sample or whatever on how to
>> implement "scp" secure file copy with twisted for
>> python on windows ?
> 
> 
> The very first hit for "twisted scp" on Google is a post containing code 
> I wrote which does a simple copy remote -> local
> 
> http://twistedmatrix.com/pipermail/twisted-python/2005-December/012180.html
> 
> The scp "application" is basically:
> 
>  1. ssh in
>  2. authenticate
>  3. open a channel
>  4. run the "scp" app on the channel
>  5. communicate using the rcp protocol to "scp" stdin/stdout via the SSH 
> channel
> 
> The rcp protocol is undocumented as far as I can tell, and I had to read 
> the openssh and putty source codes to get even that far, but if you have 
> a dig then implementing the other bits e.g. local -> remote, directory 
> listings (for recursive copies) and so on should not be that hard.
> 
> HTH
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

==========
This email message and any attachments are for the sole use of the intended recipients and may contain proprietary and/or confidential information which may be privileged or otherwise protected from disclosure. Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipients, please contact the sender by reply email and destroy the original message and any copies of the message as well as any attachments to the original message.




From l.allegrucci at gmail.com  Sat Sep  9 13:18:51 2006
From: l.allegrucci at gmail.com (Lorenzo Allegrucci)
Date: Sat, 09 Sep 2006 21:18:51 +0200
Subject: [Twisted-Python] twistd and passphrase
In-Reply-To: <20060907214002.1717.1501014696.divmod.quotient.42192@ohm>
References: <20060907214002.1717.1501014696.divmod.quotient.42192@ohm>
Message-ID: <1157829532.5106.5.camel@odyssey.lan>

On Thu, 2006-09-07 at 17:40 -0400, Jean-Paul Calderone wrote:
> >class MyService(internet.SSLServer):
> >    def __init__(self):
> >        root = XMLRPCServer()
> >
> >        key = config.getOption("SSL", "key")
> >        cert = config.getOption("SSL", "cert")
> >        cacert = config.getOption("SSL", "cacert")
> >        port = config.getOption("daemon", "port")
> >        host = config.getOption("daemon", "host")
> >
> >        context = SCF(self.getPassphraseCB, cacert, cert, key)
> >        internet.SSLServer.__init__(self, port, server.Site(root),
> >context,
> >                                     interface=host)
> >
> >    def getPassphraseCB(self, repeat=False, *data):
> >        return "secret"
> 
>     def getPassphraseCB(self, repeat=False, *data):
>         return passphrase
> 
> import getpass
> passphrase = getpass.getpass()

It works, thanks for your hint.





From exarkun at twistedmatrix.com  Sat Sep  9 23:05:02 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 10 Sep 2006 05:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1157864702.42.1043708460@twistedmatrix.com

Bug summary
______________________
Summary for 2006-09-03 through 2006-09-10
Bugs opened: 12    Bugs closed: 16  Total open bugs: 718 (-4)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       -3  |Highest:  -8          |Conch:     -1          
|Enhancement:  -2  |Normal:   +4          |Core:      -1          
|Task:         +1                         |Mail:      -2          
                                          |Pb:        -1          
                                          |Pydoctor:  +1          
                                          |Web:       +2          
                                          |Web2:      -2          
                                          |Website:   +1          
                                          |Words:     -1          


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2063] String exceptions are being raised in Twisted (opened by jerub)
    defect          core       http://twistedmatrix.com/trac/ticket/2063

[#2064] In twisted.application.internet 'new.classobj()' is used where 'type()' could be used. (opened by jerub)
    defect          core       http://twistedmatrix.com/trac/ticket/2064

[#2065] windows buildbot errors,  already imported failures (opened by scmikes)
    defect          core       http://twistedmatrix.com/trac/ticket/2065

                    ===== Normal =====
[#2058] Can't pass unicode URL to xmlrpc.Proxy (opened by yang) (CLOSED, duplicate)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2058

[#2059] Can't pass unicode URL to xmlrpc.Proxy (opened by yang)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2059

[#2060] Generic IAddress connect and listen methods. (opened by rwall)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2060

[#2061] _sslverify.py: Wrong use of param caCerts in OpenSSLCertificateOptions (opened by dq)
    defect          core       http://twistedmatrix.com/trac/ticket/2061

[#2062] Handle multiple-line headers in web/http.py (opened by kkinder)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2062

[#2066] Restarting a reactor should raise an exception (opened by TimothyFitz)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2066

[#2067] string formatting bug in "twisted.python.reflect.funcinfo" (opened by james.townson)
    defect          core       http://twistedmatrix.com/trac/ticket/2067

[#2068] tm.com's documentation should include links to svn (opened by jerub)
    task            website    http://twistedmatrix.com/trac/ticket/2068

[#2069] Make nevowwriter the default (opened by jml)
    enhancement     pydoctor   http://twistedmatrix.com/trac/ticket/2069



Closed Bugs
______________________
                    ===== Highest =====
[#2044] twisted.test.test_logfile.testNoPermission failing will break buildbot (opened by jerub, closed by stephen, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2044

[#1617] Move 'notes to self' documentation aimed at developers *only* into a separate workspace. (opened by hypatia, closed by exarkun, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1617

[#1046] xmlstream patch to get ready for TLS and SASL authenticators (opened by tofu, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/1046

[#2057] twisted.conch.test.test_ssh.UtilityTestCase.testCounter relies on deprecated wrapping behavior of struct module (opened by exarkun, closed by exarkun, fixed)
    defect          conch      http://twistedmatrix.com/trac/ticket/2057

[#2045] spelling error in _sslverify.OpenSSLCertificateOptions.__getstate__() (opened by dq, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2045

[#2051] test_imap uses deprecated Deferred.setTimeout (opened by exarkun, closed by exarkun, fixed)
    enhancement     mail       http://twistedmatrix.com/trac/ticket/2051

[#2055] twisted.test.test_ssl.SpammyTLSTestCase exercises codepaths with warnings without suppressing them (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2055

[#2056] twisted.test.test_internet.ReactorCoreTestCase defines a timeout method which conflicts with trial's timeout attribute (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2056

[#2022] ConnectionRefusedError's errno and strerror surprising on BSD/OSX (opened by dalke, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2022

[#2052] test_defer calls reactor.run() (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2052

[#1552] SMTP server doesn't support "AUTH <mechanism> <initial data>" for of authentication (opened by exarkun, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/1552

                    ===== Normal =====
[#2048] In twisted.web2 the fileupload.parseMultipartFormData function has an unoverideable keyword argument (opened by fade, closed by jerub, duplicate)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2048

[#2049] web2/fileupload.py parseMultipartFormData has unoverideable default keyword arguments (opened by fade, closed by jerub, duplicate)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2049

[#2058] Can't pass unicode URL to xmlrpc.Proxy (opened by yang, closed by yang, duplicate)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2058

[#2043] defgen would be better without waitForDeferred (opened by ghazel, closed by radix, wontfix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2043

[#133 ] Allow registration of adapters for PB serialization (opened by itamarst, closed by warner, fixed)
    enhancement     pb         http://twistedmatrix.com/trac/ticket/133





From glyph at divmod.com  Sun Sep 10 18:29:02 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 10 Sep 2006 20:29:02 -0400
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
In-Reply-To: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
Message-ID: <20060911002902.1717.209455672.divmod.quotient.45439@ohm>

On Thu, 7 Sep 2006 10:39:27 -0400, Timothy Fitz <timothyfitz at gmail.com> wrote:
>Let me prefix this by the fact that I am in college and very very poor
>at the moment. I have scrapped spare parts together to create a very
>decent machine (Athlon 64 3000+), it's completely built but I could
>not find anyone with spare ram.

I'd appreciate it if someone could find some RAM for Timothy.  The current IOCP buildbot is offline and likely to remain so for the forseeable future.  Even if we manage to get it back online it is still an ancient, slow machine.

Very few Twisted users, and even fewer developers, understand the IOCP code or run its tests on a regular basis, so the longer we go without a buildbot, the more likely it is that something will be fundamentally broken.



From dreid at dreid.org  Sun Sep 10 21:25:46 2006
From: dreid at dreid.org (David Reid)
Date: Sun, 10 Sep 2006 20:25:46 -0700
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
In-Reply-To: <20060911002902.1717.209455672.divmod.quotient.45439@ohm>
References: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
	<20060911002902.1717.209455672.divmod.quotient.45439@ohm>
Message-ID: <20060911032546.GA2558@dreid.org>

On Sun, Sep 10, 2006 at 08:29:02PM -0400, glyph at divmod.com wrote:
> On Thu, 7 Sep 2006 10:39:27 -0400, Timothy Fitz <timothyfitz at gmail.com> 
> wrote:
> >Let me prefix this by the fact that I am in college and very very poor
> >at the moment. I have scrapped spare parts together to create a very
> >decent machine (Athlon 64 3000+), it's completely built but I could
> >not find anyone with spare ram.

Email me some paypal information and I'll send you $50 it's not a lot
but it's all I can afford right now.  Hopefully some other people will
step up and help out too.

-David

-- 
"Usually the protocol is this: I appoint someone for a task,
which they are not qualified to do.  Then, they have to fight
a bear if they don't want to do it." -- Glyph Lefkowitz



From manlio_perillo at libero.it  Mon Sep 11 02:03:06 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 11 Sep 2006 10:03:06 +0200
Subject: [Twisted-Python] sshsimpleserver.py on Windows
Message-ID: <4505183A.3010100@libero.it>

I have tried to run the conch example sshsimpleserver on Windows, using
Putty as the client.

All works fine, but I can't see the echo data from the server in Putty.
Is this a client's problem?



Thanks  Manlio Perillo



From drakesmith at adelphia.net  Mon Sep 11 04:57:51 2006
From: drakesmith at adelphia.net (Drake Smith)
Date: Mon, 11 Sep 2006 06:57:51 -0400
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
In-Reply-To: <20060911032546.GA2558@dreid.org>
References: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
	<20060911002902.1717.209455672.divmod.quotient.45439@ohm>
	<20060911032546.GA2558@dreid.org>
Message-ID: <7.0.1.0.2.20060911065215.02b18550@adelphia.net>

At 11:25 PM 9/10/2006, you wrote:
>On Sun, Sep 10, 2006 at 08:29:02PM -0400, glyph at divmod.com wrote:
> > On Thu, 7 Sep 2006 10:39:27 -0400, Timothy Fitz <timothyfitz at gmail.com>
> > wrote:
> > >Let me prefix this by the fact that I am in college and very very poor
> > >at the moment. I have scrapped spare parts together to create a very
> > >decent machine (Athlon 64 3000+), it's completely built but I could
> > >not find anyone with spare ram.
>
>Email me some paypal information and I'll send you $50 it's not a lot
>but it's all I can afford right now.  Hopefully some other people will
>step up and help out too.
>
>-David
>
>--
>"Usually the protocol is this: I appoint someone for a task,
>which they are not qualified to do.  Then, they have to fight
>a bear if they don't want to do it." -- Glyph Lefkowitz

I will gladly send $50 as well. Please e-mail me PayPal information 
or a postal address.

--Drake




From exarkun at divmod.com  Mon Sep 11 06:12:37 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 11 Sep 2006 08:12:37 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18086 - Import minidom
 within a try/except to
 cause this not to break platforms without minidom.
In-Reply-To: <E1GMiOa-0002aE-00@wolfwood>
Message-ID: <20060911121237.1717.1445881463.divmod.quotient.45923@ohm>

On Mon, 11 Sep 2006 03:48:04 -0600, Stephen Thorne <stephen at wolfwood.twistedmatrix.com> wrote:
>Author: stephen
>Date: Mon Sep 11 03:48:03 2006
>New Revision: 18086
>
>Modified:
>   trunk/twisted/python/versions.py
>Log:
>Import minidom within a try/except to cause this not to break platforms without minidom.
>
>Author: Stephen Thorne
>Reviewer: jml
>Fixes: #2076
>

Tests?

Jean-Paul



From exarkun at divmod.com  Mon Sep 11 06:27:20 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 11 Sep 2006 08:27:20 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18086 - Import minidom
	within a try/except to
	cause this not to break platforms without minidom.
In-Reply-To: <20060911121237.1717.1445881463.divmod.quotient.45923@ohm>
Message-ID: <20060911122720.1717.1567239911.divmod.quotient.45936@ohm>

On Mon, 11 Sep 2006 08:12:37 -0400, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>On Mon, 11 Sep 2006 03:48:04 -0600, Stephen Thorne 
><stephen at wolfwood.twistedmatrix.com> wrote:
>>Author: stephen
>>Date: Mon Sep 11 03:48:03 2006
>>New Revision: 18086
>>
>>Modified:
>>   trunk/twisted/python/versions.py
>>Log:
>>Import minidom within a try/except to cause this not to break platforms 
>>without minidom.
>>
>>Author: Stephen Thorne
>>Reviewer: jml
>>Fixes: #2076
>
>Tests?

Also, this doesn't fix the PyPy buildslave problem that it claims to fix.

>
>Jean-Paul
>



From markus at bluegap.ch  Mon Sep 11 06:35:44 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Mon, 11 Sep 2006 14:35:44 +0200
Subject: [Twisted-Python] HTTP 302 instead of just delivering the content.
Message-ID: <45055820.6030505@bluegap.ch>

Hi,

I'm using twisted-web on port 8083 and apache as a reverse proxy on port 
80. I can connect to my domain on port 80 and the HTTP request gets 
forwarded to twisted correctly. Twisted also replies and I get the website.

But as soon as I click a link, the 8083 port appears in the URL. And 
according to tcpdump, it also got transfered via 8083. I figured Twisted 
replied with the following (my real domain replaced by some 'x'):

HTTP/1.1 302 Found
Date: Mon, 11 Sep 2006 12:22:57 GMT
Server: TwistedWeb/2.4.0+r17646
Content-type: text/html; charset=UTF-8
Location: http://www.xxxxxxxx.ch:8083/firma/
Transfer-Encoding: chunked

Why does it do that? The request sent was:

GET /firma HTTP/1.1
Host: www.xxxxxxxxx.ch
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.6) 
Gecko/20060728 Firefox/1.5.0.6 (Debian-1.5.dfsg+1.5.0.6-4)
....

The apache2 reverse proxy configuration part is:

RewriteRule ^(.*)$ http://localhost:8083$1 [P]

ProxyRequests Off
ProxyPreserveHost On

ProxyVia Off

<Proxy *>
	Order deny,allow
	Allow from all
</Proxy>


How can I tell twisted to not only accept requests on port 8083, but 
also serve those with Host: www.xxxxxxxxx.ch?

Regards

Markus



From TimothyFitz at gmail.com  Mon Sep 11 08:52:10 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Mon, 11 Sep 2006 10:52:10 -0400
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
In-Reply-To: <7.0.1.0.2.20060911065215.02b18550@adelphia.net>
References: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
	<20060911002902.1717.209455672.divmod.quotient.45439@ohm>
	<20060911032546.GA2558@dreid.org>
	<7.0.1.0.2.20060911065215.02b18550@adelphia.net>
Message-ID: <972ec5bd0609110752q4d42eaf6t8edbb2ea49647b70@mail.gmail.com>

Thank you, both of you! My paypal address is FireMoth at gmail.com (my
IRC nickname for those of you who know better than to step foot into
#twisted). Thanks to your contributions, the buildbot will have more
ram than my desktop (:



From sbernste at mitre.org  Mon Sep 11 09:11:58 2006
From: sbernste at mitre.org (Stan Benrsteen)
Date: Mon, 11 Sep 2006 11:11:58 -0400
Subject: [Twisted-Python] Newbie question
Message-ID: <FC7C234E-3D6E-4514-85A5-8711619DBEC4@mitre.org>

Gentlemen:

Thanks for all your responses.  I think a restartable reactor is a  
great idea!

In the meantime, here is what I am really trying to do.  I have a  
server running a perspective broker, doing its select loop.  I need  
to access that server from a client that is not in a select loop.   
The client wants to treat the server as if it were an ordinary rpc --  
make the call and get the response synchronously, and go away.  Then  
later on it will come back later and call the server again.

Is it possible to use twisted servers with "ordinary" clients?

-- perplexed



From dialtone at divmod.com  Mon Sep 11 09:32:24 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon, 11 Sep 2006 17:32:24 +0200
Subject: [Twisted-Python] Newbie question
In-Reply-To: <FC7C234E-3D6E-4514-85A5-8711619DBEC4@mitre.org>
Message-ID: <20060911153224.1717.2054261812.divmod.quotient.46086@ohm>

On Mon, 11 Sep 2006 11:11:58 -0400, Stan Benrsteen <sbernste at mitre.org> wrote:

>Is it possible to use twisted servers with "ordinary" clients?

nope :).

You should really use twisted also on the client side, it can work with all the major GUI toolkits available without many problems.



From dan.heidebrecht at gmail.com  Mon Sep 11 09:57:42 2006
From: dan.heidebrecht at gmail.com (Dan Heidebrecht)
Date: Mon, 11 Sep 2006 11:57:42 -0400
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
In-Reply-To: <972ec5bd0609110752q4d42eaf6t8edbb2ea49647b70@mail.gmail.com>
References: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
	<20060911002902.1717.209455672.divmod.quotient.45439@ohm>
	<20060911032546.GA2558@dreid.org>
	<7.0.1.0.2.20060911065215.02b18550@adelphia.net>
	<972ec5bd0609110752q4d42eaf6t8edbb2ea49647b70@mail.gmail.com>
Message-ID: <ac6817db0609110857l68a63e98n8701a3658e93cdc9@mail.gmail.com>

Hi,

How much more do you need?

On 9/11/06, Timothy Fitz <TimothyFitz at gmail.com> wrote:
> Thank you, both of you! My paypal address is FireMoth at gmail.com (my
> IRC nickname for those of you who know better than to step foot into
> #twisted). Thanks to your contributions, the buildbot will have more
> ram than my desktop (:
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From TimothyFitz at gmail.com  Mon Sep 11 10:18:11 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Mon, 11 Sep 2006 12:18:11 -0400
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
In-Reply-To: <972ec5bd0609110915j727e4b01t1367836df27de808@mail.gmail.com>
References: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
	<20060911002902.1717.209455672.divmod.quotient.45439@ohm>
	<20060911032546.GA2558@dreid.org>
	<7.0.1.0.2.20060911065215.02b18550@adelphia.net>
	<972ec5bd0609110752q4d42eaf6t8edbb2ea49647b70@mail.gmail.com>
	<ac6817db0609110857l68a63e98n8701a3658e93cdc9@mail.gmail.com>
	<972ec5bd0609110915j727e4b01t1367836df27de808@mail.gmail.com>
Message-ID: <972ec5bd0609110918g1ee08e8r30a0610447c82d45@mail.gmail.com>

At the moment I'm looking at 2x512MB Crucial ram from Newegg, which is
going to be $115 shipped[1]. The box could seriously use a new case
(the current one is missing the front panel and both side doors, and
is from an eMachines K6-250) which will be about $30[2]. Another $50
could easily be put to good use. Additionally I could bump up to 2x1GB
for $210[3], which would require another $100 donation.


[1] http://www.newegg.com/Product/Product.asp?Item=N82E16820146577
[2] http://www.newegg.com/Product/Product.asp?Item=N82E16811212030
[3] http://www.newegg.com/Product/Product.asp?Item=N82E16820146970

On 9/11/06, Dan Heidebrecht <dan.heidebrecht at gmail.com> wrote:
> Hi,
>
> How much more do you need?
>
> On 9/11/06, Timothy Fitz <TimothyFitz at gmail.com> wrote:
> > Thank you, both of you! My paypal address is FireMoth at gmail.com (my
> > IRC nickname for those of you who know better than to step foot into
> > #twisted). Thanks to your contributions, the buildbot will have more
> > ram than my desktop (:
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>



From glyph at divmod.com  Mon Sep 11 10:23:13 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 11 Sep 2006 12:23:13 -0400
Subject: [Twisted-Python] Newbie question
In-Reply-To: <FC7C234E-3D6E-4514-85A5-8711619DBEC4@mitre.org>
Message-ID: <20060911162313.1717.36717167.divmod.quotient.46128@ohm>

On Mon, 11 Sep 2006 11:11:58 -0400, Stan Benrsteen <sbernste at mitre.org> wrote:

>Thanks for all your responses.  I think a restartable reactor is a  great 
>idea!

I look forward to your patches :)

>Is it possible to use twisted servers with "ordinary" clients?

Yes, in the sense that you can easily connect a "regular" client to a Twisted server.  No, in the sense that you want, which is to say you shouldn't use a blocking client within the Twisted main loop.  However, as dialtone said, it should be easy enough to write a non-blocking client; twisted's client support is just as good as its server support :)



From terry at jon.es  Mon Sep 11 10:42:27 2006
From: terry at jon.es (Terry Jones)
Date: Mon, 11 Sep 2006 18:42:27 +0200
Subject: [Twisted-Python] Windows Buildbot for DDR Ram
In-Reply-To: Your message at 12:18:11 on Monday, 11 September 2006
References: <972ec5bd0609070739m3c45c64ej43b69f426dbb68af@mail.gmail.com>
	<20060911002902.1717.209455672.divmod.quotient.45439@ohm>
	<20060911032546.GA2558@dreid.org>
	<7.0.1.0.2.20060911065215.02b18550@adelphia.net>
	<972ec5bd0609110752q4d42eaf6t8edbb2ea49647b70@mail.gmail.com>
	<ac6817db0609110857l68a63e98n8701a3658e93cdc9@mail.gmail.com>
	<972ec5bd0609110915j727e4b01t1367836df27de808@mail.gmail.com>
	<972ec5bd0609110918g1ee08e8r30a0610447c82d45@mail.gmail.com>
Message-ID: <17669.37363.893469.295889@terry-jones-computer.local>

Hi Timothy

| At the moment I'm looking at 2x512MB Crucial ram from Newegg, which is
| going to be $115 shipped[1]. The box could seriously use a new case (the
| current one is missing the front panel and both side doors, and is from an
| eMachines K6-250) which will be about $30[2]. Another $50 could easily be
| put to good use. Additionally I could bump up to 2x1GB for $210[3], which
| would require another $100 donation.

I'll happily put in $50. Send me mail to figure out the best way.

Regards,
Terry



From TimothyFitz at gmail.com  Mon Sep 11 11:33:40 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Mon, 11 Sep 2006 13:33:40 -0400
Subject: [Twisted-Python] Newbie question
In-Reply-To: <20060911162313.1717.36717167.divmod.quotient.46128@ohm>
References: <FC7C234E-3D6E-4514-85A5-8711619DBEC4@mitre.org>
	<20060911162313.1717.36717167.divmod.quotient.46128@ohm>
Message-ID: <972ec5bd0609111033q3d797a9cla3a5de2193725e60@mail.gmail.com>

On 9/11/06, glyph at divmod.com <glyph at divmod.com> wrote:
> However, as dialtone said, it should be easy enough to write a non-blocking client; twisted's client support is just as good as its server support :)

Of course, sometimes this isn't possible at all (you're embedded in a
closed source application, etc). The general answer is you need
twisted's loop running on another thread or in another process and you
need to make calls across this. A simple way is to spawn the reactor
in a separate thread (IIRC not all reactors are safe to run on a
thread other than the main one, check with someone more knowledgeable)
and use the threadsafe built-in queue to push requests across (you
just do a blocking pop on the "output" queue and you have the blocking
semantics you wish, but this part is optional). This isn't a common
use case for me, so there may be better or built-in ways of doing
this.

To summarize, Glyph and Dialtone are right, if you can rewrite you
definitely should, but if you can't there are ways around it.



From p.mayers at imperial.ac.uk  Mon Sep 11 12:56:35 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 11 Sep 2006 19:56:35 +0100
Subject: [Twisted-Python] HTTP 302 instead of just delivering the content.
In-Reply-To: <45055820.6030505@bluegap.ch>
References: <45055820.6030505@bluegap.ch>
Message-ID: <4505B163.900@imperial.ac.uk>

Markus Schiltknecht wrote:
> Hi,
> 
> I'm using twisted-web on port 8083 and apache as a reverse proxy on port 
> 80. I can connect to my domain on port 80 and the HTTP request gets 
> forwarded to twisted correctly. Twisted also replies and I get the website.
> 
> But as soon as I click a link, the 8083 port appears in the URL. And 
> according to tcpdump, it also got transfered via 8083. I figured Twisted 
> replied with the following (my real domain replaced by some 'x'):
> 
> HTTP/1.1 302 Found
> Date: Mon, 11 Sep 2006 12:22:57 GMT
> Server: TwistedWeb/2.4.0+r17646
> Content-type: text/html; charset=UTF-8
> Location: http://www.xxxxxxxx.ch:8083/firma/
> Transfer-Encoding: chunked
> 
> Why does it do that? The request sent was:
> 
> GET /firma HTTP/1.1
> Host: www.xxxxxxxxx.ch
> User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.6) 
> Gecko/20060728 Firefox/1.5.0.6 (Debian-1.5.dfsg+1.5.0.6-4)
> ....
> 
> The apache2 reverse proxy configuration part is:
> 
> RewriteRule ^(.*)$ http://localhost:8083$1 [P]
> 
> ProxyRequests Off
> ProxyPreserveHost On
> 
> ProxyVia Off
> 
> <Proxy *>
>     Order deny,allow
>     Allow from all
> </Proxy>
> 
> 
> How can I tell twisted to not only accept requests on port 8083, but 
> also serve those with Host: www.xxxxxxxxx.ch?

You need a vhostmonster

http://twistedmatrix.com/projects/web/documentation/howto/using-twistedweb.html#auto21



From p.mayers at imperial.ac.uk  Mon Sep 11 12:58:15 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 11 Sep 2006 19:58:15 +0100
Subject: [Twisted-Python] how to scp with twisted?
In-Reply-To: <4501BD75.6010500@deform.com>
References: <20060904121017.14088.qmail@web50910.mail.yahoo.com>
	<44FC8DF5.60706@imperial.ac.uk> <4501BD75.6010500@deform.com>
Message-ID: <4505B1C7.5060108@imperial.ac.uk>

Michael Li wrote:
> Hi, Phil
> I've looked at your code, it's very helpful.
> I am not familiar with Twisted,
> is it possible for you to show some code of
> local -> remote and directory listings ?

Sorry, I don't have any time to look at this at the moment





From ncesar at lunix.com.ar  Mon Sep 11 13:57:10 2006
From: ncesar at lunix.com.ar (Nicolas D. Cesar)
Date: Mon, 11 Sep 2006 16:57:10 -0300
Subject: [Twisted-Python] Support for ICMP ping?
Message-ID: <200609111657.11790.ncesar@lunix.com.ar>

I've been googling if there is any 'ICMP ping' support in Twisted. I've 
encounter ancient replies:

http://twistedmatrix.com/pipermail/twisted-python/2003-August/005542.html

I wonder if today is any ICMP support. I've tried to search the source 
tree[1], and doesn't seem.

My actual needs is creating a DeferredList with "ping-testers" for different 
IPs, just to check if there up or not. 

I know I can end up using twisted.internet.utils.getProcessOutput and calling 
ping, as I would normally do from command line. For other newbies as me in 
the same situation please read: 
http://twistedmatrix.com/users/moshez/talk.html and search 
for 'getProcessOutput' ;-)

Greetings,

[1] my search was:

--------------------------------------------------------------------
$ grep  -C3 -ir icmp *
internet/protocol.py-
internet/protocol.py-
internet/protocol.py-class AbstractDatagramProtocol:
internet/protocol.py:    """Abstract protocol for datagram-oriented 
transports, e.g. IP, ICMP, ARP, UDP."""
internet/protocol.py-
internet/protocol.py-    transport = None
internet/protocol.py-    numPorts = 0
--
internet/protocol.py-    def connectionRefused(self):
internet/protocol.py-        """Called due to error from write in connected 
mode.
internet/protocol.py-
internet/protocol.py:        Note this is a result of ICMP message generated 
by *previous*
internet/protocol.py-        write.
internet/protocol.py-        """
internet/protocol.py-
--------------------------------------------------------------------


--
Nicolás D. César <ncesar at lunix.com.ar>
Lunix S.R.L. -[ http://www.lunix.com.ar ]-
GnuPG Public Key: gpg --keyserver wwwkeys.pgp.net --recv-key 0x3606F3E6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20060911/44c9ae4e/attachment.sig>

From mcmillen at cs.cmu.edu  Mon Sep 11 14:10:32 2006
From: mcmillen at cs.cmu.edu (Colin McMillen)
Date: Mon, 11 Sep 2006 16:10:32 -0400
Subject: [Twisted-Python] Support for ICMP ping?
In-Reply-To: <200609111657.11790.ncesar@lunix.com.ar>
References: <200609111657.11790.ncesar@lunix.com.ar>
Message-ID: <20060911201032.GN4315@cs.cmu.edu>

FWIW, I wrote a Perl module called Net::Ping::External that used the
system 'ping' command to do ICMP ping on a variety of OSes.  'ping'
commands are remarkably different from platform to platform, in terms
of the arguments expected and the return values (IIRC win32 doesn't
return differently on success or failure so you actually need to parse
the output), so the purpose of N::P::E was to make a standard
cross-platform way of getting a useful result from the system ICMP
ping utilities.

The module supports Win32, Linux, BSD, Solaris (2.6 and 2.7 at least),
IRIX, and supposedly a bunch of other obscure systems (based on output
that I was given by a few of the Perl developers that had odd
platforms available.)

I've not look at or touched that code in years, but you might want to
look into it if you feel like writing a cross-platformish pinger for
Python.  (Google for Net::Ping::External and take any of the first 50
or so hits :))

- Colin

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 191 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20060911/f671cee9/attachment.sig>

From ncesar at lunix.com.ar  Mon Sep 11 14:24:48 2006
From: ncesar at lunix.com.ar (Nicolas D. Cesar)
Date: Mon, 11 Sep 2006 17:24:48 -0300
Subject: [Twisted-Python] Support for ICMP ping?
In-Reply-To: <20060911201032.GN4315@cs.cmu.edu>
References: <200609111657.11790.ncesar@lunix.com.ar>
	<20060911201032.GN4315@cs.cmu.edu>
Message-ID: <200609111724.51868.ncesar@lunix.com.ar>

El Lunes, 11 de Septiembre de 2006 17:10, Colin McMillen escribió:
> FWIW, I wrote a Perl module called Net::Ping::External that used the
> system 'ping' command to do ICMP ping on a variety of OSes.

Thanks Colin for your reply. I'm not a very good Perl speaker and I must do 
this in Python, so probably I'll see Net::Ping::External as a future 
reference.

Greetings
-- 
Nicolás D. César <ncesar at lunix.com.ar>
Lunix S.R.L. -[ http://www.lunix.com.ar ]-
GnuPG Public Key: gpg --keyserver wwwkeys.pgp.net --recv-key 0x3606F3E6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20060911/04ddf91d/attachment.sig>

From mcmillen at cs.cmu.edu  Mon Sep 11 14:32:38 2006
From: mcmillen at cs.cmu.edu (Colin McMillen)
Date: Mon, 11 Sep 2006 16:32:38 -0400
Subject: [Twisted-Python] Support for ICMP ping?
In-Reply-To: <200609111724.51868.ncesar@lunix.com.ar>
References: <200609111657.11790.ncesar@lunix.com.ar>
	<20060911201032.GN4315@cs.cmu.edu>
	<200609111724.51868.ncesar@lunix.com.ar>
Message-ID: <20060911203238.GB25556@cs.cmu.edu>

On Mon, Sep 11, 2006 at 05:24:48PM -0300, Nicolas D. Cesar wrote:
> El Lunes, 11 de Septiembre de 2006 17:10, Colin McMillen escribió:
> > FWIW, I wrote a Perl module called Net::Ping::External that used the
> > system 'ping' command to do ICMP ping on a variety of OSes.
> 
> Thanks Colin for your reply. I'm not a very good Perl speaker and I must do 
> this in Python, so probably I'll see Net::Ping::External as a future 
> reference.

That's mostly what I intended.  What I mean is, a bunch of people
already did the difficult work of reporting the arguments and outputs
to "ping" on their system, so reading the code should at least give
you an idea of how to write code that supports the systems you're
interested in supporting.  (Of course, most likely you only care about
one specific system, in which case you may as well make a throwaway
script with a shell command in it. :))

- Colin

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 191 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20060911/063771f1/attachment.sig>

From michael at miknet.net  Mon Sep 11 19:42:49 2006
From: michael at miknet.net (Michael Samuel)
Date: Tue, 12 Sep 2006 11:42:49 +1000
Subject: [Twisted-Python] Support for ICMP ping?
In-Reply-To: <200609111657.11790.ncesar@lunix.com.ar>
References: <200609111657.11790.ncesar@lunix.com.ar>
Message-ID: <1158025369.31866.14.camel@mikompaq.ipsystems.com.au>

On a similar note, I've been looking to implement OSPF in twisted (which
does multicast over IP protocol 89), and was wondering the best way to
bludgeon DatagramSocket into doing raw IP. (Preferably in a
cross-platform manner, but if it only works on Linux it'd suit my
purposes fine)  Any hints?

BTW, is there any interest in BGP around here?  I've implemented it as a
research project for work, and they've given me the go ahead to release
the source.

Oh, and to answer the original question... take a look at fping.  It's
output is designed to be parsed, and it scales really well.





From exarkun at divmod.com  Mon Sep 11 20:42:13 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 11 Sep 2006 22:42:13 -0400
Subject: [Twisted-Python] Support for ICMP ping?
In-Reply-To: <1158025369.31866.14.camel@mikompaq.ipsystems.com.au>
Message-ID: <20060912024213.1717.253566150.divmod.quotient.46616@ohm>

On Tue, 12 Sep 2006 11:42:49 +1000, Michael Samuel <michael at miknet.net> wrote:
>On a similar note, I've been looking to implement OSPF in twisted (which
>does multicast over IP protocol 89), and was wondering the best way to
>bludgeon DatagramSocket into doing raw IP. (Preferably in a
>cross-platform manner, but if it only works on Linux it'd suit my
>purposes fine)  Any hints?

You can't and shouldn't co-opt DatagramSocket for this.  Instead, add a new kind of transport, a raw socket.  This should be fairly straightforward and it would actually be a fairly useful addition to Twisted.

>
>BTW, is there any interest in BGP around here?  I've implemented it as a
>research project for work, and they've given me the go ahead to release
>the source.

It'd be neat.  I can't think of anything I'd personally be able to _do_
with it. :)

>
>Oh, and to answer the original question... take a look at fping.  It's
>output is designed to be parsed, and it scales really well.
>

I'll second this recommendation.  You need root privileges on most systems
to open an ICMPable socket anyway.  Running your whole process as root just
so you can ping some stuff is kind of unfortunate.

Jean-Paul



From markus at bluegap.ch  Tue Sep 12 02:41:16 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Tue, 12 Sep 2006 10:41:16 +0200
Subject: [Twisted-Python] HTTP 302 instead of just delivering the content.
In-Reply-To: <4505B163.900@imperial.ac.uk>
References: <45055820.6030505@bluegap.ch> <4505B163.900@imperial.ac.uk>
Message-ID: <450672AC.2040409@bluegap.ch>

Hi,

Phil Mayers wrote:
> You need a vhostmonster

Thank you, I didn't think about a vhostmonster, because I don't want to 
serve multiple vhosts. I only want to serve _one_ website. It gets 
accessed from different URLs, though.

As I'm using nevow, I think I have to use the nevow vhost thingie:

from nevow import appserver
from nevow import vhost

root = vhost.NameVirtualHost()

webroot = Website('sites')
webroot.putChild('xxxxxx.ch', root)
webroot.putChild('www.xxxxxx.ch', root)
site = appserver.NevowSite(webroot)
webserver = internet.TCPServer(8083, site)

application = service.Application('ulmann website')
webserver.setServiceParent(application)

But, that works as before: it still redirects to port 8083 instead of 
just ignoring the HTTP Host: Header field.

Can't I just tell twisted web to ignore that? Without VHostMonsters and 
stuff like that? IMHO twisted should not mind and just serve what it's 
told to serve on port 8083. And let apache do the reverse proxying.

Regards

Markus




From dreid at dreid.org  Tue Sep 12 08:25:29 2006
From: dreid at dreid.org (David Reid)
Date: Tue, 12 Sep 2006 07:25:29 -0700
Subject: [Twisted-Python] HTTP 302 instead of just delivering the content.
In-Reply-To: <450672AC.2040409@bluegap.ch>
References: <45055820.6030505@bluegap.ch> <4505B163.900@imperial.ac.uk>
	<450672AC.2040409@bluegap.ch>
Message-ID: <20060912142529.GA1271@dreid.org>

On Tue, Sep 12, 2006 at 10:41:16AM +0200, Markus Schiltknecht wrote:
> Hi,
> 
> Phil Mayers wrote:
> >You need a vhostmonster
> 
> Thank you, I didn't think about a vhostmonster, because I don't want to 
> serve multiple vhosts. I only want to serve _one_ website. It gets 
> accessed from different URLs, though.
> 
> As I'm using nevow, I think I have to use the nevow vhost thingie:
> 
> from nevow import appserver
> from nevow import vhost

Nevow has a VHostMonster.
 
> root = vhost.NameVirtualHost()
> 
> webroot = Website('sites')
> webroot.putChild('xxxxxx.ch', root)
> webroot.putChild('www.xxxxxx.ch', root)

What do you expect this to do?  

> site = appserver.NevowSite(webroot)
> webserver = internet.TCPServer(8083, site)
> 
> application = service.Application('ulmann website')
> webserver.setServiceParent(application)

See:
http://twistedmatrix.com/projects/web/documentation/howto/using-twistedweb.html#auto21
The usage is exactly the same for Nevow's VHostMonster.
 
> But, that works as before: it still redirects to port 8083 instead of 
> just ignoring the HTTP Host: Header field.
> 
> Can't I just tell twisted web to ignore that? Without VHostMonsters and 
> stuff like that? IMHO twisted should not mind and just serve what it's 
> told to serve on port 8083. And let apache do the reverse proxying.

It's an issue of URL generation from the request object.  There is no
good way to make the right thing just magically happen.  Because as
usual your right thing will be different from someone elses.
VHostMonster is an atrocity though, someone should seriously consider
backporting the *VHostURIRewrite resources in twisted.web2.vhost.

I'll go get the bear.

-David

-- 
"Usually the protocol is this: I appoint someone for a task,
which they are not qualified to do.  Then, they have to fight
a bear if they don't want to do it." -- Glyph Lefkowitz



From markus at bluegap.ch  Tue Sep 12 08:51:46 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Tue, 12 Sep 2006 16:51:46 +0200
Subject: [Twisted-Python] HTTP 302 instead of just delivering the content.
In-Reply-To: <20060912142529.GA1271@dreid.org>
References: <45055820.6030505@bluegap.ch>
	<4505B163.900@imperial.ac.uk>	<450672AC.2040409@bluegap.ch>
	<20060912142529.GA1271@dreid.org>
Message-ID: <4506C982.1030505@bluegap.ch>

David Reid wrote:
> Nevow has a VHostMonster.

Yes. So?

>> webroot = Website('sites')
>> webroot.putChild('xxxxxx.ch', root)
>> webroot.putChild('www.xxxxxx.ch', root)
> 
> What do you expect this to do?

the same as root.addHost() in the twisted VHostMonster.

> See:
> http://twistedmatrix.com/projects/web/documentation/howto/using-twistedweb.html#auto21
> The usage is exactly the same for Nevow's VHostMonster.

Hm.. I've tried that but didn't manage to get twisted to correctly 
answer HTTP requests anymore. Thus I've been googling and figured out, 
that Nevow didn't work well with the VHostMonster and thus provides it's 
own.

Anyway, the code in the docu is:

root = vhost.NameVirtualHost()
root.addHost(vhostName, reverseProxy)
site = server.Site(root)
application = service.Application('web-proxy')
sc = service.IServiceCollection(application)
i = internet.TCPServer(80, site)
i.setServiceParent(sc)

Now, I don't have a reverseProxy, but a NevowSite(). Unfortunately 
that's a 'Site' and not a 'Resource' (whatever the exact difference is).

> It's an issue of URL generation from the request object.

Where does twisted need to generate a URL? I'm even mostly using 
relative links, AFAICR...

Regards

Markus



From exarkun at divmod.com  Tue Sep 12 09:41:15 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 12 Sep 2006 11:41:15 -0400
Subject: [Twisted-Python] HTTP 302 instead of just delivering the content.
In-Reply-To: <4506C982.1030505@bluegap.ch>
Message-ID: <20060912154115.1717.831975987.divmod.quotient.47102@ohm>

This discussion would be more appropriate on the twisted-web mailing list.

Jean-Paul



From ncesar at lunix.com.ar  Tue Sep 12 13:20:25 2006
From: ncesar at lunix.com.ar (Nicolas D. Cesar)
Date: Tue, 12 Sep 2006 16:20:25 -0300
Subject: [Twisted-Python] Support for ICMP ping?
In-Reply-To: <20060912024213.1717.253566150.divmod.quotient.46616@ohm>
References: <20060912024213.1717.253566150.divmod.quotient.46616@ohm>
Message-ID: <200609121620.25283.ncesar@lunix.com.ar>

El Lunes, 11 de Septiembre de 2006 23:42, Jean-Paul Calderone escribió:
> I'll second this recommendation.  You need root privileges on most systems
> to open an ICMPable socket anyway.  Running your whole process as root just
> so you can ping some stuff is kind of unfortunate.

Thanks Jean-Paul for the reply. 

Yes, i'm aware of that,  but in my case, I need to run my application as root 
anyway because im using ip_queue to filter dhcp packets, and only root can do 
that.

So I was asking if there is any plans of expanding twisted, so a root-capable 
twisted application could ping the world!

I have little python and twisted skills , but if there is interest I could 
help in the develop.

Greetings,

BTW, the application I'm developing (and all my work actually) is released as 
Free Software. If anyone is interested in having it, just mail me or wait 
until I put a nice-little-project page on-line.

As allways: Pardon my English.
-- 
Nicolás D. César <ncesar at lunix.com.ar>
Lunix S.R.L. -[ http://www.lunix.com.ar ]-
GnuPG Public Key: gpg --keyserver wwwkeys.pgp.net --recv-key 0x3606F3E6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20060912/185dedb3/attachment.sig>

From exarkun at divmod.com  Tue Sep 12 16:10:38 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 12 Sep 2006 18:10:38 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18104 - Some systems raise
 an OSError with
 EPERM rather than an IOError with EACCES for filesystem permissions
 errors.
In-Reply-To: <E1GNGRh-0003PF-00@wolfwood>
Message-ID: <20060912221038.1717.1002966027.divmod.quotient.47399@ohm>

On Tue, 12 Sep 2006 16:09:33 -0600, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
>Author: wsanchez
>Date: Tue Sep 12 16:09:31 2006
>New Revision: 18104
>
>Modified:
>   trunk/twisted/web2/dav/http.py
>Log:
>Some systems raise an OSError with EPERM rather than an IOError with EACCES for filesystem permissions errors.
>Submitted by rfmohr at osc.edu
>Reviewed by wsanchez
>Fixes #1807
>
>
>Modified: trunk/twisted/web2/dav/http.py
>==============================================================================
>--- trunk/twisted/web2/dav/http.py	(original)
>+++ trunk/twisted/web2/dav/http.py	Tue Sep 12 16:09:31 2006
>@@ -262,9 +262,9 @@
>         if what is not None:
>             log.msg("%s while %s" % (err, what))
>
>-    if failure.check(IOError):
>+    if failure.check(IOError, OSError):
>         e = failure.value[0]
>-        if e == errno.EACCES:
>+        if e == errno.EACCES or e == errno.EPERM:
>             msg("Permission denied")
>             return responsecode.FORBIDDEN
>         elif e == errno.ENOSPC:
>

Tests?

Jean-Paul




From twisted-python at 2xlp.com  Tue Sep 12 19:10:26 2006
From: twisted-python at 2xlp.com (Jonathan)
Date: Tue, 12 Sep 2006 21:10:26 -0400
Subject: [Twisted-Python] mechanize in twisted ?
In-Reply-To: <dbeb95830608070005m23437041h9c9d880139d54aec@mail.gmail.com>
References: <dbeb95830608070005m23437041h9c9d880139d54aec@mail.gmail.com>
Message-ID: <D1BAAA71-D133-47B0-95FF-3D3530009FA3@2xlp.com>

I've got a job-queue process implemented twisted that interfaces with  
Postgres and occasionally downloads some urls

To handle the URLs, I'm using mechanize.  I know that twisted.web1  
has the client, but it seems to be not actively maintained, and  
there's no client in twisted.web2.  mechanize is actively maintained  
and has a bunch of features that I like, so its a win win situation.

except for timeouts

mechanize doesn't have a timeout of its own.  its using a global  
timeout , i think its using the default python socket timeout, and  
there isn't any override available. a 60s timeout doesn't work for  
me.  i need 10s-- but i can't change the global timeout , as its in a  
long running process and I don't want to interfere with any of my  
other tasks.

so I'm thinking that I somehow wrap mechanize and toss it into the  
event loop.

rather than spend a few hours reinventing the wheel, i figure someone  
here *might* have done this before and can offer a pointer.  anyone?



From moe at divmod.com  Tue Sep 12 20:48:02 2006
From: moe at divmod.com (Moe Aboulkheir)
Date: Wed, 13 Sep 2006 04:48:02 +0200
Subject: [Twisted-Python] mechanize in twisted ?
In-Reply-To: <D1BAAA71-D133-47B0-95FF-3D3530009FA3@2xlp.com>
Message-ID: <20060913024802.1717.1583484354.divmod.quotient.47611@ohm>



On Tue, 12 Sep 2006 21:10:26 -0400, Jonathan <twisted-python at 2xlp.com> wrote:
>I've got a job-queue process implemented twisted that interfaces with 
>Postgres and occasionally downloads some urls
>
>To handle the URLs, I'm using mechanize.  I know that twisted.web1  has the 
>client, but it seems to be not actively maintained, and  there's no client 
>in twisted.web2.

I'm not sure that there is much active maintenance to do.  For what it's worth, I've called t.web.client.getPage() at least 10 million times, and i don't have any complaints.

--
Moe Aboulkheir



From ldanielburr at mac.com  Tue Sep 12 21:06:45 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Tue, 12 Sep 2006 22:06:45 -0500
Subject: [Twisted-Python] mechanize in twisted ?
In-Reply-To: <20060913024802.1717.1583484354.divmod.quotient.47611@ohm>
References: <20060913024802.1717.1583484354.divmod.quotient.47611@ohm>
Message-ID: <op.tfsqxj143oj628@l-daniel-burrs-powerbook-g4-17.local>

On Tue, 12 Sep 2006 21:48:02 -0500, Moe Aboulkheir <moe at divmod.com> wrote:

>
>
> On Tue, 12 Sep 2006 21:10:26 -0400, Jonathan <twisted-python at 2xlp.com>  
> wrote:
>> I've got a job-queue process implemented twisted that interfaces with  
>> Postgres and occasionally downloads some urls
>>
>> To handle the URLs, I'm using mechanize.  I know that twisted.web1  has  
>> the client, but it seems to be not actively maintained, and  there's no  
>> client in twisted.web2.
>
> I'm not sure that there is much active maintenance to do.  For what it's  
> worth, I've called t.web.client.getPage() at least 10 million times, and  
> i don't have any complaints.
>
> --
> Moe Aboulkheir

My experience has been the same; I've used twisted.web.client for years
now, in production applications, with no issues.  That said, the original
poster didn't mention any special requirements that forced him to go with
mechanize; rather, the choice appears to have been made on the basis of
activity.

That said, there *is* a web2-based client, available from OSAF, named
zanshin.  I haven't used it, but it is most certainly being actively
developed.

L. Daniel Burr



From damonkohler at yahoo.com  Tue Sep 12 22:11:30 2006
From: damonkohler at yahoo.com (Damon Kohler)
Date: Tue, 12 Sep 2006 21:11:30 -0700 (PDT)
Subject: [Twisted-Python] Newbie Problem
Message-ID: <20060913041130.7912.qmail@web53502.mail.yahoo.com>

This is probably something simple. I'm having some trouble with this little bit
of code below. I start it up once as a server, then a second time as the client
connecting to localhost. However, it never actually seems to connect. Both
sides just wait indefinitely. I'm a bit stuck as to how to debug this, so if
someone has a solution for me and could tell me how I would have figured it
out, that would be great!

Thanks,
Damon

import sys
import optparse

import zope.interface

from twisted.spread import pb
from twisted.internet import reactor
from twisted.internet import interfaces
from twisted.python import util


class ConsoleInput(object):
    zope.interface.implements(interfaces.IReadDescriptor)
    
    def fileno(self):
        return 0

    def connectionLost(self, reason):
        print "Lost connection because %s" % reason

    def doRead(self):
        d = self.root.callRemote("echo", sys.stdin.readline().strip())
       
    def setRoot(self, root):
        print "got root"
        self.myEchoer = Echoer()
        self.root = root
        self.root.callRemote('GiveReference', self.myEchoer)

    def logPrefix(self):
        return 'ConsoleInput'


class Echoer(pb.Root):
    def remote_echo(self, st):
        print 'echoing:', st
        return st

    def remote_GiveReference(self, ref):
        self.client_ref = ref

def main():
    parser = optparse.OptionParser()
    parser.add_option('--host', dest='host', help='Host to connect to.')
    options, args = parser.parse_args()

    ci = ConsoleInput()
    reactor.addReader(ci)

    if options.host:
        host = options.host
        factory = pb.PBClientFactory()
        print "Connecting to %s..." % host
        reactor.connectTCP(host, 8789, pb.PBClientFactory())
        d = factory.getRootObject()
        d.addCallback(ci.setRoot)
        d.addErrback(lambda reason: "error %s" % reason.value)
        d.addCallback(util.println)
    else:
        print "Listening..."
        root = Echoer()
        factory = pb.PBServerFactory(root)
        reactor.listenTCP(8789, factory)

    reactor.run()

if __name__ == '__main__':
    main()


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From exarkun at divmod.com  Wed Sep 13 07:09:30 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 13 Sep 2006 09:09:30 -0400
Subject: [Twisted-Python] Newbie Problem
In-Reply-To: <20060913041130.7912.qmail@web53502.mail.yahoo.com>
Message-ID: <20060913130930.1717.163455465.divmod.quotient.47966@ohm>

On Tue, 12 Sep 2006 21:11:30 -0700 (PDT), Damon Kohler <damonkohler at yahoo.com> wrote:
>This is probably something simple. I'm having some trouble with this little bit
>of code below. I start it up once as a server, then a second time as the client
>connecting to localhost. However, it never actually seems to connect. Both
>sides just wait indefinitely. I'm a bit stuck as to how to debug this, so if
>someone has a solution for me and could tell me how I would have figured it
>out, that would be great!

Most likely the problem is sys.stdin.readline().  I suggest taking a look
at twisted.internet.stdio as a way to eliminate your ConsoleInput class
and the uses of the reactor-private method addReader().

If I were going to try to track down the cause of the hang, I'd probably
start with strace to see where the processes are waiting.

Jean-Paul



From sylvain.thenault at logilab.fr  Wed Sep 13 09:28:04 2006
From: sylvain.thenault at logilab.fr (Sylvain =?iso-8859-1?Q?Th=E9nault?=)
Date: Wed, 13 Sep 2006 17:28:04 +0200
Subject: [Twisted-Python] twisted.web2 and blank values in POST
Message-ID: <20060913152804.GB25735@crater.logilab.fr>

Hi there,

I've found a strange behaviour in twisted web2'server : the behaviour with blank values
in form parameters is not consistent between GET and POST: on GET blank values are kept while 
this is not the case on POST. I'ld have expected blank values to be kept on POST as well. Is this 
a bug or an expected behavour ?


PS: if this is a bug, an easy fix is to add keep_blank_values=True to the 
fileupload.parse_urlencoded call in server.py line 91.
-- 
Sylvain Thénault                               LOGILAB, Paris (France)
Formations Python, Zope, Plone, Debian:  http://www.logilab.fr/formations
Développement logiciel sur mesure:       http://www.logilab.fr/services
Python et calcul scientifique:           http://www.logilab.fr/science




From exarkun at divmod.com  Wed Sep 13 09:45:10 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 13 Sep 2006 11:45:10 -0400
Subject: [Twisted-Python] twisted.web2 and blank values in POST
In-Reply-To: <20060913152804.GB25735@crater.logilab.fr>
Message-ID: <20060913154510.1717.1246633757.divmod.quotient.48076@ohm>

On Wed, 13 Sep 2006 17:28:04 +0200, Sylvain Thénault <sylvain.thenault at logilab.fr> wrote:
>Hi there,
>
>I've found a strange behaviour in twisted web2'server : the behaviour with blank values
>in form parameters is not consistent between GET and POST: on GET blank values are kept while
>this is not the case on POST. I'ld have expected blank values to be kept on POST as well. Is this
>a bug or an expected behavour ?
>
>
>PS: if this is a bug, an easy fix is to add keep_blank_values=True to the
>fileupload.parse_urlencoded call in server.py line 91.

Hi.  You might want to post this to the twisted-web mailing list, instead.

Jean-Paul



From sylvain.thenault at logilab.fr  Wed Sep 13 09:58:23 2006
From: sylvain.thenault at logilab.fr (Sylvain =?iso-8859-1?Q?Th=E9nault?=)
Date: Wed, 13 Sep 2006 17:58:23 +0200
Subject: [Twisted-Python] twisted.web2 and blank values in POST
In-Reply-To: <20060913154510.1717.1246633757.divmod.quotient.48076@ohm>
References: <20060913152804.GB25735@crater.logilab.fr>
	<20060913154510.1717.1246633757.divmod.quotient.48076@ohm>
Message-ID: <20060913155823.GD25735@crater.logilab.fr>

On Wednesday 13 September à 11:45, Jean-Paul Calderone wrote:
> On Wed, 13 Sep 2006 17:28:04 +0200, Sylvain Thénault 
> <sylvain.thenault at logilab.fr> wrote:
> >Hi there,
> >
> >I've found a strange behaviour in twisted web2'server : the behaviour with 
> >blank values
> >in form parameters is not consistent between GET and POST: on GET blank 
> >values are kept while
> >this is not the case on POST. I'ld have expected blank values to be kept 
> >on POST as well. Is this
> >a bug or an expected behavour ?
> >
> >
> >PS: if this is a bug, an easy fix is to add keep_blank_values=True to the
> >fileupload.parse_urlencoded call in server.py line 91.
> 
> Hi.  You might want to post this to the twisted-web mailing list, instead.

oops, good point. I've just bounced it on the web list, thx !

-- 
Sylvain Thénault                               LOGILAB, Paris (France)
Formations Python, Zope, Plone, Debian:  http://www.logilab.fr/formations
Développement logiciel sur mesure:       http://www.logilab.fr/services
Python et calcul scientifique:           http://www.logilab.fr/science




From damonkohler at yahoo.com  Wed Sep 13 13:55:38 2006
From: damonkohler at yahoo.com (Damon Kohler)
Date: Wed, 13 Sep 2006 12:55:38 -0700 (PDT)
Subject: [Twisted-Python] Newbie Problem
In-Reply-To: <20060913130930.1717.163455465.divmod.quotient.47966@ohm>
Message-ID: <20060913195539.1056.qmail@web53503.mail.yahoo.com>

Thanks for the help. Unfortuantely, I'm still stuck. I'm on OS X and so I'm
using ktrace. So far, it hasn't given me much insight. Also, it doesn't appear
to be the sys.stdin call causing the trouble since I can replace that with just
a string and get the same results. Any other ideas?

Damon

--- Jean-Paul Calderone <exarkun at divmod.com> wrote:

> On Tue, 12 Sep 2006 21:11:30 -0700 (PDT), Damon Kohler
> <damonkohler at yahoo.com> wrote:
> >This is probably something simple. I'm having some trouble with this little
> bit
> >of code below. I start it up once as a server, then a second time as the
> client
> >connecting to localhost. However, it never actually seems to connect. Both
> >sides just wait indefinitely. I'm a bit stuck as to how to debug this, so if
> >someone has a solution for me and could tell me how I would have figured it
> >out, that would be great!
> 
> Most likely the problem is sys.stdin.readline().  I suggest taking a look
> at twisted.internet.stdio as a way to eliminate your ConsoleInput class
> and the uses of the reactor-private method addReader().
> 
> If I were going to try to track down the cause of the hang, I'd probably
> start with strace to see where the processes are waiting.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From twisted-python at 2xlp.com  Wed Sep 13 15:14:24 2006
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 13 Sep 2006 17:14:24 -0400
Subject: [Twisted-Python] design pattern advice needed
Message-ID: <1498079C-0ECA-482D-8B73-FB826BBBE2F5@2xlp.com>

I can't wrap my head around this

	FactoryA needs an object from FactoryB
	FactoryB has a finite pool of objects, which can be checked in and  
checked out

I need FactoryA to not-progress until FactoryB is ready to dispense  
an object.

in all of my attempts, i end up with a deferred object in the Factory  
A code.

can anyone point me in the right  direction?



From twisted-python at 2xlp.com  Wed Sep 13 15:29:13 2006
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 13 Sep 2006 17:29:13 -0400
Subject: [Twisted-Python] mechanize in twisted ?
In-Reply-To: <76B51183-6693-4B21-822E-0C886A84D397@2xlp.com>
References: <20060913024802.1717.1583484354.divmod.quotient.47611@ohm>
	<op.tfsqxj143oj628@l-daniel-burrs-powerbook-g4-17.local>
	<1C2DE905-4450-49B8-83F5-0A4D71A8241F@2xlp.com>
	<76B51183-6693-4B21-822E-0C886A84D397@2xlp.com>
Message-ID: <95FEEE4F-DA92-4F6B-B5E9-0D094F412434@2xlp.com>

On Sep 12, 2006, at 11:06 PM, L. Daniel Burr wrote:



> My experience has been the same; I've used twisted.web.client for  
> years
> now, in production applications, with no issues.  That said, the  
> original
> poster didn't mention any special requirements that forced him to  
> go with
> mechanize; rather, the choice appears to have been made on the  
> basis of
> activity.
>
> That said, there *is* a web2-based client, available from OSAF, named
> zanshin.  I haven't used it, but it is most certainly being actively
> developed
>
>

Sorry, I wrote this while rather tired.  Let me clarify.

	I know that twisted.web 1.0 is stable and production proven.
	And I know people are happy with it and love it.

	Right now I have a bunch of existing scripts that crunch analytics  
and are already built on mechanize and run as cronjobs.
	I'm transitioning some to a job queue system , trying to optimize  
some resources by handling it all within twisted.
	My winwin situation on choosing mechanize is in part , because
		a) it involves copy-pasting a few lines and reusing classes I  
already have -- hopefully wrapping it into the event loop -- vs  
porting a bunch of stuff to twisted.web.client1
		and
		b) its actively maintained, which means i get some random new  
features on their development list that I need already ( like  
integrated beautful soup support ).  most that  stuff is  trivial and  
easily implemented in twisted, but i don't have to do that work.  its  
done (in mechanize ).

So I'd like to stay within mechanize.   and I think i've got a way to  
wrap it into twisted.

Thanks for the suggestions and trying to put me on the right track.




From damonkohler at yahoo.com  Wed Sep 13 16:24:49 2006
From: damonkohler at yahoo.com (Damon Kohler)
Date: Wed, 13 Sep 2006 15:24:49 -0700 (PDT)
Subject: [Twisted-Python] Newbie Problem
In-Reply-To: <20060913195539.1056.qmail@web53503.mail.yahoo.com>
Message-ID: <20060913222449.96934.qmail@web53504.mail.yahoo.com>

Whoops. Found the problem. Wasn't using the client factory I created and
instead used a new factory in the reactor call :(

--- Damon Kohler <damonkohler at yahoo.com> wrote:

> Thanks for the help. Unfortuantely, I'm still stuck. I'm on OS X and so I'm
> using ktrace. So far, it hasn't given me much insight. Also, it doesn't
> appear
> to be the sys.stdin call causing the trouble since I can replace that with
> just
> a string and get the same results. Any other ideas?
> 
> Damon
> 
> --- Jean-Paul Calderone <exarkun at divmod.com> wrote:
> 
> > On Tue, 12 Sep 2006 21:11:30 -0700 (PDT), Damon Kohler
> > <damonkohler at yahoo.com> wrote:
> > >This is probably something simple. I'm having some trouble with this
> little
> > bit
> > >of code below. I start it up once as a server, then a second time as the
> > client
> > >connecting to localhost. However, it never actually seems to connect. Both
> > >sides just wait indefinitely. I'm a bit stuck as to how to debug this, so
> if
> > >someone has a solution for me and could tell me how I would have figured
> it
> > >out, that would be great!
> > 
> > Most likely the problem is sys.stdin.readline().  I suggest taking a look
> > at twisted.internet.stdio as a way to eliminate your ConsoleInput class
> > and the uses of the reactor-private method addReader().
> > 
> > If I were going to try to track down the cause of the hang, I'd probably
> > start with strace to see where the processes are waiting.
> > 
> > Jean-Paul
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > 
> 
> 
> __________________________________________________
> Do You Yahoo!?
> Tired of spam?  Yahoo! Mail has the best spam protection around 
> http://mail.yahoo.com 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From felipe.lessa at gmail.com  Wed Sep 13 18:44:21 2006
From: felipe.lessa at gmail.com (Felipe Almeida Lessa)
Date: Wed, 13 Sep 2006 21:44:21 -0300
Subject: [Twisted-Python] mechanize in twisted ?
In-Reply-To: <95FEEE4F-DA92-4F6B-B5E9-0D094F412434@2xlp.com>
References: <20060913024802.1717.1583484354.divmod.quotient.47611@ohm>
	<op.tfsqxj143oj628@l-daniel-burrs-powerbook-g4-17.local>
	<1C2DE905-4450-49B8-83F5-0A4D71A8241F@2xlp.com>
	<76B51183-6693-4B21-822E-0C886A84D397@2xlp.com>
	<95FEEE4F-DA92-4F6B-B5E9-0D094F412434@2xlp.com>
Message-ID: <c2701f5c0609131744mbfd95fdl74b1c0663b43d46d@mail.gmail.com>

2006/9/13, Jonathan Vanasco <twisted-python at 2xlp.com>:
> most that  stuff is  trivial and
> easily implemented in twisted, but i don't have to do that work.  its
> done (in mechanize )

I may be wrong, but I think that porting mechanize to Twisted would be
more difficult than porting your mechanize scripts to Twisted. Maybe
not, just a thought.

-- 
Felipe.



From exarkun at divmod.com  Wed Sep 13 19:47:53 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 13 Sep 2006 21:47:53 -0400
Subject: [Twisted-Python] Twisted Development Procedures
In-Reply-To: 0
Message-ID: <20060914014753.1717.904981824.divmod.quotient.48457@ohm>

It's been pointed out to me lately that, while the general procedures in
place for Twisted development are somewhat understood, specifics may be
lacking.  So, specifically, the development process Twisted has adopted
is this:

  Commits to trunk/ must be the result of the review process outlined
below.  The only exception to this is the Twisted.Quotes file.  There
are no other exceptions.

  Changes to Twisted must be accompanied by a ticket in the tracker.

  Changes must be reviewed by a developer other than the author of the
changes.  If changes are paired on, a third party must review them.  If
changes constitute the work of several people who worked independently,
a non-author must review them.

  A reviewer can be anyone who is familiar with the Twisted codebase,
coding standard, and review requirements.  A reviewer need not
necessarily be familiar with the specific area of Twisted being changed,
but he or she should feel confident in his or her abilities to spot
problems in the change.

  A reviewer must reject a set of changes in any of the following
circumstances:

    The test suite fails on any of the supported* platforms as a result
of the changes.

    The changes alter the behavior of code in a way which is not tested.

    The changes add new behavior without adding test coverage for that
behavior.

    The changes modify public APIs which are undocumented (ie, a
function which has no docstring is modified, or a class which has no
docstring has methods added to it).

    The changes modify the behavior of a documented API without updating
the documentation.

    The changes violate the coding standard.

  A reviewer may reject a set of changes for other reasons, most of
which are hard to quantify.  Basically, use your best judgement, and
don't be afraid to point out problems which don't fit into the above
list.

  After a reviewer has given a change set the okay, the author (or
another developer, if the author is so inclined or lacks commit
privileges) may commit the change set to trunk.

  The trunk commit must include the name of the author or authors,
reviewer or reviews, and the tickets which are being resolved by the
changes being committed.  The suggested format for this is:

    Author: <names>
    Reviewer: <names>
    Fixes #<ticket number>

  Only the "Fixes" line actually *needs* to conform to this (since it is
automatically processed in order to update the ticket's state in the
tracker).  The commit message should also describe the change being made
in a modest amount of detail.  This should be detailed enough for
someone doing a release to formulate a changelog entry.

  If a change set somehow introduces a test suite regression or is
otherwise found to be undesirable, it is to be reverted.  Any developer
may revert a commit which introduces a test suite regression on a
supported platform.

  If a branch is used, it should be deleted a short time after after it
is merged into trunk (leaving enough time for the buildslaves to run to
completion is a good idea, in case a regression has been introduced and
the merge must be reverted).

Chris has put this onto the wiki:

    http://twistedmatrix.com/trac/wiki/ReviewProcess

Developers, please ask questions if any part of this remains unclear.

Apologies for not posting this sooner,

Jean-Paul



From gah at research.att.com  Wed Sep 13 19:47:56 2006
From: gah at research.att.com (Glenn Hochberg)
Date: Wed, 13 Sep 2006 21:47:56 -0400
Subject: [Twisted-Python] design pattern advice needed
In-Reply-To: <1498079C-0ECA-482D-8B73-FB826BBBE2F5@2xlp.com>
References: <1498079C-0ECA-482D-8B73-FB826BBBE2F5@2xlp.com>
Message-ID: <D6DFD5E8-0972-4B95-B119-9FAE81157CEF@research.att.com>


On Sep 13, 2006, at 5:14 PM, Jonathan Vanasco wrote:

> I can't wrap my head around this
>
> 	FactoryA needs an object from FactoryB
> 	FactoryB has a finite pool of objects, which can be checked in and  
> checked out
>
> I need FactoryA to not-progress until FactoryB is ready to dispense  
> an object.
>
> in all of my attempts, i end up with a deferred object in the  
> Factory A code.
>
> can anyone point me in the right  direction?

Here's a stab at the idea.

class FactoryB:
	product = B
	pool = [ self.product() for _ in range(0,10) ]
	queue = []

	def allocate( self ):
		if not self.pool:
			d = defer.Deferred()
			self.queue.append( d )
			return d
		else:
			return defer.succeed( self.pool.pop() )

	def free( self, p ):
		if self.queue:
			d = self.queue.pop( 0 )
			d.callback( p )
		else:
			self.pool.append( p )

class FactoryA:
	product = A
	factoryB = FactoryB()
	
	def allocate( self ):
		d = self.factoryB.allocate()
		d.addCallback( self._gotB )
		return d

	def _gotB( self, b )
		a = self.product()
		a.b = b
		return a

def _gotA( a ):
	# do something with the A object

def main():
	factoryA = FactoryA()
	d = factoryA.allocate()
	d.addCallback( _gotA )

Maybe others will have a more refined explanation.



From schneider at gl-systemhaus.de  Thu Sep 14 06:35:46 2006
From: schneider at gl-systemhaus.de (Christian Schneider)
Date: Thu, 14 Sep 2006 14:35:46 +0200
Subject: [Twisted-Python] Rotating logfiles (SIGUSR1 doesn't work)
Message-ID: <00259AE0-AB94-4495-90DF-FF43F6553460@gl-systemhaus.de>

Hi,

we've written a server running as a twisted application. Logging is  
done via twisted.python.log.msg. The log file is growing rather big  
and only rotated on server startup, which hopefully is a very rare  
occurrence, indeed.

Sending a SIGUSR1 to twistd unfortunately doesn't do anything.

I've seen that the class LogFile has a rotate method but I don't see  
the connection between twisted.python.log and that class if there is  
any at all.

Any hint would be highly appreciated

chris



From twisted-python at 2xlp.com  Thu Sep 14 21:31:38 2006
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 14 Sep 2006 23:31:38 -0400
Subject: [Twisted-Python] 2 questions: adbapi.ConnectionPool ;
	Defer.DeferredSemaphore , threads.deferToThread
Message-ID: <85B7D56A-9E6F-435E-8785-D474BB4E8661@2xlp.com>


a-
	can someone clarify adbapi.ConnectionPool for me?
	i'm specifically wondering if connect/disconnect returns a handle to  
the pool and it the pool blocks until a handle is ready.  i think it  
probably doesn't work that way.  but i feel the need to check.
	

b-
	has anyone ever used Defer.DeferredSemaphore with  
threads.deferToThread ?
	if so, how?  all of my attempts thus far have not given the desired  
results

specifically, i'm trying to have a scheduled job queue seed 1-50  
'tasks' at once, each one using a seperate DB connection and running  
in a seperate thread.
once they all complete, the job reschedules itself to run in the future.

i'm probably approaching this problem wrong.  so feel free to tell me  
i'm an idiot and point in a better direction.

the closest thing I could think of was:
	1- imports= [ self.semaphore.run( threads.deferToThread 
( self.import_request, queue_item ) ) for queue_item in queue_import ]
	2- imports= [ threads.deferToThread( self.semaphore.run 
( self.import_request, queue_item ) ) for queue_item in queue_import ]

neither of which work as:
	1-  gives me imports all at once, as deferToThread immediately  
returns a deferred object
	2- self.import_request blocks , as its not in its own thread





From dave at krondo.com  Thu Sep 14 22:39:44 2006
From: dave at krondo.com (Dave Peticolas)
Date: Thu, 14 Sep 2006 21:39:44 -0700
Subject: [Twisted-Python] 2 questions: adbapi.ConnectionPool ;
	Defer.DeferredSemaphore , threads.deferToThread
In-Reply-To: <85B7D56A-9E6F-435E-8785-D474BB4E8661@2xlp.com>
References: <85B7D56A-9E6F-435E-8785-D474BB4E8661@2xlp.com>
Message-ID: <450A2E90.3000807@krondo.com>

Jonathan Vanasco wrote:
>
> a-
>     can someone clarify adbapi.ConnectionPool for me?
>     i'm specifically wondering if connect/disconnect returns a handle 
> to the pool and it the pool blocks until a handle is ready.  i think 
> it probably doesn't work that way.  but i feel the need to check.
>    

I can only answer your first question. Connect/disconnect are blocking
functions and are generally only called from the connection pool itself.

User code generally only needs to call runInteraction, runQuery, or
runOperation, and the pool will make connections as needed.

dave





From twisted-python at 2xlp.com  Thu Sep 14 23:06:37 2006
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Fri, 15 Sep 2006 01:06:37 -0400
Subject: [Twisted-Python] 2 questions: adbapi.ConnectionPool ;
	Defer.DeferredSemaphore , threads.deferToThread
In-Reply-To: <450A2E90.3000807@krondo.com>
References: <85B7D56A-9E6F-435E-8785-D474BB4E8661@2xlp.com>
	<450A2E90.3000807@krondo.com>
Message-ID: <EB867216-8E5B-4790-B775-65CB041EDDBE@2xlp.com>

>> a-
>>     can someone clarify adbapi.ConnectionPool for me?
>>     i'm specifically wondering if connect/disconnect returns a  
>> handle to the pool and it the pool blocks until a handle is  
>> ready.  i think it probably doesn't work that way.  but i feel the  
>> need to check.


>> I can only answer your first question. Connect/disconnect are  
>> blocking
> functions and are generally only called from the connection pool  
> itself.
>
> User code generally only needs to call runInteraction, runQuery, or
> runOperation, and the pool will make connections as needed.

hm... i'll have to play with this.  i'm trying to fork some already  
written scripts that block as threads... grabbing a lock on a db from  
the pool, then returning it when done.

i answered part b for me.

i don't know if this example below would be of use to anyone, and its  
definitely poorly written.
but it is both functional and example of running a bunch of blocking  
processes in a finite number of threads managed by DeferredSemaphore  
( i could only find docs/examples for infinite threads or non- 
threaded DeferredSemaphore )

------------------------------------------------------------------------ 
------------------

from twisted.application import internet
from twisted.internet import defer , reactor , threads

import time

CHECK_PERIOD= 5
SIMULTANEOUS= 2
HELP= 1

class ThreadedSemaphoreService(object):
	semaphore= defer.DeferredSemaphore( tokens= SIMULTANEOUS )

	def __init__(self):
		self.interval_action()

	def interval_action( self ):
		if HELP:
			print "interval_action()"
		
		# this would likely be a sql select
		action_queue= range(1,6)

		if len ( action_queue ):
			actions= []
			for action_item in action_queue:
				d= self.act_on( action_item )
				actions.append(d)
			finished= defer.DeferredList( actions )
			finished.addCallback( self.re_register__interval_action )
		else:
			self.re_register__interval_action()

	def re_register__interval_action( self , deferlist ):
		if HELP:
			print "re_register__interval_action()"
		reactor.callLater( CHECK_PERIOD , self.interval_action )
	
	def act_on( self , queue_item ):
		if HELP:
			print "in main - act_on()"
		t= threads.deferToThread( self._act_on )
		return t

	def _act_on( self ):
		if HELP:
			print "\t thread - _act_on()"
		d= self.semaphore.acquire()
		d.addCallback( self.sleeper )
		d.addCallback( self.awake )

	def sleeper( self , deferredSemaphore ):
		if HELP:
			print "\t thread - sleeper() - i want to sleep in my own thread  
tonight"
		time.sleep(2)
		return deferredSemaphore

	def awake( self , deferredSemaphore ):
		if HELP:
			print "\t thead - awake() - now awake"
		deferredSemaphore.release()

if __name__ == '__main__':
	myService= ThreadedSemaphoreService()
	reactor.run()



From andrew-twisted at puzzling.org  Fri Sep 15 00:42:50 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 15 Sep 2006 16:42:50 +1000
Subject: [Twisted-Python] 2 questions: adbapi.ConnectionPool ;
	Defer.DeferredSemaphore , threads.deferToThread
In-Reply-To: <85B7D56A-9E6F-435E-8785-D474BB4E8661@2xlp.com>
References: <85B7D56A-9E6F-435E-8785-D474BB4E8661@2xlp.com>
Message-ID: <20060915064250.GB20197@steerpike.home.puzzling.org>

On Thu, Sep 14, 2006 at 11:31:38PM -0400, Jonathan Vanasco wrote:
[...]
> 
> b-
> 	has anyone ever used Defer.DeferredSemaphore with  
> threads.deferToThread ?
> 	if so, how?  all of my attempts thus far have not given the desired  
> results
> 
> specifically, i'm trying to have a scheduled job queue seed 1-50  
> 'tasks' at once, each one using a seperate DB connection and running  
> in a seperate thread.
> once they all complete, the job reschedules itself to run in the future.
> 
> i'm probably approaching this problem wrong.  so feel free to tell me  
> i'm an idiot and point in a better direction.
> 
> the closest thing I could think of was:
> 	1- imports= [ self.semaphore.run( threads.deferToThread 
> ( self.import_request, queue_item ) ) for queue_item in queue_import ]
> 	2- imports= [ threads.deferToThread( self.semaphore.run 
> ( self.import_request, queue_item ) ) for queue_item in queue_import ]
> 
> neither of which work as:
> 	1-  gives me imports all at once, as deferToThread immediately  
> returns a deferred object
> 	2- self.import_request blocks , as its not in its own thread

You probably want something more like:

    [self.semaphore.run(threads.deferToThread, self.import_request, queue_import)
     for queue_item in queue_import]

-Andrew.




From Marcin.Kasperski at softax.com.pl  Fri Sep 15 03:24:19 2006
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Fri, 15 Sep 2006 11:24:19 +0200
Subject: [Twisted-Python] Rotating logfiles (SIGUSR1 doesn't work)
In-Reply-To: <00259AE0-AB94-4495-90DF-FF43F6553460@gl-systemhaus.de>
References: <00259AE0-AB94-4495-90DF-FF43F6553460@gl-systemhaus.de>
Message-ID: <200609151124.20340.Marcin.Kasperski@softax.com.pl>


Not quite what you ask, but I use alternative logging method 
(logging.handlers.RotatingFileHandler) and it works perfectly...




From manlio_perillo at libero.it  Fri Sep 15 04:12:57 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 15 Sep 2006 12:12:57 +0200
Subject: [Twisted-Python] Rotating logfiles (SIGUSR1 doesn't work)
In-Reply-To: <00259AE0-AB94-4495-90DF-FF43F6553460@gl-systemhaus.de>
References: <00259AE0-AB94-4495-90DF-FF43F6553460@gl-systemhaus.de>
Message-ID: <450A7CA9.6030605@libero.it>

Christian Schneider ha scritto:
> Hi,
> 
> we've written a server running as a twisted application. Logging is done
> via twisted.python.log.msg. The log file is growing rather big and only
> rotated on server startup, which hopefully is a very rare occurrence,
> indeed.
> 

At least on Windows the file is rotated when its size reachs 1 MB.


Regards  Manlio Perillo




From general at eepatents.com  Fri Sep 15 12:37:08 2006
From: general at eepatents.com (Ed Suominen)
Date: Fri, 15 Sep 2006 11:37:08 -0700
Subject: [Twisted-Python] Re: 2 questions: adbapi.ConnectionPool ;
 Defer.DeferredSemaphore , threads.deferToThread
In-Reply-To: <E1GOH2r-0003dF-01@pyramid.twistedmatrix.com>
References: <E1GOH2r-0003dF-01@pyramid.twistedmatrix.com>
Message-ID: <450AF2D4.8060505@eepatents.com>

> specifically, i'm trying to have a scheduled job queue seed 1-50  
> 'tasks' at once, each one using a seperate DB connection and running  
> in a seperate thread.
> once they all complete, the job reschedules itself to run in the future.

I suggest you take a look at the asynchronous task queue on which my
sAsync package is based. I've been lobbying to get it included into the
twisted code base, see http://twistedmatrix.com/trac/ticket/1768.

The latest SVN of the module is at
http://foss.eepatents.com/sAsync/browser/trunk/sasync/taskqueue.py and
the API document is at
http://foss.eepatents.com/api/sasync/sasync.taskqueue.html.

Unlike the rest of sAsync, which is GPL'd, the taskqueue module and its
unit test module are distributed under a variant of the MIT license in
order to be suitable for inclusion in the Twisted codebase.

Best regards, Ed




From exarkun at twistedmatrix.com  Sat Sep 16 23:05:02 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 Sep 2006 05:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1158469502.95.636023027@twistedmatrix.com

Bug summary
______________________
Summary for 2006-09-10 through 2006-09-17
Bugs opened: 32    Bugs closed: 20  Total open bugs: 730 (+12)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +2  |Highest:  +6          |Conch:     -2          
|Enhancement: +11  |High:     +1          |Core:      +5          
|Task:         +3  |Normal:   +8          |Mail:      +1          
                   |Low:      -1          |Pb:        +2          
                   |Lowest:   +2          |Trial:     +3          
                                          |Web2:      +2          
                                          |Web2.Dav:  +0          
                                          |Website:   +2          
                                          |Words:     +3          


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2074] Access to twisted request object in WSGI applications (opened by martinpaljak)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2074

[#2076] twisted from svn will traceback when run on platform without working xml.dom.minidom (opened by jerub) (CLOSED, duplicate)
    defect          core       http://twistedmatrix.com/trac/ticket/2076

[#2079] Deprecate twisted.python.reflect.funcinfo (opened by radix)
    task            core       http://twistedmatrix.com/trac/ticket/2079

[#2083] Add test for statusForException() (opened by wsanchez)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2083

[#2086] t.words.basesupport attributeerror when "already connecting" (opened by moonfallen)
    defect          words      http://twistedmatrix.com/trac/ticket/2086

[#2089] twisted.words.protocol.irc.IRC.whois references undefined variable RPL_WHOISOPER, (opened by jerub)
    defect          words      http://twistedmatrix.com/trac/ticket/2089

[#2091] Make reactor unclean warnings reported errors (opened by jml)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2091

[#2054] ProperlyCloseFilesTestCase.testProperlyCloseFiles written in an aggressively stupid manner (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2054

                    ===== High =====
[#2084] Review public API of web2 (opened by glyph)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2084

[#2090] Deprecate reactor methods in tests (opened by jml)
    task            trial      http://twistedmatrix.com/trac/ticket/2090

                    ===== Normal =====
[#2070] cr+lf replacement in pop3.py/transformChunk() (opened by kaimorich) (CLOSED, duplicate)
    enhancement     mail       http://twistedmatrix.com/trac/ticket/2070

[#2071] cr+lf replacement in pop3.py/transformChunk() (opened by kaimorich) (CLOSED, wontfix)
    defect          mail       http://twistedmatrix.com/trac/ticket/2071

[#2072] Document newline convention required by twisted.mail.pop3.IMailbox.getMessage (opened by exarkun)
    enhancement     mail       http://twistedmatrix.com/trac/ticket/2072

[#2073] Access to twisted request object in WSGI applications (opened by martinpaljak) (CLOSED, duplicate)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2073

[#2075] set SCRIPT_NAME (properly?) in CGI environment (opened by martinpaljak)
    defect          web2       http://twistedmatrix.com/trac/ticket/2075

[#2077] Add a report for "Tickets Pending Review" (opened by jml)
    enhancement     website    http://twistedmatrix.com/trac/ticket/2077

[#2078] Twisted shouldn't start processes until the reactor is running (opened by radix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2078

[#2080] (Select) reactor doesn't wake up as a result of callFromThread (opened by mwk) (CLOSED, worksforme)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2080

[#2081] Linux filesystem extended attributes require a "user." prefix (opened by wsanchez) (CLOSED, fixed)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2081

[#2082] web2.dav.fileop should avoid using the os module (opened by wsanchez)
    defect          web2.dav   http://twistedmatrix.com/trac/ticket/2082

[#2085] Declare twisted.web2 stable and supported, de-emphasize twisted.web (opened by glyph)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2085

[#2087] buffer size doubling for iocpreactor (opened by ghazel)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2087

[#2088] twisted.words.im.basechat.ChatUI.contactChangedNick is completely broken. (opened by jerub)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2088

[#2092] Remove reactor.iterate calls from do_cleanPending (opened by jml)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2092

[#2093] URLPath should parse netloc more thoroughly. (opened by dreid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2093

[#2094] URLPath should provide an API for manipulating query arguments (opened by dreid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2094

[#2095] Add WebDAV quota support (opened by wsanchez)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2095

[#2097] Web Site Maintenance Info (opened by oubiwann)
    task            website    http://twistedmatrix.com/trac/ticket/2097

[#133 ] Allow registration of adapters for PB serialization (opened by itamarst)
    enhancement     pb         http://twistedmatrix.com/trac/ticket/133

[#1502] call selectreactor._preenDescriptors for WSAENOTSOCK (opened by titty)
    defect          core       http://twistedmatrix.com/trac/ticket/1502

                    ===== Lowest =====
[#2096] Support binding extensions to WebDAV (opened by wsanchez)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2096

[#1997] perhaps wakeUp could be slightly simpler (opened by wingo)
    defect          core       http://twistedmatrix.com/trac/ticket/1997



Closed Bugs
______________________
                    ===== Highest =====
[#2054] ProperlyCloseFilesTestCase.testProperlyCloseFiles written in an aggressively stupid manner (opened by exarkun, closed by exarkun, )
    defect          core       http://twistedmatrix.com/trac/ticket/2054

[#2076] twisted from svn will traceback when run on platform without working xml.dom.minidom (opened by jerub, closed by jerub, duplicate)
    defect          core       http://twistedmatrix.com/trac/ticket/2076

[#1850] web2 documentation should recommend putChild instead of setattr (opened by marienz, closed by dreid, fixed)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/1850

                    ===== High =====
[#2033] Removing non-existent property results in error. (opened by rfmohr at osc.edu, closed by wsanchez, fixed)
    defect          web2.dav   http://twistedmatrix.com/trac/ticket/2033

                    ===== Normal =====
[#2070] cr+lf replacement in pop3.py/transformChunk() (opened by kaimorich, closed by kaimorich, duplicate)
    enhancement     mail       http://twistedmatrix.com/trac/ticket/2070

[#2071] cr+lf replacement in pop3.py/transformChunk() (opened by kaimorich, closed by exarkun, wontfix)
    defect          mail       http://twistedmatrix.com/trac/ticket/2071

[#2073] Access to twisted request object in WSGI applications (opened by martinpaljak, closed by martinpaljak, duplicate)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2073

[#1848] Python 2.5b1  svn (opened by scmikes, closed by radix, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1848

[#1854] Suse 10,  Python 2.5   32 bit  Twisted SVN (opened by scmikes, closed by radix, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1854

[#1572] twistd starts services synchronously: it should  start them using the startup system event. (opened by exarkun, closed by radix, wontfix)
    defect          core       http://twistedmatrix.com/trac/ticket/1572

[#2067] string formatting bug in "twisted.python.reflect.funcinfo" (opened by james.townson, closed by radix, wontfix)
    defect          core       http://twistedmatrix.com/trac/ticket/2067

[#1501] Make twistd a library (opened by radix, closed by radix, wontfix)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/1501

[#2080] (Select) reactor doesn't wake up as a result of callFromThread (opened by mwk, closed by mwk, worksforme)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2080

[#1825] web2.dav COPY and MOVE methods fail if root directory of DAV resource is unwritable (opened by troy at osc.edu, closed by wsanchez, fixed)
    defect          web2.dav   http://twistedmatrix.com/trac/ticket/1825

[#2081] Linux filesystem extended attributes require a "user." prefix (opened by wsanchez, closed by wsanchez, fixed)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2081

[#1807] Exception handling improvements in web2/dav (opened by troy at osc.edu, closed by wsanchez, fixed)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/1807

[#1838] DAV MKCOL method with body causes uncaught exception (opened by troy at osc.edu, closed by wsanchez, fixed)
    defect          web2.dav   http://twistedmatrix.com/trac/ticket/1838

[#1752] t.w2's header tests that use runRoundtripTest and requiredGeneratedElements are invalid. (opened by dreid, closed by dreid, wontfix)
    defect          web2       http://twistedmatrix.com/trac/ticket/1752

                    ===== Low =====
[#1203] web2.stream.IStream.read() needs to take a length argument (opened by PenguinOfDoom, closed by dreid, invalid)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/1203

                    ===== Lowest =====
[#1997] perhaps wakeUp could be slightly simpler (opened by wingo, closed by glyph, )
    defect          core       http://twistedmatrix.com/trac/ticket/1997





From manlio_perillo at libero.it  Sun Sep 17 12:36:05 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sun, 17 Sep 2006 20:36:05 +0200
Subject: [Twisted-Python] manhole and exceptions
Message-ID: <450D9595.2080505@libero.it>

Hi.

I have started to play with manhole (on Windows XP, using putty as the
client).

After doing a:

>>> raise SystemExit()

from the terminal, the prompt ('>>>') does not appear.
Moreover every time I hit [RETURN] the same exception is re-raised in
the program.

I have to hit Ctrl-C to obtain the prompt again.




Thanks and regards  Manlio Perillo




From manlio_perillo at libero.it  Sun Sep 17 13:55:24 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sun, 17 Sep 2006 21:55:24 +0200
Subject: [Twisted-Python] manhole and exceptions
In-Reply-To: <450D9595.2080505@libero.it>
References: <450D9595.2080505@libero.it>
Message-ID: <450DA82C.7000104@libero.it>

Manlio Perillo ha scritto:
> Hi.
> 
> I have started to play with manhole (on Windows XP, using putty as the
> client).
> 

There seems to be a problem with history editing when a command is
written on more than one string.


Regards  Manlio Perillo



From exarkun at divmod.com  Sun Sep 17 17:09:03 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 17 Sep 2006 19:09:03 -0400
Subject: [Twisted-Python] manhole and exceptions
In-Reply-To: <450DA82C.7000104@libero.it>
Message-ID: <20060917230903.1717.371155045.divmod.quotient.52280@ohm>

On Sun, 17 Sep 2006 21:55:24 +0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>Manlio Perillo ha scritto:
>> Hi.
>>
>> I have started to play with manhole (on Windows XP, using putty as the
>> client).
>>
>
>There seems to be a problem with history editing when a command is
>written on more than one string.
>

For problems you find in Twisted, consider filing bug reports in our tracker,
<http://twistedmatrix.com/>.  Bug reports sent to the mailing list are usually
forgotten about.

Jean-Paul



From warner at lothar.com  Mon Sep 18 01:44:30 2006
From: warner at lothar.com (Brian Warner)
Date: Mon, 18 Sep 2006 00:44:30 -0700 (PDT)
Subject: [Twisted-Python] Foolscap (aka newpb) 0.0.2 released
Message-ID: <20060918.004430.98223299.warner@lothar.com>

I'm pleased to announce the release of Foolscap-0.0.2 .

 (What is 'foolscap', you ask? Good question. It is a size of paper, or the
 hat worn by a court jester, or a distributed object-capability protocol for
 Twisted. Only the first two definitions show up in wikipedia, however.)

newpb has been moved out of the Twisted SVN subdirectory into a new top-level
package where it can be developed independently of the Twisted release cycle.
(see ticket #1999 for details). In the process it has been renamed to
"Foolscap". (this name has some good properties, but "rolls pleasantly off
the tongue" is not one of them, and I'm not completely settled on it yet, so
don't be surprised if the name changes again in the next couple of months).

Foolscap is the next-generation version of Twisted's native RPC protocol, the
venerable Perspective Broker. It lets you make certain methods of certain
objects on one machine invokable from other machines. Foolscap (aka newpb)
has been in development on and off for, um, years, and is starting to be
ready for brave adventurers to give it a spin. Incompatible protocol and API
changes are likely to come, so keep in mind that it is not yet suitable for
production deployment.

The 0.0.2 release does not make any significant behavioral or protocol
changes relative to the earlier 0.0.1 release, but it does change the package
name and rearranges the preferred entry point. In 0.0.1 you needed to import
a number of second-level modules to use newpb (i.e. 'from twisted.pb import
pb; tub = pb.PBService()'). In 0.0.2 the foolscap/__init__.py file contains
all the important entry points, so you just do 'from foolscap import
PBService'.

The newpb (aka foolscap) wiki page contains lots of information about what
sorts of new features foolscap has relative to PB, links to view the source
and protocol specifications, and of course the download tarball:

 http://twistedmatrix.com/trac/wiki/FoolsCap

The release itself is available in my home directory on pyramid:

 http://twistedmatrix.com/~warner/Foolscap/

The source code lives in Twisted SVN in the sandbox:

 svn://svn.twistedmatrix.com/svn/Twisted/sandbox/warner/Foolscap/trunk


For a quick taste of what it looks like to make objects remotely available
via Foolscap, take a look at the simple client+server examples in the docs:

 http://twistedmatrix.com/trac/browser/sandbox/warner/Foolscap/trunk/doc/listings/pb1server.py

 http://twistedmatrix.com/trac/browser/sandbox/warner/Foolscap/trunk/doc/listings/pb1client.py


Please grab the release and give it a whirl. The more people who use it, the
better ideas we'll get about where it needs to go and what development still
needs to be done. The docs have a number of files describing the protocol
work that remains to be finished, but usability and practical deployment
issues are the biggest unknowns right now, and the only way to figure those
out is to actually use it for something.

share and enjoy,
 -Brian




From hanwoody at gmail.com  Tue Sep 19 08:23:00 2006
From: hanwoody at gmail.com (William Hanwoody)
Date: Tue, 19 Sep 2006 14:23:00 +0000
Subject: [Twisted-Python] how to manage multiple services using application
Message-ID: <200609191423.00232.hanwoody@gmail.com>

Hi All:

I want to manage multiple services in one twisted.application， multiple 
services contain t.app.internet.TCPClient services and 
t.app.internet.TCPServer services.

After client service(a.app.internet.TCPClient) connected and get results,
Do I need to stop client service? if needed, how to do it?

another question is how to use Deferred in twisted.application framework?

Thanks

-- 
_______________________________________________________________
William Hanwoody                             hanwoody at gmail.com

A senior Linux engineer, like system integrate
My blog - hanwoody.livejournal.com
_______________________________________________________________
Q:	What does it say on the bottom of Coke cans in North Dakota?
A:	Open other end.
_______________________________________________________________




From aronbierbaum at gmail.com  Wed Sep 20 21:13:38 2006
From: aronbierbaum at gmail.com (Aron Bierbaum)
Date: Wed, 20 Sep 2006 22:13:38 -0500
Subject: [Twisted-Python] PB over SSH
Message-ID: <34457a4c0609202013j41faa26bp9d4e256cb0d71189@mail.gmail.com>

Is there currently any way to us PB over a SSH connection? I noticed that
there was a post on this list back in Feb 2004, but I didn't see anyone
mention it after that. If anyone has any sample code that does this I would
greatly appreciate it.

-Aron
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060920/bb4431d2/attachment.html>

From glyph at divmod.com  Thu Sep 21 12:00:25 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 21 Sep 2006 14:00:25 -0400
Subject: [Twisted-Python] New OS X buildbot courtesy of Apple Computer, Inc.
In-Reply-To: 0
Message-ID: <20060921180025.1717.206593441.divmod.quotient.55983@ohm>

Today a box arrived in the Twisted Matrix Labs global headquarters (AKA the Divmod offices) containing a tricked-out Xserve G5, sent gratis by Apple Computer to help the Twisted team better support the Macintosh platform.

Chris Armstrong and JP Calderone have already set up the buildslaves, and you can see them featured on our Buildbot page as "osx-2.4" and "poll-osx-2.4".

    http://twistedmatrix.com/buildbot/

This new machine is serving its purpose admirably.  The new build configuration, poll on osx, has already revealed some bugs that need fixing, less than 20 minutes after the machine was set up :).

There are several people who deserve some kudos here:

First of all, Wilfredo Sanchez, for both getting Apple to use Twisted on a high-profile project in the first place, and driving the process which culminated in the delivery of this beautiful machine.

Thanks to Apple Computer for dedicating these resources to our project.  I trust it will prove a worthwhile investment for them.

And finally, thanks to Stephen Thorne, who has been tirelessly keeping our tests running on a personal machine, and helping to keep the OS X platform supported until now.  Stephen, you can finally turn it off :-).

Pictures are forthcoming, if you know how Flickr works and such.



From duncan.mcgreggor at gmail.com  Thu Sep 21 12:12:44 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Thu, 21 Sep 2006 12:12:44 -0600
Subject: [Twisted-Python] New OS X buildbot courtesy of Apple Computer,
	Inc.
In-Reply-To: <20060921180025.1717.206593441.divmod.quotient.55983@ohm>
References: <20060921180025.1717.206593441.divmod.quotient.55983@ohm>
Message-ID: <4512D61C.9070404@gmail.com>

glyph at divmod.com wrote:

> Today a box arrived in the Twisted Matrix Labs global headquarters
> (AKA the Divmod offices) containing a tricked-out Xserve G5, sent
> gratis by Apple Computer to help the Twisted team better support the
> Macintosh platform.

Sa-hweet!

This is very, very cool. In so many ways.

> There are several people who deserve some kudos here:
> 
> First of all, Wilfredo Sanchez, for both getting Apple to use Twisted
> on a high-profile project

+1

> Thanks to Apple Computer for dedicating these resources to our
> project

+1

> And finally, thanks to Stephen Thorne

+1!

> Pictures are forthcoming

Yeay! We love comp pics!



From yoheeb at yahoo.com  Thu Sep 21 14:18:52 2006
From: yoheeb at yahoo.com (Yoheeb)
Date: Thu, 21 Sep 2006 20:18:52 +0000 (UTC)
Subject: [Twisted-Python] Perspective Broker vs XMLRPC for this...
Message-ID: <loom.20060921T220523-828@post.gmane.org>

Hi all, 

I have never used twisted, but really would like to.  I am in the middle of
rough design of an xmlrpc OR OTHER remote method invocation type system.  I am
debating the use of xmlrpc vs the use of perspective broker.  (for a quick
prototype I will likely use the python base xmlrpc lib, but just for proof of
concept)

I need to support both java and python. (and really c/c++ in some fashion would
be nice also) from both "local" and remote sources.

I really need something that is secure as well, although I can work around
security with either via pre-post process encrytption techniques as needed.

I will need the ability to expose/hide methods based on the user privledges.  I
envision a single "services" like tool that populates a list of things you can
run based on user rights.  For this I need usernames/pwds to somehow be secure
(md5, rot13, whatever, just something)

I will have connections over vpn, local code calls, and eventually over local
serial and usb ports. (assuming everthing looks like a simple IP socket stream)

Finally, I have somehting else running a simple xmlrpc server on the system, and
may want to propogate calls to that with some magic wrapper function. (to be
specific, I am running a copy of eXist, the xmldb)

Breathe....

Ok, so with all those rough requirements in mind, will PB be worthwhile?  There
is no preference from the client applications point of view.

Right now I am doing a proof of concept, and have a ton of issues that could be
neatly solved by a nice RMI system that is secure.

Thanks in advance.

Yoheeb




From exarkun at divmod.com  Thu Sep 21 18:54:06 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 21 Sep 2006 20:54:06 -0400
Subject: [Twisted-Python] PB over SSH
In-Reply-To: <34457a4c0609202013j41faa26bp9d4e256cb0d71189@mail.gmail.com>
Message-ID: <20060922005406.1717.2081837661.divmod.quotient.56250@ohm>

On Wed, 20 Sep 2006 22:13:38 -0500, Aron Bierbaum <aronbierbaum at gmail.com> wrote:
>Is there currently any way to us PB over a SSH connection? I noticed that
>there was a post on this list back in Feb 2004, but I didn't see anyone
>mention it after that. If anyone has any sample code that does this I would
>greatly appreciate it.

PB requires a particular API from its transport, like many protocols.  It is
entirely possible to implement this API in terms of SSH, and probably not even particularly difficult.  However, no one has done this yet (and contributed the result to Twisted), so if you will need to if you want to run PB over SSH.

Running PB over SSL is significantly easier and may provide all of the features you are looking for.

Jean-Paul



From exarkun at divmod.com  Thu Sep 21 18:57:56 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 21 Sep 2006 20:57:56 -0400
Subject: [Twisted-Python] Perspective Broker vs XMLRPC for this...
In-Reply-To: <loom.20060921T220523-828@post.gmane.org>
Message-ID: <20060922005756.1717.1691604882.divmod.quotient.56253@ohm>

On Thu, 21 Sep 2006 20:18:52 +0000 (UTC), Yoheeb <yoheeb at yahoo.com> wrote:
>Hi all,
>
>I have never used twisted, but really would like to.  I am in the middle of
>rough design of an xmlrpc OR OTHER remote method invocation type system.  I am
>debating the use of xmlrpc vs the use of perspective broker.  (for a quick
>prototype I will likely use the python base xmlrpc lib, but just for proof of
>concept)
>
>I need to support both java and python. (and really c/c++ in some fashion would
>be nice also) from both "local" and remote sources.
>
>I really need something that is secure as well, although I can work around
>security with either via pre-post process encrytption techniques as needed.
>
>I will need the ability to expose/hide methods based on the user privledges.  I
>envision a single "services" like tool that populates a list of things you can
>run based on user rights.  For this I need usernames/pwds to somehow be secure
>(md5, rot13, whatever, just something)
>
>I will have connections over vpn, local code calls, and eventually over local
>serial and usb ports. (assuming everthing looks like a simple IP socket stream)
>
>Finally, I have somehting else running a simple xmlrpc server on the system, and
>may want to propogate calls to that with some magic wrapper function. (to be
>specific, I am running a copy of eXist, the xmldb)
>
>Breathe....
>
>Ok, so with all those rough requirements in mind, will PB be worthwhile?  There
>is no preference from the client applications point of view.
>
>Right now I am doing a proof of concept, and have a ton of issues that could be
>neatly solved by a nice RMI system that is secure.

All of this sounds doable, either with PB or with XML-RPC.  Certain parts
will be easier with PB, like permissions (since PB gives you remote objects
which can represent the capabilities available to a particular user - with
XML-RPC you don't have remote objects, but you can cobble together something
equivalent, it'll just be either slightly messier or slightly harder).  Other
parts will be easier with XML-RPC, like accessing the system from a C or C++
application, since there are numerous XML-RPC implementations for those
languages, and as far as I know no complete PB implementation for either.  A
third choice to consider may be AMP, which would be easy to implement in C or
C++ (and someone else may have done it by the time you actually get around to
that part of your project), although it also does not provide a remote object
system natively.

Jean-Paul



From robert at gravina.com  Thu Sep 21 19:05:10 2006
From: robert at gravina.com (Robert Gravina)
Date: Fri, 22 Sep 2006 10:05:10 +0900
Subject: [Twisted-Python] New OS X buildbot courtesy of Apple Computer,
	Inc.
In-Reply-To: <20060921180025.1717.206593441.divmod.quotient.55983@ohm>
References: <20060921180025.1717.206593441.divmod.quotient.55983@ohm>
Message-ID: <056347BB-8D17-4FA5-A389-19E544E68E46@gravina.com>

> Today a box arrived in the Twisted Matrix Labs global headquarters  
> (AKA the Divmod offices) containing a tricked-out Xserve G5, sent  
> gratis by Apple Computer to help the Twisted team better support  
> the Macintosh platform.

Yes this is fantastic news!

> First of all, Wilfredo Sanchez, for both getting Apple to use  
> Twisted on a high-profile project in the first place, and driving  
> the process which culminated in the delivery of this beautiful  
> machine.

Just out of interest, what is the name of the Apple product using  
Twisted? Or is it some secret internal project?

Robert



From mwh at python.net  Fri Sep 22 02:39:51 2006
From: mwh at python.net (Michael Hudson)
Date: Fri, 22 Sep 2006 09:39:51 +0100
Subject: [Twisted-Python] Re: New OS X buildbot courtesy of Apple Computer,
	Inc.
References: <20060921180025.1717.206593441.divmod.quotient.55983@ohm>
	<056347BB-8D17-4FA5-A389-19E544E68E46@gravina.com>
Message-ID: <2my7scjnvs.fsf@starship.python.net>

Robert Gravina <robert at gravina.com> writes:

>> Today a box arrived in the Twisted Matrix Labs global headquarters
>> (AKA the Divmod offices) containing a tricked-out Xserve G5, sent
>> gratis by Apple Computer to help the Twisted team better support
>> the Macintosh platform.
>
> Yes this is fantastic news!
>
>> First of all, Wilfredo Sanchez, for both getting Apple to use
>> Twisted on a high-profile project in the first place, and driving
>> the process which culminated in the delivery of this beautiful
>> machine.
>
> Just out of interest, what is the name of the Apple product using
> Twisted? Or is it some secret internal project?

It's (at least) the "Darwin Calendar Server":
http://trac.macosforge.org/projects/calendarserver/

Cheers,
mwh

-- 
  Hmm, that attempt at trolling did not work out as well as I had
  hoped.                                     -- Steve VanDevender, asr




From exarkun at divmod.com  Fri Sep 22 06:58:36 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 22 Sep 2006 08:58:36 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18220 - Make tests clean up
	after themselves
In-Reply-To: <E1GQbmR-00015G-00@wolfwood>
Message-ID: <20060922125836.1717.358516602.divmod.quotient.56721@ohm>

On Thu, 21 Sep 2006 21:32:47 -0600, Jonathan Lange <jml at wolfwood.twistedmatrix.com> wrote:
>Author: jml
>Date: Thu Sep 21 21:32:47 2006
>New Revision: 18220
>
>Modified:
>   trunk/twisted/web/test/test_distrib.py
>   trunk/twisted/web2/test/test_static.py
>   trunk/twisted/words/test/test_service.py
>Log:
>Make tests clean up after themselves
>
> * Fixes #1883
> * Author: jml
> * Reviewer: MFen
>
>Although not apparent to the naked eye, these tests previous did not
>correctly clean up after themselves. Instead, they relied on a couple
>of spins of the reactor to do their cleaning for them. This has been
>corrected.
>
>
>
>Modified: trunk/twisted/web/test/test_distrib.py
>==============================================================================
>--- trunk/twisted/web/test/test_distrib.py	(original)
>+++ trunk/twisted/web/test/test_distrib.py	Thu Sep 21 21:32:47 2006
>@@ -15,16 +15,26 @@
>                 self.logFile.close()
>             del self.logFile
>
>+
>+class PBServerFactory(pb.PBServerFactory):

Docstring?

>+    def buildProtocol(self, addr):
>+        self.proto = pb.PBServerFactory.buildProtocol(self, addr)
>+        return self.proto
>+
>+
> class DistribTest(unittest.TestCase):
>     port1 = None
>     port2 = None
>     sub = None
>
>     def tearDown(self):

Docstring?

>+        dl = [defer.Deferred(), defer.Deferred()]
>+        self.f1.proto.notifyOnDisconnect(lambda: dl[0].callback(None))
>         if self.sub is not None:
>+            self.sub.publisher.broker.notifyOnDisconnect(
>+                lambda: dl[1].callback(None))
>             self.sub.publisher.broker.transport.loseConnection()
>         http._logDateTimeStop()
>-        dl = []
>         if self.port1 is not None:
>             dl.append(self.port1.stopListening())
>         if self.port2 is not None:
>@@ -36,8 +46,8 @@
>         r1 = resource.Resource()
>         r1.putChild("there", static.Data("root", "text/plain"))
>         site1 = server.Site(r1)
>-        f1 = pb.PBServerFactory(distrib.ResourcePublisher(site1))
>-        self.port1 = reactor.listenTCP(0, f1)
>+        self.f1 = PBServerFactory(distrib.ResourcePublisher(site1))
>+        self.port1 = reactor.listenTCP(0, self.f1)
>         self.sub = distrib.ResourceSubscription("127.0.0.1",
>                                                 self.port1.getHost().port)
>         r2 = resource.Resource()
>
>Modified: trunk/twisted/web2/test/test_static.py
>==============================================================================
>--- trunk/twisted/web2/test/test_static.py	(original)
>+++ trunk/twisted/web2/test/test_static.py	Thu Sep 21 21:32:47 2006
>@@ -11,7 +11,6 @@
>         self.text = "Hello, World\n"
>         self.data = static.Data(self.text, "text/plain")
>
>-
>     def test_dataState(self):
>         """
>         Test the internal state of the Data object
>@@ -42,7 +41,6 @@
>                          http_headers.MimeType("text", "plain"))
>         def checkStream(data):
>             self.assertEquals(str(data), self.text)
>-
>         return stream.readStream(iweb.IResponse(self.data.render(None)).stream,
>                                  checkStream)
>
>@@ -58,7 +56,8 @@
>                               maxBytes=16)
>         self.root.addSlash = True
>
>-    def uploadFile(self, fieldname, filename, mimetype, content, resrc=None, host='foo', path='/'):
>+    def uploadFile(self, fieldname, filename, mimetype, content, resrc=None,
>+                   host='foo', path='/'):
>         if not resrc:
>             resrc = self.root
>
>@@ -102,32 +101,33 @@
>         return d
>
>     def test_enforcesMaxBytes(self):

Docstring?

>-        return self.assertInResponse(self.uploadFile('FileNameOne', 'myfilename',
>-                                         'text/html', 'X'*32),
>-                              (200, {}, 'exceeds maximum length'))
>+        return self.assertInResponse(
>+            self.uploadFile('FileNameOne', 'myfilename', 'text/html', 'X'*32),
>+            (200, {}, 'exceeds maximum length'))
>
>     def test_enforcesMimeType(self):

Docstring?

>-        return self.assertInResponse(self.uploadFile('FileNameOne', 'myfilename',
>-                                              'application/x-python', 'X'),
>-                              (200, {}, 'type not allowed'))
>+        return self.assertInResponse(
>+            self.uploadFile('FileNameOne', 'myfilename',
>+                            'application/x-python', 'X'),
>+            (200, {}, 'type not allowed'))
>
>     def test_invalidField(self):

Docstring?

>-        return self.assertInResponse(self.uploadFile('NotARealField', 'myfilename',
>-                                              'text/html', 'X'),
>-                              (200, {}, 'not a valid field'))
>+        return self.assertInResponse(

Docstring?

>+            self.uploadFile('NotARealField', 'myfilename', 'text/html', 'X'),
>+            (200, {}, 'not a valid field'))
>
>     def test_reportFileSave(self):

Docstring?

>-        return self.assertInResponse(self.uploadFile('FileNameOne', 'myfilename',
>-                                              'text/plain',
>-                                              'X'),
>-                              (200, {}, 'Saved file'))
>+        return self.assertInResponse(
>+            self.uploadFile('FileNameOne', 'myfilename', 'text/plain', 'X'),
>+            (200, {}, 'Saved file'))
>
>     def test_compareFileContents(self):

Docstring?

>         def gotFname(fname):
>             contents = file(fname, 'r').read()
>             self.assertEquals(contents, 'Test contents')
>-
>-        return self.uploadFile('FileNameOne', 'myfilename', 'text/plain',
>-                               'Test contents').addCallback(
>-            self.fileNameFromResponse
>-            ).addCallback(gotFname)
>+
>+        d = self.uploadFile('FileNameOne', 'myfilename', 'text/plain',
>+                            'Test contents')
>+        d.addCallback(self.fileNameFromResponse)
>+        d.addCallback(gotFname)
>+        return d
>
>Modified: trunk/twisted/words/test/test_service.py
>==============================================================================
>--- trunk/twisted/words/test/test_service.py	(original)
>+++ trunk/twisted/words/test/test_service.py	Thu Sep 21 21:32:47 2006
>@@ -875,21 +875,26 @@
>         self.portal = portal.Portal(
>             self.realm, [self.checker])
>         self.serverFactory = pb.PBServerFactory(self.portal)
>+        self.serverFactory.protocol = self._protocolFactory
>         self.serverFactory.unsafeTracebacks = True
>         self.clientFactory = pb.PBClientFactory()
>         self.clientFactory.unsafeTracebacks = True
>-
>         self.serverPort = reactor.listenTCP(0, self.serverFactory)
>         self.clientConn = reactor.connectTCP(
>             '127.0.0.1',
>             self.serverPort.getHost().port,
>             self.clientFactory)
>
>+    def _protocolFactory(self, *args, **kw):

Docstring?

>+        self._serverProtocol = pb.Broker(0)
>+        return self._serverProtocol
>
>     def tearDown(self):

Docstring?

>+        d3 = Deferred()
>+        self._serverProtocol.notifyOnDisconnect(lambda: d3.callback(None))
>         return DeferredList([
>             maybeDeferred(self.serverPort.stopListening),
>-            maybeDeferred(self.clientConn.disconnect)])
>+            maybeDeferred(self.clientConn.disconnect), d3])
>
>     def _loggedInAvatar(self, name, password, mind):
>         creds = credentials.UsernamePassword(name, password)
>
>_______________________________________________
>Twisted-commits mailing list
>Twisted-commits at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-commits
>



From glyph at divmod.com  Fri Sep 22 08:21:09 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 22 Sep 2006 10:21:09 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18220 - Make tests
	clean up after themselves
In-Reply-To: <20060922125836.1717.358516602.divmod.quotient.56721@ohm>
Message-ID: <20060922142109.1717.41196416.divmod.quotient.56788@ohm>

On Fri, 22 Sep 2006 08:58:36 -0400, Jean-Paul Calderone <exarkun at divmod.com> wrote:

>Docstring?

I'd like to direct all reviewers' attention at this point to the excellent wiki page that Chris and JP wrote a little while ago:

    http://twistedmatrix.com/trac/wiki/ReviewProcess

Especially to this section:

"""

  A reviewer must reject a set of changes in any of the following circumstances:

    * The test suite fails on any of the supported* platforms as a result of the changes.
    * The changes alter the behavior of code in a way which is not tested.
    * The changes add new behavior without adding test coverage for that behavior.
    * The changes modify public APIs which are undocumented (ie, a function which has no docstring is modified, or a class which has no docstring has methods added to it) without adding documentation.
    * The changes modify the behavior of a documented API without updating the documentation.
    * The changes violate the coding standard.

"""



From corydodt at gmail.com  Fri Sep 22 09:12:20 2006
From: corydodt at gmail.com (Cory Dodt)
Date: Fri, 22 Sep 2006 08:12:20 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] r18220 - Make tests clean
	up after themselves
In-Reply-To: <20060922142109.1717.41196416.divmod.quotient.56788@ohm>
References: <20060922125836.1717.358516602.divmod.quotient.56721@ohm>
	<20060922142109.1717.41196416.divmod.quotient.56788@ohm>
Message-ID: <c16a94ff0609220812j756bea39ld5e0e52495597c65@mail.gmail.com>

   * The changes modify public APIs which are undocumented (ie, a function
which has no docstring is modified, or a class which has no docstring has
methods added to it) without adding documentation.

Since when are tests public APIs?

C

On 9/22/06, glyph at divmod.com <glyph at divmod.com> wrote:
>
> On Fri, 22 Sep 2006 08:58:36 -0400, Jean-Paul Calderone <
> exarkun at divmod.com> wrote:
>
> >Docstring?
>
> I'd like to direct all reviewers' attention at this point to the excellent
> wiki page that Chris and JP wrote a little while ago:
>
>     http://twistedmatrix.com/trac/wiki/ReviewProcess
>
> Especially to this section:
>
> """
>
>   A reviewer must reject a set of changes in any of the following
> circumstances:
>
>     * The test suite fails on any of the supported* platforms as a result
> of the changes.
>     * The changes alter the behavior of code in a way which is not tested.
>     * The changes add new behavior without adding test coverage for that
> behavior.
>     * The changes modify public APIs which are undocumented (ie, a
> function which has no docstring is modified, or a class which has no
> docstring has methods added to it) without adding documentation.
>     * The changes modify the behavior of a documented API without updating
> the documentation.
>     * The changes violate the coding standard.
>
> """
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060922/25f78d5f/attachment.html>

From exarkun at divmod.com  Fri Sep 22 09:33:26 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 22 Sep 2006 11:33:26 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18220 - Make tests clean
	up after themselves
In-Reply-To: <c16a94ff0609220812j756bea39ld5e0e52495597c65@mail.gmail.com>
Message-ID: <20060922153326.1717.480256014.divmod.quotient.56844@ohm>

On Fri, 22 Sep 2006 08:12:20 -0700, Cory Dodt <corydodt at gmail.com> wrote:
>   * The changes modify public APIs which are undocumented (ie, a function
>which has no docstring is modified, or a class which has no docstring has
>methods added to it) without adding documentation.
>
>Since when are tests public APIs?

All test methods must have their intent documented.

I'll clarify this section on the wiki.

Jean-Paul



From glyph at divmod.com  Fri Sep 22 09:36:26 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 22 Sep 2006 11:36:26 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18220 - Make tests clean
	up after themselves
In-Reply-To: <c16a94ff0609220812j756bea39ld5e0e52495597c65@mail.gmail.com>
Message-ID: <20060922153626.1717.349270098.divmod.quotient.56847@ohm>

On Fri, 22 Sep 2006 08:12:20 -0700, Cory Dodt <corydodt at gmail.com> wrote:
>   * The changes modify public APIs which are undocumented (ie, a function
>which has no docstring is modified, or a class which has no docstring has
>methods added to it) without adding documentation.
>
>Since when are tests public APIs?

Hmm, good point, I guess "public API" is a bit misleading there.

Tests also need docstrings to explain what they're testing, and what code they're supposed to cover.  The test docstrings need to explain the verified constraints of the public API, or to explicitly say "this is not testing a public API" - although the vast majority of tests are verifying at least some behavior of a public API, although not directly.

I'll update that document a bit later.



From corydodt at gmail.com  Fri Sep 22 09:59:01 2006
From: corydodt at gmail.com (Cory Dodt)
Date: Fri, 22 Sep 2006 08:59:01 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] r18220 - Make tests clean
	up after themselves
In-Reply-To: <20060922153626.1717.349270098.divmod.quotient.56847@ohm>
References: <c16a94ff0609220812j756bea39ld5e0e52495597c65@mail.gmail.com>
	<20060922153626.1717.349270098.divmod.quotient.56847@ohm>
Message-ID: <c16a94ff0609220859i3acae18ep68b1ecf4a21ad6e3@mail.gmail.com>

I'm all for having more documentation.  When I reviewed that bug I went by
the strictest interpretation of ReviewProcess, which it seems wasn't clear.
I'm glad it'll get clarified.

Thanks!

C

On 9/22/06, glyph at divmod.com <glyph at divmod.com> wrote:
>
> On Fri, 22 Sep 2006 08:12:20 -0700, Cory Dodt <corydodt at gmail.com> wrote:
> >   * The changes modify public APIs which are undocumented (ie, a
> function
> >which has no docstring is modified, or a class which has no docstring has
> >methods added to it) without adding documentation.
> >
> >Since when are tests public APIs?
>
> Hmm, good point, I guess "public API" is a bit misleading there.
>
> Tests also need docstrings to explain what they're testing, and what code
> they're supposed to cover.  The test docstrings need to explain the verified
> constraints of the public API, or to explicitly say "this is not testing a
> public API" - although the vast majority of tests are verifying at least
> some behavior of a public API, although not directly.
>
> I'll update that document a bit later.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060922/3c2f7262/attachment.html>

From ellisonbg.net at gmail.com  Fri Sep 22 11:38:40 2006
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Fri, 22 Sep 2006 11:38:40 -0600
Subject: [Twisted-Python] PB over SSH
In-Reply-To: <20060922005406.1717.2081837661.divmod.quotient.56250@ohm>
References: <34457a4c0609202013j41faa26bp9d4e256cb0d71189@mail.gmail.com>
	<20060922005406.1717.2081837661.divmod.quotient.56250@ohm>
Message-ID: <6ce0ac130609221038w42a07393t63bad06ec8a2b099@mail.gmail.com>

When I have needed this I have just used SSH tunneling.  It works like a charm.

Brian

On 9/21/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Wed, 20 Sep 2006 22:13:38 -0500, Aron Bierbaum <aronbierbaum at gmail.com> wrote:
> >Is there currently any way to us PB over a SSH connection? I noticed that
> >there was a post on this list back in Feb 2004, but I didn't see anyone
> >mention it after that. If anyone has any sample code that does this I would
> >greatly appreciate it.
>
> PB requires a particular API from its transport, like many protocols.  It is
> entirely possible to implement this API in terms of SSH, and probably not even particularly difficult.  However, no one has done this yet (and contributed the result to Twisted), so if you will need to if you want to run PB over SSH.
>
> Running PB over SSL is significantly easier and may provide all of the features you are looking for.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From stephen at thorne.id.au  Sat Sep 23 05:42:18 2006
From: stephen at thorne.id.au (Stephen Thorne)
Date: Sat, 23 Sep 2006 21:42:18 +1000
Subject: [Twisted-Python] New OS X buildbot courtesy of Apple Computer,
	Inc.
In-Reply-To: <20060921180025.1717.206593441.divmod.quotient.55983@ohm>
Message-ID: <20060923114218.1717.1845542246.divmod.quotient.57618@ohm>

On Thu, 21 Sep 2006 14:00:25 -0400, glyph at divmod.com wrote:
>And finally, thanks to Stephen Thorne, who has been tirelessly keeping our 
>tests running on a personal machine, and helping to keep the OS X platform 
>supported until now.  Stephen, you can finally turn it off :-).

Well, I've been considering trying out this loonix thing. I'm going to see how you bun two runs on my powermac. :)

Please remove the OS-X column on the buildslave, but if it's no hassle, please leave the pypy column there. I'm going to be hacking on that when I get back from my week away.

Regards,
Stephen Thorne.



From glyph at divmod.com  Sat Sep 23 20:20:46 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 23 Sep 2006 22:20:46 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
 corefoundation, threadedselect, wx
In-Reply-To: 0
Message-ID: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>

There are a few reactors in the twisted codebase which currently have no maintainer and do not pass the test suite.  I've listed them in the subject of this message.

I'm comfortable to leave half-supported or potentially broken reactors in the Twisted distribution, as long as they were clearly marked as such and there was some at least potential path to making them work.  IOCP, for example, is good enough for many uses despite not passing the full test suite (and there are rumours of a new buildbot for it appearing soon...)  However, leaving a pile of known-to-be-broken and unmaintained reactors in Twisted is just going to give the impression that Twisted is buggy, and increase the amount of dead code that people reading the codebase can be confused by.

The reactors presented in the subject all seem to have been abandoned.  Even our friends at Apple are mainly concerned with the use of Twisted for server work, and while they've been attempting to help us find someone to poke around GUI <-> reactor integration on OS X, it's not their area of expertise.

At this point, I believe that setting up a buildslave for any of these reactors should be possible with our existing build infrastructure.  Of course, contributions of additional buildslaves are always welcome :), but we can set up slaves for wx and corefoundation ourselves if someone is going to actually start trying to fix them.

I know that there are people in the Twisted community integrating it with wxpython and qt.  I'd really like it if someone could commit to at least contributing some patches in the future.

If I don't hear anything on these fronts before the Twisted 2.6 release, those reactors will be removed from SVN trunk at HEAD and not be included in the 2.6 release.  (The next planned release is Twisted 2.5, so you still have some breathing room.)

Currently qtreactor is being tested on the "reactors" buildslave and is keeping it red, despite the fact that all the other reactors on that slave work fine (modulo a few elusive race conditions).  wxreactor is not being tested at all.  I believe we should split qt out so that it can have its own red column and not interfere with the gtk and poll reactors, and if we run a wx slave it should also be separate.

Although I know of Qt and WX users, I do not know of anyone currently using the corefoundation reactor in an application.  Are you out there?  Is it being used?

The last word I heard on the corefoundation reactor was from its author, Bob Ippolito, who suggested that it was not the correct way to integrate Twisted with GUI applications.  However, his suggested replacement (threadedselectreactor) is buggy, also unmaintained, and IMHO misdesigned, so in the absence of other knowledge I believe that continuing to provide some corefoundation support would be the best way to support the mac.  After receiving a shiny new computer from them I feel inclined to do the best job possible to support Apple's platform, but I simply don't have the time, knowledge, or energy to do the development myself.

With the aforementioned hardware, I believe it would not be much trouble for us to set up a corefoundation reactor buildslave of our own, but we still need someone who will actually work on fixing the bugs, otherwise, the code should be removed.

threadedselectreactor is an interesting concept but hopelessly broken and untested in its current implementation.  I believe it should definitely be removed as a reactor of its own, although as a supporting basis for other reactors it might be good to leave around.  While not entirely correct, it is certainly _less_ broken than the previous ghastly attempt at a wxreactor.  I think it would be a good idea to remove threadedselect from the reactors list in Twisted 2.6, although if someone wants to convince me otherwise with a use-case (and a similar promise of future patches), I'd be happy to hear it.

Once all these reactors have dedicated buildslaves and pass the tests, it is far less important that we have dedicated maintainers.  We can simply insist that all future commits keep all the buildslaves green.  I say this because I want to be clear that I am not asking for a lifetime commitment or we are going to instantly desupport your platform: I'm asking for help getting to the point where we can support multiple platforms without having to be experts in all of them.



From waterbug at pangalactic.us  Sat Sep 23 21:33:11 2006
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Sat, 23 Sep 2006 23:33:11 -0400
Subject: Other wx/twisted methods (was Re: [Twisted-Python] removing
	unsupported
	reactors in twisted 2.6: qt, corefoundation, threadedselect, wx)
In-Reply-To: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
References: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
Message-ID: <4515FC77.60407@pangalactic.us>

Hi Glyph,

I completely agree with your position on moving those reactors out of
the production Twisted codebase.  The only one remotely interesting to
me is the wx reactor, but having thought about this issue for a long
time, I've decided to try the Pyro connection (proposed by someone).

If I can get that to work (which I haven't had time to play with yet),
it would seem to offer several advantages:  (1) running wx and twisted
event loops in completely separate processes, (2) making relatively
minimal use of threads in the wx process (well-supported by the wx
libraries) to drive Pyro, and using the usual twisted paradigm in
the twisted process.  I would appreciate any advice, but I don't see
any show-stoppers.  I would do the Pyro communications on 127.0.0.1,
since Pyro has essentially zero security, keeping it completely within
the local machine.  Twisted would handle all external protocols.

Thoughts?

Cheers,
Steve



From felipe.lessa at gmail.com  Sat Sep 23 21:44:03 2006
From: felipe.lessa at gmail.com (Felipe Almeida Lessa)
Date: Sun, 24 Sep 2006 00:44:03 -0300
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
References: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
Message-ID: <c2701f5c0609232044y5c2b6b79k58c10ef3f5488144@mail.gmail.com>

2006/9/23, glyph at divmod.com <glyph at divmod.com>:
[snip]
> Although I know of Qt and WX users, I do not know of anyone currently using the corefoundation reactor in an application.  Are you out there?  Is it being used?
[snip]

So the only GUI toolkits that will be officialy supported are going to
be Gtk, Tk and PyUI?

-- 
Felipe.



From glyph at divmod.com  Sat Sep 23 22:16:16 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 Sep 2006 00:16:16 -0400
Subject: Other wx/twisted methods (was Re: [Twisted-Python] removing
	unsupported
	reactors in twisted 2.6: qt, corefoundation, threadedselect, wx)
In-Reply-To: <4515FC77.60407@pangalactic.us>
Message-ID: <20060924041616.1717.1221777311.divmod.quotient.58251@ohm>

On Sat, 23 Sep 2006 23:33:11 -0400, Stephen Waterbury <waterbug at pangalactic.us> wrote:

>If I can get that to work (which I haven't had time to play with yet),
>it would seem to offer several advantages:  (1) running wx and twisted
>event loops in completely separate processes, (2) making relatively
>minimal use of threads in the wx process (well-supported by the wx
>libraries) to drive Pyro, and using the usual twisted paradigm in
>the twisted process.  I would appreciate any advice, but I don't see
>any show-stoppers.  I would do the Pyro communications on 127.0.0.1,
>since Pyro has essentially zero security, keeping it completely within
>the local machine.  Twisted would handle all external protocols.

Thanks for the suggestion, Stephen.  I don't think I like this approach though.

The major reason is that it introduces a process boundary between Twisted code and WX code.  In every other toolkit Twisted supports, you can handle GUI events and network events in the same process, in the same thread.   That makes it possible to have individual state machines which can emit output in the form of either GUI updates and writes to streams, and you can similarly receive GUI events or data from the network as input.

Keep in mind that each of the toolkits that WX backends to already *has* either a supported reactor or a proof of concept for Twisted integration: GTK+, the Win32 event loop, and Cococa.  It's not that we can't get network I/O notifications from the platform.  The real problem here is that WX obscures the underlying APIs for integrating sockets.  (I say "obscures" rather than "does not wrap" because the last time I tried to use gtk reactor with a gtk build of wx, the process segfaulted after emitting a pile of dynamic linker errors.  I have no idea what would happen on Windows or the Mac.)  Whatever we're going to do at this point without getting some new code from the WX developers is going to be a workaround.

That said, the mechanism that you propose may be the best way to practically integrate Twisted and WX today.  If it is, I think that it would work better as a separate project, because it is a workaround with a lot of pointy edges and not a real solution.

One major reason I'd like a WX reactor to continue to exist in some form is OSAF's usage of Twisted and WX.  They have a similarly baroque model for handing data back and forth between Twisted code and GUI code, and I'd love to have something to propose to them that was (A) supported by Twisted (B) well tested, and (C) didn't involve lots of potential race conditions, as all shared-state-threading code was likely to do.  I haven't looked at it in a while, but if I remember correctly their separation between Twisted code and GUI code was fairly clean and well-thought-out, but the separation would have been unnecessary if wx had native Twisted integration.

There are other problems with a Pyro-driven Twisted subprocess, which are relevant as the goal here is a well-supported and well-tested path for integration.

Multiprocess communication and process spawning, especially on Windows, is fraught with peril.  We've been working on reliable event-driven process spawning in Twisted for years and years, and only recently have we gotten to the point where the published API works reliably cross-platform.  Given that Twisted would be left out of this loop, I imagine the process control would be rather ad-hoc, so getting the Twisted and WX processes synchronized would be problematic, and extremely hard to unit test.  Although it would be slightly easier if the Twisted proces is 'on top', you still have to inject test code into both the parent and child processes, and have a way to verify the state of both.

The last release of pyro is almost a year old.  That suggests it is not actively maintained.

Pyro doesn't have a buildbot, or (as far as I can tell from the release) any automated tests of its own.  That would make it a wash in terms of tested, robust integration support.

You'd have to re-implement the Pyro protocol on top of Twisted to communicate with it without spawning lots of threads.  That's a bunch of new code which is going to need a home, again, possibly a whole new project.  Even after that's done, Pyro is going to be spawning threads and blocking inside the WX process because the Twisted implementation isn't running there.



From glyph at divmod.com  Sat Sep 23 22:31:49 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 Sep 2006 00:31:49 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, corefoundation, threadedselect, wx
In-Reply-To: <c2701f5c0609232044y5c2b6b79k58c10ef3f5488144@mail.gmail.com>
Message-ID: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>

On Sun, 24 Sep 2006 00:44:03 -0300, Felipe Almeida Lessa <felipe.lessa at gmail.com> wrote:

>So the only GUI toolkits that will be officialy supported are going to
>be Gtk, Tk and PyUI?

Thanks for reminding me.

Neither Tk nor PyUI have buildbots.  However, they're both implemented using polling timed events running on top of another reactor... I don't know how much "support" those really count for.  It might be good to remove them as well, but they're very little code.

GTK is supported, has a buildbot, and is currently green.  Frankly, the people who currently do at least 90% of the maintenance on Twisted (myself included) only care about this toolkit, so it's the one that is likely to remain the best supported.  It is my sincere hope that someone will port GTK to the Cocoa APIs for OS X at some point in the near future.  Then I can cease caring even about corefoundation ;).

The Win32 event loop is also supported, although its buildbot still isn't green yet.  That is a "toolkit" of sorts.  I think that it might even work with MFC but I'm a bit murky on the details.

So, yes, the situation is even worse than you suggest; unless someone else volunteers to help, we will have 2 supported toolkits: GTK, and GDI.

Twisted's architecture was developed with GUI toolkits in mind, and I would like it to support as many as possible.  I hope that one day, all toolkit developers will actually care whether Twisted supports their code or not.  Until now, though, it seems that we have been unable to attract the attention of even one member of each community with the appropriate experience and motivation to help out.



From exarkun at twistedmatrix.com  Sat Sep 23 23:05:03 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Sep 2006 05:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1159074303.17.1519694493@twistedmatrix.com

Bug summary
______________________
Summary for 2006-09-17 through 2006-09-24
Bugs opened: 26    Bugs closed: 26  Total open bugs: 730 (+0)

|== Type Changes   |== Priority Changes   |== Component Changes     
|Defect:       -1  |Highest:  -9          |Conch:               +4  
|Enhancement:  +4  |High:     +1          |Core:                -1  
|Task:         -3  |Normal:   +8          |Release Management:  -1  
                   |Low:      +0          |Trial:               -1  
                                          |Web:                 -2  
                                          |Web2:                +3  
                                          |Web2.Dav:            +1  
                                          |Website:             -2  
                                          |Words:               -1  


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2098] XMPP SASL implementation chokes when no realm has been received (opened by ralphm)
    defect          words      http://twistedmatrix.com/trac/ticket/2098

[#2099] manhole telnet server broken (opened by exarkun)
    defect          conch      http://twistedmatrix.com/trac/ticket/2099

[#2100] new defgen for python 2.5 enhanced generators (opened by jknight)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2100

[#2118] ICredentialFactory.decode() should take a request instead of an HTTP method name (opened by wsanchez) (CLOSED, fixed)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2118

[#2119] Need a location: header for CREATED response (opened by wsanchez) (CLOSED, fixed)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2119

                    ===== High =====
[#2102] Access log has multiple copies of the same entry (opened by Cyrus Daboo)
    defect          web2       http://twistedmatrix.com/trac/ticket/2102

[#2103] http DIGEST authentication forced on each page refresh (opened by Cyrus Daboo) (CLOSED, duplicate)
    defect          web2       http://twistedmatrix.com/trac/ticket/2103

[#2104] HTTP digest authentication forced for each page refresh (opened by Cyrus Daboo)
    defect          web2       http://twistedmatrix.com/trac/ticket/2104

                    ===== Normal =====
[#2101] Coding standard should fallback to PEP 8 (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2101

[#2105] Go over the web2.dav API docs again (opened by wsanchez)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2105

[#2107] [patch] Greatly improve telnet performance (opened by shieldszero)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2107

[#2109] twisted.web.server imports pb from spread (opened by ghazel) (CLOSED, wontfix)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2109

[#2110] finger tutorial uses unclear python idioms. (opened by jerub)
    defect          core       http://twistedmatrix.com/trac/ticket/2110

[#2111] test trac r3756 irc/ticket creation integration (opened by exarkun) (CLOSED, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2111

[#2112] conch tests make heavy use of deprecated assert* free functions (opened by exarkun)
    defect          conch      http://twistedmatrix.com/trac/ticket/2112

[#2113] support uploads from Macromedia Flash plugins (opened by yacc)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2113

[#2114] t.conch.test.test_cftp uses reactor.iterate() (opened by jml) (CLOSED, duplicate)
    defect          conch      http://twistedmatrix.com/trac/ticket/2114

[#2115] manhole and exception (opened by synapsis)
    defect          conch      http://twistedmatrix.com/trac/ticket/2115

[#2116] sshsimpleserver.py on Windows (opened by synapsis)
    defect          conch      http://twistedmatrix.com/trac/ticket/2116

[#2117] Buildslaves without find and xargs fail remove pyc step (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2117

[#2122] Expose various accept failures to application-level code (opened by exarkun)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2122

[#2123] t.c.t.test_manhole.ManholeLoopbackStdio.testControlBackslash fails intermittently (opened by dreid)
    defect          conch      http://twistedmatrix.com/trac/ticket/2123

                    ===== Low =====
[#2106] t.p.versions needs to be updated to handle Subversion 1.4 (opened by oubiwann) (CLOSED, duplicate)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2106

[#2108] Yaarr, the docks be needing translations for the scurvy dogs. (opened by jerub) (CLOSED, wontfix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2108

[#2120] usage.Options breaks with short subcommand names longer than 1 char (opened by msalib) (CLOSED, duplicate)
    defect          core       http://twistedmatrix.com/trac/ticket/2120

[#2121] usage.Options breaks with short subcommand names longer than 1 char (opened by msalib)
    defect          core       http://twistedmatrix.com/trac/ticket/2121



Closed Bugs
______________________
                    ===== Highest =====
[#1507] trial doesn't gc.collect between test methods (opened by jknight, closed by jml, fixed)
    defect          trial      http://twistedmatrix.com/trac/ticket/1507

[#2054] ProperlyCloseFilesTestCase.testProperlyCloseFiles written in an aggressively stupid manner (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2054

[#1970] "admin/release-twisted --help" contains typo (opened by exarkun, closed by radix, fixed)
    defect          release management http://twistedmatrix.com/trac/ticket/1970

[#1968] twisted.python.versions uses implementation detail of SVN, broken on 1.4 (opened by jknight, closed by radix, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1968

[#1883] Make selected tests clean up after themselves (opened by jml, closed by jml, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1883

[#2089] twisted.words.protocol.irc.IRC.whois references undefined variable RPL_WHOISOPER, (opened by jerub, closed by moonfallen, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/2089

[#2086] t.words.basesupport attributeerror when "already connecting" (opened by moonfallen, closed by moonfallen, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/2086

[#2119] Need a location: header for CREATED response (opened by wsanchez, closed by wsanchez, fixed)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2119

[#2118] ICredentialFactory.decode() should take a request instead of an HTTP method name (opened by wsanchez, closed by wsanchez, fixed)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2118

[#662 ] twisted.internet does not handle EMFILE (Too many files) (opened by jdahlin, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/662

[#1910] delete deprecated crud from twisted.python.log (opened by radix, closed by glyph, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1910

[#1694] killing a process (opened by synapsis, closed by glyph, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1694

[#1550] [PATCH] requestReceived drops arguments after two or more '?' in the uri (opened by zectbumo, closed by exarkun, fixed)
    defect          web        http://twistedmatrix.com/trac/ticket/1550

[#2020] tkmktap is broken and probably useless, eliminate it (opened by exarkun, closed by radix, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2020

                    ===== High =====
[#2103] http DIGEST authentication forced on each page refresh (opened by Cyrus Daboo, closed by dreid, duplicate)
    defect          web2       http://twistedmatrix.com/trac/ticket/2103

[#1080] twisted.web.client _parse URL parse bug (opened by gentoo.cn, closed by glyph, fixed)
    defect          web        http://twistedmatrix.com/trac/ticket/1080

                    ===== Normal =====
[#2077] Add a report for "Tickets Pending Review" (opened by jml, closed by jml, invalid)
    enhancement     website    http://twistedmatrix.com/trac/ticket/2077

[#2111] test trac r3756 irc/ticket creation integration (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2111

[#1885] test_ssh.UtilityTestCase.testCounter emits DeprecationWarning in python2.5 (opened by jknight, closed by exarkun, fixed)
    defect          conch      http://twistedmatrix.com/trac/ticket/1885

[#2114] t.conch.test.test_cftp uses reactor.iterate() (opened by jml, closed by jml, duplicate)
    defect          conch      http://twistedmatrix.com/trac/ticket/2114

[#1543] Request for Documentation: How to Review a Branch (opened by jml, closed by jml, fixed)
    defect          website    http://twistedmatrix.com/trac/ticket/1543

[#2109] twisted.web.server imports pb from spread (opened by ghazel, closed by jknight, wontfix)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2109

                    ===== Low =====
[#2106] t.p.versions needs to be updated to handle Subversion 1.4 (opened by oubiwann, closed by jknight, duplicate)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2106

[#2108] Yaarr, the docks be needing translations for the scurvy dogs. (opened by jerub, closed by jknight, wontfix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2108

[#2120] usage.Options breaks with short subcommand names longer than 1 char (opened by msalib, closed by exarkun, duplicate)
    defect          core       http://twistedmatrix.com/trac/ticket/2120

[#191 ] twisted.internet refactor to better support non-select reactors (opened by etrepum, closed by glyph, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/191





From felipe.lessa at gmail.com  Sat Sep 23 23:10:00 2006
From: felipe.lessa at gmail.com (Felipe Almeida Lessa)
Date: Sun, 24 Sep 2006 02:10:00 -0300
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
References: <c2701f5c0609232044y5c2b6b79k58c10ef3f5488144@mail.gmail.com>
	<20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
Message-ID: <c2701f5c0609232210w69944ffl5787230a1757e330@mail.gmail.com>

2006/9/24, glyph at divmod.com <glyph at divmod.com>:
> Frankly, the people who currently do at least 90% of the maintenance on Twisted (myself included) only care about this toolkit, so it's the one that is likely to remain the best supported.

I'm developing a small Twisted application and was planning to write
it using wx to learn how to use this toolkit, that's why I asked about
it. Looking at the docs and the source, it sounds like wxreactor works
nicely -- the author says that tests are expected to fail --, so it's
somewhat disappointing to know that it's going to be removed from the
new Twisted version. Nevertheless, I don't have the knowledge to fix
whatever bugs it have.

So maybe I'll stick with Gtk =).

Thanks,

-- 
Felipe.



From uwe at oss4u.com  Sat Sep 23 23:41:23 2006
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 23 Sep 2006 22:41:23 -0700
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
References: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
Message-ID: <200609232241.23444.uwe@oss4u.com>

Well, for me the threadedselectreactor works quite nicely with wx.
It has it's flaws and I've spent some time working around them. On the other 
hand if that reactor is dropped, I'd rather drop Twisted from my application 
than rewrite the GUI part with a toolkit that kind of sucks and looks like 
crap on most platforms (i.e. GTK or TK).
I like Twisted PB and I like wx - that's pretty much all I have to say about 
this.  Let's say it this way: the network part of an application is what 
makes it work, the GUI part is what makes the money - guess what's dropped 
first :-(

UC


On Saturday 23 September 2006 21:31, glyph at divmod.com wrote:
> On Sun, 24 Sep 2006 00:44:03 -0300, Felipe Almeida Lessa 
<felipe.lessa at gmail.com> wrote:
> >So the only GUI toolkits that will be officialy supported are going to
> >be Gtk, Tk and PyUI?
>
> Thanks for reminding me.
>
> Neither Tk nor PyUI have buildbots.  However, they're both implemented
> using polling timed events running on top of another reactor... I don't
> know how much "support" those really count for.  It might be good to remove
> them as well, but they're very little code.
>
> GTK is supported, has a buildbot, and is currently green.  Frankly, the
> people who currently do at least 90% of the maintenance on Twisted (myself
> included) only care about this toolkit, so it's the one that is likely to
> remain the best supported.  It is my sincere hope that someone will port
> GTK to the Cocoa APIs for OS X at some point in the near future.  Then I
> can cease caring even about corefoundation ;).
>
> The Win32 event loop is also supported, although its buildbot still isn't
> green yet.  That is a "toolkit" of sorts.  I think that it might even work
> with MFC but I'm a bit murky on the details.
>
> So, yes, the situation is even worse than you suggest; unless someone else
> volunteers to help, we will have 2 supported toolkits: GTK, and GDI.
>
> Twisted's architecture was developed with GUI toolkits in mind, and I would
> like it to support as many as possible.  I hope that one day, all toolkit
> developers will actually care whether Twisted supports their code or not. 
> Until now, though, it seems that we have been unable to attract the
> attention of even one member of each community with the appropriate
> experience and motivation to help out.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
	UC

--
Open Source Solutions 4U, LLC	1618 Kelly St
Phone:  +1 707 568 3056		Santa Rosa, CA 95401
Cell:   +1 650 302 2405		United States
Fax:    +1 707 568 6416



From jml at mumak.net  Sun Sep 24 01:26:10 2006
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 24 Sep 2006 17:26:10 +1000
Subject: [Twisted-Python] Removing _wait from Trial
Message-ID: <d06a5cd30609240026y3b50e953s472e4dd4eb70fb06@mail.gmail.com>

So, I would like to remove _wait() from Trial and make it work like a
regular Twisted application. I've had all this stuff on my brain, and
have decided to dump it here for feedback. Here's how the plan looks
at the moment[1]:


1. Deprecate the use of reactor-spinning things within tests. (Twisted 2.5)

We've already done a great deal of work on this. spinWhile, spinUntil
and util.wait have alll been deprecated and removed.

#2090 (ready for review) actually issues deprecation warnings when the
reactor is iterated, crashed or stopped within a test.

Unfortunately, some of Trial's cleanup code spins the reactor (see
t.trial.util._Janitor.do_cleanPending). This has to go.


2. Tighten test cleanup errors. (Twisted 2.5)

#2091 (ready for review) fulfils a long-standing promise. The "reactor
unclean" warnings have been turned into errors. It doesn't help us
remove _wait, but

To remove _wait, we'll also have to remove the two calls to
reactor.iterate() from _Janitor (see #2092). That means that many
tests that *thought* they were cleaning up the reactor properly will
find out that they weren't. We can reduce the number of errors by
simulating reactor.iterate() using callLater. However, experiments
show that even with this bandaid, there will still be new errors in
the Twisted suite.

That means we will have to either:
a) surprise our users with new errors in their tests
b) find some way to introduce this gradually.

Obviously everyone[2] would prefer b). I've filed #2124 explaining how
that might work.


3. Introduce asynchronous APIs to Trial (Twisted 2.6)

Currently TestCase.run() is a blocking call. I wish it could remain a
blocking call, but it can't.

The branch for #1781 makes a SyncTestCase and an AsyncTestCase. run()
works in SyncTestCase and doesn't work in AsyncTestCase. For
AsyncTestCase, one uses runDeferred().

Although the branch for #1781 will need to be abandoned, these new
classes should be brought in for Twisted 2.6 (without breaking run()).
Naturally, this affects many, many tests in Trial.

We might even add runDeferred to TestSuite at this point.


4. Deprecate TestSuite.run and TestCase.run. (Twisted 2.6)

Neither of these will work without wait[3] and they are both public
APIs. Also remove the calls to iterate() from _Janitor at this point.


5. Actually remove _wait. (Twisted 2.7)

Add runDeferred() to TestSuite, make run() raise NotImplementedErrors
for TestCase and TestSuite. Alter TrialSuite to start and stop the
reactor.

I can't find a theory to explain why this change will break unexpected
tests in the Twisted suite. However, it will certainly happen. That
means that some tests in user code will probably break as well. I
don't know how we could make this any smoother.


Questions:
- What should I do with the ticket #1781?
- What should I do with the branch for #1781?
- What more can we do to reduce the number of tests that will break
when _wait is removed?
- Thoughts?

thanks for getting this far :),
jml

[1] Incidentally, all of this would be superfluous if reactors were restartable.
[2] Well, almost everyone
[3] ... or restartable reactors.



From waterbug at pangalactic.us  Sun Sep 24 02:53:54 2006
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Sun, 24 Sep 2006 04:53:54 -0400
Subject: Other wx/twisted methods (was Re: [Twisted-Python]
	removing	unsupported
	reactors in twisted 2.6: qt, corefoundation, threadedselect, wx)
In-Reply-To: <20060924041616.1717.1221777311.divmod.quotient.58251@ohm>
References: <20060924041616.1717.1221777311.divmod.quotient.58251@ohm>
Message-ID: <451647A2.3000709@pangalactic.us>

glyph at divmod.com wrote:
> On Sat, 23 Sep 2006 23:33:11 -0400, Stephen Waterbury 
> <waterbug at pangalactic.us> wrote:
> 
>> If I can get that to work (which I haven't had time to play with yet),
>> it would seem to offer several advantages:  (1) running wx and twisted
>> event loops in completely separate processes, (2) making relatively
>> minimal use of threads in the wx process (well-supported by the wx
>> libraries) to drive Pyro, and using the usual twisted paradigm in
>> the twisted process.  I would appreciate any advice, but I don't see
>> any show-stoppers.  I would do the Pyro communications on 127.0.0.1,
>> since Pyro has essentially zero security, keeping it completely within
>> the local machine.  Twisted would handle all external protocols.
> 
> Thanks for the suggestion, Stephen.  I don't think I like this approach 
> though.
> 
> The major reason is that it introduces a process boundary between 
> Twisted code and WX code.

I see that as a *good* thing.  ;)

> In every other toolkit Twisted supports,

... of which there's really only *one* (GTK) that's at all
interesting to anyone doing cross-platform apps ... and
even that one, IMO, isn't very cross-platform, although
that could certainly be argued either way ...

> you 
> can handle GUI events and network events in the same process, in the 
> same thread.   That makes it possible to have individual state machines 
> which can emit output in the form of either GUI updates and writes to 
> streams, and you can similarly receive GUI events or data from the 
> network as input.

Okay.  I'm willing to do without that.

> Keep in mind that each of the toolkits that WX backends to already *has* 
> either a supported reactor or a proof of concept for Twisted 
> integration: GTK+, the Win32 event loop, and Cococa.  It's not that we 
> can't get network I/O notifications from the platform.  The real problem 
> here is that WX obscures the underlying APIs for integrating sockets.  
> (I say "obscures" rather than "does not wrap" because the last time I 
> tried to use gtk reactor with a gtk build of wx, the process segfaulted 
> after emitting a pile of dynamic linker errors.  I have no idea what 
> would happen on Windows or the Mac.)  Whatever we're going to do at this 
> point without getting some new code from the WX developers is going to 
> be a workaround.

I think *that* is the real problem ... not technical, just interest
from the right people.  I've waited enough years (about 5) that
I've given up on that.

> That said, the mechanism that you propose may be the best way to 
> practically integrate Twisted and WX today.  If it is, I think that it 
> would work better as a separate project, because it is a workaround with 
> a lot of pointy edges and not a real solution.

What's reality?  :)  OTOH ...
I completely agree that it should not be part of Twisted
at all ... but if I succeed with it, I'll certainly document what I
do.

> One major reason I'd like a WX reactor to continue to exist in some form 
> is OSAF's usage of Twisted and WX.  They have a similarly baroque model 
> for handing data back and forth between Twisted code and GUI code, ...

... and everything else (sorry, couldn't resist ;) ...

> ... and 
> I'd love to have something to propose to them that was (A) supported by 
> Twisted (B) well tested, and (C) didn't involve lots of potential race 
> conditions, as all shared-state-threading code was likely to do.  I 
> haven't looked at it in a while, but if I remember correctly their 
> separation between Twisted code and GUI code was fairly clean and 
> well-thought-out,

... hmmm ... I've been on all the OSAF Chandler/Scooby/Cosmo lists
since April (and that's a lot of freakin' mail ;), and not *once* in
that interval has "twisted" occurred in the subject line of a
message, and no substantive discussion of it in the bodies either.

I know about their zanshin twisted-based framework for WebDAV/CalDAV,
and that it's used in their Sharing architecture, which is used by
the Chandler wx GUI, but I just updated my chandler svn checkout, and
I counted 17 occurrences of the zanshin "blockUntil" function in the
Sharing.py module ... if it's so clean, how come they need those?
(In zanshin's docs, "blockUntil" is billed as "for test purposes" ... ;)

> but the separation would have been unnecessary if wx 
> had native Twisted integration.

Well, yeah, but I don't think OSAF has the resources to put into it
either, and Robin *works* for OSAF.

> There are other problems with a Pyro-driven Twisted subprocess, which 
> are relevant as the goal here is a well-supported and well-tested path 
> for integration.
> 
> Multiprocess communication and process spawning, especially on Windows, 
> is fraught with peril.  We've been working on reliable event-driven 
> process spawning in Twisted for years and years, and only recently have 
> we gotten to the point where the published API works reliably 
> cross-platform.  Given that Twisted would be left out of this loop, I 
> imagine the process control would be rather ad-hoc, so getting the 
> Twisted and WX processes synchronized would be problematic, and 
> extremely hard to unit test.  Although it would be slightly easier if 
> the Twisted proces is 'on top', you still have to inject test code into 
> both the parent and child processes, and have a way to verify the state 
> of both.
> 
> The last release of pyro is almost a year old.  That suggests it is not 
> actively maintained.

Or else it just works.  ;)

> Pyro doesn't have a buildbot, or (as far as I can tell from the release) 
> any automated tests of its own.  That would make it a wash in terms of 
> tested, robust integration support.

As if there's going to be some other "tested, robust integration
support" ... nothing on the horizon that I can see (and as I say,
I've been watching for a long time).

> You'd have to re-implement the Pyro protocol on top of Twisted to 
> communicate with it without spawning lots of threads.  That's a bunch of 
> new code which is going to need a home, again, possibly a whole new 
> project.  Even after that's done, Pyro is going to be spawning threads 
> and blocking inside the WX process because the Twisted implementation 
> isn't running there.

Process spawning!  Rusty code!  Spawning threads, *and* blocking!
My, you do paint a rosy picture.  All your handwaving and FUD makes
me want to try it, because it's probably quicker and easier than
discussing it.  But thanks for the warnings, anyway!  ;)

Cheers,
Steve




From mwh at python.net  Sun Sep 24 03:28:08 2006
From: mwh at python.net (Michael Hudson)
Date: Sun, 24 Sep 2006 10:28:08 +0100
Subject: [Twisted-Python] Re: removing unsupported reactors in twisted 2.6:
 qt, corefoundation, threadedselect, wx
References: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
Message-ID: <2mac4pk40n.fsf@starship.python.net>

glyph at divmod.com writes:

> Although I know of Qt and WX users, I do not know of anyone
> currently using the corefoundation reactor in an application.  Are
> you out there?  Is it being used?
>
> The last word I heard on the corefoundation reactor was from its
> author, Bob Ippolito, who suggested that it was not the correct way
> to integrate Twisted with GUI applications.  However, his suggested
> replacement (threadedselectreactor) is buggy, also unmaintained, and
> IMHO misdesigned, so in the absence of other knowledge I believe
> that continuing to provide some corefoundation support would be the
> best way to support the mac.  After receiving a shiny new computer
> from them I feel inclined to do the best job possible to support
> Apple's platform, but I simply don't have the time, knowledge, or
> energy to do the development myself.

It would be annoying to me if I could not use Twisted and PyObjC
together.  Currently I have a couple of noddy applications (the GUI
equivalent of 5 line shell scripts) doing this (using tsr) and they
work fine.

I understand why you want to have less untrustworthy code in Twisted,
but I think throwing out both tsr and cfreactor in 2.6 would be a step
back, not forwards.

I could claim that I'll try to look at cfreactor, but it's not
especially realistic...

Cheers,
mwh

-- 
  "Also, does the simple algorithm you used in Cyclops have a name?"
  "Not officially, but it answers to "hey, dumb-ass!"
                       -- Neil Schemenauer and Tim Peters, 23 Feb 2001




From therve at free.fr  Sun Sep 24 07:20:19 2006
From: therve at free.fr (Thomas HERVE)
Date: Sun, 24 Sep 2006 15:20:19 +0200
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, corefoundation, threadedselect, wx
In-Reply-To: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
References: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
Message-ID: <20060924152019.tet5k79soc0s4coc@itchy.wasabout.net>

Quoting glyph at divmod.com:

> Currently qtreactor is being tested on the "reactors" buildslave and 
> is keeping it red, despite the fact that all the other reactors on 
> that slave work fine (modulo a few elusive race conditions).  
> wxreactor is not being tested at all.  I believe we should split qt 
> out so that it can have its own red column and not interfere with the 
> gtk and poll reactors, and if we run a wx slave it should also be 
> separate.

The next QT version (4.2, currently in RC1) contains support for the 
Glib eventloop. This has to be tested, but it promises use of the gtk 
reactor with Qt application. Qt 4.2 (and PyQt) is not released but 
should be by the time of Twisted 2.6; we could then write a 
documentation about integration. The drawback is that you'll need glib 
(ie, python-gtk) to write a Qt app.

We also have a qt4 reactor (http://twistedmatrix.com/trac/ticket/1770) 
that needs a maintener. Last time I checked few things were needed to 
make the test suite pass.

-- 
Thomas


----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.




From itamar at itamarst.org  Sun Sep 24 08:54:15 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 24 Sep 2006 10:54:15 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, corefoundation, threadedselect, wx)
In-Reply-To: <20060924041616.1717.1221777311.divmod.quotient.58251@ohm>
References: <20060924041616.1717.1221777311.divmod.quotient.58251@ohm>
Message-ID: <1159109655.5657.12.camel@localhost.localdomain>

I haven't received the original email, for some reason, so apologies for
respoding in wrong place in thread.

Removing is a bad idea, although adding quality warning seems like a
good idea:

qt is failing *7* tests out of 3034, all but one i; that doesn't seem to
merit removing it. If there were serious problems I would expect we
would have many bug reports from qt users, but we don't.

cf... dunno.

tsreactor is private in twisted - starts with _, so it doesn't really
guarantee anything or make any promises about working, and it's very
useful for integrating with broken event loops.

wxreactor is a tsreactor wrapper which makes it suck less for the wx
case. AFAICT wx is one of the most popular ui toolkits for python, so
people will want to use it; wxreactor for all it faults is in most cases
going to be way better than whatever people try to do on their own,
especially if the branch I have lying around is ever merged.

The basic argument here is the same: 

1. People want to use these GUI toolkits.
2. They will thus either drop Twisted and write their own networking
framework, or they will write their own GUI integration code. Both of
these cases result in code that is likely will be worse than our current
providing.

So as long we are up front and visible about existing limitations in
these reactors, our users benefit by us including them.




From exarkun at divmod.com  Sun Sep 24 09:20:51 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 24 Sep 2006 11:20:51 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, corefoundation, threadedselect, wx
In-Reply-To: <20060924152019.tet5k79soc0s4coc@itchy.wasabout.net>
Message-ID: <20060924152051.1717.2029822361.divmod.quotient.58629@ohm>

On Sun, 24 Sep 2006 15:20:19 +0200, Thomas HERVE <therve at free.fr> wrote:
>Quoting glyph at divmod.com:
>>Currently qtreactor is being tested on the "reactors" buildslave and is 
>>keeping it red, despite the fact that all the other reactors on that slave 
>>work fine (modulo a few elusive race conditions).  wxreactor is not being 
>>tested at all.  I believe we should split qt out so that it can have its 
>>own red column and not interfere with the gtk and poll reactors, and if we 
>>run a wx slave it should also be separate.
>
>The next QT version (4.2, currently in RC1) contains support for the Glib 
>eventloop. This has to be tested, but it promises use of the gtk reactor 
>with Qt application. Qt 4.2 (and PyQt) is not released but should be by the 
>time of Twisted 2.6; we could then write a documentation about integration. 
>The drawback is that you'll need glib (ie, python-gtk) to write a Qt app.
>
>We also have a qt4 reactor (http://twistedmatrix.com/trac/ticket/1770) that 
>needs a maintener. Last time I checked few things were needed to make the 
>test suite pass.
>

AFAICT, Qt4 also fixes the problem which is causing the current qtreactor
test failures.

Jean-Paul



From glyph at divmod.com  Sun Sep 24 13:34:54 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 Sep 2006 15:34:54 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
In-Reply-To: <20060924152019.tet5k79soc0s4coc@itchy.wasabout.net>
Message-ID: <20060924193454.1717.730206262.divmod.quotient.58820@ohm>

On Sun, 24 Sep 2006 15:20:19 +0200, Thomas HERVE <therve at free.fr> wrote:
>Quoting glyph at divmod.com:
>>Currently qtreactor is being tested on the "reactors" buildslave and is 
>>keeping it red, despite the fact that all the other reactors on that slave 
>>work fine (modulo a few elusive race conditions).  wxreactor is not being 
>>tested at all.  I believe we should split qt out so that it can have its 
>>own red column and not interfere with the gtk and poll reactors, and if we 
>>run a wx slave it should also be separate.

>The next QT version (4.2, currently in RC1) contains support for the Glib 
>eventloop. This has to be tested, but it promises use of the gtk reactor 
>with Qt application. Qt 4.2 (and PyQt) is not released but should be by the 
>time of Twisted 2.6; we could then write a documentation about integration. 

That would be great.  Is that going to be the default mainloop or an optional add-on?

>The drawback is that you'll need glib (ie, python-gtk) to write a Qt app.

Some might not call that a drawback ;).

>We also have a qt4 reactor (http://twistedmatrix.com/trac/ticket/1770) that 
>needs a maintener. Last time I checked few things were needed to make the 
>test suite pass.

Are you willing to have a crack at fixing that code?



From glyph at divmod.com  Sun Sep 24 13:39:00 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 Sep 2006 15:39:00 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, 
In-Reply-To: <200609232241.23444.uwe@oss4u.com>
Message-ID: <20060924193900.1717.89550137.divmod.quotient.58826@ohm>

On Sat, 23 Sep 2006 22:41:23 -0700, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:
>Well, for me the threadedselectreactor works quite nicely with wx.
>It has it's flaws and I've spent some time working around them. On the other
>hand if that reactor is dropped, I'd rather drop Twisted from my application
>than rewrite the GUI part with a toolkit that kind of sucks and looks like
>crap on most platforms (i.e. GTK or TK).

You have lots of other options.

1. Continue using the wxreactor code by copying it into your application.  We could even provide a separate page with "unmaintained reactors" for download.  That way you could fix the reactor   I'm just talking about removing the code from Twisted, not ordering soldiers to destroy it everywhere that it exists.  In fact, this would probably be better for you anyway, if you intend to keep up with future versions of Twisted, because it would allow you to apply hacks to keep your particular application working even if the reactor in question breaks with a new release of Twisted.

2. Help fix the problem.  This is really what I'd prefer.  You don't have to have all the appropriate knowledge right now, just sufficient interest and energy to commit to *caring* that the buildbot is red in the future, and trying to fix it.

3. Find someone else to fix the problem.  Do you know any other wx/twisted users who don't subscribe to this list, but know something about networking?

>I like Twisted PB and I like wx - that's pretty much all I have to say about
>this.  Let's say it this way: the network part of an application is what
>makes it work, the GUI part is what makes the money - guess what's dropped
>first :-(

4. Finance someone else to fix the problem, since you say you're making money from this.  Maybe you can find a university student with enough time on their hands who would do it for a few hundred bucks.  If you want to make money off of other people's work without contributing anything back, you may find that occasionally they do not do things in the most convenient way possible for you :).



From glyph at divmod.com  Sun Sep 24 13:42:11 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 Sep 2006 15:42:11 -0400
Subject: [Twisted-Python] Re: removing unsupported reactors in twisted 2.6:
In-Reply-To: <2mac4pk40n.fsf@starship.python.net>
Message-ID: <20060924194211.1717.749203560.divmod.quotient.58830@ohm>

On Sun, 24 Sep 2006 10:28:08 +0100, Michael Hudson <mwh at python.net> wrote:
>glyph at divmod.com writes:

>I understand why you want to have less untrustworthy code in Twisted,
>but I think throwing out both tsr and cfreactor in 2.6 would be a step
>back, not forwards.

The alternative is to eventually ship a version of Twisted where that reactor doesn't work at all.  (Heck, maybe it doesn't work now, I don't know.  I haven't heard from anyone using it yet.)  As I said to Uwe, I am saying that these reactors should not be distributed with Twisted because we don't know whether they work; I am not saying that we should aggressively attempt to destroy all copies of this code present anywhere.

>I could claim that I'll try to look at cfreactor, but it's not
>especially realistic...

If you think that tsreactor is the right way to go for mac apps, by all means, have a look at that instead.  It doesn't sound like you'd care if cfreactor went away.

Ideally, you could write a "macreactor" which would set up the appropriate interleave and shutdown with tsreactor so that we could run a buildbot in the context of a mac gui, similar to what itamar's wxreactor does, and start fixing tests from there.



From glyph at divmod.com  Sun Sep 24 13:43:42 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 Sep 2006 15:43:42 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
In-Reply-To: <1159109655.5657.12.camel@localhost.localdomain>
Message-ID: <20060924194342.1717.434036965.divmod.quotient.58832@ohm>

On Sun, 24 Sep 2006 10:54:15 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:

>Removing is a bad idea, although adding quality warning seems like a
>good idea:

Where would you suggest adding that warning?

>qt is failing *7* tests out of 3034, all but one i; that doesn't seem to
>merit removing it. If there were serious problems I would expect we
>would have many bug reports from qt users, but we don't.

I don't expect that we'll ever hear from users about anything, unless we threaten them directly :).

Qt is definitely in a better situation than the other reactors we're talking about.  However, it's very likely that code could be added or changed which would make it "redder" and nobody would notice until well after the fact.  Can we set those tests to 'skip' or 'todo' in the context of the Qt reactor and call that "good enough"?

tsreactor failed something like 30 tests the first time I ran trial on it and something like 100 the second time.  The third run did not complete.  I assume it's mainly race conditions which are killing it, but I don't know where they are.

>tsreactor is private in twisted - starts with _, so it doesn't really
>guarantee anything or make any promises about working, and it's very
>useful for integrating with broken event loops.

It's exposed to users as a reactor on the command line.  Maybe *that* should have an "_" added to it as well.  However, if we're going to keep it around, it should have a buildbot, end of story.

>wxreactor is a tsreactor wrapper which makes it suck less for the wx
>case. AFAICT wx is one of the most popular ui toolkits for python, so
>people will want to use it;

If it's so popular, why does nobody care enough to contribute a few patches to make it work properly?

>wxreactor for all it faults is in most cases going to be way better than whatever people try to do on their own,

I agree, but mainly because the average case of "whatever people try to do on their own" is going to be ad-hoc and untested.  Right now the alternative we are proposing is also ad-hoc and untested, just in a smaller way.

>especially if the branch I have lying around is ever merged.

What branch is that?  Should it be marked for review?

At any rate, it sounds like YOU care enough about wxreactor to put some effor into it, which is enough to satisfy me.  Should we add a --reactor option for wx, and set up a buildbot for wxreactor?

>The basic argument here is the same:

>1. People want to use these GUI toolkits.
>2. They will thus either drop Twisted and write their own networking
>framework, or they will write their own GUI integration code. Both of
>these cases result in code that is likely will be worse than our current
>providing.

This is true for the moment, but eventually some of the code in quesiton is going to decay to the point where it is so seriously out of sync with the rest of Twisted that it won't even import.

>So as long we are up front and visible about existing limitations in
>these reactors, our users benefit by us including them.

I don't think we have nearly enough visibility on the quality or stability of those reactors.  "Stability: Unstable" means "we might change this", not "it is known to be broken and to fail numerous tests".



From glyph at divmod.com  Sun Sep 24 13:47:24 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 Sep 2006 15:47:24 -0400
Subject: Other wx/twisted methods (was Re: [Twisted-Python]
In-Reply-To: <451647A2.3000709@pangalactic.us>
Message-ID: <20060924194724.1717.230094804.divmod.quotient.58837@ohm>

On Sun, 24 Sep 2006 04:53:54 -0400, Stephen Waterbury <waterbug at pangalactic.us> wrote:
>glyph at divmod.com wrote:
>>On Sat, 23 Sep 2006 23:33:11 -0400, Stephen Waterbury 
>><waterbug at pangalactic.us> wrote:

>>In every other toolkit Twisted supports,
>
>... of which there's really only *one* (GTK)

Fair enough.  I meant to say that the way Twisted apps are designed is to treat all events as events.  This would require writing extra glue code for certain tyes of events.

>Okay.  I'm willing to do without that.

In that case, more power to you :)

>I think *that* is the real problem ... not technical, just interest
>from the right people.  I've waited enough years (about 5) that
>I've given up on that.

I've done a lot of waiting too.  Now I'm starting with the yelling and hollering, see if that strategy works better :).

>I completely agree that it should not be part of Twisted
>at all ... but if I succeed with it, I'll certainly document what I
>do.

Sounds great to me.

>>One major reason I'd like a WX reactor to continue to exist in some form is 
>>OSAF's usage of Twisted and WX.  They have a similarly baroque model for 
>>handing data back and forth between Twisted code and GUI code, ...
>
>... and everything else (sorry, couldn't resist ;) ...

Heh.  Let's just keep it straight on the record - *I* didn't say it! :-)

>... hmmm ... I've been on all the OSAF Chandler/Scooby/Cosmo lists
>since April (and that's a lot of freakin' mail ;), and not *once* in
>that interval has "twisted" occurred in the subject line of a
>message, and no substantive discussion of it in the bodies either.

Yeah, I don't think that this is really a high priority issue for them.  Their application works fine in its current state, and they have a LOT of programmers working on it.  A change to the architecture at this point would be so expensive that any other benefits which might come along with it wouldn't be worth it.

>I know about their zanshin twisted-based framework for WebDAV/CalDAV,
>and that it's used in their Sharing architecture, which is used by
>the Chandler wx GUI, but I just updated my chandler svn checkout, and
>I counted 17 occurrences of the zanshin "blockUntil" function in the
>Sharing.py module ... if it's so clean, how come they need those?

I was just trying to be nice :-P.

>(In zanshin's docs, "blockUntil" is billed as "for test purposes" ... ;)

Oh yeah, I remember that "test" function... heh heh.  I wish them much luck in the 5-year 1000-man project it takes to remove it.

>Well, yeah, but I don't think OSAF has the resources to put into it
>either, and Robin *works* for OSAF.

I just don't think it's a relevant issue for them.  They're not even using the code I'm talking about removing.

>As if there's going to be some other "tested, robust integration
>support" ... nothing on the horizon that I can see (and as I say,
>I've been watching for a long time).

Understandable...

>Process spawning!  Rusty code!  Spawning threads, *and* blocking!
>My, you do paint a rosy picture.  All your handwaving and FUD makes
>me want to try it, because it's probably quicker and easier than
>discussing it.  But thanks for the warnings, anyway!  ;)

What can I say?  Everything is completely terrible.  Still, good luck trying to make that work; let us know how it goes.



From andrew-twisted at puzzling.org  Sun Sep 24 19:39:03 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 25 Sep 2006 11:39:03 +1000
Subject: [Twisted-Python] "Stability: Unstable" might be clearer as "API
	status: unsupported"?
In-Reply-To: <20060924194342.1717.434036965.divmod.quotient.58832@ohm>
References: <1159109655.5657.12.camel@localhost.localdomain>
	<20060924194342.1717.434036965.divmod.quotient.58832@ohm>
Message-ID: <20060925013903.GF5054@steerpike.home.puzzling.org>

glyph at divmod.com wrote:
> On Sun, 24 Sep 2006 10:54:15 -0400, Itamar Shtull-Trauring 
[...]
> 
> >So as long we are up front and visible about existing limitations in
> >these reactors, our users benefit by us including them.
> 
> I don't think we have nearly enough visibility on the quality or stability 
> of those reactors.  "Stability: Unstable" means "we might change this", not 
> "it is known to be broken and to fail numerous tests".

As a tangent, people seem to get confused by this.  Perhaps it would be less
ambiguous to replace "Stability: Unstable" with something like:

    API status: in flux

or:

    API status: unsupported

and "Stability: stable" with:

    API status: supported

Just to remove the ambiguity?

-Andrew.




From paulswartz at gmail.com  Sun Sep 24 20:46:20 2006
From: paulswartz at gmail.com (Paul Swartz)
Date: Sun, 24 Sep 2006 22:46:20 -0400
Subject: [Twisted-Python] "Stability: Unstable" might be clearer as "API
	status: unsupported"?
In-Reply-To: <20060925013903.GF5054@steerpike.home.puzzling.org>
References: <1159109655.5657.12.camel@localhost.localdomain>
	<20060924194342.1717.434036965.divmod.quotient.58832@ohm>
	<20060925013903.GF5054@steerpike.home.puzzling.org>
Message-ID: <324cfb540609241946m5a20759aod61cbb092359398@mail.gmail.com>

On 9/24/06, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> As a tangent, people seem to get confused by this.  Perhaps it would be less
> ambiguous to replace "Stability: Unstable" with something like:
>
>     API status: in flux
>
> or:
>
>     API status: unsupported
>
> and "Stability: stable" with:
>
>     API status: supported
>
> Just to remove the ambiguity?

I heartily second "in flux".  I've gotten lots of e-mail from
t.w.p.oscar users asking what "unstable" means.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From jml at mumak.net  Sun Sep 24 20:53:57 2006
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 25 Sep 2006 12:53:57 +1000
Subject: [Twisted-Python] "Stability: Unstable" might be clearer as "API
	status: unsupported"?
In-Reply-To: <20060925013903.GF5054@steerpike.home.puzzling.org>
References: <1159109655.5657.12.camel@localhost.localdomain>
	<20060924194342.1717.434036965.divmod.quotient.58832@ohm>
	<20060925013903.GF5054@steerpike.home.puzzling.org>
Message-ID: <d06a5cd30609241953i700b8d0ct2f06c4dad21a5e50@mail.gmail.com>

On 9/25/06, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> As a tangent, people seem to get confused by this.  Perhaps it would be less
> ambiguous to replace "Stability: Unstable" with something like:
>
>     API status: in flux

I reckon this is a good idea. However, it would be good to know
exactly what 'supported' and 'unsupported' mean -- particularly in
terms of DeprecationWarnings, releases etc.

cheers,
jml



From fairwinds at eastlink.ca  Sun Sep 24 22:17:14 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Mon, 25 Sep 2006 01:17:14 -0300
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <200609232241.23444.uwe@oss4u.com>
References: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
	<200609232241.23444.uwe@oss4u.com>
Message-ID: <4517584A.1030008@eastlink.ca>

Hi all. I am also using the threadedselectreactor in wx without 
problems. I have only just read these posts and cannot understand any 
reasoning to drop it. What am I missing?

Regards,
David


Uwe C. Schroeder wrote:
> Well, for me the threadedselectreactor works quite nicely with wx.
> It has it's flaws and I've spent some time working around them. On the other 
> hand if that reactor is dropped, I'd rather drop Twisted from my application 
> than rewrite the GUI part with a toolkit that kind of sucks and looks like 
> crap on most platforms (i.e. GTK or TK).
> I like Twisted PB and I like wx - that's pretty much all I have to say about 
> this.  Let's say it this way: the network part of an application is what 
> makes it work, the GUI part is what makes the money - guess what's dropped 
> first :-(
> 
> UC
> 
> 
> On Saturday 23 September 2006 21:31, glyph at divmod.com wrote:
>> On Sun, 24 Sep 2006 00:44:03 -0300, Felipe Almeida Lessa 
> <felipe.lessa at gmail.com> wrote:
>>> So the only GUI toolkits that will be officialy supported are going to
>>> be Gtk, Tk and PyUI?
>> Thanks for reminding me.
>>
>> Neither Tk nor PyUI have buildbots.  However, they're both implemented
>> using polling timed events running on top of another reactor... I don't
>> know how much "support" those really count for.  It might be good to remove
>> them as well, but they're very little code.
>>
>> GTK is supported, has a buildbot, and is currently green.  Frankly, the
>> people who currently do at least 90% of the maintenance on Twisted (myself
>> included) only care about this toolkit, so it's the one that is likely to
>> remain the best supported.  It is my sincere hope that someone will port
>> GTK to the Cocoa APIs for OS X at some point in the near future.  Then I
>> can cease caring even about corefoundation ;).
>>
>> The Win32 event loop is also supported, although its buildbot still isn't
>> green yet.  That is a "toolkit" of sorts.  I think that it might even work
>> with MFC but I'm a bit murky on the details.
>>
>> So, yes, the situation is even worse than you suggest; unless someone else
>> volunteers to help, we will have 2 supported toolkits: GTK, and GDI.
>>
>> Twisted's architecture was developed with GUI toolkits in mind, and I would
>> like it to support as many as possible.  I hope that one day, all toolkit
>> developers will actually care whether Twisted supports their code or not. 
>> Until now, though, it seems that we have been unable to attract the
>> attention of even one member of each community with the appropriate
>> experience and motivation to help out.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From glyph at divmod.com  Sun Sep 24 22:28:11 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 25 Sep 2006 00:28:11 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, 
In-Reply-To: <4517584A.1030008@eastlink.ca>
Message-ID: <20060925042811.1717.24676830.divmod.quotient.59246@ohm>

On Mon, 25 Sep 2006 01:17:14 -0300, David Pratt <fairwinds at eastlink.ca> wrote:
>Hi all. I am also using the threadedselectreactor in wx without problems. I 
>have only just read these posts and cannot understand any reasoning to drop 
>it. What am I missing?

"If it's not tested, it's broken."

The point is not that I want to drop this code from Twisted.  In fact, far from it, I would like Twisted to support as many toolkits as possible.

The point is that these reactors are currently excluded from automated test coverage, and have no maintainers.  That means that they do not currently work as well as the other reactors, but more seriously, if they were to be *completely* broken (say, start raising exceptions upon import), nobody on the Twisted team would know until users started complaining, and most likely users would not complain until well after we had already produced a broken release.

We could add automated test coverage relatively easily, *IF* someone would volunteer to at least look at the results of that coverage and contribute some fixes.  Perhaps you were not even aware that there are reliability problems with threadedselectreactor.  To see an example of the problem, run "trial --reactor threadedselect twisted".

Would you volunteer to have a look at some of these problems and try to fix them?  I have no idea how many people are using Twisted in conjunction with wxwindows today, but you would be a hero to all of them, I'm sure :).



From glyph at divmod.com  Sun Sep 24 22:32:27 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 25 Sep 2006 00:32:27 -0400
Subject: [Twisted-Python] "Stability: Unstable" might be clearer as "API
In-Reply-To: <324cfb540609241946m5a20759aod61cbb092359398@mail.gmail.com>
Message-ID: <20060925043227.1717.1115399547.divmod.quotient.59250@ohm>

On Sun, 24 Sep 2006 22:46:20 -0400, Paul Swartz <paulswartz at gmail.com> wrote:
>On 9/24/06, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
>>As a tangent, people seem to get confused by this.  Perhaps it would be 
>>less
>>ambiguous to replace "Stability: Unstable" with something like:
>>
>>     API status: in flux

>I heartily second "in flux".  I've gotten lots of e-mail from
>t.w.p.oscar users asking what "unstable" means.

I suspect that the phrase "in flux" may be equally jargonesque, although it does make more sense to me personally.

There are 3 problems here though:

 1. Modules' stability markers are not kept up-to-date as community perception changes.

Not much that we can do about that except have periodic docstring reviews.

 2. The terminology doesn't immediately make much sense.

Changing the terminology in the way that Andrew suggests could probably improve this situation, but I think that it would not be a complete solution to the problem, because:

 3. There's no good description of what we mean by the specialized terms we have chosen to describe a module's status.

I think that means we need to update this document:

    http://twistedmatrix.com/projects/core/documentation/howto/faq.html#auto5

regardless of any change (or no change) to the terminology.



From foom at fuhm.net  Sun Sep 24 22:45:29 2006
From: foom at fuhm.net (James Y Knight)
Date: Mon, 25 Sep 2006 00:45:29 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <4517584A.1030008@eastlink.ca>
References: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
	<200609232241.23444.uwe@oss4u.com> <4517584A.1030008@eastlink.ca>
Message-ID: <C66FBE50-12E2-4B29-AF8D-A7DC32F3D381@fuhm.net>

On Sep 25, 2006, at 12:17 AM, David Pratt wrote:
> Hi all. I am also using the threadedselectreactor in wx without  
> problems. I have only just read these posts and cannot understand  
> any reasoning to drop it. What am I missing?

That it's broken according to the test suite, and that nobody has  
volunteered to fix it.

Perhaps the bugs are in the tests (a cursory glance at the qt  
failures suggests this might be the case for that reactor), or  
perhaps the tested functionality is something that should be expected  
to not work for that reactor, but in any case, either the tests or  
the reactor should be fixed. Tests that have been failing for a long  
time indicates that nobody cares enough about that code to fix them.

Clearly the best resolution of this would be to have all the  
mentioned reactors fixed. Then, nobody would propose that they be  
removed.

James



From bob at redivi.com  Sun Sep 24 23:19:32 2006
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 24 Sep 2006 22:19:32 -0700
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <C66FBE50-12E2-4B29-AF8D-A7DC32F3D381@fuhm.net>
References: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
	<200609232241.23444.uwe@oss4u.com> <4517584A.1030008@eastlink.ca>
	<C66FBE50-12E2-4B29-AF8D-A7DC32F3D381@fuhm.net>
Message-ID: <6a36e7290609242219r34150f81r42b84796769f355a@mail.gmail.com>

On 9/24/06, James Y Knight <foom at fuhm.net> wrote:
> On Sep 25, 2006, at 12:17 AM, David Pratt wrote:
> > Hi all. I am also using the threadedselectreactor in wx without
> > problems. I have only just read these posts and cannot understand
> > any reasoning to drop it. What am I missing?
>
> That it's broken according to the test suite, and that nobody has
> volunteered to fix it.
>
> Perhaps the bugs are in the tests (a cursory glance at the qt
> failures suggests this might be the case for that reactor), or
> perhaps the tested functionality is something that should be expected
> to not work for that reactor, but in any case, either the tests or
> the reactor should be fixed. Tests that have been failing for a long
> time indicates that nobody cares enough about that code to fix them.
>
> Clearly the best resolution of this would be to have all the
> mentioned reactors fixed. Then, nobody would propose that they be
> removed.

The biggest issue is that the tests work by reactor iteration, which
is not how some of the reactors actually work in practice. Tests
passing or failing don't necessarily reflect how the reactor is going
to behave under normal circumstances.

-bob



From fairwinds at eastlink.ca  Sun Sep 24 23:32:03 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Mon, 25 Sep 2006 02:32:03 -0300
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <20060925042811.1717.24676830.divmod.quotient.59246@ohm>
References: <20060925042811.1717.24676830.divmod.quotient.59246@ohm>
Message-ID: <451769D3.80803@eastlink.ca>

Hi Glyph. I am not sure if I am the right person, but at the same time I 
don't wish to see the code removed. I see deprecation warnings and 
failed tests. Not great.

I am willing to help but I am not sure that I possess the expertise to 
solve all the issues. I am willing to commit to trying though, hopefully 
with the help of others. Perhaps I'll post on wxpython list to see if 
there are others willing to help.

wxpython and twisted are both important toolkits. Twisted integration is 
important to me for my own projects. I am hoping someone from the 
Chandler project thinks so too and feels that sharing in this effort is 
the right thing to do. I know there are a number of folks using 
wxreactor or threadedselectreactor in their wxpython code. It is 
reasonable that we shoulder some responsibility to help ourselves.

Regards,
David

glyph at divmod.com wrote:
> On Mon, 25 Sep 2006 01:17:14 -0300, David Pratt <fairwinds at eastlink.ca> 
> wrote:
>> Hi all. I am also using the threadedselectreactor in wx without 
>> problems. I have only just read these posts and cannot understand any 
>> reasoning to drop it. What am I missing?
> 
> "If it's not tested, it's broken."
> 
> The point is not that I want to drop this code from Twisted.  In fact, 
> far from it, I would like Twisted to support as many toolkits as possible.
> 
> The point is that these reactors are currently excluded from automated 
> test coverage, and have no maintainers.  That means that they do not 
> currently work as well as the other reactors, but more seriously, if 
> they were to be *completely* broken (say, start raising exceptions upon 
> import), nobody on the Twisted team would know until users started 
> complaining, and most likely users would not complain until well after 
> we had already produced a broken release.
> 
> We could add automated test coverage relatively easily, *IF* someone 
> would volunteer to at least look at the results of that coverage and 
> contribute some fixes.  Perhaps you were not even aware that there are 
> reliability problems with threadedselectreactor.  To see an example of 
> the problem, run "trial --reactor threadedselect twisted".
> 
> Would you volunteer to have a look at some of these problems and try to 
> fix them?  I have no idea how many people are using Twisted in 
> conjunction with wxwindows today, but you would be a hero to all of 
> them, I'm sure :).
> 



From glyph at divmod.com  Sun Sep 24 23:52:02 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 25 Sep 2006 01:52:02 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, 
In-Reply-To: <6a36e7290609242219r34150f81r42b84796769f355a@mail.gmail.com>
Message-ID: <20060925055202.1717.192272617.divmod.quotient.59312@ohm>

On Sun, 24 Sep 2006 22:19:32 -0700, Bob Ippolito <bob at redivi.com> wrote:
>On 9/24/06, James Y Knight <foom at fuhm.net> wrote:
>>On Sep 25, 2006, at 12:17 AM, David Pratt wrote:
>> > Hi all. I am also using the threadedselectreactor in wx without
>> > problems. I have only just read these posts and cannot understand
>> > any reasoning to drop it. What am I missing?

>>Clearly the best resolution of this would be to have all the
>>mentioned reactors fixed. Then, nobody would propose that they be
>>removed.

>The biggest issue is that the tests work by reactor iteration, which
>is not how some of the reactors actually work in practice. Tests
>passing or failing don't necessarily reflect how the reactor is going
>to behave under normal circumstances.

Over the last year, jml has been making good progress towards grinding down the unfortunate protuberances in Trial which make it less like a real application.

See the following tickets:

  http://twistedmatrix.com/trac/ticket/1781
  http://twistedmatrix.com/trac/ticket/2090

It's been a gradual process but we've been moving in this direction for a while.

If we can attribute specific test failures to this issue, we should try to work around it (which is possible in many cases), otherwise .todo or .skip them as appropriate until trial's metamorphosis is complete.



From glyph at divmod.com  Mon Sep 25 00:04:07 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 25 Sep 2006 02:04:07 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, 
In-Reply-To: <451769D3.80803@eastlink.ca>
Message-ID: <20060925060407.1717.1679192272.divmod.quotient.59320@ohm>

On Mon, 25 Sep 2006 02:32:03 -0300, David Pratt <fairwinds at eastlink.ca> wrote:
>Hi Glyph. I am not sure if I am the right person, but at the same time I 
>don't wish to see the code removed. I see deprecation warnings and failed 
>tests. Not great.

Now you can see how I feel about this code :).

>I am willing to help but I am not sure that I possess the expertise to solve 
>all the issues. I am willing to commit to trying though, hopefully with the 
>help of others. Perhaps I'll post on wxpython list to see if there are 
>others willing to help.

Thanks a lot.

This is as much as anyone could reasonably ask.  I'm sure that if you start trying to track down the issues within Twisted and asking questions, you will find that people on this mailing list and #twisted on chat.freenode.net would be more than happy to help you learn more about the reactor's internals.

>wxpython and twisted are both important toolkits. Twisted integration is 
>important to me for my own projects. I am hoping someone from the Chandler 
>project thinks so too and feels that sharing in this effort is the right 
>thing to do. I know there are a number of folks using wxreactor or 
>threadedselectreactor in their wxpython code. It is reasonable that we 
>shoulder some responsibility to help ourselves.

I really appreciate this sentiment.  I'm glad you're interested in helping out.

However, I think that Chandler uses Twisted in a rather idiosyncratic way; it doesn't necessarily make sense for them to help, since this isn't code that they're using.  If you can interest them in doing so, of course, that's great :)

If you are aware of other uses of wxreactor though, the more the merrier.

Now that you've volunteered to at least start looking at the problems here, I'll see if I can set up a buildslave to test these reactors.  However, I will probably only be able to set it up on one platform, and given wx's nature we'll need a few other buildbots to make sure it works consistently on mac/win/linux, so if any wxreactor users want to contribute an additional buildbot that would be great.

Please keep us all appraised of your progress and let us know if you need help!



From glyph at divmod.com  Mon Sep 25 00:48:15 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 25 Sep 2006 02:48:15 -0400
Subject: [Twisted-Python] Removing _wait from Trial
In-Reply-To: <d06a5cd30609240026y3b50e953s472e4dd4eb70fb06@mail.gmail.com>
Message-ID: <20060925064815.1717.606494837.divmod.quotient.59338@ohm>

On Sun, 24 Sep 2006 17:26:10 +1000, Jonathan Lange <jml at mumak.net> wrote:
>So, I would like to remove _wait() from Trial and make it work like a
>regular Twisted application. I've had all this stuff on my brain, and
>have decided to dump it here for feedback. Here's how the plan looks
>at the moment[1]:

>1. Deprecate the use of reactor-spinning things within tests. (Twisted 2.5)

YES.

>Unfortunately, some of Trial's cleanup code spins the reactor (see
>t.trial.util._Janitor.do_cleanPending). This has to go.

You are saying this part of the plan will happen post-2.5, I assume?

>2. Tighten test cleanup errors. (Twisted 2.5)
>
>#2091 (ready for review) fulfils a long-standing promise. The "reactor
>unclean" warnings have been turned into errors.

I would really like it to be possible to turn these errors into warnings by passing a command-line flag, mainly for the migration path between 2.4 and 2.5.  If you upgrade an application to Twisted 2.5 and then run your tests, and you get 100 failures, it would be nice to be able to run "trial --unclean=warn_only", and focus on fixing any issues with the upgrade of APIs rather than just the test tool.  Even nicer to see that your tests still pass and you just need to update the tests to clean up after themselves.

Twisted's buildslaves should _NOT_ use this flag, nor should it still be present in 2.6.  I am suggesting it _ONLY_ as a migration tool.

>To remove _wait, we'll also have to remove the two calls to
>reactor.iterate() from _Janitor (see #2092). That means that many
>tests that *thought* they were cleaning up the reactor properly will
>find out that they weren't. We can reduce the number of errors by
>simulating reactor.iterate() using callLater. However, experiments
>show that even with this bandaid, there will still be new errors in
>the Twisted suite.

It sounds like a good process for getting changes like this through the Twisted suite might be:

 * prepare the branch
 * get it reviewed, but don't fix the tests yet
 * have a "fix trial party" where we encourage lots of other hackers to get together on IRC and contribute to the same branch
 * get it reviewed by someone who couldn't participant (bonus: incentive to participate is that you don't have to review a massive branch...)

>That means we will have to either:
>a) surprise our users with new errors in their tests
>b) find some way to introduce this gradually.

I think this might be another use-case for a flag.  Really, developers should be alerted to these changes as soon as possible (warnings are too easily ignored), but have a way to give themselves a little leeway to fix the problems before the next release.

>Obviously everyone[2] would prefer b). I've filed #2124 explaining how
>that might work.

>3. Introduce asynchronous APIs to Trial (Twisted 2.6)
>
>Currently TestCase.run() is a blocking call. I wish it could remain a
>blocking call, but it can't.

Why do you say you wish it could?  Isn't the whole point here to make it not be a blocking call?

>The branch for #1781 makes a SyncTestCase and an AsyncTestCase. run()
>works in SyncTestCase and doesn't work in AsyncTestCase. For
>AsyncTestCase, one uses runDeferred().

This all sounds fine.

>Although the branch for #1781 will need to be abandoned, these new
>classes should be brought in for Twisted 2.6 (without breaking run()).
>Naturally, this affects many, many tests in Trial.

Another potential place where a 'fix trial party' might be useful.

>4. Deprecate TestSuite.run and TestCase.run. (Twisted 2.6)
>
>Neither of these will work without wait[3] and they are both public
>APIs. Also remove the calls to iterate() from _Janitor at this point.

In what sense are these APIs "public"?  Are there really people calling them outside of the 'trial' tool?

>5. Actually remove _wait. (Twisted 2.7)

>Add runDeferred() to TestSuite, make run() raise NotImplementedErrors
>for TestCase and TestSuite. Alter TrialSuite to start and stop the
>reactor.

Is there something significant about raising NotImplementedError?  Why aren't you just going to remove the method?

>I can't find a theory to explain why this change will break unexpected
>tests in the Twisted suite. However, it will certainly happen. That
>means that some tests in user code will probably break as well. I
>don't know how we could make this any smoother.

Until we have a theory about how and why things are going to break, we shouldn't worry about making it smoother.  That's not to say that things aren't going to break, but the plan for smoothing things out is likely to depend upon the details of the breakage.

>Questions:
>- What should I do with the ticket #1781?

It looks like it should have a milestone of Twisted-2.7, and stay as it is.

>- What should I do with the branch for #1781?

I'd have to review a bunch of other code to be sure, and I haven't, but I'd say "keep merging it forward".  Maybe just dropping it and rewriting it later makes more sense, though.

>- What more can we do to reduce the number of tests that will break
>when _wait is removed?

See above.

>[1] Incidentally, all of this would be superfluous if reactors were 
>restartable.

A clean restart() API would be a possible way of fixing some things, but I think you are underestimating how much code would break with a clean restart() method, too.  For example: the threadpool would be stopped after each test.  Would that make any existing Twisted tests fail?  I don't know, but operating under your (probably correct) pessimistic assumption that any change to the test framework's interaction with the reactor will break some things, I'd have to say yes.

Then there is the issue that Bob recently brought up, which is that in a 'normal' Twisted application the reactor is only started once, and so it's not really a representative test to constantly be pausing and resuming it.  If we implement a restartable reactor it would probably be a good torture-test though.

Thanks for all the work on this issue.  Every time I look at it, I'm shocked by just how difficult this transition has been, and all the more thankful for your capable stewardship of it.



From waterbug at pangalactic.us  Mon Sep 25 01:40:45 2006
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Mon, 25 Sep 2006 03:40:45 -0400
Subject: [Twisted-Python] wxreactor buildbots
In-Reply-To: <20060925060407.1717.1679192272.divmod.quotient.59320@ohm>
References: <20060925060407.1717.1679192272.divmod.quotient.59320@ohm>
Message-ID: <451787FD.5010005@pangalactic.us>

glyph at divmod.com wrote:
> Now that you've volunteered to at least start looking at the problems 
> here, I'll see if I can set up a buildslave to test these reactors.  
> However, I will probably only be able to set it up on one platform, and 
> given wx's nature we'll need a few other buildbots to make sure it works 
> consistently on mac/win/linux, so if any wxreactor users want to 
> contribute an additional buildbot that would be great.

I'll volunteer to set up a wxreactor buildbot on the machine I use
to do my windows builds.  It's not my platform of choice, but
the vast majority of the user community I'm supporting use it
(shudder), so it's the most important platform for my wx app.

I haven't run buildbot before, but I want to run it for my own
app, too, and a windows bot would make the most sense for that,
since I develop on Linux.

I'll be away on business the rest of this week but will get
started as soon as I get back.

Maybe we can get some twisted/wx momentum going.  :)

Cheers,
Steve



From robert at gravina.com  Mon Sep 25 01:26:04 2006
From: robert at gravina.com (Robert Gravina)
Date: Mon, 25 Sep 2006 16:26:04 +0900
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <20060925042811.1717.24676830.divmod.quotient.59246@ohm>
References: <20060925042811.1717.24676830.divmod.quotient.59246@ohm>
Message-ID: <D887F938-6EDF-4BD4-9419-715F8144C99A@gravina.com>

> That means that they do not currently work as well as the other  
> reactors, but more seriously, if they were to be *completely*  
> broken (say, start raising exceptions upon import)

Hate to break it to you, but I tried a preview build of soon-to-be- 
released (I think) wxPython 2.7, and the twisted code raised  
exceptions on import :) I reinstalled 2.6.3.3 so can't show you the  
traceback. Dailies are available here if anyone wants to see what I  
mean.
http://starship.python.net/crew/robind/wxPython/daily/

Anyway, I am currently using wxPython and Twisted in a project and I  
would sorely miss either of them!!! I just wanted to cast my vote as  
another developer using this (killer) combination! wx and Twisted  
(especially PB) are making short work of writing a multi-user client/ 
server app. From what I've been able to find, wx is the only GUI  
toolkit that is cross platform and rich. Qt isn't an option for me  
because of it's expensive commercial licensing, and Tk just looks  
plain horrible. There must be many other users wx/Twisted, surely.

I haven't experienced any problems using wxPython and Twisted  
together, except perhaps for this.  Normally, a wx app will shutdown  
when the last window in your applciation closes. Since the reactor  
stops this from happening I workaround this by maintaining a list of  
open windows and on close of a window I remove it from the list and  
then check if it's empty. If it is, I shutdown the reactor.

Robert



From tdickenson at geminidataloggers.com  Mon Sep 25 05:44:16 2006
From: tdickenson at geminidataloggers.com (Toby Dickenson)
Date: Mon, 25 Sep 2006 12:44:16 +0100
Subject: [Twisted-Python] Re: removing unsupported reactors in twisted 2.6:
	qt, corefoundation, threadedselect, wx
References: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
	<20060924152019.tet5k79soc0s4coc@itchy.wasabout.net>
Message-ID: <ef8feg$1l0$1@sea.gmane.org>

Thomas HERVE wrote:

> The next QT version (4.2, currently in RC1) contains support for the
> Glib eventloop. This has to be tested, but it promises use of the gtk
> reactor with Qt application. Qt 4.2 (and PyQt) is not released but
> should be by the time of Twisted 2.6; we could then write a
> documentation about integration. The drawback is that you'll need glib
> (ie, python-gtk) to write a Qt app.
> 
> We also have a qt4 reactor (http://twistedmatrix.com/trac/ticket/1770)
> that needs a maintener. Last time I checked few things were needed to
> make the test suite pass.

As far as I am aware (and please correct me if I am wrong) all these recent
qt-specific reactors have the same systematic problem on win32 because they
rely on hooks into the Qt main loop. This means that the reactor only
processes events when the Qt main loop is running, and it stalls if the
main thread blocks in some nested non-Qt message loop. This is a reasonable
thing to happen in a GUI application; nested message loops are used in
MessageBox, drap/drop, window resizing, and non-Qt dialog boxes (like the
standard file chooser).

The nested message loop will be doing the win32 GetMessage/DispatchMessage
dance. This is sufficient to keep the GUI updating smoothly, and it should
be sufficient for the reactor too. IMHO threadedselectreactor seems like
the best option for getting *this* right.

glyph wrote:

> threadedselectreactor is an interesting concept but hopelessly broken
> and untested in its current implementation.

Im currently using threadedselectreactor (plus private patches) and a
derivative threadedwin32eventreactor in production, so this statement
leaves me with a fairly big itch to scratch. I will check out the failing
tests.






From therve at free.fr  Mon Sep 25 06:48:18 2006
From: therve at free.fr (Thomas HERVE)
Date: Mon, 25 Sep 2006 14:48:18 +0200
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
In-Reply-To: <20060924193454.1717.730206262.divmod.quotient.58820@ohm>
References: <20060924193454.1717.730206262.divmod.quotient.58820@ohm>
Message-ID: <20060925144818.o1zpmy1j40ksgkso@itchy.wasabout.net>

Quoting glyph at divmod.com:

>> The next QT version (4.2, currently in RC1) contains support for the 
>> Glib eventloop. This has to be tested, but it promises use of the 
>> gtk reactor with Qt application. Qt 4.2 (and PyQt) is not released 
>> but should be by the time of Twisted 2.6; we could then write a 
>> documentation about integration.
>
> That would be great.  Is that going to be the default mainloop or an 
> optional add-on?

It's optional. It seems C++ apps will have a command-line switch. I 
don't know about PyQt, though.

>> The drawback is that you'll need glib (ie, python-gtk) to write a Qt app.
>
> Some might not call that a drawback ;).

Well, it might be a drawback if you want to use Qt under Mac :).

>> We also have a qt4 reactor 
>> (http://twistedmatrix.com/trac/ticket/1770) that needs a maintener. 
>> Last time I checked few things were needed to make the test suite 
>> pass.
>
> Are you willing to have a crack at fixing that code?

I'm no Qt expert, but I work with some so it could help. Consider it assigned.

-- 
Thomas


----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.




From fairwinds at eastlink.ca  Mon Sep 25 07:58:13 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Mon, 25 Sep 2006 10:58:13 -0300
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <20060925060407.1717.1679192272.divmod.quotient.59320@ohm>
References: <20060925060407.1717.1679192272.divmod.quotient.59320@ohm>
Message-ID: <4517E075.807@eastlink.ca>

Hi Glyph. I have recently added a post to the wxpython list to see if
other folks can make themselves available to assist with this effort.

http://lists.wxwidgets.org/cgi-bin/ezmlm-cgi?11:mss:55602:200609:hafkbkhbehmbhikjmmaf

Perhaps the first thing will be the deprecation warnings since these 
should be relatively simple. Then try and see what is happening with the 
failures. If the failures are as the result of reactor iterations for 
tests not relevant to the reactor, what direction should be taken? I 
raise this since this seems to run through Bob's comments and others 
concerning the qt reactor.

Please let us know about the buildbot once it is set up. I see Stephen
has offered support for a buildbot for windows which is excellent. Thank
you Stephen! Stephen - my sentiments about windows too but I am also in
the same boat as far as potential consumers of my app. I am also trying 
to keep my code crossplatform for mac (second most important) and linux.

Regards,
David


glyph at divmod.com wrote:
> On Mon, 25 Sep 2006 02:32:03 -0300, David Pratt <fairwinds at eastlink.ca> 
> wrote:
>> Hi Glyph. I am not sure if I am the right person, but at the same time 
>> I don't wish to see the code removed. I see deprecation warnings and 
>> failed tests. Not great.
> 
> Now you can see how I feel about this code :).
> 
>> I am willing to help but I am not sure that I possess the expertise to 
>> solve all the issues. I am willing to commit to trying though, 
>> hopefully with the help of others. Perhaps I'll post on wxpython list 
>> to see if there are others willing to help.
> 
> Thanks a lot.
> 
> This is as much as anyone could reasonably ask.  I'm sure that if you 
> start trying to track down the issues within Twisted and asking 
> questions, you will find that people on this mailing list and #twisted 
> on chat.freenode.net would be more than happy to help you learn more 
> about the reactor's internals.
> 
>> wxpython and twisted are both important toolkits. Twisted integration 
>> is important to me for my own projects. I am hoping someone from the 
>> Chandler project thinks so too and feels that sharing in this effort 
>> is the right thing to do. I know there are a number of folks using 
>> wxreactor or threadedselectreactor in their wxpython code. It is 
>> reasonable that we shoulder some responsibility to help ourselves.
> 
> I really appreciate this sentiment.  I'm glad you're interested in 
> helping out.
> 
> However, I think that Chandler uses Twisted in a rather idiosyncratic 
> way; it doesn't necessarily make sense for them to help, since this 
> isn't code that they're using.  If you can interest them in doing so, of 
> course, that's great :)
> 
> If you are aware of other uses of wxreactor though, the more the merrier.
> 
> Now that you've volunteered to at least start looking at the problems 
> here, I'll see if I can set up a buildslave to test these reactors.  
> However, I will probably only be able to set it up on one platform, and 
> given wx's nature we'll need a few other buildbots to make sure it works 
> consistently on mac/win/linux, so if any wxreactor users want to 
> contribute an additional buildbot that would be great.
> 
> Please keep us all appraised of your progress and let us know if you 
> need help!
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From general at eepatents.com  Mon Sep 25 09:01:46 2006
From: general at eepatents.com (Ed Suominen)
Date: Mon, 25 Sep 2006 08:01:46 -0700
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <E1GRXKs-0007p3-02@pyramid.twistedmatrix.com>
References: <E1GRXKs-0007p3-02@pyramid.twistedmatrix.com>
Message-ID: <4517EF5A.7090304@eepatents.com>

I'm using the qtreactor in a GPL-but-unreleased PyQt 4.1 application of
my own, and have not found any problems whatsoever with the integration
of the Qt Twisted event loops.  It's really a pretty slick combination.

As an example and a contribution, I offer the following (GPL'd) module:
http://deadbeefbabe.org/paste/1996 (syntax-highlighted version),
http://foss.eepatents.com/misc/qt-twisted-dialog.py (source). It allows
you to construct a non-blocking modal dialog, immediately obtaining a
deferred to the user's eventual input.

As an aside, I would be interested in people's viewpoints about whether
the Qt reactor is suitable for Twisted's MIT-style license, given that
it doesn't actually import any Qt code itself. It leaves that step up to
the user with the installation of a reactor into the Qt application
object. As every Qt user probably knows, the Qt library itself is
dual-licensed under either the GPL or Trolltech's proprietary license.

Best regards, Ed



From robert at gravina.com  Mon Sep 25 09:12:32 2006
From: robert at gravina.com (Robert Gravina)
Date: Tue, 26 Sep 2006 00:12:32 +0900
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <4517E075.807@eastlink.ca>
References: <20060925060407.1717.1679192272.divmod.quotient.59320@ohm>
	<4517E075.807@eastlink.ca>
Message-ID: <6661A04B-77D9-4E21-B234-EBA0F1AB6396@gravina.com>

> Hi Glyph. I have recently added a post to the wxpython list to see if
> other folks can make themselves available to assist with this effort.
>
> http://lists.wxwidgets.org/cgi-bin/ezmlm-cgi?11:mss: 
> 55602:200609:hafkbkhbehmbhikjmmaf
>

I'll be extremely embarrassed if I was wrong about the errors with  
2.7 :) All I did was run my (currently working on 2.6.3.3) code with  
2.7, noticed an error on startup, and reverted to 2.6.3.3.

Update: I reinstalled the version for my platform (Mac OS X, python  
2.4 unicode PPC - actually I now have both versions installed) and  
wrote a simple script and got this traceback. It would seem the  
problem might just be that wxreactor is using a depreciated way to  
use wxPython (i.e. was wxSOMETHING now is wx.SOMETHING), thanks to  
the helpful depreciation warning.

*** My script ***
import wxversion
#I have both 2.6.3.3 and 2.7 installed. Change this to 2.6.3.3 and  
the example works
wxversion.select("2.7")
from twisted.internet import wxreactor
wxreactor.install()
import wx

class MyApp(wx.App):
     def OnInit(self):
         frame = wx.Frame(None, -1, "Hello wxPython world")
         frame.Show(True)
         self.SetTopWindow(frame)
         return True

if __name__ == "__main__":
     app = MyApp(False)
     app.MainLoop()

*** The traceback: ***
moko:~/sp rgravina$ pythonw wxtest.py
/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site- 
packages/twisted/internet/wxreactor.py:37: DeprecationWarning: The  
wxPython compatibility package is no longer automatically generated  
or activly maintained.  Please switch to the wx package as soon as  
possible.
   from wxPython.wx import wxApp, wxCallAfter, wxEventLoop, wxFrame,  
NULL
Traceback (most recent call last):
   File "wxtest.py", line 4, in ?
     from twisted.internet import wxreactor
   File "/Library/Frameworks/Python.framework/Versions/2.4/lib/ 
python2.4/site-packages/twisted/internet/wxreactor.py", line 37, in ?
     from wxPython.wx import wxApp, wxCallAfter, wxEventLoop,  
wxFrame, NULL
   File "//Library/Frameworks/Python.framework/Versions/2.4/lib/ 
python2.4/site-packages/wx-2.7.0-mac-unicode/wxPython/__init__.py",  
line 15, in ?
     import _wx
   File "//Library/Frameworks/Python.framework/Versions/2.4/lib/ 
python2.4/site-packages/wx-2.7.0-mac-unicode/wxPython/_wx.py", line  
7, in ?
     from _controls import *
   File "//Library/Frameworks/Python.framework/Versions/2.4/lib/ 
python2.4/site-packages/wx-2.7.0-mac-unicode/wxPython/_controls.py",  
line 441, in ?
     wxFRAME_EX_CONTEXTHELP = wx._controls.FRAME_EX_CONTEXTHELP
AttributeError: 'module' object has no attribute 'FRAME_EX_CONTEXTHELP'

Robert



From michele.petrazzo at unipex.it  Mon Sep 25 09:46:52 2006
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Mon, 25 Sep 2006 17:46:52 +0200
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <D887F938-6EDF-4BD4-9419-715F8144C99A@gravina.com>
References: <20060925042811.1717.24676830.divmod.quotient.59246@ohm>
	<D887F938-6EDF-4BD4-9419-715F8144C99A@gravina.com>
Message-ID: <4517F9EC.6090703@unipex.it>

Robert  wrote:
>> That means that they do not currently work as well as the other 
>> reactors, but more seriously, if they were to be *completely* broken 
>> (say, start raising exceptions upon import)
> 
> Hate to break it to you, but I tried a preview build of 
> soon-to-be-released (I think) wxPython 2.7, and the twisted code raised 
> exceptions on import :) I reinstalled 2.6.3.3 so can't show you the 
> traceback. Dailies are available here if anyone wants to see what I mean.
> http://starship.python.net/crew/robind/wxPython/daily/
> 

I don't know what platform are you using, but here wx 2.7 
(2.7.0.0pre.20060712) and linux (gtk) work well. Work also well into my 
win box...

Simple tried replacing 2.6 with 2.7 and executing my _not so simple_ 
applications that use wx, twisted for tcp comunication and adbapi for db 
connections.


Michele



From fairwinds at eastlink.ca  Mon Sep 25 10:00:31 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Mon, 25 Sep 2006 13:00:31 -0300
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <4517EF5A.7090304@eepatents.com>
References: <E1GRXKs-0007p3-02@pyramid.twistedmatrix.com>
	<4517EF5A.7090304@eepatents.com>
Message-ID: <4517FD1F.6000304@eastlink.ca>

Hi Ed. Let's please leave the licensing issues of Twisted alone. This 
change was made quite some time ago as a license that would encourage 
developers to use Twisted. I think this should be respected and the 
licensing of code you are willing to commit, committed at MIT, so we 
don't need to open this debate.

It is a reasonable and open license for this type of framework and there 
is no point in cutting off commercial developers that wish to use it by 
inserting GPL code. The point is that there are those who do in fact 
obtain a license from Trolltech and will not wish to mix GPL with a 
proprietary app, thus the MIT works well for this. Many thanks.

Regards,
David

Ed Suominen wrote:
> I'm using the qtreactor in a GPL-but-unreleased PyQt 4.1 application of
> my own, and have not found any problems whatsoever with the integration
> of the Qt Twisted event loops.  It's really a pretty slick combination.
> 
> As an example and a contribution, I offer the following (GPL'd) module:
> http://deadbeefbabe.org/paste/1996 (syntax-highlighted version),
> http://foss.eepatents.com/misc/qt-twisted-dialog.py (source). It allows
> you to construct a non-blocking modal dialog, immediately obtaining a
> deferred to the user's eventual input.
> 
> As an aside, I would be interested in people's viewpoints about whether
> the Qt reactor is suitable for Twisted's MIT-style license, given that
> it doesn't actually import any Qt code itself. It leaves that step up to
> the user with the installation of a reactor into the Qt application
> object. As every Qt user probably knows, the Qt library itself is
> dual-licensed under either the GPL or Trolltech's proprietary license.
> 
> Best regards, Ed
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From michele.petrazzo at unipex.it  Mon Sep 25 10:06:50 2006
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Mon, 25 Sep 2006 18:06:50 +0200
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <20060924193900.1717.89550137.divmod.quotient.58826@ohm>
References: <20060924193900.1717.89550137.divmod.quotient.58826@ohm>
Message-ID: <4517FE9A.5050000@unipex.it>

glyph at divmod.com wrote:
> You have lots of other options.
> 
> 1. Continue using the wxreactor code by copying it into your 
> application.  We could even provide a separate page with
> "unmaintained reactors" for download.

For me, if you don't find someone that help you to maintain the wx
reactor, this are a good solution, since there are a lot of person, like
me, that use the (fantastic) twisted library and wx like GUI.

> 2. Help fix the problem.  This is really what I'd prefer.  You don't
>  have to have all the appropriate knowledge right now, just
> sufficient interest and energy to commit to *caring* that the
> buildbot is red in the future, and trying to fix it.

Just for see if I can help, I tried the "trial --reactor threadedselect
twisted", but after some (10 min) work, trial eat all my ram! and I must
close it with e "kill -9". Are there another method for execute trial?

Bye,
Michele

P.s.:
michele:~$ python
Python 2.4.4c0 (#2, Jul 30 2006, 15:43:58)
[GCC 4.1.2 20060715 (prerelease) (Debian 4.1.1-9)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import twisted twisted.__version__
'2.4.0'
>>> 




From exarkun at divmod.com  Mon Sep 25 10:27:55 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 25 Sep 2006 12:27:55 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, 
In-Reply-To: <4517FE9A.5050000@unipex.it>
Message-ID: <20060925162755.1717.853062564.divmod.quotient.59686@ohm>

On Mon, 25 Sep 2006 18:06:50 +0200, Michele Petrazzo <michele.petrazzo at unipex.it> wrote:
>glyph at divmod.com wrote:
>>You have lots of other options.
>>
>>1. Continue using the wxreactor code by copying it into your application. 
>>We could even provide a separate page with
>>"unmaintained reactors" for download.
>
>For me, if you don't find someone that help you to maintain the wx
>reactor, this are a good solution, since there are a lot of person, like
>me, that use the (fantastic) twisted library and wx like GUI.
>>2. Help fix the problem.  This is really what I'd prefer.  You don't
>>  have to have all the appropriate knowledge right now, just
>>sufficient interest and energy to commit to *caring* that the
>>buildbot is red in the future, and trying to fix it.
>
>Just for see if I can help, I tried the "trial --reactor threadedselect
>twisted", but after some (10 min) work, trial eat all my ram! and I must
>close it with e "kill -9". Are there another method for execute trial?

As a comparison, have you run trial with the default reactor?  If this fails
the same way, your machine have an odd configuration which is fouling up the
tests, or it may simply not have enough ram to run the full test suite.

On the other hand, if this runs successfully, then what you are seeing is
basically one aspect of the current problem with threadedselect reactor :)

Jean-Paul



From michele.petrazzo at unipex.it  Mon Sep 25 10:49:12 2006
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Mon, 25 Sep 2006 18:49:12 +0200
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <20060925162755.1717.853062564.divmod.quotient.59686@ohm>
References: <20060925162755.1717.853062564.divmod.quotient.59686@ohm>
Message-ID: <45180888.7030904@unipex.it>

Jean-Paul Calderone wrote:
>> Just for see if I can help, I tried the "trial --reactor 
>> threadedselect twisted", but after some (10 min) work, trial eat 
>> all my ram! and I must close it with e "kill -9". Are there another
>>  method for execute trial?
> 
> As a comparison, have you run trial with the default reactor?  If 
> this fails the same way, your machine have an odd configuration which
>  is fouling up the tests, or it may simply not have enough ram to run
>  the full test suite.
> 

My top say:
Mem:    776656k total,   592024k used,   184632k free,    31956k buffers

and after two minutes of "trial twisted",
5273 michele   25   0  250m 203m 5012 R 95.9 26.8   1:13.57 trial


What can I try, or what can I modify for make the tests? All my packages
are default packages from debian testing repository!

Michele



From exarkun at divmod.com  Mon Sep 25 11:12:29 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 25 Sep 2006 13:12:29 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, 
In-Reply-To: <45180888.7030904@unipex.it>
Message-ID: <20060925171229.1717.1479623071.divmod.quotient.59722@ohm>

On Mon, 25 Sep 2006 18:49:12 +0200, Michele Petrazzo <michele.petrazzo at unipex.it> wrote:
>Jean-Paul Calderone wrote:
>>>Just for see if I can help, I tried the "trial --reactor threadedselect 
>>>twisted", but after some (10 min) work, trial eat all my ram! and I must 
>>>close it with e "kill -9". Are there another
>>>  method for execute trial?
>>
>>As a comparison, have you run trial with the default reactor?  If this 
>>fails the same way, your machine have an odd configuration which
>>  is fouling up the tests, or it may simply not have enough ram to run
>>  the full test suite.
>
>My top say:
>Mem:    776656k total,   592024k used,   184632k free,    31956k buffers
>
>and after two minutes of "trial twisted",
>5273 michele   25   0  250m 203m 5012 R 95.9 26.8   1:13.57 trial
>
>
>What can I try, or what can I modify for make the tests? All my packages
>are default packages from debian testing repository!

Do you get any output at all?  It is not uncommon for the full test suite
to take as long as ten minutes.  It might take even longer, depending on how
fast the machine running the tests is.

You may also want to try running a subset of the tests.  To run only the core
tests, "trial twisted.test".  To run only the web tests, "trial twisted.web",
etc.

Jean-Paul



From michele.petrazzo at unipex.it  Mon Sep 25 11:13:52 2006
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Mon, 25 Sep 2006 19:13:52 +0200
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <4517F9EC.6090703@unipex.it>
References: <20060925042811.1717.24676830.divmod.quotient.59246@ohm>	<D887F938-6EDF-4BD4-9419-715F8144C99A@gravina.com>
	<4517F9EC.6090703@unipex.it>
Message-ID: <45180E50.1040100@unipex.it>

Michele Petrazzo wrote:
> I don't know what platform are you using, but here wx 2.7 
> (2.7.0.0pre.20060712) and linux (gtk) work well. Work also well into my 
> win box...
> 

Sorry, but I was using threadselectreactor direcly... This is my own
patch for wxreactor that work with wx 2.7.

Hope this help,
Michele

michele:/usr/lib/python2.4/site-packages/twisted/internet# diff 
wxreactor.py wxreactor_ok.py
37c37
< import wx
---
 > from wxPython.wx import wxApp, wxCallAfter, wxEventLoop, wxFrame, NULL
40c40
< class DummyApp(wx.App):
---
 > class DummyApp(wxApp):
84c84
<         self.interleave(wx.CallAfter)
---
 >         self.interleave(wxCallAfter)
92,93c92,93
<         ev = wx.EventLoop()
<         wx.EventLoop.SetActive(ev)
---
 >         ev = wxEventLoop()
 >         wxEventLoop.SetActive(ev)




From itamar at itamarst.org  Mon Sep 25 11:15:32 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 25 Sep 2006 13:15:32 -0400
Subject: [Twisted-Python] wxreactor buildbots
In-Reply-To: <451787FD.5010005@pangalactic.us>
References: <20060925060407.1717.1679192272.divmod.quotient.59320@ohm>
	<451787FD.5010005@pangalactic.us>
Message-ID: <45180EB4.2040208@itamarst.org>

Stephen Waterbury wrote:
> glyph at divmod.com wrote:
>> Now that you've volunteered to at least start looking at the problems 
>> here, I'll see if I can set up a buildslave to test these reactors.  
>> However, I will probably only be able to set it up on one platform, 
>> and given wx's nature we'll need a few other buildbots to make sure 
>> it works consistently on mac/win/linux, so if any wxreactor users 
>> want to contribute an additional buildbot that would be great.
>
> I'll volunteer to set up a wxreactor buildbot on the machine I use
> to do my windows builds.  It's not my platform of choice, but
> the vast majority of the user community I'm supporting use it
> (shudder), so it's the most important platform for my wx app.
Because of the way tsreactor and thus Wxreactor works you can't use 
trial with it... which is a good reason why we should figure out a 
better way to  support wx.



From michele.petrazzo at unipex.it  Mon Sep 25 11:31:25 2006
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Mon, 25 Sep 2006 19:31:25 +0200
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
In-Reply-To: <20060925171229.1717.1479623071.divmod.quotient.59722@ohm>
References: <20060925171229.1717.1479623071.divmod.quotient.59722@ohm>
Message-ID: <4518126D.7020108@unipex.it>

> Do you get any output at all?
Yes, I see a lot of input

> It is not uncommon for the full test suite to take as long as ten
> minutes.  It might take even longer, depending on how fast the
> machine running the tests is.

AMD 2.6, 750 MB ram

> You may also want to try running a subset of the tests.  To run only
> the core tests, "trial twisted.test".  To run only the web tests,
> "trial twisted.web", etc.

michele:~$ trial twisted.web

<cut code>

Ran 186 tests in 4.249s

PASSED (skips=22, expectedFailures=6, successes=158)

What subset of test need I to execute for see the wxreactor problems, 
since I can't try the whole one?

Michele



From glyph at divmod.com  Mon Sep 25 15:39:44 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 25 Sep 2006 17:39:44 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <4517EF5A.7090304@eepatents.com>
Message-ID: <20060925213944.1717.150174852.divmod.quotient.59959@ohm>

On Mon, 25 Sep 2006 08:01:46 -0700, Ed Suominen <general at eepatents.com> wrote:

>As an example and a contribution, I offer the following (GPL'd) module:
>http://deadbeefbabe.org/paste/1996 (syntax-highlighted version),
>http://foss.eepatents.com/misc/qt-twisted-dialog.py (source). It allows
>you to construct a non-blocking modal dialog, immediately obtaining a
>deferred to the user's eventual input.

Thanks very much for that pointer.  I knew this was possible but it is the first working example I've seen of it!

>As an aside, I would be interested in people's viewpoints about whether
>the Qt reactor is suitable for Twisted's MIT-style license, given that
>it doesn't actually import any Qt code itself. It leaves that step up to
>the user with the installation of a reactor into the Qt application
>object. As every Qt user probably knows, the Qt library itself is
>dual-licensed under either the GPL or Trolltech's proprietary license.

It does "import" qt in the sense that there is an import line at the top of the file which will load the library.  IANAL, but as far as I know it is a matter of debate whether this sort of reference constitutes a "derivative work" under copyright law.  As such, it would be best to get Riverbank and Trolltech on the record as to their respective opinions on whether licensing such code as MIT is a GPL violation, since I believe PyQt is clearly a derivative work of Qt itself, and therefore both companies are potential enforcers of the license in this case.  Is anyone aware of the correct point of contact for these inquiries?

If they do indeed consider it a violation, we'd have to remove it from Twisted.  However, in that case, I would be happy to contribute the qt reactor to Riverbank and have them distribute it (under the GPL) with PyQt rather than us distributing it together with Twisted.  This might be a good excuse to finally make reactors properly pluggable.

As for this thread, I'd appreciate it if only people with relevant legal expertise and/or information from a responsible party at Trolltech or Riverbank would reply.  I know license debates are always fun to get involved in, but this is not the appropriate forum.  Twisted's MIT license is a matter of policy and is not open to debate.



From wsanchez at wsanchez.net  Mon Sep 25 20:41:06 2006
From: wsanchez at wsanchez.net (=?ISO-8859-1?Q?Wilfredo_S=E1nchez_Vega?=)
Date: Mon, 25 Sep 2006 19:41:06 -0700
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
References: <20060924022046.1717.700961292.divmod.quotient.58188@ohm>
Message-ID: <C11E7916-7A3E-4089-B727-769D801D3CF6@wsanchez.net>

On Sep 23, 2006, at 7:20 PM, glyph at divmod.com wrote:
> The reactors presented in the subject all seem to have been  
> abandoned.  Even our friends at Apple are mainly concerned with the  
> use of Twisted for server work, and while they've been attempting  
> to help us find someone to poke around GUI <-> reactor integration  
> on OS X, it's not their area of expertise.

   To be clear, the need for tsr or cfr is not limited to GUI  
applications; it's needed by anything using CoreFoundation and  
therefore requiring CFRunLoop.  Many non-GUI applications require a  
CFRunLoop.  Server applications that want to use any of the above-BSD  
OS X toolkits (eg. via PyObjC) will fall into this camp.

   I expect to be in this category eventually, though I have been  
avoiding it to date because PyObjC isn't presently included in OS X.

>> tsreactor is private in twisted - starts with _, so it doesn't really
>> guarantee anything or make any promises about working, and it's very
>> useful for integrating with broken event loops.
>
> It's exposed to users as a reactor on the command line.  Maybe  
> *that* should have an "_" added to it as well.  However, if we're  
> going to keep it around, it should have a buildbot, end of story.

   Well, you just got this spiffy XServe.  Is it not capable of  
running a tsr buildbot?  Would it be hard to maintain?  (I seriously  
have no clue.)

	-wsv

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2746 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20060925/d5293a7a/attachment-0002.bin>

From exarkun at divmod.com  Mon Sep 25 21:07:01 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 25 Sep 2006 23:07:01 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, corefoundation, threadedselect, wx
In-Reply-To: <C11E7916-7A3E-4089-B727-769D801D3CF6@wsanchez.net>
Message-ID: <20060926030701.1717.982929278.divmod.quotient.60227@ohm>

On Mon, 25 Sep 2006 19:41:06 -0700, Wilfredo Sánchez Vega <wsanchez at wsanchez.net> wrote:
>>
>>It's exposed to users as a reactor on the command line.  Maybe  *that* 
>>should have an "_" added to it as well.  However, if we're  going to keep 
>>it around, it should have a buildbot, end of story.
>
>   Well, you just got this spiffy XServe.  Is it not capable of  running a 
>tsr buildbot?  Would it be hard to maintain?  (I seriously  have no clue.)

One difficulty is that trial cannot currently run the test suite with tsr.
tsr is not really a reactor in the same way that poll, select, and gtk are
reactors: it has a run method, but calling it isn't how you invoke the magic
secrets of tsr.  Instead, you set it up to cooperate with another event loop.

So we need to have a way to run the tests at all first.  Then we can set up
a buildslave (which will presumably fail most of the test suite).  Then someone
needs to start fixing it :)

Jean-Paul



From NormanTindall at zdisk.net  Tue Sep 26 04:10:54 2006
From: NormanTindall at zdisk.net (Norman Tindall)
Date: Tue, 26 Sep 2006 14:10:54 +0400
Subject: [Twisted-Python] How to get protocol function do not block server?
Message-ID: <17813668843.20060926141054@zdisk.net>

Hello,
   I am a newbie in twisted, sorry if this was asked thousands times
   before.

I have wrote a simple protocol (over TCP sockets) with crc32.

Suppose one client made a handshake.. and then sends to server 10Mb of
data... at the end of that 10Mb there is an crc32..

crc32 is a pretty time consuming task on a slow machine..
while server calculates crc32 of 10Mb sent by client one,
other clients can not communicate with server
(i tryed by myself to log in while transfer.. and i was wating about a
10 seconds)
And also i have a UnCryptAFrame time consuming function.

How to make those function do not block server,
to run in background, and when result is avalable call a chain of
other functions (for example it would be nice to add a callback to
Factory.handleFrame(data) with the return results of
Protocol.UnCryptAFrame())?

Is it have to be deferToThread ?

And also does dataReceived blocks server by itself?
Is twisted.TCPServer scalable, can it serve 1000 - 10000 request in a
minute? (in a secound would be great :) )

-------------------------------------------------------------------------------- server.py
class MyProtocolServer(protocol.Protocol):
      # ... connectionMade ..

    def dataReceived(self, data):

        self.inp_buf += data
        if self.initialized != 0:
            self.handleData()
        else:
            self.handShake() # handshake is fast.. but i would gladly
                             # make async if i know how.

    def handleData(self):
        if self.w_len is None and len(self.inp_buf) >= 5:
            self.w_len = struct.unpack("L",self.UncryptLen(self.inp_buf[:5]))[0]
        if len(self.inp_buf) == self.w_len:
            uncrypt_frame = self.UnCryptAFrame(self.inp_buf)
            self.NullInpBufer()

    def UnCryptAFrame(self):
        # a very slow function!
        pass

class MyFactory(protocol.ServerFactory):

    protocol = MyProtocolServer

    def buildProtocol(self, addr):
        p = MyProtocolServer()
        p.factory = self
        p.addr = addr
        # ...
        return p

factory = MyFactory()

application = service.Application('myservice', uid=1, gid=1)

internet.TCPServer(9090, factory).setServiceParent(service.IServiceCollection(application))

-------------------------------------------------------------------------------- end server.py

$ twistd -ny ./f_server.py
2006/09/26 14:18 SST [-] Log opened.
2006/09/26 14:18 SST [-] twistd 2.4.0 (/usr/bin/python 2.4.2) starting up
2006/09/26 14:18 SST [-] reactor class: <class 'twisted.internet.selectreactor.SelectReactor'>
2006/09/26 14:18 SST [-] Loading ./f_server.py...
2006/09/26 14:18 SST [-] Loaded.
2006/09/26 14:18 SST [-] __builtin__.UpSTPFactory starting on 9090
2006/09/26 14:18 SST [-] Starting factory <__builtin__.UpSTPFactory instance at 0x407ec54c>
2006/09/26 14:18 SST [-] set uid/gid 1/1
-------------------------------------------------------

In other words if i do something slow in dataReceived (of my Protocol)
it seems that it blocks server. how to avoid this?

sorry for my english :)
-- 
Best regards,
 Norman                          mailto:NormanTindall at zdisk.net




From mithrandi-twisted-python at mithrandi.za.net  Tue Sep 26 03:49:47 2006
From: mithrandi-twisted-python at mithrandi.za.net (Tristan Seligmann)
Date: Tue, 26 Sep 2006 11:49:47 +0200
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <4517FD1F.6000304@eastlink.ca>
References: <E1GRXKs-0007p3-02@pyramid.twistedmatrix.com>
	<4517EF5A.7090304@eepatents.com> <4517FD1F.6000304@eastlink.ca>
Message-ID: <20060926094946.GN23117@mithrandi.za.net>

* David Pratt <fairwinds at eastlink.ca> [2006-09-25 13:00:31 -0300]:

> Hi Ed. Let's please leave the licensing issues of Twisted alone. This 
> change was made quite some time ago as a license that would encourage 
> developers to use Twisted. I think this should be respected and the 
> licensing of code you are willing to commit, committed at MIT, so we 
> don't need to open this debate.

I was not under the impression that he was suggesting that Twisted's
license be changed; instead I believe he was merely trying to point out
that since Twisted code is MIT-licensed as a matter of policy, having
code that possible constitutes a derivative work of Qt may be legally
problematic. Please note that I'm not trying to suggest an informed
opinion on whether or not this is true; IANAL etc. Also see glyph's post
in this thread for a reasonable course of action to clear this potential
issue up.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20060926/9cdc9f4b/attachment.sig>

From ssgzhantr at gmail.com  Tue Sep 26 03:54:04 2006
From: ssgzhantr at gmail.com (aerodew)
Date: Tue, 26 Sep 2006 17:54:04 +0800
Subject: [Twisted-Python] How to get protocol function do not block server?
In-Reply-To: <17813668843.20060926141054@zdisk.net>
References: <17813668843.20060926141054@zdisk.net>
Message-ID: <baf51e510609260254v2b54843ej8b64845e12d33642@mail.gmail.com>

Is it have to be deferToThread ?

   I think so.since if you don't want to block server ,you should let the
time-consuming process run in a separate thread from the main one

And also does dataReceived blocks server by itself?

   yes, if you have ever hacked implementation of reactor,you will see that
reactor just dispatches  the data recevied  event  to correspondent
protocol's dataReceived handle.
   there is a threadable reactor available,but seemingly it is not stable
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060926/f8553a8f/attachment.html>

From manlio_perillo at libero.it  Tue Sep 26 04:31:33 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue, 26 Sep 2006 12:31:33 +0200
Subject: [Twisted-Python] How to get protocol function do not block server?
In-Reply-To: <17813668843.20060926141054@zdisk.net>
References: <17813668843.20060926141054@zdisk.net>
Message-ID: <45190185.50707@libero.it>

Norman Tindall ha scritto:
> Hello,
>    I am a newbie in twisted, sorry if this was asked thousands times
>    before.
> 
> I have wrote a simple protocol (over TCP sockets) with crc32.
> 
> Suppose one client made a handshake.. and then sends to server 10Mb of
> data... at the end of that 10Mb there is an crc32..
> 

You can require a max size for the packets.

A more general solution is to do the job in chunks:

>From Python documentation:
    print binascii.crc32("hello world")
    # Or, in two pieces:
    crc = binascii.crc32("hello")
    crc = binascii.crc32(" world", crc)
    print crc


Here is an example of computing the edonkey2k hash:

def waitFor(seconds):
    """Wait for the specified amount of seconds.
    To be used in a deferred generator.
    """

    from twisted.internet import reactor

    d = defer.Deferred()
    reactor.callLater(seconds, lambda: d.callback(None))

    return defer.waitForDeferred(d)


@defer.deferredGenerator
def getFileHash(path):
    """XXX TODO use a smaller file buffer size (8096 bytes?)
                use a thread?

    XXX TODO add support for md5, sha1 and crc32.
    """

    from Crypto.Hash import MD4


    # this is used as file buffer size, too
    CHUNK_SIZE = 9728000

    # XXX delay to give the reactor a chance
    DELAY = 0

    hashList = []

    fp = file(path, 'rb')
    while True:
        hash = MD4.new()
        data = fp.read(CHUNK_SIZE)
        yield waitFor(DELAY)

        if len(data) == 0:
            hash.update('')
            hashList.append(hash.digest())

        hash.update(data)
        yield waitFor(DELAY)

        hashList.append(hash.digest())

        if len(data) < CHUNK_SIZE:
            break

    # compute the hash of the hash list
    hash = MD4.new()
    hash.update(''.join(hashList))
    yield waitFor(DELAY)

    yield hash.hexdigest()

You can do the same, using cStringIO.

> crc32 is a pretty time consuming task on a slow machine..
> while server calculates crc32 of 10Mb sent by client one,
> other clients can not communicate with server
> (i tryed by myself to log in while transfer.. and i was wating about a
> 10 seconds)
> And also i have a UnCryptAFrame time consuming function.
> 

Check if the encryption can be done in chunks.




Regards  Manlio Perillo



From glyph at divmod.com  Tue Sep 26 07:45:45 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 26 Sep 2006 09:45:45 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926094946.GN23117@mithrandi.za.net>
Message-ID: <20060926134545.1717.1841879848.divmod.quotient.60675@ohm>


On Tue, 26 Sep 2006 11:49:47 +0200, Tristan Seligmann <mithrandi-twisted-python at mithrandi.za.net> wrote:
>* David Pratt <fairwinds at eastlink.ca> [2006-09-25 13:00:31 -0300]:
>
>> Hi Ed. Let's please leave the licensing issues of Twisted alone. This
>> change was made quite some time ago as a license that would encourage
>> developers to use Twisted. I think this should be respected and the
>> licensing of code you are willing to commit, committed at MIT, so we
>> don't need to open this debate.
>
>I was not under the impression that he was suggesting that Twisted's
>license be changed; instead I believe he was merely trying to point out
>that since Twisted code is MIT-licensed as a matter of policy, having
>code that possible constitutes a derivative work of Qt may be legally
>problematic.

That's what I took away from it as well, and it turns out that he was correct.  There is a problem.

I've gotten in touch with Riverbank Computing, the copyright holders on PyQt, and they are of the opinion that any Python code that imports "qt" is, in fact, a derivative work and therefore beholden to the GPL.

I'll be removing it from the Twisted repository and contributing it to Riverbank for inclusion in PyQt at my next available opportunity.  This is probably going to require an immediate addition of a plugin API for reactors, so it can be loaded externally.



From foom at fuhm.net  Tue Sep 26 09:42:18 2006
From: foom at fuhm.net (James Y Knight)
Date: Tue, 26 Sep 2006 11:42:18 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926134545.1717.1841879848.divmod.quotient.60675@ohm>
References: <20060926134545.1717.1841879848.divmod.quotient.60675@ohm>
Message-ID: <C2AF19A4-C84D-410C-91F6-4B29A55AA21F@fuhm.net>

On Sep 26, 2006, at 9:45 AM, glyph at divmod.com wrote:
> I've gotten in touch with Riverbank Computing, the copyright  
> holders on PyQt, and they are of the opinion that any Python code  
> that imports "qt" is, in fact, a derivative work and therefore  
> beholden to the GPL.

The only issue here is that we don't want to confuse people by having  
part of Twisted (qtreactor) be GPL.

But wait, the MIT license is compatible with the GPL. It is perfectly  
acceptable to write a work under the MIT license (qtreactor) which  
links to a GPLd work (pyqt). I've never seen anybody say that's  
illegal. The only issue here is that you cannot write a proprietary  
program using qtreactor (even though qtreactor itself is MIT),  
because pyqt is still licensed under the GPL, and anything linking  
with the GPL program must be *GPL-compatible*. But even though you  
cannot take advantage of all the permissions of the MIT license when  
using qtreactor, our code, itself, is not under the GPL. You could  
take the qtreactor, make a derivative of it which doesn't use qt, and  
have that be MIT. I really think there's no problem here.


> I'll be removing it from the Twisted repository and contributing it  
> to Riverbank for inclusion in PyQt at my next available  
> opportunity.  This is probably going to require an immediate  
> addition of a plugin API for reactors, so it can be loaded externally.

I strongly object to this, regardless of the outcome of the above.  
The internal reactor supporting APIs (posixbase etc) are not stable  
enough that I'm at all comfortable with giving a reactor over to  
external maintenance. If we have to, please instead let's segment it  
into a separate distributable, but still develop and release it in  
lockstep with twisted core.

James



From glyph at divmod.com  Tue Sep 26 10:12:20 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 26 Sep 2006 12:12:20 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <C2AF19A4-C84D-410C-91F6-4B29A55AA21F@fuhm.net>
Message-ID: <20060926161220.1717.85315677.divmod.quotient.60772@ohm>

On Tue, 26 Sep 2006 11:42:18 -0400, James Y Knight <foom at fuhm.net> wrote:
>On Sep 26, 2006, at 9:45 AM, glyph at divmod.com wrote:
>>I've gotten in touch with Riverbank Computing, the copyright  holders on 
>>PyQt, and they are of the opinion that any Python code  that imports "qt" 
>>is, in fact, a derivative work and therefore  beholden to the GPL.

>The only issue here is that we don't want to confuse people by having  part 
>of Twisted (qtreactor) be GPL.

Twisted is ostensibly a derivative work of all of the parts of Twisted.

>But wait, the MIT license is compatible with the GPL.

And that's your professional legal opinion?

It may be that riverbank and trolltech agree with this interpretation.  The response I received wasn't entirely clear.  However, you are making a number of assumptions about intellectual propertly law which are both outside your expertise and, to my knowledge, still undecided by any case law.

I've asked the fellow at Riverbank for a clarification of his intent before reviewing and committing the removal.  However, the impression I got from my first exchange is that Trolltech regards the QT API as their intellectual property, so the presence of phrases like "QObject.connect" and "QSocketNotifier.__init__" would make qtreactor a derivative work of their intellectual property, much like simple mentions of a fictional character's name in a short story can also classify as a derivative work.

>>I'll be removing it from the Twisted repository and contributing it  to 
>>Riverbank for inclusion in PyQt at my next available  opportunity.  This is 
>>probably going to require an immediate  addition of a plugin API for 
>>reactors, so it can be loaded externally.
>
>I strongly object to this, regardless of the outcome of the above.  The 
>internal reactor supporting APIs (posixbase etc) are not stable  enough that 
>I'm at all comfortable with giving a reactor over to  external maintenance. 
>If we have to, please instead let's segment it  into a separate 
>distributable, but still develop and release it in  lockstep with twisted 
>core.

If we distribute it separately, I believe it will create license confusion due to the interaction of Qt and PyQt commercial licenses.  However, I'll let the people who are actually interested in Twisted and Qt integration work this out with the PyQt maintainer; I don't care, personally.



From bob at redivi.com  Tue Sep 26 10:30:54 2006
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 26 Sep 2006 09:30:54 -0700
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926134545.1717.1841879848.divmod.quotient.60675@ohm>
References: <20060926094946.GN23117@mithrandi.za.net>
	<20060926134545.1717.1841879848.divmod.quotient.60675@ohm>
Message-ID: <6a36e7290609260930w48dbfaa4x7bce179d83d12994@mail.gmail.com>

On 9/26/06, glyph at divmod.com <glyph at divmod.com> wrote:
>
> On Tue, 26 Sep 2006 11:49:47 +0200, Tristan Seligmann <mithrandi-twisted-python at mithrandi.za.net> wrote:
> >* David Pratt <fairwinds at eastlink.ca> [2006-09-25 13:00:31 -0300]:
> >
> >> Hi Ed. Let's please leave the licensing issues of Twisted alone. This
> >> change was made quite some time ago as a license that would encourage
> >> developers to use Twisted. I think this should be respected and the
> >> licensing of code you are willing to commit, committed at MIT, so we
> >> don't need to open this debate.
> >
> >I was not under the impression that he was suggesting that Twisted's
> >license be changed; instead I believe he was merely trying to point out
> >that since Twisted code is MIT-licensed as a matter of policy, having
> >code that possible constitutes a derivative work of Qt may be legally
> >problematic.
>
> That's what I took away from it as well, and it turns out that he was correct.  There is a problem.
>
> I've gotten in touch with Riverbank Computing, the copyright holders on PyQt, and they are of the opinion that any Python code that imports "qt" is, in fact, a derivative work and therefore beholden to the GPL.
>
> I'll be removing it from the Twisted repository and contributing it to Riverbank for inclusion in PyQt at my next available opportunity.  This is probably going to require an immediate addition of a plugin API for reactors, so it can be loaded externally.

Maybe this is a good time to consider setuptools support? Entry points
are the external plug-in API that everyone else uses. Also, the fact
that Twisted can't be listed as a dependency in any setuptools-using
projects due to its non-standard setup.py is one huge pain in the ass.

-bob



From eprparadocs at gmail.com  Tue Sep 26 10:51:13 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Tue, 26 Sep 2006 12:51:13 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926161220.1717.85315677.divmod.quotient.60772@ohm>
References: <20060926161220.1717.85315677.divmod.quotient.60772@ohm>
Message-ID: <45195A81.50208@gmail.com>

Not that I mean to beat a dead horse, but the use of a single word or 
phrase in a document doesn't fall under the derivative work clause of 
copyright. Instead in comes from trademark law. For instance to xerox 
something is one of those cases where the mark Xerox was lost to the 
common use of to copy something. Google is undergoing just such an issue 
right now. At no point can't you use one word or phase in an document 
and have it magically copyrighted. On the other hand using a trademark 
means you have to acknowledge ownership.

Now this isn't to say that you can use the idea of Professor X in a 
document - a story - and not run into problems. That is a totally 
different beast and isn't covered by Trademark or Copyright law. Instead 
it is a part of intellectual property law.

But none of this applies to QT. You can easily use a library - with an 
MIT license or not - to link to a GPL'ed library. What you can't do is 
assume the entire work produce as the lesser of the two libraries. This 
means that you can link something with Twisted's QT reactor and still 
link it with PyQT or QT. The heart of the issue is that the entire 
product will fall under the more restrictive of the libraries, in this 
case GPL. GPL doesn't say you can't link with anything other than GPL; 
it only says the resulting work must be GPL. Since neither the MIT or 
BSD licenses say that you must have a resulting work product of MIT or 
BSD, you are safe.

In no case, do I believe you need to remove the QT reactor from the 
Twisted. It has no impact other than to make things more difficult to 
use. Is this what is really wanted here?

FWIW,
Chuck Wegrzyn


glyph at divmod.com wrote:
> On Tue, 26 Sep 2006 11:42:18 -0400, James Y Knight <foom at fuhm.net> wrote:
>> On Sep 26, 2006, at 9:45 AM, glyph at divmod.com wrote:
>>> I've gotten in touch with Riverbank Computing, the copyright  holders 
>>> on PyQt, and they are of the opinion that any Python code  that 
>>> imports "qt" is, in fact, a derivative work and therefore  beholden 
>>> to the GPL.
> 
>> The only issue here is that we don't want to confuse people by having  
>> part of Twisted (qtreactor) be GPL.
> 
> Twisted is ostensibly a derivative work of all of the parts of Twisted.
> 
>> But wait, the MIT license is compatible with the GPL.
> 
> And that's your professional legal opinion?
> 
> It may be that riverbank and trolltech agree with this interpretation.  
> The response I received wasn't entirely clear.  However, you are making 
> a number of assumptions about intellectual propertly law which are both 
> outside your expertise and, to my knowledge, still undecided by any case 
> law.
> 
> I've asked the fellow at Riverbank for a clarification of his intent 
> before reviewing and committing the removal.  However, the impression I 
> got from my first exchange is that Trolltech regards the QT API as their 
> intellectual property, so the presence of phrases like "QObject.connect" 
> and "QSocketNotifier.__init__" would make qtreactor a derivative work of 
> their intellectual property, much like simple mentions of a fictional 
> character's name in a short story can also classify as a derivative work.
> 
>>> I'll be removing it from the Twisted repository and contributing it  
>>> to Riverbank for inclusion in PyQt at my next available  
>>> opportunity.  This is probably going to require an immediate  
>>> addition of a plugin API for reactors, so it can be loaded externally.
>>
>> I strongly object to this, regardless of the outcome of the above.  
>> The internal reactor supporting APIs (posixbase etc) are not stable  
>> enough that I'm at all comfortable with giving a reactor over to  
>> external maintenance. If we have to, please instead let's segment it  
>> into a separate distributable, but still develop and release it in  
>> lockstep with twisted core.
> 
> If we distribute it separately, I believe it will create license 
> confusion due to the interaction of Qt and PyQt commercial licenses.  
> However, I'll let the people who are actually interested in Twisted and 
> Qt integration work this out with the PyQt maintainer; I don't care, 
> personally.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From foom at fuhm.net  Tue Sep 26 11:01:50 2006
From: foom at fuhm.net (James Y Knight)
Date: Tue, 26 Sep 2006 13:01:50 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926161220.1717.85315677.divmod.quotient.60772@ohm>
References: <20060926161220.1717.85315677.divmod.quotient.60772@ohm>
Message-ID: <675CF4CB-D067-4EE7-81A7-1F4C27C4F998@fuhm.net>


On Sep 26, 2006, at 12:12 PM, glyph at divmod.com wrote:

> On Tue, 26 Sep 2006 11:42:18 -0400, James Y Knight <foom at fuhm.net>  
> wrote:
>> On Sep 26, 2006, at 9:45 AM, glyph at divmod.com wrote:
>>> I've gotten in touch with Riverbank Computing, the copyright   
>>> holders on PyQt, and they are of the opinion that any Python  
>>> code  that imports "qt" is, in fact, a derivative work and  
>>> therefore  beholden to the GPL.
>
>> The only issue here is that we don't want to confuse people by  
>> having  part of Twisted (qtreactor) be GPL.
>
> Twisted is ostensibly a derivative work of all of the parts of  
> Twisted.

More than ostensibly, since code has been _literally_ copied all  
around the codebase from file to file.

>> But wait, the MIT license is compatible with the GPL.
>
> And that's your professional legal opinion?

It is a statement of indisputable fact that you can take MIT licensed  
source code and combine with GPL licensed source code and create a  
GPL licensed executable. We distribute MIT licensed source code.

Apparently RMS said the following to a gnome mailing list circa 2003.  
I can't find the original message, but I have no reason to doubt its  
authenticity:
> This exception would be redundant, because simple non-copyleft
> licenses such as X11 and BSD are compatible with the GPL already.
>
> So if you want to write a non-copylefted application, release it under
> the X11 license, and link it with a GPL-covered library, that is
> allowed. The linked executable would be covered by the GPL, of
> course, but the app source code would be covered by the X11 license
> alone.

And let's take the example of Python itself, which has a readline  
module, distributed under the python license. Again, similar  
circumstance. If you actually make use of the readline module, your  
program will need to be distributed under the GPL. But the source  
code is still Python licensed.

> It may be that riverbank and trolltech agree with this  
> interpretation.  The response I received wasn't entirely clear.   
> However, you are making a number of assumptions about intellectual  
> propertly law which are both outside your expertise and, to my  
> knowledge, still undecided by any case law.

If you think that twisted is in imminent danger of a lawsuit from  
Riverbank or Trolltech, then by all means simply remove qtreactor  
completely. Even presuming we are not doing anything wrong, it would  
still not be worth a lawsuit to determine that. However, I don't  
think anybody is about to sue Twisted for including qtreactor. But,  
if we're not about to be sued, case law is much less important than  
accepted existing practice in the open source world.

> I've asked the fellow at Riverbank for a clarification of his  
> intent before reviewing and committing the removal.  However, the  
> impression I got from my first exchange is that Trolltech regards  
> the QT API as their intellectual property, so the presence of  
> phrases like "QObject.connect" and "QSocketNotifier.__init__" would  
> make qtreactor a derivative work of their intellectual property,  
> much like simple mentions of a fictional character's name in a  
> short story can also classify as a derivative work.

Please don't use the phrase "intellectual property". It is  
dangerously misleading and worse than meaningless. I assume you mean  
copyright, in which it is my unprofessional opinion that it is  
ridiculous to talk about copyright in the phrase  
QSocketNotifier.__init__. If it is truly their position that the  
textual source code of qtreactor is a derivative work of PyQT, I  
think they are quite confused.

There are numerous instances of programs using Qt (take KDE for  
example!) licensed under non-GPL terms. Parts of KDE are under LGPL,  
BSD, and Artistic licenses. See http://developer.kde.org/ 
documentation/books/kde-2.0-development/ch19.html

If it's good enough for KDE, I don't see how it's not good enough for  
us. I'm sure many more people with actual legal experience have  
looked over the situation with KDE.

James
>



From TimothyFitz at gmail.com  Tue Sep 26 11:06:46 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Tue, 26 Sep 2006 13:06:46 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <6a36e7290609260930w48dbfaa4x7bce179d83d12994@mail.gmail.com>
References: <20060926094946.GN23117@mithrandi.za.net>
	<20060926134545.1717.1841879848.divmod.quotient.60675@ohm>
	<6a36e7290609260930w48dbfaa4x7bce179d83d12994@mail.gmail.com>
Message-ID: <972ec5bd0609261006rc0e0922i3d2c4c334da0d315@mail.gmail.com>

On 9/26/06, Bob Ippolito <bob at redivi.com> wrote:
> Maybe this is a good time to consider setuptools support? Entry points
> are the external plug-in API that everyone else uses. Also, the fact
> that Twisted can't be listed as a dependency in any setuptools-using
> projects due to its non-standard setup.py is one huge pain in the ass.

it was considered, and there were no objections (and many people who
would like it):
http://twistedmatrix.com/trac/ticket/1533

someone just has to actually implement it. I'd like to sprint on this
Friday (At Rochester DevHouse, http://xkfm.com/wiki) assuming the
buildslave is up by then.

I'm completely mac-ignorant, how is our installation on that platform?



From bob at redivi.com  Tue Sep 26 11:18:50 2006
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 26 Sep 2006 10:18:50 -0700
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <972ec5bd0609261006rc0e0922i3d2c4c334da0d315@mail.gmail.com>
References: <20060926094946.GN23117@mithrandi.za.net>
	<20060926134545.1717.1841879848.divmod.quotient.60675@ohm>
	<6a36e7290609260930w48dbfaa4x7bce179d83d12994@mail.gmail.com>
	<972ec5bd0609261006rc0e0922i3d2c4c334da0d315@mail.gmail.com>
Message-ID: <6a36e7290609261018u3109d163i9efacf2b781dc584@mail.gmail.com>

On 9/26/06, Timothy Fitz <TimothyFitz at gmail.com> wrote:
> On 9/26/06, Bob Ippolito <bob at redivi.com> wrote:
> > Maybe this is a good time to consider setuptools support? Entry points
> > are the external plug-in API that everyone else uses. Also, the fact
> > that Twisted can't be listed as a dependency in any setuptools-using
> > projects due to its non-standard setup.py is one huge pain in the ass.
>
> it was considered, and there were no objections (and many people who
> would like it):
> http://twistedmatrix.com/trac/ticket/1533
>
> someone just has to actually implement it. I'd like to sprint on this
> Friday (At Rochester DevHouse, http://xkfm.com/wiki) assuming the
> buildslave is up by then.

Awesome.

> I'm completely mac-ignorant, how is our installation on that platform?

Same as any other *nix.

-bob



From glyph at divmod.com  Tue Sep 26 12:14:24 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 26 Sep 2006 14:14:24 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <675CF4CB-D067-4EE7-81A7-1F4C27C4F998@fuhm.net>
Message-ID: <20060926181424.1717.368017904.divmod.quotient.60855@ohm>

On Tue, 26 Sep 2006 13:01:50 -0400, James Y Knight <foom at fuhm.net> wrote:

>On Sep 26, 2006, at 12:12 PM, glyph at divmod.com wrote:
>>On Tue, 26 Sep 2006 11:42:18 -0400, James Y Knight <foom at fuhm.net>  wrote:
>>>On Sep 26, 2006, at 9:45 AM, glyph at divmod.com wrote:

>>And that's your professional legal opinion?

>We distribute MIT licensed source code.

That is the question, isn't it :).

>>So if you want to write a non-copylefted application, release it under
>>the X11 license, and link it with a GPL-covered library, that is
>>allowed. The linked executable would be covered by the GPL, of
>>course, but the app source code would be covered by the X11 license
>>alone.

The GPL license text doesn't refer to "linking", there's really practically no such thing as "linking" in Python, so this is RMS's opinion of how the license should work in a different context than the one we're talking about.  What's interesting is to what extent the copyright holders in this situation agree, and when (and where) they think this "linking" happens.

>And let's take the example of Python itself, which has a readline  module, 
>distributed under the python license. Again, similar  circumstance. If you 
>actually make use of the readline module, your  program will need to be 
>distributed under the GPL. But the source  code is still Python licensed.

Python is a C program, where the conventional understanding of "linking" makes sense, and readline is copyrighted by the FSF, which makes RMS's interpretation relevant.  This is not the same situation.

>>It may be that riverbank and trolltech agree with this  interpretation. 
>>The response I received wasn't entirely clear.

>If you think that twisted is in imminent danger of a lawsuit from  Riverbank 
>or Trolltech, then by all means simply remove qtreactor  completely.

Obviously not.  The question here is one of intent, not punitive damages.

In Riverbank/Trolltech's case, the license is used as a means to deter commercial users from using the software unless they pay a licensing fee.  Lawsuits, and the threat thereof, are the weapon used to enforce that intent.

I don't think that we should wait until they actually start threatening us with legal action before we do something to put the situation with respect to their code more in line with their intent with their licenses.

>Please don't use the phrase "intellectual property".

I wish I didn't even *know* the phrase, but I was quoting Phil Thompson (Riverbank) directly.  He wrote:

"""
Trolltech will have the same view. As far as they are concerned their
intellectual property is the API and it doesn't matter how it is
accessed.
"""

This is probably, as you say, legal nonsense.  I don't think Mr. Thompson is a lawyer either, nor is he speaking authoritatively for trolltech's lawyers.  But, he is a copyright holder in this case, and therefore entitled to certain outlandish opinions.

>If it is truly their 
>position that the  textual source code of qtreactor is a derivative work of 
>PyQT, I  think they are quite confused.

If it is your opinion that the "textual source code" is not a derivative work because it merely refers to, but does not incorporate, the text of qtreactor or qt, then the GPL is completely meaningless in the context of Python and there was no point in licensing it that way in the first place.  Python bytecode does not make any additional references to the code it is importing beyond what Python source code does.

In that case the GPL can not apply to Python in any practical way.  I suspect that someone applying the GPL license to a bunch of Python code *would* disagree with that interpratation.

>If it's good enough for KDE, I don't see how it's not good enough for  us. 
>I'm sure many more people with actual legal experience have  looked over the 
>situation with KDE.

Oh yeah, and KDE has never had any problems with licensing ;-).



From glyph at divmod.com  Tue Sep 26 12:17:35 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 26 Sep 2006 14:17:35 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <6a36e7290609261018u3109d163i9efacf2b781dc584@mail.gmail.com>
Message-ID: <20060926181735.1717.1177674818.divmod.quotient.60857@ohm>

On Tue, 26 Sep 2006 10:18:50 -0700, Bob Ippolito <bob at redivi.com> wrote:
>On 9/26/06, Timothy Fitz <TimothyFitz at gmail.com> wrote:
>>On 9/26/06, Bob Ippolito <bob at redivi.com> wrote:
>> > Maybe this is a good time to consider setuptools support? Entry points
>> > are the external plug-in API that everyone else uses. Also, the fact
>> > that Twisted can't be listed as a dependency in any setuptools-using
>> > projects due to its non-standard setup.py is one huge pain in the ass.
>>
>>it was considered, and there were no objections (and many people who
>>would like it):
>>http://twistedmatrix.com/trac/ticket/1533

That ticket doesn't seem to refer to setuptools at all, just distutils.  I certainly haven't seen a discussion of removing twisted.plugin and switching to entry points.

>>someone just has to actually implement it. I'd like to sprint on this
>>Friday (At Rochester DevHouse, http://xkfm.com/wiki) assuming the
>>buildslave is up by then.
>
>Awesome.
>>I'm completely mac-ignorant, how is our installation on that platform?
>
>Same as any other *nix.

... except for the parts that aren't :).

You can find some packages for different styles of Mac installation at

    http://twistedmatrix.com/trac/wiki/Packages#MacOSX




From TimothyFitz at gmail.com  Tue Sep 26 12:24:40 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Tue, 26 Sep 2006 14:24:40 -0400
Subject: Fwd: [Twisted-Python] Twisted & Qt
In-Reply-To: <972ec5bd0609261124q30451400q78da5a269223f7d5@mail.gmail.com>
References: <6a36e7290609261018u3109d163i9efacf2b781dc584@mail.gmail.com>
	<20060926181735.1717.1177674818.divmod.quotient.60857@ohm>
	<972ec5bd0609261124q30451400q78da5a269223f7d5@mail.gmail.com>
Message-ID: <972ec5bd0609261124s3d8c6a4bwe3d0e13eea806cea@mail.gmail.com>

On 9/26/06, glyph at divmod.com <glyph at divmod.com> wrote:
> That ticket doesn't seem to refer to setuptools at all, just distutils.  I certainly haven't seen a discussion of removing twisted.plugin and switching to entry points.


Bob said "Maybe this is a good time to consider setuptools support?"
and I was trying to answer that one question. I agree that it's not
about moving entry points, but distutils is a required precursor for
setuptools.

Gah, sorry for the confusion.

To clarify *once* we make it to actually using distutils, then we'll
talk about setuptools (it's the direction I'd like to go, but there
have been significant issues that I think were resolved but I haven't
checked in the past six months).



From bob at redivi.com  Tue Sep 26 12:59:57 2006
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 26 Sep 2006 11:59:57 -0700
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <972ec5bd0609261124s3d8c6a4bwe3d0e13eea806cea@mail.gmail.com>
References: <6a36e7290609261018u3109d163i9efacf2b781dc584@mail.gmail.com>
	<20060926181735.1717.1177674818.divmod.quotient.60857@ohm>
	<972ec5bd0609261124q30451400q78da5a269223f7d5@mail.gmail.com>
	<972ec5bd0609261124s3d8c6a4bwe3d0e13eea806cea@mail.gmail.com>
Message-ID: <6a36e7290609261159j7eb4c05fle3938a30ef2f1792@mail.gmail.com>

On 9/26/06, Timothy Fitz <TimothyFitz at gmail.com> wrote:
> On 9/26/06, glyph at divmod.com <glyph at divmod.com> wrote:
> > That ticket doesn't seem to refer to setuptools at all, just distutils.  I certainly haven't seen a discussion of removing twisted.plugin and switching to entry points.
>
>
> Bob said "Maybe this is a good time to consider setuptools support?"
> and I was trying to answer that one question. I agree that it's not
> about moving entry points, but distutils is a required precursor for
> setuptools.
>
> Gah, sorry for the confusion.
>
> To clarify *once* we make it to actually using distutils, then we'll
> talk about setuptools (it's the direction I'd like to go, but there
> have been significant issues that I think were resolved but I haven't
> checked in the past six months).

Well, if the main setup.py is a single call to distutils.core.setup()
then setuptools support comes more or less for free. easy_install has
no problem building distutils-based stuff, so long as it's not insane.

entry point support would require setuptools, but I'd be happy just to
have setup.py be sane so that Twisted could be listed as a dependency
by setuptools-using projects and installed with easy_install.

-bob



From glyph at divmod.com  Tue Sep 26 13:05:06 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 26 Sep 2006 15:05:06 -0400
Subject: [Twisted-Python] Non-Insane Distutils Integration (was: silly
	licensing stuff)
In-Reply-To: <6a36e7290609261159j7eb4c05fle3938a30ef2f1792@mail.gmail.com>
Message-ID: <20060926190506.1717.1777665480.divmod.quotient.60888@ohm>

On Tue, 26 Sep 2006 11:59:57 -0700, Bob Ippolito <bob at redivi.com> wrote:

>Well, if the main setup.py is a single call to distutils.core.setup()
>then setuptools support comes more or less for free. easy_install has
>no problem building distutils-based stuff, so long as it's not insane.

OK, cool.  I think we can all get behind a non-insane distutils.

Periodically I forget and open up twisted's setup.py as an example for writing some simpler project's build script, and have to spend the next hour washing my eyes out with acid...



From manlio_perillo at libero.it  Tue Sep 26 13:20:15 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue, 26 Sep 2006 21:20:15 +0200
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926181424.1717.368017904.divmod.quotient.60855@ohm>
References: <20060926181424.1717.368017904.divmod.quotient.60855@ohm>
Message-ID: <45197D6F.1070501@libero.it>

glyph at divmod.com ha scritto:
> [...]
> 
>> Please don't use the phrase "intellectual property".
> 
> I wish I didn't even *know* the phrase, but I was quoting Phil Thompson
> (Riverbank) directly.  He wrote:
> 
> """
> Trolltech will have the same view. As far as they are concerned their
> intellectual property is the API and it doesn't matter how it is
> accessed.
> """
> 
> This is probably, as you say, legal nonsense.  I don't think Mr.
> Thompson is a lawyer either, nor is he speaking authoritatively for
> trolltech's lawyers.  But, he is a copyright holder in this case, and
> therefore entitled to certain outlandish opinions.
> 

It seems they are in good company with MySQL AB:
http://dev.mysql.com/doc/internals/en/licensing-notice.html

"""
The MySQL Protocol is part of the MySQL Database Management System. As
such, it falls under the provisions of the GNU Public License (GPL). A
copy of the GNU Public License is available on MySQL's web site, and in
the product download.

Because this is a GPL protocol, any product which uses it to connect to
a MySQL server, or to emulate a MySQL server, or to interpose between
any client and server which uses the protocol, or for any similar
purpose, is also bound by the GPL. Therefore if you use this description
to write a program, you must release your program as GPL.
"""

;-)



Regards  Manlio Perillo



From mak at trisoft.com.pl  Tue Sep 26 13:41:45 2006
From: mak at trisoft.com.pl (Grzegorz Makarewicz)
Date: Tue, 26 Sep 2006 21:41:45 +0200
Subject: [Twisted-Python] Non-Insane Distutils Integration
In-Reply-To: <20060926190506.1717.1777665480.divmod.quotient.60888@ohm>
References: <20060926190506.1717.1777665480.divmod.quotient.60888@ohm>
Message-ID: <45198279.1000909@trisoft.com.pl>

glyph at divmod.com wrote:
> On Tue, 26 Sep 2006 11:59:57 -0700, Bob Ippolito <bob at redivi.com> wrote:
>
>> Well, if the main setup.py is a single call to distutils.core.setup()
>> then setuptools support comes more or less for free. easy_install has
>> no problem building distutils-based stuff, so long as it's not insane.
>
> OK, cool.  I think we can all get behind a non-insane distutils.
>
Glyph - using twisted is hard, with (py 2.5 I assume) it's much harder, 
even witch distutils :) - like python from MvL.

who is using medusa :?

mak



From twisted-python at 2xlp.com  Tue Sep 26 17:42:57 2006
From: twisted-python at 2xlp.com (Jonathan)
Date: Tue, 26 Sep 2006 19:42:57 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926094946.GN23117@mithrandi.za.net>
References: <E1GRXKs-0007p3-02@pyramid.twistedmatrix.com>
	<4517EF5A.7090304@eepatents.com> <4517FD1F.6000304@eastlink.ca>
	<20060926094946.GN23117@mithrandi.za.net>
Message-ID: <353BED45-A499-4614-B0B1-9F29CDC21457@2xlp.com>

if this helps at all:

http://www.gnu.org/licenses/gpl-faq.html#IfLibraryIsGPL
http://www.gnu.org/licenses/gpl-faq.html#IfInterpreterIsGPL

Both copied below.

------


If a library is released under the GPL (not the LGPL), does that mean  
that any program which uses it has to be under the GPL?

Yes, because the program as it is actually run includes the library.





If a programming language interpreter is released under the GPL, does  
that mean programs written to be interpreted by it must be under GPL- 
compatible licenses?

When the interpreter just interprets a language, the answer is no.  
The interpreted program, to the interpreter, is just data; a free  
software license like the GPL, based on copyright law, cannot limit  
what data you use the interpreter on. You can run it on any data  
(interpreted program), any way you like, and there are no  
requirements about licensing that data to anyone.
However, when the interpreter is extended to provide "bindings" to  
other facilities (often, but not necessarily, libraries), the  
interpreted program is effectively linked to the facilities it uses  
through these bindings. So if these facilities are released under the  
GPL, the interpreted program that uses them must be released in a GPL- 
compatible way. The JNI or Java Native Interface is an example of  
such a binding mechanism; libraries that are accessed in this way are  
linked dynamically with the Java programs that call them. These  
libraries are also linked with the interpreter. If the interpreter is  
linked statically with these libraries, or if it is designed to link  
dynamically with these specific libraries, then it too needs to be  
released in a GPL-compatible way.
Another similar and very common case is to provide libraries with the  
interpreter which are themselves interpreted. For instance, Perl  
comes with many Perl modules, and a Java implementation comes with  
many Java classes. These libraries and the programs that call them  
are always dynamically linked together.
A consequence is that if you choose to use GPL'd Perl modules or Java  
classes in your program, you must release the program in a GPL- 
compatible way, regardless of the license used in the Perl or Java  
interpreter that the combined Perl or Java program will run on.



From jacob at cozi.com  Tue Sep 26 18:32:25 2006
From: jacob at cozi.com (Jacob Gabrielson)
Date: Tue, 26 Sep 2006 17:32:25 -0700
Subject: [Twisted-Python] SIGBREAK on windows
Message-ID: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>

Hi,
 
Has anyone run into a problem where their Twisted application gets a
SIGBREAK and shuts down, on Windows?  I have a simple application using
the ReconnectingClientFactory, running as a service (via srvany.exe),
that occasionally dies with a few messages:

2006/09/24 16:46 Pacific Daylight Time [-] Received SIGBREAK, shutting
down.
2006/09/24 16:46 Pacific Daylight Time [AgentProtocol,client]
<twisted.internet.tcp.Connector instance at 0x00A1B468> will retry in 2
seconds
2006/09/24 16:46 Pacific Daylight Time [AgentProtocol,client] Stopping
factory <twisted.internet.protocol.ReconnectingClientFactory instance at
0x00A10D28>
2006/09/24 16:46 Pacific Daylight Time [-] Main loop terminated.  

There's not a lot to go on, but I'm wondering if this is something
anyone else has run into on Windows.  I'm not really sure how a SIGBREAK
could get generated there in the first place.
 
Thanks,
 
-- Jacob



From jacob at internet24.de  Wed Sep 27 02:32:24 2006
From: jacob at internet24.de (Thomas Jacob)
Date: Wed, 27 Sep 2006 10:32:24 +0200
Subject: [Twisted-Python] SIGBREAK on windows
In-Reply-To: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>
References: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>
Message-ID: <1159345944.15741.9.camel@localhost.localdomain>

Twisted's default reactor on Windows shuts down when receiving  a
SIGBREAK (a Windows specific signal) (see
twisted.internet.{base,posixbase}.py), probably
so that you can hit CTRL-BREAK on a twisted app in a Windows console to
shut the app down.

Cf. also
http://windowssdk.msdn.microsoft.com/en-us/library/ms682541.aspx

So AFAIK you  or someone else probably just hit  ^C/^BREAK, but maybe
there are other ways to raise SIGBREAK...

On Tue, 2006-09-26 at 17:32 -0700, Jacob Gabrielson wrote:
> Hi,
>  
> Has anyone run into a problem where their Twisted application gets a
> SIGBREAK and shuts down, on Windows?  I have a simple application using
> the ReconnectingClientFactory, running as a service (via srvany.exe),
> that occasionally dies with a few messages:
> 
> 2006/09/24 16:46 Pacific Daylight Time [-] Received SIGBREAK, shutting
> down.
> 2006/09/24 16:46 Pacific Daylight Time [AgentProtocol,client]
> <twisted.internet.tcp.Connector instance at 0x00A1B468> will retry in 2
> seconds
> 2006/09/24 16:46 Pacific Daylight Time [AgentProtocol,client] Stopping
> factory <twisted.internet.protocol.ReconnectingClientFactory instance at
> 0x00A10D28>
> 2006/09/24 16:46 Pacific Daylight Time [-] Main loop terminated.  
> 
> There's not a lot to go on, but I'm wondering if this is something
> anyone else has run into on Windows.  I'm not really sure how a SIGBREAK
> could get generated there in the first place.
>  
> Thanks,
>  
> -- Jacob
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 191 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20060927/064462ff/attachment.sig>

From ralf at brainbot.com  Wed Sep 27 02:32:39 2006
From: ralf at brainbot.com (Ralf Schmitt)
Date: Wed, 27 Sep 2006 10:32:39 +0200
Subject: [Twisted-Python] Re: SIGBREAK on windows
In-Reply-To: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>
References: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>
Message-ID: <efdcv8$496$1@sea.gmane.org>

Jacob Gabrielson wrote:
> Hi,
>  
> Has anyone run into a problem where their Twisted application gets a
> SIGBREAK and shuts down, on Windows?  I have a simple application using
> the ReconnectingClientFactory, running as a service (via srvany.exe),
> that occasionally dies with a few messages:
> 
> 2006/09/24 16:46 Pacific Daylight Time [-] Received SIGBREAK, shutting
> down.
> 2006/09/24 16:46 Pacific Daylight Time [AgentProtocol,client]
> <twisted.internet.tcp.Connector instance at 0x00A1B468> will retry in 2
> seconds
> 2006/09/24 16:46 Pacific Daylight Time [AgentProtocol,client] Stopping
> factory <twisted.internet.protocol.ReconnectingClientFactory instance at
> 0x00A10D28>
> 2006/09/24 16:46 Pacific Daylight Time [-] Main loop terminated.  
> 
> There's not a lot to go on, but I'm wondering if this is something
> anyone else has run into on Windows.  I'm not really sure how a SIGBREAK
> could get generated there in the first place.
>  

You may receive that signal when users log off. I'm using the following
code to ignore signals when running as service (but I'm also using the
win32serviceutil module to start as a service).

import win32api

def sighandler(sig):
    print "received signal %s" % (sig,)
    return True

win32api.SetConsoleCtrlHandler(sighandler, True)

However, I guess that if you're using that code unchanged you might not
be able to stop your service anymore.

More Information can be found at msdn:
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/setconsolectrlhandler.asp

You might also want to look into using the win32service module. IMHO,
it's a lot easier to handle than srvany. I'm attaching our nbsvc program
as example, which we use to start our programs as NT services.

Regards,
- Ralf


-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: nbsvc
URL: </pipermail/twisted-python/attachments/20060927/f4b00e5e/attachment.ksh>

From jacob at internet24.de  Wed Sep 27 02:59:46 2006
From: jacob at internet24.de (Thomas Jacob)
Date: Wed, 27 Sep 2006 10:59:46 +0200
Subject: [Twisted-Python] Re: SIGBREAK on windows
In-Reply-To: <efdcv8$496$1@sea.gmane.org>
References: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>
	<efdcv8$496$1@sea.gmane.org>
Message-ID: <1159347586.15741.16.camel@localhost.localdomain>

> You may receive that signal when users log off. I'm using the following
> code to ignore signals when running as service (but I'm also using the
> win32serviceutil module to start as a service).

I've never got a sigbreak signal sent to my twisted/pywin32 services
when users log off so far, under what circumstances or on which
Windows platforms does this actually happen?


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 191 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20060927/182ba76f/attachment.sig>

From ralf at brainbot.com  Wed Sep 27 03:54:24 2006
From: ralf at brainbot.com (Ralf Schmitt)
Date: Wed, 27 Sep 2006 11:54:24 +0200
Subject: [Twisted-Python] Re: SIGBREAK on windows
In-Reply-To: <1159347586.15741.16.camel@localhost.localdomain>
References: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>	<efdcv8$496$1@sea.gmane.org>
	<1159347586.15741.16.camel@localhost.localdomain>
Message-ID: <451A4A50.4000606@brainbot.com>

Thomas Jacob wrote:
>> You may receive that signal when users log off. I'm using the following
>> code to ignore signals when running as service (but I'm also using the
>> win32serviceutil module to start as a service).
> 
> I've never got a sigbreak signal sent to my twisted/pywin32 services
> when users log off so far, under what circumstances or on which
> Windows platforms does this actually happen?
> 

I've tested Windows XP and it only sends me signal 5/6 (logoff and
shutdown I suppose). So it must have been Windows 2000 I guess.
http://www.eby-sarna.com/pipermail/peak/2004-August/001686.html also
mentions this problem.

Regards,
- Ralf




From moof at metamoof.net  Wed Sep 27 05:29:36 2006
From: moof at metamoof.net (Moof)
Date: Wed, 27 Sep 2006 11:29:36 +0000
Subject: [Twisted-Python] Non-Insane Distutils Integration (was: silly
	licensing stuff)
In-Reply-To: <20060926190506.1717.1777665480.divmod.quotient.60888@ohm>
References: <6a36e7290609261159j7eb4c05fle3938a30ef2f1792@mail.gmail.com>
	<20060926190506.1717.1777665480.divmod.quotient.60888@ohm>
Message-ID: <bff8eeef0609270429k4f322321ma74903fc3766f083@mail.gmail.com>

On 9/26/06, glyph at divmod.com <glyph at divmod.com> wrote:
> On Tue, 26 Sep 2006 11:59:57 -0700, Bob Ippolito <bob at redivi.com> wrote:
>
> >Well, if the main setup.py is a single call to distutils.core.setup()
> >then setuptools support comes more or less for free. easy_install has
> >no problem building distutils-based stuff, so long as it's not insane.
>
> OK, cool.  I think we can all get behind a non-insane distutils.
>
> Periodically I forget and open up twisted's setup.py as an example for writing some simpler project's build script, and have to spend the next hour washing my eyes out with acid...

I know a Sprint in New york's been announced. I wonder if anyone else
might be wanting to join in virtually? Preferably at a time us GMT
folk can still work at?

Moof - in Morocco. Works Saturdays.



From TimothyFitz at gmail.com  Wed Sep 27 07:35:29 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Wed, 27 Sep 2006 09:35:29 -0400
Subject: [Twisted-Python] Re: SIGBREAK on windows
In-Reply-To: <1159347586.15741.16.camel@localhost.localdomain>
References: <5AD9DC1AD1BC4241A8AB56D46DE5DFA80995AC4F@ehost011-6.exch011.intermedia.net>
	<efdcv8$496$1@sea.gmane.org>
	<1159347586.15741.16.camel@localhost.localdomain>
Message-ID: <972ec5bd0609270635i7556532by2287390543ecd24b@mail.gmail.com>

SIGBREAK will be sent if you have a program open in a console and
close the window by clicking the x. This can happen to services if
you're running them via a debug mechanism that connects them to the
console.

On 9/27/06, Thomas Jacob <jacob at internet24.de> wrote:
> > You may receive that signal when users log off. I'm using the following
> > code to ignore signals when running as service (but I'm also using the
> > win32serviceutil module to start as a service).
>
> I've never got a sigbreak signal sent to my twisted/pywin32 services
> when users log off so far, under what circumstances or on which
> Windows platforms does this actually happen?
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>



From thomas at apestaart.org  Wed Sep 27 12:38:47 2006
From: thomas at apestaart.org (thomas at apestaart.org)
Date: Wed, 27 Sep 2006 20:38:47 +0200 (CEST)
Subject: [Twisted-Python] RELEASE: Flumotion 0.2.2 'IT'
Message-ID: <20060927183848.06C0EEF9D5@otto.amantes>

This mail announces the release of Flumotion 0.2.2 'IT'.


Flumotion is a GPL streaming media server written in Python. It is distributed
and component-based: every step in the streaming process (production,
conversion, consumption) can be run inside a separate process on separate
machines.

Flumotion uses Twisted and GStreamer. Twisted enables the high-level
functionality, distributing components over the network. GStreamer, through the
Python bindings, enables the high-speed low-level functionality: actual media
processing.

Flumotion uses a central manager process to control the complete network; one
or more worker processes distributed over machines to run actual streaming
components; and one or more admin clients connecting to the manager to control
it.
 
-------------- next part --------------

Release notes for Flumotion 0.2.2 "IT"
        

The Flumotion team is happy to announce a new release of the
Flumotion Streaming Server.

Flumotion is a streaming server for GNU/Linux
systems featuring an easy to use configuration and administration GUI. 
Implemented using GStreamer as the processing backend and using python and
Twisted for the high-level operations and GUI, it combines a wide feature set
with ease of use.

  
Features of this release
    
      * Fully works with GStreamer 0.8 and 0.10
      * Fully works with Twisted 1.3.0 through 2.4.0
      * bug fixes

Bugs fixed in this release
    
      * 235 :  When selecting the TV card, the device name is not shown
      * 12 :   gstreactor bug
      * 14 :   crash after four days
      * 17 :   Clean up temporary files
      * 263 :  Old component UI remains when new pipeline loaded
      * 267 :  Admin UI doesn't provide a way to find out where http-streamer is listening
      * 317 :  cortado should do typefinding on its input instead of relying on mime type from server
      * 372 :  service scripts can run into permission failures writing to the log file
      * 374 :  running flumotion from service scripts makes it impossible to generate core dumps
      * 388 :  manager could detect registry needing an update before sending bundles
      * 413 :  stopping a component doesn't cause downstream components to go hungry

Download

You can find source releases of flumotion in the download directory:
http://flumotion.net/src/flumotion/

Flumotion Homepage

More details can be found on the project's website:
http://flumotion.net/

Support and Bugs

We use an issue tracker for bug reports and feature requests:
https://core.fluendo.com/flumotion/trac/newticket

Developers

You can browse the repository of SVN code from our tracker.

All code is in SVN and can be checked out from there.
It is hosted on https://core.fluendo.com/svn/

        
Contributors to this release
    
      * Andy Wingo
      * Michael Smith
      * Thomas Vander Stichele
      * Zaheer Merali
 
        
 

From ellisonbg.net at gmail.com  Thu Sep 28 00:11:41 2006
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Thu, 28 Sep 2006 00:11:41 -0600
Subject: [Twisted-Python] Sending a long string/buffer without copying it
Message-ID: <6ce0ac130609272311o2613a6fbhc57b50665a57dc25@mail.gmail.com>

HI,

In one of my Twisted based applications, I need to send large string
and buffers.  They can be 100's of MB's long (they come from large
numpy arrays).  I would like to be able to send them *without making
any copies* in the process.

This seems to be dificult with the way that certain parts of Twisted
are written:

in protocols.basic many of the sendString/sendLine method having
things that make a copy of the string or line to be send:

    def sendLine(self, line):
        """Sends a line to the other end of the connection.
        """
        return self.transport.write(line + self.delimiter)

If line is 100MB, this just made a second 100MB string.  To make
things worse, in my case a server needs to send this line to many
clients that are connected.  The line gets copied for each client!  If
I have 10 clients, I have nearly a GB worth of extra memory allocated
for this temporary copy.

This problem is easy solve at the protocol level: you just do separate
writes for the delimiter and the line.  Or if you are using a length
prefixed protocol, write the length bytes and the string separately.

BUT....

Even if I do that, it appears that Twisted is making copies elsewhere
- like in FileDescriptor.doWrite.  So, how can I send something
without making a copy?  I don't mind making copies of slices, just not
the whole thing.

Thanks

Brian



From p.mayers at imperial.ac.uk  Thu Sep 28 02:55:02 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 28 Sep 2006 09:55:02 +0100
Subject: [Twisted-Python] Sending a long string/buffer without copying it
In-Reply-To: <6ce0ac130609272311o2613a6fbhc57b50665a57dc25@mail.gmail.com>
References: <6ce0ac130609272311o2613a6fbhc57b50665a57dc25@mail.gmail.com>
Message-ID: <451B8DE6.5010907@imperial.ac.uk>

Brian Granger wrote:
> 
> Even if I do that, it appears that Twisted is making copies elsewhere
> - like in FileDescriptor.doWrite.  So, how can I send something
> without making a copy?  I don't mind making copies of slices, just not
> the whole thing.

You'd need to patch the reactor.

Isn't there some talk about a python buffer thingie for this kind of need?



From exarkun at divmod.com  Thu Sep 28 06:22:01 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 28 Sep 2006 08:22:01 -0400
Subject: [Twisted-Python] Sending a long string/buffer without copying it
In-Reply-To: <6ce0ac130609272311o2613a6fbhc57b50665a57dc25@mail.gmail.com>
Message-ID: <20060928122201.1717.2044684215.divmod.quotient.62166@ohm>

On Thu, 28 Sep 2006 00:11:41 -0600, Brian Granger <ellisonbg.net at gmail.com> wrote:
>HI,
>
>In one of my Twisted based applications, I need to send large string
>and buffers.  They can be 100's of MB's long (they come from large
>numpy arrays).  I would like to be able to send them *without making
>any copies* in the process.
>
>This seems to be dificult with the way that certain parts of Twisted
>are written:
>
>in protocols.basic many of the sendString/sendLine method having
>things that make a copy of the string or line to be send:
>
>    def sendLine(self, line):
>        """Sends a line to the other end of the connection.
>        """
>        return self.transport.write(line + self.delimiter)
>
>If line is 100MB, this just made a second 100MB string.  To make
>things worse, in my case a server needs to send this line to many
>clients that are connected.  The line gets copied for each client!  If
>I have 10 clients, I have nearly a GB worth of extra memory allocated
>for this temporary copy.
>
>This problem is easy solve at the protocol level: you just do separate
>writes for the delimiter and the line.  Or if you are using a length
>prefixed protocol, write the length bytes and the string separately.
>
>BUT....
>
>Even if I do that, it appears that Twisted is making copies elsewhere
>- like in FileDescriptor.doWrite.  So, how can I send something
>without making a copy?  I don't mind making copies of slices, just not
>the whole thing.

Don't pass the entire thing to a single call to transport.write() (or
LineReceiver.sendLine).  Instead, write a producer.

Jean-Paul



From mailinglists at smartology.nl  Thu Sep 28 06:22:57 2006
From: mailinglists at smartology.nl (Remi Cool)
Date: Thu, 28 Sep 2006 14:22:57 +0200
Subject: [Twisted-Python] twistd save state does not work
Message-ID: <451BBEA1.8040305@smartology.nl>

Hello,

I've readied my app for use with twistd, the daemonizing works, but a 
tap file is not saved upon exit (kill 'cat twisted.pid'). How can I 
enable the save state option? BTW I'm not using the -o option with twistd ;)

Second ... is it possible to disable the twisted logging if you use 
twistd to start the app? Or is it possible to set a log level so that 
only warnings and errors are shown and my log is not flooded with 
(TCPServer) connection messages.

- Remi -




From jacob at cozi.com  Thu Sep 28 15:19:05 2006
From: jacob at cozi.com (Jacob Gabrielson)
Date: Thu, 28 Sep 2006 14:19:05 -0700
Subject: [Twisted-Python] Re: SIGBREAK on windows
In-Reply-To: <972ec5bd0609270635i7556532by2287390543ecd24b@mail.gmail.com>
Message-ID: <5AD9DC1AD1BC4241A8AB56D46DE5DFA8099DFA39@ehost011-6.exch011.intermedia.net>

I think that is it.  I'll try an use Ralf's solution and make my stuff a
real Service.  It looks like Java folks have run into similar issues in
the past:

http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4323062

This rather long page eventually explains the problem in fairly gory
detail.

Thanks,

-- Jacob

 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Timothy
Fitz
Sent: Wednesday, September 27, 2006 6:35 AM
To: Twisted general discussion; jacob at internet24.de
Subject: Re: [Twisted-Python] Re: SIGBREAK on windows

SIGBREAK will be sent if you have a program open in a console and close
the window by clicking the x. This can happen to services if you're
running them via a debug mechanism that connects them to the console.

On 9/27/06, Thomas Jacob <jacob at internet24.de> wrote:
> > You may receive that signal when users log off. I'm using the 
> > following code to ignore signals when running as service (but I'm 
> > also using the win32serviceutil module to start as a service).
>
> I've never got a sigbreak signal sent to my twisted/pywin32 services 
> when users log off so far, under what circumstances or on which 
> Windows platforms does this actually happen?
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From ellisonbg.net at gmail.com  Thu Sep 28 16:48:08 2006
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Thu, 28 Sep 2006 16:48:08 -0600
Subject: [Twisted-Python] Sending a long string/buffer without copying it
In-Reply-To: <20060928122201.1717.2044684215.divmod.quotient.62166@ohm>
References: <6ce0ac130609272311o2613a6fbhc57b50665a57dc25@mail.gmail.com>
	<20060928122201.1717.2044684215.divmod.quotient.62166@ohm>
Message-ID: <6ce0ac130609281548r30c89fb7t3fcd10bb44604357@mail.gmail.com>

But a producer will just make sure the whole thing isn't copied at the
same time right?  It still does many smaller copies - while the memory
is saved there is still the performance hit.

I just wanted to make sure that I wan't missing something obvious.  I
think the right way of doing this is to use a true rw buffer, such as
those created by numpy.

On 9/28/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Thu, 28 Sep 2006 00:11:41 -0600, Brian Granger <ellisonbg.net at gmail.com> wrote:
> >HI,
> >
> >In one of my Twisted based applications, I need to send large string
> >and buffers.  They can be 100's of MB's long (they come from large
> >numpy arrays).  I would like to be able to send them *without making
> >any copies* in the process.
> >
> >This seems to be dificult with the way that certain parts of Twisted
> >are written:
> >
> >in protocols.basic many of the sendString/sendLine method having
> >things that make a copy of the string or line to be send:
> >
> >    def sendLine(self, line):
> >        """Sends a line to the other end of the connection.
> >        """
> >        return self.transport.write(line + self.delimiter)
> >
> >If line is 100MB, this just made a second 100MB string.  To make
> >things worse, in my case a server needs to send this line to many
> >clients that are connected.  The line gets copied for each client!  If
> >I have 10 clients, I have nearly a GB worth of extra memory allocated
> >for this temporary copy.
> >
> >This problem is easy solve at the protocol level: you just do separate
> >writes for the delimiter and the line.  Or if you are using a length
> >prefixed protocol, write the length bytes and the string separately.
> >
> >BUT....
> >
> >Even if I do that, it appears that Twisted is making copies elsewhere
> >- like in FileDescriptor.doWrite.  So, how can I send something
> >without making a copy?  I don't mind making copies of slices, just not
> >the whole thing.
>
> Don't pass the entire thing to a single call to transport.write() (or
> LineReceiver.sendLine).  Instead, write a producer.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From bob at redivi.com  Thu Sep 28 17:08:25 2006
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 28 Sep 2006 16:08:25 -0700
Subject: [Twisted-Python] Sending a long string/buffer without copying it
In-Reply-To: <6ce0ac130609281548r30c89fb7t3fcd10bb44604357@mail.gmail.com>
References: <6ce0ac130609272311o2613a6fbhc57b50665a57dc25@mail.gmail.com>
	<20060928122201.1717.2044684215.divmod.quotient.62166@ohm>
	<6ce0ac130609281548r30c89fb7t3fcd10bb44604357@mail.gmail.com>
Message-ID: <6a36e7290609281608s5ca60e6na82f417567038323@mail.gmail.com>

That's going to happen anyway. The buffers for a socket are a few
kilobytes. While it's possible in C to get away with zero copy if you
try hard enough, it's not really possible from Python.

Your bottleneck is almost certainly going to be I/O, not memcpy.
You're worrying too much about what amounts to premature optimization.

-bob

On 9/28/06, Brian Granger <ellisonbg.net at gmail.com> wrote:
> But a producer will just make sure the whole thing isn't copied at the
> same time right?  It still does many smaller copies - while the memory
> is saved there is still the performance hit.
>
> I just wanted to make sure that I wan't missing something obvious.  I
> think the right way of doing this is to use a true rw buffer, such as
> those created by numpy.
>
> On 9/28/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> > On Thu, 28 Sep 2006 00:11:41 -0600, Brian Granger <ellisonbg.net at gmail.com> wrote:
> > >HI,
> > >
> > >In one of my Twisted based applications, I need to send large string
> > >and buffers.  They can be 100's of MB's long (they come from large
> > >numpy arrays).  I would like to be able to send them *without making
> > >any copies* in the process.
> > >
> > >This seems to be dificult with the way that certain parts of Twisted
> > >are written:
> > >
> > >in protocols.basic many of the sendString/sendLine method having
> > >things that make a copy of the string or line to be send:
> > >
> > >    def sendLine(self, line):
> > >        """Sends a line to the other end of the connection.
> > >        """
> > >        return self.transport.write(line + self.delimiter)
> > >
> > >If line is 100MB, this just made a second 100MB string.  To make
> > >things worse, in my case a server needs to send this line to many
> > >clients that are connected.  The line gets copied for each client!  If
> > >I have 10 clients, I have nearly a GB worth of extra memory allocated
> > >for this temporary copy.
> > >
> > >This problem is easy solve at the protocol level: you just do separate
> > >writes for the delimiter and the line.  Or if you are using a length
> > >prefixed protocol, write the length bytes and the string separately.
> > >
> > >BUT....
> > >
> > >Even if I do that, it appears that Twisted is making copies elsewhere
> > >- like in FileDescriptor.doWrite.  So, how can I send something
> > >without making a copy?  I don't mind making copies of slices, just not
> > >the whole thing.
> >
> > Don't pass the entire thing to a single call to transport.write() (or
> > LineReceiver.sendLine).  Instead, write a producer.
> >
> > Jean-Paul
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From jacob at cozi.com  Thu Sep 28 17:18:42 2006
From: jacob at cozi.com (Jacob Gabrielson)
Date: Thu, 28 Sep 2006 16:18:42 -0700
Subject: [Twisted-Python] Sending a long string/buffer without copying it
In-Reply-To: <6ce0ac130609281548r30c89fb7t3fcd10bb44604357@mail.gmail.com>
Message-ID: <5AD9DC1AD1BC4241A8AB56D46DE5DFA8099DFB50@ehost011-6.exch011.intermedia.net>

I'm probably missing something, but your outgoing bytes have to be
copied at least once, anyway, into the kernel's address space (unless
you're using some kind of trick like sendfile()).  Clearly creating a
duplicate of the entire multi-MB string would be bad.  But as long as
the Producer kept returning the same, say, 4KB buffer (I'm assuming
that's possible?), you're only talking about one extra copy per write.
That *might* still be significant, but without measuring it it would be
very hard to say.

Just my $.02,

-- Jacob 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Brian
Granger
Sent: Thursday, September 28, 2006 3:48 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] Sending a long string/buffer without
copying it

But a producer will just make sure the whole thing isn't copied at the
same time right?  It still does many smaller copies - while the memory
is saved there is still the performance hit.

I just wanted to make sure that I wan't missing something obvious.  I
think the right way of doing this is to use a true rw buffer, such as
those created by numpy.

On 9/28/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Thu, 28 Sep 2006 00:11:41 -0600, Brian Granger
<ellisonbg.net at gmail.com> wrote:
> >HI,
> >
> >In one of my Twisted based applications, I need to send large string 
> >and buffers.  They can be 100's of MB's long (they come from large 
> >numpy arrays).  I would like to be able to send them *without making 
> >any copies* in the process.
> >
> >This seems to be dificult with the way that certain parts of Twisted 
> >are written:
> >
> >in protocols.basic many of the sendString/sendLine method having 
> >things that make a copy of the string or line to be send:
> >
> >    def sendLine(self, line):
> >        """Sends a line to the other end of the connection.
> >        """
> >        return self.transport.write(line + self.delimiter)
> >
> >If line is 100MB, this just made a second 100MB string.  To make 
> >things worse, in my case a server needs to send this line to many 
> >clients that are connected.  The line gets copied for each client!  
> >If I have 10 clients, I have nearly a GB worth of extra memory 
> >allocated for this temporary copy.
> >
> >This problem is easy solve at the protocol level: you just do 
> >separate writes for the delimiter and the line.  Or if you are using 
> >a length prefixed protocol, write the length bytes and the string
separately.
> >
> >BUT....
> >
> >Even if I do that, it appears that Twisted is making copies elsewhere
> >- like in FileDescriptor.doWrite.  So, how can I send something 
> >without making a copy?  I don't mind making copies of slices, just 
> >not the whole thing.
>
> Don't pass the entire thing to a single call to transport.write() (or 
> LineReceiver.sendLine).  Instead, write a producer.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From ellisonbg.net at gmail.com  Thu Sep 28 19:45:01 2006
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Thu, 28 Sep 2006 19:45:01 -0600
Subject: [Twisted-Python] Sending a long string/buffer without copying it
In-Reply-To: <5AD9DC1AD1BC4241A8AB56D46DE5DFA8099DFB50@ehost011-6.exch011.intermedia.net>
References: <6ce0ac130609281548r30c89fb7t3fcd10bb44604357@mail.gmail.com>
	<5AD9DC1AD1BC4241A8AB56D46DE5DFA8099DFB50@ehost011-6.exch011.intermedia.net>
Message-ID: <6ce0ac130609281845n1960737cw698380dbfc3448f8@mail.gmail.com>

Yes, if the sockets have buffers of a few k, then using a producer
should be fine.  I will try this out.  Thanks!

Brian



From anthony at interlink.com.au  Thu Sep 28 22:29:10 2006
From: anthony at interlink.com.au (Anthony Baxter)
Date: Fri, 29 Sep 2006 14:29:10 +1000
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
References: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
Message-ID: <200609291429.11882.anthony@interlink.com.au>

On Sunday 24 September 2006 14:31, glyph at divmod.com wrote:
> On Sun, 24 Sep 2006 00:44:03 -0300, Felipe Almeida Lessa 
<felipe.lessa at gmail.com> wrote:
> >So the only GUI toolkits that will be officialy supported are going to
> >be Gtk, Tk and PyUI?
>
> Thanks for reminding me.
>
> Neither Tk nor PyUI have buildbots.  However, they're both implemented
> using polling timed events running on top of another reactor... I don't
> know how much "support" those really count for.  It might be good to remove
> them as well, but they're very little code.

I'd be opposed to removing Tk - it allows you to build (ok, ugly looking) 
simple UIs on top of twisted+python without needing to download anything 
other than the core Python and twisted code. As you noted, the Tk code isn't 
a real reactor of it's own, so what does "untested" mean, in this case?

Anthony
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From NormanTindall at zdisk.net  Fri Sep 29 02:12:27 2006
From: NormanTindall at zdisk.net (Norman Tindall)
Date: Fri, 29 Sep 2006 12:12:27 +0400
Subject: [Twisted-Python] Socket - connection lost
Message-ID: <1642671750.20060929121227@zdisk.net>

Hello,

      Reciently i wrote a simple client using Reconnecting Factory.
      That client logins to my socket server.. and that`s it.

      Interesting thing is that it is seems that twisted client,
      sends some ping on a TCP level without sending any data to the
      socket directly.
      Because when i pull out cord from the ethernet card simulating
      network falure, client in about 10-15 seconds determines that
      connection lost!! (pretty cool) While my server still thinks
      that client is up.

      I am using SO_KEEPALIVE on server - but documentations says
      it will only ping (and so timed outed) on a few hours.

      How do i make my server act the same way as the client?
      (to make some sort of a low level cheching of connections is
      broken without actualy sending anything to socket)
  

-- 
Best regards,
 Norman                          mailto:NormanTindall at zdisk.net




From ellisonbg.net at gmail.com  Fri Sep 29 00:27:36 2006
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Fri, 29 Sep 2006 00:27:36 -0600
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6: qt,
	corefoundation, threadedselect, wx
In-Reply-To: <200609291429.11882.anthony@interlink.com.au>
References: <20060924043149.1717.1928095366.divmod.quotient.58260@ohm>
	<200609291429.11882.anthony@interlink.com.au>
Message-ID: <6ce0ac130609282327h2956c49bq6435ac8ca6694c39@mail.gmail.com>

I am on the IPython development team and one of the features of
IPython that is highly praised by users is its ability to use various
GUI toolkits interactively (wc, qt3, qt4, tk, gtk).  Currently, this
is not done using Twisted...but we are completely redesigning IPython
from the ground up to use Twisted to allow us to have IPython run
remotely, and lots of other interesting things.

One of the reason that we went with Twisted is that it looked like it
would be easy to integrate Twisted with the various GUI run loops - a
feature we need to continue to support.  We did some basic tests with
wx and threadedselect reactor and it worked well for what we
tried....but that was when tsr first came out and I guess it has never
matured enough to be stable.

I completely understand the desire to have code that passes tests
(especially reactors).  But I think the importance of these GUI
reactors is being greatly underestimated if they are under
consideration for removal.  Minimally, they should remain somewhere in
the repository and be well documented as to why they are there and
their history.  I don't have time to dig into this code right, but
eventually, I will need to come back to this and get our code working
with lots of different toolkits.

I guess I would vote to leave them in, but clearly and verbosely
document their status.  This will encourage folks to work on them
whereas removing them will lead people to simply create more half
baked GUI reactors.



From mailinglists at smartology.nl  Fri Sep 29 08:53:10 2006
From: mailinglists at smartology.nl (Remi Cool)
Date: Fri, 29 Sep 2006 16:53:10 +0200
Subject: [Twisted-Python] twistd save state does not work
In-Reply-To: <451BBEA1.8040305@smartology.nl>
References: <451BBEA1.8040305@smartology.nl>
Message-ID: <451D3356.5060208@smartology.nl>

Remi Cool wrote:
> Hello,
>
> I've readied my app for use with twistd, the daemonizing works, but a 
> tap file is not saved upon exit (kill 'cat twisted.pid'). How can I 
> enable the save state option? BTW I'm not using the -o option with 
> twistd ;)
>
> Second ... is it possible to disable the twisted logging if you use 
> twistd to start the app? Or is it possible to set a log level so that 
> only warnings and errors are shown and my log is not flooded with 
> (TCPServer) connection messages.
>
The save state function only seems to work when you start with a tap in 
the firstplace. It then saves the state in appname-shutdown.tap ... ok 
but why doesn't it work when you start from a python file?

My 2nd question about the logging still stands ... and is it possible to 
(re)set the name of the log file in the python file where application is 
defined? I have all paths for the app in an ini file (configParser) and 
it would not be a good solution to declare the logfile path somewhere else.

- Remi -




From exarkun at divmod.com  Fri Sep 29 10:07:07 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 29 Sep 2006 12:07:07 -0400
Subject: [Twisted-Python] twistd save state does not work
In-Reply-To: <451D3356.5060208@smartology.nl>
Message-ID: <20060929160707.1717.1403292531.divmod.quotient.63126@ohm>

On Fri, 29 Sep 2006 16:53:10 +0200, Remi Cool <mailinglists at smartology.nl> wrote:
>Remi Cool wrote:
>>Hello,
>>
>>I've readied my app for use with twistd, the daemonizing works, but a tap 
>>file is not saved upon exit (kill 'cat twisted.pid'). How can I enable the 
>>save state option? BTW I'm not using the -o option with twistd ;)
>>
>>Second ... is it possible to disable the twisted logging if you use twistd 
>>to start the app? Or is it possible to set a log level so that only 
>>warnings and errors are shown and my log is not flooded with (TCPServer) 
>>connection messages.
>The save state function only seems to work when you start with a tap in the 
>firstplace. It then saves the state in appname-shutdown.tap ... ok but why 
>doesn't it work when you start from a python file?
>

It's implicitly disabled when loading an application from a Python file,
since there is no guarantee that the application will be serializable.

There is no way to explicitly re-enable it.  I would suggest that this
feature be added, but since most people seem to think tap files should
be eliminated as soon as possible, pursuing this would probably involve
a lot of debate that I'm not personally interested in participating in.

I would suggest using an alternate mechanism for persistence.

>My 2nd question about the logging still stands ...

It's not, although it certainly should be.  I believe there is at least
one ticket open in the tracker for improving the logging features of
twistd.

> and is it possible to 
>(re)set the name of the log file in the python file where application is 
>defined? I have all paths for the app in an ini file (configParser) and it 
>would not be a good solution to declare the logfile path somewhere else.

The next release of Twisted will include a much more extensible way to
interact with twistd which should satisfy this use-case.  If you want
to play with it in svn trunk at HEAD, you can take a look at the output of
`twistd --help'.  The command list which shows up at the end of that
output can be extending using the plugin system, so you can add your
command, which sets up logging or loads configuration from an ini, or
whatever else you like.

Jean-Paul



From foom at fuhm.net  Fri Sep 29 14:16:20 2006
From: foom at fuhm.net (James Y Knight)
Date: Fri, 29 Sep 2006 16:16:20 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r18320 - Name functions in
	deprecation warnings
In-Reply-To: <E1GT88w-0002KO-00@wolfwood>
References: <E1GT88w-0002KO-00@wolfwood>
Message-ID: <05C9CDDA-AB5D-4173-AD5B-C658B3E63169@fuhm.net>


On Sep 28, 2006, at 10:30 PM, Jonathan Lange wrote:
>  def flushErrors(*errorTypes):
> -    """Support function for testing frameworks.
> +    """
> +    DEPRECATED in Twisted 2.5.
> +
> +    Support function for testing frameworks.
>
>      Return a list of errors that occurred since the last call to  
> flushErrors().
>      (This will return None unless startKeepingErrors has been  
> called.)
>      """
>
> +    warnings.warn("Deprecated in Twisted 2.5",  
> category=DeprecationWarning,
> +                  stacklevel=2)

As a general note, when deprecating something that is replaced by  
something else, the original thing should mention what the new thing  
is you should use instead. In this case, that'd be  
"self.observer.flushErrors(...)", if you're using it in a test case,  
I think?

James



From manlio_perillo at libero.it  Fri Sep 29 17:01:06 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 30 Sep 2006 01:01:06 +0200
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
Message-ID: <451DA5B2.2040504@libero.it>

From the msdn:
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/ipc/base/setnamedpipehandlestate.asp

"""PIPE_NOWAIT 0x00000001 	

Nonblocking mode is enabled. In this mode, ReadFile, WriteFile, and
ConnectNamedPipe always return immediately. Note that nonblocking mode
is supported for compatibility with Microsoft® LAN Manager version 2.0
and should not be used to achieve asynchronous input and output (I/O)
with named pipes.
"""


P.S.
I really can't believe that win32 support for asynchronous I/O works
with named pipes but not with anonymous pipes...

By the way, instead of using a polling, why not to use a separate thread
that puts data into a DeferredQueue?


P.S.2:
From:
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/ipc/base/anonymous_pipe_operations.asp

"""Anonymous pipes are implemented using a named pipe with a unique
name. Therefore, you can often pass a handle to an anonymous pipe to a
function that requires a handle to a named pipe.
"""

And from:
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/inheritance.asp

"""A child process can inherit [...]

* Open handles returned by the CreateFile function. This includes
handles to files, console input buffers, console screen buffers, named
pipes, serial communication devices, and mailslots.

* Open handles to process, thread, mutex, event, semaphore, named-pipe,
anonymous-pipe, and file-mapping objects. These are returned by the
CreateProcess, CreateThread, CreateMutex, CreateEvent, CreateSemaphore,
CreateNamedPipe, CreatePipe, and CreateFileMapping functions, respectively.
"""

So, why not to create a named pipe with an unique name, know to both the
 parent and the child process, as an example using an enviroment variable?

I think that using named pipes can simplify the _dumbwin32proc.
Moreover polling a named pipe is not an efficient operation
(reading the author of "Windows System Programming").

Lastly, the parent process, after creating a named pipe instance, can
wait for a client connection using ConnectNamedPipe.




Regards  Manlio Perillo




From glyph at divmod.com  Fri Sep 29 20:38:27 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 29 Sep 2006 22:38:27 -0400
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <451DA5B2.2040504@libero.it>
Message-ID: <20060930023827.1717.1439111136.divmod.quotient.63491@ohm>

On Sat, 30 Sep 2006 01:01:06 +0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>From the msdn:

Yep, it's unfortunate that we were forced to use such an ugly API.  However, the *correct* way to do this is to use IOCP, and good IOCP support has been *years* in the making.  We still haven't got a reliably working IOCP buildbot.

You're welcome to contribute a patch which cleans this up on the select reactor, but frankly I don't se any approach which would be better.

>I really can't believe that win32 support for asynchronous I/O works
>with named pipes but not with anonymous pipes...

Yeah, Windows is pretty terrible.  It's only a problem in some versions, but I forget where and when it was fixed.

>By the way, instead of using a polling, why not to use a separate thread
>that puts data into a DeferredQueue?

Because interrupting a blocked thread is a dangerous and error-prone task.  It was hard enough getting the thing to just work with non-blocking pipe IO.

>"""Anonymous pipes are implemented using a named pipe with a unique
>name. Therefore, you can often pass a handle to an anonymous pipe to a
>function that requires a handle to a named pipe.
>"""

The word "often" is the killer there.

>"""A child process can inherit [...]
>"""

>So, why not to create a named pipe with an unique name, know to both the
> parent and the child process, as an example using an enviroment variable?

Because that would not be usable as standard output using the usual APIs.  This is not just for running other Twisted-using programs in a subprocess, but any program which attempts to adhere to UNIX conventions around standard IO.

>I think that using named pipes can simplify the _dumbwin32proc.
>Moreover polling a named pipe is not an efficient operation
>(reading the author of "Windows System Programming").

The goal of _dumbwin32proc is obviously not efficiency, it is correctness in a configuration which is not well-supported on Windows.  Why do you think its name begins with "dumb"?

>Lastly, the parent process, after creating a named pipe instance, can
>wait for a client connection using ConnectNamedPipe.

... as long as it can wait for the completion event.  Which it can't, because it's using select().



From jml at mumak.net  Fri Sep 29 23:33:49 2006
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 30 Sep 2006 15:33:49 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r18320 - Name functions in
	deprecation warnings
In-Reply-To: <05C9CDDA-AB5D-4173-AD5B-C658B3E63169@fuhm.net>
References: <E1GT88w-0002KO-00@wolfwood>
	<05C9CDDA-AB5D-4173-AD5B-C658B3E63169@fuhm.net>
Message-ID: <d06a5cd30609292233vd0c35d7o72c92115cbbecb36@mail.gmail.com>

On 9/30/06, James Y Knight <foom at fuhm.net> wrote:
>
> As a general note, when deprecating something that is replaced by
> something else, the original thing should mention what the new thing
> is you should use instead. In this case, that'd be
> "self.observer.flushErrors(...)", if you're using it in a test case,
> I think?
>

I normally do this. I didn't in this case because
TestCase.flushLoggedErrors isn't a full replacement. Still, from what
I understand, these APIs were added for tests so it's probably worth
documenting.

cheers,
jml



From manlio_perillo at libero.it  Sat Sep 30 02:04:47 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 30 Sep 2006 10:04:47 +0200
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <20060930023827.1717.1439111136.divmod.quotient.63491@ohm>
References: <20060930023827.1717.1439111136.divmod.quotient.63491@ohm>
Message-ID: <451E251F.9010302@libero.it>

glyph at divmod.com ha scritto:
> On Sat, 30 Sep 2006 01:01:06 +0200, Manlio Perillo
> <manlio_perillo at libero.it> wrote:
>> From the msdn:
> 
> Yep, it's unfortunate that we were forced to use such an ugly API. 
> However, the *correct* way to do this is to use IOCP, and good IOCP
> support has been *years* in the making.  We still haven't got a reliably
> working IOCP buildbot.
> 

Unfortunately I don't know I/O completion ports.

> You're welcome to contribute a patch which cleans this up on the select
> reactor, but frankly I don't se any approach which would be better.
> 
>> I really can't believe that win32 support for asynchronous I/O works
>> with named pipes but not with anonymous pipes...
> 
> Yeah, Windows is pretty terrible.  It's only a problem in some versions,
> but I forget where and when it was fixed.
> 
>> By the way, instead of using a polling, why not to use a separate thread
>> that puts data into a DeferredQueue?
> 
> Because interrupting a blocked thread is a dangerous and error-prone
> task.  It was hard enough getting the thing to just work with
> non-blocking pipe IO.
> 

Not sure to understand here.

> [...]
>> So, why not to create a named pipe with an unique name, know to both the
>> parent and the child process, as an example using an enviroment variable?
> 
> Because that would not be usable as standard output using the usual
> APIs.  This is not just for running other Twisted-using programs in a
> subprocess, but any program which attempts to adhere to UNIX conventions
> around standard IO.
> 

The solution is simple.
Windows *do not* supports POSIX ;-).

If one want to use Windows, the win32eventreactor (or, in future, the
iocp reactor) should be the default (and the only one allowed).

One needs to write a specializd abstract.FileDescriptor class, that use
the Overlapped structure for I/O.

This should allow one to easily use asyncronous I/O support of Window,
not only for sockets, but on all (not many...) 'handles' that support
the asyncronous I/O API.

One can even add support to asyncronous I/O from a console, since
WaitForMultipleObjects supports console handles, and the number of event
pending in the input queue can be retrieved using
GetNumberOfConsoleInputEvents().


By the way: serialport already works only with win32eventreactor.






Regards   Manlio Perillo



From glyph at divmod.com  Sat Sep 30 03:34:14 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 30 Sep 2006 05:34:14 -0400
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <451E251F.9010302@libero.it>
Message-ID: <20060930093414.1717.635703473.divmod.quotient.63636@ohm>

On Sat, 30 Sep 2006 10:04:47 +0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>glyph at divmod.com ha scritto:
>> On Sat, 30 Sep 2006 01:01:06 +0200, Manlio Perillo
>> <manlio_perillo at libero.it> wrote:

>Unfortunately I don't know I/O completion ports.

That's unfortunate, but I'm not surprised :).

>> Because interrupting a blocked thread is a dangerous and error-prone
>> task.  It was hard enough getting the thing to just work with
>> non-blocking pipe IO.

>Not sure to understand here.

"threads are bad"

>The solution is simple.
>Windows *do not* supports POSIX ;-).

It does, however, support standard IO, at least well enough for a large chunk of applications.  Although it's not as well supported as on "POSIX" platforms, there are plenty of programs that produce output which Twisted can happily parse semi-asynchronously using the current strategy.  Why on earth would you want to remove it?  It serves a purpose (cross-platform multi-process communication and control), it works, it's tested.

>If one want to use Windows, the win32eventreactor (or, in future, the
>iocp reactor) should be the default (and the only one allowed).

win32eventreactor can only support 64 sockets.  The IOCP reactor currently has several issues and is missing, e.g. SSL support.  While true asynchronous I/O and GUI event loop integration have their advantages, the primary feature of the select reactor on Windows is that it actually *works* in most cases.

>One needs to write a specializd abstract.FileDescriptor class, that use
>the Overlapped structure for I/O.

You mean like twisted.internet.iocpreactor.abstract.ConnectedSocket?  Have you even read this code?

> [snip more oblique allusions to various win32 APIs]

Frankly, I don't think you know what you're talking about.  If you know enough to make iocpreactor, or even win32eventreactor, work on Windows with SSL and GUI support, great, do that and contribute it, and we can discuss the patch.  If not, we're not going to break the *only* working, tested Windows reactor because you think one day it should be different.

>This should allow one to easily use asyncronous I/O support of Window,
>not only for sockets, but on all (not many...) 'handles' that support
>the asyncronous I/O API.

If it's easy, feel free to do it :).

>By the way: serialport already works only with win32eventreactor.

That is correct, but hardly relevant.



From glyph at divmod.com  Sat Sep 30 03:54:17 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 30 Sep 2006 05:54:17 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <20060926181424.1717.368017904.divmod.quotient.60855@ohm>
Message-ID: <20060930095417.1717.528727954.divmod.quotient.63644@ohm>

On Tue, 26 Sep 2006 14:14:24 -0400, glyph at divmod.com wrote:
>On Tue, 26 Sep 2006 13:01:50 -0400, James Y Knight <foom at fuhm.net> wrote:

>>If it is truly their position that the  textual source code of qtreactor is 
>>a derivative work of PyQT, I  think they are quite confused.

>If it is your opinion that the "textual source code" is not a derivative 
>work because it merely refers to, but does not incorporate, the text of 
>qtreactor or qt, then the GPL is completely meaningless in the context of 
>Python and there was no point in licensing it that way in the first place. 
>Python bytecode does not make any additional references to the code it is 
>importing beyond what Python source code does.

I've got what I believe is the final word on this.  Phil Thompson (again, Riverbank) says:

"""
The reactor must be licensed under the GPL, but the rest of Twisted
doesn't. A Twisted application that doesn't use the reactor can be
licensed under the Twisted license. A Twisted application that uses the
reactor must be licensed under the GPL.
"""

The best course of action, then, would be to distribute qtreactor separately, since we can no longer say that Twisted is all MIT licensed if we do not.  The practical ramifications of this are not earth-shattering, so I think that we do not need to, e.g. release a 2.4.1 which does not include qtreactor, but 2.5+ should definitely not include it.

I also asked specifically about not interfering with the PyQt/Qt commercial license, and Mr. Thompson suggested wording like this:

"""
This code is licensed under either the Twisted license or the GPL
depending on the license of the copy of PyQt being used.

If the GPL version of PyQt is being used then this code is also licensed
under the GPL. Given the viral nature of the GPL this means that any
application must also be licensed under the GPL.

If any other version of PyQt is being used (eg. commercial, evaluation,
educational) then this code is licensed under the Twisted license.
"""

I suggest that we leave that wording mostly unchanged.



From glyph at divmod.com  Sat Sep 30 04:00:47 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 30 Sep 2006 06:00:47 -0400
Subject: [Twisted-Python] removing unsupported reactors in twisted 2.6:
	qt, corefoundation, threadedselect, wx
In-Reply-To: <6ce0ac130609282327h2956c49bq6435ac8ca6694c39@mail.gmail.com>
Message-ID: <20060930100047.1717.904312517.divmod.quotient.63648@ohm>

On Fri, 29 Sep 2006 00:27:36 -0600, Brian Granger <ellisonbg.net at gmail.com> wrote:
>I am on the IPython development team and one of the features of
>IPython that is highly praised by users is its ability to use various
>GUI toolkits interactively (wc, qt3, qt4, tk, gtk).  Currently, this
>is not done using Twisted...but we are completely redesigning IPython
>from the ground up to use Twisted to allow us to have IPython run
>remotely, and lots of other interesting things.

Thanks for thinking of Twisted when you did this :).

>I completely understand the desire to have code that passes tests
>(especially reactors).  But I think the importance of these GUI
>reactors is being greatly underestimated if they are under
>consideration for removal.  Minimally, they should remain somewhere in
>the repository and be well documented as to why they are there and
>their history.  I don't have time to dig into this code right, but
>eventually, I will need to come back to this and get our code working
>with lots of different toolkits.

A major complaint that many users have about Twisted is that it is sprawling. I've repeatedly heard complaints that it's very difficult to look at the source tree and have any idea what's going on.  In many cases I think this complaint is miguided, because you don't have to understand everything to use some things, but there's no point in bloating the repository with code that is decaying with each release, which is never looked at by any developers, and which could silently break due to an unrelated internal API change with no test coverage or automated builds to bring anyone's attention to it.

>I guess I would vote to leave them in, but clearly and verbosely
>document their status.  This will encourage folks to work on them
>whereas removing them will lead people to simply create more half
>baked GUI reactors.

I am inviting anyone who would like to improve them to speak up now, and a few people have.  Right now it seems like we have at least a few volunteers who will keep these reactors alive, but of course any additional contribution would be welcome.



From manlio_perillo at libero.it  Sat Sep 30 05:06:03 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 30 Sep 2006 13:06:03 +0200
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <20060930093414.1717.635703473.divmod.quotient.63636@ohm>
References: <20060930093414.1717.635703473.divmod.quotient.63636@ohm>
Message-ID: <451E4F9B.6080708@libero.it>

glyph at divmod.com ha scritto:
> [...]
> 
> "threads are bad"
> 

But they are used in twisted.enterprise.adbapi, and as I can see several
developers prefer to use threads to interact with "foreign" APIs instead
of develope native asyncronous API.

>> The solution is simple.
>> Windows *do not* supports POSIX ;-).
> 
> It does, however, support standard IO, at least well enough for a large
> chunk of applications.  Although it's not as well supported as on
> "POSIX" platforms, there are plenty of programs that produce output
> which Twisted can happily parse semi-asynchronously using the current
> strategy.  Why on earth would you want to remove it?  It serves a
> purpose (cross-platform multi-process communication and control), it
> works, it's tested.
> 

This is true, for sockets it works well, but for pipes it uses an
inefficient implementation.

> [...]

>> One needs to write a specializd abstract.FileDescriptor class, that use
>> the Overlapped structure for I/O.
> 
> You mean like twisted.internet.iocpreactor.abstract.ConnectedSocket? 
> Have you even read this code?
> 

Yes, but as the name suggests it works only for Sockets(?).

The problem is simple:
if I want to do asyncronous I/O with Windows I don't have an unique
'interface'.

Only sockets are really integrated with the reactor.
serialport has some specialized code for win32eventreactor integration,
but if I want to use, as an example, named pipe, I have to write my own
support
(but it seems this is an issue for broken POSIX implementations, too).


>> [snip more oblique allusions to various win32 APIs]
> 
> Frankly, I don't think you know what you're talking about.  

This is very likely ;-)

> If you know
> enough to make iocpreactor, or even win32eventreactor, work on Windows
> with SSL and GUI support, great, do that and contribute it, and we can
> discuss the patch.  If not, we're not going to break the *only* working,
> tested Windows reactor because you think one day it should be different.
> 

Is win32eventreactor not working and not tested?
You did not mention it in the "removing unsupported reactors in twisted"
thread.

>> This should allow one to easily use asyncronous I/O support of Window,
>> not only for sockets, but on all (not many...) 'handles' that support
>> the asyncronous I/O API.
> 
> If it's easy, feel free to do it :).
> 

I have write it, now stdio works ;-).

Unfortunately it is not very efficient since:
- it uses _pollingfile (not a real porblem)
- it reads raw keyboard input and have to do all low level stuff like
  '\b' handling, '\r' conversion, and so


Here is the main code.
I suspect such a thing will never be accepted into Twisted ;-):


class _PollableConsoleReader(_PollableResource):
    # XXX TODO add support for Window events (resize)
    implements(IPushProducer)

    def __init__(self, con, receivedCallback, lostCallback):
        self.con = con
        self.receivedCallback = receivedCallback
        self.lostCallback = lostCallback
        self.cp = "cp%d" % win32console.GetConsoleCP()

        # We need this
        self._stdout = win32console.GetStdHandle(
	                   win32console.STD_OUTPUT_HANDLE
                        )

    def checkWork(self):
        finished = 0
        fullDataRead = []

        info = self._stdout.GetConsoleScreenBufferInfo()
        Y = info["CursorPosition"].Y

        while 1:
            try:
                n = self.con.GetNumberOfConsoleInputEvents()
                if n == 0:
                    break

                records = self.con.ReadConsoleInput(n)

                # We need to process input
                # XXX check me
                # XXX TODO rewrite in C(?), now this is very inefficient
                for record in records:
                    if record.EventType != win32console.KEY_EVENT \
                            or not record.KeyDown:
                        continue

                    char = record.Char
                    if char == '\b':
                        # We need to handle this
                        info = self._stdout.GetConsoleScreenBufferInfo()
                        rowSize = info["MaximumWindowSize"].X
                        cursorPosition = info["CursorPosition"]

                        # Move the cursor
                        if cursorPosition.X == 0:
                            if cursorPosition.Y > Y:
                                cursorPosition.Y -= 1
                                cursorPosition.X = rowSize - 1
                        else:
                            cursorPosition.X -= 1

                        self._stdout.SetConsoleCursorPosition(
                            cursorPosition
                         )
                        self._stdout.WriteConsoleOutputCharacter(' ',
                                                      cursorPosition)
                        continue
                    elif char == '\0':
                        continue
                    elif char == '\r':
                        char = '\n'

                    char = char * record.RepeatCount
                    data = char.encode(self.cp)
                    self._stdout.WriteConsole(data) # Do echo

                    fullDataRead.append(data)
            except pywintypes.error:
                raise
                # XXX this should not happen
                finished = 1
                break

        dataBuf = ''.join(fullDataRead)
        if dataBuf:
            self.receivedCallback(dataBuf)
        if finished:
            self.cleanup()

        return len(dataBuf)

   ...

The ConsoleWriter does not need to support asyncronous I/O, so it is a
simple wrapper for ConsoleWrite.

This code still have some problems[1]...
For now I have added this to _pollingfile module.

The _win32stdio module can simply check if the stdin is attached to a
terminal, so it (hopefully) can support both pipes and consoles.


Many things can be added, like an emulation of POSIX terminal, callbacks
for resize events, support for focus in/out, colored output, history
editing, ...


[1]
How can be tested such a thing?



Regards  Manlio Perillo



From general at eepatents.com  Sat Sep 30 09:35:25 2006
From: general at eepatents.com (Ed Suominen)
Date: Sat, 30 Sep 2006 08:35:25 -0700
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <E1GTccm-0008BJ-02@pyramid.twistedmatrix.com>
References: <E1GTccm-0008BJ-02@pyramid.twistedmatrix.com>
Message-ID: <451E8EBD.9040008@eepatents.com>

> On Tue, 26 Sep 2006 14:14:24 -0400, glyph at divmod.com wrote: I've got
> what I believe is the final word on this.  Phil Thompson (again,
> Riverbank) says:
> 
> """ The reactor must be licensed under the GPL, but the rest of
> Twisted doesn't. A Twisted application that doesn't use the reactor
> can be licensed under the Twisted license. A Twisted application that
> uses the reactor must be licensed under the GPL. """
> 
> The best course of action, then, would be to distribute qtreactor
> separately, since we can no longer say that Twisted is all MIT
> licensed if we do not.  The practical ramifications of this are not
> earth-shattering, so I think that we do not need to, e.g. release a
> 2.4.1 which does not include qtreactor, but 2.5+ should definitely
> not include it.
> 
> I also asked specifically about not interfering with the PyQt/Qt
> commercial license, and Mr. Thompson suggested wording like this:
> 
> """ This code is licensed under either the Twisted license or the GPL
>  depending on the license of the copy of PyQt being used.
> 
> If the GPL version of PyQt is being used then this code is also
> licensed under the GPL. Given the viral nature of the GPL this means
> that any application must also be licensed under the GPL.
> 
> If any other version of PyQt is being used (eg. commercial,
> evaluation, educational) then this code is licensed under the Twisted
> license. """
> 
> I suggest that we leave that wording mostly unchanged.

I agree and think (see disclaimer below) that this is just fine. It does
not seem to inhibit the developer's flexibility at all.

If you are developing with GPL PyQt, it looks like you can use freely
qtreactor, under the condition that distributions of your application
(including the copy of qtreactor that it incorporates) are made under
the terms of the GPL. Nothing in the licensing of qtreactor could remove
that requirement.

If you are developing with commercial PyQt, Mr. Thomson's suggested
wording indicates that your commercial application can also use
qtreactor without any adverse impact on the proprietary nature of your work.

This allows people to develop Twisted-based PyQt applications as free
software (GPL) or commercially with the purchase of a commercial PyQt
license, which is the desirable outcome for both Riverbank Computing and
Twisted fans alike.

I would think that Mr. Thompson's authorization from TrollTech to
dual-license PyQt gives him the ability  to authorize this sensible
arrangement regarding qtreactor's use of PyQt. It would be nice to have
confirmation of that from him as well, however, since anything importing
PyQt ultimately has a dependency on Qt itself.

If you need someone to host qtreactor, I'd be willing to do so from
http://foss.eepatents.com, as long as I had direct assurance from Mr.
Thompson that all these questions are settled. I could also contribute a
few Twisted-friendly enhancements like the deferred-returning modal
dialog box I posted a while back. However, such enhancements will have
been developed with the GPL version of PyQt and would not be subject to
the special provisions above unless Mr. Thompson chose to offer that as
well.

Best regards, Ed

DISCLAIMER: Nothing in this comment is to be construed as legal advice.
Although I probably think about things legal more often than the average
person, being a registered patent agent, I am not a lawyer qualified to
practice copyright law or anything else outside the representation of
patent applicants before the US patent office. Nobody related to this
topic is my client in even that capacity.



From exarkun at divmod.com  Sat Sep 30 12:32:35 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 30 Sep 2006 14:32:35 -0400
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <451E4F9B.6080708@libero.it>
Message-ID: <20060930183235.1717.126919328.divmod.quotient.63875@ohm>

On Sat, 30 Sep 2006 13:06:03 +0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
> [snip]
>
>Here is the main code.
>I suspect such a thing will never be accepted into Twisted ;-):
>
> [snip]
>

This looks like it could be an interesting beginning for better terminal
support on Windows.  It would be better if you included it in unified
diff format in the issue tracker, though, along with the unit tests you
developed with it.  I don't know if anyone out there is interested enough
to finish it, but if it correctly provides even a basic level of
functionality, it might prove a useful starting place for some other
developer.  Comprehensive test coverage and developer-oriented documentation
improve the chances of someone else picking up where you've left off.

>The ConsoleWriter does not need to support asyncronous I/O, so it is a
>simple wrapper for ConsoleWrite.

Why?  Can't writing block?  What if you write a huge amount of data?  What
if the user clicks and holds on the terminal, or selects a menu or resizes
the window?  Won't those lead to a write blocking for an arbitrary amount
of time?

>
>This code still have some problems[1]...
>For now I have added this to _pollingfile module.
>
> [snip]
>
>
>[1]
>How can be tested such a thing?
>

Presumably by launching a process in a terminal and then communicating with
it in order to assert things about its behavior.

Jean-Paul



From manlio_perillo at libero.it  Sat Sep 30 13:05:46 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 30 Sep 2006 21:05:46 +0200
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <20060930183235.1717.126919328.divmod.quotient.63875@ohm>
References: <20060930183235.1717.126919328.divmod.quotient.63875@ohm>
Message-ID: <451EC00A.2040908@libero.it>

Jean-Paul Calderone ha scritto:
> On Sat, 30 Sep 2006 13:06:03 +0200, Manlio Perillo
> <manlio_perillo at libero.it> wrote:
>> [snip]
>>
>> Here is the main code.
>> I suspect such a thing will never be accepted into Twisted ;-):
>>
>> [snip]
>>
> 
> This looks like it could be an interesting beginning for better terminal
> support on Windows.  It would be better if you included it in unified
> diff format in the issue tracker, though, along with the unit tests you
> developed with it.  I don't know if anyone out there is interested enough
> to finish it, but if it correctly provides even a basic level of
> functionality, it might prove a useful starting place for some other
> developer. 


I just remembered that IPython came with a readline implementation in
Python + ctypes.
There is a complete console module with ansi terminal emulation.

The idea is to write a conio module with an implementation for both
Windows and POSIX (like serialport).


> Comprehensive test coverage and developer-oriented
> documentation
> improve the chances of someone else picking up where you've left off.
>

I'll try to reuse the console module from IPython.
Is it a problem the use of ctype?
This is not really necessary with pywin32.

>> The ConsoleWriter does not need to support asyncronous I/O, so it is a
>> simple wrapper for ConsoleWrite.
> 
> Why?  Can't writing block?  What if you write a huge amount of data?  What
> if the user clicks and holds on the terminal, or selects a menu or resizes
> the window?  Won't those lead to a write blocking for an arbitrary amount
> of time?
> 

Ok. I'll just copy the code from _PollableWritePipe.
If I'm not wrong it simply write a chunk of data at every tick of the timer.

>>
>> This code still have some problems[1]...
>> For now I have added this to _pollingfile module.
>>
>> [snip]
>>
>>
>> [1]
>> How can be tested such a thing?
>>
> 
> Presumably by launching a process in a terminal and then communicating with
> it in order to assert things about its behavior.
> 

I'll try to do something.



Regards  Manlio Perillo



From corydodt at gmail.com  Sat Sep 30 14:09:58 2006
From: corydodt at gmail.com (Cory Dodt)
Date: Sat, 30 Sep 2006 13:09:58 -0700
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <451EC00A.2040908@libero.it>
References: <20060930183235.1717.126919328.divmod.quotient.63875@ohm>
	<451EC00A.2040908@libero.it>
Message-ID: <c16a94ff0609301309m2c93d13et9f762cef8d042a14@mail.gmail.com>

> The idea is to write a conio module with an implementation for both
> Windows and POSIX (like serialport).
>
>
> > Comprehensive test coverage and developer-oriented
> > documentation
> > improve the chances of someone else picking up where you've left off.
> >
>
> I'll try to reuse the console module from IPython.
> Is it a problem the use of ctype?
> This is not really necessary with pywin32.


Personally I'd prefer a switch to ctypes from pywin32.  It's smaller, it's
included in Python 2.5.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060930/aaa6c559/attachment.html>

From glyph at divmod.com  Sat Sep 30 16:58:37 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 30 Sep 2006 18:58:37 -0400
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <c16a94ff0609301309m2c93d13et9f762cef8d042a14@mail.gmail.com>
Message-ID: <20060930225837.1717.1786729602.divmod.quotient.63966@ohm>


On Sat, 30 Sep 2006 13:09:58 -0700, Cory Dodt <corydodt at gmail.com> wrote:

>Personally I'd prefer a switch to ctypes from pywin32.  It's smaller, it's
>included in Python 2.5.

But it's not included with Python 2.3 and the rest of our win32 support.  This sounds like an entirely separate issue.




From glyph at divmod.com  Sat Sep 30 17:12:08 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 30 Sep 2006 19:12:08 -0400
Subject: [Twisted-Python] Twisted & Qt
In-Reply-To: <451E8EBD.9040008@eepatents.com>
Message-ID: <20060930231208.1717.977460358.divmod.quotient.63972@ohm>

On Sat, 30 Sep 2006 08:35:25 -0700, Ed Suominen <general at eepatents.com> wrote:

>> The best course of action, then, would be to distribute qtreactor
>> separately, since we can no longer say that Twisted is all MIT
>> licensed if we do not.  The practical ramifications of this are not
>> earth-shattering, so I think that we do not need to, e.g. release a
>> 2.4.1 which does not include qtreactor, but 2.5+ should definitely
>> not include it.
>>
>> I also asked specifically about not interfering with the PyQt/Qt
>> commercial license, and Mr. Thompson suggested wording like this:

 [...]

>I agree and think (see disclaimer below) that this is just fine. It does
>not seem to inhibit the developer's flexibility at all.

Excellent.  As both a PyQt developer and someone with more legal experience than anyone else posting I am glad to see you agree :).

>If you need someone to host qtreactor, I'd be willing to do so 

I think we will still be hosting it from twistedmatrix.com, and hopefully, it will get its own buildbot there as well.  As James noted earlier, the reactor APIs are still fragile and internal, so developing it externally doesn't really make sense.  There's no particular problem with TMLabs distributing GPL'd software.  I just don't want it to be part of the Twisted tarball.



From glyph at divmod.com  Sat Sep 30 17:23:37 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 30 Sep 2006 19:23:37 -0400
Subject: [Twisted-Python] _dumbwin32proc and PIPE_NOWAIT
In-Reply-To: <451E4F9B.6080708@libero.it>
Message-ID: <20060930232337.1717.1142591311.divmod.quotient.63977@ohm>

I think I get it now.  The actual issue you're talking about is console IO.  The thing about the efficiency of polling is a side issue.

On Sat, 30 Sep 2006 13:06:03 +0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>glyph at divmod.com ha scritto:

>The problem is simple:
>if I want to do asyncronous I/O with Windows I don't have an unique
>'interface'.

Yes.  Take it up with Microsoft :).  Even within their native event loops, things are inconsistent.

>Is win32eventreactor not working and not tested?

It's tested, but it's not working.  See http://twistedmatrix.com/buildbot/ - you'll notice the "win32-win32er" column is always red.  It's also limited because it still allows only 63 objects.

>You did not mention it in the "removing unsupported reactors in twisted"
>thread.

It has maintainers, it has a buildbot, and it's been gradually decreasing its number of failing tests over time.  It didn't seem like a candidate for removal.

>I have write it, now stdio works ;-).

>Unfortunately it is not very efficient since:
>- it uses _pollingfile (not a real porblem)
>- it reads raw keyboard input and have to do all low level stuff like
>  '\b' handling, '\r' conversion, and so

It's very hard to do these things efficiently, so I'm not too worried about that.  We also don't have a lot of programmers interested in Windows support.  My interest in Windows support ends right about at the point where the servers I develop can be successfully tested and developed on win32 :).  Providing functionality in an inefficient implementation at least provides some useful functionality in the meanwhile, and something to optimize later if it becomes important.

>Here is the main code.
>I suspect such a thing will never be accepted into Twisted ;-):

As JP said, it might, with some tests and a patch in the tracker :).

>The _win32stdio module can simply check if the stdin is attached to a
>terminal, so it (hopefully) can support both pipes and consoles.

That would be great.

>Many things can be added, like an emulation of POSIX terminal, callbacks
>for resize events, support for focus in/out, colored output, history
>editing, ...

>[1]
>How can be tested such a thing?

In addition to JP's suggestion, "mock" the actual API you will be testing with, by replacing it in the tests and asserting that the appropriate things are called on the console object that you are passing it.

Both approaches make sense in different situations, and good test coverage will generally do both.



From exarkun at twistedmatrix.com  Sat Sep 30 23:05:01 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 01 Oct 2006 05:05:01 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1159679101.65.1665355874@twistedmatrix.com

Bug summary
______________________
Summary for 2006-09-24 through 2006-10-01
Bugs opened: 20    Bugs closed: 12  Total open bugs: 738 (+8)

|== Type Changes   |== Priority Changes   |== Component Changes     
|Defect:       +1  |Highest:  -4          |Conch:               -1  
|Enhancement:  +6  |High:     +4          |Core:                +9  
|Task:         +2  |Normal:   +9          |Lore:                +1  
                                          |Pb:                  +2  
                                          |Release Management:  +0  
                                          |Trial:               -2  
                                          |Web2.Dav:            -1  
                                          |Website:             +2  
                                          |Words:               -1  


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2130] Remove twisted.internet.qtreactor (opened by exarkun) (CLOSED, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2130

[#2133] Docstrings for Trial runner and unittest (opened by jml) (CLOSED, fixed)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2133

[#1999] Move newpb out of trunk into a branch or separate package (opened by exarkun)
    task            pb         http://twistedmatrix.com/trac/ticket/1999

                    ===== High =====
[#2124] Issue warnings for pending calls that are removed by iterate() calls (opened by jml)
    task            trial      http://twistedmatrix.com/trac/ticket/2124

[#2129] COPY and MOVE do not copy and move properties (opened by wsanchez)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2129

[#2136] t.plugin.getCache craps out on Windows (opened by PenguinOfDoom)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2136

[#2137] Pointer for end-users to the new location of the Qt reactor (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/2137

[#2139] test_underUnderPathAlreadyImported and test_listingModules from twisted.test.test_modules.(Zip)PathModificationTest fail with Gtk2 reactor (opened by exarkun)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2139

[#2141] Twisted Trac Content Re-org (opened by oubiwann)
    enhancement     website    http://twistedmatrix.com/trac/ticket/2141

                    ===== Normal =====
[#2125] PB Banana struggles transmitting large ints (opened by engie)
    defect          pb         http://twistedmatrix.com/trac/ticket/2125

[#2126] threadedselectreactor is made available as though it were a reactor (but it is not a reactor) (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2126

[#2127] Certificate.inspect busted (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2127

[#2128] [patch] Twisted 2.4.0 fails to build into RPMs because of stdio_test_halfclose.py (opened by shieldszero) (CLOSED, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2128

[#2131] Windows install doesn't install docs (opened by TimothyFitz)
    defect          core       http://twistedmatrix.com/trac/ticket/2131

[#2132] ThreadedResolver timeout oddity (opened by ghazel)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2132

[#2134] lore --output latex fails on span indexes (opened by DavidBlewett)
    defect          lore       http://twistedmatrix.com/trac/ticket/2134

[#2135] twisted.intenet.stdio does not read input on Windows (opened by synapsis)
    defect          core       http://twistedmatrix.com/trac/ticket/2135

[#2138] Test email notification changes (opened by exarkun) (CLOSED, fixed)
    task            release management http://twistedmatrix.com/trac/ticket/2138

[#2140] A pre-started connecting handler for ClientFactory (opened by ghazel)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2140

[#2142] Make the FAQ a wiki page (opened by jml)
    enhancement     website    http://twistedmatrix.com/trac/ticket/2142



Closed Bugs
______________________
                    ===== Highest =====
[#1180] test_cftp shouldn't manually iterate the reactor (opened by exarkun, closed by dreid, fixed)
    defect          conch      http://twistedmatrix.com/trac/ticket/1180

[#2098] XMPP SASL implementation chokes when no realm has been received (opened by ralphm, closed by ralphm, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/2098

[#1999] Move newpb out of trunk into a branch or separate package (opened by exarkun, closed by exarkun, )
    task            pb         http://twistedmatrix.com/trac/ticket/1999

[#2083] Add test for statusForException() (opened by wsanchez, closed by wsanchez, fixed)
    enhancement     web2.dav   http://twistedmatrix.com/trac/ticket/2083

[#2133] Docstrings for Trial runner and unittest (opened by jml, closed by jml, fixed)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2133

[#2090] Deprecate reactor methods in tests (opened by jml, closed by jml, fixed)
    task            trial      http://twistedmatrix.com/trac/ticket/2090

[#2130] Remove twisted.internet.qtreactor (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2130

[#1409] Trial should handle logged errors using an observer. (opened by jml, closed by jml, fixed)
    defect          trial      http://twistedmatrix.com/trac/ticket/1409

                    ===== High =====
[#1591] twisted.web2.dav.test.test_prop.PROP.test_PROPFIND fails if pyxattr is installed (opened by spiv, closed by dreid, fixed)
    defect          web2.dav   http://twistedmatrix.com/trac/ticket/1591

[#1400] unittest special attributes not well documented (opened by ml.flex, closed by jml, fixed)
    defect          trial      http://twistedmatrix.com/trac/ticket/1400

                    ===== Normal =====
[#2128] [patch] Twisted 2.4.0 fails to build into RPMs because of stdio_test_halfclose.py (opened by shieldszero, closed by exarkun, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2128

[#2138] Test email notification changes (opened by exarkun, closed by exarkun, fixed)
    task            release management http://twistedmatrix.com/trac/ticket/2138





