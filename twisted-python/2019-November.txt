From trac at twistedmatrix.com  Sun Nov  3 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 Nov 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1572761118.72.359165403888961510@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191103/3ebe1ce5/attachment.html>

From wk80333 at gmail.com  Tue Nov  5 23:19:56 2019
From: wk80333 at gmail.com (Waqar Khan)
Date: Tue, 5 Nov 2019 22:19:56 -0800
Subject: [Twisted-Python] sharing a dict between child processes
Message-ID: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>

Hi,
So, I am writing a twisted server. This server spawn multiple child
processes using reactor spawnProcess that initializes a process protocol.

Now, each of the childprocess receives some REST requests. Each process has
a dict that acts as cache.
Now, I want to share dict across processes.
In general, python has SharedMemoryManager in multiprocessing module which
would have helped.
https://docs.python.org/3/library/multiprocessing.shared_memory.html#multiprocessing.managers.SharedMemoryManager.SharedMemory
But since I am using twisted internal process implementation, how do I
share this dict across the processes so that all the processes use this
common cache?
Thanks
Waqar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191105/675d7405/attachment.html>

From maarten at treewalker.org  Wed Nov  6 07:21:22 2019
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Wed, 06 Nov 2019 15:21:22 +0100
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
Message-ID: <1999449.iMQn4rLfX3@hyperion>

On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> Hi,
> So, I am writing a twisted server. This server spawn multiple child
> processes using reactor spawnProcess that initializes a process
> protocol.
> 
> Now, each of the childprocess receives some REST requests. Each
> process has a dict that acts as cache.
> Now, I want to share dict across processes.
> In general, python has SharedMemoryManager in multiprocessing module
> which would have helped.
> https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> ultiprocessing.managers.SharedMemoryManager.SharedMemory But since I
> am using twisted internal process implementation, how do I share this
> dict across the processes so that all the processes use this common
> cache?

Keeping a dictionary in SharedMemoryManager seems far from trivial. I 
don't think you can allocate arbitrary Python objects in the shared 
memory and even if you could, you would run into problems when one 
process mutates the dictionary while another is looking up something or 
also mutating it.

It could in theory work if you implement a custom lock-less dictionary, 
but that would be a lot of work and hard to get right. Also having 
shared memory mutations be synced between multiple CPU cores could 
degrade performance, since keeping core-local CPU caches in sync is 
expensive.

Would it be an option to have only one process accept the REST requests, 
check whether the result is in the cache and only distribute work to the 
other processes if you get a cache miss? Typically the case where an 
answer is cached is pretty fast, so perhaps you don't need multiple 
processes to handle incoming requests.

Bye,
		Maarten




From wk80333 at gmail.com  Wed Nov  6 09:35:27 2019
From: wk80333 at gmail.com (Waqar Khan)
Date: Wed, 6 Nov 2019 08:35:27 -0800
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <1999449.iMQn4rLfX3@hyperion>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <1999449.iMQn4rLfX3@hyperion>
Message-ID: <CAJuJkHPzCQ_sGJKYPTC4S7sFK7-rY_p891h-hiPkJ38NLK8k0g@mail.gmail.com>

Hi Marteen,
  Thanks for the response.
When you say "when one process mutates the dictionary while another is
looking up something or also mutating it."  Do you mean that a key/value
pair is getting modified or is it that a dict, in general, is getting
modified.
The first one is not really a concern as the key to value mapping is
unique(so all the processes will require the same value for same key). So
read/write  to dict doesnt really have to be "threadsafe" or anything like
that.
But, dict getting modified and made available across rest of the processes
will be common.

The thing is, the major cost of our task is I/O. So, when a request comes
in we fetch some data and then cache it. Now, each processes has their own
cache and that is very inefficient. One idea is to share the cache across
processes.
Does that make sense?
Thanks for the help.



On Wed, Nov 6, 2019 at 6:22 AM Maarten ter Huurne <maarten at treewalker.org>
wrote:

> On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> > Hi,
> > So, I am writing a twisted server. This server spawn multiple child
> > processes using reactor spawnProcess that initializes a process
> > protocol.
> >
> > Now, each of the childprocess receives some REST requests. Each
> > process has a dict that acts as cache.
> > Now, I want to share dict across processes.
> > In general, python has SharedMemoryManager in multiprocessing module
> > which would have helped.
> > https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> > ultiprocessing.managers.SharedMemoryManager.SharedMemory But since I
> > am using twisted internal process implementation, how do I share this
> > dict across the processes so that all the processes use this common
> > cache?
>
> Keeping a dictionary in SharedMemoryManager seems far from trivial. I
> don't think you can allocate arbitrary Python objects in the shared
> memory and even if you could, you would run into problems when one
> process mutates the dictionary while another is looking up something or
> also mutating it.
>
> It could in theory work if you implement a custom lock-less dictionary,
> but that would be a lot of work and hard to get right. Also having
> shared memory mutations be synced between multiple CPU cores could
> degrade performance, since keeping core-local CPU caches in sync is
> expensive.
>
> Would it be an option to have only one process accept the REST requests,
> check whether the result is in the cache and only distribute work to the
> other processes if you get a cache miss? Typically the case where an
> answer is cached is pretty fast, so perhaps you don't need multiple
> processes to handle incoming requests.
>
> Bye,
>                 Maarten
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191106/434483aa/attachment.html>

From barry.scott at forcepoint.com  Wed Nov  6 09:38:10 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Wed, 6 Nov 2019 16:38:10 +0000
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <1999449.iMQn4rLfX3@hyperion>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <1999449.iMQn4rLfX3@hyperion>
Message-ID: <3555526.FTIeEQcjyD@barry-scott-desktop>

On Wednesday, 6 November 2019 14:21:22 GMT Maarten ter Huurne wrote:
> On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> > Hi,
> > So, I am writing a twisted server. This server spawn multiple child
> > processes using reactor spawnProcess that initializes a process
> > protocol.
> > 
> > Now, each of the childprocess receives some REST requests. Each
> > process has a dict that acts as cache.
> > Now, I want to share dict across processes.
> > In general, python has SharedMemoryManager in multiprocessing module
> > which would have helped.
> > https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> > ultiprocessing.managers.SharedMemoryManager.SharedMemory But since I
> > am using twisted internal process implementation, how do I share this
> > dict across the processes so that all the processes use this common
> > cache?
> 
> Keeping a dictionary in SharedMemoryManager seems far from trivial. I
> don't think you can allocate arbitrary Python objects in the shared
> memory and even if you could, you would run into problems when one
> process mutates the dictionary while another is looking up something or
> also mutating it.
> 
> It could in theory work if you implement a custom lock-less dictionary,
> but that would be a lot of work and hard to get right. Also having
> shared memory mutations be synced between multiple CPU cores could
> degrade performance, since keeping core-local CPU caches in sync is
> expensive.
> 
> Would it be an option to have only one process accept the REST requests,
> check whether the result is in the cache and only distribute work to the
> other processes if you get a cache miss? Typically the case where an
> answer is cached is pretty fast, so perhaps you don't need multiple
> processes to handle incoming requests.

We have used a couple of ways to cache.
1. Use a singleton process to hold the cache and ask it, via IPC, for answers 
from the other process.
2. have a cache in each process

Barry


> 
> Bye,
> 		Maarten
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From wk80333 at gmail.com  Wed Nov  6 09:43:52 2019
From: wk80333 at gmail.com (Waqar Khan)
Date: Wed, 6 Nov 2019 08:43:52 -0800
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <3555526.FTIeEQcjyD@barry-scott-desktop>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <1999449.iMQn4rLfX3@hyperion> <3555526.FTIeEQcjyD@barry-scott-desktop>
Message-ID: <CAJuJkHPX4eiqse5R+BK_uYMRAO=osJNQ2Hmqkm3AU9T1xiiBqQ@mail.gmail.com>

Hi Barry,
        Thanks for the response. Where can I read more about (1). It seems
like that is something I need to explore.
As we already have (2) (cache for each process).
Thanks again for your help.

On Wed, Nov 6, 2019 at 8:39 AM Scott, Barry <barry.scott at forcepoint.com>
wrote:

> On Wednesday, 6 November 2019 14:21:22 GMT Maarten ter Huurne wrote:
> > On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> > > Hi,
> > > So, I am writing a twisted server. This server spawn multiple child
> > > processes using reactor spawnProcess that initializes a process
> > > protocol.
> > >
> > > Now, each of the childprocess receives some REST requests. Each
> > > process has a dict that acts as cache.
> > > Now, I want to share dict across processes.
> > > In general, python has SharedMemoryManager in multiprocessing module
> > > which would have helped.
> > > https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> > > ultiprocessing.managers.SharedMemoryManager.SharedMemory But since I
> > > am using twisted internal process implementation, how do I share this
> > > dict across the processes so that all the processes use this common
> > > cache?
> >
> > Keeping a dictionary in SharedMemoryManager seems far from trivial. I
> > don't think you can allocate arbitrary Python objects in the shared
> > memory and even if you could, you would run into problems when one
> > process mutates the dictionary while another is looking up something or
> > also mutating it.
> >
> > It could in theory work if you implement a custom lock-less dictionary,
> > but that would be a lot of work and hard to get right. Also having
> > shared memory mutations be synced between multiple CPU cores could
> > degrade performance, since keeping core-local CPU caches in sync is
> > expensive.
> >
> > Would it be an option to have only one process accept the REST requests,
> > check whether the result is in the cache and only distribute work to the
> > other processes if you get a cache miss? Typically the case where an
> > answer is cached is pretty fast, so perhaps you don't need multiple
> > processes to handle incoming requests.
>
> We have used a couple of ways to cache.
> 1. Use a singleton process to hold the cache and ask it, via IPC, for
> answers
> from the other process.
> 2. have a cache in each process
>
> Barry
>
>
> >
> > Bye,
> >               Maarten
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191106/e62b1619/attachment.html>

From barry.scott at forcepoint.com  Wed Nov  6 10:07:17 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Wed, 6 Nov 2019 17:07:17 +0000
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <CAJuJkHPX4eiqse5R+BK_uYMRAO=osJNQ2Hmqkm3AU9T1xiiBqQ@mail.gmail.com>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <3555526.FTIeEQcjyD@barry-scott-desktop>
 <CAJuJkHPX4eiqse5R+BK_uYMRAO=osJNQ2Hmqkm3AU9T1xiiBqQ@mail.gmail.com>
Message-ID: <21852660.zPVIgxvv2X@barry-scott-desktop>

On Wednesday, 6 November 2019 16:43:52 GMT Waqar Khan wrote:
> Hi Barry,
>         Thanks for the response. Where can I read more about (1). It seems
> like that is something I need to explore.
> As we already have (2) (cache for each process).
> Thanks again for your help.

We use the UDS (Unix domain sockets) to talk to a master process.
Twisted has support for this. But you need a small patch to avoid data lose.

UDS does not lose data and is message based, not bytes based. We
use pickle to encode requests and responses.

Barry

The patch is:

--- Twisted-18.4.0.orig/src/twisted/internet/unix.py.orig       2018-08-01 
12:45:38.711115425 +0100
+++ Twisted-18.4.0/src/twisted/internet/unix.py 2018-08-01 12:45:47.946115123 
+0100
@@ -509,11 +509,6 @@
                 return self.write(datagram, address)
             elif no == EMSGSIZE:
                 raise error.MessageLengthError("message too long")
-            elif no == EAGAIN:
-                # oh, well, drop the data. The only difference from UDP
-                # is that UDP won't ever notice.
-                # TODO: add TCP-like buffering
-                pass
             else:
                 raise

You then have to handle the EAGAIN error and do retries yourself.
As it stands the patch is not good enough to put into twisted as a
full fix would need to put the handling of the retries into twisted.

I guess (2) does not work for you as the cache hit rate is low
and you need to share the cache to get a benefit. Cache entries
only get used a few times?

In our case the hit rate is high (99%+) and we just pay the cost of
populating the caches on process start up, which ends up being
noise.

Barry

> 
> On Wed, Nov 6, 2019 at 8:39 AM Scott, Barry <barry.scott at forcepoint.com>
> 
> wrote:
> > On Wednesday, 6 November 2019 14:21:22 GMT Maarten ter Huurne wrote:
> > > On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> > > > Hi,
> > > > So, I am writing a twisted server. This server spawn multiple child
> > > > processes using reactor spawnProcess that initializes a process
> > > > protocol.
> > > > 
> > > > Now, each of the childprocess receives some REST requests. Each
> > > > process has a dict that acts as cache.
> > > > Now, I want to share dict across processes.
> > > > In general, python has SharedMemoryManager in multiprocessing module
> > > > which would have helped.
> > > > https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> > > > ultiprocessing.managers.SharedMemoryManager.SharedMemory But since I
> > > > am using twisted internal process implementation, how do I share this
> > > > dict across the processes so that all the processes use this common
> > > > cache?
> > > 
> > > Keeping a dictionary in SharedMemoryManager seems far from trivial. I
> > > don't think you can allocate arbitrary Python objects in the shared
> > > memory and even if you could, you would run into problems when one
> > > process mutates the dictionary while another is looking up something or
> > > also mutating it.
> > > 
> > > It could in theory work if you implement a custom lock-less dictionary,
> > > but that would be a lot of work and hard to get right. Also having
> > > shared memory mutations be synced between multiple CPU cores could
> > > degrade performance, since keeping core-local CPU caches in sync is
> > > expensive.
> > > 
> > > Would it be an option to have only one process accept the REST requests,
> > > check whether the result is in the cache and only distribute work to the
> > > other processes if you get a cache miss? Typically the case where an
> > > answer is cached is pretty fast, so perhaps you don't need multiple
> > > processes to handle incoming requests.
> > 
> > We have used a couple of ways to cache.
> > 1. Use a singleton process to hold the cache and ask it, via IPC, for
> > answers
> > from the other process.
> > 2. have a cache in each process
> > 
> > Barry
> > 
> > > Bye,
> > > 
> > >               Maarten
> > > 
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From wk80333 at gmail.com  Wed Nov  6 11:23:41 2019
From: wk80333 at gmail.com (Waqar Khan)
Date: Wed, 6 Nov 2019 10:23:41 -0800
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <21852660.zPVIgxvv2X@barry-scott-desktop>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <3555526.FTIeEQcjyD@barry-scott-desktop>
 <CAJuJkHPX4eiqse5R+BK_uYMRAO=osJNQ2Hmqkm3AU9T1xiiBqQ@mail.gmail.com>
 <21852660.zPVIgxvv2X@barry-scott-desktop>
Message-ID: <CAJuJkHP=2p0UT2nYeLAA0GcCEEfU7Jr9ydKO8siu8ke0OR+m_A@mail.gmail.com>

Thanks for the info.
Yeah, it seems that UDS is the way to go. (I need to read more about them).

Actually, is there a simple example you can give that can help me
understand this a bit better?
Thanks

On Wed, Nov 6, 2019 at 9:07 AM Scott, Barry <barry.scott at forcepoint.com>
wrote:

> On Wednesday, 6 November 2019 16:43:52 GMT Waqar Khan wrote:
> > Hi Barry,
> >         Thanks for the response. Where can I read more about (1). It
> seems
> > like that is something I need to explore.
> > As we already have (2) (cache for each process).
> > Thanks again for your help.
>
> We use the UDS (Unix domain sockets) to talk to a master process.
> Twisted has support for this. But you need a small patch to avoid data
> lose.
>
> UDS does not lose data and is message based, not bytes based. We
> use pickle to encode requests and responses.
>
> Barry
>
> The patch is:
>
> --- Twisted-18.4.0.orig/src/twisted/internet/unix.py.orig       2018-08-01
> 12:45:38.711115425 +0100
> +++ Twisted-18.4.0/src/twisted/internet/unix.py 2018-08-01
> 12:45:47.946115123
> +0100
> @@ -509,11 +509,6 @@
>                  return self.write(datagram, address)
>              elif no == EMSGSIZE:
>                  raise error.MessageLengthError("message too long")
> -            elif no == EAGAIN:
> -                # oh, well, drop the data. The only difference from UDP
> -                # is that UDP won't ever notice.
> -                # TODO: add TCP-like buffering
> -                pass
>              else:
>                  raise
>
> You then have to handle the EAGAIN error and do retries yourself.
> As it stands the patch is not good enough to put into twisted as a
> full fix would need to put the handling of the retries into twisted.
>
> I guess (2) does not work for you as the cache hit rate is low
> and you need to share the cache to get a benefit. Cache entries
> only get used a few times?
>
> In our case the hit rate is high (99%+) and we just pay the cost of
> populating the caches on process start up, which ends up being
> noise.
>
> Barry
>
> >
> > On Wed, Nov 6, 2019 at 8:39 AM Scott, Barry <barry.scott at forcepoint.com>
> >
> > wrote:
> > > On Wednesday, 6 November 2019 14:21:22 GMT Maarten ter Huurne wrote:
> > > > On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> > > > > Hi,
> > > > > So, I am writing a twisted server. This server spawn multiple child
> > > > > processes using reactor spawnProcess that initializes a process
> > > > > protocol.
> > > > >
> > > > > Now, each of the childprocess receives some REST requests. Each
> > > > > process has a dict that acts as cache.
> > > > > Now, I want to share dict across processes.
> > > > > In general, python has SharedMemoryManager in multiprocessing
> module
> > > > > which would have helped.
> > > > >
> https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> > > > > ultiprocessing.managers.SharedMemoryManager.SharedMemory But since
> I
> > > > > am using twisted internal process implementation, how do I share
> this
> > > > > dict across the processes so that all the processes use this common
> > > > > cache?
> > > >
> > > > Keeping a dictionary in SharedMemoryManager seems far from trivial. I
> > > > don't think you can allocate arbitrary Python objects in the shared
> > > > memory and even if you could, you would run into problems when one
> > > > process mutates the dictionary while another is looking up something
> or
> > > > also mutating it.
> > > >
> > > > It could in theory work if you implement a custom lock-less
> dictionary,
> > > > but that would be a lot of work and hard to get right. Also having
> > > > shared memory mutations be synced between multiple CPU cores could
> > > > degrade performance, since keeping core-local CPU caches in sync is
> > > > expensive.
> > > >
> > > > Would it be an option to have only one process accept the REST
> requests,
> > > > check whether the result is in the cache and only distribute work to
> the
> > > > other processes if you get a cache miss? Typically the case where an
> > > > answer is cached is pretty fast, so perhaps you don't need multiple
> > > > processes to handle incoming requests.
> > >
> > > We have used a couple of ways to cache.
> > > 1. Use a singleton process to hold the cache and ask it, via IPC, for
> > > answers
> > > from the other process.
> > > 2. have a cache in each process
> > >
> > > Barry
> > >
> > > > Bye,
> > > >
> > > >               Maarten
> > > >
> > > > _______________________________________________
> > > > Twisted-Python mailing list
> > > > Twisted-Python at twistedmatrix.com
> > > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191106/81c78aa6/attachment-0001.html>

From sean.dizazzo at gmail.com  Wed Nov  6 22:29:34 2019
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Wed, 6 Nov 2019 21:29:34 -0800
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <21852660.zPVIgxvv2X@barry-scott-desktop>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <3555526.FTIeEQcjyD@barry-scott-desktop>
 <CAJuJkHPX4eiqse5R+BK_uYMRAO=osJNQ2Hmqkm3AU9T1xiiBqQ@mail.gmail.com>
 <21852660.zPVIgxvv2X@barry-scott-desktop>
Message-ID: <CANzH6evFWU5i_97t-uHUcziwbh9WKvt06Sd30496OPjbUpfP4g@mail.gmail.com>

If you need guaranteed delivery of the data, why not just use a TCP
connection to the unix socket, instead of a UDP connection which inherently
can lose data?  In that case I don't think your patch would be needed.

I didn't look at the source, so perhaps I missed something.

On Wed, Nov 6, 2019 at 9:10 AM Scott, Barry <barry.scott at forcepoint.com>
wrote:

> On Wednesday, 6 November 2019 16:43:52 GMT Waqar Khan wrote:
> > Hi Barry,
> >         Thanks for the response. Where can I read more about (1). It
> seems
> > like that is something I need to explore.
> > As we already have (2) (cache for each process).
> > Thanks again for your help.
>
> We use the UDS (Unix domain sockets) to talk to a master process.
> Twisted has support for this. But you need a small patch to avoid data
> lose.
>
> UDS does not lose data and is message based, not bytes based. We
> use pickle to encode requests and responses.
>
> Barry
>
> The patch is:
>
> --- Twisted-18.4.0.orig/src/twisted/internet/unix.py.orig       2018-08-01
> 12:45:38.711115425 +0100
> +++ Twisted-18.4.0/src/twisted/internet/unix.py 2018-08-01
> 12:45:47.946115123
> +0100
> @@ -509,11 +509,6 @@
>                  return self.write(datagram, address)
>              elif no == EMSGSIZE:
>                  raise error.MessageLengthError("message too long")
> -            elif no == EAGAIN:
> -                # oh, well, drop the data. The only difference from UDP
> -                # is that UDP won't ever notice.
> -                # TODO: add TCP-like buffering
> -                pass
>              else:
>                  raise
>
> You then have to handle the EAGAIN error and do retries yourself.
> As it stands the patch is not good enough to put into twisted as a
> full fix would need to put the handling of the retries into twisted.
>
> I guess (2) does not work for you as the cache hit rate is low
> and you need to share the cache to get a benefit. Cache entries
> only get used a few times?
>
> In our case the hit rate is high (99%+) and we just pay the cost of
> populating the caches on process start up, which ends up being
> noise.
>
> Barry
>
> >
> > On Wed, Nov 6, 2019 at 8:39 AM Scott, Barry <barry.scott at forcepoint.com>
> >
> > wrote:
> > > On Wednesday, 6 November 2019 14:21:22 GMT Maarten ter Huurne wrote:
> > > > On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> > > > > Hi,
> > > > > So, I am writing a twisted server. This server spawn multiple child
> > > > > processes using reactor spawnProcess that initializes a process
> > > > > protocol.
> > > > >
> > > > > Now, each of the childprocess receives some REST requests. Each
> > > > > process has a dict that acts as cache.
> > > > > Now, I want to share dict across processes.
> > > > > In general, python has SharedMemoryManager in multiprocessing
> module
> > > > > which would have helped.
> > > > >
> https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> > > > > ultiprocessing.managers.SharedMemoryManager.SharedMemory But since
> I
> > > > > am using twisted internal process implementation, how do I share
> this
> > > > > dict across the processes so that all the processes use this common
> > > > > cache?
> > > >
> > > > Keeping a dictionary in SharedMemoryManager seems far from trivial. I
> > > > don't think you can allocate arbitrary Python objects in the shared
> > > > memory and even if you could, you would run into problems when one
> > > > process mutates the dictionary while another is looking up something
> or
> > > > also mutating it.
> > > >
> > > > It could in theory work if you implement a custom lock-less
> dictionary,
> > > > but that would be a lot of work and hard to get right. Also having
> > > > shared memory mutations be synced between multiple CPU cores could
> > > > degrade performance, since keeping core-local CPU caches in sync is
> > > > expensive.
> > > >
> > > > Would it be an option to have only one process accept the REST
> requests,
> > > > check whether the result is in the cache and only distribute work to
> the
> > > > other processes if you get a cache miss? Typically the case where an
> > > > answer is cached is pretty fast, so perhaps you don't need multiple
> > > > processes to handle incoming requests.
> > >
> > > We have used a couple of ways to cache.
> > > 1. Use a singleton process to hold the cache and ask it, via IPC, for
> > > answers
> > > from the other process.
> > > 2. have a cache in each process
> > >
> > > Barry
> > >
> > > > Bye,
> > > >
> > > >               Maarten
> > > >
> > > > _______________________________________________
> > > > Twisted-Python mailing list
> > > > Twisted-Python at twistedmatrix.com
> > > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191106/87e010b1/attachment.html>

From barry.scott at forcepoint.com  Thu Nov  7 03:07:41 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Thu, 7 Nov 2019 10:07:41 +0000
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <CANzH6evFWU5i_97t-uHUcziwbh9WKvt06Sd30496OPjbUpfP4g@mail.gmail.com>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <21852660.zPVIgxvv2X@barry-scott-desktop>
 <CANzH6evFWU5i_97t-uHUcziwbh9WKvt06Sd30496OPjbUpfP4g@mail.gmail.com>
Message-ID: <14845371.vpdnqxk0Ec@barry-scott-desktop>

On Thursday, 7 November 2019 05:29:34 GMT Sean DiZazzo wrote:
> If you need guaranteed delivery of the data, why not just use a TCP
> connection to the unix socket, instead of a UDP connection which inherently
> can lose data?  In that case I don't think your patch would be needed.
> 
> I didn't look at the source, so perhaps I missed something.

UDS is not UDP. 

> > We use the UDS (Unix domain sockets) to talk to a master process.
> > Twisted has support for this. But you need a small patch to avoid data
> > lose.
> > 
> > UDS does not lose data and is message based, not bytes based. We
> > use pickle to encode requests and responses.

Barry




From barry.scott at forcepoint.com  Thu Nov  7 03:23:40 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Thu, 7 Nov 2019 10:23:40 +0000
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <CAJuJkHP=2p0UT2nYeLAA0GcCEEfU7Jr9ydKO8siu8ke0OR+m_A@mail.gmail.com>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <21852660.zPVIgxvv2X@barry-scott-desktop>
 <CAJuJkHP=2p0UT2nYeLAA0GcCEEfU7Jr9ydKO8siu8ke0OR+m_A@mail.gmail.com>
Message-ID: <2226529.i1QUMbPA9Q@barry-scott-desktop>

On Wednesday, 6 November 2019 18:23:41 GMT Waqar Khan wrote:
> Thanks for the info.
> Yeah, it seems that UDS is the way to go. (I need to read more about them).
> 
> Actually, is there a simple example you can give that can help me
> understand this a bit better?
> Thanks

The code I have I cannot share sorry.
The twisted docs should get you going.

But as I said without that patch you will lose messages under load.
You have to handle the EAGAIN and retry the send.

We have a send queue that we drain on a timer if the send fails.
The failure is caused by the receiving end not process messages fast enough.

Barry



> 
> On Wed, Nov 6, 2019 at 9:07 AM Scott, Barry <barry.scott at forcepoint.com>
> 
> wrote:
> > On Wednesday, 6 November 2019 16:43:52 GMT Waqar Khan wrote:
> > > Hi Barry,
> > > 
> > >         Thanks for the response. Where can I read more about (1). It
> > 
> > seems
> > 
> > > like that is something I need to explore.
> > > As we already have (2) (cache for each process).
> > > Thanks again for your help.
> > 
> > We use the UDS (Unix domain sockets) to talk to a master process.
> > Twisted has support for this. But you need a small patch to avoid data
> > lose.
> > 
> > UDS does not lose data and is message based, not bytes based. We
> > use pickle to encode requests and responses.
> > 
> > Barry
> > 
> > The patch is:
> > 
> > --- Twisted-18.4.0.orig/src/twisted/internet/unix.py.orig       2018-08-01
> > 12:45:38.711115425 +0100
> > +++ Twisted-18.4.0/src/twisted/internet/unix.py 2018-08-01
> > 12:45:47.946115123
> > +0100
> > @@ -509,11 +509,6 @@
> > 
> >                  return self.write(datagram, address)
> >              
> >              elif no == EMSGSIZE:
> >                  raise error.MessageLengthError("message too long")
> > 
> > -            elif no == EAGAIN:
> > -                # oh, well, drop the data. The only difference from UDP
> > -                # is that UDP won't ever notice.
> > -                # TODO: add TCP-like buffering
> > -                pass
> > 
> >              else:
> >                  raise
> > 
> > You then have to handle the EAGAIN error and do retries yourself.
> > As it stands the patch is not good enough to put into twisted as a
> > full fix would need to put the handling of the retries into twisted.
> > 
> > I guess (2) does not work for you as the cache hit rate is low
> > and you need to share the cache to get a benefit. Cache entries
> > only get used a few times?
> > 
> > In our case the hit rate is high (99%+) and we just pay the cost of
> > populating the caches on process start up, which ends up being
> > noise.
> > 
> > Barry
> > 
> > > On Wed, Nov 6, 2019 at 8:39 AM Scott, Barry <barry.scott at forcepoint.com>
> > > 
> > > wrote:
> > > > On Wednesday, 6 November 2019 14:21:22 GMT Maarten ter Huurne wrote:
> > > > > On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> > > > > > Hi,
> > > > > > So, I am writing a twisted server. This server spawn multiple
> > > > > > child
> > > > > > processes using reactor spawnProcess that initializes a process
> > > > > > protocol.
> > > > > > 
> > > > > > Now, each of the childprocess receives some REST requests. Each
> > > > > > process has a dict that acts as cache.
> > > > > > Now, I want to share dict across processes.
> > > > > > In general, python has SharedMemoryManager in multiprocessing
> > 
> > module
> > 
> > > > > > which would have helped.
> > 
> > https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> > 
> > > > > > ultiprocessing.managers.SharedMemoryManager.SharedMemory But since
> > 
> > I
> > 
> > > > > > am using twisted internal process implementation, how do I share
> > 
> > this
> > 
> > > > > > dict across the processes so that all the processes use this
> > > > > > common
> > > > > > cache?
> > > > > 
> > > > > Keeping a dictionary in SharedMemoryManager seems far from trivial.
> > > > > I
> > > > > don't think you can allocate arbitrary Python objects in the shared
> > > > > memory and even if you could, you would run into problems when one
> > > > > process mutates the dictionary while another is looking up something
> > 
> > or
> > 
> > > > > also mutating it.
> > > > > 
> > > > > It could in theory work if you implement a custom lock-less
> > 
> > dictionary,
> > 
> > > > > but that would be a lot of work and hard to get right. Also having
> > > > > shared memory mutations be synced between multiple CPU cores could
> > > > > degrade performance, since keeping core-local CPU caches in sync is
> > > > > expensive.
> > > > > 
> > > > > Would it be an option to have only one process accept the REST
> > 
> > requests,
> > 
> > > > > check whether the result is in the cache and only distribute work to
> > 
> > the
> > 
> > > > > other processes if you get a cache miss? Typically the case where an
> > > > > answer is cached is pretty fast, so perhaps you don't need multiple
> > > > > processes to handle incoming requests.
> > > > 
> > > > We have used a couple of ways to cache.
> > > > 1. Use a singleton process to hold the cache and ask it, via IPC, for
> > > > answers
> > > > from the other process.
> > > > 2. have a cache in each process
> > > > 
> > > > Barry
> > > > 
> > > > > Bye,
> > > > > 
> > > > >               Maarten
> > > > > 
> > > > > _______________________________________________
> > > > > Twisted-Python mailing list
> > > > > Twisted-Python at twistedmatrix.com
> > > > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > > > 
> > > > _______________________________________________
> > > > Twisted-Python mailing list
> > > > Twisted-Python at twistedmatrix.com
> > > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From glyph at twistedmatrix.com  Thu Nov  7 16:39:40 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 7 Nov 2019 15:39:40 -0800
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <14845371.vpdnqxk0Ec@barry-scott-desktop>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <21852660.zPVIgxvv2X@barry-scott-desktop>
 <CANzH6evFWU5i_97t-uHUcziwbh9WKvt06Sd30496OPjbUpfP4g@mail.gmail.com>
 <14845371.vpdnqxk0Ec@barry-scott-desktop>
Message-ID: <05760FC9-F27D-40F1-93C8-671536130B72@twistedmatrix.com>



> On Nov 7, 2019, at 2:07 AM, Scott, Barry <barry.scott at forcepoint.com> wrote:
> 
> On Thursday, 7 November 2019 05:29:34 GMT Sean DiZazzo wrote:
>> If you need guaranteed delivery of the data, why not just use a TCP
>> connection to the unix socket, instead of a UDP connection which inherently
>> can lose data?  In that case I don't think your patch would be needed.
>> 
>> I didn't look at the source, so perhaps I missed something.
> 
> UDS is not UDP. 

Specifically, a UNIX datagram socket is a datagram-based IPC mechanism but unlike UDP it is not unreliable.  You can still get EAGAIN or EMSGSIZE because buffers fill up and datagrams are too big, but if you put a datagram in, it comes out again.  Barry's (embarrassingly long-standing) bug in Twisted's handling of UDS failures is here: https://twistedmatrix.com/trac/ticket/9504 <https://twistedmatrix.com/trac/ticket/9504> .

You can't make "a TCP connection" to a UNIX-domain socket; TCP is a thing you do over networks and the UNIX address family is for local inter-process communication on a single host.

>>> We use the UDS (Unix domain sockets) to talk to a master process.
>>> Twisted has support for this. But you need a small patch to avoid data
>>> lose.
>>> 
>>> UDS does not lose data and is message based, not bytes based. We
>>> use pickle to encode requests and responses.
> 
> Barry
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191107/efce3f05/attachment.html>

From trac at twistedmatrix.com  Sun Nov 10 00:05:29 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 Nov 2019 07:05:29 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1573369529.12.1797015586084575465@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191110/53cc8035/attachment.html>

From hawkowl at atleastfornow.net  Sun Nov 10 21:29:24 2019
From: hawkowl at atleastfornow.net (Amber Brown (hawkowl))
Date: Mon, 11 Nov 2019 15:29:24 +1100
Subject: [Twisted-Python] Twisted 19.10.0 Release Announcement
Message-ID: <aa89ca5f-5047-358c-e31a-5b7ff988383f@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the 
release of Twisted 19.10! The highlights of this release are:

- Security fixes for HTTP/2 -- CVE-2019-9512 (Ping Flood), CVE-2019-9514 
(Reset Flood), and CVE-2019-9515 (Settings Flood).  Thanks to Jonathan 
Looney and Piotr Sikora.
- HTTP/2 fixes regarding timeouts.
- trial's assertResultOf, failureResultOf, and successResultOf, now 
accept Deferred-awaiting coroutines.
- Various other bug fixes for POP3, conch.ssh.keys, and 
twisted.web.client.FileBodyProducer.

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or 
alternatively <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS 
file is also available at 
<https://github.com/twisted/twisted/blob/twisted-19.10.0/NEWS.rst>.

Many thanks to everyone who had a part in this release - the supporters 
of the Twisted Software Foundation, the developers who contributed code 
as well as documentation, and all the people building great things with 
Twisted!

- hawkowl


From glyph at twistedmatrix.com  Tue Nov 12 00:12:36 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 11 Nov 2019 23:12:36 -0800
Subject: [Twisted-Python] operational visibility
Message-ID: <9A3E15D4-C9CE-4784-AB4F-F15DCD1C7754@twistedmatrix.com>

At twistedmatrix.com <http://twistedmatrix.com/>, we dogfood a bunch of Twisted software: our DNS server (primary and secondary!), our web server, even a little bit of email stuff here and there.  And we have our own structured logging system to make it, ahem, "easy" to put logs into some kind of a system that can tell you what Twisted is doing.

But uh… we don't get a lot of value from this because the tracebacks just go into disk files that nobody ever looks at.

Does anyone know if, say, Sentry supports a free tier for open source projects, or something like that?  Or any other error-tracking provider even vaguely compatible with Twisted might do something like that?  It would be nice to surface and fix tracebacks that affect our own infrastructure before they hit our users.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191111/de5858a7/attachment.html>

From patrick at cloke.us  Tue Nov 12 06:47:28 2019
From: patrick at cloke.us (Patrick Cloke)
Date: Tue, 12 Nov 2019 08:47:28 -0500
Subject: [Twisted-Python] operational visibility
In-Reply-To: <9A3E15D4-C9CE-4784-AB4F-F15DCD1C7754@twistedmatrix.com>
References: <9A3E15D4-C9CE-4784-AB4F-F15DCD1C7754@twistedmatrix.com>
Message-ID: <eabde787-0a2c-1c87-09ea-d22cda45edf5@cloke.us>

On 11/12/19 2:12 AM, Glyph wrote:

> At twistedmatrix.com <http://twistedmatrix.com>, we dogfood a bunch of 
> Twisted software: our DNS server (primary and secondary!), our web 
> server, even a little bit of email stuff here and there.  And we have 
> our own structured logging system to make it, ahem, "easy" to put logs 
> into some kind of a system that can tell you what Twisted is doing.
>
> But uh… we don't get a lot of value from this because the tracebacks 
> just go into disk files that nobody ever looks at.
>
> Does anyone know if, say, Sentry supports a free tier for open source 
> projects, or something like that?  Or any other error-tracking 
> provider even vaguely compatible with Twisted might do something like 
> that?  It would be nice to surface and fix tracebacks that affect our 
> own infrastructure before they hit our users.
>
> -g
>
Hi Glyph,

Sentry has a free "developer" tier which I'm sure you already found [1]. 
It supports up to 5k events per month, the downside for using it for 
twistedmatrix.com might be that it only supports 1 team member. I don't 
recall hearing if they do any free plans for OSS, but from talking to a 
few of their early employees a while ago I wouldn't be surprised. It 
could be worth integrating just to see if it gives you the sort of 
information you're looking for? Another option would be to self-host the 
Sentry OSS version, but I'm assuming the team wouldn't want to take on 
more ops stuff.

In terms of integration, note that the (new) Sentry Python library 
doesn't support using Twisted as a transport [2] (meaning you'd block 
the reactor to report the issue), although their old one does [3]. 
Integrating Sentry+Twisted for the actual error reporting works fairly 
well via the logging system and I've been doing it for a while with 
success (>5 years). Although we sometimes get duplicate errors for an 
exception and unhandled errors in deferreds... it'd be great if the 
integration was a bit more plug and play.

Not sure if any of that was useful, but the short version is that I've 
been super impressed with the Sentry integration, especially in 
multi-language environments.

--Patrick

[1] https://sentry.io/pricing/
[2] https://github.com/getsentry/sentry-python/issues/266
[3] 
https://github.com/getsentry/raven-python/blob/master/raven/transport/twisted.py

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191112/c53aab5f/attachment.html>

From glyph at twistedmatrix.com  Tue Nov 12 09:52:40 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 12 Nov 2019 08:52:40 -0800
Subject: [Twisted-Python] operational visibility
In-Reply-To: <eabde787-0a2c-1c87-09ea-d22cda45edf5@cloke.us>
References: <eabde787-0a2c-1c87-09ea-d22cda45edf5@cloke.us>
Message-ID: <etPan.5dcae440.327b23c6.591@fastmail.com>



On November 12, 2019 at 5:47:28 AM, Patrick Cloke (patrick at cloke.us(mailto:patrick at cloke.us)) wrote:

>  
> On 11/12/19 2:12 AM, Glyph wrote:
>  
>  
> > At twistedmatrix.com(http://twistedmatrix.com), we dogfood a bunch of Twisted software: our DNS server (primary and secondary!), our web server, even a little bit of email stuff here and there. And we have our own structured logging system to make it, ahem, "easy" to put logs into some kind of a system that can tell you what Twisted is doing.  
> >  
> > But uh… we don't get a lot of value from this because the tracebacks just go into disk files that nobody ever looks at.  
> >  
> > Does anyone know if, say, Sentry supports a free tier for open source projects, or something like that? Or any other error-tracking provider even vaguely compatible with Twisted might do something like that? It would be nice to surface and fix tracebacks that affect our own infrastructure before they hit our users.
> >  
> > -g  
>  
> Hi Glyph,
>  
>  
> Sentry has a free "developer" tier which I'm sure you already found [1]. It supports up to 5k events per month, the downside for using it for twistedmatrix.com might be that it only supports 1 team member. I don't recall hearing if they do any free plans for OSS, but from talking to a few of their early employees a while ago I wouldn't be surprised. It could be worth integrating just to see if it gives you the sort of information you're looking for? Another option would be to self-host the Sentry OSS version, but I'm assuming the team wouldn't want to take on more ops stuff.
>  
>  
>  
> In terms of integration, note that the (new) Sentry Python library doesn't support using Twisted as a transport [2] (meaning you'd block the reactor to report the issue), although their old one does [3]. Integrating Sentry+Twisted for the actual error reporting works fairly well via the logging system and I've been doing it for a while with success (>5 years). Although we sometimes get duplicate errors for an exception and unhandled errors in deferreds... it'd be great if the integration was a bit more plug and play.
>  
>  
> Not sure if any of that was useful, but the short version is that I've been super impressed with the Sentry integration, especially in multi-language environments.
>  
>  
>  
> --Patrick
>  
>  
>  
>  


Thanks for the summary, Patrick. I also use Sentry at work (albeit via a set of custom integrations that wouldn’t make sense for the way twistedmatrix.com is deployed) and I did know about the developer plan, but I wouldn’t want to do a bunch of work just to sidestep their rules about accounts by sharing a credential or something and then get shut off for it :). So I was hoping for something a little more official.

>  
> [1] https://sentry.io/pricing/
> [2] https://github.com/getsentry/sentry-python/issues/266
> [3] https://github.com/getsentry/raven-python/blob/master/raven/transport/twisted.py
>  
>  
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191112/eda0cdd6/attachment.html>

From trac at twistedmatrix.com  Sun Nov 17 00:10:48 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 Nov 2019 07:10:48 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1573974648.91.3362269593341367002@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191117/c313a0d2/attachment.html>

From csadhana27 at gmail.com  Fri Nov 22 10:54:22 2019
From: csadhana27 at gmail.com (csadhana27)
Date: Fri, 22 Nov 2019 08:54:22 -0900
Subject: [Twisted-Python] Fw: (5)
Message-ID: <C63A591E-57A9-408F-B9CA-5FC21255FCDC@gmail.com>

____  ___  ____  _ __

https://bit.ly/2Xwril5








18 367 185524

j 758bym 9p1 6ehe 8 xkrc9cu ic xvb8cm mdtoy7s

zezhjx3 gr496 jaof 9fc 8v9q 8m2 84o4z jha


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191122/af663f8a/attachment.html>

From trac at twistedmatrix.com  Sun Nov  3 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 Nov 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1572761118.72.359165403888961510@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191103/3ebe1ce5/attachment-0002.html>

From wk80333 at gmail.com  Tue Nov  5 23:19:56 2019
From: wk80333 at gmail.com (Waqar Khan)
Date: Tue, 5 Nov 2019 22:19:56 -0800
Subject: [Twisted-Python] sharing a dict between child processes
Message-ID: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>

Hi,
So, I am writing a twisted server. This server spawn multiple child
processes using reactor spawnProcess that initializes a process protocol.

Now, each of the childprocess receives some REST requests. Each process has
a dict that acts as cache.
Now, I want to share dict across processes.
In general, python has SharedMemoryManager in multiprocessing module which
would have helped.
https://docs.python.org/3/library/multiprocessing.shared_memory.html#multiprocessing.managers.SharedMemoryManager.SharedMemory
But since I am using twisted internal process implementation, how do I
share this dict across the processes so that all the processes use this
common cache?
Thanks
Waqar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191105/675d7405/attachment-0002.html>

From maarten at treewalker.org  Wed Nov  6 07:21:22 2019
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Wed, 06 Nov 2019 15:21:22 +0100
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
Message-ID: <1999449.iMQn4rLfX3@hyperion>

On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> Hi,
> So, I am writing a twisted server. This server spawn multiple child
> processes using reactor spawnProcess that initializes a process
> protocol.
> 
> Now, each of the childprocess receives some REST requests. Each
> process has a dict that acts as cache.
> Now, I want to share dict across processes.
> In general, python has SharedMemoryManager in multiprocessing module
> which would have helped.
> https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> ultiprocessing.managers.SharedMemoryManager.SharedMemory But since I
> am using twisted internal process implementation, how do I share this
> dict across the processes so that all the processes use this common
> cache?

Keeping a dictionary in SharedMemoryManager seems far from trivial. I 
don't think you can allocate arbitrary Python objects in the shared 
memory and even if you could, you would run into problems when one 
process mutates the dictionary while another is looking up something or 
also mutating it.

It could in theory work if you implement a custom lock-less dictionary, 
but that would be a lot of work and hard to get right. Also having 
shared memory mutations be synced between multiple CPU cores could 
degrade performance, since keeping core-local CPU caches in sync is 
expensive.

Would it be an option to have only one process accept the REST requests, 
check whether the result is in the cache and only distribute work to the 
other processes if you get a cache miss? Typically the case where an 
answer is cached is pretty fast, so perhaps you don't need multiple 
processes to handle incoming requests.

Bye,
		Maarten





From wk80333 at gmail.com  Wed Nov  6 09:35:27 2019
From: wk80333 at gmail.com (Waqar Khan)
Date: Wed, 6 Nov 2019 08:35:27 -0800
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <1999449.iMQn4rLfX3@hyperion>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <1999449.iMQn4rLfX3@hyperion>
Message-ID: <CAJuJkHPzCQ_sGJKYPTC4S7sFK7-rY_p891h-hiPkJ38NLK8k0g@mail.gmail.com>

Hi Marteen,
  Thanks for the response.
When you say "when one process mutates the dictionary while another is
looking up something or also mutating it."  Do you mean that a key/value
pair is getting modified or is it that a dict, in general, is getting
modified.
The first one is not really a concern as the key to value mapping is
unique(so all the processes will require the same value for same key). So
read/write  to dict doesnt really have to be "threadsafe" or anything like
that.
But, dict getting modified and made available across rest of the processes
will be common.

The thing is, the major cost of our task is I/O. So, when a request comes
in we fetch some data and then cache it. Now, each processes has their own
cache and that is very inefficient. One idea is to share the cache across
processes.
Does that make sense?
Thanks for the help.



On Wed, Nov 6, 2019 at 6:22 AM Maarten ter Huurne <maarten at treewalker.org>
wrote:

> On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> > Hi,
> > So, I am writing a twisted server. This server spawn multiple child
> > processes using reactor spawnProcess that initializes a process
> > protocol.
> >
> > Now, each of the childprocess receives some REST requests. Each
> > process has a dict that acts as cache.
> > Now, I want to share dict across processes.
> > In general, python has SharedMemoryManager in multiprocessing module
> > which would have helped.
> > https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> > ultiprocessing.managers.SharedMemoryManager.SharedMemory But since I
> > am using twisted internal process implementation, how do I share this
> > dict across the processes so that all the processes use this common
> > cache?
>
> Keeping a dictionary in SharedMemoryManager seems far from trivial. I
> don't think you can allocate arbitrary Python objects in the shared
> memory and even if you could, you would run into problems when one
> process mutates the dictionary while another is looking up something or
> also mutating it.
>
> It could in theory work if you implement a custom lock-less dictionary,
> but that would be a lot of work and hard to get right. Also having
> shared memory mutations be synced between multiple CPU cores could
> degrade performance, since keeping core-local CPU caches in sync is
> expensive.
>
> Would it be an option to have only one process accept the REST requests,
> check whether the result is in the cache and only distribute work to the
> other processes if you get a cache miss? Typically the case where an
> answer is cached is pretty fast, so perhaps you don't need multiple
> processes to handle incoming requests.
>
> Bye,
>                 Maarten
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191106/434483aa/attachment-0002.html>

From barry.scott at forcepoint.com  Wed Nov  6 09:38:10 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Wed, 6 Nov 2019 16:38:10 +0000
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <1999449.iMQn4rLfX3@hyperion>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <1999449.iMQn4rLfX3@hyperion>
Message-ID: <3555526.FTIeEQcjyD@barry-scott-desktop>

On Wednesday, 6 November 2019 14:21:22 GMT Maarten ter Huurne wrote:
> On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> > Hi,
> > So, I am writing a twisted server. This server spawn multiple child
> > processes using reactor spawnProcess that initializes a process
> > protocol.
> > 
> > Now, each of the childprocess receives some REST requests. Each
> > process has a dict that acts as cache.
> > Now, I want to share dict across processes.
> > In general, python has SharedMemoryManager in multiprocessing module
> > which would have helped.
> > https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> > ultiprocessing.managers.SharedMemoryManager.SharedMemory But since I
> > am using twisted internal process implementation, how do I share this
> > dict across the processes so that all the processes use this common
> > cache?
> 
> Keeping a dictionary in SharedMemoryManager seems far from trivial. I
> don't think you can allocate arbitrary Python objects in the shared
> memory and even if you could, you would run into problems when one
> process mutates the dictionary while another is looking up something or
> also mutating it.
> 
> It could in theory work if you implement a custom lock-less dictionary,
> but that would be a lot of work and hard to get right. Also having
> shared memory mutations be synced between multiple CPU cores could
> degrade performance, since keeping core-local CPU caches in sync is
> expensive.
> 
> Would it be an option to have only one process accept the REST requests,
> check whether the result is in the cache and only distribute work to the
> other processes if you get a cache miss? Typically the case where an
> answer is cached is pretty fast, so perhaps you don't need multiple
> processes to handle incoming requests.

We have used a couple of ways to cache.
1. Use a singleton process to hold the cache and ask it, via IPC, for answers 
from the other process.
2. have a cache in each process

Barry


> 
> Bye,
> 		Maarten
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From wk80333 at gmail.com  Wed Nov  6 09:43:52 2019
From: wk80333 at gmail.com (Waqar Khan)
Date: Wed, 6 Nov 2019 08:43:52 -0800
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <3555526.FTIeEQcjyD@barry-scott-desktop>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <1999449.iMQn4rLfX3@hyperion> <3555526.FTIeEQcjyD@barry-scott-desktop>
Message-ID: <CAJuJkHPX4eiqse5R+BK_uYMRAO=osJNQ2Hmqkm3AU9T1xiiBqQ@mail.gmail.com>

Hi Barry,
        Thanks for the response. Where can I read more about (1). It seems
like that is something I need to explore.
As we already have (2) (cache for each process).
Thanks again for your help.

On Wed, Nov 6, 2019 at 8:39 AM Scott, Barry <barry.scott at forcepoint.com>
wrote:

> On Wednesday, 6 November 2019 14:21:22 GMT Maarten ter Huurne wrote:
> > On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> > > Hi,
> > > So, I am writing a twisted server. This server spawn multiple child
> > > processes using reactor spawnProcess that initializes a process
> > > protocol.
> > >
> > > Now, each of the childprocess receives some REST requests. Each
> > > process has a dict that acts as cache.
> > > Now, I want to share dict across processes.
> > > In general, python has SharedMemoryManager in multiprocessing module
> > > which would have helped.
> > > https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> > > ultiprocessing.managers.SharedMemoryManager.SharedMemory But since I
> > > am using twisted internal process implementation, how do I share this
> > > dict across the processes so that all the processes use this common
> > > cache?
> >
> > Keeping a dictionary in SharedMemoryManager seems far from trivial. I
> > don't think you can allocate arbitrary Python objects in the shared
> > memory and even if you could, you would run into problems when one
> > process mutates the dictionary while another is looking up something or
> > also mutating it.
> >
> > It could in theory work if you implement a custom lock-less dictionary,
> > but that would be a lot of work and hard to get right. Also having
> > shared memory mutations be synced between multiple CPU cores could
> > degrade performance, since keeping core-local CPU caches in sync is
> > expensive.
> >
> > Would it be an option to have only one process accept the REST requests,
> > check whether the result is in the cache and only distribute work to the
> > other processes if you get a cache miss? Typically the case where an
> > answer is cached is pretty fast, so perhaps you don't need multiple
> > processes to handle incoming requests.
>
> We have used a couple of ways to cache.
> 1. Use a singleton process to hold the cache and ask it, via IPC, for
> answers
> from the other process.
> 2. have a cache in each process
>
> Barry
>
>
> >
> > Bye,
> >               Maarten
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191106/e62b1619/attachment-0002.html>

From barry.scott at forcepoint.com  Wed Nov  6 10:07:17 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Wed, 6 Nov 2019 17:07:17 +0000
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <CAJuJkHPX4eiqse5R+BK_uYMRAO=osJNQ2Hmqkm3AU9T1xiiBqQ@mail.gmail.com>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <3555526.FTIeEQcjyD@barry-scott-desktop>
 <CAJuJkHPX4eiqse5R+BK_uYMRAO=osJNQ2Hmqkm3AU9T1xiiBqQ@mail.gmail.com>
Message-ID: <21852660.zPVIgxvv2X@barry-scott-desktop>

On Wednesday, 6 November 2019 16:43:52 GMT Waqar Khan wrote:
> Hi Barry,
>         Thanks for the response. Where can I read more about (1). It seems
> like that is something I need to explore.
> As we already have (2) (cache for each process).
> Thanks again for your help.

We use the UDS (Unix domain sockets) to talk to a master process.
Twisted has support for this. But you need a small patch to avoid data lose.

UDS does not lose data and is message based, not bytes based. We
use pickle to encode requests and responses.

Barry

The patch is:

--- Twisted-18.4.0.orig/src/twisted/internet/unix.py.orig       2018-08-01 
12:45:38.711115425 +0100
+++ Twisted-18.4.0/src/twisted/internet/unix.py 2018-08-01 12:45:47.946115123 
+0100
@@ -509,11 +509,6 @@
                 return self.write(datagram, address)
             elif no == EMSGSIZE:
                 raise error.MessageLengthError("message too long")
-            elif no == EAGAIN:
-                # oh, well, drop the data. The only difference from UDP
-                # is that UDP won't ever notice.
-                # TODO: add TCP-like buffering
-                pass
             else:
                 raise

You then have to handle the EAGAIN error and do retries yourself.
As it stands the patch is not good enough to put into twisted as a
full fix would need to put the handling of the retries into twisted.

I guess (2) does not work for you as the cache hit rate is low
and you need to share the cache to get a benefit. Cache entries
only get used a few times?

In our case the hit rate is high (99%+) and we just pay the cost of
populating the caches on process start up, which ends up being
noise.

Barry

> 
> On Wed, Nov 6, 2019 at 8:39 AM Scott, Barry <barry.scott at forcepoint.com>
> 
> wrote:
> > On Wednesday, 6 November 2019 14:21:22 GMT Maarten ter Huurne wrote:
> > > On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> > > > Hi,
> > > > So, I am writing a twisted server. This server spawn multiple child
> > > > processes using reactor spawnProcess that initializes a process
> > > > protocol.
> > > > 
> > > > Now, each of the childprocess receives some REST requests. Each
> > > > process has a dict that acts as cache.
> > > > Now, I want to share dict across processes.
> > > > In general, python has SharedMemoryManager in multiprocessing module
> > > > which would have helped.
> > > > https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> > > > ultiprocessing.managers.SharedMemoryManager.SharedMemory But since I
> > > > am using twisted internal process implementation, how do I share this
> > > > dict across the processes so that all the processes use this common
> > > > cache?
> > > 
> > > Keeping a dictionary in SharedMemoryManager seems far from trivial. I
> > > don't think you can allocate arbitrary Python objects in the shared
> > > memory and even if you could, you would run into problems when one
> > > process mutates the dictionary while another is looking up something or
> > > also mutating it.
> > > 
> > > It could in theory work if you implement a custom lock-less dictionary,
> > > but that would be a lot of work and hard to get right. Also having
> > > shared memory mutations be synced between multiple CPU cores could
> > > degrade performance, since keeping core-local CPU caches in sync is
> > > expensive.
> > > 
> > > Would it be an option to have only one process accept the REST requests,
> > > check whether the result is in the cache and only distribute work to the
> > > other processes if you get a cache miss? Typically the case where an
> > > answer is cached is pretty fast, so perhaps you don't need multiple
> > > processes to handle incoming requests.
> > 
> > We have used a couple of ways to cache.
> > 1. Use a singleton process to hold the cache and ask it, via IPC, for
> > answers
> > from the other process.
> > 2. have a cache in each process
> > 
> > Barry
> > 
> > > Bye,
> > > 
> > >               Maarten
> > > 
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From wk80333 at gmail.com  Wed Nov  6 11:23:41 2019
From: wk80333 at gmail.com (Waqar Khan)
Date: Wed, 6 Nov 2019 10:23:41 -0800
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <21852660.zPVIgxvv2X@barry-scott-desktop>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <3555526.FTIeEQcjyD@barry-scott-desktop>
 <CAJuJkHPX4eiqse5R+BK_uYMRAO=osJNQ2Hmqkm3AU9T1xiiBqQ@mail.gmail.com>
 <21852660.zPVIgxvv2X@barry-scott-desktop>
Message-ID: <CAJuJkHP=2p0UT2nYeLAA0GcCEEfU7Jr9ydKO8siu8ke0OR+m_A@mail.gmail.com>

Thanks for the info.
Yeah, it seems that UDS is the way to go. (I need to read more about them).

Actually, is there a simple example you can give that can help me
understand this a bit better?
Thanks

On Wed, Nov 6, 2019 at 9:07 AM Scott, Barry <barry.scott at forcepoint.com>
wrote:

> On Wednesday, 6 November 2019 16:43:52 GMT Waqar Khan wrote:
> > Hi Barry,
> >         Thanks for the response. Where can I read more about (1). It
> seems
> > like that is something I need to explore.
> > As we already have (2) (cache for each process).
> > Thanks again for your help.
>
> We use the UDS (Unix domain sockets) to talk to a master process.
> Twisted has support for this. But you need a small patch to avoid data
> lose.
>
> UDS does not lose data and is message based, not bytes based. We
> use pickle to encode requests and responses.
>
> Barry
>
> The patch is:
>
> --- Twisted-18.4.0.orig/src/twisted/internet/unix.py.orig       2018-08-01
> 12:45:38.711115425 +0100
> +++ Twisted-18.4.0/src/twisted/internet/unix.py 2018-08-01
> 12:45:47.946115123
> +0100
> @@ -509,11 +509,6 @@
>                  return self.write(datagram, address)
>              elif no == EMSGSIZE:
>                  raise error.MessageLengthError("message too long")
> -            elif no == EAGAIN:
> -                # oh, well, drop the data. The only difference from UDP
> -                # is that UDP won't ever notice.
> -                # TODO: add TCP-like buffering
> -                pass
>              else:
>                  raise
>
> You then have to handle the EAGAIN error and do retries yourself.
> As it stands the patch is not good enough to put into twisted as a
> full fix would need to put the handling of the retries into twisted.
>
> I guess (2) does not work for you as the cache hit rate is low
> and you need to share the cache to get a benefit. Cache entries
> only get used a few times?
>
> In our case the hit rate is high (99%+) and we just pay the cost of
> populating the caches on process start up, which ends up being
> noise.
>
> Barry
>
> >
> > On Wed, Nov 6, 2019 at 8:39 AM Scott, Barry <barry.scott at forcepoint.com>
> >
> > wrote:
> > > On Wednesday, 6 November 2019 14:21:22 GMT Maarten ter Huurne wrote:
> > > > On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> > > > > Hi,
> > > > > So, I am writing a twisted server. This server spawn multiple child
> > > > > processes using reactor spawnProcess that initializes a process
> > > > > protocol.
> > > > >
> > > > > Now, each of the childprocess receives some REST requests. Each
> > > > > process has a dict that acts as cache.
> > > > > Now, I want to share dict across processes.
> > > > > In general, python has SharedMemoryManager in multiprocessing
> module
> > > > > which would have helped.
> > > > >
> https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> > > > > ultiprocessing.managers.SharedMemoryManager.SharedMemory But since
> I
> > > > > am using twisted internal process implementation, how do I share
> this
> > > > > dict across the processes so that all the processes use this common
> > > > > cache?
> > > >
> > > > Keeping a dictionary in SharedMemoryManager seems far from trivial. I
> > > > don't think you can allocate arbitrary Python objects in the shared
> > > > memory and even if you could, you would run into problems when one
> > > > process mutates the dictionary while another is looking up something
> or
> > > > also mutating it.
> > > >
> > > > It could in theory work if you implement a custom lock-less
> dictionary,
> > > > but that would be a lot of work and hard to get right. Also having
> > > > shared memory mutations be synced between multiple CPU cores could
> > > > degrade performance, since keeping core-local CPU caches in sync is
> > > > expensive.
> > > >
> > > > Would it be an option to have only one process accept the REST
> requests,
> > > > check whether the result is in the cache and only distribute work to
> the
> > > > other processes if you get a cache miss? Typically the case where an
> > > > answer is cached is pretty fast, so perhaps you don't need multiple
> > > > processes to handle incoming requests.
> > >
> > > We have used a couple of ways to cache.
> > > 1. Use a singleton process to hold the cache and ask it, via IPC, for
> > > answers
> > > from the other process.
> > > 2. have a cache in each process
> > >
> > > Barry
> > >
> > > > Bye,
> > > >
> > > >               Maarten
> > > >
> > > > _______________________________________________
> > > > Twisted-Python mailing list
> > > > Twisted-Python at twistedmatrix.com
> > > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191106/81c78aa6/attachment-0002.html>

From sean.dizazzo at gmail.com  Wed Nov  6 22:29:34 2019
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Wed, 6 Nov 2019 21:29:34 -0800
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <21852660.zPVIgxvv2X@barry-scott-desktop>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <3555526.FTIeEQcjyD@barry-scott-desktop>
 <CAJuJkHPX4eiqse5R+BK_uYMRAO=osJNQ2Hmqkm3AU9T1xiiBqQ@mail.gmail.com>
 <21852660.zPVIgxvv2X@barry-scott-desktop>
Message-ID: <CANzH6evFWU5i_97t-uHUcziwbh9WKvt06Sd30496OPjbUpfP4g@mail.gmail.com>

If you need guaranteed delivery of the data, why not just use a TCP
connection to the unix socket, instead of a UDP connection which inherently
can lose data?  In that case I don't think your patch would be needed.

I didn't look at the source, so perhaps I missed something.

On Wed, Nov 6, 2019 at 9:10 AM Scott, Barry <barry.scott at forcepoint.com>
wrote:

> On Wednesday, 6 November 2019 16:43:52 GMT Waqar Khan wrote:
> > Hi Barry,
> >         Thanks for the response. Where can I read more about (1). It
> seems
> > like that is something I need to explore.
> > As we already have (2) (cache for each process).
> > Thanks again for your help.
>
> We use the UDS (Unix domain sockets) to talk to a master process.
> Twisted has support for this. But you need a small patch to avoid data
> lose.
>
> UDS does not lose data and is message based, not bytes based. We
> use pickle to encode requests and responses.
>
> Barry
>
> The patch is:
>
> --- Twisted-18.4.0.orig/src/twisted/internet/unix.py.orig       2018-08-01
> 12:45:38.711115425 +0100
> +++ Twisted-18.4.0/src/twisted/internet/unix.py 2018-08-01
> 12:45:47.946115123
> +0100
> @@ -509,11 +509,6 @@
>                  return self.write(datagram, address)
>              elif no == EMSGSIZE:
>                  raise error.MessageLengthError("message too long")
> -            elif no == EAGAIN:
> -                # oh, well, drop the data. The only difference from UDP
> -                # is that UDP won't ever notice.
> -                # TODO: add TCP-like buffering
> -                pass
>              else:
>                  raise
>
> You then have to handle the EAGAIN error and do retries yourself.
> As it stands the patch is not good enough to put into twisted as a
> full fix would need to put the handling of the retries into twisted.
>
> I guess (2) does not work for you as the cache hit rate is low
> and you need to share the cache to get a benefit. Cache entries
> only get used a few times?
>
> In our case the hit rate is high (99%+) and we just pay the cost of
> populating the caches on process start up, which ends up being
> noise.
>
> Barry
>
> >
> > On Wed, Nov 6, 2019 at 8:39 AM Scott, Barry <barry.scott at forcepoint.com>
> >
> > wrote:
> > > On Wednesday, 6 November 2019 14:21:22 GMT Maarten ter Huurne wrote:
> > > > On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> > > > > Hi,
> > > > > So, I am writing a twisted server. This server spawn multiple child
> > > > > processes using reactor spawnProcess that initializes a process
> > > > > protocol.
> > > > >
> > > > > Now, each of the childprocess receives some REST requests. Each
> > > > > process has a dict that acts as cache.
> > > > > Now, I want to share dict across processes.
> > > > > In general, python has SharedMemoryManager in multiprocessing
> module
> > > > > which would have helped.
> > > > >
> https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> > > > > ultiprocessing.managers.SharedMemoryManager.SharedMemory But since
> I
> > > > > am using twisted internal process implementation, how do I share
> this
> > > > > dict across the processes so that all the processes use this common
> > > > > cache?
> > > >
> > > > Keeping a dictionary in SharedMemoryManager seems far from trivial. I
> > > > don't think you can allocate arbitrary Python objects in the shared
> > > > memory and even if you could, you would run into problems when one
> > > > process mutates the dictionary while another is looking up something
> or
> > > > also mutating it.
> > > >
> > > > It could in theory work if you implement a custom lock-less
> dictionary,
> > > > but that would be a lot of work and hard to get right. Also having
> > > > shared memory mutations be synced between multiple CPU cores could
> > > > degrade performance, since keeping core-local CPU caches in sync is
> > > > expensive.
> > > >
> > > > Would it be an option to have only one process accept the REST
> requests,
> > > > check whether the result is in the cache and only distribute work to
> the
> > > > other processes if you get a cache miss? Typically the case where an
> > > > answer is cached is pretty fast, so perhaps you don't need multiple
> > > > processes to handle incoming requests.
> > >
> > > We have used a couple of ways to cache.
> > > 1. Use a singleton process to hold the cache and ask it, via IPC, for
> > > answers
> > > from the other process.
> > > 2. have a cache in each process
> > >
> > > Barry
> > >
> > > > Bye,
> > > >
> > > >               Maarten
> > > >
> > > > _______________________________________________
> > > > Twisted-Python mailing list
> > > > Twisted-Python at twistedmatrix.com
> > > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191106/87e010b1/attachment-0002.html>

From barry.scott at forcepoint.com  Thu Nov  7 03:07:41 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Thu, 7 Nov 2019 10:07:41 +0000
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <CANzH6evFWU5i_97t-uHUcziwbh9WKvt06Sd30496OPjbUpfP4g@mail.gmail.com>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <21852660.zPVIgxvv2X@barry-scott-desktop>
 <CANzH6evFWU5i_97t-uHUcziwbh9WKvt06Sd30496OPjbUpfP4g@mail.gmail.com>
Message-ID: <14845371.vpdnqxk0Ec@barry-scott-desktop>

On Thursday, 7 November 2019 05:29:34 GMT Sean DiZazzo wrote:
> If you need guaranteed delivery of the data, why not just use a TCP
> connection to the unix socket, instead of a UDP connection which inherently
> can lose data?  In that case I don't think your patch would be needed.
> 
> I didn't look at the source, so perhaps I missed something.

UDS is not UDP. 

> > We use the UDS (Unix domain sockets) to talk to a master process.
> > Twisted has support for this. But you need a small patch to avoid data
> > lose.
> > 
> > UDS does not lose data and is message based, not bytes based. We
> > use pickle to encode requests and responses.

Barry





From barry.scott at forcepoint.com  Thu Nov  7 03:23:40 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Thu, 7 Nov 2019 10:23:40 +0000
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <CAJuJkHP=2p0UT2nYeLAA0GcCEEfU7Jr9ydKO8siu8ke0OR+m_A@mail.gmail.com>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <21852660.zPVIgxvv2X@barry-scott-desktop>
 <CAJuJkHP=2p0UT2nYeLAA0GcCEEfU7Jr9ydKO8siu8ke0OR+m_A@mail.gmail.com>
Message-ID: <2226529.i1QUMbPA9Q@barry-scott-desktop>

On Wednesday, 6 November 2019 18:23:41 GMT Waqar Khan wrote:
> Thanks for the info.
> Yeah, it seems that UDS is the way to go. (I need to read more about them).
> 
> Actually, is there a simple example you can give that can help me
> understand this a bit better?
> Thanks

The code I have I cannot share sorry.
The twisted docs should get you going.

But as I said without that patch you will lose messages under load.
You have to handle the EAGAIN and retry the send.

We have a send queue that we drain on a timer if the send fails.
The failure is caused by the receiving end not process messages fast enough.

Barry



> 
> On Wed, Nov 6, 2019 at 9:07 AM Scott, Barry <barry.scott at forcepoint.com>
> 
> wrote:
> > On Wednesday, 6 November 2019 16:43:52 GMT Waqar Khan wrote:
> > > Hi Barry,
> > > 
> > >         Thanks for the response. Where can I read more about (1). It
> > 
> > seems
> > 
> > > like that is something I need to explore.
> > > As we already have (2) (cache for each process).
> > > Thanks again for your help.
> > 
> > We use the UDS (Unix domain sockets) to talk to a master process.
> > Twisted has support for this. But you need a small patch to avoid data
> > lose.
> > 
> > UDS does not lose data and is message based, not bytes based. We
> > use pickle to encode requests and responses.
> > 
> > Barry
> > 
> > The patch is:
> > 
> > --- Twisted-18.4.0.orig/src/twisted/internet/unix.py.orig       2018-08-01
> > 12:45:38.711115425 +0100
> > +++ Twisted-18.4.0/src/twisted/internet/unix.py 2018-08-01
> > 12:45:47.946115123
> > +0100
> > @@ -509,11 +509,6 @@
> > 
> >                  return self.write(datagram, address)
> >              
> >              elif no == EMSGSIZE:
> >                  raise error.MessageLengthError("message too long")
> > 
> > -            elif no == EAGAIN:
> > -                # oh, well, drop the data. The only difference from UDP
> > -                # is that UDP won't ever notice.
> > -                # TODO: add TCP-like buffering
> > -                pass
> > 
> >              else:
> >                  raise
> > 
> > You then have to handle the EAGAIN error and do retries yourself.
> > As it stands the patch is not good enough to put into twisted as a
> > full fix would need to put the handling of the retries into twisted.
> > 
> > I guess (2) does not work for you as the cache hit rate is low
> > and you need to share the cache to get a benefit. Cache entries
> > only get used a few times?
> > 
> > In our case the hit rate is high (99%+) and we just pay the cost of
> > populating the caches on process start up, which ends up being
> > noise.
> > 
> > Barry
> > 
> > > On Wed, Nov 6, 2019 at 8:39 AM Scott, Barry <barry.scott at forcepoint.com>
> > > 
> > > wrote:
> > > > On Wednesday, 6 November 2019 14:21:22 GMT Maarten ter Huurne wrote:
> > > > > On Wednesday, 6 November 2019 07:19:56 CET Waqar Khan wrote:
> > > > > > Hi,
> > > > > > So, I am writing a twisted server. This server spawn multiple
> > > > > > child
> > > > > > processes using reactor spawnProcess that initializes a process
> > > > > > protocol.
> > > > > > 
> > > > > > Now, each of the childprocess receives some REST requests. Each
> > > > > > process has a dict that acts as cache.
> > > > > > Now, I want to share dict across processes.
> > > > > > In general, python has SharedMemoryManager in multiprocessing
> > 
> > module
> > 
> > > > > > which would have helped.
> > 
> > https://docs.python.org/3/library/multiprocessing.shared_memory.html#m
> > 
> > > > > > ultiprocessing.managers.SharedMemoryManager.SharedMemory But since
> > 
> > I
> > 
> > > > > > am using twisted internal process implementation, how do I share
> > 
> > this
> > 
> > > > > > dict across the processes so that all the processes use this
> > > > > > common
> > > > > > cache?
> > > > > 
> > > > > Keeping a dictionary in SharedMemoryManager seems far from trivial.
> > > > > I
> > > > > don't think you can allocate arbitrary Python objects in the shared
> > > > > memory and even if you could, you would run into problems when one
> > > > > process mutates the dictionary while another is looking up something
> > 
> > or
> > 
> > > > > also mutating it.
> > > > > 
> > > > > It could in theory work if you implement a custom lock-less
> > 
> > dictionary,
> > 
> > > > > but that would be a lot of work and hard to get right. Also having
> > > > > shared memory mutations be synced between multiple CPU cores could
> > > > > degrade performance, since keeping core-local CPU caches in sync is
> > > > > expensive.
> > > > > 
> > > > > Would it be an option to have only one process accept the REST
> > 
> > requests,
> > 
> > > > > check whether the result is in the cache and only distribute work to
> > 
> > the
> > 
> > > > > other processes if you get a cache miss? Typically the case where an
> > > > > answer is cached is pretty fast, so perhaps you don't need multiple
> > > > > processes to handle incoming requests.
> > > > 
> > > > We have used a couple of ways to cache.
> > > > 1. Use a singleton process to hold the cache and ask it, via IPC, for
> > > > answers
> > > > from the other process.
> > > > 2. have a cache in each process
> > > > 
> > > > Barry
> > > > 
> > > > > Bye,
> > > > > 
> > > > >               Maarten
> > > > > 
> > > > > _______________________________________________
> > > > > Twisted-Python mailing list
> > > > > Twisted-Python at twistedmatrix.com
> > > > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > > > 
> > > > _______________________________________________
> > > > Twisted-Python mailing list
> > > > Twisted-Python at twistedmatrix.com
> > > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From glyph at twistedmatrix.com  Thu Nov  7 16:39:40 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 7 Nov 2019 15:39:40 -0800
Subject: [Twisted-Python] sharing a dict between child processes
In-Reply-To: <14845371.vpdnqxk0Ec@barry-scott-desktop>
References: <CAJuJkHPSr-4E2p3XK9Ebf=sVN0zAXrFX6vdLwex6knPJojXVKw@mail.gmail.com>
 <21852660.zPVIgxvv2X@barry-scott-desktop>
 <CANzH6evFWU5i_97t-uHUcziwbh9WKvt06Sd30496OPjbUpfP4g@mail.gmail.com>
 <14845371.vpdnqxk0Ec@barry-scott-desktop>
Message-ID: <05760FC9-F27D-40F1-93C8-671536130B72@twistedmatrix.com>



> On Nov 7, 2019, at 2:07 AM, Scott, Barry <barry.scott at forcepoint.com> wrote:
> 
> On Thursday, 7 November 2019 05:29:34 GMT Sean DiZazzo wrote:
>> If you need guaranteed delivery of the data, why not just use a TCP
>> connection to the unix socket, instead of a UDP connection which inherently
>> can lose data?  In that case I don't think your patch would be needed.
>> 
>> I didn't look at the source, so perhaps I missed something.
> 
> UDS is not UDP. 

Specifically, a UNIX datagram socket is a datagram-based IPC mechanism but unlike UDP it is not unreliable.  You can still get EAGAIN or EMSGSIZE because buffers fill up and datagrams are too big, but if you put a datagram in, it comes out again.  Barry's (embarrassingly long-standing) bug in Twisted's handling of UDS failures is here: https://twistedmatrix.com/trac/ticket/9504 <https://twistedmatrix.com/trac/ticket/9504> .

You can't make "a TCP connection" to a UNIX-domain socket; TCP is a thing you do over networks and the UNIX address family is for local inter-process communication on a single host.

>>> We use the UDS (Unix domain sockets) to talk to a master process.
>>> Twisted has support for this. But you need a small patch to avoid data
>>> lose.
>>> 
>>> UDS does not lose data and is message based, not bytes based. We
>>> use pickle to encode requests and responses.
> 
> Barry
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191107/efce3f05/attachment-0002.html>

From trac at twistedmatrix.com  Sun Nov 10 00:05:29 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 Nov 2019 07:05:29 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1573369529.12.1797015586084575465@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191110/53cc8035/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun Nov 10 21:29:24 2019
From: hawkowl at atleastfornow.net (Amber Brown (hawkowl))
Date: Mon, 11 Nov 2019 15:29:24 +1100
Subject: [Twisted-Python] Twisted 19.10.0 Release Announcement
Message-ID: <aa89ca5f-5047-358c-e31a-5b7ff988383f@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the 
release of Twisted 19.10! The highlights of this release are:

- Security fixes for HTTP/2 -- CVE-2019-9512 (Ping Flood), CVE-2019-9514 
(Reset Flood), and CVE-2019-9515 (Settings Flood).  Thanks to Jonathan 
Looney and Piotr Sikora.
- HTTP/2 fixes regarding timeouts.
- trial's assertResultOf, failureResultOf, and successResultOf, now 
accept Deferred-awaiting coroutines.
- Various other bug fixes for POP3, conch.ssh.keys, and 
twisted.web.client.FileBodyProducer.

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or 
alternatively <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS 
file is also available at 
<https://github.com/twisted/twisted/blob/twisted-19.10.0/NEWS.rst>.

Many thanks to everyone who had a part in this release - the supporters 
of the Twisted Software Foundation, the developers who contributed code 
as well as documentation, and all the people building great things with 
Twisted!

- hawkowl



From glyph at twistedmatrix.com  Tue Nov 12 00:12:36 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 11 Nov 2019 23:12:36 -0800
Subject: [Twisted-Python] operational visibility
Message-ID: <9A3E15D4-C9CE-4784-AB4F-F15DCD1C7754@twistedmatrix.com>

At twistedmatrix.com <http://twistedmatrix.com/>, we dogfood a bunch of Twisted software: our DNS server (primary and secondary!), our web server, even a little bit of email stuff here and there.  And we have our own structured logging system to make it, ahem, "easy" to put logs into some kind of a system that can tell you what Twisted is doing.

But uh… we don't get a lot of value from this because the tracebacks just go into disk files that nobody ever looks at.

Does anyone know if, say, Sentry supports a free tier for open source projects, or something like that?  Or any other error-tracking provider even vaguely compatible with Twisted might do something like that?  It would be nice to surface and fix tracebacks that affect our own infrastructure before they hit our users.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191111/de5858a7/attachment-0002.html>

From patrick at cloke.us  Tue Nov 12 06:47:28 2019
From: patrick at cloke.us (Patrick Cloke)
Date: Tue, 12 Nov 2019 08:47:28 -0500
Subject: [Twisted-Python] operational visibility
In-Reply-To: <9A3E15D4-C9CE-4784-AB4F-F15DCD1C7754@twistedmatrix.com>
References: <9A3E15D4-C9CE-4784-AB4F-F15DCD1C7754@twistedmatrix.com>
Message-ID: <eabde787-0a2c-1c87-09ea-d22cda45edf5@cloke.us>

On 11/12/19 2:12 AM, Glyph wrote:

> At twistedmatrix.com <http://twistedmatrix.com>, we dogfood a bunch of 
> Twisted software: our DNS server (primary and secondary!), our web 
> server, even a little bit of email stuff here and there.  And we have 
> our own structured logging system to make it, ahem, "easy" to put logs 
> into some kind of a system that can tell you what Twisted is doing.
>
> But uh… we don't get a lot of value from this because the tracebacks 
> just go into disk files that nobody ever looks at.
>
> Does anyone know if, say, Sentry supports a free tier for open source 
> projects, or something like that?  Or any other error-tracking 
> provider even vaguely compatible with Twisted might do something like 
> that?  It would be nice to surface and fix tracebacks that affect our 
> own infrastructure before they hit our users.
>
> -g
>
Hi Glyph,

Sentry has a free "developer" tier which I'm sure you already found [1]. 
It supports up to 5k events per month, the downside for using it for 
twistedmatrix.com might be that it only supports 1 team member. I don't 
recall hearing if they do any free plans for OSS, but from talking to a 
few of their early employees a while ago I wouldn't be surprised. It 
could be worth integrating just to see if it gives you the sort of 
information you're looking for? Another option would be to self-host the 
Sentry OSS version, but I'm assuming the team wouldn't want to take on 
more ops stuff.

In terms of integration, note that the (new) Sentry Python library 
doesn't support using Twisted as a transport [2] (meaning you'd block 
the reactor to report the issue), although their old one does [3]. 
Integrating Sentry+Twisted for the actual error reporting works fairly 
well via the logging system and I've been doing it for a while with 
success (>5 years). Although we sometimes get duplicate errors for an 
exception and unhandled errors in deferreds... it'd be great if the 
integration was a bit more plug and play.

Not sure if any of that was useful, but the short version is that I've 
been super impressed with the Sentry integration, especially in 
multi-language environments.

--Patrick

[1] https://sentry.io/pricing/
[2] https://github.com/getsentry/sentry-python/issues/266
[3] 
https://github.com/getsentry/raven-python/blob/master/raven/transport/twisted.py

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191112/c53aab5f/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Nov 12 09:52:40 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 12 Nov 2019 08:52:40 -0800
Subject: [Twisted-Python] operational visibility
In-Reply-To: <eabde787-0a2c-1c87-09ea-d22cda45edf5@cloke.us>
References: <eabde787-0a2c-1c87-09ea-d22cda45edf5@cloke.us>
Message-ID: <etPan.5dcae440.327b23c6.591@fastmail.com>



On November 12, 2019 at 5:47:28 AM, Patrick Cloke (patrick at cloke.us(mailto:patrick at cloke.us)) wrote:

>  
> On 11/12/19 2:12 AM, Glyph wrote:
>  
>  
> > At twistedmatrix.com(http://twistedmatrix.com), we dogfood a bunch of Twisted software: our DNS server (primary and secondary!), our web server, even a little bit of email stuff here and there. And we have our own structured logging system to make it, ahem, "easy" to put logs into some kind of a system that can tell you what Twisted is doing.  
> >  
> > But uh… we don't get a lot of value from this because the tracebacks just go into disk files that nobody ever looks at.  
> >  
> > Does anyone know if, say, Sentry supports a free tier for open source projects, or something like that? Or any other error-tracking provider even vaguely compatible with Twisted might do something like that? It would be nice to surface and fix tracebacks that affect our own infrastructure before they hit our users.
> >  
> > -g  
>  
> Hi Glyph,
>  
>  
> Sentry has a free "developer" tier which I'm sure you already found [1]. It supports up to 5k events per month, the downside for using it for twistedmatrix.com might be that it only supports 1 team member. I don't recall hearing if they do any free plans for OSS, but from talking to a few of their early employees a while ago I wouldn't be surprised. It could be worth integrating just to see if it gives you the sort of information you're looking for? Another option would be to self-host the Sentry OSS version, but I'm assuming the team wouldn't want to take on more ops stuff.
>  
>  
>  
> In terms of integration, note that the (new) Sentry Python library doesn't support using Twisted as a transport [2] (meaning you'd block the reactor to report the issue), although their old one does [3]. Integrating Sentry+Twisted for the actual error reporting works fairly well via the logging system and I've been doing it for a while with success (>5 years). Although we sometimes get duplicate errors for an exception and unhandled errors in deferreds... it'd be great if the integration was a bit more plug and play.
>  
>  
> Not sure if any of that was useful, but the short version is that I've been super impressed with the Sentry integration, especially in multi-language environments.
>  
>  
>  
> --Patrick
>  
>  
>  
>  


Thanks for the summary, Patrick. I also use Sentry at work (albeit via a set of custom integrations that wouldn’t make sense for the way twistedmatrix.com is deployed) and I did know about the developer plan, but I wouldn’t want to do a bunch of work just to sidestep their rules about accounts by sharing a credential or something and then get shut off for it :). So I was hoping for something a little more official.

>  
> [1] https://sentry.io/pricing/
> [2] https://github.com/getsentry/sentry-python/issues/266
> [3] https://github.com/getsentry/raven-python/blob/master/raven/transport/twisted.py
>  
>  
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191112/eda0cdd6/attachment-0002.html>

From trac at twistedmatrix.com  Sun Nov 17 00:10:48 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 Nov 2019 07:10:48 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1573974648.91.3362269593341367002@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191117/c313a0d2/attachment-0002.html>

From csadhana27 at gmail.com  Fri Nov 22 10:54:22 2019
From: csadhana27 at gmail.com (csadhana27)
Date: Fri, 22 Nov 2019 08:54:22 -0900
Subject: [spam elided]
Message-ID: <C63A591E-57A9-408F-B9CA-5FC21255FCDC@gmail.com>

This message was spam and it has been elided.


From glyph at twistedmatrix.com  Sat Nov 23 22:45:00 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Nov 2019 21:45:00 -0800
Subject: [Twisted-Python] spam
In-Reply-To: <C63A591E-57A9-408F-B9CA-5FC21255FCDC@gmail.com>
References: <C63A591E-57A9-408F-B9CA-5FC21255FCDC@gmail.com>
Message-ID: <815E01C9-50C8-4A8D-BCF8-99ADE949902D@twistedmatrix.com>

Apologies for the spam.  The message has been elided from the archive and the sender has been permanently banned.

-g


From trac at twistedmatrix.com  Sun Nov 24 00:05:29 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 Nov 2019 07:05:29 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1574579129.74.8951077021243946386@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20191124/aab05fa4/attachment.html>

