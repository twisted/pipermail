From maris at chown.lv  Tue Dec  1 10:07:39 2009
From: maris at chown.lv (Maris Ruskulis)
Date: Tue, 01 Dec 2009 17:07:39 +0200
Subject: [Twisted-Python] is there way to baypass value limit of 64kb
 in	twisted.protocols.amp [SOLVED]
In-Reply-To: <B878DEA1-EC54-4D00-ADE2-129216EEA48F@twistedmatrix.com>
References: <44752311-036A-4D43-B56C-0494753D86BF@chown.lv>
	<B878DEA1-EC54-4D00-ADE2-129216EEA48F@twistedmatrix.com>
Message-ID: <4B15313B.7040204@chown.lv>

Glyph Lefkowitz wrote:
> On Nov 30, 2009, at 2:10 PM, M?risR wrote:
>
>   
>> I'm currently trying to figure out, how to bypass amp value limit of 64kb. First tought was to split string into chunks <64kb, then join before processing. Problem is, how to dinamicaly generate amp.Command argument list. Maybe there is other well known method how to achieve this?
>>     
>
>
> You can define your own Argument which reads multiple values, rather than dynamically generating the arguments list.  This is what you want anyway, because your application code wants to receive one value; the fact that you are splitting/joining at the protocol level should not be important.
>
> There's an example of this implemented here:
>
> http://bazaar.launchpad.net/%7Eglyph/%2Bjunk/amphacks/annotate/head%3A/python/amphacks/mediumbox.py
>
> The reason that this isn't currently included in the core AMP implementation is that if you need to transfer values larger than this limit, perhaps you should be doing the transfer in some other way. Streaming the result?  Doing the transfer out-of-band as (for example) an HTTP request?
>
> I think this might be an unhelpful way to ask people to consider this problem, so we may end up packaging something similar in Twisted eventually.  One way to do this might be by doing this: <http://twistedmatrix.com/trac/ticket/2529>, another might be bundling the contents of mediumbox.py (or something like it) into amp.py.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   
mediumbox done the trick with little patching to support utf8, Big 
thanks, for advises :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091201/100e1adc/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: maris.vcf
Type: text/x-vcard
Size: 216 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20091201/100e1adc/attachment.vcf 

From radix at twistedmatrix.com  Wed Dec  2 15:21:25 2009
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 2 Dec 2009 15:21:25 -0500
Subject: [Twisted-Python] ANN: Twisted 9.0.0
Message-ID: <60ed19d40912021221u3096f047g3e6e86f43b4a0d2b@mail.gmail.com>

= Twisted 9.0.0 =

I'm happy to announce Twisted 9, the first (and last) release of
Twisted in 2009. The previous release was Twisted 8.2 in December of
2008. Given that, a lot has changed!

This release supports Python 2.3 through Python 2.6, though it is the
last one that will support Python 2.3. The next release will support
only Python 2.4 and above. Twisted: the framework of the future!

You can download the new release at our web site,

    http://twistedmatrix.com/

There were around 285 tickets resolved in this release. The full list
of changes is available here:

    http://twistedmatrix.com/trac/browser/tags/releases/twisted-9.0.0/NEWS?format=raw

It's quite a huge list of changes spanning almost all of the Twisted
projects, so here are some of the more exciting changes:

In the core:
- The Windows IOCP reactor now supports SSL.
- The memcache protocol implementation got some nice new features.

In Twisted Web:
- There's a new HTTP client API and protocol implementation, starting
at twisted.web.client.Agent. It's still pretty low-level, but much
more flexible than the old API.
- There were many improvements to the WSGI support.

In Twisted Conch:
- PyASN1 is now used to parse SSH keys (which means you now need to
install it to use Conch).
- SFTP servers (especially on Windows) now behave a lot better.

In Twisted Mail:
- The IMAP server and client protocol implementations had many fixes.
For example, SASL PLAIN credentials now work.

In Twisted Words:
- XMPP clients now support the ANONYMOUS SASL authentication type.
- The IRC protocol implementations had many fixes.

And a lot more.


= What is Twisted? =


From kevin.horn at gmail.com  Wed Dec  2 18:03:39 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 2 Dec 2009 17:03:39 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <20091130223947.GA5898@murdoc.net>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<20091130223947.GA5898@murdoc.net>
Message-ID: <562bcc10912021503x6117940fv388df0d37401f133@mail.gmail.com>

On Mon, Nov 30, 2009 at 4:39 PM, Marco Giusti <marco.giusti at gmail.com>wrote:

> On Mon, Nov 30, 2009 at 03:05:30PM -0600, Kevin Horn wrote:
> > [...]
> > Thanks for "listening"!
>
> some notices about what i get[1]. mainly i'd like if you could make the
> documentation more readable when the browser's window is not really big.
> usually i do not use the browser with the window maximized so will be
> really helpful if you can check the following points:
>
> * in the navigation bar "twisted web documentation" is repeated twice
> and is breaked in two lines.
>
> * the table of contents steals a lot of vertical space while it is
> visible only at the top of the page. in this circumstances i prefer "the
> lore way", ie. showing the table of contents in the normal content flow
> at the top and not in a side column.
>
> * again the left blue column steal vertical space an maybe can be
> reduced.
>
> * would be great if the layout will fit in the page width: as you can
> see the index link is half hidden.
>
> obiviusly with a bigger window all the aboves are not more valid and all
> looks pretty.
>
> ciao
> m.
>
>
> [1] http://img44.imageshack.us/img44/1953/sphinx.png
>
>
Marco,

Thanks for the feedback.  I really haven't worked at all on
formatting/theming the docs as of yet (what you see is just a theme included
with Sphinx), but I will certainly keep your comments in mind when I get to
that point.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091202/cb0a2061/attachment.htm 

From kevin.horn at gmail.com  Wed Dec  2 18:04:47 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 2 Dec 2009 17:04:47 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
Message-ID: <562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>

On Mon, Nov 30, 2009 at 3:05 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> The previous thread was getting a little long, so I thought I'd start a new
> one...
>
> I haven't made as much headway on this as I would have liked, but I'm just
> going to blame the US Thanksgiving holiday and hope no one looks too closely
> at the dates of the previous emails. ;)
>
> Here's what I've done lately:
>
> - The proposal [1] has been updated, with a number of minor spelling
> formatting fixes, and a detailed timeline for each phase of the project.
> Please give feedback if you see anything missing from the timelines,
> anything you think should be done in a different order, or any other
> unaddressed issues.
>
> - I've done a small amount of work on the lore2sphinx tool, and the new
> output of the conversion process is now online [2].  Not a lot changes, the
> only obviosu thing is that <img> tags are now handled.  The rest has been
> mostly refactoring and generally making the code easier to work with.
>
> - I also did a bit of digging around in the Divmod SVN repository, and it
> looks like Nevow, Mantissa, and Epsilon are the only projects that have Lore
> source docs.  Can anyone out there verify that this is correct?  Did I miss
> anything?
>
> I'll try to send out a progress report like this every week or so in order
> to avoid people thinking that I've lost interest or gotten hit by a bus.
>
> Thanks for "listening"!
>
> Kevin Horn
>
>
>
> [1] http://twistedsphinx.funsize.net/proposal.html
> [2] http://twistedsphinx.funsize.net/index.html
>


Any of the core Twisted devs care to sound of regarding the proposed
timelines?

Silence implies consent.  Or in this case approval... :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091202/bab0b133/attachment.htm 

From exarkun at twistedmatrix.com  Wed Dec  2 21:30:15 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 03 Dec 2009 02:30:15 -0000
Subject: [Twisted-Python] ANN: Twisted 9.0.0
In-Reply-To: <hf7056$1fh$2@ger.gmane.org>
References: <60ed19d40912021221u3096f047g3e6e86f43b4a0d2b@mail.gmail.com>
	<hf7056$1fh$2@ger.gmane.org>
Message-ID: <20091203023015.2549.1864307365.divmod.xquotient.85@localhost.localdomain>

On 12:18 am, tjreedy at udel.edu wrote:
>Christopher Armstrong wrote:
>>= Twisted 9.0.0 =
>>
>>I'm happy to announce Twisted 9, the first (and last) release of
>>Twisted in 2009. The previous release was Twisted 8.2 in December of
>>2008. Given that, a lot has changed!
>>
>>This release supports Python 2.3 through Python 2.6, though it is the
>>last one that will support Python 2.3. The next release will support
>>only Python 2.4 and above. Twisted: the framework of the future!
>
>Not unless it supports 3.1+. Is that in the cards (tickets)?

Somewhat.

A description of the plan on stackoverflow: http://bit.ly/6hWqYU

A message with some ticket links from a thread on the twisted-python 
mailing list: http://bit.ly/8csFSa

Jean-Paul


From exarkun at twistedmatrix.com  Wed Dec  2 21:38:59 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 03 Dec 2009 02:38:59 -0000
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
Message-ID: <20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>

On 2 Dec, 11:04 pm, kevin.horn at gmail.com wrote:
>>
>>[1] http://twistedsphinx.funsize.net/proposal.html
>>[2] http://twistedsphinx.funsize.net/index.html
>
>
>Any of the core Twisted devs care to sound of regarding the proposed
>timelines?
>
>Silence implies consent.  Or in this case approval... :)

Timeline might not be the right word, since as far as I can tell there's 
little that's actually about time there. :)  Let me know if I overlooked 
something.

As far as the (I'm going to call it) roadmap goes, the thought that's 
pushed its way to the fore for me is that I'd like to try this with 
something smaller and simpler than Twisted first.  It would be nice if 
the Divmod projects would qualify here, but they may not be active 
enough for any real experience to accumulate.

pyOpenSSL might work.  It uses the original CPython tex documentation 
system, so the conversion would (presumably) be done with whatever tools 
were used for CPython's own documentation, not the new Lore->Sphinx 
converter.  It would still be a useful way to get more familiar with 
Sphinx, though.  The downside is that I'm pretty much the only Twisted 
developer who works on pyOpenSSL, so it wouldn't help anyone else get 
any experience.

Jean-Paul


From tim at commsecure.com.au  Wed Dec  2 21:57:27 2009
From: tim at commsecure.com.au (Tim Allen)
Date: Thu, 3 Dec 2009 13:57:27 +1100
Subject: [Twisted-Python] ANN: Twisted 9.0.0
In-Reply-To: <20091203023015.2549.1864307365.divmod.xquotient.85@localhost.localdomain>
References: <60ed19d40912021221u3096f047g3e6e86f43b4a0d2b@mail.gmail.com>
	<hf7056$1fh$2@ger.gmane.org>
	<20091203023015.2549.1864307365.divmod.xquotient.85@localhost.localdomain>
Message-ID: <20091203135727.7ba71817@ws35.commsecure.com.au>

exarkun at twistedmatrix.com wrote:
> A message with some ticket links from a thread on the twisted-python 
> mailing list: http://bit.ly/8csFSa

Some of those tickets seem out of date; a better plan would be to query
for tickets with the "py3k" keyword:

    http://twistedmatrix.com/trac/search?q=py3k&noquickjump=1&ticket=on

I believe #2484 is the master ticket:

    http://twistedmatrix.com/trac/ticket/2484
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20091203/4faee60c/attachment.pgp 

From kevin.horn at gmail.com  Thu Dec  3 01:29:43 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 3 Dec 2009 00:29:43 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
	<20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>
Message-ID: <562bcc10912022229m652b5b85kca0c4ce19f7f2d7f@mail.gmail.com>

On Wed, Dec 2, 2009 at 8:38 PM, <exarkun at twistedmatrix.com> wrote:

> On 2 Dec, 11:04 pm, kevin.horn at gmail.com wrote:
> >>
> >>[1] http://twistedsphinx.funsize.net/proposal.html
> >>[2] http://twistedsphinx.funsize.net/index.html
> >
> >
> >Any of the core Twisted devs care to sound of regarding the proposed
> >timelines?
> >
> >Silence implies consent.  Or in this case approval... :)
>
> Timeline might not be the right word, since as far as I can tell there's
> little that's actually about time there. :)  Let me know if I overlooked
> something.
>
>
Well, "timeline" was the word Glyph used previously for "order in which
stuff will be done".
So that's what I stuck with.


> As far as the (I'm going to call it) roadmap goes, the thought that's
> pushed its way to the fore for me is that I'd like to try this with
> something smaller and simpler than Twisted first.  It would be nice if
> the Divmod projects would qualify here, but they may not be active
> enough for any real experience to accumulate.
>

I haven't run my lore2sphinx script against the Divmod stuff yet, but I
could certainly try it.
The intention is to convert the Divmod stuff as well as the Twisted stuff
eventually though.

I've been concentrating on the Twisted docs, since they seemed the highest
priority, but I
could detour a bit if you like.  Obviously that would slow progress on the
Twisted stuff a little.


> pyOpenSSL might work.  It uses the original CPython tex documentation
> system, so the conversion would (presumably) be done with whatever tools
> were used for CPython's own documentation, not the new Lore->Sphinx
> converter.  It would still be a useful way to get more familiar with
> Sphinx, though.  The downside is that I'm pretty much the only Twisted
> developer who works on pyOpenSSL, so it wouldn't help anyone else get
> any experience.
>

I have no idea what tools were originally used for that conversion.  Might
be interesting to try if we could find out though. Also, I presume we'd need
the sources for the docs.  Are they in the tarball?  Or elsewhere?

Of course if your objective is to learn Sphinx, you might be better off
converting the pyOpenSSL docs by hand.  They seem pretty short (except for
section 3).

If you'd like to try that, I'd be happy to assist.


> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091203/9180db73/attachment-0001.htm 

From glyph at twistedmatrix.com  Thu Dec  3 04:00:48 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 3 Dec 2009 04:00:48 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <562bcc10912022229m652b5b85kca0c4ce19f7f2d7f@mail.gmail.com>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
	<20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>
	<562bcc10912022229m652b5b85kca0c4ce19f7f2d7f@mail.gmail.com>
Message-ID: <407371A9-E698-4BC6-ADB3-37A67828EA36@twistedmatrix.com>


On Dec 3, 2009, at 1:29 AM, Kevin Horn wrote:

> On Wed, Dec 2, 2009 at 8:38 PM, <exarkun at twistedmatrix.com> wrote:
> 
> As far as the (I'm going to call it) roadmap goes, the thought that's
> pushed its way to the fore for me is that I'd like to try this with
> something smaller and simpler than Twisted first.  It would be nice if
> the Divmod projects would qualify here, but they may not be active
> enough for any real experience to accumulate.

> I haven't run my lore2sphinx script against the Divmod stuff yet, but I could certainly try it.  The intention is to convert the Divmod stuff as well as the Twisted stuff eventually though.
> 
> I've been concentrating on the Twisted docs, since they seemed the highest priority, but I could detour a bit if you like.  Obviously that would slow progress on the Twisted stuff a little.

While converting pyOpenSSL's documentation would be a worthwhile goal in itself, I don't actually like this idea.

Mainly I disagree with the premise that accumulation of experience is necessary for the conversion.  But this is not a strong disagreement, as I don't understand the motivation for saying so in the first place :).

The beauty of this plan, as far as I see it, is that the only person who has to get any significant experience with Sphinx in order for the conversion to happen is Kevin.   Mostly what the rest of us will do is read the documentation and make sure it looks OK.  Obviously we all need to learn ReST *after* that conversion to write documentation, but there is so much documentation of ReST and sphinx available that I'm not really worried about that part.

More importantly, as JP already noted, the pyOpenSSL documentation is in a different format and the conversion would use a different toolchain, so even if we do have to get some practice, it's not a particularly helpful place to start.  If we *do* need practice for some reason, I think Nevow would be the best place to start, but then, I don't see why the activity level of the project makes any difference.

I have a few issues with the roadmap too, though:

"blah, blah": I'm not sure what that's supposed to mean.

"branches containing lore docs changes should be separated into two groups..." - no criteria are specified for deciding which go into which group.  Ideally we could just get all of those changes merged; if you are making progress on the conversion I'm sure we could organize a sprint to evaluate those changes and either abandon them or get them into review.

Identifying tickets which propose lore functionality is pretty easy; just look at <http://twistedmatrix.com/trac/query?status=new&status=assigned&status=reopened&component=lore&order=priority>.  Any tickets which have not been classified properly and therefore don't show up in that list can be closed later, as we discover them.  I strongly feel that we do *not* need to conduct an exhaustive review of the entire ticket tracker and get everything perfectly in order in order to do this conversion, as long as it's clear to everyone what is supposed to happen to lore-related tickets in the future.

I see the biggest risk at the "docs freeze" step, that the doc conversion guy (or team, as the case may be by that point) will start work, then get distracted and walk away for 6 months, leaving a long period of time where nobody is supposed to write or edit documentation.

The whole point of our branch-based review process is to avoid this sort of situation.  We can't always avoid it (for example, the immense outstanding Conch branches that made everyone afraid to edit those warning-filled tests for years) but I think it's best to follow the same plan as for any branch, and have no formal "freeze" duration, just a point where the conversion branch gets merged to trunk.  It's OK if a few stale doc branches get left out in the cold during the conversion; if they're still stale once the conversion is ready, they must not be terribly actively worked on anyway.

Even in the worst case, where a branch is left stale well after the docs have been deleted from trunk, presumably the author of the change could run lore2sphinx against the conversion, copy the sphinxified doc to their trunk working copy, and make a new branch.  Assuming that the output of the conversion tool is deterministic, the diff should be small and readable.

I'm not saying that we shouldn't identify those changes... It would be good to identify the branches with outstanding doc changes so that we would at least *know* how many changes will be broken, and perhaps motivate their authors to fix them ahead of time.

I'm mainly interested in the "phase 0" outlined in the roadmap; I think that the stuff for phase 1 and 2 sounds good, but I don't think we need any special planning for it, since it fits into our normal development workflow pretty neatly.  People will be filing bugs for documentation typos pretty much forever ;-).  I'd like it if you could break down the "phase 0" a bit more clearly with regard to what happens when, since the review *before* the Big Switch gets thrown to put these changes in trunk is the most important part to get timely feedback from the community.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091203/1e0b1503/attachment.htm 

From exarkun at twistedmatrix.com  Thu Dec  3 10:06:36 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 03 Dec 2009 15:06:36 -0000
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <407371A9-E698-4BC6-ADB3-37A67828EA36@twistedmatrix.com>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
	<20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>
	<562bcc10912022229m652b5b85kca0c4ce19f7f2d7f@mail.gmail.com>
	<407371A9-E698-4BC6-ADB3-37A67828EA36@twistedmatrix.com>
Message-ID: <20091203150636.2549.1008291549.divmod.xquotient.115@localhost.localdomain>

On 09:00 am, glyph at twistedmatrix.com wrote:
>
>On Dec 3, 2009, at 1:29 AM, Kevin Horn wrote:
>>On Wed, Dec 2, 2009 at 8:38 PM, <exarkun at twistedmatrix.com> wrote:
>>
>>As far as the (I'm going to call it) roadmap goes, the thought that's
>>pushed its way to the fore for me is that I'd like to try this with
>>something smaller and simpler than Twisted first.  It would be nice if
>>the Divmod projects would qualify here, but they may not be active
>>enough for any real experience to accumulate.
>
>>I haven't run my lore2sphinx script against the Divmod stuff yet, but 
>>I could certainly try it.  The intention is to convert the Divmod 
>>stuff as well as the Twisted stuff eventually though.
>>
>>I've been concentrating on the Twisted docs, since they seemed the 
>>highest priority, but I could detour a bit if you like.  Obviously 
>>that would slow progress on the Twisted stuff a little.
>
>While converting pyOpenSSL's documentation would be a worthwhile goal 
>in itself, I don't actually like this idea.
>
>Mainly I disagree with the premise that accumulation of experience is 
>necessary for the conversion.  But this is not a strong disagreement, 
>as I don't understand the motivation for saying so in the first place 
>:).

I want some experience with Sphinx so that can verify the premise that 
Sphinx is better than Lore.  So, the experience isn't necessary for the 
conversion, it's necessary for me to be comfortable that the conversion 
is a good idea.

Jean-Paul


From glyph at twistedmatrix.com  Thu Dec  3 11:11:36 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 3 Dec 2009 11:11:36 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <20091203150636.2549.1008291549.divmod.xquotient.115@localhost.localdomain>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
	<20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>
	<562bcc10912022229m652b5b85kca0c4ce19f7f2d7f@mail.gmail.com>
	<407371A9-E698-4BC6-ADB3-37A67828EA36@twistedmatrix.com>
	<20091203150636.2549.1008291549.divmod.xquotient.115@localhost.localdomain>
Message-ID: <0972389B-3D34-4F4A-9E86-C5C8E1AC9B40@twistedmatrix.com>


On Dec 3, 2009, at 10:06 AM, exarkun at twistedmatrix.com wrote:

> I want some experience with Sphinx so that can verify the premise that 
> Sphinx is better than Lore.  So, the experience isn't necessary for the 
> conversion, it's necessary for me to be comfortable that the conversion 
> is a good idea.

Oh.  I am definitely taking that as a given.  Or rather: having frequently interacted with the output of both sphinx and lore, I was already confident that it was better than Lore in most ways before we began this conversation.  I had a few specific misgivings, which Kevin has since addressed.

Sphinx clearly has the *features* that we need; Kevin's analysis looks pretty thorough, and even the current error-laden converted documentation serves as a reasonable proof of concept.  Plus, the plan specifically includes resolving the remaining issues with that documentation as a prerequisite to getting it merged.

So while I could believe that there will be bad things about Sphinx which may surprise me, I find it hard to believe that I could be surprised by any bug in Sphinx so awful that it would be *enough worse* than Lore to make continuing to maintain Lore a preferable option, given the presence of a documentation maintainer willing to do the drudgework of conversion.

That said, it might be a good idea to do the Divmod project conversions first for other reasons.  They have less documentation, so there's less to review, and the process could be completed more quickly, letting us get some benefit out of the process earlier on.  Since these projects are the only known remaining users of lore, we could get rid of lore immediately when twisted itself is converted, rather than letting it linger until its users have converted.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091203/c2b54cb2/attachment.htm 

From masetto4ever at gmail.com  Thu Dec  3 12:23:28 2009
From: masetto4ever at gmail.com (masetto scarface)
Date: Thu, 3 Dec 2009 18:23:28 +0100
Subject: [Twisted-Python] deferToThread and thread ID
Message-ID: <9bf425a0912030923r2576cd64iff8e6cfd8e4bcb2e@mail.gmail.com>

Hi all,

Last week i've started to study (and love :P) Twisted .
Well, just for didactical purpose i've written a little script which
download a web page (getPage) and calculate a long Fibonacci number within a
deferToThread and it works perfectly.
I would like to see the different threads id of the two operations (download
a web page and the calculation of the number), always for didactical
purposes.
Is there any way to do this?

Here is a piece of my script:

...
    d1 = getPage('http://www.google.com/')
    d1.addCallback(printContents)

    d = threads.deferToThread(largeFibonacciNumber)
    d.addCallback(fibonacciCallback)

if __name__ == '__main__':
    run()
    reactor.run()

Is it possibile to print within these functions their thread id (PID is
always the same :P)?
Something like:

...
Executing printContents func
PID: 1234
Thread ID: x

...
Executing Fibonacci func
PID: 1234
Thread ID: y

I suppose it works in this way, isn't it?

Thanks
---
Masetto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091203/1e99d448/attachment.htm 

From kevin.horn at gmail.com  Thu Dec  3 12:27:12 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 3 Dec 2009 11:27:12 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <407371A9-E698-4BC6-ADB3-37A67828EA36@twistedmatrix.com>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
	<20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>
	<562bcc10912022229m652b5b85kca0c4ce19f7f2d7f@mail.gmail.com>
	<407371A9-E698-4BC6-ADB3-37A67828EA36@twistedmatrix.com>
Message-ID: <562bcc10912030927p22cc9657s6def9477708b28cb@mail.gmail.com>

On Thu, Dec 3, 2009 at 3:00 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Dec 3, 2009, at 1:29 AM, Kevin Horn wrote:
>
> On Wed, Dec 2, 2009 at 8:38 PM, <exarkun at twistedmatrix.com> wrote:
>
>>
>> As far as the (I'm going to call it) roadmap goes, the thought that's
>> pushed its way to the fore for me is that I'd like to try this with
>> something smaller and simpler than Twisted first.  It would be nice if
>> the Divmod projects would qualify here, but they may not be active
>> enough for any real experience to accumulate.
>
>
> I haven't run my lore2sphinx script against the Divmod stuff yet, but I
> could certainly try it.  The intention is to convert the Divmod stuff as
> well as the Twisted stuff eventually though.
>
> I've been concentrating on the Twisted docs, since they seemed the highest
> priority, but I could detour a bit if you like.  Obviously that would slow
> progress on the Twisted stuff a little.
>
>
> While converting pyOpenSSL's documentation would be a worthwhile goal in
> itself, I don't actually like this idea.
>
> Mainly I disagree with the premise that accumulation of experience is
> necessary for the conversion.  But this is not a strong disagreement, as I
> don't understand the motivation for saying so in the first place :).
>
> The beauty of this plan, as far as I see it, is that the only person who
> has to get any significant experience with Sphinx in order for the
> conversion to happen is Kevin.   Mostly what the rest of us will do is read
> the documentation and make sure it looks OK.  Obviously we all need to learn
> ReST *after* that conversion to write documentation, but there is so much
> documentation of ReST and sphinx available that I'm not really worried about
> that part.
>
> More importantly, as JP already noted, the pyOpenSSL documentation is in a
> different format and the conversion would use a different toolchain, so even
> if we do have to get some practice, it's not a particularly helpful place to
> start.  If we *do* need practice for some reason, I think Nevow would be the
> best place to start, but then, I don't see why the activity level of the
> project makes any difference.
>
> I have a few issues with the roadmap too, though:
>
> "blah, blah": I'm not sure what that's supposed to mean.
>

Doh!  Forgot to go back and change that...pretend it sayssomething like:
"(list of branches here)"

I'll fix it shortly.

"branches containing lore docs changes should be separated into two
> groups..." - no criteria are specified for deciding which go into which
> group.  Ideally we could just get all of those changes merged; if you are
> making progress on the conversion I'm sure we could organize a sprint to
> evaluate those changes and either abandon them or get them into review.
>

Well, I'm not entirely certain what criteria should be used until we at
least know what branches exist with lore docs in them.

If it's only say 2 or 3 branches that are relatively easy to do, we just do
all of them.  If it's a whole bunch, and some of them are those "everlasting
branches" which have been around for years with no sign of being merged any
time soon, well...that's group B. :)



Identifying tickets which propose lore functionality is pretty easy; just
> look at <
> http://twistedmatrix.com/trac/query?status=new&status=assigned&status=reopened&component=lore&order=priority>.
>  Any tickets which have not been classified properly and therefore don't
> show up in that list can be closed later, as we discover them.  I strongly
> feel that we do *not* need to conduct an exhaustive review of the entire
> ticket tracker and get everything perfectly in order in order to do this
> conversion, as long as it's clear to everyone what is supposed to happen to
> lore-related tickets in the future.
>

Yeah, I don't expect this to be too difficult.  Basically thought I'd run a
couple of searches (including the very one you mentioned above) and go from
there.  I'd like to get most of them though.  One of the problems I think
Twisted has is that there are just too dogone many open tickets.  It gets
tricky to figure out what really needs to be done unless you've been doing
it for years (as the core devs have) because of all the stuff getting in the
way.  Which is why I've been trying to find outstanding tickets that are
almost finished and "shepherd" them to completion.  But that's a discussion
for another day/thread.


> I see the biggest risk at the "docs freeze" step, that the doc conversion
> guy (or team, as the case may be by that point) will start work, then get
> distracted and walk away for 6 months, leaving a long period of time where
> nobody is supposed to write or edit documentation.
>
> The whole point of our branch-based review process is to avoid this sort of
> situation.  We can't always avoid it (for example, the immense outstanding
> Conch branches that made everyone afraid to edit those warning-filled tests
> for years) but I think it's best to follow the same plan as for any branch,
> and have no formal "freeze" duration, just a point where the conversion
> branch gets merged to trunk.  It's OK if a few stale doc branches get left
> out in the cold during the conversion; if they're still stale once the
> conversion is ready, they must not be terribly actively worked on anyway.
>
>
To be honest, I'm not even sure such a freeze would be necessary.  I just
thought I would throw it out there since the actual changeover would involve
a rather large "structural" change to that part of the Twisted source tree.
And I didn't expect it to last more than a few days.  Maybe even hours.
Perhaps I'm just used to having this kind of step.  If the consensus is that
it doesn't need to happen, I'm fine with that.

(FYI, I'm currently working in an environment where version control is
ACTIVELY DISCOURAGED, so it makes me a little paranoid that some kind of
disaster could happen.)


> Even in the worst case, where a branch is left stale well after the docs
> have been deleted from trunk, presumably the author of the change could run
> lore2sphinx against the conversion, copy the sphinxified doc to their trunk
> working copy, and make a new branch.  Assuming that the output of the
> conversion tool is deterministic, the diff should be small and readable.
>

Hmmm.   This kind of procedure could sort of work.  Pondering....

The only potential problem I see with this idea is that I think we'll need
to do some manual cleanups on the converted docs.  But I guess the author
could do as you suggested, then do their own (presumably small) manual
cleanup of their working copy after the conversion of their modified
branch.  Should be workable, if not _quite_ as simple as you've laid it out
(though almost as simple).


> I'm not saying that we shouldn't identify those changes... It would be good
> to identify the branches with outstanding doc changes so that we would at
> least *know* how many changes will be broken, and perhaps motivate their
> authors to fix them ahead of time.
>

I think we're on the same page here.


> I'm mainly interested in the "phase 0" outlined in the roadmap; I think
> that the stuff for phase 1 and 2 sounds good, but I don't think we need any
> special planning for it, since it fits into our normal development workflow
> pretty neatly.  People will be filing bugs for documentation typos pretty
> much forever ;-).  I'd like it if you could break down the "phase 0" a bit
> more clearly with regard to what happens when, since the review *before* the
> Big Switch gets thrown to put these changes in trunk is the most important
> part to get timely feedback from the community.
>

Looking at this after having been away from it for a day or so, I can see
that it's a bit chaotic :)  I guess I had been looking at it too long.

I'll try to update this soonish.  Anything specific that is unclear?

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091203/26bf7e90/attachment.htm 

From kevin.horn at gmail.com  Thu Dec  3 12:29:24 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 3 Dec 2009 11:29:24 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <0972389B-3D34-4F4A-9E86-C5C8E1AC9B40@twistedmatrix.com>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
	<20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>
	<562bcc10912022229m652b5b85kca0c4ce19f7f2d7f@mail.gmail.com>
	<407371A9-E698-4BC6-ADB3-37A67828EA36@twistedmatrix.com>
	<20091203150636.2549.1008291549.divmod.xquotient.115@localhost.localdomain>
	<0972389B-3D34-4F4A-9E86-C5C8E1AC9B40@twistedmatrix.com>
Message-ID: <562bcc10912030929r7bcdc347s1da4edd3f544a03e@mail.gmail.com>

On Thu, Dec 3, 2009 at 10:11 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Dec 3, 2009, at 10:06 AM, exarkun at twistedmatrix.com wrote:
>
> I want some experience with Sphinx so that can verify the premise that
> Sphinx is better than Lore.  So, the experience isn't necessary for the
> conversion, it's necessary for me to be comfortable that the conversion
> is a good idea.
>
>
> Oh.  I am definitely taking that as a given.  Or rather: having frequently
> interacted with the output of both sphinx and lore, I was already confident
> that it was better than Lore in most ways before we began this conversation.
>  I had a few specific misgivings, which Kevin has since addressed.
>
> Sphinx clearly has the *features* that we need; Kevin's analysis looks
> pretty thorough, and even the current error-laden converted documentation
> serves as a reasonable proof of concept.  Plus, the plan specifically
> includes resolving the remaining issues with that documentation as a
> prerequisite to getting it merged.
>
> So while I could believe that there will be bad things about Sphinx which
> may surprise me, I find it hard to believe that I could be surprised by any
> bug in Sphinx so awful that it would be *enough worse* than Lore to make
> continuing to maintain Lore a preferable option, given the presence of a
> documentation maintainer willing to do the drudgework of conversion.
>
> That said, it might be a good idea to do the Divmod project conversions
> first for other reasons.  They have less documentation, so there's less to
> review, and the process could be completed more quickly, letting us get some
> benefit out of the process earlier on.  Since these projects are the only
> known remaining users of lore, we could get rid of lore immediately when
> twisted itself is converted, rather than letting it linger until its users
> have converted.
>
>
I think maybe I'll try to do a quickie conversion on one of the Divmod
projects (probably Nevow)  in the next couple of days.  I'm not planning on
doing a theme or anything yet...just the content conversion, followed by
manual cleanup.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091203/8f0c54fb/attachment-0001.htm 

From exarkun at twistedmatrix.com  Thu Dec  3 12:29:50 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 03 Dec 2009 17:29:50 -0000
Subject: [Twisted-Python] deferToThread and thread ID
In-Reply-To: <9bf425a0912030923r2576cd64iff8e6cfd8e4bcb2e@mail.gmail.com>
References: <9bf425a0912030923r2576cd64iff8e6cfd8e4bcb2e@mail.gmail.com>
Message-ID: <20091203172950.2549.197367674.divmod.xquotient.119@localhost.localdomain>

On 05:23 pm, masetto4ever at gmail.com wrote:
>Hi all,
>
>Last week i've started to study (and love :P) Twisted .
>Well, just for didactical purpose i've written a little script which
>download a web page (getPage) and calculate a long Fibonacci number 
>within a
>deferToThread and it works perfectly.
>I would like to see the different threads id of the two operations 
>(download
>a web page and the calculation of the number), always for didactical
>purposes.
>Is there any way to do this?

deferToThread uses the regular Python threading APIs, so you can too. 
In this case, thread.get_ident() should give you what you're looking 
for.

Jean-Paul


From erik at letterror.com  Thu Dec  3 14:51:28 2009
From: erik at letterror.com (Erik van Blokland)
Date: Thu, 3 Dec 2009 20:51:28 +0100
Subject: [Twisted-Python] Help installing twisted rev 27662, OSX10.6,
	Python 2.6.4
Message-ID: <10B82CFE-7CE3-46A9-989D-8911D84F96C6@letterror.com>

Hullo,

I'm trying to get the current svn version of twisted to run on a current python 2.6.4 (not the stock python, a newer one) on Mac OSX 10.6.

> In file included from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/unicodeobject.h:4,
>                  from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/Python.h:85,
>                  from twisted/runner/portmap.c:10:
> /Developer/SDKs/MacOSX10.4u.sdk/usr/include/stdarg.h:4:25: error: stdarg.h: No such file or directory
> lipo: can't figure out the architecture type of: /var/tmp//ccpMpUAs.out
> error: command 'gcc-4.0' failed with exit status 1

The reference to 10.4 makes me go meh.

All the versions and reports:

# checking which gcc I have installed:
[ebook:~/Develop/svn.twistedmatrix.com/trunk] erik% gcc
i686-apple-darwin10-gcc-4.2.1: no input files

# the python version
[ebook:~/Develop/svn.twistedmatrix.com/trunk] erik% which python
/Library/Frameworks/Python.framework/Versions/2.6/bin/python
[ebook:~/Develop/svn.twistedmatrix.com/trunk] erik% python
Python 2.6.4 (r264:75821M, Oct 27 2009, 19:48:32) 
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin

# the twisted svn revision
[ebook:~/Develop/svn.twistedmatrix.com/trunk] erik% svn up
At revision 27662.

# the full report
[ebook:~/Develop/svn.twistedmatrix.com/trunk] erik% sudo python setup.py install
running install
running bdist_egg
running egg_info
writing requirements to Twisted.egg-info/requires.txt
writing Twisted.egg-info/PKG-INFO
writing top-level names to Twisted.egg-info/top_level.txt
writing dependency_links to Twisted.egg-info/dependency_links.txt
writing manifest file 'Twisted.egg-info/SOURCES.txt'
installing library code to build/bdist.macosx-10.3-fat/egg
running install_lib
running build_py
running build_ext
gcc-4.0 -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -g -O3 -I/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6 -c conftest.c -o conftest.o
gcc-4.0 -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -g -O3 -I/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6 -c conftest.c -o conftest.o
conftest.c:1:23: error: sys/epoll.h: No such file or directory
conftest.c:1:23: error: sys/epoll.h: No such file or directory
lipo: can't figure out the architecture type of: /var/tmp//ccz08AYz.out
building 'twisted.runner.portmap' extension
gcc-4.0 -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -g -O3 -I/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6 -c twisted/runner/portmap.c -o build/temp.macosx-10.3-fat-2.6/twisted/runner/portmap.o
In file included from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/unicodeobject.h:4,
                 from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/Python.h:85,
                 from twisted/runner/portmap.c:10:
/Developer/SDKs/MacOSX10.4u.sdk/usr/include/stdarg.h:4:25: error: stdarg.h: No such file or directory
In file included from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/unicodeobject.h:4,
                 from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/Python.h:85,
                 from twisted/runner/portmap.c:10:
/Developer/SDKs/MacOSX10.4u.sdk/usr/include/stdarg.h:4:25: error: stdarg.h: No such file or directory
lipo: can't figure out the architecture type of: /var/tmp//ccpMpUAs.out
error: command 'gcc-4.0' failed with exit status 1

All pointers welcomed. Many thanks,
Erik

From olivier.parisy at free.fr  Thu Dec  3 18:33:56 2009
From: olivier.parisy at free.fr (Olivier Parisy)
Date: Fri, 04 Dec 2009 00:33:56 +0100
Subject: [Twisted-Python] AbstractDatagramProtocol implementation question
Message-ID: <4B184AE4.4000801@free.fr>

I am studying the implementation of twisted UDP-related classes, and I 
do not understand the point of the "numPorts" attribute of 
AbstractDatagramProtocol.

It is clearly designed to avoid multiple calls to startProtocol() from 
doStart(), but I fail in imagining a scenario where this may happen 
since, as the comment states, doStart() should only be called by 
makeConnection(), which has an explicit "assert self.transport == None" 
guard which, indeed, prevents multiple calls.

So why bother to count calls?

Moreover, makeConnection() could be called multiple times on the same 
DatagramProtocol instance if it was "bound" to multiple ports (multiple 
calls to listenUDP), which can be an interesting scenario but is 
prevented by :
- the above assertion,
- the fact that AbstractDatagramProtocol.transport is not a collection, 
so only the last Port would be available anyway.

Is my reasoning wrong or incomplete? If not, couldn't we simplify 
AbstractDatagramProtocol implementation by removing numPorts?

Two other small remarks regarding documentation / understandability :
- The note "This does not actually implement IListeningPort" on udp.Port 
lead me to think that IReactorUDP.listenUDP should not be declared as 
returning an object implementing IListeningPort in the first place 
(confused me!).
- I had to read the code to understand that a "transport" and a "port" 
are exactly the same thing in the UDP implementation. The tutorial and 
the documentation were not clear about this point, so I did not make the 
link between the "self.transport" available in DatagramProtocol and the 
value returned by listenUDP (confused me!).

Regards,
Olivier.



From exarkun at twistedmatrix.com  Sun Dec  6 00:05:12 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Dec 2009 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1260075912.14.1573049477@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091206/ea41eb47/attachment.htm 

From jml at mumak.net  Sun Dec  6 04:26:06 2009
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 6 Dec 2009 20:26:06 +1100
Subject: [Twisted-Python] Deferred on PyPI
Message-ID: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>

Hello,

A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
and how they don't really depend on the rest of Twisted. Later, Mikeal
made a branch that extracted Deferred out of the rest of Twisted, and
I contributed a patch to make it more correct.

You can find the latest release at:
  http://pypi.python.org/pypi/deferred/0.2

I've also made a project for it on Launchpad:
  https://launchpad.net/deferred

So you can get the code with 'bzr branch lp:deferred'. Mikeal is
maintaining the official trunk branch on Github.

I haven't heard anything about it on this list, so I thought I'd
mention to see what you all think and whether we should do anything
about it.

cheers,
jml


From exarkun at twistedmatrix.com  Sun Dec  6 14:29:12 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Dec 2009 19:29:12 -0000
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
Message-ID: <20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>

On 09:26 am, jml at mumak.net wrote:
>Hello,
>
>A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
>and how they don't really depend on the rest of Twisted. Later, Mikeal
>made a branch that extracted Deferred out of the rest of Twisted, and
>I contributed a patch to make it more correct.
>
>You can find the latest release at:
>  http://pypi.python.org/pypi/deferred/0.2
>
>I've also made a project for it on Launchpad:
>  https://launchpad.net/deferred
>
>So you can get the code with 'bzr branch lp:deferred'. Mikeal is
>maintaining the official trunk branch on Github.
>
>I haven't heard anything about it on this list, so I thought I'd
>mention to see what you all think and whether we should do anything
>about it.

I think this is a good idea, except you didn't mention anything about 
the plan for keeping this separate codebase synchronized with Twisted 
development.  I hope the plan isn't to allow it to become out of date.

Jean-Paul


From exarkun at twistedmatrix.com  Sun Dec  6 14:38:46 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Dec 2009 19:38:46 -0000
Subject: [Twisted-Python] AbstractDatagramProtocol implementation
	question
In-Reply-To: <4B184AE4.4000801@free.fr>
References: <4B184AE4.4000801@free.fr>
Message-ID: <20091206193846.2549.1292919030.divmod.xquotient.385@localhost.localdomain>

On 3 Dec, 11:33 pm, olivier.parisy at free.fr wrote:
>I am studying the implementation of twisted UDP-related classes, and I
>do not understand the point of the "numPorts" attribute of
>AbstractDatagramProtocol.
>
>It is clearly designed to avoid multiple calls to startProtocol() from
>doStart(), but I fail in imagining a scenario where this may happen
>since, as the comment states, doStart() should only be called by
>makeConnection(), which has an explicit "assert self.transport == None"
>guard which, indeed, prevents multiple calls.
>
>So why bother to count calls?
>
>Moreover, makeConnection() could be called multiple times on the same
>DatagramProtocol instance if it was "bound" to multiple ports (multiple
>calls to listenUDP), which can be an interesting scenario but is
>prevented by :
>- the above assertion,
>- the fact that AbstractDatagramProtocol.transport is not a collection,
>so only the last Port would be available anyway.
>
>Is my reasoning wrong or incomplete? If not, couldn't we simplify
>AbstractDatagramProtocol implementation by removing numPorts?

This was probably a mindless copy/paste from the TCP implementation.  I 
don't see any reason not to deprecate and then remove the attribute.
>
>Two other small remarks regarding documentation / understandability :
>- The note "This does not actually implement IListeningPort" on 
>udp.Port
>lead me to think that IReactorUDP.listenUDP should not be declared as
>returning an object implementing IListeningPort in the first place
>(confused me!).

This docstring seems to have been inherited from the base class, which 
indeed does not implement IListeningPort.  It would probably be nice if 
udp.Port had its own docstring which was more reflective of udp.Port.
>- I had to read the code to understand that a "transport" and a "port"
>are exactly the same thing in the UDP implementation. The tutorial and
>the documentation were not clear about this point, so I did not make 
>the
>link between the "self.transport" available in DatagramProtocol and the
>value returned by listenUDP (confused me!).

Would you like to file a ticket for the numPorts issue and another one 
for these documentation issues?  If you also attach a patch clarifying 
things, it will probably be applied quite quickly.

Thank you very much for the feedback!

Jean-Paul


From jml at mumak.net  Sun Dec  6 16:10:09 2009
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 7 Dec 2009 08:10:09 +1100
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
Message-ID: <d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>

On Mon, Dec 7, 2009 at 6:29 AM,  <exarkun at twistedmatrix.com> wrote:
> On 09:26 am, jml at mumak.net wrote:
>>Hello,
>>
>>A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
>>and how they don't really depend on the rest of Twisted. Later, Mikeal
>>made a branch that extracted Deferred out of the rest of Twisted, and
>>I contributed a patch to make it more correct.
>>
>>You can find the latest release at:
>> ?http://pypi.python.org/pypi/deferred/0.2
>>
>>I've also made a project for it on Launchpad:
>> ?https://launchpad.net/deferred
>>
>>So you can get the code with 'bzr branch lp:deferred'. Mikeal is
>>maintaining the official trunk branch on Github.
>>
>>I haven't heard anything about it on this list, so I thought I'd
>>mention to see what you all think and whether we should do anything
>>about it.
>
> I think this is a good idea, except you didn't mention anything about
> the plan for keeping this separate codebase synchronized with Twisted
> development. ?I hope the plan isn't to allow it to become out of date.
>

Well, I don't know if there's a plan per se. I'm personally not
intending to maintain the code.

However, if I were the maintainer, I think that I would like Twisted
to depend on this code, dropping its own Deferred implementation.

jml


From terry at jon.es  Sun Dec  6 18:14:30 2009
From: terry at jon.es (Terry Jones)
Date: Mon, 7 Dec 2009 00:14:30 +0100
Subject: [Twisted-Python] A simple DeferredPool class
Message-ID: <19228.15062.327725.129073@jon.es>

I submitted a talk on Twisted Deferreds to the US PyCon about, but it was
unfortunately rejected. The main point I'd planned to make was how nice the
deferred mechanism is, as evidenced by the number of times I've wanted to
do things that might be complex in other scenarios but which just fall out
using deferreds. More importantly, you rarely need to use anything more
than the basic building blocks found in t.i.defer.

I like posting small self-contained examples of this sort of thing, so here
are another couple.  If you know deferreds well I guess these will seem
trivial. If not, you might find them valuable.

Here's the situation I found myself in today.  I'll use an example based on
twisted.web. Suppose you have a twisted.web service running and you want to
shut the service down. But for various reasons you don't want to interrupt
any of the work that it has in progress.

The currently outstanding work the service is doing is bound up in a set of
deferreds that have not yet fired.  E.g., a request has come in and the
server called something that returns a deferred, attached a callback to it
that will finish the request, and returned NOT_DONE_YET. Something like
this:

    def render_GET(self, request):
        d = defer.maybeDeferred(someFunc)
        d.addCallback(_finish, request)
        return server.NOT_DONE_YET

    def _finish(self, result, request):
        request.finish()
 
A the moment that you send the command to shut the service down, zero of
more instances of d (above) may exist, and these will be in various stages
of completion. Given this setup, how can you arrange to wait for all
outstanding requests (if any) before shutting the service down?

A simple solution is just to define a DeferredPool class that maintains a
pool of deferreds which can provide you with a method to (at any time)
obtain a deferred that will fire when/if the pool size next goes to zero.
Here's what I wrote (untested):

    from twisted.internet import defer

    class DeferredPool(object):
        def __init__(self, initialContents=None):
            self._pool = set()
            self._waiting = []
            if initialContents:
                for d in initialContents:
                    self.add(d)

        def _fired(self, result, d):
            self._pool.remove(d)
            if not self._pool:
                waiting, self._waiting = self._waiting, []
                for waiter in waiting:
                    waiter.callback(None)
            return result

        def add(self, d):
            d.addBoth(self._fired, d)
            self._pool.add(d)
            return d

        def deferUntilEmpty(self, testImmediately=True):
            if testImmediately and not self._pool:
                return defer.succeed(None)
            else:
                d = defer.Deferred()
                self._waiting.append(d)
                return d


In your server's startService method, you can do this:

    def startService(self):
        self.pool = DeferredPool()

and the above render_GET code gets changed to look like this:

    def render_GET(self, request):
        d = defer.maybeDeferred(someFunc)
        d.addCallback(_finish, request)
        self.pool.add(d)
        return server.NOT_DONE_YET

and in your stopService method:

    def stopService(self):
        d = self.pool.deferUntilEmpty()
        d.addCallback( whatever else you need to do )
        return d

And that's it.

As usual with these simple deferred solutions, it's simple, it's general,
and it's more widely useful than you might have initially planned.  The
DeferredPool class is a little reminiscent of DeferredList, in that the
deferreds that are submitted each get a call/errback added to themselves
that monitors the progress of the collection and which triggers the waiting
deferreds (if any) once some condition is satisfied. But it's more dynamic,
as the pool can grown and shrink while you're waiting, it can have zero or
more waiters, it's long-lived as the pool can go to down zero size and come
back up and have more waiters added to it, etc. And, as with all these nice
tricks, the existence of the pool and its operation is totally transparent
to the deferreds in use by the original code. Yes, you have to insert one
call to add a deferred to the pool, but that's it.

That's part of what I like the most about this sort of this: adding
transparent call/errbacks into the chain of existing deferreds to do
something no-one thought of initially, and knowing that unless you do
something really dumb you'll have no noticeable effect on the operation of
the original code. That's part of why I find Twisted's deferreds so
elegant.

I also wrote a somewhat more general (and slower) version of questionable
utility. It allows you to pass a function when you ask for a deferred - and
the deferred you get fires when your function returns True. Your function
is called each time a deferred in the pool fires. If you don't pass a
function, you get the above behavior (fire when the pool is empty).  I wont
post the code it here. If you want it, just ask.

Comments welcome on all this, of course.  I'm interested to hear how people
would write tests for the above.

Terry


From exarkun at twistedmatrix.com  Sun Dec  6 18:35:07 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Dec 2009 23:35:07 -0000
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
Message-ID: <20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>

On 09:10 pm, jml at mumak.net wrote:
>On Mon, Dec 7, 2009 at 6:29 AM,  <exarkun at twistedmatrix.com> wrote:
>>On 09:26 am, jml at mumak.net wrote:
>>>Hello,
>>>
>>>A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
>>>and how they don't really depend on the rest of Twisted. Later, 
>>>Mikeal
>>>made a branch that extracted Deferred out of the rest of Twisted, and
>>>I contributed a patch to make it more correct.
>>>
>>>You can find the latest release at:
>>>?http://pypi.python.org/pypi/deferred/0.2
>>>
>>>I've also made a project for it on Launchpad:
>>>?https://launchpad.net/deferred
>>>
>>>So you can get the code with 'bzr branch lp:deferred'. Mikeal is
>>>maintaining the official trunk branch on Github.
>>>
>>>I haven't heard anything about it on this list, so I thought I'd
>>>mention to see what you all think and whether we should do anything
>>>about it.
>>
>>I think this is a good idea, except you didn't mention anything about
>>the plan for keeping this separate codebase synchronized with Twisted
>>development. ?I hope the plan isn't to allow it to become out of date.
>
>Well, I don't know if there's a plan per se. I'm personally not
>intending to maintain the code.

Hm.  Is Mikeal?  Is he on this list?
>However, if I were the maintainer, I think that I would like Twisted
>to depend on this code, dropping its own Deferred implementation.

It would be pretty neat to be able to do that.  I don't think it will 
happen unless someone is actively working towards it, though.

Jean-Paul


From mikeal.rogers at gmail.com  Sun Dec  6 21:40:41 2009
From: mikeal.rogers at gmail.com (Mikeal Rogers)
Date: Sun, 6 Dec 2009 18:40:41 -0800
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
Message-ID: <30747dfa0912061840h57bf6c13u44622d26d4400664@mail.gmail.com>

On Sun, Dec 6, 2009 at 3:35 PM, <exarkun at twistedmatrix.com> wrote:

> On 09:10 pm, jml at mumak.net wrote:
>
>> On Mon, Dec 7, 2009 at 6:29 AM,  <exarkun at twistedmatrix.com> wrote:
>>
>>> On 09:26 am, jml at mumak.net wrote:
>>>
>>>> Hello,
>>>>
>>>> A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
>>>> and how they don't really depend on the rest of Twisted. Later, Mikeal
>>>> made a branch that extracted Deferred out of the rest of Twisted, and
>>>> I contributed a patch to make it more correct.
>>>>
>>>> You can find the latest release at:
>>>>  http://pypi.python.org/pypi/deferred/0.2
>>>>
>>>> I've also made a project for it on Launchpad:
>>>>  https://launchpad.net/deferred
>>>>
>>>> So you can get the code with 'bzr branch lp:deferred'. Mikeal is
>>>> maintaining the official trunk branch on Github.
>>>>
>>>> I haven't heard anything about it on this list, so I thought I'd
>>>> mention to see what you all think and whether we should do anything
>>>> about it.
>>>>
>>>
>>> I think this is a good idea, except you didn't mention anything about
>>> the plan for keeping this separate codebase synchronized with Twisted
>>> development.  I hope the plan isn't to allow it to become out of date.
>>>
>>
>> Well, I don't know if there's a plan per se. I'm personally not
>> intending to maintain the code.
>>
>
> Hm.  Is Mikeal?  Is he on this list?


Just had to join in order to reply.

Anyone who wants to contribute is welcome to fork it and send me pull
requests on github. I don't keep up with current Twisted development so I
doubt I'll be in the loop enough to keep this up to date.

http://github.com/mikeal/deferred


>
>  However, if I were the maintainer, I think that I would like Twisted
>> to depend on this code, dropping its own Deferred implementation.
>
>
> It would be pretty neat to be able to do that.  I don't think it will
> happen unless someone is actively working towards it, though.
>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091206/e5180cdf/attachment.htm 

From konrads at smelkovs.com  Mon Dec  7 09:50:57 2009
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Mon, 7 Dec 2009 16:50:57 +0200
Subject: [Twisted-Python] Syntactic sugar for deferreds
Message-ID: <d79700b90912070650o4ed3017bk42a59d41a8d2f6f5@mail.gmail.com>

Hi,

One project I had a look at had this nice syntactic sugar for async function
chaining:

>>> event_one() | event_two() | event_three()

I think this could be an interesting alternative to addCallback or yield. I
propose the following syntax

# get deferred with one () and two () chained as callbacks, equivalent to
d=Deferred().addCallback(one).addCallback(two)
>>> d = Deferred() | one | two

# Equivalent to d=Deferred().addCallback(one).addErrback(two)
>>> d = Deferred() | one ^ two

and finally:
# d=Deferred().addBoth(one,two)
>>> d = Deferred() & (one,two)

This could make use of currying/
--
Konrads Smelkovs
Applied IT sorcery.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091207/b6a9e15c/attachment-0001.htm 

From ssteinerx at gmail.com  Mon Dec  7 10:02:10 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Mon, 7 Dec 2009 10:02:10 -0500
Subject: [Twisted-Python] Syntactic sugar for deferreds
In-Reply-To: <d79700b90912070650o4ed3017bk42a59d41a8d2f6f5@mail.gmail.com>
References: <d79700b90912070650o4ed3017bk42a59d41a8d2f6f5@mail.gmail.com>
Message-ID: <901EBF24-D4B9-4C52-991D-062E3FE33B52@gmail.com>

On Dec 7, 2009, at 9:50 AM, Konrads Smelkovs wrote:

> Hi,
> 
> One project I had a look at had this nice syntactic sugar for async function chaining:
> 
> >>> event_one() | event_two() | event_three()
> 
> I think this could be an interesting alternative to addCallback or yield. I propose the following syntax
> 
> # get deferred with one () and two () chained as callbacks, equivalent to d=Deferred().addCallback(one).addCallback(two)
> >>> d = Deferred() | one | two
> 
> # Equivalent to d=Deferred().addCallback(one).addErrback(two)
> >>> d = Deferred() | one ^ two
> 
> and finally:
> # d=Deferred().addBoth(one,two)
> >>> d = Deferred() & (one,two)

Yuck.

S



From landreville at deadtreepages.com  Mon Dec  7 10:30:38 2009
From: landreville at deadtreepages.com (Landreville)
Date: Mon, 7 Dec 2009 10:30:38 -0500
Subject: [Twisted-Python] Syntactic sugar for deferreds
In-Reply-To: <901EBF24-D4B9-4C52-991D-062E3FE33B52@gmail.com>
References: <d79700b90912070650o4ed3017bk42a59d41a8d2f6f5@mail.gmail.com>
	<901EBF24-D4B9-4C52-991D-062E3FE33B52@gmail.com>
Message-ID: <9d748c780912070730x49d60274ga675047b05f016b@mail.gmail.com>

On Mon, Dec 7, 2009 at 10:02 AM, ssteinerX at gmail.com <ssteinerx at gmail.com>wrote:

> On Dec 7, 2009, at 9:50 AM, Konrads Smelkovs wrote:
>
> > Hi,
> >
> > One project I had a look at had this nice syntactic sugar for async
> function chaining:
> >
> > >>> event_one() | event_two() | event_three()
> >
> > I think this could be an interesting alternative to addCallback or yield.
> I propose the following syntax
> >
> > # get deferred with one () and two () chained as callbacks, equivalent to
> d=Deferred().addCallback(one).addCallback(two)
> > >>> d = Deferred() | one | two
> >
> > # Equivalent to d=Deferred().addCallback(one).addErrback(two)
> > >>> d = Deferred() | one ^ two
> >
> > and finally:
> > # d=Deferred().addBoth(one,two)
> > >>> d = Deferred() & (one,two)
>
> Yuck.
>
> S
>
>
> I'd have to agree with this. Yield with inline callbacks is certainly
enough syntactic sugar for me.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091207/813fd55b/attachment.htm 

From p.mayers at imperial.ac.uk  Mon Dec  7 11:29:00 2009
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 07 Dec 2009 16:29:00 +0000
Subject: [Twisted-Python] Syntactic sugar for deferreds
In-Reply-To: <901EBF24-D4B9-4C52-991D-062E3FE33B52@gmail.com>
References: <d79700b90912070650o4ed3017bk42a59d41a8d2f6f5@mail.gmail.com>
	<901EBF24-D4B9-4C52-991D-062E3FE33B52@gmail.com>
Message-ID: <4B1D2D4C.5050703@imperial.ac.uk>

ssteinerX at gmail.com wrote:
> On Dec 7, 2009, at 9:50 AM, Konrads Smelkovs wrote:
> 
>> Hi,
>>
>> One project I had a look at had this nice syntactic sugar for async function chaining:
>>
>>>>> event_one() | event_two() | event_three()
>> I think this could be an interesting alternative to addCallback or yield. I propose the following syntax
>>
>> # get deferred with one () and two () chained as callbacks, equivalent to d=Deferred().addCallback(one).addCallback(two)
>>>>> d = Deferred() | one | two
>> # Equivalent to d=Deferred().addCallback(one).addErrback(two)
>>>>> d = Deferred() | one ^ two
>> and finally:
>> # d=Deferred().addBoth(one,two)
>>>>> d = Deferred() & (one,two)
> 
> Yuck.

Indeed. This looks more like perl than python.

http://www.python.org/dev/peps/pep-0020/


From grickert at coldstorage.com  Mon Dec  7 11:47:55 2009
From: grickert at coldstorage.com (Gerrat Rickert)
Date: Mon, 7 Dec 2009 11:47:55 -0500
Subject: [Twisted-Python] TimAllen changed [#3956 - Add arraysize option
	to runQuery in adbapi]
In-Reply-To: <E1NHY8J-0001ht-Qh@cube.twistedmatrix.com>
References: <E1NHY8J-0001ht-Qh@cube.twistedmatrix.com>
Message-ID: <BB13E4C4D649234F84A01F6DF64BB87F0501490A@ccs-ex01.coldstorage.com>

 1. About `t.e.adbapi.Transaction.cursor`: It seems that the only
>read/write attribute on a cursor object is `arraysize`, and it seems
>clunky to mess with `Transaction`'s public interface just for that. How
>about leaving the instance variable as `_cursor` and adding
>`getArraySize`/`setArraySize` methods? (a property would be even
better,
>but that requires a new-style class)
>
>I'm kind of ambivalent about the whole approach of this patch, really:
>the only method that `runQuery()` ever calls on the cursor is
>`fetchall()`, which DBAPI-2.0 describes with "Note that the cursor's
>`arraysize` attribute can affect the performance of this operation."
>Presumably in sensible DBAPI modules, `fetchall()` will read chunks as
>large as possible rather than limiting itself to `arraysize`, but
Gerrat
>appears to have found a module that needlessly limits itself, so some
>configuration is needed.
>
>However, do we really need to set a separate `arraysize` for every
>query? Considering we always call `fetchall()`, presumably we'll always
>want to use whatever `arraysize` makes `fetchall()` fastest. I doubt
>there's a value that would work for every DBAPI module in every Twisted
>installation all over the world, but it seems sensible that every query
>in a given `ConnectionPool` would want to use the same arraysize. How
>about adding a `cp_arraysize` keyword parameter to `ConnectionPool`,
and
>applying that setting in `_runInteraction()`? It's a pretty easy way to
>configure `arraysize`, it has no backwards compatibility problems, and
>it shouldn't be too hard for each Twisted user to find a value that
>improves things overall in their environment.
>
>Of course, when you're pushing for performance there's always
>exceptions, and some users might need to set `arraysize` differently
for
>different queries, and maybe use other calls than `fetchall()`. They
can
>continue using `runInteraction()` as they presumably already do.

Sorry I've dropped the ball on this whole request that I initiated.  I'm
kind 
of swamped at work this time of year (I should have more time starting
mid 
Jan.)  I have a minute to weigh in though.

As for the exact details on how this is implemented, I don't have any
strong 
preferences.  I like the suggestion to add the `cp_arraysize` parameter
to 
`ConnectionPool` and apply it in `_runInteraction()`...wish I'd thought
of it.

I also agree that it's unfortunate that the performance of `fetchall()`
is 
impacted by the `arraysize` attribute; but I think that if it's a
deficiency, 
the issue is with the DBAPI-2.0 specification, not with this
implementation. 
(It would be kind of pointless mentioning that `arraysize` could affect
the 
performance of this method, if this method ignored `arraysize`.)

Regards,
	Gerrat


From mike.lifeguard at gmail.com  Mon Dec  7 12:05:07 2009
From: mike.lifeguard at gmail.com (Mike.lifeguard)
Date: Mon, 07 Dec 2009 13:05:07 -0400
Subject: [Twisted-Python] voiced/opped in twisted IRC
Message-ID: <4B1D35C3.2040106@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hello,

I cannot see how to get whether a nick is voiced/opped currently in a
given channel in the twisted IRC framework. I see methhods of changing
modes, but not querying. Can this be easily done?

Thanks,
- -Mike
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (GNU/Linux)

iEYEARECAAYFAksdNcAACgkQst0AR/DaKHtptwCdEMPBHa4wC57+nJorxRpddqaP
PQQAniZbpQ1u/bmv9QF4NmBJXGkDBWvS
=tCQ/
-----END PGP SIGNATURE-----


From exarkun at twistedmatrix.com  Mon Dec  7 14:18:13 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Dec 2009 19:18:13 -0000
Subject: [Twisted-Python] voiced/opped in twisted IRC
In-Reply-To: <4B1D35C3.2040106@gmail.com>
References: <4B1D35C3.2040106@gmail.com>
Message-ID: <20091207191813.2549.198186771.divmod.xquotient.428@localhost.localdomain>

On 05:05 pm, mike.lifeguard at gmail.com wrote:
>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>Hello,
>
>I cannot see how to get whether a nick is voiced/opped currently in a
>given channel in the twisted IRC framework. I see methhods of changing
>modes, but not querying. Can this be easily done?

This information is made available as part of the name list response. 
An op'd user has their name prefixed with "@".  A voiced user has the 
"+" prefix.

Jean-Paul


From mike.lifeguard at gmail.com  Mon Dec  7 15:35:46 2009
From: mike.lifeguard at gmail.com (Mike.lifeguard)
Date: Mon, 07 Dec 2009 16:35:46 -0400
Subject: [Twisted-Python] voiced/opped in twisted IRC
In-Reply-To: <20091207191813.2549.198186771.divmod.xquotient.428@localhost.localdomain>
References: <4B1D35C3.2040106@gmail.com>
	<20091207191813.2549.198186771.divmod.xquotient.428@localhost.localdomain>
Message-ID: <4B1D6722.4080809@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

exarkun at twistedmatrix.com wrote:
> On 05:05 pm, mike.lifeguard at gmail.com wrote:
>> -----BEGIN PGP SIGNED MESSAGE-----
>> Hash: SHA1
>>
>> Hello,
>>
>> I cannot see how to get whether a nick is voiced/opped currently in a
>> given channel in the twisted IRC framework. I see methhods of changing
>> modes, but not querying. Can this be easily done?
> 
> This information is made available as part of the name list response. 
> An op'd user has their name prefixed with "@".  A voiced user has the 
> "+" prefix.
> 
> Jean-Paul
> 

So I need to do a /names each time I want to check if someone is voiced?
That seems rather inefficient.

I suppose it is also in any privmsg from them, but I don't see a way to
get that from irc_PRIVMSG. I guess I can rewrite that...

BTW, at line 417, the H/G is here/gone.

- -Mike
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (GNU/Linux)

iEYEARECAAYFAksdZx8ACgkQst0AR/DaKHtlQACgnP5q+ITEHTNQ8EKPUIzAf5+u
bxgAoMalSfAIXJRAw0OsVfZVGSEWP+TP
=L77y
-----END PGP SIGNATURE-----


From jml at mumak.net  Tue Dec  8 04:50:50 2009
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 8 Dec 2009 20:50:50 +1100
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
Message-ID: <d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>

On Mon, Dec 7, 2009 at 10:35 AM,  <exarkun at twistedmatrix.com> wrote:
> On 09:10 pm, jml at mumak.net wrote:
>> On Mon, Dec 7, 2009 at 6:29 AM, ?<exarkun at twistedmatrix.com> wrote:
>>> On 09:26 am, jml at mumak.net wrote:
>>>>
>>>> A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
>>>> and how they don't really depend on the rest of Twisted. Later, Mikeal
>>>> made a branch that extracted Deferred out of the rest of Twisted, and
>>>> I contributed a patch to make it more correct.
>>>>
...
>>>
>>> I think this is a good idea, except you didn't mention anything about
>>> the plan for keeping this separate codebase synchronized with Twisted
>>> development. ?I hope the plan isn't to allow it to become out of date.
>>
...
>> However, if I were the maintainer, I think that I would like Twisted
>> to depend on this code, dropping its own Deferred implementation.
>
> It would be pretty neat to be able to do that. ?I don't think it will happen
> unless someone is actively working towards it, though.
>

If there's in principal agreement, I can laconically work towards it.

jml


From apacheco.uy at gmail.com  Tue Dec  8 07:24:37 2009
From: apacheco.uy at gmail.com (=?ISO-8859-1?Q?An=EDbal_Pacheco?=)
Date: Tue, 08 Dec 2009 10:24:37 -0200
Subject: [Twisted-Python] serialport protocol as a service
Message-ID: <4B1E4585.7040007@gmail.com>

Hello list,

Is there any way to get a service like the twisted.internet.TCPServer 
but for serialport?

I read the serialport code but couldn't figure out how to build such an 
analogy with the tcp server.

The goal I wanna reach is to attach this "serial port service" to my 
service.MultiService object which already works great with a TCPServer 
and two TimerService

thanks!


From gabriel.rossetti at arimaz.com  Tue Dec  8 07:50:47 2009
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Tue, 08 Dec 2009 13:50:47 +0100
Subject: [Twisted-Python] reactor.callLater() or reactor.callFromThread()
 when sending msg just before quit
Message-ID: <4B1E4BA7.1040905@arimaz.com>

Hello everyone,

I have to send a message just before my service quits, but sometimes the 
reactor quits before the msg is sent.
I was wondering if I should user reactor.callLater like so :

self.sendMessage(msg)
reactor.callLater(1, self.stop)

(which I don't really like), or use reactor.callFromThread like so :

self.sendMessage(msg)
reactor.callFromThread(self.stop)

(self.stop calls reactor.stop at some point).

I really need for that msg to be sent before the reactor shuts down.

Thank you,
Gabriel


From exarkun at twistedmatrix.com  Tue Dec  8 10:14:06 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 08 Dec 2009 15:14:06 -0000
Subject: [Twisted-Python] reactor.callLater() or
	reactor.callFromThread()	when sending msg just before quit
In-Reply-To: <4B1E4BA7.1040905@arimaz.com>
References: <4B1E4BA7.1040905@arimaz.com>
Message-ID: <20091208151406.2549.1712465614.divmod.xquotient.448@localhost.localdomain>

On 12:50 pm, gabriel.rossetti at arimaz.com wrote:
>Hello everyone,
>
>I have to send a message just before my service quits, but sometimes 
>the
>reactor quits before the msg is sent.
>I was wondering if I should user reactor.callLater like so :
>
>self.sendMessage(msg)
>reactor.callLater(1, self.stop)
>
>(which I don't really like), or use reactor.callFromThread like so :
>
>self.sendMessage(msg)
>reactor.callFromThread(self.stop)
>
>(self.stop calls reactor.stop at some point).
>
>I really need for that msg to be sent before the reactor shuts down.

You should stop the reactor only after you receive acknowledgement that 
the message arrived at its destination.  Hopefully the protocol you're 
using supports this.

There are several ways in which bytes on a TCP connection can get lost. 
When you call reactor.stop() immediately after trying to send some 
bytes, it's most likely that they get lost because they are still in 
Twisted's send buffer.  However, even if they get out of Twisted's send 
buffer and into the kernel's, they still may get lost on the network. 
And even if they arrive in the destination's kernel receive buffer, the 
receiving process may still exit (perhaps unintentionally) without 
reading them.  And even if it reads them, it may exit without processing 
them.  And even if they are processed, the disk I/O which records the 
result of that processing may be interrupted by a power loss or similar 
event.

You may not need to deal with all of these eventualities (it depends on 
the purpose and reliability requirements of your application, of 
course).  It's very common to want to know that the application on the 
other side of the connection read and processed the bytes, though.  This 
requires that the protocol allow messages to be acknowledged.

Jean-Paul


From itamar at itamarst.org  Tue Dec  8 10:20:24 2009
From: itamar at itamarst.org (Itamar Turner-Trauring (aka Shtull-Trauring))
Date: Tue, 08 Dec 2009 10:20:24 -0500
Subject: [Twisted-Python] reactor.callLater() or
 reactor.callFromThread() when sending msg just before quit
In-Reply-To: <4B1E4BA7.1040905@arimaz.com>
References: <4B1E4BA7.1040905@arimaz.com>
Message-ID: <1260285624.7200.48.camel@pintsize>

On Tue, 2009-12-08 at 13:50 +0100, Gabriel Rossetti wrote:
> I have to send a message just before my service quits, but sometimes the 
> reactor quits before the msg is sent.
> I was wondering if I should user reactor.callLater like so :
...
> (which I don't really like), or use reactor.callFromThread like so :
...

Neither of these will necessarily work. Instead, you want to use a
shutdown hook:

reactor.addSystemEventTrigger("before", "shutdown", f)

when you do reactor.stop(), f will be called... and shutdown will be
delayed until the Deferred f returns is triggered. In your case, send
message, tell connection to close, and then stop reactor. If you make
sure the Deferred from f only gets callback()ed when connectionLost is
called you'll get behavior you want.



From glyph at twistedmatrix.com  Tue Dec  8 10:42:50 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 8 Dec 2009 10:42:50 -0500
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
	<d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
Message-ID: <E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>


On Dec 8, 2009, at 4:50 AM, Jonathan Lange wrote:

> On Mon, Dec 7, 2009 at 10:35 AM,  <exarkun at twistedmatrix.com> wrote:
>> On 09:10 pm, jml at mumak.net wrote:
>>> On Mon, Dec 7, 2009 at 6:29 AM,  <exarkun at twistedmatrix.com> wrote:
>>>> On 09:26 am, jml at mumak.net wrote:
>>>>> 
>>>>> A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
>>>>> and how they don't really depend on the rest of Twisted.

>>> However, if I were the maintainer, I think that I would like Twisted
>>> to depend on this code, dropping its own Deferred implementation.
>> 
>> It would be pretty neat to be able to do that.  I don't think it will happen
>> unless someone is actively working towards it, though.

> If there's in principal agreement, I can laconically work towards it.

In (ahem) principle, I agree, but my agreement is contingent upon the theoretical existence of things like "a good package manager for Python" and "installation instructions on our website which clearly explain how to install dependencies in a context-sensitive manner" (i.e. depending on your platform).

Still, I think that this work is an excellent proof of concept and therefore immediately useful in its own right.  Thank you, Mikeal :).

So, I would regard this as a long-term goal.  Given the pace of our normal, non-"laconic" work, though, I think there's little risk it will be completed in the near term ;-).



From ltaylor.volks at gmail.com  Tue Dec  8 14:50:37 2009
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Tue, 08 Dec 2009 12:50:37 -0700
Subject: [Twisted-Python] serialport protocol as a service
In-Reply-To: <4B1E4585.7040007@gmail.com>
References: <4B1E4585.7040007@gmail.com>
Message-ID: <4B1EAE0D.9040907@gmail.com>

On 12/8/09 5:24 AM, An?bal Pacheco wrote:
> Hello list,
> 
> Is there any way to get a service like the twisted.internet.TCPServer 
> but for serialport?
> 
> I read the serialport code but couldn't figure out how to build such an 
> analogy with the tcp server.
> 
> The goal I wanna reach is to attach this "serial port service" to my 
> service.MultiService object which already works great with a TCPServer 
> and two TimerService
> 

You should be able to implement your own Service class and create your
SerialPort instances in the startService method. e.g. (untested):

from twisted.application import service
from twisted.internet import reactor
from twisted.internet.serialport import SerialPort
from twisted.protocols.basic import LineReceiver

class SerialService(service.Service):
    def startService(self):
        self.serial = SerialPort(LineReceiver, '/dev/tty/serialport',
reactor)

multiService = service.MultiService()
serialService = SerialService()
serialService.setServiceParent(multiService)

# Add some other services...

application = service.Application("Serial MultiService Example")
multiService.setServiceParent(application)


http://twistedmatrix.com/documents/9.0.0/api/twisted.application.service.Service.html



From landreville at deadtreepages.com  Tue Dec  8 16:04:12 2009
From: landreville at deadtreepages.com (Landreville)
Date: Tue, 8 Dec 2009 16:04:12 -0500
Subject: [Twisted-Python] Twistd logging
Message-ID: <9d748c780912081304m5fbf49ffk37a7e03ca7583819@mail.gmail.com>

Is there a way I can customize the format of log file?
I want to add more information to each line (about the xmlrpc method being
called), but I can't find where these lines get written out. I know I can
print a message to the log in my _getFunction, but I would prefer to have
one line per request.

Thanks,
Landreville
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091208/9d01abb3/attachment.htm 

From apacheco.uy at gmail.com  Tue Dec  8 20:36:59 2009
From: apacheco.uy at gmail.com (=?ISO-8859-1?Q?An=EDbal_Pacheco?=)
Date: Tue, 08 Dec 2009 23:36:59 -0200
Subject: [Twisted-Python] serialport protocol as a service
In-Reply-To: <4B1EAE0D.9040907@gmail.com>
References: <4B1E4585.7040007@gmail.com> <4B1EAE0D.9040907@gmail.com>
Message-ID: <4B1EFF3B.20902@gmail.com>

On 12/08/2009 05:50 PM, Lucas Taylor wrote:
> On 12/8/09 5:24 AM, An?bal Pacheco wrote:
>> Hello list,
>>
>> Is there any way to get a service like the twisted.internet.TCPServer
>> but for serialport?
>>
>> I read the serialport code but couldn't figure out how to build such an
>> analogy with the tcp server.
>>
>> The goal I wanna reach is to attach this "serial port service" to my
>> service.MultiService object which already works great with a TCPServer
>> and two TimerService
>>
>
> You should be able to implement your own Service class and create your
> SerialPort instances in the startService method. e.g. (untested):
>
> from twisted.application import service
> from twisted.internet import reactor
> from twisted.internet.serialport import SerialPort
> from twisted.protocols.basic import LineReceiver
>
> class SerialService(service.Service):
>      def startService(self):
>          self.serial = SerialPort(LineReceiver, '/dev/tty/serialport',
> reactor)
>
> multiService = service.MultiService()
> serialService = SerialService()
> serialService.setServiceParent(multiService)
>
> # Add some other services...
>
> application = service.Application("Serial MultiService Example")
> multiService.setServiceParent(application)
>
>
> http://twistedmatrix.com/documents/9.0.0/api/twisted.application.service.Service.html


Many thanks!

I could solve the problem after asking for help, I've "attached" my 
serial protocol to the reactor,  I was confused because before that in 
my program there was no need for importing the reactor. Anyway, I will 
consider your code because it seems to fit better in my service than my 
solution.


From terry at jon.es  Tue Dec  8 23:09:35 2009
From: terry at jon.es (Terry Jones)
Date: Wed, 9 Dec 2009 05:09:35 +0100
Subject: [Twisted-Python] A resizable cooperator class for queuing and
	dispatching jobs
Message-ID: <19231.8959.296355.40332@jon.es>

I just wrote a fun class that lets you

   - submit jobs to be dispatched to a queue
   - manage how many tasks are in progress at once
   - dynamically adjust that number
   - shut down cleanly, including
   - recovering jobs that were queued but hadn't been dispatched

This uses a combination of a DeferredQueue, a task.Cooperator, and the
DeferredPool I posted on Monday. For now I named it ResizableDispatchQueue
(not a great name, suggestions welcome). You can pick it up from
http://pastebin.com/f7dc9320e

I can think of lots of uses. Here's a simple example.

You want to write a server with a web interface that allows people to enter
their phone number so you can send them an SMS. You anticipate lots of
people will use the service. But sending SMS messages is quite slow, and
the company that you ship those jobs off to is concerned that you'll
overrun their service (or maybe they have an API limit, etc). So you need
to queue up jobs locally and send them off at a certain rate. You'd like to
be able to adjust that rate up or down. You also want to be able to shut
your service down cleanly (i.e., not in the middle of a task), and when you
restart it you want to be able to re-queue the jobs that were queued last
time but which hadn't gone out.

For example, suppose your function that sends the SMS is called sendSMS and
that it takes a (number, message) tuple arg. Then:

    dispatcher = ResizableDispatchQueue(sendSMS)
    # Tell it to send at most 5 things at once.
    dispatcher.start(5)      # Same as dispatcher.width = 5

    # Later... send off some SMS messages.
    dispatcher.put((2127399921, 'Hello...'))
    dispatcher.put((5052929919, 'Test...'))
    
    # Later, bump up to 10 simultaneous jobs.
    dispatcher.width = 10

    # Oops, turns out we're sending too fast, turn it down a little.
    dispatcher.narrow(3)

    # Get a copy of the list of pending jobs.
    jobs = dispatcher.pending()

    # Arrange to increase the number of jobs in an hour's time.
    reactor.callLater(3600, dispatcher.setWidth, 20)

    # Time to shutdown. Wait for any tasks underway to complete, and save
    # the list of jobs not yet dispatched.

    def saveJobs(jobs):
        pickle.dump(jobs, ...)

    d = dispatcher.stop()
    d.addCallback(saveJobs)


On restart you just unpickle the old job list and pass its items to
dispatcher.put().

I have a small test suite that's a bit weird (it schedules various things
and tests how long the overall job takes and what's still pending when stop
is called). It could be much better, but it does at least illustrate that
the code seems to work. Let me know if you want it.

There's also the issue about what to do when the dispatch function hits an
error.  An option could be added to re-queue the job, but it's perhaps
better to let the dispatch function do that along with whatever else it
needs.

As usual, I'd be happy to hear comments and suggestions. I'll probably
adjust this so the DeferredQueue uses a priority queue.

Terry


From jml at mumak.net  Wed Dec  9 03:27:39 2009
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 9 Dec 2009 19:27:39 +1100
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
	<d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
	<E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>
Message-ID: <d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>

On Wed, Dec 9, 2009 at 2:42 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> On Dec 8, 2009, at 4:50 AM, Jonathan Lange wrote:
>
>> On Mon, Dec 7, 2009 at 10:35 AM, ?<exarkun at twistedmatrix.com> wrote:
>>> On 09:10 pm, jml at mumak.net wrote:
>>>> On Mon, Dec 7, 2009 at 6:29 AM, ?<exarkun at twistedmatrix.com> wrote:
>>>>> On 09:26 am, jml at mumak.net wrote:
>>>>>>
>>>>>> A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
>>>>>> and how they don't really depend on the rest of Twisted.
>
>>>> However, if I were the maintainer, I think that I would like Twisted
>>>> to depend on this code, dropping its own Deferred implementation.
>>>
>>> It would be pretty neat to be able to do that. ?I don't think it will happen
>>> unless someone is actively working towards it, though.
>
>> If there's in principal agreement, I can laconically work towards it.
>
> In (ahem) principle, I agree,

I can't believe I got that wrong. Sorry.

>but my agreement is contingent upon the theoretical existence of things like "a good package manager for Python" and "installation instructions on our website which clearly explain how to install dependencies in a context-sensitive manner" (i.e. depending on your platform).

I'm with you on the installation instructions. Why this should block
on a good package manager for Python?

> So, I would regard this as a long-term goal. ?Given the pace of our normal, non-"laconic" work, though, I think there's little risk it will be completed in the near term ;-).

I completely screwed up with the advanced English usage then. :(

jml


From exarkun at twistedmatrix.com  Wed Dec  9 10:07:37 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 09 Dec 2009 15:07:37 -0000
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
	<d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
	<E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>
	<d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
Message-ID: <20091209150737.2549.1924060212.divmod.xquotient.528@localhost.localdomain>

On 08:27 am, jml at mumak.net wrote:
>On Wed, Dec 9, 2009 at 2:42 AM, Glyph Lefkowitz 
><glyph at twistedmatrix.com> wrote:
>>
>>On Dec 8, 2009, at 4:50 AM, Jonathan Lange wrote:
>>>On Mon, Dec 7, 2009 at 10:35 AM, ?<exarkun at twistedmatrix.com> wrote:
>>>>On 09:10 pm, jml at mumak.net wrote:
>>>>>On Mon, Dec 7, 2009 at 6:29 AM, ?<exarkun at twistedmatrix.com> wrote:
>>>>>>On 09:26 am, jml at mumak.net wrote:
>>>>>>>
>>>>>>>A while ago at EuroPython, Mikeal Rogers and I talked about 
>>>>>>>Deferreds
>>>>>>>and how they don't really depend on the rest of Twisted.
>>
>>>>>However, if I were the maintainer, I think that I would like 
>>>>>Twisted
>>>>>to depend on this code, dropping its own Deferred implementation.
>>>>
>>>>It would be pretty neat to be able to do that. ?I don't think it 
>>>>will happen
>>>>unless someone is actively working towards it, though.
>>
>>>If there's in principal agreement, I can laconically work towards it.
>>
>>In (ahem) principle, I agree,
>
>I can't believe I got that wrong. Sorry.
>>but my agreement is contingent upon the theoretical existence of 
>>things like "a good package manager for Python" and "installation 
>>instructions on our website which clearly explain how to install 
>>dependencies in a context-sensitive manner" (i.e. depending on your 
>>platform).
>
>I'm with you on the installation instructions. Why this should block
>on a good package manager for Python?

Probably it shouldn't, if we ever actually want it to happen.  We can 
distribute the top-level deferred package with Twisted when we actually 
get to that point.

Jean-Paul


From glyph at twistedmatrix.com  Wed Dec  9 10:54:15 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 9 Dec 2009 10:54:15 -0500
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
	<d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
	<E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>
	<d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
Message-ID: <1B21C188-BB55-4B6A-914B-4E2315335CCB@twistedmatrix.com>


On Dec 9, 2009, at 3:27 AM, Jonathan Lange wrote:

> On Wed, Dec 9, 2009 at 2:42 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> but my agreement is contingent upon the theoretical existence of things like "a good package manager for Python" and "installation instructions on our website which clearly explain how to install dependencies in a context-sensitive manner" (i.e. depending on your platform).
> 
> I'm with you on the installation instructions. Why this should block
> on a good package manager for Python?

Perhaps this requirement is over-broad.  My concern is the users who already complain "why do I need zope" when installing Twisted, and then can't seem to get ZI installed even when the distinction is explained.  If, as Jean-Paul suggests, the "deferred" package were included with the Twisted release *and* silently importable / installable, this concern would be addressed.

However, there are other issues: the deferred package would need to be governed by a compatibility policy as strict as Twisted's (or stricter, actually, given its rather central nature).  I wouldn't feel comfortable without an equally strenuous review process.  Its test suite would have to be run on our buildbots, or on a more comprehensive fleet of its own.  It would need to come packaged with its own documentation, which implies that something like Kevin Horn's proposed sphinx migration would be completed first.  And we'd need to migrate all the open tickets affecting Deferred and Failure to a new tracker.

It seems like this annoying procedural stuff could be deferred (ha ha) until after figuring out the technical problems (for example: coming up with a system of hooks so that it can be integrated with trial without directly depending on Twisted logging) if the work to modify the code itself were done in a Twisted subversion branch first; that way we could still schedule buildbot builds and close existing tickets against Deferred without blocking on schlepping a bunch of infrastructure into a new repository.  If Mikeal needs commit access in order to help I'm sure that could be arranged.

Sorry if this seems like a lot of stuff.  I've tried to be as comprehensive as possible in this message so as not to continue to throw up new, surprising roadblocks as the work goes along.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091209/575835bd/attachment.htm 

From glyph at twistedmatrix.com  Wed Dec  9 11:14:30 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 9 Dec 2009 11:14:30 -0500
Subject: [Twisted-Python] A resizable cooperator class for queuing and
	dispatching jobs
In-Reply-To: <19231.8959.296355.40332@jon.es>
References: <19231.8959.296355.40332@jon.es>
Message-ID: <B0404436-C752-450D-A5BC-3CBAF8CD84F3@twistedmatrix.com>


On Dec 8, 2009, at 11:09 PM, Terry Jones wrote:

> I just wrote a fun class that lets you
> 
>   - submit jobs to be dispatched to a queue
>   - manage how many tasks are in progress at once
>   - dynamically adjust that number
>   - shut down cleanly, including
>   - recovering jobs that were queued but hadn't been dispatched

That does sound like fun!

>    # Later... send off some SMS messages.
>    dispatcher.put((2127399921, 'Hello...'))
>    dispatcher.put((5052929919, 'Test...'))

Not that this is really germane to the class in question, but, if you're going to be sending SMS messages, you should really represent the numbers as strings (well, actually, structured objects are always better, so PhoneNumber.fromString) because international phone prefixes sometimes - actually I think it would be more accurate to say "usually" - start with a zero.

>    # Later, bump up to 10 simultaneous jobs.
>    dispatcher.width = 10
> 
>    # Oops, turns out we're sending too fast, turn it down a little.
>    dispatcher.narrow(3)

This seems somewhat asymmetric.  Why are there 'widen' and 'narrow' methods if I can just set the 'width' attribute directly?  I could always just do '.width +=' and '.width -=' if I have a relative value.



From jared.gisin at isilon.com  Wed Dec  9 11:52:33 2009
From: jared.gisin at isilon.com (Jared Gisin)
Date: Wed, 9 Dec 2009 08:52:33 -0800
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web HTTP
	implementation
Message-ID: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>

I'm writing a HTTP server that exposes various resources as an API.
Unless I'm missing something, twisted's HTTP protocol implementation is
in twisted.web.http. 

 

The problem with this package is that it's inexplicably wrapped up in
HTML. HTML has nothing to do with HTTP as a whole. Sure, HTML is often
what HTTP requests return, but there's no reason why it should nor is
there any RFC that says it should. HTTP request can return anything.

 

The software I'm writing is a programmatic interface. One never uses a
web browser, so things such as displaying tracebacks
(twisted.web.util.formatFailure) in HTML format is completely wrong.
When implementing HTTP, why assume the client always wants HTML. It seem
completely wrong from these modules and libraries to be so full of HTML
output. HTML output should be provided as a separate config or option
for twisted.web. In this case, why not just dump the traceback directly
to the HTTP entity-body? As a consumer of twisted.web, I  should not
have to battle with the hard-coded HTML output of this library. If I
want the library to dump things in HTML output, I should have an option
to tell it to do that (and I should be able to better customize the
HTML), but I should not get HTML by default. 

 

Jared

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091209/2a0df985/attachment.htm 

From exarkun at twistedmatrix.com  Wed Dec  9 12:26:35 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 09 Dec 2009 17:26:35 -0000
Subject: [Twisted-Python] Twistd logging
In-Reply-To: <9d748c780912081304m5fbf49ffk37a7e03ca7583819@mail.gmail.com>
References: <9d748c780912081304m5fbf49ffk37a7e03ca7583819@mail.gmail.com>
Message-ID: <20091209172635.2549.110983264.divmod.xquotient.554@localhost.localdomain>

On 8 Dec, 09:04 pm, landreville at deadtreepages.com wrote:
>Is there a way I can customize the format of log file?
>I want to add more information to each line (about the xmlrpc method 
>being
>called), but I can't find where these lines get written out. I know I 
>can
>print a message to the log in my _getFunction, but I would prefer to 
>have
>one line per request.

Are you talking about the CLF request log or the main log file (normally 
called "twistd.log")?

The former can be controlled by overriding the "log" method of Site. 
The latter is controlled by the general log observer(s) which is 
installed.  You can read about customizing the log observer using .tac 
files in the online documentation:

  http://twistedmatrix.com/documents/current/core/howto/application.html

Jean-Paul


From foom at fuhm.net  Wed Dec  9 12:34:11 2009
From: foom at fuhm.net (James Y Knight)
Date: Wed, 9 Dec 2009 12:34:11 -0500
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web HTTP
	implementation
In-Reply-To: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
Message-ID: <2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net>

On Dec 9, 2009, at 11:52 AM, Jared Gisin wrote:
> I?m writing a HTTP server that exposes various resources as an API. Unless I?m missing something, twisted?s HTTP protocol implementation is in twisted.web.http.
>  
> The problem with this package is that it?s inexplicably wrapped up in HTML. HTML has nothing to do with HTTP as a whole. Sure, HTML is often what HTTP requests return, but there?s no reason why it should nor is there any RFC that says it should. HTTP request can return anything.
> 
> The software I?m writing is a programmatic interface. One never uses a web browser, so things such as displaying tracebacks (twisted.web.util.formatFailure) in HTML format is completely wrong. When implementing HTTP, why assume the client always wants HTML. It seem completely wrong from these modules and libraries to be so full of HTML output. HTML output should be provided as a separate config or option for twisted.web. In this case, why not just dump the traceback directly to the HTTP entity-body? As a consumer of twisted.web, I  should not have to battle with the hard-coded HTML output of this library. If I want the library to dump things in HTML output, I should have an option to tell it to do that (and I should be able to better customize the HTML), but I should not get HTML by default.

Customizability is great, and certainly error pages should really not be hard-coded at all. However, the default of returning HTML descriptions of errors is a good default, and should remain thus. There's usually two cases of interest:

1) A program is responding to the error. In that case, it will use the HTTP result code, and not care what the content is at all.
2) A human is reading the error message. At least 99% of the time, this will be happening through a web browser. They understand HTML. 

I'd expect your program to be in case #1, although I don't know if you have some need to parse out the particular tracebacks for some reason?

James

From exarkun at twistedmatrix.com  Wed Dec  9 12:34:34 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 09 Dec 2009 17:34:34 -0000
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web
	HTTP	implementation
In-Reply-To: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
Message-ID: <20091209173434.2549.1230482094.divmod.xquotient.568@localhost.localdomain>

On 04:52 pm, jared.gisin at isilon.com wrote:
>I'm writing a HTTP server that exposes various resources as an API.
>Unless I'm missing something, twisted's HTTP protocol implementation is
>in twisted.web.http.
>
>The problem with this package is that it's inexplicably wrapped up in
>HTML. HTML has nothing to do with HTTP as a whole. Sure, HTML is often
>what HTTP requests return, but there's no reason why it should nor is
>there any RFC that says it should. HTTP request can return anything.

It's not inextricable.  A few relatively simple patches would probably 
be sufficient to extricate the HTML from the HTTP. :)

The reason for these things being mixed up is that it made sense at the 
time and provided reasonable behavior for some actual use-cases.  That 
doesn't mean the behavior is right, but hopefully it should be clear why 
it was implemented.  The reason it hasn't been changed is only that no 
one has been bothered enough by it has come along to change it.
>The software I'm writing is a programmatic interface. One never uses a
>web browser, so things such as displaying tracebacks
>(twisted.web.util.formatFailure) in HTML format is completely wrong.
>When implementing HTTP, why assume the client always wants HTML. It 
>seem
>completely wrong from these modules and libraries to be so full of HTML
>output. HTML output should be provided as a separate config or option
>for twisted.web. In this case, why not just dump the traceback directly
>to the HTTP entity-body? As a consumer of twisted.web, I  should not
>have to battle with the hard-coded HTML output of this library. If I
>want the library to dump things in HTML output, I should have an option
>to tell it to do that (and I should be able to better customize the
>HTML), but I should not get HTML by default.

I agree.  The first step to take is probably to identify the precise 
places in the code where HTML is being generated and emitted (this may 
just be Request.processingFailed, but I haven't looked around for others 
lately) where one might not want to deal with HTML.  The next step would 
be to file a ticket enumerating these.  After that, a patch which allows 
these behaviors to be overridden can be submitted, reviewed(, revised, 
submitted, ...), and applied.

This will be valuable even for people who like HTML, since it will let 
them customize the HTML to suit their preferences.

Jean-Paul


From landreville at deadtreepages.com  Wed Dec  9 13:14:43 2009
From: landreville at deadtreepages.com (Landreville)
Date: Wed, 9 Dec 2009 13:14:43 -0500
Subject: [Twisted-Python] Twistd logging
In-Reply-To: <20091209172635.2549.110983264.divmod.xquotient.554@localhost.localdomain>
References: <9d748c780912081304m5fbf49ffk37a7e03ca7583819@mail.gmail.com>
	<20091209172635.2549.110983264.divmod.xquotient.554@localhost.localdomain>
Message-ID: <9d748c780912091014p547542d4y29b3f62532702e2a@mail.gmail.com>

On Wed, Dec 9, 2009 at 12:26 PM, <exarkun at twistedmatrix.com> wrote:

> On 8 Dec, 09:04 pm, landreville at deadtreepages.com wrote:
> >Is there a way I can customize the format of log file?
> >I want to add more information to each line (about the xmlrpc method
> >being
> >called), but I can't find where these lines get written out. I know I
> >can
> >print a message to the log in my _getFunction, but I would prefer to
> >have
> >one line per request.
>
> Are you talking about the CLF request log or the main log file (normally
> called "twistd.log")?
>
> The former can be controlled by overriding the "log" method of Site.
> The latter is controlled by the general log observer(s) which is
> installed.  You can read about customizing the log observer using .tac
> files in the online documentation:
>
>  http://twistedmatrix.com/documents/current/core/howto/application.html
>
>
I'm talking about the main log file (twistd.log) that is created. I want to
customize the lines that are written to it, the document only tells me how
to use a different observer, not how to format the lines that are being
output by twistd.

I would like to change the output from:
2009-12-09 12:59:01-0500 [-] 127.0.0.1 - - [09/Dec/2009:17:59:01 +0000]
"POST /XMLRPC HTTP/1.0" 200 647 "-" "xmlrpclib.py/1.0.1 (by
www.pythonware.com)
to include "xmlrpc method: system.listMethods" at the end (or something
similar to include the methd name".

I see in the observers an eventDict is passed in to be output in the log,
but where does that eventDict get created/passed in?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091209/901b46a8/attachment.htm 

From termim at gmail.com  Wed Dec  9 16:01:42 2009
From: termim at gmail.com (Mikhail Terekhov)
Date: Wed, 9 Dec 2009 16:01:42 -0500
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
	<d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
	<E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>
	<d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
Message-ID: <12aaa0810912091301q7c0869f8w9b51a0b352c60d3f@mail.gmail.com>

On Wed, Dec 9, 2009 at 3:27 AM, Jonathan Lange <jml at mumak.net> wrote:
...
>
> I completely screwed up with the advanced English usage then. :(
>

IMHO it is very simple: extracting Deferreds out of Twisted would benefit  (if
at all) only people who do not use or develop Twisted. From the packaging
point of view recent integration of the half a dozen Twisted related
packages into
one package was a big win for both users and maintainers. Extracting Deferreds
would be a step backwards. As it was already mentioned in this thread it would
bring an additional headache of maintaining versions compatibility
etc. to Twisted
developers. For Twisted users (especially those who uses their system's package
managers) it would mean to install bunch of packages instead of only
one again ...

Let's try to estimate the practical benefits such separation would bring:

 - ability to write 'from deferreds import Deferred' instead of
    'from twisted.internet.defer import Deferred' - IMHO is a very minor one.

 - ability to use 'python setup.py install'  in ~/Deferreds-1.2.3 instead of
   'python setup.py install' in ~/twisted-9.0.0 or 'apt-get deffereds'
instead of
   'apt-get twisted' does not count as a big one either.

 - ability to save couple of megabytes of disk space during
installation - these days
    it is almost a joke :)

 - ability to save some when distributing your product with py2exe and
such - that is
   something. But this can be solved without separation - just
eliminate dependencies
   of the twisted.internet.defer from the rest of the system and write
smart enough setup.py
   (I believe patches, examples and docs are welcome as usual)

Did I miss something?

IMHO from the practical point of view the only case when separation of
Deferreds would
benefit Twisted community as a whole would be inclusion of it into the
standard library,
but this is not going to happen soon ...

Bottom line - I wouldn't blame Twisted developers for the lack of
enthusiasm in this case.

Regards,
-- 
Mikhail Terekhov


From valeriy.zamarayev at gmail.com  Wed Dec  9 16:18:56 2009
From: valeriy.zamarayev at gmail.com (Valeriy Zamarayev)
Date: Wed, 9 Dec 2009 23:18:56 +0200
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web HTTP
	implementation
In-Reply-To: <2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
	<2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net>
Message-ID: <97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>


On Dec 9, 2009, at 19:34, James Y Knight wrote:
> On Dec 9, 2009, at 11:52 AM, Jared Gisin wrote:
>> I?m writing a HTTP server that exposes various resources as an API.  
>> Unless I?m missing something, twisted?s HTTP protocol  
>> implementation is in twisted.web.http.
>>
>> The problem with this package is that it?s inexplicably wrapped up  
>> in HTML. HTML has nothing to do with HTTP as a whole. Sure, HTML is  
>> often what HTTP requests return, but there?s no reason why it  
>> should nor is there any RFC that says it should. HTTP request can  
>> return anything.
>>
>> The software I?m writing is a programmatic interface. One never  
>> uses a web browser, so things such as displaying tracebacks  
>> (twisted.web.util.formatFailure) in HTML format is completely  
>> wrong. When implementing HTTP, why assume the client always wants  
>> HTML. It seem completely wrong from these modules and libraries to  
>> be so full of HTML output. HTML output should be provided as a  
>> separate config or option for twisted.web. In this case, why not  
>> just dump the traceback directly to the HTTP entity-body? As a  
>> consumer of twisted.web, I  should not have to battle with the hard- 
>> coded HTML output of this library. If I want the library to dump  
>> things in HTML output, I should have an option to tell it to do  
>> that (and I should be able to better customize the HTML), but I  
>> should not get HTML by default.
>
> Customizability is great, and certainly error pages should really  
> not be hard-coded at all. However, the default of returning HTML  
> descriptions of errors is a good default, and should remain thus.  
> There's usually two cases of interest:
>
> 1) A program is responding to the error. In that case, it will use  
> the HTTP result code, and not care what the content is at all.
> 2) A human is reading the error message. At least 99% of the time,  
> this will be happening through a web browser. They understand HTML.
>
> I'd expect your program to be in case #1, although I don't know if  
> you have some need to parse out the particular tracebacks for some  
> reason?


Hi All,

I want to second Jared's point. In my case, the responses from web  
servers,
including the body, often end up in log files. HTML looks pretty ugly  
there.
Though this is a minor point for me in the otherwise great Twisted  
software!

Regards,
Valeriy



From foom at fuhm.net  Wed Dec  9 16:37:34 2009
From: foom at fuhm.net (James Y Knight)
Date: Wed, 9 Dec 2009 16:37:34 -0500
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web HTTP
	implementation
In-Reply-To: <97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
	<2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net>
	<97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
Message-ID: <8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>


On Dec 9, 2009, at 4:18 PM, Valeriy Zamarayev wrote:

> I want to second Jared's point. In my case, the responses from web servers, including the body, often end up in log files. HTML looks pretty ugly there. Though this is a minor point for me in the otherwise great Twisted software!

Essentially every web server on the internet responds with HTML to error conditions, so you should probably modify your client.

As I said, I'm all for customizability, but returning HTML bodies for error pages is unambiguously the correct default.

James

From terry at jon.es  Wed Dec  9 16:44:58 2009
From: terry at jon.es (Terry Jones)
Date: Wed, 9 Dec 2009 22:44:58 +0100
Subject: [Twisted-Python] A resizable cooperator class for queuing
	and	dispatching jobs
In-Reply-To: Your message at 11:14:30 on Wednesday, 9 December 2009
References: <19231.8959.296355.40332@jon.es>
	<B0404436-C752-450D-A5BC-3CBAF8CD84F3@twistedmatrix.com>
Message-ID: <19232.6746.831232.490721@jon.es>

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
Glyph> On Dec 8, 2009, at 11:09 PM, Terry Jones wrote:
>> I just wrote a fun class that lets you
>> 
>> - submit jobs to be dispatched to a queue
>> - manage how many tasks are in progress at once
>> - dynamically adjust that number
>> - shut down cleanly, including
>> - recovering jobs that were queued but hadn't been dispatched

Glyph> That does sound like fun!

It *is* fun.

>> # Later... send off some SMS messages.
>> dispatcher.put((2127399921, 'Hello...'))
>> dispatcher.put((5052929919, 'Test...'))

Glyph> Not that this is really germane to the class in question, but, if
Glyph> you're going to be sending SMS messages

That was just an example. I even thought about using strings, but kept it
looking simpler.

>> # Later, bump up to 10 simultaneous jobs.
>> dispatcher.width = 10
>> 
>> # Oops, turns out we're sending too fast, turn it down a little.
>> dispatcher.narrow(3)

Glyph> This seems somewhat asymmetric.  Why are there 'widen' and 'narrow'
Glyph> methods if I can just set the 'width' attribute directly?  I could
Glyph> always just do '.width +=' and '.width -=' if I have a relative
Glyph> value.

Agreed. I started out just implementing widen and narrow, and they (barely)
survived when I later added the width property. I had been thinking it
would be good to just be able to change the width up or down a notch, but
then when I went to write my (a posteriori) tests, I realized that wasn't
really so convenient. So I think you're right they could be simplified
away.

But the code Glyph, the code? Or have I graduated to the point where I no
longer need a laconic garotting?  I think the combo of a DeferredQueue and
a task.Cooperator is pretty deadly.

Terry


From konrads at smelkovs.com  Wed Dec  9 16:54:38 2009
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Wed, 9 Dec 2009 23:54:38 +0200
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web HTTP
	implementation
In-Reply-To: <97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
	<2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net>
	<97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
Message-ID: <d79700b90912091354j7b5663a3od6a1f79aeb0cc77@mail.gmail.com>

I think that the days when one line logger ala syslog is useful are
nearing its end. Html in logs looks only ugly if log consumer makes
them so.

2009/12/9, Valeriy Zamarayev <valeriy.zamarayev at gmail.com>:
>
> On Dec 9, 2009, at 19:34, James Y Knight wrote:
>> On Dec 9, 2009, at 11:52 AM, Jared Gisin wrote:
>>> I?m writing a HTTP server that exposes various resources as an API.
>>> Unless I?m missing something, twisted?s HTTP protocol
>>> implementation is in twisted.web.http.
>>>
>>> The problem with this package is that it?s inexplicably wrapped up
>>> in HTML. HTML has nothing to do with HTTP as a whole. Sure, HTML is
>>> often what HTTP requests return, but there?s no reason why it
>>> should nor is there any RFC that says it should. HTTP request can
>>> return anything.
>>>
>>> The software I?m writing is a programmatic interface. One never
>>> uses a web browser, so things such as displaying tracebacks
>>> (twisted.web.util.formatFailure) in HTML format is completely
>>> wrong. When implementing HTTP, why assume the client always wants
>>> HTML. It seem completely wrong from these modules and libraries to
>>> be so full of HTML output. HTML output should be provided as a
>>> separate config or option for twisted.web. In this case, why not
>>> just dump the traceback directly to the HTTP entity-body? As a
>>> consumer of twisted.web, I  should not have to battle with the hard-
>>> coded HTML output of this library. If I want the library to dump
>>> things in HTML output, I should have an option to tell it to do
>>> that (and I should be able to better customize the HTML), but I
>>> should not get HTML by default.
>>
>> Customizability is great, and certainly error pages should really
>> not be hard-coded at all. However, the default of returning HTML
>> descriptions of errors is a good default, and should remain thus.
>> There's usually two cases of interest:
>>
>> 1) A program is responding to the error. In that case, it will use
>> the HTTP result code, and not care what the content is at all.
>> 2) A human is reading the error message. At least 99% of the time,
>> this will be happening through a web browser. They understand HTML.
>>
>> I'd expect your program to be in case #1, although I don't know if
>> you have some need to parse out the particular tracebacks for some
>> reason?
>
>
> Hi All,
>
> I want to second Jared's point. In my case, the responses from web
> servers,
> including the body, often end up in log files. HTML looks pretty ugly
> there.
> Though this is a minor point for me in the otherwise great Twisted
> software!
>
> Regards,
> Valeriy
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-- 
Nos?t?ts no manas mobil?s ier?ces

--
Konrads Smelkovs
Applied IT sorcery.


From terry at jon.es  Wed Dec  9 17:08:00 2009
From: terry at jon.es (Terry Jones)
Date: Wed, 9 Dec 2009 23:08:00 +0100
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web
	HTTP	implementation
In-Reply-To: Your message at 16:37:34 on Wednesday, 9 December 2009
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
	<2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net>
	<97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
	<8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>
Message-ID: <19232.8128.416925.106975@jon.es>

>>>>> "James" == James Y Knight <foom at fuhm.net> writes:
James> Essentially every web server on the internet responds with HTML to
James> error conditions, so you should probably modify your client.

But there are plenty of clients that can't or don't want to or shouldn't
have to handle HTML.

James> As I said, I'm all for customizability, but returning HTML bodies
James> for error pages is unambiguously the correct default.

I agree.

This is, I think, a good example of where respecting the Accept header
makes sense. If no Accept header is sent, it's the same as sending */*, in
which case t.web could do as it currently does and send text/html. But if
there is an Accept header you can pass it and the range of response types
you have to a library like http://code.google.com/p/mimeparse/ and it will
tell you what to send back. Although making an XML and a JSON response
available just in case feels a bit arbitrary, it's no more arbitrary than
an HTML response that was designed to look good to a human with a browser.
They reply contents just need to be documented.

We got this complaint with FluidDB (using t.web), and you also see it
floated in public from time to time - I saw someone complaining on Twitter
about it just the other day.

Another way to mitigate this, at least in the context of errors is to put
more information into returned headers. We added an X-FluidDB-Error-Class
and X-FluidDB-Request-Id that don't require anyone to dig through a body in
some perhaps unpredictable or unhandled format. In simple cases you can
then just omit a payload and a Content-Type altogether.

Terry


From ltaylor.volks at gmail.com  Wed Dec  9 17:34:24 2009
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Wed, 09 Dec 2009 15:34:24 -0700
Subject: [Twisted-Python] Twistd logging
In-Reply-To: <9d748c780912091014p547542d4y29b3f62532702e2a@mail.gmail.com>
References: <9d748c780912081304m5fbf49ffk37a7e03ca7583819@mail.gmail.com>	<20091209172635.2549.110983264.divmod.xquotient.554@localhost.localdomain>
	<9d748c780912091014p547542d4y29b3f62532702e2a@mail.gmail.com>
Message-ID: <4B2025F0.2030106@gmail.com>

On 12/9/09 11:14 AM, Landreville wrote:
> 
> 
> On Wed, Dec 9, 2009 at 12:26 PM, <exarkun at twistedmatrix.com
> <mailto:exarkun at twistedmatrix.com>> wrote:
> 
>     On 8 Dec, 09:04 pm, landreville at deadtreepages.com
>     <mailto:landreville at deadtreepages.com> wrote:
>     >Is there a way I can customize the format of log file?
>     >I want to add more information to each line (about the xmlrpc method
>     >being
>     >called), but I can't find where these lines get written out. I know I
>     >can
>     >print a message to the log in my _getFunction, but I would prefer to
>     >have
>     >one line per request.
> 
>     Are you talking about the CLF request log or the main log file (normally
>     called "twistd.log")?
> 
>     The former can be controlled by overriding the "log" method of Site.
>     The latter is controlled by the general log observer(s) which is
>     installed.  You can read about customizing the log observer using .tac
>     files in the online documentation:
> 
>      http://twistedmatrix.com/documents/current/core/howto/application.html
> 
> 
> I'm talking about the main log file (twistd.log) that is created. I want
> to customize the lines that are written to it, the document only tells
> me how to use a different observer, not how to format the lines that are
> being output by twistd.
> 
> I would like to change the output from:
> 2009-12-09 12:59:01-0500 [-] 127.0.0.1 - - [09/Dec/2009:17:59:01 +0000]
> "POST /XMLRPC HTTP/1.0" 200 647 "-" "xmlrpclib.py/1.0.1
> <http://xmlrpclib.py/1.0.1> (by www.pythonware.com
> <http://www.pythonware.com>)
> to include "xmlrpc method: system.listMethods" at the end (or something
> similar to include the methd name".
> 
> I see in the observers an eventDict is passed in to be output in the
> log, but where does that eventDict get created/passed in?
> 

The output you describe is the CLF request log generated by the Site
instance (via twisted.web.http.HTTPFactory.log). You can do as suggested
and override the "log" method on your Site instance. This will give you
access to the request and allow you to extract the xmlrpc method.

Something like...

class Site(server.Site):
    def log(self, request):
        request.content.seek(0,0)
        args, functionPath = xmlrpclib.loads(request.content.read())

	# Keep the CLF line
	server.Site.log(self, request)

	# Add your own info on another line
        if hasattr(self, "logFile"):
            self.logFile.write('xmlrpc method: %s\n' % (functionPath,))

You did say you would prefer to have one line per request, so you might
want to just recreate the log method from HTTPFactory here and make
appropriate modifications (calculating request date/time and adding your
xmlrpc info).





From glyph at twistedmatrix.com  Wed Dec  9 19:12:24 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 9 Dec 2009 19:12:24 -0500
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <12aaa0810912091301q7c0869f8w9b51a0b352c60d3f@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
	<d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
	<E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>
	<d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
	<12aaa0810912091301q7c0869f8w9b51a0b352c60d3f@mail.gmail.com>
Message-ID: <397DFDD4-8FAD-48EC-9C05-D1FF90EE8A6E@twistedmatrix.com>


On Dec 9, 2009, at 4:01 PM, Mikhail Terekhov wrote:

> On Wed, Dec 9, 2009 at 3:27 AM, Jonathan Lange <jml at mumak.net> wrote:
> ...
>> 
>> I completely screwed up with the advanced English usage then. :(

> IMHO it is very simple: extracting Deferreds out of Twisted would benefit  (if
> at all) only people who do not use or develop Twisted. From the packaging
> point of view recent integration of the half a dozen Twisted related
> packages into one package was a big win for both users and maintainers. Extracting Deferreds would be a step backwards.

I can certainly understand (and sympathize with) this point of view, but...

> Did I miss something?

Not quite.  You brought it up right here:

> IMHO from the practical point of view the only case when separation of Deferreds would benefit Twisted community as a whole would be inclusion of it into the standard library,
> but this is not going to happen soon ...

If nobody ever takes Deferred and puts it outside of Twisted, then this will happen "never" instead of "not soon".  Eventually, somebody does need to bite the bullet and clean up Deferred for submission into the standard library.  The work that jml is doing here will help that, and so it's a worthwhile goal, even if it eventually brings some pain along with it.

When Deferred is in the standard library, it will enable communication between code written for different asynchronous backends, which is not currently possible.



From jared.gisin at isilon.com  Wed Dec  9 20:10:56 2009
From: jared.gisin at isilon.com (Jared Gisin)
Date: Wed, 9 Dec 2009 17:10:56 -0800
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web
	HTTPimplementation
In-Reply-To: <8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com><2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net><97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
	<8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>
Message-ID: <0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>

It's unambiguously the correct default if you incorrectly assume that
you're always dealing with a web browser client, which is an invalid
assumption.

The bottom line is that twisted.web contains the only implement of HTTP
in twisted which unfortunately is muddled in HTML. 

Get the HTML out of the HTTP protocol implementation. It flat out does
not belong there.

Twisted should provide a clean, clear interface for working with HTTP.
Call it twisted.protocols.http, then twisted.web with all of it's desire
to act like apache and serve up static content and run CGI's and speak
the default language of HTML can be built upon twisted.protocols.http
thus leaving me with a pure HTTP protocol implementation I can do other
this with as per RFC 2616 that have nothing to do with browsers or HTML.

-Jared

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of James Y
Knight
Sent: Wednesday, December 09, 2009 1:38 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] HTML shoudl not be baked into twisted.web
HTTPimplementation


On Dec 9, 2009, at 4:18 PM, Valeriy Zamarayev wrote:

> I want to second Jared's point. In my case, the responses from web
servers, including the body, often end up in log files. HTML looks
pretty ugly there. Though this is a minor point for me in the otherwise
great Twisted software!

Essentially every web server on the internet responds with HTML to error
conditions, so you should probably modify your client.

As I said, I'm all for customizability, but returning HTML bodies for
error pages is unambiguously the correct default.

James
_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From ssteinerx at gmail.com  Wed Dec  9 20:24:31 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Wed, 9 Dec 2009 20:24:31 -0500
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web
	HTTPimplementation
In-Reply-To: <0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com><2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net><97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
	<8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>
	<0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
Message-ID: <DFDE643C-55DE-4B59-A3A1-1DDD60337361@gmail.com>

On Dec 9, 2009, at 8:10 PM, Jared Gisin wrote:

> It's unambiguously the correct default if you incorrectly assume that
> you're always dealing with a web browser client, which is an invalid
> assumption.
> 
> The bottom line is that twisted.web contains the only implement of HTTP
> in twisted which unfortunately is muddled in HTML. 
> 
> Get the HTML out of the HTTP protocol implementation. It flat out does
> not belong there.

Wow, now you're not just complaining, but you're bossing people around, too?

Awesome.

I'm sure that will get you far around here...

S



From exarkun at twistedmatrix.com  Wed Dec  9 20:30:13 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 10 Dec 2009 01:30:13 -0000
Subject: [Twisted-Python] Deferred on PyPI
Message-ID: <20091210013013.2549.23931067.divmod.xquotient.593@localhost.localdomain>

On 12:12 am, glyph at twistedmatrix.com wrote:
>
>When Deferred is in the standard library, it will enable communication 
>between code written for different asynchronous backends, which is not 
>currently possible.

Let's be careful how we talk about Deferred, particularly when involving 
the standard library.  Communication is currently possible, but involves 
using whatever interface each different system uses.  Deferred is, as 
always, about providing a uniform interface.

Jean-Paul


From exarkun at twistedmatrix.com  Wed Dec  9 21:05:58 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 10 Dec 2009 02:05:58 -0000
Subject: [Twisted-Python] HTML shoudl not be baked into
	twisted.web	HTTPimplementation
In-Reply-To: <0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com><2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net><97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
	<8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>
	<0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
Message-ID: <20091210020558.2549.326143253.divmod.xquotient.619@localhost.localdomain>

On 01:10 am, jared.gisin at isilon.com wrote:
>It's unambiguously the correct default if you incorrectly assume that
>you're always dealing with a web browser client, which is an invalid
>assumption.

You've said that the current behavior is wrong, and you're saying that 
it's wrong to preserve the current behavior as the default but to allow 
it to be overridden.  The only suggestion for new behavior that you've 
made, I think, is that the traceback should be text/plain instead of 
text/html.  Is that what you're advocating?
>The bottom line is that twisted.web contains the only implement of HTTP
>in twisted which unfortunately is muddled in HTML.

You keep saying things like this, but I think you're blowing the issue 
far out of proportion.  As far as I can tell, there is one place in 
Twisted Web where HTML will be output when the application doesn't 
explicitly request it.  I don't think that's "muddled" or 
"inextricable".  It's simple to address; probably it could be fixed with 
not much more time than has been spent writing messages in this thread.
>Get the HTML out of the HTTP protocol implementation. It flat out does
>not belong there.
>
>Twisted should provide a clean, clear interface for working with HTTP.
>Call it twisted.protocols.http, then twisted.web with all of it's 
>desire
>to act like apache and serve up static content and run CGI's and speak
>the default language of HTML can be built upon twisted.protocols.http
>thus leaving me with a pure HTTP protocol implementation I can do other
>this with as per RFC 2616 that have nothing to do with browsers or 
>HTML.

Please, file a ticket and attach a patch.  Take a look at the 
TwistedDevelopment and ReviewProcess pages on the wiki.  Someone will 
take a look, we can have some discussion about the specifics of the 
implementation, and more likely than not, the issue can be resolved to 
everyone's satisfaction.

Thanks!

Jean-Paul


From johann.borck at densedata.com  Wed Dec  9 22:40:39 2009
From: johann.borck at densedata.com (Johann Borck)
Date: Thu, 10 Dec 2009 04:40:39 +0100
Subject: [Twisted-Python] HTML shoudl not be baked into
	twisted.web	HTTPimplementation
In-Reply-To: <0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com><2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net><97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>	<8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>
	<0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
Message-ID: <4B206DB7.8080800@densedata.com>

Jared Gisin wrote:
> It's unambiguously the correct default if you incorrectly assume that
> you're always dealing with a web browser client, which is an invalid
> assumption.
>
>   
It's not always - it is almost always, a textbook example for the 
applicability of a sensible default. 
> The bottom line is that twisted.web contains the only implement of HTTP
> in twisted which unfortunately is muddled in HTML. 
> [...]
>   
> Get the HTML out of the HTTP protocol implementation. It flat out does
> not belong there.
>
>   
Indeed a philosophical question, is it possible to get the nonexistent 
out of a piece of code? Nonexistent understanding is a strong candidate, 
as it would appear.
> Twisted should provide a clean, clear interface for working with HTTP.
>   
Yes. So nice it does, isn't it?
Johann



From dave at krondo.com  Wed Dec  9 22:59:30 2009
From: dave at krondo.com (Dave Peticolas)
Date: Wed, 09 Dec 2009 19:59:30 -0800
Subject: [Twisted-Python] A resizable cooperator class for queuing and
 dispatching jobs
In-Reply-To: <19231.8959.296355.40332@jon.es>
References: <19231.8959.296355.40332@jon.es>
Message-ID: <4B207222.6070008@krondo.com>

Terry Jones wrote:
> I just wrote a fun class that lets you
> 
>    - submit jobs to be dispatched to a queue
>    - manage how many tasks are in progress at once
>    - dynamically adjust that number
>    - shut down cleanly, including
>    - recovering jobs that were queued but hadn't been dispatched
> 
> This uses a combination of a DeferredQueue, a task.Cooperator, and the
> DeferredPool I posted on Monday. For now I named it ResizableDispatchQueue
> (not a great name, suggestions welcome). You can pick it up from
> http://pastebin.com/f7dc9320e
> 
> I can think of lots of uses. Here's a simple example.
> 
> You want to write a server with a web interface that allows people to enter
> their phone number so you can send them an SMS. You anticipate lots of
> people will use the service. But sending SMS messages is quite slow, and
> the company that you ship those jobs off to is concerned that you'll
> overrun their service (or maybe they have an API limit, etc). So you need
> to queue up jobs locally and send them off at a certain rate. You'd like to
> be able to adjust that rate up or down. You also want to be able to shut
> your service down cleanly (i.e., not in the middle of a task), and when you
> restart it you want to be able to re-queue the jobs that were queued last
> time but which hadn't gone out.
> 
> For example, suppose your function that sends the SMS is called sendSMS and
> that it takes a (number, message) tuple arg. Then:
> 
>     dispatcher = ResizableDispatchQueue(sendSMS)
>     # Tell it to send at most 5 things at once.
>     dispatcher.start(5)      # Same as dispatcher.width = 5
> 
>     # Later... send off some SMS messages.
>     dispatcher.put((2127399921, 'Hello...'))
>     dispatcher.put((5052929919, 'Test...'))
>     
>     # Later, bump up to 10 simultaneous jobs.
>     dispatcher.width = 10
> 
>     # Oops, turns out we're sending too fast, turn it down a little.
>     dispatcher.narrow(3)
> 
>     # Get a copy of the list of pending jobs.
>     jobs = dispatcher.pending()
> 
>     # Arrange to increase the number of jobs in an hour's time.
>     reactor.callLater(3600, dispatcher.setWidth, 20)
> 
>     # Time to shutdown. Wait for any tasks underway to complete, and save
>     # the list of jobs not yet dispatched.
> 
>     def saveJobs(jobs):
>         pickle.dump(jobs, ...)
> 
>     d = dispatcher.stop()
>     d.addCallback(saveJobs)
> 
> 
> On restart you just unpickle the old job list and pass its items to
> dispatcher.put().
> 
> I have a small test suite that's a bit weird (it schedules various things
> and tests how long the overall job takes and what's still pending when stop
> is called). It could be much better, but it does at least illustrate that
> the code seems to work. Let me know if you want it.

This is really nifty. I know I could use this.


> There's also the issue about what to do when the dispatch function hits an
> error.  An option could be added to re-queue the job, but it's perhaps
> better to let the dispatch function do that along with whatever else it
> needs.

One reason to have a separate error handler is to support generic
error-handling strategies, like 're-try N times and then send an
email here', etc. Though maybe you could do that with decorators
on the dispatch function. It does mean the dispatch function needs
to know about the task queue, though.


> As usual, I'd be happy to hear comments and suggestions. I'll probably
> adjust this so the DeferredQueue uses a priority queue.

Having written something like this, though not as general or as elegant,
several times, I've found that pause() and resume() is a very useful
API. That's not the same as setting the width to 0 and then back again,
as pause() and resume() don't require you to know or remember the
current width of the queue.

dave


From glyph at twistedmatrix.com  Thu Dec 10 01:32:05 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 10 Dec 2009 01:32:05 -0500
Subject: [Twisted-Python] A resizable cooperator class for queuing and
	dispatching jobs
In-Reply-To: <19232.6746.831232.490721@jon.es>
References: <19231.8959.296355.40332@jon.es>
	<B0404436-C752-450D-A5BC-3CBAF8CD84F3@twistedmatrix.com>
	<19232.6746.831232.490721@jon.es>
Message-ID: <570CC07E-6418-439E-80F8-686AE8B5ED5E@twistedmatrix.com>

On Dec 9, 2009, at 4:44 PM, Terry Jones wrote:

> But the code Glyph, the code? Or have I graduated to the point where I no
> longer need a laconic garotting?  I think the combo of a DeferredQueue and
> a task.Cooperator is pretty deadly.

Heh.  For something in a pastebin, that's all I got :).  Stick it in version control somewhere!



From terry at jon.es  Thu Dec 10 01:46:28 2009
From: terry at jon.es (Terry Jones)
Date: Thu, 10 Dec 2009 07:46:28 +0100
Subject: [Twisted-Python] A resizable cooperator class for queuing
	and	dispatching jobs
In-Reply-To: Your message at 01:32:05 on Thursday, 10 December 2009
References: <19231.8959.296355.40332@jon.es>
	<B0404436-C752-450D-A5BC-3CBAF8CD84F3@twistedmatrix.com>
	<19232.6746.831232.490721@jon.es>
	<570CC07E-6418-439E-80F8-686AE8B5ED5E@twistedmatrix.com>
Message-ID: <19232.39236.232521.792885@jon.es>

glyph> Heh.  For something in a pastebin, that's all I got :).  Stick it in
glyph> version control somewhere!

Will do.  I'm just adding pause/resume, following the suggestion of Dave
Peticolas (thanks Dave).

Terry


From terry at jon.es  Thu Dec 10 04:57:05 2009
From: terry at jon.es (Terry Jones)
Date: Thu, 10 Dec 2009 10:57:05 +0100
Subject: [Twisted-Python] A resizable cooperator class for queuing
	and	dispatching jobs
In-Reply-To: Your message at 19:59:30 on Wednesday, 9 December 2009
References: <19231.8959.296355.40332@jon.es>
	<4B207222.6070008@krondo.com>
Message-ID: <19232.50673.973763.680203@jon.es>

>>>>> "Dave" == Dave Peticolas <dave at krondo.com> writes:
Dave> This is really nifty. I know I could use this.

Great. Me too :-)

>> There's also the issue about what to do when the dispatch function hits
>> an error.  An option could be added to re-queue the job, but it's
>> perhaps better to let the dispatch function do that along with whatever
>> else it needs.

Dave> One reason to have a separate error handler is to support generic
Dave> error-handling strategies, like 're-try N times and then send an
Dave> email here', etc. Though maybe you could do that with decorators on
Dave> the dispatch function. It does mean the dispatch function needs to
Dave> know about the task queue, though.

Yes. But I think that's fine, and appropriate. If you're doing something
more sophisticated you can make a class that creates the dispatch queue,
deals with errors, resubmission, etc. That's how I plan to use it.

Dave> Having written something like this, though not as general or as
Dave> elegant, several times, I've found that pause() and resume() is a
Dave> very useful API. That's not the same as setting the width to 0 and
Dave> then back again, as pause() and resume() don't require you to know or
Dave> remember the current width of the queue.

OK, I added pause/resume. You can change the width when it's paused (or on
resume). Jobs can still be added to the queue when the thing is paused,
they just don't get dispatched. The pause method returns a deferred that
fires when all currently underway tasks have completed.  There's also a new
method 'size' which gets you a 2-tuple of the number of tasks currently
underway and the length of the queue. And I made it so you can clear the
queue (perhaps useful if you want to pause, get the pending jobs via
pending(), and clear the queue before resuming, etc).  I also got rid of
narrow/widen, following Glyph's comments.

I'll stick it somewhere more official / permanent soon (I guess into
Launchpad, either in the Fluidinfo PPA or as a sub-project of the tx
collection). For now you can grab the code & the tests at
http://jon.es/other/rdq.tar.bz2 The tests feel funky to me - the ones that
really do anything are all based on expected timings of jobs, queue sizes,
etc. That's what I'm supposed to be testing, but perhaps my way of doing it
is weird.

Terry


From mithrandi at mithrandi.net  Thu Dec 10 05:01:00 2009
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 10 Dec 2009 12:01:00 +0200
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web
	HTTPimplementation
In-Reply-To: <0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
	<2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net>
	<97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
	<8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>
	<0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
Message-ID: <f5eea9170912100201w49161abdjd521c9b3358b4323@mail.gmail.com>

On Thu, Dec 10, 2009 at 3:10 AM, Jared Gisin <jared.gisin at isilon.com> wrote:
> It's unambiguously the correct default if you incorrectly assume that
> you're always dealing with a web browser client, which is an invalid
> assumption.

Web browser clients are the most common case, at least at this point
in time. On the flip side, if you don't assume a web browser client,
you can't assume anything; why would a client be more likely to be
able to handle text/plain than text/html? If it's trying to actually
parse the error response (SOAP comes to mind), neither of those
representations are likely to be of use to the client, so you need to
implement your own error handler anyway, to send back XML (or
whatever).
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From ssteinerx at gmail.com  Thu Dec 10 07:26:24 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Thu, 10 Dec 2009 07:26:24 -0500
Subject: [Twisted-Python] A resizable cooperator class for queuing
	and	dispatching jobs
In-Reply-To: <19232.39236.232521.792885@jon.es>
References: <19231.8959.296355.40332@jon.es>
	<B0404436-C752-450D-A5BC-3CBAF8CD84F3@twistedmatrix.com>
	<19232.6746.831232.490721@jon.es>
	<570CC07E-6418-439E-80F8-686AE8B5ED5E@twistedmatrix.com>
	<19232.39236.232521.792885@jon.es>
Message-ID: <EBCDE9C9-4C9F-4333-B78D-02A3F81C39BF@gmail.com>


On Dec 10, 2009, at 1:46 AM, Terry Jones wrote:

> glyph> Heh.  For something in a pastebin, that's all I got :).  Stick it in
> glyph> version control somewhere!
> 
> Will do.  I'm just adding pause/resume, following the suggestion of Dave
> Peticolas (thanks Dave).

Cool.  I could put this to good use right ...there... in a project I'm working on at this very moment!

S



From jared.gisin at isilon.com  Thu Dec 10 11:40:47 2009
From: jared.gisin at isilon.com (Jared Gisin)
Date: Thu, 10 Dec 2009 08:40:47 -0800
Subject: [Twisted-Python] web vs web2 clarification
Message-ID: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>

I'm curious if anyone can shed some light on the  following sentence
which is taken from
"http://twistedmatrix.com/trac/wiki/WebDevelopmentWithTwisted"

 

"We decided this was a mistake and development focus has shifted to
porting the best parts of Twisted Web 2 back to Twisted Web where
existing applications will benefit from them."

 

I'm curious as to why twisted web2 was a mistake what is  the
fundamental difference between web and web2?

 

Thanks,

 

-Jared

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091210/7a611f10/attachment.htm 

From exarkun at twistedmatrix.com  Thu Dec 10 12:25:13 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 10 Dec 2009 17:25:13 -0000
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
Message-ID: <20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain>

On 04:40 pm, jared.gisin at isilon.com wrote:
>I'm curious if anyone can shed some light on the  following sentence
>which is taken from
>"http://twistedmatrix.com/trac/wiki/WebDevelopmentWithTwisted"
>
>"We decided this was a mistake and development focus has shifted to
>porting the best parts of Twisted Web 2 back to Twisted Web where
>existing applications will benefit from them."
>
>I'm curious as to why twisted web2 was a mistake what is  the
>fundamental difference between web and web2?

Web2 was a sort of from scratch rewrite.  I don't usual defer to Joel, 
but his article is the first hit for the phrase "from scratch rewrite" 
and he basically gets it right:

  http://www.joelonsoftware.com/articles/fog0000000069.html

Jean-Paul


From radix at twistedmatrix.com  Thu Dec 10 13:03:39 2009
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 10 Dec 2009 13:03:39 -0500
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
Message-ID: <60ed19d40912101003nbfe4d3ake3ba73d69066a8a@mail.gmail.com>

On Thu, Dec 10, 2009 at 11:40 AM, Jared Gisin <jared.gisin at isilon.com> wrote:
> I?m curious if anyone can shed some light on the? following sentence which
> is taken from ?http://twistedmatrix.com/trac/wiki/WebDevelopmentWithTwisted?
>
> ?We decided this was a mistake and development focus has shifted to porting
> the best parts of Twisted Web 2 back to Twisted Web where existing
> applications will benefit from them.?
>
> I?m curious as to why twisted web2 was a mistake what is ?the fundamental
> difference between web and web2?

While Jean-Paul got the general idea, I think you were asking about
something a little more specific, and I hope to address that:

There were many differences between web and web2; a lot of the APIs
were better, and some weren't. However, the quoted sentence was not
referring to the quality of the APIs and their technical merits so
much as the fact that they were completely incompatible with
twisted.web. This is where Jean-Paul's answer comes in.

Hope this helps,

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From jared.gisin at isilon.com  Thu Dec 10 13:21:04 2009
From: jared.gisin at isilon.com (Jared Gisin)
Date: Thu, 10 Dec 2009 10:21:04 -0800
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <60ed19d40912101003nbfe4d3ake3ba73d69066a8a@mail.gmail.com>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
	<60ed19d40912101003nbfe4d3ake3ba73d69066a8a@mail.gmail.com>
Message-ID: <0C40B34038FD824FACDB387E77887287033902F3@seaxch08.desktop.isilon.com>

Excellent. Yes, it helps greatly. 

What I'm in need of is the ability to allow PUTs of arbitrarily large entity-bodies which I will write to a file system on the server. The problem with twisted.web right now is that before my Resource.render_ hander is called to process the request, the http.Request object has already received all of the bytes and either put them in a StringIO or a TemporaryFile. I'd like to be able to get at the incoming data stream and handle it directly, and it appears that web2 had a sort of consumer API that allowed the Resource to handle the stream. I'm still reading documentation and trying to figure out how I can implement that in twisted.web itself. Thoughts on that would be appreciated.

-Jared

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Christopher Armstrong
Sent: Thursday, December 10, 2009 10:04 AM
To: Twisted general discussion
Subject: Re: [Twisted-Python] web vs web2 clarification

On Thu, Dec 10, 2009 at 11:40 AM, Jared Gisin <jared.gisin at isilon.com> wrote:
> I?m curious if anyone can shed some light on the? following sentence which
> is taken from ?http://twistedmatrix.com/trac/wiki/WebDevelopmentWithTwisted?
>
> ?We decided this was a mistake and development focus has shifted to porting
> the best parts of Twisted Web 2 back to Twisted Web where existing
> applications will benefit from them.?
>
> I?m curious as to why twisted web2 was a mistake what is ?the fundamental
> difference between web and web2?

While Jean-Paul got the general idea, I think you were asking about
something a little more specific, and I hope to address that:

There were many differences between web and web2; a lot of the APIs
were better, and some weren't. However, the quoted sentence was not
referring to the quality of the APIs and their technical merits so
much as the fact that they were completely incompatible with
twisted.web. This is where Jean-Paul's answer comes in.

Hope this helps,

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

From glyph at twistedmatrix.com  Thu Dec 10 13:33:38 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 10 Dec 2009 13:33:38 -0500
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <0C40B34038FD824FACDB387E77887287033902F3@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
	<60ed19d40912101003nbfe4d3ake3ba73d69066a8a@mail.gmail.com>
	<0C40B34038FD824FACDB387E77887287033902F3@seaxch08.desktop.isilon.com>
Message-ID: <CECD161E-C3F1-4F46-8DCA-2B7E2CC25664@twistedmatrix.com>


On Dec 10, 2009, at 1:21 PM, Jared Gisin wrote:

> Excellent. Yes, it helps greatly. 
> 
> What I'm in need of is the ability to allow PUTs of arbitrarily large entity-bodies which I will write to a file system on the server. The problem with twisted.web right now is that before my Resource.render_ hander is called to process the request, the http.Request object has already received all of the bytes and either put them in a StringIO or a TemporaryFile. I'd like to be able to get at the incoming data stream and handle it directly, and it appears that web2 had a sort of consumer API that allowed the Resource to handle the stream. I'm still reading documentation and trying to figure out how I can implement that in twisted.web itself. Thoughts on that would be appreciated.

You probably want to join in on the conversation on this ticket: <http://twistedmatrix.com/trac/ticket/288>.  Perhaps even contribute some patches :).


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091210/966b4101/attachment.htm 

From termim at gmail.com  Thu Dec 10 14:21:22 2009
From: termim at gmail.com (Mikhail Terekhov)
Date: Thu, 10 Dec 2009 14:21:22 -0500
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
	<20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain>
Message-ID: <12aaa0810912101121k3757fb00s78ee7aa2f2880b3a@mail.gmail.com>

On Thu, Dec 10, 2009 at 12:25 PM,  <exarkun at twistedmatrix.com> wrote:
>
> Web2 was a sort of from scratch rewrite. ?I don't usual defer to Joel,
> but his article is the first hit for the phrase "from scratch rewrite"
> and he basically gets it right:
>
> ?http://www.joelonsoftware.com/articles/fog0000000069.html
>

Just some unrelated rant about Joel&Co :

Joel talks about big _commercial_ projects and _commercial_ failures.
May be he is right here, may be not. But it is this rewrite from scratch that
gave birth to Mozilla - number one web/email suite till now. Isn't it a
success? Another successful open source examples are Apache and
Subversion. And what about CVS that couldn't/refused rewrite from
scratch and peacefully evolves adding features little by little? Can it
catch up with svn/git/bzr/hg? I doubt so. CVS's example in fact says that
if you refuse to do it then someone else will do and will replace you.
May be it is open source that makes it different, may be people think
more about fun and beauty than about money in this case?
It is not so simple and Joel's hypothesis is far from being 100% true IMHO.
In the end a lot of people know/use Borland's, Netscape's and Microsoft's
software but how many know/use Joel's? ;)

Regards,
-- 
Mikhail Terekhov


From phil at bubblehouse.org  Thu Dec 10 14:41:23 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Thu, 10 Dec 2009 14:41:23 -0500
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <12aaa0810912101121k3757fb00s78ee7aa2f2880b3a@mail.gmail.com>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
	<20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain>
	<12aaa0810912101121k3757fb00s78ee7aa2f2880b3a@mail.gmail.com>
Message-ID: <0CAC39EA-D30F-4F75-A016-17991C02D062@bubblehouse.org>

On Dec 10, 2009, at 2:21 PM, Mikhail Terekhov wrote:
> Just some unrelated rant about Joel&Co :
> 
> Joel talks about big _commercial_ projects and _commercial_ failures.
> May be he is right here, may be not. But it is this rewrite from scratch that
> gave birth to Mozilla - number one web/email suite till now. Isn't it a
> success?

I think that's debatable. Mozilla was terrible for a long time, there just wasn't much alternative. You could make the (arguable) point that Mozilla's rewrite happened at the cost of disengaging from the web community, leading people to jump ship to IE.

> Another successful open source examples are Apache and
> Subversion.

I don't think Apache is a particularly good example of why ground-up rewrites are more reasonable in open source projects. It took **years** to get a critical mass on Apache 2, and there are still many plugins that don't support anything but prefork mode.

At the same time, the approach to developing the 1.0 series was the source of the name Apache, since they were constantly upgrading and improving an existing codebase, hence, "A Patchy" Server.

> And what about CVS that couldn't/refused rewrite from
> scratch and peacefully evolves adding features little by little? Can it
> catch up with svn/git/bzr/hg? I doubt so. CVS's example in fact says that
> if you refuse to do it then someone else will do and will replace you.

Well, again, debatable. OpenBSD still uses CVS, and has started a significant push to patch and upgrade the existing CVS source.

> May be it is open source that makes it different, may be people think
> more about fun and beauty than about money in this case?
> It is not so simple and Joel's hypothesis is far from being 100% true IMHO.
> In the end a lot of people know/use Borland's, Netscape's and Microsoft's
> software but how many know/use Joel's? ;)

I think it's far simpler than that. There's an old expression that sums it up: A bird in the hand is worth two in the bush.

Taking limited resources from a nearly-complete and reasonably popular project to add them to a brand-new and **backwards-incompatible** project is rarely ever a wise project management decision.

-phil

-phil

From termim at gmail.com  Thu Dec 10 17:29:09 2009
From: termim at gmail.com (Mikhail Terekhov)
Date: Thu, 10 Dec 2009 17:29:09 -0500
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <0CAC39EA-D30F-4F75-A016-17991C02D062@bubblehouse.org>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
	<20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain>
	<12aaa0810912101121k3757fb00s78ee7aa2f2880b3a@mail.gmail.com>
	<0CAC39EA-D30F-4F75-A016-17991C02D062@bubblehouse.org>
Message-ID: <12aaa0810912101429q7b213e85m49daa4a4338f5c9f@mail.gmail.com>

On Thu, Dec 10, 2009 at 2:41 PM, Phil Christensen <phil at bubblehouse.org> wrote:
>
> I think that's debatable. Mozilla was terrible for a long time, there just wasn't much alternative. You could make the (arguable) point that Mozilla's rewrite happened at the cost of disengaging from the web community, leading people to jump ship to IE.
>
I agree that the process wasn't smooth, easy and done in a best
possible way. But the point was that the net
result is positive. Would "Mozilla Platform" be possible _now_ without
such a rewrite?

>
> I don't think Apache is a particularly good example of why ground-up rewrites are more reasonable in open source projects. It took **years** to get a critical mass on Apache 2, and there are still many plugins that don't support anything but prefork mode.
>
I meant here the transition from 0.7.x to 0.8.8 (Shambhala). They
designed it completely from scratch in
_parallel_ with developing the 0.7.x series. And this was a foundation
of the following 1.x success (modular
design etc.)

>
>> And what about CVS that couldn't/refused rewrite from
>> scratch and peacefully evolves adding features little by little? Can it
>> catch up with svn/git/bzr/hg? I doubt so. CVS's example in fact says that
>> if you refuse to do it then someone else will do and will replace you.
>
> Well, again, debatable. OpenBSD still uses CVS, and has started a significant push to patch and upgrade the existing CVS source.
>
With all due respect to OpenBSD developers, they are just a tiny part
of the all VCS users and their
significant push in their relatively small community will not
magically save CVS I'm afraid. The point here is
that once a dominant VCS in the world, CVS now looses its position
pretty fast and all these incremental
improvements (commitid etc.) can not save it. It is too late now. The
part of the lesson here is that the
code is/was in such a shape that the implementation of urgently needed
features (like commit atomicity)
took so long that others (svn/git/bzr/hg etc.) implemented everything
from scratch and even more.
See for example of VCS usage trends http://tinyurl.com/ykmurn7 and
http://tinyurl.com/qj7c3

>> May be it is open source that makes it different, may be people think
>> more about fun and beauty than about money in this case?
>> It is not so simple and Joel's hypothesis is far from being 100% true IMHO.
>> In the end a lot of people know/use Borland's, Netscape's and Microsoft's
>> software but how many know/use Joel's? ;)
>
> I think it's far simpler than that. There's an old expression that sums it up: A bird in the hand is worth two in the bush.
>
> Taking limited resources from a nearly-complete and reasonably popular project to add them to a brand-new and **backwards-incompatible** project is rarely ever a wise project management decision.
>
That is all true but it is very close to Joel's reasoning, kind of a
manager's point of view.
It is too business/money oriented and doesn't exhaust all the reasons
why people write
software in open source world in particular. And what is more
important it doesn't explain
why they still rewrite it from scratch sometimes and succeed? ;)

But this became completely unrelated to this list, sorry for dragging
discussion so far.

-- 
Mikhail Terekhov


From foom at fuhm.net  Thu Dec 10 18:36:10 2009
From: foom at fuhm.net (James Y Knight)
Date: Thu, 10 Dec 2009 18:36:10 -0500
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <12aaa0810912101429q7b213e85m49daa4a4338f5c9f@mail.gmail.com>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
	<20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain>
	<12aaa0810912101121k3757fb00s78ee7aa2f2880b3a@mail.gmail.com>
	<0CAC39EA-D30F-4F75-A016-17991C02D062@bubblehouse.org>
	<12aaa0810912101429q7b213e85m49daa4a4338f5c9f@mail.gmail.com>
Message-ID: <3A29FB30-8CA5-4CB6-95D6-DBA2FBF9328D@fuhm.net>

On Dec 10, 2009, at 5:29 PM, Mikhail Terekhov wrote:
> That is all true but it is very close to Joel's reasoning, kind of a manager's point of view. It is too business/money oriented and doesn't exhaust all the reasons why people write software in open source world in particular. And what is more important it doesn't explain why they still rewrite it from scratch sometimes and succeed? ;)
> 
> But this became completely unrelated to this list, sorry for dragging discussion so far.

I started the rewrite because I wanted to, and believed it was the most reasonable way to achive the goal of a better HTTP implementation and API. And let's not even call it "rewrite from scratch": it was branched from the twisted.web code and used ideas previosuly explored in Nevow. And there is even backwards compatibility in there for old twisted.web.Resource classes, which worked fine for most resources (but is not absolutely 100% compatible).

There were certainly some issues, both with functionality and with compatibility. (Especially with Nevow: Nevow is basically its own reimplementation of half of twisted.web, so the twisted.web2 backwards-compat code needed special-casing to work with it, and that was never completed). But where the project really went wrong is when I stopped working on it, and nobody else was interested in finishing that job. There were many reasons I stopped working on it, but I don't really want to get into it. The people actually doing the work now want to keep working within the old framework. And that's the open source way: he who does the work calls the shots. Tada.

I do think twisted.web2 could have succeeded in a form substantially similar to its present state, but alas, it was not meant to be.

James



From jml at mumak.net  Thu Dec 10 20:35:49 2009
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 11 Dec 2009 12:35:49 +1100
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <12aaa0810912091301q7c0869f8w9b51a0b352c60d3f@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
	<d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
	<E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>
	<d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
	<12aaa0810912091301q7c0869f8w9b51a0b352c60d3f@mail.gmail.com>
Message-ID: <d06a5cd30912101735n417b6781ledf0ca52ad6b94d7@mail.gmail.com>

On Thu, Dec 10, 2009 at 8:01 AM, Mikhail Terekhov <termim at gmail.com> wrote:
> On Wed, Dec 9, 2009 at 3:27 AM, Jonathan Lange <jml at mumak.net> wrote:
> ...
>>
>> I completely screwed up with the advanced English usage then. :(
>>
>
> IMHO it is very simple: extracting Deferreds out of Twisted would benefit ?(if
> at all) only people who do not use or develop Twisted.

I was referring to my misuse of "laconic", which I took to mean "lazy"
and actually means "concise".

...
> Bottom line - I wouldn't blame Twisted developers for the lack of
> enthusiasm in this case.
>

I, of all people, would never blame other Twisted developers for a
lack of enthusiasm.

jml


From dave at krondo.com  Thu Dec 10 22:36:40 2009
From: dave at krondo.com (Dave Peticolas)
Date: Thu, 10 Dec 2009 19:36:40 -0800
Subject: [Twisted-Python] A resizable cooperator class for queuing and
 dispatching jobs
In-Reply-To: <19232.50673.973763.680203@jon.es>
References: <19231.8959.296355.40332@jon.es>	<4B207222.6070008@krondo.com>
	<19232.50673.973763.680203@jon.es>
Message-ID: <4B21BE48.9090205@krondo.com>

Terry Jones wrote:
>>>>>> "Dave" == Dave Peticolas <dave at krondo.com> writes:
> Dave> This is really nifty. I know I could use this.
> 
> Great. Me too :-)
> 
>>> There's also the issue about what to do when the dispatch function hits
>>> an error.  An option could be added to re-queue the job, but it's
>>> perhaps better to let the dispatch function do that along with whatever
>>> else it needs.
> 
> Dave> One reason to have a separate error handler is to support generic
> Dave> error-handling strategies, like 're-try N times and then send an
> Dave> email here', etc. Though maybe you could do that with decorators on
> Dave> the dispatch function. It does mean the dispatch function needs to
> Dave> know about the task queue, though.
> 
> Yes. But I think that's fine, and appropriate. If you're doing something
> more sophisticated you can make a class that creates the dispatch queue,
> deals with errors, resubmission, etc. That's how I plan to use it.

Makes sense.


> Dave> Having written something like this, though not as general or as
> Dave> elegant, several times, I've found that pause() and resume() is a
> Dave> very useful API. That's not the same as setting the width to 0 and
> Dave> then back again, as pause() and resume() don't require you to know or
> Dave> remember the current width of the queue.
> 
> OK, I added pause/resume. You can change the width when it's paused (or on
> resume). Jobs can still be added to the queue when the thing is paused,
> they just don't get dispatched. The pause method returns a deferred that
> fires when all currently underway tasks have completed.  There's also a new
> method 'size' which gets you a 2-tuple of the number of tasks currently
> underway and the length of the queue. And I made it so you can clear the
> queue (perhaps useful if you want to pause, get the pending jobs via
> pending(), and clear the queue before resuming, etc).  I also got rid of
> narrow/widen, following Glyph's comments.

Cool. What about being able to get the set of underway objects, in
addition to the set of pending objects? Then you can get the whole
state of the queue at that point.

I think:

   queue.resume(0)

doesn't work the way you'd expect at the moment.


> I'll stick it somewhere more official / permanent soon (I guess into
> Launchpad, either in the Fluidinfo PPA or as a sub-project of the tx
> collection). For now you can grab the code & the tests at
> http://jon.es/other/rdq.tar.bz2 The tests feel funky to me - the ones that
> really do anything are all based on expected timings of jobs, queue sizes,
> etc. That's what I'm supposed to be testing, but perhaps my way of doing it
> is weird.
> 
> Terry
> 



From terry at jon.es  Fri Dec 11 06:44:57 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 11 Dec 2009 12:44:57 +0100
Subject: [Twisted-Python] A resizable cooperator class for queuing and
 dispatching jobs
In-Reply-To: Your message at 19:36:40 on Thursday, 10 December 2009
References: <19231.8959.296355.40332@jon.es> <4B207222.6070008@krondo.com>
	<19232.50673.973763.680203@jon.es> <4B21BE48.9090205@krondo.com>
Message-ID: <19234.12473.915610.485018@jon.es>

>>>>> "Dave" == Dave Peticolas <dave at krondo.com> writes:

Dave> Cool. What about being able to get the set of underway objects, in
Dave> addition to the set of pending objects? Then you can get the whole
Dave> state of the queue at that point.

I added an underway() method that gets you a set of underway jobs, each
with its job spec, deferred, and start time. I guess you could add
callbacks or timeouts to the set of outstanding deferreds (e.g., for some
reason you're about to pause and you know the currently outstanding jobs
are going to fail or are somehow invalid and that you're going to have to
redo them, so you could add a callback to each to put it back on the queue,
and then call pause).

Dave> I think:
Dave> queue.resume(0)
Dave> doesn't work the way you'd expect at the moment.

OK, added an assert to make sure you can't do this.

I'm not sure the details of all this are of interest to many people on the
list. I'll find time to put the code up somewhere more useful. It would be
nice to have a runnable demo/example too. Not sure I'll get there.

Terry


From ssteinerx at gmail.com  Fri Dec 11 10:09:16 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Fri, 11 Dec 2009 10:09:16 -0500
Subject: [Twisted-Python] A resizable cooperator class for queuing and
	dispatching jobs
In-Reply-To: <19234.12473.915610.485018@jon.es>
References: <19231.8959.296355.40332@jon.es> <4B207222.6070008@krondo.com>
	<19232.50673.973763.680203@jon.es> <4B21BE48.9090205@krondo.com>
	<19234.12473.915610.485018@jon.es>
Message-ID: <57016BCA-9412-4D2E-BAD7-AF5F611265AC@gmail.com>

On Dec 11, 2009, at 6:44 AM, Terry Jones wrote:
> I'm not sure the details of all this are of interest to many people on the
> list. I'll find time to put the code up somewhere more useful. It would be
> nice to have a runnable demo/example too. Not sure I'll get there.

Cool, if you'll put up a link when it's up, that'd be great.  

While a demo would be great, it seems like something you'd be able to figure out how to use if you need it.

S



From jared.gisin at isilon.com  Fri Dec 11 12:02:55 2009
From: jared.gisin at isilon.com (Jared Gisin)
Date: Fri, 11 Dec 2009 09:02:55 -0800
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <3A29FB30-8CA5-4CB6-95D6-DBA2FBF9328D@fuhm.net>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com><20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain><12aaa0810912101121k3757fb00s78ee7aa2f2880b3a@mail.gmail.com><0CAC39EA-D30F-4F75-A016-17991C02D062@bubblehouse.org><12aaa0810912101429q7b213e85m49daa4a4338f5c9f@mail.gmail.com>
	<3A29FB30-8CA5-4CB6-95D6-DBA2FBF9328D@fuhm.net>
Message-ID: <0C40B34038FD824FACDB387E77887287033903BA@seaxch08.desktop.isilon.com>

Thanks, James.

This is actually pretty sad because my reading of the code in
twisted.web2 indicates that's it's certainly more capable and more
robust than the twisted.web version. It implements more of HTTP 1.1 and
it provides for incoming HTTP stream processing by a resource.
Presently, I'm going back into twisted.web and refactoring to add some
of this functionality. 

I'm interested in a true twisted HTTP/1.1 protocol implementation that
is robust and clean. I have no use for any browser/HTML/CGI realted mix
in stuff. I consider all of that as frosting on top of the HTTP layer,
so I'm trying to produce a clean, gutted HTTP implementation that does
nothing more than speak HTTP without any cruft or extras.

Thanks again for the insight!

-Jared


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of James Y
Knight
Sent: Thursday, December 10, 2009 3:36 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] web vs web2 clarification

On Dec 10, 2009, at 5:29 PM, Mikhail Terekhov wrote:
> That is all true but it is very close to Joel's reasoning, kind of a
manager's point of view. It is too business/money oriented and doesn't
exhaust all the reasons why people write software in open source world
in particular. And what is more important it doesn't explain why they
still rewrite it from scratch sometimes and succeed? ;)
> 
> But this became completely unrelated to this list, sorry for dragging
discussion so far.

I started the rewrite because I wanted to, and believed it was the most
reasonable way to achive the goal of a better HTTP implementation and
API. And let's not even call it "rewrite from scratch": it was branched
from the twisted.web code and used ideas previosuly explored in Nevow.
And there is even backwards compatibility in there for old
twisted.web.Resource classes, which worked fine for most resources (but
is not absolutely 100% compatible).

There were certainly some issues, both with functionality and with
compatibility. (Especially with Nevow: Nevow is basically its own
reimplementation of half of twisted.web, so the twisted.web2
backwards-compat code needed special-casing to work with it, and that
was never completed). But where the project really went wrong is when I
stopped working on it, and nobody else was interested in finishing that
job. There were many reasons I stopped working on it, but I don't really
want to get into it. The people actually doing the work now want to keep
working within the old framework. And that's the open source way: he who
does the work calls the shots. Tada.

I do think twisted.web2 could have succeeded in a form substantially
similar to its present state, but alas, it was not meant to be.

James


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From jared.gisin at isilon.com  Fri Dec 11 12:12:41 2009
From: jared.gisin at isilon.com (Jared Gisin)
Date: Fri, 11 Dec 2009 09:12:41 -0800
Subject: [Twisted-Python] zope.interface
Message-ID: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>

Is there a good document that explains why zope.interface is necessary
to the twisted project?

 

-Jared

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091211/a109e4e6/attachment.htm 

From ssteinerx at gmail.com  Fri Dec 11 12:41:04 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Fri, 11 Dec 2009 12:41:04 -0500
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <0C40B34038FD824FACDB387E77887287033903BA@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com><20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain><12aaa0810912101121k3757fb00s78ee7aa2f2880b3a@mail.gmail.com><0CAC39EA-D30F-4F75-A016-17991C02D062@bubblehouse.org><12aaa0810912101429q7b213e85m49daa4a4338f5c9f@mail.gmail.com>
	<3A29FB30-8CA5-4CB6-95D6-DBA2FBF9328D@fuhm.net>
	<0C40B34038FD824FACDB387E77887287033903BA@seaxch08.desktop.isilon.com>
Message-ID: <40285652-66F9-4AC6-A8B5-2F0285FAE07B@gmail.com>


On Dec 11, 2009, at 12:02 PM, Jared Gisin wrote:
> I'm interested in a true twisted HTTP/1.1 protocol implementation that
> is robust and clean. I have no use for any browser/HTML/CGI realted mix
> in stuff. I consider all of that as frosting on top of the HTTP layer,
> so I'm trying to produce a clean, gutted HTTP implementation that does
> nothing more than speak HTTP without any cruft or extras.

Wow, if that could be pushed in one level from the current twisted interface, so that we could use it exactly as you say (without andy HTML cruft), and it could be available in Twisted, that would be a huge win.

Some HTTP/1.1 stuff made it into the recent release, but it sounds like you're planning on adding to that implementation; but at a lower level.

Any chance you'll work on helping it find its way back into Twisted?

S



From glyph at twistedmatrix.com  Fri Dec 11 13:00:39 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 11 Dec 2009 13:00:39 -0500
Subject: [Twisted-Python] zope.interface
In-Reply-To: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>
Message-ID: <5363F84B-AB85-40D4-92B7-C476F22C7790@twistedmatrix.com>


On Dec 11, 2009, at 12:12 PM, Jared Gisin wrote:

> Is there a good document that explains why zope.interface is necessary to the twisted project?

Not as such, but you may be interested in <http://glyph.twistedmatrix.com/2009/02/explaining-why-interfaces-are-great.html>.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091211/f511eaae/attachment.htm 

From exarkun at twistedmatrix.com  Sun Dec 13 00:05:12 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Dec 2009 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1260680712.99.632623350@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091213/aa66e09b/attachment.htm 

From tuure at laurinolli.net  Sun Dec 13 23:24:20 2009
From: tuure at laurinolli.net (Tuure Laurinolli)
Date: Mon, 14 Dec 2009 06:24:20 +0200
Subject: [Twisted-Python] Twisted download issues
Message-ID: <4B25BDF4.2090402@laurinolli.net>

It appears that Twisted source and binary packages are currently
distributed solely via tmrc.mit.edu, which seems to be down. I don't
know what has happened to tmrc.mit.edu, but it would be nice if there
were more mirrors even if this is just a minor glitch.

I guess open source projects typically distribute their installabled via
services like Sourceforge. Although Sourceforge immediately creeps me
out with the slowness of the site itself, they certainly do have a
sizable collection of mirrors and there usually aren't any problems in
downloading files if the mirror link can be coaxed out of Sourceforge
itself. Perhaps there is a way to get Twisted mirrored on these sites
without going through Soruceforge?

Also, my personal VPS has been sitting nigh unused for about a year now.
It currently runs DNS and e-mail, but I wouldn't mind mirroring Twisted
too :)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 187 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20091214/54498283/attachment.pgp 

From p.mayers at imperial.ac.uk  Mon Dec 14 06:48:48 2009
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 14 Dec 2009 11:48:48 +0000
Subject: [Twisted-Python] zope.interface
In-Reply-To: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>
Message-ID: <4B262620.7010105@imperial.ac.uk>

Jared Gisin wrote:
> Is there a good document that explains why zope.interface is necessary 
> to the twisted project?

A counter-question: Is there a good document that explains why people 
care? It's just another dependency isn't it?


From screwtape at froup.com  Mon Dec 14 07:12:26 2009
From: screwtape at froup.com (Tim Allen)
Date: Mon, 14 Dec 2009 23:12:26 +1100
Subject: [Twisted-Python] zope.interface
In-Reply-To: <4B262620.7010105@imperial.ac.uk>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>
	<4B262620.7010105@imperial.ac.uk>
Message-ID: <20091214121226.GC23306@thristian.org>

On Mon, Dec 14, 2009 at 11:48:48AM +0000, Phil Mayers wrote:
> Jared Gisin wrote:
> > Is there a good document that explains why zope.interface is necessary 
> > to the twisted project?
> 
> A counter-question: Is there a good document that explains why people 
> care? It's just another dependency isn't it?

Trying to remember back to when I was a Twisted newbie, I seem to
recall a pang of dismay at seeing the word "zope", until I realised that
zope.interface was very small and self-contained and didn't have further
dependencies on the rest of Zope.

Another possibility might be that the worry comes from people using
systems that don't have good built-in dependency management. I don't
know where pip/easy_install are at these days, but Debian's apt and
Fedora's yum have numbed the painful memories of downloading some
interesting code off the 'net and discovering yet further dependencies
I would have to track down and install to get things working.

I'm not saying these are well-researched or compelling reasons, just
speculating about what might be going on.

It occurs to me that recent discussions about splitting Deferreds off
into their own library might consider zope.interface as a model. Has it
prospered, as separate library? Does anyone besides Zope and Twisted use
it? I don't know, but it might be worth finding out.


Tim.


From p.mayers at imperial.ac.uk  Mon Dec 14 08:13:31 2009
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 14 Dec 2009 13:13:31 +0000
Subject: [Twisted-Python] zope.interface
In-Reply-To: <20091214121226.GC23306@thristian.org>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>	<4B262620.7010105@imperial.ac.uk>
	<20091214121226.GC23306@thristian.org>
Message-ID: <4B2639FB.3030400@imperial.ac.uk>

Tim Allen wrote:
> On Mon, Dec 14, 2009 at 11:48:48AM +0000, Phil Mayers wrote:
>> Jared Gisin wrote:
>>> Is there a good document that explains why zope.interface is necessary 
>>> to the twisted project?
>> A counter-question: Is there a good document that explains why people 
>> care? It's just another dependency isn't it?
> 
> Trying to remember back to when I was a Twisted newbie, I seem to
> recall a pang of dismay at seeing the word "zope", until I realised that
> zope.interface was very small and self-contained and didn't have further
> dependencies on the rest of Zope.

As someone who went through the awesomely steep learning curve for (and 
still uses) Zope, I can sort-of understand that "oh no zope" moment, but 
on the other hand, having used Zope a lot, I finally realised it's kind 
of the Unix of web frameworks ("those that don't understand Zope are 
doomed to reinvent it, poorly"). My crufty old Zope 2 installation still 
does things no other web does without extensive configuration, patching 
or work on my part.

It's sad that what is actually a fine product is detested within the new 
generation of python coders because they couldn't take the time to learn 
it, and it's even sadder to imagine uptake of a small, self-contained 
and well-tested sub-package suffers because of its name.

This is one excellent argument for putting it into the standard library, 
which I guess isn't going to happen :o(

> 
> Another possibility might be that the worry comes from people using
> systems that don't have good built-in dependency management. I don't
> know where pip/easy_install are at these days, but Debian's apt and
> Fedora's yum have numbed the painful memories of downloading some
> interesting code off the 'net and discovering yet further dependencies
> I would have to track down and install to get things working.

Yes, there do seem to be an awful lot of people who are basically too 
lazy to put actual work into getting their software environment 
functioning ;o)

In all seriousness though - people are either installing from source, or 
a package. If the former, they're going to have to "python setup.py 
install" at least once; one more time (on an easy-to-compile package 
with no dependencies of its own) is not compelling to me!

> 
> I'm not saying these are well-researched or compelling reasons, just
> speculating about what might be going on.
> 
> It occurs to me that recent discussions about splitting Deferreds off
> into their own library might consider zope.interface as a model. Has it
> prospered, as separate library? Does anyone besides Zope and Twisted use
> it? I don't know, but it might be worth finding out.

I don't *think* a lot of code uses it, which is unfortunate and 
symptomatic (IMHO) of a certain level of immaturity within the Python 
community.

<rant>

"""Hey, do you know what we need? Another web framework, with its own 
template engine, ORM and plugin API! W00t! This'll show those Ruby+Rails 
folks!"""

Really? Show them what exactly?

</rant>


From dripton at ripton.net  Mon Dec 14 11:27:46 2009
From: dripton at ripton.net (David Ripton)
Date: Mon, 14 Dec 2009 08:27:46 -0800
Subject: [Twisted-Python] zope.interface
In-Reply-To: <4B262620.7010105@imperial.ac.uk>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>
	<4B262620.7010105@imperial.ac.uk>
Message-ID: <20091214162746.GA31780@vidar.dreamhost.com>

On 2009.12.14 11:48:48 +0000, Phil Mayers wrote:
> Jared Gisin wrote:
> > Is there a good document that explains why zope.interface is necessary 
> > to the twisted project?
> 
> A counter-question: Is there a good document that explains why people 
> care? It's just another dependency isn't it?

Sure.  But Twisted has a very small number of dependencies (I think
Python and Zope Interface are the only ones that are absolutely
required) so it does increase the total effort to install Twisted on an
OS without a good package manager by a noticable amount.

Zope Interface is a good library, and I think the Twisted team made the
right call when they decided to use it rather than continue to maintain
their own interface library.  It's not their fault that installing
Python dependencies on some operating systems is still way harder than
it should be.

It would be great if general Python installation and packaging tools
improved to the point where one could easily install Twisted and all its
dependencies on any supported OS using PyPI, as easily as we can on
Linux or BSD using the OS package manager, or as easily as we can
install Perl packages from CPAN, or as easily as we can run Java stuff
using Java Web Start, etc.  Enough smart people care about this problem
that I'm pretty sure it'll be solved over the next couple of years.
Which is too far away to save me from having to write big nasty custom
Windows and MacOS installers for my current game, but might mean that
this is the last time I ever have to do it.

-- 
David Ripton    dripton at ripton.net


From landreville at deadtreepages.com  Mon Dec 14 12:32:51 2009
From: landreville at deadtreepages.com (Landreville)
Date: Mon, 14 Dec 2009 12:32:51 -0500
Subject: [Twisted-Python] XMLRPC get IP address
Message-ID: <9d748c780912140932p4f9ab374nbb32c538753bd168@mail.gmail.com>

Hello,

I've looked through the mailing list and already found this reference to get
the IP address when using xmlrpc:

http://twistedmatrix.com/pipermail/twisted-python/2004-June/007987.html

But it is not working.

I have added this to my class that inherits from xmlrpc.XMLRPC

def render(self, request):
self.request = request
xmlrpc.XMLRPC.render(self, request)


Now when I call any function the log says:
2009-12-14 12:29:18-0500 [-]
/usr/local/lib/python2.6/dist-packages/Twisted-9.0.0-py2.6-linux-x86_64.egg/twisted/web/xmlrpc.py:148:
exceptions.UserWarning: Warning! request.finish called twice.

I have two XMLRPC classes, and one of them is a subHandler, but the
subhandler's render method never gets called as far as I've seen (so it
shouldnt be causing request.finish to be called twice)  and just to be sure
I added this to only the parent XMLRPC class.

Any ideas why this would cause request.finish to be called twice?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091214/482b3c60/attachment.htm 

From exarkun at twistedmatrix.com  Mon Dec 14 13:01:35 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 14 Dec 2009 18:01:35 -0000
Subject: [Twisted-Python] XMLRPC get IP address
In-Reply-To: <9d748c780912140932p4f9ab374nbb32c538753bd168@mail.gmail.com>
References: <9d748c780912140932p4f9ab374nbb32c538753bd168@mail.gmail.com>
Message-ID: <20091214180135.2667.87947723.divmod.xquotient.214@localhost.localdomain>


On 05:32 pm, landreville at deadtreepages.com wrote:
>Hello,
>
>I've looked through the mailing list and already found this reference 
>to get
>the IP address when using xmlrpc:
>
>http://twistedmatrix.com/pipermail/twisted-python/2004-June/007987.html
>
>But it is not working.
>
>I have added this to my class that inherits from xmlrpc.XMLRPC
>
>def render(self, request):
>self.request = request
>xmlrpc.XMLRPC.render(self, request)
>
>
>Now when I call any function the log says:
>2009-12-14 12:29:18-0500 [-]
>/usr/local/lib/python2.6/dist-packages/Twisted-9.0.0-py2.6-linux- 
>x86_64.egg/twisted/web/xmlrpc.py:148:
>exceptions.UserWarning: Warning! request.finish called twice.
>
>I have two XMLRPC classes, and one of them is a subHandler, but the
>subhandler's render method never gets called as far as I've seen (so it
>shouldnt be causing request.finish to be called twice)  and just to be 
>sure
>I added this to only the parent XMLRPC class.
>
>Any ideas why this would cause request.finish to be called twice?

Make sure you return the result of calling xmlrpc.XMLRPC.render.

Jean-Paul


From celord at gmail.com  Mon Dec 14 18:48:28 2009
From: celord at gmail.com (=?ISO-8859-1?B?Q+lzYXIgR2FyY+1h?=)
Date: Mon, 14 Dec 2009 17:48:28 -0600
Subject: [Twisted-Python] plugin system
Message-ID: <b302bf880912141548o512f14a4m98ace9f23da22fd2@mail.gmail.com>

Guys, I'am new to twisted and I've read the documentation about the
plugin system and the components but I can't make it, I really do not
get it well, do you guys have any examples there to see if I can get
it :)

Thanks a lot

-- 
http://celord.blogspot.com/


From andrew at bemusement.org  Mon Dec 14 20:20:55 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 15 Dec 2009 12:20:55 +1100
Subject: [Twisted-Python] zope.interface
In-Reply-To: <20091214121226.GC23306@thristian.org>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>
	<4B262620.7010105@imperial.ac.uk>
	<20091214121226.GC23306@thristian.org>
Message-ID: <20091215012055.GI7204@steerpike.home.puzzling.org>

Tim Allen wrote:
[...]
> It occurs to me that recent discussions about splitting Deferreds off
> into their own library might consider zope.interface as a model. Has it
> prospered, as separate library? Does anyone besides Zope and Twisted use
> it? I don't know, but it might be worth finding out.

I'm not sure that it has ?prospered? exactly, but a Python 3 added its
Abstract Base Classes feature[1] to satisfy some (many?) of the same needs.
So in some sense the general idea has prospered, even if this particular
implementation hasn't taken over the world.

-Andrew.

[1] http://docs.python.org/dev/3.0/whatsnew/2.6.html#pep-3119


From rutt.4 at osu.edu  Mon Dec 14 20:54:54 2009
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Mon, 14 Dec 2009 20:54:54 -0500
Subject: [Twisted-Python] complete producer/consumer example
Message-ID: <68f3f1f70912141754n3bbc8a19k4ef12ca48f8290fe@mail.gmail.com>

How does the below example look as a complete producer/consumer example?  If
it's well received, perhaps we can add it to the online documentation at
http://twistedmatrix.com/documents/current/core/howto/producers.html in the
"Further Reading" section?  I always felt that the producer/consumer (a.k.a.
high volume streaming) docs lacked a real example that users could download
and run.

#!/sw/external/python-2.6.1/bin/python
"""Serve as a sample implementation of a twisted producer/consumer
system, with a simple TCP server which asks the user how many random
integers they want, and it sends the result set back to the user, one
result per line."""

import random

from zope.interface import implements
from twisted.internet import interfaces, reactor
from twisted.internet.protocol import Factory
from twisted.protocols.basic import LineReceiver

class Producer:
    """Send back the requested number of random integers to the client."""
    implements(interfaces.IPushProducer)
    def __init__(self, proto, cnt):
        self._proto = proto
        self._goal = cnt
        self._produced = 0
        self._paused = False
    def pauseProducing(self):
        """When we've produced data too fast, pauseProducing() will be
called (reentrantly from within resumeProducing's transport.write
method, most likely), so set a flag that causes production to pause
temporarily."""
        self._paused = True
        print('pausing connection from %s' %
(self._proto.transport.getPeer()))
    def resumeProducing(self):
        self._paused = False
        while not self._paused and self._produced < self._goal:
            next_int = random.randint(0, 10000)
            self._proto.transport.write('%d\r\n' % (next_int))
            self._produced += 1
        if self._produced == self._goal:
            self._proto.transport.unregisterProducer()
            self._proto.transport.loseConnection()
    def stopProducing(self):
        pass

class ServeRandom(LineReceiver):
    """Serve up random data."""
    def connectionMade(self):
        print('connection made from %s' % (self.transport.getPeer()))
        self.transport.write('how many random integers do you want?\r\n')
    def lineReceived(self, line):
        cnt = int(line.strip())
        producer = Producer(self, cnt)
        self.transport.registerProducer(producer, True)
        producer.resumeProducing()
    def connectionLost(self, reason):
        print('connection lost from %s' % (self.transport.getPeer()))
factory = Factory()
factory.protocol = ServeRandom
reactor.listenTCP(1234, factory)
print('listening on 1234...')
reactor.run()

Use on the client:

$ telnet localhost 1234
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
how many random integers do you want?
5
431
7201
3289
9604
6659
Connection closed by foreign host.
$

Use on the server (observe how the server pauses production sometimes - this
happens when a large data set is requested by the client):

$ ./streaming.py
listening on 1234...
connection made from IPv4Address(TCP, '127.0.0.1', 54859)
connection lost from IPv4Address(TCP, '127.0.0.1', 54859)
connection made from IPv4Address(TCP, '127.0.0.1', 54864)
pausing connection from IPv4Address(TCP, '127.0.0.1', 54864)
pausing connection from IPv4Address(TCP, '127.0.0.1', 54864)
pausing connection from IPv4Address(TCP, '127.0.0.1', 54864)
pausing connection from IPv4Address(TCP, '127.0.0.1', 54864)
connection lost from IPv4Address(TCP, '127.0.0.1', 54864)
[...]

Thanks.
-- 
Benjamin Rutt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091214/d8e325b1/attachment.htm 

From apacheco.uy at gmail.com  Mon Dec 14 23:32:40 2009
From: apacheco.uy at gmail.com (=?ISO-8859-1?Q?An=EDbal_Pacheco?=)
Date: Tue, 15 Dec 2009 02:32:40 -0200
Subject: [Twisted-Python] subprocess.Popen
Message-ID: <fa5a72c90912142032n3ae02a76jee9424c7d5cbdc04@mail.gmail.com>

Hi list,

Is it possible to attach a callback to a process launched using
subprocess.Popen?, I want to receive a notification on process
termination.

many thanks!
anibal.-


From screwtape at froup.com  Tue Dec 15 00:26:19 2009
From: screwtape at froup.com (Tim Allen)
Date: Tue, 15 Dec 2009 16:26:19 +1100
Subject: [Twisted-Python] subprocess.Popen
In-Reply-To: <fa5a72c90912142032n3ae02a76jee9424c7d5cbdc04@mail.gmail.com>
References: <fa5a72c90912142032n3ae02a76jee9424c7d5cbdc04@mail.gmail.com>
Message-ID: <20091215052619.GD23306@thristian.org>

On Tue, Dec 15, 2009 at 02:32:40AM -0200, An?bal Pacheco wrote:
> Is it possible to attach a callback to a process launched using
> subprocess.Popen?, I want to receive a notification on process
> termination.

I don't believe Twisted has any special support for subprocess.Popen,
but you can do much the same things with Twisted's
reactor.spawnProcess().


From apacheco.uy at gmail.com  Tue Dec 15 05:59:40 2009
From: apacheco.uy at gmail.com (=?ISO-8859-1?Q?An=EDbal_Pacheco?=)
Date: Tue, 15 Dec 2009 08:59:40 -0200
Subject: [Twisted-Python] subprocess.Popen
In-Reply-To: <20091215052619.GD23306@thristian.org>
References: <fa5a72c90912142032n3ae02a76jee9424c7d5cbdc04@mail.gmail.com>
	<20091215052619.GD23306@thristian.org>
Message-ID: <fa5a72c90912150259v7fd0ac94r2f35a8a403aaabf6@mail.gmail.com>

Thanks! I think that is just what I need:
http://twistedmatrix.com/documents/current/core/howto/process.html

On Tue, Dec 15, 2009 at 3:26 AM, Tim Allen <screwtape at froup.com> wrote:
> On Tue, Dec 15, 2009 at 02:32:40AM -0200, An?bal Pacheco wrote:
>> Is it possible to attach a callback to a process launched using
>> subprocess.Popen?, I want to receive a notification on process
>> termination.
>
> I don't believe Twisted has any special support for subprocess.Popen,
> but you can do much the same things with Twisted's
> reactor.spawnProcess().
>


From exarkun at twistedmatrix.com  Tue Dec 15 09:22:13 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 15 Dec 2009 14:22:13 -0000
Subject: [Twisted-Python] complete producer/consumer example
In-Reply-To: <68f3f1f70912141754n3bbc8a19k4ef12ca48f8290fe@mail.gmail.com>
References: <68f3f1f70912141754n3bbc8a19k4ef12ca48f8290fe@mail.gmail.com>
Message-ID: <20091215142213.2667.1339676690.divmod.xquotient.361@localhost.localdomain>

On 01:54 am, rutt.4 at osu.edu wrote:
>How does the below example look as a complete producer/consumer 
>example?  If
>it's well received, perhaps we can add it to the online documentation 
>at
>http://twistedmatrix.com/documents/current/core/howto/producers.html in 
>the
>"Further Reading" section?  I always felt that the producer/consumer 
>(a.k.a.
>high volume streaming) docs lacked a real example that users could 
>download
>and run.

Adding an example like this seems like a good idea to me. 
doc/core/examples/ is a good place for runnable examples like the one 
you've written up, so we could add it there and link to it.  Another 
possibility is to integrate it into the howto more, posting parts of the 
code inline near text which is discussing that part of how producers and 
consumers work.  This is a bit more work, of course, and probably also 
involves editing some of the existing text to make things flow nicely, 
but I think it's a good approach.

Either way, though, if you could open a ticket and attach your code to 
it, that'd be excellent.

Thank you! :)

Jean-Paul


From exarkun at twistedmatrix.com  Tue Dec 15 10:42:45 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 15 Dec 2009 15:42:45 -0000
Subject: [Twisted-Python] plugin system
In-Reply-To: <b302bf880912141548o512f14a4m98ace9f23da22fd2@mail.gmail.com>
References: <b302bf880912141548o512f14a4m98ace9f23da22fd2@mail.gmail.com>
Message-ID: <20091215154245.2667.669392555.divmod.xquotient.365@localhost.localdomain>

On 14 Dec, 11:48 pm, celord at gmail.com wrote:
>Guys, I'am new to twisted and I've read the documentation about the
>plugin system and the components but I can't make it, I really do not
>get it well, do you guys have any examples there to see if I can get
>it :)
>
>Thanks a lot

Nevow, Axiom, Mantissa, and Quotient all make use of the plugin system. 
eg:

http://divmod.org/trac/browser/trunk/Axiom/twisted/plugins/axiom_plugins.py

Jean-Paul


From nathan.stocks at gmail.com  Tue Dec 15 12:17:18 2009
From: nathan.stocks at gmail.com (Nathan)
Date: Tue, 15 Dec 2009 10:17:18 -0700
Subject: [Twisted-Python] deferred list behaviour
Message-ID: <96c9d6a80912150917n38172466md5a4124e8b1c5a6a@mail.gmail.com>

Are the results of a deferred list guaranteed to be in the same order
as the list of deferreds that was given to it?

i.e. if I pass [d1, d2, d3] to a deferred list and the results list in
the call back has [(True, (something,)), (False, (something,)), (True,
(something))] is it guaranteed that items 0, 1, and 2 in each list
correspond to each other?

~ Nathan


From exarkun at twistedmatrix.com  Tue Dec 15 12:34:43 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 15 Dec 2009 17:34:43 -0000
Subject: [Twisted-Python] deferred list behaviour
In-Reply-To: <96c9d6a80912150917n38172466md5a4124e8b1c5a6a@mail.gmail.com>
References: <96c9d6a80912150917n38172466md5a4124e8b1c5a6a@mail.gmail.com>
Message-ID: <20091215173443.2667.1502029672.divmod.xquotient.366@localhost.localdomain>

On 05:17 pm, nathan.stocks at gmail.com wrote:
>Are the results of a deferred list guaranteed to be in the same order
>as the list of deferreds that was given to it?
>
>i.e. if I pass [d1, d2, d3] to a deferred list and the results list in
>the call back has [(True, (something,)), (False, (something,)), (True,
>(something))] is it guaranteed that items 0, 1, and 2 in each list
>correspond to each other?

Yep.

Jean-Paul


From nathan.stocks at gmail.com  Tue Dec 15 12:42:09 2009
From: nathan.stocks at gmail.com (Nathan)
Date: Tue, 15 Dec 2009 10:42:09 -0700
Subject: [Twisted-Python] deferred list behaviour
In-Reply-To: <20091215173443.2667.1502029672.divmod.xquotient.366@localhost.localdomain>
References: <96c9d6a80912150917n38172466md5a4124e8b1c5a6a@mail.gmail.com>
	<20091215173443.2667.1502029672.divmod.xquotient.366@localhost.localdomain>
Message-ID: <96c9d6a80912150942u3c1e58e8k34fb993ea8b12b46@mail.gmail.com>

On Tue, Dec 15, 2009 at 10:34 AM,  <exarkun at twistedmatrix.com> wrote:
> On 05:17 pm, nathan.stocks at gmail.com wrote:
>>Are the results of a deferred list guaranteed to be in the same order
>>as the list of deferreds that was given to it?
>>
>>i.e. if I pass [d1, d2, d3] to a deferred list and the results list in
>>the call back has [(True, (something,)), (False, (something,)), (True,
>>(something))] is it guaranteed that items 0, 1, and 2 in each list
>>correspond to each other?
>
> Yep.

Perfect, that's what I thought.

~ Nathan


From jared.gisin at isilon.com  Tue Dec 15 13:11:03 2009
From: jared.gisin at isilon.com (Jared Gisin)
Date: Tue, 15 Dec 2009 10:11:03 -0800
Subject: [Twisted-Python] zope.interface
In-Reply-To: <20091215012055.GI7204@steerpike.home.puzzling.org>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com><4B262620.7010105@imperial.ac.uk><20091214121226.GC23306@thristian.org>
	<20091215012055.GI7204@steerpike.home.puzzling.org>
Message-ID: <0C40B34038FD824FACDB387E77887287033905FE@seaxch08.desktop.isilon.com>

I completely fail to see why zope.interface is even needed. It's not Pythonic at all and it contributes to unnecessary code bloat.

What's wrong with writing subclasses? I've never had a case where that wasn't sufficient. Instead of filling up your files with all of  these empty class definitions that define the methods that objects should implemmnt, why not just make the base object from which all similar object inherit implement the required methods, and if it's up to a subclass to provide functionality, just raise an ImplementationError in the base class method and let it be a run-time error. Keep it clean and simple and let Python do its work.
	
-Jared

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Andrew Bennetts
Sent: Monday, December 14, 2009 5:21 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] zope.interface

Tim Allen wrote:
[...]
> It occurs to me that recent discussions about splitting Deferreds off
> into their own library might consider zope.interface as a model. Has it
> prospered, as separate library? Does anyone besides Zope and Twisted use
> it? I don't know, but it might be worth finding out.

I'm not sure that it has ?prospered? exactly, but a Python 3 added its
Abstract Base Classes feature[1] to satisfy some (many?) of the same needs.
So in some sense the general idea has prospered, even if this particular
implementation hasn't taken over the world.

-Andrew.

[1] http://docs.python.org/dev/3.0/whatsnew/2.6.html#pep-3119

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

From glyph at twistedmatrix.com  Tue Dec 15 14:26:59 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 15 Dec 2009 14:26:59 -0500
Subject: [Twisted-Python] zope.interface
In-Reply-To: <0C40B34038FD824FACDB387E77887287033905FE@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com><4B262620.7010105@imperial.ac.uk><20091214121226.GC23306@thristian.org>
	<20091215012055.GI7204@steerpike.home.puzzling.org>
	<0C40B34038FD824FACDB387E77887287033905FE@seaxch08.desktop.isilon.com>
Message-ID: <53CE1BAB-B3F3-4DAC-96CA-4A25264BA15A@twistedmatrix.com>


On Dec 15, 2009, at 1:11 PM, Jared Gisin wrote:

> I completely fail to see why zope.interface is even needed. It's not Pythonic at all and it contributes to unnecessary code bloat.

Oh gosh!  You're absolutely right!  I never noticed it before!  I just got out my Pythonic-o-meter and measured Zope Interface!  Apparently it is only 0.44 vRossums!  (For those you familiar only with the SI units, a vRossum is equivalent to one Microtim per cubic meter-second).  We should totally delete all the interfaces in Twisted!

Wait, oops.  I mean, did you even read <http://glyph.twistedmatrix.com/2009/02/explaining-why-interfaces-are-great.html>?  There are lots of reasons to have interfaces.

> What's wrong with writing subclasses?

Lots of things in Twisted are subclasses.  twisted.internet.protocol.Protocol provides a helpful utility base-class for implementing twisted.internet.interfaces.IProtocol.  If you use them for what they're good for, there's nothing wrong with them.

But, as I said in my article, interfaces and classes are for different things.

As a very simple example of what's wrong with subclassing, there are times when having extra superclasses breaks things.  For example: let's say that you want to have an IProtocol implementation that uses __slots__ and doesn't have a __dict__.  Or, you want to do the equivalent thing in C to write a super-optimized IProtocol implementation.

If your documentation says "this parameter must be a Protocol", then you're stuck.  There's no way to enforce that or provide friendly debugging error messages when you *don't* provide a Protocol; you just have to invoke the appropriate methods and hope it works.  If you do actually subclass Protocol in your application, in the best case you get a class which accidentally inherits a __dict__, and in the worst case you get a base class layout conflict error and you can't even import your module.  There are also lots of ways that metaclasses can conflict, inheritance hierarchies can become awkward and confusing, etc.  This is even worse if the base class you want happens to do some unwanted work in its constructor.

Another use for interfaces is testing.  For example, you can use interfaces to write tests to make sure that your code is up-to-date with the most recent specifications.  Let's say that we have an interface, IFoo, that has a method, 'bar'.  We want to add a method, 'baz', to it.  Now, applications may be claiming to implement IFoo already, so we need to be careful when we invoke 'bar' as it may not be present, but the savvy implementor could use 'verifyObject' to make sure that their MyFoo class properly implemented all the required methods, and IFoo.

There are some things you can kinda-sorta do with metaclasses or introspection to provide similar functionality, but they're highly susceptible to implementation details shifting around.  Metaclasses, in particular, tend to exacerbate the problems I mentioned above with inheritance conflicts and features like __slots__.

Yet another use for interfaces is adaptation.  This is very useful in integration systems like twisted.cred.  The interface object serves as a concise encapsulation of what the calling code wants to get out of cred, and realm implementations can return whatever.

> I've never had a case where that wasn't sufficient.

Your limited experience isn't necessarily a good argument for what Twisted should or shouldn't do.  There are many people for whom the 'urllib' or 'socket' modules have always been sufficient, but that doesn't mean we're going to give up and go home either.

If you still don't think my reasoning is adequate, you should spend a few years contributing lots of really useful patches to Twisted, then bring this up again.



From jeremy at jongsma.org  Tue Dec 15 15:22:22 2009
From: jeremy at jongsma.org (Jeremy Jongsma)
Date: Tue, 15 Dec 2009 14:22:22 -0600
Subject: [Twisted-Python] Downpour - new project using Twisted
Message-ID: <1260908542.21356.34.camel@jeremy-laptop>

I just posted my latest project - Downpour, a web-based BitTorrent
client using twisted and twisted-web.  Feel free to try it out and send
me any comments.  It hasn't been tested on Windows yet, so any trip
reports for that would also be appreciated.

http://home.jongsma.org/software/downpour/

Could someone add this to the "Projects Using Twisted" page?

-j

-- 



From phil at bubblehouse.org  Tue Dec 15 16:50:08 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 15 Dec 2009 16:50:08 -0500
Subject: [Twisted-Python] Downpour - new project using Twisted
In-Reply-To: <1260908542.21356.34.camel@jeremy-laptop>
References: <1260908542.21356.34.camel@jeremy-laptop>
Message-ID: <4B943956-1987-4D30-9F4F-1EBD19D5B00F@bubblehouse.org>

This is really cool, I can't wait to check it out.

I also wanted to suggest that you add your project to the 'tx' super-group on Launchpad. It will group it with a lot of other Twisted community projects, and has some other nice features.

You can even have it automagically sync the launchpad repository with your SVN repository, so developer-users can clone the resulting bazaar repository and submit patches through launchpad.

-phil

On Dec 15, 2009, at 3:22 PM, Jeremy Jongsma wrote:

> I just posted my latest project - Downpour, a web-based BitTorrent
> client using twisted and twisted-web.  Feel free to try it out and send
> me any comments.  It hasn't been tested on Windows yet, so any trip
> reports for that would also be appreciated.
> 
> http://home.jongsma.org/software/downpour/
> 
> Could someone add this to the "Projects Using Twisted" page?
> 
> -j
> 
> -- 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From thejash at gmail.com  Tue Dec 15 18:56:26 2009
From: thejash at gmail.com (Josh Albrecht)
Date: Tue, 15 Dec 2009 18:56:26 -0500
Subject: [Twisted-Python] UDP crashes python.exe when using IOCPReactor
Message-ID: <34332f6e0912151556n6455cd54h5daa9a4723d47f0e@mail.gmail.com>

I've been struggling to move a large program over to IOCPReactor, but
it is causing python.exe to crash on windows.  I reduced the error to
this program, which crashes almost immediately on all the machines
I've tested it on.  Am I doing something wrong?

#############################################
from twisted.internet.iocpreactor.reactor import IOCPReactor
from twisted.internet.main import installReactor
from twisted.internet.protocol import DatagramProtocol

reactor = IOCPReactor()
installReactor(reactor)

DATA = 'HELLO'
REMOTE_IP = "127.0.0.1"
REMOTE_PORT = 33351

class EchoDatagram(DatagramProtocol):
  def datagramReceived(self, datagram, addr):
    print((addr, datagram))
    self.transport.write(datagram, addr)

p1 = EchoDatagram()
listening_port1 = reactor.listenUDP(6951, p1, interface='')
p2 = EchoDatagram()
listening_port2 = reactor.listenUDP(REMOTE_PORT, p2, interface=REMOTE_IP)

def pointless_write():
  p1.transport.write(DATA, (REMOTE_IP, REMOTE_PORT))
  for i in xrange(10):
    f = open("temp1", "wb")
    f.write("Hi!")
    f.close()
    f = open("temp1", "rb")
    data = f.read()
    f.close()
  reactor.callLater(1, pointless_write)

reactor.callLater(1, pointless_write)
reactor.run()
#############################################

This has been driving me crazy all day.  Any insights would be greatly
appreciated!

Thanks,
Josh Albrecht


From exarkun at twistedmatrix.com  Tue Dec 15 20:39:47 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 16 Dec 2009 01:39:47 -0000
Subject: [Twisted-Python] UDP crashes python.exe when using IOCPReactor
In-Reply-To: <34332f6e0912151556n6455cd54h5daa9a4723d47f0e@mail.gmail.com>
References: <34332f6e0912151556n6455cd54h5daa9a4723d47f0e@mail.gmail.com>
Message-ID: <20091216013947.15596.723181779.divmod.xquotient.4@localhost.localdomain>

On 15 Dec, 11:56 pm, thejash at gmail.com wrote:
>I've been struggling to move a large program over to IOCPReactor, but
>it is causing python.exe to crash on windows.  I reduced the error to
>this program, which crashes almost immediately on all the machines
>I've tested it on.  Am I doing something wrong?

First thought, Windows 7 isn't a supported platform.  Little or no 
effort has been spent on getting Twisted working there.  As a start, you 
might try running the test suite to see what passes and what fails.

Next thought, you're installing the reactor wrong.  Instead, you should 
be doing:

    from twisted.internet import iocpreactor
    iocpreactor.install()
    from twisted.internet import reactor

As documented in the reactor selection howto:

    http://twistedmatrix.com/documents/current/core/howto/choosing- 
reactor.html#auto8

Jean-Paul


From thejash at gmail.com  Tue Dec 15 21:43:55 2009
From: thejash at gmail.com (Josh Albrecht)
Date: Tue, 15 Dec 2009 21:43:55 -0500
Subject: [Twisted-Python] UDP crashes python.exe when using IOCPReactor
In-Reply-To: <20091216013947.15596.723181779.divmod.xquotient.4@localhost.localdomain>
References: <34332f6e0912151556n6455cd54h5daa9a4723d47f0e@mail.gmail.com>
	<20091216013947.15596.723181779.divmod.xquotient.4@localhost.localdomain>
Message-ID: <34332f6e0912151843u2db025ccxa499f24d53b7345e@mail.gmail.com>

Thanks.  I changed the way I was installing the reactor, but it had no effect.

I did not realize that Windows 7 was unsupported.  However, I've also
reproduced this bug on windows XP, so I think it's a larger issue,
unfortunately.

Thanks,
 - Josh

On Tue, Dec 15, 2009 at 8:39 PM,  <exarkun at twistedmatrix.com> wrote:
> On 15 Dec, 11:56 pm, thejash at gmail.com wrote:
>>I've been struggling to move a large program over to IOCPReactor, but
>>it is causing python.exe to crash on windows. ?I reduced the error to
>>this program, which crashes almost immediately on all the machines
>>I've tested it on. ?Am I doing something wrong?
>
> First thought, Windows 7 isn't a supported platform. ?Little or no
> effort has been spent on getting Twisted working there. ?As a start, you
> might try running the test suite to see what passes and what fails.
>
> Next thought, you're installing the reactor wrong. ?Instead, you should
> be doing:
>
> ? ?from twisted.internet import iocpreactor
> ? ?iocpreactor.install()
> ? ?from twisted.internet import reactor
>
> As documented in the reactor selection howto:
>
> ? ?http://twistedmatrix.com/documents/current/core/howto/choosing-
> reactor.html#auto8
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From rutt.4 at osu.edu  Tue Dec 15 22:46:42 2009
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Tue, 15 Dec 2009 22:46:42 -0500
Subject: [Twisted-Python] complete producer/consumer example
In-Reply-To: <20091215142213.2667.1339676690.divmod.xquotient.361@localhost.localdomain>
References: <68f3f1f70912141754n3bbc8a19k4ef12ca48f8290fe@mail.gmail.com>
	<20091215142213.2667.1339676690.divmod.xquotient.361@localhost.localdomain>
Message-ID: <68f3f1f70912151946k1df2bd0dwcc532b9f12397619@mail.gmail.com>

Ok, this is done.  See http://twistedmatrix.com/trac/ticket/4171.

I decided to start by just adding the example.  For me to rework the whole
howto around this example, I'm afraid I'd need to understand how it all
works a bit more than I do now.  So, baby steps first.

Do you need anything more from me here to pick this up and add it to the
core docs?  (I wasn't sure who to assign the ticket to, and it ended up
assigning it to glyph).

Thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091215/d7da665c/attachment.htm 

From spongelavapaul at googlemail.com  Wed Dec 16 03:36:32 2009
From: spongelavapaul at googlemail.com (Paul Thomas)
Date: Wed, 16 Dec 2009 08:36:32 +0000
Subject: [Twisted-Python] zope.interface
In-Reply-To: <0C40B34038FD824FACDB387E77887287033905FE@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com><4B262620.7010105@imperial.ac.uk><20091214121226.GC23306@thristian.org>
	<20091215012055.GI7204@steerpike.home.puzzling.org>
	<0C40B34038FD824FACDB387E77887287033905FE@seaxch08.desktop.isilon.com>
Message-ID: <4444E60F-7635-44DB-8BB1-2F95F0CEFCD0@googlemail.com>


On 15 Dec 2009, at 18:11, Jared Gisin wrote:

> What's wrong with writing subclasses? I've never had a case where  
> that wasn't sufficient. Instead of filling up your files with all  
> of  these empty class definitions that define the methods that  
> objects should implemmnt, why not just make the base object from  
> which all similar object inherit implement the required methods, and  
> if it's up to a subclass to provide functionality, just raise an  
> ImplementationError in the base class method and let it be a run- 
> time error. Keep it clean and simple and let Python do its work.

Wouldn't that be _more_ empty class definitions?




From amauryfa at gmail.com  Wed Dec 16 08:03:55 2009
From: amauryfa at gmail.com (Amaury Forgeot d'Arc)
Date: Wed, 16 Dec 2009 14:03:55 +0100
Subject: [Twisted-Python] UDP crashes python.exe when using IOCPReactor
In-Reply-To: <34332f6e0912151843u2db025ccxa499f24d53b7345e@mail.gmail.com>
References: <34332f6e0912151556n6455cd54h5daa9a4723d47f0e@mail.gmail.com>
	<20091216013947.15596.723181779.divmod.xquotient.4@localhost.localdomain>
	<34332f6e0912151843u2db025ccxa499f24d53b7345e@mail.gmail.com>
Message-ID: <e27efe130912160503i33b8aa0ag7acf9c05ab9fa69b@mail.gmail.com>

2009/12/16 Josh Albrecht <thejash at gmail.com>

> Thanks.  I changed the way I was installing the reactor, but it had no
> effect.
>
> I did not realize that Windows 7 was unsupported.  However, I've also
> reproduced this bug on windows XP, so I think it's a larger issue,
> unfortunately.
>

I also reproduce the problem consistently with a custom build of python2.5.1
with Visual Studio 8.
It never occurs in non-optimized build, but I was able to include debug info
and attach the debugger.

The errors are really strange: it seems that a register randomly changes its
value to 0x10

python25.dll!PyEval_CallObjectWithKeywords
        (_object * func=0x00fa3968, _object * arg=tuple(), _object *
kw=0x00000010)
python25.dll!PyInstance_New
        (_object * klass=0x00f516c0, _object * arg=tuple(), _object *
kw=0x00000010)
python25.dll!PyObject_Call
        (_object * func=0x00f516c0, _object * arg=tuple(), _object *
kw=0x00000000)
python25.dll!do_call
        (_object * func=0x00f516c0, _object * * * pp_stack=0x0021e6b0, int
na=2, int nk=0)

See how the "kw=0x0" becomes "kw=0x10" in inner frames.

I've also seen crashes in PyObject_GenericGetAttr, where the register which
holds the __mro__ contains 0x10, when the debugger still shows
((PyTupleObject*)(obj->ob_type->tp_mro))->ob_item == 5

Very very strange things are happening. Is it possible that some hardware
interruption does not restore the registers correctly?
I tried to modify the python intepreter, add printf statements... The crash
occurs at several places (sometimes it disappears completely), but all
crashes are similar: some register value becomes 0x10...
I can perform other tests if someone has an idea.

Note that in a non-optimized debug build, one of the Echoer stops working,
after exactly 1000 datagrams have been received (and no, it's not related to
sys.setrecursionlimit)

-- 
Amaury Forgeot d'Arc
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091216/39531f0b/attachment.htm 

From maris at chown.lv  Wed Dec 16 14:34:56 2009
From: maris at chown.lv (=?iso-8859-4?Q?M=E0risR?=)
Date: Wed, 16 Dec 2009 21:34:56 +0200
Subject: [Twisted-Python] Memcache client issues
Message-ID: <4B6E356B-762D-429A-906C-280E2C4F88DA@chown.lv>

Hello!
I'm trying to write small tcp server, which doing some stuff with memcache. Everything was fine until I start it on production, after few minutes I got to rollback to old one. My script got max open files limit :( After  liitle inspection, I saw that, new connection to my daemon opens new connection to memcache and after disconnect its not closed and on new connections is not reused. I could not find how to disconnect form memcache after processing is done, or how to reuse open connections. Maybe someone has some good example of this? Thanks!

From rlotun at gmail.com  Thu Dec 17 05:17:27 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 17 Dec 2009 10:17:27 +0000
Subject: [Twisted-Python] Memcache client issues
In-Reply-To: <4B6E356B-762D-429A-906C-280E2C4F88DA@chown.lv>
References: <4B6E356B-762D-429A-906C-280E2C4F88DA@chown.lv>
Message-ID: <95bb10690912170217w3152ca76j45dd0bd6c258554a@mail.gmail.com>

Hi,

You might want to take a look at the txmemcache project:
https://launchpad.net/tx.memcache

Keep in mind that it might be more useful to use the server hash
function used in python-memcache/cmemcache:
http://www.tummy.com/Community/software/python-memcached/

Reza


-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun


From gabriel.rossetti at arimaz.com  Thu Dec 17 12:40:56 2009
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Thu, 17 Dec 2009 18:40:56 +0100
Subject: [Twisted-Python] copy.deepcopy domish.Element works in python 2.5
	but not in 2.6
Message-ID: <4B2A6D28.3030903@arimaz.com>

Hello everyone,

for some reason copy.deepcopy forks great on a domish.Element on 2.5 but 
not in 2.6 :

Python 2.5.4 (r254:67916, Sep 20 2009, 10:05:43)
[GCC 4.4.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
 >>> from twisted.words.xish import domish
 >>> import copy
 >>> msg = domish.Element(('jabber:client', 'message'))
 >>> msg2 = copy.deepcopy(msg)
 >>>


Python 2.6.4 (r264:75706, Nov  2 2009, 14:38:03)
[GCC 4.4.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
 >>> from twisted.words.xish import domish
 >>> import copy
 >>> msg = domish.Element(('jabber:client', 'message'))
 >>> msg2 = copy.deepcopy(msg)
Exception RuntimeError: 'maximum recursion depth exceeded while calling 
a Python object' in <type 'exceptions.AttributeError'> ignored
 >>>

does someone understand why? I'm using twisted 8.2 on ubuntu 9.10. Thank 
you,
Gabriel


From exarkun at twistedmatrix.com  Thu Dec 17 13:11:13 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 17 Dec 2009 18:11:13 -0000
Subject: [Twisted-Python] copy.deepcopy domish.Element works in python
	2.5	but not in 2.6
In-Reply-To: <4B2A6D28.3030903@arimaz.com>
References: <4B2A6D28.3030903@arimaz.com>
Message-ID: <20091217181113.15596.456256757.divmod.xquotient.407@localhost.localdomain>

On 05:40 pm, gabriel.rossetti at arimaz.com wrote:
>Hello everyone,
>
>for some reason copy.deepcopy forks great on a domish.Element on 2.5 
>but
>not in 2.6 :
>
>Python 2.5.4 (r254:67916, Sep 20 2009, 10:05:43)
>[GCC 4.4.1] on linux2
>Type "help", "copyright", "credits" or "license" for more information.
> >>> from twisted.words.xish import domish
> >>> import copy
> >>> msg = domish.Element(('jabber:client', 'message'))
> >>> msg2 = copy.deepcopy(msg)
> >>>
>
>
>Python 2.6.4 (r264:75706, Nov  2 2009, 14:38:03)
>[GCC 4.4.1] on linux2
>Type "help", "copyright", "credits" or "license" for more information.
> >>> from twisted.words.xish import domish
> >>> import copy
> >>> msg = domish.Element(('jabber:client', 'message'))
> >>> msg2 = copy.deepcopy(msg)
>Exception RuntimeError: 'maximum recursion depth exceeded while calling
>a Python object' in <type 'exceptions.AttributeError'> ignored
> >>>
>
>does someone understand why? I'm using twisted 8.2 on ubuntu 9.10. 
>Thank
>you,
>Gabriel

Actually, it looks like it works about equally well on either version. 
While it looks like an exception was raised by deepcopy on Python 2.6, 
notice that the exception was actually *ignored*.  You get back a copy, 
and it even seems to have all the right attributes. ;)

The infinite recursion in deepcopy happens on Python 2.5 as well.  I'm 
not completely sure why it's not being reported, but it probably has to 
do with tiny differences in how deepcopy works.  hasattr is well known 
for swallowing exceptions silently.  The impressive thing is that the 
error is reported at all in Python 2.6.

A good rule of thumb is to assume that types don't support being copied 
like this unless their docs explicitly state that they do.  If you want 
this to be supported, it's probably not too hard to implement.  Feel 
free to file a ticket with a patch. :)

Jean-Paul


From kevin.horn at gmail.com  Thu Dec 17 16:00:43 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 17 Dec 2009 15:00:43 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
Message-ID: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>

Hmmm...I guess my "send an update every week" idea was a little optimistic.
:)

Again haven't had as much time to devote to this as I would have preferred.
More of Glyph's "real life" getting in the way I guess (had a new baby added
to the household last week!), but here's a quick rundown:

- proposal [1] once again updated, though not much...timeline for "Phase 0"
still needs some work

- lore2sphinx tool: some progress, though I'd hoped for more.  Inclusion of
external files (like code samples) now works, though I'm borking leading
whitespace somewhere, so python files are mis-formatted.  Some of the
whitespace handling is improved (nested lists seem to work OK now), but it
needs more work.  I think I have a general plan for how to fix this, but it
just requires some elbow-grease.  I've also done quite a bit of refactoring,
to make my mess of code a bit easier to grok.  Still to do: tables,
citations, footnotes, and some improved handling of <code> tags, as well as
the afore-mentioned whitespace-handling fixes.

- theme: haven't really started this yet, just a bit of research

- Divmod docs: haven't really touched this yet...it's in the queue

- PyOpenSSL docs: I got an email from Georg Brandl, with a pointer to the
tools used to convert the old LaTeX Python docs to Sphinx [2].  According to
Georg, it may need some tweaking, but should pretty much work for converting
the pyOpenSSL docs.  Looking at the code for this has also helped me a bit
with a few minor problems I was having.  So kudos for Georg!  Also, it looks
like the source of the pyOpenSSL docs are indeed in the source tarball, so
hopefully I can make some headway on this pretty soon.

I'm not really speeding along with this project, but I am making some slow
progress.  As the tortoise said: "Slow and steady wins the race!"

Comments and suggestions welcome!

[1] http://twistedsphinx.funsize.net/proposal.html
[2] http://svn.python.org/projects/doctools/converter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091217/2252134e/attachment.htm 

From exarkun at twistedmatrix.com  Thu Dec 17 16:46:11 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 17 Dec 2009 21:46:11 -0000
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
Message-ID: <20091217214611.15596.1955000551.divmod.xquotient.414@localhost.localdomain>

On 09:00 pm, kevin.horn at gmail.com wrote:
>Hmmm...I guess my "send an update every week" idea was a little 
>optimistic.
>:)

Hi Kevin,

At least you're still getting something out. :)  Thanks for these.
>Again haven't had as much time to devote to this as I would have 
>preferred.
>More of Glyph's "real life" getting in the way I guess (had a new baby 
>added
>to the household last week!), but here's a quick rundown:

Congrats!
>- proposal [1] once again updated, though not much...timeline for 
>"Phase 0"
>still needs some work
>
>- lore2sphinx tool: some progress, though I'd hoped for more. 
>Inclusion of
>external files (like code samples) now works, though I'm borking 
>leading
>whitespace somewhere, so python files are mis-formatted.  Some of the
>whitespace handling is improved (nested lists seem to work OK now), but 
>it
>needs more work.  I think I have a general plan for how to fix this, 
>but it
>just requires some elbow-grease.  I've also done quite a bit of 
>refactoring,
>to make my mess of code a bit easier to grok.  Still to do: tables,
>citations, footnotes, and some improved handling of <code> tags, as 
>well as
>the afore-mentioned whitespace-handling fixes.
>
>- theme: haven't really started this yet, just a bit of research
>
>- Divmod docs: haven't really touched this yet...it's in the queue
>
>- PyOpenSSL docs: I got an email from Georg Brandl, with a pointer to 
>the
>tools used to convert the old LaTeX Python docs to Sphinx [2]. 
>According to
>Georg, it may need some tweaking, but should pretty much work for 
>converting
>the pyOpenSSL docs.  Looking at the code for this has also helped me a 
>bit
>with a few minor problems I was having.  So kudos for Georg!  Also, it 
>looks
>like the source of the pyOpenSSL docs are indeed in the source tarball, 
>so
>hopefully I can make some headway on this pretty soon.

Feel free to find me on IRC if there's anything in this area that bears 
discussion or that you'd like feedback on.
>I'm not really speeding along with this project, but I am making some 
>slow
>progress.  As the tortoise said: "Slow and steady wins the race!"

So true.  Stick with it and I'm sure you'll get there.

Jean-Paul


From glyph at twistedmatrix.com  Thu Dec 17 20:27:53 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Dec 2009 20:27:53 -0500
Subject: [Twisted-Python] Downpour - new project using Twisted
In-Reply-To: <1260908542.21356.34.camel@jeremy-laptop>
References: <1260908542.21356.34.camel@jeremy-laptop>
Message-ID: <DFA5F53F-1D65-4051-9361-D8AC4BB8F154@twistedmatrix.com>


On Dec 15, 2009, at 3:22 PM, Jeremy Jongsma wrote:

> I just posted my latest project - Downpour, a web-based BitTorrent
> client using twisted and twisted-web.  Feel free to try it out and send
> me any comments.  It hasn't been tested on Windows yet, so any trip
> reports for that would also be appreciated.

This looks like a cool project!  Thanks for using Twisted: always great to have another project we can take a slick screenshot of.

> http://home.jongsma.org/software/downpour/
> 
> Could someone add this to the "Projects Using Twisted" page?

Done!  Thanks for submitting it.  Sorry it took so long :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091217/75ed2d75/attachment.htm 

From lists at collab.nl  Thu Dec 17 23:48:57 2009
From: lists at collab.nl (Thijs Triemstra | Collab)
Date: Fri, 18 Dec 2009 04:48:57 +0000
Subject: [Twisted-Python] plugin system
In-Reply-To: <20091215154245.2667.669392555.divmod.xquotient.365@localhost.localdomain>
References: <b302bf880912141548o512f14a4m98ace9f23da22fd2@mail.gmail.com>
	<20091215154245.2667.669392555.divmod.xquotient.365@localhost.localdomain>
Message-ID: <F6988439-DEAC-4121-8161-D8A799EDE491@collab.nl>

On 15 Dec 2009, at 15:42, exarkun at twistedmatrix.com wrote:

> On 14 Dec, 11:48 pm, celord at gmail.com wrote:
>> Guys, I'am new to twisted and I've read the documentation about the
>> plugin system and the components but I can't make it, I really do not
>> get it well, do you guys have any examples there to see if I can get
>> it :)
>>
>> Thanks a lot
>
> Nevow, Axiom, Mantissa, and Quotient all make use of the plugin  
> system.
> eg:
>
> http://divmod.org/trac/browser/trunk/Axiom/twisted/plugins/axiom_plugins.py
>
> Jean-Paul

There's also a example plugin attached to this ticket:
http://twistedmatrix.com/trac/ticket/3281

Cheers,

Thijs

-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20091218/39a16629/attachment.pgp 

From glyph at twistedmatrix.com  Fri Dec 18 00:40:43 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 18 Dec 2009 00:40:43 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
Message-ID: <9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>

On Dec 17, 2009, at 4:00 PM, Kevin Horn wrote:

> Hmmm...I guess my "send an update every week" idea was a little optimistic. :)
> 
> Again haven't had as much time to devote to this as I would have preferred.  More of Glyph's "real life" getting in the way I guess (had a new baby added to the household last week!), but here's a quick rundown:

Wait, *my* "real life" is getting in the way?  I would have figured that if my real life were getting in *both* of our ways, I'd be getting a lot more done! ;-).

Thanks for continuing on with this project, and continuing to write these progress reports.  I'm really looking forward to seeing this plan get executed!

Sadly I don't have any feedback for you because it's hard to tell what's changed since the last time.  Do you have a change log or diffs of some kind somewhere?

> [1] http://twistedsphinx.funsize.net/proposal.html
> [2] http://svn.python.org/projects/doctools/converter

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091218/cadfa6ad/attachment.htm 

From thatmattbone at gmail.com  Fri Dec 18 02:32:57 2009
From: thatmattbone at gmail.com (Matt Bone)
Date: Fri, 18 Dec 2009 01:32:57 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
Message-ID: <dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>

I

On Dec 17, 2009 11:44 PM, "Glyph Lefkowitz" <glyph at twistedmatrix.com> wrote:

On Dec 17, 2009, at 4:00 PM, Kevin Horn wrote: > Hmmm...I guess my "send an
update every week" idea...
Wait, *my* "real life" is getting in the way?  I would have figured that if
my real life were getting in *both* of our ways, I'd be getting a lot more
done! ;-).

Thanks for continuing on with this project, and continuing to write these
progress reports.  I'm really looking forward to seeing this plan get
executed!

Sadly I don't have any feedback for you because it's hard to tell what's
changed since the last time.  Do you have a change log or diffs of some kind
somewhere?

> [1] http://twistedsphinx.funsize.net/proposal.html > [2]
http://svn.python.org/projects/doctool...

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091218/c62b5894/attachment-0001.htm 

From thatmattbone at gmail.com  Fri Dec 18 02:40:49 2009
From: thatmattbone at gmail.com (Matt Bone)
Date: Fri, 18 Dec 2009 01:40:49 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
Message-ID: <dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>

I'm so sorry,  I was trying to express interest in the goings on but
my damn cat walked on the keyboard and sent a blank message.

I'm handy around a text editor/document conversion scripts/sphinx, so
please let me know if there are any simple tasks I can assist with.
Also, I registered for pycon this evening, so please say hello if you
bump into me.  Take care,

--matt

On Fri, Dec 18, 2009 at 1:32 AM, Matt Bone <thatmattbone at gmail.com> wrote:
> I
>
> On Dec 17, 2009 11:44 PM, "Glyph Lefkowitz" <glyph at twistedmatrix.com> wrote:
>
> On Dec 17, 2009, at 4:00 PM, Kevin Horn wrote: > Hmmm...I guess my "send an
> update every week" idea...
>
> Wait, *my* "real life" is getting in the way? ?I would have figured that if
> my real life were getting in *both* of our ways, I'd be getting a lot more
> done! ;-).
> Thanks for continuing on with this project, and continuing to write these
> progress reports. ?I'm really looking forward to seeing this plan get
> executed!
> Sadly I don't have any feedback for you because it's hard to tell what's
> changed since the last time. ?Do you have a change log or diffs of some kind
> somewhere?
>
>> [1] http://twistedsphinx.funsize.net/proposal.html > [2]
>> http://svn.python.org/projects/doctool...
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


From twisted at ralphm.ik.nu  Fri Dec 18 08:37:36 2009
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Fri, 18 Dec 2009 14:37:36 +0100
Subject: [Twisted-Python] copy.deepcopy domish.Element works in python
 2.5	but not in 2.6
In-Reply-To: <20091217181113.15596.456256757.divmod.xquotient.407@localhost.localdomain>
References: <4B2A6D28.3030903@arimaz.com>
	<20091217181113.15596.456256757.divmod.xquotient.407@localhost.localdomain>
Message-ID: <1261143456.11064.11.camel@dwaal>

On Thu, 2009-12-17 at 18:11 +0000, exarkun at twistedmatrix.com wrote:
> On 05:40 pm, gabriel.rossetti at arimaz.com wrote:
> >Hello everyone,
> >
> >for some reason copy.deepcopy forks great on a domish.Element on 2.5 
> >but
> >not in 2.6 :
>
> Actually, it looks like it works about equally well on either version. 
> While it looks like an exception was raised by deepcopy on Python 2.6, 
> notice that the exception was actually *ignored*.  You get back a copy, 
> and it even seems to have all the right attributes. ;)
> 
> The infinite recursion in deepcopy happens on Python 2.5 as well.  I'm 
> not completely sure why it's not being reported, but it probably has to 
> do with tiny differences in how deepcopy works.  hasattr is well known 
> for swallowing exceptions silently.  The impressive thing is that the 
> error is reported at all in Python 2.6.
> 
> A good rule of thumb is to assume that types don't support being copied 
> like this unless their docs explicitly state that they do.  If you want 
> this to be supported, it's probably not too hard to implement.  Feel 
> free to file a ticket with a patch. :)

There is an open ticket about this:

  http://twistedmatrix.com/trac/ticket/724

In short: it is probably a bad idea, and I'm curious about the possible
useful use cases.

ralphm





From kevin.horn at gmail.com  Fri Dec 18 12:23:46 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 18 Dec 2009 11:23:46 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
Message-ID: <562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>

On Fri, Dec 18, 2009 at 1:40 AM, Matt Bone <thatmattbone at gmail.com> wrote:

> I'm so sorry,  I was trying to express interest in the goings on but
> my damn cat walked on the keyboard and sent a blank message.
>

If I'd been drinking milk when I read this, it would have come out my nose.
The same thing has actually happened to me. :)


> I'm handy around a text editor/document conversion scripts/sphinx, so
> please let me know if there are any simple tasks I can assist with.
> Also, I registered for pycon this evening, so please say hello if you
> bump into me.  Take care,
>
> --matt
>

Thanks for the offer, I'll probably take you up on it at some point.  If you
(or anyone) would like to go ahead and start work on a Sphinx theme for the
Twisted docs, I think that would be easy to work on in parallel to my own
efforts.  As far as the actual conversion, I think I have ideas for my
remaining issues, it's just a matter of finding the time to work on them.  I
expect another set of eyes would be useful once I get things into a more
understandable state though, if you'd like to volunteer for that.

Sadly I probably won't make it to PyCon this year, though I haven't
_entirely_ ruled out the possibility.  Which really sucks, as it looks like
it will likely be the best ever. :(

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091218/342897be/attachment.htm 

From drew.smathers at gmail.com  Fri Dec 18 12:28:38 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Fri, 18 Dec 2009 12:28:38 -0500
Subject: [Twisted-Python] Memcache client issues
In-Reply-To: <95bb10690912170217w3152ca76j45dd0bd6c258554a@mail.gmail.com>
References: <4B6E356B-762D-429A-906C-280E2C4F88DA@chown.lv>
	<95bb10690912170217w3152ca76j45dd0bd6c258554a@mail.gmail.com>
Message-ID: <368574aa0912180928r40d91fcerc8cc58e4754986ed@mail.gmail.com>

On Thu, Dec 17, 2009 at 5:17 AM, Reza Lotun <rlotun at gmail.com> wrote:

> Hi,
>
> You might want to take a look at the txmemcache project:
> https://launchpad.net/tx.memcache
>
>
Please proceed with utmost caution if you choose to use tx.memcache - I
wrote this for a small utility script for a project that got axed, and I'm
not using memcache for any production apps now.  So, due to it not being
fully complete, tested in production, or even unit tested, expect the same
level of grandness in terms of stability.

The hashing function is pluggable, and it worked fine for my purposes.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091218/a2061153/attachment.htm 

From kevin.horn at gmail.com  Fri Dec 18 12:29:37 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 18 Dec 2009 11:29:37 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
Message-ID: <562bcc10912180929m1f8c4390l976462b525c960c1@mail.gmail.com>

On Thu, Dec 17, 2009 at 11:40 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

> On Dec 17, 2009, at 4:00 PM, Kevin Horn wrote:
>
> Hmmm...I guess my "send an update every week" idea was a little optimistic.
> :)
>
> Again haven't had as much time to devote to this as I would have
> preferred.  More of Glyph's "real life" getting in the way I guess (had a
> new baby added to the household last week!), but here's a quick rundown:
>
>
> Wait, *my* "real life" is getting in the way?  I would have figured that if
> my real life were getting in *both* of our ways, I'd be getting a lot more
> done! ;-).
>

I was referring to the Lefkowitz Definition of Real Life(tm):

Real life: N. That which interferes with the generation of nifty open-source
code.

:)


> Thanks for continuing on with this project, and continuing to write these
> progress reports.  I'm really looking forward to seeing this plan get
> executed!
>
> Sadly I don't have any feedback for you because it's hard to tell what's
> changed since the last time.  Do you have a change log or diffs of some kind
> somewhere?
>

Well, I've got the code (and proposal) in an SVN repos, but it's not public,
and I can't really make it so (long story). I've got an item on my TODO list
to extract it from there and put it up someplace else, but I haven't gotten
to it yet...

In the meantime, I can post a diff of the proposal if you like, or a part of
my SVN log, but you really haven't missed anything significant on the
proposal, I'm afraid.  Mostly just a minor cleanup.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091218/e4294455/attachment.htm 

From drew.smathers at gmail.com  Fri Dec 18 12:32:42 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Fri, 18 Dec 2009 12:32:42 -0500
Subject: [Twisted-Python] Memcache client issues
In-Reply-To: <4B6E356B-762D-429A-906C-280E2C4F88DA@chown.lv>
References: <4B6E356B-762D-429A-906C-280E2C4F88DA@chown.lv>
Message-ID: <368574aa0912180932xbeaf193gd4a3f69f87e4ea06@mail.gmail.com>

On Wed, Dec 16, 2009 at 2:34 PM, M?risR <maris at chown.lv> wrote:

> Hello!
> I'm trying to write small tcp server, which doing some stuff with memcache.
> Everything was fine until I start it on production, after few minutes I got
> to rollback to old one. My script got max open files limit :( After  liitle
> inspection, I saw that, new connection to my daemon opens new connection to
> memcache and after disconnect its not closed and on new connections is not
> reused. I could not find how to disconnect form memcache after processing is
> done, or how to reuse open connections. Maybe someone has some good example
> of this? Thanks!
>


Sorry to post twice on this, but setting aside tx.memcache or other
abstractions over the memcache client, I never had any problems with leaking
connections; that is tx.memcache wasn't written to address such a problem,
so I don't think using it would necessarily solve your issues.  Can you post
some code for a short program that reproduces the problem you're describing?

-Drew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091218/18a087c1/attachment.htm 

From kevin.horn at gmail.com  Fri Dec 18 13:46:32 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 18 Dec 2009 12:46:32 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
Message-ID: <562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>

On Fri, Dec 18, 2009 at 11:23 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> On Fri, Dec 18, 2009 at 1:40 AM, Matt Bone <thatmattbone at gmail.com> wrote:
>
>> I'm so sorry,  I was trying to express interest in the goings on but
>> my damn cat walked on the keyboard and sent a blank message.
>>
>
> If I'd been drinking milk when I read this, it would have come out my
> nose.  The same thing has actually happened to me. :)
>
>
>> I'm handy around a text editor/document conversion scripts/sphinx, so
>> please let me know if there are any simple tasks I can assist with.
>> Also, I registered for pycon this evening, so please say hello if you
>> bump into me.  Take care,
>>
>> --matt
>>
>
> Thanks for the offer, I'll probably take you up on it at some point.  If
> you (or anyone) would like to go ahead and start work on a Sphinx theme for
> the Twisted docs, I think that would be easy to work on in parallel to my
> own efforts.  As far as the actual conversion, I think I have ideas for my
> remaining issues, it's just a matter of finding the time to work on them.  I
> expect another set of eyes would be useful once I get things into a more
> understandable state though, if you'd like to volunteer for that.
>
> Sadly I probably won't make it to PyCon this year, though I haven't
> _entirely_ ruled out the possibility.  Which really sucks, as it looks like
> it will likely be the best ever. :(
>
> Kevin Horn
>
>
>
Other tasks that can help move this forward, but that don't require work on
the actual conversion code:

- identify branches which have lore patches in them
- identify tickets which propose to fix/modify Lore functionality
- identify wiki pages that need to be changed, and the necessary changes
- make suggestions on the overall conversion process, as documented in the
proposal.


If anyone is interested in helping out, just say so here, or drop me a line
off-list.

I'm also happy to send a copy of the code I have so far to anyone who's
interested...just send me an email off list, and I'll send you a tarball.

And if anyone has suggestions about where/how to share the code someplace,
I'm happy to listen to those too.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091218/71696b99/attachment.htm 

From termim at gmail.com  Fri Dec 18 14:51:50 2009
From: termim at gmail.com (Mikhail Terekhov)
Date: Fri, 18 Dec 2009 14:51:50 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
Message-ID: <12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>

On Fri, Dec 18, 2009 at 1:46 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> I'm also happy to send a copy of the code I have so far to anyone who's
> interested...just send me an email off list, and I'll send you a tarball.
>
What about putting it into Twisted's SVN, i.e. into sandbox?

Regards,
-- 
Mikhail Terekhov


From ssteinerx at gmail.com  Fri Dec 18 15:07:27 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Fri, 18 Dec 2009 15:07:27 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
Message-ID: <3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>


On Dec 18, 2009, at 2:51 PM, Mikhail Terekhov wrote:

> On Fri, Dec 18, 2009 at 1:46 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>> 
>> I'm also happy to send a copy of the code I have so far to anyone who's
>> interested...just send me an email off list, and I'll send you a tarball.
>> 
> What about putting it into Twisted's SVN, i.e. into sandbox?

Or, pop it up on BitBucket?

S



From kevin.horn at gmail.com  Fri Dec 18 15:37:39 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 18 Dec 2009 14:37:39 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
Message-ID: <562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>

On Fri, Dec 18, 2009 at 2:07 PM, ssteinerX at gmail.com <ssteinerx at gmail.com>wrote:

>
> On Dec 18, 2009, at 2:51 PM, Mikhail Terekhov wrote:
>
> > On Fri, Dec 18, 2009 at 1:46 PM, Kevin Horn <kevin.horn at gmail.com>
> wrote:
> >>
> >> I'm also happy to send a copy of the code I have so far to anyone who's
> >> interested...just send me an email off list, and I'll send you a
> tarball.
> >>
> > What about putting it into Twisted's SVN, i.e. into sandbox?
>
> Or, pop it up on BitBucket?
>
> S
>
>
I don't currently have access to Twisted SVN (as far as I know, anyway), but
if the Twisted guys want to give me access, I'm fine with that.

Otherwise, BitBucket is probably the best option, though it'll be a little
bit of a learning curve for me.  I've used Mercurial a little bit, but never
for a "real" project, and I've never used BiBucket (though I think I have an
account, for some reason).

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091218/8b219033/attachment.htm 

From glyph at twistedmatrix.com  Fri Dec 18 15:51:51 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 18 Dec 2009 15:51:51 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
Message-ID: <8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>


On Dec 18, 2009, at 3:37 PM, Kevin Horn wrote:

> I don't currently have access to Twisted SVN (as far as I know, anyway), but if the Twisted guys want to give me access, I'm fine with that.

I'm not particularly opposed to it, but at this stage I don't think it would help very much either.  The sandbox is a crummy place to stage stuff.

> Otherwise, BitBucket is probably the best option, though it'll be a little bit of a learning curve for me.  I've used Mercurial a little bit, but never for a "real" project, and I've never used BiBucket (though I think I have an account, for some reason).

We already have an active mirror of Twisted on launchpad <https://code.launchpad.net/twisted>, which might be easier to get started with if you want to make a branch for the *output* of the conversion.  lore2sphinx itself could probably live anywhere, though.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091218/b3bd48b0/attachment.htm 

From ssteinerx at gmail.com  Fri Dec 18 16:50:13 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Fri, 18 Dec 2009 16:50:13 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
Message-ID: <848340B6-821D-47C4-9465-71E653271EED@gmail.com>

> Otherwise, BitBucket is probably the best option, though it'll be a little bit of a learning curve for me.  I've used Mercurial a little bit, but never for a "real" project, and I've never used BiBucket (though I think I have an account, for some reason).

I'll give you a hand with BitBucket if you'd like; just contact me off-list.

S



From kevin.horn at gmail.com  Fri Dec 18 16:45:44 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 18 Dec 2009 15:45:44 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
	<8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>
Message-ID: <562bcc10912181345jb3084b7p4baecb7351c4d565@mail.gmail.com>

On Fri, Dec 18, 2009 at 2:51 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Dec 18, 2009, at 3:37 PM, Kevin Horn wrote:
>
> I don't currently have access to Twisted SVN (as far as I know, anyway),
> but if the Twisted guys want to give me access, I'm fine with that.
>
>
> I'm not particularly opposed to it, but at this stage I don't think it
> would help very much either.  The sandbox is a crummy place to stage stuff.
>
> Otherwise, BitBucket is probably the best option, though it'll be a little
> bit of a learning curve for me.  I've used Mercurial a little bit, but never
> for a "real" project, and I've never used BiBucket (though I think I have an
> account, for some reason).
>
>
> We already have an active mirror of Twisted on launchpad <
> https://code.launchpad.net/twisted>, which might be easier to get started
> with if you want to make a branch for the *output* of the conversion.
>  lore2sphinx itself could probably live anywhere, though.
>
>
I think I'll probably end up putting lore2sphinx up on BitBucket...when I
get around to it.  Hopefully I'll get around to doing this in the next week
or so, but with the holidays coming up, I wouldn't hold my breath. ;)

I don't see a whole lot of point in putting the output into any sort of
version control at this point, since the idea is not to edit it at this
stage.  I'll continue to put up my results at
http://twistedsphinx.funsize.net periodically just for people to look at,
though.

Once the automated conversion part of this is "done", it will make sense
(and indeed be necessary) to VC the Sphinx sources, though.

BTW...footnotes work now. :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091218/5ffa3f77/attachment.htm 

From termim at gmail.com  Fri Dec 18 17:51:18 2009
From: termim at gmail.com (Mikhail Terekhov)
Date: Fri, 18 Dec 2009 17:51:18 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912181345jb3084b7p4baecb7351c4d565@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
	<8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>
	<562bcc10912181345jb3084b7p4baecb7351c4d565@mail.gmail.com>
Message-ID: <12aaa0810912181451i333ef926k974af83233627bcf@mail.gmail.com>

On Fri, Dec 18, 2009 at 4:45 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
> I don't see a whole lot of point in putting the output into any sort of
> version control at this point, since the idea is not to edit it at this
> stage.? I'll continue to put up my results at
> http://twistedsphinx.funsize.net periodically just for people to look at,
> though.
>

May be then attach it to some ticket in Trac?

Regards,
-- 
Mikhail Terekhov


From kevin.horn at gmail.com  Fri Dec 18 18:25:35 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 18 Dec 2009 17:25:35 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <12aaa0810912181451i333ef926k974af83233627bcf@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
	<8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>
	<562bcc10912181345jb3084b7p4baecb7351c4d565@mail.gmail.com>
	<12aaa0810912181451i333ef926k974af83233627bcf@mail.gmail.com>
Message-ID: <562bcc10912181525o309609c4q77074172818fe830@mail.gmail.com>

On Fri, Dec 18, 2009 at 4:51 PM, Mikhail Terekhov <termim at gmail.com> wrote:

> On Fri, Dec 18, 2009 at 4:45 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
> > I don't see a whole lot of point in putting the output into any sort of
> > version control at this point, since the idea is not to edit it at this
> > stage.  I'll continue to put up my results at
> > http://twistedsphinx.funsize.net periodically just for people to look
> at,
> > though.
> >
>
> May be then attach it to some ticket in Trac?
>
>
I could, but I don't see a whole lot of point at this stage, since the
output changes every time I update and run my conversion script.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091218/ff02cd92/attachment.htm 

From rlotun at gmail.com  Fri Dec 18 19:35:17 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Sat, 19 Dec 2009 00:35:17 +0000
Subject: [Twisted-Python] Memcache client issues
In-Reply-To: <368574aa0912180928r40d91fcerc8cc58e4754986ed@mail.gmail.com>
References: <4B6E356B-762D-429A-906C-280E2C4F88DA@chown.lv>
	<95bb10690912170217w3152ca76j45dd0bd6c258554a@mail.gmail.com>
	<368574aa0912180928r40d91fcerc8cc58e4754986ed@mail.gmail.com>
Message-ID: <95bb10690912181635m37672afdsa584e3b8d730e8d@mail.gmail.com>

Hi Drew,

> Please proceed with utmost caution if you choose to use tx.memcache - I
> wrote this for a small utility script for a project that got axed, and I'm
> not using memcache for any production apps now. ?So, due to it not being
> fully complete, tested in production, or even unit tested, expect the same
> level of grandness in terms of stability.

Thanks for writing it, by the way. When I first got around to playing
with memcached in my Twisted app, your project was really the only
thing out there that I could find that spoke Twisted and memcached. It
was a great place to *start* in terms of customizing something for my
own needs.

> The hashing function is pluggable, and it worked fine for my purposes.

Well, the default hashing function is quite slow. If I was dealing
with a Twisted-only memcached integration, I would probably use the
built-in python hash function. If I were integrating with other apps
sharing the same memcached pool - like a Django web app - I would  use
the python-memcache server hash for sure.

Cheers,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun


From exarkun at twistedmatrix.com  Sun Dec 20 00:05:12 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 20 Dec 2009 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1261285512.69.346908633@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091220/021e0e42/attachment.htm 

From jml at mumak.net  Mon Dec 21 00:03:07 2009
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 21 Dec 2009 16:03:07 +1100
Subject: [Twisted-Python] Coding standard question: flowing long imports
	with parens
Message-ID: <d06a5cd30912202103n5a86dba9tc31eb3488001eab8@mail.gmail.com>

Hello,

This is a very unimportant question, and I have no stake in the
outcome beyond curiosity. It's bikeshed potential is high, and I'd
like to avoid that if possible.

The "Whitespace" section of the coding standard[1] says:

"""
To handle long import lines, please repeat the import like this:

from very.long.package import foo, bar, baz
from very.long.package import qux, quux, quuux
"""

Now that we no longer support Python 2.3, may we also allow imports in
the following style?

  from very.long.package import (
    bar,
    foo,
    )

I don't care so much about the newlines, I'm mostly interested in
using parens to avoid repeating the long package names. That said,
newline separation and alpha-sorted imports greatly reduce the
probability of conflicts.

jml


From terry at jon.es  Mon Dec 21 08:30:28 2009
From: terry at jon.es (Terry Jones)
Date: Mon, 21 Dec 2009 14:30:28 +0100
Subject: [Twisted-Python] A resizable cooperator class for queuing and
	dispatching jobs
In-Reply-To: Your message at 10:09:16 on Friday, 11 December 2009
References: <19231.8959.296355.40332@jon.es> <4B207222.6070008@krondo.com>
	<19232.50673.973763.680203@jon.es> <4B21BE48.9090205@krondo.com>
	<19234.12473.915610.485018@jon.es>
	<57016BCA-9412-4D2E-BAD7-AF5F611265AC@gmail.com>
Message-ID: <19247.30836.658531.186499@jon.es>

I forgot to mention that I put the code for this class onto Launchpad:
https://launchpad.net/txrdq

Terry


From foom at fuhm.net  Mon Dec 21 10:20:50 2009
From: foom at fuhm.net (James Y Knight)
Date: Mon, 21 Dec 2009 10:20:50 -0500
Subject: [Twisted-Python] Coding standard question: flowing long imports
	with parens
In-Reply-To: <d06a5cd30912202103n5a86dba9tc31eb3488001eab8@mail.gmail.com>
References: <d06a5cd30912202103n5a86dba9tc31eb3488001eab8@mail.gmail.com>
Message-ID: <2A3E9F67-B4B2-4CCB-8D10-F74E68A1D7E5@fuhm.net>

On Dec 21, 2009, at 12:03 AM, Jonathan Lange wrote:
> Now that we no longer support Python 2.3, may we also allow imports in
> the following style?
>
>  from very.long.package import (
>    bar,
>    foo,
>    )


Separating "from X import" and "Y" over a newline totally breaks  
grepping for imported modules. I'd not use it myself, purely because  
of that, except perhaps when the "Y"s are functions in a module,  
rather than modules.

James



From glyph at twistedmatrix.com  Mon Dec 21 11:10:19 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 21 Dec 2009 11:10:19 -0500
Subject: [Twisted-Python] Coding standard question: flowing long imports
	with parens
In-Reply-To: <2A3E9F67-B4B2-4CCB-8D10-F74E68A1D7E5@fuhm.net>
References: <d06a5cd30912202103n5a86dba9tc31eb3488001eab8@mail.gmail.com>
	<2A3E9F67-B4B2-4CCB-8D10-F74E68A1D7E5@fuhm.net>
Message-ID: <C40FEE1A-D9C1-467D-BA46-E8CD196D7619@twistedmatrix.com>


On Dec 21, 2009, at 10:20 AM, James Y Knight wrote:

> On Dec 21, 2009, at 12:03 AM, Jonathan Lange wrote:
>> Now that we no longer support Python 2.3, may we also allow imports in
>> the following style?
>> 
>> from very.long.package import (
>>   bar,
>>   foo,
>>   )
> 
> 
> Separating "from X import" and "Y" over a newline totally breaks  
> grepping for imported modules. I'd not use it myself, purely because  
> of that, except perhaps when the "Y"s are functions in a module,  
> rather than modules.

I'm a fan of this style, because it's easier to read and it involves a lot less duplication... at the same time, I can see the 'grep' case.  Anybody want to write a tool which uses the AST to look for name imports?  This would generally be handy anyway :).



From robert.kern at gmail.com  Mon Dec 21 12:27:08 2009
From: robert.kern at gmail.com (Robert Kern)
Date: Mon, 21 Dec 2009 11:27:08 -0600
Subject: [Twisted-Python] Coding standard question: flowing long imports
	with parens
In-Reply-To: <C40FEE1A-D9C1-467D-BA46-E8CD196D7619@twistedmatrix.com>
References: <d06a5cd30912202103n5a86dba9tc31eb3488001eab8@mail.gmail.com>	<2A3E9F67-B4B2-4CCB-8D10-F74E68A1D7E5@fuhm.net>
	<C40FEE1A-D9C1-467D-BA46-E8CD196D7619@twistedmatrix.com>
Message-ID: <hgob5f$m7m$1@ger.gmane.org>

On 2009-12-21 10:10 AM, Glyph Lefkowitz wrote:
>
> On Dec 21, 2009, at 10:20 AM, James Y Knight wrote:
>
>> On Dec 21, 2009, at 12:03 AM, Jonathan Lange wrote:
>>> Now that we no longer support Python 2.3, may we also allow imports in
>>> the following style?
>>>
>>> from very.long.package import (
>>>    bar,
>>>    foo,
>>>    )
>>
>>
>> Separating "from X import" and "Y" over a newline totally breaks
>> grepping for imported modules. I'd not use it myself, purely because
>> of that, except perhaps when the "Y"s are functions in a module,
>> rather than modules.
>
> I'm a fan of this style, because it's easier to read and it involves a lot less duplication... at the same time, I can see the 'grep' case.  Anybody want to write a tool which uses the AST to look for name imports?  This would generally be handy anyway :).

Done.

   http://pypi.python.org/pypi/grin
   https://svn.enthought.com/svn/sandbox/grin/trunk/examples/grinimports.py

grin is a mostly general purpose grepping tool that I wrote, slightly 
specialized for grepping code in VCS checkouts. grinimports.py is an example of 
using it as a library. It uses the AST to normalize import statements. E.g.

   from very.long.package import bar, foo
   import os, sys

turns into

   from very.long.package import bar
   from very.long.package import foo
   import os
   import sys

The grep pattern then runs over the normalized text.

I find this much more robust than grepping the plain text. With all of the 
variations in the import syntax, it's difficult to find a grep pattern that gets 
all of the desired imports and rejects enough of the non-import statements. A 
side effect is that it's easy to get a nice list of all of the import statements 
in your codebase.

   $ grinimports.py --no-color ''

-- 
Robert Kern

"I have come to believe that the whole world is an enigma, a harmless enigma
  that is made terrible by our own mad attempt to interpret it as though it had
  an underlying truth."
   -- Umberto Eco



From landreville at deadtreepages.com  Mon Dec 21 12:36:35 2009
From: landreville at deadtreepages.com (Landreville)
Date: Mon, 21 Dec 2009 12:36:35 -0500
Subject: [Twisted-Python] Websites down
Message-ID: <9d748c780912210936j5ab84ef3q401252761a4b40b6@mail.gmail.com>

I'm getting an error from?http://twistedmatrix.com

Error 503 Service Unavailable

Service Unavailable

Guru Meditation:

XID: 1274684191

Varnish


From glyph at twistedmatrix.com  Mon Dec 21 19:55:42 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 21 Dec 2009 19:55:42 -0500
Subject: [Twisted-Python] Coding standard question: flowing long imports
	with parens
In-Reply-To: <hgob5f$m7m$1@ger.gmane.org>
References: <d06a5cd30912202103n5a86dba9tc31eb3488001eab8@mail.gmail.com>	<2A3E9F67-B4B2-4CCB-8D10-F74E68A1D7E5@fuhm.net>
	<C40FEE1A-D9C1-467D-BA46-E8CD196D7619@twistedmatrix.com>
	<hgob5f$m7m$1@ger.gmane.org>
Message-ID: <5DE8BA4C-76F3-4F6C-B35A-4B7EA96AED1A@twistedmatrix.com>


On Dec 21, 2009, at 12:27 PM, Robert Kern wrote:

> On 2009-12-21 10:10 AM, Glyph Lefkowitz wrote:
>> 
>> On Dec 21, 2009, at 10:20 AM, James Y Knight wrote:
>>> On Dec 21, 2009, at 12:03 AM, Jonathan Lange wrote:
>>>> Now that we no longer support Python 2.3, may we also allow imports in
>>>> the following style?
>>>> from very.long.package import (
>>>>   bar,
>>>>   foo)
>>> Separating "from X import" and "Y" over a newline totally breaks
>>> grepping for imported modules. 
>> I'm a fan of this style, because it's easier to read and it involves a lot less duplication(...) Anybody want to write a tool which uses the AST to look for name imports?
> Done.

Well, that's certainly a good argument in favor of the abbreviated style, then! :)

> I find this much more robust than grepping the plain text. With all of the 
> variations in the import syntax, it's difficult to find a grep pattern that gets 
> all of the desired imports and rejects enough of the non-import statements. A 
> side effect is that it's easy to get a nice list of all of the import statements 
> in your codebase.
> 
>   $ grinimports.py --no-color ''

This is handy, and a bit more reliable than an unstructured import, but what I *really* want is the ability to say "what depends on this", where "this" is a fully-qualified dotted name in Python.  The weakness of grinimports seems to be that for each additional level of nesting, you need to add an additional regular expression; plus, depending on something could either be importing it, or accessing it as an attribute of a different name that was imported.  Similarly, I have been missing smalltalk's "all senders of" and "all implementors of" functionality since I discovered it many years ago, despite the fact that I never really used Smalltalk for much.  Any chance you have any of those lying around in a different examples directory?



From general at vultaire.net  Tue Dec 22 02:14:45 2009
From: general at vultaire.net (Paul Goins)
Date: Tue, 22 Dec 2009 16:14:45 +0900
Subject: [Twisted-Python] Question about TAC apps and TCPClient/Server vs
	reactor.connect/listenTCP
Message-ID: <4B3071E5.5050506@vultaire.net>

I'm embarrassed to ask about this, but I think my understanding may be
unclear about the differences in how the various TCP connection
functions work in Twisted.

For the record, I have read the docs at
http://twistedmatrix.com/documents/current/core/howto/application.html.
 But if I missed something key there, please point it out.

Got a TAC application, currently implemented using several TCPServer
objects.  Got a web service running as the main app, with MySQL and AMQP
connections also set up the same way, and probably I'll be adding a
memcached TCPClient in the near future.

The issue is this: I now need to support selectively turning on and off
these various components of the software.  Also, some services may not
always be needed, so specifying as part of the service hierarchy doesn't
seem correct.

Any suggestions of how to do this?  Should I be specifying only "core"
stuff as services of the application object, and connecting the others
via reactor.connectTCP/listenTCP as needed?  Can I add to and remove
services from the application object once the reactor starts?

Thanks.

- Paul


From andrew at bemusement.org  Tue Dec 22 02:39:08 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 22 Dec 2009 18:39:08 +1100
Subject: [Twisted-Python] Question about TAC apps and TCPClient/Server
 vs reactor.connect/listenTCP
In-Reply-To: <4B3071E5.5050506@vultaire.net>
References: <4B3071E5.5050506@vultaire.net>
Message-ID: <20091222073908.GA6351@steerpike.home.puzzling.org>

Paul Goins wrote:
[...]
> 
> Any suggestions of how to do this?  Should I be specifying only "core"
> stuff as services of the application object, and connecting the others
> via reactor.connectTCP/listenTCP as needed?  Can I add to and remove
> services from the application object once the reactor starts?

Yes, you can add and remove services from the application object once
the reactor starts.

To remove a service, use the disownServiceParent method of the service
(as suggested by the docstring of
http://twistedmatrix.com/documents/current/api/twisted.application.service.IServiceCollection.html#removeService).
The docstrings aren't 100% explicit about this, but that will stop the
service.  As you might guess, you can add services with setServiceParent
at any time too.

That said, if plain connectTCP/listenTCP are more convenient for you
than the corresponding IService implementations, then feel free to use
them instead.

-Andrew.



From robert.kern at gmail.com  Tue Dec 22 12:19:11 2009
From: robert.kern at gmail.com (Robert Kern)
Date: Tue, 22 Dec 2009 11:19:11 -0600
Subject: [Twisted-Python] Coding standard question: flowing long imports
	with parens
In-Reply-To: <5DE8BA4C-76F3-4F6C-B35A-4B7EA96AED1A@twistedmatrix.com>
References: <d06a5cd30912202103n5a86dba9tc31eb3488001eab8@mail.gmail.com>	<2A3E9F67-B4B2-4CCB-8D10-F74E68A1D7E5@fuhm.net>	<C40FEE1A-D9C1-467D-BA46-E8CD196D7619@twistedmatrix.com>	<hgob5f$m7m$1@ger.gmane.org>
	<5DE8BA4C-76F3-4F6C-B35A-4B7EA96AED1A@twistedmatrix.com>
Message-ID: <hgqv2f$bpa$1@ger.gmane.org>

On 2009-12-21 18:55 PM, Glyph Lefkowitz wrote:

> This is handy, and a bit more reliable than an unstructured import, but what I *really* want is the ability to say "what depends on this", where "this" is a fully-qualified dotted name in Python.  The weakness of grinimports seems to be that for each additional level of nesting, you need to add an additional regular expression; plus, depending on something could either be importing it, or accessing it as an attribute of a different name that was imported.  Similarly, I have been missing smalltalk's "all senders of" and "all implementors of" functionality since I discovered it many years ago, despite the fact that I never really used Smalltalk for much.  Any chance you have any of those lying around in a different examples directory?

Not from me:

   http://furius.ca/snakefood/

I'm not sure there is anything you can do about references like "import twisted; 
twisted.python.versions.Version", but snakefood should handle relative imports 
mostly correctly.

-- 
Robert Kern

"I have come to believe that the whole world is an enigma, a harmless enigma
  that is made terrible by our own mad attempt to interpret it as though it had
  an underlying truth."
   -- Umberto Eco



From kevin.horn at gmail.com  Tue Dec 22 17:15:35 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 22 Dec 2009 16:15:35 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912181525o309609c4q77074172818fe830@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
	<8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>
	<562bcc10912181345jb3084b7p4baecb7351c4d565@mail.gmail.com>
	<12aaa0810912181451i333ef926k974af83233627bcf@mail.gmail.com>
	<562bcc10912181525o309609c4q77074172818fe830@mail.gmail.com>
Message-ID: <562bcc10912221415g4acf7375qc74826231d367396@mail.gmail.com>

BTW, lore2sphinx and accompanying Sphinx skeleton project now up on
bitbucket here:
http://bitbucket.org/khorn/lore2sphinx/

Thanks to ssteinerX for guiding me through the process.

Enjoy!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091222/1c47b158/attachment.htm 

From lists at collab.nl  Wed Dec 23 20:06:32 2009
From: lists at collab.nl (Thijs Triemstra | Collab)
Date: Thu, 24 Dec 2009 02:06:32 +0100
Subject: [Twisted-Python] Decide on and document Python version support
	policy
Message-ID: <D241023D-2FE8-4EDE-8664-3D9EBA975BD6@collab.nl>

So there's ticket #1234 to deal with, and since Python 2.3 support for Twisted recently seems to have been dropped, I wonder what the policy should be?

Cheers,

Thijs

[1] http://twistedmatrix.com/trac/ticket/2541

From exarkun at twistedmatrix.com  Wed Dec 23 22:26:38 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 24 Dec 2009 03:26:38 -0000
Subject: [Twisted-Python] Decide on and document Python version
	support	policy
In-Reply-To: <D241023D-2FE8-4EDE-8664-3D9EBA975BD6@collab.nl>
References: <D241023D-2FE8-4EDE-8664-3D9EBA975BD6@collab.nl>
Message-ID: <20091224032638.15596.706190002.divmod.xquotient.530@localhost.localdomain>

On 01:06 am, lists at collab.nl wrote:
>So there's ticket #1234 to deal with, and since Python 2.3 support for 
>Twisted recently seems to have been dropped, I wonder what the policy 
>should be?

I don't know what should be done to resolve the ticket.  Here's why we 
dropped Python 2.3 support post-9.0, though:

  * Developers complain from time to time about having to support Python 
2.3

  * Running builders for the upcoming Python 2.7 release is going to 
over-tax our build slave farm.  Dropping Python 2.3 gives us *little* 
breathing room here (but we're still short on, eg, Windows, where we 
haven't been testing Python 2.3 for quite a while anyway).

  * No reasonably current releases of mainstream platforms that I'm aware 
of are still bound to Python 2.3.

Jean-Paul


From tim at commsecure.com.au  Wed Dec 23 23:17:40 2009
From: tim at commsecure.com.au (Tim Allen)
Date: Thu, 24 Dec 2009 15:17:40 +1100
Subject: [Twisted-Python] Decide on and document Python version	support
 policy
In-Reply-To: <20091224032638.15596.706190002.divmod.xquotient.530@localhost.localdomain>
References: <D241023D-2FE8-4EDE-8664-3D9EBA975BD6@collab.nl>
	<20091224032638.15596.706190002.divmod.xquotient.530@localhost.localdomain>
Message-ID: <4B32EB64.6050104@commsecure.com.au>

On 12/24/2009 02:26 PM, exarkun at twistedmatrix.com wrote:
>    * No reasonably current releases of mainstream platforms that I'm aware
> of are still bound to Python 2.3.

http://www.redhat.com/security/updates/errata/

RHEL4 is still bound to Python 2.3, and only enters the "production 3" 
phase (also known as "please, please upgrade") in 2009Q4, but is 
supported for "qualified security errata of important or critical impact 
and selected mission critical bug fixes" until February 29, 2012.

I suspect most potential and current Twisted users on RHEL4 or CentOS4 
are either using an existing version of Twisted that still works with 
Python 2.3, or already planning on upgrading to RHEL5, so "Twisted drops 
support for old versions of Python when the associated RHEL release 
enters Production 3" seems a pretty reasonable policy.

RHEL5 with Python 2.4 enters Production 3 "no earlier than Q1 of 2012". 
If we're lucky, RHEL6 will come with Python 2.6 or even 2.7 rather than 2.5.


From screwtape at froup.com  Thu Dec 24 00:37:47 2009
From: screwtape at froup.com (Tim Allen)
Date: Thu, 24 Dec 2009 16:37:47 +1100
Subject: [Twisted-Python] Some news about currently-pending code-reviews
Message-ID: <20091224053747.GC1637@thristian.org>

First, a public service announcement about code-reviews: I'm not
a Twisted Developer, I'm just a guy who submitted a patch and got talked
into helping out by reviewing other people's Twisted patches while I was
waiting for other people to review mine. You don't have to be a Twisted
expert to help out, and don't worry about whether you're experienced
enough to spot every possible problem - most patches get reviewed *at
least* two or three times by different people, and every problem you
pick up and the developer addresses is one less issue the next reviewer
has to think about.

As I've started reviewing over the past week or two, the developers
whose code I've reviewed and the regulars in the #twisted IRC channel
have all been super-helpful, and I highly recommend code-reviewing as
a pleasant way to spend an idle afternoon. Everything you need to know
to get started should be listed here:

    http://twistedmatrix.com/trac/wiki/ReviewProcess

----------------------------------------------------------------------

As I mentioned above, I've been doing Twisted code-reviews recently, and
I've seen a few tickets in particular I thought the general Twisted
community might like to know about, if not help out with. :)


http://twistedmatrix.com/trac/ticket/3956
Add arraysize option to runQuery in adbapi

 - The "arraysize" property is the only writable cursor property defined
   by DBAPI2. Setting it can make the .fetchall() method faster with
   some DB modules, but Twisted's adbapi module offers no way to set it.
 - This ticket has a patch that adds an "cp_arraysize" keyword argument
   to ConnectionPool.runQuery() to set the .arraysize property, but this
   could interfere with DB modules that accept a "cp_arraysize" keyword
   parameter to cursor.execute().
 - I looked up the API docs for as many Python DB modules as I could
   think of, and none of them attach any significance to
   a "cp_arraysize" keyword parameter.
 - However, at least cx_Oracle supports using keyword parameters for
   populating parameterised queries, like this:

    cursor.execute("select :name from dual;", name="Fred")

So, my questions to the Twisted community are:
 - How many of you are using adbapi.ConnectionPool with cx_Oracle, or
   another DB module that supports arbitrary keyword arguments to
   cursor.execute?
 - Of those, how many of you are using parameterised queries or prepared
   statements with placeholders named "arraysize" or "cp_arraysize"?


http://twistedmatrix.com/trac/ticket/4138
A fresh Twisted checkout should support "setup.py sdist"

 - Occasionally people ask about building RPMs of Twisted with
   "./setup.py bdist_rpm"; this ticket is the first step in getting that
   working - the rest of the process is #1696.
 - I'm not sure if it helps with other kinds of bdist, like
   "bdist_wininst" or "bdist_msi" - if it does, and you've been waiting
   for that, then you might want to help review the code and check it
   works properly on your platform!


http://twistedmatrix.com/trac/ticket/4004
subunit reporter. FTW.

 - This ticket adds another test-reporter to Twisted Trial, one that
   outputs results in a format that can be parsed by the tools in the
   third-party "subunit" project, https://launchpad.net/subunit
 - Among other things, this would help integrate Python tests with test
   results from other systems (tap2subunit, subunit2junitxml), compare
   the results of different test-runs (subunit-diff), and enable cute
   GUI-based test-runners (subunit2gtk).
 - If subunit sounds like a tool you would find useful, you might want
   to help review the code!


From grickert at coldstorage.com  Thu Dec 24 09:41:11 2009
From: grickert at coldstorage.com (Gerrat Rickert)
Date: Thu, 24 Dec 2009 09:41:11 -0500
Subject: [Twisted-Python] Some news about currently-pending code-reviews
In-Reply-To: <20091224053747.GC1637@thristian.org>
References: <20091224053747.GC1637@thristian.org>
Message-ID: <BB13E4C4D649234F84A01F6DF64BB87F050E8AA0@ccs-ex01.coldstorage.com>

[snip]
>http://twistedmatrix.com/trac/ticket/3956
>Add arraysize option to runQuery in adbapi
>
> - The "arraysize" property is the only writable cursor property
defined
>   by DBAPI2. Setting it can make the .fetchall() method faster with
>   some DB modules, but Twisted's adbapi module offers no way to set
it.
> - This ticket has a patch that adds an "cp_arraysize" keyword argument
>   to ConnectionPool.runQuery() to set the .arraysize property, but
this
>   could interfere with DB modules that accept a "cp_arraysize" keyword
>   parameter to cursor.execute().
> - I looked up the API docs for as many Python DB modules as I could
>   think of, and none of them attach any significance to
>   a "cp_arraysize" keyword parameter.
> - However, at least cx_Oracle supports using keyword parameters for
>   populating parameterised queries, like this:
>
>    cursor.execute("select :name from dual;", name="Fred")
>
>So, my questions to the Twisted community are:
> - How many of you are using adbapi.ConnectionPool with cx_Oracle, or
>   another DB module that supports arbitrary keyword arguments to
>   cursor.execute?
> - Of those, how many of you are using parameterised queries or
prepared
>   statements with placeholders named "arraysize" or "cp_arraysize"?
>

Well, as the guy who initiated this ticket, I'm certainly using 
adbapi.ConnectionPool with cx_Oracle.  I'm not currently using any 
placeholders named "arraysize" or "cp_arraysize".

This kind of informal poll *might* help us "rule out" using these (if
someone 
says they're currently using them) - but it won't be very definitive;
and this
change will still technically be backwards-incompatible.  
Perhaps the only reasonable backwards-compatible change that could be
made 
would be adding either an attribute or method to the ConnectionPool to
set the 
arraysize. 

Gerrat



From ssteinerx at gmail.com  Thu Dec 24 12:03:42 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Thu, 24 Dec 2009 12:03:42 -0500
Subject: [Twisted-Python] Some news about currently-pending code-reviews
In-Reply-To: <20091224053747.GC1637@thristian.org>
References: <20091224053747.GC1637@thristian.org>
Message-ID: <112A627E-A9FD-480E-B4D7-9EB4B84FA754@gmail.com>

On Dec 24, 2009, at 12:37 AM, Tim Allen wrote:

> You don't have to be a Twisted expert to help out, and don't worry about whether you're experienced enough to spot every possible problem - most patches get reviewed *at
> least* two or three times by different people, and every problem you pick up and the developer addresses is one less issue the next reviewer has to think about.

Thanks for the encouragement, Tim.   I've shied away from reviews as the first couple of tickets I tried to pick up, that were relevant to the things I *use* every day, were so far over my head (Twisted-wise) that I just kind of gave up.  

It was very strange to know and have used all of the concepts in the tickets, but have absolutely no idea what to *do* about it vis a vis the Twisted tickets in question.  It was kind of like knowing all the nouns in a language but no verbs.

I'll see if I can find some of the "easy" ones that are in some way related to my actual work and get started again...

Thanks,

Steve
aka/ssteinerX
aka/S





From glyph at twistedmatrix.com  Thu Dec 24 21:28:12 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 24 Dec 2009 21:28:12 -0500
Subject: [Twisted-Python] Some news about currently-pending code-reviews
In-Reply-To: <20091224053747.GC1637@thristian.org>
References: <20091224053747.GC1637@thristian.org>
Message-ID: <A82F9296-D72D-40A6-B32A-41956F61B62E@twistedmatrix.com>


On Dec 24, 2009, at 12:37 AM, Tim Allen wrote:

> As I've started reviewing over the past week or two, the developers
> whose code I've reviewed and the regulars in the #twisted IRC channel
> have all been super-helpful, and I highly recommend code-reviewing as
> a pleasant way to spend an idle afternoon. Everything you need to know
> to get started should be listed here:
> 
>    http://twistedmatrix.com/trac/wiki/ReviewProcess

Thanks for writing about this!  It's always nice to hear about someone enjoying the review process :-).

From exarkun at twistedmatrix.com  Sun Dec 27 00:05:12 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Dec 2009 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1261890312.6.1951799780@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091227/ffc42853/attachment.htm 

From exarkun at twistedmatrix.com  Sun Dec 27 11:50:47 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Dec 2009 16:50:47 -0000
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912221415g4acf7375qc74826231d367396@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
	<8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>
	<562bcc10912181345jb3084b7p4baecb7351c4d565@mail.gmail.com>
	<12aaa0810912181451i333ef926k974af83233627bcf@mail.gmail.com>
	<562bcc10912181525o309609c4q77074172818fe830@mail.gmail.com>
	<562bcc10912221415g4acf7375qc74826231d367396@mail.gmail.com>
Message-ID: <20091227165047.15596.1071098653.divmod.xquotient.538@localhost.localdomain>

On 22 Dec, 10:15 pm, kevin.horn at gmail.com wrote:
>BTW, lore2sphinx and accompanying Sphinx skeleton project now up on
>bitbucket here:
>http://bitbucket.org/khorn/lore2sphinx/
>
>Thanks to ssteinerX for guiding me through the process.

I was reminded of another aspect of the conversion which needs some 
consideration, internationalization and localization.

I assume there are tools for internationalizing sphinx documentation. 
That just leaves localization.  There is currently an effort underway to 
localize the Twisted documentation to Chinese (simplified) and possibly 
a couple other languages:

  https://translations.launchpad.net/twisted

I have no idea how one would go about converting this data to account 
for a change in the source format of the docs.  Does anyone else?

Jean-Paul


From enriquejr at gmail.com  Sun Dec 27 21:14:49 2009
From: enriquejr at gmail.com (Enrique Samson Jr.)
Date: Mon, 28 Dec 2009 10:14:49 +0800
Subject: [Twisted-Python] Sending domish.Element results to Unpersistable
Message-ID: <4B381499.30801@gmail.com>

Hi,

I'm using PB to to send copies of domish.Element instances to another
application. I just don't want to parse XML again and thought it would
be better to send Element copies and save parsing on the other end. But
receiving application just gets an Unpersistable.

I'm considering reducing the Element instances to dicts but I may leave
out details I may need in the future.

Am I missing something?


Enrique



From screwtape at froup.com  Sun Dec 27 21:52:54 2009
From: screwtape at froup.com (Tim Allen)
Date: Mon, 28 Dec 2009 13:52:54 +1100
Subject: [Twisted-Python] Some news about currently-pending code-reviews
In-Reply-To: <BB13E4C4D649234F84A01F6DF64BB87F050E8AA0@ccs-ex01.coldstorage.com>
References: <20091224053747.GC1637@thristian.org>
	<BB13E4C4D649234F84A01F6DF64BB87F050E8AA0@ccs-ex01.coldstorage.com>
Message-ID: <20091228025254.GE1637@thristian.org>

On Thu, Dec 24, 2009 at 09:41:11AM -0500, Gerrat Rickert wrote:
> [snip]
> >http://twistedmatrix.com/trac/ticket/3956
> >Add arraysize option to runQuery in adbapi
> 
> Well, as the guy who initiated this ticket, I'm certainly using
> adbapi.ConnectionPool with cx_Oracle.  I'm not currently using any
> placeholders named "arraysize" or "cp_arraysize".

But you are using the keyword-parameters-as-query-parameters extension
that cx_Oracle provides?

> This kind of informal poll *might* help us "rule out" using these (if
> someone says they're currently using them) - but it won't be very
> definitive; and this change will still technically be
> backwards-incompatible.  Perhaps the only reasonable
> backwards-compatible change that could be made would be adding either
> an attribute or method to the ConnectionPool to set the arraysize. 

I think the two positions here would be:

 a: adbapi.ConnectionPool is designed to wrap DBAPI2 modules; keyword
    parameters to cursor.execute() are not allowed in DBAPI2; therefore
    adbapi.ConnectionPool can use keyword parameters for itself.
 b: adbapi.ConnectionPool has never really enforced DBAPI2 compliance,
    so people have been using it with all kinds of crazy DBAPI2
    extensions and we should allow people to keep doing so as much as
    possible.

My cunning plan (which has somewhat backfired) was that one of these
alternatives would seem sane, and one would seem ridiculous, and once
the mailing list decided which was which I could go back to the ticket
with that decision.

The way things are at the moment, I'm leaning towards (b), but I believe
the developer who's worked on the patch leans towards (a) and I don't
feel I have the authority to demand a change of approach. I left the
ticket awaiting review, in the hope that somebody with more authority or
firmer opinions would come along to review it (it's a pretty small
change!), but the ticket's been sitting there for weeks now - I felt
I needed to do something more drastic to help it make progress.


From twisted at ralphm.ik.nu  Mon Dec 28 03:54:55 2009
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Mon, 28 Dec 2009 09:54:55 +0100
Subject: [Twisted-Python] Sending domish.Element results to Unpersistable
In-Reply-To: <4B381499.30801@gmail.com>
References: <4B381499.30801@gmail.com>
Message-ID: <1261990495.18020.107.camel@dwaal>

On Mon, 2009-12-28 at 10:14 +0800, Enrique Samson Jr. wrote:
> Hi,
> 
> I'm using PB to to send copies of domish.Element instances to another
> application. I just don't want to parse XML again and thought it would
> be better to send Element copies and save parsing on the other end. But
> receiving application just gets an Unpersistable.

I am not familiar enough with PB, but I assume that PB cannot serialize
objects of unknown classes without any help. In general, serialization
of XML is way more expensive than parsing, but I'd be very curious about
when this would actually become a problem.

> I'm considering reducing the Element instances to dicts but I may leave
> out details I may need in the future.

Except for parent, the instance variables mentioned in the docstring of
Element is all you need to remember. Note that this also requires
walking the DOM tree for the element you want to send over, and then
build up the tree on the other side. It might be just as expensive as
using an XML stream.

I've been thinking about building a (streaming) parser that would mostly
lex the incoming XML stream and only extract as much as needed for
routing, leaving the XML Stanza's payload as an unparsed string that can
be sent along further.

ralphm



From twisted-web at udmvt.ru  Mon Dec 28 04:47:06 2009
From: twisted-web at udmvt.ru (twisted-web at udmvt.ru)
Date: Mon, 28 Dec 2009 13:47:06 +0400
Subject: [Twisted-Python] Sending domish.Element results to	Unpersistable
In-Reply-To: <4B381499.30801@gmail.com>
References: <4B381499.30801@gmail.com>
Message-ID: <20091228094706.GD3314@ruber.office.udmvt.ru>

On Mon, Dec 28, 2009 at 10:14:49AM +0800, Enrique Samson Jr. wrote:
> Hi,
> 
> I'm using PB to to send copies of domish.Element instances to another
> application. I just don't want to parse XML again and thought it would
> be better to send Element copies and save parsing on the other end. But
> receiving application just gets an Unpersistable.
> 
> I'm considering reducing the Element instances to dicts but I may leave
> out details I may need in the future.
> 
> Am I missing something?
Perhaps I missed something, but IMHO the desire of sending parsed XML to another
process just indicates some misdesign in the whole system ...
PB allows you to build perfect machine-machine interface and unless you really need
to pass XML chunks from outhere to your another process, never try to send around XML.
If you have your data structures coming from XML - parse them and put into native python
structures, they are so pretty and highlevel. By the way, SAX parser will help you better than DOM.

If you have just an abstract XML - send it as unicode strings, don't parse it at all!
If you store your program's data in XML DOM tree - you are most probably just abusing
the whole idea of XML. Just think, what if you will need to change the XML parser
(for perfomance or any other reason)?


Alexey
> 
> 
> Enrique
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
? ?????????,
??????? ??????
????????? ?????????????
???? ???????? ??????
???????????? ?????? ????????????????
??? "????????????" 
?????? ? ?????????? ??????????.


From ploutosss at gmail.com  Mon Dec 28 08:05:05 2009
From: ploutosss at gmail.com (ploutosss ploutosss)
Date: Mon, 28 Dec 2009 17:05:05 +0400
Subject: [Twisted-Python] how manual run LoopingCall.f
Message-ID: <d59a94870912280505i4f32e7b6vcb9f197fb47c9833@mail.gmail.com>

I use?_threadedselect reactor. My waker its one line:
eventmodule.post(eventmodule.Event(TWISTEDEVENT, iterateTwisted=func))
its send event, to pygame queue.
My pygame loop:
class PygameController(object):
???_tick = Tick()
?? ?def _eventIterator(self):
?? ? ? ?while True:
?? ? ? ? ? ?if self._ticking:
?? ? ? ? ? ? ? ?yield eventmodule.poll()
?? ? ? ? ? ?else:
?? ? ? ? ? ? ? ?yield eventmodule.wait()
?? ?def run(self):
?? ? ? ?for event in self._eventIterator():
?? ? ? ? ? ?if event.type == NOEVENT:
?? ? ? ? ? ? ? ?self.manager.post(self._tick)
?? ? ? ? ? ? ? ?continue
?? ? ? ? ? ?elif event.type == TWISTEDEVENT:
?? ? ? ? ? ? ? ?event.iterateTwisted()
?? ? ? ? ? ? ? ?if not reactor.running:
?? ? ? ? ? ? ? ? ? ?break
?? ? ? ? ? ? ? ?continue
?? ?...
When?I need to quickly perform some function, I set the parameter
PygameController._ticking to True, and my manager call some function.
Its work.
When I need to perform some function with a time interval of more than
one second, I use LoopingCall. Its work.
When I need to perform some function with a time interval of less than
one second, LoopingCall too slow. I try use my ticking, but for
function is not executed too often, I used the following code:

    def some_function(self):
        looping_instance = self.looping
        call = looping_instance.call
        if call and call.time - call.seconds() <= 0:
            looping_instance()

but I get this traceback when I stop looping (LoopingCall.stop()):
  File "/usr/lib64/python2.6/site-packages/twisted/internet/base.py",
line 779, in runUntilCurrent
    call.func(*call.args, **call.kw)
  File "/usr/lib64/python2.6/site-packages/twisted/internet/task.py",
line 196, in __call__
    d.addErrback(eb)
  File "/usr/lib64/python2.6/site-packages/twisted/internet/defer.py",
line 199, in addErrback
    errbackKeywords=kw)
  File "/usr/lib64/python2.6/site-packages/twisted/internet/defer.py",
line 181, in addCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File "/usr/lib64/python2.6/site-packages/twisted/internet/defer.py",
line 323, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "/usr/lib64/python2.6/site-packages/twisted/internet/task.py",
line 191, in eb
    d.errback(failure)
exceptions.AttributeError: 'NoneType' object has no attribute 'errback'


From wanliyou at gmail.com  Mon Dec 28 10:32:24 2009
From: wanliyou at gmail.com (Wan Li)
Date: Mon, 28 Dec 2009 23:32:24 +0800
Subject: [Twisted-Python] How to profiling twisted web?
Message-ID: <41143d8f0912280732y4c723d3l12163a2fcf019582@mail.gmail.com>

Hi Gurus,

Currently I'm running twisted web via this command line:
twistd.bat web -n --path=%path%

and place a .rpy file in that directory which looks like following:
class MyResource
      def render_POST(self, request):
           do_something; write file and return

resource = MyResource()

My question is:
1. How can I turn on the --profile option?
2. Any way to know how many millisecond elapsed between "request received"
and render_POST call?
3. If there are a bunch of files need to be uploaded (say at 50MB/s speed )
and save by server, Should I write the file directly in render_POST or using
deferred call?

Thanks.

-- 
>: ~
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091228/28d968b7/attachment.htm 

From kevin.horn at gmail.com  Mon Dec 28 13:01:27 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 28 Dec 2009 12:01:27 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <20091227165047.15596.1071098653.divmod.xquotient.538@localhost.localdomain>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
	<8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>
	<562bcc10912181345jb3084b7p4baecb7351c4d565@mail.gmail.com>
	<12aaa0810912181451i333ef926k974af83233627bcf@mail.gmail.com>
	<562bcc10912181525o309609c4q77074172818fe830@mail.gmail.com>
	<562bcc10912221415g4acf7375qc74826231d367396@mail.gmail.com>
	<20091227165047.15596.1071098653.divmod.xquotient.538@localhost.localdomain>
Message-ID: <562bcc10912281001y1014e0sc70055eac8163ce1@mail.gmail.com>

On Sun, Dec 27, 2009 at 10:50 AM, <exarkun at twistedmatrix.com> wrote:

> On 22 Dec, 10:15 pm, kevin.horn at gmail.com wrote:
> >BTW, lore2sphinx and accompanying Sphinx skeleton project now up on
> >bitbucket here:
> >http://bitbucket.org/khorn/lore2sphinx/
> >
> >Thanks to ssteinerX for guiding me through the process.
>
> I was reminded of another aspect of the conversion which needs some
> consideration, internationalization and localization.
>
> I assume there are tools for internationalizing sphinx documentation.
> That just leaves localization.  There is currently an effort underway to
> localize the Twisted documentation to Chinese (simplified) and possibly
> a couple other languages:
>
>  https://translations.launchpad.net/twisted
>
> I have no idea how one would go about converting this data to account
> for a change in the source format of the docs.  Does anyone else?
>
> Jean-Paul
>
>
Sphinx does have some translation support, though I confess I haven't looked
at it.  It uses the Babel package.

No idea how to convert the launchpad translations at the moment, but one
thing at a time, eh? :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091228/4bd77ebf/attachment.htm 

From rlotun at gmail.com  Mon Dec 28 13:02:09 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Mon, 28 Dec 2009 18:02:09 +0000
Subject: [Twisted-Python] How to profiling twisted web?
In-Reply-To: <41143d8f0912280732y4c723d3l12163a2fcf019582@mail.gmail.com>
References: <41143d8f0912280732y4c723d3l12163a2fcf019582@mail.gmail.com>
Message-ID: <95bb10690912281002h461e9b75i84f6c2d5f9d0a29a@mail.gmail.com>

Hi,

> Currently I'm running twisted web via this command line:
> twistd.bat web -n --path=%path%
> ...
> 1. How can I turn on the --profile option?

You should just be able to do something like:

    twistd.bat web -n --path=%path% --profile=stats_obj
--profiler=cProfile --savestats

Then after a duration of time pounding the server with requests you can stop
it and introspect the stats_obj file:

python
>> import pstats
>> s = pstats.Stats('stats_obj')
>> s.sort_stats('time').print_stats()

This will give you an ordered list of functions where the most time has been
spent. It's also useful to sort by cumulative time. For more information on
how to introspect stats objects see the Python documentation for the pstats
and cProfile module.

> 2. Any way to know how many millisecond elapsed between "request received"
> and render_POST call?

You'll have to measure this yourself I think. A glance at the twisted
codebase informs me:
- In twisted/web/http.py incoming requests are handled by an
HTTPChannel (the protocol from the http server factory)
- Incoming data is processed by the lineReceived method which creates
a Request object
- When all content for a request is received the allContentsReceived
method is invoked, which in turn calls the requestReceived method on
the Request object, which does some internal processing like parsing a
POST-encoded body if there is one. This then calls the process method
on the Request object
- In twisted/web/server.py the Request subclass' process method then
finds the resource being requested and calls the render method

I imagine you could modify the code in the above places to set global
variables by calling time.time(), and dumping them out at some point.

> 3. If there are a bunch of files need to be uploaded (say at 50MB/s speed )
> and save by server, Should I write the file directly in render_POST or using
> deferred call?

Do you mean the server will be *receiving* a file in the HTTP request
body? You can access the request body by looking at request.content
which exposes a File-like API (that is, threat it like you would an
open file in Python).

If you want to *send* a file via Twisted, take a look at:
http://twistedmatrix.com/documents/current/core/howto/producers.html
and
http://twistedmatrix.com/documents/9.0.0/api/twisted.protocols.basic.FileSender.html

Cheers,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun


From wanliyou at gmail.com  Mon Dec 28 21:21:39 2009
From: wanliyou at gmail.com (Wan Li)
Date: Tue, 29 Dec 2009 10:21:39 +0800
Subject: [Twisted-Python] How to profiling twisted web?
In-Reply-To: <95bb10690912281002h461e9b75i84f6c2d5f9d0a29a@mail.gmail.com>
References: <41143d8f0912280732y4c723d3l12163a2fcf019582@mail.gmail.com> 
	<95bb10690912281002h461e9b75i84f6c2d5f9d0a29a@mail.gmail.com>
Message-ID: <41143d8f0912281821p212ae284ma885e0c097401ac2@mail.gmail.com>

Thanks for the detailed reply.

1.
twistd.bat web -n --path=%path% --profile=stats_obj --profiler=cProfile
--savestats

is NOT working for twisted 9.0, --profile and --profiler are both not
recognized.

2.
Sounds like I start to work until all the data are received, as the content
are multipart/mixed typed pretty large content, I wanna start to find
boundaries and save part of them ASAP. Any clue?

3.
Not only one file, but many files in a multipart/mixed typed body which
totally reach a 50MB/s speed.
I made a tests which doing a multipart/mixed request, containing 50000 * 1KB
small files. Assume socket.sendall(data) is called
at 00:00
render_POST start: 00:03
process_multipart_content_start: 00:03
process_multipart_content_done:00:11
write_all_small_files_in_one_file_start :00:11
write_all_small_files_in_one_file_done:00:13
respones_given:00:13

Yes, it takes 13s to get it done. I can only make the
process_multipart_content spend less time by combining those small files in
several larger files but I still don't know why 3s are spend before
render_POST.

On Tue, Dec 29, 2009 at 2:02 AM, Reza Lotun <rlotun at gmail.com> wrote:

> Hi,
>
> > Currently I'm running twisted web via this command line:
> > twistd.bat web -n --path=%path%
> > ...
> > 1. How can I turn on the --profile option?
>
> You should just be able to do something like:
>
>    twistd.bat web -n --path=%path% --profile=stats_obj
> --profiler=cProfile --savestats
>
> Then after a duration of time pounding the server with requests you can
> stop
> it and introspect the stats_obj file:
>
> python
> >> import pstats
> >> s = pstats.Stats('stats_obj')
> >> s.sort_stats('time').print_stats()
>
> This will give you an ordered list of functions where the most time has
> been
> spent. It's also useful to sort by cumulative time. For more information on
> how to introspect stats objects see the Python documentation for the pstats
> and cProfile module.
>
> > 2. Any way to know how many millisecond elapsed between "request
> received"
> > and render_POST call?
>
> You'll have to measure this yourself I think. A glance at the twisted
> codebase informs me:
> - In twisted/web/http.py incoming requests are handled by an
> HTTPChannel (the protocol from the http server factory)
> - Incoming data is processed by the lineReceived method which creates
> a Request object
> - When all content for a request is received the allContentsReceived
> method is invoked, which in turn calls the requestReceived method on
> the Request object, which does some internal processing like parsing a
> POST-encoded body if there is one. This then calls the process method
> on the Request object
> - In twisted/web/server.py the Request subclass' process method then
> finds the resource being requested and calls the render method
>
> I imagine you could modify the code in the above places to set global
> variables by calling time.time(), and dumping them out at some point.
>
> > 3. If there are a bunch of files need to be uploaded (say at 50MB/s speed
> )
> > and save by server, Should I write the file directly in render_POST or
> using
> > deferred call?
>
> Do you mean the server will be *receiving* a file in the HTTP request
> body? You can access the request body by looking at request.content
> which exposes a File-like API (that is, threat it like you would an
> open file in Python).
>
> If you want to *send* a file via Twisted, take a look at:
> http://twistedmatrix.com/documents/current/core/howto/producers.html
> and
>
> http://twistedmatrix.com/documents/9.0.0/api/twisted.protocols.basic.FileSender.html
>
> Cheers,
> Reza
>
> --
> Reza Lotun
> mobile: +44 (0)7521 310 763
> email:  rlotun at gmail.com
> work:   reza at tweetdeck.com
> twitter: @rlotun
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
>: ~
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091229/8b0b27ee/attachment.htm 

From wolfgang at rohdewald.de  Tue Dec 29 03:07:26 2009
From: wolfgang at rohdewald.de (Wolfgang Rohdewald)
Date: Tue, 29 Dec 2009 09:07:26 +0100
Subject: [Twisted-Python] order of remote requests
Message-ID: <200912290907.26914.wolfgang@rohdewald.de>

Hi,

when I send two remote calls A and B over the network, in that
order, using the twisted perspective broker callRemote method,
is it granted that A is processed first on the other side even
if B  arrives first? Or should I only send B after I got an
answer to A?

-- 
Wolfgang


From andrew at bemusement.org  Tue Dec 29 03:47:30 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 29 Dec 2009 19:47:30 +1100
Subject: [Twisted-Python] order of remote requests
In-Reply-To: <200912290907.26914.wolfgang@rohdewald.de>
References: <200912290907.26914.wolfgang@rohdewald.de>
Message-ID: <20091229084730.GH2630@steerpike.home.puzzling.org>

Wolfgang Rohdewald wrote:
> Hi,
> 
> when I send two remote calls A and B over the network, in that
> order, using the twisted perspective broker callRemote method,
> is it granted that A is processed first on the other side even
> if B  arrives first? Or should I only send B after I got an
> answer to A?

It depends on the server, and what exactly you want to happen.

Perspective broker can have many concurrent remote calls on the same
connection, and depending on how the server is implemented it might
process those sequentially in the order they arrive, or concurrently, or
even in an arbitrary order.

So if call A really must be completed before starting B, then the client
must not make call B until it knows A has finished.

-Andrew.



From wolfgang at rohdewald.de  Tue Dec 29 06:53:07 2009
From: wolfgang at rohdewald.de (Wolfgang Rohdewald)
Date: Tue, 29 Dec 2009 12:53:07 +0100
Subject: [Twisted-Python] order of remote requests
In-Reply-To: <20091229084730.GH2630@steerpike.home.puzzling.org>
References: <200912290907.26914.wolfgang@rohdewald.de>
	<20091229084730.GH2630@steerpike.home.puzzling.org>
Message-ID: <200912291253.08011.wolfgang@rohdewald.de>

On Tuesday 29 December 2009, Andrew Bennetts wrote:
> Wolfgang Rohdewald wrote:
> > when I send two remote calls A and B over the network, in that
> > order, using the twisted perspective broker callRemote method,
> > is it granted that A is processed first on the other side even
> > if B  arrives first? Or should I only send B after I got an
> > answer to A?
> 
> It depends on the server, and what exactly you want to happen.
> 
> Perspective broker can have many concurrent remote calls on the
>  same connection, and depending on how the server is implemented it
>  might process those sequentially in the order they arrive, or
>  concurrently, or even in an arbitrary order.
> 
> So if call A really must be completed before starting B, then the
>  client must not make call B until it knows A has finished.

I should have given more details, sorry.

I am writing both the server and the client with twisted pb.
The server (a game server) sends messages to four player clients.

Say the game server sends messages A and B to a player client. 

Is it granted that the player client always processes A first even
if the internet routes the messages differently and B arrives
first?

-- 
Wolfgang


From dripton at ripton.net  Tue Dec 29 08:58:04 2009
From: dripton at ripton.net (David Ripton)
Date: Tue, 29 Dec 2009 05:58:04 -0800
Subject: [Twisted-Python] order of remote requests
In-Reply-To: <200912291253.08011.wolfgang@rohdewald.de>
References: <200912290907.26914.wolfgang@rohdewald.de>
	<20091229084730.GH2630@steerpike.home.puzzling.org>
	<200912291253.08011.wolfgang@rohdewald.de>
Message-ID: <20091229135803.GA8504@vidar.dreamhost.com>

On 2009.12.29 12:53:07 +0100, Wolfgang Rohdewald wrote:
> On Tuesday 29 December 2009, Andrew Bennetts wrote:
> > Wolfgang Rohdewald wrote:
> > > when I send two remote calls A and B over the network, in that
> > > order, using the twisted perspective broker callRemote method,
> > > is it granted that A is processed first on the other side even
> > > if B  arrives first? Or should I only send B after I got an
> > > answer to A?
> > 
> > It depends on the server, and what exactly you want to happen.
> > 
> > Perspective broker can have many concurrent remote calls on the
> >  same connection, and depending on how the server is implemented it
> >  might process those sequentially in the order they arrive, or
> >  concurrently, or even in an arbitrary order.
> > 
> > So if call A really must be completed before starting B, then the
> >  client must not make call B until it knows A has finished.
> 
> I should have given more details, sorry.
> 
> I am writing both the server and the client with twisted pb.
> The server (a game server) sends messages to four player clients.
> 
> Say the game server sends messages A and B to a player client. 
> 
> Is it granted that the player client always processes A first even
> if the internet routes the messages differently and B arrives
> first?

TCP guarantees in-order message delivery.  If you send A before B over
the same TCP connection, and A and B reach the client, then the client
will receive A before B.

Each Twisted process is single-threaded by default.

So if you use TCP, and keep the message processing code simple, then I
think you'll get messages processed in the order you expect.  I've never
noticed a problem with out-of-order messages in my PB game, anyway.

-- 
David Ripton    dripton at ripton.net


From k_r_a_j_kumar at yahoo.co.in  Tue Dec 29 11:12:46 2009
From: k_r_a_j_kumar at yahoo.co.in (Raj kumar)
Date: Tue, 29 Dec 2009 21:42:46 +0530 (IST)
Subject: [Twisted-Python] twisted version of openid
Message-ID: <140575.11540.qm@web8708.mail.in.yahoo.com>

Hi,
Currently I'm having a server running under twisted. I'm planning to implement openid in my application. Is there any twisted version of openid api? I need some reference to go through openid examples.

Thanks in advance.

Raj.



      The INTERNET now has a personality. YOURS! See your Yahoo! Homepage. http://in.yahoo.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091229/b8b60a68/attachment.htm 

From kevin.horn at gmail.com  Tue Dec 29 13:31:56 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 29 Dec 2009 12:31:56 -0600
Subject: [Twisted-Python] twisted version of openid
In-Reply-To: <140575.11540.qm@web8708.mail.in.yahoo.com>
References: <140575.11540.qm@web8708.mail.in.yahoo.com>
Message-ID: <562bcc10912291031o3c85d851tddc051fda3ed59cf@mail.gmail.com>

On Tue, Dec 29, 2009 at 10:12 AM, Raj kumar <k_r_a_j_kumar at yahoo.co.in>wrote:

> Hi,
> Currently I'm having a server running under twisted. I'm planning to
> implement openid in my application. Is there any twisted version of openid
> api? I need some reference to go through openid examples.
>
> Thanks in advance.
>
> Raj.
>
>
Google is you friend: https://launchpad.net/txopenid

It may not suit your purposes exactly, but it seems like a good place to
start.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091229/926a314c/attachment.htm 

From wolfgang at rohdewald.de  Tue Dec 29 14:13:14 2009
From: wolfgang at rohdewald.de (Wolfgang Rohdewald)
Date: Tue, 29 Dec 2009 20:13:14 +0100
Subject: [Twisted-Python] order of remote requests
In-Reply-To: <20091229135803.GA8504@vidar.dreamhost.com>
References: <200912290907.26914.wolfgang@rohdewald.de>
	<200912291253.08011.wolfgang@rohdewald.de>
	<20091229135803.GA8504@vidar.dreamhost.com>
Message-ID: <200912292013.15175.wolfgang@rohdewald.de>

On Tuesday 29 December 2009, David Ripton wrote:
> TCP guarantees in-order message delivery.  If you send A before B
>  over the same TCP connection, and A and B reach the client, then
>  the client will receive A before B.

Of course - now I wonder what made me think otherwise.

Thank you for your explanation! 


-- 
Wolfgang


From celord at gmail.com  Tue Dec 29 15:55:36 2009
From: celord at gmail.com (=?ISO-8859-1?B?Q+lzYXIgR2FyY+1h?=)
Date: Tue, 29 Dec 2009 14:55:36 -0600
Subject: [Twisted-Python] twisted mail client code review
Message-ID: <b302bf880912291255q1f80e63en80f3e342204619c8@mail.gmail.com>

Hello guys, this are my first steps into twister and this is my first
app with twister, using examples from the twisted documentation and
reading it a lot ( interfaces are still not for me ),  I've come to
this code:

http://pastebin.com/m2d6c35df

My goal for now is to create my own client and be able to retrieve
mail :) well it's done, but my question to the experts is to know your
opinions about my code, to see if I can implement any best practice in
order to have a decent app, in fact to hear from you how do you find
the code

PD: Sorry for my English, saludos desde Costa Rica.

Thanks a lot !



-- 
http://celord.blogspot.com/


From andrew at bemusement.org  Wed Dec 30 00:55:59 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 30 Dec 2009 16:55:59 +1100
Subject: [Twisted-Python] order of remote requests
In-Reply-To: <200912291253.08011.wolfgang@rohdewald.de>
References: <200912290907.26914.wolfgang@rohdewald.de>
	<20091229084730.GH2630@steerpike.home.puzzling.org>
	<200912291253.08011.wolfgang@rohdewald.de>
Message-ID: <20091230055559.GJ2630@steerpike.home.puzzling.org>

Wolfgang Rohdewald wrote:
[...]
> I should have given more details, sorry.
> 
> I am writing both the server and the client with twisted pb.
> The server (a game server) sends messages to four player clients.
> 
> Say the game server sends messages A and B to a player client. 
> 
> Is it granted that the player client always processes A first even
> if the internet routes the messages differently and B arrives
> first?

A PB connection uses a single TCP connection.  TCP guarantees that the
bytes will arrive in order (or not at all), so the messages will arrive
at the client in the order the server sent them, assuming there is one
persistent PB connection between each client and the server (which seems
likely from your description).

So it is impossible for the internet to route the messages such that B
will arrive before A.

Neither PB nor TCP guarantee anything about when the recipient
?processes? those messages though, just that they will arrive in the
order they were sent.  For example consider if A and B arrive very close
together (in the same millisecond, say) and the client processes them by
dispatching to a thread pool, which might take 10s or even 100s of
milliseconds to fully process the message (and determine a reply, if
applicable)... then depending on the exact work required and exactly how
the OS schedules the threads, then B might be fully processed before A
is, even though A arrived first.

Apologies for such a pedantically precise and abstract answer, but what
exactly you mean when you say ?processes? is a bit ambiguous.  I hope
this reply helps.

-Andrew.



From phil at bubblehouse.org  Wed Dec 30 02:14:35 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 30 Dec 2009 02:14:35 -0500
Subject: [Twisted-Python] twisted version of openid
In-Reply-To: <562bcc10912291031o3c85d851tddc051fda3ed59cf@mail.gmail.com>
References: <140575.11540.qm@web8708.mail.in.yahoo.com>
	<562bcc10912291031o3c85d851tddc051fda3ed59cf@mail.gmail.com>
Message-ID: <D925276E-83FE-45E3-BD6A-76B6A8156295@bubblehouse.org>

On Dec 29, 2009, at 1:31 PM, Kevin Horn wrote:
> On Tue, Dec 29, 2009 at 10:12 AM, Raj kumar  
> <k_r_a_j_kumar at yahoo.co.in> wrote:
> Hi,
> Currently I'm having a server running under twisted. I'm planning to  
> implement openid in my application. Is there any twisted version of  
> openid api? I need some reference to go through openid examples.
>
> Thanks in advance.
>
> Raj.
>
>
> Google is you friend: https://launchpad.net/txopenid
>
> It may not suit your purposes exactly, but it seems like a good  
> place to start.

txopenid is an identity provider for OpenID version 1.1. That is, it  
can provide credentials for sites that accept OpenID logins, based on  
data stored in a MySQL database.

It won't currently help you *accept* OpenID as an authentication  
mechanism, but it's a great provider, IMNSHO ;-) I use it as my  
identity provider, and so far it works well for my purposes. It also  
has been pleasantly stable the whole time I've been running it (at  
least as monitored by Nagios).

Also, it provides a number of utility functions that are essential to  
the OpenID spec which should make writing a consumer a bit easier  
(particularly in regards to hmac digest support and encoding integers  
into their big-endian two's complement as a binary string...ugh)...

Admittedly OpenID is at version 2.x these days, so I'm hoping soon to  
update the provider and/or write a consumer implementation. I'd like  
to think OpenID is finally starting to catch on...

-phil
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091230/98f91a1c/attachment.htm 

From kevin.horn at gmail.com  Wed Dec 30 15:05:15 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 30 Dec 2009 14:05:15 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
Message-ID: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>

Hello again, and welcome to another update on the Twisted Lore to Sphinx
conversion project.

Current Sphinx results are in the usual place at:
http://twistedsphinx.funsize.net/

Here's what's new:

- The lore2sphinx conversion script is now up on bitbucket.  You can find it
here: http://bitbucket.org/khorn/lore2sphinx/ .
  Special thanks to Steve Steiner (ssteinerX) for helping out a bitbucket
newbie.

- lore2sphinx now reads input and output directories from a config file.
The config file can have one or more "profiles", each of which contains
config info for a set of documentation. At present, the script just uses the
default profile (set in the config file), but I'll add a command line switch
to specify the profile Real Soon Now (tm), which will make it easy to use a
single config file for multiple projects (e.g. twisted, nevow, mantissa,
etc.)

- lore2sphinx has also been refactored a bit, which solves a lot of
whitespace handling issues. The Sphinx build now gives fewer than 100 errors
(currently 65, started off in the 500-600 range)!  Hooray!  Still, not all
of the output is fully correct, and some tags (notably tables) are still
unhandled.

- I still haven't started any work on a theme...I'll get to it eventually,
unless someone else does first.  Any volunteers?

- Divmod docs: new config file support is a step in this direction, look for
something soon...

- PyOpenSSL docs: kind of a sideline to this so I haven't really moved
forward on this yet, but I will eventually


If anyone out there would like to help out, I can certainly use the
assistance.  Lore2sphinx could probably use some extra eyeballs and brains
looking at it, thought the basic structure is pretty much laid out.  Any
ideas/comments/criticisms welcome.

If you're intimidated by the idea of working on the actual lore2sphinx
conversion script (or just don't want to), here's some other stuff that
needs doing:

- work on a twisted (or Divmod) Sphinx theme which at least mostly matches
the website (or the Divmod website)
- identify branches which have lore patches in them
- identify tickets which propose to fix/modify Lore functionality
- identify wiki pages that need to be changed, and the necessary changes
- make suggestions on the overall conversion process, as documented in the
proposal.

I'm sure I'll manage to get all this done eventually, but with more people,
it will get done sooner.  And sooner is better. :)

If you'd like to help out with one (or more) of these tasks, just give a
shout here, or email me off-list.

Thanks!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091230/2e1681aa/attachment.htm 

From lists at collab.nl  Wed Dec 30 15:40:55 2009
From: lists at collab.nl (Thijs Triemstra | Collab)
Date: Wed, 30 Dec 2009 21:40:55 +0100
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
In-Reply-To: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
References: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
Message-ID: <DE1B0229-0653-4112-8EDB-BBECA0D7DB89@collab.nl>

Hi Kevin,

On 30 Dec 2009, at 21:05, Kevin Horn wrote:

> If you're intimidated by the idea of working on the actual lore2sphinx conversion script (or just don't want to), here's some other stuff that needs doing:
> 
> - work on a twisted (or Divmod) Sphinx theme which at least mostly matches the website (or the Divmod website)
> - identify branches which have lore patches in them
> - identify tickets which propose to fix/modify Lore functionality

I can work on identifying those tickets and branches in Twisted, but should I put that info in a ticket or on a Twisted wiki page? And should the tickets with Lore enhancements be closed immediately or listed first?

Thanks for all your work!

Cheers,

Thijs



From radix at twistedmatrix.com  Wed Dec 30 16:00:04 2009
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 30 Dec 2009 16:00:04 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
In-Reply-To: <60ed19d40912301258mfbab631k3b7aaa358a3a1f09@mail.gmail.com>
References: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
	<DE1B0229-0653-4112-8EDB-BBECA0D7DB89@collab.nl>
	<60ed19d40912301258mfbab631k3b7aaa358a3a1f09@mail.gmail.com>
Message-ID: <60ed19d40912301300scde1503se76d0b2a99bfa871@mail.gmail.com>

Perhaps just add a label 'lore-changes' to all the tickets which do so.

On Dec 30, 2009 3:45 PM, "Thijs Triemstra | Collab" <lists at collab.nl> wrote:

Hi Kevin,

On 30 Dec 2009, at 21:05, Kevin Horn wrote: > If you're intimidated by the
idea of working on the ...
I can work on identifying those tickets and branches in Twisted, but should
I put that info in a ticket or on a Twisted wiki page? And should the
tickets with Lore enhancements be closed immediately or listed first?

Thanks for all your work!

Cheers,

Thijs


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091230/346036c1/attachment.htm 

From kevin.horn at gmail.com  Wed Dec 30 16:06:21 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 30 Dec 2009 15:06:21 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
In-Reply-To: <DE1B0229-0653-4112-8EDB-BBECA0D7DB89@collab.nl>
References: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
	<DE1B0229-0653-4112-8EDB-BBECA0D7DB89@collab.nl>
Message-ID: <562bcc10912301306r6eb846e6ye3f4fbf067f1ac00@mail.gmail.com>

On Wed, Dec 30, 2009 at 2:40 PM, Thijs Triemstra | Collab
<lists at collab.nl>wrote:

> Hi Kevin,
>
> On 30 Dec 2009, at 21:05, Kevin Horn wrote:
>
> > If you're intimidated by the idea of working on the actual lore2sphinx
> conversion script (or just don't want to), here's some other stuff that
> needs doing:
> >
> > - work on a twisted (or Divmod) Sphinx theme which at least mostly
> matches the website (or the Divmod website)
> > - identify branches which have lore patches in them
> > - identify tickets which propose to fix/modify Lore functionality
>
> I can work on identifying those tickets and branches in Twisted, but should
> I put that info in a ticket or on a Twisted wiki page? And should the
> tickets with Lore enhancements be closed immediately or listed first?
>

I'm open to suggestions as to where to list the tickets.  A Trac ticket or a
wiki page would certainly work, or we can integrate the list into the
proposal document.  What might be a good solution though is to just add a
Trac keyword to all of the relevant tickets, or even just identify a
specific search for them in Trac (is it enough to just do a custom search
for Lore component tickets?).

I think we should just come up with a list as a first step.  Though I really
hope to complete the conversion before too much longer, you never know what
could happen, and if it gets delayed significantly, it might be useful to
still have those tickets open.


> Thanks for all your work!
>
> Cheers,
>
> Thijs
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091230/55d337f6/attachment.htm 

From kevin.horn at gmail.com  Wed Dec 30 16:06:44 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 30 Dec 2009 15:06:44 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
In-Reply-To: <60ed19d40912301300scde1503se76d0b2a99bfa871@mail.gmail.com>
References: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
	<DE1B0229-0653-4112-8EDB-BBECA0D7DB89@collab.nl>
	<60ed19d40912301258mfbab631k3b7aaa358a3a1f09@mail.gmail.com>
	<60ed19d40912301300scde1503se76d0b2a99bfa871@mail.gmail.com>
Message-ID: <562bcc10912301306m7e9f2829la159ed95893f55de@mail.gmail.com>

On Wed, Dec 30, 2009 at 3:00 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> Perhaps just add a label 'lore-changes' to all the tickets which do so.
>
>
>
Ack! Chris beat me to it!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091230/b3319459/attachment.htm 

From radix at twistedmatrix.com  Wed Dec 30 16:14:37 2009
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 30 Dec 2009 16:14:37 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
In-Reply-To: <562bcc10912301306m7e9f2829la159ed95893f55de@mail.gmail.com>
References: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
	<DE1B0229-0653-4112-8EDB-BBECA0D7DB89@collab.nl>
	<60ed19d40912301258mfbab631k3b7aaa358a3a1f09@mail.gmail.com>
	<60ed19d40912301300scde1503se76d0b2a99bfa871@mail.gmail.com>
	<562bcc10912301306m7e9f2829la159ed95893f55de@mail.gmail.com>
Message-ID: <60ed19d40912301314g14e99a2ja95e2ec402d0cb0@mail.gmail.com>

I'ma ninja

On Dec 30, 2009 4:13 PM, "Kevin Horn" <kevin.horn at gmail.com> wrote:

On Wed, Dec 30, 2009 at 3:00 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote: > > Perhap...
Ack! Chris beat me to it!

Kevin Horn

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091230/1d836438/attachment.htm 

From warner at lothar.com  Wed Dec 30 18:07:43 2009
From: warner at lothar.com (Brian Warner)
Date: Wed, 30 Dec 2009 15:07:43 -0800
Subject: [Twisted-Python] order of remote requests
In-Reply-To: <20091230055559.GJ2630@steerpike.home.puzzling.org>
References: <200912290907.26914.wolfgang@rohdewald.de>	<20091229084730.GH2630@steerpike.home.puzzling.org>	<200912291253.08011.wolfgang@rohdewald.de>
	<20091230055559.GJ2630@steerpike.home.puzzling.org>
Message-ID: <4B3BDD3F.2050006@lothar.com>

Andrew Bennetts wrote:

> So it is impossible for the internet to route the messages such that B
> will arrive before A.
> 
> Neither PB nor TCP guarantee anything about when the recipient
> ?processes? those messages though, just that they will arrive in the
> order they were sent.  For example consider if A and B arrive very close
> together (in the same millisecond, say) and the client processes them by
> dispatching to a thread pool,

To expand on what Andrew said: Foolscap (which is descended from PB and
has very similar semantics) makes the following guarantee:

 within any given client/server pair,
 if the client invokes callRemote(A) before invoking callRemote(B)
 then the server will invoke remote_A() before invoking remote_B()

Your server's remote_A() method might return a Deferred, and not fire it
for an arbitrary period of time, whereas it might return an immediate
value from remote_B(). In this case, the client will see the responses
come back in a different order. Your server might also choose to delay
processing of one message for whatever reason (like by dispatching to a
threadpool, or dispatching a request to a third server in order to
service the request), but will be visible in the implementation of
remote_A(). The only promise made by Foolscap and PB is that your
remote_* methods will be invoked in the same order as the sender called
callRemote(*).

(in the future, Foolscap might offer some options to use multiple
connections and send messages over multiple parallel paths, or to
interleave message calls on a single connection, or to switch to UDP or
something, which might weaken this guarantee, but the default will
remain FIFO ordering)

Also note that there are no ordering guarantees between messages sent to
different machines (and therefore over different connections), of course.


cheers,
 -Brian

Foolscap: http://foolscap.lothar.com/trac



From kevin.horn at gmail.com  Wed Dec 30 19:07:41 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 30 Dec 2009 18:07:41 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
In-Reply-To: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
References: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
Message-ID: <562bcc10912301607t14df31md1ce470ddc1f1d8b@mail.gmail.com>

On Wed, Dec 30, 2009 at 2:05 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> Hello again, and welcome to another update on the Twisted Lore to Sphinx
> conversion project.
>
> Current Sphinx results are in the usual place at:
> http://twistedsphinx.funsize.net/
>
> Here's what's new:
>
> - The lore2sphinx conversion script is now up on bitbucket.  You can find
> it here: http://bitbucket.org/khorn/lore2sphinx/ .
>   Special thanks to Steve Steiner (ssteinerX) for helping out a bitbucket
> newbie.
>
> - lore2sphinx now reads input and output directories from a config file.
> The config file can have one or more "profiles", each of which contains
> config info for a set of documentation. At present, the script just uses the
> default profile (set in the config file), but I'll add a command line switch
> to specify the profile Real Soon Now (tm), which will make it easy to use a
> single config file for multiple projects (e.g. twisted, nevow, mantissa,
> etc.)
>
> - lore2sphinx has also been refactored a bit, which solves a lot of
> whitespace handling issues. The Sphinx build now gives fewer than 100 errors
> (currently 65, started off in the 500-600 range)!  Hooray!  Still, not all
> of the output is fully correct, and some tags (notably tables) are still
> unhandled.
>
> - I still haven't started any work on a theme...I'll get to it eventually,
> unless someone else does first.  Any volunteers?
>
> - Divmod docs: new config file support is a step in this direction, look
> for something soon...
>
> - PyOpenSSL docs: kind of a sideline to this so I haven't really moved
> forward on this yet, but I will eventually
>
>
> If anyone out there would like to help out, I can certainly use the
> assistance.  Lore2sphinx could probably use some extra eyeballs and brains
> looking at it, thought the basic structure is pretty much laid out.  Any
> ideas/comments/criticisms welcome.
>
> If you're intimidated by the idea of working on the actual lore2sphinx
> conversion script (or just don't want to), here's some other stuff that
> needs doing:
>
> - work on a twisted (or Divmod) Sphinx theme which at least mostly matches
> the website (or the Divmod website)
> - identify branches which have lore patches in them
> - identify tickets which propose to fix/modify Lore functionality
> - identify wiki pages that need to be changed, and the necessary changes
> - make suggestions on the overall conversion process, as documented in the
> proposal.
>
> I'm sure I'll manage to get all this done eventually, but with more people,
> it will get done sooner.  And sooner is better. :)
>
> If you'd like to help out with one (or more) of these tasks, just give a
> shout here, or email me off-list.
>
> Thanks!
>
> Kevin Horn
>

Another quick update...

- lore2sphinx now accepts a command line parameter to specify which config
profile to use
- added "stub" sphinx projects for Divmod Nevow, Mantissa, and Epsilon.
I've converted the docs for these projects and built them (mostly)
successfully, but I haven't published them anywhere yet (coming soon).  Have
I missed any other Divmod projects with Lore docs?

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091230/c8124d9a/attachment-0001.htm 

From screwtape at froup.com  Wed Dec 30 22:27:45 2009
From: screwtape at froup.com (Timothy Allen)
Date: Thu, 31 Dec 2009 14:27:45 +1100
Subject: [Twisted-Python] twisted mail client code review
In-Reply-To: <b302bf880912291255q1f80e63en80f3e342204619c8@mail.gmail.com>
References: <b302bf880912291255q1f80e63en80f3e342204619c8@mail.gmail.com>
Message-ID: <20091231142745.0f83aced@hepzibah>

On Tue, 29 Dec 2009 14:55:36 -0600
C?sar Garc?a <celord at gmail.com> wrote:
> Hello guys, this are my first steps into twister and this is my first
> app with twister, using examples from the twisted documentation and
> reading it a lot ( interfaces are still not for me ),  I've come to
> this code:
> 
> http://pastebin.com/m2d6c35df
> 
> My goal for now is to create my own client and be able to retrieve
> mail :) well it's done, but my question to the experts is to know your
> opinions about my code, to see if I can implement any best practice in
> order to have a decent app, in fact to hear from you how do you find
> the code

In general, it looks pretty good! I do have some comments, though:

 - Occasionally when you use a docstring, the indenting is
   inconsistent, like this:

     """
    docstring goes here
    """

   Obviously it still works, but you'll be asked to fix it if you ever
   contribute code to pretty much any open-source project, so you might
   as well get in the habit now.

 - You import twisted.internet.reactor in main() and in ebConnection();
   you might as well just import it at the top of the file along with
   all the other imports.

 - The reason people put code in a main() function rather than just
   putting it at the end after 'if __name__ == "__main__":' is so that
   they can write tests for it, or otherwise call it from other code.
   However, because you call reactor.run() from your main() function,
   it can't be called from other code - you might want to move the
   reactor.run() call to the bottom of the file.

 - In ebConnection() you set up logging to stdout, then log the error,
   then stop the reactor - but there are various other places where you
   log things with print statements. You might as well set up logging
   at the bottom of the file as well, then use "log.msg()" where you
   used to use "print".

All pretty minor things, really - well done!


From celord at gmail.com  Thu Dec 31 00:01:12 2009
From: celord at gmail.com (=?ISO-8859-1?B?Q+lzYXIgR2FyY+1h?=)
Date: Wed, 30 Dec 2009 23:01:12 -0600
Subject: [Twisted-Python] twisted mail client code review
In-Reply-To: <20091231142745.0f83aced@hepzibah>
References: <b302bf880912291255q1f80e63en80f3e342204619c8@mail.gmail.com>
	<20091231142745.0f83aced@hepzibah>
Message-ID: <b302bf880912302101m4b0d1dd3h91b4800fba89a4@mail.gmail.com>

Timothy, thanks a lot, it's good to know that I am on the right way,
I'll follow your advices !!

And now reading again the documentation about TCPclients, I'll try to
modify the code and move the callbacks inside the Protocol class and
move all the persisten config to the factory


Thanks !

2009/12/30 Timothy Allen <screwtape at froup.com>:
> On Tue, 29 Dec 2009 14:55:36 -0600
> C?sar Garc?a <celord at gmail.com> wrote:
>> Hello guys, this are my first steps into twister and this is my first
>> app with twister, using examples from the twisted documentation and
>> reading it a lot ( interfaces are still not for me ), ?I've come to
>> this code:
>>
>> http://pastebin.com/m2d6c35df
>>
>> My goal for now is to create my own client and be able to retrieve
>> mail :) well it's done, but my question to the experts is to know your
>> opinions about my code, to see if I can implement any best practice in
>> order to have a decent app, in fact to hear from you how do you find
>> the code
>
> In general, it looks pretty good! I do have some comments, though:
>
> ?- Occasionally when you use a docstring, the indenting is
> ? inconsistent, like this:
>
> ? ? """
> ? ?docstring goes here
> ? ?"""
>
> ? Obviously it still works, but you'll be asked to fix it if you ever
> ? contribute code to pretty much any open-source project, so you might
> ? as well get in the habit now.
>
> ?- You import twisted.internet.reactor in main() and in ebConnection();
> ? you might as well just import it at the top of the file along with
> ? all the other imports.
>
> ?- The reason people put code in a main() function rather than just
> ? putting it at the end after 'if __name__ == "__main__":' is so that
> ? they can write tests for it, or otherwise call it from other code.
> ? However, because you call reactor.run() from your main() function,
> ? it can't be called from other code - you might want to move the
> ? reactor.run() call to the bottom of the file.
>
> ?- In ebConnection() you set up logging to stdout, then log the error,
> ? then stop the reactor - but there are various other places where you
> ? log things with print statements. You might as well set up logging
> ? at the bottom of the file as well, then use "log.msg()" where you
> ? used to use "print".
>
> All pretty minor things, really - well done!
>



-- 
http://celord.blogspot.com/


From landreville at deadtreepages.com  Thu Dec 31 12:35:49 2009
From: landreville at deadtreepages.com (Landreville)
Date: Thu, 31 Dec 2009 12:35:49 -0500
Subject: [Twisted-Python] adbapi transaction initiation
Message-ID: <9d748c780912310935v36cd0482u2188a4e56e980645@mail.gmail.com>

I've just noticed the transaction_timestamp is actually way (up to
several minutes) before the database proc gets called. I'm on
postgresql 8.4 so the transaction_timestamp is when the transaction
started, and I compared it against the clock_timestamp (absolute
current time) and it is quite a bit off.

Does adbapi start transactions before any method (ie runQuery) is called?

Or should I be looking at the underlying database driver to this behaviour?


From screwtape at froup.com  Thu Dec 31 16:13:40 2009
From: screwtape at froup.com (Timothy Allen)
Date: Fri, 1 Jan 2010 08:13:40 +1100
Subject: [Twisted-Python] adbapi transaction initiation
In-Reply-To: <9d748c780912310935v36cd0482u2188a4e56e980645@mail.gmail.com>
References: <9d748c780912310935v36cd0482u2188a4e56e980645@mail.gmail.com>
Message-ID: <20100101081340.538a9bbd@hepzibah>

On Thu, 31 Dec 2009 12:35:49 -0500
Landreville <landreville at deadtreepages.com> wrote:

> I've just noticed the transaction_timestamp is actually way (up to
> several minutes) before the database proc gets called. I'm on
> postgresql 8.4 so the transaction_timestamp is when the transaction
> started, and I compared it against the clock_timestamp (absolute
> current time) and it is quite a bit off.
> 
> Does adbapi start transactions before any method (ie runQuery) is
> called?
> 
> Or should I be looking at the underlying database driver to this
> behaviour?

I haven't looked at the code myself, but that seems a reasonable
behaviour to me:

 - adbapi.ConnectionPool, as its name suggests, pre-allocates a bunch
   of database connections.
 - DBAPI2.0 requires that cursors default to doing things in a
   transaction.
 - PostgreSQL natively defaults to doing things immediately, outside a
   transaction, so running "BEGIN" on startup is a sensible thing for a
   PostgreSQL Python module to do.

In fact, now that I think about it, I happen to know that PyPgSQL
cursors (what RedHat packagaes as "postgresql-python") execute "BEGIN"
on creation and immediately after each .rollback() or .commit(), and I
suspect other libraries like psycopg2 would do much the same thing.


From maris at chown.lv  Tue Dec  1 08:07:39 2009
From: maris at chown.lv (Maris Ruskulis)
Date: Tue, 01 Dec 2009 17:07:39 +0200
Subject: [Twisted-Python] is there way to baypass value limit of 64kb
 in	twisted.protocols.amp [SOLVED]
In-Reply-To: <B878DEA1-EC54-4D00-ADE2-129216EEA48F@twistedmatrix.com>
References: <44752311-036A-4D43-B56C-0494753D86BF@chown.lv>
	<B878DEA1-EC54-4D00-ADE2-129216EEA48F@twistedmatrix.com>
Message-ID: <4B15313B.7040204@chown.lv>

Glyph Lefkowitz wrote:
> On Nov 30, 2009, at 2:10 PM, MārisR wrote:
>
>   
>> I'm currently trying to figure out, how to bypass amp value limit of 64kb. First tought was to split string into chunks <64kb, then join before processing. Problem is, how to dinamicaly generate amp.Command argument list. Maybe there is other well known method how to achieve this?
>>     
>
>
> You can define your own Argument which reads multiple values, rather than dynamically generating the arguments list.  This is what you want anyway, because your application code wants to receive one value; the fact that you are splitting/joining at the protocol level should not be important.
>
> There's an example of this implemented here:
>
> http://bazaar.launchpad.net/%7Eglyph/%2Bjunk/amphacks/annotate/head%3A/python/amphacks/mediumbox.py
>
> The reason that this isn't currently included in the core AMP implementation is that if you need to transfer values larger than this limit, perhaps you should be doing the transfer in some other way. Streaming the result?  Doing the transfer out-of-band as (for example) an HTTP request?
>
> I think this might be an unhelpful way to ask people to consider this problem, so we may end up packaging something similar in Twisted eventually.  One way to do this might be by doing this: <http://twistedmatrix.com/trac/ticket/2529>, another might be bundling the contents of mediumbox.py (or something like it) into amp.py.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   
mediumbox done the trick with little patching to support utf8, Big 
thanks, for advises :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091201/100e1adc/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: maris.vcf
Type: text/x-vcard
Size: 216 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20091201/100e1adc/attachment-0002.vcf>

From radix at twistedmatrix.com  Wed Dec  2 13:21:25 2009
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 2 Dec 2009 15:21:25 -0500
Subject: [Twisted-Python] ANN: Twisted 9.0.0
Message-ID: <60ed19d40912021221u3096f047g3e6e86f43b4a0d2b@mail.gmail.com>

= Twisted 9.0.0 =

I'm happy to announce Twisted 9, the first (and last) release of
Twisted in 2009. The previous release was Twisted 8.2 in December of
2008. Given that, a lot has changed!

This release supports Python 2.3 through Python 2.6, though it is the
last one that will support Python 2.3. The next release will support
only Python 2.4 and above. Twisted: the framework of the future!

You can download the new release at our web site,

    http://twistedmatrix.com/

There were around 285 tickets resolved in this release. The full list
of changes is available here:

    http://twistedmatrix.com/trac/browser/tags/releases/twisted-9.0.0/NEWS?format=raw

It's quite a huge list of changes spanning almost all of the Twisted
projects, so here are some of the more exciting changes:

In the core:
- The Windows IOCP reactor now supports SSL.
- The memcache protocol implementation got some nice new features.

In Twisted Web:
- There's a new HTTP client API and protocol implementation, starting
at twisted.web.client.Agent. It's still pretty low-level, but much
more flexible than the old API.
- There were many improvements to the WSGI support.

In Twisted Conch:
- PyASN1 is now used to parse SSH keys (which means you now need to
install it to use Conch).
- SFTP servers (especially on Windows) now behave a lot better.

In Twisted Mail:
- The IMAP server and client protocol implementations had many fixes.
For example, SASL PLAIN credentials now work.

In Twisted Words:
- XMPP clients now support the ANONYMOUS SASL authentication type.
- The IRC protocol implementations had many fixes.

And a lot more.


= What is Twisted? =

>From the web site:

Twisted is an event-driven networking engine written in Python and
licensed under the MIT license.

See the FAQ for commonly asked questions about Twisted.

    http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions

If you want to get started with Twisted, the first thing you should do
is read the Twisted Core Documentation.

    http://twistedmatrix.com/projects/core/documentation/howto/index.html

Twisted projects variously support TCP, UDP, SSL/TLS, multicast, Unix
sockets, a large number of protocols (including HTTP, NNTP, IMAP, SSH,
IRC, FTP, and others), and much more.

Enjoy!

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From kevin.horn at gmail.com  Wed Dec  2 16:03:39 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 2 Dec 2009 17:03:39 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <20091130223947.GA5898@murdoc.net>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<20091130223947.GA5898@murdoc.net>
Message-ID: <562bcc10912021503x6117940fv388df0d37401f133@mail.gmail.com>

On Mon, Nov 30, 2009 at 4:39 PM, Marco Giusti <marco.giusti at gmail.com>wrote:

> On Mon, Nov 30, 2009 at 03:05:30PM -0600, Kevin Horn wrote:
> > [...]
> > Thanks for "listening"!
>
> some notices about what i get[1]. mainly i'd like if you could make the
> documentation more readable when the browser's window is not really big.
> usually i do not use the browser with the window maximized so will be
> really helpful if you can check the following points:
>
> * in the navigation bar "twisted web documentation" is repeated twice
> and is breaked in two lines.
>
> * the table of contents steals a lot of vertical space while it is
> visible only at the top of the page. in this circumstances i prefer "the
> lore way", ie. showing the table of contents in the normal content flow
> at the top and not in a side column.
>
> * again the left blue column steal vertical space an maybe can be
> reduced.
>
> * would be great if the layout will fit in the page width: as you can
> see the index link is half hidden.
>
> obiviusly with a bigger window all the aboves are not more valid and all
> looks pretty.
>
> ciao
> m.
>
>
> [1] http://img44.imageshack.us/img44/1953/sphinx.png
>
>
Marco,

Thanks for the feedback.  I really haven't worked at all on
formatting/theming the docs as of yet (what you see is just a theme included
with Sphinx), but I will certainly keep your comments in mind when I get to
that point.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091202/cb0a2061/attachment.html>

From kevin.horn at gmail.com  Wed Dec  2 16:04:47 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 2 Dec 2009 17:04:47 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
Message-ID: <562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>

On Mon, Nov 30, 2009 at 3:05 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> The previous thread was getting a little long, so I thought I'd start a new
> one...
>
> I haven't made as much headway on this as I would have liked, but I'm just
> going to blame the US Thanksgiving holiday and hope no one looks too closely
> at the dates of the previous emails. ;)
>
> Here's what I've done lately:
>
> - The proposal [1] has been updated, with a number of minor spelling
> formatting fixes, and a detailed timeline for each phase of the project.
> Please give feedback if you see anything missing from the timelines,
> anything you think should be done in a different order, or any other
> unaddressed issues.
>
> - I've done a small amount of work on the lore2sphinx tool, and the new
> output of the conversion process is now online [2].  Not a lot changes, the
> only obviosu thing is that <img> tags are now handled.  The rest has been
> mostly refactoring and generally making the code easier to work with.
>
> - I also did a bit of digging around in the Divmod SVN repository, and it
> looks like Nevow, Mantissa, and Epsilon are the only projects that have Lore
> source docs.  Can anyone out there verify that this is correct?  Did I miss
> anything?
>
> I'll try to send out a progress report like this every week or so in order
> to avoid people thinking that I've lost interest or gotten hit by a bus.
>
> Thanks for "listening"!
>
> Kevin Horn
>
>
>
> [1] http://twistedsphinx.funsize.net/proposal.html
> [2] http://twistedsphinx.funsize.net/index.html
>


Any of the core Twisted devs care to sound of regarding the proposed
timelines?

Silence implies consent.  Or in this case approval... :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091202/bab0b133/attachment.html>

From exarkun at twistedmatrix.com  Wed Dec  2 19:30:15 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 03 Dec 2009 02:30:15 -0000
Subject: [Twisted-Python] ANN: Twisted 9.0.0
In-Reply-To: <hf7056$1fh$2@ger.gmane.org>
References: <60ed19d40912021221u3096f047g3e6e86f43b4a0d2b@mail.gmail.com>
	<hf7056$1fh$2@ger.gmane.org>
Message-ID: <20091203023015.2549.1864307365.divmod.xquotient.85@localhost.localdomain>

On 12:18 am, tjreedy at udel.edu wrote:
>Christopher Armstrong wrote:
>>= Twisted 9.0.0 =
>>
>>I'm happy to announce Twisted 9, the first (and last) release of
>>Twisted in 2009. The previous release was Twisted 8.2 in December of
>>2008. Given that, a lot has changed!
>>
>>This release supports Python 2.3 through Python 2.6, though it is the
>>last one that will support Python 2.3. The next release will support
>>only Python 2.4 and above. Twisted: the framework of the future!
>
>Not unless it supports 3.1+. Is that in the cards (tickets)?

Somewhat.

A description of the plan on stackoverflow: http://bit.ly/6hWqYU

A message with some ticket links from a thread on the twisted-python 
mailing list: http://bit.ly/8csFSa

Jean-Paul



From exarkun at twistedmatrix.com  Wed Dec  2 19:38:59 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 03 Dec 2009 02:38:59 -0000
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
Message-ID: <20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>

On 2 Dec, 11:04 pm, kevin.horn at gmail.com wrote:
>>
>>[1] http://twistedsphinx.funsize.net/proposal.html
>>[2] http://twistedsphinx.funsize.net/index.html
>
>
>Any of the core Twisted devs care to sound of regarding the proposed
>timelines?
>
>Silence implies consent.  Or in this case approval... :)

Timeline might not be the right word, since as far as I can tell there's 
little that's actually about time there. :)  Let me know if I overlooked 
something.

As far as the (I'm going to call it) roadmap goes, the thought that's 
pushed its way to the fore for me is that I'd like to try this with 
something smaller and simpler than Twisted first.  It would be nice if 
the Divmod projects would qualify here, but they may not be active 
enough for any real experience to accumulate.

pyOpenSSL might work.  It uses the original CPython tex documentation 
system, so the conversion would (presumably) be done with whatever tools 
were used for CPython's own documentation, not the new Lore->Sphinx 
converter.  It would still be a useful way to get more familiar with 
Sphinx, though.  The downside is that I'm pretty much the only Twisted 
developer who works on pyOpenSSL, so it wouldn't help anyone else get 
any experience.

Jean-Paul



From tim at commsecure.com.au  Wed Dec  2 19:57:27 2009
From: tim at commsecure.com.au (Tim Allen)
Date: Thu, 3 Dec 2009 13:57:27 +1100
Subject: [Twisted-Python] ANN: Twisted 9.0.0
In-Reply-To: <20091203023015.2549.1864307365.divmod.xquotient.85@localhost.localdomain>
References: <60ed19d40912021221u3096f047g3e6e86f43b4a0d2b@mail.gmail.com>
	<hf7056$1fh$2@ger.gmane.org>
	<20091203023015.2549.1864307365.divmod.xquotient.85@localhost.localdomain>
Message-ID: <20091203135727.7ba71817@ws35.commsecure.com.au>

exarkun at twistedmatrix.com wrote:
> A message with some ticket links from a thread on the twisted-python 
> mailing list: http://bit.ly/8csFSa

Some of those tickets seem out of date; a better plan would be to query
for tickets with the "py3k" keyword:

    http://twistedmatrix.com/trac/search?q=py3k&noquickjump=1&ticket=on

I believe #2484 is the master ticket:

    http://twistedmatrix.com/trac/ticket/2484
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20091203/4faee60c/attachment.sig>

From kevin.horn at gmail.com  Wed Dec  2 23:29:43 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 3 Dec 2009 00:29:43 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
	<20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>
Message-ID: <562bcc10912022229m652b5b85kca0c4ce19f7f2d7f@mail.gmail.com>

On Wed, Dec 2, 2009 at 8:38 PM, <exarkun at twistedmatrix.com> wrote:

> On 2 Dec, 11:04 pm, kevin.horn at gmail.com wrote:
> >>
> >>[1] http://twistedsphinx.funsize.net/proposal.html
> >>[2] http://twistedsphinx.funsize.net/index.html
> >
> >
> >Any of the core Twisted devs care to sound of regarding the proposed
> >timelines?
> >
> >Silence implies consent.  Or in this case approval... :)
>
> Timeline might not be the right word, since as far as I can tell there's
> little that's actually about time there. :)  Let me know if I overlooked
> something.
>
>
Well, "timeline" was the word Glyph used previously for "order in which
stuff will be done".
So that's what I stuck with.


> As far as the (I'm going to call it) roadmap goes, the thought that's
> pushed its way to the fore for me is that I'd like to try this with
> something smaller and simpler than Twisted first.  It would be nice if
> the Divmod projects would qualify here, but they may not be active
> enough for any real experience to accumulate.
>

I haven't run my lore2sphinx script against the Divmod stuff yet, but I
could certainly try it.
The intention is to convert the Divmod stuff as well as the Twisted stuff
eventually though.

I've been concentrating on the Twisted docs, since they seemed the highest
priority, but I
could detour a bit if you like.  Obviously that would slow progress on the
Twisted stuff a little.


> pyOpenSSL might work.  It uses the original CPython tex documentation
> system, so the conversion would (presumably) be done with whatever tools
> were used for CPython's own documentation, not the new Lore->Sphinx
> converter.  It would still be a useful way to get more familiar with
> Sphinx, though.  The downside is that I'm pretty much the only Twisted
> developer who works on pyOpenSSL, so it wouldn't help anyone else get
> any experience.
>

I have no idea what tools were originally used for that conversion.  Might
be interesting to try if we could find out though. Also, I presume we'd need
the sources for the docs.  Are they in the tarball?  Or elsewhere?

Of course if your objective is to learn Sphinx, you might be better off
converting the pyOpenSSL docs by hand.  They seem pretty short (except for
section 3).

If you'd like to try that, I'd be happy to assist.


> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091203/9180db73/attachment.html>

From glyph at twistedmatrix.com  Thu Dec  3 02:00:48 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 3 Dec 2009 04:00:48 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <562bcc10912022229m652b5b85kca0c4ce19f7f2d7f@mail.gmail.com>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
	<20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>
	<562bcc10912022229m652b5b85kca0c4ce19f7f2d7f@mail.gmail.com>
Message-ID: <407371A9-E698-4BC6-ADB3-37A67828EA36@twistedmatrix.com>


On Dec 3, 2009, at 1:29 AM, Kevin Horn wrote:

> On Wed, Dec 2, 2009 at 8:38 PM, <exarkun at twistedmatrix.com> wrote:
> 
> As far as the (I'm going to call it) roadmap goes, the thought that's
> pushed its way to the fore for me is that I'd like to try this with
> something smaller and simpler than Twisted first.  It would be nice if
> the Divmod projects would qualify here, but they may not be active
> enough for any real experience to accumulate.

> I haven't run my lore2sphinx script against the Divmod stuff yet, but I could certainly try it.  The intention is to convert the Divmod stuff as well as the Twisted stuff eventually though.
> 
> I've been concentrating on the Twisted docs, since they seemed the highest priority, but I could detour a bit if you like.  Obviously that would slow progress on the Twisted stuff a little.

While converting pyOpenSSL's documentation would be a worthwhile goal in itself, I don't actually like this idea.

Mainly I disagree with the premise that accumulation of experience is necessary for the conversion.  But this is not a strong disagreement, as I don't understand the motivation for saying so in the first place :).

The beauty of this plan, as far as I see it, is that the only person who has to get any significant experience with Sphinx in order for the conversion to happen is Kevin.   Mostly what the rest of us will do is read the documentation and make sure it looks OK.  Obviously we all need to learn ReST *after* that conversion to write documentation, but there is so much documentation of ReST and sphinx available that I'm not really worried about that part.

More importantly, as JP already noted, the pyOpenSSL documentation is in a different format and the conversion would use a different toolchain, so even if we do have to get some practice, it's not a particularly helpful place to start.  If we *do* need practice for some reason, I think Nevow would be the best place to start, but then, I don't see why the activity level of the project makes any difference.

I have a few issues with the roadmap too, though:

"blah, blah": I'm not sure what that's supposed to mean.

"branches containing lore docs changes should be separated into two groups..." - no criteria are specified for deciding which go into which group.  Ideally we could just get all of those changes merged; if you are making progress on the conversion I'm sure we could organize a sprint to evaluate those changes and either abandon them or get them into review.

Identifying tickets which propose lore functionality is pretty easy; just look at <http://twistedmatrix.com/trac/query?status=new&status=assigned&status=reopened&component=lore&order=priority>.  Any tickets which have not been classified properly and therefore don't show up in that list can be closed later, as we discover them.  I strongly feel that we do *not* need to conduct an exhaustive review of the entire ticket tracker and get everything perfectly in order in order to do this conversion, as long as it's clear to everyone what is supposed to happen to lore-related tickets in the future.

I see the biggest risk at the "docs freeze" step, that the doc conversion guy (or team, as the case may be by that point) will start work, then get distracted and walk away for 6 months, leaving a long period of time where nobody is supposed to write or edit documentation.

The whole point of our branch-based review process is to avoid this sort of situation.  We can't always avoid it (for example, the immense outstanding Conch branches that made everyone afraid to edit those warning-filled tests for years) but I think it's best to follow the same plan as for any branch, and have no formal "freeze" duration, just a point where the conversion branch gets merged to trunk.  It's OK if a few stale doc branches get left out in the cold during the conversion; if they're still stale once the conversion is ready, they must not be terribly actively worked on anyway.

Even in the worst case, where a branch is left stale well after the docs have been deleted from trunk, presumably the author of the change could run lore2sphinx against the conversion, copy the sphinxified doc to their trunk working copy, and make a new branch.  Assuming that the output of the conversion tool is deterministic, the diff should be small and readable.

I'm not saying that we shouldn't identify those changes... It would be good to identify the branches with outstanding doc changes so that we would at least *know* how many changes will be broken, and perhaps motivate their authors to fix them ahead of time.

I'm mainly interested in the "phase 0" outlined in the roadmap; I think that the stuff for phase 1 and 2 sounds good, but I don't think we need any special planning for it, since it fits into our normal development workflow pretty neatly.  People will be filing bugs for documentation typos pretty much forever ;-).  I'd like it if you could break down the "phase 0" a bit more clearly with regard to what happens when, since the review *before* the Big Switch gets thrown to put these changes in trunk is the most important part to get timely feedback from the community.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091203/1e0b1503/attachment-0001.html>

From exarkun at twistedmatrix.com  Thu Dec  3 08:06:36 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 03 Dec 2009 15:06:36 -0000
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <407371A9-E698-4BC6-ADB3-37A67828EA36@twistedmatrix.com>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
	<20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>
	<562bcc10912022229m652b5b85kca0c4ce19f7f2d7f@mail.gmail.com>
	<407371A9-E698-4BC6-ADB3-37A67828EA36@twistedmatrix.com>
Message-ID: <20091203150636.2549.1008291549.divmod.xquotient.115@localhost.localdomain>

On 09:00 am, glyph at twistedmatrix.com wrote:
>
>On Dec 3, 2009, at 1:29 AM, Kevin Horn wrote:
>>On Wed, Dec 2, 2009 at 8:38 PM, <exarkun at twistedmatrix.com> wrote:
>>
>>As far as the (I'm going to call it) roadmap goes, the thought that's
>>pushed its way to the fore for me is that I'd like to try this with
>>something smaller and simpler than Twisted first.  It would be nice if
>>the Divmod projects would qualify here, but they may not be active
>>enough for any real experience to accumulate.
>
>>I haven't run my lore2sphinx script against the Divmod stuff yet, but 
>>I could certainly try it.  The intention is to convert the Divmod 
>>stuff as well as the Twisted stuff eventually though.
>>
>>I've been concentrating on the Twisted docs, since they seemed the 
>>highest priority, but I could detour a bit if you like.  Obviously 
>>that would slow progress on the Twisted stuff a little.
>
>While converting pyOpenSSL's documentation would be a worthwhile goal 
>in itself, I don't actually like this idea.
>
>Mainly I disagree with the premise that accumulation of experience is 
>necessary for the conversion.  But this is not a strong disagreement, 
>as I don't understand the motivation for saying so in the first place 
>:).

I want some experience with Sphinx so that can verify the premise that 
Sphinx is better than Lore.  So, the experience isn't necessary for the 
conversion, it's necessary for me to be comfortable that the conversion 
is a good idea.

Jean-Paul



From glyph at twistedmatrix.com  Thu Dec  3 09:11:36 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 3 Dec 2009 11:11:36 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <20091203150636.2549.1008291549.divmod.xquotient.115@localhost.localdomain>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
	<20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>
	<562bcc10912022229m652b5b85kca0c4ce19f7f2d7f@mail.gmail.com>
	<407371A9-E698-4BC6-ADB3-37A67828EA36@twistedmatrix.com>
	<20091203150636.2549.1008291549.divmod.xquotient.115@localhost.localdomain>
Message-ID: <0972389B-3D34-4F4A-9E86-C5C8E1AC9B40@twistedmatrix.com>


On Dec 3, 2009, at 10:06 AM, exarkun at twistedmatrix.com wrote:

> I want some experience with Sphinx so that can verify the premise that 
> Sphinx is better than Lore.  So, the experience isn't necessary for the 
> conversion, it's necessary for me to be comfortable that the conversion 
> is a good idea.

Oh.  I am definitely taking that as a given.  Or rather: having frequently interacted with the output of both sphinx and lore, I was already confident that it was better than Lore in most ways before we began this conversation.  I had a few specific misgivings, which Kevin has since addressed.

Sphinx clearly has the *features* that we need; Kevin's analysis looks pretty thorough, and even the current error-laden converted documentation serves as a reasonable proof of concept.  Plus, the plan specifically includes resolving the remaining issues with that documentation as a prerequisite to getting it merged.

So while I could believe that there will be bad things about Sphinx which may surprise me, I find it hard to believe that I could be surprised by any bug in Sphinx so awful that it would be *enough worse* than Lore to make continuing to maintain Lore a preferable option, given the presence of a documentation maintainer willing to do the drudgework of conversion.

That said, it might be a good idea to do the Divmod project conversions first for other reasons.  They have less documentation, so there's less to review, and the process could be completed more quickly, letting us get some benefit out of the process earlier on.  Since these projects are the only known remaining users of lore, we could get rid of lore immediately when twisted itself is converted, rather than letting it linger until its users have converted.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091203/c2b54cb2/attachment.html>

From masetto4ever at gmail.com  Thu Dec  3 10:23:28 2009
From: masetto4ever at gmail.com (masetto scarface)
Date: Thu, 3 Dec 2009 18:23:28 +0100
Subject: [Twisted-Python] deferToThread and thread ID
Message-ID: <9bf425a0912030923r2576cd64iff8e6cfd8e4bcb2e@mail.gmail.com>

Hi all,

Last week i've started to study (and love :P) Twisted .
Well, just for didactical purpose i've written a little script which
download a web page (getPage) and calculate a long Fibonacci number within a
deferToThread and it works perfectly.
I would like to see the different threads id of the two operations (download
a web page and the calculation of the number), always for didactical
purposes.
Is there any way to do this?

Here is a piece of my script:

...
    d1 = getPage('http://www.google.com/')
    d1.addCallback(printContents)

    d = threads.deferToThread(largeFibonacciNumber)
    d.addCallback(fibonacciCallback)

if __name__ == '__main__':
    run()
    reactor.run()

Is it possibile to print within these functions their thread id (PID is
always the same :P)?
Something like:

...
Executing printContents func
PID: 1234
Thread ID: x

...
Executing Fibonacci func
PID: 1234
Thread ID: y

I suppose it works in this way, isn't it?

Thanks
---
Masetto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091203/1e99d448/attachment.html>

From kevin.horn at gmail.com  Thu Dec  3 10:27:12 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 3 Dec 2009 11:27:12 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <407371A9-E698-4BC6-ADB3-37A67828EA36@twistedmatrix.com>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
	<20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>
	<562bcc10912022229m652b5b85kca0c4ce19f7f2d7f@mail.gmail.com>
	<407371A9-E698-4BC6-ADB3-37A67828EA36@twistedmatrix.com>
Message-ID: <562bcc10912030927p22cc9657s6def9477708b28cb@mail.gmail.com>

On Thu, Dec 3, 2009 at 3:00 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Dec 3, 2009, at 1:29 AM, Kevin Horn wrote:
>
> On Wed, Dec 2, 2009 at 8:38 PM, <exarkun at twistedmatrix.com> wrote:
>
>>
>> As far as the (I'm going to call it) roadmap goes, the thought that's
>> pushed its way to the fore for me is that I'd like to try this with
>> something smaller and simpler than Twisted first.  It would be nice if
>> the Divmod projects would qualify here, but they may not be active
>> enough for any real experience to accumulate.
>
>
> I haven't run my lore2sphinx script against the Divmod stuff yet, but I
> could certainly try it.  The intention is to convert the Divmod stuff as
> well as the Twisted stuff eventually though.
>
> I've been concentrating on the Twisted docs, since they seemed the highest
> priority, but I could detour a bit if you like.  Obviously that would slow
> progress on the Twisted stuff a little.
>
>
> While converting pyOpenSSL's documentation would be a worthwhile goal in
> itself, I don't actually like this idea.
>
> Mainly I disagree with the premise that accumulation of experience is
> necessary for the conversion.  But this is not a strong disagreement, as I
> don't understand the motivation for saying so in the first place :).
>
> The beauty of this plan, as far as I see it, is that the only person who
> has to get any significant experience with Sphinx in order for the
> conversion to happen is Kevin.   Mostly what the rest of us will do is read
> the documentation and make sure it looks OK.  Obviously we all need to learn
> ReST *after* that conversion to write documentation, but there is so much
> documentation of ReST and sphinx available that I'm not really worried about
> that part.
>
> More importantly, as JP already noted, the pyOpenSSL documentation is in a
> different format and the conversion would use a different toolchain, so even
> if we do have to get some practice, it's not a particularly helpful place to
> start.  If we *do* need practice for some reason, I think Nevow would be the
> best place to start, but then, I don't see why the activity level of the
> project makes any difference.
>
> I have a few issues with the roadmap too, though:
>
> "blah, blah": I'm not sure what that's supposed to mean.
>

Doh!  Forgot to go back and change that...pretend it sayssomething like:
"(list of branches here)"

I'll fix it shortly.

"branches containing lore docs changes should be separated into two
> groups..." - no criteria are specified for deciding which go into which
> group.  Ideally we could just get all of those changes merged; if you are
> making progress on the conversion I'm sure we could organize a sprint to
> evaluate those changes and either abandon them or get them into review.
>

Well, I'm not entirely certain what criteria should be used until we at
least know what branches exist with lore docs in them.

If it's only say 2 or 3 branches that are relatively easy to do, we just do
all of them.  If it's a whole bunch, and some of them are those "everlasting
branches" which have been around for years with no sign of being merged any
time soon, well...that's group B. :)



Identifying tickets which propose lore functionality is pretty easy; just
> look at <
> http://twistedmatrix.com/trac/query?status=new&status=assigned&status=reopened&component=lore&order=priority>.
>  Any tickets which have not been classified properly and therefore don't
> show up in that list can be closed later, as we discover them.  I strongly
> feel that we do *not* need to conduct an exhaustive review of the entire
> ticket tracker and get everything perfectly in order in order to do this
> conversion, as long as it's clear to everyone what is supposed to happen to
> lore-related tickets in the future.
>

Yeah, I don't expect this to be too difficult.  Basically thought I'd run a
couple of searches (including the very one you mentioned above) and go from
there.  I'd like to get most of them though.  One of the problems I think
Twisted has is that there are just too dogone many open tickets.  It gets
tricky to figure out what really needs to be done unless you've been doing
it for years (as the core devs have) because of all the stuff getting in the
way.  Which is why I've been trying to find outstanding tickets that are
almost finished and "shepherd" them to completion.  But that's a discussion
for another day/thread.


> I see the biggest risk at the "docs freeze" step, that the doc conversion
> guy (or team, as the case may be by that point) will start work, then get
> distracted and walk away for 6 months, leaving a long period of time where
> nobody is supposed to write or edit documentation.
>
> The whole point of our branch-based review process is to avoid this sort of
> situation.  We can't always avoid it (for example, the immense outstanding
> Conch branches that made everyone afraid to edit those warning-filled tests
> for years) but I think it's best to follow the same plan as for any branch,
> and have no formal "freeze" duration, just a point where the conversion
> branch gets merged to trunk.  It's OK if a few stale doc branches get left
> out in the cold during the conversion; if they're still stale once the
> conversion is ready, they must not be terribly actively worked on anyway.
>
>
To be honest, I'm not even sure such a freeze would be necessary.  I just
thought I would throw it out there since the actual changeover would involve
a rather large "structural" change to that part of the Twisted source tree.
And I didn't expect it to last more than a few days.  Maybe even hours.
Perhaps I'm just used to having this kind of step.  If the consensus is that
it doesn't need to happen, I'm fine with that.

(FYI, I'm currently working in an environment where version control is
ACTIVELY DISCOURAGED, so it makes me a little paranoid that some kind of
disaster could happen.)


> Even in the worst case, where a branch is left stale well after the docs
> have been deleted from trunk, presumably the author of the change could run
> lore2sphinx against the conversion, copy the sphinxified doc to their trunk
> working copy, and make a new branch.  Assuming that the output of the
> conversion tool is deterministic, the diff should be small and readable.
>

Hmmm.   This kind of procedure could sort of work.  Pondering....

The only potential problem I see with this idea is that I think we'll need
to do some manual cleanups on the converted docs.  But I guess the author
could do as you suggested, then do their own (presumably small) manual
cleanup of their working copy after the conversion of their modified
branch.  Should be workable, if not _quite_ as simple as you've laid it out
(though almost as simple).


> I'm not saying that we shouldn't identify those changes... It would be good
> to identify the branches with outstanding doc changes so that we would at
> least *know* how many changes will be broken, and perhaps motivate their
> authors to fix them ahead of time.
>

I think we're on the same page here.


> I'm mainly interested in the "phase 0" outlined in the roadmap; I think
> that the stuff for phase 1 and 2 sounds good, but I don't think we need any
> special planning for it, since it fits into our normal development workflow
> pretty neatly.  People will be filing bugs for documentation typos pretty
> much forever ;-).  I'd like it if you could break down the "phase 0" a bit
> more clearly with regard to what happens when, since the review *before* the
> Big Switch gets thrown to put these changes in trunk is the most important
> part to get timely feedback from the community.
>

Looking at this after having been away from it for a day or so, I can see
that it's a bit chaotic :)  I guess I had been looking at it too long.

I'll try to update this soonish.  Anything specific that is unclear?

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091203/26bf7e90/attachment.html>

From kevin.horn at gmail.com  Thu Dec  3 10:29:24 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 3 Dec 2009 11:29:24 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report
In-Reply-To: <0972389B-3D34-4F4A-9E86-C5C8E1AC9B40@twistedmatrix.com>
References: <562bcc10911301305x2217b2dsee313f6de1c19f7a@mail.gmail.com>
	<562bcc10912021504j337d9037y49fd8f84f0a3df89@mail.gmail.com>
	<20091203023859.2549.2138276953.divmod.xquotient.97@localhost.localdomain>
	<562bcc10912022229m652b5b85kca0c4ce19f7f2d7f@mail.gmail.com>
	<407371A9-E698-4BC6-ADB3-37A67828EA36@twistedmatrix.com>
	<20091203150636.2549.1008291549.divmod.xquotient.115@localhost.localdomain>
	<0972389B-3D34-4F4A-9E86-C5C8E1AC9B40@twistedmatrix.com>
Message-ID: <562bcc10912030929r7bcdc347s1da4edd3f544a03e@mail.gmail.com>

On Thu, Dec 3, 2009 at 10:11 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Dec 3, 2009, at 10:06 AM, exarkun at twistedmatrix.com wrote:
>
> I want some experience with Sphinx so that can verify the premise that
> Sphinx is better than Lore.  So, the experience isn't necessary for the
> conversion, it's necessary for me to be comfortable that the conversion
> is a good idea.
>
>
> Oh.  I am definitely taking that as a given.  Or rather: having frequently
> interacted with the output of both sphinx and lore, I was already confident
> that it was better than Lore in most ways before we began this conversation.
>  I had a few specific misgivings, which Kevin has since addressed.
>
> Sphinx clearly has the *features* that we need; Kevin's analysis looks
> pretty thorough, and even the current error-laden converted documentation
> serves as a reasonable proof of concept.  Plus, the plan specifically
> includes resolving the remaining issues with that documentation as a
> prerequisite to getting it merged.
>
> So while I could believe that there will be bad things about Sphinx which
> may surprise me, I find it hard to believe that I could be surprised by any
> bug in Sphinx so awful that it would be *enough worse* than Lore to make
> continuing to maintain Lore a preferable option, given the presence of a
> documentation maintainer willing to do the drudgework of conversion.
>
> That said, it might be a good idea to do the Divmod project conversions
> first for other reasons.  They have less documentation, so there's less to
> review, and the process could be completed more quickly, letting us get some
> benefit out of the process earlier on.  Since these projects are the only
> known remaining users of lore, we could get rid of lore immediately when
> twisted itself is converted, rather than letting it linger until its users
> have converted.
>
>
I think maybe I'll try to do a quickie conversion on one of the Divmod
projects (probably Nevow)  in the next couple of days.  I'm not planning on
doing a theme or anything yet...just the content conversion, followed by
manual cleanup.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091203/8f0c54fb/attachment.html>

From exarkun at twistedmatrix.com  Thu Dec  3 10:29:50 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 03 Dec 2009 17:29:50 -0000
Subject: [Twisted-Python] deferToThread and thread ID
In-Reply-To: <9bf425a0912030923r2576cd64iff8e6cfd8e4bcb2e@mail.gmail.com>
References: <9bf425a0912030923r2576cd64iff8e6cfd8e4bcb2e@mail.gmail.com>
Message-ID: <20091203172950.2549.197367674.divmod.xquotient.119@localhost.localdomain>

On 05:23 pm, masetto4ever at gmail.com wrote:
>Hi all,
>
>Last week i've started to study (and love :P) Twisted .
>Well, just for didactical purpose i've written a little script which
>download a web page (getPage) and calculate a long Fibonacci number 
>within a
>deferToThread and it works perfectly.
>I would like to see the different threads id of the two operations 
>(download
>a web page and the calculation of the number), always for didactical
>purposes.
>Is there any way to do this?

deferToThread uses the regular Python threading APIs, so you can too. 
In this case, thread.get_ident() should give you what you're looking 
for.

Jean-Paul



From erik at letterror.com  Thu Dec  3 12:51:28 2009
From: erik at letterror.com (Erik van Blokland)
Date: Thu, 3 Dec 2009 20:51:28 +0100
Subject: [Twisted-Python] Help installing twisted rev 27662, OSX10.6,
	Python 2.6.4
Message-ID: <10B82CFE-7CE3-46A9-989D-8911D84F96C6@letterror.com>

Hullo,

I'm trying to get the current svn version of twisted to run on a current python 2.6.4 (not the stock python, a newer one) on Mac OSX 10.6.

> In file included from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/unicodeobject.h:4,
>                  from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/Python.h:85,
>                  from twisted/runner/portmap.c:10:
> /Developer/SDKs/MacOSX10.4u.sdk/usr/include/stdarg.h:4:25: error: stdarg.h: No such file or directory
> lipo: can't figure out the architecture type of: /var/tmp//ccpMpUAs.out
> error: command 'gcc-4.0' failed with exit status 1

The reference to 10.4 makes me go meh.

All the versions and reports:

# checking which gcc I have installed:
[ebook:~/Develop/svn.twistedmatrix.com/trunk] erik% gcc
i686-apple-darwin10-gcc-4.2.1: no input files

# the python version
[ebook:~/Develop/svn.twistedmatrix.com/trunk] erik% which python
/Library/Frameworks/Python.framework/Versions/2.6/bin/python
[ebook:~/Develop/svn.twistedmatrix.com/trunk] erik% python
Python 2.6.4 (r264:75821M, Oct 27 2009, 19:48:32) 
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin

# the twisted svn revision
[ebook:~/Develop/svn.twistedmatrix.com/trunk] erik% svn up
At revision 27662.

# the full report
[ebook:~/Develop/svn.twistedmatrix.com/trunk] erik% sudo python setup.py install
running install
running bdist_egg
running egg_info
writing requirements to Twisted.egg-info/requires.txt
writing Twisted.egg-info/PKG-INFO
writing top-level names to Twisted.egg-info/top_level.txt
writing dependency_links to Twisted.egg-info/dependency_links.txt
writing manifest file 'Twisted.egg-info/SOURCES.txt'
installing library code to build/bdist.macosx-10.3-fat/egg
running install_lib
running build_py
running build_ext
gcc-4.0 -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -g -O3 -I/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6 -c conftest.c -o conftest.o
gcc-4.0 -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -g -O3 -I/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6 -c conftest.c -o conftest.o
conftest.c:1:23: error: sys/epoll.h: No such file or directory
conftest.c:1:23: error: sys/epoll.h: No such file or directory
lipo: can't figure out the architecture type of: /var/tmp//ccz08AYz.out
building 'twisted.runner.portmap' extension
gcc-4.0 -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -g -O3 -I/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6 -c twisted/runner/portmap.c -o build/temp.macosx-10.3-fat-2.6/twisted/runner/portmap.o
In file included from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/unicodeobject.h:4,
                 from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/Python.h:85,
                 from twisted/runner/portmap.c:10:
/Developer/SDKs/MacOSX10.4u.sdk/usr/include/stdarg.h:4:25: error: stdarg.h: No such file or directory
In file included from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/unicodeobject.h:4,
                 from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/Python.h:85,
                 from twisted/runner/portmap.c:10:
/Developer/SDKs/MacOSX10.4u.sdk/usr/include/stdarg.h:4:25: error: stdarg.h: No such file or directory
lipo: can't figure out the architecture type of: /var/tmp//ccpMpUAs.out
error: command 'gcc-4.0' failed with exit status 1

All pointers welcomed. Many thanks,
Erik


From olivier.parisy at free.fr  Thu Dec  3 16:33:56 2009
From: olivier.parisy at free.fr (Olivier Parisy)
Date: Fri, 04 Dec 2009 00:33:56 +0100
Subject: [Twisted-Python] AbstractDatagramProtocol implementation question
Message-ID: <4B184AE4.4000801@free.fr>

I am studying the implementation of twisted UDP-related classes, and I 
do not understand the point of the "numPorts" attribute of 
AbstractDatagramProtocol.

It is clearly designed to avoid multiple calls to startProtocol() from 
doStart(), but I fail in imagining a scenario where this may happen 
since, as the comment states, doStart() should only be called by 
makeConnection(), which has an explicit "assert self.transport == None" 
guard which, indeed, prevents multiple calls.

So why bother to count calls?

Moreover, makeConnection() could be called multiple times on the same 
DatagramProtocol instance if it was "bound" to multiple ports (multiple 
calls to listenUDP), which can be an interesting scenario but is 
prevented by :
- the above assertion,
- the fact that AbstractDatagramProtocol.transport is not a collection, 
so only the last Port would be available anyway.

Is my reasoning wrong or incomplete? If not, couldn't we simplify 
AbstractDatagramProtocol implementation by removing numPorts?

Two other small remarks regarding documentation / understandability :
- The note "This does not actually implement IListeningPort" on udp.Port 
lead me to think that IReactorUDP.listenUDP should not be declared as 
returning an object implementing IListeningPort in the first place 
(confused me!).
- I had to read the code to understand that a "transport" and a "port" 
are exactly the same thing in the UDP implementation. The tutorial and 
the documentation were not clear about this point, so I did not make the 
link between the "self.transport" available in DatagramProtocol and the 
value returned by listenUDP (confused me!).

Regards,
Olivier.




From exarkun at twistedmatrix.com  Sat Dec  5 22:05:12 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Dec 2009 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1260075912.14.1573049477@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091206/ea41eb47/attachment-0001.html>

From jml at mumak.net  Sun Dec  6 02:26:06 2009
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 6 Dec 2009 20:26:06 +1100
Subject: [Twisted-Python] Deferred on PyPI
Message-ID: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>

Hello,

A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
and how they don't really depend on the rest of Twisted. Later, Mikeal
made a branch that extracted Deferred out of the rest of Twisted, and
I contributed a patch to make it more correct.

You can find the latest release at:
  http://pypi.python.org/pypi/deferred/0.2

I've also made a project for it on Launchpad:
  https://launchpad.net/deferred

So you can get the code with 'bzr branch lp:deferred'. Mikeal is
maintaining the official trunk branch on Github.

I haven't heard anything about it on this list, so I thought I'd
mention to see what you all think and whether we should do anything
about it.

cheers,
jml



From exarkun at twistedmatrix.com  Sun Dec  6 12:29:12 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Dec 2009 19:29:12 -0000
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
Message-ID: <20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>

On 09:26 am, jml at mumak.net wrote:
>Hello,
>
>A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
>and how they don't really depend on the rest of Twisted. Later, Mikeal
>made a branch that extracted Deferred out of the rest of Twisted, and
>I contributed a patch to make it more correct.
>
>You can find the latest release at:
>  http://pypi.python.org/pypi/deferred/0.2
>
>I've also made a project for it on Launchpad:
>  https://launchpad.net/deferred
>
>So you can get the code with 'bzr branch lp:deferred'. Mikeal is
>maintaining the official trunk branch on Github.
>
>I haven't heard anything about it on this list, so I thought I'd
>mention to see what you all think and whether we should do anything
>about it.

I think this is a good idea, except you didn't mention anything about 
the plan for keeping this separate codebase synchronized with Twisted 
development.  I hope the plan isn't to allow it to become out of date.

Jean-Paul



From exarkun at twistedmatrix.com  Sun Dec  6 12:38:46 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Dec 2009 19:38:46 -0000
Subject: [Twisted-Python] AbstractDatagramProtocol implementation
	question
In-Reply-To: <4B184AE4.4000801@free.fr>
References: <4B184AE4.4000801@free.fr>
Message-ID: <20091206193846.2549.1292919030.divmod.xquotient.385@localhost.localdomain>

On 3 Dec, 11:33 pm, olivier.parisy at free.fr wrote:
>I am studying the implementation of twisted UDP-related classes, and I
>do not understand the point of the "numPorts" attribute of
>AbstractDatagramProtocol.
>
>It is clearly designed to avoid multiple calls to startProtocol() from
>doStart(), but I fail in imagining a scenario where this may happen
>since, as the comment states, doStart() should only be called by
>makeConnection(), which has an explicit "assert self.transport == None"
>guard which, indeed, prevents multiple calls.
>
>So why bother to count calls?
>
>Moreover, makeConnection() could be called multiple times on the same
>DatagramProtocol instance if it was "bound" to multiple ports (multiple
>calls to listenUDP), which can be an interesting scenario but is
>prevented by :
>- the above assertion,
>- the fact that AbstractDatagramProtocol.transport is not a collection,
>so only the last Port would be available anyway.
>
>Is my reasoning wrong or incomplete? If not, couldn't we simplify
>AbstractDatagramProtocol implementation by removing numPorts?

This was probably a mindless copy/paste from the TCP implementation.  I 
don't see any reason not to deprecate and then remove the attribute.
>
>Two other small remarks regarding documentation / understandability :
>- The note "This does not actually implement IListeningPort" on 
>udp.Port
>lead me to think that IReactorUDP.listenUDP should not be declared as
>returning an object implementing IListeningPort in the first place
>(confused me!).

This docstring seems to have been inherited from the base class, which 
indeed does not implement IListeningPort.  It would probably be nice if 
udp.Port had its own docstring which was more reflective of udp.Port.
>- I had to read the code to understand that a "transport" and a "port"
>are exactly the same thing in the UDP implementation. The tutorial and
>the documentation were not clear about this point, so I did not make 
>the
>link between the "self.transport" available in DatagramProtocol and the
>value returned by listenUDP (confused me!).

Would you like to file a ticket for the numPorts issue and another one 
for these documentation issues?  If you also attach a patch clarifying 
things, it will probably be applied quite quickly.

Thank you very much for the feedback!

Jean-Paul



From jml at mumak.net  Sun Dec  6 14:10:09 2009
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 7 Dec 2009 08:10:09 +1100
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
Message-ID: <d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>

On Mon, Dec 7, 2009 at 6:29 AM,  <exarkun at twistedmatrix.com> wrote:
> On 09:26 am, jml at mumak.net wrote:
>>Hello,
>>
>>A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
>>and how they don't really depend on the rest of Twisted. Later, Mikeal
>>made a branch that extracted Deferred out of the rest of Twisted, and
>>I contributed a patch to make it more correct.
>>
>>You can find the latest release at:
>>  http://pypi.python.org/pypi/deferred/0.2
>>
>>I've also made a project for it on Launchpad:
>>  https://launchpad.net/deferred
>>
>>So you can get the code with 'bzr branch lp:deferred'. Mikeal is
>>maintaining the official trunk branch on Github.
>>
>>I haven't heard anything about it on this list, so I thought I'd
>>mention to see what you all think and whether we should do anything
>>about it.
>
> I think this is a good idea, except you didn't mention anything about
> the plan for keeping this separate codebase synchronized with Twisted
> development.  I hope the plan isn't to allow it to become out of date.
>

Well, I don't know if there's a plan per se. I'm personally not
intending to maintain the code.

However, if I were the maintainer, I think that I would like Twisted
to depend on this code, dropping its own Deferred implementation.

jml



From terry at jon.es  Sun Dec  6 16:14:30 2009
From: terry at jon.es (Terry Jones)
Date: Mon, 7 Dec 2009 00:14:30 +0100
Subject: [Twisted-Python] A simple DeferredPool class
Message-ID: <19228.15062.327725.129073@jon.es>

I submitted a talk on Twisted Deferreds to the US PyCon about, but it was
unfortunately rejected. The main point I'd planned to make was how nice the
deferred mechanism is, as evidenced by the number of times I've wanted to
do things that might be complex in other scenarios but which just fall out
using deferreds. More importantly, you rarely need to use anything more
than the basic building blocks found in t.i.defer.

I like posting small self-contained examples of this sort of thing, so here
are another couple.  If you know deferreds well I guess these will seem
trivial. If not, you might find them valuable.

Here's the situation I found myself in today.  I'll use an example based on
twisted.web. Suppose you have a twisted.web service running and you want to
shut the service down. But for various reasons you don't want to interrupt
any of the work that it has in progress.

The currently outstanding work the service is doing is bound up in a set of
deferreds that have not yet fired.  E.g., a request has come in and the
server called something that returns a deferred, attached a callback to it
that will finish the request, and returned NOT_DONE_YET. Something like
this:

    def render_GET(self, request):
        d = defer.maybeDeferred(someFunc)
        d.addCallback(_finish, request)
        return server.NOT_DONE_YET

    def _finish(self, result, request):
        request.finish()
 
A the moment that you send the command to shut the service down, zero of
more instances of d (above) may exist, and these will be in various stages
of completion. Given this setup, how can you arrange to wait for all
outstanding requests (if any) before shutting the service down?

A simple solution is just to define a DeferredPool class that maintains a
pool of deferreds which can provide you with a method to (at any time)
obtain a deferred that will fire when/if the pool size next goes to zero.
Here's what I wrote (untested):

    from twisted.internet import defer

    class DeferredPool(object):
        def __init__(self, initialContents=None):
            self._pool = set()
            self._waiting = []
            if initialContents:
                for d in initialContents:
                    self.add(d)

        def _fired(self, result, d):
            self._pool.remove(d)
            if not self._pool:
                waiting, self._waiting = self._waiting, []
                for waiter in waiting:
                    waiter.callback(None)
            return result

        def add(self, d):
            d.addBoth(self._fired, d)
            self._pool.add(d)
            return d

        def deferUntilEmpty(self, testImmediately=True):
            if testImmediately and not self._pool:
                return defer.succeed(None)
            else:
                d = defer.Deferred()
                self._waiting.append(d)
                return d


In your server's startService method, you can do this:

    def startService(self):
        self.pool = DeferredPool()

and the above render_GET code gets changed to look like this:

    def render_GET(self, request):
        d = defer.maybeDeferred(someFunc)
        d.addCallback(_finish, request)
        self.pool.add(d)
        return server.NOT_DONE_YET

and in your stopService method:

    def stopService(self):
        d = self.pool.deferUntilEmpty()
        d.addCallback( whatever else you need to do )
        return d

And that's it.

As usual with these simple deferred solutions, it's simple, it's general,
and it's more widely useful than you might have initially planned.  The
DeferredPool class is a little reminiscent of DeferredList, in that the
deferreds that are submitted each get a call/errback added to themselves
that monitors the progress of the collection and which triggers the waiting
deferreds (if any) once some condition is satisfied. But it's more dynamic,
as the pool can grown and shrink while you're waiting, it can have zero or
more waiters, it's long-lived as the pool can go to down zero size and come
back up and have more waiters added to it, etc. And, as with all these nice
tricks, the existence of the pool and its operation is totally transparent
to the deferreds in use by the original code. Yes, you have to insert one
call to add a deferred to the pool, but that's it.

That's part of what I like the most about this sort of this: adding
transparent call/errbacks into the chain of existing deferreds to do
something no-one thought of initially, and knowing that unless you do
something really dumb you'll have no noticeable effect on the operation of
the original code. That's part of why I find Twisted's deferreds so
elegant.

I also wrote a somewhat more general (and slower) version of questionable
utility. It allows you to pass a function when you ask for a deferred - and
the deferred you get fires when your function returns True. Your function
is called each time a deferred in the pool fires. If you don't pass a
function, you get the above behavior (fire when the pool is empty).  I wont
post the code it here. If you want it, just ask.

Comments welcome on all this, of course.  I'm interested to hear how people
would write tests for the above.

Terry



From exarkun at twistedmatrix.com  Sun Dec  6 16:35:07 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Dec 2009 23:35:07 -0000
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
Message-ID: <20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>

On 09:10 pm, jml at mumak.net wrote:
>On Mon, Dec 7, 2009 at 6:29 AM,  <exarkun at twistedmatrix.com> wrote:
>>On 09:26 am, jml at mumak.net wrote:
>>>Hello,
>>>
>>>A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
>>>and how they don't really depend on the rest of Twisted. Later, 
>>>Mikeal
>>>made a branch that extracted Deferred out of the rest of Twisted, and
>>>I contributed a patch to make it more correct.
>>>
>>>You can find the latest release at:
>>>�http://pypi.python.org/pypi/deferred/0.2
>>>
>>>I've also made a project for it on Launchpad:
>>>�https://launchpad.net/deferred
>>>
>>>So you can get the code with 'bzr branch lp:deferred'. Mikeal is
>>>maintaining the official trunk branch on Github.
>>>
>>>I haven't heard anything about it on this list, so I thought I'd
>>>mention to see what you all think and whether we should do anything
>>>about it.
>>
>>I think this is a good idea, except you didn't mention anything about
>>the plan for keeping this separate codebase synchronized with Twisted
>>development. �I hope the plan isn't to allow it to become out of date.
>
>Well, I don't know if there's a plan per se. I'm personally not
>intending to maintain the code.

Hm.  Is Mikeal?  Is he on this list?
>However, if I were the maintainer, I think that I would like Twisted
>to depend on this code, dropping its own Deferred implementation.

It would be pretty neat to be able to do that.  I don't think it will 
happen unless someone is actively working towards it, though.

Jean-Paul



From mikeal.rogers at gmail.com  Sun Dec  6 19:40:41 2009
From: mikeal.rogers at gmail.com (Mikeal Rogers)
Date: Sun, 6 Dec 2009 18:40:41 -0800
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
Message-ID: <30747dfa0912061840h57bf6c13u44622d26d4400664@mail.gmail.com>

On Sun, Dec 6, 2009 at 3:35 PM, <exarkun at twistedmatrix.com> wrote:

> On 09:10 pm, jml at mumak.net wrote:
>
>> On Mon, Dec 7, 2009 at 6:29 AM,  <exarkun at twistedmatrix.com> wrote:
>>
>>> On 09:26 am, jml at mumak.net wrote:
>>>
>>>> Hello,
>>>>
>>>> A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
>>>> and how they don't really depend on the rest of Twisted. Later, Mikeal
>>>> made a branch that extracted Deferred out of the rest of Twisted, and
>>>> I contributed a patch to make it more correct.
>>>>
>>>> You can find the latest release at:
>>>>  http://pypi.python.org/pypi/deferred/0.2
>>>>
>>>> I've also made a project for it on Launchpad:
>>>>  https://launchpad.net/deferred
>>>>
>>>> So you can get the code with 'bzr branch lp:deferred'. Mikeal is
>>>> maintaining the official trunk branch on Github.
>>>>
>>>> I haven't heard anything about it on this list, so I thought I'd
>>>> mention to see what you all think and whether we should do anything
>>>> about it.
>>>>
>>>
>>> I think this is a good idea, except you didn't mention anything about
>>> the plan for keeping this separate codebase synchronized with Twisted
>>> development.  I hope the plan isn't to allow it to become out of date.
>>>
>>
>> Well, I don't know if there's a plan per se. I'm personally not
>> intending to maintain the code.
>>
>
> Hm.  Is Mikeal?  Is he on this list?


Just had to join in order to reply.

Anyone who wants to contribute is welcome to fork it and send me pull
requests on github. I don't keep up with current Twisted development so I
doubt I'll be in the loop enough to keep this up to date.

http://github.com/mikeal/deferred


>
>  However, if I were the maintainer, I think that I would like Twisted
>> to depend on this code, dropping its own Deferred implementation.
>
>
> It would be pretty neat to be able to do that.  I don't think it will
> happen unless someone is actively working towards it, though.
>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091206/e5180cdf/attachment.html>

From konrads at smelkovs.com  Mon Dec  7 07:50:57 2009
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Mon, 7 Dec 2009 16:50:57 +0200
Subject: [Twisted-Python] Syntactic sugar for deferreds
Message-ID: <d79700b90912070650o4ed3017bk42a59d41a8d2f6f5@mail.gmail.com>

Hi,

One project I had a look at had this nice syntactic sugar for async function
chaining:

>>> event_one() | event_two() | event_three()

I think this could be an interesting alternative to addCallback or yield. I
propose the following syntax

# get deferred with one () and two () chained as callbacks, equivalent to
d=Deferred().addCallback(one).addCallback(two)
>>> d = Deferred() | one | two

# Equivalent to d=Deferred().addCallback(one).addErrback(two)
>>> d = Deferred() | one ^ two

and finally:
# d=Deferred().addBoth(one,two)
>>> d = Deferred() & (one,two)

This could make use of currying/
--
Konrads Smelkovs
Applied IT sorcery.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091207/b6a9e15c/attachment.html>

From ssteinerx at gmail.com  Mon Dec  7 08:02:10 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Mon, 7 Dec 2009 10:02:10 -0500
Subject: [Twisted-Python] Syntactic sugar for deferreds
In-Reply-To: <d79700b90912070650o4ed3017bk42a59d41a8d2f6f5@mail.gmail.com>
References: <d79700b90912070650o4ed3017bk42a59d41a8d2f6f5@mail.gmail.com>
Message-ID: <901EBF24-D4B9-4C52-991D-062E3FE33B52@gmail.com>

On Dec 7, 2009, at 9:50 AM, Konrads Smelkovs wrote:

> Hi,
> 
> One project I had a look at had this nice syntactic sugar for async function chaining:
> 
> >>> event_one() | event_two() | event_three()
> 
> I think this could be an interesting alternative to addCallback or yield. I propose the following syntax
> 
> # get deferred with one () and two () chained as callbacks, equivalent to d=Deferred().addCallback(one).addCallback(two)
> >>> d = Deferred() | one | two
> 
> # Equivalent to d=Deferred().addCallback(one).addErrback(two)
> >>> d = Deferred() | one ^ two
> 
> and finally:
> # d=Deferred().addBoth(one,two)
> >>> d = Deferred() & (one,two)

Yuck.

S




From landreville at deadtreepages.com  Mon Dec  7 08:30:38 2009
From: landreville at deadtreepages.com (Landreville)
Date: Mon, 7 Dec 2009 10:30:38 -0500
Subject: [Twisted-Python] Syntactic sugar for deferreds
In-Reply-To: <901EBF24-D4B9-4C52-991D-062E3FE33B52@gmail.com>
References: <d79700b90912070650o4ed3017bk42a59d41a8d2f6f5@mail.gmail.com>
	<901EBF24-D4B9-4C52-991D-062E3FE33B52@gmail.com>
Message-ID: <9d748c780912070730x49d60274ga675047b05f016b@mail.gmail.com>

On Mon, Dec 7, 2009 at 10:02 AM, ssteinerX at gmail.com <ssteinerx at gmail.com>wrote:

> On Dec 7, 2009, at 9:50 AM, Konrads Smelkovs wrote:
>
> > Hi,
> >
> > One project I had a look at had this nice syntactic sugar for async
> function chaining:
> >
> > >>> event_one() | event_two() | event_three()
> >
> > I think this could be an interesting alternative to addCallback or yield.
> I propose the following syntax
> >
> > # get deferred with one () and two () chained as callbacks, equivalent to
> d=Deferred().addCallback(one).addCallback(two)
> > >>> d = Deferred() | one | two
> >
> > # Equivalent to d=Deferred().addCallback(one).addErrback(two)
> > >>> d = Deferred() | one ^ two
> >
> > and finally:
> > # d=Deferred().addBoth(one,two)
> > >>> d = Deferred() & (one,two)
>
> Yuck.
>
> S
>
>
> I'd have to agree with this. Yield with inline callbacks is certainly
enough syntactic sugar for me.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091207/813fd55b/attachment-0001.html>

From p.mayers at imperial.ac.uk  Mon Dec  7 09:29:00 2009
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 07 Dec 2009 16:29:00 +0000
Subject: [Twisted-Python] Syntactic sugar for deferreds
In-Reply-To: <901EBF24-D4B9-4C52-991D-062E3FE33B52@gmail.com>
References: <d79700b90912070650o4ed3017bk42a59d41a8d2f6f5@mail.gmail.com>
	<901EBF24-D4B9-4C52-991D-062E3FE33B52@gmail.com>
Message-ID: <4B1D2D4C.5050703@imperial.ac.uk>

ssteinerX at gmail.com wrote:
> On Dec 7, 2009, at 9:50 AM, Konrads Smelkovs wrote:
> 
>> Hi,
>>
>> One project I had a look at had this nice syntactic sugar for async function chaining:
>>
>>>>> event_one() | event_two() | event_three()
>> I think this could be an interesting alternative to addCallback or yield. I propose the following syntax
>>
>> # get deferred with one () and two () chained as callbacks, equivalent to d=Deferred().addCallback(one).addCallback(two)
>>>>> d = Deferred() | one | two
>> # Equivalent to d=Deferred().addCallback(one).addErrback(two)
>>>>> d = Deferred() | one ^ two
>> and finally:
>> # d=Deferred().addBoth(one,two)
>>>>> d = Deferred() & (one,two)
> 
> Yuck.

Indeed. This looks more like perl than python.

http://www.python.org/dev/peps/pep-0020/



From grickert at coldstorage.com  Mon Dec  7 09:47:55 2009
From: grickert at coldstorage.com (Gerrat Rickert)
Date: Mon, 7 Dec 2009 11:47:55 -0500
Subject: [Twisted-Python] TimAllen changed [#3956 - Add arraysize option
	to runQuery in adbapi]
In-Reply-To: <E1NHY8J-0001ht-Qh@cube.twistedmatrix.com>
References: <E1NHY8J-0001ht-Qh@cube.twistedmatrix.com>
Message-ID: <BB13E4C4D649234F84A01F6DF64BB87F0501490A@ccs-ex01.coldstorage.com>

 1. About `t.e.adbapi.Transaction.cursor`: It seems that the only
>read/write attribute on a cursor object is `arraysize`, and it seems
>clunky to mess with `Transaction`'s public interface just for that. How
>about leaving the instance variable as `_cursor` and adding
>`getArraySize`/`setArraySize` methods? (a property would be even
better,
>but that requires a new-style class)
>
>I'm kind of ambivalent about the whole approach of this patch, really:
>the only method that `runQuery()` ever calls on the cursor is
>`fetchall()`, which DBAPI-2.0 describes with "Note that the cursor's
>`arraysize` attribute can affect the performance of this operation."
>Presumably in sensible DBAPI modules, `fetchall()` will read chunks as
>large as possible rather than limiting itself to `arraysize`, but
Gerrat
>appears to have found a module that needlessly limits itself, so some
>configuration is needed.
>
>However, do we really need to set a separate `arraysize` for every
>query? Considering we always call `fetchall()`, presumably we'll always
>want to use whatever `arraysize` makes `fetchall()` fastest. I doubt
>there's a value that would work for every DBAPI module in every Twisted
>installation all over the world, but it seems sensible that every query
>in a given `ConnectionPool` would want to use the same arraysize. How
>about adding a `cp_arraysize` keyword parameter to `ConnectionPool`,
and
>applying that setting in `_runInteraction()`? It's a pretty easy way to
>configure `arraysize`, it has no backwards compatibility problems, and
>it shouldn't be too hard for each Twisted user to find a value that
>improves things overall in their environment.
>
>Of course, when you're pushing for performance there's always
>exceptions, and some users might need to set `arraysize` differently
for
>different queries, and maybe use other calls than `fetchall()`. They
can
>continue using `runInteraction()` as they presumably already do.

Sorry I've dropped the ball on this whole request that I initiated.  I'm
kind 
of swamped at work this time of year (I should have more time starting
mid 
Jan.)  I have a minute to weigh in though.

As for the exact details on how this is implemented, I don't have any
strong 
preferences.  I like the suggestion to add the `cp_arraysize` parameter
to 
`ConnectionPool` and apply it in `_runInteraction()`...wish I'd thought
of it.

I also agree that it's unfortunate that the performance of `fetchall()`
is 
impacted by the `arraysize` attribute; but I think that if it's a
deficiency, 
the issue is with the DBAPI-2.0 specification, not with this
implementation. 
(It would be kind of pointless mentioning that `arraysize` could affect
the 
performance of this method, if this method ignored `arraysize`.)

Regards,
	Gerrat



From mike.lifeguard at gmail.com  Mon Dec  7 10:05:07 2009
From: mike.lifeguard at gmail.com (Mike.lifeguard)
Date: Mon, 07 Dec 2009 13:05:07 -0400
Subject: [Twisted-Python] voiced/opped in twisted IRC
Message-ID: <4B1D35C3.2040106@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hello,

I cannot see how to get whether a nick is voiced/opped currently in a
given channel in the twisted IRC framework. I see methhods of changing
modes, but not querying. Can this be easily done?

Thanks,
- -Mike
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (GNU/Linux)

iEYEARECAAYFAksdNcAACgkQst0AR/DaKHtptwCdEMPBHa4wC57+nJorxRpddqaP
PQQAniZbpQ1u/bmv9QF4NmBJXGkDBWvS
=tCQ/
-----END PGP SIGNATURE-----



From exarkun at twistedmatrix.com  Mon Dec  7 12:18:13 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Dec 2009 19:18:13 -0000
Subject: [Twisted-Python] voiced/opped in twisted IRC
In-Reply-To: <4B1D35C3.2040106@gmail.com>
References: <4B1D35C3.2040106@gmail.com>
Message-ID: <20091207191813.2549.198186771.divmod.xquotient.428@localhost.localdomain>

On 05:05 pm, mike.lifeguard at gmail.com wrote:
>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>Hello,
>
>I cannot see how to get whether a nick is voiced/opped currently in a
>given channel in the twisted IRC framework. I see methhods of changing
>modes, but not querying. Can this be easily done?

This information is made available as part of the name list response. 
An op'd user has their name prefixed with "@".  A voiced user has the 
"+" prefix.

Jean-Paul



From mike.lifeguard at gmail.com  Mon Dec  7 13:35:46 2009
From: mike.lifeguard at gmail.com (Mike.lifeguard)
Date: Mon, 07 Dec 2009 16:35:46 -0400
Subject: [Twisted-Python] voiced/opped in twisted IRC
In-Reply-To: <20091207191813.2549.198186771.divmod.xquotient.428@localhost.localdomain>
References: <4B1D35C3.2040106@gmail.com>
	<20091207191813.2549.198186771.divmod.xquotient.428@localhost.localdomain>
Message-ID: <4B1D6722.4080809@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

exarkun at twistedmatrix.com wrote:
> On 05:05 pm, mike.lifeguard at gmail.com wrote:
>> -----BEGIN PGP SIGNED MESSAGE-----
>> Hash: SHA1
>>
>> Hello,
>>
>> I cannot see how to get whether a nick is voiced/opped currently in a
>> given channel in the twisted IRC framework. I see methhods of changing
>> modes, but not querying. Can this be easily done?
> 
> This information is made available as part of the name list response. 
> An op'd user has their name prefixed with "@".  A voiced user has the 
> "+" prefix.
> 
> Jean-Paul
> 

So I need to do a /names each time I want to check if someone is voiced?
That seems rather inefficient.

I suppose it is also in any privmsg from them, but I don't see a way to
get that from irc_PRIVMSG. I guess I can rewrite that...

BTW, at line 417, the H/G is here/gone.

- -Mike
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (GNU/Linux)

iEYEARECAAYFAksdZx8ACgkQst0AR/DaKHtlQACgnP5q+ITEHTNQ8EKPUIzAf5+u
bxgAoMalSfAIXJRAw0OsVfZVGSEWP+TP
=L77y
-----END PGP SIGNATURE-----



From jml at mumak.net  Tue Dec  8 02:50:50 2009
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 8 Dec 2009 20:50:50 +1100
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
Message-ID: <d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>

On Mon, Dec 7, 2009 at 10:35 AM,  <exarkun at twistedmatrix.com> wrote:
> On 09:10 pm, jml at mumak.net wrote:
>> On Mon, Dec 7, 2009 at 6:29 AM,  <exarkun at twistedmatrix.com> wrote:
>>> On 09:26 am, jml at mumak.net wrote:
>>>>
>>>> A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
>>>> and how they don't really depend on the rest of Twisted. Later, Mikeal
>>>> made a branch that extracted Deferred out of the rest of Twisted, and
>>>> I contributed a patch to make it more correct.
>>>>
...
>>>
>>> I think this is a good idea, except you didn't mention anything about
>>> the plan for keeping this separate codebase synchronized with Twisted
>>> development.  I hope the plan isn't to allow it to become out of date.
>>
...
>> However, if I were the maintainer, I think that I would like Twisted
>> to depend on this code, dropping its own Deferred implementation.
>
> It would be pretty neat to be able to do that.  I don't think it will happen
> unless someone is actively working towards it, though.
>

If there's in principal agreement, I can laconically work towards it.

jml



From apacheco.uy at gmail.com  Tue Dec  8 05:24:37 2009
From: apacheco.uy at gmail.com (=?ISO-8859-1?Q?An=EDbal_Pacheco?=)
Date: Tue, 08 Dec 2009 10:24:37 -0200
Subject: [Twisted-Python] serialport protocol as a service
Message-ID: <4B1E4585.7040007@gmail.com>

Hello list,

Is there any way to get a service like the twisted.internet.TCPServer 
but for serialport?

I read the serialport code but couldn't figure out how to build such an 
analogy with the tcp server.

The goal I wanna reach is to attach this "serial port service" to my 
service.MultiService object which already works great with a TCPServer 
and two TimerService

thanks!



From gabriel.rossetti at arimaz.com  Tue Dec  8 05:50:47 2009
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Tue, 08 Dec 2009 13:50:47 +0100
Subject: [Twisted-Python] reactor.callLater() or reactor.callFromThread()
 when sending msg just before quit
Message-ID: <4B1E4BA7.1040905@arimaz.com>

Hello everyone,

I have to send a message just before my service quits, but sometimes the 
reactor quits before the msg is sent.
I was wondering if I should user reactor.callLater like so :

self.sendMessage(msg)
reactor.callLater(1, self.stop)

(which I don't really like), or use reactor.callFromThread like so :

self.sendMessage(msg)
reactor.callFromThread(self.stop)

(self.stop calls reactor.stop at some point).

I really need for that msg to be sent before the reactor shuts down.

Thank you,
Gabriel



From exarkun at twistedmatrix.com  Tue Dec  8 08:14:06 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 08 Dec 2009 15:14:06 -0000
Subject: [Twisted-Python] reactor.callLater() or
	reactor.callFromThread()	when sending msg just before quit
In-Reply-To: <4B1E4BA7.1040905@arimaz.com>
References: <4B1E4BA7.1040905@arimaz.com>
Message-ID: <20091208151406.2549.1712465614.divmod.xquotient.448@localhost.localdomain>

On 12:50 pm, gabriel.rossetti at arimaz.com wrote:
>Hello everyone,
>
>I have to send a message just before my service quits, but sometimes 
>the
>reactor quits before the msg is sent.
>I was wondering if I should user reactor.callLater like so :
>
>self.sendMessage(msg)
>reactor.callLater(1, self.stop)
>
>(which I don't really like), or use reactor.callFromThread like so :
>
>self.sendMessage(msg)
>reactor.callFromThread(self.stop)
>
>(self.stop calls reactor.stop at some point).
>
>I really need for that msg to be sent before the reactor shuts down.

You should stop the reactor only after you receive acknowledgement that 
the message arrived at its destination.  Hopefully the protocol you're 
using supports this.

There are several ways in which bytes on a TCP connection can get lost. 
When you call reactor.stop() immediately after trying to send some 
bytes, it's most likely that they get lost because they are still in 
Twisted's send buffer.  However, even if they get out of Twisted's send 
buffer and into the kernel's, they still may get lost on the network. 
And even if they arrive in the destination's kernel receive buffer, the 
receiving process may still exit (perhaps unintentionally) without 
reading them.  And even if it reads them, it may exit without processing 
them.  And even if they are processed, the disk I/O which records the 
result of that processing may be interrupted by a power loss or similar 
event.

You may not need to deal with all of these eventualities (it depends on 
the purpose and reliability requirements of your application, of 
course).  It's very common to want to know that the application on the 
other side of the connection read and processed the bytes, though.  This 
requires that the protocol allow messages to be acknowledged.

Jean-Paul



From itamar at itamarst.org  Tue Dec  8 08:20:24 2009
From: itamar at itamarst.org (Itamar Turner-Trauring (aka Shtull-Trauring))
Date: Tue, 08 Dec 2009 10:20:24 -0500
Subject: [Twisted-Python] reactor.callLater() or
 reactor.callFromThread() when sending msg just before quit
In-Reply-To: <4B1E4BA7.1040905@arimaz.com>
References: <4B1E4BA7.1040905@arimaz.com>
Message-ID: <1260285624.7200.48.camel@pintsize>

On Tue, 2009-12-08 at 13:50 +0100, Gabriel Rossetti wrote:
> I have to send a message just before my service quits, but sometimes the 
> reactor quits before the msg is sent.
> I was wondering if I should user reactor.callLater like so :
...
> (which I don't really like), or use reactor.callFromThread like so :
...

Neither of these will necessarily work. Instead, you want to use a
shutdown hook:

reactor.addSystemEventTrigger("before", "shutdown", f)

when you do reactor.stop(), f will be called... and shutdown will be
delayed until the Deferred f returns is triggered. In your case, send
message, tell connection to close, and then stop reactor. If you make
sure the Deferred from f only gets callback()ed when connectionLost is
called you'll get behavior you want.




From glyph at twistedmatrix.com  Tue Dec  8 08:42:50 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 8 Dec 2009 10:42:50 -0500
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
	<d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
Message-ID: <E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>


On Dec 8, 2009, at 4:50 AM, Jonathan Lange wrote:

> On Mon, Dec 7, 2009 at 10:35 AM,  <exarkun at twistedmatrix.com> wrote:
>> On 09:10 pm, jml at mumak.net wrote:
>>> On Mon, Dec 7, 2009 at 6:29 AM,  <exarkun at twistedmatrix.com> wrote:
>>>> On 09:26 am, jml at mumak.net wrote:
>>>>> 
>>>>> A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
>>>>> and how they don't really depend on the rest of Twisted.

>>> However, if I were the maintainer, I think that I would like Twisted
>>> to depend on this code, dropping its own Deferred implementation.
>> 
>> It would be pretty neat to be able to do that.  I don't think it will happen
>> unless someone is actively working towards it, though.

> If there's in principal agreement, I can laconically work towards it.

In (ahem) principle, I agree, but my agreement is contingent upon the theoretical existence of things like "a good package manager for Python" and "installation instructions on our website which clearly explain how to install dependencies in a context-sensitive manner" (i.e. depending on your platform).

Still, I think that this work is an excellent proof of concept and therefore immediately useful in its own right.  Thank you, Mikeal :).

So, I would regard this as a long-term goal.  Given the pace of our normal, non-"laconic" work, though, I think there's little risk it will be completed in the near term ;-).




From ltaylor.volks at gmail.com  Tue Dec  8 12:50:37 2009
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Tue, 08 Dec 2009 12:50:37 -0700
Subject: [Twisted-Python] serialport protocol as a service
In-Reply-To: <4B1E4585.7040007@gmail.com>
References: <4B1E4585.7040007@gmail.com>
Message-ID: <4B1EAE0D.9040907@gmail.com>

On 12/8/09 5:24 AM, Aníbal Pacheco wrote:
> Hello list,
> 
> Is there any way to get a service like the twisted.internet.TCPServer 
> but for serialport?
> 
> I read the serialport code but couldn't figure out how to build such an 
> analogy with the tcp server.
> 
> The goal I wanna reach is to attach this "serial port service" to my 
> service.MultiService object which already works great with a TCPServer 
> and two TimerService
> 

You should be able to implement your own Service class and create your
SerialPort instances in the startService method. e.g. (untested):

from twisted.application import service
from twisted.internet import reactor
from twisted.internet.serialport import SerialPort
from twisted.protocols.basic import LineReceiver

class SerialService(service.Service):
    def startService(self):
        self.serial = SerialPort(LineReceiver, '/dev/tty/serialport',
reactor)

multiService = service.MultiService()
serialService = SerialService()
serialService.setServiceParent(multiService)

# Add some other services...

application = service.Application("Serial MultiService Example")
multiService.setServiceParent(application)


http://twistedmatrix.com/documents/9.0.0/api/twisted.application.service.Service.html




From landreville at deadtreepages.com  Tue Dec  8 14:04:12 2009
From: landreville at deadtreepages.com (Landreville)
Date: Tue, 8 Dec 2009 16:04:12 -0500
Subject: [Twisted-Python] Twistd logging
Message-ID: <9d748c780912081304m5fbf49ffk37a7e03ca7583819@mail.gmail.com>

Is there a way I can customize the format of log file?
I want to add more information to each line (about the xmlrpc method being
called), but I can't find where these lines get written out. I know I can
print a message to the log in my _getFunction, but I would prefer to have
one line per request.

Thanks,
Landreville
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091208/9d01abb3/attachment.html>

From apacheco.uy at gmail.com  Tue Dec  8 18:36:59 2009
From: apacheco.uy at gmail.com (=?ISO-8859-1?Q?An=EDbal_Pacheco?=)
Date: Tue, 08 Dec 2009 23:36:59 -0200
Subject: [Twisted-Python] serialport protocol as a service
In-Reply-To: <4B1EAE0D.9040907@gmail.com>
References: <4B1E4585.7040007@gmail.com> <4B1EAE0D.9040907@gmail.com>
Message-ID: <4B1EFF3B.20902@gmail.com>

On 12/08/2009 05:50 PM, Lucas Taylor wrote:
> On 12/8/09 5:24 AM, Aníbal Pacheco wrote:
>> Hello list,
>>
>> Is there any way to get a service like the twisted.internet.TCPServer
>> but for serialport?
>>
>> I read the serialport code but couldn't figure out how to build such an
>> analogy with the tcp server.
>>
>> The goal I wanna reach is to attach this "serial port service" to my
>> service.MultiService object which already works great with a TCPServer
>> and two TimerService
>>
>
> You should be able to implement your own Service class and create your
> SerialPort instances in the startService method. e.g. (untested):
>
> from twisted.application import service
> from twisted.internet import reactor
> from twisted.internet.serialport import SerialPort
> from twisted.protocols.basic import LineReceiver
>
> class SerialService(service.Service):
>      def startService(self):
>          self.serial = SerialPort(LineReceiver, '/dev/tty/serialport',
> reactor)
>
> multiService = service.MultiService()
> serialService = SerialService()
> serialService.setServiceParent(multiService)
>
> # Add some other services...
>
> application = service.Application("Serial MultiService Example")
> multiService.setServiceParent(application)
>
>
> http://twistedmatrix.com/documents/9.0.0/api/twisted.application.service.Service.html


Many thanks!

I could solve the problem after asking for help, I've "attached" my 
serial protocol to the reactor,  I was confused because before that in 
my program there was no need for importing the reactor. Anyway, I will 
consider your code because it seems to fit better in my service than my 
solution.



From terry at jon.es  Tue Dec  8 21:09:35 2009
From: terry at jon.es (Terry Jones)
Date: Wed, 9 Dec 2009 05:09:35 +0100
Subject: [Twisted-Python] A resizable cooperator class for queuing and
	dispatching jobs
Message-ID: <19231.8959.296355.40332@jon.es>

I just wrote a fun class that lets you

   - submit jobs to be dispatched to a queue
   - manage how many tasks are in progress at once
   - dynamically adjust that number
   - shut down cleanly, including
   - recovering jobs that were queued but hadn't been dispatched

This uses a combination of a DeferredQueue, a task.Cooperator, and the
DeferredPool I posted on Monday. For now I named it ResizableDispatchQueue
(not a great name, suggestions welcome). You can pick it up from
http://pastebin.com/f7dc9320e

I can think of lots of uses. Here's a simple example.

You want to write a server with a web interface that allows people to enter
their phone number so you can send them an SMS. You anticipate lots of
people will use the service. But sending SMS messages is quite slow, and
the company that you ship those jobs off to is concerned that you'll
overrun their service (or maybe they have an API limit, etc). So you need
to queue up jobs locally and send them off at a certain rate. You'd like to
be able to adjust that rate up or down. You also want to be able to shut
your service down cleanly (i.e., not in the middle of a task), and when you
restart it you want to be able to re-queue the jobs that were queued last
time but which hadn't gone out.

For example, suppose your function that sends the SMS is called sendSMS and
that it takes a (number, message) tuple arg. Then:

    dispatcher = ResizableDispatchQueue(sendSMS)
    # Tell it to send at most 5 things at once.
    dispatcher.start(5)      # Same as dispatcher.width = 5

    # Later... send off some SMS messages.
    dispatcher.put((2127399921, 'Hello...'))
    dispatcher.put((5052929919, 'Test...'))
    
    # Later, bump up to 10 simultaneous jobs.
    dispatcher.width = 10

    # Oops, turns out we're sending too fast, turn it down a little.
    dispatcher.narrow(3)

    # Get a copy of the list of pending jobs.
    jobs = dispatcher.pending()

    # Arrange to increase the number of jobs in an hour's time.
    reactor.callLater(3600, dispatcher.setWidth, 20)

    # Time to shutdown. Wait for any tasks underway to complete, and save
    # the list of jobs not yet dispatched.

    def saveJobs(jobs):
        pickle.dump(jobs, ...)

    d = dispatcher.stop()
    d.addCallback(saveJobs)


On restart you just unpickle the old job list and pass its items to
dispatcher.put().

I have a small test suite that's a bit weird (it schedules various things
and tests how long the overall job takes and what's still pending when stop
is called). It could be much better, but it does at least illustrate that
the code seems to work. Let me know if you want it.

There's also the issue about what to do when the dispatch function hits an
error.  An option could be added to re-queue the job, but it's perhaps
better to let the dispatch function do that along with whatever else it
needs.

As usual, I'd be happy to hear comments and suggestions. I'll probably
adjust this so the DeferredQueue uses a priority queue.

Terry



From jml at mumak.net  Wed Dec  9 01:27:39 2009
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 9 Dec 2009 19:27:39 +1100
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
	<d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
	<E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>
Message-ID: <d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>

On Wed, Dec 9, 2009 at 2:42 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> On Dec 8, 2009, at 4:50 AM, Jonathan Lange wrote:
>
>> On Mon, Dec 7, 2009 at 10:35 AM,  <exarkun at twistedmatrix.com> wrote:
>>> On 09:10 pm, jml at mumak.net wrote:
>>>> On Mon, Dec 7, 2009 at 6:29 AM,  <exarkun at twistedmatrix.com> wrote:
>>>>> On 09:26 am, jml at mumak.net wrote:
>>>>>>
>>>>>> A while ago at EuroPython, Mikeal Rogers and I talked about Deferreds
>>>>>> and how they don't really depend on the rest of Twisted.
>
>>>> However, if I were the maintainer, I think that I would like Twisted
>>>> to depend on this code, dropping its own Deferred implementation.
>>>
>>> It would be pretty neat to be able to do that.  I don't think it will happen
>>> unless someone is actively working towards it, though.
>
>> If there's in principal agreement, I can laconically work towards it.
>
> In (ahem) principle, I agree,

I can't believe I got that wrong. Sorry.

>but my agreement is contingent upon the theoretical existence of things like "a good package manager for Python" and "installation instructions on our website which clearly explain how to install dependencies in a context-sensitive manner" (i.e. depending on your platform).

I'm with you on the installation instructions. Why this should block
on a good package manager for Python?

> So, I would regard this as a long-term goal.  Given the pace of our normal, non-"laconic" work, though, I think there's little risk it will be completed in the near term ;-).

I completely screwed up with the advanced English usage then. :(

jml



From exarkun at twistedmatrix.com  Wed Dec  9 08:07:37 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 09 Dec 2009 15:07:37 -0000
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
	<d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
	<E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>
	<d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
Message-ID: <20091209150737.2549.1924060212.divmod.xquotient.528@localhost.localdomain>

On 08:27 am, jml at mumak.net wrote:
>On Wed, Dec 9, 2009 at 2:42 AM, Glyph Lefkowitz 
><glyph at twistedmatrix.com> wrote:
>>
>>On Dec 8, 2009, at 4:50 AM, Jonathan Lange wrote:
>>>On Mon, Dec 7, 2009 at 10:35 AM, �<exarkun at twistedmatrix.com> wrote:
>>>>On 09:10 pm, jml at mumak.net wrote:
>>>>>On Mon, Dec 7, 2009 at 6:29 AM, �<exarkun at twistedmatrix.com> wrote:
>>>>>>On 09:26 am, jml at mumak.net wrote:
>>>>>>>
>>>>>>>A while ago at EuroPython, Mikeal Rogers and I talked about 
>>>>>>>Deferreds
>>>>>>>and how they don't really depend on the rest of Twisted.
>>
>>>>>However, if I were the maintainer, I think that I would like 
>>>>>Twisted
>>>>>to depend on this code, dropping its own Deferred implementation.
>>>>
>>>>It would be pretty neat to be able to do that. �I don't think it 
>>>>will happen
>>>>unless someone is actively working towards it, though.
>>
>>>If there's in principal agreement, I can laconically work towards it.
>>
>>In (ahem) principle, I agree,
>
>I can't believe I got that wrong. Sorry.
>>but my agreement is contingent upon the theoretical existence of 
>>things like "a good package manager for Python" and "installation 
>>instructions on our website which clearly explain how to install 
>>dependencies in a context-sensitive manner" (i.e. depending on your 
>>platform).
>
>I'm with you on the installation instructions. Why this should block
>on a good package manager for Python?

Probably it shouldn't, if we ever actually want it to happen.  We can 
distribute the top-level deferred package with Twisted when we actually 
get to that point.

Jean-Paul



From glyph at twistedmatrix.com  Wed Dec  9 08:54:15 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 9 Dec 2009 10:54:15 -0500
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
	<d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
	<E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>
	<d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
Message-ID: <1B21C188-BB55-4B6A-914B-4E2315335CCB@twistedmatrix.com>


On Dec 9, 2009, at 3:27 AM, Jonathan Lange wrote:

> On Wed, Dec 9, 2009 at 2:42 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> but my agreement is contingent upon the theoretical existence of things like "a good package manager for Python" and "installation instructions on our website which clearly explain how to install dependencies in a context-sensitive manner" (i.e. depending on your platform).
> 
> I'm with you on the installation instructions. Why this should block
> on a good package manager for Python?

Perhaps this requirement is over-broad.  My concern is the users who already complain "why do I need zope" when installing Twisted, and then can't seem to get ZI installed even when the distinction is explained.  If, as Jean-Paul suggests, the "deferred" package were included with the Twisted release *and* silently importable / installable, this concern would be addressed.

However, there are other issues: the deferred package would need to be governed by a compatibility policy as strict as Twisted's (or stricter, actually, given its rather central nature).  I wouldn't feel comfortable without an equally strenuous review process.  Its test suite would have to be run on our buildbots, or on a more comprehensive fleet of its own.  It would need to come packaged with its own documentation, which implies that something like Kevin Horn's proposed sphinx migration would be completed first.  And we'd need to migrate all the open tickets affecting Deferred and Failure to a new tracker.

It seems like this annoying procedural stuff could be deferred (ha ha) until after figuring out the technical problems (for example: coming up with a system of hooks so that it can be integrated with trial without directly depending on Twisted logging) if the work to modify the code itself were done in a Twisted subversion branch first; that way we could still schedule buildbot builds and close existing tickets against Deferred without blocking on schlepping a bunch of infrastructure into a new repository.  If Mikeal needs commit access in order to help I'm sure that could be arranged.

Sorry if this seems like a lot of stuff.  I've tried to be as comprehensive as possible in this message so as not to continue to throw up new, surprising roadblocks as the work goes along.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091209/575835bd/attachment.html>

From glyph at twistedmatrix.com  Wed Dec  9 09:14:30 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 9 Dec 2009 11:14:30 -0500
Subject: [Twisted-Python] A resizable cooperator class for queuing and
	dispatching jobs
In-Reply-To: <19231.8959.296355.40332@jon.es>
References: <19231.8959.296355.40332@jon.es>
Message-ID: <B0404436-C752-450D-A5BC-3CBAF8CD84F3@twistedmatrix.com>


On Dec 8, 2009, at 11:09 PM, Terry Jones wrote:

> I just wrote a fun class that lets you
> 
>   - submit jobs to be dispatched to a queue
>   - manage how many tasks are in progress at once
>   - dynamically adjust that number
>   - shut down cleanly, including
>   - recovering jobs that were queued but hadn't been dispatched

That does sound like fun!

>    # Later... send off some SMS messages.
>    dispatcher.put((2127399921, 'Hello...'))
>    dispatcher.put((5052929919, 'Test...'))

Not that this is really germane to the class in question, but, if you're going to be sending SMS messages, you should really represent the numbers as strings (well, actually, structured objects are always better, so PhoneNumber.fromString) because international phone prefixes sometimes - actually I think it would be more accurate to say "usually" - start with a zero.

>    # Later, bump up to 10 simultaneous jobs.
>    dispatcher.width = 10
> 
>    # Oops, turns out we're sending too fast, turn it down a little.
>    dispatcher.narrow(3)

This seems somewhat asymmetric.  Why are there 'widen' and 'narrow' methods if I can just set the 'width' attribute directly?  I could always just do '.width +=' and '.width -=' if I have a relative value.




From jared.gisin at isilon.com  Wed Dec  9 09:52:33 2009
From: jared.gisin at isilon.com (Jared Gisin)
Date: Wed, 9 Dec 2009 08:52:33 -0800
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web HTTP
	implementation
Message-ID: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>

I'm writing a HTTP server that exposes various resources as an API.
Unless I'm missing something, twisted's HTTP protocol implementation is
in twisted.web.http. 

 

The problem with this package is that it's inexplicably wrapped up in
HTML. HTML has nothing to do with HTTP as a whole. Sure, HTML is often
what HTTP requests return, but there's no reason why it should nor is
there any RFC that says it should. HTTP request can return anything.

 

The software I'm writing is a programmatic interface. One never uses a
web browser, so things such as displaying tracebacks
(twisted.web.util.formatFailure) in HTML format is completely wrong.
When implementing HTTP, why assume the client always wants HTML. It seem
completely wrong from these modules and libraries to be so full of HTML
output. HTML output should be provided as a separate config or option
for twisted.web. In this case, why not just dump the traceback directly
to the HTTP entity-body? As a consumer of twisted.web, I  should not
have to battle with the hard-coded HTML output of this library. If I
want the library to dump things in HTML output, I should have an option
to tell it to do that (and I should be able to better customize the
HTML), but I should not get HTML by default. 

 

Jared

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091209/2a0df985/attachment.html>

From exarkun at twistedmatrix.com  Wed Dec  9 10:26:35 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 09 Dec 2009 17:26:35 -0000
Subject: [Twisted-Python] Twistd logging
In-Reply-To: <9d748c780912081304m5fbf49ffk37a7e03ca7583819@mail.gmail.com>
References: <9d748c780912081304m5fbf49ffk37a7e03ca7583819@mail.gmail.com>
Message-ID: <20091209172635.2549.110983264.divmod.xquotient.554@localhost.localdomain>

On 8 Dec, 09:04 pm, landreville at deadtreepages.com wrote:
>Is there a way I can customize the format of log file?
>I want to add more information to each line (about the xmlrpc method 
>being
>called), but I can't find where these lines get written out. I know I 
>can
>print a message to the log in my _getFunction, but I would prefer to 
>have
>one line per request.

Are you talking about the CLF request log or the main log file (normally 
called "twistd.log")?

The former can be controlled by overriding the "log" method of Site. 
The latter is controlled by the general log observer(s) which is 
installed.  You can read about customizing the log observer using .tac 
files in the online documentation:

  http://twistedmatrix.com/documents/current/core/howto/application.html

Jean-Paul



From foom at fuhm.net  Wed Dec  9 10:34:11 2009
From: foom at fuhm.net (James Y Knight)
Date: Wed, 9 Dec 2009 12:34:11 -0500
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web HTTP
	implementation
In-Reply-To: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
Message-ID: <2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net>

On Dec 9, 2009, at 11:52 AM, Jared Gisin wrote:
> I’m writing a HTTP server that exposes various resources as an API. Unless I’m missing something, twisted’s HTTP protocol implementation is in twisted.web.http.
>  
> The problem with this package is that it’s inexplicably wrapped up in HTML. HTML has nothing to do with HTTP as a whole. Sure, HTML is often what HTTP requests return, but there’s no reason why it should nor is there any RFC that says it should. HTTP request can return anything.
> 
> The software I’m writing is a programmatic interface. One never uses a web browser, so things such as displaying tracebacks (twisted.web.util.formatFailure) in HTML format is completely wrong. When implementing HTTP, why assume the client always wants HTML. It seem completely wrong from these modules and libraries to be so full of HTML output. HTML output should be provided as a separate config or option for twisted.web. In this case, why not just dump the traceback directly to the HTTP entity-body? As a consumer of twisted.web, I  should not have to battle with the hard-coded HTML output of this library. If I want the library to dump things in HTML output, I should have an option to tell it to do that (and I should be able to better customize the HTML), but I should not get HTML by default.

Customizability is great, and certainly error pages should really not be hard-coded at all. However, the default of returning HTML descriptions of errors is a good default, and should remain thus. There's usually two cases of interest:

1) A program is responding to the error. In that case, it will use the HTTP result code, and not care what the content is at all.
2) A human is reading the error message. At least 99% of the time, this will be happening through a web browser. They understand HTML. 

I'd expect your program to be in case #1, although I don't know if you have some need to parse out the particular tracebacks for some reason?

James


From exarkun at twistedmatrix.com  Wed Dec  9 10:34:34 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 09 Dec 2009 17:34:34 -0000
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web
	HTTP	implementation
In-Reply-To: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
Message-ID: <20091209173434.2549.1230482094.divmod.xquotient.568@localhost.localdomain>

On 04:52 pm, jared.gisin at isilon.com wrote:
>I'm writing a HTTP server that exposes various resources as an API.
>Unless I'm missing something, twisted's HTTP protocol implementation is
>in twisted.web.http.
>
>The problem with this package is that it's inexplicably wrapped up in
>HTML. HTML has nothing to do with HTTP as a whole. Sure, HTML is often
>what HTTP requests return, but there's no reason why it should nor is
>there any RFC that says it should. HTTP request can return anything.

It's not inextricable.  A few relatively simple patches would probably 
be sufficient to extricate the HTML from the HTTP. :)

The reason for these things being mixed up is that it made sense at the 
time and provided reasonable behavior for some actual use-cases.  That 
doesn't mean the behavior is right, but hopefully it should be clear why 
it was implemented.  The reason it hasn't been changed is only that no 
one has been bothered enough by it has come along to change it.
>The software I'm writing is a programmatic interface. One never uses a
>web browser, so things such as displaying tracebacks
>(twisted.web.util.formatFailure) in HTML format is completely wrong.
>When implementing HTTP, why assume the client always wants HTML. It 
>seem
>completely wrong from these modules and libraries to be so full of HTML
>output. HTML output should be provided as a separate config or option
>for twisted.web. In this case, why not just dump the traceback directly
>to the HTTP entity-body? As a consumer of twisted.web, I  should not
>have to battle with the hard-coded HTML output of this library. If I
>want the library to dump things in HTML output, I should have an option
>to tell it to do that (and I should be able to better customize the
>HTML), but I should not get HTML by default.

I agree.  The first step to take is probably to identify the precise 
places in the code where HTML is being generated and emitted (this may 
just be Request.processingFailed, but I haven't looked around for others 
lately) where one might not want to deal with HTML.  The next step would 
be to file a ticket enumerating these.  After that, a patch which allows 
these behaviors to be overridden can be submitted, reviewed(, revised, 
submitted, ...), and applied.

This will be valuable even for people who like HTML, since it will let 
them customize the HTML to suit their preferences.

Jean-Paul



From landreville at deadtreepages.com  Wed Dec  9 11:14:43 2009
From: landreville at deadtreepages.com (Landreville)
Date: Wed, 9 Dec 2009 13:14:43 -0500
Subject: [Twisted-Python] Twistd logging
In-Reply-To: <20091209172635.2549.110983264.divmod.xquotient.554@localhost.localdomain>
References: <9d748c780912081304m5fbf49ffk37a7e03ca7583819@mail.gmail.com>
	<20091209172635.2549.110983264.divmod.xquotient.554@localhost.localdomain>
Message-ID: <9d748c780912091014p547542d4y29b3f62532702e2a@mail.gmail.com>

On Wed, Dec 9, 2009 at 12:26 PM, <exarkun at twistedmatrix.com> wrote:

> On 8 Dec, 09:04 pm, landreville at deadtreepages.com wrote:
> >Is there a way I can customize the format of log file?
> >I want to add more information to each line (about the xmlrpc method
> >being
> >called), but I can't find where these lines get written out. I know I
> >can
> >print a message to the log in my _getFunction, but I would prefer to
> >have
> >one line per request.
>
> Are you talking about the CLF request log or the main log file (normally
> called "twistd.log")?
>
> The former can be controlled by overriding the "log" method of Site.
> The latter is controlled by the general log observer(s) which is
> installed.  You can read about customizing the log observer using .tac
> files in the online documentation:
>
>  http://twistedmatrix.com/documents/current/core/howto/application.html
>
>
I'm talking about the main log file (twistd.log) that is created. I want to
customize the lines that are written to it, the document only tells me how
to use a different observer, not how to format the lines that are being
output by twistd.

I would like to change the output from:
2009-12-09 12:59:01-0500 [-] 127.0.0.1 - - [09/Dec/2009:17:59:01 +0000]
"POST /XMLRPC HTTP/1.0" 200 647 "-" "xmlrpclib.py/1.0.1 (by
www.pythonware.com)
to include "xmlrpc method: system.listMethods" at the end (or something
similar to include the methd name".

I see in the observers an eventDict is passed in to be output in the log,
but where does that eventDict get created/passed in?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091209/901b46a8/attachment.html>

From termim at gmail.com  Wed Dec  9 14:01:42 2009
From: termim at gmail.com (Mikhail Terekhov)
Date: Wed, 9 Dec 2009 16:01:42 -0500
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
	<d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
	<E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>
	<d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
Message-ID: <12aaa0810912091301q7c0869f8w9b51a0b352c60d3f@mail.gmail.com>

On Wed, Dec 9, 2009 at 3:27 AM, Jonathan Lange <jml at mumak.net> wrote:
...
>
> I completely screwed up with the advanced English usage then. :(
>

IMHO it is very simple: extracting Deferreds out of Twisted would benefit  (if
at all) only people who do not use or develop Twisted. From the packaging
point of view recent integration of the half a dozen Twisted related
packages into
one package was a big win for both users and maintainers. Extracting Deferreds
would be a step backwards. As it was already mentioned in this thread it would
bring an additional headache of maintaining versions compatibility
etc. to Twisted
developers. For Twisted users (especially those who uses their system's package
managers) it would mean to install bunch of packages instead of only
one again ...

Let's try to estimate the practical benefits such separation would bring:

 - ability to write 'from deferreds import Deferred' instead of
    'from twisted.internet.defer import Deferred' - IMHO is a very minor one.

 - ability to use 'python setup.py install'  in ~/Deferreds-1.2.3 instead of
   'python setup.py install' in ~/twisted-9.0.0 or 'apt-get deffereds'
instead of
   'apt-get twisted' does not count as a big one either.

 - ability to save couple of megabytes of disk space during
installation - these days
    it is almost a joke :)

 - ability to save some when distributing your product with py2exe and
such - that is
   something. But this can be solved without separation - just
eliminate dependencies
   of the twisted.internet.defer from the rest of the system and write
smart enough setup.py
   (I believe patches, examples and docs are welcome as usual)

Did I miss something?

IMHO from the practical point of view the only case when separation of
Deferreds would
benefit Twisted community as a whole would be inclusion of it into the
standard library,
but this is not going to happen soon ...

Bottom line - I wouldn't blame Twisted developers for the lack of
enthusiasm in this case.

Regards,
-- 
Mikhail Terekhov



From valeriy.zamarayev at gmail.com  Wed Dec  9 14:18:56 2009
From: valeriy.zamarayev at gmail.com (Valeriy Zamarayev)
Date: Wed, 9 Dec 2009 23:18:56 +0200
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web HTTP
	implementation
In-Reply-To: <2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
	<2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net>
Message-ID: <97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>


On Dec 9, 2009, at 19:34, James Y Knight wrote:
> On Dec 9, 2009, at 11:52 AM, Jared Gisin wrote:
>> I’m writing a HTTP server that exposes various resources as an API.  
>> Unless I’m missing something, twisted’s HTTP protocol  
>> implementation is in twisted.web.http.
>>
>> The problem with this package is that it’s inexplicably wrapped up  
>> in HTML. HTML has nothing to do with HTTP as a whole. Sure, HTML is  
>> often what HTTP requests return, but there’s no reason why it  
>> should nor is there any RFC that says it should. HTTP request can  
>> return anything.
>>
>> The software I’m writing is a programmatic interface. One never  
>> uses a web browser, so things such as displaying tracebacks  
>> (twisted.web.util.formatFailure) in HTML format is completely  
>> wrong. When implementing HTTP, why assume the client always wants  
>> HTML. It seem completely wrong from these modules and libraries to  
>> be so full of HTML output. HTML output should be provided as a  
>> separate config or option for twisted.web. In this case, why not  
>> just dump the traceback directly to the HTTP entity-body? As a  
>> consumer of twisted.web, I  should not have to battle with the hard- 
>> coded HTML output of this library. If I want the library to dump  
>> things in HTML output, I should have an option to tell it to do  
>> that (and I should be able to better customize the HTML), but I  
>> should not get HTML by default.
>
> Customizability is great, and certainly error pages should really  
> not be hard-coded at all. However, the default of returning HTML  
> descriptions of errors is a good default, and should remain thus.  
> There's usually two cases of interest:
>
> 1) A program is responding to the error. In that case, it will use  
> the HTTP result code, and not care what the content is at all.
> 2) A human is reading the error message. At least 99% of the time,  
> this will be happening through a web browser. They understand HTML.
>
> I'd expect your program to be in case #1, although I don't know if  
> you have some need to parse out the particular tracebacks for some  
> reason?


Hi All,

I want to second Jared's point. In my case, the responses from web  
servers,
including the body, often end up in log files. HTML looks pretty ugly  
there.
Though this is a minor point for me in the otherwise great Twisted  
software!

Regards,
Valeriy




From foom at fuhm.net  Wed Dec  9 14:37:34 2009
From: foom at fuhm.net (James Y Knight)
Date: Wed, 9 Dec 2009 16:37:34 -0500
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web HTTP
	implementation
In-Reply-To: <97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
	<2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net>
	<97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
Message-ID: <8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>


On Dec 9, 2009, at 4:18 PM, Valeriy Zamarayev wrote:

> I want to second Jared's point. In my case, the responses from web servers, including the body, often end up in log files. HTML looks pretty ugly there. Though this is a minor point for me in the otherwise great Twisted software!

Essentially every web server on the internet responds with HTML to error conditions, so you should probably modify your client.

As I said, I'm all for customizability, but returning HTML bodies for error pages is unambiguously the correct default.

James


From terry at jon.es  Wed Dec  9 14:44:58 2009
From: terry at jon.es (Terry Jones)
Date: Wed, 9 Dec 2009 22:44:58 +0100
Subject: [Twisted-Python] A resizable cooperator class for queuing
	and	dispatching jobs
In-Reply-To: Your message at 11:14:30 on Wednesday, 9 December 2009
References: <19231.8959.296355.40332@jon.es>
	<B0404436-C752-450D-A5BC-3CBAF8CD84F3@twistedmatrix.com>
Message-ID: <19232.6746.831232.490721@jon.es>

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
Glyph> On Dec 8, 2009, at 11:09 PM, Terry Jones wrote:
>> I just wrote a fun class that lets you
>> 
>> - submit jobs to be dispatched to a queue
>> - manage how many tasks are in progress at once
>> - dynamically adjust that number
>> - shut down cleanly, including
>> - recovering jobs that were queued but hadn't been dispatched

Glyph> That does sound like fun!

It *is* fun.

>> # Later... send off some SMS messages.
>> dispatcher.put((2127399921, 'Hello...'))
>> dispatcher.put((5052929919, 'Test...'))

Glyph> Not that this is really germane to the class in question, but, if
Glyph> you're going to be sending SMS messages

That was just an example. I even thought about using strings, but kept it
looking simpler.

>> # Later, bump up to 10 simultaneous jobs.
>> dispatcher.width = 10
>> 
>> # Oops, turns out we're sending too fast, turn it down a little.
>> dispatcher.narrow(3)

Glyph> This seems somewhat asymmetric.  Why are there 'widen' and 'narrow'
Glyph> methods if I can just set the 'width' attribute directly?  I could
Glyph> always just do '.width +=' and '.width -=' if I have a relative
Glyph> value.

Agreed. I started out just implementing widen and narrow, and they (barely)
survived when I later added the width property. I had been thinking it
would be good to just be able to change the width up or down a notch, but
then when I went to write my (a posteriori) tests, I realized that wasn't
really so convenient. So I think you're right they could be simplified
away.

But the code Glyph, the code? Or have I graduated to the point where I no
longer need a laconic garotting?  I think the combo of a DeferredQueue and
a task.Cooperator is pretty deadly.

Terry



From konrads at smelkovs.com  Wed Dec  9 14:54:38 2009
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Wed, 9 Dec 2009 23:54:38 +0200
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web HTTP
	implementation
In-Reply-To: <97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
	<2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net>
	<97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
Message-ID: <d79700b90912091354j7b5663a3od6a1f79aeb0cc77@mail.gmail.com>

I think that the days when one line logger ala syslog is useful are
nearing its end. Html in logs looks only ugly if log consumer makes
them so.

2009/12/9, Valeriy Zamarayev <valeriy.zamarayev at gmail.com>:
>
> On Dec 9, 2009, at 19:34, James Y Knight wrote:
>> On Dec 9, 2009, at 11:52 AM, Jared Gisin wrote:
>>> I’m writing a HTTP server that exposes various resources as an API.
>>> Unless I’m missing something, twisted’s HTTP protocol
>>> implementation is in twisted.web.http.
>>>
>>> The problem with this package is that it’s inexplicably wrapped up
>>> in HTML. HTML has nothing to do with HTTP as a whole. Sure, HTML is
>>> often what HTTP requests return, but there’s no reason why it
>>> should nor is there any RFC that says it should. HTTP request can
>>> return anything.
>>>
>>> The software I’m writing is a programmatic interface. One never
>>> uses a web browser, so things such as displaying tracebacks
>>> (twisted.web.util.formatFailure) in HTML format is completely
>>> wrong. When implementing HTTP, why assume the client always wants
>>> HTML. It seem completely wrong from these modules and libraries to
>>> be so full of HTML output. HTML output should be provided as a
>>> separate config or option for twisted.web. In this case, why not
>>> just dump the traceback directly to the HTTP entity-body? As a
>>> consumer of twisted.web, I  should not have to battle with the hard-
>>> coded HTML output of this library. If I want the library to dump
>>> things in HTML output, I should have an option to tell it to do
>>> that (and I should be able to better customize the HTML), but I
>>> should not get HTML by default.
>>
>> Customizability is great, and certainly error pages should really
>> not be hard-coded at all. However, the default of returning HTML
>> descriptions of errors is a good default, and should remain thus.
>> There's usually two cases of interest:
>>
>> 1) A program is responding to the error. In that case, it will use
>> the HTTP result code, and not care what the content is at all.
>> 2) A human is reading the error message. At least 99% of the time,
>> this will be happening through a web browser. They understand HTML.
>>
>> I'd expect your program to be in case #1, although I don't know if
>> you have some need to parse out the particular tracebacks for some
>> reason?
>
>
> Hi All,
>
> I want to second Jared's point. In my case, the responses from web
> servers,
> including the body, often end up in log files. HTML looks pretty ugly
> there.
> Though this is a minor point for me in the otherwise great Twisted
> software!
>
> Regards,
> Valeriy
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-- 
Nosūtīts no manas mobilās ierīces

--
Konrads Smelkovs
Applied IT sorcery.



From terry at jon.es  Wed Dec  9 15:08:00 2009
From: terry at jon.es (Terry Jones)
Date: Wed, 9 Dec 2009 23:08:00 +0100
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web
	HTTP	implementation
In-Reply-To: Your message at 16:37:34 on Wednesday, 9 December 2009
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
	<2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net>
	<97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
	<8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>
Message-ID: <19232.8128.416925.106975@jon.es>

>>>>> "James" == James Y Knight <foom at fuhm.net> writes:
James> Essentially every web server on the internet responds with HTML to
James> error conditions, so you should probably modify your client.

But there are plenty of clients that can't or don't want to or shouldn't
have to handle HTML.

James> As I said, I'm all for customizability, but returning HTML bodies
James> for error pages is unambiguously the correct default.

I agree.

This is, I think, a good example of where respecting the Accept header
makes sense. If no Accept header is sent, it's the same as sending */*, in
which case t.web could do as it currently does and send text/html. But if
there is an Accept header you can pass it and the range of response types
you have to a library like http://code.google.com/p/mimeparse/ and it will
tell you what to send back. Although making an XML and a JSON response
available just in case feels a bit arbitrary, it's no more arbitrary than
an HTML response that was designed to look good to a human with a browser.
They reply contents just need to be documented.

We got this complaint with FluidDB (using t.web), and you also see it
floated in public from time to time - I saw someone complaining on Twitter
about it just the other day.

Another way to mitigate this, at least in the context of errors is to put
more information into returned headers. We added an X-FluidDB-Error-Class
and X-FluidDB-Request-Id that don't require anyone to dig through a body in
some perhaps unpredictable or unhandled format. In simple cases you can
then just omit a payload and a Content-Type altogether.

Terry



From ltaylor.volks at gmail.com  Wed Dec  9 15:34:24 2009
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Wed, 09 Dec 2009 15:34:24 -0700
Subject: [Twisted-Python] Twistd logging
In-Reply-To: <9d748c780912091014p547542d4y29b3f62532702e2a@mail.gmail.com>
References: <9d748c780912081304m5fbf49ffk37a7e03ca7583819@mail.gmail.com>	<20091209172635.2549.110983264.divmod.xquotient.554@localhost.localdomain>
	<9d748c780912091014p547542d4y29b3f62532702e2a@mail.gmail.com>
Message-ID: <4B2025F0.2030106@gmail.com>

On 12/9/09 11:14 AM, Landreville wrote:
> 
> 
> On Wed, Dec 9, 2009 at 12:26 PM, <exarkun at twistedmatrix.com
> <mailto:exarkun at twistedmatrix.com>> wrote:
> 
>     On 8 Dec, 09:04 pm, landreville at deadtreepages.com
>     <mailto:landreville at deadtreepages.com> wrote:
>     >Is there a way I can customize the format of log file?
>     >I want to add more information to each line (about the xmlrpc method
>     >being
>     >called), but I can't find where these lines get written out. I know I
>     >can
>     >print a message to the log in my _getFunction, but I would prefer to
>     >have
>     >one line per request.
> 
>     Are you talking about the CLF request log or the main log file (normally
>     called "twistd.log")?
> 
>     The former can be controlled by overriding the "log" method of Site.
>     The latter is controlled by the general log observer(s) which is
>     installed.  You can read about customizing the log observer using .tac
>     files in the online documentation:
> 
>      http://twistedmatrix.com/documents/current/core/howto/application.html
> 
> 
> I'm talking about the main log file (twistd.log) that is created. I want
> to customize the lines that are written to it, the document only tells
> me how to use a different observer, not how to format the lines that are
> being output by twistd.
> 
> I would like to change the output from:
> 2009-12-09 12:59:01-0500 [-] 127.0.0.1 - - [09/Dec/2009:17:59:01 +0000]
> "POST /XMLRPC HTTP/1.0" 200 647 "-" "xmlrpclib.py/1.0.1
> <http://xmlrpclib.py/1.0.1> (by www.pythonware.com
> <http://www.pythonware.com>)
> to include "xmlrpc method: system.listMethods" at the end (or something
> similar to include the methd name".
> 
> I see in the observers an eventDict is passed in to be output in the
> log, but where does that eventDict get created/passed in?
> 

The output you describe is the CLF request log generated by the Site
instance (via twisted.web.http.HTTPFactory.log). You can do as suggested
and override the "log" method on your Site instance. This will give you
access to the request and allow you to extract the xmlrpc method.

Something like...

class Site(server.Site):
    def log(self, request):
        request.content.seek(0,0)
        args, functionPath = xmlrpclib.loads(request.content.read())

	# Keep the CLF line
	server.Site.log(self, request)

	# Add your own info on another line
        if hasattr(self, "logFile"):
            self.logFile.write('xmlrpc method: %s\n' % (functionPath,))

You did say you would prefer to have one line per request, so you might
want to just recreate the log method from HTTPFactory here and make
appropriate modifications (calculating request date/time and adding your
xmlrpc info).






From glyph at twistedmatrix.com  Wed Dec  9 17:12:24 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 9 Dec 2009 19:12:24 -0500
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <12aaa0810912091301q7c0869f8w9b51a0b352c60d3f@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
	<d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
	<E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>
	<d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
	<12aaa0810912091301q7c0869f8w9b51a0b352c60d3f@mail.gmail.com>
Message-ID: <397DFDD4-8FAD-48EC-9C05-D1FF90EE8A6E@twistedmatrix.com>


On Dec 9, 2009, at 4:01 PM, Mikhail Terekhov wrote:

> On Wed, Dec 9, 2009 at 3:27 AM, Jonathan Lange <jml at mumak.net> wrote:
> ...
>> 
>> I completely screwed up with the advanced English usage then. :(

> IMHO it is very simple: extracting Deferreds out of Twisted would benefit  (if
> at all) only people who do not use or develop Twisted. From the packaging
> point of view recent integration of the half a dozen Twisted related
> packages into one package was a big win for both users and maintainers. Extracting Deferreds would be a step backwards.

I can certainly understand (and sympathize with) this point of view, but...

> Did I miss something?

Not quite.  You brought it up right here:

> IMHO from the practical point of view the only case when separation of Deferreds would benefit Twisted community as a whole would be inclusion of it into the standard library,
> but this is not going to happen soon ...

If nobody ever takes Deferred and puts it outside of Twisted, then this will happen "never" instead of "not soon".  Eventually, somebody does need to bite the bullet and clean up Deferred for submission into the standard library.  The work that jml is doing here will help that, and so it's a worthwhile goal, even if it eventually brings some pain along with it.

When Deferred is in the standard library, it will enable communication between code written for different asynchronous backends, which is not currently possible.




From jared.gisin at isilon.com  Wed Dec  9 18:10:56 2009
From: jared.gisin at isilon.com (Jared Gisin)
Date: Wed, 9 Dec 2009 17:10:56 -0800
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web
	HTTPimplementation
In-Reply-To: <8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com><2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net><97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
	<8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>
Message-ID: <0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>

It's unambiguously the correct default if you incorrectly assume that
you're always dealing with a web browser client, which is an invalid
assumption.

The bottom line is that twisted.web contains the only implement of HTTP
in twisted which unfortunately is muddled in HTML. 

Get the HTML out of the HTTP protocol implementation. It flat out does
not belong there.

Twisted should provide a clean, clear interface for working with HTTP.
Call it twisted.protocols.http, then twisted.web with all of it's desire
to act like apache and serve up static content and run CGI's and speak
the default language of HTML can be built upon twisted.protocols.http
thus leaving me with a pure HTTP protocol implementation I can do other
this with as per RFC 2616 that have nothing to do with browsers or HTML.

-Jared

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of James Y
Knight
Sent: Wednesday, December 09, 2009 1:38 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] HTML shoudl not be baked into twisted.web
HTTPimplementation


On Dec 9, 2009, at 4:18 PM, Valeriy Zamarayev wrote:

> I want to second Jared's point. In my case, the responses from web
servers, including the body, often end up in log files. HTML looks
pretty ugly there. Though this is a minor point for me in the otherwise
great Twisted software!

Essentially every web server on the internet responds with HTML to error
conditions, so you should probably modify your client.

As I said, I'm all for customizability, but returning HTML bodies for
error pages is unambiguously the correct default.

James
_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From ssteinerx at gmail.com  Wed Dec  9 18:24:31 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Wed, 9 Dec 2009 20:24:31 -0500
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web
	HTTPimplementation
In-Reply-To: <0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com><2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net><97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
	<8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>
	<0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
Message-ID: <DFDE643C-55DE-4B59-A3A1-1DDD60337361@gmail.com>

On Dec 9, 2009, at 8:10 PM, Jared Gisin wrote:

> It's unambiguously the correct default if you incorrectly assume that
> you're always dealing with a web browser client, which is an invalid
> assumption.
> 
> The bottom line is that twisted.web contains the only implement of HTTP
> in twisted which unfortunately is muddled in HTML. 
> 
> Get the HTML out of the HTTP protocol implementation. It flat out does
> not belong there.

Wow, now you're not just complaining, but you're bossing people around, too?

Awesome.

I'm sure that will get you far around here...

S




From exarkun at twistedmatrix.com  Wed Dec  9 18:30:13 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 10 Dec 2009 01:30:13 -0000
Subject: [Twisted-Python] Deferred on PyPI
Message-ID: <20091210013013.2549.23931067.divmod.xquotient.593@localhost.localdomain>

On 12:12 am, glyph at twistedmatrix.com wrote:
>
>When Deferred is in the standard library, it will enable communication 
>between code written for different asynchronous backends, which is not 
>currently possible.

Let's be careful how we talk about Deferred, particularly when involving 
the standard library.  Communication is currently possible, but involves 
using whatever interface each different system uses.  Deferred is, as 
always, about providing a uniform interface.

Jean-Paul



From exarkun at twistedmatrix.com  Wed Dec  9 19:05:58 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 10 Dec 2009 02:05:58 -0000
Subject: [Twisted-Python] HTML shoudl not be baked into
	twisted.web	HTTPimplementation
In-Reply-To: <0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com><2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net><97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
	<8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>
	<0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
Message-ID: <20091210020558.2549.326143253.divmod.xquotient.619@localhost.localdomain>

On 01:10 am, jared.gisin at isilon.com wrote:
>It's unambiguously the correct default if you incorrectly assume that
>you're always dealing with a web browser client, which is an invalid
>assumption.

You've said that the current behavior is wrong, and you're saying that 
it's wrong to preserve the current behavior as the default but to allow 
it to be overridden.  The only suggestion for new behavior that you've 
made, I think, is that the traceback should be text/plain instead of 
text/html.  Is that what you're advocating?
>The bottom line is that twisted.web contains the only implement of HTTP
>in twisted which unfortunately is muddled in HTML.

You keep saying things like this, but I think you're blowing the issue 
far out of proportion.  As far as I can tell, there is one place in 
Twisted Web where HTML will be output when the application doesn't 
explicitly request it.  I don't think that's "muddled" or 
"inextricable".  It's simple to address; probably it could be fixed with 
not much more time than has been spent writing messages in this thread.
>Get the HTML out of the HTTP protocol implementation. It flat out does
>not belong there.
>
>Twisted should provide a clean, clear interface for working with HTTP.
>Call it twisted.protocols.http, then twisted.web with all of it's 
>desire
>to act like apache and serve up static content and run CGI's and speak
>the default language of HTML can be built upon twisted.protocols.http
>thus leaving me with a pure HTTP protocol implementation I can do other
>this with as per RFC 2616 that have nothing to do with browsers or 
>HTML.

Please, file a ticket and attach a patch.  Take a look at the 
TwistedDevelopment and ReviewProcess pages on the wiki.  Someone will 
take a look, we can have some discussion about the specifics of the 
implementation, and more likely than not, the issue can be resolved to 
everyone's satisfaction.

Thanks!

Jean-Paul



From johann.borck at densedata.com  Wed Dec  9 20:40:39 2009
From: johann.borck at densedata.com (Johann Borck)
Date: Thu, 10 Dec 2009 04:40:39 +0100
Subject: [Twisted-Python] HTML shoudl not be baked into
	twisted.web	HTTPimplementation
In-Reply-To: <0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com><2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net><97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>	<8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>
	<0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
Message-ID: <4B206DB7.8080800@densedata.com>

Jared Gisin wrote:
> It's unambiguously the correct default if you incorrectly assume that
> you're always dealing with a web browser client, which is an invalid
> assumption.
>
>   
It's not always - it is almost always, a textbook example for the 
applicability of a sensible default. 
> The bottom line is that twisted.web contains the only implement of HTTP
> in twisted which unfortunately is muddled in HTML. 
> [...]
>   
> Get the HTML out of the HTTP protocol implementation. It flat out does
> not belong there.
>
>   
Indeed a philosophical question, is it possible to get the nonexistent 
out of a piece of code? Nonexistent understanding is a strong candidate, 
as it would appear.
> Twisted should provide a clean, clear interface for working with HTTP.
>   
Yes. So nice it does, isn't it?
Johann




From dave at krondo.com  Wed Dec  9 20:59:30 2009
From: dave at krondo.com (Dave Peticolas)
Date: Wed, 09 Dec 2009 19:59:30 -0800
Subject: [Twisted-Python] A resizable cooperator class for queuing and
 dispatching jobs
In-Reply-To: <19231.8959.296355.40332@jon.es>
References: <19231.8959.296355.40332@jon.es>
Message-ID: <4B207222.6070008@krondo.com>

Terry Jones wrote:
> I just wrote a fun class that lets you
> 
>    - submit jobs to be dispatched to a queue
>    - manage how many tasks are in progress at once
>    - dynamically adjust that number
>    - shut down cleanly, including
>    - recovering jobs that were queued but hadn't been dispatched
> 
> This uses a combination of a DeferredQueue, a task.Cooperator, and the
> DeferredPool I posted on Monday. For now I named it ResizableDispatchQueue
> (not a great name, suggestions welcome). You can pick it up from
> http://pastebin.com/f7dc9320e
> 
> I can think of lots of uses. Here's a simple example.
> 
> You want to write a server with a web interface that allows people to enter
> their phone number so you can send them an SMS. You anticipate lots of
> people will use the service. But sending SMS messages is quite slow, and
> the company that you ship those jobs off to is concerned that you'll
> overrun their service (or maybe they have an API limit, etc). So you need
> to queue up jobs locally and send them off at a certain rate. You'd like to
> be able to adjust that rate up or down. You also want to be able to shut
> your service down cleanly (i.e., not in the middle of a task), and when you
> restart it you want to be able to re-queue the jobs that were queued last
> time but which hadn't gone out.
> 
> For example, suppose your function that sends the SMS is called sendSMS and
> that it takes a (number, message) tuple arg. Then:
> 
>     dispatcher = ResizableDispatchQueue(sendSMS)
>     # Tell it to send at most 5 things at once.
>     dispatcher.start(5)      # Same as dispatcher.width = 5
> 
>     # Later... send off some SMS messages.
>     dispatcher.put((2127399921, 'Hello...'))
>     dispatcher.put((5052929919, 'Test...'))
>     
>     # Later, bump up to 10 simultaneous jobs.
>     dispatcher.width = 10
> 
>     # Oops, turns out we're sending too fast, turn it down a little.
>     dispatcher.narrow(3)
> 
>     # Get a copy of the list of pending jobs.
>     jobs = dispatcher.pending()
> 
>     # Arrange to increase the number of jobs in an hour's time.
>     reactor.callLater(3600, dispatcher.setWidth, 20)
> 
>     # Time to shutdown. Wait for any tasks underway to complete, and save
>     # the list of jobs not yet dispatched.
> 
>     def saveJobs(jobs):
>         pickle.dump(jobs, ...)
> 
>     d = dispatcher.stop()
>     d.addCallback(saveJobs)
> 
> 
> On restart you just unpickle the old job list and pass its items to
> dispatcher.put().
> 
> I have a small test suite that's a bit weird (it schedules various things
> and tests how long the overall job takes and what's still pending when stop
> is called). It could be much better, but it does at least illustrate that
> the code seems to work. Let me know if you want it.

This is really nifty. I know I could use this.


> There's also the issue about what to do when the dispatch function hits an
> error.  An option could be added to re-queue the job, but it's perhaps
> better to let the dispatch function do that along with whatever else it
> needs.

One reason to have a separate error handler is to support generic
error-handling strategies, like 're-try N times and then send an
email here', etc. Though maybe you could do that with decorators
on the dispatch function. It does mean the dispatch function needs
to know about the task queue, though.


> As usual, I'd be happy to hear comments and suggestions. I'll probably
> adjust this so the DeferredQueue uses a priority queue.

Having written something like this, though not as general or as elegant,
several times, I've found that pause() and resume() is a very useful
API. That's not the same as setting the width to 0 and then back again,
as pause() and resume() don't require you to know or remember the
current width of the queue.

dave



From glyph at twistedmatrix.com  Wed Dec  9 23:32:05 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 10 Dec 2009 01:32:05 -0500
Subject: [Twisted-Python] A resizable cooperator class for queuing and
	dispatching jobs
In-Reply-To: <19232.6746.831232.490721@jon.es>
References: <19231.8959.296355.40332@jon.es>
	<B0404436-C752-450D-A5BC-3CBAF8CD84F3@twistedmatrix.com>
	<19232.6746.831232.490721@jon.es>
Message-ID: <570CC07E-6418-439E-80F8-686AE8B5ED5E@twistedmatrix.com>

On Dec 9, 2009, at 4:44 PM, Terry Jones wrote:

> But the code Glyph, the code? Or have I graduated to the point where I no
> longer need a laconic garotting?  I think the combo of a DeferredQueue and
> a task.Cooperator is pretty deadly.

Heh.  For something in a pastebin, that's all I got :).  Stick it in version control somewhere!




From terry at jon.es  Wed Dec  9 23:46:28 2009
From: terry at jon.es (Terry Jones)
Date: Thu, 10 Dec 2009 07:46:28 +0100
Subject: [Twisted-Python] A resizable cooperator class for queuing
	and	dispatching jobs
In-Reply-To: Your message at 01:32:05 on Thursday, 10 December 2009
References: <19231.8959.296355.40332@jon.es>
	<B0404436-C752-450D-A5BC-3CBAF8CD84F3@twistedmatrix.com>
	<19232.6746.831232.490721@jon.es>
	<570CC07E-6418-439E-80F8-686AE8B5ED5E@twistedmatrix.com>
Message-ID: <19232.39236.232521.792885@jon.es>

glyph> Heh.  For something in a pastebin, that's all I got :).  Stick it in
glyph> version control somewhere!

Will do.  I'm just adding pause/resume, following the suggestion of Dave
Peticolas (thanks Dave).

Terry



From terry at jon.es  Thu Dec 10 02:57:05 2009
From: terry at jon.es (Terry Jones)
Date: Thu, 10 Dec 2009 10:57:05 +0100
Subject: [Twisted-Python] A resizable cooperator class for queuing
	and	dispatching jobs
In-Reply-To: Your message at 19:59:30 on Wednesday, 9 December 2009
References: <19231.8959.296355.40332@jon.es>
	<4B207222.6070008@krondo.com>
Message-ID: <19232.50673.973763.680203@jon.es>

>>>>> "Dave" == Dave Peticolas <dave at krondo.com> writes:
Dave> This is really nifty. I know I could use this.

Great. Me too :-)

>> There's also the issue about what to do when the dispatch function hits
>> an error.  An option could be added to re-queue the job, but it's
>> perhaps better to let the dispatch function do that along with whatever
>> else it needs.

Dave> One reason to have a separate error handler is to support generic
Dave> error-handling strategies, like 're-try N times and then send an
Dave> email here', etc. Though maybe you could do that with decorators on
Dave> the dispatch function. It does mean the dispatch function needs to
Dave> know about the task queue, though.

Yes. But I think that's fine, and appropriate. If you're doing something
more sophisticated you can make a class that creates the dispatch queue,
deals with errors, resubmission, etc. That's how I plan to use it.

Dave> Having written something like this, though not as general or as
Dave> elegant, several times, I've found that pause() and resume() is a
Dave> very useful API. That's not the same as setting the width to 0 and
Dave> then back again, as pause() and resume() don't require you to know or
Dave> remember the current width of the queue.

OK, I added pause/resume. You can change the width when it's paused (or on
resume). Jobs can still be added to the queue when the thing is paused,
they just don't get dispatched. The pause method returns a deferred that
fires when all currently underway tasks have completed.  There's also a new
method 'size' which gets you a 2-tuple of the number of tasks currently
underway and the length of the queue. And I made it so you can clear the
queue (perhaps useful if you want to pause, get the pending jobs via
pending(), and clear the queue before resuming, etc).  I also got rid of
narrow/widen, following Glyph's comments.

I'll stick it somewhere more official / permanent soon (I guess into
Launchpad, either in the Fluidinfo PPA or as a sub-project of the tx
collection). For now you can grab the code & the tests at
http://jon.es/other/rdq.tar.bz2 The tests feel funky to me - the ones that
really do anything are all based on expected timings of jobs, queue sizes,
etc. That's what I'm supposed to be testing, but perhaps my way of doing it
is weird.

Terry



From mithrandi at mithrandi.net  Thu Dec 10 03:01:00 2009
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 10 Dec 2009 12:01:00 +0200
Subject: [Twisted-Python] HTML shoudl not be baked into twisted.web
	HTTPimplementation
In-Reply-To: <0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033901C9@seaxch08.desktop.isilon.com>
	<2F2CA4E5-86EC-4258-A69F-370B49C0632A@fuhm.net>
	<97C7F981-24C2-4ED6-9140-E0A9F4D6061C@gmail.com>
	<8A820D5B-2D36-4AEB-BC29-DF87777FC747@fuhm.net>
	<0C40B34038FD824FACDB387E778872870339029C@seaxch08.desktop.isilon.com>
Message-ID: <f5eea9170912100201w49161abdjd521c9b3358b4323@mail.gmail.com>

On Thu, Dec 10, 2009 at 3:10 AM, Jared Gisin <jared.gisin at isilon.com> wrote:
> It's unambiguously the correct default if you incorrectly assume that
> you're always dealing with a web browser client, which is an invalid
> assumption.

Web browser clients are the most common case, at least at this point
in time. On the flip side, if you don't assume a web browser client,
you can't assume anything; why would a client be more likely to be
able to handle text/plain than text/html? If it's trying to actually
parse the error response (SOAP comes to mind), neither of those
representations are likely to be of use to the client, so you need to
implement your own error handler anyway, to send back XML (or
whatever).
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From ssteinerx at gmail.com  Thu Dec 10 05:26:24 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Thu, 10 Dec 2009 07:26:24 -0500
Subject: [Twisted-Python] A resizable cooperator class for queuing
	and	dispatching jobs
In-Reply-To: <19232.39236.232521.792885@jon.es>
References: <19231.8959.296355.40332@jon.es>
	<B0404436-C752-450D-A5BC-3CBAF8CD84F3@twistedmatrix.com>
	<19232.6746.831232.490721@jon.es>
	<570CC07E-6418-439E-80F8-686AE8B5ED5E@twistedmatrix.com>
	<19232.39236.232521.792885@jon.es>
Message-ID: <EBCDE9C9-4C9F-4333-B78D-02A3F81C39BF@gmail.com>


On Dec 10, 2009, at 1:46 AM, Terry Jones wrote:

> glyph> Heh.  For something in a pastebin, that's all I got :).  Stick it in
> glyph> version control somewhere!
> 
> Will do.  I'm just adding pause/resume, following the suggestion of Dave
> Peticolas (thanks Dave).

Cool.  I could put this to good use right ...there... in a project I'm working on at this very moment!

S




From jared.gisin at isilon.com  Thu Dec 10 09:40:47 2009
From: jared.gisin at isilon.com (Jared Gisin)
Date: Thu, 10 Dec 2009 08:40:47 -0800
Subject: [Twisted-Python] web vs web2 clarification
Message-ID: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>

I'm curious if anyone can shed some light on the  following sentence
which is taken from
"http://twistedmatrix.com/trac/wiki/WebDevelopmentWithTwisted"

 

"We decided this was a mistake and development focus has shifted to
porting the best parts of Twisted Web 2 back to Twisted Web where
existing applications will benefit from them."

 

I'm curious as to why twisted web2 was a mistake what is  the
fundamental difference between web and web2?

 

Thanks,

 

-Jared

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091210/7a611f10/attachment-0001.html>

From exarkun at twistedmatrix.com  Thu Dec 10 10:25:13 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 10 Dec 2009 17:25:13 -0000
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
Message-ID: <20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain>

On 04:40 pm, jared.gisin at isilon.com wrote:
>I'm curious if anyone can shed some light on the  following sentence
>which is taken from
>"http://twistedmatrix.com/trac/wiki/WebDevelopmentWithTwisted"
>
>"We decided this was a mistake and development focus has shifted to
>porting the best parts of Twisted Web 2 back to Twisted Web where
>existing applications will benefit from them."
>
>I'm curious as to why twisted web2 was a mistake what is  the
>fundamental difference between web and web2?

Web2 was a sort of from scratch rewrite.  I don't usual defer to Joel, 
but his article is the first hit for the phrase "from scratch rewrite" 
and he basically gets it right:

  http://www.joelonsoftware.com/articles/fog0000000069.html

Jean-Paul



From radix at twistedmatrix.com  Thu Dec 10 11:03:39 2009
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 10 Dec 2009 13:03:39 -0500
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
Message-ID: <60ed19d40912101003nbfe4d3ake3ba73d69066a8a@mail.gmail.com>

On Thu, Dec 10, 2009 at 11:40 AM, Jared Gisin <jared.gisin at isilon.com> wrote:
> I’m curious if anyone can shed some light on the  following sentence which
> is taken from “http://twistedmatrix.com/trac/wiki/WebDevelopmentWithTwisted”
>
> “We decided this was a mistake and development focus has shifted to porting
> the best parts of Twisted Web 2 back to Twisted Web where existing
> applications will benefit from them.”
>
> I’m curious as to why twisted web2 was a mistake what is  the fundamental
> difference between web and web2?

While Jean-Paul got the general idea, I think you were asking about
something a little more specific, and I hope to address that:

There were many differences between web and web2; a lot of the APIs
were better, and some weren't. However, the quoted sentence was not
referring to the quality of the APIs and their technical merits so
much as the fact that they were completely incompatible with
twisted.web. This is where Jean-Paul's answer comes in.

Hope this helps,

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From jared.gisin at isilon.com  Thu Dec 10 11:21:04 2009
From: jared.gisin at isilon.com (Jared Gisin)
Date: Thu, 10 Dec 2009 10:21:04 -0800
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <60ed19d40912101003nbfe4d3ake3ba73d69066a8a@mail.gmail.com>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
	<60ed19d40912101003nbfe4d3ake3ba73d69066a8a@mail.gmail.com>
Message-ID: <0C40B34038FD824FACDB387E77887287033902F3@seaxch08.desktop.isilon.com>

Excellent. Yes, it helps greatly. 

What I'm in need of is the ability to allow PUTs of arbitrarily large entity-bodies which I will write to a file system on the server. The problem with twisted.web right now is that before my Resource.render_ hander is called to process the request, the http.Request object has already received all of the bytes and either put them in a StringIO or a TemporaryFile. I'd like to be able to get at the incoming data stream and handle it directly, and it appears that web2 had a sort of consumer API that allowed the Resource to handle the stream. I'm still reading documentation and trying to figure out how I can implement that in twisted.web itself. Thoughts on that would be appreciated.

-Jared

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Christopher Armstrong
Sent: Thursday, December 10, 2009 10:04 AM
To: Twisted general discussion
Subject: Re: [Twisted-Python] web vs web2 clarification

On Thu, Dec 10, 2009 at 11:40 AM, Jared Gisin <jared.gisin at isilon.com> wrote:
> I’m curious if anyone can shed some light on the  following sentence which
> is taken from “http://twistedmatrix.com/trac/wiki/WebDevelopmentWithTwisted”
>
> “We decided this was a mistake and development focus has shifted to porting
> the best parts of Twisted Web 2 back to Twisted Web where existing
> applications will benefit from them.”
>
> I’m curious as to why twisted web2 was a mistake what is  the fundamental
> difference between web and web2?

While Jean-Paul got the general idea, I think you were asking about
something a little more specific, and I hope to address that:

There were many differences between web and web2; a lot of the APIs
were better, and some weren't. However, the quoted sentence was not
referring to the quality of the APIs and their technical merits so
much as the fact that they were completely incompatible with
twisted.web. This is where Jean-Paul's answer comes in.

Hope this helps,

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

From glyph at twistedmatrix.com  Thu Dec 10 11:33:38 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 10 Dec 2009 13:33:38 -0500
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <0C40B34038FD824FACDB387E77887287033902F3@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
	<60ed19d40912101003nbfe4d3ake3ba73d69066a8a@mail.gmail.com>
	<0C40B34038FD824FACDB387E77887287033902F3@seaxch08.desktop.isilon.com>
Message-ID: <CECD161E-C3F1-4F46-8DCA-2B7E2CC25664@twistedmatrix.com>


On Dec 10, 2009, at 1:21 PM, Jared Gisin wrote:

> Excellent. Yes, it helps greatly. 
> 
> What I'm in need of is the ability to allow PUTs of arbitrarily large entity-bodies which I will write to a file system on the server. The problem with twisted.web right now is that before my Resource.render_ hander is called to process the request, the http.Request object has already received all of the bytes and either put them in a StringIO or a TemporaryFile. I'd like to be able to get at the incoming data stream and handle it directly, and it appears that web2 had a sort of consumer API that allowed the Resource to handle the stream. I'm still reading documentation and trying to figure out how I can implement that in twisted.web itself. Thoughts on that would be appreciated.

You probably want to join in on the conversation on this ticket: <http://twistedmatrix.com/trac/ticket/288>.  Perhaps even contribute some patches :).


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091210/966b4101/attachment.html>

From termim at gmail.com  Thu Dec 10 12:21:22 2009
From: termim at gmail.com (Mikhail Terekhov)
Date: Thu, 10 Dec 2009 14:21:22 -0500
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
	<20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain>
Message-ID: <12aaa0810912101121k3757fb00s78ee7aa2f2880b3a@mail.gmail.com>

On Thu, Dec 10, 2009 at 12:25 PM,  <exarkun at twistedmatrix.com> wrote:
>
> Web2 was a sort of from scratch rewrite.  I don't usual defer to Joel,
> but his article is the first hit for the phrase "from scratch rewrite"
> and he basically gets it right:
>
>  http://www.joelonsoftware.com/articles/fog0000000069.html
>

Just some unrelated rant about Joel&Co :

Joel talks about big _commercial_ projects and _commercial_ failures.
May be he is right here, may be not. But it is this rewrite from scratch that
gave birth to Mozilla - number one web/email suite till now. Isn't it a
success? Another successful open source examples are Apache and
Subversion. And what about CVS that couldn't/refused rewrite from
scratch and peacefully evolves adding features little by little? Can it
catch up with svn/git/bzr/hg? I doubt so. CVS's example in fact says that
if you refuse to do it then someone else will do and will replace you.
May be it is open source that makes it different, may be people think
more about fun and beauty than about money in this case?
It is not so simple and Joel's hypothesis is far from being 100% true IMHO.
In the end a lot of people know/use Borland's, Netscape's and Microsoft's
software but how many know/use Joel's? ;)

Regards,
-- 
Mikhail Terekhov



From phil at bubblehouse.org  Thu Dec 10 12:41:23 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Thu, 10 Dec 2009 14:41:23 -0500
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <12aaa0810912101121k3757fb00s78ee7aa2f2880b3a@mail.gmail.com>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
	<20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain>
	<12aaa0810912101121k3757fb00s78ee7aa2f2880b3a@mail.gmail.com>
Message-ID: <0CAC39EA-D30F-4F75-A016-17991C02D062@bubblehouse.org>

On Dec 10, 2009, at 2:21 PM, Mikhail Terekhov wrote:
> Just some unrelated rant about Joel&Co :
> 
> Joel talks about big _commercial_ projects and _commercial_ failures.
> May be he is right here, may be not. But it is this rewrite from scratch that
> gave birth to Mozilla - number one web/email suite till now. Isn't it a
> success?

I think that's debatable. Mozilla was terrible for a long time, there just wasn't much alternative. You could make the (arguable) point that Mozilla's rewrite happened at the cost of disengaging from the web community, leading people to jump ship to IE.

> Another successful open source examples are Apache and
> Subversion.

I don't think Apache is a particularly good example of why ground-up rewrites are more reasonable in open source projects. It took **years** to get a critical mass on Apache 2, and there are still many plugins that don't support anything but prefork mode.

At the same time, the approach to developing the 1.0 series was the source of the name Apache, since they were constantly upgrading and improving an existing codebase, hence, "A Patchy" Server.

> And what about CVS that couldn't/refused rewrite from
> scratch and peacefully evolves adding features little by little? Can it
> catch up with svn/git/bzr/hg? I doubt so. CVS's example in fact says that
> if you refuse to do it then someone else will do and will replace you.

Well, again, debatable. OpenBSD still uses CVS, and has started a significant push to patch and upgrade the existing CVS source.

> May be it is open source that makes it different, may be people think
> more about fun and beauty than about money in this case?
> It is not so simple and Joel's hypothesis is far from being 100% true IMHO.
> In the end a lot of people know/use Borland's, Netscape's and Microsoft's
> software but how many know/use Joel's? ;)

I think it's far simpler than that. There's an old expression that sums it up: A bird in the hand is worth two in the bush.

Taking limited resources from a nearly-complete and reasonably popular project to add them to a brand-new and **backwards-incompatible** project is rarely ever a wise project management decision.

-phil

-phil


From termim at gmail.com  Thu Dec 10 15:29:09 2009
From: termim at gmail.com (Mikhail Terekhov)
Date: Thu, 10 Dec 2009 17:29:09 -0500
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <0CAC39EA-D30F-4F75-A016-17991C02D062@bubblehouse.org>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
	<20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain>
	<12aaa0810912101121k3757fb00s78ee7aa2f2880b3a@mail.gmail.com>
	<0CAC39EA-D30F-4F75-A016-17991C02D062@bubblehouse.org>
Message-ID: <12aaa0810912101429q7b213e85m49daa4a4338f5c9f@mail.gmail.com>

On Thu, Dec 10, 2009 at 2:41 PM, Phil Christensen <phil at bubblehouse.org> wrote:
>
> I think that's debatable. Mozilla was terrible for a long time, there just wasn't much alternative. You could make the (arguable) point that Mozilla's rewrite happened at the cost of disengaging from the web community, leading people to jump ship to IE.
>
I agree that the process wasn't smooth, easy and done in a best
possible way. But the point was that the net
result is positive. Would "Mozilla Platform" be possible _now_ without
such a rewrite?

>
> I don't think Apache is a particularly good example of why ground-up rewrites are more reasonable in open source projects. It took **years** to get a critical mass on Apache 2, and there are still many plugins that don't support anything but prefork mode.
>
I meant here the transition from 0.7.x to 0.8.8 (Shambhala). They
designed it completely from scratch in
_parallel_ with developing the 0.7.x series. And this was a foundation
of the following 1.x success (modular
design etc.)

>
>> And what about CVS that couldn't/refused rewrite from
>> scratch and peacefully evolves adding features little by little? Can it
>> catch up with svn/git/bzr/hg? I doubt so. CVS's example in fact says that
>> if you refuse to do it then someone else will do and will replace you.
>
> Well, again, debatable. OpenBSD still uses CVS, and has started a significant push to patch and upgrade the existing CVS source.
>
With all due respect to OpenBSD developers, they are just a tiny part
of the all VCS users and their
significant push in their relatively small community will not
magically save CVS I'm afraid. The point here is
that once a dominant VCS in the world, CVS now looses its position
pretty fast and all these incremental
improvements (commitid etc.) can not save it. It is too late now. The
part of the lesson here is that the
code is/was in such a shape that the implementation of urgently needed
features (like commit atomicity)
took so long that others (svn/git/bzr/hg etc.) implemented everything
from scratch and even more.
See for example of VCS usage trends http://tinyurl.com/ykmurn7 and
http://tinyurl.com/qj7c3

>> May be it is open source that makes it different, may be people think
>> more about fun and beauty than about money in this case?
>> It is not so simple and Joel's hypothesis is far from being 100% true IMHO.
>> In the end a lot of people know/use Borland's, Netscape's and Microsoft's
>> software but how many know/use Joel's? ;)
>
> I think it's far simpler than that. There's an old expression that sums it up: A bird in the hand is worth two in the bush.
>
> Taking limited resources from a nearly-complete and reasonably popular project to add them to a brand-new and **backwards-incompatible** project is rarely ever a wise project management decision.
>
That is all true but it is very close to Joel's reasoning, kind of a
manager's point of view.
It is too business/money oriented and doesn't exhaust all the reasons
why people write
software in open source world in particular. And what is more
important it doesn't explain
why they still rewrite it from scratch sometimes and succeed? ;)

But this became completely unrelated to this list, sorry for dragging
discussion so far.

-- 
Mikhail Terekhov



From foom at fuhm.net  Thu Dec 10 16:36:10 2009
From: foom at fuhm.net (James Y Knight)
Date: Thu, 10 Dec 2009 18:36:10 -0500
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <12aaa0810912101429q7b213e85m49daa4a4338f5c9f@mail.gmail.com>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com>
	<20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain>
	<12aaa0810912101121k3757fb00s78ee7aa2f2880b3a@mail.gmail.com>
	<0CAC39EA-D30F-4F75-A016-17991C02D062@bubblehouse.org>
	<12aaa0810912101429q7b213e85m49daa4a4338f5c9f@mail.gmail.com>
Message-ID: <3A29FB30-8CA5-4CB6-95D6-DBA2FBF9328D@fuhm.net>

On Dec 10, 2009, at 5:29 PM, Mikhail Terekhov wrote:
> That is all true but it is very close to Joel's reasoning, kind of a manager's point of view. It is too business/money oriented and doesn't exhaust all the reasons why people write software in open source world in particular. And what is more important it doesn't explain why they still rewrite it from scratch sometimes and succeed? ;)
> 
> But this became completely unrelated to this list, sorry for dragging discussion so far.

I started the rewrite because I wanted to, and believed it was the most reasonable way to achive the goal of a better HTTP implementation and API. And let's not even call it "rewrite from scratch": it was branched from the twisted.web code and used ideas previosuly explored in Nevow. And there is even backwards compatibility in there for old twisted.web.Resource classes, which worked fine for most resources (but is not absolutely 100% compatible).

There were certainly some issues, both with functionality and with compatibility. (Especially with Nevow: Nevow is basically its own reimplementation of half of twisted.web, so the twisted.web2 backwards-compat code needed special-casing to work with it, and that was never completed). But where the project really went wrong is when I stopped working on it, and nobody else was interested in finishing that job. There were many reasons I stopped working on it, but I don't really want to get into it. The people actually doing the work now want to keep working within the old framework. And that's the open source way: he who does the work calls the shots. Tada.

I do think twisted.web2 could have succeeded in a form substantially similar to its present state, but alas, it was not meant to be.

James




From jml at mumak.net  Thu Dec 10 18:35:49 2009
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 11 Dec 2009 12:35:49 +1100
Subject: [Twisted-Python] Deferred on PyPI
In-Reply-To: <12aaa0810912091301q7c0869f8w9b51a0b352c60d3f@mail.gmail.com>
References: <d06a5cd30912060126u72a3917el4500cd83d29c9134@mail.gmail.com>
	<20091206192912.2549.180872430.divmod.xquotient.378@localhost.localdomain>
	<d06a5cd30912061310s62ee63d8r75edbcb6cc454e69@mail.gmail.com>
	<20091206233507.2549.1015135481.divmod.xquotient.409@localhost.localdomain>
	<d06a5cd30912080150y5a9b002fkdaba9609adfef1df@mail.gmail.com>
	<E395BEBA-FDF1-4C01-9B1B-7B8E49202E23@twistedmatrix.com>
	<d06a5cd30912090027s782d5350x753549a6940167d5@mail.gmail.com>
	<12aaa0810912091301q7c0869f8w9b51a0b352c60d3f@mail.gmail.com>
Message-ID: <d06a5cd30912101735n417b6781ledf0ca52ad6b94d7@mail.gmail.com>

On Thu, Dec 10, 2009 at 8:01 AM, Mikhail Terekhov <termim at gmail.com> wrote:
> On Wed, Dec 9, 2009 at 3:27 AM, Jonathan Lange <jml at mumak.net> wrote:
> ...
>>
>> I completely screwed up with the advanced English usage then. :(
>>
>
> IMHO it is very simple: extracting Deferreds out of Twisted would benefit  (if
> at all) only people who do not use or develop Twisted.

I was referring to my misuse of "laconic", which I took to mean "lazy"
and actually means "concise".

...
> Bottom line - I wouldn't blame Twisted developers for the lack of
> enthusiasm in this case.
>

I, of all people, would never blame other Twisted developers for a
lack of enthusiasm.

jml



From dave at krondo.com  Thu Dec 10 20:36:40 2009
From: dave at krondo.com (Dave Peticolas)
Date: Thu, 10 Dec 2009 19:36:40 -0800
Subject: [Twisted-Python] A resizable cooperator class for queuing and
 dispatching jobs
In-Reply-To: <19232.50673.973763.680203@jon.es>
References: <19231.8959.296355.40332@jon.es>	<4B207222.6070008@krondo.com>
	<19232.50673.973763.680203@jon.es>
Message-ID: <4B21BE48.9090205@krondo.com>

Terry Jones wrote:
>>>>>> "Dave" == Dave Peticolas <dave at krondo.com> writes:
> Dave> This is really nifty. I know I could use this.
> 
> Great. Me too :-)
> 
>>> There's also the issue about what to do when the dispatch function hits
>>> an error.  An option could be added to re-queue the job, but it's
>>> perhaps better to let the dispatch function do that along with whatever
>>> else it needs.
> 
> Dave> One reason to have a separate error handler is to support generic
> Dave> error-handling strategies, like 're-try N times and then send an
> Dave> email here', etc. Though maybe you could do that with decorators on
> Dave> the dispatch function. It does mean the dispatch function needs to
> Dave> know about the task queue, though.
> 
> Yes. But I think that's fine, and appropriate. If you're doing something
> more sophisticated you can make a class that creates the dispatch queue,
> deals with errors, resubmission, etc. That's how I plan to use it.

Makes sense.


> Dave> Having written something like this, though not as general or as
> Dave> elegant, several times, I've found that pause() and resume() is a
> Dave> very useful API. That's not the same as setting the width to 0 and
> Dave> then back again, as pause() and resume() don't require you to know or
> Dave> remember the current width of the queue.
> 
> OK, I added pause/resume. You can change the width when it's paused (or on
> resume). Jobs can still be added to the queue when the thing is paused,
> they just don't get dispatched. The pause method returns a deferred that
> fires when all currently underway tasks have completed.  There's also a new
> method 'size' which gets you a 2-tuple of the number of tasks currently
> underway and the length of the queue. And I made it so you can clear the
> queue (perhaps useful if you want to pause, get the pending jobs via
> pending(), and clear the queue before resuming, etc).  I also got rid of
> narrow/widen, following Glyph's comments.

Cool. What about being able to get the set of underway objects, in
addition to the set of pending objects? Then you can get the whole
state of the queue at that point.

I think:

   queue.resume(0)

doesn't work the way you'd expect at the moment.


> I'll stick it somewhere more official / permanent soon (I guess into
> Launchpad, either in the Fluidinfo PPA or as a sub-project of the tx
> collection). For now you can grab the code & the tests at
> http://jon.es/other/rdq.tar.bz2 The tests feel funky to me - the ones that
> really do anything are all based on expected timings of jobs, queue sizes,
> etc. That's what I'm supposed to be testing, but perhaps my way of doing it
> is weird.
> 
> Terry
> 




From terry at jon.es  Fri Dec 11 04:44:57 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 11 Dec 2009 12:44:57 +0100
Subject: [Twisted-Python] A resizable cooperator class for queuing and
 dispatching jobs
In-Reply-To: Your message at 19:36:40 on Thursday, 10 December 2009
References: <19231.8959.296355.40332@jon.es> <4B207222.6070008@krondo.com>
	<19232.50673.973763.680203@jon.es> <4B21BE48.9090205@krondo.com>
Message-ID: <19234.12473.915610.485018@jon.es>

>>>>> "Dave" == Dave Peticolas <dave at krondo.com> writes:

Dave> Cool. What about being able to get the set of underway objects, in
Dave> addition to the set of pending objects? Then you can get the whole
Dave> state of the queue at that point.

I added an underway() method that gets you a set of underway jobs, each
with its job spec, deferred, and start time. I guess you could add
callbacks or timeouts to the set of outstanding deferreds (e.g., for some
reason you're about to pause and you know the currently outstanding jobs
are going to fail or are somehow invalid and that you're going to have to
redo them, so you could add a callback to each to put it back on the queue,
and then call pause).

Dave> I think:
Dave> queue.resume(0)
Dave> doesn't work the way you'd expect at the moment.

OK, added an assert to make sure you can't do this.

I'm not sure the details of all this are of interest to many people on the
list. I'll find time to put the code up somewhere more useful. It would be
nice to have a runnable demo/example too. Not sure I'll get there.

Terry



From ssteinerx at gmail.com  Fri Dec 11 08:09:16 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Fri, 11 Dec 2009 10:09:16 -0500
Subject: [Twisted-Python] A resizable cooperator class for queuing and
	dispatching jobs
In-Reply-To: <19234.12473.915610.485018@jon.es>
References: <19231.8959.296355.40332@jon.es> <4B207222.6070008@krondo.com>
	<19232.50673.973763.680203@jon.es> <4B21BE48.9090205@krondo.com>
	<19234.12473.915610.485018@jon.es>
Message-ID: <57016BCA-9412-4D2E-BAD7-AF5F611265AC@gmail.com>

On Dec 11, 2009, at 6:44 AM, Terry Jones wrote:
> I'm not sure the details of all this are of interest to many people on the
> list. I'll find time to put the code up somewhere more useful. It would be
> nice to have a runnable demo/example too. Not sure I'll get there.

Cool, if you'll put up a link when it's up, that'd be great.  

While a demo would be great, it seems like something you'd be able to figure out how to use if you need it.

S




From jared.gisin at isilon.com  Fri Dec 11 10:02:55 2009
From: jared.gisin at isilon.com (Jared Gisin)
Date: Fri, 11 Dec 2009 09:02:55 -0800
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <3A29FB30-8CA5-4CB6-95D6-DBA2FBF9328D@fuhm.net>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com><20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain><12aaa0810912101121k3757fb00s78ee7aa2f2880b3a@mail.gmail.com><0CAC39EA-D30F-4F75-A016-17991C02D062@bubblehouse.org><12aaa0810912101429q7b213e85m49daa4a4338f5c9f@mail.gmail.com>
	<3A29FB30-8CA5-4CB6-95D6-DBA2FBF9328D@fuhm.net>
Message-ID: <0C40B34038FD824FACDB387E77887287033903BA@seaxch08.desktop.isilon.com>

Thanks, James.

This is actually pretty sad because my reading of the code in
twisted.web2 indicates that's it's certainly more capable and more
robust than the twisted.web version. It implements more of HTTP 1.1 and
it provides for incoming HTTP stream processing by a resource.
Presently, I'm going back into twisted.web and refactoring to add some
of this functionality. 

I'm interested in a true twisted HTTP/1.1 protocol implementation that
is robust and clean. I have no use for any browser/HTML/CGI realted mix
in stuff. I consider all of that as frosting on top of the HTTP layer,
so I'm trying to produce a clean, gutted HTTP implementation that does
nothing more than speak HTTP without any cruft or extras.

Thanks again for the insight!

-Jared


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of James Y
Knight
Sent: Thursday, December 10, 2009 3:36 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] web vs web2 clarification

On Dec 10, 2009, at 5:29 PM, Mikhail Terekhov wrote:
> That is all true but it is very close to Joel's reasoning, kind of a
manager's point of view. It is too business/money oriented and doesn't
exhaust all the reasons why people write software in open source world
in particular. And what is more important it doesn't explain why they
still rewrite it from scratch sometimes and succeed? ;)
> 
> But this became completely unrelated to this list, sorry for dragging
discussion so far.

I started the rewrite because I wanted to, and believed it was the most
reasonable way to achive the goal of a better HTTP implementation and
API. And let's not even call it "rewrite from scratch": it was branched
from the twisted.web code and used ideas previosuly explored in Nevow.
And there is even backwards compatibility in there for old
twisted.web.Resource classes, which worked fine for most resources (but
is not absolutely 100% compatible).

There were certainly some issues, both with functionality and with
compatibility. (Especially with Nevow: Nevow is basically its own
reimplementation of half of twisted.web, so the twisted.web2
backwards-compat code needed special-casing to work with it, and that
was never completed). But where the project really went wrong is when I
stopped working on it, and nobody else was interested in finishing that
job. There were many reasons I stopped working on it, but I don't really
want to get into it. The people actually doing the work now want to keep
working within the old framework. And that's the open source way: he who
does the work calls the shots. Tada.

I do think twisted.web2 could have succeeded in a form substantially
similar to its present state, but alas, it was not meant to be.

James


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From jared.gisin at isilon.com  Fri Dec 11 10:12:41 2009
From: jared.gisin at isilon.com (Jared Gisin)
Date: Fri, 11 Dec 2009 09:12:41 -0800
Subject: [Twisted-Python] zope.interface
Message-ID: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>

Is there a good document that explains why zope.interface is necessary
to the twisted project?

 

-Jared

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091211/a109e4e6/attachment-0001.html>

From ssteinerx at gmail.com  Fri Dec 11 10:41:04 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Fri, 11 Dec 2009 12:41:04 -0500
Subject: [Twisted-Python] web vs web2 clarification
In-Reply-To: <0C40B34038FD824FACDB387E77887287033903BA@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033902D6@seaxch08.desktop.isilon.com><20091210172513.2549.448430112.divmod.xquotient.666@localhost.localdomain><12aaa0810912101121k3757fb00s78ee7aa2f2880b3a@mail.gmail.com><0CAC39EA-D30F-4F75-A016-17991C02D062@bubblehouse.org><12aaa0810912101429q7b213e85m49daa4a4338f5c9f@mail.gmail.com>
	<3A29FB30-8CA5-4CB6-95D6-DBA2FBF9328D@fuhm.net>
	<0C40B34038FD824FACDB387E77887287033903BA@seaxch08.desktop.isilon.com>
Message-ID: <40285652-66F9-4AC6-A8B5-2F0285FAE07B@gmail.com>


On Dec 11, 2009, at 12:02 PM, Jared Gisin wrote:
> I'm interested in a true twisted HTTP/1.1 protocol implementation that
> is robust and clean. I have no use for any browser/HTML/CGI realted mix
> in stuff. I consider all of that as frosting on top of the HTTP layer,
> so I'm trying to produce a clean, gutted HTTP implementation that does
> nothing more than speak HTTP without any cruft or extras.

Wow, if that could be pushed in one level from the current twisted interface, so that we could use it exactly as you say (without andy HTML cruft), and it could be available in Twisted, that would be a huge win.

Some HTTP/1.1 stuff made it into the recent release, but it sounds like you're planning on adding to that implementation; but at a lower level.

Any chance you'll work on helping it find its way back into Twisted?

S




From glyph at twistedmatrix.com  Fri Dec 11 11:00:39 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 11 Dec 2009 13:00:39 -0500
Subject: [Twisted-Python] zope.interface
In-Reply-To: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>
Message-ID: <5363F84B-AB85-40D4-92B7-C476F22C7790@twistedmatrix.com>


On Dec 11, 2009, at 12:12 PM, Jared Gisin wrote:

> Is there a good document that explains why zope.interface is necessary to the twisted project?

Not as such, but you may be interested in <http://glyph.twistedmatrix.com/2009/02/explaining-why-interfaces-are-great.html>.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091211/f511eaae/attachment.html>

From exarkun at twistedmatrix.com  Sat Dec 12 22:05:12 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Dec 2009 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1260680712.99.632623350@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091213/aa66e09b/attachment-0001.html>

From tuure at laurinolli.net  Sun Dec 13 21:24:20 2009
From: tuure at laurinolli.net (Tuure Laurinolli)
Date: Mon, 14 Dec 2009 06:24:20 +0200
Subject: [Twisted-Python] Twisted download issues
Message-ID: <4B25BDF4.2090402@laurinolli.net>

It appears that Twisted source and binary packages are currently
distributed solely via tmrc.mit.edu, which seems to be down. I don't
know what has happened to tmrc.mit.edu, but it would be nice if there
were more mirrors even if this is just a minor glitch.

I guess open source projects typically distribute their installabled via
services like Sourceforge. Although Sourceforge immediately creeps me
out with the slowness of the site itself, they certainly do have a
sizable collection of mirrors and there usually aren't any problems in
downloading files if the mirror link can be coaxed out of Sourceforge
itself. Perhaps there is a way to get Twisted mirrored on these sites
without going through Soruceforge?

Also, my personal VPS has been sitting nigh unused for about a year now.
It currently runs DNS and e-mail, but I wouldn't mind mirroring Twisted
too :)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 187 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20091214/54498283/attachment.sig>

From p.mayers at imperial.ac.uk  Mon Dec 14 04:48:48 2009
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 14 Dec 2009 11:48:48 +0000
Subject: [Twisted-Python] zope.interface
In-Reply-To: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>
Message-ID: <4B262620.7010105@imperial.ac.uk>

Jared Gisin wrote:
> Is there a good document that explains why zope.interface is necessary 
> to the twisted project?

A counter-question: Is there a good document that explains why people 
care? It's just another dependency isn't it?



From screwtape at froup.com  Mon Dec 14 05:12:26 2009
From: screwtape at froup.com (Tim Allen)
Date: Mon, 14 Dec 2009 23:12:26 +1100
Subject: [Twisted-Python] zope.interface
In-Reply-To: <4B262620.7010105@imperial.ac.uk>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>
	<4B262620.7010105@imperial.ac.uk>
Message-ID: <20091214121226.GC23306@thristian.org>

On Mon, Dec 14, 2009 at 11:48:48AM +0000, Phil Mayers wrote:
> Jared Gisin wrote:
> > Is there a good document that explains why zope.interface is necessary 
> > to the twisted project?
> 
> A counter-question: Is there a good document that explains why people 
> care? It's just another dependency isn't it?

Trying to remember back to when I was a Twisted newbie, I seem to
recall a pang of dismay at seeing the word "zope", until I realised that
zope.interface was very small and self-contained and didn't have further
dependencies on the rest of Zope.

Another possibility might be that the worry comes from people using
systems that don't have good built-in dependency management. I don't
know where pip/easy_install are at these days, but Debian's apt and
Fedora's yum have numbed the painful memories of downloading some
interesting code off the 'net and discovering yet further dependencies
I would have to track down and install to get things working.

I'm not saying these are well-researched or compelling reasons, just
speculating about what might be going on.

It occurs to me that recent discussions about splitting Deferreds off
into their own library might consider zope.interface as a model. Has it
prospered, as separate library? Does anyone besides Zope and Twisted use
it? I don't know, but it might be worth finding out.


Tim.



From p.mayers at imperial.ac.uk  Mon Dec 14 06:13:31 2009
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 14 Dec 2009 13:13:31 +0000
Subject: [Twisted-Python] zope.interface
In-Reply-To: <20091214121226.GC23306@thristian.org>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>	<4B262620.7010105@imperial.ac.uk>
	<20091214121226.GC23306@thristian.org>
Message-ID: <4B2639FB.3030400@imperial.ac.uk>

Tim Allen wrote:
> On Mon, Dec 14, 2009 at 11:48:48AM +0000, Phil Mayers wrote:
>> Jared Gisin wrote:
>>> Is there a good document that explains why zope.interface is necessary 
>>> to the twisted project?
>> A counter-question: Is there a good document that explains why people 
>> care? It's just another dependency isn't it?
> 
> Trying to remember back to when I was a Twisted newbie, I seem to
> recall a pang of dismay at seeing the word "zope", until I realised that
> zope.interface was very small and self-contained and didn't have further
> dependencies on the rest of Zope.

As someone who went through the awesomely steep learning curve for (and 
still uses) Zope, I can sort-of understand that "oh no zope" moment, but 
on the other hand, having used Zope a lot, I finally realised it's kind 
of the Unix of web frameworks ("those that don't understand Zope are 
doomed to reinvent it, poorly"). My crufty old Zope 2 installation still 
does things no other web does without extensive configuration, patching 
or work on my part.

It's sad that what is actually a fine product is detested within the new 
generation of python coders because they couldn't take the time to learn 
it, and it's even sadder to imagine uptake of a small, self-contained 
and well-tested sub-package suffers because of its name.

This is one excellent argument for putting it into the standard library, 
which I guess isn't going to happen :o(

> 
> Another possibility might be that the worry comes from people using
> systems that don't have good built-in dependency management. I don't
> know where pip/easy_install are at these days, but Debian's apt and
> Fedora's yum have numbed the painful memories of downloading some
> interesting code off the 'net and discovering yet further dependencies
> I would have to track down and install to get things working.

Yes, there do seem to be an awful lot of people who are basically too 
lazy to put actual work into getting their software environment 
functioning ;o)

In all seriousness though - people are either installing from source, or 
a package. If the former, they're going to have to "python setup.py 
install" at least once; one more time (on an easy-to-compile package 
with no dependencies of its own) is not compelling to me!

> 
> I'm not saying these are well-researched or compelling reasons, just
> speculating about what might be going on.
> 
> It occurs to me that recent discussions about splitting Deferreds off
> into their own library might consider zope.interface as a model. Has it
> prospered, as separate library? Does anyone besides Zope and Twisted use
> it? I don't know, but it might be worth finding out.

I don't *think* a lot of code uses it, which is unfortunate and 
symptomatic (IMHO) of a certain level of immaturity within the Python 
community.

<rant>

"""Hey, do you know what we need? Another web framework, with its own 
template engine, ORM and plugin API! W00t! This'll show those Ruby+Rails 
folks!"""

Really? Show them what exactly?

</rant>



From dripton at ripton.net  Mon Dec 14 09:27:46 2009
From: dripton at ripton.net (David Ripton)
Date: Mon, 14 Dec 2009 08:27:46 -0800
Subject: [Twisted-Python] zope.interface
In-Reply-To: <4B262620.7010105@imperial.ac.uk>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>
	<4B262620.7010105@imperial.ac.uk>
Message-ID: <20091214162746.GA31780@vidar.dreamhost.com>

On 2009.12.14 11:48:48 +0000, Phil Mayers wrote:
> Jared Gisin wrote:
> > Is there a good document that explains why zope.interface is necessary 
> > to the twisted project?
> 
> A counter-question: Is there a good document that explains why people 
> care? It's just another dependency isn't it?

Sure.  But Twisted has a very small number of dependencies (I think
Python and Zope Interface are the only ones that are absolutely
required) so it does increase the total effort to install Twisted on an
OS without a good package manager by a noticable amount.

Zope Interface is a good library, and I think the Twisted team made the
right call when they decided to use it rather than continue to maintain
their own interface library.  It's not their fault that installing
Python dependencies on some operating systems is still way harder than
it should be.

It would be great if general Python installation and packaging tools
improved to the point where one could easily install Twisted and all its
dependencies on any supported OS using PyPI, as easily as we can on
Linux or BSD using the OS package manager, or as easily as we can
install Perl packages from CPAN, or as easily as we can run Java stuff
using Java Web Start, etc.  Enough smart people care about this problem
that I'm pretty sure it'll be solved over the next couple of years.
Which is too far away to save me from having to write big nasty custom
Windows and MacOS installers for my current game, but might mean that
this is the last time I ever have to do it.

-- 
David Ripton    dripton at ripton.net



From landreville at deadtreepages.com  Mon Dec 14 10:32:51 2009
From: landreville at deadtreepages.com (Landreville)
Date: Mon, 14 Dec 2009 12:32:51 -0500
Subject: [Twisted-Python] XMLRPC get IP address
Message-ID: <9d748c780912140932p4f9ab374nbb32c538753bd168@mail.gmail.com>

Hello,

I've looked through the mailing list and already found this reference to get
the IP address when using xmlrpc:

http://twistedmatrix.com/pipermail/twisted-python/2004-June/007987.html

But it is not working.

I have added this to my class that inherits from xmlrpc.XMLRPC

def render(self, request):
self.request = request
xmlrpc.XMLRPC.render(self, request)


Now when I call any function the log says:
2009-12-14 12:29:18-0500 [-]
/usr/local/lib/python2.6/dist-packages/Twisted-9.0.0-py2.6-linux-x86_64.egg/twisted/web/xmlrpc.py:148:
exceptions.UserWarning: Warning! request.finish called twice.

I have two XMLRPC classes, and one of them is a subHandler, but the
subhandler's render method never gets called as far as I've seen (so it
shouldnt be causing request.finish to be called twice)  and just to be sure
I added this to only the parent XMLRPC class.

Any ideas why this would cause request.finish to be called twice?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091214/482b3c60/attachment.html>

From exarkun at twistedmatrix.com  Mon Dec 14 11:01:35 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 14 Dec 2009 18:01:35 -0000
Subject: [Twisted-Python] XMLRPC get IP address
In-Reply-To: <9d748c780912140932p4f9ab374nbb32c538753bd168@mail.gmail.com>
References: <9d748c780912140932p4f9ab374nbb32c538753bd168@mail.gmail.com>
Message-ID: <20091214180135.2667.87947723.divmod.xquotient.214@localhost.localdomain>


On 05:32 pm, landreville at deadtreepages.com wrote:
>Hello,
>
>I've looked through the mailing list and already found this reference 
>to get
>the IP address when using xmlrpc:
>
>http://twistedmatrix.com/pipermail/twisted-python/2004-June/007987.html
>
>But it is not working.
>
>I have added this to my class that inherits from xmlrpc.XMLRPC
>
>def render(self, request):
>self.request = request
>xmlrpc.XMLRPC.render(self, request)
>
>
>Now when I call any function the log says:
>2009-12-14 12:29:18-0500 [-]
>/usr/local/lib/python2.6/dist-packages/Twisted-9.0.0-py2.6-linux- 
>x86_64.egg/twisted/web/xmlrpc.py:148:
>exceptions.UserWarning: Warning! request.finish called twice.
>
>I have two XMLRPC classes, and one of them is a subHandler, but the
>subhandler's render method never gets called as far as I've seen (so it
>shouldnt be causing request.finish to be called twice)  and just to be 
>sure
>I added this to only the parent XMLRPC class.
>
>Any ideas why this would cause request.finish to be called twice?

Make sure you return the result of calling xmlrpc.XMLRPC.render.

Jean-Paul



From celord at gmail.com  Mon Dec 14 16:48:28 2009
From: celord at gmail.com (=?ISO-8859-1?B?Q+lzYXIgR2FyY+1h?=)
Date: Mon, 14 Dec 2009 17:48:28 -0600
Subject: [Twisted-Python] plugin system
Message-ID: <b302bf880912141548o512f14a4m98ace9f23da22fd2@mail.gmail.com>

Guys, I'am new to twisted and I've read the documentation about the
plugin system and the components but I can't make it, I really do not
get it well, do you guys have any examples there to see if I can get
it :)

Thanks a lot

-- 
http://celord.blogspot.com/



From andrew at bemusement.org  Mon Dec 14 18:20:55 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 15 Dec 2009 12:20:55 +1100
Subject: [Twisted-Python] zope.interface
In-Reply-To: <20091214121226.GC23306@thristian.org>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com>
	<4B262620.7010105@imperial.ac.uk>
	<20091214121226.GC23306@thristian.org>
Message-ID: <20091215012055.GI7204@steerpike.home.puzzling.org>

Tim Allen wrote:
[...]
> It occurs to me that recent discussions about splitting Deferreds off
> into their own library might consider zope.interface as a model. Has it
> prospered, as separate library? Does anyone besides Zope and Twisted use
> it? I don't know, but it might be worth finding out.

I'm not sure that it has “prospered” exactly, but a Python 3 added its
Abstract Base Classes feature[1] to satisfy some (many?) of the same needs.
So in some sense the general idea has prospered, even if this particular
implementation hasn't taken over the world.

-Andrew.

[1] http://docs.python.org/dev/3.0/whatsnew/2.6.html#pep-3119



From rutt.4 at osu.edu  Mon Dec 14 18:54:54 2009
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Mon, 14 Dec 2009 20:54:54 -0500
Subject: [Twisted-Python] complete producer/consumer example
Message-ID: <68f3f1f70912141754n3bbc8a19k4ef12ca48f8290fe@mail.gmail.com>

How does the below example look as a complete producer/consumer example?  If
it's well received, perhaps we can add it to the online documentation at
http://twistedmatrix.com/documents/current/core/howto/producers.html in the
"Further Reading" section?  I always felt that the producer/consumer (a.k.a.
high volume streaming) docs lacked a real example that users could download
and run.

#!/sw/external/python-2.6.1/bin/python
"""Serve as a sample implementation of a twisted producer/consumer
system, with a simple TCP server which asks the user how many random
integers they want, and it sends the result set back to the user, one
result per line."""

import random

from zope.interface import implements
from twisted.internet import interfaces, reactor
from twisted.internet.protocol import Factory
from twisted.protocols.basic import LineReceiver

class Producer:
    """Send back the requested number of random integers to the client."""
    implements(interfaces.IPushProducer)
    def __init__(self, proto, cnt):
        self._proto = proto
        self._goal = cnt
        self._produced = 0
        self._paused = False
    def pauseProducing(self):
        """When we've produced data too fast, pauseProducing() will be
called (reentrantly from within resumeProducing's transport.write
method, most likely), so set a flag that causes production to pause
temporarily."""
        self._paused = True
        print('pausing connection from %s' %
(self._proto.transport.getPeer()))
    def resumeProducing(self):
        self._paused = False
        while not self._paused and self._produced < self._goal:
            next_int = random.randint(0, 10000)
            self._proto.transport.write('%d\r\n' % (next_int))
            self._produced += 1
        if self._produced == self._goal:
            self._proto.transport.unregisterProducer()
            self._proto.transport.loseConnection()
    def stopProducing(self):
        pass

class ServeRandom(LineReceiver):
    """Serve up random data."""
    def connectionMade(self):
        print('connection made from %s' % (self.transport.getPeer()))
        self.transport.write('how many random integers do you want?\r\n')
    def lineReceived(self, line):
        cnt = int(line.strip())
        producer = Producer(self, cnt)
        self.transport.registerProducer(producer, True)
        producer.resumeProducing()
    def connectionLost(self, reason):
        print('connection lost from %s' % (self.transport.getPeer()))
factory = Factory()
factory.protocol = ServeRandom
reactor.listenTCP(1234, factory)
print('listening on 1234...')
reactor.run()

Use on the client:

$ telnet localhost 1234
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
how many random integers do you want?
5
431
7201
3289
9604
6659
Connection closed by foreign host.
$

Use on the server (observe how the server pauses production sometimes - this
happens when a large data set is requested by the client):

$ ./streaming.py
listening on 1234...
connection made from IPv4Address(TCP, '127.0.0.1', 54859)
connection lost from IPv4Address(TCP, '127.0.0.1', 54859)
connection made from IPv4Address(TCP, '127.0.0.1', 54864)
pausing connection from IPv4Address(TCP, '127.0.0.1', 54864)
pausing connection from IPv4Address(TCP, '127.0.0.1', 54864)
pausing connection from IPv4Address(TCP, '127.0.0.1', 54864)
pausing connection from IPv4Address(TCP, '127.0.0.1', 54864)
connection lost from IPv4Address(TCP, '127.0.0.1', 54864)
[...]

Thanks.
-- 
Benjamin Rutt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091214/d8e325b1/attachment.html>

From apacheco.uy at gmail.com  Mon Dec 14 21:32:40 2009
From: apacheco.uy at gmail.com (=?ISO-8859-1?Q?An=EDbal_Pacheco?=)
Date: Tue, 15 Dec 2009 02:32:40 -0200
Subject: [Twisted-Python] subprocess.Popen
Message-ID: <fa5a72c90912142032n3ae02a76jee9424c7d5cbdc04@mail.gmail.com>

Hi list,

Is it possible to attach a callback to a process launched using
subprocess.Popen?, I want to receive a notification on process
termination.

many thanks!
anibal.-



From screwtape at froup.com  Mon Dec 14 22:26:19 2009
From: screwtape at froup.com (Tim Allen)
Date: Tue, 15 Dec 2009 16:26:19 +1100
Subject: [Twisted-Python] subprocess.Popen
In-Reply-To: <fa5a72c90912142032n3ae02a76jee9424c7d5cbdc04@mail.gmail.com>
References: <fa5a72c90912142032n3ae02a76jee9424c7d5cbdc04@mail.gmail.com>
Message-ID: <20091215052619.GD23306@thristian.org>

On Tue, Dec 15, 2009 at 02:32:40AM -0200, Aníbal Pacheco wrote:
> Is it possible to attach a callback to a process launched using
> subprocess.Popen?, I want to receive a notification on process
> termination.

I don't believe Twisted has any special support for subprocess.Popen,
but you can do much the same things with Twisted's
reactor.spawnProcess().



From apacheco.uy at gmail.com  Tue Dec 15 03:59:40 2009
From: apacheco.uy at gmail.com (=?ISO-8859-1?Q?An=EDbal_Pacheco?=)
Date: Tue, 15 Dec 2009 08:59:40 -0200
Subject: [Twisted-Python] subprocess.Popen
In-Reply-To: <20091215052619.GD23306@thristian.org>
References: <fa5a72c90912142032n3ae02a76jee9424c7d5cbdc04@mail.gmail.com>
	<20091215052619.GD23306@thristian.org>
Message-ID: <fa5a72c90912150259v7fd0ac94r2f35a8a403aaabf6@mail.gmail.com>

Thanks! I think that is just what I need:
http://twistedmatrix.com/documents/current/core/howto/process.html

On Tue, Dec 15, 2009 at 3:26 AM, Tim Allen <screwtape at froup.com> wrote:
> On Tue, Dec 15, 2009 at 02:32:40AM -0200, Aníbal Pacheco wrote:
>> Is it possible to attach a callback to a process launched using
>> subprocess.Popen?, I want to receive a notification on process
>> termination.
>
> I don't believe Twisted has any special support for subprocess.Popen,
> but you can do much the same things with Twisted's
> reactor.spawnProcess().
>



From exarkun at twistedmatrix.com  Tue Dec 15 07:22:13 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 15 Dec 2009 14:22:13 -0000
Subject: [Twisted-Python] complete producer/consumer example
In-Reply-To: <68f3f1f70912141754n3bbc8a19k4ef12ca48f8290fe@mail.gmail.com>
References: <68f3f1f70912141754n3bbc8a19k4ef12ca48f8290fe@mail.gmail.com>
Message-ID: <20091215142213.2667.1339676690.divmod.xquotient.361@localhost.localdomain>

On 01:54 am, rutt.4 at osu.edu wrote:
>How does the below example look as a complete producer/consumer 
>example?  If
>it's well received, perhaps we can add it to the online documentation 
>at
>http://twistedmatrix.com/documents/current/core/howto/producers.html in 
>the
>"Further Reading" section?  I always felt that the producer/consumer 
>(a.k.a.
>high volume streaming) docs lacked a real example that users could 
>download
>and run.

Adding an example like this seems like a good idea to me. 
doc/core/examples/ is a good place for runnable examples like the one 
you've written up, so we could add it there and link to it.  Another 
possibility is to integrate it into the howto more, posting parts of the 
code inline near text which is discussing that part of how producers and 
consumers work.  This is a bit more work, of course, and probably also 
involves editing some of the existing text to make things flow nicely, 
but I think it's a good approach.

Either way, though, if you could open a ticket and attach your code to 
it, that'd be excellent.

Thank you! :)

Jean-Paul



From exarkun at twistedmatrix.com  Tue Dec 15 08:42:45 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 15 Dec 2009 15:42:45 -0000
Subject: [Twisted-Python] plugin system
In-Reply-To: <b302bf880912141548o512f14a4m98ace9f23da22fd2@mail.gmail.com>
References: <b302bf880912141548o512f14a4m98ace9f23da22fd2@mail.gmail.com>
Message-ID: <20091215154245.2667.669392555.divmod.xquotient.365@localhost.localdomain>

On 14 Dec, 11:48 pm, celord at gmail.com wrote:
>Guys, I'am new to twisted and I've read the documentation about the
>plugin system and the components but I can't make it, I really do not
>get it well, do you guys have any examples there to see if I can get
>it :)
>
>Thanks a lot

Nevow, Axiom, Mantissa, and Quotient all make use of the plugin system. 
eg:

http://divmod.org/trac/browser/trunk/Axiom/twisted/plugins/axiom_plugins.py

Jean-Paul



From nathan.stocks at gmail.com  Tue Dec 15 10:17:18 2009
From: nathan.stocks at gmail.com (Nathan)
Date: Tue, 15 Dec 2009 10:17:18 -0700
Subject: [Twisted-Python] deferred list behaviour
Message-ID: <96c9d6a80912150917n38172466md5a4124e8b1c5a6a@mail.gmail.com>

Are the results of a deferred list guaranteed to be in the same order
as the list of deferreds that was given to it?

i.e. if I pass [d1, d2, d3] to a deferred list and the results list in
the call back has [(True, (something,)), (False, (something,)), (True,
(something))] is it guaranteed that items 0, 1, and 2 in each list
correspond to each other?

~ Nathan



From exarkun at twistedmatrix.com  Tue Dec 15 10:34:43 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 15 Dec 2009 17:34:43 -0000
Subject: [Twisted-Python] deferred list behaviour
In-Reply-To: <96c9d6a80912150917n38172466md5a4124e8b1c5a6a@mail.gmail.com>
References: <96c9d6a80912150917n38172466md5a4124e8b1c5a6a@mail.gmail.com>
Message-ID: <20091215173443.2667.1502029672.divmod.xquotient.366@localhost.localdomain>

On 05:17 pm, nathan.stocks at gmail.com wrote:
>Are the results of a deferred list guaranteed to be in the same order
>as the list of deferreds that was given to it?
>
>i.e. if I pass [d1, d2, d3] to a deferred list and the results list in
>the call back has [(True, (something,)), (False, (something,)), (True,
>(something))] is it guaranteed that items 0, 1, and 2 in each list
>correspond to each other?

Yep.

Jean-Paul



From nathan.stocks at gmail.com  Tue Dec 15 10:42:09 2009
From: nathan.stocks at gmail.com (Nathan)
Date: Tue, 15 Dec 2009 10:42:09 -0700
Subject: [Twisted-Python] deferred list behaviour
In-Reply-To: <20091215173443.2667.1502029672.divmod.xquotient.366@localhost.localdomain>
References: <96c9d6a80912150917n38172466md5a4124e8b1c5a6a@mail.gmail.com>
	<20091215173443.2667.1502029672.divmod.xquotient.366@localhost.localdomain>
Message-ID: <96c9d6a80912150942u3c1e58e8k34fb993ea8b12b46@mail.gmail.com>

On Tue, Dec 15, 2009 at 10:34 AM,  <exarkun at twistedmatrix.com> wrote:
> On 05:17 pm, nathan.stocks at gmail.com wrote:
>>Are the results of a deferred list guaranteed to be in the same order
>>as the list of deferreds that was given to it?
>>
>>i.e. if I pass [d1, d2, d3] to a deferred list and the results list in
>>the call back has [(True, (something,)), (False, (something,)), (True,
>>(something))] is it guaranteed that items 0, 1, and 2 in each list
>>correspond to each other?
>
> Yep.

Perfect, that's what I thought.

~ Nathan



From jared.gisin at isilon.com  Tue Dec 15 11:11:03 2009
From: jared.gisin at isilon.com (Jared Gisin)
Date: Tue, 15 Dec 2009 10:11:03 -0800
Subject: [Twisted-Python] zope.interface
In-Reply-To: <20091215012055.GI7204@steerpike.home.puzzling.org>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com><4B262620.7010105@imperial.ac.uk><20091214121226.GC23306@thristian.org>
	<20091215012055.GI7204@steerpike.home.puzzling.org>
Message-ID: <0C40B34038FD824FACDB387E77887287033905FE@seaxch08.desktop.isilon.com>

I completely fail to see why zope.interface is even needed. It's not Pythonic at all and it contributes to unnecessary code bloat.

What's wrong with writing subclasses? I've never had a case where that wasn't sufficient. Instead of filling up your files with all of  these empty class definitions that define the methods that objects should implemmnt, why not just make the base object from which all similar object inherit implement the required methods, and if it's up to a subclass to provide functionality, just raise an ImplementationError in the base class method and let it be a run-time error. Keep it clean and simple and let Python do its work.
	
-Jared

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Andrew Bennetts
Sent: Monday, December 14, 2009 5:21 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] zope.interface

Tim Allen wrote:
[...]
> It occurs to me that recent discussions about splitting Deferreds off
> into their own library might consider zope.interface as a model. Has it
> prospered, as separate library? Does anyone besides Zope and Twisted use
> it? I don't know, but it might be worth finding out.

I'm not sure that it has “prospered” exactly, but a Python 3 added its
Abstract Base Classes feature[1] to satisfy some (many?) of the same needs.
So in some sense the general idea has prospered, even if this particular
implementation hasn't taken over the world.

-Andrew.

[1] http://docs.python.org/dev/3.0/whatsnew/2.6.html#pep-3119

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

From glyph at twistedmatrix.com  Tue Dec 15 12:26:59 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 15 Dec 2009 14:26:59 -0500
Subject: [Twisted-Python] zope.interface
In-Reply-To: <0C40B34038FD824FACDB387E77887287033905FE@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com><4B262620.7010105@imperial.ac.uk><20091214121226.GC23306@thristian.org>
	<20091215012055.GI7204@steerpike.home.puzzling.org>
	<0C40B34038FD824FACDB387E77887287033905FE@seaxch08.desktop.isilon.com>
Message-ID: <53CE1BAB-B3F3-4DAC-96CA-4A25264BA15A@twistedmatrix.com>


On Dec 15, 2009, at 1:11 PM, Jared Gisin wrote:

> I completely fail to see why zope.interface is even needed. It's not Pythonic at all and it contributes to unnecessary code bloat.

Oh gosh!  You're absolutely right!  I never noticed it before!  I just got out my Pythonic-o-meter and measured Zope Interface!  Apparently it is only 0.44 vRossums!  (For those you familiar only with the SI units, a vRossum is equivalent to one Microtim per cubic meter-second).  We should totally delete all the interfaces in Twisted!

Wait, oops.  I mean, did you even read <http://glyph.twistedmatrix.com/2009/02/explaining-why-interfaces-are-great.html>?  There are lots of reasons to have interfaces.

> What's wrong with writing subclasses?

Lots of things in Twisted are subclasses.  twisted.internet.protocol.Protocol provides a helpful utility base-class for implementing twisted.internet.interfaces.IProtocol.  If you use them for what they're good for, there's nothing wrong with them.

But, as I said in my article, interfaces and classes are for different things.

As a very simple example of what's wrong with subclassing, there are times when having extra superclasses breaks things.  For example: let's say that you want to have an IProtocol implementation that uses __slots__ and doesn't have a __dict__.  Or, you want to do the equivalent thing in C to write a super-optimized IProtocol implementation.

If your documentation says "this parameter must be a Protocol", then you're stuck.  There's no way to enforce that or provide friendly debugging error messages when you *don't* provide a Protocol; you just have to invoke the appropriate methods and hope it works.  If you do actually subclass Protocol in your application, in the best case you get a class which accidentally inherits a __dict__, and in the worst case you get a base class layout conflict error and you can't even import your module.  There are also lots of ways that metaclasses can conflict, inheritance hierarchies can become awkward and confusing, etc.  This is even worse if the base class you want happens to do some unwanted work in its constructor.

Another use for interfaces is testing.  For example, you can use interfaces to write tests to make sure that your code is up-to-date with the most recent specifications.  Let's say that we have an interface, IFoo, that has a method, 'bar'.  We want to add a method, 'baz', to it.  Now, applications may be claiming to implement IFoo already, so we need to be careful when we invoke 'bar' as it may not be present, but the savvy implementor could use 'verifyObject' to make sure that their MyFoo class properly implemented all the required methods, and IFoo.

There are some things you can kinda-sorta do with metaclasses or introspection to provide similar functionality, but they're highly susceptible to implementation details shifting around.  Metaclasses, in particular, tend to exacerbate the problems I mentioned above with inheritance conflicts and features like __slots__.

Yet another use for interfaces is adaptation.  This is very useful in integration systems like twisted.cred.  The interface object serves as a concise encapsulation of what the calling code wants to get out of cred, and realm implementations can return whatever.

> I've never had a case where that wasn't sufficient.

Your limited experience isn't necessarily a good argument for what Twisted should or shouldn't do.  There are many people for whom the 'urllib' or 'socket' modules have always been sufficient, but that doesn't mean we're going to give up and go home either.

If you still don't think my reasoning is adequate, you should spend a few years contributing lots of really useful patches to Twisted, then bring this up again.




From jeremy at jongsma.org  Tue Dec 15 13:22:22 2009
From: jeremy at jongsma.org (Jeremy Jongsma)
Date: Tue, 15 Dec 2009 14:22:22 -0600
Subject: [Twisted-Python] Downpour - new project using Twisted
Message-ID: <1260908542.21356.34.camel@jeremy-laptop>

I just posted my latest project - Downpour, a web-based BitTorrent
client using twisted and twisted-web.  Feel free to try it out and send
me any comments.  It hasn't been tested on Windows yet, so any trip
reports for that would also be appreciated.

http://home.jongsma.org/software/downpour/

Could someone add this to the "Projects Using Twisted" page?

-j

-- 




From phil at bubblehouse.org  Tue Dec 15 14:50:08 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 15 Dec 2009 16:50:08 -0500
Subject: [Twisted-Python] Downpour - new project using Twisted
In-Reply-To: <1260908542.21356.34.camel@jeremy-laptop>
References: <1260908542.21356.34.camel@jeremy-laptop>
Message-ID: <4B943956-1987-4D30-9F4F-1EBD19D5B00F@bubblehouse.org>

This is really cool, I can't wait to check it out.

I also wanted to suggest that you add your project to the 'tx' super-group on Launchpad. It will group it with a lot of other Twisted community projects, and has some other nice features.

You can even have it automagically sync the launchpad repository with your SVN repository, so developer-users can clone the resulting bazaar repository and submit patches through launchpad.

-phil

On Dec 15, 2009, at 3:22 PM, Jeremy Jongsma wrote:

> I just posted my latest project - Downpour, a web-based BitTorrent
> client using twisted and twisted-web.  Feel free to try it out and send
> me any comments.  It hasn't been tested on Windows yet, so any trip
> reports for that would also be appreciated.
> 
> http://home.jongsma.org/software/downpour/
> 
> Could someone add this to the "Projects Using Twisted" page?
> 
> -j
> 
> -- 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From thejash at gmail.com  Tue Dec 15 16:56:26 2009
From: thejash at gmail.com (Josh Albrecht)
Date: Tue, 15 Dec 2009 18:56:26 -0500
Subject: [Twisted-Python] UDP crashes python.exe when using IOCPReactor
Message-ID: <34332f6e0912151556n6455cd54h5daa9a4723d47f0e@mail.gmail.com>

I've been struggling to move a large program over to IOCPReactor, but
it is causing python.exe to crash on windows.  I reduced the error to
this program, which crashes almost immediately on all the machines
I've tested it on.  Am I doing something wrong?

#############################################
from twisted.internet.iocpreactor.reactor import IOCPReactor
from twisted.internet.main import installReactor
from twisted.internet.protocol import DatagramProtocol

reactor = IOCPReactor()
installReactor(reactor)

DATA = 'HELLO'
REMOTE_IP = "127.0.0.1"
REMOTE_PORT = 33351

class EchoDatagram(DatagramProtocol):
  def datagramReceived(self, datagram, addr):
    print((addr, datagram))
    self.transport.write(datagram, addr)

p1 = EchoDatagram()
listening_port1 = reactor.listenUDP(6951, p1, interface='')
p2 = EchoDatagram()
listening_port2 = reactor.listenUDP(REMOTE_PORT, p2, interface=REMOTE_IP)

def pointless_write():
  p1.transport.write(DATA, (REMOTE_IP, REMOTE_PORT))
  for i in xrange(10):
    f = open("temp1", "wb")
    f.write("Hi!")
    f.close()
    f = open("temp1", "rb")
    data = f.read()
    f.close()
  reactor.callLater(1, pointless_write)

reactor.callLater(1, pointless_write)
reactor.run()
#############################################

This has been driving me crazy all day.  Any insights would be greatly
appreciated!

Thanks,
Josh Albrecht



From exarkun at twistedmatrix.com  Tue Dec 15 18:39:47 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 16 Dec 2009 01:39:47 -0000
Subject: [Twisted-Python] UDP crashes python.exe when using IOCPReactor
In-Reply-To: <34332f6e0912151556n6455cd54h5daa9a4723d47f0e@mail.gmail.com>
References: <34332f6e0912151556n6455cd54h5daa9a4723d47f0e@mail.gmail.com>
Message-ID: <20091216013947.15596.723181779.divmod.xquotient.4@localhost.localdomain>

On 15 Dec, 11:56 pm, thejash at gmail.com wrote:
>I've been struggling to move a large program over to IOCPReactor, but
>it is causing python.exe to crash on windows.  I reduced the error to
>this program, which crashes almost immediately on all the machines
>I've tested it on.  Am I doing something wrong?

First thought, Windows 7 isn't a supported platform.  Little or no 
effort has been spent on getting Twisted working there.  As a start, you 
might try running the test suite to see what passes and what fails.

Next thought, you're installing the reactor wrong.  Instead, you should 
be doing:

    from twisted.internet import iocpreactor
    iocpreactor.install()
    from twisted.internet import reactor

As documented in the reactor selection howto:

    http://twistedmatrix.com/documents/current/core/howto/choosing- 
reactor.html#auto8

Jean-Paul



From thejash at gmail.com  Tue Dec 15 19:43:55 2009
From: thejash at gmail.com (Josh Albrecht)
Date: Tue, 15 Dec 2009 21:43:55 -0500
Subject: [Twisted-Python] UDP crashes python.exe when using IOCPReactor
In-Reply-To: <20091216013947.15596.723181779.divmod.xquotient.4@localhost.localdomain>
References: <34332f6e0912151556n6455cd54h5daa9a4723d47f0e@mail.gmail.com>
	<20091216013947.15596.723181779.divmod.xquotient.4@localhost.localdomain>
Message-ID: <34332f6e0912151843u2db025ccxa499f24d53b7345e@mail.gmail.com>

Thanks.  I changed the way I was installing the reactor, but it had no effect.

I did not realize that Windows 7 was unsupported.  However, I've also
reproduced this bug on windows XP, so I think it's a larger issue,
unfortunately.

Thanks,
 - Josh

On Tue, Dec 15, 2009 at 8:39 PM,  <exarkun at twistedmatrix.com> wrote:
> On 15 Dec, 11:56 pm, thejash at gmail.com wrote:
>>I've been struggling to move a large program over to IOCPReactor, but
>>it is causing python.exe to crash on windows.  I reduced the error to
>>this program, which crashes almost immediately on all the machines
>>I've tested it on.  Am I doing something wrong?
>
> First thought, Windows 7 isn't a supported platform.  Little or no
> effort has been spent on getting Twisted working there.  As a start, you
> might try running the test suite to see what passes and what fails.
>
> Next thought, you're installing the reactor wrong.  Instead, you should
> be doing:
>
>    from twisted.internet import iocpreactor
>    iocpreactor.install()
>    from twisted.internet import reactor
>
> As documented in the reactor selection howto:
>
>    http://twistedmatrix.com/documents/current/core/howto/choosing-
> reactor.html#auto8
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From rutt.4 at osu.edu  Tue Dec 15 20:46:42 2009
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Tue, 15 Dec 2009 22:46:42 -0500
Subject: [Twisted-Python] complete producer/consumer example
In-Reply-To: <20091215142213.2667.1339676690.divmod.xquotient.361@localhost.localdomain>
References: <68f3f1f70912141754n3bbc8a19k4ef12ca48f8290fe@mail.gmail.com>
	<20091215142213.2667.1339676690.divmod.xquotient.361@localhost.localdomain>
Message-ID: <68f3f1f70912151946k1df2bd0dwcc532b9f12397619@mail.gmail.com>

Ok, this is done.  See http://twistedmatrix.com/trac/ticket/4171.

I decided to start by just adding the example.  For me to rework the whole
howto around this example, I'm afraid I'd need to understand how it all
works a bit more than I do now.  So, baby steps first.

Do you need anything more from me here to pick this up and add it to the
core docs?  (I wasn't sure who to assign the ticket to, and it ended up
assigning it to glyph).

Thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091215/d7da665c/attachment-0001.html>

From spongelavapaul at googlemail.com  Wed Dec 16 01:36:32 2009
From: spongelavapaul at googlemail.com (Paul Thomas)
Date: Wed, 16 Dec 2009 08:36:32 +0000
Subject: [Twisted-Python] zope.interface
In-Reply-To: <0C40B34038FD824FACDB387E77887287033905FE@seaxch08.desktop.isilon.com>
References: <0C40B34038FD824FACDB387E77887287033903C0@seaxch08.desktop.isilon.com><4B262620.7010105@imperial.ac.uk><20091214121226.GC23306@thristian.org>
	<20091215012055.GI7204@steerpike.home.puzzling.org>
	<0C40B34038FD824FACDB387E77887287033905FE@seaxch08.desktop.isilon.com>
Message-ID: <4444E60F-7635-44DB-8BB1-2F95F0CEFCD0@googlemail.com>


On 15 Dec 2009, at 18:11, Jared Gisin wrote:

> What's wrong with writing subclasses? I've never had a case where  
> that wasn't sufficient. Instead of filling up your files with all  
> of  these empty class definitions that define the methods that  
> objects should implemmnt, why not just make the base object from  
> which all similar object inherit implement the required methods, and  
> if it's up to a subclass to provide functionality, just raise an  
> ImplementationError in the base class method and let it be a run- 
> time error. Keep it clean and simple and let Python do its work.

Wouldn't that be _more_ empty class definitions?





From amauryfa at gmail.com  Wed Dec 16 06:03:55 2009
From: amauryfa at gmail.com (Amaury Forgeot d'Arc)
Date: Wed, 16 Dec 2009 14:03:55 +0100
Subject: [Twisted-Python] UDP crashes python.exe when using IOCPReactor
In-Reply-To: <34332f6e0912151843u2db025ccxa499f24d53b7345e@mail.gmail.com>
References: <34332f6e0912151556n6455cd54h5daa9a4723d47f0e@mail.gmail.com>
	<20091216013947.15596.723181779.divmod.xquotient.4@localhost.localdomain>
	<34332f6e0912151843u2db025ccxa499f24d53b7345e@mail.gmail.com>
Message-ID: <e27efe130912160503i33b8aa0ag7acf9c05ab9fa69b@mail.gmail.com>

2009/12/16 Josh Albrecht <thejash at gmail.com>

> Thanks.  I changed the way I was installing the reactor, but it had no
> effect.
>
> I did not realize that Windows 7 was unsupported.  However, I've also
> reproduced this bug on windows XP, so I think it's a larger issue,
> unfortunately.
>

I also reproduce the problem consistently with a custom build of python2.5.1
with Visual Studio 8.
It never occurs in non-optimized build, but I was able to include debug info
and attach the debugger.

The errors are really strange: it seems that a register randomly changes its
value to 0x10

python25.dll!PyEval_CallObjectWithKeywords
        (_object * func=0x00fa3968, _object * arg=tuple(), _object *
kw=0x00000010)
python25.dll!PyInstance_New
        (_object * klass=0x00f516c0, _object * arg=tuple(), _object *
kw=0x00000010)
python25.dll!PyObject_Call
        (_object * func=0x00f516c0, _object * arg=tuple(), _object *
kw=0x00000000)
python25.dll!do_call
        (_object * func=0x00f516c0, _object * * * pp_stack=0x0021e6b0, int
na=2, int nk=0)

See how the "kw=0x0" becomes "kw=0x10" in inner frames.

I've also seen crashes in PyObject_GenericGetAttr, where the register which
holds the __mro__ contains 0x10, when the debugger still shows
((PyTupleObject*)(obj->ob_type->tp_mro))->ob_item == 5

Very very strange things are happening. Is it possible that some hardware
interruption does not restore the registers correctly?
I tried to modify the python intepreter, add printf statements... The crash
occurs at several places (sometimes it disappears completely), but all
crashes are similar: some register value becomes 0x10...
I can perform other tests if someone has an idea.

Note that in a non-optimized debug build, one of the Echoer stops working,
after exactly 1000 datagrams have been received (and no, it's not related to
sys.setrecursionlimit)

-- 
Amaury Forgeot d'Arc
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091216/39531f0b/attachment.html>

From maris at chown.lv  Wed Dec 16 12:34:56 2009
From: maris at chown.lv (=?iso-8859-4?Q?M=E0risR?=)
Date: Wed, 16 Dec 2009 21:34:56 +0200
Subject: [Twisted-Python] Memcache client issues
Message-ID: <4B6E356B-762D-429A-906C-280E2C4F88DA@chown.lv>

Hello!
I'm trying to write small tcp server, which doing some stuff with memcache. Everything was fine until I start it on production, after few minutes I got to rollback to old one. My script got max open files limit :( After  liitle inspection, I saw that, new connection to my daemon opens new connection to memcache and after disconnect its not closed and on new connections is not reused. I could not find how to disconnect form memcache after processing is done, or how to reuse open connections. Maybe someone has some good example of this? Thanks!


From rlotun at gmail.com  Thu Dec 17 03:17:27 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 17 Dec 2009 10:17:27 +0000
Subject: [Twisted-Python] Memcache client issues
In-Reply-To: <4B6E356B-762D-429A-906C-280E2C4F88DA@chown.lv>
References: <4B6E356B-762D-429A-906C-280E2C4F88DA@chown.lv>
Message-ID: <95bb10690912170217w3152ca76j45dd0bd6c258554a@mail.gmail.com>

Hi,

You might want to take a look at the txmemcache project:
https://launchpad.net/tx.memcache

Keep in mind that it might be more useful to use the server hash
function used in python-memcache/cmemcache:
http://www.tummy.com/Community/software/python-memcached/

Reza


-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun



From gabriel.rossetti at arimaz.com  Thu Dec 17 10:40:56 2009
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Thu, 17 Dec 2009 18:40:56 +0100
Subject: [Twisted-Python] copy.deepcopy domish.Element works in python 2.5
	but not in 2.6
Message-ID: <4B2A6D28.3030903@arimaz.com>

Hello everyone,

for some reason copy.deepcopy forks great on a domish.Element on 2.5 but 
not in 2.6 :

Python 2.5.4 (r254:67916, Sep 20 2009, 10:05:43)
[GCC 4.4.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
 >>> from twisted.words.xish import domish
 >>> import copy
 >>> msg = domish.Element(('jabber:client', 'message'))
 >>> msg2 = copy.deepcopy(msg)
 >>>


Python 2.6.4 (r264:75706, Nov  2 2009, 14:38:03)
[GCC 4.4.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
 >>> from twisted.words.xish import domish
 >>> import copy
 >>> msg = domish.Element(('jabber:client', 'message'))
 >>> msg2 = copy.deepcopy(msg)
Exception RuntimeError: 'maximum recursion depth exceeded while calling 
a Python object' in <type 'exceptions.AttributeError'> ignored
 >>>

does someone understand why? I'm using twisted 8.2 on ubuntu 9.10. Thank 
you,
Gabriel



From exarkun at twistedmatrix.com  Thu Dec 17 11:11:13 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 17 Dec 2009 18:11:13 -0000
Subject: [Twisted-Python] copy.deepcopy domish.Element works in python
	2.5	but not in 2.6
In-Reply-To: <4B2A6D28.3030903@arimaz.com>
References: <4B2A6D28.3030903@arimaz.com>
Message-ID: <20091217181113.15596.456256757.divmod.xquotient.407@localhost.localdomain>

On 05:40 pm, gabriel.rossetti at arimaz.com wrote:
>Hello everyone,
>
>for some reason copy.deepcopy forks great on a domish.Element on 2.5 
>but
>not in 2.6 :
>
>Python 2.5.4 (r254:67916, Sep 20 2009, 10:05:43)
>[GCC 4.4.1] on linux2
>Type "help", "copyright", "credits" or "license" for more information.
> >>> from twisted.words.xish import domish
> >>> import copy
> >>> msg = domish.Element(('jabber:client', 'message'))
> >>> msg2 = copy.deepcopy(msg)
> >>>
>
>
>Python 2.6.4 (r264:75706, Nov  2 2009, 14:38:03)
>[GCC 4.4.1] on linux2
>Type "help", "copyright", "credits" or "license" for more information.
> >>> from twisted.words.xish import domish
> >>> import copy
> >>> msg = domish.Element(('jabber:client', 'message'))
> >>> msg2 = copy.deepcopy(msg)
>Exception RuntimeError: 'maximum recursion depth exceeded while calling
>a Python object' in <type 'exceptions.AttributeError'> ignored
> >>>
>
>does someone understand why? I'm using twisted 8.2 on ubuntu 9.10. 
>Thank
>you,
>Gabriel

Actually, it looks like it works about equally well on either version. 
While it looks like an exception was raised by deepcopy on Python 2.6, 
notice that the exception was actually *ignored*.  You get back a copy, 
and it even seems to have all the right attributes. ;)

The infinite recursion in deepcopy happens on Python 2.5 as well.  I'm 
not completely sure why it's not being reported, but it probably has to 
do with tiny differences in how deepcopy works.  hasattr is well known 
for swallowing exceptions silently.  The impressive thing is that the 
error is reported at all in Python 2.6.

A good rule of thumb is to assume that types don't support being copied 
like this unless their docs explicitly state that they do.  If you want 
this to be supported, it's probably not too hard to implement.  Feel 
free to file a ticket with a patch. :)

Jean-Paul



From kevin.horn at gmail.com  Thu Dec 17 14:00:43 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 17 Dec 2009 15:00:43 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
Message-ID: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>

Hmmm...I guess my "send an update every week" idea was a little optimistic.
:)

Again haven't had as much time to devote to this as I would have preferred.
More of Glyph's "real life" getting in the way I guess (had a new baby added
to the household last week!), but here's a quick rundown:

- proposal [1] once again updated, though not much...timeline for "Phase 0"
still needs some work

- lore2sphinx tool: some progress, though I'd hoped for more.  Inclusion of
external files (like code samples) now works, though I'm borking leading
whitespace somewhere, so python files are mis-formatted.  Some of the
whitespace handling is improved (nested lists seem to work OK now), but it
needs more work.  I think I have a general plan for how to fix this, but it
just requires some elbow-grease.  I've also done quite a bit of refactoring,
to make my mess of code a bit easier to grok.  Still to do: tables,
citations, footnotes, and some improved handling of <code> tags, as well as
the afore-mentioned whitespace-handling fixes.

- theme: haven't really started this yet, just a bit of research

- Divmod docs: haven't really touched this yet...it's in the queue

- PyOpenSSL docs: I got an email from Georg Brandl, with a pointer to the
tools used to convert the old LaTeX Python docs to Sphinx [2].  According to
Georg, it may need some tweaking, but should pretty much work for converting
the pyOpenSSL docs.  Looking at the code for this has also helped me a bit
with a few minor problems I was having.  So kudos for Georg!  Also, it looks
like the source of the pyOpenSSL docs are indeed in the source tarball, so
hopefully I can make some headway on this pretty soon.

I'm not really speeding along with this project, but I am making some slow
progress.  As the tortoise said: "Slow and steady wins the race!"

Comments and suggestions welcome!

[1] http://twistedsphinx.funsize.net/proposal.html
[2] http://svn.python.org/projects/doctools/converter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091217/2252134e/attachment.html>

From exarkun at twistedmatrix.com  Thu Dec 17 14:46:11 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 17 Dec 2009 21:46:11 -0000
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
Message-ID: <20091217214611.15596.1955000551.divmod.xquotient.414@localhost.localdomain>

On 09:00 pm, kevin.horn at gmail.com wrote:
>Hmmm...I guess my "send an update every week" idea was a little 
>optimistic.
>:)

Hi Kevin,

At least you're still getting something out. :)  Thanks for these.
>Again haven't had as much time to devote to this as I would have 
>preferred.
>More of Glyph's "real life" getting in the way I guess (had a new baby 
>added
>to the household last week!), but here's a quick rundown:

Congrats!
>- proposal [1] once again updated, though not much...timeline for 
>"Phase 0"
>still needs some work
>
>- lore2sphinx tool: some progress, though I'd hoped for more. 
>Inclusion of
>external files (like code samples) now works, though I'm borking 
>leading
>whitespace somewhere, so python files are mis-formatted.  Some of the
>whitespace handling is improved (nested lists seem to work OK now), but 
>it
>needs more work.  I think I have a general plan for how to fix this, 
>but it
>just requires some elbow-grease.  I've also done quite a bit of 
>refactoring,
>to make my mess of code a bit easier to grok.  Still to do: tables,
>citations, footnotes, and some improved handling of <code> tags, as 
>well as
>the afore-mentioned whitespace-handling fixes.
>
>- theme: haven't really started this yet, just a bit of research
>
>- Divmod docs: haven't really touched this yet...it's in the queue
>
>- PyOpenSSL docs: I got an email from Georg Brandl, with a pointer to 
>the
>tools used to convert the old LaTeX Python docs to Sphinx [2]. 
>According to
>Georg, it may need some tweaking, but should pretty much work for 
>converting
>the pyOpenSSL docs.  Looking at the code for this has also helped me a 
>bit
>with a few minor problems I was having.  So kudos for Georg!  Also, it 
>looks
>like the source of the pyOpenSSL docs are indeed in the source tarball, 
>so
>hopefully I can make some headway on this pretty soon.

Feel free to find me on IRC if there's anything in this area that bears 
discussion or that you'd like feedback on.
>I'm not really speeding along with this project, but I am making some 
>slow
>progress.  As the tortoise said: "Slow and steady wins the race!"

So true.  Stick with it and I'm sure you'll get there.

Jean-Paul



From glyph at twistedmatrix.com  Thu Dec 17 18:27:53 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Dec 2009 20:27:53 -0500
Subject: [Twisted-Python] Downpour - new project using Twisted
In-Reply-To: <1260908542.21356.34.camel@jeremy-laptop>
References: <1260908542.21356.34.camel@jeremy-laptop>
Message-ID: <DFA5F53F-1D65-4051-9361-D8AC4BB8F154@twistedmatrix.com>


On Dec 15, 2009, at 3:22 PM, Jeremy Jongsma wrote:

> I just posted my latest project - Downpour, a web-based BitTorrent
> client using twisted and twisted-web.  Feel free to try it out and send
> me any comments.  It hasn't been tested on Windows yet, so any trip
> reports for that would also be appreciated.

This looks like a cool project!  Thanks for using Twisted: always great to have another project we can take a slick screenshot of.

> http://home.jongsma.org/software/downpour/
> 
> Could someone add this to the "Projects Using Twisted" page?

Done!  Thanks for submitting it.  Sorry it took so long :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091217/75ed2d75/attachment.html>

From lists at collab.nl  Thu Dec 17 21:48:57 2009
From: lists at collab.nl (Thijs Triemstra | Collab)
Date: Fri, 18 Dec 2009 04:48:57 +0000
Subject: [Twisted-Python] plugin system
In-Reply-To: <20091215154245.2667.669392555.divmod.xquotient.365@localhost.localdomain>
References: <b302bf880912141548o512f14a4m98ace9f23da22fd2@mail.gmail.com>
	<20091215154245.2667.669392555.divmod.xquotient.365@localhost.localdomain>
Message-ID: <F6988439-DEAC-4121-8161-D8A799EDE491@collab.nl>

On 15 Dec 2009, at 15:42, exarkun at twistedmatrix.com wrote:

> On 14 Dec, 11:48 pm, celord at gmail.com wrote:
>> Guys, I'am new to twisted and I've read the documentation about the
>> plugin system and the components but I can't make it, I really do not
>> get it well, do you guys have any examples there to see if I can get
>> it :)
>>
>> Thanks a lot
>
> Nevow, Axiom, Mantissa, and Quotient all make use of the plugin  
> system.
> eg:
>
> http://divmod.org/trac/browser/trunk/Axiom/twisted/plugins/axiom_plugins.py
>
> Jean-Paul

There's also a example plugin attached to this ticket:
http://twistedmatrix.com/trac/ticket/3281

Cheers,

Thijs

-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20091218/39a16629/attachment.sig>

From glyph at twistedmatrix.com  Thu Dec 17 22:40:43 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 18 Dec 2009 00:40:43 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
Message-ID: <9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>

On Dec 17, 2009, at 4:00 PM, Kevin Horn wrote:

> Hmmm...I guess my "send an update every week" idea was a little optimistic. :)
> 
> Again haven't had as much time to devote to this as I would have preferred.  More of Glyph's "real life" getting in the way I guess (had a new baby added to the household last week!), but here's a quick rundown:

Wait, *my* "real life" is getting in the way?  I would have figured that if my real life were getting in *both* of our ways, I'd be getting a lot more done! ;-).

Thanks for continuing on with this project, and continuing to write these progress reports.  I'm really looking forward to seeing this plan get executed!

Sadly I don't have any feedback for you because it's hard to tell what's changed since the last time.  Do you have a change log or diffs of some kind somewhere?

> [1] http://twistedsphinx.funsize.net/proposal.html
> [2] http://svn.python.org/projects/doctools/converter

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091218/cadfa6ad/attachment.html>

From thatmattbone at gmail.com  Fri Dec 18 00:32:57 2009
From: thatmattbone at gmail.com (Matt Bone)
Date: Fri, 18 Dec 2009 01:32:57 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
Message-ID: <dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>

I

On Dec 17, 2009 11:44 PM, "Glyph Lefkowitz" <glyph at twistedmatrix.com> wrote:

On Dec 17, 2009, at 4:00 PM, Kevin Horn wrote: > Hmmm...I guess my "send an
update every week" idea...
Wait, *my* "real life" is getting in the way?  I would have figured that if
my real life were getting in *both* of our ways, I'd be getting a lot more
done! ;-).

Thanks for continuing on with this project, and continuing to write these
progress reports.  I'm really looking forward to seeing this plan get
executed!

Sadly I don't have any feedback for you because it's hard to tell what's
changed since the last time.  Do you have a change log or diffs of some kind
somewhere?

> [1] http://twistedsphinx.funsize.net/proposal.html > [2]
http://svn.python.org/projects/doctool...

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091218/c62b5894/attachment.html>

From thatmattbone at gmail.com  Fri Dec 18 00:40:49 2009
From: thatmattbone at gmail.com (Matt Bone)
Date: Fri, 18 Dec 2009 01:40:49 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
Message-ID: <dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>

I'm so sorry,  I was trying to express interest in the goings on but
my damn cat walked on the keyboard and sent a blank message.

I'm handy around a text editor/document conversion scripts/sphinx, so
please let me know if there are any simple tasks I can assist with.
Also, I registered for pycon this evening, so please say hello if you
bump into me.  Take care,

--matt

On Fri, Dec 18, 2009 at 1:32 AM, Matt Bone <thatmattbone at gmail.com> wrote:
> I
>
> On Dec 17, 2009 11:44 PM, "Glyph Lefkowitz" <glyph at twistedmatrix.com> wrote:
>
> On Dec 17, 2009, at 4:00 PM, Kevin Horn wrote: > Hmmm...I guess my "send an
> update every week" idea...
>
> Wait, *my* "real life" is getting in the way?  I would have figured that if
> my real life were getting in *both* of our ways, I'd be getting a lot more
> done! ;-).
> Thanks for continuing on with this project, and continuing to write these
> progress reports.  I'm really looking forward to seeing this plan get
> executed!
> Sadly I don't have any feedback for you because it's hard to tell what's
> changed since the last time.  Do you have a change log or diffs of some kind
> somewhere?
>
>> [1] http://twistedsphinx.funsize.net/proposal.html > [2]
>> http://svn.python.org/projects/doctool...
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From twisted at ralphm.ik.nu  Fri Dec 18 06:37:36 2009
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Fri, 18 Dec 2009 14:37:36 +0100
Subject: [Twisted-Python] copy.deepcopy domish.Element works in python
 2.5	but not in 2.6
In-Reply-To: <20091217181113.15596.456256757.divmod.xquotient.407@localhost.localdomain>
References: <4B2A6D28.3030903@arimaz.com>
	<20091217181113.15596.456256757.divmod.xquotient.407@localhost.localdomain>
Message-ID: <1261143456.11064.11.camel@dwaal>

On Thu, 2009-12-17 at 18:11 +0000, exarkun at twistedmatrix.com wrote:
> On 05:40 pm, gabriel.rossetti at arimaz.com wrote:
> >Hello everyone,
> >
> >for some reason copy.deepcopy forks great on a domish.Element on 2.5 
> >but
> >not in 2.6 :
>
> Actually, it looks like it works about equally well on either version. 
> While it looks like an exception was raised by deepcopy on Python 2.6, 
> notice that the exception was actually *ignored*.  You get back a copy, 
> and it even seems to have all the right attributes. ;)
> 
> The infinite recursion in deepcopy happens on Python 2.5 as well.  I'm 
> not completely sure why it's not being reported, but it probably has to 
> do with tiny differences in how deepcopy works.  hasattr is well known 
> for swallowing exceptions silently.  The impressive thing is that the 
> error is reported at all in Python 2.6.
> 
> A good rule of thumb is to assume that types don't support being copied 
> like this unless their docs explicitly state that they do.  If you want 
> this to be supported, it's probably not too hard to implement.  Feel 
> free to file a ticket with a patch. :)

There is an open ticket about this:

  http://twistedmatrix.com/trac/ticket/724

In short: it is probably a bad idea, and I'm curious about the possible
useful use cases.

ralphm






From kevin.horn at gmail.com  Fri Dec 18 10:23:46 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 18 Dec 2009 11:23:46 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
Message-ID: <562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>

On Fri, Dec 18, 2009 at 1:40 AM, Matt Bone <thatmattbone at gmail.com> wrote:

> I'm so sorry,  I was trying to express interest in the goings on but
> my damn cat walked on the keyboard and sent a blank message.
>

If I'd been drinking milk when I read this, it would have come out my nose.
The same thing has actually happened to me. :)


> I'm handy around a text editor/document conversion scripts/sphinx, so
> please let me know if there are any simple tasks I can assist with.
> Also, I registered for pycon this evening, so please say hello if you
> bump into me.  Take care,
>
> --matt
>

Thanks for the offer, I'll probably take you up on it at some point.  If you
(or anyone) would like to go ahead and start work on a Sphinx theme for the
Twisted docs, I think that would be easy to work on in parallel to my own
efforts.  As far as the actual conversion, I think I have ideas for my
remaining issues, it's just a matter of finding the time to work on them.  I
expect another set of eyes would be useful once I get things into a more
understandable state though, if you'd like to volunteer for that.

Sadly I probably won't make it to PyCon this year, though I haven't
_entirely_ ruled out the possibility.  Which really sucks, as it looks like
it will likely be the best ever. :(

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091218/342897be/attachment.html>

From drew.smathers at gmail.com  Fri Dec 18 10:28:38 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Fri, 18 Dec 2009 12:28:38 -0500
Subject: [Twisted-Python] Memcache client issues
In-Reply-To: <95bb10690912170217w3152ca76j45dd0bd6c258554a@mail.gmail.com>
References: <4B6E356B-762D-429A-906C-280E2C4F88DA@chown.lv>
	<95bb10690912170217w3152ca76j45dd0bd6c258554a@mail.gmail.com>
Message-ID: <368574aa0912180928r40d91fcerc8cc58e4754986ed@mail.gmail.com>

On Thu, Dec 17, 2009 at 5:17 AM, Reza Lotun <rlotun at gmail.com> wrote:

> Hi,
>
> You might want to take a look at the txmemcache project:
> https://launchpad.net/tx.memcache
>
>
Please proceed with utmost caution if you choose to use tx.memcache - I
wrote this for a small utility script for a project that got axed, and I'm
not using memcache for any production apps now.  So, due to it not being
fully complete, tested in production, or even unit tested, expect the same
level of grandness in terms of stability.

The hashing function is pluggable, and it worked fine for my purposes.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091218/a2061153/attachment.html>

From kevin.horn at gmail.com  Fri Dec 18 10:29:37 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 18 Dec 2009 11:29:37 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
Message-ID: <562bcc10912180929m1f8c4390l976462b525c960c1@mail.gmail.com>

On Thu, Dec 17, 2009 at 11:40 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

> On Dec 17, 2009, at 4:00 PM, Kevin Horn wrote:
>
> Hmmm...I guess my "send an update every week" idea was a little optimistic.
> :)
>
> Again haven't had as much time to devote to this as I would have
> preferred.  More of Glyph's "real life" getting in the way I guess (had a
> new baby added to the household last week!), but here's a quick rundown:
>
>
> Wait, *my* "real life" is getting in the way?  I would have figured that if
> my real life were getting in *both* of our ways, I'd be getting a lot more
> done! ;-).
>

I was referring to the Lefkowitz Definition of Real Life(tm):

Real life: N. That which interferes with the generation of nifty open-source
code.

:)


> Thanks for continuing on with this project, and continuing to write these
> progress reports.  I'm really looking forward to seeing this plan get
> executed!
>
> Sadly I don't have any feedback for you because it's hard to tell what's
> changed since the last time.  Do you have a change log or diffs of some kind
> somewhere?
>

Well, I've got the code (and proposal) in an SVN repos, but it's not public,
and I can't really make it so (long story). I've got an item on my TODO list
to extract it from there and put it up someplace else, but I haven't gotten
to it yet...

In the meantime, I can post a diff of the proposal if you like, or a part of
my SVN log, but you really haven't missed anything significant on the
proposal, I'm afraid.  Mostly just a minor cleanup.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091218/e4294455/attachment.html>

From drew.smathers at gmail.com  Fri Dec 18 10:32:42 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Fri, 18 Dec 2009 12:32:42 -0500
Subject: [Twisted-Python] Memcache client issues
In-Reply-To: <4B6E356B-762D-429A-906C-280E2C4F88DA@chown.lv>
References: <4B6E356B-762D-429A-906C-280E2C4F88DA@chown.lv>
Message-ID: <368574aa0912180932xbeaf193gd4a3f69f87e4ea06@mail.gmail.com>

On Wed, Dec 16, 2009 at 2:34 PM, MārisR <maris at chown.lv> wrote:

> Hello!
> I'm trying to write small tcp server, which doing some stuff with memcache.
> Everything was fine until I start it on production, after few minutes I got
> to rollback to old one. My script got max open files limit :( After  liitle
> inspection, I saw that, new connection to my daemon opens new connection to
> memcache and after disconnect its not closed and on new connections is not
> reused. I could not find how to disconnect form memcache after processing is
> done, or how to reuse open connections. Maybe someone has some good example
> of this? Thanks!
>


Sorry to post twice on this, but setting aside tx.memcache or other
abstractions over the memcache client, I never had any problems with leaking
connections; that is tx.memcache wasn't written to address such a problem,
so I don't think using it would necessarily solve your issues.  Can you post
some code for a short program that reproduces the problem you're describing?

-Drew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091218/18a087c1/attachment.html>

From kevin.horn at gmail.com  Fri Dec 18 11:46:32 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 18 Dec 2009 12:46:32 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
Message-ID: <562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>

On Fri, Dec 18, 2009 at 11:23 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> On Fri, Dec 18, 2009 at 1:40 AM, Matt Bone <thatmattbone at gmail.com> wrote:
>
>> I'm so sorry,  I was trying to express interest in the goings on but
>> my damn cat walked on the keyboard and sent a blank message.
>>
>
> If I'd been drinking milk when I read this, it would have come out my
> nose.  The same thing has actually happened to me. :)
>
>
>> I'm handy around a text editor/document conversion scripts/sphinx, so
>> please let me know if there are any simple tasks I can assist with.
>> Also, I registered for pycon this evening, so please say hello if you
>> bump into me.  Take care,
>>
>> --matt
>>
>
> Thanks for the offer, I'll probably take you up on it at some point.  If
> you (or anyone) would like to go ahead and start work on a Sphinx theme for
> the Twisted docs, I think that would be easy to work on in parallel to my
> own efforts.  As far as the actual conversion, I think I have ideas for my
> remaining issues, it's just a matter of finding the time to work on them.  I
> expect another set of eyes would be useful once I get things into a more
> understandable state though, if you'd like to volunteer for that.
>
> Sadly I probably won't make it to PyCon this year, though I haven't
> _entirely_ ruled out the possibility.  Which really sucks, as it looks like
> it will likely be the best ever. :(
>
> Kevin Horn
>
>
>
Other tasks that can help move this forward, but that don't require work on
the actual conversion code:

- identify branches which have lore patches in them
- identify tickets which propose to fix/modify Lore functionality
- identify wiki pages that need to be changed, and the necessary changes
- make suggestions on the overall conversion process, as documented in the
proposal.


If anyone is interested in helping out, just say so here, or drop me a line
off-list.

I'm also happy to send a copy of the code I have so far to anyone who's
interested...just send me an email off list, and I'll send you a tarball.

And if anyone has suggestions about where/how to share the code someplace,
I'm happy to listen to those too.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091218/71696b99/attachment.html>

From termim at gmail.com  Fri Dec 18 12:51:50 2009
From: termim at gmail.com (Mikhail Terekhov)
Date: Fri, 18 Dec 2009 14:51:50 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
Message-ID: <12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>

On Fri, Dec 18, 2009 at 1:46 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> I'm also happy to send a copy of the code I have so far to anyone who's
> interested...just send me an email off list, and I'll send you a tarball.
>
What about putting it into Twisted's SVN, i.e. into sandbox?

Regards,
-- 
Mikhail Terekhov



From ssteinerx at gmail.com  Fri Dec 18 13:07:27 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Fri, 18 Dec 2009 15:07:27 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
Message-ID: <3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>


On Dec 18, 2009, at 2:51 PM, Mikhail Terekhov wrote:

> On Fri, Dec 18, 2009 at 1:46 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>> 
>> I'm also happy to send a copy of the code I have so far to anyone who's
>> interested...just send me an email off list, and I'll send you a tarball.
>> 
> What about putting it into Twisted's SVN, i.e. into sandbox?

Or, pop it up on BitBucket?

S




From kevin.horn at gmail.com  Fri Dec 18 13:37:39 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 18 Dec 2009 14:37:39 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
Message-ID: <562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>

On Fri, Dec 18, 2009 at 2:07 PM, ssteinerX at gmail.com <ssteinerx at gmail.com>wrote:

>
> On Dec 18, 2009, at 2:51 PM, Mikhail Terekhov wrote:
>
> > On Fri, Dec 18, 2009 at 1:46 PM, Kevin Horn <kevin.horn at gmail.com>
> wrote:
> >>
> >> I'm also happy to send a copy of the code I have so far to anyone who's
> >> interested...just send me an email off list, and I'll send you a
> tarball.
> >>
> > What about putting it into Twisted's SVN, i.e. into sandbox?
>
> Or, pop it up on BitBucket?
>
> S
>
>
I don't currently have access to Twisted SVN (as far as I know, anyway), but
if the Twisted guys want to give me access, I'm fine with that.

Otherwise, BitBucket is probably the best option, though it'll be a little
bit of a learning curve for me.  I've used Mercurial a little bit, but never
for a "real" project, and I've never used BiBucket (though I think I have an
account, for some reason).

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091218/8b219033/attachment-0001.html>

From glyph at twistedmatrix.com  Fri Dec 18 13:51:51 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 18 Dec 2009 15:51:51 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
Message-ID: <8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>


On Dec 18, 2009, at 3:37 PM, Kevin Horn wrote:

> I don't currently have access to Twisted SVN (as far as I know, anyway), but if the Twisted guys want to give me access, I'm fine with that.

I'm not particularly opposed to it, but at this stage I don't think it would help very much either.  The sandbox is a crummy place to stage stuff.

> Otherwise, BitBucket is probably the best option, though it'll be a little bit of a learning curve for me.  I've used Mercurial a little bit, but never for a "real" project, and I've never used BiBucket (though I think I have an account, for some reason).

We already have an active mirror of Twisted on launchpad <https://code.launchpad.net/twisted>, which might be easier to get started with if you want to make a branch for the *output* of the conversion.  lore2sphinx itself could probably live anywhere, though.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091218/b3bd48b0/attachment.html>

From ssteinerx at gmail.com  Fri Dec 18 14:50:13 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Fri, 18 Dec 2009 16:50:13 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
Message-ID: <848340B6-821D-47C4-9465-71E653271EED@gmail.com>

> Otherwise, BitBucket is probably the best option, though it'll be a little bit of a learning curve for me.  I've used Mercurial a little bit, but never for a "real" project, and I've never used BiBucket (though I think I have an account, for some reason).

I'll give you a hand with BitBucket if you'd like; just contact me off-list.

S




From kevin.horn at gmail.com  Fri Dec 18 14:45:44 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 18 Dec 2009 15:45:44 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<9FE0E2E1-9A90-49ED-9C0F-CC78E7FDD7A1@twistedmatrix.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
	<8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>
Message-ID: <562bcc10912181345jb3084b7p4baecb7351c4d565@mail.gmail.com>

On Fri, Dec 18, 2009 at 2:51 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Dec 18, 2009, at 3:37 PM, Kevin Horn wrote:
>
> I don't currently have access to Twisted SVN (as far as I know, anyway),
> but if the Twisted guys want to give me access, I'm fine with that.
>
>
> I'm not particularly opposed to it, but at this stage I don't think it
> would help very much either.  The sandbox is a crummy place to stage stuff.
>
> Otherwise, BitBucket is probably the best option, though it'll be a little
> bit of a learning curve for me.  I've used Mercurial a little bit, but never
> for a "real" project, and I've never used BiBucket (though I think I have an
> account, for some reason).
>
>
> We already have an active mirror of Twisted on launchpad <
> https://code.launchpad.net/twisted>, which might be easier to get started
> with if you want to make a branch for the *output* of the conversion.
>  lore2sphinx itself could probably live anywhere, though.
>
>
I think I'll probably end up putting lore2sphinx up on BitBucket...when I
get around to it.  Hopefully I'll get around to doing this in the next week
or so, but with the holidays coming up, I wouldn't hold my breath. ;)

I don't see a whole lot of point in putting the output into any sort of
version control at this point, since the idea is not to edit it at this
stage.  I'll continue to put up my results at
http://twistedsphinx.funsize.net periodically just for people to look at,
though.

Once the automated conversion part of this is "done", it will make sense
(and indeed be necessary) to VC the Sphinx sources, though.

BTW...footnotes work now. :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091218/5ffa3f77/attachment.html>

From termim at gmail.com  Fri Dec 18 15:51:18 2009
From: termim at gmail.com (Mikhail Terekhov)
Date: Fri, 18 Dec 2009 17:51:18 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912181345jb3084b7p4baecb7351c4d565@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<dfbf29b00912172332y4be651c1o6067d54736ef870c@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
	<8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>
	<562bcc10912181345jb3084b7p4baecb7351c4d565@mail.gmail.com>
Message-ID: <12aaa0810912181451i333ef926k974af83233627bcf@mail.gmail.com>

On Fri, Dec 18, 2009 at 4:45 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
> I don't see a whole lot of point in putting the output into any sort of
> version control at this point, since the idea is not to edit it at this
> stage.  I'll continue to put up my results at
> http://twistedsphinx.funsize.net periodically just for people to look at,
> though.
>

May be then attach it to some ticket in Trac?

Regards,
-- 
Mikhail Terekhov



From kevin.horn at gmail.com  Fri Dec 18 16:25:35 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 18 Dec 2009 17:25:35 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <12aaa0810912181451i333ef926k974af83233627bcf@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<dfbf29b00912172340l12a6217do9f587d789c69aaa7@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
	<8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>
	<562bcc10912181345jb3084b7p4baecb7351c4d565@mail.gmail.com>
	<12aaa0810912181451i333ef926k974af83233627bcf@mail.gmail.com>
Message-ID: <562bcc10912181525o309609c4q77074172818fe830@mail.gmail.com>

On Fri, Dec 18, 2009 at 4:51 PM, Mikhail Terekhov <termim at gmail.com> wrote:

> On Fri, Dec 18, 2009 at 4:45 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
> > I don't see a whole lot of point in putting the output into any sort of
> > version control at this point, since the idea is not to edit it at this
> > stage.  I'll continue to put up my results at
> > http://twistedsphinx.funsize.net periodically just for people to look
> at,
> > though.
> >
>
> May be then attach it to some ticket in Trac?
>
>
I could, but I don't see a whole lot of point at this stage, since the
output changes every time I update and run my conversion script.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091218/ff02cd92/attachment.html>

From rlotun at gmail.com  Fri Dec 18 17:35:17 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Sat, 19 Dec 2009 00:35:17 +0000
Subject: [Twisted-Python] Memcache client issues
In-Reply-To: <368574aa0912180928r40d91fcerc8cc58e4754986ed@mail.gmail.com>
References: <4B6E356B-762D-429A-906C-280E2C4F88DA@chown.lv>
	<95bb10690912170217w3152ca76j45dd0bd6c258554a@mail.gmail.com>
	<368574aa0912180928r40d91fcerc8cc58e4754986ed@mail.gmail.com>
Message-ID: <95bb10690912181635m37672afdsa584e3b8d730e8d@mail.gmail.com>

Hi Drew,

> Please proceed with utmost caution if you choose to use tx.memcache - I
> wrote this for a small utility script for a project that got axed, and I'm
> not using memcache for any production apps now.  So, due to it not being
> fully complete, tested in production, or even unit tested, expect the same
> level of grandness in terms of stability.

Thanks for writing it, by the way. When I first got around to playing
with memcached in my Twisted app, your project was really the only
thing out there that I could find that spoke Twisted and memcached. It
was a great place to *start* in terms of customizing something for my
own needs.

> The hashing function is pluggable, and it worked fine for my purposes.

Well, the default hashing function is quite slow. If I was dealing
with a Twisted-only memcached integration, I would probably use the
built-in python hash function. If I were integrating with other apps
sharing the same memcached pool - like a Django web app - I would  use
the python-memcache server hash for sure.

Cheers,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun



From exarkun at twistedmatrix.com  Sat Dec 19 22:05:12 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 20 Dec 2009 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1261285512.69.346908633@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091220/021e0e42/attachment-0001.html>

From jml at mumak.net  Sun Dec 20 22:03:07 2009
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 21 Dec 2009 16:03:07 +1100
Subject: [Twisted-Python] Coding standard question: flowing long imports
	with parens
Message-ID: <d06a5cd30912202103n5a86dba9tc31eb3488001eab8@mail.gmail.com>

Hello,

This is a very unimportant question, and I have no stake in the
outcome beyond curiosity. It's bikeshed potential is high, and I'd
like to avoid that if possible.

The "Whitespace" section of the coding standard[1] says:

"""
To handle long import lines, please repeat the import like this:

from very.long.package import foo, bar, baz
from very.long.package import qux, quux, quuux
"""

Now that we no longer support Python 2.3, may we also allow imports in
the following style?

  from very.long.package import (
    bar,
    foo,
    )

I don't care so much about the newlines, I'm mostly interested in
using parens to avoid repeating the long package names. That said,
newline separation and alpha-sorted imports greatly reduce the
probability of conflicts.

jml



From terry at jon.es  Mon Dec 21 06:30:28 2009
From: terry at jon.es (Terry Jones)
Date: Mon, 21 Dec 2009 14:30:28 +0100
Subject: [Twisted-Python] A resizable cooperator class for queuing and
	dispatching jobs
In-Reply-To: Your message at 10:09:16 on Friday, 11 December 2009
References: <19231.8959.296355.40332@jon.es> <4B207222.6070008@krondo.com>
	<19232.50673.973763.680203@jon.es> <4B21BE48.9090205@krondo.com>
	<19234.12473.915610.485018@jon.es>
	<57016BCA-9412-4D2E-BAD7-AF5F611265AC@gmail.com>
Message-ID: <19247.30836.658531.186499@jon.es>

I forgot to mention that I put the code for this class onto Launchpad:
https://launchpad.net/txrdq

Terry



From foom at fuhm.net  Mon Dec 21 08:20:50 2009
From: foom at fuhm.net (James Y Knight)
Date: Mon, 21 Dec 2009 10:20:50 -0500
Subject: [Twisted-Python] Coding standard question: flowing long imports
	with parens
In-Reply-To: <d06a5cd30912202103n5a86dba9tc31eb3488001eab8@mail.gmail.com>
References: <d06a5cd30912202103n5a86dba9tc31eb3488001eab8@mail.gmail.com>
Message-ID: <2A3E9F67-B4B2-4CCB-8D10-F74E68A1D7E5@fuhm.net>

On Dec 21, 2009, at 12:03 AM, Jonathan Lange wrote:
> Now that we no longer support Python 2.3, may we also allow imports in
> the following style?
>
>  from very.long.package import (
>    bar,
>    foo,
>    )


Separating "from X import" and "Y" over a newline totally breaks  
grepping for imported modules. I'd not use it myself, purely because  
of that, except perhaps when the "Y"s are functions in a module,  
rather than modules.

James




From glyph at twistedmatrix.com  Mon Dec 21 09:10:19 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 21 Dec 2009 11:10:19 -0500
Subject: [Twisted-Python] Coding standard question: flowing long imports
	with parens
In-Reply-To: <2A3E9F67-B4B2-4CCB-8D10-F74E68A1D7E5@fuhm.net>
References: <d06a5cd30912202103n5a86dba9tc31eb3488001eab8@mail.gmail.com>
	<2A3E9F67-B4B2-4CCB-8D10-F74E68A1D7E5@fuhm.net>
Message-ID: <C40FEE1A-D9C1-467D-BA46-E8CD196D7619@twistedmatrix.com>


On Dec 21, 2009, at 10:20 AM, James Y Knight wrote:

> On Dec 21, 2009, at 12:03 AM, Jonathan Lange wrote:
>> Now that we no longer support Python 2.3, may we also allow imports in
>> the following style?
>> 
>> from very.long.package import (
>>   bar,
>>   foo,
>>   )
> 
> 
> Separating "from X import" and "Y" over a newline totally breaks  
> grepping for imported modules. I'd not use it myself, purely because  
> of that, except perhaps when the "Y"s are functions in a module,  
> rather than modules.

I'm a fan of this style, because it's easier to read and it involves a lot less duplication... at the same time, I can see the 'grep' case.  Anybody want to write a tool which uses the AST to look for name imports?  This would generally be handy anyway :).




From robert.kern at gmail.com  Mon Dec 21 10:27:08 2009
From: robert.kern at gmail.com (Robert Kern)
Date: Mon, 21 Dec 2009 11:27:08 -0600
Subject: [Twisted-Python] Coding standard question: flowing long imports
	with parens
In-Reply-To: <C40FEE1A-D9C1-467D-BA46-E8CD196D7619@twistedmatrix.com>
References: <d06a5cd30912202103n5a86dba9tc31eb3488001eab8@mail.gmail.com>	<2A3E9F67-B4B2-4CCB-8D10-F74E68A1D7E5@fuhm.net>
	<C40FEE1A-D9C1-467D-BA46-E8CD196D7619@twistedmatrix.com>
Message-ID: <hgob5f$m7m$1@ger.gmane.org>

On 2009-12-21 10:10 AM, Glyph Lefkowitz wrote:
>
> On Dec 21, 2009, at 10:20 AM, James Y Knight wrote:
>
>> On Dec 21, 2009, at 12:03 AM, Jonathan Lange wrote:
>>> Now that we no longer support Python 2.3, may we also allow imports in
>>> the following style?
>>>
>>> from very.long.package import (
>>>    bar,
>>>    foo,
>>>    )
>>
>>
>> Separating "from X import" and "Y" over a newline totally breaks
>> grepping for imported modules. I'd not use it myself, purely because
>> of that, except perhaps when the "Y"s are functions in a module,
>> rather than modules.
>
> I'm a fan of this style, because it's easier to read and it involves a lot less duplication... at the same time, I can see the 'grep' case.  Anybody want to write a tool which uses the AST to look for name imports?  This would generally be handy anyway :).

Done.

   http://pypi.python.org/pypi/grin
   https://svn.enthought.com/svn/sandbox/grin/trunk/examples/grinimports.py

grin is a mostly general purpose grepping tool that I wrote, slightly 
specialized for grepping code in VCS checkouts. grinimports.py is an example of 
using it as a library. It uses the AST to normalize import statements. E.g.

   from very.long.package import bar, foo
   import os, sys

turns into

   from very.long.package import bar
   from very.long.package import foo
   import os
   import sys

The grep pattern then runs over the normalized text.

I find this much more robust than grepping the plain text. With all of the 
variations in the import syntax, it's difficult to find a grep pattern that gets 
all of the desired imports and rejects enough of the non-import statements. A 
side effect is that it's easy to get a nice list of all of the import statements 
in your codebase.

   $ grinimports.py --no-color ''

-- 
Robert Kern

"I have come to believe that the whole world is an enigma, a harmless enigma
  that is made terrible by our own mad attempt to interpret it as though it had
  an underlying truth."
   -- Umberto Eco




From landreville at deadtreepages.com  Mon Dec 21 10:36:35 2009
From: landreville at deadtreepages.com (Landreville)
Date: Mon, 21 Dec 2009 12:36:35 -0500
Subject: [Twisted-Python] Websites down
Message-ID: <9d748c780912210936j5ab84ef3q401252761a4b40b6@mail.gmail.com>

I'm getting an error from http://twistedmatrix.com

Error 503 Service Unavailable

Service Unavailable

Guru Meditation:

XID: 1274684191

Varnish



From glyph at twistedmatrix.com  Mon Dec 21 17:55:42 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 21 Dec 2009 19:55:42 -0500
Subject: [Twisted-Python] Coding standard question: flowing long imports
	with parens
In-Reply-To: <hgob5f$m7m$1@ger.gmane.org>
References: <d06a5cd30912202103n5a86dba9tc31eb3488001eab8@mail.gmail.com>	<2A3E9F67-B4B2-4CCB-8D10-F74E68A1D7E5@fuhm.net>
	<C40FEE1A-D9C1-467D-BA46-E8CD196D7619@twistedmatrix.com>
	<hgob5f$m7m$1@ger.gmane.org>
Message-ID: <5DE8BA4C-76F3-4F6C-B35A-4B7EA96AED1A@twistedmatrix.com>


On Dec 21, 2009, at 12:27 PM, Robert Kern wrote:

> On 2009-12-21 10:10 AM, Glyph Lefkowitz wrote:
>> 
>> On Dec 21, 2009, at 10:20 AM, James Y Knight wrote:
>>> On Dec 21, 2009, at 12:03 AM, Jonathan Lange wrote:
>>>> Now that we no longer support Python 2.3, may we also allow imports in
>>>> the following style?
>>>> from very.long.package import (
>>>>   bar,
>>>>   foo)
>>> Separating "from X import" and "Y" over a newline totally breaks
>>> grepping for imported modules. 
>> I'm a fan of this style, because it's easier to read and it involves a lot less duplication(...) Anybody want to write a tool which uses the AST to look for name imports?
> Done.

Well, that's certainly a good argument in favor of the abbreviated style, then! :)

> I find this much more robust than grepping the plain text. With all of the 
> variations in the import syntax, it's difficult to find a grep pattern that gets 
> all of the desired imports and rejects enough of the non-import statements. A 
> side effect is that it's easy to get a nice list of all of the import statements 
> in your codebase.
> 
>   $ grinimports.py --no-color ''

This is handy, and a bit more reliable than an unstructured import, but what I *really* want is the ability to say "what depends on this", where "this" is a fully-qualified dotted name in Python.  The weakness of grinimports seems to be that for each additional level of nesting, you need to add an additional regular expression; plus, depending on something could either be importing it, or accessing it as an attribute of a different name that was imported.  Similarly, I have been missing smalltalk's "all senders of" and "all implementors of" functionality since I discovered it many years ago, despite the fact that I never really used Smalltalk for much.  Any chance you have any of those lying around in a different examples directory?




From general at vultaire.net  Tue Dec 22 00:14:45 2009
From: general at vultaire.net (Paul Goins)
Date: Tue, 22 Dec 2009 16:14:45 +0900
Subject: [Twisted-Python] Question about TAC apps and TCPClient/Server vs
	reactor.connect/listenTCP
Message-ID: <4B3071E5.5050506@vultaire.net>

I'm embarrassed to ask about this, but I think my understanding may be
unclear about the differences in how the various TCP connection
functions work in Twisted.

For the record, I have read the docs at
http://twistedmatrix.com/documents/current/core/howto/application.html.
 But if I missed something key there, please point it out.

Got a TAC application, currently implemented using several TCPServer
objects.  Got a web service running as the main app, with MySQL and AMQP
connections also set up the same way, and probably I'll be adding a
memcached TCPClient in the near future.

The issue is this: I now need to support selectively turning on and off
these various components of the software.  Also, some services may not
always be needed, so specifying as part of the service hierarchy doesn't
seem correct.

Any suggestions of how to do this?  Should I be specifying only "core"
stuff as services of the application object, and connecting the others
via reactor.connectTCP/listenTCP as needed?  Can I add to and remove
services from the application object once the reactor starts?

Thanks.

- Paul



From andrew at bemusement.org  Tue Dec 22 00:39:08 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 22 Dec 2009 18:39:08 +1100
Subject: [Twisted-Python] Question about TAC apps and TCPClient/Server
 vs reactor.connect/listenTCP
In-Reply-To: <4B3071E5.5050506@vultaire.net>
References: <4B3071E5.5050506@vultaire.net>
Message-ID: <20091222073908.GA6351@steerpike.home.puzzling.org>

Paul Goins wrote:
[...]
> 
> Any suggestions of how to do this?  Should I be specifying only "core"
> stuff as services of the application object, and connecting the others
> via reactor.connectTCP/listenTCP as needed?  Can I add to and remove
> services from the application object once the reactor starts?

Yes, you can add and remove services from the application object once
the reactor starts.

To remove a service, use the disownServiceParent method of the service
(as suggested by the docstring of
http://twistedmatrix.com/documents/current/api/twisted.application.service.IServiceCollection.html#removeService).
The docstrings aren't 100% explicit about this, but that will stop the
service.  As you might guess, you can add services with setServiceParent
at any time too.

That said, if plain connectTCP/listenTCP are more convenient for you
than the corresponding IService implementations, then feel free to use
them instead.

-Andrew.




From robert.kern at gmail.com  Tue Dec 22 10:19:11 2009
From: robert.kern at gmail.com (Robert Kern)
Date: Tue, 22 Dec 2009 11:19:11 -0600
Subject: [Twisted-Python] Coding standard question: flowing long imports
	with parens
In-Reply-To: <5DE8BA4C-76F3-4F6C-B35A-4B7EA96AED1A@twistedmatrix.com>
References: <d06a5cd30912202103n5a86dba9tc31eb3488001eab8@mail.gmail.com>	<2A3E9F67-B4B2-4CCB-8D10-F74E68A1D7E5@fuhm.net>	<C40FEE1A-D9C1-467D-BA46-E8CD196D7619@twistedmatrix.com>	<hgob5f$m7m$1@ger.gmane.org>
	<5DE8BA4C-76F3-4F6C-B35A-4B7EA96AED1A@twistedmatrix.com>
Message-ID: <hgqv2f$bpa$1@ger.gmane.org>

On 2009-12-21 18:55 PM, Glyph Lefkowitz wrote:

> This is handy, and a bit more reliable than an unstructured import, but what I *really* want is the ability to say "what depends on this", where "this" is a fully-qualified dotted name in Python.  The weakness of grinimports seems to be that for each additional level of nesting, you need to add an additional regular expression; plus, depending on something could either be importing it, or accessing it as an attribute of a different name that was imported.  Similarly, I have been missing smalltalk's "all senders of" and "all implementors of" functionality since I discovered it many years ago, despite the fact that I never really used Smalltalk for much.  Any chance you have any of those lying around in a different examples directory?

Not from me:

   http://furius.ca/snakefood/

I'm not sure there is anything you can do about references like "import twisted; 
twisted.python.versions.Version", but snakefood should handle relative imports 
mostly correctly.

-- 
Robert Kern

"I have come to believe that the whole world is an enigma, a harmless enigma
  that is made terrible by our own mad attempt to interpret it as though it had
  an underlying truth."
   -- Umberto Eco




From kevin.horn at gmail.com  Tue Dec 22 15:15:35 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 22 Dec 2009 16:15:35 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912181525o309609c4q77074172818fe830@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
	<8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>
	<562bcc10912181345jb3084b7p4baecb7351c4d565@mail.gmail.com>
	<12aaa0810912181451i333ef926k974af83233627bcf@mail.gmail.com>
	<562bcc10912181525o309609c4q77074172818fe830@mail.gmail.com>
Message-ID: <562bcc10912221415g4acf7375qc74826231d367396@mail.gmail.com>

BTW, lore2sphinx and accompanying Sphinx skeleton project now up on
bitbucket here:
http://bitbucket.org/khorn/lore2sphinx/

Thanks to ssteinerX for guiding me through the process.

Enjoy!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091222/1c47b158/attachment.html>

From lists at collab.nl  Wed Dec 23 18:06:32 2009
From: lists at collab.nl (Thijs Triemstra | Collab)
Date: Thu, 24 Dec 2009 02:06:32 +0100
Subject: [Twisted-Python] Decide on and document Python version support
	policy
Message-ID: <D241023D-2FE8-4EDE-8664-3D9EBA975BD6@collab.nl>

So there's ticket #1234 to deal with, and since Python 2.3 support for Twisted recently seems to have been dropped, I wonder what the policy should be?

Cheers,

Thijs

[1] http://twistedmatrix.com/trac/ticket/2541


From exarkun at twistedmatrix.com  Wed Dec 23 20:26:38 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 24 Dec 2009 03:26:38 -0000
Subject: [Twisted-Python] Decide on and document Python version
	support	policy
In-Reply-To: <D241023D-2FE8-4EDE-8664-3D9EBA975BD6@collab.nl>
References: <D241023D-2FE8-4EDE-8664-3D9EBA975BD6@collab.nl>
Message-ID: <20091224032638.15596.706190002.divmod.xquotient.530@localhost.localdomain>

On 01:06 am, lists at collab.nl wrote:
>So there's ticket #1234 to deal with, and since Python 2.3 support for 
>Twisted recently seems to have been dropped, I wonder what the policy 
>should be?

I don't know what should be done to resolve the ticket.  Here's why we 
dropped Python 2.3 support post-9.0, though:

  * Developers complain from time to time about having to support Python 
2.3

  * Running builders for the upcoming Python 2.7 release is going to 
over-tax our build slave farm.  Dropping Python 2.3 gives us *little* 
breathing room here (but we're still short on, eg, Windows, where we 
haven't been testing Python 2.3 for quite a while anyway).

  * No reasonably current releases of mainstream platforms that I'm aware 
of are still bound to Python 2.3.

Jean-Paul



From tim at commsecure.com.au  Wed Dec 23 21:17:40 2009
From: tim at commsecure.com.au (Tim Allen)
Date: Thu, 24 Dec 2009 15:17:40 +1100
Subject: [Twisted-Python] Decide on and document Python version	support
 policy
In-Reply-To: <20091224032638.15596.706190002.divmod.xquotient.530@localhost.localdomain>
References: <D241023D-2FE8-4EDE-8664-3D9EBA975BD6@collab.nl>
	<20091224032638.15596.706190002.divmod.xquotient.530@localhost.localdomain>
Message-ID: <4B32EB64.6050104@commsecure.com.au>

On 12/24/2009 02:26 PM, exarkun at twistedmatrix.com wrote:
>    * No reasonably current releases of mainstream platforms that I'm aware
> of are still bound to Python 2.3.

http://www.redhat.com/security/updates/errata/

RHEL4 is still bound to Python 2.3, and only enters the "production 3" 
phase (also known as "please, please upgrade") in 2009Q4, but is 
supported for "qualified security errata of important or critical impact 
and selected mission critical bug fixes" until February 29, 2012.

I suspect most potential and current Twisted users on RHEL4 or CentOS4 
are either using an existing version of Twisted that still works with 
Python 2.3, or already planning on upgrading to RHEL5, so "Twisted drops 
support for old versions of Python when the associated RHEL release 
enters Production 3" seems a pretty reasonable policy.

RHEL5 with Python 2.4 enters Production 3 "no earlier than Q1 of 2012". 
If we're lucky, RHEL6 will come with Python 2.6 or even 2.7 rather than 2.5.



From screwtape at froup.com  Wed Dec 23 22:37:47 2009
From: screwtape at froup.com (Tim Allen)
Date: Thu, 24 Dec 2009 16:37:47 +1100
Subject: [Twisted-Python] Some news about currently-pending code-reviews
Message-ID: <20091224053747.GC1637@thristian.org>

First, a public service announcement about code-reviews: I'm not
a Twisted Developer, I'm just a guy who submitted a patch and got talked
into helping out by reviewing other people's Twisted patches while I was
waiting for other people to review mine. You don't have to be a Twisted
expert to help out, and don't worry about whether you're experienced
enough to spot every possible problem - most patches get reviewed *at
least* two or three times by different people, and every problem you
pick up and the developer addresses is one less issue the next reviewer
has to think about.

As I've started reviewing over the past week or two, the developers
whose code I've reviewed and the regulars in the #twisted IRC channel
have all been super-helpful, and I highly recommend code-reviewing as
a pleasant way to spend an idle afternoon. Everything you need to know
to get started should be listed here:

    http://twistedmatrix.com/trac/wiki/ReviewProcess

----------------------------------------------------------------------

As I mentioned above, I've been doing Twisted code-reviews recently, and
I've seen a few tickets in particular I thought the general Twisted
community might like to know about, if not help out with. :)


http://twistedmatrix.com/trac/ticket/3956
Add arraysize option to runQuery in adbapi

 - The "arraysize" property is the only writable cursor property defined
   by DBAPI2. Setting it can make the .fetchall() method faster with
   some DB modules, but Twisted's adbapi module offers no way to set it.
 - This ticket has a patch that adds an "cp_arraysize" keyword argument
   to ConnectionPool.runQuery() to set the .arraysize property, but this
   could interfere with DB modules that accept a "cp_arraysize" keyword
   parameter to cursor.execute().
 - I looked up the API docs for as many Python DB modules as I could
   think of, and none of them attach any significance to
   a "cp_arraysize" keyword parameter.
 - However, at least cx_Oracle supports using keyword parameters for
   populating parameterised queries, like this:

    cursor.execute("select :name from dual;", name="Fred")

So, my questions to the Twisted community are:
 - How many of you are using adbapi.ConnectionPool with cx_Oracle, or
   another DB module that supports arbitrary keyword arguments to
   cursor.execute?
 - Of those, how many of you are using parameterised queries or prepared
   statements with placeholders named "arraysize" or "cp_arraysize"?


http://twistedmatrix.com/trac/ticket/4138
A fresh Twisted checkout should support "setup.py sdist"

 - Occasionally people ask about building RPMs of Twisted with
   "./setup.py bdist_rpm"; this ticket is the first step in getting that
   working - the rest of the process is #1696.
 - I'm not sure if it helps with other kinds of bdist, like
   "bdist_wininst" or "bdist_msi" - if it does, and you've been waiting
   for that, then you might want to help review the code and check it
   works properly on your platform!


http://twistedmatrix.com/trac/ticket/4004
subunit reporter. FTW.

 - This ticket adds another test-reporter to Twisted Trial, one that
   outputs results in a format that can be parsed by the tools in the
   third-party "subunit" project, https://launchpad.net/subunit
 - Among other things, this would help integrate Python tests with test
   results from other systems (tap2subunit, subunit2junitxml), compare
   the results of different test-runs (subunit-diff), and enable cute
   GUI-based test-runners (subunit2gtk).
 - If subunit sounds like a tool you would find useful, you might want
   to help review the code!



From grickert at coldstorage.com  Thu Dec 24 07:41:11 2009
From: grickert at coldstorage.com (Gerrat Rickert)
Date: Thu, 24 Dec 2009 09:41:11 -0500
Subject: [Twisted-Python] Some news about currently-pending code-reviews
In-Reply-To: <20091224053747.GC1637@thristian.org>
References: <20091224053747.GC1637@thristian.org>
Message-ID: <BB13E4C4D649234F84A01F6DF64BB87F050E8AA0@ccs-ex01.coldstorage.com>

[snip]
>http://twistedmatrix.com/trac/ticket/3956
>Add arraysize option to runQuery in adbapi
>
> - The "arraysize" property is the only writable cursor property
defined
>   by DBAPI2. Setting it can make the .fetchall() method faster with
>   some DB modules, but Twisted's adbapi module offers no way to set
it.
> - This ticket has a patch that adds an "cp_arraysize" keyword argument
>   to ConnectionPool.runQuery() to set the .arraysize property, but
this
>   could interfere with DB modules that accept a "cp_arraysize" keyword
>   parameter to cursor.execute().
> - I looked up the API docs for as many Python DB modules as I could
>   think of, and none of them attach any significance to
>   a "cp_arraysize" keyword parameter.
> - However, at least cx_Oracle supports using keyword parameters for
>   populating parameterised queries, like this:
>
>    cursor.execute("select :name from dual;", name="Fred")
>
>So, my questions to the Twisted community are:
> - How many of you are using adbapi.ConnectionPool with cx_Oracle, or
>   another DB module that supports arbitrary keyword arguments to
>   cursor.execute?
> - Of those, how many of you are using parameterised queries or
prepared
>   statements with placeholders named "arraysize" or "cp_arraysize"?
>

Well, as the guy who initiated this ticket, I'm certainly using 
adbapi.ConnectionPool with cx_Oracle.  I'm not currently using any 
placeholders named "arraysize" or "cp_arraysize".

This kind of informal poll *might* help us "rule out" using these (if
someone 
says they're currently using them) - but it won't be very definitive;
and this
change will still technically be backwards-incompatible.  
Perhaps the only reasonable backwards-compatible change that could be
made 
would be adding either an attribute or method to the ConnectionPool to
set the 
arraysize. 

Gerrat




From ssteinerx at gmail.com  Thu Dec 24 10:03:42 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Thu, 24 Dec 2009 12:03:42 -0500
Subject: [Twisted-Python] Some news about currently-pending code-reviews
In-Reply-To: <20091224053747.GC1637@thristian.org>
References: <20091224053747.GC1637@thristian.org>
Message-ID: <112A627E-A9FD-480E-B4D7-9EB4B84FA754@gmail.com>

On Dec 24, 2009, at 12:37 AM, Tim Allen wrote:

> You don't have to be a Twisted expert to help out, and don't worry about whether you're experienced enough to spot every possible problem - most patches get reviewed *at
> least* two or three times by different people, and every problem you pick up and the developer addresses is one less issue the next reviewer has to think about.

Thanks for the encouragement, Tim.   I've shied away from reviews as the first couple of tickets I tried to pick up, that were relevant to the things I *use* every day, were so far over my head (Twisted-wise) that I just kind of gave up.  

It was very strange to know and have used all of the concepts in the tickets, but have absolutely no idea what to *do* about it vis a vis the Twisted tickets in question.  It was kind of like knowing all the nouns in a language but no verbs.

I'll see if I can find some of the "easy" ones that are in some way related to my actual work and get started again...

Thanks,

Steve
aka/ssteinerX
aka/S






From glyph at twistedmatrix.com  Thu Dec 24 19:28:12 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 24 Dec 2009 21:28:12 -0500
Subject: [Twisted-Python] Some news about currently-pending code-reviews
In-Reply-To: <20091224053747.GC1637@thristian.org>
References: <20091224053747.GC1637@thristian.org>
Message-ID: <A82F9296-D72D-40A6-B32A-41956F61B62E@twistedmatrix.com>


On Dec 24, 2009, at 12:37 AM, Tim Allen wrote:

> As I've started reviewing over the past week or two, the developers
> whose code I've reviewed and the regulars in the #twisted IRC channel
> have all been super-helpful, and I highly recommend code-reviewing as
> a pleasant way to spend an idle afternoon. Everything you need to know
> to get started should be listed here:
> 
>    http://twistedmatrix.com/trac/wiki/ReviewProcess

Thanks for writing about this!  It's always nice to hear about someone enjoying the review process :-).


From exarkun at twistedmatrix.com  Sat Dec 26 22:05:12 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Dec 2009 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1261890312.6.1951799780@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091227/ffc42853/attachment-0001.html>

From exarkun at twistedmatrix.com  Sun Dec 27 09:50:47 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Dec 2009 16:50:47 -0000
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <562bcc10912221415g4acf7375qc74826231d367396@mail.gmail.com>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<562bcc10912180923t13cb17danf63fab29e5b680c4@mail.gmail.com>
	<562bcc10912181046i77218394r3922dc55fe9971ce@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
	<8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>
	<562bcc10912181345jb3084b7p4baecb7351c4d565@mail.gmail.com>
	<12aaa0810912181451i333ef926k974af83233627bcf@mail.gmail.com>
	<562bcc10912181525o309609c4q77074172818fe830@mail.gmail.com>
	<562bcc10912221415g4acf7375qc74826231d367396@mail.gmail.com>
Message-ID: <20091227165047.15596.1071098653.divmod.xquotient.538@localhost.localdomain>

On 22 Dec, 10:15 pm, kevin.horn at gmail.com wrote:
>BTW, lore2sphinx and accompanying Sphinx skeleton project now up on
>bitbucket here:
>http://bitbucket.org/khorn/lore2sphinx/
>
>Thanks to ssteinerX for guiding me through the process.

I was reminded of another aspect of the conversion which needs some 
consideration, internationalization and localization.

I assume there are tools for internationalizing sphinx documentation. 
That just leaves localization.  There is currently an effort underway to 
localize the Twisted documentation to Chinese (simplified) and possibly 
a couple other languages:

  https://translations.launchpad.net/twisted

I have no idea how one would go about converting this data to account 
for a change in the source format of the docs.  Does anyone else?

Jean-Paul



From enriquejr at gmail.com  Sun Dec 27 19:14:49 2009
From: enriquejr at gmail.com (Enrique Samson Jr.)
Date: Mon, 28 Dec 2009 10:14:49 +0800
Subject: [Twisted-Python] Sending domish.Element results to Unpersistable
Message-ID: <4B381499.30801@gmail.com>

Hi,

I'm using PB to to send copies of domish.Element instances to another
application. I just don't want to parse XML again and thought it would
be better to send Element copies and save parsing on the other end. But
receiving application just gets an Unpersistable.

I'm considering reducing the Element instances to dicts but I may leave
out details I may need in the future.

Am I missing something?


Enrique




From screwtape at froup.com  Sun Dec 27 19:52:54 2009
From: screwtape at froup.com (Tim Allen)
Date: Mon, 28 Dec 2009 13:52:54 +1100
Subject: [Twisted-Python] Some news about currently-pending code-reviews
In-Reply-To: <BB13E4C4D649234F84A01F6DF64BB87F050E8AA0@ccs-ex01.coldstorage.com>
References: <20091224053747.GC1637@thristian.org>
	<BB13E4C4D649234F84A01F6DF64BB87F050E8AA0@ccs-ex01.coldstorage.com>
Message-ID: <20091228025254.GE1637@thristian.org>

On Thu, Dec 24, 2009 at 09:41:11AM -0500, Gerrat Rickert wrote:
> [snip]
> >http://twistedmatrix.com/trac/ticket/3956
> >Add arraysize option to runQuery in adbapi
> 
> Well, as the guy who initiated this ticket, I'm certainly using
> adbapi.ConnectionPool with cx_Oracle.  I'm not currently using any
> placeholders named "arraysize" or "cp_arraysize".

But you are using the keyword-parameters-as-query-parameters extension
that cx_Oracle provides?

> This kind of informal poll *might* help us "rule out" using these (if
> someone says they're currently using them) - but it won't be very
> definitive; and this change will still technically be
> backwards-incompatible.  Perhaps the only reasonable
> backwards-compatible change that could be made would be adding either
> an attribute or method to the ConnectionPool to set the arraysize. 

I think the two positions here would be:

 a: adbapi.ConnectionPool is designed to wrap DBAPI2 modules; keyword
    parameters to cursor.execute() are not allowed in DBAPI2; therefore
    adbapi.ConnectionPool can use keyword parameters for itself.
 b: adbapi.ConnectionPool has never really enforced DBAPI2 compliance,
    so people have been using it with all kinds of crazy DBAPI2
    extensions and we should allow people to keep doing so as much as
    possible.

My cunning plan (which has somewhat backfired) was that one of these
alternatives would seem sane, and one would seem ridiculous, and once
the mailing list decided which was which I could go back to the ticket
with that decision.

The way things are at the moment, I'm leaning towards (b), but I believe
the developer who's worked on the patch leans towards (a) and I don't
feel I have the authority to demand a change of approach. I left the
ticket awaiting review, in the hope that somebody with more authority or
firmer opinions would come along to review it (it's a pretty small
change!), but the ticket's been sitting there for weeks now - I felt
I needed to do something more drastic to help it make progress.



From twisted at ralphm.ik.nu  Mon Dec 28 01:54:55 2009
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Mon, 28 Dec 2009 09:54:55 +0100
Subject: [Twisted-Python] Sending domish.Element results to Unpersistable
In-Reply-To: <4B381499.30801@gmail.com>
References: <4B381499.30801@gmail.com>
Message-ID: <1261990495.18020.107.camel@dwaal>

On Mon, 2009-12-28 at 10:14 +0800, Enrique Samson Jr. wrote:
> Hi,
> 
> I'm using PB to to send copies of domish.Element instances to another
> application. I just don't want to parse XML again and thought it would
> be better to send Element copies and save parsing on the other end. But
> receiving application just gets an Unpersistable.

I am not familiar enough with PB, but I assume that PB cannot serialize
objects of unknown classes without any help. In general, serialization
of XML is way more expensive than parsing, but I'd be very curious about
when this would actually become a problem.

> I'm considering reducing the Element instances to dicts but I may leave
> out details I may need in the future.

Except for parent, the instance variables mentioned in the docstring of
Element is all you need to remember. Note that this also requires
walking the DOM tree for the element you want to send over, and then
build up the tree on the other side. It might be just as expensive as
using an XML stream.

I've been thinking about building a (streaming) parser that would mostly
lex the incoming XML stream and only extract as much as needed for
routing, leaving the XML Stanza's payload as an unparsed string that can
be sent along further.

ralphm




From twisted-web at udmvt.ru  Mon Dec 28 02:47:06 2009
From: twisted-web at udmvt.ru (twisted-web at udmvt.ru)
Date: Mon, 28 Dec 2009 13:47:06 +0400
Subject: [Twisted-Python] Sending domish.Element results to	Unpersistable
In-Reply-To: <4B381499.30801@gmail.com>
References: <4B381499.30801@gmail.com>
Message-ID: <20091228094706.GD3314@ruber.office.udmvt.ru>

On Mon, Dec 28, 2009 at 10:14:49AM +0800, Enrique Samson Jr. wrote:
> Hi,
> 
> I'm using PB to to send copies of domish.Element instances to another
> application. I just don't want to parse XML again and thought it would
> be better to send Element copies and save parsing on the other end. But
> receiving application just gets an Unpersistable.
> 
> I'm considering reducing the Element instances to dicts but I may leave
> out details I may need in the future.
> 
> Am I missing something?
Perhaps I missed something, but IMHO the desire of sending parsed XML to another
process just indicates some misdesign in the whole system ...
PB allows you to build perfect machine-machine interface and unless you really need
to pass XML chunks from outhere to your another process, never try to send around XML.
If you have your data structures coming from XML - parse them and put into native python
structures, they are so pretty and highlevel. By the way, SAX parser will help you better than DOM.

If you have just an abstract XML - send it as unicode strings, don't parse it at all!
If you store your program's data in XML DOM tree - you are most probably just abusing
the whole idea of XML. Just think, what if you will need to change the XML parser
(for perfomance or any other reason)?


Alexey
> 
> 
> Enrique
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
с уважением,
Алексей Шпагин
системный администратор
цеха передачи данных
технического центра телекоммуникаций
ОАО "ВолгаТелеком" 
филиал в Удмуртской республике.



From ploutosss at gmail.com  Mon Dec 28 06:05:05 2009
From: ploutosss at gmail.com (ploutosss ploutosss)
Date: Mon, 28 Dec 2009 17:05:05 +0400
Subject: [Twisted-Python] how manual run LoopingCall.f
Message-ID: <d59a94870912280505i4f32e7b6vcb9f197fb47c9833@mail.gmail.com>

I use _threadedselect reactor. My waker its one line:
eventmodule.post(eventmodule.Event(TWISTEDEVENT, iterateTwisted=func))
its send event, to pygame queue.
My pygame loop:
class PygameController(object):
   _tick = Tick()
    def _eventIterator(self):
        while True:
            if self._ticking:
                yield eventmodule.poll()
            else:
                yield eventmodule.wait()
    def run(self):
        for event in self._eventIterator():
            if event.type == NOEVENT:
                self.manager.post(self._tick)
                continue
            elif event.type == TWISTEDEVENT:
                event.iterateTwisted()
                if not reactor.running:
                    break
                continue
    ...
When I need to quickly perform some function, I set the parameter
PygameController._ticking to True, and my manager call some function.
Its work.
When I need to perform some function with a time interval of more than
one second, I use LoopingCall. Its work.
When I need to perform some function with a time interval of less than
one second, LoopingCall too slow. I try use my ticking, but for
function is not executed too often, I used the following code:

    def some_function(self):
        looping_instance = self.looping
        call = looping_instance.call
        if call and call.time - call.seconds() <= 0:
            looping_instance()

but I get this traceback when I stop looping (LoopingCall.stop()):
  File "/usr/lib64/python2.6/site-packages/twisted/internet/base.py",
line 779, in runUntilCurrent
    call.func(*call.args, **call.kw)
  File "/usr/lib64/python2.6/site-packages/twisted/internet/task.py",
line 196, in __call__
    d.addErrback(eb)
  File "/usr/lib64/python2.6/site-packages/twisted/internet/defer.py",
line 199, in addErrback
    errbackKeywords=kw)
  File "/usr/lib64/python2.6/site-packages/twisted/internet/defer.py",
line 181, in addCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File "/usr/lib64/python2.6/site-packages/twisted/internet/defer.py",
line 323, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "/usr/lib64/python2.6/site-packages/twisted/internet/task.py",
line 191, in eb
    d.errback(failure)
exceptions.AttributeError: 'NoneType' object has no attribute 'errback'



From wanliyou at gmail.com  Mon Dec 28 08:32:24 2009
From: wanliyou at gmail.com (Wan Li)
Date: Mon, 28 Dec 2009 23:32:24 +0800
Subject: [Twisted-Python] How to profiling twisted web?
Message-ID: <41143d8f0912280732y4c723d3l12163a2fcf019582@mail.gmail.com>

Hi Gurus,

Currently I'm running twisted web via this command line:
twistd.bat web -n --path=%path%

and place a .rpy file in that directory which looks like following:
class MyResource
      def render_POST(self, request):
           do_something; write file and return

resource = MyResource()

My question is:
1. How can I turn on the --profile option?
2. Any way to know how many millisecond elapsed between "request received"
and render_POST call?
3. If there are a bunch of files need to be uploaded (say at 50MB/s speed )
and save by server, Should I write the file directly in render_POST or using
deferred call?

Thanks.

-- 
>: ~
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091228/28d968b7/attachment-0001.html>

From kevin.horn at gmail.com  Mon Dec 28 11:01:27 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 28 Dec 2009 12:01:27 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 2
In-Reply-To: <20091227165047.15596.1071098653.divmod.xquotient.538@localhost.localdomain>
References: <562bcc10912171300u3d1c4080y8e3e147be8da3523@mail.gmail.com>
	<12aaa0810912181151s374638ecjacf87bf1707c993f@mail.gmail.com>
	<3CADFE6F-9B26-421F-BB98-D7FD298F5421@gmail.com>
	<562bcc10912181237u28d410b9maea4d5e2efb3791@mail.gmail.com>
	<8DC9AE97-884E-46C1-83D7-BA46C569F93B@twistedmatrix.com>
	<562bcc10912181345jb3084b7p4baecb7351c4d565@mail.gmail.com>
	<12aaa0810912181451i333ef926k974af83233627bcf@mail.gmail.com>
	<562bcc10912181525o309609c4q77074172818fe830@mail.gmail.com>
	<562bcc10912221415g4acf7375qc74826231d367396@mail.gmail.com>
	<20091227165047.15596.1071098653.divmod.xquotient.538@localhost.localdomain>
Message-ID: <562bcc10912281001y1014e0sc70055eac8163ce1@mail.gmail.com>

On Sun, Dec 27, 2009 at 10:50 AM, <exarkun at twistedmatrix.com> wrote:

> On 22 Dec, 10:15 pm, kevin.horn at gmail.com wrote:
> >BTW, lore2sphinx and accompanying Sphinx skeleton project now up on
> >bitbucket here:
> >http://bitbucket.org/khorn/lore2sphinx/
> >
> >Thanks to ssteinerX for guiding me through the process.
>
> I was reminded of another aspect of the conversion which needs some
> consideration, internationalization and localization.
>
> I assume there are tools for internationalizing sphinx documentation.
> That just leaves localization.  There is currently an effort underway to
> localize the Twisted documentation to Chinese (simplified) and possibly
> a couple other languages:
>
>  https://translations.launchpad.net/twisted
>
> I have no idea how one would go about converting this data to account
> for a change in the source format of the docs.  Does anyone else?
>
> Jean-Paul
>
>
Sphinx does have some translation support, though I confess I haven't looked
at it.  It uses the Babel package.

No idea how to convert the launchpad translations at the moment, but one
thing at a time, eh? :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091228/4bd77ebf/attachment.html>

From rlotun at gmail.com  Mon Dec 28 11:02:09 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Mon, 28 Dec 2009 18:02:09 +0000
Subject: [Twisted-Python] How to profiling twisted web?
In-Reply-To: <41143d8f0912280732y4c723d3l12163a2fcf019582@mail.gmail.com>
References: <41143d8f0912280732y4c723d3l12163a2fcf019582@mail.gmail.com>
Message-ID: <95bb10690912281002h461e9b75i84f6c2d5f9d0a29a@mail.gmail.com>

Hi,

> Currently I'm running twisted web via this command line:
> twistd.bat web -n --path=%path%
> ...
> 1. How can I turn on the --profile option?

You should just be able to do something like:

    twistd.bat web -n --path=%path% --profile=stats_obj
--profiler=cProfile --savestats

Then after a duration of time pounding the server with requests you can stop
it and introspect the stats_obj file:

python
>> import pstats
>> s = pstats.Stats('stats_obj')
>> s.sort_stats('time').print_stats()

This will give you an ordered list of functions where the most time has been
spent. It's also useful to sort by cumulative time. For more information on
how to introspect stats objects see the Python documentation for the pstats
and cProfile module.

> 2. Any way to know how many millisecond elapsed between "request received"
> and render_POST call?

You'll have to measure this yourself I think. A glance at the twisted
codebase informs me:
- In twisted/web/http.py incoming requests are handled by an
HTTPChannel (the protocol from the http server factory)
- Incoming data is processed by the lineReceived method which creates
a Request object
- When all content for a request is received the allContentsReceived
method is invoked, which in turn calls the requestReceived method on
the Request object, which does some internal processing like parsing a
POST-encoded body if there is one. This then calls the process method
on the Request object
- In twisted/web/server.py the Request subclass' process method then
finds the resource being requested and calls the render method

I imagine you could modify the code in the above places to set global
variables by calling time.time(), and dumping them out at some point.

> 3. If there are a bunch of files need to be uploaded (say at 50MB/s speed )
> and save by server, Should I write the file directly in render_POST or using
> deferred call?

Do you mean the server will be *receiving* a file in the HTTP request
body? You can access the request body by looking at request.content
which exposes a File-like API (that is, threat it like you would an
open file in Python).

If you want to *send* a file via Twisted, take a look at:
http://twistedmatrix.com/documents/current/core/howto/producers.html
and
http://twistedmatrix.com/documents/9.0.0/api/twisted.protocols.basic.FileSender.html

Cheers,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun



From wanliyou at gmail.com  Mon Dec 28 19:21:39 2009
From: wanliyou at gmail.com (Wan Li)
Date: Tue, 29 Dec 2009 10:21:39 +0800
Subject: [Twisted-Python] How to profiling twisted web?
In-Reply-To: <95bb10690912281002h461e9b75i84f6c2d5f9d0a29a@mail.gmail.com>
References: <41143d8f0912280732y4c723d3l12163a2fcf019582@mail.gmail.com> 
	<95bb10690912281002h461e9b75i84f6c2d5f9d0a29a@mail.gmail.com>
Message-ID: <41143d8f0912281821p212ae284ma885e0c097401ac2@mail.gmail.com>

Thanks for the detailed reply.

1.
twistd.bat web -n --path=%path% --profile=stats_obj --profiler=cProfile
--savestats

is NOT working for twisted 9.0, --profile and --profiler are both not
recognized.

2.
Sounds like I start to work until all the data are received, as the content
are multipart/mixed typed pretty large content, I wanna start to find
boundaries and save part of them ASAP. Any clue?

3.
Not only one file, but many files in a multipart/mixed typed body which
totally reach a 50MB/s speed.
I made a tests which doing a multipart/mixed request, containing 50000 * 1KB
small files. Assume socket.sendall(data) is called
at 00:00
render_POST start: 00:03
process_multipart_content_start: 00:03
process_multipart_content_done:00:11
write_all_small_files_in_one_file_start :00:11
write_all_small_files_in_one_file_done:00:13
respones_given:00:13

Yes, it takes 13s to get it done. I can only make the
process_multipart_content spend less time by combining those small files in
several larger files but I still don't know why 3s are spend before
render_POST.

On Tue, Dec 29, 2009 at 2:02 AM, Reza Lotun <rlotun at gmail.com> wrote:

> Hi,
>
> > Currently I'm running twisted web via this command line:
> > twistd.bat web -n --path=%path%
> > ...
> > 1. How can I turn on the --profile option?
>
> You should just be able to do something like:
>
>    twistd.bat web -n --path=%path% --profile=stats_obj
> --profiler=cProfile --savestats
>
> Then after a duration of time pounding the server with requests you can
> stop
> it and introspect the stats_obj file:
>
> python
> >> import pstats
> >> s = pstats.Stats('stats_obj')
> >> s.sort_stats('time').print_stats()
>
> This will give you an ordered list of functions where the most time has
> been
> spent. It's also useful to sort by cumulative time. For more information on
> how to introspect stats objects see the Python documentation for the pstats
> and cProfile module.
>
> > 2. Any way to know how many millisecond elapsed between "request
> received"
> > and render_POST call?
>
> You'll have to measure this yourself I think. A glance at the twisted
> codebase informs me:
> - In twisted/web/http.py incoming requests are handled by an
> HTTPChannel (the protocol from the http server factory)
> - Incoming data is processed by the lineReceived method which creates
> a Request object
> - When all content for a request is received the allContentsReceived
> method is invoked, which in turn calls the requestReceived method on
> the Request object, which does some internal processing like parsing a
> POST-encoded body if there is one. This then calls the process method
> on the Request object
> - In twisted/web/server.py the Request subclass' process method then
> finds the resource being requested and calls the render method
>
> I imagine you could modify the code in the above places to set global
> variables by calling time.time(), and dumping them out at some point.
>
> > 3. If there are a bunch of files need to be uploaded (say at 50MB/s speed
> )
> > and save by server, Should I write the file directly in render_POST or
> using
> > deferred call?
>
> Do you mean the server will be *receiving* a file in the HTTP request
> body? You can access the request body by looking at request.content
> which exposes a File-like API (that is, threat it like you would an
> open file in Python).
>
> If you want to *send* a file via Twisted, take a look at:
> http://twistedmatrix.com/documents/current/core/howto/producers.html
> and
>
> http://twistedmatrix.com/documents/9.0.0/api/twisted.protocols.basic.FileSender.html
>
> Cheers,
> Reza
>
> --
> Reza Lotun
> mobile: +44 (0)7521 310 763
> email:  rlotun at gmail.com
> work:   reza at tweetdeck.com
> twitter: @rlotun
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
>: ~
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091229/8b0b27ee/attachment.html>

From wolfgang at rohdewald.de  Tue Dec 29 01:07:26 2009
From: wolfgang at rohdewald.de (Wolfgang Rohdewald)
Date: Tue, 29 Dec 2009 09:07:26 +0100
Subject: [Twisted-Python] order of remote requests
Message-ID: <200912290907.26914.wolfgang@rohdewald.de>

Hi,

when I send two remote calls A and B over the network, in that
order, using the twisted perspective broker callRemote method,
is it granted that A is processed first on the other side even
if B  arrives first? Or should I only send B after I got an
answer to A?

-- 
Wolfgang



From andrew at bemusement.org  Tue Dec 29 01:47:30 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 29 Dec 2009 19:47:30 +1100
Subject: [Twisted-Python] order of remote requests
In-Reply-To: <200912290907.26914.wolfgang@rohdewald.de>
References: <200912290907.26914.wolfgang@rohdewald.de>
Message-ID: <20091229084730.GH2630@steerpike.home.puzzling.org>

Wolfgang Rohdewald wrote:
> Hi,
> 
> when I send two remote calls A and B over the network, in that
> order, using the twisted perspective broker callRemote method,
> is it granted that A is processed first on the other side even
> if B  arrives first? Or should I only send B after I got an
> answer to A?

It depends on the server, and what exactly you want to happen.

Perspective broker can have many concurrent remote calls on the same
connection, and depending on how the server is implemented it might
process those sequentially in the order they arrive, or concurrently, or
even in an arbitrary order.

So if call A really must be completed before starting B, then the client
must not make call B until it knows A has finished.

-Andrew.




From wolfgang at rohdewald.de  Tue Dec 29 04:53:07 2009
From: wolfgang at rohdewald.de (Wolfgang Rohdewald)
Date: Tue, 29 Dec 2009 12:53:07 +0100
Subject: [Twisted-Python] order of remote requests
In-Reply-To: <20091229084730.GH2630@steerpike.home.puzzling.org>
References: <200912290907.26914.wolfgang@rohdewald.de>
	<20091229084730.GH2630@steerpike.home.puzzling.org>
Message-ID: <200912291253.08011.wolfgang@rohdewald.de>

On Tuesday 29 December 2009, Andrew Bennetts wrote:
> Wolfgang Rohdewald wrote:
> > when I send two remote calls A and B over the network, in that
> > order, using the twisted perspective broker callRemote method,
> > is it granted that A is processed first on the other side even
> > if B  arrives first? Or should I only send B after I got an
> > answer to A?
> 
> It depends on the server, and what exactly you want to happen.
> 
> Perspective broker can have many concurrent remote calls on the
>  same connection, and depending on how the server is implemented it
>  might process those sequentially in the order they arrive, or
>  concurrently, or even in an arbitrary order.
> 
> So if call A really must be completed before starting B, then the
>  client must not make call B until it knows A has finished.

I should have given more details, sorry.

I am writing both the server and the client with twisted pb.
The server (a game server) sends messages to four player clients.

Say the game server sends messages A and B to a player client. 

Is it granted that the player client always processes A first even
if the internet routes the messages differently and B arrives
first?

-- 
Wolfgang



From dripton at ripton.net  Tue Dec 29 06:58:04 2009
From: dripton at ripton.net (David Ripton)
Date: Tue, 29 Dec 2009 05:58:04 -0800
Subject: [Twisted-Python] order of remote requests
In-Reply-To: <200912291253.08011.wolfgang@rohdewald.de>
References: <200912290907.26914.wolfgang@rohdewald.de>
	<20091229084730.GH2630@steerpike.home.puzzling.org>
	<200912291253.08011.wolfgang@rohdewald.de>
Message-ID: <20091229135803.GA8504@vidar.dreamhost.com>

On 2009.12.29 12:53:07 +0100, Wolfgang Rohdewald wrote:
> On Tuesday 29 December 2009, Andrew Bennetts wrote:
> > Wolfgang Rohdewald wrote:
> > > when I send two remote calls A and B over the network, in that
> > > order, using the twisted perspective broker callRemote method,
> > > is it granted that A is processed first on the other side even
> > > if B  arrives first? Or should I only send B after I got an
> > > answer to A?
> > 
> > It depends on the server, and what exactly you want to happen.
> > 
> > Perspective broker can have many concurrent remote calls on the
> >  same connection, and depending on how the server is implemented it
> >  might process those sequentially in the order they arrive, or
> >  concurrently, or even in an arbitrary order.
> > 
> > So if call A really must be completed before starting B, then the
> >  client must not make call B until it knows A has finished.
> 
> I should have given more details, sorry.
> 
> I am writing both the server and the client with twisted pb.
> The server (a game server) sends messages to four player clients.
> 
> Say the game server sends messages A and B to a player client. 
> 
> Is it granted that the player client always processes A first even
> if the internet routes the messages differently and B arrives
> first?

TCP guarantees in-order message delivery.  If you send A before B over
the same TCP connection, and A and B reach the client, then the client
will receive A before B.

Each Twisted process is single-threaded by default.

So if you use TCP, and keep the message processing code simple, then I
think you'll get messages processed in the order you expect.  I've never
noticed a problem with out-of-order messages in my PB game, anyway.

-- 
David Ripton    dripton at ripton.net



From k_r_a_j_kumar at yahoo.co.in  Tue Dec 29 09:12:46 2009
From: k_r_a_j_kumar at yahoo.co.in (Raj kumar)
Date: Tue, 29 Dec 2009 21:42:46 +0530 (IST)
Subject: [Twisted-Python] twisted version of openid
Message-ID: <140575.11540.qm@web8708.mail.in.yahoo.com>

Hi,
Currently I'm having a server running under twisted. I'm planning to implement openid in my application. Is there any twisted version of openid api? I need some reference to go through openid examples.

Thanks in advance.

Raj.



      The INTERNET now has a personality. YOURS! See your Yahoo! Homepage. http://in.yahoo.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091229/b8b60a68/attachment-0001.html>

From kevin.horn at gmail.com  Tue Dec 29 11:31:56 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 29 Dec 2009 12:31:56 -0600
Subject: [Twisted-Python] twisted version of openid
In-Reply-To: <140575.11540.qm@web8708.mail.in.yahoo.com>
References: <140575.11540.qm@web8708.mail.in.yahoo.com>
Message-ID: <562bcc10912291031o3c85d851tddc051fda3ed59cf@mail.gmail.com>

On Tue, Dec 29, 2009 at 10:12 AM, Raj kumar <k_r_a_j_kumar at yahoo.co.in>wrote:

> Hi,
> Currently I'm having a server running under twisted. I'm planning to
> implement openid in my application. Is there any twisted version of openid
> api? I need some reference to go through openid examples.
>
> Thanks in advance.
>
> Raj.
>
>
Google is you friend: https://launchpad.net/txopenid

It may not suit your purposes exactly, but it seems like a good place to
start.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091229/926a314c/attachment-0001.html>

From wolfgang at rohdewald.de  Tue Dec 29 12:13:14 2009
From: wolfgang at rohdewald.de (Wolfgang Rohdewald)
Date: Tue, 29 Dec 2009 20:13:14 +0100
Subject: [Twisted-Python] order of remote requests
In-Reply-To: <20091229135803.GA8504@vidar.dreamhost.com>
References: <200912290907.26914.wolfgang@rohdewald.de>
	<200912291253.08011.wolfgang@rohdewald.de>
	<20091229135803.GA8504@vidar.dreamhost.com>
Message-ID: <200912292013.15175.wolfgang@rohdewald.de>

On Tuesday 29 December 2009, David Ripton wrote:
> TCP guarantees in-order message delivery.  If you send A before B
>  over the same TCP connection, and A and B reach the client, then
>  the client will receive A before B.

Of course - now I wonder what made me think otherwise.

Thank you for your explanation! 


-- 
Wolfgang



From celord at gmail.com  Tue Dec 29 13:55:36 2009
From: celord at gmail.com (=?ISO-8859-1?B?Q+lzYXIgR2FyY+1h?=)
Date: Tue, 29 Dec 2009 14:55:36 -0600
Subject: [Twisted-Python] twisted mail client code review
Message-ID: <b302bf880912291255q1f80e63en80f3e342204619c8@mail.gmail.com>

Hello guys, this are my first steps into twister and this is my first
app with twister, using examples from the twisted documentation and
reading it a lot ( interfaces are still not for me ),  I've come to
this code:

http://pastebin.com/m2d6c35df

My goal for now is to create my own client and be able to retrieve
mail :) well it's done, but my question to the experts is to know your
opinions about my code, to see if I can implement any best practice in
order to have a decent app, in fact to hear from you how do you find
the code

PD: Sorry for my English, saludos desde Costa Rica.

Thanks a lot !



-- 
http://celord.blogspot.com/



From andrew at bemusement.org  Tue Dec 29 22:55:59 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 30 Dec 2009 16:55:59 +1100
Subject: [Twisted-Python] order of remote requests
In-Reply-To: <200912291253.08011.wolfgang@rohdewald.de>
References: <200912290907.26914.wolfgang@rohdewald.de>
	<20091229084730.GH2630@steerpike.home.puzzling.org>
	<200912291253.08011.wolfgang@rohdewald.de>
Message-ID: <20091230055559.GJ2630@steerpike.home.puzzling.org>

Wolfgang Rohdewald wrote:
[...]
> I should have given more details, sorry.
> 
> I am writing both the server and the client with twisted pb.
> The server (a game server) sends messages to four player clients.
> 
> Say the game server sends messages A and B to a player client. 
> 
> Is it granted that the player client always processes A first even
> if the internet routes the messages differently and B arrives
> first?

A PB connection uses a single TCP connection.  TCP guarantees that the
bytes will arrive in order (or not at all), so the messages will arrive
at the client in the order the server sent them, assuming there is one
persistent PB connection between each client and the server (which seems
likely from your description).

So it is impossible for the internet to route the messages such that B
will arrive before A.

Neither PB nor TCP guarantee anything about when the recipient
“processes” those messages though, just that they will arrive in the
order they were sent.  For example consider if A and B arrive very close
together (in the same millisecond, say) and the client processes them by
dispatching to a thread pool, which might take 10s or even 100s of
milliseconds to fully process the message (and determine a reply, if
applicable)... then depending on the exact work required and exactly how
the OS schedules the threads, then B might be fully processed before A
is, even though A arrived first.

Apologies for such a pedantically precise and abstract answer, but what
exactly you mean when you say “processes” is a bit ambiguous.  I hope
this reply helps.

-Andrew.




From phil at bubblehouse.org  Wed Dec 30 00:14:35 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 30 Dec 2009 02:14:35 -0500
Subject: [Twisted-Python] twisted version of openid
In-Reply-To: <562bcc10912291031o3c85d851tddc051fda3ed59cf@mail.gmail.com>
References: <140575.11540.qm@web8708.mail.in.yahoo.com>
	<562bcc10912291031o3c85d851tddc051fda3ed59cf@mail.gmail.com>
Message-ID: <D925276E-83FE-45E3-BD6A-76B6A8156295@bubblehouse.org>

On Dec 29, 2009, at 1:31 PM, Kevin Horn wrote:
> On Tue, Dec 29, 2009 at 10:12 AM, Raj kumar  
> <k_r_a_j_kumar at yahoo.co.in> wrote:
> Hi,
> Currently I'm having a server running under twisted. I'm planning to  
> implement openid in my application. Is there any twisted version of  
> openid api? I need some reference to go through openid examples.
>
> Thanks in advance.
>
> Raj.
>
>
> Google is you friend: https://launchpad.net/txopenid
>
> It may not suit your purposes exactly, but it seems like a good  
> place to start.

txopenid is an identity provider for OpenID version 1.1. That is, it  
can provide credentials for sites that accept OpenID logins, based on  
data stored in a MySQL database.

It won't currently help you *accept* OpenID as an authentication  
mechanism, but it's a great provider, IMNSHO ;-) I use it as my  
identity provider, and so far it works well for my purposes. It also  
has been pleasantly stable the whole time I've been running it (at  
least as monitored by Nagios).

Also, it provides a number of utility functions that are essential to  
the OpenID spec which should make writing a consumer a bit easier  
(particularly in regards to hmac digest support and encoding integers  
into their big-endian two's complement as a binary string...ugh)...

Admittedly OpenID is at version 2.x these days, so I'm hoping soon to  
update the provider and/or write a consumer implementation. I'd like  
to think OpenID is finally starting to catch on...

-phil
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091230/98f91a1c/attachment.html>

From kevin.horn at gmail.com  Wed Dec 30 13:05:15 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 30 Dec 2009 14:05:15 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
Message-ID: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>

Hello again, and welcome to another update on the Twisted Lore to Sphinx
conversion project.

Current Sphinx results are in the usual place at:
http://twistedsphinx.funsize.net/

Here's what's new:

- The lore2sphinx conversion script is now up on bitbucket.  You can find it
here: http://bitbucket.org/khorn/lore2sphinx/ .
  Special thanks to Steve Steiner (ssteinerX) for helping out a bitbucket
newbie.

- lore2sphinx now reads input and output directories from a config file.
The config file can have one or more "profiles", each of which contains
config info for a set of documentation. At present, the script just uses the
default profile (set in the config file), but I'll add a command line switch
to specify the profile Real Soon Now (tm), which will make it easy to use a
single config file for multiple projects (e.g. twisted, nevow, mantissa,
etc.)

- lore2sphinx has also been refactored a bit, which solves a lot of
whitespace handling issues. The Sphinx build now gives fewer than 100 errors
(currently 65, started off in the 500-600 range)!  Hooray!  Still, not all
of the output is fully correct, and some tags (notably tables) are still
unhandled.

- I still haven't started any work on a theme...I'll get to it eventually,
unless someone else does first.  Any volunteers?

- Divmod docs: new config file support is a step in this direction, look for
something soon...

- PyOpenSSL docs: kind of a sideline to this so I haven't really moved
forward on this yet, but I will eventually


If anyone out there would like to help out, I can certainly use the
assistance.  Lore2sphinx could probably use some extra eyeballs and brains
looking at it, thought the basic structure is pretty much laid out.  Any
ideas/comments/criticisms welcome.

If you're intimidated by the idea of working on the actual lore2sphinx
conversion script (or just don't want to), here's some other stuff that
needs doing:

- work on a twisted (or Divmod) Sphinx theme which at least mostly matches
the website (or the Divmod website)
- identify branches which have lore patches in them
- identify tickets which propose to fix/modify Lore functionality
- identify wiki pages that need to be changed, and the necessary changes
- make suggestions on the overall conversion process, as documented in the
proposal.

I'm sure I'll manage to get all this done eventually, but with more people,
it will get done sooner.  And sooner is better. :)

If you'd like to help out with one (or more) of these tasks, just give a
shout here, or email me off-list.

Thanks!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091230/2e1681aa/attachment.html>

From lists at collab.nl  Wed Dec 30 13:40:55 2009
From: lists at collab.nl (Thijs Triemstra | Collab)
Date: Wed, 30 Dec 2009 21:40:55 +0100
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
In-Reply-To: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
References: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
Message-ID: <DE1B0229-0653-4112-8EDB-BBECA0D7DB89@collab.nl>

Hi Kevin,

On 30 Dec 2009, at 21:05, Kevin Horn wrote:

> If you're intimidated by the idea of working on the actual lore2sphinx conversion script (or just don't want to), here's some other stuff that needs doing:
> 
> - work on a twisted (or Divmod) Sphinx theme which at least mostly matches the website (or the Divmod website)
> - identify branches which have lore patches in them
> - identify tickets which propose to fix/modify Lore functionality

I can work on identifying those tickets and branches in Twisted, but should I put that info in a ticket or on a Twisted wiki page? And should the tickets with Lore enhancements be closed immediately or listed first?

Thanks for all your work!

Cheers,

Thijs




From radix at twistedmatrix.com  Wed Dec 30 14:00:04 2009
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 30 Dec 2009 16:00:04 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
In-Reply-To: <60ed19d40912301258mfbab631k3b7aaa358a3a1f09@mail.gmail.com>
References: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
	<DE1B0229-0653-4112-8EDB-BBECA0D7DB89@collab.nl>
	<60ed19d40912301258mfbab631k3b7aaa358a3a1f09@mail.gmail.com>
Message-ID: <60ed19d40912301300scde1503se76d0b2a99bfa871@mail.gmail.com>

Perhaps just add a label 'lore-changes' to all the tickets which do so.

On Dec 30, 2009 3:45 PM, "Thijs Triemstra | Collab" <lists at collab.nl> wrote:

Hi Kevin,

On 30 Dec 2009, at 21:05, Kevin Horn wrote: > If you're intimidated by the
idea of working on the ...
I can work on identifying those tickets and branches in Twisted, but should
I put that info in a ticket or on a Twisted wiki page? And should the
tickets with Lore enhancements be closed immediately or listed first?

Thanks for all your work!

Cheers,

Thijs


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091230/346036c1/attachment.html>

From kevin.horn at gmail.com  Wed Dec 30 14:06:21 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 30 Dec 2009 15:06:21 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
In-Reply-To: <DE1B0229-0653-4112-8EDB-BBECA0D7DB89@collab.nl>
References: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
	<DE1B0229-0653-4112-8EDB-BBECA0D7DB89@collab.nl>
Message-ID: <562bcc10912301306r6eb846e6ye3f4fbf067f1ac00@mail.gmail.com>

On Wed, Dec 30, 2009 at 2:40 PM, Thijs Triemstra | Collab
<lists at collab.nl>wrote:

> Hi Kevin,
>
> On 30 Dec 2009, at 21:05, Kevin Horn wrote:
>
> > If you're intimidated by the idea of working on the actual lore2sphinx
> conversion script (or just don't want to), here's some other stuff that
> needs doing:
> >
> > - work on a twisted (or Divmod) Sphinx theme which at least mostly
> matches the website (or the Divmod website)
> > - identify branches which have lore patches in them
> > - identify tickets which propose to fix/modify Lore functionality
>
> I can work on identifying those tickets and branches in Twisted, but should
> I put that info in a ticket or on a Twisted wiki page? And should the
> tickets with Lore enhancements be closed immediately or listed first?
>

I'm open to suggestions as to where to list the tickets.  A Trac ticket or a
wiki page would certainly work, or we can integrate the list into the
proposal document.  What might be a good solution though is to just add a
Trac keyword to all of the relevant tickets, or even just identify a
specific search for them in Trac (is it enough to just do a custom search
for Lore component tickets?).

I think we should just come up with a list as a first step.  Though I really
hope to complete the conversion before too much longer, you never know what
could happen, and if it gets delayed significantly, it might be useful to
still have those tickets open.


> Thanks for all your work!
>
> Cheers,
>
> Thijs
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091230/55d337f6/attachment.html>

From kevin.horn at gmail.com  Wed Dec 30 14:06:44 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 30 Dec 2009 15:06:44 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
In-Reply-To: <60ed19d40912301300scde1503se76d0b2a99bfa871@mail.gmail.com>
References: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
	<DE1B0229-0653-4112-8EDB-BBECA0D7DB89@collab.nl>
	<60ed19d40912301258mfbab631k3b7aaa358a3a1f09@mail.gmail.com>
	<60ed19d40912301300scde1503se76d0b2a99bfa871@mail.gmail.com>
Message-ID: <562bcc10912301306m7e9f2829la159ed95893f55de@mail.gmail.com>

On Wed, Dec 30, 2009 at 3:00 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> Perhaps just add a label 'lore-changes' to all the tickets which do so.
>
>
>
Ack! Chris beat me to it!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091230/b3319459/attachment.html>

From radix at twistedmatrix.com  Wed Dec 30 14:14:37 2009
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 30 Dec 2009 16:14:37 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
In-Reply-To: <562bcc10912301306m7e9f2829la159ed95893f55de@mail.gmail.com>
References: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
	<DE1B0229-0653-4112-8EDB-BBECA0D7DB89@collab.nl>
	<60ed19d40912301258mfbab631k3b7aaa358a3a1f09@mail.gmail.com>
	<60ed19d40912301300scde1503se76d0b2a99bfa871@mail.gmail.com>
	<562bcc10912301306m7e9f2829la159ed95893f55de@mail.gmail.com>
Message-ID: <60ed19d40912301314g14e99a2ja95e2ec402d0cb0@mail.gmail.com>

I'ma ninja

On Dec 30, 2009 4:13 PM, "Kevin Horn" <kevin.horn at gmail.com> wrote:

On Wed, Dec 30, 2009 at 3:00 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote: > > Perhap...
Ack! Chris beat me to it!

Kevin Horn

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091230/1d836438/attachment.html>

From warner at lothar.com  Wed Dec 30 16:07:43 2009
From: warner at lothar.com (Brian Warner)
Date: Wed, 30 Dec 2009 15:07:43 -0800
Subject: [Twisted-Python] order of remote requests
In-Reply-To: <20091230055559.GJ2630@steerpike.home.puzzling.org>
References: <200912290907.26914.wolfgang@rohdewald.de>	<20091229084730.GH2630@steerpike.home.puzzling.org>	<200912291253.08011.wolfgang@rohdewald.de>
	<20091230055559.GJ2630@steerpike.home.puzzling.org>
Message-ID: <4B3BDD3F.2050006@lothar.com>

Andrew Bennetts wrote:

> So it is impossible for the internet to route the messages such that B
> will arrive before A.
> 
> Neither PB nor TCP guarantee anything about when the recipient
> “processes” those messages though, just that they will arrive in the
> order they were sent.  For example consider if A and B arrive very close
> together (in the same millisecond, say) and the client processes them by
> dispatching to a thread pool,

To expand on what Andrew said: Foolscap (which is descended from PB and
has very similar semantics) makes the following guarantee:

 within any given client/server pair,
 if the client invokes callRemote(A) before invoking callRemote(B)
 then the server will invoke remote_A() before invoking remote_B()

Your server's remote_A() method might return a Deferred, and not fire it
for an arbitrary period of time, whereas it might return an immediate
value from remote_B(). In this case, the client will see the responses
come back in a different order. Your server might also choose to delay
processing of one message for whatever reason (like by dispatching to a
threadpool, or dispatching a request to a third server in order to
service the request), but will be visible in the implementation of
remote_A(). The only promise made by Foolscap and PB is that your
remote_* methods will be invoked in the same order as the sender called
callRemote(*).

(in the future, Foolscap might offer some options to use multiple
connections and send messages over multiple parallel paths, or to
interleave message calls on a single connection, or to switch to UDP or
something, which might weaken this guarantee, but the default will
remain FIFO ordering)

Also note that there are no ordering guarantees between messages sent to
different machines (and therefore over different connections), of course.


cheers,
 -Brian

Foolscap: http://foolscap.lothar.com/trac




From kevin.horn at gmail.com  Wed Dec 30 17:07:41 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 30 Dec 2009 18:07:41 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
In-Reply-To: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
References: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
Message-ID: <562bcc10912301607t14df31md1ce470ddc1f1d8b@mail.gmail.com>

On Wed, Dec 30, 2009 at 2:05 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> Hello again, and welcome to another update on the Twisted Lore to Sphinx
> conversion project.
>
> Current Sphinx results are in the usual place at:
> http://twistedsphinx.funsize.net/
>
> Here's what's new:
>
> - The lore2sphinx conversion script is now up on bitbucket.  You can find
> it here: http://bitbucket.org/khorn/lore2sphinx/ .
>   Special thanks to Steve Steiner (ssteinerX) for helping out a bitbucket
> newbie.
>
> - lore2sphinx now reads input and output directories from a config file.
> The config file can have one or more "profiles", each of which contains
> config info for a set of documentation. At present, the script just uses the
> default profile (set in the config file), but I'll add a command line switch
> to specify the profile Real Soon Now (tm), which will make it easy to use a
> single config file for multiple projects (e.g. twisted, nevow, mantissa,
> etc.)
>
> - lore2sphinx has also been refactored a bit, which solves a lot of
> whitespace handling issues. The Sphinx build now gives fewer than 100 errors
> (currently 65, started off in the 500-600 range)!  Hooray!  Still, not all
> of the output is fully correct, and some tags (notably tables) are still
> unhandled.
>
> - I still haven't started any work on a theme...I'll get to it eventually,
> unless someone else does first.  Any volunteers?
>
> - Divmod docs: new config file support is a step in this direction, look
> for something soon...
>
> - PyOpenSSL docs: kind of a sideline to this so I haven't really moved
> forward on this yet, but I will eventually
>
>
> If anyone out there would like to help out, I can certainly use the
> assistance.  Lore2sphinx could probably use some extra eyeballs and brains
> looking at it, thought the basic structure is pretty much laid out.  Any
> ideas/comments/criticisms welcome.
>
> If you're intimidated by the idea of working on the actual lore2sphinx
> conversion script (or just don't want to), here's some other stuff that
> needs doing:
>
> - work on a twisted (or Divmod) Sphinx theme which at least mostly matches
> the website (or the Divmod website)
> - identify branches which have lore patches in them
> - identify tickets which propose to fix/modify Lore functionality
> - identify wiki pages that need to be changed, and the necessary changes
> - make suggestions on the overall conversion process, as documented in the
> proposal.
>
> I'm sure I'll manage to get all this done eventually, but with more people,
> it will get done sooner.  And sooner is better. :)
>
> If you'd like to help out with one (or more) of these tasks, just give a
> shout here, or email me off-list.
>
> Thanks!
>
> Kevin Horn
>

Another quick update...

- lore2sphinx now accepts a command line parameter to specify which config
profile to use
- added "stub" sphinx projects for Divmod Nevow, Mantissa, and Epsilon.
I've converted the docs for these projects and built them (mostly)
successfully, but I haven't published them anywhere yet (coming soon).  Have
I missed any other Divmod projects with Lore docs?

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091230/c8124d9a/attachment.html>

From screwtape at froup.com  Wed Dec 30 20:27:45 2009
From: screwtape at froup.com (Timothy Allen)
Date: Thu, 31 Dec 2009 14:27:45 +1100
Subject: [Twisted-Python] twisted mail client code review
In-Reply-To: <b302bf880912291255q1f80e63en80f3e342204619c8@mail.gmail.com>
References: <b302bf880912291255q1f80e63en80f3e342204619c8@mail.gmail.com>
Message-ID: <20091231142745.0f83aced@hepzibah>

On Tue, 29 Dec 2009 14:55:36 -0600
César García <celord at gmail.com> wrote:
> Hello guys, this are my first steps into twister and this is my first
> app with twister, using examples from the twisted documentation and
> reading it a lot ( interfaces are still not for me ),  I've come to
> this code:
> 
> http://pastebin.com/m2d6c35df
> 
> My goal for now is to create my own client and be able to retrieve
> mail :) well it's done, but my question to the experts is to know your
> opinions about my code, to see if I can implement any best practice in
> order to have a decent app, in fact to hear from you how do you find
> the code

In general, it looks pretty good! I do have some comments, though:

 - Occasionally when you use a docstring, the indenting is
   inconsistent, like this:

     """
    docstring goes here
    """

   Obviously it still works, but you'll be asked to fix it if you ever
   contribute code to pretty much any open-source project, so you might
   as well get in the habit now.

 - You import twisted.internet.reactor in main() and in ebConnection();
   you might as well just import it at the top of the file along with
   all the other imports.

 - The reason people put code in a main() function rather than just
   putting it at the end after 'if __name__ == "__main__":' is so that
   they can write tests for it, or otherwise call it from other code.
   However, because you call reactor.run() from your main() function,
   it can't be called from other code - you might want to move the
   reactor.run() call to the bottom of the file.

 - In ebConnection() you set up logging to stdout, then log the error,
   then stop the reactor - but there are various other places where you
   log things with print statements. You might as well set up logging
   at the bottom of the file as well, then use "log.msg()" where you
   used to use "print".

All pretty minor things, really - well done!



From celord at gmail.com  Wed Dec 30 22:01:12 2009
From: celord at gmail.com (=?ISO-8859-1?B?Q+lzYXIgR2FyY+1h?=)
Date: Wed, 30 Dec 2009 23:01:12 -0600
Subject: [Twisted-Python] twisted mail client code review
In-Reply-To: <20091231142745.0f83aced@hepzibah>
References: <b302bf880912291255q1f80e63en80f3e342204619c8@mail.gmail.com>
	<20091231142745.0f83aced@hepzibah>
Message-ID: <b302bf880912302101m4b0d1dd3h91b4800fba89a4@mail.gmail.com>

Timothy, thanks a lot, it's good to know that I am on the right way,
I'll follow your advices !!

And now reading again the documentation about TCPclients, I'll try to
modify the code and move the callbacks inside the Protocol class and
move all the persisten config to the factory


Thanks !

2009/12/30 Timothy Allen <screwtape at froup.com>:
> On Tue, 29 Dec 2009 14:55:36 -0600
> César García <celord at gmail.com> wrote:
>> Hello guys, this are my first steps into twister and this is my first
>> app with twister, using examples from the twisted documentation and
>> reading it a lot ( interfaces are still not for me ),  I've come to
>> this code:
>>
>> http://pastebin.com/m2d6c35df
>>
>> My goal for now is to create my own client and be able to retrieve
>> mail :) well it's done, but my question to the experts is to know your
>> opinions about my code, to see if I can implement any best practice in
>> order to have a decent app, in fact to hear from you how do you find
>> the code
>
> In general, it looks pretty good! I do have some comments, though:
>
>  - Occasionally when you use a docstring, the indenting is
>   inconsistent, like this:
>
>     """
>    docstring goes here
>    """
>
>   Obviously it still works, but you'll be asked to fix it if you ever
>   contribute code to pretty much any open-source project, so you might
>   as well get in the habit now.
>
>  - You import twisted.internet.reactor in main() and in ebConnection();
>   you might as well just import it at the top of the file along with
>   all the other imports.
>
>  - The reason people put code in a main() function rather than just
>   putting it at the end after 'if __name__ == "__main__":' is so that
>   they can write tests for it, or otherwise call it from other code.
>   However, because you call reactor.run() from your main() function,
>   it can't be called from other code - you might want to move the
>   reactor.run() call to the bottom of the file.
>
>  - In ebConnection() you set up logging to stdout, then log the error,
>   then stop the reactor - but there are various other places where you
>   log things with print statements. You might as well set up logging
>   at the bottom of the file as well, then use "log.msg()" where you
>   used to use "print".
>
> All pretty minor things, really - well done!
>



-- 
http://celord.blogspot.com/



From landreville at deadtreepages.com  Thu Dec 31 10:35:49 2009
From: landreville at deadtreepages.com (Landreville)
Date: Thu, 31 Dec 2009 12:35:49 -0500
Subject: [Twisted-Python] adbapi transaction initiation
Message-ID: <9d748c780912310935v36cd0482u2188a4e56e980645@mail.gmail.com>

I've just noticed the transaction_timestamp is actually way (up to
several minutes) before the database proc gets called. I'm on
postgresql 8.4 so the transaction_timestamp is when the transaction
started, and I compared it against the clock_timestamp (absolute
current time) and it is quite a bit off.

Does adbapi start transactions before any method (ie runQuery) is called?

Or should I be looking at the underlying database driver to this behaviour?



From screwtape at froup.com  Thu Dec 31 14:13:40 2009
From: screwtape at froup.com (Timothy Allen)
Date: Fri, 1 Jan 2010 08:13:40 +1100
Subject: [Twisted-Python] adbapi transaction initiation
In-Reply-To: <9d748c780912310935v36cd0482u2188a4e56e980645@mail.gmail.com>
References: <9d748c780912310935v36cd0482u2188a4e56e980645@mail.gmail.com>
Message-ID: <20100101081340.538a9bbd@hepzibah>

On Thu, 31 Dec 2009 12:35:49 -0500
Landreville <landreville at deadtreepages.com> wrote:

> I've just noticed the transaction_timestamp is actually way (up to
> several minutes) before the database proc gets called. I'm on
> postgresql 8.4 so the transaction_timestamp is when the transaction
> started, and I compared it against the clock_timestamp (absolute
> current time) and it is quite a bit off.
> 
> Does adbapi start transactions before any method (ie runQuery) is
> called?
> 
> Or should I be looking at the underlying database driver to this
> behaviour?

I haven't looked at the code myself, but that seems a reasonable
behaviour to me:

 - adbapi.ConnectionPool, as its name suggests, pre-allocates a bunch
   of database connections.
 - DBAPI2.0 requires that cursors default to doing things in a
   transaction.
 - PostgreSQL natively defaults to doing things immediately, outside a
   transaction, so running "BEGIN" on startup is a sensible thing for a
   PostgreSQL Python module to do.

In fact, now that I think about it, I happen to know that PyPgSQL
cursors (what RedHat packagaes as "postgresql-python") execute "BEGIN"
on creation and immediately after each .rollback() or .commit(), and I
suspect other libraries like psycopg2 would do much the same thing.



