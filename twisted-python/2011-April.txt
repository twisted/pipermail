From j.veenvan at gmail.com  Fri Apr  1 03:51:20 2011
From: j.veenvan at gmail.com (Jeroen van Veen)
Date: Fri, 1 Apr 2011 07:51:20 +0000
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTikdmi-TiUs-Rc50Fb8D6KSQNRoZ7z_M+_zgyyT=@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
	<AANLkTimv+dsVZzK6zWomXjdN2=ixO=KsYf3LktOMhPPA@mail.gmail.com>
	<AANLkTikdmi-TiUs-Rc50Fb8D6KSQNRoZ7z_M+_zgyyT=@mail.gmail.com>
Message-ID: <201104010751.20326.j.veenvan@gmail.com>

I've done something simular in  
https://github.com/phrearch/hwios/blob/master/services/web_ui/service.py

Probably not the best example, but works for me.

kind regards,

Jeroen

On Thursday, March 31, 2011 08:45:49 AM Aljo?a Mohorovi? wrote:
> now i looking at adding an wsgi app to this setup.
> i'm reading
> http://twistedmatrix.com/documents/current/web/howto/web-in-60/wsgi.html
> but can't figure out howto get factory for wsgi if i have:
> 
> ===
> def application(environ, start_response):
>     start_response('200 OK', [('Content-type', 'text/plain')])
>     return ['Hello, world!']
> resource = WSGIResource(reactor, reactor.getThreadPool(), application)
> ===
> 
> i'm looking for something like "reactor.listenTCP(10000,
> wsgi_factory)" but don't know howto do it.
> please point me to proper docs.
> thanks
> 
> Aljosa
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From jml at mumak.net  Fri Apr  1 20:09:02 2011
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 2 Apr 2011 01:09:02 +0100
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre2!
In-Reply-To: <AANLkTindA0cs+paEeFt5UELpU5AFw7Ti7YMaWpBh7m5w@mail.gmail.com>
References: <AANLkTindA0cs+paEeFt5UELpU5AFw7Ti7YMaWpBh7m5w@mail.gmail.com>
Message-ID: <AANLkTimFR-=RSg4o8AjWzaFf-FHFN8GwsewT3FDbk001@mail.gmail.com>

On Thu, Mar 31, 2011 at 3:54 AM, Jessica McKellar
<jessica.mckellar at gmail.com> wrote:
> Having done the builds with two curious guinea pigs by my side, we are
> triply pleased to announce the second 11.0.0 pre-release.
...
> Please test aggressively! Barring the discovery of regressions, we are
> going to cut a final release *this weekend (April 2/3)*.
>

Launchpad test suite passes with 11.0.0pre2. Nice thing about this
release is that we can drop some of the patches we've been maintaining
locally.

Thanks!
jml


From exarkun at twistedmatrix.com  Sun Apr  3 00:05:23 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 03 Apr 2011 04:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1301803523.36.1901043635@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110403/9d0cf3f7/attachment.htm 

From jessica.mckellar at gmail.com  Sun Apr  3 14:01:04 2011
From: jessica.mckellar at gmail.com (Jessica McKellar)
Date: Sun, 3 Apr 2011 14:01:04 -0400
Subject: [Twisted-Python] [ANNOUNCE] Twisted 11.0.0 Released
Message-ID: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>

    <lvh> PAS MAINTENANT CHEF! CHUIS EN TRAIN DE BRANCHER LE REACTEURRRRR

On behalf of Twisted Matrix Laboratories, I am honored to announce the
release of Twisted 11.0.0.

Highlights include:

 * a new templating system in Twisted Web, "twisted.web.template",
derived from Divmod Nevow.
 * improved behavior of subprocess spawning on FreeBSD.
 * the 'twistd mail' plugin now uses the endpoints API, providing a
more consistent command line and compatibility with endpoint plugins.
 * twisted.plugin no longer emits a confusing traceback when it can't
write a cache file.

and numerous other bugfixes and documentation improvements. For more
information, see the NEWS file.

Download it now from:

?  ?<http://twistedmatrix.com/>

or install the 'Twisted' package from PyPI.

Many thanks to Glyph Lefkowitz and Jean-Paul Calderone for
sanity-checking the pre-releases and release, and to the enthusiastic
PyCon 2011 sprinters who annihilated dozens of tickets. Thanks to
*everyone* who contributed tickets, patches, documentation, reviews,
buildbots, feedback, and assistance to fellow users and developers
leading up to this release. It is truly a group effort.

    <http://twistedmatrix.com/highscores/?time=2011-03-01>

is a testament to how much work was done in March alone.

-Jessica


From radix at twistedmatrix.com  Sun Apr  3 14:13:25 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 3 Apr 2011 13:13:25 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 11.0.0 Released
In-Reply-To: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
References: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
Message-ID: <BANLkTikqJVfkow-PLym0g+9pOnaqGwWhjw@mail.gmail.com>

On Sun, Apr 3, 2011 at 1:01 PM, Jessica McKellar <jessica.mckellar at gmail.com
> wrote:

>    <lvh> PAS MAINTENANT CHEF! CHUIS EN TRAIN DE BRANCHER LE REACTEURRRRR
>
> On behalf of Twisted Matrix Laboratories, I am honored to announce the
> release of Twisted 11.0.0.
>
>
Thanks!



-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110403/520dd888/attachment.htm 

From _ at lvh.cc  Sun Apr  3 14:27:12 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sun, 3 Apr 2011 20:27:12 +0200
Subject: [Twisted-Python] [ANNOUNCE] Twisted 11.0.0 Released
In-Reply-To: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
References: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
Message-ID: <BANLkTi=J1530WYyKG80PdkH-QgHW5ivd_A@mail.gmail.com>

Today is indeed a very, very good day.

Thanks!
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110403/13b0b088/attachment.htm 

From techtonik at gmail.com  Sun Apr  3 18:13:22 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 4 Apr 2011 01:13:22 +0300
Subject: [Twisted-Python] Mailman broken images
Message-ID: <BANLkTikZRZqhkjqK4fGnedjs6JGDjCc_Sw@mail.gmail.com>

JFY images from Mailman installation are broken.

http://twistedmatrix.com/cgi-bin/mailman/subscribe/twisted-python
--
anatoly t.


From techtonik at gmail.com  Sun Apr  3 18:25:16 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 4 Apr 2011 01:25:16 +0300
Subject: [Twisted-Python] Where is buildslave configuration?
Message-ID: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>

Hi everybody,

I tried to find where build slave configuration is stored to see when
7th step was added and remove it
http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell_3
perhaps together with the 2nd step
http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell

Why? Well, because when I change version in  _version.py, the command
`python27 twistd --version` still reports the old value.
--
anatoly t.


From exarkun at twistedmatrix.com  Mon Apr  4 00:32:55 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 04 Apr 2011 04:32:55 -0000
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
Message-ID: <20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>

On 3 Apr, 10:25 pm, techtonik at gmail.com wrote:
>Hi everybody,
>
>I tried to find where build slave configuration is stored to see when
>7th step was added and remove it
>http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell_3
>perhaps together with the 2nd step
>http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell
>
>Why? Well, because when I change version in  _version.py, the command
>`python27 twistd --version` still reports the old value.

I don't understand this.  Why do you want to change this configuration? 
Why do you want to change the version?

Unfortunately our buildbot configuration isn't public because it 
contains sensitive data that cannot be given out freely.  But since our 
buildbot configuration is typically only of interest to us, that's 
usually not a problem.

Jean-Paul


From techtonik at gmail.com  Mon Apr  4 03:21:53 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 4 Apr 2011 10:21:53 +0300
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
Message-ID: <BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>

On Mon, Apr 4, 2011 at 7:32 AM,  <exarkun at twistedmatrix.com> wrote:
>>
>>I tried to find where build slave configuration is stored to see when
>>7th step was added and remove it
>>http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell_3
>>perhaps together with the 2nd step
>>http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell
>>
>>Why? Well, because when I change version in ?_version.py, the command
>>`python27 twistd --version` still reports the old value.
>
> I don't understand this. ?Why do you want to change this configuration?
> Why do you want to change the version?

I want to stop the version string from being forcefully added to
copyright.py file during distribution build process. It is already
imported from twisted module.

Why? I changed version to check that bin/trial uses the correct
twisted checkout (which it didn't), and to my surprise `bin/trial
--version` still gave me the number before it was edited in both
checkout and working copy. That was weird, because in my working copy
copyright.py doesn't have forceful version override hack and I
couldn't find it there.

--
anatoly t.


From techtonik at gmail.com  Mon Apr  4 03:23:39 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 4 Apr 2011 10:23:39 +0300
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
	<BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
Message-ID: <BANLkTi=hPuMzZ0QNeYohV92LTPV943HyvQ@mail.gmail.com>

pardon, s/checkout and working copy/checkout version and installed version/


From werner at thieprojects.ch  Mon Apr  4 05:27:07 2011
From: werner at thieprojects.ch (Werner Thie)
Date: Mon, 04 Apr 2011 11:27:07 +0200
Subject: [Twisted-Python] [ANNOUNCE] Twisted 11.0.0 Released
In-Reply-To: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
References: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
Message-ID: <4D998EEB.8010709@thieprojects.ch>

On 4/3/11 8:01 PM, Jessica McKellar wrote:
>      <lvh>  PAS MAINTENANT CHEF! CHUIS EN TRAIN DE BRANCHER LE REACTEURRRRR
>
> On behalf of Twisted Matrix Laboratories, I am honored to announce the
> release of Twisted 11.0.0.

Kudos to all!

Mahalo nui loa, Werner


From jashank.jeremy at optusnet.com.au  Mon Apr  4 05:28:21 2011
From: jashank.jeremy at optusnet.com.au (Jashank Jeremy)
Date: Mon, 4 Apr 2011 19:28:21 +1000
Subject: [Twisted-Python] Creating a hybrid server in Twisted
Message-ID: <20110404092821.GC70065@vk2pj.dyndns.org>

--text follows this line--

Hi,

I'm trying to write a hybrid server that serves either HTTP or my own
custom protocol depending on how it's addressed (distantly inspired by
the IRC bouncer ZNC).  If it receives a standard GET, POST, HEAD,
etc. it sends HTTP traffic, or if it receives the bareword `CORDELIA',
it switches to Cordelia mode.

HTTP works fine with Twisted.Web.  I can serve pages over HTTP (which is
my desired outcome).  However, I'm not sure how to write the Cordelia
handling code.  I've tried my own custom `render_CORDELIA' function, but
it acts too much like HTTP (ie. it returns a result and terminates the
connection), which is not what I want, as the protocol I've designed
involves establishing a two-way conversation, not a single request and
response pair.

So I'm pretty much stuck in a rut.  I don't want to totally reinvent the
wheel just to be able to protocol-switch; I'd prefer to make use of
existing code from Twisted.  How do I hijack Twisted.Web to add protocol
switching?

Jashank

-- 
Jashank Jeremy
PGP: 0x25A5C309
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 196 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20110404/72583c9f/attachment.pgp 

From andrew at bemusement.org  Mon Apr  4 05:43:20 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Mon, 4 Apr 2011 19:43:20 +1000
Subject: [Twisted-Python] Creating a hybrid server in Twisted
In-Reply-To: <20110404092821.GC70065@vk2pj.dyndns.org>
References: <20110404092821.GC70065@vk2pj.dyndns.org>
Message-ID: <20110404094320.GB22356@aihal.home.puzzling.org>

Jashank Jeremy wrote:
[...]
> So I'm pretty much stuck in a rut.  I don't want to totally reinvent the
> wheel just to be able to protocol-switch; I'd prefer to make use of
> existing code from Twisted.  How do I hijack Twisted.Web to add protocol
> switching?

You could override lineReceived along the lines of:

    def connectionMade(self):
    	self.seenFirstLine = False
	HTTPChannel.connectionMade(self)

    def lineReceived(self, line):
	if not self.seenFirstLine and line == 'CORDELIA':
	    # do your protocol switch; e.g. setRawMode and a flag to
	    # pass all bytes directly to some other protocol.  If you
	    # want to be really hackish here you can reassign
	    # self.__class__?
	else:
            self.seenFirstLine = True
	    HTTPChannel.lineReceived(self, line)

Alternatively, you could write a protocol decorator to do much the same
thing (i.e. a Protocol that wraps around the HTTPChannel instance).
There's some infrastructure in twisted.protocols.policies that may help
you write that.

(This sort of thing may make an interesting example to add to the
examples in our docs.  I can imagine it'd be possible to add a
ProtocolSwitchingDecoratorBase or similar to twisted.protocols.policies
to make it easier.  It's not a common requirement, but it is something
that people want to do from time to time.  I know I've done it?)

-Andrew.



From exarkun at twistedmatrix.com  Mon Apr  4 09:01:36 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 04 Apr 2011 13:01:36 -0000
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
	<BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
Message-ID: <20110404130136.1992.1360431224.divmod.xquotient.174@localhost.localdomain>

On 07:21 am, techtonik at gmail.com wrote:
>On Mon, Apr 4, 2011 at 7:32 AM,  <exarkun at twistedmatrix.com> wrote:
>>>
>>>I tried to find where build slave configuration is stored to see when
>>>7th step was added and remove it
>>>http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell_3
>>>perhaps together with the 2nd step
>>>http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell
>>>
>>>Why? Well, because when I change version in ?_version.py, the command
>>>`python27 twistd --version` still reports the old value.
>>
>>I don't understand this. ?Why do you want to change this 
>>configuration?
>>Why do you want to change the version?
>
>I want to stop the version string from being forcefully added to
>copyright.py file during distribution build process. It is already
>imported from twisted module.
>
>Why? I changed version to check that bin/trial uses the correct
>twisted checkout (which it didn't), and to my surprise `bin/trial
>--version` still gave me the number before it was edited in both
>checkout and working copy. That was weird, because in my working copy
>copyright.py doesn't have forceful version override hack and I
>couldn't find it there.

Can you back up and explain the connection to the buildbot?  What is 
your ultimate goal, and why does achieving it involve changing Twisted's 
build infrastructure?

The *-msi builders are there so we can build release packages for 
Windows.  That requires setting the version information the way it's 
being set.

Jean-Paul


From andrew at bemusement.org  Mon Apr  4 09:15:58 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Mon, 4 Apr 2011 23:15:58 +1000
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
	<BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
Message-ID: <20110404131558.GC22356@aihal.home.puzzling.org>

anatoly techtonik wrote:
[?]
> Why? I changed version to check that bin/trial uses the correct
> twisted checkout (which it didn't), and to my surprise `bin/trial
> --version` still gave me the number before it was edited in both
> checkout and working copy. That was weird, because in my working copy
> copyright.py doesn't have forceful version override hack and I
> couldn't find it there.

So your problem isn't the version string, but that running bin/trial in
your Twisted checkout is finding the wrong version of Twisted?

Also, rather than editing random library files, why not just look at the
output of python -v bin/trial?

-Andrew.



From techtonik at gmail.com  Mon Apr  4 09:59:44 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 4 Apr 2011 16:59:44 +0300
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <20110404131558.GC22356@aihal.home.puzzling.org>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
	<BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
	<20110404131558.GC22356@aihal.home.puzzling.org>
Message-ID: <BANLkTiny_KibGcPGsqhwwRPFDpdYx0SQtQ@mail.gmail.com>

On Mon, Apr 4, 2011 at 4:15 PM, Andrew Bennetts <andrew at bemusement.org> wrote:
>
> So your problem isn't the version string, but that running bin/trial in
> your Twisted checkout is finding the wrong version of Twisted?

Exactly. But wrong version string was the cause of troubles with debugging it.

> Also, rather than editing random library files, why not just look at the
> output of python -v bin/trial?

I forgot about it, so I've just used python bin/trial --version
..and it showed me the version..
..it was 11.0.0..
..but 11.0.0 is the released version I've installed..
..and the version in the trunk/ (i.e. my working copy)..
..so I decided to modify these versions to differentiate copies somehow..
..because it was 1 minute fix..
..because I forgot about python -v bin/trial..
..which is 1 second test..
..so I've looked up where the script reads version..
..and it appeared that it imports copyright.py..
..which in turn imports version from _version.py..
..so I've modified _version.py in my working copy..
..and got the same 11.0.0 version in bin/trial --version...
.."AHA!", - said I to myself..
..but decided to check ..
.."just in case"..
..because I like to be sure..
..and because you never know who listens to your trac.core.Component..
..or zope.interface..
..or whatever..
..unless you run it..
..so, I've modified _version.py in my installation..
..and..
..guess that?..
..still got the 11.0.0..
..$%#!, - said I to myself..
..[$%#!] * 3, - said I to myself three minutes later..
..or five..
..or more..
..I don't remember..
..but if took less than three minutes, I wouldn't be writing this letter..
..so..
..I compared source trees..
..and found..
..that there is an extra version assignment..
..at the end of copyright.py

So, I wasted some more time (I won't tell how much) to find where is
this funny piece of code in release toolchain that inserts this
version string? After looking at some note that .msi is downloaded
from buildbot, I though "No, that's impossible", but, alas, it was
there. Not even open sourced as it appears.

So, now I am curious why this copyright.py patch is required?

My ultimate goal is to run a complete build of Twisted will all tests
that results in .msi installer on my Vista machine - the machine with
operating system that was in the list of NeededBuildSlaves 30 minutes
ago. =)
--
anatoly t.


From glyph at twistedmatrix.com  Mon Apr  4 14:23:20 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 4 Apr 2011 14:23:20 -0400
Subject: [Twisted-Python] [ANNOUNCE] Twisted 11.0.0 Released
In-Reply-To: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
References: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
Message-ID: <DE7732EA-2BCF-4463-B7E9-306AFEE2D4FD@twistedmatrix.com>


On Apr 3, 2011, at 2:01 PM, Jessica McKellar wrote:

>    <lvh> PAS MAINTENANT CHEF! CHUIS EN TRAIN DE BRANCHER LE REACTEURRRRR

MAIS SEULEMENT UNE FOIS PAR PRRRRRRRROCESSUS <http://tm.tl/1785>

> Many thanks to Glyph Lefkowitz and Jean-Paul Calderone for
> sanity-checking the pre-releases and release, and to the enthusiastic
> PyCon 2011 sprinters who annihilated dozens of tickets. Thanks to
> *everyone* who contributed tickets, patches, documentation, reviews,
> buildbots, feedback, and assistance to fellow users and developers
> leading up to this release. It is truly a group effort.
> 
>    <http://twistedmatrix.com/highscores/?time=2011-03-01>
> 
> is a testament to how much work was done in March alone.

... let's not forget to thank Jessica as well for taking the initiative to get this release out the door, volunteering when we were badly in need of a release manager (because when aren't we, really) for a relatively quick and efficiently run release cycle.  It's great to get new people involved in the process, doubly so when their execution of said process is flawless :).

So: thanks!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110404/550c25fb/attachment.htm 

From exarkun at twistedmatrix.com  Mon Apr  4 15:55:42 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 04 Apr 2011 19:55:42 -0000
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <BANLkTiny_KibGcPGsqhwwRPFDpdYx0SQtQ@mail.gmail.com>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
	<BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
	<20110404131558.GC22356@aihal.home.puzzling.org>
	<BANLkTiny_KibGcPGsqhwwRPFDpdYx0SQtQ@mail.gmail.com>
Message-ID: <20110404195542.1992.1439171256.divmod.xquotient.183@localhost.localdomain>

On 01:59 pm, techtonik at gmail.com wrote:
>On Mon, Apr 4, 2011 at 4:15 PM, Andrew Bennetts <andrew at bemusement.org> 
>wrote:
>>
>>So your problem isn't the version string, but that running bin/trial 
>>in
>>your Twisted checkout is finding the wrong version of Twisted?
>
>Exactly. But wrong version string was the cause of troubles with 
>debugging it.
>>Also, rather than editing random library files, why not just look at 
>>the
>>output of python -v bin/trial?
>
>I forgot about it, so I've just used python bin/trial --version
>..and it showed me the version..
>..it was 11.0.0..
>..but 11.0.0 is the released version I've installed..
>..and the version in the trunk/ (i.e. my working copy)..
>..so I decided to modify these versions to differentiate copies 
>somehow..
>..because it was 1 minute fix..
>..because I forgot about python -v bin/trial..
>..which is 1 second test..
>..so I've looked up where the script reads version..
>..and it appeared that it imports copyright.py..
>..which in turn imports version from _version.py..
>..so I've modified _version.py in my working copy..
>..and got the same 11.0.0 version in bin/trial --version...
>.."AHA!", - said I to myself..
>..but decided to check ..
>.."just in case"..
>..because I like to be sure..
>..and because you never know who listens to your trac.core.Component..
>..or zope.interface..
>..or whatever..
>..unless you run it..
>..so, I've modified _version.py in my installation..
>..and..
>..guess that?..
>..still got the 11.0.0..
>..$%#!, - said I to myself..
>..[$%#!] * 3, - said I to myself three minutes later..
>..or five..
>..or more..
>..I don't remember..
>..but if took less than three minutes, I wouldn't be writing this 
>letter..
>..so..
>..I compared source trees..
>..and found..
>..that there is an extra version assignment..
>..at the end of copyright.py
>
>So, I wasted some more time (I won't tell how much) to find where is
>this funny piece of code in release toolchain that inserts this
>version string? After looking at some note that .msi is downloaded
>from buildbot, I though "No, that's impossible", but, alas, it was
>there. Not even open sourced as it appears.
>
>So, now I am curious why this copyright.py patch is required?

It's required because of restrictions on what version you are allowed to 
use when building an MSI.  These rules are codified in 
distutils.version.StrictVersion:

    >>> from distutils.version import StrictVersion
    >>> from twisted import __version__
    >>> StrictVersion(__version__)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "/usr/lib/python2.6/distutils/version.py", line 40, in 
__init__
        self.parse(vstring)
      File "/usr/lib/python2.6/distutils/version.py", line 107, in parse
        raise ValueError, "invalid version number '%s'" % vstring
    ValueError: invalid version number '11.0.0+r31541'
    >>> StrictVersion('11.0.0pre1')
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "/usr/lib/python2.6/distutils/version.py", line 40, in 
__init__
        self.parse(vstring)
      File "/usr/lib/python2.6/distutils/version.py", line 107, in parse
        raise ValueError, "invalid version number '%s'" % vstring
    ValueError: invalid version number '11.0.0pre1'

The build step is there to ensure the version is something bdist_msi 
will accept.  It's an unintentional side-effect that the change survives 
all the way through to the built page.
>My ultimate goal is to run a complete build of Twisted will all tests
>that results in .msi installer on my Vista machine - the machine with
>operating system that was in the list of NeededBuildSlaves 30 minutes
>ago. =)

Coincidentally, I noticed that page was somewhat outdated and updated 
it.  If someone would *like* to contribute Vista slaves, that's 
completely fine, but I think the Twisted project will be happy enough if 
we have to skip over Vista and just pay attention to Windows 7.

Jean-Paul


From techtonik at gmail.com  Mon Apr  4 17:00:27 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Tue, 5 Apr 2011 00:00:27 +0300
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <20110404195542.1992.1439171256.divmod.xquotient.183@localhost.localdomain>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
	<BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
	<20110404131558.GC22356@aihal.home.puzzling.org>
	<BANLkTiny_KibGcPGsqhwwRPFDpdYx0SQtQ@mail.gmail.com>
	<20110404195542.1992.1439171256.divmod.xquotient.183@localhost.localdomain>
Message-ID: <BANLkTikc9UEb+YZFn3-H68thUygwjTkNVQ@mail.gmail.com>

On Mon, Apr 4, 2011 at 10:55 PM,  <exarkun at twistedmatrix.com> wrote:
>>
>>So, now I am curious why this copyright.py patch is required?
>
> It's required because of restrictions on what version you are allowed to
> use when building an MSI. ?These rules are codified in
> distutils.version.StrictVersion:
>
> ? ?>>> from distutils.version import StrictVersion
> ? ?>>> from twisted import __version__
> ? ?>>> StrictVersion(__version__)
> ? ?Traceback (most recent call last):
> ? ? ?File "<stdin>", line 1, in <module>
> ? ? ?File "/usr/lib/python2.6/distutils/version.py", line 40, in
> __init__
> ? ? ? ?self.parse(vstring)
> ? ? ?File "/usr/lib/python2.6/distutils/version.py", line 107, in parse
> ? ? ? ?raise ValueError, "invalid version number '%s'" % vstring
> ? ?ValueError: invalid version number '11.0.0+r31541'
> ? ?>>> StrictVersion('11.0.0pre1')
> ? ?Traceback (most recent call last):
> ? ? ?File "<stdin>", line 1, in <module>
> ? ? ?File "/usr/lib/python2.6/distutils/version.py", line 40, in
> __init__
> ? ? ? ?self.parse(vstring)
> ? ? ?File "/usr/lib/python2.6/distutils/version.py", line 107, in parse
> ? ? ? ?raise ValueError, "invalid version number '%s'" % vstring
> ? ?ValueError: invalid version number '11.0.0pre1'
>
> The build step is there to ensure the version is something bdist_msi
> will accept. ?It's an unintentional side-effect that the change survives
> all the way through to the built page.

I've tried to do this directly in setup.py so that local .msi builds
could work too.
http://twistedmatrix.com/trac/ticket/5024

-- 
anatoly t.


From glyph at twistedmatrix.com  Mon Apr  4 17:50:15 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 4 Apr 2011 17:50:15 -0400
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <BANLkTikc9UEb+YZFn3-H68thUygwjTkNVQ@mail.gmail.com>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
	<BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
	<20110404131558.GC22356@aihal.home.puzzling.org>
	<BANLkTiny_KibGcPGsqhwwRPFDpdYx0SQtQ@mail.gmail.com>
	<20110404195542.1992.1439171256.divmod.xquotient.183@localhost.localdomain>
	<BANLkTikc9UEb+YZFn3-H68thUygwjTkNVQ@mail.gmail.com>
Message-ID: <2520D66E-BEFD-434E-A909-58C82DC453B1@twistedmatrix.com>


On Apr 4, 2011, at 5:00 PM, anatoly techtonik wrote:

> I've tried to do this directly in setup.py so that local .msi builds
> could work too.
> http://twistedmatrix.com/trac/ticket/5024

Already reviewed and back to you.  Thanks!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110404/5f2d3a95/attachment.htm 

From brad.milne at devx.runthered.com  Mon Apr  4 21:39:05 2011
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Tue, 5 Apr 2011 13:39:05 +1200
Subject: [Twisted-Python] @inlinecallbacks and AlreadyCalledError in test
	cases
Message-ID: <BANLkTimYX0T=oQ_DZqvxAhrw9TbOM7WK_A@mail.gmail.com>

Hi all

I have recently started switching to trial.unittest from python's own. The
trouble I'm experiencing is when a timeout occurs in my test, it errbacks().
Then the @inlineCallbacks decorator sees the error and errbacks(). But then
a second @inlineCallback in the chain subsequently sees *that* errback and
tries to errback itself. This results in AlreadyCalledError.

In the test setup, various services are started. These are tracked and then
shutdown again in the teardown. Also, there is some polling that happens as
part of the tests (waiting on db activities, for example). These use
deferLater calls, which are also tracked and torn down in the teardown.

I've tried _suppressAlreadyCalled in various places to no avail.

Below is a simple example that shows the problem.

Many thanks
Brad


<code>

from twisted.trial.unittest import TestCase

from twisted.internet import task, reactor

from twisted.internet.defer import inlineCallbacks


#import twisted

#twisted.internet.base.DelayedCall.debug = True

#twisted.internet.defer.setDebugging(True)


class Test1(TestCase):



    def setUp(self):

        # timeout test in 1 second

        self.timeout = 1

        self.jobs = []

        self.addCleanup(self._tearDown)



    def _tearDown(self):

        for d in self.jobs:

            if d and not d.called:

                d.cancel()



    @inlineCallbacks

    def _waitForChange(self):

        # do stuff

        d = task.deferLater(reactor, 0.5, lambda : None)

        self.jobs.append(d)

        yield d

        self.jobs.remove(d)

        # do more stuff



    @inlineCallbacks

    def testHere(self):

        # do stuff

        yield self._waitForChange()

        # do more stuff


    # This one passes OK

    #def testHere(self):

    #   return self._waitForChange()


if __name__ == "__main__":

    import sys

    from twisted.scripts import trial

    sys.argv.extend([sys.argv[0]])

    trial.run()

</code>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110405/cd2f964c/attachment-0001.htm 

From exarkun at twistedmatrix.com  Mon Apr  4 22:21:48 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 05 Apr 2011 02:21:48 -0000
Subject: [Twisted-Python] @inlinecallbacks and AlreadyCalledError in
	test	cases
In-Reply-To: <BANLkTimYX0T=oQ_DZqvxAhrw9TbOM7WK_A@mail.gmail.com>
References: <BANLkTimYX0T=oQ_DZqvxAhrw9TbOM7WK_A@mail.gmail.com>
Message-ID: <20110405022148.1992.42773310.divmod.xquotient.206@localhost.localdomain>

On 01:39 am, brad.milne at devx.runthered.com wrote:
>Hi all
>
>I have recently started switching to trial.unittest from python's own. 
>The
>trouble I'm experiencing is when a timeout occurs in my test, it 
>errbacks().
>Then the @inlineCallbacks decorator sees the error and errbacks(). But 
>then
>a second @inlineCallback in the chain subsequently sees *that* errback 
>and
>tries to errback itself. This results in AlreadyCalledError.
>
>In the test setup, various services are started. These are tracked and 
>then
>shutdown again in the teardown. Also, there is some polling that 
>happens as
>part of the tests (waiting on db activities, for example). These use
>deferLater calls, which are also tracked and torn down in the teardown.
>
>I've tried _suppressAlreadyCalled in various places to no avail.
>
>Below is a simple example that shows the problem.

I tried running the sample, it completes without error.  I guess that's 
not what you're seeing?  What version of Twisted do you have?

Jean-Paul


From brad.milne at devx.runthered.com  Mon Apr  4 22:49:50 2011
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Tue, 5 Apr 2011 14:49:50 +1200
Subject: [Twisted-Python] @inlinecallbacks and AlreadyCalledError in
	test cases
In-Reply-To: <20110405022148.1992.42773310.divmod.xquotient.206@localhost.localdomain>
References: <BANLkTimYX0T=oQ_DZqvxAhrw9TbOM7WK_A@mail.gmail.com>
	<20110405022148.1992.42773310.divmod.xquotient.206@localhost.localdomain>
Message-ID: <BANLkTikugF0rwUcSZ3O3TE+gUoPAB9P+BA@mail.gmail.com>

On 5 April 2011 14:21, <exarkun at twistedmatrix.com> wrote:

> On 01:39 am, brad.milne at devx.runthered.com wrote:
> >Hi all
> >
> >I have recently started switching to trial.unittest from python's own.
> >The
> >trouble I'm experiencing is when a timeout occurs in my test, it
> >errbacks().
> >Then the @inlineCallbacks decorator sees the error and errbacks(). But
> >then
> >a second @inlineCallback in the chain subsequently sees *that* errback
> >and
> >tries to errback itself. This results in AlreadyCalledError.
> >
> >In the test setup, various services are started. These are tracked and
> >then
> >shutdown again in the teardown. Also, there is some polling that
> >happens as
> >part of the tests (waiting on db activities, for example). These use
> >deferLater calls, which are also tracked and torn down in the teardown.
> >
> >I've tried _suppressAlreadyCalled in various places to no avail.
> >
> >Below is a simple example that shows the problem.
>
> I tried running the sample, it completes without error.  I guess that's
> not what you're seeing?  What version of Twisted do you have?
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


Hi Jean-Paul

I'm using 10.2.0 on a mac. Here's my interpreter (using buildout):

#!/opt/local/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python
import sys
sys.path[0:0] = [
    '/Users/brad/Development/python/workspace/Python-Integration/src',
    '/Users/brad/Development/python/eggs/nose-0.11.4-py2.6.egg',
    '/Users/brad/Development/python/eggs/MiniMock-1.2.5-py2.6.egg',
    '/Users/brad/Development/python/eggs/suds-0.4-py2.6.egg',
    '/Users/brad/Development/python/eggs/SOAPpy-0.12.4-py2.6.egg',
    '/Users/brad/Development/python/eggs/wstools-0.3-py2.6.egg',
    '/Users/brad/Development/python/eggs/fpconst-0.7.2-py2.6.egg',

 '/Users/brad/Development/python/eggs/Twisted-10.2.0-py2.6-macosx-10.6-x86_64.egg',

 '/Users/brad/Development/python/eggs/zope.interface-3.6.1-py2.6-macosx-10.6-x86_64.egg',

 '/Users/brad/Development/python/eggs/pymongo-1.9-py2.6-macosx-10.6-x86_64.egg',
    '/Users/brad/Development/python/eggs/pytz-2010h-py2.6.egg',
    ]

The python I have at that location (using MacPorts) is 2.6.6.

Following your email I see that 11.0.0 is released so I tried that and got
the same error:
<snip>
[ERROR]
Traceback (most recent call last):
  File
"/Users/brad/Development/python/eggs/Twisted-11.0.0-py2.6-macosx-10.6-x86_64.egg/twisted/internet/defer.py",
line 1076, in gotResult
    _inlineCallbacks(r, g, deferred)
  File
"/Users/brad/Development/python/eggs/Twisted-11.0.0-py2.6-macosx-10.6-x86_64.egg/twisted/internet/defer.py",
line 1066, in _inlineCallbacks
    deferred.errback()
  File
"/Users/brad/Development/python/eggs/Twisted-11.0.0-py2.6-macosx-10.6-x86_64.egg/twisted/internet/defer.py",
line 388, in errback
    self._startRunCallbacks(fail)
  File
"/Users/brad/Development/python/eggs/Twisted-11.0.0-py2.6-macosx-10.6-x86_64.egg/twisted/internet/defer.py",
line 448, in _startRunCallbacks
    raise AlreadyCalledError
twisted.internet.defer.AlreadyCalledError:
</snip>

Many thanks
Brad
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110405/b54fe06f/attachment.htm 

From jason.heeris at gmail.com  Tue Apr  5 03:08:53 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Tue, 5 Apr 2011 15:08:53 +0800
Subject: [Twisted-Python] Gtk2Reactor: what are the reasons for avoiding
	GLib functions?
Message-ID: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>

I'd like to try and get to the bottom of the various problems with
Twisted + GTK + Windows (mainly issue #4932[1], but see also issues
#4376[2], #4862[3], #1759[4]).

On issue #4376 there's a comment from Exarkun:

"glib handles timeouts much less efficiently than any of the existing
Twisted reactors. Letting glib take care of these would probably make
the glib-based reactors unusable for applications with many timeouts."

Is there a benchmark or piece of code somewhere that verifies this (or
at least gives some sort of demonstration of "unuseable")?

If not, is there some alternative implementation lying around in
version control that tried to use GLib's mainloop functions and was
thrown out for performance reasons?

I ask because my first approach to fixing this would be to ignore
what's already there and try to write something that's quite closely
coupled to the GLib/GTK mainloop. But it sounds like this was already
tried and abandoned, and I want to be able to make sure I'm not (a)
writing something that was already written, or (b) performs too poorly
to be of any use. It would be good to have a metric available.

Cheers,
Jason

[1] http://twistedmatrix.com/trac/ticket/4932
[2] http://twistedmatrix.com/trac/ticket/4376
[3] http://twistedmatrix.com/trac/ticket/4862
[4] http://twistedmatrix.com/trac/ticket/1759


From andrew at bemusement.org  Tue Apr  5 03:51:33 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 5 Apr 2011 17:51:33 +1000
Subject: [Twisted-Python] Gtk2Reactor: what are the reasons for avoiding
 GLib functions?
In-Reply-To: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>
References: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>
Message-ID: <20110405075133.GG22356@aihal.home.puzzling.org>

Jason Heeris wrote:
[?]
> "glib handles timeouts much less efficiently than any of the existing
> Twisted reactors. Letting glib take care of these would probably make
> the glib-based reactors unusable for applications with many timeouts."
> 
> Is there a benchmark or piece of code somewhere that verifies this (or
> at least gives some sort of demonstration of "unuseable")?

?and if someone does have such a benchmark, it'd be great to add it to
<http://speed.twistedmatrix.com/> :)

-Andrew.


From itamar at itamarst.org  Tue Apr  5 08:04:46 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 05 Apr 2011 08:04:46 -0400
Subject: [Twisted-Python] Gtk2Reactor: what are the reasons for avoiding
 GLib functions?
In-Reply-To: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>
References: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>
Message-ID: <1302005086.1655.2.camel@blake>

On Tue, 2011-04-05 at 15:08 +0800, Jason Heeris wrote:
> I'd like to try and get to the bottom of the various problems with
> Twisted + GTK + Windows (mainly issue #4932[1], but see also issues
> #4376[2], #4862[3], #1759[4]).

Thanks for looking into this!

> On issue #4376 there's a comment from Exarkun:
> 
> "glib handles timeouts much less efficiently than any of the existing
> Twisted reactors. Letting glib take care of these would probably make
> the glib-based reactors unusable for applications with many timeouts."
> 
> Is there a benchmark or piece of code somewhere that verifies this (or
> at least gives some sort of demonstration of "unuseable")?

https://bugzilla.gnome.org/show_bug.cgi?id=143061

I don't think it's ever going to get fixed on the gtk side, I filed that
bug in 2004. The issues on Windows may be different than this, for that
matter.



From ziga.seilnacht at gmail.com  Tue Apr  5 08:06:47 2011
From: ziga.seilnacht at gmail.com (=?windows-1252?Q?=8Eiga_Seilnacht?=)
Date: Tue, 05 Apr 2011 14:06:47 +0200
Subject: [Twisted-Python] Gtk2Reactor: what are the reasons for avoiding
 GLib functions?
In-Reply-To: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>
References: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>
Message-ID: <4D9B05D7.4080909@gmail.com>

Hello,

On 5.4.2011 9:08, Jason Heeris wrote:
> I'd like to try and get to the bottom of the various problems with
> Twisted + GTK + Windows (mainly issue #4932[1], but see also issues
> #4376[2], #4862[3], #1759[4]).
>
> On issue #4376 there's a comment from Exarkun:
>
> "glib handles timeouts much less efficiently than any of the existing
> Twisted reactors. Letting glib take care of these would probably make
> the glib-based reactors unusable for applications with many timeouts."
>
> Is there a benchmark or piece of code somewhere that verifies this (or
> at least gives some sort of demonstration of "unuseable")?
>

I think that the main reason for PortableGtkReactor being used on Windows
is due to glib's IO channels limitations on Windows. You can only have 63
channels in the event loop at the same time due to g_poll's use of
MsgWaitForMultipleObject.

In addition, IO channels are quite buggy on Windows when used for sockets,
see the comment at the top of the glib/giowin32.c file in the glib source
for a list of issues. E.g. I suspect that the second problem described in:

https://bugzilla.gnome.org/show_bug.cgi?id=357674

is responsible for Twisted's ticket #3371, because a similar problem
can be seen with win32eventreactor (ticket #4950), which also uses
WSAEventSelect for socket monitoring.

Best regards,
Ziga


From jason.heeris at gmail.com  Tue Apr  5 09:19:12 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Tue, 5 Apr 2011 21:19:12 +0800
Subject: [Twisted-Python] Gtk2Reactor: what are the reasons for avoiding
 GLib functions?
In-Reply-To: <4D9B05D7.4080909@gmail.com>
References: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>
	<4D9B05D7.4080909@gmail.com>
Message-ID: <BANLkTi=++bwE5aW4VxruEgYAST6E3x1=_g@mail.gmail.com>

On 5 April 2011 20:06, ?iga Seilnacht <ziga.seilnacht at gmail.com> wrote:
> I think that the main reason for PortableGtkReactor being used on Windows
> is due to glib's IO channels limitations on Windows. You can only have 63
> channels in the event loop at the same time due to g_poll's use of
> MsgWaitForMultipleObject.

The trouble is, PortableGtkReactor is just out-and-out unusable for
certain applications. In my case, it turned a 3 minute comms session
into a 25 hour session ? OR, I could have my app completely max out
the CPU while it's running. Neither is workable in any realistic
context. But I'm pretty sure I don't need > 63 I/O channels open at
once, unless I'm missing something about the inner workings of
Twisted.

(I mean no offense, I can see why it has to work the way it does...
but its weakness shows up in exactly the kind of protocol I need to
use.)

> In addition, IO channels are quite buggy on Windows when used for sockets,
> see the comment at the top of the glib/giowin32.c file in the glib source
> for a list of issues. E.g. I suspect that the second problem described in:
>
> https://bugzilla.gnome.org/show_bug.cgi?id=357674
>
> is responsible for Twisted's ticket #3371, because a similar problem
> can be seen with win32eventreactor (ticket #4950), which also uses
> WSAEventSelect for socket monitoring.

Hmm. I may be in over my head here. But I won't give up just yet,
since it *would* be nice to be able to use PyGTK for the things I need
to do.

Thanks for the info,
Jason


From wn10 at cornell.edu  Tue Apr  5 15:03:59 2011
From: wn10 at cornell.edu (Bill Noon)
Date: Tue, 5 Apr 2011 15:03:59 -0400
Subject: [Twisted-Python] Twisted 11.0 and Foolscap incompatibility
Message-ID: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>

It looks like the new ssl/tls code doesn't work with Foolscap.  The ConnectionMixin is treating the self.protocol
object as a transport and calls write() and loseConnection() on it.

Here is a traceback:
	Traceback (most recent call last):
	  File "/usr/lib64/python2.6/site-packages/foolscap-0.6.1_-py2.6.egg/foolscap/slicers/root.py", line 107, in send
	    d.callback(None)
	  File "/usr/lib64/python2.6/site-packages/Twisted-11.0.0_r31548-py2.6-linux-x86_64.egg/twisted/internet/defer.py", line 361, in callback
	    self._startRunCallbacks(result)
	  File "/usr/lib64/python2.6/site-packages/Twisted-11.0.0_r31548-py2.6-linux-x86_64.egg/twisted/internet/defer.py", line 455, in _startRunCallbacks
	    self._runCallbacks()
	  File "/usr/lib64/python2.6/site-packages/Twisted-11.0.0_r31548-py2.6-linux-x86_64.egg/twisted/internet/defer.py", line 542, in _runCallbacks
	    current.result = callback(current.result, *args, **kw)
	--- <exception caught here> ---
	  File "/usr/lib64/python2.6/site-packages/foolscap-0.6.1_-py2.6.egg/foolscap/banana.py", line 216, in produce
	    self.pushSlicer(slicer, obj)
	  File "/usr/lib64/python2.6/site-packages/foolscap-0.6.1_-py2.6.egg/foolscap/banana.py", line 352, in pushSlicer
	    openID = self.sendOpen()
	  File "/usr/lib64/python2.6/site-packages/foolscap-0.6.1_-py2.6.egg/foolscap/banana.py", line 481, in sendOpen
	    int2b128(openID, self.transport.write)
	  File "/usr/lib64/python2.6/site-packages/foolscap-0.6.1_-py2.6.egg/foolscap/banana.py", line 24, in int2b128
	    stream(chr(0))
	  File "/usr/lib64/python2.6/site-packages/Twisted-11.0.0_r31548-py2.6-linux-x86_64.egg/twisted/internet/_newtls.py", line 176, in write
	    self.protocol.write(bytes)
	exceptions.AttributeError: 'Broker' object has no attribute 'write'
	

Any workarounds or suggestions?  Reverting to Twisted 10.2 works for now.

--Bill Noon
Northeast Regional Climate Center
Cornell University



From glyph at twistedmatrix.com  Tue Apr  5 15:23:01 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Apr 2011 15:23:01 -0400
Subject: [Twisted-Python] Twisted SVN HEAD and Foolscap incompatibility
In-Reply-To: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>
References: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>
Message-ID: <D6F6DCEF-BA7C-423C-A22A-4FACC45B2645@twistedmatrix.com>


On Apr 5, 2011, at 3:03 PM, Bill Noon wrote:

> 	  File "/usr/lib64/python2.6/site-packages/Twisted-11.0.0_r31548-py2.6-linux-x86_64.egg/twisted/internet/_newtls.py", line 176, in write

Nobody panic :).

r31548 of trunk is not Twisted 11.0.0.  Twisted 11.0 diverged from trunk as of <http://twistedmatrix.com/trac/changeset/31390>.

Perhaps more tellingly, there is no _newtls.py in Twisted 11.0: <http://twistedmatrix.com/trac/browser/tags/releases/twisted-11.0.0/twisted/internet>.  (Plus, I triple-checked the tarballs just now to make sure that they were released from the right place, and they were.)

That revision of trunk would include <http://twistedmatrix.com/trac/changeset/31537> though, which is some new SSL code _not_ included in the 11.0 release.

So - yes, this is a bug, but NOT in the 11.0 release.

Please file a bug, noting that it's a regression.  Depending on what level of nastiness foolscap is getting up to in order to trigger this behavior, we may have to revert <http://tm.tl/4854>.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110405/7b088c6c/attachment.htm 

From glyph at twistedmatrix.com  Tue Apr  5 16:02:29 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Apr 2011 16:02:29 -0400
Subject: [Twisted-Python] Twisted 11.0 and Foolscap incompatibility
In-Reply-To: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>
References: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>
Message-ID: <14E14BF9-4CEF-4BA0-974B-8CC0362EED31@twistedmatrix.com>


On Apr 5, 2011, at 3:03 PM, Bill Noon wrote:

> Reverting to Twisted 10.2 works for now.

You should just revert to the actual released version of 11.0.  How did you install 11.0?  Is easy_install screen-scraping the wrong link again, or something like that?

By the way; correct version number or not, thanks for bringing this to our attention.  It's good to get feedback from user testing on features like this _before_ they make it into a release ;-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110405/d8766168/attachment.htm 

From wn10 at cornell.edu  Tue Apr  5 16:04:51 2011
From: wn10 at cornell.edu (Bill Noon)
Date: Tue, 5 Apr 2011 16:04:51 -0400
Subject: [Twisted-Python] Twisted SVN HEAD and Foolscap incompatibility
In-Reply-To: <D6F6DCEF-BA7C-423C-A22A-4FACC45B2645@twistedmatrix.com>
References: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>
	<D6F6DCEF-BA7C-423C-A22A-4FACC45B2645@twistedmatrix.com>
Message-ID: <BB774354-13C7-4F81-BB4E-A7730FA2DD3C@cornell.edu>


On Apr 5, 2011, at 3:23 PM, Glyph Lefkowitz wrote:

> 
> On Apr 5, 2011, at 3:03 PM, Bill Noon wrote:
> 
>> 	  File "/usr/lib64/python2.6/site-packages/Twisted-11.0.0_r31548-py2.6-linux-x86_64.egg/twisted/internet/_newtls.py", line 176, in write
> 
> Nobody panic :).
Sorry about misstating that this was in the 11.0 release.

> 
> r31548 of trunk is not Twisted 11.0.0.  Twisted 11.0 diverged from trunk as of <http://twistedmatrix.com/trac/changeset/31390>.
> 
> Perhaps more tellingly, there is no _newtls.py in Twisted 11.0: <http://twistedmatrix.com/trac/browser/tags/releases/twisted-11.0.0/twisted/internet>.  (Plus, I triple-checked the tarballs just now to make sure that they were released from the right place, and they were.)
> 
> That revision of trunk would include <http://twistedmatrix.com/trac/changeset/31537> though, which is some new SSL code _not_ included in the 11.0 release.
> 
> So - yes, this is a bug, but NOT in the 11.0 release.
> 
> Please file a bug, noting that it's a regression.  Depending on what level of nastiness foolscap is getting up to in order to trigger this behavior, we may have to revert <http://tm.tl/4854>.

Ok.  It is ticket 5028, http://twistedmatrix.com/trac/ticket/5028

--Bill

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110405/9e7ab071/attachment.htm 

From wn10 at cornell.edu  Tue Apr  5 16:07:58 2011
From: wn10 at cornell.edu (Bill Noon)
Date: Tue, 5 Apr 2011 16:07:58 -0400
Subject: [Twisted-Python] Twisted 11.0 and Foolscap incompatibility
In-Reply-To: <14E14BF9-4CEF-4BA0-974B-8CC0362EED31@twistedmatrix.com>
References: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>
	<14E14BF9-4CEF-4BA0-974B-8CC0362EED31@twistedmatrix.com>
Message-ID: <83F6FE3B-61CF-4046-AC37-6EA313FD554D@cornell.edu>


On Apr 5, 2011, at 4:02 PM, Glyph Lefkowitz wrote:

> 
> On Apr 5, 2011, at 3:03 PM, Bill Noon wrote:
> 
>> Reverting to Twisted 10.2 works for now.
> 
> You should just revert to the actual released version of 11.0.  How did you install 11.0?  Is easy_install screen-scraping the wrong link again, or something like that?

No, my fault for running from svn_head.  

> By the way; correct version number or not, thanks for bringing this to our attention.  It's good to get feedback from user testing on features like this _before_ they make it into a release ;-).

Just doing my part...

--Bill


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110405/d599f55c/attachment.htm 

From glyph at twistedmatrix.com  Tue Apr  5 21:54:18 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Apr 2011 21:54:18 -0400
Subject: [Twisted-Python] [Twisted-web] Creating a hybrid server in
	Twisted
In-Reply-To: <m2bp0lbmnt.fsf@valheru.db3l.homeip.net>
References: <20110404092821.GC70065@vk2pj.dyndns.org>
	<m2bp0lbmnt.fsf@valheru.db3l.homeip.net>
Message-ID: <7F3A6FC0-6F74-4991-AE30-E6E5125265D7@twistedmatrix.com>


On Apr 4, 2011, at 7:51 PM, David Bolen wrote:

> Jashank Jeremy <jashank.jeremy at optusnet.com.au> writes:
> 
>> So I'm pretty much stuck in a rut.  I don't want to totally reinvent the
>> wheel just to be able to protocol-switch; I'd prefer to make use of
>> existing code from Twisted.  How do I hijack Twisted.Web to add protocol
>> switching?
> 

> To insert your own protocol code, you want to set the "protocol"
> attribute of your Site (or HTTPFactory if using that directly)
> instance to your own "hybrid" protocol class.

It would be slightly better to override buildProtocol, because that way you can call the superclass's implementation more idiomatically.  But, the idea is the same.

Note that we'd really like to have protocol switch functionality built into Twisted proper so that you don't have to jump through all these hoops.  Please feel free to contribute patches to fix this ticket: <http://twistedmatrix.com/trac/ticket/3204>.



From glyph at twistedmatrix.com  Tue Apr  5 21:57:21 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Apr 2011 21:57:21 -0400
Subject: [Twisted-Python] Twisted SVN HEAD and Foolscap incompatibility
In-Reply-To: <BB774354-13C7-4F81-BB4E-A7730FA2DD3C@cornell.edu>
References: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>
	<D6F6DCEF-BA7C-423C-A22A-4FACC45B2645@twistedmatrix.com>
	<BB774354-13C7-4F81-BB4E-A7730FA2DD3C@cornell.edu>
Message-ID: <DC9CC595-97F3-4718-9F8A-5391B1760E40@twistedmatrix.com>


On Apr 5, 2011, at 4:04 PM, Bill Noon wrote:

> Ok.  It is ticket 5028, http://twistedmatrix.com/trac/ticket/5028

As exarkun already noted here: <http://twistedmatrix.com/trac/ticket/5028#comment:2>, this is caused by foolscap manipulating an attribute which probably shouldn't have been public in the first place, and *definitely* isn't mutable.  This means that there are several other types of instrumentation which foolscap will break.

This is a popular ticket this week - I just mentioned it in another thread: <http://twistedmatrix.com/trac/ticket/3204>.  If foolscap needs to switch protocols mid-stream, it either needs to do what AMP does, or contribute a real fix for that ticket.  (And then require a new version of Twisted :).)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110405/0f66e203/attachment-0001.htm 

From techtonik at gmail.com  Wed Apr  6 03:16:03 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 6 Apr 2011 10:16:03 +0300
Subject: [Twisted-Python] Persisted protocol?
Message-ID: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>

Hi again,



From stephen at thorne.id.au  Wed Apr  6 03:26:59 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Wed, 6 Apr 2011 17:26:59 +1000
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
Message-ID: <20110406072659.GC764@thorne.id.au>

On 2011-04-06, anatoly techtonik wrote:
> From http://twistedmatrix.com/documents/current/core/howto/udp.html
> 
> """As you can see, the protocol is registered with the reactor. This means it
> may be persisted if it's added to an application..."""
> 
> What does 'persisted` here mean?

It sounds like this is a rememant of when the reactor shutdown it used
to serialise its state so it could be restarted later.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue


From screwtape at froup.com  Wed Apr  6 03:30:27 2011
From: screwtape at froup.com (Tim Allen)
Date: Wed, 6 Apr 2011 17:30:27 +1000
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
Message-ID: <20110406073027.GP5510@boombah.thristian.org>

On Wed, Apr 06, 2011 at 10:16:03AM +0300, anatoly techtonik wrote:
> From http://twistedmatrix.com/documents/current/core/howto/udp.html
> 
> """As you can see, the protocol is registered with the reactor. This means it
> may be persisted if it's added to an application..."""
> 
> What does 'persisted` here mean?

At some point in the past, somebody decided it would be a great idea to
have Twisted's "twistd" start applications from Python pickles; you
could start up a server, configure it interactively, and when you shut
it down the entire server state would be persisted in a pickle-file;
when you started it up it would resume exactly as it had been when you
shut it down.

The idea seems to have fallen from grace, possibly because restarting
a process is often the simplest way to resolve a production problem.
These days, new Twisted users are encouraged to use Python ".tac" files
rather than ".tap" pickles, and I expect that sentence is just a relic
of that bygone era.


From spongelavapaul at googlemail.com  Wed Apr  6 05:55:25 2011
From: spongelavapaul at googlemail.com (Paul Thomas)
Date: Wed, 6 Apr 2011 10:55:25 +0100
Subject: [Twisted-Python] Instrumenting Reactors
Message-ID: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>

I have a reactor which is getting busier over time and I'd like to find out where the cycles are going. Using the profiler isn't really practical on a server running for days, so I'd like to instrument the reactor to show me which I/O events are taking the longest to deal with. 

Should I just hack into the reactor somewhere? Or is there something sitting in a library I haven't seen that will help with this?

Paul. 


From _ at lvh.cc  Wed Apr  6 06:35:37 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 6 Apr 2011 12:35:37 +0200
Subject: [Twisted-Python] Instrumenting Reactors
In-Reply-To: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
References: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
Message-ID: <BANLkTi=C1XMCG_W05umNQPM2Wy09V=+GQQ@mail.gmail.com>

Hi!


No guarantee it's an optimal solution, but when I wanted to inspect a
running process (which sounds like what you're doing), I had a pretty good
time with manhole. (If you're not familiar with that: it's in Twisted Conch,
and it's basically just a way to SSH in to a running box and get a REPL).

In that REPL, you can of course do things like inspect the running reactor
:-)


cheers
lvh

On Wed, Apr 6, 2011 at 11:55 AM, Paul Thomas
<spongelavapaul at googlemail.com>wrote:

> I have a reactor which is getting busier over time and I'd like to find out
> where the cycles are going. Using the profiler isn't really practical on a
> server running for days, so I'd like to instrument the reactor to show me
> which I/O events are taking the longest to deal with.
>
> Should I just hack into the reactor somewhere? Or is there something
> sitting in a library I haven't seen that will help with this?
>
> Paul.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110406/c6a96c46/attachment.htm 

From _ at lvh.cc  Wed Apr  6 06:41:08 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 6 Apr 2011 12:41:08 +0200
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <20110406073027.GP5510@boombah.thristian.org>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
	<20110406073027.GP5510@boombah.thristian.org>
Message-ID: <BANLkTi=dVRpv_yh+8SgCVU=HUagfr7e5YQ@mail.gmail.com>

On Wed, Apr 6, 2011 at 9:30 AM, Tim Allen <screwtape at froup.com> wrote:

> On Wed, Apr 06, 2011 at 10:16:03AM +0300, anatoly techtonik wrote:
> > From http://twistedmatrix.com/documents/current/core/howto/udp.html
> >
> > """As you can see, the protocol is registered with the reactor. This
> means it
> > may be persisted if it's added to an application..."""
> >
> > What does 'persisted` here mean?
>
> At some point in the past, somebody decided it would be a great idea to
> have Twisted's "twistd" start applications from Python pickles; you
> could start up a server, configure it interactively, and when you shut
> it down the entire server state would be persisted in a pickle-file;
> when you started it up it would resume exactly as it had been when you
> shut it down.
>

Whoa hang on. Without trying to hijack the thread, this is the entire
premise of infobarb, the IRC bot I'm building for #python-*, except
s/pickle/sqlite/, so if this is a horrible idea I'd like to know before I
build it.

>
> The idea seems to have fallen from grace, possibly because restarting
> a process is often the simplest way to resolve a production problem.
> These days, new Twisted users are encouraged to use Python ".tac" files
> rather than ".tap" pickles, and I expect that sentence is just a relic
> of that bygone era.
>

I suppose the problem you're suggesting is that the pickle is in a state
where running the server is impossible: do you mean like the pickle is
corrupted, or pickle has a bunch of settings that just can't work... ?

Would this problem be fixed by implementing features like differential
snapshots? Maybe a replayable or reverse-replayable event log?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110406/c01a91de/attachment.htm 

From screwtape at froup.com  Wed Apr  6 07:27:36 2011
From: screwtape at froup.com (Tim Allen)
Date: Wed, 6 Apr 2011 21:27:36 +1000
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <BANLkTi=dVRpv_yh+8SgCVU=HUagfr7e5YQ@mail.gmail.com>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
	<20110406073027.GP5510@boombah.thristian.org>
	<BANLkTi=dVRpv_yh+8SgCVU=HUagfr7e5YQ@mail.gmail.com>
Message-ID: <20110406112736.GQ5510@boombah.thristian.org>

On Wed, Apr 06, 2011 at 12:41:08PM +0200, Laurens Van Houtven wrote:
> Whoa hang on. Without trying to hijack the thread, this is the entire
> premise of infobarb, the IRC bot I'm building for #python-*, except
> s/pickle/sqlite/, so if this is a horrible idea I'd like to know before I
> build it.

I'm not familiar with the reasons Twistd moved from .tap to .tac (it's
rather before my time), but as a user I'd be worried about things like
"what happens if, due to a bug, the server winds up choking on some
unexpected input, or deadlocked, or just mis-files some piece of state?"
Restarting the process in question is a sledgehammer approach, but
that's often what you want if the alternative is unscheduled downtime.

The difference between Pickle and SQLite is that a SQLite database has
probably had some thought put into its schema, and is much less likely
to accidentally scoop up random other objects by reference. Also, if
your database *does* pick up some unwanted state, you have the option of
tinkering with the database manually; something that's much more
difficult to do with pickles.

I'd be interested in hearing from Twisted greybeards why .tap was
deprecated, but I don't think your IRC bot has a fatal design flaw.


From _ at lvh.cc  Wed Apr  6 07:32:53 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 6 Apr 2011 13:32:53 +0200
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <20110406112736.GQ5510@boombah.thristian.org>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
	<20110406073027.GP5510@boombah.thristian.org>
	<BANLkTi=dVRpv_yh+8SgCVU=HUagfr7e5YQ@mail.gmail.com>
	<20110406112736.GQ5510@boombah.thristian.org>
Message-ID: <BANLkTinw=-vGrMNGOQSsJi+ZGk65J4KfpA@mail.gmail.com>

On Wed, Apr 6, 2011 at 1:27 PM, Tim Allen <screwtape at froup.com> wrote:

> On Wed, Apr 06, 2011 at 12:41:08PM +0200, Laurens Van Houtven wrote:
> > Whoa hang on. Without trying to hijack the thread, this is the entire
> > premise of infobarb, the IRC bot I'm building for #python-*, except
> > s/pickle/sqlite/, so if this is a horrible idea I'd like to know before I
> > build it.
>
> I'm not familiar with the reasons Twistd moved from .tap to .tac (it's
> rather before my time), but as a user I'd be worried about things like
> "what happens if, due to a bug, the server winds up choking on some
> unexpected input, or deadlocked, or just mis-files some piece of state?"
> Restarting the process in question is a sledgehammer approach, but
> that's often what you want if the alternative is unscheduled downtime.


Right -- I don't think this applies to my bot since if it does the argument
can also be extended to "don't have any persistence at all, state is bad"
;-) (It is, but that's not the most pragmatic of answers.)

The difference between Pickle and SQLite is that a SQLite database has
> probably had some thought put into its schema, and is much less likely
> to accidentally scoop up random other objects by reference. Also, if
> your database *does* pick up some unwanted state, you have the option of
> tinkering with the database manually; something that's much more
> difficult to do with pickles.
>

Right -- I'm giving plugins to the bot a SQLite database, it's up to them if
they use it. All state serialization is explicit. I'm hoping it's going to
be more sensible as a result.

I'd be interested in hearing from Twisted greybeards why .tap was
> deprecated, but I don't think your IRC bot has a fatal design flaw.
>

Whew :) Thanks for confirming anyway :)

-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110406/2824c77f/attachment-0001.htm 

From itamar at itamarst.org  Wed Apr  6 08:19:46 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 06 Apr 2011 08:19:46 -0400
Subject: [Twisted-Python] Instrumenting Reactors
In-Reply-To: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
References: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
Message-ID: <1302092386.1703.1.camel@blake>

On Wed, 2011-04-06 at 10:55 +0100, Paul Thomas wrote:
> I have a reactor which is getting busier over time and I'd like to
> find out where the cycles are going. Using the profiler isn't really
> practical on a server running for days, so I'd like to instrument the
> reactor to show me which I/O events are taking the longest to deal
> with. 

You may just want to wrap manual profiling code around your code's entry
points (e.g. dataReceived/connectionMade/connectionLost/whatever gets
callLatered). It would be nice if you could get the reactor to turn this
sort of info on/off in a running system, though.



From danb.lists at googlemail.com  Wed Apr  6 08:21:38 2011
From: danb.lists at googlemail.com (Dan-Cristian Bogos)
Date: Wed, 6 Apr 2011 14:21:38 +0200
Subject: [Twisted-Python] AMP Client disconnecting from server on high
	memory usage
Message-ID: <BANLkTinGj7deQF_jhdP4oBYx=w0hc-noFA@mail.gmail.com>

Hey Jean-Paul,

For record's sake, I thought I announce here that my issue got fixed.

The problem was that I was loading the data in startService method and
it looks like there are some timers which prevent the method to block
for a longer period of time. Loading the data in __init__ of
service.Service object did the trick and I have no problem anymore
with large data.

Have a good one!

DanB


From mithrandi at mithrandi.net  Wed Apr  6 08:53:11 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 6 Apr 2011 14:53:11 +0200
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <BANLkTinw=-vGrMNGOQSsJi+ZGk65J4KfpA@mail.gmail.com>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
	<20110406073027.GP5510@boombah.thristian.org>
	<BANLkTi=dVRpv_yh+8SgCVU=HUagfr7e5YQ@mail.gmail.com>
	<20110406112736.GQ5510@boombah.thristian.org>
	<BANLkTinw=-vGrMNGOQSsJi+ZGk65J4KfpA@mail.gmail.com>
Message-ID: <BANLkTikB9ecn1j=SgdSA6mGSv+PXGrQoxA@mail.gmail.com>

On Wed, Apr 6, 2011 at 1:32 PM, Laurens Van Houtven <_ at lvh.cc> wrote:
> On Wed, Apr 6, 2011 at 1:27 PM, Tim Allen <screwtape at froup.com> wrote:
>> The difference between Pickle and SQLite is that a SQLite database has
>> probably had some thought put into its schema, and is much less likely
>> to accidentally scoop up random other objects by reference. Also, if
>> your database *does* pick up some unwanted state, you have the option of
>> tinkering with the database manually; something that's much more
>> difficult to do with pickles.
>
> Right -- I'm giving plugins to the bot a SQLite database, it's up to them if
> they use it. All state serialization is explicit. I'm hoping it's going to
> be more sensible as a result.

For what it's worth, you might find this interesting:

https://launchpad.net/eridanus

It's an IRC bot implemented on Mantissa, which uses Axiom databases
(SQLite under the hood) in order to store and persist service
configuration as well as user data.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From exarkun at twistedmatrix.com  Wed Apr  6 08:58:05 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 06 Apr 2011 12:58:05 -0000
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
Message-ID: <20110406125805.1992.1490470530.divmod.xquotient.221@localhost.localdomain>

On 07:16 am, techtonik at gmail.com wrote:
>Hi again,
>> From http://twistedmatrix.com/documents/current/core/howto/udp.html
>
>"""As you can see, the protocol is registered with the reactor. This 
>means it
>may be persisted if it's added to an application..."""
>
>What does 'persisted` here mean?

As others have pointed out, this is referring to an old feature which is 
being phased out.  It would be great if you could file a ticket for 
cleaning up the docs; they mostly shouldn't talk about application 
persistence (certainly not in the UDP section).

Jean-Paul


From _ at lvh.cc  Wed Apr  6 09:13:00 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 6 Apr 2011 15:13:00 +0200
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <BANLkTikB9ecn1j=SgdSA6mGSv+PXGrQoxA@mail.gmail.com>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
	<20110406073027.GP5510@boombah.thristian.org>
	<BANLkTi=dVRpv_yh+8SgCVU=HUagfr7e5YQ@mail.gmail.com>
	<20110406112736.GQ5510@boombah.thristian.org>
	<BANLkTinw=-vGrMNGOQSsJi+ZGk65J4KfpA@mail.gmail.com>
	<BANLkTikB9ecn1j=SgdSA6mGSv+PXGrQoxA@mail.gmail.com>
Message-ID: <BANLkTimuKsjw2Mo=DFDQMiP34pTCE_79Zg@mail.gmail.com>

Cool, thanks for the link to Eridanus! I hadn't seen it yet :-)


cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110406/397fbc49/attachment.htm 

From _ at lvh.cc  Wed Apr  6 09:13:31 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 6 Apr 2011 15:13:31 +0200
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <BANLkTimuKsjw2Mo=DFDQMiP34pTCE_79Zg@mail.gmail.com>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
	<20110406073027.GP5510@boombah.thristian.org>
	<BANLkTi=dVRpv_yh+8SgCVU=HUagfr7e5YQ@mail.gmail.com>
	<20110406112736.GQ5510@boombah.thristian.org>
	<BANLkTinw=-vGrMNGOQSsJi+ZGk65J4KfpA@mail.gmail.com>
	<BANLkTikB9ecn1j=SgdSA6mGSv+PXGrQoxA@mail.gmail.com>
	<BANLkTimuKsjw2Mo=DFDQMiP34pTCE_79Zg@mail.gmail.com>
Message-ID: <BANLkTik+MQ+mWHdAmTKW5PK14YG1Lyk+vA@mail.gmail.com>

Urgh, thanks gmail -- that was supposed to be to mithrandi, not to the
entire mailing list. My apologies.


cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110406/7b573cde/attachment.htm 

From p.mayers at imperial.ac.uk  Wed Apr  6 09:25:04 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 06 Apr 2011 14:25:04 +0100
Subject: [Twisted-Python] Instrumenting Reactors
In-Reply-To: <1302092386.1703.1.camel@blake>
References: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
	<1302092386.1703.1.camel@blake>
Message-ID: <4D9C69B0.6030608@imperial.ac.uk>

On 06/04/11 13:19, Itamar Turner-Trauring wrote:
> On Wed, 2011-04-06 at 10:55 +0100, Paul Thomas wrote:
>> I have a reactor which is getting busier over time and I'd like to
>> find out where the cycles are going. Using the profiler isn't really
>> practical on a server running for days, so I'd like to instrument the
>> reactor to show me which I/O events are taking the longest to deal
>> with.
>
> You may just want to wrap manual profiling code around your code's entry
> points (e.g. dataReceived/connectionMade/connectionLost/whatever gets
> callLatered). It would be nice if you could get the reactor to turn this
> sort of info on/off in a running system, though.

I've done this with a decorator & dictionary before, including counting 
time inside deferred return values separately from the original function 
call.


From techtonik at gmail.com  Wed Apr  6 12:06:03 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 6 Apr 2011 19:06:03 +0300
Subject: [Twisted-Python] Instrumenting Reactors
In-Reply-To: <BANLkTi=C1XMCG_W05umNQPM2Wy09V=+GQQ@mail.gmail.com>
References: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
	<BANLkTi=C1XMCG_W05umNQPM2Wy09V=+GQQ@mail.gmail.com>
Message-ID: <BANLkTim4fUwWFnsaj6Mq=sTwTkqbrMMtig@mail.gmail.com>

On Wed, Apr 6, 2011 at 1:35 PM, Laurens Van Houtven <_ at lvh.cc> wrote:
> Hi!
>
>
> No guarantee it's an optimal solution, but when I wanted to inspect a
> running process (which sounds like what you're doing), I had a pretty good
> time with manhole. (If you're not familiar with that: it's in Twisted Conch,
> and it's basically just a way to SSH in to a running box and get a REPL).
>
> In that REPL, you can of course do things like inspect the running reactor
> :-)

It would be nice to be able to attach signals emitters to some parts
of running reactor in real-time. If manhole can allow to attach to
these emitters - it will be possible to visualize them in funny way.
Does anybody know how a twisted reactor model should look like in
Blender? =)
--
anatoly t.


From techtonik at gmail.com  Wed Apr  6 12:59:48 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 6 Apr 2011 19:59:48 +0300
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <20110406125805.1992.1490470530.divmod.xquotient.221@localhost.localdomain>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
	<20110406125805.1992.1490470530.divmod.xquotient.221@localhost.localdomain>
Message-ID: <BANLkTima8x4a4f87CkyS=q+-auSBphmhTQ@mail.gmail.com>

On Wed, Apr 6, 2011 at 3:58 PM,  <exarkun at twistedmatrix.com> wrote:
>
> As others have pointed out, this is referring to an old feature which is
> being phased out. ?It would be great if you could file a ticket for
> cleaning up the docs; they mostly shouldn't talk about application
> persistence (certainly not in the UDP section).

Tried to do as clear as possible.
http://twistedmatrix.com/trac/ticket/5031
--
anatoly t.


From stephen at thorne.id.au  Wed Apr  6 20:35:18 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu, 7 Apr 2011 10:35:18 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
Message-ID: <20110407003518.GD764@thorne.id.au>

G'day,

So Glyph and I had a discussion about the architecture and
implementation of plugins on IRC this week, I raised some issues that
I've seen with implementing plugins in that discussion, and he said that
I should take the discussion to the list because IRC wasn't the right
place for it.

First of all, a quick discussion of the current plugin architecture, so
that we're on the same page.

'twistd' automatically imports python modules from under twisted/plugins
relative to sys.path[1], or it loads a cache of those plugins from
dropin.cache, or it loads a cache of those plugins from dropin.cache.

The reason it loads all of those plugins is so that 'tapname' and
'description' can be grabbed out of all of the serviceMaker attributes
of all those modules.

Then running 'twistd' shows a helpful list of commands, and 'twistd
$tapname' uses the correct serviceMaker to start whatever service is
specified.

Part of the discussion was about how to rewrite this in such a way that
no python code needs to be run in order to discover all the
tapname+description combinations that are available to twistd, this is
because of a perceived performance and sanity deficit in using 'twistd'.

In the course of the discussion I raised several things that I consider
annoyances in the twisted plugin system. I will repeat them here.

First, the reason i use twisted plugins is because they're the a way to
easily do sensible things with logging, daemonisation and interaction
from init.d files.

* The number of imports required to compose a plugin is annoying. 2
  interfaces from two different packages, plus needing
  zope.interface.implements.

* I've never liked the twisted arg parser, I use it only grudingly, it
  would be nice to be able to throw argv at my make_service call.

* The entire task of having this python plugin is to link up the
  metadata with a more or less standard

* It's very easy to accidentally make your plugin load your package for
  every other twistd daemon running out of the same plugin cache.

* The practice of putting a module under twisted/plugins/$mymodulehere.py
  upsets my equilibrium, the only reason I tolerate this kind of thing
  is that I install my python code via rpms and I automatically get
  installation, ownership and uninstallation done in a stable manner.

For your consideration, and (constructive) critcism, here is a twisted
plugin that is nearly identical to 6 that I have running in production:

from zope.interface import implements
from twisted.python import usage
from twisted.plugin import IPlugin
from twisted.application.service import IServiceMaker

class Options(usage.Options):
    optFlags = [['debug', 'd', 'Emit debug messages']]

class ExampleServiceMaker(object):
    implements(IServiceMaker, IPlugin)
    tapname = 'example'
    description = 'Example Twistd Plugin'
    options = Options

    def makeService(self, options):
        from examplepackage.examplemodule import make_service
        return make_service(debug=options['debug'])

serviceMaker = ExampleServiceMaker()


From phil at bubblehouse.org  Thu Apr  7 00:06:07 2011
From: phil at bubblehouse.org (Phil Christensen)
Date: Thu, 7 Apr 2011 00:06:07 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407003518.GD764@thorne.id.au>
References: <20110407003518.GD764@thorne.id.au>
Message-ID: <7E980D9E-7A4F-4D1B-9D52-FC84E76E05A7@bubblehouse.org>

On Apr 6, 2011, at 8:35 PM, Stephen Thorne wrote:
> For your consideration, and (constructive) critcism, here is a twisted
> plugin that is nearly identical to 6 that I have running in  
> production:
[snip]
> serviceMaker = ExampleServiceMaker()
>
> From these 19 lines of code there are 4 things that are relevent:
> tapname = example
> description = 'Example Twistd Plugin'
> options = {'debug':True} if args == ['--debug'] else {'debug':False}
> service = examplepackage.examplemodule.make_service(**options)
>
> Only 2 of which are relevent for running a twistd daemon other than
> 'example'
>
> So the goal of my post to this mailing list is:
>
> * I would like glyph's goal of having less arbitary code executed at
>  twistd launch time to become a realisation,

Makes sense. My first inclination is to suggest creating metadata  
files that are found via pkg_resources.

> * I would like the process of creating a twisted plugin to be less  
> of a
>  cut+paste+fill-in-blanks hassle.

This doesn't bother me so much. To go back in time a bit:

> First, the reason i use twisted plugins is because they're the a way  
> to
> easily do sensible things with logging, daemonisation and interaction
> from init.d files.
>
> * The number of imports required to compose a plugin is annoying. 2
>  interfaces from two different packages, plus needing
>  zope.interface.implements.
>
> * I've never liked the twisted arg parser, I use it only grudingly, it
>  would be nice to be able to throw argv at my make_service call.

I've got no issues with t.p.usage, and tend to keep its definitions in  
the plugin class. But I agree you should be able to skip it, although  
I have a suspicion you probably already can by being sneaky.

> * The entire task of having this python plugin is to link up the
>  metadata with a more or less standard

Not sure if I get this part. I tend to think of plugins as the service  
bootstrap file, like an int main(). I would probably *not* be into the  
idea of passing sys.argv directly to a service, for example.

> * It's very easy to accidentally make your plugin load your package  
> for
>  every other twistd daemon running out of the same plugin cache.

Never had this happen, but I think I can see where it might. It would  
be solved by some kind of external metadata, though, right?

> * The practice of putting a module under twisted/plugins/ 
> $mymodulehere.py
>  upsets my equilibrium, the only reason I tolerate this kind of thing
>  is that I install my python code via rpms and I automatically get
>  installation, ownership and uninstallation done in a stable manner.

The only issue I've found with this is the issue of having to create  
plugin cache files. Apart from the spurious error messages that were  
(partially?) covered at the sprint recently, the benefit they provide  
is definitely negated by bad permissions. I've done some acrobatics  
inside my setup.py to make it work, but it involves different steps  
depending on whether you're installing or building a package.

Still, it seems like most of their necessity would be negated by using  
external metadata files. It seems to be the way most plugin systems  
end up going in some way or another.

Anyways, that's just my 2/100ths. I'm pretty happy with most of the  
plugin model, but I think there's a lot of room for improvement,  
particularly in the area of dropin.cache files.

-phil


From screwtape at froup.com  Thu Apr  7 00:31:11 2011
From: screwtape at froup.com (Tim Allen)
Date: Thu, 7 Apr 2011 14:31:11 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407003518.GD764@thorne.id.au>
References: <20110407003518.GD764@thorne.id.au>
Message-ID: <20110407043111.GS5510@boombah.thristian.org>

On Thu, Apr 07, 2011 at 10:35:18AM +1000, Stephen Thorne wrote:
> So the goal of my post to this mailing list is:
> 
> * I would like glyph's goal of having less arbitary code executed at
>   twistd launch time to become a realisation,
> 
> * I would like the process of creating a twisted plugin to be less of a
>   cut+paste+fill-in-blanks hassle.

I notice that Tarek Ziad?'s "distutils2" is moving away from "load
a Python module and probe for well-known attributes" toward "define all
metadata in a static file". It sounds like you want a similar thing for
twistd plugins. Perhaps an implementation might look something like
this:

    - At startup, twistd scans twisted/plugin directories on sys.path
      looking for files whose filenames end with '.twistd'.
    - Each such file is loaded with Python's ConfigParser module.
    - Each section in the ConfigParser module represents a plugin whose
      'tapname' is the section name.
    - Each section has a 'description' option, whose value is
      a human-readable string describing the plugin.
    - Each section has a 'module' option, whose value is a string that
      can be passed to Python's __import__ builtin to get a Python
      module.

...where the module defined by 'module' exposes a
'make_service(options)' function, and an 'options' global variable that
is an instance of t.p.usage.Options.

I know you said you didn't like t.p.usage.Options, but I'd be sad to
lose the ability for twistd to support "twistd $PLUGIN --help", and for
that kind of introspection to work, the options data needs to be in
*some* known format. Maybe this might be the time to move to the
stdlib's optparse - or maybe not, now that optparse is (presumably)
deprecated in favour of argparse. Maybe twistd could examine a number of
different well-known variable-names, for different option-parsing
libraries.

Just tossing this out as a strawman for people to point and laugh at.


From glyph at twistedmatrix.com  Thu Apr  7 00:54:45 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 00:54:45 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407043111.GS5510@boombah.thristian.org>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
Message-ID: <0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>


On Apr 7, 2011, at 12:31 AM, Tim Allen wrote:

> On Thu, Apr 07, 2011 at 10:35:18AM +1000, Stephen Thorne wrote:
>> So the goal of my post to this mailing list is:
>> 
>> * I would like glyph's goal of having less arbitary code executed at
>>  twistd launch time to become a realisation,
>> 
>> * I would like the process of creating a twisted plugin to be less of a
>>  cut+paste+fill-in-blanks hassle.
> 
> I notice that Tarek Ziad?'s "distutils2" is moving away from "load
> a Python module and probe for well-known attributes" toward "define all
> metadata in a static file". It sounds like you want a similar thing for
> twistd plugins. Perhaps an implementation might look something like
> this:
> 
>    - At startup, twistd scans twisted/plugin directories on sys.path
>      looking for files whose filenames end with '.twistd'.

While I'm sympathetic to the goal here, I don't like this particular implementation strategy for several reasons.

Right now, in order to properly install a 'twistd' plugin (including those that come with Twisted), you have to do two things:

  1. install some .py files into a package
  2. as the user doing the installation (probably root), run the one-liner at the bottom of <http://twistedmatrix.com/documents/11.0.0/core/howto/plugin.html#auto3>.  If invoking python code in your installation process is too hard, this can be approximated with 'twistd --help 2>&1 > /dev/null'.

This is rocket science.  Nobody can manage it.  Seriously.  After literally _years_ of fighting with conflicting python installation techniques in Debian and Ubuntu, I think that we finally have something that works about half of the time.  I haven't checked up on RedHat in a while and I don't know if they have a working system to do this yet, but they didn't last I checked.

If we invent our own file extension which has to be separately installed, we have to teach distutils, and setuptools, and distribute, and pip, and distutils2, and 'packaging' (as I'm sure that will eventually be incompatible with distutils2 for some silly reason), and easy_install, and dpkg, and rpm, and yum, and apt, and probably five other horrible Python packaging things that I don't even know about yet, how to deal with it.  So I am strongly in favor of keeping everything in .py files and just making a minor tweak to what's stored in dropin.cache (and perhaps allowing dropin.cache to be stored in some location more likely to be writable by individual users, in case the installation process doesn't update it).

Because, frankly, Python installation tools REALLY REALLY SHOULD be able to install Python files into Python packages.  I'm not sure I can make any other assertions quite so strongly.  I'm pretty sure that this is a problem that more than one project is interested in solving.  No other projects are interested in installing '.twistd' files though, I can assure you of that :).

>    - Each such file is loaded with Python's ConfigParser module.

The first rule of the Twisted cabal is of course "don't talk about the Twisted cabal", but the second and possibly even more important rule is "no '.ini' files".  I'd seriously much rather we use XML.  And you can ask Stephen how he feels about XML configuration files.  (Although I'd strongly recommend standing well clear of him when you do that, and making sure that no sharp or otherwise dangerous objects are within easy reach.)

>    - Each section blah blah terrible user interface stuff about 'sections' and other misfeatures of ini files.

I don't want a solution that is hard-coded to deal with the metadata that 'twistd' specifically needs, as Twisted plugins are already used for more than just twistd plugins, and I'd like them to be used for even more.  An interface that limits the metadata to ConfigParser sections would make it awkward to fit into a management GUI or web page.

Plus, the quoting rules for long strings in ini files make it unsuitable for storing long descriptive strings (which is one of the primary use-cases here).

> ...where the module defined by 'module' exposes a
> 'make_service(options)' function, and an 'options' global variable that
> is an instance of t.p.usage.Options.
> 
> I know you said you didn't like t.p.usage.Options, but I'd be sad to
> lose the ability for twistd to support "twistd $PLUGIN --help", and for
> that kind of introspection to work, the options data needs to be in
> *some* known format. Maybe this might be the time to move to the
> stdlib's optparse - or maybe not, now that optparse is (presumably)
> deprecated in favour of argparse. Maybe twistd could examine a number of
> different well-known variable-names, for different option-parsing
> libraries.

For what it's worth, I don't care about this at all.  It's a completely separate issue from the main stuff I care about, and while we should be able to simply delegate to a function that takes a list of strings, I will insist that we fix that separately.

> Just tossing this out as a strawman for people to point and laugh at.

Ha, ha ha ha.  (point).

Thanks for the feedback though.  These are all very common suggestions, and I'm glad for the opportunity to point out why we haven't already done them.

So as not to make this message too long, I'll defer a description my own preferred implementation strategy for a future post to this thread.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110407/8cfa7cc7/attachment-0001.htm 

From glyph at twistedmatrix.com  Thu Apr  7 01:03:20 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 01:03:20 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <7E980D9E-7A4F-4D1B-9D52-FC84E76E05A7@bubblehouse.org>
References: <20110407003518.GD764@thorne.id.au>
	<7E980D9E-7A4F-4D1B-9D52-FC84E76E05A7@bubblehouse.org>
Message-ID: <66ADB913-33F0-4008-8934-BB7BED16679B@twistedmatrix.com>


On Apr 7, 2011, at 12:06 AM, Phil Christensen wrote:

> On Apr 6, 2011, at 8:35 PM, Stephen Thorne wrote:
>> For your consideration, and (constructive) critcism, here is a twisted
>> plugin that is nearly identical to 6 that I have running in  
>> production:
> [snip]
>> serviceMaker = ExampleServiceMaker()
>> 
>> From these 19 lines of code there are 4 things that are relevent:
>> tapname = example
>> description = 'Example Twistd Plugin'
>> options = {'debug':True} if args == ['--debug'] else {'debug':False}
>> service = examplepackage.examplemodule.make_service(**options)
>> 
>> Only 2 of which are relevent for running a twistd daemon other than
>> 'example'
>> 
>> So the goal of my post to this mailing list is:
>> 
>> * I would like glyph's goal of having less arbitary code executed at
>> twistd launch time to become a realisation,
> 
> Makes sense. My first inclination is to suggest creating metadata  
> files that are found via pkg_resources.

We already use a similar mechanism, twisted.python.modules, which uses the same underlying standards as pkg_resources (PEP 302) but is somewhat more flexible.  And we create a metadata file (dropin.cache) which is stored and retrieved using this mechanism.

>> * The entire task of having this python plugin is to link up the
>> metadata with a more or less standard
> 
> Not sure if I get this part. I tend to think of plugins as the service  
> bootstrap file, like an int main(). I would probably *not* be into the  
> idea of passing sys.argv directly to a service, for example.

Why not?  It's just a list of strings.  You should be able to deal with it how you like.  (But as I said in a previous message: this is a separate issue.)

>> * It's very easy to accidentally make your plugin load your package  
>> for every other twistd daemon running out of the same plugin cache.
> 
> Never had this happen, but I think I can see where it might. It would  
> be solved by some kind of external metadata, though, right?

It already is solved by the external metadata... sort of.  If you look at the implementation of CachedPlugin, you can see that it actually already has a name and description!  There are two problems though: first is that this is hard-coded to be the module's name and docstring, but more importantly, there's just no way to get at those attributes via the getPlugin interface, which implicitly invokes '__conform__' via adaptation (and therefore load()).

> * The practice of putting a module under twisted/plugins/ 
>> $mymodulehere.py
>> upsets my equilibrium, the only reason I tolerate this kind of thing
>> is that I install my python code via rpms and I automatically get
>> installation, ownership and uninstallation done in a stable manner.
> 
> The only issue I've found with this is the issue of having to create  
> plugin cache files. Apart from the spurious error messages that were  
> (partially?) covered at the sprint recently, the benefit they provide  
> is definitely negated by bad permissions. I've done some acrobatics  
> inside my setup.py to make it work, but it involves different steps  
> depending on whether you're installing or building a package.

What is "this kind of thing", though?  The plugins have to go in some defined namespace in order to be enumerated.  Even if we were to implement something based on purely static metadata, you'd still have to list a directory to get at that metadata.  Making the namespace be owned by the module doing the importing makes sense.

For what it's worth, bzrlib does this too, but by convention in a bzr plugin you put _all_ your code into bzrlib/plugins/foo/*.py, and your package is bzrlib.plugins.foo.  (This will work fine with Twisted if you want to do it that way.)

> Still, it seems like most of their necessity would be negated by using  
> external metadata files. It seems to be the way most plugin systems  
> end up going in some way or another.

dropin.cache is an external metadata file ;-).

> Anyways, that's just my 2/100ths. I'm pretty happy with most of the  
> plugin model, but I think there's a lot of room for improvement,  
> particularly in the area of dropin.cache files.

Thanks for your feedback.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110407/08426123/attachment.htm 

From screwtape at froup.com  Thu Apr  7 01:08:57 2011
From: screwtape at froup.com (Tim Allen)
Date: Thu, 7 Apr 2011 15:08:57 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
Message-ID: <20110407050857.GT5510@boombah.thristian.org>

On Thu, Apr 07, 2011 at 12:54:45AM -0400, Glyph Lefkowitz wrote:
> If we invent our own file extension which has to be separately
> installed, we have to teach distutils, and setuptools, and distribute,
> and pip, and distutils2, and 'packaging' (as I'm sure that will
> eventually be incompatible with distutils2 for some silly reason), and
> easy_install, and dpkg, and rpm, and yum, and apt, and probably five
> other horrible Python packaging things that I don't even know about
> yet, how to deal with it.  So I am strongly in favor of keeping
> everything in .py files and just making a minor tweak to what's stored
> in dropin.cache (and perhaps allowing dropin.cache to be stored in
> some location more likely to be writable by individual users, in case
> the installation process doesn't update it).

My understanding was that .py files have to be installed into
twisted/plugins as binary blobs, not as ordinary Python modules, because
of special rules like "twisted/plugins must not be a Python package". If
distutils/setuptools/etc. can handle a binary blob with a ".py"
extension, I figured it could handle a binary blob with any other
extension.

If that's wrong, then yeah, I guess that would be a problem.

> >    - Each such file is loaded with Python's ConfigParser module.
> 
> The first rule of the Twisted cabal is of course "don't talk about the
> Twisted cabal", but the second and possibly even more important rule
> is "no '.ini' files".  I'd seriously much rather we use XML.  And you
> can ask Stephen how he feels about XML configuration files.  (Although
> I'd strongly recommend standing well clear of him when you do that,
> and making sure that no sharp or otherwise dangerous objects are
> within easy reach.)

Well, the nice thing about ConfigParser is that it's in the stdlib, and
people already know how to create them, and rolling
yet-another-config-file-format seems crazy in this day and age.

If you need a non-Turing-complete config language and rule out .ini and
XML, I'm not sure what's left. JSON, perhaps.

> I don't want a solution that is hard-coded to deal with the metadata
> that 'twistd' specifically needs, as Twisted plugins are already used
> for more than just twistd plugins, and I'd like them to be used for
> even more.

I've never actually come across anything that used Twisted plugins
besides twistd, so I'd forgotten they weren't twistd-specific.

> So as not to make this message too long, I'll defer a description my
> own preferred implementation strategy for a future post to this
> thread.

I'll look forward to it. :)

Tim.


From stephen at thorne.id.au  Thu Apr  7 01:38:34 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu, 7 Apr 2011 15:38:34 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
Message-ID: <20110407053834.GE764@thorne.id.au>

On 2011-04-07, Glyph Lefkowitz wrote:
> Because, frankly, Python installation tools REALLY REALLY SHOULD be
> able to install Python files into Python packages.  I'm not sure I can
> make any other assertions quite so strongly.  I'm pretty sure that
> this is a problem that more than one project is interested in solving.
> No other projects are interested in installing '.twistd' files though,
> I can assure you of that :).

This is entirely wrong. Python installation tools are barely capable of
putting entire existing working python packages into a directory that if
you mumble rhymes with "kite smackages".

To expect installation tools to be able to put a python-script into a
nested subdirectory of an entirely different subtree without putting
in __init__.py files, and working with .pth files, and not being insane,
you have to hack things.

kite-smackages/twisted/plugins/myplugin.py installed with any standard
tool without simply hard-coding is a disaster. Putting it outside of
that directory, more so.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue


From glyph at twistedmatrix.com  Thu Apr  7 01:45:34 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 01:45:34 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407053834.GE764@thorne.id.au>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407053834.GE764@thorne.id.au>
Message-ID: <551DEF70-0B19-4E3C-B201-61B058AC05E7@twistedmatrix.com>


On Apr 7, 2011, at 1:38 AM, Stephen Thorne wrote:

> On 2011-04-07, Glyph Lefkowitz wrote:
>> Because, frankly, Python installation tools REALLY REALLY SHOULD be
>> able to install Python files into Python packages.  I'm not sure I can
>> make any other assertions quite so strongly.  I'm pretty sure that
>> this is a problem that more than one project is interested in solving.
>> No other projects are interested in installing '.twistd' files though,
>> I can assure you of that :).
> 
> This is entirely wrong. Python installation tools are barely capable of
> putting entire existing working python packages into a directory that if
> you mumble rhymes with "kite smackages".

This is why I said "should".  Python installation tools are basically incapable of anything.  And yet.

My point is that it's hard enough to advocate for bugs to be fixed in installing .py files; let's focus on that, and avoid installing other stuff.



From glyph at twistedmatrix.com  Thu Apr  7 01:46:51 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 01:46:51 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407050857.GT5510@boombah.thristian.org>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407050857.GT5510@boombah.thristian.org>
Message-ID: <78527A74-42EB-4004-900E-13C4F2450C21@twistedmatrix.com>


On Apr 7, 2011, at 1:08 AM, Tim Allen wrote:

> Well, the nice thing about ConfigParser is that it's in the stdlib, and
> people already know how to create them, and rolling
> yet-another-config-file-format seems crazy in this day and age.

My point was really that people think they know how to create these, but actually they don't.  Pop quiz, hot shot: what is the quoting rule to put a linebreak with preserved trailing whitespace into a value in a .ini file?  Into a key?

> If you need a non-Turing-complete config language and rule out .ini and
> XML, I'm not sure what's left. JSON, perhaps.

Pickle, of course.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110407/827b8295/attachment.htm 

From mithrandi at mithrandi.net  Thu Apr  7 01:53:45 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 7 Apr 2011 07:53:45 +0200
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
Message-ID: <BANLkTik8HkQL8Cyp-XTOUD9AesZ1XjmZFA@mail.gmail.com>

On 7 Apr 2011 06:56, "Glyph Lefkowitz" <glyph at twistedmatrix.com> wrote:
>>    - Each section blah blah terrible user interface stuff about
'sections' and other misfeatures of ini files.
>
>
> I don't want a solution that is hard-coded to deal with the metadata that
'twistd' specifically needs, as Twisted plugins are already used for more
than just twistd plugins, and I'd like them to be used for even more.  An
interface that limits the metadata to ConfigParser sections would make it
awkward to fit into a management GUI or web page.

I'd like to jump in with a +1000 here. I have literally written over 1000
plugins[1] using twisted.plugin, and not one of them was a twistd plugin. I
would very much like to take advantage of any improvements in this area in
my own projects.

[1]
http://bazaar.launchpad.net/~dosage-dev/dosage/trunk/files/head:/dosage/plugins/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110407/97a6e621/attachment-0001.htm 

From stephen at thorne.id.au  Thu Apr  7 01:54:28 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu, 7 Apr 2011 15:54:28 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <551DEF70-0B19-4E3C-B201-61B058AC05E7@twistedmatrix.com>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407053834.GE764@thorne.id.au>
	<551DEF70-0B19-4E3C-B201-61B058AC05E7@twistedmatrix.com>
Message-ID: <20110407055428.GF764@thorne.id.au>

On 2011-04-07, Glyph Lefkowitz wrote:
> 
> On Apr 7, 2011, at 1:38 AM, Stephen Thorne wrote:
> 
> > On 2011-04-07, Glyph Lefkowitz wrote:
> >> Because, frankly, Python installation tools REALLY REALLY SHOULD be
> >> able to install Python files into Python packages.  I'm not sure I can
> >> make any other assertions quite so strongly.  I'm pretty sure that
> >> this is a problem that more than one project is interested in solving.
> >> No other projects are interested in installing '.twistd' files though,
> >> I can assure you of that :).
> > 
> > This is entirely wrong. Python installation tools are barely capable of
> > putting entire existing working python packages into a directory that if
> > you mumble rhymes with "kite smackages".
> 
> This is why I said "should".  Python installation tools are basically
> incapable of anything.  And yet.
> 
> My point is that it's hard enough to advocate for bugs to be fixed in
> installing .py files; let's focus on that, and avoid installing other
> stuff.

Everything has the capability to put datafiles somewhere, even if the
location offset is annoying. In fact, most tools are /better/ at
installing arbitary files that don't have a first line of #!python or
.py extension than files that do.

For this reason, a static configuration file, such as a hand crafted
pickle, an xml file, or an ini file, is a reasonably viable alternative.

I hesitate to suggest it, but a .pth file or a setuptools entrypoint may
be an option here too for inserting plugins without writing to a doubly
nested non-package twisted ''package'' plugins directory.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue


From stephen at thorne.id.au  Thu Apr  7 01:55:50 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu, 7 Apr 2011 15:55:50 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <78527A74-42EB-4004-900E-13C4F2450C21@twistedmatrix.com>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407050857.GT5510@boombah.thristian.org>
	<78527A74-42EB-4004-900E-13C4F2450C21@twistedmatrix.com>
Message-ID: <20110407055550.GG764@thorne.id.au>

On 2011-04-07, Glyph Lefkowitz wrote:
> 
> On Apr 7, 2011, at 1:08 AM, Tim Allen wrote:
> 
> > Well, the nice thing about ConfigParser is that it's in the stdlib, and
> > people already know how to create them, and rolling
> > yet-another-config-file-format seems crazy in this day and age.
> 
> My point was really that people think they know how to create these,
> but actually they don't.  Pop quiz, hot shot: what is the quoting rule
> to put a linebreak with preserved trailing whitespace into a value in
> a .ini file?  Into a key?

Reality check. This are the plugins that are currently shipped:

    ftp              An FTP server.
    telnet           A simple, telnet-based remote debugging service.
    socks            A SOCKSv4 proxy service.
    manhole-old      An interactive remote debugger service.
    portforward      A simple port-forwarder.
    web              A general-purpose web server which can serve from a
                     filesystem or application resource.
    inetd            An inetd(8) replacement.
    news             A news server.
    xmpp-router      An XMPP Router server
    words            A modern words server
    dns              A domain name server.
    mail             An email service
    manhole          An interactive remote debugger service accessible via
                     telnet and ssh and providing syntax coloring and basic line
                     editing functionality.
    conch            A Conch SSH service.
    procmon          A process watchdog / supervisor

Why do we care about complex quoting and linebreaks for descriptions? If
you can't remember, just keep typing and let it get wrapped.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue


From glyph at twistedmatrix.com  Thu Apr  7 02:04:41 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 02:04:41 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407055550.GG764@thorne.id.au>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407050857.GT5510@boombah.thristian.org>
	<78527A74-42EB-4004-900E-13C4F2450C21@twistedmatrix.com>
	<20110407055550.GG764@thorne.id.au>
Message-ID: <9560C7DF-C93E-4788-B8E9-9CF230D1CC35@twistedmatrix.com>


On Apr 7, 2011, at 1:55 AM, Stephen Thorne wrote:

> On 2011-04-07, Glyph Lefkowitz wrote:
>> 
>> On Apr 7, 2011, at 1:08 AM, Tim Allen wrote:
>> 
>>> Well, the nice thing about ConfigParser is that it's in the stdlib, and
>>> people already know how to create them, and rolling
>>> yet-another-config-file-format seems crazy in this day and age.
>> 
>> My point was really that people think they know how to create these,
>> but actually they don't.  Pop quiz, hot shot: what is the quoting rule
>> to put a linebreak with preserved trailing whitespace into a value in
>> a .ini file?  Into a key?
> 
> Reality check. This are the plugins that are currently shipped:
> 
>    ftp              An FTP server.
>    telnet           A simple, telnet-based remote debugging service.
>    socks            A SOCKSv4 proxy service.
>    manhole-old      An interactive remote debugger service.
>    portforward      A simple port-forwarder.
>    web              A general-purpose web server which can serve from a
>                     filesystem or application resource.
>    inetd            An inetd(8) replacement.
>    news             A news server.
>    xmpp-router      An XMPP Router server
>    words            A modern words server
>    dns              A domain name server.
>    mail             An email service
>    manhole          An interactive remote debugger service accessible via
>                     telnet and ssh and providing syntax coloring and basic line
>                     editing functionality.
>    conch            A Conch SSH service.
>    procmon          A process watchdog / supervisor
> 
> Why do we care about complex quoting and linebreaks for descriptions? If
> you can't remember, just keep typing and let it get wrapped.

None of those descriptions have non-ASCII characters in there either, but that doesn't mean I want to standardize on a format where I can't figure out how to type them.  I would like to provide more flexibility with a simpler API, not less flexibility and more complexity.



From glyph at twistedmatrix.com  Thu Apr  7 02:08:00 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 02:08:00 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407003518.GD764@thorne.id.au>
References: <20110407003518.GD764@thorne.id.au>
Message-ID: <F7230F88-2DFD-4B41-B2D5-9CE9D88819FA@twistedmatrix.com>


On Apr 6, 2011, at 8:35 PM, Stephen Thorne wrote:

> Part of the discussion was about how to rewrite this in such a way that
> no python code needs to be run in order to discover all the
> tapname+description combinations that are available to twistd, this is
> because of a perceived performance and sanity deficit in using 'twistd'.

My interest in this discussion is not so much in "no python code should be executed" but rather "the current constraints of the system should be preserved (your whole package doesn't get imported) but you shouldn't have to write hacks like ServiceMaker (<http://twistedmatrix.com/documents/11.0.0/api/twisted.application.service.ServiceMaker.html>)to preserve them".  Or, for that matter, do inner imports, like this one from your example:

>    def makeService(self, options):
>        from examplepackage.examplemodule import make_service
>        return make_service(debug=options['debug'])


Someone unfamiliar with the Twisted plugin system would probably not realize that the positioning of that import is critically important.  It seems kind of random, and maybe sloppy, and a refactoring for stylistic fixes might move it to the top of the module.

Of course, such a refactoring would make 'twistd --help' on any system with your code installed start executing gobs and gobs of additional code.  Also, as a result of such a change, every 'twistd' server on such a system would have your entire examplepackage.examplemodule imported, silently of course, increasing their memory footprint and so on.

As I have mentioned in other parts of this mailing list thread, there's already some caching going on, but it's never used.  Observe:

glyph at ... twisted/plugins$ python
Python 2.6.1 (...)
>>> from cPickle import load
>>> plugins = load(file('dropin.cache'))
>>> plugins['twisted_names'].plugins
[<CachedPlugin 'TwistedNames'/'twisted.plugins.twisted_names' (provides 'IPlugin, IServiceMaker')>]
>>> plugins['twisted_names'].plugins[0].name
'TwistedNames'
>>> plugins['twisted_names'].plugins[0].description
'\n    Utility class to simplify the definition of L{IServiceMaker} plugins.\n    '
>>> plugins['twisted_names'].plugins[0].provided
[<InterfaceClass twisted.plugin.IPlugin>, <InterfaceClass twisted.application.service.IServiceMaker>]
>>> import sys
>>> 'twisted.plugins' in sys.modules
False

The problem with this is that once you've loaded the plugins, you can't see it any more:

>>> from twisted.plugin import getPlugins
>>> from twisted.application.service import IServiceMaker
>>> allPlugins = list(getPlugins(IServiceMaker))
>>> plugin = [p for p in allPlugins if p.tapname == 'dns'][0]
>>> plugin.description
'A domain name server.'
>>> plugin.name
'Twisted DNS Server'

Those are the 'name' and 'description' attributes from the IServiceMaker provider, already implicitly loaded by getPlugins.  You can't see the CachedPlugin any more.

So, here's an idea, very similar to the one on the ticket.  Keeping in mind the state described above, hopefully it will communicate my idea better.

Right now, IPlugin is purely a marker.  It provides no methods.  I propose a new subinterface (designed to eventually replace it), IPlugin2, with one method, 'metadata()', that returns a dictionary mapping strings to strings.  This _could_ be any object, limited only by what we think is a good idea to allow serializing.  The second method would be 'willProvide(I)' which returns a boolean, whether the result of load() will provide the interface 'I'.

Then there's a helper which you inherit which looks like:

class Plugin2(object):
    implements(IPlugin2)
    def metadata(self):
        raise NotImplementedError("your metadata here")
    def willProvide(self, I):
        return I.providedBy(self)
    def load(self):
        return self

The one rule here is that 'metadata()' must always return the same value for a particular version of the code.  We will then serialize the metadata from calling metadata() into dropin.cache, and expose it to application code.

My idea for exposing it is that if you then do 'getPlugins(IPlugin2)', you will get back an iterable of IPlugin2 providers, but not necessarily instances of your classes: they could be cached plugins, with cached results for metadata() and willProvide() - the latter based on the list currently saved as the 'provided' attribute.  So a loop like this to load a twistd plugin by name:

def twistdPluginByTapname(name):
    for p2 in getPlugins(IPlugin2):
        if p2.willProvide(IServiceMaker) and p2.metadata()['tapname'] == name:
            return p2.load()

... would not actually load any plugins, but work entirely from the cached metadata.  Since you wouldn't be loading the plugin except to actually invoke its dynamic behavior, we would no longer need ServiceMaker, just an instance of the actual IServiceMaker plugin, with no local imports or anything.

This would at least partially address one of your complaints, Stephen, in that it would mean that a plugin could be defined with 2 lines: import your class, and create an instance of it.  Of course you'd still need boilerplate somewhere, but it would be possible to put a big pile of them in one place, or define some common stuff in a utility module, and not need to dance around avoiding importing it.

As a separate consideration, once this API is in place, it isn't all that important that we generate that initial metadata by importing the Python code the way that we do now.  The metadata could be manually specified.  I think that would be a good first step, but we could, for example, put the metadata in some human-readable format rather than pickle.  JSON, I guess, is what's hip with the kids these days.  Or, if you philistines really won't quit, an .ini file.  But don't tell me I didn't warn you ;-).

The actual list of plugins could be generated from these data files as well.  But, if we were to put this kind of extra metadata into a data file right now, the current API wouldn't give you any way to access it.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110407/d4e5976d/attachment.htm 

From david at silveregg.co.jp  Thu Apr  7 02:24:57 2011
From: david at silveregg.co.jp (David)
Date: Thu, 07 Apr 2011 15:24:57 +0900
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407050857.GT5510@boombah.thristian.org>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407050857.GT5510@boombah.thristian.org>
Message-ID: <4D9D58B9.6030307@silveregg.co.jp>

On 04/07/2011 02:08 PM, Tim Allen wrote:

>
> If you need a non-Turing-complete config language and rule out .ini and
> XML, I'm not sure what's left. JSON, perhaps.

Having had experience with JSON for configuration: it is a terrible 
format for configuration, if only because it does not support comments.

The syntax is also a bit too strict: enough to be annoying in something 
you want to edit all the time and easily in my experience.

cheers,

David



From tim at commsecure.com.au  Thu Apr  7 02:34:10 2011
From: tim at commsecure.com.au (Tim Allen)
Date: Thu, 7 Apr 2011 16:34:10 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4D9D58B9.6030307@silveregg.co.jp>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407050857.GT5510@boombah.thristian.org>
	<4D9D58B9.6030307@silveregg.co.jp>
Message-ID: <20110407063410.GA23062@ws35.commsecure.com.au>

On Thu, Apr 07, 2011 at 03:24:57PM +0900, David wrote:
> On 04/07/2011 02:08 PM, Tim Allen wrote:
> > If you need a non-Turing-complete config language and rule out .ini and
> > XML, I'm not sure what's left. JSON, perhaps.
> 
> Having had experience with JSON for configuration: it is a terrible 
> format for configuration, if only because it does not support comments.
> 
> The syntax is also a bit too strict: enough to be annoying in something 
> you want to edit all the time and easily in my experience.

Well, that's pretty depressing. The only other candidate I can even
think of is YAML, and that's not in the standard library (as far as
I know).

Who'd have guessed it'd be so complicated to associate keys with values?


From david at silveregg.co.jp  Thu Apr  7 02:38:57 2011
From: david at silveregg.co.jp (David)
Date: Thu, 07 Apr 2011 15:38:57 +0900
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407063410.GA23062@ws35.commsecure.com.au>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407050857.GT5510@boombah.thristian.org>
	<4D9D58B9.6030307@silveregg.co.jp>
	<20110407063410.GA23062@ws35.commsecure.com.au>
Message-ID: <4D9D5C01.1060605@silveregg.co.jp>

On 04/07/2011 03:34 PM, Tim Allen wrote:

>
> Who'd have guessed it'd be so complicated to associate keys with values?

If that's the only thing you need, .ini would work fine. Another 
solution would be python files with only literals, parsed through the 
ast module for safety.

cheers,

David


From michaelnt at gmail.com  Thu Apr  7 02:45:43 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Thu, 7 Apr 2011 07:45:43 +0100
Subject: [Twisted-Python] Instrumenting Reactors
In-Reply-To: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
References: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
Message-ID: <BANLkTim2-NbXUpJKvJxLTz5_n01JYUy7Ow@mail.gmail.com>

On 6 April 2011 10:55, Paul Thomas <spongelavapaul at googlemail.com> wrote:
> Should I just hack into the reactor somewhere? Or is there something sitting in a library I haven't seen that will help with this?

You can time blocking calls by instrumenting
twisted.python.log.callWithContext and you could try writing the
timing info to something fast, like Redis.

Michael


From johan.rydberg at edgeware.tv  Thu Apr  7 05:22:02 2011
From: johan.rydberg at edgeware.tv (Johan Rydberg)
Date: Thu, 07 Apr 2011 11:22:02 +0200
Subject: [Twisted-Python] Asynchronous context in Twisted
In-Reply-To: <AANLkTika=xCxs1qmo2jZ2tFXSYJjUGtPqOpzacHcCE53@mail.gmail.com>
References: <AANLkTikX_wkb5-jgmxQ7Y-3_ENurHS-COTOfBQN=vGX4@mail.gmail.com>
	<AANLkTika=xCxs1qmo2jZ2tFXSYJjUGtPqOpzacHcCE53@mail.gmail.com>
Message-ID: <4D9D823A.6010402@edgeware.tv>

Something like this would be awesome to have in Twisted.



From johan.rydberg at edgeware.tv  Thu Apr  7 05:35:32 2011
From: johan.rydberg at edgeware.tv (Johan Rydberg)
Date: Thu, 07 Apr 2011 11:35:32 +0200
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4D9D58B9.6030307@silveregg.co.jp>
References: <20110407003518.GD764@thorne.id.au>	<20110407043111.GS5510@boombah.thristian.org>	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>	<20110407050857.GT5510@boombah.thristian.org>
	<4D9D58B9.6030307@silveregg.co.jp>
Message-ID: <4D9D8564.9050502@edgeware.tv>

On 4/7/11 8:24 AM, David wrote:
> Having had experience with JSON for configuration: it is a terrible
> format for configuration, if only because it does not support comments.
>
> The syntax is also a bit too strict: enough to be annoying in something
> you want to edit all the time and easily in my experience.
>    
I agree.  We use json as config-file format from time to time, but it 
always end up hurting
you.

I therefor hacked up this little library: 
https://github.com/edgeware/structprop



From jrennie at gmail.com  Thu Apr  7 08:02:01 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Thu, 7 Apr 2011 08:02:01 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407063410.GA23062@ws35.commsecure.com.au>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407050857.GT5510@boombah.thristian.org>
	<4D9D58B9.6030307@silveregg.co.jp>
	<20110407063410.GA23062@ws35.commsecure.com.au>
Message-ID: <BANLkTimdpCCiPfjFYKH0At0Ti1GZbnYKag@mail.gmail.com>

On Thu, Apr 7, 2011 at 2:34 AM, Tim Allen <tim at commsecure.com.au> wrote:

> Well, that's pretty depressing. The only other candidate I can even
> think of is YAML, and that's not in the standard library (as far as
> I know).
>

There's Coil, but it's also not in the std lib AFAIK:

http://mike.marineau.org/coil/

Jason

-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110407/3c3dae28/attachment.htm 

From itamar at itamarst.org  Thu Apr  7 08:14:05 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 07 Apr 2011 08:14:05 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <F7230F88-2DFD-4B41-B2D5-9CE9D88819FA@twistedmatrix.com>
References: <20110407003518.GD764@thorne.id.au>
	<F7230F88-2DFD-4B41-B2D5-9CE9D88819FA@twistedmatrix.com>
Message-ID: <1302178445.1686.8.camel@blake>

On Thu, 2011-04-07 at 02:08 -0400, Glyph Lefkowitz wrote:

> My idea for exposing it is that if you then do 'getPlugins(IPlugin2)',
> you will get back an iterable of IPlugin2 providers, but not
> necessarily instances of your classes: they could be cached plugins,
> with cached results for metadata() and willProvide() - the latter
> based on the list currently saved as the 'provided' attribute.  So a
> loop like this to load a twistd plugin by name:
> 
> 
>         def twistdPluginByTapname(name):
>             for p2 in getPlugins(IPlugin2):
>                 if p2.willProvide(IServiceMaker) and
>         p2.metadata()['tapname'] == name:
>                     return p2.load()
> 
> 
> ... would not actually load any plugins, but work entirely from the
> cached metadata.

That's where the whole idea falls down for me. Evidence suggests (and
you note this earlier) that caching doesn't work anywhere in the real
world. My current Ubuntu install complains about a read-only cache every
time I run lore (and I'm pretty sure there's nothing added to my
PYTHONPATH other than installed system packages). Any design which
assumes caching works appears to be useless in the real world.

So, the design has to *not* rely on caching working.




From ste at demaledetti.net  Thu Apr  7 08:56:59 2011
From: ste at demaledetti.net (Stefano Debenedetti)
Date: Thu, 07 Apr 2011 14:56:59 +0200
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <mailman.7479.1302155634.9568.twisted-python@twistedmatrix.com>
References: <mailman.7479.1302155634.9568.twisted-python@twistedmatrix.com>
Message-ID: <4D9DB49B.2010803@demaledetti.net>

On Apr 7, 2011, at 1:08 AM, Tim Allen wrote:
> If you need a non-Turing-complete config language and rule out .ini and
> XML, I'm not sure what's left. JSON, perhaps.

I bet a lot of people have a deja-vu feeling about a config file
syntax debate so I'll propose an alternative approach: RDF.

Perhaps most people in this community will not like it, yet some
might find it more fun that revamping their 2002 arguments about
merits and pitfalls of various syntaxes.

One of the reasons why I like RDF so much is that I can focus on
what I need to express and let people pick the serialization syntax
that better suits their mood, habits, tools and use-cases.

I know that the use-case that's being discussed is slightly
different (config files for the plugin system as opposed to config
files for a specific plugin) but as an example: my
twistd-plugin-driven webserver will gladly accept any of the
attached configuration files, they are equivalent and there are
commonly available tools to switch back and forth, including pure
python ones.

It could as well accept any other standard RDF serialization syntax,
for example there are several other XML formats, a line-based
grep-friendly syntax (NTriples) and a JSON format.

The code that parses this and turns it into running twisted Services
and web applications is about the same size of your average TAC
file. If anybody wants to see it please email me privately, I'm not
proud enough of other parts of my open source project containing it
to advertise it on this list.

Other than mentioning that RDF also comes with a standard query and
update language and protocol (SPARQL), I won't enumerate other
advantages here so let's see what some of drawbacks (and their
counter-arguments) are:

1) it's not widely known yet (but so was XML in 2000 and JSON in
2002 and INI in 2011)

2) it would require to add a dependency for an RDF parser (people
often argued the same way about XML, remember when libxml2 became a
Gnome dependency? RDF is now becoming a requirement of Gnome and KDE...)

3) it's not python (yet the several python object-RDF-mapper
libraries available seem to me much easier to use and way more
simple than SQLAlchemy so I already switched from pickle to RDF
whenever I want to serialize some object graph, BTW it's also safer
and hand-editable)

Sorry if I went too off-topic, ciao
ste


-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: config.n3
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110407/3ec2e941/attachment.txt 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: config.xml
Type: text/xml
Size: 1442 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20110407/3ec2e941/attachment.bin 

From andrew at bemusement.org  Thu Apr  7 09:19:32 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Thu, 7 Apr 2011 23:19:32 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <1302178445.1686.8.camel@blake>
References: <20110407003518.GD764@thorne.id.au>
	<F7230F88-2DFD-4B41-B2D5-9CE9D88819FA@twistedmatrix.com>
	<1302178445.1686.8.camel@blake>
Message-ID: <20110407131932.GC2841@aihal.home.puzzling.org>

Itamar Turner-Trauring wrote:
[?]
> So, the design has to *not* rely on caching working.

FWIW: this is an achievable goal.  I have 32 different bzr plugins
currently installed, and here's the difference they make:

   $ time bzr --no-plugins rocks
   It sure does!
   
   real	0m0.075s
   
   $ time bzr rocks
   It sure does!
   
   real	0m0.119s

So that's about 1.5ms per plugin, on average.  With a hot disk cache, at
least?

For comparison, 'twistd --version' takes 116ms, with a dropin.cache and
(I think, although how can I tell?) no plugins installed.

In part, we achieve this via the bzrlib.lazy_import hack, which plugins
can and often do use, and by encouraging plugin authors to put as little
code into their __init__.py files as possible.  A typical plugin's
__init__ might do just:

    # This is example_plugin/__init__.py
    # The actual command implementation is in
    # example_plugin/example_commands.py
    from bzrlib import commands
    commands.plugin_cmds.register_lazy('cmd_class_name', [],
        'bzrlib.plugins.example_plugin.example_commands')

Glyph's expressed scepticism that plugin authors and maintainers will
know to keep their __init__.py files cheap to import.  Bazaar's
experience is different.  Partly that's probably because the Bazaar
community has paid a fair bit of attention to start up time and I
suppose Twisted doesn't have that.  But I think also it's partly because
we've provided tools to help people diagnose what/who to blame for bzr
being slow to start, like 'bzr --profile-imports', and even the crude
'time bzr rocks'.

-Andrew.



From techtonik at gmail.com  Thu Apr  7 12:16:11 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Thu, 7 Apr 2011 19:16:11 +0300
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
Message-ID: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>

Hi,

I've made a proof of concept for asynchronous console input on Windows
[1] and now I am trying to understand the limits of
WaitForMultipleObjects API I've used.

Documentation on win32eventreactor mentions limit for 64 objects:
http://twistedmatrix.com/documents/11.0.0/api/twisted.internet.win32eventreactor.htm
However, it is completely opaque what these objects are? For console
handles and process handles it is quite obvious, but not for sockets.

Is 64 the limit for total amount sockets opened on different ports?
Is 64 the limit for connections made to a socket on specified port?

1. http://techtonik.rainforce.org/2011/03/asynchronous-input-from-windows-console.html
--
anatoly t.


From glyph at twistedmatrix.com  Thu Apr  7 14:20:32 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 14:20:32 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <1302178445.1686.8.camel@blake>
References: <20110407003518.GD764@thorne.id.au>
	<F7230F88-2DFD-4B41-B2D5-9CE9D88819FA@twistedmatrix.com>
	<1302178445.1686.8.camel@blake>
Message-ID: <7E30440B-1602-4E87-9588-4880B5C1454E@twistedmatrix.com>


On Apr 7, 2011, at 8:14 AM, Itamar Turner-Trauring wrote:

> On Thu, 2011-04-07 at 02:08 -0400, Glyph Lefkowitz wrote:
> 
>> My idea for exposing it is that if you then do 'getPlugins(IPlugin2)',
>> you will get back an iterable of IPlugin2 providers, but not
>> necessarily instances of your classes: they could be cached plugins,
>> with cached results for metadata() and willProvide() - the latter
>> based on the list currently saved as the 'provided' attribute.  So a
>> loop like this to load a twistd plugin by name:
>> 
>> 
>>        def twistdPluginByTapname(name):
>>            for p2 in getPlugins(IPlugin2):
>>                if p2.willProvide(IServiceMaker) and
>>        p2.metadata()['tapname'] == name:
>>                    return p2.load()
>> 
>> 
>> ... would not actually load any plugins, but work entirely from the
>> cached metadata.
> 
> That's where the whole idea falls down for me. Evidence suggests (and
> you note this earlier) that caching doesn't work anywhere in the real
> world. My current Ubuntu install complains about a read-only cache every
> time I run lore (and I'm pretty sure there's nothing added to my
> PYTHONPATH other than installed system packages). Any design which
> assumes caching works appears to be useless in the real world.
> 
> So, the design has to *not* rely on caching working.

Here's an idea: let's make caching actually work :).  Prior experience indicates that with some small amount of dedication, it's possible to make a module in Twisted not be broken all the time.


As you observed that I already mentioned earlier in the thread, caching never works because post-installation hooks are such a pain, and you have to have special permissions to access the cache file.  So, separately from this, we could attempt a secondary cache read/write to a location much more likely to be writable by the user (something like ~/.local/var/cache/usr_lib_python2.6_site-packages.dropin.cache) read if the first one is out of date and written if writing the first one fails.

Also: we already rely on this behavior, so things are just as broken now for you.  For example, you'll end up loading the code for all twistd plugins and trial reporters when what you want are lore plugins.  This could also be fixed independently.

(To fix your particular installation right now, 'sudo twistd --help' or 'sudo lore' once.)

And, finally, as a separate consideration, we could make "cached metadata" mean "explicitly specified metadata" instead.  The important thing that I'm talking about doing first is making the system work exactly the same way that it does now, with one additional feature in the API which would allow us to make use of metadata that lives outside the Python code, using the existing mechanism for storing metadata that is currently not used.  For a first cut, we wouldn't even remove the ServiceMaker hack, just add the new feature to it so that we could do slightly less importing at startup.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110407/85b0c50f/attachment.htm 

From glyph at twistedmatrix.com  Thu Apr  7 14:23:36 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 14:23:36 -0400
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
In-Reply-To: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
References: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
Message-ID: <65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>


On Apr 7, 2011, at 12:16 PM, anatoly techtonik wrote:

> I've made a proof of concept for asynchronous console input on Windows
> [1] and now I am trying to understand the limits of
> WaitForMultipleObjects API I've used.
> 
> Documentation on win32eventreactor mentions limit for 64 objects:
> http://twistedmatrix.com/documents/11.0.0/api/twisted.internet.win32eventreactor.htm
> However, it is completely opaque what these objects are? For console
> handles and process handles it is quite obvious, but not for sockets.
> 
> Is 64 the limit for total amount sockets opened on different ports?
> Is 64 the limit for connections made to a socket on specified port?
> 
> 1. http://techtonik.rainforce.org/2011/03/asynchronous-input-from-windows-console.html

64 is the limit for the total number of objects (listening ports, connections to a port, client connections, your console, the waker, serial ports, whatever) that WFMO may wait upon at once.

Put another way, MAXIMUM_WAIT_OBJECTS=64: http://msdn.microsoft.com/en-us/library/ms687025(v=vs.85).aspx




From glyph at twistedmatrix.com  Thu Apr  7 15:27:19 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 15:27:19 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407131932.GC2841@aihal.home.puzzling.org>
References: <20110407003518.GD764@thorne.id.au>
	<F7230F88-2DFD-4B41-B2D5-9CE9D88819FA@twistedmatrix.com>
	<1302178445.1686.8.camel@blake>
	<20110407131932.GC2841@aihal.home.puzzling.org>
Message-ID: <2F66AFB0-94C4-4E8D-A52D-79B7414573AF@twistedmatrix.com>


On Apr 7, 2011, at 9:19 AM, Andrew Bennetts wrote:

> Itamar Turner-Trauring wrote:
> [?]
>> So, the design has to *not* rely on caching working.
> 
> FWIW: this is an achievable goal.  I have 32 different bzr plugins
> currently installed, and here's the difference they make:
> 
>   $ time bzr --no-plugins rocks
>   It sure does!
> 
>   real	0m0.075s
> 
>   $ time bzr rocks
>   It sure does!
> 
>   real	0m0.119s
> 
> So that's about 1.5ms per plugin, on average.  With a hot disk cache, at
> least?

Is your cache as hot for Twisted as for bzr?  Have you replicated these results in a randomized, double-blind clinical trial? ;-)

I'm not surprised that bzr has faster startup though; twistd has not been (and doubtful will ever be) nearly so ruthlessly optimized.  Maybe it's time to put a startup benchmark on <http://speed.twistedmatrix.com/>, at least that way we could keep track.

> For comparison, 'twistd --version' takes 116ms, with a dropin.cache and
> (I think, although how can I tell?) no plugins installed.

Twisted itself installs 22 dropins (python files which each define at least one plugin), which comprise 48 plugins of various types, so there are always some.  You should be able to tell, though.  It's pathetic that we don't have a command-line tool to inspect the available plugins and what they're doing.  Independent of the other issues under discussion here: <http://twistedmatrix.com/trac/ticket/5039>.

But this is all moot.  'twistd --version' doesn't scan for plugins, so that's all just the normal startup time; apparently we import too much in the first place.  The thing to compare with is 'twistd --help' or even just 'twistd [some-plugin]' (since invoking one plugin actually loads all of them).  Plus - this is really the genesis for this thread - the dropin.cache isn't really saving us much work at all right now, because all the plugins get loaded anyway for all practical uses of plugin scanning.

> In part, we achieve this via the bzrlib.lazy_import hack, which plugins
> can and often do use, and by encouraging plugin authors to put as little
> code into their __init__.py files as possible.  A typical plugin's
> __init__ might do just:
> 
>    # This is example_plugin/__init__.py
>    # The actual command implementation is in
>    # example_plugin/example_commands.py
>    from bzrlib import commands
>    commands.plugin_cmds.register_lazy('cmd_class_name', [],
>        'bzrlib.plugins.example_plugin.example_commands')

This looks very similar to ServiceMaker.

> Glyph's expressed scepticism that plugin authors and maintainers will
> know to keep their __init__.py files cheap to import.  Bazaar's
> experience is different.  Partly that's probably because the Bazaar
> community has paid a fair bit of attention to start up time and I
> suppose Twisted doesn't have that.

Yeah, bzr's audience makes this easier.  For one thing, the audience is much bigger :), but more importantly, bzr is a user-facing tool which users are running _constantly_ at the command line.  The only visible consequence of a rogue twistd plugin is that your server which runs for days at a time takes 0.2s longer to start; the real problem sets in later, where your 25 subprocesses are suddenly consuming an additional 50meg each because of the extra plugin they loaded.  You do find this eventually, it's just rare to find it while you're writing the plugin.

> But I think also it's partly because
> we've provided tools to help people diagnose what/who to blame for bzr
> being slow to start, like 'bzr --profile-imports', and even the crude
> 'time bzr rocks'.


Yes.  These are a great idea, and there's no excuse that Twisted's plugin system is so difficult to inspect and debug.  A couple of good tools would address a wide range of plugin issues, many of them much more interesting than performance, like the ever-popular "why isn't my plugin getting loaded".  Thanks for the impetus to file the ticket above.  (I kinda hope it's a dup, but I couldn't find one.)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110407/264d4da8/attachment.htm 

From stephen at thorne.id.au  Thu Apr  7 19:54:41 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Fri, 8 Apr 2011 09:54:41 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4D9DB49B.2010803@demaledetti.net>
References: <mailman.7479.1302155634.9568.twisted-python@twistedmatrix.com>
	<4D9DB49B.2010803@demaledetti.net>
Message-ID: <20110407235441.GH764@thorne.id.au>

On 2011-04-07, Stefano Debenedetti wrote:
> On Apr 7, 2011, at 1:08 AM, Tim Allen wrote:
> > If you need a non-Turing-complete config language and rule out .ini and
> > XML, I'm not sure what's left. JSON, perhaps.
> 
> I bet a lot of people have a deja-vu feeling about a config file
> syntax debate so I'll propose an alternative approach: RDF.

I am +1 on this idea. I like rdf. My question is now: is there an rdf
parser lib that is available on python2.4+ which can either be gently
embedded within twisted, or used as a dependency?

We don't really need SparQL or anything complicated, just the ability
to resolve some simple triples.

I do not like angle brackets, but I have always had a fond affection for
n3.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue


From glyph at twistedmatrix.com  Thu Apr  7 20:09:39 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 20:09:39 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407235441.GH764@thorne.id.au>
References: <mailman.7479.1302155634.9568.twisted-python@twistedmatrix.com>
	<4D9DB49B.2010803@demaledetti.net>
	<20110407235441.GH764@thorne.id.au>
Message-ID: <4585FBCD-267C-43FA-82E5-FCC2FD8D2490@twistedmatrix.com>

On Apr 7, 2011, at 7:54 PM, Stephen Thorne wrote:

> On 2011-04-07, Stefano Debenedetti wrote:
>> On Apr 7, 2011, at 1:08 AM, Tim Allen wrote:
>>> If you need a non-Turing-complete config language and rule out .ini and
>>> XML, I'm not sure what's left. JSON, perhaps.
>> 
>> I bet a lot of people have a deja-vu feeling about a config file
>> syntax debate so I'll propose an alternative approach: RDF.
> 
> I am +1 on this idea. I like rdf. My question is now: is there an rdf
> parser lib that is available on python2.4+ which can either be gently
> embedded within twisted, or used as a dependency?
> 
> We don't really need SparQL or anything complicated, just the ability
> to resolve some simple triples.
> 
> I do not like angle brackets, but I have always had a fond affection for
> n3.

You're welcome to try and do this; I'm not particularly interested in blocking it or holding it up, but I don't think that changing the input format actually solves any real problems.  I guess I will hold it up if you can't convince me that I'm wrong about that, and demonstrate an actual problem that it solves :-).  You still have to define all the same classes in order to get a plugin, unless we change some of that too - which has nothing to do with the metadata format at all.

I think the way to avoid caching issues in general is to generate the packaging metadata from the source earlier in advance (i.e. at development time, and check it in with the source code, like you would do with a Cython-generated C file or something), not to just mess around with it in a text editor.

I think that there is a benefit to sticking with a format that people very much dislike editing.  Having separately manually-edited metadata introduces an opportunity for the metadata to diverge from the reality of the code.  Making this easy to edit manually means making it more likely that people will think that they need to introduce some manual tweaks.  If it's a huge pain to actually generate the metadata without running a tool that inspects the code, it's less likely that someone will feel the need to get clever.

-glyph



From exarkun at twistedmatrix.com  Thu Apr  7 21:13:12 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Apr 2011 01:13:12 -0000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4585FBCD-267C-43FA-82E5-FCC2FD8D2490@twistedmatrix.com>
References: <mailman.7479.1302155634.9568.twisted-python@twistedmatrix.com>
	<4D9DB49B.2010803@demaledetti.net>
	<20110407235441.GH764@thorne.id.au>
	<4585FBCD-267C-43FA-82E5-FCC2FD8D2490@twistedmatrix.com>
Message-ID: <20110408011312.1992.2086006156.divmod.xquotient.302@localhost.localdomain>

On 12:09 am, glyph at twistedmatrix.com wrote:
>On Apr 7, 2011, at 7:54 PM, Stephen Thorne wrote:
>>On 2011-04-07, Stefano Debenedetti wrote:
>>>On Apr 7, 2011, at 1:08 AM, Tim Allen wrote:
>>>>If you need a non-Turing-complete config language and rule out .ini 
>>>>and
>>>>XML, I'm not sure what's left. JSON, perhaps.
>>>
>>>I bet a lot of people have a deja-vu feeling about a config file
>>>syntax debate so I'll propose an alternative approach: RDF.
>>
>>I am +1 on this idea. I like rdf. My question is now: is there an rdf
>>parser lib that is available on python2.4+ which can either be gently
>>embedded within twisted, or used as a dependency?
>>
>>We don't really need SparQL or anything complicated, just the ability
>>to resolve some simple triples.
>>
>>I do not like angle brackets, but I have always had a fond affection 
>>for
>>n3.
>
>You're welcome to try and do this; I'm not particularly interested in 
>blocking it or holding it up, but I don't think that changing the input 
>format actually solves any real problems.  I guess I will hold it up if 
>you can't convince me that I'm wrong about that, and demonstrate an 
>actual problem that it solves :-).  You still have to define all the 
>same classes in order to get a plugin, unless we change some of that 
>too - which has nothing to do with the metadata format at all.

I agree.  I don't see how this addresses any of the problems with the 
current system which have been raised so far.

Jean-Paul


From stephen at thorne.id.au  Thu Apr  7 21:21:07 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Fri, 8 Apr 2011 11:21:07 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4585FBCD-267C-43FA-82E5-FCC2FD8D2490@twistedmatrix.com>
References: <mailman.7479.1302155634.9568.twisted-python@twistedmatrix.com>
	<4D9DB49B.2010803@demaledetti.net>
	<20110407235441.GH764@thorne.id.au>
	<4585FBCD-267C-43FA-82E5-FCC2FD8D2490@twistedmatrix.com>
Message-ID: <20110408012107.GJ764@thorne.id.au>

On 2011-04-07, Glyph Lefkowitz wrote:
> > I am +1 on this idea. I like rdf. My question is now: is there an rdf
> > parser lib that is available on python2.4+ which can either be gently
> > embedded within twisted, or used as a dependency?
> 
> You're welcome to try and do this; I'm not particularly interested in
> blocking it or holding it up, but I don't think that changing the
> input format actually solves any real problems.  I guess I will hold
> it up if you can't convince me that I'm wrong about that, and
> demonstrate an actual problem that it solves :-).  You still have to
> define all the same classes in order to get a plugin, unless we change
> some of that too - which has nothing to do with the metadata format at
> all.
> 
> I think the way to avoid caching issues in general is to generate the
> packaging metadata from the source earlier in advance (i.e. at
> development time, and check it in with the source code, like you would
> do with a Cython-generated C file or something), not to just mess
> around with it in a text editor.
> 
> I think that there is a benefit to sticking with a format that people
> very much dislike editing.  Having separately manually-edited metadata
> introduces an opportunity for the metadata to diverge from the reality
> of the code.  Making this easy to edit manually means making it more
> likely that people will think that they need to introduce some manual
> tweaks.  If it's a huge pain to actually generate the metadata without
> running a tool that inspects the code, it's less likely that someone
> will feel the need to get clever.

I was just thinking about this.

It would be very easy to write a single twisted/plugins/rdf_plugins.py
file that scans for non-python metadata defined plugins and creates
them.

That way twisted doesn't need to depend on an RDF lib, and this can
be a 'third party' outside-of-twisted package that if you want to use,
you just specify it as a dependancy along with the rest of the things
that your project depends on.

... I like this idea for a variety of reasons.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue


From kevin.horn at gmail.com  Thu Apr  7 22:52:44 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 7 Apr 2011 21:52:44 -0500
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
In-Reply-To: <65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>
References: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
	<65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>
Message-ID: <BANLkTinqqSXWDEznk+E0bj0ixnZWcQTa2A@mail.gmail.com>

On Thu, Apr 7, 2011 at 1:23 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Apr 7, 2011, at 12:16 PM, anatoly techtonik wrote:
>
> > I've made a proof of concept for asynchronous console input on Windows
> > [1] and now I am trying to understand the limits of
> > WaitForMultipleObjects API I've used.
> >
> > Documentation on win32eventreactor mentions limit for 64 objects:
> >
> http://twistedmatrix.com/documents/11.0.0/api/twisted.internet.win32eventreactor.htm
> > However, it is completely opaque what these objects are? For console
> > handles and process handles it is quite obvious, but not for sockets.
> >
> > Is 64 the limit for total amount sockets opened on different ports?
> > Is 64 the limit for connections made to a socket on specified port?
> >
> > 1.
> http://techtonik.rainforce.org/2011/03/asynchronous-input-from-windows-console.html
>
> 64 is the limit for the total number of objects (listening ports,
> connections to a port, client connections, your console, the waker, serial
> ports, whatever) that WFMO may wait upon at once.
>
> Put another way, MAXIMUM_WAIT_OBJECTS=64:
> http://msdn.microsoft.com/en-us/library/ms687025(v=vs.85).aspx
>
>
Note that you can wait on more than 64 objects at a time, just not using a
single WaitForMultipleObjects call.  The MSDN page Glyph pointed out has a
little more info.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110407/9eff711f/attachment.htm 

From mithrandi at mithrandi.net  Fri Apr  8 02:56:11 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 8 Apr 2011 08:56:11 +0200
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
In-Reply-To: <BANLkTinqqSXWDEznk+E0bj0ixnZWcQTa2A@mail.gmail.com>
References: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
	<65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>
	<BANLkTinqqSXWDEznk+E0bj0ixnZWcQTa2A@mail.gmail.com>
Message-ID: <BANLkTimUZz9U5QQy7+YW+COEvDcTYn-7RA@mail.gmail.com>

On Fri, Apr 8, 2011 at 4:52 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
> Note that you can wait on more than 64 objects at a time, just not using a
> single WaitForMultipleObjects call.? The MSDN page Glyph pointed out has a
> little more info.

The proposed solutions, however, seem rather unsatisfactory. If you're
going to start spawning new threads to monitor everything, you might
as well just do IOCP in another thread, or even in the main thread (at
least as far as I know).
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From glyph at twistedmatrix.com  Fri Apr  8 21:26:53 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 8 Apr 2011 21:26:53 -0400
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
In-Reply-To: <BANLkTimUZz9U5QQy7+YW+COEvDcTYn-7RA@mail.gmail.com>
References: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
	<65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>
	<BANLkTinqqSXWDEznk+E0bj0ixnZWcQTa2A@mail.gmail.com>
	<BANLkTimUZz9U5QQy7+YW+COEvDcTYn-7RA@mail.gmail.com>
Message-ID: <BE14902F-4290-4863-ABAD-931A52EAAA7D@twistedmatrix.com>


On Apr 8, 2011, at 2:56 AM, Tristan Seligmann wrote:

> On Fri, Apr 8, 2011 at 4:52 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>> Note that you can wait on more than 64 objects at a time, just not using a
>> single WaitForMultipleObjects call.  The MSDN page Glyph pointed out has a
>> little more info.
> 
> The proposed solutions, however, seem rather unsatisfactory. If you're
> going to start spawning new threads to monitor everything, you might
> as well just do IOCP in another thread, or even in the main thread (at
> least as far as I know).

I think we may be close to the point where we can drop win32eventreactor completely.  I think IOCP can deal with arbitrary Windows events too, so if we just expose that in a compatible way, and whatever else comes along with it, we can just delete win32er without losing any functionality.  (Or maybe we already do?  Not my area of expertise any more :)).



From ppergame at gmail.com  Fri Apr  8 21:43:16 2011
From: ppergame at gmail.com (Pavel Pergamenshchik)
Date: Fri, 8 Apr 2011 18:43:16 -0700
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
In-Reply-To: <BE14902F-4290-4863-ABAD-931A52EAAA7D@twistedmatrix.com>
References: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
	<65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>
	<BANLkTinqqSXWDEznk+E0bj0ixnZWcQTa2A@mail.gmail.com>
	<BANLkTimUZz9U5QQy7+YW+COEvDcTYn-7RA@mail.gmail.com>
	<BE14902F-4290-4863-ABAD-931A52EAAA7D@twistedmatrix.com>
Message-ID: <BANLkTikLU5zamfvUKdNNuD_zR4Zg2AtQXA@mail.gmail.com>

On Fri, Apr 8, 2011 at 6:26 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> On Apr 8, 2011, at 2:56 AM, Tristan Seligmann wrote:
>
>> On Fri, Apr 8, 2011 at 4:52 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>>> Note that you can wait on more than 64 objects at a time, just not using a
>>> single WaitForMultipleObjects call. ?The MSDN page Glyph pointed out has a
>>> little more info.
>>
>> The proposed solutions, however, seem rather unsatisfactory. If you're
>> going to start spawning new threads to monitor everything, you might
>> as well just do IOCP in another thread, or even in the main thread (at
>> least as far as I know).
>
> I think we may be close to the point where we can drop win32eventreactor completely. ?I think IOCP can deal with arbitrary Windows events too, so if we just expose that in a compatible way, and whatever else comes along with it, we can just delete win32er without losing any functionality. ?(Or maybe we already do? ?Not my area of expertise any more :)).

It's technically possible, but it's not a thing that iocpreactor
currently does. Someone (hurr hurr) needs to stop slacking and
implement it, along with support for waiting on an arbitrary number of
handles.

Also, how much do we care that win32er can be used without a compiler,
but iocpreactor needs one to build the API wrapper?


From techtonik at gmail.com  Sat Apr  9 03:26:06 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Sat, 9 Apr 2011 10:26:06 +0300
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
In-Reply-To: <BANLkTikLU5zamfvUKdNNuD_zR4Zg2AtQXA@mail.gmail.com>
References: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
	<65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>
	<BANLkTinqqSXWDEznk+E0bj0ixnZWcQTa2A@mail.gmail.com>
	<BANLkTimUZz9U5QQy7+YW+COEvDcTYn-7RA@mail.gmail.com>
	<BE14902F-4290-4863-ABAD-931A52EAAA7D@twistedmatrix.com>
	<BANLkTikLU5zamfvUKdNNuD_zR4Zg2AtQXA@mail.gmail.com>
Message-ID: <BANLkTimHnZ+w5332Lh9+oOgEi2FMTo4Hiw@mail.gmail.com>

On Sat, Apr 9, 2011 at 4:43 AM, Pavel Pergamenshchik <ppergame at gmail.com> wrote:
> On Fri, Apr 8, 2011 at 6:26 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>>
>> On Apr 8, 2011, at 2:56 AM, Tristan Seligmann wrote:
>>
>>> On Fri, Apr 8, 2011 at 4:52 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>>>> Note that you can wait on more than 64 objects at a time, just not using a
>>>> single WaitForMultipleObjects call. ?The MSDN page Glyph pointed out has a
>>>> little more info.
>>>
>>> The proposed solutions, however, seem rather unsatisfactory. If you're
>>> going to start spawning new threads to monitor everything, you might
>>> as well just do IOCP in another thread, or even in the main thread (at
>>> least as far as I know).
>>
>> I think we may be close to the point where we can drop win32eventreactor completely. ?I think IOCP can deal with arbitrary Windows events too, so if we just expose that in a compatible way, and whatever else comes along with it, we can just delete win32er without losing any functionality. ?(Or maybe we already do? ?Not my area of expertise any more :)).
>
> It's technically possible, but it's not a thing that iocpreactor
> currently does. Someone (hurr hurr) needs to stop slacking and
> implement it, along with support for waiting on an arbitrary number of
> handles.

I've found a "tutorial" by Richard Tew.
http://posted-stuff.blogspot.com/2009/07/iocp-based-sockets-with-ctypes-in_31.html

There is a lot of stuff to read. I can figure out if:
1. IOCP doesn't give a 100% CPU load when idle
2. It is doesn't seem like it is possible to listen to console events
like WFMO, but I didn't try

> Also, how much do we care that win32er can be used without a compiler,
> but iocpreactor needs one to build the API wrapper?
--
anatoly t.


From mithrandi at mithrandi.net  Sat Apr  9 07:15:08 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 9 Apr 2011 13:15:08 +0200
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
In-Reply-To: <BANLkTikLU5zamfvUKdNNuD_zR4Zg2AtQXA@mail.gmail.com>
References: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
	<65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>
	<BANLkTinqqSXWDEznk+E0bj0ixnZWcQTa2A@mail.gmail.com>
	<BANLkTimUZz9U5QQy7+YW+COEvDcTYn-7RA@mail.gmail.com>
	<BE14902F-4290-4863-ABAD-931A52EAAA7D@twistedmatrix.com>
	<BANLkTikLU5zamfvUKdNNuD_zR4Zg2AtQXA@mail.gmail.com>
Message-ID: <BANLkTiknXzMdWgxXE-M60TwT447bcdsaCA@mail.gmail.com>

On Sat, Apr 9, 2011 at 3:43 AM, Pavel Pergamenshchik <ppergame at gmail.com> wrote:
> Also, how much do we care that win32er can be used without a compiler,
> but iocpreactor needs one to build the API wrapper?

I suspect it's not terribly important, since Windows users can just
use the binary distributions where somebody else has done all the hard
work of compiling.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From exarkun at twistedmatrix.com  Sun Apr 10 00:05:23 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 10 Apr 2011 04:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1302408323.77.1266112233@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110410/5c4e6e98/attachment.htm 

From exarkun at twistedmatrix.com  Mon Apr 11 20:19:10 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 12 Apr 2011 00:19:10 -0000
Subject: [Twisted-Python] Announcing pyOpenSSL 0.12
Message-ID: <20110412001910.1992.144878409.divmod.xquotient.421@localhost.localdomain>

Exciting news everyone,

I have just released pyOpenSSL 0.12.  pyOpenSSL provides Python bindings 
to a number of OpenSSL APIs, including certificates, public and private 
keys, and of course running TLS (SSL) over sockets or arbitrary in- 
memory buffiers.

This release fixes an incompatibility with Python 2.7 involving 
memoryviews.  It also exposes the "info callback" constants used to 
report progress of the TLS handshake and later steps of SSL connections. 
Perhaps most interestingly, it also adds support for inspecting 
arbitrary X509 extensions.

http://python.org/pypi/pyOpenSSL - check it out.

Jean-Paul


From techtonik at gmail.com  Tue Apr 12 02:25:17 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Tue, 12 Apr 2011 09:25:17 +0300
Subject: [Twisted-Python] Announcing pyOpenSSL 0.12
In-Reply-To: <20110412001910.1992.144878409.divmod.xquotient.421@localhost.localdomain>
References: <20110412001910.1992.144878409.divmod.xquotient.421@localhost.localdomain>
Message-ID: <BANLkTin7oLCMj6jEmoeHG2i0y71ZpxYcaQ@mail.gmail.com>

Good news. It may worth to update http://wiki.python.org/moin/SSL with
details. Right now it says that pyOpenSSL can not validate server
identity.
--
anatoly t.



On Tue, Apr 12, 2011 at 3:19 AM,  <exarkun at twistedmatrix.com> wrote:
> Exciting news everyone,
>
> I have just released pyOpenSSL 0.12. ?pyOpenSSL provides Python bindings
> to a number of OpenSSL APIs, including certificates, public and private
> keys, and of course running TLS (SSL) over sockets or arbitrary in-
> memory buffiers.
>
> This release fixes an incompatibility with Python 2.7 involving
> memoryviews. ?It also exposes the "info callback" constants used to
> report progress of the TLS handshake and later steps of SSL connections.
> Perhaps most interestingly, it also adds support for inspecting
> arbitrary X509 extensions.
>
> http://python.org/pypi/pyOpenSSL - check it out.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From exarkun at twistedmatrix.com  Sun Apr 17 09:07:42 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 Apr 2011 13:07:42 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1303045662.98.1256093206@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110417/0204a382/attachment.htm 

From exarkun at twistedmatrix.com  Sun Apr 17 12:02:03 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 Apr 2011 16:02:03 -0000
Subject: [Twisted-Python] Python 2.7 on 64 bit Fedora 11
Message-ID: <20110417160203.1992.52511928.divmod.xquotient.776@localhost.localdomain>

Greetings,

We've had a Fedora 11 slave for a little while now (hosted by Flumotion, 
thanks!).  It's been green just about since it came up, so I think we 
should call it a supported platform now.

It will show up on the buildbot supported platforms page and force- 
builds.py will include it (once you update your checkout).

Jean-Paul


From glyph at twistedmatrix.com  Mon Apr 18 16:08:05 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Apr 2011 16:08:05 -0400
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: 1303045662.98.1256093206@twistedmatrix.com
References: 1303045662.98.1256093206@twistedmatrix.com
Message-ID: <1977AB77-2556-4898-82E6-6A2209E09425@twistedmatrix.com>


On Apr 17, 2011, at 9:07 AM, exarkun at twistedmatrix.com wrote:

> Total:                 9         12       1298         -3

Woo!



From Marcin.Kasperski at mekk.waw.pl  Tue Apr 19 10:27:27 2011
From: Marcin.Kasperski at mekk.waw.pl (Marcin Kasperski)
Date: Tue, 19 Apr 2011 16:27:27 +0200
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
References: <20110407003518.GD764@thorne.id.au>
Message-ID: <87hb9u9v00.fsf@mekk.waw.pl>

> Part of the discussion was about how to rewrite this in such a way that
> no python code needs to be run in order to discover all the
> tapname+description combinations that are available to twistd, this is
> because of a perceived performance and sanity deficit in using 'twistd'.

Have you considered using setuptools entry_points? They are de facto
standard and work fairly well for tools like paster or sqlalchemy...




From exarkun at twistedmatrix.com  Tue Apr 19 12:13:28 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 19 Apr 2011 16:13:28 -0000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <87hb9u9v00.fsf@mekk.waw.pl>
References: <20110407003518.GD764@thorne.id.au>
	<87hb9u9v00.fsf@mekk.waw.pl>
Message-ID: <20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>

On 02:27 pm, marcin.kasperski at mekk.waw.pl wrote:
>>Part of the discussion was about how to rewrite this in such a way 
>>that
>>no python code needs to be run in order to discover all the
>>tapname+description combinations that are available to twistd, this is
>>because of a perceived performance and sanity deficit in using 
>>'twistd'.
>
>Have you considered using setuptools entry_points? They are de facto
>standard and work fairly well for tools like paster or sqlalchemy...

I don't think setuptools entry_points are expressive enough to be used 
here.
However, regardless, due to problems with setuptools, I don't think 
Twisted should gain a non-optional dependency on it (as it would be for 
something as core as twistd plugins).  If distribute makes it into the 
standard library (circa Python 3.3) then it might be reasonable to 
consider depending on it, if it actually manages to fix the issues it 
initially inherited from setuptools.

Jean-Paul


From glyph at twistedmatrix.com  Tue Apr 19 14:06:38 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 19 Apr 2011 14:06:38 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
Message-ID: <77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>

On Apr 19, 2011, at 12:13 PM, exarkun at twistedmatrix.com wrote:

> On 02:27 pm, marcin.kasperski at mekk.waw.pl wrote:
>>> Part of the discussion was about how to rewrite this in such a way 
>>> that
>>> no python code needs to be run in order to discover all the
>>> tapname+description combinations that are available to twistd, this is
>>> because of a perceived performance and sanity deficit in using 
>>> 'twistd'.
>> 
>> Have you considered using setuptools entry_points? They are de facto
>> standard and work fairly well for tools like paster or sqlalchemy...
> 
> I don't think setuptools entry_points are expressive enough to be used 
> here.
> However, regardless, due to problems with setuptools, I don't think 
> Twisted should gain a non-optional dependency on it (as it would be for 
> something as core as twistd plugins).

Strongly agreed on both counts.  For a long time I wished that we could be more 'standard' in this regard, but the more I learned about how entrypoints actually work, the less I like them.

> If distribute makes it into the 
> standard library (circa Python 3.3) then it might be reasonable to 
> consider depending on it, if it actually manages to fix the issues it 
> initially inherited from setuptools.

I don't believe 'distribute' is ever making it into the standard library.  The thing going into python 3.3 is 'packaging', which, obviously, is a copy (hopefully unmodified) of 'distutils2', which has nothing in common with 'distribute' except for its author.

'distribute' is a fork of setuptools that is actively maintained.  'distutils2' is a replacement for distutils (as I understand it, a rewrite) that does a bunch of things differently.

More info here: <https://bitbucket.org/tarek/distutils2/wiki/Home>.



From david at silveregg.co.jp  Wed Apr 20 00:28:25 2011
From: david at silveregg.co.jp (David)
Date: Wed, 20 Apr 2011 13:28:25 +0900
Subject: [Twisted-Python] Understanding deferred and error handling
Message-ID: <4DAE60E9.80903@silveregg.co.jp>

Hi,

I have a hard time figuring out error handling with deferred in twisted. 
More exactly, I don't understand how to always get meaningful tracebacks 
to understand where the error actually happened. For a simple example:

import sys

import twisted.web.client

from twisted.internet import defer
from twisted.internet import reactor
from twisted.python import log

def remote_call():
     # No process bound to 8083 -> connection refused
     d = twisted.web.client.getPage("http://localhost:8083")
     return d

def main():
     d = remote_call()
     def _stop(arg):
         reactor.stop()
     d.addBoth(_stop)

log.startLogging(sys.stdout)
reactor.callWhenRunning(main)
reactor.run()

This will simply print no error in the log:

2011-04-20 12:37:40+0900 [-] Log opened.
2011-04-20 12:37:40+0900 [-] Starting factory <HTTPClientFactory: 
http://localhost:8083>
2011-04-20 12:37:40+0900 [HTTPPageGetter,client] Stopping factory 
<HTTPClientFactory: http://localhost:8083>
2011-04-20 12:37:40+0900 [-] Main loop terminated.

This already bothers me at a fundamental level, because it means it is 
very easy to "swallow" errors without being aware of it. Is there a 
"systematic" solution to this issue, or am I condemned to handle errors 
systematically everywhere in my code ?

Now, if I add an errback for logging purpose:

def main():
     d = remote_call()
     def _stop(arg):
         reactor.stop()
     d.addErrback(log.err)
     d.addBoth(_stop)

I get something like:

2011-04-20 12:38:35+0900 [-] Log opened.
2011-04-20 12:38:35+0900 [-] Starting factory <HTTPClientFactory: 
http://localhost:8083>
2011-04-20 12:38:35+0900 [HTTPPageGetter,client] Unhandled Error
	Traceback (most recent call last):
	Failure: twisted.web.error.Error: 404 Not Found
	
2011-04-20 12:38:35+0900 [HTTPPageGetter,client] Stopping factory 
<HTTPClientFactory: http://localhost:8083>
2011-04-20 12:38:35+0900 [-] Main loop terminated.

I do get an error, but I don't get a traceback. Interestingly enough, if 
I use printTraceback:

def main():
     d = remote_call()
     def _stop(arg):
         reactor.stop()
     def log_error(failure):
         log.err(failure.printTraceback())
         return failure
     d.addErrback(log_error)
     d.addBoth(_stop)

I don't get any traceback either.

I found quite a few documents on how to handle errors in twisted, but I 
did not see much information on how to at least make sure unexpected 
errors are being shown (and fixed later).

cheers,

David


From jason.heeris at gmail.com  Wed Apr 20 00:41:11 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Wed, 20 Apr 2011 12:41:11 +0800
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <4DAE60E9.80903@silveregg.co.jp>
References: <4DAE60E9.80903@silveregg.co.jp>
Message-ID: <BANLkTimaEywz2q8C8sJNfqSDxXpkC3xPmg@mail.gmail.com>

On 20 April 2011 12:28, David <david at silveregg.co.jp> wrote:
> This already bothers me at a fundamental level, because it means it is
> very easy to "swallow" errors without being aware of it. Is there a
> "systematic" solution to this issue, or am I condemned to handle errors
> systematically everywhere in my code ?

My approach is to (where appropriate) use "passthrough" type methods, eg.

    def stop(result):
        reactor.stop()
        return result

If you use that in your code, you should see straight away that the
unhandled Failure is logged.

? Jason


From jrennie at gmail.com  Wed Apr 20 06:15:08 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 20 Apr 2011 06:15:08 -0400
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <4DAE60E9.80903@silveregg.co.jp>
References: <4DAE60E9.80903@silveregg.co.jp>
Message-ID: <BANLkTimBBqU4rUwtCQaCCYcRzKHHq6JV4g@mail.gmail.com>

On Wed, Apr 20, 2011 at 12:28 AM, David <david at silveregg.co.jp> wrote:

>     def _stop(arg):
>         reactor.stop()
>     d.addBoth(_stop)
>

Try using addCallbacks instead of addBoth.  Then, you can logically separate
code to handle/print errors from "normal" code.

This will simply print no error in the log:
>

That's because you discarded the twisted.python.failure.Failure object by
using _stop for your errback and not doing anything with the arg.  Similar
to try/except with a "pass" in the "except" clause.

    def log_error(failure):

        log.err(failure.printTraceback())
>         return failure
>     d.addErrback(log_error)
>     d.addBoth(_stop)
>

Use d.addCallbacks(_stop, log_error) instead of addBoth/addErrback.  Also,
you probably want "log.err(failure.getTraceback())" instead of
"log.err(failure.printTraceback())".  printTraceback does not return a
meaningful value IIUC.

I don't get any traceback either.
>

Your traceback went to stdout whereas you were probably watching stderr or a
log file.

Jason

-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110420/6708b033/attachment.htm 

From mithrandi at mithrandi.net  Wed Apr 20 06:44:12 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 20 Apr 2011 12:44:12 +0200
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <BANLkTimBBqU4rUwtCQaCCYcRzKHHq6JV4g@mail.gmail.com>
References: <4DAE60E9.80903@silveregg.co.jp>
	<BANLkTimBBqU4rUwtCQaCCYcRzKHHq6JV4g@mail.gmail.com>
Message-ID: <BANLkTinCMP6jG8sSDC3yJBfW+UVwryKYNQ@mail.gmail.com>

On Wed, Apr 20, 2011 at 12:15 PM, Jason Rennie <jrennie at gmail.com> wrote:
>>
>> ?? ?def log_error(failure):
>>
>> ? ? ? ? log.err(failure.printTraceback())
>> ? ? ? ? return failure
>> ? ? d.addErrback(log_error)
>> ? ? d.addBoth(_stop)
>
> Use d.addCallbacks(_stop, log_error) instead of addBoth/addErrback. ?Also,
> you probably want "log.err(failure.getTraceback())" instead of
> "log.err(failure.printTraceback())". ?printTraceback does not return a
> meaningful value IIUC.

Actually, you just want:

    log.err(failure)

I don't think there's anything particularly wrong with using
addErrback / addBoth in that way, either. If there is an error, you
want to log it; and then regardless of whether there was an error or
not, and whether the attempt to log the error failed, you want to stop
the reactor; this is exactly what the addErrback/addBoth code achieves
in this case. The equivalent synchronous code looks something like:

try:
    remote_call()
except:
    logTheError()
finally:
    reactor.stop()

The reason you don't get a traceback in this case is that there isn't
one; the exception is created directly as a result of parsing the
response from the HTTP server, instead of being thrown in code lower
down the stack and caught higher up. Unfortunately this situation is
quite common in asynchronous code; there is no direct equivalent of a
"stack trace" for asynchronous code, so often you have a Failure that
carries no indication of where the operation that failed was
initiated, although turning on Deferred debugging (see
Deferred.setDebugging) can sometimes be helpful in these situations.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From p.mayers at imperial.ac.uk  Wed Apr 20 13:31:23 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 20 Apr 2011 18:31:23 +0100
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <4DAE60E9.80903@silveregg.co.jp>
References: <4DAE60E9.80903@silveregg.co.jp>
Message-ID: <4DAF186B.5000000@imperial.ac.uk>

On 04/20/2011 05:28 AM, David wrote:
> Hi,
>
> I have a hard time figuring out error handling with deferred in twisted.
> More exactly, I don't understand how to always get meaningful tracebacks
> to understand where the error actually happened. For a simple example:
>
> import sys
>
> import twisted.web.client
>
> from twisted.internet import defer
> from twisted.internet import reactor
> from twisted.python import log
>
> def remote_call():
>       # No process bound to 8083 ->  connection refused
>       d = twisted.web.client.getPage("http://localhost:8083")
>       return d
>
> def main():
>       d = remote_call()
>       def _stop(arg):
>           reactor.stop()
>       d.addBoth(_stop)
>
> log.startLogging(sys.stdout)
> reactor.callWhenRunning(main)
> reactor.run()
>
> This will simply print no error in the log:
>
> 2011-04-20 12:37:40+0900 [-] Log opened.
> 2011-04-20 12:37:40+0900 [-] Starting factory<HTTPClientFactory:
> http://localhost:8083>
> 2011-04-20 12:37:40+0900 [HTTPPageGetter,client] Stopping factory
> <HTTPClientFactory: http://localhost:8083>
> 2011-04-20 12:37:40+0900 [-] Main loop terminated.
>
> This already bothers me at a fundamental level, because it means it is
> very easy to "swallow" errors without being aware of it. Is there a
> "systematic" solution to this issue, or am I condemned to handle errors
> systematically everywhere in my code ?
>
> Now, if I add an errback for logging purpose:
>
> def main():
>       d = remote_call()
>       def _stop(arg):
>           reactor.stop()
>       d.addErrback(log.err)
>       d.addBoth(_stop)
>
> I get something like:
>
> 2011-04-20 12:38:35+0900 [-] Log opened.
> 2011-04-20 12:38:35+0900 [-] Starting factory<HTTPClientFactory:
> http://localhost:8083>
> 2011-04-20 12:38:35+0900 [HTTPPageGetter,client] Unhandled Error
> 	Traceback (most recent call last):
> 	Failure: twisted.web.error.Error: 404 Not Found
> 	
> 2011-04-20 12:38:35+0900 [HTTPPageGetter,client] Stopping factory
> <HTTPClientFactory: http://localhost:8083>
> 2011-04-20 12:38:35+0900 [-] Main loop terminated.
>
> I do get an error, but I don't get a traceback. Interestingly enough, if
> I use printTraceback:
>
> def main():
>       d = remote_call()
>       def _stop(arg):
>           reactor.stop()
>       def log_error(failure):
>           log.err(failure.printTraceback())
>           return failure
>       d.addErrback(log_error)
>       d.addBoth(_stop)
>
> I don't get any traceback either.

As other people have pointed out, you're discarding the failure.

This:

def on_error(failure):
     return
d = some_call()
d.addErrback(on_error)

...is equivalent to synchronous code of the form:

try:
   some_call()
except:
   pass

...i.e. silently eating all exceptions. The latter is usually bad 
python, and so the former is usually bad Twisted ;o)





From cournape at gmail.com  Wed Apr 20 21:04:20 2011
From: cournape at gmail.com (David Cournapeau)
Date: Thu, 21 Apr 2011 10:04:20 +0900
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <4DAF186B.5000000@imperial.ac.uk>
References: <4DAE60E9.80903@silveregg.co.jp> <4DAF186B.5000000@imperial.ac.uk>
Message-ID: <BANLkTik3ZR+KCyj=3sgG4ZcbSqFnfGFYPA@mail.gmail.com>

On Thu, Apr 21, 2011 at 2:31 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 04/20/2011 05:28 AM, David wrote:
>> Hi,
>>
>> I have a hard time figuring out error handling with deferred in twisted.
>> More exactly, I don't understand how to always get meaningful tracebacks
>> to understand where the error actually happened. For a simple example:
>>
>> import sys
>>
>> import twisted.web.client
>>
>> from twisted.internet import defer
>> from twisted.internet import reactor
>> from twisted.python import log
>>
>> def remote_call():
>> ? ? ? # No process bound to 8083 -> ?connection refused
>> ? ? ? d = twisted.web.client.getPage("http://localhost:8083")
>> ? ? ? return d
>>
>> def main():
>> ? ? ? d = remote_call()
>> ? ? ? def _stop(arg):
>> ? ? ? ? ? reactor.stop()
>> ? ? ? d.addBoth(_stop)
>>
>> log.startLogging(sys.stdout)
>> reactor.callWhenRunning(main)
>> reactor.run()
>>
>> This will simply print no error in the log:
>>
>> 2011-04-20 12:37:40+0900 [-] Log opened.
>> 2011-04-20 12:37:40+0900 [-] Starting factory<HTTPClientFactory:
>> http://localhost:8083>
>> 2011-04-20 12:37:40+0900 [HTTPPageGetter,client] Stopping factory
>> <HTTPClientFactory: http://localhost:8083>
>> 2011-04-20 12:37:40+0900 [-] Main loop terminated.
>>
>> This already bothers me at a fundamental level, because it means it is
>> very easy to "swallow" errors without being aware of it. Is there a
>> "systematic" solution to this issue, or am I condemned to handle errors
>> systematically everywhere in my code ?
>>
>> Now, if I add an errback for logging purpose:
>>
>> def main():
>> ? ? ? d = remote_call()
>> ? ? ? def _stop(arg):
>> ? ? ? ? ? reactor.stop()
>> ? ? ? d.addErrback(log.err)
>> ? ? ? d.addBoth(_stop)
>>
>> I get something like:
>>
>> 2011-04-20 12:38:35+0900 [-] Log opened.
>> 2011-04-20 12:38:35+0900 [-] Starting factory<HTTPClientFactory:
>> http://localhost:8083>
>> 2011-04-20 12:38:35+0900 [HTTPPageGetter,client] Unhandled Error
>> ? ? ? Traceback (most recent call last):
>> ? ? ? Failure: twisted.web.error.Error: 404 Not Found
>>
>> 2011-04-20 12:38:35+0900 [HTTPPageGetter,client] Stopping factory
>> <HTTPClientFactory: http://localhost:8083>
>> 2011-04-20 12:38:35+0900 [-] Main loop terminated.
>>
>> I do get an error, but I don't get a traceback. Interestingly enough, if
>> I use printTraceback:
>>
>> def main():
>> ? ? ? d = remote_call()
>> ? ? ? def _stop(arg):
>> ? ? ? ? ? reactor.stop()
>> ? ? ? def log_error(failure):
>> ? ? ? ? ? log.err(failure.printTraceback())
>> ? ? ? ? ? return failure
>> ? ? ? d.addErrback(log_error)
>> ? ? ? d.addBoth(_stop)
>>
>> I don't get any traceback either.
>
> As other people have pointed out, you're discarding the failure.

Indeed, I forgot to return the argument in my _stop callback. This answers part
of my question, but not what I consider the meat of my issue, that is
the lack of traceback. Fixing and simplifying my initial example:

import twisted.web.client

from twisted.internet import defer
from twisted.internet import reactor

def remote_call():
    d = twisted.web.client.getPage("http://localhost:8083")
    return d

def main():
    d = remote_call()
    def _stop(arg):
        reactor.stop()
        return arg
    d.addBoth(_stop)

reactor.callWhenRunning(main)
reactor.run()

This will correctly signal an error, but the output:

Unhandled error in Deferred:
Unhandled Error
Traceback (most recent call last):
Failure: twisted.internet.error.ConnectionRefusedError: Connection was
refused by other side: 61: Connection refused.

is not informative. I was hoping for a way to know that the error
happens inside remote_call through e.g. an errback in main. If this is
not possible, how do people generally handle those issues in
asynchronous code ?

cheers,

David


From exarkun at twistedmatrix.com  Wed Apr 20 21:12:43 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 21 Apr 2011 01:12:43 -0000
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <BANLkTik3ZR+KCyj=3sgG4ZcbSqFnfGFYPA@mail.gmail.com>
References: <4DAE60E9.80903@silveregg.co.jp> <4DAF186B.5000000@imperial.ac.uk>
	<BANLkTik3ZR+KCyj=3sgG4ZcbSqFnfGFYPA@mail.gmail.com>
Message-ID: <20110421011243.1992.1848266191.divmod.xquotient.886@localhost.localdomain>

On 01:04 am, cournape at gmail.com wrote:
>but not what I consider the meat of my issue, that is
>the lack of traceback. Fixing and simplifying my initial example:
>
>import twisted.web.client
>
>from twisted.internet import defer
>from twisted.internet import reactor
>
>def remote_call():
>    d = twisted.web.client.getPage("http://localhost:8083")
>    return d
>
>def main():
>    d = remote_call()
>    def _stop(arg):
>        reactor.stop()
>        return arg
>    d.addBoth(_stop)
>
>reactor.callWhenRunning(main)
>reactor.run()
>
>This will correctly signal an error, but the output:
>
>Unhandled error in Deferred:
>Unhandled Error
>Traceback (most recent call last):
>Failure: twisted.internet.error.ConnectionRefusedError: Connection was
>refused by other side: 61: Connection refused.
>
>is not informative. I was hoping for a way to know that the error
>happens inside remote_call through e.g. an errback in main. If this is
>not possible, how do people generally handle those issues in
>asynchronous code ?

log.err takes an additional argument which you can use easily like this:

    def main():
        d = remote_call()
        d.addErrback(log.err, "remote_call failed")
        def _stop(ignored):
            reactor.stop()
        d.addCallback(_stop)

The message you pass here will replace the "Unhandled error in Deferred" 
text in the report of the failure.

Another option is to enable Deferred debugging, which I think someone 
mentioned earlier in the thread:

    from twisted.internet.defer import setDebugging
    setDebugging(True)

or

    twistd --debug ...

or

    trial --debug ...

This causes Deferred to capture the stack at the time it is created and 
the time it is called back.  The "Unhandled error" case will log this 
information.  This should give you the traceback you want.  This is not 
enabled by default because (I suppose) capturing stacks is very 
expensive.

Jean-Paul


From kevin.horn at gmail.com  Wed Apr 20 21:48:20 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 20 Apr 2011 20:48:20 -0500
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
Message-ID: <BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>

> I don't believe 'distribute' is ever making it into the standard library.
>  The thing going into python 3.3 is 'packaging', which, obviously, is a copy
> (hopefully unmodified) of 'distutils2', which has nothing in common with
> 'distribute' except for its author.
>
> 'distribute' is a fork of setuptools that is actively maintained.
>  'distutils2' is a replacement for distutils (as I understand it, a rewrite)
> that does a bunch of things differently.
>
> More info here: <https://bitbucket.org/tarek/distutils2/wiki/Home>.
>
>
This is essentially correct.  A little history for the interested (feel free
to skip it):

First there was setuptools.  Everyone used it, but the author wasn't so
great at keeping it maintained, since it was originally just something he
wrote for himself.  But since he used it a lot in his business, he didn't
want lots of other people making changes either, so it fell into disrepair.

Tarek came along and got busy. He (along with some other people) forked
setuptools and made distribute.  He fixed some bugs, and planned to
eventually clean things up and change the underlying API strangeness.  But
the further he got into it, the more he ran into problems with all the crazy
extensions setuptools/distribute made to distutils.  So he thought "Aha! I
can just clean up distutils and things will be so much easier!".

Well the joke was on him, cuz he discovered distutils was a complete
cluster****.  So he rewrote distutils with an eye on keeping things nice for
everyone.  Project managers, distro packagers, users installing software,
etc.  This is distutils2.  In Python 3.3 and up it will be called
"packaging".  Once people start using it, it will make a lot of the current
packaging headaches in the Python world go away.

But the one thing it does NOT do, that setuptools/distribute DID, is the
entry_points stuff, which according to Tarek should be in a separate package
anyway.



So long story short (too late), once distutils2/packaging drops, the idea
will be for everyone to eventually move to using it rather that distutils,
and using a setup.cfg rather than a setup.py.  Also setuptools/distribute
will hopefully go back to being a niche tool.  Also also the Python
community could use a plugin standard that could replace setuptools'
entry_points.

The end.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110420/95868a7c/attachment.htm 

From albert.brandl at weiermayer.com  Thu Apr 21 03:27:45 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Thu, 21 Apr 2011 09:27:45 +0200
Subject: [Twisted-Python] Running twistd with a compiled file
Message-ID: <20110421072745.GA3654@weiermayer.com>

Hi!

It is sometimes necessary to deploy an application without the sources.
But when I try to start the twistd daemon with a compiled Python file, 
it raises the following traceback:

$ twistd -ny application.pyc
Traceback (most recent call last):
  File "/usr/local/lib/python2.6/dist-packages/Twisted-10.0.0-py2.6-linux-i686.egg/twisted/application/app.py", line 631, in run
    runApp(config)
  File "/usr/local/lib/python2.6/dist-packages/Twisted-10.0.0-py2.6-linux-i686.egg/twisted/scripts/twistd.py", line 23, in runApp
    _SomeApplicationRunner(config).run()
  File "/usr/local/lib/python2.6/dist-packages/Twisted-10.0.0-py2.6-linux-i686.egg/twisted/application/app.py", line 374, in run
    self.application = self.createOrGetApplication()
  File "/usr/local/lib/python2.6/dist-packages/Twisted-10.0.0-py2.6-linux-i686.egg/twisted/application/app.py", line 439, in createOrGetApplication
    application = getApplication(self.config, passphrase)
--- <exception caught here> ---
  File "/usr/local/lib/python2.6/dist-packages/Twisted-10.0.0-py2.6-linux-i686.egg/twisted/application/app.py", line 450, in getApplication
    application = service.loadApplication(filename, style, passphrase)
  File "/usr/local/lib/python2.6/dist-packages/Twisted-10.0.0-py2.6-linux-i686.egg/twisted/application/service.py", line 400, in loadApplication
    application = sob.loadValueFromFile(filename, 'application', passphrase)
  File "/usr/local/lib/python2.6/dist-packages/Twisted-10.0.0-py2.6-linux-i686.egg/twisted/persisted/sob.py", line 210, in loadValueFromFile
    exec fileObj in d, d
exceptions.SyntaxError: Non-ASCII character '\xd1' in file application.pyc on line 1, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details (application.pyc, line 1)

Failed to load application: Non-ASCII character '\xd1' in file application.pyc on line 1, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details (application.pyc, line 1)

This behaviour was observed with twistd 10.2.0.

Of course, it's possible to move most of the logic to other (compiled)
files, but I'd prefer if the application itself could also be deployed
in compiled form.

Is this a known problem? Can you suggest a workaround?

Best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistra?e 12, A-4813 Altm?nster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com


From itamar at itamarst.org  Thu Apr 21 08:17:04 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 21 Apr 2011 08:17:04 -0400
Subject: [Twisted-Python] Running twistd with a compiled file
In-Reply-To: <20110421072745.GA3654@weiermayer.com>
References: <20110421072745.GA3654@weiermayer.com>
Message-ID: <1303388224.1751.2.camel@blake>

On Thu, 2011-04-21 at 09:27 +0200, Albert Brandl wrote:
> Of course, it's possible to move most of the logic to other (compiled)
> files, but I'd prefer if the application itself could also be deployed
> in compiled form.

The .tac file (or application.py) should typically be two lines of code,
just importing everything from elsewhere, so really just having it in
Python seems the easiest solution.



From albert.brandl at weiermayer.com  Thu Apr 21 12:28:58 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Thu, 21 Apr 2011 18:28:58 +0200
Subject: [Twisted-Python] Running twistd with a compiled file
In-Reply-To: <1303388224.1751.2.camel@blake>
References: <20110421072745.GA3654@weiermayer.com>
	<1303388224.1751.2.camel@blake>
Message-ID: <20110421162858.GB2197@weiermayer.com>

On Thu, Apr 21, 2011 at 08:17:04AM -0400, Itamar Turner-Trauring wrote:
> The .tac file (or application.py) should typically be two lines of code,
> just importing everything from elsewhere, so really just having it in
> Python seems the easiest solution.

This is a good argument. I was afraid that having the application as 
source code might help in reverse engineering it, but starting the 
debugger in the application does not reveal much information for modules 
that are compiled.

Thanks & best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistra?e 12, A-4813 Altm?nster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com


From glyph at twistedmatrix.com  Thu Apr 21 12:31:24 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 21 Apr 2011 12:31:24 -0400
Subject: [Twisted-Python] Running twistd with a compiled file
In-Reply-To: <20110421072745.GA3654@weiermayer.com>
References: <20110421072745.GA3654@weiermayer.com>
Message-ID: <D6E25064-0985-4F6E-ABE0-4E4FC0172689@twistedmatrix.com>


On Apr 21, 2011, at 3:27 AM, Albert Brandl wrote:

> Is this a known problem? Can you suggest a workaround?

Deploy your application as a plugin rather than a tac file.  The plugin system will properly scan for compiled python files and load them as regular modules.  This has other advantages as well :).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110421/a96422b8/attachment.htm 

From exarkun at twistedmatrix.com  Thu Apr 21 13:26:55 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 21 Apr 2011 17:26:55 -0000
Subject: [Twisted-Python] Running twistd with a compiled file
In-Reply-To: <20110421162858.GB2197@weiermayer.com>
References: <20110421072745.GA3654@weiermayer.com>
	<1303388224.1751.2.camel@blake>
	<20110421162858.GB2197@weiermayer.com>
Message-ID: <20110421172655.1992.354396425.divmod.xquotient.888@localhost.localdomain>

On 04:28 pm, albert.brandl at weiermayer.com wrote:
>On Thu, Apr 21, 2011 at 08:17:04AM -0400, Itamar Turner-Trauring wrote:
>>The .tac file (or application.py) should typically be two lines of 
>>code,
>>just importing everything from elsewhere, so really just having it in
>>Python seems the easiest solution.
>
>This is a good argument. I was afraid that having the application as
>source code might help in reverse engineering it, but starting the
>debugger in the application does not reveal much information for 
>modules
>that are compiled.

This is the obligatory post in which it is pointed out that .pyc files 
are basically equivalent to .py files as far as revealing your source 
goes.

Jean-Paul


From techtonik at gmail.com  Thu Apr 21 17:11:25 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Fri, 22 Apr 2011 00:11:25 +0300
Subject: [Twisted-Python] Running twistd with a compiled file
In-Reply-To: <20110421172655.1992.354396425.divmod.xquotient.888@localhost.localdomain>
References: <20110421072745.GA3654@weiermayer.com>
	<1303388224.1751.2.camel@blake>
	<20110421162858.GB2197@weiermayer.com>
	<20110421172655.1992.354396425.divmod.xquotient.888@localhost.localdomain>
Message-ID: <BANLkTinXJEpw08t++ayxX+6aX+BHuGyygQ@mail.gmail.com>

On Thu, Apr 21, 2011 at 8:26 PM,  <exarkun at twistedmatrix.com> wrote:
> On 04:28 pm, albert.brandl at weiermayer.com wrote:
>>On Thu, Apr 21, 2011 at 08:17:04AM -0400, Itamar Turner-Trauring wrote:
>>>The .tac file (or application.py) should typically be two lines of
>>>code,
>>>just importing everything from elsewhere, so really just having it in
>>>Python seems the easiest solution.
>>
>>This is a good argument. I was afraid that having the application as
>>source code might help in reverse engineering it, but starting the
>>debugger in the application does not reveal much information for
>>modules
>>that are compiled.
>
> This is the obligatory post in which it is pointed out that .pyc files
> are basically equivalent to .py files as far as revealing your source
> goes.

As the code comments are stripped from .pyc files, most enterprise
grade applications are safe. If that stuff is not complicated enough -
then it can be rewritten from scratch anyway.
--
anatoly t.


From techtonik at gmail.com  Thu Apr 21 17:21:46 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Fri, 22 Apr 2011 00:21:46 +0300
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
Message-ID: <BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>

On Thu, Apr 21, 2011 at 4:48 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> cluster****.? So he rewrote distutils with an eye on keeping things nice for
> everyone.? Project managers, distro packagers, users installing software,
> etc.? This is distutils2.? In Python 3.3 and up it will be called
> "packaging".? Once people start using it, it will make a lot of the current
> packaging headaches in the Python world go away.

Are you sure about that? Where is the list of stories it will solve
when people start using it, so I can check that my cases are covered
by distutils2 insurance plan?

> will hopefully go back to being a niche tool.? Also also the Python
> community could use a plugin standard that could replace setuptools'
> entry_points.

ABC classes? Trac components? What is plugin anyway? Discoverable
module on a syspath? Registered entity in package repository? Filename
in %HOMEDIR% that starts with tx.? (autoloaders from PHP5?)
--
anatoly t.


From david at silveregg.co.jp  Thu Apr 21 20:53:35 2011
From: david at silveregg.co.jp (David)
Date: Fri, 22 Apr 2011 09:53:35 +0900
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <20110421011243.1992.1848266191.divmod.xquotient.886@localhost.localdomain>
References: <4DAE60E9.80903@silveregg.co.jp> <4DAF186B.5000000@imperial.ac.uk>
	<BANLkTik3ZR+KCyj=3sgG4ZcbSqFnfGFYPA@mail.gmail.com>
	<20110421011243.1992.1848266191.divmod.xquotient.886@localhost.localdomain>
Message-ID: <4DB0D18F.7080907@silveregg.co.jp>

On 04/21/2011 10:12 AM, exarkun at twistedmatrix.com wrote:

> log.err takes an additional argument which you can use easily like this:
>
>      def main():
>          d = remote_call()
>          d.addErrback(log.err, "remote_call failed")
>          def _stop(ignored):
>              reactor.stop()
>          d.addCallback(_stop)
>
> The message you pass here will replace the "Unhandled error in Deferred"
> text in the report of the failure.

ok, thanks for the tip.

>
> Another option is to enable Deferred debugging, which I think someone
> mentioned earlier in the thread:
>
>      from twisted.internet.defer import setDebugging
>      setDebugging(True)
>
> or
>
>      twistd --debug ...
>
> or
>
>      trial --debug ...
>
> This causes Deferred to capture the stack at the time it is created and
> the time it is called back.  The "Unhandled error" case will log this
> information.  This should give you the traceback you want.  This is not
> enabled by default because (I suppose) capturing stacks is very
> expensive.

I am not so interested in "debug runs", but more in a way to get more 
informations of our tool stack bugs when run in production. I guess what 
I am looking for is some good practices for dealing with errors, then. 
Maybe a piece of code in twisted itself ?

cheers,

David


From david at silveregg.co.jp  Thu Apr 21 21:01:39 2011
From: david at silveregg.co.jp (David)
Date: Fri, 22 Apr 2011 10:01:39 +0900
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
Message-ID: <4DB0D373.9020909@silveregg.co.jp>

On 04/22/2011 06:21 AM, anatoly techtonik wrote:
> On Thu, Apr 21, 2011 at 4:48 AM, Kevin Horn<kevin.horn at gmail.com>  wrote:
>>
>> cluster****.  So he rewrote distutils with an eye on keeping things nice for
>> everyone.  Project managers, distro packagers, users installing software,
>> etc.  This is distutils2.  In Python 3.3 and up it will be called
>> "packaging".  Once people start using it, it will make a lot of the current
>> packaging headaches in the Python world go away.
>
> Are you sure about that? Where is the list of stories it will solve
> when people start using it, so I can check that my cases are covered
> by distutils2 insurance plan?

[OT]
You can take a look at bento, which is my own response to the distutils 
issues we have in the scipy community (but I would expect twisted and 
most big python libraries to have similar issues):

http://cournape.github.com/Bento/

It is designed from the ground up with the idea of reliable 
customization and complex build supports. It can already build numpy and 
scipy with a near 50 % reduction in LOC compared to our setup.py, and 
more reliably thanks to using a real build tool in the backend (waf, but 
you can add support for a different one if you want).

cheers,

David


From termim at gmail.com  Thu Apr 21 23:13:11 2011
From: termim at gmail.com (Mikhail Terekhov)
Date: Thu, 21 Apr 2011 23:13:11 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4DB0D373.9020909@silveregg.co.jp>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
	<4DB0D373.9020909@silveregg.co.jp>
Message-ID: <BANLkTi=SavZ07sPXmf3DL9F_KNcNp=dO1A@mail.gmail.com>

On Thu, Apr 21, 2011 at 9:01 PM, David <david at silveregg.co.jp> wrote:

> On 04/22/2011 06:21 AM, anatoly techtonik wrote:
> > On Thu, Apr 21, 2011 at 4:48 AM, Kevin Horn<kevin.horn at gmail.com>
>  wrote:
> >>
> >> cluster****.  So he rewrote distutils with an eye on keeping things nice
> for
> >> everyone.  Project managers, distro packagers, users installing
> software,
> >> etc.  This is distutils2.  In Python 3.3 and up it will be called
> >> "packaging".  Once people start using it, it will make a lot of the
> current
> >> packaging headaches in the Python world go away.
> >
> > Are you sure about that? Where is the list of stories it will solve
> > when people start using it, so I can check that my cases are covered
> > by distutils2 insurance plan?
>
> [OT]
> You can take a look at bento, which is my own response to the distutils
> issues we have in the scipy community (but I would expect twisted and
> most big python libraries to have similar issues):
>
> http://cournape.github.com/Bento/
>
> It is designed from the ground up with the idea of reliable
> customization and complex build supports. It can already build numpy and
> scipy with a near 50 % reduction in LOC compared to our setup.py, and
> more reliably thanks to using a real build tool in the backend (waf, but
> you can add support for a different one if you want).
>
> That is nice indeed. But why to invent yet another scripting language for
info files or good old python is not good enough?
BTW are bento and waf sources included in that 50% reduction?


-- 
Mikhail Terekhov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110421/d8714f04/attachment.htm 

From glyph at twistedmatrix.com  Fri Apr 22 02:03:48 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 22 Apr 2011 02:03:48 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4DB0D373.9020909@silveregg.co.jp>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
	<4DB0D373.9020909@silveregg.co.jp>
Message-ID: <0ABFC28B-875C-4F13-8F2A-3288E8A9DF4C@twistedmatrix.com>


On Apr 21, 2011, at 9:01 PM, David wrote:

> You can take a look at bento, which is my own response to the distutils 
> issues we have in the scipy community (but I would expect twisted and 
> most big python libraries to have similar issues):
> 
> http://cournape.github.com/Bento/
> 
> It is designed from the ground up with the idea of reliable 
> customization and complex build supports. It can already build numpy and 
> scipy with a near 50 % reduction in LOC compared to our setup.py, and 
> more reliably thanks to using a real build tool in the backend (waf, but 
> you can add support for a different one if you want).

This looks very interesting.  You kind of bury the lead on that web page though, so let me excerpt it for those who saw the first line, thought "oh, it's yet another python packaging thing" and stopped reading in disgust:

Even better, bento has a distutils compatibiliy layer so that you can write a simple setup.py which works under pip or easy_install.

(emphasis mine)

This suggests that Twisted could actually switch to Bento without creating a massive disruption for our users who want to install it with an existing automation tool - which, frankly, is the main use-case for distutils at this point.

Would you recommend that we do this?  Would there be a benefit?  I like the part where you said "near 50% reduction in LOC" quite a lot but I'm sure there are issues that would come along with it.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110422/c4da83a1/attachment-0001.htm 

From techtonik at gmail.com  Fri Apr 22 02:41:45 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Fri, 22 Apr 2011 09:41:45 +0300
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4DB0D373.9020909@silveregg.co.jp>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
	<4DB0D373.9020909@silveregg.co.jp>
Message-ID: <BANLkTi=PrvjwY+eEtienxqxsCvT_enFWeg@mail.gmail.com>

On Fri, Apr 22, 2011 at 4:01 AM, David <david at silveregg.co.jp> wrote:
> On 04/22/2011 06:21 AM, anatoly techtonik wrote:
>> On Thu, Apr 21, 2011 at 4:48 AM, Kevin Horn<kevin.horn at gmail.com> ?wrote:
>>>
>>> cluster****. ?So he rewrote distutils with an eye on keeping things nice for
>>> everyone. ?Project managers, distro packagers, users installing software,
>>> etc. ?This is distutils2. ?In Python 3.3 and up it will be called
>>> "packaging". ?Once people start using it, it will make a lot of the current
>>> packaging headaches in the Python world go away.
>>
>> Are you sure about that? Where is the list of stories it will solve
>> when people start using it, so I can check that my cases are covered
>> by distutils2 insurance plan?
>
> [OT]
> You can take a look at bento, which is my own response to the distutils
> issues we have in the scipy community (but I would expect twisted and
> most big python libraries to have similar issues):
>
> http://cournape.github.com/Bento/
>
> It is designed from the ground up with the idea of reliable
> customization and complex build supports. It can already build numpy and
> scipy with a near 50 % reduction in LOC compared to our setup.py, and
> more reliably thanks to using a real build tool in the backend (waf, but
> you can add support for a different one if you want).

[OT]
I still can't see how it solves even the basic user story - 'i want to
uninstall twisted' or 'i want two versions of twisted installed'.
Absolute paths in examples won't work on Windows, hardcoded version
field in .info file is inconvenient. It looks like yet another pip,
distribute or easy_install. Don't get me wrong - it looks better - but
for yet another nih packaging solution there should be some convincing
facts or use cases (examples) of why this particular solution is
better. In fact, I'd like to see Wikipedia like comparison for
different 'packaging solutions' somewhere at
http://wiki.python.org/moin/Packaging because I don't use anything
except, well, easy_install, which can't even install protocol buffers.
I guess bento can?
--
anatoly t.


From david at silveregg.co.jp  Fri Apr 22 03:44:37 2011
From: david at silveregg.co.jp (David)
Date: Fri, 22 Apr 2011 16:44:37 +0900
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <BANLkTi=SavZ07sPXmf3DL9F_KNcNp=dO1A@mail.gmail.com>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
	<4DB0D373.9020909@silveregg.co.jp>
	<BANLkTi=SavZ07sPXmf3DL9F_KNcNp=dO1A@mail.gmail.com>
Message-ID: <4DB131E5.8020902@silveregg.co.jp>

On 04/22/2011 12:13 PM, Mikhail Terekhov wrote:
> On Thu, Apr 21, 2011 at 9:01 PM, David <david at silveregg.co.jp
> <mailto:david at silveregg.co.jp>> wrote:
>
>     On 04/22/2011 06:21 AM, anatoly techtonik wrote:
>      > On Thu, Apr 21, 2011 at 4:48 AM, Kevin Horn<kevin.horn at gmail.com
>     <mailto:kevin.horn at gmail.com>>  wrote:
>      >>
>      >> cluster****.  So he rewrote distutils with an eye on keeping
>     things nice for
>      >> everyone.  Project managers, distro packagers, users installing
>     software,
>      >> etc.  This is distutils2.  In Python 3.3 and up it will be called
>      >> "packaging".  Once people start using it, it will make a lot of
>     the current
>      >> packaging headaches in the Python world go away.
>      >
>      > Are you sure about that? Where is the list of stories it will solve
>      > when people start using it, so I can check that my cases are covered
>      > by distutils2 insurance plan?
>
>     [OT]
>     You can take a look at bento, which is my own response to the distutils
>     issues we have in the scipy community (but I would expect twisted and
>     most big python libraries to have similar issues):
>
>     http://cournape.github.com/Bento/
>
>     It is designed from the ground up with the idea of reliable
>     customization and complex build supports. It can already build numpy and
>     scipy with a near 50 % reduction in LOC compared to our setup.py, and
>     more reliably thanks to using a real build tool in the backend (waf, but
>     you can add support for a different one if you want).
>
> That is nice indeed. But why to invent yet another scripting language for
> info files or good old python is not good enough?

The point is to have a mini DSL which is near static, so that it can 
safely be analysed server-side. *IF* you need more power (like numpy), 
then there is the notion of hook file which are straight python files 
(no restriction, except it has to be under the control of bento).

Note that languages which are arguably more powerful than python, like 
Haskell, use the same thing: Cabal, the "haskell distutils" uses the 
same format. Actually, I shamelessly copied their format for bento.info

> BTW are bento and waf sources included in that 50% reduction?

Waf, no, but bento+bento script is smaller than 
numpy.distutils+setup.py. If you count distutils itself, then I would 
not be surprised that waf+bento+bento script < 
distutils+numpy.distutils+setup.py, but that would need checking. And 
bento/waf have clear boundaries (different project, different 
maintainers, different histories), wheras numpy.distutils/distutils 
definitly does not have that.

cheers,

David


From david at silveregg.co.jp  Fri Apr 22 03:51:17 2011
From: david at silveregg.co.jp (David)
Date: Fri, 22 Apr 2011 16:51:17 +0900
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <BANLkTi=PrvjwY+eEtienxqxsCvT_enFWeg@mail.gmail.com>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
	<4DB0D373.9020909@silveregg.co.jp>
	<BANLkTi=PrvjwY+eEtienxqxsCvT_enFWeg@mail.gmail.com>
Message-ID: <4DB13375.3040609@silveregg.co.jp>

On 04/22/2011 03:41 PM, anatoly techtonik wrote:
> On Fri, Apr 22, 2011 at 4:01 AM, David<david at silveregg.co.jp>  wrote:
>> On 04/22/2011 06:21 AM, anatoly techtonik wrote:
>>> On Thu, Apr 21, 2011 at 4:48 AM, Kevin Horn<kevin.horn at gmail.com>    wrote:
>>>>
>>>> cluster****.  So he rewrote distutils with an eye on keeping things nice for
>>>> everyone.  Project managers, distro packagers, users installing software,
>>>> etc.  This is distutils2.  In Python 3.3 and up it will be called
>>>> "packaging".  Once people start using it, it will make a lot of the current
>>>> packaging headaches in the Python world go away.
>>>
>>> Are you sure about that? Where is the list of stories it will solve
>>> when people start using it, so I can check that my cases are covered
>>> by distutils2 insurance plan?
>>
>> [OT]
>> You can take a look at bento, which is my own response to the distutils
>> issues we have in the scipy community (but I would expect twisted and
>> most big python libraries to have similar issues):
>>
>> http://cournape.github.com/Bento/
>>
>> It is designed from the ground up with the idea of reliable
>> customization and complex build supports. It can already build numpy and
>> scipy with a near 50 % reduction in LOC compared to our setup.py, and
>> more reliably thanks to using a real build tool in the backend (waf, but
>> you can add support for a different one if you want).
>
> [OT]
> I still can't see how it solves even the basic user story - 'i want to
> uninstall twisted' or 'i want two versions of twisted installed'.

Bento's point is: make packagers life easier (without making life of 
users more miserable), so that you are more likely than before to be 
able to use the native tools. People who are happy installing from 
sources will not be disrupted, and people like me who hate source 
install and love linux packaging (or windows .msi for that matter) can 
actually build those without going insane trying to understand distutils.

> Absolute paths in examples won't work on Windows

Of course they do - like in distutils, I translate them inside bento so 
that everything works on any platform.

cheers,

David


From david at silveregg.co.jp  Fri Apr 22 05:03:59 2011
From: david at silveregg.co.jp (David)
Date: Fri, 22 Apr 2011 18:03:59 +0900
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <0ABFC28B-875C-4F13-8F2A-3288E8A9DF4C@twistedmatrix.com>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
	<4DB0D373.9020909@silveregg.co.jp>
	<0ABFC28B-875C-4F13-8F2A-3288E8A9DF4C@twistedmatrix.com>
Message-ID: <4DB1447F.4030109@silveregg.co.jp>

On 04/22/2011 03:03 PM, Glyph Lefkowitz wrote:
>
> On Apr 21, 2011, at 9:01 PM, David wrote:
>
>> You can take a look at bento, which is my own response to the distutils
>> issues we have in the scipy community (but I would expect twisted and
>> most big python libraries to have similar issues):
>>
>> http://cournape.github.com/Bento/
>>
>> It is designed from the ground up with the idea of reliable
>> customization and complex build supports. It can already build numpy and
>> scipy with a near 50 % reduction in LOC compared to our setup.py, and
>> more reliably thanks to using a real build tool in the backend (waf, but
>> you can add support for a different one if you want).
>
> This looks /very/ interesting. You kind of bury the lead on that web
> page though, so let me excerpt it for those who saw the first line,
> thought "oh, it's yet another python packaging thing" and stopped
> reading in disgust:
>
>     Even better, bento has a distutils compatibiliy layer
>     <http://cournape.github.com/Bento/html/transition.html> so that you
>     can write a simple setup.py *which works under pip or easy_install*.
>
>
> (emphasis mine)
>
> This suggests that Twisted could actually /switch/ to Bento without
> creating a massive disruption for our users who want to install it with
> an existing automation tool - which, frankly, is the main use-case for
> distutils at this point.
>
> Would you recommend that we do this? Would there be a benefit? I like
> the part where you said "near 50% reduction in LOC" quite a lot but I'm
> sure there are issues that would come along with it.

Actually, twisted is on my list of packages to convert to bento to get a 
feeling of what's missing in bento :) To get an actual idea of what it 
is looking ATM, you can see here: 
https://github.com/cournape/numpy/tree/bento_waf_build (bento.info and 
bscript - especially numpy/core/bscript).

The reason why the distutils compatibility thing is not emphasized is 
because I cannot possibly support what makes bento interesting in my 
mind under this mode: out of tree builds, hooks support, recursive 
description, pluggable build backend, etc... After all, if I could 
support what I have in mind with distutils, I would have started from 
distutils and not from scratch (I already did in a former life, and 
bento is born out of that failure).

Now, concerning the use of pip/easy_install: if those tools's author 
were willing to add hook to support additional tool, it would not take 
much. Fundamentally, you only need to say "bentomaker install" instead 
of "python setup.py install", plus all the dirty details. This will be 
needed anyway with the distutils2 effort, since they have also started 
using a static format description and python setup.py install will not 
work anymore (IIRC).

As for what you would gain doing so:
	- robust recursive support (things like relativeTo as used in twisted 
are inherently fragile once you don't want to assume source tree == 
current directory)
	- automatic dependency handling, easy customization and parallel 
support for compiled code (waf automatically scan sources to find header 
dependencies - waf has its quircks, but it has been recently used by 
SAMBA, which is a pretty good endorsement in my mind as far as complex 
builds go)
	- a simple and robust way to install data files (install things in 
chroots will finally be possible, a pet-peeve of mine when deploying 
twisted apps)
	- it would help me evangelizing bento :)

As you mentioned, most people say "sigh, another packaging python 
thing". I have not found a good angle to quickly describe what I am 
doing, because it is more about the how than the what. Maybe you could 
say that bento is trying the "pylons approach" of reusing existing 
tools, whereas distutils is more of the "django approach". For the scipy 
community (where I am coming from), the advantages of using a real build 
tool with dependency handling is obvious, but many people don't care 
about that.

Note that bento is currently a moving target, but I hope to be close to 
a first alpha in a couple of months (bento development has started in 
december 2009). I am careful with timing because I don't want to 
reproduce the precedent of setuptools which became popular but with 
issues that became too costly to fix afterwards.

cheers,

David


From exarkun at twistedmatrix.com  Fri Apr 22 07:53:58 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 22 Apr 2011 11:53:58 -0000
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <4DB0D18F.7080907@silveregg.co.jp>
References: <4DAE60E9.80903@silveregg.co.jp> <4DAF186B.5000000@imperial.ac.uk>
	<BANLkTik3ZR+KCyj=3sgG4ZcbSqFnfGFYPA@mail.gmail.com>
	<20110421011243.1992.1848266191.divmod.xquotient.886@localhost.localdomain>
	<4DB0D18F.7080907@silveregg.co.jp>
Message-ID: <20110422115358.1992.1061083053.divmod.xquotient.897@localhost.localdomain>

On 12:53 am, david at silveregg.co.jp wrote:
>On 04/21/2011 10:12 AM, exarkun at twistedmatrix.com wrote:
>>log.err takes an additional argument which you can use easily like 
>>this:
>>
>>      def main():
>>          d = remote_call()
>>          d.addErrback(log.err, "remote_call failed")
>>          def _stop(ignored):
>>              reactor.stop()
>>          d.addCallback(_stop)
>>
>>The message you pass here will replace the "Unhandled error in 
>>Deferred"
>>text in the report of the failure.
>
>ok, thanks for the tip.
>>
>>Another option is to enable Deferred debugging, which I think someone
>>mentioned earlier in the thread:
>>
>>      from twisted.internet.defer import setDebugging
>>      setDebugging(True)
>>
>>or
>>
>>      twistd --debug ...
>>
>>or
>>
>>      trial --debug ...
>>
>>This causes Deferred to capture the stack at the time it is created 
>>and
>>the time it is called back.  The "Unhandled error" case will log this
>>information.  This should give you the traceback you want.  This is 
>>not
>>enabled by default because (I suppose) capturing stacks is very
>>expensive.
>
>I am not so interested in "debug runs", but more in a way to get more
>informations of our tool stack bugs when run in production. I guess 
>what
>I am looking for is some good practices for dealing with errors, then.
>Maybe a piece of code in twisted itself ?

It's mostly just a matter of having errbacks in all the right places. 
Don't let a Deferred get garbage collected with a Failure.  Always have 
an error handler at the end, even if it's just an error handler to log 
the failure.

Jean-Paul


From techtonik at gmail.com  Fri Apr 22 11:02:55 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Fri, 22 Apr 2011 18:02:55 +0300
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4DB13375.3040609@silveregg.co.jp>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
	<4DB0D373.9020909@silveregg.co.jp>
	<BANLkTi=PrvjwY+eEtienxqxsCvT_enFWeg@mail.gmail.com>
	<4DB13375.3040609@silveregg.co.jp>
Message-ID: <BANLkTimoddg8dqTbVj3O-Q8Z=Em9aezOQQ@mail.gmail.com>

On Fri, Apr 22, 2011 at 10:51 AM, David <david at silveregg.co.jp> wrote:
>
>> [OT]
>> I still can't see how it solves even the basic user story - 'i want to
>> uninstall twisted' or 'i want two versions of twisted installed'.
>
> Bento's point is: make packagers life easier (without making life of
> users more miserable), so that you are more likely than before to be
> able to use the native tools.

You do an awesome thing, but it will be a total waste of time if
Fellowship of the Packaging fails to make life of Python users better.
I am sure their ranks will appreciate your experience in this area. ;)
--
anatoly t.


From exarkun at twistedmatrix.com  Sun Apr 24 00:05:22 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Apr 2011 04:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1303617922.56.306891918@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110424/0398ce68/attachment.htm 

From albert.brandl at weiermayer.com  Tue Apr 26 06:21:42 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Tue, 26 Apr 2011 12:21:42 +0200
Subject: [Twisted-Python] Question about StreamServerEndpointService
Message-ID: <20110426102142.GA12757@weiermayer.com>

Hi!

I have a question regarding `t.a.i.StreamServerEndpointService`. This 
class maintains an attribute `_waitingForPort` that holds the deferred 
returned by the `listen` method of the endpoint.

If this attribute is None, the method `privilegedStartService` is called 
by `startService`, triggering the endpoint's `listen` method (among 
other things).

I don't understand why this attribute is not reset to `None` when 
`stopService` is executed. With the deferred still around, starting the 
service again doesn't seem to work as expected, since it will not call 
`privilegedStartService` the second time.

I might be wrong, but this looks like a bug to me. Maybe I didn't
understand how to use this class, though...

Any comments?

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistra?e 12, A-4813 Altm?nster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com


From hackingkk at gmail.com  Tue Apr 26 10:04:51 2011
From: hackingkk at gmail.com (hackingKK)
Date: Tue, 26 Apr 2011 19:34:51 +0530
Subject: [Twisted-Python] some confusion with daemonising my twisted
	application.
In-Reply-To: <BANLkTi=C1XMCG_W05umNQPM2Wy09V=+GQQ@mail.gmail.com>
References: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
	<BANLkTi=C1XMCG_W05umNQPM2Wy09V=+GQQ@mail.gmail.com>
Message-ID: <4DB6D103.6080509@gmail.com>

Hello all.
I have been using the twisted library for quite some time and I must say 
it is the best library for xmlrpc.
I have a tcp server listening on a port and I use reactor.run() to start it.
Now I want to learn how to daemonise the entire code.

I am paisting the code below.


from twisted.web import xmlrpc, server
#reactor from the twisted library starts the server with a published 
object and listens on a given port.
from twisted.internet import reactor
from time import strftime
import rpc_organisation
import rpc_vendor
import rpc_customer
import rpc_product

#rest of the modules similarly imported, each containing a class 
inherited from xmlrpc.XMLRPC

#the main class
class gnukhata(xmlrpc.XMLRPC):

#note that all the functions to be accessed by the client must have the 
xmlrpc_ prefix.
     def __init__(self):
         xmlrpc.XMLRPC.__init__(self)

#the client however will not use the prefix to call the functions.
         #self.client_id = dbconnect.getConnection()

     def xmlrpc_getOrganisationNames(self):
         #this function is used to return the list of organsations found 
in gnukhata.xml located at /etc.Returns a list of organisations already 
present in the file
         #calling the function for getting list of organisation nodes.

         orgs = dbconnect.getOrgList()
#initialising an empty list for organisation names
         orgnames = []
         for org in orgs:
             orgname=org.find("orgname")
             #checking for unique names.
             #we will use the not in clause here.
             if orgname.text not in orgnames:
                 orgnames.append(orgname.text)

         return orgnames



#similarly a few other methods for this class.

#create an instance of the class to be published as the service.
print "initialising application"
gnukhata = gnukhata()
organisation = rpc_organisation.organisation()
gnukhata.putSubHandler('organisation',organisation)
people = rpc_people.people()
gnukhata.putSubHandler('people',people)
vendor = rpc_vendor.vendor()
gnukhata.putSubHandler('vendor',vendor)

#... and so on.

#Now the code for running the server.


#publish the object and make it to listen on the given port through reactor
print "starting server"
reactor.listenTCP(7081, server.Site(gnukhata))
#start the service by running the reactor.
reactor.run()

The code is from a python script called rpc_main.py which is in a 
package gnukahta where all other classes are also kept.
  to run it right now, I get into the gnukhata directory and do a sudo 
./rpc_main.py because some actions in this file need sudo permission.

Now could some one tell me how to convert this reactor running process 
into a daemon?
right now when I run this rpc_main.py file, the terminal does not return 
the prompt.
I used ./rpc_main.py & to get the terminal back.
But on a remote server this process is naturally killed when i logout 
from the remote shell.
Besides I have to make this as a package so making a daeminised version 
to run is a good option.
I have been reading a lot on this issue but did not find any good answer.
I am not so much into the details of how twisted works except for this much.
I guess my code would reflect how little I know about this amaising library.
So I just want to know if I have to write a seperate file to run this as 
a daemon?
As a side note, I used twistd -y rpc_main.py to see what happens.
I got complaints on the imports like the one given at the top of my code.
These modules are in the same gnukhata package as the rpc_main.py itself 
and run perfectly in other conditions.
So please help, this is really confusing me.
Thanking all,
Happy hacking.
Krishnakant.



From juanito1982 at gmail.com  Tue Apr 26 11:42:35 2011
From: juanito1982 at gmail.com (=?ISO-8859-1?Q?Juan_Antonio_Iba=F1ez_Santorum?=)
Date: Tue, 26 Apr 2011 17:42:35 +0200
Subject: [Twisted-Python] 100% CPU on high opened descriptors
Message-ID: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>

Hello!

   I have a Linux box serving my twisted app. All works ok except after some
days running (where I can see my CPU going to 100%). I saw that CPU goes
100% usage when the app reaches to 1024 opened descriptors (sockets). It
seems TM isn't closing some connections when clients loose connection to the
server. I have no more than 200 simultaneous clients, each of then using a
single connection. Any idea why those connections remain open?

Regards
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110426/b571a294/attachment.htm 

From glyph at twistedmatrix.com  Tue Apr 26 13:48:54 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Apr 2011 13:48:54 -0400
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
References: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
Message-ID: <7750702C-28EF-4E06-B49C-689945BF606E@twistedmatrix.com>

On Apr 26, 2011, at 11:42 AM, Juan Antonio Iba?ez Santorum wrote:

>    I have a Linux box serving my twisted app. All works ok except after some days running (where I can see my CPU going to 100%). I saw that CPU goes 100% usage when the app reaches to 1024 opened descriptors (sockets). It seems TM isn't closing some connections when clients loose connection to the server. I have no more than 200 simultaneous clients, each of then using a single connection. Any idea why those connections remain open?

This is a bug that somebody should really fix.  <http://tm.tl/816>

To work around it, however: if a connection is closed "uncleanly" (for example: you close your laptop, you rip the ethernet cable out of the wall, you foolishly give your computer to zooko for a minute), and no traffic is going in either direction, it will remain "open" as far as the server is concerned, forever.

If you send a little bit of traffic (an application-level ping) to each client every so often, the server's TCP stack will notice that nobody is acknowledging it and eventually time them out and close the connections.

Alternately, you could fix an even older bug, <http://tm.tl/78>, which would allow you to immediately terminate "dead" connections without waiting for them to time out.

Good luck,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110426/c55ba49c/attachment.htm 

From luke-lists at hybrid-logic.co.uk  Tue Apr 26 14:08:40 2011
From: luke-lists at hybrid-logic.co.uk (Luke Marsden)
Date: Tue, 26 Apr 2011 19:08:40 +0100
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
References: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
Message-ID: <1303841320.3370.116.camel@pow>

On Tue, 2011-04-26 at 17:42 +0200, Juan Antonio Iba?ez Santorum wrote:
> Hello!
>    I have a Linux box serving my twisted app. All works ok except
> after some days running (where I can see my CPU going to 100%). I saw
> that CPU goes 100% usage when the app reaches to 1024 opened
> descriptors (sockets).

You can also switch to using the "poll" reactor, which will allow you to
sustain more than 1024 connections.  You should still figure out what is
keeping your connections open and find a way to reap them however, as
this will just delay the problem.  As Glyph suggested an application
level "ping" may help here.

In the mean-time you can switch to the poll reactor by adding "-r poll"
to your twistd command.

-- 
Best Regards,
Luke Marsden
CTO, Hybrid Logic Ltd.

Web: http://www.hybrid-cluster.com/
Hybrid Web Cluster - cloud web hosting

Phone: +447791750420




From rgacote at appropriatesolutions.com  Tue Apr 26 16:34:09 2011
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Tue, 26 Apr 2011 16:34:09 -0400 (EDT)
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <1303841320.3370.116.camel@pow>
Message-ID: <14772627.148.1303850048947.JavaMail.rgacote@ip-237.corp.appropriatesolutions.com>

----- Original Message -----
> From: "Luke Marsden" <luke-lists at hybrid-logic.co.uk>
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Sent: Tuesday, April 26, 2011 2:08:40 PM
> Subject: Re: [Twisted-Python] 100% CPU on high opened descriptors
> On Tue, 2011-04-26 at 17:42 +0200, Juan Antonio Iba?ez Santorum wrote:
> > Hello!
> >    I have a Linux box serving my twisted app. All works ok except
> > after some days running (where I can see my CPU going to 100%). I
> > saw
> > that CPU goes 100% usage when the app reaches to 1024 opened
> > descriptors (sockets).

I assume that using a reverse proxy (Apache, nginx, etc.) in front of Twisted removes this problem? 
(or at least displaces it from being Twisted's problem to being the proxies problem.)

Is it recommended to always run Twisted behind a proxy? 
We've been doing that simply to offload delivery to the final client, but I'm thinking it may have a 
more general need.

--Ray


From glyph at twistedmatrix.com  Tue Apr 26 17:30:41 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Apr 2011 17:30:41 -0400
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <14772627.148.1303850048947.JavaMail.rgacote@ip-237.corp.appropriatesolutions.com>
References: <14772627.148.1303850048947.JavaMail.rgacote@ip-237.corp.appropriatesolutions.com>
Message-ID: <82B5C858-6C53-489E-B9A1-547B32125BD5@twistedmatrix.com>


On Apr 26, 2011, at 4:34 PM, Ray Cote wrote:

> ----- Original Message -----
>> From: "Luke Marsden" <luke-lists at hybrid-logic.co.uk>
>> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>> Sent: Tuesday, April 26, 2011 2:08:40 PM
>> Subject: Re: [Twisted-Python] 100% CPU on high opened descriptors
>> On Tue, 2011-04-26 at 17:42 +0200, Juan Antonio Iba?ez Santorum wrote:
>>> Hello!
>>>   I have a Linux box serving my twisted app. All works ok except
>>> after some days running (where I can see my CPU going to 100%). I
>>> saw
>>> that CPU goes 100% usage when the app reaches to 1024 opened
>>> descriptors (sockets).
> 
> I assume that using a reverse proxy (Apache, nginx, etc.) in front of Twisted removes this problem? 
> (or at least displaces it from being Twisted's problem to being the proxies problem.)
> 
> Is it recommended to always run Twisted behind a proxy?

No.  It's recommended to fix bugs in Twisted that affect you :).  And besides, this problem is not specific to HTTP; it affects any Twisted service that runs on a port, so there are lots of uses of Twisted where you can't run Twisted behind a proxy.

Plus, this affects clients as well; if you have a twisted spidering application, your client connections could get into this same state.  It's possible to handle this sort of attack without any changes to Twisted, by carefully monitoring the number of connections you have open.

Of course most people just crank up their ulimits and forget about it.

> We've been doing that simply to offload delivery to the final client, but I'm thinking it may have a more general need.

If you have to do it anyway then the discussion is somewhat academic, isn't it? :)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110426/d23de324/attachment.htm 

From andrew at bemusement.org  Tue Apr 26 19:39:45 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 27 Apr 2011 09:39:45 +1000
Subject: [Twisted-Python] some confusion with daemonising my twisted
 application.
In-Reply-To: <4DB6D103.6080509@gmail.com>
References: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
	<BANLkTi=C1XMCG_W05umNQPM2Wy09V=+GQQ@mail.gmail.com>
	<4DB6D103.6080509@gmail.com>
Message-ID: <20110426233945.GB3700@aihal.home.puzzling.org>

hackingKK wrote:
> Hello all.
> I have been using the twisted library for quite some time and I must say 
> it is the best library for xmlrpc.
> I have a tcp server listening on a port and I use reactor.run() to start it.
> Now I want to learn how to daemonise the entire code.
[?]
> So I just want to know if I have to write a seperate file to run this as 
> a daemon?
> As a side note, I used twistd -y rpc_main.py to see what happens.

Using twistd -y is a good way to daemonise your Twisted program, but the -y
option takes a ?TAC? file, not just any Python file.  They are briefly
described, including an example, here:
<http://twistedmatrix.com/documents/current/core/howto/application.html#auto5>

The really short version is rather than calling reactor methods like
reactor.connectTCP directly, you create a bunch of service objects that will do
those things when started, and attach those to an Application instance called
?application?.  That's a TAC file.

-Andrew.



From glyph at twistedmatrix.com  Wed Apr 27 01:19:28 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 27 Apr 2011 01:19:28 -0400
Subject: [Twisted-Python] Question about StreamServerEndpointService
In-Reply-To: <20110426102142.GA12757@weiermayer.com>
References: <20110426102142.GA12757@weiermayer.com>
Message-ID: <5E571F9A-1408-4D6E-9E69-BC9AEB7B418B@twistedmatrix.com>


On Apr 26, 2011, at 6:21 AM, Albert Brandl wrote:

> I might be wrong, but this looks like a bug to me. Maybe I didn't
> understand how to use this class, though...

I haven't investigated too thoroughly, but it sounds like you have, and this does indeed sound like a bug.  Could you write it up (<http://twistedmatrix.com/trac/newticket>), so it doesn't get lost?

Thanks,

-g


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110427/b5a5dc2a/attachment.htm 

From juanito1982 at gmail.com  Wed Apr 27 02:01:07 2011
From: juanito1982 at gmail.com (=?ISO-8859-1?Q?Juan_Antonio_Iba=F1ez_Santorum?=)
Date: Wed, 27 Apr 2011 08:01:07 +0200
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <1303841320.3370.116.camel@pow>
References: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
	<1303841320.3370.116.camel@pow>
Message-ID: <BANLkTik0D+3zNVsDynBYSvG-Ksk8S9spgg@mail.gmail.com>

Is that the unique way to get mor than 1024 simultaneous connections?

Regads

2011/4/26 Luke Marsden <luke-lists at hybrid-logic.co.uk>

> On Tue, 2011-04-26 at 17:42 +0200, Juan Antonio Iba?ez Santorum wrote:
> > Hello!
> >    I have a Linux box serving my twisted app. All works ok except
> > after some days running (where I can see my CPU going to 100%). I saw
> > that CPU goes 100% usage when the app reaches to 1024 opened
> > descriptors (sockets).
>
> You can also switch to using the "poll" reactor, which will allow you to
> sustain more than 1024 connections.  You should still figure out what is
> keeping your connections open and find a way to reap them however, as
> this will just delay the problem.  As Glyph suggested an application
> level "ping" may help here.
>
> In the mean-time you can switch to the poll reactor by adding "-r poll"
> to your twistd command.
>
> --
> Best Regards,
> Luke Marsden
> CTO, Hybrid Logic Ltd.
>
> Web: http://www.hybrid-cluster.com/
> Hybrid Web Cluster - cloud web hosting
>
> Phone: +447791750420
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110427/e9af8bcf/attachment-0001.htm 

From luke-lists at hybrid-logic.co.uk  Wed Apr 27 02:28:01 2011
From: luke-lists at hybrid-logic.co.uk (Luke Marsden)
Date: Wed, 27 Apr 2011 07:28:01 +0100
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <BANLkTik0D+3zNVsDynBYSvG-Ksk8S9spgg@mail.gmail.com>
References: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
	<1303841320.3370.116.camel@pow>
	<BANLkTik0D+3zNVsDynBYSvG-Ksk8S9spgg@mail.gmail.com>
Message-ID: <1303885681.3370.120.camel@pow>

>> 2011/4/26 Luke Marsden <luke-lists at hybrid-logic.co.uk>
>> You can also switch to using the "poll" reactor

On Wed, 2011-04-27 at 08:01 +0200, Juan Antonio Iba?ez Santorum wrote:
> Is that the unique way to get mor than 1024 simultaneous connections?
> 
> 
> Regads
> 

On Linux and BSD, yes. See
http://twistedmatrix.com/documents/current/core/howto/choosing-reactor.html for all the options for different platforms.

-- 
Best Regards,
Luke Marsden
CTO, Hybrid Logic Ltd.

Web: http://www.hybrid-cluster.com/
Hybrid Web Cluster - cloud web hosting

Phone: +447791750420




From juanito1982 at gmail.com  Wed Apr 27 02:48:59 2011
From: juanito1982 at gmail.com (=?ISO-8859-1?Q?Juan_Antonio_Iba=F1ez_Santorum?=)
Date: Wed, 27 Apr 2011 08:48:59 +0200
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <1303885681.3370.120.camel@pow>
References: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
	<1303841320.3370.116.camel@pow>
	<BANLkTik0D+3zNVsDynBYSvG-Ksk8S9spgg@mail.gmail.com>
	<1303885681.3370.120.camel@pow>
Message-ID: <BANLkTinRRPffSqGSEjg3rYgFcW35DVQ-7A@mail.gmail.com>

Must I make any change appart from start the app with twistd plus '-r poll'?

2011/4/27 Luke Marsden <luke-lists at hybrid-logic.co.uk>

> >> 2011/4/26 Luke Marsden <luke-lists at hybrid-logic.co.uk>
> >> You can also switch to using the "poll" reactor
>
> On Wed, 2011-04-27 at 08:01 +0200, Juan Antonio Iba?ez Santorum wrote:
> > Is that the unique way to get mor than 1024 simultaneous connections?
> >
> >
> > Regads
> >
>
> On Linux and BSD, yes. See
> http://twistedmatrix.com/documents/current/core/howto/choosing-reactor.htmlfor all the options for different platforms.
>
> --
> Best Regards,
> Luke Marsden
> CTO, Hybrid Logic Ltd.
>
> Web: http://www.hybrid-cluster.com/
> Hybrid Web Cluster - cloud web hosting
>
> Phone: +447791750420
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110427/8cefe166/attachment.htm 

From twisted at patrickmylund.com  Wed Apr 27 02:58:13 2011
From: twisted at patrickmylund.com (Patrick Mylund Nielsen)
Date: Wed, 27 Apr 2011 08:58:13 +0200
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <BANLkTinRRPffSqGSEjg3rYgFcW35DVQ-7A@mail.gmail.com>
References: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
	<1303841320.3370.116.camel@pow>
	<BANLkTik0D+3zNVsDynBYSvG-Ksk8S9spgg@mail.gmail.com>
	<1303885681.3370.120.camel@pow>
	<BANLkTinRRPffSqGSEjg3rYgFcW35DVQ-7A@mail.gmail.com>
Message-ID: <BANLkTi=jFgrZeK4_o+2fezan7CTVoHEnHw@mail.gmail.com>

That is sufficient, yes.

You might even want to make that 'epoll' since it scales better than
poll (assuming you're running on Linux 2.6+ only)

Best,
Patrick

2011/4/27 Juan Antonio Iba?ez Santorum <juanito1982 at gmail.com>:
> Must I make any change appart from start the app with twistd plus '-r poll'?
>
> 2011/4/27 Luke Marsden <luke-lists at hybrid-logic.co.uk>
>>
>> >> 2011/4/26 Luke Marsden <luke-lists at hybrid-logic.co.uk>
>> >> You can also switch to using the "poll" reactor
>>
>> On Wed, 2011-04-27 at 08:01 +0200, Juan Antonio Iba?ez Santorum wrote:
>> > Is that the unique way to get mor than 1024 simultaneous connections?
>> >
>> >
>> > Regads
>> >
>>
>> On Linux and BSD, yes. See
>>
>> http://twistedmatrix.com/documents/current/core/howto/choosing-reactor.html
>> for all the options for different platforms.
>>
>> --
>> Best Regards,
>> Luke Marsden
>> CTO, Hybrid Logic Ltd.
>>
>> Web: http://www.hybrid-cluster.com/
>> Hybrid Web Cluster - cloud web hosting
>>
>> Phone: +447791750420
>>
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


From juanito1982 at gmail.com  Wed Apr 27 03:04:05 2011
From: juanito1982 at gmail.com (=?ISO-8859-1?Q?Juan_Antonio_Iba=F1ez_Santorum?=)
Date: Wed, 27 Apr 2011 09:04:05 +0200
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <BANLkTi=jFgrZeK4_o+2fezan7CTVoHEnHw@mail.gmail.com>
References: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
	<1303841320.3370.116.camel@pow>
	<BANLkTik0D+3zNVsDynBYSvG-Ksk8S9spgg@mail.gmail.com>
	<1303885681.3370.120.camel@pow>
	<BANLkTinRRPffSqGSEjg3rYgFcW35DVQ-7A@mail.gmail.com>
	<BANLkTi=jFgrZeK4_o+2fezan7CTVoHEnHw@mail.gmail.com>
Message-ID: <BANLkTim+MvudXKG3j6cxbFmw58yx0tW=-g@mail.gmail.com>

Thank you very much for your tip Patrick!

2011/4/27 Patrick Mylund Nielsen <twisted at patrickmylund.com>

> That is sufficient, yes.
>
> You might even want to make that 'epoll' since it scales better than
> poll (assuming you're running on Linux 2.6+ only)
>
> Best,
> Patrick
>
> 2011/4/27 Juan Antonio Iba?ez Santorum <juanito1982 at gmail.com>:
> > Must I make any change appart from start the app with twistd plus '-r
> poll'?
> >
> > 2011/4/27 Luke Marsden <luke-lists at hybrid-logic.co.uk>
> >>
> >> >> 2011/4/26 Luke Marsden <luke-lists at hybrid-logic.co.uk>
> >> >> You can also switch to using the "poll" reactor
> >>
> >> On Wed, 2011-04-27 at 08:01 +0200, Juan Antonio Iba?ez Santorum wrote:
> >> > Is that the unique way to get mor than 1024 simultaneous connections?
> >> >
> >> >
> >> > Regads
> >> >
> >>
> >> On Linux and BSD, yes. See
> >>
> >>
> http://twistedmatrix.com/documents/current/core/howto/choosing-reactor.html
> >> for all the options for different platforms.
> >>
> >> --
> >> Best Regards,
> >> Luke Marsden
> >> CTO, Hybrid Logic Ltd.
> >>
> >> Web: http://www.hybrid-cluster.com/
> >> Hybrid Web Cluster - cloud web hosting
> >>
> >> Phone: +447791750420
> >>
> >>
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110427/a8c8a062/attachment.htm 

From dynamicgl at gmail.com  Wed Apr 27 03:28:12 2011
From: dynamicgl at gmail.com (Dfgqq Dfgqq)
Date: Wed, 27 Apr 2011 15:28:12 +0800
Subject: [Twisted-Python] Did anyone use twisted on windows (IOCP)?
Message-ID: <BANLkTi=YSPioN=WUJ4XnhUpowXzXAjav7w@mail.gmail.com>

Hi All

      Currently, i am planning rewrite some parts with twisted & iocp. These
parts are related
to Tcp connection without SSL.  I want to know whether IOCP is ready for
production or not.

   I ran some tests with twisted 10.20, 8.10 before. The IOCP part had many
problems. I haven't give a try with 11.0. What is the progress for windows
support?


Thanks

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110427/0401692c/attachment.htm 

From albert.brandl at weiermayer.com  Wed Apr 27 04:26:28 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Wed, 27 Apr 2011 10:26:28 +0200
Subject: [Twisted-Python] Question about StreamServerEndpointService
In-Reply-To: <5E571F9A-1408-4D6E-9E69-BC9AEB7B418B@twistedmatrix.com>
References: <20110426102142.GA12757@weiermayer.com>
	<5E571F9A-1408-4D6E-9E69-BC9AEB7B418B@twistedmatrix.com>
Message-ID: <20110427082627.GA5676@weiermayer.com>

Hi!

On Wed, Apr 27, 2011 at 01:19:28AM -0400, Glyph Lefkowitz wrote:
> 
> I haven't investigated too thoroughly, but it sounds like you have, and 
> this does indeed sound like a bug.  Could you write it up 
> (<http://twistedmatrix.com /trac/newticket>), so it doesn't get lost?

Sure - http://twistedmatrix.com/trac/ticket/5071.

Best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistra?e 12, A-4813 Altm?nster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com


From glyph at twistedmatrix.com  Wed Apr 27 04:48:39 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 27 Apr 2011 04:48:39 -0400
Subject: [Twisted-Python] Did anyone use twisted on windows (IOCP)?
In-Reply-To: <BANLkTi=YSPioN=WUJ4XnhUpowXzXAjav7w@mail.gmail.com>
References: <BANLkTi=YSPioN=WUJ4XnhUpowXzXAjav7w@mail.gmail.com>
Message-ID: <944E490A-E548-4C98-B725-816C80AAFF81@twistedmatrix.com>


On Apr 27, 2011, at 3:28 AM, Dfgqq Dfgqq wrote:

> Hi All
> 
>       Currently, i am planning rewrite some parts with twisted & iocp. These parts are related
> to Tcp connection without SSL.  I want to know whether IOCP is ready for production or not.

Yes.  Many people use it in production.

>    I ran some tests with twisted 10.20, 8.10 before. The IOCP part had many problems. I haven't give a try with 11.0. What is the progress for windows support?

Can you provide links to the bug reports you filed when you encountered problems with the IOCP reactor in 8.1.0 and 10.2.0?  Then I can tell you if they were closed in 11.0 or not.

Thanks,

-glyph

From glyph at twistedmatrix.com  Wed Apr 27 04:50:17 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 27 Apr 2011 04:50:17 -0400
Subject: [Twisted-Python] Question about StreamServerEndpointService
In-Reply-To: <20110427082627.GA5676@weiermayer.com>
References: <20110426102142.GA12757@weiermayer.com>
	<5E571F9A-1408-4D6E-9E69-BC9AEB7B418B@twistedmatrix.com>
	<20110427082627.GA5676@weiermayer.com>
Message-ID: <940E3BEC-ABA0-4340-82A7-A809B629993F@twistedmatrix.com>


On Apr 27, 2011, at 4:26 AM, Albert Brandl wrote:

> Hi!
> 
> On Wed, Apr 27, 2011 at 01:19:28AM -0400, Glyph Lefkowitz wrote:
>> 
>> I haven't investigated too thoroughly, but it sounds like you have, and 
>> this does indeed sound like a bug.  Could you write it up 
>> (<http://twistedmatrix.com /trac/newticket>), so it doesn't get lost?
> 
> Sure - http://twistedmatrix.com/trac/ticket/5071.

Thanks a lot.  If you'd like to contribute a patch, of course, that would be doubly appreciated :).  Otherwise, someone will get to it eventually.  (This might even deserve the 'easy' keyword, as I think the bug is pretty straightforward... unfortunately the functionality requires understanding of a whole bunch of Twisted-specific concepts...)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110427/5d0bdac5/attachment-0001.htm 

From stephen at thorne.id.au  Wed Apr 27 05:23:54 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Wed, 27 Apr 2011 19:23:54 +1000
Subject: [Twisted-Python] Did anyone use twisted on windows (IOCP)?
In-Reply-To: <944E490A-E548-4C98-B725-816C80AAFF81@twistedmatrix.com>
References: <BANLkTi=YSPioN=WUJ4XnhUpowXzXAjav7w@mail.gmail.com>
	<944E490A-E548-4C98-B725-816C80AAFF81@twistedmatrix.com>
Message-ID: <20110427092353.GA7952@thorne.id.au>

On 2011-04-27, Glyph Lefkowitz wrote:
> On Apr 27, 2011, at 3:28 AM, Dfgqq Dfgqq wrote:
> >       Currently, i am planning rewrite some parts with twisted &
> >       iocp. These parts are related to Tcp connection without SSL.
> >       I want to know whether IOCP is ready for production or not.
> 
> Yes.  Many people use it in production.

I use IOCP on Windows XP and Windows 7 in "production", including with
SSL, and we have not seen any problems.

-- 
Regards,
Stephen Thorne


From rgacote at appropriatesolutions.com  Wed Apr 27 09:52:47 2011
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Wed, 27 Apr 2011 09:52:47 -0400 (EDT)
Subject: [Twisted-Python] Did anyone use twisted on windows (IOCP)?
In-Reply-To: <BANLkTi=YSPioN=WUJ4XnhUpowXzXAjav7w@mail.gmail.com>
Message-ID: <23640143.179.1303912364946.JavaMail.rgacote@ip-237.corp.appropriatesolutions.com>

From: "Dfgqq Dfgqq" <dynamicgl at gmail.com> 


To: Twisted-Python at twistedmatrix.com 
Sent: Wednesday, April 27, 2011 3:28:12 AM 
Subject: [Twisted-Python] Did anyone use twisted on windows (IOCP)? 

Hi All 


Currently, i am planning rewrite some parts with twisted & iocp. These parts are related 
to Tcp connection without SSL. I want to know whether IOCP is ready for production or not. 


I ran some tests with twisted 10.20, 8.10 before. The IOCP part had many problems. I haven't give a try with 11.0. What is the progress for windows support? 




Thanks 


gelin yan 
We're using IOCP with SSL on Windows with Twisted 10.2 and have not encountered any problems. 
Still shaking it down in test. 
--Ray 


-- 


Ray Cote, President Appropriate Solutions, Inc. 
We Build Software 
www.AppropriateSolutions.com 603.924.6079 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110427/d65f53c7/attachment.htm 

From rgacote at appropriatesolutions.com  Wed Apr 27 09:54:07 2011
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Wed, 27 Apr 2011 09:54:07 -0400 (EDT)
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <82B5C858-6C53-489E-B9A1-547B32125BD5@twistedmatrix.com>
Message-ID: <33297092.182.1303912442795.JavaMail.rgacote@ip-237.corp.appropriatesolutions.com>





No. It's recommended to fix bugs in Twisted that affect you :). Well, that too. :} 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110427/be1fba25/attachment.htm 

From dynamicgl at gmail.com  Wed Apr 27 11:11:36 2011
From: dynamicgl at gmail.com (Dfgqq Dfgqq)
Date: Wed, 27 Apr 2011 23:11:36 +0800
Subject: [Twisted-Python] Did anyone use twisted on windows (IOCP)?
In-Reply-To: <944E490A-E548-4C98-B725-816C80AAFF81@twistedmatrix.com>
References: <BANLkTi=YSPioN=WUJ4XnhUpowXzXAjav7w@mail.gmail.com>
	<944E490A-E548-4C98-B725-816C80AAFF81@twistedmatrix.com>
Message-ID: <BANLkTin=Ncs72rqojk_sZDejFROB5uj=Hw@mail.gmail.com>

Hi glyph

   Thanks for your replying.. I didn't say it was a bug because it probably
caused by some incorrect usages.


my problem was:

we have thousands of machines connect on the server via tcp (the number of
machines might be varied from 3000 to 7000). all connections are long
connection which means server must hold the connections except the network
is broken. each machine send some data per second. when i trying to use
twisted as the server part, i noticed some connections lost after one hour.
I have tried 8.x and 10.20, connections lost still existed; however, this
problem didn't exist anymore with Twisted 11.0. This is the reason i was
curious: what Twisted 11.0 did to solve my problem?

      I noticed the news for 11.0 has one line about IOCP:

*IOCPReactor now sends immediate completions to the main loop (#3233)**
*

I guess it might be the reason. Now the latest version of twisted is working
fine. I really like it.

Regards

GELIN YAN

On Wed, Apr 27, 2011 at 4:48 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Apr 27, 2011, at 3:28 AM, Dfgqq Dfgqq wrote:
>
> > Hi All
> >
> >       Currently, i am planning rewrite some parts with twisted & iocp.
> These parts are related
> > to Tcp connection without SSL.  I want to know whether IOCP is ready for
> production or not.
>
> Yes.  Many people use it in production.
>
> >    I ran some tests with twisted 10.20, 8.10 before. The IOCP part had
> many problems. I haven't give a try with 11.0. What is the progress for
> windows support?
>
> Can you provide links to the bug reports you filed when you encountered
> problems with the IOCP reactor in 8.1.0 and 10.2.0?  Then I can tell you if
> they were closed in 11.0 or not.
>
> Thanks,
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110427/329f056b/attachment.htm 

From hs at ox.cx  Wed Apr 27 14:48:13 2011
From: hs at ox.cx (Hynek Schlawack)
Date: Wed, 27 Apr 2011 20:48:13 +0200
Subject: [Twisted-Python] Anyone ever used successfully sqlanydb together
	with Twisted and adbapi?
Message-ID: <BANLkTi=x5+R7c5pmJr989EM-DBWY+6mqxw@mail.gmail.com>

Hi,

I've essentially written a whois daemon that serves via TCP as well as
via web, fetching its data from a sqlanywhere 12 server, using the
official sqlanydb driver.

Everything works fine except for occasional SIGABRTs (or inside of
gdb: SIGSEGVs inside of the sqlanywhere binary driver) in the first
query. If that one works, it keeps running.
 However it's impossible to run tests as at some point it always
crashes while doing queries because I recreate the pool for every
test.

Essentially I get a domain record from the database and fetch some
related data afterward. I tried to implement it using DeferredList and
using runInteraction and it always aborts before doing the second
query. I've already posted some code and gdb backtraces to
stackoverflow: http://stackoverflow.com/questions/5790435/python-twisted-sqlanydb-abort
maybe there's some helpful data I missed here. To stress it: The
lookup of the domain record usually works. It's the following defers
that crash my application.

My essential question is: Has someone already used Twisted and
SQLAnywhere together successfully? Is it me or is it sqlanywhere or
even Twisted? What are my options?

TIA,
-h


From smirnov.andrey at gmail.com  Thu Apr 28 01:31:23 2011
From: smirnov.andrey at gmail.com (Andrey Smirnov)
Date: Thu, 28 Apr 2011 09:31:23 +0400
Subject: [Twisted-Python] [ANN] txZMQ released
Message-ID: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>

Hi!

I would like to announce txZMQ, ZeroMQ bindings for Twisted. txZMQ is based
on pyzmq and requires recent ?MQ version (>=2.1).

txZMQ uses ?MQ APIs to get file descriptor that is used to signal pending
actions from ?MQ library IO thread running in separate thread. txZMQ should
be usable with any Twisted reactor.

?MQ is:
?*??The socket library that acts as a concurrency framework.
?*??Carries messages across inproc, IPC, TCP, and multicast.
?*??Connect N-to-N via fanout, pubsub, pipeline, request-reply.
?*??Fast enough for clustered products and supercomputing.
?*??Asynch I/O for scalable multicore message-passing apps.

Bridging ?MQ and Twisted makes a nice match: fast simple messaging between
Twisted instances solving complex problems :)

Links:
   * PyPi: http://pypi.python.org/pypi/txZMQ/
   * Source code: https://github.com/smira/pyzmq
   * pyzmq: http://pypi.python.org/pypi/pyzmq
   * ?MQ: http://www.zeromq.org/

-- 
Andrey Smirnov,
Qik Web Team Lead
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110428/52cfd0bd/attachment.htm 

From _ at lvh.cc  Thu Apr 28 06:24:09 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Thu, 28 Apr 2011 12:24:09 +0200
Subject: [Twisted-Python] [ANN] txZMQ released
In-Reply-To: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>
References: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>
Message-ID: <BANLkTi=n=m=15sxLDru5ywM_gPhjfLEDug@mail.gmail.com>

This is quite exciting! Thanks a lot for writing this, Andrey.

I noticed that you put it in the same package name (pyzmq, not tx0MQ or
anything). Is the goal to get this merged back upstream? (That would be
extra great :-))

thanks again for your awesome efforts (I will take this for a spin soon),
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110428/0956823f/attachment.htm 

From smirnov.andrey at gmail.com  Thu Apr 28 08:25:10 2011
From: smirnov.andrey at gmail.com (Andrey Smirnov)
Date: Thu, 28 Apr 2011 16:25:10 +0400
Subject: [Twisted-Python] [ANN] txZMQ released
In-Reply-To: <BANLkTi=n=m=15sxLDru5ywM_gPhjfLEDug@mail.gmail.com>
References: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>
	<BANLkTi=n=m=15sxLDru5ywM_gPhjfLEDug@mail.gmail.com>
Message-ID: <BANLkTinpiAw1eQoLCTd5KD6_=K0Us_4BDQ@mail.gmail.com>

Laurens,

Oops, I've posted wrong link to github: https://github.com/smira/txZMQ

(I've posted link to first draft which has been actually fork of pyzmq, but
turned out it would be easier to keep it as a separate package)

2011/4/28 Laurens Van Houtven <_ at lvh.cc>

> This is quite exciting! Thanks a lot for writing this, Andrey.
>
> I noticed that you put it in the same package name (pyzmq, not tx0MQ or
> anything). Is the goal to get this merged back upstream? (That would be
> extra great :-))
>
> thanks again for your awesome efforts (I will take this for a spin soon),
> lvh
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Andrey Smirnov,
Qik Web Team Lead
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110428/1644e7c4/attachment.htm 

From _ at lvh.cc  Thu Apr 28 08:40:12 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Thu, 28 Apr 2011 14:40:12 +0200
Subject: [Twisted-Python] [ANN] txZMQ released
In-Reply-To: <BANLkTinpiAw1eQoLCTd5KD6_=K0Us_4BDQ@mail.gmail.com>
References: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>
	<BANLkTi=n=m=15sxLDru5ywM_gPhjfLEDug@mail.gmail.com>
	<BANLkTinpiAw1eQoLCTd5KD6_=K0Us_4BDQ@mail.gmail.com>
Message-ID: <BANLkTi=nh89QAP9gEHhhBYwpc6gYdNZAsA@mail.gmail.com>

Yeah, I saw that one and got confused. Just to be clear, I'm supposed to
ignore your pyzmq fork, right?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110428/14474231/attachment.htm 

From smirnov.andrey at gmail.com  Thu Apr 28 08:53:47 2011
From: smirnov.andrey at gmail.com (Andrey Smirnov)
Date: Thu, 28 Apr 2011 16:53:47 +0400
Subject: [Twisted-Python] [ANN] txZMQ released
In-Reply-To: <BANLkTi=nh89QAP9gEHhhBYwpc6gYdNZAsA@mail.gmail.com>
References: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>
	<BANLkTi=n=m=15sxLDru5ywM_gPhjfLEDug@mail.gmail.com>
	<BANLkTinpiAw1eQoLCTd5KD6_=K0Us_4BDQ@mail.gmail.com>
	<BANLkTi=nh89QAP9gEHhhBYwpc6gYdNZAsA@mail.gmail.com>
Message-ID: <BANLkTikOYFHB3OdswoZpTU6C-aNo-G0MkQ@mail.gmail.com>

Yes, I'll drop it as soon as I won't need it anymore (probably in one week).

2011/4/28 Laurens Van Houtven <_ at lvh.cc>

> Yeah, I saw that one and got confused. Just to be clear, I'm supposed to
> ignore your pyzmq fork, right?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Andrey Smirnov,
Qik Web Team Lead
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110428/f050da92/attachment.htm 

From albert.brandl at weiermayer.com  Thu Apr 28 10:22:24 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Thu, 28 Apr 2011 16:22:24 +0200
Subject: [Twisted-Python] Question about StreamServerEndpointService
In-Reply-To: <940E3BEC-ABA0-4340-82A7-A809B629993F@twistedmatrix.com>
References: <20110426102142.GA12757@weiermayer.com>
	<5E571F9A-1408-4D6E-9E69-BC9AEB7B418B@twistedmatrix.com>
	<20110427082627.GA5676@weiermayer.com>
	<940E3BEC-ABA0-4340-82A7-A809B629993F@twistedmatrix.com>
Message-ID: <20110428142224.GA15929@weiermayer.com>

On Wed, Apr 27, 2011 at 04:50:17AM -0400, Glyph Lefkowitz wrote:
> Thanks a lot.  If you'd like to contribute a patch, of course, that would be
> doubly appreciated :).

I already thought about doing so. But my experience shows that patches
usually take some rounds to be accepted, and I'd prefer to do this when
I have more time (which will hopefully be the case in some weeks).

Regards,
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistra?e 12, A-4813 Altm?nster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com


From burslem2001 at yahoo.com  Thu Apr 28 16:18:53 2011
From: burslem2001 at yahoo.com (gary clark)
Date: Thu, 28 Apr 2011 13:18:53 -0700 (PDT)
Subject: [Twisted-Python] problems with transport.write
In-Reply-To: <BANLkTikOYFHB3OdswoZpTU6C-aNo-G0MkQ@mail.gmail.com>
Message-ID: <564959.17182.qm@web112512.mail.gq1.yahoo.com>

Hiya,
?
I have created a client-server application which uses ssl to communicate.
?
I am trying to determine if its the server or client. However its definetly sending a string in the connection.transport.write to the target client.
?
The majority of the time is sends and receives, but occasionally it fails.
Is there a way (other than the client sending an ACK with a sequence number in it) to know if the write was successful and if not resend.
?
Much appreciated,
Gary C
?
?
?


--- On Thu, 4/28/11, Andrey Smirnov <smirnov.andrey at gmail.com> wrote:


From: Andrey Smirnov <smirnov.andrey at gmail.com>
Subject: Re: [Twisted-Python] [ANN] txZMQ released
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Date: Thursday, April 28, 2011, 7:53 AM


Yes, I'll drop it as soon as I won't need it anymore (probably in one week).


2011/4/28 Laurens Van Houtven <_ at lvh.cc>

Yeah, I saw that one and got confused. Just to be clear, I'm supposed to ignore your pyzmq fork, right?

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




-- 
Andrey Smirnov,
Qik Web Team Lead

-----Inline Attachment Follows-----


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110428/181ad2b1/attachment.htm 

From glyph at twistedmatrix.com  Thu Apr 28 19:43:23 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 28 Apr 2011 19:43:23 -0400
Subject: [Twisted-Python] problems with transport.write
In-Reply-To: <564959.17182.qm@web112512.mail.gq1.yahoo.com>
References: <564959.17182.qm@web112512.mail.gq1.yahoo.com>
Message-ID: <B0CE469C-6609-4B23-A0E4-F9FA235FC3F6@twistedmatrix.com>


On Apr 28, 2011, at 4:18 PM, gary clark wrote:

> Hiya,
>  
> I have created a client-server application which uses ssl to communicate.
>  
> I am trying to determine if its the server or client. However its definetly sending a string in the connection.transport.write to the target client.

Trying to determine what is the server or the client?

> The majority of the time is sends and receives, but occasionally it fails.

Fails how?

> Is there a way (other than the client sending an ACK with a sequence number in it) to know if the write was successful and if not resend.

If you're using SSL, then you're using TCP, which transparently _does_ send an ACK with a sequence number in it.  You never have to re-send TCP segments at the application layer, that would result in a stream with duplicate data in it.

Please be more specific about the problem you're having, so we can find an answer :).

-g



From burslem2001 at yahoo.com  Thu Apr 28 20:39:44 2011
From: burslem2001 at yahoo.com (gary clark)
Date: Thu, 28 Apr 2011 17:39:44 -0700 (PDT)
Subject: [Twisted-Python] problems with transport.write
In-Reply-To: <B0CE469C-6609-4B23-A0E4-F9FA235FC3F6@twistedmatrix.com>
Message-ID: <812695.4650.qm@web112519.mail.gq1.yahoo.com>

Much appreciated on the quick response.

It fails by writing a large string at the server side and not receiving any data at the client. The client uses open-ssl and is blocking to receive data. I dont know if its possible to determine if the write was successful or not on the server side i.e knowing how many bytes were written etc. I dont see any exceptions. The connection is still maintained and like I said its intermittent. So when a transport.write occurs is there an api I can use to see if it was successful?

I'm trying to isolate if its a server problem or a client issue at the moment.

Thanks,

Gary C

--- On Thu, 4/28/11, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> From: Glyph Lefkowitz <glyph at twistedmatrix.com>
> Subject: Re: [Twisted-Python] problems with transport.write
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Thursday, April 28, 2011, 6:43 PM
> 
> On Apr 28, 2011, at 4:18 PM, gary clark wrote:
> 
> > Hiya,
> >? 
> > I have created a client-server application which uses
> ssl to communicate.
> >? 
> > I am trying to determine if its the server or client.
> However its definetly sending a string in the
> connection.transport.write to the target client.
> 
> Trying to determine what is the server or the client?
> 
> > The majority of the time is sends and receives, but
> occasionally it fails.
> 
> Fails how?
> 
> > Is there a way (other than the client sending an ACK
> with a sequence number in it) to know if the write was
> successful and if not resend.
> 
> If you're using SSL, then you're using TCP, which
> transparently _does_ send an ACK with a sequence number in
> it.? You never have to re-send TCP segments at the
> application layer, that would result in a stream with
> duplicate data in it.
> 
> Please be more specific about the problem you're having, so
> we can find an answer :).
> 
> -g
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


From andrew at bemusement.org  Thu Apr 28 21:57:46 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Fri, 29 Apr 2011 11:57:46 +1000
Subject: [Twisted-Python] problems with transport.write
In-Reply-To: <812695.4650.qm@web112519.mail.gq1.yahoo.com>
References: <B0CE469C-6609-4B23-A0E4-F9FA235FC3F6@twistedmatrix.com>
	<812695.4650.qm@web112519.mail.gq1.yahoo.com>
Message-ID: <20110429015745.GG3700@aihal.home.puzzling.org>

gary clark wrote:
> Much appreciated on the quick response.
> 
> It fails by writing a large string at the server side and not receiving any
> data at the client. The client uses open-ssl and is blocking to receive data.
> I dont know if its possible to determine if the write was successful or not on
> the server side i.e knowing how many bytes were written etc. I dont see any
> exceptions. The connection is still maintained and like I said its
> intermittent. So when a transport.write occurs is there an api I can use to
> see if it was successful?
> 
> I'm trying to isolate if its a server problem or a client issue at the moment.

Most platforms' socket APIs don't provide a convenient (or necessarily any) way
to see how much data has been ACKed by the peer (which I assume is what you mean
by ?if the write was successful?).  So Twisted doesn't have any API for
reporting that to you either.

The usual way to observe how much data was sent is to run tcpdump (or wireshark
or simliar).  Similarly to observe how much data is received run tcpdump on the
receiver.  If there's a discrepancy then something between those two points is
losing your data.

Intermittent failures involving large writes may be a PMTU issue on your
network.  Try reducing the MTU value on your router(s) perhaps.

-Andrew.



From dynamicgl at gmail.com  Fri Apr 29 06:24:50 2011
From: dynamicgl at gmail.com (Dfgqq Dfgqq)
Date: Fri, 29 Apr 2011 18:24:50 +0800
Subject: [Twisted-Python] Fwd:  Did anyone use twisted on windows (IOCP)?
In-Reply-To: <BANLkTin=Ncs72rqojk_sZDejFROB5uj=Hw@mail.gmail.com>
References: <BANLkTi=YSPioN=WUJ4XnhUpowXzXAjav7w@mail.gmail.com>
	<944E490A-E548-4C98-B725-816C80AAFF81@twistedmatrix.com>
	<BANLkTin=Ncs72rqojk_sZDejFROB5uj=Hw@mail.gmail.com>
Message-ID: <BANLkTi=x4OijMyLZi1vRHeGAhyza_rm=Sg@mail.gmail.com>

---------- Forwarded message ----------
From: Dfgqq Dfgqq <dynamicgl at gmail.com>
Date: Wed, Apr 27, 2011 at 11:11 PM
Subject: Re: [Twisted-Python] Did anyone use twisted on windows (IOCP)?
To: Twisted general discussion <twisted-python at twistedmatrix.com>


Hi glyph

   Thanks for your replying.. I didn't say it was a bug because it probably
caused by some incorrect usages.


my problem was:

we have thousands of machines connect on the server via tcp (the number of
machines might be varied from 3000 to 7000). all connections are long
connection which means server must hold the connections except the network
is broken. each machine send some data per second. when i trying to use
twisted as the server part, i noticed some connections lost after one hour.
I have tried 8.x and 10.20, connections lost still existed; however, this
problem didn't exist anymore with Twisted 11.0. This is the reason i was
curious: what Twisted 11.0 did to solve my problem?

      I noticed the news for 11.0 has one line about IOCP:

 *IOCPReactor now sends immediate completions to the main loop (#3233)* *
*

I guess it might be the reason. Now the latest version of twisted is working
fine. I really like it.

Regards

GELIN YAN

On Wed, Apr 27, 2011 at 4:48 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Apr 27, 2011, at 3:28 AM, Dfgqq Dfgqq wrote:
>
> > Hi All
> >
> >       Currently, i am planning rewrite some parts with twisted & iocp.
> These parts are related
> > to Tcp connection without SSL.  I want to know whether IOCP is ready for
> production or not.
>
> Yes.  Many people use it in production.
>
> >    I ran some tests with twisted 10.20, 8.10 before. The IOCP part had
> many problems. I haven't give a try with 11.0. What is the progress for
> windows support?
>
> Can you provide links to the bug reports you filed when you encountered
> problems with the IOCP reactor in 8.1.0 and 10.2.0?  Then I can tell you if
> they were closed in 11.0 or not.
>
> Thanks,
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110429/15977b87/attachment.htm 

From alexandre at quessy.net  Fri Apr 29 10:27:02 2011
From: alexandre at quessy.net (Alexandre Quessy)
Date: Fri, 29 Apr 2011 10:27:02 -0400
Subject: [Twisted-Python] Ubuntu package of Twisted 11.0 for Lucid
Message-ID: <BANLkTi=d5_+sHhUmSeoa8csMnxPCrrnKow@mail.gmail.com>

Hello everyone,
I just made a Ubuntu package of Twisted 11.0 or Ubuntu Lucid (10.04)
and put in on a PPA:
https://launchpad.net/~sat-metalab/+archive/metalab

To install it, simply do this:

sudo add-apt-repository ppa:sat-metalab/metalab
sudo apt-get update
sudo apt-get install python-twisted-core

Once enough people tested it, someone could copy it to the official
Twisted PPA. And then, we can build it for Ubuntu Maverick as well.

There is only one doubt I have, that should be sorted out quite soon.
We will keep this mailing list updated.
Best regards,
-- 
Alexandre Quessy
http://alexandre.quessy.net/


From jrennie at gmail.com  Sat Apr 30 10:29:50 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Sat, 30 Apr 2011 10:29:50 -0400
Subject: [Twisted-Python] problems with transport.write
In-Reply-To: <812695.4650.qm@web112519.mail.gq1.yahoo.com>
References: <B0CE469C-6609-4B23-A0E4-F9FA235FC3F6@twistedmatrix.com>
	<812695.4650.qm@web112519.mail.gq1.yahoo.com>
Message-ID: <BANLkTimPf2EvkqrHEhJOg-Bf9+djp_GOxg@mail.gmail.com>

On Thu, Apr 28, 2011 at 8:39 PM, gary clark <burslem2001 at yahoo.com> wrote:

> It fails by writing a large string at the server side and not receiving any
> data at the client. The client uses open-ssl and is blocking to receive
> data. I dont know if its possible to determine if the write was successful
> or not on the server side i.e knowing how many bytes were written etc. I
> dont see any exceptions. The connection is still maintained and like I said
> its intermittent. So when a transport.write occurs is there an api I can use
> to see if it was successful?
>

Are you using threads on the server side?  If so, are you using
callFromThread?

http://pythonquirks.blogspot.com/2011/01/twisted-callwhenrunning-callfromthread.html

Can you create a SSCCE (http://sscce.org/) and show it to us?

Jason

-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110430/e07d9c0b/attachment.htm 

From j.veenvan at gmail.com  Fri Apr  1 01:51:20 2011
From: j.veenvan at gmail.com (Jeroen van Veen)
Date: Fri, 1 Apr 2011 07:51:20 +0000
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTikdmi-TiUs-Rc50Fb8D6KSQNRoZ7z_M+_zgyyT=@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
	<AANLkTimv+dsVZzK6zWomXjdN2=ixO=KsYf3LktOMhPPA@mail.gmail.com>
	<AANLkTikdmi-TiUs-Rc50Fb8D6KSQNRoZ7z_M+_zgyyT=@mail.gmail.com>
Message-ID: <201104010751.20326.j.veenvan@gmail.com>

I've done something simular in  
https://github.com/phrearch/hwios/blob/master/services/web_ui/service.py

Probably not the best example, but works for me.

kind regards,

Jeroen

On Thursday, March 31, 2011 08:45:49 AM Aljoša Mohorović wrote:
> now i looking at adding an wsgi app to this setup.
> i'm reading
> http://twistedmatrix.com/documents/current/web/howto/web-in-60/wsgi.html
> but can't figure out howto get factory for wsgi if i have:
> 
> ===
> def application(environ, start_response):
>     start_response('200 OK', [('Content-type', 'text/plain')])
>     return ['Hello, world!']
> resource = WSGIResource(reactor, reactor.getThreadPool(), application)
> ===
> 
> i'm looking for something like "reactor.listenTCP(10000,
> wsgi_factory)" but don't know howto do it.
> please point me to proper docs.
> thanks
> 
> Aljosa
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From jml at mumak.net  Fri Apr  1 18:09:02 2011
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 2 Apr 2011 01:09:02 +0100
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre2!
In-Reply-To: <AANLkTindA0cs+paEeFt5UELpU5AFw7Ti7YMaWpBh7m5w@mail.gmail.com>
References: <AANLkTindA0cs+paEeFt5UELpU5AFw7Ti7YMaWpBh7m5w@mail.gmail.com>
Message-ID: <AANLkTimFR-=RSg4o8AjWzaFf-FHFN8GwsewT3FDbk001@mail.gmail.com>

On Thu, Mar 31, 2011 at 3:54 AM, Jessica McKellar
<jessica.mckellar at gmail.com> wrote:
> Having done the builds with two curious guinea pigs by my side, we are
> triply pleased to announce the second 11.0.0 pre-release.
...
> Please test aggressively! Barring the discovery of regressions, we are
> going to cut a final release *this weekend (April 2/3)*.
>

Launchpad test suite passes with 11.0.0pre2. Nice thing about this
release is that we can drop some of the patches we've been maintaining
locally.

Thanks!
jml



From exarkun at twistedmatrix.com  Sat Apr  2 22:05:23 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 03 Apr 2011 04:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1301803523.36.1901043635@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110403/9d0cf3f7/attachment-0001.html>

From jessica.mckellar at gmail.com  Sun Apr  3 12:01:04 2011
From: jessica.mckellar at gmail.com (Jessica McKellar)
Date: Sun, 3 Apr 2011 14:01:04 -0400
Subject: [Twisted-Python] [ANNOUNCE] Twisted 11.0.0 Released
Message-ID: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>

    <lvh> PAS MAINTENANT CHEF! CHUIS EN TRAIN DE BRANCHER LE REACTEURRRRR

On behalf of Twisted Matrix Laboratories, I am honored to announce the
release of Twisted 11.0.0.

Highlights include:

 * a new templating system in Twisted Web, "twisted.web.template",
derived from Divmod Nevow.
 * improved behavior of subprocess spawning on FreeBSD.
 * the 'twistd mail' plugin now uses the endpoints API, providing a
more consistent command line and compatibility with endpoint plugins.
 * twisted.plugin no longer emits a confusing traceback when it can't
write a cache file.

and numerous other bugfixes and documentation improvements. For more
information, see the NEWS file.

Download it now from:

    <http://twistedmatrix.com/>

or install the 'Twisted' package from PyPI.

Many thanks to Glyph Lefkowitz and Jean-Paul Calderone for
sanity-checking the pre-releases and release, and to the enthusiastic
PyCon 2011 sprinters who annihilated dozens of tickets. Thanks to
*everyone* who contributed tickets, patches, documentation, reviews,
buildbots, feedback, and assistance to fellow users and developers
leading up to this release. It is truly a group effort.

    <http://twistedmatrix.com/highscores/?time=2011-03-01>

is a testament to how much work was done in March alone.

-Jessica



From radix at twistedmatrix.com  Sun Apr  3 12:13:25 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 3 Apr 2011 13:13:25 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 11.0.0 Released
In-Reply-To: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
References: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
Message-ID: <BANLkTikqJVfkow-PLym0g+9pOnaqGwWhjw@mail.gmail.com>

On Sun, Apr 3, 2011 at 1:01 PM, Jessica McKellar <jessica.mckellar at gmail.com
> wrote:

>    <lvh> PAS MAINTENANT CHEF! CHUIS EN TRAIN DE BRANCHER LE REACTEURRRRR
>
> On behalf of Twisted Matrix Laboratories, I am honored to announce the
> release of Twisted 11.0.0.
>
>
Thanks!



-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110403/520dd888/attachment.html>

From _ at lvh.cc  Sun Apr  3 12:27:12 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sun, 3 Apr 2011 20:27:12 +0200
Subject: [Twisted-Python] [ANNOUNCE] Twisted 11.0.0 Released
In-Reply-To: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
References: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
Message-ID: <BANLkTi=J1530WYyKG80PdkH-QgHW5ivd_A@mail.gmail.com>

Today is indeed a very, very good day.

Thanks!
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110403/13b0b088/attachment.html>

From techtonik at gmail.com  Sun Apr  3 16:13:22 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 4 Apr 2011 01:13:22 +0300
Subject: [Twisted-Python] Mailman broken images
Message-ID: <BANLkTikZRZqhkjqK4fGnedjs6JGDjCc_Sw@mail.gmail.com>

JFY images from Mailman installation are broken.

http://twistedmatrix.com/cgi-bin/mailman/subscribe/twisted-python
--
anatoly t.



From techtonik at gmail.com  Sun Apr  3 16:25:16 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 4 Apr 2011 01:25:16 +0300
Subject: [Twisted-Python] Where is buildslave configuration?
Message-ID: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>

Hi everybody,

I tried to find where build slave configuration is stored to see when
7th step was added and remove it
http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell_3
perhaps together with the 2nd step
http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell

Why? Well, because when I change version in  _version.py, the command
`python27 twistd --version` still reports the old value.
--
anatoly t.



From exarkun at twistedmatrix.com  Sun Apr  3 22:32:55 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 04 Apr 2011 04:32:55 -0000
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
Message-ID: <20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>

On 3 Apr, 10:25 pm, techtonik at gmail.com wrote:
>Hi everybody,
>
>I tried to find where build slave configuration is stored to see when
>7th step was added and remove it
>http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell_3
>perhaps together with the 2nd step
>http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell
>
>Why? Well, because when I change version in  _version.py, the command
>`python27 twistd --version` still reports the old value.

I don't understand this.  Why do you want to change this configuration? 
Why do you want to change the version?

Unfortunately our buildbot configuration isn't public because it 
contains sensitive data that cannot be given out freely.  But since our 
buildbot configuration is typically only of interest to us, that's 
usually not a problem.

Jean-Paul



From techtonik at gmail.com  Mon Apr  4 01:21:53 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 4 Apr 2011 10:21:53 +0300
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
Message-ID: <BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>

On Mon, Apr 4, 2011 at 7:32 AM,  <exarkun at twistedmatrix.com> wrote:
>>
>>I tried to find where build slave configuration is stored to see when
>>7th step was added and remove it
>>http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell_3
>>perhaps together with the 2nd step
>>http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell
>>
>>Why? Well, because when I change version in  _version.py, the command
>>`python27 twistd --version` still reports the old value.
>
> I don't understand this.  Why do you want to change this configuration?
> Why do you want to change the version?

I want to stop the version string from being forcefully added to
copyright.py file during distribution build process. It is already
imported from twisted module.

Why? I changed version to check that bin/trial uses the correct
twisted checkout (which it didn't), and to my surprise `bin/trial
--version` still gave me the number before it was edited in both
checkout and working copy. That was weird, because in my working copy
copyright.py doesn't have forceful version override hack and I
couldn't find it there.

--
anatoly t.



From techtonik at gmail.com  Mon Apr  4 01:23:39 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 4 Apr 2011 10:23:39 +0300
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
	<BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
Message-ID: <BANLkTi=hPuMzZ0QNeYohV92LTPV943HyvQ@mail.gmail.com>

pardon, s/checkout and working copy/checkout version and installed version/



From werner at thieprojects.ch  Mon Apr  4 03:27:07 2011
From: werner at thieprojects.ch (Werner Thie)
Date: Mon, 04 Apr 2011 11:27:07 +0200
Subject: [Twisted-Python] [ANNOUNCE] Twisted 11.0.0 Released
In-Reply-To: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
References: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
Message-ID: <4D998EEB.8010709@thieprojects.ch>

On 4/3/11 8:01 PM, Jessica McKellar wrote:
>      <lvh>  PAS MAINTENANT CHEF! CHUIS EN TRAIN DE BRANCHER LE REACTEURRRRR
>
> On behalf of Twisted Matrix Laboratories, I am honored to announce the
> release of Twisted 11.0.0.

Kudos to all!

Mahalo nui loa, Werner



From jashank.jeremy at optusnet.com.au  Mon Apr  4 03:28:21 2011
From: jashank.jeremy at optusnet.com.au (Jashank Jeremy)
Date: Mon, 4 Apr 2011 19:28:21 +1000
Subject: [Twisted-Python] Creating a hybrid server in Twisted
Message-ID: <20110404092821.GC70065@vk2pj.dyndns.org>

--text follows this line--

Hi,

I'm trying to write a hybrid server that serves either HTTP or my own
custom protocol depending on how it's addressed (distantly inspired by
the IRC bouncer ZNC).  If it receives a standard GET, POST, HEAD,
etc. it sends HTTP traffic, or if it receives the bareword `CORDELIA',
it switches to Cordelia mode.

HTTP works fine with Twisted.Web.  I can serve pages over HTTP (which is
my desired outcome).  However, I'm not sure how to write the Cordelia
handling code.  I've tried my own custom `render_CORDELIA' function, but
it acts too much like HTTP (ie. it returns a result and terminates the
connection), which is not what I want, as the protocol I've designed
involves establishing a two-way conversation, not a single request and
response pair.

So I'm pretty much stuck in a rut.  I don't want to totally reinvent the
wheel just to be able to protocol-switch; I'd prefer to make use of
existing code from Twisted.  How do I hijack Twisted.Web to add protocol
switching?

Jashank

-- 
Jashank Jeremy
PGP: 0x25A5C309
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 196 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20110404/72583c9f/attachment.sig>

From andrew at bemusement.org  Mon Apr  4 03:43:20 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Mon, 4 Apr 2011 19:43:20 +1000
Subject: [Twisted-Python] Creating a hybrid server in Twisted
In-Reply-To: <20110404092821.GC70065@vk2pj.dyndns.org>
References: <20110404092821.GC70065@vk2pj.dyndns.org>
Message-ID: <20110404094320.GB22356@aihal.home.puzzling.org>

Jashank Jeremy wrote:
[...]
> So I'm pretty much stuck in a rut.  I don't want to totally reinvent the
> wheel just to be able to protocol-switch; I'd prefer to make use of
> existing code from Twisted.  How do I hijack Twisted.Web to add protocol
> switching?

You could override lineReceived along the lines of:

    def connectionMade(self):
    	self.seenFirstLine = False
	HTTPChannel.connectionMade(self)

    def lineReceived(self, line):
	if not self.seenFirstLine and line == 'CORDELIA':
	    # do your protocol switch; e.g. setRawMode and a flag to
	    # pass all bytes directly to some other protocol.  If you
	    # want to be really hackish here you can reassign
	    # self.__class__…
	else:
            self.seenFirstLine = True
	    HTTPChannel.lineReceived(self, line)

Alternatively, you could write a protocol decorator to do much the same
thing (i.e. a Protocol that wraps around the HTTPChannel instance).
There's some infrastructure in twisted.protocols.policies that may help
you write that.

(This sort of thing may make an interesting example to add to the
examples in our docs.  I can imagine it'd be possible to add a
ProtocolSwitchingDecoratorBase or similar to twisted.protocols.policies
to make it easier.  It's not a common requirement, but it is something
that people want to do from time to time.  I know I've done it…)

-Andrew.




From exarkun at twistedmatrix.com  Mon Apr  4 07:01:36 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 04 Apr 2011 13:01:36 -0000
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
	<BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
Message-ID: <20110404130136.1992.1360431224.divmod.xquotient.174@localhost.localdomain>

On 07:21 am, techtonik at gmail.com wrote:
>On Mon, Apr 4, 2011 at 7:32 AM,  <exarkun at twistedmatrix.com> wrote:
>>>
>>>I tried to find where build slave configuration is stored to see when
>>>7th step was added and remove it
>>>http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell_3
>>>perhaps together with the 2nd step
>>>http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/builds/356/steps/shell
>>>
>>>Why? Well, because when I change version in �_version.py, the command
>>>`python27 twistd --version` still reports the old value.
>>
>>I don't understand this. �Why do you want to change this 
>>configuration?
>>Why do you want to change the version?
>
>I want to stop the version string from being forcefully added to
>copyright.py file during distribution build process. It is already
>imported from twisted module.
>
>Why? I changed version to check that bin/trial uses the correct
>twisted checkout (which it didn't), and to my surprise `bin/trial
>--version` still gave me the number before it was edited in both
>checkout and working copy. That was weird, because in my working copy
>copyright.py doesn't have forceful version override hack and I
>couldn't find it there.

Can you back up and explain the connection to the buildbot?  What is 
your ultimate goal, and why does achieving it involve changing Twisted's 
build infrastructure?

The *-msi builders are there so we can build release packages for 
Windows.  That requires setting the version information the way it's 
being set.

Jean-Paul



From andrew at bemusement.org  Mon Apr  4 07:15:58 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Mon, 4 Apr 2011 23:15:58 +1000
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
	<BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
Message-ID: <20110404131558.GC22356@aihal.home.puzzling.org>

anatoly techtonik wrote:
[…]
> Why? I changed version to check that bin/trial uses the correct
> twisted checkout (which it didn't), and to my surprise `bin/trial
> --version` still gave me the number before it was edited in both
> checkout and working copy. That was weird, because in my working copy
> copyright.py doesn't have forceful version override hack and I
> couldn't find it there.

So your problem isn't the version string, but that running bin/trial in
your Twisted checkout is finding the wrong version of Twisted?

Also, rather than editing random library files, why not just look at the
output of python -v bin/trial?

-Andrew.




From techtonik at gmail.com  Mon Apr  4 07:59:44 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 4 Apr 2011 16:59:44 +0300
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <20110404131558.GC22356@aihal.home.puzzling.org>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
	<BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
	<20110404131558.GC22356@aihal.home.puzzling.org>
Message-ID: <BANLkTiny_KibGcPGsqhwwRPFDpdYx0SQtQ@mail.gmail.com>

On Mon, Apr 4, 2011 at 4:15 PM, Andrew Bennetts <andrew at bemusement.org> wrote:
>
> So your problem isn't the version string, but that running bin/trial in
> your Twisted checkout is finding the wrong version of Twisted?

Exactly. But wrong version string was the cause of troubles with debugging it.

> Also, rather than editing random library files, why not just look at the
> output of python -v bin/trial?

I forgot about it, so I've just used python bin/trial --version
..and it showed me the version..
..it was 11.0.0..
..but 11.0.0 is the released version I've installed..
..and the version in the trunk/ (i.e. my working copy)..
..so I decided to modify these versions to differentiate copies somehow..
..because it was 1 minute fix..
..because I forgot about python -v bin/trial..
..which is 1 second test..
..so I've looked up where the script reads version..
..and it appeared that it imports copyright.py..
..which in turn imports version from _version.py..
..so I've modified _version.py in my working copy..
..and got the same 11.0.0 version in bin/trial --version...
.."AHA!", - said I to myself..
..but decided to check ..
.."just in case"..
..because I like to be sure..
..and because you never know who listens to your trac.core.Component..
..or zope.interface..
..or whatever..
..unless you run it..
..so, I've modified _version.py in my installation..
..and..
..guess that?..
..still got the 11.0.0..
..$%#!, - said I to myself..
..[$%#!] * 3, - said I to myself three minutes later..
..or five..
..or more..
..I don't remember..
..but if took less than three minutes, I wouldn't be writing this letter..
..so..
..I compared source trees..
..and found..
..that there is an extra version assignment..
..at the end of copyright.py

So, I wasted some more time (I won't tell how much) to find where is
this funny piece of code in release toolchain that inserts this
version string? After looking at some note that .msi is downloaded
from buildbot, I though "No, that's impossible", but, alas, it was
there. Not even open sourced as it appears.

So, now I am curious why this copyright.py patch is required?

My ultimate goal is to run a complete build of Twisted will all tests
that results in .msi installer on my Vista machine - the machine with
operating system that was in the list of NeededBuildSlaves 30 minutes
ago. =)
--
anatoly t.



From glyph at twistedmatrix.com  Mon Apr  4 12:23:20 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 4 Apr 2011 14:23:20 -0400
Subject: [Twisted-Python] [ANNOUNCE] Twisted 11.0.0 Released
In-Reply-To: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
References: <BANLkTinOyLf7stJOPfqd11+twjeDWrXUuQ@mail.gmail.com>
Message-ID: <DE7732EA-2BCF-4463-B7E9-306AFEE2D4FD@twistedmatrix.com>


On Apr 3, 2011, at 2:01 PM, Jessica McKellar wrote:

>    <lvh> PAS MAINTENANT CHEF! CHUIS EN TRAIN DE BRANCHER LE REACTEURRRRR

MAIS SEULEMENT UNE FOIS PAR PRRRRRRRROCESSUS <http://tm.tl/1785>

> Many thanks to Glyph Lefkowitz and Jean-Paul Calderone for
> sanity-checking the pre-releases and release, and to the enthusiastic
> PyCon 2011 sprinters who annihilated dozens of tickets. Thanks to
> *everyone* who contributed tickets, patches, documentation, reviews,
> buildbots, feedback, and assistance to fellow users and developers
> leading up to this release. It is truly a group effort.
> 
>    <http://twistedmatrix.com/highscores/?time=2011-03-01>
> 
> is a testament to how much work was done in March alone.

... let's not forget to thank Jessica as well for taking the initiative to get this release out the door, volunteering when we were badly in need of a release manager (because when aren't we, really) for a relatively quick and efficiently run release cycle.  It's great to get new people involved in the process, doubly so when their execution of said process is flawless :).

So: thanks!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110404/550c25fb/attachment.html>

From exarkun at twistedmatrix.com  Mon Apr  4 13:55:42 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 04 Apr 2011 19:55:42 -0000
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <BANLkTiny_KibGcPGsqhwwRPFDpdYx0SQtQ@mail.gmail.com>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
	<BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
	<20110404131558.GC22356@aihal.home.puzzling.org>
	<BANLkTiny_KibGcPGsqhwwRPFDpdYx0SQtQ@mail.gmail.com>
Message-ID: <20110404195542.1992.1439171256.divmod.xquotient.183@localhost.localdomain>

On 01:59 pm, techtonik at gmail.com wrote:
>On Mon, Apr 4, 2011 at 4:15 PM, Andrew Bennetts <andrew at bemusement.org> 
>wrote:
>>
>>So your problem isn't the version string, but that running bin/trial 
>>in
>>your Twisted checkout is finding the wrong version of Twisted?
>
>Exactly. But wrong version string was the cause of troubles with 
>debugging it.
>>Also, rather than editing random library files, why not just look at 
>>the
>>output of python -v bin/trial?
>
>I forgot about it, so I've just used python bin/trial --version
>..and it showed me the version..
>..it was 11.0.0..
>..but 11.0.0 is the released version I've installed..
>..and the version in the trunk/ (i.e. my working copy)..
>..so I decided to modify these versions to differentiate copies 
>somehow..
>..because it was 1 minute fix..
>..because I forgot about python -v bin/trial..
>..which is 1 second test..
>..so I've looked up where the script reads version..
>..and it appeared that it imports copyright.py..
>..which in turn imports version from _version.py..
>..so I've modified _version.py in my working copy..
>..and got the same 11.0.0 version in bin/trial --version...
>.."AHA!", - said I to myself..
>..but decided to check ..
>.."just in case"..
>..because I like to be sure..
>..and because you never know who listens to your trac.core.Component..
>..or zope.interface..
>..or whatever..
>..unless you run it..
>..so, I've modified _version.py in my installation..
>..and..
>..guess that?..
>..still got the 11.0.0..
>..$%#!, - said I to myself..
>..[$%#!] * 3, - said I to myself three minutes later..
>..or five..
>..or more..
>..I don't remember..
>..but if took less than three minutes, I wouldn't be writing this 
>letter..
>..so..
>..I compared source trees..
>..and found..
>..that there is an extra version assignment..
>..at the end of copyright.py
>
>So, I wasted some more time (I won't tell how much) to find where is
>this funny piece of code in release toolchain that inserts this
>version string? After looking at some note that .msi is downloaded
>from buildbot, I though "No, that's impossible", but, alas, it was
>there. Not even open sourced as it appears.
>
>So, now I am curious why this copyright.py patch is required?

It's required because of restrictions on what version you are allowed to 
use when building an MSI.  These rules are codified in 
distutils.version.StrictVersion:

    >>> from distutils.version import StrictVersion
    >>> from twisted import __version__
    >>> StrictVersion(__version__)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "/usr/lib/python2.6/distutils/version.py", line 40, in 
__init__
        self.parse(vstring)
      File "/usr/lib/python2.6/distutils/version.py", line 107, in parse
        raise ValueError, "invalid version number '%s'" % vstring
    ValueError: invalid version number '11.0.0+r31541'
    >>> StrictVersion('11.0.0pre1')
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "/usr/lib/python2.6/distutils/version.py", line 40, in 
__init__
        self.parse(vstring)
      File "/usr/lib/python2.6/distutils/version.py", line 107, in parse
        raise ValueError, "invalid version number '%s'" % vstring
    ValueError: invalid version number '11.0.0pre1'

The build step is there to ensure the version is something bdist_msi 
will accept.  It's an unintentional side-effect that the change survives 
all the way through to the built page.
>My ultimate goal is to run a complete build of Twisted will all tests
>that results in .msi installer on my Vista machine - the machine with
>operating system that was in the list of NeededBuildSlaves 30 minutes
>ago. =)

Coincidentally, I noticed that page was somewhat outdated and updated 
it.  If someone would *like* to contribute Vista slaves, that's 
completely fine, but I think the Twisted project will be happy enough if 
we have to skip over Vista and just pay attention to Windows 7.

Jean-Paul



From techtonik at gmail.com  Mon Apr  4 15:00:27 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Tue, 5 Apr 2011 00:00:27 +0300
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <20110404195542.1992.1439171256.divmod.xquotient.183@localhost.localdomain>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
	<BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
	<20110404131558.GC22356@aihal.home.puzzling.org>
	<BANLkTiny_KibGcPGsqhwwRPFDpdYx0SQtQ@mail.gmail.com>
	<20110404195542.1992.1439171256.divmod.xquotient.183@localhost.localdomain>
Message-ID: <BANLkTikc9UEb+YZFn3-H68thUygwjTkNVQ@mail.gmail.com>

On Mon, Apr 4, 2011 at 10:55 PM,  <exarkun at twistedmatrix.com> wrote:
>>
>>So, now I am curious why this copyright.py patch is required?
>
> It's required because of restrictions on what version you are allowed to
> use when building an MSI.  These rules are codified in
> distutils.version.StrictVersion:
>
>    >>> from distutils.version import StrictVersion
>    >>> from twisted import __version__
>    >>> StrictVersion(__version__)
>    Traceback (most recent call last):
>      File "<stdin>", line 1, in <module>
>      File "/usr/lib/python2.6/distutils/version.py", line 40, in
> __init__
>        self.parse(vstring)
>      File "/usr/lib/python2.6/distutils/version.py", line 107, in parse
>        raise ValueError, "invalid version number '%s'" % vstring
>    ValueError: invalid version number '11.0.0+r31541'
>    >>> StrictVersion('11.0.0pre1')
>    Traceback (most recent call last):
>      File "<stdin>", line 1, in <module>
>      File "/usr/lib/python2.6/distutils/version.py", line 40, in
> __init__
>        self.parse(vstring)
>      File "/usr/lib/python2.6/distutils/version.py", line 107, in parse
>        raise ValueError, "invalid version number '%s'" % vstring
>    ValueError: invalid version number '11.0.0pre1'
>
> The build step is there to ensure the version is something bdist_msi
> will accept.  It's an unintentional side-effect that the change survives
> all the way through to the built page.

I've tried to do this directly in setup.py so that local .msi builds
could work too.
http://twistedmatrix.com/trac/ticket/5024

-- 
anatoly t.



From glyph at twistedmatrix.com  Mon Apr  4 15:50:15 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 4 Apr 2011 17:50:15 -0400
Subject: [Twisted-Python] Where is buildslave configuration?
In-Reply-To: <BANLkTikc9UEb+YZFn3-H68thUygwjTkNVQ@mail.gmail.com>
References: <BANLkTiks9XzXpTin+6b=15LFTFH_Yh+iBg@mail.gmail.com>
	<20110404043255.1992.1989277177.divmod.xquotient.163@localhost.localdomain>
	<BANLkTi=ekppNSrDU5HVu0skhX9w5+QXzRg@mail.gmail.com>
	<20110404131558.GC22356@aihal.home.puzzling.org>
	<BANLkTiny_KibGcPGsqhwwRPFDpdYx0SQtQ@mail.gmail.com>
	<20110404195542.1992.1439171256.divmod.xquotient.183@localhost.localdomain>
	<BANLkTikc9UEb+YZFn3-H68thUygwjTkNVQ@mail.gmail.com>
Message-ID: <2520D66E-BEFD-434E-A909-58C82DC453B1@twistedmatrix.com>


On Apr 4, 2011, at 5:00 PM, anatoly techtonik wrote:

> I've tried to do this directly in setup.py so that local .msi builds
> could work too.
> http://twistedmatrix.com/trac/ticket/5024

Already reviewed and back to you.  Thanks!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110404/5f2d3a95/attachment.html>

From brad.milne at devx.runthered.com  Mon Apr  4 19:39:05 2011
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Tue, 5 Apr 2011 13:39:05 +1200
Subject: [Twisted-Python] @inlinecallbacks and AlreadyCalledError in test
	cases
Message-ID: <BANLkTimYX0T=oQ_DZqvxAhrw9TbOM7WK_A@mail.gmail.com>

Hi all

I have recently started switching to trial.unittest from python's own. The
trouble I'm experiencing is when a timeout occurs in my test, it errbacks().
Then the @inlineCallbacks decorator sees the error and errbacks(). But then
a second @inlineCallback in the chain subsequently sees *that* errback and
tries to errback itself. This results in AlreadyCalledError.

In the test setup, various services are started. These are tracked and then
shutdown again in the teardown. Also, there is some polling that happens as
part of the tests (waiting on db activities, for example). These use
deferLater calls, which are also tracked and torn down in the teardown.

I've tried _suppressAlreadyCalled in various places to no avail.

Below is a simple example that shows the problem.

Many thanks
Brad


<code>

from twisted.trial.unittest import TestCase

from twisted.internet import task, reactor

from twisted.internet.defer import inlineCallbacks


#import twisted

#twisted.internet.base.DelayedCall.debug = True

#twisted.internet.defer.setDebugging(True)


class Test1(TestCase):



    def setUp(self):

        # timeout test in 1 second

        self.timeout = 1

        self.jobs = []

        self.addCleanup(self._tearDown)



    def _tearDown(self):

        for d in self.jobs:

            if d and not d.called:

                d.cancel()



    @inlineCallbacks

    def _waitForChange(self):

        # do stuff

        d = task.deferLater(reactor, 0.5, lambda : None)

        self.jobs.append(d)

        yield d

        self.jobs.remove(d)

        # do more stuff



    @inlineCallbacks

    def testHere(self):

        # do stuff

        yield self._waitForChange()

        # do more stuff


    # This one passes OK

    #def testHere(self):

    #   return self._waitForChange()


if __name__ == "__main__":

    import sys

    from twisted.scripts import trial

    sys.argv.extend([sys.argv[0]])

    trial.run()

</code>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110405/cd2f964c/attachment.html>

From exarkun at twistedmatrix.com  Mon Apr  4 20:21:48 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 05 Apr 2011 02:21:48 -0000
Subject: [Twisted-Python] @inlinecallbacks and AlreadyCalledError in
	test	cases
In-Reply-To: <BANLkTimYX0T=oQ_DZqvxAhrw9TbOM7WK_A@mail.gmail.com>
References: <BANLkTimYX0T=oQ_DZqvxAhrw9TbOM7WK_A@mail.gmail.com>
Message-ID: <20110405022148.1992.42773310.divmod.xquotient.206@localhost.localdomain>

On 01:39 am, brad.milne at devx.runthered.com wrote:
>Hi all
>
>I have recently started switching to trial.unittest from python's own. 
>The
>trouble I'm experiencing is when a timeout occurs in my test, it 
>errbacks().
>Then the @inlineCallbacks decorator sees the error and errbacks(). But 
>then
>a second @inlineCallback in the chain subsequently sees *that* errback 
>and
>tries to errback itself. This results in AlreadyCalledError.
>
>In the test setup, various services are started. These are tracked and 
>then
>shutdown again in the teardown. Also, there is some polling that 
>happens as
>part of the tests (waiting on db activities, for example). These use
>deferLater calls, which are also tracked and torn down in the teardown.
>
>I've tried _suppressAlreadyCalled in various places to no avail.
>
>Below is a simple example that shows the problem.

I tried running the sample, it completes without error.  I guess that's 
not what you're seeing?  What version of Twisted do you have?

Jean-Paul



From brad.milne at devx.runthered.com  Mon Apr  4 20:49:50 2011
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Tue, 5 Apr 2011 14:49:50 +1200
Subject: [Twisted-Python] @inlinecallbacks and AlreadyCalledError in
	test cases
In-Reply-To: <20110405022148.1992.42773310.divmod.xquotient.206@localhost.localdomain>
References: <BANLkTimYX0T=oQ_DZqvxAhrw9TbOM7WK_A@mail.gmail.com>
	<20110405022148.1992.42773310.divmod.xquotient.206@localhost.localdomain>
Message-ID: <BANLkTikugF0rwUcSZ3O3TE+gUoPAB9P+BA@mail.gmail.com>

On 5 April 2011 14:21, <exarkun at twistedmatrix.com> wrote:

> On 01:39 am, brad.milne at devx.runthered.com wrote:
> >Hi all
> >
> >I have recently started switching to trial.unittest from python's own.
> >The
> >trouble I'm experiencing is when a timeout occurs in my test, it
> >errbacks().
> >Then the @inlineCallbacks decorator sees the error and errbacks(). But
> >then
> >a second @inlineCallback in the chain subsequently sees *that* errback
> >and
> >tries to errback itself. This results in AlreadyCalledError.
> >
> >In the test setup, various services are started. These are tracked and
> >then
> >shutdown again in the teardown. Also, there is some polling that
> >happens as
> >part of the tests (waiting on db activities, for example). These use
> >deferLater calls, which are also tracked and torn down in the teardown.
> >
> >I've tried _suppressAlreadyCalled in various places to no avail.
> >
> >Below is a simple example that shows the problem.
>
> I tried running the sample, it completes without error.  I guess that's
> not what you're seeing?  What version of Twisted do you have?
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


Hi Jean-Paul

I'm using 10.2.0 on a mac. Here's my interpreter (using buildout):

#!/opt/local/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python
import sys
sys.path[0:0] = [
    '/Users/brad/Development/python/workspace/Python-Integration/src',
    '/Users/brad/Development/python/eggs/nose-0.11.4-py2.6.egg',
    '/Users/brad/Development/python/eggs/MiniMock-1.2.5-py2.6.egg',
    '/Users/brad/Development/python/eggs/suds-0.4-py2.6.egg',
    '/Users/brad/Development/python/eggs/SOAPpy-0.12.4-py2.6.egg',
    '/Users/brad/Development/python/eggs/wstools-0.3-py2.6.egg',
    '/Users/brad/Development/python/eggs/fpconst-0.7.2-py2.6.egg',

 '/Users/brad/Development/python/eggs/Twisted-10.2.0-py2.6-macosx-10.6-x86_64.egg',

 '/Users/brad/Development/python/eggs/zope.interface-3.6.1-py2.6-macosx-10.6-x86_64.egg',

 '/Users/brad/Development/python/eggs/pymongo-1.9-py2.6-macosx-10.6-x86_64.egg',
    '/Users/brad/Development/python/eggs/pytz-2010h-py2.6.egg',
    ]

The python I have at that location (using MacPorts) is 2.6.6.

Following your email I see that 11.0.0 is released so I tried that and got
the same error:
<snip>
[ERROR]
Traceback (most recent call last):
  File
"/Users/brad/Development/python/eggs/Twisted-11.0.0-py2.6-macosx-10.6-x86_64.egg/twisted/internet/defer.py",
line 1076, in gotResult
    _inlineCallbacks(r, g, deferred)
  File
"/Users/brad/Development/python/eggs/Twisted-11.0.0-py2.6-macosx-10.6-x86_64.egg/twisted/internet/defer.py",
line 1066, in _inlineCallbacks
    deferred.errback()
  File
"/Users/brad/Development/python/eggs/Twisted-11.0.0-py2.6-macosx-10.6-x86_64.egg/twisted/internet/defer.py",
line 388, in errback
    self._startRunCallbacks(fail)
  File
"/Users/brad/Development/python/eggs/Twisted-11.0.0-py2.6-macosx-10.6-x86_64.egg/twisted/internet/defer.py",
line 448, in _startRunCallbacks
    raise AlreadyCalledError
twisted.internet.defer.AlreadyCalledError:
</snip>

Many thanks
Brad
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110405/b54fe06f/attachment-0001.html>

From jason.heeris at gmail.com  Tue Apr  5 01:08:53 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Tue, 5 Apr 2011 15:08:53 +0800
Subject: [Twisted-Python] Gtk2Reactor: what are the reasons for avoiding
	GLib functions?
Message-ID: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>

I'd like to try and get to the bottom of the various problems with
Twisted + GTK + Windows (mainly issue #4932[1], but see also issues
#4376[2], #4862[3], #1759[4]).

On issue #4376 there's a comment from Exarkun:

"glib handles timeouts much less efficiently than any of the existing
Twisted reactors. Letting glib take care of these would probably make
the glib-based reactors unusable for applications with many timeouts."

Is there a benchmark or piece of code somewhere that verifies this (or
at least gives some sort of demonstration of "unuseable")?

If not, is there some alternative implementation lying around in
version control that tried to use GLib's mainloop functions and was
thrown out for performance reasons?

I ask because my first approach to fixing this would be to ignore
what's already there and try to write something that's quite closely
coupled to the GLib/GTK mainloop. But it sounds like this was already
tried and abandoned, and I want to be able to make sure I'm not (a)
writing something that was already written, or (b) performs too poorly
to be of any use. It would be good to have a metric available.

Cheers,
Jason

[1] http://twistedmatrix.com/trac/ticket/4932
[2] http://twistedmatrix.com/trac/ticket/4376
[3] http://twistedmatrix.com/trac/ticket/4862
[4] http://twistedmatrix.com/trac/ticket/1759



From andrew at bemusement.org  Tue Apr  5 01:51:33 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 5 Apr 2011 17:51:33 +1000
Subject: [Twisted-Python] Gtk2Reactor: what are the reasons for avoiding
 GLib functions?
In-Reply-To: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>
References: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>
Message-ID: <20110405075133.GG22356@aihal.home.puzzling.org>

Jason Heeris wrote:
[…]
> "glib handles timeouts much less efficiently than any of the existing
> Twisted reactors. Letting glib take care of these would probably make
> the glib-based reactors unusable for applications with many timeouts."
> 
> Is there a benchmark or piece of code somewhere that verifies this (or
> at least gives some sort of demonstration of "unuseable")?

…and if someone does have such a benchmark, it'd be great to add it to
<http://speed.twistedmatrix.com/> :)

-Andrew.



From itamar at itamarst.org  Tue Apr  5 06:04:46 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 05 Apr 2011 08:04:46 -0400
Subject: [Twisted-Python] Gtk2Reactor: what are the reasons for avoiding
 GLib functions?
In-Reply-To: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>
References: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>
Message-ID: <1302005086.1655.2.camel@blake>

On Tue, 2011-04-05 at 15:08 +0800, Jason Heeris wrote:
> I'd like to try and get to the bottom of the various problems with
> Twisted + GTK + Windows (mainly issue #4932[1], but see also issues
> #4376[2], #4862[3], #1759[4]).

Thanks for looking into this!

> On issue #4376 there's a comment from Exarkun:
> 
> "glib handles timeouts much less efficiently than any of the existing
> Twisted reactors. Letting glib take care of these would probably make
> the glib-based reactors unusable for applications with many timeouts."
> 
> Is there a benchmark or piece of code somewhere that verifies this (or
> at least gives some sort of demonstration of "unuseable")?

https://bugzilla.gnome.org/show_bug.cgi?id=143061

I don't think it's ever going to get fixed on the gtk side, I filed that
bug in 2004. The issues on Windows may be different than this, for that
matter.




From ziga.seilnacht at gmail.com  Tue Apr  5 06:06:47 2011
From: ziga.seilnacht at gmail.com (=?windows-1252?Q?=8Eiga_Seilnacht?=)
Date: Tue, 05 Apr 2011 14:06:47 +0200
Subject: [Twisted-Python] Gtk2Reactor: what are the reasons for avoiding
 GLib functions?
In-Reply-To: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>
References: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>
Message-ID: <4D9B05D7.4080909@gmail.com>

Hello,

On 5.4.2011 9:08, Jason Heeris wrote:
> I'd like to try and get to the bottom of the various problems with
> Twisted + GTK + Windows (mainly issue #4932[1], but see also issues
> #4376[2], #4862[3], #1759[4]).
>
> On issue #4376 there's a comment from Exarkun:
>
> "glib handles timeouts much less efficiently than any of the existing
> Twisted reactors. Letting glib take care of these would probably make
> the glib-based reactors unusable for applications with many timeouts."
>
> Is there a benchmark or piece of code somewhere that verifies this (or
> at least gives some sort of demonstration of "unuseable")?
>

I think that the main reason for PortableGtkReactor being used on Windows
is due to glib's IO channels limitations on Windows. You can only have 63
channels in the event loop at the same time due to g_poll's use of
MsgWaitForMultipleObject.

In addition, IO channels are quite buggy on Windows when used for sockets,
see the comment at the top of the glib/giowin32.c file in the glib source
for a list of issues. E.g. I suspect that the second problem described in:

https://bugzilla.gnome.org/show_bug.cgi?id=357674

is responsible for Twisted's ticket #3371, because a similar problem
can be seen with win32eventreactor (ticket #4950), which also uses
WSAEventSelect for socket monitoring.

Best regards,
Ziga



From jason.heeris at gmail.com  Tue Apr  5 07:19:12 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Tue, 5 Apr 2011 21:19:12 +0800
Subject: [Twisted-Python] Gtk2Reactor: what are the reasons for avoiding
 GLib functions?
In-Reply-To: <4D9B05D7.4080909@gmail.com>
References: <BANLkTi=iTvCZUO=-7TRnYxD2mhyv63rY=g@mail.gmail.com>
	<4D9B05D7.4080909@gmail.com>
Message-ID: <BANLkTi=++bwE5aW4VxruEgYAST6E3x1=_g@mail.gmail.com>

On 5 April 2011 20:06, Žiga Seilnacht <ziga.seilnacht at gmail.com> wrote:
> I think that the main reason for PortableGtkReactor being used on Windows
> is due to glib's IO channels limitations on Windows. You can only have 63
> channels in the event loop at the same time due to g_poll's use of
> MsgWaitForMultipleObject.

The trouble is, PortableGtkReactor is just out-and-out unusable for
certain applications. In my case, it turned a 3 minute comms session
into a 25 hour session — OR, I could have my app completely max out
the CPU while it's running. Neither is workable in any realistic
context. But I'm pretty sure I don't need > 63 I/O channels open at
once, unless I'm missing something about the inner workings of
Twisted.

(I mean no offense, I can see why it has to work the way it does...
but its weakness shows up in exactly the kind of protocol I need to
use.)

> In addition, IO channels are quite buggy on Windows when used for sockets,
> see the comment at the top of the glib/giowin32.c file in the glib source
> for a list of issues. E.g. I suspect that the second problem described in:
>
> https://bugzilla.gnome.org/show_bug.cgi?id=357674
>
> is responsible for Twisted's ticket #3371, because a similar problem
> can be seen with win32eventreactor (ticket #4950), which also uses
> WSAEventSelect for socket monitoring.

Hmm. I may be in over my head here. But I won't give up just yet,
since it *would* be nice to be able to use PyGTK for the things I need
to do.

Thanks for the info,
Jason



From wn10 at cornell.edu  Tue Apr  5 13:03:59 2011
From: wn10 at cornell.edu (Bill Noon)
Date: Tue, 5 Apr 2011 15:03:59 -0400
Subject: [Twisted-Python] Twisted 11.0 and Foolscap incompatibility
Message-ID: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>

It looks like the new ssl/tls code doesn't work with Foolscap.  The ConnectionMixin is treating the self.protocol
object as a transport and calls write() and loseConnection() on it.

Here is a traceback:
	Traceback (most recent call last):
	  File "/usr/lib64/python2.6/site-packages/foolscap-0.6.1_-py2.6.egg/foolscap/slicers/root.py", line 107, in send
	    d.callback(None)
	  File "/usr/lib64/python2.6/site-packages/Twisted-11.0.0_r31548-py2.6-linux-x86_64.egg/twisted/internet/defer.py", line 361, in callback
	    self._startRunCallbacks(result)
	  File "/usr/lib64/python2.6/site-packages/Twisted-11.0.0_r31548-py2.6-linux-x86_64.egg/twisted/internet/defer.py", line 455, in _startRunCallbacks
	    self._runCallbacks()
	  File "/usr/lib64/python2.6/site-packages/Twisted-11.0.0_r31548-py2.6-linux-x86_64.egg/twisted/internet/defer.py", line 542, in _runCallbacks
	    current.result = callback(current.result, *args, **kw)
	--- <exception caught here> ---
	  File "/usr/lib64/python2.6/site-packages/foolscap-0.6.1_-py2.6.egg/foolscap/banana.py", line 216, in produce
	    self.pushSlicer(slicer, obj)
	  File "/usr/lib64/python2.6/site-packages/foolscap-0.6.1_-py2.6.egg/foolscap/banana.py", line 352, in pushSlicer
	    openID = self.sendOpen()
	  File "/usr/lib64/python2.6/site-packages/foolscap-0.6.1_-py2.6.egg/foolscap/banana.py", line 481, in sendOpen
	    int2b128(openID, self.transport.write)
	  File "/usr/lib64/python2.6/site-packages/foolscap-0.6.1_-py2.6.egg/foolscap/banana.py", line 24, in int2b128
	    stream(chr(0))
	  File "/usr/lib64/python2.6/site-packages/Twisted-11.0.0_r31548-py2.6-linux-x86_64.egg/twisted/internet/_newtls.py", line 176, in write
	    self.protocol.write(bytes)
	exceptions.AttributeError: 'Broker' object has no attribute 'write'
	

Any workarounds or suggestions?  Reverting to Twisted 10.2 works for now.

--Bill Noon
Northeast Regional Climate Center
Cornell University




From glyph at twistedmatrix.com  Tue Apr  5 13:23:01 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Apr 2011 15:23:01 -0400
Subject: [Twisted-Python] Twisted SVN HEAD and Foolscap incompatibility
In-Reply-To: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>
References: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>
Message-ID: <D6F6DCEF-BA7C-423C-A22A-4FACC45B2645@twistedmatrix.com>


On Apr 5, 2011, at 3:03 PM, Bill Noon wrote:

> 	  File "/usr/lib64/python2.6/site-packages/Twisted-11.0.0_r31548-py2.6-linux-x86_64.egg/twisted/internet/_newtls.py", line 176, in write

Nobody panic :).

r31548 of trunk is not Twisted 11.0.0.  Twisted 11.0 diverged from trunk as of <http://twistedmatrix.com/trac/changeset/31390>.

Perhaps more tellingly, there is no _newtls.py in Twisted 11.0: <http://twistedmatrix.com/trac/browser/tags/releases/twisted-11.0.0/twisted/internet>.  (Plus, I triple-checked the tarballs just now to make sure that they were released from the right place, and they were.)

That revision of trunk would include <http://twistedmatrix.com/trac/changeset/31537> though, which is some new SSL code _not_ included in the 11.0 release.

So - yes, this is a bug, but NOT in the 11.0 release.

Please file a bug, noting that it's a regression.  Depending on what level of nastiness foolscap is getting up to in order to trigger this behavior, we may have to revert <http://tm.tl/4854>.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110405/7b088c6c/attachment.html>

From glyph at twistedmatrix.com  Tue Apr  5 14:02:29 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Apr 2011 16:02:29 -0400
Subject: [Twisted-Python] Twisted 11.0 and Foolscap incompatibility
In-Reply-To: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>
References: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>
Message-ID: <14E14BF9-4CEF-4BA0-974B-8CC0362EED31@twistedmatrix.com>


On Apr 5, 2011, at 3:03 PM, Bill Noon wrote:

> Reverting to Twisted 10.2 works for now.

You should just revert to the actual released version of 11.0.  How did you install 11.0?  Is easy_install screen-scraping the wrong link again, or something like that?

By the way; correct version number or not, thanks for bringing this to our attention.  It's good to get feedback from user testing on features like this _before_ they make it into a release ;-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110405/d8766168/attachment.html>

From wn10 at cornell.edu  Tue Apr  5 14:04:51 2011
From: wn10 at cornell.edu (Bill Noon)
Date: Tue, 5 Apr 2011 16:04:51 -0400
Subject: [Twisted-Python] Twisted SVN HEAD and Foolscap incompatibility
In-Reply-To: <D6F6DCEF-BA7C-423C-A22A-4FACC45B2645@twistedmatrix.com>
References: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>
	<D6F6DCEF-BA7C-423C-A22A-4FACC45B2645@twistedmatrix.com>
Message-ID: <BB774354-13C7-4F81-BB4E-A7730FA2DD3C@cornell.edu>


On Apr 5, 2011, at 3:23 PM, Glyph Lefkowitz wrote:

> 
> On Apr 5, 2011, at 3:03 PM, Bill Noon wrote:
> 
>> 	  File "/usr/lib64/python2.6/site-packages/Twisted-11.0.0_r31548-py2.6-linux-x86_64.egg/twisted/internet/_newtls.py", line 176, in write
> 
> Nobody panic :).
Sorry about misstating that this was in the 11.0 release.

> 
> r31548 of trunk is not Twisted 11.0.0.  Twisted 11.0 diverged from trunk as of <http://twistedmatrix.com/trac/changeset/31390>.
> 
> Perhaps more tellingly, there is no _newtls.py in Twisted 11.0: <http://twistedmatrix.com/trac/browser/tags/releases/twisted-11.0.0/twisted/internet>.  (Plus, I triple-checked the tarballs just now to make sure that they were released from the right place, and they were.)
> 
> That revision of trunk would include <http://twistedmatrix.com/trac/changeset/31537> though, which is some new SSL code _not_ included in the 11.0 release.
> 
> So - yes, this is a bug, but NOT in the 11.0 release.
> 
> Please file a bug, noting that it's a regression.  Depending on what level of nastiness foolscap is getting up to in order to trigger this behavior, we may have to revert <http://tm.tl/4854>.

Ok.  It is ticket 5028, http://twistedmatrix.com/trac/ticket/5028

--Bill

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110405/9e7ab071/attachment.html>

From wn10 at cornell.edu  Tue Apr  5 14:07:58 2011
From: wn10 at cornell.edu (Bill Noon)
Date: Tue, 5 Apr 2011 16:07:58 -0400
Subject: [Twisted-Python] Twisted 11.0 and Foolscap incompatibility
In-Reply-To: <14E14BF9-4CEF-4BA0-974B-8CC0362EED31@twistedmatrix.com>
References: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>
	<14E14BF9-4CEF-4BA0-974B-8CC0362EED31@twistedmatrix.com>
Message-ID: <83F6FE3B-61CF-4046-AC37-6EA313FD554D@cornell.edu>


On Apr 5, 2011, at 4:02 PM, Glyph Lefkowitz wrote:

> 
> On Apr 5, 2011, at 3:03 PM, Bill Noon wrote:
> 
>> Reverting to Twisted 10.2 works for now.
> 
> You should just revert to the actual released version of 11.0.  How did you install 11.0?  Is easy_install screen-scraping the wrong link again, or something like that?

No, my fault for running from svn_head.  

> By the way; correct version number or not, thanks for bringing this to our attention.  It's good to get feedback from user testing on features like this _before_ they make it into a release ;-).

Just doing my part...

--Bill


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110405/d599f55c/attachment.html>

From glyph at twistedmatrix.com  Tue Apr  5 19:54:18 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Apr 2011 21:54:18 -0400
Subject: [Twisted-Python] [Twisted-web] Creating a hybrid server in
	Twisted
In-Reply-To: <m2bp0lbmnt.fsf@valheru.db3l.homeip.net>
References: <20110404092821.GC70065@vk2pj.dyndns.org>
	<m2bp0lbmnt.fsf@valheru.db3l.homeip.net>
Message-ID: <7F3A6FC0-6F74-4991-AE30-E6E5125265D7@twistedmatrix.com>


On Apr 4, 2011, at 7:51 PM, David Bolen wrote:

> Jashank Jeremy <jashank.jeremy at optusnet.com.au> writes:
> 
>> So I'm pretty much stuck in a rut.  I don't want to totally reinvent the
>> wheel just to be able to protocol-switch; I'd prefer to make use of
>> existing code from Twisted.  How do I hijack Twisted.Web to add protocol
>> switching?
> 

> To insert your own protocol code, you want to set the "protocol"
> attribute of your Site (or HTTPFactory if using that directly)
> instance to your own "hybrid" protocol class.

It would be slightly better to override buildProtocol, because that way you can call the superclass's implementation more idiomatically.  But, the idea is the same.

Note that we'd really like to have protocol switch functionality built into Twisted proper so that you don't have to jump through all these hoops.  Please feel free to contribute patches to fix this ticket: <http://twistedmatrix.com/trac/ticket/3204>.




From glyph at twistedmatrix.com  Tue Apr  5 19:57:21 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Apr 2011 21:57:21 -0400
Subject: [Twisted-Python] Twisted SVN HEAD and Foolscap incompatibility
In-Reply-To: <BB774354-13C7-4F81-BB4E-A7730FA2DD3C@cornell.edu>
References: <72EC971A-0C32-4E44-86FD-CE9DB3042F45@cornell.edu>
	<D6F6DCEF-BA7C-423C-A22A-4FACC45B2645@twistedmatrix.com>
	<BB774354-13C7-4F81-BB4E-A7730FA2DD3C@cornell.edu>
Message-ID: <DC9CC595-97F3-4718-9F8A-5391B1760E40@twistedmatrix.com>


On Apr 5, 2011, at 4:04 PM, Bill Noon wrote:

> Ok.  It is ticket 5028, http://twistedmatrix.com/trac/ticket/5028

As exarkun already noted here: <http://twistedmatrix.com/trac/ticket/5028#comment:2>, this is caused by foolscap manipulating an attribute which probably shouldn't have been public in the first place, and *definitely* isn't mutable.  This means that there are several other types of instrumentation which foolscap will break.

This is a popular ticket this week - I just mentioned it in another thread: <http://twistedmatrix.com/trac/ticket/3204>.  If foolscap needs to switch protocols mid-stream, it either needs to do what AMP does, or contribute a real fix for that ticket.  (And then require a new version of Twisted :).)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110405/0f66e203/attachment.html>

From techtonik at gmail.com  Wed Apr  6 01:16:03 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 6 Apr 2011 10:16:03 +0300
Subject: [Twisted-Python] Persisted protocol?
Message-ID: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>

Hi again,


>From http://twistedmatrix.com/documents/current/core/howto/udp.html

"""As you can see, the protocol is registered with the reactor. This means it
may be persisted if it's added to an application..."""

What does 'persisted` here mean?

--
anatoly t.



From stephen at thorne.id.au  Wed Apr  6 01:26:59 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Wed, 6 Apr 2011 17:26:59 +1000
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
Message-ID: <20110406072659.GC764@thorne.id.au>

On 2011-04-06, anatoly techtonik wrote:
> From http://twistedmatrix.com/documents/current/core/howto/udp.html
> 
> """As you can see, the protocol is registered with the reactor. This means it
> may be persisted if it's added to an application..."""
> 
> What does 'persisted` here mean?

It sounds like this is a rememant of when the reactor shutdown it used
to serialise its state so it could be restarted later.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue



From screwtape at froup.com  Wed Apr  6 01:30:27 2011
From: screwtape at froup.com (Tim Allen)
Date: Wed, 6 Apr 2011 17:30:27 +1000
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
Message-ID: <20110406073027.GP5510@boombah.thristian.org>

On Wed, Apr 06, 2011 at 10:16:03AM +0300, anatoly techtonik wrote:
> From http://twistedmatrix.com/documents/current/core/howto/udp.html
> 
> """As you can see, the protocol is registered with the reactor. This means it
> may be persisted if it's added to an application..."""
> 
> What does 'persisted` here mean?

At some point in the past, somebody decided it would be a great idea to
have Twisted's "twistd" start applications from Python pickles; you
could start up a server, configure it interactively, and when you shut
it down the entire server state would be persisted in a pickle-file;
when you started it up it would resume exactly as it had been when you
shut it down.

The idea seems to have fallen from grace, possibly because restarting
a process is often the simplest way to resolve a production problem.
These days, new Twisted users are encouraged to use Python ".tac" files
rather than ".tap" pickles, and I expect that sentence is just a relic
of that bygone era.



From spongelavapaul at googlemail.com  Wed Apr  6 03:55:25 2011
From: spongelavapaul at googlemail.com (Paul Thomas)
Date: Wed, 6 Apr 2011 10:55:25 +0100
Subject: [Twisted-Python] Instrumenting Reactors
Message-ID: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>

I have a reactor which is getting busier over time and I'd like to find out where the cycles are going. Using the profiler isn't really practical on a server running for days, so I'd like to instrument the reactor to show me which I/O events are taking the longest to deal with. 

Should I just hack into the reactor somewhere? Or is there something sitting in a library I haven't seen that will help with this?

Paul. 



From _ at lvh.cc  Wed Apr  6 04:35:37 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 6 Apr 2011 12:35:37 +0200
Subject: [Twisted-Python] Instrumenting Reactors
In-Reply-To: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
References: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
Message-ID: <BANLkTi=C1XMCG_W05umNQPM2Wy09V=+GQQ@mail.gmail.com>

Hi!


No guarantee it's an optimal solution, but when I wanted to inspect a
running process (which sounds like what you're doing), I had a pretty good
time with manhole. (If you're not familiar with that: it's in Twisted Conch,
and it's basically just a way to SSH in to a running box and get a REPL).

In that REPL, you can of course do things like inspect the running reactor
:-)


cheers
lvh

On Wed, Apr 6, 2011 at 11:55 AM, Paul Thomas
<spongelavapaul at googlemail.com>wrote:

> I have a reactor which is getting busier over time and I'd like to find out
> where the cycles are going. Using the profiler isn't really practical on a
> server running for days, so I'd like to instrument the reactor to show me
> which I/O events are taking the longest to deal with.
>
> Should I just hack into the reactor somewhere? Or is there something
> sitting in a library I haven't seen that will help with this?
>
> Paul.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110406/c6a96c46/attachment.html>

From _ at lvh.cc  Wed Apr  6 04:41:08 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 6 Apr 2011 12:41:08 +0200
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <20110406073027.GP5510@boombah.thristian.org>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
	<20110406073027.GP5510@boombah.thristian.org>
Message-ID: <BANLkTi=dVRpv_yh+8SgCVU=HUagfr7e5YQ@mail.gmail.com>

On Wed, Apr 6, 2011 at 9:30 AM, Tim Allen <screwtape at froup.com> wrote:

> On Wed, Apr 06, 2011 at 10:16:03AM +0300, anatoly techtonik wrote:
> > From http://twistedmatrix.com/documents/current/core/howto/udp.html
> >
> > """As you can see, the protocol is registered with the reactor. This
> means it
> > may be persisted if it's added to an application..."""
> >
> > What does 'persisted` here mean?
>
> At some point in the past, somebody decided it would be a great idea to
> have Twisted's "twistd" start applications from Python pickles; you
> could start up a server, configure it interactively, and when you shut
> it down the entire server state would be persisted in a pickle-file;
> when you started it up it would resume exactly as it had been when you
> shut it down.
>

Whoa hang on. Without trying to hijack the thread, this is the entire
premise of infobarb, the IRC bot I'm building for #python-*, except
s/pickle/sqlite/, so if this is a horrible idea I'd like to know before I
build it.

>
> The idea seems to have fallen from grace, possibly because restarting
> a process is often the simplest way to resolve a production problem.
> These days, new Twisted users are encouraged to use Python ".tac" files
> rather than ".tap" pickles, and I expect that sentence is just a relic
> of that bygone era.
>

I suppose the problem you're suggesting is that the pickle is in a state
where running the server is impossible: do you mean like the pickle is
corrupted, or pickle has a bunch of settings that just can't work... ?

Would this problem be fixed by implementing features like differential
snapshots? Maybe a replayable or reverse-replayable event log?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110406/c01a91de/attachment.html>

From screwtape at froup.com  Wed Apr  6 05:27:36 2011
From: screwtape at froup.com (Tim Allen)
Date: Wed, 6 Apr 2011 21:27:36 +1000
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <BANLkTi=dVRpv_yh+8SgCVU=HUagfr7e5YQ@mail.gmail.com>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
	<20110406073027.GP5510@boombah.thristian.org>
	<BANLkTi=dVRpv_yh+8SgCVU=HUagfr7e5YQ@mail.gmail.com>
Message-ID: <20110406112736.GQ5510@boombah.thristian.org>

On Wed, Apr 06, 2011 at 12:41:08PM +0200, Laurens Van Houtven wrote:
> Whoa hang on. Without trying to hijack the thread, this is the entire
> premise of infobarb, the IRC bot I'm building for #python-*, except
> s/pickle/sqlite/, so if this is a horrible idea I'd like to know before I
> build it.

I'm not familiar with the reasons Twistd moved from .tap to .tac (it's
rather before my time), but as a user I'd be worried about things like
"what happens if, due to a bug, the server winds up choking on some
unexpected input, or deadlocked, or just mis-files some piece of state?"
Restarting the process in question is a sledgehammer approach, but
that's often what you want if the alternative is unscheduled downtime.

The difference between Pickle and SQLite is that a SQLite database has
probably had some thought put into its schema, and is much less likely
to accidentally scoop up random other objects by reference. Also, if
your database *does* pick up some unwanted state, you have the option of
tinkering with the database manually; something that's much more
difficult to do with pickles.

I'd be interested in hearing from Twisted greybeards why .tap was
deprecated, but I don't think your IRC bot has a fatal design flaw.



From _ at lvh.cc  Wed Apr  6 05:32:53 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 6 Apr 2011 13:32:53 +0200
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <20110406112736.GQ5510@boombah.thristian.org>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
	<20110406073027.GP5510@boombah.thristian.org>
	<BANLkTi=dVRpv_yh+8SgCVU=HUagfr7e5YQ@mail.gmail.com>
	<20110406112736.GQ5510@boombah.thristian.org>
Message-ID: <BANLkTinw=-vGrMNGOQSsJi+ZGk65J4KfpA@mail.gmail.com>

On Wed, Apr 6, 2011 at 1:27 PM, Tim Allen <screwtape at froup.com> wrote:

> On Wed, Apr 06, 2011 at 12:41:08PM +0200, Laurens Van Houtven wrote:
> > Whoa hang on. Without trying to hijack the thread, this is the entire
> > premise of infobarb, the IRC bot I'm building for #python-*, except
> > s/pickle/sqlite/, so if this is a horrible idea I'd like to know before I
> > build it.
>
> I'm not familiar with the reasons Twistd moved from .tap to .tac (it's
> rather before my time), but as a user I'd be worried about things like
> "what happens if, due to a bug, the server winds up choking on some
> unexpected input, or deadlocked, or just mis-files some piece of state?"
> Restarting the process in question is a sledgehammer approach, but
> that's often what you want if the alternative is unscheduled downtime.


Right -- I don't think this applies to my bot since if it does the argument
can also be extended to "don't have any persistence at all, state is bad"
;-) (It is, but that's not the most pragmatic of answers.)

The difference between Pickle and SQLite is that a SQLite database has
> probably had some thought put into its schema, and is much less likely
> to accidentally scoop up random other objects by reference. Also, if
> your database *does* pick up some unwanted state, you have the option of
> tinkering with the database manually; something that's much more
> difficult to do with pickles.
>

Right -- I'm giving plugins to the bot a SQLite database, it's up to them if
they use it. All state serialization is explicit. I'm hoping it's going to
be more sensible as a result.

I'd be interested in hearing from Twisted greybeards why .tap was
> deprecated, but I don't think your IRC bot has a fatal design flaw.
>

Whew :) Thanks for confirming anyway :)

-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110406/2824c77f/attachment.html>

From itamar at itamarst.org  Wed Apr  6 06:19:46 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 06 Apr 2011 08:19:46 -0400
Subject: [Twisted-Python] Instrumenting Reactors
In-Reply-To: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
References: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
Message-ID: <1302092386.1703.1.camel@blake>

On Wed, 2011-04-06 at 10:55 +0100, Paul Thomas wrote:
> I have a reactor which is getting busier over time and I'd like to
> find out where the cycles are going. Using the profiler isn't really
> practical on a server running for days, so I'd like to instrument the
> reactor to show me which I/O events are taking the longest to deal
> with. 

You may just want to wrap manual profiling code around your code's entry
points (e.g. dataReceived/connectionMade/connectionLost/whatever gets
callLatered). It would be nice if you could get the reactor to turn this
sort of info on/off in a running system, though.




From danb.lists at googlemail.com  Wed Apr  6 06:21:38 2011
From: danb.lists at googlemail.com (Dan-Cristian Bogos)
Date: Wed, 6 Apr 2011 14:21:38 +0200
Subject: [Twisted-Python] AMP Client disconnecting from server on high
	memory usage
Message-ID: <BANLkTinGj7deQF_jhdP4oBYx=w0hc-noFA@mail.gmail.com>

Hey Jean-Paul,

For record's sake, I thought I announce here that my issue got fixed.

The problem was that I was loading the data in startService method and
it looks like there are some timers which prevent the method to block
for a longer period of time. Loading the data in __init__ of
service.Service object did the trick and I have no problem anymore
with large data.

Have a good one!

DanB



From mithrandi at mithrandi.net  Wed Apr  6 06:53:11 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 6 Apr 2011 14:53:11 +0200
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <BANLkTinw=-vGrMNGOQSsJi+ZGk65J4KfpA@mail.gmail.com>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
	<20110406073027.GP5510@boombah.thristian.org>
	<BANLkTi=dVRpv_yh+8SgCVU=HUagfr7e5YQ@mail.gmail.com>
	<20110406112736.GQ5510@boombah.thristian.org>
	<BANLkTinw=-vGrMNGOQSsJi+ZGk65J4KfpA@mail.gmail.com>
Message-ID: <BANLkTikB9ecn1j=SgdSA6mGSv+PXGrQoxA@mail.gmail.com>

On Wed, Apr 6, 2011 at 1:32 PM, Laurens Van Houtven <_ at lvh.cc> wrote:
> On Wed, Apr 6, 2011 at 1:27 PM, Tim Allen <screwtape at froup.com> wrote:
>> The difference between Pickle and SQLite is that a SQLite database has
>> probably had some thought put into its schema, and is much less likely
>> to accidentally scoop up random other objects by reference. Also, if
>> your database *does* pick up some unwanted state, you have the option of
>> tinkering with the database manually; something that's much more
>> difficult to do with pickles.
>
> Right -- I'm giving plugins to the bot a SQLite database, it's up to them if
> they use it. All state serialization is explicit. I'm hoping it's going to
> be more sensible as a result.

For what it's worth, you might find this interesting:

https://launchpad.net/eridanus

It's an IRC bot implemented on Mantissa, which uses Axiom databases
(SQLite under the hood) in order to store and persist service
configuration as well as user data.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From exarkun at twistedmatrix.com  Wed Apr  6 06:58:05 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 06 Apr 2011 12:58:05 -0000
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
Message-ID: <20110406125805.1992.1490470530.divmod.xquotient.221@localhost.localdomain>

On 07:16 am, techtonik at gmail.com wrote:
>Hi again,
>> From http://twistedmatrix.com/documents/current/core/howto/udp.html
>
>"""As you can see, the protocol is registered with the reactor. This 
>means it
>may be persisted if it's added to an application..."""
>
>What does 'persisted` here mean?

As others have pointed out, this is referring to an old feature which is 
being phased out.  It would be great if you could file a ticket for 
cleaning up the docs; they mostly shouldn't talk about application 
persistence (certainly not in the UDP section).

Jean-Paul



From _ at lvh.cc  Wed Apr  6 07:13:00 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 6 Apr 2011 15:13:00 +0200
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <BANLkTikB9ecn1j=SgdSA6mGSv+PXGrQoxA@mail.gmail.com>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
	<20110406073027.GP5510@boombah.thristian.org>
	<BANLkTi=dVRpv_yh+8SgCVU=HUagfr7e5YQ@mail.gmail.com>
	<20110406112736.GQ5510@boombah.thristian.org>
	<BANLkTinw=-vGrMNGOQSsJi+ZGk65J4KfpA@mail.gmail.com>
	<BANLkTikB9ecn1j=SgdSA6mGSv+PXGrQoxA@mail.gmail.com>
Message-ID: <BANLkTimuKsjw2Mo=DFDQMiP34pTCE_79Zg@mail.gmail.com>

Cool, thanks for the link to Eridanus! I hadn't seen it yet :-)


cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110406/397fbc49/attachment-0001.html>

From _ at lvh.cc  Wed Apr  6 07:13:31 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 6 Apr 2011 15:13:31 +0200
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <BANLkTimuKsjw2Mo=DFDQMiP34pTCE_79Zg@mail.gmail.com>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
	<20110406073027.GP5510@boombah.thristian.org>
	<BANLkTi=dVRpv_yh+8SgCVU=HUagfr7e5YQ@mail.gmail.com>
	<20110406112736.GQ5510@boombah.thristian.org>
	<BANLkTinw=-vGrMNGOQSsJi+ZGk65J4KfpA@mail.gmail.com>
	<BANLkTikB9ecn1j=SgdSA6mGSv+PXGrQoxA@mail.gmail.com>
	<BANLkTimuKsjw2Mo=DFDQMiP34pTCE_79Zg@mail.gmail.com>
Message-ID: <BANLkTik+MQ+mWHdAmTKW5PK14YG1Lyk+vA@mail.gmail.com>

Urgh, thanks gmail -- that was supposed to be to mithrandi, not to the
entire mailing list. My apologies.


cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110406/7b573cde/attachment.html>

From p.mayers at imperial.ac.uk  Wed Apr  6 07:25:04 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 06 Apr 2011 14:25:04 +0100
Subject: [Twisted-Python] Instrumenting Reactors
In-Reply-To: <1302092386.1703.1.camel@blake>
References: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
	<1302092386.1703.1.camel@blake>
Message-ID: <4D9C69B0.6030608@imperial.ac.uk>

On 06/04/11 13:19, Itamar Turner-Trauring wrote:
> On Wed, 2011-04-06 at 10:55 +0100, Paul Thomas wrote:
>> I have a reactor which is getting busier over time and I'd like to
>> find out where the cycles are going. Using the profiler isn't really
>> practical on a server running for days, so I'd like to instrument the
>> reactor to show me which I/O events are taking the longest to deal
>> with.
>
> You may just want to wrap manual profiling code around your code's entry
> points (e.g. dataReceived/connectionMade/connectionLost/whatever gets
> callLatered). It would be nice if you could get the reactor to turn this
> sort of info on/off in a running system, though.

I've done this with a decorator & dictionary before, including counting 
time inside deferred return values separately from the original function 
call.



From techtonik at gmail.com  Wed Apr  6 10:06:03 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 6 Apr 2011 19:06:03 +0300
Subject: [Twisted-Python] Instrumenting Reactors
In-Reply-To: <BANLkTi=C1XMCG_W05umNQPM2Wy09V=+GQQ@mail.gmail.com>
References: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
	<BANLkTi=C1XMCG_W05umNQPM2Wy09V=+GQQ@mail.gmail.com>
Message-ID: <BANLkTim4fUwWFnsaj6Mq=sTwTkqbrMMtig@mail.gmail.com>

On Wed, Apr 6, 2011 at 1:35 PM, Laurens Van Houtven <_ at lvh.cc> wrote:
> Hi!
>
>
> No guarantee it's an optimal solution, but when I wanted to inspect a
> running process (which sounds like what you're doing), I had a pretty good
> time with manhole. (If you're not familiar with that: it's in Twisted Conch,
> and it's basically just a way to SSH in to a running box and get a REPL).
>
> In that REPL, you can of course do things like inspect the running reactor
> :-)

It would be nice to be able to attach signals emitters to some parts
of running reactor in real-time. If manhole can allow to attach to
these emitters - it will be possible to visualize them in funny way.
Does anybody know how a twisted reactor model should look like in
Blender? =)
--
anatoly t.



From techtonik at gmail.com  Wed Apr  6 10:59:48 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 6 Apr 2011 19:59:48 +0300
Subject: [Twisted-Python] Persisted protocol?
In-Reply-To: <20110406125805.1992.1490470530.divmod.xquotient.221@localhost.localdomain>
References: <BANLkTimb9ReBwuyyeN9y_=fqh2kwkLim9g@mail.gmail.com>
	<20110406125805.1992.1490470530.divmod.xquotient.221@localhost.localdomain>
Message-ID: <BANLkTima8x4a4f87CkyS=q+-auSBphmhTQ@mail.gmail.com>

On Wed, Apr 6, 2011 at 3:58 PM,  <exarkun at twistedmatrix.com> wrote:
>
> As others have pointed out, this is referring to an old feature which is
> being phased out.  It would be great if you could file a ticket for
> cleaning up the docs; they mostly shouldn't talk about application
> persistence (certainly not in the UDP section).

Tried to do as clear as possible.
http://twistedmatrix.com/trac/ticket/5031
--
anatoly t.



From stephen at thorne.id.au  Wed Apr  6 18:35:18 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu, 7 Apr 2011 10:35:18 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
Message-ID: <20110407003518.GD764@thorne.id.au>

G'day,

So Glyph and I had a discussion about the architecture and
implementation of plugins on IRC this week, I raised some issues that
I've seen with implementing plugins in that discussion, and he said that
I should take the discussion to the list because IRC wasn't the right
place for it.

First of all, a quick discussion of the current plugin architecture, so
that we're on the same page.

'twistd' automatically imports python modules from under twisted/plugins
relative to sys.path[1], or it loads a cache of those plugins from
dropin.cache, or it loads a cache of those plugins from dropin.cache.

The reason it loads all of those plugins is so that 'tapname' and
'description' can be grabbed out of all of the serviceMaker attributes
of all those modules.

Then running 'twistd' shows a helpful list of commands, and 'twistd
$tapname' uses the correct serviceMaker to start whatever service is
specified.

Part of the discussion was about how to rewrite this in such a way that
no python code needs to be run in order to discover all the
tapname+description combinations that are available to twistd, this is
because of a perceived performance and sanity deficit in using 'twistd'.

In the course of the discussion I raised several things that I consider
annoyances in the twisted plugin system. I will repeat them here.

First, the reason i use twisted plugins is because they're the a way to
easily do sensible things with logging, daemonisation and interaction
from init.d files.

* The number of imports required to compose a plugin is annoying. 2
  interfaces from two different packages, plus needing
  zope.interface.implements.

* I've never liked the twisted arg parser, I use it only grudingly, it
  would be nice to be able to throw argv at my make_service call.

* The entire task of having this python plugin is to link up the
  metadata with a more or less standard

* It's very easy to accidentally make your plugin load your package for
  every other twistd daemon running out of the same plugin cache.

* The practice of putting a module under twisted/plugins/$mymodulehere.py
  upsets my equilibrium, the only reason I tolerate this kind of thing
  is that I install my python code via rpms and I automatically get
  installation, ownership and uninstallation done in a stable manner.

For your consideration, and (constructive) critcism, here is a twisted
plugin that is nearly identical to 6 that I have running in production:

from zope.interface import implements
from twisted.python import usage
from twisted.plugin import IPlugin
from twisted.application.service import IServiceMaker

class Options(usage.Options):
    optFlags = [['debug', 'd', 'Emit debug messages']]

class ExampleServiceMaker(object):
    implements(IServiceMaker, IPlugin)
    tapname = 'example'
    description = 'Example Twistd Plugin'
    options = Options

    def makeService(self, options):
        from examplepackage.examplemodule import make_service
        return make_service(debug=options['debug'])

serviceMaker = ExampleServiceMaker()

>From these 19 lines of code there are 4 things that are relevent:
 tapname = example
 description = 'Example Twistd Plugin'
 options = {'debug':True} if args == ['--debug'] else {'debug':False}
 service = examplepackage.examplemodule.make_service(**options)

Only 2 of which are relevent for running a twistd daemon other than
'example'

So the goal of my post to this mailing list is:

* I would like glyph's goal of having less arbitary code executed at
  twistd launch time to become a realisation,

* I would like the process of creating a twisted plugin to be less of a
  cut+paste+fill-in-blanks hassle.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue



From phil at bubblehouse.org  Wed Apr  6 22:06:07 2011
From: phil at bubblehouse.org (Phil Christensen)
Date: Thu, 7 Apr 2011 00:06:07 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407003518.GD764@thorne.id.au>
References: <20110407003518.GD764@thorne.id.au>
Message-ID: <7E980D9E-7A4F-4D1B-9D52-FC84E76E05A7@bubblehouse.org>

On Apr 6, 2011, at 8:35 PM, Stephen Thorne wrote:
> For your consideration, and (constructive) critcism, here is a twisted
> plugin that is nearly identical to 6 that I have running in  
> production:
[snip]
> serviceMaker = ExampleServiceMaker()
>
> From these 19 lines of code there are 4 things that are relevent:
> tapname = example
> description = 'Example Twistd Plugin'
> options = {'debug':True} if args == ['--debug'] else {'debug':False}
> service = examplepackage.examplemodule.make_service(**options)
>
> Only 2 of which are relevent for running a twistd daemon other than
> 'example'
>
> So the goal of my post to this mailing list is:
>
> * I would like glyph's goal of having less arbitary code executed at
>  twistd launch time to become a realisation,

Makes sense. My first inclination is to suggest creating metadata  
files that are found via pkg_resources.

> * I would like the process of creating a twisted plugin to be less  
> of a
>  cut+paste+fill-in-blanks hassle.

This doesn't bother me so much. To go back in time a bit:

> First, the reason i use twisted plugins is because they're the a way  
> to
> easily do sensible things with logging, daemonisation and interaction
> from init.d files.
>
> * The number of imports required to compose a plugin is annoying. 2
>  interfaces from two different packages, plus needing
>  zope.interface.implements.
>
> * I've never liked the twisted arg parser, I use it only grudingly, it
>  would be nice to be able to throw argv at my make_service call.

I've got no issues with t.p.usage, and tend to keep its definitions in  
the plugin class. But I agree you should be able to skip it, although  
I have a suspicion you probably already can by being sneaky.

> * The entire task of having this python plugin is to link up the
>  metadata with a more or less standard

Not sure if I get this part. I tend to think of plugins as the service  
bootstrap file, like an int main(). I would probably *not* be into the  
idea of passing sys.argv directly to a service, for example.

> * It's very easy to accidentally make your plugin load your package  
> for
>  every other twistd daemon running out of the same plugin cache.

Never had this happen, but I think I can see where it might. It would  
be solved by some kind of external metadata, though, right?

> * The practice of putting a module under twisted/plugins/ 
> $mymodulehere.py
>  upsets my equilibrium, the only reason I tolerate this kind of thing
>  is that I install my python code via rpms and I automatically get
>  installation, ownership and uninstallation done in a stable manner.

The only issue I've found with this is the issue of having to create  
plugin cache files. Apart from the spurious error messages that were  
(partially?) covered at the sprint recently, the benefit they provide  
is definitely negated by bad permissions. I've done some acrobatics  
inside my setup.py to make it work, but it involves different steps  
depending on whether you're installing or building a package.

Still, it seems like most of their necessity would be negated by using  
external metadata files. It seems to be the way most plugin systems  
end up going in some way or another.

Anyways, that's just my 2/100ths. I'm pretty happy with most of the  
plugin model, but I think there's a lot of room for improvement,  
particularly in the area of dropin.cache files.

-phil



From screwtape at froup.com  Wed Apr  6 22:31:11 2011
From: screwtape at froup.com (Tim Allen)
Date: Thu, 7 Apr 2011 14:31:11 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407003518.GD764@thorne.id.au>
References: <20110407003518.GD764@thorne.id.au>
Message-ID: <20110407043111.GS5510@boombah.thristian.org>

On Thu, Apr 07, 2011 at 10:35:18AM +1000, Stephen Thorne wrote:
> So the goal of my post to this mailing list is:
> 
> * I would like glyph's goal of having less arbitary code executed at
>   twistd launch time to become a realisation,
> 
> * I would like the process of creating a twisted plugin to be less of a
>   cut+paste+fill-in-blanks hassle.

I notice that Tarek Ziadé's "distutils2" is moving away from "load
a Python module and probe for well-known attributes" toward "define all
metadata in a static file". It sounds like you want a similar thing for
twistd plugins. Perhaps an implementation might look something like
this:

    - At startup, twistd scans twisted/plugin directories on sys.path
      looking for files whose filenames end with '.twistd'.
    - Each such file is loaded with Python's ConfigParser module.
    - Each section in the ConfigParser module represents a plugin whose
      'tapname' is the section name.
    - Each section has a 'description' option, whose value is
      a human-readable string describing the plugin.
    - Each section has a 'module' option, whose value is a string that
      can be passed to Python's __import__ builtin to get a Python
      module.

...where the module defined by 'module' exposes a
'make_service(options)' function, and an 'options' global variable that
is an instance of t.p.usage.Options.

I know you said you didn't like t.p.usage.Options, but I'd be sad to
lose the ability for twistd to support "twistd $PLUGIN --help", and for
that kind of introspection to work, the options data needs to be in
*some* known format. Maybe this might be the time to move to the
stdlib's optparse - or maybe not, now that optparse is (presumably)
deprecated in favour of argparse. Maybe twistd could examine a number of
different well-known variable-names, for different option-parsing
libraries.

Just tossing this out as a strawman for people to point and laugh at.



From glyph at twistedmatrix.com  Wed Apr  6 22:54:45 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 00:54:45 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407043111.GS5510@boombah.thristian.org>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
Message-ID: <0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>


On Apr 7, 2011, at 12:31 AM, Tim Allen wrote:

> On Thu, Apr 07, 2011 at 10:35:18AM +1000, Stephen Thorne wrote:
>> So the goal of my post to this mailing list is:
>> 
>> * I would like glyph's goal of having less arbitary code executed at
>>  twistd launch time to become a realisation,
>> 
>> * I would like the process of creating a twisted plugin to be less of a
>>  cut+paste+fill-in-blanks hassle.
> 
> I notice that Tarek Ziadé's "distutils2" is moving away from "load
> a Python module and probe for well-known attributes" toward "define all
> metadata in a static file". It sounds like you want a similar thing for
> twistd plugins. Perhaps an implementation might look something like
> this:
> 
>    - At startup, twistd scans twisted/plugin directories on sys.path
>      looking for files whose filenames end with '.twistd'.

While I'm sympathetic to the goal here, I don't like this particular implementation strategy for several reasons.

Right now, in order to properly install a 'twistd' plugin (including those that come with Twisted), you have to do two things:

  1. install some .py files into a package
  2. as the user doing the installation (probably root), run the one-liner at the bottom of <http://twistedmatrix.com/documents/11.0.0/core/howto/plugin.html#auto3>.  If invoking python code in your installation process is too hard, this can be approximated with 'twistd --help 2>&1 > /dev/null'.

This is rocket science.  Nobody can manage it.  Seriously.  After literally _years_ of fighting with conflicting python installation techniques in Debian and Ubuntu, I think that we finally have something that works about half of the time.  I haven't checked up on RedHat in a while and I don't know if they have a working system to do this yet, but they didn't last I checked.

If we invent our own file extension which has to be separately installed, we have to teach distutils, and setuptools, and distribute, and pip, and distutils2, and 'packaging' (as I'm sure that will eventually be incompatible with distutils2 for some silly reason), and easy_install, and dpkg, and rpm, and yum, and apt, and probably five other horrible Python packaging things that I don't even know about yet, how to deal with it.  So I am strongly in favor of keeping everything in .py files and just making a minor tweak to what's stored in dropin.cache (and perhaps allowing dropin.cache to be stored in some location more likely to be writable by individual users, in case the installation process doesn't update it).

Because, frankly, Python installation tools REALLY REALLY SHOULD be able to install Python files into Python packages.  I'm not sure I can make any other assertions quite so strongly.  I'm pretty sure that this is a problem that more than one project is interested in solving.  No other projects are interested in installing '.twistd' files though, I can assure you of that :).

>    - Each such file is loaded with Python's ConfigParser module.

The first rule of the Twisted cabal is of course "don't talk about the Twisted cabal", but the second and possibly even more important rule is "no '.ini' files".  I'd seriously much rather we use XML.  And you can ask Stephen how he feels about XML configuration files.  (Although I'd strongly recommend standing well clear of him when you do that, and making sure that no sharp or otherwise dangerous objects are within easy reach.)

>    - Each section blah blah terrible user interface stuff about 'sections' and other misfeatures of ini files.

I don't want a solution that is hard-coded to deal with the metadata that 'twistd' specifically needs, as Twisted plugins are already used for more than just twistd plugins, and I'd like them to be used for even more.  An interface that limits the metadata to ConfigParser sections would make it awkward to fit into a management GUI or web page.

Plus, the quoting rules for long strings in ini files make it unsuitable for storing long descriptive strings (which is one of the primary use-cases here).

> ...where the module defined by 'module' exposes a
> 'make_service(options)' function, and an 'options' global variable that
> is an instance of t.p.usage.Options.
> 
> I know you said you didn't like t.p.usage.Options, but I'd be sad to
> lose the ability for twistd to support "twistd $PLUGIN --help", and for
> that kind of introspection to work, the options data needs to be in
> *some* known format. Maybe this might be the time to move to the
> stdlib's optparse - or maybe not, now that optparse is (presumably)
> deprecated in favour of argparse. Maybe twistd could examine a number of
> different well-known variable-names, for different option-parsing
> libraries.

For what it's worth, I don't care about this at all.  It's a completely separate issue from the main stuff I care about, and while we should be able to simply delegate to a function that takes a list of strings, I will insist that we fix that separately.

> Just tossing this out as a strawman for people to point and laugh at.

Ha, ha ha ha.  (point).

Thanks for the feedback though.  These are all very common suggestions, and I'm glad for the opportunity to point out why we haven't already done them.

So as not to make this message too long, I'll defer a description my own preferred implementation strategy for a future post to this thread.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110407/8cfa7cc7/attachment.html>

From glyph at twistedmatrix.com  Wed Apr  6 23:03:20 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 01:03:20 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <7E980D9E-7A4F-4D1B-9D52-FC84E76E05A7@bubblehouse.org>
References: <20110407003518.GD764@thorne.id.au>
	<7E980D9E-7A4F-4D1B-9D52-FC84E76E05A7@bubblehouse.org>
Message-ID: <66ADB913-33F0-4008-8934-BB7BED16679B@twistedmatrix.com>


On Apr 7, 2011, at 12:06 AM, Phil Christensen wrote:

> On Apr 6, 2011, at 8:35 PM, Stephen Thorne wrote:
>> For your consideration, and (constructive) critcism, here is a twisted
>> plugin that is nearly identical to 6 that I have running in  
>> production:
> [snip]
>> serviceMaker = ExampleServiceMaker()
>> 
>> From these 19 lines of code there are 4 things that are relevent:
>> tapname = example
>> description = 'Example Twistd Plugin'
>> options = {'debug':True} if args == ['--debug'] else {'debug':False}
>> service = examplepackage.examplemodule.make_service(**options)
>> 
>> Only 2 of which are relevent for running a twistd daemon other than
>> 'example'
>> 
>> So the goal of my post to this mailing list is:
>> 
>> * I would like glyph's goal of having less arbitary code executed at
>> twistd launch time to become a realisation,
> 
> Makes sense. My first inclination is to suggest creating metadata  
> files that are found via pkg_resources.

We already use a similar mechanism, twisted.python.modules, which uses the same underlying standards as pkg_resources (PEP 302) but is somewhat more flexible.  And we create a metadata file (dropin.cache) which is stored and retrieved using this mechanism.

>> * The entire task of having this python plugin is to link up the
>> metadata with a more or less standard
> 
> Not sure if I get this part. I tend to think of plugins as the service  
> bootstrap file, like an int main(). I would probably *not* be into the  
> idea of passing sys.argv directly to a service, for example.

Why not?  It's just a list of strings.  You should be able to deal with it how you like.  (But as I said in a previous message: this is a separate issue.)

>> * It's very easy to accidentally make your plugin load your package  
>> for every other twistd daemon running out of the same plugin cache.
> 
> Never had this happen, but I think I can see where it might. It would  
> be solved by some kind of external metadata, though, right?

It already is solved by the external metadata... sort of.  If you look at the implementation of CachedPlugin, you can see that it actually already has a name and description!  There are two problems though: first is that this is hard-coded to be the module's name and docstring, but more importantly, there's just no way to get at those attributes via the getPlugin interface, which implicitly invokes '__conform__' via adaptation (and therefore load()).

> * The practice of putting a module under twisted/plugins/ 
>> $mymodulehere.py
>> upsets my equilibrium, the only reason I tolerate this kind of thing
>> is that I install my python code via rpms and I automatically get
>> installation, ownership and uninstallation done in a stable manner.
> 
> The only issue I've found with this is the issue of having to create  
> plugin cache files. Apart from the spurious error messages that were  
> (partially?) covered at the sprint recently, the benefit they provide  
> is definitely negated by bad permissions. I've done some acrobatics  
> inside my setup.py to make it work, but it involves different steps  
> depending on whether you're installing or building a package.

What is "this kind of thing", though?  The plugins have to go in some defined namespace in order to be enumerated.  Even if we were to implement something based on purely static metadata, you'd still have to list a directory to get at that metadata.  Making the namespace be owned by the module doing the importing makes sense.

For what it's worth, bzrlib does this too, but by convention in a bzr plugin you put _all_ your code into bzrlib/plugins/foo/*.py, and your package is bzrlib.plugins.foo.  (This will work fine with Twisted if you want to do it that way.)

> Still, it seems like most of their necessity would be negated by using  
> external metadata files. It seems to be the way most plugin systems  
> end up going in some way or another.

dropin.cache is an external metadata file ;-).

> Anyways, that's just my 2/100ths. I'm pretty happy with most of the  
> plugin model, but I think there's a lot of room for improvement,  
> particularly in the area of dropin.cache files.

Thanks for your feedback.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110407/08426123/attachment.html>

From screwtape at froup.com  Wed Apr  6 23:08:57 2011
From: screwtape at froup.com (Tim Allen)
Date: Thu, 7 Apr 2011 15:08:57 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
Message-ID: <20110407050857.GT5510@boombah.thristian.org>

On Thu, Apr 07, 2011 at 12:54:45AM -0400, Glyph Lefkowitz wrote:
> If we invent our own file extension which has to be separately
> installed, we have to teach distutils, and setuptools, and distribute,
> and pip, and distutils2, and 'packaging' (as I'm sure that will
> eventually be incompatible with distutils2 for some silly reason), and
> easy_install, and dpkg, and rpm, and yum, and apt, and probably five
> other horrible Python packaging things that I don't even know about
> yet, how to deal with it.  So I am strongly in favor of keeping
> everything in .py files and just making a minor tweak to what's stored
> in dropin.cache (and perhaps allowing dropin.cache to be stored in
> some location more likely to be writable by individual users, in case
> the installation process doesn't update it).

My understanding was that .py files have to be installed into
twisted/plugins as binary blobs, not as ordinary Python modules, because
of special rules like "twisted/plugins must not be a Python package". If
distutils/setuptools/etc. can handle a binary blob with a ".py"
extension, I figured it could handle a binary blob with any other
extension.

If that's wrong, then yeah, I guess that would be a problem.

> >    - Each such file is loaded with Python's ConfigParser module.
> 
> The first rule of the Twisted cabal is of course "don't talk about the
> Twisted cabal", but the second and possibly even more important rule
> is "no '.ini' files".  I'd seriously much rather we use XML.  And you
> can ask Stephen how he feels about XML configuration files.  (Although
> I'd strongly recommend standing well clear of him when you do that,
> and making sure that no sharp or otherwise dangerous objects are
> within easy reach.)

Well, the nice thing about ConfigParser is that it's in the stdlib, and
people already know how to create them, and rolling
yet-another-config-file-format seems crazy in this day and age.

If you need a non-Turing-complete config language and rule out .ini and
XML, I'm not sure what's left. JSON, perhaps.

> I don't want a solution that is hard-coded to deal with the metadata
> that 'twistd' specifically needs, as Twisted plugins are already used
> for more than just twistd plugins, and I'd like them to be used for
> even more.

I've never actually come across anything that used Twisted plugins
besides twistd, so I'd forgotten they weren't twistd-specific.

> So as not to make this message too long, I'll defer a description my
> own preferred implementation strategy for a future post to this
> thread.

I'll look forward to it. :)

Tim.



From stephen at thorne.id.au  Wed Apr  6 23:38:34 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu, 7 Apr 2011 15:38:34 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
Message-ID: <20110407053834.GE764@thorne.id.au>

On 2011-04-07, Glyph Lefkowitz wrote:
> Because, frankly, Python installation tools REALLY REALLY SHOULD be
> able to install Python files into Python packages.  I'm not sure I can
> make any other assertions quite so strongly.  I'm pretty sure that
> this is a problem that more than one project is interested in solving.
> No other projects are interested in installing '.twistd' files though,
> I can assure you of that :).

This is entirely wrong. Python installation tools are barely capable of
putting entire existing working python packages into a directory that if
you mumble rhymes with "kite smackages".

To expect installation tools to be able to put a python-script into a
nested subdirectory of an entirely different subtree without putting
in __init__.py files, and working with .pth files, and not being insane,
you have to hack things.

kite-smackages/twisted/plugins/myplugin.py installed with any standard
tool without simply hard-coding is a disaster. Putting it outside of
that directory, more so.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue



From glyph at twistedmatrix.com  Wed Apr  6 23:45:34 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 01:45:34 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407053834.GE764@thorne.id.au>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407053834.GE764@thorne.id.au>
Message-ID: <551DEF70-0B19-4E3C-B201-61B058AC05E7@twistedmatrix.com>


On Apr 7, 2011, at 1:38 AM, Stephen Thorne wrote:

> On 2011-04-07, Glyph Lefkowitz wrote:
>> Because, frankly, Python installation tools REALLY REALLY SHOULD be
>> able to install Python files into Python packages.  I'm not sure I can
>> make any other assertions quite so strongly.  I'm pretty sure that
>> this is a problem that more than one project is interested in solving.
>> No other projects are interested in installing '.twistd' files though,
>> I can assure you of that :).
> 
> This is entirely wrong. Python installation tools are barely capable of
> putting entire existing working python packages into a directory that if
> you mumble rhymes with "kite smackages".

This is why I said "should".  Python installation tools are basically incapable of anything.  And yet.

My point is that it's hard enough to advocate for bugs to be fixed in installing .py files; let's focus on that, and avoid installing other stuff.




From glyph at twistedmatrix.com  Wed Apr  6 23:46:51 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 01:46:51 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407050857.GT5510@boombah.thristian.org>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407050857.GT5510@boombah.thristian.org>
Message-ID: <78527A74-42EB-4004-900E-13C4F2450C21@twistedmatrix.com>


On Apr 7, 2011, at 1:08 AM, Tim Allen wrote:

> Well, the nice thing about ConfigParser is that it's in the stdlib, and
> people already know how to create them, and rolling
> yet-another-config-file-format seems crazy in this day and age.

My point was really that people think they know how to create these, but actually they don't.  Pop quiz, hot shot: what is the quoting rule to put a linebreak with preserved trailing whitespace into a value in a .ini file?  Into a key?

> If you need a non-Turing-complete config language and rule out .ini and
> XML, I'm not sure what's left. JSON, perhaps.

Pickle, of course.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110407/827b8295/attachment.html>

From mithrandi at mithrandi.net  Wed Apr  6 23:53:45 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 7 Apr 2011 07:53:45 +0200
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
Message-ID: <BANLkTik8HkQL8Cyp-XTOUD9AesZ1XjmZFA@mail.gmail.com>

On 7 Apr 2011 06:56, "Glyph Lefkowitz" <glyph at twistedmatrix.com> wrote:
>>    - Each section blah blah terrible user interface stuff about
'sections' and other misfeatures of ini files.
>
>
> I don't want a solution that is hard-coded to deal with the metadata that
'twistd' specifically needs, as Twisted plugins are already used for more
than just twistd plugins, and I'd like them to be used for even more.  An
interface that limits the metadata to ConfigParser sections would make it
awkward to fit into a management GUI or web page.

I'd like to jump in with a +1000 here. I have literally written over 1000
plugins[1] using twisted.plugin, and not one of them was a twistd plugin. I
would very much like to take advantage of any improvements in this area in
my own projects.

[1]
http://bazaar.launchpad.net/~dosage-dev/dosage/trunk/files/head:/dosage/plugins/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110407/97a6e621/attachment.html>

From stephen at thorne.id.au  Wed Apr  6 23:54:28 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu, 7 Apr 2011 15:54:28 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <551DEF70-0B19-4E3C-B201-61B058AC05E7@twistedmatrix.com>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407053834.GE764@thorne.id.au>
	<551DEF70-0B19-4E3C-B201-61B058AC05E7@twistedmatrix.com>
Message-ID: <20110407055428.GF764@thorne.id.au>

On 2011-04-07, Glyph Lefkowitz wrote:
> 
> On Apr 7, 2011, at 1:38 AM, Stephen Thorne wrote:
> 
> > On 2011-04-07, Glyph Lefkowitz wrote:
> >> Because, frankly, Python installation tools REALLY REALLY SHOULD be
> >> able to install Python files into Python packages.  I'm not sure I can
> >> make any other assertions quite so strongly.  I'm pretty sure that
> >> this is a problem that more than one project is interested in solving.
> >> No other projects are interested in installing '.twistd' files though,
> >> I can assure you of that :).
> > 
> > This is entirely wrong. Python installation tools are barely capable of
> > putting entire existing working python packages into a directory that if
> > you mumble rhymes with "kite smackages".
> 
> This is why I said "should".  Python installation tools are basically
> incapable of anything.  And yet.
> 
> My point is that it's hard enough to advocate for bugs to be fixed in
> installing .py files; let's focus on that, and avoid installing other
> stuff.

Everything has the capability to put datafiles somewhere, even if the
location offset is annoying. In fact, most tools are /better/ at
installing arbitary files that don't have a first line of #!python or
.py extension than files that do.

For this reason, a static configuration file, such as a hand crafted
pickle, an xml file, or an ini file, is a reasonably viable alternative.

I hesitate to suggest it, but a .pth file or a setuptools entrypoint may
be an option here too for inserting plugins without writing to a doubly
nested non-package twisted ''package'' plugins directory.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue



From stephen at thorne.id.au  Wed Apr  6 23:55:50 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu, 7 Apr 2011 15:55:50 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <78527A74-42EB-4004-900E-13C4F2450C21@twistedmatrix.com>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407050857.GT5510@boombah.thristian.org>
	<78527A74-42EB-4004-900E-13C4F2450C21@twistedmatrix.com>
Message-ID: <20110407055550.GG764@thorne.id.au>

On 2011-04-07, Glyph Lefkowitz wrote:
> 
> On Apr 7, 2011, at 1:08 AM, Tim Allen wrote:
> 
> > Well, the nice thing about ConfigParser is that it's in the stdlib, and
> > people already know how to create them, and rolling
> > yet-another-config-file-format seems crazy in this day and age.
> 
> My point was really that people think they know how to create these,
> but actually they don't.  Pop quiz, hot shot: what is the quoting rule
> to put a linebreak with preserved trailing whitespace into a value in
> a .ini file?  Into a key?

Reality check. This are the plugins that are currently shipped:

    ftp              An FTP server.
    telnet           A simple, telnet-based remote debugging service.
    socks            A SOCKSv4 proxy service.
    manhole-old      An interactive remote debugger service.
    portforward      A simple port-forwarder.
    web              A general-purpose web server which can serve from a
                     filesystem or application resource.
    inetd            An inetd(8) replacement.
    news             A news server.
    xmpp-router      An XMPP Router server
    words            A modern words server
    dns              A domain name server.
    mail             An email service
    manhole          An interactive remote debugger service accessible via
                     telnet and ssh and providing syntax coloring and basic line
                     editing functionality.
    conch            A Conch SSH service.
    procmon          A process watchdog / supervisor

Why do we care about complex quoting and linebreaks for descriptions? If
you can't remember, just keep typing and let it get wrapped.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue



From glyph at twistedmatrix.com  Thu Apr  7 00:04:41 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 02:04:41 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407055550.GG764@thorne.id.au>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407050857.GT5510@boombah.thristian.org>
	<78527A74-42EB-4004-900E-13C4F2450C21@twistedmatrix.com>
	<20110407055550.GG764@thorne.id.au>
Message-ID: <9560C7DF-C93E-4788-B8E9-9CF230D1CC35@twistedmatrix.com>


On Apr 7, 2011, at 1:55 AM, Stephen Thorne wrote:

> On 2011-04-07, Glyph Lefkowitz wrote:
>> 
>> On Apr 7, 2011, at 1:08 AM, Tim Allen wrote:
>> 
>>> Well, the nice thing about ConfigParser is that it's in the stdlib, and
>>> people already know how to create them, and rolling
>>> yet-another-config-file-format seems crazy in this day and age.
>> 
>> My point was really that people think they know how to create these,
>> but actually they don't.  Pop quiz, hot shot: what is the quoting rule
>> to put a linebreak with preserved trailing whitespace into a value in
>> a .ini file?  Into a key?
> 
> Reality check. This are the plugins that are currently shipped:
> 
>    ftp              An FTP server.
>    telnet           A simple, telnet-based remote debugging service.
>    socks            A SOCKSv4 proxy service.
>    manhole-old      An interactive remote debugger service.
>    portforward      A simple port-forwarder.
>    web              A general-purpose web server which can serve from a
>                     filesystem or application resource.
>    inetd            An inetd(8) replacement.
>    news             A news server.
>    xmpp-router      An XMPP Router server
>    words            A modern words server
>    dns              A domain name server.
>    mail             An email service
>    manhole          An interactive remote debugger service accessible via
>                     telnet and ssh and providing syntax coloring and basic line
>                     editing functionality.
>    conch            A Conch SSH service.
>    procmon          A process watchdog / supervisor
> 
> Why do we care about complex quoting and linebreaks for descriptions? If
> you can't remember, just keep typing and let it get wrapped.

None of those descriptions have non-ASCII characters in there either, but that doesn't mean I want to standardize on a format where I can't figure out how to type them.  I would like to provide more flexibility with a simpler API, not less flexibility and more complexity.




From glyph at twistedmatrix.com  Thu Apr  7 00:08:00 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 02:08:00 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407003518.GD764@thorne.id.au>
References: <20110407003518.GD764@thorne.id.au>
Message-ID: <F7230F88-2DFD-4B41-B2D5-9CE9D88819FA@twistedmatrix.com>


On Apr 6, 2011, at 8:35 PM, Stephen Thorne wrote:

> Part of the discussion was about how to rewrite this in such a way that
> no python code needs to be run in order to discover all the
> tapname+description combinations that are available to twistd, this is
> because of a perceived performance and sanity deficit in using 'twistd'.

My interest in this discussion is not so much in "no python code should be executed" but rather "the current constraints of the system should be preserved (your whole package doesn't get imported) but you shouldn't have to write hacks like ServiceMaker (<http://twistedmatrix.com/documents/11.0.0/api/twisted.application.service.ServiceMaker.html>)to preserve them".  Or, for that matter, do inner imports, like this one from your example:

>    def makeService(self, options):
>        from examplepackage.examplemodule import make_service
>        return make_service(debug=options['debug'])


Someone unfamiliar with the Twisted plugin system would probably not realize that the positioning of that import is critically important.  It seems kind of random, and maybe sloppy, and a refactoring for stylistic fixes might move it to the top of the module.

Of course, such a refactoring would make 'twistd --help' on any system with your code installed start executing gobs and gobs of additional code.  Also, as a result of such a change, every 'twistd' server on such a system would have your entire examplepackage.examplemodule imported, silently of course, increasing their memory footprint and so on.

As I have mentioned in other parts of this mailing list thread, there's already some caching going on, but it's never used.  Observe:

glyph at ... twisted/plugins$ python
Python 2.6.1 (...)
>>> from cPickle import load
>>> plugins = load(file('dropin.cache'))
>>> plugins['twisted_names'].plugins
[<CachedPlugin 'TwistedNames'/'twisted.plugins.twisted_names' (provides 'IPlugin, IServiceMaker')>]
>>> plugins['twisted_names'].plugins[0].name
'TwistedNames'
>>> plugins['twisted_names'].plugins[0].description
'\n    Utility class to simplify the definition of L{IServiceMaker} plugins.\n    '
>>> plugins['twisted_names'].plugins[0].provided
[<InterfaceClass twisted.plugin.IPlugin>, <InterfaceClass twisted.application.service.IServiceMaker>]
>>> import sys
>>> 'twisted.plugins' in sys.modules
False

The problem with this is that once you've loaded the plugins, you can't see it any more:

>>> from twisted.plugin import getPlugins
>>> from twisted.application.service import IServiceMaker
>>> allPlugins = list(getPlugins(IServiceMaker))
>>> plugin = [p for p in allPlugins if p.tapname == 'dns'][0]
>>> plugin.description
'A domain name server.'
>>> plugin.name
'Twisted DNS Server'

Those are the 'name' and 'description' attributes from the IServiceMaker provider, already implicitly loaded by getPlugins.  You can't see the CachedPlugin any more.

So, here's an idea, very similar to the one on the ticket.  Keeping in mind the state described above, hopefully it will communicate my idea better.

Right now, IPlugin is purely a marker.  It provides no methods.  I propose a new subinterface (designed to eventually replace it), IPlugin2, with one method, 'metadata()', that returns a dictionary mapping strings to strings.  This _could_ be any object, limited only by what we think is a good idea to allow serializing.  The second method would be 'willProvide(I)' which returns a boolean, whether the result of load() will provide the interface 'I'.

Then there's a helper which you inherit which looks like:

class Plugin2(object):
    implements(IPlugin2)
    def metadata(self):
        raise NotImplementedError("your metadata here")
    def willProvide(self, I):
        return I.providedBy(self)
    def load(self):
        return self

The one rule here is that 'metadata()' must always return the same value for a particular version of the code.  We will then serialize the metadata from calling metadata() into dropin.cache, and expose it to application code.

My idea for exposing it is that if you then do 'getPlugins(IPlugin2)', you will get back an iterable of IPlugin2 providers, but not necessarily instances of your classes: they could be cached plugins, with cached results for metadata() and willProvide() - the latter based on the list currently saved as the 'provided' attribute.  So a loop like this to load a twistd plugin by name:

def twistdPluginByTapname(name):
    for p2 in getPlugins(IPlugin2):
        if p2.willProvide(IServiceMaker) and p2.metadata()['tapname'] == name:
            return p2.load()

... would not actually load any plugins, but work entirely from the cached metadata.  Since you wouldn't be loading the plugin except to actually invoke its dynamic behavior, we would no longer need ServiceMaker, just an instance of the actual IServiceMaker plugin, with no local imports or anything.

This would at least partially address one of your complaints, Stephen, in that it would mean that a plugin could be defined with 2 lines: import your class, and create an instance of it.  Of course you'd still need boilerplate somewhere, but it would be possible to put a big pile of them in one place, or define some common stuff in a utility module, and not need to dance around avoiding importing it.

As a separate consideration, once this API is in place, it isn't all that important that we generate that initial metadata by importing the Python code the way that we do now.  The metadata could be manually specified.  I think that would be a good first step, but we could, for example, put the metadata in some human-readable format rather than pickle.  JSON, I guess, is what's hip with the kids these days.  Or, if you philistines really won't quit, an .ini file.  But don't tell me I didn't warn you ;-).

The actual list of plugins could be generated from these data files as well.  But, if we were to put this kind of extra metadata into a data file right now, the current API wouldn't give you any way to access it.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110407/d4e5976d/attachment.html>

From david at silveregg.co.jp  Thu Apr  7 00:24:57 2011
From: david at silveregg.co.jp (David)
Date: Thu, 07 Apr 2011 15:24:57 +0900
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407050857.GT5510@boombah.thristian.org>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407050857.GT5510@boombah.thristian.org>
Message-ID: <4D9D58B9.6030307@silveregg.co.jp>

On 04/07/2011 02:08 PM, Tim Allen wrote:

>
> If you need a non-Turing-complete config language and rule out .ini and
> XML, I'm not sure what's left. JSON, perhaps.

Having had experience with JSON for configuration: it is a terrible 
format for configuration, if only because it does not support comments.

The syntax is also a bit too strict: enough to be annoying in something 
you want to edit all the time and easily in my experience.

cheers,

David




From tim at commsecure.com.au  Thu Apr  7 00:34:10 2011
From: tim at commsecure.com.au (Tim Allen)
Date: Thu, 7 Apr 2011 16:34:10 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4D9D58B9.6030307@silveregg.co.jp>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407050857.GT5510@boombah.thristian.org>
	<4D9D58B9.6030307@silveregg.co.jp>
Message-ID: <20110407063410.GA23062@ws35.commsecure.com.au>

On Thu, Apr 07, 2011 at 03:24:57PM +0900, David wrote:
> On 04/07/2011 02:08 PM, Tim Allen wrote:
> > If you need a non-Turing-complete config language and rule out .ini and
> > XML, I'm not sure what's left. JSON, perhaps.
> 
> Having had experience with JSON for configuration: it is a terrible 
> format for configuration, if only because it does not support comments.
> 
> The syntax is also a bit too strict: enough to be annoying in something 
> you want to edit all the time and easily in my experience.

Well, that's pretty depressing. The only other candidate I can even
think of is YAML, and that's not in the standard library (as far as
I know).

Who'd have guessed it'd be so complicated to associate keys with values?



From david at silveregg.co.jp  Thu Apr  7 00:38:57 2011
From: david at silveregg.co.jp (David)
Date: Thu, 07 Apr 2011 15:38:57 +0900
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407063410.GA23062@ws35.commsecure.com.au>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407050857.GT5510@boombah.thristian.org>
	<4D9D58B9.6030307@silveregg.co.jp>
	<20110407063410.GA23062@ws35.commsecure.com.au>
Message-ID: <4D9D5C01.1060605@silveregg.co.jp>

On 04/07/2011 03:34 PM, Tim Allen wrote:

>
> Who'd have guessed it'd be so complicated to associate keys with values?

If that's the only thing you need, .ini would work fine. Another 
solution would be python files with only literals, parsed through the 
ast module for safety.

cheers,

David



From michaelnt at gmail.com  Thu Apr  7 00:45:43 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Thu, 7 Apr 2011 07:45:43 +0100
Subject: [Twisted-Python] Instrumenting Reactors
In-Reply-To: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
References: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
Message-ID: <BANLkTim2-NbXUpJKvJxLTz5_n01JYUy7Ow@mail.gmail.com>

On 6 April 2011 10:55, Paul Thomas <spongelavapaul at googlemail.com> wrote:
> Should I just hack into the reactor somewhere? Or is there something sitting in a library I haven't seen that will help with this?

You can time blocking calls by instrumenting
twisted.python.log.callWithContext and you could try writing the
timing info to something fast, like Redis.

Michael



From johan.rydberg at edgeware.tv  Thu Apr  7 03:22:02 2011
From: johan.rydberg at edgeware.tv (Johan Rydberg)
Date: Thu, 07 Apr 2011 11:22:02 +0200
Subject: [Twisted-Python] Asynchronous context in Twisted
In-Reply-To: <AANLkTika=xCxs1qmo2jZ2tFXSYJjUGtPqOpzacHcCE53@mail.gmail.com>
References: <AANLkTikX_wkb5-jgmxQ7Y-3_ENurHS-COTOfBQN=vGX4@mail.gmail.com>
	<AANLkTika=xCxs1qmo2jZ2tFXSYJjUGtPqOpzacHcCE53@mail.gmail.com>
Message-ID: <4D9D823A.6010402@edgeware.tv>

Something like this would be awesome to have in Twisted.




From johan.rydberg at edgeware.tv  Thu Apr  7 03:35:32 2011
From: johan.rydberg at edgeware.tv (Johan Rydberg)
Date: Thu, 07 Apr 2011 11:35:32 +0200
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4D9D58B9.6030307@silveregg.co.jp>
References: <20110407003518.GD764@thorne.id.au>	<20110407043111.GS5510@boombah.thristian.org>	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>	<20110407050857.GT5510@boombah.thristian.org>
	<4D9D58B9.6030307@silveregg.co.jp>
Message-ID: <4D9D8564.9050502@edgeware.tv>

On 4/7/11 8:24 AM, David wrote:
> Having had experience with JSON for configuration: it is a terrible
> format for configuration, if only because it does not support comments.
>
> The syntax is also a bit too strict: enough to be annoying in something
> you want to edit all the time and easily in my experience.
>    
I agree.  We use json as config-file format from time to time, but it 
always end up hurting
you.

I therefor hacked up this little library: 
https://github.com/edgeware/structprop




From jrennie at gmail.com  Thu Apr  7 06:02:01 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Thu, 7 Apr 2011 08:02:01 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407063410.GA23062@ws35.commsecure.com.au>
References: <20110407003518.GD764@thorne.id.au>
	<20110407043111.GS5510@boombah.thristian.org>
	<0EC2C32E-05FD-48ED-85DF-900ED6F0EA2C@twistedmatrix.com>
	<20110407050857.GT5510@boombah.thristian.org>
	<4D9D58B9.6030307@silveregg.co.jp>
	<20110407063410.GA23062@ws35.commsecure.com.au>
Message-ID: <BANLkTimdpCCiPfjFYKH0At0Ti1GZbnYKag@mail.gmail.com>

On Thu, Apr 7, 2011 at 2:34 AM, Tim Allen <tim at commsecure.com.au> wrote:

> Well, that's pretty depressing. The only other candidate I can even
> think of is YAML, and that's not in the standard library (as far as
> I know).
>

There's Coil, but it's also not in the std lib AFAIK:

http://mike.marineau.org/coil/

Jason

-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110407/3c3dae28/attachment.html>

From itamar at itamarst.org  Thu Apr  7 06:14:05 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 07 Apr 2011 08:14:05 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <F7230F88-2DFD-4B41-B2D5-9CE9D88819FA@twistedmatrix.com>
References: <20110407003518.GD764@thorne.id.au>
	<F7230F88-2DFD-4B41-B2D5-9CE9D88819FA@twistedmatrix.com>
Message-ID: <1302178445.1686.8.camel@blake>

On Thu, 2011-04-07 at 02:08 -0400, Glyph Lefkowitz wrote:

> My idea for exposing it is that if you then do 'getPlugins(IPlugin2)',
> you will get back an iterable of IPlugin2 providers, but not
> necessarily instances of your classes: they could be cached plugins,
> with cached results for metadata() and willProvide() - the latter
> based on the list currently saved as the 'provided' attribute.  So a
> loop like this to load a twistd plugin by name:
> 
> 
>         def twistdPluginByTapname(name):
>             for p2 in getPlugins(IPlugin2):
>                 if p2.willProvide(IServiceMaker) and
>         p2.metadata()['tapname'] == name:
>                     return p2.load()
> 
> 
> ... would not actually load any plugins, but work entirely from the
> cached metadata.

That's where the whole idea falls down for me. Evidence suggests (and
you note this earlier) that caching doesn't work anywhere in the real
world. My current Ubuntu install complains about a read-only cache every
time I run lore (and I'm pretty sure there's nothing added to my
PYTHONPATH other than installed system packages). Any design which
assumes caching works appears to be useless in the real world.

So, the design has to *not* rely on caching working.





From ste at demaledetti.net  Thu Apr  7 06:56:59 2011
From: ste at demaledetti.net (Stefano Debenedetti)
Date: Thu, 07 Apr 2011 14:56:59 +0200
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <mailman.7479.1302155634.9568.twisted-python@twistedmatrix.com>
References: <mailman.7479.1302155634.9568.twisted-python@twistedmatrix.com>
Message-ID: <4D9DB49B.2010803@demaledetti.net>

On Apr 7, 2011, at 1:08 AM, Tim Allen wrote:
> If you need a non-Turing-complete config language and rule out .ini and
> XML, I'm not sure what's left. JSON, perhaps.

I bet a lot of people have a deja-vu feeling about a config file
syntax debate so I'll propose an alternative approach: RDF.

Perhaps most people in this community will not like it, yet some
might find it more fun that revamping their 2002 arguments about
merits and pitfalls of various syntaxes.

One of the reasons why I like RDF so much is that I can focus on
what I need to express and let people pick the serialization syntax
that better suits their mood, habits, tools and use-cases.

I know that the use-case that's being discussed is slightly
different (config files for the plugin system as opposed to config
files for a specific plugin) but as an example: my
twistd-plugin-driven webserver will gladly accept any of the
attached configuration files, they are equivalent and there are
commonly available tools to switch back and forth, including pure
python ones.

It could as well accept any other standard RDF serialization syntax,
for example there are several other XML formats, a line-based
grep-friendly syntax (NTriples) and a JSON format.

The code that parses this and turns it into running twisted Services
and web applications is about the same size of your average TAC
file. If anybody wants to see it please email me privately, I'm not
proud enough of other parts of my open source project containing it
to advertise it on this list.

Other than mentioning that RDF also comes with a standard query and
update language and protocol (SPARQL), I won't enumerate other
advantages here so let's see what some of drawbacks (and their
counter-arguments) are:

1) it's not widely known yet (but so was XML in 2000 and JSON in
2002 and INI in 2011)

2) it would require to add a dependency for an RDF parser (people
often argued the same way about XML, remember when libxml2 became a
Gnome dependency? RDF is now becoming a requirement of Gnome and KDE...)

3) it's not python (yet the several python object-RDF-mapper
libraries available seem to me much easier to use and way more
simple than SQLAlchemy so I already switched from pickle to RDF
whenever I want to serialize some object graph, BTW it's also safer
and hand-editable)

Sorry if I went too off-topic, ciao
ste


-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: config.n3
URL: </pipermail/twisted-python/attachments/20110407/3ec2e941/attachment.ksh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: config.xml
Type: text/xml
Size: 1442 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20110407/3ec2e941/attachment.xml>

From andrew at bemusement.org  Thu Apr  7 07:19:32 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Thu, 7 Apr 2011 23:19:32 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <1302178445.1686.8.camel@blake>
References: <20110407003518.GD764@thorne.id.au>
	<F7230F88-2DFD-4B41-B2D5-9CE9D88819FA@twistedmatrix.com>
	<1302178445.1686.8.camel@blake>
Message-ID: <20110407131932.GC2841@aihal.home.puzzling.org>

Itamar Turner-Trauring wrote:
[…]
> So, the design has to *not* rely on caching working.

FWIW: this is an achievable goal.  I have 32 different bzr plugins
currently installed, and here's the difference they make:

   $ time bzr --no-plugins rocks
   It sure does!
   
   real	0m0.075s
   
   $ time bzr rocks
   It sure does!
   
   real	0m0.119s

So that's about 1.5ms per plugin, on average.  With a hot disk cache, at
least…

For comparison, 'twistd --version' takes 116ms, with a dropin.cache and
(I think, although how can I tell?) no plugins installed.

In part, we achieve this via the bzrlib.lazy_import hack, which plugins
can and often do use, and by encouraging plugin authors to put as little
code into their __init__.py files as possible.  A typical plugin's
__init__ might do just:

    # This is example_plugin/__init__.py
    # The actual command implementation is in
    # example_plugin/example_commands.py
    from bzrlib import commands
    commands.plugin_cmds.register_lazy('cmd_class_name', [],
        'bzrlib.plugins.example_plugin.example_commands')

Glyph's expressed scepticism that plugin authors and maintainers will
know to keep their __init__.py files cheap to import.  Bazaar's
experience is different.  Partly that's probably because the Bazaar
community has paid a fair bit of attention to start up time and I
suppose Twisted doesn't have that.  But I think also it's partly because
we've provided tools to help people diagnose what/who to blame for bzr
being slow to start, like 'bzr --profile-imports', and even the crude
'time bzr rocks'.

-Andrew.




From techtonik at gmail.com  Thu Apr  7 10:16:11 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Thu, 7 Apr 2011 19:16:11 +0300
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
Message-ID: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>

Hi,

I've made a proof of concept for asynchronous console input on Windows
[1] and now I am trying to understand the limits of
WaitForMultipleObjects API I've used.

Documentation on win32eventreactor mentions limit for 64 objects:
http://twistedmatrix.com/documents/11.0.0/api/twisted.internet.win32eventreactor.htm
However, it is completely opaque what these objects are? For console
handles and process handles it is quite obvious, but not for sockets.

Is 64 the limit for total amount sockets opened on different ports?
Is 64 the limit for connections made to a socket on specified port?

1. http://techtonik.rainforce.org/2011/03/asynchronous-input-from-windows-console.html
--
anatoly t.



From glyph at twistedmatrix.com  Thu Apr  7 12:20:32 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 14:20:32 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <1302178445.1686.8.camel@blake>
References: <20110407003518.GD764@thorne.id.au>
	<F7230F88-2DFD-4B41-B2D5-9CE9D88819FA@twistedmatrix.com>
	<1302178445.1686.8.camel@blake>
Message-ID: <7E30440B-1602-4E87-9588-4880B5C1454E@twistedmatrix.com>


On Apr 7, 2011, at 8:14 AM, Itamar Turner-Trauring wrote:

> On Thu, 2011-04-07 at 02:08 -0400, Glyph Lefkowitz wrote:
> 
>> My idea for exposing it is that if you then do 'getPlugins(IPlugin2)',
>> you will get back an iterable of IPlugin2 providers, but not
>> necessarily instances of your classes: they could be cached plugins,
>> with cached results for metadata() and willProvide() - the latter
>> based on the list currently saved as the 'provided' attribute.  So a
>> loop like this to load a twistd plugin by name:
>> 
>> 
>>        def twistdPluginByTapname(name):
>>            for p2 in getPlugins(IPlugin2):
>>                if p2.willProvide(IServiceMaker) and
>>        p2.metadata()['tapname'] == name:
>>                    return p2.load()
>> 
>> 
>> ... would not actually load any plugins, but work entirely from the
>> cached metadata.
> 
> That's where the whole idea falls down for me. Evidence suggests (and
> you note this earlier) that caching doesn't work anywhere in the real
> world. My current Ubuntu install complains about a read-only cache every
> time I run lore (and I'm pretty sure there's nothing added to my
> PYTHONPATH other than installed system packages). Any design which
> assumes caching works appears to be useless in the real world.
> 
> So, the design has to *not* rely on caching working.

Here's an idea: let's make caching actually work :).  Prior experience indicates that with some small amount of dedication, it's possible to make a module in Twisted not be broken all the time.


As you observed that I already mentioned earlier in the thread, caching never works because post-installation hooks are such a pain, and you have to have special permissions to access the cache file.  So, separately from this, we could attempt a secondary cache read/write to a location much more likely to be writable by the user (something like ~/.local/var/cache/usr_lib_python2.6_site-packages.dropin.cache) read if the first one is out of date and written if writing the first one fails.

Also: we already rely on this behavior, so things are just as broken now for you.  For example, you'll end up loading the code for all twistd plugins and trial reporters when what you want are lore plugins.  This could also be fixed independently.

(To fix your particular installation right now, 'sudo twistd --help' or 'sudo lore' once.)

And, finally, as a separate consideration, we could make "cached metadata" mean "explicitly specified metadata" instead.  The important thing that I'm talking about doing first is making the system work exactly the same way that it does now, with one additional feature in the API which would allow us to make use of metadata that lives outside the Python code, using the existing mechanism for storing metadata that is currently not used.  For a first cut, we wouldn't even remove the ServiceMaker hack, just add the new feature to it so that we could do slightly less importing at startup.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110407/85b0c50f/attachment.html>

From glyph at twistedmatrix.com  Thu Apr  7 12:23:36 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 14:23:36 -0400
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
In-Reply-To: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
References: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
Message-ID: <65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>


On Apr 7, 2011, at 12:16 PM, anatoly techtonik wrote:

> I've made a proof of concept for asynchronous console input on Windows
> [1] and now I am trying to understand the limits of
> WaitForMultipleObjects API I've used.
> 
> Documentation on win32eventreactor mentions limit for 64 objects:
> http://twistedmatrix.com/documents/11.0.0/api/twisted.internet.win32eventreactor.htm
> However, it is completely opaque what these objects are? For console
> handles and process handles it is quite obvious, but not for sockets.
> 
> Is 64 the limit for total amount sockets opened on different ports?
> Is 64 the limit for connections made to a socket on specified port?
> 
> 1. http://techtonik.rainforce.org/2011/03/asynchronous-input-from-windows-console.html

64 is the limit for the total number of objects (listening ports, connections to a port, client connections, your console, the waker, serial ports, whatever) that WFMO may wait upon at once.

Put another way, MAXIMUM_WAIT_OBJECTS=64: http://msdn.microsoft.com/en-us/library/ms687025(v=vs.85).aspx





From glyph at twistedmatrix.com  Thu Apr  7 13:27:19 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 15:27:19 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407131932.GC2841@aihal.home.puzzling.org>
References: <20110407003518.GD764@thorne.id.au>
	<F7230F88-2DFD-4B41-B2D5-9CE9D88819FA@twistedmatrix.com>
	<1302178445.1686.8.camel@blake>
	<20110407131932.GC2841@aihal.home.puzzling.org>
Message-ID: <2F66AFB0-94C4-4E8D-A52D-79B7414573AF@twistedmatrix.com>


On Apr 7, 2011, at 9:19 AM, Andrew Bennetts wrote:

> Itamar Turner-Trauring wrote:
> […]
>> So, the design has to *not* rely on caching working.
> 
> FWIW: this is an achievable goal.  I have 32 different bzr plugins
> currently installed, and here's the difference they make:
> 
>   $ time bzr --no-plugins rocks
>   It sure does!
> 
>   real	0m0.075s
> 
>   $ time bzr rocks
>   It sure does!
> 
>   real	0m0.119s
> 
> So that's about 1.5ms per plugin, on average.  With a hot disk cache, at
> least…

Is your cache as hot for Twisted as for bzr?  Have you replicated these results in a randomized, double-blind clinical trial? ;-)

I'm not surprised that bzr has faster startup though; twistd has not been (and doubtful will ever be) nearly so ruthlessly optimized.  Maybe it's time to put a startup benchmark on <http://speed.twistedmatrix.com/>, at least that way we could keep track.

> For comparison, 'twistd --version' takes 116ms, with a dropin.cache and
> (I think, although how can I tell?) no plugins installed.

Twisted itself installs 22 dropins (python files which each define at least one plugin), which comprise 48 plugins of various types, so there are always some.  You should be able to tell, though.  It's pathetic that we don't have a command-line tool to inspect the available plugins and what they're doing.  Independent of the other issues under discussion here: <http://twistedmatrix.com/trac/ticket/5039>.

But this is all moot.  'twistd --version' doesn't scan for plugins, so that's all just the normal startup time; apparently we import too much in the first place.  The thing to compare with is 'twistd --help' or even just 'twistd [some-plugin]' (since invoking one plugin actually loads all of them).  Plus - this is really the genesis for this thread - the dropin.cache isn't really saving us much work at all right now, because all the plugins get loaded anyway for all practical uses of plugin scanning.

> In part, we achieve this via the bzrlib.lazy_import hack, which plugins
> can and often do use, and by encouraging plugin authors to put as little
> code into their __init__.py files as possible.  A typical plugin's
> __init__ might do just:
> 
>    # This is example_plugin/__init__.py
>    # The actual command implementation is in
>    # example_plugin/example_commands.py
>    from bzrlib import commands
>    commands.plugin_cmds.register_lazy('cmd_class_name', [],
>        'bzrlib.plugins.example_plugin.example_commands')

This looks very similar to ServiceMaker.

> Glyph's expressed scepticism that plugin authors and maintainers will
> know to keep their __init__.py files cheap to import.  Bazaar's
> experience is different.  Partly that's probably because the Bazaar
> community has paid a fair bit of attention to start up time and I
> suppose Twisted doesn't have that.

Yeah, bzr's audience makes this easier.  For one thing, the audience is much bigger :), but more importantly, bzr is a user-facing tool which users are running _constantly_ at the command line.  The only visible consequence of a rogue twistd plugin is that your server which runs for days at a time takes 0.2s longer to start; the real problem sets in later, where your 25 subprocesses are suddenly consuming an additional 50meg each because of the extra plugin they loaded.  You do find this eventually, it's just rare to find it while you're writing the plugin.

> But I think also it's partly because
> we've provided tools to help people diagnose what/who to blame for bzr
> being slow to start, like 'bzr --profile-imports', and even the crude
> 'time bzr rocks'.


Yes.  These are a great idea, and there's no excuse that Twisted's plugin system is so difficult to inspect and debug.  A couple of good tools would address a wide range of plugin issues, many of them much more interesting than performance, like the ever-popular "why isn't my plugin getting loaded".  Thanks for the impetus to file the ticket above.  (I kinda hope it's a dup, but I couldn't find one.)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110407/264d4da8/attachment.html>

From stephen at thorne.id.au  Thu Apr  7 17:54:41 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Fri, 8 Apr 2011 09:54:41 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4D9DB49B.2010803@demaledetti.net>
References: <mailman.7479.1302155634.9568.twisted-python@twistedmatrix.com>
	<4D9DB49B.2010803@demaledetti.net>
Message-ID: <20110407235441.GH764@thorne.id.au>

On 2011-04-07, Stefano Debenedetti wrote:
> On Apr 7, 2011, at 1:08 AM, Tim Allen wrote:
> > If you need a non-Turing-complete config language and rule out .ini and
> > XML, I'm not sure what's left. JSON, perhaps.
> 
> I bet a lot of people have a deja-vu feeling about a config file
> syntax debate so I'll propose an alternative approach: RDF.

I am +1 on this idea. I like rdf. My question is now: is there an rdf
parser lib that is available on python2.4+ which can either be gently
embedded within twisted, or used as a dependency?

We don't really need SparQL or anything complicated, just the ability
to resolve some simple triples.

I do not like angle brackets, but I have always had a fond affection for
n3.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue



From glyph at twistedmatrix.com  Thu Apr  7 18:09:39 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Apr 2011 20:09:39 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110407235441.GH764@thorne.id.au>
References: <mailman.7479.1302155634.9568.twisted-python@twistedmatrix.com>
	<4D9DB49B.2010803@demaledetti.net>
	<20110407235441.GH764@thorne.id.au>
Message-ID: <4585FBCD-267C-43FA-82E5-FCC2FD8D2490@twistedmatrix.com>

On Apr 7, 2011, at 7:54 PM, Stephen Thorne wrote:

> On 2011-04-07, Stefano Debenedetti wrote:
>> On Apr 7, 2011, at 1:08 AM, Tim Allen wrote:
>>> If you need a non-Turing-complete config language and rule out .ini and
>>> XML, I'm not sure what's left. JSON, perhaps.
>> 
>> I bet a lot of people have a deja-vu feeling about a config file
>> syntax debate so I'll propose an alternative approach: RDF.
> 
> I am +1 on this idea. I like rdf. My question is now: is there an rdf
> parser lib that is available on python2.4+ which can either be gently
> embedded within twisted, or used as a dependency?
> 
> We don't really need SparQL or anything complicated, just the ability
> to resolve some simple triples.
> 
> I do not like angle brackets, but I have always had a fond affection for
> n3.

You're welcome to try and do this; I'm not particularly interested in blocking it or holding it up, but I don't think that changing the input format actually solves any real problems.  I guess I will hold it up if you can't convince me that I'm wrong about that, and demonstrate an actual problem that it solves :-).  You still have to define all the same classes in order to get a plugin, unless we change some of that too - which has nothing to do with the metadata format at all.

I think the way to avoid caching issues in general is to generate the packaging metadata from the source earlier in advance (i.e. at development time, and check it in with the source code, like you would do with a Cython-generated C file or something), not to just mess around with it in a text editor.

I think that there is a benefit to sticking with a format that people very much dislike editing.  Having separately manually-edited metadata introduces an opportunity for the metadata to diverge from the reality of the code.  Making this easy to edit manually means making it more likely that people will think that they need to introduce some manual tweaks.  If it's a huge pain to actually generate the metadata without running a tool that inspects the code, it's less likely that someone will feel the need to get clever.

-glyph




From exarkun at twistedmatrix.com  Thu Apr  7 19:13:12 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Apr 2011 01:13:12 -0000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4585FBCD-267C-43FA-82E5-FCC2FD8D2490@twistedmatrix.com>
References: <mailman.7479.1302155634.9568.twisted-python@twistedmatrix.com>
	<4D9DB49B.2010803@demaledetti.net>
	<20110407235441.GH764@thorne.id.au>
	<4585FBCD-267C-43FA-82E5-FCC2FD8D2490@twistedmatrix.com>
Message-ID: <20110408011312.1992.2086006156.divmod.xquotient.302@localhost.localdomain>

On 12:09 am, glyph at twistedmatrix.com wrote:
>On Apr 7, 2011, at 7:54 PM, Stephen Thorne wrote:
>>On 2011-04-07, Stefano Debenedetti wrote:
>>>On Apr 7, 2011, at 1:08 AM, Tim Allen wrote:
>>>>If you need a non-Turing-complete config language and rule out .ini 
>>>>and
>>>>XML, I'm not sure what's left. JSON, perhaps.
>>>
>>>I bet a lot of people have a deja-vu feeling about a config file
>>>syntax debate so I'll propose an alternative approach: RDF.
>>
>>I am +1 on this idea. I like rdf. My question is now: is there an rdf
>>parser lib that is available on python2.4+ which can either be gently
>>embedded within twisted, or used as a dependency?
>>
>>We don't really need SparQL or anything complicated, just the ability
>>to resolve some simple triples.
>>
>>I do not like angle brackets, but I have always had a fond affection 
>>for
>>n3.
>
>You're welcome to try and do this; I'm not particularly interested in 
>blocking it or holding it up, but I don't think that changing the input 
>format actually solves any real problems.  I guess I will hold it up if 
>you can't convince me that I'm wrong about that, and demonstrate an 
>actual problem that it solves :-).  You still have to define all the 
>same classes in order to get a plugin, unless we change some of that 
>too - which has nothing to do with the metadata format at all.

I agree.  I don't see how this addresses any of the problems with the 
current system which have been raised so far.

Jean-Paul



From stephen at thorne.id.au  Thu Apr  7 19:21:07 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Fri, 8 Apr 2011 11:21:07 +1000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4585FBCD-267C-43FA-82E5-FCC2FD8D2490@twistedmatrix.com>
References: <mailman.7479.1302155634.9568.twisted-python@twistedmatrix.com>
	<4D9DB49B.2010803@demaledetti.net>
	<20110407235441.GH764@thorne.id.au>
	<4585FBCD-267C-43FA-82E5-FCC2FD8D2490@twistedmatrix.com>
Message-ID: <20110408012107.GJ764@thorne.id.au>

On 2011-04-07, Glyph Lefkowitz wrote:
> > I am +1 on this idea. I like rdf. My question is now: is there an rdf
> > parser lib that is available on python2.4+ which can either be gently
> > embedded within twisted, or used as a dependency?
> 
> You're welcome to try and do this; I'm not particularly interested in
> blocking it or holding it up, but I don't think that changing the
> input format actually solves any real problems.  I guess I will hold
> it up if you can't convince me that I'm wrong about that, and
> demonstrate an actual problem that it solves :-).  You still have to
> define all the same classes in order to get a plugin, unless we change
> some of that too - which has nothing to do with the metadata format at
> all.
> 
> I think the way to avoid caching issues in general is to generate the
> packaging metadata from the source earlier in advance (i.e. at
> development time, and check it in with the source code, like you would
> do with a Cython-generated C file or something), not to just mess
> around with it in a text editor.
> 
> I think that there is a benefit to sticking with a format that people
> very much dislike editing.  Having separately manually-edited metadata
> introduces an opportunity for the metadata to diverge from the reality
> of the code.  Making this easy to edit manually means making it more
> likely that people will think that they need to introduce some manual
> tweaks.  If it's a huge pain to actually generate the metadata without
> running a tool that inspects the code, it's less likely that someone
> will feel the need to get clever.

I was just thinking about this.

It would be very easy to write a single twisted/plugins/rdf_plugins.py
file that scans for non-python metadata defined plugins and creates
them.

That way twisted doesn't need to depend on an RDF lib, and this can
be a 'third party' outside-of-twisted package that if you want to use,
you just specify it as a dependancy along with the rest of the things
that your project depends on.

... I like this idea for a variety of reasons.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue



From kevin.horn at gmail.com  Thu Apr  7 20:52:44 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 7 Apr 2011 21:52:44 -0500
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
In-Reply-To: <65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>
References: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
	<65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>
Message-ID: <BANLkTinqqSXWDEznk+E0bj0ixnZWcQTa2A@mail.gmail.com>

On Thu, Apr 7, 2011 at 1:23 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Apr 7, 2011, at 12:16 PM, anatoly techtonik wrote:
>
> > I've made a proof of concept for asynchronous console input on Windows
> > [1] and now I am trying to understand the limits of
> > WaitForMultipleObjects API I've used.
> >
> > Documentation on win32eventreactor mentions limit for 64 objects:
> >
> http://twistedmatrix.com/documents/11.0.0/api/twisted.internet.win32eventreactor.htm
> > However, it is completely opaque what these objects are? For console
> > handles and process handles it is quite obvious, but not for sockets.
> >
> > Is 64 the limit for total amount sockets opened on different ports?
> > Is 64 the limit for connections made to a socket on specified port?
> >
> > 1.
> http://techtonik.rainforce.org/2011/03/asynchronous-input-from-windows-console.html
>
> 64 is the limit for the total number of objects (listening ports,
> connections to a port, client connections, your console, the waker, serial
> ports, whatever) that WFMO may wait upon at once.
>
> Put another way, MAXIMUM_WAIT_OBJECTS=64:
> http://msdn.microsoft.com/en-us/library/ms687025(v=vs.85).aspx
>
>
Note that you can wait on more than 64 objects at a time, just not using a
single WaitForMultipleObjects call.  The MSDN page Glyph pointed out has a
little more info.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110407/9eff711f/attachment-0001.html>

From mithrandi at mithrandi.net  Fri Apr  8 00:56:11 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 8 Apr 2011 08:56:11 +0200
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
In-Reply-To: <BANLkTinqqSXWDEznk+E0bj0ixnZWcQTa2A@mail.gmail.com>
References: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
	<65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>
	<BANLkTinqqSXWDEznk+E0bj0ixnZWcQTa2A@mail.gmail.com>
Message-ID: <BANLkTimUZz9U5QQy7+YW+COEvDcTYn-7RA@mail.gmail.com>

On Fri, Apr 8, 2011 at 4:52 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
> Note that you can wait on more than 64 objects at a time, just not using a
> single WaitForMultipleObjects call.  The MSDN page Glyph pointed out has a
> little more info.

The proposed solutions, however, seem rather unsatisfactory. If you're
going to start spawning new threads to monitor everything, you might
as well just do IOCP in another thread, or even in the main thread (at
least as far as I know).
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From glyph at twistedmatrix.com  Fri Apr  8 19:26:53 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 8 Apr 2011 21:26:53 -0400
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
In-Reply-To: <BANLkTimUZz9U5QQy7+YW+COEvDcTYn-7RA@mail.gmail.com>
References: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
	<65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>
	<BANLkTinqqSXWDEznk+E0bj0ixnZWcQTa2A@mail.gmail.com>
	<BANLkTimUZz9U5QQy7+YW+COEvDcTYn-7RA@mail.gmail.com>
Message-ID: <BE14902F-4290-4863-ABAD-931A52EAAA7D@twistedmatrix.com>


On Apr 8, 2011, at 2:56 AM, Tristan Seligmann wrote:

> On Fri, Apr 8, 2011 at 4:52 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>> Note that you can wait on more than 64 objects at a time, just not using a
>> single WaitForMultipleObjects call.  The MSDN page Glyph pointed out has a
>> little more info.
> 
> The proposed solutions, however, seem rather unsatisfactory. If you're
> going to start spawning new threads to monitor everything, you might
> as well just do IOCP in another thread, or even in the main thread (at
> least as far as I know).

I think we may be close to the point where we can drop win32eventreactor completely.  I think IOCP can deal with arbitrary Windows events too, so if we just expose that in a compatible way, and whatever else comes along with it, we can just delete win32er without losing any functionality.  (Or maybe we already do?  Not my area of expertise any more :)).




From ppergame at gmail.com  Fri Apr  8 19:43:16 2011
From: ppergame at gmail.com (Pavel Pergamenshchik)
Date: Fri, 8 Apr 2011 18:43:16 -0700
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
In-Reply-To: <BE14902F-4290-4863-ABAD-931A52EAAA7D@twistedmatrix.com>
References: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
	<65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>
	<BANLkTinqqSXWDEznk+E0bj0ixnZWcQTa2A@mail.gmail.com>
	<BANLkTimUZz9U5QQy7+YW+COEvDcTYn-7RA@mail.gmail.com>
	<BE14902F-4290-4863-ABAD-931A52EAAA7D@twistedmatrix.com>
Message-ID: <BANLkTikLU5zamfvUKdNNuD_zR4Zg2AtQXA@mail.gmail.com>

On Fri, Apr 8, 2011 at 6:26 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> On Apr 8, 2011, at 2:56 AM, Tristan Seligmann wrote:
>
>> On Fri, Apr 8, 2011 at 4:52 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>>> Note that you can wait on more than 64 objects at a time, just not using a
>>> single WaitForMultipleObjects call.  The MSDN page Glyph pointed out has a
>>> little more info.
>>
>> The proposed solutions, however, seem rather unsatisfactory. If you're
>> going to start spawning new threads to monitor everything, you might
>> as well just do IOCP in another thread, or even in the main thread (at
>> least as far as I know).
>
> I think we may be close to the point where we can drop win32eventreactor completely.  I think IOCP can deal with arbitrary Windows events too, so if we just expose that in a compatible way, and whatever else comes along with it, we can just delete win32er without losing any functionality.  (Or maybe we already do?  Not my area of expertise any more :)).

It's technically possible, but it's not a thing that iocpreactor
currently does. Someone (hurr hurr) needs to stop slacking and
implement it, along with support for waiting on an arbitrary number of
handles.

Also, how much do we care that win32er can be used without a compiler,
but iocpreactor needs one to build the API wrapper?



From techtonik at gmail.com  Sat Apr  9 01:26:06 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Sat, 9 Apr 2011 10:26:06 +0300
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
In-Reply-To: <BANLkTikLU5zamfvUKdNNuD_zR4Zg2AtQXA@mail.gmail.com>
References: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
	<65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>
	<BANLkTinqqSXWDEznk+E0bj0ixnZWcQTa2A@mail.gmail.com>
	<BANLkTimUZz9U5QQy7+YW+COEvDcTYn-7RA@mail.gmail.com>
	<BE14902F-4290-4863-ABAD-931A52EAAA7D@twistedmatrix.com>
	<BANLkTikLU5zamfvUKdNNuD_zR4Zg2AtQXA@mail.gmail.com>
Message-ID: <BANLkTimHnZ+w5332Lh9+oOgEi2FMTo4Hiw@mail.gmail.com>

On Sat, Apr 9, 2011 at 4:43 AM, Pavel Pergamenshchik <ppergame at gmail.com> wrote:
> On Fri, Apr 8, 2011 at 6:26 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>>
>> On Apr 8, 2011, at 2:56 AM, Tristan Seligmann wrote:
>>
>>> On Fri, Apr 8, 2011 at 4:52 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>>>> Note that you can wait on more than 64 objects at a time, just not using a
>>>> single WaitForMultipleObjects call.  The MSDN page Glyph pointed out has a
>>>> little more info.
>>>
>>> The proposed solutions, however, seem rather unsatisfactory. If you're
>>> going to start spawning new threads to monitor everything, you might
>>> as well just do IOCP in another thread, or even in the main thread (at
>>> least as far as I know).
>>
>> I think we may be close to the point where we can drop win32eventreactor completely.  I think IOCP can deal with arbitrary Windows events too, so if we just expose that in a compatible way, and whatever else comes along with it, we can just delete win32er without losing any functionality.  (Or maybe we already do?  Not my area of expertise any more :)).
>
> It's technically possible, but it's not a thing that iocpreactor
> currently does. Someone (hurr hurr) needs to stop slacking and
> implement it, along with support for waiting on an arbitrary number of
> handles.

I've found a "tutorial" by Richard Tew.
http://posted-stuff.blogspot.com/2009/07/iocp-based-sockets-with-ctypes-in_31.html

There is a lot of stuff to read. I can figure out if:
1. IOCP doesn't give a 100% CPU load when idle
2. It is doesn't seem like it is possible to listen to console events
like WFMO, but I didn't try

> Also, how much do we care that win32er can be used without a compiler,
> but iocpreactor needs one to build the API wrapper?
--
anatoly t.



From mithrandi at mithrandi.net  Sat Apr  9 05:15:08 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 9 Apr 2011 13:15:08 +0200
Subject: [Twisted-Python] WaitForMultipleObjects socket limitation
In-Reply-To: <BANLkTikLU5zamfvUKdNNuD_zR4Zg2AtQXA@mail.gmail.com>
References: <BANLkTikm--BihNu0vQL_3ku_1abLv7ph2g@mail.gmail.com>
	<65EC52D1-8EFD-4276-B53A-FDF26809C03C@twistedmatrix.com>
	<BANLkTinqqSXWDEznk+E0bj0ixnZWcQTa2A@mail.gmail.com>
	<BANLkTimUZz9U5QQy7+YW+COEvDcTYn-7RA@mail.gmail.com>
	<BE14902F-4290-4863-ABAD-931A52EAAA7D@twistedmatrix.com>
	<BANLkTikLU5zamfvUKdNNuD_zR4Zg2AtQXA@mail.gmail.com>
Message-ID: <BANLkTiknXzMdWgxXE-M60TwT447bcdsaCA@mail.gmail.com>

On Sat, Apr 9, 2011 at 3:43 AM, Pavel Pergamenshchik <ppergame at gmail.com> wrote:
> Also, how much do we care that win32er can be used without a compiler,
> but iocpreactor needs one to build the API wrapper?

I suspect it's not terribly important, since Windows users can just
use the binary distributions where somebody else has done all the hard
work of compiling.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From exarkun at twistedmatrix.com  Sat Apr  9 22:05:23 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 10 Apr 2011 04:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1302408323.77.1266112233@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110410/5c4e6e98/attachment-0001.html>

From exarkun at twistedmatrix.com  Mon Apr 11 18:19:10 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 12 Apr 2011 00:19:10 -0000
Subject: [Twisted-Python] Announcing pyOpenSSL 0.12
Message-ID: <20110412001910.1992.144878409.divmod.xquotient.421@localhost.localdomain>

Exciting news everyone,

I have just released pyOpenSSL 0.12.  pyOpenSSL provides Python bindings 
to a number of OpenSSL APIs, including certificates, public and private 
keys, and of course running TLS (SSL) over sockets or arbitrary in- 
memory buffiers.

This release fixes an incompatibility with Python 2.7 involving 
memoryviews.  It also exposes the "info callback" constants used to 
report progress of the TLS handshake and later steps of SSL connections. 
Perhaps most interestingly, it also adds support for inspecting 
arbitrary X509 extensions.

http://python.org/pypi/pyOpenSSL - check it out.

Jean-Paul



From techtonik at gmail.com  Tue Apr 12 00:25:17 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Tue, 12 Apr 2011 09:25:17 +0300
Subject: [Twisted-Python] Announcing pyOpenSSL 0.12
In-Reply-To: <20110412001910.1992.144878409.divmod.xquotient.421@localhost.localdomain>
References: <20110412001910.1992.144878409.divmod.xquotient.421@localhost.localdomain>
Message-ID: <BANLkTin7oLCMj6jEmoeHG2i0y71ZpxYcaQ@mail.gmail.com>

Good news. It may worth to update http://wiki.python.org/moin/SSL with
details. Right now it says that pyOpenSSL can not validate server
identity.
--
anatoly t.



On Tue, Apr 12, 2011 at 3:19 AM,  <exarkun at twistedmatrix.com> wrote:
> Exciting news everyone,
>
> I have just released pyOpenSSL 0.12.  pyOpenSSL provides Python bindings
> to a number of OpenSSL APIs, including certificates, public and private
> keys, and of course running TLS (SSL) over sockets or arbitrary in-
> memory buffiers.
>
> This release fixes an incompatibility with Python 2.7 involving
> memoryviews.  It also exposes the "info callback" constants used to
> report progress of the TLS handshake and later steps of SSL connections.
> Perhaps most interestingly, it also adds support for inspecting
> arbitrary X509 extensions.
>
> http://python.org/pypi/pyOpenSSL - check it out.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at twistedmatrix.com  Sun Apr 17 07:07:42 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 Apr 2011 13:07:42 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1303045662.98.1256093206@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110417/0204a382/attachment-0001.html>

From exarkun at twistedmatrix.com  Sun Apr 17 10:02:03 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 Apr 2011 16:02:03 -0000
Subject: [Twisted-Python] Python 2.7 on 64 bit Fedora 11
Message-ID: <20110417160203.1992.52511928.divmod.xquotient.776@localhost.localdomain>

Greetings,

We've had a Fedora 11 slave for a little while now (hosted by Flumotion, 
thanks!).  It's been green just about since it came up, so I think we 
should call it a supported platform now.

It will show up on the buildbot supported platforms page and force- 
builds.py will include it (once you update your checkout).

Jean-Paul



From glyph at twistedmatrix.com  Mon Apr 18 14:08:05 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Apr 2011 16:08:05 -0400
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: 1303045662.98.1256093206@twistedmatrix.com
References: 1303045662.98.1256093206@twistedmatrix.com
Message-ID: <1977AB77-2556-4898-82E6-6A2209E09425@twistedmatrix.com>


On Apr 17, 2011, at 9:07 AM, exarkun at twistedmatrix.com wrote:

> Total:                 9         12       1298         -3

Woo!




From Marcin.Kasperski at mekk.waw.pl  Tue Apr 19 08:27:27 2011
From: Marcin.Kasperski at mekk.waw.pl (Marcin Kasperski)
Date: Tue, 19 Apr 2011 16:27:27 +0200
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
References: <20110407003518.GD764@thorne.id.au>
Message-ID: <87hb9u9v00.fsf@mekk.waw.pl>

> Part of the discussion was about how to rewrite this in such a way that
> no python code needs to be run in order to discover all the
> tapname+description combinations that are available to twistd, this is
> because of a perceived performance and sanity deficit in using 'twistd'.

Have you considered using setuptools entry_points? They are de facto
standard and work fairly well for tools like paster or sqlalchemy...





From exarkun at twistedmatrix.com  Tue Apr 19 10:13:28 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 19 Apr 2011 16:13:28 -0000
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <87hb9u9v00.fsf@mekk.waw.pl>
References: <20110407003518.GD764@thorne.id.au>
	<87hb9u9v00.fsf@mekk.waw.pl>
Message-ID: <20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>

On 02:27 pm, marcin.kasperski at mekk.waw.pl wrote:
>>Part of the discussion was about how to rewrite this in such a way 
>>that
>>no python code needs to be run in order to discover all the
>>tapname+description combinations that are available to twistd, this is
>>because of a perceived performance and sanity deficit in using 
>>'twistd'.
>
>Have you considered using setuptools entry_points? They are de facto
>standard and work fairly well for tools like paster or sqlalchemy...

I don't think setuptools entry_points are expressive enough to be used 
here.
However, regardless, due to problems with setuptools, I don't think 
Twisted should gain a non-optional dependency on it (as it would be for 
something as core as twistd plugins).  If distribute makes it into the 
standard library (circa Python 3.3) then it might be reasonable to 
consider depending on it, if it actually manages to fix the issues it 
initially inherited from setuptools.

Jean-Paul



From glyph at twistedmatrix.com  Tue Apr 19 12:06:38 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 19 Apr 2011 14:06:38 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
Message-ID: <77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>

On Apr 19, 2011, at 12:13 PM, exarkun at twistedmatrix.com wrote:

> On 02:27 pm, marcin.kasperski at mekk.waw.pl wrote:
>>> Part of the discussion was about how to rewrite this in such a way 
>>> that
>>> no python code needs to be run in order to discover all the
>>> tapname+description combinations that are available to twistd, this is
>>> because of a perceived performance and sanity deficit in using 
>>> 'twistd'.
>> 
>> Have you considered using setuptools entry_points? They are de facto
>> standard and work fairly well for tools like paster or sqlalchemy...
> 
> I don't think setuptools entry_points are expressive enough to be used 
> here.
> However, regardless, due to problems with setuptools, I don't think 
> Twisted should gain a non-optional dependency on it (as it would be for 
> something as core as twistd plugins).

Strongly agreed on both counts.  For a long time I wished that we could be more 'standard' in this regard, but the more I learned about how entrypoints actually work, the less I like them.

> If distribute makes it into the 
> standard library (circa Python 3.3) then it might be reasonable to 
> consider depending on it, if it actually manages to fix the issues it 
> initially inherited from setuptools.

I don't believe 'distribute' is ever making it into the standard library.  The thing going into python 3.3 is 'packaging', which, obviously, is a copy (hopefully unmodified) of 'distutils2', which has nothing in common with 'distribute' except for its author.

'distribute' is a fork of setuptools that is actively maintained.  'distutils2' is a replacement for distutils (as I understand it, a rewrite) that does a bunch of things differently.

More info here: <https://bitbucket.org/tarek/distutils2/wiki/Home>.




From david at silveregg.co.jp  Tue Apr 19 22:28:25 2011
From: david at silveregg.co.jp (David)
Date: Wed, 20 Apr 2011 13:28:25 +0900
Subject: [Twisted-Python] Understanding deferred and error handling
Message-ID: <4DAE60E9.80903@silveregg.co.jp>

Hi,

I have a hard time figuring out error handling with deferred in twisted. 
More exactly, I don't understand how to always get meaningful tracebacks 
to understand where the error actually happened. For a simple example:

import sys

import twisted.web.client

from twisted.internet import defer
from twisted.internet import reactor
from twisted.python import log

def remote_call():
     # No process bound to 8083 -> connection refused
     d = twisted.web.client.getPage("http://localhost:8083")
     return d

def main():
     d = remote_call()
     def _stop(arg):
         reactor.stop()
     d.addBoth(_stop)

log.startLogging(sys.stdout)
reactor.callWhenRunning(main)
reactor.run()

This will simply print no error in the log:

2011-04-20 12:37:40+0900 [-] Log opened.
2011-04-20 12:37:40+0900 [-] Starting factory <HTTPClientFactory: 
http://localhost:8083>
2011-04-20 12:37:40+0900 [HTTPPageGetter,client] Stopping factory 
<HTTPClientFactory: http://localhost:8083>
2011-04-20 12:37:40+0900 [-] Main loop terminated.

This already bothers me at a fundamental level, because it means it is 
very easy to "swallow" errors without being aware of it. Is there a 
"systematic" solution to this issue, or am I condemned to handle errors 
systematically everywhere in my code ?

Now, if I add an errback for logging purpose:

def main():
     d = remote_call()
     def _stop(arg):
         reactor.stop()
     d.addErrback(log.err)
     d.addBoth(_stop)

I get something like:

2011-04-20 12:38:35+0900 [-] Log opened.
2011-04-20 12:38:35+0900 [-] Starting factory <HTTPClientFactory: 
http://localhost:8083>
2011-04-20 12:38:35+0900 [HTTPPageGetter,client] Unhandled Error
	Traceback (most recent call last):
	Failure: twisted.web.error.Error: 404 Not Found
	
2011-04-20 12:38:35+0900 [HTTPPageGetter,client] Stopping factory 
<HTTPClientFactory: http://localhost:8083>
2011-04-20 12:38:35+0900 [-] Main loop terminated.

I do get an error, but I don't get a traceback. Interestingly enough, if 
I use printTraceback:

def main():
     d = remote_call()
     def _stop(arg):
         reactor.stop()
     def log_error(failure):
         log.err(failure.printTraceback())
         return failure
     d.addErrback(log_error)
     d.addBoth(_stop)

I don't get any traceback either.

I found quite a few documents on how to handle errors in twisted, but I 
did not see much information on how to at least make sure unexpected 
errors are being shown (and fixed later).

cheers,

David



From jason.heeris at gmail.com  Tue Apr 19 22:41:11 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Wed, 20 Apr 2011 12:41:11 +0800
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <4DAE60E9.80903@silveregg.co.jp>
References: <4DAE60E9.80903@silveregg.co.jp>
Message-ID: <BANLkTimaEywz2q8C8sJNfqSDxXpkC3xPmg@mail.gmail.com>

On 20 April 2011 12:28, David <david at silveregg.co.jp> wrote:
> This already bothers me at a fundamental level, because it means it is
> very easy to "swallow" errors without being aware of it. Is there a
> "systematic" solution to this issue, or am I condemned to handle errors
> systematically everywhere in my code ?

My approach is to (where appropriate) use "passthrough" type methods, eg.

    def stop(result):
        reactor.stop()
        return result

If you use that in your code, you should see straight away that the
unhandled Failure is logged.

— Jason



From jrennie at gmail.com  Wed Apr 20 04:15:08 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 20 Apr 2011 06:15:08 -0400
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <4DAE60E9.80903@silveregg.co.jp>
References: <4DAE60E9.80903@silveregg.co.jp>
Message-ID: <BANLkTimBBqU4rUwtCQaCCYcRzKHHq6JV4g@mail.gmail.com>

On Wed, Apr 20, 2011 at 12:28 AM, David <david at silveregg.co.jp> wrote:

>     def _stop(arg):
>         reactor.stop()
>     d.addBoth(_stop)
>

Try using addCallbacks instead of addBoth.  Then, you can logically separate
code to handle/print errors from "normal" code.

This will simply print no error in the log:
>

That's because you discarded the twisted.python.failure.Failure object by
using _stop for your errback and not doing anything with the arg.  Similar
to try/except with a "pass" in the "except" clause.

    def log_error(failure):

        log.err(failure.printTraceback())
>         return failure
>     d.addErrback(log_error)
>     d.addBoth(_stop)
>

Use d.addCallbacks(_stop, log_error) instead of addBoth/addErrback.  Also,
you probably want "log.err(failure.getTraceback())" instead of
"log.err(failure.printTraceback())".  printTraceback does not return a
meaningful value IIUC.

I don't get any traceback either.
>

Your traceback went to stdout whereas you were probably watching stderr or a
log file.

Jason

-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110420/6708b033/attachment.html>

From mithrandi at mithrandi.net  Wed Apr 20 04:44:12 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 20 Apr 2011 12:44:12 +0200
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <BANLkTimBBqU4rUwtCQaCCYcRzKHHq6JV4g@mail.gmail.com>
References: <4DAE60E9.80903@silveregg.co.jp>
	<BANLkTimBBqU4rUwtCQaCCYcRzKHHq6JV4g@mail.gmail.com>
Message-ID: <BANLkTinCMP6jG8sSDC3yJBfW+UVwryKYNQ@mail.gmail.com>

On Wed, Apr 20, 2011 at 12:15 PM, Jason Rennie <jrennie at gmail.com> wrote:
>>
>>     def log_error(failure):
>>
>>         log.err(failure.printTraceback())
>>         return failure
>>     d.addErrback(log_error)
>>     d.addBoth(_stop)
>
> Use d.addCallbacks(_stop, log_error) instead of addBoth/addErrback.  Also,
> you probably want "log.err(failure.getTraceback())" instead of
> "log.err(failure.printTraceback())".  printTraceback does not return a
> meaningful value IIUC.

Actually, you just want:

    log.err(failure)

I don't think there's anything particularly wrong with using
addErrback / addBoth in that way, either. If there is an error, you
want to log it; and then regardless of whether there was an error or
not, and whether the attempt to log the error failed, you want to stop
the reactor; this is exactly what the addErrback/addBoth code achieves
in this case. The equivalent synchronous code looks something like:

try:
    remote_call()
except:
    logTheError()
finally:
    reactor.stop()

The reason you don't get a traceback in this case is that there isn't
one; the exception is created directly as a result of parsing the
response from the HTTP server, instead of being thrown in code lower
down the stack and caught higher up. Unfortunately this situation is
quite common in asynchronous code; there is no direct equivalent of a
"stack trace" for asynchronous code, so often you have a Failure that
carries no indication of where the operation that failed was
initiated, although turning on Deferred debugging (see
Deferred.setDebugging) can sometimes be helpful in these situations.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From p.mayers at imperial.ac.uk  Wed Apr 20 11:31:23 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 20 Apr 2011 18:31:23 +0100
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <4DAE60E9.80903@silveregg.co.jp>
References: <4DAE60E9.80903@silveregg.co.jp>
Message-ID: <4DAF186B.5000000@imperial.ac.uk>

On 04/20/2011 05:28 AM, David wrote:
> Hi,
>
> I have a hard time figuring out error handling with deferred in twisted.
> More exactly, I don't understand how to always get meaningful tracebacks
> to understand where the error actually happened. For a simple example:
>
> import sys
>
> import twisted.web.client
>
> from twisted.internet import defer
> from twisted.internet import reactor
> from twisted.python import log
>
> def remote_call():
>       # No process bound to 8083 ->  connection refused
>       d = twisted.web.client.getPage("http://localhost:8083")
>       return d
>
> def main():
>       d = remote_call()
>       def _stop(arg):
>           reactor.stop()
>       d.addBoth(_stop)
>
> log.startLogging(sys.stdout)
> reactor.callWhenRunning(main)
> reactor.run()
>
> This will simply print no error in the log:
>
> 2011-04-20 12:37:40+0900 [-] Log opened.
> 2011-04-20 12:37:40+0900 [-] Starting factory<HTTPClientFactory:
> http://localhost:8083>
> 2011-04-20 12:37:40+0900 [HTTPPageGetter,client] Stopping factory
> <HTTPClientFactory: http://localhost:8083>
> 2011-04-20 12:37:40+0900 [-] Main loop terminated.
>
> This already bothers me at a fundamental level, because it means it is
> very easy to "swallow" errors without being aware of it. Is there a
> "systematic" solution to this issue, or am I condemned to handle errors
> systematically everywhere in my code ?
>
> Now, if I add an errback for logging purpose:
>
> def main():
>       d = remote_call()
>       def _stop(arg):
>           reactor.stop()
>       d.addErrback(log.err)
>       d.addBoth(_stop)
>
> I get something like:
>
> 2011-04-20 12:38:35+0900 [-] Log opened.
> 2011-04-20 12:38:35+0900 [-] Starting factory<HTTPClientFactory:
> http://localhost:8083>
> 2011-04-20 12:38:35+0900 [HTTPPageGetter,client] Unhandled Error
> 	Traceback (most recent call last):
> 	Failure: twisted.web.error.Error: 404 Not Found
> 	
> 2011-04-20 12:38:35+0900 [HTTPPageGetter,client] Stopping factory
> <HTTPClientFactory: http://localhost:8083>
> 2011-04-20 12:38:35+0900 [-] Main loop terminated.
>
> I do get an error, but I don't get a traceback. Interestingly enough, if
> I use printTraceback:
>
> def main():
>       d = remote_call()
>       def _stop(arg):
>           reactor.stop()
>       def log_error(failure):
>           log.err(failure.printTraceback())
>           return failure
>       d.addErrback(log_error)
>       d.addBoth(_stop)
>
> I don't get any traceback either.

As other people have pointed out, you're discarding the failure.

This:

def on_error(failure):
     return
d = some_call()
d.addErrback(on_error)

...is equivalent to synchronous code of the form:

try:
   some_call()
except:
   pass

...i.e. silently eating all exceptions. The latter is usually bad 
python, and so the former is usually bad Twisted ;o)






From cournape at gmail.com  Wed Apr 20 19:04:20 2011
From: cournape at gmail.com (David Cournapeau)
Date: Thu, 21 Apr 2011 10:04:20 +0900
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <4DAF186B.5000000@imperial.ac.uk>
References: <4DAE60E9.80903@silveregg.co.jp> <4DAF186B.5000000@imperial.ac.uk>
Message-ID: <BANLkTik3ZR+KCyj=3sgG4ZcbSqFnfGFYPA@mail.gmail.com>

On Thu, Apr 21, 2011 at 2:31 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 04/20/2011 05:28 AM, David wrote:
>> Hi,
>>
>> I have a hard time figuring out error handling with deferred in twisted.
>> More exactly, I don't understand how to always get meaningful tracebacks
>> to understand where the error actually happened. For a simple example:
>>
>> import sys
>>
>> import twisted.web.client
>>
>> from twisted.internet import defer
>> from twisted.internet import reactor
>> from twisted.python import log
>>
>> def remote_call():
>>       # No process bound to 8083 ->  connection refused
>>       d = twisted.web.client.getPage("http://localhost:8083")
>>       return d
>>
>> def main():
>>       d = remote_call()
>>       def _stop(arg):
>>           reactor.stop()
>>       d.addBoth(_stop)
>>
>> log.startLogging(sys.stdout)
>> reactor.callWhenRunning(main)
>> reactor.run()
>>
>> This will simply print no error in the log:
>>
>> 2011-04-20 12:37:40+0900 [-] Log opened.
>> 2011-04-20 12:37:40+0900 [-] Starting factory<HTTPClientFactory:
>> http://localhost:8083>
>> 2011-04-20 12:37:40+0900 [HTTPPageGetter,client] Stopping factory
>> <HTTPClientFactory: http://localhost:8083>
>> 2011-04-20 12:37:40+0900 [-] Main loop terminated.
>>
>> This already bothers me at a fundamental level, because it means it is
>> very easy to "swallow" errors without being aware of it. Is there a
>> "systematic" solution to this issue, or am I condemned to handle errors
>> systematically everywhere in my code ?
>>
>> Now, if I add an errback for logging purpose:
>>
>> def main():
>>       d = remote_call()
>>       def _stop(arg):
>>           reactor.stop()
>>       d.addErrback(log.err)
>>       d.addBoth(_stop)
>>
>> I get something like:
>>
>> 2011-04-20 12:38:35+0900 [-] Log opened.
>> 2011-04-20 12:38:35+0900 [-] Starting factory<HTTPClientFactory:
>> http://localhost:8083>
>> 2011-04-20 12:38:35+0900 [HTTPPageGetter,client] Unhandled Error
>>       Traceback (most recent call last):
>>       Failure: twisted.web.error.Error: 404 Not Found
>>
>> 2011-04-20 12:38:35+0900 [HTTPPageGetter,client] Stopping factory
>> <HTTPClientFactory: http://localhost:8083>
>> 2011-04-20 12:38:35+0900 [-] Main loop terminated.
>>
>> I do get an error, but I don't get a traceback. Interestingly enough, if
>> I use printTraceback:
>>
>> def main():
>>       d = remote_call()
>>       def _stop(arg):
>>           reactor.stop()
>>       def log_error(failure):
>>           log.err(failure.printTraceback())
>>           return failure
>>       d.addErrback(log_error)
>>       d.addBoth(_stop)
>>
>> I don't get any traceback either.
>
> As other people have pointed out, you're discarding the failure.

Indeed, I forgot to return the argument in my _stop callback. This answers part
of my question, but not what I consider the meat of my issue, that is
the lack of traceback. Fixing and simplifying my initial example:

import twisted.web.client

from twisted.internet import defer
from twisted.internet import reactor

def remote_call():
    d = twisted.web.client.getPage("http://localhost:8083")
    return d

def main():
    d = remote_call()
    def _stop(arg):
        reactor.stop()
        return arg
    d.addBoth(_stop)

reactor.callWhenRunning(main)
reactor.run()

This will correctly signal an error, but the output:

Unhandled error in Deferred:
Unhandled Error
Traceback (most recent call last):
Failure: twisted.internet.error.ConnectionRefusedError: Connection was
refused by other side: 61: Connection refused.

is not informative. I was hoping for a way to know that the error
happens inside remote_call through e.g. an errback in main. If this is
not possible, how do people generally handle those issues in
asynchronous code ?

cheers,

David



From exarkun at twistedmatrix.com  Wed Apr 20 19:12:43 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 21 Apr 2011 01:12:43 -0000
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <BANLkTik3ZR+KCyj=3sgG4ZcbSqFnfGFYPA@mail.gmail.com>
References: <4DAE60E9.80903@silveregg.co.jp> <4DAF186B.5000000@imperial.ac.uk>
	<BANLkTik3ZR+KCyj=3sgG4ZcbSqFnfGFYPA@mail.gmail.com>
Message-ID: <20110421011243.1992.1848266191.divmod.xquotient.886@localhost.localdomain>

On 01:04 am, cournape at gmail.com wrote:
>but not what I consider the meat of my issue, that is
>the lack of traceback. Fixing and simplifying my initial example:
>
>import twisted.web.client
>
>from twisted.internet import defer
>from twisted.internet import reactor
>
>def remote_call():
>    d = twisted.web.client.getPage("http://localhost:8083")
>    return d
>
>def main():
>    d = remote_call()
>    def _stop(arg):
>        reactor.stop()
>        return arg
>    d.addBoth(_stop)
>
>reactor.callWhenRunning(main)
>reactor.run()
>
>This will correctly signal an error, but the output:
>
>Unhandled error in Deferred:
>Unhandled Error
>Traceback (most recent call last):
>Failure: twisted.internet.error.ConnectionRefusedError: Connection was
>refused by other side: 61: Connection refused.
>
>is not informative. I was hoping for a way to know that the error
>happens inside remote_call through e.g. an errback in main. If this is
>not possible, how do people generally handle those issues in
>asynchronous code ?

log.err takes an additional argument which you can use easily like this:

    def main():
        d = remote_call()
        d.addErrback(log.err, "remote_call failed")
        def _stop(ignored):
            reactor.stop()
        d.addCallback(_stop)

The message you pass here will replace the "Unhandled error in Deferred" 
text in the report of the failure.

Another option is to enable Deferred debugging, which I think someone 
mentioned earlier in the thread:

    from twisted.internet.defer import setDebugging
    setDebugging(True)

or

    twistd --debug ...

or

    trial --debug ...

This causes Deferred to capture the stack at the time it is created and 
the time it is called back.  The "Unhandled error" case will log this 
information.  This should give you the traceback you want.  This is not 
enabled by default because (I suppose) capturing stacks is very 
expensive.

Jean-Paul



From kevin.horn at gmail.com  Wed Apr 20 19:48:20 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 20 Apr 2011 20:48:20 -0500
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
Message-ID: <BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>

> I don't believe 'distribute' is ever making it into the standard library.
>  The thing going into python 3.3 is 'packaging', which, obviously, is a copy
> (hopefully unmodified) of 'distutils2', which has nothing in common with
> 'distribute' except for its author.
>
> 'distribute' is a fork of setuptools that is actively maintained.
>  'distutils2' is a replacement for distutils (as I understand it, a rewrite)
> that does a bunch of things differently.
>
> More info here: <https://bitbucket.org/tarek/distutils2/wiki/Home>.
>
>
This is essentially correct.  A little history for the interested (feel free
to skip it):

First there was setuptools.  Everyone used it, but the author wasn't so
great at keeping it maintained, since it was originally just something he
wrote for himself.  But since he used it a lot in his business, he didn't
want lots of other people making changes either, so it fell into disrepair.

Tarek came along and got busy. He (along with some other people) forked
setuptools and made distribute.  He fixed some bugs, and planned to
eventually clean things up and change the underlying API strangeness.  But
the further he got into it, the more he ran into problems with all the crazy
extensions setuptools/distribute made to distutils.  So he thought "Aha! I
can just clean up distutils and things will be so much easier!".

Well the joke was on him, cuz he discovered distutils was a complete
cluster****.  So he rewrote distutils with an eye on keeping things nice for
everyone.  Project managers, distro packagers, users installing software,
etc.  This is distutils2.  In Python 3.3 and up it will be called
"packaging".  Once people start using it, it will make a lot of the current
packaging headaches in the Python world go away.

But the one thing it does NOT do, that setuptools/distribute DID, is the
entry_points stuff, which according to Tarek should be in a separate package
anyway.



So long story short (too late), once distutils2/packaging drops, the idea
will be for everyone to eventually move to using it rather that distutils,
and using a setup.cfg rather than a setup.py.  Also setuptools/distribute
will hopefully go back to being a niche tool.  Also also the Python
community could use a plugin standard that could replace setuptools'
entry_points.

The end.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110420/95868a7c/attachment-0001.html>

From albert.brandl at weiermayer.com  Thu Apr 21 01:27:45 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Thu, 21 Apr 2011 09:27:45 +0200
Subject: [Twisted-Python] Running twistd with a compiled file
Message-ID: <20110421072745.GA3654@weiermayer.com>

Hi!

It is sometimes necessary to deploy an application without the sources.
But when I try to start the twistd daemon with a compiled Python file, 
it raises the following traceback:

$ twistd -ny application.pyc
Traceback (most recent call last):
  File "/usr/local/lib/python2.6/dist-packages/Twisted-10.0.0-py2.6-linux-i686.egg/twisted/application/app.py", line 631, in run
    runApp(config)
  File "/usr/local/lib/python2.6/dist-packages/Twisted-10.0.0-py2.6-linux-i686.egg/twisted/scripts/twistd.py", line 23, in runApp
    _SomeApplicationRunner(config).run()
  File "/usr/local/lib/python2.6/dist-packages/Twisted-10.0.0-py2.6-linux-i686.egg/twisted/application/app.py", line 374, in run
    self.application = self.createOrGetApplication()
  File "/usr/local/lib/python2.6/dist-packages/Twisted-10.0.0-py2.6-linux-i686.egg/twisted/application/app.py", line 439, in createOrGetApplication
    application = getApplication(self.config, passphrase)
--- <exception caught here> ---
  File "/usr/local/lib/python2.6/dist-packages/Twisted-10.0.0-py2.6-linux-i686.egg/twisted/application/app.py", line 450, in getApplication
    application = service.loadApplication(filename, style, passphrase)
  File "/usr/local/lib/python2.6/dist-packages/Twisted-10.0.0-py2.6-linux-i686.egg/twisted/application/service.py", line 400, in loadApplication
    application = sob.loadValueFromFile(filename, 'application', passphrase)
  File "/usr/local/lib/python2.6/dist-packages/Twisted-10.0.0-py2.6-linux-i686.egg/twisted/persisted/sob.py", line 210, in loadValueFromFile
    exec fileObj in d, d
exceptions.SyntaxError: Non-ASCII character '\xd1' in file application.pyc on line 1, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details (application.pyc, line 1)

Failed to load application: Non-ASCII character '\xd1' in file application.pyc on line 1, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details (application.pyc, line 1)

This behaviour was observed with twistd 10.2.0.

Of course, it's possible to move most of the logic to other (compiled)
files, but I'd prefer if the application itself could also be deployed
in compiled form.

Is this a known problem? Can you suggest a workaround?

Best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistraße 12, A-4813 Altmünster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com



From itamar at itamarst.org  Thu Apr 21 06:17:04 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 21 Apr 2011 08:17:04 -0400
Subject: [Twisted-Python] Running twistd with a compiled file
In-Reply-To: <20110421072745.GA3654@weiermayer.com>
References: <20110421072745.GA3654@weiermayer.com>
Message-ID: <1303388224.1751.2.camel@blake>

On Thu, 2011-04-21 at 09:27 +0200, Albert Brandl wrote:
> Of course, it's possible to move most of the logic to other (compiled)
> files, but I'd prefer if the application itself could also be deployed
> in compiled form.

The .tac file (or application.py) should typically be two lines of code,
just importing everything from elsewhere, so really just having it in
Python seems the easiest solution.




From albert.brandl at weiermayer.com  Thu Apr 21 10:28:58 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Thu, 21 Apr 2011 18:28:58 +0200
Subject: [Twisted-Python] Running twistd with a compiled file
In-Reply-To: <1303388224.1751.2.camel@blake>
References: <20110421072745.GA3654@weiermayer.com>
	<1303388224.1751.2.camel@blake>
Message-ID: <20110421162858.GB2197@weiermayer.com>

On Thu, Apr 21, 2011 at 08:17:04AM -0400, Itamar Turner-Trauring wrote:
> The .tac file (or application.py) should typically be two lines of code,
> just importing everything from elsewhere, so really just having it in
> Python seems the easiest solution.

This is a good argument. I was afraid that having the application as 
source code might help in reverse engineering it, but starting the 
debugger in the application does not reveal much information for modules 
that are compiled.

Thanks & best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistraße 12, A-4813 Altmünster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com



From glyph at twistedmatrix.com  Thu Apr 21 10:31:24 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 21 Apr 2011 12:31:24 -0400
Subject: [Twisted-Python] Running twistd with a compiled file
In-Reply-To: <20110421072745.GA3654@weiermayer.com>
References: <20110421072745.GA3654@weiermayer.com>
Message-ID: <D6E25064-0985-4F6E-ABE0-4E4FC0172689@twistedmatrix.com>


On Apr 21, 2011, at 3:27 AM, Albert Brandl wrote:

> Is this a known problem? Can you suggest a workaround?

Deploy your application as a plugin rather than a tac file.  The plugin system will properly scan for compiled python files and load them as regular modules.  This has other advantages as well :).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110421/a96422b8/attachment.html>

From exarkun at twistedmatrix.com  Thu Apr 21 11:26:55 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 21 Apr 2011 17:26:55 -0000
Subject: [Twisted-Python] Running twistd with a compiled file
In-Reply-To: <20110421162858.GB2197@weiermayer.com>
References: <20110421072745.GA3654@weiermayer.com>
	<1303388224.1751.2.camel@blake>
	<20110421162858.GB2197@weiermayer.com>
Message-ID: <20110421172655.1992.354396425.divmod.xquotient.888@localhost.localdomain>

On 04:28 pm, albert.brandl at weiermayer.com wrote:
>On Thu, Apr 21, 2011 at 08:17:04AM -0400, Itamar Turner-Trauring wrote:
>>The .tac file (or application.py) should typically be two lines of 
>>code,
>>just importing everything from elsewhere, so really just having it in
>>Python seems the easiest solution.
>
>This is a good argument. I was afraid that having the application as
>source code might help in reverse engineering it, but starting the
>debugger in the application does not reveal much information for 
>modules
>that are compiled.

This is the obligatory post in which it is pointed out that .pyc files 
are basically equivalent to .py files as far as revealing your source 
goes.

Jean-Paul



From techtonik at gmail.com  Thu Apr 21 15:11:25 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Fri, 22 Apr 2011 00:11:25 +0300
Subject: [Twisted-Python] Running twistd with a compiled file
In-Reply-To: <20110421172655.1992.354396425.divmod.xquotient.888@localhost.localdomain>
References: <20110421072745.GA3654@weiermayer.com>
	<1303388224.1751.2.camel@blake>
	<20110421162858.GB2197@weiermayer.com>
	<20110421172655.1992.354396425.divmod.xquotient.888@localhost.localdomain>
Message-ID: <BANLkTinXJEpw08t++ayxX+6aX+BHuGyygQ@mail.gmail.com>

On Thu, Apr 21, 2011 at 8:26 PM,  <exarkun at twistedmatrix.com> wrote:
> On 04:28 pm, albert.brandl at weiermayer.com wrote:
>>On Thu, Apr 21, 2011 at 08:17:04AM -0400, Itamar Turner-Trauring wrote:
>>>The .tac file (or application.py) should typically be two lines of
>>>code,
>>>just importing everything from elsewhere, so really just having it in
>>>Python seems the easiest solution.
>>
>>This is a good argument. I was afraid that having the application as
>>source code might help in reverse engineering it, but starting the
>>debugger in the application does not reveal much information for
>>modules
>>that are compiled.
>
> This is the obligatory post in which it is pointed out that .pyc files
> are basically equivalent to .py files as far as revealing your source
> goes.

As the code comments are stripped from .pyc files, most enterprise
grade applications are safe. If that stuff is not complicated enough -
then it can be rewritten from scratch anyway.
--
anatoly t.



From techtonik at gmail.com  Thu Apr 21 15:21:46 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Fri, 22 Apr 2011 00:21:46 +0300
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
Message-ID: <BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>

On Thu, Apr 21, 2011 at 4:48 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> cluster****.  So he rewrote distutils with an eye on keeping things nice for
> everyone.  Project managers, distro packagers, users installing software,
> etc.  This is distutils2.  In Python 3.3 and up it will be called
> "packaging".  Once people start using it, it will make a lot of the current
> packaging headaches in the Python world go away.

Are you sure about that? Where is the list of stories it will solve
when people start using it, so I can check that my cases are covered
by distutils2 insurance plan?

> will hopefully go back to being a niche tool.  Also also the Python
> community could use a plugin standard that could replace setuptools'
> entry_points.

ABC classes? Trac components? What is plugin anyway? Discoverable
module on a syspath? Registered entity in package repository? Filename
in %HOMEDIR% that starts with tx.? (autoloaders from PHP5?)
--
anatoly t.



From david at silveregg.co.jp  Thu Apr 21 18:53:35 2011
From: david at silveregg.co.jp (David)
Date: Fri, 22 Apr 2011 09:53:35 +0900
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <20110421011243.1992.1848266191.divmod.xquotient.886@localhost.localdomain>
References: <4DAE60E9.80903@silveregg.co.jp> <4DAF186B.5000000@imperial.ac.uk>
	<BANLkTik3ZR+KCyj=3sgG4ZcbSqFnfGFYPA@mail.gmail.com>
	<20110421011243.1992.1848266191.divmod.xquotient.886@localhost.localdomain>
Message-ID: <4DB0D18F.7080907@silveregg.co.jp>

On 04/21/2011 10:12 AM, exarkun at twistedmatrix.com wrote:

> log.err takes an additional argument which you can use easily like this:
>
>      def main():
>          d = remote_call()
>          d.addErrback(log.err, "remote_call failed")
>          def _stop(ignored):
>              reactor.stop()
>          d.addCallback(_stop)
>
> The message you pass here will replace the "Unhandled error in Deferred"
> text in the report of the failure.

ok, thanks for the tip.

>
> Another option is to enable Deferred debugging, which I think someone
> mentioned earlier in the thread:
>
>      from twisted.internet.defer import setDebugging
>      setDebugging(True)
>
> or
>
>      twistd --debug ...
>
> or
>
>      trial --debug ...
>
> This causes Deferred to capture the stack at the time it is created and
> the time it is called back.  The "Unhandled error" case will log this
> information.  This should give you the traceback you want.  This is not
> enabled by default because (I suppose) capturing stacks is very
> expensive.

I am not so interested in "debug runs", but more in a way to get more 
informations of our tool stack bugs when run in production. I guess what 
I am looking for is some good practices for dealing with errors, then. 
Maybe a piece of code in twisted itself ?

cheers,

David



From david at silveregg.co.jp  Thu Apr 21 19:01:39 2011
From: david at silveregg.co.jp (David)
Date: Fri, 22 Apr 2011 10:01:39 +0900
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
Message-ID: <4DB0D373.9020909@silveregg.co.jp>

On 04/22/2011 06:21 AM, anatoly techtonik wrote:
> On Thu, Apr 21, 2011 at 4:48 AM, Kevin Horn<kevin.horn at gmail.com>  wrote:
>>
>> cluster****.  So he rewrote distutils with an eye on keeping things nice for
>> everyone.  Project managers, distro packagers, users installing software,
>> etc.  This is distutils2.  In Python 3.3 and up it will be called
>> "packaging".  Once people start using it, it will make a lot of the current
>> packaging headaches in the Python world go away.
>
> Are you sure about that? Where is the list of stories it will solve
> when people start using it, so I can check that my cases are covered
> by distutils2 insurance plan?

[OT]
You can take a look at bento, which is my own response to the distutils 
issues we have in the scipy community (but I would expect twisted and 
most big python libraries to have similar issues):

http://cournape.github.com/Bento/

It is designed from the ground up with the idea of reliable 
customization and complex build supports. It can already build numpy and 
scipy with a near 50 % reduction in LOC compared to our setup.py, and 
more reliably thanks to using a real build tool in the backend (waf, but 
you can add support for a different one if you want).

cheers,

David



From termim at gmail.com  Thu Apr 21 21:13:11 2011
From: termim at gmail.com (Mikhail Terekhov)
Date: Thu, 21 Apr 2011 23:13:11 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4DB0D373.9020909@silveregg.co.jp>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
	<4DB0D373.9020909@silveregg.co.jp>
Message-ID: <BANLkTi=SavZ07sPXmf3DL9F_KNcNp=dO1A@mail.gmail.com>

On Thu, Apr 21, 2011 at 9:01 PM, David <david at silveregg.co.jp> wrote:

> On 04/22/2011 06:21 AM, anatoly techtonik wrote:
> > On Thu, Apr 21, 2011 at 4:48 AM, Kevin Horn<kevin.horn at gmail.com>
>  wrote:
> >>
> >> cluster****.  So he rewrote distutils with an eye on keeping things nice
> for
> >> everyone.  Project managers, distro packagers, users installing
> software,
> >> etc.  This is distutils2.  In Python 3.3 and up it will be called
> >> "packaging".  Once people start using it, it will make a lot of the
> current
> >> packaging headaches in the Python world go away.
> >
> > Are you sure about that? Where is the list of stories it will solve
> > when people start using it, so I can check that my cases are covered
> > by distutils2 insurance plan?
>
> [OT]
> You can take a look at bento, which is my own response to the distutils
> issues we have in the scipy community (but I would expect twisted and
> most big python libraries to have similar issues):
>
> http://cournape.github.com/Bento/
>
> It is designed from the ground up with the idea of reliable
> customization and complex build supports. It can already build numpy and
> scipy with a near 50 % reduction in LOC compared to our setup.py, and
> more reliably thanks to using a real build tool in the backend (waf, but
> you can add support for a different one if you want).
>
> That is nice indeed. But why to invent yet another scripting language for
info files or good old python is not good enough?
BTW are bento and waf sources included in that 50% reduction?


-- 
Mikhail Terekhov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110421/d8714f04/attachment.html>

From glyph at twistedmatrix.com  Fri Apr 22 00:03:48 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 22 Apr 2011 02:03:48 -0400
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4DB0D373.9020909@silveregg.co.jp>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
	<4DB0D373.9020909@silveregg.co.jp>
Message-ID: <0ABFC28B-875C-4F13-8F2A-3288E8A9DF4C@twistedmatrix.com>


On Apr 21, 2011, at 9:01 PM, David wrote:

> You can take a look at bento, which is my own response to the distutils 
> issues we have in the scipy community (but I would expect twisted and 
> most big python libraries to have similar issues):
> 
> http://cournape.github.com/Bento/
> 
> It is designed from the ground up with the idea of reliable 
> customization and complex build supports. It can already build numpy and 
> scipy with a near 50 % reduction in LOC compared to our setup.py, and 
> more reliably thanks to using a real build tool in the backend (waf, but 
> you can add support for a different one if you want).

This looks very interesting.  You kind of bury the lead on that web page though, so let me excerpt it for those who saw the first line, thought "oh, it's yet another python packaging thing" and stopped reading in disgust:

Even better, bento has a distutils compatibiliy layer so that you can write a simple setup.py which works under pip or easy_install.

(emphasis mine)

This suggests that Twisted could actually switch to Bento without creating a massive disruption for our users who want to install it with an existing automation tool - which, frankly, is the main use-case for distutils at this point.

Would you recommend that we do this?  Would there be a benefit?  I like the part where you said "near 50% reduction in LOC" quite a lot but I'm sure there are issues that would come along with it.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110422/c4da83a1/attachment.html>

From techtonik at gmail.com  Fri Apr 22 00:41:45 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Fri, 22 Apr 2011 09:41:45 +0300
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4DB0D373.9020909@silveregg.co.jp>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
	<4DB0D373.9020909@silveregg.co.jp>
Message-ID: <BANLkTi=PrvjwY+eEtienxqxsCvT_enFWeg@mail.gmail.com>

On Fri, Apr 22, 2011 at 4:01 AM, David <david at silveregg.co.jp> wrote:
> On 04/22/2011 06:21 AM, anatoly techtonik wrote:
>> On Thu, Apr 21, 2011 at 4:48 AM, Kevin Horn<kevin.horn at gmail.com>  wrote:
>>>
>>> cluster****.  So he rewrote distutils with an eye on keeping things nice for
>>> everyone.  Project managers, distro packagers, users installing software,
>>> etc.  This is distutils2.  In Python 3.3 and up it will be called
>>> "packaging".  Once people start using it, it will make a lot of the current
>>> packaging headaches in the Python world go away.
>>
>> Are you sure about that? Where is the list of stories it will solve
>> when people start using it, so I can check that my cases are covered
>> by distutils2 insurance plan?
>
> [OT]
> You can take a look at bento, which is my own response to the distutils
> issues we have in the scipy community (but I would expect twisted and
> most big python libraries to have similar issues):
>
> http://cournape.github.com/Bento/
>
> It is designed from the ground up with the idea of reliable
> customization and complex build supports. It can already build numpy and
> scipy with a near 50 % reduction in LOC compared to our setup.py, and
> more reliably thanks to using a real build tool in the backend (waf, but
> you can add support for a different one if you want).

[OT]
I still can't see how it solves even the basic user story - 'i want to
uninstall twisted' or 'i want two versions of twisted installed'.
Absolute paths in examples won't work on Windows, hardcoded version
field in .info file is inconvenient. It looks like yet another pip,
distribute or easy_install. Don't get me wrong - it looks better - but
for yet another nih packaging solution there should be some convincing
facts or use cases (examples) of why this particular solution is
better. In fact, I'd like to see Wikipedia like comparison for
different 'packaging solutions' somewhere at
http://wiki.python.org/moin/Packaging because I don't use anything
except, well, easy_install, which can't even install protocol buffers.
I guess bento can?
--
anatoly t.



From david at silveregg.co.jp  Fri Apr 22 01:44:37 2011
From: david at silveregg.co.jp (David)
Date: Fri, 22 Apr 2011 16:44:37 +0900
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <BANLkTi=SavZ07sPXmf3DL9F_KNcNp=dO1A@mail.gmail.com>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
	<4DB0D373.9020909@silveregg.co.jp>
	<BANLkTi=SavZ07sPXmf3DL9F_KNcNp=dO1A@mail.gmail.com>
Message-ID: <4DB131E5.8020902@silveregg.co.jp>

On 04/22/2011 12:13 PM, Mikhail Terekhov wrote:
> On Thu, Apr 21, 2011 at 9:01 PM, David <david at silveregg.co.jp
> <mailto:david at silveregg.co.jp>> wrote:
>
>     On 04/22/2011 06:21 AM, anatoly techtonik wrote:
>      > On Thu, Apr 21, 2011 at 4:48 AM, Kevin Horn<kevin.horn at gmail.com
>     <mailto:kevin.horn at gmail.com>>  wrote:
>      >>
>      >> cluster****.  So he rewrote distutils with an eye on keeping
>     things nice for
>      >> everyone.  Project managers, distro packagers, users installing
>     software,
>      >> etc.  This is distutils2.  In Python 3.3 and up it will be called
>      >> "packaging".  Once people start using it, it will make a lot of
>     the current
>      >> packaging headaches in the Python world go away.
>      >
>      > Are you sure about that? Where is the list of stories it will solve
>      > when people start using it, so I can check that my cases are covered
>      > by distutils2 insurance plan?
>
>     [OT]
>     You can take a look at bento, which is my own response to the distutils
>     issues we have in the scipy community (but I would expect twisted and
>     most big python libraries to have similar issues):
>
>     http://cournape.github.com/Bento/
>
>     It is designed from the ground up with the idea of reliable
>     customization and complex build supports. It can already build numpy and
>     scipy with a near 50 % reduction in LOC compared to our setup.py, and
>     more reliably thanks to using a real build tool in the backend (waf, but
>     you can add support for a different one if you want).
>
> That is nice indeed. But why to invent yet another scripting language for
> info files or good old python is not good enough?

The point is to have a mini DSL which is near static, so that it can 
safely be analysed server-side. *IF* you need more power (like numpy), 
then there is the notion of hook file which are straight python files 
(no restriction, except it has to be under the control of bento).

Note that languages which are arguably more powerful than python, like 
Haskell, use the same thing: Cabal, the "haskell distutils" uses the 
same format. Actually, I shamelessly copied their format for bento.info

> BTW are bento and waf sources included in that 50% reduction?

Waf, no, but bento+bento script is smaller than 
numpy.distutils+setup.py. If you count distutils itself, then I would 
not be surprised that waf+bento+bento script < 
distutils+numpy.distutils+setup.py, but that would need checking. And 
bento/waf have clear boundaries (different project, different 
maintainers, different histories), wheras numpy.distutils/distutils 
definitly does not have that.

cheers,

David



From david at silveregg.co.jp  Fri Apr 22 01:51:17 2011
From: david at silveregg.co.jp (David)
Date: Fri, 22 Apr 2011 16:51:17 +0900
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <BANLkTi=PrvjwY+eEtienxqxsCvT_enFWeg@mail.gmail.com>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
	<4DB0D373.9020909@silveregg.co.jp>
	<BANLkTi=PrvjwY+eEtienxqxsCvT_enFWeg@mail.gmail.com>
Message-ID: <4DB13375.3040609@silveregg.co.jp>

On 04/22/2011 03:41 PM, anatoly techtonik wrote:
> On Fri, Apr 22, 2011 at 4:01 AM, David<david at silveregg.co.jp>  wrote:
>> On 04/22/2011 06:21 AM, anatoly techtonik wrote:
>>> On Thu, Apr 21, 2011 at 4:48 AM, Kevin Horn<kevin.horn at gmail.com>    wrote:
>>>>
>>>> cluster****.  So he rewrote distutils with an eye on keeping things nice for
>>>> everyone.  Project managers, distro packagers, users installing software,
>>>> etc.  This is distutils2.  In Python 3.3 and up it will be called
>>>> "packaging".  Once people start using it, it will make a lot of the current
>>>> packaging headaches in the Python world go away.
>>>
>>> Are you sure about that? Where is the list of stories it will solve
>>> when people start using it, so I can check that my cases are covered
>>> by distutils2 insurance plan?
>>
>> [OT]
>> You can take a look at bento, which is my own response to the distutils
>> issues we have in the scipy community (but I would expect twisted and
>> most big python libraries to have similar issues):
>>
>> http://cournape.github.com/Bento/
>>
>> It is designed from the ground up with the idea of reliable
>> customization and complex build supports. It can already build numpy and
>> scipy with a near 50 % reduction in LOC compared to our setup.py, and
>> more reliably thanks to using a real build tool in the backend (waf, but
>> you can add support for a different one if you want).
>
> [OT]
> I still can't see how it solves even the basic user story - 'i want to
> uninstall twisted' or 'i want two versions of twisted installed'.

Bento's point is: make packagers life easier (without making life of 
users more miserable), so that you are more likely than before to be 
able to use the native tools. People who are happy installing from 
sources will not be disrupted, and people like me who hate source 
install and love linux packaging (or windows .msi for that matter) can 
actually build those without going insane trying to understand distutils.

> Absolute paths in examples won't work on Windows

Of course they do - like in distutils, I translate them inside bento so 
that everything works on any platform.

cheers,

David



From david at silveregg.co.jp  Fri Apr 22 03:03:59 2011
From: david at silveregg.co.jp (David)
Date: Fri, 22 Apr 2011 18:03:59 +0900
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <0ABFC28B-875C-4F13-8F2A-3288E8A9DF4C@twistedmatrix.com>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
	<4DB0D373.9020909@silveregg.co.jp>
	<0ABFC28B-875C-4F13-8F2A-3288E8A9DF4C@twistedmatrix.com>
Message-ID: <4DB1447F.4030109@silveregg.co.jp>

On 04/22/2011 03:03 PM, Glyph Lefkowitz wrote:
>
> On Apr 21, 2011, at 9:01 PM, David wrote:
>
>> You can take a look at bento, which is my own response to the distutils
>> issues we have in the scipy community (but I would expect twisted and
>> most big python libraries to have similar issues):
>>
>> http://cournape.github.com/Bento/
>>
>> It is designed from the ground up with the idea of reliable
>> customization and complex build supports. It can already build numpy and
>> scipy with a near 50 % reduction in LOC compared to our setup.py, and
>> more reliably thanks to using a real build tool in the backend (waf, but
>> you can add support for a different one if you want).
>
> This looks /very/ interesting. You kind of bury the lead on that web
> page though, so let me excerpt it for those who saw the first line,
> thought "oh, it's yet another python packaging thing" and stopped
> reading in disgust:
>
>     Even better, bento has a distutils compatibiliy layer
>     <http://cournape.github.com/Bento/html/transition.html> so that you
>     can write a simple setup.py *which works under pip or easy_install*.
>
>
> (emphasis mine)
>
> This suggests that Twisted could actually /switch/ to Bento without
> creating a massive disruption for our users who want to install it with
> an existing automation tool - which, frankly, is the main use-case for
> distutils at this point.
>
> Would you recommend that we do this? Would there be a benefit? I like
> the part where you said "near 50% reduction in LOC" quite a lot but I'm
> sure there are issues that would come along with it.

Actually, twisted is on my list of packages to convert to bento to get a 
feeling of what's missing in bento :) To get an actual idea of what it 
is looking ATM, you can see here: 
https://github.com/cournape/numpy/tree/bento_waf_build (bento.info and 
bscript - especially numpy/core/bscript).

The reason why the distutils compatibility thing is not emphasized is 
because I cannot possibly support what makes bento interesting in my 
mind under this mode: out of tree builds, hooks support, recursive 
description, pluggable build backend, etc... After all, if I could 
support what I have in mind with distutils, I would have started from 
distutils and not from scratch (I already did in a former life, and 
bento is born out of that failure).

Now, concerning the use of pip/easy_install: if those tools's author 
were willing to add hook to support additional tool, it would not take 
much. Fundamentally, you only need to say "bentomaker install" instead 
of "python setup.py install", plus all the dirty details. This will be 
needed anyway with the distutils2 effort, since they have also started 
using a static format description and python setup.py install will not 
work anymore (IIRC).

As for what you would gain doing so:
	- robust recursive support (things like relativeTo as used in twisted 
are inherently fragile once you don't want to assume source tree == 
current directory)
	- automatic dependency handling, easy customization and parallel 
support for compiled code (waf automatically scan sources to find header 
dependencies - waf has its quircks, but it has been recently used by 
SAMBA, which is a pretty good endorsement in my mind as far as complex 
builds go)
	- a simple and robust way to install data files (install things in 
chroots will finally be possible, a pet-peeve of mine when deploying 
twisted apps)
	- it would help me evangelizing bento :)

As you mentioned, most people say "sigh, another packaging python 
thing". I have not found a good angle to quickly describe what I am 
doing, because it is more about the how than the what. Maybe you could 
say that bento is trying the "pylons approach" of reusing existing 
tools, whereas distutils is more of the "django approach". For the scipy 
community (where I am coming from), the advantages of using a real build 
tool with dependency handling is obvious, but many people don't care 
about that.

Note that bento is currently a moving target, but I hope to be close to 
a first alpha in a couple of months (bento development has started in 
december 2009). I am careful with timing because I don't want to 
reproduce the precedent of setuptools which became popular but with 
issues that became too costly to fix afterwards.

cheers,

David



From exarkun at twistedmatrix.com  Fri Apr 22 05:53:58 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 22 Apr 2011 11:53:58 -0000
Subject: [Twisted-Python] Understanding deferred and error handling
In-Reply-To: <4DB0D18F.7080907@silveregg.co.jp>
References: <4DAE60E9.80903@silveregg.co.jp> <4DAF186B.5000000@imperial.ac.uk>
	<BANLkTik3ZR+KCyj=3sgG4ZcbSqFnfGFYPA@mail.gmail.com>
	<20110421011243.1992.1848266191.divmod.xquotient.886@localhost.localdomain>
	<4DB0D18F.7080907@silveregg.co.jp>
Message-ID: <20110422115358.1992.1061083053.divmod.xquotient.897@localhost.localdomain>

On 12:53 am, david at silveregg.co.jp wrote:
>On 04/21/2011 10:12 AM, exarkun at twistedmatrix.com wrote:
>>log.err takes an additional argument which you can use easily like 
>>this:
>>
>>      def main():
>>          d = remote_call()
>>          d.addErrback(log.err, "remote_call failed")
>>          def _stop(ignored):
>>              reactor.stop()
>>          d.addCallback(_stop)
>>
>>The message you pass here will replace the "Unhandled error in 
>>Deferred"
>>text in the report of the failure.
>
>ok, thanks for the tip.
>>
>>Another option is to enable Deferred debugging, which I think someone
>>mentioned earlier in the thread:
>>
>>      from twisted.internet.defer import setDebugging
>>      setDebugging(True)
>>
>>or
>>
>>      twistd --debug ...
>>
>>or
>>
>>      trial --debug ...
>>
>>This causes Deferred to capture the stack at the time it is created 
>>and
>>the time it is called back.  The "Unhandled error" case will log this
>>information.  This should give you the traceback you want.  This is 
>>not
>>enabled by default because (I suppose) capturing stacks is very
>>expensive.
>
>I am not so interested in "debug runs", but more in a way to get more
>informations of our tool stack bugs when run in production. I guess 
>what
>I am looking for is some good practices for dealing with errors, then.
>Maybe a piece of code in twisted itself ?

It's mostly just a matter of having errbacks in all the right places. 
Don't let a Deferred get garbage collected with a Failure.  Always have 
an error handler at the end, even if it's just an error handler to log 
the failure.

Jean-Paul



From techtonik at gmail.com  Fri Apr 22 09:02:55 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Fri, 22 Apr 2011 18:02:55 +0300
Subject: [Twisted-Python] Twisted Plugins - Implementation Discussion
In-Reply-To: <4DB13375.3040609@silveregg.co.jp>
References: <20110407003518.GD764@thorne.id.au> <87hb9u9v00.fsf@mekk.waw.pl>
	<20110419161328.1992.986896502.divmod.xquotient.827@localhost.localdomain>
	<77A2D091-4F30-4DD6-BF4C-5F14E7AB8655@twistedmatrix.com>
	<BANLkTimskGMkeH3+2n3UMiFf263TSKH6Zw@mail.gmail.com>
	<BANLkTi=XLdZDgp+Kfkn=h4p5jxRryBS7RA@mail.gmail.com>
	<4DB0D373.9020909@silveregg.co.jp>
	<BANLkTi=PrvjwY+eEtienxqxsCvT_enFWeg@mail.gmail.com>
	<4DB13375.3040609@silveregg.co.jp>
Message-ID: <BANLkTimoddg8dqTbVj3O-Q8Z=Em9aezOQQ@mail.gmail.com>

On Fri, Apr 22, 2011 at 10:51 AM, David <david at silveregg.co.jp> wrote:
>
>> [OT]
>> I still can't see how it solves even the basic user story - 'i want to
>> uninstall twisted' or 'i want two versions of twisted installed'.
>
> Bento's point is: make packagers life easier (without making life of
> users more miserable), so that you are more likely than before to be
> able to use the native tools.

You do an awesome thing, but it will be a total waste of time if
Fellowship of the Packaging fails to make life of Python users better.
I am sure their ranks will appreciate your experience in this area. ;)
--
anatoly t.



From exarkun at twistedmatrix.com  Sat Apr 23 22:05:22 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Apr 2011 04:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1303617922.56.306891918@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110424/0398ce68/attachment-0001.html>

From albert.brandl at weiermayer.com  Tue Apr 26 04:21:42 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Tue, 26 Apr 2011 12:21:42 +0200
Subject: [Twisted-Python] Question about StreamServerEndpointService
Message-ID: <20110426102142.GA12757@weiermayer.com>

Hi!

I have a question regarding `t.a.i.StreamServerEndpointService`. This 
class maintains an attribute `_waitingForPort` that holds the deferred 
returned by the `listen` method of the endpoint.

If this attribute is None, the method `privilegedStartService` is called 
by `startService`, triggering the endpoint's `listen` method (among 
other things).

I don't understand why this attribute is not reset to `None` when 
`stopService` is executed. With the deferred still around, starting the 
service again doesn't seem to work as expected, since it will not call 
`privilegedStartService` the second time.

I might be wrong, but this looks like a bug to me. Maybe I didn't
understand how to use this class, though...

Any comments?

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistraße 12, A-4813 Altmünster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com



From hackingkk at gmail.com  Tue Apr 26 08:04:51 2011
From: hackingkk at gmail.com (hackingKK)
Date: Tue, 26 Apr 2011 19:34:51 +0530
Subject: [Twisted-Python] some confusion with daemonising my twisted
	application.
In-Reply-To: <BANLkTi=C1XMCG_W05umNQPM2Wy09V=+GQQ@mail.gmail.com>
References: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
	<BANLkTi=C1XMCG_W05umNQPM2Wy09V=+GQQ@mail.gmail.com>
Message-ID: <4DB6D103.6080509@gmail.com>

Hello all.
I have been using the twisted library for quite some time and I must say 
it is the best library for xmlrpc.
I have a tcp server listening on a port and I use reactor.run() to start it.
Now I want to learn how to daemonise the entire code.

I am paisting the code below.


from twisted.web import xmlrpc, server
#reactor from the twisted library starts the server with a published 
object and listens on a given port.
from twisted.internet import reactor
from time import strftime
import rpc_organisation
import rpc_vendor
import rpc_customer
import rpc_product

#rest of the modules similarly imported, each containing a class 
inherited from xmlrpc.XMLRPC

#the main class
class gnukhata(xmlrpc.XMLRPC):

#note that all the functions to be accessed by the client must have the 
xmlrpc_ prefix.
     def __init__(self):
         xmlrpc.XMLRPC.__init__(self)

#the client however will not use the prefix to call the functions.
         #self.client_id = dbconnect.getConnection()

     def xmlrpc_getOrganisationNames(self):
         #this function is used to return the list of organsations found 
in gnukhata.xml located at /etc.Returns a list of organisations already 
present in the file
         #calling the function for getting list of organisation nodes.

         orgs = dbconnect.getOrgList()
#initialising an empty list for organisation names
         orgnames = []
         for org in orgs:
             orgname=org.find("orgname")
             #checking for unique names.
             #we will use the not in clause here.
             if orgname.text not in orgnames:
                 orgnames.append(orgname.text)

         return orgnames



#similarly a few other methods for this class.

#create an instance of the class to be published as the service.
print "initialising application"
gnukhata = gnukhata()
organisation = rpc_organisation.organisation()
gnukhata.putSubHandler('organisation',organisation)
people = rpc_people.people()
gnukhata.putSubHandler('people',people)
vendor = rpc_vendor.vendor()
gnukhata.putSubHandler('vendor',vendor)

#... and so on.

#Now the code for running the server.


#publish the object and make it to listen on the given port through reactor
print "starting server"
reactor.listenTCP(7081, server.Site(gnukhata))
#start the service by running the reactor.
reactor.run()

The code is from a python script called rpc_main.py which is in a 
package gnukahta where all other classes are also kept.
  to run it right now, I get into the gnukhata directory and do a sudo 
./rpc_main.py because some actions in this file need sudo permission.

Now could some one tell me how to convert this reactor running process 
into a daemon?
right now when I run this rpc_main.py file, the terminal does not return 
the prompt.
I used ./rpc_main.py & to get the terminal back.
But on a remote server this process is naturally killed when i logout 
from the remote shell.
Besides I have to make this as a package so making a daeminised version 
to run is a good option.
I have been reading a lot on this issue but did not find any good answer.
I am not so much into the details of how twisted works except for this much.
I guess my code would reflect how little I know about this amaising library.
So I just want to know if I have to write a seperate file to run this as 
a daemon?
As a side note, I used twistd -y rpc_main.py to see what happens.
I got complaints on the imports like the one given at the top of my code.
These modules are in the same gnukhata package as the rpc_main.py itself 
and run perfectly in other conditions.
So please help, this is really confusing me.
Thanking all,
Happy hacking.
Krishnakant.




From juanito1982 at gmail.com  Tue Apr 26 09:42:35 2011
From: juanito1982 at gmail.com (=?ISO-8859-1?Q?Juan_Antonio_Iba=F1ez_Santorum?=)
Date: Tue, 26 Apr 2011 17:42:35 +0200
Subject: [Twisted-Python] 100% CPU on high opened descriptors
Message-ID: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>

Hello!

   I have a Linux box serving my twisted app. All works ok except after some
days running (where I can see my CPU going to 100%). I saw that CPU goes
100% usage when the app reaches to 1024 opened descriptors (sockets). It
seems TM isn't closing some connections when clients loose connection to the
server. I have no more than 200 simultaneous clients, each of then using a
single connection. Any idea why those connections remain open?

Regards
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110426/b571a294/attachment-0001.html>

From glyph at twistedmatrix.com  Tue Apr 26 11:48:54 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Apr 2011 13:48:54 -0400
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
References: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
Message-ID: <7750702C-28EF-4E06-B49C-689945BF606E@twistedmatrix.com>

On Apr 26, 2011, at 11:42 AM, Juan Antonio Ibañez Santorum wrote:

>    I have a Linux box serving my twisted app. All works ok except after some days running (where I can see my CPU going to 100%). I saw that CPU goes 100% usage when the app reaches to 1024 opened descriptors (sockets). It seems TM isn't closing some connections when clients loose connection to the server. I have no more than 200 simultaneous clients, each of then using a single connection. Any idea why those connections remain open?

This is a bug that somebody should really fix.  <http://tm.tl/816>

To work around it, however: if a connection is closed "uncleanly" (for example: you close your laptop, you rip the ethernet cable out of the wall, you foolishly give your computer to zooko for a minute), and no traffic is going in either direction, it will remain "open" as far as the server is concerned, forever.

If you send a little bit of traffic (an application-level ping) to each client every so often, the server's TCP stack will notice that nobody is acknowledging it and eventually time them out and close the connections.

Alternately, you could fix an even older bug, <http://tm.tl/78>, which would allow you to immediately terminate "dead" connections without waiting for them to time out.

Good luck,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110426/c55ba49c/attachment.html>

From luke-lists at hybrid-logic.co.uk  Tue Apr 26 12:08:40 2011
From: luke-lists at hybrid-logic.co.uk (Luke Marsden)
Date: Tue, 26 Apr 2011 19:08:40 +0100
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
References: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
Message-ID: <1303841320.3370.116.camel@pow>

On Tue, 2011-04-26 at 17:42 +0200, Juan Antonio Ibañez Santorum wrote:
> Hello!
>    I have a Linux box serving my twisted app. All works ok except
> after some days running (where I can see my CPU going to 100%). I saw
> that CPU goes 100% usage when the app reaches to 1024 opened
> descriptors (sockets).

You can also switch to using the "poll" reactor, which will allow you to
sustain more than 1024 connections.  You should still figure out what is
keeping your connections open and find a way to reap them however, as
this will just delay the problem.  As Glyph suggested an application
level "ping" may help here.

In the mean-time you can switch to the poll reactor by adding "-r poll"
to your twistd command.

-- 
Best Regards,
Luke Marsden
CTO, Hybrid Logic Ltd.

Web: http://www.hybrid-cluster.com/
Hybrid Web Cluster - cloud web hosting

Phone: +447791750420





From rgacote at appropriatesolutions.com  Tue Apr 26 14:34:09 2011
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Tue, 26 Apr 2011 16:34:09 -0400 (EDT)
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <1303841320.3370.116.camel@pow>
Message-ID: <14772627.148.1303850048947.JavaMail.rgacote@ip-237.corp.appropriatesolutions.com>

----- Original Message -----
> From: "Luke Marsden" <luke-lists at hybrid-logic.co.uk>
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Sent: Tuesday, April 26, 2011 2:08:40 PM
> Subject: Re: [Twisted-Python] 100% CPU on high opened descriptors
> On Tue, 2011-04-26 at 17:42 +0200, Juan Antonio Ibañez Santorum wrote:
> > Hello!
> >    I have a Linux box serving my twisted app. All works ok except
> > after some days running (where I can see my CPU going to 100%). I
> > saw
> > that CPU goes 100% usage when the app reaches to 1024 opened
> > descriptors (sockets).

I assume that using a reverse proxy (Apache, nginx, etc.) in front of Twisted removes this problem? 
(or at least displaces it from being Twisted's problem to being the proxies problem.)

Is it recommended to always run Twisted behind a proxy? 
We've been doing that simply to offload delivery to the final client, but I'm thinking it may have a 
more general need.

--Ray



From glyph at twistedmatrix.com  Tue Apr 26 15:30:41 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Apr 2011 17:30:41 -0400
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <14772627.148.1303850048947.JavaMail.rgacote@ip-237.corp.appropriatesolutions.com>
References: <14772627.148.1303850048947.JavaMail.rgacote@ip-237.corp.appropriatesolutions.com>
Message-ID: <82B5C858-6C53-489E-B9A1-547B32125BD5@twistedmatrix.com>


On Apr 26, 2011, at 4:34 PM, Ray Cote wrote:

> ----- Original Message -----
>> From: "Luke Marsden" <luke-lists at hybrid-logic.co.uk>
>> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>> Sent: Tuesday, April 26, 2011 2:08:40 PM
>> Subject: Re: [Twisted-Python] 100% CPU on high opened descriptors
>> On Tue, 2011-04-26 at 17:42 +0200, Juan Antonio Ibañez Santorum wrote:
>>> Hello!
>>>   I have a Linux box serving my twisted app. All works ok except
>>> after some days running (where I can see my CPU going to 100%). I
>>> saw
>>> that CPU goes 100% usage when the app reaches to 1024 opened
>>> descriptors (sockets).
> 
> I assume that using a reverse proxy (Apache, nginx, etc.) in front of Twisted removes this problem? 
> (or at least displaces it from being Twisted's problem to being the proxies problem.)
> 
> Is it recommended to always run Twisted behind a proxy?

No.  It's recommended to fix bugs in Twisted that affect you :).  And besides, this problem is not specific to HTTP; it affects any Twisted service that runs on a port, so there are lots of uses of Twisted where you can't run Twisted behind a proxy.

Plus, this affects clients as well; if you have a twisted spidering application, your client connections could get into this same state.  It's possible to handle this sort of attack without any changes to Twisted, by carefully monitoring the number of connections you have open.

Of course most people just crank up their ulimits and forget about it.

> We've been doing that simply to offload delivery to the final client, but I'm thinking it may have a more general need.

If you have to do it anyway then the discussion is somewhat academic, isn't it? :)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110426/d23de324/attachment.html>

From andrew at bemusement.org  Tue Apr 26 17:39:45 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 27 Apr 2011 09:39:45 +1000
Subject: [Twisted-Python] some confusion with daemonising my twisted
 application.
In-Reply-To: <4DB6D103.6080509@gmail.com>
References: <E8767366-3031-4EF2-A1A0-E13A1C8CB9BE@googlemail.com>
	<BANLkTi=C1XMCG_W05umNQPM2Wy09V=+GQQ@mail.gmail.com>
	<4DB6D103.6080509@gmail.com>
Message-ID: <20110426233945.GB3700@aihal.home.puzzling.org>

hackingKK wrote:
> Hello all.
> I have been using the twisted library for quite some time and I must say 
> it is the best library for xmlrpc.
> I have a tcp server listening on a port and I use reactor.run() to start it.
> Now I want to learn how to daemonise the entire code.
[…]
> So I just want to know if I have to write a seperate file to run this as 
> a daemon?
> As a side note, I used twistd -y rpc_main.py to see what happens.

Using twistd -y is a good way to daemonise your Twisted program, but the -y
option takes a “TAC” file, not just any Python file.  They are briefly
described, including an example, here:
<http://twistedmatrix.com/documents/current/core/howto/application.html#auto5>

The really short version is rather than calling reactor methods like
reactor.connectTCP directly, you create a bunch of service objects that will do
those things when started, and attach those to an Application instance called
“application”.  That's a TAC file.

-Andrew.




From glyph at twistedmatrix.com  Tue Apr 26 23:19:28 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 27 Apr 2011 01:19:28 -0400
Subject: [Twisted-Python] Question about StreamServerEndpointService
In-Reply-To: <20110426102142.GA12757@weiermayer.com>
References: <20110426102142.GA12757@weiermayer.com>
Message-ID: <5E571F9A-1408-4D6E-9E69-BC9AEB7B418B@twistedmatrix.com>


On Apr 26, 2011, at 6:21 AM, Albert Brandl wrote:

> I might be wrong, but this looks like a bug to me. Maybe I didn't
> understand how to use this class, though...

I haven't investigated too thoroughly, but it sounds like you have, and this does indeed sound like a bug.  Could you write it up (<http://twistedmatrix.com/trac/newticket>), so it doesn't get lost?

Thanks,

-g


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110427/b5a5dc2a/attachment.html>

From juanito1982 at gmail.com  Wed Apr 27 00:01:07 2011
From: juanito1982 at gmail.com (=?ISO-8859-1?Q?Juan_Antonio_Iba=F1ez_Santorum?=)
Date: Wed, 27 Apr 2011 08:01:07 +0200
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <1303841320.3370.116.camel@pow>
References: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
	<1303841320.3370.116.camel@pow>
Message-ID: <BANLkTik0D+3zNVsDynBYSvG-Ksk8S9spgg@mail.gmail.com>

Is that the unique way to get mor than 1024 simultaneous connections?

Regads

2011/4/26 Luke Marsden <luke-lists at hybrid-logic.co.uk>

> On Tue, 2011-04-26 at 17:42 +0200, Juan Antonio Ibañez Santorum wrote:
> > Hello!
> >    I have a Linux box serving my twisted app. All works ok except
> > after some days running (where I can see my CPU going to 100%). I saw
> > that CPU goes 100% usage when the app reaches to 1024 opened
> > descriptors (sockets).
>
> You can also switch to using the "poll" reactor, which will allow you to
> sustain more than 1024 connections.  You should still figure out what is
> keeping your connections open and find a way to reap them however, as
> this will just delay the problem.  As Glyph suggested an application
> level "ping" may help here.
>
> In the mean-time you can switch to the poll reactor by adding "-r poll"
> to your twistd command.
>
> --
> Best Regards,
> Luke Marsden
> CTO, Hybrid Logic Ltd.
>
> Web: http://www.hybrid-cluster.com/
> Hybrid Web Cluster - cloud web hosting
>
> Phone: +447791750420
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110427/e9af8bcf/attachment.html>

From luke-lists at hybrid-logic.co.uk  Wed Apr 27 00:28:01 2011
From: luke-lists at hybrid-logic.co.uk (Luke Marsden)
Date: Wed, 27 Apr 2011 07:28:01 +0100
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <BANLkTik0D+3zNVsDynBYSvG-Ksk8S9spgg@mail.gmail.com>
References: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
	<1303841320.3370.116.camel@pow>
	<BANLkTik0D+3zNVsDynBYSvG-Ksk8S9spgg@mail.gmail.com>
Message-ID: <1303885681.3370.120.camel@pow>

>> 2011/4/26 Luke Marsden <luke-lists at hybrid-logic.co.uk>
>> You can also switch to using the "poll" reactor

On Wed, 2011-04-27 at 08:01 +0200, Juan Antonio Ibañez Santorum wrote:
> Is that the unique way to get mor than 1024 simultaneous connections?
> 
> 
> Regads
> 

On Linux and BSD, yes. See
http://twistedmatrix.com/documents/current/core/howto/choosing-reactor.html for all the options for different platforms.

-- 
Best Regards,
Luke Marsden
CTO, Hybrid Logic Ltd.

Web: http://www.hybrid-cluster.com/
Hybrid Web Cluster - cloud web hosting

Phone: +447791750420





From juanito1982 at gmail.com  Wed Apr 27 00:48:59 2011
From: juanito1982 at gmail.com (=?ISO-8859-1?Q?Juan_Antonio_Iba=F1ez_Santorum?=)
Date: Wed, 27 Apr 2011 08:48:59 +0200
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <1303885681.3370.120.camel@pow>
References: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
	<1303841320.3370.116.camel@pow>
	<BANLkTik0D+3zNVsDynBYSvG-Ksk8S9spgg@mail.gmail.com>
	<1303885681.3370.120.camel@pow>
Message-ID: <BANLkTinRRPffSqGSEjg3rYgFcW35DVQ-7A@mail.gmail.com>

Must I make any change appart from start the app with twistd plus '-r poll'?

2011/4/27 Luke Marsden <luke-lists at hybrid-logic.co.uk>

> >> 2011/4/26 Luke Marsden <luke-lists at hybrid-logic.co.uk>
> >> You can also switch to using the "poll" reactor
>
> On Wed, 2011-04-27 at 08:01 +0200, Juan Antonio Ibañez Santorum wrote:
> > Is that the unique way to get mor than 1024 simultaneous connections?
> >
> >
> > Regads
> >
>
> On Linux and BSD, yes. See
> http://twistedmatrix.com/documents/current/core/howto/choosing-reactor.htmlfor all the options for different platforms.
>
> --
> Best Regards,
> Luke Marsden
> CTO, Hybrid Logic Ltd.
>
> Web: http://www.hybrid-cluster.com/
> Hybrid Web Cluster - cloud web hosting
>
> Phone: +447791750420
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110427/8cefe166/attachment.html>

From twisted at patrickmylund.com  Wed Apr 27 00:58:13 2011
From: twisted at patrickmylund.com (Patrick Mylund Nielsen)
Date: Wed, 27 Apr 2011 08:58:13 +0200
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <BANLkTinRRPffSqGSEjg3rYgFcW35DVQ-7A@mail.gmail.com>
References: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
	<1303841320.3370.116.camel@pow>
	<BANLkTik0D+3zNVsDynBYSvG-Ksk8S9spgg@mail.gmail.com>
	<1303885681.3370.120.camel@pow>
	<BANLkTinRRPffSqGSEjg3rYgFcW35DVQ-7A@mail.gmail.com>
Message-ID: <BANLkTi=jFgrZeK4_o+2fezan7CTVoHEnHw@mail.gmail.com>

That is sufficient, yes.

You might even want to make that 'epoll' since it scales better than
poll (assuming you're running on Linux 2.6+ only)

Best,
Patrick

2011/4/27 Juan Antonio Ibañez Santorum <juanito1982 at gmail.com>:
> Must I make any change appart from start the app with twistd plus '-r poll'?
>
> 2011/4/27 Luke Marsden <luke-lists at hybrid-logic.co.uk>
>>
>> >> 2011/4/26 Luke Marsden <luke-lists at hybrid-logic.co.uk>
>> >> You can also switch to using the "poll" reactor
>>
>> On Wed, 2011-04-27 at 08:01 +0200, Juan Antonio Ibañez Santorum wrote:
>> > Is that the unique way to get mor than 1024 simultaneous connections?
>> >
>> >
>> > Regads
>> >
>>
>> On Linux and BSD, yes. See
>>
>> http://twistedmatrix.com/documents/current/core/howto/choosing-reactor.html
>> for all the options for different platforms.
>>
>> --
>> Best Regards,
>> Luke Marsden
>> CTO, Hybrid Logic Ltd.
>>
>> Web: http://www.hybrid-cluster.com/
>> Hybrid Web Cluster - cloud web hosting
>>
>> Phone: +447791750420
>>
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From juanito1982 at gmail.com  Wed Apr 27 01:04:05 2011
From: juanito1982 at gmail.com (=?ISO-8859-1?Q?Juan_Antonio_Iba=F1ez_Santorum?=)
Date: Wed, 27 Apr 2011 09:04:05 +0200
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <BANLkTi=jFgrZeK4_o+2fezan7CTVoHEnHw@mail.gmail.com>
References: <BANLkTin2_NTrMJunnuZSPKZUWMYPvHwZvA@mail.gmail.com>
	<1303841320.3370.116.camel@pow>
	<BANLkTik0D+3zNVsDynBYSvG-Ksk8S9spgg@mail.gmail.com>
	<1303885681.3370.120.camel@pow>
	<BANLkTinRRPffSqGSEjg3rYgFcW35DVQ-7A@mail.gmail.com>
	<BANLkTi=jFgrZeK4_o+2fezan7CTVoHEnHw@mail.gmail.com>
Message-ID: <BANLkTim+MvudXKG3j6cxbFmw58yx0tW=-g@mail.gmail.com>

Thank you very much for your tip Patrick!

2011/4/27 Patrick Mylund Nielsen <twisted at patrickmylund.com>

> That is sufficient, yes.
>
> You might even want to make that 'epoll' since it scales better than
> poll (assuming you're running on Linux 2.6+ only)
>
> Best,
> Patrick
>
> 2011/4/27 Juan Antonio Ibañez Santorum <juanito1982 at gmail.com>:
> > Must I make any change appart from start the app with twistd plus '-r
> poll'?
> >
> > 2011/4/27 Luke Marsden <luke-lists at hybrid-logic.co.uk>
> >>
> >> >> 2011/4/26 Luke Marsden <luke-lists at hybrid-logic.co.uk>
> >> >> You can also switch to using the "poll" reactor
> >>
> >> On Wed, 2011-04-27 at 08:01 +0200, Juan Antonio Ibañez Santorum wrote:
> >> > Is that the unique way to get mor than 1024 simultaneous connections?
> >> >
> >> >
> >> > Regads
> >> >
> >>
> >> On Linux and BSD, yes. See
> >>
> >>
> http://twistedmatrix.com/documents/current/core/howto/choosing-reactor.html
> >> for all the options for different platforms.
> >>
> >> --
> >> Best Regards,
> >> Luke Marsden
> >> CTO, Hybrid Logic Ltd.
> >>
> >> Web: http://www.hybrid-cluster.com/
> >> Hybrid Web Cluster - cloud web hosting
> >>
> >> Phone: +447791750420
> >>
> >>
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110427/a8c8a062/attachment.html>

From dynamicgl at gmail.com  Wed Apr 27 01:28:12 2011
From: dynamicgl at gmail.com (Dfgqq Dfgqq)
Date: Wed, 27 Apr 2011 15:28:12 +0800
Subject: [Twisted-Python] Did anyone use twisted on windows (IOCP)?
Message-ID: <BANLkTi=YSPioN=WUJ4XnhUpowXzXAjav7w@mail.gmail.com>

Hi All

      Currently, i am planning rewrite some parts with twisted & iocp. These
parts are related
to Tcp connection without SSL.  I want to know whether IOCP is ready for
production or not.

   I ran some tests with twisted 10.20, 8.10 before. The IOCP part had many
problems. I haven't give a try with 11.0. What is the progress for windows
support?


Thanks

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110427/0401692c/attachment.html>

From albert.brandl at weiermayer.com  Wed Apr 27 02:26:28 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Wed, 27 Apr 2011 10:26:28 +0200
Subject: [Twisted-Python] Question about StreamServerEndpointService
In-Reply-To: <5E571F9A-1408-4D6E-9E69-BC9AEB7B418B@twistedmatrix.com>
References: <20110426102142.GA12757@weiermayer.com>
	<5E571F9A-1408-4D6E-9E69-BC9AEB7B418B@twistedmatrix.com>
Message-ID: <20110427082627.GA5676@weiermayer.com>

Hi!

On Wed, Apr 27, 2011 at 01:19:28AM -0400, Glyph Lefkowitz wrote:
> 
> I haven't investigated too thoroughly, but it sounds like you have, and 
> this does indeed sound like a bug.  Could you write it up 
> (<http://twistedmatrix.com /trac/newticket>), so it doesn't get lost?

Sure - http://twistedmatrix.com/trac/ticket/5071.

Best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistraße 12, A-4813 Altmünster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com



From glyph at twistedmatrix.com  Wed Apr 27 02:48:39 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 27 Apr 2011 04:48:39 -0400
Subject: [Twisted-Python] Did anyone use twisted on windows (IOCP)?
In-Reply-To: <BANLkTi=YSPioN=WUJ4XnhUpowXzXAjav7w@mail.gmail.com>
References: <BANLkTi=YSPioN=WUJ4XnhUpowXzXAjav7w@mail.gmail.com>
Message-ID: <944E490A-E548-4C98-B725-816C80AAFF81@twistedmatrix.com>


On Apr 27, 2011, at 3:28 AM, Dfgqq Dfgqq wrote:

> Hi All
> 
>       Currently, i am planning rewrite some parts with twisted & iocp. These parts are related
> to Tcp connection without SSL.  I want to know whether IOCP is ready for production or not.

Yes.  Many people use it in production.

>    I ran some tests with twisted 10.20, 8.10 before. The IOCP part had many problems. I haven't give a try with 11.0. What is the progress for windows support?

Can you provide links to the bug reports you filed when you encountered problems with the IOCP reactor in 8.1.0 and 10.2.0?  Then I can tell you if they were closed in 11.0 or not.

Thanks,

-glyph


From glyph at twistedmatrix.com  Wed Apr 27 02:50:17 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 27 Apr 2011 04:50:17 -0400
Subject: [Twisted-Python] Question about StreamServerEndpointService
In-Reply-To: <20110427082627.GA5676@weiermayer.com>
References: <20110426102142.GA12757@weiermayer.com>
	<5E571F9A-1408-4D6E-9E69-BC9AEB7B418B@twistedmatrix.com>
	<20110427082627.GA5676@weiermayer.com>
Message-ID: <940E3BEC-ABA0-4340-82A7-A809B629993F@twistedmatrix.com>


On Apr 27, 2011, at 4:26 AM, Albert Brandl wrote:

> Hi!
> 
> On Wed, Apr 27, 2011 at 01:19:28AM -0400, Glyph Lefkowitz wrote:
>> 
>> I haven't investigated too thoroughly, but it sounds like you have, and 
>> this does indeed sound like a bug.  Could you write it up 
>> (<http://twistedmatrix.com /trac/newticket>), so it doesn't get lost?
> 
> Sure - http://twistedmatrix.com/trac/ticket/5071.

Thanks a lot.  If you'd like to contribute a patch, of course, that would be doubly appreciated :).  Otherwise, someone will get to it eventually.  (This might even deserve the 'easy' keyword, as I think the bug is pretty straightforward... unfortunately the functionality requires understanding of a whole bunch of Twisted-specific concepts...)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110427/5d0bdac5/attachment.html>

From stephen at thorne.id.au  Wed Apr 27 03:23:54 2011
From: stephen at thorne.id.au (Stephen Thorne)
Date: Wed, 27 Apr 2011 19:23:54 +1000
Subject: [Twisted-Python] Did anyone use twisted on windows (IOCP)?
In-Reply-To: <944E490A-E548-4C98-B725-816C80AAFF81@twistedmatrix.com>
References: <BANLkTi=YSPioN=WUJ4XnhUpowXzXAjav7w@mail.gmail.com>
	<944E490A-E548-4C98-B725-816C80AAFF81@twistedmatrix.com>
Message-ID: <20110427092353.GA7952@thorne.id.au>

On 2011-04-27, Glyph Lefkowitz wrote:
> On Apr 27, 2011, at 3:28 AM, Dfgqq Dfgqq wrote:
> >       Currently, i am planning rewrite some parts with twisted &
> >       iocp. These parts are related to Tcp connection without SSL.
> >       I want to know whether IOCP is ready for production or not.
> 
> Yes.  Many people use it in production.

I use IOCP on Windows XP and Windows 7 in "production", including with
SSL, and we have not seen any problems.

-- 
Regards,
Stephen Thorne



From rgacote at appropriatesolutions.com  Wed Apr 27 07:52:47 2011
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Wed, 27 Apr 2011 09:52:47 -0400 (EDT)
Subject: [Twisted-Python] Did anyone use twisted on windows (IOCP)?
In-Reply-To: <BANLkTi=YSPioN=WUJ4XnhUpowXzXAjav7w@mail.gmail.com>
Message-ID: <23640143.179.1303912364946.JavaMail.rgacote@ip-237.corp.appropriatesolutions.com>

From: "Dfgqq Dfgqq" <dynamicgl at gmail.com> 


To: Twisted-Python at twistedmatrix.com 
Sent: Wednesday, April 27, 2011 3:28:12 AM 
Subject: [Twisted-Python] Did anyone use twisted on windows (IOCP)? 

Hi All 


Currently, i am planning rewrite some parts with twisted & iocp. These parts are related 
to Tcp connection without SSL. I want to know whether IOCP is ready for production or not. 


I ran some tests with twisted 10.20, 8.10 before. The IOCP part had many problems. I haven't give a try with 11.0. What is the progress for windows support? 




Thanks 


gelin yan 
We're using IOCP with SSL on Windows with Twisted 10.2 and have not encountered any problems. 
Still shaking it down in test. 
--Ray 


-- 


Ray Cote, President Appropriate Solutions, Inc. 
We Build Software 
www.AppropriateSolutions.com 603.924.6079 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110427/d65f53c7/attachment-0001.html>

From rgacote at appropriatesolutions.com  Wed Apr 27 07:54:07 2011
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Wed, 27 Apr 2011 09:54:07 -0400 (EDT)
Subject: [Twisted-Python] 100% CPU on high opened descriptors
In-Reply-To: <82B5C858-6C53-489E-B9A1-547B32125BD5@twistedmatrix.com>
Message-ID: <33297092.182.1303912442795.JavaMail.rgacote@ip-237.corp.appropriatesolutions.com>





No. It's recommended to fix bugs in Twisted that affect you :). Well, that too. :} 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110427/be1fba25/attachment.html>

From dynamicgl at gmail.com  Wed Apr 27 09:11:36 2011
From: dynamicgl at gmail.com (Dfgqq Dfgqq)
Date: Wed, 27 Apr 2011 23:11:36 +0800
Subject: [Twisted-Python] Did anyone use twisted on windows (IOCP)?
In-Reply-To: <944E490A-E548-4C98-B725-816C80AAFF81@twistedmatrix.com>
References: <BANLkTi=YSPioN=WUJ4XnhUpowXzXAjav7w@mail.gmail.com>
	<944E490A-E548-4C98-B725-816C80AAFF81@twistedmatrix.com>
Message-ID: <BANLkTin=Ncs72rqojk_sZDejFROB5uj=Hw@mail.gmail.com>

Hi glyph

   Thanks for your replying.. I didn't say it was a bug because it probably
caused by some incorrect usages.


my problem was:

we have thousands of machines connect on the server via tcp (the number of
machines might be varied from 3000 to 7000). all connections are long
connection which means server must hold the connections except the network
is broken. each machine send some data per second. when i trying to use
twisted as the server part, i noticed some connections lost after one hour.
I have tried 8.x and 10.20, connections lost still existed; however, this
problem didn't exist anymore with Twisted 11.0. This is the reason i was
curious: what Twisted 11.0 did to solve my problem?

      I noticed the news for 11.0 has one line about IOCP:

*IOCPReactor now sends immediate completions to the main loop (#3233)**
*

I guess it might be the reason. Now the latest version of twisted is working
fine. I really like it.

Regards

GELIN YAN

On Wed, Apr 27, 2011 at 4:48 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Apr 27, 2011, at 3:28 AM, Dfgqq Dfgqq wrote:
>
> > Hi All
> >
> >       Currently, i am planning rewrite some parts with twisted & iocp.
> These parts are related
> > to Tcp connection without SSL.  I want to know whether IOCP is ready for
> production or not.
>
> Yes.  Many people use it in production.
>
> >    I ran some tests with twisted 10.20, 8.10 before. The IOCP part had
> many problems. I haven't give a try with 11.0. What is the progress for
> windows support?
>
> Can you provide links to the bug reports you filed when you encountered
> problems with the IOCP reactor in 8.1.0 and 10.2.0?  Then I can tell you if
> they were closed in 11.0 or not.
>
> Thanks,
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110427/329f056b/attachment.html>

From hs at ox.cx  Wed Apr 27 12:48:13 2011
From: hs at ox.cx (Hynek Schlawack)
Date: Wed, 27 Apr 2011 20:48:13 +0200
Subject: [Twisted-Python] Anyone ever used successfully sqlanydb together
	with Twisted and adbapi?
Message-ID: <BANLkTi=x5+R7c5pmJr989EM-DBWY+6mqxw@mail.gmail.com>

Hi,

I've essentially written a whois daemon that serves via TCP as well as
via web, fetching its data from a sqlanywhere 12 server, using the
official sqlanydb driver.

Everything works fine except for occasional SIGABRTs (or inside of
gdb: SIGSEGVs inside of the sqlanywhere binary driver) in the first
query. If that one works, it keeps running.
 However it's impossible to run tests as at some point it always
crashes while doing queries because I recreate the pool for every
test.

Essentially I get a domain record from the database and fetch some
related data afterward. I tried to implement it using DeferredList and
using runInteraction and it always aborts before doing the second
query. I've already posted some code and gdb backtraces to
stackoverflow: http://stackoverflow.com/questions/5790435/python-twisted-sqlanydb-abort
maybe there's some helpful data I missed here. To stress it: The
lookup of the domain record usually works. It's the following defers
that crash my application.

My essential question is: Has someone already used Twisted and
SQLAnywhere together successfully? Is it me or is it sqlanywhere or
even Twisted? What are my options?

TIA,
-h



From smirnov.andrey at gmail.com  Wed Apr 27 23:31:23 2011
From: smirnov.andrey at gmail.com (Andrey Smirnov)
Date: Thu, 28 Apr 2011 09:31:23 +0400
Subject: [Twisted-Python] [ANN] txZMQ released
Message-ID: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>

Hi!

I would like to announce txZMQ, ZeroMQ bindings for Twisted. txZMQ is based
on pyzmq and requires recent ØMQ version (>=2.1).

txZMQ uses ØMQ APIs to get file descriptor that is used to signal pending
actions from ØMQ library IO thread running in separate thread. txZMQ should
be usable with any Twisted reactor.

ØMQ is:
 *  The socket library that acts as a concurrency framework.
 *  Carries messages across inproc, IPC, TCP, and multicast.
 *  Connect N-to-N via fanout, pubsub, pipeline, request-reply.
 *  Fast enough for clustered products and supercomputing.
 *  Asynch I/O for scalable multicore message-passing apps.

Bridging ØMQ and Twisted makes a nice match: fast simple messaging between
Twisted instances solving complex problems :)

Links:
   * PyPi: http://pypi.python.org/pypi/txZMQ/
   * Source code: https://github.com/smira/pyzmq
   * pyzmq: http://pypi.python.org/pypi/pyzmq
   * ØMQ: http://www.zeromq.org/

-- 
Andrey Smirnov,
Qik Web Team Lead
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110428/52cfd0bd/attachment-0001.html>

From _ at lvh.cc  Thu Apr 28 04:24:09 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Thu, 28 Apr 2011 12:24:09 +0200
Subject: [Twisted-Python] [ANN] txZMQ released
In-Reply-To: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>
References: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>
Message-ID: <BANLkTi=n=m=15sxLDru5ywM_gPhjfLEDug@mail.gmail.com>

This is quite exciting! Thanks a lot for writing this, Andrey.

I noticed that you put it in the same package name (pyzmq, not tx0MQ or
anything). Is the goal to get this merged back upstream? (That would be
extra great :-))

thanks again for your awesome efforts (I will take this for a spin soon),
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110428/0956823f/attachment.html>

From smirnov.andrey at gmail.com  Thu Apr 28 06:25:10 2011
From: smirnov.andrey at gmail.com (Andrey Smirnov)
Date: Thu, 28 Apr 2011 16:25:10 +0400
Subject: [Twisted-Python] [ANN] txZMQ released
In-Reply-To: <BANLkTi=n=m=15sxLDru5ywM_gPhjfLEDug@mail.gmail.com>
References: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>
	<BANLkTi=n=m=15sxLDru5ywM_gPhjfLEDug@mail.gmail.com>
Message-ID: <BANLkTinpiAw1eQoLCTd5KD6_=K0Us_4BDQ@mail.gmail.com>

Laurens,

Oops, I've posted wrong link to github: https://github.com/smira/txZMQ

(I've posted link to first draft which has been actually fork of pyzmq, but
turned out it would be easier to keep it as a separate package)

2011/4/28 Laurens Van Houtven <_ at lvh.cc>

> This is quite exciting! Thanks a lot for writing this, Andrey.
>
> I noticed that you put it in the same package name (pyzmq, not tx0MQ or
> anything). Is the goal to get this merged back upstream? (That would be
> extra great :-))
>
> thanks again for your awesome efforts (I will take this for a spin soon),
> lvh
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Andrey Smirnov,
Qik Web Team Lead
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110428/1644e7c4/attachment.html>

From _ at lvh.cc  Thu Apr 28 06:40:12 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Thu, 28 Apr 2011 14:40:12 +0200
Subject: [Twisted-Python] [ANN] txZMQ released
In-Reply-To: <BANLkTinpiAw1eQoLCTd5KD6_=K0Us_4BDQ@mail.gmail.com>
References: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>
	<BANLkTi=n=m=15sxLDru5ywM_gPhjfLEDug@mail.gmail.com>
	<BANLkTinpiAw1eQoLCTd5KD6_=K0Us_4BDQ@mail.gmail.com>
Message-ID: <BANLkTi=nh89QAP9gEHhhBYwpc6gYdNZAsA@mail.gmail.com>

Yeah, I saw that one and got confused. Just to be clear, I'm supposed to
ignore your pyzmq fork, right?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110428/14474231/attachment.html>

From smirnov.andrey at gmail.com  Thu Apr 28 06:53:47 2011
From: smirnov.andrey at gmail.com (Andrey Smirnov)
Date: Thu, 28 Apr 2011 16:53:47 +0400
Subject: [Twisted-Python] [ANN] txZMQ released
In-Reply-To: <BANLkTi=nh89QAP9gEHhhBYwpc6gYdNZAsA@mail.gmail.com>
References: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>
	<BANLkTi=n=m=15sxLDru5ywM_gPhjfLEDug@mail.gmail.com>
	<BANLkTinpiAw1eQoLCTd5KD6_=K0Us_4BDQ@mail.gmail.com>
	<BANLkTi=nh89QAP9gEHhhBYwpc6gYdNZAsA@mail.gmail.com>
Message-ID: <BANLkTikOYFHB3OdswoZpTU6C-aNo-G0MkQ@mail.gmail.com>

Yes, I'll drop it as soon as I won't need it anymore (probably in one week).

2011/4/28 Laurens Van Houtven <_ at lvh.cc>

> Yeah, I saw that one and got confused. Just to be clear, I'm supposed to
> ignore your pyzmq fork, right?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Andrey Smirnov,
Qik Web Team Lead
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110428/f050da92/attachment.html>

From albert.brandl at weiermayer.com  Thu Apr 28 08:22:24 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Thu, 28 Apr 2011 16:22:24 +0200
Subject: [Twisted-Python] Question about StreamServerEndpointService
In-Reply-To: <940E3BEC-ABA0-4340-82A7-A809B629993F@twistedmatrix.com>
References: <20110426102142.GA12757@weiermayer.com>
	<5E571F9A-1408-4D6E-9E69-BC9AEB7B418B@twistedmatrix.com>
	<20110427082627.GA5676@weiermayer.com>
	<940E3BEC-ABA0-4340-82A7-A809B629993F@twistedmatrix.com>
Message-ID: <20110428142224.GA15929@weiermayer.com>

On Wed, Apr 27, 2011 at 04:50:17AM -0400, Glyph Lefkowitz wrote:
> Thanks a lot.  If you'd like to contribute a patch, of course, that would be
> doubly appreciated :).

I already thought about doing so. But my experience shows that patches
usually take some rounds to be accepted, and I'd prefer to do this when
I have more time (which will hopefully be the case in some weeks).

Regards,
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistraße 12, A-4813 Altmünster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com



From burslem2001 at yahoo.com  Thu Apr 28 14:18:53 2011
From: burslem2001 at yahoo.com (gary clark)
Date: Thu, 28 Apr 2011 13:18:53 -0700 (PDT)
Subject: [Twisted-Python] problems with transport.write
In-Reply-To: <BANLkTikOYFHB3OdswoZpTU6C-aNo-G0MkQ@mail.gmail.com>
Message-ID: <564959.17182.qm@web112512.mail.gq1.yahoo.com>

Hiya,
 
I have created a client-server application which uses ssl to communicate.
 
I am trying to determine if its the server or client. However its definetly sending a string in the connection.transport.write to the target client.
 
The majority of the time is sends and receives, but occasionally it fails.
Is there a way (other than the client sending an ACK with a sequence number in it) to know if the write was successful and if not resend.
 
Much appreciated,
Gary C
 
 
 


--- On Thu, 4/28/11, Andrey Smirnov <smirnov.andrey at gmail.com> wrote:


From: Andrey Smirnov <smirnov.andrey at gmail.com>
Subject: Re: [Twisted-Python] [ANN] txZMQ released
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Date: Thursday, April 28, 2011, 7:53 AM


Yes, I'll drop it as soon as I won't need it anymore (probably in one week).


2011/4/28 Laurens Van Houtven <_ at lvh.cc>

Yeah, I saw that one and got confused. Just to be clear, I'm supposed to ignore your pyzmq fork, right?

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




-- 
Andrey Smirnov,
Qik Web Team Lead

-----Inline Attachment Follows-----


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110428/181ad2b1/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Apr 28 17:43:23 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 28 Apr 2011 19:43:23 -0400
Subject: [Twisted-Python] problems with transport.write
In-Reply-To: <564959.17182.qm@web112512.mail.gq1.yahoo.com>
References: <564959.17182.qm@web112512.mail.gq1.yahoo.com>
Message-ID: <B0CE469C-6609-4B23-A0E4-F9FA235FC3F6@twistedmatrix.com>


On Apr 28, 2011, at 4:18 PM, gary clark wrote:

> Hiya,
>  
> I have created a client-server application which uses ssl to communicate.
>  
> I am trying to determine if its the server or client. However its definetly sending a string in the connection.transport.write to the target client.

Trying to determine what is the server or the client?

> The majority of the time is sends and receives, but occasionally it fails.

Fails how?

> Is there a way (other than the client sending an ACK with a sequence number in it) to know if the write was successful and if not resend.

If you're using SSL, then you're using TCP, which transparently _does_ send an ACK with a sequence number in it.  You never have to re-send TCP segments at the application layer, that would result in a stream with duplicate data in it.

Please be more specific about the problem you're having, so we can find an answer :).

-g




From burslem2001 at yahoo.com  Thu Apr 28 18:39:44 2011
From: burslem2001 at yahoo.com (gary clark)
Date: Thu, 28 Apr 2011 17:39:44 -0700 (PDT)
Subject: [Twisted-Python] problems with transport.write
In-Reply-To: <B0CE469C-6609-4B23-A0E4-F9FA235FC3F6@twistedmatrix.com>
Message-ID: <812695.4650.qm@web112519.mail.gq1.yahoo.com>

Much appreciated on the quick response.

It fails by writing a large string at the server side and not receiving any data at the client. The client uses open-ssl and is blocking to receive data. I dont know if its possible to determine if the write was successful or not on the server side i.e knowing how many bytes were written etc. I dont see any exceptions. The connection is still maintained and like I said its intermittent. So when a transport.write occurs is there an api I can use to see if it was successful?

I'm trying to isolate if its a server problem or a client issue at the moment.

Thanks,

Gary C

--- On Thu, 4/28/11, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> From: Glyph Lefkowitz <glyph at twistedmatrix.com>
> Subject: Re: [Twisted-Python] problems with transport.write
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Thursday, April 28, 2011, 6:43 PM
> 
> On Apr 28, 2011, at 4:18 PM, gary clark wrote:
> 
> > Hiya,
> >  
> > I have created a client-server application which uses
> ssl to communicate.
> >  
> > I am trying to determine if its the server or client.
> However its definetly sending a string in the
> connection.transport.write to the target client.
> 
> Trying to determine what is the server or the client?
> 
> > The majority of the time is sends and receives, but
> occasionally it fails.
> 
> Fails how?
> 
> > Is there a way (other than the client sending an ACK
> with a sequence number in it) to know if the write was
> successful and if not resend.
> 
> If you're using SSL, then you're using TCP, which
> transparently _does_ send an ACK with a sequence number in
> it.  You never have to re-send TCP segments at the
> application layer, that would result in a stream with
> duplicate data in it.
> 
> Please be more specific about the problem you're having, so
> we can find an answer :).
> 
> -g
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From andrew at bemusement.org  Thu Apr 28 19:57:46 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Fri, 29 Apr 2011 11:57:46 +1000
Subject: [Twisted-Python] problems with transport.write
In-Reply-To: <812695.4650.qm@web112519.mail.gq1.yahoo.com>
References: <B0CE469C-6609-4B23-A0E4-F9FA235FC3F6@twistedmatrix.com>
	<812695.4650.qm@web112519.mail.gq1.yahoo.com>
Message-ID: <20110429015745.GG3700@aihal.home.puzzling.org>

gary clark wrote:
> Much appreciated on the quick response.
> 
> It fails by writing a large string at the server side and not receiving any
> data at the client. The client uses open-ssl and is blocking to receive data.
> I dont know if its possible to determine if the write was successful or not on
> the server side i.e knowing how many bytes were written etc. I dont see any
> exceptions. The connection is still maintained and like I said its
> intermittent. So when a transport.write occurs is there an api I can use to
> see if it was successful?
> 
> I'm trying to isolate if its a server problem or a client issue at the moment.

Most platforms' socket APIs don't provide a convenient (or necessarily any) way
to see how much data has been ACKed by the peer (which I assume is what you mean
by “if the write was successful”).  So Twisted doesn't have any API for
reporting that to you either.

The usual way to observe how much data was sent is to run tcpdump (or wireshark
or simliar).  Similarly to observe how much data is received run tcpdump on the
receiver.  If there's a discrepancy then something between those two points is
losing your data.

Intermittent failures involving large writes may be a PMTU issue on your
network.  Try reducing the MTU value on your router(s) perhaps.

-Andrew.




From dynamicgl at gmail.com  Fri Apr 29 04:24:50 2011
From: dynamicgl at gmail.com (Dfgqq Dfgqq)
Date: Fri, 29 Apr 2011 18:24:50 +0800
Subject: [Twisted-Python] Fwd:  Did anyone use twisted on windows (IOCP)?
In-Reply-To: <BANLkTin=Ncs72rqojk_sZDejFROB5uj=Hw@mail.gmail.com>
References: <BANLkTi=YSPioN=WUJ4XnhUpowXzXAjav7w@mail.gmail.com>
	<944E490A-E548-4C98-B725-816C80AAFF81@twistedmatrix.com>
	<BANLkTin=Ncs72rqojk_sZDejFROB5uj=Hw@mail.gmail.com>
Message-ID: <BANLkTi=x4OijMyLZi1vRHeGAhyza_rm=Sg@mail.gmail.com>

---------- Forwarded message ----------
From: Dfgqq Dfgqq <dynamicgl at gmail.com>
Date: Wed, Apr 27, 2011 at 11:11 PM
Subject: Re: [Twisted-Python] Did anyone use twisted on windows (IOCP)?
To: Twisted general discussion <twisted-python at twistedmatrix.com>


Hi glyph

   Thanks for your replying.. I didn't say it was a bug because it probably
caused by some incorrect usages.


my problem was:

we have thousands of machines connect on the server via tcp (the number of
machines might be varied from 3000 to 7000). all connections are long
connection which means server must hold the connections except the network
is broken. each machine send some data per second. when i trying to use
twisted as the server part, i noticed some connections lost after one hour.
I have tried 8.x and 10.20, connections lost still existed; however, this
problem didn't exist anymore with Twisted 11.0. This is the reason i was
curious: what Twisted 11.0 did to solve my problem?

      I noticed the news for 11.0 has one line about IOCP:

 *IOCPReactor now sends immediate completions to the main loop (#3233)* *
*

I guess it might be the reason. Now the latest version of twisted is working
fine. I really like it.

Regards

GELIN YAN

On Wed, Apr 27, 2011 at 4:48 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Apr 27, 2011, at 3:28 AM, Dfgqq Dfgqq wrote:
>
> > Hi All
> >
> >       Currently, i am planning rewrite some parts with twisted & iocp.
> These parts are related
> > to Tcp connection without SSL.  I want to know whether IOCP is ready for
> production or not.
>
> Yes.  Many people use it in production.
>
> >    I ran some tests with twisted 10.20, 8.10 before. The IOCP part had
> many problems. I haven't give a try with 11.0. What is the progress for
> windows support?
>
> Can you provide links to the bug reports you filed when you encountered
> problems with the IOCP reactor in 8.1.0 and 10.2.0?  Then I can tell you if
> they were closed in 11.0 or not.
>
> Thanks,
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110429/15977b87/attachment.html>

From alexandre at quessy.net  Fri Apr 29 08:27:02 2011
From: alexandre at quessy.net (Alexandre Quessy)
Date: Fri, 29 Apr 2011 10:27:02 -0400
Subject: [Twisted-Python] Ubuntu package of Twisted 11.0 for Lucid
Message-ID: <BANLkTi=d5_+sHhUmSeoa8csMnxPCrrnKow@mail.gmail.com>

Hello everyone,
I just made a Ubuntu package of Twisted 11.0 or Ubuntu Lucid (10.04)
and put in on a PPA:
https://launchpad.net/~sat-metalab/+archive/metalab

To install it, simply do this:

sudo add-apt-repository ppa:sat-metalab/metalab
sudo apt-get update
sudo apt-get install python-twisted-core

Once enough people tested it, someone could copy it to the official
Twisted PPA. And then, we can build it for Ubuntu Maverick as well.

There is only one doubt I have, that should be sorted out quite soon.
We will keep this mailing list updated.
Best regards,
-- 
Alexandre Quessy
http://alexandre.quessy.net/



From jrennie at gmail.com  Sat Apr 30 08:29:50 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Sat, 30 Apr 2011 10:29:50 -0400
Subject: [Twisted-Python] problems with transport.write
In-Reply-To: <812695.4650.qm@web112519.mail.gq1.yahoo.com>
References: <B0CE469C-6609-4B23-A0E4-F9FA235FC3F6@twistedmatrix.com>
	<812695.4650.qm@web112519.mail.gq1.yahoo.com>
Message-ID: <BANLkTimPf2EvkqrHEhJOg-Bf9+djp_GOxg@mail.gmail.com>

On Thu, Apr 28, 2011 at 8:39 PM, gary clark <burslem2001 at yahoo.com> wrote:

> It fails by writing a large string at the server side and not receiving any
> data at the client. The client uses open-ssl and is blocking to receive
> data. I dont know if its possible to determine if the write was successful
> or not on the server side i.e knowing how many bytes were written etc. I
> dont see any exceptions. The connection is still maintained and like I said
> its intermittent. So when a transport.write occurs is there an api I can use
> to see if it was successful?
>

Are you using threads on the server side?  If so, are you using
callFromThread?

http://pythonquirks.blogspot.com/2011/01/twisted-callwhenrunning-callfromthread.html

Can you create a SSCCE (http://sscce.org/) and show it to us?

Jason

-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110430/e07d9c0b/attachment-0001.html>

From exarkun at twistedmatrix.com  Sat Apr 30 22:05:23 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 01 May 2011 04:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1304222723.19.1813968102@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110501/1c6b4835/attachment-0001.html>

